
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00001000 <_vector_start>:
    1000:	200060e0 	.word	0x200060e0
    1004:	00006f81 	.word	0x00006f81
    1008:	00028c1f 	.word	0x00028c1f
    100c:	00006fb1 	.word	0x00006fb1
    1010:	00006fb1 	.word	0x00006fb1
    1014:	00006fb1 	.word	0x00006fb1
    1018:	00006fb1 	.word	0x00006fb1
	...
    102c:	00006ccd 	.word	0x00006ccd
    1030:	00006fb1 	.word	0x00006fb1
    1034:	00000000 	.word	0x00000000
    1038:	00006c75 	.word	0x00006c75
    103c:	00006521 	.word	0x00006521

00001040 <_irq_vector_table>:
    1040:	00006f41 0002c24f 00006f41 00006f41     Ao..O...Ao..Ao..
    1050:	00006f41 00006f41 00006f41 00006f41     Ao..Ao..Ao..Ao..
    1060:	00006f41 00006f41 00006f41 00006f41     Ao..Ao..Ao..Ao..
    1070:	00006f41 00006f41 00006f41 00006f41     Ao..Ao..Ao..Ao..
    1080:	00006f41 00006f41 00006f41 00006f41     Ao..Ao..Ao..Ao..
    1090:	00006f41 00006f41 00006f41 00006f41     Ao..Ao..Ao..Ao..
    10a0:	00006f41 00006f41 00006f41 00006f41     Ao..Ao..Ao..Ao..
    10b0:	00006f41 00006f41 00006f41 00006f41     Ao..Ao..Ao..Ao..
    10c0:	00006f41 00006f41 00006f41 00006f41     Ao..Ao..Ao..Ao..
    10d0:	00006f41 00006f41 00006f41 00006f41     Ao..Ao..Ao..Ao..
    10e0:	00006f41 00006f41 00006f41 00006f41     Ao..Ao..Ao..Ao..
    10f0:	00006f41 00006f41 00006f41 00006f41     Ao..Ao..Ao..Ao..

Disassembly of section text:

00001100 <memchr>:
    1100:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    1104:	2a10      	cmp	r2, #16
    1106:	db2b      	blt.n	1160 <memchr+0x60>
    1108:	f010 0f07 	tst.w	r0, #7
    110c:	d008      	beq.n	1120 <memchr+0x20>
    110e:	f810 3b01 	ldrb.w	r3, [r0], #1
    1112:	3a01      	subs	r2, #1
    1114:	428b      	cmp	r3, r1
    1116:	d02d      	beq.n	1174 <memchr+0x74>
    1118:	f010 0f07 	tst.w	r0, #7
    111c:	b342      	cbz	r2, 1170 <memchr+0x70>
    111e:	d1f6      	bne.n	110e <memchr+0xe>
    1120:	b4f0      	push	{r4, r5, r6, r7}
    1122:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    1126:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    112a:	f022 0407 	bic.w	r4, r2, #7
    112e:	f07f 0700 	mvns.w	r7, #0
    1132:	2300      	movs	r3, #0
    1134:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    1138:	3c08      	subs	r4, #8
    113a:	ea85 0501 	eor.w	r5, r5, r1
    113e:	ea86 0601 	eor.w	r6, r6, r1
    1142:	fa85 f547 	uadd8	r5, r5, r7
    1146:	faa3 f587 	sel	r5, r3, r7
    114a:	fa86 f647 	uadd8	r6, r6, r7
    114e:	faa5 f687 	sel	r6, r5, r7
    1152:	b98e      	cbnz	r6, 1178 <memchr+0x78>
    1154:	d1ee      	bne.n	1134 <memchr+0x34>
    1156:	bcf0      	pop	{r4, r5, r6, r7}
    1158:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    115c:	f002 0207 	and.w	r2, r2, #7
    1160:	b132      	cbz	r2, 1170 <memchr+0x70>
    1162:	f810 3b01 	ldrb.w	r3, [r0], #1
    1166:	3a01      	subs	r2, #1
    1168:	ea83 0301 	eor.w	r3, r3, r1
    116c:	b113      	cbz	r3, 1174 <memchr+0x74>
    116e:	d1f8      	bne.n	1162 <memchr+0x62>
    1170:	2000      	movs	r0, #0
    1172:	4770      	bx	lr
    1174:	3801      	subs	r0, #1
    1176:	4770      	bx	lr
    1178:	2d00      	cmp	r5, #0
    117a:	bf06      	itte	eq
    117c:	4635      	moveq	r5, r6
    117e:	3803      	subeq	r0, #3
    1180:	3807      	subne	r0, #7
    1182:	f015 0f01 	tst.w	r5, #1
    1186:	d107      	bne.n	1198 <memchr+0x98>
    1188:	3001      	adds	r0, #1
    118a:	f415 7f80 	tst.w	r5, #256	; 0x100
    118e:	bf02      	ittt	eq
    1190:	3001      	addeq	r0, #1
    1192:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    1196:	3001      	addeq	r0, #1
    1198:	bcf0      	pop	{r4, r5, r6, r7}
    119a:	3801      	subs	r0, #1
    119c:	4770      	bx	lr
    119e:	bf00      	nop

000011a0 <__aeabi_drsub>:
    11a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    11a4:	e002      	b.n	11ac <__adddf3>
    11a6:	bf00      	nop

000011a8 <__aeabi_dsub>:
    11a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000011ac <__adddf3>:
    11ac:	b530      	push	{r4, r5, lr}
    11ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
    11b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
    11b6:	ea94 0f05 	teq	r4, r5
    11ba:	bf08      	it	eq
    11bc:	ea90 0f02 	teqeq	r0, r2
    11c0:	bf1f      	itttt	ne
    11c2:	ea54 0c00 	orrsne.w	ip, r4, r0
    11c6:	ea55 0c02 	orrsne.w	ip, r5, r2
    11ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    11ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    11d2:	f000 80e2 	beq.w	139a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x12>
    11d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
    11da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    11de:	bfb8      	it	lt
    11e0:	426d      	neglt	r5, r5
    11e2:	dd0c      	ble.n	11fe <__adddf3+0x52>
    11e4:	442c      	add	r4, r5
    11e6:	ea80 0202 	eor.w	r2, r0, r2
    11ea:	ea81 0303 	eor.w	r3, r1, r3
    11ee:	ea82 0000 	eor.w	r0, r2, r0
    11f2:	ea83 0101 	eor.w	r1, r3, r1
    11f6:	ea80 0202 	eor.w	r2, r0, r2
    11fa:	ea81 0303 	eor.w	r3, r1, r3
    11fe:	2d36      	cmp	r5, #54	; 0x36
    1200:	bf88      	it	hi
    1202:	bd30      	pophi	{r4, r5, pc}
    1204:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    1208:	ea4f 3101 	mov.w	r1, r1, lsl #12
    120c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    1210:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    1214:	d002      	beq.n	121c <__adddf3+0x70>
    1216:	4240      	negs	r0, r0
    1218:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    121c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    1220:	ea4f 3303 	mov.w	r3, r3, lsl #12
    1224:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    1228:	d002      	beq.n	1230 <__adddf3+0x84>
    122a:	4252      	negs	r2, r2
    122c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1230:	ea94 0f05 	teq	r4, r5
    1234:	f000 80a7 	beq.w	1386 <__adddf3+0x1da>
    1238:	f1a4 0401 	sub.w	r4, r4, #1
    123c:	f1d5 0e20 	rsbs	lr, r5, #32
    1240:	db0d      	blt.n	125e <__adddf3+0xb2>
    1242:	fa02 fc0e 	lsl.w	ip, r2, lr
    1246:	fa22 f205 	lsr.w	r2, r2, r5
    124a:	1880      	adds	r0, r0, r2
    124c:	f141 0100 	adc.w	r1, r1, #0
    1250:	fa03 f20e 	lsl.w	r2, r3, lr
    1254:	1880      	adds	r0, r0, r2
    1256:	fa43 f305 	asr.w	r3, r3, r5
    125a:	4159      	adcs	r1, r3
    125c:	e00e      	b.n	127c <__adddf3+0xd0>
    125e:	f1a5 0520 	sub.w	r5, r5, #32
    1262:	f10e 0e20 	add.w	lr, lr, #32
    1266:	2a01      	cmp	r2, #1
    1268:	fa03 fc0e 	lsl.w	ip, r3, lr
    126c:	bf28      	it	cs
    126e:	f04c 0c02 	orrcs.w	ip, ip, #2
    1272:	fa43 f305 	asr.w	r3, r3, r5
    1276:	18c0      	adds	r0, r0, r3
    1278:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    127c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    1280:	d507      	bpl.n	1292 <__adddf3+0xe6>
    1282:	f04f 0e00 	mov.w	lr, #0
    1286:	f1dc 0c00 	rsbs	ip, ip, #0
    128a:	eb7e 0000 	sbcs.w	r0, lr, r0
    128e:	eb6e 0101 	sbc.w	r1, lr, r1
    1292:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    1296:	d31b      	bcc.n	12d0 <__adddf3+0x124>
    1298:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    129c:	d30c      	bcc.n	12b8 <__adddf3+0x10c>
    129e:	0849      	lsrs	r1, r1, #1
    12a0:	ea5f 0030 	movs.w	r0, r0, rrx
    12a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
    12a8:	f104 0401 	add.w	r4, r4, #1
    12ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
    12b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    12b4:	f080 809a 	bcs.w	13ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x64>
    12b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    12bc:	bf08      	it	eq
    12be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    12c2:	f150 0000 	adcs.w	r0, r0, #0
    12c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    12ca:	ea41 0105 	orr.w	r1, r1, r5
    12ce:	bd30      	pop	{r4, r5, pc}
    12d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    12d4:	4140      	adcs	r0, r0
    12d6:	eb41 0101 	adc.w	r1, r1, r1
    12da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    12de:	f1a4 0401 	sub.w	r4, r4, #1
    12e2:	d1e9      	bne.n	12b8 <__adddf3+0x10c>
    12e4:	f091 0f00 	teq	r1, #0
    12e8:	bf04      	itt	eq
    12ea:	4601      	moveq	r1, r0
    12ec:	2000      	moveq	r0, #0
    12ee:	fab1 f381 	clz	r3, r1
    12f2:	bf08      	it	eq
    12f4:	3320      	addeq	r3, #32
    12f6:	f1a3 030b 	sub.w	r3, r3, #11
    12fa:	f1b3 0220 	subs.w	r2, r3, #32
    12fe:	da0c      	bge.n	131a <__adddf3+0x16e>
    1300:	320c      	adds	r2, #12
    1302:	dd08      	ble.n	1316 <__adddf3+0x16a>
    1304:	f102 0c14 	add.w	ip, r2, #20
    1308:	f1c2 020c 	rsb	r2, r2, #12
    130c:	fa01 f00c 	lsl.w	r0, r1, ip
    1310:	fa21 f102 	lsr.w	r1, r1, r2
    1314:	e00c      	b.n	1330 <__adddf3+0x184>
    1316:	f102 0214 	add.w	r2, r2, #20
    131a:	bfd8      	it	le
    131c:	f1c2 0c20 	rsble	ip, r2, #32
    1320:	fa01 f102 	lsl.w	r1, r1, r2
    1324:	fa20 fc0c 	lsr.w	ip, r0, ip
    1328:	bfdc      	itt	le
    132a:	ea41 010c 	orrle.w	r1, r1, ip
    132e:	4090      	lslle	r0, r2
    1330:	1ae4      	subs	r4, r4, r3
    1332:	bfa2      	ittt	ge
    1334:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    1338:	4329      	orrge	r1, r5
    133a:	bd30      	popge	{r4, r5, pc}
    133c:	ea6f 0404 	mvn.w	r4, r4
    1340:	3c1f      	subs	r4, #31
    1342:	da1c      	bge.n	137e <__adddf3+0x1d2>
    1344:	340c      	adds	r4, #12
    1346:	dc0e      	bgt.n	1366 <__adddf3+0x1ba>
    1348:	f104 0414 	add.w	r4, r4, #20
    134c:	f1c4 0220 	rsb	r2, r4, #32
    1350:	fa20 f004 	lsr.w	r0, r0, r4
    1354:	fa01 f302 	lsl.w	r3, r1, r2
    1358:	ea40 0003 	orr.w	r0, r0, r3
    135c:	fa21 f304 	lsr.w	r3, r1, r4
    1360:	ea45 0103 	orr.w	r1, r5, r3
    1364:	bd30      	pop	{r4, r5, pc}
    1366:	f1c4 040c 	rsb	r4, r4, #12
    136a:	f1c4 0220 	rsb	r2, r4, #32
    136e:	fa20 f002 	lsr.w	r0, r0, r2
    1372:	fa01 f304 	lsl.w	r3, r1, r4
    1376:	ea40 0003 	orr.w	r0, r0, r3
    137a:	4629      	mov	r1, r5
    137c:	bd30      	pop	{r4, r5, pc}
    137e:	fa21 f004 	lsr.w	r0, r1, r4
    1382:	4629      	mov	r1, r5
    1384:	bd30      	pop	{r4, r5, pc}
    1386:	f094 0f00 	teq	r4, #0
    138a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    138e:	bf06      	itte	eq
    1390:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    1394:	3401      	addeq	r4, #1
    1396:	3d01      	subne	r5, #1
    1398:	e74e      	b.n	1238 <__adddf3+0x8c>
    139a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    139e:	bf18      	it	ne
    13a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    13a4:	d029      	beq.n	13fa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x72>
    13a6:	ea94 0f05 	teq	r4, r5
    13aa:	bf08      	it	eq
    13ac:	ea90 0f02 	teqeq	r0, r2
    13b0:	d005      	beq.n	13be <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x36>
    13b2:	ea54 0c00 	orrs.w	ip, r4, r0
    13b6:	bf04      	itt	eq
    13b8:	4619      	moveq	r1, r3
    13ba:	4610      	moveq	r0, r2
    13bc:	bd30      	pop	{r4, r5, pc}
    13be:	ea91 0f03 	teq	r1, r3
    13c2:	bf1e      	ittt	ne
    13c4:	2100      	movne	r1, #0
    13c6:	2000      	movne	r0, #0
    13c8:	bd30      	popne	{r4, r5, pc}
    13ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    13ce:	d105      	bne.n	13dc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x54>
    13d0:	0040      	lsls	r0, r0, #1
    13d2:	4149      	adcs	r1, r1
    13d4:	bf28      	it	cs
    13d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    13da:	bd30      	pop	{r4, r5, pc}
    13dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    13e0:	bf3c      	itt	cc
    13e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    13e6:	bd30      	popcc	{r4, r5, pc}
    13e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    13ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    13f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    13f4:	f04f 0000 	mov.w	r0, #0
    13f8:	bd30      	pop	{r4, r5, pc}
    13fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    13fe:	bf1a      	itte	ne
    1400:	4619      	movne	r1, r3
    1402:	4610      	movne	r0, r2
    1404:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    1408:	bf1c      	itt	ne
    140a:	460b      	movne	r3, r1
    140c:	4602      	movne	r2, r0
    140e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    1412:	bf06      	itte	eq
    1414:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    1418:	ea91 0f03 	teqeq	r1, r3
    141c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    1420:	bd30      	pop	{r4, r5, pc}
    1422:	bf00      	nop

00001424 <__aeabi_ui2d>:
    1424:	f090 0f00 	teq	r0, #0
    1428:	bf04      	itt	eq
    142a:	2100      	moveq	r1, #0
    142c:	4770      	bxeq	lr
    142e:	b530      	push	{r4, r5, lr}
    1430:	f44f 6480 	mov.w	r4, #1024	; 0x400
    1434:	f104 0432 	add.w	r4, r4, #50	; 0x32
    1438:	f04f 0500 	mov.w	r5, #0
    143c:	f04f 0100 	mov.w	r1, #0
    1440:	e750      	b.n	12e4 <__adddf3+0x138>
    1442:	bf00      	nop

00001444 <__aeabi_i2d>:
    1444:	f090 0f00 	teq	r0, #0
    1448:	bf04      	itt	eq
    144a:	2100      	moveq	r1, #0
    144c:	4770      	bxeq	lr
    144e:	b530      	push	{r4, r5, lr}
    1450:	f44f 6480 	mov.w	r4, #1024	; 0x400
    1454:	f104 0432 	add.w	r4, r4, #50	; 0x32
    1458:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    145c:	bf48      	it	mi
    145e:	4240      	negmi	r0, r0
    1460:	f04f 0100 	mov.w	r1, #0
    1464:	e73e      	b.n	12e4 <__adddf3+0x138>
    1466:	bf00      	nop

00001468 <__aeabi_f2d>:
    1468:	0042      	lsls	r2, r0, #1
    146a:	ea4f 01e2 	mov.w	r1, r2, asr #3
    146e:	ea4f 0131 	mov.w	r1, r1, rrx
    1472:	ea4f 7002 	mov.w	r0, r2, lsl #28
    1476:	bf1f      	itttt	ne
    1478:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    147c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    1480:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    1484:	4770      	bxne	lr
    1486:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    148a:	bf08      	it	eq
    148c:	4770      	bxeq	lr
    148e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    1492:	bf04      	itt	eq
    1494:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    1498:	4770      	bxeq	lr
    149a:	b530      	push	{r4, r5, lr}
    149c:	f44f 7460 	mov.w	r4, #896	; 0x380
    14a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    14a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    14a8:	e71c      	b.n	12e4 <__adddf3+0x138>
    14aa:	bf00      	nop

000014ac <__aeabi_ul2d>:
    14ac:	ea50 0201 	orrs.w	r2, r0, r1
    14b0:	bf08      	it	eq
    14b2:	4770      	bxeq	lr
    14b4:	b530      	push	{r4, r5, lr}
    14b6:	f04f 0500 	mov.w	r5, #0
    14ba:	e00a      	b.n	14d2 <__aeabi_l2d+0x16>

000014bc <__aeabi_l2d>:
    14bc:	ea50 0201 	orrs.w	r2, r0, r1
    14c0:	bf08      	it	eq
    14c2:	4770      	bxeq	lr
    14c4:	b530      	push	{r4, r5, lr}
    14c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    14ca:	d502      	bpl.n	14d2 <__aeabi_l2d+0x16>
    14cc:	4240      	negs	r0, r0
    14ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    14d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
    14d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
    14da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    14de:	f43f aed8 	beq.w	1292 <__adddf3+0xe6>
    14e2:	f04f 0203 	mov.w	r2, #3
    14e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    14ea:	bf18      	it	ne
    14ec:	3203      	addne	r2, #3
    14ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    14f2:	bf18      	it	ne
    14f4:	3203      	addne	r2, #3
    14f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    14fa:	f1c2 0320 	rsb	r3, r2, #32
    14fe:	fa00 fc03 	lsl.w	ip, r0, r3
    1502:	fa20 f002 	lsr.w	r0, r0, r2
    1506:	fa01 fe03 	lsl.w	lr, r1, r3
    150a:	ea40 000e 	orr.w	r0, r0, lr
    150e:	fa21 f102 	lsr.w	r1, r1, r2
    1512:	4414      	add	r4, r2
    1514:	e6bd      	b.n	1292 <__adddf3+0xe6>
    1516:	bf00      	nop

00001518 <__aeabi_dmul>:
    1518:	b570      	push	{r4, r5, r6, lr}
    151a:	f04f 0cff 	mov.w	ip, #255	; 0xff
    151e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    1522:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    1526:	bf1d      	ittte	ne
    1528:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    152c:	ea94 0f0c 	teqne	r4, ip
    1530:	ea95 0f0c 	teqne	r5, ip
    1534:	f000 f8de 	bleq	16f4 <__aeabi_dmul+0x1dc>
    1538:	442c      	add	r4, r5
    153a:	ea81 0603 	eor.w	r6, r1, r3
    153e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    1542:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    1546:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    154a:	bf18      	it	ne
    154c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    1550:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    1554:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    1558:	d038      	beq.n	15cc <__aeabi_dmul+0xb4>
    155a:	fba0 ce02 	umull	ip, lr, r0, r2
    155e:	f04f 0500 	mov.w	r5, #0
    1562:	fbe1 e502 	umlal	lr, r5, r1, r2
    1566:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    156a:	fbe0 e503 	umlal	lr, r5, r0, r3
    156e:	f04f 0600 	mov.w	r6, #0
    1572:	fbe1 5603 	umlal	r5, r6, r1, r3
    1576:	f09c 0f00 	teq	ip, #0
    157a:	bf18      	it	ne
    157c:	f04e 0e01 	orrne.w	lr, lr, #1
    1580:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    1584:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    1588:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    158c:	d204      	bcs.n	1598 <__aeabi_dmul+0x80>
    158e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    1592:	416d      	adcs	r5, r5
    1594:	eb46 0606 	adc.w	r6, r6, r6
    1598:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    159c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    15a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    15a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    15a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    15ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    15b0:	bf88      	it	hi
    15b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    15b6:	d81e      	bhi.n	15f6 <__aeabi_dmul+0xde>
    15b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    15bc:	bf08      	it	eq
    15be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    15c2:	f150 0000 	adcs.w	r0, r0, #0
    15c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    15ca:	bd70      	pop	{r4, r5, r6, pc}
    15cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    15d0:	ea46 0101 	orr.w	r1, r6, r1
    15d4:	ea40 0002 	orr.w	r0, r0, r2
    15d8:	ea81 0103 	eor.w	r1, r1, r3
    15dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    15e0:	bfc2      	ittt	gt
    15e2:	ebd4 050c 	rsbsgt	r5, r4, ip
    15e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    15ea:	bd70      	popgt	{r4, r5, r6, pc}
    15ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    15f0:	f04f 0e00 	mov.w	lr, #0
    15f4:	3c01      	subs	r4, #1
    15f6:	f300 80ab 	bgt.w	1750 <__aeabi_dmul+0x238>
    15fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
    15fe:	bfde      	ittt	le
    1600:	2000      	movle	r0, #0
    1602:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    1606:	bd70      	pople	{r4, r5, r6, pc}
    1608:	f1c4 0400 	rsb	r4, r4, #0
    160c:	3c20      	subs	r4, #32
    160e:	da35      	bge.n	167c <__aeabi_dmul+0x164>
    1610:	340c      	adds	r4, #12
    1612:	dc1b      	bgt.n	164c <__aeabi_dmul+0x134>
    1614:	f104 0414 	add.w	r4, r4, #20
    1618:	f1c4 0520 	rsb	r5, r4, #32
    161c:	fa00 f305 	lsl.w	r3, r0, r5
    1620:	fa20 f004 	lsr.w	r0, r0, r4
    1624:	fa01 f205 	lsl.w	r2, r1, r5
    1628:	ea40 0002 	orr.w	r0, r0, r2
    162c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    1630:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    1634:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    1638:	fa21 f604 	lsr.w	r6, r1, r4
    163c:	eb42 0106 	adc.w	r1, r2, r6
    1640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    1644:	bf08      	it	eq
    1646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    164a:	bd70      	pop	{r4, r5, r6, pc}
    164c:	f1c4 040c 	rsb	r4, r4, #12
    1650:	f1c4 0520 	rsb	r5, r4, #32
    1654:	fa00 f304 	lsl.w	r3, r0, r4
    1658:	fa20 f005 	lsr.w	r0, r0, r5
    165c:	fa01 f204 	lsl.w	r2, r1, r4
    1660:	ea40 0002 	orr.w	r0, r0, r2
    1664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    1668:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    166c:	f141 0100 	adc.w	r1, r1, #0
    1670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    1674:	bf08      	it	eq
    1676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    167a:	bd70      	pop	{r4, r5, r6, pc}
    167c:	f1c4 0520 	rsb	r5, r4, #32
    1680:	fa00 f205 	lsl.w	r2, r0, r5
    1684:	ea4e 0e02 	orr.w	lr, lr, r2
    1688:	fa20 f304 	lsr.w	r3, r0, r4
    168c:	fa01 f205 	lsl.w	r2, r1, r5
    1690:	ea43 0302 	orr.w	r3, r3, r2
    1694:	fa21 f004 	lsr.w	r0, r1, r4
    1698:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    169c:	fa21 f204 	lsr.w	r2, r1, r4
    16a0:	ea20 0002 	bic.w	r0, r0, r2
    16a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    16a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    16ac:	bf08      	it	eq
    16ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    16b2:	bd70      	pop	{r4, r5, r6, pc}
    16b4:	f094 0f00 	teq	r4, #0
    16b8:	d10f      	bne.n	16da <__aeabi_dmul+0x1c2>
    16ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    16be:	0040      	lsls	r0, r0, #1
    16c0:	eb41 0101 	adc.w	r1, r1, r1
    16c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    16c8:	bf08      	it	eq
    16ca:	3c01      	subeq	r4, #1
    16cc:	d0f7      	beq.n	16be <__aeabi_dmul+0x1a6>
    16ce:	ea41 0106 	orr.w	r1, r1, r6
    16d2:	f095 0f00 	teq	r5, #0
    16d6:	bf18      	it	ne
    16d8:	4770      	bxne	lr
    16da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    16de:	0052      	lsls	r2, r2, #1
    16e0:	eb43 0303 	adc.w	r3, r3, r3
    16e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    16e8:	bf08      	it	eq
    16ea:	3d01      	subeq	r5, #1
    16ec:	d0f7      	beq.n	16de <__aeabi_dmul+0x1c6>
    16ee:	ea43 0306 	orr.w	r3, r3, r6
    16f2:	4770      	bx	lr
    16f4:	ea94 0f0c 	teq	r4, ip
    16f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    16fc:	bf18      	it	ne
    16fe:	ea95 0f0c 	teqne	r5, ip
    1702:	d00c      	beq.n	171e <__aeabi_dmul+0x206>
    1704:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    1708:	bf18      	it	ne
    170a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    170e:	d1d1      	bne.n	16b4 <__aeabi_dmul+0x19c>
    1710:	ea81 0103 	eor.w	r1, r1, r3
    1714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    1718:	f04f 0000 	mov.w	r0, #0
    171c:	bd70      	pop	{r4, r5, r6, pc}
    171e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    1722:	bf06      	itte	eq
    1724:	4610      	moveq	r0, r2
    1726:	4619      	moveq	r1, r3
    1728:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    172c:	d019      	beq.n	1762 <__aeabi_dmul+0x24a>
    172e:	ea94 0f0c 	teq	r4, ip
    1732:	d102      	bne.n	173a <__aeabi_dmul+0x222>
    1734:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    1738:	d113      	bne.n	1762 <__aeabi_dmul+0x24a>
    173a:	ea95 0f0c 	teq	r5, ip
    173e:	d105      	bne.n	174c <__aeabi_dmul+0x234>
    1740:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    1744:	bf1c      	itt	ne
    1746:	4610      	movne	r0, r2
    1748:	4619      	movne	r1, r3
    174a:	d10a      	bne.n	1762 <__aeabi_dmul+0x24a>
    174c:	ea81 0103 	eor.w	r1, r1, r3
    1750:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    1754:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    1758:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    175c:	f04f 0000 	mov.w	r0, #0
    1760:	bd70      	pop	{r4, r5, r6, pc}
    1762:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    1766:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    176a:	bd70      	pop	{r4, r5, r6, pc}

0000176c <__aeabi_ddiv>:
    176c:	b570      	push	{r4, r5, r6, lr}
    176e:	f04f 0cff 	mov.w	ip, #255	; 0xff
    1772:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    1776:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    177a:	bf1d      	ittte	ne
    177c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    1780:	ea94 0f0c 	teqne	r4, ip
    1784:	ea95 0f0c 	teqne	r5, ip
    1788:	f000 f8a7 	bleq	18da <__aeabi_ddiv+0x16e>
    178c:	eba4 0405 	sub.w	r4, r4, r5
    1790:	ea81 0e03 	eor.w	lr, r1, r3
    1794:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    1798:	ea4f 3101 	mov.w	r1, r1, lsl #12
    179c:	f000 8088 	beq.w	18b0 <__aeabi_ddiv+0x144>
    17a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
    17a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    17a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    17ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    17b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
    17b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    17b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    17bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
    17c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    17c4:	429d      	cmp	r5, r3
    17c6:	bf08      	it	eq
    17c8:	4296      	cmpeq	r6, r2
    17ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    17ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
    17d2:	d202      	bcs.n	17da <__aeabi_ddiv+0x6e>
    17d4:	085b      	lsrs	r3, r3, #1
    17d6:	ea4f 0232 	mov.w	r2, r2, rrx
    17da:	1ab6      	subs	r6, r6, r2
    17dc:	eb65 0503 	sbc.w	r5, r5, r3
    17e0:	085b      	lsrs	r3, r3, #1
    17e2:	ea4f 0232 	mov.w	r2, r2, rrx
    17e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    17ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    17ee:	ebb6 0e02 	subs.w	lr, r6, r2
    17f2:	eb75 0e03 	sbcs.w	lr, r5, r3
    17f6:	bf22      	ittt	cs
    17f8:	1ab6      	subcs	r6, r6, r2
    17fa:	4675      	movcs	r5, lr
    17fc:	ea40 000c 	orrcs.w	r0, r0, ip
    1800:	085b      	lsrs	r3, r3, #1
    1802:	ea4f 0232 	mov.w	r2, r2, rrx
    1806:	ebb6 0e02 	subs.w	lr, r6, r2
    180a:	eb75 0e03 	sbcs.w	lr, r5, r3
    180e:	bf22      	ittt	cs
    1810:	1ab6      	subcs	r6, r6, r2
    1812:	4675      	movcs	r5, lr
    1814:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    1818:	085b      	lsrs	r3, r3, #1
    181a:	ea4f 0232 	mov.w	r2, r2, rrx
    181e:	ebb6 0e02 	subs.w	lr, r6, r2
    1822:	eb75 0e03 	sbcs.w	lr, r5, r3
    1826:	bf22      	ittt	cs
    1828:	1ab6      	subcs	r6, r6, r2
    182a:	4675      	movcs	r5, lr
    182c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    1830:	085b      	lsrs	r3, r3, #1
    1832:	ea4f 0232 	mov.w	r2, r2, rrx
    1836:	ebb6 0e02 	subs.w	lr, r6, r2
    183a:	eb75 0e03 	sbcs.w	lr, r5, r3
    183e:	bf22      	ittt	cs
    1840:	1ab6      	subcs	r6, r6, r2
    1842:	4675      	movcs	r5, lr
    1844:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    1848:	ea55 0e06 	orrs.w	lr, r5, r6
    184c:	d018      	beq.n	1880 <__aeabi_ddiv+0x114>
    184e:	ea4f 1505 	mov.w	r5, r5, lsl #4
    1852:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    1856:	ea4f 1606 	mov.w	r6, r6, lsl #4
    185a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    185e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    1862:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    1866:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    186a:	d1c0      	bne.n	17ee <__aeabi_ddiv+0x82>
    186c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    1870:	d10b      	bne.n	188a <__aeabi_ddiv+0x11e>
    1872:	ea41 0100 	orr.w	r1, r1, r0
    1876:	f04f 0000 	mov.w	r0, #0
    187a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    187e:	e7b6      	b.n	17ee <__aeabi_ddiv+0x82>
    1880:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    1884:	bf04      	itt	eq
    1886:	4301      	orreq	r1, r0
    1888:	2000      	moveq	r0, #0
    188a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    188e:	bf88      	it	hi
    1890:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    1894:	f63f aeaf 	bhi.w	15f6 <__aeabi_dmul+0xde>
    1898:	ebb5 0c03 	subs.w	ip, r5, r3
    189c:	bf04      	itt	eq
    189e:	ebb6 0c02 	subseq.w	ip, r6, r2
    18a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    18a6:	f150 0000 	adcs.w	r0, r0, #0
    18aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    18ae:	bd70      	pop	{r4, r5, r6, pc}
    18b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    18b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    18b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    18bc:	bfc2      	ittt	gt
    18be:	ebd4 050c 	rsbsgt	r5, r4, ip
    18c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    18c6:	bd70      	popgt	{r4, r5, r6, pc}
    18c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    18cc:	f04f 0e00 	mov.w	lr, #0
    18d0:	3c01      	subs	r4, #1
    18d2:	e690      	b.n	15f6 <__aeabi_dmul+0xde>
    18d4:	ea45 0e06 	orr.w	lr, r5, r6
    18d8:	e68d      	b.n	15f6 <__aeabi_dmul+0xde>
    18da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    18de:	ea94 0f0c 	teq	r4, ip
    18e2:	bf08      	it	eq
    18e4:	ea95 0f0c 	teqeq	r5, ip
    18e8:	f43f af3b 	beq.w	1762 <__aeabi_dmul+0x24a>
    18ec:	ea94 0f0c 	teq	r4, ip
    18f0:	d10a      	bne.n	1908 <__aeabi_ddiv+0x19c>
    18f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    18f6:	f47f af34 	bne.w	1762 <__aeabi_dmul+0x24a>
    18fa:	ea95 0f0c 	teq	r5, ip
    18fe:	f47f af25 	bne.w	174c <__aeabi_dmul+0x234>
    1902:	4610      	mov	r0, r2
    1904:	4619      	mov	r1, r3
    1906:	e72c      	b.n	1762 <__aeabi_dmul+0x24a>
    1908:	ea95 0f0c 	teq	r5, ip
    190c:	d106      	bne.n	191c <__aeabi_ddiv+0x1b0>
    190e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    1912:	f43f aefd 	beq.w	1710 <__aeabi_dmul+0x1f8>
    1916:	4610      	mov	r0, r2
    1918:	4619      	mov	r1, r3
    191a:	e722      	b.n	1762 <__aeabi_dmul+0x24a>
    191c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    1920:	bf18      	it	ne
    1922:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    1926:	f47f aec5 	bne.w	16b4 <__aeabi_dmul+0x19c>
    192a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    192e:	f47f af0d 	bne.w	174c <__aeabi_dmul+0x234>
    1932:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    1936:	f47f aeeb 	bne.w	1710 <__aeabi_dmul+0x1f8>
    193a:	e712      	b.n	1762 <__aeabi_dmul+0x24a>

0000193c <__aeabi_d2iz>:
    193c:	ea4f 0241 	mov.w	r2, r1, lsl #1
    1940:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    1944:	d215      	bcs.n	1972 <__aeabi_d2iz+0x36>
    1946:	d511      	bpl.n	196c <__aeabi_d2iz+0x30>
    1948:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    194c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    1950:	d912      	bls.n	1978 <__aeabi_d2iz+0x3c>
    1952:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    1956:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    195a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    195e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    1962:	fa23 f002 	lsr.w	r0, r3, r2
    1966:	bf18      	it	ne
    1968:	4240      	negne	r0, r0
    196a:	4770      	bx	lr
    196c:	f04f 0000 	mov.w	r0, #0
    1970:	4770      	bx	lr
    1972:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    1976:	d105      	bne.n	1984 <__aeabi_d2iz+0x48>
    1978:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    197c:	bf08      	it	eq
    197e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    1982:	4770      	bx	lr
    1984:	f04f 0000 	mov.w	r0, #0
    1988:	4770      	bx	lr
    198a:	bf00      	nop

0000198c <__aeabi_ldivmod>:
    198c:	b97b      	cbnz	r3, 19ae <__aeabi_ldivmod+0x22>
    198e:	b972      	cbnz	r2, 19ae <__aeabi_ldivmod+0x22>
    1990:	2900      	cmp	r1, #0
    1992:	bfbe      	ittt	lt
    1994:	2000      	movlt	r0, #0
    1996:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
    199a:	e006      	blt.n	19aa <__aeabi_ldivmod+0x1e>
    199c:	bf08      	it	eq
    199e:	2800      	cmpeq	r0, #0
    19a0:	bf1c      	itt	ne
    19a2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
    19a6:	f04f 30ff 	movne.w	r0, #4294967295
    19aa:	f000 b9d3 	b.w	1d54 <__aeabi_idiv0>
    19ae:	f1ad 0c08 	sub.w	ip, sp, #8
    19b2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    19b6:	2900      	cmp	r1, #0
    19b8:	db09      	blt.n	19ce <__aeabi_ldivmod+0x42>
    19ba:	2b00      	cmp	r3, #0
    19bc:	db1a      	blt.n	19f4 <__aeabi_ldivmod+0x68>
    19be:	f000 f861 	bl	1a84 <__udivmoddi4>
    19c2:	f8dd e004 	ldr.w	lr, [sp, #4]
    19c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    19ca:	b004      	add	sp, #16
    19cc:	4770      	bx	lr
    19ce:	4240      	negs	r0, r0
    19d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    19d4:	2b00      	cmp	r3, #0
    19d6:	db1b      	blt.n	1a10 <__aeabi_ldivmod+0x84>
    19d8:	f000 f854 	bl	1a84 <__udivmoddi4>
    19dc:	f8dd e004 	ldr.w	lr, [sp, #4]
    19e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    19e4:	b004      	add	sp, #16
    19e6:	4240      	negs	r0, r0
    19e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    19ec:	4252      	negs	r2, r2
    19ee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    19f2:	4770      	bx	lr
    19f4:	4252      	negs	r2, r2
    19f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    19fa:	f000 f843 	bl	1a84 <__udivmoddi4>
    19fe:	f8dd e004 	ldr.w	lr, [sp, #4]
    1a02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    1a06:	b004      	add	sp, #16
    1a08:	4240      	negs	r0, r0
    1a0a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    1a0e:	4770      	bx	lr
    1a10:	4252      	negs	r2, r2
    1a12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1a16:	f000 f835 	bl	1a84 <__udivmoddi4>
    1a1a:	f8dd e004 	ldr.w	lr, [sp, #4]
    1a1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    1a22:	b004      	add	sp, #16
    1a24:	4252      	negs	r2, r2
    1a26:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1a2a:	4770      	bx	lr

00001a2c <__aeabi_uldivmod>:
    1a2c:	b953      	cbnz	r3, 1a44 <__aeabi_uldivmod+0x18>
    1a2e:	b94a      	cbnz	r2, 1a44 <__aeabi_uldivmod+0x18>
    1a30:	2900      	cmp	r1, #0
    1a32:	bf08      	it	eq
    1a34:	2800      	cmpeq	r0, #0
    1a36:	bf1c      	itt	ne
    1a38:	f04f 31ff 	movne.w	r1, #4294967295
    1a3c:	f04f 30ff 	movne.w	r0, #4294967295
    1a40:	f000 b988 	b.w	1d54 <__aeabi_idiv0>
    1a44:	f1ad 0c08 	sub.w	ip, sp, #8
    1a48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    1a4c:	f000 f81a 	bl	1a84 <__udivmoddi4>
    1a50:	f8dd e004 	ldr.w	lr, [sp, #4]
    1a54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    1a58:	b004      	add	sp, #16
    1a5a:	4770      	bx	lr

00001a5c <__popcountsi2>:
    1a5c:	0843      	lsrs	r3, r0, #1
    1a5e:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
    1a62:	1ac0      	subs	r0, r0, r3
    1a64:	0883      	lsrs	r3, r0, #2
    1a66:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
    1a6a:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
    1a6e:	4418      	add	r0, r3
    1a70:	eb00 1010 	add.w	r0, r0, r0, lsr #4
    1a74:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
    1a78:	eb00 2000 	add.w	r0, r0, r0, lsl #8
    1a7c:	eb00 4000 	add.w	r0, r0, r0, lsl #16
    1a80:	0e00      	lsrs	r0, r0, #24
    1a82:	4770      	bx	lr

00001a84 <__udivmoddi4>:
    1a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1a88:	9e08      	ldr	r6, [sp, #32]
    1a8a:	4604      	mov	r4, r0
    1a8c:	4688      	mov	r8, r1
    1a8e:	2b00      	cmp	r3, #0
    1a90:	f040 8085 	bne.w	1b9e <__udivmoddi4+0x11a>
    1a94:	428a      	cmp	r2, r1
    1a96:	4615      	mov	r5, r2
    1a98:	d948      	bls.n	1b2c <__udivmoddi4+0xa8>
    1a9a:	fab2 f282 	clz	r2, r2
    1a9e:	b14a      	cbz	r2, 1ab4 <__udivmoddi4+0x30>
    1aa0:	f1c2 0720 	rsb	r7, r2, #32
    1aa4:	fa01 f302 	lsl.w	r3, r1, r2
    1aa8:	fa20 f707 	lsr.w	r7, r0, r7
    1aac:	4095      	lsls	r5, r2
    1aae:	ea47 0803 	orr.w	r8, r7, r3
    1ab2:	4094      	lsls	r4, r2
    1ab4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    1ab8:	0c23      	lsrs	r3, r4, #16
    1aba:	fbb8 f7fe 	udiv	r7, r8, lr
    1abe:	fa1f fc85 	uxth.w	ip, r5
    1ac2:	fb0e 8817 	mls	r8, lr, r7, r8
    1ac6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    1aca:	fb07 f10c 	mul.w	r1, r7, ip
    1ace:	4299      	cmp	r1, r3
    1ad0:	d909      	bls.n	1ae6 <__udivmoddi4+0x62>
    1ad2:	18eb      	adds	r3, r5, r3
    1ad4:	f107 30ff 	add.w	r0, r7, #4294967295
    1ad8:	f080 80e3 	bcs.w	1ca2 <__udivmoddi4+0x21e>
    1adc:	4299      	cmp	r1, r3
    1ade:	f240 80e0 	bls.w	1ca2 <__udivmoddi4+0x21e>
    1ae2:	3f02      	subs	r7, #2
    1ae4:	442b      	add	r3, r5
    1ae6:	1a5b      	subs	r3, r3, r1
    1ae8:	b2a4      	uxth	r4, r4
    1aea:	fbb3 f0fe 	udiv	r0, r3, lr
    1aee:	fb0e 3310 	mls	r3, lr, r0, r3
    1af2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    1af6:	fb00 fc0c 	mul.w	ip, r0, ip
    1afa:	45a4      	cmp	ip, r4
    1afc:	d909      	bls.n	1b12 <__udivmoddi4+0x8e>
    1afe:	192c      	adds	r4, r5, r4
    1b00:	f100 33ff 	add.w	r3, r0, #4294967295
    1b04:	f080 80cb 	bcs.w	1c9e <__udivmoddi4+0x21a>
    1b08:	45a4      	cmp	ip, r4
    1b0a:	f240 80c8 	bls.w	1c9e <__udivmoddi4+0x21a>
    1b0e:	3802      	subs	r0, #2
    1b10:	442c      	add	r4, r5
    1b12:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
    1b16:	eba4 040c 	sub.w	r4, r4, ip
    1b1a:	2700      	movs	r7, #0
    1b1c:	b11e      	cbz	r6, 1b26 <__udivmoddi4+0xa2>
    1b1e:	40d4      	lsrs	r4, r2
    1b20:	2300      	movs	r3, #0
    1b22:	e9c6 4300 	strd	r4, r3, [r6]
    1b26:	4639      	mov	r1, r7
    1b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1b2c:	2a00      	cmp	r2, #0
    1b2e:	d053      	beq.n	1bd8 <__udivmoddi4+0x154>
    1b30:	fab2 f282 	clz	r2, r2
    1b34:	2a00      	cmp	r2, #0
    1b36:	f040 80b6 	bne.w	1ca6 <__udivmoddi4+0x222>
    1b3a:	1b49      	subs	r1, r1, r5
    1b3c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    1b40:	fa1f f885 	uxth.w	r8, r5
    1b44:	2701      	movs	r7, #1
    1b46:	fbb1 fcfe 	udiv	ip, r1, lr
    1b4a:	0c23      	lsrs	r3, r4, #16
    1b4c:	fb0e 111c 	mls	r1, lr, ip, r1
    1b50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    1b54:	fb08 f10c 	mul.w	r1, r8, ip
    1b58:	4299      	cmp	r1, r3
    1b5a:	d907      	bls.n	1b6c <__udivmoddi4+0xe8>
    1b5c:	18eb      	adds	r3, r5, r3
    1b5e:	f10c 30ff 	add.w	r0, ip, #4294967295
    1b62:	d202      	bcs.n	1b6a <__udivmoddi4+0xe6>
    1b64:	4299      	cmp	r1, r3
    1b66:	f200 80ec 	bhi.w	1d42 <__udivmoddi4+0x2be>
    1b6a:	4684      	mov	ip, r0
    1b6c:	1a59      	subs	r1, r3, r1
    1b6e:	b2a3      	uxth	r3, r4
    1b70:	fbb1 f0fe 	udiv	r0, r1, lr
    1b74:	fb0e 1410 	mls	r4, lr, r0, r1
    1b78:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
    1b7c:	fb08 f800 	mul.w	r8, r8, r0
    1b80:	45a0      	cmp	r8, r4
    1b82:	d907      	bls.n	1b94 <__udivmoddi4+0x110>
    1b84:	192c      	adds	r4, r5, r4
    1b86:	f100 33ff 	add.w	r3, r0, #4294967295
    1b8a:	d202      	bcs.n	1b92 <__udivmoddi4+0x10e>
    1b8c:	45a0      	cmp	r8, r4
    1b8e:	f200 80dc 	bhi.w	1d4a <__udivmoddi4+0x2c6>
    1b92:	4618      	mov	r0, r3
    1b94:	eba4 0408 	sub.w	r4, r4, r8
    1b98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    1b9c:	e7be      	b.n	1b1c <__udivmoddi4+0x98>
    1b9e:	428b      	cmp	r3, r1
    1ba0:	d908      	bls.n	1bb4 <__udivmoddi4+0x130>
    1ba2:	2e00      	cmp	r6, #0
    1ba4:	d078      	beq.n	1c98 <__udivmoddi4+0x214>
    1ba6:	2700      	movs	r7, #0
    1ba8:	e9c6 0100 	strd	r0, r1, [r6]
    1bac:	4638      	mov	r0, r7
    1bae:	4639      	mov	r1, r7
    1bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1bb4:	fab3 f783 	clz	r7, r3
    1bb8:	b97f      	cbnz	r7, 1bda <__udivmoddi4+0x156>
    1bba:	428b      	cmp	r3, r1
    1bbc:	d302      	bcc.n	1bc4 <__udivmoddi4+0x140>
    1bbe:	4282      	cmp	r2, r0
    1bc0:	f200 80bd 	bhi.w	1d3e <__udivmoddi4+0x2ba>
    1bc4:	1a84      	subs	r4, r0, r2
    1bc6:	eb61 0303 	sbc.w	r3, r1, r3
    1bca:	2001      	movs	r0, #1
    1bcc:	4698      	mov	r8, r3
    1bce:	2e00      	cmp	r6, #0
    1bd0:	d0a9      	beq.n	1b26 <__udivmoddi4+0xa2>
    1bd2:	e9c6 4800 	strd	r4, r8, [r6]
    1bd6:	e7a6      	b.n	1b26 <__udivmoddi4+0xa2>
    1bd8:	deff      	udf	#255	; 0xff
    1bda:	f1c7 0520 	rsb	r5, r7, #32
    1bde:	40bb      	lsls	r3, r7
    1be0:	fa22 fc05 	lsr.w	ip, r2, r5
    1be4:	ea4c 0c03 	orr.w	ip, ip, r3
    1be8:	fa01 f407 	lsl.w	r4, r1, r7
    1bec:	fa20 f805 	lsr.w	r8, r0, r5
    1bf0:	fa21 f305 	lsr.w	r3, r1, r5
    1bf4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
    1bf8:	ea48 0404 	orr.w	r4, r8, r4
    1bfc:	fbb3 f9fe 	udiv	r9, r3, lr
    1c00:	0c21      	lsrs	r1, r4, #16
    1c02:	fb0e 3319 	mls	r3, lr, r9, r3
    1c06:	fa1f f88c 	uxth.w	r8, ip
    1c0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
    1c0e:	fb09 fa08 	mul.w	sl, r9, r8
    1c12:	459a      	cmp	sl, r3
    1c14:	fa02 f207 	lsl.w	r2, r2, r7
    1c18:	fa00 f107 	lsl.w	r1, r0, r7
    1c1c:	d90b      	bls.n	1c36 <__udivmoddi4+0x1b2>
    1c1e:	eb1c 0303 	adds.w	r3, ip, r3
    1c22:	f109 30ff 	add.w	r0, r9, #4294967295
    1c26:	f080 8088 	bcs.w	1d3a <__udivmoddi4+0x2b6>
    1c2a:	459a      	cmp	sl, r3
    1c2c:	f240 8085 	bls.w	1d3a <__udivmoddi4+0x2b6>
    1c30:	f1a9 0902 	sub.w	r9, r9, #2
    1c34:	4463      	add	r3, ip
    1c36:	eba3 030a 	sub.w	r3, r3, sl
    1c3a:	b2a4      	uxth	r4, r4
    1c3c:	fbb3 f0fe 	udiv	r0, r3, lr
    1c40:	fb0e 3310 	mls	r3, lr, r0, r3
    1c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    1c48:	fb00 f808 	mul.w	r8, r0, r8
    1c4c:	45a0      	cmp	r8, r4
    1c4e:	d908      	bls.n	1c62 <__udivmoddi4+0x1de>
    1c50:	eb1c 0404 	adds.w	r4, ip, r4
    1c54:	f100 33ff 	add.w	r3, r0, #4294967295
    1c58:	d26b      	bcs.n	1d32 <__udivmoddi4+0x2ae>
    1c5a:	45a0      	cmp	r8, r4
    1c5c:	d969      	bls.n	1d32 <__udivmoddi4+0x2ae>
    1c5e:	3802      	subs	r0, #2
    1c60:	4464      	add	r4, ip
    1c62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    1c66:	eba4 0408 	sub.w	r4, r4, r8
    1c6a:	fba0 8902 	umull	r8, r9, r0, r2
    1c6e:	454c      	cmp	r4, r9
    1c70:	46c6      	mov	lr, r8
    1c72:	464b      	mov	r3, r9
    1c74:	d354      	bcc.n	1d20 <__udivmoddi4+0x29c>
    1c76:	d051      	beq.n	1d1c <__udivmoddi4+0x298>
    1c78:	2e00      	cmp	r6, #0
    1c7a:	d069      	beq.n	1d50 <__udivmoddi4+0x2cc>
    1c7c:	ebb1 020e 	subs.w	r2, r1, lr
    1c80:	eb64 0403 	sbc.w	r4, r4, r3
    1c84:	fa04 f505 	lsl.w	r5, r4, r5
    1c88:	fa22 f307 	lsr.w	r3, r2, r7
    1c8c:	40fc      	lsrs	r4, r7
    1c8e:	431d      	orrs	r5, r3
    1c90:	e9c6 5400 	strd	r5, r4, [r6]
    1c94:	2700      	movs	r7, #0
    1c96:	e746      	b.n	1b26 <__udivmoddi4+0xa2>
    1c98:	4637      	mov	r7, r6
    1c9a:	4630      	mov	r0, r6
    1c9c:	e743      	b.n	1b26 <__udivmoddi4+0xa2>
    1c9e:	4618      	mov	r0, r3
    1ca0:	e737      	b.n	1b12 <__udivmoddi4+0x8e>
    1ca2:	4607      	mov	r7, r0
    1ca4:	e71f      	b.n	1ae6 <__udivmoddi4+0x62>
    1ca6:	f1c2 0320 	rsb	r3, r2, #32
    1caa:	fa20 f703 	lsr.w	r7, r0, r3
    1cae:	4095      	lsls	r5, r2
    1cb0:	fa01 f002 	lsl.w	r0, r1, r2
    1cb4:	fa21 f303 	lsr.w	r3, r1, r3
    1cb8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    1cbc:	4338      	orrs	r0, r7
    1cbe:	0c01      	lsrs	r1, r0, #16
    1cc0:	fbb3 f7fe 	udiv	r7, r3, lr
    1cc4:	fa1f f885 	uxth.w	r8, r5
    1cc8:	fb0e 3317 	mls	r3, lr, r7, r3
    1ccc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    1cd0:	fb07 f308 	mul.w	r3, r7, r8
    1cd4:	428b      	cmp	r3, r1
    1cd6:	fa04 f402 	lsl.w	r4, r4, r2
    1cda:	d907      	bls.n	1cec <__udivmoddi4+0x268>
    1cdc:	1869      	adds	r1, r5, r1
    1cde:	f107 3cff 	add.w	ip, r7, #4294967295
    1ce2:	d228      	bcs.n	1d36 <__udivmoddi4+0x2b2>
    1ce4:	428b      	cmp	r3, r1
    1ce6:	d926      	bls.n	1d36 <__udivmoddi4+0x2b2>
    1ce8:	3f02      	subs	r7, #2
    1cea:	4429      	add	r1, r5
    1cec:	1acb      	subs	r3, r1, r3
    1cee:	b281      	uxth	r1, r0
    1cf0:	fbb3 f0fe 	udiv	r0, r3, lr
    1cf4:	fb0e 3310 	mls	r3, lr, r0, r3
    1cf8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    1cfc:	fb00 f308 	mul.w	r3, r0, r8
    1d00:	428b      	cmp	r3, r1
    1d02:	d907      	bls.n	1d14 <__udivmoddi4+0x290>
    1d04:	1869      	adds	r1, r5, r1
    1d06:	f100 3cff 	add.w	ip, r0, #4294967295
    1d0a:	d210      	bcs.n	1d2e <__udivmoddi4+0x2aa>
    1d0c:	428b      	cmp	r3, r1
    1d0e:	d90e      	bls.n	1d2e <__udivmoddi4+0x2aa>
    1d10:	3802      	subs	r0, #2
    1d12:	4429      	add	r1, r5
    1d14:	1ac9      	subs	r1, r1, r3
    1d16:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
    1d1a:	e714      	b.n	1b46 <__udivmoddi4+0xc2>
    1d1c:	4541      	cmp	r1, r8
    1d1e:	d2ab      	bcs.n	1c78 <__udivmoddi4+0x1f4>
    1d20:	ebb8 0e02 	subs.w	lr, r8, r2
    1d24:	eb69 020c 	sbc.w	r2, r9, ip
    1d28:	3801      	subs	r0, #1
    1d2a:	4613      	mov	r3, r2
    1d2c:	e7a4      	b.n	1c78 <__udivmoddi4+0x1f4>
    1d2e:	4660      	mov	r0, ip
    1d30:	e7f0      	b.n	1d14 <__udivmoddi4+0x290>
    1d32:	4618      	mov	r0, r3
    1d34:	e795      	b.n	1c62 <__udivmoddi4+0x1de>
    1d36:	4667      	mov	r7, ip
    1d38:	e7d8      	b.n	1cec <__udivmoddi4+0x268>
    1d3a:	4681      	mov	r9, r0
    1d3c:	e77b      	b.n	1c36 <__udivmoddi4+0x1b2>
    1d3e:	4638      	mov	r0, r7
    1d40:	e745      	b.n	1bce <__udivmoddi4+0x14a>
    1d42:	f1ac 0c02 	sub.w	ip, ip, #2
    1d46:	442b      	add	r3, r5
    1d48:	e710      	b.n	1b6c <__udivmoddi4+0xe8>
    1d4a:	3802      	subs	r0, #2
    1d4c:	442c      	add	r4, r5
    1d4e:	e721      	b.n	1b94 <__udivmoddi4+0x110>
    1d50:	4637      	mov	r7, r6
    1d52:	e6e8      	b.n	1b26 <__udivmoddi4+0xa2>

00001d54 <__aeabi_idiv0>:
    1d54:	4770      	bx	lr
    1d56:	bf00      	nop

00001d58 <__gedf2>:
    1d58:	f04f 3cff 	mov.w	ip, #4294967295
    1d5c:	e006      	b.n	1d6c <__cmpdf2+0x4>
    1d5e:	bf00      	nop

00001d60 <__ledf2>:
    1d60:	f04f 0c01 	mov.w	ip, #1
    1d64:	e002      	b.n	1d6c <__cmpdf2+0x4>
    1d66:	bf00      	nop

00001d68 <__cmpdf2>:
    1d68:	f04f 0c01 	mov.w	ip, #1
    1d6c:	f84d cd04 	str.w	ip, [sp, #-4]!
    1d70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    1d74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    1d78:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    1d7c:	bf18      	it	ne
    1d7e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    1d82:	d01b      	beq.n	1dbc <__cmpdf2+0x54>
    1d84:	b001      	add	sp, #4
    1d86:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    1d8a:	bf0c      	ite	eq
    1d8c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    1d90:	ea91 0f03 	teqne	r1, r3
    1d94:	bf02      	ittt	eq
    1d96:	ea90 0f02 	teqeq	r0, r2
    1d9a:	2000      	moveq	r0, #0
    1d9c:	4770      	bxeq	lr
    1d9e:	f110 0f00 	cmn.w	r0, #0
    1da2:	ea91 0f03 	teq	r1, r3
    1da6:	bf58      	it	pl
    1da8:	4299      	cmppl	r1, r3
    1daa:	bf08      	it	eq
    1dac:	4290      	cmpeq	r0, r2
    1dae:	bf2c      	ite	cs
    1db0:	17d8      	asrcs	r0, r3, #31
    1db2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    1db6:	f040 0001 	orr.w	r0, r0, #1
    1dba:	4770      	bx	lr
    1dbc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    1dc0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    1dc4:	d102      	bne.n	1dcc <__cmpdf2+0x64>
    1dc6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    1dca:	d107      	bne.n	1ddc <__cmpdf2+0x74>
    1dcc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    1dd0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    1dd4:	d1d6      	bne.n	1d84 <__cmpdf2+0x1c>
    1dd6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    1dda:	d0d3      	beq.n	1d84 <__cmpdf2+0x1c>
    1ddc:	f85d 0b04 	ldr.w	r0, [sp], #4
    1de0:	4770      	bx	lr
    1de2:	bf00      	nop

00001de4 <__aeabi_cdrcmple>:
    1de4:	4684      	mov	ip, r0
    1de6:	4610      	mov	r0, r2
    1de8:	4662      	mov	r2, ip
    1dea:	468c      	mov	ip, r1
    1dec:	4619      	mov	r1, r3
    1dee:	4663      	mov	r3, ip
    1df0:	e000      	b.n	1df4 <__aeabi_cdcmpeq>
    1df2:	bf00      	nop

00001df4 <__aeabi_cdcmpeq>:
    1df4:	b501      	push	{r0, lr}
    1df6:	f7ff ffb7 	bl	1d68 <__cmpdf2>
    1dfa:	2800      	cmp	r0, #0
    1dfc:	bf48      	it	mi
    1dfe:	f110 0f00 	cmnmi.w	r0, #0
    1e02:	bd01      	pop	{r0, pc}

00001e04 <__aeabi_dcmpeq>:
    1e04:	f84d ed08 	str.w	lr, [sp, #-8]!
    1e08:	f7ff fff4 	bl	1df4 <__aeabi_cdcmpeq>
    1e0c:	bf0c      	ite	eq
    1e0e:	2001      	moveq	r0, #1
    1e10:	2000      	movne	r0, #0
    1e12:	f85d fb08 	ldr.w	pc, [sp], #8
    1e16:	bf00      	nop

00001e18 <__aeabi_dcmplt>:
    1e18:	f84d ed08 	str.w	lr, [sp, #-8]!
    1e1c:	f7ff ffea 	bl	1df4 <__aeabi_cdcmpeq>
    1e20:	bf34      	ite	cc
    1e22:	2001      	movcc	r0, #1
    1e24:	2000      	movcs	r0, #0
    1e26:	f85d fb08 	ldr.w	pc, [sp], #8
    1e2a:	bf00      	nop

00001e2c <__aeabi_dcmple>:
    1e2c:	f84d ed08 	str.w	lr, [sp, #-8]!
    1e30:	f7ff ffe0 	bl	1df4 <__aeabi_cdcmpeq>
    1e34:	bf94      	ite	ls
    1e36:	2001      	movls	r0, #1
    1e38:	2000      	movhi	r0, #0
    1e3a:	f85d fb08 	ldr.w	pc, [sp], #8
    1e3e:	bf00      	nop

00001e40 <__aeabi_dcmpge>:
    1e40:	f84d ed08 	str.w	lr, [sp, #-8]!
    1e44:	f7ff ffce 	bl	1de4 <__aeabi_cdrcmple>
    1e48:	bf94      	ite	ls
    1e4a:	2001      	movls	r0, #1
    1e4c:	2000      	movhi	r0, #0
    1e4e:	f85d fb08 	ldr.w	pc, [sp], #8
    1e52:	bf00      	nop

00001e54 <__aeabi_dcmpgt>:
    1e54:	f84d ed08 	str.w	lr, [sp, #-8]!
    1e58:	f7ff ffc4 	bl	1de4 <__aeabi_cdrcmple>
    1e5c:	bf34      	ite	cc
    1e5e:	2001      	movcc	r0, #1
    1e60:	2000      	movcs	r0, #0
    1e62:	f85d fb08 	ldr.w	pc, [sp], #8
    1e66:	bf00      	nop

00001e68 <__aeabi_dcmpun>:
    1e68:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    1e6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    1e70:	d102      	bne.n	1e78 <__aeabi_dcmpun+0x10>
    1e72:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    1e76:	d10a      	bne.n	1e8e <__aeabi_dcmpun+0x26>
    1e78:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    1e7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    1e80:	d102      	bne.n	1e88 <__aeabi_dcmpun+0x20>
    1e82:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    1e86:	d102      	bne.n	1e8e <__aeabi_dcmpun+0x26>
    1e88:	f04f 0000 	mov.w	r0, #0
    1e8c:	4770      	bx	lr
    1e8e:	f04f 0001 	mov.w	r0, #1
    1e92:	4770      	bx	lr

00001e94 <strcmp>:
    1e94:	f810 2b01 	ldrb.w	r2, [r0], #1
    1e98:	f811 3b01 	ldrb.w	r3, [r1], #1
    1e9c:	2a01      	cmp	r2, #1
    1e9e:	bf28      	it	cs
    1ea0:	429a      	cmpcs	r2, r3
    1ea2:	d0f7      	beq.n	1e94 <strcmp>
    1ea4:	1ad0      	subs	r0, r2, r3
    1ea6:	4770      	bx	lr

00001ea8 <strlen>:
    1ea8:	4603      	mov	r3, r0
    1eaa:	f813 2b01 	ldrb.w	r2, [r3], #1
    1eae:	2a00      	cmp	r2, #0
    1eb0:	d1fb      	bne.n	1eaa <strlen+0x2>
    1eb2:	1a18      	subs	r0, r3, r0
    1eb4:	3801      	subs	r0, #1
    1eb6:	4770      	bx	lr

00001eb8 <doubleToSensorValue>:
	k_delayed_work_submit(&read_data_work, K_MSEC(READ_DATA_INTERVAL));
}

// the good stuff
void doubleToSensorValue(double d, struct sensor_value *val)
{
    1eb8:	b5d0      	push	{r4, r6, r7, lr}
    1eba:	4614      	mov	r4, r2
    1ebc:	460f      	mov	r7, r1
    1ebe:	4606      	mov	r6, r0
	val->val1 = (int)d;
    1ec0:	f7ff fd3c 	bl	193c <__aeabi_d2iz>
    1ec4:	6020      	str	r0, [r4, #0]
	val->val2 = (d - val->val1) * 1000000;
    1ec6:	f7ff fabd 	bl	1444 <__aeabi_i2d>
    1eca:	4602      	mov	r2, r0
    1ecc:	460b      	mov	r3, r1
    1ece:	4630      	mov	r0, r6
    1ed0:	4639      	mov	r1, r7
    1ed2:	f7ff f969 	bl	11a8 <__aeabi_dsub>
    1ed6:	a304      	add	r3, pc, #16	; (adr r3, 1ee8 <doubleToSensorValue+0x30>)
    1ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
    1edc:	f7ff fb1c 	bl	1518 <__aeabi_dmul>
    1ee0:	f7ff fd2c 	bl	193c <__aeabi_d2iz>
    1ee4:	6060      	str	r0, [r4, #4]
}
    1ee6:	bdd0      	pop	{r4, r6, r7, pc}
    1ee8:	00000000 	.word	0x00000000
    1eec:	412e8480 	.word	0x412e8480

00001ef0 <ull_drift_ticks_get>:
 * @param ticks_drift_minus[out] Negative part of drift uncertainty window
 */
void ull_drift_ticks_get(struct node_rx_event_done *done,
			 uint32_t *ticks_drift_plus,
			 uint32_t *ticks_drift_minus)
{
    1ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1ef4:	4689      	mov	r9, r1
	uint32_t window_widening_event_us;
	uint32_t preamble_to_addr_us;

	start_to_address_actual_us =
		done->extra.drift.start_to_address_actual_us;
	window_widening_event_us =
    1ef6:	e9d0 710a 	ldrd	r7, r1, [r0, #40]	; 0x28
		done->extra.drift.window_widening_event_us;
	preamble_to_addr_us =
    1efa:	6b06      	ldr	r6, [r0, #48]	; 0x30
		done->extra.drift.preamble_to_addr_us;

	start_to_address_expected_us = EVENT_JITTER_US +
    1efc:	4d16      	ldr	r5, [pc, #88]	; (1f58 <ull_drift_ticks_get+0x68>)
				       EVENT_TICKER_RES_MARGIN_US +
				       window_widening_event_us +
    1efe:	198c      	adds	r4, r1, r6
	start_to_address_expected_us = EVENT_JITTER_US +
    1f00:	3430      	adds	r4, #48	; 0x30
				       preamble_to_addr_us;

	if (start_to_address_actual_us <= start_to_address_expected_us) {
    1f02:	42a7      	cmp	r7, r4
{
    1f04:	4690      	mov	r8, r2
		*ticks_drift_plus =
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
    1f06:	a312      	add	r3, pc, #72	; (adr r3, 1f50 <ull_drift_ticks_get+0x60>)
    1f08:	e9d3 2300 	ldrd	r2, r3, [r3]
	if (start_to_address_actual_us <= start_to_address_expected_us) {
    1f0c:	d815      	bhi.n	1f3a <ull_drift_ticks_get+0x4a>
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
    1f0e:	fba1 0105 	umull	r0, r1, r1, r5
    1f12:	f7ff fd8b 	bl	1a2c <__aeabi_uldivmod>
    1f16:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
    1f1a:	f8c9 0000 	str.w	r0, [r9]
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
    1f1e:	1be0      	subs	r0, r4, r7
					       start_to_address_actual_us));
	} else {
		*ticks_drift_plus =
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
    1f20:	a30b      	add	r3, pc, #44	; (adr r3, 1f50 <ull_drift_ticks_get+0x60>)
    1f22:	e9d3 2300 	ldrd	r2, r3, [r3]
    1f26:	fba0 0105 	umull	r0, r1, r0, r5
    1f2a:	f7ff fd7f 	bl	1a2c <__aeabi_uldivmod>
    1f2e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
    1f32:	f8c8 0000 	str.w	r0, [r8]
					       EVENT_TICKER_RES_MARGIN_US +
					       preamble_to_addr_us);
	}
}
    1f36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
    1f3a:	fba7 0105 	umull	r0, r1, r7, r5
    1f3e:	f7ff fd75 	bl	1a2c <__aeabi_uldivmod>
    1f42:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
    1f46:	f8c9 0000 	str.w	r0, [r9]
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
    1f4a:	f106 0030 	add.w	r0, r6, #48	; 0x30
    1f4e:	e7e7      	b.n	1f20 <ull_drift_ticks_get+0x30>
    1f50:	1afd498d 	.word	0x1afd498d
    1f54:	00000007 	.word	0x00000007
    1f58:	3b9aca00 	.word	0x3b9aca00
    1f5c:	00000000 	.word	0x00000000

00001f60 <ll_adv_enable>:
	uint8_t aux_is_started = 0U;
	uint32_t ticks_anchor;
#endif /* !CONFIG_BT_HCI_MESH_EXT */
#else /* !CONFIG_BT_CTLR_ADV_EXT || !CONFIG_BT_HCI_MESH_EXT */
uint8_t ll_adv_enable(uint8_t enable)
{
    1f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1f64:	b08d      	sub	sp, #52	; 0x34
	struct pdu_adv *pdu_adv;
	struct ll_adv_set *adv;
	struct lll_adv *lll;
	uint32_t ret;

	if (!enable) {
    1f66:	b930      	cbnz	r0, 1f76 <ll_adv_enable+0x16>
		return disable(handle);
    1f68:	f018 ff64 	bl	1ae34 <disable.constprop.6>
    1f6c:	4606      	mov	r6, r0
		conn_release(adv);
	}
#endif /* CONFIG_BT_PERIPHERAL */

	return BT_HCI_ERR_CMD_DISALLOWED;
}
    1f6e:	4630      	mov	r0, r6
    1f70:	b00d      	add	sp, #52	; 0x34
    1f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
static inline struct ll_adv_set *is_disabled_get(uint8_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || adv->is_enabled) {
    1f76:	4bca      	ldr	r3, [pc, #808]	; (22a0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2a0>)
    1f78:	f893 604e 	ldrb.w	r6, [r3, #78]	; 0x4e
    1f7c:	f016 0601 	ands.w	r6, r6, #1
    1f80:	461d      	mov	r5, r3
    1f82:	d001      	beq.n	1f88 <ll_adv_enable+0x28>
	return BT_HCI_ERR_CMD_DISALLOWED;
    1f84:	260c      	movs	r6, #12
    1f86:	e7f2      	b.n	1f6e <ll_adv_enable+0xe>
	lll_adv_pdu_enqueue(&lll->adv_data, idx);
}

static inline struct pdu_adv *lll_adv_data_peek(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    1f88:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
    1f8c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    1f90:	6b17      	ldr	r7, [r2, #48]	; 0x30
	lll_adv_pdu_enqueue(&lll->scan_rsp, idx);
}

static inline struct pdu_adv *lll_adv_scan_rsp_peek(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    1f92:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
    1f96:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1f9a:	f8d3 803c 	ldr.w	r8, [r3, #60]	; 0x3c
	if (pdu_adv_to_update) {
    1f9e:	b147      	cbz	r7, 1fb2 <ll_adv_enable+0x52>
	adv_addr = adva_update(adv, pdu);
    1fa0:	4638      	mov	r0, r7
    1fa2:	f029 fef2 	bl	2bd8a <adva_update.isra.4>
		if (pdu_adv_to_update->tx_addr &&
    1fa6:	783b      	ldrb	r3, [r7, #0]
    1fa8:	065a      	lsls	r2, r3, #25
    1faa:	d417      	bmi.n	1fdc <ll_adv_enable+0x7c>
	adv_addr = adva_update(adv, pdu);
    1fac:	4640      	mov	r0, r8
    1fae:	f029 feec 	bl	2bd8a <adva_update.isra.4>
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
    1fb2:	783b      	ldrb	r3, [r7, #0]
    1fb4:	f013 0f0e 	tst.w	r3, #14
    1fb8:	f040 8098 	bne.w	20ec <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xec>
		if (lll->conn) {
    1fbc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1fbe:	2b00      	cmp	r3, #0
    1fc0:	d1e0      	bne.n	1f84 <ll_adv_enable+0x24>
		link = ll_rx_link_alloc();
    1fc2:	f018 f9a1 	bl	1a308 <ll_rx_link_alloc>
		if (!link) {
    1fc6:	4681      	mov	r9, r0
    1fc8:	b130      	cbz	r0, 1fd8 <ll_adv_enable+0x78>
		node_rx = ll_rx_alloc();
    1fca:	f018 f9a9 	bl	1a320 <ll_rx_alloc>
		if (!node_rx) {
    1fce:	4682      	mov	sl, r0
    1fd0:	b958      	cbnz	r0, 1fea <ll_adv_enable+0x8a>
			ll_rx_link_release(link);
    1fd2:	4648      	mov	r0, r9
    1fd4:	f018 f99e 	bl	1a314 <ll_rx_link_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    1fd8:	2607      	movs	r6, #7
    1fda:	e7c8      	b.n	1f6e <ll_adv_enable+0xe>
		    !mem_nz((void *)adv_addr, BDADDR_SIZE)) {
    1fdc:	2106      	movs	r1, #6
    1fde:	f029 fba1 	bl	2b724 <mem_nz>
		if (pdu_adv_to_update->tx_addr &&
    1fe2:	2800      	cmp	r0, #0
    1fe4:	d1e2      	bne.n	1fac <ll_adv_enable+0x4c>
			return BT_HCI_ERR_INVALID_PARAM;
    1fe6:	2612      	movs	r6, #18
    1fe8:	e7c1      	b.n	1f6e <ll_adv_enable+0xe>
		conn = ll_conn_acquire();
    1fea:	f019 f9cb 	bl	1b384 <ll_conn_acquire>
		if (!conn) {
    1fee:	4604      	mov	r4, r0
    1ff0:	b918      	cbnz	r0, 1ffa <ll_adv_enable+0x9a>
			ll_rx_release(node_rx);
    1ff2:	4650      	mov	r0, sl
    1ff4:	f018 f99a 	bl	1a32c <ll_rx_release>
    1ff8:	e7eb      	b.n	1fd2 <ll_adv_enable+0x72>
		conn_lll->handle = 0xFFFF;
    1ffa:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1ffe:	8583      	strh	r3, [r0, #44]	; 0x2c
		if (!conn_lll->link_tx_free) {
    2000:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
		conn_lll = &conn->lll;
    2002:	f100 0b1c 	add.w	fp, r0, #28
		if (!conn_lll->link_tx_free) {
    2006:	b913      	cbnz	r3, 200e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xe>
			conn_lll->link_tx_free = &conn_lll->link_tx;
    2008:	f100 0364 	add.w	r3, r0, #100	; 0x64
    200c:	66c3      	str	r3, [r0, #108]	; 0x6c
		memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
    200e:	f104 0260 	add.w	r2, r4, #96	; 0x60
    2012:	f104 015c 	add.w	r1, r4, #92	; 0x5c
    2016:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    2018:	f029 fb8f 	bl	2b73a <memq_init>
		conn_lll->sn = 0;
    201c:	f894 2072 	ldrb.w	r2, [r4, #114]	; 0x72
		conn->llcp_terminate.node_rx.hdr.link = link;
    2020:	f8c4 90cc 	str.w	r9, [r4, #204]	; 0xcc
		conn_lll->sn = 0;
    2024:	f022 0207 	bic.w	r2, r2, #7
    2028:	f884 2072 	strb.w	r2, [r4, #114]	; 0x72
		conn_lll->data_chan_sel = 0;
    202c:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
    2030:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    2034:	f062 027f 	orn	r2, r2, #127	; 0x7f
    2038:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
		conn_lll->slave.latency_enabled = 0;
    203c:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
		conn_lll->link_tx_free = NULL;
    2040:	2300      	movs	r3, #0
		conn_lll->slave.latency_enabled = 0;
    2042:	f363 0200 	bfi	r2, r3, #0, #1
    2046:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
		conn->connect_expire = 6;
    204a:	2206      	movs	r2, #6
    204c:	f8a4 2074 	strh.w	r2, [r4, #116]	; 0x74
		conn->common.fex_valid = 0;
    2050:	f894 2080 	ldrb.w	r2, [r4, #128]	; 0x80
		conn_lll->link_tx_free = NULL;
    2054:	66e3      	str	r3, [r4, #108]	; 0x6c
		conn->common.fex_valid = 0;
    2056:	f022 0203 	bic.w	r2, r2, #3
    205a:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
		conn->llcp_feature.features_conn = LL_FEAT;
    205e:	228e      	movs	r2, #142	; 0x8e
		conn->llcp_feature.features_peer = 0;
    2060:	e9c4 232e 	strd	r2, r3, [r4, #184]	; 0xb8
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
    2064:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
		conn_lll->packet_tx_head_len = 0;
    2068:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
    206c:	f022 0203 	bic.w	r2, r2, #3
		conn_lll->data_chan_use = 0;
    2070:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
		conn_lll->latency_prepare = 0;
    2074:	8663      	strh	r3, [r4, #50]	; 0x32
		conn_lll->latency_event = 0;
    2076:	6363      	str	r3, [r4, #52]	; 0x34
		conn_lll->slave.window_widening_event_us = 0;
    2078:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
		conn_lll->slave.window_size_prepare_us = 0;
    207c:	6563      	str	r3, [r4, #84]	; 0x54
		conn->supervision_expire = 0;
    207e:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
		conn->procedure_expire = 0;
    2082:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
		conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0;
    2086:	f8a4 308c 	strh.w	r3, [r4, #140]	; 0x8c
    208a:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
		conn->llcp_rx = NULL;
    208e:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
		conn->llcp_cu.req = conn->llcp_cu.ack = 0;
    2092:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
		conn->llcp_feature.req = conn->llcp_feature.ack = 0;
    2096:	f8a4 30b4 	strh.w	r3, [r4, #180]	; 0xb4
		conn->llcp_version.req = conn->llcp_version.ack = 0;
    209a:	f8a4 30c0 	strh.w	r3, [r4, #192]	; 0xc0
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
    209e:	f884 20c2 	strb.w	r2, [r4, #194]	; 0xc2
		conn->llcp_terminate.reason_peer = 0;
    20a2:	f884 30cb 	strb.w	r3, [r4, #203]	; 0xcb
		conn->llcp_conn_param.req = 0;
    20a6:	f8a4 30ec 	strh.w	r3, [r4, #236]	; 0xec
		conn->llcp_conn_param.disabled = 0;
    20aa:	f894 20ee 	ldrb.w	r2, [r4, #238]	; 0xee
		lll->conn = conn_lll;
    20ae:	f8c5 b024 	str.w	fp, [r5, #36]	; 0x24
		adv->node_rx_cc_free = node_rx;
    20b2:	e9c5 9a11 	strd	r9, sl, [r5, #68]	; 0x44
		conn->llcp_conn_param.disabled = 0;
    20b6:	f363 1204 	bfi	r2, r3, #4, #1
    20ba:	f884 20ee 	strb.w	r2, [r4, #238]	; 0xee
static inline void lll_hdr_init(void *lll, void *parent)
{
	struct lll_hdr *hdr = lll;

	hdr->parent = parent;
	hdr->is_stop = 0U;
    20be:	f894 2020 	ldrb.w	r2, [r4, #32]
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
    20c2:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    20c6:	f363 0200 	bfi	r2, r3, #0, #1
		conn->tx_data = conn->tx_data_last = 0;
    20ca:	e9c4 3348 	strd	r3, r3, [r4, #288]	; 0x120
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
    20ce:	e9c4 3346 	strd	r3, r3, [r4, #280]	; 0x118
	return hdr->ref--;
}

static inline void ull_hdr_init(struct ull_hdr *hdr)
{
	hdr->disabled_cb = hdr->disabled_param = NULL;
    20d2:	e9c4 3305 	strd	r3, r3, [r4, #20]
	hdr->parent = parent;
    20d6:	61e4      	str	r4, [r4, #28]
	hdr->is_stop = 0U;
    20d8:	f884 2020 	strb.w	r2, [r4, #32]
		err = lll_clock_wait();
    20dc:	f01a fe66 	bl	1cdac <lll_clock_wait>
		if (err) {
    20e0:	b120      	cbz	r0, 20ec <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xec>
			conn_release(adv);
    20e2:	486f      	ldr	r0, [pc, #444]	; (22a0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2a0>)
    20e4:	f018 fcec 	bl	1aac0 <conn_release>
			return BT_HCI_ERR_HW_FAILURE;
    20e8:	2603      	movs	r6, #3
    20ea:	e740      	b.n	1f6e <ll_adv_enable+0xe>
	uint8_t ch_map = lll->chan_map;
    20ec:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
    20f0:	2101      	movs	r1, #1
	uint8_t ch_map = lll->chan_map;
    20f2:	f3c3 0342 	ubfx	r3, r3, #1, #3
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
    20f6:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
	uint8_t ch_map = lll->chan_map;
    20fa:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
    20fe:	f029 fb48 	bl	2b792 <util_ones_count_get>
	if (adv_chn_cnt == 0) {
    2102:	2800      	cmp	r0, #0
    2104:	f000 80bf 	beq.w	2286 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x286>
		if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
    2108:	783a      	ldrb	r2, [r7, #0]
    210a:	f002 020f 	and.w	r2, r2, #15
    210e:	2a02      	cmp	r2, #2
    2110:	f100 34ff 	add.w	r4, r0, #4294967295
    2114:	d172      	bne.n	21fc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1fc>
			adv_size += pdu_adv->len;
    2116:	787a      	ldrb	r2, [r7, #1]
    2118:	3210      	adds	r2, #16
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
    211a:	00d2      	lsls	r2, r2, #3
    211c:	4350      	muls	r0, r2
    211e:	f500 72aa 	add.w	r2, r0, #340	; 0x154
    2122:	2064      	movs	r0, #100	; 0x64
    2124:	fb00 2004 	mla	r0, r0, r4, r2
    2128:	f895 3020 	ldrb.w	r3, [r5, #32]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    212c:	495d      	ldr	r1, [pc, #372]	; (22a4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2a4>)
	hdr->parent = parent;
    212e:	61ed      	str	r5, [r5, #28]
    2130:	2400      	movs	r4, #0
	hdr->is_stop = 0U;
    2132:	f364 0300 	bfi	r3, r4, #0, #1
    2136:	f885 3020 	strb.w	r3, [r5, #32]
	adv->evt.ticks_xtal_to_start =
    213a:	2331      	movs	r3, #49	; 0x31
    213c:	602b      	str	r3, [r5, #0]
    213e:	e9c5 4405 	strd	r4, r4, [r5, #20]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    2142:	a355      	add	r3, pc, #340	; (adr r3, 2298 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x298>)
    2144:	e9d3 2300 	ldrd	r2, r3, [r3]
	adv->evt.ticks_active_to_start = 0;
    2148:	606c      	str	r4, [r5, #4]
	adv->evt.ticks_preempt_to_start =
    214a:	60ac      	str	r4, [r5, #8]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    214c:	fba0 0101 	umull	r0, r1, r0, r1
    2150:	f7ff fc6c 	bl	1a2c <__aeabi_uldivmod>
    2154:	60e8      	str	r0, [r5, #12]
	uint16_t interval = adv->interval;
    2156:	f8b5 804c 	ldrh.w	r8, [r5, #76]	; 0x4c
	ticks_anchor = ticker_ticks_now_get();
    215a:	f029 fd82 	bl	2bc62 <ticker_ticks_now_get>
    215e:	4681      	mov	r9, r0
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
    2160:	f1b8 0f00 	cmp.w	r8, #0
    2164:	d105      	bne.n	2172 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x172>
    2166:	783c      	ldrb	r4, [r7, #0]
    2168:	f004 040f 	and.w	r4, r4, #15
    216c:	1e63      	subs	r3, r4, #1
    216e:	425c      	negs	r4, r3
    2170:	415c      	adcs	r4, r3
    2172:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
    2176:	68eb      	ldr	r3, [r5, #12]
    2178:	f8df b13c 	ldr.w	fp, [pc, #316]	; 22b8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2b8>
    217c:	f364 0200 	bfi	r2, r4, #0, #1
	if (lll->is_hdcd) {
    2180:	f012 0401 	ands.w	r4, r2, #1
    2184:	f04f 0a02 	mov.w	sl, #2
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
    2188:	f885 2028 	strb.w	r2, [r5, #40]	; 0x28
	if (lll->is_hdcd) {
    218c:	af0b      	add	r7, sp, #44	; 0x2c
    218e:	4a46      	ldr	r2, [pc, #280]	; (22a8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2a8>)
		ret_cb = TICKER_STATUS_BUSY;
    2190:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
	if (lll->is_hdcd) {
    2194:	d053      	beq.n	223e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x23e>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2196:	2000      	movs	r0, #0
    2198:	e9cd 2505 	strd	r2, r5, [sp, #20]
    219c:	9304      	str	r3, [sp, #16]
    219e:	e9cd 0300 	strd	r0, r3, [sp]
    21a2:	2103      	movs	r1, #3
    21a4:	e9cd b707 	strd	fp, r7, [sp, #28]
    21a8:	e9cd 0002 	strd	r0, r0, [sp, #8]
    21ac:	464b      	mov	r3, r9
    21ae:	4652      	mov	r2, sl
    21b0:	f029 fd24 	bl	2bbfc <ticker_start>
		ret = ull_ticker_status_take(ret, &ret_cb);
    21b4:	4639      	mov	r1, r7
    21b6:	f018 f945 	bl	1a444 <ull_ticker_status_take>
		if (ret != TICKER_STATUS_SUCCESS) {
    21ba:	2800      	cmp	r0, #0
    21bc:	d163      	bne.n	2286 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x286>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    21be:	4a3b      	ldr	r2, [pc, #236]	; (22ac <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2ac>)
    21c0:	9506      	str	r5, [sp, #24]
    21c2:	f24a 33d8 	movw	r3, #41944	; 0xa3d8
    21c6:	e9cd 0204 	strd	r0, r2, [sp, #16]
    21ca:	9300      	str	r3, [sp, #0]
    21cc:	e9cd b707 	strd	fp, r7, [sp, #28]
    21d0:	e9cd 0002 	strd	r0, r0, [sp, #8]
    21d4:	9001      	str	r0, [sp, #4]
    21d6:	464b      	mov	r3, r9
    21d8:	2201      	movs	r2, #1
    21da:	2103      	movs	r1, #3
		ret_cb = TICKER_STATUS_BUSY;
    21dc:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    21e0:	f029 fd0c 	bl	2bbfc <ticker_start>
	ret = ull_ticker_status_take(ret, &ret_cb);
    21e4:	4639      	mov	r1, r7
    21e6:	f018 f92d 	bl	1a444 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
    21ea:	2800      	cmp	r0, #0
    21ec:	d14b      	bne.n	2286 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x286>
	adv->is_enabled = 1;
    21ee:	f895 304e 	ldrb.w	r3, [r5, #78]	; 0x4e
    21f2:	f043 0301 	orr.w	r3, r3, #1
    21f6:	f885 304e 	strb.w	r3, [r5, #78]	; 0x4e
	return 0;
    21fa:	e6b8      	b.n	1f6e <ll_adv_enable+0xe>
			if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    21fc:	2a01      	cmp	r2, #1
    21fe:	d016      	beq.n	222e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x22e>
					BYTES2US((PDU_OVERHEAD_SIZE(PHY_1M) +
    2200:	f898 3001 	ldrb.w	r3, [r8, #1]
    2204:	3310      	adds	r3, #16
		const uint16_t scan_rsp_us =
    2206:	00db      	lsls	r3, r3, #3
			} else if (pdu_adv->type == PDU_ADV_TYPE_ADV_IND) {
    2208:	b95a      	cbnz	r2, 2222 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x222>
				adv_size += pdu_adv->len;
    220a:	787a      	ldrb	r2, [r7, #1]
    220c:	3210      	adds	r2, #16
				slot_us += scan_req_us + EVENT_IFS_MAX_US +
    220e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
			slot_us += (BYTES2US(adv_size, phy) + EVENT_IFS_MAX_US
    2212:	00d2      	lsls	r2, r2, #3
    2214:	3398      	adds	r3, #152	; 0x98
    2216:	4413      	add	r3, r2
				  + rx_to_us + rxtx_turn_us) * (adv_chn_cnt-1)
    2218:	f502 729a 	add.w	r2, r2, #308	; 0x134
			slot_us += (BYTES2US(adv_size, phy) + EVENT_IFS_MAX_US
    221c:	fb04 3002 	mla	r0, r4, r2, r3
    2220:	e782      	b.n	2128 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x128>
			} else if (pdu_adv->type == PDU_ADV_TYPE_SCAN_IND) {
    2222:	2a06      	cmp	r2, #6
    2224:	d107      	bne.n	2236 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x236>
				adv_size += pdu_adv->len;
    2226:	7879      	ldrb	r1, [r7, #1]
    2228:	f101 0210 	add.w	r2, r1, #16
    222c:	e7ef      	b.n	220e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x20e>
				adv_size += TARGETA_SIZE;
    222e:	2216      	movs	r2, #22
				slot_us += conn_ind_us;
    2230:	f44f 732d 	mov.w	r3, #692	; 0x2b4
    2234:	e7ed      	b.n	2212 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x212>
		uint32_t adv_size		= PDU_OVERHEAD_SIZE(phy) +
    2236:	2210      	movs	r2, #16
	uint32_t slot_us = EVENT_OVERHEAD_START_US + EVENT_OVERHEAD_END_US;
    2238:	f44f 73aa 	mov.w	r3, #340	; 0x154
    223c:	e7e9      	b.n	2212 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x212>
		ll_adv_ticker_ext[handle].ticks_slot_window =
    223e:	491c      	ldr	r1, [pc, #112]	; (22b0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2b0>)
			ULL_ADV_RANDOM_DELAY + ticks_slot;
    2240:	f203 1047 	addw	r0, r3, #327	; 0x147
		ll_adv_ticker_ext[handle].ticks_slot_window =
    2244:	6008      	str	r0, [r1, #0]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    2246:	481b      	ldr	r0, [pc, #108]	; (22b4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2b4>)
		ret = ticker_start_ext(
    2248:	e9cd 3204 	strd	r3, r2, [sp, #16]
    224c:	e9cd 5b06 	strd	r5, fp, [sp, #24]
    2250:	f64f 73ff 	movw	r3, #65535	; 0xffff
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    2254:	fa1f fb88 	uxth.w	fp, r8
		ret = ticker_start_ext(
    2258:	e9cd 7108 	strd	r7, r1, [sp, #32]
    225c:	e9cd 4302 	strd	r4, r3, [sp, #8]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    2260:	fbab 0100 	umull	r0, r1, fp, r0
    2264:	2391      	movs	r3, #145	; 0x91
    2266:	fb03 110b 	mla	r1, r3, fp, r1
    226a:	a30b      	add	r3, pc, #44	; (adr r3, 2298 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x298>)
    226c:	e9d3 2300 	ldrd	r2, r3, [r3]
    2270:	f7ff fbdc 	bl	1a2c <__aeabi_uldivmod>
		ret = ticker_start_ext(
    2274:	464b      	mov	r3, r9
    2276:	e9cd 4000 	strd	r4, r0, [sp]
    227a:	4652      	mov	r2, sl
    227c:	2103      	movs	r1, #3
    227e:	4620      	mov	r0, r4
    2280:	f016 fc20 	bl	18ac4 <ticker_start_ext>
    2284:	e7ae      	b.n	21e4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1e4>
	if (adv->lll.conn) {
    2286:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    2288:	2b00      	cmp	r3, #0
    228a:	f43f ae7b 	beq.w	1f84 <ll_adv_enable+0x24>
		conn_release(adv);
    228e:	4804      	ldr	r0, [pc, #16]	; (22a0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2a0>)
    2290:	f018 fc16 	bl	1aac0 <conn_release>
    2294:	e676      	b.n	1f84 <ll_adv_enable+0x24>
    2296:	bf00      	nop
    2298:	1afd498d 	.word	0x1afd498d
    229c:	00000007 	.word	0x00000007
    22a0:	20003b4c 	.word	0x20003b4c
    22a4:	3b9aca00 	.word	0x3b9aca00
    22a8:	0001a9d1 	.word	0x0001a9d1
    22ac:	0001ac8d 	.word	0x0001ac8d
    22b0:	20003b9c 	.word	0x20003b9c
    22b4:	84e72a00 	.word	0x84e72a00
    22b8:	00019d6d 	.word	0x00019d6d
    22bc:	00000000 	.word	0x00000000

000022c0 <ull_scan_enable>:
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
						   SCAN_INT_UNIT_US);
}

uint8_t ull_scan_enable(struct ll_scan_set *scan)
{
    22c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t volatile ret_cb;
	uint32_t ticks_interval;
	uint32_t ticks_anchor;
	uint32_t ret;

	lll->chan = 0;
    22c4:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
	ll_addr_get(lll->init_addr_type, lll->init_addr);

	ull_hdr_init(&scan->ull);
	lll_hdr_init(lll, scan);

	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
    22c8:	4f41      	ldr	r7, [pc, #260]	; (23d0 <ull_scan_enable+0x110>)
{
    22ca:	4604      	mov	r4, r0
	lll->init_addr_type = scan->own_addr_type;
    22cc:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
    22d0:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
    22d4:	f3c0 0040 	ubfx	r0, r0, #1, #1
    22d8:	f360 1386 	bfi	r3, r0, #6, #1
{
    22dc:	b08d      	sub	sp, #52	; 0x34
	lll->init_addr_type = scan->own_addr_type;
    22de:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	ll_addr_get(lll->init_addr_type, lll->init_addr);
    22e2:	f104 0125 	add.w	r1, r4, #37	; 0x25
    22e6:	f016 fcbd 	bl	18c64 <ll_addr_get>
    22ea:	f894 3020 	ldrb.w	r3, [r4, #32]
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
    22ee:	f8b4 8032 	ldrh.w	r8, [r4, #50]	; 0x32
	hdr->parent = parent;
    22f2:	61e4      	str	r4, [r4, #28]
    22f4:	2500      	movs	r5, #0
	hdr->is_stop = 0U;
    22f6:	f365 0300 	bfi	r3, r5, #0, #1
    22fa:	fba8 0107 	umull	r0, r1, r8, r7
    22fe:	f884 3020 	strb.w	r3, [r4, #32]
    2302:	2391      	movs	r3, #145	; 0x91
    2304:	fb03 1108 	mla	r1, r3, r8, r1
    2308:	e9c4 5505 	strd	r5, r5, [r4, #20]
    230c:	a32e      	add	r3, pc, #184	; (adr r3, 23c8 <ull_scan_enable+0x108>)
    230e:	e9d3 2300 	ldrd	r2, r3, [r3]
    2312:	f7ff fb8b 	bl	1a2c <__aeabi_uldivmod>
						SCAN_INT_UNIT_US);

	/* TODO: active_to_start feature port */
	scan->evt.ticks_active_to_start = 0U;
	scan->evt.ticks_xtal_to_start =
    2316:	2331      	movs	r3, #49	; 0x31
    2318:	6023      	str	r3, [r4, #0]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_XTAL_US);
	scan->evt.ticks_preempt_to_start =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_PREEMPT_MIN_US);
	if ((lll->ticks_window +
    231a:	6b63      	ldr	r3, [r4, #52]	; 0x34
	scan->evt.ticks_active_to_start = 0U;
    231c:	6065      	str	r5, [r4, #4]
	if ((lll->ticks_window +
    231e:	3309      	adds	r3, #9
	     HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US)) <
	    (ticks_interval -
    2320:	f1a0 0231 	sub.w	r2, r0, #49	; 0x31
	if ((lll->ticks_window +
    2324:	4293      	cmp	r3, r2
	     HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_XTAL_US))) {
		scan->evt.ticks_slot =
    2326:	bf32      	itee	cc
    2328:	60e3      	strcc	r3, [r4, #12]
			(lll->ticks_window +
			 HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US));
	} else {
		if (IS_ENABLED(CONFIG_BT_CTLR_SCAN_UNRESERVED)) {
			scan->evt.ticks_slot = 0U;
    232a:	60e5      	strcs	r5, [r4, #12]
		} else {
			scan->evt.ticks_slot = ticks_interval -
				HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_XTAL_US);
		}

		lll->ticks_window = 0U;
    232c:	6365      	strcs	r5, [r4, #52]	; 0x34
	scan->evt.ticks_preempt_to_start =
    232e:	60a5      	str	r5, [r4, #8]
	return &ll_scan[handle];
}

uint8_t ull_scan_handle_get(struct ll_scan_set *scan)
{
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
    2330:	4d28      	ldr	r5, [pc, #160]	; (23d4 <ull_scan_enable+0x114>)
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
    2332:	4606      	mov	r6, r0
	ticks_anchor = ticker_ticks_now_get();
    2334:	f029 fc95 	bl	2bc62 <ticker_ticks_now_get>
	ret_cb = TICKER_STATUS_BUSY;
    2338:	2302      	movs	r3, #2
    233a:	930b      	str	r3, [sp, #44]	; 0x2c
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
    233c:	1b65      	subs	r5, r4, r5
    233e:	233c      	movs	r3, #60	; 0x3c
    2340:	fbb5 f5f3 	udiv	r5, r5, r3
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2344:	4b24      	ldr	r3, [pc, #144]	; (23d8 <ull_scan_enable+0x118>)
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    2346:	f8b4 b032 	ldrh.w	fp, [r4, #50]	; 0x32
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    234a:	e9cd 4306 	strd	r4, r3, [sp, #24]
    234e:	4b23      	ldr	r3, [pc, #140]	; (23dc <ull_scan_enable+0x11c>)
    2350:	9305      	str	r3, [sp, #20]
    2352:	46ba      	mov	sl, r7
    2354:	68e3      	ldr	r3, [r4, #12]
    2356:	9304      	str	r3, [sp, #16]
	ticks_anchor = ticker_ticks_now_get();
    2358:	4607      	mov	r7, r0
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    235a:	2391      	movs	r3, #145	; 0x91
    235c:	fbab 010a 	umull	r0, r1, fp, sl
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2360:	f04f 0800 	mov.w	r8, #0
    2364:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    2368:	fb03 110b 	mla	r1, r3, fp, r1
    236c:	a316      	add	r3, pc, #88	; (adr r3, 23c8 <ull_scan_enable+0x108>)
    236e:	e9d3 2300 	ldrd	r2, r3, [r3]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2372:	f8cd 9020 	str.w	r9, [sp, #32]
    2376:	f8cd 800c 	str.w	r8, [sp, #12]
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    237a:	f7ff fb57 	bl	1a2c <__aeabi_uldivmod>
    237e:	4610      	mov	r0, r2
    2380:	4619      	mov	r1, r3
    2382:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2386:	2300      	movs	r3, #0
    2388:	f7ff fb50 	bl	1a2c <__aeabi_uldivmod>
			   TICKER_USER_ID_THREAD, TICKER_ID_SCAN_BASE + handle,
    238c:	3504      	adds	r5, #4
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    238e:	b2ed      	uxtb	r5, r5
    2390:	e9cd 6001 	strd	r6, r0, [sp, #4]
    2394:	2103      	movs	r1, #3
    2396:	f8cd 8000 	str.w	r8, [sp]
    239a:	463b      	mov	r3, r7
    239c:	462a      	mov	r2, r5
    239e:	4640      	mov	r0, r8
    23a0:	f029 fc2c 	bl	2bbfc <ticker_start>
	ret = ull_ticker_status_take(ret, &ret_cb);
    23a4:	4649      	mov	r1, r9
    23a6:	f018 f84d 	bl	1a444 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
    23aa:	b940      	cbnz	r0, 23be <ull_scan_enable+0xfe>
	scan->is_enabled = 1U;
    23ac:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    23b0:	f043 0301 	orr.w	r3, r3, #1
    23b4:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
    23b8:	b00d      	add	sp, #52	; 0x34
    23ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    23be:	200c      	movs	r0, #12
    23c0:	e7fa      	b.n	23b8 <ull_scan_enable+0xf8>
    23c2:	bf00      	nop
    23c4:	f3af 8000 	nop.w
    23c8:	1afd498d 	.word	0x1afd498d
    23cc:	00000007 	.word	0x00000007
    23d0:	84e72a00 	.word	0x84e72a00
    23d4:	20003bc0 	.word	0x20003bc0
    23d8:	00019d6d 	.word	0x00019d6d
    23dc:	0001b029 	.word	0x0001b029

000023e0 <ll_scan_params_set>:
{
    23e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    23e2:	4606      	mov	r6, r0
	scan = ull_scan_is_disabled_get(SCAN_HANDLE_1M);
    23e4:	2000      	movs	r0, #0
{
    23e6:	4615      	mov	r5, r2
    23e8:	461f      	mov	r7, r3
	scan = ull_scan_is_disabled_get(SCAN_HANDLE_1M);
    23ea:	f018 fe8b 	bl	1b104 <ull_scan_is_disabled_get>
	if (!scan) {
    23ee:	4604      	mov	r4, r0
    23f0:	b1f8      	cbz	r0, 2432 <ll_scan_params_set+0x52>
	scan->own_addr_type = own_addr_type;
    23f2:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
	lll->type = type;
    23f6:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
	lll->interval = interval;
    23fa:	8641      	strh	r1, [r0, #50]	; 0x32
	scan->own_addr_type = own_addr_type;
    23fc:	f367 0242 	bfi	r2, r7, #1, #2
    2400:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
	lll->filter_policy = filter_policy;
    2404:	f89d 2018 	ldrb.w	r2, [sp, #24]
	lll->type = type;
    2408:	f366 13c7 	bfi	r3, r6, #7, #1
	lll->filter_policy = filter_policy;
    240c:	f362 03c4 	bfi	r3, r2, #3, #2
    2410:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
    2414:	480a      	ldr	r0, [pc, #40]	; (2440 <ll_scan_params_set+0x60>)
    2416:	b2ad      	uxth	r5, r5
    2418:	fba5 0100 	umull	r0, r1, r5, r0
    241c:	2391      	movs	r3, #145	; 0x91
    241e:	fb03 1105 	mla	r1, r3, r5, r1
    2422:	a305      	add	r3, pc, #20	; (adr r3, 2438 <ll_scan_params_set+0x58>)
    2424:	e9d3 2300 	ldrd	r2, r3, [r3]
    2428:	f7ff fb00 	bl	1a2c <__aeabi_uldivmod>
    242c:	6360      	str	r0, [r4, #52]	; 0x34
	return 0;
    242e:	2000      	movs	r0, #0
}
    2430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    2432:	200c      	movs	r0, #12
    2434:	e7fc      	b.n	2430 <ll_scan_params_set+0x50>
    2436:	bf00      	nop
    2438:	1afd498d 	.word	0x1afd498d
    243c:	00000007 	.word	0x00000007
    2440:	84e72a00 	.word	0x84e72a00
    2444:	00000000 	.word	0x00000000

00002448 <ull_conn_llcp>:

	return 0;
}

int ull_conn_llcp(struct ll_conn *conn, uint32_t ticks_at_expire, uint16_t lazy)
{
    2448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    244c:	4693      	mov	fp, r2
	/* Check if no other procedure with instant is requested and not in
	 * Encryption setup.
	 */
	if ((conn->llcp_ack == conn->llcp_req) &&
    244e:	f890 308c 	ldrb.w	r3, [r0, #140]	; 0x8c
    2452:	f890 208d 	ldrb.w	r2, [r0, #141]	; 0x8d
    2456:	4293      	cmp	r3, r2
{
    2458:	b08d      	sub	sp, #52	; 0x34
    245a:	4604      	mov	r4, r0
    245c:	4688      	mov	r8, r1
	if ((conn->llcp_ack == conn->llcp_req) &&
    245e:	d10b      	bne.n	2478 <ull_conn_llcp+0x30>
#endif /* !CONFIG_BT_CTLR_LE_ENC */

		/* TODO: Optimize the checks below, maybe have common flag */

		/* check if connection update procedure is requested */
		if (conn->llcp_cu.ack != conn->llcp_cu.req) {
    2460:	f890 20a1 	ldrb.w	r2, [r0, #161]	; 0xa1
    2464:	f890 10a0 	ldrb.w	r1, [r0, #160]	; 0xa0
    2468:	4291      	cmp	r1, r2
    246a:	d024      	beq.n	24b6 <ull_conn_llcp+0x6e>
			/* switch to LLCP_CONN_UPD state machine */
			conn->llcp_type = LLCP_CONN_UPD;
    246c:	2201      	movs	r2, #1
			conn->llcp_ack -= 2U;
    246e:	3b02      	subs	r3, #2
			conn->llcp_type = LLCP_CONN_UPD;
    2470:	f880 208e 	strb.w	r2, [r0, #142]	; 0x8e
			conn->llcp_ack -= 2U;
    2474:	f880 308d 	strb.w	r3, [r0, #141]	; 0x8d
	}

	/* Check if procedures with instant or encryption setup is requested or
	 * active.
	 */
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    2478:	f894 208c 	ldrb.w	r2, [r4, #140]	; 0x8c
    247c:	f894 308d 	ldrb.w	r3, [r4, #141]	; 0x8d
    2480:	1ad3      	subs	r3, r2, r3
    2482:	f003 0303 	and.w	r3, r3, #3
    2486:	2b02      	cmp	r3, #2
    2488:	f040 825d 	bne.w	2946 <ull_conn_llcp+0x4fe>
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */
		}

		/* Process procedures with instants or encryption setup */
		/* FIXME: Make LE Ping cacheable */
		switch (conn->llcp_type) {
    248c:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
    2490:	2b01      	cmp	r3, #1
    2492:	f000 8206 	beq.w	28a2 <ull_conn_llcp+0x45a>
    2496:	2b02      	cmp	r3, #2
    2498:	f000 8410 	beq.w	2cbc <ull_conn_llcp+0x874>
		}
		break;
#endif /* CONFIG_BT_CTLR_PHY */

		default:
			LL_ASSERT(0);
    249c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
    24a0:	49c6      	ldr	r1, [pc, #792]	; (27bc <ull_conn_llcp+0x374>)
    24a2:	48c7      	ldr	r0, [pc, #796]	; (27c0 <ull_conn_llcp+0x378>)
    24a4:	f024 fd63 	bl	26f6e <printk>
    24a8:	4040      	eors	r0, r0
    24aa:	f380 8811 	msr	BASEPRI, r0
    24ae:	f04f 0003 	mov.w	r0, #3
    24b2:	df02      	svc	2
			break;
    24b4:	e247      	b.n	2946 <ull_conn_llcp+0x4fe>
		} else if (conn->llcp_feature.ack != conn->llcp_feature.req) {
    24b6:	f890 30b5 	ldrb.w	r3, [r0, #181]	; 0xb5
    24ba:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    24be:	428b      	cmp	r3, r1
    24c0:	d05c      	beq.n	257c <ull_conn_llcp+0x134>
static inline void event_fex_prep(struct ll_conn *conn)
{
	struct node_tx *tx;

	/* If waiting for response, do nothing */
	if (!((conn->llcp_feature.ack - conn->llcp_feature.req) & 0x01)) {
    24c2:	1a5b      	subs	r3, r3, r1
    24c4:	07de      	lsls	r6, r3, #31
    24c6:	d5d7      	bpl.n	2478 <ull_conn_llcp+0x30>
		return;
	}

	if (conn->common.fex_valid) {
    24c8:	f890 5080 	ldrb.w	r5, [r0, #128]	; 0x80
    24cc:	f015 0501 	ands.w	r5, r5, #1
    24d0:	d027      	beq.n	2522 <ull_conn_llcp+0xda>
		struct node_rx_pdu *rx;
		struct pdu_data *pdu;

		/* get a rx node for ULL->LL */
		rx = ll_pdu_rx_alloc();
    24d2:	f017 ff59 	bl	1a388 <ll_pdu_rx_alloc>
		if (!rx) {
    24d6:	4601      	mov	r1, r0
    24d8:	2800      	cmp	r0, #0
    24da:	d0cd      	beq.n	2478 <ull_conn_llcp+0x30>
			return;
		}

		/* procedure request acked */
		conn->llcp_feature.ack = conn->llcp_feature.req;
    24dc:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
    24e0:	f884 30b5 	strb.w	r3, [r4, #181]	; 0xb5

		/* prepare feature rsp structure */
		rx->hdr.handle = conn->lll.handle;
    24e4:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    24e6:	80c3      	strh	r3, [r0, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    24e8:	2303      	movs	r3, #3
    24ea:	7103      	strb	r3, [r0, #4]
		pdu = (void *)rx->pdu;
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    24ec:	7f03      	ldrb	r3, [r0, #28]
    24ee:	f043 0303 	orr.w	r3, r3, #3
    24f2:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    24f4:	2309      	movs	r3, #9
    24f6:	7743      	strb	r3, [r0, #29]
			   sizeof(struct pdu_data_llctrl_feature_rsp);
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    24f8:	77c3      	strb	r3, [r0, #31]

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    24fa:	2300      	movs	r3, #0
    24fc:	6203      	str	r3, [r0, #32]
    24fe:	6243      	str	r3, [r0, #36]	; 0x24
		(void)memset(&pdu->llctrl.feature_rsp.features[0], 0x00,
			sizeof(pdu->llctrl.feature_rsp.features));
		sys_put_le24(conn->llcp_feature.features_peer,
    2500:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
    2504:	f880 3020 	strb.w	r3, [r0, #32]
	dst[1] = val >> 8;
    2508:	f3c3 2207 	ubfx	r2, r3, #8, #8
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le24(uint32_t val, uint8_t dst[3])
{
	sys_put_le16(val, dst);
	dst[2] = val >> 16;
    250c:	0c1b      	lsrs	r3, r3, #16
	dst[1] = val >> 8;
    250e:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
	dst[2] = val >> 16;
    2512:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
			sys_cpu_to_le16(conn->llcp_version.company_id);
		pdu->llctrl.version_ind.sub_version_number =
			sys_cpu_to_le16(conn->llcp_version.sub_version_number);

		/* enqueue version ind structure into rx queue */
		ll_rx_put(rx->hdr.link, rx);
    2516:	6808      	ldr	r0, [r1, #0]
    2518:	f017 ff0e 	bl	1a338 <ll_rx_put>
		ll_rx_sched();
    251c:	f017 ff16 	bl	1a34c <ll_rx_sched>
    2520:	e7aa      	b.n	2478 <ull_conn_llcp+0x30>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2522:	48a8      	ldr	r0, [pc, #672]	; (27c4 <ull_conn_llcp+0x37c>)
    2524:	f029 f8c5 	bl	2b6b2 <mem_acquire>
	if (tx) {
    2528:	4601      	mov	r1, r0
    252a:	2800      	cmp	r0, #0
    252c:	d0a4      	beq.n	2478 <ull_conn_llcp+0x30>
		conn->llcp_feature.ack--;
    252e:	f894 30b5 	ldrb.w	r3, [r4, #181]	; 0xb5
    2532:	3b01      	subs	r3, #1
    2534:	f884 30b5 	strb.w	r3, [r4, #181]	; 0xb5
		conn->llcp_feature.features_conn = LL_FEAT;
    2538:	238e      	movs	r3, #142	; 0x8e
    253a:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    253e:	7903      	ldrb	r3, [r0, #4]
    2540:	f043 0303 	orr.w	r3, r3, #3
    2544:	7103      	strb	r3, [r0, #4]
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
    2546:	2309      	movs	r3, #9
    2548:	7143      	strb	r3, [r0, #5]
		pdu->llctrl.opcode = !conn->lll.role ?
    254a:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    254e:	6085      	str	r5, [r0, #8]
    2550:	2b00      	cmp	r3, #0
    2552:	bfac      	ite	ge
    2554:	2308      	movge	r3, #8
    2556:	230e      	movlt	r3, #14
    2558:	60c5      	str	r5, [r0, #12]
    255a:	71c3      	strb	r3, [r0, #7]
		sys_put_le24(conn->llcp_feature.features_conn,
    255c:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
	dst[0] = val;
    2560:	7203      	strb	r3, [r0, #8]
	dst[1] = val >> 8;
    2562:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[2] = val >> 16;
    2566:	0c1b      	lsrs	r3, r3, #16
	dst[1] = val >> 8;
    2568:	7242      	strb	r2, [r0, #9]
	dst[2] = val >> 16;
    256a:	7283      	strb	r3, [r0, #10]
			ctrl_tx_enqueue(conn, tx);
    256c:	4620      	mov	r0, r4
    256e:	f029 fcfd 	bl	2bf6c <ctrl_tx_enqueue>
			conn->procedure_expire = conn->procedure_reload;
    2572:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    2576:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
    257a:	e77d      	b.n	2478 <ull_conn_llcp+0x30>
		} else if (conn->llcp_version.ack != conn->llcp_version.req) {
    257c:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    2580:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    2584:	428b      	cmp	r3, r1
    2586:	d05e      	beq.n	2646 <ull_conn_llcp+0x1fe>
	if (!((conn->llcp_version.ack - conn->llcp_version.req) & 0x01)) {
    2588:	1a5b      	subs	r3, r3, r1
    258a:	07dd      	lsls	r5, r3, #31
    258c:	f57f af74 	bpl.w	2478 <ull_conn_llcp+0x30>
	if (conn->llcp_version.tx == 0U) {
    2590:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    2594:	f013 0501 	ands.w	r5, r3, #1
    2598:	d123      	bne.n	25e2 <ull_conn_llcp+0x19a>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    259a:	488a      	ldr	r0, [pc, #552]	; (27c4 <ull_conn_llcp+0x37c>)
    259c:	f029 f889 	bl	2b6b2 <mem_acquire>
		if (tx) {
    25a0:	4601      	mov	r1, r0
    25a2:	2800      	cmp	r0, #0
    25a4:	f43f af68 	beq.w	2478 <ull_conn_llcp+0x30>
			conn->llcp_version.ack--;
    25a8:	f894 30c1 	ldrb.w	r3, [r4, #193]	; 0xc1
    25ac:	3b01      	subs	r3, #1
    25ae:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
			conn->llcp_version.tx = 1U;
    25b2:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    25b6:	f043 0301 	orr.w	r3, r3, #1
    25ba:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    25be:	7903      	ldrb	r3, [r0, #4]
			pdu->llctrl.version_ind.company_id = cid;
    25c0:	7285      	strb	r5, [r0, #10]
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    25c2:	f043 0303 	orr.w	r3, r3, #3
    25c6:	7103      	strb	r3, [r0, #4]
			pdu->len =
    25c8:	2306      	movs	r3, #6
    25ca:	7143      	strb	r3, [r0, #5]
			pdu->llctrl.opcode =
    25cc:	230c      	movs	r3, #12
    25ce:	71c3      	strb	r3, [r0, #7]
			pdu->llctrl.version_ind.version_number =
    25d0:	230b      	movs	r3, #11
    25d2:	7203      	strb	r3, [r0, #8]
			pdu->llctrl.version_ind.company_id = cid;
    25d4:	2359      	movs	r3, #89	; 0x59
    25d6:	7243      	strb	r3, [r0, #9]
			pdu->llctrl.version_ind.sub_version_number = svn;
    25d8:	f04f 33ff 	mov.w	r3, #4294967295
    25dc:	72c3      	strb	r3, [r0, #11]
    25de:	7303      	strb	r3, [r0, #12]
    25e0:	e7c4      	b.n	256c <ull_conn_llcp+0x124>
	} else if (conn->llcp_version.rx) {
    25e2:	0798      	lsls	r0, r3, #30
    25e4:	d522      	bpl.n	262c <ull_conn_llcp+0x1e4>
		rx = ll_pdu_rx_alloc();
    25e6:	f017 fecf 	bl	1a388 <ll_pdu_rx_alloc>
		if (!rx) {
    25ea:	4601      	mov	r1, r0
    25ec:	2800      	cmp	r0, #0
    25ee:	f43f af43 	beq.w	2478 <ull_conn_llcp+0x30>
		conn->llcp_version.ack = conn->llcp_version.req;
    25f2:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    25f6:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		rx->hdr.handle = conn->lll.handle;
    25fa:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    25fc:	80c3      	strh	r3, [r0, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    25fe:	2303      	movs	r3, #3
    2600:	7103      	strb	r3, [r0, #4]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    2602:	7f03      	ldrb	r3, [r0, #28]
    2604:	f043 0303 	orr.w	r3, r3, #3
    2608:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
    260a:	2306      	movs	r3, #6
    260c:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    260e:	230c      	movs	r3, #12
    2610:	77c3      	strb	r3, [r0, #31]
		pdu->llctrl.version_ind.version_number =
    2612:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
    2616:	f880 3020 	strb.w	r3, [r0, #32]
		pdu->llctrl.version_ind.company_id =
    261a:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    261e:	f8a0 3021 	strh.w	r3, [r0, #33]	; 0x21
		pdu->llctrl.version_ind.sub_version_number =
    2622:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    2626:	f8a0 3023 	strh.w	r3, [r0, #35]	; 0x23
    262a:	e774      	b.n	2516 <ull_conn_llcp+0xce>
	} else {
		/* tx-ed but no rx, and new request placed */
		LL_ASSERT(0);
    262c:	f640 327a 	movw	r2, #2938	; 0xb7a
	case LLCP_CPR_STATE_UPD:
		/* Do nothing */
		break;

	default:
		LL_ASSERT(0);
    2630:	4962      	ldr	r1, [pc, #392]	; (27bc <ull_conn_llcp+0x374>)
    2632:	4863      	ldr	r0, [pc, #396]	; (27c0 <ull_conn_llcp+0x378>)
    2634:	f024 fc9b 	bl	26f6e <printk>
    2638:	4040      	eors	r0, r0
    263a:	f380 8811 	msr	BASEPRI, r0
    263e:	f04f 0003 	mov.w	r0, #3
    2642:	df02      	svc	2
		break;
    2644:	e718      	b.n	2478 <ull_conn_llcp+0x30>
		} else if (conn->llcp_conn_param.ack !=
    2646:	f890 10ed 	ldrb.w	r1, [r0, #237]	; 0xed
    264a:	f890 30ec 	ldrb.w	r3, [r0, #236]	; 0xec
    264e:	4299      	cmp	r1, r3
    2650:	f43f af12 	beq.w	2478 <ull_conn_llcp+0x30>
	conn_upd = conn_upd_curr;
    2654:	4d5c      	ldr	r5, [pc, #368]	; (27c8 <ull_conn_llcp+0x380>)
    2656:	682b      	ldr	r3, [r5, #0]
	if (conn_upd && (conn_upd != conn)) {
    2658:	b113      	cbz	r3, 2660 <ull_conn_llcp+0x218>
    265a:	4298      	cmp	r0, r3
    265c:	f47f af0c 	bne.w	2478 <ull_conn_llcp+0x30>
	switch (conn->llcp_conn_param.state) {
    2660:	f894 30ee 	ldrb.w	r3, [r4, #238]	; 0xee
    2664:	f003 0307 	and.w	r3, r3, #7
    2668:	2b05      	cmp	r3, #5
    266a:	f200 8117 	bhi.w	289c <ull_conn_llcp+0x454>
    266e:	a101      	add	r1, pc, #4	; (adr r1, 2674 <ull_conn_llcp+0x22c>)
    2670:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    2674:	0000268d 	.word	0x0000268d
    2678:	00002707 	.word	0x00002707
    267c:	00002853 	.word	0x00002853
    2680:	00002479 	.word	0x00002479
    2684:	00002479 	.word	0x00002479
    2688:	00002479 	.word	0x00002479
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    268c:	484d      	ldr	r0, [pc, #308]	; (27c4 <ull_conn_llcp+0x37c>)
			event_counter = lll->event_counter +
    268e:	8ee6      	ldrh	r6, [r4, #54]	; 0x36
					lll->latency_prepare + lazy;
    2690:	8e67      	ldrh	r7, [r4, #50]	; 0x32
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2692:	f029 f80e 	bl	2b6b2 <mem_acquire>
	if (!tx) {
    2696:	4601      	mov	r1, r0
    2698:	2800      	cmp	r0, #0
    269a:	f43f aeed 	beq.w	2478 <ull_conn_llcp+0x30>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    269e:	f894 30ee 	ldrb.w	r3, [r4, #238]	; 0xee
    26a2:	2204      	movs	r2, #4
    26a4:	f362 0302 	bfi	r3, r2, #0, #3
    26a8:	f884 30ee 	strb.w	r3, [r4, #238]	; 0xee
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    26ac:	7903      	ldrb	r3, [r0, #4]
    26ae:	f043 0303 	orr.w	r3, r3, #3
    26b2:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    26b4:	2318      	movs	r3, #24
    26b6:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    26b8:	230f      	movs	r3, #15
    26ba:	71c3      	strb	r3, [r0, #7]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    26bc:	f8b4 30f0 	ldrh.w	r3, [r4, #240]	; 0xf0
    26c0:	8103      	strh	r3, [r0, #8]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    26c2:	f8b4 30f2 	ldrh.w	r3, [r4, #242]	; 0xf2
    26c6:	8143      	strh	r3, [r0, #10]
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    26c8:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
    26cc:	8183      	strh	r3, [r0, #12]
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    26ce:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
    26d2:	81c3      	strh	r3, [r0, #14]
			event_counter = lll->event_counter +
    26d4:	443e      	add	r6, r7
	p->preferred_periodicity = 0U;
    26d6:	2300      	movs	r3, #0
    26d8:	7403      	strb	r3, [r0, #16]
	p->offset0 = sys_cpu_to_le16(0x0000);
    26da:	74c3      	strb	r3, [r0, #19]
    26dc:	7503      	strb	r3, [r0, #20]
	p->reference_conn_event_count = sys_cpu_to_le16(event_counter);
    26de:	445e      	add	r6, fp
	p->offset1 = sys_cpu_to_le16(0xffff);
    26e0:	f04f 33ff 	mov.w	r3, #4294967295
	p->reference_conn_event_count = sys_cpu_to_le16(event_counter);
    26e4:	f8a0 6011 	strh.w	r6, [r0, #17]
	p->offset1 = sys_cpu_to_le16(0xffff);
    26e8:	7543      	strb	r3, [r0, #21]
    26ea:	7583      	strb	r3, [r0, #22]
	p->offset2 = sys_cpu_to_le16(0xffff);
    26ec:	75c3      	strb	r3, [r0, #23]
    26ee:	7603      	strb	r3, [r0, #24]
	p->offset3 = sys_cpu_to_le16(0xffff);
    26f0:	7643      	strb	r3, [r0, #25]
    26f2:	7683      	strb	r3, [r0, #26]
	p->offset4 = sys_cpu_to_le16(0xffff);
    26f4:	76c3      	strb	r3, [r0, #27]
    26f6:	7703      	strb	r3, [r0, #28]
	p->offset5 = sys_cpu_to_le16(0xffff);
    26f8:	7743      	strb	r3, [r0, #29]
    26fa:	7783      	strb	r3, [r0, #30]
	ctrl_tx_enqueue(conn, tx);
    26fc:	4620      	mov	r0, r4
    26fe:	f029 fc35 	bl	2bf6c <ctrl_tx_enqueue>
	conn_upd_curr = conn;
    2702:	602c      	str	r4, [r5, #0]
	conn->procedure_expire = conn->procedure_reload;
    2704:	e735      	b.n	2572 <ull_conn_llcp+0x12a>
	if (conn->llcp_conn_param.status) {
    2706:	f894 60ef 	ldrb.w	r6, [r4, #239]	; 0xef
    270a:	b1ee      	cbz	r6, 2748 <ull_conn_llcp+0x300>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    270c:	482d      	ldr	r0, [pc, #180]	; (27c4 <ull_conn_llcp+0x37c>)
    270e:	f028 ffd0 	bl	2b6b2 <mem_acquire>
		if (!tx) {
    2712:	4601      	mov	r1, r0
    2714:	2800      	cmp	r0, #0
    2716:	f43f aeaf 	beq.w	2478 <ull_conn_llcp+0x30>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    271a:	7903      	ldrb	r3, [r0, #4]
    271c:	f043 0303 	orr.w	r3, r3, #3
    2720:	7103      	strb	r3, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    2722:	2311      	movs	r3, #17
    2724:	71c3      	strb	r3, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    2726:	2303      	movs	r3, #3
    2728:	7143      	strb	r3, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    272a:	230f      	movs	r3, #15
    272c:	7203      	strb	r3, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
    272e:	f894 30ef 	ldrb.w	r3, [r4, #239]	; 0xef
    2732:	7243      	strb	r3, [r0, #9]
		ctrl_tx_enqueue(conn, tx);
    2734:	4620      	mov	r0, r4
    2736:	f029 fc19 	bl	2bf6c <ctrl_tx_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    273a:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    273e:	f884 30ed 	strb.w	r3, [r4, #237]	; 0xed
	conn_upd_curr = NULL;
    2742:	2300      	movs	r3, #0
    2744:	602b      	str	r3, [r5, #0]
		return;
    2746:	e697      	b.n	2478 <ull_conn_llcp+0x30>
	if (!conn->lll.role) {
    2748:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    274c:	2b00      	cmp	r3, #0
    274e:	db3d      	blt.n	27cc <ull_conn_llcp+0x384>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    2750:	f894 30ee 	ldrb.w	r3, [r4, #238]	; 0xee
		conn->llcp_cu.win_offset_us = 0U;
    2754:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    2758:	2105      	movs	r1, #5
    275a:	f361 0302 	bfi	r3, r1, #0, #3
		if (conn->llcp_conn_param.preferred_periodicity) {
    275e:	f894 10f8 	ldrb.w	r1, [r4, #248]	; 0xf8
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    2762:	f884 30ee 	strb.w	r3, [r4, #238]	; 0xee
		conn->llcp_cu.win_size = 1U;
    2766:	2301      	movs	r3, #1
    2768:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
		if (conn->llcp_conn_param.preferred_periodicity) {
    276c:	b311      	cbz	r1, 27b4 <ull_conn_llcp+0x36c>
				((conn->llcp_conn_param.interval_min /
    276e:	f8b4 30f0 	ldrh.w	r3, [r4, #240]	; 0xf0
    2772:	fbb3 f3f1 	udiv	r3, r3, r1
				  conn->llcp_conn_param.preferred_periodicity) +
    2776:	3301      	adds	r3, #1
			conn->llcp_cu.interval =
    2778:	fb13 f301 	smulbb	r3, r3, r1
    277c:	b29b      	uxth	r3, r3
    277e:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
    2782:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
    2786:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
    278a:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
    278e:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    2792:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
    2796:	2102      	movs	r1, #2
    2798:	f361 0301 	bfi	r3, r1, #0, #2
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    279c:	f894 10ee 	ldrb.w	r1, [r4, #238]	; 0xee
    27a0:	f3c1 01c0 	ubfx	r1, r1, #3, #1
    27a4:	f361 0382 	bfi	r3, r1, #2, #1
		conn->llcp_cu.ack--;
    27a8:	3a01      	subs	r2, #1
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    27aa:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
		conn->llcp_cu.ack--;
    27ae:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
		return;
    27b2:	e661      	b.n	2478 <ull_conn_llcp+0x30>
				conn->llcp_conn_param.interval_max;
    27b4:	f8b4 30f2 	ldrh.w	r3, [r4, #242]	; 0xf2
    27b8:	e7e1      	b.n	277e <ull_conn_llcp+0x336>
    27ba:	bf00      	nop
    27bc:	00034fd6 	.word	0x00034fd6
    27c0:	0002fa94 	.word	0x0002fa94
    27c4:	20004018 	.word	0x20004018
    27c8:	20003f94 	.word	0x20003f94
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    27cc:	4863      	ldr	r0, [pc, #396]	; (295c <ull_conn_llcp+0x514>)
    27ce:	f028 ff70 	bl	2b6b2 <mem_acquire>
	if (!tx) {
    27d2:	4601      	mov	r1, r0
    27d4:	2800      	cmp	r0, #0
    27d6:	f43f ae4f 	beq.w	2478 <ull_conn_llcp+0x30>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    27da:	7903      	ldrb	r3, [r0, #4]
    27dc:	f043 0303 	orr.w	r3, r3, #3
    27e0:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
    27e2:	2318      	movs	r3, #24
    27e4:	7143      	strb	r3, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
    27e6:	2310      	movs	r3, #16
    27e8:	71c3      	strb	r3, [r0, #7]
	rsp->interval_min =
    27ea:	f8b4 30f0 	ldrh.w	r3, [r4, #240]	; 0xf0
    27ee:	8103      	strh	r3, [r0, #8]
	rsp->interval_max =
    27f0:	f8b4 30f2 	ldrh.w	r3, [r4, #242]	; 0xf2
    27f4:	8143      	strh	r3, [r0, #10]
	rsp->latency =
    27f6:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
    27fa:	8183      	strh	r3, [r0, #12]
	rsp->timeout =
    27fc:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
    2800:	81c3      	strh	r3, [r0, #14]
	rsp->preferred_periodicity =
    2802:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    2806:	7403      	strb	r3, [r0, #16]
	rsp->reference_conn_event_count =
    2808:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	; 0xfa
    280c:	f8a0 3011 	strh.w	r3, [r0, #17]
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
    2810:	f8b4 30fc 	ldrh.w	r3, [r4, #252]	; 0xfc
    2814:	f8a0 3013 	strh.w	r3, [r0, #19]
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
    2818:	f8b4 30fe 	ldrh.w	r3, [r4, #254]	; 0xfe
    281c:	f8a0 3015 	strh.w	r3, [r0, #21]
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
    2820:	f8b4 3100 	ldrh.w	r3, [r4, #256]	; 0x100
    2824:	f8a0 3017 	strh.w	r3, [r0, #23]
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
    2828:	f8b4 3102 	ldrh.w	r3, [r4, #258]	; 0x102
    282c:	f8a0 3019 	strh.w	r3, [r0, #25]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
    2830:	f8b4 3104 	ldrh.w	r3, [r4, #260]	; 0x104
    2834:	f8a0 301b 	strh.w	r3, [r0, #27]
	rsp->offset5 = sys_cpu_to_le16(conn->llcp_conn_param.offset5);
    2838:	f8b4 3106 	ldrh.w	r3, [r4, #262]	; 0x106
    283c:	f8a0 301d 	strh.w	r3, [r0, #29]
	ctrl_tx_enqueue(conn, tx);
    2840:	4620      	mov	r0, r4
    2842:	f029 fb93 	bl	2bf6c <ctrl_tx_enqueue>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    2846:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    284a:	f884 30ed 	strb.w	r3, [r4, #237]	; 0xed
	conn_upd_curr = NULL;
    284e:	602e      	str	r6, [r5, #0]
    2850:	e612      	b.n	2478 <ull_conn_llcp+0x30>
	rx = ll_pdu_rx_alloc();
    2852:	f017 fd99 	bl	1a388 <ll_pdu_rx_alloc>
	if (!rx) {
    2856:	4601      	mov	r1, r0
    2858:	2800      	cmp	r0, #0
    285a:	f43f ae0d 	beq.w	2478 <ull_conn_llcp+0x30>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    285e:	f894 20ee 	ldrb.w	r2, [r4, #238]	; 0xee
    2862:	2303      	movs	r3, #3
    2864:	f363 0202 	bfi	r2, r3, #0, #3
    2868:	f884 20ee 	strb.w	r2, [r4, #238]	; 0xee
	rx->hdr.handle = conn->lll.handle;
    286c:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
	rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    286e:	7103      	strb	r3, [r0, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    2870:	7f03      	ldrb	r3, [r0, #28]
	rx->hdr.handle = conn->lll.handle;
    2872:	80c2      	strh	r2, [r0, #6]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    2874:	f043 0303 	orr.w	r3, r3, #3
    2878:	7703      	strb	r3, [r0, #28]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    287a:	2318      	movs	r3, #24
    287c:	7743      	strb	r3, [r0, #29]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    287e:	230f      	movs	r3, #15
    2880:	77c3      	strb	r3, [r0, #31]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    2882:	f8b4 30f0 	ldrh.w	r3, [r4, #240]	; 0xf0
    2886:	8403      	strh	r3, [r0, #32]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    2888:	f8b4 30f2 	ldrh.w	r3, [r4, #242]	; 0xf2
    288c:	8443      	strh	r3, [r0, #34]	; 0x22
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    288e:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
    2892:	8483      	strh	r3, [r0, #36]	; 0x24
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    2894:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
    2898:	84c3      	strh	r3, [r0, #38]	; 0x26
	ll_rx_put(rx->hdr.link, rx);
    289a:	e63c      	b.n	2516 <ull_conn_llcp+0xce>
		LL_ASSERT(0);
    289c:	f640 4287 	movw	r2, #3207	; 0xc87
    28a0:	e6c6      	b.n	2630 <ull_conn_llcp+0x1e8>
	conn_upd = conn_upd_curr;
    28a2:	4b2f      	ldr	r3, [pc, #188]	; (2960 <ull_conn_llcp+0x518>)
	if (!conn_upd) {
    28a4:	6819      	ldr	r1, [r3, #0]
    28a6:	b901      	cbnz	r1, 28aa <ull_conn_llcp+0x462>
		conn_upd_curr = conn;
    28a8:	601c      	str	r4, [r3, #0]
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    28aa:	8e61      	ldrh	r1, [r4, #50]	; 0x32
    28ac:	8ee6      	ldrh	r6, [r4, #54]	; 0x36
    28ae:	440e      	add	r6, r1
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    28b0:	f894 10a2 	ldrb.w	r1, [r4, #162]	; 0xa2
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    28b4:	445e      	add	r6, fp
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    28b6:	f011 0003 	ands.w	r0, r1, #3
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    28ba:	b2b6      	uxth	r6, r6
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    28bc:	d052      	beq.n	2964 <ull_conn_llcp+0x51c>
		rx = ll_pdu_rx_alloc_peek(1);
    28be:	2001      	movs	r0, #1
    28c0:	f017 fd4a 	bl	1a358 <ll_pdu_rx_alloc_peek>
		if (!rx) {
    28c4:	4607      	mov	r7, r0
    28c6:	2800      	cmp	r0, #0
    28c8:	d03d      	beq.n	2946 <ull_conn_llcp+0x4fe>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    28ca:	4824      	ldr	r0, [pc, #144]	; (295c <ull_conn_llcp+0x514>)
    28cc:	f028 fef1 	bl	2b6b2 <mem_acquire>
		if (!tx) {
    28d0:	4605      	mov	r5, r0
    28d2:	b3c0      	cbz	r0, 2946 <ull_conn_llcp+0x4fe>
		(void)ll_pdu_rx_alloc();
    28d4:	f017 fd58 	bl	1a388 <ll_pdu_rx_alloc>
		rx->hdr.link->mem = conn->llcp_rx;
    28d8:	683b      	ldr	r3, [r7, #0]
    28da:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
    28de:	605a      	str	r2, [r3, #4]
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    28e0:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
		conn->llcp_rx = rx;
    28e4:	f8c4 709c 	str.w	r7, [r4, #156]	; 0x9c
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    28e8:	f36f 0301 	bfc	r3, #0, #2
    28ec:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
	conn->llcp.conn_upd.instant = event_counter + conn->lll.latency + 6;
    28f0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    28f2:	441e      	add	r6, r3
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    28f4:	792b      	ldrb	r3, [r5, #4]
	conn->llcp.conn_upd.instant = event_counter + conn->lll.latency + 6;
    28f6:	3606      	adds	r6, #6
    28f8:	b2b6      	uxth	r6, r6
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    28fa:	f043 0303 	orr.w	r3, r3, #3
	conn->llcp.conn_upd.instant = event_counter + conn->lll.latency + 6;
    28fe:	f8a4 6090 	strh.w	r6, [r4, #144]	; 0x90
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2902:	712b      	strb	r3, [r5, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    2904:	230c      	movs	r3, #12
    2906:	716b      	strb	r3, [r5, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    2908:	2300      	movs	r3, #0
    290a:	71eb      	strb	r3, [r5, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
    290c:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
    2910:	722b      	strb	r3, [r5, #8]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
    2912:	f240 42e2 	movw	r2, #1250	; 0x4e2
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
    2916:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
    291a:	fbb3 f3f2 	udiv	r3, r3, r2
    291e:	f8a5 3009 	strh.w	r3, [r5, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    2922:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
    2926:	f8a5 300b 	strh.w	r3, [r5, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    292a:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    292e:	f8a5 300d 	strh.w	r3, [r5, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    2932:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
    2936:	f8a5 300f 	strh.w	r3, [r5, #15]
	pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    293a:	f8a5 6011 	strh.w	r6, [r5, #17]
		ctrl_tx_enqueue(conn, tx);
    293e:	4629      	mov	r1, r5
			ctrl_tx_enqueue(conn, tx);
    2940:	4620      	mov	r0, r4
    2942:	f029 fb13 	bl	2bf6c <ctrl_tx_enqueue>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
    2946:	f894 20c9 	ldrb.w	r2, [r4, #201]	; 0xc9
    294a:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    294e:	429a      	cmp	r2, r3
    2950:	f040 8203 	bne.w	2d5a <ull_conn_llcp+0x912>
	return 0;
    2954:	2000      	movs	r0, #0
}
    2956:	b00d      	add	sp, #52	; 0x34
    2958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    295c:	20004018 	.word	0x20004018
    2960:	20003f94 	.word	0x20003f94
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    2964:	f8b4 1090 	ldrh.w	r1, [r4, #144]	; 0x90
    2968:	910a      	str	r1, [sp, #40]	; 0x28
    296a:	1a77      	subs	r7, r6, r1
    296c:	b2bf      	uxth	r7, r7
	} else if (instant_latency <= 0x7FFF) {
    296e:	0439      	lsls	r1, r7, #16
    2970:	d4e9      	bmi.n	2946 <ull_conn_llcp+0x4fe>
		conn->llcp_cu.ack = conn->llcp_cu.req;
    2972:	f894 10a0 	ldrb.w	r1, [r4, #160]	; 0xa0
    2976:	f884 10a1 	strb.w	r1, [r4, #161]	; 0xa1
		conn->llcp_ack = conn->llcp_req;
    297a:	f884 208d 	strb.w	r2, [r4, #141]	; 0x8d
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    297e:	f894 10ec 	ldrb.w	r1, [r4, #236]	; 0xec
    2982:	f894 20ed 	ldrb.w	r2, [r4, #237]	; 0xed
    2986:	428a      	cmp	r2, r1
    2988:	d009      	beq.n	299e <ull_conn_llcp+0x556>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
    298a:	f894 20ee 	ldrb.w	r2, [r4, #238]	; 0xee
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    298e:	f002 0207 	and.w	r2, r2, #7
    2992:	2a05      	cmp	r2, #5
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    2994:	bf04      	itt	eq
    2996:	f884 10ed 	strbeq.w	r1, [r4, #237]	; 0xed
			conn->procedure_expire = 0U;
    299a:	f8a4 007c 	strheq.w	r0, [r4, #124]	; 0x7c
		if (conn_upd_curr == conn) {
    299e:	681a      	ldr	r2, [r3, #0]
		rx = conn->llcp_rx;
    29a0:	f8d4 509c 	ldr.w	r5, [r4, #156]	; 0x9c
		if (conn_upd_curr == conn) {
    29a4:	4294      	cmp	r4, r2
	conn_upd_curr = NULL;
    29a6:	bf04      	itt	eq
    29a8:	2200      	moveq	r2, #0
    29aa:	601a      	streq	r2, [r3, #0]
		LL_ASSERT(rx && rx->hdr.link);
    29ac:	b10d      	cbz	r5, 29b2 <ull_conn_llcp+0x56a>
    29ae:	682b      	ldr	r3, [r5, #0]
    29b0:	b95b      	cbnz	r3, 29ca <ull_conn_llcp+0x582>
    29b2:	f640 120e 	movw	r2, #2318	; 0x90e
    29b6:	49b8      	ldr	r1, [pc, #736]	; (2c98 <ull_conn_llcp+0x850>)
    29b8:	48b8      	ldr	r0, [pc, #736]	; (2c9c <ull_conn_llcp+0x854>)
    29ba:	f024 fad8 	bl	26f6e <printk>
    29be:	4040      	eors	r0, r0
    29c0:	f380 8811 	msr	BASEPRI, r0
    29c4:	f04f 0003 	mov.w	r0, #3
    29c8:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
    29ca:	6828      	ldr	r0, [r5, #0]
		if ((conn->llcp_cu.interval != lll->interval) ||
    29cc:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
		conn->llcp_rx = rx->hdr.link->mem;
    29d0:	6843      	ldr	r3, [r0, #4]
    29d2:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
		if ((conn->llcp_cu.interval != lll->interval) ||
    29d6:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    29d8:	f8b4 c0a6 	ldrh.w	ip, [r4, #166]	; 0xa6
    29dc:	f8b4 10a8 	ldrh.w	r1, [r4, #168]	; 0xa8
    29e0:	429a      	cmp	r2, r3
    29e2:	d113      	bne.n	2a0c <ull_conn_llcp+0x5c4>
    29e4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    29e6:	4563      	cmp	r3, ip
    29e8:	d110      	bne.n	2a0c <ull_conn_llcp+0x5c4>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    29ea:	f240 43e2 	movw	r3, #1250	; 0x4e2
    29ee:	fb03 fe02 	mul.w	lr, r3, r2
    29f2:	f242 7310 	movw	r3, #10000	; 0x2710
    29f6:	fb03 e301 	mla	r3, r3, r1, lr
    29fa:	3b01      	subs	r3, #1
    29fc:	fbb3 f3fe 	udiv	r3, r3, lr
		    (conn->llcp_cu.latency != lll->latency) ||
    2a00:	f8b4 e076 	ldrh.w	lr, [r4, #118]	; 0x76
    2a04:	b29b      	uxth	r3, r3
    2a06:	459e      	cmp	lr, r3
    2a08:	f000 8120 	beq.w	2c4c <ull_conn_llcp+0x804>
			rx->hdr.handle = lll->handle;
    2a0c:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    2a0e:	80eb      	strh	r3, [r5, #6]
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    2a10:	2315      	movs	r3, #21
    2a12:	712b      	strb	r3, [r5, #4]
			cu->status = 0x00;
    2a14:	2300      	movs	r3, #0
    2a16:	772b      	strb	r3, [r5, #28]
			cu->interval = conn->llcp_cu.interval;
    2a18:	83ea      	strh	r2, [r5, #30]
			cu->latency = conn->llcp_cu.latency;
    2a1a:	f8a5 c020 	strh.w	ip, [r5, #32]
			cu->timeout = conn->llcp_cu.timeout;
    2a1e:	8469      	strh	r1, [r5, #34]	; 0x22
		ll_rx_put(rx->hdr.link, rx);
    2a20:	4629      	mov	r1, r5
    2a22:	f017 fc89 	bl	1a338 <ll_rx_put>
		ll_rx_sched();
    2a26:	f017 fc91 	bl	1a34c <ll_rx_sched>
		if (conn->evt.ticks_xtal_to_start & XON_BITMASK) {
    2a2a:	6823      	ldr	r3, [r4, #0]
    2a2c:	2b00      	cmp	r3, #0
    2a2e:	da0a      	bge.n	2a46 <ull_conn_llcp+0x5fe>
			uint32_t ticks_prepare_to_start =
    2a30:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
			conn->evt.ticks_xtal_to_start &= ~XON_BITMASK;
    2a34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			ticks_at_expire -= (conn->evt.ticks_xtal_to_start -
    2a38:	4290      	cmp	r0, r2
    2a3a:	bf2c      	ite	cs
    2a3c:	4480      	addcs	r8, r0
    2a3e:	4490      	addcc	r8, r2
			conn->evt.ticks_xtal_to_start &= ~XON_BITMASK;
    2a40:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->evt.ticks_xtal_to_start -
    2a42:	eba8 0803 	sub.w	r8, r8, r3
		conn_interval_old = instant_latency * lll->interval;
    2a46:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
		latency = conn_interval_old / conn->llcp_cu.interval;
    2a48:	f8b4 50a4 	ldrh.w	r5, [r4, #164]	; 0xa4
    2a4c:	f8df a268 	ldr.w	sl, [pc, #616]	; 2cb8 <ull_conn_llcp+0x870>
		conn_interval_old = instant_latency * lll->interval;
    2a50:	fb13 f307 	smulbb	r3, r3, r7
    2a54:	b29b      	uxth	r3, r3
		latency = conn_interval_old / conn->llcp_cu.interval;
    2a56:	fbb3 f1f5 	udiv	r1, r3, r5
    2a5a:	fa1f f981 	uxth.w	r9, r1
		conn_interval_new = latency * conn->llcp_cu.interval;
    2a5e:	fb15 f209 	smulbb	r2, r5, r9
    2a62:	b292      	uxth	r2, r2
		if (conn_interval_new > conn_interval_old) {
    2a64:	4293      	cmp	r3, r2
    2a66:	f240 40e2 	movw	r0, #1250	; 0x4e2
    2a6a:	f080 80f2 	bcs.w	2c52 <ull_conn_llcp+0x80a>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    2a6e:	1ad3      	subs	r3, r2, r3
    2a70:	4358      	muls	r0, r3
    2a72:	fba0 010a 	umull	r0, r1, r0, sl
    2a76:	a386      	add	r3, pc, #536	; (adr r3, 2c90 <ull_conn_llcp+0x848>)
    2a78:	e9d3 2300 	ldrd	r2, r3, [r3]
    2a7c:	f7fe ffd6 	bl	1a2c <__aeabi_uldivmod>
    2a80:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2a84:	4480      	add	r8, r0
		lll->latency_prepare += lazy;
    2a86:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    2a88:	449b      	add	fp, r3
		lll->latency_prepare -= (instant_latency - latency);
    2a8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2a8c:	1b9e      	subs	r6, r3, r6
		} else if (lll->role) {
    2a8e:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
		lll->latency_prepare -= (instant_latency - latency);
    2a92:	444e      	add	r6, r9
    2a94:	445e      	add	r6, fp
		} else if (lll->role) {
    2a96:	2b00      	cmp	r3, #0
		conn_interval_us = conn->llcp_cu.interval *
    2a98:	f240 4be2 	movw	fp, #1250	; 0x4e2
		lll->latency_prepare -= (instant_latency - latency);
    2a9c:	8666      	strh	r6, [r4, #50]	; 0x32
		conn_interval_us = conn->llcp_cu.interval *
    2a9e:	fb0b f505 	mul.w	r5, fp, r5
		} else if (lll->role) {
    2aa2:	f280 80e4 	bge.w	2c6e <ull_conn_llcp+0x826>
			lll->slave.window_widening_prepare_us -=
    2aa6:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
				lll->slave.window_widening_periodic_us *
    2aa8:	6c63      	ldr	r3, [r4, #68]	; 0x44
			lll->slave.window_widening_prepare_us -=
    2aaa:	fb03 2717 	mls	r7, r3, r7, r2
    2aae:	64e7      	str	r7, [r4, #76]	; 0x4c
				(((lll_clock_ppm_local_get() +
    2ab0:	f029 fc3b 	bl	2c32a <lll_clock_ppm_local_get>
    2ab4:	4606      	mov	r6, r0
				   lll_clock_ppm_get(conn->slave.sca)) *
    2ab6:	f894 0080 	ldrb.w	r0, [r4, #128]	; 0x80
    2aba:	f3c0 0082 	ubfx	r0, r0, #2, #3
    2abe:	f01a f9c3 	bl	1ce48 <lll_clock_ppm_get>
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
    2ac2:	f894 20b0 	ldrb.w	r2, [r4, #176]	; 0xb0
				(((lll_clock_ppm_local_get() +
    2ac6:	4406      	add	r6, r0
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
    2ac8:	fb0b f202 	mul.w	r2, fp, r2
			lll->slave.window_size_prepare_us =
    2acc:	6562      	str	r2, [r4, #84]	; 0x54
				   lll_clock_ppm_get(conn->slave.sca)) *
    2ace:	436e      	muls	r6, r5
			conn->slave.ticks_to_offset = 0U;
    2ad0:	2200      	movs	r2, #0
    2ad2:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    2ad6:	f506 2674 	add.w	r6, r6, #999424	; 0xf4000
			lll->slave.window_widening_prepare_us +=
    2ada:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    2adc:	4870      	ldr	r0, [pc, #448]	; (2ca0 <ull_conn_llcp+0x858>)
    2ade:	f206 263f 	addw	r6, r6, #575	; 0x23f
				(conn_interval_us >> 1) - EVENT_IFS_US;
    2ae2:	086b      	lsrs	r3, r5, #1
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    2ae4:	fbb6 f6f0 	udiv	r6, r6, r0
				lll->slave.window_widening_periodic_us *
    2ae8:	fb06 f009 	mul.w	r0, r6, r9
				(conn_interval_us >> 1) - EVENT_IFS_US;
    2aec:	3b96      	subs	r3, #150	; 0x96
			lll->slave.window_widening_prepare_us +=
    2aee:	4402      	add	r2, r0
			lll->slave.window_widening_max_us =
    2af0:	64a3      	str	r3, [r4, #72]	; 0x48
			lll->slave.window_widening_prepare_us +=
    2af2:	429a      	cmp	r2, r3
    2af4:	bf94      	ite	ls
    2af6:	64e2      	strls	r2, [r4, #76]	; 0x4c
    2af8:	64e3      	strhi	r3, [r4, #76]	; 0x4c
			lll->slave.window_widening_periodic_us =
    2afa:	6466      	str	r6, [r4, #68]	; 0x44
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    2afc:	a364      	add	r3, pc, #400	; (adr r3, 2c90 <ull_conn_llcp+0x848>)
    2afe:	e9d3 2300 	ldrd	r2, r3, [r3]
    2b02:	fba0 010a 	umull	r0, r1, r0, sl
    2b06:	f7fe ff91 	bl	1a2c <__aeabi_uldivmod>
    2b0a:	eba8 0800 	sub.w	r8, r8, r0
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    2b0e:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
    2b12:	fbb0 f0fb 	udiv	r0, r0, fp
    2b16:	fb0b f000 	mul.w	r0, fp, r0
    2b1a:	a35d      	add	r3, pc, #372	; (adr r3, 2c90 <ull_conn_llcp+0x848>)
    2b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
    2b20:	fba0 010a 	umull	r0, r1, r0, sl
    2b24:	f7fe ff82 	bl	1a2c <__aeabi_uldivmod>
			periodic_us -= lll->slave.window_widening_periodic_us;
    2b28:	eba5 0906 	sub.w	r9, r5, r6
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    2b2c:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
		lll->interval = conn->llcp_cu.interval;
    2b30:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
    2b34:	85e3      	strh	r3, [r4, #46]	; 0x2e
		lll->latency = conn->llcp_cu.latency;
    2b36:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    2b3a:	8623      	strh	r3, [r4, #48]	; 0x30
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    2b3c:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
    2b40:	f242 7210 	movw	r2, #10000	; 0x2710
    2b44:	fb02 5303 	mla	r3, r2, r3, r5
    2b48:	3b01      	subs	r3, #1
    2b4a:	fbb3 f3f5 	udiv	r3, r3, r5
    2b4e:	f8a4 3076 	strh.w	r3, [r4, #118]	; 0x76
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    2b52:	4b54      	ldr	r3, [pc, #336]	; (2ca4 <ull_conn_llcp+0x85c>)
    2b54:	442b      	add	r3, r5
    2b56:	fbb3 f5f5 	udiv	r5, r3, r5
		if (conn->llcp_cu.cmd) {
    2b5a:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    2b5e:	f8a4 507a 	strh.w	r5, [r4, #122]	; 0x7a
		if (conn->llcp_cu.cmd) {
    2b62:	075a      	lsls	r2, r3, #29
			conn->supervision_expire = 0U;
    2b64:	bf44      	itt	mi
    2b66:	2300      	movmi	r3, #0
    2b68:	f8a4 3078 	strhmi.w	r3, [r4, #120]	; 0x78
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    2b6c:	2102      	movs	r1, #2
    2b6e:	2001      	movs	r0, #1
    2b70:	f01b ff1a 	bl	1e9a8 <mayfly_is_enabled>
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    2b74:	2200      	movs	r2, #0
    2b76:	2102      	movs	r1, #2
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    2b78:	4606      	mov	r6, r0
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    2b7a:	2001      	movs	r0, #1
    2b7c:	f015 fa3a 	bl	17ff4 <mayfly_enable>
		ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    2b80:	4620      	mov	r0, r4
    2b82:	f018 fc0b 	bl	1b39c <ll_conn_handle_get>
    2b86:	3005      	adds	r0, #5
    2b88:	b2c5      	uxtb	r5, r0
		ticker_status =	ticker_stop(TICKER_INSTANCE_ID_CTLR,
    2b8a:	4b47      	ldr	r3, [pc, #284]	; (2ca8 <ull_conn_llcp+0x860>)
    2b8c:	9400      	str	r4, [sp, #0]
    2b8e:	462a      	mov	r2, r5
    2b90:	2101      	movs	r1, #1
    2b92:	2000      	movs	r0, #0
    2b94:	f016 f82c 	bl	18bf0 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    2b98:	f030 0302 	bics.w	r3, r0, #2
    2b9c:	d00b      	beq.n	2bb6 <ull_conn_llcp+0x76e>
    2b9e:	f640 12b7 	movw	r2, #2487	; 0x9b7
    2ba2:	493d      	ldr	r1, [pc, #244]	; (2c98 <ull_conn_llcp+0x850>)
    2ba4:	483d      	ldr	r0, [pc, #244]	; (2c9c <ull_conn_llcp+0x854>)
    2ba6:	f024 f9e2 	bl	26f6e <printk>
    2baa:	4040      	eors	r0, r0
    2bac:	f380 8811 	msr	BASEPRI, r0
    2bb0:	f04f 0003 	mov.w	r0, #3
    2bb4:	df02      	svc	2
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    2bb6:	fba9 230a 	umull	r2, r3, r9, sl
    2bba:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    2bbe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    2bc2:	a333      	add	r3, pc, #204	; (adr r3, 2c90 <ull_conn_llcp+0x848>)
    2bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
    2bc8:	f7fe ff30 	bl	1a2c <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    2bcc:	4b37      	ldr	r3, [pc, #220]	; (2cac <ull_conn_llcp+0x864>)
    2bce:	9408      	str	r4, [sp, #32]
    2bd0:	e9cd 4306 	strd	r4, r3, [sp, #24]
    2bd4:	4b36      	ldr	r3, [pc, #216]	; (2cb0 <ull_conn_llcp+0x868>)
    2bd6:	9305      	str	r3, [sp, #20]
    2bd8:	68e3      	ldr	r3, [r4, #12]
    2bda:	9304      	str	r3, [sp, #16]
    2bdc:	f64f 73fe 	movw	r3, #65534	; 0xfffe
    2be0:	9303      	str	r3, [sp, #12]
				     HAL_TICKER_REMAINDER(periodic_us),
    2be2:	4b34      	ldr	r3, [pc, #208]	; (2cb4 <ull_conn_llcp+0x86c>)
    2be4:	990a      	ldr	r1, [sp, #40]	; 0x28
    2be6:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
    2bea:	fba4 ab03 	umull	sl, fp, r4, r3
    2bee:	ebb1 000a 	subs.w	r0, r1, sl
    2bf2:	f04f 0307 	mov.w	r3, #7
    2bf6:	990b      	ldr	r1, [sp, #44]	; 0x2c
    2bf8:	fb03 bb04 	mla	fp, r3, r4, fp
    2bfc:	eb61 010b 	sbc.w	r1, r1, fp
    2c00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2c04:	2300      	movs	r3, #0
    2c06:	f7fe ff11 	bl	1a2c <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    2c0a:	4643      	mov	r3, r8
    2c0c:	e9cd 4001 	strd	r4, r0, [sp, #4]
    2c10:	9700      	str	r7, [sp, #0]
    2c12:	462a      	mov	r2, r5
    2c14:	2101      	movs	r1, #1
    2c16:	2000      	movs	r0, #0
    2c18:	f028 fff0 	bl	2bbfc <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    2c1c:	f030 0302 	bics.w	r3, r0, #2
    2c20:	d00b      	beq.n	2c3a <ull_conn_llcp+0x7f2>
    2c22:	f640 12d1 	movw	r2, #2513	; 0x9d1
    2c26:	491c      	ldr	r1, [pc, #112]	; (2c98 <ull_conn_llcp+0x850>)
    2c28:	481c      	ldr	r0, [pc, #112]	; (2c9c <ull_conn_llcp+0x854>)
    2c2a:	f024 f9a0 	bl	26f6e <printk>
    2c2e:	4040      	eors	r0, r0
    2c30:	f380 8811 	msr	BASEPRI, r0
    2c34:	f04f 0003 	mov.w	r0, #3
    2c38:	df02      	svc	2
		if (mayfly_was_enabled) {
    2c3a:	b126      	cbz	r6, 2c46 <ull_conn_llcp+0x7fe>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
    2c3c:	2201      	movs	r2, #1
    2c3e:	2102      	movs	r1, #2
    2c40:	4610      	mov	r0, r2
    2c42:	f015 f9d7 	bl	17ff4 <mayfly_enable>
				return -ECANCELED;
    2c46:	f06f 008b 	mvn.w	r0, #139	; 0x8b
    2c4a:	e684      	b.n	2956 <ull_conn_llcp+0x50e>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
    2c4c:	2301      	movs	r3, #1
    2c4e:	712b      	strb	r3, [r5, #4]
    2c50:	e6e6      	b.n	2a20 <ull_conn_llcp+0x5d8>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    2c52:	fb05 3111 	mls	r1, r5, r1, r3
    2c56:	b289      	uxth	r1, r1
    2c58:	4348      	muls	r0, r1
    2c5a:	a30d      	add	r3, pc, #52	; (adr r3, 2c90 <ull_conn_llcp+0x848>)
    2c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
    2c60:	fba0 010a 	umull	r0, r1, r0, sl
    2c64:	f7fe fee2 	bl	1a2c <__aeabi_uldivmod>
    2c68:	eba8 0800 	sub.w	r8, r8, r0
    2c6c:	e70b      	b.n	2a86 <ull_conn_llcp+0x63e>
			LL_ASSERT(0);
    2c6e:	f640 1287 	movw	r2, #2439	; 0x987
    2c72:	4909      	ldr	r1, [pc, #36]	; (2c98 <ull_conn_llcp+0x850>)
    2c74:	4809      	ldr	r0, [pc, #36]	; (2c9c <ull_conn_llcp+0x854>)
    2c76:	f024 f97a 	bl	26f6e <printk>
    2c7a:	4040      	eors	r0, r0
    2c7c:	f380 8811 	msr	BASEPRI, r0
    2c80:	f04f 0003 	mov.w	r0, #3
    2c84:	df02      	svc	2
		uint32_t ticks_win_offset = 0;
    2c86:	2700      	movs	r7, #0
		periodic_us = conn_interval_us;
    2c88:	46a9      	mov	r9, r5
    2c8a:	e751      	b.n	2b30 <ull_conn_llcp+0x6e8>
    2c8c:	f3af 8000 	nop.w
    2c90:	1afd498d 	.word	0x1afd498d
    2c94:	00000007 	.word	0x00000007
    2c98:	00034fd6 	.word	0x00034fd6
    2c9c:	0002fa94 	.word	0x0002fa94
    2ca0:	000f4240 	.word	0x000f4240
    2ca4:	026259ff 	.word	0x026259ff
    2ca8:	0001b245 	.word	0x0001b245
    2cac:	0001b1f9 	.word	0x0001b1f9
    2cb0:	0001c51d 	.word	0x0001c51d
    2cb4:	1afd498d 	.word	0x1afd498d
    2cb8:	3b9aca00 	.word	0x3b9aca00
			event_counter = lll->event_counter +
    2cbc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    2cbe:	8e61      	ldrh	r1, [r4, #50]	; 0x32
    2cc0:	440b      	add	r3, r1
					lll->latency_prepare + lazy;
    2cc2:	449b      	add	fp, r3
	if (conn->llcp.chan_map.initiate) {
    2cc4:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
    2cc8:	07db      	lsls	r3, r3, #31
			event_counter = lll->event_counter +
    2cca:	fa1f fb8b 	uxth.w	fp, fp
	if (conn->llcp.chan_map.initiate) {
    2cce:	d525      	bpl.n	2d1c <ull_conn_llcp+0x8d4>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2cd0:	4835      	ldr	r0, [pc, #212]	; (2da8 <ull_conn_llcp+0x960>)
    2cd2:	f028 fcee 	bl	2b6b2 <mem_acquire>
		if (tx) {
    2cd6:	4601      	mov	r1, r0
    2cd8:	2800      	cmp	r0, #0
    2cda:	f43f ae34 	beq.w	2946 <ull_conn_llcp+0x4fe>
			conn->llcp.chan_map.initiate = 0U;
    2cde:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
    2ce2:	f36f 0300 	bfc	r3, #0, #1
    2ce6:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
			conn->llcp.chan_map.instant = event_counter +
    2cea:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    2cec:	449b      	add	fp, r3
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2cee:	7903      	ldrb	r3, [r0, #4]
						      conn->lll.latency + 6;
    2cf0:	f10b 0b06 	add.w	fp, fp, #6
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2cf4:	f043 0303 	orr.w	r3, r3, #3
			conn->llcp.chan_map.instant = event_counter +
    2cf8:	f8a4 b096 	strh.w	fp, [r4, #150]	; 0x96
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2cfc:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    2cfe:	2308      	movs	r3, #8
    2d00:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    2d02:	2301      	movs	r3, #1
    2d04:	71c3      	strb	r3, [r0, #7]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    2d06:	4623      	mov	r3, r4
    2d08:	f853 0f91 	ldr.w	r0, [r3, #145]!
    2d0c:	6088      	str	r0, [r1, #8]
    2d0e:	791b      	ldrb	r3, [r3, #4]
    2d10:	730b      	strb	r3, [r1, #12]
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    2d12:	f8b4 3096 	ldrh.w	r3, [r4, #150]	; 0x96
    2d16:	f8a1 300d 	strh.w	r3, [r1, #13]
    2d1a:	e611      	b.n	2940 <ull_conn_llcp+0x4f8>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    2d1c:	f8b4 3096 	ldrh.w	r3, [r4, #150]	; 0x96
    2d20:	ebab 0b03 	sub.w	fp, fp, r3
    2d24:	f41b 4f00 	tst.w	fp, #32768	; 0x8000
    2d28:	f47f ae0d 	bne.w	2946 <ull_conn_llcp+0x4fe>
    2d2c:	4623      	mov	r3, r4
		conn->llcp_ack = conn->llcp_req;
    2d2e:	f884 208d 	strb.w	r2, [r4, #141]	; 0x8d
    2d32:	f853 2f91 	ldr.w	r2, [r3, #145]!
    2d36:	63a2      	str	r2, [r4, #56]	; 0x38
		memcpy(&lll->data_chan_map[0],
    2d38:	f104 0038 	add.w	r0, r4, #56	; 0x38
    2d3c:	791b      	ldrb	r3, [r3, #4]
    2d3e:	7103      	strb	r3, [r0, #4]
			util_ones_count_get(&lll->data_chan_map[0],
    2d40:	2105      	movs	r1, #5
    2d42:	f028 fd26 	bl	2b792 <util_ones_count_get>
		lll->data_chan_count =
    2d46:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
    2d4a:	f360 0305 	bfi	r3, r0, #0, #6
    2d4e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
		conn->chm_updated = 1U;
    2d52:	2301      	movs	r3, #1
    2d54:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    2d58:	e5f5      	b.n	2946 <ull_conn_llcp+0x4fe>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2d5a:	4813      	ldr	r0, [pc, #76]	; (2da8 <ull_conn_llcp+0x960>)
    2d5c:	f028 fca9 	bl	2b6b2 <mem_acquire>
		if (tx) {
    2d60:	4601      	mov	r1, r0
    2d62:	b180      	cbz	r0, 2d86 <ull_conn_llcp+0x93e>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
    2d64:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    2d68:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    2d6c:	7903      	ldrb	r3, [r0, #4]
    2d6e:	f043 0303 	orr.w	r3, r3, #3
    2d72:	7103      	strb	r3, [r0, #4]
			pdu_tx->len = offsetof(struct pdu_data_llctrl,
    2d74:	2302      	movs	r3, #2
    2d76:	7143      	strb	r3, [r0, #5]
			pdu_tx->llctrl.opcode =
    2d78:	71c3      	strb	r3, [r0, #7]
			pdu_tx->llctrl.terminate_ind.error_code =
    2d7a:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
    2d7e:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, tx);
    2d80:	4620      	mov	r0, r4
    2d82:	f029 f8f3 	bl	2bf6c <ctrl_tx_enqueue>
		if (!conn->procedure_expire) {
    2d86:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    2d8a:	2800      	cmp	r0, #0
    2d8c:	f47f ade2 	bne.w	2954 <ull_conn_llcp+0x50c>
			conn->procedure_expire = conn->supervision_reload;
    2d90:	f8b4 3076 	ldrh.w	r3, [r4, #118]	; 0x76
			if (conn->procedure_expire <= 1U) {
    2d94:	2b01      	cmp	r3, #1
    2d96:	d902      	bls.n	2d9e <ull_conn_llcp+0x956>
			conn->procedure_expire = conn->supervision_reload;
    2d98:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
    2d9c:	e5da      	b.n	2954 <ull_conn_llcp+0x50c>
				conn->procedure_expire++;
    2d9e:	3301      	adds	r3, #1
    2da0:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
    2da4:	e5d7      	b.n	2956 <ull_conn_llcp+0x50e>
    2da6:	bf00      	nop
    2da8:	20004018 	.word	0x20004018
    2dac:	00000000 	.word	0x00000000

00002db0 <ull_slave_setup>:
static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *params);

void ull_slave_setup(memq_link_t *link, struct node_rx_hdr *rx,
		     struct node_rx_ftr *ftr, struct lll_conn *lll)
{
    2db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2db4:	461d      	mov	r5, r3
	uint16_t win_delay_us;
	uint16_t timeout;
	uint16_t interval;
	uint8_t chan_sel;

	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    2db6:	6813      	ldr	r3, [r2, #0]
{
    2db8:	4691      	mov	r9, r2
    2dba:	460a      	mov	r2, r1
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    2dbc:	f8d3 a000 	ldr.w	sl, [r3]
	conn = lll->hdr.parent;
    2dc0:	462b      	mov	r3, r5
{
    2dc2:	460c      	mov	r4, r1
    2dc4:	f832 1f2e 	ldrh.w	r1, [r2, #46]!
	conn = lll->hdr.parent;
    2dc8:	f853 6b0c 	ldr.w	r6, [r3], #12
    2dcc:	81a9      	strh	r1, [r5, #12]
    2dce:	7892      	ldrb	r2, [r2, #2]
    2dd0:	709a      	strb	r2, [r3, #2]
    2dd2:	f8d4 302a 	ldr.w	r3, [r4, #42]	; 0x2a
    2dd6:	60ab      	str	r3, [r5, #8]
    2dd8:	4623      	mov	r3, r4
{
    2dda:	4683      	mov	fp, r0
    2ddc:	f853 2f3a 	ldr.w	r2, [r3, #58]!
    2de0:	61ea      	str	r2, [r5, #28]

	/* Populate the slave context */
	pdu_adv = (void *)((struct node_rx_pdu *)rx)->pdu;
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    2de2:	f105 001c 	add.w	r0, r5, #28
    2de6:	791b      	ldrb	r3, [r3, #4]
    2de8:	7103      	strb	r3, [r0, #4]
{
    2dea:	b091      	sub	sp, #68	; 0x44
	       sizeof(lll->data_chan_map));
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    2dec:	2105      	movs	r1, #5
    2dee:	f028 fcd0 	bl	2b792 <util_ones_count_get>
    2df2:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
    2df6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    2dfa:	f360 0305 	bfi	r3, r0, #0, #6
			       sizeof(lll->data_chan_map));
	if (lll->data_chan_count < 2) {
    2dfe:	2801      	cmp	r0, #1
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    2e00:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
	if (lll->data_chan_count < 2) {
    2e04:	f240 812b 	bls.w	305e <ull_slave_setup+0x2ae>
		return;
	}
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    2e08:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
    2e0c:	f3c3 0304 	ubfx	r3, r3, #0, #5
    2e10:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
	if ((lll->data_chan_hop < 5) || (lll->data_chan_hop > 16)) {
    2e14:	3b05      	subs	r3, #5
    2e16:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    2e1a:	2b0b      	cmp	r3, #11
    2e1c:	f200 811f 	bhi.w	305e <ull_slave_setup+0x2ae>
		return;
	}

	((struct lll_adv *)ftr->param)->conn = NULL;
    2e20:	f8d9 3000 	ldr.w	r3, [r9]
    2e24:	f04f 0800 	mov.w	r8, #0
    2e28:	f8c3 8008 	str.w	r8, [r3, #8]

	interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
    2e2c:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
	lll->interval = interval;
    2e2e:	826f      	strh	r7, [r5, #18]
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
    2e30:	f894 2037 	ldrb.w	r2, [r4, #55]	; 0x37
    2e34:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
    2e38:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2e3c:	82ab      	strh	r3, [r5, #20]

	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
    2e3e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    2e40:	930a      	str	r3, [sp, #40]	; 0x28
	conn_interval_us = interval * CONN_INT_UNIT_US;
    2e42:	f240 43e2 	movw	r3, #1250	; 0x4e2
    2e46:	435f      	muls	r7, r3
	} else {
		win_delay_us = WIN_DELAY_LEGACY;
	}

	/* calculate the window widening */
	conn->slave.sca = pdu_adv->connect_ind.sca;
    2e48:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
    2e4c:	f896 2080 	ldrb.w	r2, [r6, #128]	; 0x80
    2e50:	095b      	lsrs	r3, r3, #5
    2e52:	f363 0284 	bfi	r2, r3, #2, #3
    2e56:	f886 2080 	strb.w	r2, [r6, #128]	; 0x80
	lll->slave.window_widening_periodic_us =
		(((lll_clock_ppm_local_get() +
    2e5a:	f029 fa66 	bl	2c32a <lll_clock_ppm_local_get>
    2e5e:	900d      	str	r0, [sp, #52]	; 0x34
		   lll_clock_ppm_get(conn->slave.sca)) *
    2e60:	f896 0080 	ldrb.w	r0, [r6, #128]	; 0x80
    2e64:	f3c0 0082 	ubfx	r0, r0, #2, #3
    2e68:	f019 ffee 	bl	1ce48 <lll_clock_ppm_get>
		(((lll_clock_ppm_local_get() +
    2e6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2e6e:	4418      	add	r0, r3
		   lll_clock_ppm_get(conn->slave.sca)) *
    2e70:	4378      	muls	r0, r7
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    2e72:	f500 2074 	add.w	r0, r0, #999424	; 0xf4000
    2e76:	4b7e      	ldr	r3, [pc, #504]	; (3070 <ull_slave_setup+0x2c0>)
    2e78:	f200 203f 	addw	r0, r0, #575	; 0x23f
    2e7c:	fbb0 f0f3 	udiv	r0, r0, r3
	lll->slave.window_widening_max_us = (conn_interval_us >> 1) -
    2e80:	087b      	lsrs	r3, r7, #1
    2e82:	3b96      	subs	r3, #150	; 0x96
    2e84:	62eb      	str	r3, [r5, #44]	; 0x2c
					    EVENT_IFS_US;
	lll->slave.window_size_event_us = pdu_adv->connect_ind.win_size *
    2e86:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
	lll->slave.window_widening_periodic_us =
    2e8a:	62a8      	str	r0, [r5, #40]	; 0x28
	lll->slave.window_size_event_us = pdu_adv->connect_ind.win_size *
    2e8c:	f240 42e2 	movw	r2, #1250	; 0x4e2
    2e90:	4353      	muls	r3, r2
    2e92:	63eb      	str	r3, [r5, #60]	; 0x3c
		CONN_INT_UNIT_US;

	/* procedure timeouts */
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    2e94:	8f22      	ldrh	r2, [r4, #56]	; 0x38
	conn->supervision_reload =
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    2e96:	f242 7310 	movw	r3, #10000	; 0x2710
    2e9a:	fb03 7302 	mla	r3, r3, r2, r7
    2e9e:	3b01      	subs	r3, #1
    2ea0:	fbb3 f3f7 	udiv	r3, r3, r7
    2ea4:	f8a6 3076 	strh.w	r3, [r6, #118]	; 0x76
	conn->procedure_reload =
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    2ea8:	4b72      	ldr	r3, [pc, #456]	; (3074 <ull_slave_setup+0x2c4>)
    2eaa:	443b      	add	r3, r7
    2eac:	fbb3 f3f7 	udiv	r3, r3, r7
    2eb0:	f8a6 307a 	strh.w	r3, [r6, #122]	; 0x7a
    2eb4:	68ab      	ldr	r3, [r5, #8]
    2eb6:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84

	memcpy((void *)&conn->slave.force, &lll->access_addr[0],
	       sizeof(conn->slave.force));

	peer_addr_type = pdu_adv->tx_addr;
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    2eba:	4621      	mov	r1, r4
	peer_addr_type = pdu_adv->tx_addr;
    2ebc:	7f23      	ldrb	r3, [r4, #28]
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    2ebe:	f851 0f1e 	ldr.w	r0, [r1, #30]!
    2ec2:	900e      	str	r0, [sp, #56]	; 0x38
    2ec4:	8889      	ldrh	r1, [r1, #4]
    2ec6:	f8ad 103c 	strh.w	r1, [sp, #60]	; 0x3c
	peer_addr_type = pdu_adv->tx_addr;
    2eca:	f3c3 1380 	ubfx	r3, r3, #6, #1
	} else {
		memset(&cc->peer_rpa[0], 0x0, BDADDR_SIZE);
#else
	if (1) {
#endif /* CONFIG_BT_CTLR_PRIVACY */
		cc->peer_addr_type = peer_addr_type;
    2ece:	77a3      	strb	r3, [r4, #30]
	cc->status = 0U;
    2ed0:	f44f 7180 	mov.w	r1, #256	; 0x100
    2ed4:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    2ed8:	83a1      	strh	r1, [r4, #28]
    2eda:	f8c4 001f 	str.w	r0, [r4, #31]
    2ede:	f8a4 3023 	strh.w	r3, [r4, #35]	; 0x23
		memcpy(cc->peer_addr, peer_addr, BDADDR_SIZE);
	}

	cc->interval = lll->interval;
    2ee2:	8a6b      	ldrh	r3, [r5, #18]
    2ee4:	84e3      	strh	r3, [r4, #38]	; 0x26
	cc->latency = lll->latency;
    2ee6:	8aab      	ldrh	r3, [r5, #20]
    2ee8:	8523      	strh	r3, [r4, #40]	; 0x28
	cc->timeout = timeout;
	cc->sca = conn->slave.sca;
    2eea:	f896 3080 	ldrb.w	r3, [r6, #128]	; 0x80
	cc->timeout = timeout;
    2eee:	8562      	strh	r2, [r4, #42]	; 0x2a
	cc->sca = conn->slave.sca;
    2ef0:	f3c3 0382 	ubfx	r3, r3, #2, #3
    2ef4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

	lll->handle = ll_conn_handle_get(conn);
    2ef8:	4630      	mov	r0, r6
    2efa:	f018 fa4f 	bl	1b39c <ll_conn_handle_get>
		rx->rx_ftr.param_adv_term.conn_handle = lll->handle;
		rx->rx_ftr.param_adv_term.num_events = 0U;
	}
#endif

	ll_rx_put(link, rx);
    2efe:	4621      	mov	r1, r4
	lll->handle = ll_conn_handle_get(conn);
    2f00:	8228      	strh	r0, [r5, #16]
	rx->handle = lll->handle;
    2f02:	80e0      	strh	r0, [r4, #6]
	ll_rx_put(link, rx);
    2f04:	4658      	mov	r0, fp
    2f06:	f017 fa17 	bl	1a338 <ll_rx_put>
	ll_rx_sched();
    2f0a:	f017 fa1f 	bl	1a34c <ll_rx_sched>

#if defined(CONFIG_BT_CTLR_PHY)
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
#else
	ready_delay_us = lll_radio_rx_ready_delay_get(0, 0);
    2f0e:	4641      	mov	r1, r8
    2f10:	4640      	mov	r0, r8
    2f12:	f029 f9de 	bl	2c2d2 <lll_radio_rx_ready_delay_get>
	conn->evt.ticks_xtal_to_start =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_XTAL_US);
	conn->evt.ticks_preempt_to_start =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_PREEMPT_MIN_US);
	conn->evt.ticks_slot =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    2f16:	f8df b178 	ldr.w	fp, [pc, #376]	; 3090 <ull_slave_setup+0x2e0>
	conn->evt.ticks_active_to_start = 0U;
    2f1a:	f8c6 8004 	str.w	r8, [r6, #4]
	ready_delay_us = lll_radio_rx_ready_delay_get(0, 0);
    2f1e:	4604      	mov	r4, r0
	conn->evt.ticks_xtal_to_start =
    2f20:	2331      	movs	r3, #49	; 0x31
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    2f22:	f200 4052 	addw	r0, r0, #1106	; 0x452
	conn->evt.ticks_xtal_to_start =
    2f26:	6033      	str	r3, [r6, #0]
	conn->evt.ticks_preempt_to_start =
    2f28:	f8c6 8008 	str.w	r8, [r6, #8]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    2f2c:	a34e      	add	r3, pc, #312	; (adr r3, 3068 <ull_slave_setup+0x2b8>)
    2f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
    2f32:	fba0 010b 	umull	r0, r1, r0, fp
    2f36:	f7fe fd79 	bl	1a2c <__aeabi_uldivmod>
		ticks_slot_overhead = ticks_slot_offset;
	} else {
		ticks_slot_overhead = 0U;
	}

	conn_interval_us -= lll->slave.window_widening_periodic_us;
    2f3a:	6aab      	ldr	r3, [r5, #40]	; 0x28

	conn_offset_us = ftr->radio_end_us;
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
    2f3c:	990a      	ldr	r1, [sp, #40]	; 0x28
	conn_interval_us -= lll->slave.window_widening_periodic_us;
    2f3e:	1aff      	subs	r7, r7, r3
	conn_offset_us = ftr->radio_end_us;
    2f40:	f8d9 300c 	ldr.w	r3, [r9, #12]
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
    2f44:	f240 42e2 	movw	r2, #1250	; 0x4e2
    2f48:	fb02 3301 	mla	r3, r2, r1, r3
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    2f4c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn_offset_us += win_delay_us;
	conn_offset_us -= EVENT_OVERHEAD_START_US;
	conn_offset_us -= EVENT_TICKER_RES_MARGIN_US;
	conn_offset_us -= EVENT_JITTER_US;
    2f50:	f203 3386 	addw	r3, r3, #902	; 0x386

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	/* disable ticker job, in order to chain stop and start to avoid RTC
	 * being stopped if no tickers active.
	 */
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    2f54:	4642      	mov	r2, r8
    2f56:	2102      	movs	r1, #2
	conn->evt.ticks_slot =
    2f58:	60f0      	str	r0, [r6, #12]
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    2f5a:	2001      	movs	r0, #1
	conn_offset_us -= ready_delay_us;
    2f5c:	1b1c      	subs	r4, r3, r4
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    2f5e:	f015 f849 	bl	17ff4 <mayfly_enable>
		aux->is_started = 0U;
	}
#endif

	/* Stop Advertiser */
	ticker_id_adv = TICKER_ID_ADV_BASE + ull_adv_handle_get(adv);
    2f62:	4650      	mov	r0, sl
    2f64:	f017 ff44 	bl	1adf0 <ull_adv_handle_get>
    2f68:	1c82      	adds	r2, r0, #2
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    2f6a:	4b43      	ldr	r3, [pc, #268]	; (3078 <ull_slave_setup+0x2c8>)
    2f6c:	f8cd a000 	str.w	sl, [sp]
    2f70:	b2d2      	uxtb	r2, r2
    2f72:	2101      	movs	r1, #1
    2f74:	4640      	mov	r0, r8
    2f76:	f015 fe3b 	bl	18bf0 <ticker_stop>
				    TICKER_USER_ID_ULL_HIGH,
				    ticker_id_adv, ticker_op_stop_adv_cb, adv);
	ticker_op_stop_adv_cb(ticker_status, adv);
    2f7a:	4651      	mov	r1, sl
    2f7c:	f019 fab4 	bl	1c4e8 <ticker_op_stop_adv_cb>

	/* Stop Direct Adv Stop */
	if (adv->lll.is_hdcd) {
    2f80:	f89a 3028 	ldrb.w	r3, [sl, #40]	; 0x28
    2f84:	f013 0f01 	tst.w	r3, #1
    2f88:	465d      	mov	r5, fp
    2f8a:	d007      	beq.n	2f9c <ull_slave_setup+0x1ec>
		/* Advertiser stop can expire while here in this ISR.
		 * Deferred attempt to stop can fail as it would have
		 * expired, hence ignore failure.
		 */
		ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    2f8c:	2201      	movs	r2, #1
    2f8e:	f8cd 8000 	str.w	r8, [sp]
    2f92:	4643      	mov	r3, r8
    2f94:	4611      	mov	r1, r2
    2f96:	4640      	mov	r0, r8
    2f98:	f015 fe2a 	bl	18bf0 <ticker_stop>
			    TICKER_ID_ADV_STOP, NULL, NULL);
	}

	/* Start Slave */
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    2f9c:	4630      	mov	r0, r6
    2f9e:	f018 f9fd 	bl	1b39c <ll_conn_handle_get>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
				     TICKER_USER_ID_ULL_HIGH,
				     ticker_id_conn,
				     ftr->ticks_anchor - ticks_slot_offset,
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    2fa2:	fba7 2305 	umull	r2, r3, r7, r5
    2fa6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    2faa:	4680      	mov	r8, r0
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    2fac:	a32e      	add	r3, pc, #184	; (adr r3, 3068 <ull_slave_setup+0x2b8>)
    2fae:	e9d3 2300 	ldrd	r2, r3, [r3]
    2fb2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    2fb6:	f7fe fd39 	bl	1a2c <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2fba:	f8d9 3008 	ldr.w	r3, [r9, #8]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    2fbe:	990a      	ldr	r1, [sp, #40]	; 0x28
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2fc0:	f1a3 0931 	sub.w	r9, r3, #49	; 0x31
    2fc4:	f44f 73b6 	mov.w	r3, #364	; 0x16c
    2fc8:	9308      	str	r3, [sp, #32]
    2fca:	4b2c      	ldr	r3, [pc, #176]	; (307c <ull_slave_setup+0x2cc>)
    2fcc:	e9cd 6306 	strd	r6, r3, [sp, #24]
    2fd0:	4b2b      	ldr	r3, [pc, #172]	; (3080 <ull_slave_setup+0x2d0>)
    2fd2:	9305      	str	r3, [sp, #20]
    2fd4:	68f3      	ldr	r3, [r6, #12]
    2fd6:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    2fd8:	4b2a      	ldr	r3, [pc, #168]	; (3084 <ull_slave_setup+0x2d4>)
    2fda:	f020 467f 	bic.w	r6, r0, #4278190080	; 0xff000000
    2fde:	fba6 ab03 	umull	sl, fp, r6, r3
    2fe2:	ebb1 000a 	subs.w	r0, r1, sl
    2fe6:	f04f 0307 	mov.w	r3, #7
    2fea:	990b      	ldr	r1, [sp, #44]	; 0x2c
    2fec:	fb03 bb06 	mla	fp, r3, r6, fp
    2ff0:	eb61 010b 	sbc.w	r1, r1, fp
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    2ff4:	f108 0705 	add.w	r7, r8, #5
				     HAL_TICKER_REMAINDER(conn_interval_us),
    2ff8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2ffc:	f04f 0800 	mov.w	r8, #0
				     HAL_TICKER_REMAINDER(conn_interval_us),
    3000:	2300      	movs	r3, #0
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    3002:	f8cd 800c 	str.w	r8, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    3006:	f7fe fd11 	bl	1a2c <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    300a:	a317      	add	r3, pc, #92	; (adr r3, 3068 <ull_slave_setup+0x2b8>)
    300c:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    3010:	e9cd 6001 	strd	r6, r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    3014:	fba4 0105 	umull	r0, r1, r4, r5
    3018:	f7fe fd08 	bl	1a2c <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    301c:	b2ff      	uxtb	r7, r7
    301e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3022:	9000      	str	r0, [sp, #0]
    3024:	464b      	mov	r3, r9
    3026:	463a      	mov	r2, r7
    3028:	2101      	movs	r1, #1
    302a:	4640      	mov	r0, r8
    302c:	f028 fde6 	bl	2bbfc <ticker_start>
				     TICKER_NULL_LAZY,
				     (conn->evt.ticks_slot +
				      ticks_slot_overhead),
				     ull_slave_ticker_cb, conn, ticker_op_cb,
				     (void *)__LINE__);
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    3030:	f030 0302 	bics.w	r3, r0, #2
    3034:	d00b      	beq.n	304e <ull_slave_setup+0x29e>
    3036:	f44f 72b7 	mov.w	r2, #366	; 0x16e
    303a:	4913      	ldr	r1, [pc, #76]	; (3088 <ull_slave_setup+0x2d8>)
    303c:	4813      	ldr	r0, [pc, #76]	; (308c <ull_slave_setup+0x2dc>)
    303e:	f023 ff96 	bl	26f6e <printk>
    3042:	4040      	eors	r0, r0
    3044:	f380 8811 	msr	BASEPRI, r0
    3048:	f04f 0003 	mov.w	r0, #3
    304c:	df02      	svc	2

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	/* enable ticker job, irrespective of disabled in this function so
	 * first connection event can be scheduled as soon as possible.
	 */
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
    304e:	2201      	movs	r2, #1
    3050:	2102      	movs	r1, #2
    3052:	4610      	mov	r0, r2
#endif
}
    3054:	b011      	add	sp, #68	; 0x44
    3056:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
    305a:	f014 bfcb 	b.w	17ff4 <mayfly_enable>
}
    305e:	b011      	add	sp, #68	; 0x44
    3060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3064:	f3af 8000 	nop.w
    3068:	1afd498d 	.word	0x1afd498d
    306c:	00000007 	.word	0x00000007
    3070:	000f4240 	.word	0x000f4240
    3074:	026259ff 	.word	0x026259ff
    3078:	0001c4e9 	.word	0x0001c4e9
    307c:	0001c4c1 	.word	0x0001c4c1
    3080:	0001c51d 	.word	0x0001c51d
    3084:	1afd498d 	.word	0x1afd498d
    3088:	00035028 	.word	0x00035028
    308c:	0002fa94 	.word	0x0002fa94
    3090:	3b9aca00 	.word	0x3b9aca00
    3094:	00000000 	.word	0x00000000

00003098 <nrf_flash_sync_exe>:
	_ticker_sync_context.interval = duration - FLASH_SYNC_SWITCHING_TIME;
	_ticker_sync_context.slot = duration;
}

int nrf_flash_sync_exe(struct flash_op_desc *op_desc)
{
    3098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    309c:	b08f      	sub	sp, #60	; 0x3c
    309e:	4683      	mov	fp, r0
	uint8_t instance_index;
	uint8_t ticker_id;
	int result;
	uint32_t err;

	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
    30a0:	f10d 0137 	add.w	r1, sp, #55	; 0x37
    30a4:	f10d 0036 	add.w	r0, sp, #54	; 0x36
    30a8:	f028 fe68 	bl	2bd7c <ll_timeslice_ticker_id_get>
			      /* (MAYFLY_CALL_ID_PROGRAM) */
			   ticker_id, /* flash ticker id */
			   ticker_ticks_now_get(), /* current tick */
			   0, /* first int. immediately */
			   /* period */
			   HAL_TICKER_US_TO_TICKS(
    30ac:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 3188 <nrf_flash_sync_exe+0xf0>
	err = ticker_start(instance_index,
    30b0:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
    30b4:	930a      	str	r3, [sp, #40]	; 0x28
    30b6:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    30ba:	930b      	str	r3, [sp, #44]	; 0x2c
			   HAL_TICKER_US_TO_TICKS(
    30bc:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 318c <nrf_flash_sync_exe+0xf4>
	err = ticker_start(instance_index,
    30c0:	f028 fdcf 	bl	2bc62 <ticker_ticks_now_get>
			   HAL_TICKER_US_TO_TICKS(
    30c4:	f8d8 4000 	ldr.w	r4, [r8]
    30c8:	fba4 4509 	umull	r4, r5, r4, r9
    30cc:	a328      	add	r3, pc, #160	; (adr r3, 3170 <nrf_flash_sync_exe+0xd8>)
    30ce:	e9d3 2300 	ldrd	r2, r3, [r3]
	err = ticker_start(instance_index,
    30d2:	4682      	mov	sl, r0
			   HAL_TICKER_US_TO_TICKS(
    30d4:	4629      	mov	r1, r5
    30d6:	4620      	mov	r0, r4
    30d8:	f7fe fca8 	bl	1a2c <__aeabi_uldivmod>
    30dc:	4606      	mov	r6, r0
				_ticker_sync_context.interval),
			   /* period remainder */
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
			   0, /* lazy, voluntary skips */
			   HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot),
    30de:	f8d8 0004 	ldr.w	r0, [r8, #4]
	err = ticker_start(instance_index,
    30e2:	4b25      	ldr	r3, [pc, #148]	; (3178 <nrf_flash_sync_exe+0xe0>)
    30e4:	9305      	str	r3, [sp, #20]
    30e6:	2700      	movs	r7, #0
			   HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot),
    30e8:	a321      	add	r3, pc, #132	; (adr r3, 3170 <nrf_flash_sync_exe+0xd8>)
    30ea:	e9d3 2300 	ldrd	r2, r3, [r3]
    30ee:	fba0 0109 	umull	r0, r1, r0, r9
	err = ticker_start(instance_index,
    30f2:	f8cd b018 	str.w	fp, [sp, #24]
    30f6:	e9cd 7707 	strd	r7, r7, [sp, #28]
			   HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot),
    30fa:	f7fe fc97 	bl	1a2c <__aeabi_uldivmod>
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
    30fe:	4b1f      	ldr	r3, [pc, #124]	; (317c <nrf_flash_sync_exe+0xe4>)
    3100:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
    3104:	fba6 bc03 	umull	fp, ip, r6, r3
	err = ticker_start(instance_index,
    3108:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
    310c:	2307      	movs	r3, #7
    310e:	fb03 cc06 	mla	ip, r3, r6, ip
	err = ticker_start(instance_index,
    3112:	e9cd 7003 	strd	r7, r0, [sp, #12]
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
    3116:	ebb4 000b 	subs.w	r0, r4, fp
    311a:	eb65 010c 	sbc.w	r1, r5, ip
    311e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3122:	2300      	movs	r3, #0
    3124:	f7fe fc82 	bl	1a2c <__aeabi_uldivmod>
	err = ticker_start(instance_index,
    3128:	4653      	mov	r3, sl
    312a:	e9cd 6001 	strd	r6, r0, [sp, #4]
    312e:	9700      	str	r7, [sp, #0]
    3130:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    3132:	980a      	ldr	r0, [sp, #40]	; 0x28
    3134:	2103      	movs	r1, #3
    3136:	f028 fd61 	bl	2bbfc <ticker_start>
			   time_slot_callback_prepare,
			   op_desc,
			   NULL, /* no op callback */
			   NULL);

	if (err != TICKER_STATUS_SUCCESS && err != TICKER_STATUS_BUSY) {
    313a:	f030 0302 	bics.w	r3, r0, #2
    313e:	d114      	bne.n	316a <nrf_flash_sync_exe+0xd2>
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    3140:	4a0f      	ldr	r2, [pc, #60]	; (3180 <nrf_flash_sync_exe+0xe8>)
    3142:	4810      	ldr	r0, [pc, #64]	; (3184 <nrf_flash_sync_exe+0xec>)
    3144:	2300      	movs	r3, #0
    3146:	f020 fbf5 	bl	23934 <z_impl_k_sem_take>
		result = -ECANCELED;
	} else if (k_sem_take(&sem_sync, K_MSEC(FLASH_TIMEOUT_MS)) != 0) {
    314a:	b158      	cbz	r0, 3164 <nrf_flash_sync_exe+0xcc>
		/* Stop any scheduled jobs */
		_ticker_stop(instance_index, 3, ticker_id);
    314c:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
    3150:	f89d 0036 	ldrb.w	r0, [sp, #54]	; 0x36
    3154:	2103      	movs	r1, #3
    3156:	f01c fd6d 	bl	1fc34 <_ticker_stop>

		/* wait for operation's complete overrun*/
		result = -ETIMEDOUT;
    315a:	f06f 0073 	mvn.w	r0, #115	; 0x73
	} else {
		result = _ticker_sync_context.result;
	}

	return result;
}
    315e:	b00f      	add	sp, #60	; 0x3c
    3160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		result = _ticker_sync_context.result;
    3164:	f8d8 000c 	ldr.w	r0, [r8, #12]
    3168:	e7f9      	b.n	315e <nrf_flash_sync_exe+0xc6>
		result = -ECANCELED;
    316a:	f06f 008b 	mvn.w	r0, #139	; 0x8b
	return result;
    316e:	e7f6      	b.n	315e <nrf_flash_sync_exe+0xc6>
    3170:	1afd498d 	.word	0x1afd498d
    3174:	00000007 	.word	0x00000007
    3178:	0001fcd9 	.word	0x0001fcd9
    317c:	1afd498d 	.word	0x1afd498d
    3180:	000b7b44 	.word	0x000b7b44
    3184:	200044ec 	.word	0x200044ec
    3188:	200044dc 	.word	0x200044dc
    318c:	3b9aca00 	.word	0x3b9aca00

00003190 <nrf_flash_sync_check_time_limit>:
{
	_ticker_sync_context.ticks_begin = ticker_ticks_now_get();
}

bool nrf_flash_sync_check_time_limit(uint32_t iteration)
{
    3190:	b538      	push	{r3, r4, r5, lr}
	uint32_t ticks_diff;

	ticks_diff = ticker_ticks_diff_get(ticker_ticks_now_get(),
    3192:	4d0f      	ldr	r5, [pc, #60]	; (31d0 <nrf_flash_sync_check_time_limit+0x40>)
{
    3194:	4604      	mov	r4, r0
	ticks_diff = ticker_ticks_diff_get(ticker_ticks_now_get(),
    3196:	f028 fd64 	bl	2bc62 <ticker_ticks_now_get>
    319a:	68a9      	ldr	r1, [r5, #8]
    319c:	f028 fd63 	bl	2bc66 <ticker_ticks_diff_get>
					   _ticker_sync_context.ticks_begin);
	if (ticks_diff + ticks_diff/iteration >
	    HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot)) {
    31a0:	490c      	ldr	r1, [pc, #48]	; (31d4 <nrf_flash_sync_check_time_limit+0x44>)
	if (ticks_diff + ticks_diff/iteration >
    31a2:	fbb0 f4f4 	udiv	r4, r0, r4
    31a6:	4404      	add	r4, r0
	    HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot)) {
    31a8:	6868      	ldr	r0, [r5, #4]
    31aa:	a307      	add	r3, pc, #28	; (adr r3, 31c8 <nrf_flash_sync_check_time_limit+0x38>)
    31ac:	e9d3 2300 	ldrd	r2, r3, [r3]
    31b0:	fba0 0101 	umull	r0, r1, r0, r1
    31b4:	f7fe fc3a 	bl	1a2c <__aeabi_uldivmod>
    31b8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return true;
	}

	return false;
}
    31bc:	4284      	cmp	r4, r0
    31be:	bf94      	ite	ls
    31c0:	2000      	movls	r0, #0
    31c2:	2001      	movhi	r0, #1
    31c4:	bd38      	pop	{r3, r4, r5, pc}
    31c6:	bf00      	nop
    31c8:	1afd498d 	.word	0x1afd498d
    31cc:	00000007 	.word	0x00000007
    31d0:	200044dc 	.word	0x200044dc
    31d4:	3b9aca00 	.word	0x3b9aca00

000031d8 <bt_mesh_sensor_delta_threshold>:
bool bt_mesh_sensor_delta_threshold(const struct bt_mesh_sensor *sensor,
				    const struct sensor_value *curr)
{
	struct sensor_value delta = {
		curr->val1 - sensor->state.prev.val1,
		curr->val2 - sensor->state.prev.val2,
    31d8:	e9d0 2c13 	ldrd	r2, ip, [r0, #76]	; 0x4c
{
    31dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		curr->val2 - sensor->state.prev.val2,
    31e0:	684e      	ldr	r6, [r1, #4]
		curr->val1 - sensor->state.prev.val1,
    31e2:	680c      	ldr	r4, [r1, #0]
	};
	int64_t delta_mill = SENSOR_MILL(&delta);
    31e4:	491e      	ldr	r1, [pc, #120]	; (3260 <bt_mesh_sensor_delta_threshold+0x88>)
		curr->val2 - sensor->state.prev.val2,
    31e6:	eba6 060c 	sub.w	r6, r6, ip
		curr->val1 - sensor->state.prev.val1,
    31ea:	1aa4      	subs	r4, r4, r2
	int64_t delta_mill = SENSOR_MILL(&delta);
    31ec:	17f7      	asrs	r7, r6, #31
    31ee:	fbc1 6704 	smlal	r6, r7, r1, r4
	int64_t thrsh_mill;

	if (delta_mill < 0) {
    31f2:	2e00      	cmp	r6, #0
    31f4:	f177 0300 	sbcs.w	r3, r7, #0
    31f8:	da28      	bge.n	324c <bt_mesh_sensor_delta_threshold+0x74>
		delta_mill = -delta_mill;
		thrsh_mill = SENSOR_MILL(&sensor->state.threshold.delta.down);
    31fa:	6b04      	ldr	r4, [r0, #48]	; 0x30
    31fc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
		delta_mill = -delta_mill;
    31fe:	4276      	negs	r6, r6
    3200:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
		thrsh_mill = SENSOR_MILL(&sensor->state.threshold.delta.down);
    3204:	17e5      	asrs	r5, r4, #31
	} else {
		thrsh_mill = SENSOR_MILL(&sensor->state.threshold.delta.up);
    3206:	fbc1 4503 	smlal	r4, r5, r1, r3
	}

	/* If the threshold value is a perentage, we should calculate the actual
	 * threshold value relative to the previous value.
	 */
	if (sensor->state.threshold.delta.type ==
    320a:	f890 1020 	ldrb.w	r1, [r0, #32]
    320e:	2901      	cmp	r1, #1
    3210:	d114      	bne.n	323c <bt_mesh_sensor_delta_threshold+0x64>
	    BT_MESH_SENSOR_DELTA_PERCENT) {
		int64_t prev_mill = abs(SENSOR_MILL(&sensor->state.prev));
    3212:	4813      	ldr	r0, [pc, #76]	; (3260 <bt_mesh_sensor_delta_threshold+0x88>)
    3214:	fb00 c002 	mla	r0, r0, r2, ip
    3218:	f02a f9a2 	bl	2d560 <abs>

		thrsh_mill = (prev_mill * thrsh_mill) / (100LL * 1000000LL);
    321c:	fb00 f305 	mul.w	r3, r0, r5
		int64_t prev_mill = abs(SENSOR_MILL(&sensor->state.prev));
    3220:	ea4f 79e0 	mov.w	r9, r0, asr #31
		thrsh_mill = (prev_mill * thrsh_mill) / (100LL * 1000000LL);
    3224:	fb04 3309 	mla	r3, r4, r9, r3
    3228:	fba0 0104 	umull	r0, r1, r0, r4
    322c:	4419      	add	r1, r3
    322e:	a30a      	add	r3, pc, #40	; (adr r3, 3258 <bt_mesh_sensor_delta_threshold+0x80>)
    3230:	e9d3 2300 	ldrd	r2, r3, [r3]
    3234:	f7fe fbaa 	bl	198c <__aeabi_ldivmod>
    3238:	4604      	mov	r4, r0
    323a:	460d      	mov	r5, r1

	BT_DBG("Delta: %u (%d - %d) thrsh: %u", (uint32_t)(delta_mill / 1000000L),
	       (int32_t)curr->val1, (int32_t)sensor->state.prev.val1,
	       (uint32_t)(thrsh_mill / 1000000L));

	return (delta_mill > thrsh_mill);
    323c:	42b4      	cmp	r4, r6
    323e:	eb75 0307 	sbcs.w	r3, r5, r7
}
    3242:	bfb4      	ite	lt
    3244:	2001      	movlt	r0, #1
    3246:	2000      	movge	r0, #0
    3248:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		thrsh_mill = SENSOR_MILL(&sensor->state.threshold.delta.up);
    324c:	6a84      	ldr	r4, [r0, #40]	; 0x28
    324e:	6a43      	ldr	r3, [r0, #36]	; 0x24
    3250:	17e5      	asrs	r5, r4, #31
    3252:	e7d8      	b.n	3206 <bt_mesh_sensor_delta_threshold+0x2e>
    3254:	f3af 8000 	nop.w
    3258:	05f5e100 	.word	0x05f5e100
    325c:	00000000 	.word	0x00000000
    3260:	000f4240 	.word	0x000f4240
    3264:	00000000 	.word	0x00000000

00003268 <sensor_descriptor_encode>:
		sensor_powtime_decode(net_buf_simple_pull_u8(buf));
}

void sensor_descriptor_encode(struct net_buf_simple *buf,
				     struct bt_mesh_sensor *sensor)
{
    3268:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	net_buf_simple_add_le16(buf, sensor->type->id);
    326c:	680b      	ldr	r3, [r1, #0]
{
    326e:	b08b      	sub	sp, #44	; 0x2c
    3270:	460c      	mov	r4, r1
	net_buf_simple_add_le16(buf, sensor->type->id);
    3272:	8819      	ldrh	r1, [r3, #0]
{
    3274:	4605      	mov	r5, r0
	net_buf_simple_add_le16(buf, sensor->type->id);
    3276:	f029 fbc7 	bl	2ca08 <net_buf_simple_add_le16>

	const struct bt_mesh_sensor_descriptor dummy = { 0 };
    327a:	466b      	mov	r3, sp
    327c:	2228      	movs	r2, #40	; 0x28
    327e:	2100      	movs	r1, #0
    3280:	4618      	mov	r0, r3
    3282:	f02a f9ba 	bl	2d5fa <memset>
	const struct bt_mesh_sensor_descriptor *d =
		sensor->descriptor ? sensor->descriptor : &dummy;
    3286:	6864      	ldr	r4, [r4, #4]
	uint64_t tol_mill = 1000000L * tol->val1 + tol->val2;
    3288:	4a37      	ldr	r2, [pc, #220]	; (3368 <sensor_descriptor_encode+0x100>)
		sensor->descriptor ? sensor->descriptor : &dummy;
    328a:	2c00      	cmp	r4, #0
    328c:	bf08      	it	eq
    328e:	4604      	moveq	r4, r0
	uint64_t tol_mill = 1000000L * tol->val1 + tol->val2;
    3290:	e9d4 1300 	ldrd	r1, r3, [r4]
	if (tol_mill > (1000000L * 100L)) {
    3294:	a730      	add	r7, pc, #192	; (adr r7, 3358 <sensor_descriptor_encode+0xf0>)
    3296:	e9d7 6700 	ldrd	r6, r7, [r7]
	uint64_t tol_mill = 1000000L * tol->val1 + tol->val2;
    329a:	fb02 3101 	mla	r1, r2, r1, r3
    329e:	17cb      	asrs	r3, r1, #31
	if (tol_mill > (1000000L * 100L)) {
    32a0:	429f      	cmp	r7, r3
    32a2:	bf08      	it	eq
    32a4:	428e      	cmpeq	r6, r1
    32a6:	d34f      	bcc.n	3348 <sensor_descriptor_encode+0xe0>
	return (tol_mill * 4095L + (1000000L * 50L)) / (1000000L * 100L);
    32a8:	f20f 09b4 	addw	r9, pc, #180	; 0xb4
    32ac:	e9d9 8900 	ldrd	r8, r9, [r9]
    32b0:	f640 70ff 	movw	r0, #4095	; 0xfff
    32b4:	fbc0 8901 	smlal	r8, r9, r0, r1
    32b8:	4640      	mov	r0, r8
    32ba:	4632      	mov	r2, r6
    32bc:	463b      	mov	r3, r7
    32be:	4649      	mov	r1, r9
    32c0:	f7fe fbb4 	bl	1a2c <__aeabi_uldivmod>
    32c4:	fa1f f880 	uxth.w	r8, r0
	uint64_t tol_mill = 1000000L * tol->val1 + tol->val2;
    32c8:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    32cc:	4926      	ldr	r1, [pc, #152]	; (3368 <sensor_descriptor_encode+0x100>)
    32ce:	fb01 2c03 	mla	ip, r1, r3, r2
    32d2:	4662      	mov	r2, ip
    32d4:	17d3      	asrs	r3, r2, #31
	if (tol_mill > (1000000L * 100L)) {
    32d6:	429f      	cmp	r7, r3
    32d8:	bf08      	it	eq
    32da:	4566      	cmpeq	r6, ip
    32dc:	d337      	bcc.n	334e <sensor_descriptor_encode+0xe6>
	return (tol_mill * 4095L + (1000000L * 50L)) / (1000000L * 100L);
    32de:	a120      	add	r1, pc, #128	; (adr r1, 3360 <sensor_descriptor_encode+0xf8>)
    32e0:	e9d1 0100 	ldrd	r0, r1, [r1]
    32e4:	f640 76ff 	movw	r6, #4095	; 0xfff
    32e8:	fbc6 010c 	smlal	r0, r1, r6, ip
    32ec:	a31a      	add	r3, pc, #104	; (adr r3, 3358 <sensor_descriptor_encode+0xf0>)
    32ee:	e9d3 2300 	ldrd	r2, r3, [r3]
    32f2:	f7fe fb9b 	bl	1a2c <__aeabi_uldivmod>
    32f6:	b286      	uxth	r6, r0

	uint16_t tol_pos = tolerance_encode(&d->tolerance.positive);
	uint16_t tol_neg = tolerance_encode(&d->tolerance.negative);

	net_buf_simple_add_u8(buf, tol_pos & 0xff);
    32f8:	fa5f f188 	uxtb.w	r1, r8
    32fc:	4628      	mov	r0, r5
    32fe:	f029 fb7c 	bl	2c9fa <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf,
			      ((tol_pos >> 8) & BIT_MASK(4)) | (tol_neg << 4));
    3302:	0131      	lsls	r1, r6, #4
	net_buf_simple_add_u8(buf,
    3304:	ea41 2118 	orr.w	r1, r1, r8, lsr #8
    3308:	b2c9      	uxtb	r1, r1
    330a:	4628      	mov	r0, r5
    330c:	f029 fb75 	bl	2c9fa <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, tol_neg >> 4);
    3310:	f3c6 1107 	ubfx	r1, r6, #4, #8
    3314:	4628      	mov	r0, r5
    3316:	f029 fb70 	bl	2c9fa <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, d->sampling_type);
    331a:	7c21      	ldrb	r1, [r4, #16]
    331c:	4628      	mov	r0, r5
    331e:	f029 fb6c 	bl	2c9fa <net_buf_simple_add_u8>

	net_buf_simple_add_u8(buf, sensor_powtime_encode(d->period));
    3322:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
    3326:	f01d fcdf 	bl	20ce8 <sensor_powtime_encode>
    332a:	4601      	mov	r1, r0
    332c:	4628      	mov	r0, r5
    332e:	f029 fb64 	bl	2c9fa <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, sensor_powtime_encode(d->update_interval));
    3332:	e9d4 0108 	ldrd	r0, r1, [r4, #32]
    3336:	f01d fcd7 	bl	20ce8 <sensor_powtime_encode>
    333a:	4601      	mov	r1, r0
    333c:	4628      	mov	r0, r5
}
    333e:	b00b      	add	sp, #44	; 0x2c
    3340:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	net_buf_simple_add_u8(buf, sensor_powtime_encode(d->update_interval));
    3344:	f029 bb59 	b.w	2c9fa <net_buf_simple_add_u8>
		return 0;
    3348:	f04f 0800 	mov.w	r8, #0
    334c:	e7bc      	b.n	32c8 <sensor_descriptor_encode+0x60>
    334e:	2600      	movs	r6, #0
    3350:	e7d2      	b.n	32f8 <sensor_descriptor_encode+0x90>
    3352:	bf00      	nop
    3354:	f3af 8000 	nop.w
    3358:	05f5e100 	.word	0x05f5e100
    335c:	00000000 	.word	0x00000000
    3360:	02faf080 	.word	0x02faf080
    3364:	00000000 	.word	0x00000000
    3368:	000f4240 	.word	0x000f4240
    336c:	00000000 	.word	0x00000000

00003370 <_dtoa_r>:
    3370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3374:	6a47      	ldr	r7, [r0, #36]	; 0x24
    3376:	b097      	sub	sp, #92	; 0x5c
    3378:	4680      	mov	r8, r0
    337a:	461d      	mov	r5, r3
    337c:	9e23      	ldr	r6, [sp, #140]	; 0x8c
    337e:	4692      	mov	sl, r2
    3380:	469b      	mov	fp, r3
    3382:	b947      	cbnz	r7, 3396 <_dtoa_r+0x26>
    3384:	2010      	movs	r0, #16
    3386:	f022 fb07 	bl	25998 <malloc>
    338a:	e9c0 7701 	strd	r7, r7, [r0, #4]
    338e:	f8c8 0024 	str.w	r0, [r8, #36]	; 0x24
    3392:	6007      	str	r7, [r0, #0]
    3394:	60c7      	str	r7, [r0, #12]
    3396:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
    339a:	6819      	ldr	r1, [r3, #0]
    339c:	b159      	cbz	r1, 33b6 <_dtoa_r+0x46>
    339e:	685a      	ldr	r2, [r3, #4]
    33a0:	604a      	str	r2, [r1, #4]
    33a2:	2301      	movs	r3, #1
    33a4:	4093      	lsls	r3, r2
    33a6:	608b      	str	r3, [r1, #8]
    33a8:	4640      	mov	r0, r8
    33aa:	f02a fb8f 	bl	2dacc <_Bfree>
    33ae:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
    33b2:	2200      	movs	r2, #0
    33b4:	601a      	str	r2, [r3, #0]
    33b6:	1e2b      	subs	r3, r5, #0
    33b8:	bfaa      	itet	ge
    33ba:	2300      	movge	r3, #0
    33bc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
    33c0:	6033      	strge	r3, [r6, #0]
    33c2:	4ba7      	ldr	r3, [pc, #668]	; (3660 <_dtoa_r+0x2f0>)
    33c4:	bfbc      	itt	lt
    33c6:	2201      	movlt	r2, #1
    33c8:	6032      	strlt	r2, [r6, #0]
    33ca:	ea33 030b 	bics.w	r3, r3, fp
    33ce:	465c      	mov	r4, fp
    33d0:	d11a      	bne.n	3408 <_dtoa_r+0x98>
    33d2:	9a22      	ldr	r2, [sp, #136]	; 0x88
    33d4:	f242 730f 	movw	r3, #9999	; 0x270f
    33d8:	6013      	str	r3, [r2, #0]
    33da:	f3cb 0313 	ubfx	r3, fp, #0, #20
    33de:	ea53 030a 	orrs.w	r3, r3, sl
    33e2:	f000 855e 	beq.w	3ea2 <_dtoa_r+0xb32>
    33e6:	9b24      	ldr	r3, [sp, #144]	; 0x90
    33e8:	b953      	cbnz	r3, 3400 <_dtoa_r+0x90>
    33ea:	4b9e      	ldr	r3, [pc, #632]	; (3664 <_dtoa_r+0x2f4>)
    33ec:	e021      	b.n	3432 <_dtoa_r+0xc2>
    33ee:	4b9e      	ldr	r3, [pc, #632]	; (3668 <_dtoa_r+0x2f8>)
    33f0:	9305      	str	r3, [sp, #20]
    33f2:	3308      	adds	r3, #8
    33f4:	9a24      	ldr	r2, [sp, #144]	; 0x90
    33f6:	6013      	str	r3, [r2, #0]
    33f8:	9805      	ldr	r0, [sp, #20]
    33fa:	b017      	add	sp, #92	; 0x5c
    33fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3400:	4b98      	ldr	r3, [pc, #608]	; (3664 <_dtoa_r+0x2f4>)
    3402:	9305      	str	r3, [sp, #20]
    3404:	3303      	adds	r3, #3
    3406:	e7f5      	b.n	33f4 <_dtoa_r+0x84>
    3408:	2200      	movs	r2, #0
    340a:	2300      	movs	r3, #0
    340c:	4650      	mov	r0, sl
    340e:	4659      	mov	r1, fp
    3410:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
    3414:	f7fe fcf6 	bl	1e04 <__aeabi_dcmpeq>
    3418:	4607      	mov	r7, r0
    341a:	b160      	cbz	r0, 3436 <_dtoa_r+0xc6>
    341c:	9a22      	ldr	r2, [sp, #136]	; 0x88
    341e:	2301      	movs	r3, #1
    3420:	6013      	str	r3, [r2, #0]
    3422:	9b24      	ldr	r3, [sp, #144]	; 0x90
    3424:	2b00      	cmp	r3, #0
    3426:	f000 8539 	beq.w	3e9c <_dtoa_r+0xb2c>
    342a:	4b90      	ldr	r3, [pc, #576]	; (366c <_dtoa_r+0x2fc>)
    342c:	9a24      	ldr	r2, [sp, #144]	; 0x90
    342e:	6013      	str	r3, [r2, #0]
    3430:	3b01      	subs	r3, #1
    3432:	9305      	str	r3, [sp, #20]
    3434:	e7e0      	b.n	33f8 <_dtoa_r+0x88>
    3436:	ab14      	add	r3, sp, #80	; 0x50
    3438:	9301      	str	r3, [sp, #4]
    343a:	ab15      	add	r3, sp, #84	; 0x54
    343c:	9300      	str	r3, [sp, #0]
    343e:	4640      	mov	r0, r8
    3440:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    3444:	f02a fd47 	bl	2ded6 <__d2b>
    3448:	f3cb 560a 	ubfx	r6, fp, #20, #11
    344c:	9003      	str	r0, [sp, #12]
    344e:	2e00      	cmp	r6, #0
    3450:	d07f      	beq.n	3552 <_dtoa_r+0x1e2>
    3452:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3454:	9712      	str	r7, [sp, #72]	; 0x48
    3456:	f3c3 0313 	ubfx	r3, r3, #0, #20
    345a:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
    345e:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
    3462:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
    3466:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
    346a:	2200      	movs	r2, #0
    346c:	4b80      	ldr	r3, [pc, #512]	; (3670 <_dtoa_r+0x300>)
    346e:	4620      	mov	r0, r4
    3470:	4629      	mov	r1, r5
    3472:	f7fd fe99 	bl	11a8 <__aeabi_dsub>
    3476:	a374      	add	r3, pc, #464	; (adr r3, 3648 <_dtoa_r+0x2d8>)
    3478:	e9d3 2300 	ldrd	r2, r3, [r3]
    347c:	f7fe f84c 	bl	1518 <__aeabi_dmul>
    3480:	a373      	add	r3, pc, #460	; (adr r3, 3650 <_dtoa_r+0x2e0>)
    3482:	e9d3 2300 	ldrd	r2, r3, [r3]
    3486:	f7fd fe91 	bl	11ac <__adddf3>
    348a:	4604      	mov	r4, r0
    348c:	4630      	mov	r0, r6
    348e:	460d      	mov	r5, r1
    3490:	f7fd ffd8 	bl	1444 <__aeabi_i2d>
    3494:	a370      	add	r3, pc, #448	; (adr r3, 3658 <_dtoa_r+0x2e8>)
    3496:	e9d3 2300 	ldrd	r2, r3, [r3]
    349a:	f7fe f83d 	bl	1518 <__aeabi_dmul>
    349e:	4602      	mov	r2, r0
    34a0:	460b      	mov	r3, r1
    34a2:	4620      	mov	r0, r4
    34a4:	4629      	mov	r1, r5
    34a6:	f7fd fe81 	bl	11ac <__adddf3>
    34aa:	4604      	mov	r4, r0
    34ac:	460d      	mov	r5, r1
    34ae:	f7fe fa45 	bl	193c <__aeabi_d2iz>
    34b2:	2200      	movs	r2, #0
    34b4:	4681      	mov	r9, r0
    34b6:	2300      	movs	r3, #0
    34b8:	4620      	mov	r0, r4
    34ba:	4629      	mov	r1, r5
    34bc:	f7fe fcac 	bl	1e18 <__aeabi_dcmplt>
    34c0:	b148      	cbz	r0, 34d6 <_dtoa_r+0x166>
    34c2:	4648      	mov	r0, r9
    34c4:	f7fd ffbe 	bl	1444 <__aeabi_i2d>
    34c8:	4622      	mov	r2, r4
    34ca:	462b      	mov	r3, r5
    34cc:	f7fe fc9a 	bl	1e04 <__aeabi_dcmpeq>
    34d0:	b908      	cbnz	r0, 34d6 <_dtoa_r+0x166>
    34d2:	f109 39ff 	add.w	r9, r9, #4294967295
    34d6:	f1b9 0f16 	cmp.w	r9, #22
    34da:	d857      	bhi.n	358c <_dtoa_r+0x21c>
    34dc:	4b65      	ldr	r3, [pc, #404]	; (3674 <_dtoa_r+0x304>)
    34de:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
    34e2:	e9d3 2300 	ldrd	r2, r3, [r3]
    34e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    34ea:	f7fe fc95 	bl	1e18 <__aeabi_dcmplt>
    34ee:	2800      	cmp	r0, #0
    34f0:	d04e      	beq.n	3590 <_dtoa_r+0x220>
    34f2:	f109 39ff 	add.w	r9, r9, #4294967295
    34f6:	2300      	movs	r3, #0
    34f8:	9311      	str	r3, [sp, #68]	; 0x44
    34fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
    34fc:	1b9e      	subs	r6, r3, r6
    34fe:	1e73      	subs	r3, r6, #1
    3500:	9309      	str	r3, [sp, #36]	; 0x24
    3502:	bf45      	ittet	mi
    3504:	f1c6 0301 	rsbmi	r3, r6, #1
    3508:	9308      	strmi	r3, [sp, #32]
    350a:	2300      	movpl	r3, #0
    350c:	2300      	movmi	r3, #0
    350e:	bf4c      	ite	mi
    3510:	9309      	strmi	r3, [sp, #36]	; 0x24
    3512:	9308      	strpl	r3, [sp, #32]
    3514:	f1b9 0f00 	cmp.w	r9, #0
    3518:	db3c      	blt.n	3594 <_dtoa_r+0x224>
    351a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    351c:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
    3520:	444b      	add	r3, r9
    3522:	9309      	str	r3, [sp, #36]	; 0x24
    3524:	2300      	movs	r3, #0
    3526:	930a      	str	r3, [sp, #40]	; 0x28
    3528:	9b20      	ldr	r3, [sp, #128]	; 0x80
    352a:	2b09      	cmp	r3, #9
    352c:	f200 80a6 	bhi.w	367c <_dtoa_r+0x30c>
    3530:	2b05      	cmp	r3, #5
    3532:	bfc4      	itt	gt
    3534:	3b04      	subgt	r3, #4
    3536:	9320      	strgt	r3, [sp, #128]	; 0x80
    3538:	9b20      	ldr	r3, [sp, #128]	; 0x80
    353a:	f1a3 0302 	sub.w	r3, r3, #2
    353e:	bfcc      	ite	gt
    3540:	2400      	movgt	r4, #0
    3542:	2401      	movle	r4, #1
    3544:	2b03      	cmp	r3, #3
    3546:	f200 80a4 	bhi.w	3692 <_dtoa_r+0x322>
    354a:	e8df f003 	tbb	[pc, r3]
    354e:	3a2d      	.short	0x3a2d
    3550:	7b38      	.short	0x7b38
    3552:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	; 0x50
    3556:	441e      	add	r6, r3
    3558:	f206 4032 	addw	r0, r6, #1074	; 0x432
    355c:	2820      	cmp	r0, #32
    355e:	bfc1      	itttt	gt
    3560:	f1c0 0040 	rsbgt	r0, r0, #64	; 0x40
    3564:	4084      	lslgt	r4, r0
    3566:	f206 4012 	addwgt	r0, r6, #1042	; 0x412
    356a:	fa2a f000 	lsrgt.w	r0, sl, r0
    356e:	bfd6      	itet	le
    3570:	f1c0 0020 	rsble	r0, r0, #32
    3574:	4320      	orrgt	r0, r4
    3576:	fa0a f000 	lslle.w	r0, sl, r0
    357a:	f7fd ff53 	bl	1424 <__aeabi_ui2d>
    357e:	2301      	movs	r3, #1
    3580:	4604      	mov	r4, r0
    3582:	f1a1 75f8 	sub.w	r5, r1, #32505856	; 0x1f00000
    3586:	3e01      	subs	r6, #1
    3588:	9312      	str	r3, [sp, #72]	; 0x48
    358a:	e76e      	b.n	346a <_dtoa_r+0xfa>
    358c:	2301      	movs	r3, #1
    358e:	e7b3      	b.n	34f8 <_dtoa_r+0x188>
    3590:	9011      	str	r0, [sp, #68]	; 0x44
    3592:	e7b2      	b.n	34fa <_dtoa_r+0x18a>
    3594:	9b08      	ldr	r3, [sp, #32]
    3596:	eba3 0309 	sub.w	r3, r3, r9
    359a:	9308      	str	r3, [sp, #32]
    359c:	f1c9 0300 	rsb	r3, r9, #0
    35a0:	930a      	str	r3, [sp, #40]	; 0x28
    35a2:	2300      	movs	r3, #0
    35a4:	9310      	str	r3, [sp, #64]	; 0x40
    35a6:	e7bf      	b.n	3528 <_dtoa_r+0x1b8>
    35a8:	2300      	movs	r3, #0
    35aa:	930b      	str	r3, [sp, #44]	; 0x2c
    35ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
    35ae:	2b00      	cmp	r3, #0
    35b0:	dc72      	bgt.n	3698 <_dtoa_r+0x328>
    35b2:	2301      	movs	r3, #1
    35b4:	9306      	str	r3, [sp, #24]
    35b6:	9304      	str	r3, [sp, #16]
    35b8:	461a      	mov	r2, r3
    35ba:	9221      	str	r2, [sp, #132]	; 0x84
    35bc:	e00b      	b.n	35d6 <_dtoa_r+0x266>
    35be:	2301      	movs	r3, #1
    35c0:	e7f3      	b.n	35aa <_dtoa_r+0x23a>
    35c2:	2300      	movs	r3, #0
    35c4:	930b      	str	r3, [sp, #44]	; 0x2c
    35c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
    35c8:	444b      	add	r3, r9
    35ca:	9306      	str	r3, [sp, #24]
    35cc:	3301      	adds	r3, #1
    35ce:	2b01      	cmp	r3, #1
    35d0:	9304      	str	r3, [sp, #16]
    35d2:	bfb8      	it	lt
    35d4:	2301      	movlt	r3, #1
    35d6:	f8d8 5024 	ldr.w	r5, [r8, #36]	; 0x24
    35da:	2200      	movs	r2, #0
    35dc:	606a      	str	r2, [r5, #4]
    35de:	2204      	movs	r2, #4
    35e0:	f102 0014 	add.w	r0, r2, #20
    35e4:	4298      	cmp	r0, r3
    35e6:	6869      	ldr	r1, [r5, #4]
    35e8:	d95a      	bls.n	36a0 <_dtoa_r+0x330>
    35ea:	4640      	mov	r0, r8
    35ec:	f02a fa3a 	bl	2da64 <_Balloc>
    35f0:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
    35f4:	6028      	str	r0, [r5, #0]
    35f6:	681b      	ldr	r3, [r3, #0]
    35f8:	9305      	str	r3, [sp, #20]
    35fa:	9b04      	ldr	r3, [sp, #16]
    35fc:	2b0e      	cmp	r3, #14
    35fe:	f200 80d2 	bhi.w	37a6 <_dtoa_r+0x436>
    3602:	2c00      	cmp	r4, #0
    3604:	f000 80cf 	beq.w	37a6 <_dtoa_r+0x436>
    3608:	f1b9 0f00 	cmp.w	r9, #0
    360c:	dd66      	ble.n	36dc <_dtoa_r+0x36c>
    360e:	4a19      	ldr	r2, [pc, #100]	; (3674 <_dtoa_r+0x304>)
    3610:	f009 030f 	and.w	r3, r9, #15
    3614:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    3618:	e9d3 3400 	ldrd	r3, r4, [r3]
    361c:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
    3620:	ea4f 1429 	mov.w	r4, r9, asr #4
    3624:	06e0      	lsls	r0, r4, #27
    3626:	d557      	bpl.n	36d8 <_dtoa_r+0x368>
    3628:	4b13      	ldr	r3, [pc, #76]	; (3678 <_dtoa_r+0x308>)
    362a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    362e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    3632:	f7fe f89b 	bl	176c <__aeabi_ddiv>
    3636:	f004 040f 	and.w	r4, r4, #15
    363a:	4682      	mov	sl, r0
    363c:	468b      	mov	fp, r1
    363e:	2703      	movs	r7, #3
    3640:	4d0d      	ldr	r5, [pc, #52]	; (3678 <_dtoa_r+0x308>)
    3642:	e03e      	b.n	36c2 <_dtoa_r+0x352>
    3644:	2301      	movs	r3, #1
    3646:	e7bd      	b.n	35c4 <_dtoa_r+0x254>
    3648:	636f4361 	.word	0x636f4361
    364c:	3fd287a7 	.word	0x3fd287a7
    3650:	8b60c8b3 	.word	0x8b60c8b3
    3654:	3fc68a28 	.word	0x3fc68a28
    3658:	509f79fb 	.word	0x509f79fb
    365c:	3fd34413 	.word	0x3fd34413
    3660:	7ff00000 	.word	0x7ff00000
    3664:	00035e4c 	.word	0x00035e4c
    3668:	00035e43 	.word	0x00035e43
    366c:	0002fb52 	.word	0x0002fb52
    3670:	3ff80000 	.word	0x3ff80000
    3674:	0002e860 	.word	0x0002e860
    3678:	0002e838 	.word	0x0002e838
    367c:	2401      	movs	r4, #1
    367e:	2300      	movs	r3, #0
    3680:	9320      	str	r3, [sp, #128]	; 0x80
    3682:	940b      	str	r4, [sp, #44]	; 0x2c
    3684:	f04f 33ff 	mov.w	r3, #4294967295
    3688:	9306      	str	r3, [sp, #24]
    368a:	9304      	str	r3, [sp, #16]
    368c:	2200      	movs	r2, #0
    368e:	2312      	movs	r3, #18
    3690:	e793      	b.n	35ba <_dtoa_r+0x24a>
    3692:	2301      	movs	r3, #1
    3694:	930b      	str	r3, [sp, #44]	; 0x2c
    3696:	e7f5      	b.n	3684 <_dtoa_r+0x314>
    3698:	9b21      	ldr	r3, [sp, #132]	; 0x84
    369a:	9306      	str	r3, [sp, #24]
    369c:	9304      	str	r3, [sp, #16]
    369e:	e79a      	b.n	35d6 <_dtoa_r+0x266>
    36a0:	3101      	adds	r1, #1
    36a2:	6069      	str	r1, [r5, #4]
    36a4:	0052      	lsls	r2, r2, #1
    36a6:	e79b      	b.n	35e0 <_dtoa_r+0x270>
    36a8:	07e1      	lsls	r1, r4, #31
    36aa:	d508      	bpl.n	36be <_dtoa_r+0x34e>
    36ac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    36b0:	e9d5 2300 	ldrd	r2, r3, [r5]
    36b4:	f7fd ff30 	bl	1518 <__aeabi_dmul>
    36b8:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    36bc:	3701      	adds	r7, #1
    36be:	1064      	asrs	r4, r4, #1
    36c0:	3508      	adds	r5, #8
    36c2:	2c00      	cmp	r4, #0
    36c4:	d1f0      	bne.n	36a8 <_dtoa_r+0x338>
    36c6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    36ca:	4650      	mov	r0, sl
    36cc:	4659      	mov	r1, fp
    36ce:	f7fe f84d 	bl	176c <__aeabi_ddiv>
    36d2:	4682      	mov	sl, r0
    36d4:	468b      	mov	fp, r1
    36d6:	e01a      	b.n	370e <_dtoa_r+0x39e>
    36d8:	2702      	movs	r7, #2
    36da:	e7b1      	b.n	3640 <_dtoa_r+0x2d0>
    36dc:	f000 809d 	beq.w	381a <_dtoa_r+0x4aa>
    36e0:	f1c9 0400 	rsb	r4, r9, #0
    36e4:	4b9c      	ldr	r3, [pc, #624]	; (3958 <_dtoa_r+0x5e8>)
    36e6:	4d9d      	ldr	r5, [pc, #628]	; (395c <_dtoa_r+0x5ec>)
    36e8:	f004 020f 	and.w	r2, r4, #15
    36ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    36f0:	e9d3 2300 	ldrd	r2, r3, [r3]
    36f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    36f8:	f7fd ff0e 	bl	1518 <__aeabi_dmul>
    36fc:	1124      	asrs	r4, r4, #4
    36fe:	4682      	mov	sl, r0
    3700:	468b      	mov	fp, r1
    3702:	2300      	movs	r3, #0
    3704:	2702      	movs	r7, #2
    3706:	2c00      	cmp	r4, #0
    3708:	d17c      	bne.n	3804 <_dtoa_r+0x494>
    370a:	2b00      	cmp	r3, #0
    370c:	d1e1      	bne.n	36d2 <_dtoa_r+0x362>
    370e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3710:	2b00      	cmp	r3, #0
    3712:	f000 8084 	beq.w	381e <_dtoa_r+0x4ae>
    3716:	2200      	movs	r2, #0
    3718:	4b91      	ldr	r3, [pc, #580]	; (3960 <_dtoa_r+0x5f0>)
    371a:	4650      	mov	r0, sl
    371c:	4659      	mov	r1, fp
    371e:	465d      	mov	r5, fp
    3720:	f7fe fb7a 	bl	1e18 <__aeabi_dcmplt>
    3724:	2800      	cmp	r0, #0
    3726:	d07a      	beq.n	381e <_dtoa_r+0x4ae>
    3728:	9b04      	ldr	r3, [sp, #16]
    372a:	2b00      	cmp	r3, #0
    372c:	d077      	beq.n	381e <_dtoa_r+0x4ae>
    372e:	9b06      	ldr	r3, [sp, #24]
    3730:	2b00      	cmp	r3, #0
    3732:	dd36      	ble.n	37a2 <_dtoa_r+0x432>
    3734:	4650      	mov	r0, sl
    3736:	4659      	mov	r1, fp
    3738:	2200      	movs	r2, #0
    373a:	4b8a      	ldr	r3, [pc, #552]	; (3964 <_dtoa_r+0x5f4>)
    373c:	f7fd feec 	bl	1518 <__aeabi_dmul>
    3740:	9c06      	ldr	r4, [sp, #24]
    3742:	f109 36ff 	add.w	r6, r9, #4294967295
    3746:	4682      	mov	sl, r0
    3748:	468b      	mov	fp, r1
    374a:	3701      	adds	r7, #1
    374c:	4638      	mov	r0, r7
    374e:	f7fd fe79 	bl	1444 <__aeabi_i2d>
    3752:	4652      	mov	r2, sl
    3754:	465b      	mov	r3, fp
    3756:	f7fd fedf 	bl	1518 <__aeabi_dmul>
    375a:	2200      	movs	r2, #0
    375c:	4b82      	ldr	r3, [pc, #520]	; (3968 <_dtoa_r+0x5f8>)
    375e:	f7fd fd25 	bl	11ac <__adddf3>
    3762:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
    3766:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    376a:	950f      	str	r5, [sp, #60]	; 0x3c
    376c:	2c00      	cmp	r4, #0
    376e:	d159      	bne.n	3824 <_dtoa_r+0x4b4>
    3770:	2200      	movs	r2, #0
    3772:	4b7e      	ldr	r3, [pc, #504]	; (396c <_dtoa_r+0x5fc>)
    3774:	4650      	mov	r0, sl
    3776:	4659      	mov	r1, fp
    3778:	f7fd fd16 	bl	11a8 <__aeabi_dsub>
    377c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    377e:	462b      	mov	r3, r5
    3780:	4682      	mov	sl, r0
    3782:	468b      	mov	fp, r1
    3784:	f7fe fb66 	bl	1e54 <__aeabi_dcmpgt>
    3788:	2800      	cmp	r0, #0
    378a:	f040 8288 	bne.w	3c9e <_dtoa_r+0x92e>
    378e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    3790:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
    3794:	4650      	mov	r0, sl
    3796:	4659      	mov	r1, fp
    3798:	f7fe fb3e 	bl	1e18 <__aeabi_dcmplt>
    379c:	2800      	cmp	r0, #0
    379e:	f040 827c 	bne.w	3c9a <_dtoa_r+0x92a>
    37a2:	e9dd ab0c 	ldrd	sl, fp, [sp, #48]	; 0x30
    37a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
    37a8:	2b00      	cmp	r3, #0
    37aa:	f2c0 814d 	blt.w	3a48 <_dtoa_r+0x6d8>
    37ae:	f1b9 0f0e 	cmp.w	r9, #14
    37b2:	f300 8149 	bgt.w	3a48 <_dtoa_r+0x6d8>
    37b6:	4b68      	ldr	r3, [pc, #416]	; (3958 <_dtoa_r+0x5e8>)
    37b8:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
    37bc:	e9d3 3400 	ldrd	r3, r4, [r3]
    37c0:	e9cd 3406 	strd	r3, r4, [sp, #24]
    37c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
    37c6:	2b00      	cmp	r3, #0
    37c8:	f280 80d4 	bge.w	3974 <_dtoa_r+0x604>
    37cc:	9b04      	ldr	r3, [sp, #16]
    37ce:	2b00      	cmp	r3, #0
    37d0:	f300 80d0 	bgt.w	3974 <_dtoa_r+0x604>
    37d4:	f040 8260 	bne.w	3c98 <_dtoa_r+0x928>
    37d8:	2200      	movs	r2, #0
    37da:	4b64      	ldr	r3, [pc, #400]	; (396c <_dtoa_r+0x5fc>)
    37dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    37e0:	f7fd fe9a 	bl	1518 <__aeabi_dmul>
    37e4:	4652      	mov	r2, sl
    37e6:	465b      	mov	r3, fp
    37e8:	f7fe fb2a 	bl	1e40 <__aeabi_dcmpge>
    37ec:	9c04      	ldr	r4, [sp, #16]
    37ee:	4626      	mov	r6, r4
    37f0:	2800      	cmp	r0, #0
    37f2:	f040 8239 	bne.w	3c68 <_dtoa_r+0x8f8>
    37f6:	9d05      	ldr	r5, [sp, #20]
    37f8:	2331      	movs	r3, #49	; 0x31
    37fa:	f805 3b01 	strb.w	r3, [r5], #1
    37fe:	f109 0901 	add.w	r9, r9, #1
    3802:	e235      	b.n	3c70 <_dtoa_r+0x900>
    3804:	07e2      	lsls	r2, r4, #31
    3806:	d505      	bpl.n	3814 <_dtoa_r+0x4a4>
    3808:	e9d5 2300 	ldrd	r2, r3, [r5]
    380c:	f7fd fe84 	bl	1518 <__aeabi_dmul>
    3810:	3701      	adds	r7, #1
    3812:	2301      	movs	r3, #1
    3814:	1064      	asrs	r4, r4, #1
    3816:	3508      	adds	r5, #8
    3818:	e775      	b.n	3706 <_dtoa_r+0x396>
    381a:	2702      	movs	r7, #2
    381c:	e777      	b.n	370e <_dtoa_r+0x39e>
    381e:	464e      	mov	r6, r9
    3820:	9c04      	ldr	r4, [sp, #16]
    3822:	e793      	b.n	374c <_dtoa_r+0x3dc>
    3824:	4b4c      	ldr	r3, [pc, #304]	; (3958 <_dtoa_r+0x5e8>)
    3826:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    382a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
    382e:	9b05      	ldr	r3, [sp, #20]
    3830:	441c      	add	r4, r3
    3832:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3834:	2b00      	cmp	r3, #0
    3836:	d044      	beq.n	38c2 <_dtoa_r+0x552>
    3838:	4602      	mov	r2, r0
    383a:	460b      	mov	r3, r1
    383c:	2000      	movs	r0, #0
    383e:	494c      	ldr	r1, [pc, #304]	; (3970 <_dtoa_r+0x600>)
    3840:	f7fd ff94 	bl	176c <__aeabi_ddiv>
    3844:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    3848:	f7fd fcae 	bl	11a8 <__aeabi_dsub>
    384c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    3850:	9d05      	ldr	r5, [sp, #20]
    3852:	4659      	mov	r1, fp
    3854:	4650      	mov	r0, sl
    3856:	f7fe f871 	bl	193c <__aeabi_d2iz>
    385a:	4607      	mov	r7, r0
    385c:	f7fd fdf2 	bl	1444 <__aeabi_i2d>
    3860:	4602      	mov	r2, r0
    3862:	460b      	mov	r3, r1
    3864:	4650      	mov	r0, sl
    3866:	4659      	mov	r1, fp
    3868:	f7fd fc9e 	bl	11a8 <__aeabi_dsub>
    386c:	3730      	adds	r7, #48	; 0x30
    386e:	f805 7b01 	strb.w	r7, [r5], #1
    3872:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    3876:	4682      	mov	sl, r0
    3878:	468b      	mov	fp, r1
    387a:	f7fe facd 	bl	1e18 <__aeabi_dcmplt>
    387e:	2800      	cmp	r0, #0
    3880:	d160      	bne.n	3944 <_dtoa_r+0x5d4>
    3882:	4652      	mov	r2, sl
    3884:	465b      	mov	r3, fp
    3886:	2000      	movs	r0, #0
    3888:	4935      	ldr	r1, [pc, #212]	; (3960 <_dtoa_r+0x5f0>)
    388a:	f7fd fc8d 	bl	11a8 <__aeabi_dsub>
    388e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    3892:	f7fe fac1 	bl	1e18 <__aeabi_dcmplt>
    3896:	2800      	cmp	r0, #0
    3898:	f040 80b6 	bne.w	3a08 <_dtoa_r+0x698>
    389c:	42a5      	cmp	r5, r4
    389e:	d080      	beq.n	37a2 <_dtoa_r+0x432>
    38a0:	2200      	movs	r2, #0
    38a2:	4b30      	ldr	r3, [pc, #192]	; (3964 <_dtoa_r+0x5f4>)
    38a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    38a8:	f7fd fe36 	bl	1518 <__aeabi_dmul>
    38ac:	2200      	movs	r2, #0
    38ae:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    38b2:	4b2c      	ldr	r3, [pc, #176]	; (3964 <_dtoa_r+0x5f4>)
    38b4:	4650      	mov	r0, sl
    38b6:	4659      	mov	r1, fp
    38b8:	f7fd fe2e 	bl	1518 <__aeabi_dmul>
    38bc:	4682      	mov	sl, r0
    38be:	468b      	mov	fp, r1
    38c0:	e7c7      	b.n	3852 <_dtoa_r+0x4e2>
    38c2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    38c6:	f7fd fe27 	bl	1518 <__aeabi_dmul>
    38ca:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    38ce:	9f05      	ldr	r7, [sp, #20]
    38d0:	4625      	mov	r5, r4
    38d2:	4659      	mov	r1, fp
    38d4:	4650      	mov	r0, sl
    38d6:	f7fe f831 	bl	193c <__aeabi_d2iz>
    38da:	9013      	str	r0, [sp, #76]	; 0x4c
    38dc:	f7fd fdb2 	bl	1444 <__aeabi_i2d>
    38e0:	4602      	mov	r2, r0
    38e2:	460b      	mov	r3, r1
    38e4:	4650      	mov	r0, sl
    38e6:	4659      	mov	r1, fp
    38e8:	f7fd fc5e 	bl	11a8 <__aeabi_dsub>
    38ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    38ee:	3330      	adds	r3, #48	; 0x30
    38f0:	f807 3b01 	strb.w	r3, [r7], #1
    38f4:	42a7      	cmp	r7, r4
    38f6:	4682      	mov	sl, r0
    38f8:	468b      	mov	fp, r1
    38fa:	f04f 0200 	mov.w	r2, #0
    38fe:	d125      	bne.n	394c <_dtoa_r+0x5dc>
    3900:	4b1b      	ldr	r3, [pc, #108]	; (3970 <_dtoa_r+0x600>)
    3902:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    3906:	f7fd fc51 	bl	11ac <__adddf3>
    390a:	4602      	mov	r2, r0
    390c:	460b      	mov	r3, r1
    390e:	4650      	mov	r0, sl
    3910:	4659      	mov	r1, fp
    3912:	f7fe fa9f 	bl	1e54 <__aeabi_dcmpgt>
    3916:	2800      	cmp	r0, #0
    3918:	d176      	bne.n	3a08 <_dtoa_r+0x698>
    391a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    391e:	2000      	movs	r0, #0
    3920:	4913      	ldr	r1, [pc, #76]	; (3970 <_dtoa_r+0x600>)
    3922:	f7fd fc41 	bl	11a8 <__aeabi_dsub>
    3926:	4602      	mov	r2, r0
    3928:	460b      	mov	r3, r1
    392a:	4650      	mov	r0, sl
    392c:	4659      	mov	r1, fp
    392e:	f7fe fa73 	bl	1e18 <__aeabi_dcmplt>
    3932:	2800      	cmp	r0, #0
    3934:	f43f af35 	beq.w	37a2 <_dtoa_r+0x432>
    3938:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    393c:	2b30      	cmp	r3, #48	; 0x30
    393e:	f105 32ff 	add.w	r2, r5, #4294967295
    3942:	d001      	beq.n	3948 <_dtoa_r+0x5d8>
    3944:	46b1      	mov	r9, r6
    3946:	e04e      	b.n	39e6 <_dtoa_r+0x676>
    3948:	4615      	mov	r5, r2
    394a:	e7f5      	b.n	3938 <_dtoa_r+0x5c8>
    394c:	4b05      	ldr	r3, [pc, #20]	; (3964 <_dtoa_r+0x5f4>)
    394e:	f7fd fde3 	bl	1518 <__aeabi_dmul>
    3952:	4682      	mov	sl, r0
    3954:	468b      	mov	fp, r1
    3956:	e7bc      	b.n	38d2 <_dtoa_r+0x562>
    3958:	0002e860 	.word	0x0002e860
    395c:	0002e838 	.word	0x0002e838
    3960:	3ff00000 	.word	0x3ff00000
    3964:	40240000 	.word	0x40240000
    3968:	401c0000 	.word	0x401c0000
    396c:	40140000 	.word	0x40140000
    3970:	3fe00000 	.word	0x3fe00000
    3974:	465f      	mov	r7, fp
    3976:	9d05      	ldr	r5, [sp, #20]
    3978:	f8df b54c 	ldr.w	fp, [pc, #1356]	; 3ec8 <_dtoa_r+0xb58>
    397c:	4656      	mov	r6, sl
    397e:	f04f 0a00 	mov.w	sl, #0
    3982:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    3986:	4630      	mov	r0, r6
    3988:	4639      	mov	r1, r7
    398a:	f7fd feef 	bl	176c <__aeabi_ddiv>
    398e:	f7fd ffd5 	bl	193c <__aeabi_d2iz>
    3992:	4604      	mov	r4, r0
    3994:	f7fd fd56 	bl	1444 <__aeabi_i2d>
    3998:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    399c:	f7fd fdbc 	bl	1518 <__aeabi_dmul>
    39a0:	4602      	mov	r2, r0
    39a2:	460b      	mov	r3, r1
    39a4:	4630      	mov	r0, r6
    39a6:	4639      	mov	r1, r7
    39a8:	f104 0630 	add.w	r6, r4, #48	; 0x30
    39ac:	f7fd fbfc 	bl	11a8 <__aeabi_dsub>
    39b0:	f805 6b01 	strb.w	r6, [r5], #1
    39b4:	9e05      	ldr	r6, [sp, #20]
    39b6:	9f04      	ldr	r7, [sp, #16]
    39b8:	1bae      	subs	r6, r5, r6
    39ba:	42b7      	cmp	r7, r6
    39bc:	4602      	mov	r2, r0
    39be:	460b      	mov	r3, r1
    39c0:	d135      	bne.n	3a2e <_dtoa_r+0x6be>
    39c2:	f7fd fbf3 	bl	11ac <__adddf3>
    39c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    39ca:	4606      	mov	r6, r0
    39cc:	460f      	mov	r7, r1
    39ce:	f7fe fa41 	bl	1e54 <__aeabi_dcmpgt>
    39d2:	b9c0      	cbnz	r0, 3a06 <_dtoa_r+0x696>
    39d4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    39d8:	4630      	mov	r0, r6
    39da:	4639      	mov	r1, r7
    39dc:	f7fe fa12 	bl	1e04 <__aeabi_dcmpeq>
    39e0:	b108      	cbz	r0, 39e6 <_dtoa_r+0x676>
    39e2:	07e3      	lsls	r3, r4, #31
    39e4:	d40f      	bmi.n	3a06 <_dtoa_r+0x696>
    39e6:	9903      	ldr	r1, [sp, #12]
    39e8:	4640      	mov	r0, r8
    39ea:	f02a f86f 	bl	2dacc <_Bfree>
    39ee:	2300      	movs	r3, #0
    39f0:	9a22      	ldr	r2, [sp, #136]	; 0x88
    39f2:	702b      	strb	r3, [r5, #0]
    39f4:	f109 0301 	add.w	r3, r9, #1
    39f8:	6013      	str	r3, [r2, #0]
    39fa:	9b24      	ldr	r3, [sp, #144]	; 0x90
    39fc:	2b00      	cmp	r3, #0
    39fe:	f43f acfb 	beq.w	33f8 <_dtoa_r+0x88>
    3a02:	601d      	str	r5, [r3, #0]
    3a04:	e4f8      	b.n	33f8 <_dtoa_r+0x88>
    3a06:	464e      	mov	r6, r9
    3a08:	f815 2c01 	ldrb.w	r2, [r5, #-1]
    3a0c:	2a39      	cmp	r2, #57	; 0x39
    3a0e:	f105 33ff 	add.w	r3, r5, #4294967295
    3a12:	d106      	bne.n	3a22 <_dtoa_r+0x6b2>
    3a14:	9a05      	ldr	r2, [sp, #20]
    3a16:	429a      	cmp	r2, r3
    3a18:	d107      	bne.n	3a2a <_dtoa_r+0x6ba>
    3a1a:	9905      	ldr	r1, [sp, #20]
    3a1c:	2230      	movs	r2, #48	; 0x30
    3a1e:	3601      	adds	r6, #1
    3a20:	700a      	strb	r2, [r1, #0]
    3a22:	781a      	ldrb	r2, [r3, #0]
    3a24:	3201      	adds	r2, #1
    3a26:	701a      	strb	r2, [r3, #0]
    3a28:	e78c      	b.n	3944 <_dtoa_r+0x5d4>
    3a2a:	461d      	mov	r5, r3
    3a2c:	e7ec      	b.n	3a08 <_dtoa_r+0x698>
    3a2e:	4652      	mov	r2, sl
    3a30:	465b      	mov	r3, fp
    3a32:	f7fd fd71 	bl	1518 <__aeabi_dmul>
    3a36:	2200      	movs	r2, #0
    3a38:	2300      	movs	r3, #0
    3a3a:	4606      	mov	r6, r0
    3a3c:	460f      	mov	r7, r1
    3a3e:	f7fe f9e1 	bl	1e04 <__aeabi_dcmpeq>
    3a42:	2800      	cmp	r0, #0
    3a44:	d09d      	beq.n	3982 <_dtoa_r+0x612>
    3a46:	e7ce      	b.n	39e6 <_dtoa_r+0x676>
    3a48:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    3a4a:	2a00      	cmp	r2, #0
    3a4c:	f000 80cc 	beq.w	3be8 <_dtoa_r+0x878>
    3a50:	9a20      	ldr	r2, [sp, #128]	; 0x80
    3a52:	2a01      	cmp	r2, #1
    3a54:	f300 80ae 	bgt.w	3bb4 <_dtoa_r+0x844>
    3a58:	9a12      	ldr	r2, [sp, #72]	; 0x48
    3a5a:	2a00      	cmp	r2, #0
    3a5c:	f000 80a6 	beq.w	3bac <_dtoa_r+0x83c>
    3a60:	f203 4333 	addw	r3, r3, #1075	; 0x433
    3a64:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    3a66:	9d08      	ldr	r5, [sp, #32]
    3a68:	9a08      	ldr	r2, [sp, #32]
    3a6a:	441a      	add	r2, r3
    3a6c:	9208      	str	r2, [sp, #32]
    3a6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3a70:	2101      	movs	r1, #1
    3a72:	441a      	add	r2, r3
    3a74:	4640      	mov	r0, r8
    3a76:	9209      	str	r2, [sp, #36]	; 0x24
    3a78:	f02a f8ca 	bl	2dc10 <__i2b>
    3a7c:	4606      	mov	r6, r0
    3a7e:	2d00      	cmp	r5, #0
    3a80:	dd0c      	ble.n	3a9c <_dtoa_r+0x72c>
    3a82:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3a84:	2b00      	cmp	r3, #0
    3a86:	dd09      	ble.n	3a9c <_dtoa_r+0x72c>
    3a88:	42ab      	cmp	r3, r5
    3a8a:	9a08      	ldr	r2, [sp, #32]
    3a8c:	bfa8      	it	ge
    3a8e:	462b      	movge	r3, r5
    3a90:	1ad2      	subs	r2, r2, r3
    3a92:	9208      	str	r2, [sp, #32]
    3a94:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3a96:	1aed      	subs	r5, r5, r3
    3a98:	1ad3      	subs	r3, r2, r3
    3a9a:	9309      	str	r3, [sp, #36]	; 0x24
    3a9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3a9e:	b1f3      	cbz	r3, 3ade <_dtoa_r+0x76e>
    3aa0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3aa2:	2b00      	cmp	r3, #0
    3aa4:	f000 80a4 	beq.w	3bf0 <_dtoa_r+0x880>
    3aa8:	2c00      	cmp	r4, #0
    3aaa:	dd10      	ble.n	3ace <_dtoa_r+0x75e>
    3aac:	4631      	mov	r1, r6
    3aae:	4622      	mov	r2, r4
    3ab0:	4640      	mov	r0, r8
    3ab2:	f022 fccb 	bl	2644c <__pow5mult>
    3ab6:	9a03      	ldr	r2, [sp, #12]
    3ab8:	4601      	mov	r1, r0
    3aba:	4606      	mov	r6, r0
    3abc:	4640      	mov	r0, r8
    3abe:	f02a f8b0 	bl	2dc22 <__multiply>
    3ac2:	9903      	ldr	r1, [sp, #12]
    3ac4:	4607      	mov	r7, r0
    3ac6:	4640      	mov	r0, r8
    3ac8:	f02a f800 	bl	2dacc <_Bfree>
    3acc:	9703      	str	r7, [sp, #12]
    3ace:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3ad0:	1b1a      	subs	r2, r3, r4
    3ad2:	d004      	beq.n	3ade <_dtoa_r+0x76e>
    3ad4:	9903      	ldr	r1, [sp, #12]
    3ad6:	4640      	mov	r0, r8
    3ad8:	f022 fcb8 	bl	2644c <__pow5mult>
    3adc:	9003      	str	r0, [sp, #12]
    3ade:	2101      	movs	r1, #1
    3ae0:	4640      	mov	r0, r8
    3ae2:	f02a f895 	bl	2dc10 <__i2b>
    3ae6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3ae8:	2b00      	cmp	r3, #0
    3aea:	4604      	mov	r4, r0
    3aec:	f340 8082 	ble.w	3bf4 <_dtoa_r+0x884>
    3af0:	461a      	mov	r2, r3
    3af2:	4601      	mov	r1, r0
    3af4:	4640      	mov	r0, r8
    3af6:	f022 fca9 	bl	2644c <__pow5mult>
    3afa:	9b20      	ldr	r3, [sp, #128]	; 0x80
    3afc:	2b01      	cmp	r3, #1
    3afe:	4604      	mov	r4, r0
    3b00:	dd7b      	ble.n	3bfa <_dtoa_r+0x88a>
    3b02:	2700      	movs	r7, #0
    3b04:	6923      	ldr	r3, [r4, #16]
    3b06:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    3b0a:	6918      	ldr	r0, [r3, #16]
    3b0c:	f02a f830 	bl	2db70 <__hi0bits>
    3b10:	f1c0 0020 	rsb	r0, r0, #32
    3b14:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3b16:	4418      	add	r0, r3
    3b18:	f010 001f 	ands.w	r0, r0, #31
    3b1c:	f000 808b 	beq.w	3c36 <_dtoa_r+0x8c6>
    3b20:	f1c0 0320 	rsb	r3, r0, #32
    3b24:	2b04      	cmp	r3, #4
    3b26:	f340 8084 	ble.w	3c32 <_dtoa_r+0x8c2>
    3b2a:	f1c0 001c 	rsb	r0, r0, #28
    3b2e:	9b08      	ldr	r3, [sp, #32]
    3b30:	4403      	add	r3, r0
    3b32:	9308      	str	r3, [sp, #32]
    3b34:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3b36:	4403      	add	r3, r0
    3b38:	4405      	add	r5, r0
    3b3a:	9309      	str	r3, [sp, #36]	; 0x24
    3b3c:	9b08      	ldr	r3, [sp, #32]
    3b3e:	2b00      	cmp	r3, #0
    3b40:	dd05      	ble.n	3b4e <_dtoa_r+0x7de>
    3b42:	461a      	mov	r2, r3
    3b44:	9903      	ldr	r1, [sp, #12]
    3b46:	4640      	mov	r0, r8
    3b48:	f02a f8fb 	bl	2dd42 <__lshift>
    3b4c:	9003      	str	r0, [sp, #12]
    3b4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3b50:	2b00      	cmp	r3, #0
    3b52:	dd05      	ble.n	3b60 <_dtoa_r+0x7f0>
    3b54:	4621      	mov	r1, r4
    3b56:	461a      	mov	r2, r3
    3b58:	4640      	mov	r0, r8
    3b5a:	f02a f8f2 	bl	2dd42 <__lshift>
    3b5e:	4604      	mov	r4, r0
    3b60:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3b62:	2b00      	cmp	r3, #0
    3b64:	d069      	beq.n	3c3a <_dtoa_r+0x8ca>
    3b66:	4621      	mov	r1, r4
    3b68:	9803      	ldr	r0, [sp, #12]
    3b6a:	f02a f93d 	bl	2dde8 <__mcmp>
    3b6e:	2800      	cmp	r0, #0
    3b70:	da63      	bge.n	3c3a <_dtoa_r+0x8ca>
    3b72:	2300      	movs	r3, #0
    3b74:	220a      	movs	r2, #10
    3b76:	9903      	ldr	r1, [sp, #12]
    3b78:	4640      	mov	r0, r8
    3b7a:	f029 ffbe 	bl	2dafa <__multadd>
    3b7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3b80:	9003      	str	r0, [sp, #12]
    3b82:	f109 39ff 	add.w	r9, r9, #4294967295
    3b86:	2b00      	cmp	r3, #0
    3b88:	f000 8192 	beq.w	3eb0 <_dtoa_r+0xb40>
    3b8c:	2300      	movs	r3, #0
    3b8e:	4631      	mov	r1, r6
    3b90:	220a      	movs	r2, #10
    3b92:	4640      	mov	r0, r8
    3b94:	f029 ffb1 	bl	2dafa <__multadd>
    3b98:	9b06      	ldr	r3, [sp, #24]
    3b9a:	2b00      	cmp	r3, #0
    3b9c:	4606      	mov	r6, r0
    3b9e:	f300 8087 	bgt.w	3cb0 <_dtoa_r+0x940>
    3ba2:	9b20      	ldr	r3, [sp, #128]	; 0x80
    3ba4:	2b02      	cmp	r3, #2
    3ba6:	f340 8083 	ble.w	3cb0 <_dtoa_r+0x940>
    3baa:	e04e      	b.n	3c4a <_dtoa_r+0x8da>
    3bac:	9b14      	ldr	r3, [sp, #80]	; 0x50
    3bae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    3bb2:	e757      	b.n	3a64 <_dtoa_r+0x6f4>
    3bb4:	9b04      	ldr	r3, [sp, #16]
    3bb6:	1e5c      	subs	r4, r3, #1
    3bb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3bba:	42a3      	cmp	r3, r4
    3bbc:	bfbf      	itttt	lt
    3bbe:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
    3bc0:	940a      	strlt	r4, [sp, #40]	; 0x28
    3bc2:	1ae2      	sublt	r2, r4, r3
    3bc4:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
    3bc6:	bfb6      	itet	lt
    3bc8:	189b      	addlt	r3, r3, r2
    3bca:	1b1c      	subge	r4, r3, r4
    3bcc:	9310      	strlt	r3, [sp, #64]	; 0x40
    3bce:	9b04      	ldr	r3, [sp, #16]
    3bd0:	bfb8      	it	lt
    3bd2:	2400      	movlt	r4, #0
    3bd4:	2b00      	cmp	r3, #0
    3bd6:	bfb9      	ittee	lt
    3bd8:	9b08      	ldrlt	r3, [sp, #32]
    3bda:	9a04      	ldrlt	r2, [sp, #16]
    3bdc:	9d08      	ldrge	r5, [sp, #32]
    3bde:	9b04      	ldrge	r3, [sp, #16]
    3be0:	bfbc      	itt	lt
    3be2:	1a9d      	sublt	r5, r3, r2
    3be4:	2300      	movlt	r3, #0
    3be6:	e73f      	b.n	3a68 <_dtoa_r+0x6f8>
    3be8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    3bea:	9d08      	ldr	r5, [sp, #32]
    3bec:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    3bee:	e746      	b.n	3a7e <_dtoa_r+0x70e>
    3bf0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3bf2:	e76f      	b.n	3ad4 <_dtoa_r+0x764>
    3bf4:	9b20      	ldr	r3, [sp, #128]	; 0x80
    3bf6:	2b01      	cmp	r3, #1
    3bf8:	dc17      	bgt.n	3c2a <_dtoa_r+0x8ba>
    3bfa:	f1ba 0f00 	cmp.w	sl, #0
    3bfe:	d114      	bne.n	3c2a <_dtoa_r+0x8ba>
    3c00:	f3cb 0313 	ubfx	r3, fp, #0, #20
    3c04:	b99b      	cbnz	r3, 3c2e <_dtoa_r+0x8be>
    3c06:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
    3c0a:	0d3f      	lsrs	r7, r7, #20
    3c0c:	053f      	lsls	r7, r7, #20
    3c0e:	b137      	cbz	r7, 3c1e <_dtoa_r+0x8ae>
    3c10:	9b08      	ldr	r3, [sp, #32]
    3c12:	3301      	adds	r3, #1
    3c14:	9308      	str	r3, [sp, #32]
    3c16:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3c18:	3301      	adds	r3, #1
    3c1a:	9309      	str	r3, [sp, #36]	; 0x24
    3c1c:	2701      	movs	r7, #1
    3c1e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3c20:	2b00      	cmp	r3, #0
    3c22:	f47f af6f 	bne.w	3b04 <_dtoa_r+0x794>
    3c26:	2001      	movs	r0, #1
    3c28:	e774      	b.n	3b14 <_dtoa_r+0x7a4>
    3c2a:	2700      	movs	r7, #0
    3c2c:	e7f7      	b.n	3c1e <_dtoa_r+0x8ae>
    3c2e:	4657      	mov	r7, sl
    3c30:	e7f5      	b.n	3c1e <_dtoa_r+0x8ae>
    3c32:	d083      	beq.n	3b3c <_dtoa_r+0x7cc>
    3c34:	4618      	mov	r0, r3
    3c36:	301c      	adds	r0, #28
    3c38:	e779      	b.n	3b2e <_dtoa_r+0x7be>
    3c3a:	9b04      	ldr	r3, [sp, #16]
    3c3c:	2b00      	cmp	r3, #0
    3c3e:	dc31      	bgt.n	3ca4 <_dtoa_r+0x934>
    3c40:	9b20      	ldr	r3, [sp, #128]	; 0x80
    3c42:	2b02      	cmp	r3, #2
    3c44:	dd2e      	ble.n	3ca4 <_dtoa_r+0x934>
    3c46:	9b04      	ldr	r3, [sp, #16]
    3c48:	9306      	str	r3, [sp, #24]
    3c4a:	9b06      	ldr	r3, [sp, #24]
    3c4c:	b963      	cbnz	r3, 3c68 <_dtoa_r+0x8f8>
    3c4e:	4621      	mov	r1, r4
    3c50:	2205      	movs	r2, #5
    3c52:	4640      	mov	r0, r8
    3c54:	f029 ff51 	bl	2dafa <__multadd>
    3c58:	4601      	mov	r1, r0
    3c5a:	4604      	mov	r4, r0
    3c5c:	9803      	ldr	r0, [sp, #12]
    3c5e:	f02a f8c3 	bl	2dde8 <__mcmp>
    3c62:	2800      	cmp	r0, #0
    3c64:	f73f adc7 	bgt.w	37f6 <_dtoa_r+0x486>
    3c68:	9b21      	ldr	r3, [sp, #132]	; 0x84
    3c6a:	9d05      	ldr	r5, [sp, #20]
    3c6c:	ea6f 0903 	mvn.w	r9, r3
    3c70:	2700      	movs	r7, #0
    3c72:	4621      	mov	r1, r4
    3c74:	4640      	mov	r0, r8
    3c76:	f029 ff29 	bl	2dacc <_Bfree>
    3c7a:	2e00      	cmp	r6, #0
    3c7c:	f43f aeb3 	beq.w	39e6 <_dtoa_r+0x676>
    3c80:	b12f      	cbz	r7, 3c8e <_dtoa_r+0x91e>
    3c82:	42b7      	cmp	r7, r6
    3c84:	d003      	beq.n	3c8e <_dtoa_r+0x91e>
    3c86:	4639      	mov	r1, r7
    3c88:	4640      	mov	r0, r8
    3c8a:	f029 ff1f 	bl	2dacc <_Bfree>
    3c8e:	4631      	mov	r1, r6
    3c90:	4640      	mov	r0, r8
    3c92:	f029 ff1b 	bl	2dacc <_Bfree>
    3c96:	e6a6      	b.n	39e6 <_dtoa_r+0x676>
    3c98:	2400      	movs	r4, #0
    3c9a:	4626      	mov	r6, r4
    3c9c:	e7e4      	b.n	3c68 <_dtoa_r+0x8f8>
    3c9e:	46b1      	mov	r9, r6
    3ca0:	4626      	mov	r6, r4
    3ca2:	e5a8      	b.n	37f6 <_dtoa_r+0x486>
    3ca4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3ca6:	2b00      	cmp	r3, #0
    3ca8:	f000 80bc 	beq.w	3e24 <_dtoa_r+0xab4>
    3cac:	9b04      	ldr	r3, [sp, #16]
    3cae:	9306      	str	r3, [sp, #24]
    3cb0:	2d00      	cmp	r5, #0
    3cb2:	dd05      	ble.n	3cc0 <_dtoa_r+0x950>
    3cb4:	4631      	mov	r1, r6
    3cb6:	462a      	mov	r2, r5
    3cb8:	4640      	mov	r0, r8
    3cba:	f02a f842 	bl	2dd42 <__lshift>
    3cbe:	4606      	mov	r6, r0
    3cc0:	2f00      	cmp	r7, #0
    3cc2:	d052      	beq.n	3d6a <_dtoa_r+0x9fa>
    3cc4:	6871      	ldr	r1, [r6, #4]
    3cc6:	4640      	mov	r0, r8
    3cc8:	f029 fecc 	bl	2da64 <_Balloc>
    3ccc:	6932      	ldr	r2, [r6, #16]
    3cce:	3202      	adds	r2, #2
    3cd0:	4605      	mov	r5, r0
    3cd2:	0092      	lsls	r2, r2, #2
    3cd4:	f106 010c 	add.w	r1, r6, #12
    3cd8:	300c      	adds	r0, #12
    3cda:	f029 fc53 	bl	2d584 <memcpy>
    3cde:	2201      	movs	r2, #1
    3ce0:	4629      	mov	r1, r5
    3ce2:	4640      	mov	r0, r8
    3ce4:	f02a f82d 	bl	2dd42 <__lshift>
    3ce8:	9b05      	ldr	r3, [sp, #20]
    3cea:	3301      	adds	r3, #1
    3cec:	9304      	str	r3, [sp, #16]
    3cee:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
    3cf2:	4413      	add	r3, r2
    3cf4:	930a      	str	r3, [sp, #40]	; 0x28
    3cf6:	f00a 0301 	and.w	r3, sl, #1
    3cfa:	4637      	mov	r7, r6
    3cfc:	9309      	str	r3, [sp, #36]	; 0x24
    3cfe:	4606      	mov	r6, r0
    3d00:	9b04      	ldr	r3, [sp, #16]
    3d02:	9803      	ldr	r0, [sp, #12]
    3d04:	4621      	mov	r1, r4
    3d06:	f103 3aff 	add.w	sl, r3, #4294967295
    3d0a:	f029 fdeb 	bl	2d8e4 <quorem>
    3d0e:	4639      	mov	r1, r7
    3d10:	9006      	str	r0, [sp, #24]
    3d12:	f100 0b30 	add.w	fp, r0, #48	; 0x30
    3d16:	9803      	ldr	r0, [sp, #12]
    3d18:	f02a f866 	bl	2dde8 <__mcmp>
    3d1c:	4632      	mov	r2, r6
    3d1e:	9008      	str	r0, [sp, #32]
    3d20:	4621      	mov	r1, r4
    3d22:	4640      	mov	r0, r8
    3d24:	f02a f87a 	bl	2de1c <__mdiff>
    3d28:	68c2      	ldr	r2, [r0, #12]
    3d2a:	4605      	mov	r5, r0
    3d2c:	b9fa      	cbnz	r2, 3d6e <_dtoa_r+0x9fe>
    3d2e:	4601      	mov	r1, r0
    3d30:	9803      	ldr	r0, [sp, #12]
    3d32:	f02a f859 	bl	2dde8 <__mcmp>
    3d36:	4602      	mov	r2, r0
    3d38:	4629      	mov	r1, r5
    3d3a:	4640      	mov	r0, r8
    3d3c:	920b      	str	r2, [sp, #44]	; 0x2c
    3d3e:	f029 fec5 	bl	2dacc <_Bfree>
    3d42:	9b20      	ldr	r3, [sp, #128]	; 0x80
    3d44:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    3d46:	9d04      	ldr	r5, [sp, #16]
    3d48:	ea43 0102 	orr.w	r1, r3, r2
    3d4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3d4e:	430b      	orrs	r3, r1
    3d50:	d10f      	bne.n	3d72 <_dtoa_r+0xa02>
    3d52:	f1bb 0f39 	cmp.w	fp, #57	; 0x39
    3d56:	d028      	beq.n	3daa <_dtoa_r+0xa3a>
    3d58:	9b08      	ldr	r3, [sp, #32]
    3d5a:	2b00      	cmp	r3, #0
    3d5c:	dd02      	ble.n	3d64 <_dtoa_r+0x9f4>
    3d5e:	9b06      	ldr	r3, [sp, #24]
    3d60:	f103 0b31 	add.w	fp, r3, #49	; 0x31
    3d64:	f88a b000 	strb.w	fp, [sl]
    3d68:	e783      	b.n	3c72 <_dtoa_r+0x902>
    3d6a:	4630      	mov	r0, r6
    3d6c:	e7bc      	b.n	3ce8 <_dtoa_r+0x978>
    3d6e:	2201      	movs	r2, #1
    3d70:	e7e2      	b.n	3d38 <_dtoa_r+0x9c8>
    3d72:	9b08      	ldr	r3, [sp, #32]
    3d74:	2b00      	cmp	r3, #0
    3d76:	db04      	blt.n	3d82 <_dtoa_r+0xa12>
    3d78:	9920      	ldr	r1, [sp, #128]	; 0x80
    3d7a:	430b      	orrs	r3, r1
    3d7c:	9909      	ldr	r1, [sp, #36]	; 0x24
    3d7e:	430b      	orrs	r3, r1
    3d80:	d11e      	bne.n	3dc0 <_dtoa_r+0xa50>
    3d82:	2a00      	cmp	r2, #0
    3d84:	ddee      	ble.n	3d64 <_dtoa_r+0x9f4>
    3d86:	2201      	movs	r2, #1
    3d88:	9903      	ldr	r1, [sp, #12]
    3d8a:	4640      	mov	r0, r8
    3d8c:	f029 ffd9 	bl	2dd42 <__lshift>
    3d90:	4621      	mov	r1, r4
    3d92:	9003      	str	r0, [sp, #12]
    3d94:	f02a f828 	bl	2dde8 <__mcmp>
    3d98:	2800      	cmp	r0, #0
    3d9a:	dc03      	bgt.n	3da4 <_dtoa_r+0xa34>
    3d9c:	d1e2      	bne.n	3d64 <_dtoa_r+0x9f4>
    3d9e:	f01b 0f01 	tst.w	fp, #1
    3da2:	d0df      	beq.n	3d64 <_dtoa_r+0x9f4>
    3da4:	f1bb 0f39 	cmp.w	fp, #57	; 0x39
    3da8:	d1d9      	bne.n	3d5e <_dtoa_r+0x9ee>
    3daa:	2339      	movs	r3, #57	; 0x39
    3dac:	f88a 3000 	strb.w	r3, [sl]
    3db0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    3db4:	2b39      	cmp	r3, #57	; 0x39
    3db6:	f105 32ff 	add.w	r2, r5, #4294967295
    3dba:	d064      	beq.n	3e86 <_dtoa_r+0xb16>
    3dbc:	3301      	adds	r3, #1
    3dbe:	e069      	b.n	3e94 <_dtoa_r+0xb24>
    3dc0:	2a00      	cmp	r2, #0
    3dc2:	dd07      	ble.n	3dd4 <_dtoa_r+0xa64>
    3dc4:	f1bb 0f39 	cmp.w	fp, #57	; 0x39
    3dc8:	d0ef      	beq.n	3daa <_dtoa_r+0xa3a>
    3dca:	f10b 0301 	add.w	r3, fp, #1
    3dce:	f88a 3000 	strb.w	r3, [sl]
    3dd2:	e74e      	b.n	3c72 <_dtoa_r+0x902>
    3dd4:	9b04      	ldr	r3, [sp, #16]
    3dd6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3dd8:	f803 bc01 	strb.w	fp, [r3, #-1]
    3ddc:	4293      	cmp	r3, r2
    3dde:	d03a      	beq.n	3e56 <_dtoa_r+0xae6>
    3de0:	2300      	movs	r3, #0
    3de2:	220a      	movs	r2, #10
    3de4:	9903      	ldr	r1, [sp, #12]
    3de6:	4640      	mov	r0, r8
    3de8:	f029 fe87 	bl	2dafa <__multadd>
    3dec:	42b7      	cmp	r7, r6
    3dee:	9003      	str	r0, [sp, #12]
    3df0:	f04f 0300 	mov.w	r3, #0
    3df4:	f04f 020a 	mov.w	r2, #10
    3df8:	4639      	mov	r1, r7
    3dfa:	4640      	mov	r0, r8
    3dfc:	d107      	bne.n	3e0e <_dtoa_r+0xa9e>
    3dfe:	f029 fe7c 	bl	2dafa <__multadd>
    3e02:	4607      	mov	r7, r0
    3e04:	4606      	mov	r6, r0
    3e06:	9b04      	ldr	r3, [sp, #16]
    3e08:	3301      	adds	r3, #1
    3e0a:	9304      	str	r3, [sp, #16]
    3e0c:	e778      	b.n	3d00 <_dtoa_r+0x990>
    3e0e:	f029 fe74 	bl	2dafa <__multadd>
    3e12:	4631      	mov	r1, r6
    3e14:	4607      	mov	r7, r0
    3e16:	2300      	movs	r3, #0
    3e18:	220a      	movs	r2, #10
    3e1a:	4640      	mov	r0, r8
    3e1c:	f029 fe6d 	bl	2dafa <__multadd>
    3e20:	4606      	mov	r6, r0
    3e22:	e7f0      	b.n	3e06 <_dtoa_r+0xa96>
    3e24:	9b04      	ldr	r3, [sp, #16]
    3e26:	9306      	str	r3, [sp, #24]
    3e28:	9d05      	ldr	r5, [sp, #20]
    3e2a:	9803      	ldr	r0, [sp, #12]
    3e2c:	4621      	mov	r1, r4
    3e2e:	f029 fd59 	bl	2d8e4 <quorem>
    3e32:	f100 0b30 	add.w	fp, r0, #48	; 0x30
    3e36:	9b05      	ldr	r3, [sp, #20]
    3e38:	f805 bb01 	strb.w	fp, [r5], #1
    3e3c:	1aea      	subs	r2, r5, r3
    3e3e:	9b06      	ldr	r3, [sp, #24]
    3e40:	4293      	cmp	r3, r2
    3e42:	dd07      	ble.n	3e54 <_dtoa_r+0xae4>
    3e44:	2300      	movs	r3, #0
    3e46:	220a      	movs	r2, #10
    3e48:	9903      	ldr	r1, [sp, #12]
    3e4a:	4640      	mov	r0, r8
    3e4c:	f029 fe55 	bl	2dafa <__multadd>
    3e50:	9003      	str	r0, [sp, #12]
    3e52:	e7ea      	b.n	3e2a <_dtoa_r+0xaba>
    3e54:	2700      	movs	r7, #0
    3e56:	2201      	movs	r2, #1
    3e58:	9903      	ldr	r1, [sp, #12]
    3e5a:	4640      	mov	r0, r8
    3e5c:	f029 ff71 	bl	2dd42 <__lshift>
    3e60:	4621      	mov	r1, r4
    3e62:	9003      	str	r0, [sp, #12]
    3e64:	f029 ffc0 	bl	2dde8 <__mcmp>
    3e68:	2800      	cmp	r0, #0
    3e6a:	dca1      	bgt.n	3db0 <_dtoa_r+0xa40>
    3e6c:	d102      	bne.n	3e74 <_dtoa_r+0xb04>
    3e6e:	f01b 0f01 	tst.w	fp, #1
    3e72:	d19d      	bne.n	3db0 <_dtoa_r+0xa40>
    3e74:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    3e78:	2b30      	cmp	r3, #48	; 0x30
    3e7a:	f105 32ff 	add.w	r2, r5, #4294967295
    3e7e:	f47f aef8 	bne.w	3c72 <_dtoa_r+0x902>
    3e82:	4615      	mov	r5, r2
    3e84:	e7f6      	b.n	3e74 <_dtoa_r+0xb04>
    3e86:	9b05      	ldr	r3, [sp, #20]
    3e88:	4293      	cmp	r3, r2
    3e8a:	d105      	bne.n	3e98 <_dtoa_r+0xb28>
    3e8c:	9a05      	ldr	r2, [sp, #20]
    3e8e:	f109 0901 	add.w	r9, r9, #1
    3e92:	2331      	movs	r3, #49	; 0x31
    3e94:	7013      	strb	r3, [r2, #0]
    3e96:	e6ec      	b.n	3c72 <_dtoa_r+0x902>
    3e98:	4615      	mov	r5, r2
    3e9a:	e789      	b.n	3db0 <_dtoa_r+0xa40>
    3e9c:	4b08      	ldr	r3, [pc, #32]	; (3ec0 <_dtoa_r+0xb50>)
    3e9e:	f7ff bac8 	b.w	3432 <_dtoa_r+0xc2>
    3ea2:	9b24      	ldr	r3, [sp, #144]	; 0x90
    3ea4:	2b00      	cmp	r3, #0
    3ea6:	f47f aaa2 	bne.w	33ee <_dtoa_r+0x7e>
    3eaa:	4b06      	ldr	r3, [pc, #24]	; (3ec4 <_dtoa_r+0xb54>)
    3eac:	f7ff bac1 	b.w	3432 <_dtoa_r+0xc2>
    3eb0:	9b06      	ldr	r3, [sp, #24]
    3eb2:	2b00      	cmp	r3, #0
    3eb4:	dcb8      	bgt.n	3e28 <_dtoa_r+0xab8>
    3eb6:	9b20      	ldr	r3, [sp, #128]	; 0x80
    3eb8:	2b02      	cmp	r3, #2
    3eba:	f73f aec6 	bgt.w	3c4a <_dtoa_r+0x8da>
    3ebe:	e7b3      	b.n	3e28 <_dtoa_r+0xab8>
    3ec0:	0002fb51 	.word	0x0002fb51
    3ec4:	00035e43 	.word	0x00035e43
    3ec8:	40240000 	.word	0x40240000

00003ecc <prov_complete>:

static bool initialized=false; // Flag if the Stack is initialized

static void prov_complete(uint16_t net_idx, uint16_t src)
{
	printk("Prov complete! Addr: 0x%04x\n", src);
    3ecc:	4801      	ldr	r0, [pc, #4]	; (3ed4 <prov_complete+0x8>)
    3ece:	f023 b84e 	b.w	26f6e <printk>
    3ed2:	bf00      	nop
    3ed4:	0002f854 	.word	0x0002f854

00003ed8 <input_complete>:
	return 0;
}

static void input_complete(void)
{
	printk("Input Complete");
    3ed8:	4801      	ldr	r0, [pc, #4]	; (3ee0 <input_complete+0x8>)
    3eda:	f023 b848 	b.w	26f6e <printk>
    3ede:	bf00      	nop
    3ee0:	0002f813 	.word	0x0002f813

00003ee4 <input>:
{
    3ee4:	b508      	push	{r3, lr}
	printk("Press a button to set the right number.");
    3ee6:	4802      	ldr	r0, [pc, #8]	; (3ef0 <input+0xc>)
    3ee8:	f023 f841 	bl	26f6e <printk>
}
    3eec:	2000      	movs	r0, #0
    3eee:	bd08      	pop	{r3, pc}
    3ef0:	0002f7eb 	.word	0x0002f7eb

00003ef4 <output_string>:

	return -ENOTSUP;
}

static int output_string(const char *string)
{
    3ef4:	b508      	push	{r3, lr}
	printk("OOB String: %s\n", string);
    3ef6:	4601      	mov	r1, r0
    3ef8:	4802      	ldr	r0, [pc, #8]	; (3f04 <output_string+0x10>)
    3efa:	f023 f838 	bl	26f6e <printk>
	return 0;
}
    3efe:	2000      	movs	r0, #0
    3f00:	bd08      	pop	{r3, pc}
    3f02:	bf00      	nop
    3f04:	0002f844 	.word	0x0002f844

00003f08 <output_number>:
	if (action == BT_MESH_DISPLAY_NUMBER) {
    3f08:	2808      	cmp	r0, #8
{
    3f0a:	b508      	push	{r3, lr}
	if (action == BT_MESH_DISPLAY_NUMBER) {
    3f0c:	d104      	bne.n	3f18 <output_number+0x10>
		printk("OOB Number: %u\n", number);
    3f0e:	4806      	ldr	r0, [pc, #24]	; (3f28 <output_number+0x20>)
		printk("Blinking %u times", number);
    3f10:	f023 f82d 	bl	26f6e <printk>
		return 0;
    3f14:	2000      	movs	r0, #0
}
    3f16:	bd08      	pop	{r3, pc}
	if (action == BT_MESH_BLINK) {
    3f18:	2801      	cmp	r0, #1
    3f1a:	d101      	bne.n	3f20 <output_number+0x18>
		printk("Blinking %u times", number);
    3f1c:	4803      	ldr	r0, [pc, #12]	; (3f2c <output_number+0x24>)
    3f1e:	e7f7      	b.n	3f10 <output_number+0x8>
	return -ENOTSUP;
    3f20:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3f24:	e7f7      	b.n	3f16 <output_number+0xe>
    3f26:	bf00      	nop
    3f28:	0002f822 	.word	0x0002f822
    3f2c:	0002f832 	.word	0x0002f832

00003f30 <bt_ready>:
	.input_complete = input_complete,
	.reset = prov_reset
	};

// Init the rest while Bluetooth is enabled
static void bt_ready(int err){
    3f30:	b510      	push	{r4, lr}

	/* --------------- Init Mesh ------------*/
	printk("Init Mesh...\n");
    3f32:	4822      	ldr	r0, [pc, #136]	; (3fbc <bt_ready+0x8c>)
    3f34:	f023 f81b 	bl	26f6e <printk>
	if (z_syscall_trap()) {
		return (ssize_t) arch_syscall_invoke2(*(uintptr_t *)&buffer, *(uintptr_t *)&length, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
    3f38:	4c21      	ldr	r4, [pc, #132]	; (3fc0 <bt_ready+0x90>)
    3f3a:	2110      	movs	r1, #16
    3f3c:	4620      	mov	r0, r4
    3f3e:	f023 fd69 	bl	27a14 <z_impl_hwinfo_get_device_id>
	
	hwinfo_get_device_id(dev_uuid, sizeof(dev_uuid));
	// Do catch for nrf53 -> no HWINFO set (0xFFFF)
	if (dev_uuid[0] == 0xFF && dev_uuid[1] == 0xFF && dev_uuid[5] == 0xFF){
    3f42:	7862      	ldrb	r2, [r4, #1]
    3f44:	7823      	ldrb	r3, [r4, #0]
    3f46:	4013      	ands	r3, r2
    3f48:	7962      	ldrb	r2, [r4, #5]
    3f4a:	4013      	ands	r3, r2
    3f4c:	2bff      	cmp	r3, #255	; 0xff
    3f4e:	d10d      	bne.n	3f6c <bt_ready+0x3c>
		uint8_t *p0 = (uint8_t*)&NRF_FICR->DEVICEADDR[0]; // Use MAC Address for UUID
		dev_uuid[0] = p0[0];
    3f50:	4b1c      	ldr	r3, [pc, #112]	; (3fc4 <bt_ready+0x94>)
    3f52:	781a      	ldrb	r2, [r3, #0]
    3f54:	7022      	strb	r2, [r4, #0]
		dev_uuid[1] = p0[1];
    3f56:	785a      	ldrb	r2, [r3, #1]
    3f58:	7062      	strb	r2, [r4, #1]
		dev_uuid[2] = p0[2];
    3f5a:	789a      	ldrb	r2, [r3, #2]
    3f5c:	70a2      	strb	r2, [r4, #2]
		dev_uuid[3] = p0[3];
    3f5e:	78db      	ldrb	r3, [r3, #3]
    3f60:	70e3      	strb	r3, [r4, #3]
		uint8_t *p1 = (uint8_t*)&NRF_FICR->DEVICEADDR[1]; // Use MAC Address for UUID
		dev_uuid[4] = p1[0];
    3f62:	4b19      	ldr	r3, [pc, #100]	; (3fc8 <bt_ready+0x98>)
    3f64:	781a      	ldrb	r2, [r3, #0]
    3f66:	7122      	strb	r2, [r4, #4]
		dev_uuid[5] = p1[1];
    3f68:	785b      	ldrb	r3, [r3, #1]
    3f6a:	7163      	strb	r3, [r4, #5]
	}

	err = bt_mesh_init(&prov, bm_blemesh_model_handler_init());
    3f6c:	f000 f8f0 	bl	4150 <bm_blemesh_model_handler_init>
    3f70:	4601      	mov	r1, r0
    3f72:	4816      	ldr	r0, [pc, #88]	; (3fcc <bt_ready+0x9c>)
    3f74:	f026 f97b 	bl	2a26e <bt_mesh_init>
	if (err)
    3f78:	4601      	mov	r1, r0
    3f7a:	b120      	cbz	r0, 3f86 <bt_ready+0x56>
	{
		printk("Initializing mesh failed (err %d)\n", err);
    3f7c:	4814      	ldr	r0, [pc, #80]	; (3fd0 <bt_ready+0xa0>)
		printk("Provisioning completed\n");
	}
	/* ===================================*/

	initialized = true;
}
    3f7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Provisioning failed (err %d)\n", err);
    3f82:	f022 bff4 	b.w	26f6e <printk>
	printk("Mesh initialized\n");
    3f86:	4813      	ldr	r0, [pc, #76]	; (3fd4 <bt_ready+0xa4>)
    3f88:	f022 fff1 	bl	26f6e <printk>
	printk("Provisioning...\n");
    3f8c:	4812      	ldr	r0, [pc, #72]	; (3fd8 <bt_ready+0xa8>)
    3f8e:	f022 ffee 	bl	26f6e <printk>
		settings_load();
    3f92:	f023 fbf2 	bl	2777a <settings_load>
	err = bt_mesh_prov_enable(BT_MESH_PROV_ADV | BT_MESH_PROV_GATT);
    3f96:	2003      	movs	r0, #3
    3f98:	f012 fb72 	bl	16680 <bt_mesh_prov_enable>
	if (err == -EALREADY)
    3f9c:	f110 0f78 	cmn.w	r0, #120	; 0x78
	err = bt_mesh_prov_enable(BT_MESH_PROV_ADV | BT_MESH_PROV_GATT);
    3fa0:	4601      	mov	r1, r0
	if (err == -EALREADY)
    3fa2:	d106      	bne.n	3fb2 <bt_ready+0x82>
		printk("Already Provisioned (Restored Settings)\n");
    3fa4:	480d      	ldr	r0, [pc, #52]	; (3fdc <bt_ready+0xac>)
		printk("Provisioning completed\n");
    3fa6:	f022 ffe2 	bl	26f6e <printk>
	initialized = true;
    3faa:	4b0d      	ldr	r3, [pc, #52]	; (3fe0 <bt_ready+0xb0>)
    3fac:	2201      	movs	r2, #1
    3fae:	701a      	strb	r2, [r3, #0]
}
    3fb0:	bd10      	pop	{r4, pc}
	else if (err)
    3fb2:	b108      	cbz	r0, 3fb8 <bt_ready+0x88>
		printk("Provisioning failed (err %d)\n", err);
    3fb4:	480b      	ldr	r0, [pc, #44]	; (3fe4 <bt_ready+0xb4>)
    3fb6:	e7e2      	b.n	3f7e <bt_ready+0x4e>
		printk("Provisioning completed\n");
    3fb8:	480b      	ldr	r0, [pc, #44]	; (3fe8 <bt_ready+0xb8>)
    3fba:	e7f4      	b.n	3fa6 <bt_ready+0x76>
    3fbc:	0002f738 	.word	0x0002f738
    3fc0:	200046cc 	.word	0x200046cc
    3fc4:	100000a4 	.word	0x100000a4
    3fc8:	100000a8 	.word	0x100000a8
    3fcc:	20000490 	.word	0x20000490
    3fd0:	0002f746 	.word	0x0002f746
    3fd4:	0002f769 	.word	0x0002f769
    3fd8:	0002f77b 	.word	0x0002f77b
    3fdc:	0002f78c 	.word	0x0002f78c
    3fe0:	200046dc 	.word	0x200046dc
    3fe4:	0002f7b5 	.word	0x0002f7b5
    3fe8:	0002f7d3 	.word	0x0002f7d3

00003fec <bm_blemesh_enable>:

void bm_blemesh_enable(void)
{
    3fec:	b538      	push	{r3, r4, r5, lr}
	int err;

	/* ---------- Init Bluetooth ---------- */
	printk("Enabling Bluetooth...\n");
    3fee:	480f      	ldr	r0, [pc, #60]	; (402c <bm_blemesh_enable+0x40>)
	err = bt_enable(bt_ready);
	while (initialized == false){
    3ff0:	4d0f      	ldr	r5, [pc, #60]	; (4030 <bm_blemesh_enable+0x44>)
	printk("Enabling Bluetooth...\n");
    3ff2:	f022 ffbc 	bl	26f6e <printk>
	err = bt_enable(bt_ready);
    3ff6:	480f      	ldr	r0, [pc, #60]	; (4034 <bm_blemesh_enable+0x48>)
    3ff8:	f005 fadc 	bl	95b4 <bt_enable>
    3ffc:	4604      	mov	r4, r0
	while (initialized == false){
    3ffe:	782b      	ldrb	r3, [r5, #0]
    4000:	b133      	cbz	r3, 4010 <bm_blemesh_enable+0x24>
		k_sleep(K_MSEC(10));
	}
	if (err)
    4002:	b15c      	cbz	r4, 401c <bm_blemesh_enable+0x30>
	{
		printk("Bluetooth init failed (err %d)\n", err);
    4004:	4621      	mov	r1, r4
    4006:	480c      	ldr	r0, [pc, #48]	; (4038 <bm_blemesh_enable+0x4c>)

	//bt_mesh_lpn_set(true); // Enable Low Power Node

	//bm_led0_set(true); // Signal that the Configuring was sucessfull
	/* ===================================*/	
}
    4008:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		printk("Bluetooth init failed (err %d)\n", err);
    400c:	f022 bfaf 	b.w	26f6e <printk>
	return z_impl_k_sleep(timeout);
    4010:	2100      	movs	r1, #0
    4012:	f44f 70a4 	mov.w	r0, #328	; 0x148
    4016:	f01f fbff 	bl	23818 <z_impl_k_sleep>
    401a:	e7f0      	b.n	3ffe <bm_blemesh_enable+0x12>
	printk("Bluetooth initialized\n");
    401c:	4807      	ldr	r0, [pc, #28]	; (403c <bm_blemesh_enable+0x50>)
    401e:	f022 ffa6 	bl	26f6e <printk>
	printk("Configuring done\n");
    4022:	4807      	ldr	r0, [pc, #28]	; (4040 <bm_blemesh_enable+0x54>)
}
    4024:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	printk("Configuring done\n");
    4028:	f022 bfa1 	b.w	26f6e <printk>
    402c:	0002f6d8 	.word	0x0002f6d8
    4030:	200046dc 	.word	0x200046dc
    4034:	00003f31 	.word	0x00003f31
    4038:	0002f6ef 	.word	0x0002f6ef
    403c:	0002f70f 	.word	0x0002f70f
    4040:	0002f726 	.word	0x0002f726

00004044 <attention_off>:
	printk("attention_off()\n");
    4044:	4801      	ldr	r0, [pc, #4]	; (404c <attention_off+0x8>)
    4046:	f022 bf92 	b.w	26f6e <printk>
    404a:	bf00      	nop
    404c:	0002f871 	.word	0x0002f871

00004050 <attention_on>:
	printk("attention_on()\n");
    4050:	4801      	ldr	r0, [pc, #4]	; (4058 <attention_on+0x8>)
    4052:	f022 bf8c 	b.w	26f6e <printk>
    4056:	bf00      	nop
    4058:	0002f882 	.word	0x0002f882

0000405c <read_data>:
	err = svm_measure_iaq_blocking_read(&tvoc_ppb, &co2_eq_ppm,
    405c:	4b0a      	ldr	r3, [pc, #40]	; (4088 <read_data+0x2c>)
    405e:	4a0b      	ldr	r2, [pc, #44]	; (408c <read_data+0x30>)
    4060:	490b      	ldr	r1, [pc, #44]	; (4090 <read_data+0x34>)
    4062:	480c      	ldr	r0, [pc, #48]	; (4094 <read_data+0x38>)
{
    4064:	b510      	push	{r4, lr}
	err = svm_measure_iaq_blocking_read(&tvoc_ppb, &co2_eq_ppm,
    4066:	f022 fe42 	bl	26cee <svm_measure_iaq_blocking_read>
    406a:	4b0b      	ldr	r3, [pc, #44]	; (4098 <read_data+0x3c>)
    406c:	8018      	strh	r0, [r3, #0]
	if (err == STATUS_OK)
    406e:	b110      	cbz	r0, 4076 <read_data+0x1a>
		printf("error reading sensor\n");
    4070:	480a      	ldr	r0, [pc, #40]	; (409c <read_data+0x40>)
    4072:	f022 f871 	bl	26158 <iprintf>
 * @retval -EADDRINUSE Work item was submitted to a different workqueue.
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					k_timeout_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    4076:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    407a:	2300      	movs	r3, #0
    407c:	4908      	ldr	r1, [pc, #32]	; (40a0 <read_data+0x44>)
    407e:	4809      	ldr	r0, [pc, #36]	; (40a4 <read_data+0x48>)
}
    4080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4084:	f01f be88 	b.w	23d98 <k_delayed_work_submit_to_queue>
    4088:	20002548 	.word	0x20002548
    408c:	2000254c 	.word	0x2000254c
    4090:	20004680 	.word	0x20004680
    4094:	20004684 	.word	0x20004684
    4098:	20004682 	.word	0x20004682
    409c:	0002f8ad 	.word	0x0002f8ad
    40a0:	20001510 	.word	0x20001510
    40a4:	20002490 	.word	0x20002490

000040a8 <co2_eq_ppm_get>:
}

static int co2_eq_ppm_get(struct bt_mesh_sensor *sensor,
				   struct bt_mesh_msg_ctx *ctx, struct sensor_value *rsp)
{
	doubleToSensorValue((double)co2_eq_ppm, rsp);
    40a8:	4b06      	ldr	r3, [pc, #24]	; (40c4 <co2_eq_ppm_get+0x1c>)
{
    40aa:	b510      	push	{r4, lr}
	doubleToSensorValue((double)co2_eq_ppm, rsp);
    40ac:	8818      	ldrh	r0, [r3, #0]
{
    40ae:	4614      	mov	r4, r2
	doubleToSensorValue((double)co2_eq_ppm, rsp);
    40b0:	f7fd f9b8 	bl	1424 <__aeabi_ui2d>
    40b4:	4622      	mov	r2, r4
    40b6:	f7fd feff 	bl	1eb8 <doubleToSensorValue>
	return err;
}
    40ba:	4b03      	ldr	r3, [pc, #12]	; (40c8 <co2_eq_ppm_get+0x20>)
    40bc:	f9b3 0000 	ldrsh.w	r0, [r3]
    40c0:	bd10      	pop	{r4, pc}
    40c2:	bf00      	nop
    40c4:	20004680 	.word	0x20004680
    40c8:	20004682 	.word	0x20004682

000040cc <tvoc_ppb_get>:
	doubleToSensorValue((double)tvoc_ppb, rsp);
    40cc:	4b06      	ldr	r3, [pc, #24]	; (40e8 <tvoc_ppb_get+0x1c>)
{
    40ce:	b510      	push	{r4, lr}
	doubleToSensorValue((double)tvoc_ppb, rsp);
    40d0:	8818      	ldrh	r0, [r3, #0]
{
    40d2:	4614      	mov	r4, r2
	doubleToSensorValue((double)tvoc_ppb, rsp);
    40d4:	f7fd f9a6 	bl	1424 <__aeabi_ui2d>
    40d8:	4622      	mov	r2, r4
    40da:	f7fd feed 	bl	1eb8 <doubleToSensorValue>
}
    40de:	4b03      	ldr	r3, [pc, #12]	; (40ec <tvoc_ppb_get+0x20>)
    40e0:	f9b3 0000 	ldrsh.w	r0, [r3]
    40e4:	bd10      	pop	{r4, pc}
    40e6:	bf00      	nop
    40e8:	20004684 	.word	0x20004684
    40ec:	20004682 	.word	0x20004682

000040f0 <hum_get>:
	doubleToSensorValue((double)humidity / 1000, rsp);
    40f0:	4b08      	ldr	r3, [pc, #32]	; (4114 <hum_get+0x24>)
{
    40f2:	b510      	push	{r4, lr}
	doubleToSensorValue((double)humidity / 1000, rsp);
    40f4:	6818      	ldr	r0, [r3, #0]
{
    40f6:	4614      	mov	r4, r2
	doubleToSensorValue((double)humidity / 1000, rsp);
    40f8:	f7fd f9a4 	bl	1444 <__aeabi_i2d>
    40fc:	4b06      	ldr	r3, [pc, #24]	; (4118 <hum_get+0x28>)
    40fe:	2200      	movs	r2, #0
    4100:	f7fd fb34 	bl	176c <__aeabi_ddiv>
    4104:	4622      	mov	r2, r4
    4106:	f7fd fed7 	bl	1eb8 <doubleToSensorValue>
}
    410a:	4b04      	ldr	r3, [pc, #16]	; (411c <hum_get+0x2c>)
    410c:	f9b3 0000 	ldrsh.w	r0, [r3]
    4110:	bd10      	pop	{r4, pc}
    4112:	bf00      	nop
    4114:	20002548 	.word	0x20002548
    4118:	408f4000 	.word	0x408f4000
    411c:	20004682 	.word	0x20004682

00004120 <temp_get>:
	doubleToSensorValue((double)temperature / 1000, rsp);
    4120:	4b08      	ldr	r3, [pc, #32]	; (4144 <temp_get+0x24>)
{
    4122:	b510      	push	{r4, lr}
	doubleToSensorValue((double)temperature / 1000, rsp);
    4124:	6818      	ldr	r0, [r3, #0]
{
    4126:	4614      	mov	r4, r2
	doubleToSensorValue((double)temperature / 1000, rsp);
    4128:	f7fd f98c 	bl	1444 <__aeabi_i2d>
    412c:	4b06      	ldr	r3, [pc, #24]	; (4148 <temp_get+0x28>)
    412e:	2200      	movs	r2, #0
    4130:	f7fd fb1c 	bl	176c <__aeabi_ddiv>
    4134:	4622      	mov	r2, r4
    4136:	f7fd febf 	bl	1eb8 <doubleToSensorValue>
}
    413a:	4b04      	ldr	r3, [pc, #16]	; (414c <temp_get+0x2c>)
    413c:	f9b3 0000 	ldrsh.w	r0, [r3]
    4140:	bd10      	pop	{r4, pc}
    4142:	bf00      	nop
    4144:	2000254c 	.word	0x2000254c
    4148:	408f4000 	.word	0x408f4000
    414c:	20004682 	.word	0x20004682

00004150 <bm_blemesh_model_handler_init>:
	.elem = elements,
	.elem_count = ARRAY_SIZE(elements),
};

const struct bt_mesh_comp *bm_blemesh_model_handler_init(void)
{
    4150:	b510      	push	{r4, lr}
	{
		printf("Could not get SHT3XD device\n");
	}
	*/
	/* Initialize the i2c bus for the current platform */
	sensirion_i2c_init();
    4152:	f022 fd1e 	bl	26b92 <sensirion_i2c_init>
	sensirion_i2c_select_bus(0);
    4156:	2000      	movs	r0, #0
    4158:	f000 f904 	bl	4364 <sensirion_i2c_select_bus>
	err = sgp30_iaq_init();
    415c:	f022 fe33 	bl	26dc6 <sgp30_iaq_init>
    4160:	4b0b      	ldr	r3, [pc, #44]	; (4190 <bm_blemesh_model_handler_init+0x40>)
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    4162:	4c0c      	ldr	r4, [pc, #48]	; (4194 <bm_blemesh_model_handler_init+0x44>)
    4164:	8018      	strh	r0, [r3, #0]
    4166:	4601      	mov	r1, r0
	printf("Init SVM30 return code %d\n", err);
    4168:	480b      	ldr	r0, [pc, #44]	; (4198 <bm_blemesh_model_handler_init+0x48>)
    416a:	f021 fff5 	bl	26158 <iprintf>
    416e:	2230      	movs	r2, #48	; 0x30
    4170:	2100      	movs	r1, #0
    4172:	4620      	mov	r0, r4
    4174:	f029 fa41 	bl	2d5fa <memset>
    4178:	4b08      	ldr	r3, [pc, #32]	; (419c <bm_blemesh_model_handler_init+0x4c>)
    417a:	6063      	str	r3, [r4, #4]
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    417c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    4180:	2300      	movs	r3, #0
    4182:	4621      	mov	r1, r4
    4184:	4806      	ldr	r0, [pc, #24]	; (41a0 <bm_blemesh_model_handler_init+0x50>)
    4186:	f01f fe07 	bl	23d98 <k_delayed_work_submit_to_queue>
	k_delayed_work_init(&read_data_work, read_data);
	k_delayed_work_submit(&read_data_work, K_MSEC(READ_DATA_INTERVAL));

	return &comp;
}
    418a:	4806      	ldr	r0, [pc, #24]	; (41a4 <bm_blemesh_model_handler_init+0x54>)
    418c:	bd10      	pop	{r4, pc}
    418e:	bf00      	nop
    4190:	20004682 	.word	0x20004682
    4194:	20001510 	.word	0x20001510
    4198:	0002f892 	.word	0x0002f892
    419c:	0000405d 	.word	0x0000405d
    41a0:	20002490 	.word	0x20002490
    41a4:	0002e928 	.word	0x0002e928

000041a8 <gpio_pin_configure>:
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_configure(const struct device *port,
				     gpio_pin_t pin,
				     gpio_flags_t flags)
{
    41a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		 "mode to be supported");

	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
			(flags & GPIO_LINE_OPEN_DRAIN) == 0);

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) == 0
    41ac:	f412 6540 	ands.w	r5, r2, #3072	; 0xc00
{
    41b0:	4606      	mov	r6, r0
    41b2:	4688      	mov	r8, r1
    41b4:	4614      	mov	r4, r2
	const struct gpio_driver_config *const cfg =
    41b6:	f8d0 9004 	ldr.w	r9, [r0, #4]
	struct gpio_driver_data *data =
    41ba:	68c7      	ldr	r7, [r0, #12]
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) == 0
    41bc:	d00c      	beq.n	41d8 <gpio_pin_configure+0x30>
    41be:	0593      	lsls	r3, r2, #22
    41c0:	d40a      	bmi.n	41d8 <gpio_pin_configure+0x30>
    41c2:	4919      	ldr	r1, [pc, #100]	; (4228 <gpio_pin_configure+0x80>)
    41c4:	4819      	ldr	r0, [pc, #100]	; (422c <gpio_pin_configure+0x84>)
    41c6:	f240 2236 	movw	r2, #566	; 0x236
    41ca:	f022 fed0 	bl	26f6e <printk>
    41ce:	f240 2136 	movw	r1, #566	; 0x236
    41d2:	4815      	ldr	r0, [pc, #84]	; (4228 <gpio_pin_configure+0x80>)
    41d4:	f023 f944 	bl	27460 <assert_post_action>

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
		 != (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH),
		 "Output cannot be initialized low and high");

	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    41d8:	04e0      	lsls	r0, r4, #19
    41da:	d504      	bpl.n	41e6 <gpio_pin_configure+0x3e>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
    41dc:	b11d      	cbz	r5, 41e6 <gpio_pin_configure+0x3e>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    41de:	07e1      	lsls	r1, r4, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH
    41e0:	bf48      	it	mi
    41e2:	f484 54e0 	eormi.w	r4, r4, #7168	; 0x1c00
			| GPIO_OUTPUT_INIT_LOGICAL;
	}

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    41e6:	2301      	movs	r3, #1
    41e8:	fa03 f508 	lsl.w	r5, r3, r8
    41ec:	f8d9 3000 	ldr.w	r3, [r9]
    41f0:	421d      	tst	r5, r3
    41f2:	d10a      	bne.n	420a <gpio_pin_configure+0x62>
    41f4:	490c      	ldr	r1, [pc, #48]	; (4228 <gpio_pin_configure+0x80>)
    41f6:	480d      	ldr	r0, [pc, #52]	; (422c <gpio_pin_configure+0x84>)
    41f8:	f240 2245 	movw	r2, #581	; 0x245
    41fc:	f022 feb7 	bl	26f6e <printk>
    4200:	f240 2145 	movw	r1, #581	; 0x245
    4204:	4808      	ldr	r0, [pc, #32]	; (4228 <gpio_pin_configure+0x80>)
    4206:	f023 f92b 	bl	27460 <assert_post_action>
	return api->pin_configure(port, pin, flags);
    420a:	68b3      	ldr	r3, [r6, #8]
    420c:	4622      	mov	r2, r4
    420e:	681b      	ldr	r3, [r3, #0]
    4210:	4641      	mov	r1, r8
    4212:	4630      	mov	r0, r6
    4214:	4798      	blx	r3
		 "Unsupported pin");

	ret = gpio_config(port, pin, flags);
	if (ret != 0) {
    4216:	b928      	cbnz	r0, 4224 <gpio_pin_configure+0x7c>
		return ret;
	}

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    4218:	683b      	ldr	r3, [r7, #0]
    421a:	07e2      	lsls	r2, r4, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    421c:	bf4c      	ite	mi
    421e:	432b      	orrmi	r3, r5
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    4220:	43ab      	bicpl	r3, r5
    4222:	603b      	str	r3, [r7, #0]
		flags &= ~GPIO_INT_DEBOUNCE;
		ret = z_impl_gpio_pin_interrupt_configure(port, pin, flags);
	}

	return ret;
}
    4224:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4228:	0002fa6a 	.word	0x0002fa6a
    422c:	0002fa94 	.word	0x0002fa94

00004230 <bm_init_leds>:
  k_delayed_work_init(&buttons_debounce, buttons_debounce_fn);
}


/* Init the Leds */
void bm_init_leds() {
    4230:	b510      	push	{r4, lr}
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    4232:	482a      	ldr	r0, [pc, #168]	; (42dc <bm_init_leds+0xac>)
    4234:	f01d fcfe 	bl	21c34 <z_impl_device_get_binding>
  dev_led0 = device_get_binding(LED0);
    4238:	4a29      	ldr	r2, [pc, #164]	; (42e0 <bm_init_leds+0xb0>)
    423a:	6010      	str	r0, [r2, #0]
  if (dev_led0 == NULL) {
    423c:	b920      	cbnz	r0, 4248 <bm_init_leds+0x18>
    printk("Error no LED0 found");
    423e:	4829      	ldr	r0, [pc, #164]	; (42e4 <bm_init_leds+0xb4>)
  ret = gpio_pin_configure(dev_led3, PIN_LED3, GPIO_OUTPUT_INACTIVE | FLAGS_LED3);
  if (ret < 0) {
    printk("Error in configuration of led3 pin (err %d)", ret);
    return;
  }
}
    4240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    printk("Error no LED1 found");
    4244:	f022 be93 	b.w	26f6e <printk>
  ret = gpio_pin_configure(dev_led0, PIN_LED0, GPIO_OUTPUT_INACTIVE | FLAGS_LED0);
    4248:	2106      	movs	r1, #6
    424a:	f241 6201 	movw	r2, #5633	; 0x1601
    424e:	f7ff ffab 	bl	41a8 <gpio_pin_configure>
    4252:	4c25      	ldr	r4, [pc, #148]	; (42e8 <bm_init_leds+0xb8>)
  if (ret < 0) {
    4254:	2800      	cmp	r0, #0
  ret = gpio_pin_configure(dev_led0, PIN_LED0, GPIO_OUTPUT_INACTIVE | FLAGS_LED0);
    4256:	4601      	mov	r1, r0
    4258:	6020      	str	r0, [r4, #0]
  if (ret < 0) {
    425a:	da04      	bge.n	4266 <bm_init_leds+0x36>
    printk("Error in configuration of led0 pin (err %d)", ret);
    425c:	4823      	ldr	r0, [pc, #140]	; (42ec <bm_init_leds+0xbc>)
}
    425e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    printk("Error in configuration of led3 pin (err %d)", ret);
    4262:	f022 be84 	b.w	26f6e <printk>
    4266:	481d      	ldr	r0, [pc, #116]	; (42dc <bm_init_leds+0xac>)
    4268:	f01d fce4 	bl	21c34 <z_impl_device_get_binding>
  dev_led1 = device_get_binding(LED1);
    426c:	4a20      	ldr	r2, [pc, #128]	; (42f0 <bm_init_leds+0xc0>)
    426e:	6010      	str	r0, [r2, #0]
  if (dev_led1 == NULL) {
    4270:	b908      	cbnz	r0, 4276 <bm_init_leds+0x46>
    printk("Error no LED1 found");
    4272:	4820      	ldr	r0, [pc, #128]	; (42f4 <bm_init_leds+0xc4>)
    4274:	e7e4      	b.n	4240 <bm_init_leds+0x10>
  ret = gpio_pin_configure(dev_led1, PIN_LED1, GPIO_OUTPUT_INACTIVE | FLAGS_LED1);
    4276:	2108      	movs	r1, #8
    4278:	f241 6201 	movw	r2, #5633	; 0x1601
    427c:	f7ff ff94 	bl	41a8 <gpio_pin_configure>
  if (ret < 0) {
    4280:	2800      	cmp	r0, #0
  ret = gpio_pin_configure(dev_led1, PIN_LED1, GPIO_OUTPUT_INACTIVE | FLAGS_LED1);
    4282:	4601      	mov	r1, r0
    4284:	6020      	str	r0, [r4, #0]
  if (ret < 0) {
    4286:	da01      	bge.n	428c <bm_init_leds+0x5c>
    printk("Error in configuration of led1 pin (err %d)", ret);
    4288:	481b      	ldr	r0, [pc, #108]	; (42f8 <bm_init_leds+0xc8>)
    428a:	e7e8      	b.n	425e <bm_init_leds+0x2e>
    428c:	481b      	ldr	r0, [pc, #108]	; (42fc <bm_init_leds+0xcc>)
    428e:	f01d fcd1 	bl	21c34 <z_impl_device_get_binding>
  dev_led2 = device_get_binding(LED2);
    4292:	4a1b      	ldr	r2, [pc, #108]	; (4300 <bm_init_leds+0xd0>)
    4294:	6010      	str	r0, [r2, #0]
  if (dev_led2 == NULL) {
    4296:	b908      	cbnz	r0, 429c <bm_init_leds+0x6c>
    printk("Error no LED2 found");
    4298:	481a      	ldr	r0, [pc, #104]	; (4304 <bm_init_leds+0xd4>)
    429a:	e7d1      	b.n	4240 <bm_init_leds+0x10>
  ret = gpio_pin_configure(dev_led2, PIN_LED2, GPIO_OUTPUT_INACTIVE | FLAGS_LED2);
    429c:	2109      	movs	r1, #9
    429e:	f241 6201 	movw	r2, #5633	; 0x1601
    42a2:	f7ff ff81 	bl	41a8 <gpio_pin_configure>
  if (ret < 0) {
    42a6:	2800      	cmp	r0, #0
  ret = gpio_pin_configure(dev_led2, PIN_LED2, GPIO_OUTPUT_INACTIVE | FLAGS_LED2);
    42a8:	4601      	mov	r1, r0
    42aa:	6020      	str	r0, [r4, #0]
  if (ret < 0) {
    42ac:	da01      	bge.n	42b2 <bm_init_leds+0x82>
    printk("Error in configuration of led2 pin (err %d)", ret);
    42ae:	4816      	ldr	r0, [pc, #88]	; (4308 <bm_init_leds+0xd8>)
    42b0:	e7d5      	b.n	425e <bm_init_leds+0x2e>
    42b2:	480a      	ldr	r0, [pc, #40]	; (42dc <bm_init_leds+0xac>)
    42b4:	f01d fcbe 	bl	21c34 <z_impl_device_get_binding>
  dev_led3 = device_get_binding(LED3);
    42b8:	4a14      	ldr	r2, [pc, #80]	; (430c <bm_init_leds+0xdc>)
    42ba:	6010      	str	r0, [r2, #0]
  if (dev_led3 == NULL) {
    42bc:	b908      	cbnz	r0, 42c2 <bm_init_leds+0x92>
    printk("Error no LED3 found");
    42be:	4814      	ldr	r0, [pc, #80]	; (4310 <bm_init_leds+0xe0>)
    42c0:	e7be      	b.n	4240 <bm_init_leds+0x10>
  ret = gpio_pin_configure(dev_led3, PIN_LED3, GPIO_OUTPUT_INACTIVE | FLAGS_LED3);
    42c2:	210c      	movs	r1, #12
    42c4:	f241 6201 	movw	r2, #5633	; 0x1601
    42c8:	f7ff ff6e 	bl	41a8 <gpio_pin_configure>
  if (ret < 0) {
    42cc:	2800      	cmp	r0, #0
  ret = gpio_pin_configure(dev_led3, PIN_LED3, GPIO_OUTPUT_INACTIVE | FLAGS_LED3);
    42ce:	4601      	mov	r1, r0
    42d0:	6020      	str	r0, [r4, #0]
  if (ret < 0) {
    42d2:	da01      	bge.n	42d8 <bm_init_leds+0xa8>
    printk("Error in configuration of led3 pin (err %d)", ret);
    42d4:	480f      	ldr	r0, [pc, #60]	; (4314 <bm_init_leds+0xe4>)
    42d6:	e7c2      	b.n	425e <bm_init_leds+0x2e>
}
    42d8:	bd10      	pop	{r4, pc}
    42da:	bf00      	nop
    42dc:	0002f963 	.word	0x0002f963
    42e0:	20002550 	.word	0x20002550
    42e4:	0002f96a 	.word	0x0002f96a
    42e8:	20002560 	.word	0x20002560
    42ec:	0002f97e 	.word	0x0002f97e
    42f0:	20002554 	.word	0x20002554
    42f4:	0002f9aa 	.word	0x0002f9aa
    42f8:	0002f9be 	.word	0x0002f9be
    42fc:	0002f8c3 	.word	0x0002f8c3
    4300:	20002558 	.word	0x20002558
    4304:	0002f9ea 	.word	0x0002f9ea
    4308:	0002f9fe 	.word	0x0002f9fe
    430c:	2000255c 	.word	0x2000255c
    4310:	0002fa2a 	.word	0x0002fa2a
    4314:	0002fa3e 	.word	0x0002fa3e

00004318 <main>:
#include "bm_simple_buttons_and_leds.h"
#include <zephyr.h>

/**@brief Function for application main entry.
 */
void main(void) {
    4318:	b508      	push	{r3, lr}
  // Start Application
  printk("Starting Application...\n");
    431a:	480d      	ldr	r0, [pc, #52]	; (4350 <main+0x38>)
    431c:	f022 fe27 	bl	26f6e <printk>
  // Init MAC Address
  uint32_t LSB_MAC_Address = NRF_FICR->DEVICEADDR[0];
    4320:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  printk("Preprogrammed Randomly Static MAC-Address (LSB): 0x%x, %u \n", LSB_MAC_Address, LSB_MAC_Address);
    4324:	480b      	ldr	r0, [pc, #44]	; (4354 <main+0x3c>)
  uint32_t LSB_MAC_Address = NRF_FICR->DEVICEADDR[0];
    4326:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
  printk("Preprogrammed Randomly Static MAC-Address (LSB): 0x%x, %u \n", LSB_MAC_Address, LSB_MAC_Address);
    432a:	4611      	mov	r1, r2
    432c:	f022 fe1f 	bl	26f6e <printk>
  /* --------------- Init Board ------------*/
	printk("Init Buttons and LEDs...\n");
    4330:	4809      	ldr	r0, [pc, #36]	; (4358 <main+0x40>)
    4332:	f022 fe1c 	bl	26f6e <printk>
	bm_init_leds();
    4336:	f7ff ff7b 	bl	4230 <bm_init_leds>
	printk("Buttons and LEDs initialized\n");
    433a:	4808      	ldr	r0, [pc, #32]	; (435c <main+0x44>)
    433c:	f022 fe17 	bl	26f6e <printk>
  printk("Init SHT3xd Sensor\n");
    4340:	4807      	ldr	r0, [pc, #28]	; (4360 <main+0x48>)
    4342:	f022 fe14 	bl	26f6e <printk>

	/* ===================================*/

  // Start Mesh Operation
  bm_blemesh_enable(); // Will return faster than the Stack is realy ready... keep on waiting in the transition.
    4346:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  bm_blemesh_enable(); // Will return faster than the Stack is realy ready... keep on waiting in the transition.
    434a:	f7ff be4f 	b.w	3fec <bm_blemesh_enable>
    434e:	bf00      	nop
    4350:	0002faac 	.word	0x0002faac
    4354:	0002fac5 	.word	0x0002fac5
    4358:	0002fb01 	.word	0x0002fb01
    435c:	0002fb1b 	.word	0x0002fb1b
    4360:	0002fb39 	.word	0x0002fb39

00004364 <sensirion_i2c_select_bus>:
 * All following i2c operations will be directed at that bus.
 *
 * @param bus_idx   Bus index to select
 * @returns         0 on success, an error code otherwise
 */
int16_t sensirion_i2c_select_bus(uint8_t bus_idx) {
    4364:	b507      	push	{r0, r1, r2, lr}
    char bus_name[6] = "I2C_0";
    4366:	4a0d      	ldr	r2, [pc, #52]	; (439c <sensirion_i2c_select_bus+0x38>)
int16_t sensirion_i2c_select_bus(uint8_t bus_idx) {
    4368:	4603      	mov	r3, r0

    if (bus_idx > 9) {
    436a:	2b09      	cmp	r3, #9
    char bus_name[6] = "I2C_0";
    436c:	6810      	ldr	r0, [r2, #0]
    436e:	8892      	ldrh	r2, [r2, #4]
    4370:	9000      	str	r0, [sp, #0]
    4372:	f8ad 2004 	strh.w	r2, [sp, #4]
    if (bus_idx > 9) {
    4376:	d80e      	bhi.n	4396 <sensirion_i2c_select_bus+0x32>
        /* Invalid bus index */
        return STATUS_FAIL;
    }

    bus_name[4] = bus_idx + '0';
    4378:	3330      	adds	r3, #48	; 0x30
    437a:	f88d 3004 	strb.w	r3, [sp, #4]
    437e:	4668      	mov	r0, sp
    4380:	f01d fc58 	bl	21c34 <z_impl_device_get_binding>
    i2c_dev = device_get_binding(bus_name);
    4384:	4b06      	ldr	r3, [pc, #24]	; (43a0 <sensirion_i2c_select_bus+0x3c>)
    4386:	6018      	str	r0, [r3, #0]
    if (i2c_dev == NULL) {
    4388:	fab0 f080 	clz	r0, r0
    438c:	0940      	lsrs	r0, r0, #5
    438e:	4240      	negs	r0, r0
        /* No valid device found */
        return STATUS_FAIL;
    }

    return STATUS_OK;
}
    4390:	b003      	add	sp, #12
    4392:	f85d fb04 	ldr.w	pc, [sp], #4
        return STATUS_FAIL;
    4396:	f04f 30ff 	mov.w	r0, #4294967295
    439a:	e7f9      	b.n	4390 <sensirion_i2c_select_bus+0x2c>
    439c:	0002fb4d 	.word	0x0002fb4d
    43a0:	20002564 	.word	0x20002564

000043a4 <sensirion_i2c_read>:
 * @param address 7-bit I2C address to read from
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_read(uint8_t address, uint8_t* data, uint16_t count) {
    43a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    43a6:	4603      	mov	r3, r0
    return i2c_read(i2c_dev, data, count, address);
    43a8:	4807      	ldr	r0, [pc, #28]	; (43c8 <sensirion_i2c_read+0x24>)
    43aa:	e9cd 1201 	strd	r1, r2, [sp, #4]
{
	struct i2c_msg msg;

	msg.buf = buf;
	msg.len = num_bytes;
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
    43ae:	2203      	movs	r2, #3
    43b0:	6800      	ldr	r0, [r0, #0]
    43b2:	f88d 200c 	strb.w	r2, [sp, #12]
	return api->transfer(dev, msgs, num_msgs, addr);
    43b6:	6882      	ldr	r2, [r0, #8]
    43b8:	a901      	add	r1, sp, #4
    43ba:	6854      	ldr	r4, [r2, #4]
    43bc:	2201      	movs	r2, #1
    43be:	47a0      	blx	r4
}
    43c0:	b240      	sxtb	r0, r0
    43c2:	b004      	add	sp, #16
    43c4:	bd10      	pop	{r4, pc}
    43c6:	bf00      	nop
    43c8:	20002564 	.word	0x20002564

000043cc <sensirion_i2c_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_write(uint8_t address, const uint8_t* data,
                           uint16_t count) {
    43cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    43ce:	4603      	mov	r3, r0
    return i2c_write(i2c_dev, data, count, address);
    43d0:	4807      	ldr	r0, [pc, #28]	; (43f0 <sensirion_i2c_write+0x24>)
    43d2:	e9cd 1201 	strd	r1, r2, [sp, #4]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    43d6:	2202      	movs	r2, #2
    43d8:	6800      	ldr	r0, [r0, #0]
    43da:	f88d 200c 	strb.w	r2, [sp, #12]
	return api->transfer(dev, msgs, num_msgs, addr);
    43de:	6882      	ldr	r2, [r0, #8]
    43e0:	a901      	add	r1, sp, #4
    43e2:	6854      	ldr	r4, [r2, #4]
    43e4:	2201      	movs	r2, #1
    43e6:	47a0      	blx	r4
}
    43e8:	b240      	sxtb	r0, r0
    43ea:	b004      	add	sp, #16
    43ec:	bd10      	pop	{r4, pc}
    43ee:	bf00      	nop
    43f0:	20002564 	.word	0x20002564

000043f4 <shtc1_measure>:
#endif /* USE_SENSIRION_CLOCK_STRETCHING */
    return shtc1_read(temperature, humidity);
}

int16_t shtc1_measure(void) {
    return sensirion_i2c_write_cmd(SHTC1_ADDRESS, shtc1_cmd_measure);
    43f4:	4b02      	ldr	r3, [pc, #8]	; (4400 <shtc1_measure+0xc>)
    43f6:	2070      	movs	r0, #112	; 0x70
    43f8:	8819      	ldrh	r1, [r3, #0]
    43fa:	f022 bc5c 	b.w	26cb6 <sensirion_i2c_write_cmd>
    43fe:	bf00      	nop
    4400:	2000107c 	.word	0x2000107c

00004404 <sensirion_calc_absolute_humidity>:

uint32_t sensirion_calc_absolute_humidity(int32_t temperature_milli_celsius,
                                          int32_t humidity_milli_percent) {
    uint32_t t, i, rem, ret;

    if (humidity_milli_percent <= 0)
    4404:	2900      	cmp	r1, #0
                                          int32_t humidity_milli_percent) {
    4406:	b530      	push	{r4, r5, lr}
    if (humidity_milli_percent <= 0)
    4408:	dd25      	ble.n	4456 <sensirion_calc_absolute_humidity+0x52>
        return 0;

    if (temperature_milli_celsius < T_LO)
    440a:	4b14      	ldr	r3, [pc, #80]	; (445c <sensirion_calc_absolute_humidity+0x58>)
    440c:	4298      	cmp	r0, r3
    440e:	db1e      	blt.n	444e <sensirion_calc_absolute_humidity+0x4a>
        t = 0;
    else
        t = (uint32_t)(temperature_milli_celsius - T_LO);
    4410:	f500 409c 	add.w	r0, r0, #19968	; 0x4e00

    i = t / T_STEP;
    rem = t % T_STEP;

    if (i >= ARRAY_SIZE(AH_LUT_100RH) - 1) {
    4414:	4b12      	ldr	r3, [pc, #72]	; (4460 <sensirion_calc_absolute_humidity+0x5c>)
        t = (uint32_t)(temperature_milli_celsius - T_LO);
    4416:	3020      	adds	r0, #32
    if (i >= ARRAY_SIZE(AH_LUT_100RH) - 1) {
    4418:	4298      	cmp	r0, r3
    441a:	d81a      	bhi.n	4452 <sensirion_calc_absolute_humidity+0x4e>
    i = t / T_STEP;
    441c:	f242 7410 	movw	r4, #10000	; 0x2710
    4420:	4d10      	ldr	r5, [pc, #64]	; (4464 <sensirion_calc_absolute_humidity+0x60>)
    4422:	fbb0 f2f4 	udiv	r2, r0, r4
    rem = t % T_STEP;
    4426:	fb04 0012 	mls	r0, r4, r2, r0
        ret = AH_LUT_100RH[ARRAY_SIZE(AH_LUT_100RH) - 1];

    } else if (rem == 0) {
    442a:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
    442e:	b138      	cbz	r0, 4440 <sensirion_calc_absolute_humidity+0x3c>
        ret = AH_LUT_100RH[i];

    } else {
        ret = (AH_LUT_100RH[i] +
               ((AH_LUT_100RH[i + 1] - AH_LUT_100RH[i]) * rem / T_STEP));
    4430:	3201      	adds	r2, #1
    4432:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    4436:	1ad2      	subs	r2, r2, r3
    4438:	4350      	muls	r0, r2
    443a:	fbb0 f0f4 	udiv	r0, r0, r4
        ret = (AH_LUT_100RH[i] +
    443e:	4403      	add	r3, r0
    // Multiplication might overflow with a maximum of 3 digits
    // Trick: ((ret >> 3) * (uint32_t)humidity_milli_percent) never overflows
    // Now we only need to divide by 12500, as the tripple righ shift
    // divides by 8

    return ((ret >> 3) * (uint32_t)(humidity_milli_percent)) / 12500;
    4440:	08db      	lsrs	r3, r3, #3
    4442:	434b      	muls	r3, r1
    4444:	f243 00d4 	movw	r0, #12500	; 0x30d4
    4448:	fbb3 f0f0 	udiv	r0, r3, r0
}
    444c:	bd30      	pop	{r4, r5, pc}
        t = 0;
    444e:	2000      	movs	r0, #0
    4450:	e7e4      	b.n	441c <sensirion_calc_absolute_humidity+0x18>
        ret = AH_LUT_100RH[ARRAY_SIZE(AH_LUT_100RH) - 1];
    4452:	4b05      	ldr	r3, [pc, #20]	; (4468 <sensirion_calc_absolute_humidity+0x64>)
    4454:	e7f4      	b.n	4440 <sensirion_calc_absolute_humidity+0x3c>
        return 0;
    4456:	2000      	movs	r0, #0
    4458:	e7f8      	b.n	444c <sensirion_calc_absolute_humidity+0x48>
    445a:	bf00      	nop
    445c:	ffffb1e0 	.word	0xffffb1e0
    4460:	00015f8f 	.word	0x00015f8f
    4464:	0002e960 	.word	0x0002e960
    4468:	00030685 	.word	0x00030685

0000446c <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
    446c:	b510      	push	{r4, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    446e:	4c09      	ldr	r4, [pc, #36]	; (4494 <crc8_ccitt+0x28>)
    4470:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
    4472:	4291      	cmp	r1, r2
    4474:	d100      	bne.n	4478 <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
    4476:	bd10      	pop	{r4, pc}
		val ^= p[i];
    4478:	f811 3b01 	ldrb.w	r3, [r1], #1
    447c:	4043      	eors	r3, r0
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    447e:	0918      	lsrs	r0, r3, #4
    4480:	5c20      	ldrb	r0, [r4, r0]
    4482:	ea80 1003 	eor.w	r0, r0, r3, lsl #4
    4486:	b2c3      	uxtb	r3, r0
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    4488:	0918      	lsrs	r0, r3, #4
    448a:	5c20      	ldrb	r0, [r4, r0]
    448c:	ea80 1003 	eor.w	r0, r0, r3, lsl #4
    4490:	b2c0      	uxtb	r0, r0
    4492:	e7ee      	b.n	4472 <crc8_ccitt+0x6>
    4494:	0002fb53 	.word	0x0002fb53

00004498 <sys_notify_finalize>:
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    4498:	6843      	ldr	r3, [r0, #4]
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    449a:	b570      	push	{r4, r5, r6, lr}

	return method & SYS_NOTIFY_METHOD_MASK;
    449c:	f003 0303 	and.w	r3, r3, #3
    44a0:	4605      	mov	r5, r0

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    44a2:	2b02      	cmp	r3, #2
{
    44a4:	460e      	mov	r6, r1
	notify->result = res;
    44a6:	60a9      	str	r1, [r5, #8]
	switch (method) {
    44a8:	d010      	beq.n	44cc <sys_notify_finalize+0x34>
    44aa:	2b03      	cmp	r3, #3
    44ac:	d004      	beq.n	44b8 <sys_notify_finalize+0x20>
    44ae:	2b01      	cmp	r3, #1
    44b0:	d10f      	bne.n	44d2 <sys_notify_finalize+0x3a>
	sys_notify_generic_callback rv = 0;
    44b2:	2400      	movs	r4, #0
	struct k_poll_signal *sig = NULL;
    44b4:	4620      	mov	r0, r4
    44b6:	e001      	b.n	44bc <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    44b8:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
    44ba:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    44bc:	2300      	movs	r3, #0
    44be:	606b      	str	r3, [r5, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    44c0:	b110      	cbz	r0, 44c8 <sys_notify_finalize+0x30>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
    44c2:	4631      	mov	r1, r6
    44c4:	f020 fb1a 	bl	24afc <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    44c8:	4620      	mov	r0, r4
    44ca:	bd70      	pop	{r4, r5, r6, pc}
		sig = notify->method.signal;
    44cc:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = 0;
    44ce:	2400      	movs	r4, #0
		break;
    44d0:	e7f4      	b.n	44bc <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
    44d2:	2245      	movs	r2, #69	; 0x45
    44d4:	4904      	ldr	r1, [pc, #16]	; (44e8 <sys_notify_finalize+0x50>)
    44d6:	4805      	ldr	r0, [pc, #20]	; (44ec <sys_notify_finalize+0x54>)
    44d8:	f022 fd49 	bl	26f6e <printk>
    44dc:	2145      	movs	r1, #69	; 0x45
    44de:	4802      	ldr	r0, [pc, #8]	; (44e8 <sys_notify_finalize+0x50>)
    44e0:	f022 ffbe 	bl	27460 <assert_post_action>
	sys_notify_generic_callback rv = 0;
    44e4:	2400      	movs	r4, #0
    44e6:	e7e8      	b.n	44ba <sys_notify_finalize+0x22>
    44e8:	0002fb63 	.word	0x0002fb63
    44ec:	0002fa94 	.word	0x0002fa94

000044f0 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    44f0:	680b      	ldr	r3, [r1, #0]
    44f2:	3301      	adds	r3, #1
    44f4:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    44f6:	4b01      	ldr	r3, [pc, #4]	; (44fc <char_out+0xc>)
    44f8:	681b      	ldr	r3, [r3, #0]
    44fa:	4718      	bx	r3
    44fc:	200006c0 	.word	0x200006c0

00004500 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    4500:	b507      	push	{r0, r1, r2, lr}
	struct out_context ctx = { 0 };
    4502:	2300      	movs	r3, #0
    4504:	9301      	str	r3, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    4506:	4602      	mov	r2, r0
    4508:	460b      	mov	r3, r1
    450a:	4803      	ldr	r0, [pc, #12]	; (4518 <vprintk+0x18>)
    450c:	a901      	add	r1, sp, #4
    450e:	f000 fcad 	bl	4e6c <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    4512:	b003      	add	sp, #12
    4514:	f85d fb04 	ldr.w	pc, [sp], #4
    4518:	000044f1 	.word	0x000044f1

0000451c <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    451c:	b530      	push	{r4, r5, lr}
    451e:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    4520:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    4524:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    4526:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
    4528:	a901      	add	r1, sp, #4
    452a:	4805      	ldr	r0, [pc, #20]	; (4540 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    452c:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
    452e:	f000 fc9d 	bl	4e6c <cbvprintf>

	if (ctx.count < ctx.max) {
    4532:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    4536:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    4538:	bfb8      	it	lt
    453a:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    453c:	b005      	add	sp, #20
    453e:	bd30      	pop	{r4, r5, pc}
    4540:	00026f49 	.word	0x00026f49

00004544 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    4544:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4548:	f8b0 801c 	ldrh.w	r8, [r0, #28]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    454c:	f018 0f08 	tst.w	r8, #8
{
    4550:	4604      	mov	r4, r0
    4552:	4693      	mov	fp, r2
	if (processing) {
    4554:	d01c      	beq.n	4590 <process_event+0x4c>
		if (evt == EVT_COMPLETE) {
    4556:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    4558:	bf0c      	ite	eq
    455a:	f048 0810 	orreq.w	r8, r8, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    455e:	f048 0820 	orrne.w	r8, r8, #32
    4562:	f8a0 801c 	strh.w	r8, [r0, #28]
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4566:	f104 0014 	add.w	r0, r4, #20
    456a:	f01f fbab 	bl	23cc4 <z_spin_unlock_valid>
    456e:	b940      	cbnz	r0, 4582 <process_event+0x3e>
    4570:	49b9      	ldr	r1, [pc, #740]	; (4858 <process_event+0x314>)
    4572:	48ba      	ldr	r0, [pc, #744]	; (485c <process_event+0x318>)
    4574:	22a7      	movs	r2, #167	; 0xa7
    4576:	f022 fcfa 	bl	26f6e <printk>
    457a:	21a7      	movs	r1, #167	; 0xa7
    457c:	48b6      	ldr	r0, [pc, #728]	; (4858 <process_event+0x314>)
    457e:	f022 ff6f 	bl	27460 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    4582:	f38b 8811 	msr	BASEPRI, fp
    4586:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    458a:	b003      	add	sp, #12
    458c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
    4590:	4eb3      	ldr	r6, [pc, #716]	; (4860 <process_event+0x31c>)
    4592:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 485c <process_event+0x318>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4596:	f008 0807 	and.w	r8, r8, #7
		if (evt == EVT_RECHECK) {
    459a:	2902      	cmp	r1, #2
    459c:	d106      	bne.n	45ac <process_event+0x68>
			evt = process_recheck(mgr);
    459e:	4620      	mov	r0, r4
    45a0:	f022 fcff 	bl	26fa2 <process_recheck>
		if (evt == EVT_NOP) {
    45a4:	2800      	cmp	r0, #0
    45a6:	d0de      	beq.n	4566 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    45a8:	2801      	cmp	r0, #1
    45aa:	d161      	bne.n	4670 <process_event+0x12c>
			res = mgr->last_res;
    45ac:	f8d4 a018 	ldr.w	sl, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    45b0:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
    45b2:	f1ba 0f00 	cmp.w	sl, #0
    45b6:	da19      	bge.n	45ec <process_event+0xa8>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    45b8:	2700      	movs	r7, #0
		*clients = mgr->clients;
    45ba:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    45bc:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
    45c0:	e9c4 7700 	strd	r7, r7, [r4]
    45c4:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    45c8:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    45ca:	8ba3      	ldrh	r3, [r4, #28]
    45cc:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    45d0:	4542      	cmp	r2, r8
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    45d2:	9200      	str	r2, [sp, #0]
				   && !sys_slist_is_empty(&mgr->monitors);
    45d4:	d003      	beq.n	45de <process_event+0x9a>
		if (do_monitors
    45d6:	68a2      	ldr	r2, [r4, #8]
    45d8:	2a00      	cmp	r2, #0
    45da:	f040 80ef 	bne.w	47bc <process_event+0x278>
		    || !sys_slist_is_empty(&clients)
    45de:	b915      	cbnz	r5, 45e6 <process_event+0xa2>
		    || (transit != NULL)) {
    45e0:	2f00      	cmp	r7, #0
    45e2:	f000 8129 	beq.w	4838 <process_event+0x2f4>
    45e6:	f04f 0800 	mov.w	r8, #0
    45ea:	e0e9      	b.n	47c0 <process_event+0x27c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    45ec:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    45f0:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    45f2:	2901      	cmp	r1, #1
    45f4:	d81e      	bhi.n	4634 <process_event+0xf0>
	list->head = NULL;
    45f6:	2100      	movs	r1, #0
    45f8:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
    45fc:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
    45fe:	6825      	ldr	r5, [r4, #0]
    4600:	b29b      	uxth	r3, r3
	list->tail = NULL;
    4602:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    4606:	d10a      	bne.n	461e <process_event+0xda>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    4608:	b13d      	cbz	r5, 461a <process_event+0xd6>
    460a:	8be2      	ldrh	r2, [r4, #30]
    460c:	4629      	mov	r1, r5
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    460e:	6809      	ldr	r1, [r1, #0]
				mgr->refs += 1U;
    4610:	3201      	adds	r2, #1
    4612:	b292      	uxth	r2, r2
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    4614:	2900      	cmp	r1, #0
    4616:	d1fa      	bne.n	460e <process_event+0xca>
    4618:	83e2      	strh	r2, [r4, #30]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    461a:	f043 0302 	orr.w	r3, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    461e:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    4620:	4620      	mov	r0, r4
    4622:	f022 fcbe 	bl	26fa2 <process_recheck>
    4626:	b118      	cbz	r0, 4630 <process_event+0xec>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    4628:	8ba3      	ldrh	r3, [r4, #28]
    462a:	f043 0320 	orr.w	r3, r3, #32
    462e:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
    4630:	2700      	movs	r7, #0
    4632:	e7ca      	b.n	45ca <process_event+0x86>
	} else if (state == ONOFF_STATE_TO_OFF) {
    4634:	2a04      	cmp	r2, #4
    4636:	d10f      	bne.n	4658 <process_event+0x114>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4638:	f023 0307 	bic.w	r3, r3, #7
    463c:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    463e:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    4640:	4620      	mov	r0, r4
    4642:	f022 fcae 	bl	26fa2 <process_recheck>
    4646:	2800      	cmp	r0, #0
    4648:	f000 80b6 	beq.w	47b8 <process_event+0x274>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    464c:	f042 0220 	orr.w	r2, r2, #32
    4650:	83a2      	strh	r2, [r4, #28]
		__ASSERT_NO_MSG(false);
    4652:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    4654:	462f      	mov	r7, r5
    4656:	e7b8      	b.n	45ca <process_event+0x86>
		__ASSERT_NO_MSG(false);
    4658:	4631      	mov	r1, r6
    465a:	4648      	mov	r0, r9
    465c:	f240 1219 	movw	r2, #281	; 0x119
    4660:	f022 fc85 	bl	26f6e <printk>
    4664:	f240 1119 	movw	r1, #281	; 0x119
    4668:	4630      	mov	r0, r6
    466a:	f022 fef9 	bl	27460 <assert_post_action>
    466e:	e7f0      	b.n	4652 <process_event+0x10e>
		} else if (evt == EVT_START) {
    4670:	2803      	cmp	r0, #3
    4672:	d131      	bne.n	46d8 <process_event+0x194>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    4674:	f1b8 0f00 	cmp.w	r8, #0
    4678:	d00a      	beq.n	4690 <process_event+0x14c>
    467a:	4631      	mov	r1, r6
    467c:	4648      	mov	r0, r9
    467e:	f44f 72aa 	mov.w	r2, #340	; 0x154
    4682:	f022 fc74 	bl	26f6e <printk>
    4686:	f44f 71aa 	mov.w	r1, #340	; 0x154
    468a:	4630      	mov	r0, r6
    468c:	f022 fee8 	bl	27460 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    4690:	6823      	ldr	r3, [r4, #0]
    4692:	b953      	cbnz	r3, 46aa <process_event+0x166>
    4694:	4631      	mov	r1, r6
    4696:	4648      	mov	r0, r9
    4698:	f240 1255 	movw	r2, #341	; 0x155
    469c:	f022 fc67 	bl	26f6e <printk>
    46a0:	f240 1155 	movw	r1, #341	; 0x155
    46a4:	4630      	mov	r0, r6
    46a6:	f022 fedb 	bl	27460 <assert_post_action>
			transit = mgr->transitions->start;
    46aa:	6923      	ldr	r3, [r4, #16]
    46ac:	681f      	ldr	r7, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
    46ae:	b957      	cbnz	r7, 46c6 <process_event+0x182>
    46b0:	4631      	mov	r1, r6
    46b2:	4648      	mov	r0, r9
    46b4:	f44f 72ac 	mov.w	r2, #344	; 0x158
    46b8:	f022 fc59 	bl	26f6e <printk>
    46bc:	f44f 71ac 	mov.w	r1, #344	; 0x158
    46c0:	4630      	mov	r0, r6
    46c2:	f022 fecd 	bl	27460 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    46c6:	8ba3      	ldrh	r3, [r4, #28]
    46c8:	f023 0307 	bic.w	r3, r3, #7
    46cc:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    46d0:	83a3      	strh	r3, [r4, #28]
    46d2:	2500      	movs	r5, #0
		res = 0;
    46d4:	46aa      	mov	sl, r5
    46d6:	e778      	b.n	45ca <process_event+0x86>
		} else if (evt == EVT_STOP) {
    46d8:	2804      	cmp	r0, #4
    46da:	d12e      	bne.n	473a <process_event+0x1f6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    46dc:	f1b8 0f02 	cmp.w	r8, #2
    46e0:	d00a      	beq.n	46f8 <process_event+0x1b4>
    46e2:	4631      	mov	r1, r6
    46e4:	4648      	mov	r0, r9
    46e6:	f240 125b 	movw	r2, #347	; 0x15b
    46ea:	f022 fc40 	bl	26f6e <printk>
    46ee:	f240 115b 	movw	r1, #347	; 0x15b
    46f2:	4630      	mov	r0, r6
    46f4:	f022 feb4 	bl	27460 <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
    46f8:	8be3      	ldrh	r3, [r4, #30]
    46fa:	b153      	cbz	r3, 4712 <process_event+0x1ce>
    46fc:	4631      	mov	r1, r6
    46fe:	4648      	mov	r0, r9
    4700:	f44f 72ae 	mov.w	r2, #348	; 0x15c
    4704:	f022 fc33 	bl	26f6e <printk>
    4708:	f44f 71ae 	mov.w	r1, #348	; 0x15c
    470c:	4630      	mov	r0, r6
    470e:	f022 fea7 	bl	27460 <assert_post_action>
			transit = mgr->transitions->stop;
    4712:	6923      	ldr	r3, [r4, #16]
    4714:	685f      	ldr	r7, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
    4716:	b957      	cbnz	r7, 472e <process_event+0x1ea>
    4718:	4631      	mov	r1, r6
    471a:	4648      	mov	r0, r9
    471c:	f240 125f 	movw	r2, #351	; 0x15f
    4720:	f022 fc25 	bl	26f6e <printk>
    4724:	f240 115f 	movw	r1, #351	; 0x15f
    4728:	4630      	mov	r0, r6
    472a:	f022 fe99 	bl	27460 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    472e:	8ba3      	ldrh	r3, [r4, #28]
    4730:	f023 0307 	bic.w	r3, r3, #7
    4734:	f043 0304 	orr.w	r3, r3, #4
    4738:	e7ca      	b.n	46d0 <process_event+0x18c>
		} else if (evt == EVT_RESET) {
    473a:	2805      	cmp	r0, #5
    473c:	d12e      	bne.n	479c <process_event+0x258>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    473e:	f1b8 0f01 	cmp.w	r8, #1
    4742:	d00a      	beq.n	475a <process_event+0x216>
    4744:	4631      	mov	r1, r6
    4746:	4648      	mov	r0, r9
    4748:	f44f 72b1 	mov.w	r2, #354	; 0x162
    474c:	f022 fc0f 	bl	26f6e <printk>
    4750:	f44f 71b1 	mov.w	r1, #354	; 0x162
    4754:	4630      	mov	r0, r6
    4756:	f022 fe83 	bl	27460 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    475a:	6823      	ldr	r3, [r4, #0]
    475c:	b953      	cbnz	r3, 4774 <process_event+0x230>
    475e:	4631      	mov	r1, r6
    4760:	4648      	mov	r0, r9
    4762:	f240 1263 	movw	r2, #355	; 0x163
    4766:	f022 fc02 	bl	26f6e <printk>
    476a:	f240 1163 	movw	r1, #355	; 0x163
    476e:	4630      	mov	r0, r6
    4770:	f022 fe76 	bl	27460 <assert_post_action>
			transit = mgr->transitions->reset;
    4774:	6923      	ldr	r3, [r4, #16]
    4776:	689f      	ldr	r7, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
    4778:	b957      	cbnz	r7, 4790 <process_event+0x24c>
    477a:	4631      	mov	r1, r6
    477c:	4648      	mov	r0, r9
    477e:	f44f 72b3 	mov.w	r2, #358	; 0x166
    4782:	f022 fbf4 	bl	26f6e <printk>
    4786:	f44f 71b3 	mov.w	r1, #358	; 0x166
    478a:	4630      	mov	r0, r6
    478c:	f022 fe68 	bl	27460 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4790:	8ba3      	ldrh	r3, [r4, #28]
    4792:	f023 0307 	bic.w	r3, r3, #7
    4796:	f043 0305 	orr.w	r3, r3, #5
    479a:	e799      	b.n	46d0 <process_event+0x18c>
			__ASSERT_NO_MSG(false);
    479c:	f240 1269 	movw	r2, #361	; 0x169
    47a0:	4631      	mov	r1, r6
    47a2:	4648      	mov	r0, r9
    47a4:	f022 fbe3 	bl	26f6e <printk>
    47a8:	2500      	movs	r5, #0
    47aa:	f240 1169 	movw	r1, #361	; 0x169
    47ae:	4630      	mov	r0, r6
    47b0:	f022 fe56 	bl	27460 <assert_post_action>
		onoff_transition_fn transit = NULL;
    47b4:	462f      	mov	r7, r5
    47b6:	e78d      	b.n	46d4 <process_event+0x190>
		if (process_recheck(mgr) != EVT_NOP) {
    47b8:	4605      	mov	r5, r0
    47ba:	e74b      	b.n	4654 <process_event+0x110>
				   && !sys_slist_is_empty(&mgr->monitors);
    47bc:	f04f 0801 	mov.w	r8, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    47c0:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
    47c4:	83a3      	strh	r3, [r4, #28]
			k_spin_unlock(&mgr->lock, key);
    47c6:	f104 0314 	add.w	r3, r4, #20
    47ca:	4618      	mov	r0, r3
    47cc:	9301      	str	r3, [sp, #4]
    47ce:	f01f fa79 	bl	23cc4 <z_spin_unlock_valid>
    47d2:	b940      	cbnz	r0, 47e6 <process_event+0x2a2>
    47d4:	4920      	ldr	r1, [pc, #128]	; (4858 <process_event+0x314>)
    47d6:	4648      	mov	r0, r9
    47d8:	22a7      	movs	r2, #167	; 0xa7
    47da:	f022 fbc8 	bl	26f6e <printk>
    47de:	21a7      	movs	r1, #167	; 0xa7
    47e0:	481d      	ldr	r0, [pc, #116]	; (4858 <process_event+0x314>)
    47e2:	f022 fe3d 	bl	27460 <assert_post_action>
    47e6:	f38b 8811 	msr	BASEPRI, fp
    47ea:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    47ee:	f1b8 0f00 	cmp.w	r8, #0
    47f2:	d139      	bne.n	4868 <process_event+0x324>
	while (!sys_slist_is_empty(list)) {
    47f4:	2d00      	cmp	r5, #0
    47f6:	d149      	bne.n	488c <process_event+0x348>
			if (transit != NULL) {
    47f8:	b117      	cbz	r7, 4800 <process_event+0x2bc>
				transit(mgr, transition_complete);
    47fa:	491a      	ldr	r1, [pc, #104]	; (4864 <process_event+0x320>)
    47fc:	4620      	mov	r0, r4
    47fe:	47b8      	blx	r7
	__asm__ volatile(
    4800:	f04f 0320 	mov.w	r3, #32
    4804:	f3ef 8b11 	mrs	fp, BASEPRI
    4808:	f383 8811 	msr	BASEPRI, r3
    480c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4810:	9801      	ldr	r0, [sp, #4]
    4812:	f01f fa49 	bl	23ca8 <z_spin_lock_valid>
    4816:	b940      	cbnz	r0, 482a <process_event+0x2e6>
    4818:	490f      	ldr	r1, [pc, #60]	; (4858 <process_event+0x314>)
    481a:	4648      	mov	r0, r9
    481c:	227c      	movs	r2, #124	; 0x7c
    481e:	f022 fba6 	bl	26f6e <printk>
    4822:	217c      	movs	r1, #124	; 0x7c
    4824:	480c      	ldr	r0, [pc, #48]	; (4858 <process_event+0x314>)
    4826:	f022 fe1b 	bl	27460 <assert_post_action>
	z_spin_lock_set_owner(l);
    482a:	9801      	ldr	r0, [sp, #4]
    482c:	f01f fa5a 	bl	23ce4 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    4830:	8ba3      	ldrh	r3, [r4, #28]
    4832:	f023 0308 	bic.w	r3, r3, #8
    4836:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    4838:	8ba3      	ldrh	r3, [r4, #28]
    483a:	06da      	lsls	r2, r3, #27
    483c:	d530      	bpl.n	48a0 <process_event+0x35c>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    483e:	f023 0310 	bic.w	r3, r3, #16
    4842:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
    4844:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    4846:	f8b4 801c 	ldrh.w	r8, [r4, #28]
    484a:	f008 0807 	and.w	r8, r8, #7
	} while (evt != EVT_NOP);
    484e:	2900      	cmp	r1, #0
    4850:	f47f aea3 	bne.w	459a <process_event+0x56>
out:
    4854:	e687      	b.n	4566 <process_event+0x22>
    4856:	bf00      	nop
    4858:	0002fba8 	.word	0x0002fba8
    485c:	0002fa94 	.word	0x0002fa94
    4860:	0002fb86 	.word	0x0002fb86
    4864:	000048b1 	.word	0x000048b1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    4868:	68a1      	ldr	r1, [r4, #8]
    486a:	2900      	cmp	r1, #0
    486c:	d0c2      	beq.n	47f4 <process_event+0x2b0>
    486e:	f8d1 8000 	ldr.w	r8, [r1]
		mon->callback(mgr, mon, state, res);
    4872:	f8d1 b004 	ldr.w	fp, [r1, #4]
    4876:	9a00      	ldr	r2, [sp, #0]
    4878:	4653      	mov	r3, sl
    487a:	4620      	mov	r0, r4
    487c:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    487e:	f1b8 0f00 	cmp.w	r8, #0
    4882:	d0b7      	beq.n	47f4 <process_event+0x2b0>
    4884:	4641      	mov	r1, r8
    4886:	f8d8 8000 	ldr.w	r8, [r8]
    488a:	e7f2      	b.n	4872 <process_event+0x32e>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    488c:	f8d5 8000 	ldr.w	r8, [r5]
		notify_one(mgr, cli, state, res);
    4890:	9a00      	ldr	r2, [sp, #0]
    4892:	4629      	mov	r1, r5
    4894:	4653      	mov	r3, sl
    4896:	4620      	mov	r0, r4
    4898:	f022 fb9f 	bl	26fda <notify_one>
	while (!sys_slist_is_empty(list)) {
    489c:	4645      	mov	r5, r8
    489e:	e7a9      	b.n	47f4 <process_event+0x2b0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    48a0:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    48a4:	bf1e      	ittt	ne
    48a6:	f023 0320 	bicne.w	r3, r3, #32
    48aa:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
    48ac:	2102      	movne	r1, #2
    48ae:	e7ca      	b.n	4846 <process_event+0x302>

000048b0 <transition_complete>:
{
    48b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    48b2:	4604      	mov	r4, r0
    48b4:	460f      	mov	r7, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    48b6:	f100 0514 	add.w	r5, r0, #20
    48ba:	f04f 0320 	mov.w	r3, #32
    48be:	f3ef 8611 	mrs	r6, BASEPRI
    48c2:	f383 8811 	msr	BASEPRI, r3
    48c6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    48ca:	4628      	mov	r0, r5
    48cc:	f01f f9ec 	bl	23ca8 <z_spin_lock_valid>
    48d0:	b940      	cbnz	r0, 48e4 <transition_complete+0x34>
    48d2:	490a      	ldr	r1, [pc, #40]	; (48fc <transition_complete+0x4c>)
    48d4:	480a      	ldr	r0, [pc, #40]	; (4900 <transition_complete+0x50>)
    48d6:	227c      	movs	r2, #124	; 0x7c
    48d8:	f022 fb49 	bl	26f6e <printk>
    48dc:	217c      	movs	r1, #124	; 0x7c
    48de:	4807      	ldr	r0, [pc, #28]	; (48fc <transition_complete+0x4c>)
    48e0:	f022 fdbe 	bl	27460 <assert_post_action>
	z_spin_lock_set_owner(l);
    48e4:	4628      	mov	r0, r5
    48e6:	f01f f9fd 	bl	23ce4 <z_spin_lock_set_owner>
	mgr->last_res = res;
    48ea:	61a7      	str	r7, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    48ec:	4632      	mov	r2, r6
    48ee:	4620      	mov	r0, r4
    48f0:	2101      	movs	r1, #1
}
    48f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    48f6:	f7ff be25 	b.w	4544 <process_event>
    48fa:	bf00      	nop
    48fc:	0002fba8 	.word	0x0002fba8
    4900:	0002fa94 	.word	0x0002fa94

00004904 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    4904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4908:	4604      	mov	r4, r0
    490a:	4688      	mov	r8, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    490c:	f022 fb7b 	bl	27006 <validate_args>

	if (rv < 0) {
    4910:	1e06      	subs	r6, r0, #0
    4912:	db52      	blt.n	49ba <onoff_request+0xb6>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    4914:	f104 0914 	add.w	r9, r4, #20
    4918:	f04f 0320 	mov.w	r3, #32
    491c:	f3ef 8a11 	mrs	sl, BASEPRI
    4920:	f383 8811 	msr	BASEPRI, r3
    4924:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4928:	4648      	mov	r0, r9
    492a:	f01f f9bd 	bl	23ca8 <z_spin_lock_valid>
    492e:	b940      	cbnz	r0, 4942 <onoff_request+0x3e>
    4930:	4932      	ldr	r1, [pc, #200]	; (49fc <onoff_request+0xf8>)
    4932:	4833      	ldr	r0, [pc, #204]	; (4a00 <onoff_request+0xfc>)
    4934:	227c      	movs	r2, #124	; 0x7c
    4936:	f022 fb1a 	bl	26f6e <printk>
    493a:	217c      	movs	r1, #124	; 0x7c
    493c:	482f      	ldr	r0, [pc, #188]	; (49fc <onoff_request+0xf8>)
    493e:	f022 fd8f 	bl	27460 <assert_post_action>
	z_spin_lock_set_owner(l);
    4942:	4648      	mov	r0, r9
    4944:	f01f f9ce 	bl	23ce4 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    4948:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    494a:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
    494c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    4950:	428b      	cmp	r3, r1
    4952:	f002 0507 	and.w	r5, r2, #7
    4956:	d04a      	beq.n	49ee <onoff_request+0xea>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    4958:	2d02      	cmp	r5, #2
    495a:	d11c      	bne.n	4996 <onoff_request+0x92>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    495c:	3301      	adds	r3, #1
    495e:	83e3      	strh	r3, [r4, #30]
	rv = state;
    4960:	462e      	mov	r6, r5
		notify = true;
    4962:	2701      	movs	r7, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4964:	4648      	mov	r0, r9
    4966:	f01f f9ad 	bl	23cc4 <z_spin_unlock_valid>
    496a:	b940      	cbnz	r0, 497e <onoff_request+0x7a>
    496c:	4923      	ldr	r1, [pc, #140]	; (49fc <onoff_request+0xf8>)
    496e:	4824      	ldr	r0, [pc, #144]	; (4a00 <onoff_request+0xfc>)
    4970:	22a7      	movs	r2, #167	; 0xa7
    4972:	f022 fafc 	bl	26f6e <printk>
    4976:	21a7      	movs	r1, #167	; 0xa7
    4978:	4820      	ldr	r0, [pc, #128]	; (49fc <onoff_request+0xf8>)
    497a:	f022 fd71 	bl	27460 <assert_post_action>
	__asm__ volatile(
    497e:	f38a 8811 	msr	BASEPRI, sl
    4982:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    4986:	b1c7      	cbz	r7, 49ba <onoff_request+0xb6>
			notify_one(mgr, cli, state, 0);
    4988:	2300      	movs	r3, #0
    498a:	462a      	mov	r2, r5
    498c:	4641      	mov	r1, r8
    498e:	4620      	mov	r0, r4
    4990:	f022 fb23 	bl	26fda <notify_one>
    4994:	e011      	b.n	49ba <onoff_request+0xb6>
	} else if ((state == ONOFF_STATE_OFF)
    4996:	0793      	lsls	r3, r2, #30
    4998:	d001      	beq.n	499e <onoff_request+0x9a>
		   || (state == ONOFF_STATE_TO_ON)) {
    499a:	2d06      	cmp	r5, #6
    499c:	d110      	bne.n	49c0 <onoff_request+0xbc>
	parent->next = child;
    499e:	2300      	movs	r3, #0
    49a0:	f8c8 3000 	str.w	r3, [r8]
Z_GENLIST_APPEND(slist, snode)
    49a4:	6863      	ldr	r3, [r4, #4]
    49a6:	b9eb      	cbnz	r3, 49e4 <onoff_request+0xe0>
	list->head = node;
    49a8:	e9c4 8800 	strd	r8, r8, [r4]
	if (start) {
    49ac:	462e      	mov	r6, r5
    49ae:	bb05      	cbnz	r5, 49f2 <onoff_request+0xee>
		process_event(mgr, EVT_RECHECK, key);
    49b0:	4652      	mov	r2, sl
    49b2:	2102      	movs	r1, #2
    49b4:	4620      	mov	r0, r4
    49b6:	f7ff fdc5 	bl	4544 <process_event>
		}
	}

	return rv;
}
    49ba:	4630      	mov	r0, r6
    49bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
    49c0:	2d05      	cmp	r5, #5
    49c2:	d018      	beq.n	49f6 <onoff_request+0xf2>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    49c4:	2d01      	cmp	r5, #1
    49c6:	d00a      	beq.n	49de <onoff_request+0xda>
    49c8:	490e      	ldr	r1, [pc, #56]	; (4a04 <onoff_request+0x100>)
    49ca:	480d      	ldr	r0, [pc, #52]	; (4a00 <onoff_request+0xfc>)
    49cc:	f240 12c5 	movw	r2, #453	; 0x1c5
    49d0:	f022 facd 	bl	26f6e <printk>
    49d4:	f240 11c5 	movw	r1, #453	; 0x1c5
    49d8:	480a      	ldr	r0, [pc, #40]	; (4a04 <onoff_request+0x100>)
    49da:	f022 fd41 	bl	27460 <assert_post_action>
		rv = -EIO;
    49de:	f06f 0604 	mvn.w	r6, #4
    49e2:	e006      	b.n	49f2 <onoff_request+0xee>
	parent->next = child;
    49e4:	f8c3 8000 	str.w	r8, [r3]
	list->tail = node;
    49e8:	f8c4 8004 	str.w	r8, [r4, #4]
    49ec:	e7de      	b.n	49ac <onoff_request+0xa8>
		rv = -EAGAIN;
    49ee:	f06f 060a 	mvn.w	r6, #10
    49f2:	2700      	movs	r7, #0
    49f4:	e7b6      	b.n	4964 <onoff_request+0x60>
		rv = -ENOTSUP;
    49f6:	f06f 0685 	mvn.w	r6, #133	; 0x85
    49fa:	e7fa      	b.n	49f2 <onoff_request+0xee>
    49fc:	0002fba8 	.word	0x0002fba8
    4a00:	0002fa94 	.word	0x0002fa94
    4a04:	0002fb86 	.word	0x0002fb86

00004a08 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
    4a08:	b570      	push	{r4, r5, r6, lr}
    4a0a:	4604      	mov	r4, r0
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    4a0c:	f100 0514 	add.w	r5, r0, #20
	__asm__ volatile(
    4a10:	f04f 0320 	mov.w	r3, #32
    4a14:	f3ef 8611 	mrs	r6, BASEPRI
    4a18:	f383 8811 	msr	BASEPRI, r3
    4a1c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4a20:	4628      	mov	r0, r5
    4a22:	f01f f941 	bl	23ca8 <z_spin_lock_valid>
    4a26:	b940      	cbnz	r0, 4a3a <onoff_release+0x32>
    4a28:	4922      	ldr	r1, [pc, #136]	; (4ab4 <onoff_release+0xac>)
    4a2a:	4823      	ldr	r0, [pc, #140]	; (4ab8 <onoff_release+0xb0>)
    4a2c:	227c      	movs	r2, #124	; 0x7c
    4a2e:	f022 fa9e 	bl	26f6e <printk>
    4a32:	217c      	movs	r1, #124	; 0x7c
    4a34:	481f      	ldr	r0, [pc, #124]	; (4ab4 <onoff_release+0xac>)
    4a36:	f022 fd13 	bl	27460 <assert_post_action>
	z_spin_lock_set_owner(l);
    4a3a:	4628      	mov	r0, r5
    4a3c:	f01f f952 	bl	23ce4 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4a40:	8ba3      	ldrh	r3, [r4, #28]
    4a42:	f003 0307 	and.w	r3, r3, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
    4a46:	2b02      	cmp	r3, #2
    4a48:	d017      	beq.n	4a7a <onoff_release+0x72>
		if (state == ONOFF_STATE_ERROR) {
    4a4a:	2b01      	cmp	r3, #1
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
    4a4c:	bf0c      	ite	eq
    4a4e:	f06f 0404 	mvneq.w	r4, #4
    4a52:	f06f 0485 	mvnne.w	r4, #133	; 0x85
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4a56:	4628      	mov	r0, r5
    4a58:	f01f f934 	bl	23cc4 <z_spin_unlock_valid>
    4a5c:	b940      	cbnz	r0, 4a70 <onoff_release+0x68>
    4a5e:	4915      	ldr	r1, [pc, #84]	; (4ab4 <onoff_release+0xac>)
    4a60:	4815      	ldr	r0, [pc, #84]	; (4ab8 <onoff_release+0xb0>)
    4a62:	22a7      	movs	r2, #167	; 0xa7
    4a64:	f022 fa83 	bl	26f6e <printk>
    4a68:	21a7      	movs	r1, #167	; 0xa7
    4a6a:	4812      	ldr	r0, [pc, #72]	; (4ab4 <onoff_release+0xac>)
    4a6c:	f022 fcf8 	bl	27460 <assert_post_action>
	__asm__ volatile(
    4a70:	f386 8811 	msr	BASEPRI, r6
    4a74:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
    4a78:	e017      	b.n	4aaa <onoff_release+0xa2>
	__ASSERT_NO_MSG(mgr->refs > 0);
    4a7a:	8be3      	ldrh	r3, [r4, #30]
    4a7c:	b953      	cbnz	r3, 4a94 <onoff_release+0x8c>
    4a7e:	490f      	ldr	r1, [pc, #60]	; (4abc <onoff_release+0xb4>)
    4a80:	480d      	ldr	r0, [pc, #52]	; (4ab8 <onoff_release+0xb0>)
    4a82:	f44f 72f6 	mov.w	r2, #492	; 0x1ec
    4a86:	f022 fa72 	bl	26f6e <printk>
    4a8a:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
    4a8e:	480b      	ldr	r0, [pc, #44]	; (4abc <onoff_release+0xb4>)
    4a90:	f022 fce6 	bl	27460 <assert_post_action>
	mgr->refs -= 1U;
    4a94:	8be3      	ldrh	r3, [r4, #30]
    4a96:	3b01      	subs	r3, #1
    4a98:	b29b      	uxth	r3, r3
    4a9a:	83e3      	strh	r3, [r4, #30]
	if (stop) {
    4a9c:	b93b      	cbnz	r3, 4aae <onoff_release+0xa6>
		process_event(mgr, EVT_RECHECK, key);
    4a9e:	4620      	mov	r0, r4
    4aa0:	4632      	mov	r2, r6
    4aa2:	2102      	movs	r1, #2
    4aa4:	f7ff fd4e 	bl	4544 <process_event>
	int rv = state;
    4aa8:	2402      	movs	r4, #2
}
    4aaa:	4620      	mov	r0, r4
    4aac:	bd70      	pop	{r4, r5, r6, pc}
	int rv = state;
    4aae:	2402      	movs	r4, #2
    4ab0:	e7d1      	b.n	4a56 <onoff_release+0x4e>
    4ab2:	bf00      	nop
    4ab4:	0002fba8 	.word	0x0002fba8
    4ab8:	0002fa94 	.word	0x0002fa94
    4abc:	0002fb86 	.word	0x0002fb86

00004ac0 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
    4ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (work == NULL) {
			continue;
		}

		handler = work->handler;
		__ASSERT(handler != NULL, "handler must be provided");
    4ac4:	4d16      	ldr	r5, [pc, #88]	; (4b20 <z_work_q_main+0x60>)
    4ac6:	f8df 805c 	ldr.w	r8, [pc, #92]	; 4b24 <z_work_q_main+0x64>
{
    4aca:	4607      	mov	r7, r0
	return z_impl_k_queue_get(queue, timeout);
    4acc:	f04f 32ff 	mov.w	r2, #4294967295
    4ad0:	f04f 33ff 	mov.w	r3, #4294967295
    4ad4:	4638      	mov	r0, r7
    4ad6:	f01d fe63 	bl	227a0 <z_impl_k_queue_get>
		if (work == NULL) {
    4ada:	4604      	mov	r4, r0
    4adc:	2800      	cmp	r0, #0
    4ade:	d0f5      	beq.n	4acc <z_work_q_main+0xc>
		handler = work->handler;
    4ae0:	6846      	ldr	r6, [r0, #4]
		__ASSERT(handler != NULL, "handler must be provided");
    4ae2:	b946      	cbnz	r6, 4af6 <z_work_q_main+0x36>
    4ae4:	4629      	mov	r1, r5
    4ae6:	4640      	mov	r0, r8
    4ae8:	221c      	movs	r2, #28
    4aea:	f022 fa40 	bl	26f6e <printk>
    4aee:	211c      	movs	r1, #28
    4af0:	4628      	mov	r0, r5
    4af2:	f022 fcb5 	bl	27460 <assert_post_action>
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4af6:	f3bf 8f5b 	dmb	ish
    4afa:	f104 0308 	add.w	r3, r4, #8
    4afe:	e853 2f00 	ldrex	r2, [r3]
    4b02:	f022 0101 	bic.w	r1, r2, #1
    4b06:	e843 1000 	strex	r0, r1, [r3]
    4b0a:	2800      	cmp	r0, #0
    4b0c:	d1f7      	bne.n	4afe <z_work_q_main+0x3e>
    4b0e:	f3bf 8f5b 	dmb	ish

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
    4b12:	07d3      	lsls	r3, r2, #31
    4b14:	d501      	bpl.n	4b1a <z_work_q_main+0x5a>
					      K_WORK_STATE_PENDING)) {
			handler(work);
    4b16:	4620      	mov	r0, r4
    4b18:	47b0      	blx	r6
	z_impl_k_yield();
    4b1a:	f01e fd6f 	bl	235fc <z_impl_k_yield>
    4b1e:	e7d5      	b.n	4acc <z_work_q_main+0xc>
    4b20:	0002fbce 	.word	0x0002fbce
    4b24:	0002fa94 	.word	0x0002fa94

00004b28 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
    4b28:	b570      	push	{r4, r5, r6, lr}
	if (mem == NULL) {
    4b2a:	2900      	cmp	r1, #0
    4b2c:	d037      	beq.n	4b9e <sys_heap_free+0x76>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
    4b2e:	6805      	ldr	r5, [r0, #0]
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
    4b30:	68ab      	ldr	r3, [r5, #8]
    4b32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    4b36:	bf2c      	ite	cs
    4b38:	2408      	movcs	r4, #8
    4b3a:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    4b3c:	1b0c      	subs	r4, r1, r4
    4b3e:	1b64      	subs	r4, r4, r5
    4b40:	08e4      	lsrs	r4, r4, #3

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
    4b42:	4621      	mov	r1, r4
    4b44:	4628      	mov	r0, r5
    4b46:	f022 fab4 	bl	270b2 <chunk_used>
    4b4a:	b940      	cbnz	r0, 4b5e <sys_heap_free+0x36>
    4b4c:	4914      	ldr	r1, [pc, #80]	; (4ba0 <sys_heap_free+0x78>)
    4b4e:	4815      	ldr	r0, [pc, #84]	; (4ba4 <sys_heap_free+0x7c>)
    4b50:	229b      	movs	r2, #155	; 0x9b
    4b52:	f022 fa0c 	bl	26f6e <printk>
    4b56:	219b      	movs	r1, #155	; 0x9b
    4b58:	4811      	ldr	r0, [pc, #68]	; (4ba0 <sys_heap_free+0x78>)
    4b5a:	f022 fc81 	bl	27460 <assert_post_action>
	return c + chunk_size(h, c);
    4b5e:	4621      	mov	r1, r4
    4b60:	4628      	mov	r0, r5
    4b62:	f022 faad 	bl	270c0 <chunk_size>
    4b66:	1826      	adds	r6, r4, r0
	return c - chunk_field(h, c, LEFT_SIZE);
    4b68:	2200      	movs	r2, #0
    4b6a:	4631      	mov	r1, r6
    4b6c:	4628      	mov	r0, r5
    4b6e:	f022 fa8a 	bl	27086 <chunk_field>
    4b72:	1a30      	subs	r0, r6, r0
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
    4b74:	4284      	cmp	r4, r0
    4b76:	d008      	beq.n	4b8a <sys_heap_free+0x62>
    4b78:	4909      	ldr	r1, [pc, #36]	; (4ba0 <sys_heap_free+0x78>)
    4b7a:	480a      	ldr	r0, [pc, #40]	; (4ba4 <sys_heap_free+0x7c>)
    4b7c:	22a4      	movs	r2, #164	; 0xa4
    4b7e:	f022 f9f6 	bl	26f6e <printk>
    4b82:	21a4      	movs	r1, #164	; 0xa4
    4b84:	4806      	ldr	r0, [pc, #24]	; (4ba0 <sys_heap_free+0x78>)
    4b86:	f022 fc6b 	bl	27460 <assert_post_action>
		 "corrupted heap bounds (buffer overflow?) for memory at %p",
		 mem);

	set_chunk_used(h, c, false);
    4b8a:	4621      	mov	r1, r4
    4b8c:	4628      	mov	r0, r5
    4b8e:	2200      	movs	r2, #0
    4b90:	f022 fa9c 	bl	270cc <set_chunk_used>
	free_chunk(h, c);
    4b94:	4621      	mov	r1, r4
}
    4b96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	free_chunk(h, c);
    4b9a:	f022 bbda 	b.w	27352 <free_chunk>
}
    4b9e:	bd70      	pop	{r4, r5, r6, pc}
    4ba0:	0002fbf1 	.word	0x0002fbf1
    4ba4:	0002fa94 	.word	0x0002fa94

00004ba8 <sys_heap_aligned_alloc>:
	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    4ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct z_heap *h = heap->heap;

	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    4bac:	f101 3aff 	add.w	sl, r1, #4294967295
    4bb0:	ea1a 0f01 	tst.w	sl, r1
{
    4bb4:	4606      	mov	r6, r0
    4bb6:	4689      	mov	r9, r1
    4bb8:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
    4bba:	6805      	ldr	r5, [r0, #0]
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    4bbc:	d008      	beq.n	4bd0 <sys_heap_aligned_alloc+0x28>
    4bbe:	4932      	ldr	r1, [pc, #200]	; (4c88 <sys_heap_aligned_alloc+0xe0>)
    4bc0:	4832      	ldr	r0, [pc, #200]	; (4c8c <sys_heap_aligned_alloc+0xe4>)
    4bc2:	22fc      	movs	r2, #252	; 0xfc
    4bc4:	f022 f9d3 	bl	26f6e <printk>
    4bc8:	21fc      	movs	r1, #252	; 0xfc
    4bca:	482f      	ldr	r0, [pc, #188]	; (4c88 <sys_heap_aligned_alloc+0xe0>)
    4bcc:	f022 fc48 	bl	27460 <assert_post_action>
	return big_heap(h) ? 8 : 4;
    4bd0:	68aa      	ldr	r2, [r5, #8]
    4bd2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    4bd6:	bf2c      	ite	cs
    4bd8:	2308      	movcs	r3, #8
    4bda:	2304      	movcc	r3, #4

	if (align <= chunk_header_bytes(h)) {
    4bdc:	4599      	cmp	r9, r3
    4bde:	d805      	bhi.n	4bec <sys_heap_aligned_alloc+0x44>
		return sys_heap_alloc(heap, bytes);
    4be0:	4621      	mov	r1, r4
    4be2:	4630      	mov	r0, r6
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
    4be4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return sys_heap_alloc(heap, bytes);
    4be8:	f022 bbf1 	b.w	273ce <sys_heap_alloc>
	if (bytes == 0 || size_too_big(h, bytes)) {
    4bec:	b91c      	cbnz	r4, 4bf6 <sys_heap_aligned_alloc+0x4e>
		return NULL;
    4bee:	2700      	movs	r7, #0
}
    4bf0:	4638      	mov	r0, r7
    4bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (bytes == 0 || size_too_big(h, bytes)) {
    4bf6:	ebb2 0fd4 	cmp.w	r2, r4, lsr #3
    4bfa:	d9f8      	bls.n	4bee <sys_heap_aligned_alloc+0x46>
		bytes_to_chunksz(h, bytes + align - chunk_header_bytes(h));
    4bfc:	eb09 0104 	add.w	r1, r9, r4
    4c00:	1ac9      	subs	r1, r1, r3
    4c02:	4628      	mov	r0, r5
    4c04:	f022 fa7e 	bl	27104 <bytes_to_chunksz>
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    4c08:	4601      	mov	r1, r0
    4c0a:	4628      	mov	r0, r5
    4c0c:	f022 fb1b 	bl	27246 <alloc_chunk>
	if (c0 == 0) {
    4c10:	4680      	mov	r8, r0
    4c12:	2800      	cmp	r0, #0
    4c14:	d0eb      	beq.n	4bee <sys_heap_aligned_alloc+0x46>
    4c16:	68ab      	ldr	r3, [r5, #8]
    4c18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    4c1c:	bf2c      	ite	cs
    4c1e:	2608      	movcs	r6, #8
    4c20:	2604      	movcc	r6, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    4c22:	eb06 07c0 	add.w	r7, r6, r0, lsl #3
    4c26:	442f      	add	r7, r5
	uint8_t *mem = (uint8_t *) ROUND_UP(chunk_mem(h, c0), align);
    4c28:	4457      	add	r7, sl
    4c2a:	f1c9 0900 	rsb	r9, r9, #0
    4c2e:	ea07 0709 	and.w	r7, r7, r9
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    4c32:	1bbe      	subs	r6, r7, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    4c34:	443c      	add	r4, r7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    4c36:	1b76      	subs	r6, r6, r5
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    4c38:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    4c3a:	08f6      	lsrs	r6, r6, #3
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    4c3c:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    4c40:	1b64      	subs	r4, r4, r5
	if (c > c0) {
    4c42:	42b0      	cmp	r0, r6
	chunkid_t c_end = end - chunk_buf(h);
    4c44:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    4c48:	d208      	bcs.n	4c5c <sys_heap_aligned_alloc+0xb4>
		split_chunks(h, c0, c);
    4c4a:	4601      	mov	r1, r0
    4c4c:	4632      	mov	r2, r6
    4c4e:	4628      	mov	r0, r5
    4c50:	f022 fa8c 	bl	2716c <split_chunks>
		free_list_add(h, c0);
    4c54:	4641      	mov	r1, r8
    4c56:	4628      	mov	r0, r5
    4c58:	f022 fb36 	bl	272c8 <free_list_add>
	return c + chunk_size(h, c);
    4c5c:	4631      	mov	r1, r6
    4c5e:	4628      	mov	r0, r5
    4c60:	f022 fa2e 	bl	270c0 <chunk_size>
    4c64:	4430      	add	r0, r6
	if (right_chunk(h, c) > c_end) {
    4c66:	4284      	cmp	r4, r0
    4c68:	d208      	bcs.n	4c7c <sys_heap_aligned_alloc+0xd4>
		split_chunks(h, c, c_end);
    4c6a:	4631      	mov	r1, r6
    4c6c:	4628      	mov	r0, r5
    4c6e:	4622      	mov	r2, r4
    4c70:	f022 fa7c 	bl	2716c <split_chunks>
		free_list_add(h, c_end);
    4c74:	4621      	mov	r1, r4
    4c76:	4628      	mov	r0, r5
    4c78:	f022 fb26 	bl	272c8 <free_list_add>
	set_chunk_used(h, c, true);
    4c7c:	2201      	movs	r2, #1
    4c7e:	4631      	mov	r1, r6
    4c80:	4628      	mov	r0, r5
    4c82:	f022 fa23 	bl	270cc <set_chunk_used>
	return mem;
    4c86:	e7b3      	b.n	4bf0 <sys_heap_aligned_alloc+0x48>
    4c88:	0002fbf1 	.word	0x0002fbf1
    4c8c:	0002fa94 	.word	0x0002fa94

00004c90 <sys_heap_init>:
}

static inline size_t heap_footer_bytes(size_t size)
{
	return big_heap_bytes(size) ? 8 : 4;
    4c90:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
		return ptr2;
	}
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    4c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4c96:	4607      	mov	r7, r0
    4c98:	460d      	mov	r5, r1
    4c9a:	4616      	mov	r6, r2
    4c9c:	d20e      	bcs.n	4cbc <sys_heap_init+0x2c>
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    4c9e:	2a04      	cmp	r2, #4
    4ca0:	d80a      	bhi.n	4cb8 <sys_heap_init+0x28>
    4ca2:	493d      	ldr	r1, [pc, #244]	; (4d98 <sys_heap_init+0x108>)
    4ca4:	483d      	ldr	r0, [pc, #244]	; (4d9c <sys_heap_init+0x10c>)
    4ca6:	f44f 72b6 	mov.w	r2, #364	; 0x16c
    4caa:	f022 f960 	bl	26f6e <printk>
    4cae:	f44f 71b6 	mov.w	r1, #364	; 0x16c
    4cb2:	4839      	ldr	r0, [pc, #228]	; (4d98 <sys_heap_init+0x108>)
    4cb4:	f022 fbd4 	bl	27460 <assert_post_action>
    4cb8:	2304      	movs	r3, #4
    4cba:	e000      	b.n	4cbe <sys_heap_init+0x2e>
    4cbc:	2308      	movs	r3, #8
	bytes -= heap_footer_bytes(bytes);
    4cbe:	1af6      	subs	r6, r6, r3

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    4cc0:	1dec      	adds	r4, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    4cc2:	4435      	add	r5, r6
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    4cc4:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    4cc8:	f025 0507 	bic.w	r5, r5, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    4ccc:	1b2d      	subs	r5, r5, r4

	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    4cce:	2d17      	cmp	r5, #23
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    4cd0:	ea4f 06d5 	mov.w	r6, r5, lsr #3
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    4cd4:	d80a      	bhi.n	4cec <sys_heap_init+0x5c>
    4cd6:	4930      	ldr	r1, [pc, #192]	; (4d98 <sys_heap_init+0x108>)
    4cd8:	4830      	ldr	r0, [pc, #192]	; (4d9c <sys_heap_init+0x10c>)
    4cda:	f240 1275 	movw	r2, #373	; 0x175
    4cde:	f022 f946 	bl	26f6e <printk>
    4ce2:	f240 1175 	movw	r1, #373	; 0x175
    4ce6:	482c      	ldr	r0, [pc, #176]	; (4d98 <sys_heap_init+0x108>)
    4ce8:	f022 fbba 	bl	27460 <assert_post_action>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
    4cec:	2200      	movs	r2, #0
    4cee:	2300      	movs	r3, #0
	heap->heap = h;
    4cf0:	603c      	str	r4, [r7, #0]
	h->chunk0_hdr_area = 0;
    4cf2:	e9c4 2300 	strd	r2, r3, [r4]
	h->len = buf_sz;
	h->avail_buckets = 0;
    4cf6:	2300      	movs	r3, #0
    4cf8:	60e3      	str	r3, [r4, #12]

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    4cfa:	4631      	mov	r1, r6
	h->len = buf_sz;
    4cfc:	60a6      	str	r6, [r4, #8]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    4cfe:	4620      	mov	r0, r4
    4d00:	f022 fa0a 	bl	27118 <bucket_idx>
	return chunksz(chunk_header_bytes(h) + bytes);
}

static inline int min_chunk_size(struct z_heap *h)
{
	return bytes_to_chunksz(h, 1);
    4d04:	2101      	movs	r1, #1
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
    4d06:	0085      	lsls	r5, r0, #2
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    4d08:	1c47      	adds	r7, r0, #1
    4d0a:	4620      	mov	r0, r4
    4d0c:	f022 f9fa 	bl	27104 <bytes_to_chunksz>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    4d10:	351b      	adds	r5, #27
    4d12:	08ed      	lsrs	r5, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");
    4d14:	4428      	add	r0, r5
    4d16:	42b0      	cmp	r0, r6
    4d18:	d30a      	bcc.n	4d30 <sys_heap_init+0xa0>
    4d1a:	491f      	ldr	r1, [pc, #124]	; (4d98 <sys_heap_init+0x108>)
    4d1c:	481f      	ldr	r0, [pc, #124]	; (4d9c <sys_heap_init+0x10c>)
    4d1e:	f240 1281 	movw	r2, #385	; 0x181
    4d22:	f022 f924 	bl	26f6e <printk>
    4d26:	f240 1181 	movw	r1, #385	; 0x181
    4d2a:	481b      	ldr	r0, [pc, #108]	; (4d98 <sys_heap_init+0x108>)
    4d2c:	f022 fb98 	bl	27460 <assert_post_action>
	return big_heap_bytes(size) ? 8 : 4;
    4d30:	2300      	movs	r3, #0
    4d32:	f104 0210 	add.w	r2, r4, #16

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
    4d36:	4619      	mov	r1, r3
	for (int i = 0; i < nb_buckets; i++) {
    4d38:	42bb      	cmp	r3, r7
    4d3a:	db29      	blt.n	4d90 <sys_heap_init+0x100>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
    4d3c:	462a      	mov	r2, r5
    4d3e:	4620      	mov	r0, r4
    4d40:	2100      	movs	r1, #0
    4d42:	f022 f9db 	bl	270fc <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    4d46:	1b77      	subs	r7, r6, r5
	set_chunk_used(h, 0, true);
    4d48:	4620      	mov	r0, r4
    4d4a:	2201      	movs	r2, #1
    4d4c:	2100      	movs	r1, #0
    4d4e:	f022 f9bd 	bl	270cc <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    4d52:	463a      	mov	r2, r7
    4d54:	4629      	mov	r1, r5
    4d56:	f022 f9d1 	bl	270fc <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
    4d5a:	462b      	mov	r3, r5
    4d5c:	4629      	mov	r1, r5
    4d5e:	4620      	mov	r0, r4
    4d60:	2200      	movs	r2, #0
    4d62:	f022 f99b 	bl	2709c <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
    4d66:	4631      	mov	r1, r6
    4d68:	4620      	mov	r0, r4
    4d6a:	2200      	movs	r2, #0
    4d6c:	f022 f9c6 	bl	270fc <set_chunk_size>
    4d70:	463b      	mov	r3, r7
    4d72:	4631      	mov	r1, r6
    4d74:	4620      	mov	r0, r4
    4d76:	2200      	movs	r2, #0
    4d78:	f022 f990 	bl	2709c <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
    4d7c:	4631      	mov	r1, r6
    4d7e:	4620      	mov	r0, r4
    4d80:	2201      	movs	r2, #1
    4d82:	f022 f9a3 	bl	270cc <set_chunk_used>

	free_list_add(h, chunk0_size);
    4d86:	4629      	mov	r1, r5
}
    4d88:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
    4d8c:	f022 ba9c 	b.w	272c8 <free_list_add>
		h->buckets[i].next = 0;
    4d90:	f842 1b04 	str.w	r1, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
    4d94:	3301      	adds	r3, #1
    4d96:	e7cf      	b.n	4d38 <sys_heap_init+0xa8>
    4d98:	0002fbf1 	.word	0x0002fbf1
    4d9c:	0002fa94 	.word	0x0002fa94

00004da0 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    4da0:	b5f0      	push	{r4, r5, r6, r7, lr}
    4da2:	6802      	ldr	r2, [r0, #0]
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
    4da4:	4e07      	ldr	r6, [pc, #28]	; (4dc4 <extract_decimal+0x24>)
	size_t val = 0;
    4da6:	2300      	movs	r3, #0
		val = 10U * val + *sp++ - '0';
    4da8:	270a      	movs	r7, #10
    4daa:	4611      	mov	r1, r2
    4dac:	3201      	adds	r2, #1
	while (isdigit((int)(unsigned char)*sp)) {
    4dae:	780c      	ldrb	r4, [r1, #0]
    4db0:	5da5      	ldrb	r5, [r4, r6]
    4db2:	076d      	lsls	r5, r5, #29
    4db4:	d402      	bmi.n	4dbc <extract_decimal+0x1c>
	}
	*str = sp;
    4db6:	6001      	str	r1, [r0, #0]
	return val;
}
    4db8:	4618      	mov	r0, r3
    4dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
    4dbc:	fb07 4303 	mla	r3, r7, r3, r4
    4dc0:	3b30      	subs	r3, #48	; 0x30
    4dc2:	e7f2      	b.n	4daa <extract_decimal+0xa>
    4dc4:	00035d11 	.word	0x00035d11

00004dc8 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    4dc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4dcc:	4614      	mov	r4, r2
    4dce:	9301      	str	r3, [sp, #4]
	bool upcase = isupper((int)conv->specifier);
    4dd0:	78d3      	ldrb	r3, [r2, #3]
    4dd2:	4a25      	ldr	r2, [pc, #148]	; (4e68 <encode_uint+0xa0>)
    4dd4:	f813 9002 	ldrb.w	r9, [r3, r2]
	switch (specifier) {
    4dd8:	2b6f      	cmp	r3, #111	; 0x6f
{
    4dda:	4606      	mov	r6, r0
    4ddc:	460f      	mov	r7, r1
    4dde:	f009 0903 	and.w	r9, r9, #3
	switch (specifier) {
    4de2:	d02e      	beq.n	4e42 <encode_uint+0x7a>
    4de4:	d829      	bhi.n	4e3a <encode_uint+0x72>
		return 10;
    4de6:	2b58      	cmp	r3, #88	; 0x58
    4de8:	bf0c      	ite	eq
    4dea:	2510      	moveq	r5, #16
    4dec:	250a      	movne	r5, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    4dee:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30

	do {
		unsigned int lsv = (unsigned int)(value % radix);
    4df2:	46aa      	mov	sl, r5
    4df4:	f04f 0b00 	mov.w	fp, #0
    4df8:	4652      	mov	r2, sl
    4dfa:	465b      	mov	r3, fp
    4dfc:	4630      	mov	r0, r6
    4dfe:	4639      	mov	r1, r7
    4e00:	f7fc fe14 	bl	1a2c <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
    4e04:	2a09      	cmp	r2, #9
    4e06:	b2d3      	uxtb	r3, r2
    4e08:	d822      	bhi.n	4e50 <encode_uint+0x88>
    4e0a:	3330      	adds	r3, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
    4e0c:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4e0e:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
    4e10:	bf08      	it	eq
    4e12:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4e14:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
    4e18:	d302      	bcc.n	4e20 <encode_uint+0x58>
    4e1a:	9b01      	ldr	r3, [sp, #4]
    4e1c:	4598      	cmp	r8, r3
    4e1e:	d814      	bhi.n	4e4a <encode_uint+0x82>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    4e20:	7823      	ldrb	r3, [r4, #0]
    4e22:	069b      	lsls	r3, r3, #26
    4e24:	d505      	bpl.n	4e32 <encode_uint+0x6a>
		if (radix == 8) {
    4e26:	2d08      	cmp	r5, #8
    4e28:	d118      	bne.n	4e5c <encode_uint+0x94>
			conv->altform_0 = true;
    4e2a:	78a3      	ldrb	r3, [r4, #2]
    4e2c:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
    4e30:	70a3      	strb	r3, [r4, #2]
		}
	}

	return bp;
}
    4e32:	4640      	mov	r0, r8
    4e34:	b003      	add	sp, #12
    4e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    4e3a:	2b70      	cmp	r3, #112	; 0x70
    4e3c:	d003      	beq.n	4e46 <encode_uint+0x7e>
		return 10;
    4e3e:	2b78      	cmp	r3, #120	; 0x78
    4e40:	e7d2      	b.n	4de8 <encode_uint+0x20>
		return 8;
    4e42:	2508      	movs	r5, #8
    4e44:	e7d3      	b.n	4dee <encode_uint+0x26>
		return 16;
    4e46:	2510      	movs	r5, #16
    4e48:	e7d1      	b.n	4dee <encode_uint+0x26>
		value /= radix;
    4e4a:	4606      	mov	r6, r0
    4e4c:	460f      	mov	r7, r1
    4e4e:	e7d3      	b.n	4df8 <encode_uint+0x30>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4e50:	f1b9 0f01 	cmp.w	r9, #1
    4e54:	bf0c      	ite	eq
    4e56:	3337      	addeq	r3, #55	; 0x37
    4e58:	3357      	addne	r3, #87	; 0x57
    4e5a:	e7d7      	b.n	4e0c <encode_uint+0x44>
		} else if (radix == 16) {
    4e5c:	2d10      	cmp	r5, #16
    4e5e:	d1e8      	bne.n	4e32 <encode_uint+0x6a>
			conv->altform_0c = true;
    4e60:	78a3      	ldrb	r3, [r4, #2]
    4e62:	f043 0310 	orr.w	r3, r3, #16
    4e66:	e7e3      	b.n	4e30 <encode_uint+0x68>
    4e68:	00035d11 	.word	0x00035d11

00004e6c <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    4e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4e70:	4681      	mov	r9, r0
    4e72:	b093      	sub	sp, #76	; 0x4c
    4e74:	468a      	mov	sl, r1
    4e76:	4693      	mov	fp, r2
    4e78:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    4e7a:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    4e7c:	f89b 0000 	ldrb.w	r0, [fp]
    4e80:	b908      	cbnz	r0, 4e86 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    4e82:	4628      	mov	r0, r5
    4e84:	e2d9      	b.n	543a <cbvprintf+0x5ce>
		if (*fp != '%') {
    4e86:	f10b 0301 	add.w	r3, fp, #1
    4e8a:	2825      	cmp	r0, #37	; 0x25
    4e8c:	9302      	str	r3, [sp, #8]
    4e8e:	d006      	beq.n	4e9e <cbvprintf+0x32>
			OUTC('%');
    4e90:	4651      	mov	r1, sl
    4e92:	47c8      	blx	r9
    4e94:	2800      	cmp	r0, #0
    4e96:	f2c0 82d0 	blt.w	543a <cbvprintf+0x5ce>
    4e9a:	3501      	adds	r5, #1
			break;
    4e9c:	e1b2      	b.n	5204 <cbvprintf+0x398>
		} state = {
    4e9e:	2218      	movs	r2, #24
    4ea0:	2100      	movs	r1, #0
    4ea2:	a80c      	add	r0, sp, #48	; 0x30
    4ea4:	f028 fba9 	bl	2d5fa <memset>
	if (*sp == '%') {
    4ea8:	f89b 3001 	ldrb.w	r3, [fp, #1]
    4eac:	2b25      	cmp	r3, #37	; 0x25
    4eae:	d055      	beq.n	4f5c <cbvprintf+0xf0>
    4eb0:	9a02      	ldr	r2, [sp, #8]
    4eb2:	4616      	mov	r6, r2
		switch (*sp) {
    4eb4:	f812 3b01 	ldrb.w	r3, [r2], #1
    4eb8:	2b2b      	cmp	r3, #43	; 0x2b
    4eba:	f000 8087 	beq.w	4fcc <cbvprintf+0x160>
    4ebe:	d875      	bhi.n	4fac <cbvprintf+0x140>
    4ec0:	2b20      	cmp	r3, #32
    4ec2:	f000 8088 	beq.w	4fd6 <cbvprintf+0x16a>
    4ec6:	2b23      	cmp	r3, #35	; 0x23
    4ec8:	f000 808a 	beq.w	4fe0 <cbvprintf+0x174>
	if (conv->flag_zero && conv->flag_dash) {
    4ecc:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    4ed0:	f003 0244 	and.w	r2, r3, #68	; 0x44
    4ed4:	2a44      	cmp	r2, #68	; 0x44
    4ed6:	d103      	bne.n	4ee0 <cbvprintf+0x74>
		conv->flag_zero = false;
    4ed8:	f36f 1386 	bfc	r3, #6, #1
    4edc:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	conv->width_present = true;
    4ee0:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    4ee4:	9605      	str	r6, [sp, #20]
    4ee6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    4eea:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	if (*sp == '*') {
    4eee:	7833      	ldrb	r3, [r6, #0]
    4ef0:	2b2a      	cmp	r3, #42	; 0x2a
    4ef2:	d17a      	bne.n	4fea <cbvprintf+0x17e>
		conv->width_star = true;
    4ef4:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    4ef8:	f043 0301 	orr.w	r3, r3, #1
    4efc:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		return ++sp;
    4f00:	1c72      	adds	r2, r6, #1
	sp = extract_prec(conv, sp);
    4f02:	9205      	str	r2, [sp, #20]
	conv->prec_present = (*sp == '.');
    4f04:	7813      	ldrb	r3, [r2, #0]
    4f06:	2b2e      	cmp	r3, #46	; 0x2e
    4f08:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    4f0c:	bf0c      	ite	eq
    4f0e:	2101      	moveq	r1, #1
    4f10:	2100      	movne	r1, #0
    4f12:	f361 0341 	bfi	r3, r1, #1, #1
    4f16:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
	if (!conv->prec_present) {
    4f1a:	d10b      	bne.n	4f34 <cbvprintf+0xc8>
	++sp;
    4f1c:	1c53      	adds	r3, r2, #1
    4f1e:	9305      	str	r3, [sp, #20]
	if (*sp == '*') {
    4f20:	7853      	ldrb	r3, [r2, #1]
    4f22:	2b2a      	cmp	r3, #42	; 0x2a
    4f24:	d175      	bne.n	5012 <cbvprintf+0x1a6>
		conv->prec_star = true;
    4f26:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    4f2a:	f043 0304 	orr.w	r3, r3, #4
    4f2e:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		return ++sp;
    4f32:	3202      	adds	r2, #2
	switch (*sp) {
    4f34:	4611      	mov	r1, r2
    4f36:	f811 0b01 	ldrb.w	r0, [r1], #1
    4f3a:	286a      	cmp	r0, #106	; 0x6a
    4f3c:	f000 80b6 	beq.w	50ac <cbvprintf+0x240>
    4f40:	d877      	bhi.n	5032 <cbvprintf+0x1c6>
    4f42:	284c      	cmp	r0, #76	; 0x4c
    4f44:	f000 80ba 	beq.w	50bc <cbvprintf+0x250>
    4f48:	2868      	cmp	r0, #104	; 0x68
    4f4a:	d07f      	beq.n	504c <cbvprintf+0x1e0>
		conv->length_mod = LENGTH_NONE;
    4f4c:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    4f50:	f36f 03c6 	bfc	r3, #3, #4
    4f54:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    4f58:	4611      	mov	r1, r2
    4f5a:	e082      	b.n	5062 <cbvprintf+0x1f6>
		conv->specifier = *sp++;
    4f5c:	f10b 0202 	add.w	r2, fp, #2
    4f60:	9202      	str	r2, [sp, #8]
    4f62:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
    4f66:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    4f6a:	07d9      	lsls	r1, r3, #31
    4f6c:	f140 810e 	bpl.w	518c <cbvprintf+0x320>
			width = va_arg(ap, int);
    4f70:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
    4f74:	f1b8 0f00 	cmp.w	r8, #0
    4f78:	da07      	bge.n	4f8a <cbvprintf+0x11e>
				conv->flag_dash = true;
    4f7a:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    4f7e:	f042 0204 	orr.w	r2, r2, #4
    4f82:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				width = -width;
    4f86:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
    4f8a:	075a      	lsls	r2, r3, #29
    4f8c:	f140 8107 	bpl.w	519e <cbvprintf+0x332>
			int arg = va_arg(ap, int);
    4f90:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
    4f94:	2f00      	cmp	r7, #0
    4f96:	f280 8106 	bge.w	51a6 <cbvprintf+0x33a>
				conv->prec_present = false;
    4f9a:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    4f9e:	f36f 0341 	bfc	r3, #1, #1
    4fa2:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
    4fa6:	f04f 37ff 	mov.w	r7, #4294967295
    4faa:	e0fc      	b.n	51a6 <cbvprintf+0x33a>
		switch (*sp) {
    4fac:	2b2d      	cmp	r3, #45	; 0x2d
    4fae:	d006      	beq.n	4fbe <cbvprintf+0x152>
    4fb0:	2b30      	cmp	r3, #48	; 0x30
    4fb2:	d18b      	bne.n	4ecc <cbvprintf+0x60>
			conv->flag_zero = true;
    4fb4:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    4fb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4fbc:	e003      	b.n	4fc6 <cbvprintf+0x15a>
			conv->flag_dash = true;
    4fbe:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    4fc2:	f043 0304 	orr.w	r3, r3, #4
			conv->flag_zero = true;
    4fc6:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
			++sp;
    4fca:	e772      	b.n	4eb2 <cbvprintf+0x46>
			conv->flag_plus = true;
    4fcc:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    4fd0:	f043 0308 	orr.w	r3, r3, #8
    4fd4:	e7f7      	b.n	4fc6 <cbvprintf+0x15a>
			conv->flag_space = true;
    4fd6:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    4fda:	f043 0310 	orr.w	r3, r3, #16
    4fde:	e7f2      	b.n	4fc6 <cbvprintf+0x15a>
			conv->flag_hash = true;
    4fe0:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    4fe4:	f043 0320 	orr.w	r3, r3, #32
    4fe8:	e7ed      	b.n	4fc6 <cbvprintf+0x15a>
	size_t width = extract_decimal(&sp);
    4fea:	a805      	add	r0, sp, #20
    4fec:	f7ff fed8 	bl	4da0 <extract_decimal>
	if (sp != wp) {
    4ff0:	9a05      	ldr	r2, [sp, #20]
    4ff2:	42b2      	cmp	r2, r6
    4ff4:	d085      	beq.n	4f02 <cbvprintf+0x96>
		conv->width_present = true;
    4ff6:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
		conv->width_value = width;
    4ffa:	900f      	str	r0, [sp, #60]	; 0x3c
		conv->unsupported |= ((conv->width_value < 0)
    4ffc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    5000:	f3c3 0140 	ubfx	r1, r3, #1, #1
    5004:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
    5008:	f361 0341 	bfi	r3, r1, #1, #1
    500c:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    5010:	e777      	b.n	4f02 <cbvprintf+0x96>
	size_t prec = extract_decimal(&sp);
    5012:	a805      	add	r0, sp, #20
    5014:	f7ff fec4 	bl	4da0 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
    5018:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	conv->prec_value = prec;
    501c:	9010      	str	r0, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
    501e:	f3c3 0240 	ubfx	r2, r3, #1, #1
    5022:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
    5026:	f362 0341 	bfi	r3, r2, #1, #1
    502a:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	return sp;
    502e:	9a05      	ldr	r2, [sp, #20]
    5030:	e780      	b.n	4f34 <cbvprintf+0xc8>
	switch (*sp) {
    5032:	2874      	cmp	r0, #116	; 0x74
    5034:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    5038:	d03e      	beq.n	50b8 <cbvprintf+0x24c>
    503a:	287a      	cmp	r0, #122	; 0x7a
    503c:	d03a      	beq.n	50b4 <cbvprintf+0x248>
    503e:	286c      	cmp	r0, #108	; 0x6c
    5040:	d184      	bne.n	4f4c <cbvprintf+0xe0>
		if (*++sp == 'l') {
    5042:	7850      	ldrb	r0, [r2, #1]
    5044:	286c      	cmp	r0, #108	; 0x6c
    5046:	d12f      	bne.n	50a8 <cbvprintf+0x23c>
			conv->length_mod = LENGTH_LL;
    5048:	2104      	movs	r1, #4
    504a:	e005      	b.n	5058 <cbvprintf+0x1ec>
		if (*++sp == 'h') {
    504c:	7853      	ldrb	r3, [r2, #1]
    504e:	2b68      	cmp	r3, #104	; 0x68
    5050:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    5054:	d122      	bne.n	509c <cbvprintf+0x230>
			conv->length_mod = LENGTH_HH;
    5056:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    5058:	f361 03c6 	bfi	r3, r1, #3, #4
    505c:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
			++sp;
    5060:	1c91      	adds	r1, r2, #2
	conv->specifier = *sp++;
    5062:	460b      	mov	r3, r1
    5064:	f813 2b01 	ldrb.w	r2, [r3], #1
    5068:	9302      	str	r3, [sp, #8]
	switch (conv->specifier) {
    506a:	2a67      	cmp	r2, #103	; 0x67
	conv->specifier = *sp++;
    506c:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
    5070:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    5074:	d83d      	bhi.n	50f2 <cbvprintf+0x286>
    5076:	2a65      	cmp	r2, #101	; 0x65
    5078:	d232      	bcs.n	50e0 <cbvprintf+0x274>
    507a:	2a58      	cmp	r2, #88	; 0x58
    507c:	d074      	beq.n	5168 <cbvprintf+0x2fc>
    507e:	d82a      	bhi.n	50d6 <cbvprintf+0x26a>
    5080:	2a41      	cmp	r2, #65	; 0x41
    5082:	d02d      	beq.n	50e0 <cbvprintf+0x274>
    5084:	d302      	bcc.n	508c <cbvprintf+0x220>
    5086:	3a45      	subs	r2, #69	; 0x45
    5088:	2a02      	cmp	r2, #2
    508a:	d929      	bls.n	50e0 <cbvprintf+0x274>
		conv->invalid = true;
    508c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    5090:	f043 0301 	orr.w	r3, r3, #1
    5094:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	bool unsupported = false;
    5098:	2300      	movs	r3, #0
    509a:	e048      	b.n	512e <cbvprintf+0x2c2>
			conv->length_mod = LENGTH_H;
    509c:	2202      	movs	r2, #2
			conv->length_mod = LENGTH_L;
    509e:	f362 03c6 	bfi	r3, r2, #3, #4
    50a2:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    50a6:	e7dc      	b.n	5062 <cbvprintf+0x1f6>
    50a8:	2203      	movs	r2, #3
    50aa:	e7f8      	b.n	509e <cbvprintf+0x232>
		conv->length_mod = LENGTH_J;
    50ac:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    50b0:	2205      	movs	r2, #5
    50b2:	e7f4      	b.n	509e <cbvprintf+0x232>
		conv->length_mod = LENGTH_Z;
    50b4:	2206      	movs	r2, #6
    50b6:	e7f2      	b.n	509e <cbvprintf+0x232>
		conv->length_mod = LENGTH_T;
    50b8:	2207      	movs	r2, #7
    50ba:	e7f0      	b.n	509e <cbvprintf+0x232>
		conv->unsupported = true;
    50bc:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    50c0:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    50c4:	f023 0302 	bic.w	r3, r3, #2
    50c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    50cc:	f043 0302 	orr.w	r3, r3, #2
    50d0:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
    50d4:	e7c5      	b.n	5062 <cbvprintf+0x1f6>
	switch (conv->specifier) {
    50d6:	2a63      	cmp	r2, #99	; 0x63
    50d8:	d046      	beq.n	5168 <cbvprintf+0x2fc>
    50da:	d812      	bhi.n	5102 <cbvprintf+0x296>
    50dc:	2a61      	cmp	r2, #97	; 0x61
    50de:	d1d5      	bne.n	508c <cbvprintf+0x220>
		conv->specifier_cat = SPECIFIER_FP;
    50e0:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    50e4:	2204      	movs	r2, #4
    50e6:	f362 0302 	bfi	r3, r2, #0, #3
    50ea:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			unsupported = true;
    50ee:	2301      	movs	r3, #1
    50f0:	e01d      	b.n	512e <cbvprintf+0x2c2>
	switch (conv->specifier) {
    50f2:	2a70      	cmp	r2, #112	; 0x70
    50f4:	d02b      	beq.n	514e <cbvprintf+0x2e2>
    50f6:	d824      	bhi.n	5142 <cbvprintf+0x2d6>
    50f8:	2a6e      	cmp	r2, #110	; 0x6e
    50fa:	d039      	beq.n	5170 <cbvprintf+0x304>
    50fc:	d834      	bhi.n	5168 <cbvprintf+0x2fc>
    50fe:	2a69      	cmp	r2, #105	; 0x69
    5100:	d1c4      	bne.n	508c <cbvprintf+0x220>
		conv->specifier_cat = SPECIFIER_SINT;
    5102:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
    5106:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    5108:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    510c:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    5110:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    5112:	f88d 103a 	strb.w	r1, [sp, #58]	; 0x3a
			conv->invalid = true;
    5116:	bf02      	ittt	eq
    5118:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
    511c:	f041 0101 	orreq.w	r1, r1, #1
    5120:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
    5124:	2a63      	cmp	r2, #99	; 0x63
    5126:	d1b7      	bne.n	5098 <cbvprintf+0x22c>
			unsupported = (conv->length_mod != LENGTH_NONE);
    5128:	3300      	adds	r3, #0
    512a:	bf18      	it	ne
    512c:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    512e:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    5132:	f3c2 0140 	ubfx	r1, r2, #1, #1
    5136:	430b      	orrs	r3, r1
    5138:	f363 0241 	bfi	r2, r3, #1, #1
    513c:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
    5140:	e711      	b.n	4f66 <cbvprintf+0xfa>
	switch (conv->specifier) {
    5142:	2a75      	cmp	r2, #117	; 0x75
    5144:	d010      	beq.n	5168 <cbvprintf+0x2fc>
    5146:	2a78      	cmp	r2, #120	; 0x78
    5148:	d00e      	beq.n	5168 <cbvprintf+0x2fc>
    514a:	2a73      	cmp	r2, #115	; 0x73
    514c:	d19e      	bne.n	508c <cbvprintf+0x220>
		conv->specifier_cat = SPECIFIER_PTR;
    514e:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
    5152:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
    5154:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    5158:	f361 0202 	bfi	r2, r1, #0, #3
    515c:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
    5160:	bf14      	ite	ne
    5162:	2301      	movne	r3, #1
    5164:	2300      	moveq	r3, #0
    5166:	e7e2      	b.n	512e <cbvprintf+0x2c2>
		conv->specifier_cat = SPECIFIER_UINT;
    5168:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
    516c:	2002      	movs	r0, #2
    516e:	e7cb      	b.n	5108 <cbvprintf+0x29c>
		conv->specifier_cat = SPECIFIER_PTR;
    5170:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    5174:	f003 0378 	and.w	r3, r3, #120	; 0x78
    5178:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    517c:	2103      	movs	r1, #3
    517e:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    5182:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    5184:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    5188:	4143      	adcs	r3, r0
    518a:	e7d0      	b.n	512e <cbvprintf+0x2c2>
		} else if (conv->width_present) {
    518c:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
    5190:	2a00      	cmp	r2, #0
			width = conv->width_value;
    5192:	bfb4      	ite	lt
    5194:	f8dd 803c 	ldrlt.w	r8, [sp, #60]	; 0x3c
		int width = -1;
    5198:	f04f 38ff 	movge.w	r8, #4294967295
    519c:	e6f5      	b.n	4f8a <cbvprintf+0x11e>
		} else if (conv->prec_present) {
    519e:	079f      	lsls	r7, r3, #30
    51a0:	f57f af01 	bpl.w	4fa6 <cbvprintf+0x13a>
			precision = conv->prec_value;
    51a4:	9f10      	ldr	r7, [sp, #64]	; 0x40
			= (enum specifier_cat_enum)conv->specifier_cat;
    51a6:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
		conv->pad0_value = 0;
    51aa:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    51ac:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
		enum specifier_cat_enum specifier_cat
    51b0:	f002 0207 	and.w	r2, r2, #7
			= (enum length_mod_enum)conv->length_mod;
    51b4:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
		if (specifier_cat == SPECIFIER_SINT) {
    51b8:	2a01      	cmp	r2, #1
			= (enum length_mod_enum)conv->length_mod;
    51ba:	f3c3 03c3 	ubfx	r3, r3, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    51be:	d137      	bne.n	5230 <cbvprintf+0x3c4>
			switch (length_mod) {
    51c0:	1eda      	subs	r2, r3, #3
    51c2:	2a04      	cmp	r2, #4
    51c4:	d821      	bhi.n	520a <cbvprintf+0x39e>
    51c6:	e8df f002 	tbb	[pc, r2]
    51ca:	0703      	.short	0x0703
    51cc:	2007      	.short	0x2007
    51ce:	20          	.byte	0x20
    51cf:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    51d0:	f854 0b04 	ldr.w	r0, [r4], #4
				value->sint = (short)value->sint;
    51d4:	17c1      	asrs	r1, r0, #31
    51d6:	e004      	b.n	51e2 <cbvprintf+0x376>
					(sint_value_type)va_arg(ap, intmax_t);
    51d8:	3407      	adds	r4, #7
    51da:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    51de:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->sint = (short)value->sint;
    51e2:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
    51e6:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    51ea:	f012 0603 	ands.w	r6, r2, #3
    51ee:	d055      	beq.n	529c <cbvprintf+0x430>
			OUTS(sp, fp);
    51f0:	9b02      	ldr	r3, [sp, #8]
    51f2:	465a      	mov	r2, fp
    51f4:	4651      	mov	r1, sl
    51f6:	4648      	mov	r0, r9
    51f8:	f022 f91c 	bl	27434 <outs>
    51fc:	2800      	cmp	r0, #0
    51fe:	f2c0 811c 	blt.w	543a <cbvprintf+0x5ce>
    5202:	4405      	add	r5, r0
			OUTS(bps, bpe);
    5204:	f8dd b008 	ldr.w	fp, [sp, #8]
    5208:	e638      	b.n	4e7c <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    520a:	f854 0b04 	ldr.w	r0, [r4], #4
			if (length_mod == LENGTH_HH) {
    520e:	2b01      	cmp	r3, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    5210:	ea4f 71e0 	mov.w	r1, r0, asr #31
    5214:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    5218:	d105      	bne.n	5226 <cbvprintf+0x3ba>
				value->uint = (unsigned char)value->uint;
    521a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
    521e:	920c      	str	r2, [sp, #48]	; 0x30
    5220:	2200      	movs	r2, #0
    5222:	920d      	str	r2, [sp, #52]	; 0x34
    5224:	e7df      	b.n	51e6 <cbvprintf+0x37a>
			} else if (length_mod == LENGTH_H) {
    5226:	2b02      	cmp	r3, #2
    5228:	d1dd      	bne.n	51e6 <cbvprintf+0x37a>
				value->sint = (short)value->sint;
    522a:	f9bd 0030 	ldrsh.w	r0, [sp, #48]	; 0x30
    522e:	e7d1      	b.n	51d4 <cbvprintf+0x368>
		} else if (specifier_cat == SPECIFIER_UINT) {
    5230:	2a02      	cmp	r2, #2
    5232:	d123      	bne.n	527c <cbvprintf+0x410>
			switch (length_mod) {
    5234:	1eda      	subs	r2, r3, #3
    5236:	2a04      	cmp	r2, #4
    5238:	d813      	bhi.n	5262 <cbvprintf+0x3f6>
    523a:	e8df f002 	tbb	[pc, r2]
    523e:	0a03      	.short	0x0a03
    5240:	120a      	.short	0x120a
    5242:	12          	.byte	0x12
    5243:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    5244:	6820      	ldr	r0, [r4, #0]
    5246:	900c      	str	r0, [sp, #48]	; 0x30
    5248:	2100      	movs	r1, #0
    524a:	1d22      	adds	r2, r4, #4
    524c:	910d      	str	r1, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
    524e:	4614      	mov	r4, r2
    5250:	e7c9      	b.n	51e6 <cbvprintf+0x37a>
					(uint_value_type)va_arg(ap,
    5252:	3407      	adds	r4, #7
    5254:	f024 0207 	bic.w	r2, r4, #7
				value->uint =
    5258:	e8f2 0102 	ldrd	r0, r1, [r2], #8
    525c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
				break;
    5260:	e7f5      	b.n	524e <cbvprintf+0x3e2>
					(uint_value_type)va_arg(ap, size_t);
    5262:	f854 2b04 	ldr.w	r2, [r4], #4
    5266:	920c      	str	r2, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    5268:	2b01      	cmp	r3, #1
					(uint_value_type)va_arg(ap, size_t);
    526a:	f04f 0200 	mov.w	r2, #0
    526e:	920d      	str	r2, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
    5270:	d0d3      	beq.n	521a <cbvprintf+0x3ae>
			} else if (length_mod == LENGTH_H) {
    5272:	2b02      	cmp	r3, #2
    5274:	d1b7      	bne.n	51e6 <cbvprintf+0x37a>
				value->uint = (unsigned short)value->uint;
    5276:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
    527a:	e7d0      	b.n	521e <cbvprintf+0x3b2>
		} else if (specifier_cat == SPECIFIER_FP) {
    527c:	2a04      	cmp	r2, #4
    527e:	d107      	bne.n	5290 <cbvprintf+0x424>
			if (length_mod == LENGTH_UPPER_L) {
    5280:	3407      	adds	r4, #7
    5282:	f024 0407 	bic.w	r4, r4, #7
    5286:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->ldbl = va_arg(ap, long double);
    528a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
    528e:	e7aa      	b.n	51e6 <cbvprintf+0x37a>
		} else if (specifier_cat == SPECIFIER_PTR) {
    5290:	2a03      	cmp	r2, #3
			value->ptr = va_arg(ap, void *);
    5292:	bf04      	itt	eq
    5294:	f854 2b04 	ldreq.w	r2, [r4], #4
    5298:	920c      	streq	r2, [sp, #48]	; 0x30
    529a:	e7a4      	b.n	51e6 <cbvprintf+0x37a>
		switch (conv->specifier) {
    529c:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
    52a0:	286e      	cmp	r0, #110	; 0x6e
    52a2:	f000 80a4 	beq.w	53ee <cbvprintf+0x582>
    52a6:	d83a      	bhi.n	531e <cbvprintf+0x4b2>
    52a8:	2863      	cmp	r0, #99	; 0x63
    52aa:	d06e      	beq.n	538a <cbvprintf+0x51e>
    52ac:	d820      	bhi.n	52f0 <cbvprintf+0x484>
    52ae:	2825      	cmp	r0, #37	; 0x25
    52b0:	f43f adee 	beq.w	4e90 <cbvprintf+0x24>
    52b4:	2858      	cmp	r0, #88	; 0x58
    52b6:	d1a5      	bne.n	5204 <cbvprintf+0x398>
			bps = encode_uint(value->uint, conv, buf, bpe);
    52b8:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
    52bc:	9300      	str	r3, [sp, #0]
    52be:	aa0e      	add	r2, sp, #56	; 0x38
    52c0:	ab06      	add	r3, sp, #24
    52c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    52c6:	f7ff fd7f 	bl	4dc8 <encode_uint>
    52ca:	4683      	mov	fp, r0
			if (precision >= 0) {
    52cc:	2f00      	cmp	r7, #0
    52ce:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
    52d2:	db0b      	blt.n	52ec <cbvprintf+0x480>
				conv->flag_zero = false;
    52d4:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
				size_t len = bpe - bps;
    52d8:	eba0 030b 	sub.w	r3, r0, fp
				conv->flag_zero = false;
    52dc:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    52e0:	429f      	cmp	r7, r3
				conv->flag_zero = false;
    52e2:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
    52e6:	d901      	bls.n	52ec <cbvprintf+0x480>
					conv->pad0_value = precision - (int)len;
    52e8:	1aff      	subs	r7, r7, r3
    52ea:	970f      	str	r7, [sp, #60]	; 0x3c
		const char *bpe = buf + sizeof(buf);
    52ec:	4607      	mov	r7, r0
    52ee:	e044      	b.n	537a <cbvprintf+0x50e>
		switch (conv->specifier) {
    52f0:	2864      	cmp	r0, #100	; 0x64
    52f2:	d001      	beq.n	52f8 <cbvprintf+0x48c>
    52f4:	2869      	cmp	r0, #105	; 0x69
    52f6:	d185      	bne.n	5204 <cbvprintf+0x398>
			if (conv->flag_plus) {
    52f8:	0716      	lsls	r6, r2, #28
    52fa:	d476      	bmi.n	53ea <cbvprintf+0x57e>
				sign = ' ';
    52fc:	f012 0610 	ands.w	r6, r2, #16
    5300:	bf18      	it	ne
    5302:	2620      	movne	r6, #32
			if (value->sint < 0) {
    5304:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    5308:	2a00      	cmp	r2, #0
    530a:	f173 0100 	sbcs.w	r1, r3, #0
    530e:	dad3      	bge.n	52b8 <cbvprintf+0x44c>
				value->uint = (uint_value_type)-value->sint;
    5310:	4252      	negs	r2, r2
    5312:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    5316:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				sign = '-';
    531a:	262d      	movs	r6, #45	; 0x2d
    531c:	e7cc      	b.n	52b8 <cbvprintf+0x44c>
		switch (conv->specifier) {
    531e:	2873      	cmp	r0, #115	; 0x73
    5320:	d020      	beq.n	5364 <cbvprintf+0x4f8>
    5322:	d81b      	bhi.n	535c <cbvprintf+0x4f0>
    5324:	286f      	cmp	r0, #111	; 0x6f
    5326:	d0c7      	beq.n	52b8 <cbvprintf+0x44c>
    5328:	2870      	cmp	r0, #112	; 0x70
    532a:	f47f af6b 	bne.w	5204 <cbvprintf+0x398>
			if (value->ptr != NULL) {
    532e:	980c      	ldr	r0, [sp, #48]	; 0x30
    5330:	2800      	cmp	r0, #0
    5332:	d071      	beq.n	5418 <cbvprintf+0x5ac>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    5334:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
    5338:	9300      	str	r3, [sp, #0]
    533a:	aa0e      	add	r2, sp, #56	; 0x38
    533c:	ab06      	add	r3, sp, #24
    533e:	4631      	mov	r1, r6
    5340:	f7ff fd42 	bl	4dc8 <encode_uint>
				conv->altform_0c = true;
    5344:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
    5348:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    534c:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    5350:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    5354:	4683      	mov	fp, r0
				conv->altform_0c = true;
    5356:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
				goto prec_int_pad0;
    535a:	e7b7      	b.n	52cc <cbvprintf+0x460>
		switch (conv->specifier) {
    535c:	2875      	cmp	r0, #117	; 0x75
    535e:	d0ab      	beq.n	52b8 <cbvprintf+0x44c>
    5360:	2878      	cmp	r0, #120	; 0x78
    5362:	e7a8      	b.n	52b6 <cbvprintf+0x44a>
			if (precision >= 0) {
    5364:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
    5366:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
			if (precision >= 0) {
    536a:	db0a      	blt.n	5382 <cbvprintf+0x516>
				len = strnlen(bps, precision);
    536c:	4639      	mov	r1, r7
    536e:	4658      	mov	r0, fp
    5370:	f028 faac 	bl	2d8cc <strnlen>
			bpe = bps + len;
    5374:	eb0b 0700 	add.w	r7, fp, r0
		char sign = 0;
    5378:	2600      	movs	r6, #0
		if (bps == NULL) {
    537a:	f1bb 0f00 	cmp.w	fp, #0
    537e:	d10b      	bne.n	5398 <cbvprintf+0x52c>
    5380:	e740      	b.n	5204 <cbvprintf+0x398>
				len = strlen(bps);
    5382:	4658      	mov	r0, fp
    5384:	f7fc fd90 	bl	1ea8 <strlen>
    5388:	e7f4      	b.n	5374 <cbvprintf+0x508>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    538a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    538c:	f88d 3018 	strb.w	r3, [sp, #24]
			bpe = buf + 1;
    5390:	f10d 0719 	add.w	r7, sp, #25
			bps = buf;
    5394:	f10d 0b18 	add.w	fp, sp, #24
		size_t nj_len = (bpe - bps);
    5398:	eba7 030b 	sub.w	r3, r7, fp
		if (sign != 0) {
    539c:	b106      	cbz	r6, 53a0 <cbvprintf+0x534>
			nj_len += 1U;
    539e:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    53a0:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
    53a4:	06d0      	lsls	r0, r2, #27
    53a6:	d53c      	bpl.n	5422 <cbvprintf+0x5b6>
			nj_len += 2U;
    53a8:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    53aa:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    53ac:	990f      	ldr	r1, [sp, #60]	; 0x3c
			nj_len += conv->pad0_pre_exp;
    53ae:	bf48      	it	mi
    53b0:	9a10      	ldrmi	r2, [sp, #64]	; 0x40
		nj_len += conv->pad0_value;
    53b2:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    53b4:	bf48      	it	mi
    53b6:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    53b8:	f1b8 0f00 	cmp.w	r8, #0
    53bc:	dd4a      	ble.n	5454 <cbvprintf+0x5e8>
			if (!conv->flag_dash) {
    53be:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
			width -= (int)nj_len;
    53c2:	eba8 0803 	sub.w	r8, r8, r3
			if (!conv->flag_dash) {
    53c6:	f3c2 0380 	ubfx	r3, r2, #2, #1
    53ca:	9303      	str	r3, [sp, #12]
    53cc:	2b00      	cmp	r3, #0
    53ce:	d141      	bne.n	5454 <cbvprintf+0x5e8>
				if (conv->flag_zero) {
    53d0:	0650      	lsls	r0, r2, #25
    53d2:	d535      	bpl.n	5440 <cbvprintf+0x5d4>
					if (sign != 0) {
    53d4:	b13e      	cbz	r6, 53e6 <cbvprintf+0x57a>
						OUTC(sign);
    53d6:	4651      	mov	r1, sl
    53d8:	4630      	mov	r0, r6
    53da:	47c8      	blx	r9
    53dc:	2800      	cmp	r0, #0
    53de:	db2c      	blt.n	543a <cbvprintf+0x5ce>
						sign = 0;
    53e0:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    53e2:	3501      	adds	r5, #1
						sign = 0;
    53e4:	461e      	mov	r6, r3
					pad = '0';
    53e6:	2330      	movs	r3, #48	; 0x30
    53e8:	e02b      	b.n	5442 <cbvprintf+0x5d6>
				sign = '+';
    53ea:	262b      	movs	r6, #43	; 0x2b
    53ec:	e78a      	b.n	5304 <cbvprintf+0x498>
				store_count(conv, value->ptr, count);
    53ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
    53f0:	2b07      	cmp	r3, #7
    53f2:	f63f af07 	bhi.w	5204 <cbvprintf+0x398>
    53f6:	e8df f003 	tbb	[pc, r3]
    53fa:	040d      	.short	0x040d
    53fc:	08080d06 	.word	0x08080d06
    5400:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
    5402:	7015      	strb	r5, [r2, #0]
		break;
    5404:	e6fe      	b.n	5204 <cbvprintf+0x398>
		*(short *)dp = (short)count;
    5406:	8015      	strh	r5, [r2, #0]
		break;
    5408:	e6fc      	b.n	5204 <cbvprintf+0x398>
		*(intmax_t *)dp = (intmax_t)count;
    540a:	4628      	mov	r0, r5
    540c:	17e9      	asrs	r1, r5, #31
    540e:	e9c2 0100 	strd	r0, r1, [r2]
		break;
    5412:	e6f7      	b.n	5204 <cbvprintf+0x398>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    5414:	6015      	str	r5, [r2, #0]
		break;
    5416:	e6f5      	b.n	5204 <cbvprintf+0x398>
			bpe = bps + 5;
    5418:	4f2e      	ldr	r7, [pc, #184]	; (54d4 <cbvprintf+0x668>)
    541a:	4606      	mov	r6, r0
			bps = "(nil)";
    541c:	f1a7 0b05 	sub.w	fp, r7, #5
    5420:	e7ba      	b.n	5398 <cbvprintf+0x52c>
		} else if (conv->altform_0) {
    5422:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    5424:	bf48      	it	mi
    5426:	3301      	addmi	r3, #1
    5428:	e7bf      	b.n	53aa <cbvprintf+0x53e>
					OUTC(pad);
    542a:	4618      	mov	r0, r3
    542c:	4651      	mov	r1, sl
    542e:	9303      	str	r3, [sp, #12]
    5430:	47c8      	blx	r9
    5432:	2800      	cmp	r0, #0
				while (width-- > 0) {
    5434:	4642      	mov	r2, r8
					OUTC(pad);
    5436:	9b03      	ldr	r3, [sp, #12]
    5438:	da05      	bge.n	5446 <cbvprintf+0x5da>
#undef OUTS
#undef OUTC
}
    543a:	b013      	add	sp, #76	; 0x4c
    543c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    5440:	2320      	movs	r3, #32
					pad = '0';
    5442:	4642      	mov	r2, r8
    5444:	4445      	add	r5, r8
				while (width-- > 0) {
    5446:	2a00      	cmp	r2, #0
    5448:	eba5 0102 	sub.w	r1, r5, r2
    544c:	f102 38ff 	add.w	r8, r2, #4294967295
    5450:	dceb      	bgt.n	542a <cbvprintf+0x5be>
    5452:	460d      	mov	r5, r1
		if (sign != 0) {
    5454:	b12e      	cbz	r6, 5462 <cbvprintf+0x5f6>
			OUTC(sign);
    5456:	4651      	mov	r1, sl
    5458:	4630      	mov	r0, r6
    545a:	47c8      	blx	r9
    545c:	2800      	cmp	r0, #0
    545e:	dbec      	blt.n	543a <cbvprintf+0x5ce>
    5460:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    5462:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    5466:	06d9      	lsls	r1, r3, #27
    5468:	d401      	bmi.n	546e <cbvprintf+0x602>
    546a:	071a      	lsls	r2, r3, #28
    546c:	d505      	bpl.n	547a <cbvprintf+0x60e>
				OUTC('0');
    546e:	4651      	mov	r1, sl
    5470:	2030      	movs	r0, #48	; 0x30
    5472:	47c8      	blx	r9
    5474:	2800      	cmp	r0, #0
    5476:	dbe0      	blt.n	543a <cbvprintf+0x5ce>
    5478:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    547a:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    547e:	06db      	lsls	r3, r3, #27
    5480:	d506      	bpl.n	5490 <cbvprintf+0x624>
				OUTC(conv->specifier);
    5482:	4651      	mov	r1, sl
    5484:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
    5488:	47c8      	blx	r9
    548a:	2800      	cmp	r0, #0
    548c:	dbd5      	blt.n	543a <cbvprintf+0x5ce>
    548e:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    5490:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    5492:	442e      	add	r6, r5
    5494:	1b73      	subs	r3, r6, r5
    5496:	2b00      	cmp	r3, #0
    5498:	dc15      	bgt.n	54c6 <cbvprintf+0x65a>
			OUTS(bps, bpe);
    549a:	463b      	mov	r3, r7
    549c:	465a      	mov	r2, fp
    549e:	4651      	mov	r1, sl
    54a0:	4648      	mov	r0, r9
    54a2:	f021 ffc7 	bl	27434 <outs>
    54a6:	2800      	cmp	r0, #0
    54a8:	dbc7      	blt.n	543a <cbvprintf+0x5ce>
    54aa:	4405      	add	r5, r0
		while (width > 0) {
    54ac:	44a8      	add	r8, r5
    54ae:	eba8 0305 	sub.w	r3, r8, r5
    54b2:	2b00      	cmp	r3, #0
    54b4:	f77f aea6 	ble.w	5204 <cbvprintf+0x398>
			OUTC(' ');
    54b8:	4651      	mov	r1, sl
    54ba:	2020      	movs	r0, #32
    54bc:	47c8      	blx	r9
    54be:	2800      	cmp	r0, #0
    54c0:	dbbb      	blt.n	543a <cbvprintf+0x5ce>
    54c2:	3501      	adds	r5, #1
			--width;
    54c4:	e7f3      	b.n	54ae <cbvprintf+0x642>
				OUTC('0');
    54c6:	4651      	mov	r1, sl
    54c8:	2030      	movs	r0, #48	; 0x30
    54ca:	47c8      	blx	r9
    54cc:	2800      	cmp	r0, #0
    54ce:	dbb4      	blt.n	543a <cbvprintf+0x5ce>
    54d0:	3501      	adds	r5, #1
    54d2:	e7df      	b.n	5494 <cbvprintf+0x628>
    54d4:	0002fc17 	.word	0x0002fc17

000054d8 <nvs_recover_last_ate>:
 *
 * addr should point to the faulty closing ate and will be updated to the last
 * valid ate. If no valid ate is found it will be left untouched.
 */
static int nvs_recover_last_ate(struct nvs_fs *fs, uint32_t *addr)
{
    54d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    54dc:	460f      	mov	r7, r1
    54de:	4681      	mov	r9, r0
	int rc;

	LOG_DBG("Recovering last ate from sector %d",
		(*addr >> ADDR_SECT_SHIFT));

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    54e0:	2108      	movs	r1, #8
    54e2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c

	*addr -= ate_size;
	ate_end_addr = *addr;
	data_end_addr = *addr & ADDR_SECT_MASK;
    54e4:	4e12      	ldr	r6, [pc, #72]	; (5530 <nvs_recover_last_ate+0x58>)
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    54e6:	f022 f837 	bl	27558 <nvs_al_size.isra.0>
	*addr -= ate_size;
    54ea:	683c      	ldr	r4, [r7, #0]
    54ec:	1a24      	subs	r4, r4, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    54ee:	4680      	mov	r8, r0
	*addr -= ate_size;
    54f0:	603c      	str	r4, [r7, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
    54f2:	ea04 0506 	and.w	r5, r4, r6
	while (ate_end_addr > data_end_addr) {
    54f6:	42ac      	cmp	r4, r5
    54f8:	d803      	bhi.n	5502 <nvs_recover_last_ate+0x2a>
			*addr = ate_end_addr;
		}
		ate_end_addr -= ate_size;
	}

	return 0;
    54fa:	2000      	movs	r0, #0
}
    54fc:	b003      	add	sp, #12
    54fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    5502:	2308      	movs	r3, #8
    5504:	466a      	mov	r2, sp
    5506:	4621      	mov	r1, r4
    5508:	4648      	mov	r0, r9
    550a:	f021 ffb4 	bl	27476 <nvs_flash_rd>
		if (rc) {
    550e:	2800      	cmp	r0, #0
    5510:	d1f4      	bne.n	54fc <nvs_recover_last_ate+0x24>
		if (!nvs_ate_crc8_check(&end_ate)) {
    5512:	4668      	mov	r0, sp
    5514:	f022 f80b 	bl	2752e <nvs_ate_crc8_check>
    5518:	b938      	cbnz	r0, 552a <nvs_recover_last_ate+0x52>
			data_end_addr += end_ate.offset + end_ate.len;
    551a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    551e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
			*addr = ate_end_addr;
    5522:	603c      	str	r4, [r7, #0]
			data_end_addr &= ADDR_SECT_MASK;
    5524:	4035      	ands	r5, r6
			data_end_addr += end_ate.offset + end_ate.len;
    5526:	4413      	add	r3, r2
    5528:	441d      	add	r5, r3
		ate_end_addr -= ate_size;
    552a:	eba4 0408 	sub.w	r4, r4, r8
    552e:	e7e2      	b.n	54f6 <nvs_recover_last_ate+0x1e>
    5530:	ffff0000 	.word	0xffff0000

00005534 <nvs_gc>:
/* garbage collection: the address ate_wra has been updated to the new sector
 * that has just been started. The data to gc is in the sector after this new
 * sector.
 */
static int nvs_gc(struct nvs_fs *fs)
{
    5534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5538:	4604      	mov	r4, r0
    553a:	b093      	sub	sp, #76	; 0x4c
	struct nvs_ate close_ate, gc_ate, wlk_ate;
	uint32_t sec_addr, gc_addr, gc_prev_addr, wlk_addr, wlk_prev_addr,
	      data_addr, stop_addr;
	size_t ate_size;

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    553c:	2108      	movs	r1, #8
    553e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    5540:	f022 f80a 	bl	27558 <nvs_al_size.isra.0>

	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    5544:	6863      	ldr	r3, [r4, #4]
    5546:	0c1b      	lsrs	r3, r3, #16
    5548:	041b      	lsls	r3, r3, #16
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    554a:	4681      	mov	r9, r0
	nvs_sector_advance(fs, &sec_addr);
    554c:	a901      	add	r1, sp, #4
    554e:	89e0      	ldrh	r0, [r4, #14]
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    5550:	9301      	str	r3, [sp, #4]
	nvs_sector_advance(fs, &sec_addr);
    5552:	f022 f80b 	bl	2756c <nvs_sector_advance.isra.1>
	gc_addr = sec_addr + fs->sector_size - ate_size;
    5556:	9b01      	ldr	r3, [sp, #4]
    5558:	89a1      	ldrh	r1, [r4, #12]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    555a:	ad04      	add	r5, sp, #16
	gc_addr = sec_addr + fs->sector_size - ate_size;
    555c:	4419      	add	r1, r3
    555e:	eba1 0109 	sub.w	r1, r1, r9
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    5562:	462a      	mov	r2, r5
    5564:	2308      	movs	r3, #8
    5566:	4620      	mov	r0, r4
	gc_addr = sec_addr + fs->sector_size - ate_size;
    5568:	9102      	str	r1, [sp, #8]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    556a:	f021 ff84 	bl	27476 <nvs_flash_rd>

	/* if the sector is not closed don't do gc */
	rc = nvs_flash_ate_rd(fs, gc_addr, &close_ate);
	if (rc < 0) {
    556e:	1e02      	subs	r2, r0, #0
    5570:	f2c0 8095 	blt.w	569e <nvs_gc+0x16a>
		/* flash error */
		return rc;
	}

	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
    5574:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5576:	791a      	ldrb	r2, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    5578:	2300      	movs	r3, #0
		if (data8[i] != value) {
    557a:	5ce9      	ldrb	r1, [r5, r3]
    557c:	4291      	cmp	r1, r2
    557e:	d17f      	bne.n	5680 <nvs_gc+0x14c>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    5580:	3301      	adds	r3, #1
    5582:	2b08      	cmp	r3, #8
    5584:	d1f9      	bne.n	557a <nvs_gc+0x46>
	if (!rc) {
		rc = nvs_flash_erase_sector(fs, sec_addr);
    5586:	9901      	ldr	r1, [sp, #4]
    5588:	4620      	mov	r0, r4
    558a:	f021 fff9 	bl	27580 <nvs_flash_erase_sector>
    558e:	4602      	mov	r2, r0
		if (rc) {
    5590:	e085      	b.n	569e <nvs_gc+0x16a>
	}

	stop_addr = gc_addr - ate_size;

	if (!nvs_ate_crc8_check(&close_ate)) {
		gc_addr &= ADDR_SECT_MASK;
    5592:	9b02      	ldr	r3, [sp, #8]
		gc_addr += close_ate.offset;
    5594:	f8bd 2012 	ldrh.w	r2, [sp, #18]
		gc_addr &= ADDR_SECT_MASK;
    5598:	0c1b      	lsrs	r3, r3, #16
    559a:	041b      	lsls	r3, r3, #16
		gc_addr += close_ate.offset;
    559c:	4413      	add	r3, r2
    559e:	9302      	str	r3, [sp, #8]
		 */
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
			/* copy needed */
			LOG_DBG("Moving %d, len %d", gc_ate.id, gc_ate.len);

			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
    55a0:	f8df b104 	ldr.w	fp, [pc, #260]	; 56a8 <nvs_gc+0x174>
		gc_prev_addr = gc_addr;
    55a4:	f8dd a008 	ldr.w	sl, [sp, #8]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
    55a8:	aa06      	add	r2, sp, #24
    55aa:	a902      	add	r1, sp, #8
    55ac:	4620      	mov	r0, r4
    55ae:	f022 f80f 	bl	275d0 <nvs_prev_ate>
		if (rc) {
    55b2:	4602      	mov	r2, r0
    55b4:	2800      	cmp	r0, #0
    55b6:	d172      	bne.n	569e <nvs_gc+0x16a>
		if (nvs_ate_crc8_check(&gc_ate)) {
    55b8:	a806      	add	r0, sp, #24
    55ba:	f021 ffb8 	bl	2752e <nvs_ate_crc8_check>
    55be:	2800      	cmp	r0, #0
    55c0:	d135      	bne.n	562e <nvs_gc+0xfa>
		wlk_addr = fs->ate_wra;
    55c2:	6863      	ldr	r3, [r4, #4]
    55c4:	9303      	str	r3, [sp, #12]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    55c6:	aa08      	add	r2, sp, #32
    55c8:	a903      	add	r1, sp, #12
    55ca:	4620      	mov	r0, r4
			wlk_prev_addr = wlk_addr;
    55cc:	9d03      	ldr	r5, [sp, #12]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    55ce:	f021 ffff 	bl	275d0 <nvs_prev_ate>
			if (rc) {
    55d2:	4602      	mov	r2, r0
    55d4:	2800      	cmp	r0, #0
    55d6:	d162      	bne.n	569e <nvs_gc+0x16a>
			if ((wlk_ate.id == gc_ate.id) &&
    55d8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
    55dc:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    55e0:	429a      	cmp	r2, r3
    55e2:	d027      	beq.n	5634 <nvs_gc+0x100>
		} while (wlk_addr != fs->ate_wra);
    55e4:	6862      	ldr	r2, [r4, #4]
    55e6:	9b03      	ldr	r3, [sp, #12]
    55e8:	429a      	cmp	r2, r3
    55ea:	d1ec      	bne.n	55c6 <nvs_gc+0x92>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
    55ec:	4555      	cmp	r5, sl
    55ee:	d11e      	bne.n	562e <nvs_gc+0xfa>
    55f0:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    55f4:	b1db      	cbz	r3, 562e <nvs_gc+0xfa>
			data_addr += gc_ate.offset;
    55f6:	f8bd 301a 	ldrh.w	r3, [sp, #26]
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
    55fa:	ea0a 070b 	and.w	r7, sl, fp
			data_addr += gc_ate.offset;
    55fe:	441f      	add	r7, r3

			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
			nvs_ate_crc8_update(&gc_ate);
    5600:	a806      	add	r0, sp, #24
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    5602:	68a3      	ldr	r3, [r4, #8]
    5604:	f8ad 301a 	strh.w	r3, [sp, #26]
			nvs_ate_crc8_update(&gc_ate);
    5608:	f021 ff9d 	bl	27546 <nvs_ate_crc8_update>
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
    560c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
    560e:	f8bd 801c 	ldrh.w	r8, [sp, #28]
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
    5612:	681e      	ldr	r6, [r3, #0]
    5614:	4276      	negs	r6, r6
	block_size =
    5616:	f006 0620 	and.w	r6, r6, #32
	while (len) {
    561a:	f1b8 0f00 	cmp.w	r8, #0
    561e:	d10f      	bne.n	5640 <nvs_gc+0x10c>
			if (rc) {
				return rc;
			}

			rc = nvs_flash_ate_wrt(fs, &gc_ate);
    5620:	a906      	add	r1, sp, #24
    5622:	4620      	mov	r0, r4
    5624:	f022 f86d 	bl	27702 <nvs_flash_ate_wrt>
			if (rc) {
    5628:	4602      	mov	r2, r0
    562a:	2800      	cmp	r0, #0
    562c:	d137      	bne.n	569e <nvs_gc+0x16a>
				return rc;
			}
		}
	} while (gc_prev_addr != stop_addr);
    562e:	45ca      	cmp	sl, r9
    5630:	d1b8      	bne.n	55a4 <nvs_gc+0x70>
    5632:	e7a8      	b.n	5586 <nvs_gc+0x52>
			    (!nvs_ate_crc8_check(&wlk_ate))) {
    5634:	a808      	add	r0, sp, #32
    5636:	f021 ff7a 	bl	2752e <nvs_ate_crc8_check>
			if ((wlk_ate.id == gc_ate.id) &&
    563a:	2800      	cmp	r0, #0
    563c:	d1d2      	bne.n	55e4 <nvs_gc+0xb0>
    563e:	e7d5      	b.n	55ec <nvs_gc+0xb8>
		bytes_to_copy = MIN(block_size, len);
    5640:	4546      	cmp	r6, r8
    5642:	4635      	mov	r5, r6
    5644:	bf28      	it	cs
    5646:	4645      	movcs	r5, r8
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
    5648:	aa0a      	add	r2, sp, #40	; 0x28
    564a:	462b      	mov	r3, r5
    564c:	4639      	mov	r1, r7
    564e:	4620      	mov	r0, r4
    5650:	f021 ff11 	bl	27476 <nvs_flash_rd>
		if (rc) {
    5654:	4602      	mov	r2, r0
    5656:	bb10      	cbnz	r0, 569e <nvs_gc+0x16a>
	if (!len) {
    5658:	b135      	cbz	r5, 5668 <nvs_gc+0x134>
    565a:	aa0a      	add	r2, sp, #40	; 0x28
    565c:	462b      	mov	r3, r5
    565e:	68a1      	ldr	r1, [r4, #8]
    5660:	4620      	mov	r0, r4
    5662:	f022 f805 	bl	27670 <nvs_flash_al_wrt.part.3>
    5666:	4602      	mov	r2, r0
	fs->data_wra += nvs_al_size(fs, len);
    5668:	4629      	mov	r1, r5
    566a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    566c:	f021 ff74 	bl	27558 <nvs_al_size.isra.0>
    5670:	68a3      	ldr	r3, [r4, #8]
    5672:	4418      	add	r0, r3
    5674:	60a0      	str	r0, [r4, #8]
		if (rc) {
    5676:	b992      	cbnz	r2, 569e <nvs_gc+0x16a>
		len -= bytes_to_copy;
    5678:	eba8 0805 	sub.w	r8, r8, r5
		addr += bytes_to_copy;
    567c:	442f      	add	r7, r5
    567e:	e7cc      	b.n	561a <nvs_gc+0xe6>
	stop_addr = gc_addr - ate_size;
    5680:	9b02      	ldr	r3, [sp, #8]
	if (!nvs_ate_crc8_check(&close_ate)) {
    5682:	4628      	mov	r0, r5
	stop_addr = gc_addr - ate_size;
    5684:	eba3 0909 	sub.w	r9, r3, r9
	if (!nvs_ate_crc8_check(&close_ate)) {
    5688:	f021 ff51 	bl	2752e <nvs_ate_crc8_check>
    568c:	2800      	cmp	r0, #0
    568e:	d080      	beq.n	5592 <nvs_gc+0x5e>
		rc = nvs_recover_last_ate(fs, &gc_addr);
    5690:	a902      	add	r1, sp, #8
    5692:	4620      	mov	r0, r4
    5694:	f7ff ff20 	bl	54d8 <nvs_recover_last_ate>
		if (rc) {
    5698:	4602      	mov	r2, r0
    569a:	2800      	cmp	r0, #0
    569c:	d080      	beq.n	55a0 <nvs_gc+0x6c>
	rc = nvs_flash_erase_sector(fs, sec_addr);
	if (rc) {
		return rc;
	}
	return 0;
}
    569e:	4610      	mov	r0, r2
    56a0:	b013      	add	sp, #76	; 0x4c
    56a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    56a6:	bf00      	nop
    56a8:	ffff0000 	.word	0xffff0000

000056ac <nvs_init>:
	}
	return 0;
}

int nvs_init(struct nvs_fs *fs, const char *dev_name)
{
    56ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    56b0:	4604      	mov	r4, r0
    56b2:	b086      	sub	sp, #24
    56b4:	460d      	mov	r5, r1

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
    56b6:	f100 0614 	add.w	r6, r0, #20
	return z_impl_k_mutex_init(mutex);
    56ba:	4630      	mov	r0, r6
    56bc:	f027 fdb4 	bl	2d228 <z_impl_k_mutex_init>
    56c0:	4628      	mov	r0, r5
    56c2:	f01c fab7 	bl	21c34 <z_impl_device_get_binding>

	fs->flash_device = device_get_binding(dev_name);
    56c6:	62a0      	str	r0, [r4, #40]	; 0x28
	if (!fs->flash_device) {
    56c8:	b948      	cbnz	r0, 56de <nvs_init+0x32>
		LOG_ERR("No valid flash device found");
    56ca:	2145      	movs	r1, #69	; 0x45
    56cc:	4888      	ldr	r0, [pc, #544]	; (58f0 <nvs_init+0x244>)
    56ce:	f021 fc4e 	bl	26f6e <printk>
		return -ENXIO;
    56d2:	f06f 0505 	mvn.w	r5, #5
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
    56d6:	4628      	mov	r0, r5
    56d8:	b006      	add	sp, #24
    56da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
    56de:	6883      	ldr	r3, [r0, #8]
    56e0:	691b      	ldr	r3, [r3, #16]
    56e2:	4798      	blx	r3
	fs->flash_parameters = flash_get_parameters(fs->flash_device);
    56e4:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
    56e6:	b930      	cbnz	r0, 56f6 <nvs_init+0x4a>
		LOG_ERR("Could not obtain flash parameters");
    56e8:	4882      	ldr	r0, [pc, #520]	; (58f4 <nvs_init+0x248>)
    56ea:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("Configuration error - sector count");
    56ec:	f021 fc3f 	bl	26f6e <printk>
		return -EINVAL;
    56f0:	f06f 0515 	mvn.w	r5, #21
    56f4:	e7ef      	b.n	56d6 <nvs_init+0x2a>
	write_block_size = flash_get_write_block_size(fs->flash_device);
    56f6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->get_parameters(dev)->write_block_size;
    56f8:	6883      	ldr	r3, [r0, #8]
    56fa:	691b      	ldr	r3, [r3, #16]
    56fc:	4798      	blx	r3
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
    56fe:	6803      	ldr	r3, [r0, #0]
    5700:	3b01      	subs	r3, #1
    5702:	2b1f      	cmp	r3, #31
    5704:	d902      	bls.n	570c <nvs_init+0x60>
		LOG_ERR("Unsupported write block size");
    5706:	2145      	movs	r1, #69	; 0x45
    5708:	487b      	ldr	r0, [pc, #492]	; (58f8 <nvs_init+0x24c>)
    570a:	e7ef      	b.n	56ec <nvs_init+0x40>
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
    570c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    570e:	6821      	ldr	r1, [r4, #0]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&offset, *(uintptr_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
    5710:	aa03      	add	r2, sp, #12
    5712:	f027 fa95 	bl	2cc40 <z_impl_flash_get_page_info_by_offs>
	if (rc) {
    5716:	b110      	cbz	r0, 571e <nvs_init+0x72>
		LOG_ERR("Unable to get page info");
    5718:	2145      	movs	r1, #69	; 0x45
    571a:	4878      	ldr	r0, [pc, #480]	; (58fc <nvs_init+0x250>)
    571c:	e7e6      	b.n	56ec <nvs_init+0x40>
	if (!fs->sector_size || fs->sector_size % info.size) {
    571e:	89a3      	ldrh	r3, [r4, #12]
    5720:	b12b      	cbz	r3, 572e <nvs_init+0x82>
    5722:	9a04      	ldr	r2, [sp, #16]
    5724:	fbb3 f5f2 	udiv	r5, r3, r2
    5728:	fb02 3515 	mls	r5, r2, r5, r3
    572c:	b115      	cbz	r5, 5734 <nvs_init+0x88>
		LOG_ERR("Invalid sector size");
    572e:	2145      	movs	r1, #69	; 0x45
    5730:	4873      	ldr	r0, [pc, #460]	; (5900 <nvs_init+0x254>)
    5732:	e7db      	b.n	56ec <nvs_init+0x40>
	if (fs->sector_count < 2) {
    5734:	89e3      	ldrh	r3, [r4, #14]
    5736:	2b01      	cmp	r3, #1
    5738:	d802      	bhi.n	5740 <nvs_init+0x94>
		LOG_ERR("Configuration error - sector count");
    573a:	2145      	movs	r1, #69	; 0x45
    573c:	4871      	ldr	r0, [pc, #452]	; (5904 <nvs_init+0x258>)
    573e:	e7d5      	b.n	56ec <nvs_init+0x40>
	uint8_t erase_value = fs->flash_parameters->erase_value;
    5740:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	uint32_t addr = 0U;
    5742:	9500      	str	r5, [sp, #0]
	uint8_t erase_value = fs->flash_parameters->erase_value;
    5744:	f893 9004 	ldrb.w	r9, [r3, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    5748:	f04f 32ff 	mov.w	r2, #4294967295
    574c:	f04f 33ff 	mov.w	r3, #4294967295
    5750:	4630      	mov	r0, r6
    5752:	f01c fd9b 	bl	2228c <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    5756:	2108      	movs	r1, #8
    5758:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    575a:	f021 fefd 	bl	27558 <nvs_al_size.isra.0>
	uint16_t i, closed_sectors = 0;
    575e:	462f      	mov	r7, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    5760:	4680      	mov	r8, r0
	for (i = 0; i < fs->sector_count; i++) {
    5762:	89e3      	ldrh	r3, [r4, #14]
    5764:	fa1f fa85 	uxth.w	sl, r5
    5768:	4553      	cmp	r3, sl
    576a:	d865      	bhi.n	5838 <nvs_init+0x18c>
	if (closed_sectors == fs->sector_count) {
    576c:	89e3      	ldrh	r3, [r4, #14]
    576e:	42bb      	cmp	r3, r7
    5770:	f000 80a2 	beq.w	58b8 <nvs_init+0x20c>
	if (i == fs->sector_count) {
    5774:	4553      	cmp	r3, sl
    5776:	d10c      	bne.n	5792 <nvs_init+0xe6>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
    5778:	9900      	ldr	r1, [sp, #0]
    577a:	2308      	movs	r3, #8
    577c:	464a      	mov	r2, r9
    577e:	eba1 0108 	sub.w	r1, r1, r8
    5782:	4620      	mov	r0, r4
    5784:	f021 feae 	bl	274e4 <nvs_flash_cmp_const>
		if (!rc) {
    5788:	b918      	cbnz	r0, 5792 <nvs_init+0xe6>
			nvs_sector_advance(fs, &addr);
    578a:	4669      	mov	r1, sp
    578c:	89e0      	ldrh	r0, [r4, #14]
    578e:	f021 feed 	bl	2756c <nvs_sector_advance.isra.1>
	fs->ate_wra = addr - ate_size;
    5792:	9b00      	ldr	r3, [sp, #0]
	fs->data_wra = addr & ADDR_SECT_MASK;
    5794:	4f5c      	ldr	r7, [pc, #368]	; (5908 <nvs_init+0x25c>)
	fs->ate_wra = addr - ate_size;
    5796:	eba3 0208 	sub.w	r2, r3, r8
	fs->data_wra = addr & ADDR_SECT_MASK;
    579a:	403b      	ands	r3, r7
	fs->ate_wra = addr - ate_size;
    579c:	6062      	str	r2, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
    579e:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra >= fs->data_wra) {
    57a0:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
    57a4:	4299      	cmp	r1, r3
    57a6:	d30e      	bcc.n	57c6 <nvs_init+0x11a>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    57a8:	2308      	movs	r3, #8
    57aa:	aa01      	add	r2, sp, #4
    57ac:	4620      	mov	r0, r4
    57ae:	f021 fe62 	bl	27476 <nvs_flash_rd>
		if (rc) {
    57b2:	4605      	mov	r5, r0
    57b4:	bb18      	cbnz	r0, 57fe <nvs_init+0x152>
    57b6:	ab01      	add	r3, sp, #4
		if (data8[i] != value) {
    57b8:	f813 2b01 	ldrb.w	r2, [r3], #1
    57bc:	4591      	cmp	r9, r2
    57be:	d17e      	bne.n	58be <nvs_init+0x212>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    57c0:	3501      	adds	r5, #1
    57c2:	2d08      	cmp	r5, #8
    57c4:	d1f8      	bne.n	57b8 <nvs_init+0x10c>
	while (fs->ate_wra > fs->data_wra) {
    57c6:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    57ca:	428b      	cmp	r3, r1
    57cc:	d907      	bls.n	57de <nvs_init+0x132>
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
    57ce:	1a5b      	subs	r3, r3, r1
    57d0:	464a      	mov	r2, r9
    57d2:	4620      	mov	r0, r4
    57d4:	f021 fe86 	bl	274e4 <nvs_flash_cmp_const>
		if (rc < 0) {
    57d8:	1e05      	subs	r5, r0, #0
    57da:	db10      	blt.n	57fe <nvs_init+0x152>
		if (!rc) {
    57dc:	d150      	bne.n	5880 <nvs_init+0x1d4>
	addr = fs->ate_wra & ADDR_SECT_MASK;
    57de:	6863      	ldr	r3, [r4, #4]
    57e0:	4f49      	ldr	r7, [pc, #292]	; (5908 <nvs_init+0x25c>)
	nvs_sector_advance(fs, &addr);
    57e2:	89e0      	ldrh	r0, [r4, #14]
	addr = fs->ate_wra & ADDR_SECT_MASK;
    57e4:	403b      	ands	r3, r7
	nvs_sector_advance(fs, &addr);
    57e6:	4669      	mov	r1, sp
	addr = fs->ate_wra & ADDR_SECT_MASK;
    57e8:	9300      	str	r3, [sp, #0]
	nvs_sector_advance(fs, &addr);
    57ea:	f021 febf 	bl	2756c <nvs_sector_advance.isra.1>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
    57ee:	89a3      	ldrh	r3, [r4, #12]
    57f0:	9900      	ldr	r1, [sp, #0]
    57f2:	464a      	mov	r2, r9
    57f4:	4620      	mov	r0, r4
    57f6:	f021 fe75 	bl	274e4 <nvs_flash_cmp_const>
	if (rc < 0) {
    57fa:	1e05      	subs	r5, r0, #0
    57fc:	da46      	bge.n	588c <nvs_init+0x1e0>
	return z_impl_k_mutex_unlock(mutex);
    57fe:	4630      	mov	r0, r6
    5800:	f01c fe18 	bl	22434 <z_impl_k_mutex_unlock>
	if (rc) {
    5804:	2d00      	cmp	r5, #0
    5806:	f47f af66 	bne.w	56d6 <nvs_init+0x2a>
	fs->ready = true;
    580a:	2301      	movs	r3, #1
    580c:	7423      	strb	r3, [r4, #16]
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
    580e:	89e2      	ldrh	r2, [r4, #14]
    5810:	89a3      	ldrh	r3, [r4, #12]
    5812:	483e      	ldr	r0, [pc, #248]	; (590c <nvs_init+0x260>)
    5814:	2149      	movs	r1, #73	; 0x49
    5816:	f021 fbaa 	bl	26f6e <printk>
	LOG_INF("alloc wra: %d, %x",
    581a:	6862      	ldr	r2, [r4, #4]
    581c:	483c      	ldr	r0, [pc, #240]	; (5910 <nvs_init+0x264>)
    581e:	b293      	uxth	r3, r2
    5820:	2149      	movs	r1, #73	; 0x49
    5822:	0c12      	lsrs	r2, r2, #16
    5824:	f021 fba3 	bl	26f6e <printk>
	LOG_INF("data wra: %d, %x",
    5828:	68a2      	ldr	r2, [r4, #8]
    582a:	483a      	ldr	r0, [pc, #232]	; (5914 <nvs_init+0x268>)
    582c:	b293      	uxth	r3, r2
    582e:	2149      	movs	r1, #73	; 0x49
    5830:	0c12      	lsrs	r2, r2, #16
    5832:	f021 fb9c 	bl	26f6e <printk>
	return 0;
    5836:	e74e      	b.n	56d6 <nvs_init+0x2a>
		       (uint16_t)(fs->sector_size - ate_size);
    5838:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
    583a:	042b      	lsls	r3, r5, #16
		       (uint16_t)(fs->sector_size - ate_size);
    583c:	eba1 0108 	sub.w	r1, r1, r8
		addr = (i << ADDR_SECT_SHIFT) +
    5840:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
    5844:	464a      	mov	r2, r9
    5846:	2308      	movs	r3, #8
    5848:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
    584a:	9100      	str	r1, [sp, #0]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
    584c:	f021 fe4a 	bl	274e4 <nvs_flash_cmp_const>
		if (rc) {
    5850:	b170      	cbz	r0, 5870 <nvs_init+0x1c4>
			nvs_sector_advance(fs, &addr);
    5852:	4669      	mov	r1, sp
    5854:	89e0      	ldrh	r0, [r4, #14]
    5856:	f021 fe89 	bl	2756c <nvs_sector_advance.isra.1>
			closed_sectors++;
    585a:	3701      	adds	r7, #1
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
    585c:	2308      	movs	r3, #8
    585e:	464a      	mov	r2, r9
    5860:	9900      	ldr	r1, [sp, #0]
    5862:	4620      	mov	r0, r4
			closed_sectors++;
    5864:	b2bf      	uxth	r7, r7
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
    5866:	f021 fe3d 	bl	274e4 <nvs_flash_cmp_const>
			if (!rc) {
    586a:	2800      	cmp	r0, #0
    586c:	f43f af7e 	beq.w	576c <nvs_init+0xc0>
    5870:	3501      	adds	r5, #1
    5872:	e776      	b.n	5762 <nvs_init+0xb6>
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    5874:	f1ba 0f00 	cmp.w	sl, #0
    5878:	d036      	beq.n	58e8 <nvs_init+0x23c>
				rc = -ESPIPE;
    587a:	f06f 051c 	mvn.w	r5, #28
    587e:	e7be      	b.n	57fe <nvs_init+0x152>
		fs->data_wra += fs->flash_parameters->write_block_size;
    5880:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    5882:	68a3      	ldr	r3, [r4, #8]
    5884:	6812      	ldr	r2, [r2, #0]
    5886:	4413      	add	r3, r2
    5888:	60a3      	str	r3, [r4, #8]
    588a:	e79c      	b.n	57c6 <nvs_init+0x11a>
	if (rc) {
    588c:	d0b7      	beq.n	57fe <nvs_init+0x152>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
    588e:	6861      	ldr	r1, [r4, #4]
    5890:	4620      	mov	r0, r4
    5892:	f021 fe75 	bl	27580 <nvs_flash_erase_sector>
		if (rc) {
    5896:	4605      	mov	r5, r0
    5898:	2800      	cmp	r0, #0
    589a:	d1b0      	bne.n	57fe <nvs_init+0x152>
		fs->ate_wra &= ADDR_SECT_MASK;
    589c:	6860      	ldr	r0, [r4, #4]
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    589e:	89a3      	ldrh	r3, [r4, #12]
		fs->ate_wra &= ADDR_SECT_MASK;
    58a0:	4038      	ands	r0, r7
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    58a2:	4418      	add	r0, r3
    58a4:	eba0 0048 	sub.w	r0, r0, r8, lsl #1
    58a8:	6060      	str	r0, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
    58aa:	4038      	ands	r0, r7
    58ac:	60a0      	str	r0, [r4, #8]
		rc = nvs_gc(fs);
    58ae:	4620      	mov	r0, r4
    58b0:	f7ff fe40 	bl	5534 <nvs_gc>
    58b4:	4605      	mov	r5, r0
		if (rc) {
    58b6:	e7a2      	b.n	57fe <nvs_init+0x152>
		rc = -EDEADLK;
    58b8:	f06f 052c 	mvn.w	r5, #44	; 0x2c
    58bc:	e79f      	b.n	57fe <nvs_init+0x152>
		if (!nvs_ate_crc8_check(&last_ate)) {
    58be:	a801      	add	r0, sp, #4
    58c0:	f021 fe35 	bl	2752e <nvs_ate_crc8_check>
    58c4:	6865      	ldr	r5, [r4, #4]
    58c6:	b978      	cbnz	r0, 58e8 <nvs_init+0x23c>
			fs->data_wra = addr & ADDR_SECT_MASK;
    58c8:	9a00      	ldr	r2, [sp, #0]
			fs->data_wra += last_ate.offset;
    58ca:	f8bd 0006 	ldrh.w	r0, [sp, #6]
			fs->data_wra += nvs_al_size(fs, last_ate.len);
    58ce:	f8bd a008 	ldrh.w	sl, [sp, #8]
			fs->data_wra = addr & ADDR_SECT_MASK;
    58d2:	403a      	ands	r2, r7
			fs->data_wra += last_ate.offset;
    58d4:	4402      	add	r2, r0
    58d6:	60a2      	str	r2, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.len);
    58d8:	4651      	mov	r1, sl
    58da:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    58dc:	f021 fe3c 	bl	27558 <nvs_al_size.isra.0>
    58e0:	4410      	add	r0, r2
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    58e2:	42a8      	cmp	r0, r5
			fs->data_wra += nvs_al_size(fs, last_ate.len);
    58e4:	60a0      	str	r0, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    58e6:	d0c5      	beq.n	5874 <nvs_init+0x1c8>
		fs->ate_wra -= ate_size;
    58e8:	eba5 0508 	sub.w	r5, r5, r8
    58ec:	6065      	str	r5, [r4, #4]
    58ee:	e757      	b.n	57a0 <nvs_init+0xf4>
    58f0:	0002fc31 	.word	0x0002fc31
    58f4:	0002fc52 	.word	0x0002fc52
    58f8:	0002fc79 	.word	0x0002fc79
    58fc:	0002fc9b 	.word	0x0002fc9b
    5900:	0002fcb8 	.word	0x0002fcb8
    5904:	0002fcd1 	.word	0x0002fcd1
    5908:	ffff0000 	.word	0xffff0000
    590c:	0002fcf9 	.word	0x0002fcf9
    5910:	0002fd15 	.word	0x0002fd15
    5914:	0002fd2c 	.word	0x0002fd2c

00005918 <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
    5918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    591c:	461e      	mov	r6, r3
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
    591e:	7c03      	ldrb	r3, [r0, #16]
{
    5920:	b089      	sub	sp, #36	; 0x24
    5922:	4604      	mov	r4, r0
    5924:	4689      	mov	r9, r1
    5926:	4690      	mov	r8, r2
	if (!fs->ready) {
    5928:	b94b      	cbnz	r3, 593e <nvs_write+0x26>
		LOG_ERR("NVS not initialized");
    592a:	2145      	movs	r1, #69	; 0x45
    592c:	4865      	ldr	r0, [pc, #404]	; (5ac4 <nvs_write+0x1ac>)
    592e:	f021 fb1e 	bl	26f6e <printk>
		return -EACCES;
    5932:	f06f 050c 	mvn.w	r5, #12
	}
	rc = len;
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
    5936:	4628      	mov	r0, r5
    5938:	b009      	add	sp, #36	; 0x24
    593a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    593e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    5940:	2108      	movs	r1, #8
    5942:	4610      	mov	r0, r2
    5944:	f021 fe08 	bl	27558 <nvs_al_size.isra.0>
	data_size = nvs_al_size(fs, len);
    5948:	4631      	mov	r1, r6
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    594a:	4682      	mov	sl, r0
	data_size = nvs_al_size(fs, len);
    594c:	4610      	mov	r0, r2
    594e:	f021 fe03 	bl	27558 <nvs_al_size.isra.0>
	if ((len > (fs->sector_size - 3 * ate_size)) ||
    5952:	89a3      	ldrh	r3, [r4, #12]
    5954:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
    5958:	1a9b      	subs	r3, r3, r2
    595a:	42b3      	cmp	r3, r6
	data_size = nvs_al_size(fs, len);
    595c:	4607      	mov	r7, r0
	if ((len > (fs->sector_size - 3 * ate_size)) ||
    595e:	f0c0 80ab 	bcc.w	5ab8 <nvs_write+0x1a0>
    5962:	b11e      	cbz	r6, 596c <nvs_write+0x54>
	    ((len > 0) && (data == NULL))) {
    5964:	f1b8 0f00 	cmp.w	r8, #0
    5968:	f000 80a6 	beq.w	5ab8 <nvs_write+0x1a0>
	wlk_addr = fs->ate_wra;
    596c:	6863      	ldr	r3, [r4, #4]
    596e:	9303      	str	r3, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    5970:	aa04      	add	r2, sp, #16
    5972:	a903      	add	r1, sp, #12
    5974:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
    5976:	f8dd b00c 	ldr.w	fp, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    597a:	f021 fe29 	bl	275d0 <nvs_prev_ate>
		if (rc) {
    597e:	4605      	mov	r5, r0
    5980:	2800      	cmp	r0, #0
    5982:	d1d8      	bne.n	5936 <nvs_write+0x1e>
		if ((wlk_ate.id == id) && (!nvs_ate_crc8_check(&wlk_ate))) {
    5984:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    5988:	454b      	cmp	r3, r9
    598a:	d005      	beq.n	5998 <nvs_write+0x80>
		if (wlk_addr == fs->ate_wra) {
    598c:	6862      	ldr	r2, [r4, #4]
    598e:	9b03      	ldr	r3, [sp, #12]
    5990:	429a      	cmp	r2, r3
    5992:	d1ed      	bne.n	5970 <nvs_write+0x58>
		if (len == 0) {
    5994:	b9de      	cbnz	r6, 59ce <nvs_write+0xb6>
    5996:	e7ce      	b.n	5936 <nvs_write+0x1e>
		if ((wlk_ate.id == id) && (!nvs_ate_crc8_check(&wlk_ate))) {
    5998:	a804      	add	r0, sp, #16
    599a:	f021 fdc8 	bl	2752e <nvs_ate_crc8_check>
    599e:	2800      	cmp	r0, #0
    59a0:	d1f4      	bne.n	598c <nvs_write+0x74>
		if (len == 0) {
    59a2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    59a6:	b186      	cbz	r6, 59ca <nvs_write+0xb2>
		} else if (len == wlk_ate.len) {
    59a8:	42b3      	cmp	r3, r6
    59aa:	d110      	bne.n	59ce <nvs_write+0xb6>
		rd_addr += wlk_ate.offset;
    59ac:	f8bd 0012 	ldrh.w	r0, [sp, #18]
		rd_addr &= ADDR_SECT_MASK;
    59b0:	ea4f 411b 	mov.w	r1, fp, lsr #16
    59b4:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
    59b6:	4401      	add	r1, r0
    59b8:	4633      	mov	r3, r6
    59ba:	4642      	mov	r2, r8
    59bc:	4620      	mov	r0, r4
    59be:	f021 fd68 	bl	27492 <nvs_flash_block_cmp>
			if (rc <= 0) {
    59c2:	2800      	cmp	r0, #0
    59c4:	dc03      	bgt.n	59ce <nvs_write+0xb6>
    59c6:	4605      	mov	r5, r0
    59c8:	e7b5      	b.n	5936 <nvs_write+0x1e>
			if (wlk_ate.len == 0U) {
    59ca:	2b00      	cmp	r3, #0
    59cc:	d0b3      	beq.n	5936 <nvs_write+0x1e>
	if (data_size) {
    59ce:	2f00      	cmp	r7, #0
    59d0:	d13f      	bne.n	5a52 <nvs_write+0x13a>
	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
    59d2:	f104 0a14 	add.w	sl, r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
    59d6:	f04f 33ff 	mov.w	r3, #4294967295
    59da:	f04f 32ff 	mov.w	r2, #4294967295
    59de:	4650      	mov	r0, sl
	fs->ate_wra &= ADDR_SECT_MASK;
    59e0:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 5ac8 <nvs_write+0x1b0>
    59e4:	f01c fc52 	bl	2228c <z_impl_k_mutex_lock>
	gc_count = 0;
    59e8:	2300      	movs	r3, #0
		if (gc_count == fs->sector_count) {
    59ea:	89e2      	ldrh	r2, [r4, #14]
    59ec:	4293      	cmp	r3, r2
    59ee:	d060      	beq.n	5ab2 <nvs_write+0x19a>
		if (fs->ate_wra >= fs->data_wra + required_space) {
    59f0:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
    59f4:	1878      	adds	r0, r7, r1
    59f6:	4282      	cmp	r2, r0
    59f8:	d32e      	bcc.n	5a58 <nvs_write+0x140>
	entry.part = 0xff;
    59fa:	23ff      	movs	r3, #255	; 0xff
	nvs_ate_crc8_update(&entry);
    59fc:	a806      	add	r0, sp, #24
	entry.id = id;
    59fe:	f8ad 9018 	strh.w	r9, [sp, #24]
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    5a02:	f8ad 101a 	strh.w	r1, [sp, #26]
	entry.len = (uint16_t)len;
    5a06:	f8ad 601c 	strh.w	r6, [sp, #28]
	entry.part = 0xff;
    5a0a:	f88d 301e 	strb.w	r3, [sp, #30]
	nvs_ate_crc8_update(&entry);
    5a0e:	f021 fd9a 	bl	27546 <nvs_ate_crc8_update>
	if (!len) {
    5a12:	b136      	cbz	r6, 5a22 <nvs_write+0x10a>
    5a14:	4633      	mov	r3, r6
    5a16:	4642      	mov	r2, r8
    5a18:	68a1      	ldr	r1, [r4, #8]
    5a1a:	4620      	mov	r0, r4
    5a1c:	f021 fe28 	bl	27670 <nvs_flash_al_wrt.part.3>
    5a20:	4605      	mov	r5, r0
	fs->data_wra += nvs_al_size(fs, len);
    5a22:	4631      	mov	r1, r6
    5a24:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    5a26:	f021 fd97 	bl	27558 <nvs_al_size.isra.0>
    5a2a:	68a3      	ldr	r3, [r4, #8]
    5a2c:	4418      	add	r0, r3
    5a2e:	60a0      	str	r0, [r4, #8]
	if (rc) {
    5a30:	2d00      	cmp	r5, #0
    5a32:	d144      	bne.n	5abe <nvs_write+0x1a6>
	rc = nvs_flash_ate_wrt(fs, &entry);
    5a34:	a906      	add	r1, sp, #24
    5a36:	4620      	mov	r0, r4
    5a38:	f021 fe63 	bl	27702 <nvs_flash_ate_wrt>
	if (rc) {
    5a3c:	4605      	mov	r5, r0
    5a3e:	2800      	cmp	r0, #0
    5a40:	d13d      	bne.n	5abe <nvs_write+0x1a6>
	rc = len;
    5a42:	4632      	mov	r2, r6
    5a44:	9201      	str	r2, [sp, #4]
	return z_impl_k_mutex_unlock(mutex);
    5a46:	4650      	mov	r0, sl
    5a48:	f01c fcf4 	bl	22434 <z_impl_k_mutex_unlock>
	return rc;
    5a4c:	9a01      	ldr	r2, [sp, #4]
    5a4e:	4615      	mov	r5, r2
    5a50:	e771      	b.n	5936 <nvs_write+0x1e>
		required_space = data_size + ate_size;
    5a52:	4457      	add	r7, sl
    5a54:	b2bf      	uxth	r7, r7
    5a56:	e7bc      	b.n	59d2 <nvs_write+0xba>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    5a58:	2108      	movs	r1, #8
    5a5a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    5a5c:	9301      	str	r3, [sp, #4]
    5a5e:	f021 fd7b 	bl	27558 <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
    5a62:	f64f 71ff 	movw	r1, #65535	; 0xffff
    5a66:	f8ad 1018 	strh.w	r1, [sp, #24]
	close_ate.len = 0U;
    5a6a:	2100      	movs	r1, #0
    5a6c:	f8ad 101c 	strh.w	r1, [sp, #28]
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
    5a70:	1811      	adds	r1, r2, r0
    5a72:	f8ad 101a 	strh.w	r1, [sp, #26]
	fs->ate_wra += (fs->sector_size - ate_size);
    5a76:	89a1      	ldrh	r1, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
    5a78:	ea02 020b 	and.w	r2, r2, fp
	fs->ate_wra += (fs->sector_size - ate_size);
    5a7c:	440a      	add	r2, r1
    5a7e:	1a12      	subs	r2, r2, r0
    5a80:	6062      	str	r2, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
    5a82:	a806      	add	r0, sp, #24
    5a84:	f021 fd5f 	bl	27546 <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
    5a88:	a906      	add	r1, sp, #24
    5a8a:	4620      	mov	r0, r4
    5a8c:	f021 fe39 	bl	27702 <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
    5a90:	1d21      	adds	r1, r4, #4
    5a92:	89e0      	ldrh	r0, [r4, #14]
    5a94:	f021 fd6a 	bl	2756c <nvs_sector_advance.isra.1>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    5a98:	6862      	ldr	r2, [r4, #4]
    5a9a:	ea02 020b 	and.w	r2, r2, fp
    5a9e:	60a2      	str	r2, [r4, #8]
		rc = nvs_gc(fs);
    5aa0:	4620      	mov	r0, r4
    5aa2:	f7ff fd47 	bl	5534 <nvs_gc>
		if (rc) {
    5aa6:	4602      	mov	r2, r0
    5aa8:	2800      	cmp	r0, #0
    5aaa:	d1cb      	bne.n	5a44 <nvs_write+0x12c>
		gc_count++;
    5aac:	9b01      	ldr	r3, [sp, #4]
    5aae:	3301      	adds	r3, #1
		if (gc_count == fs->sector_count) {
    5ab0:	e79b      	b.n	59ea <nvs_write+0xd2>
			rc = -ENOSPC;
    5ab2:	f06f 021b 	mvn.w	r2, #27
    5ab6:	e7c5      	b.n	5a44 <nvs_write+0x12c>
		return -EINVAL;
    5ab8:	f06f 0515 	mvn.w	r5, #21
    5abc:	e73b      	b.n	5936 <nvs_write+0x1e>
			if (rc) {
    5abe:	462a      	mov	r2, r5
    5ac0:	e7c0      	b.n	5a44 <nvs_write+0x12c>
    5ac2:	bf00      	nop
    5ac4:	0002fc18 	.word	0x0002fc18
    5ac8:	ffff0000 	.word	0xffff0000

00005acc <nvs_read_hist>:
	return nvs_write(fs, id, NULL, 0);
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
    5acc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    5ad0:	461f      	mov	r7, r3
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
    5ad2:	7c03      	ldrb	r3, [r0, #16]
{
    5ad4:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
    5ad8:	4604      	mov	r4, r0
    5ada:	468a      	mov	sl, r1
    5adc:	4691      	mov	r9, r2
	if (!fs->ready) {
    5ade:	b943      	cbnz	r3, 5af2 <nvs_read_hist+0x26>
		LOG_ERR("NVS not initialized");
    5ae0:	4826      	ldr	r0, [pc, #152]	; (5b7c <nvs_read_hist+0xb0>)
    5ae2:	2145      	movs	r1, #69	; 0x45
    5ae4:	f021 fa43 	bl	26f6e <printk>
		return -EACCES;
    5ae8:	f06f 000c 	mvn.w	r0, #12

	return wlk_ate.len;

err:
	return rc;
}
    5aec:	b004      	add	sp, #16
    5aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    5af2:	2108      	movs	r1, #8
    5af4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    5af6:	f021 fd2f 	bl	27558 <nvs_al_size.isra.0>
	if (len > (fs->sector_size - 2 * ate_size)) {
    5afa:	89a3      	ldrh	r3, [r4, #12]
    5afc:	eba3 0040 	sub.w	r0, r3, r0, lsl #1
    5b00:	42b8      	cmp	r0, r7
    5b02:	d338      	bcc.n	5b76 <nvs_read_hist+0xaa>
	wlk_addr = fs->ate_wra;
    5b04:	6863      	ldr	r3, [r4, #4]
    5b06:	9301      	str	r3, [sp, #4]
	cnt_his = 0U;
    5b08:	2500      	movs	r5, #0
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    5b0a:	aa02      	add	r2, sp, #8
    5b0c:	a901      	add	r1, sp, #4
    5b0e:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
    5b10:	9e01      	ldr	r6, [sp, #4]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    5b12:	f021 fd5d 	bl	275d0 <nvs_prev_ate>
		if (rc) {
    5b16:	2800      	cmp	r0, #0
    5b18:	d1e8      	bne.n	5aec <nvs_read_hist+0x20>
		if ((wlk_ate.id == id) &&  (!nvs_ate_crc8_check(&wlk_ate))) {
    5b1a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    5b1e:	4553      	cmp	r3, sl
    5b20:	d105      	bne.n	5b2e <nvs_read_hist+0x62>
    5b22:	a802      	add	r0, sp, #8
    5b24:	f021 fd03 	bl	2752e <nvs_ate_crc8_check>
    5b28:	b908      	cbnz	r0, 5b2e <nvs_read_hist+0x62>
			cnt_his++;
    5b2a:	3501      	adds	r5, #1
    5b2c:	b2ad      	uxth	r5, r5
		if (wlk_addr == fs->ate_wra) {
    5b2e:	6862      	ldr	r2, [r4, #4]
    5b30:	9b01      	ldr	r3, [sp, #4]
    5b32:	429a      	cmp	r2, r3
    5b34:	d018      	beq.n	5b68 <nvs_read_hist+0x9c>
	while (cnt_his <= cnt) {
    5b36:	4545      	cmp	r5, r8
    5b38:	d9e7      	bls.n	5b0a <nvs_read_hist+0x3e>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
    5b3a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
    5b3e:	b1bb      	cbz	r3, 5b70 <nvs_read_hist+0xa4>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
    5b40:	4545      	cmp	r5, r8
    5b42:	d315      	bcc.n	5b70 <nvs_read_hist+0xa4>
	rd_addr += wlk_ate.offset;
    5b44:	f8bd 000a 	ldrh.w	r0, [sp, #10]
	rd_addr &= ADDR_SECT_MASK;
    5b48:	0c31      	lsrs	r1, r6, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
    5b4a:	42bb      	cmp	r3, r7
	rd_addr &= ADDR_SECT_MASK;
    5b4c:	ea4f 4101 	mov.w	r1, r1, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
    5b50:	bf28      	it	cs
    5b52:	463b      	movcs	r3, r7
    5b54:	4401      	add	r1, r0
    5b56:	464a      	mov	r2, r9
    5b58:	4620      	mov	r0, r4
    5b5a:	f021 fc8c 	bl	27476 <nvs_flash_rd>
	if (rc) {
    5b5e:	2800      	cmp	r0, #0
    5b60:	d1c4      	bne.n	5aec <nvs_read_hist+0x20>
	return wlk_ate.len;
    5b62:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    5b66:	e7c1      	b.n	5aec <nvs_read_hist+0x20>
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
    5b68:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    5b6c:	4553      	cmp	r3, sl
    5b6e:	d0e4      	beq.n	5b3a <nvs_read_hist+0x6e>
		return -ENOENT;
    5b70:	f06f 0001 	mvn.w	r0, #1
    5b74:	e7ba      	b.n	5aec <nvs_read_hist+0x20>
		return -EINVAL;
    5b76:	f06f 0015 	mvn.w	r0, #21
    5b7a:	e7b7      	b.n	5aec <nvs_read_hist+0x20>
    5b7c:	0002fc18 	.word	0x0002fc18

00005b80 <get_flash_area_from_id>:
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
    5b80:	4b08      	ldr	r3, [pc, #32]	; (5ba4 <get_flash_area_from_id+0x24>)
{
    5b82:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < flash_map_entries; i++) {
    5b84:	681d      	ldr	r5, [r3, #0]
		if (flash_map[i].fa_id == idx) {
    5b86:	4b08      	ldr	r3, [pc, #32]	; (5ba8 <get_flash_area_from_id+0x28>)
    5b88:	6819      	ldr	r1, [r3, #0]
	for (int i = 0; i < flash_map_entries; i++) {
    5b8a:	2300      	movs	r3, #0
    5b8c:	429d      	cmp	r5, r3
    5b8e:	dc02      	bgt.n	5b96 <get_flash_area_from_id+0x16>
			return &flash_map[i];
		}
	}

	return NULL;
    5b90:	2200      	movs	r2, #0
}
    5b92:	4610      	mov	r0, r2
    5b94:	bd30      	pop	{r4, r5, pc}
		if (flash_map[i].fa_id == idx) {
    5b96:	011c      	lsls	r4, r3, #4
    5b98:	190a      	adds	r2, r1, r4
    5b9a:	5d0c      	ldrb	r4, [r1, r4]
    5b9c:	4284      	cmp	r4, r0
    5b9e:	d0f8      	beq.n	5b92 <get_flash_area_from_id+0x12>
	for (int i = 0; i < flash_map_entries; i++) {
    5ba0:	3301      	adds	r3, #1
    5ba2:	e7f3      	b.n	5b8c <get_flash_area_from_id+0xc>
    5ba4:	0002e9d8 	.word	0x0002e9d8
    5ba8:	200006c4 	.word	0x200006c4

00005bac <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
    5bac:	4b08      	ldr	r3, [pc, #32]	; (5bd0 <flash_area_open+0x24>)
    5bae:	681b      	ldr	r3, [r3, #0]
{
    5bb0:	b510      	push	{r4, lr}
    5bb2:	460c      	mov	r4, r1
	if (flash_map == NULL) {
    5bb4:	b12b      	cbz	r3, 5bc2 <flash_area_open+0x16>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
    5bb6:	f7ff ffe3 	bl	5b80 <get_flash_area_from_id>
	if (area == NULL) {
    5bba:	b128      	cbz	r0, 5bc8 <flash_area_open+0x1c>
		return -ENOENT;
	}

	*fap = area;
    5bbc:	6020      	str	r0, [r4, #0]
	return 0;
    5bbe:	2000      	movs	r0, #0
}
    5bc0:	bd10      	pop	{r4, pc}
		return -EACCES;
    5bc2:	f06f 000c 	mvn.w	r0, #12
    5bc6:	e7fb      	b.n	5bc0 <flash_area_open+0x14>
		return -ENOENT;
    5bc8:	f06f 0001 	mvn.w	r0, #1
    5bcc:	e7f8      	b.n	5bc0 <flash_area_open+0x14>
    5bce:	bf00      	nop
    5bd0:	200006c4 	.word	0x200006c4

00005bd4 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
    5bd4:	b530      	push	{r4, r5, lr}
    5bd6:	b089      	sub	sp, #36	; 0x24
    5bd8:	460c      	mov	r4, r1
    5bda:	4615      	mov	r5, r2
	cb_data->area_idx = idx;
    5bdc:	9001      	str	r0, [sp, #4]
	fa = get_flash_area_from_id(idx);
    5bde:	f7ff ffcf 	bl	5b80 <get_flash_area_from_id>
	if (fa == NULL) {
    5be2:	b1b8      	cbz	r0, 5c14 <flash_area_get_sectors+0x40>
	cb_data->area_off = fa->fa_off;
    5be4:	6843      	ldr	r3, [r0, #4]
    5be6:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
    5be8:	6883      	ldr	r3, [r0, #8]
	cb_data->ret_len = *cnt;
    5bea:	6822      	ldr	r2, [r4, #0]
	flash_dev = device_get_binding(fa->fa_dev_name);
    5bec:	68c0      	ldr	r0, [r0, #12]
	cb_data->ret = ret;
    5bee:	e9cd 3503 	strd	r3, r5, [sp, #12]
	cb_data->ret_idx = 0U;
    5bf2:	2300      	movs	r3, #0
    5bf4:	9305      	str	r3, [sp, #20]
	cb_data->status = 0;
    5bf6:	e9cd 2306 	strd	r2, r3, [sp, #24]
	flash_dev = device_get_binding(fa->fa_dev_name);
    5bfa:	f021 fd9e 	bl	2773a <device_get_binding>
	if (flash_dev == NULL) {
    5bfe:	b160      	cbz	r0, 5c1a <flash_area_get_sectors+0x46>
	flash_page_foreach(flash_dev, cb, cb_data);
    5c00:	aa01      	add	r2, sp, #4
    5c02:	4907      	ldr	r1, [pc, #28]	; (5c20 <flash_area_get_sectors+0x4c>)
    5c04:	f027 f820 	bl	2cc48 <flash_page_foreach>
	if (cb_data->status == 0) {
    5c08:	9807      	ldr	r0, [sp, #28]
    5c0a:	b908      	cbnz	r0, 5c10 <flash_area_get_sectors+0x3c>
		*cnt = cb_data->ret_idx;
    5c0c:	9b05      	ldr	r3, [sp, #20]
    5c0e:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
    5c10:	b009      	add	sp, #36	; 0x24
    5c12:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
    5c14:	f06f 0015 	mvn.w	r0, #21
    5c18:	e7fa      	b.n	5c10 <flash_area_get_sectors+0x3c>
		return -ENODEV;
    5c1a:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
    5c1e:	e7f7      	b.n	5c10 <flash_area_get_sectors+0x3c>
    5c20:	0002773f 	.word	0x0002773f

00005c24 <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
    5c24:	4b0f      	ldr	r3, [pc, #60]	; (5c64 <settings_save_one+0x40>)
{
    5c26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
    5c2a:	681c      	ldr	r4, [r3, #0]
{
    5c2c:	4606      	mov	r6, r0
    5c2e:	460f      	mov	r7, r1
    5c30:	4690      	mov	r8, r2
	if (!cs) {
    5c32:	b1a4      	cbz	r4, 5c5e <settings_save_one+0x3a>
	return z_impl_k_mutex_lock(mutex, timeout);
    5c34:	f04f 32ff 	mov.w	r2, #4294967295
    5c38:	f04f 33ff 	mov.w	r3, #4294967295
    5c3c:	480a      	ldr	r0, [pc, #40]	; (5c68 <settings_save_one+0x44>)
    5c3e:	f01c fb25 	bl	2228c <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
    5c42:	6863      	ldr	r3, [r4, #4]
    5c44:	463a      	mov	r2, r7
    5c46:	689d      	ldr	r5, [r3, #8]
    5c48:	4631      	mov	r1, r6
    5c4a:	4643      	mov	r3, r8
    5c4c:	4620      	mov	r0, r4
    5c4e:	47a8      	blx	r5
    5c50:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    5c52:	4805      	ldr	r0, [pc, #20]	; (5c68 <settings_save_one+0x44>)
    5c54:	f01c fbee 	bl	22434 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
    5c58:	4620      	mov	r0, r4
    5c5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
    5c5e:	f06f 0401 	mvn.w	r4, #1
    5c62:	e7f9      	b.n	5c58 <settings_save_one+0x34>
    5c64:	20002570 	.word	0x20002570
    5c68:	200012bc 	.word	0x200012bc

00005c6c <settings_src_register>:
	parent->next = child;
    5c6c:	2300      	movs	r3, #0
    5c6e:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(slist, snode)
    5c70:	4b04      	ldr	r3, [pc, #16]	; (5c84 <settings_src_register+0x18>)
    5c72:	685a      	ldr	r2, [r3, #4]
    5c74:	b912      	cbnz	r2, 5c7c <settings_src_register+0x10>
	list->head = node;
    5c76:	e9c3 0000 	strd	r0, r0, [r3]
    5c7a:	4770      	bx	lr
	parent->next = child;
    5c7c:	6010      	str	r0, [r2, #0]
	list->tail = node;
    5c7e:	6058      	str	r0, [r3, #4]
}
    5c80:	4770      	bx	lr
    5c82:	bf00      	nop
    5c84:	20002568 	.word	0x20002568

00005c88 <settings_dst_register>:
	settings_save_dst = cs;
    5c88:	4b01      	ldr	r3, [pc, #4]	; (5c90 <settings_dst_register+0x8>)
    5c8a:	6018      	str	r0, [r3, #0]
}
    5c8c:	4770      	bx	lr
    5c8e:	bf00      	nop
    5c90:	20002570 	.word	0x20002570

00005c94 <settings_load_subtree>:
{
    5c94:	b530      	push	{r4, r5, lr}
    5c96:	b085      	sub	sp, #20
	const struct settings_load_arg arg = {
    5c98:	2300      	movs	r3, #0
{
    5c9a:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
    5c9c:	e9cd 3302 	strd	r3, r3, [sp, #8]
    5ca0:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    5ca2:	f04f 33ff 	mov.w	r3, #4294967295
    5ca6:	f04f 32ff 	mov.w	r2, #4294967295
    5caa:	480b      	ldr	r0, [pc, #44]	; (5cd8 <settings_load_subtree+0x44>)
    5cac:	f01c faee 	bl	2228c <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    5cb0:	4b0a      	ldr	r3, [pc, #40]	; (5cdc <settings_load_subtree+0x48>)
    5cb2:	681c      	ldr	r4, [r3, #0]
    5cb4:	b134      	cbz	r4, 5cc4 <settings_load_subtree+0x30>
		cs->cs_itf->csi_load(cs, &arg);
    5cb6:	6863      	ldr	r3, [r4, #4]
    5cb8:	4620      	mov	r0, r4
    5cba:	681b      	ldr	r3, [r3, #0]
    5cbc:	a901      	add	r1, sp, #4
    5cbe:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    5cc0:	6824      	ldr	r4, [r4, #0]
	return node->next;
    5cc2:	e7f7      	b.n	5cb4 <settings_load_subtree+0x20>
	rc = settings_commit_subtree(subtree);
    5cc4:	4628      	mov	r0, r5
    5cc6:	f000 f8cb 	bl	5e60 <settings_commit_subtree>
    5cca:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    5ccc:	4802      	ldr	r0, [pc, #8]	; (5cd8 <settings_load_subtree+0x44>)
    5cce:	f01c fbb1 	bl	22434 <z_impl_k_mutex_unlock>
}
    5cd2:	4620      	mov	r0, r4
    5cd4:	b005      	add	sp, #20
    5cd6:	bd30      	pop	{r4, r5, pc}
    5cd8:	200012bc 	.word	0x200012bc
    5cdc:	20002568 	.word	0x20002568

00005ce0 <settings_load_subtree_direct>:
{
    5ce0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
    5ce2:	e9cd 0101 	strd	r0, r1, [sp, #4]
    5ce6:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
    5ce8:	f04f 33ff 	mov.w	r3, #4294967295
    5cec:	f04f 32ff 	mov.w	r2, #4294967295
    5cf0:	4809      	ldr	r0, [pc, #36]	; (5d18 <settings_load_subtree_direct+0x38>)
    5cf2:	f01c facb 	bl	2228c <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    5cf6:	4b09      	ldr	r3, [pc, #36]	; (5d1c <settings_load_subtree_direct+0x3c>)
    5cf8:	681c      	ldr	r4, [r3, #0]
    5cfa:	b134      	cbz	r4, 5d0a <settings_load_subtree_direct+0x2a>
		cs->cs_itf->csi_load(cs, &arg);
    5cfc:	6863      	ldr	r3, [r4, #4]
    5cfe:	4620      	mov	r0, r4
    5d00:	681b      	ldr	r3, [r3, #0]
    5d02:	a901      	add	r1, sp, #4
    5d04:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    5d06:	6824      	ldr	r4, [r4, #0]
	return node->next;
    5d08:	e7f7      	b.n	5cfa <settings_load_subtree_direct+0x1a>
	return z_impl_k_mutex_unlock(mutex);
    5d0a:	4803      	ldr	r0, [pc, #12]	; (5d18 <settings_load_subtree_direct+0x38>)
    5d0c:	f01c fb92 	bl	22434 <z_impl_k_mutex_unlock>
}
    5d10:	2000      	movs	r0, #0
    5d12:	b004      	add	sp, #16
    5d14:	bd10      	pop	{r4, pc}
    5d16:	bf00      	nop
    5d18:	200012bc 	.word	0x200012bc
    5d1c:	20002568 	.word	0x20002568

00005d20 <settings_store_init>:
	list->head = NULL;
    5d20:	4b02      	ldr	r3, [pc, #8]	; (5d2c <settings_store_init+0xc>)
    5d22:	2200      	movs	r2, #0
	list->tail = NULL;
    5d24:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
    5d28:	4770      	bx	lr
    5d2a:	bf00      	nop
    5d2c:	20002568 	.word	0x20002568

00005d30 <settings_init>:
	list->head = NULL;
    5d30:	4b02      	ldr	r3, [pc, #8]	; (5d3c <settings_init+0xc>)
    5d32:	2200      	movs	r2, #0
	list->tail = NULL;
    5d34:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
    5d38:	f7ff bff2 	b.w	5d20 <settings_store_init>
    5d3c:	20002574 	.word	0x20002574

00005d40 <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
    5d40:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    5d44:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
    5d46:	460e      	mov	r6, r1
    5d48:	b109      	cbz	r1, 5d4e <settings_parse_and_lookup+0xe>
		*next = NULL;
    5d4a:	2300      	movs	r3, #0
    5d4c:	600b      	str	r3, [r1, #0]
	}

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    5d4e:	f8df 8098 	ldr.w	r8, [pc, #152]	; 5de8 <settings_parse_and_lookup+0xa8>
    5d52:	4c22      	ldr	r4, [pc, #136]	; (5ddc <settings_parse_and_lookup+0x9c>)
    5d54:	f8df 9094 	ldr.w	r9, [pc, #148]	; 5dec <settings_parse_and_lookup+0xac>
    5d58:	2500      	movs	r5, #0
    5d5a:	46c2      	mov	sl, r8
    5d5c:	4544      	cmp	r4, r8
    5d5e:	d908      	bls.n	5d72 <settings_parse_and_lookup+0x32>
    5d60:	4649      	mov	r1, r9
    5d62:	481f      	ldr	r0, [pc, #124]	; (5de0 <settings_parse_and_lookup+0xa0>)
    5d64:	2294      	movs	r2, #148	; 0x94
    5d66:	f021 f902 	bl	26f6e <printk>
    5d6a:	2194      	movs	r1, #148	; 0x94
    5d6c:	4648      	mov	r0, r9
    5d6e:	f021 fb77 	bl	27460 <assert_post_action>
    5d72:	4554      	cmp	r4, sl
    5d74:	d308      	bcc.n	5d88 <settings_parse_and_lookup+0x48>
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    5d76:	4b1b      	ldr	r3, [pc, #108]	; (5de4 <settings_parse_and_lookup+0xa4>)
    5d78:	681c      	ldr	r4, [r3, #0]
    5d7a:	b10c      	cbz	r4, 5d80 <settings_parse_and_lookup+0x40>
    5d7c:	3c14      	subs	r4, #20
    5d7e:	b9c4      	cbnz	r4, 5db2 <settings_parse_and_lookup+0x72>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
    5d80:	4628      	mov	r0, r5
    5d82:	b002      	add	sp, #8
    5d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
    5d88:	aa01      	add	r2, sp, #4
    5d8a:	6821      	ldr	r1, [r4, #0]
    5d8c:	4638      	mov	r0, r7
    5d8e:	f021 fcfb 	bl	27788 <settings_name_steq>
    5d92:	b160      	cbz	r0, 5dae <settings_parse_and_lookup+0x6e>
		if (!bestmatch) {
    5d94:	b925      	cbnz	r5, 5da0 <settings_parse_and_lookup+0x60>
			if (next) {
    5d96:	b10e      	cbz	r6, 5d9c <settings_parse_and_lookup+0x5c>
				*next = tmpnext;
    5d98:	9b01      	ldr	r3, [sp, #4]
    5d9a:	6033      	str	r3, [r6, #0]
    5d9c:	4625      	mov	r5, r4
    5d9e:	e006      	b.n	5dae <settings_parse_and_lookup+0x6e>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
    5da0:	2200      	movs	r2, #0
    5da2:	6829      	ldr	r1, [r5, #0]
    5da4:	6820      	ldr	r0, [r4, #0]
    5da6:	f021 fcef 	bl	27788 <settings_name_steq>
    5daa:	2800      	cmp	r0, #0
    5dac:	d1f3      	bne.n	5d96 <settings_parse_and_lookup+0x56>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    5dae:	3414      	adds	r4, #20
    5db0:	e7d4      	b.n	5d5c <settings_parse_and_lookup+0x1c>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
    5db2:	aa01      	add	r2, sp, #4
    5db4:	6821      	ldr	r1, [r4, #0]
    5db6:	4638      	mov	r0, r7
    5db8:	f021 fce6 	bl	27788 <settings_name_steq>
    5dbc:	b160      	cbz	r0, 5dd8 <settings_parse_and_lookup+0x98>
		if (!bestmatch) {
    5dbe:	b925      	cbnz	r5, 5dca <settings_parse_and_lookup+0x8a>
			if (next) {
    5dc0:	b10e      	cbz	r6, 5dc6 <settings_parse_and_lookup+0x86>
				*next = tmpnext;
    5dc2:	9b01      	ldr	r3, [sp, #4]
    5dc4:	6033      	str	r3, [r6, #0]
    5dc6:	4625      	mov	r5, r4
    5dc8:	e006      	b.n	5dd8 <settings_parse_and_lookup+0x98>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
    5dca:	2200      	movs	r2, #0
    5dcc:	6829      	ldr	r1, [r5, #0]
    5dce:	6820      	ldr	r0, [r4, #0]
    5dd0:	f021 fcda 	bl	27788 <settings_name_steq>
    5dd4:	2800      	cmp	r0, #0
    5dd6:	d1f3      	bne.n	5dc0 <settings_parse_and_lookup+0x80>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    5dd8:	6964      	ldr	r4, [r4, #20]
    5dda:	e7ce      	b.n	5d7a <settings_parse_and_lookup+0x3a>
    5ddc:	0002e338 	.word	0x0002e338
    5de0:	0002fa94 	.word	0x0002fa94
    5de4:	20002574 	.word	0x20002574
    5de8:	0002e48c 	.word	0x0002e48c
    5dec:	0002fd86 	.word	0x0002fd86

00005df0 <settings_call_set_handler>:
int settings_call_set_handler(const char *name,
			      size_t len,
			      settings_read_cb read_cb,
			      void *read_cb_arg,
			      const struct settings_load_arg *load_arg)
{
    5df0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5df4:	b085      	sub	sp, #20
    5df6:	4605      	mov	r5, r0
    5df8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	int rc;
	const char *name_key = name;
    5dfa:	9003      	str	r0, [sp, #12]
{
    5dfc:	460e      	mov	r6, r1
    5dfe:	4617      	mov	r7, r2
    5e00:	4698      	mov	r8, r3

	if (load_arg && load_arg->subtree &&
    5e02:	b1b4      	cbz	r4, 5e32 <settings_call_set_handler+0x42>
    5e04:	6821      	ldr	r1, [r4, #0]
    5e06:	b179      	cbz	r1, 5e28 <settings_call_set_handler+0x38>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
    5e08:	aa03      	add	r2, sp, #12
    5e0a:	f021 fcbd 	bl	27788 <settings_name_steq>
	if (load_arg && load_arg->subtree &&
    5e0e:	b958      	cbnz	r0, 5e28 <settings_call_set_handler+0x38>

		if (rc != 0) {
			LOG_ERR("set-value failure. key: %s error(%d)",
				log_strdup(name), rc);
			/* Ignoring the error */
			rc = 0;
    5e10:	2000      	movs	r0, #0
    5e12:	e006      	b.n	5e22 <settings_call_set_handler+0x32>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
    5e14:	68a3      	ldr	r3, [r4, #8]
    5e16:	9300      	str	r3, [sp, #0]
    5e18:	463a      	mov	r2, r7
    5e1a:	4643      	mov	r3, r8
    5e1c:	4631      	mov	r1, r6
    5e1e:	9803      	ldr	r0, [sp, #12]
    5e20:	47c8      	blx	r9
			LOG_DBG("set-value OK. key: %s",
				log_strdup(name));
		}
	}
	return rc;
}
    5e22:	b005      	add	sp, #20
    5e24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (load_arg && load_arg->cb) {
    5e28:	f8d4 9004 	ldr.w	r9, [r4, #4]
    5e2c:	f1b9 0f00 	cmp.w	r9, #0
    5e30:	d1f0      	bne.n	5e14 <settings_call_set_handler+0x24>
		ch = settings_parse_and_lookup(name, &name_key);
    5e32:	a903      	add	r1, sp, #12
    5e34:	4628      	mov	r0, r5
    5e36:	f7ff ff83 	bl	5d40 <settings_parse_and_lookup>
		if (!ch) {
    5e3a:	2800      	cmp	r0, #0
    5e3c:	d0e8      	beq.n	5e10 <settings_call_set_handler+0x20>
		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
    5e3e:	6884      	ldr	r4, [r0, #8]
    5e40:	9803      	ldr	r0, [sp, #12]
    5e42:	4643      	mov	r3, r8
    5e44:	463a      	mov	r2, r7
    5e46:	4631      	mov	r1, r6
    5e48:	47a0      	blx	r4
		if (rc != 0) {
    5e4a:	4603      	mov	r3, r0
    5e4c:	2800      	cmp	r0, #0
    5e4e:	d0df      	beq.n	5e10 <settings_call_set_handler+0x20>
			LOG_ERR("set-value failure. key: %s error(%d)",
    5e50:	462a      	mov	r2, r5
    5e52:	2145      	movs	r1, #69	; 0x45
    5e54:	4801      	ldr	r0, [pc, #4]	; (5e5c <settings_call_set_handler+0x6c>)
    5e56:	f021 f88a 	bl	26f6e <printk>
    5e5a:	e7d9      	b.n	5e10 <settings_call_set_handler+0x20>
    5e5c:	0002fd5c 	.word	0x0002fd5c

00005e60 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
    5e60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int rc;
	int rc2;

	rc = 0;

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    5e64:	4f1f      	ldr	r7, [pc, #124]	; (5ee4 <settings_commit_subtree+0x84>)
    5e66:	4c20      	ldr	r4, [pc, #128]	; (5ee8 <settings_commit_subtree+0x88>)
    5e68:	f8df 8088 	ldr.w	r8, [pc, #136]	; 5ef4 <settings_commit_subtree+0x94>
{
    5e6c:	4606      	mov	r6, r0
	rc = 0;
    5e6e:	2500      	movs	r5, #0
    5e70:	46b9      	mov	r9, r7
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    5e72:	42bc      	cmp	r4, r7
    5e74:	d908      	bls.n	5e88 <settings_commit_subtree+0x28>
    5e76:	4641      	mov	r1, r8
    5e78:	481c      	ldr	r0, [pc, #112]	; (5eec <settings_commit_subtree+0x8c>)
    5e7a:	22f4      	movs	r2, #244	; 0xf4
    5e7c:	f021 f877 	bl	26f6e <printk>
    5e80:	21f4      	movs	r1, #244	; 0xf4
    5e82:	4640      	mov	r0, r8
    5e84:	f021 faec 	bl	27460 <assert_post_action>
    5e88:	454c      	cmp	r4, r9
    5e8a:	d307      	bcc.n	5e9c <settings_commit_subtree+0x3c>
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    5e8c:	4b18      	ldr	r3, [pc, #96]	; (5ef0 <settings_commit_subtree+0x90>)
    5e8e:	681c      	ldr	r4, [r3, #0]
    5e90:	b10c      	cbz	r4, 5e96 <settings_commit_subtree+0x36>
    5e92:	3c14      	subs	r4, #20
    5e94:	b9a4      	cbnz	r4, 5ec0 <settings_commit_subtree+0x60>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
    5e96:	4628      	mov	r0, r5
    5e98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    5e9c:	b91e      	cbnz	r6, 5ea6 <settings_commit_subtree+0x46>
		if (ch->h_commit) {
    5e9e:	68e3      	ldr	r3, [r4, #12]
    5ea0:	b94b      	cbnz	r3, 5eb6 <settings_commit_subtree+0x56>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    5ea2:	3414      	adds	r4, #20
    5ea4:	e7e5      	b.n	5e72 <settings_commit_subtree+0x12>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    5ea6:	2200      	movs	r2, #0
    5ea8:	4631      	mov	r1, r6
    5eaa:	6820      	ldr	r0, [r4, #0]
    5eac:	f021 fc6c 	bl	27788 <settings_name_steq>
    5eb0:	2800      	cmp	r0, #0
    5eb2:	d1f4      	bne.n	5e9e <settings_commit_subtree+0x3e>
    5eb4:	e7f5      	b.n	5ea2 <settings_commit_subtree+0x42>
			rc2 = ch->h_commit();
    5eb6:	4798      	blx	r3
				rc = rc2;
    5eb8:	2d00      	cmp	r5, #0
    5eba:	bf08      	it	eq
    5ebc:	4605      	moveq	r5, r0
    5ebe:	e7f0      	b.n	5ea2 <settings_commit_subtree+0x42>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    5ec0:	b91e      	cbnz	r6, 5eca <settings_commit_subtree+0x6a>
		if (ch->h_commit) {
    5ec2:	68e3      	ldr	r3, [r4, #12]
    5ec4:	b94b      	cbnz	r3, 5eda <settings_commit_subtree+0x7a>
    5ec6:	6964      	ldr	r4, [r4, #20]
    5ec8:	e7e2      	b.n	5e90 <settings_commit_subtree+0x30>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    5eca:	2200      	movs	r2, #0
    5ecc:	4631      	mov	r1, r6
    5ece:	6820      	ldr	r0, [r4, #0]
    5ed0:	f021 fc5a 	bl	27788 <settings_name_steq>
    5ed4:	2800      	cmp	r0, #0
    5ed6:	d1f4      	bne.n	5ec2 <settings_commit_subtree+0x62>
    5ed8:	e7f5      	b.n	5ec6 <settings_commit_subtree+0x66>
			rc2 = ch->h_commit();
    5eda:	4798      	blx	r3
				rc = rc2;
    5edc:	2d00      	cmp	r5, #0
    5ede:	bf08      	it	eq
    5ee0:	4605      	moveq	r5, r0
    5ee2:	e7f0      	b.n	5ec6 <settings_commit_subtree+0x66>
    5ee4:	0002e48c 	.word	0x0002e48c
    5ee8:	0002e338 	.word	0x0002e338
    5eec:	0002fa94 	.word	0x0002fa94
    5ef0:	20002574 	.word	0x20002574
    5ef4:	0002fd86 	.word	0x0002fd86

00005ef8 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
    5ef8:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
    5efa:	4c06      	ldr	r4, [pc, #24]	; (5f14 <settings_subsys_init+0x1c>)
    5efc:	7823      	ldrb	r3, [r4, #0]
    5efe:	b93b      	cbnz	r3, 5f10 <settings_subsys_init+0x18>
		return 0;
	}

	settings_init();
    5f00:	f7ff ff16 	bl	5d30 <settings_init>

	err = settings_backend_init(); /* func rises kernel panic once error */
    5f04:	f000 f864 	bl	5fd0 <settings_backend_init>

	if (!err) {
    5f08:	b908      	cbnz	r0, 5f0e <settings_subsys_init+0x16>
		settings_subsys_initialized = true;
    5f0a:	2301      	movs	r3, #1
    5f0c:	7023      	strb	r3, [r4, #0]
	}

	return err;
}
    5f0e:	bd10      	pop	{r4, pc}
		return 0;
    5f10:	2000      	movs	r0, #0
    5f12:	e7fc      	b.n	5f0e <settings_subsys_init+0x16>
    5f14:	200046dd 	.word	0x200046dd

00005f18 <settings_nvs_load>:
	return 0;
}

static int settings_nvs_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
    5f18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	char name[SETTINGS_MAX_NAME_LEN + SETTINGS_EXTRA_LEN + 1];
	char buf;
	ssize_t rc1, rc2;
	uint16_t name_id = NVS_NAMECNT_ID;

	name_id = cf->last_name_id + 1;
    5f1c:	8f04      	ldrh	r4, [r0, #56]	; 0x38
		/* Found a name, this might not include a trailing \0 */
		name[rc1] = '\0';
		read_fn_arg.fs = &cf->cf_nvs;
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;

		ret = settings_call_set_handler(
    5f1e:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 5fcc <settings_nvs_load+0xb4>
	name_id = cf->last_name_id + 1;
    5f22:	3401      	adds	r4, #1
{
    5f24:	b098      	sub	sp, #96	; 0x60
    5f26:	4680      	mov	r8, r0
    5f28:	468a      	mov	sl, r1
	name_id = cf->last_name_id + 1;
    5f2a:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
    5f2c:	f100 0608 	add.w	r6, r0, #8
		name_id--;
    5f30:	1e65      	subs	r5, r4, #1
    5f32:	b2ad      	uxth	r5, r5
		if (name_id == NVS_NAMECNT_ID) {
    5f34:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    5f38:	d045      	beq.n	5fc6 <settings_nvs_load+0xae>
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
    5f3a:	234a      	movs	r3, #74	; 0x4a
    5f3c:	aa05      	add	r2, sp, #20
    5f3e:	4629      	mov	r1, r5
    5f40:	4630      	mov	r0, r6
    5f42:	f021 fbf3 	bl	2772c <nvs_read>
    5f46:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
    5f4a:	343f      	adds	r4, #63	; 0x3f
    5f4c:	b2a4      	uxth	r4, r4
    5f4e:	4607      	mov	r7, r0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
    5f50:	4621      	mov	r1, r4
    5f52:	2301      	movs	r3, #1
    5f54:	f10d 020b 	add.w	r2, sp, #11
    5f58:	4630      	mov	r0, r6
    5f5a:	f021 fbe7 	bl	2772c <nvs_read>
		if ((rc1 <= 0) && (rc2 <= 0)) {
    5f5e:	2f00      	cmp	r7, #0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
    5f60:	4601      	mov	r1, r0
		if ((rc1 <= 0) && (rc2 <= 0)) {
    5f62:	dc03      	bgt.n	5f6c <settings_nvs_load+0x54>
    5f64:	2800      	cmp	r0, #0
    5f66:	dc03      	bgt.n	5f70 <settings_nvs_load+0x58>
{
    5f68:	462c      	mov	r4, r5
    5f6a:	e7e1      	b.n	5f30 <settings_nvs_load+0x18>
		if ((rc1 <= 0) || (rc2 <= 0)) {
    5f6c:	2800      	cmp	r0, #0
    5f6e:	dc16      	bgt.n	5f9e <settings_nvs_load+0x86>
			if (name_id == cf->last_name_id) {
    5f70:	f8b8 3038 	ldrh.w	r3, [r8, #56]	; 0x38
    5f74:	42ab      	cmp	r3, r5
    5f76:	d109      	bne.n	5f8c <settings_nvs_load+0x74>
				cf->last_name_id--;
    5f78:	4642      	mov	r2, r8
    5f7a:	1e6b      	subs	r3, r5, #1
    5f7c:	f822 3f38 	strh.w	r3, [r2, #56]!
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
    5f80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    5f84:	2302      	movs	r3, #2
    5f86:	4630      	mov	r0, r6
    5f88:	f7ff fcc6 	bl	5918 <nvs_write>
			nvs_delete(&cf->cf_nvs, name_id);
    5f8c:	4629      	mov	r1, r5
    5f8e:	4630      	mov	r0, r6
    5f90:	f021 fbc8 	bl	27724 <nvs_delete>
			nvs_delete(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET);
    5f94:	4621      	mov	r1, r4
    5f96:	4630      	mov	r0, r6
    5f98:	f021 fbc4 	bl	27724 <nvs_delete>
			continue;
    5f9c:	e7e4      	b.n	5f68 <settings_nvs_load+0x50>
		name[rc1] = '\0';
    5f9e:	ab18      	add	r3, sp, #96	; 0x60
    5fa0:	441f      	add	r7, r3
    5fa2:	2300      	movs	r3, #0
    5fa4:	f807 3c4c 	strb.w	r3, [r7, #-76]
		ret = settings_call_set_handler(
    5fa8:	464a      	mov	r2, r9
    5faa:	f8cd a000 	str.w	sl, [sp]
    5fae:	ab03      	add	r3, sp, #12
    5fb0:	a805      	add	r0, sp, #20
		read_fn_arg.fs = &cf->cf_nvs;
    5fb2:	9603      	str	r6, [sp, #12]
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;
    5fb4:	f8ad 4010 	strh.w	r4, [sp, #16]
		ret = settings_call_set_handler(
    5fb8:	f7ff ff1a 	bl	5df0 <settings_call_set_handler>
			name, rc2,
			settings_nvs_read_fn, &read_fn_arg,
			(void *)arg);
		if (ret) {
    5fbc:	2800      	cmp	r0, #0
    5fbe:	d0d3      	beq.n	5f68 <settings_nvs_load+0x50>
			break;
		}
	}
	return ret;
}
    5fc0:	b018      	add	sp, #96	; 0x60
    5fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5fc6:	2000      	movs	r0, #0
	return ret;
    5fc8:	e7fa      	b.n	5fc0 <settings_nvs_load+0xa8>
    5fca:	bf00      	nop
    5fcc:	000277f5 	.word	0x000277f5

00005fd0 <settings_backend_init>:
	LOG_DBG("Initialized");
	return 0;
}

int settings_backend_init(void)
{
    5fd0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc;
	uint16_t cnt = 0;
	size_t nvs_sector_size, nvs_size = 0;
	const struct flash_area *fa;
	struct flash_sector hw_flash_sector;
	uint32_t sector_cnt = 1;
    5fd2:	2301      	movs	r3, #1

	rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
    5fd4:	4669      	mov	r1, sp
    5fd6:	2003      	movs	r0, #3
	uint32_t sector_cnt = 1;
    5fd8:	9301      	str	r3, [sp, #4]
	rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
    5fda:	f7ff fde7 	bl	5bac <flash_area_open>
	if (rc) {
    5fde:	4604      	mov	r4, r0
    5fe0:	2800      	cmp	r0, #0
    5fe2:	d137      	bne.n	6054 <settings_backend_init+0x84>
		return rc;
	}

	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &sector_cnt,
    5fe4:	aa02      	add	r2, sp, #8
    5fe6:	a901      	add	r1, sp, #4
    5fe8:	2003      	movs	r0, #3
    5fea:	f7ff fdf3 	bl	5bd4 <flash_area_get_sectors>
				    &hw_flash_sector);
	if (rc == -ENODEV) {
    5fee:	f110 0f13 	cmn.w	r0, #19
	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &sector_cnt,
    5ff2:	4604      	mov	r4, r0
	if (rc == -ENODEV) {
    5ff4:	d02e      	beq.n	6054 <settings_backend_init+0x84>
		return rc;
	} else if (rc != 0 && rc != -ENOMEM) {
    5ff6:	b140      	cbz	r0, 600a <settings_backend_init+0x3a>
    5ff8:	f110 040c 	adds.w	r4, r0, #12
    5ffc:	d005      	beq.n	600a <settings_backend_init+0x3a>
		k_panic();
    5ffe:	4040      	eors	r0, r0
    6000:	f380 8811 	msr	BASEPRI, r0
    6004:	f04f 0004 	mov.w	r0, #4
    6008:	df02      	svc	2
	}

	nvs_sector_size = CONFIG_SETTINGS_NVS_SECTOR_SIZE_MULT *
    600a:	9903      	ldr	r1, [sp, #12]
			  hw_flash_sector.fs_size;

	if (nvs_sector_size > UINT16_MAX) {
    600c:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
    6010:	d223      	bcs.n	605a <settings_backend_init+0x8a>
		return -EDOM;
	}

	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
		nvs_size += nvs_sector_size;
		if (nvs_size > fa->fa_size) {
    6012:	9a00      	ldr	r2, [sp, #0]
    6014:	2300      	movs	r3, #0
    6016:	6895      	ldr	r5, [r2, #8]
	size_t nvs_sector_size, nvs_size = 0;
    6018:	4618      	mov	r0, r3
		nvs_size += nvs_sector_size;
    601a:	4408      	add	r0, r1
		if (nvs_size > fa->fa_size) {
    601c:	4285      	cmp	r5, r0
    601e:	b29c      	uxth	r4, r3
    6020:	d303      	bcc.n	602a <settings_backend_init+0x5a>
			break;
		}
		cnt++;
    6022:	3301      	adds	r3, #1
	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
    6024:	2b08      	cmp	r3, #8
    6026:	d1f8      	bne.n	601a <settings_backend_init+0x4a>
    6028:	461c      	mov	r4, r3
	}

	/* define the nvs file system using the page_info */
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
    602a:	4d0d      	ldr	r5, [pc, #52]	; (6060 <settings_backend_init+0x90>)
	default_settings_nvs.cf_nvs.sector_count = cnt;
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
    602c:	6853      	ldr	r3, [r2, #4]
    602e:	60ab      	str	r3, [r5, #8]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;

	rc = settings_nvs_backend_init(&default_settings_nvs);
    6030:	4628      	mov	r0, r5
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
    6032:	68d3      	ldr	r3, [r2, #12]
	default_settings_nvs.cf_nvs.sector_count = cnt;
    6034:	82ec      	strh	r4, [r5, #22]
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
    6036:	82a9      	strh	r1, [r5, #20]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
    6038:	63eb      	str	r3, [r5, #60]	; 0x3c
	rc = settings_nvs_backend_init(&default_settings_nvs);
    603a:	f021 fc72 	bl	27922 <settings_nvs_backend_init>
	if (rc) {
    603e:	4604      	mov	r4, r0
    6040:	b940      	cbnz	r0, 6054 <settings_backend_init+0x84>
	cf->cf_store.cs_itf = &settings_nvs_itf;
    6042:	4e08      	ldr	r6, [pc, #32]	; (6064 <settings_backend_init+0x94>)
    6044:	606e      	str	r6, [r5, #4]
	settings_src_register(&cf->cf_store);
    6046:	4628      	mov	r0, r5
    6048:	f7ff fe10 	bl	5c6c <settings_src_register>
	settings_dst_register(&cf->cf_store);
    604c:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
    604e:	606e      	str	r6, [r5, #4]
	settings_dst_register(&cf->cf_store);
    6050:	f7ff fe1a 	bl	5c88 <settings_dst_register>
	}

	rc = settings_nvs_dst(&default_settings_nvs);

	return rc;
}
    6054:	4620      	mov	r0, r4
    6056:	b004      	add	sp, #16
    6058:	bd70      	pop	{r4, r5, r6, pc}
		return -EDOM;
    605a:	f06f 0420 	mvn.w	r4, #32
    605e:	e7f9      	b.n	6054 <settings_backend_init+0x84>
    6060:	2000257c 	.word	0x2000257c
    6064:	200006c8 	.word	0x200006c8

00006068 <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

void sys_reboot(int type)
{
    6068:	b508      	push	{r3, lr}
    606a:	4604      	mov	r4, r0
	__asm__ volatile(
    606c:	f04f 0220 	mov.w	r2, #32
    6070:	f3ef 8311 	mrs	r3, BASEPRI
    6074:	f382 8811 	msr	BASEPRI, r2
    6078:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
    607c:	f021 fcfb 	bl	27a76 <sys_clock_disable>
#endif

	sys_arch_reboot(type);
    6080:	4620      	mov	r0, r4
    6082:	f001 fb55 	bl	7730 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    6086:	4803      	ldr	r0, [pc, #12]	; (6094 <sys_reboot+0x2c>)
    6088:	f020 ff71 	bl	26f6e <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    608c:	f000 feec 	bl	6e68 <arch_cpu_idle>
    6090:	e7fc      	b.n	608c <sys_reboot+0x24>
    6092:	bf00      	nop
    6094:	0002fdbe 	.word	0x0002fdbe

00006098 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    6098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    609c:	4c0e      	ldr	r4, [pc, #56]	; (60d8 <onoff_start+0x40>)
    609e:	1b05      	subs	r5, r0, r4
    60a0:	f3c5 1347 	ubfx	r3, r5, #5, #8
	err = set_starting_state(&subdata->flags, ctx);
    60a4:	250c      	movs	r5, #12
    60a6:	435d      	muls	r5, r3
{
    60a8:	4607      	mov	r7, r0
	err = set_starting_state(&subdata->flags, ctx);
    60aa:	f105 0048 	add.w	r0, r5, #72	; 0x48
{
    60ae:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
    60b0:	4420      	add	r0, r4
    60b2:	2140      	movs	r1, #64	; 0x40
    60b4:	f021 fc51 	bl	2795a <set_starting_state>
	if (err < 0) {
    60b8:	1e01      	subs	r1, r0, #0
    60ba:	db08      	blt.n	60ce <onoff_start+0x36>
	subdata->cb = cb;
    60bc:	4b07      	ldr	r3, [pc, #28]	; (60dc <onoff_start+0x44>)
    60be:	442c      	add	r4, r5
	subdata->user_data = user_data;
    60c0:	e9c4 3610 	strd	r3, r6, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    60c4:	4b06      	ldr	r3, [pc, #24]	; (60e0 <onoff_start+0x48>)
    60c6:	595b      	ldr	r3, [r3, r5]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    60c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    60cc:	4718      	bx	r3
		notify(mgr, err);
    60ce:	4638      	mov	r0, r7
    60d0:	4633      	mov	r3, r6
}
    60d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    60d6:	4718      	bx	r3
    60d8:	200025cc 	.word	0x200025cc
    60dc:	000279bd 	.word	0x000279bd
    60e0:	0002e9f0 	.word	0x0002e9f0

000060e4 <get_status>:
{
    60e4:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    60e6:	b2cc      	uxtb	r4, r1
    60e8:	2c01      	cmp	r4, #1
{
    60ea:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    60ec:	d908      	bls.n	6100 <get_status+0x1c>
    60ee:	4908      	ldr	r1, [pc, #32]	; (6110 <get_status+0x2c>)
    60f0:	4808      	ldr	r0, [pc, #32]	; (6114 <get_status+0x30>)
    60f2:	227e      	movs	r2, #126	; 0x7e
    60f4:	f020 ff3b 	bl	26f6e <printk>
    60f8:	217e      	movs	r1, #126	; 0x7e
    60fa:	4805      	ldr	r0, [pc, #20]	; (6110 <get_status+0x2c>)
    60fc:	f021 f9b0 	bl	27460 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    6100:	68eb      	ldr	r3, [r5, #12]
    6102:	210c      	movs	r1, #12
    6104:	fb04 3101 	mla	r1, r4, r1, r3
    6108:	6c88      	ldr	r0, [r1, #72]	; 0x48
}
    610a:	f000 0007 	and.w	r0, r0, #7
    610e:	bd38      	pop	{r3, r4, r5, pc}
    6110:	0002fde7 	.word	0x0002fde7
    6114:	0002fa94 	.word	0x0002fa94

00006118 <stop>:
{
    6118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    611a:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    611c:	2c01      	cmp	r4, #1
{
    611e:	4605      	mov	r5, r0
    6120:	4617      	mov	r7, r2
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    6122:	68c6      	ldr	r6, [r0, #12]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    6124:	d90a      	bls.n	613c <stop+0x24>
    6126:	4918      	ldr	r1, [pc, #96]	; (6188 <stop+0x70>)
    6128:	4818      	ldr	r0, [pc, #96]	; (618c <stop+0x74>)
    612a:	f240 1253 	movw	r2, #339	; 0x153
    612e:	f020 ff1e 	bl	26f6e <printk>
    6132:	f240 1153 	movw	r1, #339	; 0x153
    6136:	4814      	ldr	r0, [pc, #80]	; (6188 <stop+0x70>)
    6138:	f021 f992 	bl	27460 <assert_post_action>
    613c:	f04f 0320 	mov.w	r3, #32
    6140:	f3ef 8111 	mrs	r1, BASEPRI
    6144:	f383 8811 	msr	BASEPRI, r3
    6148:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    614c:	230c      	movs	r3, #12
    614e:	fb03 6204 	mla	r2, r3, r4, r6
    6152:	6c92      	ldr	r2, [r2, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    6154:	f012 02c0 	ands.w	r2, r2, #192	; 0xc0
    6158:	d001      	beq.n	615e <stop+0x46>
    615a:	4297      	cmp	r7, r2
    615c:	d111      	bne.n	6182 <stop+0x6a>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    615e:	fb03 6304 	mla	r3, r3, r4, r6
    6162:	2201      	movs	r2, #1
    6164:	649a      	str	r2, [r3, #72]	; 0x48
	int err = 0;
    6166:	2000      	movs	r0, #0
	__asm__ volatile(
    6168:	f381 8811 	msr	BASEPRI, r1
    616c:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    6170:	b930      	cbnz	r0, 6180 <stop+0x68>
	get_sub_config(dev, type)->stop();
    6172:	686b      	ldr	r3, [r5, #4]
    6174:	220c      	movs	r2, #12
    6176:	fb02 3404 	mla	r4, r2, r4, r3
    617a:	6863      	ldr	r3, [r4, #4]
    617c:	4798      	blx	r3
	return 0;
    617e:	2000      	movs	r0, #0
}
    6180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
    6182:	f04f 30ff 	mov.w	r0, #4294967295
    6186:	e7ef      	b.n	6168 <stop+0x50>
    6188:	0002fde7 	.word	0x0002fde7
    618c:	0002fa94 	.word	0x0002fa94

00006190 <onoff_stop>:
{
    6190:	b570      	push	{r4, r5, r6, lr}
    6192:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    6194:	4906      	ldr	r1, [pc, #24]	; (61b0 <onoff_stop+0x20>)
    6196:	1a41      	subs	r1, r0, r1
{
    6198:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    619a:	1149      	asrs	r1, r1, #5
    619c:	2240      	movs	r2, #64	; 0x40
    619e:	4805      	ldr	r0, [pc, #20]	; (61b4 <onoff_stop+0x24>)
    61a0:	f7ff ffba 	bl	6118 <stop>
	notify(mgr, res);
    61a4:	462b      	mov	r3, r5
    61a6:	4601      	mov	r1, r0
    61a8:	4620      	mov	r0, r4
}
    61aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    61ae:	4718      	bx	r3
    61b0:	200025cc 	.word	0x200025cc
    61b4:	2000117c 	.word	0x2000117c

000061b8 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    61b8:	2200      	movs	r2, #0
{
    61ba:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    61bc:	2101      	movs	r1, #1
{
    61be:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    61c0:	4610      	mov	r0, r2
    61c2:	f000 fdc5 	bl	6d50 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    61c6:	2000      	movs	r0, #0
    61c8:	f000 fd90 	bl	6cec <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    61cc:	480f      	ldr	r0, [pc, #60]	; (620c <clk_init+0x54>)
    61ce:	f01b f817 	bl	21200 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    61d2:	4b0f      	ldr	r3, [pc, #60]	; (6210 <clk_init+0x58>)
    61d4:	4298      	cmp	r0, r3
    61d6:	d115      	bne.n	6204 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    61d8:	f01b f832 	bl	21240 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    61dc:	68e6      	ldr	r6, [r4, #12]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    61de:	490d      	ldr	r1, [pc, #52]	; (6214 <clk_init+0x5c>)
    61e0:	4630      	mov	r0, r6
    61e2:	f020 ff1f 	bl	27024 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    61e6:	2800      	cmp	r0, #0
    61e8:	db0b      	blt.n	6202 <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    61ea:	2501      	movs	r5, #1
    61ec:	64b5      	str	r5, [r6, #72]	; 0x48
						get_sub_data(dev, i);
    61ee:	68e4      	ldr	r4, [r4, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    61f0:	4908      	ldr	r1, [pc, #32]	; (6214 <clk_init+0x5c>)
    61f2:	f104 0020 	add.w	r0, r4, #32
    61f6:	f020 ff15 	bl	27024 <onoff_manager_init>
		if (err < 0) {
    61fa:	2800      	cmp	r0, #0
    61fc:	db01      	blt.n	6202 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    61fe:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
    6200:	2000      	movs	r0, #0
}
    6202:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    6204:	f06f 0004 	mvn.w	r0, #4
    6208:	e7fb      	b.n	6202 <clk_init+0x4a>
    620a:	bf00      	nop
    620c:	0000624d 	.word	0x0000624d
    6210:	0bad0000 	.word	0x0bad0000
    6214:	0002ea08 	.word	0x0002ea08

00006218 <clkstarted_handle.constprop.13>:
static void clkstarted_handle(const struct device *dev,
    6218:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    621a:	230c      	movs	r3, #12
    621c:	4809      	ldr	r0, [pc, #36]	; (6244 <clkstarted_handle.constprop.13+0x2c>)
    621e:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    6220:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    6222:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    6224:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
    6228:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    622a:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
    622c:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
    622e:	4418      	add	r0, r3
    6230:	f021 fbb1 	bl	27996 <set_on_state>
	if (callback) {
    6234:	b12d      	cbz	r5, 6242 <clkstarted_handle.constprop.13+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    6236:	4632      	mov	r2, r6
    6238:	462b      	mov	r3, r5
    623a:	4803      	ldr	r0, [pc, #12]	; (6248 <clkstarted_handle.constprop.13+0x30>)
}
    623c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    6240:	4718      	bx	r3
}
    6242:	bd70      	pop	{r4, r5, r6, pc}
    6244:	200025cc 	.word	0x200025cc
    6248:	2000117c 	.word	0x2000117c

0000624c <clock_event_handler>:
	switch (event) {
    624c:	2801      	cmp	r0, #1
{
    624e:	b508      	push	{r3, lr}
	switch (event) {
    6250:	d010      	beq.n	6274 <clock_event_handler+0x28>
    6252:	b150      	cbz	r0, 626a <clock_event_handler+0x1e>
    6254:	2803      	cmp	r0, #3
    6256:	d011      	beq.n	627c <clock_event_handler+0x30>
		__ASSERT_NO_MSG(0);
    6258:	490f      	ldr	r1, [pc, #60]	; (6298 <clock_event_handler+0x4c>)
    625a:	4810      	ldr	r0, [pc, #64]	; (629c <clock_event_handler+0x50>)
    625c:	f240 226a 	movw	r2, #618	; 0x26a
    6260:	f020 fe85 	bl	26f6e <printk>
    6264:	f240 216a 	movw	r1, #618	; 0x26a
    6268:	e010      	b.n	628c <clock_event_handler+0x40>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    626a:	4b0d      	ldr	r3, [pc, #52]	; (62a0 <clock_event_handler+0x54>)
    626c:	6c98      	ldr	r0, [r3, #72]	; 0x48
    626e:	f010 0007 	ands.w	r0, r0, #7
    6272:	d110      	bne.n	6296 <clock_event_handler+0x4a>
}
    6274:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    6278:	f7ff bfce 	b.w	6218 <clkstarted_handle.constprop.13>
			__ASSERT_NO_MSG(false);
    627c:	4906      	ldr	r1, [pc, #24]	; (6298 <clock_event_handler+0x4c>)
    627e:	4807      	ldr	r0, [pc, #28]	; (629c <clock_event_handler+0x50>)
    6280:	f240 2266 	movw	r2, #614	; 0x266
    6284:	f020 fe73 	bl	26f6e <printk>
    6288:	f240 2166 	movw	r1, #614	; 0x266
		__ASSERT_NO_MSG(0);
    628c:	4802      	ldr	r0, [pc, #8]	; (6298 <clock_event_handler+0x4c>)
}
    628e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
    6292:	f021 b8e5 	b.w	27460 <assert_post_action>
}
    6296:	bd08      	pop	{r3, pc}
    6298:	0002fde7 	.word	0x0002fde7
    629c:	0002fa94 	.word	0x0002fa94
    62a0:	200025cc 	.word	0x200025cc

000062a4 <generic_hfclk_start>:
{
    62a4:	b508      	push	{r3, lr}
	__asm__ volatile(
    62a6:	f04f 0320 	mov.w	r3, #32
    62aa:	f3ef 8111 	mrs	r1, BASEPRI
    62ae:	f383 8811 	msr	BASEPRI, r3
    62b2:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    62b6:	4a12      	ldr	r2, [pc, #72]	; (6300 <generic_hfclk_start+0x5c>)
    62b8:	6813      	ldr	r3, [r2, #0]
    62ba:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    62be:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    62c2:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    62c4:	d00c      	beq.n	62e0 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    62c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    62ca:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    62ce:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    62d2:	f013 0301 	ands.w	r3, r3, #1
    62d6:	d003      	beq.n	62e0 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    62d8:	480a      	ldr	r0, [pc, #40]	; (6304 <generic_hfclk_start+0x60>)
    62da:	f021 fb5c 	bl	27996 <set_on_state>
			already_started = true;
    62de:	2301      	movs	r3, #1
	__asm__ volatile(
    62e0:	f381 8811 	msr	BASEPRI, r1
    62e4:	f3bf 8f6f 	isb	sy
	if (already_started) {
    62e8:	b123      	cbz	r3, 62f4 <generic_hfclk_start+0x50>
		clkstarted_handle(CLOCK_DEVICE,
    62ea:	2000      	movs	r0, #0
}
    62ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    62f0:	f7ff bf92 	b.w	6218 <clkstarted_handle.constprop.13>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    62f4:	2001      	movs	r0, #1
}
    62f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    62fa:	f01a bfbd 	b.w	21278 <nrfx_clock_start>
    62fe:	bf00      	nop
    6300:	20002624 	.word	0x20002624
    6304:	20002614 	.word	0x20002614

00006308 <generic_hfclk_stop>:
    6308:	4b09      	ldr	r3, [pc, #36]	; (6330 <generic_hfclk_stop+0x28>)
    630a:	f3bf 8f5b 	dmb	ish
    630e:	e853 2f00 	ldrex	r2, [r3]
    6312:	f022 0102 	bic.w	r1, r2, #2
    6316:	e843 1000 	strex	r0, r1, [r3]
    631a:	2800      	cmp	r0, #0
    631c:	d1f7      	bne.n	630e <generic_hfclk_stop+0x6>
    631e:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    6322:	07d3      	lsls	r3, r2, #31
    6324:	d402      	bmi.n	632c <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    6326:	2001      	movs	r0, #1
    6328:	f01a bff4 	b.w	21314 <nrfx_clock_stop>
}
    632c:	4770      	bx	lr
    632e:	bf00      	nop
    6330:	20002624 	.word	0x20002624

00006334 <api_blocking_start>:
{
    6334:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    6336:	2200      	movs	r2, #0
    6338:	2301      	movs	r3, #1
    633a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    633e:	ab04      	add	r3, sp, #16
    6340:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    6344:	4a09      	ldr	r2, [pc, #36]	; (636c <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    6346:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    634a:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    634c:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    6350:	f021 fb46 	bl	279e0 <api_start>
	if (err < 0) {
    6354:	2800      	cmp	r0, #0
    6356:	db05      	blt.n	6364 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    6358:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    635c:	2300      	movs	r3, #0
    635e:	4668      	mov	r0, sp
    6360:	f01d fae8 	bl	23934 <z_impl_k_sem_take>
}
    6364:	b007      	add	sp, #28
    6366:	f85d fb04 	ldr.w	pc, [sp], #4
    636a:	bf00      	nop
    636c:	000279db 	.word	0x000279db

00006370 <z_nrf_clock_control_get_onoff>:
}
    6370:	4b02      	ldr	r3, [pc, #8]	; (637c <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
    6372:	b2c0      	uxtb	r0, r0
}
    6374:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    6378:	4770      	bx	lr
    637a:	bf00      	nop
    637c:	200025cc 	.word	0x200025cc

00006380 <z_nrf_clock_bt_ctlr_hf_request>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6380:	4b09      	ldr	r3, [pc, #36]	; (63a8 <z_nrf_clock_bt_ctlr_hf_request+0x28>)
    6382:	f3bf 8f5b 	dmb	ish
    6386:	e853 2f00 	ldrex	r2, [r3]
    638a:	f042 0101 	orr.w	r1, r2, #1
    638e:	e843 1000 	strex	r0, r1, [r3]
    6392:	2800      	cmp	r0, #0
    6394:	d1f7      	bne.n	6386 <z_nrf_clock_bt_ctlr_hf_request+0x6>
    6396:	f3bf 8f5b 	dmb	ish
	if (atomic_or(&hfclk_users, HF_USER_BT) & HF_USER_GENERIC) {
    639a:	0793      	lsls	r3, r2, #30
    639c:	d402      	bmi.n	63a4 <z_nrf_clock_bt_ctlr_hf_request+0x24>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    639e:	2001      	movs	r0, #1
    63a0:	f01a bf6a 	b.w	21278 <nrfx_clock_start>
}
    63a4:	4770      	bx	lr
    63a6:	bf00      	nop
    63a8:	20002624 	.word	0x20002624

000063ac <z_nrf_clock_bt_ctlr_hf_release>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    63ac:	4b09      	ldr	r3, [pc, #36]	; (63d4 <z_nrf_clock_bt_ctlr_hf_release+0x28>)
    63ae:	f3bf 8f5b 	dmb	ish
    63b2:	e853 2f00 	ldrex	r2, [r3]
    63b6:	f022 0101 	bic.w	r1, r2, #1
    63ba:	e843 1000 	strex	r0, r1, [r3]
    63be:	2800      	cmp	r0, #0
    63c0:	d1f7      	bne.n	63b2 <z_nrf_clock_bt_ctlr_hf_release+0x6>
    63c2:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_BT) & HF_USER_GENERIC) {
    63c6:	0793      	lsls	r3, r2, #30
    63c8:	d402      	bmi.n	63d0 <z_nrf_clock_bt_ctlr_hf_release+0x24>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    63ca:	2001      	movs	r0, #1
    63cc:	f01a bfa2 	b.w	21314 <nrfx_clock_stop>
}
    63d0:	4770      	bx	lr
    63d2:	bf00      	nop
    63d4:	20002624 	.word	0x20002624

000063d8 <z_nrf_clock_control_lf_on>:
{
    63d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    63dc:	4947      	ldr	r1, [pc, #284]	; (64fc <z_nrf_clock_control_lf_on+0x124>)
    63de:	f3bf 8f5b 	dmb	ish
    63e2:	4605      	mov	r5, r0
    63e4:	2201      	movs	r2, #1
    63e6:	e851 3f00 	ldrex	r3, [r1]
    63ea:	e841 2000 	strex	r0, r2, [r1]
    63ee:	2800      	cmp	r0, #0
    63f0:	d1f9      	bne.n	63e6 <z_nrf_clock_control_lf_on+0xe>
    63f2:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    63f6:	b99b      	cbnz	r3, 6420 <z_nrf_clock_control_lf_on+0x48>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    63f8:	4941      	ldr	r1, [pc, #260]	; (6500 <z_nrf_clock_control_lf_on+0x128>)
		err = onoff_request(mgr, &cli);
    63fa:	4842      	ldr	r0, [pc, #264]	; (6504 <z_nrf_clock_control_lf_on+0x12c>)
    63fc:	604b      	str	r3, [r1, #4]
    63fe:	60cb      	str	r3, [r1, #12]
    6400:	608a      	str	r2, [r1, #8]
    6402:	f7fe fa7f 	bl	4904 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    6406:	2800      	cmp	r0, #0
    6408:	da0a      	bge.n	6420 <z_nrf_clock_control_lf_on+0x48>
    640a:	493f      	ldr	r1, [pc, #252]	; (6508 <z_nrf_clock_control_lf_on+0x130>)
    640c:	483f      	ldr	r0, [pc, #252]	; (650c <z_nrf_clock_control_lf_on+0x134>)
    640e:	f240 2226 	movw	r2, #550	; 0x226
    6412:	f020 fdac 	bl	26f6e <printk>
    6416:	f240 2126 	movw	r1, #550	; 0x226
    641a:	483b      	ldr	r0, [pc, #236]	; (6508 <z_nrf_clock_control_lf_on+0x130>)
    641c:	f021 f820 	bl	27460 <assert_post_action>
	switch (start_mode) {
    6420:	b395      	cbz	r5, 6488 <z_nrf_clock_control_lf_on+0xb0>
    6422:	2d02      	cmp	r5, #2
    6424:	d854      	bhi.n	64d0 <z_nrf_clock_control_lf_on+0xf8>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    6426:	2d01      	cmp	r5, #1
    6428:	d107      	bne.n	643a <z_nrf_clock_control_lf_on+0x62>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    642a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    642e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    6432:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    6436:	2b01      	cmp	r3, #1
    6438:	d026      	beq.n	6488 <z_nrf_clock_control_lf_on+0xb0>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    643a:	f026 ff7e 	bl	2d33a <k_is_in_isr>
    643e:	b918      	cbnz	r0, 6448 <z_nrf_clock_control_lf_on+0x70>
	return !z_sys_post_kernel;
    6440:	4b33      	ldr	r3, [pc, #204]	; (6510 <z_nrf_clock_control_lf_on+0x138>)
	int key = isr_mode ? irq_lock() : 0;
    6442:	781b      	ldrb	r3, [r3, #0]
    6444:	2b00      	cmp	r3, #0
    6446:	d150      	bne.n	64ea <z_nrf_clock_control_lf_on+0x112>
	__asm__ volatile(
    6448:	f04f 0320 	mov.w	r3, #32
    644c:	f3ef 8911 	mrs	r9, BASEPRI
    6450:	f383 8811 	msr	BASEPRI, r3
    6454:	f3bf 8f6f 	isb	sy
    6458:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    645a:	4e2e      	ldr	r6, [pc, #184]	; (6514 <z_nrf_clock_control_lf_on+0x13c>)
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    645c:	4f2e      	ldr	r7, [pc, #184]	; (6518 <z_nrf_clock_control_lf_on+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    645e:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 651c <z_nrf_clock_control_lf_on+0x144>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    6462:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    6466:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    646a:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    646e:	03d2      	lsls	r2, r2, #15
    6470:	d50c      	bpl.n	648c <z_nrf_clock_control_lf_on+0xb4>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    6472:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    6476:	2b01      	cmp	r3, #1
    6478:	d001      	beq.n	647e <z_nrf_clock_control_lf_on+0xa6>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    647a:	2d01      	cmp	r5, #1
    647c:	d106      	bne.n	648c <z_nrf_clock_control_lf_on+0xb4>
	if (isr_mode) {
    647e:	b30c      	cbz	r4, 64c4 <z_nrf_clock_control_lf_on+0xec>
	__asm__ volatile(
    6480:	f389 8811 	msr	BASEPRI, r9
    6484:	f3bf 8f6f 	isb	sy
}
    6488:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode) {
    648c:	b1ac      	cbz	r4, 64ba <z_nrf_clock_control_lf_on+0xe2>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    648e:	4648      	mov	r0, r9
    6490:	f000 fcf8 	bl	6e84 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    6494:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    6498:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    649c:	2b00      	cmp	r3, #0
    649e:	d1e0      	bne.n	6462 <z_nrf_clock_control_lf_on+0x8a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    64a0:	6831      	ldr	r1, [r6, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    64a2:	2900      	cmp	r1, #0
    64a4:	d0dd      	beq.n	6462 <z_nrf_clock_control_lf_on+0x8a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    64a6:	6033      	str	r3, [r6, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    64a8:	6833      	ldr	r3, [r6, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    64aa:	2301      	movs	r3, #1
    64ac:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    64b0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    64b4:	f8c8 3000 	str.w	r3, [r8]
    64b8:	e7d3      	b.n	6462 <z_nrf_clock_control_lf_on+0x8a>
	return z_impl_k_sleep(timeout);
    64ba:	2100      	movs	r1, #0
    64bc:	2021      	movs	r0, #33	; 0x21
    64be:	f01d f9ab 	bl	23818 <z_impl_k_sleep>
    64c2:	e7e7      	b.n	6494 <z_nrf_clock_control_lf_on+0xbc>
    p_reg->INTENSET = mask;
    64c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    64c8:	2202      	movs	r2, #2
    64ca:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    64ce:	e7db      	b.n	6488 <z_nrf_clock_control_lf_on+0xb0>
		__ASSERT_NO_MSG(false);
    64d0:	490d      	ldr	r1, [pc, #52]	; (6508 <z_nrf_clock_control_lf_on+0x130>)
    64d2:	480e      	ldr	r0, [pc, #56]	; (650c <z_nrf_clock_control_lf_on+0x134>)
    64d4:	f44f 720e 	mov.w	r2, #568	; 0x238
    64d8:	f020 fd49 	bl	26f6e <printk>
    64dc:	f44f 710e 	mov.w	r1, #568	; 0x238
    64e0:	4809      	ldr	r0, [pc, #36]	; (6508 <z_nrf_clock_control_lf_on+0x130>)
}
    64e2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		__ASSERT_NO_MSG(false);
    64e6:	f020 bfbb 	b.w	27460 <assert_post_action>
    p_reg->INTENCLR = mask;
    64ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    64ee:	2202      	movs	r2, #2
    64f0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    64f4:	4604      	mov	r4, r0
	int key = isr_mode ? irq_lock() : 0;
    64f6:	4681      	mov	r9, r0
    64f8:	e7af      	b.n	645a <z_nrf_clock_control_lf_on+0x82>
    64fa:	bf00      	nop
    64fc:	20002628 	.word	0x20002628
    6500:	200025bc 	.word	0x200025bc
    6504:	200025ec 	.word	0x200025ec
    6508:	0002fde7 	.word	0x0002fde7
    650c:	0002fa94 	.word	0x0002fa94
    6510:	2000488c 	.word	0x2000488c
    6514:	40000104 	.word	0x40000104
    6518:	e000e100 	.word	0xe000e100
    651c:	40000008 	.word	0x40000008

00006520 <z_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
    6520:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
    6522:	4c06      	ldr	r4, [pc, #24]	; (653c <z_clock_isr+0x1c>)
    6524:	4806      	ldr	r0, [pc, #24]	; (6540 <z_clock_isr+0x20>)
    6526:	4621      	mov	r1, r4
    6528:	2217      	movs	r2, #23
    652a:	f020 fd20 	bl	26f6e <printk>
    652e:	4620      	mov	r0, r4
    6530:	2117      	movs	r1, #23
}
    6532:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
    6536:	f020 bf93 	b.w	27460 <assert_post_action>
    653a:	bf00      	nop
    653c:	0002fe4e 	.word	0x0002fe4e
    6540:	0002fa94 	.word	0x0002fa94

00006544 <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(uint32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    6544:	4a04      	ldr	r2, [pc, #16]	; (6558 <sys_clock_timeout_handler+0x14>)
    6546:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    6548:	1ac9      	subs	r1, r1, r3
    654a:	f021 407f 	bic.w	r0, r1, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    654e:	4403      	add	r3, r0
    6550:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    6552:	f01d bf0b 	b.w	2436c <z_clock_announce>
    6556:	bf00      	nop
    6558:	20002638 	.word	0x20002638

0000655c <set_absolute_alarm>:
{
    655c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6560:	0085      	lsls	r5, r0, #2
    6562:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    6566:	f100 0450 	add.w	r4, r0, #80	; 0x50
    656a:	f505 3588 	add.w	r5, r5, #69632	; 0x11000
    656e:	00a4      	lsls	r4, r4, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_rtc_event_clear(NRF_RTC_Type * p_reg, nrf_rtc_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    6570:	b2a4      	uxth	r4, r4
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    6572:	f8df 807c 	ldr.w	r8, [pc, #124]	; 65f0 <set_absolute_alarm+0x94>
    return p_reg->CC[ch];
    6576:	f8d5 2540 	ldr.w	r2, [r5, #1344]	; 0x540
			cc_val = now + 2;
    657a:	f8df a078 	ldr.w	sl, [pc, #120]	; 65f4 <set_absolute_alarm+0x98>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    657e:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    6582:	f44f 3780 	mov.w	r7, #65536	; 0x10000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    6586:	f021 467f 	bic.w	r6, r1, #4278190080	; 0xff000000
    658a:	f504 3488 	add.w	r4, r4, #69632	; 0x11000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    658e:	4087      	lsls	r7, r0
    6590:	46c1      	mov	r9, r8
     return p_reg->COUNTER;
    6592:	f8d8 b504 	ldr.w	fp, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    6596:	eba2 020b 	sub.w	r2, r2, fp
    659a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    659e:	f02b 437f 	bic.w	r3, fp, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    65a2:	2a01      	cmp	r2, #1
    p_reg->CC[ch] = cc_val;
    65a4:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
    65a8:	d102      	bne.n	65b0 <set_absolute_alarm+0x54>
	z_impl_k_busy_wait(usec_to_wait);
    65aa:	2013      	movs	r0, #19
    65ac:	f026 fecb 	bl	2d346 <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    65b0:	f10b 0202 	add.w	r2, fp, #2
	return (a - b) & COUNTER_MAX;
    65b4:	1ab3      	subs	r3, r6, r2
    65b6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
    65ba:	4553      	cmp	r3, sl
    65bc:	bf28      	it	cs
    65be:	4616      	movcs	r6, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    65c0:	2300      	movs	r3, #0
    65c2:	6023      	str	r3, [r4, #0]
    65c4:	6823      	ldr	r3, [r4, #0]
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    65c6:	f8c9 7344 	str.w	r7, [r9, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    65ca:	f026 437f 	bic.w	r3, r6, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    65ce:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
     return p_reg->COUNTER;
    65d2:	f8d9 3504 	ldr.w	r3, [r9, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    65d6:	459b      	cmp	fp, r3
    65d8:	d007      	beq.n	65ea <set_absolute_alarm+0x8e>
	return (a - b) & COUNTER_MAX;
    65da:	1af3      	subs	r3, r6, r3
    65dc:	3b02      	subs	r3, #2
    65de:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    65e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
		prev_cc = cc_val;
    65e6:	4632      	mov	r2, r6
	} while ((now2 != now) &&
    65e8:	d8d3      	bhi.n	6592 <set_absolute_alarm+0x36>
}
    65ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    65ee:	bf00      	nop
    65f0:	40011000 	.word	0x40011000
    65f4:	00800001 	.word	0x00800001

000065f8 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    65f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return p_reg->INTENSET & mask;
    65fa:	4e10      	ldr	r6, [pc, #64]	; (663c <rtc_nrf_isr+0x44>)
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    65fc:	4f10      	ldr	r7, [pc, #64]	; (6640 <rtc_nrf_isr+0x48>)
	ARG_UNUSED(arg);

	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    65fe:	2500      	movs	r5, #0
    6600:	4b10      	ldr	r3, [pc, #64]	; (6644 <rtc_nrf_isr+0x4c>)
    6602:	2000      	movs	r0, #0
    6604:	681c      	ldr	r4, [r3, #0]
    6606:	461a      	mov	r2, r3
    6608:	b105      	cbz	r5, 660c <rtc_nrf_isr+0x14>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
    660a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return p_reg->INTENSET & mask;
    660c:	f8d6 1304 	ldr.w	r1, [r6, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    6610:	03c9      	lsls	r1, r1, #15
    6612:	d5fa      	bpl.n	660a <rtc_nrf_isr+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6614:	6839      	ldr	r1, [r7, #0]
    6616:	2900      	cmp	r1, #0
    6618:	d0f7      	beq.n	660a <rtc_nrf_isr+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    661a:	603d      	str	r5, [r7, #0]
    661c:	6839      	ldr	r1, [r7, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    661e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    6622:	f8c6 1348 	str.w	r1, [r6, #840]	; 0x348
    return p_reg->CC[ch];
    6626:	f8d6 1540 	ldr.w	r1, [r6, #1344]	; 0x540
	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    662a:	2501      	movs	r5, #1
			if (handler) {
    662c:	b11c      	cbz	r4, 6636 <rtc_nrf_isr+0x3e>
    662e:	6018      	str	r0, [r3, #0]
				handler(chan, cc_val,
    6630:	685a      	ldr	r2, [r3, #4]
    6632:	47a0      	blx	r4
    6634:	e7e4      	b.n	6600 <rtc_nrf_isr+0x8>
    6636:	6014      	str	r4, [r2, #0]
}
    6638:	e7e7      	b.n	660a <rtc_nrf_isr+0x12>
    663a:	bf00      	nop
    663c:	40011000 	.word	0x40011000
    6640:	40011140 	.word	0x40011140
    6644:	2000262c 	.word	0x2000262c

00006648 <z_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int z_clock_driver_init(const struct device *device)
{
    6648:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    664a:	4d10      	ldr	r5, [pc, #64]	; (668c <z_clock_driver_init+0x44>)
    664c:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
    664e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
    6652:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->INTENSET = mask;
    6656:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    665a:	4b0d      	ldr	r3, [pc, #52]	; (6690 <z_clock_driver_init+0x48>)
    665c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    6660:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    6664:	2101      	movs	r1, #1
    6666:	4622      	mov	r2, r4
    6668:	2011      	movs	r0, #17
    666a:	f000 fb71 	bl	6d50 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    666e:	2011      	movs	r0, #17
    6670:	f000 fb3c 	bl	6cec <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    6674:	4a07      	ldr	r2, [pc, #28]	; (6694 <z_clock_driver_init+0x4c>)
    6676:	2301      	movs	r3, #1
    6678:	6013      	str	r3, [r2, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    667a:	4a07      	ldr	r2, [pc, #28]	; (6698 <z_clock_driver_init+0x50>)
    667c:	602b      	str	r3, [r5, #0]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    667e:	2002      	movs	r0, #2
	int_mask = BIT_MASK(CHAN_COUNT);
    6680:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
    6682:	f7ff fea9 	bl	63d8 <z_nrf_clock_control_lf_on>

	return 0;
}
    6686:	4620      	mov	r0, r4
    6688:	bd38      	pop	{r3, r4, r5, pc}
    668a:	bf00      	nop
    668c:	40011000 	.word	0x40011000
    6690:	e000e100 	.word	0xe000e100
    6694:	40011008 	.word	0x40011008
    6698:	20002634 	.word	0x20002634

0000669c <z_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    669c:	4b13      	ldr	r3, [pc, #76]	; (66ec <z_clock_set_timeout+0x50>)
    669e:	f1b0 3fff 	cmp.w	r0, #4294967295
    66a2:	bf08      	it	eq
    66a4:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    66a6:	3801      	subs	r0, #1
    66a8:	2800      	cmp	r0, #0
    66aa:	dd1c      	ble.n	66e6 <z_clock_set_timeout+0x4a>
    66ac:	4298      	cmp	r0, r3
    66ae:	bfa8      	it	ge
    66b0:	4618      	movge	r0, r3
     return p_reg->COUNTER;
    66b2:	4b0f      	ldr	r3, [pc, #60]	; (66f0 <z_clock_set_timeout+0x54>)
    66b4:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
    66b8:	4b0e      	ldr	r3, [pc, #56]	; (66f4 <z_clock_set_timeout+0x58>)
    66ba:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
    66bc:	1a52      	subs	r2, r2, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
    66be:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
	return (a - b) & COUNTER_MAX;
    66c2:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
		ticks = 0;
    66c6:	bf18      	it	ne
    66c8:	2000      	movne	r0, #0
	cc_data[chan].callback = handler;
    66ca:	4a0b      	ldr	r2, [pc, #44]	; (66f8 <z_clock_set_timeout+0x5c>)
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    66cc:	3301      	adds	r3, #1
    66ce:	4403      	add	r3, r0
	cc_data[chan].callback = handler;
    66d0:	480a      	ldr	r0, [pc, #40]	; (66fc <z_clock_set_timeout+0x60>)
    66d2:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
    66d4:	2000      	movs	r0, #0
    66d6:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
    66d8:	4a04      	ldr	r2, [pc, #16]	; (66ec <z_clock_set_timeout+0x50>)
    66da:	4293      	cmp	r3, r2
    66dc:	bf94      	ite	ls
    66de:	18c9      	addls	r1, r1, r3
    66e0:	1889      	addhi	r1, r1, r2
    66e2:	f7ff bf3b 	b.w	655c <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    66e6:	2000      	movs	r0, #0
    66e8:	e7e3      	b.n	66b2 <z_clock_set_timeout+0x16>
    66ea:	bf00      	nop
    66ec:	007fffff 	.word	0x007fffff
    66f0:	40011000 	.word	0x40011000
    66f4:	20002638 	.word	0x20002638
    66f8:	2000262c 	.word	0x2000262c
    66fc:	00006545 	.word	0x00006545

00006700 <z_clock_elapsed>:
	cyc += last_count;
	compare_set(0, cyc, sys_clock_timeout_handler, NULL);
}

uint32_t z_clock_elapsed(void)
{
    6700:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    6702:	f04f 0320 	mov.w	r3, #32
    6706:	f3ef 8511 	mrs	r5, BASEPRI
    670a:	f383 8811 	msr	BASEPRI, r3
    670e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6712:	4815      	ldr	r0, [pc, #84]	; (6768 <z_clock_elapsed+0x68>)
    6714:	f01d fac8 	bl	23ca8 <z_spin_lock_valid>
    6718:	b940      	cbnz	r0, 672c <z_clock_elapsed+0x2c>
    671a:	4914      	ldr	r1, [pc, #80]	; (676c <z_clock_elapsed+0x6c>)
    671c:	4814      	ldr	r0, [pc, #80]	; (6770 <z_clock_elapsed+0x70>)
    671e:	227c      	movs	r2, #124	; 0x7c
    6720:	f020 fc25 	bl	26f6e <printk>
    6724:	217c      	movs	r1, #124	; 0x7c
    6726:	4811      	ldr	r0, [pc, #68]	; (676c <z_clock_elapsed+0x6c>)
    6728:	f020 fe9a 	bl	27460 <assert_post_action>
	z_spin_lock_set_owner(l);
    672c:	480e      	ldr	r0, [pc, #56]	; (6768 <z_clock_elapsed+0x68>)
    672e:	f01d fad9 	bl	23ce4 <z_spin_lock_set_owner>
    6732:	4b10      	ldr	r3, [pc, #64]	; (6774 <z_clock_elapsed+0x74>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6734:	480c      	ldr	r0, [pc, #48]	; (6768 <z_clock_elapsed+0x68>)
    6736:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    673a:	4b0f      	ldr	r3, [pc, #60]	; (6778 <z_clock_elapsed+0x78>)
	return (a - b) & COUNTER_MAX;
    673c:	681b      	ldr	r3, [r3, #0]
    673e:	1ae4      	subs	r4, r4, r3
    6740:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    6744:	f01d fabe 	bl	23cc4 <z_spin_unlock_valid>
    6748:	b940      	cbnz	r0, 675c <z_clock_elapsed+0x5c>
    674a:	4908      	ldr	r1, [pc, #32]	; (676c <z_clock_elapsed+0x6c>)
    674c:	4808      	ldr	r0, [pc, #32]	; (6770 <z_clock_elapsed+0x70>)
    674e:	22a7      	movs	r2, #167	; 0xa7
    6750:	f020 fc0d 	bl	26f6e <printk>
    6754:	21a7      	movs	r1, #167	; 0xa7
    6756:	4805      	ldr	r0, [pc, #20]	; (676c <z_clock_elapsed+0x6c>)
    6758:	f020 fe82 	bl	27460 <assert_post_action>
	__asm__ volatile(
    675c:	f385 8811 	msr	BASEPRI, r5
    6760:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    6764:	4620      	mov	r0, r4
    6766:	bd38      	pop	{r3, r4, r5, pc}
    6768:	2000263c 	.word	0x2000263c
    676c:	0002fba8 	.word	0x0002fba8
    6770:	0002fa94 	.word	0x0002fa94
    6774:	40011000 	.word	0x40011000
    6778:	20002638 	.word	0x20002638

0000677c <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    677c:	4801      	ldr	r0, [pc, #4]	; (6784 <nrf_cc3xx_platform_abort_init+0x8>)
    677e:	f01e ba85 	b.w	24c8c <nrf_cc3xx_platform_set_abort>
    6782:	bf00      	nop
    6784:	0002ea14 	.word	0x0002ea14

00006788 <mutex_unlock_platform>:
    }
}

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    6788:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    678a:	b1d0      	cbz	r0, 67c2 <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    678c:	6843      	ldr	r3, [r0, #4]
    678e:	2b04      	cmp	r3, #4
    6790:	d111      	bne.n	67b6 <mutex_unlock_platform+0x2e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    6792:	2200      	movs	r2, #0
    6794:	6803      	ldr	r3, [r0, #0]
    6796:	f3bf 8f5b 	dmb	ish
    679a:	e853 1f00 	ldrex	r1, [r3]
    679e:	2901      	cmp	r1, #1
    67a0:	d103      	bne.n	67aa <mutex_unlock_platform+0x22>
    67a2:	e843 2000 	strex	r0, r2, [r3]
    67a6:	2800      	cmp	r0, #0
    67a8:	d1f7      	bne.n	679a <mutex_unlock_platform+0x12>
    67aa:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    67ae:	4807      	ldr	r0, [pc, #28]	; (67cc <mutex_unlock_platform+0x44>)
    67b0:	bf08      	it	eq
    67b2:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    67b4:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    67b6:	b13b      	cbz	r3, 67c8 <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
    67b8:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    67ba:	f01b fe3b 	bl	22434 <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
    67be:	2000      	movs	r0, #0
    67c0:	e7f8      	b.n	67b4 <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    67c2:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    67c6:	e7f5      	b.n	67b4 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    67c8:	4801      	ldr	r0, [pc, #4]	; (67d0 <mutex_unlock_platform+0x48>)
    67ca:	e7f3      	b.n	67b4 <mutex_unlock_platform+0x2c>
    67cc:	ffff8fe9 	.word	0xffff8fe9
    67d0:	ffff8fea 	.word	0xffff8fea

000067d4 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    67d4:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    67d6:	4604      	mov	r4, r0
    67d8:	b918      	cbnz	r0, 67e2 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    67da:	4b0d      	ldr	r3, [pc, #52]	; (6810 <mutex_free_platform+0x3c>)
    67dc:	480d      	ldr	r0, [pc, #52]	; (6814 <mutex_free_platform+0x40>)
    67de:	685b      	ldr	r3, [r3, #4]
    67e0:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    67e2:	6861      	ldr	r1, [r4, #4]
    67e4:	2908      	cmp	r1, #8
    67e6:	d00d      	beq.n	6804 <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    67e8:	f031 0304 	bics.w	r3, r1, #4
    67ec:	d00a      	beq.n	6804 <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    67ee:	f011 0102 	ands.w	r1, r1, #2
    67f2:	d008      	beq.n	6806 <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    67f4:	4621      	mov	r1, r4
    67f6:	4808      	ldr	r0, [pc, #32]	; (6818 <mutex_free_platform+0x44>)
    67f8:	f01b fcfa 	bl	221f0 <k_mem_slab_free>
        mutex->mutex = NULL;
    67fc:	2300      	movs	r3, #0
    67fe:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    6800:	2300      	movs	r3, #0
    6802:	6063      	str	r3, [r4, #4]
}
    6804:	bd10      	pop	{r4, pc}
__ssp_bos_icheck3(memset, void *, int)
    6806:	2214      	movs	r2, #20
    6808:	6820      	ldr	r0, [r4, #0]
    680a:	f026 fef6 	bl	2d5fa <memset>
    680e:	e7f7      	b.n	6800 <mutex_free_platform+0x2c>
    6810:	20000e4c 	.word	0x20000e4c
    6814:	0002feb1 	.word	0x0002feb1
    6818:	20002640 	.word	0x20002640

0000681c <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    681c:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    681e:	4604      	mov	r4, r0
    6820:	b918      	cbnz	r0, 682a <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    6822:	4b16      	ldr	r3, [pc, #88]	; (687c <mutex_init_platform+0x60>)
    6824:	4816      	ldr	r0, [pc, #88]	; (6880 <mutex_init_platform+0x64>)
    6826:	685b      	ldr	r3, [r3, #4]
    6828:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    682a:	6863      	ldr	r3, [r4, #4]
    682c:	2b04      	cmp	r3, #4
    682e:	d023      	beq.n	6878 <mutex_init_platform+0x5c>
    6830:	2b08      	cmp	r3, #8
    6832:	d021      	beq.n	6878 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    6834:	b9cb      	cbnz	r3, 686a <mutex_init_platform+0x4e>
    6836:	6823      	ldr	r3, [r4, #0]
    6838:	b9bb      	cbnz	r3, 686a <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    683a:	f04f 32ff 	mov.w	r2, #4294967295
    683e:	f04f 33ff 	mov.w	r3, #4294967295
    6842:	4621      	mov	r1, r4
    6844:	480f      	ldr	r0, [pc, #60]	; (6884 <mutex_init_platform+0x68>)
    6846:	f01b fc79 	bl	2213c <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    684a:	b908      	cbnz	r0, 6850 <mutex_init_platform+0x34>
    684c:	6823      	ldr	r3, [r4, #0]
    684e:	b91b      	cbnz	r3, 6858 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    6850:	4b0a      	ldr	r3, [pc, #40]	; (687c <mutex_init_platform+0x60>)
    6852:	480d      	ldr	r0, [pc, #52]	; (6888 <mutex_init_platform+0x6c>)
    6854:	685b      	ldr	r3, [r3, #4]
    6856:	4798      	blx	r3
    6858:	2214      	movs	r2, #20
    685a:	2100      	movs	r1, #0
    685c:	6820      	ldr	r0, [r4, #0]
    685e:	f026 fecc 	bl	2d5fa <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    6862:	6863      	ldr	r3, [r4, #4]
    6864:	f043 0302 	orr.w	r3, r3, #2
    6868:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    686a:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    686c:	f026 fcdc 	bl	2d228 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    6870:	6863      	ldr	r3, [r4, #4]
    6872:	f043 0301 	orr.w	r3, r3, #1
    6876:	6063      	str	r3, [r4, #4]
}
    6878:	bd10      	pop	{r4, pc}
    687a:	bf00      	nop
    687c:	20000e4c 	.word	0x20000e4c
    6880:	0002feb1 	.word	0x0002feb1
    6884:	20002640 	.word	0x20002640
    6888:	0002fed7 	.word	0x0002fed7

0000688c <mutex_lock_platform>:
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    688c:	b508      	push	{r3, lr}
    if(mutex == NULL) {
    688e:	b1f8      	cbz	r0, 68d0 <mutex_lock_platform+0x44>
    switch (mutex->flags) {
    6890:	6843      	ldr	r3, [r0, #4]
    6892:	2b04      	cmp	r3, #4
    6894:	d110      	bne.n	68b8 <mutex_lock_platform+0x2c>
    6896:	2201      	movs	r2, #1
    6898:	6803      	ldr	r3, [r0, #0]
    689a:	f3bf 8f5b 	dmb	ish
    689e:	e853 1f00 	ldrex	r1, [r3]
    68a2:	2900      	cmp	r1, #0
    68a4:	d103      	bne.n	68ae <mutex_lock_platform+0x22>
    68a6:	e843 2000 	strex	r0, r2, [r3]
    68aa:	2800      	cmp	r0, #0
    68ac:	d1f7      	bne.n	689e <mutex_lock_platform+0x12>
    68ae:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    68b2:	d10b      	bne.n	68cc <mutex_lock_platform+0x40>
    68b4:	2000      	movs	r0, #0
}
    68b6:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    68b8:	b16b      	cbz	r3, 68d6 <mutex_lock_platform+0x4a>
        p_mutex = (struct k_mutex *)mutex->mutex;
    68ba:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    68bc:	f04f 32ff 	mov.w	r2, #4294967295
    68c0:	f04f 33ff 	mov.w	r3, #4294967295
    68c4:	f01b fce2 	bl	2228c <z_impl_k_mutex_lock>
        if (ret == 0) {
    68c8:	2800      	cmp	r0, #0
    68ca:	d0f3      	beq.n	68b4 <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    68cc:	4803      	ldr	r0, [pc, #12]	; (68dc <mutex_lock_platform+0x50>)
    68ce:	e7f2      	b.n	68b6 <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    68d0:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    68d4:	e7ef      	b.n	68b6 <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    68d6:	4802      	ldr	r0, [pc, #8]	; (68e0 <mutex_lock_platform+0x54>)
    68d8:	e7ed      	b.n	68b6 <mutex_lock_platform+0x2a>
    68da:	bf00      	nop
    68dc:	ffff8fe9 	.word	0xffff8fe9
    68e0:	ffff8fea 	.word	0xffff8fea

000068e4 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    68e4:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    68e6:	4906      	ldr	r1, [pc, #24]	; (6900 <nrf_cc3xx_platform_mutex_init+0x1c>)
    68e8:	4806      	ldr	r0, [pc, #24]	; (6904 <nrf_cc3xx_platform_mutex_init+0x20>)
    68ea:	2340      	movs	r3, #64	; 0x40
    68ec:	2214      	movs	r2, #20
    68ee:	f026 fc80 	bl	2d1f2 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    68f2:	4905      	ldr	r1, [pc, #20]	; (6908 <nrf_cc3xx_platform_mutex_init+0x24>)
    68f4:	4805      	ldr	r0, [pc, #20]	; (690c <nrf_cc3xx_platform_mutex_init+0x28>)
}
    68f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    68fa:	f01e ba45 	b.w	24d88 <nrf_cc3xx_platform_set_mutexes>
    68fe:	bf00      	nop
    6900:	2000265c 	.word	0x2000265c
    6904:	20002640 	.word	0x20002640
    6908:	0002ea2c 	.word	0x0002ea2c
    690c:	0002ea1c 	.word	0x0002ea1c

00006910 <uECC_get_rng>:
}

uECC_RNG_Function uECC_get_rng(void)
{
	return g_rng_function;
}
    6910:	4b01      	ldr	r3, [pc, #4]	; (6918 <uECC_get_rng+0x8>)
    6912:	6818      	ldr	r0, [r3, #0]
    6914:	4770      	bx	lr
    6916:	bf00      	nop
    6918:	200006f8 	.word	0x200006f8

0000691c <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
    691c:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    691e:	2208      	movs	r2, #8
{
    6920:	b089      	sub	sp, #36	; 0x24
    6922:	460c      	mov	r4, r1
    6924:	4606      	mov	r6, r0
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    6926:	f021 fa6a 	bl	27dfe <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
	tmp[3] = product[11];
    692a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    692c:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
    692e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    6930:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
    6932:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    6934:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
    6936:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    6938:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
    693a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    693c:	9307      	str	r3, [sp, #28]
	tmp[0] = tmp[1] = tmp[2] = 0;
    693e:	2700      	movs	r7, #0
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    6940:	2308      	movs	r3, #8
    6942:	466a      	mov	r2, sp
    6944:	4669      	mov	r1, sp
    6946:	4668      	mov	r0, sp
	tmp[0] = tmp[1] = tmp[2] = 0;
    6948:	e9cd 7701 	strd	r7, r7, [sp, #4]
    694c:	9700      	str	r7, [sp, #0]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    694e:	f021 f95b 	bl	27c08 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    6952:	2308      	movs	r3, #8
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    6954:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    6956:	466a      	mov	r2, sp
    6958:	4631      	mov	r1, r6
    695a:	4630      	mov	r0, r6
    695c:	f021 f954 	bl	27c08 <uECC_vli_add>

	/* s2 */
	tmp[3] = product[12];
    6960:	6b23      	ldr	r3, [r4, #48]	; 0x30
    6962:	9303      	str	r3, [sp, #12]
	tmp[4] = product[13];
    6964:	6b63      	ldr	r3, [r4, #52]	; 0x34
    6966:	9304      	str	r3, [sp, #16]
	tmp[5] = product[14];
    6968:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    696a:	9305      	str	r3, [sp, #20]
	tmp[6] = product[15];
    696c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    696e:	4405      	add	r5, r0
	tmp[7] = 0;
    6970:	e9cd 3706 	strd	r3, r7, [sp, #24]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    6974:	466a      	mov	r2, sp
    6976:	2308      	movs	r3, #8
    6978:	4669      	mov	r1, sp
    697a:	4668      	mov	r0, sp
    697c:	f021 f944 	bl	27c08 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    6980:	4631      	mov	r1, r6
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    6982:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    6984:	2308      	movs	r3, #8
    6986:	466a      	mov	r2, sp
    6988:	4630      	mov	r0, r6
    698a:	f021 f93d 	bl	27c08 <uECC_vli_add>

	/* s3 */
	tmp[0] = product[8];
    698e:	6a23      	ldr	r3, [r4, #32]
    6990:	9300      	str	r3, [sp, #0]
	tmp[1] = product[9];
    6992:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6994:	9301      	str	r3, [sp, #4]
	tmp[2] = product[10];
    6996:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6998:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[14];
    699a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    699c:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
    699e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    69a0:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    69a2:	4405      	add	r5, r0
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    69a4:	2308      	movs	r3, #8
    69a6:	466a      	mov	r2, sp
    69a8:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    69aa:	e9cd 7704 	strd	r7, r7, [sp, #16]
    69ae:	9703      	str	r7, [sp, #12]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    69b0:	f021 f92a 	bl	27c08 <uECC_vli_add>

	/* s4 */
	tmp[0] = product[9];
    69b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    69b6:	9300      	str	r3, [sp, #0]
	tmp[1] = product[10];
    69b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[2] = product[11];
	tmp[3] = product[13];
	tmp[4] = product[14];
    69ba:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	tmp[1] = product[10];
    69bc:	9301      	str	r3, [sp, #4]
	tmp[2] = product[11];
    69be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    69c0:	9302      	str	r3, [sp, #8]
	tmp[4] = product[14];
    69c2:	9204      	str	r2, [sp, #16]
	tmp[3] = product[13];
    69c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
	tmp[5] = product[15];
    69c6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	tmp[3] = product[13];
    69c8:	9303      	str	r3, [sp, #12]
	tmp[6] = product[13];
    69ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
	tmp[7] = product[8];
    69ce:	6a23      	ldr	r3, [r4, #32]
    69d0:	9307      	str	r3, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    69d2:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    69d4:	2308      	movs	r3, #8
    69d6:	466a      	mov	r2, sp
    69d8:	4630      	mov	r0, r6
    69da:	f021 f915 	bl	27c08 <uECC_vli_add>

	/* d1 */
	tmp[0] = product[11];
    69de:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    69e0:	9300      	str	r3, [sp, #0]
	tmp[1] = product[12];
    69e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    69e4:	9301      	str	r3, [sp, #4]
	tmp[2] = product[13];
    69e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
    69e8:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[8];
    69ea:	6a23      	ldr	r3, [r4, #32]
    69ec:	9306      	str	r3, [sp, #24]
	tmp[7] = product[10];
    69ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    69f0:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    69f2:	4405      	add	r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    69f4:	2308      	movs	r3, #8
    69f6:	466a      	mov	r2, sp
    69f8:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    69fa:	e9cd 7704 	strd	r7, r7, [sp, #16]
    69fe:	9703      	str	r7, [sp, #12]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    6a00:	f021 fa33 	bl	27e6a <uECC_vli_sub>

	/* d2 */
	tmp[0] = product[12];
    6a04:	6b23      	ldr	r3, [r4, #48]	; 0x30
    6a06:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
    6a08:	6b63      	ldr	r3, [r4, #52]	; 0x34
    6a0a:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
    6a0c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    6a0e:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
    6a10:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    6a12:	9303      	str	r3, [sp, #12]
	tmp[4] = tmp[5] = 0;
	tmp[6] = product[9];
    6a14:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6a16:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
    6a18:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    6a1a:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    6a1c:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    6a1e:	2308      	movs	r3, #8
    6a20:	466a      	mov	r2, sp
    6a22:	4630      	mov	r0, r6
	tmp[4] = tmp[5] = 0;
    6a24:	e9cd 7704 	strd	r7, r7, [sp, #16]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    6a28:	f021 fa1f 	bl	27e6a <uECC_vli_sub>

	/* d3 */
	tmp[0] = product[13];
    6a2c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    6a2e:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
    6a30:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    6a32:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
    6a34:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    6a36:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
    6a38:	6a23      	ldr	r3, [r4, #32]
    6a3a:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
    6a3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6a3e:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
    6a40:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[6] = 0;
    6a42:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[12];
    6a46:	6b23      	ldr	r3, [r4, #48]	; 0x30
    6a48:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    6a4a:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    6a4c:	2308      	movs	r3, #8
    6a4e:	466a      	mov	r2, sp
    6a50:	4630      	mov	r0, r6
    6a52:	f021 fa0a 	bl	27e6a <uECC_vli_sub>

	/* d4 */
	tmp[0] = product[14];
    6a56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    6a58:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
    6a5a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[2] = 0;
    6a5c:	e9cd 3701 	strd	r3, r7, [sp, #4]
	tmp[3] = product[9];
    6a60:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6a62:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
    6a64:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6a66:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
    6a68:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	tmp[6] = 0;
    6a6a:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[13];
    6a6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    6a70:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    6a72:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    6a74:	2308      	movs	r3, #8
    6a76:	466a      	mov	r2, sp
    6a78:	4630      	mov	r0, r6
    6a7a:	f021 f9f6 	bl	27e6a <uECC_vli_sub>

	if (carry < 0) {
    6a7e:	1a2d      	subs	r5, r5, r0
		do {
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    6a80:	4c0d      	ldr	r4, [pc, #52]	; (6ab8 <vli_mmod_fast_secp256r1+0x19c>)
	if (carry < 0) {
    6a82:	d40f      	bmi.n	6aa4 <vli_mmod_fast_secp256r1+0x188>
		}
		while (carry < 0);
	} else  {
		while (carry || 
    6a84:	b935      	cbnz	r5, 6a94 <vli_mmod_fast_secp256r1+0x178>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
    6a86:	2208      	movs	r2, #8
    6a88:	4631      	mov	r1, r6
    6a8a:	4620      	mov	r0, r4
    6a8c:	f021 f9c3 	bl	27e16 <uECC_vli_cmp_unsafe>
		while (carry || 
    6a90:	2801      	cmp	r0, #1
    6a92:	d00f      	beq.n	6ab4 <vli_mmod_fast_secp256r1+0x198>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    6a94:	2308      	movs	r3, #8
    6a96:	4622      	mov	r2, r4
    6a98:	4631      	mov	r1, r6
    6a9a:	4630      	mov	r0, r6
    6a9c:	f021 f9e5 	bl	27e6a <uECC_vli_sub>
    6aa0:	1a2d      	subs	r5, r5, r0
    6aa2:	e7ef      	b.n	6a84 <vli_mmod_fast_secp256r1+0x168>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    6aa4:	2308      	movs	r3, #8
    6aa6:	4622      	mov	r2, r4
    6aa8:	4631      	mov	r1, r6
    6aaa:	4630      	mov	r0, r6
    6aac:	f021 f8ac 	bl	27c08 <uECC_vli_add>
		while (carry < 0);
    6ab0:	182d      	adds	r5, r5, r0
    6ab2:	d4f7      	bmi.n	6aa4 <vli_mmod_fast_secp256r1+0x188>
		}
	}
}
    6ab4:	b009      	add	sp, #36	; 0x24
    6ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6ab8:	0002ea44 	.word	0x0002ea44

00006abc <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
    6abc:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
    6abe:	4e28      	ldr	r6, [pc, #160]	; (6b60 <tc_aes128_set_encrypt_key+0xa4>)
{
    6ac0:	4607      	mov	r7, r0
    6ac2:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    6ac4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
    6ac6:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    6ac8:	ad01      	add	r5, sp, #4
    6aca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    6acc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    6ace:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    6ad0:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    6ad4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
    6ad8:	2f00      	cmp	r7, #0
    6ada:	d03c      	beq.n	6b56 <tc_aes128_set_encrypt_key+0x9a>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
    6adc:	2c00      	cmp	r4, #0
    6ade:	d03c      	beq.n	6b5a <tc_aes128_set_encrypt_key+0x9e>
    6ae0:	1f38      	subs	r0, r7, #4
    6ae2:	4621      	mov	r1, r4
    6ae4:	4602      	mov	r2, r0
    6ae6:	3410      	adds	r4, #16
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    6ae8:	784b      	ldrb	r3, [r1, #1]
    6aea:	780d      	ldrb	r5, [r1, #0]
    6aec:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    6aee:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    6af2:	78cd      	ldrb	r5, [r1, #3]
    6af4:	432b      	orrs	r3, r5
    6af6:	788d      	ldrb	r5, [r1, #2]
    6af8:	3104      	adds	r1, #4
    6afa:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
    6afe:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    6b00:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    6b04:	d1f0      	bne.n	6ae8 <tc_aes128_set_encrypt_key+0x2c>
	}

	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
    6b06:	4c17      	ldr	r4, [pc, #92]	; (6b64 <tc_aes128_set_encrypt_key+0xa8>)
    6b08:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
    6b0a:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    6b0c:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    6b0e:	d118      	bne.n	6b42 <tc_aes128_set_encrypt_key+0x86>
	return (((a) >> 24)|((a) << 8));
    6b10:	ea4f 6333 	mov.w	r3, r3, ror #24
			t = subword(rotword(t)) ^ rconst[i/Nk];
    6b14:	0e1a      	lsrs	r2, r3, #24
    6b16:	5ca5      	ldrb	r5, [r4, r2]
    6b18:	b2da      	uxtb	r2, r3
    6b1a:	5ca2      	ldrb	r2, [r4, r2]
    6b1c:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    6b20:	f3c3 4507 	ubfx	r5, r3, #16, #8
    6b24:	f3c3 2307 	ubfx	r3, r3, #8, #8
    6b28:	5d65      	ldrb	r5, [r4, r5]
    6b2a:	5ce3      	ldrb	r3, [r4, r3]
    6b2c:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    6b30:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    6b34:	ad0c      	add	r5, sp, #48	; 0x30
    6b36:	f021 0303 	bic.w	r3, r1, #3
    6b3a:	442b      	add	r3, r5
    6b3c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    6b40:	4053      	eors	r3, r2
		}
		s->words[i] = s->words[i-Nk] ^ t;
    6b42:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    6b46:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    6b48:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    6b4a:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    6b4c:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    6b4e:	d1dc      	bne.n	6b0a <tc_aes128_set_encrypt_key+0x4e>
	}

	return TC_CRYPTO_SUCCESS;
    6b50:	2001      	movs	r0, #1
}
    6b52:	b00d      	add	sp, #52	; 0x34
    6b54:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    6b56:	4638      	mov	r0, r7
    6b58:	e7fb      	b.n	6b52 <tc_aes128_set_encrypt_key+0x96>
    6b5a:	4620      	mov	r0, r4
    6b5c:	e7f9      	b.n	6b52 <tc_aes128_set_encrypt_key+0x96>
    6b5e:	bf00      	nop
    6b60:	0002e6c0 	.word	0x0002e6c0
    6b64:	0002ff04 	.word	0x0002ff04

00006b68 <tc_aes_encrypt>:
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
    6b68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6b6c:	4615      	mov	r5, r2
    6b6e:	b089      	sub	sp, #36	; 0x24
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
    6b70:	4607      	mov	r7, r0
    6b72:	2800      	cmp	r0, #0
    6b74:	d059      	beq.n	6c2a <tc_aes_encrypt+0xc2>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
    6b76:	2900      	cmp	r1, #0
    6b78:	d05a      	beq.n	6c30 <tc_aes_encrypt+0xc8>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
    6b7a:	2a00      	cmp	r2, #0
    6b7c:	d05a      	beq.n	6c34 <tc_aes_encrypt+0xcc>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
    6b7e:	2310      	movs	r3, #16
    6b80:	460a      	mov	r2, r1
    6b82:	4668      	mov	r0, sp
    6b84:	4619      	mov	r1, r3
    6b86:	f020 ff7a 	bl	27a7e <_copy>
	add_round_key(state, s->words);
    6b8a:	4629      	mov	r1, r5
    6b8c:	4668      	mov	r0, sp
		s[i] = sbox[s[i]];
    6b8e:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 6c38 <tc_aes_encrypt+0xd0>
	add_round_key(state, s->words);
    6b92:	f021 fe81 	bl	28898 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
    6b96:	f105 0610 	add.w	r6, r5, #16
    6b9a:	46c8      	mov	r8, r9
    6b9c:	35a0      	adds	r5, #160	; 0xa0
    6b9e:	466c      	mov	r4, sp
{
    6ba0:	466a      	mov	r2, sp
    6ba2:	2310      	movs	r3, #16
		s[i] = sbox[s[i]];
    6ba4:	7811      	ldrb	r1, [r2, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    6ba6:	3b01      	subs	r3, #1
		s[i] = sbox[s[i]];
    6ba8:	f819 1001 	ldrb.w	r1, [r9, r1]
    6bac:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < (Nb * Nk); ++i) {
    6bb0:	d1f8      	bne.n	6ba4 <tc_aes_encrypt+0x3c>
		sub_bytes(state);
		shift_rows(state);
    6bb2:	4668      	mov	r0, sp
    6bb4:	f021 feb5 	bl	28922 <shift_rows>
	mult_row_column(t, s);
    6bb8:	4669      	mov	r1, sp
    6bba:	a804      	add	r0, sp, #16
    6bbc:	f021 feea 	bl	28994 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
    6bc0:	a901      	add	r1, sp, #4
    6bc2:	a805      	add	r0, sp, #20
    6bc4:	f021 fee6 	bl	28994 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
    6bc8:	a902      	add	r1, sp, #8
    6bca:	a806      	add	r0, sp, #24
    6bcc:	f021 fee2 	bl	28994 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
    6bd0:	a903      	add	r1, sp, #12
    6bd2:	a807      	add	r0, sp, #28
    6bd4:	f021 fede 	bl	28994 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
    6bd8:	2310      	movs	r3, #16
    6bda:	4619      	mov	r1, r3
    6bdc:	eb0d 0203 	add.w	r2, sp, r3
    6be0:	4668      	mov	r0, sp
    6be2:	f020 ff4c 	bl	27a7e <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
    6be6:	4631      	mov	r1, r6
    6be8:	4668      	mov	r0, sp
    6bea:	3610      	adds	r6, #16
    6bec:	f021 fe54 	bl	28898 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
    6bf0:	42ae      	cmp	r6, r5
    6bf2:	d1d4      	bne.n	6b9e <tc_aes_encrypt+0x36>
    6bf4:	2610      	movs	r6, #16
		s[i] = sbox[s[i]];
    6bf6:	7823      	ldrb	r3, [r4, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    6bf8:	3e01      	subs	r6, #1
		s[i] = sbox[s[i]];
    6bfa:	f818 3003 	ldrb.w	r3, [r8, r3]
    6bfe:	f804 3b01 	strb.w	r3, [r4], #1
	for (i = 0; i < (Nb * Nk); ++i) {
    6c02:	d1f8      	bne.n	6bf6 <tc_aes_encrypt+0x8e>
	}

	sub_bytes(state);
	shift_rows(state);
    6c04:	4668      	mov	r0, sp
    6c06:	f021 fe8c 	bl	28922 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
    6c0a:	4629      	mov	r1, r5
    6c0c:	4668      	mov	r0, sp
    6c0e:	f021 fe43 	bl	28898 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
    6c12:	2310      	movs	r3, #16
    6c14:	4619      	mov	r1, r3
    6c16:	466a      	mov	r2, sp
    6c18:	4638      	mov	r0, r7
    6c1a:	f020 ff30 	bl	27a7e <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
    6c1e:	4668      	mov	r0, sp
    6c20:	2210      	movs	r2, #16
    6c22:	4631      	mov	r1, r6
    6c24:	f020 ff38 	bl	27a98 <_set>

	return TC_CRYPTO_SUCCESS;
    6c28:	2001      	movs	r0, #1
}
    6c2a:	b009      	add	sp, #36	; 0x24
    6c2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
    6c30:	4608      	mov	r0, r1
    6c32:	e7fa      	b.n	6c2a <tc_aes_encrypt+0xc2>
    6c34:	4610      	mov	r0, r2
    6c36:	e7f8      	b.n	6c2a <tc_aes_encrypt+0xc2>
    6c38:	0002ff04 	.word	0x0002ff04

00006c3c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    6c3c:	4a0a      	ldr	r2, [pc, #40]	; (6c68 <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
    6c3e:	490b      	ldr	r1, [pc, #44]	; (6c6c <arch_swap+0x30>)
	_current->arch.basepri = key;
    6c40:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    6c42:	6809      	ldr	r1, [r1, #0]
    6c44:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    6c48:	4909      	ldr	r1, [pc, #36]	; (6c70 <arch_swap+0x34>)
	_current->arch.basepri = key;
    6c4a:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    6c4e:	684b      	ldr	r3, [r1, #4]
    6c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    6c54:	604b      	str	r3, [r1, #4]
    6c56:	2300      	movs	r3, #0
    6c58:	f383 8811 	msr	BASEPRI, r3
    6c5c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    6c60:	6893      	ldr	r3, [r2, #8]
}
    6c62:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
    6c66:	4770      	bx	lr
    6c68:	20004604 	.word	0x20004604
    6c6c:	0002f548 	.word	0x0002f548
    6c70:	e000ed00 	.word	0xe000ed00

00006c74 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    6c74:	4913      	ldr	r1, [pc, #76]	; (6cc4 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    6c76:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    6c78:	f04f 0040 	mov.w	r0, #64	; 0x40
    add r0, r2
    6c7c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    6c7e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    6c82:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    6c86:	2020      	movs	r0, #32
    msr BASEPRI, r0
    6c88:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    6c8c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    6c90:	4f0d      	ldr	r7, [pc, #52]	; (6cc8 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    6c92:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    6c96:	6a8a      	ldr	r2, [r1, #40]	; 0x28

    str r2, [r1, #_kernel_offset_to_current]
    6c98:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    6c9a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    6c9c:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    movs r3, #0
    6ca0:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    6ca2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    6ca6:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    6caa:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    6cac:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    6cae:	f000 fbcb 	bl	7448 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    6cb2:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    6cb6:	f102 0040 	add.w	r0, r2, #64	; 0x40
    ldmia r0, {v1-v8, ip}
    6cba:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    6cbe:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    6cc2:	4770      	bx	lr
    ldr r1, =_kernel
    6cc4:	20004604 	.word	0x20004604
    ldr v4, =_SCS_ICSR
    6cc8:	e000ed04 	.word	0xe000ed04

00006ccc <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    6ccc:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    6cd0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    6cd2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    6cd6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    6cda:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    6cdc:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    6ce0:	2902      	cmp	r1, #2
    beq _oops
    6ce2:	d0ff      	beq.n	6ce4 <_oops>

00006ce4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    6ce4:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    6ce6:	f021 ff96 	bl	28c16 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    6cea:	bd01      	pop	{r0, pc}

00006cec <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    6cec:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    6cee:	2b00      	cmp	r3, #0
    6cf0:	db08      	blt.n	6d04 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6cf2:	2201      	movs	r2, #1
    6cf4:	f000 001f 	and.w	r0, r0, #31
    6cf8:	fa02 f000 	lsl.w	r0, r2, r0
    6cfc:	095b      	lsrs	r3, r3, #5
    6cfe:	4a02      	ldr	r2, [pc, #8]	; (6d08 <arch_irq_enable+0x1c>)
    6d00:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    6d04:	4770      	bx	lr
    6d06:	bf00      	nop
    6d08:	e000e100 	.word	0xe000e100

00006d0c <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    6d0c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    6d0e:	2b00      	cmp	r3, #0
    6d10:	db0d      	blt.n	6d2e <arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6d12:	2201      	movs	r2, #1
    6d14:	095b      	lsrs	r3, r3, #5
    6d16:	f000 001f 	and.w	r0, r0, #31
    6d1a:	fa02 f000 	lsl.w	r0, r2, r0
    6d1e:	3320      	adds	r3, #32
    6d20:	4a03      	ldr	r2, [pc, #12]	; (6d30 <arch_irq_disable+0x24>)
    6d22:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    6d26:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6d2a:	f3bf 8f6f 	isb	sy
}
    6d2e:	4770      	bx	lr
    6d30:	e000e100 	.word	0xe000e100

00006d34 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    6d34:	0942      	lsrs	r2, r0, #5
    6d36:	4b05      	ldr	r3, [pc, #20]	; (6d4c <arch_irq_is_enabled+0x18>)
    6d38:	f000 001f 	and.w	r0, r0, #31
    6d3c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    6d40:	2301      	movs	r3, #1
    6d42:	fa03 f000 	lsl.w	r0, r3, r0
}
    6d46:	4010      	ands	r0, r2
    6d48:	4770      	bx	lr
    6d4a:	bf00      	nop
    6d4c:	e000e100 	.word	0xe000e100

00006d50 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    6d50:	b538      	push	{r3, r4, r5, lr}
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
    6d52:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    6d54:	2c07      	cmp	r4, #7
{
    6d56:	4605      	mov	r5, r0
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    6d58:	d908      	bls.n	6d6c <z_arm_irq_priority_set+0x1c>
    6d5a:	490e      	ldr	r1, [pc, #56]	; (6d94 <z_arm_irq_priority_set+0x44>)
    6d5c:	480e      	ldr	r0, [pc, #56]	; (6d98 <z_arm_irq_priority_set+0x48>)
    6d5e:	225f      	movs	r2, #95	; 0x5f
    6d60:	f020 f905 	bl	26f6e <printk>
    6d64:	215f      	movs	r1, #95	; 0x5f
    6d66:	480b      	ldr	r0, [pc, #44]	; (6d94 <z_arm_irq_priority_set+0x44>)
    6d68:	f020 fb7a 	bl	27460 <assert_post_action>
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    6d6c:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    6d6e:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6d70:	bfa8      	it	ge
    6d72:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
    6d76:	ea4f 1444 	mov.w	r4, r4, lsl #5
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6d7a:	bfbc      	itt	lt
    6d7c:	f005 050f 	andlt.w	r5, r5, #15
    6d80:	4b06      	ldrlt	r3, [pc, #24]	; (6d9c <z_arm_irq_priority_set+0x4c>)
    6d82:	b2e4      	uxtb	r4, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6d84:	bfaa      	itet	ge
    6d86:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6d8a:	555c      	strblt	r4, [r3, r5]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6d8c:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
}
    6d90:	bd38      	pop	{r3, r4, r5, pc}
    6d92:	bf00      	nop
    6d94:	00030004 	.word	0x00030004
    6d98:	0002fa94 	.word	0x0002fa94
    6d9c:	e000ed14 	.word	0xe000ed14

00006da0 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
    6da0:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    6da2:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    6da4:	4b04      	ldr	r3, [pc, #16]	; (6db8 <_arch_isr_direct_pm+0x18>)
    6da6:	6a58      	ldr	r0, [r3, #36]	; 0x24
    6da8:	b118      	cbz	r0, 6db2 <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    6daa:	2200      	movs	r2, #0
    6dac:	625a      	str	r2, [r3, #36]	; 0x24
		z_pm_save_idle_exit(idle_val);
    6dae:	f026 fa16 	bl	2d1de <z_pm_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    6db2:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    6db4:	bd08      	pop	{r3, pc}
    6db6:	bf00      	nop
    6db8:	20004604 	.word	0x20004604

00006dbc <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    6dbc:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    6dc0:	9b00      	ldr	r3, [sp, #0]
    6dc2:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    6dc6:	490a      	ldr	r1, [pc, #40]	; (6df0 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    6dc8:	9b01      	ldr	r3, [sp, #4]
    6dca:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    6dce:	9b02      	ldr	r3, [sp, #8]
    6dd0:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    6dd4:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    6dd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    6ddc:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    6de0:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    6de4:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    6de6:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    6de8:	6602      	str	r2, [r0, #96]	; 0x60
	thread->arch.basepri = 0;
    6dea:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    6dee:	4770      	bx	lr
    6df0:	00027073 	.word	0x00027073

00006df4 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    6df4:	4b0b      	ldr	r3, [pc, #44]	; (6e24 <z_check_thread_stack_fail+0x30>)
{
    6df6:	4602      	mov	r2, r0
	const struct k_thread *thread = _current;
    6df8:	6898      	ldr	r0, [r3, #8]

	if (!thread) {
    6dfa:	b190      	cbz	r0, 6e22 <z_check_thread_stack_fail+0x2e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    6dfc:	f112 0f16 	cmn.w	r2, #22
    6e00:	6f40      	ldr	r0, [r0, #116]	; 0x74
    6e02:	d005      	beq.n	6e10 <z_check_thread_stack_fail+0x1c>
    6e04:	f1a0 0320 	sub.w	r3, r0, #32
    6e08:	4293      	cmp	r3, r2
    6e0a:	d806      	bhi.n	6e1a <z_check_thread_stack_fail+0x26>
    6e0c:	4282      	cmp	r2, r0
    6e0e:	d204      	bcs.n	6e1a <z_check_thread_stack_fail+0x26>
    6e10:	4281      	cmp	r1, r0
    6e12:	bf2c      	ite	cs
    6e14:	2100      	movcs	r1, #0
    6e16:	2101      	movcc	r1, #1
    6e18:	e000      	b.n	6e1c <z_check_thread_stack_fail+0x28>
    6e1a:	2100      	movs	r1, #0
    6e1c:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    6e1e:	bf08      	it	eq
    6e20:	2000      	moveq	r0, #0
}
    6e22:	4770      	bx	lr
    6e24:	20004604 	.word	0x20004604

00006e28 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    6e28:	b508      	push	{r3, lr}
    6e2a:	4604      	mov	r4, r0
    6e2c:	460e      	mov	r6, r1
    6e2e:	4615      	mov	r5, r2
	z_arm_configure_static_mpu_regions();
    6e30:	f000 fafe 	bl	7430 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    6e34:	4b08      	ldr	r3, [pc, #32]	; (6e58 <arch_switch_to_main_thread+0x30>)
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    6e36:	4620      	mov	r0, r4
	_current = main_thread;
    6e38:	609c      	str	r4, [r3, #8]
	z_arm_configure_dynamic_mpu_regions(main_thread);
    6e3a:	f000 fb05 	bl	7448 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    6e3e:	4628      	mov	r0, r5
    6e40:	f386 8809 	msr	PSP, r6
    6e44:	2100      	movs	r1, #0
    6e46:	b663      	cpsie	if
    6e48:	f381 8811 	msr	BASEPRI, r1
    6e4c:	f3bf 8f6f 	isb	sy
    6e50:	2200      	movs	r2, #0
    6e52:	2300      	movs	r3, #0
    6e54:	f020 f90d 	bl	27072 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    6e58:	20004604 	.word	0x20004604

00006e5c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    6e5c:	4901      	ldr	r1, [pc, #4]	; (6e64 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    6e5e:	2210      	movs	r2, #16
	str	r2, [r1]
    6e60:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    6e62:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    6e64:	e000ed10 	.word	0xe000ed10

00006e68 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    6e68:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    6e6a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    6e6c:	f380 8811 	msr	BASEPRI, r0
	isb
    6e70:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    6e74:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    6e78:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    6e7a:	b662      	cpsie	i
	isb
    6e7c:	f3bf 8f6f 	isb	sy

	bx	lr
    6e80:	4770      	bx	lr
    6e82:	bf00      	nop

00006e84 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    6e84:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    6e86:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    6e88:	f381 8811 	msr	BASEPRI, r1

	wfe
    6e8c:	bf20      	wfe

	msr	BASEPRI, r0
    6e8e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    6e92:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    6e94:	4770      	bx	lr
    6e96:	bf00      	nop

00006e98 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    6e98:	b537      	push	{r0, r1, r2, r4, r5, lr}
    6e9a:	4605      	mov	r5, r0

	if (esf != NULL) {
    6e9c:	460c      	mov	r4, r1
    6e9e:	b1c9      	cbz	r1, 6ed4 <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    6ea0:	688b      	ldr	r3, [r1, #8]
    6ea2:	9300      	str	r3, [sp, #0]
    6ea4:	e9d1 2300 	ldrd	r2, r3, [r1]
    6ea8:	480e      	ldr	r0, [pc, #56]	; (6ee4 <z_arm_fatal_error+0x4c>)
    6eaa:	2145      	movs	r1, #69	; 0x45
    6eac:	f020 f85f 	bl	26f6e <printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    6eb0:	6963      	ldr	r3, [r4, #20]
    6eb2:	9300      	str	r3, [sp, #0]
    6eb4:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    6eb8:	2145      	movs	r1, #69	; 0x45
    6eba:	480b      	ldr	r0, [pc, #44]	; (6ee8 <z_arm_fatal_error+0x50>)
    6ebc:	f020 f857 	bl	26f6e <printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    6ec0:	69e2      	ldr	r2, [r4, #28]
    6ec2:	480a      	ldr	r0, [pc, #40]	; (6eec <z_arm_fatal_error+0x54>)
    6ec4:	2145      	movs	r1, #69	; 0x45
    6ec6:	f020 f852 	bl	26f6e <printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    6eca:	69a2      	ldr	r2, [r4, #24]
    6ecc:	4808      	ldr	r0, [pc, #32]	; (6ef0 <z_arm_fatal_error+0x58>)
    6ece:	2145      	movs	r1, #69	; 0x45
    6ed0:	f020 f84d 	bl	26f6e <printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    6ed4:	4621      	mov	r1, r4
    6ed6:	4628      	mov	r0, r5
}
    6ed8:	b003      	add	sp, #12
    6eda:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_fatal_error(reason, esf);
    6ede:	f01a bed1 	b.w	21c84 <z_fatal_error>
    6ee2:	bf00      	nop
    6ee4:	0003003a 	.word	0x0003003a
    6ee8:	0003006e 	.word	0x0003006e
    6eec:	000300a2 	.word	0x000300a2
    6ef0:	000300b6 	.word	0x000300b6

00006ef4 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    6ef4:	bf30      	wfi
    b z_SysNmiOnReset
    6ef6:	f7ff bffd 	b.w	6ef4 <z_SysNmiOnReset>
    6efa:	bf00      	nop

00006efc <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    6efc:	4a0e      	ldr	r2, [pc, #56]	; (6f38 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    6efe:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    6f00:	4b0e      	ldr	r3, [pc, #56]	; (6f3c <z_arm_prep_c+0x40>)
    6f02:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    6f06:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    6f08:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6f0c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    6f10:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    6f14:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    6f18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    6f1c:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    6f20:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    6f24:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    6f28:	f01a ff38 	bl	21d9c <z_bss_zero>
	z_data_copy();
    6f2c:	f01c ffe0 	bl	23ef0 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    6f30:	f000 fa50 	bl	73d4 <z_arm_interrupt_init>
	z_cstart();
    6f34:	f01a ff56 	bl	21de4 <z_cstart>
    6f38:	00001000 	.word	0x00001000
    6f3c:	e000ed00 	.word	0xe000ed00

00006f40 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    6f40:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    6f42:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    6f44:	4a0b      	ldr	r2, [pc, #44]	; (6f74 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    6f46:	6a50      	ldr	r0, [r2, #36]	; 0x24
	cmp r0, #0
    6f48:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    6f4a:	bf1e      	ittt	ne
	movne	r1, #0
    6f4c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    6f4e:	6251      	strne	r1, [r2, #36]	; 0x24
		blne	z_pm_save_idle_exit
    6f50:	f026 f945 	blne	2d1de <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    6f54:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    6f56:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    6f5a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    6f5e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    6f62:	4905      	ldr	r1, [pc, #20]	; (6f78 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    6f64:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    6f66:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    6f68:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    6f6a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    6f6e:	4903      	ldr	r1, [pc, #12]	; (6f7c <_isr_wrapper+0x3c>)
	bx r1
    6f70:	4708      	bx	r1
    6f72:	0000      	.short	0x0000
	ldr r2, =_kernel
    6f74:	20004604 	.word	0x20004604
	ldr r1, =_sw_isr_table
    6f78:	0002e170 	.word	0x0002e170
	ldr r1, =z_arm_int_exit
    6f7c:	000073b9 	.word	0x000073b9

00006f80 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    6f80:	f021 fe70 	bl	28c64 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    6f84:	2020      	movs	r0, #32
    msr BASEPRI, r0
    6f86:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    6f8a:	4808      	ldr	r0, [pc, #32]	; (6fac <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    6f8c:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    6f90:	1840      	adds	r0, r0, r1
    msr PSP, r0
    6f92:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    6f96:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    6f9a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    6f9c:	4308      	orrs	r0, r1
    msr CONTROL, r0
    6f9e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    6fa2:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    6fa6:	f7ff ffa9 	bl	6efc <z_arm_prep_c>
    6faa:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    6fac:	20006260 	.word	0x20006260

00006fb0 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    6fb0:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    6fb4:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    6fb8:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    6fba:	4672      	mov	r2, lr
	bl z_arm_fault
    6fbc:	f000 f92c 	bl	7218 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    6fc0:	bd01      	pop	{r0, pc}
    6fc2:	bf00      	nop

00006fc4 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    6fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    6fc8:	4c36      	ldr	r4, [pc, #216]	; (70a4 <mem_manage_fault+0xe0>)
{
    6fca:	4605      	mov	r5, r0
    6fcc:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    6fce:	4836      	ldr	r0, [pc, #216]	; (70a8 <mem_manage_fault+0xe4>)
    6fd0:	2145      	movs	r1, #69	; 0x45
{
    6fd2:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    6fd4:	f01f ffcb 	bl	26f6e <printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    6fd8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    6fda:	06d7      	lsls	r7, r2, #27
    6fdc:	d503      	bpl.n	6fe6 <mem_manage_fault+0x22>
		PR_FAULT_INFO("  Stacking error (context area might be"
    6fde:	2145      	movs	r1, #69	; 0x45
    6fe0:	4832      	ldr	r0, [pc, #200]	; (70ac <mem_manage_fault+0xe8>)
    6fe2:	f01f ffc4 	bl	26f6e <printk>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    6fe6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6fe8:	0718      	lsls	r0, r3, #28
    6fea:	d503      	bpl.n	6ff4 <mem_manage_fault+0x30>
		PR_FAULT_INFO("  Unstacking error");
    6fec:	2145      	movs	r1, #69	; 0x45
    6fee:	4830      	ldr	r0, [pc, #192]	; (70b0 <mem_manage_fault+0xec>)
    6ff0:	f01f ffbd 	bl	26f6e <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    6ff4:	4c2b      	ldr	r4, [pc, #172]	; (70a4 <mem_manage_fault+0xe0>)
    6ff6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6ff8:	0799      	lsls	r1, r3, #30
    6ffa:	d422      	bmi.n	7042 <mem_manage_fault+0x7e>
	uint32_t mmfar = -EINVAL;
    6ffc:	f06f 0715 	mvn.w	r7, #21
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    7000:	4c28      	ldr	r4, [pc, #160]	; (70a4 <mem_manage_fault+0xe0>)
    7002:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    7004:	07d3      	lsls	r3, r2, #31
    7006:	d503      	bpl.n	7010 <mem_manage_fault+0x4c>
		PR_FAULT_INFO("  Instruction Access Violation");
    7008:	2145      	movs	r1, #69	; 0x45
    700a:	482a      	ldr	r0, [pc, #168]	; (70b4 <mem_manage_fault+0xf0>)
    700c:	f01f ffaf 	bl	26f6e <printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    7010:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7012:	069c      	lsls	r4, r3, #26
    7014:	d503      	bpl.n	701e <mem_manage_fault+0x5a>
		PR_FAULT_INFO(
    7016:	2145      	movs	r1, #69	; 0x45
    7018:	4827      	ldr	r0, [pc, #156]	; (70b8 <mem_manage_fault+0xf4>)
    701a:	f01f ffa8 	bl	26f6e <printk>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    701e:	4c21      	ldr	r4, [pc, #132]	; (70a4 <mem_manage_fault+0xe0>)
    7020:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7022:	06d8      	lsls	r0, r3, #27
    7024:	d422      	bmi.n	706c <mem_manage_fault+0xa8>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    7026:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    7028:	0799      	lsls	r1, r3, #30
    702a:	d41f      	bmi.n	706c <mem_manage_fault+0xa8>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    702c:	2500      	movs	r5, #0
		"Stacking error without stack guard / User-mode support\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    702e:	4a1d      	ldr	r2, [pc, #116]	; (70a4 <mem_manage_fault+0xe0>)
    7030:	6a93      	ldr	r3, [r2, #40]	; 0x28
    7032:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    7036:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
    7038:	2300      	movs	r3, #0
    703a:	7033      	strb	r3, [r6, #0]

	return reason;
}
    703c:	4628      	mov	r0, r5
    703e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		PR_FAULT_INFO("  Data Access Violation");
    7042:	2145      	movs	r1, #69	; 0x45
    7044:	481d      	ldr	r0, [pc, #116]	; (70bc <mem_manage_fault+0xf8>)
    7046:	f01f ff92 	bl	26f6e <printk>
		uint32_t temp = SCB->MMFAR;
    704a:	6b67      	ldr	r7, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    704c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    704e:	061a      	lsls	r2, r3, #24
    7050:	d5d4      	bpl.n	6ffc <mem_manage_fault+0x38>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    7052:	463a      	mov	r2, r7
    7054:	2145      	movs	r1, #69	; 0x45
    7056:	481a      	ldr	r0, [pc, #104]	; (70c0 <mem_manage_fault+0xfc>)
    7058:	f01f ff89 	bl	26f6e <printk>
			if (from_hard_fault) {
    705c:	f1b8 0f00 	cmp.w	r8, #0
    7060:	d0ce      	beq.n	7000 <mem_manage_fault+0x3c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    7062:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7064:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    7068:	62a3      	str	r3, [r4, #40]	; 0x28
    706a:	e7c9      	b.n	7000 <mem_manage_fault+0x3c>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    706c:	6863      	ldr	r3, [r4, #4]
    706e:	051a      	lsls	r2, r3, #20
    7070:	d5dc      	bpl.n	702c <mem_manage_fault+0x68>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    7072:	4629      	mov	r1, r5
    7074:	4638      	mov	r0, r7
    7076:	f7ff febd 	bl	6df4 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    707a:	4605      	mov	r5, r0
    707c:	b118      	cbz	r0, 7086 <mem_manage_fault+0xc2>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    707e:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    7082:	2502      	movs	r5, #2
    7084:	e7d3      	b.n	702e <mem_manage_fault+0x6a>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    7086:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7088:	06db      	lsls	r3, r3, #27
    708a:	d5cf      	bpl.n	702c <mem_manage_fault+0x68>
    708c:	f44f 72a1 	mov.w	r2, #322	; 0x142
    7090:	490c      	ldr	r1, [pc, #48]	; (70c4 <mem_manage_fault+0x100>)
    7092:	480d      	ldr	r0, [pc, #52]	; (70c8 <mem_manage_fault+0x104>)
    7094:	f01f ff6b 	bl	26f6e <printk>
    7098:	f44f 71a1 	mov.w	r1, #322	; 0x142
    709c:	4809      	ldr	r0, [pc, #36]	; (70c4 <mem_manage_fault+0x100>)
    709e:	f020 f9df 	bl	27460 <assert_post_action>
    70a2:	e7c4      	b.n	702e <mem_manage_fault+0x6a>
    70a4:	e000ed00 	.word	0xe000ed00
    70a8:	0003018f 	.word	0x0003018f
    70ac:	000301aa 	.word	0x000301aa
    70b0:	000301e2 	.word	0x000301e2
    70b4:	00030232 	.word	0x00030232
    70b8:	00030256 	.word	0x00030256
    70bc:	000301fa 	.word	0x000301fa
    70c0:	00030217 	.word	0x00030217
    70c4:	0003028a 	.word	0x0003028a
    70c8:	0002fa94 	.word	0x0002fa94

000070cc <bus_fault.isra.2>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    70cc:	b570      	push	{r4, r5, r6, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    70ce:	4c23      	ldr	r4, [pc, #140]	; (715c <bus_fault.isra.2+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    70d0:	4606      	mov	r6, r0
    70d2:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    70d4:	4822      	ldr	r0, [pc, #136]	; (7160 <bus_fault.isra.2+0x94>)
    70d6:	2145      	movs	r1, #69	; 0x45
    70d8:	f01f ff49 	bl	26f6e <printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    70dc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    70de:	04d1      	lsls	r1, r2, #19
    70e0:	d503      	bpl.n	70ea <bus_fault.isra.2+0x1e>
		PR_FAULT_INFO("  Stacking error");
    70e2:	2145      	movs	r1, #69	; 0x45
    70e4:	481f      	ldr	r0, [pc, #124]	; (7164 <bus_fault.isra.2+0x98>)
    70e6:	f01f ff42 	bl	26f6e <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    70ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    70ec:	051a      	lsls	r2, r3, #20
    70ee:	d503      	bpl.n	70f8 <bus_fault.isra.2+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    70f0:	2145      	movs	r1, #69	; 0x45
    70f2:	481d      	ldr	r0, [pc, #116]	; (7168 <bus_fault.isra.2+0x9c>)
    70f4:	f01f ff3b 	bl	26f6e <printk>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    70f8:	4c18      	ldr	r4, [pc, #96]	; (715c <bus_fault.isra.2+0x90>)
    70fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    70fc:	059b      	lsls	r3, r3, #22
    70fe:	d510      	bpl.n	7122 <bus_fault.isra.2+0x56>
		PR_FAULT_INFO("  Precise data bus error");
    7100:	481a      	ldr	r0, [pc, #104]	; (716c <bus_fault.isra.2+0xa0>)
    7102:	2145      	movs	r1, #69	; 0x45
    7104:	f01f ff33 	bl	26f6e <printk>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    7108:	6ba2      	ldr	r2, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    710a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    710c:	0418      	lsls	r0, r3, #16
    710e:	d508      	bpl.n	7122 <bus_fault.isra.2+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    7110:	2145      	movs	r1, #69	; 0x45
    7112:	4817      	ldr	r0, [pc, #92]	; (7170 <bus_fault.isra.2+0xa4>)
    7114:	f01f ff2b 	bl	26f6e <printk>
			if (from_hard_fault) {
    7118:	b11e      	cbz	r6, 7122 <bus_fault.isra.2+0x56>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    711a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    711c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    7120:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    7122:	4c0e      	ldr	r4, [pc, #56]	; (715c <bus_fault.isra.2+0x90>)
    7124:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7126:	0559      	lsls	r1, r3, #21
    7128:	d503      	bpl.n	7132 <bus_fault.isra.2+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
    712a:	2145      	movs	r1, #69	; 0x45
    712c:	4811      	ldr	r0, [pc, #68]	; (7174 <bus_fault.isra.2+0xa8>)
    712e:	f01f ff1e 	bl	26f6e <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    7132:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7134:	05da      	lsls	r2, r3, #23
    7136:	d50b      	bpl.n	7150 <bus_fault.isra.2+0x84>
		PR_FAULT_INFO("  Instruction bus error");
    7138:	480f      	ldr	r0, [pc, #60]	; (7178 <bus_fault.isra.2+0xac>)
    713a:	2145      	movs	r1, #69	; 0x45
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    713c:	f01f ff17 	bl	26f6e <printk>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    7140:	4a06      	ldr	r2, [pc, #24]	; (715c <bus_fault.isra.2+0x90>)
    7142:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf);
    7144:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    7146:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    714a:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    714c:	7028      	strb	r0, [r5, #0]

	return reason;
}
    714e:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    7150:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7152:	049b      	lsls	r3, r3, #18
    7154:	d5f4      	bpl.n	7140 <bus_fault.isra.2+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    7156:	2145      	movs	r1, #69	; 0x45
    7158:	4808      	ldr	r0, [pc, #32]	; (717c <bus_fault.isra.2+0xb0>)
    715a:	e7ef      	b.n	713c <bus_fault.isra.2+0x70>
    715c:	e000ed00 	.word	0xe000ed00
    7160:	000300e9 	.word	0x000300e9
    7164:	00030104 	.word	0x00030104
    7168:	000301e2 	.word	0x000301e2
    716c:	0003011a 	.word	0x0003011a
    7170:	00030138 	.word	0x00030138
    7174:	00030152 	.word	0x00030152
    7178:	00030172 	.word	0x00030172
    717c:	00030256 	.word	0x00030256

00007180 <usage_fault.isra.3>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    7180:	b510      	push	{r4, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    7182:	4c1d      	ldr	r4, [pc, #116]	; (71f8 <usage_fault.isra.3+0x78>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    7184:	481d      	ldr	r0, [pc, #116]	; (71fc <usage_fault.isra.3+0x7c>)
    7186:	2145      	movs	r1, #69	; 0x45
    7188:	f01f fef1 	bl	26f6e <printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    718c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    718e:	0193      	lsls	r3, r2, #6
    7190:	d503      	bpl.n	719a <usage_fault.isra.3+0x1a>
		PR_FAULT_INFO("  Division by zero");
    7192:	2145      	movs	r1, #69	; 0x45
    7194:	481a      	ldr	r0, [pc, #104]	; (7200 <usage_fault.isra.3+0x80>)
    7196:	f01f feea 	bl	26f6e <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    719a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    719c:	01dc      	lsls	r4, r3, #7
    719e:	d503      	bpl.n	71a8 <usage_fault.isra.3+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
    71a0:	2145      	movs	r1, #69	; 0x45
    71a2:	4818      	ldr	r0, [pc, #96]	; (7204 <usage_fault.isra.3+0x84>)
    71a4:	f01f fee3 	bl	26f6e <printk>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    71a8:	4c13      	ldr	r4, [pc, #76]	; (71f8 <usage_fault.isra.3+0x78>)
    71aa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    71ac:	0310      	lsls	r0, r2, #12
    71ae:	d503      	bpl.n	71b8 <usage_fault.isra.3+0x38>
		PR_FAULT_INFO("  No coprocessor instructions");
    71b0:	2145      	movs	r1, #69	; 0x45
    71b2:	4815      	ldr	r0, [pc, #84]	; (7208 <usage_fault.isra.3+0x88>)
    71b4:	f01f fedb 	bl	26f6e <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    71b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    71ba:	0359      	lsls	r1, r3, #13
    71bc:	d503      	bpl.n	71c6 <usage_fault.isra.3+0x46>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    71be:	2145      	movs	r1, #69	; 0x45
    71c0:	4812      	ldr	r0, [pc, #72]	; (720c <usage_fault.isra.3+0x8c>)
    71c2:	f01f fed4 	bl	26f6e <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    71c6:	4c0c      	ldr	r4, [pc, #48]	; (71f8 <usage_fault.isra.3+0x78>)
    71c8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    71ca:	0392      	lsls	r2, r2, #14
    71cc:	d503      	bpl.n	71d6 <usage_fault.isra.3+0x56>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    71ce:	2145      	movs	r1, #69	; 0x45
    71d0:	480f      	ldr	r0, [pc, #60]	; (7210 <usage_fault.isra.3+0x90>)
    71d2:	f01f fecc 	bl	26f6e <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    71d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    71d8:	03db      	lsls	r3, r3, #15
    71da:	d503      	bpl.n	71e4 <usage_fault.isra.3+0x64>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    71dc:	2145      	movs	r1, #69	; 0x45
    71de:	480d      	ldr	r0, [pc, #52]	; (7214 <usage_fault.isra.3+0x94>)
    71e0:	f01f fec5 	bl	26f6e <printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    71e4:	4a04      	ldr	r2, [pc, #16]	; (71f8 <usage_fault.isra.3+0x78>)
    71e6:	6a93      	ldr	r3, [r2, #40]	; 0x28
    71e8:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    71ec:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    71f0:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    71f2:	2000      	movs	r0, #0
    71f4:	bd10      	pop	{r4, pc}
    71f6:	bf00      	nop
    71f8:	e000ed00 	.word	0xe000ed00
    71fc:	000302c4 	.word	0x000302c4
    7200:	000302e1 	.word	0x000302e1
    7204:	000302f9 	.word	0x000302f9
    7208:	00030318 	.word	0x00030318
    720c:	0003033b 	.word	0x0003033b
    7210:	00030365 	.word	0x00030365
    7214:	00030384 	.word	0x00030384

00007218 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    7218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    721c:	4b54      	ldr	r3, [pc, #336]	; (7370 <z_arm_fault+0x158>)
    721e:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    7222:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    7224:	f3c8 0708 	ubfx	r7, r8, #0, #9
    7228:	2600      	movs	r6, #0
    722a:	f386 8811 	msr	BASEPRI, r6
    722e:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    7232:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    7236:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    723a:	d107      	bne.n	724c <z_arm_fault+0x34>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    723c:	f002 030c 	and.w	r3, r2, #12
    7240:	2b08      	cmp	r3, #8
    7242:	d110      	bne.n	7266 <z_arm_fault+0x4e>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    7244:	2145      	movs	r1, #69	; 0x45
    7246:	484b      	ldr	r0, [pc, #300]	; (7374 <z_arm_fault+0x15c>)
    7248:	f01f fe91 	bl	26f6e <printk>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    724c:	f240 32c5 	movw	r2, #965	; 0x3c5
    7250:	4949      	ldr	r1, [pc, #292]	; (7378 <z_arm_fault+0x160>)
    7252:	484a      	ldr	r0, [pc, #296]	; (737c <z_arm_fault+0x164>)
    7254:	f01f fe8b 	bl	26f6e <printk>
    7258:	f240 31c5 	movw	r1, #965	; 0x3c5
    725c:	4846      	ldr	r0, [pc, #280]	; (7378 <z_arm_fault+0x160>)
    725e:	f020 f8ff 	bl	27460 <assert_post_action>
    7262:	2400      	movs	r4, #0
    7264:	e006      	b.n	7274 <z_arm_fault+0x5c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    7266:	0712      	lsls	r2, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    7268:	bf4e      	itee	mi
    726a:	460c      	movmi	r4, r1
			ptr_esf = (z_arch_esf_t *)msp;
    726c:	4604      	movpl	r4, r0
			*nested_exc = true;
    726e:	2601      	movpl	r6, #1
	__ASSERT(esf != NULL,
    7270:	2c00      	cmp	r4, #0
    7272:	d0eb      	beq.n	724c <z_arm_fault+0x34>
	*recoverable = false;
    7274:	2300      	movs	r3, #0
	switch (fault) {
    7276:	1efa      	subs	r2, r7, #3
	*recoverable = false;
    7278:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    727c:	461d      	mov	r5, r3
    727e:	4613      	mov	r3, r2
    7280:	2b09      	cmp	r3, #9
    7282:	d862      	bhi.n	734a <z_arm_fault+0x132>
    7284:	e8df f003 	tbb	[pc, r3]
    7288:	345a5605 	.word	0x345a5605
    728c:	61616161 	.word	0x61616161
    7290:	5e61      	.short	0x5e61
	PR_FAULT_INFO("***** HARD FAULT *****");
    7292:	2145      	movs	r1, #69	; 0x45
    7294:	483a      	ldr	r0, [pc, #232]	; (7380 <z_arm_fault+0x168>)
    7296:	f01f fe6a 	bl	26f6e <printk>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    729a:	4b35      	ldr	r3, [pc, #212]	; (7370 <z_arm_fault+0x158>)
	*recoverable = false;
    729c:	f88d 5007 	strb.w	r5, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    72a0:	6add      	ldr	r5, [r3, #44]	; 0x2c
    72a2:	f015 0502 	ands.w	r5, r5, #2
    72a6:	d005      	beq.n	72b4 <z_arm_fault+0x9c>
		PR_EXC("  Bus fault on vector table read");
    72a8:	4836      	ldr	r0, [pc, #216]	; (7384 <z_arm_fault+0x16c>)
    72aa:	2145      	movs	r1, #69	; 0x45
	PR_FAULT_INFO(
    72ac:	f01f fe5f 	bl	26f6e <printk>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    72b0:	2500      	movs	r5, #0
    72b2:	e020      	b.n	72f6 <z_arm_fault+0xde>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    72b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    72b6:	005b      	lsls	r3, r3, #1
    72b8:	d51d      	bpl.n	72f6 <z_arm_fault+0xde>
		PR_EXC("  Fault escalation (see below)");
    72ba:	2145      	movs	r1, #69	; 0x45
    72bc:	4832      	ldr	r0, [pc, #200]	; (7388 <z_arm_fault+0x170>)
    72be:	f01f fe56 	bl	26f6e <printk>
		if (SCB_MMFSR != 0) {
    72c2:	4b32      	ldr	r3, [pc, #200]	; (738c <z_arm_fault+0x174>)
    72c4:	781b      	ldrb	r3, [r3, #0]
    72c6:	b133      	cbz	r3, 72d6 <z_arm_fault+0xbe>
			reason = mem_manage_fault(esf, 1, recoverable);
    72c8:	f10d 0207 	add.w	r2, sp, #7
    72cc:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    72ce:	4620      	mov	r0, r4
    72d0:	f7ff fe78 	bl	6fc4 <mem_manage_fault>
    72d4:	e00e      	b.n	72f4 <z_arm_fault+0xdc>
		} else if (SCB_BFSR != 0) {
    72d6:	4b2e      	ldr	r3, [pc, #184]	; (7390 <z_arm_fault+0x178>)
    72d8:	781b      	ldrb	r3, [r3, #0]
    72da:	b12b      	cbz	r3, 72e8 <z_arm_fault+0xd0>
			reason = bus_fault(esf, 1, recoverable);
    72dc:	f10d 0107 	add.w	r1, sp, #7
    72e0:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    72e2:	f7ff fef3 	bl	70cc <bus_fault.isra.2>
    72e6:	e005      	b.n	72f4 <z_arm_fault+0xdc>
		} else if (SCB_UFSR != 0) {
    72e8:	4b2a      	ldr	r3, [pc, #168]	; (7394 <z_arm_fault+0x17c>)
    72ea:	881b      	ldrh	r3, [r3, #0]
    72ec:	b29b      	uxth	r3, r3
    72ee:	b113      	cbz	r3, 72f6 <z_arm_fault+0xde>
			reason = usage_fault(esf);
    72f0:	f7ff ff46 	bl	7180 <usage_fault.isra.3>
    72f4:	4605      	mov	r5, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    72f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    72fa:	b9c3      	cbnz	r3, 732e <z_arm_fault+0x116>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    72fc:	aa02      	add	r2, sp, #8
    72fe:	f104 0720 	add.w	r7, r4, #32
    7302:	6820      	ldr	r0, [r4, #0]
    7304:	6861      	ldr	r1, [r4, #4]
    7306:	4613      	mov	r3, r2
    7308:	c303      	stmia	r3!, {r0, r1}
    730a:	3408      	adds	r4, #8
    730c:	42bc      	cmp	r4, r7
    730e:	461a      	mov	r2, r3
    7310:	d1f7      	bne.n	7302 <z_arm_fault+0xea>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    7312:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7314:	b336      	cbz	r6, 7364 <z_arm_fault+0x14c>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    7316:	f3c3 0208 	ubfx	r2, r3, #0, #9
    731a:	b922      	cbnz	r2, 7326 <z_arm_fault+0x10e>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    731c:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    7320:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    7324:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    7326:	a902      	add	r1, sp, #8
    7328:	4628      	mov	r0, r5
    732a:	f7ff fdb5 	bl	6e98 <z_arm_fatal_error>
}
    732e:	b00a      	add	sp, #40	; 0x28
    7330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    7334:	f10d 0207 	add.w	r2, sp, #7
    7338:	2100      	movs	r1, #0
    733a:	e7c8      	b.n	72ce <z_arm_fault+0xb6>
		reason = bus_fault(esf, 0, recoverable);
    733c:	f10d 0107 	add.w	r1, sp, #7
    7340:	2000      	movs	r0, #0
    7342:	e7ce      	b.n	72e2 <z_arm_fault+0xca>
	PR_FAULT_INFO(
    7344:	2145      	movs	r1, #69	; 0x45
    7346:	4814      	ldr	r0, [pc, #80]	; (7398 <z_arm_fault+0x180>)
    7348:	e7b0      	b.n	72ac <z_arm_fault+0x94>
	PR_FAULT_INFO("***** %s %d) *****",
    734a:	4914      	ldr	r1, [pc, #80]	; (739c <z_arm_fault+0x184>)
    734c:	4a14      	ldr	r2, [pc, #80]	; (73a0 <z_arm_fault+0x188>)
    734e:	4815      	ldr	r0, [pc, #84]	; (73a4 <z_arm_fault+0x18c>)
    7350:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    7354:	bf08      	it	eq
    7356:	460a      	moveq	r2, r1
    7358:	f1a7 0310 	sub.w	r3, r7, #16
    735c:	2145      	movs	r1, #69	; 0x45
    735e:	f01f fe06 	bl	26f6e <printk>
    7362:	e7a5      	b.n	72b0 <z_arm_fault+0x98>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    7364:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    7368:	f023 0301 	bic.w	r3, r3, #1
    736c:	e7da      	b.n	7324 <z_arm_fault+0x10c>
    736e:	bf00      	nop
    7370:	e000ed00 	.word	0xe000ed00
    7374:	000303e2 	.word	0x000303e2
    7378:	0003028a 	.word	0x0003028a
    737c:	0002fa94 	.word	0x0002fa94
    7380:	00030412 	.word	0x00030412
    7384:	0003042e 	.word	0x0003042e
    7388:	00030454 	.word	0x00030454
    738c:	e000ed28 	.word	0xe000ed28
    7390:	e000ed29 	.word	0xe000ed29
    7394:	e000ed2a 	.word	0xe000ed2a
    7398:	00030478 	.word	0x00030478
    739c:	000303b4 	.word	0x000303b4
    73a0:	000303c9 	.word	0x000303c9
    73a4:	000304b3 	.word	0x000304b3

000073a8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    73a8:	4a02      	ldr	r2, [pc, #8]	; (73b4 <z_arm_fault_init+0xc>)
    73aa:	6953      	ldr	r3, [r2, #20]
    73ac:	f043 0310 	orr.w	r3, r3, #16
    73b0:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    73b2:	4770      	bx	lr
    73b4:	e000ed00 	.word	0xe000ed00

000073b8 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    73b8:	4b04      	ldr	r3, [pc, #16]	; (73cc <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    73ba:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    73bc:	6a98      	ldr	r0, [r3, #40]	; 0x28
	cmp r0, r1
    73be:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    73c0:	d003      	beq.n	73ca <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    73c2:	4903      	ldr	r1, [pc, #12]	; (73d0 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    73c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    73c8:	600a      	str	r2, [r1, #0]

000073ca <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    73ca:	4770      	bx	lr
	ldr r3, =_kernel
    73cc:	20004604 	.word	0x20004604
	ldr r1, =_SCS_ICSR
    73d0:	e000ed04 	.word	0xe000ed04

000073d4 <z_arm_interrupt_init>:
    73d4:	4804      	ldr	r0, [pc, #16]	; (73e8 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    73d6:	2300      	movs	r3, #0
    73d8:	2120      	movs	r1, #32
    73da:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    73dc:	3301      	adds	r3, #1
    73de:	2b30      	cmp	r3, #48	; 0x30
    73e0:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    73e4:	d1f9      	bne.n	73da <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    73e6:	4770      	bx	lr
    73e8:	e000e100 	.word	0xe000e100

000073ec <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    73ec:	b508      	push	{r3, lr}
	if (_current == thread) {
    73ee:	4b0e      	ldr	r3, [pc, #56]	; (7428 <z_impl_k_thread_abort+0x3c>)
    73f0:	689b      	ldr	r3, [r3, #8]
    73f2:	4283      	cmp	r3, r0
    73f4:	d107      	bne.n	7406 <z_impl_k_thread_abort+0x1a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    73f6:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    73fa:	b193      	cbz	r3, 7422 <z_impl_k_thread_abort+0x36>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    73fc:	4a0b      	ldr	r2, [pc, #44]	; (742c <z_impl_k_thread_abort+0x40>)
    73fe:	6853      	ldr	r3, [r2, #4]
    7400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    7404:	6053      	str	r3, [r2, #4]
		} else {
			z_self_abort(); /* Never returns */
		}
	}

	z_thread_single_abort(thread);
    7406:	f01b fe37 	bl	23078 <z_thread_single_abort>
	__asm__ volatile(
    740a:	f04f 0320 	mov.w	r3, #32
    740e:	f3ef 8011 	mrs	r0, BASEPRI
    7412:	f383 8811 	msr	BASEPRI, r3
    7416:	f3bf 8f6f 	isb	sy

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
    741a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
    741e:	f025 bf41 	b.w	2d2a4 <z_reschedule_irqlock>
			z_self_abort(); /* Never returns */
    7422:	f01c fc67 	bl	23cf4 <z_self_abort>
    7426:	bf00      	nop
    7428:	20004604 	.word	0x20004604
    742c:	e000ed00 	.word	0xe000ed00

00007430 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    7430:	4b02      	ldr	r3, [pc, #8]	; (743c <z_arm_configure_static_mpu_regions+0xc>)
    7432:	4a03      	ldr	r2, [pc, #12]	; (7440 <z_arm_configure_static_mpu_regions+0x10>)
    7434:	4803      	ldr	r0, [pc, #12]	; (7444 <z_arm_configure_static_mpu_regions+0x14>)
    7436:	2101      	movs	r1, #1
    7438:	f000 b8c0 	b.w	75bc <arm_core_mpu_configure_static_mpu_regions>
    743c:	20040000 	.word	0x20040000
    7440:	20000000 	.word	0x20000000
    7444:	0002eaf0 	.word	0x0002eaf0

00007448 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    7448:	6f42      	ldr	r2, [r0, #116]	; 0x74
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    744a:	4b05      	ldr	r3, [pc, #20]	; (7460 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    744c:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    744e:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    7450:	4a04      	ldr	r2, [pc, #16]	; (7464 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    7452:	2120      	movs	r1, #32
    7454:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    7458:	4618      	mov	r0, r3
    745a:	2101      	movs	r1, #1
    745c:	f000 b8cc 	b.w	75f8 <arm_core_mpu_configure_dynamic_mpu_regions>
    7460:	20002b5c 	.word	0x20002b5c
    7464:	150b0000 	.word	0x150b0000

00007468 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    7468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
    746a:	4f22      	ldr	r7, [pc, #136]	; (74f4 <mpu_configure_regions+0x8c>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    746c:	2600      	movs	r6, #0
    746e:	428e      	cmp	r6, r1
    7470:	da0f      	bge.n	7492 <mpu_configure_regions+0x2a>
		if (regions[i].size == 0U) {
    7472:	6844      	ldr	r4, [r0, #4]
    7474:	2c00      	cmp	r4, #0
    7476:	d039      	beq.n	74ec <mpu_configure_regions+0x84>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    7478:	b19b      	cbz	r3, 74a2 <mpu_configure_regions+0x3a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    747a:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    747e:	ea14 0f0c 	tst.w	r4, ip
    7482:	d008      	beq.n	7496 <mpu_configure_regions+0x2e>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    7484:	481c      	ldr	r0, [pc, #112]	; (74f8 <mpu_configure_regions+0x90>)
    7486:	4632      	mov	r2, r6
    7488:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    748a:	f01f fd70 	bl	26f6e <printk>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    748e:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    7492:	4610      	mov	r0, r2
    7494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
    7496:	2c1f      	cmp	r4, #31
    7498:	d9f4      	bls.n	7484 <mpu_configure_regions+0x1c>
		((part->start & (part->size - 1U)) == 0U);
    749a:	6805      	ldr	r5, [r0, #0]
		&&
    749c:	ea1c 0f05 	tst.w	ip, r5
    74a0:	d1f0      	bne.n	7484 <mpu_configure_regions+0x1c>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    74a2:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    74a4:	b2d2      	uxtb	r2, r2
	region_conf.base = new_region->start;
    74a6:	6805      	ldr	r5, [r0, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    74a8:	f8d0 c008 	ldr.w	ip, [r0, #8]
    74ac:	d90f      	bls.n	74ce <mpu_configure_regions+0x66>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    74ae:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    74b2:	d80e      	bhi.n	74d2 <mpu_configure_regions+0x6a>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    74b4:	3c01      	subs	r4, #1
    74b6:	fab4 f484 	clz	r4, r4
    74ba:	f1c4 041f 	rsb	r4, r4, #31
    74be:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    74c0:	2a07      	cmp	r2, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    74c2:	ea4c 0404 	orr.w	r4, ip, r4
    74c6:	d906      	bls.n	74d6 <mpu_configure_regions+0x6e>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    74c8:	2145      	movs	r1, #69	; 0x45
    74ca:	480c      	ldr	r0, [pc, #48]	; (74fc <mpu_configure_regions+0x94>)
    74cc:	e7dd      	b.n	748a <mpu_configure_regions+0x22>
		return REGION_32B;
    74ce:	2408      	movs	r4, #8
    74d0:	e7f6      	b.n	74c0 <mpu_configure_regions+0x58>
		return REGION_4G;
    74d2:	243e      	movs	r4, #62	; 0x3e
    74d4:	e7f4      	b.n	74c0 <mpu_configure_regions+0x58>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    74d6:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    74da:	4315      	orrs	r5, r2
    74dc:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    74e0:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
    74e4:	60ba      	str	r2, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    74e6:	60fd      	str	r5, [r7, #12]
		reg_index++;
    74e8:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    74ea:	613c      	str	r4, [r7, #16]
	for (i = 0; i < regions_num; i++) {
    74ec:	3601      	adds	r6, #1
    74ee:	300c      	adds	r0, #12
    74f0:	e7bd      	b.n	746e <mpu_configure_regions+0x6>
    74f2:	bf00      	nop
    74f4:	e000ed90 	.word	0xe000ed90
    74f8:	0003050f 	.word	0x0003050f
    74fc:	00030537 	.word	0x00030537

00007500 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    7500:	4b03      	ldr	r3, [pc, #12]	; (7510 <arm_core_mpu_enable+0x10>)
    7502:	2205      	movs	r2, #5
    7504:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    7506:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    750a:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    750e:	4770      	bx	lr
    7510:	e000ed90 	.word	0xe000ed90

00007514 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    7514:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    7518:	4b01      	ldr	r3, [pc, #4]	; (7520 <arm_core_mpu_disable+0xc>)
    751a:	2200      	movs	r2, #0
    751c:	605a      	str	r2, [r3, #4]
}
    751e:	4770      	bx	lr
    7520:	e000ed90 	.word	0xe000ed90

00007524 <arm_mpu_init>:
 */
static int arm_mpu_init(const struct device *arg)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    7524:	4920      	ldr	r1, [pc, #128]	; (75a8 <arm_mpu_init+0x84>)
{
    7526:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    7528:	680c      	ldr	r4, [r1, #0]
    752a:	2c08      	cmp	r4, #8
    752c:	d90d      	bls.n	754a <arm_mpu_init+0x26>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    752e:	f240 123f 	movw	r2, #319	; 0x13f
    7532:	491e      	ldr	r1, [pc, #120]	; (75ac <arm_mpu_init+0x88>)
    7534:	481e      	ldr	r0, [pc, #120]	; (75b0 <arm_mpu_init+0x8c>)
    7536:	f01f fd1a 	bl	26f6e <printk>
    753a:	481c      	ldr	r0, [pc, #112]	; (75ac <arm_mpu_init+0x88>)
    753c:	f240 113f 	movw	r1, #319	; 0x13f
    7540:	f01f ff8e 	bl	27460 <assert_post_action>
    7544:	f04f 30ff 	mov.w	r0, #4294967295
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
}
    7548:	bd10      	pop	{r4, pc}
	arm_core_mpu_disable();
    754a:	f7ff ffe3 	bl	7514 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    754e:	6848      	ldr	r0, [r1, #4]
    7550:	4918      	ldr	r1, [pc, #96]	; (75b4 <arm_mpu_init+0x90>)
    7552:	2200      	movs	r2, #0
    7554:	4294      	cmp	r4, r2
    7556:	f100 000c 	add.w	r0, r0, #12
    755a:	d115      	bne.n	7588 <arm_mpu_init+0x64>
	static_regions_num = mpu_config.num_regions;
    755c:	4b16      	ldr	r3, [pc, #88]	; (75b8 <arm_mpu_init+0x94>)
    755e:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    7560:	f7ff ffce 	bl	7500 <arm_core_mpu_enable>
	__ASSERT(
    7564:	680b      	ldr	r3, [r1, #0]
    7566:	f3c3 2307 	ubfx	r3, r3, #8, #8
    756a:	2b08      	cmp	r3, #8
    756c:	d00a      	beq.n	7584 <arm_mpu_init+0x60>
    756e:	490f      	ldr	r1, [pc, #60]	; (75ac <arm_mpu_init+0x88>)
    7570:	480f      	ldr	r0, [pc, #60]	; (75b0 <arm_mpu_init+0x8c>)
    7572:	f44f 72b2 	mov.w	r2, #356	; 0x164
    7576:	f01f fcfa 	bl	26f6e <printk>
    757a:	f44f 71b2 	mov.w	r1, #356	; 0x164
    757e:	480b      	ldr	r0, [pc, #44]	; (75ac <arm_mpu_init+0x88>)
    7580:	f01f ff6e 	bl	27460 <assert_post_action>
	return 0;
    7584:	2000      	movs	r0, #0
    7586:	e7df      	b.n	7548 <arm_mpu_init+0x24>
	MPU->RNR = index;
    7588:	608a      	str	r2, [r1, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    758a:	f850 3c0c 	ldr.w	r3, [r0, #-12]
    758e:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    7592:	4313      	orrs	r3, r2
    7594:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    7598:	60cb      	str	r3, [r1, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    759a:	f850 3c04 	ldr.w	r3, [r0, #-4]
    759e:	f043 0301 	orr.w	r3, r3, #1
    75a2:	610b      	str	r3, [r1, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    75a4:	3201      	adds	r2, #1
    75a6:	e7d5      	b.n	7554 <arm_mpu_init+0x30>
    75a8:	0002eafc 	.word	0x0002eafc
    75ac:	000304cf 	.word	0x000304cf
    75b0:	0002fa94 	.word	0x0002fa94
    75b4:	e000ed90 	.word	0xe000ed90
    75b8:	200046de 	.word	0x200046de

000075bc <arm_core_mpu_configure_static_mpu_regions>:
{
    75bc:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    75be:	4c0b      	ldr	r4, [pc, #44]	; (75ec <arm_core_mpu_configure_static_mpu_regions+0x30>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    75c0:	2301      	movs	r3, #1
    75c2:	7822      	ldrb	r2, [r4, #0]
    75c4:	f7ff ff50 	bl	7468 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    75c8:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    75ca:	3016      	adds	r0, #22
    75cc:	d10c      	bne.n	75e8 <arm_core_mpu_configure_static_mpu_regions+0x2c>
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    75ce:	4908      	ldr	r1, [pc, #32]	; (75f0 <arm_core_mpu_configure_static_mpu_regions+0x34>)
    75d0:	4808      	ldr	r0, [pc, #32]	; (75f4 <arm_core_mpu_configure_static_mpu_regions+0x38>)
    75d2:	f240 1205 	movw	r2, #261	; 0x105
    75d6:	f01f fcca 	bl	26f6e <printk>
    75da:	f240 1105 	movw	r1, #261	; 0x105
    75de:	4804      	ldr	r0, [pc, #16]	; (75f0 <arm_core_mpu_configure_static_mpu_regions+0x34>)
}
    75e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    75e4:	f01f bf3c 	b.w	27460 <assert_post_action>
}
    75e8:	bd10      	pop	{r4, pc}
    75ea:	bf00      	nop
    75ec:	200046de 	.word	0x200046de
    75f0:	000304cf 	.word	0x000304cf
    75f4:	0002fa94 	.word	0x0002fa94

000075f8 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    75f8:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    75fa:	4a0f      	ldr	r2, [pc, #60]	; (7638 <arm_core_mpu_configure_dynamic_mpu_regions+0x40>)
    75fc:	2300      	movs	r3, #0
    75fe:	7812      	ldrb	r2, [r2, #0]
    7600:	f7ff ff32 	bl	7468 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    7604:	f110 0f16 	cmn.w	r0, #22
    7608:	d008      	beq.n	761c <arm_core_mpu_configure_dynamic_mpu_regions+0x24>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    760a:	4b0c      	ldr	r3, [pc, #48]	; (763c <arm_core_mpu_configure_dynamic_mpu_regions+0x44>)
  MPU->RASR = 0U;
    760c:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    760e:	2807      	cmp	r0, #7
    7610:	dd00      	ble.n	7614 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
}
    7612:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    7614:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
    7616:	611a      	str	r2, [r3, #16]
    7618:	3001      	adds	r0, #1
    761a:	e7f8      	b.n	760e <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    761c:	4908      	ldr	r1, [pc, #32]	; (7640 <arm_core_mpu_configure_dynamic_mpu_regions+0x48>)
    761e:	4809      	ldr	r0, [pc, #36]	; (7644 <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>)
    7620:	f44f 7292 	mov.w	r2, #292	; 0x124
    7624:	f01f fca3 	bl	26f6e <printk>
    7628:	f44f 7192 	mov.w	r1, #292	; 0x124
    762c:	4804      	ldr	r0, [pc, #16]	; (7640 <arm_core_mpu_configure_dynamic_mpu_regions+0x48>)
}
    762e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    7632:	f01f bf15 	b.w	27460 <assert_post_action>
    7636:	bf00      	nop
    7638:	200046de 	.word	0x200046de
    763c:	e000ed90 	.word	0xe000ed90
    7640:	000304cf 	.word	0x000304cf
    7644:	0002fa94 	.word	0x0002fa94

00007648 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
    7648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i = 0;

	for (i = 0; i < nbytes; i++) {
		*(buf + i) = _stdin_hook();
    764a:	4f08      	ldr	r7, [pc, #32]	; (766c <z_impl_zephyr_read_stdin+0x24>)
{
    764c:	4606      	mov	r6, r0
    764e:	460d      	mov	r5, r1
	for (i = 0; i < nbytes; i++) {
    7650:	2400      	movs	r4, #0
    7652:	42ac      	cmp	r4, r5
    7654:	da08      	bge.n	7668 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
    7656:	683b      	ldr	r3, [r7, #0]
    7658:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    765a:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
    765c:	5530      	strb	r0, [r6, r4]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    765e:	f104 0401 	add.w	r4, r4, #1
    7662:	d001      	beq.n	7668 <z_impl_zephyr_read_stdin+0x20>
    7664:	280d      	cmp	r0, #13
    7666:	d1f4      	bne.n	7652 <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
    7668:	4620      	mov	r0, r4
    766a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    766c:	200006fc 	.word	0x200006fc

00007670 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/z_zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
    7670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7672:	4f0a      	ldr	r7, [pc, #40]	; (769c <z_impl_zephyr_write_stdout+0x2c>)
    7674:	460e      	mov	r6, r1
    7676:	1e44      	subs	r4, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
    7678:	f1c0 0501 	rsb	r5, r0, #1
    767c:	192b      	adds	r3, r5, r4
    767e:	429e      	cmp	r6, r3
    7680:	dc01      	bgt.n	7686 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
    7682:	4630      	mov	r0, r6
    7684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
    7686:	7863      	ldrb	r3, [r4, #1]
    7688:	2b0a      	cmp	r3, #10
    768a:	d102      	bne.n	7692 <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
    768c:	683b      	ldr	r3, [r7, #0]
    768e:	200d      	movs	r0, #13
    7690:	4798      	blx	r3
		_stdout_hook(*(buf + i));
    7692:	683b      	ldr	r3, [r7, #0]
    7694:	f814 0f01 	ldrb.w	r0, [r4, #1]!
    7698:	4798      	blx	r3
    769a:	e7ef      	b.n	767c <z_impl_zephyr_write_stdout+0xc>
    769c:	20000700 	.word	0x20000700

000076a0 <_sbrk>:
}

static LIBC_DATA SYS_SEM_DEFINE(heap_sem, 1, 1);

void *_sbrk(int count)
{
    76a0:	b538      	push	{r3, r4, r5, lr}
	void *ret, *ptr;

	/* coverity[CHECKED_RETURN] */
	sys_sem_take(&heap_sem, K_FOREVER);
    76a2:	f04f 32ff 	mov.w	r2, #4294967295
{
    76a6:	4605      	mov	r5, r0
	sys_sem_take(&heap_sem, K_FOREVER);
    76a8:	f04f 33ff 	mov.w	r3, #4294967295
    76ac:	480a      	ldr	r0, [pc, #40]	; (76d8 <_sbrk+0x38>)
    76ae:	f01f fcd1 	bl	27054 <sys_sem_take>

#if CONFIG_NEWLIB_LIBC_ALIGNED_HEAP_SIZE
	ptr = heap_base + heap_sz;
#else
	ptr = ((char *)HEAP_BASE) + heap_sz;
    76b2:	4a0a      	ldr	r2, [pc, #40]	; (76dc <_sbrk+0x3c>)
#endif

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    76b4:	490a      	ldr	r1, [pc, #40]	; (76e0 <_sbrk+0x40>)
	ptr = ((char *)HEAP_BASE) + heap_sz;
    76b6:	6814      	ldr	r4, [r2, #0]
	} else {
		ret = (void *)-1;
	}

	/* coverity[CHECKED_RETURN] */
	sys_sem_give(&heap_sem);
    76b8:	4807      	ldr	r0, [pc, #28]	; (76d8 <_sbrk+0x38>)
	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    76ba:	f1c1 5300 	rsb	r3, r1, #536870912	; 0x20000000
    76be:	4425      	add	r5, r4
    76c0:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    76c4:	429d      	cmp	r5, r3
	ptr = ((char *)HEAP_BASE) + heap_sz;
    76c6:	bf36      	itet	cc
    76c8:	1864      	addcc	r4, r4, r1
		ret = (void *)-1;
    76ca:	f04f 34ff 	movcs.w	r4, #4294967295
		heap_sz += count;
    76ce:	6015      	strcc	r5, [r2, #0]
	sys_sem_give(&heap_sem);
    76d0:	f01f fcbb 	bl	2704a <sys_sem_give>

	return ret;
}
    76d4:	4620      	mov	r0, r4
    76d6:	bd38      	pop	{r3, r4, r5, pc}
    76d8:	200012fc 	.word	0x200012fc
    76dc:	20002b68 	.word	0x20002b68
    76e0:	20009158 	.word	0x20009158

000076e4 <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
    76e4:	b508      	push	{r3, lr}
	return z_impl_zephyr_write_stdout(buf, nbytes);
    76e6:	211d      	movs	r1, #29
    76e8:	4804      	ldr	r0, [pc, #16]	; (76fc <__chk_fail+0x18>)
    76ea:	f7ff ffc1 	bl	7670 <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
    76ee:	4040      	eors	r0, r0
    76f0:	f380 8811 	msr	BASEPRI, r0
    76f4:	f04f 0003 	mov.w	r0, #3
    76f8:	df02      	svc	2
	CODE_UNREACHABLE;
    76fa:	bf00      	nop
    76fc:	00030562 	.word	0x00030562

00007700 <nordicsemi_nrf52_init>:
    7700:	f04f 0320 	mov.w	r3, #32
    7704:	f3ef 8211 	mrs	r2, BASEPRI
    7708:	f383 8811 	msr	BASEPRI, r3
    770c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    7710:	4906      	ldr	r1, [pc, #24]	; (772c <nordicsemi_nrf52_init+0x2c>)
    7712:	2301      	movs	r3, #1
    7714:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    7718:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    771c:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    7720:	f382 8811 	msr	BASEPRI, r2
    7724:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    7728:	2000      	movs	r0, #0
    772a:	4770      	bx	lr
    772c:	4001e000 	.word	0x4001e000

00007730 <sys_arch_reboot>:
    *p_gpregret = val;
    7730:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7734:	b2c0      	uxtb	r0, r0
    7736:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    773a:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    773e:	4905      	ldr	r1, [pc, #20]	; (7754 <sys_arch_reboot+0x24>)
    7740:	4b05      	ldr	r3, [pc, #20]	; (7758 <sys_arch_reboot+0x28>)
    7742:	68ca      	ldr	r2, [r1, #12]
    7744:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    7748:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    774a:	60cb      	str	r3, [r1, #12]
    774c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    7750:	bf00      	nop
    7752:	e7fd      	b.n	7750 <sys_arch_reboot+0x20>
    7754:	e000ed00 	.word	0xe000ed00
    7758:	05fa0004 	.word	0x05fa0004

0000775c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    775c:	b120      	cbz	r0, 7768 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    775e:	4b03      	ldr	r3, [pc, #12]	; (776c <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    7760:	0180      	lsls	r0, r0, #6
    7762:	f043 0301 	orr.w	r3, r3, #1
    7766:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    7768:	4770      	bx	lr
    776a:	bf00      	nop
    776c:	0002e750 	.word	0x0002e750

00007770 <board_nrf52840dongle_nrf52840_init>:

#if NRF_POWER_HAS_MAINREGSTATUS
NRF_STATIC_INLINE
nrf_power_mainregstatus_t nrf_power_mainregstatus_get(NRF_POWER_Type const * p_reg)
{
    return (nrf_power_mainregstatus_t)(((p_reg->MAINREGSTATUS) &
    7770:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7774:	f8d3 3640 	ldr.w	r3, [r3, #1600]	; 0x640
	/* if the nrf52840dongle_nrf52840 board is powered from USB
	 * (high voltage mode), GPIO output voltage is set to 1.8 volts by
	 * default and that is not enough to turn the green and blue LEDs on.
	 * Increase GPIO voltage to 3.0 volts.
	 */
	if ((nrf_power_mainregstatus_get(NRF_POWER) ==
    7778:	07db      	lsls	r3, r3, #31
    777a:	d52e      	bpl.n	77da <board_nrf52840dongle_nrf52840_init+0x6a>
	     NRF_POWER_MAINREGSTATUS_HIGH) &&
	    ((NRF_UICR->REGOUT0 & UICR_REGOUT0_VOUT_Msk) ==
    777c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    7780:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
    7784:	f003 0307 	and.w	r3, r3, #7
	     NRF_POWER_MAINREGSTATUS_HIGH) &&
    7788:	2b07      	cmp	r3, #7
    778a:	d126      	bne.n	77da <board_nrf52840dongle_nrf52840_init+0x6a>
	     (UICR_REGOUT0_VOUT_DEFAULT << UICR_REGOUT0_VOUT_Pos))) {

		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    778c:	4b14      	ldr	r3, [pc, #80]	; (77e0 <board_nrf52840dongle_nrf52840_init+0x70>)
    778e:	2201      	movs	r2, #1
    7790:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
    7794:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    7798:	2a00      	cmp	r2, #0
    779a:	d0fb      	beq.n	7794 <board_nrf52840dongle_nrf52840_init+0x24>
			;
		}

		NRF_UICR->REGOUT0 =
		    (NRF_UICR->REGOUT0 & ~((uint32_t)UICR_REGOUT0_VOUT_Msk)) |
    779c:	f04f 2110 	mov.w	r1, #268439552	; 0x10001000
    77a0:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
    77a4:	f022 0207 	bic.w	r2, r2, #7
    77a8:	f042 0204 	orr.w	r2, r2, #4
		NRF_UICR->REGOUT0 =
    77ac:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
		    (UICR_REGOUT0_VOUT_3V0 << UICR_REGOUT0_VOUT_Pos);

		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    77b0:	2200      	movs	r2, #0
    77b2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
    77b6:	4a0a      	ldr	r2, [pc, #40]	; (77e0 <board_nrf52840dongle_nrf52840_init+0x70>)
    77b8:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    77bc:	2b00      	cmp	r3, #0
    77be:	d0fb      	beq.n	77b8 <board_nrf52840dongle_nrf52840_init+0x48>
    77c0:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    77c4:	4907      	ldr	r1, [pc, #28]	; (77e4 <board_nrf52840dongle_nrf52840_init+0x74>)
    77c6:	4b08      	ldr	r3, [pc, #32]	; (77e8 <board_nrf52840dongle_nrf52840_init+0x78>)
    77c8:	68ca      	ldr	r2, [r1, #12]
    77ca:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    77ce:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    77d0:	60cb      	str	r3, [r1, #12]
    77d2:	f3bf 8f4f 	dsb	sy
    __NOP();
    77d6:	bf00      	nop
    77d8:	e7fd      	b.n	77d6 <board_nrf52840dongle_nrf52840_init+0x66>
		/* a reset is required for changes to take effect */
		NVIC_SystemReset();
	}

	return 0;
}
    77da:	2000      	movs	r0, #0
    77dc:	4770      	bx	lr
    77de:	bf00      	nop
    77e0:	4001e000 	.word	0x4001e000
    77e4:	e000ed00 	.word	0xe000ed00
    77e8:	05fa0004 	.word	0x05fa0004

000077ec <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    77ec:	2940      	cmp	r1, #64	; 0x40
    77ee:	4b0e      	ldr	r3, [pc, #56]	; (7828 <bt_hex_real+0x3c>)
{
    77f0:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
    77f2:	bf28      	it	cs
    77f4:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    77f6:	4c0d      	ldr	r4, [pc, #52]	; (782c <bt_hex_real+0x40>)
    77f8:	1846      	adds	r6, r0, r1
    77fa:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
    77fc:	42b0      	cmp	r0, r6
    77fe:	f103 0302 	add.w	r3, r3, #2
    7802:	d104      	bne.n	780e <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    7804:	2300      	movs	r3, #0
    7806:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
    780a:	4807      	ldr	r0, [pc, #28]	; (7828 <bt_hex_real+0x3c>)
    780c:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    780e:	7802      	ldrb	r2, [r0, #0]
    7810:	0912      	lsrs	r2, r2, #4
    7812:	5ca2      	ldrb	r2, [r4, r2]
    7814:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    7818:	f810 2b01 	ldrb.w	r2, [r0], #1
    781c:	f002 020f 	and.w	r2, r2, #15
    7820:	5ca2      	ldrb	r2, [r4, r2]
    7822:	f803 2c01 	strb.w	r2, [r3, #-1]
    7826:	e7e9      	b.n	77fc <bt_hex_real+0x10>
    7828:	200046df 	.word	0x200046df
    782c:	000305df 	.word	0x000305df

00007830 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
    7830:	b530      	push	{r4, r5, lr}
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    7832:	7803      	ldrb	r3, [r0, #0]
    7834:	b08b      	sub	sp, #44	; 0x2c
    7836:	4604      	mov	r4, r0
    7838:	ad07      	add	r5, sp, #28
    783a:	2b03      	cmp	r3, #3
    783c:	d821      	bhi.n	7882 <bt_addr_le_str_real+0x52>
    783e:	e8df f003 	tbb	[pc, r3]
    7842:	1a02      	.short	0x1a02
    7844:	1e1c      	.short	0x1e1c
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    7846:	4912      	ldr	r1, [pc, #72]	; (7890 <bt_addr_le_str_real+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    7848:	4628      	mov	r0, r5
    784a:	f026 f804 	bl	2d856 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    784e:	7863      	ldrb	r3, [r4, #1]
    7850:	9304      	str	r3, [sp, #16]
    7852:	78a3      	ldrb	r3, [r4, #2]
    7854:	9303      	str	r3, [sp, #12]
    7856:	78e3      	ldrb	r3, [r4, #3]
    7858:	9302      	str	r3, [sp, #8]
    785a:	7923      	ldrb	r3, [r4, #4]
    785c:	9301      	str	r3, [sp, #4]
    785e:	7963      	ldrb	r3, [r4, #5]
    7860:	9300      	str	r3, [sp, #0]
    7862:	9505      	str	r5, [sp, #20]
    7864:	79a3      	ldrb	r3, [r4, #6]
    7866:	4a0b      	ldr	r2, [pc, #44]	; (7894 <bt_addr_le_str_real+0x64>)
    7868:	480b      	ldr	r0, [pc, #44]	; (7898 <bt_addr_le_str_real+0x68>)
    786a:	211e      	movs	r1, #30
    786c:	f01f fb8c 	bl	26f88 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    7870:	4809      	ldr	r0, [pc, #36]	; (7898 <bt_addr_le_str_real+0x68>)
    7872:	b00b      	add	sp, #44	; 0x2c
    7874:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    7876:	4909      	ldr	r1, [pc, #36]	; (789c <bt_addr_le_str_real+0x6c>)
    7878:	e7e6      	b.n	7848 <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
    787a:	4909      	ldr	r1, [pc, #36]	; (78a0 <bt_addr_le_str_real+0x70>)
    787c:	e7e4      	b.n	7848 <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
    787e:	4909      	ldr	r1, [pc, #36]	; (78a4 <bt_addr_le_str_real+0x74>)
    7880:	e7e2      	b.n	7848 <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    7882:	4a09      	ldr	r2, [pc, #36]	; (78a8 <bt_addr_le_str_real+0x78>)
    7884:	210a      	movs	r1, #10
    7886:	4628      	mov	r0, r5
    7888:	f01f fb7e 	bl	26f88 <snprintk>
		break;
    788c:	e7df      	b.n	784e <bt_addr_le_str_real+0x1e>
    788e:	bf00      	nop
    7890:	00030593 	.word	0x00030593
    7894:	000305bc 	.word	0x000305bc
    7898:	20004760 	.word	0x20004760
    789c:	0003059a 	.word	0x0003059a
    78a0:	000305a1 	.word	0x000305a1
    78a4:	000305ab 	.word	0x000305ab
    78a8:	000305b5 	.word	0x000305b5

000078ac <sys_memcpy_swap.constprop.2>:
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
{
	uint8_t *pdst = (uint8_t *)dst;
	const uint8_t *psrc = (const uint8_t *)src;

	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
    78ac:	4288      	cmp	r0, r1
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
    78ae:	b570      	push	{r4, r5, r6, lr}
    78b0:	4604      	mov	r4, r0
    78b2:	460e      	mov	r6, r1
    78b4:	f101 0520 	add.w	r5, r1, #32
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
    78b8:	d915      	bls.n	78e6 <sys_memcpy_swap.constprop.2+0x3a>
    78ba:	42a8      	cmp	r0, r5
    78bc:	d20a      	bcs.n	78d4 <sys_memcpy_swap.constprop.2+0x28>
    78be:	490c      	ldr	r1, [pc, #48]	; (78f0 <sys_memcpy_swap.constprop.2+0x44>)
    78c0:	480c      	ldr	r0, [pc, #48]	; (78f4 <sys_memcpy_swap.constprop.2+0x48>)
    78c2:	f240 2219 	movw	r2, #537	; 0x219
    78c6:	f01f fb52 	bl	26f6e <printk>
    78ca:	f240 2119 	movw	r1, #537	; 0x219
    78ce:	4808      	ldr	r0, [pc, #32]	; (78f0 <sys_memcpy_swap.constprop.2+0x44>)
    78d0:	f01f fdc6 	bl	27460 <assert_post_action>
		  (psrc > pdst && (pdst + length) <= psrc)),
		 "Source and destination buffers must not overlap");

	psrc += length - 1;

	for (; length > 0; length--) {
    78d4:	462b      	mov	r3, r5
    78d6:	3c01      	subs	r4, #1
		*pdst++ = *psrc--;
    78d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    78dc:	f804 2f01 	strb.w	r2, [r4, #1]!
	for (; length > 0; length--) {
    78e0:	42b3      	cmp	r3, r6
    78e2:	d1f9      	bne.n	78d8 <sys_memcpy_swap.constprop.2+0x2c>
	}
}
    78e4:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
    78e6:	d0ea      	beq.n	78be <sys_memcpy_swap.constprop.2+0x12>
    78e8:	f100 0320 	add.w	r3, r0, #32
    78ec:	4299      	cmp	r1, r3
    78ee:	e7e5      	b.n	78bc <sys_memcpy_swap.constprop.2+0x10>
    78f0:	000306a9 	.word	0x000306a9
    78f4:	0002fa94 	.word	0x0002fa94

000078f8 <ecc_thread>:

	bt_recv(buf);
}

static void ecc_thread(void *p1, void *p2, void *p3)
{
    78f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    78fc:	4e60      	ldr	r6, [pc, #384]	; (7a80 <ecc_thread+0x188>)
	return z_impl_k_sem_take(sem, timeout);
    78fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 7aa8 <ecc_thread+0x1b0>
    7902:	4635      	mov	r5, r6
    7904:	f04f 32ff 	mov.w	r2, #4294967295
    7908:	f04f 33ff 	mov.w	r3, #4294967295
    790c:	4640      	mov	r0, r8
    790e:	f01c f811 	bl	23934 <z_impl_k_sem_take>
    7912:	f3bf 8f5b 	dmb	ish
    7916:	6834      	ldr	r4, [r6, #0]
    7918:	f3bf 8f5b 	dmb	ish
	while (true) {
		k_sem_take(&cmd_sem, K_FOREVER);

		if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    791c:	f014 0401 	ands.w	r4, r4, #1
    7920:	d054      	beq.n	79cc <ecc_thread+0xd4>
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
    7922:	f8df 9174 	ldr.w	r9, [pc, #372]	; 7a98 <ecc_thread+0x1a0>
    7926:	4c57      	ldr	r4, [pc, #348]	; (7a84 <ecc_thread+0x18c>)
	} while (memcmp(ecc.private_key_be, debug_private_key_be, 32) == 0);
    7928:	4f57      	ldr	r7, [pc, #348]	; (7a88 <ecc_thread+0x190>)
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
    792a:	4858      	ldr	r0, [pc, #352]	; (7a8c <ecc_thread+0x194>)
    792c:	464a      	mov	r2, r9
    792e:	4621      	mov	r1, r4
    7930:	f020 f8c3 	bl	27aba <uECC_make_key>
		if (rc == TC_CRYPTO_FAIL) {
    7934:	bbc0      	cbnz	r0, 79a8 <ecc_thread+0xb0>
			BT_ERR("Failed to create ECC public/private pair");
    7936:	2145      	movs	r1, #69	; 0x45
    7938:	4855      	ldr	r0, [pc, #340]	; (7a90 <ecc_thread+0x198>)
    793a:	f01f fb18 	bl	26f6e <printk>
			return BT_HCI_ERR_UNSPECIFIED;
    793e:	241f      	movs	r4, #31
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    7940:	f04f 32ff 	mov.w	r2, #4294967295
    7944:	f04f 33ff 	mov.w	r3, #4294967295
    7948:	2001      	movs	r0, #1
    794a:	f000 fa97 	bl	7e7c <bt_buf_get_rx>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
    794e:	f100 0708 	add.w	r7, r0, #8
    7952:	2102      	movs	r1, #2
    7954:	4681      	mov	r9, r0
    7956:	4638      	mov	r0, r7
    7958:	f017 fc4c 	bl	1f1f4 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    795c:	233e      	movs	r3, #62	; 0x3e
    795e:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    7960:	2342      	movs	r3, #66	; 0x42
    7962:	7043      	strb	r3, [r0, #1]
    7964:	2101      	movs	r1, #1
    7966:	4638      	mov	r0, r7
    7968:	f017 fc44 	bl	1f1f4 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
    796c:	2308      	movs	r3, #8
    796e:	7003      	strb	r3, [r0, #0]
    7970:	2141      	movs	r1, #65	; 0x41
    7972:	4638      	mov	r0, r7
    7974:	f017 fc3e 	bl	1f1f4 <net_buf_simple_add>
    7978:	4607      	mov	r7, r0
	evt->status = status;
    797a:	f800 4b01 	strb.w	r4, [r0], #1
	if (status) {
    797e:	b1e4      	cbz	r4, 79ba <ecc_thread+0xc2>
    7980:	2240      	movs	r2, #64	; 0x40
    7982:	2100      	movs	r1, #0
    7984:	f025 fe39 	bl	2d5fa <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7988:	f3bf 8f5b 	dmb	ish
    798c:	e855 3f00 	ldrex	r3, [r5]
    7990:	f023 0301 	bic.w	r3, r3, #1
    7994:	e845 3200 	strex	r2, r3, [r5]
    7998:	2a00      	cmp	r2, #0
    799a:	d1f7      	bne.n	798c <ecc_thread+0x94>
    799c:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
    79a0:	4648      	mov	r0, r9
    79a2:	f001 fb61 	bl	9068 <bt_recv>
    79a6:	e7ad      	b.n	7904 <ecc_thread+0xc>
	} while (memcmp(ecc.private_key_be, debug_private_key_be, 32) == 0);
    79a8:	2220      	movs	r2, #32
    79aa:	4639      	mov	r1, r7
    79ac:	4620      	mov	r0, r4
    79ae:	f025 fddb 	bl	2d568 <memcmp>
    79b2:	2800      	cmp	r0, #0
    79b4:	d0b9      	beq.n	792a <ecc_thread+0x32>
	return 0;
    79b6:	2400      	movs	r4, #0
    79b8:	e7c2      	b.n	7940 <ecc_thread+0x48>
		sys_memcpy_swap(evt->key, ecc.public_key_be, 32);
    79ba:	4934      	ldr	r1, [pc, #208]	; (7a8c <ecc_thread+0x194>)
    79bc:	f7ff ff76 	bl	78ac <sys_memcpy_swap.constprop.2>
		sys_memcpy_swap(&evt->key[32], &ecc.public_key_be[32], 32);
    79c0:	4934      	ldr	r1, [pc, #208]	; (7a94 <ecc_thread+0x19c>)
    79c2:	f107 0021 	add.w	r0, r7, #33	; 0x21
    79c6:	f7ff ff71 	bl	78ac <sys_memcpy_swap.constprop.2>
    79ca:	e7dd      	b.n	7988 <ecc_thread+0x90>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    79cc:	f3bf 8f5b 	dmb	ish
    79d0:	6833      	ldr	r3, [r6, #0]
    79d2:	f3bf 8f5b 	dmb	ish
			emulate_le_p256_public_key_cmd();
		} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
    79d6:	079b      	lsls	r3, r3, #30
    79d8:	d548      	bpl.n	7a6c <ecc_thread+0x174>
	ret = uECC_valid_public_key(ecc.public_key_be, &curve_secp256r1);
    79da:	492f      	ldr	r1, [pc, #188]	; (7a98 <ecc_thread+0x1a0>)
    79dc:	482b      	ldr	r0, [pc, #172]	; (7a8c <ecc_thread+0x194>)
    79de:	f020 ff38 	bl	28852 <uECC_valid_public_key>
	if (ret < 0) {
    79e2:	1e02      	subs	r2, r0, #0
    79e4:	da33      	bge.n	7a4e <ecc_thread+0x156>
		BT_ERR("public key is not valid (ret %d)", ret);
    79e6:	2145      	movs	r1, #69	; 0x45
    79e8:	482c      	ldr	r0, [pc, #176]	; (7a9c <ecc_thread+0x1a4>)
    79ea:	f01f fac0 	bl	26f6e <printk>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    79ee:	f04f 32ff 	mov.w	r2, #4294967295
    79f2:	f04f 33ff 	mov.w	r3, #4294967295
    79f6:	2001      	movs	r0, #1
    79f8:	f000 fa40 	bl	7e7c <bt_buf_get_rx>
    79fc:	f100 0708 	add.w	r7, r0, #8
    7a00:	2102      	movs	r1, #2
    7a02:	4681      	mov	r9, r0
    7a04:	4638      	mov	r0, r7
    7a06:	f017 fbf5 	bl	1f1f4 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    7a0a:	233e      	movs	r3, #62	; 0x3e
    7a0c:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    7a0e:	2322      	movs	r3, #34	; 0x22
    7a10:	7043      	strb	r3, [r0, #1]
    7a12:	2101      	movs	r1, #1
    7a14:	4638      	mov	r0, r7
    7a16:	f017 fbed 	bl	1f1f4 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
    7a1a:	2309      	movs	r3, #9
    7a1c:	7003      	strb	r3, [r0, #0]
    7a1e:	2121      	movs	r1, #33	; 0x21
    7a20:	4638      	mov	r0, r7
    7a22:	f017 fbe7 	bl	1f1f4 <net_buf_simple_add>
    7a26:	4603      	mov	r3, r0
	if (ret == TC_CRYPTO_FAIL) {
    7a28:	3001      	adds	r0, #1
    7a2a:	b9cc      	cbnz	r4, 7a60 <ecc_thread+0x168>
		evt->status = BT_HCI_ERR_UNSPECIFIED;
    7a2c:	221f      	movs	r2, #31
    7a2e:	701a      	strb	r2, [r3, #0]
    7a30:	21ff      	movs	r1, #255	; 0xff
    7a32:	2220      	movs	r2, #32
    7a34:	f025 fde1 	bl	2d5fa <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7a38:	f3bf 8f5b 	dmb	ish
    7a3c:	e855 3f00 	ldrex	r3, [r5]
    7a40:	f023 0302 	bic.w	r3, r3, #2
    7a44:	e845 3200 	strex	r2, r3, [r5]
    7a48:	2a00      	cmp	r2, #0
    7a4a:	d0a7      	beq.n	799c <ecc_thread+0xa4>
    7a4c:	e7f6      	b.n	7a3c <ecc_thread+0x144>
		ret = uECC_shared_secret(ecc.public_key_be, ecc.private_key_be,
    7a4e:	4a0f      	ldr	r2, [pc, #60]	; (7a8c <ecc_thread+0x194>)
    7a50:	4b11      	ldr	r3, [pc, #68]	; (7a98 <ecc_thread+0x1a0>)
    7a52:	f1a2 0120 	sub.w	r1, r2, #32
    7a56:	4610      	mov	r0, r2
    7a58:	f020 f87c 	bl	27b54 <uECC_shared_secret>
    7a5c:	4604      	mov	r4, r0
    7a5e:	e7c6      	b.n	79ee <ecc_thread+0xf6>
		evt->status = 0U;
    7a60:	2200      	movs	r2, #0
    7a62:	701a      	strb	r2, [r3, #0]
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
    7a64:	4909      	ldr	r1, [pc, #36]	; (7a8c <ecc_thread+0x194>)
    7a66:	f7ff ff21 	bl	78ac <sys_memcpy_swap.constprop.2>
    7a6a:	e7e5      	b.n	7a38 <ecc_thread+0x140>
			emulate_le_generate_dhkey();
		} else {
			__ASSERT(0, "Unhandled ECC command");
    7a6c:	22e0      	movs	r2, #224	; 0xe0
    7a6e:	490c      	ldr	r1, [pc, #48]	; (7aa0 <ecc_thread+0x1a8>)
    7a70:	480c      	ldr	r0, [pc, #48]	; (7aa4 <ecc_thread+0x1ac>)
    7a72:	f01f fa7c 	bl	26f6e <printk>
    7a76:	21e0      	movs	r1, #224	; 0xe0
    7a78:	4809      	ldr	r0, [pc, #36]	; (7aa0 <ecc_thread+0x1a8>)
    7a7a:	f01f fcf1 	bl	27460 <assert_post_action>
    7a7e:	e741      	b.n	7904 <ecc_thread+0xc>
    7a80:	20002b6c 	.word	0x20002b6c
    7a84:	2000477e 	.word	0x2000477e
    7a88:	000305f7 	.word	0x000305f7
    7a8c:	2000479e 	.word	0x2000479e
    7a90:	00030617 	.word	0x00030617
    7a94:	200047be 	.word	0x200047be
    7a98:	0002eb1c 	.word	0x0002eb1c
    7a9c:	00030645 	.word	0x00030645
    7aa0:	0003066b 	.word	0x0003066b
    7aa4:	0002fa94 	.word	0x0002fa94
    7aa8:	200012e4 	.word	0x200012e4

00007aac <bt_hci_ecc_send>:

	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
}

int bt_hci_ecc_send(struct net_buf *buf)
{
    7aac:	b570      	push	{r4, r5, r6, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    7aae:	7d05      	ldrb	r5, [r0, #20]
    7ab0:	4604      	mov	r4, r0
	if (bt_buf_get_type(buf) == BT_BUF_CMD) {
    7ab2:	b9ad      	cbnz	r5, 7ae0 <bt_hci_ecc_send+0x34>
		struct bt_hci_cmd_hdr *chdr = (void *)buf->data;
    7ab4:	6883      	ldr	r3, [r0, #8]

		switch (sys_le16_to_cpu(chdr->opcode)) {
    7ab6:	881a      	ldrh	r2, [r3, #0]
    7ab8:	f242 0125 	movw	r1, #8229	; 0x2025
    7abc:	428a      	cmp	r2, r1
    7abe:	d017      	beq.n	7af0 <bt_hci_ecc_send+0x44>
    7ac0:	f242 0126 	movw	r1, #8230	; 0x2026
    7ac4:	428a      	cmp	r2, r1
    7ac6:	d03c      	beq.n	7b42 <bt_hci_ecc_send+0x96>
    7ac8:	f242 0101 	movw	r1, #8193	; 0x2001
    7acc:	428a      	cmp	r2, r1
    7ace:	d107      	bne.n	7ae0 <bt_hci_ecc_send+0x34>
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
    7ad0:	78da      	ldrb	r2, [r3, #3]
    7ad2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    7ad6:	70da      	strb	r2, [r3, #3]
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
    7ad8:	791a      	ldrb	r2, [r3, #4]
    7ada:	f022 0201 	bic.w	r2, r2, #1
    7ade:	711a      	strb	r2, [r3, #4]
		default:
			break;
		}
	}

	return bt_dev.drv->send(buf);
    7ae0:	4b32      	ldr	r3, [pc, #200]	; (7bac <bt_hci_ecc_send+0x100>)
    7ae2:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    7ae6:	4620      	mov	r0, r4
    7ae8:	691b      	ldr	r3, [r3, #16]
}
    7aea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_dev.drv->send(buf);
    7aee:	4718      	bx	r3
 *
 * @return New beginning of the buffer data.
 */
static inline void *net_buf_pull(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull(&buf->b, len);
    7af0:	2103      	movs	r1, #3
    7af2:	3008      	adds	r0, #8
    7af4:	f017 fb44 	bl	1f180 <net_buf_simple_pull>
	net_buf_unref(buf);
    7af8:	4620      	mov	r0, r4
    7afa:	f017 fa2b 	bl	1ef54 <net_buf_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7afe:	f3bf 8f5b 	dmb	ish
    7b02:	4b2b      	ldr	r3, [pc, #172]	; (7bb0 <bt_hci_ecc_send+0x104>)
    7b04:	681a      	ldr	r2, [r3, #0]
    7b06:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_DHKEY)) {
    7b0a:	0790      	lsls	r0, r2, #30
    7b0c:	d507      	bpl.n	7b1e <bt_hci_ecc_send+0x72>
		status = BT_HCI_ERR_CMD_DISALLOWED;
    7b0e:	250c      	movs	r5, #12
	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
    7b10:	4629      	mov	r1, r5
    7b12:	f242 0025 	movw	r0, #8229	; 0x2025
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
    7b16:	f021 f8a7 	bl	28c68 <send_cmd_status>
}
    7b1a:	2000      	movs	r0, #0
    7b1c:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7b1e:	f3bf 8f5b 	dmb	ish
    7b22:	e853 2f00 	ldrex	r2, [r3]
    7b26:	f042 0101 	orr.w	r1, r2, #1
    7b2a:	e843 1000 	strex	r0, r1, [r3]
    7b2e:	2800      	cmp	r0, #0
    7b30:	d1f7      	bne.n	7b22 <bt_hci_ecc_send+0x76>
    7b32:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_and_set_bit(flags, PENDING_PUB_KEY)) {
    7b36:	07d1      	lsls	r1, r2, #31
    7b38:	d4e9      	bmi.n	7b0e <bt_hci_ecc_send+0x62>
	z_impl_k_sem_give(sem);
    7b3a:	481e      	ldr	r0, [pc, #120]	; (7bb4 <bt_hci_ecc_send+0x108>)
    7b3c:	f01b febe 	bl	238bc <z_impl_k_sem_give>
    7b40:	e7e6      	b.n	7b10 <bt_hci_ecc_send+0x64>
    7b42:	2103      	movs	r1, #3
    7b44:	3008      	adds	r0, #8
    7b46:	f017 fb1b 	bl	1f180 <net_buf_simple_pull>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7b4a:	f3bf 8f5b 	dmb	ish
    7b4e:	4b18      	ldr	r3, [pc, #96]	; (7bb0 <bt_hci_ecc_send+0x104>)
    7b50:	681a      	ldr	r2, [r3, #0]
    7b52:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    7b56:	07d2      	lsls	r2, r2, #31
    7b58:	d507      	bpl.n	7b6a <bt_hci_ecc_send+0xbe>
		status = BT_HCI_ERR_CMD_DISALLOWED;
    7b5a:	250c      	movs	r5, #12
	net_buf_unref(buf);
    7b5c:	4620      	mov	r0, r4
    7b5e:	f017 f9f9 	bl	1ef54 <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
    7b62:	4629      	mov	r1, r5
    7b64:	f242 0026 	movw	r0, #8230	; 0x2026
    7b68:	e7d5      	b.n	7b16 <bt_hci_ecc_send+0x6a>
	if (buf->len < sizeof(struct bt_hci_cp_le_generate_dhkey)) {
    7b6a:	89a2      	ldrh	r2, [r4, #12]
    7b6c:	2a3f      	cmp	r2, #63	; 0x3f
    7b6e:	d91b      	bls.n	7ba8 <bt_hci_ecc_send+0xfc>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7b70:	f3bf 8f5b 	dmb	ish
    7b74:	e853 2f00 	ldrex	r2, [r3]
    7b78:	f042 0102 	orr.w	r1, r2, #2
    7b7c:	e843 1000 	strex	r0, r1, [r3]
    7b80:	2800      	cmp	r0, #0
    7b82:	d1f7      	bne.n	7b74 <bt_hci_ecc_send+0xc8>
    7b84:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(flags, PENDING_DHKEY)) {
    7b88:	0793      	lsls	r3, r2, #30
    7b8a:	d4e6      	bmi.n	7b5a <bt_hci_ecc_send+0xae>
	cmd = (void *)buf->data;
    7b8c:	68a6      	ldr	r6, [r4, #8]
	sys_memcpy_swap(ecc.public_key_be, cmd->key, 32);
    7b8e:	480a      	ldr	r0, [pc, #40]	; (7bb8 <bt_hci_ecc_send+0x10c>)
    7b90:	4631      	mov	r1, r6
    7b92:	f7ff fe8b 	bl	78ac <sys_memcpy_swap.constprop.2>
	sys_memcpy_swap(&ecc.public_key_be[32], &cmd->key[32], 32);
    7b96:	f106 0120 	add.w	r1, r6, #32
    7b9a:	4808      	ldr	r0, [pc, #32]	; (7bbc <bt_hci_ecc_send+0x110>)
    7b9c:	f7ff fe86 	bl	78ac <sys_memcpy_swap.constprop.2>
    7ba0:	4804      	ldr	r0, [pc, #16]	; (7bb4 <bt_hci_ecc_send+0x108>)
    7ba2:	f01b fe8b 	bl	238bc <z_impl_k_sem_give>
    7ba6:	e7d9      	b.n	7b5c <bt_hci_ecc_send+0xb0>
		status = BT_HCI_ERR_INVALID_PARAM;
    7ba8:	2512      	movs	r5, #18
    7baa:	e7d7      	b.n	7b5c <bt_hci_ecc_send+0xb0>
    7bac:	200001c0 	.word	0x200001c0
    7bb0:	20002b6c 	.word	0x20002b6c
    7bb4:	200012e4 	.word	0x200012e4
    7bb8:	2000479e 	.word	0x2000479e
    7bbc:	200047be 	.word	0x200047be

00007bc0 <bt_hci_ecc_init>:
{
	return !bt_rand(dst, len);
}

void bt_hci_ecc_init(void)
{
    7bc0:	b510      	push	{r4, lr}
    7bc2:	b088      	sub	sp, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    7bc4:	4c0c      	ldr	r4, [pc, #48]	; (7bf8 <bt_hci_ecc_init+0x38>)
    7bc6:	490d      	ldr	r1, [pc, #52]	; (7bfc <bt_hci_ecc_init+0x3c>)
    7bc8:	2200      	movs	r2, #0
    7bca:	2300      	movs	r3, #0
    7bcc:	e9cd 2306 	strd	r2, r3, [sp, #24]
    7bd0:	2300      	movs	r3, #0
    7bd2:	220a      	movs	r2, #10
    7bd4:	e9cd 2303 	strd	r2, r3, [sp, #12]
    7bd8:	e9cd 3301 	strd	r3, r3, [sp, #4]
    7bdc:	9300      	str	r3, [sp, #0]
    7bde:	f44f 628a 	mov.w	r2, #1104	; 0x450
    7be2:	4b07      	ldr	r3, [pc, #28]	; (7c00 <bt_hci_ecc_init+0x40>)
    7be4:	4620      	mov	r0, r4
    7be6:	f01b ff99 	bl	23b1c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    7bea:	4906      	ldr	r1, [pc, #24]	; (7c04 <bt_hci_ecc_init+0x44>)
    7bec:	4620      	mov	r0, r4
	k_thread_create(&ecc_thread_data, ecc_thread_stack,
			K_KERNEL_STACK_SIZEOF(ecc_thread_stack), ecc_thread,
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecc_thread_data, "BT ECC");
}
    7bee:	b008      	add	sp, #32
    7bf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7bf4:	f025 bbab 	b.w	2d34e <z_impl_k_thread_name_set>
    7bf8:	20001540 	.word	0x20001540
    7bfc:	200048a0 	.word	0x200048a0
    7c00:	000078f9 	.word	0x000078f9
    7c04:	000305f0 	.word	0x000305f0

00007c08 <save_id>:
}

#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
    7c08:	b508      	push	{r3, lr}
	int err;
	BT_INFO("Saving ID");
    7c0a:	2149      	movs	r1, #73	; 0x49
    7c0c:	4809      	ldr	r0, [pc, #36]	; (7c34 <save_id+0x2c>)
    7c0e:	f01f f9ae 	bl	26f6e <printk>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
    7c12:	4909      	ldr	r1, [pc, #36]	; (7c38 <save_id+0x30>)
	err = settings_save_one("bt/id", &bt_dev.id_addr,
    7c14:	4809      	ldr	r0, [pc, #36]	; (7c3c <save_id+0x34>)
    7c16:	79ca      	ldrb	r2, [r1, #7]
    7c18:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    7c1c:	f7fe f802 	bl	5c24 <settings_save_one>
	if (err) {
    7c20:	4602      	mov	r2, r0
    7c22:	b128      	cbz	r0, 7c30 <save_id+0x28>
		BT_ERR("Failed to save ID (err %d)", err);
    7c24:	2145      	movs	r1, #69	; 0x45
    7c26:	4806      	ldr	r0, [pc, #24]	; (7c40 <save_id+0x38>)
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
	if (err) {
		BT_ERR("Failed to save IRK (err %d)", err);
	}
#endif
}
    7c28:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save ID (err %d)", err);
    7c2c:	f01f b99f 	b.w	26f6e <printk>
}
    7c30:	bd08      	pop	{r3, pc}
    7c32:	bf00      	nop
    7c34:	0003076c 	.word	0x0003076c
    7c38:	200001c0 	.word	0x200001c0
    7c3c:	0003077b 	.word	0x0003077b
    7c40:	00030781 	.word	0x00030781

00007c44 <set>:
{
    7c44:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    7c48:	4617      	mov	r7, r2
    7c4a:	4698      	mov	r8, r3
	if (!name) {
    7c4c:	4604      	mov	r4, r0
    7c4e:	b930      	cbnz	r0, 7c5e <set+0x1a>
		BT_ERR("Insufficient number of arguments");
    7c50:	2145      	movs	r1, #69	; 0x45
    7c52:	481d      	ldr	r0, [pc, #116]	; (7cc8 <set+0x84>)
    7c54:	f01f f98b 	bl	26f6e <printk>
	return -ENOENT;
    7c58:	f06f 0401 	mvn.w	r4, #1
    7c5c:	e018      	b.n	7c90 <set+0x4c>
	len = settings_name_next(name, &next);
    7c5e:	a901      	add	r1, sp, #4
    7c60:	f01f fdb2 	bl	277c8 <settings_name_next>
	if (!strncmp(name, "id", len)) {
    7c64:	4919      	ldr	r1, [pc, #100]	; (7ccc <set+0x88>)
    7c66:	4602      	mov	r2, r0
    7c68:	4620      	mov	r0, r4
    7c6a:	f025 fe1d 	bl	2d8a8 <strncmp>
    7c6e:	4605      	mov	r5, r0
    7c70:	2800      	cmp	r0, #0
    7c72:	d1f1      	bne.n	7c58 <set+0x14>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7c74:	f3bf 8f5b 	dmb	ish
    7c78:	4e15      	ldr	r6, [pc, #84]	; (7cd0 <set+0x8c>)
    7c7a:	6834      	ldr	r4, [r6, #0]
    7c7c:	f3bf 8f5b 	dmb	ish
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    7c80:	f3c4 0480 	ubfx	r4, r4, #2, #1
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
    7c84:	b144      	cbz	r4, 7c98 <set+0x54>
			BT_WARN("Ignoring identities stored in flash");
    7c86:	2157      	movs	r1, #87	; 0x57
    7c88:	4812      	ldr	r0, [pc, #72]	; (7cd4 <set+0x90>)
    7c8a:	f01f f970 	bl	26f6e <printk>
			return 0;
    7c8e:	462c      	mov	r4, r5
}
    7c90:	4620      	mov	r0, r4
    7c92:	b002      	add	sp, #8
    7c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
    7c98:	f1a6 0594 	sub.w	r5, r6, #148	; 0x94
    7c9c:	2207      	movs	r2, #7
    7c9e:	4629      	mov	r1, r5
    7ca0:	4640      	mov	r0, r8
    7ca2:	47b8      	blx	r7
		if (len < sizeof(bt_dev.id_addr[0])) {
    7ca4:	2806      	cmp	r0, #6
    7ca6:	d809      	bhi.n	7cbc <set+0x78>
				BT_ERR("Invalid length ID address in storage");
    7ca8:	2145      	movs	r1, #69	; 0x45
    7caa:	480b      	ldr	r0, [pc, #44]	; (7cd8 <set+0x94>)
    7cac:	f01f f95f 	bl	26f6e <printk>
			(void)memset(bt_dev.id_addr, 0,
    7cb0:	f846 4c94 	str.w	r4, [r6, #-148]
			bt_dev.id_count = 0U;
    7cb4:	71ec      	strb	r4, [r5, #7]
			(void)memset(bt_dev.id_addr, 0,
    7cb6:	f8c5 4003 	str.w	r4, [r5, #3]
			bt_dev.id_count = 0U;
    7cba:	e7e9      	b.n	7c90 <set+0x4c>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
    7cbc:	2307      	movs	r3, #7
    7cbe:	fbb0 f0f3 	udiv	r0, r0, r3
    7cc2:	71e8      	strb	r0, [r5, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
    7cc4:	e7e4      	b.n	7c90 <set+0x4c>
    7cc6:	bf00      	nop
    7cc8:	000307a1 	.word	0x000307a1
    7ccc:	000305a8 	.word	0x000305a8
    7cd0:	20000254 	.word	0x20000254
    7cd4:	000307c7 	.word	0x000307c7
    7cd8:	000307f0 	.word	0x000307f0

00007cdc <bt_settings_encode_key>:
{
    7cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7ce0:	b088      	sub	sp, #32
    7ce2:	799c      	ldrb	r4, [r3, #6]
    7ce4:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    7ce8:	795d      	ldrb	r5, [r3, #5]
    7cea:	791e      	ldrb	r6, [r3, #4]
    7cec:	78df      	ldrb	r7, [r3, #3]
    7cee:	f893 c002 	ldrb.w	ip, [r3, #2]
    7cf2:	f893 e001 	ldrb.w	lr, [r3, #1]
    7cf6:	781b      	ldrb	r3, [r3, #0]
	if (key) {
    7cf8:	f1b8 0f00 	cmp.w	r8, #0
    7cfc:	d00e      	beq.n	7d1c <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
    7cfe:	e9cd 3806 	strd	r3, r8, [sp, #24]
    7d02:	e9cd ce04 	strd	ip, lr, [sp, #16]
    7d06:	4613      	mov	r3, r2
    7d08:	e9cd 6702 	strd	r6, r7, [sp, #8]
    7d0c:	e9cd 4500 	strd	r4, r5, [sp]
    7d10:	4a08      	ldr	r2, [pc, #32]	; (7d34 <bt_settings_encode_key+0x58>)
    7d12:	f01f f939 	bl	26f88 <snprintk>
}
    7d16:	b008      	add	sp, #32
    7d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
    7d1c:	e9cd e305 	strd	lr, r3, [sp, #20]
    7d20:	e9cd 7c03 	strd	r7, ip, [sp, #12]
    7d24:	4613      	mov	r3, r2
    7d26:	e9cd 5601 	strd	r5, r6, [sp, #4]
    7d2a:	9400      	str	r4, [sp, #0]
    7d2c:	4a02      	ldr	r2, [pc, #8]	; (7d38 <bt_settings_encode_key+0x5c>)
    7d2e:	f01f f92b 	bl	26f88 <snprintk>
}
    7d32:	e7f0      	b.n	7d16 <bt_settings_encode_key+0x3a>
    7d34:	000306d4 	.word	0x000306d4
    7d38:	000306f8 	.word	0x000306f8

00007d3c <bt_settings_save_id>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7d3c:	4909      	ldr	r1, [pc, #36]	; (7d64 <bt_settings_save_id+0x28>)
    7d3e:	f3bf 8f5b 	dmb	ish
    7d42:	e851 3f00 	ldrex	r3, [r1]
    7d46:	f043 0201 	orr.w	r2, r3, #1
    7d4a:	e841 2000 	strex	r0, r2, [r1]
    7d4e:	2800      	cmp	r0, #0
    7d50:	d1f7      	bne.n	7d42 <bt_settings_save_id+0x6>
    7d52:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    7d56:	07db      	lsls	r3, r3, #31
    7d58:	d403      	bmi.n	7d62 <bt_settings_save_id+0x26>
		k_queue_append(&work_q->queue, work);
    7d5a:	3908      	subs	r1, #8
    7d5c:	4802      	ldr	r0, [pc, #8]	; (7d68 <bt_settings_save_id+0x2c>)
    7d5e:	f025 ba83 	b.w	2d268 <k_queue_append>
K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
}
    7d62:	4770      	bx	lr
    7d64:	2000070c 	.word	0x2000070c
    7d68:	20002490 	.word	0x20002490

00007d6c <commit>:

static int commit(void)
{
    7d6c:	b538      	push	{r3, r4, r5, lr}
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
		bt_set_name(CONFIG_BT_DEVICE_NAME);
	}
#endif
	if (!bt_dev.id_count) {
    7d6e:	4c17      	ldr	r4, [pc, #92]	; (7dcc <commit+0x60>)
    7d70:	79e3      	ldrb	r3, [r4, #7]
    7d72:	b96b      	cbnz	r3, 7d90 <commit+0x24>
		bt_setup_public_id_addr();
    7d74:	f001 fcc6 	bl	9704 <bt_setup_public_id_addr>
	}

	if (!bt_dev.id_count) {
    7d78:	79e3      	ldrb	r3, [r4, #7]
    7d7a:	b94b      	cbnz	r3, 7d90 <commit+0x24>
		int err;

		err = bt_setup_random_id_addr();
    7d7c:	f001 fd50 	bl	9820 <bt_setup_random_id_addr>
		if (err) {
    7d80:	4604      	mov	r4, r0
    7d82:	b128      	cbz	r0, 7d90 <commit+0x24>
			BT_ERR("Unable to setup an identity address");
    7d84:	2145      	movs	r1, #69	; 0x45
    7d86:	4812      	ldr	r0, [pc, #72]	; (7dd0 <commit+0x64>)
    7d88:	f01f f8f1 	bl	26f6e <printk>
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
}
    7d8c:	4620      	mov	r0, r4
    7d8e:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7d90:	4d10      	ldr	r5, [pc, #64]	; (7dd4 <commit+0x68>)
    7d92:	f3bf 8f5b 	dmb	ish
    7d96:	682b      	ldr	r3, [r5, #0]
    7d98:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    7d9c:	079b      	lsls	r3, r3, #30
    7d9e:	d401      	bmi.n	7da4 <commit+0x38>
		bt_finalize_init();
    7da0:	f001 fa26 	bl	91f0 <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7da4:	f3bf 8f5b 	dmb	ish
    7da8:	e855 4f00 	ldrex	r4, [r5]
    7dac:	f424 4300 	bic.w	r3, r4, #32768	; 0x8000
    7db0:	e845 3200 	strex	r2, r3, [r5]
    7db4:	2a00      	cmp	r2, #0
    7db6:	d1f7      	bne.n	7da8 <commit+0x3c>
    7db8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
    7dbc:	f414 4400 	ands.w	r4, r4, #32768	; 0x8000
    7dc0:	d0e4      	beq.n	7d8c <commit+0x20>
		bt_settings_save_id();
    7dc2:	f7ff ffbb 	bl	7d3c <bt_settings_save_id>
	return 0;
    7dc6:	2400      	movs	r4, #0
    7dc8:	e7e0      	b.n	7d8c <commit+0x20>
    7dca:	bf00      	nop
    7dcc:	200001c0 	.word	0x200001c0
    7dd0:	00030743 	.word	0x00030743
    7dd4:	20000254 	.word	0x20000254

00007dd8 <bt_settings_init>:

SETTINGS_STATIC_HANDLER_DEFINE(bt, "bt", NULL, set, commit, NULL);

int bt_settings_init(void)
{
    7dd8:	b510      	push	{r4, lr}
	int err;

	BT_DBG("");

	err = settings_subsys_init();
    7dda:	f7fe f88d 	bl	5ef8 <settings_subsys_init>
	if (err) {
    7dde:	4604      	mov	r4, r0
    7de0:	b120      	cbz	r0, 7dec <bt_settings_init+0x14>
		BT_ERR("settings_subsys_init failed (err %d)", err);
    7de2:	4602      	mov	r2, r0
    7de4:	2145      	movs	r1, #69	; 0x45
    7de6:	4802      	ldr	r0, [pc, #8]	; (7df0 <bt_settings_init+0x18>)
    7de8:	f01f f8c1 	bl	26f6e <printk>
		return err;
	}

	return 0;
}
    7dec:	4620      	mov	r0, r4
    7dee:	bd10      	pop	{r4, pc}
    7df0:	00030719 	.word	0x00030719

00007df4 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    7df4:	b5f0      	push	{r4, r5, r6, r7, lr}
    7df6:	460b      	mov	r3, r1
	switch (src->type) {
    7df8:	7801      	ldrb	r1, [r0, #0]
    7dfa:	2901      	cmp	r1, #1
{
    7dfc:	4602      	mov	r2, r0
	switch (src->type) {
    7dfe:	d016      	beq.n	7e2e <uuid_to_uuid128+0x3a>
    7e00:	b111      	cbz	r1, 7e08 <uuid_to_uuid128+0x14>
    7e02:	2902      	cmp	r1, #2
    7e04:	d02b      	beq.n	7e5e <uuid_to_uuid128+0x6a>
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    7e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst = uuid128_base;
    7e08:	4c1b      	ldr	r4, [pc, #108]	; (7e78 <uuid_to_uuid128+0x84>)
    7e0a:	461d      	mov	r5, r3
    7e0c:	f104 0710 	add.w	r7, r4, #16
    7e10:	6820      	ldr	r0, [r4, #0]
    7e12:	6861      	ldr	r1, [r4, #4]
    7e14:	462e      	mov	r6, r5
    7e16:	c603      	stmia	r6!, {r0, r1}
    7e18:	3408      	adds	r4, #8
    7e1a:	42bc      	cmp	r4, r7
    7e1c:	4635      	mov	r5, r6
    7e1e:	d1f7      	bne.n	7e10 <uuid_to_uuid128+0x1c>
		sys_put_le16(BT_UUID_16(src)->val,
    7e20:	8852      	ldrh	r2, [r2, #2]
		*dst = uuid128_base;
    7e22:	7821      	ldrb	r1, [r4, #0]
    7e24:	7031      	strb	r1, [r6, #0]
	dst[0] = val;
    7e26:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    7e28:	0a12      	lsrs	r2, r2, #8
    7e2a:	739a      	strb	r2, [r3, #14]
    7e2c:	e7eb      	b.n	7e06 <uuid_to_uuid128+0x12>
		*dst = uuid128_base;
    7e2e:	4c12      	ldr	r4, [pc, #72]	; (7e78 <uuid_to_uuid128+0x84>)
    7e30:	461d      	mov	r5, r3
    7e32:	f104 0710 	add.w	r7, r4, #16
    7e36:	6820      	ldr	r0, [r4, #0]
    7e38:	6861      	ldr	r1, [r4, #4]
    7e3a:	462e      	mov	r6, r5
    7e3c:	c603      	stmia	r6!, {r0, r1}
    7e3e:	3408      	adds	r4, #8
    7e40:	42bc      	cmp	r4, r7
    7e42:	4635      	mov	r5, r6
    7e44:	d1f7      	bne.n	7e36 <uuid_to_uuid128+0x42>
		sys_put_le32(BT_UUID_32(src)->val,
    7e46:	6852      	ldr	r2, [r2, #4]
		*dst = uuid128_base;
    7e48:	7821      	ldrb	r1, [r4, #0]
    7e4a:	7031      	strb	r1, [r6, #0]
    7e4c:	f3c2 2107 	ubfx	r1, r2, #8, #8
	dst[0] = val;
    7e50:	735a      	strb	r2, [r3, #13]
	sys_put_le16(val >> 16, &dst[2]);
    7e52:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    7e54:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
    7e56:	0a12      	lsrs	r2, r2, #8
    7e58:	7399      	strb	r1, [r3, #14]
    7e5a:	741a      	strb	r2, [r3, #16]
    7e5c:	e7d3      	b.n	7e06 <uuid_to_uuid128+0x12>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    7e5e:	f100 0510 	add.w	r5, r0, #16
    7e62:	6810      	ldr	r0, [r2, #0]
    7e64:	6851      	ldr	r1, [r2, #4]
    7e66:	461c      	mov	r4, r3
    7e68:	c403      	stmia	r4!, {r0, r1}
    7e6a:	3208      	adds	r2, #8
    7e6c:	42aa      	cmp	r2, r5
    7e6e:	4623      	mov	r3, r4
    7e70:	d1f7      	bne.n	7e62 <uuid_to_uuid128+0x6e>
    7e72:	7812      	ldrb	r2, [r2, #0]
    7e74:	7022      	strb	r2, [r4, #0]
    7e76:	e7c6      	b.n	7e06 <uuid_to_uuid128+0x12>
    7e78:	00030834 	.word	0x00030834

00007e7c <bt_buf_get_rx>:
NET_BUF_POOL_DEFINE(acl_in_pool, CONFIG_BT_ACL_RX_COUNT, ACL_IN_SIZE,
		    sizeof(struct acl_data), bt_hci_host_num_completed_packets);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
    7e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7e7e:	461f      	mov	r7, r3
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
    7e80:	f000 03fd 	and.w	r3, r0, #253	; 0xfd
    7e84:	2b01      	cmp	r3, #1
{
    7e86:	4605      	mov	r5, r0
    7e88:	4616      	mov	r6, r2
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
    7e8a:	d00a      	beq.n	7ea2 <bt_buf_get_rx+0x26>
    7e8c:	2805      	cmp	r0, #5
    7e8e:	d008      	beq.n	7ea2 <bt_buf_get_rx+0x26>
    7e90:	490b      	ldr	r1, [pc, #44]	; (7ec0 <bt_buf_get_rx+0x44>)
    7e92:	480c      	ldr	r0, [pc, #48]	; (7ec4 <bt_buf_get_rx+0x48>)
    7e94:	2234      	movs	r2, #52	; 0x34
    7e96:	f01f f86a 	bl	26f6e <printk>
    7e9a:	2134      	movs	r1, #52	; 0x34
    7e9c:	4808      	ldr	r0, [pc, #32]	; (7ec0 <bt_buf_get_rx+0x44>)
    7e9e:	f01f fadf 	bl	27460 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
    7ea2:	4632      	mov	r2, r6
    7ea4:	463b      	mov	r3, r7
    7ea6:	4808      	ldr	r0, [pc, #32]	; (7ec8 <bt_buf_get_rx+0x4c>)
    7ea8:	f024 fd27 	bl	2c8fa <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    7eac:	4604      	mov	r4, r0
    7eae:	b120      	cbz	r0, 7eba <bt_buf_get_rx+0x3e>
	net_buf_simple_reserve(&buf->b, reserve);
    7eb0:	2100      	movs	r1, #0
    7eb2:	3008      	adds	r0, #8
    7eb4:	f016 ff64 	bl	1ed80 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    7eb8:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    7eba:	4620      	mov	r0, r4
    7ebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7ebe:	bf00      	nop
    7ec0:	00030845 	.word	0x00030845
    7ec4:	0002fa94 	.word	0x0002fa94
    7ec8:	20001488 	.word	0x20001488

00007ecc <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    7ecc:	b5d0      	push	{r4, r6, r7, lr}
    7ece:	460f      	mov	r7, r1
	__asm__ volatile(
    7ed0:	f04f 0320 	mov.w	r3, #32
    7ed4:	f3ef 8211 	mrs	r2, BASEPRI
    7ed8:	f383 8811 	msr	BASEPRI, r3
    7edc:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    7ee0:	4b0d      	ldr	r3, [pc, #52]	; (7f18 <bt_buf_get_cmd_complete+0x4c>)
	bt_dev.sent_cmd = NULL;
    7ee2:	2100      	movs	r1, #0
	buf = bt_dev.sent_cmd;
    7ee4:	f8d3 40f8 	ldr.w	r4, [r3, #248]	; 0xf8
	bt_dev.sent_cmd = NULL;
    7ee8:	f8c3 10f8 	str.w	r1, [r3, #248]	; 0xf8
	__asm__ volatile(
    7eec:	f382 8811 	msr	BASEPRI, r2
    7ef0:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    7ef4:	b934      	cbnz	r4, 7f04 <bt_buf_get_cmd_complete+0x38>
		net_buf_reserve(buf, BT_BUF_RESERVE);

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    7ef6:	4602      	mov	r2, r0
    7ef8:	463b      	mov	r3, r7
    7efa:	2001      	movs	r0, #1
}
    7efc:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    7f00:	f7ff bfbc 	b.w	7e7c <bt_buf_get_rx>
    7f04:	2301      	movs	r3, #1
    7f06:	f104 0008 	add.w	r0, r4, #8
    7f0a:	7523      	strb	r3, [r4, #20]
		buf->len = 0U;
    7f0c:	81a1      	strh	r1, [r4, #12]
    7f0e:	f016 ff37 	bl	1ed80 <net_buf_simple_reserve>
}
    7f12:	4620      	mov	r0, r4
    7f14:	bdd0      	pop	{r4, r6, r7, pc}
    7f16:	bf00      	nop
    7f18:	200001c0 	.word	0x200001c0

00007f1c <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    7f1c:	b570      	push	{r4, r5, r6, lr}
    7f1e:	4604      	mov	r4, r0
	switch (evt) {
    7f20:	2c0e      	cmp	r4, #14
{
    7f22:	460d      	mov	r5, r1
    7f24:	4610      	mov	r0, r2
    7f26:	4619      	mov	r1, r3
	switch (evt) {
    7f28:	d314      	bcc.n	7f54 <bt_buf_get_evt+0x38>
    7f2a:	2c0f      	cmp	r4, #15
    7f2c:	d90e      	bls.n	7f4c <bt_buf_get_evt+0x30>
    7f2e:	2c13      	cmp	r4, #19
    7f30:	d110      	bne.n	7f54 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
    7f32:	480d      	ldr	r0, [pc, #52]	; (7f68 <bt_buf_get_evt+0x4c>)
    7f34:	f024 fce1 	bl	2c8fa <net_buf_alloc_fixed>
#if defined(CONFIG_BT_DISCARDABLE_BUF_COUNT)
		if (discardable) {
			struct net_buf *buf;

			buf = net_buf_alloc(&discardable_pool, timeout);
			if (buf) {
    7f38:	4604      	mov	r4, r0
    7f3a:	b128      	cbz	r0, 7f48 <bt_buf_get_evt+0x2c>
	net_buf_simple_reserve(&buf->b, reserve);
    7f3c:	2100      	movs	r1, #0
    7f3e:	3008      	adds	r0, #8
    7f40:	f016 ff1e 	bl	1ed80 <net_buf_simple_reserve>
    7f44:	2301      	movs	r3, #1
    7f46:	7523      	strb	r3, [r4, #20]
		}
#endif /* CONFIG_BT_DISCARDABLE_BUF_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    7f48:	4620      	mov	r0, r4
    7f4a:	bd70      	pop	{r4, r5, r6, pc}
    7f4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    7f50:	f7ff bfbc 	b.w	7ecc <bt_buf_get_cmd_complete>
	return net_buf_alloc_fixed(pool, timeout);
    7f54:	4602      	mov	r2, r0
    7f56:	460b      	mov	r3, r1
		if (discardable) {
    7f58:	b10d      	cbz	r5, 7f5e <bt_buf_get_evt+0x42>
    7f5a:	4804      	ldr	r0, [pc, #16]	; (7f6c <bt_buf_get_evt+0x50>)
    7f5c:	e7ea      	b.n	7f34 <bt_buf_get_evt+0x18>
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    7f5e:	2001      	movs	r0, #1
}
    7f60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    7f64:	f7ff bf8a 	b.w	7e7c <bt_buf_get_rx>
    7f68:	200014e0 	.word	0x200014e0
    7f6c:	200013d8 	.word	0x200013d8

00007f70 <le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	BT_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
    7f70:	4905      	ldr	r1, [pc, #20]	; (7f88 <le_dhkey_complete+0x18>)
    7f72:	680b      	ldr	r3, [r1, #0]
    7f74:	b133      	cbz	r3, 7f84 <le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
    7f76:	6882      	ldr	r2, [r0, #8]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
    7f78:	2000      	movs	r0, #0
    7f7a:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
    7f7c:	7811      	ldrb	r1, [r2, #0]
    7f7e:	b901      	cbnz	r1, 7f82 <le_dhkey_complete+0x12>
    7f80:	1c50      	adds	r0, r2, #1
    7f82:	4718      	bx	r3
	}
}
    7f84:	4770      	bx	lr
    7f86:	bf00      	nop
    7f88:	20002b88 	.word	0x20002b88

00007f8c <hci_data_buf_overflow>:
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    7f8c:	6883      	ldr	r3, [r0, #8]
    7f8e:	4802      	ldr	r0, [pc, #8]	; (7f98 <hci_data_buf_overflow+0xc>)
    7f90:	781a      	ldrb	r2, [r3, #0]
    7f92:	2157      	movs	r1, #87	; 0x57
    7f94:	f01e bfeb 	b.w	26f6e <printk>
    7f98:	00030cd7 	.word	0x00030cd7

00007f9c <hci_disconn_complete_prio>:
{
    7f9c:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    7f9e:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
    7fa0:	781a      	ldrb	r2, [r3, #0]
    7fa2:	b9aa      	cbnz	r2, 7fd0 <hci_disconn_complete_prio+0x34>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    7fa4:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    7fa8:	4620      	mov	r0, r4
    7faa:	f002 faf9 	bl	a5a0 <bt_conn_lookup_handle>
	if (!conn) {
    7fae:	4605      	mov	r5, r0
    7fb0:	b930      	cbnz	r0, 7fc0 <hci_disconn_complete_prio+0x24>
		BT_ERR("Unable to look up conn with handle %u", handle);
    7fb2:	4622      	mov	r2, r4
    7fb4:	2145      	movs	r1, #69	; 0x45
    7fb6:	4807      	ldr	r0, [pc, #28]	; (7fd4 <hci_disconn_complete_prio+0x38>)
}
    7fb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    7fbc:	f01e bfd7 	b.w	26f6e <printk>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    7fc0:	2101      	movs	r1, #1
    7fc2:	f002 faf5 	bl	a5b0 <bt_conn_set_state>
	bt_conn_unref(conn);
    7fc6:	4628      	mov	r0, r5
}
    7fc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    7fcc:	f002 babc 	b.w	a548 <bt_conn_unref>
}
    7fd0:	bd38      	pop	{r3, r4, r5, pc}
    7fd2:	bf00      	nop
    7fd4:	00030d04 	.word	0x00030d04

00007fd8 <hci_disconn_complete>:
{
    7fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    7fda:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
    7fdc:	7835      	ldrb	r5, [r6, #0]
    7fde:	b9c5      	cbnz	r5, 8012 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    7fe0:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    7fe4:	4638      	mov	r0, r7
    7fe6:	f002 fadb 	bl	a5a0 <bt_conn_lookup_handle>
	if (!conn) {
    7fea:	4604      	mov	r4, r0
    7fec:	b930      	cbnz	r0, 7ffc <hci_disconn_complete+0x24>
		BT_ERR("Unable to look up conn with handle %u", handle);
    7fee:	463a      	mov	r2, r7
    7ff0:	2145      	movs	r1, #69	; 0x45
    7ff2:	4808      	ldr	r0, [pc, #32]	; (8014 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14>)
}
    7ff4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    7ff8:	f01e bfb9 	b.w	26f6e <printk>
	conn->err = evt->reason;
    7ffc:	78f3      	ldrb	r3, [r6, #3]
    7ffe:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    8000:	4629      	mov	r1, r5
    8002:	f002 fad5 	bl	a5b0 <bt_conn_set_state>
	conn->handle = 0U;
    8006:	8025      	strh	r5, [r4, #0]
		bt_conn_unref(conn);
    8008:	4620      	mov	r0, r4
}
    800a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
    800e:	f002 ba9b 	b.w	a548 <bt_conn_unref>
}
    8012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8014:	00030d04 	.word	0x00030d04

00008018 <le_pkey_complete>:
{
    8018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
    801a:	6886      	ldr	r6, [r0, #8]
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    801c:	4811      	ldr	r0, [pc, #68]	; (8064 <le_pkey_complete+0x4c>)
    801e:	f06f 0110 	mvn.w	r1, #16
    8022:	f021 f8bf 	bl	291a4 <atomic_and>
	if (!evt->status) {
    8026:	7833      	ldrb	r3, [r6, #0]
    8028:	b96b      	cbnz	r3, 8046 <le_pkey_complete+0x2e>
		memcpy(pub_key, evt->key, 64);
    802a:	4a0f      	ldr	r2, [pc, #60]	; (8068 <le_pkey_complete+0x50>)
    802c:	1c73      	adds	r3, r6, #1
    802e:	f106 0141 	add.w	r1, r6, #65	; 0x41
    8032:	f853 0b04 	ldr.w	r0, [r3], #4
    8036:	f842 0b04 	str.w	r0, [r2], #4
    803a:	428b      	cmp	r3, r1
    803c:	d1f9      	bne.n	8032 <le_pkey_complete+0x1a>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    803e:	2108      	movs	r1, #8
    8040:	4808      	ldr	r0, [pc, #32]	; (8064 <le_pkey_complete+0x4c>)
    8042:	f021 f895 	bl	29170 <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    8046:	4d09      	ldr	r5, [pc, #36]	; (806c <le_pkey_complete+0x54>)
		cb->func(evt->status ? NULL : pub_key);
    8048:	4f07      	ldr	r7, [pc, #28]	; (8068 <le_pkey_complete+0x50>)
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    804a:	682c      	ldr	r4, [r5, #0]
    804c:	b90c      	cbnz	r4, 8052 <le_pkey_complete+0x3a>
	pub_key_cb = NULL;
    804e:	602c      	str	r4, [r5, #0]
}
    8050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		cb->func(evt->status ? NULL : pub_key);
    8052:	7832      	ldrb	r2, [r6, #0]
    8054:	6823      	ldr	r3, [r4, #0]
    8056:	2a00      	cmp	r2, #0
    8058:	bf0c      	ite	eq
    805a:	4638      	moveq	r0, r7
    805c:	2000      	movne	r0, #0
    805e:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    8060:	6864      	ldr	r4, [r4, #4]
    8062:	e7f3      	b.n	804c <le_pkey_complete+0x34>
    8064:	20000254 	.word	0x20000254
    8068:	200047de 	.word	0x200047de
    806c:	20002b8c 	.word	0x20002b8c

00008070 <hci_hardware_error>:
{
    8070:	b508      	push	{r3, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    8072:	2101      	movs	r1, #1
    8074:	3008      	adds	r0, #8
    8076:	f017 f89f 	bl	1f1b8 <net_buf_simple_pull_mem>
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    807a:	2145      	movs	r1, #69	; 0x45
    807c:	7802      	ldrb	r2, [r0, #0]
    807e:	4802      	ldr	r0, [pc, #8]	; (8088 <hci_hardware_error+0x18>)
}
    8080:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    8084:	f01e bf73 	b.w	26f6e <printk>
    8088:	00030d2f 	.word	0x00030d2f

0000808c <hci_vendor_event>:
	return 0;
}
#endif /* CONFIG_BT_HCI_VS_EVT_USER */

static void hci_vendor_event(struct net_buf *buf)
{
    808c:	b508      	push	{r3, lr}
	}
#endif /* CONFIG_BT_HCI_VS_EVT_USER */

	if (IS_ENABLED(CONFIG_BT_HCI_VS_EXT) && !handled) {
		/* do nothing at present time */
		BT_WARN("Unhandled vendor-specific event: %s",
    808e:	8981      	ldrh	r1, [r0, #12]
    8090:	6880      	ldr	r0, [r0, #8]
    8092:	f7ff fbab 	bl	77ec <bt_hex_real>
    8096:	2157      	movs	r1, #87	; 0x57
    8098:	4602      	mov	r2, r0
			bt_hex(buf->data, buf->len));
	}
}
    809a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    809e:	4801      	ldr	r0, [pc, #4]	; (80a4 <hci_vendor_event+0x18>)
    80a0:	f01e bf65 	b.w	26f6e <printk>
    80a4:	00030e52 	.word	0x00030e52

000080a8 <le_conn_update_complete>:
{
    80a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    80aa:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    80ac:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    80b0:	4630      	mov	r0, r6
    80b2:	f002 fa75 	bl	a5a0 <bt_conn_lookup_handle>
	if (!conn) {
    80b6:	4604      	mov	r4, r0
    80b8:	b930      	cbnz	r0, 80c8 <le_conn_update_complete+0x20>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    80ba:	4632      	mov	r2, r6
    80bc:	2145      	movs	r1, #69	; 0x45
    80be:	481a      	ldr	r0, [pc, #104]	; (8128 <le_conn_update_complete+0x80>)
    80c0:	f01e ff55 	bl	26f6e <printk>
}
    80c4:	b002      	add	sp, #8
    80c6:	bd70      	pop	{r4, r5, r6, pc}
	if (!evt->status) {
    80c8:	782b      	ldrb	r3, [r5, #0]
    80ca:	b9bb      	cbnz	r3, 80fc <le_conn_update_complete+0x54>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    80cc:	792a      	ldrb	r2, [r5, #4]
    80ce:	78eb      	ldrb	r3, [r5, #3]
    80d0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    80d4:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    80d8:	79aa      	ldrb	r2, [r5, #6]
    80da:	796b      	ldrb	r3, [r5, #5]
    80dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    80e0:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    80e4:	79eb      	ldrb	r3, [r5, #7]
    80e6:	7a2a      	ldrb	r2, [r5, #8]
    80e8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    80ec:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
    80f0:	f002 f858 	bl	a1a4 <notify_le_param_updated>
	bt_conn_unref(conn);
    80f4:	4620      	mov	r0, r4
    80f6:	f002 fa27 	bl	a548 <bt_conn_unref>
    80fa:	e7e3      	b.n	80c4 <le_conn_update_complete+0x1c>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    80fc:	2b1a      	cmp	r3, #26
    80fe:	d1f9      	bne.n	80f4 <le_conn_update_complete+0x4c>
    8100:	78c3      	ldrb	r3, [r0, #3]
    8102:	2b01      	cmp	r3, #1
    8104:	d1f6      	bne.n	80f4 <le_conn_update_complete+0x4c>
		   !atomic_test_and_set_bit(conn->flags,
    8106:	210a      	movs	r1, #10
    8108:	3004      	adds	r0, #4
    810a:	f021 f840 	bl	2918e <atomic_test_and_set_bit>
		   conn->role == BT_HCI_ROLE_SLAVE &&
    810e:	2800      	cmp	r0, #0
    8110:	d1f0      	bne.n	80f4 <le_conn_update_complete+0x4c>
		param.interval_min = conn->le.interval_min;
    8112:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    8116:	9300      	str	r3, [sp, #0]
		bt_l2cap_update_conn_param(conn, &param);
    8118:	4669      	mov	r1, sp
		param.latency = conn->le.pending_latency;
    811a:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
    811e:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
    8120:	4620      	mov	r0, r4
    8122:	f002 fe85 	bl	ae30 <bt_l2cap_update_conn_param>
    8126:	e7e5      	b.n	80f4 <le_conn_update_complete+0x4c>
    8128:	00030ed0 	.word	0x00030ed0

0000812c <id_find>:
	memcpy(addrs, bt_dev.id_addr, to_copy * sizeof(bt_addr_le_t));
	*count = to_copy;
}

static int id_find(const bt_addr_le_t *addr)
{
    812c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    812e:	4e0a      	ldr	r6, [pc, #40]	; (8158 <id_find+0x2c>)
{
    8130:	4607      	mov	r7, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
    8132:	2500      	movs	r5, #0
    8134:	79f3      	ldrb	r3, [r6, #7]
    8136:	b2ec      	uxtb	r4, r5
    8138:	42a3      	cmp	r3, r4
    813a:	d802      	bhi.n	8142 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    813c:	f06f 0401 	mvn.w	r4, #1
    8140:	e008      	b.n	8154 <id_find+0x28>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    8142:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    8146:	4431      	add	r1, r6
    8148:	4638      	mov	r0, r7
    814a:	f021 f84b 	bl	291e4 <bt_addr_le_cmp>
    814e:	3501      	adds	r5, #1
    8150:	2800      	cmp	r0, #0
    8152:	d1ef      	bne.n	8134 <id_find+0x8>
}
    8154:	4620      	mov	r0, r4
    8156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8158:	200001c0 	.word	0x200001c0

0000815c <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    815c:	6843      	ldr	r3, [r0, #4]
{
    815e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    8160:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    8162:	0558      	lsls	r0, r3, #21
    8164:	d502      	bpl.n	816c <valid_adv_param+0x10>
		return false;
    8166:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
    8168:	b003      	add	sp, #12
    816a:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    816c:	6922      	ldr	r2, [r4, #16]
    816e:	b10a      	cbz	r2, 8174 <valid_adv_param+0x18>
    8170:	07d9      	lsls	r1, r3, #31
    8172:	d5f8      	bpl.n	8166 <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
    8174:	4d1a      	ldr	r5, [pc, #104]	; (81e0 <valid_adv_param+0x84>)
    8176:	7820      	ldrb	r0, [r4, #0]
    8178:	79eb      	ldrb	r3, [r5, #7]
    817a:	4283      	cmp	r3, r0
    817c:	d9f3      	bls.n	8166 <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    817e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    8182:	2300      	movs	r3, #0
    8184:	4669      	mov	r1, sp
    8186:	4428      	add	r0, r5
    8188:	9300      	str	r3, [sp, #0]
    818a:	f8cd 3003 	str.w	r3, [sp, #3]
    818e:	f021 f829 	bl	291e4 <bt_addr_le_cmp>
	if (param->id >= bt_dev.id_count ||
    8192:	2800      	cmp	r0, #0
    8194:	d0e7      	beq.n	8166 <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    8196:	6860      	ldr	r0, [r4, #4]
    8198:	07c2      	lsls	r2, r0, #31
    819a:	d406      	bmi.n	81aa <valid_adv_param+0x4e>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    819c:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
    81a0:	2b08      	cmp	r3, #8
    81a2:	d802      	bhi.n	81aa <valid_adv_param+0x4e>
    81a4:	68a3      	ldr	r3, [r4, #8]
    81a6:	2b9f      	cmp	r3, #159	; 0x9f
    81a8:	d9dd      	bls.n	8166 <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
    81aa:	f010 0f30 	tst.w	r0, #48	; 0x30
    81ae:	d002      	beq.n	81b6 <valid_adv_param+0x5a>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
    81b0:	6923      	ldr	r3, [r4, #16]
    81b2:	2b00      	cmp	r3, #0
    81b4:	d0d7      	beq.n	8166 <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
    81b6:	06c3      	lsls	r3, r0, #27
    81b8:	d401      	bmi.n	81be <valid_adv_param+0x62>
    81ba:	6923      	ldr	r3, [r4, #16]
    81bc:	b943      	cbnz	r3, 81d0 <valid_adv_param+0x74>
		if (param->interval_min > param->interval_max ||
    81be:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    81c2:	429a      	cmp	r2, r3
    81c4:	d8cf      	bhi.n	8166 <valid_adv_param+0xa>
    81c6:	2a1f      	cmp	r2, #31
    81c8:	d9cd      	bls.n	8166 <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
    81ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    81ce:	d8ca      	bhi.n	8166 <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
    81d0:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
    81d4:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
    81d8:	bf18      	it	ne
    81da:	2001      	movne	r0, #1
    81dc:	e7c4      	b.n	8168 <valid_adv_param+0xc>
    81de:	bf00      	nop
    81e0:	200001c0 	.word	0x200001c0

000081e4 <hci_cmd_done>:
{
    81e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    81e8:	4680      	mov	r8, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    81ea:	7990      	ldrb	r0, [r2, #6]
    81ec:	4e2b      	ldr	r6, [pc, #172]	; (829c <hci_cmd_done+0xb8>)
{
    81ee:	460f      	mov	r7, r1
    81f0:	4615      	mov	r5, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    81f2:	f016 fc9b 	bl	1eb2c <net_buf_pool_get>
    81f6:	4286      	cmp	r6, r0
    81f8:	d00e      	beq.n	8218 <hci_cmd_done+0x34>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    81fa:	79ac      	ldrb	r4, [r5, #6]
    81fc:	4620      	mov	r0, r4
    81fe:	f016 fc95 	bl	1eb2c <net_buf_pool_get>
    8202:	4623      	mov	r3, r4
    8204:	e9cd 0600 	strd	r0, r6, [sp]
    8208:	4642      	mov	r2, r8
    820a:	2157      	movs	r1, #87	; 0x57
    820c:	4824      	ldr	r0, [pc, #144]	; (82a0 <hci_cmd_done+0xbc>)
    820e:	f01e feae 	bl	26f6e <printk>
}
    8212:	b002      	add	sp, #8
    8214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cmd(buf)->opcode != opcode) {
    8218:	4628      	mov	r0, r5
    821a:	f016 fc8f 	bl	1eb3c <net_buf_id>
    821e:	4c21      	ldr	r4, [pc, #132]	; (82a4 <hci_cmd_done+0xc0>)
    8220:	260c      	movs	r6, #12
    8222:	fb06 4000 	mla	r0, r6, r0, r4
    8226:	8843      	ldrh	r3, [r0, #2]
    8228:	4543      	cmp	r3, r8
    822a:	d00a      	beq.n	8242 <hci_cmd_done+0x5e>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    822c:	4628      	mov	r0, r5
    822e:	f016 fc85 	bl	1eb3c <net_buf_id>
    8232:	fb06 4000 	mla	r0, r6, r0, r4
    8236:	4642      	mov	r2, r8
    8238:	8843      	ldrh	r3, [r0, #2]
    823a:	481b      	ldr	r0, [pc, #108]	; (82a8 <hci_cmd_done+0xc4>)
    823c:	2157      	movs	r1, #87	; 0x57
    823e:	f01e fe96 	bl	26f6e <printk>
	if (cmd(buf)->state && !status) {
    8242:	4628      	mov	r0, r5
    8244:	f016 fc7a 	bl	1eb3c <net_buf_id>
    8248:	260c      	movs	r6, #12
    824a:	fb06 4000 	mla	r0, r6, r0, r4
    824e:	6843      	ldr	r3, [r0, #4]
    8250:	b15b      	cbz	r3, 826a <hci_cmd_done+0x86>
    8252:	b957      	cbnz	r7, 826a <hci_cmd_done+0x86>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    8254:	4628      	mov	r0, r5
    8256:	f016 fc71 	bl	1eb3c <net_buf_id>
    825a:	fb06 4000 	mla	r0, r6, r0, r4
    825e:	6843      	ldr	r3, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
    8260:	7a1a      	ldrb	r2, [r3, #8]
    8262:	e9d3 0100 	ldrd	r0, r1, [r3]
    8266:	f020 ffac 	bl	291c2 <atomic_set_bit_to>
	if (cmd(buf)->sync) {
    826a:	4628      	mov	r0, r5
    826c:	f016 fc66 	bl	1eb3c <net_buf_id>
    8270:	260c      	movs	r6, #12
    8272:	fb06 4000 	mla	r0, r6, r0, r4
    8276:	6883      	ldr	r3, [r0, #8]
    8278:	2b00      	cmp	r3, #0
    827a:	d0ca      	beq.n	8212 <hci_cmd_done+0x2e>
		cmd(buf)->status = status;
    827c:	4628      	mov	r0, r5
    827e:	f016 fc5d 	bl	1eb3c <net_buf_id>
    8282:	4370      	muls	r0, r6
    8284:	5427      	strb	r7, [r4, r0]
		k_sem_give(cmd(buf)->sync);
    8286:	4628      	mov	r0, r5
    8288:	f016 fc58 	bl	1eb3c <net_buf_id>
    828c:	fb06 4000 	mla	r0, r6, r0, r4
    8290:	6880      	ldr	r0, [r0, #8]
}
    8292:	b002      	add	sp, #8
    8294:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_impl_k_sem_give(sem);
    8298:	f01b bb10 	b.w	238bc <z_impl_k_sem_give>
    829c:	2000145c 	.word	0x2000145c
    82a0:	00030c65 	.word	0x00030c65
    82a4:	20002b70 	.word	0x20002b70
    82a8:	00030c9f 	.word	0x00030c9f

000082ac <handle_event>:
{
    82ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
    82ae:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    82b2:	4604      	mov	r4, r0
    82b4:	4608      	mov	r0, r1
		if (handler->event != event) {
    82b6:	7811      	ldrb	r1, [r2, #0]
    82b8:	42a1      	cmp	r1, r4
    82ba:	d010      	beq.n	82de <handle_event+0x32>
			continue;
    82bc:	3208      	adds	r2, #8
	for (i = 0; i < num_handlers; i++) {
    82be:	429a      	cmp	r2, r3
    82c0:	d1f9      	bne.n	82b6 <handle_event+0xa>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
    82c2:	8985      	ldrh	r5, [r0, #12]
    82c4:	6880      	ldr	r0, [r0, #8]
    82c6:	4629      	mov	r1, r5
    82c8:	f7ff fa90 	bl	77ec <bt_hex_real>
    82cc:	462b      	mov	r3, r5
    82ce:	9000      	str	r0, [sp, #0]
    82d0:	4622      	mov	r2, r4
    82d2:	2157      	movs	r1, #87	; 0x57
    82d4:	480b      	ldr	r0, [pc, #44]	; (8304 <handle_event+0x58>)
    82d6:	f01e fe4a 	bl	26f6e <printk>
}
    82da:	b003      	add	sp, #12
    82dc:	bd30      	pop	{r4, r5, pc}
		if (buf->len < handler->min_len) {
    82de:	8981      	ldrh	r1, [r0, #12]
    82e0:	7853      	ldrb	r3, [r2, #1]
    82e2:	428b      	cmp	r3, r1
    82e4:	d908      	bls.n	82f8 <handle_event+0x4c>
			BT_ERR("Too small (%u bytes) event 0x%02x",
    82e6:	4808      	ldr	r0, [pc, #32]	; (8308 <handle_event+0x5c>)
    82e8:	460a      	mov	r2, r1
    82ea:	4623      	mov	r3, r4
    82ec:	2145      	movs	r1, #69	; 0x45
}
    82ee:	b003      	add	sp, #12
    82f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
    82f4:	f01e be3b 	b.w	26f6e <printk>
		handler->handler(buf);
    82f8:	6853      	ldr	r3, [r2, #4]
}
    82fa:	b003      	add	sp, #12
    82fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		handler->handler(buf);
    8300:	4718      	bx	r3
    8302:	bf00      	nop
    8304:	00030c3e 	.word	0x00030c3e
    8308:	00030c17 	.word	0x00030c17

0000830c <hci_le_meta_event>:
{
    830c:	b510      	push	{r4, lr}
    830e:	2101      	movs	r1, #1
    8310:	4604      	mov	r4, r0
    8312:	3008      	adds	r0, #8
    8314:	f016 ff50 	bl	1f1b8 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    8318:	4621      	mov	r1, r4
    831a:	2308      	movs	r3, #8
    831c:	4a02      	ldr	r2, [pc, #8]	; (8328 <hci_le_meta_event+0x1c>)
    831e:	7800      	ldrb	r0, [r0, #0]
}
    8320:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    8324:	f7ff bfc2 	b.w	82ac <handle_event>
    8328:	0002ebfc 	.word	0x0002ebfc

0000832c <find_pending_connect.part.21>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    832c:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    832e:	4c0c      	ldr	r4, [pc, #48]	; (8360 <find_pending_connect.part.21+0x34>)
    8330:	4601      	mov	r1, r0
    8332:	2205      	movs	r2, #5
    8334:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    8338:	f002 fa50 	bl	a7dc <bt_conn_lookup_state_le>
		if (!conn) {
    833c:	b970      	cbnz	r0, 835c <find_pending_connect.part.21+0x30>
						       BT_ADDR_LE_NONE,
    833e:	4b09      	ldr	r3, [pc, #36]	; (8364 <find_pending_connect.part.21+0x38>)
    8340:	6818      	ldr	r0, [r3, #0]
    8342:	889a      	ldrh	r2, [r3, #4]
    8344:	9000      	str	r0, [sp, #0]
    8346:	799b      	ldrb	r3, [r3, #6]
    8348:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    834c:	4669      	mov	r1, sp
    834e:	2204      	movs	r2, #4
    8350:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
						       BT_ADDR_LE_NONE,
    8354:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    8358:	f002 fa40 	bl	a7dc <bt_conn_lookup_state_le>
}
    835c:	b002      	add	sp, #8
    835e:	bd10      	pop	{r4, pc}
    8360:	200001c0 	.word	0x200001c0
    8364:	0002e714 	.word	0x0002e714

00008368 <hci_tx_thread>:
{
    8368:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    836c:	f8df 8128 	ldr.w	r8, [pc, #296]	; 8498 <hci_tx_thread+0x130>
		BT_ASSERT(err == 0);
    8370:	f8df 9148 	ldr.w	r9, [pc, #328]	; 84bc <hci_tx_thread+0x154>
			ev_count += bt_conn_prepare_events(&events[1]);
    8374:	f108 0a14 	add.w	sl, r8, #20
		events[0].state = K_POLL_STATE_NOT_READY;
    8378:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    837c:	4650      	mov	r0, sl
		events[0].state = K_POLL_STATE_NOT_READY;
    837e:	f36f 3310 	bfc	r3, #12, #5
    8382:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    8386:	f002 f865 	bl	a454 <bt_conn_prepare_events>
    838a:	1c47      	adds	r7, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
    838c:	f04f 32ff 	mov.w	r2, #4294967295
    8390:	f04f 33ff 	mov.w	r3, #4294967295
    8394:	4639      	mov	r1, r7
    8396:	4840      	ldr	r0, [pc, #256]	; (8498 <hci_tx_thread+0x130>)
    8398:	f01c fada 	bl	24950 <z_impl_k_poll>
		BT_ASSERT(err == 0);
    839c:	b158      	cbz	r0, 83b6 <hci_tx_thread+0x4e>
    839e:	f241 4271 	movw	r2, #5233	; 0x1471
    83a2:	4649      	mov	r1, r9
    83a4:	483d      	ldr	r0, [pc, #244]	; (849c <hci_tx_thread+0x134>)
    83a6:	f01e fde2 	bl	26f6e <printk>
    83aa:	4040      	eors	r0, r0
    83ac:	f380 8811 	msr	BASEPRI, r0
    83b0:	f04f 0003 	mov.w	r0, #3
    83b4:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    83b6:	4c3a      	ldr	r4, [pc, #232]	; (84a0 <hci_tx_thread+0x138>)
{
    83b8:	4e37      	ldr	r6, [pc, #220]	; (8498 <hci_tx_thread+0x130>)
    83ba:	f104 0be0 	add.w	fp, r4, #224	; 0xe0
	for (; count; ev++, count--) {
    83be:	b917      	cbnz	r7, 83c6 <hci_tx_thread+0x5e>
	z_impl_k_yield();
    83c0:	f01b f91c 	bl	235fc <z_impl_k_yield>
    83c4:	e7d8      	b.n	8378 <hci_tx_thread+0x10>
		switch (ev->state) {
    83c6:	68f2      	ldr	r2, [r6, #12]
    83c8:	f3c2 3204 	ubfx	r2, r2, #12, #5
    83cc:	2a01      	cmp	r2, #1
    83ce:	d953      	bls.n	8478 <hci_tx_thread+0x110>
    83d0:	2a04      	cmp	r2, #4
    83d2:	d15b      	bne.n	848c <hci_tx_thread+0x124>
			if (ev->tag == BT_EVENT_CMD_TX) {
    83d4:	7b33      	ldrb	r3, [r6, #12]
    83d6:	2b00      	cmp	r3, #0
    83d8:	d151      	bne.n	847e <hci_tx_thread+0x116>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    83da:	2200      	movs	r2, #0
    83dc:	2300      	movs	r3, #0
    83de:	4831      	ldr	r0, [pc, #196]	; (84a4 <hci_tx_thread+0x13c>)
    83e0:	f016 fc9e 	bl	1ed20 <net_buf_get>
	BT_ASSERT(buf);
    83e4:	4605      	mov	r5, r0
    83e6:	b958      	cbnz	r0, 8400 <hci_tx_thread+0x98>
    83e8:	f241 420e 	movw	r2, #5134	; 0x140e
    83ec:	4649      	mov	r1, r9
    83ee:	482b      	ldr	r0, [pc, #172]	; (849c <hci_tx_thread+0x134>)
    83f0:	f01e fdbd 	bl	26f6e <printk>
    83f4:	4040      	eors	r0, r0
    83f6:	f380 8811 	msr	BASEPRI, r0
    83fa:	f04f 0003 	mov.w	r0, #3
    83fe:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    8400:	f04f 33ff 	mov.w	r3, #4294967295
    8404:	f04f 32ff 	mov.w	r2, #4294967295
    8408:	4658      	mov	r0, fp
    840a:	f01b fa93 	bl	23934 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    840e:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
    8412:	b153      	cbz	r3, 842a <hci_tx_thread+0xc2>
		BT_ERR("Uncleared pending sent_cmd");
    8414:	2145      	movs	r1, #69	; 0x45
    8416:	4824      	ldr	r0, [pc, #144]	; (84a8 <hci_tx_thread+0x140>)
    8418:	f01e fda9 	bl	26f6e <printk>
		net_buf_unref(bt_dev.sent_cmd);
    841c:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
    8420:	f016 fd98 	bl	1ef54 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    8424:	2300      	movs	r3, #0
    8426:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
	bt_dev.sent_cmd = net_buf_ref(buf);
    842a:	4628      	mov	r0, r5
    842c:	f016 fdd6 	bl	1efdc <net_buf_ref>
    8430:	f8c4 00f8 	str.w	r0, [r4, #248]	; 0xf8
		return bt_hci_ecc_send(buf);
    8434:	4628      	mov	r0, r5
    8436:	f7ff fb39 	bl	7aac <bt_hci_ecc_send>
	if (err) {
    843a:	4602      	mov	r2, r0
    843c:	b1e0      	cbz	r0, 8478 <hci_tx_thread+0x110>
		BT_ERR("Unable to send to driver (err %d)", err);
    843e:	2145      	movs	r1, #69	; 0x45
    8440:	481a      	ldr	r0, [pc, #104]	; (84ac <hci_tx_thread+0x144>)
    8442:	f01e fd94 	bl	26f6e <printk>
	z_impl_k_sem_give(sem);
    8446:	481a      	ldr	r0, [pc, #104]	; (84b0 <hci_tx_thread+0x148>)
    8448:	f01b fa38 	bl	238bc <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    844c:	4628      	mov	r0, r5
    844e:	f016 fb75 	bl	1eb3c <net_buf_id>
    8452:	4a18      	ldr	r2, [pc, #96]	; (84b4 <hci_tx_thread+0x14c>)
    8454:	230c      	movs	r3, #12
    8456:	fb03 2000 	mla	r0, r3, r0, r2
    845a:	211f      	movs	r1, #31
    845c:	462a      	mov	r2, r5
    845e:	8840      	ldrh	r0, [r0, #2]
    8460:	f7ff fec0 	bl	81e4 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    8464:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
    8468:	f016 fd74 	bl	1ef54 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    846c:	2300      	movs	r3, #0
		net_buf_unref(buf);
    846e:	4628      	mov	r0, r5
		bt_dev.sent_cmd = NULL;
    8470:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
		net_buf_unref(buf);
    8474:	f016 fd6e 	bl	1ef54 <net_buf_unref>
	for (; count; ev++, count--) {
    8478:	3614      	adds	r6, #20
    847a:	3f01      	subs	r7, #1
    847c:	e79f      	b.n	83be <hci_tx_thread+0x56>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    847e:	2b01      	cmp	r3, #1
    8480:	d1fa      	bne.n	8478 <hci_tx_thread+0x110>
					conn = CONTAINER_OF(ev->fifo,
    8482:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
    8484:	3834      	subs	r0, #52	; 0x34
    8486:	f002 faf5 	bl	aa74 <bt_conn_process_tx>
    848a:	e7f5      	b.n	8478 <hci_tx_thread+0x110>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    848c:	2157      	movs	r1, #87	; 0x57
    848e:	480a      	ldr	r0, [pc, #40]	; (84b8 <hci_tx_thread+0x150>)
    8490:	f01e fd6d 	bl	26f6e <printk>
    8494:	e7f0      	b.n	8478 <hci_tx_thread+0x110>
    8496:	bf00      	nop
    8498:	20000710 	.word	0x20000710
    849c:	0002fa94 	.word	0x0002fa94
    84a0:	200001c0 	.word	0x200001c0
    84a4:	200002bc 	.word	0x200002bc
    84a8:	00030de5 	.word	0x00030de5
    84ac:	00030e05 	.word	0x00030e05
    84b0:	200002a0 	.word	0x200002a0
    84b4:	20002b70 	.word	0x20002b70
    84b8:	00030e2c 	.word	0x00030e2c
    84bc:	00030db1 	.word	0x00030db1

000084c0 <hci_num_completed_packets>:
{
    84c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < evt->num_handles; i++) {
    84c4:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    84c6:	6887      	ldr	r7, [r0, #8]
    84c8:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 85b0 <hci_num_completed_packets+0xf0>
			tx->pending_no_cb = 0U;
    84cc:	46a8      	mov	r8, r5
	for (i = 0; i < evt->num_handles; i++) {
    84ce:	783b      	ldrb	r3, [r7, #0]
    84d0:	429d      	cmp	r5, r3
    84d2:	db01      	blt.n	84d8 <hci_num_completed_packets+0x18>
}
    84d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
    84d8:	eb07 0385 	add.w	r3, r7, r5, lsl #2
    84dc:	f8b3 a001 	ldrh.w	sl, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    84e0:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
    84e4:	4650      	mov	r0, sl
    84e6:	f002 f85b 	bl	a5a0 <bt_conn_lookup_handle>
		if (!conn) {
    84ea:	4604      	mov	r4, r0
    84ec:	b1d0      	cbz	r0, 8524 <hci_num_completed_packets+0x64>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    84ee:	f100 0a28 	add.w	sl, r0, #40	; 0x28
		while (count--) {
    84f2:	b37e      	cbz	r6, 8554 <hci_num_completed_packets+0x94>
	__asm__ volatile(
    84f4:	f04f 0320 	mov.w	r3, #32
    84f8:	f3ef 8211 	mrs	r2, BASEPRI
    84fc:	f383 8811 	msr	BASEPRI, r3
    8500:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
    8504:	69e3      	ldr	r3, [r4, #28]
    8506:	b1a3      	cbz	r3, 8532 <hci_num_completed_packets+0x72>
				conn->pending_no_cb--;
    8508:	3b01      	subs	r3, #1
    850a:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    850c:	f382 8811 	msr	BASEPRI, r2
    8510:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
    8514:	4620      	mov	r0, r4
    8516:	f001 fe41 	bl	a19c <bt_conn_get_pkts>
    851a:	3e01      	subs	r6, #1
    851c:	f01b f9ce 	bl	238bc <z_impl_k_sem_give>
    8520:	b2b6      	uxth	r6, r6
    8522:	e7e6      	b.n	84f2 <hci_num_completed_packets+0x32>
			BT_ERR("No connection for handle %u", handle);
    8524:	4652      	mov	r2, sl
    8526:	2145      	movs	r1, #69	; 0x45
    8528:	481f      	ldr	r0, [pc, #124]	; (85a8 <hci_num_completed_packets+0xe8>)
    852a:	f01e fd20 	bl	26f6e <printk>
	for (i = 0; i < evt->num_handles; i++) {
    852e:	3501      	adds	r5, #1
    8530:	e7cd      	b.n	84ce <hci_num_completed_packets+0xe>
Z_GENLIST_IS_EMPTY(slist)
    8532:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    8534:	b12b      	cbz	r3, 8542 <hci_num_completed_packets+0x82>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    8536:	69a1      	ldr	r1, [r4, #24]
    8538:	6818      	ldr	r0, [r3, #0]
	list->head = node;
    853a:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    853c:	428b      	cmp	r3, r1
	list->tail = node;
    853e:	bf08      	it	eq
    8540:	61a0      	streq	r0, [r4, #24]
    8542:	f382 8811 	msr	BASEPRI, r2
    8546:	f3bf 8f6f 	isb	sy
			if (!node) {
    854a:	b93b      	cbnz	r3, 855c <hci_num_completed_packets+0x9c>
				BT_ERR("packets count mismatch");
    854c:	2145      	movs	r1, #69	; 0x45
    854e:	4817      	ldr	r0, [pc, #92]	; (85ac <hci_num_completed_packets+0xec>)
    8550:	f01e fd0d 	bl	26f6e <printk>
		bt_conn_unref(conn);
    8554:	4620      	mov	r0, r4
    8556:	f001 fff7 	bl	a548 <bt_conn_unref>
    855a:	e7e8      	b.n	852e <hci_num_completed_packets+0x6e>
	__asm__ volatile(
    855c:	f04f 0220 	mov.w	r2, #32
    8560:	f3ef 8111 	mrs	r1, BASEPRI
    8564:	f382 8811 	msr	BASEPRI, r2
    8568:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
    856c:	68da      	ldr	r2, [r3, #12]
    856e:	61e2      	str	r2, [r4, #28]
	parent->next = child;
    8570:	f8c3 8000 	str.w	r8, [r3]
Z_GENLIST_APPEND(slist, snode)
    8574:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
    8576:	f8c3 800c 	str.w	r8, [r3, #12]
    857a:	b98a      	cbnz	r2, 85a0 <hci_num_completed_packets+0xe0>
	list->head = node;
    857c:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
    8580:	f381 8811 	msr	BASEPRI, r1
    8584:	f3bf 8f6f 	isb	sy
    8588:	2100      	movs	r1, #0
    858a:	f104 0030 	add.w	r0, r4, #48	; 0x30
    858e:	f020 fdfe 	bl	2918e <atomic_test_and_set_bit>
    8592:	2800      	cmp	r0, #0
    8594:	d1be      	bne.n	8514 <hci_num_completed_packets+0x54>
		k_queue_append(&work_q->queue, work);
    8596:	4651      	mov	r1, sl
    8598:	4648      	mov	r0, r9
    859a:	f024 fe65 	bl	2d268 <k_queue_append>
    859e:	e7b9      	b.n	8514 <hci_num_completed_packets+0x54>
	parent->next = child;
    85a0:	6013      	str	r3, [r2, #0]
	list->tail = node;
    85a2:	6263      	str	r3, [r4, #36]	; 0x24
    85a4:	e7ec      	b.n	8580 <hci_num_completed_packets+0xc0>
    85a6:	bf00      	nop
    85a8:	00030d56 	.word	0x00030d56
    85ac:	00030d77 	.word	0x00030d77
    85b0:	20002490 	.word	0x20002490

000085b4 <le_adv_start_add_conn>:
	return 0;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
    85b4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
    85b6:	4b28      	ldr	r3, [pc, #160]	; (8658 <le_adv_start_add_conn+0xa4>)
	struct adv_id_check_data check_data = {
		.id = adv->id,
    85b8:	7804      	ldrb	r4, [r0, #0]
{
    85ba:	b085      	sub	sp, #20
    85bc:	4606      	mov	r6, r0
    85be:	460f      	mov	r7, r1
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
    85c0:	f103 0028 	add.w	r0, r3, #40	; 0x28
    85c4:	2106      	movs	r1, #6
    85c6:	f020 fe1c 	bl	29202 <atomic_test_bit>
    85ca:	461a      	mov	r2, r3
    85cc:	b140      	cbz	r0, 85e0 <le_adv_start_add_conn+0x2c>
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE) &&
    85ce:	2108      	movs	r1, #8
    85d0:	f103 0028 	add.w	r0, r3, #40	; 0x28
    85d4:	f020 fe15 	bl	29202 <atomic_test_bit>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
    85d8:	b110      	cbz	r0, 85e0 <le_adv_start_add_conn+0x2c>
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE) &&
    85da:	7e1b      	ldrb	r3, [r3, #24]
    85dc:	42a3      	cmp	r3, r4
    85de:	d134      	bne.n	864a <le_adv_start_add_conn+0x96>
	bt_adv_foreach(adv_id_check_connectable_func, &check_data);
	if (check_data.adv_enabled) {
		return -ENOTSUP;
	}

	bt_dev.adv_conn_id = adv->id;
    85e0:	4635      	mov	r5, r6

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    85e2:	4669      	mov	r1, sp
	bt_dev.adv_conn_id = adv->id;
    85e4:	f815 3b09 	ldrb.w	r3, [r5], #9
    85e8:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    85ec:	4628      	mov	r0, r5
    85ee:	2300      	movs	r3, #0
    85f0:	9300      	str	r3, [sp, #0]
    85f2:	f8cd 3003 	str.w	r3, [sp, #3]
    85f6:	f020 fdf5 	bl	291e4 <bt_addr_le_cmp>
    85fa:	4604      	mov	r4, r0
    85fc:	7830      	ldrb	r0, [r6, #0]
    85fe:	b164      	cbz	r4, 861a <le_adv_start_add_conn+0x66>
		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
		*out_conn = conn;
		return 0;
	}

	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
    8600:	4629      	mov	r1, r5
    8602:	f002 f8cf 	bl	a7a4 <bt_conn_exists_le>
    8606:	4604      	mov	r4, r0
    8608:	bb10      	cbnz	r0, 8650 <le_adv_start_add_conn+0x9c>
		return -EINVAL;
	}

	conn = bt_conn_add_le(adv->id, &adv->target_addr);
    860a:	4629      	mov	r1, r5
    860c:	7830      	ldrb	r0, [r6, #0]
    860e:	f001 ff6d 	bl	a4ec <bt_conn_add_le>
	if (!conn) {
    8612:	4605      	mov	r5, r0
    8614:	b178      	cbz	r0, 8636 <le_adv_start_add_conn+0x82>
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    8616:	2105      	movs	r1, #5
    8618:	e013      	b.n	8642 <le_adv_start_add_conn+0x8e>
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
    861a:	f06f 03ff 	mvn.w	r3, #255	; 0xff
    861e:	9302      	str	r3, [sp, #8]
    8620:	a902      	add	r1, sp, #8
    8622:	f64f 73ff 	movw	r3, #65535	; 0xffff
    8626:	f8ad 300c 	strh.w	r3, [sp, #12]
    862a:	f88d 300e 	strb.w	r3, [sp, #14]
    862e:	f001 ff5d 	bl	a4ec <bt_conn_add_le>
		if (!conn) {
    8632:	4605      	mov	r5, r0
    8634:	b920      	cbnz	r0, 8640 <le_adv_start_add_conn+0x8c>
			return -ENOMEM;
    8636:	f06f 040b 	mvn.w	r4, #11
	*out_conn = conn;
	return 0;
}
    863a:	4620      	mov	r0, r4
    863c:	b005      	add	sp, #20
    863e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
    8640:	2104      	movs	r1, #4
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    8642:	f001 ffb5 	bl	a5b0 <bt_conn_set_state>
	*out_conn = conn;
    8646:	603d      	str	r5, [r7, #0]
	return 0;
    8648:	e7f7      	b.n	863a <le_adv_start_add_conn+0x86>
		return -ENOTSUP;
    864a:	f06f 0485 	mvn.w	r4, #133	; 0x85
    864e:	e7f4      	b.n	863a <le_adv_start_add_conn+0x86>
		return -EINVAL;
    8650:	f06f 0415 	mvn.w	r4, #21
    8654:	e7f1      	b.n	863a <le_adv_start_add_conn+0x86>
    8656:	bf00      	nop
    8658:	200001c0 	.word	0x200001c0

0000865c <id_create.isra.22>:
static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    865c:	b530      	push	{r4, r5, lr}
    865e:	4d17      	ldr	r5, [pc, #92]	; (86bc <id_create.isra.22+0x60>)
    8660:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    8664:	b085      	sub	sp, #20
    8666:	4405      	add	r5, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    8668:	460c      	mov	r4, r1
    866a:	b1a9      	cbz	r1, 8698 <id_create.isra.22+0x3c>
    866c:	2300      	movs	r3, #0
    866e:	a902      	add	r1, sp, #8
    8670:	4620      	mov	r0, r4
    8672:	9302      	str	r3, [sp, #8]
    8674:	f8cd 300b 	str.w	r3, [sp, #11]
    8678:	f020 fdb4 	bl	291e4 <bt_addr_le_cmp>
    867c:	b160      	cbz	r0, 8698 <id_create.isra.22+0x3c>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    867e:	4621      	mov	r1, r4
    8680:	4628      	mov	r0, r5
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    8682:	f020 fdb7 	bl	291f4 <bt_addr_le_copy>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    8686:	2101      	movs	r1, #1
    8688:	480d      	ldr	r0, [pc, #52]	; (86c0 <id_create.isra.22+0x64>)
    868a:	f020 fdba 	bl	29202 <atomic_test_bit>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    868e:	b108      	cbz	r0, 8694 <id_create.isra.22+0x38>
		bt_settings_save_id();
    8690:	f7ff fb54 	bl	7d3c <bt_settings_save_id>
}
    8694:	b005      	add	sp, #20
    8696:	bd30      	pop	{r4, r5, pc}
			bt_addr_le_create_static(&new_addr);
    8698:	4668      	mov	r0, sp
    869a:	f020 fd4c 	bl	29136 <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
    869e:	4668      	mov	r0, sp
    86a0:	f7ff fd44 	bl	812c <id_find>
    86a4:	2800      	cmp	r0, #0
    86a6:	daf7      	bge.n	8698 <id_create.isra.22+0x3c>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    86a8:	4669      	mov	r1, sp
    86aa:	4628      	mov	r0, r5
    86ac:	f020 fda2 	bl	291f4 <bt_addr_le_copy>
		if (addr) {
    86b0:	2c00      	cmp	r4, #0
    86b2:	d0e8      	beq.n	8686 <id_create.isra.22+0x2a>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    86b4:	4629      	mov	r1, r5
    86b6:	4620      	mov	r0, r4
    86b8:	e7e3      	b.n	8682 <id_create.isra.22+0x26>
    86ba:	bf00      	nop
    86bc:	200001c0 	.word	0x200001c0
    86c0:	20000254 	.word	0x20000254

000086c4 <le_adv_report>:
{
    86c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
    86c8:	f100 0508 	add.w	r5, r0, #8
    86cc:	b08b      	sub	sp, #44	; 0x2c
    86ce:	4604      	mov	r4, r0
    86d0:	4628      	mov	r0, r5
    86d2:	f024 f940 	bl	2c956 <net_buf_simple_pull_u8>
	if (scan_dev_found_cb) {
    86d6:	f8df b154 	ldr.w	fp, [pc, #340]	; 882c <le_adv_report+0x168>
    86da:	4680      	mov	r8, r0
	while (num_reports--) {
    86dc:	f1b8 0f00 	cmp.w	r8, #0
    86e0:	d006      	beq.n	86f0 <le_adv_report+0x2c>
		if (buf->len < sizeof(*evt)) {
    86e2:	89a3      	ldrh	r3, [r4, #12]
    86e4:	2b08      	cmp	r3, #8
    86e6:	d806      	bhi.n	86f6 <le_adv_report+0x32>
			BT_ERR("Unexpected end of buffer");
    86e8:	2145      	movs	r1, #69	; 0x45
    86ea:	484c      	ldr	r0, [pc, #304]	; (881c <le_adv_report+0x158>)
    86ec:	f01e fc3f 	bl	26f6e <printk>
}
    86f0:	b00b      	add	sp, #44	; 0x2c
    86f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
    86f6:	2109      	movs	r1, #9
    86f8:	4628      	mov	r0, r5
    86fa:	f016 fd5d 	bl	1f1b8 <net_buf_simple_pull_mem>
		adv_info.rssi = evt->data[evt->length];
    86fe:	f890 9008 	ldrb.w	r9, [r0, #8]
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
    8702:	237f      	movs	r3, #127	; 0x7f
    8704:	f88d 301e 	strb.w	r3, [sp, #30]
		adv_info.rssi = evt->data[evt->length];
    8708:	eb00 0309 	add.w	r3, r0, r9
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    870c:	2201      	movs	r2, #1
		adv_info.rssi = evt->data[evt->length];
    870e:	7a5b      	ldrb	r3, [r3, #9]
    8710:	f88d 301d 	strb.w	r3, [sp, #29]
		adv_info.sid = BT_GAP_SID_INVALID;
    8714:	23ff      	movs	r3, #255	; 0xff
    8716:	f88d 301c 	strb.w	r3, [sp, #28]
		adv_info.interval = 0U;
    871a:	2300      	movs	r3, #0
    871c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    8720:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
		adv_info.adv_type = evt->evt_type;
    8724:	7802      	ldrb	r2, [r0, #0]
    8726:	f88d 201f 	strb.w	r2, [sp, #31]
    872a:	2a04      	cmp	r2, #4
    872c:	bf9c      	itt	ls
    872e:	4b3c      	ldrls	r3, [pc, #240]	; (8820 <le_adv_report+0x15c>)
    8730:	5c9b      	ldrbls	r3, [r3, r2]
		adv_info.adv_props = get_adv_props(evt->evt_type);
    8732:	f8ad 3020 	strh.w	r3, [sp, #32]
    8736:	4606      	mov	r6, r0
		le_adv_recv(&evt->addr, &adv_info, buf, evt->length);
    8738:	1c43      	adds	r3, r0, #1
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
    873a:	2106      	movs	r1, #6
    873c:	4839      	ldr	r0, [pc, #228]	; (8824 <le_adv_report+0x160>)
    873e:	f020 fd60 	bl	29202 <atomic_test_bit>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    8742:	b168      	cbz	r0, 8760 <le_adv_report+0x9c>
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
    8744:	f8bd 2020 	ldrh.w	r2, [sp, #32]
    8748:	0752      	lsls	r2, r2, #29
    874a:	d509      	bpl.n	8760 <le_adv_report+0x9c>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
    874c:	7a31      	ldrb	r1, [r6, #8]
	return net_buf_simple_pull(&buf->b, len);
    874e:	4628      	mov	r0, r5
    8750:	3101      	adds	r1, #1
    8752:	f108 38ff 	add.w	r8, r8, #4294967295
    8756:	f016 fd13 	bl	1f180 <net_buf_simple_pull>
    875a:	fa5f f888 	uxtb.w	r8, r8
    875e:	e7bd      	b.n	86dc <le_adv_report+0x18>
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
    8760:	7872      	ldrb	r2, [r6, #1]
    8762:	1e91      	subs	r1, r2, #2
    8764:	2901      	cmp	r1, #1
    8766:	d84c      	bhi.n	8802 <le_adv_report+0x13e>
		bt_addr_le_copy(&id_addr, addr);
    8768:	4619      	mov	r1, r3
    876a:	a802      	add	r0, sp, #8
    876c:	f020 fd42 	bl	291f4 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    8770:	f89d 3008 	ldrb.w	r3, [sp, #8]
    8774:	3b02      	subs	r3, #2
    8776:	f88d 3008 	strb.w	r3, [sp, #8]
	info->addr = &id_addr;
    877a:	ab02      	add	r3, sp, #8
    877c:	9306      	str	r3, [sp, #24]
	if (scan_dev_found_cb) {
    877e:	f8db 3000 	ldr.w	r3, [fp]
    8782:	b1b3      	cbz	r3, 87b2 <le_adv_report+0xee>
	state->offset = net_buf_simple_headroom(buf);
    8784:	4628      	mov	r0, r5
    8786:	f024 f920 	bl	2c9ca <net_buf_simple_headroom>
	state->len = buf->len;
    878a:	89a3      	ldrh	r3, [r4, #12]
    878c:	9300      	str	r3, [sp, #0]
	state->offset = net_buf_simple_headroom(buf);
    878e:	4682      	mov	sl, r0
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
    8790:	462b      	mov	r3, r5
		buf->len = len;
    8792:	f8a4 900c 	strh.w	r9, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
    8796:	f89d 201f 	ldrb.w	r2, [sp, #31]
    879a:	f99d 101d 	ldrsb.w	r1, [sp, #29]
    879e:	f8db 7000 	ldr.w	r7, [fp]
    87a2:	a802      	add	r0, sp, #8
    87a4:	47b8      	blx	r7
	buf->data = buf->__buf + state->offset;
    87a6:	6923      	ldr	r3, [r4, #16]
    87a8:	fa13 f38a 	uxtah	r3, r3, sl
    87ac:	60a3      	str	r3, [r4, #8]
	buf->len = state->len;
    87ae:	9b00      	ldr	r3, [sp, #0]
    87b0:	81a3      	strh	r3, [r4, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    87b2:	4b1d      	ldr	r3, [pc, #116]	; (8828 <le_adv_report+0x164>)
    87b4:	681b      	ldr	r3, [r3, #0]
    87b6:	2b00      	cmp	r3, #0
    87b8:	d0c8      	beq.n	874c <le_adv_report+0x88>
    87ba:	f1b3 0208 	subs.w	r2, r3, #8
    87be:	d0c5      	beq.n	874c <le_adv_report+0x88>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    87c0:	681f      	ldr	r7, [r3, #0]
    87c2:	b107      	cbz	r7, 87c6 <le_adv_report+0x102>
    87c4:	3f08      	subs	r7, #8
		if (listener->recv) {
    87c6:	6813      	ldr	r3, [r2, #0]
    87c8:	9201      	str	r2, [sp, #4]
    87ca:	b193      	cbz	r3, 87f2 <le_adv_report+0x12e>
	state->offset = net_buf_simple_headroom(buf);
    87cc:	4628      	mov	r0, r5
    87ce:	f024 f8fc 	bl	2c9ca <net_buf_simple_headroom>
			listener->recv(info, &buf->b);
    87d2:	9a01      	ldr	r2, [sp, #4]
	state->len = buf->len;
    87d4:	89a3      	ldrh	r3, [r4, #12]
    87d6:	6812      	ldr	r2, [r2, #0]
			buf->len = len;
    87d8:	f8a4 900c 	strh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    87dc:	4682      	mov	sl, r0
			listener->recv(info, &buf->b);
    87de:	4629      	mov	r1, r5
    87e0:	a806      	add	r0, sp, #24
	state->len = buf->len;
    87e2:	9300      	str	r3, [sp, #0]
    87e4:	4790      	blx	r2
	buf->data = buf->__buf + state->offset;
    87e6:	6922      	ldr	r2, [r4, #16]
	buf->len = state->len;
    87e8:	9b00      	ldr	r3, [sp, #0]
    87ea:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf + state->offset;
    87ec:	fa12 f28a 	uxtah	r2, r2, sl
    87f0:	60a2      	str	r2, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    87f2:	2f00      	cmp	r7, #0
    87f4:	d0aa      	beq.n	874c <le_adv_report+0x88>
    87f6:	68bb      	ldr	r3, [r7, #8]
    87f8:	b103      	cbz	r3, 87fc <le_adv_report+0x138>
    87fa:	3b08      	subs	r3, #8
		adv_info.adv_type = evt->evt_type;
    87fc:	463a      	mov	r2, r7
    87fe:	461f      	mov	r7, r3
    8800:	e7e1      	b.n	87c6 <le_adv_report+0x102>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
    8802:	2aff      	cmp	r2, #255	; 0xff
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
    8804:	bf06      	itte	eq
    8806:	2300      	moveq	r3, #0
    8808:	a904      	addeq	r1, sp, #16
		bt_addr_le_copy(&id_addr,
    880a:	4619      	movne	r1, r3
    880c:	a802      	add	r0, sp, #8
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
    880e:	bf04      	itt	eq
    8810:	9304      	streq	r3, [sp, #16]
    8812:	f8cd 3013 	streq.w	r3, [sp, #19]
		bt_addr_le_copy(&id_addr,
    8816:	f020 fced 	bl	291f4 <bt_addr_le_copy>
    881a:	e7ae      	b.n	877a <le_adv_report+0xb6>
    881c:	00030e7b 	.word	0x00030e7b
    8820:	0003087b 	.word	0x0003087b
    8824:	20000254 	.word	0x20000254
    8828:	20002b94 	.word	0x20002b94
    882c:	20002b9c 	.word	0x20002b9c

00008830 <hci_cmd_status>:
{
    8830:	b538      	push	{r3, r4, r5, lr}
	return net_buf_simple_pull_mem(&buf->b, len);
    8832:	2104      	movs	r1, #4
    8834:	4604      	mov	r4, r0
    8836:	3008      	adds	r0, #8
    8838:	f016 fcbe 	bl	1f1b8 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    883c:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    883e:	7801      	ldrb	r1, [r0, #0]
    8840:	8840      	ldrh	r0, [r0, #2]
    8842:	4622      	mov	r2, r4
    8844:	f7ff fcce 	bl	81e4 <hci_cmd_done>
	if (ncmd) {
    8848:	b125      	cbz	r5, 8854 <hci_cmd_status+0x24>
    884a:	4803      	ldr	r0, [pc, #12]	; (8858 <hci_cmd_status+0x28>)
}
    884c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    8850:	f01b b834 	b.w	238bc <z_impl_k_sem_give>
    8854:	bd38      	pop	{r3, r4, r5, pc}
    8856:	bf00      	nop
    8858:	200002a0 	.word	0x200002a0

0000885c <hci_cmd_complete>:
{
    885c:	b538      	push	{r3, r4, r5, lr}
    885e:	2103      	movs	r1, #3
    8860:	4604      	mov	r4, r0
    8862:	3008      	adds	r0, #8
    8864:	f016 fca8 	bl	1f1b8 <net_buf_simple_pull_mem>
	status = buf->data[0];
    8868:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    886a:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    886c:	7819      	ldrb	r1, [r3, #0]
    886e:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    8872:	4622      	mov	r2, r4
    8874:	f7ff fcb6 	bl	81e4 <hci_cmd_done>
	if (ncmd) {
    8878:	b125      	cbz	r5, 8884 <hci_cmd_complete+0x28>
    887a:	4803      	ldr	r0, [pc, #12]	; (8888 <hci_cmd_complete+0x2c>)
}
    887c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    8880:	f01b b81c 	b.w	238bc <z_impl_k_sem_give>
    8884:	bd38      	pop	{r3, r4, r5, pc}
    8886:	bf00      	nop
    8888:	200002a0 	.word	0x200002a0

0000888c <bt_hci_cmd_create>:
{
    888c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return net_buf_alloc_fixed(pool, timeout);
    8890:	f04f 32ff 	mov.w	r2, #4294967295
    8894:	4682      	mov	sl, r0
    8896:	f04f 33ff 	mov.w	r3, #4294967295
    889a:	481c      	ldr	r0, [pc, #112]	; (890c <bt_hci_cmd_create+0x80>)
    889c:	4689      	mov	r9, r1
    889e:	f024 f82c 	bl	2c8fa <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
    88a2:	4604      	mov	r4, r0
    88a4:	b950      	cbnz	r0, 88bc <bt_hci_cmd_create+0x30>
    88a6:	491a      	ldr	r1, [pc, #104]	; (8910 <bt_hci_cmd_create+0x84>)
    88a8:	481a      	ldr	r0, [pc, #104]	; (8914 <bt_hci_cmd_create+0x88>)
    88aa:	f44f 7281 	mov.w	r2, #258	; 0x102
    88ae:	f01e fb5e 	bl	26f6e <printk>
    88b2:	f44f 7181 	mov.w	r1, #258	; 0x102
    88b6:	4816      	ldr	r0, [pc, #88]	; (8910 <bt_hci_cmd_create+0x84>)
    88b8:	f01e fdd2 	bl	27460 <assert_post_action>
	net_buf_simple_reserve(&buf->b, reserve);
    88bc:	f104 0808 	add.w	r8, r4, #8
    88c0:	2100      	movs	r1, #0
    88c2:	2600      	movs	r6, #0
    88c4:	4640      	mov	r0, r8
    88c6:	f016 fa5b 	bl	1ed80 <net_buf_simple_reserve>
    88ca:	7526      	strb	r6, [r4, #20]
	cmd(buf)->opcode = opcode;
    88cc:	4620      	mov	r0, r4
    88ce:	f016 f935 	bl	1eb3c <net_buf_id>
    88d2:	4f11      	ldr	r7, [pc, #68]	; (8918 <bt_hci_cmd_create+0x8c>)
    88d4:	250c      	movs	r5, #12
    88d6:	fb05 7000 	mla	r0, r5, r0, r7
    88da:	f8a0 a002 	strh.w	sl, [r0, #2]
	cmd(buf)->sync = NULL;
    88de:	4620      	mov	r0, r4
    88e0:	f016 f92c 	bl	1eb3c <net_buf_id>
    88e4:	fb05 7000 	mla	r0, r5, r0, r7
    88e8:	6086      	str	r6, [r0, #8]
	cmd(buf)->state = NULL;
    88ea:	4620      	mov	r0, r4
    88ec:	f016 f926 	bl	1eb3c <net_buf_id>
    88f0:	fb05 7000 	mla	r0, r5, r0, r7
	return net_buf_simple_add(&buf->b, len);
    88f4:	2103      	movs	r1, #3
    88f6:	6046      	str	r6, [r0, #4]
    88f8:	4640      	mov	r0, r8
    88fa:	f016 fc7b 	bl	1f1f4 <net_buf_simple_add>
	hdr->param_len = param_len;
    88fe:	f880 9002 	strb.w	r9, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    8902:	f8a0 a000 	strh.w	sl, [r0]
}
    8906:	4620      	mov	r0, r4
    8908:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    890c:	2000145c 	.word	0x2000145c
    8910:	00030db1 	.word	0x00030db1
    8914:	0002fa94 	.word	0x0002fa94
    8918:	20002b70 	.word	0x20002b70

0000891c <bt_hci_cmd_send>:
{
    891c:	b538      	push	{r3, r4, r5, lr}
    891e:	4604      	mov	r4, r0
	if (!buf) {
    8920:	460d      	mov	r5, r1
    8922:	b919      	cbnz	r1, 892c <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    8924:	f7ff ffb2 	bl	888c <bt_hci_cmd_create>
		if (!buf) {
    8928:	4605      	mov	r5, r0
    892a:	b1c0      	cbz	r0, 895e <bt_hci_cmd_send+0x42>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    892c:	f640 4335 	movw	r3, #3125	; 0xc35
    8930:	429c      	cmp	r4, r3
    8932:	d10e      	bne.n	8952 <bt_hci_cmd_send+0x36>
		return bt_hci_ecc_send(buf);
    8934:	4628      	mov	r0, r5
    8936:	f7ff f8b9 	bl	7aac <bt_hci_ecc_send>
		if (err) {
    893a:	4604      	mov	r4, r0
    893c:	b138      	cbz	r0, 894e <bt_hci_cmd_send+0x32>
			BT_ERR("Unable to send to driver (err %d)", err);
    893e:	4602      	mov	r2, r0
    8940:	2145      	movs	r1, #69	; 0x45
    8942:	4808      	ldr	r0, [pc, #32]	; (8964 <bt_hci_cmd_send+0x48>)
    8944:	f01e fb13 	bl	26f6e <printk>
			net_buf_unref(buf);
    8948:	4628      	mov	r0, r5
    894a:	f016 fb03 	bl	1ef54 <net_buf_unref>
}
    894e:	4620      	mov	r0, r4
    8950:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    8952:	4629      	mov	r1, r5
    8954:	4804      	ldr	r0, [pc, #16]	; (8968 <bt_hci_cmd_send+0x4c>)
    8956:	f016 facf 	bl	1eef8 <net_buf_put>
	return 0;
    895a:	2400      	movs	r4, #0
    895c:	e7f7      	b.n	894e <bt_hci_cmd_send+0x32>
			return -ENOBUFS;
    895e:	f06f 0468 	mvn.w	r4, #104	; 0x68
    8962:	e7f4      	b.n	894e <bt_hci_cmd_send+0x32>
    8964:	00030e05 	.word	0x00030e05
    8968:	200002bc 	.word	0x200002bc

0000896c <le_conn_param_neg_reply>:
{
    896c:	b570      	push	{r4, r5, r6, lr}
    896e:	4606      	mov	r6, r0
    8970:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    8972:	f242 0021 	movw	r0, #8225	; 0x2021
    8976:	2103      	movs	r1, #3
    8978:	f7ff ff88 	bl	888c <bt_hci_cmd_create>
	if (!buf) {
    897c:	4604      	mov	r4, r0
    897e:	b928      	cbnz	r0, 898c <le_conn_param_neg_reply+0x20>
		BT_ERR("Unable to allocate buffer");
    8980:	2145      	movs	r1, #69	; 0x45
    8982:	4809      	ldr	r0, [pc, #36]	; (89a8 <le_conn_param_neg_reply+0x3c>)
}
    8984:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
    8988:	f01e baf1 	b.w	26f6e <printk>
    898c:	2103      	movs	r1, #3
    898e:	3008      	adds	r0, #8
    8990:	f016 fc30 	bl	1f1f4 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    8994:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    8996:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    8998:	4621      	mov	r1, r4
    899a:	f242 0021 	movw	r0, #8225	; 0x2021
}
    899e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    89a2:	f7ff bfbb 	b.w	891c <bt_hci_cmd_send>
    89a6:	bf00      	nop
    89a8:	00030eb1 	.word	0x00030eb1

000089ac <le_conn_param_req>:
{
    89ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    89ae:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    89b0:	78d9      	ldrb	r1, [r3, #3]
    89b2:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    89b4:	881d      	ldrh	r5, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    89b6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    89ba:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    89be:	7959      	ldrb	r1, [r3, #5]
    89c0:	791a      	ldrb	r2, [r3, #4]
    89c2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    89c6:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    89ca:	799a      	ldrb	r2, [r3, #6]
    89cc:	79d9      	ldrb	r1, [r3, #7]
    89ce:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    89d2:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    89d6:	7a1a      	ldrb	r2, [r3, #8]
    89d8:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
    89da:	b2ac      	uxth	r4, r5
	param.timeout = sys_le16_to_cpu(evt->timeout);
    89dc:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
    89e0:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
    89e2:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
    89e6:	f001 fddb 	bl	a5a0 <bt_conn_lookup_handle>
	if (!conn) {
    89ea:	4606      	mov	r6, r0
    89ec:	b950      	cbnz	r0, 8a04 <le_conn_param_req+0x58>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    89ee:	2145      	movs	r1, #69	; 0x45
    89f0:	481c      	ldr	r0, [pc, #112]	; (8a64 <le_conn_param_req+0xb8>)
    89f2:	4622      	mov	r2, r4
    89f4:	f01e fabb 	bl	26f6e <printk>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
    89f8:	2102      	movs	r1, #2
    89fa:	4620      	mov	r0, r4
    89fc:	f7ff ffb6 	bl	896c <le_conn_param_neg_reply>
}
    8a00:	b002      	add	sp, #8
    8a02:	bd70      	pop	{r4, r5, r6, pc}
	if (!le_param_req(conn, &param)) {
    8a04:	4669      	mov	r1, sp
    8a06:	f001 fc01 	bl	a20c <le_param_req>
    8a0a:	b938      	cbnz	r0, 8a1c <le_conn_param_req+0x70>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
    8a0c:	211e      	movs	r1, #30
    8a0e:	4620      	mov	r0, r4
    8a10:	f7ff ffac 	bl	896c <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    8a14:	4630      	mov	r0, r6
    8a16:	f001 fd97 	bl	a548 <bt_conn_unref>
    8a1a:	e7f1      	b.n	8a00 <le_conn_param_req+0x54>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    8a1c:	210e      	movs	r1, #14
    8a1e:	f242 0020 	movw	r0, #8224	; 0x2020
    8a22:	f7ff ff33 	bl	888c <bt_hci_cmd_create>
	if (!buf) {
    8a26:	4604      	mov	r4, r0
    8a28:	2800      	cmp	r0, #0
    8a2a:	d0f3      	beq.n	8a14 <le_conn_param_req+0x68>
    8a2c:	210e      	movs	r1, #14
    8a2e:	3008      	adds	r0, #8
    8a30:	f016 fbe0 	bl	1f1f4 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
    8a34:	2300      	movs	r3, #0
    8a36:	6043      	str	r3, [r0, #4]
    8a38:	6083      	str	r3, [r0, #8]
    8a3a:	8183      	strh	r3, [r0, #12]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    8a3c:	f8bd 3000 	ldrh.w	r3, [sp]
    8a40:	8043      	strh	r3, [r0, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    8a42:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    8a46:	8083      	strh	r3, [r0, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    8a48:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    8a4c:	80c3      	strh	r3, [r0, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    8a4e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
    8a52:	8005      	strh	r5, [r0, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    8a54:	8103      	strh	r3, [r0, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    8a56:	4621      	mov	r1, r4
    8a58:	f242 0020 	movw	r0, #8224	; 0x2020
    8a5c:	f7ff ff5e 	bl	891c <bt_hci_cmd_send>
    8a60:	e7d8      	b.n	8a14 <le_conn_param_req+0x68>
    8a62:	bf00      	nop
    8a64:	00030ed0 	.word	0x00030ed0

00008a68 <conn_auto_initiate>:
{
    8a68:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    8a6a:	7a83      	ldrb	r3, [r0, #10]
    8a6c:	2b07      	cmp	r3, #7
{
    8a6e:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    8a70:	d11f      	bne.n	8ab2 <conn_auto_initiate+0x4a>
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    8a72:	210d      	movs	r1, #13
    8a74:	3004      	adds	r0, #4
    8a76:	f020 fbc4 	bl	29202 <atomic_test_bit>
    8a7a:	b9d0      	cbnz	r0, 8ab2 <conn_auto_initiate+0x4a>
    8a7c:	78e3      	ldrb	r3, [r4, #3]
    8a7e:	b123      	cbz	r3, 8a8a <conn_auto_initiate+0x22>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
    8a80:	4b0c      	ldr	r3, [pc, #48]	; (8ab4 <conn_auto_initiate+0x4c>)
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
    8a82:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    8a86:	071b      	lsls	r3, r3, #28
    8a88:	d513      	bpl.n	8ab2 <conn_auto_initiate+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    8a8a:	2102      	movs	r1, #2
    8a8c:	f242 0016 	movw	r0, #8214	; 0x2016
    8a90:	f7ff fefc 	bl	888c <bt_hci_cmd_create>
	if (!buf) {
    8a94:	4605      	mov	r5, r0
    8a96:	b160      	cbz	r0, 8ab2 <conn_auto_initiate+0x4a>
    8a98:	2102      	movs	r1, #2
    8a9a:	3008      	adds	r0, #8
    8a9c:	f016 fbaa 	bl	1f1f4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    8aa0:	8823      	ldrh	r3, [r4, #0]
    8aa2:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    8aa4:	4629      	mov	r1, r5
    8aa6:	f242 0016 	movw	r0, #8214	; 0x2016
}
    8aaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    8aae:	f7ff bf35 	b.w	891c <bt_hci_cmd_send>
}
    8ab2:	bd38      	pop	{r3, r4, r5, pc}
    8ab4:	200001c0 	.word	0x200001c0

00008ab8 <le_remote_feat_complete>:
{
    8ab8:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    8aba:	6884      	ldr	r4, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    8abc:	f8b4 6001 	ldrh.w	r6, [r4, #1]
	conn = bt_conn_lookup_handle(handle);
    8ac0:	4630      	mov	r0, r6
    8ac2:	f001 fd6d 	bl	a5a0 <bt_conn_lookup_handle>
	if (!conn) {
    8ac6:	4605      	mov	r5, r0
    8ac8:	b930      	cbnz	r0, 8ad8 <le_remote_feat_complete+0x20>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    8aca:	4632      	mov	r2, r6
    8acc:	2145      	movs	r1, #69	; 0x45
    8ace:	480d      	ldr	r0, [pc, #52]	; (8b04 <le_remote_feat_complete+0x4c>)
}
    8ad0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    8ad4:	f01e ba4b 	b.w	26f6e <printk>
	if (!evt->status) {
    8ad8:	7823      	ldrb	r3, [r4, #0]
    8ada:	b933      	cbnz	r3, 8aea <le_remote_feat_complete+0x32>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    8adc:	f854 3f03 	ldr.w	r3, [r4, #3]!
    8ae0:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
    8ae4:	6863      	ldr	r3, [r4, #4]
    8ae6:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
    8aea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    8aee:	1d28      	adds	r0, r5, #4
    8af0:	f020 fb3e 	bl	29170 <atomic_or>
	conn_auto_initiate(conn);
    8af4:	4628      	mov	r0, r5
    8af6:	f7ff ffb7 	bl	8a68 <conn_auto_initiate>
	bt_conn_unref(conn);
    8afa:	4628      	mov	r0, r5
}
    8afc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    8b00:	f001 bd22 	b.w	a548 <bt_conn_unref>
    8b04:	00030ed0 	.word	0x00030ed0

00008b08 <bt_hci_cmd_send_sync>:
{
    8b08:	b5f0      	push	{r4, r5, r6, r7, lr}
    8b0a:	4607      	mov	r7, r0
    8b0c:	b087      	sub	sp, #28
    8b0e:	4615      	mov	r5, r2
	if (!buf) {
    8b10:	460c      	mov	r4, r1
    8b12:	b921      	cbnz	r1, 8b1e <bt_hci_cmd_send_sync+0x16>
		buf = bt_hci_cmd_create(opcode, 0);
    8b14:	f7ff feba 	bl	888c <bt_hci_cmd_create>
		if (!buf) {
    8b18:	4604      	mov	r4, r0
    8b1a:	2800      	cmp	r0, #0
    8b1c:	d048      	beq.n	8bb0 <bt_hci_cmd_send_sync+0xa8>
	return z_impl_k_sem_init(sem, initial_count, limit);
    8b1e:	2201      	movs	r2, #1
    8b20:	2100      	movs	r1, #0
    8b22:	4668      	mov	r0, sp
    8b24:	f024 fbf9 	bl	2d31a <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    8b28:	4620      	mov	r0, r4
    8b2a:	f016 f807 	bl	1eb3c <net_buf_id>
    8b2e:	4e22      	ldr	r6, [pc, #136]	; (8bb8 <bt_hci_cmd_send_sync+0xb0>)
    8b30:	230c      	movs	r3, #12
    8b32:	fb03 6000 	mla	r0, r3, r0, r6
    8b36:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_ref(buf);
    8b3a:	4620      	mov	r0, r4
    8b3c:	f016 fa4e 	bl	1efdc <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    8b40:	4621      	mov	r1, r4
    8b42:	481e      	ldr	r0, [pc, #120]	; (8bbc <bt_hci_cmd_send_sync+0xb4>)
    8b44:	f016 f9d8 	bl	1eef8 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    8b48:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    8b4c:	2300      	movs	r3, #0
    8b4e:	4668      	mov	r0, sp
    8b50:	f01a fef0 	bl	23934 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    8b54:	b158      	cbz	r0, 8b6e <bt_hci_cmd_send_sync+0x66>
    8b56:	f240 124d 	movw	r2, #333	; 0x14d
    8b5a:	4919      	ldr	r1, [pc, #100]	; (8bc0 <bt_hci_cmd_send_sync+0xb8>)
    8b5c:	4819      	ldr	r0, [pc, #100]	; (8bc4 <bt_hci_cmd_send_sync+0xbc>)
    8b5e:	f01e fa06 	bl	26f6e <printk>
    8b62:	4040      	eors	r0, r0
    8b64:	f380 8811 	msr	BASEPRI, r0
    8b68:	f04f 0003 	mov.w	r0, #3
    8b6c:	df02      	svc	2
	status = cmd(buf)->status;
    8b6e:	4620      	mov	r0, r4
    8b70:	f015 ffe4 	bl	1eb3c <net_buf_id>
    8b74:	230c      	movs	r3, #12
    8b76:	4358      	muls	r0, r3
    8b78:	5c36      	ldrb	r6, [r6, r0]
	if (status) {
    8b7a:	b186      	cbz	r6, 8b9e <bt_hci_cmd_send_sync+0x96>
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
    8b7c:	4633      	mov	r3, r6
    8b7e:	463a      	mov	r2, r7
    8b80:	2157      	movs	r1, #87	; 0x57
    8b82:	4811      	ldr	r0, [pc, #68]	; (8bc8 <bt_hci_cmd_send_sync+0xc0>)
    8b84:	f01e f9f3 	bl	26f6e <printk>
		net_buf_unref(buf);
    8b88:	4620      	mov	r0, r4
    8b8a:	f016 f9e3 	bl	1ef54 <net_buf_unref>
			return -EIO;
    8b8e:	2e09      	cmp	r6, #9
    8b90:	bf0c      	ite	eq
    8b92:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
    8b96:	f06f 0004 	mvnne.w	r0, #4
}
    8b9a:	b007      	add	sp, #28
    8b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rsp) {
    8b9e:	b115      	cbz	r5, 8ba6 <bt_hci_cmd_send_sync+0x9e>
		*rsp = buf;
    8ba0:	602c      	str	r4, [r5, #0]
	return 0;
    8ba2:	4630      	mov	r0, r6
    8ba4:	e7f9      	b.n	8b9a <bt_hci_cmd_send_sync+0x92>
		net_buf_unref(buf);
    8ba6:	4620      	mov	r0, r4
    8ba8:	f016 f9d4 	bl	1ef54 <net_buf_unref>
	return 0;
    8bac:	4628      	mov	r0, r5
    8bae:	e7f4      	b.n	8b9a <bt_hci_cmd_send_sync+0x92>
			return -ENOBUFS;
    8bb0:	f06f 0068 	mvn.w	r0, #104	; 0x68
    8bb4:	e7f1      	b.n	8b9a <bt_hci_cmd_send_sync+0x92>
    8bb6:	bf00      	nop
    8bb8:	20002b70 	.word	0x20002b70
    8bbc:	200002bc 	.word	0x200002bc
    8bc0:	00030db1 	.word	0x00030db1
    8bc4:	0002fa94 	.word	0x0002fa94
    8bc8:	000308c5 	.word	0x000308c5

00008bcc <set_le_scan_enable_legacy>:
{
    8bcc:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    8bce:	2102      	movs	r1, #2
{
    8bd0:	b085      	sub	sp, #20
    8bd2:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    8bd4:	f242 000c 	movw	r0, #8204	; 0x200c
    8bd8:	f7ff fe58 	bl	888c <bt_hci_cmd_create>
	if (!buf) {
    8bdc:	4605      	mov	r5, r0
    8bde:	b340      	cbz	r0, 8c32 <set_le_scan_enable_legacy+0x66>
    8be0:	2102      	movs	r1, #2
    8be2:	3008      	adds	r0, #8
    8be4:	f016 fb06 	bl	1f1f4 <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    8be8:	2c01      	cmp	r4, #1
    8bea:	4603      	mov	r3, r0
    8bec:	d11e      	bne.n	8c2c <set_le_scan_enable_legacy+0x60>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
    8bee:	2108      	movs	r1, #8
    8bf0:	4811      	ldr	r0, [pc, #68]	; (8c38 <set_le_scan_enable_legacy+0x6c>)
    8bf2:	f020 fb06 	bl	29202 <atomic_test_bit>
    8bf6:	7058      	strb	r0, [r3, #1]
	cp->enable = enable;
    8bf8:	701c      	strb	r4, [r3, #0]
/* Initialize command state instance */
static inline void bt_hci_cmd_state_set_init(struct bt_hci_cmd_state_set *state,
					     atomic_t *target, int bit,
					     bool val)
{
	state->target = target;
    8bfa:	4b0f      	ldr	r3, [pc, #60]	; (8c38 <set_le_scan_enable_legacy+0x6c>)
    8bfc:	9301      	str	r3, [sp, #4]
	bt_hci_cmd_state_set_init(&state, bt_dev.flags, BT_DEV_SCANNING,
    8bfe:	f004 0401 	and.w	r4, r4, #1
	state->bit = bit;
    8c02:	2305      	movs	r3, #5
	cmd(buf)->state = &state;
    8c04:	4628      	mov	r0, r5
    8c06:	9302      	str	r3, [sp, #8]
	bt_hci_cmd_state_set_init(&state, bt_dev.flags, BT_DEV_SCANNING,
    8c08:	f88d 400c 	strb.w	r4, [sp, #12]
	cmd(buf)->state = &state;
    8c0c:	f015 ff96 	bl	1eb3c <net_buf_id>
    8c10:	4a0a      	ldr	r2, [pc, #40]	; (8c3c <set_le_scan_enable_legacy+0x70>)
    8c12:	230c      	movs	r3, #12
    8c14:	fb03 2000 	mla	r0, r3, r0, r2
    8c18:	ab01      	add	r3, sp, #4
    8c1a:	6043      	str	r3, [r0, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    8c1c:	2200      	movs	r2, #0
    8c1e:	4629      	mov	r1, r5
    8c20:	f242 000c 	movw	r0, #8204	; 0x200c
    8c24:	f7ff ff70 	bl	8b08 <bt_hci_cmd_send_sync>
}
    8c28:	b005      	add	sp, #20
    8c2a:	bd30      	pop	{r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    8c2c:	2200      	movs	r2, #0
    8c2e:	7042      	strb	r2, [r0, #1]
    8c30:	e7e2      	b.n	8bf8 <set_le_scan_enable_legacy+0x2c>
		return -ENOBUFS;
    8c32:	f06f 0068 	mvn.w	r0, #104	; 0x68
    8c36:	e7f7      	b.n	8c28 <set_le_scan_enable_legacy+0x5c>
    8c38:	20000254 	.word	0x20000254
    8c3c:	20002b70 	.word	0x20002b70

00008c40 <hci_set_ad>:
{
    8c40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8c44:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    8c46:	2120      	movs	r1, #32
{
    8c48:	4683      	mov	fp, r0
    8c4a:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    8c4c:	f7ff fe1e 	bl	888c <bt_hci_cmd_create>
	if (!buf) {
    8c50:	4607      	mov	r7, r0
    8c52:	2800      	cmp	r0, #0
    8c54:	d053      	beq.n	8cfe <hci_set_ad+0xbe>
    8c56:	2120      	movs	r1, #32
    8c58:	3008      	adds	r0, #8
    8c5a:	f016 facb 	bl	1f1f4 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
    8c5e:	2100      	movs	r1, #0
    8c60:	2220      	movs	r2, #32
    8c62:	4682      	mov	sl, r0
    8c64:	f024 fcc9 	bl	2d5fa <memset>
	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
    8c68:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
    8c6c:	f10a 0901 	add.w	r9, sl, #1
static int set_data_add(uint8_t *set_data, uint8_t set_data_len_max,
    8c70:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;
    8c72:	2100      	movs	r1, #0
		for (size_t j = 0; j < ad[i].len; j++) {
    8c74:	6825      	ldr	r5, [r4, #0]
    8c76:	2300      	movs	r3, #0
    8c78:	6862      	ldr	r2, [r4, #4]
    8c7a:	4293      	cmp	r3, r2
    8c7c:	d30d      	bcc.n	8c9a <hci_set_ad+0x5a>
	for (size_t i = 0; i < ad_len; i++) {
    8c7e:	9b00      	ldr	r3, [sp, #0]
    8c80:	3408      	adds	r4, #8
    8c82:	429c      	cmp	r4, r3
    8c84:	d1f6      	bne.n	8c74 <hci_set_ad+0x34>
	*data_len = set_data_len;
    8c86:	f88a 1000 	strb.w	r1, [sl]
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    8c8a:	2200      	movs	r2, #0
    8c8c:	4639      	mov	r1, r7
    8c8e:	4658      	mov	r0, fp
}
    8c90:	b003      	add	sp, #12
    8c92:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    8c96:	f7ff bf37 	b.w	8b08 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
    8c9a:	786a      	ldrb	r2, [r5, #1]
			uint8_t type = data[j].type;
    8c9c:	7828      	ldrb	r0, [r5, #0]
			if ((set_data_len + len + 2) > set_data_len_max) {
    8c9e:	1c8e      	adds	r6, r1, #2
    8ca0:	eb06 0c02 	add.w	ip, r6, r2
    8ca4:	f1bc 0f1f 	cmp.w	ip, #31
    8ca8:	d912      	bls.n	8cd0 <hci_set_ad+0x90>
				if (!(type == BT_DATA_NAME_COMPLETE &&
    8caa:	2809      	cmp	r0, #9
				ssize_t shortened_len = set_data_len_max -
    8cac:	f1c1 021d 	rsb	r2, r1, #29
				if (!(type == BT_DATA_NAME_COMPLETE &&
    8cb0:	d101      	bne.n	8cb6 <hci_set_ad+0x76>
    8cb2:	2a00      	cmp	r2, #0
    8cb4:	dc0b      	bgt.n	8cce <hci_set_ad+0x8e>
					BT_ERR("Too big advertising data");
    8cb6:	2145      	movs	r1, #69	; 0x45
    8cb8:	4812      	ldr	r0, [pc, #72]	; (8d04 <hci_set_ad+0xc4>)
    8cba:	f01e f958 	bl	26f6e <printk>
		net_buf_unref(buf);
    8cbe:	4638      	mov	r0, r7
    8cc0:	f016 f948 	bl	1ef54 <net_buf_unref>
					return -EINVAL;
    8cc4:	f06f 0015 	mvn.w	r0, #21
}
    8cc8:	b003      	add	sp, #12
    8cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
    8cce:	2008      	movs	r0, #8
			set_data[set_data_len++] = len + 1;
    8cd0:	fa5f f882 	uxtb.w	r8, r2
    8cd4:	f108 0c01 	add.w	ip, r8, #1
    8cd8:	f809 c001 	strb.w	ip, [r9, r1]
    8cdc:	3101      	adds	r1, #1
			set_data[set_data_len++] = type;
    8cde:	b2c9      	uxtb	r1, r1
    8ce0:	b2f6      	uxtb	r6, r6
    8ce2:	f809 0001 	strb.w	r0, [r9, r1]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    8ce6:	eb09 0006 	add.w	r0, r9, r6
    8cea:	6869      	ldr	r1, [r5, #4]
    8cec:	9301      	str	r3, [sp, #4]
    8cee:	f024 fc49 	bl	2d584 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
    8cf2:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
    8cf4:	4446      	add	r6, r8
    8cf6:	b2f1      	uxtb	r1, r6
		for (size_t j = 0; j < ad[i].len; j++) {
    8cf8:	3301      	adds	r3, #1
    8cfa:	3508      	adds	r5, #8
    8cfc:	e7bc      	b.n	8c78 <hci_set_ad+0x38>
		return -ENOBUFS;
    8cfe:	f06f 0068 	mvn.w	r0, #104	; 0x68
    8d02:	e7e1      	b.n	8cc8 <hci_set_ad+0x88>
    8d04:	00030d93 	.word	0x00030d93

00008d08 <le_adv_update.constprop.37>:
static int le_adv_update(struct bt_le_ext_adv *adv,
    8d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8d0c:	b087      	sub	sp, #28
    8d0e:	4607      	mov	r7, r0
    8d10:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
    8d14:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    8d18:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
    8d1c:	460c      	mov	r4, r1
    8d1e:	4692      	mov	sl, r2
	struct bt_ad d[2] = {};
    8d20:	2100      	movs	r1, #0
    8d22:	2210      	movs	r2, #16
    8d24:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
    8d26:	461e      	mov	r6, r3
	struct bt_ad d[2] = {};
    8d28:	f024 fc67 	bl	2d5fa <memset>
	if (use_name) {
    8d2c:	b175      	cbz	r5, 8d4c <le_adv_update.constprop.37+0x44>
		if ((ad && ad_has_name(ad, ad_len)) ||
    8d2e:	bba4      	cbnz	r4, 8d9a <le_adv_update.constprop.37+0x92>
    8d30:	2e00      	cmp	r6, #0
    8d32:	d13d      	bne.n	8db0 <le_adv_update.constprop.37+0xa8>
		data = (struct bt_data)BT_DATA(
    8d34:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 8de0 <le_adv_update.constprop.37+0xd8>
    8d38:	4658      	mov	r0, fp
    8d3a:	f7f9 f8b5 	bl	1ea8 <strlen>
    8d3e:	2309      	movs	r3, #9
    8d40:	f88d 3000 	strb.w	r3, [sp]
    8d44:	f88d 0001 	strb.w	r0, [sp, #1]
    8d48:	f8cd b004 	str.w	fp, [sp, #4]
		d[0].len = ad_len;
    8d4c:	e9cd 4a02 	strd	r4, sl, [sp, #8]
		if (use_name && !scannable) {
    8d50:	b385      	cbz	r5, 8db4 <le_adv_update.constprop.37+0xac>
    8d52:	f1b9 0f00 	cmp.w	r9, #0
    8d56:	d12d      	bne.n	8db4 <le_adv_update.constprop.37+0xac>
			d[1].len = 1;
    8d58:	2301      	movs	r3, #1
			d[1].data = &data;
    8d5a:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
    8d5e:	9305      	str	r3, [sp, #20]
			d_len = 2;
    8d60:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
    8d62:	a902      	add	r1, sp, #8
    8d64:	f242 0008 	movw	r0, #8200	; 0x2008
    8d68:	f7ff ff6a 	bl	8c40 <hci_set_ad>
		if (err) {
    8d6c:	4604      	mov	r4, r0
    8d6e:	b938      	cbnz	r0, 8d80 <le_adv_update.constprop.37+0x78>
	if (scannable) {
    8d70:	f1b9 0f00 	cmp.w	r9, #0
    8d74:	d120      	bne.n	8db8 <le_adv_update.constprop.37+0xb0>
    8d76:	2104      	movs	r1, #4
    8d78:	f107 0010 	add.w	r0, r7, #16
    8d7c:	f020 f9f8 	bl	29170 <atomic_or>
}
    8d80:	4620      	mov	r0, r4
    8d82:	b007      	add	sp, #28
    8d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    8d88:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
    8d8c:	3a08      	subs	r2, #8
    8d8e:	2a01      	cmp	r2, #1
    8d90:	d923      	bls.n	8dda <le_adv_update.constprop.37+0xd2>
	for (i = 0; i < ad_len; i++) {
    8d92:	3301      	adds	r3, #1
    8d94:	459a      	cmp	sl, r3
    8d96:	d1f7      	bne.n	8d88 <le_adv_update.constprop.37+0x80>
    8d98:	e7ca      	b.n	8d30 <le_adv_update.constprop.37+0x28>
    8d9a:	2300      	movs	r3, #0
    8d9c:	e7fa      	b.n	8d94 <le_adv_update.constprop.37+0x8c>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    8d9e:	f816 2033 	ldrb.w	r2, [r6, r3, lsl #3]
    8da2:	3a08      	subs	r2, #8
    8da4:	2a01      	cmp	r2, #1
    8da6:	d918      	bls.n	8dda <le_adv_update.constprop.37+0xd2>
	for (i = 0; i < ad_len; i++) {
    8da8:	3301      	adds	r3, #1
    8daa:	4598      	cmp	r8, r3
    8dac:	d1f7      	bne.n	8d9e <le_adv_update.constprop.37+0x96>
    8dae:	e7c1      	b.n	8d34 <le_adv_update.constprop.37+0x2c>
    8db0:	2300      	movs	r3, #0
    8db2:	e7fa      	b.n	8daa <le_adv_update.constprop.37+0xa2>
		d_len = 1;
    8db4:	2201      	movs	r2, #1
    8db6:	e7d4      	b.n	8d62 <le_adv_update.constprop.37+0x5a>
		d[0].len = sd_len;
    8db8:	e9cd 6802 	strd	r6, r8, [sp, #8]
		if (use_name) {
    8dbc:	2201      	movs	r2, #1
    8dbe:	b11d      	cbz	r5, 8dc8 <le_adv_update.constprop.37+0xc0>
			d[1].len = 1;
    8dc0:	9205      	str	r2, [sp, #20]
			d[1].data = &data;
    8dc2:	f8cd d010 	str.w	sp, [sp, #16]
			d_len = 2;
    8dc6:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    8dc8:	a902      	add	r1, sp, #8
    8dca:	f242 0009 	movw	r0, #8201	; 0x2009
    8dce:	f7ff ff37 	bl	8c40 <hci_set_ad>
		if (err) {
    8dd2:	2800      	cmp	r0, #0
    8dd4:	d0cf      	beq.n	8d76 <le_adv_update.constprop.37+0x6e>
    8dd6:	4604      	mov	r4, r0
    8dd8:	e7d2      	b.n	8d80 <le_adv_update.constprop.37+0x78>
			return -EINVAL;
    8dda:	f06f 0415 	mvn.w	r4, #21
    8dde:	e7cf      	b.n	8d80 <le_adv_update.constprop.37+0x78>
    8de0:	00030e99 	.word	0x00030e99

00008de4 <set_random_address>:
{
    8de4:	b570      	push	{r4, r5, r6, lr}
	return memcmp(a, b, sizeof(*a));
    8de6:	4c15      	ldr	r4, [pc, #84]	; (8e3c <set_random_address+0x58>)
    8de8:	2206      	movs	r2, #6
    8dea:	f104 012d 	add.w	r1, r4, #45	; 0x2d
    8dee:	4606      	mov	r6, r0
    8df0:	f024 fbba 	bl	2d568 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    8df4:	4602      	mov	r2, r0
    8df6:	b1d8      	cbz	r0, 8e30 <set_random_address+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    8df8:	2106      	movs	r1, #6
    8dfa:	f242 0005 	movw	r0, #8197	; 0x2005
    8dfe:	f7ff fd45 	bl	888c <bt_hci_cmd_create>
	if (!buf) {
    8e02:	4605      	mov	r5, r0
    8e04:	b1b0      	cbz	r0, 8e34 <set_random_address+0x50>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    8e06:	2206      	movs	r2, #6
    8e08:	4631      	mov	r1, r6
    8e0a:	3008      	adds	r0, #8
    8e0c:	f023 fde9 	bl	2c9e2 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    8e10:	2200      	movs	r2, #0
    8e12:	4629      	mov	r1, r5
    8e14:	f242 0005 	movw	r0, #8197	; 0x2005
    8e18:	f7ff fe76 	bl	8b08 <bt_hci_cmd_send_sync>
	if (err) {
    8e1c:	4602      	mov	r2, r0
    8e1e:	b938      	cbnz	r0, 8e30 <set_random_address+0x4c>
	bt_addr_copy(&bt_dev.random_addr.a, addr);
    8e20:	4631      	mov	r1, r6
    8e22:	f104 002d 	add.w	r0, r4, #45	; 0x2d
    8e26:	f020 f9e0 	bl	291ea <bt_addr_copy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    8e2a:	2301      	movs	r3, #1
    8e2c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
    8e30:	4610      	mov	r0, r2
    8e32:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    8e34:	f06f 0268 	mvn.w	r2, #104	; 0x68
    8e38:	e7fa      	b.n	8e30 <set_random_address+0x4c>
    8e3a:	bf00      	nop
    8e3c:	200001c0 	.word	0x200001c0

00008e40 <le_adv_set_random_addr.isra.28>:
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
    8e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    8e44:	f011 0401 	ands.w	r4, r1, #1
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
    8e48:	4606      	mov	r6, r0
    8e4a:	460d      	mov	r5, r1
    8e4c:	4692      	mov	sl, r2
    8e4e:	461f      	mov	r7, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    8e50:	d02b      	beq.n	8eaa <le_adv_set_random_addr.isra.28+0x6a>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    8e52:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8f14 <le_adv_set_random_addr.isra.28+0xd4>
    8e56:	b12a      	cbz	r2, 8e64 <le_adv_set_random_addr.isra.28+0x24>
    8e58:	0688      	lsls	r0, r1, #26
    8e5a:	d503      	bpl.n	8e64 <le_adv_set_random_addr.isra.28+0x24>
    8e5c:	f898 3098 	ldrb.w	r3, [r8, #152]	; 0x98
    8e60:	0659      	lsls	r1, r3, #25
    8e62:	d554      	bpl.n	8f0e <le_adv_set_random_addr.isra.28+0xce>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    8e64:	ea4f 09c6 	mov.w	r9, r6, lsl #3
    8e68:	eba9 0306 	sub.w	r3, r9, r6
    8e6c:	f818 3003 	ldrb.w	r3, [r8, r3]
    8e70:	2b01      	cmp	r3, #1
    8e72:	d009      	beq.n	8e88 <le_adv_set_random_addr.isra.28+0x48>
			*own_addr_type = id_addr->type;
    8e74:	eba9 0606 	sub.w	r6, r9, r6
    8e78:	f818 3006 	ldrb.w	r3, [r8, r6]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    8e7c:	f1ba 0f00 	cmp.w	sl, #0
    8e80:	d10e      	bne.n	8ea0 <le_adv_set_random_addr.isra.28+0x60>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    8e82:	703b      	strb	r3, [r7, #0]
	return 0;
    8e84:	2400      	movs	r4, #0
    8e86:	e008      	b.n	8e9a <le_adv_set_random_addr.isra.28+0x5a>
				err = set_adv_random_address(adv, &id_addr->a);
    8e88:	2007      	movs	r0, #7
    8e8a:	fb10 3006 	smlabb	r0, r0, r6, r3
		return set_random_address(addr);
    8e8e:	4440      	add	r0, r8
    8e90:	f7ff ffa8 	bl	8de4 <set_random_address>
				if (err) {
    8e94:	4604      	mov	r4, r0
    8e96:	2800      	cmp	r0, #0
    8e98:	d0ec      	beq.n	8e74 <le_adv_set_random_addr.isra.28+0x34>
}
    8e9a:	4620      	mov	r0, r4
    8e9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    8ea0:	06aa      	lsls	r2, r5, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    8ea2:	bf48      	it	mi
    8ea4:	f043 0302 	orrmi.w	r3, r3, #2
    8ea8:	e7eb      	b.n	8e82 <le_adv_set_random_addr.isra.28+0x42>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
    8eaa:	f011 0504 	ands.w	r5, r1, #4
    8eae:	d013      	beq.n	8ed8 <le_adv_set_random_addr.isra.28+0x98>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    8eb0:	ea4f 08c0 	mov.w	r8, r0, lsl #3
    8eb4:	4d17      	ldr	r5, [pc, #92]	; (8f14 <le_adv_set_random_addr.isra.28+0xd4>)
    8eb6:	eba8 0300 	sub.w	r3, r8, r0
    8eba:	5ceb      	ldrb	r3, [r5, r3]
    8ebc:	2b01      	cmp	r3, #1
    8ebe:	d106      	bne.n	8ece <le_adv_set_random_addr.isra.28+0x8e>
				err = set_adv_random_address(adv, &id_addr->a);
    8ec0:	2007      	movs	r0, #7
    8ec2:	fb10 3006 	smlabb	r0, r0, r6, r3
		return set_random_address(addr);
    8ec6:	4428      	add	r0, r5
    8ec8:	f7ff ff8c 	bl	8de4 <set_random_address>
    8ecc:	4604      	mov	r4, r0
			*own_addr_type = id_addr->type;
    8ece:	eba8 0606 	sub.w	r6, r8, r6
    8ed2:	5dab      	ldrb	r3, [r5, r6]
    8ed4:	703b      	strb	r3, [r7, #0]
    8ed6:	e7e0      	b.n	8e9a <le_adv_set_random_addr.isra.28+0x5a>
			    atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    8ed8:	2105      	movs	r1, #5
    8eda:	480f      	ldr	r0, [pc, #60]	; (8f18 <le_adv_set_random_addr.isra.28+0xd8>)
    8edc:	f020 f991 	bl	29202 <atomic_test_bit>
			if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    8ee0:	b950      	cbnz	r0, 8ef8 <le_adv_set_random_addr.isra.28+0xb8>
			bool scan_enabled = false;
    8ee2:	2600      	movs	r6, #0
			err = le_adv_set_private_addr(adv);
    8ee4:	f020 f996 	bl	29214 <le_adv_set_private_addr.isra.27>
    8ee8:	4604      	mov	r4, r0
			*own_addr_type = BT_ADDR_LE_RANDOM;
    8eea:	2001      	movs	r0, #1
    8eec:	7038      	strb	r0, [r7, #0]
			if (scan_enabled) {
    8eee:	2e00      	cmp	r6, #0
    8ef0:	d0d3      	beq.n	8e9a <le_adv_set_random_addr.isra.28+0x5a>
	return set_le_scan_enable_legacy(enable);
    8ef2:	f7ff fe6b 	bl	8bcc <set_le_scan_enable_legacy>
		if (err) {
    8ef6:	e7d0      	b.n	8e9a <le_adv_set_random_addr.isra.28+0x5a>
			    atomic_test_bit(bt_dev.flags, BT_DEV_ACTIVE_SCAN)) {
    8ef8:	2107      	movs	r1, #7
    8efa:	4807      	ldr	r0, [pc, #28]	; (8f18 <le_adv_set_random_addr.isra.28+0xd8>)
    8efc:	f020 f981 	bl	29202 <atomic_test_bit>
			    atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    8f00:	4606      	mov	r6, r0
    8f02:	2800      	cmp	r0, #0
    8f04:	d0ed      	beq.n	8ee2 <le_adv_set_random_addr.isra.28+0xa2>
	return set_le_scan_enable_legacy(enable);
    8f06:	4628      	mov	r0, r5
    8f08:	f7ff fe60 	bl	8bcc <set_le_scan_enable_legacy>
    8f0c:	e7ea      	b.n	8ee4 <le_adv_set_random_addr.isra.28+0xa4>
			return -ENOTSUP;
    8f0e:	f06f 0485 	mvn.w	r4, #133	; 0x85
    8f12:	e7c2      	b.n	8e9a <le_adv_set_random_addr.isra.28+0x5a>
    8f14:	200001c0 	.word	0x200001c0
    8f18:	20000254 	.word	0x20000254

00008f1c <set_le_adv_enable_legacy>:
{
    8f1c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    8f1e:	4606      	mov	r6, r0
    8f20:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    8f22:	f242 000a 	movw	r0, #8202	; 0x200a
    8f26:	2101      	movs	r1, #1
    8f28:	f7ff fcb0 	bl	888c <bt_hci_cmd_create>
	if (!buf) {
    8f2c:	4604      	mov	r4, r0
    8f2e:	b1e8      	cbz	r0, 8f6c <set_le_adv_enable_legacy+0x50>
	if (enable) {
    8f30:	3008      	adds	r0, #8
    8f32:	b1cd      	cbz	r5, 8f68 <set_le_adv_enable_legacy+0x4c>
	return net_buf_simple_add_u8(&buf->b, val);
    8f34:	2101      	movs	r1, #1
    8f36:	f023 fd60 	bl	2c9fa <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(&state, adv->flags, BT_ADV_ENABLED, enable);
    8f3a:	3610      	adds	r6, #16
    8f3c:	2306      	movs	r3, #6
	cmd(buf)->state = &state;
    8f3e:	4620      	mov	r0, r4
    8f40:	9302      	str	r3, [sp, #8]
	state->target = target;
    8f42:	9601      	str	r6, [sp, #4]
	state->val = val;
    8f44:	f88d 500c 	strb.w	r5, [sp, #12]
    8f48:	f015 fdf8 	bl	1eb3c <net_buf_id>
    8f4c:	4a09      	ldr	r2, [pc, #36]	; (8f74 <set_le_adv_enable_legacy+0x58>)
    8f4e:	230c      	movs	r3, #12
    8f50:	fb03 2000 	mla	r0, r3, r0, r2
    8f54:	ab01      	add	r3, sp, #4
    8f56:	6043      	str	r3, [r0, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    8f58:	2200      	movs	r2, #0
    8f5a:	4621      	mov	r1, r4
    8f5c:	f242 000a 	movw	r0, #8202	; 0x200a
    8f60:	f7ff fdd2 	bl	8b08 <bt_hci_cmd_send_sync>
}
    8f64:	b004      	add	sp, #16
    8f66:	bd70      	pop	{r4, r5, r6, pc}
    8f68:	4629      	mov	r1, r5
    8f6a:	e7e4      	b.n	8f36 <set_le_adv_enable_legacy+0x1a>
		return -ENOBUFS;
    8f6c:	f06f 0068 	mvn.w	r0, #104	; 0x68
    8f70:	e7f8      	b.n	8f64 <set_le_adv_enable_legacy+0x48>
    8f72:	bf00      	nop
    8f74:	20002b70 	.word	0x20002b70

00008f78 <bt_le_scan_random_addr_check>:
{
    8f78:	b508      	push	{r3, lr}
	    !atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    8f7a:	2106      	movs	r1, #6
    8f7c:	4802      	ldr	r0, [pc, #8]	; (8f88 <bt_le_scan_random_addr_check+0x10>)
    8f7e:	f020 f940 	bl	29202 <atomic_test_bit>
}
    8f82:	2001      	movs	r0, #1
    8f84:	bd08      	pop	{r3, pc}
    8f86:	bf00      	nop
    8f88:	200001e8 	.word	0x200001e8

00008f8c <bt_le_scan_update>:
{
    8f8c:	b508      	push	{r3, lr}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    8f8e:	2106      	movs	r1, #6
    8f90:	4808      	ldr	r0, [pc, #32]	; (8fb4 <bt_le_scan_update+0x28>)
    8f92:	f020 f936 	bl	29202 <atomic_test_bit>
    8f96:	4603      	mov	r3, r0
    8f98:	b948      	cbnz	r0, 8fae <bt_le_scan_update+0x22>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    8f9a:	2105      	movs	r1, #5
    8f9c:	4805      	ldr	r0, [pc, #20]	; (8fb4 <bt_le_scan_update+0x28>)
    8f9e:	f020 f930 	bl	29202 <atomic_test_bit>
    8fa2:	b120      	cbz	r0, 8fae <bt_le_scan_update+0x22>
	return set_le_scan_enable_legacy(enable);
    8fa4:	4618      	mov	r0, r3
}
    8fa6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return set_le_scan_enable_legacy(enable);
    8faa:	f7ff be0f 	b.w	8bcc <set_le_scan_enable_legacy>
}
    8fae:	2000      	movs	r0, #0
    8fb0:	bd08      	pop	{r3, pc}
    8fb2:	bf00      	nop
    8fb4:	20000254 	.word	0x20000254

00008fb8 <hci_event_prio>:
{
    8fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8fbc:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
    8fbe:	f100 0508 	add.w	r5, r0, #8
	state->offset = net_buf_simple_headroom(buf);
    8fc2:	4628      	mov	r0, r5
    8fc4:	f023 fd01 	bl	2c9ca <net_buf_simple_headroom>
	state->len = buf->len;
    8fc8:	89a7      	ldrh	r7, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
    8fca:	2f01      	cmp	r7, #1
	state->offset = net_buf_simple_headroom(buf);
    8fcc:	4606      	mov	r6, r0
    8fce:	d80b      	bhi.n	8fe8 <hci_event_prio+0x30>
    8fd0:	f641 02ae 	movw	r2, #6318	; 0x18ae
    8fd4:	4920      	ldr	r1, [pc, #128]	; (9058 <hci_event_prio+0xa0>)
    8fd6:	4821      	ldr	r0, [pc, #132]	; (905c <hci_event_prio+0xa4>)
    8fd8:	f01d ffc9 	bl	26f6e <printk>
    8fdc:	4040      	eors	r0, r0
    8fde:	f380 8811 	msr	BASEPRI, r0
    8fe2:	f04f 0003 	mov.w	r0, #3
    8fe6:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    8fe8:	2102      	movs	r1, #2
    8fea:	4628      	mov	r0, r5
    8fec:	f016 f8e4 	bl	1f1b8 <net_buf_simple_pull_mem>
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    8ff0:	7803      	ldrb	r3, [r0, #0]
    8ff2:	2b1a      	cmp	r3, #26
    8ff4:	4680      	mov	r8, r0
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
    8ff6:	d828      	bhi.n	904a <hci_event_prio+0x92>
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
    8ff8:	2501      	movs	r5, #1
    8ffa:	4a19      	ldr	r2, [pc, #100]	; (9060 <hci_event_prio+0xa8>)
    8ffc:	fa05 f303 	lsl.w	r3, r5, r3
    9000:	4213      	tst	r3, r2
    9002:	d104      	bne.n	900e <hci_event_prio+0x56>
    9004:	f013 0f20 	tst.w	r3, #32
#endif /* defined(CONFIG_BT_CONN) */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
    9008:	bf14      	ite	ne
    900a:	2503      	movne	r5, #3
    900c:	2502      	moveq	r5, #2
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    900e:	07ea      	lsls	r2, r5, #31
    9010:	d40b      	bmi.n	902a <hci_event_prio+0x72>
    9012:	f641 02b2 	movw	r2, #6322	; 0x18b2
    9016:	4910      	ldr	r1, [pc, #64]	; (9058 <hci_event_prio+0xa0>)
    9018:	4810      	ldr	r0, [pc, #64]	; (905c <hci_event_prio+0xa4>)
    901a:	f01d ffa8 	bl	26f6e <printk>
    901e:	4040      	eors	r0, r0
    9020:	f380 8811 	msr	BASEPRI, r0
    9024:	f04f 0003 	mov.w	r0, #3
    9028:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    902a:	2305      	movs	r3, #5
    902c:	4a0d      	ldr	r2, [pc, #52]	; (9064 <hci_event_prio+0xac>)
    902e:	f898 0000 	ldrb.w	r0, [r8]
    9032:	4621      	mov	r1, r4
    9034:	f7ff f93a 	bl	82ac <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    9038:	07ab      	lsls	r3, r5, #30
    903a:	d508      	bpl.n	904e <hci_event_prio+0x96>
	buf->data = buf->__buf + state->offset;
    903c:	6923      	ldr	r3, [r4, #16]
	buf->len = state->len;
    903e:	81a7      	strh	r7, [r4, #12]
	buf->data = buf->__buf + state->offset;
    9040:	fa13 f686 	uxtah	r6, r3, r6
    9044:	60a6      	str	r6, [r4, #8]
}
    9046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    904a:	2502      	movs	r5, #2
    904c:	e7df      	b.n	900e <hci_event_prio+0x56>
		net_buf_unref(buf);
    904e:	4620      	mov	r0, r4
}
    9050:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    9054:	f015 bf7e 	b.w	1ef54 <net_buf_unref>
    9058:	00030db1 	.word	0x00030db1
    905c:	0002fa94 	.word	0x0002fa94
    9060:	0408c000 	.word	0x0408c000
    9064:	0002ec6c 	.word	0x0002ec6c

00009068 <bt_recv>:
{
    9068:	b570      	push	{r4, r5, r6, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    906a:	7d05      	ldrb	r5, [r0, #20]
	switch (bt_buf_get_type(buf)) {
    906c:	2d01      	cmp	r5, #1
{
    906e:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    9070:	d03e      	beq.n	90f0 <bt_recv+0x88>
    9072:	2d03      	cmp	r5, #3
    9074:	d175      	bne.n	9162 <bt_recv+0xfa>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    9076:	8983      	ldrh	r3, [r0, #12]
    9078:	2b03      	cmp	r3, #3
    907a:	d80b      	bhi.n	9094 <bt_recv+0x2c>
    907c:	f240 42ac 	movw	r2, #1196	; 0x4ac
    9080:	493d      	ldr	r1, [pc, #244]	; (9178 <bt_recv+0x110>)
    9082:	483e      	ldr	r0, [pc, #248]	; (917c <bt_recv+0x114>)
    9084:	f01d ff73 	bl	26f6e <printk>
    9088:	4040      	eors	r0, r0
    908a:	f380 8811 	msr	BASEPRI, r0
    908e:	f04f 0003 	mov.w	r0, #3
    9092:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    9094:	2104      	movs	r1, #4
    9096:	f104 0008 	add.w	r0, r4, #8
    909a:	f016 f88d 	bl	1f1b8 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    909e:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
    90a0:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    90a2:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    90a4:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
    90a6:	89a2      	ldrh	r2, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
    90a8:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
    90ac:	4293      	cmp	r3, r2
	acl(buf)->handle = bt_acl_handle(handle);
    90ae:	82e0      	strh	r0, [r4, #22]
	if (buf->len != len) {
    90b0:	d007      	beq.n	90c2 <bt_recv+0x5a>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    90b2:	2145      	movs	r1, #69	; 0x45
    90b4:	4832      	ldr	r0, [pc, #200]	; (9180 <bt_recv+0x118>)
    90b6:	f01d ff5a 	bl	26f6e <printk>
	net_buf_unref(buf);
    90ba:	4620      	mov	r0, r4
    90bc:	f015 ff4a 	bl	1ef54 <net_buf_unref>
    90c0:	e014      	b.n	90ec <bt_recv+0x84>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    90c2:	f001 fa6d 	bl	a5a0 <bt_conn_lookup_handle>
	if (!conn) {
    90c6:	4605      	mov	r5, r0
    90c8:	b928      	cbnz	r0, 90d6 <bt_recv+0x6e>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    90ca:	8ae2      	ldrh	r2, [r4, #22]
    90cc:	482d      	ldr	r0, [pc, #180]	; (9184 <bt_recv+0x11c>)
    90ce:	2145      	movs	r1, #69	; 0x45
    90d0:	f01d ff4d 	bl	26f6e <printk>
		net_buf_unref(buf);
    90d4:	e7f1      	b.n	90ba <bt_recv+0x52>
	acl(buf)->index = bt_conn_index(conn);
    90d6:	f001 fd33 	bl	ab40 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    90da:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
    90dc:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    90de:	4621      	mov	r1, r4
    90e0:	4628      	mov	r0, r5
    90e2:	f001 f8fb 	bl	a2dc <bt_conn_recv>
	bt_conn_unref(conn);
    90e6:	4628      	mov	r0, r5
    90e8:	f001 fa2e 	bl	a548 <bt_conn_unref>
		return 0;
    90ec:	2000      	movs	r0, #0
}
    90ee:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    90f0:	8983      	ldrh	r3, [r0, #12]
    90f2:	2b01      	cmp	r3, #1
    90f4:	d80b      	bhi.n	910e <bt_recv+0xa6>
    90f6:	f241 32fb 	movw	r2, #5115	; 0x13fb
    90fa:	491f      	ldr	r1, [pc, #124]	; (9178 <bt_recv+0x110>)
    90fc:	481f      	ldr	r0, [pc, #124]	; (917c <bt_recv+0x114>)
    90fe:	f01d ff36 	bl	26f6e <printk>
    9102:	4040      	eors	r0, r0
    9104:	f380 8811 	msr	BASEPRI, r0
    9108:	f04f 0003 	mov.w	r0, #3
    910c:	df02      	svc	2
    910e:	2102      	movs	r1, #2
    9110:	f104 0008 	add.w	r0, r4, #8
    9114:	f016 f850 	bl	1f1b8 <net_buf_simple_pull_mem>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    9118:	7802      	ldrb	r2, [r0, #0]
    911a:	2a1a      	cmp	r2, #26
    911c:	4606      	mov	r6, r0
	switch (evt) {
    911e:	d81e      	bhi.n	915e <bt_recv+0xf6>
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
    9120:	2301      	movs	r3, #1
    9122:	4093      	lsls	r3, r2
    9124:	4a18      	ldr	r2, [pc, #96]	; (9188 <bt_recv+0x120>)
    9126:	4213      	tst	r3, r2
    9128:	d104      	bne.n	9134 <bt_recv+0xcc>
    912a:	f013 0f20 	tst.w	r3, #32
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
    912e:	bf0c      	ite	eq
    9130:	2502      	moveq	r5, #2
    9132:	2503      	movne	r5, #3
    9134:	07ab      	lsls	r3, r5, #30
    9136:	d40b      	bmi.n	9150 <bt_recv+0xe8>
    9138:	f241 32ff 	movw	r2, #5119	; 0x13ff
    913c:	490e      	ldr	r1, [pc, #56]	; (9178 <bt_recv+0x110>)
    913e:	480f      	ldr	r0, [pc, #60]	; (917c <bt_recv+0x114>)
    9140:	f01d ff15 	bl	26f6e <printk>
    9144:	4040      	eors	r0, r0
    9146:	f380 8811 	msr	BASEPRI, r0
    914a:	f04f 0003 	mov.w	r0, #3
    914e:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    9150:	2304      	movs	r3, #4
    9152:	4a0e      	ldr	r2, [pc, #56]	; (918c <bt_recv+0x124>)
    9154:	7830      	ldrb	r0, [r6, #0]
    9156:	4621      	mov	r1, r4
    9158:	f7ff f8a8 	bl	82ac <handle_event>
    915c:	e7ad      	b.n	90ba <bt_recv+0x52>
		return BT_HCI_EVT_FLAG_RECV;
    915e:	2502      	movs	r5, #2
    9160:	e7e8      	b.n	9134 <bt_recv+0xcc>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    9162:	462a      	mov	r2, r5
    9164:	2145      	movs	r1, #69	; 0x45
    9166:	480a      	ldr	r0, [pc, #40]	; (9190 <bt_recv+0x128>)
    9168:	f01d ff01 	bl	26f6e <printk>
		net_buf_unref(buf);
    916c:	4620      	mov	r0, r4
    916e:	f015 fef1 	bl	1ef54 <net_buf_unref>
		return -EINVAL;
    9172:	f06f 0015 	mvn.w	r0, #21
    9176:	e7ba      	b.n	90ee <bt_recv+0x86>
    9178:	00030db1 	.word	0x00030db1
    917c:	0002fa94 	.word	0x0002fa94
    9180:	00030b2b 	.word	0x00030b2b
    9184:	00030b54 	.word	0x00030b54
    9188:	0408c000 	.word	0x0408c000
    918c:	0002ec4c 	.word	0x0002ec4c
    9190:	00030b7b 	.word	0x00030b7b

00009194 <bt_recv_prio>:
{
    9194:	b510      	push	{r4, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    9196:	7d03      	ldrb	r3, [r0, #20]
    9198:	2b01      	cmp	r3, #1
{
    919a:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    919c:	d00b      	beq.n	91b6 <bt_recv_prio+0x22>
    919e:	f641 02f5 	movw	r2, #6389	; 0x18f5
    91a2:	4907      	ldr	r1, [pc, #28]	; (91c0 <bt_recv_prio+0x2c>)
    91a4:	4807      	ldr	r0, [pc, #28]	; (91c4 <bt_recv_prio+0x30>)
    91a6:	f01d fee2 	bl	26f6e <printk>
    91aa:	4040      	eors	r0, r0
    91ac:	f380 8811 	msr	BASEPRI, r0
    91b0:	f04f 0003 	mov.w	r0, #3
    91b4:	df02      	svc	2
	hci_event_prio(buf);
    91b6:	4620      	mov	r0, r4
    91b8:	f7ff fefe 	bl	8fb8 <hci_event_prio>
}
    91bc:	2000      	movs	r0, #0
    91be:	bd10      	pop	{r4, pc}
    91c0:	00030db1 	.word	0x00030db1
    91c4:	0002fa94 	.word	0x0002fa94

000091c8 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    91c8:	4a08      	ldr	r2, [pc, #32]	; (91ec <bt_hci_driver_register+0x24>)
    91ca:	f8d2 3118 	ldr.w	r3, [r2, #280]	; 0x118
    91ce:	b93b      	cbnz	r3, 91e0 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    91d0:	68c1      	ldr	r1, [r0, #12]
    91d2:	b141      	cbz	r1, 91e6 <bt_hci_driver_register+0x1e>
    91d4:	6901      	ldr	r1, [r0, #16]
    91d6:	b131      	cbz	r1, 91e6 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    91d8:	f8c2 0118 	str.w	r0, [r2, #280]	; 0x118
	return 0;
    91dc:	4618      	mov	r0, r3
    91de:	4770      	bx	lr
		return -EALREADY;
    91e0:	f06f 0077 	mvn.w	r0, #119	; 0x77
    91e4:	4770      	bx	lr
		return -EINVAL;
    91e6:	f06f 0015 	mvn.w	r0, #21
}
    91ea:	4770      	bx	lr
    91ec:	200001c0 	.word	0x200001c0

000091f0 <bt_finalize_init>:
{
    91f0:	b508      	push	{r3, lr}
    91f2:	2102      	movs	r1, #2
    91f4:	4803      	ldr	r0, [pc, #12]	; (9204 <bt_finalize_init+0x14>)
    91f6:	f01f ffbb 	bl	29170 <atomic_or>
		bt_le_scan_update(false);
    91fa:	2000      	movs	r0, #0
}
    91fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_scan_update(false);
    9200:	f7ff bec4 	b.w	8f8c <bt_le_scan_update>
    9204:	20000254 	.word	0x20000254

00009208 <bt_init>:
{
    9208:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    920a:	4dbf      	ldr	r5, [pc, #764]	; (9508 <bt_init+0x300>)
    920c:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    9210:	6899      	ldr	r1, [r3, #8]
    9212:	f011 0101 	ands.w	r1, r1, #1
    9216:	d123      	bne.n	9260 <bt_init+0x58>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    9218:	aa01      	add	r2, sp, #4
    921a:	f640 4003 	movw	r0, #3075	; 0xc03
    921e:	f7ff fc73 	bl	8b08 <bt_hci_cmd_send_sync>
		if (err) {
    9222:	4604      	mov	r4, r0
    9224:	2800      	cmp	r0, #0
    9226:	d177      	bne.n	9318 <bt_init+0x110>
		hci_reset_complete(rsp);
    9228:	9b01      	ldr	r3, [sp, #4]
	uint8_t status = buf->data[0];
    922a:	689b      	ldr	r3, [r3, #8]
	if (status) {
    922c:	781b      	ldrb	r3, [r3, #0]
    922e:	b9a3      	cbnz	r3, 925a <bt_init+0x52>
	scan_dev_found_cb = NULL;
    9230:	4ab6      	ldr	r2, [pc, #728]	; (950c <bt_init+0x304>)
    9232:	6013      	str	r3, [r2, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9234:	462b      	mov	r3, r5
    9236:	f3bf 8f5b 	dmb	ish
    923a:	f853 2f94 	ldr.w	r2, [r3, #148]!
    923e:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    9242:	f002 0205 	and.w	r2, r2, #5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    9246:	f3bf 8f5b 	dmb	ish
    924a:	e853 1f00 	ldrex	r1, [r3]
    924e:	e843 2000 	strex	r0, r2, [r3]
    9252:	2800      	cmp	r0, #0
    9254:	d1f9      	bne.n	924a <bt_init+0x42>
    9256:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    925a:	9801      	ldr	r0, [sp, #4]
    925c:	f015 fe7a 	bl	1ef54 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    9260:	aa01      	add	r2, sp, #4
    9262:	2100      	movs	r1, #0
    9264:	f241 0003 	movw	r0, #4099	; 0x1003
    9268:	f7ff fc4e 	bl	8b08 <bt_hci_cmd_send_sync>
	if (err) {
    926c:	4604      	mov	r4, r0
    926e:	2800      	cmp	r0, #0
    9270:	d152      	bne.n	9318 <bt_init+0x110>
	read_local_features_complete(rsp);
    9272:	9a01      	ldr	r2, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    9274:	4ea6      	ldr	r6, [pc, #664]	; (9510 <bt_init+0x308>)
    9276:	6893      	ldr	r3, [r2, #8]
    9278:	f853 0f01 	ldr.w	r0, [r3, #1]!
    927c:	6859      	ldr	r1, [r3, #4]
    927e:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
    9280:	4610      	mov	r0, r2
    9282:	f015 fe67 	bl	1ef54 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    9286:	4621      	mov	r1, r4
    9288:	aa01      	add	r2, sp, #4
    928a:	f241 0001 	movw	r0, #4097	; 0x1001
    928e:	f7ff fc3b 	bl	8b08 <bt_hci_cmd_send_sync>
	if (err) {
    9292:	4604      	mov	r4, r0
    9294:	2800      	cmp	r0, #0
    9296:	d13f      	bne.n	9318 <bt_init+0x110>
	read_local_ver_complete(rsp);
    9298:	9801      	ldr	r0, [sp, #4]
    929a:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    929c:	785a      	ldrb	r2, [r3, #1]
    929e:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    92a2:	78d9      	ldrb	r1, [r3, #3]
    92a4:	789a      	ldrb	r2, [r3, #2]
    92a6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    92aa:	86ea      	strh	r2, [r5, #54]	; 0x36
	bt_dev.lmp_version = rp->lmp_version;
    92ac:	791a      	ldrb	r2, [r3, #4]
    92ae:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    92b2:	7a19      	ldrb	r1, [r3, #8]
    92b4:	79da      	ldrb	r2, [r3, #7]
    92b6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    92ba:	872a      	strh	r2, [r5, #56]	; 0x38
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    92bc:	795a      	ldrb	r2, [r3, #5]
    92be:	799b      	ldrb	r3, [r3, #6]
    92c0:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    92c4:	876b      	strh	r3, [r5, #58]	; 0x3a
	net_buf_unref(rsp);
    92c6:	f015 fe45 	bl	1ef54 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    92ca:	4621      	mov	r1, r4
    92cc:	aa01      	add	r2, sp, #4
    92ce:	f241 0002 	movw	r0, #4098	; 0x1002
    92d2:	f7ff fc19 	bl	8b08 <bt_hci_cmd_send_sync>
	if (err) {
    92d6:	4604      	mov	r4, r0
    92d8:	b9f0      	cbnz	r0, 9318 <bt_init+0x110>
	read_supported_commands_complete(rsp);
    92da:	9f01      	ldr	r7, [sp, #4]
    92dc:	68ba      	ldr	r2, [r7, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
    92de:	1c53      	adds	r3, r2, #1
    92e0:	3241      	adds	r2, #65	; 0x41
    92e2:	6818      	ldr	r0, [r3, #0]
    92e4:	6859      	ldr	r1, [r3, #4]
    92e6:	4634      	mov	r4, r6
    92e8:	c403      	stmia	r4!, {r0, r1}
    92ea:	3308      	adds	r3, #8
    92ec:	4293      	cmp	r3, r2
    92ee:	4626      	mov	r6, r4
    92f0:	d1f7      	bne.n	92e2 <bt_init+0xda>
		bt_dev.supported_commands[34] |= 0x04;
    92f2:	f895 3066 	ldrb.w	r3, [r5, #102]	; 0x66
	net_buf_unref(rsp);
    92f6:	4638      	mov	r0, r7
		bt_dev.supported_commands[34] |= 0x04;
    92f8:	f043 0306 	orr.w	r3, r3, #6
    92fc:	f885 3066 	strb.w	r3, [r5, #102]	; 0x66
	net_buf_unref(rsp);
    9300:	f015 fe28 	bl	1ef54 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    9304:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    9308:	0658      	lsls	r0, r3, #25
    930a:	d408      	bmi.n	931e <bt_init+0x116>
		BT_ERR("Non-LE capable controller detected!");
    930c:	2145      	movs	r1, #69	; 0x45
    930e:	4881      	ldr	r0, [pc, #516]	; (9514 <bt_init+0x30c>)
    9310:	f01d fe2d 	bl	26f6e <printk>
		return -ENODEV;
    9314:	f06f 0412 	mvn.w	r4, #18
}
    9318:	4620      	mov	r0, r4
    931a:	b003      	add	sp, #12
    931c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    931e:	aa01      	add	r2, sp, #4
    9320:	2100      	movs	r1, #0
    9322:	f242 0003 	movw	r0, #8195	; 0x2003
    9326:	f7ff fbef 	bl	8b08 <bt_hci_cmd_send_sync>
	if (err) {
    932a:	4604      	mov	r4, r0
    932c:	2800      	cmp	r0, #0
    932e:	d1f3      	bne.n	9318 <bt_init+0x110>
	read_le_features_complete(rsp);
    9330:	9a01      	ldr	r2, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    9332:	4e79      	ldr	r6, [pc, #484]	; (9518 <bt_init+0x310>)
    9334:	6893      	ldr	r3, [r2, #8]
    9336:	f853 0f01 	ldr.w	r0, [r3, #1]!
    933a:	6859      	ldr	r1, [r3, #4]
    933c:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
    933e:	4610      	mov	r0, r2
    9340:	f015 fe08 	bl	1ef54 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    9344:	4621      	mov	r1, r4
    9346:	aa01      	add	r2, sp, #4
    9348:	f242 0002 	movw	r0, #8194	; 0x2002
    934c:	f7ff fbdc 	bl	8b08 <bt_hci_cmd_send_sync>
		if (err) {
    9350:	4604      	mov	r4, r0
    9352:	2800      	cmp	r0, #0
    9354:	d1e0      	bne.n	9318 <bt_init+0x110>
		le_read_buffer_size_complete(rsp);
    9356:	9b01      	ldr	r3, [sp, #4]
    9358:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    935a:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    935e:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
    9362:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
    9364:	b129      	cbz	r1, 9372 <bt_init+0x16a>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    9366:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
    9368:	4611      	mov	r1, r2
    936a:	f106 0028 	add.w	r0, r6, #40	; 0x28
    936e:	f023 ffd4 	bl	2d31a <z_impl_k_sem_init>
		net_buf_unref(rsp);
    9372:	9801      	ldr	r0, [sp, #4]
    9374:	f015 fdee 	bl	1ef54 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    9378:	f895 4040 	ldrb.w	r4, [r5, #64]	; 0x40
    937c:	f014 0420 	ands.w	r4, r4, #32
    9380:	f000 8092 	beq.w	94a8 <bt_init+0x2a0>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    9384:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
    9388:	0719      	lsls	r1, r3, #28
    938a:	f100 80a9 	bmi.w	94e0 <bt_init+0x2d8>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    938e:	2108      	movs	r1, #8
    9390:	f242 0001 	movw	r0, #8193	; 0x2001
    9394:	f7ff fa7a 	bl	888c <bt_hci_cmd_create>
	if (!buf) {
    9398:	4604      	mov	r4, r0
    939a:	2800      	cmp	r0, #0
    939c:	f000 808b 	beq.w	94b6 <bt_init+0x2ae>
	return net_buf_simple_add(&buf->b, len);
    93a0:	2108      	movs	r1, #8
    93a2:	4408      	add	r0, r1
    93a4:	f015 ff26 	bl	1f1f4 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    93a8:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    93ac:	f895 2066 	ldrb.w	r2, [r5, #102]	; 0x66
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    93b0:	f013 0f02 	tst.w	r3, #2
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    93b4:	f002 0206 	and.w	r2, r2, #6
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    93b8:	bf0c      	ite	eq
    93ba:	230f      	moveq	r3, #15
    93bc:	232f      	movne	r3, #47	; 0x2f
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    93be:	2a06      	cmp	r2, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    93c0:	bf08      	it	eq
    93c2:	f443 73c0 	orreq.w	r3, r3, #384	; 0x180
	dst[0] = val;
    93c6:	2200      	movs	r2, #0
    93c8:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    93ca:	0a1b      	lsrs	r3, r3, #8
    93cc:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
    93ce:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    93d0:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    93d2:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    93d4:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    93d6:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    93d8:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    93da:	4621      	mov	r1, r4
    93dc:	f242 0001 	movw	r0, #8193	; 0x2001
    93e0:	f7ff fb92 	bl	8b08 <bt_hci_cmd_send_sync>
	if (err) {
    93e4:	4604      	mov	r4, r0
    93e6:	2800      	cmp	r0, #0
    93e8:	d196      	bne.n	9318 <bt_init+0x110>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    93ea:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    93ee:	069a      	lsls	r2, r3, #26
    93f0:	d41d      	bmi.n	942e <bt_init+0x226>
	if (bt_dev.le.acl_mtu) {
    93f2:	f8b5 10c4 	ldrh.w	r1, [r5, #196]	; 0xc4
    93f6:	b9d1      	cbnz	r1, 942e <bt_init+0x226>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    93f8:	aa01      	add	r2, sp, #4
    93fa:	f241 0005 	movw	r0, #4101	; 0x1005
    93fe:	f7ff fb83 	bl	8b08 <bt_hci_cmd_send_sync>
	if (err) {
    9402:	4604      	mov	r4, r0
    9404:	2800      	cmp	r0, #0
    9406:	d187      	bne.n	9318 <bt_init+0x110>
	if (bt_dev.le.acl_mtu) {
    9408:	f8b5 30c4 	ldrh.w	r3, [r5, #196]	; 0xc4
    940c:	b963      	cbnz	r3, 9428 <bt_init+0x220>
	read_buffer_size_complete(rsp);
    940e:	9b01      	ldr	r3, [sp, #4]
    9410:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    9412:	785a      	ldrb	r2, [r3, #1]
    9414:	7899      	ldrb	r1, [r3, #2]
    9416:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    941a:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    941e:	889a      	ldrh	r2, [r3, #4]
    9420:	483e      	ldr	r0, [pc, #248]	; (951c <bt_init+0x314>)
    9422:	4611      	mov	r1, r2
    9424:	f023 ff79 	bl	2d31a <z_impl_k_sem_init>
	net_buf_unref(rsp);
    9428:	9801      	ldr	r0, [sp, #4]
    942a:	f015 fd93 	bl	1ef54 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    942e:	2108      	movs	r1, #8
    9430:	f640 4001 	movw	r0, #3073	; 0xc01
    9434:	f7ff fa2a 	bl	888c <bt_hci_cmd_create>
	if (!buf) {
    9438:	4604      	mov	r4, r0
    943a:	2800      	cmp	r0, #0
    943c:	d03b      	beq.n	94b6 <bt_init+0x2ae>
    943e:	2108      	movs	r1, #8
    9440:	4408      	add	r0, r1
    9442:	f015 fed7 	bl	1f1f4 <net_buf_simple_add>
	dst[0] = val;
    9446:	2310      	movs	r3, #16
    9448:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    944a:	2388      	movs	r3, #136	; 0x88
    944c:	7043      	strb	r3, [r0, #1]
    944e:	2302      	movs	r3, #2
	dst[0] = val;
    9450:	2200      	movs	r2, #0
	dst[1] = val >> 8;
    9452:	70c3      	strb	r3, [r0, #3]
    9454:	2320      	movs	r3, #32
	dst[0] = val;
    9456:	7082      	strb	r2, [r0, #2]
    9458:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    945a:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    945c:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    945e:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    9460:	4621      	mov	r1, r4
    9462:	f640 4001 	movw	r0, #3073	; 0xc01
    9466:	f7ff fb4f 	bl	8b08 <bt_hci_cmd_send_sync>
	if (err) {
    946a:	4604      	mov	r4, r0
    946c:	2800      	cmp	r0, #0
    946e:	f47f af53 	bne.w	9318 <bt_init+0x110>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    9472:	4601      	mov	r1, r0
    9474:	aa01      	add	r2, sp, #4
    9476:	f64f 4001 	movw	r0, #64513	; 0xfc01
    947a:	f7ff fb45 	bl	8b08 <bt_hci_cmd_send_sync>
	if (err) {
    947e:	4604      	mov	r4, r0
    9480:	2800      	cmp	r0, #0
    9482:	d051      	beq.n	9528 <bt_init+0x320>
		BT_WARN("Vendor HCI extensions not available");
    9484:	4826      	ldr	r0, [pc, #152]	; (9520 <bt_init+0x318>)
    9486:	2157      	movs	r1, #87	; 0x57
			BT_WARN("Failed to read supported vendor features");
    9488:	f01d fd71 	bl	26f6e <printk>
		err = bt_conn_init();
    948c:	f001 fb76 	bl	ab7c <bt_conn_init>
		if (err) {
    9490:	4604      	mov	r4, r0
    9492:	2800      	cmp	r0, #0
    9494:	f47f af40 	bne.w	9318 <bt_init+0x110>
		if (!bt_dev.id_count) {
    9498:	79eb      	ldrb	r3, [r5, #7]
    949a:	2b00      	cmp	r3, #0
    949c:	d170      	bne.n	9580 <bt_init+0x378>
			BT_INFO("No ID address. App must call settings_load()");
    949e:	2149      	movs	r1, #73	; 0x49
    94a0:	4820      	ldr	r0, [pc, #128]	; (9524 <bt_init+0x31c>)
    94a2:	f01d fd64 	bl	26f6e <printk>
			return 0;
    94a6:	e737      	b.n	9318 <bt_init+0x110>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    94a8:	2102      	movs	r1, #2
    94aa:	f640 406d 	movw	r0, #3181	; 0xc6d
    94ae:	f7ff f9ed 	bl	888c <bt_hci_cmd_create>
		if (!buf) {
    94b2:	4606      	mov	r6, r0
    94b4:	b910      	cbnz	r0, 94bc <bt_init+0x2b4>
		return -ENOBUFS;
    94b6:	f06f 0468 	mvn.w	r4, #104	; 0x68
    94ba:	e72d      	b.n	9318 <bt_init+0x110>
    94bc:	2102      	movs	r1, #2
    94be:	3008      	adds	r0, #8
    94c0:	f015 fe98 	bl	1f1f4 <net_buf_simple_add>
		cp_le->le = 0x01;
    94c4:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
    94c6:	7044      	strb	r4, [r0, #1]
		cp_le->le = 0x01;
    94c8:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    94ca:	4622      	mov	r2, r4
    94cc:	4631      	mov	r1, r6
    94ce:	f640 406d 	movw	r0, #3181	; 0xc6d
    94d2:	f7ff fb19 	bl	8b08 <bt_hci_cmd_send_sync>
		if (err) {
    94d6:	4604      	mov	r4, r0
    94d8:	2800      	cmp	r0, #0
    94da:	f43f af53 	beq.w	9384 <bt_init+0x17c>
    94de:	e71b      	b.n	9318 <bt_init+0x110>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    94e0:	aa01      	add	r2, sp, #4
    94e2:	2100      	movs	r1, #0
    94e4:	f242 001c 	movw	r0, #8220	; 0x201c
    94e8:	f7ff fb0e 	bl	8b08 <bt_hci_cmd_send_sync>
		if (err) {
    94ec:	4604      	mov	r4, r0
    94ee:	2800      	cmp	r0, #0
    94f0:	f47f af12 	bne.w	9318 <bt_init+0x110>
		le_read_supp_states_complete(rsp);
    94f4:	9801      	ldr	r0, [sp, #4]
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    94f6:	6883      	ldr	r3, [r0, #8]
    94f8:	f853 2f01 	ldr.w	r2, [r3, #1]!
    94fc:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    94fe:	e9c5 2328 	strd	r2, r3, [r5, #160]	; 0xa0
		net_buf_unref(rsp);
    9502:	f015 fd27 	bl	1ef54 <net_buf_unref>
    9506:	e742      	b.n	938e <bt_init+0x186>
    9508:	200001c0 	.word	0x200001c0
    950c:	20002b9c 	.word	0x20002b9c
    9510:	200001fc 	.word	0x200001fc
    9514:	00030919 	.word	0x00030919
    9518:	20000258 	.word	0x20000258
    951c:	20000288 	.word	0x20000288
    9520:	00030942 	.word	0x00030942
    9524:	000309c7 	.word	0x000309c7
	net_buf_unref(rsp);
    9528:	9801      	ldr	r0, [sp, #4]
    952a:	f015 fd13 	bl	1ef54 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    952e:	4621      	mov	r1, r4
    9530:	aa01      	add	r2, sp, #4
    9532:	f64f 4002 	movw	r0, #64514	; 0xfc02
    9536:	f7ff fae7 	bl	8b08 <bt_hci_cmd_send_sync>
	if (err) {
    953a:	4604      	mov	r4, r0
    953c:	b110      	cbz	r0, 9544 <bt_init+0x33c>
		BT_WARN("Failed to read supported vendor commands");
    953e:	2157      	movs	r1, #87	; 0x57
    9540:	4813      	ldr	r0, [pc, #76]	; (9590 <bt_init+0x388>)
    9542:	e7a1      	b.n	9488 <bt_init+0x280>
	rp.cmds = (void *)rsp->data;
    9544:	9801      	ldr	r0, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    9546:	6883      	ldr	r3, [r0, #8]
    9548:	f8b3 3001 	ldrh.w	r3, [r3, #1]
    954c:	f8a5 3085 	strh.w	r3, [r5, #133]	; 0x85
	net_buf_unref(rsp);
    9550:	f015 fd00 	bl	1ef54 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    9554:	f895 3085 	ldrb.w	r3, [r5, #133]	; 0x85
    9558:	075b      	lsls	r3, r3, #29
    955a:	d597      	bpl.n	948c <bt_init+0x284>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    955c:	aa01      	add	r2, sp, #4
    955e:	4621      	mov	r1, r4
    9560:	f64f 4003 	movw	r0, #64515	; 0xfc03
    9564:	f7ff fad0 	bl	8b08 <bt_hci_cmd_send_sync>
		if (err) {
    9568:	b110      	cbz	r0, 9570 <bt_init+0x368>
			BT_WARN("Failed to read supported vendor features");
    956a:	2157      	movs	r1, #87	; 0x57
    956c:	4809      	ldr	r0, [pc, #36]	; (9594 <bt_init+0x38c>)
    956e:	e78b      	b.n	9488 <bt_init+0x280>
		rp.feat = (void *)rsp->data;
    9570:	9801      	ldr	r0, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
    9572:	6883      	ldr	r3, [r0, #8]
    9574:	785b      	ldrb	r3, [r3, #1]
    9576:	f885 3084 	strb.w	r3, [r5, #132]	; 0x84
		net_buf_unref(rsp);
    957a:	f015 fceb 	bl	1ef54 <net_buf_unref>
    957e:	e785      	b.n	948c <bt_init+0x284>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    9580:	2104      	movs	r1, #4
    9582:	4805      	ldr	r0, [pc, #20]	; (9598 <bt_init+0x390>)
    9584:	f01f fdf4 	bl	29170 <atomic_or>
	bt_finalize_init();
    9588:	f7ff fe32 	bl	91f0 <bt_finalize_init>
	return 0;
    958c:	e6c4      	b.n	9318 <bt_init+0x110>
    958e:	bf00      	nop
    9590:	0003096b 	.word	0x0003096b
    9594:	00030999 	.word	0x00030999
    9598:	20000254 	.word	0x20000254

0000959c <init_work>:
{
    959c:	b510      	push	{r4, lr}
	err = bt_init();
    959e:	f7ff fe33 	bl	9208 <bt_init>
	if (ready_cb) {
    95a2:	4b03      	ldr	r3, [pc, #12]	; (95b0 <init_work+0x14>)
    95a4:	681b      	ldr	r3, [r3, #0]
    95a6:	b113      	cbz	r3, 95ae <init_work+0x12>
}
    95a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    95ac:	4718      	bx	r3
}
    95ae:	bd10      	pop	{r4, pc}
    95b0:	20002b90 	.word	0x20002b90

000095b4 <bt_enable>:
{
    95b4:	b570      	push	{r4, r5, r6, lr}
	if (!bt_dev.drv) {
    95b6:	4d2b      	ldr	r5, [pc, #172]	; (9664 <bt_enable+0xb0>)
    95b8:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
{
    95bc:	b088      	sub	sp, #32
    95be:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    95c0:	b943      	cbnz	r3, 95d4 <bt_enable+0x20>
		BT_ERR("No HCI driver registered");
    95c2:	2145      	movs	r1, #69	; 0x45
    95c4:	4828      	ldr	r0, [pc, #160]	; (9668 <bt_enable+0xb4>)
    95c6:	f01d fcd2 	bl	26f6e <printk>
		return -ENODEV;
    95ca:	f06f 0412 	mvn.w	r4, #18
}
    95ce:	4620      	mov	r0, r4
    95d0:	b008      	add	sp, #32
    95d2:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    95d4:	2100      	movs	r1, #0
    95d6:	f105 0094 	add.w	r0, r5, #148	; 0x94
    95da:	f01f fdd8 	bl	2918e <atomic_test_and_set_bit>
    95de:	2800      	cmp	r0, #0
    95e0:	d13d      	bne.n	965e <bt_enable+0xaa>
		err = bt_settings_init();
    95e2:	f7fe fbf9 	bl	7dd8 <bt_settings_init>
		if (err) {
    95e6:	4604      	mov	r4, r0
    95e8:	2800      	cmp	r0, #0
    95ea:	d1f0      	bne.n	95ce <bt_enable+0x1a>
	ready_cb = cb;
    95ec:	4b1f      	ldr	r3, [pc, #124]	; (966c <bt_enable+0xb8>)
    95ee:	601e      	str	r6, [r3, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    95f0:	2200      	movs	r2, #0
    95f2:	2300      	movs	r3, #0
    95f4:	e9cd 2306 	strd	r2, r3, [sp, #24]
    95f8:	f06f 0308 	mvn.w	r3, #8
    95fc:	e9cd 0302 	strd	r0, r3, [sp, #8]
    9600:	9004      	str	r0, [sp, #16]
    9602:	e9cd 0000 	strd	r0, r0, [sp]
    9606:	4b1a      	ldr	r3, [pc, #104]	; (9670 <bt_enable+0xbc>)
    9608:	491a      	ldr	r1, [pc, #104]	; (9674 <bt_enable+0xc0>)
    960a:	481b      	ldr	r0, [pc, #108]	; (9678 <bt_enable+0xc4>)
    960c:	f44f 7220 	mov.w	r2, #640	; 0x280
    9610:	f01a fa84 	bl	23b1c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    9614:	4919      	ldr	r1, [pc, #100]	; (967c <bt_enable+0xc8>)
    9616:	4818      	ldr	r0, [pc, #96]	; (9678 <bt_enable+0xc4>)
    9618:	f023 fe99 	bl	2d34e <z_impl_k_thread_name_set>
		bt_hci_ecc_init();
    961c:	f7fe fad0 	bl	7bc0 <bt_hci_ecc_init>
	err = bt_dev.drv->open();
    9620:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    9624:	68db      	ldr	r3, [r3, #12]
    9626:	4798      	blx	r3
	if (err) {
    9628:	4604      	mov	r4, r0
    962a:	b128      	cbz	r0, 9638 <bt_enable+0x84>
		BT_ERR("HCI driver open failed (%d)", err);
    962c:	4602      	mov	r2, r0
    962e:	2145      	movs	r1, #69	; 0x45
    9630:	4813      	ldr	r0, [pc, #76]	; (9680 <bt_enable+0xcc>)
    9632:	f01d fc9c 	bl	26f6e <printk>
		return err;
    9636:	e7ca      	b.n	95ce <bt_enable+0x1a>
	if (!cb) {
    9638:	b926      	cbnz	r6, 9644 <bt_enable+0x90>
}
    963a:	b008      	add	sp, #32
    963c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
    9640:	f7ff bde2 	b.w	9208 <bt_init>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    9644:	4601      	mov	r1, r0
    9646:	f105 0090 	add.w	r0, r5, #144	; 0x90
    964a:	f01f fda0 	bl	2918e <atomic_test_and_set_bit>
    964e:	2800      	cmp	r0, #0
    9650:	d1bd      	bne.n	95ce <bt_enable+0x1a>
		k_queue_append(&work_q->queue, work);
    9652:	f105 0188 	add.w	r1, r5, #136	; 0x88
    9656:	480b      	ldr	r0, [pc, #44]	; (9684 <bt_enable+0xd0>)
    9658:	f023 fe06 	bl	2d268 <k_queue_append>
    965c:	e7b7      	b.n	95ce <bt_enable+0x1a>
		return -EALREADY;
    965e:	f06f 0477 	mvn.w	r4, #119	; 0x77
    9662:	e7b4      	b.n	95ce <bt_enable+0x1a>
    9664:	200001c0 	.word	0x200001c0
    9668:	00030880 	.word	0x00030880
    966c:	20002b90 	.word	0x20002b90
    9670:	00008369 	.word	0x00008369
    9674:	20004d20 	.word	0x20004d20
    9678:	200015d0 	.word	0x200015d0
    967c:	0003089e 	.word	0x0003089e
    9680:	000308a4 	.word	0x000308a4
    9684:	20002490 	.word	0x20002490

00009688 <bt_get_name>:
}
    9688:	4800      	ldr	r0, [pc, #0]	; (968c <bt_get_name+0x4>)
    968a:	4770      	bx	lr
    968c:	00030e99 	.word	0x00030e99

00009690 <bt_id_create>:
{
    9690:	b537      	push	{r0, r1, r2, r4, r5, lr}
    9692:	460c      	mov	r4, r1
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    9694:	4605      	mov	r5, r0
    9696:	b918      	cbnz	r0, 96a0 <bt_id_create+0x10>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    9698:	b304      	cbz	r4, 96dc <bt_id_create+0x4c>
		return -EINVAL;
    969a:	f06f 0415 	mvn.w	r4, #21
    969e:	e027      	b.n	96f0 <bt_id_create+0x60>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    96a0:	2300      	movs	r3, #0
    96a2:	4669      	mov	r1, sp
    96a4:	9300      	str	r3, [sp, #0]
    96a6:	f8cd 3003 	str.w	r3, [sp, #3]
    96aa:	f01f fd9b 	bl	291e4 <bt_addr_le_cmp>
    96ae:	2800      	cmp	r0, #0
    96b0:	d0f2      	beq.n	9698 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    96b2:	782b      	ldrb	r3, [r5, #0]
    96b4:	2b01      	cmp	r3, #1
    96b6:	d104      	bne.n	96c2 <bt_id_create+0x32>
    96b8:	79ab      	ldrb	r3, [r5, #6]
    96ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    96be:	2bc0      	cmp	r3, #192	; 0xc0
    96c0:	d004      	beq.n	96cc <bt_id_create+0x3c>
			BT_ERR("Only static random identity address supported");
    96c2:	2145      	movs	r1, #69	; 0x45
    96c4:	480d      	ldr	r0, [pc, #52]	; (96fc <bt_id_create+0x6c>)
    96c6:	f01d fc52 	bl	26f6e <printk>
			return -EINVAL;
    96ca:	e7e6      	b.n	969a <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
    96cc:	4628      	mov	r0, r5
    96ce:	f7fe fd2d 	bl	812c <id_find>
    96d2:	2800      	cmp	r0, #0
    96d4:	dbe0      	blt.n	9698 <bt_id_create+0x8>
			return -EALREADY;
    96d6:	f06f 0477 	mvn.w	r4, #119	; 0x77
    96da:	e009      	b.n	96f0 <bt_id_create+0x60>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    96dc:	4b08      	ldr	r3, [pc, #32]	; (9700 <bt_id_create+0x70>)
    96de:	79dc      	ldrb	r4, [r3, #7]
    96e0:	2c01      	cmp	r4, #1
    96e2:	d008      	beq.n	96f6 <bt_id_create+0x66>
	new_id = bt_dev.id_count++;
    96e4:	1c62      	adds	r2, r4, #1
	id_create(new_id, addr, irk);
    96e6:	4629      	mov	r1, r5
    96e8:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
    96ea:	71da      	strb	r2, [r3, #7]
	id_create(new_id, addr, irk);
    96ec:	f7fe ffb6 	bl	865c <id_create.isra.22>
}
    96f0:	4620      	mov	r0, r4
    96f2:	b003      	add	sp, #12
    96f4:	bd30      	pop	{r4, r5, pc}
		return -ENOMEM;
    96f6:	f06f 040b 	mvn.w	r4, #11
    96fa:	e7f9      	b.n	96f0 <bt_id_create+0x60>
    96fc:	000308e6 	.word	0x000308e6
    9700:	200001c0 	.word	0x200001c0

00009704 <bt_setup_public_id_addr>:
{
    9704:	b570      	push	{r4, r5, r6, lr}
    9706:	b088      	sub	sp, #32
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    9708:	aa01      	add	r2, sp, #4
    970a:	2100      	movs	r1, #0
    970c:	f241 0009 	movw	r0, #4105	; 0x1009
    9710:	f7ff f9fa 	bl	8b08 <bt_hci_cmd_send_sync>
	if (err) {
    9714:	4e1c      	ldr	r6, [pc, #112]	; (9788 <bt_setup_public_id_addr+0x84>)
    9716:	4604      	mov	r4, r0
    9718:	b138      	cbz	r0, 972a <bt_setup_public_id_addr+0x26>
		BT_WARN("Failed to read public address");
    971a:	2157      	movs	r1, #87	; 0x57
    971c:	481b      	ldr	r0, [pc, #108]	; (978c <bt_setup_public_id_addr+0x88>)
    971e:	f01d fc26 	bl	26f6e <printk>
	bt_dev.id_count = bt_read_public_addr(&addr);
    9722:	2300      	movs	r3, #0
    9724:	71f3      	strb	r3, [r6, #7]
}
    9726:	b008      	add	sp, #32
    9728:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    972a:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    972c:	9004      	str	r0, [sp, #16]
    972e:	689d      	ldr	r5, [r3, #8]
    9730:	f8ad 0014 	strh.w	r0, [sp, #20]
    9734:	3501      	adds	r5, #1
    9736:	2206      	movs	r2, #6
    9738:	a904      	add	r1, sp, #16
    973a:	4628      	mov	r0, r5
    973c:	f023 ff14 	bl	2d568 <memcmp>
    9740:	b918      	cbnz	r0, 974a <bt_setup_public_id_addr+0x46>
		net_buf_unref(rsp);
    9742:	9801      	ldr	r0, [sp, #4]
    9744:	f015 fc06 	bl	1ef54 <net_buf_unref>
    9748:	e7eb      	b.n	9722 <bt_setup_public_id_addr+0x1e>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
    974a:	4b11      	ldr	r3, [pc, #68]	; (9790 <bt_setup_public_id_addr+0x8c>)
    974c:	6818      	ldr	r0, [r3, #0]
    974e:	9002      	str	r0, [sp, #8]
    9750:	889b      	ldrh	r3, [r3, #4]
    9752:	f8ad 300c 	strh.w	r3, [sp, #12]
    9756:	2206      	movs	r2, #6
    9758:	a902      	add	r1, sp, #8
    975a:	4628      	mov	r0, r5
    975c:	f023 ff04 	bl	2d568 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    9760:	2800      	cmp	r0, #0
    9762:	d0ee      	beq.n	9742 <bt_setup_public_id_addr+0x3e>
	bt_addr_copy(&addr->a, &rp->bdaddr);
    9764:	4629      	mov	r1, r5
    9766:	f10d 0019 	add.w	r0, sp, #25
    976a:	f01f fd3e 	bl	291ea <bt_addr_copy>
	net_buf_unref(rsp);
    976e:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    9770:	f88d 4018 	strb.w	r4, [sp, #24]
	net_buf_unref(rsp);
    9774:	f015 fbee 	bl	1ef54 <net_buf_unref>
	bt_dev.id_count = bt_read_public_addr(&addr);
    9778:	2301      	movs	r3, #1
	id_create(BT_ID_DEFAULT, &addr, irk);
    977a:	a906      	add	r1, sp, #24
    977c:	4620      	mov	r0, r4
	bt_dev.id_count = bt_read_public_addr(&addr);
    977e:	71f3      	strb	r3, [r6, #7]
	id_create(BT_ID_DEFAULT, &addr, irk);
    9780:	f7fe ff6c 	bl	865c <id_create.isra.22>
    9784:	e7cf      	b.n	9726 <bt_setup_public_id_addr+0x22>
    9786:	bf00      	nop
    9788:	200001c0 	.word	0x200001c0
    978c:	00030b94 	.word	0x00030b94
    9790:	0002e71b 	.word	0x0002e71b

00009794 <bt_read_static_addr>:
{
    9794:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    9796:	4b1e      	ldr	r3, [pc, #120]	; (9810 <bt_read_static_addr+0x7c>)
    9798:	f893 4086 	ldrb.w	r4, [r3, #134]	; 0x86
    979c:	f014 0401 	ands.w	r4, r4, #1
{
    97a0:	4607      	mov	r7, r0
    97a2:	460d      	mov	r5, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    97a4:	d104      	bne.n	97b0 <bt_read_static_addr+0x1c>
		BT_WARN("Read Static Addresses command not available");
    97a6:	481b      	ldr	r0, [pc, #108]	; (9814 <bt_read_static_addr+0x80>)
    97a8:	2157      	movs	r1, #87	; 0x57
		BT_WARN("No static addresses stored in controller");
    97aa:	f01d fbe0 	bl	26f6e <printk>
    97ae:	e00c      	b.n	97ca <bt_read_static_addr+0x36>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    97b0:	aa01      	add	r2, sp, #4
    97b2:	2100      	movs	r1, #0
    97b4:	f64f 4009 	movw	r0, #64521	; 0xfc09
    97b8:	f7ff f9a6 	bl	8b08 <bt_hci_cmd_send_sync>
	if (err) {
    97bc:	4603      	mov	r3, r0
    97be:	b138      	cbz	r0, 97d0 <bt_read_static_addr+0x3c>
		BT_WARN("Failed to read static addresses");
    97c0:	2157      	movs	r1, #87	; 0x57
    97c2:	4815      	ldr	r0, [pc, #84]	; (9818 <bt_read_static_addr+0x84>)
    97c4:	f01d fbd3 	bl	26f6e <printk>
		return 0;
    97c8:	2400      	movs	r4, #0
}
    97ca:	4620      	mov	r0, r4
    97cc:	b003      	add	sp, #12
    97ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = (void *)rsp->data;
    97d0:	9801      	ldr	r0, [sp, #4]
    97d2:	6882      	ldr	r2, [r0, #8]
	cnt = MIN(rp->num_addrs, size);
    97d4:	7854      	ldrb	r4, [r2, #1]
    97d6:	f04f 0c16 	mov.w	ip, #22
    97da:	42ac      	cmp	r4, r5
    97dc:	bf28      	it	cs
    97de:	462c      	movcs	r4, r5
    97e0:	eb02 060c 	add.w	r6, r2, ip
	for (i = 0; i < cnt; i++) {
    97e4:	42a3      	cmp	r3, r4
    97e6:	db06      	blt.n	97f6 <bt_read_static_addr+0x62>
	net_buf_unref(rsp);
    97e8:	f015 fbb4 	bl	1ef54 <net_buf_unref>
	if (!cnt) {
    97ec:	2c00      	cmp	r4, #0
    97ee:	d1ec      	bne.n	97ca <bt_read_static_addr+0x36>
		BT_WARN("No static addresses stored in controller");
    97f0:	2157      	movs	r1, #87	; 0x57
    97f2:	480a      	ldr	r0, [pc, #40]	; (981c <bt_read_static_addr+0x88>)
    97f4:	e7d9      	b.n	97aa <bt_read_static_addr+0x16>
    97f6:	1c95      	adds	r5, r2, #2
    97f8:	fb0c 7103 	mla	r1, ip, r3, r7
    97fc:	f855 eb04 	ldr.w	lr, [r5], #4
    9800:	f841 eb04 	str.w	lr, [r1], #4
    9804:	42b5      	cmp	r5, r6
    9806:	d1f9      	bne.n	97fc <bt_read_static_addr+0x68>
    9808:	8835      	ldrh	r5, [r6, #0]
    980a:	800d      	strh	r5, [r1, #0]
	for (i = 0; i < cnt; i++) {
    980c:	3301      	adds	r3, #1
    980e:	e7e9      	b.n	97e4 <bt_read_static_addr+0x50>
    9810:	200001c0 	.word	0x200001c0
    9814:	00030aa7 	.word	0x00030aa7
    9818:	00030ad8 	.word	0x00030ad8
    981c:	00030afd 	.word	0x00030afd

00009820 <bt_setup_random_id_addr>:
{
    9820:	b570      	push	{r4, r5, r6, lr}
	if (!bt_dev.id_count) {
    9822:	4d13      	ldr	r5, [pc, #76]	; (9870 <bt_setup_random_id_addr+0x50>)
    9824:	79ec      	ldrb	r4, [r5, #7]
{
    9826:	b088      	sub	sp, #32
	if (!bt_dev.id_count) {
    9828:	b9ec      	cbnz	r4, 9866 <bt_setup_random_id_addr+0x46>
		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    982a:	2101      	movs	r1, #1
    982c:	a802      	add	r0, sp, #8
    982e:	f7ff ffb1 	bl	9794 <bt_read_static_addr>
    9832:	71e8      	strb	r0, [r5, #7]
		if (bt_dev.id_count) {
    9834:	b1b8      	cbz	r0, 9866 <bt_setup_random_id_addr+0x46>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    9836:	2616      	movs	r6, #22
    9838:	e00e      	b.n	9858 <bt_setup_random_id_addr+0x38>
    983a:	ab02      	add	r3, sp, #8
    983c:	fb06 3102 	mla	r1, r6, r2, r3
    9840:	f10d 0001 	add.w	r0, sp, #1
    9844:	f01f fcd1 	bl	291ea <bt_addr_copy>
				addr.type = BT_ADDR_LE_RANDOM;
    9848:	2301      	movs	r3, #1
				id_create(i, &addr, irk);
    984a:	4669      	mov	r1, sp
    984c:	4610      	mov	r0, r2
				addr.type = BT_ADDR_LE_RANDOM;
    984e:	f88d 3000 	strb.w	r3, [sp]
				id_create(i, &addr, irk);
    9852:	f7fe ff03 	bl	865c <id_create.isra.22>
    9856:	3401      	adds	r4, #1
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    9858:	79eb      	ldrb	r3, [r5, #7]
    985a:	b2e2      	uxtb	r2, r4
    985c:	4293      	cmp	r3, r2
    985e:	d8ec      	bhi.n	983a <bt_setup_random_id_addr+0x1a>
			return 0;
    9860:	2000      	movs	r0, #0
}
    9862:	b008      	add	sp, #32
    9864:	bd70      	pop	{r4, r5, r6, pc}
	return bt_id_create(NULL, NULL);
    9866:	2100      	movs	r1, #0
    9868:	4608      	mov	r0, r1
    986a:	f7ff ff11 	bl	9690 <bt_id_create>
    986e:	e7f8      	b.n	9862 <bt_setup_random_id_addr+0x42>
    9870:	200001c0 	.word	0x200001c0

00009874 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
    9874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable;
    9878:	690d      	ldr	r5, [r1, #16]
{
    987a:	b08d      	sub	sp, #52	; 0x34
    987c:	469a      	mov	sl, r3
	struct bt_conn *conn = NULL;
    987e:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable;
    9880:	ebb5 0b03 	subs.w	fp, r5, r3
{
    9884:	4606      	mov	r6, r0
    9886:	460c      	mov	r4, r1
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    9888:	4884      	ldr	r0, [pc, #528]	; (9a9c <bt_le_adv_start_legacy+0x228>)
	struct bt_conn *conn = NULL;
    988a:	9305      	str	r3, [sp, #20]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    988c:	f04f 0101 	mov.w	r1, #1
	bool dir_adv = (param->peer != NULL), scannable;
    9890:	bf18      	it	ne
    9892:	f04f 0b01 	movne.w	fp, #1
{
    9896:	4691      	mov	r9, r2
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    9898:	f01f fcb3 	bl	29202 <atomic_test_bit>
    989c:	2800      	cmp	r0, #0
    989e:	f000 80ef 	beq.w	9a80 <bt_le_adv_start_legacy+0x20c>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
    98a2:	4620      	mov	r0, r4
    98a4:	f7fe fc5a 	bl	815c <valid_adv_param>
    98a8:	4680      	mov	r8, r0
    98aa:	2800      	cmp	r0, #0
    98ac:	f000 80eb 	beq.w	9a86 <bt_le_adv_start_legacy+0x212>
	    !(atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING) ||
    98b0:	210b      	movs	r1, #11
    98b2:	487a      	ldr	r0, [pc, #488]	; (9a9c <bt_le_adv_start_legacy+0x228>)
    98b4:	f01f fca5 	bl	29202 <atomic_test_bit>
	if (!IS_ENABLED(CONFIG_BT_OBSERVER) ||
    98b8:	b918      	cbnz	r0, 98c2 <bt_le_adv_start_legacy+0x4e>
	      atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING))) {
    98ba:	2105      	movs	r1, #5
    98bc:	4877      	ldr	r0, [pc, #476]	; (9a9c <bt_le_adv_start_legacy+0x228>)
    98be:	f01f fca0 	bl	29202 <atomic_test_bit>

	if (!bt_le_adv_random_addr_check(param)) {
		return -EINVAL;
	}

	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    98c2:	f106 0710 	add.w	r7, r6, #16
    98c6:	2106      	movs	r1, #6
    98c8:	4638      	mov	r0, r7
    98ca:	f01f fc9a 	bl	29202 <atomic_test_bit>
    98ce:	2800      	cmp	r0, #0
    98d0:	f040 80dc 	bne.w	9a8c <bt_le_adv_start_legacy+0x218>
		return -EALREADY;
	}

	(void)memset(&set_param, 0, sizeof(set_param));

	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    98d4:	68a3      	ldr	r3, [r4, #8]
    98d6:	f8ad 3020 	strh.w	r3, [sp, #32]
	(void)memset(&set_param, 0, sizeof(set_param));
    98da:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    98de:	68e3      	ldr	r3, [r4, #12]
	(void)memset(&set_param, 0, sizeof(set_param));
    98e0:	f8cd 002b 	str.w	r0, [sp, #43]	; 0x2b
	set_param.channel_map  = get_adv_channel_map(param->options);
    98e4:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    98e6:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = get_adv_channel_map(param->options);
    98ea:	f01f fc32 	bl	29152 <get_adv_channel_map>
	set_param.filter_policy = get_filter_policy(param->options);

	if (adv->id != param->id) {
    98ee:	7832      	ldrb	r2, [r6, #0]
    98f0:	7823      	ldrb	r3, [r4, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
    98f2:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	if (adv->id != param->id) {
    98f6:	429a      	cmp	r2, r3
    98f8:	d004      	beq.n	9904 <bt_le_adv_start_legacy+0x90>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    98fa:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    98fe:	4867      	ldr	r0, [pc, #412]	; (9a9c <bt_le_adv_start_legacy+0x228>)
    9900:	f01f fc50 	bl	291a4 <atomic_and>
		atomic_clear_bit(bt_dev.flags, BT_DEV_RPA_VALID);
	}

	adv->id = param->id;
	bt_dev.adv_conn_id = adv->id;
    9904:	4b66      	ldr	r3, [pc, #408]	; (9aa0 <bt_le_adv_start_legacy+0x22c>)
	adv->id = param->id;
    9906:	7820      	ldrb	r0, [r4, #0]
    9908:	7030      	strb	r0, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
    990a:	f883 0033 	strb.w	r0, [r3, #51]	; 0x33

	err = le_adv_set_random_addr(adv, param->options, dir_adv,
    990e:	465a      	mov	r2, fp
    9910:	f10d 0325 	add.w	r3, sp, #37	; 0x25
    9914:	6861      	ldr	r1, [r4, #4]
    9916:	f7ff fa93 	bl	8e40 <le_adv_set_random_addr.isra.28>
				     &set_param.own_addr_type);
	if (err) {
    991a:	4683      	mov	fp, r0
    991c:	2800      	cmp	r0, #0
    991e:	d16d      	bne.n	99fc <bt_le_adv_start_legacy+0x188>
		return err;
	}

	if (dir_adv) {
    9920:	f106 0009 	add.w	r0, r6, #9
    9924:	2d00      	cmp	r5, #0
    9926:	d042      	beq.n	99ae <bt_le_adv_start_legacy+0x13a>
		bt_addr_le_copy(&adv->target_addr, param->peer);
    9928:	6921      	ldr	r1, [r4, #16]
	} else {
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    992a:	f01f fc63 	bl	291f4 <bt_addr_le_copy>
	}

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    992e:	6863      	ldr	r3, [r4, #4]
    9930:	07d9      	lsls	r1, r3, #31
    9932:	d544      	bpl.n	99be <bt_le_adv_start_legacy+0x14a>
		scannable = true;

		if (dir_adv) {
    9934:	2d00      	cmp	r5, #0
    9936:	d03f      	beq.n	99b8 <bt_le_adv_start_legacy+0x144>
			if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
			} else {
				set_param.type = BT_HCI_ADV_DIRECT_IND;
    9938:	f013 0f10 	tst.w	r3, #16
    993c:	bf14      	ite	ne
    993e:	2304      	movne	r3, #4
    9940:	2301      	moveq	r3, #1
			}

			bt_addr_le_copy(&set_param.direct_addr, param->peer);
    9942:	6921      	ldr	r1, [r4, #16]
    9944:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    9948:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    994c:	f01f fc52 	bl	291f4 <bt_addr_le_copy>

		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
					     BT_HCI_ADV_NONCONN_IND;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    9950:	210f      	movs	r1, #15
    9952:	f242 0006 	movw	r0, #8198	; 0x2006
    9956:	f7fe ff99 	bl	888c <bt_hci_cmd_create>
	if (!buf) {
    995a:	4683      	mov	fp, r0
    995c:	2800      	cmp	r0, #0
    995e:	f000 8098 	beq.w	9a92 <bt_le_adv_start_legacy+0x21e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    9962:	220f      	movs	r2, #15
    9964:	a908      	add	r1, sp, #32
    9966:	3008      	adds	r0, #8
    9968:	f023 f83b 	bl	2c9e2 <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    996c:	2200      	movs	r2, #0
    996e:	4659      	mov	r1, fp
    9970:	f242 0006 	movw	r0, #8198	; 0x2006
    9974:	f7ff f8c8 	bl	8b08 <bt_hci_cmd_send_sync>
	if (err) {
    9978:	2800      	cmp	r0, #0
    997a:	f040 808d 	bne.w	9a98 <bt_le_adv_start_legacy+0x224>
		return err;
	}

	if (!dir_adv) {
    997e:	b36d      	cbz	r5, 99dc <bt_le_adv_start_legacy+0x168>
			return err;
		}
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    9980:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    9982:	07da      	lsls	r2, r3, #31
    9984:	d43e      	bmi.n	9a04 <bt_le_adv_start_legacy+0x190>
	return set_le_adv_enable_legacy(adv, enable);
    9986:	2101      	movs	r1, #1
    9988:	4630      	mov	r0, r6
    998a:	f7ff fac7 	bl	8f1c <set_le_adv_enable_legacy>
			return err;
		}
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
    998e:	4683      	mov	fp, r0
    9990:	2800      	cmp	r0, #0
    9992:	d06e      	beq.n	9a72 <bt_le_adv_start_legacy+0x1fe>
		BT_ERR("Failed to start advertiser");
    9994:	4843      	ldr	r0, [pc, #268]	; (9aa4 <bt_le_adv_start_legacy+0x230>)
    9996:	2145      	movs	r1, #69	; 0x45
    9998:	f01d fae9 	bl	26f6e <printk>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    999c:	9805      	ldr	r0, [sp, #20]
    999e:	b368      	cbz	r0, 99fc <bt_le_adv_start_legacy+0x188>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    99a0:	2100      	movs	r1, #0
    99a2:	f000 fe05 	bl	a5b0 <bt_conn_set_state>
			bt_conn_unref(conn);
    99a6:	9805      	ldr	r0, [sp, #20]
    99a8:	f000 fdce 	bl	a548 <bt_conn_unref>
    99ac:	e026      	b.n	99fc <bt_le_adv_start_legacy+0x188>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    99ae:	9506      	str	r5, [sp, #24]
    99b0:	a906      	add	r1, sp, #24
    99b2:	f8cd 501b 	str.w	r5, [sp, #27]
    99b6:	e7b8      	b.n	992a <bt_le_adv_start_legacy+0xb6>
			set_param.type = BT_HCI_ADV_IND;
    99b8:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
    99bc:	e7c8      	b.n	9950 <bt_le_adv_start_legacy+0xdc>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
    99be:	9a16      	ldr	r2, [sp, #88]	; 0x58
    99c0:	b952      	cbnz	r2, 99d8 <bt_le_adv_start_legacy+0x164>
    99c2:	f003 0308 	and.w	r3, r3, #8
    99c6:	2b00      	cmp	r3, #0
    99c8:	bf0a      	itet	eq
    99ca:	f04f 0800 	moveq.w	r8, #0
    99ce:	2302      	movne	r3, #2
    99d0:	2303      	moveq	r3, #3
		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
    99d2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    99d6:	e7bb      	b.n	9950 <bt_le_adv_start_legacy+0xdc>
    99d8:	2302      	movs	r3, #2
    99da:	e7fa      	b.n	99d2 <bt_le_adv_start_legacy+0x15e>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
    99dc:	6863      	ldr	r3, [r4, #4]
    99de:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    99e2:	e9cd 8301 	strd	r8, r3, [sp, #4]
    99e6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    99e8:	9300      	str	r3, [sp, #0]
    99ea:	4652      	mov	r2, sl
    99ec:	9b16      	ldr	r3, [sp, #88]	; 0x58
    99ee:	4649      	mov	r1, r9
    99f0:	4630      	mov	r0, r6
    99f2:	f7ff f989 	bl	8d08 <le_adv_update.constprop.37>
		if (err) {
    99f6:	4683      	mov	fp, r0
    99f8:	2800      	cmp	r0, #0
    99fa:	d0c1      	beq.n	9980 <bt_le_adv_start_legacy+0x10c>

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
    99fc:	4658      	mov	r0, fp
    99fe:	b00d      	add	sp, #52	; 0x34
    9a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = le_adv_start_add_conn(adv, &conn);
    9a04:	a905      	add	r1, sp, #20
    9a06:	4630      	mov	r0, r6
    9a08:	f7fe fdd4 	bl	85b4 <le_adv_start_add_conn>
		if (err) {
    9a0c:	4683      	mov	fp, r0
    9a0e:	2800      	cmp	r0, #0
    9a10:	d0b9      	beq.n	9986 <bt_le_adv_start_legacy+0x112>
			if (err == -ENOMEM && !dir_adv &&
    9a12:	f110 0f0c 	cmn.w	r0, #12
    9a16:	d1f1      	bne.n	99fc <bt_le_adv_start_legacy+0x188>
    9a18:	2d00      	cmp	r5, #0
    9a1a:	d1ef      	bne.n	99fc <bt_le_adv_start_legacy+0x188>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    9a1c:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
    9a1e:	079b      	lsls	r3, r3, #30
    9a20:	d4ec      	bmi.n	99fc <bt_le_adv_start_legacy+0x188>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    9a22:	6860      	ldr	r0, [r4, #4]
    9a24:	f080 0002 	eor.w	r0, r0, #2
    9a28:	f3c0 0b40 	ubfx	fp, r0, #1, #1
    9a2c:	f00b 0201 	and.w	r2, fp, #1
    9a30:	210c      	movs	r1, #12
    9a32:	4638      	mov	r0, r7
    9a34:	f01f fbc5 	bl	291c2 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME,
    9a38:	6862      	ldr	r2, [r4, #4]
    9a3a:	2107      	movs	r1, #7
    9a3c:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    9a40:	4638      	mov	r0, r7
    9a42:	f01f fbbe 	bl	291c2 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
    9a46:	6862      	ldr	r2, [r4, #4]
    9a48:	2108      	movs	r1, #8
    9a4a:	f002 0201 	and.w	r2, r2, #1
    9a4e:	4638      	mov	r0, r7
    9a50:	f01f fbb7 	bl	291c2 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
    9a54:	4642      	mov	r2, r8
    9a56:	2109      	movs	r1, #9
    9a58:	4638      	mov	r0, r7
    9a5a:	f01f fbb2 	bl	291c2 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
    9a5e:	6862      	ldr	r2, [r4, #4]
    9a60:	210b      	movs	r1, #11
    9a62:	f3c2 0280 	ubfx	r2, r2, #2, #1
    9a66:	4638      	mov	r0, r7
    9a68:	f01f fbab 	bl	291c2 <atomic_set_bit_to>
	return 0;
    9a6c:	f04f 0b00 	mov.w	fp, #0
    9a70:	e7c4      	b.n	99fc <bt_le_adv_start_legacy+0x188>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    9a72:	9805      	ldr	r0, [sp, #20]
    9a74:	b108      	cbz	r0, 9a7a <bt_le_adv_start_legacy+0x206>
		bt_conn_unref(conn);
    9a76:	f000 fd67 	bl	a548 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    9a7a:	2d00      	cmp	r5, #0
    9a7c:	d1d6      	bne.n	9a2c <bt_le_adv_start_legacy+0x1b8>
    9a7e:	e7d0      	b.n	9a22 <bt_le_adv_start_legacy+0x1ae>
		return -EAGAIN;
    9a80:	f06f 0b0a 	mvn.w	fp, #10
    9a84:	e7ba      	b.n	99fc <bt_le_adv_start_legacy+0x188>
		return -EINVAL;
    9a86:	f06f 0b15 	mvn.w	fp, #21
    9a8a:	e7b7      	b.n	99fc <bt_le_adv_start_legacy+0x188>
		return -EALREADY;
    9a8c:	f06f 0b77 	mvn.w	fp, #119	; 0x77
    9a90:	e7b4      	b.n	99fc <bt_le_adv_start_legacy+0x188>
		return -ENOBUFS;
    9a92:	f06f 0b68 	mvn.w	fp, #104	; 0x68
    9a96:	e7b1      	b.n	99fc <bt_le_adv_start_legacy+0x188>
    9a98:	4683      	mov	fp, r0
    9a9a:	e7af      	b.n	99fc <bt_le_adv_start_legacy+0x188>
    9a9c:	20000254 	.word	0x20000254
    9aa0:	200001c0 	.word	0x200001c0
    9aa4:	000309f9 	.word	0x000309f9

00009aa8 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    9aa8:	b513      	push	{r0, r1, r4, lr}

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    9aaa:	9c04      	ldr	r4, [sp, #16]
    9aac:	e9cd 3400 	strd	r3, r4, [sp]
    9ab0:	4613      	mov	r3, r2
    9ab2:	460a      	mov	r2, r1
    9ab4:	4601      	mov	r1, r0
    9ab6:	4802      	ldr	r0, [pc, #8]	; (9ac0 <bt_le_adv_start+0x18>)
    9ab8:	f7ff fedc 	bl	9874 <bt_le_adv_start_legacy>
	if (err) {
		adv_delete_legacy();
	}

	return err;
}
    9abc:	b002      	add	sp, #8
    9abe:	bd10      	pop	{r4, pc}
    9ac0:	200001d8 	.word	0x200001d8

00009ac4 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
    9ac4:	b530      	push	{r4, r5, lr}
    9ac6:	4c2a      	ldr	r4, [pc, #168]	; (9b70 <bt_le_adv_stop+0xac>)
    9ac8:	b085      	sub	sp, #20
    9aca:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    9ace:	f104 0028 	add.w	r0, r4, #40	; 0x28
    9ad2:	f01f fb67 	bl	291a4 <atomic_and>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    9ad6:	2106      	movs	r1, #6
    9ad8:	f104 0028 	add.w	r0, r4, #40	; 0x28
    9adc:	f01f fb91 	bl	29202 <atomic_test_bit>
    9ae0:	b918      	cbnz	r0, 9aea <bt_le_adv_stop+0x26>
		/* Legacy advertiser exists, but is not currently advertising.
		 * This happens when keep advertising behavior is active but
		 * no conn object is available to do connectable advertising.
		 */
		adv_delete_legacy();
		return 0;
    9ae2:	2400      	movs	r4, #0
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
    9ae4:	4620      	mov	r0, r4
    9ae6:	b005      	add	sp, #20
    9ae8:	bd30      	pop	{r4, r5, pc}
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
    9aea:	2108      	movs	r1, #8
    9aec:	f104 0028 	add.w	r0, r4, #40	; 0x28
    9af0:	f01f fb87 	bl	29202 <atomic_test_bit>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    9af4:	b308      	cbz	r0, 9b3a <bt_le_adv_stop+0x76>
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    9af6:	2300      	movs	r3, #0
    9af8:	4669      	mov	r1, sp
    9afa:	f104 0021 	add.w	r0, r4, #33	; 0x21
    9afe:	9300      	str	r3, [sp, #0]
    9b00:	f8cd 3003 	str.w	r3, [sp, #3]
    9b04:	f01f fb6e 	bl	291e4 <bt_addr_le_cmp>
    9b08:	7e25      	ldrb	r5, [r4, #24]
    9b0a:	bb60      	cbnz	r0, 9b66 <bt_le_adv_stop+0xa2>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
    9b0c:	4b19      	ldr	r3, [pc, #100]	; (9b74 <bt_le_adv_stop+0xb0>)
    9b0e:	889a      	ldrh	r2, [r3, #4]
    9b10:	6818      	ldr	r0, [r3, #0]
    9b12:	799b      	ldrb	r3, [r3, #6]
    9b14:	f8ad 200c 	strh.w	r2, [sp, #12]
    9b18:	9002      	str	r0, [sp, #8]
    9b1a:	f88d 300e 	strb.w	r3, [sp, #14]
    9b1e:	2204      	movs	r2, #4
    9b20:	a902      	add	r1, sp, #8
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    9b22:	4628      	mov	r0, r5
    9b24:	f000 fe5a 	bl	a7dc <bt_conn_lookup_state_le>
    9b28:	4604      	mov	r4, r0
	if (conn) {
    9b2a:	b130      	cbz	r0, 9b3a <bt_le_adv_stop+0x76>
		conn->err = status;
    9b2c:	2100      	movs	r1, #0
    9b2e:	7241      	strb	r1, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    9b30:	f000 fd3e 	bl	a5b0 <bt_conn_set_state>
		bt_conn_unref(conn);
    9b34:	4620      	mov	r0, r4
    9b36:	f000 fd07 	bl	a548 <bt_conn_unref>
		err = set_le_adv_enable_legacy(adv, false);
    9b3a:	2100      	movs	r1, #0
    9b3c:	480e      	ldr	r0, [pc, #56]	; (9b78 <bt_le_adv_stop+0xb4>)
    9b3e:	f7ff f9ed 	bl	8f1c <set_le_adv_enable_legacy>
		if (err) {
    9b42:	4604      	mov	r4, r0
    9b44:	2800      	cmp	r0, #0
    9b46:	d1cd      	bne.n	9ae4 <bt_le_adv_stop+0x20>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    9b48:	2105      	movs	r1, #5
    9b4a:	480c      	ldr	r0, [pc, #48]	; (9b7c <bt_le_adv_stop+0xb8>)
    9b4c:	f01f fb59 	bl	29202 <atomic_test_bit>
    9b50:	2800      	cmp	r0, #0
    9b52:	d0c6      	beq.n	9ae2 <bt_le_adv_stop+0x1e>
	return set_le_scan_enable_legacy(enable);
    9b54:	4620      	mov	r0, r4
    9b56:	f7ff f839 	bl	8bcc <set_le_scan_enable_legacy>
			le_set_private_addr(BT_ID_DEFAULT);
    9b5a:	f01f fb5b 	bl	29214 <le_adv_set_private_addr.isra.27>
	return set_le_scan_enable_legacy(enable);
    9b5e:	2001      	movs	r0, #1
    9b60:	f7ff f834 	bl	8bcc <set_le_scan_enable_legacy>
    9b64:	e7be      	b.n	9ae4 <bt_le_adv_stop+0x20>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    9b66:	2205      	movs	r2, #5
    9b68:	f104 0121 	add.w	r1, r4, #33	; 0x21
    9b6c:	e7d9      	b.n	9b22 <bt_le_adv_stop+0x5e>
    9b6e:	bf00      	nop
    9b70:	200001c0 	.word	0x200001c0
    9b74:	0002e714 	.word	0x0002e714
    9b78:	200001d8 	.word	0x200001d8
    9b7c:	20000254 	.word	0x20000254

00009b80 <bt_le_adv_resume>:

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
    9b80:	b513      	push	{r0, r1, r4, lr}
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
    9b82:	210c      	movs	r1, #12
    9b84:	4817      	ldr	r0, [pc, #92]	; (9be4 <bt_le_adv_resume+0x64>)
    9b86:	f01f fb3c 	bl	29202 <atomic_test_bit>
    9b8a:	b340      	cbz	r0, 9bde <bt_le_adv_resume+0x5e>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
    9b8c:	2106      	movs	r1, #6
    9b8e:	4815      	ldr	r0, [pc, #84]	; (9be4 <bt_le_adv_resume+0x64>)
    9b90:	f01f fb37 	bl	29202 <atomic_test_bit>
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
    9b94:	4604      	mov	r4, r0
    9b96:	bb10      	cbnz	r0, 9bde <bt_le_adv_resume+0x5e>
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
    9b98:	2108      	movs	r1, #8
    9b9a:	4812      	ldr	r0, [pc, #72]	; (9be4 <bt_le_adv_resume+0x64>)
    9b9c:	f01f fb31 	bl	29202 <atomic_test_bit>
    9ba0:	b1e8      	cbz	r0, 9bde <bt_le_adv_resume+0x5e>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
    9ba2:	a901      	add	r1, sp, #4
    9ba4:	4810      	ldr	r0, [pc, #64]	; (9be8 <bt_le_adv_resume+0x68>)
    9ba6:	f7fe fd05 	bl	85b4 <le_adv_start_add_conn>
	if (err) {
    9baa:	b9c0      	cbnz	r0, 9bde <bt_le_adv_resume+0x5e>
	return set_le_adv_enable_legacy(adv, enable);
    9bac:	2101      	movs	r1, #1
    9bae:	480e      	ldr	r0, [pc, #56]	; (9be8 <bt_le_adv_resume+0x68>)
    9bb0:	f7ff f9b4 	bl	8f1c <set_le_adv_enable_legacy>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		le_adv_set_private_addr(adv);
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
    9bb4:	b150      	cbz	r0, 9bcc <bt_le_adv_resume+0x4c>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    9bb6:	4621      	mov	r1, r4
    9bb8:	9801      	ldr	r0, [sp, #4]
    9bba:	f000 fcf9 	bl	a5b0 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    9bbe:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    9bc2:	4808      	ldr	r0, [pc, #32]	; (9be4 <bt_le_adv_resume+0x64>)
    9bc4:	f01f faee 	bl	291a4 <atomic_and>
	return (old & mask) != 0;
    9bc8:	f3c0 3400 	ubfx	r4, r0, #12, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
    9bcc:	9801      	ldr	r0, [sp, #4]
    9bce:	f000 fcbb 	bl	a548 <bt_conn_unref>
	if (persist_paused) {
    9bd2:	b124      	cbz	r4, 9bde <bt_le_adv_resume+0x5e>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    9bd4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    9bd8:	4802      	ldr	r0, [pc, #8]	; (9be4 <bt_le_adv_resume+0x64>)
    9bda:	f01f fac9 	bl	29170 <atomic_or>
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
    9bde:	b002      	add	sp, #8
    9be0:	bd10      	pop	{r4, pc}
    9be2:	bf00      	nop
    9be4:	200001e8 	.word	0x200001e8
    9be8:	200001d8 	.word	0x200001d8

00009bec <enh_conn_complete>:
{
    9bec:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (evt->status) {
    9bf0:	7805      	ldrb	r5, [r0, #0]
{
    9bf2:	4604      	mov	r4, r0
	if (evt->status) {
    9bf4:	b305      	cbz	r5, 9c38 <enh_conn_complete+0x4c>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    9bf6:	2d3c      	cmp	r5, #60	; 0x3c
    9bf8:	d118      	bne.n	9c2c <enh_conn_complete+0x40>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    9bfa:	f06f 0140 	mvn.w	r1, #64	; 0x40
    9bfe:	484c      	ldr	r0, [pc, #304]	; (9d30 <enh_conn_complete+0x144>)
    9c00:	f01f fad0 	bl	291a4 <atomic_and>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
    9c04:	2000      	movs	r0, #0
    9c06:	f7fe fb91 	bl	832c <find_pending_connect.part.21>
		if (!conn) {
    9c0a:	4604      	mov	r4, r0
    9c0c:	b930      	cbnz	r0, 9c1c <enh_conn_complete+0x30>
			BT_ERR("No pending slave connection");
    9c0e:	2145      	movs	r1, #69	; 0x45
    9c10:	4848      	ldr	r0, [pc, #288]	; (9d34 <enh_conn_complete+0x148>)
    9c12:	f01d f9ac 	bl	26f6e <printk>
}
    9c16:	b004      	add	sp, #16
    9c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
    9c1c:	7245      	strb	r5, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    9c1e:	2100      	movs	r1, #0
    9c20:	f000 fcc6 	bl	a5b0 <bt_conn_set_state>
		bt_conn_unref(conn);
    9c24:	4620      	mov	r0, r4
	bt_conn_unref(conn);
    9c26:	f000 fc8f 	bl	a548 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    9c2a:	e7f4      	b.n	9c16 <enh_conn_complete+0x2a>
		BT_WARN("Unexpected status 0x%02x", evt->status);
    9c2c:	462a      	mov	r2, r5
    9c2e:	2157      	movs	r1, #87	; 0x57
    9c30:	4841      	ldr	r0, [pc, #260]	; (9d38 <enh_conn_complete+0x14c>)
    9c32:	f01d f99c 	bl	26f6e <printk>
		return;
    9c36:	e7ee      	b.n	9c16 <enh_conn_complete+0x2a>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    9c38:	7903      	ldrb	r3, [r0, #4]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    9c3a:	f8b0 7001 	ldrh.w	r7, [r0, #1]
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    9c3e:	3b02      	subs	r3, #2
    9c40:	1d06      	adds	r6, r0, #4
    9c42:	2b01      	cmp	r3, #1
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    9c44:	fa1f f887 	uxth.w	r8, r7
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    9c48:	4631      	mov	r1, r6
    9c4a:	a802      	add	r0, sp, #8
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    9c4c:	d82c      	bhi.n	9ca8 <enh_conn_complete+0xbc>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    9c4e:	f01f fad1 	bl	291f4 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    9c52:	f89d 3008 	ldrb.w	r3, [sp, #8]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
    9c56:	f104 0111 	add.w	r1, r4, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    9c5a:	3b02      	subs	r3, #2
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
    9c5c:	f10d 0001 	add.w	r0, sp, #1
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    9c60:	f88d 3008 	strb.w	r3, [sp, #8]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
    9c64:	f01f fac1 	bl	291ea <bt_addr_copy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    9c68:	2301      	movs	r3, #1
    9c6a:	f88d 3000 	strb.w	r3, [sp]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
    9c6e:	78e3      	ldrb	r3, [r4, #3]
    9c70:	2b01      	cmp	r3, #1
    9c72:	d10c      	bne.n	9c8e <enh_conn_complete+0xa2>
    9c74:	a802      	add	r0, sp, #8
    9c76:	f7fe fb59 	bl	832c <find_pending_connect.part.21>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    9c7a:	78e3      	ldrb	r3, [r4, #3]
    9c7c:	2b01      	cmp	r3, #1
    9c7e:	4605      	mov	r5, r0
    9c80:	d104      	bne.n	9c8c <enh_conn_complete+0xa0>
    9c82:	f06f 0140 	mvn.w	r1, #64	; 0x40
    9c86:	482a      	ldr	r0, [pc, #168]	; (9d30 <enh_conn_complete+0x144>)
    9c88:	f01f fa8c 	bl	291a4 <atomic_and>
	if (!conn) {
    9c8c:	b995      	cbnz	r5, 9cb4 <enh_conn_complete+0xc8>
		BT_ERR("No pending conn for peer %s",
    9c8e:	4630      	mov	r0, r6
    9c90:	f7fd fdce 	bl	7830 <bt_addr_le_str_real>
    9c94:	2145      	movs	r1, #69	; 0x45
    9c96:	4602      	mov	r2, r0
    9c98:	4828      	ldr	r0, [pc, #160]	; (9d3c <enh_conn_complete+0x150>)
    9c9a:	f01d f968 	bl	26f6e <printk>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
    9c9e:	211f      	movs	r1, #31
    9ca0:	4640      	mov	r0, r8
    9ca2:	f01f fac9 	bl	29238 <bt_hci_disconnect>
		return;
    9ca6:	e7b6      	b.n	9c16 <enh_conn_complete+0x2a>
		bt_addr_le_copy(&id_addr,
    9ca8:	f01f faa4 	bl	291f4 <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    9cac:	4668      	mov	r0, sp
    9cae:	f01f faa1 	bl	291f4 <bt_addr_le_copy>
    9cb2:	e7dc      	b.n	9c6e <enh_conn_complete+0x82>
	conn->handle = handle;
    9cb4:	4628      	mov	r0, r5
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    9cb6:	a902      	add	r1, sp, #8
	conn->handle = handle;
    9cb8:	f820 7b88 	strh.w	r7, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    9cbc:	f01f fa9a 	bl	291f4 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    9cc0:	7e22      	ldrb	r2, [r4, #24]
    9cc2:	7de3      	ldrb	r3, [r4, #23]
    9cc4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    9cc8:	f8a5 309e 	strh.w	r3, [r5, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    9ccc:	7ea2      	ldrb	r2, [r4, #26]
    9cce:	7e63      	ldrb	r3, [r4, #25]
    9cd0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    9cd4:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    9cd8:	7ee3      	ldrb	r3, [r4, #27]
    9cda:	7f22      	ldrb	r2, [r4, #28]
    9cdc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    9ce0:	f8a5 30a6 	strh.w	r3, [r5, #166]	; 0xa6
	conn->role = evt->role;
    9ce4:	78e3      	ldrb	r3, [r4, #3]
    9ce6:	70eb      	strb	r3, [r5, #3]
	conn->err = 0U;
    9ce8:	2400      	movs	r4, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    9cea:	2b01      	cmp	r3, #1
	conn->err = 0U;
    9cec:	726c      	strb	r4, [r5, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    9cee:	d116      	bne.n	9d1e <enh_conn_complete+0x132>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    9cf0:	4669      	mov	r1, sp
    9cf2:	f105 008f 	add.w	r0, r5, #143	; 0x8f
    9cf6:	f01f fa7d 	bl	291f4 <bt_addr_le_copy>
						&bt_dev.id_addr[conn->id]);
    9cfa:	7a29      	ldrb	r1, [r5, #8]
    9cfc:	4a10      	ldr	r2, [pc, #64]	; (9d40 <enh_conn_complete+0x154>)
    9cfe:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
    9d02:	4411      	add	r1, r2
    9d04:	f105 0096 	add.w	r0, r5, #150	; 0x96
    9d08:	f01f fa74 	bl	291f4 <bt_addr_le_copy>
		if (BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    9d0c:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
    9d10:	4622      	mov	r2, r4
    9d12:	f001 0340 	and.w	r3, r1, #64	; 0x40
    9d16:	4313      	orrs	r3, r2
    9d18:	d001      	beq.n	9d1e <enh_conn_complete+0x132>
			bt_le_adv_resume();
    9d1a:	f7ff ff31 	bl	9b80 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    9d1e:	2107      	movs	r1, #7
    9d20:	4628      	mov	r0, r5
    9d22:	f000 fc45 	bl	a5b0 <bt_conn_set_state>
	conn_auto_initiate(conn);
    9d26:	4628      	mov	r0, r5
    9d28:	f7fe fe9e 	bl	8a68 <conn_auto_initiate>
	bt_conn_unref(conn);
    9d2c:	4628      	mov	r0, r5
    9d2e:	e77a      	b.n	9c26 <enh_conn_complete+0x3a>
    9d30:	200001e8 	.word	0x200001e8
    9d34:	00030bb7 	.word	0x00030bb7
    9d38:	00030bd8 	.word	0x00030bd8
    9d3c:	00030bf6 	.word	0x00030bf6
    9d40:	200001c0 	.word	0x200001c0

00009d44 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
    9d44:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    9d48:	4605      	mov	r5, r0
    9d4a:	4688      	mov	r8, r1
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    9d4c:	4855      	ldr	r0, [pc, #340]	; (9ea4 <bt_le_scan_start+0x160>)
    9d4e:	2101      	movs	r1, #1
    9d50:	f01f fa57 	bl	29202 <atomic_test_bit>
    9d54:	2800      	cmp	r0, #0
    9d56:	f000 80a1 	beq.w	9e9c <bt_le_scan_start+0x158>
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    9d5a:	782a      	ldrb	r2, [r5, #0]
    9d5c:	2a01      	cmp	r2, #1
    9d5e:	d905      	bls.n	9d6c <bt_le_scan_start+0x28>
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
    9d60:	f06f 0415 	mvn.w	r4, #21
	}

	scan_dev_found_cb = cb;

	return 0;
}
    9d64:	4620      	mov	r0, r4
    9d66:	b002      	add	sp, #8
    9d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
    9d6c:	686b      	ldr	r3, [r5, #4]
    9d6e:	f033 030f 	bics.w	r3, r3, #15
    9d72:	d1f5      	bne.n	9d60 <bt_le_scan_start+0x1c>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
    9d74:	8928      	ldrh	r0, [r5, #8]
    9d76:	1f03      	subs	r3, r0, #4
    9d78:	b29b      	uxth	r3, r3
    9d7a:	f643 74fc 	movw	r4, #16380	; 0x3ffc
    9d7e:	42a3      	cmp	r3, r4
    9d80:	d8ee      	bhi.n	9d60 <bt_le_scan_start+0x1c>
	if (param->window < 0x0004 || param->window > 0x4000) {
    9d82:	8969      	ldrh	r1, [r5, #10]
    9d84:	1f0b      	subs	r3, r1, #4
    9d86:	b29b      	uxth	r3, r3
    9d88:	42a3      	cmp	r3, r4
    9d8a:	d8e9      	bhi.n	9d60 <bt_le_scan_start+0x1c>
	if (param->window > param->interval) {
    9d8c:	4288      	cmp	r0, r1
    9d8e:	d3e7      	bcc.n	9d60 <bt_le_scan_start+0x1c>
	if (param->type && !bt_le_scan_random_addr_check()) {
    9d90:	b942      	cbnz	r2, 9da4 <bt_le_scan_start+0x60>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    9d92:	2106      	movs	r1, #6
    9d94:	4843      	ldr	r0, [pc, #268]	; (9ea4 <bt_le_scan_start+0x160>)
    9d96:	f01f f9fa 	bl	2918e <atomic_test_and_set_bit>
    9d9a:	4603      	mov	r3, r0
    9d9c:	b138      	cbz	r0, 9dae <bt_le_scan_start+0x6a>
		return -EALREADY;
    9d9e:	f06f 0477 	mvn.w	r4, #119	; 0x77
    9da2:	e7df      	b.n	9d64 <bt_le_scan_start+0x20>
	if (param->type && !bt_le_scan_random_addr_check()) {
    9da4:	f7ff f8e8 	bl	8f78 <bt_le_scan_random_addr_check>
    9da8:	2800      	cmp	r0, #0
    9daa:	d1f2      	bne.n	9d92 <bt_le_scan_start+0x4e>
    9dac:	e7d8      	b.n	9d60 <bt_le_scan_start+0x1c>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    9dae:	2105      	movs	r1, #5
    9db0:	483c      	ldr	r0, [pc, #240]	; (9ea4 <bt_le_scan_start+0x160>)
    9db2:	f01f fa26 	bl	29202 <atomic_test_bit>
    9db6:	b150      	cbz	r0, 9dce <bt_le_scan_start+0x8a>
	return set_le_scan_enable_legacy(enable);
    9db8:	4618      	mov	r0, r3
    9dba:	f7fe ff07 	bl	8bcc <set_le_scan_enable_legacy>
		if (err) {
    9dbe:	4604      	mov	r4, r0
    9dc0:	b128      	cbz	r0, 9dce <bt_le_scan_start+0x8a>
    9dc2:	f06f 0140 	mvn.w	r1, #64	; 0x40
    9dc6:	4837      	ldr	r0, [pc, #220]	; (9ea4 <bt_le_scan_start+0x160>)
    9dc8:	f01f f9ec 	bl	291a4 <atomic_and>
		return err;
    9dcc:	e7ca      	b.n	9d64 <bt_le_scan_start+0x20>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
    9dce:	686a      	ldr	r2, [r5, #4]
    9dd0:	4e35      	ldr	r6, [pc, #212]	; (9ea8 <bt_le_scan_start+0x164>)
    9dd2:	f002 0201 	and.w	r2, r2, #1
    9dd6:	2108      	movs	r1, #8
    9dd8:	f106 0094 	add.w	r0, r6, #148	; 0x94
    9ddc:	f01f f9f1 	bl	291c2 <atomic_set_bit_to>
		if (param->timeout) {
    9de0:	89ab      	ldrh	r3, [r5, #12]
    9de2:	b143      	cbz	r3, 9df6 <bt_le_scan_start+0xb2>
    9de4:	f06f 0140 	mvn.w	r1, #64	; 0x40
    9de8:	f106 0094 	add.w	r0, r6, #148	; 0x94
    9dec:	f01f f9da 	bl	291a4 <atomic_and>
			return -ENOTSUP;
    9df0:	f06f 0485 	mvn.w	r4, #133	; 0x85
    9df4:	e7b6      	b.n	9d64 <bt_le_scan_start+0x20>
		err = start_le_scan_legacy(param->type, param->interval,
    9df6:	782f      	ldrb	r7, [r5, #0]
	(void)memset(&set_param, 0, sizeof(set_param));
    9df8:	f88d 3006 	strb.w	r3, [sp, #6]
	set_param.interval = sys_cpu_to_le16(interval);
    9dfc:	892b      	ldrh	r3, [r5, #8]
    9dfe:	f8ad 3001 	strh.w	r3, [sp, #1]
	set_param.window = sys_cpu_to_le16(window);
    9e02:	896b      	ldrh	r3, [r5, #10]
    9e04:	f8ad 3003 	strh.w	r3, [sp, #3]
		*own_addr_type = bt_dev.id_addr[0].type;
    9e08:	4630      	mov	r0, r6
	active_scan = scan_type == BT_HCI_LE_SCAN_ACTIVE;
    9e0a:	1e7b      	subs	r3, r7, #1
    9e0c:	425d      	negs	r5, r3
    9e0e:	415d      	adcs	r5, r3
	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
    9e10:	2106      	movs	r1, #6
		*own_addr_type = bt_dev.id_addr[0].type;
    9e12:	f810 3b28 	ldrb.w	r3, [r0], #40
	set_param.scan_type = scan_type;
    9e16:	f88d 7000 	strb.w	r7, [sp]
		*own_addr_type = bt_dev.id_addr[0].type;
    9e1a:	f88d 3005 	strb.w	r3, [sp, #5]
	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
    9e1e:	f01f f9f0 	bl	29202 <atomic_test_bit>
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    9e22:	b9a0      	cbnz	r0, 9e4e <bt_le_scan_start+0x10a>
			err = le_set_private_addr(BT_ID_DEFAULT);
    9e24:	f01f f9f6 	bl	29214 <le_adv_set_private_addr.isra.27>
			if (err) {
    9e28:	4604      	mov	r4, r0
    9e2a:	b168      	cbz	r0, 9e48 <bt_le_scan_start+0x104>
				if (active_scan || !is_adv_using_rand_addr()) {
    9e2c:	2f01      	cmp	r7, #1
    9e2e:	d0c8      	beq.n	9dc2 <bt_le_scan_start+0x7e>
	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
    9e30:	2106      	movs	r1, #6
    9e32:	f106 0028 	add.w	r0, r6, #40	; 0x28
    9e36:	f01f f9e4 	bl	29202 <atomic_test_bit>
				if (active_scan || !is_adv_using_rand_addr()) {
    9e3a:	2800      	cmp	r0, #0
    9e3c:	d0c1      	beq.n	9dc2 <bt_le_scan_start+0x7e>
					BT_WARN("Ignoring failure to set "
    9e3e:	4622      	mov	r2, r4
    9e40:	2157      	movs	r1, #87	; 0x57
    9e42:	481a      	ldr	r0, [pc, #104]	; (9eac <bt_le_scan_start+0x168>)
    9e44:	f01d f893 	bl	26f6e <printk>
			*own_addr_type = BT_ADDR_LE_RANDOM;
    9e48:	2301      	movs	r3, #1
    9e4a:	f88d 3005 	strb.w	r3, [sp, #5]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    9e4e:	2107      	movs	r1, #7
    9e50:	f242 000b 	movw	r0, #8203	; 0x200b
    9e54:	f7fe fd1a 	bl	888c <bt_hci_cmd_create>
	if (!buf) {
    9e58:	4604      	mov	r4, r0
    9e5a:	b1e0      	cbz	r0, 9e96 <bt_le_scan_start+0x152>
    9e5c:	2207      	movs	r2, #7
    9e5e:	4669      	mov	r1, sp
    9e60:	3008      	adds	r0, #8
    9e62:	f022 fdbe 	bl	2c9e2 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
    9e66:	4621      	mov	r1, r4
    9e68:	2200      	movs	r2, #0
    9e6a:	f242 000b 	movw	r0, #8203	; 0x200b
    9e6e:	f7fe fe4b 	bl	8b08 <bt_hci_cmd_send_sync>
	if (err) {
    9e72:	4604      	mov	r4, r0
    9e74:	2800      	cmp	r0, #0
    9e76:	d1a4      	bne.n	9dc2 <bt_le_scan_start+0x7e>
	return set_le_scan_enable_legacy(enable);
    9e78:	2001      	movs	r0, #1
    9e7a:	f7fe fea7 	bl	8bcc <set_le_scan_enable_legacy>
	if (err) {
    9e7e:	4604      	mov	r4, r0
    9e80:	2800      	cmp	r0, #0
    9e82:	d19e      	bne.n	9dc2 <bt_le_scan_start+0x7e>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);
    9e84:	462a      	mov	r2, r5
    9e86:	2107      	movs	r1, #7
    9e88:	4806      	ldr	r0, [pc, #24]	; (9ea4 <bt_le_scan_start+0x160>)
    9e8a:	f01f f99a 	bl	291c2 <atomic_set_bit_to>
	scan_dev_found_cb = cb;
    9e8e:	4b08      	ldr	r3, [pc, #32]	; (9eb0 <bt_le_scan_start+0x16c>)
    9e90:	f8c3 8000 	str.w	r8, [r3]
	return 0;
    9e94:	e766      	b.n	9d64 <bt_le_scan_start+0x20>
		return -ENOBUFS;
    9e96:	f06f 0468 	mvn.w	r4, #104	; 0x68
    9e9a:	e792      	b.n	9dc2 <bt_le_scan_start+0x7e>
		return -EAGAIN;
    9e9c:	f06f 040a 	mvn.w	r4, #10
    9ea0:	e760      	b.n	9d64 <bt_le_scan_start+0x20>
    9ea2:	bf00      	nop
    9ea4:	20000254 	.word	0x20000254
    9ea8:	200001c0 	.word	0x200001c0
    9eac:	00030a19 	.word	0x00030a19
    9eb0:	20002b9c 	.word	0x20002b9c

00009eb4 <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
    9eb4:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    9eb6:	f06f 0140 	mvn.w	r1, #64	; 0x40
    9eba:	4807      	ldr	r0, [pc, #28]	; (9ed8 <bt_le_scan_stop+0x24>)
    9ebc:	f01f f972 	bl	291a4 <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    9ec0:	0643      	lsls	r3, r0, #25
    9ec2:	d506      	bpl.n	9ed2 <bt_le_scan_stop+0x1e>
		return -EALREADY;
	}

	scan_dev_found_cb = NULL;
    9ec4:	4b05      	ldr	r3, [pc, #20]	; (9edc <bt_le_scan_stop+0x28>)
    9ec6:	2000      	movs	r0, #0
    9ec8:	6018      	str	r0, [r3, #0]
		pending_id_keys_update();
#endif
	}

	return bt_le_scan_update(false);
}
    9eca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
    9ece:	f7ff b85d 	b.w	8f8c <bt_le_scan_update>
}
    9ed2:	f06f 0077 	mvn.w	r0, #119	; 0x77
    9ed6:	bd08      	pop	{r3, pc}
    9ed8:	20000254 	.word	0x20000254
    9edc:	20002b9c 	.word	0x20002b9c

00009ee0 <bt_pub_key_gen>:
}
#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_ECC)
int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
    9ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
    9ee2:	4e1b      	ldr	r6, [pc, #108]	; (9f50 <bt_pub_key_gen+0x70>)
    9ee4:	f896 3066 	ldrb.w	r3, [r6, #102]	; 0x66
    9ee8:	f003 0306 	and.w	r3, r3, #6
    9eec:	2b06      	cmp	r3, #6
    9eee:	d007      	beq.n	9f00 <bt_pub_key_gen+0x20>
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
    9ef0:	2157      	movs	r1, #87	; 0x57
    9ef2:	4818      	ldr	r0, [pc, #96]	; (9f54 <bt_pub_key_gen+0x74>)
    9ef4:	f01d f83b 	bl	26f6e <printk>
		return -ENOTSUP;
    9ef8:	f06f 0485 	mvn.w	r4, #133	; 0x85
		pub_key_cb = NULL;
		return err;
	}

	return 0;
}
    9efc:	4620      	mov	r0, r4
    9efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	new_cb->_next = pub_key_cb;
    9f00:	4f15      	ldr	r7, [pc, #84]	; (9f58 <bt_pub_key_gen+0x78>)
    9f02:	683b      	ldr	r3, [r7, #0]
    9f04:	6043      	str	r3, [r0, #4]
	pub_key_cb = new_cb;
    9f06:	6038      	str	r0, [r7, #0]
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    9f08:	2104      	movs	r1, #4
    9f0a:	f106 0094 	add.w	r0, r6, #148	; 0x94
    9f0e:	f01f f93e 	bl	2918e <atomic_test_and_set_bit>
    9f12:	4605      	mov	r5, r0
    9f14:	b9d0      	cbnz	r0, 9f4c <bt_pub_key_gen+0x6c>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    9f16:	f06f 0108 	mvn.w	r1, #8
    9f1a:	f106 0094 	add.w	r0, r6, #148	; 0x94
    9f1e:	f01f f941 	bl	291a4 <atomic_and>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
    9f22:	462a      	mov	r2, r5
    9f24:	4629      	mov	r1, r5
    9f26:	f242 0025 	movw	r0, #8229	; 0x2025
    9f2a:	f7fe fded 	bl	8b08 <bt_hci_cmd_send_sync>
	if (err) {
    9f2e:	4604      	mov	r4, r0
    9f30:	2800      	cmp	r0, #0
    9f32:	d0e3      	beq.n	9efc <bt_pub_key_gen+0x1c>
		BT_ERR("Sending LE P256 Public Key command failed");
    9f34:	2145      	movs	r1, #69	; 0x45
    9f36:	4809      	ldr	r0, [pc, #36]	; (9f5c <bt_pub_key_gen+0x7c>)
    9f38:	f01d f819 	bl	26f6e <printk>
    9f3c:	f06f 0110 	mvn.w	r1, #16
    9f40:	f106 0094 	add.w	r0, r6, #148	; 0x94
    9f44:	f01f f92e 	bl	291a4 <atomic_and>
		pub_key_cb = NULL;
    9f48:	603d      	str	r5, [r7, #0]
		return err;
    9f4a:	e7d7      	b.n	9efc <bt_pub_key_gen+0x1c>
		return 0;
    9f4c:	2400      	movs	r4, #0
    9f4e:	e7d5      	b.n	9efc <bt_pub_key_gen+0x1c>
    9f50:	200001c0 	.word	0x200001c0
    9f54:	00030a54 	.word	0x00030a54
    9f58:	20002b8c 	.word	0x20002b8c
    9f5c:	00030a78 	.word	0x00030a78

00009f60 <bt_pub_key_get>:

const uint8_t *bt_pub_key_get(void)
{
    9f60:	b508      	push	{r3, lr}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    9f62:	2103      	movs	r1, #3
    9f64:	4803      	ldr	r0, [pc, #12]	; (9f74 <bt_pub_key_get+0x14>)
    9f66:	f01f f94c 	bl	29202 <atomic_test_bit>
    9f6a:	2800      	cmp	r0, #0
		return pub_key;
	}

	return NULL;
}
    9f6c:	4802      	ldr	r0, [pc, #8]	; (9f78 <bt_pub_key_get+0x18>)
    9f6e:	bf08      	it	eq
    9f70:	2000      	moveq	r0, #0
    9f72:	bd08      	pop	{r3, pc}
    9f74:	20000254 	.word	0x20000254
    9f78:	200047de 	.word	0x200047de

00009f7c <bt_dh_key_gen>:

int bt_dh_key_gen(const uint8_t remote_pk[64], bt_dh_key_cb_t cb)
{
    9f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_cp_le_generate_dhkey *cp;
	struct net_buf *buf;
	int err;

	if (dh_key_cb == cb) {
    9f7e:	4e20      	ldr	r6, [pc, #128]	; (a000 <bt_dh_key_gen+0x84>)
    9f80:	6832      	ldr	r2, [r6, #0]
    9f82:	428a      	cmp	r2, r1
{
    9f84:	4604      	mov	r4, r0
    9f86:	460b      	mov	r3, r1
    9f88:	4637      	mov	r7, r6
	if (dh_key_cb == cb) {
    9f8a:	d032      	beq.n	9ff2 <bt_dh_key_gen+0x76>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    9f8c:	b112      	cbz	r2, 9f94 <bt_dh_key_gen+0x18>
		return -EBUSY;
    9f8e:	f06f 000f 	mvn.w	r0, #15
		dh_key_cb = NULL;
		return err;
	}

	return 0;
}
    9f92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    9f94:	2104      	movs	r1, #4
    9f96:	481b      	ldr	r0, [pc, #108]	; (a004 <bt_dh_key_gen+0x88>)
    9f98:	f01f f933 	bl	29202 <atomic_test_bit>
    9f9c:	2800      	cmp	r0, #0
    9f9e:	d1f6      	bne.n	9f8e <bt_dh_key_gen+0x12>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    9fa0:	2103      	movs	r1, #3
    9fa2:	4818      	ldr	r0, [pc, #96]	; (a004 <bt_dh_key_gen+0x88>)
    9fa4:	f01f f92d 	bl	29202 <atomic_test_bit>
    9fa8:	b330      	cbz	r0, 9ff8 <bt_dh_key_gen+0x7c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    9faa:	2140      	movs	r1, #64	; 0x40
    9fac:	f242 0026 	movw	r0, #8230	; 0x2026
	dh_key_cb = cb;
    9fb0:	6033      	str	r3, [r6, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    9fb2:	f7fe fc6b 	bl	888c <bt_hci_cmd_create>
	if (!buf) {
    9fb6:	4605      	mov	r5, r0
    9fb8:	b918      	cbnz	r0, 9fc2 <bt_dh_key_gen+0x46>
		dh_key_cb = NULL;
    9fba:	6030      	str	r0, [r6, #0]
		return -ENOBUFS;
    9fbc:	f06f 0068 	mvn.w	r0, #104	; 0x68
    9fc0:	e7e7      	b.n	9f92 <bt_dh_key_gen+0x16>
	return net_buf_simple_add(&buf->b, len);
    9fc2:	2140      	movs	r1, #64	; 0x40
    9fc4:	3008      	adds	r0, #8
    9fc6:	f015 f915 	bl	1f1f4 <net_buf_simple_add>
    9fca:	4623      	mov	r3, r4
    9fcc:	f104 0240 	add.w	r2, r4, #64	; 0x40
    9fd0:	f853 1b04 	ldr.w	r1, [r3], #4
    9fd4:	f840 1b04 	str.w	r1, [r0], #4
    9fd8:	4293      	cmp	r3, r2
    9fda:	d1f9      	bne.n	9fd0 <bt_dh_key_gen+0x54>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
    9fdc:	2200      	movs	r2, #0
    9fde:	4629      	mov	r1, r5
    9fe0:	f242 0026 	movw	r0, #8230	; 0x2026
    9fe4:	f7fe fd90 	bl	8b08 <bt_hci_cmd_send_sync>
	if (err) {
    9fe8:	2800      	cmp	r0, #0
    9fea:	d0d2      	beq.n	9f92 <bt_dh_key_gen+0x16>
		dh_key_cb = NULL;
    9fec:	2300      	movs	r3, #0
    9fee:	603b      	str	r3, [r7, #0]
		return err;
    9ff0:	e7cf      	b.n	9f92 <bt_dh_key_gen+0x16>
		return -EALREADY;
    9ff2:	f06f 0077 	mvn.w	r0, #119	; 0x77
    9ff6:	e7cc      	b.n	9f92 <bt_dh_key_gen+0x16>
		return -EADDRNOTAVAIL;
    9ff8:	f06f 007c 	mvn.w	r0, #124	; 0x7c
    9ffc:	e7c9      	b.n	9f92 <bt_dh_key_gen+0x16>
    9ffe:	bf00      	nop
    a000:	20002b88 	.word	0x20002b88
    a004:	20000254 	.word	0x20000254

0000a008 <tx_free>:
	return bt_l2cap_update_conn_param(conn, param);
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    a008:	2300      	movs	r3, #0
{
    a00a:	4601      	mov	r1, r0
	tx->user_data = NULL;
    a00c:	e9c0 3301 	strd	r3, r3, [r0, #4]
	tx->pending_no_cb = 0U;
    a010:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
    a012:	4801      	ldr	r0, [pc, #4]	; (a018 <tx_free+0x10>)
    a014:	f023 b928 	b.w	2d268 <k_queue_append>
    a018:	20001348 	.word	0x20001348

0000a01c <notify_connected>:
{
    a01c:	b538      	push	{r3, r4, r5, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    a01e:	4b09      	ldr	r3, [pc, #36]	; (a044 <notify_connected+0x28>)
    a020:	681c      	ldr	r4, [r3, #0]
{
    a022:	4605      	mov	r5, r0
    a024:	7a69      	ldrb	r1, [r5, #9]
	for (cb = callback_list; cb; cb = cb->_next) {
    a026:	b92c      	cbnz	r4, a034 <notify_connected+0x18>
	if (!conn->err) {
    a028:	b951      	cbnz	r1, a040 <notify_connected+0x24>
		bt_gatt_connected(conn);
    a02a:	4628      	mov	r0, r5
}
    a02c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_connected(conn);
    a030:	f003 b99e 	b.w	d370 <bt_gatt_connected>
		if (cb->connected) {
    a034:	6823      	ldr	r3, [r4, #0]
    a036:	b10b      	cbz	r3, a03c <notify_connected+0x20>
			cb->connected(conn, conn->err);
    a038:	4628      	mov	r0, r5
    a03a:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    a03c:	6924      	ldr	r4, [r4, #16]
    a03e:	e7f1      	b.n	a024 <notify_connected+0x8>
}
    a040:	bd38      	pop	{r3, r4, r5, pc}
    a042:	bf00      	nop
    a044:	20002ba0 	.word	0x20002ba0

0000a048 <send_frag>:
	return bt_send(buf);
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, uint8_t flags,
		      bool always_consume)
{
    a048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a04c:	4604      	mov	r4, r0
    a04e:	460e      	mov	r6, r1
    a050:	4617      	mov	r7, r2
    a052:	4699      	mov	r9, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
    a054:	694d      	ldr	r5, [r1, #20]
	return z_impl_k_sem_take(sem, timeout);
    a056:	f04f 33ff 	mov.w	r3, #4294967295
    a05a:	f04f 32ff 	mov.w	r2, #4294967295
    a05e:	484b      	ldr	r0, [pc, #300]	; (a18c <send_frag+0x144>)
    a060:	f019 fc68 	bl	23934 <z_impl_k_sem_take>

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
    a064:	7aa3      	ldrb	r3, [r4, #10]
    a066:	2b07      	cmp	r3, #7
    a068:	d14d      	bne.n	a106 <send_frag+0xbe>
	__asm__ volatile(
    a06a:	f04f 0320 	mov.w	r3, #32
    a06e:	f3ef 8211 	mrs	r2, BASEPRI
    a072:	f383 8811 	msr	BASEPRI, r3
    a076:	f3bf 8f6f 	isb	sy
		goto fail;
	}

	/* Add to pending, it must be done before bt_buf_set_type */
	key = irq_lock();
	if (tx) {
    a07a:	2d00      	cmp	r5, #0
    a07c:	d058      	beq.n	a130 <send_frag+0xe8>
	parent->next = child;
    a07e:	2300      	movs	r3, #0
    a080:	602b      	str	r3, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
    a082:	69a3      	ldr	r3, [r4, #24]
    a084:	2b00      	cmp	r3, #0
    a086:	d150      	bne.n	a12a <send_frag+0xe2>
	list->head = node;
    a088:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
    a08c:	f382 8811 	msr	BASEPRI, r2
    a090:	f3bf 8f6f 	isb	sy
	switch (flags) {
    a094:	2f01      	cmp	r7, #1
    a096:	d002      	beq.n	a09e <send_frag+0x56>
		flags = BT_ACL_START_NO_FLUSH;
    a098:	1efb      	subs	r3, r7, #3
    a09a:	425f      	negs	r7, r3
    a09c:	415f      	adcs	r7, r3
	return net_buf_simple_push(&buf->b, len);
    a09e:	2104      	movs	r1, #4
    a0a0:	f106 0008 	add.w	r0, r6, #8
    a0a4:	f015 f84e 	bl	1f144 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    a0a8:	8823      	ldrh	r3, [r4, #0]
    a0aa:	ea43 3707 	orr.w	r7, r3, r7, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    a0ae:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    a0b0:	8007      	strh	r7, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    a0b2:	3b04      	subs	r3, #4
    a0b4:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    a0b6:	2302      	movs	r3, #2
    a0b8:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
    a0ba:	4630      	mov	r0, r6
    a0bc:	f01f f8f7 	bl	292ae <bt_send>
		err = send_iso(conn, buf, flags);
	} else {
		err = send_acl(conn, buf, flags);
	}

	if (err) {
    a0c0:	4602      	mov	r2, r0
    a0c2:	2800      	cmp	r0, #0
    a0c4:	d05e      	beq.n	a184 <send_frag+0x13c>
		BT_ERR("Unable to send to driver (err %d)", err);
    a0c6:	2145      	movs	r1, #69	; 0x45
    a0c8:	4831      	ldr	r0, [pc, #196]	; (a190 <send_frag+0x148>)
    a0ca:	f01c ff50 	bl	26f6e <printk>
	__asm__ volatile(
    a0ce:	f04f 0320 	mov.w	r3, #32
    a0d2:	f3ef 8711 	mrs	r7, BASEPRI
    a0d6:	f383 8811 	msr	BASEPRI, r3
    a0da:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		/* Roll back the pending TX info */
		if (tx) {
    a0de:	2d00      	cmp	r5, #0
    a0e0:	d03c      	beq.n	a15c <send_frag+0x114>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    a0e2:	6963      	ldr	r3, [r4, #20]
    a0e4:	2200      	movs	r2, #0
    a0e6:	b153      	cbz	r3, a0fe <send_frag+0xb6>
    a0e8:	429d      	cmp	r5, r3
    a0ea:	d134      	bne.n	a156 <send_frag+0x10e>
Z_GENLIST_REMOVE(slist, snode)
    a0ec:	682b      	ldr	r3, [r5, #0]
    a0ee:	bb62      	cbnz	r2, a14a <send_frag+0x102>
    a0f0:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
    a0f2:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
    a0f4:	4295      	cmp	r5, r2
    a0f6:	d100      	bne.n	a0fa <send_frag+0xb2>
	list->tail = node;
    a0f8:	61a3      	str	r3, [r4, #24]
	parent->next = child;
    a0fa:	2300      	movs	r3, #0
    a0fc:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
    a0fe:	f387 8811 	msr	BASEPRI, r7
    a102:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    a106:	4821      	ldr	r0, [pc, #132]	; (a18c <send_frag+0x144>)
    a108:	f019 fbd8 	bl	238bc <z_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (tx) {
    a10c:	b115      	cbz	r5, a114 <send_frag+0xcc>
		tx_free(tx);
    a10e:	4628      	mov	r0, r5
    a110:	f7ff ff7a 	bl	a008 <tx_free>
	}

	if (always_consume) {
    a114:	f1b9 0f00 	cmp.w	r9, #0
    a118:	d004      	beq.n	a124 <send_frag+0xdc>
		net_buf_unref(buf);
    a11a:	4630      	mov	r0, r6
    a11c:	f014 ff1a 	bl	1ef54 <net_buf_unref>
	}
	return false;
    a120:	f04f 0900 	mov.w	r9, #0
}
    a124:	4648      	mov	r0, r9
    a126:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a12a:	601d      	str	r5, [r3, #0]
	list->tail = node;
    a12c:	61a5      	str	r5, [r4, #24]
    a12e:	e7ad      	b.n	a08c <send_frag+0x44>
		tail_tx = (void *)sys_slist_peek_tail(&conn->tx_pending);
    a130:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
    a132:	b133      	cbz	r3, a142 <send_frag+0xfa>
			pending_no_cb = &tail_tx->pending_no_cb;
    a134:	f103 080c 	add.w	r8, r3, #12
    a138:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
    a13a:	3301      	adds	r3, #1
    a13c:	f8c8 3000 	str.w	r3, [r8]
    a140:	e7a4      	b.n	a08c <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
    a142:	f104 081c 	add.w	r8, r4, #28
    a146:	69e3      	ldr	r3, [r4, #28]
    a148:	e7f7      	b.n	a13a <send_frag+0xf2>
	parent->next = child;
    a14a:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    a14c:	69a3      	ldr	r3, [r4, #24]
    a14e:	429d      	cmp	r5, r3
	list->tail = node;
    a150:	bf08      	it	eq
    a152:	61a2      	streq	r2, [r4, #24]
    a154:	e7d1      	b.n	a0fa <send_frag+0xb2>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    a156:	461a      	mov	r2, r3
    a158:	681b      	ldr	r3, [r3, #0]
    a15a:	e7c4      	b.n	a0e6 <send_frag+0x9e>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
    a15c:	f8d8 3000 	ldr.w	r3, [r8]
    a160:	b953      	cbnz	r3, a178 <send_frag+0x130>
    a162:	490c      	ldr	r1, [pc, #48]	; (a194 <send_frag+0x14c>)
    a164:	480c      	ldr	r0, [pc, #48]	; (a198 <send_frag+0x150>)
    a166:	f240 4292 	movw	r2, #1170	; 0x492
    a16a:	f01c ff00 	bl	26f6e <printk>
    a16e:	f240 4192 	movw	r1, #1170	; 0x492
    a172:	4808      	ldr	r0, [pc, #32]	; (a194 <send_frag+0x14c>)
    a174:	f01d f974 	bl	27460 <assert_post_action>
			(*pending_no_cb)--;
    a178:	f8d8 3000 	ldr.w	r3, [r8]
    a17c:	3b01      	subs	r3, #1
    a17e:	f8c8 3000 	str.w	r3, [r8]
    a182:	e7bc      	b.n	a0fe <send_frag+0xb6>
	return true;
    a184:	f04f 0901 	mov.w	r9, #1
    a188:	e7cc      	b.n	a124 <send_frag+0xdc>
    a18a:	bf00      	nop
    a18c:	20000288 	.word	0x20000288
    a190:	00030e05 	.word	0x00030e05
    a194:	000310fa 	.word	0x000310fa
    a198:	0002fa94 	.word	0x0002fa94

0000a19c <bt_conn_get_pkts>:
}
    a19c:	4800      	ldr	r0, [pc, #0]	; (a1a0 <bt_conn_get_pkts+0x4>)
    a19e:	4770      	bx	lr
    a1a0:	20000288 	.word	0x20000288

0000a1a4 <notify_le_param_updated>:
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    a1a4:	1d03      	adds	r3, r0, #4
{
    a1a6:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    a1a8:	2109      	movs	r1, #9
{
    a1aa:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    a1ac:	4618      	mov	r0, r3
    a1ae:	f01f f959 	bl	29464 <atomic_test_bit>
    a1b2:	b1c8      	cbz	r0, a1e8 <notify_le_param_updated+0x44>
	    conn->le.interval >= conn->le.interval_min &&
    a1b4:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    a1b8:	f8b4 10a0 	ldrh.w	r1, [r4, #160]	; 0xa0
    a1bc:	4291      	cmp	r1, r2
    a1be:	d813      	bhi.n	a1e8 <notify_le_param_updated+0x44>
	    conn->le.interval >= conn->le.interval_min &&
    a1c0:	f8b4 10a2 	ldrh.w	r1, [r4, #162]	; 0xa2
    a1c4:	4291      	cmp	r1, r2
    a1c6:	d30f      	bcc.n	a1e8 <notify_le_param_updated+0x44>
	    conn->le.latency == conn->le.pending_latency &&
    a1c8:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
    a1cc:	4291      	cmp	r1, r2
    a1ce:	d10b      	bne.n	a1e8 <notify_le_param_updated+0x44>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a1d0:	f3bf 8f5b 	dmb	ish
    a1d4:	e853 2f00 	ldrex	r2, [r3]
    a1d8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    a1dc:	e843 2100 	strex	r1, r2, [r3]
    a1e0:	2900      	cmp	r1, #0
    a1e2:	d1f7      	bne.n	a1d4 <notify_le_param_updated+0x30>
    a1e4:	f3bf 8f5b 	dmb	ish
	for (cb = callback_list; cb; cb = cb->_next) {
    a1e8:	4b07      	ldr	r3, [pc, #28]	; (a208 <notify_le_param_updated+0x64>)
    a1ea:	681d      	ldr	r5, [r3, #0]
    a1ec:	b905      	cbnz	r5, a1f0 <notify_le_param_updated+0x4c>
}
    a1ee:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
    a1f0:	68ee      	ldr	r6, [r5, #12]
    a1f2:	b13e      	cbz	r6, a204 <notify_le_param_updated+0x60>
			cb->le_param_updated(conn, conn->le.interval,
    a1f4:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    a1f8:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    a1fc:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    a200:	4620      	mov	r0, r4
    a202:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    a204:	692d      	ldr	r5, [r5, #16]
    a206:	e7f1      	b.n	a1ec <notify_le_param_updated+0x48>
    a208:	20002ba0 	.word	0x20002ba0

0000a20c <le_param_req>:
{
    a20c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a20e:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
    a210:	4608      	mov	r0, r1
{
    a212:	460e      	mov	r6, r1
	if (!bt_le_conn_params_valid(param)) {
    a214:	f01f f82b 	bl	2926e <bt_le_conn_params_valid>
    a218:	4605      	mov	r5, r0
    a21a:	b910      	cbnz	r0, a222 <le_param_req+0x16>
		return false;
    a21c:	2500      	movs	r5, #0
}
    a21e:	4628      	mov	r0, r5
    a220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    a222:	4b09      	ldr	r3, [pc, #36]	; (a248 <le_param_req+0x3c>)
    a224:	681c      	ldr	r4, [r3, #0]
    a226:	2c00      	cmp	r4, #0
    a228:	d0f9      	beq.n	a21e <le_param_req+0x12>
		if (!cb->le_param_req) {
    a22a:	68a3      	ldr	r3, [r4, #8]
    a22c:	b90b      	cbnz	r3, a232 <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
    a22e:	6924      	ldr	r4, [r4, #16]
    a230:	e7f9      	b.n	a226 <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
    a232:	4631      	mov	r1, r6
    a234:	4638      	mov	r0, r7
    a236:	4798      	blx	r3
    a238:	2800      	cmp	r0, #0
    a23a:	d0ef      	beq.n	a21c <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
    a23c:	4630      	mov	r0, r6
    a23e:	f01f f816 	bl	2926e <bt_le_conn_params_valid>
    a242:	2800      	cmp	r0, #0
    a244:	d1f3      	bne.n	a22e <le_param_req+0x22>
    a246:	e7e9      	b.n	a21c <le_param_req+0x10>
    a248:	20002ba0 	.word	0x20002ba0

0000a24c <bt_conn_cb_register>:
	cb->_next = callback_list;
    a24c:	4b02      	ldr	r3, [pc, #8]	; (a258 <bt_conn_cb_register+0xc>)
    a24e:	681a      	ldr	r2, [r3, #0]
    a250:	6102      	str	r2, [r0, #16]
	callback_list = cb;
    a252:	6018      	str	r0, [r3, #0]
}
    a254:	4770      	bx	lr
    a256:	bf00      	nop
    a258:	20002ba0 	.word	0x20002ba0

0000a25c <conn_cleanup>:

static struct k_poll_signal conn_change =
		K_POLL_SIGNAL_INITIALIZER(conn_change);

static void conn_cleanup(struct bt_conn *conn)
{
    a25c:	b570      	push	{r4, r5, r6, lr}
    a25e:	4604      	mov	r4, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    a260:	f100 0634 	add.w	r6, r0, #52	; 0x34
    a264:	2200      	movs	r2, #0
    a266:	2300      	movs	r3, #0
    a268:	4630      	mov	r0, r6
    a26a:	f014 fd59 	bl	1ed20 <net_buf_get>
    a26e:	4605      	mov	r5, r0
    a270:	bb28      	cbnz	r0, a2be <conn_cleanup+0x62>
		}

		net_buf_unref(buf);
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
    a272:	6963      	ldr	r3, [r4, #20]
    a274:	b153      	cbz	r3, a28c <conn_cleanup+0x30>
    a276:	4916      	ldr	r1, [pc, #88]	; (a2d0 <conn_cleanup+0x74>)
    a278:	4816      	ldr	r0, [pc, #88]	; (a2d4 <conn_cleanup+0x78>)
    a27a:	f240 520c 	movw	r2, #1292	; 0x50c
    a27e:	f01c fe76 	bl	26f6e <printk>
    a282:	f240 510c 	movw	r1, #1292	; 0x50c
    a286:	4812      	ldr	r0, [pc, #72]	; (a2d0 <conn_cleanup+0x74>)
    a288:	f01d f8ea 	bl	27460 <assert_post_action>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
    a28c:	69e3      	ldr	r3, [r4, #28]
    a28e:	b153      	cbz	r3, a2a6 <conn_cleanup+0x4a>
    a290:	490f      	ldr	r1, [pc, #60]	; (a2d0 <conn_cleanup+0x74>)
    a292:	4810      	ldr	r0, [pc, #64]	; (a2d4 <conn_cleanup+0x78>)
    a294:	f240 520d 	movw	r2, #1293	; 0x50d
    a298:	f01c fe69 	bl	26f6e <printk>
    a29c:	f240 510d 	movw	r1, #1293	; 0x50d
    a2a0:	480b      	ldr	r0, [pc, #44]	; (a2d0 <conn_cleanup+0x74>)
    a2a2:	f01d f8dd 	bl	27460 <assert_post_action>

	bt_conn_reset_rx_state(conn);
    a2a6:	4620      	mov	r0, r4
    a2a8:	f01f f8e7 	bl	2947a <bt_conn_reset_rx_state>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    a2ac:	f104 0158 	add.w	r1, r4, #88	; 0x58
    a2b0:	2200      	movs	r2, #0
    a2b2:	2300      	movs	r3, #0
    a2b4:	4808      	ldr	r0, [pc, #32]	; (a2d8 <conn_cleanup+0x7c>)

	k_delayed_work_submit(&conn->deferred_work, K_NO_WAIT);
}
    a2b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a2ba:	f019 bd6d 	b.w	23d98 <k_delayed_work_submit_to_queue>
		if (tx_data(buf)->tx) {
    a2be:	6968      	ldr	r0, [r5, #20]
    a2c0:	b108      	cbz	r0, a2c6 <conn_cleanup+0x6a>
			tx_free(tx_data(buf)->tx);
    a2c2:	f7ff fea1 	bl	a008 <tx_free>
		net_buf_unref(buf);
    a2c6:	4628      	mov	r0, r5
    a2c8:	f014 fe44 	bl	1ef54 <net_buf_unref>
    a2cc:	e7ca      	b.n	a264 <conn_cleanup+0x8>
    a2ce:	bf00      	nop
    a2d0:	000310fa 	.word	0x000310fa
    a2d4:	0002fa94 	.word	0x0002fa94
    a2d8:	20002490 	.word	0x20002490

0000a2dc <bt_conn_recv>:
{
    a2dc:	b570      	push	{r4, r5, r6, lr}
    a2de:	4616      	mov	r6, r2
    a2e0:	4604      	mov	r4, r0
    a2e2:	460d      	mov	r5, r1
	tx_notify(conn);
    a2e4:	f01f f87d 	bl	293e2 <tx_notify>
	switch (flags) {
    a2e8:	2e01      	cmp	r6, #1
    a2ea:	d022      	beq.n	a332 <bt_conn_recv+0x56>
    a2ec:	2e02      	cmp	r6, #2
    a2ee:	d143      	bne.n	a378 <bt_conn_recv+0x9c>
		if (conn->rx) {
    a2f0:	6923      	ldr	r3, [r4, #16]
    a2f2:	b133      	cbz	r3, a302 <bt_conn_recv+0x26>
			BT_ERR("Unexpected first L2CAP frame");
    a2f4:	4827      	ldr	r0, [pc, #156]	; (a394 <bt_conn_recv+0xb8>)
    a2f6:	2145      	movs	r1, #69	; 0x45
    a2f8:	f01c fe39 	bl	26f6e <printk>
			bt_conn_reset_rx_state(conn);
    a2fc:	4620      	mov	r0, r4
    a2fe:	f01f f8bc 	bl	2947a <bt_conn_reset_rx_state>
		conn->rx = buf;
    a302:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
    a304:	6921      	ldr	r1, [r4, #16]
    a306:	898a      	ldrh	r2, [r1, #12]
    a308:	2a01      	cmp	r2, #1
    a30a:	d942      	bls.n	a392 <bt_conn_recv+0xb6>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
    a30c:	6888      	ldr	r0, [r1, #8]
	return ((uint16_t)src[1] << 8) | src[0];
    a30e:	7845      	ldrb	r5, [r0, #1]
    a310:	7803      	ldrb	r3, [r0, #0]
    a312:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    a316:	3304      	adds	r3, #4
    a318:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
    a31a:	4293      	cmp	r3, r2
    a31c:	d839      	bhi.n	a392 <bt_conn_recv+0xb6>
	if (conn->rx->len > acl_total_len) {
    a31e:	d231      	bcs.n	a384 <bt_conn_recv+0xa8>
		BT_ERR("ACL len mismatch (%u > %u)",
    a320:	481d      	ldr	r0, [pc, #116]	; (a398 <bt_conn_recv+0xbc>)
    a322:	2145      	movs	r1, #69	; 0x45
    a324:	f01c fe23 	bl	26f6e <printk>
		bt_conn_reset_rx_state(conn);
    a328:	4620      	mov	r0, r4
}
    a32a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
    a32e:	f01f b8a4 	b.w	2947a <bt_conn_reset_rx_state>
		if (!conn->rx) {
    a332:	6920      	ldr	r0, [r4, #16]
    a334:	b938      	cbnz	r0, a346 <bt_conn_recv+0x6a>
			BT_ERR("Unexpected L2CAP continuation");
    a336:	4819      	ldr	r0, [pc, #100]	; (a39c <bt_conn_recv+0xc0>)
    a338:	2145      	movs	r1, #69	; 0x45
			BT_ERR("Not enough buffer space for L2CAP data");
    a33a:	f01c fe18 	bl	26f6e <printk>
			bt_conn_reset_rx_state(conn);
    a33e:	4620      	mov	r0, r4
    a340:	f01f f89b 	bl	2947a <bt_conn_reset_rx_state>
    a344:	e001      	b.n	a34a <bt_conn_recv+0x6e>
		if (!buf->len) {
    a346:	89ae      	ldrh	r6, [r5, #12]
    a348:	b926      	cbnz	r6, a354 <bt_conn_recv+0x78>
			net_buf_unref(buf);
    a34a:	4628      	mov	r0, r5
}
    a34c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
    a350:	f014 be00 	b.w	1ef54 <net_buf_unref>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
    a354:	3008      	adds	r0, #8
    a356:	f022 fb3c 	bl	2c9d2 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    a35a:	42b0      	cmp	r0, r6
    a35c:	d202      	bcs.n	a364 <bt_conn_recv+0x88>
			BT_ERR("Not enough buffer space for L2CAP data");
    a35e:	2145      	movs	r1, #69	; 0x45
    a360:	480f      	ldr	r0, [pc, #60]	; (a3a0 <bt_conn_recv+0xc4>)
    a362:	e7ea      	b.n	a33a <bt_conn_recv+0x5e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    a364:	6920      	ldr	r0, [r4, #16]
    a366:	89aa      	ldrh	r2, [r5, #12]
    a368:	68a9      	ldr	r1, [r5, #8]
    a36a:	3008      	adds	r0, #8
    a36c:	f022 fb39 	bl	2c9e2 <net_buf_simple_add_mem>
		net_buf_unref(buf);
    a370:	4628      	mov	r0, r5
    a372:	f014 fdef 	bl	1ef54 <net_buf_unref>
		break;
    a376:	e7c5      	b.n	a304 <bt_conn_recv+0x28>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    a378:	4632      	mov	r2, r6
    a37a:	2145      	movs	r1, #69	; 0x45
    a37c:	4809      	ldr	r0, [pc, #36]	; (a3a4 <bt_conn_recv+0xc8>)
    a37e:	f01c fdf6 	bl	26f6e <printk>
		bt_conn_reset_rx_state(conn);
    a382:	e7dc      	b.n	a33e <bt_conn_recv+0x62>
	conn->rx = NULL;
    a384:	2300      	movs	r3, #0
    a386:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf);
    a388:	4620      	mov	r0, r4
}
    a38a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
    a38e:	f000 bd27 	b.w	ade0 <bt_l2cap_recv>
}
    a392:	bd70      	pop	{r4, r5, r6, pc}
    a394:	00030f87 	.word	0x00030f87
    a398:	0003101b 	.word	0x0003101b
    a39c:	00030fa9 	.word	0x00030fa9
    a3a0:	00030fcc 	.word	0x00030fcc
    a3a4:	00030ff8 	.word	0x00030ff8

0000a3a8 <bt_conn_send_cb>:
{
    a3a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a3ac:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
    a3ae:	7a83      	ldrb	r3, [r0, #10]
    a3b0:	2b07      	cmp	r3, #7
{
    a3b2:	4606      	mov	r6, r0
    a3b4:	460d      	mov	r5, r1
    a3b6:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
    a3b8:	d009      	beq.n	a3ce <bt_conn_send_cb+0x26>
		BT_ERR("not connected!");
    a3ba:	4821      	ldr	r0, [pc, #132]	; (a440 <bt_conn_send_cb+0x98>)
    a3bc:	2145      	movs	r1, #69	; 0x45
    a3be:	f01c fdd6 	bl	26f6e <printk>
		net_buf_unref(buf);
    a3c2:	4628      	mov	r0, r5
    a3c4:	f014 fdc6 	bl	1ef54 <net_buf_unref>
			return -ENOTCONN;
    a3c8:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    a3cc:	e01a      	b.n	a404 <bt_conn_send_cb+0x5c>
	if (cb) {
    a3ce:	2a00      	cmp	r2, #0
    a3d0:	d034      	beq.n	a43c <bt_conn_send_cb+0x94>
	return z_impl_k_current_get();
    a3d2:	f019 fa6d 	bl	238b0 <z_impl_k_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
    a3d6:	4b1b      	ldr	r3, [pc, #108]	; (a444 <bt_conn_send_cb+0x9c>)
    a3d8:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
    a3da:	481b      	ldr	r0, [pc, #108]	; (a448 <bt_conn_send_cb+0xa0>)
    a3dc:	bf07      	ittee	eq
    a3de:	2200      	moveq	r2, #0
    a3e0:	2300      	moveq	r3, #0
    a3e2:	f04f 32ff 	movne.w	r2, #4294967295
    a3e6:	f04f 33ff 	movne.w	r3, #4294967295
    a3ea:	f018 f9d9 	bl	227a0 <z_impl_k_queue_get>
    a3ee:	4604      	mov	r4, r0
		if (!tx) {
    a3f0:	b950      	cbnz	r0, a408 <bt_conn_send_cb+0x60>
			BT_ERR("Unable to allocate TX context");
    a3f2:	2145      	movs	r1, #69	; 0x45
    a3f4:	4815      	ldr	r0, [pc, #84]	; (a44c <bt_conn_send_cb+0xa4>)
    a3f6:	f01c fdba 	bl	26f6e <printk>
			net_buf_unref(buf);
    a3fa:	4628      	mov	r0, r5
    a3fc:	f014 fdaa 	bl	1ef54 <net_buf_unref>
			return -ENOBUFS;
    a400:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    a404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
    a408:	7ab3      	ldrb	r3, [r6, #10]
    a40a:	2b07      	cmp	r3, #7
    a40c:	d00a      	beq.n	a424 <bt_conn_send_cb+0x7c>
			BT_WARN("Disconnected while allocating context");
    a40e:	2157      	movs	r1, #87	; 0x57
    a410:	480f      	ldr	r0, [pc, #60]	; (a450 <bt_conn_send_cb+0xa8>)
    a412:	f01c fdac 	bl	26f6e <printk>
			net_buf_unref(buf);
    a416:	4628      	mov	r0, r5
    a418:	f014 fd9c 	bl	1ef54 <net_buf_unref>
			tx_free(tx);
    a41c:	4620      	mov	r0, r4
    a41e:	f7ff fdf3 	bl	a008 <tx_free>
    a422:	e7d1      	b.n	a3c8 <bt_conn_send_cb+0x20>
		tx->pending_no_cb = 0U;
    a424:	2300      	movs	r3, #0
		tx->user_data = user_data;
    a426:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
    a42a:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
    a42c:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
    a42e:	f106 0034 	add.w	r0, r6, #52	; 0x34
    a432:	4629      	mov	r1, r5
    a434:	f014 fd60 	bl	1eef8 <net_buf_put>
	return 0;
    a438:	2000      	movs	r0, #0
    a43a:	e7e3      	b.n	a404 <bt_conn_send_cb+0x5c>
		tx_data(buf)->tx = NULL;
    a43c:	616a      	str	r2, [r5, #20]
    a43e:	e7f6      	b.n	a42e <bt_conn_send_cb+0x86>
    a440:	0003103b 	.word	0x0003103b
    a444:	200024b0 	.word	0x200024b0
    a448:	20001348 	.word	0x20001348
    a44c:	0003104f 	.word	0x0003104f
    a450:	00031072 	.word	0x00031072

0000a454 <bt_conn_prepare_events>:

	return 0;
}

int bt_conn_prepare_events(struct k_poll_event events[])
{
    a454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int i, ev_count = 0;
	struct bt_conn *conn;

	BT_DBG("");

	conn_change.signaled = 0U;
    a458:	4b22      	ldr	r3, [pc, #136]	; (a4e4 <bt_conn_prepare_events+0x90>)
    a45a:	4d23      	ldr	r5, [pc, #140]	; (a4e8 <bt_conn_prepare_events+0x94>)
    a45c:	2400      	movs	r4, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    a45e:	4622      	mov	r2, r4
    a460:	2101      	movs	r1, #1
{
    a462:	4680      	mov	r8, r0
	conn_change.signaled = 0U;
    a464:	609c      	str	r4, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    a466:	f01a fa39 	bl	248dc <k_poll_event_init>
    a46a:	2601      	movs	r6, #1
			  K_POLL_MODE_NOTIFY_ONLY, &conn_change);

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		conn = &acl_conns[i];

		if (!conn_prepare_events(conn, &events[ev_count])) {
    a46c:	f04f 0914 	mov.w	r9, #20
		conn_cleanup(conn);
    a470:	f1a5 0ab8 	sub.w	sl, r5, #184	; 0xb8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    a474:	f3bf 8f5b 	dmb	ish
    a478:	682b      	ldr	r3, [r5, #0]
    a47a:	f3bf 8f5b 	dmb	ish
		if (!conn_prepare_events(conn, &events[ev_count])) {
    a47e:	fb09 8706 	mla	r7, r9, r6, r8
	if (!atomic_get(&conn->ref)) {
    a482:	b1bb      	cbz	r3, a4b4 <bt_conn_prepare_events+0x60>
	if (conn->state == BT_CONN_DISCONNECTED &&
    a484:	f815 3cae 	ldrb.w	r3, [r5, #-174]
    a488:	b9e3      	cbnz	r3, a4c4 <bt_conn_prepare_events+0x70>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a48a:	f3bf 8f5b 	dmb	ish
    a48e:	f1a5 03b4 	sub.w	r3, r5, #180	; 0xb4
    a492:	e853 2f00 	ldrex	r2, [r3]
    a496:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    a49a:	e843 1000 	strex	r0, r1, [r3]
    a49e:	2800      	cmp	r0, #0
    a4a0:	d1f7      	bne.n	a492 <bt_conn_prepare_events+0x3e>
    a4a2:	f3bf 8f5b 	dmb	ish
    a4a6:	0653      	lsls	r3, r2, #25
    a4a8:	d50c      	bpl.n	a4c4 <bt_conn_prepare_events+0x70>
		conn_cleanup(conn);
    a4aa:	20c0      	movs	r0, #192	; 0xc0
    a4ac:	fb00 a004 	mla	r0, r0, r4, sl
    a4b0:	f7ff fed4 	bl	a25c <conn_cleanup>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
    a4b4:	3401      	adds	r4, #1
    a4b6:	2c03      	cmp	r4, #3
    a4b8:	f105 05c0 	add.w	r5, r5, #192	; 0xc0
    a4bc:	d1da      	bne.n	a474 <bt_conn_prepare_events+0x20>
		}
	}
#endif

	return ev_count;
}
    a4be:	4630      	mov	r0, r6
    a4c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (conn->state != BT_CONN_CONNECTED) {
    a4c4:	f815 3cae 	ldrb.w	r3, [r5, #-174]
    a4c8:	2b07      	cmp	r3, #7
    a4ca:	d1f3      	bne.n	a4b4 <bt_conn_prepare_events+0x60>
	k_poll_event_init(&events[0],
    a4cc:	f1a5 0384 	sub.w	r3, r5, #132	; 0x84
    a4d0:	2200      	movs	r2, #0
    a4d2:	2104      	movs	r1, #4
    a4d4:	4638      	mov	r0, r7
    a4d6:	f01a fa01 	bl	248dc <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
    a4da:	2301      	movs	r3, #1
    a4dc:	733b      	strb	r3, [r7, #12]
			ev_count++;
    a4de:	441e      	add	r6, r3
    a4e0:	e7e8      	b.n	a4b4 <bt_conn_prepare_events+0x60>
    a4e2:	bf00      	nop
    a4e4:	20000774 	.word	0x20000774
    a4e8:	20001718 	.word	0x20001718

0000a4ec <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
    a4ec:	b570      	push	{r4, r5, r6, lr}
    a4ee:	4606      	mov	r6, r0
    a4f0:	460d      	mov	r5, r1
    a4f2:	4811      	ldr	r0, [pc, #68]	; (a538 <bt_conn_add_le+0x4c>)
    a4f4:	2103      	movs	r1, #3
    a4f6:	f01e ff4f 	bl	29398 <bt_conn_new.part.10>
	if (!conn) {
    a4fa:	4604      	mov	r4, r0
    a4fc:	b1d0      	cbz	r0, a534 <bt_conn_add_le+0x48>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    a4fe:	2230      	movs	r2, #48	; 0x30
    a500:	2100      	movs	r1, #0
    a502:	3058      	adds	r0, #88	; 0x58
    a504:	f023 f879 	bl	2d5fa <memset>
    a508:	4b0c      	ldr	r3, [pc, #48]	; (a53c <bt_conn_add_le+0x50>)
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    a50a:	4a0d      	ldr	r2, [pc, #52]	; (a540 <bt_conn_add_le+0x54>)
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    a50c:	65e3      	str	r3, [r4, #92]	; 0x5c
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    a50e:	2300      	movs	r3, #0
    a510:	e9c4 230b 	strd	r2, r3, [r4, #44]	; 0x2c
    a514:	62a3      	str	r3, [r4, #40]	; 0x28

	if (!conn) {
		return NULL;
	}

	conn->id = id;
    a516:	7226      	strb	r6, [r4, #8]
    a518:	682a      	ldr	r2, [r5, #0]
    a51a:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
    a51e:	88aa      	ldrh	r2, [r5, #4]
    a520:	f8a4 208c 	strh.w	r2, [r4, #140]	; 0x8c
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
    a524:	2301      	movs	r3, #1
    a526:	79aa      	ldrb	r2, [r5, #6]
    a528:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    a52a:	4b06      	ldr	r3, [pc, #24]	; (a544 <bt_conn_add_le+0x58>)
    a52c:	f884 208e 	strb.w	r2, [r4, #142]	; 0x8e
    a530:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
    a534:	4620      	mov	r0, r4
    a536:	bd70      	pop	{r4, r5, r6, pc}
    a538:	20001660 	.word	0x20001660
    a53c:	0000a901 	.word	0x0000a901
    a540:	00029429 	.word	0x00029429
    a544:	00280018 	.word	0x00280018

0000a548 <bt_conn_unref>:

	return conn;
}

void bt_conn_unref(struct bt_conn *conn)
{
    a548:	b510      	push	{r4, lr}
	atomic_val_t old = atomic_dec(&conn->ref);
    a54a:	f100 03b8 	add.w	r3, r0, #184	; 0xb8
{
    a54e:	4604      	mov	r4, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    a550:	f3bf 8f5b 	dmb	ish
    a554:	e853 2f00 	ldrex	r2, [r3]
    a558:	1e51      	subs	r1, r2, #1
    a55a:	e843 1000 	strex	r0, r1, [r3]
    a55e:	2800      	cmp	r0, #0
    a560:	d1f8      	bne.n	a554 <bt_conn_unref+0xc>
    a562:	f3bf 8f5b 	dmb	ish

	BT_DBG("handle %u ref %u -> %u", conn->handle, old,
	       atomic_get(&conn->ref));

	__ASSERT(old > 0, "Conn reference counter is 0");
    a566:	2a00      	cmp	r2, #0
    a568:	dc0a      	bgt.n	a580 <bt_conn_unref+0x38>
    a56a:	490b      	ldr	r1, [pc, #44]	; (a598 <bt_conn_unref+0x50>)
    a56c:	480b      	ldr	r0, [pc, #44]	; (a59c <bt_conn_unref+0x54>)
    a56e:	f240 7265 	movw	r2, #1893	; 0x765
    a572:	f01c fcfc 	bl	26f6e <printk>
    a576:	f240 7165 	movw	r1, #1893	; 0x765
    a57a:	4807      	ldr	r0, [pc, #28]	; (a598 <bt_conn_unref+0x50>)
    a57c:	f01c ff70 	bl	27460 <assert_post_action>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    a580:	f3bf 8f5b 	dmb	ish
    a584:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
    a588:	f3bf 8f5b 	dmb	ish

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    a58c:	b91b      	cbnz	r3, a596 <bt_conn_unref+0x4e>
	    atomic_get(&conn->ref) == 0) {
		bt_le_adv_resume();
	}
}
    a58e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_le_adv_resume();
    a592:	f7ff baf5 	b.w	9b80 <bt_le_adv_resume>
}
    a596:	bd10      	pop	{r4, pc}
    a598:	000310fa 	.word	0x000310fa
    a59c:	0002fa94 	.word	0x0002fa94

0000a5a0 <bt_conn_lookup_handle>:
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
    a5a0:	4602      	mov	r2, r0
    a5a2:	2103      	movs	r1, #3
    a5a4:	4801      	ldr	r0, [pc, #4]	; (a5ac <bt_conn_lookup_handle+0xc>)
    a5a6:	f01e bf93 	b.w	294d0 <conn_lookup_handle>
    a5aa:	bf00      	nop
    a5ac:	20001660 	.word	0x20001660

0000a5b0 <bt_conn_set_state>:
{
    a5b0:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
    a5b2:	7a85      	ldrb	r5, [r0, #10]
    a5b4:	428d      	cmp	r5, r1
{
    a5b6:	4604      	mov	r4, r0
    a5b8:	460e      	mov	r6, r1
	if (conn->state == state) {
    a5ba:	d10b      	bne.n	a5d4 <bt_conn_set_state+0x24>
	switch (state) {
    a5bc:	2d08      	cmp	r5, #8
    a5be:	bf96      	itet	ls
    a5c0:	4b5e      	ldrls	r3, [pc, #376]	; (a73c <bt_conn_set_state+0x18c>)
	if (conn->state == state) {
    a5c2:	4a5f      	ldrhi	r2, [pc, #380]	; (a740 <bt_conn_set_state+0x190>)
    a5c4:	f853 2025 	ldrls.w	r2, [r3, r5, lsl #2]
		BT_WARN("no transition %s", state2str(state));
    a5c8:	485e      	ldr	r0, [pc, #376]	; (a744 <bt_conn_set_state+0x194>)
    a5ca:	2157      	movs	r1, #87	; 0x57
}
    a5cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("no valid (%u) state was set", state);
    a5d0:	f01c bccd 	b.w	26f6e <printk>
	conn->state = state;
    a5d4:	72a1      	strb	r1, [r4, #10]
	switch (old_state) {
    a5d6:	b90d      	cbnz	r5, a5dc <bt_conn_set_state+0x2c>
		bt_conn_ref(conn);
    a5d8:	f01e ff78 	bl	294cc <bt_conn_ref>
	switch (conn->state) {
    a5dc:	7aa3      	ldrb	r3, [r4, #10]
    a5de:	2b08      	cmp	r3, #8
    a5e0:	f200 80a7 	bhi.w	a732 <bt_conn_set_state+0x182>
    a5e4:	e8df f003 	tbb	[pc, r3]
    a5e8:	a9a9053e 	.word	0xa9a9053e
    a5ec:	1ca9a9a9 	.word	0x1ca9a9a9
    a5f0:	a9          	.byte	0xa9
    a5f1:	00          	.byte	0x00
	z_impl_k_sem_give(sem);
    a5f2:	4d55      	ldr	r5, [pc, #340]	; (a748 <bt_conn_set_state+0x198>)
		tx->pending_no_cb = 0U;
    a5f4:	2600      	movs	r6, #0
	__asm__ volatile(
    a5f6:	f04f 0320 	mov.w	r3, #32
    a5fa:	f3ef 8211 	mrs	r2, BASEPRI
    a5fe:	f383 8811 	msr	BASEPRI, r3
    a602:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
    a606:	69e3      	ldr	r3, [r4, #28]
    a608:	2b00      	cmp	r3, #0
    a60a:	d073      	beq.n	a6f4 <bt_conn_set_state+0x144>
			conn->pending_no_cb--;
    a60c:	3b01      	subs	r3, #1
    a60e:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    a610:	f382 8811 	msr	BASEPRI, r2
    a614:	f3bf 8f6f 	isb	sy
    a618:	4628      	mov	r0, r5
    a61a:	f019 f94f 	bl	238bc <z_impl_k_sem_give>
    a61e:	e7ea      	b.n	a5f6 <bt_conn_set_state+0x46>
		if (conn->type == BT_CONN_TYPE_SCO) {
    a620:	78a3      	ldrb	r3, [r4, #2]
    a622:	2b04      	cmp	r3, #4
    a624:	f000 8089 	beq.w	a73a <bt_conn_set_state+0x18a>
	z_impl_k_queue_init(queue);
    a628:	f104 0034 	add.w	r0, r4, #52	; 0x34
    a62c:	f022 fe0f 	bl	2d24e <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(signal, result);
    a630:	2100      	movs	r1, #0
    a632:	4846      	ldr	r0, [pc, #280]	; (a74c <bt_conn_set_state+0x19c>)
    a634:	f01a fa62 	bl	24afc <z_impl_k_poll_signal_raise>
	list->head = NULL;
    a638:	2300      	movs	r3, #0
	list->tail = NULL;
    a63a:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		bt_l2cap_connected(conn);
    a63e:	4620      	mov	r0, r4
    a640:	f000 fb0e 	bl	ac60 <bt_l2cap_connected>
		notify_connected(conn);
    a644:	4620      	mov	r0, r4
    a646:	f7ff fce9 	bl	a01c <notify_connected>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    a64a:	78e3      	ldrb	r3, [r4, #3]
    a64c:	2b01      	cmp	r3, #1
    a64e:	d174      	bne.n	a73a <bt_conn_set_state+0x18a>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    a650:	f104 0158 	add.w	r1, r4, #88	; 0x58
    a654:	f44f 3220 	mov.w	r2, #163840	; 0x28000
    a658:	2300      	movs	r3, #0
    a65a:	483d      	ldr	r0, [pc, #244]	; (a750 <bt_conn_set_state+0x1a0>)
}
    a65c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a660:	f019 bb9a 	b.w	23d98 <k_delayed_work_submit_to_queue>
		if (conn->type == BT_CONN_TYPE_SCO) {
    a664:	78a3      	ldrb	r3, [r4, #2]
    a666:	2b04      	cmp	r3, #4
    a668:	d104      	bne.n	a674 <bt_conn_set_state+0xc4>
			bt_conn_unref(conn);
    a66a:	4620      	mov	r0, r4
}
    a66c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
    a670:	f7ff bf6a 	b.w	a548 <bt_conn_unref>
		switch (old_state) {
    a674:	2d08      	cmp	r5, #8
    a676:	d860      	bhi.n	a73a <bt_conn_set_state+0x18a>
    a678:	a301      	add	r3, pc, #4	; (adr r3, a680 <bt_conn_set_state+0xd0>)
    a67a:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
    a67e:	bf00      	nop
    a680:	0000a6ed 	.word	0x0000a6ed
    a684:	0000a6a5 	.word	0x0000a6a5
    a688:	0000a6df 	.word	0x0000a6df
    a68c:	0000a66b 	.word	0x0000a66b
    a690:	0000a66b 	.word	0x0000a66b
    a694:	0000a6df 	.word	0x0000a6df
    a698:	0000a6df 	.word	0x0000a6df
    a69c:	0000a6ed 	.word	0x0000a6ed
    a6a0:	0000a6ed 	.word	0x0000a6ed
			tx_notify(conn);
    a6a4:	4620      	mov	r0, r4
    a6a6:	f01e fe9c 	bl	293e2 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
    a6aa:	78a3      	ldrb	r3, [r4, #2]
    a6ac:	2b01      	cmp	r3, #1
    a6ae:	d103      	bne.n	a6b8 <bt_conn_set_state+0x108>
				k_delayed_work_cancel(&conn->deferred_work);
    a6b0:	f104 0058 	add.w	r0, r4, #88	; 0x58
    a6b4:	f019 fbe0 	bl	23e78 <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a6b8:	f3bf 8f5b 	dmb	ish
    a6bc:	3404      	adds	r4, #4
    a6be:	e854 3f00 	ldrex	r3, [r4]
    a6c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a6c6:	e844 3200 	strex	r2, r3, [r4]
    a6ca:	2a00      	cmp	r2, #0
    a6cc:	d1f7      	bne.n	a6be <bt_conn_set_state+0x10e>
    a6ce:	f3bf 8f5b 	dmb	ish
    a6d2:	2100      	movs	r1, #0
    a6d4:	481d      	ldr	r0, [pc, #116]	; (a74c <bt_conn_set_state+0x19c>)
}
    a6d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a6da:	f01a ba0f 	b.w	24afc <z_impl_k_poll_signal_raise>
			if (conn->err) {
    a6de:	7a63      	ldrb	r3, [r4, #9]
    a6e0:	2b00      	cmp	r3, #0
    a6e2:	d0c2      	beq.n	a66a <bt_conn_set_state+0xba>
				notify_connected(conn);
    a6e4:	4620      	mov	r0, r4
    a6e6:	f7ff fc99 	bl	a01c <notify_connected>
    a6ea:	e7be      	b.n	a66a <bt_conn_set_state+0xba>
			BT_WARN("Invalid (%u) old state", state);
    a6ec:	4632      	mov	r2, r6
    a6ee:	2157      	movs	r1, #87	; 0x57
    a6f0:	4818      	ldr	r0, [pc, #96]	; (a754 <bt_conn_set_state+0x1a4>)
    a6f2:	e76b      	b.n	a5cc <bt_conn_set_state+0x1c>
Z_GENLIST_IS_EMPTY(slist)
    a6f4:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
    a6f6:	b128      	cbz	r0, a704 <bt_conn_set_state+0x154>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    a6f8:	69a1      	ldr	r1, [r4, #24]
    a6fa:	6803      	ldr	r3, [r0, #0]
	list->head = node;
    a6fc:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    a6fe:	4288      	cmp	r0, r1
	list->tail = node;
    a700:	bf08      	it	eq
    a702:	61a3      	streq	r3, [r4, #24]
    a704:	f382 8811 	msr	BASEPRI, r2
    a708:	f3bf 8f6f 	isb	sy
		if (!node) {
    a70c:	b1a8      	cbz	r0, a73a <bt_conn_set_state+0x18a>
	__asm__ volatile(
    a70e:	f04f 0220 	mov.w	r2, #32
    a712:	f3ef 8311 	mrs	r3, BASEPRI
    a716:	f382 8811 	msr	BASEPRI, r2
    a71a:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
    a71e:	68c2      	ldr	r2, [r0, #12]
    a720:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
    a722:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
    a724:	f383 8811 	msr	BASEPRI, r3
    a728:	f3bf 8f6f 	isb	sy
		tx_free(tx);
    a72c:	f7ff fc6c 	bl	a008 <tx_free>
    a730:	e772      	b.n	a618 <bt_conn_set_state+0x68>
		BT_WARN("no valid (%u) state was set", state);
    a732:	4632      	mov	r2, r6
    a734:	2157      	movs	r1, #87	; 0x57
    a736:	4808      	ldr	r0, [pc, #32]	; (a758 <bt_conn_set_state+0x1a8>)
    a738:	e748      	b.n	a5cc <bt_conn_set_state+0x1c>
}
    a73a:	bd70      	pop	{r4, r5, r6, pc}
    a73c:	0002ec94 	.word	0x0002ec94
    a740:	0003109d 	.word	0x0003109d
    a744:	000310a7 	.word	0x000310a7
    a748:	20000288 	.word	0x20000288
    a74c:	20000774 	.word	0x20000774
    a750:	20002490 	.word	0x20002490
    a754:	000310bd 	.word	0x000310bd
    a758:	000310d9 	.word	0x000310d9

0000a75c <bt_conn_lookup_addr_le.part.13>:
struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
    a75c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a760:	4e0f      	ldr	r6, [pc, #60]	; (a7a0 <bt_conn_lookup_addr_le.part.13+0x44>)
    a762:	4607      	mov	r7, r0
    a764:	4688      	mov	r8, r1
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
    a766:	2500      	movs	r5, #0
struct bt_conn *bt_conn_ref(struct bt_conn *conn)
    a768:	4630      	mov	r0, r6
    a76a:	f01e fe60 	bl	2942e <bt_conn_ref.part.12>
		if (!conn) {
    a76e:	4604      	mov	r4, r0
    a770:	b120      	cbz	r0, a77c <bt_conn_lookup_addr_le.part.13+0x20>
		if (conn->type != BT_CONN_TYPE_LE) {
    a772:	7883      	ldrb	r3, [r0, #2]
    a774:	2b01      	cmp	r3, #1
    a776:	d00a      	beq.n	a78e <bt_conn_lookup_addr_le.part.13+0x32>
			bt_conn_unref(conn);
    a778:	f7ff fee6 	bl	a548 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
    a77c:	3501      	adds	r5, #1
    a77e:	2d03      	cmp	r5, #3
    a780:	f106 06c0 	add.w	r6, r6, #192	; 0xc0
    a784:	d1f0      	bne.n	a768 <bt_conn_lookup_addr_le.part.13+0xc>
	return NULL;
    a786:	2400      	movs	r4, #0
}
    a788:	4620      	mov	r0, r4
    a78a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
    a78e:	4642      	mov	r2, r8
    a790:	4639      	mov	r1, r7
    a792:	f01e fe7b 	bl	2948c <bt_conn_is_peer_addr_le>
    a796:	2800      	cmp	r0, #0
    a798:	d1f6      	bne.n	a788 <bt_conn_lookup_addr_le.part.13+0x2c>
			bt_conn_unref(conn);
    a79a:	4620      	mov	r0, r4
    a79c:	e7ec      	b.n	a778 <bt_conn_lookup_addr_le.part.13+0x1c>
    a79e:	bf00      	nop
    a7a0:	20001660 	.word	0x20001660

0000a7a4 <bt_conn_exists_le>:
{
    a7a4:	b510      	push	{r4, lr}
    a7a6:	f7ff ffd9 	bl	a75c <bt_conn_lookup_addr_le.part.13>
	if (conn) {
    a7aa:	4604      	mov	r4, r0
    a7ac:	b170      	cbz	r0, a7cc <bt_conn_exists_le+0x28>
		BT_WARN("Found valid connection in %s state",
    a7ae:	7a83      	ldrb	r3, [r0, #10]
    a7b0:	4807      	ldr	r0, [pc, #28]	; (a7d0 <bt_conn_exists_le+0x2c>)
    a7b2:	2b08      	cmp	r3, #8
    a7b4:	bf96      	itet	ls
    a7b6:	4a07      	ldrls	r2, [pc, #28]	; (a7d4 <bt_conn_exists_le+0x30>)
    a7b8:	4a07      	ldrhi	r2, [pc, #28]	; (a7d8 <bt_conn_exists_le+0x34>)
    a7ba:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
    a7be:	2157      	movs	r1, #87	; 0x57
    a7c0:	f01c fbd5 	bl	26f6e <printk>
		bt_conn_unref(conn);
    a7c4:	4620      	mov	r0, r4
    a7c6:	f7ff febf 	bl	a548 <bt_conn_unref>
		return true;
    a7ca:	2001      	movs	r0, #1
}
    a7cc:	bd10      	pop	{r4, pc}
    a7ce:	bf00      	nop
    a7d0:	00030f5f 	.word	0x00030f5f
    a7d4:	0002ec94 	.word	0x0002ec94
    a7d8:	0003109d 	.word	0x0003109d

0000a7dc <bt_conn_lookup_state_le>:
{
    a7dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a7e0:	f8df a054 	ldr.w	sl, [pc, #84]	; a838 <bt_conn_lookup_state_le+0x5c>
    a7e4:	4606      	mov	r6, r0
    a7e6:	460f      	mov	r7, r1
    a7e8:	4690      	mov	r8, r2
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
    a7ea:	2500      	movs	r5, #0
    a7ec:	f04f 09c0 	mov.w	r9, #192	; 0xc0
struct bt_conn *bt_conn_ref(struct bt_conn *conn)
    a7f0:	fb09 a005 	mla	r0, r9, r5, sl
    a7f4:	f01e fe1b 	bl	2942e <bt_conn_ref.part.12>
		if (!conn) {
    a7f8:	4604      	mov	r4, r0
    a7fa:	b120      	cbz	r0, a806 <bt_conn_lookup_state_le+0x2a>
		if (conn->type != BT_CONN_TYPE_LE) {
    a7fc:	7883      	ldrb	r3, [r0, #2]
    a7fe:	2b01      	cmp	r3, #1
    a800:	d006      	beq.n	a810 <bt_conn_lookup_state_le+0x34>
			bt_conn_ref(conn);
    a802:	f01e fe63 	bl	294cc <bt_conn_ref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
    a806:	3501      	adds	r5, #1
    a808:	2d03      	cmp	r5, #3
    a80a:	d1f1      	bne.n	a7f0 <bt_conn_lookup_state_le+0x14>
	return NULL;
    a80c:	2400      	movs	r4, #0
    a80e:	e00f      	b.n	a830 <bt_conn_lookup_state_le+0x54>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
    a810:	b147      	cbz	r7, a824 <bt_conn_lookup_state_le+0x48>
    a812:	463a      	mov	r2, r7
    a814:	4631      	mov	r1, r6
    a816:	f01e fe39 	bl	2948c <bt_conn_is_peer_addr_le>
    a81a:	b918      	cbnz	r0, a824 <bt_conn_lookup_state_le+0x48>
			bt_conn_unref(conn);
    a81c:	4620      	mov	r0, r4
    a81e:	f7ff fe93 	bl	a548 <bt_conn_unref>
			continue;
    a822:	e7f0      	b.n	a806 <bt_conn_lookup_state_le+0x2a>
		if (!(conn->state == state && conn->id == id)) {
    a824:	7aa3      	ldrb	r3, [r4, #10]
    a826:	4543      	cmp	r3, r8
    a828:	d1f8      	bne.n	a81c <bt_conn_lookup_state_le+0x40>
    a82a:	7a23      	ldrb	r3, [r4, #8]
    a82c:	42b3      	cmp	r3, r6
    a82e:	d1f5      	bne.n	a81c <bt_conn_lookup_state_le+0x40>
}
    a830:	4620      	mov	r0, r4
    a832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a836:	bf00      	nop
    a838:	20001660 	.word	0x20001660

0000a83c <bt_conn_disconnect>:
			     param->pref_rx_phy, phy_opts);
}
#endif

int bt_conn_disconnect(struct bt_conn *conn, uint8_t reason)
{
    a83c:	b538      	push	{r3, r4, r5, lr}
	    conn->type == BT_CONN_TYPE_LE) {
		bt_le_set_auto_conn(&conn->le.dst, NULL);
	}
#endif /* !defined(CONFIG_BT_WHITELIST) */

	switch (conn->state) {
    a83e:	7a83      	ldrb	r3, [r0, #10]
    a840:	3b02      	subs	r3, #2
{
    a842:	4604      	mov	r4, r0
    a844:	460d      	mov	r5, r1
	switch (conn->state) {
    a846:	2b06      	cmp	r3, #6
    a848:	d805      	bhi.n	a856 <bt_conn_disconnect+0x1a>
    a84a:	e8df f003 	tbb	[pc, r3]
    a84e:	0408      	.short	0x0408
    a850:	1b0c0e04 	.word	0x1b0c0e04
    a854:	0c          	.byte	0x0c
    a855:	00          	.byte	0x00
		return conn_disconnect(conn, reason);
	case BT_CONN_DISCONNECT:
		return 0;
	case BT_CONN_DISCONNECTED:
	default:
		return -ENOTCONN;
    a856:	f06f 057f 	mvn.w	r5, #127	; 0x7f
	}
}
    a85a:	4628      	mov	r0, r5
    a85c:	bd38      	pop	{r3, r4, r5, pc}
		conn->err = reason;
    a85e:	7261      	strb	r1, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    a860:	2100      	movs	r1, #0
    a862:	f7ff fea5 	bl	a5b0 <bt_conn_set_state>
		return 0;
    a866:	2500      	movs	r5, #0
    a868:	e7f7      	b.n	a85a <bt_conn_disconnect+0x1e>
		BT_WARN("Deprecated: Use bt_le_adv_stop instead");
    a86a:	2157      	movs	r1, #87	; 0x57
    a86c:	480b      	ldr	r0, [pc, #44]	; (a89c <bt_conn_disconnect+0x60>)
    a86e:	f01c fb7e 	bl	26f6e <printk>
		conn->err = reason;
    a872:	7265      	strb	r5, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    a874:	4620      	mov	r0, r4
    a876:	2100      	movs	r1, #0
    a878:	f7ff fe9a 	bl	a5b0 <bt_conn_set_state>
}
    a87c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_le_adv_stop();
    a880:	f7ff b920 	b.w	9ac4 <bt_le_adv_stop>
	err = bt_hci_disconnect(conn->handle, reason);
    a884:	8800      	ldrh	r0, [r0, #0]
    a886:	f01e fcd7 	bl	29238 <bt_hci_disconnect>
	if (err) {
    a88a:	4605      	mov	r5, r0
    a88c:	2800      	cmp	r0, #0
    a88e:	d1e4      	bne.n	a85a <bt_conn_disconnect+0x1e>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
    a890:	2108      	movs	r1, #8
    a892:	4620      	mov	r0, r4
    a894:	f7ff fe8c 	bl	a5b0 <bt_conn_set_state>
	return 0;
    a898:	e7df      	b.n	a85a <bt_conn_disconnect+0x1e>
    a89a:	bf00      	nop
    a89c:	00030f33 	.word	0x00030f33

0000a8a0 <send_conn_le_param_update>:
{
    a8a0:	b538      	push	{r3, r4, r5, lr}
    a8a2:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
    a8a4:	4608      	mov	r0, r1
{
    a8a6:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    a8a8:	f01e fce1 	bl	2926e <bt_le_conn_params_valid>
    a8ac:	b310      	cbz	r0, a8f4 <send_conn_le_param_update+0x54>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    a8ae:	4b13      	ldr	r3, [pc, #76]	; (a8fc <send_conn_le_param_update+0x5c>)
    a8b0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    a8b4:	079a      	lsls	r2, r3, #30
    a8b6:	d407      	bmi.n	a8c8 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
    a8b8:	78e3      	ldrb	r3, [r4, #3]
    a8ba:	b17b      	cbz	r3, a8dc <send_conn_le_param_update+0x3c>
	return bt_l2cap_update_conn_param(conn, param);
    a8bc:	4629      	mov	r1, r5
    a8be:	4620      	mov	r0, r4
}
    a8c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    a8c4:	f000 bab4 	b.w	ae30 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    a8c8:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
    a8cc:	079b      	lsls	r3, r3, #30
    a8ce:	d5f3      	bpl.n	a8b8 <send_conn_le_param_update+0x18>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
    a8d0:	210a      	movs	r1, #10
    a8d2:	1d20      	adds	r0, r4, #4
    a8d4:	f01e fdc6 	bl	29464 <atomic_test_bit>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
    a8d8:	2800      	cmp	r0, #0
    a8da:	d1ed      	bne.n	a8b8 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
    a8dc:	4629      	mov	r1, r5
    a8de:	4620      	mov	r0, r4
    a8e0:	f01e fe1f 	bl	29522 <bt_conn_le_conn_update>
		if (rc == 0) {
    a8e4:	b928      	cbnz	r0, a8f2 <send_conn_le_param_update+0x52>
			conn->le.pending_latency = param->latency;
    a8e6:	88ab      	ldrh	r3, [r5, #4]
    a8e8:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
    a8ec:	88eb      	ldrh	r3, [r5, #6]
    a8ee:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
    a8f2:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    a8f4:	f06f 0015 	mvn.w	r0, #21
    a8f8:	e7fb      	b.n	a8f2 <send_conn_le_param_update+0x52>
    a8fa:	bf00      	nop
    a8fc:	200001c0 	.word	0x200001c0

0000a900 <deferred_work>:
{
    a900:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
    a902:	f810 3c4e 	ldrb.w	r3, [r0, #-78]
{
    a906:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
    a908:	f1a0 0658 	sub.w	r6, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
    a90c:	b993      	cbnz	r3, a934 <deferred_work+0x34>
		bt_l2cap_disconnected(conn);
    a90e:	4630      	mov	r0, r6
    a910:	f01e fe65 	bl	295de <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    a914:	4b1f      	ldr	r3, [pc, #124]	; (a994 <deferred_work+0x94>)
    a916:	681d      	ldr	r5, [r3, #0]
    a918:	b925      	cbnz	r5, a924 <deferred_work+0x24>
		bt_conn_unref(conn);
    a91a:	4630      	mov	r0, r6
    a91c:	f7ff fe14 	bl	a548 <bt_conn_unref>
}
    a920:	b004      	add	sp, #16
    a922:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->disconnected) {
    a924:	686b      	ldr	r3, [r5, #4]
    a926:	b11b      	cbz	r3, a930 <deferred_work+0x30>
			cb->disconnected(conn, conn->err);
    a928:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
    a92c:	4630      	mov	r0, r6
    a92e:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    a930:	692d      	ldr	r5, [r5, #16]
    a932:	e7f1      	b.n	a918 <deferred_work+0x18>
	if (conn->type != BT_CONN_TYPE_LE) {
    a934:	f810 3c56 	ldrb.w	r3, [r0, #-86]
    a938:	2b01      	cmp	r3, #1
    a93a:	d1f1      	bne.n	a920 <deferred_work+0x20>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a93c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(conn->flags,
    a940:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
    a944:	e855 3f00 	ldrex	r3, [r5]
    a948:	f423 7200 	bic.w	r2, r3, #512	; 0x200
    a94c:	e845 2100 	strex	r1, r2, [r5]
    a950:	2900      	cmp	r1, #0
    a952:	d1f7      	bne.n	a944 <deferred_work+0x44>
    a954:	f3bf 8f5b 	dmb	ish
    a958:	059b      	lsls	r3, r3, #22
    a95a:	d514      	bpl.n	a986 <deferred_work+0x86>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
    a95c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    a95e:	9300      	str	r3, [sp, #0]
    a960:	6d23      	ldr	r3, [r4, #80]	; 0x50
    a962:	9301      	str	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
    a964:	4669      	mov	r1, sp
		send_conn_le_param_update(conn, param);
    a966:	4630      	mov	r0, r6
    a968:	f7ff ff9a 	bl	a8a0 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a96c:	f3bf 8f5b 	dmb	ish
    a970:	e855 3f00 	ldrex	r3, [r5]
    a974:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    a978:	e845 3200 	strex	r2, r3, [r5]
    a97c:	2a00      	cmp	r2, #0
    a97e:	d1f7      	bne.n	a970 <deferred_work+0x70>
    a980:	f3bf 8f5b 	dmb	ish
    a984:	e7cc      	b.n	a920 <deferred_work+0x20>
		param = BT_LE_CONN_PARAM(
    a986:	4a04      	ldr	r2, [pc, #16]	; (a998 <deferred_work+0x98>)
    a988:	6851      	ldr	r1, [r2, #4]
    a98a:	6810      	ldr	r0, [r2, #0]
    a98c:	ab02      	add	r3, sp, #8
    a98e:	c303      	stmia	r3!, {r0, r1}
		send_conn_le_param_update(conn, param);
    a990:	a902      	add	r1, sp, #8
    a992:	e7e8      	b.n	a966 <deferred_work+0x66>
    a994:	20002ba0 	.word	0x20002ba0
    a998:	0002e70c 	.word	0x0002e70c

0000a99c <bt_conn_create_pdu_timeout>:
						 const char *func, int line)
#else
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
					   size_t reserve, k_timeout_t timeout)
#endif
{
    a99c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a99e:	4604      	mov	r4, r0
    a9a0:	460d      	mov	r5, r1
    a9a2:	4616      	mov	r6, r2
    a9a4:	461f      	mov	r7, r3

	/*
	 * PDU must not be allocated from ISR as we block with 'K_FOREVER'
	 * during the allocation
	 */
	__ASSERT_NO_MSG(!k_is_in_isr());
    a9a6:	f022 fcc8 	bl	2d33a <k_is_in_isr>
    a9aa:	b150      	cbz	r0, a9c2 <bt_conn_create_pdu_timeout+0x26>
    a9ac:	490f      	ldr	r1, [pc, #60]	; (a9ec <bt_conn_create_pdu_timeout+0x50>)
    a9ae:	4810      	ldr	r0, [pc, #64]	; (a9f0 <bt_conn_create_pdu_timeout+0x54>)
    a9b0:	f640 12ee 	movw	r2, #2542	; 0x9ee
    a9b4:	f01c fadb 	bl	26f6e <printk>
    a9b8:	f640 11ee 	movw	r1, #2542	; 0x9ee
    a9bc:	480b      	ldr	r0, [pc, #44]	; (a9ec <bt_conn_create_pdu_timeout+0x50>)
    a9be:	f01c fd4f 	bl	27460 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
    a9c2:	480c      	ldr	r0, [pc, #48]	; (a9f4 <bt_conn_create_pdu_timeout+0x58>)
    a9c4:	4632      	mov	r2, r6
    a9c6:	2c00      	cmp	r4, #0
    a9c8:	bf18      	it	ne
    a9ca:	4620      	movne	r0, r4
    a9cc:	463b      	mov	r3, r7
    a9ce:	f021 ff94 	bl	2c8fa <net_buf_alloc_fixed>
#else
		buf = net_buf_alloc(pool, timeout);
#endif
	}

	if (!buf) {
    a9d2:	4604      	mov	r4, r0
    a9d4:	b928      	cbnz	r0, a9e2 <bt_conn_create_pdu_timeout+0x46>
		BT_WARN("Unable to allocate buffer within timeout");
    a9d6:	2157      	movs	r1, #87	; 0x57
    a9d8:	4807      	ldr	r0, [pc, #28]	; (a9f8 <bt_conn_create_pdu_timeout+0x5c>)
    a9da:	f01c fac8 	bl	26f6e <printk>

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);

	return buf;
}
    a9de:	4620      	mov	r0, r4
    a9e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_simple_reserve(&buf->b, reserve);
    a9e2:	1d29      	adds	r1, r5, #4
    a9e4:	3008      	adds	r0, #8
    a9e6:	f014 f9cb 	bl	1ed80 <net_buf_simple_reserve>
	return buf;
    a9ea:	e7f8      	b.n	a9de <bt_conn_create_pdu_timeout+0x42>
    a9ec:	000310fa 	.word	0x000310fa
    a9f0:	0002fa94 	.word	0x0002fa94
    a9f4:	20001380 	.word	0x20001380
    a9f8:	00030f05 	.word	0x00030f05

0000a9fc <bt_conn_create_frag_timeout>:
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
    a9fc:	4601      	mov	r1, r0
    a9fe:	4801      	ldr	r0, [pc, #4]	; (aa04 <bt_conn_create_frag_timeout+0x8>)
    aa00:	f7ff bfcc 	b.w	a99c <bt_conn_create_pdu_timeout>
    aa04:	20001404 	.word	0x20001404

0000aa08 <create_frag.isra.16>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    aa08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    aa0c:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
    aa0e:	f04f 33ff 	mov.w	r3, #4294967295
    aa12:	f04f 32ff 	mov.w	r2, #4294967295
    aa16:	2000      	movs	r0, #0
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    aa18:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
    aa1a:	f7ff ffef 	bl	a9fc <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
    aa1e:	7833      	ldrb	r3, [r6, #0]
    aa20:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
    aa22:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    aa24:	f04f 0600 	mov.w	r6, #0
    aa28:	d005      	beq.n	aa36 <create_frag.isra.16+0x2e>
		net_buf_unref(frag);
    aa2a:	f014 fa93 	bl	1ef54 <net_buf_unref>
		return NULL;
    aa2e:	4635      	mov	r5, r6
}
    aa30:	4628      	mov	r0, r5
    aa32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
    aa36:	6146      	str	r6, [r0, #20]
	return net_buf_simple_tailroom(&buf->b);
    aa38:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
    aa3c:	4e0c      	ldr	r6, [pc, #48]	; (aa70 <create_frag.isra.16+0x68>)
    aa3e:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    aa40:	f8b6 80c4 	ldrh.w	r8, [r6, #196]	; 0xc4
    aa44:	f021 ffc5 	bl	2c9d2 <net_buf_simple_tailroom>
    aa48:	4580      	cmp	r8, r0
    aa4a:	d20c      	bcs.n	aa66 <create_frag.isra.16+0x5e>
	return bt_dev.le.acl_mtu;
    aa4c:	f8b6 60c4 	ldrh.w	r6, [r6, #196]	; 0xc4
	return net_buf_simple_add_mem(&buf->b, mem, len);
    aa50:	f854 1f08 	ldr.w	r1, [r4, #8]!
    aa54:	4632      	mov	r2, r6
    aa56:	4638      	mov	r0, r7
    aa58:	f021 ffc3 	bl	2c9e2 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
    aa5c:	4631      	mov	r1, r6
    aa5e:	4620      	mov	r0, r4
    aa60:	f014 fb8e 	bl	1f180 <net_buf_simple_pull>
    aa64:	e7e4      	b.n	aa30 <create_frag.isra.16+0x28>
	return net_buf_simple_tailroom(&buf->b);
    aa66:	4638      	mov	r0, r7
    aa68:	f021 ffb3 	bl	2c9d2 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    aa6c:	b286      	uxth	r6, r0
    aa6e:	e7ef      	b.n	aa50 <create_frag.isra.16+0x48>
    aa70:	200001c0 	.word	0x200001c0

0000aa74 <bt_conn_process_tx>:
{
    aa74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    aa76:	7a83      	ldrb	r3, [r0, #10]
{
    aa78:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    aa7a:	b993      	cbnz	r3, aaa2 <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    aa7c:	f3bf 8f5b 	dmb	ish
    aa80:	1d03      	adds	r3, r0, #4
    aa82:	e853 2f00 	ldrex	r2, [r3]
    aa86:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    aa8a:	e843 1400 	strex	r4, r1, [r3]
    aa8e:	2c00      	cmp	r4, #0
    aa90:	d1f7      	bne.n	aa82 <bt_conn_process_tx+0xe>
    aa92:	f3bf 8f5b 	dmb	ish
    aa96:	0653      	lsls	r3, r2, #25
    aa98:	d503      	bpl.n	aaa2 <bt_conn_process_tx+0x2e>
}
    aa9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
    aa9e:	f7ff bbdd 	b.w	a25c <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    aaa2:	2200      	movs	r2, #0
    aaa4:	2300      	movs	r3, #0
    aaa6:	f105 0034 	add.w	r0, r5, #52	; 0x34
    aaaa:	f014 f939 	bl	1ed20 <net_buf_get>
	BT_ASSERT(buf);
    aaae:	4604      	mov	r4, r0
    aab0:	b958      	cbnz	r0, aaca <bt_conn_process_tx+0x56>
    aab2:	f240 525f 	movw	r2, #1375	; 0x55f
    aab6:	491f      	ldr	r1, [pc, #124]	; (ab34 <bt_conn_process_tx+0xc0>)
    aab8:	481f      	ldr	r0, [pc, #124]	; (ab38 <bt_conn_process_tx+0xc4>)
    aaba:	f01c fa58 	bl	26f6e <printk>
    aabe:	4040      	eors	r0, r0
    aac0:	f380 8811 	msr	BASEPRI, r0
    aac4:	f04f 0003 	mov.w	r0, #3
    aac8:	df02      	svc	2
	return bt_dev.le.acl_mtu;
    aaca:	4e1c      	ldr	r6, [pc, #112]	; (ab3c <bt_conn_process_tx+0xc8>)
	if (buf->len <= conn_mtu(conn)) {
    aacc:	89a1      	ldrh	r1, [r4, #12]
    aace:	f8b6 20c4 	ldrh.w	r2, [r6, #196]	; 0xc4
    aad2:	4291      	cmp	r1, r2
    aad4:	d807      	bhi.n	aae6 <bt_conn_process_tx+0x72>
		return send_frag(conn, buf, FRAG_SINGLE, false);
    aad6:	2300      	movs	r3, #0
    aad8:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
    aada:	4621      	mov	r1, r4
    aadc:	4628      	mov	r0, r5
    aade:	f7ff fab3 	bl	a048 <send_frag>
	if (!send_buf(conn, buf)) {
    aae2:	b140      	cbz	r0, aaf6 <bt_conn_process_tx+0x82>
}
    aae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	frag = create_frag(conn, buf);
    aae6:	f105 070a 	add.w	r7, r5, #10
    aaea:	4621      	mov	r1, r4
    aaec:	4638      	mov	r0, r7
    aaee:	f7ff ff8b 	bl	aa08 <create_frag.isra.16>
	if (!frag) {
    aaf2:	4601      	mov	r1, r0
    aaf4:	b920      	cbnz	r0, ab00 <bt_conn_process_tx+0x8c>
		net_buf_unref(buf);
    aaf6:	4620      	mov	r0, r4
}
    aaf8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
    aafc:	f014 ba2a 	b.w	1ef54 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
    ab00:	2301      	movs	r3, #1
    ab02:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    ab04:	4628      	mov	r0, r5
    ab06:	f7ff fa9f 	bl	a048 <send_frag>
    ab0a:	2800      	cmp	r0, #0
    ab0c:	d0f3      	beq.n	aaf6 <bt_conn_process_tx+0x82>
	while (buf->len > conn_mtu(conn)) {
    ab0e:	89a2      	ldrh	r2, [r4, #12]
    ab10:	f8b6 30c4 	ldrh.w	r3, [r6, #196]	; 0xc4
    ab14:	429a      	cmp	r2, r3
    ab16:	d802      	bhi.n	ab1e <bt_conn_process_tx+0xaa>
	return send_frag(conn, buf, FRAG_END, false);
    ab18:	2300      	movs	r3, #0
    ab1a:	2203      	movs	r2, #3
    ab1c:	e7dd      	b.n	aada <bt_conn_process_tx+0x66>
		frag = create_frag(conn, buf);
    ab1e:	4621      	mov	r1, r4
    ab20:	4638      	mov	r0, r7
    ab22:	f7ff ff71 	bl	aa08 <create_frag.isra.16>
		if (!frag) {
    ab26:	4601      	mov	r1, r0
    ab28:	2800      	cmp	r0, #0
    ab2a:	d0e4      	beq.n	aaf6 <bt_conn_process_tx+0x82>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    ab2c:	2301      	movs	r3, #1
    ab2e:	461a      	mov	r2, r3
    ab30:	e7e8      	b.n	ab04 <bt_conn_process_tx+0x90>
    ab32:	bf00      	nop
    ab34:	000310fa 	.word	0x000310fa
    ab38:	0002fa94 	.word	0x0002fa94
    ab3c:	200001c0 	.word	0x200001c0

0000ab40 <bt_conn_index>:
		__ASSERT(0 <= index && index < ARRAY_SIZE(sco_conns),
			"Invalid bt_conn pointer");
		break;
#endif
	default:
		index = conn - acl_conns;
    ab40:	4b0a      	ldr	r3, [pc, #40]	; (ab6c <bt_conn_index+0x2c>)
{
    ab42:	b510      	push	{r4, lr}
		index = conn - acl_conns;
    ab44:	1ac0      	subs	r0, r0, r3
    ab46:	4c0a      	ldr	r4, [pc, #40]	; (ab70 <bt_conn_index+0x30>)
    ab48:	1180      	asrs	r0, r0, #6
    ab4a:	4344      	muls	r4, r0
		__ASSERT(0 <= index && index < ARRAY_SIZE(acl_conns),
    ab4c:	2c02      	cmp	r4, #2
    ab4e:	d90a      	bls.n	ab66 <bt_conn_index+0x26>
    ab50:	4908      	ldr	r1, [pc, #32]	; (ab74 <bt_conn_index+0x34>)
    ab52:	4809      	ldr	r0, [pc, #36]	; (ab78 <bt_conn_index+0x38>)
    ab54:	f640 2296 	movw	r2, #2710	; 0xa96
    ab58:	f01c fa09 	bl	26f6e <printk>
    ab5c:	f640 2196 	movw	r1, #2710	; 0xa96
    ab60:	4804      	ldr	r0, [pc, #16]	; (ab74 <bt_conn_index+0x34>)
    ab62:	f01c fc7d 	bl	27460 <assert_post_action>
			 "Invalid bt_conn pointer");
		break;
	}

	return (uint8_t)index;
}
    ab66:	b2e0      	uxtb	r0, r4
    ab68:	bd10      	pop	{r4, pc}
    ab6a:	bf00      	nop
    ab6c:	20001660 	.word	0x20001660
    ab70:	aaaaaaab 	.word	0xaaaaaaab
    ab74:	000310fa 	.word	0x000310fa
    ab78:	0002fa94 	.word	0x0002fa94

0000ab7c <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
    ab7c:	b570      	push	{r4, r5, r6, lr}
    ab7e:	4d0b      	ldr	r5, [pc, #44]	; (abac <bt_conn_init+0x30>)
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
    ab80:	4e0b      	ldr	r6, [pc, #44]	; (abb0 <bt_conn_init+0x34>)
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
    ab82:	2400      	movs	r4, #0
		k_fifo_put(&free_tx, &conn_tx[i]);
    ab84:	4629      	mov	r1, r5
    ab86:	4630      	mov	r0, r6
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
    ab88:	3401      	adds	r4, #1
		k_fifo_put(&free_tx, &conn_tx[i]);
    ab8a:	f022 fb6d 	bl	2d268 <k_queue_append>
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
    ab8e:	2c08      	cmp	r4, #8
    ab90:	f105 0510 	add.w	r5, r5, #16
    ab94:	d1f6      	bne.n	ab84 <bt_conn_init+0x8>
	}

	bt_att_init();
    ab96:	f01f f876 	bl	29c86 <bt_att_init>

	err = bt_smp_init();
    ab9a:	f01f fb5e 	bl	2a25a <bt_smp_init>
	if (err) {
    ab9e:	4604      	mov	r4, r0
    aba0:	b908      	cbnz	r0, aba6 <bt_conn_init+0x2a>
		return err;
	}

	bt_l2cap_init();
    aba2:	f01e fd61 	bl	29668 <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
    aba6:	4620      	mov	r0, r4
    aba8:	bd70      	pop	{r4, r5, r6, pc}
    abaa:	bf00      	nop
    abac:	20002ba4 	.word	0x20002ba4
    abb0:	20001348 	.word	0x20001348

0000abb4 <l2cap_accept>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    abb4:	b538      	push	{r3, r4, r5, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    abb6:	4c0e      	ldr	r4, [pc, #56]	; (abf0 <l2cap_accept+0x3c>)
    abb8:	6823      	ldr	r3, [r4, #0]
{
    abba:	4602      	mov	r2, r0
		if (l2cap->chan.chan.conn) {
    abbc:	4625      	mov	r5, r4
    abbe:	b16b      	cbz	r3, abdc <l2cap_accept+0x28>
    abc0:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
    abc4:	b14b      	cbz	r3, abda <l2cap_accept+0x26>
    abc6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    abca:	b17b      	cbz	r3, abec <l2cap_accept+0x38>
		*chan = &l2cap->chan.chan;

		return 0;
	}

	BT_ERR("No available L2CAP context for conn %p", conn);
    abcc:	4809      	ldr	r0, [pc, #36]	; (abf4 <l2cap_accept+0x40>)
    abce:	2145      	movs	r1, #69	; 0x45
    abd0:	f01c f9cd 	bl	26f6e <printk>
    abd4:	f06f 000b 	mvn.w	r0, #11

	return -ENOMEM;
}
    abd8:	bd38      	pop	{r3, r4, r5, pc}
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
    abda:	2301      	movs	r3, #1
		l2cap->chan.chan.ops = &ops;
    abdc:	22c0      	movs	r2, #192	; 0xc0
    abde:	fb02 5303 	mla	r3, r2, r3, r5
    abe2:	4a05      	ldr	r2, [pc, #20]	; (abf8 <l2cap_accept+0x44>)
    abe4:	605a      	str	r2, [r3, #4]
		return 0;
    abe6:	2000      	movs	r0, #0
		*chan = &l2cap->chan.chan;
    abe8:	600b      	str	r3, [r1, #0]
		return 0;
    abea:	e7f5      	b.n	abd8 <l2cap_accept+0x24>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
    abec:	2302      	movs	r3, #2
    abee:	e7f5      	b.n	abdc <l2cap_accept+0x28>
    abf0:	200018a0 	.word	0x200018a0
    abf4:	00031211 	.word	0x00031211
    abf8:	0002ecd8 	.word	0x0002ecd8

0000abfc <l2cap_create_le_sig_pdu.isra.8>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    abfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    abfe:	4605      	mov	r5, r0
    ac00:	460f      	mov	r7, r1
    ac02:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
    ac04:	2300      	movs	r3, #0
    ac06:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    ac0a:	2104      	movs	r1, #4
    ac0c:	2000      	movs	r0, #0
    ac0e:	f7ff fec5 	bl	a99c <bt_conn_create_pdu_timeout>
	if (!buf) {
    ac12:	4604      	mov	r4, r0
    ac14:	b930      	cbnz	r0, ac24 <l2cap_create_le_sig_pdu.isra.8+0x28>
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
    ac16:	462a      	mov	r2, r5
    ac18:	2145      	movs	r1, #69	; 0x45
    ac1a:	4806      	ldr	r0, [pc, #24]	; (ac34 <l2cap_create_le_sig_pdu.isra.8+0x38>)
    ac1c:	f01c f9a7 	bl	26f6e <printk>
}
    ac20:	4620      	mov	r0, r4
    ac22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
    ac24:	2104      	movs	r1, #4
    ac26:	3008      	adds	r0, #8
    ac28:	f014 fae4 	bl	1f1f4 <net_buf_simple_add>
	hdr->code = code;
    ac2c:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
    ac2e:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    ac30:	8046      	strh	r6, [r0, #2]
	return buf;
    ac32:	e7f5      	b.n	ac20 <l2cap_create_le_sig_pdu.isra.8+0x24>
    ac34:	0003123d 	.word	0x0003123d

0000ac38 <l2cap_rtx_timeout>:
{
    ac38:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = chan->chan.conn;
    ac3a:	4604      	mov	r4, r0
	BT_ERR("chan %p timeout", chan);
    ac3c:	2145      	movs	r1, #69	; 0x45
	struct bt_conn *conn = chan->chan.conn;
    ac3e:	f854 5d10 	ldr.w	r5, [r4, #-16]!
	BT_ERR("chan %p timeout", chan);
    ac42:	4806      	ldr	r0, [pc, #24]	; (ac5c <l2cap_rtx_timeout+0x24>)
    ac44:	4622      	mov	r2, r4
    ac46:	f01c f992 	bl	26f6e <printk>
	bt_l2cap_chan_remove(conn, &chan->chan);
    ac4a:	4628      	mov	r0, r5
    ac4c:	4621      	mov	r1, r4
    ac4e:	f01e fc91 	bl	29574 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    ac52:	4620      	mov	r0, r4
}
    ac54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
    ac58:	f01e bcac 	b.w	295b4 <bt_l2cap_chan_del>
    ac5c:	0003131d 	.word	0x0003131d

0000ac60 <bt_l2cap_connected>:
{
    ac60:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    ac64:	4f31      	ldr	r7, [pc, #196]	; (ad2c <bt_l2cap_connected+0xcc>)
    ac66:	4d32      	ldr	r5, [pc, #200]	; (ad30 <bt_l2cap_connected+0xd0>)
    ac68:	f8df 80d0 	ldr.w	r8, [pc, #208]	; ad3c <bt_l2cap_connected+0xdc>
{
    ac6c:	4606      	mov	r6, r0
    ac6e:	46b9      	mov	r9, r7
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    ac70:	42bd      	cmp	r5, r7
    ac72:	d90a      	bls.n	ac8a <bt_l2cap_connected+0x2a>
    ac74:	4641      	mov	r1, r8
    ac76:	482f      	ldr	r0, [pc, #188]	; (ad34 <bt_l2cap_connected+0xd4>)
    ac78:	f240 1267 	movw	r2, #359	; 0x167
    ac7c:	f01c f977 	bl	26f6e <printk>
    ac80:	f240 1167 	movw	r1, #359	; 0x167
    ac84:	4640      	mov	r0, r8
    ac86:	f01c fbeb 	bl	27460 <assert_post_action>
    ac8a:	454d      	cmp	r5, r9
    ac8c:	d302      	bcc.n	ac94 <bt_l2cap_connected+0x34>
}
    ac8e:	b002      	add	sp, #8
    ac90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (fchan->accept(conn, &chan) < 0) {
    ac94:	686b      	ldr	r3, [r5, #4]
    ac96:	a901      	add	r1, sp, #4
    ac98:	4630      	mov	r0, r6
    ac9a:	4798      	blx	r3
    ac9c:	2800      	cmp	r0, #0
    ac9e:	db40      	blt.n	ad22 <bt_l2cap_connected+0xc2>
		ch = BT_L2CAP_LE_CHAN(chan);
    aca0:	9c01      	ldr	r4, [sp, #4]
		ch->rx.cid = fchan->cid;
    aca2:	882b      	ldrh	r3, [r5, #0]
    aca4:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
		ch->tx.cid = fchan->cid;
    aca8:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    acac:	2230      	movs	r2, #48	; 0x30
    acae:	2100      	movs	r1, #0
    acb0:	f104 0010 	add.w	r0, r4, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
    acb4:	f8d5 a008 	ldr.w	sl, [r5, #8]
    acb8:	f022 fc9f 	bl	2d5fa <memset>
    acbc:	4b1e      	ldr	r3, [pc, #120]	; (ad38 <bt_l2cap_connected+0xd8>)
    acbe:	6163      	str	r3, [r4, #20]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    acc0:	2200      	movs	r2, #0
    acc2:	f104 0340 	add.w	r3, r4, #64	; 0x40
    acc6:	f3bf 8f5b 	dmb	ish
    acca:	e853 1f00 	ldrex	r1, [r3]
    acce:	e843 2000 	strex	r0, r2, [r3]
    acd2:	2800      	cmp	r0, #0
    acd4:	d1f9      	bne.n	acca <bt_l2cap_connected+0x6a>
    acd6:	f3bf 8f5b 	dmb	ish
	parent->next = child;
    acda:	60a2      	str	r2, [r4, #8]
Z_GENLIST_APPEND(slist, snode)
    acdc:	6d72      	ldr	r2, [r6, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
    acde:	f104 0308 	add.w	r3, r4, #8
    ace2:	bb02      	cbnz	r2, ad26 <bt_l2cap_connected+0xc6>
	list->head = node;
    ace4:	e9c6 3314 	strd	r3, r3, [r6, #80]	; 0x50
		if (chan->ops->connected) {
    ace8:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
    acea:	6026      	str	r6, [r4, #0]
		if (chan->ops->connected) {
    acec:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
    acee:	f8c4 a00c 	str.w	sl, [r4, #12]
		if (chan->ops->connected) {
    acf2:	681b      	ldr	r3, [r3, #0]
    acf4:	b103      	cbz	r3, acf8 <bt_l2cap_connected+0x98>
			chan->ops->connected(chan);
    acf6:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    acf8:	9b01      	ldr	r3, [sp, #4]
    acfa:	f3bf 8f5b 	dmb	ish
    acfe:	3340      	adds	r3, #64	; 0x40
    ad00:	e853 2f00 	ldrex	r2, [r3]
    ad04:	f042 0201 	orr.w	r2, r2, #1
    ad08:	e843 2100 	strex	r1, r2, [r3]
    ad0c:	2900      	cmp	r1, #0
    ad0e:	d1f7      	bne.n	ad00 <bt_l2cap_connected+0xa0>
    ad10:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
    ad14:	9801      	ldr	r0, [sp, #4]
    ad16:	6843      	ldr	r3, [r0, #4]
    ad18:	699b      	ldr	r3, [r3, #24]
    ad1a:	b113      	cbz	r3, ad22 <bt_l2cap_connected+0xc2>
			chan->ops->status(chan, chan->status);
    ad1c:	f100 0140 	add.w	r1, r0, #64	; 0x40
    ad20:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    ad22:	350c      	adds	r5, #12
    ad24:	e7a4      	b.n	ac70 <bt_l2cap_connected+0x10>
	parent->next = child;
    ad26:	6013      	str	r3, [r2, #0]
	list->tail = node;
    ad28:	6573      	str	r3, [r6, #84]	; 0x54
    ad2a:	e7dd      	b.n	ace8 <bt_l2cap_connected+0x88>
    ad2c:	0002e314 	.word	0x0002e314
    ad30:	0002e2f0 	.word	0x0002e2f0
    ad34:	0002fa94 	.word	0x0002fa94
    ad38:	0000ac39 	.word	0x0000ac39
    ad3c:	00031194 	.word	0x00031194

0000ad40 <l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
    ad40:	898b      	ldrh	r3, [r1, #12]
    ad42:	2b03      	cmp	r3, #3
{
    ad44:	b573      	push	{r0, r1, r4, r5, r6, lr}
    ad46:	4606      	mov	r6, r0
    ad48:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    ad4a:	d804      	bhi.n	ad56 <l2cap_recv+0x16>
		BT_ERR("Too small L2CAP signaling PDU");
    ad4c:	481f      	ldr	r0, [pc, #124]	; (adcc <l2cap_recv+0x8c>)
    ad4e:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Invalid ident value in L2CAP PDU");
    ad50:	f01c f90d 	bl	26f6e <printk>
		return 0;
    ad54:	e00d      	b.n	ad72 <l2cap_recv+0x32>
	return net_buf_simple_pull_mem(&buf->b, len);
    ad56:	2104      	movs	r1, #4
    ad58:	f105 0008 	add.w	r0, r5, #8
    ad5c:	f014 fa2c 	bl	1f1b8 <net_buf_simple_pull_mem>
	if (buf->len != len) {
    ad60:	89aa      	ldrh	r2, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
    ad62:	8843      	ldrh	r3, [r0, #2]
	if (buf->len != len) {
    ad64:	4293      	cmp	r3, r2
    ad66:	4604      	mov	r4, r0
    ad68:	d006      	beq.n	ad78 <l2cap_recv+0x38>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    ad6a:	2145      	movs	r1, #69	; 0x45
    ad6c:	4818      	ldr	r0, [pc, #96]	; (add0 <l2cap_recv+0x90>)
    ad6e:	f01c f8fe 	bl	26f6e <printk>
}
    ad72:	2000      	movs	r0, #0
    ad74:	b002      	add	sp, #8
    ad76:	bd70      	pop	{r4, r5, r6, pc}
	if (!hdr->ident) {
    ad78:	7842      	ldrb	r2, [r0, #1]
    ad7a:	b912      	cbnz	r2, ad82 <l2cap_recv+0x42>
		BT_ERR("Invalid ident value in L2CAP PDU");
    ad7c:	2145      	movs	r1, #69	; 0x45
    ad7e:	4815      	ldr	r0, [pc, #84]	; (add4 <l2cap_recv+0x94>)
    ad80:	e7e6      	b.n	ad50 <l2cap_recv+0x10>
	switch (hdr->code) {
    ad82:	7802      	ldrb	r2, [r0, #0]
    ad84:	2a01      	cmp	r2, #1
    ad86:	d0f4      	beq.n	ad72 <l2cap_recv+0x32>
    ad88:	2a13      	cmp	r2, #19
    ad8a:	d104      	bne.n	ad96 <l2cap_recv+0x56>
	if (buf->len < sizeof(*rsp)) {
    ad8c:	2b01      	cmp	r3, #1
    ad8e:	d8f0      	bhi.n	ad72 <l2cap_recv+0x32>
		BT_ERR("Too small LE conn param rsp");
    ad90:	2145      	movs	r1, #69	; 0x45
    ad92:	4811      	ldr	r0, [pc, #68]	; (add8 <l2cap_recv+0x98>)
    ad94:	e7dc      	b.n	ad50 <l2cap_recv+0x10>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    ad96:	2157      	movs	r1, #87	; 0x57
    ad98:	4810      	ldr	r0, [pc, #64]	; (addc <l2cap_recv+0x9c>)
    ad9a:	f01c f8e8 	bl	26f6e <printk>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    ad9e:	7861      	ldrb	r1, [r4, #1]
		l2cap_send_reject(chan->conn, hdr->ident,
    ada0:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    ada2:	2202      	movs	r2, #2
    ada4:	2001      	movs	r0, #1
    ada6:	f7ff ff29 	bl	abfc <l2cap_create_le_sig_pdu.isra.8>
	if (!buf) {
    adaa:	4604      	mov	r4, r0
    adac:	2800      	cmp	r0, #0
    adae:	d0e0      	beq.n	ad72 <l2cap_recv+0x32>
	return net_buf_simple_add(&buf->b, len);
    adb0:	2102      	movs	r1, #2
    adb2:	3008      	adds	r0, #8
    adb4:	f014 fa1e 	bl	1f1f4 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    adb8:	2300      	movs	r3, #0
    adba:	7003      	strb	r3, [r0, #0]
    adbc:	7043      	strb	r3, [r0, #1]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline void bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
    adbe:	4622      	mov	r2, r4
    adc0:	9300      	str	r3, [sp, #0]
    adc2:	2105      	movs	r1, #5
    adc4:	4628      	mov	r0, r5
    adc6:	f01e fc20 	bl	2960a <bt_l2cap_send_cb>
    adca:	e7d2      	b.n	ad72 <l2cap_recv+0x32>
    adcc:	0003126a 	.word	0x0003126a
    add0:	0003128d 	.word	0x0003128d
    add4:	000312b3 	.word	0x000312b3
    add8:	000312d9 	.word	0x000312d9
    addc:	000312fa 	.word	0x000312fa

0000ade0 <bt_l2cap_recv>:
{
    ade0:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
    ade2:	898b      	ldrh	r3, [r1, #12]
    ade4:	2b03      	cmp	r3, #3
{
    ade6:	4605      	mov	r5, r0
    ade8:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
    adea:	d808      	bhi.n	adfe <bt_l2cap_recv+0x1e>
		BT_ERR("Too small L2CAP PDU received");
    adec:	2145      	movs	r1, #69	; 0x45
    adee:	480e      	ldr	r0, [pc, #56]	; (ae28 <bt_l2cap_recv+0x48>)
    adf0:	f01c f8bd 	bl	26f6e <printk>
	net_buf_unref(buf);
    adf4:	4620      	mov	r0, r4
}
    adf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
    adfa:	f014 b8ab 	b.w	1ef54 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
    adfe:	2104      	movs	r1, #4
    ae00:	f104 0008 	add.w	r0, r4, #8
    ae04:	f014 f9d8 	bl	1f1b8 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
    ae08:	8842      	ldrh	r2, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    ae0a:	4628      	mov	r0, r5
    ae0c:	4611      	mov	r1, r2
    ae0e:	f01e fc20 	bl	29652 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    ae12:	b920      	cbnz	r0, ae1e <bt_l2cap_recv+0x3e>
		BT_WARN("Ignoring data for unknown CID 0x%04x", cid);
    ae14:	2157      	movs	r1, #87	; 0x57
    ae16:	4805      	ldr	r0, [pc, #20]	; (ae2c <bt_l2cap_recv+0x4c>)
    ae18:	f01c f8a9 	bl	26f6e <printk>
		net_buf_unref(buf);
    ae1c:	e7ea      	b.n	adf4 <bt_l2cap_recv+0x14>
	chan->ops->recv(chan, buf);
    ae1e:	6843      	ldr	r3, [r0, #4]
    ae20:	4621      	mov	r1, r4
    ae22:	691b      	ldr	r3, [r3, #16]
    ae24:	4798      	blx	r3
    ae26:	e7e5      	b.n	adf4 <bt_l2cap_recv+0x14>
    ae28:	000311c5 	.word	0x000311c5
    ae2c:	000311e7 	.word	0x000311e7

0000ae30 <bt_l2cap_update_conn_param>:
{
    ae30:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
    ae32:	4b15      	ldr	r3, [pc, #84]	; (ae88 <bt_l2cap_update_conn_param+0x58>)
    ae34:	781a      	ldrb	r2, [r3, #0]
    ae36:	3201      	adds	r2, #1
	if (!ident) {
    ae38:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
    ae3c:	bf08      	it	eq
    ae3e:	2201      	moveq	r2, #1
    ae40:	701a      	strb	r2, [r3, #0]
{
    ae42:	4605      	mov	r5, r0
    ae44:	460c      	mov	r4, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    ae46:	2208      	movs	r2, #8
    ae48:	7819      	ldrb	r1, [r3, #0]
    ae4a:	2012      	movs	r0, #18
    ae4c:	f7ff fed6 	bl	abfc <l2cap_create_le_sig_pdu.isra.8>
	if (!buf) {
    ae50:	4606      	mov	r6, r0
    ae52:	b1b0      	cbz	r0, ae82 <bt_l2cap_update_conn_param+0x52>
	return net_buf_simple_add(&buf->b, len);
    ae54:	2108      	movs	r1, #8
    ae56:	4408      	add	r0, r1
    ae58:	f014 f9cc 	bl	1f1f4 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    ae5c:	8823      	ldrh	r3, [r4, #0]
    ae5e:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    ae60:	8863      	ldrh	r3, [r4, #2]
    ae62:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    ae64:	88a3      	ldrh	r3, [r4, #4]
    ae66:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    ae68:	88e3      	ldrh	r3, [r4, #6]
    ae6a:	80c3      	strh	r3, [r0, #6]
    ae6c:	2400      	movs	r4, #0
    ae6e:	9400      	str	r4, [sp, #0]
    ae70:	4623      	mov	r3, r4
    ae72:	4632      	mov	r2, r6
    ae74:	2105      	movs	r1, #5
    ae76:	4628      	mov	r0, r5
    ae78:	f01e fbc7 	bl	2960a <bt_l2cap_send_cb>
	return 0;
    ae7c:	4620      	mov	r0, r4
}
    ae7e:	b002      	add	sp, #8
    ae80:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    ae82:	f06f 000b 	mvn.w	r0, #11
    ae86:	e7fa      	b.n	ae7e <bt_l2cap_update_conn_param+0x4e>
    ae88:	2000481e 	.word	0x2000481e

0000ae8c <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
    ae8c:	4b02      	ldr	r3, [pc, #8]	; (ae98 <att_cfm_sent+0xc>)
    ae8e:	f8c1 3130 	str.w	r3, [r1, #304]	; 0x130

	att_sent(conn, user_data);
    ae92:	f01e bc17 	b.w	296c4 <att_sent>
    ae96:	bf00      	nop
    ae98:	000299e1 	.word	0x000299e1

0000ae9c <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
    ae9c:	4b02      	ldr	r3, [pc, #8]	; (aea8 <att_rsp_sent+0xc>)
    ae9e:	f8c1 3130 	str.w	r3, [r1, #304]	; 0x130

	att_sent(conn, user_data);
    aea2:	f01e bc0f 	b.w	296c4 <att_sent>
    aea6:	bf00      	nop
    aea8:	000299c5 	.word	0x000299c5

0000aeac <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
    aeac:	4b02      	ldr	r3, [pc, #8]	; (aeb8 <att_req_sent+0xc>)
    aeae:	f8c1 3130 	str.w	r3, [r1, #304]	; 0x130

	att_sent(conn, user_data);
    aeb2:	f01e bc07 	b.w	296c4 <att_sent>
    aeb6:	bf00      	nop
    aeb8:	0000b349 	.word	0x0000b349

0000aebc <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
    aebc:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
    aebe:	3808      	subs	r0, #8
    aec0:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
    aec2:	a901      	add	r1, sp, #4
    aec4:	4802      	ldr	r0, [pc, #8]	; (aed0 <bt_att_released+0x14>)
    aec6:	f017 f993 	bl	221f0 <k_mem_slab_free>
}
    aeca:	b003      	add	sp, #12
    aecc:	f85d fb04 	ldr.w	pc, [sp], #4
    aed0:	2000122c 	.word	0x2000122c

0000aed4 <read_group_cb>:
{
    aed4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    aed8:	4606      	mov	r6, r0
    aeda:	460d      	mov	r5, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    aedc:	f04f 0800 	mov.w	r8, #0
    aee0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    aee4:	a902      	add	r1, sp, #8
    aee6:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
    aee8:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    aeea:	f88d 8008 	strb.w	r8, [sp, #8]
{
    aeee:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    aef0:	f8ad 300a 	strh.w	r3, [sp, #10]
    aef4:	f01e f8c8 	bl	29088 <bt_uuid_cmp>
    aef8:	b190      	cbz	r0, af20 <read_group_cb+0x4c>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    aefa:	f642 0301 	movw	r3, #10241	; 0x2801
    aefe:	a903      	add	r1, sp, #12
    af00:	6830      	ldr	r0, [r6, #0]
    af02:	f88d 800c 	strb.w	r8, [sp, #12]
    af06:	f8ad 300e 	strh.w	r3, [sp, #14]
    af0a:	f01e f8bd 	bl	29088 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    af0e:	b138      	cbz	r0, af20 <read_group_cb+0x4c>
		if (data->group &&
    af10:	6923      	ldr	r3, [r4, #16]
    af12:	b11b      	cbz	r3, af1c <read_group_cb+0x48>
    af14:	885a      	ldrh	r2, [r3, #2]
    af16:	42aa      	cmp	r2, r5
    af18:	d200      	bcs.n	af1c <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
    af1a:	805d      	strh	r5, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    af1c:	2001      	movs	r0, #1
    af1e:	e012      	b.n	af46 <read_group_cb+0x72>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    af20:	6861      	ldr	r1, [r4, #4]
    af22:	6830      	ldr	r0, [r6, #0]
    af24:	f01e f8b0 	bl	29088 <bt_uuid_cmp>
    af28:	b110      	cbz	r0, af30 <read_group_cb+0x5c>
		data->group = NULL;
    af2a:	2300      	movs	r3, #0
    af2c:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
    af2e:	e7f5      	b.n	af1c <read_group_cb+0x48>
	if (data->rsp->len &&
    af30:	68e3      	ldr	r3, [r4, #12]
    af32:	68a0      	ldr	r0, [r4, #8]
    af34:	781a      	ldrb	r2, [r3, #0]
    af36:	b14a      	cbz	r2, af4c <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    af38:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
    af3c:	8981      	ldrh	r1, [r0, #12]
    af3e:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    af40:	4293      	cmp	r3, r2
    af42:	da03      	bge.n	af4c <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
    af44:	2000      	movs	r0, #0
}
    af46:	b004      	add	sp, #16
    af48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    af4c:	2104      	movs	r1, #4
    af4e:	3008      	adds	r0, #8
    af50:	f014 f950 	bl	1f1f4 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    af54:	4b09      	ldr	r3, [pc, #36]	; (af7c <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    af56:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    af58:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
    af5a:	8005      	strh	r5, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    af5c:	8045      	strh	r5, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    af5e:	4631      	mov	r1, r6
    af60:	9300      	str	r3, [sp, #0]
    af62:	9401      	str	r4, [sp, #4]
    af64:	2300      	movs	r3, #0
    af66:	4638      	mov	r0, r7
    af68:	f01e fc25 	bl	297b6 <att_chan_read>
	if (read < 0) {
    af6c:	2800      	cmp	r0, #0
    af6e:	dbe9      	blt.n	af44 <read_group_cb+0x70>
	if (!data->group) {
    af70:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
    af72:	3000      	adds	r0, #0
    af74:	bf18      	it	ne
    af76:	2001      	movne	r0, #1
    af78:	e7e5      	b.n	af46 <read_group_cb+0x72>
    af7a:	bf00      	nop
    af7c:	000298cd 	.word	0x000298cd

0000af80 <read_type_cb>:
{
    af80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
    af84:	6816      	ldr	r6, [r2, #0]
{
    af86:	4607      	mov	r7, r0
    af88:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    af8a:	6800      	ldr	r0, [r0, #0]
    af8c:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
    af8e:	68b5      	ldr	r5, [r6, #8]
{
    af90:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    af92:	f01e f879 	bl	29088 <bt_uuid_cmp>
    af96:	4680      	mov	r8, r0
    af98:	2800      	cmp	r0, #0
    af9a:	d13f      	bne.n	b01c <read_type_cb+0x9c>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    af9c:	4628      	mov	r0, r5
    af9e:	2215      	movs	r2, #21
    afa0:	4639      	mov	r1, r7
    afa2:	f01f f8e9 	bl	2a178 <bt_gatt_check_perm>
    afa6:	4605      	mov	r5, r0
    afa8:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    afaa:	b150      	cbz	r0, afc2 <read_type_cb+0x42>
		if (data->rsp->len) {
    afac:	68e3      	ldr	r3, [r4, #12]
    afae:	781b      	ldrb	r3, [r3, #0]
    afb0:	b923      	cbnz	r3, afbc <read_type_cb+0x3c>
		return BT_GATT_ITER_STOP;
    afb2:	2500      	movs	r5, #0
}
    afb4:	4628      	mov	r0, r5
    afb6:	b003      	add	sp, #12
    afb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
    afbc:	f884 8014 	strb.w	r8, [r4, #20]
    afc0:	e7f7      	b.n	afb2 <read_type_cb+0x32>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    afc2:	68a0      	ldr	r0, [r4, #8]
    afc4:	f014 f822 	bl	1f00c <net_buf_frag_last>
    afc8:	2102      	movs	r1, #2
    afca:	3008      	adds	r0, #8
    afcc:	f014 f912 	bl	1f1f4 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    afd0:	4b13      	ldr	r3, [pc, #76]	; (b020 <read_type_cb+0xa0>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    afd2:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    afd4:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
    afd6:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    afda:	4639      	mov	r1, r7
    afdc:	9300      	str	r3, [sp, #0]
    afde:	9401      	str	r4, [sp, #4]
    afe0:	462b      	mov	r3, r5
    afe2:	4630      	mov	r0, r6
    afe4:	f01e fbe7 	bl	297b6 <att_chan_read>
	if (read < 0) {
    afe8:	2800      	cmp	r0, #0
    afea:	da07      	bge.n	affc <read_type_cb+0x7c>
	if (err < 0 && err >= -0xff) {
    afec:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
    aff0:	bf26      	itte	cs
    aff2:	4240      	negcs	r0, r0
    aff4:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    aff6:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
    aff8:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    affa:	e7db      	b.n	afb4 <read_type_cb+0x34>
	if (!data->item) {
    affc:	6923      	ldr	r3, [r4, #16]
    affe:	2b00      	cmp	r3, #0
    b000:	d0d7      	beq.n	afb2 <read_type_cb+0x32>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    b002:	68a0      	ldr	r0, [r4, #8]
    b004:	f01e fb56 	bl	296b4 <net_buf_frags_len>
    b008:	f8b6 505e 	ldrh.w	r5, [r6, #94]	; 0x5e
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    b00c:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    b00e:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    b010:	7818      	ldrb	r0, [r3, #0]
    b012:	4285      	cmp	r5, r0
    b014:	bf94      	ite	ls
    b016:	2500      	movls	r5, #0
    b018:	2501      	movhi	r5, #1
    b01a:	e7cb      	b.n	afb4 <read_type_cb+0x34>
		return BT_GATT_ITER_CONTINUE;
    b01c:	2501      	movs	r5, #1
    b01e:	e7c9      	b.n	afb4 <read_type_cb+0x34>
    b020:	000296d1 	.word	0x000296d1

0000b024 <find_type_cb>:
{
    b024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
    b028:	f8d2 8000 	ldr.w	r8, [r2]
{
    b02c:	b093      	sub	sp, #76	; 0x4c
    b02e:	4607      	mov	r7, r0
    b030:	460d      	mov	r5, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    b032:	2600      	movs	r6, #0
    b034:	f642 0301 	movw	r3, #10241	; 0x2801
    b038:	a902      	add	r1, sp, #8
    b03a:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
    b03c:	f8d8 9008 	ldr.w	r9, [r8, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    b040:	f88d 6008 	strb.w	r6, [sp, #8]
{
    b044:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    b046:	f8ad 300a 	strh.w	r3, [sp, #10]
    b04a:	f01e f81d 	bl	29088 <bt_uuid_cmp>
    b04e:	2800      	cmp	r0, #0
    b050:	d061      	beq.n	b116 <find_type_cb+0xf2>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    b052:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    b056:	a903      	add	r1, sp, #12
    b058:	6838      	ldr	r0, [r7, #0]
    b05a:	f88d 600c 	strb.w	r6, [sp, #12]
    b05e:	f8ad 300e 	strh.w	r3, [sp, #14]
    b062:	f01e f811 	bl	29088 <bt_uuid_cmp>
    b066:	b138      	cbz	r0, b078 <find_type_cb+0x54>
		if (data->group &&
    b068:	68a3      	ldr	r3, [r4, #8]
    b06a:	b11b      	cbz	r3, b074 <find_type_cb+0x50>
    b06c:	885a      	ldrh	r2, [r3, #2]
    b06e:	42aa      	cmp	r2, r5
    b070:	d200      	bcs.n	b074 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
    b072:	805d      	strh	r5, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    b074:	2001      	movs	r0, #1
    b076:	e009      	b.n	b08c <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
    b078:	6861      	ldr	r1, [r4, #4]
    b07a:	4608      	mov	r0, r1
    b07c:	f01e fb1a 	bl	296b4 <net_buf_frags_len>
    b080:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
    b084:	1a18      	subs	r0, r3, r0
    b086:	2803      	cmp	r0, #3
    b088:	d803      	bhi.n	b092 <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
    b08a:	2000      	movs	r0, #0
}
    b08c:	b013      	add	sp, #76	; 0x4c
    b08e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
    b092:	4608      	mov	r0, r1
    b094:	f013 ffba 	bl	1f00c <net_buf_frag_last>
    b098:	4606      	mov	r6, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
    b09a:	6860      	ldr	r0, [r4, #4]
    b09c:	f01e fb0a 	bl	296b4 <net_buf_frags_len>
    b0a0:	f8b8 a05e 	ldrh.w	sl, [r8, #94]	; 0x5e
	return net_buf_simple_tailroom(&buf->b);
    b0a4:	f106 0b08 	add.w	fp, r6, #8
    b0a8:	ebaa 0a00 	sub.w	sl, sl, r0
    b0ac:	4658      	mov	r0, fp
    b0ae:	f021 fc90 	bl	2c9d2 <net_buf_simple_tailroom>
    b0b2:	4582      	cmp	sl, r0
    b0b4:	d232      	bcs.n	b11c <find_type_cb+0xf8>
    b0b6:	6860      	ldr	r0, [r4, #4]
    b0b8:	f01e fafc 	bl	296b4 <net_buf_frags_len>
    b0bc:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
    b0c0:	1a18      	subs	r0, r3, r0
	if (!len) {
    b0c2:	b970      	cbnz	r0, b0e2 <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
    b0c4:	6863      	ldr	r3, [r4, #4]
    b0c6:	7998      	ldrb	r0, [r3, #6]
    b0c8:	f013 fd30 	bl	1eb2c <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
    b0cc:	2200      	movs	r2, #0
    b0ce:	2300      	movs	r3, #0
    b0d0:	f021 fc13 	bl	2c8fa <net_buf_alloc_fixed>
		if (!frag) {
    b0d4:	4606      	mov	r6, r0
    b0d6:	2800      	cmp	r0, #0
    b0d8:	d0d7      	beq.n	b08a <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
    b0da:	4601      	mov	r1, r0
    b0dc:	6860      	ldr	r0, [r4, #4]
    b0de:	f013 ffd5 	bl	1f08c <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    b0e2:	2300      	movs	r3, #0
    b0e4:	9300      	str	r3, [sp, #0]
    b0e6:	2310      	movs	r3, #16
    b0e8:	f8d7 8004 	ldr.w	r8, [r7, #4]
    b0ec:	4639      	mov	r1, r7
    b0ee:	eb0d 0203 	add.w	r2, sp, r3
    b0f2:	4648      	mov	r0, r9
    b0f4:	47c0      	blx	r8
	if (read < 0) {
    b0f6:	1e07      	subs	r7, r0, #0
    b0f8:	db0d      	blt.n	b116 <find_type_cb+0xf2>
	if (read != data->value_len) {
    b0fa:	7c22      	ldrb	r2, [r4, #16]
    b0fc:	68e0      	ldr	r0, [r4, #12]
    b0fe:	42ba      	cmp	r2, r7
    b100:	d02b      	beq.n	b15a <find_type_cb+0x136>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
    b102:	4601      	mov	r1, r0
    b104:	a80d      	add	r0, sp, #52	; 0x34
    b106:	f01d ffe9 	bl	290dc <bt_uuid_create>
    b10a:	b958      	cbnz	r0, b124 <find_type_cb+0x100>
			BT_WARN("Unable to create UUID: size %u", data->value_len);
    b10c:	7c22      	ldrb	r2, [r4, #16]
    b10e:	4815      	ldr	r0, [pc, #84]	; (b164 <find_type_cb+0x140>)
    b110:	2157      	movs	r1, #87	; 0x57
			BT_WARN("Unable to create UUID: size %d", read);
    b112:	f01b ff2c 	bl	26f6e <printk>
	data->group = NULL;
    b116:	2300      	movs	r3, #0
    b118:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
    b11a:	e7ab      	b.n	b074 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
    b11c:	4658      	mov	r0, fp
    b11e:	f021 fc58 	bl	2c9d2 <net_buf_simple_tailroom>
    b122:	e7ce      	b.n	b0c2 <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
    b124:	b2fa      	uxtb	r2, r7
    b126:	a904      	add	r1, sp, #16
    b128:	a808      	add	r0, sp, #32
    b12a:	f01d ffd7 	bl	290dc <bt_uuid_create>
    b12e:	b918      	cbnz	r0, b138 <find_type_cb+0x114>
			BT_WARN("Unable to create UUID: size %d", read);
    b130:	463a      	mov	r2, r7
    b132:	2157      	movs	r1, #87	; 0x57
    b134:	480c      	ldr	r0, [pc, #48]	; (b168 <find_type_cb+0x144>)
    b136:	e7ec      	b.n	b112 <find_type_cb+0xee>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
    b138:	a908      	add	r1, sp, #32
    b13a:	a80d      	add	r0, sp, #52	; 0x34
    b13c:	f01d ffa4 	bl	29088 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
    b140:	2800      	cmp	r0, #0
    b142:	d1e8      	bne.n	b116 <find_type_cb+0xf2>
	data->err = 0x00;
    b144:	2300      	movs	r3, #0
    b146:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
    b148:	2104      	movs	r1, #4
    b14a:	f106 0008 	add.w	r0, r6, #8
    b14e:	f014 f851 	bl	1f1f4 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
    b152:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
    b154:	8005      	strh	r5, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    b156:	8045      	strh	r5, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
    b158:	e78c      	b.n	b074 <find_type_cb+0x50>
	} else if (memcmp(data->value, uuid, read)) {
    b15a:	a904      	add	r1, sp, #16
    b15c:	f022 fa04 	bl	2d568 <memcmp>
    b160:	e7ee      	b.n	b140 <find_type_cb+0x11c>
    b162:	bf00      	nop
    b164:	00031558 	.word	0x00031558
    b168:	0003157c 	.word	0x0003157c

0000b16c <chan_send>:
{
    b16c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    b170:	688b      	ldr	r3, [r1, #8]
    b172:	781b      	ldrb	r3, [r3, #0]
    b174:	2bd2      	cmp	r3, #210	; 0xd2
{
    b176:	4605      	mov	r5, r0
    b178:	460c      	mov	r4, r1
    b17a:	4691      	mov	r9, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    b17c:	d110      	bne.n	b1a0 <chan_send+0x34>
		err = bt_smp_sign(chan->att->conn, buf);
    b17e:	6803      	ldr	r3, [r0, #0]
    b180:	6818      	ldr	r0, [r3, #0]
    b182:	f01f f867 	bl	2a254 <bt_smp_sign>
		if (err) {
    b186:	4606      	mov	r6, r0
    b188:	b150      	cbz	r0, b1a0 <chan_send+0x34>
			BT_ERR("Error signing data");
    b18a:	2145      	movs	r1, #69	; 0x45
    b18c:	4824      	ldr	r0, [pc, #144]	; (b220 <chan_send+0xb4>)
    b18e:	f01b feee 	bl	26f6e <printk>
		net_buf_unref(buf);
    b192:	4620      	mov	r0, r4
    b194:	f013 fede 	bl	1ef54 <net_buf_unref>
}
    b198:	4630      	mov	r0, r6
    b19a:	b003      	add	sp, #12
    b19c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
    b1a0:	f104 0008 	add.w	r0, r4, #8
    b1a4:	f021 fc11 	bl	2c9ca <net_buf_simple_headroom>
	state->len = buf->len;
    b1a8:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    b1ac:	4607      	mov	r7, r0
	chan->sent = cb ? cb : chan_cb(buf);
    b1ae:	f1b9 0f00 	cmp.w	r9, #0
    b1b2:	d10a      	bne.n	b1ca <chan_send+0x5e>
	switch (att_op_get_type(buf->data[0])) {
    b1b4:	68a3      	ldr	r3, [r4, #8]
    b1b6:	7818      	ldrb	r0, [r3, #0]
    b1b8:	f01e fa9c 	bl	296f4 <att_op_get_type>
    b1bc:	3801      	subs	r0, #1
    b1be:	b2c0      	uxtb	r0, r0
    b1c0:	2804      	cmp	r0, #4
    b1c2:	bf9c      	itt	ls
    b1c4:	4b17      	ldrls	r3, [pc, #92]	; (b224 <chan_send+0xb8>)
    b1c6:	f853 9020 	ldrls.w	r9, [r3, r0, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    b1ca:	682b      	ldr	r3, [r5, #0]
	chan->sent = cb ? cb : chan_cb(buf);
    b1cc:	f8c5 9138 	str.w	r9, [r5, #312]	; 0x138
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    b1d0:	4620      	mov	r0, r4
    b1d2:	681e      	ldr	r6, [r3, #0]
    b1d4:	f013 ff02 	bl	1efdc <net_buf_ref>
    b1d8:	f8d5 1138 	ldr.w	r1, [r5, #312]	; 0x138
	if (cb == chan_rsp_sent) {
    b1dc:	4b12      	ldr	r3, [pc, #72]	; (b228 <chan_send+0xbc>)
    b1de:	4299      	cmp	r1, r3
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    b1e0:	4602      	mov	r2, r0
	if (cb == chan_rsp_sent) {
    b1e2:	d019      	beq.n	b218 <chan_send+0xac>
	} else if (cb == chan_cfm_sent) {
    b1e4:	4b11      	ldr	r3, [pc, #68]	; (b22c <chan_send+0xc0>)
    b1e6:	4299      	cmp	r1, r3
    b1e8:	d018      	beq.n	b21c <chan_send+0xb0>
		return att_sent;
    b1ea:	f8df c054 	ldr.w	ip, [pc, #84]	; b240 <chan_send+0xd4>
    b1ee:	4b10      	ldr	r3, [pc, #64]	; (b230 <chan_send+0xc4>)
    b1f0:	4810      	ldr	r0, [pc, #64]	; (b234 <chan_send+0xc8>)
    b1f2:	4561      	cmp	r1, ip
    b1f4:	bf18      	it	ne
    b1f6:	4603      	movne	r3, r0
				&chan->chan.chan);
    b1f8:	3508      	adds	r5, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    b1fa:	4630      	mov	r0, r6
    b1fc:	9500      	str	r5, [sp, #0]
    b1fe:	2104      	movs	r1, #4
    b200:	f01e fa03 	bl	2960a <bt_l2cap_send_cb>
	if (!err) {
    b204:	4606      	mov	r6, r0
    b206:	2800      	cmp	r0, #0
    b208:	d0c3      	beq.n	b192 <chan_send+0x26>
	buf->data = buf->__buf + state->offset;
    b20a:	6923      	ldr	r3, [r4, #16]
	buf->len = state->len;
    b20c:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    b210:	fa13 f787 	uxtah	r7, r3, r7
    b214:	60a7      	str	r7, [r4, #8]
	buf->len = state->len;
    b216:	e7bf      	b.n	b198 <chan_send+0x2c>
		return att_rsp_sent;
    b218:	4b07      	ldr	r3, [pc, #28]	; (b238 <chan_send+0xcc>)
    b21a:	e7ed      	b.n	b1f8 <chan_send+0x8c>
		return att_cfm_sent;
    b21c:	4b07      	ldr	r3, [pc, #28]	; (b23c <chan_send+0xd0>)
    b21e:	e7eb      	b.n	b1f8 <chan_send+0x8c>
    b220:	00031540 	.word	0x00031540
    b224:	0002ecf8 	.word	0x0002ecf8
    b228:	000299c5 	.word	0x000299c5
    b22c:	000299e1 	.word	0x000299e1
    b230:	0000aead 	.word	0x0000aead
    b234:	000296c5 	.word	0x000296c5
    b238:	0000ae9d 	.word	0x0000ae9d
    b23c:	0000ae8d 	.word	0x0000ae8d
    b240:	0000b349 	.word	0x0000b349

0000b244 <att_get>:
	if (conn->state != BT_CONN_CONNECTED) {
    b244:	7a83      	ldrb	r3, [r0, #10]
    b246:	2b07      	cmp	r3, #7
{
    b248:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    b24a:	d005      	beq.n	b258 <att_get+0x14>
		BT_WARN("Not connected");
    b24c:	480d      	ldr	r0, [pc, #52]	; (b284 <att_get+0x40>)
    b24e:	2157      	movs	r1, #87	; 0x57
		BT_WARN("ATT channel flagged as disconnected");
    b250:	f01b fe8d 	bl	26f6e <printk>
		return NULL;
    b254:	2400      	movs	r4, #0
    b256:	e008      	b.n	b26a <att_get+0x26>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    b258:	2104      	movs	r1, #4
    b25a:	f01e f9fa 	bl	29652 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    b25e:	4604      	mov	r4, r0
    b260:	b928      	cbnz	r0, b26e <att_get+0x2a>
		BT_ERR("Unable to find ATT channel");
    b262:	2145      	movs	r1, #69	; 0x45
    b264:	4808      	ldr	r0, [pc, #32]	; (b288 <att_get+0x44>)
    b266:	f01b fe82 	bl	26f6e <printk>
}
    b26a:	4620      	mov	r0, r4
    b26c:	bd10      	pop	{r4, pc}
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
    b26e:	2102      	movs	r1, #2
    b270:	30c0      	adds	r0, #192	; 0xc0
    b272:	f01e fa8c 	bl	2978e <atomic_test_bit>
    b276:	b110      	cbz	r0, b27e <att_get+0x3a>
		BT_WARN("ATT channel flagged as disconnected");
    b278:	2157      	movs	r1, #87	; 0x57
    b27a:	4804      	ldr	r0, [pc, #16]	; (b28c <att_get+0x48>)
    b27c:	e7e8      	b.n	b250 <att_get+0xc>
	return att_chan->att;
    b27e:	f854 4c08 	ldr.w	r4, [r4, #-8]
    b282:	e7f2      	b.n	b26a <att_get+0x26>
    b284:	00031342 	.word	0x00031342
    b288:	00031355 	.word	0x00031355
    b28c:	00031375 	.word	0x00031375

0000b290 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
    b290:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    b292:	2300      	movs	r3, #0
{
    b294:	4607      	mov	r7, r0
    b296:	460e      	mov	r6, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    b298:	2200      	movs	r2, #0
    b29a:	4669      	mov	r1, sp
    b29c:	4825      	ldr	r0, [pc, #148]	; (b334 <bt_att_accept+0xa4>)
    b29e:	f016 ff4d 	bl	2213c <k_mem_slab_alloc>
    b2a2:	4605      	mov	r5, r0
    b2a4:	b148      	cbz	r0, b2ba <bt_att_accept+0x2a>
		BT_ERR("No available ATT context for conn %p", conn);
    b2a6:	4824      	ldr	r0, [pc, #144]	; (b338 <bt_att_accept+0xa8>)
    b2a8:	463a      	mov	r2, r7
    b2aa:	2145      	movs	r1, #69	; 0x45
		BT_ERR("No available ATT channel for conn %p", att->conn);
    b2ac:	f01b fe5f 	bl	26f6e <printk>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
    b2b0:	f06f 050b 	mvn.w	r5, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
    b2b4:	4628      	mov	r0, r5
    b2b6:	b003      	add	sp, #12
    b2b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
__ssp_bos_icheck3(memset, void *, int)
    b2ba:	4601      	mov	r1, r0
    b2bc:	2230      	movs	r2, #48	; 0x30
    b2be:	9800      	ldr	r0, [sp, #0]
    b2c0:	f022 f99b 	bl	2d5fa <memset>
	att->conn = conn;
    b2c4:	9c00      	ldr	r4, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    b2c6:	481d      	ldr	r0, [pc, #116]	; (b33c <bt_att_accept+0xac>)
	list->tail = NULL;
    b2c8:	60a5      	str	r5, [r4, #8]
	list->head = NULL;
    b2ca:	e9c4 7500 	strd	r7, r5, [r4]
	list->tail = NULL;
    b2ce:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
    b2d2:	2200      	movs	r2, #0
    b2d4:	2300      	movs	r3, #0
    b2d6:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
    b2d8:	9501      	str	r5, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    b2da:	f016 ff2f 	bl	2213c <k_mem_slab_alloc>
    b2de:	4605      	mov	r5, r0
    b2e0:	b118      	cbz	r0, b2ea <bt_att_accept+0x5a>
		BT_ERR("No available ATT channel for conn %p", att->conn);
    b2e2:	6822      	ldr	r2, [r4, #0]
    b2e4:	4816      	ldr	r0, [pc, #88]	; (b340 <bt_att_accept+0xb0>)
    b2e6:	2145      	movs	r1, #69	; 0x45
    b2e8:	e7e0      	b.n	b2ac <bt_att_accept+0x1c>
    b2ea:	4601      	mov	r1, r0
    b2ec:	f44f 72a0 	mov.w	r2, #320	; 0x140
    b2f0:	9801      	ldr	r0, [sp, #4]
    b2f2:	f022 f982 	bl	2d5fa <memset>
	chan->chan.chan.ops = &ops;
    b2f6:	9801      	ldr	r0, [sp, #4]
    b2f8:	4b12      	ldr	r3, [pc, #72]	; (b344 <bt_att_accept+0xb4>)
    b2fa:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
    b2fc:	30d0      	adds	r0, #208	; 0xd0
    b2fe:	f021 ffa6 	bl	2d24e <z_impl_k_queue_init>
	k_sem_init(&chan->tx_sem, CONFIG_BT_ATT_TX_MAX, CONFIG_BT_ATT_TX_MAX);
    b302:	9801      	ldr	r0, [sp, #4]
    b304:	f500 7090 	add.w	r0, r0, #288	; 0x120
	return z_impl_k_sem_init(sem, initial_count, limit);
    b308:	2208      	movs	r2, #8
    b30a:	4611      	mov	r1, r2
    b30c:	f022 f805 	bl	2d31a <z_impl_k_sem_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    b310:	9b01      	ldr	r3, [sp, #4]
    b312:	f3bf 8f5b 	dmb	ish
    b316:	33c8      	adds	r3, #200	; 0xc8
    b318:	e853 2f00 	ldrex	r2, [r3]
    b31c:	e843 5100 	strex	r1, r5, [r3]
    b320:	2900      	cmp	r1, #0
    b322:	d1f9      	bne.n	b318 <bt_att_accept+0x88>
    b324:	f3bf 8f5b 	dmb	ish
	chan->att = att;
    b328:	9b01      	ldr	r3, [sp, #4]
    b32a:	f843 4b08 	str.w	r4, [r3], #8
	*ch = &chan->chan.chan;
    b32e:	6033      	str	r3, [r6, #0]
	return 0;
    b330:	e7c0      	b.n	b2b4 <bt_att_accept+0x24>
    b332:	bf00      	nop
    b334:	20001210 	.word	0x20001210
    b338:	000313cb 	.word	0x000313cb
    b33c:	2000122c 	.word	0x2000122c
    b340:	000313f5 	.word	0x000313f5
    b344:	20000784 	.word	0x20000784

0000b348 <chan_req_sent>:
	if (chan->req) {
    b348:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
    b34c:	b13b      	cbz	r3, b35e <chan_req_sent+0x16>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    b34e:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
    b352:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    b356:	2300      	movs	r3, #0
    b358:	4801      	ldr	r0, [pc, #4]	; (b360 <chan_req_sent+0x18>)
    b35a:	f018 bd1d 	b.w	23d98 <k_delayed_work_submit_to_queue>
}
    b35e:	4770      	bx	lr
    b360:	20002490 	.word	0x20002490

0000b364 <bt_att_chan_send_rsp.constprop.24>:
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
    b364:	b538      	push	{r3, r4, r5, lr}
	return chan_send(chan, buf, cb);
    b366:	4a07      	ldr	r2, [pc, #28]	; (b384 <bt_att_chan_send_rsp.constprop.24+0x20>)
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
    b368:	4604      	mov	r4, r0
    b36a:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
    b36c:	f7ff fefe 	bl	b16c <chan_send>
	if (err) {
    b370:	b130      	cbz	r0, b380 <bt_att_chan_send_rsp.constprop.24+0x1c>
		net_buf_put(&chan->tx_queue, buf);
    b372:	4629      	mov	r1, r5
    b374:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
}
    b378:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
    b37c:	f013 bdbc 	b.w	1eef8 <net_buf_put>
}
    b380:	bd38      	pop	{r3, r4, r5, pc}
    b382:	bf00      	nop
    b384:	000299c5 	.word	0x000299c5

0000b388 <bt_att_connected>:
{
    b388:	b538      	push	{r3, r4, r5, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    b38a:	2104      	movs	r1, #4
{
    b38c:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    b38e:	6800      	ldr	r0, [r0, #0]
    b390:	f01e f954 	bl	2963c <bt_l2cap_le_lookup_tx_cid>
	__ASSERT(chan, "No ATT channel found");
    b394:	4605      	mov	r5, r0
    b396:	b950      	cbnz	r0, b3ae <bt_att_connected+0x26>
    b398:	4918      	ldr	r1, [pc, #96]	; (b3fc <bt_att_connected+0x74>)
    b39a:	4819      	ldr	r0, [pc, #100]	; (b400 <bt_att_connected+0x78>)
    b39c:	f640 2248 	movw	r2, #2632	; 0xa48
    b3a0:	f01b fde5 	bl	26f6e <printk>
    b3a4:	f640 2148 	movw	r1, #2632	; 0xa48
    b3a8:	4814      	ldr	r0, [pc, #80]	; (b3fc <bt_att_connected+0x74>)
    b3aa:	f01c f859 	bl	27460 <assert_post_action>
	struct bt_att *att = att_chan->att;
    b3ae:	f855 5c08 	ldr.w	r5, [r5, #-8]
	if (sys_slist_is_empty(&att->chans)) {
    b3b2:	6aab      	ldr	r3, [r5, #40]	; 0x28
    b3b4:	b91b      	cbnz	r3, b3be <bt_att_connected+0x36>
	z_impl_k_queue_init(queue);
    b3b6:	f105 000c 	add.w	r0, r5, #12
    b3ba:	f021 ff48 	bl	2d24e <z_impl_k_queue_init>
Z_GENLIST_PREPEND(slist, snode)
    b3be:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	parent->next = child;
    b3c0:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
Z_GENLIST_PREPEND(slist, snode)
    b3c4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
	sys_slist_prepend(&att->chans, &chan->node);
    b3c6:	f504 739a 	add.w	r3, r4, #308	; 0x134
	list->head = node;
    b3ca:	62ab      	str	r3, [r5, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
    b3cc:	b902      	cbnz	r2, b3d0 <bt_att_connected+0x48>
	list->tail = node;
    b3ce:	62eb      	str	r3, [r5, #44]	; 0x2c
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
    b3d0:	2103      	movs	r1, #3
    b3d2:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    b3d6:	f01e f9da 	bl	2978e <atomic_test_bit>
    b3da:	b920      	cbnz	r0, b3e6 <bt_att_connected+0x5e>
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    b3dc:	2317      	movs	r3, #23
    b3de:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    b3e2:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    b3e6:	2230      	movs	r2, #48	; 0x30
    b3e8:	2100      	movs	r1, #0
    b3ea:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
    b3ee:	f022 f904 	bl	2d5fa <memset>
    b3f2:	4b04      	ldr	r3, [pc, #16]	; (b404 <bt_att_connected+0x7c>)
    b3f4:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
}
    b3f8:	bd38      	pop	{r3, r4, r5, pc}
    b3fa:	bf00      	nop
    b3fc:	00031449 	.word	0x00031449
    b400:	0002fa94 	.word	0x0002fa94
    b404:	0000bd29 	.word	0x0000bd29

0000b408 <bt_att_chan_req_send>:
{
    b408:	b570      	push	{r4, r5, r6, lr}
    b40a:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(chan);
    b40c:	4604      	mov	r4, r0
    b40e:	b950      	cbnz	r0, b426 <bt_att_chan_req_send+0x1e>
    b410:	4924      	ldr	r1, [pc, #144]	; (b4a4 <bt_att_chan_req_send+0x9c>)
    b412:	4825      	ldr	r0, [pc, #148]	; (b4a8 <bt_att_chan_req_send+0xa0>)
    b414:	f240 2237 	movw	r2, #567	; 0x237
    b418:	f01b fda9 	bl	26f6e <printk>
    b41c:	f240 2137 	movw	r1, #567	; 0x237
    b420:	4820      	ldr	r0, [pc, #128]	; (b4a4 <bt_att_chan_req_send+0x9c>)
    b422:	f01c f81d 	bl	27460 <assert_post_action>
	__ASSERT_NO_MSG(req);
    b426:	b955      	cbnz	r5, b43e <bt_att_chan_req_send+0x36>
    b428:	491e      	ldr	r1, [pc, #120]	; (b4a4 <bt_att_chan_req_send+0x9c>)
    b42a:	481f      	ldr	r0, [pc, #124]	; (b4a8 <bt_att_chan_req_send+0xa0>)
    b42c:	f44f 720e 	mov.w	r2, #568	; 0x238
    b430:	f01b fd9d 	bl	26f6e <printk>
    b434:	f44f 710e 	mov.w	r1, #568	; 0x238
    b438:	481a      	ldr	r0, [pc, #104]	; (b4a4 <bt_att_chan_req_send+0x9c>)
    b43a:	f01c f811 	bl	27460 <assert_post_action>
	__ASSERT_NO_MSG(req->func);
    b43e:	686b      	ldr	r3, [r5, #4]
    b440:	b953      	cbnz	r3, b458 <bt_att_chan_req_send+0x50>
    b442:	4918      	ldr	r1, [pc, #96]	; (b4a4 <bt_att_chan_req_send+0x9c>)
    b444:	4818      	ldr	r0, [pc, #96]	; (b4a8 <bt_att_chan_req_send+0xa0>)
    b446:	f240 2239 	movw	r2, #569	; 0x239
    b44a:	f01b fd90 	bl	26f6e <printk>
    b44e:	f240 2139 	movw	r1, #569	; 0x239
    b452:	4814      	ldr	r0, [pc, #80]	; (b4a4 <bt_att_chan_req_send+0x9c>)
    b454:	f01c f804 	bl	27460 <assert_post_action>
	__ASSERT_NO_MSG(!chan->req);
    b458:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
    b45c:	b153      	cbz	r3, b474 <bt_att_chan_req_send+0x6c>
    b45e:	4911      	ldr	r1, [pc, #68]	; (b4a4 <bt_att_chan_req_send+0x9c>)
    b460:	4811      	ldr	r0, [pc, #68]	; (b4a8 <bt_att_chan_req_send+0xa0>)
    b462:	f240 223a 	movw	r2, #570	; 0x23a
    b466:	f01b fd82 	bl	26f6e <printk>
    b46a:	f240 213a 	movw	r1, #570	; 0x23a
    b46e:	480d      	ldr	r0, [pc, #52]	; (b4a4 <bt_att_chan_req_send+0x9c>)
    b470:	f01b fff6 	bl	27460 <assert_post_action>
	if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
    b474:	f504 7690 	add.w	r6, r4, #288	; 0x120
	return z_impl_k_sem_take(sem, timeout);
    b478:	2200      	movs	r2, #0
    b47a:	2300      	movs	r3, #0
    b47c:	4630      	mov	r0, r6
    b47e:	f018 fa59 	bl	23934 <z_impl_k_sem_take>
    b482:	2800      	cmp	r0, #0
    b484:	db0a      	blt.n	b49c <bt_att_chan_req_send+0x94>
	err = chan_req_send(chan, req);
    b486:	4620      	mov	r0, r4
    b488:	4629      	mov	r1, r5
    b48a:	f01e fab7 	bl	299fc <chan_req_send>
	if (err < 0) {
    b48e:	1e04      	subs	r4, r0, #0
    b490:	da02      	bge.n	b498 <bt_att_chan_req_send+0x90>
	z_impl_k_sem_give(sem);
    b492:	4630      	mov	r0, r6
    b494:	f018 fa12 	bl	238bc <z_impl_k_sem_give>
}
    b498:	4620      	mov	r0, r4
    b49a:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
    b49c:	f06f 040a 	mvn.w	r4, #10
    b4a0:	e7fa      	b.n	b498 <bt_att_chan_req_send+0x90>
    b4a2:	bf00      	nop
    b4a4:	00031449 	.word	0x00031449
    b4a8:	0002fa94 	.word	0x0002fa94

0000b4ac <att_write_cmd>:
{
    b4ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    b4ae:	4604      	mov	r4, r0
    b4b0:	b087      	sub	sp, #28
	return net_buf_simple_pull_le16(&buf->b);
    b4b2:	f101 0008 	add.w	r0, r1, #8
    b4b6:	460d      	mov	r5, r1
    b4b8:	f021 fa55 	bl	2c966 <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    b4bc:	6823      	ldr	r3, [r4, #0]
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
    b4be:	68af      	ldr	r7, [r5, #8]
    b4c0:	89ad      	ldrh	r5, [r5, #12]
    b4c2:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    b4c4:	2100      	movs	r1, #0
    b4c6:	6818      	ldr	r0, [r3, #0]
    b4c8:	f01e fe79 	bl	2a1be <bt_gatt_change_aware>
    b4cc:	b1f8      	cbz	r0, b50e <att_write_cmd+0x62>
	if (!handle) {
    b4ce:	b306      	cbz	r6, b512 <att_write_cmd+0x66>
	(void)memset(&data, 0, sizeof(data));
    b4d0:	2214      	movs	r2, #20
    b4d2:	2100      	movs	r1, #0
    b4d4:	a801      	add	r0, sp, #4
    b4d6:	f022 f890 	bl	2d5fa <memset>
	data.conn = chan->att->conn;
    b4da:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    b4dc:	4a0e      	ldr	r2, [pc, #56]	; (b518 <att_write_cmd+0x6c>)
	data.conn = chan->att->conn;
    b4de:	681b      	ldr	r3, [r3, #0]
    b4e0:	9300      	str	r3, [sp, #0]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    b4e2:	2301      	movs	r3, #1
    b4e4:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    b4e8:	4631      	mov	r1, r6
    b4ea:	466b      	mov	r3, sp
    b4ec:	4630      	mov	r0, r6
	data.value = value;
    b4ee:	9703      	str	r7, [sp, #12]
	data.len = len;
    b4f0:	f8ad 5010 	strh.w	r5, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    b4f4:	f01e f954 	bl	297a0 <bt_gatt_foreach_attr>
	if (data.err) {
    b4f8:	f89d 3014 	ldrb.w	r3, [sp, #20]
    b4fc:	b923      	cbnz	r3, b508 <att_write_cmd+0x5c>
	if (data.buf) {
    b4fe:	9901      	ldr	r1, [sp, #4]
    b500:	b111      	cbz	r1, b508 <att_write_cmd+0x5c>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    b502:	4620      	mov	r0, r4
    b504:	f7ff ff2e 	bl	b364 <bt_att_chan_send_rsp.constprop.24>
    b508:	2000      	movs	r0, #0
}
    b50a:	b007      	add	sp, #28
    b50c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    b50e:	2012      	movs	r0, #18
    b510:	e7fb      	b.n	b50a <att_write_cmd+0x5e>
		return BT_ATT_ERR_INVALID_HANDLE;
    b512:	2001      	movs	r0, #1
    b514:	e7f9      	b.n	b50a <att_write_cmd+0x5e>
    b516:	bf00      	nop
    b518:	00029a8d 	.word	0x00029a8d

0000b51c <bt_att_chan_create_pdu>:
{
    b51c:	b538      	push	{r3, r4, r5, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
    b51e:	1c53      	adds	r3, r2, #1
    b520:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
    b524:	4293      	cmp	r3, r2
{
    b526:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
    b528:	d906      	bls.n	b538 <bt_att_chan_create_pdu+0x1c>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    b52a:	2157      	movs	r1, #87	; 0x57
    b52c:	4813      	ldr	r0, [pc, #76]	; (b57c <bt_att_chan_create_pdu+0x60>)
    b52e:	f01b fd1e 	bl	26f6e <printk>
		return NULL;
    b532:	2400      	movs	r4, #0
}
    b534:	4620      	mov	r0, r4
    b536:	bd38      	pop	{r3, r4, r5, pc}
	switch (att_op_get_type(op)) {
    b538:	4608      	mov	r0, r1
    b53a:	f01e f8db 	bl	296f4 <att_op_get_type>
    b53e:	2802      	cmp	r0, #2
    b540:	d001      	beq.n	b546 <bt_att_chan_create_pdu+0x2a>
    b542:	2804      	cmp	r0, #4
    b544:	d10e      	bne.n	b564 <bt_att_chan_create_pdu+0x48>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
    b546:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    b54a:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
    b54c:	2100      	movs	r1, #0
    b54e:	4608      	mov	r0, r1
    b550:	f01e f858 	bl	29604 <bt_l2cap_create_pdu_timeout>
    b554:	4604      	mov	r4, r0
	if (!buf) {
    b556:	b950      	cbnz	r0, b56e <bt_att_chan_create_pdu+0x52>
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
    b558:	462a      	mov	r2, r5
    b55a:	2145      	movs	r1, #69	; 0x45
    b55c:	4808      	ldr	r0, [pc, #32]	; (b580 <bt_att_chan_create_pdu+0x64>)
    b55e:	f01b fd06 	bl	26f6e <printk>
		return NULL;
    b562:	e7e7      	b.n	b534 <bt_att_chan_create_pdu+0x18>
		buf = bt_l2cap_create_pdu(NULL, 0);
    b564:	f04f 32ff 	mov.w	r2, #4294967295
    b568:	f04f 33ff 	mov.w	r3, #4294967295
    b56c:	e7ee      	b.n	b54c <bt_att_chan_create_pdu+0x30>
	return net_buf_simple_add(&buf->b, len);
    b56e:	2101      	movs	r1, #1
    b570:	3008      	adds	r0, #8
    b572:	f013 fe3f 	bl	1f1f4 <net_buf_simple_add>
	hdr->code = op;
    b576:	7005      	strb	r5, [r0, #0]
	return buf;
    b578:	e7dc      	b.n	b534 <bt_att_chan_create_pdu+0x18>
    b57a:	bf00      	nop
    b57c:	0003141f 	.word	0x0003141f
    b580:	0003123d 	.word	0x0003123d

0000b584 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
    b584:	898b      	ldrh	r3, [r1, #12]
{
    b586:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b58a:	4604      	mov	r4, r0
    b58c:	4688      	mov	r8, r1
	if (buf->len < sizeof(*hdr)) {
    b58e:	b933      	cbnz	r3, b59e <bt_att_recv+0x1a>
		BT_ERR("Too small ATT PDU received");
    b590:	483c      	ldr	r0, [pc, #240]	; (b684 <bt_att_recv+0x100>)
    b592:	2145      	movs	r1, #69	; 0x45
			BT_WARN("Ignoring unexpected indication");
    b594:	f01b fceb 	bl	26f6e <printk>
}
    b598:	2000      	movs	r0, #0
    b59a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
    b59e:	2101      	movs	r1, #1
    b5a0:	f108 0008 	add.w	r0, r8, #8
    b5a4:	f013 fe08 	bl	1f1b8 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
    b5a8:	f854 3c08 	ldr.w	r3, [r4, #-8]
    b5ac:	4605      	mov	r5, r0
    b5ae:	2b00      	cmp	r3, #0
    b5b0:	d0f2      	beq.n	b598 <bt_att_recv+0x14>
		if (hdr->code == handlers[i].op) {
    b5b2:	4935      	ldr	r1, [pc, #212]	; (b688 <bt_att_recv+0x104>)
    b5b4:	7802      	ldrb	r2, [r0, #0]
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
    b5b6:	f1a4 0608 	sub.w	r6, r4, #8
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    b5ba:	2300      	movs	r3, #0
    b5bc:	4608      	mov	r0, r1
		if (hdr->code == handlers[i].op) {
    b5be:	f811 7033 	ldrb.w	r7, [r1, r3, lsl #3]
    b5c2:	4297      	cmp	r7, r2
    b5c4:	d117      	bne.n	b5f6 <bt_att_recv+0x72>
		if (handler->type == ATT_REQUEST &&
    b5c6:	00db      	lsls	r3, r3, #3
    b5c8:	4419      	add	r1, r3
    b5ca:	788f      	ldrb	r7, [r1, #2]
    b5cc:	2f01      	cmp	r7, #1
    b5ce:	d127      	bne.n	b620 <bt_att_recv+0x9c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b5d0:	f3bf 8f5b 	dmb	ish
    b5d4:	34c0      	adds	r4, #192	; 0xc0
    b5d6:	e854 2f00 	ldrex	r2, [r4]
    b5da:	f042 0101 	orr.w	r1, r2, #1
    b5de:	e844 1c00 	strex	ip, r1, [r4]
    b5e2:	f1bc 0f00 	cmp.w	ip, #0
    b5e6:	d1f6      	bne.n	b5d6 <bt_att_recv+0x52>
    b5e8:	f3bf 8f5b 	dmb	ish
    b5ec:	07d1      	lsls	r1, r2, #31
    b5ee:	d52c      	bpl.n	b64a <bt_att_recv+0xc6>
			BT_WARN("Ignoring unexpected request");
    b5f0:	2157      	movs	r1, #87	; 0x57
    b5f2:	4826      	ldr	r0, [pc, #152]	; (b68c <bt_att_recv+0x108>)
    b5f4:	e7ce      	b.n	b594 <bt_att_recv+0x10>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    b5f6:	3301      	adds	r3, #1
    b5f8:	2b0d      	cmp	r3, #13
    b5fa:	d1e0      	bne.n	b5be <bt_att_recv+0x3a>
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
    b5fc:	2157      	movs	r1, #87	; 0x57
    b5fe:	4824      	ldr	r0, [pc, #144]	; (b690 <bt_att_recv+0x10c>)
    b600:	f01b fcb5 	bl	26f6e <printk>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    b604:	7829      	ldrb	r1, [r5, #0]
    b606:	4608      	mov	r0, r1
    b608:	f01e f874 	bl	296f4 <att_op_get_type>
    b60c:	2800      	cmp	r0, #0
    b60e:	d0c3      	beq.n	b598 <bt_att_recv+0x14>
	if (!req) {
    b610:	2900      	cmp	r1, #0
    b612:	d0c1      	beq.n	b598 <bt_att_recv+0x14>
    b614:	2306      	movs	r3, #6
    b616:	2200      	movs	r2, #0
    b618:	4630      	mov	r0, r6
    b61a:	f01e facf 	bl	29bbc <send_err_rsp.part.12>
    b61e:	e7bb      	b.n	b598 <bt_att_recv+0x14>
		} else if (handler->type == ATT_INDICATION &&
    b620:	2f05      	cmp	r7, #5
    b622:	d112      	bne.n	b64a <bt_att_recv+0xc6>
    b624:	f3bf 8f5b 	dmb	ish
    b628:	34c0      	adds	r4, #192	; 0xc0
    b62a:	e854 2f00 	ldrex	r2, [r4]
    b62e:	f042 0102 	orr.w	r1, r2, #2
    b632:	e844 1c00 	strex	ip, r1, [r4]
    b636:	f1bc 0f00 	cmp.w	ip, #0
    b63a:	d1f6      	bne.n	b62a <bt_att_recv+0xa6>
    b63c:	f3bf 8f5b 	dmb	ish
    b640:	0792      	lsls	r2, r2, #30
    b642:	d502      	bpl.n	b64a <bt_att_recv+0xc6>
			BT_WARN("Ignoring unexpected indication");
    b644:	2157      	movs	r1, #87	; 0x57
    b646:	4813      	ldr	r0, [pc, #76]	; (b694 <bt_att_recv+0x110>)
    b648:	e7a4      	b.n	b594 <bt_att_recv+0x10>
	if (buf->len < handler->expect_len) {
    b64a:	4403      	add	r3, r0
    b64c:	f8b8 200c 	ldrh.w	r2, [r8, #12]
    b650:	7859      	ldrb	r1, [r3, #1]
    b652:	4291      	cmp	r1, r2
    b654:	d908      	bls.n	b668 <bt_att_recv+0xe4>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    b656:	782b      	ldrb	r3, [r5, #0]
    b658:	480f      	ldr	r0, [pc, #60]	; (b698 <bt_att_recv+0x114>)
    b65a:	2145      	movs	r1, #69	; 0x45
    b65c:	f01b fc87 	bl	26f6e <printk>
	if (handler->type == ATT_REQUEST && err) {
    b660:	2f01      	cmp	r7, #1
    b662:	d199      	bne.n	b598 <bt_att_recv+0x14>
		err = BT_ATT_ERR_INVALID_PDU;
    b664:	2304      	movs	r3, #4
    b666:	e008      	b.n	b67a <bt_att_recv+0xf6>
		err = handler->func(att_chan, buf);
    b668:	685b      	ldr	r3, [r3, #4]
    b66a:	4641      	mov	r1, r8
    b66c:	4630      	mov	r0, r6
    b66e:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    b670:	2f01      	cmp	r7, #1
		err = handler->func(att_chan, buf);
    b672:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    b674:	d190      	bne.n	b598 <bt_att_recv+0x14>
    b676:	2800      	cmp	r0, #0
    b678:	d08e      	beq.n	b598 <bt_att_recv+0x14>
		send_err_rsp(att_chan, hdr->code, 0, err);
    b67a:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
    b67c:	2900      	cmp	r1, #0
    b67e:	d08b      	beq.n	b598 <bt_att_recv+0x14>
    b680:	e7c9      	b.n	b616 <bt_att_recv+0x92>
    b682:	bf00      	nop
    b684:	00031498 	.word	0x00031498
    b688:	0002ed0c 	.word	0x0002ed0c
    b68c:	000314b8 	.word	0x000314b8
    b690:	00031521 	.word	0x00031521
    b694:	000314d9 	.word	0x000314d9
    b698:	000314fd 	.word	0x000314fd

0000b69c <att_write_req>:
{
    b69c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b6a0:	4605      	mov	r5, r0
    b6a2:	b087      	sub	sp, #28
	return net_buf_simple_pull_le16(&buf->b);
    b6a4:	f101 0008 	add.w	r0, r1, #8
    b6a8:	460c      	mov	r4, r1
    b6aa:	f021 f95c 	bl	2c966 <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    b6ae:	682b      	ldr	r3, [r5, #0]
			     handle, 0, buf->data, buf->len);
    b6b0:	f8d4 9008 	ldr.w	r9, [r4, #8]
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
    b6b4:	89a4      	ldrh	r4, [r4, #12]
    b6b6:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    b6b8:	2101      	movs	r1, #1
    b6ba:	6818      	ldr	r0, [r3, #0]
    b6bc:	f01e fd7f 	bl	2a1be <bt_gatt_change_aware>
    b6c0:	2800      	cmp	r0, #0
    b6c2:	d03f      	beq.n	b744 <att_write_req+0xa8>
	if (!handle) {
    b6c4:	2e00      	cmp	r6, #0
    b6c6:	d03f      	beq.n	b748 <att_write_req+0xac>
	(void)memset(&data, 0, sizeof(data));
    b6c8:	2218      	movs	r2, #24
    b6ca:	2100      	movs	r1, #0
    b6cc:	4668      	mov	r0, sp
    b6ce:	f021 ff94 	bl	2d5fa <memset>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
    b6d2:	2200      	movs	r2, #0
    b6d4:	2113      	movs	r1, #19
    b6d6:	4628      	mov	r0, r5
    b6d8:	f7ff ff20 	bl	b51c <bt_att_chan_create_pdu>
    b6dc:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    b6de:	b378      	cbz	r0, b740 <att_write_req+0xa4>
	data.conn = chan->att->conn;
    b6e0:	682b      	ldr	r3, [r5, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    b6e2:	4a1a      	ldr	r2, [pc, #104]	; (b74c <att_write_req+0xb0>)
	data.conn = chan->att->conn;
    b6e4:	681b      	ldr	r3, [r3, #0]
    b6e6:	9300      	str	r3, [sp, #0]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    b6e8:	2301      	movs	r3, #1
    b6ea:	f88d 3014 	strb.w	r3, [sp, #20]
	data.req = req;
    b6ee:	f04f 0812 	mov.w	r8, #18
	data.offset = offset;
    b6f2:	2700      	movs	r7, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    b6f4:	466b      	mov	r3, sp
    b6f6:	4631      	mov	r1, r6
    b6f8:	4630      	mov	r0, r6
	data.len = len;
    b6fa:	f8ad 4010 	strh.w	r4, [sp, #16]
	data.req = req;
    b6fe:	f88d 8008 	strb.w	r8, [sp, #8]
	data.offset = offset;
    b702:	f8ad 7012 	strh.w	r7, [sp, #18]
	data.value = value;
    b706:	f8cd 900c 	str.w	r9, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    b70a:	f01e f849 	bl	297a0 <bt_gatt_foreach_attr>
	if (data.err) {
    b70e:	f89d 4014 	ldrb.w	r4, [sp, #20]
    b712:	b174      	cbz	r4, b732 <att_write_req+0x96>
			net_buf_unref(data.buf);
    b714:	9801      	ldr	r0, [sp, #4]
    b716:	f013 fc1d 	bl	1ef54 <net_buf_unref>
	if (!req) {
    b71a:	f89d 3014 	ldrb.w	r3, [sp, #20]
    b71e:	4632      	mov	r2, r6
    b720:	4641      	mov	r1, r8
    b722:	4628      	mov	r0, r5
    b724:	f01e fa4a 	bl	29bbc <send_err_rsp.part.12>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    b728:	463c      	mov	r4, r7
}
    b72a:	4620      	mov	r0, r4
    b72c:	b007      	add	sp, #28
    b72e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (data.buf) {
    b732:	9901      	ldr	r1, [sp, #4]
    b734:	2900      	cmp	r1, #0
    b736:	d0f8      	beq.n	b72a <att_write_req+0x8e>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    b738:	4628      	mov	r0, r5
    b73a:	f7ff fe13 	bl	b364 <bt_att_chan_send_rsp.constprop.24>
    b73e:	e7f4      	b.n	b72a <att_write_req+0x8e>
			return BT_ATT_ERR_UNLIKELY;
    b740:	240e      	movs	r4, #14
    b742:	e7f2      	b.n	b72a <att_write_req+0x8e>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    b744:	2412      	movs	r4, #18
    b746:	e7f0      	b.n	b72a <att_write_req+0x8e>
		return BT_ATT_ERR_INVALID_HANDLE;
    b748:	2401      	movs	r4, #1
    b74a:	e7ee      	b.n	b72a <att_write_req+0x8e>
    b74c:	00029a8d 	.word	0x00029a8d

0000b750 <bt_att_create_pdu>:
{
    b750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b752:	460f      	mov	r7, r1
    b754:	4616      	mov	r6, r2
	att = att_get(conn);
    b756:	f7ff fd75 	bl	b244 <att_get>
	if (!att) {
    b75a:	b198      	cbz	r0, b784 <bt_att_create_pdu+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    b75c:	6a83      	ldr	r3, [r0, #40]	; 0x28
	return list->head;
    b75e:	1c75      	adds	r5, r6, #1
    b760:	b15b      	cbz	r3, b77a <bt_att_create_pdu+0x2a>
    b762:	f5b3 709e 	subs.w	r0, r3, #316	; 0x13c
    b766:	d008      	beq.n	b77a <bt_att_create_pdu+0x2a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    b768:	681b      	ldr	r3, [r3, #0]
    b76a:	b10b      	cbz	r3, b770 <bt_att_create_pdu+0x20>
    b76c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
		if (len + sizeof(op) > chan->chan.tx.mtu) {
    b770:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
    b774:	4295      	cmp	r5, r2
    b776:	d907      	bls.n	b788 <bt_att_create_pdu+0x38>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    b778:	b963      	cbnz	r3, b794 <bt_att_create_pdu+0x44>
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
    b77a:	462a      	mov	r2, r5
    b77c:	2157      	movs	r1, #87	; 0x57
    b77e:	4809      	ldr	r0, [pc, #36]	; (b7a4 <bt_att_create_pdu+0x54>)
    b780:	f01b fbf5 	bl	26f6e <printk>
}
    b784:	2000      	movs	r0, #0
    b786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return bt_att_chan_create_pdu(chan, op, len);
    b788:	4632      	mov	r2, r6
    b78a:	4639      	mov	r1, r7
}
    b78c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		return bt_att_chan_create_pdu(chan, op, len);
    b790:	f7ff bec4 	b.w	b51c <bt_att_chan_create_pdu>
    b794:	f8d3 413c 	ldr.w	r4, [r3, #316]	; 0x13c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    b798:	b10c      	cbz	r4, b79e <bt_att_create_pdu+0x4e>
    b79a:	f5a4 749e 	sub.w	r4, r4, #316	; 0x13c
{
    b79e:	4618      	mov	r0, r3
    b7a0:	4623      	mov	r3, r4
    b7a2:	e7e5      	b.n	b770 <bt_att_create_pdu+0x20>
    b7a4:	00031478 	.word	0x00031478

0000b7a8 <att_read_group_req>:
{
    b7a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    b7ac:	7b0c      	ldrb	r4, [r1, #12]
    b7ae:	3c04      	subs	r4, #4
    b7b0:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    b7b2:	2c02      	cmp	r4, #2
{
    b7b4:	4606      	mov	r6, r0
    b7b6:	b08c      	sub	sp, #48	; 0x30
    b7b8:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    b7ba:	d001      	beq.n	b7c0 <att_read_group_req+0x18>
    b7bc:	2c10      	cmp	r4, #16
    b7be:	d16e      	bne.n	b89e <att_read_group_req+0xf6>
	return net_buf_simple_pull_mem(&buf->b, len);
    b7c0:	2104      	movs	r1, #4
    b7c2:	3008      	adds	r0, #8
    b7c4:	f013 fcf8 	bl	1f1b8 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    b7c8:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
    b7cc:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    b7ce:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    b7d0:	1d01      	adds	r1, r0, #4
    b7d2:	4622      	mov	r2, r4
    b7d4:	4640      	mov	r0, r8
    b7d6:	f01d fc81 	bl	290dc <bt_uuid_create>
    b7da:	2800      	cmp	r0, #0
    b7dc:	d061      	beq.n	b8a2 <att_read_group_req+0xfa>
	if (!start || !end) {
    b7de:	2d00      	cmp	r5, #0
    b7e0:	d03a      	beq.n	b858 <att_read_group_req+0xb0>
    b7e2:	2400      	movs	r4, #0
    b7e4:	2f00      	cmp	r7, #0
    b7e6:	d036      	beq.n	b856 <att_read_group_req+0xae>
	if (start > end) {
    b7e8:	42bd      	cmp	r5, r7
    b7ea:	d835      	bhi.n	b858 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    b7ec:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    b7f0:	4669      	mov	r1, sp
    b7f2:	4640      	mov	r0, r8
    b7f4:	f88d 4000 	strb.w	r4, [sp]
    b7f8:	f8ad 3002 	strh.w	r3, [sp, #2]
    b7fc:	f01d fc44 	bl	29088 <bt_uuid_cmp>
    b800:	2800      	cmp	r0, #0
    b802:	d134      	bne.n	b86e <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
    b804:	68b4      	ldr	r4, [r6, #8]
	(void)memset(&data, 0, sizeof(data));
    b806:	2214      	movs	r2, #20
    b808:	2100      	movs	r1, #0
    b80a:	a807      	add	r0, sp, #28
    b80c:	f021 fef5 	bl	2d5fa <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    b810:	2201      	movs	r2, #1
    b812:	2111      	movs	r1, #17
    b814:	4620      	mov	r0, r4
    b816:	f7ff ff9b 	bl	b750 <bt_att_create_pdu>
    b81a:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    b81c:	2800      	cmp	r0, #0
    b81e:	d040      	beq.n	b8a2 <att_read_group_req+0xfa>
	return net_buf_simple_add(&buf->b, len);
    b820:	2101      	movs	r1, #1
    b822:	3008      	adds	r0, #8
	data.uuid = uuid;
    b824:	e9cd 6807 	strd	r6, r8, [sp, #28]
    b828:	f013 fce4 	bl	1f1f4 <net_buf_simple_add>
	data.rsp->len = 0U;
    b82c:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    b830:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    b832:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
    b834:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    b838:	4a1b      	ldr	r2, [pc, #108]	; (b8a8 <att_read_group_req+0x100>)
	data.group = NULL;
    b83a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    b83e:	4639      	mov	r1, r7
    b840:	4628      	mov	r0, r5
    b842:	f01d ffad 	bl	297a0 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    b846:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b848:	781c      	ldrb	r4, [r3, #0]
    b84a:	bb1c      	cbnz	r4, b894 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
    b84c:	9809      	ldr	r0, [sp, #36]	; 0x24
    b84e:	f013 fb81 	bl	1ef54 <net_buf_unref>
	if (!req) {
    b852:	230a      	movs	r3, #10
    b854:	e018      	b.n	b888 <att_read_group_req+0xe0>
			*err = 0U;
    b856:	463d      	mov	r5, r7
	if (!req) {
    b858:	2301      	movs	r3, #1
    b85a:	462a      	mov	r2, r5
    b85c:	2110      	movs	r1, #16
    b85e:	4630      	mov	r0, r6
    b860:	f01e f9ac 	bl	29bbc <send_err_rsp.part.12>
		return 0;
    b864:	2400      	movs	r4, #0
}
    b866:	4620      	mov	r0, r4
    b868:	b00c      	add	sp, #48	; 0x30
    b86a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    b86e:	f642 0301 	movw	r3, #10241	; 0x2801
    b872:	a901      	add	r1, sp, #4
    b874:	4640      	mov	r0, r8
    b876:	f88d 4004 	strb.w	r4, [sp, #4]
    b87a:	f8ad 3006 	strh.w	r3, [sp, #6]
    b87e:	f01d fc03 	bl	29088 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    b882:	2800      	cmp	r0, #0
    b884:	d0be      	beq.n	b804 <att_read_group_req+0x5c>
	if (!req) {
    b886:	2310      	movs	r3, #16
    b888:	462a      	mov	r2, r5
    b88a:	2110      	movs	r1, #16
    b88c:	4630      	mov	r0, r6
    b88e:	f01e f995 	bl	29bbc <send_err_rsp.part.12>
		return 0;
    b892:	e7e8      	b.n	b866 <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    b894:	9909      	ldr	r1, [sp, #36]	; 0x24
    b896:	4630      	mov	r0, r6
    b898:	f7ff fd64 	bl	b364 <bt_att_chan_send_rsp.constprop.24>
	return 0;
    b89c:	e7e2      	b.n	b864 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
    b89e:	2404      	movs	r4, #4
    b8a0:	e7e1      	b.n	b866 <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
    b8a2:	240e      	movs	r4, #14
    b8a4:	e7df      	b.n	b866 <att_read_group_req+0xbe>
    b8a6:	bf00      	nop
    b8a8:	0000aed5 	.word	0x0000aed5

0000b8ac <att_read_mult_req>:
{
    b8ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    b8b0:	6886      	ldr	r6, [r0, #8]
{
    b8b2:	b085      	sub	sp, #20
	(void)memset(&data, 0, sizeof(data));
    b8b4:	2210      	movs	r2, #16
{
    b8b6:	4604      	mov	r4, r0
    b8b8:	460d      	mov	r5, r1
	(void)memset(&data, 0, sizeof(data));
    b8ba:	4668      	mov	r0, sp
    b8bc:	2100      	movs	r1, #0
    b8be:	f021 fe9c 	bl	2d5fa <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    b8c2:	2200      	movs	r2, #0
    b8c4:	210f      	movs	r1, #15
    b8c6:	4630      	mov	r0, r6
    b8c8:	f7ff ff42 	bl	b750 <bt_att_create_pdu>
    b8cc:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    b8ce:	b358      	cbz	r0, b928 <att_read_mult_req+0x7c>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    b8d0:	f8df 9058 	ldr.w	r9, [pc, #88]	; b92c <att_read_mult_req+0x80>
	data.chan = chan;
    b8d4:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
    b8d6:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    b8da:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
    b8de:	89ab      	ldrh	r3, [r5, #12]
    b8e0:	2b01      	cmp	r3, #1
    b8e2:	d804      	bhi.n	b8ee <att_read_mult_req+0x42>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    b8e4:	9902      	ldr	r1, [sp, #8]
    b8e6:	4620      	mov	r0, r4
    b8e8:	f7ff fd3c 	bl	b364 <bt_att_chan_send_rsp.constprop.24>
    b8ec:	e018      	b.n	b920 <att_read_mult_req+0x74>
    b8ee:	4638      	mov	r0, r7
    b8f0:	f021 f839 	bl	2c966 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    b8f4:	466b      	mov	r3, sp
    b8f6:	464a      	mov	r2, r9
    b8f8:	4601      	mov	r1, r0
    b8fa:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    b8fc:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    b900:	f01d ff4e 	bl	297a0 <bt_gatt_foreach_attr>
		if (data.err) {
    b904:	f89d 300c 	ldrb.w	r3, [sp, #12]
    b908:	2b00      	cmp	r3, #0
    b90a:	d0e8      	beq.n	b8de <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
    b90c:	9802      	ldr	r0, [sp, #8]
    b90e:	f013 fb21 	bl	1ef54 <net_buf_unref>
	if (!req) {
    b912:	f89d 300c 	ldrb.w	r3, [sp, #12]
    b916:	4632      	mov	r2, r6
    b918:	210e      	movs	r1, #14
    b91a:	4620      	mov	r0, r4
    b91c:	f01e f94e 	bl	29bbc <send_err_rsp.part.12>
	return 0;
    b920:	2000      	movs	r0, #0
}
    b922:	b005      	add	sp, #20
    b924:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
    b928:	200e      	movs	r0, #14
    b92a:	e7fa      	b.n	b922 <att_read_mult_req+0x76>
    b92c:	00029b6d 	.word	0x00029b6d

0000b930 <att_read_rsp>:
{
    b930:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    b934:	6884      	ldr	r4, [r0, #8]
{
    b936:	4605      	mov	r5, r0
    b938:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
    b93a:	4620      	mov	r0, r4
    b93c:	2101      	movs	r1, #1
{
    b93e:	4690      	mov	r8, r2
    b940:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
    b942:	f01e fc3c 	bl	2a1be <bt_gatt_change_aware>
    b946:	b388      	cbz	r0, b9ac <att_read_rsp+0x7c>
	if (!handle) {
    b948:	b396      	cbz	r6, b9b0 <att_read_rsp+0x80>
	(void)memset(&data, 0, sizeof(data));
    b94a:	2210      	movs	r2, #16
    b94c:	2100      	movs	r1, #0
    b94e:	4668      	mov	r0, sp
    b950:	f021 fe53 	bl	2d5fa <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    b954:	2200      	movs	r2, #0
    b956:	4641      	mov	r1, r8
    b958:	4620      	mov	r0, r4
    b95a:	f7ff fef9 	bl	b750 <bt_att_create_pdu>
    b95e:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    b960:	b340      	cbz	r0, b9b4 <att_read_rsp+0x84>
	data.offset = offset;
    b962:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    b966:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    b96a:	2301      	movs	r3, #1
    b96c:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    b970:	4a11      	ldr	r2, [pc, #68]	; (b9b8 <att_read_rsp+0x88>)
	data.chan = chan;
    b972:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    b974:	466b      	mov	r3, sp
    b976:	4631      	mov	r1, r6
    b978:	4630      	mov	r0, r6
    b97a:	f01d ff11 	bl	297a0 <bt_gatt_foreach_attr>
	if (data.err) {
    b97e:	f89d 400c 	ldrb.w	r4, [sp, #12]
    b982:	b174      	cbz	r4, b9a2 <att_read_rsp+0x72>
		net_buf_unref(data.buf);
    b984:	9802      	ldr	r0, [sp, #8]
    b986:	f013 fae5 	bl	1ef54 <net_buf_unref>
	if (!req) {
    b98a:	f89d 300c 	ldrb.w	r3, [sp, #12]
    b98e:	4632      	mov	r2, r6
    b990:	4639      	mov	r1, r7
    b992:	4628      	mov	r0, r5
    b994:	f01e f912 	bl	29bbc <send_err_rsp.part.12>
		return 0;
    b998:	2400      	movs	r4, #0
}
    b99a:	4620      	mov	r0, r4
    b99c:	b004      	add	sp, #16
    b99e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    b9a2:	9902      	ldr	r1, [sp, #8]
    b9a4:	4628      	mov	r0, r5
    b9a6:	f7ff fcdd 	bl	b364 <bt_att_chan_send_rsp.constprop.24>
	return 0;
    b9aa:	e7f6      	b.n	b99a <att_read_rsp+0x6a>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    b9ac:	2412      	movs	r4, #18
    b9ae:	e7f4      	b.n	b99a <att_read_rsp+0x6a>
		return BT_ATT_ERR_INVALID_HANDLE;
    b9b0:	2401      	movs	r4, #1
    b9b2:	e7f2      	b.n	b99a <att_read_rsp+0x6a>
		return BT_ATT_ERR_UNLIKELY;
    b9b4:	240e      	movs	r4, #14
    b9b6:	e7f0      	b.n	b99a <att_read_rsp+0x6a>
    b9b8:	00029b6d 	.word	0x00029b6d

0000b9bc <att_read_type_req>:
{
    b9bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    b9c0:	7b0c      	ldrb	r4, [r1, #12]
    b9c2:	3c04      	subs	r4, #4
    b9c4:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    b9c6:	2c02      	cmp	r4, #2
{
    b9c8:	4606      	mov	r6, r0
    b9ca:	b08c      	sub	sp, #48	; 0x30
    b9cc:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    b9ce:	d001      	beq.n	b9d4 <att_read_type_req+0x18>
    b9d0:	2c10      	cmp	r4, #16
    b9d2:	d14f      	bne.n	ba74 <att_read_type_req+0xb8>
	return net_buf_simple_pull_mem(&buf->b, len);
    b9d4:	2104      	movs	r1, #4
    b9d6:	3008      	adds	r0, #8
    b9d8:	f013 fbee 	bl	1f1b8 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    b9dc:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
    b9e0:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    b9e2:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    b9e4:	1d01      	adds	r1, r0, #4
    b9e6:	4622      	mov	r2, r4
    b9e8:	4640      	mov	r0, r8
    b9ea:	f01d fb77 	bl	290dc <bt_uuid_create>
    b9ee:	b188      	cbz	r0, ba14 <att_read_type_req+0x58>
	if (!start || !end) {
    b9f0:	b19d      	cbz	r5, ba1a <att_read_type_req+0x5e>
    b9f2:	b18f      	cbz	r7, ba18 <att_read_type_req+0x5c>
	if (start > end) {
    b9f4:	42bd      	cmp	r5, r7
    b9f6:	d810      	bhi.n	ba1a <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
    b9f8:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
    b9fa:	68b4      	ldr	r4, [r6, #8]
	(void)memset(&data, 0, sizeof(data));
    b9fc:	2100      	movs	r1, #0
    b9fe:	eb0d 0002 	add.w	r0, sp, r2
    ba02:	f021 fdfa 	bl	2d5fa <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    ba06:	2201      	movs	r2, #1
    ba08:	2109      	movs	r1, #9
    ba0a:	4620      	mov	r0, r4
    ba0c:	f7ff fea0 	bl	b750 <bt_att_create_pdu>
    ba10:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    ba12:	b968      	cbnz	r0, ba30 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
    ba14:	240e      	movs	r4, #14
    ba16:	e007      	b.n	ba28 <att_read_type_req+0x6c>
			*err = 0U;
    ba18:	463d      	mov	r5, r7
	if (!req) {
    ba1a:	2301      	movs	r3, #1
    ba1c:	462a      	mov	r2, r5
    ba1e:	2108      	movs	r1, #8
    ba20:	4630      	mov	r0, r6
    ba22:	f01e f8cb 	bl	29bbc <send_err_rsp.part.12>
		return 0;
    ba26:	2400      	movs	r4, #0
}
    ba28:	4620      	mov	r0, r4
    ba2a:	b00c      	add	sp, #48	; 0x30
    ba2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
    ba30:	2101      	movs	r1, #1
    ba32:	3008      	adds	r0, #8
	data.uuid = uuid;
    ba34:	e9cd 6806 	strd	r6, r8, [sp, #24]
    ba38:	f013 fbdc 	bl	1f1f4 <net_buf_simple_add>
	data.rsp->len = 0U;
    ba3c:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    ba40:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    ba42:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    ba44:	4a0c      	ldr	r2, [pc, #48]	; (ba78 <att_read_type_req+0xbc>)
	data.rsp->len = 0U;
    ba46:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    ba4a:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    ba4c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    ba50:	4628      	mov	r0, r5
    ba52:	ab06      	add	r3, sp, #24
    ba54:	f01d fea4 	bl	297a0 <bt_gatt_foreach_attr>
	if (data.err) {
    ba58:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    ba5c:	b12c      	cbz	r4, ba6a <att_read_type_req+0xae>
		net_buf_unref(data.buf);
    ba5e:	9808      	ldr	r0, [sp, #32]
    ba60:	f013 fa78 	bl	1ef54 <net_buf_unref>
	if (!req) {
    ba64:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    ba68:	e7d8      	b.n	ba1c <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    ba6a:	9908      	ldr	r1, [sp, #32]
    ba6c:	4630      	mov	r0, r6
    ba6e:	f7ff fc79 	bl	b364 <bt_att_chan_send_rsp.constprop.24>
	return 0;
    ba72:	e7d9      	b.n	ba28 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
    ba74:	2404      	movs	r4, #4
    ba76:	e7d7      	b.n	ba28 <att_read_type_req+0x6c>
    ba78:	0000af81 	.word	0x0000af81

0000ba7c <att_find_type_req>:
{
    ba7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ba80:	4689      	mov	r9, r1
    ba82:	b088      	sub	sp, #32
    ba84:	4606      	mov	r6, r0
	return net_buf_simple_pull_mem(&buf->b, len);
    ba86:	2106      	movs	r1, #6
    ba88:	f109 0008 	add.w	r0, r9, #8
    ba8c:	f013 fb94 	bl	1f1b8 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
    ba90:	8805      	ldrh	r5, [r0, #0]
	if (!start || !end) {
    ba92:	b315      	cbz	r5, bada <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
    ba94:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	if (!start || !end) {
    ba98:	f1b8 0f00 	cmp.w	r8, #0
    ba9c:	d01c      	beq.n	bad8 <att_find_type_req+0x5c>
	if (start > end) {
    ba9e:	4545      	cmp	r5, r8
    baa0:	d81b      	bhi.n	bada <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
    baa2:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    baa4:	f8ad 3006 	strh.w	r3, [sp, #6]
    baa8:	2400      	movs	r4, #0
    baaa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    baae:	a902      	add	r1, sp, #8
    bab0:	a801      	add	r0, sp, #4
	value = buf->data;
    bab2:	f8d9 a008 	ldr.w	sl, [r9, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    bab6:	f88d 4004 	strb.w	r4, [sp, #4]
    baba:	f88d 4008 	strb.w	r4, [sp, #8]
    babe:	f8ad 300a 	strh.w	r3, [sp, #10]
    bac2:	f01d fae1 	bl	29088 <bt_uuid_cmp>
    bac6:	4607      	mov	r7, r0
    bac8:	b190      	cbz	r0, baf0 <att_find_type_req+0x74>
	if (!req) {
    baca:	230a      	movs	r3, #10
    bacc:	462a      	mov	r2, r5
    bace:	2106      	movs	r1, #6
    bad0:	4630      	mov	r0, r6
    bad2:	f01e f873 	bl	29bbc <send_err_rsp.part.12>
		return 0;
    bad6:	e007      	b.n	bae8 <att_find_type_req+0x6c>
			*err = 0U;
    bad8:	4645      	mov	r5, r8
	if (!req) {
    bada:	2301      	movs	r3, #1
    badc:	462a      	mov	r2, r5
    bade:	2106      	movs	r1, #6
    bae0:	4630      	mov	r0, r6
    bae2:	f01e f86b 	bl	29bbc <send_err_rsp.part.12>
		return 0;
    bae6:	2400      	movs	r4, #0
}
    bae8:	4620      	mov	r0, r4
    baea:	b008      	add	sp, #32
    baec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    baf0:	f899 400c 	ldrb.w	r4, [r9, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
    baf4:	f8d6 9008 	ldr.w	r9, [r6, #8]
	(void)memset(&data, 0, sizeof(data));
    baf8:	4601      	mov	r1, r0
    bafa:	2214      	movs	r2, #20
    bafc:	a803      	add	r0, sp, #12
    bafe:	f021 fd7c 	bl	2d5fa <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    bb02:	463a      	mov	r2, r7
    bb04:	2107      	movs	r1, #7
    bb06:	4648      	mov	r0, r9
    bb08:	f7ff fe22 	bl	b750 <bt_att_create_pdu>
    bb0c:	9004      	str	r0, [sp, #16]
	if (!data.buf) {
    bb0e:	b1d8      	cbz	r0, bb48 <att_find_type_req+0xcc>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    bb10:	230a      	movs	r3, #10
    bb12:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    bb16:	4a0d      	ldr	r2, [pc, #52]	; (bb4c <att_find_type_req+0xd0>)
	data.value_len = value_len;
    bb18:	f88d 401c 	strb.w	r4, [sp, #28]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    bb1c:	ab03      	add	r3, sp, #12
    bb1e:	4641      	mov	r1, r8
    bb20:	4628      	mov	r0, r5
	data.chan = chan;
    bb22:	9603      	str	r6, [sp, #12]
	data.value = value;
    bb24:	e9cd 7a05 	strd	r7, sl, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    bb28:	f01d fe3a 	bl	297a0 <bt_gatt_foreach_attr>
	if (data.err) {
    bb2c:	f89d 401d 	ldrb.w	r4, [sp, #29]
    bb30:	b12c      	cbz	r4, bb3e <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
    bb32:	9804      	ldr	r0, [sp, #16]
    bb34:	f013 fa0e 	bl	1ef54 <net_buf_unref>
	if (!req) {
    bb38:	f89d 301d 	ldrb.w	r3, [sp, #29]
    bb3c:	e7ce      	b.n	badc <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    bb3e:	9904      	ldr	r1, [sp, #16]
    bb40:	4630      	mov	r0, r6
    bb42:	f7ff fc0f 	bl	b364 <bt_att_chan_send_rsp.constprop.24>
	return 0;
    bb46:	e7cf      	b.n	bae8 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    bb48:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    bb4a:	e7cd      	b.n	bae8 <att_find_type_req+0x6c>
    bb4c:	0000b025 	.word	0x0000b025

0000bb50 <att_find_info_req>:
{
    bb50:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    bb52:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    bb54:	881d      	ldrh	r5, [r3, #0]
{
    bb56:	b085      	sub	sp, #20
    bb58:	4606      	mov	r6, r0
	if (!start || !end) {
    bb5a:	b19d      	cbz	r5, bb84 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
    bb5c:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    bb5e:	b184      	cbz	r4, bb82 <att_find_info_req+0x32>
	if (start > end) {
    bb60:	42a5      	cmp	r5, r4
    bb62:	d80f      	bhi.n	bb84 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
    bb64:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
    bb66:	2210      	movs	r2, #16
    bb68:	2100      	movs	r1, #0
    bb6a:	4668      	mov	r0, sp
    bb6c:	f021 fd45 	bl	2d5fa <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    bb70:	2200      	movs	r2, #0
    bb72:	2105      	movs	r1, #5
    bb74:	4638      	mov	r0, r7
    bb76:	f7ff fdeb 	bl	b750 <bt_att_create_pdu>
    bb7a:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    bb7c:	b958      	cbnz	r0, bb96 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
    bb7e:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
    bb80:	e007      	b.n	bb92 <att_find_info_req+0x42>
			*err = 0U;
    bb82:	4625      	mov	r5, r4
	if (!req) {
    bb84:	2301      	movs	r3, #1
    bb86:	462a      	mov	r2, r5
    bb88:	2104      	movs	r1, #4
    bb8a:	4630      	mov	r0, r6
    bb8c:	f01e f816 	bl	29bbc <send_err_rsp.part.12>
	return 0;
    bb90:	2000      	movs	r0, #0
}
    bb92:	b005      	add	sp, #20
    bb94:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    bb96:	4621      	mov	r1, r4
    bb98:	466b      	mov	r3, sp
    bb9a:	4a08      	ldr	r2, [pc, #32]	; (bbbc <att_find_info_req+0x6c>)
	data.chan = chan;
    bb9c:	9600      	str	r6, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    bb9e:	4628      	mov	r0, r5
    bba0:	f01d fdfe 	bl	297a0 <bt_gatt_foreach_attr>
	if (!data.rsp) {
    bba4:	9c02      	ldr	r4, [sp, #8]
    bba6:	b924      	cbnz	r4, bbb2 <att_find_info_req+0x62>
		net_buf_unref(data.buf);
    bba8:	9801      	ldr	r0, [sp, #4]
    bbaa:	f013 f9d3 	bl	1ef54 <net_buf_unref>
	if (!req) {
    bbae:	230a      	movs	r3, #10
    bbb0:	e7e9      	b.n	bb86 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    bbb2:	9901      	ldr	r1, [sp, #4]
    bbb4:	4630      	mov	r0, r6
    bbb6:	f7ff fbd5 	bl	b364 <bt_att_chan_send_rsp.constprop.24>
    bbba:	e7e9      	b.n	bb90 <att_find_info_req+0x40>
    bbbc:	00029921 	.word	0x00029921

0000bbc0 <bt_att_req_alloc>:

	return mtu;
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
    bbc0:	b513      	push	{r0, r1, r4, lr}
	struct bt_att_req *req = NULL;

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    bbc2:	4602      	mov	r2, r0
    bbc4:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;
    bbc6:	2400      	movs	r4, #0
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    bbc8:	a901      	add	r1, sp, #4
    bbca:	4807      	ldr	r0, [pc, #28]	; (bbe8 <bt_att_req_alloc+0x28>)
	struct bt_att_req *req = NULL;
    bbcc:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    bbce:	f016 fab5 	bl	2213c <k_mem_slab_alloc>
    bbd2:	4601      	mov	r1, r0
    bbd4:	b930      	cbnz	r0, bbe4 <bt_att_req_alloc+0x24>
    bbd6:	2218      	movs	r2, #24
    bbd8:	9801      	ldr	r0, [sp, #4]
    bbda:	f021 fd0e 	bl	2d5fa <memset>

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));

	return req;
    bbde:	9801      	ldr	r0, [sp, #4]
}
    bbe0:	b002      	add	sp, #8
    bbe2:	bd10      	pop	{r4, pc}
		return NULL;
    bbe4:	4620      	mov	r0, r4
    bbe6:	e7fb      	b.n	bbe0 <bt_att_req_alloc+0x20>
    bbe8:	20001248 	.word	0x20001248

0000bbec <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
    bbec:	b507      	push	{r0, r1, r2, lr}
    bbee:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	k_mem_slab_free(&req_slab, (void **)&req);
    bbf0:	a901      	add	r1, sp, #4
    bbf2:	4803      	ldr	r0, [pc, #12]	; (bc00 <bt_att_req_free+0x14>)
    bbf4:	f016 fafc 	bl	221f0 <k_mem_slab_free>
}
    bbf8:	b003      	add	sp, #12
    bbfa:	f85d fb04 	ldr.w	pc, [sp], #4
    bbfe:	bf00      	nop
    bc00:	20001248 	.word	0x20001248

0000bc04 <att_handle_rsp>:
{
    bc04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bc08:	4605      	mov	r5, r0
    bc0a:	b085      	sub	sp, #20
	k_delayed_work_cancel(&chan->timeout_work);
    bc0c:	30f0      	adds	r0, #240	; 0xf0
{
    bc0e:	4689      	mov	r9, r1
    bc10:	4692      	mov	sl, r2
    bc12:	4698      	mov	r8, r3
	k_delayed_work_cancel(&chan->timeout_work);
    bc14:	f018 f930 	bl	23e78 <k_delayed_work_cancel>
	if (!chan->req) {
    bc18:	f8d5 40cc 	ldr.w	r4, [r5, #204]	; 0xcc
    bc1c:	2600      	movs	r6, #0
    bc1e:	b9fc      	cbnz	r4, bc60 <att_handle_rsp+0x5c>
		BT_WARN("No pending ATT request");
    bc20:	2157      	movs	r1, #87	; 0x57
    bc22:	482a      	ldr	r0, [pc, #168]	; (bccc <att_handle_rsp+0xc8>)
    bc24:	f01b f9a3 	bl	26f6e <printk>
	att_process(chan->att);
    bc28:	682f      	ldr	r7, [r5, #0]
	node = sys_slist_get(&att->reqs);
    bc2a:	1d38      	adds	r0, r7, #4
    bc2c:	f01d fd1d 	bl	2966a <sys_slist_get>
	if (!node) {
    bc30:	4603      	mov	r3, r0
    bc32:	2800      	cmp	r0, #0
    bc34:	d035      	beq.n	bca2 <att_handle_rsp+0x9e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    bc36:	6aba      	ldr	r2, [r7, #40]	; 0x28
    bc38:	b15a      	cbz	r2, bc52 <att_handle_rsp+0x4e>
    bc3a:	f5b2 709e 	subs.w	r0, r2, #316	; 0x13c
    bc3e:	d008      	beq.n	bc52 <att_handle_rsp+0x4e>
    bc40:	6816      	ldr	r6, [r2, #0]
    bc42:	b10e      	cbz	r6, bc48 <att_handle_rsp+0x44>
    bc44:	f5a6 769e 	sub.w	r6, r6, #316	; 0x13c
		if (!chan->req) {
    bc48:	f8d0 20cc 	ldr.w	r2, [r0, #204]	; 0xcc
    bc4c:	b312      	cbz	r2, bc94 <att_handle_rsp+0x90>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    bc4e:	2e00      	cmp	r6, #0
    bc50:	d134      	bne.n	bcbc <att_handle_rsp+0xb8>
Z_GENLIST_PREPEND(slist, snode)
    bc52:	687a      	ldr	r2, [r7, #4]
	parent->next = child;
    bc54:	601a      	str	r2, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
    bc56:	68ba      	ldr	r2, [r7, #8]
	list->head = node;
    bc58:	607b      	str	r3, [r7, #4]
Z_GENLIST_PREPEND(slist, snode)
    bc5a:	bb12      	cbnz	r2, bca2 <att_handle_rsp+0x9e>
	list->tail = node;
    bc5c:	60bb      	str	r3, [r7, #8]
    bc5e:	e020      	b.n	bca2 <att_handle_rsp+0x9e>
	if (chan->req == &cancel) {
    bc60:	4b1b      	ldr	r3, [pc, #108]	; (bcd0 <att_handle_rsp+0xcc>)
    bc62:	429c      	cmp	r4, r3
    bc64:	d103      	bne.n	bc6e <att_handle_rsp+0x6a>
		chan->req = NULL;
    bc66:	f8c5 60cc 	str.w	r6, [r5, #204]	; 0xcc
	bt_att_func_t func = NULL;
    bc6a:	4634      	mov	r4, r6
		goto process;
    bc6c:	e7dc      	b.n	bc28 <att_handle_rsp+0x24>
	if (chan->req->buf) {
    bc6e:	6920      	ldr	r0, [r4, #16]
    bc70:	b120      	cbz	r0, bc7c <att_handle_rsp+0x78>
		net_buf_unref(chan->req->buf);
    bc72:	f013 f96f 	bl	1ef54 <net_buf_unref>
		chan->req->buf = NULL;
    bc76:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
    bc7a:	611e      	str	r6, [r3, #16]
	func = chan->req->func;
    bc7c:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
	chan->req->func = NULL;
    bc80:	2600      	movs	r6, #0
	func = chan->req->func;
    bc82:	6844      	ldr	r4, [r0, #4]
	chan->req->func = NULL;
    bc84:	6046      	str	r6, [r0, #4]
	params = chan->req->user_data;
    bc86:	f8d0 b014 	ldr.w	fp, [r0, #20]
	att_req_destroy(chan->req);
    bc8a:	f01e f81c 	bl	29cc6 <att_req_destroy>
	chan->req = NULL;
    bc8e:	f8c5 60cc 	str.w	r6, [r5, #204]	; 0xcc
    bc92:	e7c9      	b.n	bc28 <att_handle_rsp+0x24>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
    bc94:	4619      	mov	r1, r3
    bc96:	9303      	str	r3, [sp, #12]
    bc98:	f7ff fbb6 	bl	b408 <bt_att_chan_req_send>
    bc9c:	2800      	cmp	r0, #0
    bc9e:	9b03      	ldr	r3, [sp, #12]
    bca0:	dbd5      	blt.n	bc4e <att_handle_rsp+0x4a>
	if (func) {
    bca2:	b13c      	cbz	r4, bcb4 <att_handle_rsp+0xb0>
		func(chan->att->conn, err, pdu, len, params);
    bca4:	6828      	ldr	r0, [r5, #0]
    bca6:	f8cd b000 	str.w	fp, [sp]
    bcaa:	4653      	mov	r3, sl
    bcac:	464a      	mov	r2, r9
    bcae:	4641      	mov	r1, r8
    bcb0:	6800      	ldr	r0, [r0, #0]
    bcb2:	47a0      	blx	r4
}
    bcb4:	2000      	movs	r0, #0
    bcb6:	b005      	add	sp, #20
    bcb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    bcbc:	f8d6 213c 	ldr.w	r2, [r6, #316]	; 0x13c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    bcc0:	b10a      	cbz	r2, bcc6 <att_handle_rsp+0xc2>
    bcc2:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
	bt_att_func_t func = NULL;
    bcc6:	4630      	mov	r0, r6
    bcc8:	4616      	mov	r6, r2
    bcca:	e7bd      	b.n	bc48 <att_handle_rsp+0x44>
    bccc:	0003139e 	.word	0x0003139e
    bcd0:	20002c24 	.word	0x20002c24

0000bcd4 <att_reset>:
{
    bcd4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    bcd6:	9003      	str	r0, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
    bcd8:	9803      	ldr	r0, [sp, #12]
    bcda:	2200      	movs	r2, #0
    bcdc:	2300      	movs	r3, #0
    bcde:	300c      	adds	r0, #12
    bce0:	f013 f81e 	bl	1ed20 <net_buf_get>
    bce4:	b948      	cbnz	r0, bcfa <att_reset+0x26>
	att->conn = NULL;
    bce6:	9b03      	ldr	r3, [sp, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    bce8:	685c      	ldr	r4, [r3, #4]
	att->conn = NULL;
    bcea:	6018      	str	r0, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    bcec:	b944      	cbnz	r4, bd00 <att_reset+0x2c>
	k_mem_slab_free(&att_slab, (void **)&att);
    bcee:	a903      	add	r1, sp, #12
    bcf0:	480c      	ldr	r0, [pc, #48]	; (bd24 <att_reset+0x50>)
    bcf2:	f016 fa7d 	bl	221f0 <k_mem_slab_free>
}
    bcf6:	b004      	add	sp, #16
    bcf8:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
    bcfa:	f013 f92b 	bl	1ef54 <net_buf_unref>
    bcfe:	e7eb      	b.n	bcd8 <att_reset+0x4>
    bd00:	6825      	ldr	r5, [r4, #0]
		if (req->func) {
    bd02:	6866      	ldr	r6, [r4, #4]
    bd04:	b136      	cbz	r6, bd14 <att_reset+0x40>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
    bd06:	6963      	ldr	r3, [r4, #20]
    bd08:	9300      	str	r3, [sp, #0]
    bd0a:	2300      	movs	r3, #0
    bd0c:	461a      	mov	r2, r3
    bd0e:	210e      	movs	r1, #14
    bd10:	4618      	mov	r0, r3
    bd12:	47b0      	blx	r6
		att_req_destroy(req);
    bd14:	4620      	mov	r0, r4
    bd16:	f01d ffd6 	bl	29cc6 <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    bd1a:	2d00      	cmp	r5, #0
    bd1c:	d0e7      	beq.n	bcee <att_reset+0x1a>
    bd1e:	462c      	mov	r4, r5
    bd20:	682d      	ldr	r5, [r5, #0]
    bd22:	e7ee      	b.n	bd02 <att_reset+0x2e>
    bd24:	20001210 	.word	0x20001210

0000bd28 <att_timeout>:
{
    bd28:	b570      	push	{r4, r5, r6, lr}
	struct bt_att *att = chan->att;
    bd2a:	4605      	mov	r5, r0
{
    bd2c:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
    bd2e:	2145      	movs	r1, #69	; 0x45
    bd30:	480d      	ldr	r0, [pc, #52]	; (bd68 <att_timeout+0x40>)
	struct bt_att *att = chan->att;
    bd32:	f855 6df0 	ldr.w	r6, [r5, #-240]!
	BT_ERR("ATT Timeout");
    bd36:	f01b f91a 	bl	26f6e <printk>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
    bd3a:	f854 0cf0 	ldr.w	r0, [r4, #-240]
    bd3e:	f104 014c 	add.w	r1, r4, #76	; 0x4c
    bd42:	3028      	adds	r0, #40	; 0x28
    bd44:	f01d fc9b 	bl	2967e <sys_slist_find_and_remove>
	for (i = 0; i < CONFIG_BT_ATT_TX_MAX; i++) {
    bd48:	4628      	mov	r0, r5
    bd4a:	f01d ffd0 	bl	29cee <att_chan_detach.part.15>
	if (!sys_slist_is_empty(&att->chans)) {
    bd4e:	6ab5      	ldr	r5, [r6, #40]	; 0x28
    bd50:	b945      	cbnz	r5, bd64 <att_timeout+0x3c>
	att_reset(att);
    bd52:	4630      	mov	r0, r6
    bd54:	f7ff ffbe 	bl	bcd4 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    bd58:	f854 0ce8 	ldr.w	r0, [r4, #-232]
    bd5c:	f001 fc22 	bl	d5a4 <bt_gatt_disconnected>
	ch->chan.conn = NULL;
    bd60:	f844 5ce8 	str.w	r5, [r4, #-232]
}
    bd64:	bd70      	pop	{r4, r5, r6, pc}
    bd66:	bf00      	nop
    bd68:	000313ba 	.word	0x000313ba

0000bd6c <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
    bd6c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    bd70:	460e      	mov	r6, r1
    bd72:	4617      	mov	r7, r2
    bd74:	461d      	mov	r5, r3
	struct bt_att_chan *chan, *tmp;
	struct bt_att *att;
	int ret;

	__ASSERT_NO_MSG(conn);
    bd76:	4604      	mov	r4, r0
    bd78:	b950      	cbnz	r0, bd90 <bt_att_send+0x24>
    bd7a:	4931      	ldr	r1, [pc, #196]	; (be40 <bt_att_send+0xd4>)
    bd7c:	4831      	ldr	r0, [pc, #196]	; (be44 <bt_att_send+0xd8>)
    bd7e:	f640 32b8 	movw	r2, #3000	; 0xbb8
    bd82:	f01b f8f4 	bl	26f6e <printk>
    bd86:	f640 31b8 	movw	r1, #3000	; 0xbb8
    bd8a:	482d      	ldr	r0, [pc, #180]	; (be40 <bt_att_send+0xd4>)
    bd8c:	f01b fb68 	bl	27460 <assert_post_action>
	__ASSERT_NO_MSG(buf);
    bd90:	b956      	cbnz	r6, bda8 <bt_att_send+0x3c>
    bd92:	492b      	ldr	r1, [pc, #172]	; (be40 <bt_att_send+0xd4>)
    bd94:	482b      	ldr	r0, [pc, #172]	; (be44 <bt_att_send+0xd8>)
    bd96:	f640 32b9 	movw	r2, #3001	; 0xbb9
    bd9a:	f01b f8e8 	bl	26f6e <printk>
    bd9e:	f640 31b9 	movw	r1, #3001	; 0xbb9
    bda2:	4827      	ldr	r0, [pc, #156]	; (be40 <bt_att_send+0xd4>)
    bda4:	f01b fb5c 	bl	27460 <assert_post_action>

	att = att_get(conn);
    bda8:	4620      	mov	r0, r4
    bdaa:	f7ff fa4b 	bl	b244 <att_get>
	if (!att) {
    bdae:	4680      	mov	r8, r0
    bdb0:	b938      	cbnz	r0, bdc2 <bt_att_send+0x56>
		net_buf_unref(buf);
    bdb2:	4630      	mov	r0, r6
    bdb4:	f013 f8ce 	bl	1ef54 <net_buf_unref>
		return -ENOTCONN;
    bdb8:	f06f 007f 	mvn.w	r0, #127	; 0x7f
		BT_DBG("Queueing buffer %p", buf);
		net_buf_put(&att->tx_queue, buf);
	}

	return 0;
}
    bdbc:	b002      	add	sp, #8
    bdbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
    bdc2:	b13f      	cbz	r7, bdd4 <bt_att_send+0x68>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
    bdc4:	9500      	str	r5, [sp, #0]
    bdc6:	463b      	mov	r3, r7
    bdc8:	4632      	mov	r2, r6
    bdca:	2104      	movs	r1, #4
    bdcc:	4620      	mov	r0, r4
    bdce:	f01d fc1c 	bl	2960a <bt_l2cap_send_cb>
    bdd2:	e7f3      	b.n	bdbc <bt_att_send+0x50>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    bdd4:	6a84      	ldr	r4, [r0, #40]	; 0x28
    bdd6:	b184      	cbz	r4, bdfa <bt_att_send+0x8e>
    bdd8:	f5b4 759e 	subs.w	r5, r4, #316	; 0x13c
    bddc:	d00f      	beq.n	bdfe <bt_att_send+0x92>
    bdde:	6824      	ldr	r4, [r4, #0]
    bde0:	b10c      	cbz	r4, bde6 <bt_att_send+0x7a>
    bde2:	f5a4 749e 	sub.w	r4, r4, #316	; 0x13c
    bde6:	2000      	movs	r0, #0
    bde8:	b95d      	cbnz	r5, be02 <bt_att_send+0x96>
	if (ret < 0) {
    bdea:	b1c8      	cbz	r0, be20 <bt_att_send+0xb4>
		net_buf_put(&att->tx_queue, buf);
    bdec:	f108 000c 	add.w	r0, r8, #12
    bdf0:	4631      	mov	r1, r6
    bdf2:	f013 f881 	bl	1eef8 <net_buf_put>
	return 0;
    bdf6:	4628      	mov	r0, r5
    bdf8:	e7e0      	b.n	bdbc <bt_att_send+0x50>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    bdfa:	463d      	mov	r5, r7
    bdfc:	e7f3      	b.n	bde6 <bt_att_send+0x7a>
    bdfe:	463c      	mov	r4, r7
    be00:	e7f1      	b.n	bde6 <bt_att_send+0x7a>
	return z_impl_k_sem_take(sem, timeout);
    be02:	2200      	movs	r2, #0
    be04:	2300      	movs	r3, #0
    be06:	f505 7090 	add.w	r0, r5, #288	; 0x120
    be0a:	f017 fd93 	bl	23934 <z_impl_k_sem_take>
		if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
    be0e:	2800      	cmp	r0, #0
    be10:	db08      	blt.n	be24 <bt_att_send+0xb8>
	return chan_send(chan, buf, cb);
    be12:	2200      	movs	r2, #0
    be14:	4631      	mov	r1, r6
    be16:	4628      	mov	r0, r5
    be18:	f7ff f9a8 	bl	b16c <chan_send>
		if (ret >= 0) {
    be1c:	2800      	cmp	r0, #0
    be1e:	db03      	blt.n	be28 <bt_att_send+0xbc>
	return 0;
    be20:	2000      	movs	r0, #0
    be22:	e7cb      	b.n	bdbc <bt_att_send+0x50>
			return -EAGAIN;
    be24:	f06f 000a 	mvn.w	r0, #10
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    be28:	b13c      	cbz	r4, be3a <bt_att_send+0xce>
    be2a:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    be2e:	b10b      	cbz	r3, be34 <bt_att_send+0xc8>
    be30:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
    be34:	4625      	mov	r5, r4
    be36:	461c      	mov	r4, r3
    be38:	e7d6      	b.n	bde8 <bt_att_send+0x7c>
    be3a:	4623      	mov	r3, r4
    be3c:	e7fa      	b.n	be34 <bt_att_send+0xc8>
    be3e:	bf00      	nop
    be40:	00031449 	.word	0x00031449
    be44:	0002fa94 	.word	0x0002fa94

0000be48 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
    be48:	b570      	push	{r4, r5, r6, lr}
    be4a:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan, *tmp;

	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
    be4c:	4605      	mov	r5, r0
    be4e:	b950      	cbnz	r0, be66 <bt_att_req_send+0x1e>
    be50:	4924      	ldr	r1, [pc, #144]	; (bee4 <bt_att_req_send+0x9c>)
    be52:	4825      	ldr	r0, [pc, #148]	; (bee8 <bt_att_req_send+0xa0>)
    be54:	f640 32e2 	movw	r2, #3042	; 0xbe2
    be58:	f01b f889 	bl	26f6e <printk>
    be5c:	f640 31e2 	movw	r1, #3042	; 0xbe2
    be60:	4820      	ldr	r0, [pc, #128]	; (bee4 <bt_att_req_send+0x9c>)
    be62:	f01b fafd 	bl	27460 <assert_post_action>
	__ASSERT_NO_MSG(req);
    be66:	b954      	cbnz	r4, be7e <bt_att_req_send+0x36>
    be68:	491e      	ldr	r1, [pc, #120]	; (bee4 <bt_att_req_send+0x9c>)
    be6a:	481f      	ldr	r0, [pc, #124]	; (bee8 <bt_att_req_send+0xa0>)
    be6c:	f640 32e3 	movw	r2, #3043	; 0xbe3
    be70:	f01b f87d 	bl	26f6e <printk>
    be74:	f640 31e3 	movw	r1, #3043	; 0xbe3
    be78:	481a      	ldr	r0, [pc, #104]	; (bee4 <bt_att_req_send+0x9c>)
    be7a:	f01b faf1 	bl	27460 <assert_post_action>

	att = att_get(conn);
    be7e:	4628      	mov	r0, r5
    be80:	f7ff f9e0 	bl	b244 <att_get>
	if (!att) {
    be84:	4605      	mov	r5, r0
    be86:	b930      	cbnz	r0, be96 <bt_att_req_send+0x4e>
		net_buf_unref(req->buf);
    be88:	6920      	ldr	r0, [r4, #16]
    be8a:	f013 f863 	bl	1ef54 <net_buf_unref>
		req->buf = NULL;
    be8e:	6125      	str	r5, [r4, #16]
		return -ENOTCONN;
    be90:	f06f 007f 	mvn.w	r0, #127	; 0x7f
	sys_slist_append(&att->reqs, &req->node);

	BT_DBG("req %p queued", req);

	return 0;
}
    be94:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    be96:	6a83      	ldr	r3, [r0, #40]	; 0x28
    be98:	b153      	cbz	r3, beb0 <bt_att_req_send+0x68>
    be9a:	f5b3 709e 	subs.w	r0, r3, #316	; 0x13c
    be9e:	d007      	beq.n	beb0 <bt_att_req_send+0x68>
    bea0:	681e      	ldr	r6, [r3, #0]
    bea2:	b10e      	cbz	r6, bea8 <bt_att_req_send+0x60>
    bea4:	f5a6 769e 	sub.w	r6, r6, #316	; 0x13c
		if (!chan->req) {
    bea8:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
    beac:	b143      	cbz	r3, bec0 <bt_att_req_send+0x78>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    beae:	b96e      	cbnz	r6, becc <bt_att_req_send+0x84>
	parent->next = child;
    beb0:	2000      	movs	r0, #0
    beb2:	6020      	str	r0, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
    beb4:	68ab      	ldr	r3, [r5, #8]
    beb6:	b98b      	cbnz	r3, bedc <bt_att_req_send+0x94>
	list->head = node;
    beb8:	e9c5 4401 	strd	r4, r4, [r5, #4]
	return 0;
    bebc:	4618      	mov	r0, r3
    bebe:	e7e9      	b.n	be94 <bt_att_req_send+0x4c>
			ret = bt_att_chan_req_send(chan, req);
    bec0:	4621      	mov	r1, r4
    bec2:	f7ff faa1 	bl	b408 <bt_att_chan_req_send>
			if (ret >= 0) {
    bec6:	2800      	cmp	r0, #0
    bec8:	dbf1      	blt.n	beae <bt_att_req_send+0x66>
    beca:	e7e3      	b.n	be94 <bt_att_req_send+0x4c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    becc:	f8d6 313c 	ldr.w	r3, [r6, #316]	; 0x13c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    bed0:	b10b      	cbz	r3, bed6 <bt_att_req_send+0x8e>
    bed2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
{
    bed6:	4630      	mov	r0, r6
    bed8:	461e      	mov	r6, r3
    beda:	e7e5      	b.n	bea8 <bt_att_req_send+0x60>
	parent->next = child;
    bedc:	601c      	str	r4, [r3, #0]
	list->tail = node;
    bede:	60ac      	str	r4, [r5, #8]
    bee0:	e7d8      	b.n	be94 <bt_att_req_send+0x4c>
    bee2:	bf00      	nop
    bee4:	00031449 	.word	0x00031449
    bee8:	0002fa94 	.word	0x0002fa94

0000beec <db_hash_set>:

static uint8_t stored_hash[16];

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
    beec:	b510      	push	{r4, lr}
	ssize_t len;

	len = read_cb(cb_arg, stored_hash, sizeof(stored_hash));
    beee:	4908      	ldr	r1, [pc, #32]	; (bf10 <db_hash_set+0x24>)
{
    bef0:	4614      	mov	r4, r2
	len = read_cb(cb_arg, stored_hash, sizeof(stored_hash));
    bef2:	4618      	mov	r0, r3
    bef4:	2210      	movs	r2, #16
    bef6:	47a0      	blx	r4
	if (len < 0) {
    bef8:	1e04      	subs	r4, r0, #0
    befa:	da06      	bge.n	bf0a <db_hash_set+0x1e>
		BT_ERR("Failed to decode value (err %zd)", len);
    befc:	4622      	mov	r2, r4
    befe:	2145      	movs	r1, #69	; 0x45
    bf00:	4804      	ldr	r0, [pc, #16]	; (bf14 <db_hash_set+0x28>)
    bf02:	f01b f834 	bl	26f6e <printk>
	}

	BT_HEXDUMP_DBG(stored_hash, sizeof(stored_hash), "Stored Hash: ");

	return 0;
}
    bf06:	4620      	mov	r0, r4
    bf08:	bd10      	pop	{r4, pc}
	return 0;
    bf0a:	2400      	movs	r4, #0
    bf0c:	e7fb      	b.n	bf06 <db_hash_set+0x1a>
    bf0e:	bf00      	nop
    bf10:	2000482f 	.word	0x2000482f
    bf14:	0003173b 	.word	0x0003173b

0000bf18 <db_hash_store>:
	err = settings_save_one("bt/hash", &db_hash, sizeof(db_hash));
    bf18:	2210      	movs	r2, #16
{
    bf1a:	b508      	push	{r3, lr}
	err = settings_save_one("bt/hash", &db_hash, sizeof(db_hash));
    bf1c:	4906      	ldr	r1, [pc, #24]	; (bf38 <db_hash_store+0x20>)
    bf1e:	4807      	ldr	r0, [pc, #28]	; (bf3c <db_hash_store+0x24>)
    bf20:	f7f9 fe80 	bl	5c24 <settings_save_one>
	if (err) {
    bf24:	4602      	mov	r2, r0
    bf26:	b128      	cbz	r0, bf34 <db_hash_store+0x1c>
		BT_ERR("Failed to save Database Hash (err %d)", err);
    bf28:	2145      	movs	r1, #69	; 0x45
    bf2a:	4805      	ldr	r0, [pc, #20]	; (bf40 <db_hash_store+0x28>)
}
    bf2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save Database Hash (err %d)", err);
    bf30:	f01b b81d 	b.w	26f6e <printk>
}
    bf34:	bd08      	pop	{r3, pc}
    bf36:	bf00      	nop
    bf38:	2000481f 	.word	0x2000481f
    bf3c:	00031761 	.word	0x00031761
    bf40:	00031769 	.word	0x00031769

0000bf44 <sc_store>:
{
    bf44:	b570      	push	{r4, r5, r6, lr}
	if (cfg->id) {
    bf46:	4604      	mov	r4, r0
{
    bf48:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
    bf4a:	f814 2b01 	ldrb.w	r2, [r4], #1
{
    bf4e:	4605      	mov	r5, r0
	if (cfg->id) {
    bf50:	b1ca      	cbz	r2, bf86 <sc_store+0x42>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
    bf52:	ae02      	add	r6, sp, #8
    bf54:	2104      	movs	r1, #4
    bf56:	4630      	mov	r0, r6
    bf58:	f01a ff6e 	bl	26e38 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
    bf5c:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
    bf5e:	4623      	mov	r3, r4
    bf60:	4a0a      	ldr	r2, [pc, #40]	; (bf8c <sc_store+0x48>)
    bf62:	2124      	movs	r1, #36	; 0x24
    bf64:	a803      	add	r0, sp, #12
    bf66:	f7fb feb9 	bl	7cdc <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
    bf6a:	2204      	movs	r2, #4
    bf6c:	f105 0108 	add.w	r1, r5, #8
    bf70:	a803      	add	r0, sp, #12
    bf72:	f7f9 fe57 	bl	5c24 <settings_save_one>
	if (err) {
    bf76:	4602      	mov	r2, r0
    bf78:	b118      	cbz	r0, bf82 <sc_store+0x3e>
		BT_ERR("failed to store SC (err %d)", err);
    bf7a:	2145      	movs	r1, #69	; 0x45
    bf7c:	4804      	ldr	r0, [pc, #16]	; (bf90 <sc_store+0x4c>)
    bf7e:	f01a fff6 	bl	26f6e <printk>
}
    bf82:	b00c      	add	sp, #48	; 0x30
    bf84:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
    bf86:	9200      	str	r2, [sp, #0]
    bf88:	e7e9      	b.n	bf5e <sc_store+0x1a>
    bf8a:	bf00      	nop
    bf8c:	000318be 	.word	0x000318be
    bf90:	00031894 	.word	0x00031894

0000bf94 <bt_gatt_service_init.part.13>:
static void bt_gatt_service_init(void)
    bf94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    bf96:	4d0d      	ldr	r5, [pc, #52]	; (bfcc <bt_gatt_service_init.part.13+0x38>)
    bf98:	4c0d      	ldr	r4, [pc, #52]	; (bfd0 <bt_gatt_service_init.part.13+0x3c>)
    bf9a:	4e0e      	ldr	r6, [pc, #56]	; (bfd4 <bt_gatt_service_init.part.13+0x40>)
    bf9c:	462f      	mov	r7, r5
    bf9e:	42ac      	cmp	r4, r5
    bfa0:	d90a      	bls.n	bfb8 <bt_gatt_service_init.part.13+0x24>
    bfa2:	4631      	mov	r1, r6
    bfa4:	480c      	ldr	r0, [pc, #48]	; (bfd8 <bt_gatt_service_init.part.13+0x44>)
    bfa6:	f44f 6283 	mov.w	r2, #1048	; 0x418
    bfaa:	f01a ffe0 	bl	26f6e <printk>
    bfae:	f44f 6183 	mov.w	r1, #1048	; 0x418
    bfb2:	4630      	mov	r0, r6
    bfb4:	f01b fa54 	bl	27460 <assert_post_action>
    bfb8:	42bc      	cmp	r4, r7
    bfba:	d300      	bcc.n	bfbe <bt_gatt_service_init.part.13+0x2a>
}
    bfbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		last_static_handle += svc->attr_count;
    bfbe:	4a07      	ldr	r2, [pc, #28]	; (bfdc <bt_gatt_service_init.part.13+0x48>)
    bfc0:	6863      	ldr	r3, [r4, #4]
    bfc2:	8811      	ldrh	r1, [r2, #0]
    bfc4:	440b      	add	r3, r1
    bfc6:	8013      	strh	r3, [r2, #0]
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    bfc8:	3408      	adds	r4, #8
    bfca:	e7e8      	b.n	bf9e <bt_gatt_service_init.part.13+0xa>
    bfcc:	0002e324 	.word	0x0002e324
    bfd0:	0002e314 	.word	0x0002e314
    bfd4:	00031616 	.word	0x00031616
    bfd8:	0002fa94 	.word	0x0002fa94
    bfdc:	20004686 	.word	0x20004686

0000bfe0 <read_ppcp>:
{
    bfe0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    bfe2:	4610      	mov	r0, r2
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
    bfe4:	4a07      	ldr	r2, [pc, #28]	; (c004 <read_ppcp+0x24>)
{
    bfe6:	4619      	mov	r1, r3
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
    bfe8:	f44f 1328 	mov.w	r3, #2752512	; 0x2a0000
    bfec:	e9cd 2302 	strd	r2, r3, [sp, #8]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
    bff0:	2308      	movs	r3, #8
    bff2:	9300      	str	r3, [sp, #0]
    bff4:	f8bd 2018 	ldrh.w	r2, [sp, #24]
    bff8:	446b      	add	r3, sp
    bffa:	f01d ff5c 	bl	29eb6 <bt_gatt_attr_read.constprop.24>
}
    bffe:	b005      	add	sp, #20
    c000:	f85d fb04 	ldr.w	pc, [sp], #4
    c004:	00280018 	.word	0x00280018

0000c008 <sc_commit.part.15>:
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    c008:	f44f 72a4 	mov.w	r2, #328	; 0x148
    c00c:	2300      	movs	r3, #0
    c00e:	4902      	ldr	r1, [pc, #8]	; (c018 <sc_commit.part.15+0x10>)
    c010:	4802      	ldr	r0, [pc, #8]	; (c01c <sc_commit.part.15+0x14>)
    c012:	f017 bec1 	b.w	23d98 <k_delayed_work_submit_to_queue>
    c016:	bf00      	nop
    c018:	20001b30 	.word	0x20001b30
    c01c:	20002490 	.word	0x20002490

0000c020 <sc_commit>:
{
    c020:	b508      	push	{r3, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    c022:	f06f 0102 	mvn.w	r1, #2
    c026:	4806      	ldr	r0, [pc, #24]	; (c040 <sc_commit+0x20>)
    c028:	f01d ff1c 	bl	29e64 <atomic_and>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    c02c:	2100      	movs	r1, #0
    c02e:	4804      	ldr	r0, [pc, #16]	; (c040 <sc_commit+0x20>)
    c030:	f01d ffab 	bl	29f8a <atomic_test_bit>
    c034:	b108      	cbz	r0, c03a <sc_commit+0x1a>
    c036:	f7ff ffe7 	bl	c008 <sc_commit.part.15>
}
    c03a:	2000      	movs	r0, #0
    c03c:	bd08      	pop	{r3, pc}
    c03e:	bf00      	nop
    c040:	20001b60 	.word	0x20001b60

0000c044 <ccc_save>:
{
    c044:	b538      	push	{r3, r4, r5, lr}
    c046:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    c048:	4b0b      	ldr	r3, [pc, #44]	; (c078 <ccc_save+0x34>)
    c04a:	6882      	ldr	r2, [r0, #8]
    c04c:	429a      	cmp	r2, r3
{
    c04e:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    c050:	d10f      	bne.n	c072 <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
    c052:	7922      	ldrb	r2, [r4, #4]
    c054:	6821      	ldr	r1, [r4, #0]
    c056:	68c0      	ldr	r0, [r0, #12]
    c058:	f01d ffa0 	bl	29f9c <ccc_find_cfg>
	if (!cfg) {
    c05c:	b148      	cbz	r0, c072 <ccc_save+0x2e>
	save->store[save->count].handle = handle;
    c05e:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
	save->store[save->count].value = cfg->value;
    c062:	8901      	ldrh	r1, [r0, #8]
    c064:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->count++;
    c068:	3301      	adds	r3, #1
	save->store[save->count].handle = handle;
    c06a:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
    c06c:	8151      	strh	r1, [r2, #10]
	save->count++;
    c06e:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
    c072:	2001      	movs	r0, #1
    c074:	bd38      	pop	{r3, r4, r5, pc}
    c076:	bf00      	nop
    c078:	0000c61d 	.word	0x0000c61d

0000c07c <ccc_load>:
{
    c07c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    c07e:	4b20      	ldr	r3, [pc, #128]	; (c100 <ccc_load+0x84>)
{
    c080:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    c082:	6882      	ldr	r2, [r0, #8]
    c084:	429a      	cmp	r2, r3
    c086:	d002      	beq.n	c08e <ccc_load+0x12>
		return BT_GATT_ITER_CONTINUE;
    c088:	2001      	movs	r0, #1
}
    c08a:	b003      	add	sp, #12
    c08c:	bd30      	pop	{r4, r5, pc}
	if (!load->entry) {
    c08e:	68a3      	ldr	r3, [r4, #8]
	ccc = attr->user_data;
    c090:	68c5      	ldr	r5, [r0, #12]
	if (!load->entry) {
    c092:	b94b      	cbnz	r3, c0a8 <ccc_load+0x2c>
	cfg = ccc_find_cfg(ccc, addr, id);
    c094:	7922      	ldrb	r2, [r4, #4]
    c096:	6821      	ldr	r1, [r4, #0]
    c098:	4628      	mov	r0, r5
    c09a:	f01d ff7f 	bl	29f9c <ccc_find_cfg>
	if (!cfg) {
    c09e:	2800      	cmp	r0, #0
    c0a0:	d0f2      	beq.n	c088 <ccc_load+0xc>
	clear_ccc_cfg(cfg);
    c0a2:	f01d fef5 	bl	29e90 <clear_ccc_cfg>
    c0a6:	e7ef      	b.n	c088 <ccc_load+0xc>
	} else if (!load->count) {
    c0a8:	68e0      	ldr	r0, [r4, #12]
    c0aa:	2800      	cmp	r0, #0
    c0ac:	d0ed      	beq.n	c08a <ccc_load+0xe>
	if (load->entry->handle != handle) {
    c0ae:	881b      	ldrh	r3, [r3, #0]
    c0b0:	4299      	cmp	r1, r3
    c0b2:	d00a      	beq.n	c0ca <ccc_load+0x4e>
		if (load->entry->handle < handle) {
    c0b4:	d9e8      	bls.n	c088 <ccc_load+0xc>
	load->count--;
    c0b6:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
    c0b8:	68a3      	ldr	r3, [r4, #8]
	load->count--;
    c0ba:	3801      	subs	r0, #1
	load->entry++;
    c0bc:	3304      	adds	r3, #4
	load->count--;
    c0be:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    c0c0:	3000      	adds	r0, #0
	load->entry++;
    c0c2:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    c0c4:	bf18      	it	ne
    c0c6:	2001      	movne	r0, #1
    c0c8:	e7df      	b.n	c08a <ccc_load+0xe>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
    c0ca:	7922      	ldrb	r2, [r4, #4]
    c0cc:	6821      	ldr	r1, [r4, #0]
    c0ce:	4628      	mov	r0, r5
    c0d0:	f01d ff64 	bl	29f9c <ccc_find_cfg>
	if (!cfg) {
    c0d4:	4602      	mov	r2, r0
    c0d6:	b978      	cbnz	r0, c0f8 <ccc_load+0x7c>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
    c0d8:	9000      	str	r0, [sp, #0]
    c0da:	4669      	mov	r1, sp
    c0dc:	f8cd 0003 	str.w	r0, [sp, #3]
    c0e0:	4628      	mov	r0, r5
    c0e2:	f01d ff5b 	bl	29f9c <ccc_find_cfg>
		if (!cfg) {
    c0e6:	4602      	mov	r2, r0
    c0e8:	2800      	cmp	r0, #0
    c0ea:	d0e4      	beq.n	c0b6 <ccc_load+0x3a>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
    c0ec:	6821      	ldr	r1, [r4, #0]
    c0ee:	3001      	adds	r0, #1
    c0f0:	f01d fec7 	bl	29e82 <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
    c0f4:	7923      	ldrb	r3, [r4, #4]
    c0f6:	7013      	strb	r3, [r2, #0]
	cfg->value = load->entry->value;
    c0f8:	68a3      	ldr	r3, [r4, #8]
    c0fa:	885b      	ldrh	r3, [r3, #2]
    c0fc:	8113      	strh	r3, [r2, #8]
    c0fe:	e7da      	b.n	c0b6 <ccc_load+0x3a>
    c100:	0000c61d 	.word	0x0000c61d

0000c104 <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
    c104:	b508      	push	{r3, lr}
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
    c106:	6881      	ldr	r1, [r0, #8]
{
    c108:	4613      	mov	r3, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    c10a:	4a07      	ldr	r2, [pc, #28]	; (c128 <remove_peer_from_attr+0x24>)
    c10c:	4291      	cmp	r1, r2
    c10e:	d109      	bne.n	c124 <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
    c110:	791a      	ldrb	r2, [r3, #4]
    c112:	6819      	ldr	r1, [r3, #0]
    c114:	68c0      	ldr	r0, [r0, #12]
    c116:	f01d ff41 	bl	29f9c <ccc_find_cfg>
	if (cfg) {
    c11a:	b118      	cbz	r0, c124 <remove_peer_from_attr+0x20>
    c11c:	2300      	movs	r3, #0
    c11e:	6003      	str	r3, [r0, #0]
    c120:	6043      	str	r3, [r0, #4]
    c122:	8103      	strh	r3, [r0, #8]
		memset(cfg, 0, sizeof(*cfg));
	}

	return BT_GATT_ITER_CONTINUE;
}
    c124:	2001      	movs	r0, #1
    c126:	bd08      	pop	{r3, pc}
    c128:	0000c61d 	.word	0x0000c61d

0000c12c <find_cf_cfg_by_addr>:
{
    c12c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c130:	4c0d      	ldr	r4, [pc, #52]	; (c168 <find_cf_cfg_by_addr+0x3c>)
    c132:	4607      	mov	r7, r0
    c134:	4688      	mov	r8, r1
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
    c136:	2600      	movs	r6, #0
    c138:	4625      	mov	r5, r4
			if (id == cf_cfg[i].id &&
    c13a:	7823      	ldrb	r3, [r4, #0]
    c13c:	42bb      	cmp	r3, r7
    c13e:	d10b      	bne.n	c158 <find_cf_cfg_by_addr+0x2c>
	return memcmp(a, b, sizeof(*a));
    c140:	2207      	movs	r2, #7
    c142:	1c61      	adds	r1, r4, #1
    c144:	4640      	mov	r0, r8
    c146:	ea4f 1906 	mov.w	r9, r6, lsl #4
    c14a:	f021 fa0d 	bl	2d568 <memcmp>
    c14e:	b918      	cbnz	r0, c158 <find_cf_cfg_by_addr+0x2c>
				return &cf_cfg[i];
    c150:	eb05 0009 	add.w	r0, r5, r9
}
    c154:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
    c158:	3601      	adds	r6, #1
    c15a:	2e03      	cmp	r6, #3
    c15c:	f104 0410 	add.w	r4, r4, #16
    c160:	d1eb      	bne.n	c13a <find_cf_cfg_by_addr+0xe>
	return NULL;
    c162:	2000      	movs	r0, #0
    c164:	e7f6      	b.n	c154 <find_cf_cfg_by_addr+0x28>
    c166:	bf00      	nop
    c168:	20002c3c 	.word	0x20002c3c

0000c16c <find_sc_cfg>:
{
    c16c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c170:	4c0e      	ldr	r4, [pc, #56]	; (c1ac <find_sc_cfg+0x40>)
    c172:	4607      	mov	r7, r0
    c174:	4688      	mov	r8, r1
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    c176:	2600      	movs	r6, #0
    c178:	4625      	mov	r5, r4
    c17a:	f04f 090c 	mov.w	r9, #12
		if (id == sc_cfg[i].id &&
    c17e:	7823      	ldrb	r3, [r4, #0]
    c180:	42bb      	cmp	r3, r7
    c182:	d10b      	bne.n	c19c <find_sc_cfg+0x30>
    c184:	2207      	movs	r2, #7
    c186:	4641      	mov	r1, r8
    c188:	1c60      	adds	r0, r4, #1
    c18a:	fb09 fa06 	mul.w	sl, r9, r6
    c18e:	f021 f9eb 	bl	2d568 <memcmp>
    c192:	b918      	cbnz	r0, c19c <find_sc_cfg+0x30>
			return &sc_cfg[i];
    c194:	eb05 000a 	add.w	r0, r5, sl
}
    c198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    c19c:	3601      	adds	r6, #1
    c19e:	2e03      	cmp	r6, #3
    c1a0:	f104 040c 	add.w	r4, r4, #12
    c1a4:	d1eb      	bne.n	c17e <find_sc_cfg+0x12>
	return NULL;
    c1a6:	2000      	movs	r0, #0
    c1a8:	e7f6      	b.n	c198 <find_sc_cfg+0x2c>
    c1aa:	bf00      	nop
    c1ac:	20004688 	.word	0x20004688

0000c1b0 <sc_save>:
{
    c1b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    c1b4:	4680      	mov	r8, r0
    c1b6:	460f      	mov	r7, r1
    c1b8:	4616      	mov	r6, r2
    c1ba:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
    c1bc:	f7ff ffd6 	bl	c16c <find_sc_cfg>
	if (!cfg) {
    c1c0:	4604      	mov	r4, r0
    c1c2:	b998      	cbnz	r0, c1ec <sc_save+0x3c>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
    c1c4:	4669      	mov	r1, sp
    c1c6:	9000      	str	r0, [sp, #0]
    c1c8:	f8cd 0003 	str.w	r0, [sp, #3]
    c1cc:	f7ff ffce 	bl	c16c <find_sc_cfg>
		if (!cfg) {
    c1d0:	4604      	mov	r4, r0
    c1d2:	b930      	cbnz	r0, c1e2 <sc_save+0x32>
			BT_ERR("unable to save SC: no cfg left");
    c1d4:	2145      	movs	r1, #69	; 0x45
    c1d6:	4812      	ldr	r0, [pc, #72]	; (c220 <sc_save+0x70>)
    c1d8:	f01a fec9 	bl	26f6e <printk>
}
    c1dc:	b002      	add	sp, #8
    c1de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
    c1e2:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
    c1e6:	4639      	mov	r1, r7
    c1e8:	f01d fe4b 	bl	29e82 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
    c1ec:	8922      	ldrh	r2, [r4, #8]
    c1ee:	8963      	ldrh	r3, [r4, #10]
    c1f0:	b96a      	cbnz	r2, c20e <sc_save+0x5e>
    c1f2:	b973      	cbnz	r3, c212 <sc_save+0x62>
		cfg->data.start = start;
    c1f4:	8126      	strh	r6, [r4, #8]
		*end = new_end;
    c1f6:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
    c1f8:	4621      	mov	r1, r4
    c1fa:	f811 0b01 	ldrb.w	r0, [r1], #1
    c1fe:	f01d f858 	bl	292b2 <bt_addr_le_is_bonded>
    c202:	2800      	cmp	r0, #0
    c204:	d0ea      	beq.n	c1dc <sc_save+0x2c>
		sc_store(cfg);
    c206:	4620      	mov	r0, r4
    c208:	f7ff fe9c 	bl	bf44 <sc_store>
    c20c:	e7e6      	b.n	c1dc <sc_save+0x2c>
	if (new_start >= *start && new_end <= *end) {
    c20e:	4296      	cmp	r6, r2
    c210:	d302      	bcc.n	c218 <sc_save+0x68>
    c212:	429d      	cmp	r5, r3
    c214:	d8ef      	bhi.n	c1f6 <sc_save+0x46>
    c216:	e7e1      	b.n	c1dc <sc_save+0x2c>
	if (*end < new_end) {
    c218:	429d      	cmp	r5, r3
		*start = new_start;
    c21a:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
    c21c:	d9ec      	bls.n	c1f8 <sc_save+0x48>
    c21e:	e7ea      	b.n	c1f6 <sc_save+0x46>
    c220:	00031828 	.word	0x00031828

0000c224 <bt_gatt_clear_sc>:
{
    c224:	b570      	push	{r4, r5, r6, lr}
    c226:	b08c      	sub	sp, #48	; 0x30
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
    c228:	f7ff ffa0 	bl	c16c <find_sc_cfg>
	if (!cfg) {
    c22c:	4605      	mov	r5, r0
    c22e:	b1d8      	cbz	r0, c268 <bt_gatt_clear_sc+0x44>
		if (cfg->id) {
    c230:	4604      	mov	r4, r0
    c232:	f814 2b01 	ldrb.w	r2, [r4], #1
    c236:	b1d2      	cbz	r2, c26e <bt_gatt_clear_sc+0x4a>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
    c238:	ae02      	add	r6, sp, #8
    c23a:	2104      	movs	r1, #4
    c23c:	4630      	mov	r0, r6
    c23e:	f01a fdfb 	bl	26e38 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
    c242:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
    c244:	4a0b      	ldr	r2, [pc, #44]	; (c274 <bt_gatt_clear_sc+0x50>)
    c246:	4623      	mov	r3, r4
    c248:	2124      	movs	r1, #36	; 0x24
    c24a:	a803      	add	r0, sp, #12
    c24c:	f7fb fd46 	bl	7cdc <bt_settings_encode_key>
		err = settings_delete(key);
    c250:	a803      	add	r0, sp, #12
    c252:	f01b fa95 	bl	27780 <settings_delete>
		if (err) {
    c256:	4602      	mov	r2, r0
    c258:	b118      	cbz	r0, c262 <bt_gatt_clear_sc+0x3e>
			BT_ERR("failed to delete SC (err %d)", err);
    c25a:	2145      	movs	r1, #69	; 0x45
    c25c:	4806      	ldr	r0, [pc, #24]	; (c278 <bt_gatt_clear_sc+0x54>)
    c25e:	f01a fe86 	bl	26f6e <printk>
	clear_sc_cfg(cfg);
    c262:	4628      	mov	r0, r5
    c264:	f01d fe22 	bl	29eac <clear_sc_cfg>
}
    c268:	2000      	movs	r0, #0
    c26a:	b00c      	add	sp, #48	; 0x30
    c26c:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
    c26e:	9200      	str	r2, [sp, #0]
    c270:	e7e8      	b.n	c244 <bt_gatt_clear_sc+0x20>
    c272:	bf00      	nop
    c274:	000318be 	.word	0x000318be
    c278:	000315c6 	.word	0x000315c6

0000c27c <sc_clear>:
{
    c27c:	b538      	push	{r3, r4, r5, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    c27e:	f100 0488 	add.w	r4, r0, #136	; 0x88
{
    c282:	4605      	mov	r5, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    c284:	4621      	mov	r1, r4
    c286:	7a00      	ldrb	r0, [r0, #8]
    c288:	f01d f813 	bl	292b2 <bt_addr_le_is_bonded>
    c28c:	7a2b      	ldrb	r3, [r5, #8]
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
    c28e:	4621      	mov	r1, r4
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    c290:	b150      	cbz	r0, c2a8 <sc_clear+0x2c>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
    c292:	4618      	mov	r0, r3
    c294:	f7ff ffc6 	bl	c224 <bt_gatt_clear_sc>
		if (err) {
    c298:	4602      	mov	r2, r0
    c29a:	b168      	cbz	r0, c2b8 <sc_clear+0x3c>
			BT_ERR("Failed to clear SC %d", err);
    c29c:	2145      	movs	r1, #69	; 0x45
    c29e:	4807      	ldr	r0, [pc, #28]	; (c2bc <sc_clear+0x40>)
}
    c2a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			BT_ERR("Failed to clear SC %d", err);
    c2a4:	f01a be63 	b.w	26f6e <printk>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
    c2a8:	4618      	mov	r0, r3
    c2aa:	f7ff ff5f 	bl	c16c <find_sc_cfg>
		if (cfg) {
    c2ae:	b118      	cbz	r0, c2b8 <sc_clear+0x3c>
}
    c2b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			clear_sc_cfg(cfg);
    c2b4:	f01d bdfa 	b.w	29eac <clear_sc_cfg>
}
    c2b8:	bd38      	pop	{r3, r4, r5, pc}
    c2ba:	bf00      	nop
    c2bc:	0003180d 	.word	0x0003180d

0000c2c0 <disconnected_cb>:
{
    c2c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c2c4:	4617      	mov	r7, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    c2c6:	4b23      	ldr	r3, [pc, #140]	; (c354 <disconnected_cb+0x94>)
    c2c8:	6882      	ldr	r2, [r0, #8]
    c2ca:	429a      	cmp	r2, r3
{
    c2cc:	4680      	mov	r8, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    c2ce:	d12a      	bne.n	c326 <disconnected_cb+0x66>
	ccc = attr->user_data;
    c2d0:	68c5      	ldr	r5, [r0, #12]
	if (!ccc->value) {
    c2d2:	8beb      	ldrh	r3, [r5, #30]
    c2d4:	b33b      	cbz	r3, c326 <disconnected_cb+0x66>
				if (ccc == &sc_ccc) {
    c2d6:	f8df b080 	ldr.w	fp, [pc, #128]	; c358 <disconnected_cb+0x98>
    c2da:	1c6c      	adds	r4, r5, #1
    c2dc:	f105 0a1f 	add.w	sl, r5, #31
	value_used = false;
    c2e0:	2600      	movs	r6, #0
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    c2e2:	f107 0988 	add.w	r9, r7, #136	; 0x88
		if (!cfg->value) {
    c2e6:	f8b4 3007 	ldrh.w	r3, [r4, #7]
    c2ea:	b193      	cbz	r3, c312 <disconnected_cb+0x52>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    c2ec:	4622      	mov	r2, r4
    c2ee:	f814 1c01 	ldrb.w	r1, [r4, #-1]
    c2f2:	4638      	mov	r0, r7
    c2f4:	f01d f8ca 	bl	2948c <bt_conn_is_peer_addr_le>
    c2f8:	b9c0      	cbnz	r0, c32c <disconnected_cb+0x6c>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    c2fa:	4621      	mov	r1, r4
    c2fc:	f814 0c01 	ldrb.w	r0, [r4, #-1]
    c300:	f01d f90d 	bl	2951e <bt_conn_lookup_addr_le>
			if (tmp) {
    c304:	b128      	cbz	r0, c312 <disconnected_cb+0x52>
				if (tmp->state == BT_CONN_CONNECTED) {
    c306:	7a83      	ldrb	r3, [r0, #10]
					value_used = true;
    c308:	2b07      	cmp	r3, #7
    c30a:	bf08      	it	eq
    c30c:	2601      	moveq	r6, #1
				bt_conn_unref(tmp);
    c30e:	f7fe f91b 	bl	a548 <bt_conn_unref>
    c312:	340a      	adds	r4, #10
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    c314:	45a2      	cmp	sl, r4
    c316:	d1e6      	bne.n	c2e6 <disconnected_cb+0x26>
	if (!value_used) {
    c318:	b92e      	cbnz	r6, c326 <disconnected_cb+0x66>
		if (ccc->cfg_changed) {
    c31a:	6a2b      	ldr	r3, [r5, #32]
		ccc->value = 0U;
    c31c:	83ee      	strh	r6, [r5, #30]
		if (ccc->cfg_changed) {
    c31e:	b113      	cbz	r3, c326 <disconnected_cb+0x66>
			ccc->cfg_changed(attr, ccc->value);
    c320:	4631      	mov	r1, r6
    c322:	4640      	mov	r0, r8
    c324:	4798      	blx	r3
}
    c326:	2001      	movs	r0, #1
    c328:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    c32c:	4649      	mov	r1, r9
    c32e:	7a38      	ldrb	r0, [r7, #8]
    c330:	f01c ffbf 	bl	292b2 <bt_addr_le_is_bonded>
    c334:	b940      	cbnz	r0, c348 <disconnected_cb+0x88>
				if (ccc == &sc_ccc) {
    c336:	455d      	cmp	r5, fp
    c338:	d102      	bne.n	c340 <disconnected_cb+0x80>
					sc_clear(conn);
    c33a:	4638      	mov	r0, r7
    c33c:	f7ff ff9e 	bl	c27c <sc_clear>
				clear_ccc_cfg(cfg);
    c340:	1e60      	subs	r0, r4, #1
    c342:	f01d fda5 	bl	29e90 <clear_ccc_cfg>
    c346:	e7e4      	b.n	c312 <disconnected_cb+0x52>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    c348:	4649      	mov	r1, r9
    c34a:	4620      	mov	r0, r4
    c34c:	f01d fd99 	bl	29e82 <bt_addr_le_copy>
    c350:	e7df      	b.n	c312 <disconnected_cb+0x52>
    c352:	bf00      	nop
    c354:	0000c61d 	.word	0x0000c61d
    c358:	200007d4 	.word	0x200007d4

0000c35c <sc_set>:
{
    c35c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c360:	460e      	mov	r6, r1
    c362:	b087      	sub	sp, #28
    c364:	4690      	mov	r8, r2
    c366:	4699      	mov	r9, r3
	if (!name) {
    c368:	4604      	mov	r4, r0
    c36a:	b948      	cbnz	r0, c380 <sc_set+0x24>
		BT_ERR("Insufficient number of arguments");
    c36c:	2145      	movs	r1, #69	; 0x45
    c36e:	4828      	ldr	r0, [pc, #160]	; (c410 <sc_set+0xb4>)
    c370:	f01a fdfd 	bl	26f6e <printk>
		return -EINVAL;
    c374:	f06f 0515 	mvn.w	r5, #21
}
    c378:	4628      	mov	r0, r5
    c37a:	b007      	add	sp, #28
    c37c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
    c380:	a902      	add	r1, sp, #8
    c382:	f01c fc9d 	bl	28cc0 <bt_settings_decode_key>
	if (err) {
    c386:	4605      	mov	r5, r0
    c388:	b128      	cbz	r0, c396 <sc_set+0x3a>
		BT_ERR("Unable to decode address %s", log_strdup(name));
    c38a:	4622      	mov	r2, r4
    c38c:	2145      	movs	r1, #69	; 0x45
    c38e:	4821      	ldr	r0, [pc, #132]	; (c414 <sc_set+0xb8>)
    c390:	f01a fded 	bl	26f6e <printk>
    c394:	e7ee      	b.n	c374 <sc_set+0x18>
	settings_name_next(name, &next);
    c396:	a901      	add	r1, sp, #4
    c398:	4620      	mov	r0, r4
    c39a:	f01b fa15 	bl	277c8 <settings_name_next>
	if (!next) {
    c39e:	9801      	ldr	r0, [sp, #4]
    c3a0:	b1d8      	cbz	r0, c3da <sc_set+0x7e>
		id = strtol(next, NULL, 10);
    c3a2:	220a      	movs	r2, #10
    c3a4:	4629      	mov	r1, r5
    c3a6:	f019 ff77 	bl	26298 <strtol>
    c3aa:	b2c7      	uxtb	r7, r0
	cfg = find_sc_cfg(id, &addr);
    c3ac:	a902      	add	r1, sp, #8
    c3ae:	4638      	mov	r0, r7
    c3b0:	f7ff fedc 	bl	c16c <find_sc_cfg>
	if (!cfg && len_rd) {
    c3b4:	4604      	mov	r4, r0
    c3b6:	bb28      	cbnz	r0, c404 <sc_set+0xa8>
    c3b8:	2e00      	cmp	r6, #0
    c3ba:	d0dd      	beq.n	c378 <sc_set+0x1c>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
    c3bc:	a904      	add	r1, sp, #16
    c3be:	9004      	str	r0, [sp, #16]
    c3c0:	f8cd 0013 	str.w	r0, [sp, #19]
    c3c4:	f7ff fed2 	bl	c16c <find_sc_cfg>
		if (!cfg) {
    c3c8:	4604      	mov	r4, r0
    c3ca:	b940      	cbnz	r0, c3de <sc_set+0x82>
			BT_ERR("Unable to restore SC: no cfg left");
    c3cc:	2145      	movs	r1, #69	; 0x45
    c3ce:	4812      	ldr	r0, [pc, #72]	; (c418 <sc_set+0xbc>)
    c3d0:	f01a fdcd 	bl	26f6e <printk>
			return -ENOMEM;
    c3d4:	f06f 050b 	mvn.w	r5, #11
    c3d8:	e7ce      	b.n	c378 <sc_set+0x1c>
		id = BT_ID_DEFAULT;
    c3da:	462f      	mov	r7, r5
    c3dc:	e7e6      	b.n	c3ac <sc_set+0x50>
		cfg->id = id;
    c3de:	f800 7b01 	strb.w	r7, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
    c3e2:	a902      	add	r1, sp, #8
    c3e4:	f01d fd4d 	bl	29e82 <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
    c3e8:	f104 0108 	add.w	r1, r4, #8
    c3ec:	2204      	movs	r2, #4
    c3ee:	4648      	mov	r0, r9
    c3f0:	47c0      	blx	r8
		if (len < 0) {
    c3f2:	1e04      	subs	r4, r0, #0
    c3f4:	dac0      	bge.n	c378 <sc_set+0x1c>
			BT_ERR("Failed to decode value (err %zd)", len);
    c3f6:	4622      	mov	r2, r4
    c3f8:	2145      	movs	r1, #69	; 0x45
    c3fa:	4808      	ldr	r0, [pc, #32]	; (c41c <sc_set+0xc0>)
    c3fc:	f01a fdb7 	bl	26f6e <printk>
			return len;
    c400:	4625      	mov	r5, r4
    c402:	e7b9      	b.n	c378 <sc_set+0x1c>
	if (len_rd) {
    c404:	2e00      	cmp	r6, #0
    c406:	d1ef      	bne.n	c3e8 <sc_set+0x8c>
    c408:	6026      	str	r6, [r4, #0]
    c40a:	6066      	str	r6, [r4, #4]
    c40c:	60a6      	str	r6, [r4, #8]
    c40e:	e7b3      	b.n	c378 <sc_set+0x1c>
    c410:	000307a1 	.word	0x000307a1
    c414:	0003184c 	.word	0x0003184c
    c418:	0003186d 	.word	0x0003186d
    c41c:	0003173b 	.word	0x0003173b

0000c420 <find_cf_cfg>:
{
    c420:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    c422:	4c0f      	ldr	r4, [pc, #60]	; (c460 <find_cf_cfg+0x40>)
    c424:	4605      	mov	r5, r0
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
    c426:	2600      	movs	r6, #0
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
    c428:	4627      	mov	r7, r4
		if (!conn) {
    c42a:	1c60      	adds	r0, r4, #1
    c42c:	b985      	cbnz	r5, c450 <find_cf_cfg+0x30>
    c42e:	2207      	movs	r2, #7
    c430:	4669      	mov	r1, sp
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    c432:	9500      	str	r5, [sp, #0]
    c434:	f8cd 5003 	str.w	r5, [sp, #3]
    c438:	f021 f896 	bl	2d568 <memcmp>
    c43c:	b128      	cbz	r0, c44a <find_cf_cfg+0x2a>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
    c43e:	3601      	adds	r6, #1
    c440:	2e03      	cmp	r6, #3
    c442:	f104 0410 	add.w	r4, r4, #16
    c446:	d1ef      	bne.n	c428 <find_cf_cfg+0x8>
	return NULL;
    c448:	2700      	movs	r7, #0
}
    c44a:	4638      	mov	r0, r7
    c44c:	b003      	add	sp, #12
    c44e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    c450:	4602      	mov	r2, r0
    c452:	7821      	ldrb	r1, [r4, #0]
    c454:	4628      	mov	r0, r5
    c456:	f01d f819 	bl	2948c <bt_conn_is_peer_addr_le>
    c45a:	2800      	cmp	r0, #0
    c45c:	d0ef      	beq.n	c43e <find_cf_cfg+0x1e>
    c45e:	e7f4      	b.n	c44a <find_cf_cfg+0x2a>
    c460:	20002c3c 	.word	0x20002c3c

0000c464 <cf_write>:
{
    c464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c468:	f8bd 1018 	ldrh.w	r1, [sp, #24]
	if (offset > sizeof(cfg->data)) {
    c46c:	2901      	cmp	r1, #1
{
    c46e:	4606      	mov	r6, r0
    c470:	4617      	mov	r7, r2
    c472:	4698      	mov	r8, r3
	if (offset > sizeof(cfg->data)) {
    c474:	d842      	bhi.n	c4fc <cf_write+0x98>
	if (offset + len > sizeof(cfg->data)) {
    c476:	4419      	add	r1, r3
    c478:	2901      	cmp	r1, #1
    c47a:	461d      	mov	r5, r3
    c47c:	dc41      	bgt.n	c502 <cf_write+0x9e>
	cfg = find_cf_cfg(conn);
    c47e:	f7ff ffcf 	bl	c420 <find_cf_cfg>
	if (!cfg) {
    c482:	4604      	mov	r4, r0
    c484:	b960      	cbnz	r0, c4a0 <cf_write+0x3c>
		cfg = find_cf_cfg(NULL);
    c486:	f7ff ffcb 	bl	c420 <find_cf_cfg>
	if (!cfg) {
    c48a:	4604      	mov	r4, r0
    c48c:	b940      	cbnz	r0, c4a0 <cf_write+0x3c>
		BT_WARN("No space to store Client Supported Features");
    c48e:	2157      	movs	r1, #87	; 0x57
    c490:	481f      	ldr	r0, [pc, #124]	; (c510 <cf_write+0xac>)
    c492:	f01a fd6c 	bl	26f6e <printk>
    c496:	f06f 0510 	mvn.w	r5, #16
}
    c49a:	4628      	mov	r0, r5
    c49c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
static bool cf_set_value(struct gatt_cf_cfg *cfg, const uint8_t *value, uint16_t len)
    c4a0:	463b      	mov	r3, r7
    c4a2:	eb08 0c07 	add.w	ip, r8, r7
	for (i = 0U; i < len && i <= last_byte; i++) {
    c4a6:	459c      	cmp	ip, r3
    c4a8:	d115      	bne.n	c4d6 <cf_write+0x72>
	for (i = 0U; i < len && i < last_byte; i++) {
    c4aa:	f1b8 0f00 	cmp.w	r8, #0
    c4ae:	d005      	beq.n	c4bc <cf_write+0x58>
		cfg->data[i] |= value[i] & (BIT(last_bit + 1) - 1);
    c4b0:	783b      	ldrb	r3, [r7, #0]
    c4b2:	7a22      	ldrb	r2, [r4, #8]
    c4b4:	f003 0307 	and.w	r3, r3, #7
    c4b8:	4313      	orrs	r3, r2
    c4ba:	7223      	strb	r3, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    c4bc:	f106 0188 	add.w	r1, r6, #136	; 0x88
    c4c0:	1c60      	adds	r0, r4, #1
    c4c2:	f01d fcde 	bl	29e82 <bt_addr_le_copy>
	cfg->id = conn->id;
    c4c6:	4620      	mov	r0, r4
    c4c8:	7a33      	ldrb	r3, [r6, #8]
    c4ca:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    c4ce:	2100      	movs	r1, #0
    c4d0:	f01d fd8f 	bl	29ff2 <atomic_set_bit>
	return len;
    c4d4:	e7e1      	b.n	c49a <cf_write+0x36>
		uint8_t chg_bits = value[i] ^ cfg->data[i];
    c4d6:	f813 2b01 	ldrb.w	r2, [r3], #1
    c4da:	7a20      	ldrb	r0, [r4, #8]
    c4dc:	2100      	movs	r1, #0
    c4de:	4042      	eors	r2, r0
			if ((BIT(bit) & chg_bits) &&
    c4e0:	fa22 fe01 	lsr.w	lr, r2, r1
    c4e4:	f01e 0f01 	tst.w	lr, #1
    c4e8:	d004      	beq.n	c4f4 <cf_write+0x90>
    c4ea:	fa20 fe01 	lsr.w	lr, r0, r1
    c4ee:	f01e 0f01 	tst.w	lr, #1
    c4f2:	d109      	bne.n	c508 <cf_write+0xa4>
    c4f4:	3101      	adds	r1, #1
		for (bit = 0U; bit <= last_bit; bit++) {
    c4f6:	2903      	cmp	r1, #3
    c4f8:	d1f2      	bne.n	c4e0 <cf_write+0x7c>
    c4fa:	e7d4      	b.n	c4a6 <cf_write+0x42>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    c4fc:	f06f 0506 	mvn.w	r5, #6
    c500:	e7cb      	b.n	c49a <cf_write+0x36>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    c502:	f06f 050c 	mvn.w	r5, #12
    c506:	e7c8      	b.n	c49a <cf_write+0x36>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
    c508:	f06f 0512 	mvn.w	r5, #18
    c50c:	e7c5      	b.n	c49a <cf_write+0x36>
    c50e:	bf00      	nop
    c510:	000316ce 	.word	0x000316ce

0000c514 <sc_indicate_rsp>:
{
    c514:	b510      	push	{r4, lr}
    c516:	f06f 0102 	mvn.w	r1, #2
    c51a:	4604      	mov	r4, r0
    c51c:	480d      	ldr	r0, [pc, #52]	; (c554 <sc_indicate_rsp+0x40>)
    c51e:	f01d fca1 	bl	29e64 <atomic_and>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    c522:	2100      	movs	r1, #0
    c524:	480b      	ldr	r0, [pc, #44]	; (c554 <sc_indicate_rsp+0x40>)
    c526:	f01d fd30 	bl	29f8a <atomic_test_bit>
    c52a:	b128      	cbz	r0, c538 <sc_indicate_rsp+0x24>
    c52c:	2200      	movs	r2, #0
    c52e:	2300      	movs	r3, #0
    c530:	4909      	ldr	r1, [pc, #36]	; (c558 <sc_indicate_rsp+0x44>)
    c532:	480a      	ldr	r0, [pc, #40]	; (c55c <sc_indicate_rsp+0x48>)
    c534:	f017 fc30 	bl	23d98 <k_delayed_work_submit_to_queue>
	cfg = find_cf_cfg(conn);
    c538:	4620      	mov	r0, r4
    c53a:	f7ff ff71 	bl	c420 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
    c53e:	b140      	cbz	r0, c552 <sc_indicate_rsp+0x3e>
    c540:	7a03      	ldrb	r3, [r0, #8]
    c542:	07db      	lsls	r3, r3, #31
    c544:	d505      	bpl.n	c552 <sc_indicate_rsp+0x3e>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    c546:	2100      	movs	r1, #0
    c548:	300c      	adds	r0, #12
}
    c54a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    c54e:	f01d bd50 	b.w	29ff2 <atomic_set_bit>
}
    c552:	bd10      	pop	{r4, pc}
    c554:	20001b60 	.word	0x20001b60
    c558:	20001b30 	.word	0x20001b30
    c55c:	20002490 	.word	0x20002490

0000c560 <cf_set>:
{
    c560:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c564:	4689      	mov	r9, r1
    c566:	b085      	sub	sp, #20
    c568:	4617      	mov	r7, r2
    c56a:	4698      	mov	r8, r3
	if (!name) {
    c56c:	4605      	mov	r5, r0
    c56e:	b948      	cbnz	r0, c584 <cf_set+0x24>
		BT_ERR("Insufficient number of arguments");
    c570:	2145      	movs	r1, #69	; 0x45
    c572:	4826      	ldr	r0, [pc, #152]	; (c60c <cf_set+0xac>)
    c574:	f01a fcfb 	bl	26f6e <printk>
		return -EINVAL;
    c578:	f06f 0415 	mvn.w	r4, #21
}
    c57c:	4620      	mov	r0, r4
    c57e:	b005      	add	sp, #20
    c580:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
    c584:	a902      	add	r1, sp, #8
    c586:	f01c fb9b 	bl	28cc0 <bt_settings_decode_key>
	if (err) {
    c58a:	4604      	mov	r4, r0
    c58c:	b128      	cbz	r0, c59a <cf_set+0x3a>
		BT_ERR("Unable to decode address %s", log_strdup(name));
    c58e:	462a      	mov	r2, r5
    c590:	2145      	movs	r1, #69	; 0x45
    c592:	481f      	ldr	r0, [pc, #124]	; (c610 <cf_set+0xb0>)
    c594:	f01a fceb 	bl	26f6e <printk>
    c598:	e7ee      	b.n	c578 <cf_set+0x18>
	settings_name_next(name, &next);
    c59a:	a901      	add	r1, sp, #4
    c59c:	4628      	mov	r0, r5
    c59e:	f01b f913 	bl	277c8 <settings_name_next>
	if (!next) {
    c5a2:	9801      	ldr	r0, [sp, #4]
    c5a4:	b1a8      	cbz	r0, c5d2 <cf_set+0x72>
		id = strtol(next, NULL, 10);
    c5a6:	220a      	movs	r2, #10
    c5a8:	4621      	mov	r1, r4
    c5aa:	f019 fe75 	bl	26298 <strtol>
    c5ae:	b2c6      	uxtb	r6, r0
	cfg = find_cf_cfg_by_addr(id, &addr);
    c5b0:	a902      	add	r1, sp, #8
    c5b2:	4630      	mov	r0, r6
    c5b4:	f7ff fdba 	bl	c12c <find_cf_cfg_by_addr>
	if (!cfg) {
    c5b8:	4605      	mov	r5, r0
    c5ba:	b988      	cbnz	r0, c5e0 <cf_set+0x80>
		cfg = find_cf_cfg(NULL);
    c5bc:	f7ff ff30 	bl	c420 <find_cf_cfg>
		if (!cfg) {
    c5c0:	4605      	mov	r5, r0
    c5c2:	b940      	cbnz	r0, c5d6 <cf_set+0x76>
			BT_ERR("Unable to restore CF: no cfg left");
    c5c4:	2145      	movs	r1, #69	; 0x45
    c5c6:	4813      	ldr	r0, [pc, #76]	; (c614 <cf_set+0xb4>)
    c5c8:	f01a fcd1 	bl	26f6e <printk>
			return -ENOMEM;
    c5cc:	f06f 040b 	mvn.w	r4, #11
    c5d0:	e7d4      	b.n	c57c <cf_set+0x1c>
		id = BT_ID_DEFAULT;
    c5d2:	4626      	mov	r6, r4
    c5d4:	e7ec      	b.n	c5b0 <cf_set+0x50>
		cfg->id = id;
    c5d6:	f800 6b01 	strb.w	r6, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
    c5da:	a902      	add	r1, sp, #8
    c5dc:	f01d fc51 	bl	29e82 <bt_addr_le_copy>
	if (len_rd) {
    c5e0:	f1b9 0f00 	cmp.w	r9, #0
    c5e4:	d00d      	beq.n	c602 <cf_set+0xa2>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
    c5e6:	f105 0108 	add.w	r1, r5, #8
    c5ea:	2201      	movs	r2, #1
    c5ec:	4640      	mov	r0, r8
    c5ee:	47b8      	blx	r7
		if (len < 0) {
    c5f0:	1e05      	subs	r5, r0, #0
    c5f2:	dac3      	bge.n	c57c <cf_set+0x1c>
			BT_ERR("Failed to decode value (err %zd)", len);
    c5f4:	462a      	mov	r2, r5
    c5f6:	2145      	movs	r1, #69	; 0x45
    c5f8:	4807      	ldr	r0, [pc, #28]	; (c618 <cf_set+0xb8>)
    c5fa:	f01a fcb8 	bl	26f6e <printk>
			return len;
    c5fe:	462c      	mov	r4, r5
    c600:	e7bc      	b.n	c57c <cf_set+0x1c>
		clear_cf_cfg(cfg);
    c602:	4628      	mov	r0, r5
    c604:	f01d fca9 	bl	29f5a <clear_cf_cfg>
    c608:	e7b8      	b.n	c57c <cf_set+0x1c>
    c60a:	bf00      	nop
    c60c:	000307a1 	.word	0x000307a1
    c610:	0003184c 	.word	0x0003184c
    c614:	000316a7 	.word	0x000316a7
    c618:	0003173b 	.word	0x0003173b

0000c61c <bt_gatt_attr_write_ccc>:
{
    c61c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c620:	4698      	mov	r8, r3
    c622:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
    c626:	68ce      	ldr	r6, [r1, #12]
{
    c628:	4607      	mov	r7, r0
    c62a:	4689      	mov	r9, r1
	if (offset) {
    c62c:	2b00      	cmp	r3, #0
    c62e:	d144      	bne.n	c6ba <bt_gatt_attr_write_ccc+0x9e>
	if (!len || len > sizeof(uint16_t)) {
    c630:	f108 33ff 	add.w	r3, r8, #4294967295
    c634:	2b01      	cmp	r3, #1
    c636:	d843      	bhi.n	c6c0 <bt_gatt_attr_write_ccc+0xa4>
	if (len < sizeof(uint16_t)) {
    c638:	f1b8 0f01 	cmp.w	r8, #1
		value = *(uint8_t *)buf;
    c63c:	7814      	ldrb	r4, [r2, #0]
    c63e:	bf18      	it	ne
    c640:	7853      	ldrbne	r3, [r2, #1]
	cfg = find_ccc_cfg(conn, ccc);
    c642:	4631      	mov	r1, r6
		value = *(uint8_t *)buf;
    c644:	bf0c      	ite	eq
    c646:	b2a4      	uxtheq	r4, r4
    c648:	ea44 2403 	orrne.w	r4, r4, r3, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
    c64c:	f01d fd06 	bl	2a05c <find_ccc_cfg>
	if (!cfg) {
    c650:	4605      	mov	r5, r0
    c652:	b9b0      	cbnz	r0, c682 <bt_gatt_attr_write_ccc+0x66>
		if (!value) {
    c654:	b914      	cbnz	r4, c65c <bt_gatt_attr_write_ccc+0x40>
			return len;
    c656:	4640      	mov	r0, r8
}
    c658:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
    c65c:	4631      	mov	r1, r6
    c65e:	f01d fcfd 	bl	2a05c <find_ccc_cfg>
		if (!cfg) {
    c662:	4605      	mov	r5, r0
    c664:	b930      	cbnz	r0, c674 <bt_gatt_attr_write_ccc+0x58>
			BT_WARN("No space to store CCC cfg");
    c666:	4818      	ldr	r0, [pc, #96]	; (c6c8 <bt_gatt_attr_write_ccc+0xac>)
    c668:	2157      	movs	r1, #87	; 0x57
    c66a:	f01a fc80 	bl	26f6e <printk>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    c66e:	f06f 0010 	mvn.w	r0, #16
    c672:	e7f1      	b.n	c658 <bt_gatt_attr_write_ccc+0x3c>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    c674:	f107 0188 	add.w	r1, r7, #136	; 0x88
    c678:	3001      	adds	r0, #1
    c67a:	f01d fc02 	bl	29e82 <bt_addr_le_copy>
		cfg->id = conn->id;
    c67e:	7a3b      	ldrb	r3, [r7, #8]
    c680:	702b      	strb	r3, [r5, #0]
	if (ccc->cfg_write) {
    c682:	6a73      	ldr	r3, [r6, #36]	; 0x24
    c684:	b96b      	cbnz	r3, c6a2 <bt_gatt_attr_write_ccc+0x86>
	if (cfg->value != ccc->value) {
    c686:	8bf3      	ldrh	r3, [r6, #30]
	cfg->value = value;
    c688:	812c      	strh	r4, [r5, #8]
	if (cfg->value != ccc->value) {
    c68a:	42a3      	cmp	r3, r4
    c68c:	d003      	beq.n	c696 <bt_gatt_attr_write_ccc+0x7a>
		gatt_ccc_changed(attr, ccc);
    c68e:	4631      	mov	r1, r6
    c690:	4648      	mov	r0, r9
    c692:	f01d fb69 	bl	29d68 <gatt_ccc_changed>
	if (!value) {
    c696:	2c00      	cmp	r4, #0
    c698:	d1dd      	bne.n	c656 <bt_gatt_attr_write_ccc+0x3a>
		clear_ccc_cfg(cfg);
    c69a:	4628      	mov	r0, r5
    c69c:	f01d fbf8 	bl	29e90 <clear_ccc_cfg>
    c6a0:	e7d9      	b.n	c656 <bt_gatt_attr_write_ccc+0x3a>
		ssize_t write = ccc->cfg_write(conn, attr, value);
    c6a2:	4622      	mov	r2, r4
    c6a4:	4649      	mov	r1, r9
    c6a6:	4638      	mov	r0, r7
    c6a8:	4798      	blx	r3
		if (write < 0) {
    c6aa:	2800      	cmp	r0, #0
    c6ac:	dbd4      	blt.n	c658 <bt_gatt_attr_write_ccc+0x3c>
		if (write != sizeof(value) && write != 1) {
    c6ae:	3801      	subs	r0, #1
    c6b0:	2801      	cmp	r0, #1
    c6b2:	d9e8      	bls.n	c686 <bt_gatt_attr_write_ccc+0x6a>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
    c6b4:	f06f 000d 	mvn.w	r0, #13
    c6b8:	e7ce      	b.n	c658 <bt_gatt_attr_write_ccc+0x3c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    c6ba:	f06f 0006 	mvn.w	r0, #6
    c6be:	e7cb      	b.n	c658 <bt_gatt_attr_write_ccc+0x3c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    c6c0:	f06f 000c 	mvn.w	r0, #12
    c6c4:	e7c8      	b.n	c658 <bt_gatt_attr_write_ccc+0x3c>
    c6c6:	bf00      	nop
    c6c8:	000315a7 	.word	0x000315a7

0000c6cc <db_changed>:
{
    c6cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    c6ce:	2300      	movs	r3, #0
    c6d0:	f44f 72a4 	mov.w	r2, #328	; 0x148
    c6d4:	4912      	ldr	r1, [pc, #72]	; (c720 <db_changed+0x54>)
    c6d6:	4813      	ldr	r0, [pc, #76]	; (c724 <db_changed+0x58>)
    c6d8:	4c13      	ldr	r4, [pc, #76]	; (c728 <db_changed+0x5c>)
    c6da:	f017 fb5d 	bl	23d98 <k_delayed_work_submit_to_queue>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
    c6de:	2500      	movs	r5, #0
		if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    c6e0:	462f      	mov	r7, r5
    c6e2:	2207      	movs	r2, #7
    c6e4:	4669      	mov	r1, sp
    c6e6:	4620      	mov	r0, r4
    c6e8:	9700      	str	r7, [sp, #0]
    c6ea:	f8cd 7003 	str.w	r7, [sp, #3]
    c6ee:	f020 ff3b 	bl	2d568 <memcmp>
    c6f2:	b170      	cbz	r0, c712 <db_changed+0x46>
		if (CF_ROBUST_CACHING(cfg)) {
    c6f4:	79e3      	ldrb	r3, [r4, #7]
    c6f6:	07db      	lsls	r3, r3, #31
    c6f8:	d50b      	bpl.n	c712 <db_changed+0x46>
			atomic_clear_bit(cfg->flags, CF_OUT_OF_SYNC);
    c6fa:	f104 060b 	add.w	r6, r4, #11
    c6fe:	f06f 0102 	mvn.w	r1, #2
    c702:	4630      	mov	r0, r6
    c704:	f01d fbae 	bl	29e64 <atomic_and>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    c708:	f06f 0101 	mvn.w	r1, #1
    c70c:	4630      	mov	r0, r6
    c70e:	f01d fba9 	bl	29e64 <atomic_and>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
    c712:	3501      	adds	r5, #1
    c714:	2d03      	cmp	r5, #3
    c716:	f104 0410 	add.w	r4, r4, #16
    c71a:	d1e2      	bne.n	c6e2 <db_changed+0x16>
}
    c71c:	b003      	add	sp, #12
    c71e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c720:	20001ae0 	.word	0x20001ae0
    c724:	20002490 	.word	0x20002490
    c728:	20002c3d 	.word	0x20002c3d

0000c72c <gatt_notify>:
{
    c72c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c730:	4614      	mov	r4, r2
				sizeof(*nfy) + params->len);
    c732:	8992      	ldrh	r2, [r2, #12]
{
    c734:	4689      	mov	r9, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
    c736:	3202      	adds	r2, #2
    c738:	211b      	movs	r1, #27
{
    c73a:	4680      	mov	r8, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
    c73c:	f7ff f808 	bl	b750 <bt_att_create_pdu>
	if (!buf) {
    c740:	4605      	mov	r5, r0
    c742:	b1c8      	cbz	r0, c778 <gatt_notify+0x4c>
	return net_buf_simple_add(&buf->b, len);
    c744:	f100 0708 	add.w	r7, r0, #8
    c748:	2102      	movs	r1, #2
    c74a:	4638      	mov	r0, r7
    c74c:	f012 fd52 	bl	1f1f4 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    c750:	4606      	mov	r6, r0
    c752:	89a1      	ldrh	r1, [r4, #12]
    c754:	f826 9b02 	strh.w	r9, [r6], #2
    c758:	4638      	mov	r0, r7
    c75a:	f012 fd4b 	bl	1f1f4 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    c75e:	89a2      	ldrh	r2, [r4, #12]
    c760:	68a1      	ldr	r1, [r4, #8]
    c762:	4630      	mov	r0, r6
    c764:	f020 ff0e 	bl	2d584 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
    c768:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    c76c:	4629      	mov	r1, r5
    c76e:	4640      	mov	r0, r8
}
    c770:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
    c774:	f7ff bafa 	b.w	bd6c <bt_att_send>
		BT_WARN("No buffer available to send notification");
    c778:	2157      	movs	r1, #87	; 0x57
    c77a:	4803      	ldr	r0, [pc, #12]	; (c788 <gatt_notify+0x5c>)
    c77c:	f01a fbf7 	bl	26f6e <printk>
}
    c780:	f06f 000b 	mvn.w	r0, #11
    c784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c788:	000317df 	.word	0x000317df

0000c78c <sc_indicate>:
{
    c78c:	b510      	push	{r4, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c78e:	4a16      	ldr	r2, [pc, #88]	; (c7e8 <sc_indicate+0x5c>)
    c790:	f3bf 8f5b 	dmb	ish
    c794:	f102 0350 	add.w	r3, r2, #80	; 0x50
    c798:	e853 4f00 	ldrex	r4, [r3]
    c79c:	f044 0c01 	orr.w	ip, r4, #1
    c7a0:	e843 ce00 	strex	lr, ip, [r3]
    c7a4:	f1be 0f00 	cmp.w	lr, #0
    c7a8:	d1f6      	bne.n	c798 <sc_indicate+0xc>
    c7aa:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    c7ae:	f014 0f01 	tst.w	r4, #1
    c7b2:	4613      	mov	r3, r2
    c7b4:	d10a      	bne.n	c7cc <sc_indicate+0x40>
		gatt_sc.start = start;
    c7b6:	8310      	strh	r0, [r2, #24]
		gatt_sc.end = end;
    c7b8:	8351      	strh	r1, [r2, #26]
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
    c7ba:	2101      	movs	r1, #1
    c7bc:	480b      	ldr	r0, [pc, #44]	; (c7ec <sc_indicate+0x60>)
    c7be:	f01d fbe4 	bl	29f8a <atomic_test_bit>
    c7c2:	b978      	cbnz	r0, c7e4 <sc_indicate+0x58>
}
    c7c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c7c8:	f7ff bc1e 	b.w	c008 <sc_commit.part.15>
	if (new_start >= *start && new_end <= *end) {
    c7cc:	8b1c      	ldrh	r4, [r3, #24]
    c7ce:	8b52      	ldrh	r2, [r2, #26]
    c7d0:	4284      	cmp	r4, r0
    c7d2:	d803      	bhi.n	c7dc <sc_indicate+0x50>
    c7d4:	4291      	cmp	r1, r2
    c7d6:	d905      	bls.n	c7e4 <sc_indicate+0x58>
		*end = new_end;
    c7d8:	8359      	strh	r1, [r3, #26]
    c7da:	e7ee      	b.n	c7ba <sc_indicate+0x2e>
	if (*end < new_end) {
    c7dc:	4291      	cmp	r1, r2
		*start = new_start;
    c7de:	8318      	strh	r0, [r3, #24]
	if (*end < new_end) {
    c7e0:	d9eb      	bls.n	c7ba <sc_indicate+0x2e>
    c7e2:	e7f9      	b.n	c7d8 <sc_indicate+0x4c>
}
    c7e4:	bd10      	pop	{r4, pc}
    c7e6:	bf00      	nop
    c7e8:	20001b10 	.word	0x20001b10
    c7ec:	20001b60 	.word	0x20001b60

0000c7f0 <gatt_indicate>:
{
    c7f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c7f4:	4614      	mov	r4, r2
				sizeof(*ind) + params->len);
    c7f6:	8a92      	ldrh	r2, [r2, #20]
{
    c7f8:	4689      	mov	r9, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    c7fa:	3202      	adds	r2, #2
    c7fc:	211d      	movs	r1, #29
{
    c7fe:	4680      	mov	r8, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    c800:	f7fe ffa6 	bl	b750 <bt_att_create_pdu>
	if (!buf) {
    c804:	4606      	mov	r6, r0
    c806:	b930      	cbnz	r0, c816 <gatt_indicate+0x26>
		BT_WARN("No buffer available to send indication");
    c808:	2157      	movs	r1, #87	; 0x57
    c80a:	4821      	ldr	r0, [pc, #132]	; (c890 <gatt_indicate+0xa0>)
    c80c:	f01a fbaf 	bl	26f6e <printk>
			return -ENOMEM;
    c810:	f06f 040b 	mvn.w	r4, #11
    c814:	e01f      	b.n	c856 <gatt_indicate+0x66>
    c816:	f100 0508 	add.w	r5, r0, #8
    c81a:	2102      	movs	r1, #2
    c81c:	4628      	mov	r0, r5
    c81e:	f012 fce9 	bl	1f1f4 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
    c822:	4607      	mov	r7, r0
    c824:	8aa1      	ldrh	r1, [r4, #20]
    c826:	f827 9b02 	strh.w	r9, [r7], #2
    c82a:	4628      	mov	r0, r5
    c82c:	f012 fce2 	bl	1f1f4 <net_buf_simple_add>
    c830:	8aa2      	ldrh	r2, [r4, #20]
    c832:	6921      	ldr	r1, [r4, #16]
    c834:	4638      	mov	r0, r7
    c836:	f020 fea5 	bl	2d584 <memcpy>
	if (!params->func) {
    c83a:	68a3      	ldr	r3, [r4, #8]
    c83c:	b973      	cbnz	r3, c85c <gatt_indicate+0x6c>
		err = bt_att_send(conn, buf, NULL, NULL);
    c83e:	461a      	mov	r2, r3
    c840:	4631      	mov	r1, r6
    c842:	4640      	mov	r0, r8
    c844:	f7ff fa92 	bl	bd6c <bt_att_send>
	if (err) {
    c848:	4604      	mov	r4, r0
    c84a:	b120      	cbz	r0, c856 <gatt_indicate+0x66>
		BT_ERR("Error sending ATT PDU: %d", err);
    c84c:	4622      	mov	r2, r4
    c84e:	2145      	movs	r1, #69	; 0x45
    c850:	4810      	ldr	r0, [pc, #64]	; (c894 <gatt_indicate+0xa4>)
    c852:	f01a fb8c 	bl	26f6e <printk>
}
    c856:	4620      	mov	r0, r4
    c858:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    c85c:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
    c860:	2100      	movs	r1, #0
    c862:	f7ff f9ad 	bl	bbc0 <bt_att_req_alloc>
		if (!req) {
    c866:	4605      	mov	r5, r0
    c868:	2800      	cmp	r0, #0
    c86a:	d0d1      	beq.n	c810 <gatt_indicate+0x20>
		req->func = func;
    c86c:	4b0a      	ldr	r3, [pc, #40]	; (c898 <gatt_indicate+0xa8>)
    c86e:	6043      	str	r3, [r0, #4]
		req->destroy = destroy;
    c870:	2300      	movs	r3, #0
		req->user_data = params;
    c872:	6144      	str	r4, [r0, #20]
		req->buf = buf;
    c874:	6106      	str	r6, [r0, #16]
		req->destroy = destroy;
    c876:	6083      	str	r3, [r0, #8]
		err = bt_att_req_send(conn, req);
    c878:	4601      	mov	r1, r0
    c87a:	4640      	mov	r0, r8
    c87c:	f7ff fae4 	bl	be48 <bt_att_req_send>
		if (err) {
    c880:	4604      	mov	r4, r0
    c882:	2800      	cmp	r0, #0
    c884:	d0e7      	beq.n	c856 <gatt_indicate+0x66>
			bt_att_req_free(req);
    c886:	4628      	mov	r0, r5
    c888:	f7ff f9b0 	bl	bbec <bt_att_req_free>
    c88c:	e7de      	b.n	c84c <gatt_indicate+0x5c>
    c88e:	bf00      	nop
    c890:	00031794 	.word	0x00031794
    c894:	000317c0 	.word	0x000317c0
    c898:	00029d8d 	.word	0x00029d8d

0000c89c <notify_cb>:
{
    c89c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    c8a0:	4b38      	ldr	r3, [pc, #224]	; (c984 <notify_cb+0xe8>)
{
    c8a2:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    c8a4:	6882      	ldr	r2, [r0, #8]
    c8a6:	429a      	cmp	r2, r3
{
    c8a8:	4680      	mov	r8, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    c8aa:	d003      	beq.n	c8b4 <notify_cb+0x18>
		return BT_GATT_ITER_CONTINUE;
    c8ac:	2001      	movs	r0, #1
}
    c8ae:	b003      	add	sp, #12
    c8b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ccc = attr->user_data;
    c8b4:	68c7      	ldr	r7, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
    c8b6:	4b34      	ldr	r3, [pc, #208]	; (c988 <notify_cb+0xec>)
    c8b8:	429f      	cmp	r7, r3
    c8ba:	d019      	beq.n	c8f0 <notify_cb+0x54>
    c8bc:	1c7d      	adds	r5, r7, #1
    c8be:	f107 0a1f 	add.w	sl, r7, #31
    c8c2:	f04f 0b00 	mov.w	fp, #0
		if (cfg->value != data->type) {
    c8c6:	f8b5 2007 	ldrh.w	r2, [r5, #7]
    c8ca:	89a3      	ldrh	r3, [r4, #12]
    c8cc:	429a      	cmp	r2, r3
    c8ce:	d10b      	bne.n	c8e8 <notify_cb+0x4c>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    c8d0:	4629      	mov	r1, r5
    c8d2:	f815 0c01 	ldrb.w	r0, [r5, #-1]
    c8d6:	f01c fe22 	bl	2951e <bt_conn_lookup_addr_le>
		if (!conn) {
    c8da:	4606      	mov	r6, r0
    c8dc:	b120      	cbz	r0, c8e8 <notify_cb+0x4c>
		if (conn->state != BT_CONN_CONNECTED) {
    c8de:	7a83      	ldrb	r3, [r0, #10]
    c8e0:	2b07      	cmp	r3, #7
    c8e2:	d02b      	beq.n	c93c <notify_cb+0xa0>
			bt_conn_unref(conn);
    c8e4:	f7fd fe30 	bl	a548 <bt_conn_unref>
			continue;
    c8e8:	350a      	adds	r5, #10
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    c8ea:	4555      	cmp	r5, sl
    c8ec:	d1eb      	bne.n	c8c6 <notify_cb+0x2a>
    c8ee:	e7dd      	b.n	c8ac <notify_cb+0x10>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    c8f0:	2600      	movs	r6, #0
    c8f2:	4d26      	ldr	r5, [pc, #152]	; (c98c <notify_cb+0xf0>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    c8f4:	46b1      	mov	r9, r6
    c8f6:	2207      	movs	r2, #7
    c8f8:	4669      	mov	r1, sp
    c8fa:	4628      	mov	r0, r5
    c8fc:	f8cd 9000 	str.w	r9, [sp]
    c900:	f8cd 9003 	str.w	r9, [sp, #3]
    c904:	f020 fe30 	bl	2d568 <memcmp>
    c908:	b178      	cbz	r0, c92a <notify_cb+0x8e>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
    c90a:	2207      	movs	r2, #7
    c90c:	4629      	mov	r1, r5
    c90e:	f815 0c01 	ldrb.w	r0, [r5, #-1]
    c912:	f7fd ff63 	bl	a7dc <bt_conn_lookup_state_le>
			if (!conn) {
    c916:	b970      	cbnz	r0, c936 <notify_cb+0x9a>
				sc = (struct sc_data *)data->ind_params->data;
    c918:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
    c91a:	f815 0c01 	ldrb.w	r0, [r5, #-1]
				sc = (struct sc_data *)data->ind_params->data;
    c91e:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
    c920:	4629      	mov	r1, r5
    c922:	8853      	ldrh	r3, [r2, #2]
    c924:	8812      	ldrh	r2, [r2, #0]
    c926:	f7ff fc43 	bl	c1b0 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    c92a:	3601      	adds	r6, #1
    c92c:	2e03      	cmp	r6, #3
    c92e:	f105 050c 	add.w	r5, r5, #12
    c932:	d1e0      	bne.n	c8f6 <notify_cb+0x5a>
    c934:	e7c2      	b.n	c8bc <notify_cb+0x20>
			bt_conn_unref(conn);
    c936:	f7fd fe07 	bl	a548 <bt_conn_unref>
    c93a:	e7f6      	b.n	c92a <notify_cb+0x8e>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
    c93c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c93e:	b123      	cbz	r3, c94a <notify_cb+0xae>
    c940:	4641      	mov	r1, r8
    c942:	4798      	blx	r3
    c944:	b908      	cbnz	r0, c94a <notify_cb+0xae>
			bt_conn_unref(conn);
    c946:	4630      	mov	r0, r6
    c948:	e7cc      	b.n	c8e4 <notify_cb+0x48>
		if (data->type == BT_GATT_CCC_INDICATE) {
    c94a:	89a3      	ldrh	r3, [r4, #12]
    c94c:	88a1      	ldrh	r1, [r4, #4]
    c94e:	6922      	ldr	r2, [r4, #16]
    c950:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
    c952:	4630      	mov	r0, r6
		if (data->type == BT_GATT_CCC_INDICATE) {
    c954:	d110      	bne.n	c978 <notify_cb+0xdc>
			err = gatt_indicate(conn, data->handle,
    c956:	f7ff ff4b 	bl	c7f0 <gatt_indicate>
			if (err == 0) {
    c95a:	4681      	mov	r9, r0
    c95c:	b918      	cbnz	r0, c966 <notify_cb+0xca>
				data->ind_params->_ref++;
    c95e:	6922      	ldr	r2, [r4, #16]
    c960:	7d93      	ldrb	r3, [r2, #22]
    c962:	3301      	adds	r3, #1
    c964:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
    c966:	4630      	mov	r0, r6
    c968:	f7fd fdee 	bl	a548 <bt_conn_unref>
		if (err < 0) {
    c96c:	f1b9 0f00 	cmp.w	r9, #0
    c970:	db06      	blt.n	c980 <notify_cb+0xe4>
		data->err = 0;
    c972:	f8c4 b008 	str.w	fp, [r4, #8]
    c976:	e7b7      	b.n	c8e8 <notify_cb+0x4c>
			err = gatt_notify(conn, data->handle, data->nfy_params);
    c978:	f7ff fed8 	bl	c72c <gatt_notify>
    c97c:	4681      	mov	r9, r0
    c97e:	e7f2      	b.n	c966 <notify_cb+0xca>
			return BT_GATT_ITER_STOP;
    c980:	2000      	movs	r0, #0
    c982:	e794      	b.n	c8ae <notify_cb+0x12>
    c984:	0000c61d 	.word	0x0000c61d
    c988:	200007d4 	.word	0x200007d4
    c98c:	20004689 	.word	0x20004689

0000c990 <bt_gatt_init>:
{
    c990:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    c992:	4b22      	ldr	r3, [pc, #136]	; (ca1c <bt_gatt_init+0x8c>)
    c994:	f3bf 8f5b 	dmb	ish
    c998:	2201      	movs	r2, #1
    c99a:	e853 1f00 	ldrex	r1, [r3]
    c99e:	2900      	cmp	r1, #0
    c9a0:	d103      	bne.n	c9aa <bt_gatt_init+0x1a>
    c9a2:	e843 2000 	strex	r0, r2, [r3]
    c9a6:	2800      	cmp	r0, #0
    c9a8:	d1f7      	bne.n	c99a <bt_gatt_init+0xa>
    c9aa:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
    c9ae:	d134      	bne.n	ca1a <bt_gatt_init+0x8a>
    c9b0:	f3bf 8f5b 	dmb	ish
    c9b4:	4b1a      	ldr	r3, [pc, #104]	; (ca20 <bt_gatt_init+0x90>)
    c9b6:	e853 1f00 	ldrex	r1, [r3]
    c9ba:	2900      	cmp	r1, #0
    c9bc:	d103      	bne.n	c9c6 <bt_gatt_init+0x36>
    c9be:	e843 2000 	strex	r0, r2, [r3]
    c9c2:	2800      	cmp	r0, #0
    c9c4:	d1f7      	bne.n	c9b6 <bt_gatt_init+0x26>
    c9c6:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
    c9ca:	d101      	bne.n	c9d0 <bt_gatt_init+0x40>
    c9cc:	f7ff fae2 	bl	bf94 <bt_gatt_service_init.part.13>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    c9d0:	4c14      	ldr	r4, [pc, #80]	; (ca24 <bt_gatt_init+0x94>)
    c9d2:	2230      	movs	r2, #48	; 0x30
    c9d4:	2100      	movs	r1, #0
    c9d6:	4620      	mov	r0, r4
    c9d8:	f020 fe0f 	bl	2d5fa <memset>
    c9dc:	4b12      	ldr	r3, [pc, #72]	; (ca28 <bt_gatt_init+0x98>)
    c9de:	6063      	str	r3, [r4, #4]
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    c9e0:	4621      	mov	r1, r4
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    c9e2:	4c12      	ldr	r4, [pc, #72]	; (ca2c <bt_gatt_init+0x9c>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    c9e4:	4812      	ldr	r0, [pc, #72]	; (ca30 <bt_gatt_init+0xa0>)
    c9e6:	2300      	movs	r3, #0
    c9e8:	f44f 72a4 	mov.w	r2, #328	; 0x148
    c9ec:	f017 f9d4 	bl	23d98 <k_delayed_work_submit_to_queue>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    c9f0:	f104 0020 	add.w	r0, r4, #32
    c9f4:	2230      	movs	r2, #48	; 0x30
    c9f6:	2100      	movs	r1, #0
    c9f8:	f020 fdff 	bl	2d5fa <memset>
    c9fc:	4b0d      	ldr	r3, [pc, #52]	; (ca34 <bt_gatt_init+0xa4>)
    c9fe:	6263      	str	r3, [r4, #36]	; 0x24
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ca00:	3450      	adds	r4, #80	; 0x50
    ca02:	f3bf 8f5b 	dmb	ish
    ca06:	e854 3f00 	ldrex	r3, [r4]
    ca0a:	f043 0302 	orr.w	r3, r3, #2
    ca0e:	e844 3200 	strex	r2, r3, [r4]
    ca12:	2a00      	cmp	r2, #0
    ca14:	d1f7      	bne.n	ca06 <bt_gatt_init+0x76>
    ca16:	f3bf 8f5b 	dmb	ish
}
    ca1a:	bd10      	pop	{r4, pc}
    ca1c:	20002c74 	.word	0x20002c74
    ca20:	20002cc0 	.word	0x20002cc0
    ca24:	20001ae0 	.word	0x20001ae0
    ca28:	0002a16f 	.word	0x0002a16f
    ca2c:	20001b10 	.word	0x20001b10
    ca30:	20002490 	.word	0x20002490
    ca34:	0000d20d 	.word	0x0000d20d

0000ca38 <bt_gatt_attr_get_handle>:
{
    ca38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!attr) {
    ca3c:	4605      	mov	r5, r0
    ca3e:	b910      	cbnz	r0, ca46 <bt_gatt_attr_get_handle+0xe>
		return 0;
    ca40:	2000      	movs	r0, #0
}
    ca42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (attr->handle) {
    ca46:	8a00      	ldrh	r0, [r0, #16]
    ca48:	2800      	cmp	r0, #0
    ca4a:	d1fa      	bne.n	ca42 <bt_gatt_attr_get_handle+0xa>
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    ca4c:	4e18      	ldr	r6, [pc, #96]	; (cab0 <bt_gatt_attr_get_handle+0x78>)
    ca4e:	4c19      	ldr	r4, [pc, #100]	; (cab4 <bt_gatt_attr_get_handle+0x7c>)
    ca50:	4f19      	ldr	r7, [pc, #100]	; (cab8 <bt_gatt_attr_get_handle+0x80>)
	uint16_t handle = 1;
    ca52:	f04f 0901 	mov.w	r9, #1
    ca56:	46b0      	mov	r8, r6
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    ca58:	42b4      	cmp	r4, r6
    ca5a:	d90a      	bls.n	ca72 <bt_gatt_attr_get_handle+0x3a>
    ca5c:	4639      	mov	r1, r7
    ca5e:	4817      	ldr	r0, [pc, #92]	; (cabc <bt_gatt_attr_get_handle+0x84>)
    ca60:	f240 522d 	movw	r2, #1325	; 0x52d
    ca64:	f01a fa83 	bl	26f6e <printk>
    ca68:	f240 512d 	movw	r1, #1325	; 0x52d
    ca6c:	4638      	mov	r0, r7
    ca6e:	f01a fcf7 	bl	27460 <assert_post_action>
    ca72:	4544      	cmp	r4, r8
    ca74:	d2e4      	bcs.n	ca40 <bt_gatt_attr_get_handle+0x8>
		if ((attr < &static_svc->attrs[0]) ||
    ca76:	e9d4 c100 	ldrd	ip, r1, [r4]
    ca7a:	4565      	cmp	r5, ip
    ca7c:	d305      	bcc.n	ca8a <bt_gatt_attr_get_handle+0x52>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    ca7e:	2214      	movs	r2, #20
    ca80:	fb02 c301 	mla	r3, r2, r1, ip
    ca84:	3b14      	subs	r3, #20
		if ((attr < &static_svc->attrs[0]) ||
    ca86:	429d      	cmp	r5, r3
    ca88:	d910      	bls.n	caac <bt_gatt_attr_get_handle+0x74>
			handle += static_svc->attr_count;
    ca8a:	eb09 0001 	add.w	r0, r9, r1
    ca8e:	b280      	uxth	r0, r0
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    ca90:	3408      	adds	r4, #8
    ca92:	4681      	mov	r9, r0
    ca94:	e7e0      	b.n	ca58 <bt_gatt_attr_get_handle+0x20>
			if (attr == &static_svc->attrs[i]) {
    ca96:	fb02 ce03 	mla	lr, r2, r3, ip
    ca9a:	4575      	cmp	r5, lr
    ca9c:	d0d1      	beq.n	ca42 <bt_gatt_attr_get_handle+0xa>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
    ca9e:	3301      	adds	r3, #1
    caa0:	eb09 0003 	add.w	r0, r9, r3
    caa4:	428b      	cmp	r3, r1
    caa6:	b280      	uxth	r0, r0
    caa8:	d1f5      	bne.n	ca96 <bt_gatt_attr_get_handle+0x5e>
    caaa:	e7f1      	b.n	ca90 <bt_gatt_attr_get_handle+0x58>
    caac:	2300      	movs	r3, #0
    caae:	e7f7      	b.n	caa0 <bt_gatt_attr_get_handle+0x68>
    cab0:	0002e324 	.word	0x0002e324
    cab4:	0002e314 	.word	0x0002e314
    cab8:	00031616 	.word	0x00031616
    cabc:	0002fa94 	.word	0x0002fa94

0000cac0 <bt_gatt_foreach_attr_type>:
{
    cac0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cac4:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
    cac8:	9100      	str	r1, [sp, #0]
    caca:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
    cacc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    cad0:	2c00      	cmp	r4, #0
    cad2:	bf08      	it	eq
    cad4:	461c      	moveq	r4, r3
	if (start_handle <= last_static_handle) {
    cad6:	4b4f      	ldr	r3, [pc, #316]	; (cc14 <bt_gatt_foreach_attr_type+0x154>)
    cad8:	881b      	ldrh	r3, [r3, #0]
    cada:	4283      	cmp	r3, r0
{
    cadc:	4607      	mov	r7, r0
    cade:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
    cae0:	d267      	bcs.n	cbb2 <bt_gatt_foreach_attr_type+0xf2>
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    cae2:	4b4d      	ldr	r3, [pc, #308]	; (cc18 <bt_gatt_foreach_attr_type+0x158>)
    cae4:	681d      	ldr	r5, [r3, #0]
    cae6:	2d00      	cmp	r5, #0
    cae8:	d058      	beq.n	cb9c <bt_gatt_foreach_attr_type+0xdc>
    caea:	3d08      	subs	r5, #8
			struct bt_gatt_attr *attr = &svc->attrs[i];
    caec:	f04f 0b14 	mov.w	fp, #20
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    caf0:	2d00      	cmp	r5, #0
    caf2:	d053      	beq.n	cb9c <bt_gatt_foreach_attr_type+0xdc>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    caf4:	68ab      	ldr	r3, [r5, #8]
		next = SYS_SLIST_PEEK_NEXT_CONTAINER(svc, node);
    caf6:	2b00      	cmp	r3, #0
    caf8:	f000 808a 	beq.w	cc10 <bt_gatt_foreach_attr_type+0x150>
		if (next) {
    cafc:	f1b3 0608 	subs.w	r6, r3, #8
    cb00:	d005      	beq.n	cb0e <bt_gatt_foreach_attr_type+0x4e>
			if (next->attrs[0].handle <= start_handle) {
    cb02:	f853 3c08 	ldr.w	r3, [r3, #-8]
    cb06:	8a1b      	ldrh	r3, [r3, #16]
    cb08:	42bb      	cmp	r3, r7
    cb0a:	d903      	bls.n	cb14 <bt_gatt_foreach_attr_type+0x54>
    cb0c:	2600      	movs	r6, #0
		for (i = 0; i < svc->attr_count; i++) {
    cb0e:	686b      	ldr	r3, [r5, #4]
    cb10:	429e      	cmp	r6, r3
    cb12:	d351      	bcc.n	cbb8 <bt_gatt_foreach_attr_type+0xf8>
    cb14:	68ad      	ldr	r5, [r5, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    cb16:	2d00      	cmp	r5, #0
    cb18:	d040      	beq.n	cb9c <bt_gatt_foreach_attr_type+0xdc>
    cb1a:	3d08      	subs	r5, #8
    cb1c:	e7e8      	b.n	caf0 <bt_gatt_foreach_attr_type+0x30>
			if (handle + static_svc->attr_count < start_handle) {
    cb1e:	6873      	ldr	r3, [r6, #4]
    cb20:	442b      	add	r3, r5
    cb22:	42bb      	cmp	r3, r7
    cb24:	d242      	bcs.n	cbac <bt_gatt_foreach_attr_type+0xec>
				handle += static_svc->attr_count;
    cb26:	b29d      	uxth	r5, r3
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    cb28:	3608      	adds	r6, #8
    cb2a:	4b3c      	ldr	r3, [pc, #240]	; (cc1c <bt_gatt_foreach_attr_type+0x15c>)
    cb2c:	429e      	cmp	r6, r3
    cb2e:	d90a      	bls.n	cb46 <bt_gatt_foreach_attr_type+0x86>
    cb30:	493b      	ldr	r1, [pc, #236]	; (cc20 <bt_gatt_foreach_attr_type+0x160>)
    cb32:	483c      	ldr	r0, [pc, #240]	; (cc24 <bt_gatt_foreach_attr_type+0x164>)
    cb34:	f240 52f1 	movw	r2, #1521	; 0x5f1
    cb38:	f01a fa19 	bl	26f6e <printk>
    cb3c:	f240 51f1 	movw	r1, #1521	; 0x5f1
    cb40:	4837      	ldr	r0, [pc, #220]	; (cc20 <bt_gatt_foreach_attr_type+0x160>)
    cb42:	f01a fc8d 	bl	27460 <assert_post_action>
    cb46:	4b35      	ldr	r3, [pc, #212]	; (cc1c <bt_gatt_foreach_attr_type+0x15c>)
    cb48:	429e      	cmp	r6, r3
    cb4a:	d3e8      	bcc.n	cb1e <bt_gatt_foreach_attr_type+0x5e>
    cb4c:	e7c9      	b.n	cae2 <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    cb4e:	58d1      	ldr	r1, [r2, r3]
    cb50:	4640      	mov	r0, r8
    cb52:	f01c fa99 	bl	29088 <bt_uuid_cmp>
    cb56:	b1a0      	cbz	r0, cb82 <bt_gatt_foreach_attr_type+0xc2>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    cb58:	3501      	adds	r5, #1
    cb5a:	f10a 0a01 	add.w	sl, sl, #1
    cb5e:	b2ad      	uxth	r5, r5
    cb60:	6873      	ldr	r3, [r6, #4]
    cb62:	4553      	cmp	r3, sl
    cb64:	d9e0      	bls.n	cb28 <bt_gatt_foreach_attr_type+0x68>
	if (handle > end_handle) {
    cb66:	9b00      	ldr	r3, [sp, #0]
    cb68:	429d      	cmp	r5, r3
    cb6a:	d817      	bhi.n	cb9c <bt_gatt_foreach_attr_type+0xdc>
	if (handle < start_handle) {
    cb6c:	42bd      	cmp	r5, r7
    cb6e:	d3f3      	bcc.n	cb58 <bt_gatt_foreach_attr_type+0x98>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    cb70:	2314      	movs	r3, #20
    cb72:	6832      	ldr	r2, [r6, #0]
    cb74:	fb03 f30a 	mul.w	r3, r3, sl
    cb78:	eb02 0b03 	add.w	fp, r2, r3
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    cb7c:	f1b8 0f00 	cmp.w	r8, #0
    cb80:	d1e5      	bne.n	cb4e <bt_gatt_foreach_attr_type+0x8e>
	if (attr_data && attr_data != attr->user_data) {
    cb82:	f1b9 0f00 	cmp.w	r9, #0
    cb86:	d10c      	bne.n	cba2 <bt_gatt_foreach_attr_type+0xe2>
	*num_matches -= 1;
    cb88:	3c01      	subs	r4, #1
    cb8a:	b2a4      	uxth	r4, r4
	result = func(attr, handle, user_data);
    cb8c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    cb8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cb90:	4629      	mov	r1, r5
    cb92:	4658      	mov	r0, fp
    cb94:	4798      	blx	r3
	if (!*num_matches) {
    cb96:	b10c      	cbz	r4, cb9c <bt_gatt_foreach_attr_type+0xdc>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    cb98:	2800      	cmp	r0, #0
    cb9a:	d1dd      	bne.n	cb58 <bt_gatt_foreach_attr_type+0x98>
}
    cb9c:	b003      	add	sp, #12
    cb9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (attr_data && attr_data != attr->user_data) {
    cba2:	f8db 300c 	ldr.w	r3, [fp, #12]
    cba6:	4599      	cmp	r9, r3
    cba8:	d1d6      	bne.n	cb58 <bt_gatt_foreach_attr_type+0x98>
    cbaa:	e7ed      	b.n	cb88 <bt_gatt_foreach_attr_type+0xc8>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    cbac:	f04f 0a00 	mov.w	sl, #0
    cbb0:	e7d6      	b.n	cb60 <bt_gatt_foreach_attr_type+0xa0>
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    cbb2:	4e1d      	ldr	r6, [pc, #116]	; (cc28 <bt_gatt_foreach_attr_type+0x168>)
		uint16_t handle = 1;
    cbb4:	2501      	movs	r5, #1
    cbb6:	e7b8      	b.n	cb2a <bt_gatt_foreach_attr_type+0x6a>
			struct bt_gatt_attr *attr = &svc->attrs[i];
    cbb8:	6829      	ldr	r1, [r5, #0]
	if (handle > end_handle) {
    cbba:	9800      	ldr	r0, [sp, #0]
			struct bt_gatt_attr *attr = &svc->attrs[i];
    cbbc:	fb0b f206 	mul.w	r2, fp, r6
    cbc0:	eb01 0a02 	add.w	sl, r1, r2
			if (gatt_foreach_iter(attr, attr->handle,
    cbc4:	f8ba 3010 	ldrh.w	r3, [sl, #16]
	if (handle > end_handle) {
    cbc8:	4298      	cmp	r0, r3
    cbca:	d3e7      	bcc.n	cb9c <bt_gatt_foreach_attr_type+0xdc>
	if (handle < start_handle) {
    cbcc:	429f      	cmp	r7, r3
    cbce:	d818      	bhi.n	cc02 <bt_gatt_foreach_attr_type+0x142>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    cbd0:	f1b8 0f00 	cmp.w	r8, #0
    cbd4:	d10d      	bne.n	cbf2 <bt_gatt_foreach_attr_type+0x132>
	if (attr_data && attr_data != attr->user_data) {
    cbd6:	f1b9 0f00 	cmp.w	r9, #0
    cbda:	d114      	bne.n	cc06 <bt_gatt_foreach_attr_type+0x146>
	*num_matches -= 1;
    cbdc:	3c01      	subs	r4, #1
    cbde:	b2a4      	uxth	r4, r4
	result = func(attr, handle, user_data);
    cbe0:	4619      	mov	r1, r3
    cbe2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    cbe4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cbe6:	4650      	mov	r0, sl
    cbe8:	4798      	blx	r3
	if (!*num_matches) {
    cbea:	2c00      	cmp	r4, #0
    cbec:	d0d6      	beq.n	cb9c <bt_gatt_foreach_attr_type+0xdc>
			if (gatt_foreach_iter(attr, attr->handle,
    cbee:	b940      	cbnz	r0, cc02 <bt_gatt_foreach_attr_type+0x142>
    cbf0:	e7d4      	b.n	cb9c <bt_gatt_foreach_attr_type+0xdc>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    cbf2:	5889      	ldr	r1, [r1, r2]
    cbf4:	9301      	str	r3, [sp, #4]
    cbf6:	4640      	mov	r0, r8
    cbf8:	f01c fa46 	bl	29088 <bt_uuid_cmp>
    cbfc:	9b01      	ldr	r3, [sp, #4]
    cbfe:	2800      	cmp	r0, #0
    cc00:	d0e9      	beq.n	cbd6 <bt_gatt_foreach_attr_type+0x116>
		for (i = 0; i < svc->attr_count; i++) {
    cc02:	3601      	adds	r6, #1
    cc04:	e783      	b.n	cb0e <bt_gatt_foreach_attr_type+0x4e>
	if (attr_data && attr_data != attr->user_data) {
    cc06:	f8da 200c 	ldr.w	r2, [sl, #12]
    cc0a:	4591      	cmp	r9, r2
    cc0c:	d1f9      	bne.n	cc02 <bt_gatt_foreach_attr_type+0x142>
    cc0e:	e7e5      	b.n	cbdc <bt_gatt_foreach_attr_type+0x11c>
		next = SYS_SLIST_PEEK_NEXT_CONTAINER(svc, node);
    cc10:	461e      	mov	r6, r3
    cc12:	e77c      	b.n	cb0e <bt_gatt_foreach_attr_type+0x4e>
    cc14:	20004686 	.word	0x20004686
    cc18:	20002c6c 	.word	0x20002c6c
    cc1c:	0002e324 	.word	0x0002e324
    cc20:	00031616 	.word	0x00031616
    cc24:	0002fa94 	.word	0x0002fa94
    cc28:	0002e314 	.word	0x0002e314

0000cc2c <db_hash_gen>:
{
    cc2c:	b530      	push	{r4, r5, lr}
    cc2e:	b0c9      	sub	sp, #292	; 0x124
	uint8_t key[16] = {};
    cc30:	2210      	movs	r2, #16
    cc32:	2100      	movs	r1, #0
{
    cc34:	4604      	mov	r4, r0
	uint8_t key[16] = {};
    cc36:	4668      	mov	r0, sp
    cc38:	f020 fcdf 	bl	2d5fa <memset>
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    cc3c:	aa1c      	add	r2, sp, #112	; 0x70
    cc3e:	4669      	mov	r1, sp
    cc40:	a804      	add	r0, sp, #16
    cc42:	f01b ff1a 	bl	28a7a <tc_cmac_setup>
    cc46:	b928      	cbnz	r0, cc54 <db_hash_gen+0x28>
		BT_ERR("Unable to setup AES CMAC");
    cc48:	4813      	ldr	r0, [pc, #76]	; (cc98 <db_hash_gen+0x6c>)
    cc4a:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Unable to calculate hash");
    cc4c:	f01a f98f 	bl	26f6e <printk>
}
    cc50:	b049      	add	sp, #292	; 0x124
    cc52:	bd30      	pop	{r4, r5, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
    cc54:	f64f 71ff 	movw	r1, #65535	; 0xffff
    cc58:	2001      	movs	r0, #1
    cc5a:	ab04      	add	r3, sp, #16
    cc5c:	4a0f      	ldr	r2, [pc, #60]	; (cc9c <db_hash_gen+0x70>)
    cc5e:	f01d fa7b 	bl	2a158 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
    cc62:	a904      	add	r1, sp, #16
    cc64:	480e      	ldr	r0, [pc, #56]	; (cca0 <db_hash_gen+0x74>)
    cc66:	f01b ff9d 	bl	28ba4 <tc_cmac_final>
    cc6a:	b910      	cbnz	r0, cc72 <db_hash_gen+0x46>
		BT_ERR("Unable to calculate hash");
    cc6c:	2145      	movs	r1, #69	; 0x45
    cc6e:	480d      	ldr	r0, [pc, #52]	; (cca4 <db_hash_gen+0x78>)
    cc70:	e7ec      	b.n	cc4c <db_hash_gen+0x20>
    cc72:	4b0b      	ldr	r3, [pc, #44]	; (cca0 <db_hash_gen+0x74>)
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
    cc74:	2200      	movs	r2, #0
    cc76:	f103 0110 	add.w	r1, r3, #16
    cc7a:	3201      	adds	r2, #1
		uint8_t tmp = ((uint8_t *)buf)[i];
    cc7c:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
    cc7e:	f811 5d01 	ldrb.w	r5, [r1, #-1]!
    cc82:	f803 5b01 	strb.w	r5, [r3], #1
	for (i = 0; i < (length/2); i++) {
    cc86:	2a08      	cmp	r2, #8
		((uint8_t *)buf)[length - 1 - i] = tmp;
    cc88:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
    cc8a:	d1f6      	bne.n	cc7a <db_hash_gen+0x4e>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
    cc8c:	2c00      	cmp	r4, #0
    cc8e:	d0df      	beq.n	cc50 <db_hash_gen+0x24>
		db_hash_store();
    cc90:	f7ff f942 	bl	bf18 <db_hash_store>
    cc94:	e7dc      	b.n	cc50 <db_hash_gen+0x24>
    cc96:	bf00      	nop
    cc98:	000316ff 	.word	0x000316ff
    cc9c:	00029dbd 	.word	0x00029dbd
    cca0:	2000481f 	.word	0x2000481f
    cca4:	0003171d 	.word	0x0003171d

0000cca8 <db_hash_commit>:
{
    cca8:	b508      	push	{r3, lr}
	err = k_delayed_work_cancel(&db_hash_work);
    ccaa:	480f      	ldr	r0, [pc, #60]	; (cce8 <db_hash_commit+0x40>)
    ccac:	f017 f8e4 	bl	23e78 <k_delayed_work_cancel>
	if (!err) {
    ccb0:	b908      	cbnz	r0, ccb6 <db_hash_commit+0xe>
		db_hash_gen(false);
    ccb2:	f7ff ffbb 	bl	cc2c <db_hash_gen>
	if (!memcmp(stored_hash, db_hash, sizeof(stored_hash))) {
    ccb6:	2210      	movs	r2, #16
    ccb8:	490c      	ldr	r1, [pc, #48]	; (ccec <db_hash_commit+0x44>)
    ccba:	480d      	ldr	r0, [pc, #52]	; (ccf0 <db_hash_commit+0x48>)
    ccbc:	f020 fc54 	bl	2d568 <memcmp>
    ccc0:	b948      	cbnz	r0, ccd6 <db_hash_commit+0x2e>
		k_delayed_work_cancel(&gatt_sc.work);
    ccc2:	480c      	ldr	r0, [pc, #48]	; (ccf4 <db_hash_commit+0x4c>)
    ccc4:	f017 f8d8 	bl	23e78 <k_delayed_work_cancel>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    ccc8:	f06f 0101 	mvn.w	r1, #1
    cccc:	480a      	ldr	r0, [pc, #40]	; (ccf8 <db_hash_commit+0x50>)
    ccce:	f01d f8c9 	bl	29e64 <atomic_and>
}
    ccd2:	2000      	movs	r0, #0
    ccd4:	bd08      	pop	{r3, pc}
	sc_indicate(0x0001, 0xffff);
    ccd6:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ccda:	2001      	movs	r0, #1
    ccdc:	f7ff fd56 	bl	c78c <sc_indicate>
	db_hash_store();
    cce0:	f7ff f91a 	bl	bf18 <db_hash_store>
	return 0;
    cce4:	e7f5      	b.n	ccd2 <db_hash_commit+0x2a>
    cce6:	bf00      	nop
    cce8:	20001ae0 	.word	0x20001ae0
    ccec:	2000481f 	.word	0x2000481f
    ccf0:	2000482f 	.word	0x2000482f
    ccf4:	20001b30 	.word	0x20001b30
    ccf8:	20001b60 	.word	0x20001b60

0000ccfc <bt_gatt_service_register>:
{
    ccfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__ASSERT(svc, "invalid parameters\n");
    cd00:	4604      	mov	r4, r0
{
    cd02:	b085      	sub	sp, #20
	__ASSERT(svc, "invalid parameters\n");
    cd04:	b950      	cbnz	r0, cd1c <bt_gatt_service_register+0x20>
    cd06:	4972      	ldr	r1, [pc, #456]	; (ced0 <bt_gatt_service_register+0x1d4>)
    cd08:	4872      	ldr	r0, [pc, #456]	; (ced4 <bt_gatt_service_register+0x1d8>)
    cd0a:	f240 42ae 	movw	r2, #1198	; 0x4ae
    cd0e:	f01a f92e 	bl	26f6e <printk>
    cd12:	f240 41ae 	movw	r1, #1198	; 0x4ae
    cd16:	486e      	ldr	r0, [pc, #440]	; (ced0 <bt_gatt_service_register+0x1d4>)
    cd18:	f01a fba2 	bl	27460 <assert_post_action>
	__ASSERT(svc->attrs, "invalid parameters\n");
    cd1c:	6823      	ldr	r3, [r4, #0]
    cd1e:	b953      	cbnz	r3, cd36 <bt_gatt_service_register+0x3a>
    cd20:	496b      	ldr	r1, [pc, #428]	; (ced0 <bt_gatt_service_register+0x1d4>)
    cd22:	486c      	ldr	r0, [pc, #432]	; (ced4 <bt_gatt_service_register+0x1d8>)
    cd24:	f240 42af 	movw	r2, #1199	; 0x4af
    cd28:	f01a f921 	bl	26f6e <printk>
    cd2c:	f240 41af 	movw	r1, #1199	; 0x4af
    cd30:	4867      	ldr	r0, [pc, #412]	; (ced0 <bt_gatt_service_register+0x1d4>)
    cd32:	f01a fb95 	bl	27460 <assert_post_action>
	__ASSERT(svc->attr_count, "invalid parameters\n");
    cd36:	6863      	ldr	r3, [r4, #4]
    cd38:	b953      	cbnz	r3, cd50 <bt_gatt_service_register+0x54>
    cd3a:	4965      	ldr	r1, [pc, #404]	; (ced0 <bt_gatt_service_register+0x1d4>)
    cd3c:	4865      	ldr	r0, [pc, #404]	; (ced4 <bt_gatt_service_register+0x1d8>)
    cd3e:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
    cd42:	f01a f914 	bl	26f6e <printk>
    cd46:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
    cd4a:	4861      	ldr	r0, [pc, #388]	; (ced0 <bt_gatt_service_register+0x1d4>)
    cd4c:	f01a fb88 	bl	27460 <assert_post_action>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    cd50:	f3bf 8f5b 	dmb	ish
    cd54:	4b60      	ldr	r3, [pc, #384]	; (ced8 <bt_gatt_service_register+0x1dc>)
    cd56:	2201      	movs	r2, #1
    cd58:	e853 1f00 	ldrex	r1, [r3]
    cd5c:	2900      	cmp	r1, #0
    cd5e:	d103      	bne.n	cd68 <bt_gatt_service_register+0x6c>
    cd60:	e843 2000 	strex	r0, r2, [r3]
    cd64:	2800      	cmp	r0, #0
    cd66:	d1f7      	bne.n	cd58 <bt_gatt_service_register+0x5c>
    cd68:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
    cd6c:	d101      	bne.n	cd72 <bt_gatt_service_register+0x76>
    cd6e:	f7ff f911 	bl	bf94 <bt_gatt_service_init.part.13>
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    cd72:	6823      	ldr	r3, [r4, #0]
    cd74:	2500      	movs	r5, #0
    cd76:	6818      	ldr	r0, [r3, #0]
    cd78:	f88d 5004 	strb.w	r5, [sp, #4]
    cd7c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    cd80:	a901      	add	r1, sp, #4
    cd82:	f8ad 3006 	strh.w	r3, [sp, #6]
    cd86:	f01c f97f 	bl	29088 <bt_uuid_cmp>
    cd8a:	b920      	cbnz	r0, cd96 <bt_gatt_service_register+0x9a>
		return -EALREADY;
    cd8c:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
    cd90:	b005      	add	sp, #20
    cd92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	    !bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GATT)) {
    cd96:	6823      	ldr	r3, [r4, #0]
    cd98:	a902      	add	r1, sp, #8
    cd9a:	6818      	ldr	r0, [r3, #0]
    cd9c:	f88d 5008 	strb.w	r5, [sp, #8]
    cda0:	f641 0301 	movw	r3, #6145	; 0x1801
    cda4:	f8ad 300a 	strh.w	r3, [sp, #10]
    cda8:	f01c f96e 	bl	29088 <bt_uuid_cmp>
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    cdac:	2800      	cmp	r0, #0
    cdae:	d0ed      	beq.n	cd8c <bt_gatt_service_register+0x90>
Z_GENLIST_IS_EMPTY(slist)
    cdb0:	4d4a      	ldr	r5, [pc, #296]	; (cedc <bt_gatt_service_register+0x1e0>)
	struct bt_gatt_attr *attrs = svc->attrs;
    cdb2:	f8d4 8000 	ldr.w	r8, [r4]
	if (sys_slist_is_empty(&db)) {
    cdb6:	682e      	ldr	r6, [r5, #0]
	uint16_t count = svc->attr_count;
    cdb8:	f8b4 9004 	ldrh.w	r9, [r4, #4]
	if (sys_slist_is_empty(&db)) {
    cdbc:	b936      	cbnz	r6, cdcc <bt_gatt_service_register+0xd0>
		handle = last_static_handle;
    cdbe:	4b48      	ldr	r3, [pc, #288]	; (cee0 <bt_gatt_service_register+0x1e4>)
    cdc0:	881f      	ldrh	r7, [r3, #0]
	bt_gatt_foreach_attr(handle, handle, found_attr, &attr);
    cdc2:	f8df b128 	ldr.w	fp, [pc, #296]	; ceec <bt_gatt_service_register+0x1f0>
	const struct bt_gatt_attr *attr = NULL;
    cdc6:	f04f 0a00 	mov.w	sl, #0
    cdca:	e01a      	b.n	ce02 <bt_gatt_service_register+0x106>
	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
    cdcc:	686b      	ldr	r3, [r5, #4]
    cdce:	2b00      	cmp	r3, #0
    cdd0:	d07c      	beq.n	cecc <bt_gatt_service_register+0x1d0>
	handle = last->attrs[last->attr_count - 1].handle;
    cdd2:	e953 3202 	ldrd	r3, r2, [r3, #-8]
    cdd6:	2114      	movs	r1, #20
    cdd8:	fb01 3302 	mla	r3, r1, r2, r3
    cddc:	f833 7c04 	ldrh.w	r7, [r3, #-4]
    cde0:	463e      	mov	r6, r7
    cde2:	e7ee      	b.n	cdc2 <bt_gatt_service_register+0xc6>
		if (!attrs->handle) {
    cde4:	f8b8 1010 	ldrh.w	r1, [r8, #16]
    cde8:	2900      	cmp	r1, #0
    cdea:	d134      	bne.n	ce56 <bt_gatt_service_register+0x15a>
			attrs->handle = ++handle;
    cdec:	1c79      	adds	r1, r7, #1
    cdee:	b289      	uxth	r1, r1
    cdf0:	f8a8 1010 	strh.w	r1, [r8, #16]
	for (; attrs && count; attrs++, count--) {
    cdf4:	f109 39ff 	add.w	r9, r9, #4294967295
    cdf8:	f108 0814 	add.w	r8, r8, #20
    cdfc:	fa1f f989 	uxth.w	r9, r9
    ce00:	460f      	mov	r7, r1
    ce02:	f1b8 0f00 	cmp.w	r8, #0
    ce06:	d002      	beq.n	ce0e <bt_gatt_service_register+0x112>
    ce08:	f1b9 0f00 	cmp.w	r9, #0
    ce0c:	d1ea      	bne.n	cde4 <bt_gatt_service_register+0xe8>
	if (last_handle == 0 || svc->attrs[0].handle > last_handle) {
    ce0e:	b11e      	cbz	r6, ce18 <bt_gatt_service_register+0x11c>
    ce10:	6823      	ldr	r3, [r4, #0]
    ce12:	8a18      	ldrh	r0, [r3, #16]
    ce14:	4286      	cmp	r6, r0
    ce16:	d234      	bcs.n	ce82 <bt_gatt_service_register+0x186>
	parent->next = child;
    ce18:	2200      	movs	r2, #0
		sys_slist_append(&db, &svc->node);
    ce1a:	f104 0308 	add.w	r3, r4, #8
    ce1e:	60a2      	str	r2, [r4, #8]
Z_GENLIST_APPEND(slist, snode)
    ce20:	686a      	ldr	r2, [r5, #4]
    ce22:	2a00      	cmp	r2, #0
    ce24:	d142      	bne.n	ceac <bt_gatt_service_register+0x1b0>
	list->head = node;
    ce26:	e9c5 3300 	strd	r3, r3, [r5]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    ce2a:	f3bf 8f5b 	dmb	ish
    ce2e:	4b2d      	ldr	r3, [pc, #180]	; (cee4 <bt_gatt_service_register+0x1e8>)
    ce30:	6818      	ldr	r0, [r3, #0]
    ce32:	f3bf 8f5b 	dmb	ish
	if (!atomic_get(&init)) {
    ce36:	2800      	cmp	r0, #0
    ce38:	d0aa      	beq.n	cd90 <bt_gatt_service_register+0x94>
		    svc->attrs[svc->attr_count - 1].handle);
    ce3a:	e9d4 2300 	ldrd	r2, r3, [r4]
	sc_indicate(svc->attrs[0].handle,
    ce3e:	2114      	movs	r1, #20
    ce40:	fb01 2303 	mla	r3, r1, r3, r2
    ce44:	8a10      	ldrh	r0, [r2, #16]
    ce46:	f833 1c04 	ldrh.w	r1, [r3, #-4]
    ce4a:	f7ff fc9f 	bl	c78c <sc_indicate>
	db_changed();
    ce4e:	f7ff fc3d 	bl	c6cc <db_changed>
	return 0;
    ce52:	2000      	movs	r0, #0
    ce54:	e79c      	b.n	cd90 <bt_gatt_service_register+0x94>
		} else if (attrs->handle > handle) {
    ce56:	42b9      	cmp	r1, r7
    ce58:	d8cc      	bhi.n	cdf4 <bt_gatt_service_register+0xf8>
	bt_gatt_foreach_attr(handle, handle, found_attr, &attr);
    ce5a:	ab03      	add	r3, sp, #12
    ce5c:	465a      	mov	r2, fp
    ce5e:	4608      	mov	r0, r1
	const struct bt_gatt_attr *attr = NULL;
    ce60:	f8cd a00c 	str.w	sl, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, found_attr, &attr);
    ce64:	f01d f978 	bl	2a158 <bt_gatt_foreach_attr>
	return attr;
    ce68:	9b03      	ldr	r3, [sp, #12]
		} else if (find_attr(attrs->handle)) {
    ce6a:	b143      	cbz	r3, ce7e <bt_gatt_service_register+0x182>
			BT_ERR("Unable to register handle 0x%04x",
    ce6c:	481e      	ldr	r0, [pc, #120]	; (cee8 <bt_gatt_service_register+0x1ec>)
    ce6e:	f8b8 2010 	ldrh.w	r2, [r8, #16]
    ce72:	2145      	movs	r1, #69	; 0x45
    ce74:	f01a f87b 	bl	26f6e <printk>
			return -EINVAL;
    ce78:	f06f 0015 	mvn.w	r0, #21
    ce7c:	e788      	b.n	cd90 <bt_gatt_service_register+0x94>
		} else if (find_attr(attrs->handle)) {
    ce7e:	4639      	mov	r1, r7
    ce80:	e7b8      	b.n	cdf4 <bt_gatt_service_register+0xf8>
	SYS_SLIST_FOR_EACH_CONTAINER(&db, tmp, node) {
    ce82:	6829      	ldr	r1, [r5, #0]
    ce84:	2900      	cmp	r1, #0
    ce86:	d0d0      	beq.n	ce2a <bt_gatt_service_register+0x12e>
    ce88:	f1a1 0308 	sub.w	r3, r1, #8
    ce8c:	2200      	movs	r2, #0
    ce8e:	2b00      	cmp	r3, #0
    ce90:	d0cb      	beq.n	ce2a <bt_gatt_service_register+0x12e>
		if (tmp->attrs[0].handle > svc->attrs[0].handle) {
    ce92:	681e      	ldr	r6, [r3, #0]
    ce94:	8a36      	ldrh	r6, [r6, #16]
    ce96:	4286      	cmp	r6, r0
    ce98:	d911      	bls.n	cebe <bt_gatt_service_register+0x1c2>
			if (prev) {
    ce9a:	f104 0308 	add.w	r3, r4, #8
    ce9e:	b142      	cbz	r2, ceb2 <bt_gatt_service_register+0x1b6>
Z_GENLIST_INSERT(slist, snode)
    cea0:	6891      	ldr	r1, [r2, #8]
	parent->next = child;
    cea2:	60a1      	str	r1, [r4, #8]
Z_GENLIST_INSERT(slist, snode)
    cea4:	2900      	cmp	r1, #0
    cea6:	d0bb      	beq.n	ce20 <bt_gatt_service_register+0x124>
	parent->next = child;
    cea8:	6093      	str	r3, [r2, #8]
	if (err < 0) {
    ceaa:	e7be      	b.n	ce2a <bt_gatt_service_register+0x12e>
    ceac:	6013      	str	r3, [r2, #0]
	list->tail = node;
    ceae:	606b      	str	r3, [r5, #4]
    ceb0:	e7bb      	b.n	ce2a <bt_gatt_service_register+0x12e>
Z_GENLIST_PREPEND(slist, snode)
    ceb2:	686a      	ldr	r2, [r5, #4]
	parent->next = child;
    ceb4:	60a1      	str	r1, [r4, #8]
	list->head = node;
    ceb6:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
    ceb8:	2a00      	cmp	r2, #0
    ceba:	d1b6      	bne.n	ce2a <bt_gatt_service_register+0x12e>
    cebc:	e7f7      	b.n	ceae <bt_gatt_service_register+0x1b2>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    cebe:	689e      	ldr	r6, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, tmp, node) {
    cec0:	2e00      	cmp	r6, #0
    cec2:	d0b2      	beq.n	ce2a <bt_gatt_service_register+0x12e>
    cec4:	461a      	mov	r2, r3
    cec6:	f1a6 0308 	sub.w	r3, r6, #8
    ceca:	e7e0      	b.n	ce8e <bt_gatt_service_register+0x192>
	handle = last->attrs[last->attr_count - 1].handle;
    cecc:	681b      	ldr	r3, [r3, #0]
    cece:	deff      	udf	#255	; 0xff
    ced0:	00031616 	.word	0x00031616
    ced4:	0002fa94 	.word	0x0002fa94
    ced8:	20002cc0 	.word	0x20002cc0
    cedc:	20002c6c 	.word	0x20002c6c
    cee0:	20004686 	.word	0x20004686
    cee4:	20002c74 	.word	0x20002c74
    cee8:	00031646 	.word	0x00031646
    ceec:	00029d63 	.word	0x00029d63

0000cef0 <ccc_set_direct>:
{
    cef0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    cef4:	b0b9      	sub	sp, #228	; 0xe4
    cef6:	4689      	mov	r9, r1
    cef8:	4617      	mov	r7, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
    cefa:	492a      	ldr	r1, [pc, #168]	; (cfa4 <ccc_set_direct+0xb4>)
    cefc:	9840      	ldr	r0, [sp, #256]	; 0x100
    cefe:	466a      	mov	r2, sp
{
    cf00:	4698      	mov	r8, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
    cf02:	f01a fc41 	bl	27788 <settings_name_steq>
    cf06:	b948      	cbnz	r0, cf1c <ccc_set_direct+0x2c>
			BT_ERR("Invalid key");
    cf08:	2145      	movs	r1, #69	; 0x45
    cf0a:	4827      	ldr	r0, [pc, #156]	; (cfa8 <ccc_set_direct+0xb8>)
    cf0c:	f01a f82f 	bl	26f6e <printk>
    cf10:	f06f 0515 	mvn.w	r5, #21
}
    cf14:	4628      	mov	r0, r5
    cf16:	b039      	add	sp, #228	; 0xe4
    cf18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return ccc_set(name, len, read_cb, cb_arg);
    cf1c:	9c00      	ldr	r4, [sp, #0]
		settings_name_next(name, &next);
    cf1e:	a901      	add	r1, sp, #4
    cf20:	4620      	mov	r0, r4
    cf22:	f01a fc51 	bl	277c8 <settings_name_next>
		if (!name) {
    cf26:	b93c      	cbnz	r4, cf38 <ccc_set_direct+0x48>
			BT_ERR("Insufficient number of arguments");
    cf28:	2145      	movs	r1, #69	; 0x45
    cf2a:	4820      	ldr	r0, [pc, #128]	; (cfac <ccc_set_direct+0xbc>)
    cf2c:	f01a f81f 	bl	26f6e <printk>
			return -EINVAL;
    cf30:	f06f 0415 	mvn.w	r4, #21
			return -EINVAL;
    cf34:	4625      	mov	r5, r4
    cf36:	e7ed      	b.n	cf14 <ccc_set_direct+0x24>
		} else if (!next) {
    cf38:	9801      	ldr	r0, [sp, #4]
    cf3a:	b970      	cbnz	r0, cf5a <ccc_set_direct+0x6a>
		err = bt_settings_decode_key(name, &addr);
    cf3c:	ae02      	add	r6, sp, #8
			load.addr_with_id.id = strtol(next, NULL, 10);
    cf3e:	f88d 0014 	strb.w	r0, [sp, #20]
		err = bt_settings_decode_key(name, &addr);
    cf42:	4631      	mov	r1, r6
    cf44:	4620      	mov	r0, r4
    cf46:	f01b febb 	bl	28cc0 <bt_settings_decode_key>
		if (err) {
    cf4a:	4605      	mov	r5, r0
    cf4c:	b150      	cbz	r0, cf64 <ccc_set_direct+0x74>
			BT_ERR("Unable to decode address %s", log_strdup(name));
    cf4e:	4622      	mov	r2, r4
    cf50:	2145      	movs	r1, #69	; 0x45
    cf52:	4817      	ldr	r0, [pc, #92]	; (cfb0 <ccc_set_direct+0xc0>)
    cf54:	f01a f80b 	bl	26f6e <printk>
    cf58:	e7ea      	b.n	cf30 <ccc_set_direct+0x40>
			load.addr_with_id.id = strtol(next, NULL, 10);
    cf5a:	220a      	movs	r2, #10
    cf5c:	2100      	movs	r1, #0
    cf5e:	f019 f99b 	bl	26298 <strtol>
    cf62:	e7eb      	b.n	cf3c <ccc_set_direct+0x4c>
		load.addr_with_id.addr = &addr;
    cf64:	9604      	str	r6, [sp, #16]
		if (len_rd) {
    cf66:	f1b9 0f00 	cmp.w	r9, #0
    cf6a:	d017      	beq.n	cf9c <ccc_set_direct+0xac>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
    cf6c:	ae08      	add	r6, sp, #32
    cf6e:	22c0      	movs	r2, #192	; 0xc0
    cf70:	4631      	mov	r1, r6
    cf72:	4640      	mov	r0, r8
    cf74:	47b8      	blx	r7
			if (len < 0) {
    cf76:	1e04      	subs	r4, r0, #0
    cf78:	da05      	bge.n	cf86 <ccc_set_direct+0x96>
				BT_ERR("Failed to decode value (err %zd)", len);
    cf7a:	4622      	mov	r2, r4
    cf7c:	2145      	movs	r1, #69	; 0x45
    cf7e:	480d      	ldr	r0, [pc, #52]	; (cfb4 <ccc_set_direct+0xc4>)
    cf80:	f019 fff5 	bl	26f6e <printk>
				return len;
    cf84:	e7d6      	b.n	cf34 <ccc_set_direct+0x44>
			load.count = len / sizeof(*ccc_store);
    cf86:	08a4      	lsrs	r4, r4, #2
			load.entry = ccc_store;
    cf88:	9606      	str	r6, [sp, #24]
			load.count = len / sizeof(*ccc_store);
    cf8a:	9407      	str	r4, [sp, #28]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
    cf8c:	ab04      	add	r3, sp, #16
    cf8e:	4a0a      	ldr	r2, [pc, #40]	; (cfb8 <ccc_set_direct+0xc8>)
    cf90:	f64f 71ff 	movw	r1, #65535	; 0xffff
    cf94:	2001      	movs	r0, #1
    cf96:	f01d f8df 	bl	2a158 <bt_gatt_foreach_attr>
	return 0;
    cf9a:	e7bb      	b.n	cf14 <ccc_set_direct+0x24>
			load.count = 0;
    cf9c:	e9cd 0006 	strd	r0, r0, [sp, #24]
    cfa0:	e7f4      	b.n	cf8c <ccc_set_direct+0x9c>
    cfa2:	bf00      	nop
    cfa4:	0003168f 	.word	0x0003168f
    cfa8:	00031696 	.word	0x00031696
    cfac:	000307a1 	.word	0x000307a1
    cfb0:	0003184c 	.word	0x0003184c
    cfb4:	0003173b 	.word	0x0003173b
    cfb8:	0000c07d 	.word	0x0000c07d

0000cfbc <bt_gatt_notify_cb>:
{
    cfbc:	b530      	push	{r4, r5, lr}
    cfbe:	4604      	mov	r4, r0
    cfc0:	b08d      	sub	sp, #52	; 0x34
	__ASSERT(params, "invalid parameters\n");
    cfc2:	460d      	mov	r5, r1
    cfc4:	b951      	cbnz	r1, cfdc <bt_gatt_notify_cb+0x20>
    cfc6:	4941      	ldr	r1, [pc, #260]	; (d0cc <bt_gatt_notify_cb+0x110>)
    cfc8:	4841      	ldr	r0, [pc, #260]	; (d0d0 <bt_gatt_notify_cb+0x114>)
    cfca:	f640 023d 	movw	r2, #2109	; 0x83d
    cfce:	f019 ffce 	bl	26f6e <printk>
    cfd2:	f640 013d 	movw	r1, #2109	; 0x83d
    cfd6:	483d      	ldr	r0, [pc, #244]	; (d0cc <bt_gatt_notify_cb+0x110>)
    cfd8:	f01a fa42 	bl	27460 <assert_post_action>
	__ASSERT(params->attr, "invalid parameters\n");
    cfdc:	686b      	ldr	r3, [r5, #4]
    cfde:	b953      	cbnz	r3, cff6 <bt_gatt_notify_cb+0x3a>
    cfe0:	493a      	ldr	r1, [pc, #232]	; (d0cc <bt_gatt_notify_cb+0x110>)
    cfe2:	483b      	ldr	r0, [pc, #236]	; (d0d0 <bt_gatt_notify_cb+0x114>)
    cfe4:	f640 023e 	movw	r2, #2110	; 0x83e
    cfe8:	f019 ffc1 	bl	26f6e <printk>
    cfec:	f640 013e 	movw	r1, #2110	; 0x83e
    cff0:	4836      	ldr	r0, [pc, #216]	; (d0cc <bt_gatt_notify_cb+0x110>)
    cff2:	f01a fa35 	bl	27460 <assert_post_action>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    cff6:	2101      	movs	r1, #1
    cff8:	4836      	ldr	r0, [pc, #216]	; (d0d4 <bt_gatt_notify_cb+0x118>)
    cffa:	f01c ffc6 	bl	29f8a <atomic_test_bit>
    cffe:	2800      	cmp	r0, #0
    d000:	d05a      	beq.n	d0b8 <bt_gatt_notify_cb+0xfc>
	data.attr = params->attr;
    d002:	6868      	ldr	r0, [r5, #4]
    d004:	9007      	str	r0, [sp, #28]
	if (conn && conn->state != BT_CONN_CONNECTED) {
    d006:	b114      	cbz	r4, d00e <bt_gatt_notify_cb+0x52>
    d008:	7aa3      	ldrb	r3, [r4, #10]
    d00a:	2b07      	cmp	r3, #7
    d00c:	d157      	bne.n	d0be <bt_gatt_notify_cb+0x102>
	data.handle = bt_gatt_attr_get_handle(data.attr);
    d00e:	f7ff fd13 	bl	ca38 <bt_gatt_attr_get_handle>
    d012:	f8ad 0020 	strh.w	r0, [sp, #32]
	if (!data.handle) {
    d016:	b918      	cbnz	r0, d020 <bt_gatt_notify_cb+0x64>
		return -ENOENT;
    d018:	f06f 0001 	mvn.w	r0, #1
}
    d01c:	b00d      	add	sp, #52	; 0x34
    d01e:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
    d020:	682a      	ldr	r2, [r5, #0]
    d022:	b9aa      	cbnz	r2, d050 <bt_gatt_notify_cb+0x94>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
    d024:	9b07      	ldr	r3, [sp, #28]
    d026:	6818      	ldr	r0, [r3, #0]
    d028:	2300      	movs	r3, #0
    d02a:	f88d 3014 	strb.w	r3, [sp, #20]
    d02e:	a905      	add	r1, sp, #20
    d030:	f642 0303 	movw	r3, #10243	; 0x2803
    d034:	f8ad 3016 	strh.w	r3, [sp, #22]
    d038:	f01c f826 	bl	29088 <bt_uuid_cmp>
    d03c:	b1c0      	cbz	r0, d070 <bt_gatt_notify_cb+0xb4>
	if (conn) {
    d03e:	f8bd 0020 	ldrh.w	r0, [sp, #32]
    d042:	b1fc      	cbz	r4, d084 <bt_gatt_notify_cb+0xc8>
		return gatt_notify(conn, data.handle, params);
    d044:	4601      	mov	r1, r0
    d046:	462a      	mov	r2, r5
    d048:	4620      	mov	r0, r4
    d04a:	f7ff fb6f 	bl	c72c <gatt_notify>
    d04e:	e7e5      	b.n	d01c <bt_gatt_notify_cb+0x60>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    d050:	a907      	add	r1, sp, #28
    d052:	9102      	str	r1, [sp, #8]
    d054:	4920      	ldr	r1, [pc, #128]	; (d0d8 <bt_gatt_notify_cb+0x11c>)
    d056:	9101      	str	r1, [sp, #4]
    d058:	2101      	movs	r1, #1
	found->attr = NULL;
    d05a:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    d05c:	9100      	str	r1, [sp, #0]
    d05e:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
    d062:	9307      	str	r3, [sp, #28]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    d064:	f7ff fd2c 	bl	cac0 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
    d068:	9b07      	ldr	r3, [sp, #28]
    d06a:	2b00      	cmp	r3, #0
    d06c:	d1da      	bne.n	d024 <bt_gatt_notify_cb+0x68>
    d06e:	e7d3      	b.n	d018 <bt_gatt_notify_cb+0x5c>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
    d070:	9807      	ldr	r0, [sp, #28]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
    d072:	68c3      	ldr	r3, [r0, #12]
    d074:	799b      	ldrb	r3, [r3, #6]
    d076:	06db      	lsls	r3, r3, #27
    d078:	d524      	bpl.n	d0c4 <bt_gatt_notify_cb+0x108>
		data.handle = bt_gatt_attr_value_handle(data.attr);
    d07a:	f01d f826 	bl	2a0ca <bt_gatt_attr_value_handle>
    d07e:	f8ad 0020 	strh.w	r0, [sp, #32]
    d082:	e7dc      	b.n	d03e <bt_gatt_notify_cb+0x82>
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    d084:	f642 1202 	movw	r2, #10498	; 0x2902
    d088:	f8ad 201a 	strh.w	r2, [sp, #26]
    d08c:	aa07      	add	r2, sp, #28
	data.err = -ENOTCONN;
    d08e:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    d092:	9202      	str	r2, [sp, #8]
    d094:	4a11      	ldr	r2, [pc, #68]	; (d0dc <bt_gatt_notify_cb+0x120>)
	data.err = -ENOTCONN;
    d096:	9309      	str	r3, [sp, #36]	; 0x24
	data.type = BT_GATT_CCC_NOTIFY;
    d098:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    d09a:	e9cd 3200 	strd	r3, r2, [sp]
	data.type = BT_GATT_CCC_NOTIFY;
    d09e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    d0a2:	aa06      	add	r2, sp, #24
    d0a4:	4623      	mov	r3, r4
    d0a6:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.nfy_params = params;
    d0aa:	950b      	str	r5, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    d0ac:	f88d 4018 	strb.w	r4, [sp, #24]
    d0b0:	f7ff fd06 	bl	cac0 <bt_gatt_foreach_attr_type>
	return data.err;
    d0b4:	9809      	ldr	r0, [sp, #36]	; 0x24
    d0b6:	e7b1      	b.n	d01c <bt_gatt_notify_cb+0x60>
		return -EAGAIN;
    d0b8:	f06f 000a 	mvn.w	r0, #10
    d0bc:	e7ae      	b.n	d01c <bt_gatt_notify_cb+0x60>
		return -ENOTCONN;
    d0be:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    d0c2:	e7ab      	b.n	d01c <bt_gatt_notify_cb+0x60>
			return -EINVAL;
    d0c4:	f06f 0015 	mvn.w	r0, #21
    d0c8:	e7a8      	b.n	d01c <bt_gatt_notify_cb+0x60>
    d0ca:	bf00      	nop
    d0cc:	00031616 	.word	0x00031616
    d0d0:	0002fa94 	.word	0x0002fa94
    d0d4:	20000254 	.word	0x20000254
    d0d8:	00029db1 	.word	0x00029db1
    d0dc:	0000c89d 	.word	0x0000c89d

0000d0e0 <bt_gatt_indicate>:
{
    d0e0:	b530      	push	{r4, r5, lr}
    d0e2:	4605      	mov	r5, r0
    d0e4:	b08d      	sub	sp, #52	; 0x34
	__ASSERT(params, "invalid parameters\n");
    d0e6:	460c      	mov	r4, r1
    d0e8:	b951      	cbnz	r1, d100 <bt_gatt_indicate+0x20>
    d0ea:	4943      	ldr	r1, [pc, #268]	; (d1f8 <bt_gatt_indicate+0x118>)
    d0ec:	4843      	ldr	r0, [pc, #268]	; (d1fc <bt_gatt_indicate+0x11c>)
    d0ee:	f640 0289 	movw	r2, #2185	; 0x889
    d0f2:	f019 ff3c 	bl	26f6e <printk>
    d0f6:	f640 0189 	movw	r1, #2185	; 0x889
    d0fa:	483f      	ldr	r0, [pc, #252]	; (d1f8 <bt_gatt_indicate+0x118>)
    d0fc:	f01a f9b0 	bl	27460 <assert_post_action>
	__ASSERT(params->attr, "invalid parameters\n");
    d100:	6863      	ldr	r3, [r4, #4]
    d102:	b953      	cbnz	r3, d11a <bt_gatt_indicate+0x3a>
    d104:	493c      	ldr	r1, [pc, #240]	; (d1f8 <bt_gatt_indicate+0x118>)
    d106:	483d      	ldr	r0, [pc, #244]	; (d1fc <bt_gatt_indicate+0x11c>)
    d108:	f640 028a 	movw	r2, #2186	; 0x88a
    d10c:	f019 ff2f 	bl	26f6e <printk>
    d110:	f640 018a 	movw	r1, #2186	; 0x88a
    d114:	4838      	ldr	r0, [pc, #224]	; (d1f8 <bt_gatt_indicate+0x118>)
    d116:	f01a f9a3 	bl	27460 <assert_post_action>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    d11a:	2101      	movs	r1, #1
    d11c:	4838      	ldr	r0, [pc, #224]	; (d200 <bt_gatt_indicate+0x120>)
    d11e:	f01c ff34 	bl	29f8a <atomic_test_bit>
    d122:	2800      	cmp	r0, #0
    d124:	d05e      	beq.n	d1e4 <bt_gatt_indicate+0x104>
	data.attr = params->attr;
    d126:	6860      	ldr	r0, [r4, #4]
    d128:	9007      	str	r0, [sp, #28]
	if (conn && conn->state != BT_CONN_CONNECTED) {
    d12a:	b115      	cbz	r5, d132 <bt_gatt_indicate+0x52>
    d12c:	7aab      	ldrb	r3, [r5, #10]
    d12e:	2b07      	cmp	r3, #7
    d130:	d15b      	bne.n	d1ea <bt_gatt_indicate+0x10a>
	data.handle = bt_gatt_attr_get_handle(data.attr);
    d132:	f7ff fc81 	bl	ca38 <bt_gatt_attr_get_handle>
    d136:	f8ad 0020 	strh.w	r0, [sp, #32]
	if (!data.handle) {
    d13a:	b918      	cbnz	r0, d144 <bt_gatt_indicate+0x64>
		return -ENOENT;
    d13c:	f06f 0001 	mvn.w	r0, #1
}
    d140:	b00d      	add	sp, #52	; 0x34
    d142:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
    d144:	6822      	ldr	r2, [r4, #0]
    d146:	b9ba      	cbnz	r2, d178 <bt_gatt_indicate+0x98>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
    d148:	9b07      	ldr	r3, [sp, #28]
    d14a:	6818      	ldr	r0, [r3, #0]
    d14c:	2300      	movs	r3, #0
    d14e:	f88d 3014 	strb.w	r3, [sp, #20]
    d152:	a905      	add	r1, sp, #20
    d154:	f642 0303 	movw	r3, #10243	; 0x2803
    d158:	f8ad 3016 	strh.w	r3, [sp, #22]
    d15c:	f01b ff94 	bl	29088 <bt_uuid_cmp>
    d160:	b1d0      	cbz	r0, d198 <bt_gatt_indicate+0xb8>
	if (conn) {
    d162:	f8bd 0020 	ldrh.w	r0, [sp, #32]
    d166:	b30d      	cbz	r5, d1ac <bt_gatt_indicate+0xcc>
		params->_ref = 1;
    d168:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
    d16a:	4601      	mov	r1, r0
		params->_ref = 1;
    d16c:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
    d16e:	4622      	mov	r2, r4
    d170:	4628      	mov	r0, r5
    d172:	f7ff fb3d 	bl	c7f0 <gatt_indicate>
    d176:	e7e3      	b.n	d140 <bt_gatt_indicate+0x60>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    d178:	a907      	add	r1, sp, #28
    d17a:	9102      	str	r1, [sp, #8]
    d17c:	4921      	ldr	r1, [pc, #132]	; (d204 <bt_gatt_indicate+0x124>)
    d17e:	9101      	str	r1, [sp, #4]
    d180:	2101      	movs	r1, #1
	found->attr = NULL;
    d182:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    d184:	9100      	str	r1, [sp, #0]
    d186:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
    d18a:	9307      	str	r3, [sp, #28]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    d18c:	f7ff fc98 	bl	cac0 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
    d190:	9b07      	ldr	r3, [sp, #28]
    d192:	2b00      	cmp	r3, #0
    d194:	d1d8      	bne.n	d148 <bt_gatt_indicate+0x68>
    d196:	e7d1      	b.n	d13c <bt_gatt_indicate+0x5c>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
    d198:	9807      	ldr	r0, [sp, #28]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    d19a:	68c3      	ldr	r3, [r0, #12]
    d19c:	799b      	ldrb	r3, [r3, #6]
    d19e:	069b      	lsls	r3, r3, #26
    d1a0:	d526      	bpl.n	d1f0 <bt_gatt_indicate+0x110>
		data.handle = bt_gatt_attr_value_handle(data.attr);
    d1a2:	f01c ff92 	bl	2a0ca <bt_gatt_attr_value_handle>
    d1a6:	f8ad 0020 	strh.w	r0, [sp, #32]
    d1aa:	e7da      	b.n	d162 <bt_gatt_indicate+0x82>
	data.err = -ENOTCONN;
    d1ac:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    d1b0:	9309      	str	r3, [sp, #36]	; 0x24
	data.type = BT_GATT_CCC_INDICATE;
    d1b2:	2302      	movs	r3, #2
    d1b4:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    d1b8:	f642 1302 	movw	r3, #10498	; 0x2902
    d1bc:	f8ad 301a 	strh.w	r3, [sp, #26]
    d1c0:	ab07      	add	r3, sp, #28
	params->_ref = 0;
    d1c2:	75a5      	strb	r5, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    d1c4:	9302      	str	r3, [sp, #8]
    d1c6:	4b10      	ldr	r3, [pc, #64]	; (d208 <bt_gatt_indicate+0x128>)
    d1c8:	9301      	str	r3, [sp, #4]
    d1ca:	2301      	movs	r3, #1
    d1cc:	9300      	str	r3, [sp, #0]
    d1ce:	aa06      	add	r2, sp, #24
    d1d0:	462b      	mov	r3, r5
    d1d2:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
    d1d6:	940b      	str	r4, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    d1d8:	f88d 5018 	strb.w	r5, [sp, #24]
    d1dc:	f7ff fc70 	bl	cac0 <bt_gatt_foreach_attr_type>
	return data.err;
    d1e0:	9809      	ldr	r0, [sp, #36]	; 0x24
    d1e2:	e7ad      	b.n	d140 <bt_gatt_indicate+0x60>
		return -EAGAIN;
    d1e4:	f06f 000a 	mvn.w	r0, #10
    d1e8:	e7aa      	b.n	d140 <bt_gatt_indicate+0x60>
		return -ENOTCONN;
    d1ea:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    d1ee:	e7a7      	b.n	d140 <bt_gatt_indicate+0x60>
			return -EINVAL;
    d1f0:	f06f 0015 	mvn.w	r0, #21
    d1f4:	e7a4      	b.n	d140 <bt_gatt_indicate+0x60>
    d1f6:	bf00      	nop
    d1f8:	00031616 	.word	0x00031616
    d1fc:	0002fa94 	.word	0x0002fa94
    d200:	20000254 	.word	0x20000254
    d204:	00029db1 	.word	0x00029db1
    d208:	0000c89d 	.word	0x0000c89d

0000d20c <sc_process>:
{
    d20c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
    d20e:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
    d212:	4604      	mov	r4, r0
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
    d214:	2101      	movs	r1, #1
    d216:	4628      	mov	r0, r5
    d218:	f01c feb7 	bl	29f8a <atomic_test_bit>
    d21c:	b150      	cbz	r0, d234 <sc_process+0x28>
    d21e:	4917      	ldr	r1, [pc, #92]	; (d27c <sc_process+0x70>)
    d220:	4817      	ldr	r0, [pc, #92]	; (d280 <sc_process+0x74>)
    d222:	f240 32af 	movw	r2, #943	; 0x3af
    d226:	f019 fea2 	bl	26f6e <printk>
    d22a:	f240 31af 	movw	r1, #943	; 0x3af
    d22e:	4813      	ldr	r0, [pc, #76]	; (d27c <sc_process+0x70>)
    d230:	f01a f916 	bl	27460 <assert_post_action>
	sc_range[0] = sys_cpu_to_le16(sc->start);
    d234:	f854 3c08 	ldr.w	r3, [r4, #-8]
    d238:	9301      	str	r3, [sp, #4]
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    d23a:	f06f 0101 	mvn.w	r1, #1
    d23e:	4628      	mov	r0, r5
    d240:	f01c fe10 	bl	29e64 <atomic_and>
	sc->params.attr = &_1_gatt_svc.attrs[2];
    d244:	4b0f      	ldr	r3, [pc, #60]	; (d284 <sc_process+0x78>)
    d246:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
    d24a:	4b0f      	ldr	r3, [pc, #60]	; (d288 <sc_process+0x7c>)
    d24c:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
    d250:	ab01      	add	r3, sp, #4
	sc->start = 0U;
    d252:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
    d254:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
    d258:	2304      	movs	r3, #4
	sc->start = 0U;
    d25a:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->end = 0U;
    d25e:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
    d262:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
    d266:	f1a4 0120 	sub.w	r1, r4, #32
    d26a:	f7ff ff39 	bl	d0e0 <bt_gatt_indicate>
    d26e:	b918      	cbnz	r0, d278 <sc_process+0x6c>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
    d270:	2101      	movs	r1, #1
    d272:	4628      	mov	r0, r5
    d274:	f01c febd 	bl	29ff2 <atomic_set_bit>
}
    d278:	b003      	add	sp, #12
    d27a:	bd30      	pop	{r4, r5, pc}
    d27c:	00031616 	.word	0x00031616
    d280:	0002fa94 	.word	0x0002fa94
    d284:	0002ed9c 	.word	0x0002ed9c
    d288:	0000c515 	.word	0x0000c515

0000d28c <update_ccc>:
{
    d28c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    d290:	4b30      	ldr	r3, [pc, #192]	; (d354 <update_ccc+0xc8>)
    d292:	6881      	ldr	r1, [r0, #8]
    d294:	4299      	cmp	r1, r3
{
    d296:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    d298:	d158      	bne.n	d34c <update_ccc+0xc0>
	ccc = attr->user_data;
    d29a:	68c7      	ldr	r7, [r0, #12]
	struct bt_conn *conn = data->conn;
    d29c:	6815      	ldr	r5, [r2, #0]
				BT_WARN("CCC %p not writable", attr);
    d29e:	f8df 90cc 	ldr.w	r9, [pc, #204]	; d36c <update_ccc+0xe0>
    d2a2:	1c7c      	adds	r4, r7, #1
    d2a4:	f107 081f 	add.w	r8, r7, #31
		if (!cfg->value ||
    d2a8:	f8b4 3007 	ldrh.w	r3, [r4, #7]
    d2ac:	b193      	cbz	r3, d2d4 <update_ccc+0x48>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    d2ae:	4622      	mov	r2, r4
    d2b0:	f814 1c01 	ldrb.w	r1, [r4, #-1]
    d2b4:	4628      	mov	r0, r5
    d2b6:	f01c f8e9 	bl	2948c <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
    d2ba:	b158      	cbz	r0, d2d4 <update_ccc+0x48>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
    d2bc:	222a      	movs	r2, #42	; 0x2a
    d2be:	4631      	mov	r1, r6
    d2c0:	4628      	mov	r0, r5
    d2c2:	f01c ff59 	bl	2a178 <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
    d2c6:	2803      	cmp	r0, #3
    d2c8:	d108      	bne.n	d2dc <update_ccc+0x50>
				BT_WARN("CCC %p not writable", attr);
    d2ca:	4632      	mov	r2, r6
    d2cc:	2157      	movs	r1, #87	; 0x57
    d2ce:	4648      	mov	r0, r9
    d2d0:	f019 fe4d 	bl	26f6e <printk>
				continue;
    d2d4:	340a      	adds	r4, #10
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    d2d6:	4544      	cmp	r4, r8
    d2d8:	d1e6      	bne.n	d2a8 <update_ccc+0x1c>
    d2da:	e037      	b.n	d34c <update_ccc+0xc0>
		gatt_ccc_changed(attr, ccc);
    d2dc:	4639      	mov	r1, r7
    d2de:	4630      	mov	r0, r6
    d2e0:	f01c fd42 	bl	29d68 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
    d2e4:	4b1c      	ldr	r3, [pc, #112]	; (d358 <update_ccc+0xcc>)
    d2e6:	429f      	cmp	r7, r3
    d2e8:	d130      	bne.n	d34c <update_ccc+0xc0>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
    d2ea:	f105 0188 	add.w	r1, r5, #136	; 0x88
    d2ee:	7a28      	ldrb	r0, [r5, #8]
    d2f0:	f7fe ff3c 	bl	c16c <find_sc_cfg>
	if (!cfg) {
    d2f4:	4604      	mov	r4, r0
    d2f6:	b348      	cbz	r0, d34c <update_ccc+0xc0>
	if (!(cfg->data.start || cfg->data.end)) {
    d2f8:	8902      	ldrh	r2, [r0, #8]
    d2fa:	8943      	ldrh	r3, [r0, #10]
    d2fc:	ea52 0103 	orrs.w	r1, r2, r3
    d300:	d024      	beq.n	d34c <update_ccc+0xc0>
	index = bt_conn_index(conn);
    d302:	4628      	mov	r0, r5
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
    d304:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
    d308:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
    d30c:	f7fd fc18 	bl	ab40 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    d310:	4912      	ldr	r1, [pc, #72]	; (d35c <update_ccc+0xd0>)
    d312:	4a13      	ldr	r2, [pc, #76]	; (d360 <update_ccc+0xd4>)
    d314:	2318      	movs	r3, #24
    d316:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    d31a:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    d31c:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
    d31e:	4a11      	ldr	r2, [pc, #68]	; (d364 <update_ccc+0xd8>)
    d320:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
    d322:	aa01      	add	r2, sp, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    d324:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].data = &sc_range[0];
    d328:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
    d32a:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    d32c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
    d330:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    d332:	4628      	mov	r0, r5
    d334:	f7ff fed4 	bl	d0e0 <bt_gatt_indicate>
    d338:	b118      	cbz	r0, d342 <update_ccc+0xb6>
		BT_ERR("SC restore indication failed");
    d33a:	2145      	movs	r1, #69	; 0x45
    d33c:	480a      	ldr	r0, [pc, #40]	; (d368 <update_ccc+0xdc>)
    d33e:	f019 fe16 	bl	26f6e <printk>
__ssp_bos_icheck3(memset, void *, int)
    d342:	2300      	movs	r3, #0
    d344:	60a3      	str	r3, [r4, #8]
		sc_store(cfg);
    d346:	4620      	mov	r0, r4
    d348:	f7fe fdfc 	bl	bf44 <sc_store>
}
    d34c:	2001      	movs	r0, #1
    d34e:	b003      	add	sp, #12
    d350:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d354:	0000c61d 	.word	0x0000c61d
    d358:	200007d4 	.word	0x200007d4
    d35c:	20002c78 	.word	0x20002c78
    d360:	0002ed9c 	.word	0x0002ed9c
    d364:	0002a011 	.word	0x0002a011
    d368:	000318e2 	.word	0x000318e2
    d36c:	000318c9 	.word	0x000318c9

0000d370 <bt_gatt_connected>:
{
    d370:	b530      	push	{r4, r5, lr}
    d372:	b08f      	sub	sp, #60	; 0x3c
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    d374:	f100 0588 	add.w	r5, r0, #136	; 0x88
{
    d378:	4604      	mov	r4, r0
	data.conn = conn;
    d37a:	9003      	str	r0, [sp, #12]
	data.sec = BT_SECURITY_L1;
    d37c:	2301      	movs	r3, #1
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    d37e:	4629      	mov	r1, r5
    d380:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
    d382:	f88d 3010 	strb.w	r3, [sp, #16]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    d386:	f01b ff94 	bl	292b2 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
    d38a:	b190      	cbz	r0, d3b2 <bt_gatt_connected+0x42>
		if (conn->id) {
    d38c:	7a22      	ldrb	r2, [r4, #8]
    d38e:	b1ca      	cbz	r2, d3c4 <bt_gatt_connected+0x54>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
    d390:	ac02      	add	r4, sp, #8
    d392:	2104      	movs	r1, #4
    d394:	4620      	mov	r0, r4
    d396:	f019 fd4f 	bl	26e38 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
    d39a:	9400      	str	r4, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
    d39c:	4a0a      	ldr	r2, [pc, #40]	; (d3c8 <bt_gatt_connected+0x58>)
    d39e:	2124      	movs	r1, #36	; 0x24
    d3a0:	a805      	add	r0, sp, #20
    d3a2:	462b      	mov	r3, r5
    d3a4:	f7fa fc9a 	bl	7cdc <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
    d3a8:	aa05      	add	r2, sp, #20
    d3aa:	4908      	ldr	r1, [pc, #32]	; (d3cc <bt_gatt_connected+0x5c>)
    d3ac:	4610      	mov	r0, r2
    d3ae:	f7f8 fc97 	bl	5ce0 <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    d3b2:	ab03      	add	r3, sp, #12
    d3b4:	4a06      	ldr	r2, [pc, #24]	; (d3d0 <bt_gatt_connected+0x60>)
    d3b6:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d3ba:	2001      	movs	r0, #1
    d3bc:	f01c fecc 	bl	2a158 <bt_gatt_foreach_attr>
}
    d3c0:	b00f      	add	sp, #60	; 0x3c
    d3c2:	bd30      	pop	{r4, r5, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
    d3c4:	9200      	str	r2, [sp, #0]
    d3c6:	e7e9      	b.n	d39c <bt_gatt_connected+0x2c>
    d3c8:	00031692 	.word	0x00031692
    d3cc:	0000cef1 	.word	0x0000cef1
    d3d0:	0000d28d 	.word	0x0000d28d

0000d3d4 <db_hash_read>:
{
    d3d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d3d8:	4607      	mov	r7, r0
	err = k_delayed_work_cancel(&db_hash_work);
    d3da:	480c      	ldr	r0, [pc, #48]	; (d40c <db_hash_read+0x38>)
{
    d3dc:	f8bd 6018 	ldrh.w	r6, [sp, #24]
    d3e0:	4614      	mov	r4, r2
    d3e2:	461d      	mov	r5, r3
	err = k_delayed_work_cancel(&db_hash_work);
    d3e4:	f016 fd48 	bl	23e78 <k_delayed_work_cancel>
	if (!err) {
    d3e8:	b910      	cbnz	r0, d3f0 <db_hash_read+0x1c>
		db_hash_gen(true);
    d3ea:	2001      	movs	r0, #1
    d3ec:	f7ff fc1e 	bl	cc2c <db_hash_gen>
	bt_gatt_change_aware(conn, true);
    d3f0:	2101      	movs	r1, #1
    d3f2:	4638      	mov	r0, r7
    d3f4:	f01c fee3 	bl	2a1be <bt_gatt_change_aware>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash,
    d3f8:	2310      	movs	r3, #16
    d3fa:	9306      	str	r3, [sp, #24]
    d3fc:	4632      	mov	r2, r6
    d3fe:	4629      	mov	r1, r5
    d400:	4620      	mov	r0, r4
    d402:	4b03      	ldr	r3, [pc, #12]	; (d410 <db_hash_read+0x3c>)
}
    d404:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash,
    d408:	f01c bd55 	b.w	29eb6 <bt_gatt_attr_read.constprop.24>
    d40c:	20001ae0 	.word	0x20001ae0
    d410:	2000481f 	.word	0x2000481f

0000d414 <bt_gatt_store_ccc>:
{
    d414:	b570      	push	{r4, r5, r6, lr}
    d416:	b0c0      	sub	sp, #256	; 0x100
	save.count = 0;
    d418:	2300      	movs	r3, #0
{
    d41a:	4604      	mov	r4, r0
    d41c:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
    d41e:	910d      	str	r1, [sp, #52]	; 0x34
	save.addr_with_id.id = id;
    d420:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
	save.count = 0;
    d424:	933f      	str	r3, [sp, #252]	; 0xfc
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
    d426:	4a15      	ldr	r2, [pc, #84]	; (d47c <bt_gatt_store_ccc+0x68>)
    d428:	ab0d      	add	r3, sp, #52	; 0x34
    d42a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d42e:	2001      	movs	r0, #1
    d430:	f01c fe92 	bl	2a158 <bt_gatt_foreach_attr>
	if (id) {
    d434:	b1ec      	cbz	r4, d472 <bt_gatt_store_ccc+0x5e>
		u8_to_dec(id_str, sizeof(id_str), id);
    d436:	ae03      	add	r6, sp, #12
    d438:	4622      	mov	r2, r4
    d43a:	2104      	movs	r1, #4
    d43c:	4630      	mov	r0, r6
    d43e:	f019 fcfb 	bl	26e38 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
    d442:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
    d444:	4a0e      	ldr	r2, [pc, #56]	; (d480 <bt_gatt_store_ccc+0x6c>)
    d446:	462b      	mov	r3, r5
    d448:	2124      	movs	r1, #36	; 0x24
    d44a:	a804      	add	r0, sp, #16
    d44c:	f7fa fc46 	bl	7cdc <bt_settings_encode_key>
	if (save.count) {
    d450:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
    d452:	b182      	cbz	r2, d476 <bt_gatt_store_ccc+0x62>
		len = save.count * sizeof(*save.store);
    d454:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
    d456:	a90f      	add	r1, sp, #60	; 0x3c
	err = settings_save_one(key, str, len);
    d458:	a804      	add	r0, sp, #16
    d45a:	f7f8 fbe3 	bl	5c24 <settings_save_one>
	if (err) {
    d45e:	4604      	mov	r4, r0
    d460:	b120      	cbz	r0, d46c <bt_gatt_store_ccc+0x58>
		BT_ERR("Failed to store CCCs (err %d)", err);
    d462:	4602      	mov	r2, r0
    d464:	2145      	movs	r1, #69	; 0x45
    d466:	4807      	ldr	r0, [pc, #28]	; (d484 <bt_gatt_store_ccc+0x70>)
    d468:	f019 fd81 	bl	26f6e <printk>
}
    d46c:	4620      	mov	r0, r4
    d46e:	b040      	add	sp, #256	; 0x100
    d470:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
    d472:	9400      	str	r4, [sp, #0]
    d474:	e7e6      	b.n	d444 <bt_gatt_store_ccc+0x30>
		str = NULL;
    d476:	4611      	mov	r1, r2
    d478:	e7ee      	b.n	d458 <bt_gatt_store_ccc+0x44>
    d47a:	bf00      	nop
    d47c:	0000c045 	.word	0x0000c045
    d480:	00031692 	.word	0x00031692
    d484:	0003166c 	.word	0x0003166c

0000d488 <bt_gatt_service_unregister>:
{
    d488:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__ASSERT(svc, "invalid parameters\n");
    d48c:	4605      	mov	r5, r0
    d48e:	b950      	cbnz	r0, d4a6 <bt_gatt_service_unregister+0x1e>
    d490:	493f      	ldr	r1, [pc, #252]	; (d590 <bt_gatt_service_unregister+0x108>)
    d492:	4840      	ldr	r0, [pc, #256]	; (d594 <bt_gatt_service_unregister+0x10c>)
    d494:	f240 42d1 	movw	r2, #1233	; 0x4d1
    d498:	f019 fd69 	bl	26f6e <printk>
    d49c:	f240 41d1 	movw	r1, #1233	; 0x4d1
    d4a0:	483b      	ldr	r0, [pc, #236]	; (d590 <bt_gatt_service_unregister+0x108>)
    d4a2:	f019 ffdd 	bl	27460 <assert_post_action>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    d4a6:	4b3c      	ldr	r3, [pc, #240]	; (d598 <bt_gatt_service_unregister+0x110>)
    d4a8:	681a      	ldr	r2, [r3, #0]
	if (!sys_slist_find_and_remove(&db, &svc->node)) {
    d4aa:	f105 0008 	add.w	r0, r5, #8
    d4ae:	2100      	movs	r1, #0
    d4b0:	b922      	cbnz	r2, d4bc <bt_gatt_service_unregister+0x34>
		return -ENOENT;
    d4b2:	f06f 0001 	mvn.w	r0, #1
}
    d4b6:	b003      	add	sp, #12
    d4b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d4bc:	4290      	cmp	r0, r2
    d4be:	d12d      	bne.n	d51c <bt_gatt_service_unregister+0x94>
Z_GENLIST_REMOVE(slist, snode)
    d4c0:	68aa      	ldr	r2, [r5, #8]
    d4c2:	bb29      	cbnz	r1, d510 <bt_gatt_service_unregister+0x88>
    d4c4:	6859      	ldr	r1, [r3, #4]
	list->head = node;
    d4c6:	601a      	str	r2, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
    d4c8:	4288      	cmp	r0, r1
    d4ca:	d100      	bne.n	d4ce <bt_gatt_service_unregister+0x46>
	list->tail = node;
    d4cc:	605a      	str	r2, [r3, #4]
	parent->next = child;
    d4ce:	2600      	movs	r6, #0
		if (attr->write == bt_gatt_attr_write_ccc) {
    d4d0:	f8df 90cc 	ldr.w	r9, [pc, #204]	; d5a0 <bt_gatt_service_unregister+0x118>
    d4d4:	60ae      	str	r6, [r5, #8]
		struct bt_gatt_attr *attr = &svc->attrs[i];
    d4d6:	f04f 0814 	mov.w	r8, #20
	ccc->value = 0;
    d4da:	4637      	mov	r7, r6
	for (uint16_t i = 0; i < svc->attr_count; i++) {
    d4dc:	686a      	ldr	r2, [r5, #4]
    d4de:	b2b3      	uxth	r3, r6
    d4e0:	429a      	cmp	r2, r3
    d4e2:	d81e      	bhi.n	d522 <bt_gatt_service_unregister+0x9a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d4e4:	f3bf 8f5b 	dmb	ish
    d4e8:	4b2c      	ldr	r3, [pc, #176]	; (d59c <bt_gatt_service_unregister+0x114>)
    d4ea:	6818      	ldr	r0, [r3, #0]
    d4ec:	f3bf 8f5b 	dmb	ish
	if (!atomic_get(&init)) {
    d4f0:	2800      	cmp	r0, #0
    d4f2:	d0e0      	beq.n	d4b6 <bt_gatt_service_unregister+0x2e>
		    svc->attrs[svc->attr_count - 1].handle);
    d4f4:	e9d5 2300 	ldrd	r2, r3, [r5]
	sc_indicate(svc->attrs[0].handle,
    d4f8:	2114      	movs	r1, #20
    d4fa:	fb01 2303 	mla	r3, r1, r3, r2
    d4fe:	8a10      	ldrh	r0, [r2, #16]
    d500:	f833 1c04 	ldrh.w	r1, [r3, #-4]
    d504:	f7ff f942 	bl	c78c <sc_indicate>
	db_changed();
    d508:	f7ff f8e0 	bl	c6cc <db_changed>
	return 0;
    d50c:	2000      	movs	r0, #0
    d50e:	e7d2      	b.n	d4b6 <bt_gatt_service_unregister+0x2e>
    d510:	600a      	str	r2, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
    d512:	685a      	ldr	r2, [r3, #4]
    d514:	4290      	cmp	r0, r2
	list->tail = node;
    d516:	bf08      	it	eq
    d518:	6059      	streq	r1, [r3, #4]
    d51a:	e7d8      	b.n	d4ce <bt_gatt_service_unregister+0x46>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    d51c:	4611      	mov	r1, r2
    d51e:	6812      	ldr	r2, [r2, #0]
    d520:	e7c6      	b.n	d4b0 <bt_gatt_service_unregister+0x28>
		struct bt_gatt_attr *attr = &svc->attrs[i];
    d522:	682a      	ldr	r2, [r5, #0]
    d524:	fb08 2303 	mla	r3, r8, r3, r2
		if (attr->write == bt_gatt_attr_write_ccc) {
    d528:	689a      	ldr	r2, [r3, #8]
    d52a:	454a      	cmp	r2, r9
    d52c:	d001      	beq.n	d532 <bt_gatt_service_unregister+0xaa>
    d52e:	3601      	adds	r6, #1
    d530:	e7d4      	b.n	d4dc <bt_gatt_service_unregister+0x54>
			gatt_unregister_ccc(attr->user_data);
    d532:	68db      	ldr	r3, [r3, #12]
	ccc->value = 0;
    d534:	83df      	strh	r7, [r3, #30]
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    d536:	1c5c      	adds	r4, r3, #1
    d538:	f103 0a1f 	add.w	sl, r3, #31
    d53c:	2207      	movs	r2, #7
    d53e:	4669      	mov	r1, sp
    d540:	4620      	mov	r0, r4
		if (bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    d542:	9700      	str	r7, [sp, #0]
    d544:	f8cd 7003 	str.w	r7, [sp, #3]
    d548:	f020 f80e 	bl	2d568 <memcmp>
    d54c:	b1d8      	cbz	r0, d586 <bt_gatt_service_unregister+0xfe>
			conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    d54e:	4621      	mov	r1, r4
    d550:	f814 0c01 	ldrb.w	r0, [r4, #-1]
    d554:	f01b ffe3 	bl	2951e <bt_conn_lookup_addr_le>
			if (conn) {
    d558:	b958      	cbnz	r0, d572 <bt_gatt_service_unregister+0xea>
			    bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
    d55a:	4621      	mov	r1, r4
    d55c:	f814 0c01 	ldrb.w	r0, [r4, #-1]
    d560:	f01b fea7 	bl	292b2 <bt_addr_le_is_bonded>
			if (IS_ENABLED(CONFIG_BT_SETTINGS) && store &&
    d564:	b160      	cbz	r0, d580 <bt_gatt_service_unregister+0xf8>
				bt_gatt_store_ccc(cfg->id, &cfg->peer);
    d566:	4621      	mov	r1, r4
    d568:	f814 0c01 	ldrb.w	r0, [r4, #-1]
    d56c:	f7ff ff52 	bl	d414 <bt_gatt_store_ccc>
    d570:	e006      	b.n	d580 <bt_gatt_service_unregister+0xf8>
				if (conn->state == BT_CONN_CONNECTED) {
    d572:	f890 b00a 	ldrb.w	fp, [r0, #10]
				bt_conn_unref(conn);
    d576:	f7fc ffe7 	bl	a548 <bt_conn_unref>
			if (IS_ENABLED(CONFIG_BT_SETTINGS) && store &&
    d57a:	f1bb 0f07 	cmp.w	fp, #7
    d57e:	d1ec      	bne.n	d55a <bt_gatt_service_unregister+0xd2>
			clear_ccc_cfg(cfg);
    d580:	1e60      	subs	r0, r4, #1
    d582:	f01c fc85 	bl	29e90 <clear_ccc_cfg>
    d586:	340a      	adds	r4, #10
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    d588:	45a2      	cmp	sl, r4
    d58a:	d1d7      	bne.n	d53c <bt_gatt_service_unregister+0xb4>
    d58c:	e7cf      	b.n	d52e <bt_gatt_service_unregister+0xa6>
    d58e:	bf00      	nop
    d590:	00031616 	.word	0x00031616
    d594:	0002fa94 	.word	0x0002fa94
    d598:	20002c6c 	.word	0x20002c6c
    d59c:	20002c74 	.word	0x20002c74
    d5a0:	0000c61d 	.word	0x0000c61d

0000d5a4 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
    d5a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    d5a6:	4604      	mov	r4, r0
    d5a8:	b08d      	sub	sp, #52	; 0x34
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    d5aa:	4603      	mov	r3, r0
    d5ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d5b0:	2001      	movs	r0, #1
    d5b2:	4a34      	ldr	r2, [pc, #208]	; (d684 <bt_gatt_disconnected+0xe0>)
		k_delayed_work_cancel(&gatt_ccc_store.work);
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    d5b4:	f104 0588 	add.w	r5, r4, #136	; 0x88
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    d5b8:	f01c fdce 	bl	2a158 <bt_gatt_foreach_attr>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    d5bc:	4629      	mov	r1, r5
    d5be:	7a20      	ldrb	r0, [r4, #8]
    d5c0:	f01b fe77 	bl	292b2 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    d5c4:	b378      	cbz	r0, d626 <bt_gatt_disconnected+0x82>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
    d5c6:	4629      	mov	r1, r5
    d5c8:	7a20      	ldrb	r0, [r4, #8]
    d5ca:	f7ff ff23 	bl	d414 <bt_gatt_store_ccc>
	cfg = find_cf_cfg(conn);
    d5ce:	4620      	mov	r0, r4
    d5d0:	f7fe ff26 	bl	c420 <find_cf_cfg>
	if (!cfg) {
    d5d4:	4606      	mov	r6, r0
    d5d6:	2800      	cmp	r0, #0
    d5d8:	d044      	beq.n	d664 <bt_gatt_disconnected+0xc0>
		if (conn->id) {
    d5da:	7a22      	ldrb	r2, [r4, #8]
		str = (char *)cfg->data;
    d5dc:	3608      	adds	r6, #8
		if (conn->id) {
    d5de:	2a00      	cmp	r2, #0
    d5e0:	d042      	beq.n	d668 <bt_gatt_disconnected+0xc4>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
    d5e2:	af02      	add	r7, sp, #8
    d5e4:	2104      	movs	r1, #4
    d5e6:	4638      	mov	r0, r7
    d5e8:	f019 fc26 	bl	26e38 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
    d5ec:	9700      	str	r7, [sp, #0]
    d5ee:	462b      	mov	r3, r5
    d5f0:	4a25      	ldr	r2, [pc, #148]	; (d688 <bt_gatt_disconnected+0xe4>)
    d5f2:	2124      	movs	r1, #36	; 0x24
    d5f4:	a803      	add	r0, sp, #12
    d5f6:	f7fa fb71 	bl	7cdc <bt_settings_encode_key>
	if (!cfg || !conn->id) {
    d5fa:	7a23      	ldrb	r3, [r4, #8]
    d5fc:	2701      	movs	r7, #1
    d5fe:	b93b      	cbnz	r3, d610 <bt_gatt_disconnected+0x6c>
		bt_settings_encode_key(key, sizeof(key), "cf",
    d600:	2300      	movs	r3, #0
    d602:	9300      	str	r3, [sp, #0]
    d604:	4a20      	ldr	r2, [pc, #128]	; (d688 <bt_gatt_disconnected+0xe4>)
    d606:	462b      	mov	r3, r5
    d608:	2124      	movs	r1, #36	; 0x24
    d60a:	a803      	add	r0, sp, #12
    d60c:	f7fa fb66 	bl	7cdc <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
    d610:	463a      	mov	r2, r7
    d612:	4631      	mov	r1, r6
    d614:	a803      	add	r0, sp, #12
    d616:	f7f8 fb05 	bl	5c24 <settings_save_one>
	if (err) {
    d61a:	4602      	mov	r2, r0
    d61c:	b118      	cbz	r0, d626 <bt_gatt_disconnected+0x82>
		BT_ERR("Failed to store Client Features (err %d)", err);
    d61e:	2145      	movs	r1, #69	; 0x45
    d620:	481a      	ldr	r0, [pc, #104]	; (d68c <bt_gatt_disconnected+0xe8>)
    d622:	f019 fca4 	bl	26f6e <printk>
		bt_gatt_store_cf(conn);
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    d626:	4629      	mov	r1, r5
    d628:	7a20      	ldrb	r0, [r4, #8]
    d62a:	f01b fe42 	bl	292b2 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
    d62e:	b150      	cbz	r0, d646 <bt_gatt_disconnected+0xa2>
		struct addr_with_id addr_with_id = {
    d630:	7a23      	ldrb	r3, [r4, #8]
    d632:	f88d 3010 	strb.w	r3, [sp, #16]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
    d636:	4a16      	ldr	r2, [pc, #88]	; (d690 <bt_gatt_disconnected+0xec>)
		struct addr_with_id addr_with_id = {
    d638:	9503      	str	r5, [sp, #12]
		bt_gatt_foreach_attr(0x0001, 0xffff,
    d63a:	ab03      	add	r3, sp, #12
    d63c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d640:	2001      	movs	r0, #1
    d642:	f01c fd89 	bl	2a158 <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
    d646:	4620      	mov	r0, r4
    d648:	f7fe feea 	bl	c420 <find_cf_cfg>
	if (!cfg) {
    d64c:	4606      	mov	r6, r0
    d64e:	b138      	cbz	r0, d660 <bt_gatt_disconnected+0xbc>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    d650:	4629      	mov	r1, r5
    d652:	7a20      	ldrb	r0, [r4, #8]
    d654:	f01b fe2d 	bl	292b2 <bt_addr_le_is_bonded>
    d658:	b940      	cbnz	r0, d66c <bt_gatt_disconnected+0xc8>
		clear_cf_cfg(cfg);
    d65a:	4630      	mov	r0, r6
    d65c:	f01c fc7d 	bl	29f5a <clear_cf_cfg>
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
    d660:	b00d      	add	sp, #52	; 0x34
    d662:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = 0;
    d664:	4607      	mov	r7, r0
    d666:	e7cb      	b.n	d600 <bt_gatt_disconnected+0x5c>
		if (conn->id) {
    d668:	2701      	movs	r7, #1
    d66a:	e7c9      	b.n	d600 <bt_gatt_disconnected+0x5c>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    d66c:	4629      	mov	r1, r5
    d66e:	1c70      	adds	r0, r6, #1
    d670:	f01c fc07 	bl	29e82 <bt_addr_le_copy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    d674:	f06f 0102 	mvn.w	r1, #2
    d678:	f106 000c 	add.w	r0, r6, #12
    d67c:	f01c fbf2 	bl	29e64 <atomic_and>
}
    d680:	e7ee      	b.n	d660 <bt_gatt_disconnected+0xbc>
    d682:	bf00      	nop
    d684:	0000c2c1 	.word	0x0000c2c1
    d688:	000318b8 	.word	0x000318b8
    d68c:	000315e8 	.word	0x000315e8
    d690:	0000c105 	.word	0x0000c105

0000d694 <bt_smp_accept>:

	return 0;
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    d694:	b538      	push	{r3, r4, r5, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
    d696:	4c0e      	ldr	r4, [pc, #56]	; (d6d0 <bt_smp_accept+0x3c>)
    d698:	6823      	ldr	r3, [r4, #0]
{
    d69a:	4602      	mov	r2, r0
		if (smp->chan.conn) {
    d69c:	4625      	mov	r5, r4
    d69e:	b16b      	cbz	r3, d6bc <bt_smp_accept+0x28>
    d6a0:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
    d6a4:	b14b      	cbz	r3, d6ba <bt_smp_accept+0x26>
    d6a6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    d6aa:	b17b      	cbz	r3, d6cc <bt_smp_accept+0x38>
		*chan = &smp->chan;

		return 0;
	}

	BT_ERR("No available SMP context for conn %p", conn);
    d6ac:	4809      	ldr	r0, [pc, #36]	; (d6d4 <bt_smp_accept+0x40>)
    d6ae:	2145      	movs	r1, #69	; 0x45
    d6b0:	f019 fc5d 	bl	26f6e <printk>
    d6b4:	f06f 000b 	mvn.w	r0, #11

	return -ENOMEM;
}
    d6b8:	bd38      	pop	{r3, r4, r5, pc}
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    d6ba:	2301      	movs	r3, #1
		smp->chan.ops = &ops;
    d6bc:	22c0      	movs	r2, #192	; 0xc0
    d6be:	fb02 5303 	mla	r3, r2, r3, r5
    d6c2:	4a05      	ldr	r2, [pc, #20]	; (d6d8 <bt_smp_accept+0x44>)
    d6c4:	605a      	str	r2, [r3, #4]
		return 0;
    d6c6:	2000      	movs	r0, #0
		*chan = &smp->chan;
    d6c8:	600b      	str	r3, [r1, #0]
		return 0;
    d6ca:	e7f5      	b.n	d6b8 <bt_smp_accept+0x24>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    d6cc:	2302      	movs	r3, #2
    d6ce:	e7f5      	b.n	d6bc <bt_smp_accept+0x28>
    d6d0:	20001b68 	.word	0x20001b68
    d6d4:	00031904 	.word	0x00031904
    d6d8:	0002eea0 	.word	0x0002eea0

0000d6dc <atomic_test_bit.constprop.4>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d6dc:	4b04      	ldr	r3, [pc, #16]	; (d6f0 <atomic_test_bit.constprop.4+0x14>)
    d6de:	f3bf 8f5b 	dmb	ish
    d6e2:	6818      	ldr	r0, [r3, #0]
    d6e4:	f3bf 8f5b 	dmb	ish
}
    d6e8:	f000 0001 	and.w	r0, r0, #1
    d6ec:	4770      	bx	lr
    d6ee:	bf00      	nop
    d6f0:	20001de0 	.word	0x20001de0

0000d6f4 <bt_mesh_reset>:

	return -ENOTSUP;
}

void bt_mesh_reset(void)
{
    d6f4:	b538      	push	{r3, r4, r5, lr}
	if (!atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
    d6f6:	f7ff fff1 	bl	d6dc <atomic_test_bit.constprop.4>
    d6fa:	b350      	cbz	r0, d752 <bt_mesh_reset+0x5e>
		return;
	}

	bt_mesh.iv_index = 0U;
    d6fc:	4c15      	ldr	r4, [pc, #84]	; (d754 <bt_mesh_reset+0x60>)
    d6fe:	2500      	movs	r5, #0
	bt_mesh.seq = 0U;

	memset(bt_mesh.flags, 0, sizeof(bt_mesh.flags));

	k_delayed_work_cancel(&bt_mesh.ivu_timer);
    d700:	f504 70fc 	add.w	r0, r4, #504	; 0x1f8
	bt_mesh.seq = 0U;
    d704:	e9c4 5500 	strd	r5, r5, [r4]
	memset(bt_mesh.flags, 0, sizeof(bt_mesh.flags));
    d708:	60a5      	str	r5, [r4, #8]
	k_delayed_work_cancel(&bt_mesh.ivu_timer);
    d70a:	f016 fbb5 	bl	23e78 <k_delayed_work_cancel>

	bt_mesh_cfg_reset();
    d70e:	f006 fc25 	bl	13f5c <bt_mesh_cfg_reset>
	bt_mesh_trans_reset();
    d712:	f002 ff03 	bl	1051c <bt_mesh_trans_reset>
	bt_mesh_app_keys_reset();
    d716:	f002 f9d7 	bl	fac8 <bt_mesh_app_keys_reset>
	bt_mesh_net_keys_reset();
    d71a:	f001 fe65 	bl	f3e8 <bt_mesh_net_keys_reset>

	bt_mesh_net_loopback_clear(BT_MESH_KEY_ANY);
    d71e:	f64f 70ff 	movw	r0, #65535	; 0xffff
    d722:	f001 f969 	bl	e9f8 <bt_mesh_net_loopback_clear>

		bt_mesh_lpn_disable(true);
	}

	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND)) {
		bt_mesh_friends_clear();
    d726:	f007 fc73 	bl	15010 <bt_mesh_friends_clear>
	}

	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY)) {
		bt_mesh_proxy_gatt_disable();
    d72a:	f00a f9f5 	bl	17b18 <bt_mesh_proxy_gatt_disable>
	}

	if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		bt_mesh_net_clear();
    d72e:	f01c fe70 	bl	2a412 <bt_mesh_net_clear>
	}

	(void)memset(bt_mesh.dev_key, 0, sizeof(bt_mesh.dev_key));
    d732:	4629      	mov	r1, r5
    d734:	2210      	movs	r2, #16
    d736:	f504 700a 	add.w	r0, r4, #552	; 0x228
    d73a:	f01f ff5e 	bl	2d5fa <memset>

	bt_mesh_scan_disable();
    d73e:	f000 fab9 	bl	dcb4 <bt_mesh_scan_disable>
	bt_mesh_beacon_disable();
    d742:	f000 fd65 	bl	e210 <bt_mesh_beacon_disable>

	bt_mesh_comp_unprovision();
    d746:	f004 fc35 	bl	11fb4 <bt_mesh_comp_unprovision>

	if (IS_ENABLED(CONFIG_BT_MESH_PROV)) {
		bt_mesh_prov_reset();
	}
}
    d74a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_mesh_prov_reset();
    d74e:	f008 bb71 	b.w	15e34 <bt_mesh_prov_reset>
}
    d752:	bd38      	pop	{r3, r4, r5, pc}
    d754:	20001dd8 	.word	0x20001dd8

0000d758 <bt_mesh_start>:
		mod->cb->start(mod);
	}
}

int bt_mesh_start(void)
{
    d758:	b538      	push	{r3, r4, r5, lr}
	int err;

	err = bt_mesh_adv_enable();
    d75a:	f006 ff1b 	bl	14594 <bt_mesh_adv_enable>
	if (err) {
    d75e:	4604      	mov	r4, r0
    d760:	b128      	cbz	r0, d76e <bt_mesh_start+0x16>
		BT_ERR("Failed enabling advertiser");
    d762:	2145      	movs	r1, #69	; 0x45
    d764:	4814      	ldr	r0, [pc, #80]	; (d7b8 <bt_mesh_start+0x60>)
    d766:	f019 fc02 	bl	26f6e <printk>
	bt_mesh_hb_start();

	bt_mesh_model_foreach(model_start, NULL);

	return 0;
}
    d76a:	4620      	mov	r0, r4
    d76c:	bd38      	pop	{r3, r4, r5, pc}
	if (bt_mesh_beacon_enabled()) {
    d76e:	f01c fdab 	bl	2a2c8 <bt_mesh_beacon_enabled>
    d772:	b1f0      	cbz	r0, d7b2 <bt_mesh_start+0x5a>
		bt_mesh_beacon_enable();
    d774:	f000 fd3c 	bl	e1f0 <bt_mesh_beacon_enable>
	    bt_mesh_gatt_proxy_get() != BT_MESH_GATT_PROXY_NOT_SUPPORTED) {
    d778:	f01c fdbc 	bl	2a2f4 <bt_mesh_gatt_proxy_get>
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    d77c:	2802      	cmp	r0, #2
    d77e:	d003      	beq.n	d788 <bt_mesh_start+0x30>
		bt_mesh_proxy_gatt_enable();
    d780:	f00a f98a 	bl	17a98 <bt_mesh_proxy_gatt_enable>
		bt_mesh_adv_update();
    d784:	f006 fed8 	bl	14538 <bt_mesh_adv_update>
		bt_mesh_scan_enable();
    d788:	f000 fa72 	bl	dc70 <bt_mesh_scan_enable>
		bt_mesh_friend_init();
    d78c:	f007 ffb0 	bl	156f0 <bt_mesh_friend_init>
		struct bt_mesh_subnet *sub = bt_mesh_subnet_next(NULL);
    d790:	2000      	movs	r0, #0
    d792:	f001 fe11 	bl	f3b8 <bt_mesh_subnet_next>
    d796:	4605      	mov	r5, r0
		uint16_t addr = bt_mesh_primary_addr();
    d798:	f004 fc12 	bl	11fc0 <bt_mesh_primary_addr>
		bt_mesh_prov_complete(sub->net_idx, addr);
    d79c:	4601      	mov	r1, r0
    d79e:	8ba8      	ldrh	r0, [r5, #28]
    d7a0:	f008 fb40 	bl	15e24 <bt_mesh_prov_complete>
	bt_mesh_hb_start();
    d7a4:	f003 ff40 	bl	11628 <bt_mesh_hb_start>
	bt_mesh_model_foreach(model_start, NULL);
    d7a8:	2100      	movs	r1, #0
    d7aa:	4804      	ldr	r0, [pc, #16]	; (d7bc <bt_mesh_start+0x64>)
    d7ac:	f004 fa04 	bl	11bb8 <bt_mesh_model_foreach>
	return 0;
    d7b0:	e7db      	b.n	d76a <bt_mesh_start+0x12>
		bt_mesh_beacon_disable();
    d7b2:	f000 fd2d 	bl	e210 <bt_mesh_beacon_disable>
    d7b6:	e7df      	b.n	d778 <bt_mesh_start+0x20>
    d7b8:	00031952 	.word	0x00031952
    d7bc:	0002a25f 	.word	0x0002a25f

0000d7c0 <bt_mesh_provision>:
{
    d7c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d7c4:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d7c8:	4c28      	ldr	r4, [pc, #160]	; (d86c <bt_mesh_provision+0xac>)
    d7ca:	4680      	mov	r8, r0
    d7cc:	460d      	mov	r5, r1
    d7ce:	4617      	mov	r7, r2
	BT_INFO("Primary Element: 0x%04x", addr);
    d7d0:	2149      	movs	r1, #73	; 0x49
    d7d2:	4632      	mov	r2, r6
    d7d4:	4826      	ldr	r0, [pc, #152]	; (d870 <bt_mesh_provision+0xb0>)
{
    d7d6:	4699      	mov	r9, r3
	BT_INFO("Primary Element: 0x%04x", addr);
    d7d8:	f019 fbc9 	bl	26f6e <printk>
    d7dc:	f3bf 8f5b 	dmb	ish
    d7e0:	e854 0f00 	ldrex	r0, [r4]
    d7e4:	f040 0301 	orr.w	r3, r0, #1
    d7e8:	e844 3200 	strex	r2, r3, [r4]
    d7ec:	2a00      	cmp	r2, #0
    d7ee:	d1f7      	bne.n	d7e0 <bt_mesh_provision+0x20>
    d7f0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_mesh.flags, BT_MESH_VALID)) {
    d7f4:	f010 0001 	ands.w	r0, r0, #1
    d7f8:	d135      	bne.n	d866 <bt_mesh_provision+0xa6>
		if (bt_mesh_proxy_prov_disable(false) == 0) {
    d7fa:	f00a f91d 	bl	17a38 <bt_mesh_proxy_prov_disable>
	err = bt_mesh_net_create(net_idx, flags, net_key, iv_index);
    d7fe:	464b      	mov	r3, r9
		if (bt_mesh_proxy_prov_disable(false) == 0) {
    d800:	4682      	mov	sl, r0
	err = bt_mesh_net_create(net_idx, flags, net_key, iv_index);
    d802:	4642      	mov	r2, r8
    d804:	4628      	mov	r0, r5
    d806:	4639      	mov	r1, r7
    d808:	f000 feaa 	bl	e560 <bt_mesh_net_create>
	if (err) {
    d80c:	4605      	mov	r5, r0
    d80e:	b198      	cbz	r0, d838 <bt_mesh_provision+0x78>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    d810:	f3bf 8f5b 	dmb	ish
    d814:	e854 3f00 	ldrex	r3, [r4]
    d818:	f023 0301 	bic.w	r3, r3, #1
    d81c:	e844 3200 	strex	r2, r3, [r4]
    d820:	2a00      	cmp	r2, #0
    d822:	d1f7      	bne.n	d814 <bt_mesh_provision+0x54>
    d824:	f3bf 8f5b 	dmb	ish
		if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT) && pb_gatt_enabled) {
    d828:	f1ba 0f00 	cmp.w	sl, #0
    d82c:	d101      	bne.n	d832 <bt_mesh_provision+0x72>
			bt_mesh_proxy_prov_enable();
    d82e:	f00a f8d5 	bl	179dc <bt_mesh_proxy_prov_enable>
}
    d832:	4628      	mov	r0, r5
    d834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	bt_mesh.seq = 0U;
    d838:	f844 0c04 	str.w	r0, [r4, #-4]
	bt_mesh_comp_provision(addr);
    d83c:	4630      	mov	r0, r6
    d83e:	f004 fba3 	bl	11f88 <bt_mesh_comp_provision>
	memcpy(bt_mesh.dev_key, dev_key, 16);
    d842:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d844:	f504 7408 	add.w	r4, r4, #544	; 0x220
    d848:	f103 0610 	add.w	r6, r3, #16
    d84c:	6818      	ldr	r0, [r3, #0]
    d84e:	6859      	ldr	r1, [r3, #4]
    d850:	4622      	mov	r2, r4
    d852:	c203      	stmia	r2!, {r0, r1}
    d854:	3308      	adds	r3, #8
    d856:	42b3      	cmp	r3, r6
    d858:	4614      	mov	r4, r2
    d85a:	d1f7      	bne.n	d84c <bt_mesh_provision+0x8c>
		bt_mesh_net_pending_net_store();
    d85c:	f001 fb2a 	bl	eeb4 <bt_mesh_net_pending_net_store>
	bt_mesh_start();
    d860:	f7ff ff7a 	bl	d758 <bt_mesh_start>
	return 0;
    d864:	e7e5      	b.n	d832 <bt_mesh_provision+0x72>
		return -EALREADY;
    d866:	f06f 0577 	mvn.w	r5, #119	; 0x77
    d86a:	e7e2      	b.n	d832 <bt_mesh_provision+0x72>
    d86c:	20001de0 	.word	0x20001de0
    d870:	00031935 	.word	0x00031935

0000d874 <atomic_test_bit.constprop.7>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d874:	4b05      	ldr	r3, [pc, #20]	; (d88c <atomic_test_bit.constprop.7+0x18>)
    d876:	f3bf 8f5b 	dmb	ish
    d87a:	681b      	ldr	r3, [r3, #0]
    d87c:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    d880:	fa43 f000 	asr.w	r0, r3, r0
}
    d884:	f000 0001 	and.w	r0, r0, #1
    d888:	4770      	bx	lr
    d88a:	bf00      	nop
    d88c:	20001de0 	.word	0x20001de0

0000d890 <feature_set>:
	return atomic_test_bit(bt_mesh.flags, BT_MESH_BEACON);
}

static int feature_set(int feature_flag, enum bt_mesh_feat_state state)
{
	if (state != BT_MESH_FEATURE_DISABLED &&
    d890:	2901      	cmp	r1, #1
{
    d892:	b508      	push	{r3, lr}
    d894:	4602      	mov	r2, r0
	if (state != BT_MESH_FEATURE_DISABLED &&
    d896:	d81e      	bhi.n	d8d6 <feature_set+0x46>
	    state != BT_MESH_FEATURE_ENABLED) {
		return -EINVAL;
	}

	if (atomic_test_bit(bt_mesh.flags, feature_flag) ==
    d898:	f7ff ffec 	bl	d874 <atomic_test_bit.constprop.7>
    d89c:	f001 0301 	and.w	r3, r1, #1
    d8a0:	4298      	cmp	r0, r3
    d8a2:	d01b      	beq.n	d8dc <feature_set+0x4c>
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    d8a4:	2001      	movs	r0, #1

	if (val) {
    d8a6:	2901      	cmp	r1, #1
	atomic_val_t mask = ATOMIC_MASK(bit);
    d8a8:	fa00 f002 	lsl.w	r0, r0, r2
	if (val) {
    d8ac:	d105      	bne.n	d8ba <feature_set+0x2a>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    d8ae:	4601      	mov	r1, r0
    d8b0:	480c      	ldr	r0, [pc, #48]	; (d8e4 <feature_set+0x54>)
    d8b2:	f01c fcfa 	bl	2a2aa <atomic_or>
	}

	atomic_set_bit_to(bt_mesh.flags, feature_flag,
			  (state == BT_MESH_FEATURE_ENABLED));

	return 0;
    d8b6:	2000      	movs	r0, #0
}
    d8b8:	bd08      	pop	{r3, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    d8ba:	4b0a      	ldr	r3, [pc, #40]	; (d8e4 <feature_set+0x54>)
    d8bc:	f3bf 8f5b 	dmb	ish
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    d8c0:	43c0      	mvns	r0, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    d8c2:	e853 2f00 	ldrex	r2, [r3]
    d8c6:	4002      	ands	r2, r0
    d8c8:	e843 2100 	strex	r1, r2, [r3]
    d8cc:	2900      	cmp	r1, #0
    d8ce:	d1f8      	bne.n	d8c2 <feature_set+0x32>
    d8d0:	f3bf 8f5b 	dmb	ish
    d8d4:	e7ef      	b.n	d8b6 <feature_set+0x26>
		return -EINVAL;
    d8d6:	f06f 0015 	mvn.w	r0, #21
    d8da:	e7ed      	b.n	d8b8 <feature_set+0x28>
		return -EALREADY;
    d8dc:	f06f 0077 	mvn.w	r0, #119	; 0x77
    d8e0:	e7ea      	b.n	d8b8 <feature_set+0x28>
    d8e2:	bf00      	nop
    d8e4:	20001de0 	.word	0x20001de0

0000d8e8 <bt_mesh_beacon_set>:
{
    d8e8:	4602      	mov	r2, r0
    d8ea:	b508      	push	{r3, lr}
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_BEACON) == beacon) {
    d8ec:	2007      	movs	r0, #7
    d8ee:	f7ff ffc1 	bl	d874 <atomic_test_bit.constprop.7>
    d8f2:	4290      	cmp	r0, r2
    d8f4:	d01f      	beq.n	d936 <bt_mesh_beacon_set+0x4e>
	if (val) {
    d8f6:	b172      	cbz	r2, d916 <bt_mesh_beacon_set+0x2e>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    d8f8:	2180      	movs	r1, #128	; 0x80
    d8fa:	480f      	ldr	r0, [pc, #60]	; (d938 <bt_mesh_beacon_set+0x50>)
    d8fc:	f01c fcd5 	bl	2a2aa <atomic_or>
		bt_mesh_beacon_enable();
    d900:	f000 fc76 	bl	e1f0 <bt_mesh_beacon_enable>
	    atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
    d904:	2000      	movs	r0, #0
    d906:	f7ff ffb5 	bl	d874 <atomic_test_bit.constprop.7>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    d90a:	b1a0      	cbz	r0, d936 <bt_mesh_beacon_set+0x4e>
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
    d90c:	2007      	movs	r0, #7
}
    d90e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
    d912:	f006 beb3 	b.w	1467c <bt_mesh_settings_store_schedule>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    d916:	4b08      	ldr	r3, [pc, #32]	; (d938 <bt_mesh_beacon_set+0x50>)
    d918:	f3bf 8f5b 	dmb	ish
    d91c:	e853 2f00 	ldrex	r2, [r3]
    d920:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    d924:	e843 2100 	strex	r1, r2, [r3]
    d928:	2900      	cmp	r1, #0
    d92a:	d1f7      	bne.n	d91c <bt_mesh_beacon_set+0x34>
    d92c:	f3bf 8f5b 	dmb	ish
		bt_mesh_beacon_disable();
    d930:	f000 fc6e 	bl	e210 <bt_mesh_beacon_disable>
    d934:	e7e6      	b.n	d904 <bt_mesh_beacon_set+0x1c>
}
    d936:	bd08      	pop	{r3, pc}
    d938:	20001de0 	.word	0x20001de0

0000d93c <bt_mesh_default_ttl_set>:
	return feature_get(BT_MESH_GATT_PROXY);
}

int bt_mesh_default_ttl_set(uint8_t default_ttl)
{
	if (default_ttl == 1 || default_ttl > BT_MESH_TTL_MAX) {
    d93c:	2801      	cmp	r0, #1
{
    d93e:	b508      	push	{r3, lr}
	if (default_ttl == 1 || default_ttl > BT_MESH_TTL_MAX) {
    d940:	d013      	beq.n	d96a <bt_mesh_default_ttl_set+0x2e>
    d942:	0603      	lsls	r3, r0, #24
    d944:	d411      	bmi.n	d96a <bt_mesh_default_ttl_set+0x2e>
		return -EINVAL;
	}

	if (default_ttl == bt_mesh.default_ttl) {
    d946:	4b0a      	ldr	r3, [pc, #40]	; (d970 <bt_mesh_default_ttl_set+0x34>)
    d948:	f893 21f3 	ldrb.w	r2, [r3, #499]	; 0x1f3
    d94c:	4282      	cmp	r2, r0
    d94e:	d101      	bne.n	d954 <bt_mesh_default_ttl_set+0x18>

	bt_mesh.default_ttl = default_ttl;

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
    d950:	2000      	movs	r0, #0
	}

	return 0;
}
    d952:	bd08      	pop	{r3, pc}
	bt_mesh.default_ttl = default_ttl;
    d954:	f883 01f3 	strb.w	r0, [r3, #499]	; 0x1f3
	    atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
    d958:	2000      	movs	r0, #0
    d95a:	f7ff ff8b 	bl	d874 <atomic_test_bit.constprop.7>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    d95e:	2800      	cmp	r0, #0
    d960:	d0f6      	beq.n	d950 <bt_mesh_default_ttl_set+0x14>
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
    d962:	2007      	movs	r0, #7
    d964:	f006 fe8a 	bl	1467c <bt_mesh_settings_store_schedule>
    d968:	e7f2      	b.n	d950 <bt_mesh_default_ttl_set+0x14>
		return -EINVAL;
    d96a:	f06f 0015 	mvn.w	r0, #21
    d96e:	e7f0      	b.n	d952 <bt_mesh_default_ttl_set+0x16>
    d970:	20001dd8 	.word	0x20001dd8

0000d974 <bt_mesh_default_ttl_get>:

uint8_t bt_mesh_default_ttl_get(void)
{
	return bt_mesh.default_ttl;
}
    d974:	4b01      	ldr	r3, [pc, #4]	; (d97c <bt_mesh_default_ttl_get+0x8>)
    d976:	f893 01f3 	ldrb.w	r0, [r3, #499]	; 0x1f3
    d97a:	4770      	bx	lr
    d97c:	20001dd8 	.word	0x20001dd8

0000d980 <bt_mesh_net_transmit_set>:

	return feature_get(BT_MESH_FRIEND);
}

void bt_mesh_net_transmit_set(uint8_t xmit)
{
    d980:	b508      	push	{r3, lr}
	if (bt_mesh.net_xmit == xmit) {
    d982:	4b08      	ldr	r3, [pc, #32]	; (d9a4 <bt_mesh_net_transmit_set+0x24>)
    d984:	f893 21f1 	ldrb.w	r2, [r3, #497]	; 0x1f1
    d988:	4282      	cmp	r2, r0
    d98a:	d00a      	beq.n	d9a2 <bt_mesh_net_transmit_set+0x22>
		return;
	}

	bt_mesh.net_xmit = xmit;
    d98c:	f883 01f1 	strb.w	r0, [r3, #497]	; 0x1f1

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
    d990:	2000      	movs	r0, #0
    d992:	f7ff ff6f 	bl	d874 <atomic_test_bit.constprop.7>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    d996:	b120      	cbz	r0, d9a2 <bt_mesh_net_transmit_set+0x22>
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
    d998:	2007      	movs	r0, #7
	}
}
    d99a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
    d99e:	f006 be6d 	b.w	1467c <bt_mesh_settings_store_schedule>
}
    d9a2:	bd08      	pop	{r3, pc}
    d9a4:	20001dd8 	.word	0x20001dd8

0000d9a8 <bt_mesh_net_transmit_get>:

uint8_t bt_mesh_net_transmit_get(void)
{
	return bt_mesh.net_xmit;
}
    d9a8:	4b01      	ldr	r3, [pc, #4]	; (d9b0 <bt_mesh_net_transmit_get+0x8>)
    d9aa:	f893 01f1 	ldrb.w	r0, [r3, #497]	; 0x1f1
    d9ae:	4770      	bx	lr
    d9b0:	20001dd8 	.word	0x20001dd8

0000d9b4 <bt_mesh_relay_set>:

int bt_mesh_relay_set(enum bt_mesh_feat_state relay, uint8_t xmit)
{
    d9b4:	b510      	push	{r4, lr}
    d9b6:	460c      	mov	r4, r1

	if (!IS_ENABLED(CONFIG_BT_MESH_RELAY)) {
		return -ENOTSUP;
	}

	err = feature_set(BT_MESH_RELAY, relay);
    d9b8:	4601      	mov	r1, r0
    d9ba:	2006      	movs	r0, #6
    d9bc:	f7ff ff68 	bl	d890 <feature_set>
	if (err == -EINVAL) {
    d9c0:	f110 0f16 	cmn.w	r0, #22
    d9c4:	d014      	beq.n	d9f0 <bt_mesh_relay_set+0x3c>
		return err;
	}

	if (err == -EALREADY && bt_mesh.relay_xmit == xmit) {
    d9c6:	f110 0f78 	cmn.w	r0, #120	; 0x78
    d9ca:	4b0a      	ldr	r3, [pc, #40]	; (d9f4 <bt_mesh_relay_set+0x40>)
    d9cc:	d103      	bne.n	d9d6 <bt_mesh_relay_set+0x22>
    d9ce:	f893 21f2 	ldrb.w	r2, [r3, #498]	; 0x1f2
    d9d2:	42a2      	cmp	r2, r4
    d9d4:	d00c      	beq.n	d9f0 <bt_mesh_relay_set+0x3c>
		return -EALREADY;
	}

	bt_mesh.relay_xmit = xmit;
	bt_mesh_hb_feature_changed(BT_MESH_FEAT_RELAY);
    d9d6:	2001      	movs	r0, #1
	bt_mesh.relay_xmit = xmit;
    d9d8:	f883 41f2 	strb.w	r4, [r3, #498]	; 0x1f2
	bt_mesh_hb_feature_changed(BT_MESH_FEAT_RELAY);
    d9dc:	f003 fdf6 	bl	115cc <bt_mesh_hb_feature_changed>

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
    d9e0:	2000      	movs	r0, #0
    d9e2:	f7ff ff47 	bl	d874 <atomic_test_bit.constprop.7>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    d9e6:	b118      	cbz	r0, d9f0 <bt_mesh_relay_set+0x3c>
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
    d9e8:	2007      	movs	r0, #7
    d9ea:	f006 fe47 	bl	1467c <bt_mesh_settings_store_schedule>
	}

	return 0;
    d9ee:	2000      	movs	r0, #0
}
    d9f0:	bd10      	pop	{r4, pc}
    d9f2:	bf00      	nop
    d9f4:	20001dd8 	.word	0x20001dd8

0000d9f8 <cfg_set>:
	}
}

static int cfg_set(const char *name, size_t len_rd,
		   settings_read_cb read_cb, void *cb_arg)
{
    d9f8:	b513      	push	{r0, r1, r4, lr}
    d9fa:	4610      	mov	r0, r2
    d9fc:	461c      	mov	r4, r3
	struct cfg_val cfg;
	int err;

	if (len_rd == 0) {
    d9fe:	b359      	cbz	r1, da58 <cfg_set+0x60>
		BT_DBG("Cleared configuration state");
		return 0;
	}

	err = bt_mesh_settings_set(read_cb, cb_arg, &cfg, sizeof(cfg));
    da00:	4621      	mov	r1, r4
    da02:	2307      	movs	r3, #7
    da04:	466a      	mov	r2, sp
    da06:	f006 fe17 	bl	14638 <bt_mesh_settings_set>
	if (err) {
    da0a:	4604      	mov	r4, r0
    da0c:	b130      	cbz	r0, da1c <cfg_set+0x24>
		BT_ERR("Failed to set \'cfg\'");
    da0e:	2145      	movs	r1, #69	; 0x45
    da10:	4812      	ldr	r0, [pc, #72]	; (da5c <cfg_set+0x64>)
    da12:	f019 faac 	bl	26f6e <printk>
	bt_mesh_default_ttl_set(cfg.default_ttl);

	BT_DBG("Restored configuration state");

	return 0;
}
    da16:	4620      	mov	r0, r4
    da18:	b002      	add	sp, #8
    da1a:	bd10      	pop	{r4, pc}
	bt_mesh_net_transmit_set(cfg.net_transmit);
    da1c:	f89d 0000 	ldrb.w	r0, [sp]
    da20:	f7ff ffae 	bl	d980 <bt_mesh_net_transmit_set>
	bt_mesh_relay_set(cfg.relay, cfg.relay_retransmit);
    da24:	f89d 1002 	ldrb.w	r1, [sp, #2]
    da28:	f89d 0001 	ldrb.w	r0, [sp, #1]
    da2c:	f7ff ffc2 	bl	d9b4 <bt_mesh_relay_set>
	bt_mesh_beacon_set(cfg.beacon);
    da30:	f89d 0003 	ldrb.w	r0, [sp, #3]
    da34:	3000      	adds	r0, #0
    da36:	bf18      	it	ne
    da38:	2001      	movne	r0, #1
    da3a:	f7ff ff55 	bl	d8e8 <bt_mesh_beacon_set>
	bt_mesh_gatt_proxy_set(cfg.gatt_proxy);
    da3e:	f89d 0004 	ldrb.w	r0, [sp, #4]
    da42:	f01c fc44 	bl	2a2ce <bt_mesh_gatt_proxy_set>
	bt_mesh_friend_set(cfg.frnd);
    da46:	f89d 0005 	ldrb.w	r0, [sp, #5]
    da4a:	f01c fc56 	bl	2a2fa <bt_mesh_friend_set>
	bt_mesh_default_ttl_set(cfg.default_ttl);
    da4e:	f89d 0006 	ldrb.w	r0, [sp, #6]
    da52:	f7ff ff73 	bl	d93c <bt_mesh_default_ttl_set>
	return 0;
    da56:	e7de      	b.n	da16 <cfg_set+0x1e>
		return 0;
    da58:	460c      	mov	r4, r1
    da5a:	e7dc      	b.n	da16 <cfg_set+0x1e>
    da5c:	000319d7 	.word	0x000319d7

0000da60 <bt_mesh_relay_retransmit_get>:
}
    da60:	4b01      	ldr	r3, [pc, #4]	; (da68 <bt_mesh_relay_retransmit_get+0x8>)
    da62:	f893 01f2 	ldrb.w	r0, [r3, #498]	; 0x1f2
    da66:	4770      	bx	lr
    da68:	20001dd8 	.word	0x20001dd8

0000da6c <bt_mesh_cfg_init>:
{
    da6c:	b510      	push	{r4, lr}
	bt_mesh.net_xmit =
    da6e:	4c0e      	ldr	r4, [pc, #56]	; (daa8 <bt_mesh_cfg_init+0x3c>)
    da70:	230a      	movs	r3, #10
    da72:	f884 31f1 	strb.w	r3, [r4, #497]	; 0x1f1
	bt_mesh.relay_xmit =
    da76:	f240 730a 	movw	r3, #1802	; 0x70a
    da7a:	f8a4 31f2 	strh.w	r3, [r4, #498]	; 0x1f2
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    da7e:	3408      	adds	r4, #8
    da80:	2140      	movs	r1, #64	; 0x40
    da82:	4620      	mov	r0, r4
    da84:	f01c fc11 	bl	2a2aa <atomic_or>
    da88:	2180      	movs	r1, #128	; 0x80
    da8a:	4620      	mov	r0, r4
    da8c:	f01c fc0d 	bl	2a2aa <atomic_or>
    da90:	f44f 7180 	mov.w	r1, #256	; 0x100
    da94:	4620      	mov	r0, r4
    da96:	f01c fc08 	bl	2a2aa <atomic_or>
    da9a:	4620      	mov	r0, r4
    da9c:	f44f 7100 	mov.w	r1, #512	; 0x200
}
    daa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    daa4:	f01c bc01 	b.w	2a2aa <atomic_or>
    daa8:	20001dd8 	.word	0x20001dd8

0000daac <bt_mesh_cfg_pending_store>:
		BT_HEXDUMP_DBG(&val, sizeof(val), "raw value");
	}
}

void bt_mesh_cfg_pending_store(void)
{
    daac:	b507      	push	{r0, r1, r2, lr}
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
    daae:	2000      	movs	r0, #0
    dab0:	f7ff fee0 	bl	d874 <atomic_test_bit.constprop.7>
    dab4:	b348      	cbz	r0, db0a <bt_mesh_cfg_pending_store+0x5e>
	return bt_mesh.net_xmit;
    dab6:	4a19      	ldr	r2, [pc, #100]	; (db1c <bt_mesh_cfg_pending_store+0x70>)
	val.net_transmit = bt_mesh_net_transmit_get();
    dab8:	f892 31f1 	ldrb.w	r3, [r2, #497]	; 0x1f1
    dabc:	f88d 3000 	strb.w	r3, [sp]
	val.relay = bt_mesh_relay_get();
    dac0:	f01c fc35 	bl	2a32e <bt_mesh_relay_get>
	val.relay_retransmit = bt_mesh_relay_retransmit_get();
    dac4:	f892 31f2 	ldrb.w	r3, [r2, #498]	; 0x1f2
    dac8:	f88d 3002 	strb.w	r3, [sp, #2]
	val.relay = bt_mesh_relay_get();
    dacc:	f88d 0001 	strb.w	r0, [sp, #1]
	val.beacon = bt_mesh_beacon_enabled();
    dad0:	f01c fbfa 	bl	2a2c8 <bt_mesh_beacon_enabled>
    dad4:	f88d 0003 	strb.w	r0, [sp, #3]
	val.gatt_proxy = bt_mesh_gatt_proxy_get();
    dad8:	f01c fc0c 	bl	2a2f4 <bt_mesh_gatt_proxy_get>
    dadc:	f88d 0004 	strb.w	r0, [sp, #4]
	val.frnd = bt_mesh_friend_get();
    dae0:	f01c fc22 	bl	2a328 <bt_mesh_friend_get>
	err = settings_save_one("bt/mesh/Cfg", &val, sizeof(val));
    dae4:	4669      	mov	r1, sp
	val.default_ttl = bt_mesh_default_ttl_get();
    dae6:	f892 31f3 	ldrb.w	r3, [r2, #499]	; 0x1f3
	val.frnd = bt_mesh_friend_get();
    daea:	f88d 0005 	strb.w	r0, [sp, #5]
	err = settings_save_one("bt/mesh/Cfg", &val, sizeof(val));
    daee:	2207      	movs	r2, #7
    daf0:	480b      	ldr	r0, [pc, #44]	; (db20 <bt_mesh_cfg_pending_store+0x74>)
	val.default_ttl = bt_mesh_default_ttl_get();
    daf2:	f88d 3006 	strb.w	r3, [sp, #6]
	err = settings_save_one("bt/mesh/Cfg", &val, sizeof(val));
    daf6:	f7f8 f895 	bl	5c24 <settings_save_one>
	if (err) {
    dafa:	b118      	cbz	r0, db04 <bt_mesh_cfg_pending_store+0x58>
		BT_ERR("Failed to store configuration value");
    dafc:	4809      	ldr	r0, [pc, #36]	; (db24 <bt_mesh_cfg_pending_store+0x78>)
    dafe:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Failed to clear configuration");
    db00:	f019 fa35 	bl	26f6e <printk>
		store_pending_cfg();
	} else {
		clear_cfg();
	}
}
    db04:	b003      	add	sp, #12
    db06:	f85d fb04 	ldr.w	pc, [sp], #4
	err = settings_delete("bt/mesh/Cfg");
    db0a:	4805      	ldr	r0, [pc, #20]	; (db20 <bt_mesh_cfg_pending_store+0x74>)
    db0c:	f019 fe38 	bl	27780 <settings_delete>
	if (err) {
    db10:	2800      	cmp	r0, #0
    db12:	d0f7      	beq.n	db04 <bt_mesh_cfg_pending_store+0x58>
		BT_ERR("Failed to clear configuration");
    db14:	2145      	movs	r1, #69	; 0x45
    db16:	4804      	ldr	r0, [pc, #16]	; (db28 <bt_mesh_cfg_pending_store+0x7c>)
    db18:	e7f2      	b.n	db00 <bt_mesh_cfg_pending_store+0x54>
    db1a:	bf00      	nop
    db1c:	20001dd8 	.word	0x20001dd8
    db20:	0003197f 	.word	0x0003197f
    db24:	0003198b 	.word	0x0003198b
    db28:	000319b4 	.word	0x000319b4

0000db2c <adv_alloc>:
static struct bt_mesh_adv adv_pool[CONFIG_BT_MESH_ADV_BUF_COUNT];

static struct bt_mesh_adv *adv_alloc(int id)
{
	return &adv_pool[id];
}
    db2c:	4b02      	ldr	r3, [pc, #8]	; (db38 <adv_alloc+0xc>)
    db2e:	220c      	movs	r2, #12
    db30:	fb02 3000 	mla	r0, r2, r0, r3
    db34:	4770      	bx	lr
    db36:	bf00      	nop
    db38:	20002cc4 	.word	0x20002cc4

0000db3c <bt_mesh_scan_cb>:
}

static void bt_mesh_scan_cb(const bt_addr_le_t *addr, int8_t rssi,
			    uint8_t adv_type, struct net_buf_simple *buf)
{
	if (adv_type != BT_GAP_ADV_TYPE_ADV_NONCONN_IND) {
    db3c:	2a03      	cmp	r2, #3
{
    db3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    db42:	460f      	mov	r7, r1
    db44:	461c      	mov	r4, r3
	if (adv_type != BT_GAP_ADV_TYPE_ADV_NONCONN_IND) {
    db46:	d025      	beq.n	db94 <bt_mesh_scan_cb+0x58>
		}

		net_buf_simple_restore(buf, &state);
		net_buf_simple_pull(buf, len);
	}
}
    db48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	state->offset = net_buf_simple_headroom(buf);
    db4c:	4620      	mov	r0, r4
    db4e:	f01e ff3c 	bl	2c9ca <net_buf_simple_headroom>
    db52:	4606      	mov	r6, r0
		type = net_buf_simple_pull_u8(buf);
    db54:	4620      	mov	r0, r4
	state->len = buf->len;
    db56:	f8b4 8004 	ldrh.w	r8, [r4, #4]
    db5a:	f01e fefc 	bl	2c956 <net_buf_simple_pull_u8>
		buf->len = len - 1;
    db5e:	1e6b      	subs	r3, r5, #1
		switch (type) {
    db60:	282a      	cmp	r0, #42	; 0x2a
		buf->len = len - 1;
    db62:	80a3      	strh	r3, [r4, #4]
		switch (type) {
    db64:	d007      	beq.n	db76 <bt_mesh_scan_cb+0x3a>
    db66:	282b      	cmp	r0, #43	; 0x2b
    db68:	d027      	beq.n	dbba <bt_mesh_scan_cb+0x7e>
    db6a:	2829      	cmp	r0, #41	; 0x29
    db6c:	d108      	bne.n	db80 <bt_mesh_scan_cb+0x44>
			bt_mesh_pb_adv_recv(buf);
    db6e:	4620      	mov	r0, r4
    db70:	f009 faba 	bl	170e8 <bt_mesh_pb_adv_recv>
			break;
    db74:	e004      	b.n	db80 <bt_mesh_scan_cb+0x44>
			bt_mesh_net_recv(buf, rssi, BT_MESH_NET_IF_ADV);
    db76:	2200      	movs	r2, #0
    db78:	4639      	mov	r1, r7
    db7a:	4620      	mov	r0, r4
    db7c:	f001 f83c 	bl	ebf8 <bt_mesh_net_recv>
	buf->data = buf->__buf + state->offset;
    db80:	68a3      	ldr	r3, [r4, #8]
	buf->len = state->len;
    db82:	f8a4 8004 	strh.w	r8, [r4, #4]
	buf->data = buf->__buf + state->offset;
    db86:	fa13 f686 	uxtah	r6, r3, r6
    db8a:	6026      	str	r6, [r4, #0]
		net_buf_simple_pull(buf, len);
    db8c:	4629      	mov	r1, r5
    db8e:	4620      	mov	r0, r4
    db90:	f011 faf6 	bl	1f180 <net_buf_simple_pull>
	while (buf->len > 1) {
    db94:	88a3      	ldrh	r3, [r4, #4]
    db96:	2b01      	cmp	r3, #1
    db98:	d9d6      	bls.n	db48 <bt_mesh_scan_cb+0xc>
		len = net_buf_simple_pull_u8(buf);
    db9a:	4620      	mov	r0, r4
    db9c:	f01e fedb 	bl	2c956 <net_buf_simple_pull_u8>
		if (len == 0U) {
    dba0:	4605      	mov	r5, r0
    dba2:	2800      	cmp	r0, #0
    dba4:	d0d0      	beq.n	db48 <bt_mesh_scan_cb+0xc>
		if (len > buf->len) {
    dba6:	88a2      	ldrh	r2, [r4, #4]
    dba8:	b283      	uxth	r3, r0
    dbaa:	429a      	cmp	r2, r3
    dbac:	d2ce      	bcs.n	db4c <bt_mesh_scan_cb+0x10>
			BT_WARN("AD malformed");
    dbae:	2157      	movs	r1, #87	; 0x57
    dbb0:	4804      	ldr	r0, [pc, #16]	; (dbc4 <bt_mesh_scan_cb+0x88>)
}
    dbb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			BT_WARN("AD malformed");
    dbb6:	f019 b9da 	b.w	26f6e <printk>
			bt_mesh_beacon_recv(buf);
    dbba:	4620      	mov	r0, r4
    dbbc:	f000 fa56 	bl	e06c <bt_mesh_beacon_recv>
			break;
    dbc0:	e7de      	b.n	db80 <bt_mesh_scan_cb+0x44>
    dbc2:	bf00      	nop
    dbc4:	00031a31 	.word	0x00031a31

0000dbc8 <bt_mesh_adv_create_from_pool>:
{
    dbc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dbcc:	461e      	mov	r6, r3
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    dbce:	4b13      	ldr	r3, [pc, #76]	; (dc1c <bt_mesh_adv_create_from_pool+0x54>)
    dbd0:	f3bf 8f5b 	dmb	ish
    dbd4:	681c      	ldr	r4, [r3, #0]
    dbd6:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    dbda:	f3c4 0440 	ubfx	r4, r4, #1, #1
    dbde:	4688      	mov	r8, r1
    dbe0:	4617      	mov	r7, r2
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_SUSPENDED)) {
    dbe2:	b13c      	cbz	r4, dbf4 <bt_mesh_adv_create_from_pool+0x2c>
		BT_WARN("Refusing to allocate buffer while suspended");
    dbe4:	2157      	movs	r1, #87	; 0x57
    dbe6:	480e      	ldr	r0, [pc, #56]	; (dc20 <bt_mesh_adv_create_from_pool+0x58>)
    dbe8:	f019 f9c1 	bl	26f6e <printk>
		return NULL;
    dbec:	2500      	movs	r5, #0
}
    dbee:	4628      	mov	r0, r5
    dbf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_alloc_fixed(pool, timeout);
    dbf4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    dbf8:	f01e fe7f 	bl	2c8fa <net_buf_alloc_fixed>
	if (!buf) {
    dbfc:	4605      	mov	r5, r0
    dbfe:	2800      	cmp	r0, #0
    dc00:	d0f5      	beq.n	dbee <bt_mesh_adv_create_from_pool+0x26>
	adv = get_id(net_buf_id(buf));
    dc02:	f010 ff9b 	bl	1eb3c <net_buf_id>
    dc06:	47c0      	blx	r8
	BT_MESH_ADV(buf) = adv;
    dc08:	6168      	str	r0, [r5, #20]
    dc0a:	6084      	str	r4, [r0, #8]
	adv->type         = type;
    dc0c:	7a03      	ldrb	r3, [r0, #8]
    dc0e:	6004      	str	r4, [r0, #0]
    dc10:	f367 0301 	bfi	r3, r7, #0, #2
    dc14:	6044      	str	r4, [r0, #4]
    dc16:	7203      	strb	r3, [r0, #8]
	adv->xmit         = xmit;
    dc18:	7246      	strb	r6, [r0, #9]
	return buf;
    dc1a:	e7e8      	b.n	dbee <bt_mesh_adv_create_from_pool+0x26>
    dc1c:	20001de0 	.word	0x20001de0
    dc20:	000319fc 	.word	0x000319fc

0000dc24 <bt_mesh_adv_create>:
{
    dc24:	b507      	push	{r0, r1, r2, lr}
	return bt_mesh_adv_create_from_pool(&adv_buf_pool, adv_alloc, type,
    dc26:	e9cd 2300 	strd	r2, r3, [sp]
    dc2a:	460b      	mov	r3, r1
    dc2c:	4602      	mov	r2, r0
    dc2e:	4903      	ldr	r1, [pc, #12]	; (dc3c <bt_mesh_adv_create+0x18>)
    dc30:	4803      	ldr	r0, [pc, #12]	; (dc40 <bt_mesh_adv_create+0x1c>)
    dc32:	f7ff ffc9 	bl	dbc8 <bt_mesh_adv_create_from_pool>
}
    dc36:	b003      	add	sp, #12
    dc38:	f85d fb04 	ldr.w	pc, [sp], #4
    dc3c:	0000db2d 	.word	0x0000db2d
    dc40:	200013ac 	.word	0x200013ac

0000dc44 <bt_mesh_adv_send>:
{
    dc44:	b510      	push	{r4, lr}
	BT_MESH_ADV(buf)->cb = cb;
    dc46:	6944      	ldr	r4, [r0, #20]
	BT_MESH_ADV(buf)->cb_data = cb_data;
    dc48:	e9c4 1200 	strd	r1, r2, [r4]
	BT_MESH_ADV(buf)->busy = 1U;
    dc4c:	6942      	ldr	r2, [r0, #20]
    dc4e:	7a13      	ldrb	r3, [r2, #8]
    dc50:	f043 0304 	orr.w	r3, r3, #4
    dc54:	7213      	strb	r3, [r2, #8]
	net_buf_put(&bt_mesh_adv_queue, net_buf_ref(buf));
    dc56:	f011 f9c1 	bl	1efdc <net_buf_ref>
    dc5a:	4601      	mov	r1, r0
    dc5c:	4803      	ldr	r0, [pc, #12]	; (dc6c <bt_mesh_adv_send+0x28>)
    dc5e:	f011 f94b 	bl	1eef8 <net_buf_put>
}
    dc62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_mesh_adv_buf_ready();
    dc66:	f01d ba72 	b.w	2b14e <bt_mesh_adv_buf_ready>
    dc6a:	bf00      	nop
    dc6c:	2000132c 	.word	0x2000132c

0000dc70 <bt_mesh_scan_enable>:

int bt_mesh_scan_enable(void)
{
    dc70:	b510      	push	{r4, lr}
    dc72:	b086      	sub	sp, #24
	struct bt_le_scan_param scan_param = {
    dc74:	2214      	movs	r2, #20
    dc76:	2100      	movs	r1, #0
    dc78:	a801      	add	r0, sp, #4
    dc7a:	f01f fcbe 	bl	2d5fa <memset>
    dc7e:	f04f 1330 	mov.w	r3, #3145776	; 0x300030
			.window     = MESH_SCAN_WINDOW };
	int err;

	BT_DBG("");

	err = bt_le_scan_start(&scan_param, bt_mesh_scan_cb);
    dc82:	490a      	ldr	r1, [pc, #40]	; (dcac <bt_mesh_scan_enable+0x3c>)
	struct bt_le_scan_param scan_param = {
    dc84:	9303      	str	r3, [sp, #12]
	err = bt_le_scan_start(&scan_param, bt_mesh_scan_cb);
    dc86:	a801      	add	r0, sp, #4
    dc88:	f7fc f85c 	bl	9d44 <bt_le_scan_start>
	if (err && err != -EALREADY) {
    dc8c:	4604      	mov	r4, r0
    dc8e:	b138      	cbz	r0, dca0 <bt_mesh_scan_enable+0x30>
    dc90:	f110 0f78 	cmn.w	r0, #120	; 0x78
    dc94:	d007      	beq.n	dca6 <bt_mesh_scan_enable+0x36>
		BT_ERR("starting scan failed (err %d)", err);
    dc96:	4602      	mov	r2, r0
    dc98:	2145      	movs	r1, #69	; 0x45
    dc9a:	4805      	ldr	r0, [pc, #20]	; (dcb0 <bt_mesh_scan_enable+0x40>)
    dc9c:	f019 f967 	bl	26f6e <printk>
		return err;
	}

	return 0;
}
    dca0:	4620      	mov	r0, r4
    dca2:	b006      	add	sp, #24
    dca4:	bd10      	pop	{r4, pc}
	return 0;
    dca6:	2400      	movs	r4, #0
    dca8:	e7fa      	b.n	dca0 <bt_mesh_scan_enable+0x30>
    dcaa:	bf00      	nop
    dcac:	0000db3d 	.word	0x0000db3d
    dcb0:	00031a66 	.word	0x00031a66

0000dcb4 <bt_mesh_scan_disable>:

int bt_mesh_scan_disable(void)
{
    dcb4:	b510      	push	{r4, lr}
	int err;

	BT_DBG("");

	err = bt_le_scan_stop();
    dcb6:	f7fc f8fd 	bl	9eb4 <bt_le_scan_stop>
	if (err && err != -EALREADY) {
    dcba:	4604      	mov	r4, r0
    dcbc:	b138      	cbz	r0, dcce <bt_mesh_scan_disable+0x1a>
    dcbe:	f110 0f78 	cmn.w	r0, #120	; 0x78
    dcc2:	d006      	beq.n	dcd2 <bt_mesh_scan_disable+0x1e>
		BT_ERR("stopping scan failed (err %d)", err);
    dcc4:	4602      	mov	r2, r0
    dcc6:	2145      	movs	r1, #69	; 0x45
    dcc8:	4803      	ldr	r0, [pc, #12]	; (dcd8 <bt_mesh_scan_disable+0x24>)
    dcca:	f019 f950 	bl	26f6e <printk>
		return err;
	}

	return 0;
}
    dcce:	4620      	mov	r0, r4
    dcd0:	bd10      	pop	{r4, pc}
	return 0;
    dcd2:	2400      	movs	r4, #0
    dcd4:	e7fb      	b.n	dcce <bt_mesh_scan_disable+0x1a>
    dcd6:	bf00      	nop
    dcd8:	00031a43 	.word	0x00031a43

0000dcdc <subnet_by_id>:

	return true;
}

static int subnet_by_id(struct bt_mesh_subnet *sub, void *cb_data)
{
    dcdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
		BT_WARN("Authentication Value %s != %s",
    dce0:	f8df 8070 	ldr.w	r8, [pc, #112]	; dd54 <subnet_by_id+0x78>
{
    dce4:	b085      	sub	sp, #20
    dce6:	460d      	mov	r5, r1
	struct beacon_params *params = cb_data;

	for (int i = 0; i < ARRAY_SIZE(sub->keys); i++) {
    dce8:	f100 045e 	add.w	r4, r0, #94	; 0x5e
    dcec:	2600      	movs	r6, #0
	bt_mesh_beacon_auth(keys->beacon, params->flags, keys->net_id,
    dcee:	af02      	add	r7, sp, #8
		if (sub->keys[i].valid && auth_match(&sub->keys[i], params)) {
    dcf0:	f814 3c32 	ldrb.w	r3, [r4, #-50]
    dcf4:	b313      	cbz	r3, dd3c <subnet_by_id+0x60>
	if (memcmp(params->net_id, keys->net_id, 8)) {
    dcf6:	2208      	movs	r2, #8
    dcf8:	4621      	mov	r1, r4
    dcfa:	6828      	ldr	r0, [r5, #0]
    dcfc:	f01f fc34 	bl	2d568 <memcmp>
    dd00:	b9e0      	cbnz	r0, dd3c <subnet_by_id+0x60>
	bt_mesh_beacon_auth(keys->beacon, params->flags, keys->net_id,
    dd02:	4622      	mov	r2, r4
    dd04:	7b29      	ldrb	r1, [r5, #12]
    dd06:	9700      	str	r7, [sp, #0]
    dd08:	68ab      	ldr	r3, [r5, #8]
    dd0a:	f104 0018 	add.w	r0, r4, #24
    dd0e:	f01c ffc4 	bl	2ac9a <bt_mesh_beacon_auth>
	if (memcmp(params->auth, net_auth, 8)) {
    dd12:	2208      	movs	r2, #8
    dd14:	4639      	mov	r1, r7
    dd16:	6868      	ldr	r0, [r5, #4]
    dd18:	f01f fc26 	bl	2d568 <memcmp>
    dd1c:	b1a0      	cbz	r0, dd48 <subnet_by_id+0x6c>
		BT_WARN("Authentication Value %s != %s",
    dd1e:	2108      	movs	r1, #8
    dd20:	6868      	ldr	r0, [r5, #4]
    dd22:	f7f9 fd63 	bl	77ec <bt_hex_real>
    dd26:	2108      	movs	r1, #8
    dd28:	4681      	mov	r9, r0
    dd2a:	4638      	mov	r0, r7
    dd2c:	f7f9 fd5e 	bl	77ec <bt_hex_real>
    dd30:	464a      	mov	r2, r9
    dd32:	4603      	mov	r3, r0
    dd34:	2157      	movs	r1, #87	; 0x57
    dd36:	4640      	mov	r0, r8
    dd38:	f019 f919 	bl	26f6e <printk>
		return false;
    dd3c:	345a      	adds	r4, #90	; 0x5a
	for (int i = 0; i < ARRAY_SIZE(sub->keys); i++) {
    dd3e:	b10e      	cbz	r6, dd44 <subnet_by_id+0x68>
			params->new_key = (i > 0);
			return true;
		}
	}

	return false;
    dd40:	2000      	movs	r0, #0
    dd42:	e003      	b.n	dd4c <subnet_by_id+0x70>
    dd44:	2601      	movs	r6, #1
    dd46:	e7d3      	b.n	dcf0 <subnet_by_id+0x14>
			params->new_key = (i > 0);
    dd48:	736e      	strb	r6, [r5, #13]
			return true;
    dd4a:	2001      	movs	r0, #1
}
    dd4c:	b005      	add	sp, #20
    dd4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    dd52:	bf00      	nop
    dd54:	00031c34 	.word	0x00031c34

0000dd58 <k_delayed_work_submit.constprop.7>:
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    dd58:	4602      	mov	r2, r0
    dd5a:	460b      	mov	r3, r1
    dd5c:	4801      	ldr	r0, [pc, #4]	; (dd64 <k_delayed_work_submit.constprop.7+0xc>)
    dd5e:	4902      	ldr	r1, [pc, #8]	; (dd68 <k_delayed_work_submit.constprop.7+0x10>)
    dd60:	f016 b81a 	b.w	23d98 <k_delayed_work_submit_to_queue>
    dd64:	20002490 	.word	0x20002490
    dd68:	20001da8 	.word	0x20001da8

0000dd6c <beacon_send>:
{
    dd6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dd70:	b08a      	sub	sp, #40	; 0x28
	if (IS_ENABLED(CONFIG_BT_MESH_PB_ADV) && bt_mesh_prov_active()) {
    dd72:	f008 f847 	bl	15e04 <bt_mesh_prov_active>
    dd76:	b110      	cbz	r0, dd7e <beacon_send+0x12>
		k_delayed_work_submit(&beacon_timer, K_SECONDS(CONFIG_BT_MESH_UNPROV_BEACON_INT));
    dd78:	f44f 3020 	mov.w	r0, #163840	; 0x28000
    dd7c:	e015      	b.n	ddaa <beacon_send+0x3e>
	if (bt_mesh_is_provisioned()) {
    dd7e:	f01c fa74 	bl	2a26a <bt_mesh_is_provisioned>
    dd82:	4607      	mov	r7, r0
    dd84:	b300      	cbz	r0, ddc8 <beacon_send+0x5c>
	first_half = !first_half;
    dd86:	4a4c      	ldr	r2, [pc, #304]	; (deb8 <beacon_send+0x14c>)
    dd88:	7813      	ldrb	r3, [r2, #0]
    dd8a:	f083 0301 	eor.w	r3, r3, #1
    dd8e:	7013      	strb	r3, [r2, #0]
	if (first_half) {
    dd90:	b913      	cbnz	r3, dd98 <beacon_send+0x2c>
	bt_mesh_subnet_foreach(sub_update_beacon_observation);
    dd92:	484a      	ldr	r0, [pc, #296]	; (debc <beacon_send+0x150>)
    dd94:	f001 fb00 	bl	f398 <bt_mesh_subnet_foreach>
		(void)bt_mesh_subnet_find(secure_beacon_send, NULL);
    dd98:	2100      	movs	r1, #0
    dd9a:	4849      	ldr	r0, [pc, #292]	; (dec0 <beacon_send+0x154>)
    dd9c:	f001 faea 	bl	f374 <bt_mesh_subnet_find>
		if (bt_mesh_beacon_enabled() ||
    dda0:	f01c fa92 	bl	2a2c8 <bt_mesh_beacon_enabled>
    dda4:	b128      	cbz	r0, ddb2 <beacon_send+0x46>
			k_delayed_work_submit(&beacon_timer,
    dda6:	f44f 20a0 	mov.w	r0, #327680	; 0x50000
		k_delayed_work_submit(&beacon_timer, K_SECONDS(CONFIG_BT_MESH_UNPROV_BEACON_INT));
    ddaa:	2100      	movs	r1, #0
    ddac:	f7ff ffd4 	bl	dd58 <k_delayed_work_submit.constprop.7>
    ddb0:	e007      	b.n	ddc2 <beacon_send+0x56>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    ddb2:	4b44      	ldr	r3, [pc, #272]	; (dec4 <beacon_send+0x158>)
    ddb4:	f3bf 8f5b 	dmb	ish
    ddb8:	681b      	ldr	r3, [r3, #0]
    ddba:	f3bf 8f5b 	dmb	ish
		if (bt_mesh_beacon_enabled() ||
    ddbe:	071b      	lsls	r3, r3, #28
    ddc0:	d4f1      	bmi.n	dda6 <beacon_send+0x3a>
}
    ddc2:	b00a      	add	sp, #40	; 0x28
    ddc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t uri_hash[16] = { 0 };
    ddc8:	4601      	mov	r1, r0
    ddca:	2210      	movs	r2, #16
    ddcc:	a802      	add	r0, sp, #8
    ddce:	f01f fc14 	bl	2d5fa <memset>
	buf = bt_mesh_adv_create(BT_MESH_ADV_BEACON, UNPROV_XMIT, K_NO_WAIT);
    ddd2:	2200      	movs	r2, #0
    ddd4:	2300      	movs	r3, #0
    ddd6:	210a      	movs	r1, #10
    ddd8:	2002      	movs	r0, #2
    ddda:	f7ff ff23 	bl	dc24 <bt_mesh_adv_create>
	if (!buf) {
    ddde:	4605      	mov	r5, r0
    dde0:	b920      	cbnz	r0, ddec <beacon_send+0x80>
		BT_ERR("Unable to allocate beacon buffer");
    dde2:	4839      	ldr	r0, [pc, #228]	; (dec8 <beacon_send+0x15c>)
    dde4:	2145      	movs	r1, #69	; 0x45
			BT_ERR("Unable to allocate URI buffer");
    dde6:	f019 f8c2 	bl	26f6e <printk>
			return -ENOBUFS;
    ddea:	e7c5      	b.n	dd78 <beacon_send+0xc>
	prov = bt_mesh_prov_get();
    ddec:	f008 f804 	bl	15df8 <bt_mesh_prov_get>
	return net_buf_simple_add_u8(&buf->b, val);
    ddf0:	f105 0608 	add.w	r6, r5, #8
    ddf4:	4604      	mov	r4, r0
    ddf6:	4639      	mov	r1, r7
    ddf8:	4630      	mov	r0, r6
    ddfa:	f01e fdfe 	bl	2c9fa <net_buf_simple_add_u8>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    ddfe:	2210      	movs	r2, #16
    de00:	6821      	ldr	r1, [r4, #0]
    de02:	4630      	mov	r0, r6
    de04:	f01e fded 	bl	2c9e2 <net_buf_simple_add_mem>
	if (prov->uri && bt_mesh_s1(prov->uri, uri_hash) == 0) {
    de08:	f8d4 8004 	ldr.w	r8, [r4, #4]
    de0c:	f1b8 0f00 	cmp.w	r8, #0
    de10:	d031      	beq.n	de76 <beacon_send+0x10a>
	return bt_mesh_aes_cmac(key, &sg, 1, mac);
}

static inline bool bt_mesh_s1(const char *m, uint8_t salt[16])
{
	const uint8_t zero[16] = { 0 };
    de12:	2210      	movs	r2, #16
    de14:	4639      	mov	r1, r7
    de16:	a806      	add	r0, sp, #24
    de18:	f01f fbef 	bl	2d5fa <memset>

	return bt_mesh_aes_cmac_one(zero, m, strlen(m), salt);
    de1c:	4640      	mov	r0, r8
    de1e:	f7f4 f843 	bl	1ea8 <strlen>
	return bt_mesh_aes_cmac(key, &sg, 1, mac);
    de22:	ab02      	add	r3, sp, #8
	struct bt_mesh_sg sg = { m, len };
    de24:	e9cd 8000 	strd	r8, r0, [sp]
	return bt_mesh_aes_cmac(key, &sg, 1, mac);
    de28:	2201      	movs	r2, #1
    de2a:	4669      	mov	r1, sp
    de2c:	a806      	add	r0, sp, #24
    de2e:	f01c fd8f 	bl	2a950 <bt_mesh_aes_cmac>
    de32:	bb00      	cbnz	r0, de76 <beacon_send+0x10a>
		oob_info = prov->oob_info | BT_MESH_PROV_OOB_URI;
    de34:	8921      	ldrh	r1, [r4, #8]
    de36:	f041 0102 	orr.w	r1, r1, #2
	net_buf_simple_add_be16(&buf->b, val);
    de3a:	4630      	mov	r0, r6
    de3c:	f01e fded 	bl	2ca1a <net_buf_simple_add_be16>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    de40:	2204      	movs	r2, #4
    de42:	a902      	add	r1, sp, #8
    de44:	4630      	mov	r0, r6
    de46:	f01e fdcc 	bl	2c9e2 <net_buf_simple_add_mem>
	bt_mesh_adv_send(buf, NULL, NULL);
    de4a:	2200      	movs	r2, #0
    de4c:	4611      	mov	r1, r2
    de4e:	4628      	mov	r0, r5
    de50:	f7ff fef8 	bl	dc44 <bt_mesh_adv_send>
	net_buf_unref(buf);
    de54:	4628      	mov	r0, r5
    de56:	f011 f87d 	bl	1ef54 <net_buf_unref>
	if (prov->uri) {
    de5a:	6863      	ldr	r3, [r4, #4]
    de5c:	2b00      	cmp	r3, #0
    de5e:	d08b      	beq.n	dd78 <beacon_send+0xc>
		buf = bt_mesh_adv_create(BT_MESH_ADV_URI, UNPROV_XMIT,
    de60:	2200      	movs	r2, #0
    de62:	2300      	movs	r3, #0
    de64:	210a      	movs	r1, #10
    de66:	2003      	movs	r0, #3
    de68:	f7ff fedc 	bl	dc24 <bt_mesh_adv_create>
		if (!buf) {
    de6c:	4605      	mov	r5, r0
    de6e:	b920      	cbnz	r0, de7a <beacon_send+0x10e>
			BT_ERR("Unable to allocate URI buffer");
    de70:	2145      	movs	r1, #69	; 0x45
    de72:	4816      	ldr	r0, [pc, #88]	; (decc <beacon_send+0x160>)
    de74:	e7b7      	b.n	dde6 <beacon_send+0x7a>
		oob_info = prov->oob_info;
    de76:	8921      	ldrh	r1, [r4, #8]
    de78:	e7df      	b.n	de3a <beacon_send+0xce>
		len = strlen(prov->uri);
    de7a:	6860      	ldr	r0, [r4, #4]
    de7c:	f7f4 f814 	bl	1ea8 <strlen>
	return net_buf_simple_tailroom(&buf->b);
    de80:	f105 0608 	add.w	r6, r5, #8
    de84:	4607      	mov	r7, r0
    de86:	4630      	mov	r0, r6
    de88:	f01e fda3 	bl	2c9d2 <net_buf_simple_tailroom>
		if (net_buf_tailroom(buf) < len) {
    de8c:	4287      	cmp	r7, r0
    de8e:	d907      	bls.n	dea0 <beacon_send+0x134>
			BT_WARN("Too long URI to fit advertising data");
    de90:	2157      	movs	r1, #87	; 0x57
    de92:	480f      	ldr	r0, [pc, #60]	; (ded0 <beacon_send+0x164>)
    de94:	f019 f86b 	bl	26f6e <printk>
		net_buf_unref(buf);
    de98:	4628      	mov	r0, r5
    de9a:	f011 f85b 	bl	1ef54 <net_buf_unref>
    de9e:	e76b      	b.n	dd78 <beacon_send+0xc>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    dea0:	463a      	mov	r2, r7
    dea2:	6861      	ldr	r1, [r4, #4]
    dea4:	4630      	mov	r0, r6
    dea6:	f01e fd9c 	bl	2c9e2 <net_buf_simple_add_mem>
			bt_mesh_adv_send(buf, NULL, NULL);
    deaa:	2200      	movs	r2, #0
    deac:	4611      	mov	r1, r2
    deae:	4628      	mov	r0, r5
    deb0:	f7ff fec8 	bl	dc44 <bt_mesh_adv_send>
    deb4:	e7f0      	b.n	de98 <beacon_send+0x12c>
    deb6:	bf00      	nop
    deb8:	2000483f 	.word	0x2000483f
    debc:	0002a369 	.word	0x0002a369
    dec0:	0000df29 	.word	0x0000df29
    dec4:	20001de0 	.word	0x20001de0
    dec8:	00031a95 	.word	0x00031a95
    decc:	00031abb 	.word	0x00031abb
    ded0:	00031ade 	.word	0x00031ade

0000ded4 <bt_mesh_beacon_create>:
{
    ded4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ded6:	460c      	mov	r4, r1
    ded8:	4606      	mov	r6, r0
	uint8_t flags = bt_mesh_net_flags(sub);
    deda:	f001 f95b 	bl	f194 <bt_mesh_net_flags>
	net_buf_simple_add_u8(buf, BEACON_TYPE_SECURE);
    dede:	2101      	movs	r1, #1
	uint8_t flags = bt_mesh_net_flags(sub);
    dee0:	4607      	mov	r7, r0
	net_buf_simple_add_u8(buf, BEACON_TYPE_SECURE);
    dee2:	4620      	mov	r0, r4
    dee4:	f01e fd89 	bl	2c9fa <net_buf_simple_add_u8>
	keys = &sub->keys[SUBNET_KEY_TX_IDX(sub)];
    dee8:	7fb5      	ldrb	r5, [r6, #30]
    deea:	1eab      	subs	r3, r5, #2
    deec:	425d      	negs	r5, r3
	net_buf_simple_add_u8(buf, flags);
    deee:	4639      	mov	r1, r7
    def0:	4620      	mov	r0, r4
	keys = &sub->keys[SUBNET_KEY_TX_IDX(sub)];
    def2:	415d      	adcs	r5, r3
	net_buf_simple_add_u8(buf, flags);
    def4:	f01e fd81 	bl	2c9fa <net_buf_simple_add_u8>
	net_buf_simple_add_mem(buf, keys->net_id, 8);
    def8:	215a      	movs	r1, #90	; 0x5a
    defa:	fb01 6105 	mla	r1, r1, r5, r6
    defe:	2208      	movs	r2, #8
    df00:	315e      	adds	r1, #94	; 0x5e
    df02:	4620      	mov	r0, r4
    df04:	f01e fd6d 	bl	2c9e2 <net_buf_simple_add_mem>
	net_buf_simple_add_be32(buf, bt_mesh.iv_index);
    df08:	4b06      	ldr	r3, [pc, #24]	; (df24 <bt_mesh_beacon_create+0x50>)
    df0a:	4620      	mov	r0, r4
    df0c:	6819      	ldr	r1, [r3, #0]
    df0e:	f01e fda7 	bl	2ca60 <net_buf_simple_add_be32>
	net_buf_simple_add_mem(buf, sub->auth, 8);
    df12:	f106 0124 	add.w	r1, r6, #36	; 0x24
    df16:	4620      	mov	r0, r4
    df18:	2208      	movs	r2, #8
}
    df1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	net_buf_simple_add_mem(buf, sub->auth, 8);
    df1e:	f01e bd60 	b.w	2c9e2 <net_buf_simple_add_mem>
    df22:	bf00      	nop
    df24:	20001dd8 	.word	0x20001dd8

0000df28 <secure_beacon_send>:
{
    df28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    df2a:	4605      	mov	r5, r0
	return z_impl_k_uptime_ticks();
    df2c:	f01f fa8a 	bl	2d444 <z_impl_k_uptime_ticks>
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
    df30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    df34:	fba0 6703 	umull	r6, r7, r0, r3
    df38:	fb03 7701 	mla	r7, r3, r1, r7
	time_diff = now - sub->beacon_sent;
    df3c:	682a      	ldr	r2, [r5, #0]
    df3e:	0bf3      	lsrs	r3, r6, #15
    df40:	ea43 4347 	orr.w	r3, r3, r7, lsl #17
    df44:	1a9a      	subs	r2, r3, r2
	if (time_diff < (600 * MSEC_PER_SEC) &&
    df46:	4b15      	ldr	r3, [pc, #84]	; (df9c <secure_beacon_send+0x74>)
    df48:	429a      	cmp	r2, r3
    df4a:	d809      	bhi.n	df60 <secure_beacon_send+0x38>
		time_diff < BEACON_THRESHOLD(sub)) {
    df4c:	7929      	ldrb	r1, [r5, #4]
    df4e:	f242 7310 	movw	r3, #10000	; 0x2710
    df52:	fb01 3303 	mla	r3, r1, r3, r3
    df56:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
    df5a:	3b08      	subs	r3, #8
	if (time_diff < (600 * MSEC_PER_SEC) &&
    df5c:	429a      	cmp	r2, r3
    df5e:	d31b      	bcc.n	df98 <secure_beacon_send+0x70>
	buf = bt_mesh_adv_create(BT_MESH_ADV_BEACON, PROV_XMIT, K_NO_WAIT);
    df60:	2200      	movs	r2, #0
    df62:	2300      	movs	r3, #0
    df64:	2108      	movs	r1, #8
    df66:	2002      	movs	r0, #2
    df68:	f7ff fe5c 	bl	dc24 <bt_mesh_adv_create>
	if (!buf) {
    df6c:	4604      	mov	r4, r0
    df6e:	b930      	cbnz	r0, df7e <secure_beacon_send+0x56>
		BT_ERR("Unable to allocate beacon buffer");
    df70:	480b      	ldr	r0, [pc, #44]	; (dfa0 <secure_beacon_send+0x78>)
    df72:	2145      	movs	r1, #69	; 0x45
    df74:	f018 fffb 	bl	26f6e <printk>
    df78:	f06f 000b 	mvn.w	r0, #11
}
    df7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	bt_mesh_beacon_create(sub, &buf->b);
    df7e:	f100 0108 	add.w	r1, r0, #8
    df82:	4628      	mov	r0, r5
    df84:	f7ff ffa6 	bl	ded4 <bt_mesh_beacon_create>
	bt_mesh_adv_send(buf, &send_cb, sub);
    df88:	4620      	mov	r0, r4
    df8a:	462a      	mov	r2, r5
    df8c:	4905      	ldr	r1, [pc, #20]	; (dfa4 <secure_beacon_send+0x7c>)
    df8e:	f7ff fe59 	bl	dc44 <bt_mesh_adv_send>
	net_buf_unref(buf);
    df92:	4620      	mov	r0, r4
    df94:	f010 ffde 	bl	1ef54 <net_buf_unref>
		return 0;
    df98:	2000      	movs	r0, #0
    df9a:	e7ef      	b.n	df7c <secure_beacon_send+0x54>
    df9c:	000927bf 	.word	0x000927bf
    dfa0:	00031a95 	.word	0x00031a95
    dfa4:	0002eed0 	.word	0x0002eed0

0000dfa8 <bt_mesh_beacon_update>:
		break;
	}
}

void bt_mesh_beacon_update(struct bt_mesh_subnet *sub)
{
    dfa8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    dfaa:	4605      	mov	r5, r0
	uint8_t flags = bt_mesh_net_flags(sub);
    dfac:	f001 f8f2 	bl	f194 <bt_mesh_net_flags>
	struct bt_mesh_subnet_keys *keys;
	int err;

	keys = &sub->keys[SUBNET_KEY_TX_IDX(sub)];
    dfb0:	7fab      	ldrb	r3, [r5, #30]
    dfb2:	3b02      	subs	r3, #2
    dfb4:	425a      	negs	r2, r3
    dfb6:	415a      	adcs	r2, r3
    dfb8:	235a      	movs	r3, #90	; 0x5a
    dfba:	4353      	muls	r3, r2

	BT_DBG("NetIndex 0x%03x Using %s key", sub->net_idx,
	       SUBNET_KEY_TX_IDX(sub) ? "new" : "current");
	BT_DBG("flags 0x%02x, IVI 0x%08x", flags, bt_mesh.iv_index);

	err = bt_mesh_beacon_auth(keys->beacon, flags, keys->net_id,
    dfbc:	f103 025e 	add.w	r2, r3, #94	; 0x5e
    dfc0:	f103 0476 	add.w	r4, r3, #118	; 0x76
				   bt_mesh.iv_index, sub->auth);
    dfc4:	f105 0324 	add.w	r3, r5, #36	; 0x24
	err = bt_mesh_beacon_auth(keys->beacon, flags, keys->net_id,
    dfc8:	9300      	str	r3, [sp, #0]
    dfca:	4b09      	ldr	r3, [pc, #36]	; (dff0 <bt_mesh_beacon_update+0x48>)
    dfcc:	4601      	mov	r1, r0
    dfce:	681b      	ldr	r3, [r3, #0]
    dfd0:	442a      	add	r2, r5
    dfd2:	1928      	adds	r0, r5, r4
    dfd4:	f01c fe61 	bl	2ac9a <bt_mesh_beacon_auth>
	if (err) {
    dfd8:	b138      	cbz	r0, dfea <bt_mesh_beacon_update+0x42>
		BT_ERR("Failed updating net beacon for 0x%03x", sub->net_idx);
    dfda:	8baa      	ldrh	r2, [r5, #28]
    dfdc:	4805      	ldr	r0, [pc, #20]	; (dff4 <bt_mesh_beacon_update+0x4c>)
    dfde:	2145      	movs	r1, #69	; 0x45
	}
}
    dfe0:	b003      	add	sp, #12
    dfe2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		BT_ERR("Failed updating net beacon for 0x%03x", sub->net_idx);
    dfe6:	f018 bfc2 	b.w	26f6e <printk>
}
    dfea:	b003      	add	sp, #12
    dfec:	bd30      	pop	{r4, r5, pc}
    dfee:	bf00      	nop
    dff0:	20001dd8 	.word	0x20001dd8
    dff4:	00031bfa 	.word	0x00031bfa

0000dff8 <bt_mesh_beacon_init>:
}

BT_MESH_SUBNET_CB_DEFINE(subnet_evt);

void bt_mesh_beacon_init(void)
{
    dff8:	b508      	push	{r3, lr}
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    dffa:	4b04      	ldr	r3, [pc, #16]	; (e00c <bt_mesh_beacon_init+0x14>)
    dffc:	2230      	movs	r2, #48	; 0x30
    dffe:	2100      	movs	r1, #0
    e000:	4618      	mov	r0, r3
    e002:	f01f fafa 	bl	2d5fa <memset>
    e006:	4a02      	ldr	r2, [pc, #8]	; (e010 <bt_mesh_beacon_init+0x18>)
    e008:	6042      	str	r2, [r0, #4]
	k_delayed_work_init(&beacon_timer, beacon_send);
}
    e00a:	bd08      	pop	{r3, pc}
    e00c:	20001da8 	.word	0x20001da8
    e010:	0000dd6d 	.word	0x0000dd6d

0000e014 <bt_mesh_beacon_ivu_initiator>:

void bt_mesh_beacon_ivu_initiator(bool enable)
{
    e014:	b508      	push	{r3, lr}
    e016:	4b13      	ldr	r3, [pc, #76]	; (e064 <bt_mesh_beacon_ivu_initiator+0x50>)
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    e018:	f3bf 8f5b 	dmb	ish
	if (val) {
    e01c:	b178      	cbz	r0, e03e <bt_mesh_beacon_ivu_initiator+0x2a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    e01e:	e853 2f00 	ldrex	r2, [r3]
    e022:	f042 0208 	orr.w	r2, r2, #8
    e026:	e843 2100 	strex	r1, r2, [r3]
    e02a:	2900      	cmp	r1, #0
    e02c:	d1f7      	bne.n	e01e <bt_mesh_beacon_ivu_initiator+0xa>
    e02e:	f3bf 8f5b 	dmb	ish
	atomic_set_bit_to(bt_mesh.flags, BT_MESH_IVU_INITIATOR, enable);

	if (enable) {
		k_delayed_work_submit(&beacon_timer, K_NO_WAIT);
    e032:	2000      	movs	r0, #0
    e034:	2100      	movs	r1, #0
	} else if (!bt_mesh_beacon_enabled()) {
		k_delayed_work_cancel(&beacon_timer);
	}
}
    e036:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		k_delayed_work_submit(&beacon_timer, K_NO_WAIT);
    e03a:	f7ff be8d 	b.w	dd58 <k_delayed_work_submit.constprop.7>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    e03e:	e853 2f00 	ldrex	r2, [r3]
    e042:	f022 0208 	bic.w	r2, r2, #8
    e046:	e843 2100 	strex	r1, r2, [r3]
    e04a:	2900      	cmp	r1, #0
    e04c:	d1f7      	bne.n	e03e <bt_mesh_beacon_ivu_initiator+0x2a>
    e04e:	f3bf 8f5b 	dmb	ish
	} else if (!bt_mesh_beacon_enabled()) {
    e052:	f01c f939 	bl	2a2c8 <bt_mesh_beacon_enabled>
    e056:	b920      	cbnz	r0, e062 <bt_mesh_beacon_ivu_initiator+0x4e>
		k_delayed_work_cancel(&beacon_timer);
    e058:	4803      	ldr	r0, [pc, #12]	; (e068 <bt_mesh_beacon_ivu_initiator+0x54>)
}
    e05a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		k_delayed_work_cancel(&beacon_timer);
    e05e:	f015 bf0b 	b.w	23e78 <k_delayed_work_cancel>
}
    e062:	bd08      	pop	{r3, pc}
    e064:	20001de0 	.word	0x20001de0
    e068:	20001da8 	.word	0x20001da8

0000e06c <bt_mesh_beacon_recv>:
{
    e06c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < 1) {
    e06e:	8883      	ldrh	r3, [r0, #4]
{
    e070:	b085      	sub	sp, #20
    e072:	4604      	mov	r4, r0
	if (buf->len < 1) {
    e074:	b923      	cbnz	r3, e080 <bt_mesh_beacon_recv+0x14>
		BT_ERR("Too short beacon");
    e076:	4855      	ldr	r0, [pc, #340]	; (e1cc <bt_mesh_beacon_recv+0x160>)
    e078:	2145      	movs	r1, #69	; 0x45
		BT_WARN("Ignoring Phase 2 KR Update secured using old key");
    e07a:	f018 ff78 	bl	26f6e <printk>
		return;
    e07e:	e02c      	b.n	e0da <bt_mesh_beacon_recv+0x6e>
	type = net_buf_simple_pull_u8(buf);
    e080:	f01e fc69 	bl	2c956 <net_buf_simple_pull_u8>
	switch (type) {
    e084:	4605      	mov	r5, r0
    e086:	b128      	cbz	r0, e094 <bt_mesh_beacon_recv+0x28>
    e088:	2801      	cmp	r0, #1
    e08a:	d028      	beq.n	e0de <bt_mesh_beacon_recv+0x72>
		BT_WARN("Unknown beacon type 0x%02x", type);
    e08c:	4602      	mov	r2, r0
    e08e:	2157      	movs	r1, #87	; 0x57
    e090:	484f      	ldr	r0, [pc, #316]	; (e1d0 <bt_mesh_beacon_recv+0x164>)
    e092:	e006      	b.n	e0a2 <bt_mesh_beacon_recv+0x36>
	if (buf->len != 18 && buf->len != 22) {
    e094:	88a2      	ldrh	r2, [r4, #4]
    e096:	f022 0304 	bic.w	r3, r2, #4
    e09a:	2b12      	cmp	r3, #18
    e09c:	d004      	beq.n	e0a8 <bt_mesh_beacon_recv+0x3c>
		BT_ERR("Invalid unprovisioned beacon length (%u)", buf->len);
    e09e:	484d      	ldr	r0, [pc, #308]	; (e1d4 <bt_mesh_beacon_recv+0x168>)
    e0a0:	2145      	movs	r1, #69	; 0x45
		BT_WARN("Unknown beacon type 0x%02x", type);
    e0a2:	f018 ff64 	bl	26f6e <printk>
    e0a6:	e018      	b.n	e0da <bt_mesh_beacon_recv+0x6e>
	uuid = net_buf_simple_pull_mem(buf, 16);
    e0a8:	2110      	movs	r1, #16
    e0aa:	4620      	mov	r0, r4
    e0ac:	f011 f884 	bl	1f1b8 <net_buf_simple_pull_mem>
    e0b0:	4606      	mov	r6, r0
	oob_info = net_buf_simple_pull_be16(buf);
    e0b2:	4620      	mov	r0, r4
    e0b4:	f01e fc5f 	bl	2c976 <net_buf_simple_pull_be16>
	if (buf->len == 4) {
    e0b8:	88a3      	ldrh	r3, [r4, #4]
    e0ba:	2b04      	cmp	r3, #4
	oob_info = net_buf_simple_pull_be16(buf);
    e0bc:	4607      	mov	r7, r0
	if (buf->len == 4) {
    e0be:	d104      	bne.n	e0ca <bt_mesh_beacon_recv+0x5e>
		uri_hash_val = net_buf_simple_pull_be32(buf);
    e0c0:	4620      	mov	r0, r4
    e0c2:	f01e fc79 	bl	2c9b8 <net_buf_simple_pull_be32>
		uri_hash = &uri_hash_val;
    e0c6:	466d      	mov	r5, sp
		uri_hash_val = net_buf_simple_pull_be32(buf);
    e0c8:	9000      	str	r0, [sp, #0]
	prov = bt_mesh_prov_get();
    e0ca:	f007 fe95 	bl	15df8 <bt_mesh_prov_get>
	if (prov->unprovisioned_beacon) {
    e0ce:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    e0d0:	b11b      	cbz	r3, e0da <bt_mesh_beacon_recv+0x6e>
		prov->unprovisioned_beacon(uuid,
    e0d2:	462a      	mov	r2, r5
    e0d4:	4639      	mov	r1, r7
    e0d6:	4630      	mov	r0, r6
    e0d8:	4798      	blx	r3
}
    e0da:	b005      	add	sp, #20
    e0dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (buf->len < 21) {
    e0de:	88a2      	ldrh	r2, [r4, #4]
    e0e0:	2a14      	cmp	r2, #20
    e0e2:	d802      	bhi.n	e0ea <bt_mesh_beacon_recv+0x7e>
		BT_ERR("Too short secure beacon (len %u)", buf->len);
    e0e4:	2145      	movs	r1, #69	; 0x45
    e0e6:	483c      	ldr	r0, [pc, #240]	; (e1d8 <bt_mesh_beacon_recv+0x16c>)
    e0e8:	e7db      	b.n	e0a2 <bt_mesh_beacon_recv+0x36>
	sub = bt_mesh_subnet_find(cache_check, buf->data);
    e0ea:	6821      	ldr	r1, [r4, #0]
    e0ec:	483b      	ldr	r0, [pc, #236]	; (e1dc <bt_mesh_beacon_recv+0x170>)
    e0ee:	f001 f941 	bl	f374 <bt_mesh_subnet_find>
	if (sub) {
    e0f2:	4605      	mov	r5, r0
    e0f4:	2800      	cmp	r0, #0
    e0f6:	d13f      	bne.n	e178 <bt_mesh_beacon_recv+0x10c>
	params.flags = net_buf_simple_pull_u8(buf);
    e0f8:	4620      	mov	r0, r4
	data = buf->data;
    e0fa:	6826      	ldr	r6, [r4, #0]
	params.flags = net_buf_simple_pull_u8(buf);
    e0fc:	f01e fc2b 	bl	2c956 <net_buf_simple_pull_u8>
	params.net_id = net_buf_simple_pull_mem(buf, 8);
    e100:	2108      	movs	r1, #8
	params.flags = net_buf_simple_pull_u8(buf);
    e102:	f88d 000c 	strb.w	r0, [sp, #12]
	params.net_id = net_buf_simple_pull_mem(buf, 8);
    e106:	4620      	mov	r0, r4
    e108:	f011 f856 	bl	1f1b8 <net_buf_simple_pull_mem>
    e10c:	9000      	str	r0, [sp, #0]
	params.iv_index = net_buf_simple_pull_be32(buf);
    e10e:	4620      	mov	r0, r4
    e110:	f01e fc52 	bl	2c9b8 <net_buf_simple_pull_be32>
	params.auth = buf->data;
    e114:	6823      	ldr	r3, [r4, #0]
	params.iv_index = net_buf_simple_pull_be32(buf);
    e116:	9002      	str	r0, [sp, #8]
	sub = bt_mesh_subnet_find(subnet_by_id, &params);
    e118:	4669      	mov	r1, sp
    e11a:	4831      	ldr	r0, [pc, #196]	; (e1e0 <bt_mesh_beacon_recv+0x174>)
	params.auth = buf->data;
    e11c:	9301      	str	r3, [sp, #4]
	sub = bt_mesh_subnet_find(subnet_by_id, &params);
    e11e:	f001 f929 	bl	f374 <bt_mesh_subnet_find>
	if (!sub) {
    e122:	4605      	mov	r5, r0
    e124:	2800      	cmp	r0, #0
    e126:	d0d8      	beq.n	e0da <bt_mesh_beacon_recv+0x6e>
	if (sub->kr_phase == BT_MESH_KR_PHASE_2 && !params.new_key) {
    e128:	7f83      	ldrb	r3, [r0, #30]
    e12a:	2b02      	cmp	r3, #2
    e12c:	d105      	bne.n	e13a <bt_mesh_beacon_recv+0xce>
    e12e:	f89d 300d 	ldrb.w	r3, [sp, #13]
    e132:	b913      	cbnz	r3, e13a <bt_mesh_beacon_recv+0xce>
		BT_WARN("Ignoring Phase 2 KR Update secured using old key");
    e134:	2157      	movs	r1, #87	; 0x57
    e136:	482b      	ldr	r0, [pc, #172]	; (e1e4 <bt_mesh_beacon_recv+0x178>)
    e138:	e79f      	b.n	e07a <bt_mesh_beacon_recv+0xe>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    e13a:	4633      	mov	r3, r6
    e13c:	1daa      	adds	r2, r5, #6
    e13e:	f106 0114 	add.w	r1, r6, #20
    e142:	f853 0b04 	ldr.w	r0, [r3], #4
    e146:	f842 0b04 	str.w	r0, [r2], #4
    e14a:	428b      	cmp	r3, r1
    e14c:	d1f9      	bne.n	e142 <bt_mesh_beacon_recv+0xd6>
    e14e:	781b      	ldrb	r3, [r3, #0]
    e150:	7013      	strb	r3, [r2, #0]
	bt_mesh_kr_update(sub, BT_MESH_KEY_REFRESH(params.flags),
    e152:	f89d 100c 	ldrb.w	r1, [sp, #12]
    e156:	f89d 200d 	ldrb.w	r2, [sp, #13]
    e15a:	4628      	mov	r0, r5
    e15c:	f001 0101 	and.w	r1, r1, #1
    e160:	f01c f9a3 	bl	2a4aa <bt_mesh_kr_update>
	if (bt_mesh_subnet_get(BT_MESH_KEY_PRIMARY) &&
    e164:	2000      	movs	r0, #0
    e166:	f01c fa42 	bl	2a5ee <bt_mesh_subnet_get>
    e16a:	b178      	cbz	r0, e18c <bt_mesh_beacon_recv+0x120>
    e16c:	8bab      	ldrh	r3, [r5, #28]
    e16e:	b16b      	cbz	r3, e18c <bt_mesh_beacon_recv+0x120>
		BT_WARN("Ignoring secure beacon on non-primary subnet");
    e170:	2157      	movs	r1, #87	; 0x57
    e172:	481d      	ldr	r0, [pc, #116]	; (e1e8 <bt_mesh_beacon_recv+0x17c>)
    e174:	f018 fefb 	bl	26f6e <printk>
	if (bt_mesh_beacon_enabled() &&
    e178:	f01c f8a6 	bl	2a2c8 <bt_mesh_beacon_enabled>
    e17c:	2800      	cmp	r0, #0
    e17e:	d0ac      	beq.n	e0da <bt_mesh_beacon_recv+0x6e>
	    sub->beacons_cur < 0xff) {
    e180:	796b      	ldrb	r3, [r5, #5]
	if (bt_mesh_beacon_enabled() &&
    e182:	2bff      	cmp	r3, #255	; 0xff
    e184:	d0a9      	beq.n	e0da <bt_mesh_beacon_recv+0x6e>
		sub->beacons_cur++;
    e186:	3301      	adds	r3, #1
    e188:	716b      	strb	r3, [r5, #5]
    e18a:	e7a6      	b.n	e0da <bt_mesh_beacon_recv+0x6e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    e18c:	4b17      	ldr	r3, [pc, #92]	; (e1ec <bt_mesh_beacon_recv+0x180>)
    e18e:	f3bf 8f5b 	dmb	ish
    e192:	681a      	ldr	r2, [r3, #0]
    e194:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_INITIATOR) &&
    e198:	0712      	lsls	r2, r2, #28
    e19a:	d50f      	bpl.n	e1bc <bt_mesh_beacon_recv+0x150>
    e19c:	f3bf 8f5b 	dmb	ish
    e1a0:	681b      	ldr	r3, [r3, #0]
    e1a2:	f3bf 8f5b 	dmb	ish
	     BT_MESH_IV_UPDATE(params.flags))) {
    e1a6:	f89d 200c 	ldrb.w	r2, [sp, #12]
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_INITIATOR) &&
    e1aa:	f3c3 0380 	ubfx	r3, r3, #2, #1
	     BT_MESH_IV_UPDATE(params.flags))) {
    e1ae:	f3c2 0240 	ubfx	r2, r2, #1, #1
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_INITIATOR) &&
    e1b2:	429a      	cmp	r2, r3
    e1b4:	d102      	bne.n	e1bc <bt_mesh_beacon_recv+0x150>
		bt_mesh_beacon_ivu_initiator(false);
    e1b6:	2000      	movs	r0, #0
    e1b8:	f7ff ff2c 	bl	e014 <bt_mesh_beacon_ivu_initiator>
	bt_mesh_net_iv_update(params.iv_index, BT_MESH_IV_UPDATE(params.flags));
    e1bc:	f89d 100c 	ldrb.w	r1, [sp, #12]
    e1c0:	9802      	ldr	r0, [sp, #8]
    e1c2:	f3c1 0140 	ubfx	r1, r1, #1, #1
    e1c6:	f000 fa07 	bl	e5d8 <bt_mesh_net_iv_update>
    e1ca:	e7d5      	b.n	e178 <bt_mesh_beacon_recv+0x10c>
    e1cc:	00031b08 	.word	0x00031b08
    e1d0:	00031bda 	.word	0x00031bda
    e1d4:	00031b1e 	.word	0x00031b1e
    e1d8:	00031b4c 	.word	0x00031b4c
    e1dc:	0002a373 	.word	0x0002a373
    e1e0:	0000dcdd 	.word	0x0000dcdd
    e1e4:	00031b72 	.word	0x00031b72
    e1e8:	00031ba8 	.word	0x00031ba8
    e1ec:	20001de0 	.word	0x20001de0

0000e1f0 <bt_mesh_beacon_enable>:

	bt_mesh_beacon_update(sub);
}

void bt_mesh_beacon_enable(void)
{
    e1f0:	b508      	push	{r3, lr}
	if (!bt_mesh_is_provisioned()) {
    e1f2:	f01c f83a 	bl	2a26a <bt_mesh_is_provisioned>
    e1f6:	b928      	cbnz	r0, e204 <bt_mesh_beacon_enable+0x14>
		return;
	}

	bt_mesh_subnet_foreach(subnet_beacon_enable);

	k_delayed_work_submit(&beacon_timer, K_NO_WAIT);
    e1f8:	2000      	movs	r0, #0
    e1fa:	2100      	movs	r1, #0
}
    e1fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_delayed_work_submit(&beacon_timer, K_NO_WAIT);
    e200:	f7ff bdaa 	b.w	dd58 <k_delayed_work_submit.constprop.7>
	bt_mesh_subnet_foreach(subnet_beacon_enable);
    e204:	4801      	ldr	r0, [pc, #4]	; (e20c <bt_mesh_beacon_enable+0x1c>)
    e206:	f001 f8c7 	bl	f398 <bt_mesh_subnet_foreach>
    e20a:	e7f5      	b.n	e1f8 <bt_mesh_beacon_enable+0x8>
    e20c:	0002a3b3 	.word	0x0002a3b3

0000e210 <bt_mesh_beacon_disable>:
    e210:	4b05      	ldr	r3, [pc, #20]	; (e228 <bt_mesh_beacon_disable+0x18>)
    e212:	f3bf 8f5b 	dmb	ish
    e216:	681b      	ldr	r3, [r3, #0]
    e218:	f3bf 8f5b 	dmb	ish

void bt_mesh_beacon_disable(void)
{
	if (!atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_INITIATOR)) {
    e21c:	071b      	lsls	r3, r3, #28
    e21e:	d402      	bmi.n	e226 <bt_mesh_beacon_disable+0x16>
		k_delayed_work_cancel(&beacon_timer);
    e220:	4802      	ldr	r0, [pc, #8]	; (e22c <bt_mesh_beacon_disable+0x1c>)
    e222:	f015 be29 	b.w	23e78 <k_delayed_work_cancel>
	}
}
    e226:	4770      	bx	lr
    e228:	20001de0 	.word	0x20001de0
    e22c:	20001da8 	.word	0x20001da8

0000e230 <bt_mesh_net_local>:

	return seq;
}

static void bt_mesh_net_local(struct k_work *work)
{
    e230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct net_buf *buf;

	while ((buf = net_buf_slist_get(&bt_mesh.local_queue))) {
    e234:	4c2e      	ldr	r4, [pc, #184]	; (e2f0 <bt_mesh_net_local+0xc0>)
{
    e236:	b086      	sub	sp, #24
	while ((buf = net_buf_slist_get(&bt_mesh.local_queue))) {
    e238:	f104 0518 	add.w	r5, r4, #24
    e23c:	4628      	mov	r0, r5
    e23e:	f010 fdff 	bl	1ee40 <net_buf_slist_get>
    e242:	4606      	mov	r6, r0
    e244:	b910      	cbnz	r0, e24c <bt_mesh_net_local+0x1c>
		       rx.ctx.addr, rx.seq, sub);

		(void) bt_mesh_trans_recv(&buf->b, &rx);
		net_buf_unref(buf);
	}
}
    e246:	b006      	add	sp, #24
    e248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		struct bt_mesh_subnet *sub = LOOPBACK_BUF_SUB(buf);
    e24c:	f8d6 8014 	ldr.w	r8, [r6, #20]
				.addr = SRC(buf->data),
    e250:	4637      	mov	r7, r6
		struct bt_mesh_net_rx rx = {
    e252:	2210      	movs	r2, #16
    e254:	2100      	movs	r1, #0
    e256:	a802      	add	r0, sp, #8
    e258:	f01f f9cf 	bl	2d5fa <memset>
    e25c:	f8b8 301c 	ldrh.w	r3, [r8, #28]
				.addr = SRC(buf->data),
    e260:	f857 1f08 	ldr.w	r1, [r7, #8]!
		struct bt_mesh_net_rx rx = {
    e264:	f8ad 3004 	strh.w	r3, [sp, #4]
    e268:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e26c:	f8ad 3006 	strh.w	r3, [sp, #6]
	return ((uint16_t)src[0] << 8) | src[1];
    e270:	794a      	ldrb	r2, [r1, #5]
    e272:	798b      	ldrb	r3, [r1, #6]
    e274:	f8cd 8000 	str.w	r8, [sp]
    e278:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    e27c:	f8ad 3008 	strh.w	r3, [sp, #8]
    e280:	79ca      	ldrb	r2, [r1, #7]
    e282:	7a0b      	ldrb	r3, [r1, #8]
    e284:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    e288:	f8ad 300a 	strh.w	r3, [sp, #10]
				.recv_ttl = TTL(buf->data),
    e28c:	784b      	ldrb	r3, [r1, #1]
    e28e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		struct bt_mesh_net_rx rx = {
    e292:	f88d 300d 	strb.w	r3, [sp, #13]
			.seq = SEQ(buf->data),
    e296:	1c88      	adds	r0, r1, #2
		struct bt_mesh_net_rx rx = {
    e298:	2301      	movs	r3, #1
    e29a:	f88d 300f 	strb.w	r3, [sp, #15]
			.seq = SEQ(buf->data),
    e29e:	f01c f88c 	bl	2a3ba <sys_get_be24>
			.old_iv = (IVI(buf->data) != (bt_mesh.iv_index & 0x01)),
    e2a2:	6823      	ldr	r3, [r4, #0]
		struct bt_mesh_net_rx rx = {
    e2a4:	9004      	str	r0, [sp, #16]
			.old_iv = (IVI(buf->data) != (bt_mesh.iv_index & 0x01)),
    e2a6:	780a      	ldrb	r2, [r1, #0]
    e2a8:	f003 0301 	and.w	r3, r3, #1
		struct bt_mesh_net_rx rx = {
    e2ac:	ea83 12d2 	eor.w	r2, r3, r2, lsr #7
    e2b0:	f89d 3014 	ldrb.w	r3, [sp, #20]
    e2b4:	f362 0300 	bfi	r3, r2, #0, #1
			.new_key = SUBNET_KEY_TX_IDX(sub),
    e2b8:	f898 201e 	ldrb.w	r2, [r8, #30]
    e2bc:	1e90      	subs	r0, r2, #2
    e2be:	4242      	negs	r2, r0
    e2c0:	4142      	adcs	r2, r0
		struct bt_mesh_net_rx rx = {
    e2c2:	f362 0341 	bfi	r3, r2, #1, #1
    e2c6:	f88d 3014 	strb.w	r3, [sp, #20]
			.ctl = CTL(buf->data),
    e2ca:	784a      	ldrb	r2, [r1, #1]
		struct bt_mesh_net_rx rx = {
    e2cc:	b2db      	uxtb	r3, r3
			.ctl = CTL(buf->data),
    e2ce:	09d2      	lsrs	r2, r2, #7
		struct bt_mesh_net_rx rx = {
    e2d0:	f362 03c3 	bfi	r3, r2, #3, #1
    e2d4:	f003 038f 	and.w	r3, r3, #143	; 0x8f
    e2d8:	f043 0350 	orr.w	r3, r3, #80	; 0x50
		(void) bt_mesh_trans_recv(&buf->b, &rx);
    e2dc:	4669      	mov	r1, sp
    e2de:	4638      	mov	r0, r7
		struct bt_mesh_net_rx rx = {
    e2e0:	f88d 3014 	strb.w	r3, [sp, #20]
		(void) bt_mesh_trans_recv(&buf->b, &rx);
    e2e4:	f002 fae4 	bl	108b0 <bt_mesh_trans_recv>
		net_buf_unref(buf);
    e2e8:	4630      	mov	r0, r6
    e2ea:	f010 fe33 	bl	1ef54 <net_buf_unref>
    e2ee:	e7a5      	b.n	e23c <bt_mesh_net_local+0xc>
    e2f0:	20001dd8 	.word	0x20001dd8

0000e2f4 <net_decrypt>:
}

static bool net_decrypt(struct bt_mesh_net_rx *rx, struct net_buf_simple *in,
			struct net_buf_simple *out,
			const struct bt_mesh_net_cred *cred)
{
    e2f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e2f8:	461f      	mov	r7, r3
	bool proxy = (rx->net_if == BT_MESH_NET_IF_PROXY_CFG);

	if (NID(in->data) != cred->nid) {
    e2fa:	680b      	ldr	r3, [r1, #0]
{
    e2fc:	4614      	mov	r4, r2
	if (NID(in->data) != cred->nid) {
    e2fe:	781a      	ldrb	r2, [r3, #0]
{
    e300:	4680      	mov	r8, r0
	if (NID(in->data) != cred->nid) {
    e302:	7838      	ldrb	r0, [r7, #0]
    e304:	f002 037f 	and.w	r3, r2, #127	; 0x7f
    e308:	4298      	cmp	r0, r3
    e30a:	d002      	beq.n	e312 <net_decrypt+0x1e>
		return false;
    e30c:	2000      	movs	r0, #0

	BT_DBG("src 0x%04x", rx->ctx.addr);

	return bt_mesh_net_decrypt(cred->enc, out, BT_MESH_NET_IVI_RX(rx),
				   proxy) == 0;
}
    e30e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	rx->old_iv = (IVI(in->data) != (bt_mesh.iv_index & 0x01));
    e312:	4d33      	ldr	r5, [pc, #204]	; (e3e0 <net_decrypt+0xec>)
	bool proxy = (rx->net_if == BT_MESH_NET_IF_PROXY_CFG);
    e314:	f898 6014 	ldrb.w	r6, [r8, #20]
	rx->old_iv = (IVI(in->data) != (bt_mesh.iv_index & 0x01));
    e318:	682b      	ldr	r3, [r5, #0]
    e31a:	f003 0301 	and.w	r3, r3, #1
    e31e:	ea83 13d2 	eor.w	r3, r3, r2, lsr #7
    e322:	4632      	mov	r2, r6
    e324:	f363 0200 	bfi	r2, r3, #0, #1
	buf->len  = 0U;
    e328:	2300      	movs	r3, #0
    e32a:	f888 2014 	strb.w	r2, [r8, #20]
    e32e:	80a3      	strh	r3, [r4, #4]
	buf->data = buf->__buf;
    e330:	68a3      	ldr	r3, [r4, #8]
    e332:	6023      	str	r3, [r4, #0]
	net_buf_simple_add_mem(out, in->data, in->len);
    e334:	888a      	ldrh	r2, [r1, #4]
    e336:	6809      	ldr	r1, [r1, #0]
    e338:	4620      	mov	r0, r4
    e33a:	f01e fb52 	bl	2c9e2 <net_buf_simple_add_mem>
	if (bt_mesh_net_obfuscate(out->data, BT_MESH_NET_IVI_RX(rx),
    e33e:	f898 3014 	ldrb.w	r3, [r8, #20]
    e342:	6829      	ldr	r1, [r5, #0]
    e344:	6820      	ldr	r0, [r4, #0]
    e346:	f003 0301 	and.w	r3, r3, #1
    e34a:	f107 0211 	add.w	r2, r7, #17
    e34e:	1ac9      	subs	r1, r1, r3
    e350:	f01c fb59 	bl	2aa06 <bt_mesh_net_obfuscate>
    e354:	2800      	cmp	r0, #0
    e356:	d1d9      	bne.n	e30c <net_decrypt+0x18>
	rx->ctx.addr = SRC(out->data);
    e358:	6823      	ldr	r3, [r4, #0]
    e35a:	7959      	ldrb	r1, [r3, #5]
    e35c:	799a      	ldrb	r2, [r3, #6]
    e35e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    e362:	b212      	sxth	r2, r2
    e364:	b290      	uxth	r0, r2
	if (!BT_MESH_ADDR_IS_UNICAST(rx->ctx.addr)) {
    e366:	2a00      	cmp	r2, #0
	rx->ctx.addr = SRC(out->data);
    e368:	f8a8 0008 	strh.w	r0, [r8, #8]
	if (!BT_MESH_ADDR_IS_UNICAST(rx->ctx.addr)) {
    e36c:	ddce      	ble.n	e30c <net_decrypt+0x18>
	if (bt_mesh_elem_find(rx->ctx.addr)) {
    e36e:	f003 fe2d 	bl	11fcc <bt_mesh_elem_find>
    e372:	2800      	cmp	r0, #0
    e374:	d1ca      	bne.n	e30c <net_decrypt+0x18>
	if (rx->net_if == BT_MESH_NET_IF_ADV && msg_cache_match(out)) {
    e376:	f898 8014 	ldrb.w	r8, [r8, #20]
    e37a:	f018 0130 	ands.w	r1, r8, #48	; 0x30
    e37e:	d11c      	bne.n	e3ba <net_decrypt+0xc6>
		if (msg_cache[i].src == SRC(pdu->data) &&
    e380:	6823      	ldr	r3, [r4, #0]
    e382:	f8df b060 	ldr.w	fp, [pc, #96]	; e3e4 <net_decrypt+0xf0>
    e386:	795a      	ldrb	r2, [r3, #5]
    e388:	f893 a006 	ldrb.w	sl, [r3, #6]
		    msg_cache[i].seq == (SEQ(pdu->data) & BIT_MASK(17))) {
    e38c:	f103 0902 	add.w	r9, r3, #2
		if (msg_cache[i].src == SRC(pdu->data) &&
    e390:	ea4a 2a02 	orr.w	sl, sl, r2, lsl #8
    e394:	f83b 3021 	ldrh.w	r3, [fp, r1, lsl #2]
    e398:	f3c3 030e 	ubfx	r3, r3, #0, #15
    e39c:	4553      	cmp	r3, sl
    e39e:	d109      	bne.n	e3b4 <net_decrypt+0xc0>
		    msg_cache[i].seq == (SEQ(pdu->data) & BIT_MASK(17))) {
    e3a0:	4648      	mov	r0, r9
    e3a2:	f01c f80a 	bl	2a3ba <sys_get_be24>
    e3a6:	f85b 3021 	ldr.w	r3, [fp, r1, lsl #2]
    e3aa:	f3c0 0010 	ubfx	r0, r0, #0, #17
		if (msg_cache[i].src == SRC(pdu->data) &&
    e3ae:	ebb0 3fd3 	cmp.w	r0, r3, lsr #15
    e3b2:	d0ab      	beq.n	e30c <net_decrypt+0x18>
    e3b4:	3101      	adds	r1, #1
	for (i = 0U; i < ARRAY_SIZE(msg_cache); i++) {
    e3b6:	290a      	cmp	r1, #10
    e3b8:	d1ec      	bne.n	e394 <net_decrypt+0xa0>
	bool proxy = (rx->net_if == BT_MESH_NET_IF_PROXY_CFG);
    e3ba:	f006 0330 	and.w	r3, r6, #48	; 0x30
	return bt_mesh_net_decrypt(cred->enc, out, BT_MESH_NET_IVI_RX(rx),
    e3be:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    e3c2:	682a      	ldr	r2, [r5, #0]
    e3c4:	424b      	negs	r3, r1
    e3c6:	f008 0801 	and.w	r8, r8, #1
    e3ca:	414b      	adcs	r3, r1
    e3cc:	eba2 0208 	sub.w	r2, r2, r8
    e3d0:	4621      	mov	r1, r4
    e3d2:	1c78      	adds	r0, r7, #1
    e3d4:	f01c fb98 	bl	2ab08 <bt_mesh_net_decrypt>
				   proxy) == 0;
    e3d8:	fab0 f080 	clz	r0, r0
    e3dc:	0940      	lsrs	r0, r0, #5
    e3de:	e796      	b.n	e30e <net_decrypt+0x1a>
    e3e0:	20001dd8 	.word	0x20001dd8
    e3e4:	20002d8c 	.word	0x20002d8c

0000e3e8 <seq_set>:

BT_MESH_SETTINGS_DEFINE(iv, "IV", iv_set);

static int seq_set(const char *name, size_t len_rd, settings_read_cb read_cb,
		   void *cb_arg)
{
    e3e8:	b513      	push	{r0, r1, r4, lr}
    e3ea:	4610      	mov	r0, r2
    e3ec:	461c      	mov	r4, r3
	struct seq_val seq;
	int err;

	if (len_rd == 0) {
    e3ee:	b929      	cbnz	r1, e3fc <seq_set+0x14>
		BT_DBG("val (null)");

		bt_mesh.seq = 0U;
    e3f0:	4b10      	ldr	r3, [pc, #64]	; (e434 <seq_set+0x4c>)
		return 0;
    e3f2:	460c      	mov	r4, r1
		bt_mesh.seq = 0U;
    e3f4:	6059      	str	r1, [r3, #4]
	}

	BT_DBG("Sequence Number 0x%06x", bt_mesh.seq);

	return 0;
}
    e3f6:	4620      	mov	r0, r4
    e3f8:	b002      	add	sp, #8
    e3fa:	bd10      	pop	{r4, pc}
	err = bt_mesh_settings_set(read_cb, cb_arg, &seq, sizeof(seq));
    e3fc:	4621      	mov	r1, r4
    e3fe:	2303      	movs	r3, #3
    e400:	aa01      	add	r2, sp, #4
    e402:	f006 f919 	bl	14638 <bt_mesh_settings_set>
	if (err) {
    e406:	4604      	mov	r4, r0
    e408:	b120      	cbz	r0, e414 <seq_set+0x2c>
		BT_ERR("Failed to set \'seq\'");
    e40a:	2145      	movs	r1, #69	; 0x45
    e40c:	480a      	ldr	r0, [pc, #40]	; (e438 <seq_set+0x50>)
    e40e:	f018 fdae 	bl	26f6e <printk>
		return err;
    e412:	e7f0      	b.n	e3f6 <seq_set+0xe>
	return ((uint16_t)src[1] << 8) | src[0];
    e414:	f89d 2005 	ldrb.w	r2, [sp, #5]
    e418:	f89d 3004 	ldrb.w	r3, [sp, #4]
	return ((uint32_t)src[2] << 16) | sys_get_le16(&src[0]);
    e41c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    e420:	f89d 2006 	ldrb.w	r2, [sp, #6]
    e424:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
		bt_mesh.seq += (CONFIG_BT_MESH_SEQ_STORE_RATE -
    e428:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
		bt_mesh.seq--;
    e42c:	4a01      	ldr	r2, [pc, #4]	; (e434 <seq_set+0x4c>)
    e42e:	337f      	adds	r3, #127	; 0x7f
    e430:	6053      	str	r3, [r2, #4]
	return 0;
    e432:	e7e0      	b.n	e3f6 <seq_set+0xe>
    e434:	20001dd8 	.word	0x20001dd8
    e438:	00031ff1 	.word	0x00031ff1

0000e43c <net_set>:
{
    e43c:	b570      	push	{r4, r5, r6, lr}
    e43e:	4610      	mov	r0, r2
    e440:	b086      	sub	sp, #24
    e442:	461d      	mov	r5, r3
	if (len_rd == 0) {
    e444:	460c      	mov	r4, r1
    e446:	b949      	cbnz	r1, e45c <net_set+0x20>
		bt_mesh_comp_unprovision();
    e448:	f003 fdb4 	bl	11fb4 <bt_mesh_comp_unprovision>
		(void)memset(bt_mesh.dev_key, 0, sizeof(bt_mesh.dev_key));
    e44c:	2210      	movs	r2, #16
    e44e:	4621      	mov	r1, r4
    e450:	4811      	ldr	r0, [pc, #68]	; (e498 <net_set+0x5c>)
    e452:	f01f f8d2 	bl	2d5fa <memset>
}
    e456:	4620      	mov	r0, r4
    e458:	b006      	add	sp, #24
    e45a:	bd70      	pop	{r4, r5, r6, pc}
	err = bt_mesh_settings_set(read_cb, cb_arg, &net, sizeof(net));
    e45c:	2312      	movs	r3, #18
    e45e:	aa01      	add	r2, sp, #4
    e460:	4629      	mov	r1, r5
    e462:	f006 f8e9 	bl	14638 <bt_mesh_settings_set>
	if (err) {
    e466:	4604      	mov	r4, r0
    e468:	b120      	cbz	r0, e474 <net_set+0x38>
		BT_ERR("Failed to set \'net\'");
    e46a:	2145      	movs	r1, #69	; 0x45
    e46c:	480b      	ldr	r0, [pc, #44]	; (e49c <net_set+0x60>)
    e46e:	f018 fd7e 	bl	26f6e <printk>
		return err;
    e472:	e7f0      	b.n	e456 <net_set+0x1a>
	memcpy(bt_mesh.dev_key, net.dev_key, sizeof(bt_mesh.dev_key));
    e474:	4d08      	ldr	r5, [pc, #32]	; (e498 <net_set+0x5c>)
    e476:	f10d 0306 	add.w	r3, sp, #6
    e47a:	f10d 0616 	add.w	r6, sp, #22
    e47e:	6818      	ldr	r0, [r3, #0]
    e480:	6859      	ldr	r1, [r3, #4]
    e482:	462a      	mov	r2, r5
    e484:	c203      	stmia	r2!, {r0, r1}
    e486:	3308      	adds	r3, #8
    e488:	42b3      	cmp	r3, r6
    e48a:	4615      	mov	r5, r2
    e48c:	d1f7      	bne.n	e47e <net_set+0x42>
	bt_mesh_comp_provision(net.primary_addr);
    e48e:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    e492:	f003 fd79 	bl	11f88 <bt_mesh_comp_provision>
	return 0;
    e496:	e7de      	b.n	e456 <net_set+0x1a>
    e498:	20002000 	.word	0x20002000
    e49c:	00031fd8 	.word	0x00031fd8

0000e4a0 <atomic_test_bit.constprop.12>:
    e4a0:	4b05      	ldr	r3, [pc, #20]	; (e4b8 <atomic_test_bit.constprop.12+0x18>)
    e4a2:	f3bf 8f5b 	dmb	ish
    e4a6:	689b      	ldr	r3, [r3, #8]
    e4a8:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    e4ac:	fa43 f000 	asr.w	r0, r3, r0
}
    e4b0:	f000 0001 	and.w	r0, r0, #1
    e4b4:	4770      	bx	lr
    e4b6:	bf00      	nop
    e4b8:	20001dd8 	.word	0x20001dd8

0000e4bc <atomic_set_bit_to.constprop.13>:
	if (val) {
    e4bc:	4b0b      	ldr	r3, [pc, #44]	; (e4ec <atomic_set_bit_to.constprop.13+0x30>)
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    e4be:	f3bf 8f5b 	dmb	ish
	if (val) {
    e4c2:	b150      	cbz	r0, e4da <atomic_set_bit_to.constprop.13+0x1e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    e4c4:	e853 2f00 	ldrex	r2, [r3]
    e4c8:	f042 0204 	orr.w	r2, r2, #4
    e4cc:	e843 2100 	strex	r1, r2, [r3]
    e4d0:	2900      	cmp	r1, #0
    e4d2:	d1f7      	bne.n	e4c4 <atomic_set_bit_to.constprop.13+0x8>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    e4d4:	f3bf 8f5b 	dmb	ish
	}
}
    e4d8:	4770      	bx	lr
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    e4da:	e853 2f00 	ldrex	r2, [r3]
    e4de:	f022 0204 	bic.w	r2, r2, #4
    e4e2:	e843 2100 	strex	r1, r2, [r3]
    e4e6:	2900      	cmp	r1, #0
    e4e8:	d0f4      	beq.n	e4d4 <atomic_set_bit_to.constprop.13+0x18>
    e4ea:	e7f6      	b.n	e4da <atomic_set_bit_to.constprop.13+0x1e>
    e4ec:	20001de0 	.word	0x20001de0

0000e4f0 <iv_set>:
{
    e4f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    e4f2:	4610      	mov	r0, r2
    e4f4:	461c      	mov	r4, r3
	if (len_rd == 0) {
    e4f6:	b991      	cbnz	r1, e51e <iv_set+0x2e>
		bt_mesh.iv_index = 0U;
    e4f8:	4b17      	ldr	r3, [pc, #92]	; (e558 <iv_set+0x68>)
    e4fa:	f843 1b08 	str.w	r1, [r3], #8
    e4fe:	f3bf 8f5b 	dmb	ish
    e502:	e853 2f00 	ldrex	r2, [r3]
    e506:	f022 0204 	bic.w	r2, r2, #4
    e50a:	e843 2000 	strex	r0, r2, [r3]
    e50e:	2800      	cmp	r0, #0
    e510:	d1f7      	bne.n	e502 <iv_set+0x12>
    e512:	f3bf 8f5b 	dmb	ish
    e516:	460c      	mov	r4, r1
}
    e518:	4620      	mov	r0, r4
    e51a:	b003      	add	sp, #12
    e51c:	bd30      	pop	{r4, r5, pc}
	err = bt_mesh_settings_set(read_cb, cb_arg, &iv, sizeof(iv));
    e51e:	4621      	mov	r1, r4
    e520:	2305      	movs	r3, #5
    e522:	466a      	mov	r2, sp
    e524:	f006 f888 	bl	14638 <bt_mesh_settings_set>
	if (err) {
    e528:	4604      	mov	r4, r0
    e52a:	b120      	cbz	r0, e536 <iv_set+0x46>
		BT_ERR("Failed to set \'iv\'");
    e52c:	2145      	movs	r1, #69	; 0x45
    e52e:	480b      	ldr	r0, [pc, #44]	; (e55c <iv_set+0x6c>)
    e530:	f018 fd1d 	bl	26f6e <printk>
		return err;
    e534:	e7f0      	b.n	e518 <iv_set+0x28>
	atomic_set_bit_to(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS, iv.iv_update);
    e536:	f89d 0004 	ldrb.w	r0, [sp, #4]
	bt_mesh.iv_index = iv.iv_index;
    e53a:	4d07      	ldr	r5, [pc, #28]	; (e558 <iv_set+0x68>)
    e53c:	9b00      	ldr	r3, [sp, #0]
    e53e:	602b      	str	r3, [r5, #0]
	atomic_set_bit_to(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS, iv.iv_update);
    e540:	f000 0001 	and.w	r0, r0, #1
    e544:	f7ff ffba 	bl	e4bc <atomic_set_bit_to.constprop.13>
	bt_mesh.ivu_duration = iv.iv_duration;
    e548:	f89d 3004 	ldrb.w	r3, [sp, #4]
    e54c:	f3c3 0346 	ubfx	r3, r3, #1, #7
    e550:	f885 31f0 	strb.w	r3, [r5, #496]	; 0x1f0
	return 0;
    e554:	e7e0      	b.n	e518 <iv_set+0x28>
    e556:	bf00      	nop
    e558:	20001dd8 	.word	0x20001dd8
    e55c:	00031f74 	.word	0x00031f74

0000e560 <bt_mesh_net_create>:
{
    e560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e564:	460d      	mov	r5, r1
    e566:	4698      	mov	r8, r3
	if (BT_MESH_KEY_REFRESH(flags)) {
    e568:	f015 0301 	ands.w	r3, r5, #1
{
    e56c:	4611      	mov	r1, r2
		err = bt_mesh_subnet_set(idx, BT_MESH_KR_PHASE_2, NULL, key);
    e56e:	bf1d      	ittte	ne
    e570:	4613      	movne	r3, r2
    e572:	2102      	movne	r1, #2
    e574:	2200      	movne	r2, #0
		err = bt_mesh_subnet_set(idx, BT_MESH_KR_NORMAL, key, NULL);
    e576:	4619      	moveq	r1, r3
{
    e578:	4607      	mov	r7, r0
		err = bt_mesh_subnet_set(idx, BT_MESH_KR_NORMAL, key, NULL);
    e57a:	f000 fe95 	bl	f2a8 <bt_mesh_subnet_set>
    e57e:	4604      	mov	r4, r0
	if (err) {
    e580:	b130      	cbz	r0, e590 <bt_mesh_net_create+0x30>
		BT_ERR("Failed creating subnet");
    e582:	2145      	movs	r1, #69	; 0x45
    e584:	4810      	ldr	r0, [pc, #64]	; (e5c8 <bt_mesh_net_create+0x68>)
    e586:	f018 fcf2 	bl	26f6e <printk>
}
    e58a:	4620      	mov	r0, r4
    e58c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	(void)memset(msg_cache, 0, sizeof(msg_cache));
    e590:	4601      	mov	r1, r0
    e592:	2228      	movs	r2, #40	; 0x28
    e594:	480d      	ldr	r0, [pc, #52]	; (e5cc <bt_mesh_net_create+0x6c>)
	bt_mesh.iv_index = iv_index;
    e596:	4e0e      	ldr	r6, [pc, #56]	; (e5d0 <bt_mesh_net_create+0x70>)
	(void)memset(msg_cache, 0, sizeof(msg_cache));
    e598:	f01f f82f 	bl	2d5fa <memset>
	msg_cache_next = 0U;
    e59c:	4b0d      	ldr	r3, [pc, #52]	; (e5d4 <bt_mesh_net_create+0x74>)
	bt_mesh.iv_index = iv_index;
    e59e:	f8c6 8000 	str.w	r8, [r6]
	atomic_set_bit_to(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS,
    e5a2:	f3c5 0040 	ubfx	r0, r5, #1, #1
	msg_cache_next = 0U;
    e5a6:	801c      	strh	r4, [r3, #0]
	atomic_set_bit_to(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS,
    e5a8:	f7ff ff88 	bl	e4bc <atomic_set_bit_to.constprop.13>
	bt_mesh.ivu_duration = BT_MESH_IVU_MIN_HOURS;
    e5ac:	2360      	movs	r3, #96	; 0x60
		bt_mesh_subnet_store(idx);
    e5ae:	4638      	mov	r0, r7
	bt_mesh.ivu_duration = BT_MESH_IVU_MIN_HOURS;
    e5b0:	f886 31f0 	strb.w	r3, [r6, #496]	; 0x1f0
		bt_mesh_subnet_store(idx);
    e5b4:	f01b ff4f 	bl	2a456 <bt_mesh_subnet_store>
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_IV_PENDING);
    e5b8:	2004      	movs	r0, #4
    e5ba:	f006 f85f 	bl	1467c <bt_mesh_settings_store_schedule>
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_SEQ_PENDING);
    e5be:	2005      	movs	r0, #5
    e5c0:	f006 f85c 	bl	1467c <bt_mesh_settings_store_schedule>
    e5c4:	e7e1      	b.n	e58a <bt_mesh_net_create+0x2a>
    e5c6:	bf00      	nop
    e5c8:	00031c57 	.word	0x00031c57
    e5cc:	20002d8c 	.word	0x20002d8c
    e5d0:	20001dd8 	.word	0x20001dd8
    e5d4:	200046ac 	.word	0x200046ac

0000e5d8 <bt_mesh_net_iv_update>:
{
    e5d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e5da:	4606      	mov	r6, r0
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS)) {
    e5dc:	2002      	movs	r0, #2
{
    e5de:	460c      	mov	r4, r1
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS)) {
    e5e0:	f7ff ff5e 	bl	e4a0 <atomic_test_bit.constprop.12>
    e5e4:	4d3d      	ldr	r5, [pc, #244]	; (e6dc <bt_mesh_net_iv_update+0x104>)
    e5e6:	4607      	mov	r7, r0
		if (iv_index != bt_mesh.iv_index) {
    e5e8:	682b      	ldr	r3, [r5, #0]
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS)) {
    e5ea:	b160      	cbz	r0, e606 <bt_mesh_net_iv_update+0x2e>
		if (iv_index != bt_mesh.iv_index) {
    e5ec:	42b3      	cmp	r3, r6
    e5ee:	d005      	beq.n	e5fc <bt_mesh_net_iv_update+0x24>
			BT_WARN("IV Index mismatch: 0x%08x != 0x%08x",
    e5f0:	483b      	ldr	r0, [pc, #236]	; (e6e0 <bt_mesh_net_iv_update+0x108>)
    e5f2:	4632      	mov	r2, r6
    e5f4:	2157      	movs	r1, #87	; 0x57
			BT_ERR("IV Index out of sync: 0x%08x != 0x%08x",
    e5f6:	f018 fcba 	bl	26f6e <printk>
    e5fa:	e001      	b.n	e600 <bt_mesh_net_iv_update+0x28>
		if (iv_update) {
    e5fc:	2900      	cmp	r1, #0
    e5fe:	d048      	beq.n	e692 <bt_mesh_net_iv_update+0xba>
			return false;
    e600:	2400      	movs	r4, #0
}
    e602:	4620      	mov	r0, r4
    e604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (iv_index == bt_mesh.iv_index) {
    e606:	42b3      	cmp	r3, r6
    e608:	d066      	beq.n	e6d8 <bt_mesh_net_iv_update+0x100>
		if (iv_index < bt_mesh.iv_index ||
    e60a:	d803      	bhi.n	e614 <bt_mesh_net_iv_update+0x3c>
		    iv_index > bt_mesh.iv_index + 42) {
    e60c:	f103 022a 	add.w	r2, r3, #42	; 0x2a
		if (iv_index < bt_mesh.iv_index ||
    e610:	42b2      	cmp	r2, r6
    e612:	d203      	bcs.n	e61c <bt_mesh_net_iv_update+0x44>
			BT_ERR("IV Index out of sync: 0x%08x != 0x%08x",
    e614:	4632      	mov	r2, r6
    e616:	2145      	movs	r1, #69	; 0x45
    e618:	4832      	ldr	r0, [pc, #200]	; (e6e4 <bt_mesh_net_iv_update+0x10c>)
    e61a:	e7ec      	b.n	e5f6 <bt_mesh_net_iv_update+0x1e>
		if (iv_index > bt_mesh.iv_index + 1) {
    e61c:	3301      	adds	r3, #1
    e61e:	42b3      	cmp	r3, r6
    e620:	d22e      	bcs.n	e680 <bt_mesh_net_iv_update+0xa8>
			BT_WARN("Performing IV Index Recovery");
    e622:	2157      	movs	r1, #87	; 0x57
    e624:	4830      	ldr	r0, [pc, #192]	; (e6e8 <bt_mesh_net_iv_update+0x110>)
    e626:	f018 fca2 	bl	26f6e <printk>
			bt_mesh_rpl_clear();
    e62a:	f01c f95d 	bl	2a8e8 <bt_mesh_rpl_clear>
			bt_mesh.seq = 0U;
    e62e:	e9c5 6700 	strd	r6, r7, [r5]
	atomic_set_bit_to(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS, iv_update);
    e632:	4620      	mov	r0, r4
    e634:	f7ff ff42 	bl	e4bc <atomic_set_bit_to.constprop.13>
	bt_mesh.ivu_duration = 0U;
    e638:	2300      	movs	r3, #0
    e63a:	f885 31f0 	strb.w	r3, [r5, #496]	; 0x1f0
	if (iv_update) {
    e63e:	2c00      	cmp	r4, #0
    e640:	d048      	beq.n	e6d4 <bt_mesh_net_iv_update+0xfc>
		bt_mesh.iv_index = iv_index;
    e642:	602e      	str	r6, [r5, #0]
		bt_mesh_rpl_reset();
    e644:	f002 fd0a 	bl	1105c <bt_mesh_rpl_reset>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    e648:	4a28      	ldr	r2, [pc, #160]	; (e6ec <bt_mesh_net_iv_update+0x114>)
    e64a:	4929      	ldr	r1, [pc, #164]	; (e6f0 <bt_mesh_net_iv_update+0x118>)
    e64c:	4829      	ldr	r0, [pc, #164]	; (e6f4 <bt_mesh_net_iv_update+0x11c>)
    e64e:	2300      	movs	r3, #0
    e650:	f015 fba2 	bl	23d98 <k_delayed_work_submit_to_queue>
		bt_mesh_friend_sec_update(BT_MESH_KEY_ANY);
    e654:	f64f 70ff 	movw	r0, #65535	; 0xffff
    e658:	f006 fcf0 	bl	1503c <bt_mesh_friend_sec_update>
	    bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED) {
    e65c:	f01b fe4a 	bl	2a2f4 <bt_mesh_gatt_proxy_get>
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    e660:	2801      	cmp	r0, #1
    e662:	d102      	bne.n	e66a <bt_mesh_net_iv_update+0x92>
		bt_mesh_proxy_beacon_send(NULL);
    e664:	2000      	movs	r0, #0
    e666:	f008 ff83 	bl	17570 <bt_mesh_proxy_beacon_send>
	bt_mesh_subnet_foreach(bt_mesh_beacon_update);
    e66a:	4823      	ldr	r0, [pc, #140]	; (e6f8 <bt_mesh_net_iv_update+0x120>)
    e66c:	f000 fe94 	bl	f398 <bt_mesh_subnet_foreach>
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_IV_PENDING);
    e670:	2004      	movs	r0, #4
    e672:	f006 f803 	bl	1467c <bt_mesh_settings_store_schedule>
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_SEQ_PENDING);
    e676:	2005      	movs	r0, #5
    e678:	f006 f800 	bl	1467c <bt_mesh_settings_store_schedule>
	return true;
    e67c:	2401      	movs	r4, #1
    e67e:	e7c0      	b.n	e602 <bt_mesh_net_iv_update+0x2a>
		if (iv_index == bt_mesh.iv_index + 1 && !iv_update) {
    e680:	d105      	bne.n	e68e <bt_mesh_net_iv_update+0xb6>
    e682:	b931      	cbnz	r1, e692 <bt_mesh_net_iv_update+0xba>
			BT_WARN("Ignoring new index in normal mode");
    e684:	2157      	movs	r1, #87	; 0x57
    e686:	481d      	ldr	r0, [pc, #116]	; (e6fc <bt_mesh_net_iv_update+0x124>)
    e688:	f018 fc71 	bl	26f6e <printk>
			return false;
    e68c:	e7b9      	b.n	e602 <bt_mesh_net_iv_update+0x2a>
		if (!iv_update) {
    e68e:	2900      	cmp	r1, #0
    e690:	d0b7      	beq.n	e602 <bt_mesh_net_iv_update+0x2a>
		if (bt_mesh.ivu_duration < BT_MESH_IVU_MIN_HOURS) {
    e692:	f895 31f0 	ldrb.w	r3, [r5, #496]	; 0x1f0
    e696:	2b5f      	cmp	r3, #95	; 0x5f
    e698:	d804      	bhi.n	e6a4 <bt_mesh_net_iv_update+0xcc>
			BT_WARN("IV Update before minimum duration");
    e69a:	2157      	movs	r1, #87	; 0x57
    e69c:	4818      	ldr	r0, [pc, #96]	; (e700 <bt_mesh_net_iv_update+0x128>)
    e69e:	f018 fc66 	bl	26f6e <printk>
			return false;
    e6a2:	e7ad      	b.n	e600 <bt_mesh_net_iv_update+0x28>
	if (!iv_update && bt_mesh_tx_in_progress()) {
    e6a4:	2c00      	cmp	r4, #0
    e6a6:	d1c4      	bne.n	e632 <bt_mesh_net_iv_update+0x5a>
    e6a8:	f001 fe96 	bl	103d8 <bt_mesh_tx_in_progress>
    e6ac:	2800      	cmp	r0, #0
    e6ae:	d0c0      	beq.n	e632 <bt_mesh_net_iv_update+0x5a>
		BT_WARN("IV Update deferred because of pending transfer");
    e6b0:	2157      	movs	r1, #87	; 0x57
    e6b2:	4814      	ldr	r0, [pc, #80]	; (e704 <bt_mesh_net_iv_update+0x12c>)
    e6b4:	f018 fc5b 	bl	26f6e <printk>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    e6b8:	f3bf 8f5b 	dmb	ish
    e6bc:	4b12      	ldr	r3, [pc, #72]	; (e708 <bt_mesh_net_iv_update+0x130>)
    e6be:	e853 2f00 	ldrex	r2, [r3]
    e6c2:	f042 0220 	orr.w	r2, r2, #32
    e6c6:	e843 2100 	strex	r1, r2, [r3]
    e6ca:	2900      	cmp	r1, #0
    e6cc:	d1f7      	bne.n	e6be <bt_mesh_net_iv_update+0xe6>
    e6ce:	f3bf 8f5b 	dmb	ish
    e6d2:	e796      	b.n	e602 <bt_mesh_net_iv_update+0x2a>
		bt_mesh.seq = 0U;
    e6d4:	606c      	str	r4, [r5, #4]
    e6d6:	e7b7      	b.n	e648 <bt_mesh_net_iv_update+0x70>
			return false;
    e6d8:	4604      	mov	r4, r0
    e6da:	e792      	b.n	e602 <bt_mesh_net_iv_update+0x2a>
    e6dc:	20001dd8 	.word	0x20001dd8
    e6e0:	00031d0c 	.word	0x00031d0c
    e6e4:	00031d35 	.word	0x00031d35
    e6e8:	00031d61 	.word	0x00031d61
    e6ec:	a8c00000 	.word	0xa8c00000
    e6f0:	20001fd0 	.word	0x20001fd0
    e6f4:	20002490 	.word	0x20002490
    e6f8:	0000dfa9 	.word	0x0000dfa9
    e6fc:	00031d83 	.word	0x00031d83
    e700:	00031daa 	.word	0x00031daa
    e704:	00031dd1 	.word	0x00031dd1
    e708:	20001de0 	.word	0x20001de0

0000e70c <ivu_refresh>:
{
    e70c:	b510      	push	{r4, lr}
	bt_mesh.ivu_duration = MIN(UINT8_MAX,
    e70e:	4c15      	ldr	r4, [pc, #84]	; (e764 <ivu_refresh+0x58>)
    e710:	f894 31f0 	ldrb.w	r3, [r4, #496]	; 0x1f0
    e714:	3318      	adds	r3, #24
    e716:	2bff      	cmp	r3, #255	; 0xff
    e718:	461a      	mov	r2, r3
    e71a:	bfa8      	it	ge
    e71c:	22ff      	movge	r2, #255	; 0xff
	if (bt_mesh.ivu_duration < BT_MESH_IVU_MIN_HOURS) {
    e71e:	2b5f      	cmp	r3, #95	; 0x5f
	bt_mesh.ivu_duration = MIN(UINT8_MAX,
    e720:	f884 21f0 	strb.w	r2, [r4, #496]	; 0x1f0
	if (bt_mesh.ivu_duration < BT_MESH_IVU_MIN_HOURS) {
    e724:	dc0b      	bgt.n	e73e <ivu_refresh+0x32>
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_IV_PENDING);
    e726:	2004      	movs	r0, #4
    e728:	f005 ffa8 	bl	1467c <bt_mesh_settings_store_schedule>
    e72c:	f504 71fc 	add.w	r1, r4, #504	; 0x1f8
    e730:	4a0d      	ldr	r2, [pc, #52]	; (e768 <ivu_refresh+0x5c>)
    e732:	480e      	ldr	r0, [pc, #56]	; (e76c <ivu_refresh+0x60>)
    e734:	2300      	movs	r3, #0
}
    e736:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e73a:	f015 bb2d 	b.w	23d98 <k_delayed_work_submit_to_queue>
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS)) {
    e73e:	2002      	movs	r0, #2
    e740:	f7ff feae 	bl	e4a0 <atomic_test_bit.constprop.12>
    e744:	b140      	cbz	r0, e758 <ivu_refresh+0x4c>
		bt_mesh_beacon_ivu_initiator(true);
    e746:	2001      	movs	r0, #1
    e748:	f7ff fc64 	bl	e014 <bt_mesh_beacon_ivu_initiator>
		bt_mesh_net_iv_update(bt_mesh.iv_index, false);
    e74c:	6820      	ldr	r0, [r4, #0]
    e74e:	2100      	movs	r1, #0
}
    e750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_mesh_net_iv_update(bt_mesh.iv_index, false);
    e754:	f7ff bf40 	b.w	e5d8 <bt_mesh_net_iv_update>
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_IV_PENDING);
    e758:	2004      	movs	r0, #4
}
    e75a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_IV_PENDING);
    e75e:	f005 bf8d 	b.w	1467c <bt_mesh_settings_store_schedule>
    e762:	bf00      	nop
    e764:	20001dd8 	.word	0x20001dd8
    e768:	a8c00000 	.word	0xa8c00000
    e76c:	20002490 	.word	0x20002490

0000e770 <bt_mesh_next_seq>:
{
    e770:	b538      	push	{r3, r4, r5, lr}
	uint32_t seq = bt_mesh.seq++;
    e772:	4c0f      	ldr	r4, [pc, #60]	; (e7b0 <bt_mesh_next_seq+0x40>)
    e774:	6865      	ldr	r5, [r4, #4]
    e776:	1c6a      	adds	r2, r5, #1
	if (CONFIG_BT_MESH_SEQ_STORE_RATE &&
    e778:	0653      	lsls	r3, r2, #25
	uint32_t seq = bt_mesh.seq++;
    e77a:	6062      	str	r2, [r4, #4]
	if (CONFIG_BT_MESH_SEQ_STORE_RATE &&
    e77c:	d102      	bne.n	e784 <bt_mesh_next_seq+0x14>
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_SEQ_PENDING);
    e77e:	2005      	movs	r0, #5
    e780:	f005 ff7c 	bl	1467c <bt_mesh_settings_store_schedule>
	if (!atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS) &&
    e784:	2002      	movs	r0, #2
    e786:	f7ff fe8b 	bl	e4a0 <atomic_test_bit.constprop.12>
    e78a:	b970      	cbnz	r0, e7aa <bt_mesh_next_seq+0x3a>
    e78c:	6862      	ldr	r2, [r4, #4]
    e78e:	4b09      	ldr	r3, [pc, #36]	; (e7b4 <bt_mesh_next_seq+0x44>)
    e790:	429a      	cmp	r2, r3
    e792:	d90a      	bls.n	e7aa <bt_mesh_next_seq+0x3a>
	    bt_mesh_subnet_get(BT_MESH_KEY_PRIMARY)) {
    e794:	f01b ff2b 	bl	2a5ee <bt_mesh_subnet_get>
	    bt_mesh.seq > IV_UPDATE_SEQ_LIMIT &&
    e798:	b138      	cbz	r0, e7aa <bt_mesh_next_seq+0x3a>
		bt_mesh_beacon_ivu_initiator(true);
    e79a:	2001      	movs	r0, #1
    e79c:	f7ff fc3a 	bl	e014 <bt_mesh_beacon_ivu_initiator>
		bt_mesh_net_iv_update(bt_mesh.iv_index + 1, true);
    e7a0:	6820      	ldr	r0, [r4, #0]
    e7a2:	2101      	movs	r1, #1
    e7a4:	4408      	add	r0, r1
    e7a6:	f7ff ff17 	bl	e5d8 <bt_mesh_net_iv_update>
}
    e7aa:	4628      	mov	r0, r5
    e7ac:	bd38      	pop	{r3, r4, r5, pc}
    e7ae:	bf00      	nop
    e7b0:	20001dd8 	.word	0x20001dd8
    e7b4:	007a1200 	.word	0x007a1200

0000e7b8 <net_header_encode>:
{
    e7b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const bool ctl = (tx->ctx->app_idx == BT_MESH_KEY_UNUSED);
    e7ba:	6843      	ldr	r3, [r0, #4]
    e7bc:	885f      	ldrh	r7, [r3, #2]
	if (ctl && net_buf_simple_tailroom(buf) < 8) {
    e7be:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e7c2:	429f      	cmp	r7, r3
{
    e7c4:	4605      	mov	r5, r0
    e7c6:	460e      	mov	r6, r1
    e7c8:	4614      	mov	r4, r2
	if (ctl && net_buf_simple_tailroom(buf) < 8) {
    e7ca:	d10b      	bne.n	e7e4 <net_header_encode+0x2c>
    e7cc:	4610      	mov	r0, r2
    e7ce:	f01e f900 	bl	2c9d2 <net_buf_simple_tailroom>
    e7d2:	2807      	cmp	r0, #7
    e7d4:	d806      	bhi.n	e7e4 <net_header_encode+0x2c>
		BT_ERR("Insufficient MIC space for CTL PDU");
    e7d6:	481b      	ldr	r0, [pc, #108]	; (e844 <net_header_encode+0x8c>)
    e7d8:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Insufficient MIC space for PDU");
    e7da:	f018 fbc8 	bl	26f6e <printk>
		return -EINVAL;
    e7de:	f06f 0015 	mvn.w	r0, #21
}
    e7e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if (net_buf_simple_tailroom(buf) < 4) {
    e7e4:	4620      	mov	r0, r4
    e7e6:	f01e f8f4 	bl	2c9d2 <net_buf_simple_tailroom>
    e7ea:	2803      	cmp	r0, #3
    e7ec:	d802      	bhi.n	e7f4 <net_header_encode+0x3c>
		BT_ERR("Insufficient MIC space for PDU");
    e7ee:	2145      	movs	r1, #69	; 0x45
    e7f0:	4815      	ldr	r0, [pc, #84]	; (e848 <net_header_encode+0x90>)
    e7f2:	e7f2      	b.n	e7da <net_header_encode+0x22>
	net_buf_simple_push_be16(buf, tx->ctx->addr);
    e7f4:	686b      	ldr	r3, [r5, #4]
    e7f6:	4620      	mov	r0, r4
    e7f8:	8899      	ldrh	r1, [r3, #4]
    e7fa:	f01e f890 	bl	2c91e <net_buf_simple_push_be16>
	net_buf_simple_push_be16(buf, tx->src);
    e7fe:	8929      	ldrh	r1, [r5, #8]
    e800:	4620      	mov	r0, r4
    e802:	f01e f88c 	bl	2c91e <net_buf_simple_push_be16>
	net_buf_simple_push_be24(buf, bt_mesh_next_seq());
    e806:	f7ff ffb3 	bl	e770 <bt_mesh_next_seq>
    e80a:	4601      	mov	r1, r0
    e80c:	4620      	mov	r0, r4
    e80e:	f01e f896 	bl	2c93e <net_buf_simple_push_be24>
	if (ctl) {
    e812:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e816:	429f      	cmp	r7, r3
    e818:	686b      	ldr	r3, [r5, #4]
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl | 0x80);
    e81a:	7ad9      	ldrb	r1, [r3, #11]
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl);
    e81c:	4620      	mov	r0, r4
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl | 0x80);
    e81e:	bf08      	it	eq
    e820:	f041 0180 	orreq.w	r1, r1, #128	; 0x80
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl);
    e824:	f01e f884 	bl	2c930 <net_buf_simple_push_u8>
	net_buf_simple_push_u8(buf, (nid | (BT_MESH_NET_IVI_TX & 1) << 7));
    e828:	4b08      	ldr	r3, [pc, #32]	; (e84c <net_header_encode+0x94>)
    e82a:	2002      	movs	r0, #2
    e82c:	7819      	ldrb	r1, [r3, #0]
    e82e:	f7ff fe37 	bl	e4a0 <atomic_test_bit.constprop.12>
    e832:	1a09      	subs	r1, r1, r0
    e834:	ea46 11c1 	orr.w	r1, r6, r1, lsl #7
    e838:	4620      	mov	r0, r4
    e83a:	b2c9      	uxtb	r1, r1
    e83c:	f01e f878 	bl	2c930 <net_buf_simple_push_u8>
	return 0;
    e840:	2000      	movs	r0, #0
    e842:	e7ce      	b.n	e7e2 <net_header_encode+0x2a>
    e844:	00031f8c 	.word	0x00031f8c
    e848:	00031fb4 	.word	0x00031fb4
    e84c:	20001dd8 	.word	0x20001dd8

0000e850 <bt_mesh_net_encode>:
{
    e850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e854:	4617      	mov	r7, r2
	tx->friend_cred = 0U;
    e856:	7ac2      	ldrb	r2, [r0, #11]
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
    e858:	6805      	ldr	r5, [r0, #0]
	tx->friend_cred = 0U;
    e85a:	f36f 0200 	bfc	r2, #0, #1
    e85e:	72c2      	strb	r2, [r0, #11]
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
    e860:	7fac      	ldrb	r4, [r5, #30]
    e862:	1ea3      	subs	r3, r4, #2
{
    e864:	460e      	mov	r6, r1
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
    e866:	4259      	negs	r1, r3
    e868:	4159      	adcs	r1, r3
	err = net_header_encode(tx, cred->nid, buf);
    e86a:	245a      	movs	r4, #90	; 0x5a
    e86c:	434c      	muls	r4, r1
    e86e:	192b      	adds	r3, r5, r4
    e870:	4632      	mov	r2, r6
    e872:	f893 103d 	ldrb.w	r1, [r3, #61]	; 0x3d
    e876:	f7ff ff9f 	bl	e7b8 <net_header_encode>
	if (err) {
    e87a:	b970      	cbnz	r0, e89a <bt_mesh_net_encode+0x4a>
	return net_encrypt(buf, cred, BT_MESH_NET_IVI_TX, proxy);
    e87c:	4b08      	ldr	r3, [pc, #32]	; (e8a0 <bt_mesh_net_encode+0x50>)
    e87e:	2002      	movs	r0, #2
    e880:	681a      	ldr	r2, [r3, #0]
    e882:	f7ff fe0d 	bl	e4a0 <atomic_test_bit.constprop.12>
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
    e886:	f104 013d 	add.w	r1, r4, #61	; 0x3d
	return net_encrypt(buf, cred, BT_MESH_NET_IVI_TX, proxy);
    e88a:	463b      	mov	r3, r7
    e88c:	1a12      	subs	r2, r2, r0
    e88e:	4429      	add	r1, r5
    e890:	4630      	mov	r0, r6
}
    e892:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return net_encrypt(buf, cred, BT_MESH_NET_IVI_TX, proxy);
    e896:	f01b bdaa 	b.w	2a3ee <net_encrypt>
}
    e89a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e89e:	bf00      	nop
    e8a0:	20001dd8 	.word	0x20001dd8

0000e8a4 <bt_mesh_net_send>:
{
    e8a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e8a8:	4699      	mov	r9, r3
	tx->friend_cred = 0U;
    e8aa:	7ac3      	ldrb	r3, [r0, #11]
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
    e8ac:	f8d0 b000 	ldr.w	fp, [r0]
	tx->friend_cred = 0U;
    e8b0:	f36f 0300 	bfc	r3, #0, #1
    e8b4:	72c3      	strb	r3, [r0, #11]
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
    e8b6:	f89b 701e 	ldrb.w	r7, [fp, #30]
    e8ba:	1ebb      	subs	r3, r7, #2
    e8bc:	425f      	negs	r7, r3
    e8be:	415f      	adcs	r7, r3
	err = net_header_encode(tx, cred->nid, &buf->b);
    e8c0:	235a      	movs	r3, #90	; 0x5a
    e8c2:	fb03 b307 	mla	r3, r3, r7, fp
    e8c6:	f101 0a08 	add.w	sl, r1, #8
{
    e8ca:	460e      	mov	r6, r1
    e8cc:	4690      	mov	r8, r2
	err = net_header_encode(tx, cred->nid, &buf->b);
    e8ce:	f893 103d 	ldrb.w	r1, [r3, #61]	; 0x3d
    e8d2:	4652      	mov	r2, sl
{
    e8d4:	4604      	mov	r4, r0
	err = net_header_encode(tx, cred->nid, &buf->b);
    e8d6:	f7ff ff6f 	bl	e7b8 <net_header_encode>
	if (err) {
    e8da:	4605      	mov	r5, r0
    e8dc:	2800      	cmp	r0, #0
    e8de:	d178      	bne.n	e9d2 <bt_mesh_net_send+0x12e>
	if (bt_mesh_fixed_group_match(tx->ctx->addr) ||
    e8e0:	6863      	ldr	r3, [r4, #4]
    e8e2:	8898      	ldrh	r0, [r3, #4]
    e8e4:	f01b fd26 	bl	2a334 <bt_mesh_fixed_group_match>
    e8e8:	2800      	cmp	r0, #0
    e8ea:	d03c      	beq.n	e966 <bt_mesh_net_send+0xc2>
		err = loopback(tx, buf->data, buf->len);
    e8ec:	89b3      	ldrh	r3, [r6, #12]
    e8ee:	68b1      	ldr	r1, [r6, #8]
    e8f0:	9300      	str	r3, [sp, #0]
	return net_buf_alloc_fixed(pool, timeout);
    e8f2:	2200      	movs	r2, #0
    e8f4:	2300      	movs	r3, #0
    e8f6:	483a      	ldr	r0, [pc, #232]	; (e9e0 <bt_mesh_net_send+0x13c>)
    e8f8:	9101      	str	r1, [sp, #4]
    e8fa:	f01d fffe 	bl	2c8fa <net_buf_alloc_fixed>
	if (!buf) {
    e8fe:	9901      	ldr	r1, [sp, #4]
    e900:	4603      	mov	r3, r0
    e902:	2800      	cmp	r0, #0
    e904:	d13c      	bne.n	e980 <bt_mesh_net_send+0xdc>
		BT_WARN("Unable to allocate loopback");
    e906:	2157      	movs	r1, #87	; 0x57
    e908:	4836      	ldr	r0, [pc, #216]	; (e9e4 <bt_mesh_net_send+0x140>)
    e90a:	f018 fb30 	bl	26f6e <printk>
		return -ENOMEM;
    e90e:	f06f 050b 	mvn.w	r5, #11
		if (BT_MESH_ADDR_IS_UNICAST(tx->ctx->addr) ||
    e912:	6863      	ldr	r3, [r4, #4]
    e914:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
    e918:	2a00      	cmp	r2, #0
    e91a:	dc55      	bgt.n	e9c8 <bt_mesh_net_send+0x124>
    e91c:	7adb      	ldrb	r3, [r3, #11]
    e91e:	2b01      	cmp	r3, #1
    e920:	d052      	beq.n	e9c8 <bt_mesh_net_send+0x124>
	err = net_encrypt(&buf->b, cred, BT_MESH_NET_IVI_TX, false);
    e922:	4b31      	ldr	r3, [pc, #196]	; (e9e8 <bt_mesh_net_send+0x144>)
    e924:	2002      	movs	r0, #2
    e926:	681a      	ldr	r2, [r3, #0]
    e928:	f7ff fdba 	bl	e4a0 <atomic_test_bit.constprop.12>
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
    e92c:	215a      	movs	r1, #90	; 0x5a
    e92e:	fb01 b107 	mla	r1, r1, r7, fp
	err = net_encrypt(&buf->b, cred, BT_MESH_NET_IVI_TX, false);
    e932:	1a12      	subs	r2, r2, r0
    e934:	2300      	movs	r3, #0
    e936:	313d      	adds	r1, #61	; 0x3d
    e938:	4650      	mov	r0, sl
    e93a:	f01b fd58 	bl	2a3ee <net_encrypt>
	if (err) {
    e93e:	4605      	mov	r5, r0
    e940:	2800      	cmp	r0, #0
    e942:	d146      	bne.n	e9d2 <bt_mesh_net_send+0x12e>
	    bt_mesh_proxy_relay(&buf->b, tx->ctx->addr) &&
    e944:	6863      	ldr	r3, [r4, #4]
    e946:	4650      	mov	r0, sl
    e948:	8899      	ldrh	r1, [r3, #4]
    e94a:	f009 f927 	bl	17b9c <bt_mesh_proxy_relay>
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    e94e:	b120      	cbz	r0, e95a <bt_mesh_net_send+0xb6>
	    BT_MESH_ADDR_IS_UNICAST(tx->ctx->addr)) {
    e950:	6863      	ldr	r3, [r4, #4]
	    bt_mesh_proxy_relay(&buf->b, tx->ctx->addr) &&
    e952:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    e956:	2b00      	cmp	r3, #0
    e958:	dc37      	bgt.n	e9ca <bt_mesh_net_send+0x126>
	bt_mesh_adv_send(buf, cb, cb_data);
    e95a:	464a      	mov	r2, r9
    e95c:	4641      	mov	r1, r8
    e95e:	4630      	mov	r0, r6
    e960:	f7ff f970 	bl	dc44 <bt_mesh_adv_send>
    e964:	e035      	b.n	e9d2 <bt_mesh_net_send+0x12e>
	    bt_mesh_elem_find(tx->ctx->addr)) {
    e966:	6863      	ldr	r3, [r4, #4]
    e968:	8898      	ldrh	r0, [r3, #4]
    e96a:	f003 fb2f 	bl	11fcc <bt_mesh_elem_find>
	if (bt_mesh_fixed_group_match(tx->ctx->addr) ||
    e96e:	2800      	cmp	r0, #0
    e970:	d1bc      	bne.n	e8ec <bt_mesh_net_send+0x48>
	if (tx->ctx->send_ttl == 1U) {
    e972:	6863      	ldr	r3, [r4, #4]
    e974:	7adb      	ldrb	r3, [r3, #11]
    e976:	2b01      	cmp	r3, #1
    e978:	d1d3      	bne.n	e922 <bt_mesh_net_send+0x7e>
		err = -EINVAL;
    e97a:	f06f 0515 	mvn.w	r5, #21
    e97e:	e028      	b.n	e9d2 <bt_mesh_net_send+0x12e>
	LOOPBACK_BUF_SUB(buf) = tx->sub;
    e980:	6822      	ldr	r2, [r4, #0]
    e982:	6142      	str	r2, [r0, #20]
	return net_buf_simple_add_mem(&buf->b, mem, len);
    e984:	9a00      	ldr	r2, [sp, #0]
    e986:	9300      	str	r3, [sp, #0]
    e988:	3008      	adds	r0, #8
    e98a:	f01e f82a 	bl	2c9e2 <net_buf_simple_add_mem>
	net_buf_slist_put(&bt_mesh.local_queue, buf);
    e98e:	9b00      	ldr	r3, [sp, #0]
    e990:	4816      	ldr	r0, [pc, #88]	; (e9ec <bt_mesh_net_send+0x148>)
    e992:	4619      	mov	r1, r3
    e994:	f010 fa18 	bl	1edc8 <net_buf_slist_put>
    e998:	f3bf 8f5b 	dmb	ish
    e99c:	4914      	ldr	r1, [pc, #80]	; (e9f0 <bt_mesh_net_send+0x14c>)
    e99e:	e851 3f00 	ldrex	r3, [r1]
    e9a2:	f043 0201 	orr.w	r2, r3, #1
    e9a6:	e841 2000 	strex	r0, r2, [r1]
    e9aa:	2800      	cmp	r0, #0
    e9ac:	d1f7      	bne.n	e99e <bt_mesh_net_send+0xfa>
    e9ae:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    e9b2:	f013 0301 	ands.w	r3, r3, #1
    e9b6:	d1ac      	bne.n	e912 <bt_mesh_net_send+0x6e>
		k_queue_append(&work_q->queue, work);
    e9b8:	3908      	subs	r1, #8
    e9ba:	480e      	ldr	r0, [pc, #56]	; (e9f4 <bt_mesh_net_send+0x150>)
    e9bc:	9300      	str	r3, [sp, #0]
    e9be:	f01e fc53 	bl	2d268 <k_queue_append>
	return 0;
    e9c2:	9b00      	ldr	r3, [sp, #0]
    e9c4:	461d      	mov	r5, r3
    e9c6:	e7a4      	b.n	e912 <bt_mesh_net_send+0x6e>
			if (!err) {
    e9c8:	b91d      	cbnz	r5, e9d2 <bt_mesh_net_send+0x12e>
		send_cb_finalize(cb, cb_data);
    e9ca:	4649      	mov	r1, r9
    e9cc:	4640      	mov	r0, r8
    e9ce:	f01b fcfc 	bl	2a3ca <send_cb_finalize>
	net_buf_unref(buf);
    e9d2:	4630      	mov	r0, r6
    e9d4:	f010 fabe 	bl	1ef54 <net_buf_unref>
}
    e9d8:	4628      	mov	r0, r5
    e9da:	b003      	add	sp, #12
    e9dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e9e0:	200014b4 	.word	0x200014b4
    e9e4:	00031f53 	.word	0x00031f53
    e9e8:	20001dd8 	.word	0x20001dd8
    e9ec:	20001df0 	.word	0x20001df0
    e9f0:	20001dec 	.word	0x20001dec
    e9f4:	20002490 	.word	0x20002490

0000e9f8 <bt_mesh_net_loopback_clear>:
{
    e9f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	list->head = NULL;
    e9fa:	2300      	movs	r3, #0
	list->tail = NULL;
    e9fc:	e9cd 3300 	strd	r3, r3, [sp]
	while ((buf = net_buf_slist_get(&bt_mesh.local_queue))) {
    ea00:	4c0e      	ldr	r4, [pc, #56]	; (ea3c <bt_mesh_net_loopback_clear+0x44>)
{
    ea02:	4605      	mov	r5, r0
		if (net_idx == BT_MESH_KEY_ANY || net_idx == sub->net_idx) {
    ea04:	f64f 76ff 	movw	r6, #65535	; 0xffff
	while ((buf = net_buf_slist_get(&bt_mesh.local_queue))) {
    ea08:	480c      	ldr	r0, [pc, #48]	; (ea3c <bt_mesh_net_loopback_clear+0x44>)
    ea0a:	f010 fa19 	bl	1ee40 <net_buf_slist_get>
    ea0e:	b930      	cbnz	r0, ea1e <bt_mesh_net_loopback_clear+0x26>
	bt_mesh.local_queue = new_list;
    ea10:	ab02      	add	r3, sp, #8
    ea12:	e913 0003 	ldmdb	r3, {r0, r1}
    ea16:	e884 0003 	stmia.w	r4, {r0, r1}
}
    ea1a:	b002      	add	sp, #8
    ea1c:	bd70      	pop	{r4, r5, r6, pc}
		if (net_idx == BT_MESH_KEY_ANY || net_idx == sub->net_idx) {
    ea1e:	42b5      	cmp	r5, r6
    ea20:	d003      	beq.n	ea2a <bt_mesh_net_loopback_clear+0x32>
    ea22:	6943      	ldr	r3, [r0, #20]
    ea24:	8b9b      	ldrh	r3, [r3, #28]
    ea26:	42ab      	cmp	r3, r5
    ea28:	d102      	bne.n	ea30 <bt_mesh_net_loopback_clear+0x38>
			net_buf_unref(buf);
    ea2a:	f010 fa93 	bl	1ef54 <net_buf_unref>
    ea2e:	e7eb      	b.n	ea08 <bt_mesh_net_loopback_clear+0x10>
			net_buf_slist_put(&new_list, buf);
    ea30:	4601      	mov	r1, r0
    ea32:	4668      	mov	r0, sp
    ea34:	f010 f9c8 	bl	1edc8 <net_buf_slist_put>
    ea38:	e7e6      	b.n	ea08 <bt_mesh_net_loopback_clear+0x10>
    ea3a:	bf00      	nop
    ea3c:	20001df0 	.word	0x20001df0

0000ea40 <bt_mesh_net_header_parse>:
{
    ea40:	b510      	push	{r4, lr}
	rx->old_iv = (IVI(buf->data) != (bt_mesh.iv_index & 0x01));
    ea42:	4b12      	ldr	r3, [pc, #72]	; (ea8c <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2c>)
    ea44:	6804      	ldr	r4, [r0, #0]
    ea46:	681b      	ldr	r3, [r3, #0]
    ea48:	7822      	ldrb	r2, [r4, #0]
    ea4a:	f003 0301 	and.w	r3, r3, #1
    ea4e:	ea83 13d2 	eor.w	r3, r3, r2, lsr #7
    ea52:	7d0a      	ldrb	r2, [r1, #20]
    ea54:	f363 0200 	bfi	r2, r3, #0, #1
    ea58:	750a      	strb	r2, [r1, #20]
	rx->ctl = CTL(buf->data);
    ea5a:	7863      	ldrb	r3, [r4, #1]
    ea5c:	b2d2      	uxtb	r2, r2
    ea5e:	09db      	lsrs	r3, r3, #7
    ea60:	f363 02c3 	bfi	r2, r3, #3, #1
    ea64:	750a      	strb	r2, [r1, #20]
	rx->ctx.recv_ttl = TTL(buf->data);
    ea66:	7863      	ldrb	r3, [r4, #1]
    ea68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    ea6c:	734b      	strb	r3, [r1, #13]
	rx->seq = SEQ(buf->data);
    ea6e:	1ca0      	adds	r0, r4, #2
    ea70:	f01b fca3 	bl	2a3ba <sys_get_be24>
    ea74:	6108      	str	r0, [r1, #16]
	return ((uint16_t)src[0] << 8) | src[1];
    ea76:	7962      	ldrb	r2, [r4, #5]
    ea78:	79a3      	ldrb	r3, [r4, #6]
    ea7a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rx->ctx.addr = SRC(buf->data);
    ea7e:	810b      	strh	r3, [r1, #8]
    ea80:	79e2      	ldrb	r2, [r4, #7]
    ea82:	7a23      	ldrb	r3, [r4, #8]
    ea84:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rx->ctx.recv_dst = DST(buf->data);
    ea88:	814b      	strh	r3, [r1, #10]
}
    ea8a:	bd10      	pop	{r4, pc}
    ea8c:	20001dd8 	.word	0x20001dd8

0000ea90 <bt_mesh_net_decode>:
{
    ea90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ea92:	4614      	mov	r4, r2
	if (in->len < BT_MESH_NET_MIN_PDU_LEN) {
    ea94:	8882      	ldrh	r2, [r0, #4]
    ea96:	2a11      	cmp	r2, #17
{
    ea98:	4606      	mov	r6, r0
    ea9a:	460d      	mov	r5, r1
    ea9c:	461f      	mov	r7, r3
	if (in->len < BT_MESH_NET_MIN_PDU_LEN) {
    ea9e:	d80f      	bhi.n	eac0 <bt_mesh_net_decode+0x30>
		BT_WARN("Dropping too short mesh packet (len %u)", in->len);
    eaa0:	2157      	movs	r1, #87	; 0x57
    eaa2:	484c      	ldr	r0, [pc, #304]	; (ebd4 <bt_mesh_net_decode+0x144>)
    eaa4:	f018 fa63 	bl	26f6e <printk>
		BT_WARN("%s", bt_hex(in->data, in->len));
    eaa8:	88b1      	ldrh	r1, [r6, #4]
    eaaa:	6830      	ldr	r0, [r6, #0]
    eaac:	f7f8 fe9e 	bl	77ec <bt_hex_real>
    eab0:	4602      	mov	r2, r0
    eab2:	4849      	ldr	r0, [pc, #292]	; (ebd8 <bt_mesh_net_decode+0x148>)
    eab4:	2157      	movs	r1, #87	; 0x57
		BT_WARN("Dropping too long mesh packet (len %u)", in->len);
    eab6:	f018 fa5a 	bl	26f6e <printk>
		return -EINVAL;
    eaba:	f06f 0015 	mvn.w	r0, #21
}
    eabe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (in->len > BT_MESH_NET_MAX_PDU_LEN) {
    eac0:	2a1d      	cmp	r2, #29
    eac2:	d902      	bls.n	eaca <bt_mesh_net_decode+0x3a>
		BT_WARN("Dropping too long mesh packet (len %u)", in->len);
    eac4:	2157      	movs	r1, #87	; 0x57
    eac6:	4845      	ldr	r0, [pc, #276]	; (ebdc <bt_mesh_net_decode+0x14c>)
    eac8:	e7f5      	b.n	eab6 <bt_mesh_net_decode+0x26>
	if (net_if == BT_MESH_NET_IF_ADV && check_dup(in)) {
    eaca:	bb91      	cbnz	r1, eb32 <bt_mesh_net_decode+0xa2>
	return buf->data + buf->len;
    eacc:	6803      	ldr	r3, [r0, #0]
    eace:	441a      	add	r2, r3
    ead0:	f812 3c07 	ldrb.w	r3, [r2, #-7]
    ead4:	f812 1c08 	ldrb.w	r1, [r2, #-8]
    ead8:	f812 0c06 	ldrb.w	r0, [r2, #-6]
	return ((uint32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
    eadc:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
	return ((uint16_t)src[0] << 8) | src[1];
    eae0:	f812 3c05 	ldrb.w	r3, [r2, #-5]
	return ((uint32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
    eae4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    eae8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	return ((uint16_t)src[0] << 8) | src[1];
    eaec:	f812 0c04 	ldrb.w	r0, [r2, #-4]
    eaf0:	f812 1c03 	ldrb.w	r1, [r2, #-3]
	return ((uint32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
    eaf4:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
	return ((uint16_t)src[0] << 8) | src[1];
    eaf8:	f812 0c02 	ldrb.w	r0, [r2, #-2]
    eafc:	f812 2c01 	ldrb.w	r2, [r2, #-1]
	return ((uint32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
    eb00:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    eb04:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    eb08:	4935      	ldr	r1, [pc, #212]	; (ebe0 <bt_mesh_net_decode+0x150>)
	val = sys_get_be32(tail - 4) ^ sys_get_be32(tail - 8);
    eb0a:	4053      	eors	r3, r2
	for (i = 0; i < ARRAY_SIZE(dup_cache); i++) {
    eb0c:	468c      	mov	ip, r1
    eb0e:	462a      	mov	r2, r5
		if (dup_cache[i] == val) {
    eb10:	f851 0b04 	ldr.w	r0, [r1], #4
    eb14:	4283      	cmp	r3, r0
    eb16:	d0d0      	beq.n	eaba <bt_mesh_net_decode+0x2a>
	for (i = 0; i < ARRAY_SIZE(dup_cache); i++) {
    eb18:	3201      	adds	r2, #1
    eb1a:	2a0a      	cmp	r2, #10
    eb1c:	d1f8      	bne.n	eb10 <bt_mesh_net_decode+0x80>
	dup_cache[dup_cache_next++] = val;
    eb1e:	4831      	ldr	r0, [pc, #196]	; (ebe4 <bt_mesh_net_decode+0x154>)
    eb20:	6801      	ldr	r1, [r0, #0]
    eb22:	f84c 3021 	str.w	r3, [ip, r1, lsl #2]
    eb26:	1c4b      	adds	r3, r1, #1
	dup_cache_next %= ARRAY_SIZE(dup_cache);
    eb28:	fb93 f1f2 	sdiv	r1, r3, r2
    eb2c:	fb02 3211 	mls	r2, r2, r1, r3
    eb30:	6002      	str	r2, [r0, #0]
	rx->net_if = net_if;
    eb32:	7d23      	ldrb	r3, [r4, #20]
    eb34:	f365 1305 	bfi	r3, r5, #4, #2
    eb38:	7523      	strb	r3, [r4, #20]
	if (!bt_mesh_net_cred_find(rx, in, out, net_decrypt)) {
    eb3a:	463a      	mov	r2, r7
    eb3c:	4b2a      	ldr	r3, [pc, #168]	; (ebe8 <bt_mesh_net_decode+0x158>)
    eb3e:	4631      	mov	r1, r6
    eb40:	4620      	mov	r0, r4
    eb42:	f000 fc5d 	bl	f400 <bt_mesh_net_cred_find>
    eb46:	2800      	cmp	r0, #0
    eb48:	d040      	beq.n	ebcc <bt_mesh_net_decode+0x13c>
	rx->ctx.recv_ttl = TTL(out->data);
    eb4a:	6839      	ldr	r1, [r7, #0]
	rx->ctl = CTL(out->data);
    eb4c:	7d22      	ldrb	r2, [r4, #20]
	rx->ctx.app_idx = BT_MESH_KEY_UNUSED;
    eb4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    eb52:	80e3      	strh	r3, [r4, #6]
	rx->ctx.recv_ttl = TTL(out->data);
    eb54:	784b      	ldrb	r3, [r1, #1]
    eb56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    eb5a:	7363      	strb	r3, [r4, #13]
	if (rx->ctx.recv_ttl == 0U) {
    eb5c:	3300      	adds	r3, #0
    eb5e:	bf18      	it	ne
    eb60:	2301      	movne	r3, #1
    eb62:	425b      	negs	r3, r3
    eb64:	73e3      	strb	r3, [r4, #15]
	rx->ctl = CTL(out->data);
    eb66:	784b      	ldrb	r3, [r1, #1]
    eb68:	09db      	lsrs	r3, r3, #7
    eb6a:	f363 02c3 	bfi	r2, r3, #3, #1
    eb6e:	7522      	strb	r2, [r4, #20]
	rx->seq = SEQ(out->data);
    eb70:	1c88      	adds	r0, r1, #2
    eb72:	f01b fc22 	bl	2a3ba <sys_get_be24>
    eb76:	6120      	str	r0, [r4, #16]
	return ((uint16_t)src[0] << 8) | src[1];
    eb78:	79ca      	ldrb	r2, [r1, #7]
    eb7a:	7a0b      	ldrb	r3, [r1, #8]
	if (net_if != BT_MESH_NET_IF_PROXY_CFG &&
    eb7c:	2d03      	cmp	r5, #3
    eb7e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rx->ctx.recv_dst = DST(out->data);
    eb82:	8163      	strh	r3, [r4, #10]
	if (net_if != BT_MESH_NET_IF_PROXY_CFG &&
    eb84:	d007      	beq.n	eb96 <bt_mesh_net_decode+0x106>
    eb86:	b933      	cbnz	r3, eb96 <bt_mesh_net_decode+0x106>
		BT_ERR("Destination address is unassigned; dropping packet");
    eb88:	4818      	ldr	r0, [pc, #96]	; (ebec <bt_mesh_net_decode+0x15c>)
    eb8a:	2145      	movs	r1, #69	; 0x45
    eb8c:	f018 f9ef 	bl	26f6e <printk>
		return -EBADMSG;
    eb90:	f06f 004c 	mvn.w	r0, #76	; 0x4c
    eb94:	e793      	b.n	eabe <bt_mesh_net_decode+0x2e>
	rx->msg_cache_idx = msg_cache_next++;
    eb96:	4916      	ldr	r1, [pc, #88]	; (ebf0 <bt_mesh_net_decode+0x160>)
	msg_cache[rx->msg_cache_idx].src = rx->ctx.addr;
    eb98:	4a16      	ldr	r2, [pc, #88]	; (ebf4 <bt_mesh_net_decode+0x164>)
	rx->msg_cache_idx = msg_cache_next++;
    eb9a:	880b      	ldrh	r3, [r1, #0]
    eb9c:	82e3      	strh	r3, [r4, #22]
	msg_cache[rx->msg_cache_idx].src = rx->ctx.addr;
    eb9e:	f832 5023 	ldrh.w	r5, [r2, r3, lsl #2]
    eba2:	8924      	ldrh	r4, [r4, #8]
    eba4:	f364 050e 	bfi	r5, r4, #0, #15
    eba8:	f822 5023 	strh.w	r5, [r2, r3, lsl #2]
	msg_cache[rx->msg_cache_idx].seq = rx->seq;
    ebac:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    ebb0:	f360 34df 	bfi	r4, r0, #15, #17
    ebb4:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
	rx->msg_cache_idx = msg_cache_next++;
    ebb8:	3301      	adds	r3, #1
	msg_cache_next %= ARRAY_SIZE(msg_cache);
    ebba:	200a      	movs	r0, #10
    ebbc:	b29b      	uxth	r3, r3
    ebbe:	fbb3 f2f0 	udiv	r2, r3, r0
    ebc2:	fb00 3312 	mls	r3, r0, r2, r3
    ebc6:	800b      	strh	r3, [r1, #0]
	return 0;
    ebc8:	2000      	movs	r0, #0
    ebca:	e778      	b.n	eabe <bt_mesh_net_decode+0x2e>
		return -ENOENT;
    ebcc:	f06f 0001 	mvn.w	r0, #1
    ebd0:	e775      	b.n	eabe <bt_mesh_net_decode+0x2e>
    ebd2:	bf00      	nop
    ebd4:	00031c73 	.word	0x00031c73
    ebd8:	00031ca0 	.word	0x00031ca0
    ebdc:	00031ca8 	.word	0x00031ca8
    ebe0:	20002d60 	.word	0x20002d60
    ebe4:	20002d88 	.word	0x20002d88
    ebe8:	0000e2f5 	.word	0x0000e2f5
    ebec:	00031cd4 	.word	0x00031cd4
    ebf0:	200046ac 	.word	0x200046ac
    ebf4:	20002d8c 	.word	0x20002d8c

0000ebf8 <bt_mesh_net_recv>:
{
    ebf8:	b5f0      	push	{r4, r5, r6, r7, lr}
    ebfa:	b093      	sub	sp, #76	; 0x4c
	NET_BUF_SIMPLE_DEFINE(buf, BT_MESH_NET_MAX_PDU_LEN);
    ebfc:	ab0a      	add	r3, sp, #40	; 0x28
{
    ebfe:	4617      	mov	r7, r2
	NET_BUF_SIMPLE_DEFINE(buf, BT_MESH_NET_MAX_PDU_LEN);
    ec00:	f44f 12e8 	mov.w	r2, #1900544	; 0x1d0000
{
    ec04:	460c      	mov	r4, r1
	NET_BUF_SIMPLE_DEFINE(buf, BT_MESH_NET_MAX_PDU_LEN);
    ec06:	e9cd 2302 	strd	r2, r3, [sp, #8]
{
    ec0a:	4606      	mov	r6, r0
	struct bt_mesh_net_rx rx = { .ctx.recv_rssi = rssi };
    ec0c:	2218      	movs	r2, #24
    ec0e:	2100      	movs	r1, #0
    ec10:	a804      	add	r0, sp, #16
	NET_BUF_SIMPLE_DEFINE(buf, BT_MESH_NET_MAX_PDU_LEN);
    ec12:	9301      	str	r3, [sp, #4]
	struct bt_mesh_net_rx rx = { .ctx.recv_rssi = rssi };
    ec14:	f01e fcf1 	bl	2d5fa <memset>
    ec18:	f88d 401c 	strb.w	r4, [sp, #28]
	if (!bt_mesh_is_provisioned()) {
    ec1c:	f01b fb25 	bl	2a26a <bt_mesh_is_provisioned>
    ec20:	2800      	cmp	r0, #0
    ec22:	d074      	beq.n	ed0e <bt_mesh_net_recv+0x116>
	if (bt_mesh_net_decode(data, net_if, &rx, &buf)) {
    ec24:	ab01      	add	r3, sp, #4
    ec26:	aa04      	add	r2, sp, #16
    ec28:	4639      	mov	r1, r7
    ec2a:	4630      	mov	r0, r6
    ec2c:	f7ff ff30 	bl	ea90 <bt_mesh_net_decode>
    ec30:	2800      	cmp	r0, #0
    ec32:	d16c      	bne.n	ed0e <bt_mesh_net_recv+0x116>
	state->offset = net_buf_simple_headroom(buf);
    ec34:	a801      	add	r0, sp, #4
    ec36:	f01d fec8 	bl	2c9ca <net_buf_simple_headroom>
    ec3a:	4604      	mov	r4, r0
	rx.local_match = (bt_mesh_fixed_group_match(rx.ctx.recv_dst) ||
    ec3c:	f8bd 001a 	ldrh.w	r0, [sp, #26]
	state->len = buf->len;
    ec40:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    ec44:	f01b fb76 	bl	2a334 <bt_mesh_fixed_group_match>
    ec48:	bb10      	cbnz	r0, ec90 <bt_mesh_net_recv+0x98>
			  bt_mesh_elem_find(rx.ctx.recv_dst));
    ec4a:	f8bd 001a 	ldrh.w	r0, [sp, #26]
    ec4e:	f003 f9bd 	bl	11fcc <bt_mesh_elem_find>
	rx.local_match = (bt_mesh_fixed_group_match(rx.ctx.recv_dst) ||
    ec52:	3000      	adds	r0, #0
    ec54:	bf18      	it	ne
    ec56:	2001      	movne	r0, #1
    ec58:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    ec5c:	2f02      	cmp	r7, #2
	rx.local_match = (bt_mesh_fixed_group_match(rx.ctx.recv_dst) ||
    ec5e:	f360 1386 	bfi	r3, r0, #6, #1
    ec62:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    ec66:	d115      	bne.n	ec94 <bt_mesh_net_recv+0x9c>
		bt_mesh_proxy_addr_add(data, rx.ctx.addr);
    ec68:	f8bd 1018 	ldrh.w	r1, [sp, #24]
    ec6c:	4630      	mov	r0, r6
    ec6e:	f01c fce6 	bl	2b63e <bt_mesh_proxy_addr_add>
		if (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_DISABLED &&
    ec72:	f01b fb3f 	bl	2a2f4 <bt_mesh_gatt_proxy_get>
		    !rx.local_match) {
    ec76:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    ec7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
		if (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_DISABLED &&
    ec7e:	4318      	orrs	r0, r3
    ec80:	f010 0fff 	tst.w	r0, #255	; 0xff
    ec84:	d106      	bne.n	ec94 <bt_mesh_net_recv+0x9c>
			BT_INFO("Proxy is disabled; ignoring message");
    ec86:	485f      	ldr	r0, [pc, #380]	; (ee04 <bt_mesh_net_recv+0x20c>)
    ec88:	2149      	movs	r1, #73	; 0x49
		BT_ERR("Out of relay buffers");
    ec8a:	f018 f970 	bl	26f6e <printk>
		return;
    ec8e:	e03e      	b.n	ed0e <bt_mesh_net_recv+0x116>
	rx.local_match = (bt_mesh_fixed_group_match(rx.ctx.recv_dst) ||
    ec90:	2001      	movs	r0, #1
    ec92:	e7e1      	b.n	ec58 <bt_mesh_net_recv+0x60>
	if (bt_mesh_trans_recv(&buf, &rx) == -EAGAIN) {
    ec94:	a904      	add	r1, sp, #16
    ec96:	a801      	add	r0, sp, #4
    ec98:	f001 fe0a 	bl	108b0 <bt_mesh_trans_recv>
    ec9c:	300b      	adds	r0, #11
    ec9e:	d10e      	bne.n	ecbe <bt_mesh_net_recv+0xc6>
		BT_WARN("Removing rejected message from Network Message Cache");
    eca0:	2157      	movs	r1, #87	; 0x57
    eca2:	4859      	ldr	r0, [pc, #356]	; (ee08 <bt_mesh_net_recv+0x210>)
    eca4:	f018 f963 	bl	26f6e <printk>
		msg_cache[rx.msg_cache_idx].src = BT_MESH_ADDR_UNASSIGNED;
    eca8:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
    ecac:	4a57      	ldr	r2, [pc, #348]	; (ee0c <bt_mesh_net_recv+0x214>)
    ecae:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
    ecb2:	f36f 010e 	bfc	r1, #0, #15
    ecb6:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
		msg_cache_next = rx.msg_cache_idx;
    ecba:	4a55      	ldr	r2, [pc, #340]	; (ee10 <bt_mesh_net_recv+0x218>)
    ecbc:	8013      	strh	r3, [r2, #0]
	if (!BT_MESH_ADDR_IS_UNICAST(rx.ctx.recv_dst) ||
    ecbe:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
    ecc2:	2b00      	cmp	r3, #0
    ecc4:	dd04      	ble.n	ecd0 <bt_mesh_net_recv+0xd8>
	    (!rx.local_match && !rx.friend_match)) {
    ecc6:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
	if (!BT_MESH_ADDR_IS_UNICAST(rx.ctx.recv_dst) ||
    ecca:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    ecce:	d11e      	bne.n	ed0e <bt_mesh_net_recv+0x116>
	buf->data = buf->__buf + state->offset;
    ecd0:	9b03      	ldr	r3, [sp, #12]
	buf->len = state->len;
    ecd2:	f8ad 5008 	strh.w	r5, [sp, #8]
	buf->data = buf->__buf + state->offset;
    ecd6:	fa13 f484 	uxtah	r4, r3, r4
	if (rx->ctx.recv_ttl <= 1U) {
    ecda:	f89d 301d 	ldrb.w	r3, [sp, #29]
    ecde:	9401      	str	r4, [sp, #4]
    ece0:	2b01      	cmp	r3, #1
    ece2:	d914      	bls.n	ed0e <bt_mesh_net_recv+0x116>
	if (rx->net_if == BT_MESH_NET_IF_ADV &&
    ece4:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    ece8:	f013 0f34 	tst.w	r3, #52	; 0x34
    ecec:	d108      	bne.n	ed00 <bt_mesh_net_recv+0x108>
	    bt_mesh_relay_get() != BT_MESH_RELAY_ENABLED &&
    ecee:	f01b fb1e 	bl	2a32e <bt_mesh_relay_get>
	    !rx->friend_cred &&
    ecf2:	2801      	cmp	r0, #1
    ecf4:	d107      	bne.n	ed06 <bt_mesh_net_recv+0x10e>
	if (rx->net_if == BT_MESH_NET_IF_ADV && !rx->friend_cred) {
    ecf6:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    ecfa:	f013 0f34 	tst.w	r3, #52	; 0x34
    ecfe:	d008      	beq.n	ed12 <bt_mesh_net_recv+0x11a>
		transmit = bt_mesh_net_transmit_get();
    ed00:	f7fe fe52 	bl	d9a8 <bt_mesh_net_transmit_get>
    ed04:	e007      	b.n	ed16 <bt_mesh_net_recv+0x11e>
	    bt_mesh_gatt_proxy_get() != BT_MESH_GATT_PROXY_ENABLED) {
    ed06:	f01b faf5 	bl	2a2f4 <bt_mesh_gatt_proxy_get>
	    bt_mesh_relay_get() != BT_MESH_RELAY_ENABLED &&
    ed0a:	2801      	cmp	r0, #1
    ed0c:	d0f3      	beq.n	ecf6 <bt_mesh_net_recv+0xfe>
}
    ed0e:	b013      	add	sp, #76	; 0x4c
    ed10:	bdf0      	pop	{r4, r5, r6, r7, pc}
		transmit = bt_mesh_relay_retransmit_get();
    ed12:	f7fe fea5 	bl	da60 <bt_mesh_relay_retransmit_get>
	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA, transmit, K_NO_WAIT);
    ed16:	4601      	mov	r1, r0
    ed18:	2200      	movs	r2, #0
    ed1a:	2300      	movs	r3, #0
    ed1c:	2001      	movs	r0, #1
    ed1e:	f7fe ff81 	bl	dc24 <bt_mesh_adv_create>
	if (!buf) {
    ed22:	4604      	mov	r4, r0
    ed24:	b910      	cbnz	r0, ed2c <bt_mesh_net_recv+0x134>
		BT_ERR("Out of relay buffers");
    ed26:	2145      	movs	r1, #69	; 0x45
    ed28:	483a      	ldr	r0, [pc, #232]	; (ee14 <bt_mesh_net_recv+0x21c>)
    ed2a:	e7ae      	b.n	ec8a <bt_mesh_net_recv+0x92>
	sbuf->data[1] &= 0x80;
    ed2c:	9a01      	ldr	r2, [sp, #4]
    ed2e:	7853      	ldrb	r3, [r2, #1]
    ed30:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    ed34:	7053      	strb	r3, [r2, #1]
	sbuf->data[1] |= rx->ctx.recv_ttl - 1U;
    ed36:	9a01      	ldr	r2, [sp, #4]
    ed38:	f89d 301d 	ldrb.w	r3, [sp, #29]
    ed3c:	7851      	ldrb	r1, [r2, #1]
    ed3e:	3b01      	subs	r3, #1
    ed40:	430b      	orrs	r3, r1
    ed42:	7053      	strb	r3, [r2, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
    ed44:	f100 0508 	add.w	r5, r0, #8
    ed48:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    ed4c:	9901      	ldr	r1, [sp, #4]
    ed4e:	4628      	mov	r0, r5
    ed50:	f01d fe47 	bl	2c9e2 <net_buf_simple_add_mem>
	cred = &rx->sub->keys[SUBNET_KEY_TX_IDX(rx->sub)].msg;
    ed54:	9b04      	ldr	r3, [sp, #16]
    ed56:	7f9a      	ldrb	r2, [r3, #30]
    ed58:	1e90      	subs	r0, r2, #2
    ed5a:	4241      	negs	r1, r0
    ed5c:	4141      	adcs	r1, r0
    ed5e:	225a      	movs	r2, #90	; 0x5a
	if (rx->friend_cred) {
    ed60:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
	cred = &rx->sub->keys[SUBNET_KEY_TX_IDX(rx->sub)].msg;
    ed64:	434a      	muls	r2, r1
    ed66:	f102 013d 	add.w	r1, r2, #61	; 0x3d
	if (rx->friend_cred) {
    ed6a:	0746      	lsls	r6, r0, #29
	cred = &rx->sub->keys[SUBNET_KEY_TX_IDX(rx->sub)].msg;
    ed6c:	4419      	add	r1, r3
	if (rx->friend_cred) {
    ed6e:	d50b      	bpl.n	ed88 <bt_mesh_net_recv+0x190>
		buf->data[0] &= 0x80; /* Clear everything except IVI */
    ed70:	68a6      	ldr	r6, [r4, #8]
    ed72:	7830      	ldrb	r0, [r6, #0]
    ed74:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
    ed78:	7030      	strb	r0, [r6, #0]
		buf->data[0] |= cred->nid;
    ed7a:	68a0      	ldr	r0, [r4, #8]
    ed7c:	4413      	add	r3, r2
    ed7e:	7802      	ldrb	r2, [r0, #0]
    ed80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    ed84:	4313      	orrs	r3, r2
    ed86:	7003      	strb	r3, [r0, #0]
	if (net_encrypt(&buf->b, cred, BT_MESH_NET_IVI_RX(rx), false)) {
    ed88:	4b23      	ldr	r3, [pc, #140]	; (ee18 <bt_mesh_net_recv+0x220>)
    ed8a:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
    ed8e:	6818      	ldr	r0, [r3, #0]
    ed90:	f002 0201 	and.w	r2, r2, #1
    ed94:	1a82      	subs	r2, r0, r2
    ed96:	2300      	movs	r3, #0
    ed98:	4628      	mov	r0, r5
    ed9a:	f01b fb28 	bl	2a3ee <net_encrypt>
    ed9e:	b138      	cbz	r0, edb0 <bt_mesh_net_recv+0x1b8>
		BT_ERR("Re-encrypting failed");
    eda0:	2145      	movs	r1, #69	; 0x45
    eda2:	481e      	ldr	r0, [pc, #120]	; (ee1c <bt_mesh_net_recv+0x224>)
    eda4:	f018 f8e3 	bl	26f6e <printk>
	net_buf_unref(buf);
    eda8:	4620      	mov	r0, r4
    edaa:	f010 f8d3 	bl	1ef54 <net_buf_unref>
    edae:	e7ae      	b.n	ed0e <bt_mesh_net_recv+0x116>
	    (rx->friend_cred ||
    edb0:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    edb4:	0759      	lsls	r1, r3, #29
    edb6:	d510      	bpl.n	edda <bt_mesh_net_recv+0x1e2>
		bt_mesh_proxy_relay(&buf->b, rx->ctx.recv_dst);
    edb8:	f8bd 101a 	ldrh.w	r1, [sp, #26]
    edbc:	4628      	mov	r0, r5
    edbe:	f008 feed 	bl	17b9c <bt_mesh_proxy_relay>
	if (relay_to_adv(rx->net_if) || rx->friend_cred) {
    edc2:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    edc6:	f3c3 1301 	ubfx	r3, r3, #4, #2
	switch (net_if) {
    edca:	b15b      	cbz	r3, ede4 <bt_mesh_net_recv+0x1ec>
    edcc:	2b02      	cmp	r3, #2
    edce:	d016      	beq.n	edfe <bt_mesh_net_recv+0x206>
	if (relay_to_adv(rx->net_if) || rx->friend_cred) {
    edd0:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    edd4:	075b      	lsls	r3, r3, #29
    edd6:	d40c      	bmi.n	edf2 <bt_mesh_net_recv+0x1fa>
    edd8:	e7e6      	b.n	eda8 <bt_mesh_net_recv+0x1b0>
	     bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED)) {
    edda:	f01b fa8b 	bl	2a2f4 <bt_mesh_gatt_proxy_get>
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    edde:	2801      	cmp	r0, #1
    ede0:	d1ef      	bne.n	edc2 <bt_mesh_net_recv+0x1ca>
    ede2:	e7e9      	b.n	edb8 <bt_mesh_net_recv+0x1c0>
		return (bt_mesh_relay_get() == BT_MESH_RELAY_ENABLED);
    ede4:	f01b faa3 	bl	2a32e <bt_mesh_relay_get>
		return (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED);
    ede8:	1e42      	subs	r2, r0, #1
    edea:	4250      	negs	r0, r2
    edec:	4150      	adcs	r0, r2
	if (relay_to_adv(rx->net_if) || rx->friend_cred) {
    edee:	2800      	cmp	r0, #0
    edf0:	d0ee      	beq.n	edd0 <bt_mesh_net_recv+0x1d8>
		bt_mesh_adv_send(buf, NULL, NULL);
    edf2:	2200      	movs	r2, #0
    edf4:	4611      	mov	r1, r2
    edf6:	4620      	mov	r0, r4
    edf8:	f7fe ff24 	bl	dc44 <bt_mesh_adv_send>
    edfc:	e7d4      	b.n	eda8 <bt_mesh_net_recv+0x1b0>
		return (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED);
    edfe:	f01b fa79 	bl	2a2f4 <bt_mesh_gatt_proxy_get>
    ee02:	e7f1      	b.n	ede8 <bt_mesh_net_recv+0x1f0>
    ee04:	00031ebc 	.word	0x00031ebc
    ee08:	00031ee5 	.word	0x00031ee5
    ee0c:	20002d8c 	.word	0x20002d8c
    ee10:	200046ac 	.word	0x200046ac
    ee14:	00031f1f 	.word	0x00031f1f
    ee18:	20001dd8 	.word	0x20001dd8
    ee1c:	00031f39 	.word	0x00031f39

0000ee20 <bt_mesh_net_init>:
{
    ee20:	b510      	push	{r4, lr}
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    ee22:	4c08      	ldr	r4, [pc, #32]	; (ee44 <bt_mesh_net_init+0x24>)
    ee24:	2230      	movs	r2, #48	; 0x30
    ee26:	2100      	movs	r1, #0
    ee28:	f504 70fc 	add.w	r0, r4, #504	; 0x1f8
    ee2c:	f01e fbe5 	bl	2d5fa <memset>
    ee30:	4b05      	ldr	r3, [pc, #20]	; (ee48 <bt_mesh_net_init+0x28>)
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    ee32:	4a06      	ldr	r2, [pc, #24]	; (ee4c <bt_mesh_net_init+0x2c>)
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    ee34:	f8c4 31fc 	str.w	r3, [r4, #508]	; 0x1fc
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    ee38:	2300      	movs	r3, #0
    ee3a:	60e3      	str	r3, [r4, #12]
    ee3c:	e9c4 2304 	strd	r2, r3, [r4, #16]
}
    ee40:	bd10      	pop	{r4, pc}
    ee42:	bf00      	nop
    ee44:	20001dd8 	.word	0x20001dd8
    ee48:	0000e70d 	.word	0x0000e70d
    ee4c:	0000e231 	.word	0x0000e231

0000ee50 <bt_mesh_net_pending_iv_store>:
		BT_DBG("Stored IV value");
	}
}

void bt_mesh_net_pending_iv_store(void)
{
    ee50:	b507      	push	{r0, r1, r2, lr}
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
    ee52:	2000      	movs	r0, #0
    ee54:	f7ff fb24 	bl	e4a0 <atomic_test_bit.constprop.12>
    ee58:	b1e0      	cbz	r0, ee94 <bt_mesh_net_pending_iv_store+0x44>
	iv.iv_index = bt_mesh.iv_index;
    ee5a:	4a12      	ldr	r2, [pc, #72]	; (eea4 <bt_mesh_net_pending_iv_store+0x54>)
	iv.iv_update = atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS);
    ee5c:	2002      	movs	r0, #2
	iv.iv_index = bt_mesh.iv_index;
    ee5e:	6813      	ldr	r3, [r2, #0]
    ee60:	9300      	str	r3, [sp, #0]
	iv.iv_update = atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS);
    ee62:	f7ff fb1d 	bl	e4a0 <atomic_test_bit.constprop.12>
    ee66:	f89d 3004 	ldrb.w	r3, [sp, #4]
	iv.iv_duration = bt_mesh.ivu_duration;
    ee6a:	f892 21f0 	ldrb.w	r2, [r2, #496]	; 0x1f0
	iv.iv_update = atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS);
    ee6e:	f360 0300 	bfi	r3, r0, #0, #1
	iv.iv_duration = bt_mesh.ivu_duration;
    ee72:	f362 0347 	bfi	r3, r2, #1, #7
	err = settings_save_one("bt/mesh/IV", &iv, sizeof(iv));
    ee76:	4669      	mov	r1, sp
    ee78:	2205      	movs	r2, #5
    ee7a:	480b      	ldr	r0, [pc, #44]	; (eea8 <bt_mesh_net_pending_iv_store+0x58>)
	iv.iv_duration = bt_mesh.ivu_duration;
    ee7c:	f88d 3004 	strb.w	r3, [sp, #4]
	err = settings_save_one("bt/mesh/IV", &iv, sizeof(iv));
    ee80:	f7f6 fed0 	bl	5c24 <settings_save_one>
	if (err) {
    ee84:	b118      	cbz	r0, ee8e <bt_mesh_net_pending_iv_store+0x3e>
		BT_ERR("Failed to store IV value");
    ee86:	4809      	ldr	r0, [pc, #36]	; (eeac <bt_mesh_net_pending_iv_store+0x5c>)
    ee88:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Failed to clear IV");
    ee8a:	f018 f870 	bl	26f6e <printk>
		store_pending_iv();
	} else {
		clear_iv();
	}
}
    ee8e:	b003      	add	sp, #12
    ee90:	f85d fb04 	ldr.w	pc, [sp], #4
	err = settings_delete("bt/mesh/IV");
    ee94:	4804      	ldr	r0, [pc, #16]	; (eea8 <bt_mesh_net_pending_iv_store+0x58>)
    ee96:	f018 fc73 	bl	27780 <settings_delete>
	if (err) {
    ee9a:	2800      	cmp	r0, #0
    ee9c:	d0f7      	beq.n	ee8e <bt_mesh_net_pending_iv_store+0x3e>
		BT_ERR("Failed to clear IV");
    ee9e:	2145      	movs	r1, #69	; 0x45
    eea0:	4803      	ldr	r0, [pc, #12]	; (eeb0 <bt_mesh_net_pending_iv_store+0x60>)
    eea2:	e7f2      	b.n	ee8a <bt_mesh_net_pending_iv_store+0x3a>
    eea4:	20001dd8 	.word	0x20001dd8
    eea8:	00031e05 	.word	0x00031e05
    eeac:	00031e10 	.word	0x00031e10
    eeb0:	00031e2e 	.word	0x00031e2e

0000eeb4 <bt_mesh_net_pending_net_store>:
		BT_DBG("Stored Network value");
	}
}

void bt_mesh_net_pending_net_store(void)
{
    eeb4:	b530      	push	{r4, r5, lr}
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
    eeb6:	2000      	movs	r0, #0
{
    eeb8:	b087      	sub	sp, #28
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
    eeba:	f7ff faf1 	bl	e4a0 <atomic_test_bit.constprop.12>
    eebe:	b1e8      	cbz	r0, eefc <bt_mesh_net_pending_net_store+0x48>
	net.primary_addr = bt_mesh_primary_addr();
    eec0:	f003 f87e 	bl	11fc0 <bt_mesh_primary_addr>
	memcpy(net.dev_key, bt_mesh.dev_key, 16);
    eec4:	4c11      	ldr	r4, [pc, #68]	; (ef0c <bt_mesh_net_pending_net_store+0x58>)
	net.primary_addr = bt_mesh_primary_addr();
    eec6:	f8ad 0004 	strh.w	r0, [sp, #4]
	memcpy(net.dev_key, bt_mesh.dev_key, 16);
    eeca:	f10d 0206 	add.w	r2, sp, #6
    eece:	f104 0510 	add.w	r5, r4, #16
    eed2:	4623      	mov	r3, r4
    eed4:	cb03      	ldmia	r3!, {r0, r1}
    eed6:	42ab      	cmp	r3, r5
    eed8:	6010      	str	r0, [r2, #0]
    eeda:	6051      	str	r1, [r2, #4]
    eedc:	461c      	mov	r4, r3
    eede:	f102 0208 	add.w	r2, r2, #8
    eee2:	d1f6      	bne.n	eed2 <bt_mesh_net_pending_net_store+0x1e>
	err = settings_save_one("bt/mesh/Net", &net, sizeof(net));
    eee4:	2212      	movs	r2, #18
    eee6:	a901      	add	r1, sp, #4
    eee8:	4809      	ldr	r0, [pc, #36]	; (ef10 <bt_mesh_net_pending_net_store+0x5c>)
    eeea:	f7f6 fe9b 	bl	5c24 <settings_save_one>
	if (err) {
    eeee:	b118      	cbz	r0, eef8 <bt_mesh_net_pending_net_store+0x44>
		BT_ERR("Failed to store Network value");
    eef0:	4808      	ldr	r0, [pc, #32]	; (ef14 <bt_mesh_net_pending_net_store+0x60>)
    eef2:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Failed to clear Network");
    eef4:	f018 f83b 	bl	26f6e <printk>
		store_pending_net();
	} else {
		clear_net();
	}
}
    eef8:	b007      	add	sp, #28
    eefa:	bd30      	pop	{r4, r5, pc}
	err = settings_delete("bt/mesh/Net");
    eefc:	4804      	ldr	r0, [pc, #16]	; (ef10 <bt_mesh_net_pending_net_store+0x5c>)
    eefe:	f018 fc3f 	bl	27780 <settings_delete>
	if (err) {
    ef02:	2800      	cmp	r0, #0
    ef04:	d0f8      	beq.n	eef8 <bt_mesh_net_pending_net_store+0x44>
		BT_ERR("Failed to clear Network");
    ef06:	2145      	movs	r1, #69	; 0x45
    ef08:	4803      	ldr	r0, [pc, #12]	; (ef18 <bt_mesh_net_pending_net_store+0x64>)
    ef0a:	e7f3      	b.n	eef4 <bt_mesh_net_pending_net_store+0x40>
    ef0c:	20002000 	.word	0x20002000
    ef10:	00031e46 	.word	0x00031e46
    ef14:	00031e52 	.word	0x00031e52
    ef18:	00031e75 	.word	0x00031e75

0000ef1c <bt_mesh_net_pending_seq_store>:

void bt_mesh_net_pending_seq_store(void)
{
    ef1c:	b507      	push	{r0, r1, r2, lr}
	struct seq_val seq;
	int err;

	sys_put_le24(bt_mesh.seq, seq.val);
    ef1e:	4b0a      	ldr	r3, [pc, #40]	; (ef48 <bt_mesh_net_pending_seq_store+0x2c>)

	err = settings_save_one("bt/mesh/Seq", &seq, sizeof(seq));
    ef20:	480a      	ldr	r0, [pc, #40]	; (ef4c <bt_mesh_net_pending_seq_store+0x30>)
	dst[0] = val;
    ef22:	889a      	ldrh	r2, [r3, #4]
    ef24:	f8ad 2004 	strh.w	r2, [sp, #4]
	dst[2] = val >> 16;
    ef28:	88db      	ldrh	r3, [r3, #6]
    ef2a:	f88d 3006 	strb.w	r3, [sp, #6]
    ef2e:	2203      	movs	r2, #3
    ef30:	a901      	add	r1, sp, #4
    ef32:	f7f6 fe77 	bl	5c24 <settings_save_one>
	if (err) {
    ef36:	b118      	cbz	r0, ef40 <bt_mesh_net_pending_seq_store+0x24>
		BT_ERR("Failed to stor Seq value");
    ef38:	2145      	movs	r1, #69	; 0x45
    ef3a:	4805      	ldr	r0, [pc, #20]	; (ef50 <bt_mesh_net_pending_seq_store+0x34>)
    ef3c:	f018 f817 	bl	26f6e <printk>
	} else {
		BT_DBG("Stored Seq value");
	}
}
    ef40:	b003      	add	sp, #12
    ef42:	f85d fb04 	ldr.w	pc, [sp], #4
    ef46:	bf00      	nop
    ef48:	20001dd8 	.word	0x20001dd8
    ef4c:	00031e92 	.word	0x00031e92
    ef50:	00031e9e 	.word	0x00031e9e

0000ef54 <bt_mesh_net_settings_commit>:
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
}

void bt_mesh_net_settings_commit(void)
{
	if (bt_mesh.ivu_duration < BT_MESH_IVU_MIN_HOURS) {
    ef54:	4906      	ldr	r1, [pc, #24]	; (ef70 <bt_mesh_net_settings_commit+0x1c>)
    ef56:	f891 31f0 	ldrb.w	r3, [r1, #496]	; 0x1f0
    ef5a:	2b5f      	cmp	r3, #95	; 0x5f
    ef5c:	d806      	bhi.n	ef6c <bt_mesh_net_settings_commit+0x18>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    ef5e:	4a05      	ldr	r2, [pc, #20]	; (ef74 <bt_mesh_net_settings_commit+0x20>)
    ef60:	4805      	ldr	r0, [pc, #20]	; (ef78 <bt_mesh_net_settings_commit+0x24>)
    ef62:	2300      	movs	r3, #0
    ef64:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
    ef68:	f014 bf16 	b.w	23d98 <k_delayed_work_submit_to_queue>
		k_delayed_work_submit(&bt_mesh.ivu_timer, BT_MESH_IVU_TIMEOUT);
	}
}
    ef6c:	4770      	bx	lr
    ef6e:	bf00      	nop
    ef70:	20001dd8 	.word	0x20001dd8
    ef74:	a8c00000 	.word	0xa8c00000
    ef78:	20002490 	.word	0x20002490

0000ef7c <clear_net_key>:
		cb->evt_handler(sub, evt);
	}
}

static void clear_net_key(uint16_t net_idx)
{
    ef7c:	b510      	push	{r4, lr}
    ef7e:	b086      	sub	sp, #24
	char path[20];
	int err;

	BT_DBG("NetKeyIndex 0x%03x", net_idx);

	snprintk(path, sizeof(path), "bt/mesh/NetKey/%x", net_idx);
    ef80:	4603      	mov	r3, r0
{
    ef82:	4604      	mov	r4, r0
	snprintk(path, sizeof(path), "bt/mesh/NetKey/%x", net_idx);
    ef84:	4a07      	ldr	r2, [pc, #28]	; (efa4 <clear_net_key+0x28>)
    ef86:	2114      	movs	r1, #20
    ef88:	a801      	add	r0, sp, #4
    ef8a:	f017 fffd 	bl	26f88 <snprintk>
	err = settings_delete(path);
    ef8e:	a801      	add	r0, sp, #4
    ef90:	f018 fbf6 	bl	27780 <settings_delete>
	if (err) {
    ef94:	b120      	cbz	r0, efa0 <clear_net_key+0x24>
		BT_ERR("Failed to clear NetKeyIndex 0x%03x", net_idx);
    ef96:	4622      	mov	r2, r4
    ef98:	2145      	movs	r1, #69	; 0x45
    ef9a:	4803      	ldr	r0, [pc, #12]	; (efa8 <clear_net_key+0x2c>)
    ef9c:	f017 ffe7 	bl	26f6e <printk>
	} else {
		BT_DBG("Cleared NetKeyIndex 0x%03x", net_idx);
	}
}
    efa0:	b006      	add	sp, #24
    efa2:	bd10      	pop	{r4, pc}
    efa4:	00032043 	.word	0x00032043
    efa8:	00032055 	.word	0x00032055

0000efac <subnet_evt>:
{
    efac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	Z_STRUCT_SECTION_FOREACH(bt_mesh_subnet_cb, cb) {
    efb0:	4d0d      	ldr	r5, [pc, #52]	; (efe8 <subnet_evt+0x3c>)
    efb2:	4c0e      	ldr	r4, [pc, #56]	; (efec <subnet_evt+0x40>)
    efb4:	4e0e      	ldr	r6, [pc, #56]	; (eff0 <subnet_evt+0x44>)
{
    efb6:	4680      	mov	r8, r0
    efb8:	4689      	mov	r9, r1
    efba:	462f      	mov	r7, r5
	Z_STRUCT_SECTION_FOREACH(bt_mesh_subnet_cb, cb) {
    efbc:	42ac      	cmp	r4, r5
    efbe:	d908      	bls.n	efd2 <subnet_evt+0x26>
    efc0:	4631      	mov	r1, r6
    efc2:	480c      	ldr	r0, [pc, #48]	; (eff4 <subnet_evt+0x48>)
    efc4:	2245      	movs	r2, #69	; 0x45
    efc6:	f017 ffd2 	bl	26f6e <printk>
    efca:	2145      	movs	r1, #69	; 0x45
    efcc:	4630      	mov	r0, r6
    efce:	f018 fa47 	bl	27460 <assert_post_action>
    efd2:	42bc      	cmp	r4, r7
    efd4:	d301      	bcc.n	efda <subnet_evt+0x2e>
}
    efd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cb->evt_handler(sub, evt);
    efda:	f854 3b04 	ldr.w	r3, [r4], #4
    efde:	4649      	mov	r1, r9
    efe0:	4640      	mov	r0, r8
    efe2:	4798      	blx	r3
    efe4:	e7ea      	b.n	efbc <subnet_evt+0x10>
    efe6:	bf00      	nop
    efe8:	0002e334 	.word	0x0002e334
    efec:	0002e324 	.word	0x0002e324
    eff0:	0003219f 	.word	0x0003219f
    eff4:	0002fa94 	.word	0x0002fa94

0000eff8 <net_keys_create>:
	return bt_mesh_k2(key, p, p_len, &cred->nid, cred->enc, cred->privacy);
}

static int net_keys_create(struct bt_mesh_subnet_keys *keys,
			   const uint8_t key[16])
{
    eff8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t p = 0;
    effa:	2300      	movs	r3, #0
    effc:	f88d 300f 	strb.w	r3, [sp, #15]
	return bt_mesh_k2(key, p, p_len, &cred->nid, cred->enc, cred->privacy);
    f000:	f100 0322 	add.w	r3, r0, #34	; 0x22
{
    f004:	460e      	mov	r6, r1
	return bt_mesh_k2(key, p, p_len, &cred->nid, cred->enc, cred->privacy);
    f006:	9301      	str	r3, [sp, #4]
    f008:	f100 0312 	add.w	r3, r0, #18
    f00c:	9300      	str	r3, [sp, #0]
{
    f00e:	4605      	mov	r5, r0
	return bt_mesh_k2(key, p, p_len, &cred->nid, cred->enc, cred->privacy);
    f010:	f100 0311 	add.w	r3, r0, #17
    f014:	2201      	movs	r2, #1
    f016:	f10d 010f 	add.w	r1, sp, #15
    f01a:	4630      	mov	r0, r6
    f01c:	f002 fb5c 	bl	116d8 <bt_mesh_k2>
	int err;

	err = msg_cred_create(&keys->msg, &p, 1, key);
	if (err) {
    f020:	4604      	mov	r4, r0
    f022:	b130      	cbz	r0, f032 <net_keys_create+0x3a>
		BT_ERR("Unable to generate NID, EncKey & PrivacyKey");
    f024:	4819      	ldr	r0, [pc, #100]	; (f08c <net_keys_create+0x94>)
    f026:	2145      	movs	r1, #69	; 0x45
	BT_DBG("IdentityKey %s", bt_hex(keys->identity, 16));
#endif /* GATT_PROXY */

	err = bt_mesh_beacon_key(key, keys->beacon);
	if (err) {
		BT_ERR("Unable to generate beacon key");
    f028:	f017 ffa1 	bl	26f6e <printk>
	BT_DBG("BeaconKey %s", bt_hex(keys->beacon, 16));

	keys->valid = 1U;

	return 0;
}
    f02c:	4620      	mov	r0, r4
    f02e:	b004      	add	sp, #16
    f030:	bd70      	pop	{r4, r5, r6, pc}
    f032:	4633      	mov	r3, r6
    f034:	1c6a      	adds	r2, r5, #1
    f036:	f106 0110 	add.w	r1, r6, #16
    f03a:	f853 0b04 	ldr.w	r0, [r3], #4
    f03e:	f842 0b04 	str.w	r0, [r2], #4
    f042:	428b      	cmp	r3, r1
    f044:	d1f9      	bne.n	f03a <net_keys_create+0x42>
	err = bt_mesh_k3(key, keys->net_id);
    f046:	f105 0132 	add.w	r1, r5, #50	; 0x32
    f04a:	4630      	mov	r0, r6
    f04c:	f002 fbaa 	bl	117a4 <bt_mesh_k3>
	if (err) {
    f050:	4604      	mov	r4, r0
    f052:	b110      	cbz	r0, f05a <net_keys_create+0x62>
		BT_ERR("Unable to generate Net ID");
    f054:	2145      	movs	r1, #69	; 0x45
    f056:	480e      	ldr	r0, [pc, #56]	; (f090 <net_keys_create+0x98>)
    f058:	e7e6      	b.n	f028 <net_keys_create+0x30>
}

static inline int bt_mesh_identity_key(const uint8_t net_key[16],
				       uint8_t identity_key[16])
{
	return bt_mesh_id128(net_key, "nkik", identity_key);
    f05a:	f105 023a 	add.w	r2, r5, #58	; 0x3a
    f05e:	490d      	ldr	r1, [pc, #52]	; (f094 <net_keys_create+0x9c>)
    f060:	4630      	mov	r0, r6
    f062:	f002 fbf3 	bl	1184c <bt_mesh_id128>
	if (err) {
    f066:	4604      	mov	r4, r0
    f068:	b110      	cbz	r0, f070 <net_keys_create+0x78>
		BT_ERR("Unable to generate IdentityKey");
    f06a:	2145      	movs	r1, #69	; 0x45
    f06c:	480a      	ldr	r0, [pc, #40]	; (f098 <net_keys_create+0xa0>)
    f06e:	e7db      	b.n	f028 <net_keys_create+0x30>
}

static inline int bt_mesh_beacon_key(const uint8_t net_key[16],
				     uint8_t beacon_key[16])
{
	return bt_mesh_id128(net_key, "nkbk", beacon_key);
    f070:	f105 024a 	add.w	r2, r5, #74	; 0x4a
    f074:	4909      	ldr	r1, [pc, #36]	; (f09c <net_keys_create+0xa4>)
    f076:	4630      	mov	r0, r6
    f078:	f002 fbe8 	bl	1184c <bt_mesh_id128>
	if (err) {
    f07c:	4604      	mov	r4, r0
    f07e:	b110      	cbz	r0, f086 <net_keys_create+0x8e>
		BT_ERR("Unable to generate beacon key");
    f080:	2145      	movs	r1, #69	; 0x45
    f082:	4807      	ldr	r0, [pc, #28]	; (f0a0 <net_keys_create+0xa8>)
    f084:	e7d0      	b.n	f028 <net_keys_create+0x30>
	keys->valid = 1U;
    f086:	2301      	movs	r3, #1
    f088:	702b      	strb	r3, [r5, #0]
	return 0;
    f08a:	e7cf      	b.n	f02c <net_keys_create+0x34>
    f08c:	0003209a 	.word	0x0003209a
    f090:	000320cb 	.word	0x000320cb
    f094:	000320ea 	.word	0x000320ea
    f098:	000320ef 	.word	0x000320ef
    f09c:	00032113 	.word	0x00032113
    f0a0:	00032118 	.word	0x00032118

0000f0a4 <bt_mesh_subnet_get.part.1>:
struct bt_mesh_subnet *bt_mesh_subnet_get(uint16_t net_idx)
{
	for (int i = 0; i < ARRAY_SIZE(subnets); i++) {
		struct bt_mesh_subnet *sub = &subnets[i];

		if (sub->net_idx == net_idx) {
    f0a4:	4b03      	ldr	r3, [pc, #12]	; (f0b4 <bt_mesh_subnet_get.part.1+0x10>)
    f0a6:	8b9a      	ldrh	r2, [r3, #28]
			return sub;
		}
	}

	return NULL;
}
    f0a8:	4282      	cmp	r2, r0
    f0aa:	bf0c      	ite	eq
    f0ac:	4618      	moveq	r0, r3
    f0ae:	2000      	movne	r0, #0
    f0b0:	4770      	bx	lr
    f0b2:	bf00      	nop
    f0b4:	20000800 	.word	0x20000800

0000f0b8 <store_subnet>:
{
    f0b8:	b510      	push	{r4, lr}
    f0ba:	b08e      	sub	sp, #56	; 0x38
    f0bc:	4601      	mov	r1, r0
	for (int i = 0; i < ARRAY_SIZE(subnets); i++) {
    f0be:	f7ff fff1 	bl	f0a4 <bt_mesh_subnet_get.part.1>
	if (!sub) {
    f0c2:	4604      	mov	r4, r0
    f0c4:	b930      	cbnz	r0, f0d4 <store_subnet+0x1c>
		BT_WARN("NetKeyIndex 0x%03x not found", net_idx);
    f0c6:	460a      	mov	r2, r1
    f0c8:	481c      	ldr	r0, [pc, #112]	; (f13c <store_subnet+0x84>)
    f0ca:	2157      	movs	r1, #87	; 0x57
    f0cc:	f017 ff4f 	bl	26f6e <printk>
}
    f0d0:	b00e      	add	sp, #56	; 0x38
    f0d2:	bd10      	pop	{r4, pc}
	snprintk(path, sizeof(path), "bt/mesh/NetKey/%x", net_idx);
    f0d4:	460b      	mov	r3, r1
    f0d6:	4a1a      	ldr	r2, [pc, #104]	; (f140 <store_subnet+0x88>)
    f0d8:	2114      	movs	r1, #20
    f0da:	4668      	mov	r0, sp
    f0dc:	f017 ff54 	bl	26f88 <snprintk>
	memcpy(&key.val[0], sub->keys[0].net, 16);
    f0e0:	f104 032d 	add.w	r3, r4, #45	; 0x2d
    f0e4:	f10d 0215 	add.w	r2, sp, #21
    f0e8:	f104 013d 	add.w	r1, r4, #61	; 0x3d
    f0ec:	f853 0b04 	ldr.w	r0, [r3], #4
    f0f0:	f842 0b04 	str.w	r0, [r2], #4
    f0f4:	428b      	cmp	r3, r1
    f0f6:	d1f9      	bne.n	f0ec <store_subnet+0x34>
	memcpy(&key.val[1], sub->keys[1].net, 16);
    f0f8:	f104 0387 	add.w	r3, r4, #135	; 0x87
    f0fc:	f10d 0225 	add.w	r2, sp, #37	; 0x25
    f100:	f104 0197 	add.w	r1, r4, #151	; 0x97
    f104:	f853 0b04 	ldr.w	r0, [r3], #4
    f108:	f842 0b04 	str.w	r0, [r2], #4
    f10c:	428b      	cmp	r3, r1
    f10e:	d1f9      	bne.n	f104 <store_subnet+0x4c>
	key.kr_flag = 0U; /* Deprecated */
    f110:	f89d 3014 	ldrb.w	r3, [sp, #20]
	key.kr_phase = sub->kr_phase;
    f114:	7fa2      	ldrb	r2, [r4, #30]
    f116:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    f11a:	f362 0347 	bfi	r3, r2, #1, #7
	err = settings_save_one(path, &key, sizeof(key));
    f11e:	a905      	add	r1, sp, #20
    f120:	2221      	movs	r2, #33	; 0x21
    f122:	4668      	mov	r0, sp
	key.kr_phase = sub->kr_phase;
    f124:	f88d 3014 	strb.w	r3, [sp, #20]
	err = settings_save_one(path, &key, sizeof(key));
    f128:	f7f6 fd7c 	bl	5c24 <settings_save_one>
	if (err) {
    f12c:	2800      	cmp	r0, #0
    f12e:	d0cf      	beq.n	f0d0 <store_subnet+0x18>
		BT_ERR("Failed to store NetKey value");
    f130:	2145      	movs	r1, #69	; 0x45
    f132:	4804      	ldr	r0, [pc, #16]	; (f144 <store_subnet+0x8c>)
    f134:	f017 ff1b 	bl	26f6e <printk>
    f138:	e7ca      	b.n	f0d0 <store_subnet+0x18>
    f13a:	bf00      	nop
    f13c:	0003213b 	.word	0x0003213b
    f140:	00032043 	.word	0x00032043
    f144:	0003215d 	.word	0x0003215d

0000f148 <update_subnet_settings>:
		if (update->key_idx == key_idx) {
    f148:	4a11      	ldr	r2, [pc, #68]	; (f190 <update_subnet_settings+0x48>)
		if (!update->valid) {
    f14a:	7853      	ldrb	r3, [r2, #1]
{
    f14c:	b470      	push	{r4, r5, r6}
		if (update->key_idx == key_idx) {
    f14e:	8814      	ldrh	r4, [r2, #0]
		if (!update->valid) {
    f150:	f013 0f10 	tst.w	r3, #16
	uint8_t clear = store ? 0U : 1U;
    f154:	f081 0501 	eor.w	r5, r1, #1
		if (update->key_idx == key_idx) {
    f158:	f3c4 040b 	ubfx	r4, r4, #0, #12
		if (!update->valid) {
    f15c:	d10f      	bne.n	f17e <update_subnet_settings+0x36>
	free_slot->valid = 1U;
    f15e:	f043 0310 	orr.w	r3, r3, #16
    f162:	7053      	strb	r3, [r2, #1]
	free_slot->key_idx = net_idx;
    f164:	8813      	ldrh	r3, [r2, #0]
    f166:	f360 030b 	bfi	r3, r0, #0, #12
    f16a:	8013      	strh	r3, [r2, #0]
	free_slot->clear = clear;
    f16c:	f3c3 2307 	ubfx	r3, r3, #8, #8
		update->clear = clear;
    f170:	f365 1345 	bfi	r3, r5, #5, #1
    f174:	7053      	strb	r3, [r2, #1]
		bt_mesh_settings_store_schedule(
    f176:	2001      	movs	r0, #1
}
    f178:	bc70      	pop	{r4, r5, r6}
		bt_mesh_settings_store_schedule(
    f17a:	f005 ba7f 	b.w	1467c <bt_mesh_settings_store_schedule>
		if (update->key_idx == key_idx) {
    f17e:	4284      	cmp	r4, r0
    f180:	d0f6      	beq.n	f170 <update_subnet_settings+0x28>
		if (store) {
    f182:	b111      	cbz	r1, f18a <update_subnet_settings+0x42>
}
    f184:	bc70      	pop	{r4, r5, r6}
			store_subnet(net_idx);
    f186:	f7ff bf97 	b.w	f0b8 <store_subnet>
}
    f18a:	bc70      	pop	{r4, r5, r6}
			clear_net_key(net_idx);
    f18c:	f7ff bef6 	b.w	ef7c <clear_net_key>
    f190:	200046ae 	.word	0x200046ae

0000f194 <bt_mesh_net_flags>:
	if (sub && (sub->kr_phase == BT_MESH_KR_PHASE_2)) {
    f194:	b118      	cbz	r0, f19e <bt_mesh_net_flags+0xa>
    f196:	7f80      	ldrb	r0, [r0, #30]
	uint8_t flags = 0x00;
    f198:	1e82      	subs	r2, r0, #2
    f19a:	4250      	negs	r0, r2
    f19c:	4150      	adcs	r0, r2
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    f19e:	4b05      	ldr	r3, [pc, #20]	; (f1b4 <bt_mesh_net_flags+0x20>)
    f1a0:	f3bf 8f5b 	dmb	ish
    f1a4:	681b      	ldr	r3, [r3, #0]
    f1a6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS)) {
    f1aa:	075b      	lsls	r3, r3, #29
		flags |= BT_MESH_NET_FLAG_IVU;
    f1ac:	bf48      	it	mi
    f1ae:	f040 0002 	orrmi.w	r0, r0, #2
}
    f1b2:	4770      	bx	lr
    f1b4:	20001de0 	.word	0x20001de0

0000f1b8 <bt_mesh_subnet_add>:
{
    f1b8:	b570      	push	{r4, r5, r6, lr}
		if (subnets[i].net_idx == net_idx) {
    f1ba:	4d14      	ldr	r5, [pc, #80]	; (f20c <bt_mesh_subnet_add+0x54>)
    f1bc:	8bab      	ldrh	r3, [r5, #28]
{
    f1be:	4606      	mov	r6, r0
		if (subnets[i].net_idx == net_idx) {
    f1c0:	429e      	cmp	r6, r3
{
    f1c2:	4608      	mov	r0, r1
		if (subnets[i].net_idx == net_idx) {
    f1c4:	d00b      	beq.n	f1de <bt_mesh_subnet_add+0x26>
		if (!sub && subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
    f1c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f1ca:	4293      	cmp	r3, r2
    f1cc:	d11c      	bne.n	f208 <bt_mesh_subnet_add+0x50>
	err = net_keys_create(&sub->keys[0], key);
    f1ce:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    f1d2:	f7ff ff11 	bl	eff8 <net_keys_create>
	if (err) {
    f1d6:	4604      	mov	r4, r0
    f1d8:	b158      	cbz	r0, f1f2 <bt_mesh_subnet_add+0x3a>
		return STATUS_UNSPECIFIED;
    f1da:	2010      	movs	r0, #16
    f1dc:	e008      	b.n	f1f0 <bt_mesh_subnet_add+0x38>
		if (memcmp(key, sub->keys[0].net, 16)) {
    f1de:	2210      	movs	r2, #16
    f1e0:	f105 012d 	add.w	r1, r5, #45	; 0x2d
    f1e4:	f01e f9c0 	bl	2d568 <memcmp>
    f1e8:	2800      	cmp	r0, #0
		return STATUS_SUCCESS;
    f1ea:	bf14      	ite	ne
    f1ec:	2006      	movne	r0, #6
    f1ee:	2000      	moveq	r0, #0
}
    f1f0:	bd70      	pop	{r4, r5, r6, pc}
	subnet_evt(sub, BT_MESH_KEY_ADDED);
    f1f2:	4601      	mov	r1, r0
	sub->kr_phase = BT_MESH_KR_NORMAL;
    f1f4:	83e8      	strh	r0, [r5, #30]
	subnet_evt(sub, BT_MESH_KEY_ADDED);
    f1f6:	4628      	mov	r0, r5
	sub->net_idx = net_idx;
    f1f8:	83ae      	strh	r6, [r5, #28]
	subnet_evt(sub, BT_MESH_KEY_ADDED);
    f1fa:	f7ff fed7 	bl	efac <subnet_evt>
		bt_mesh_subnet_store(sub->net_idx);
    f1fe:	8ba8      	ldrh	r0, [r5, #28]
    f200:	f01b f929 	bl	2a456 <bt_mesh_subnet_store>
	return STATUS_SUCCESS;
    f204:	4620      	mov	r0, r4
    f206:	e7f3      	b.n	f1f0 <bt_mesh_subnet_add+0x38>
		return STATUS_INSUFF_RESOURCES;
    f208:	2005      	movs	r0, #5
    f20a:	e7f1      	b.n	f1f0 <bt_mesh_subnet_add+0x38>
    f20c:	20000800 	.word	0x20000800

0000f210 <bt_mesh_subnet_kr_phase_set>:
{
    f210:	b537      	push	{r0, r1, r2, r4, r5, lr}
	const uint8_t valid_transitions[] = {
    f212:	f640 4308 	movw	r3, #3080	; 0xc08
    f216:	f8ad 3004 	strh.w	r3, [sp, #4]
    f21a:	2308      	movs	r3, #8
{
    f21c:	460c      	mov	r4, r1
	const uint8_t valid_transitions[] = {
    f21e:	f88d 3006 	strb.w	r3, [sp, #6]
	for (int i = 0; i < ARRAY_SIZE(subnets); i++) {
    f222:	f7ff ff3f 	bl	f0a4 <bt_mesh_subnet_get.part.1>
	if (!sub) {
    f226:	4605      	mov	r5, r0
    f228:	b918      	cbnz	r0, f232 <bt_mesh_subnet_kr_phase_set+0x22>
		*phase = 0x00;
    f22a:	7020      	strb	r0, [r4, #0]
		return STATUS_INVALID_NETKEY;
    f22c:	2004      	movs	r0, #4
}
    f22e:	b003      	add	sp, #12
    f230:	bd30      	pop	{r4, r5, pc}
	if (*phase == sub->kr_phase) {
    f232:	780b      	ldrb	r3, [r1, #0]
    f234:	7f82      	ldrb	r2, [r0, #30]
    f236:	4293      	cmp	r3, r2
    f238:	d00d      	beq.n	f256 <bt_mesh_subnet_kr_phase_set+0x46>
	if (sub->kr_phase < ARRAY_SIZE(valid_transitions) &&
    f23a:	2a02      	cmp	r2, #2
    f23c:	d80d      	bhi.n	f25a <bt_mesh_subnet_kr_phase_set+0x4a>
	    valid_transitions[sub->kr_phase] & BIT(*phase)) {
    f23e:	a902      	add	r1, sp, #8
    f240:	4411      	add	r1, r2
    f242:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (sub->kr_phase < ARRAY_SIZE(valid_transitions) &&
    f246:	40d9      	lsrs	r1, r3
    f248:	07c9      	lsls	r1, r1, #31
    f24a:	d506      	bpl.n	f25a <bt_mesh_subnet_kr_phase_set+0x4a>
		key_refresh(sub, *phase);
    f24c:	4619      	mov	r1, r3
    f24e:	f01b f905 	bl	2a45c <key_refresh>
		*phase = sub->kr_phase;
    f252:	7fab      	ldrb	r3, [r5, #30]
    f254:	7023      	strb	r3, [r4, #0]
		return STATUS_SUCCESS;
    f256:	2000      	movs	r0, #0
    f258:	e7e9      	b.n	f22e <bt_mesh_subnet_kr_phase_set+0x1e>
	BT_WARN("Invalid KR transition: 0x%02x -> 0x%02x", sub->kr_phase,
    f25a:	4804      	ldr	r0, [pc, #16]	; (f26c <bt_mesh_subnet_kr_phase_set+0x5c>)
    f25c:	2157      	movs	r1, #87	; 0x57
    f25e:	f017 fe86 	bl	26f6e <printk>
	*phase = sub->kr_phase;
    f262:	7fab      	ldrb	r3, [r5, #30]
    f264:	7023      	strb	r3, [r4, #0]
	return STATUS_CANNOT_UPDATE;
    f266:	200b      	movs	r0, #11
    f268:	e7e1      	b.n	f22e <bt_mesh_subnet_kr_phase_set+0x1e>
    f26a:	bf00      	nop
    f26c:	00032016 	.word	0x00032016

0000f270 <bt_mesh_subnets_get>:
{
    f270:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (int i = 0; i < ARRAY_SIZE(subnets); i++) {
    f272:	2400      	movs	r4, #0
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    f274:	4e0b      	ldr	r6, [pc, #44]	; (f2a4 <bt_mesh_subnets_get+0x34>)
	size_t count = 0;
    f276:	4623      	mov	r3, r4
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    f278:	f64f 77ff 	movw	r7, #65535	; 0xffff
    f27c:	8bb5      	ldrh	r5, [r6, #28]
	for (int i = 0; i < ARRAY_SIZE(subnets); i++) {
    f27e:	b10c      	cbz	r4, f284 <bt_mesh_subnets_get+0x14>
	return count;
    f280:	4618      	mov	r0, r3
}
    f282:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    f284:	42bd      	cmp	r5, r7
    f286:	d0fb      	beq.n	f280 <bt_mesh_subnets_get+0x10>
		if (skip) {
    f288:	b112      	cbz	r2, f290 <bt_mesh_subnets_get+0x20>
			skip--;
    f28a:	3a01      	subs	r2, #1
			continue;
    f28c:	2401      	movs	r4, #1
    f28e:	e7f5      	b.n	f27c <bt_mesh_subnets_get+0xc>
		if (count >= max) {
    f290:	428b      	cmp	r3, r1
    f292:	d203      	bcs.n	f29c <bt_mesh_subnets_get+0x2c>
		net_idxs[count++] = sub->net_idx;
    f294:	f820 5013 	strh.w	r5, [r0, r3, lsl #1]
    f298:	3301      	adds	r3, #1
    f29a:	e7f7      	b.n	f28c <bt_mesh_subnets_get+0x1c>
			return -ENOMEM;
    f29c:	f06f 000b 	mvn.w	r0, #11
    f2a0:	e7ef      	b.n	f282 <bt_mesh_subnets_get+0x12>
    f2a2:	bf00      	nop
    f2a4:	20000800 	.word	0x20000800

0000f2a8 <bt_mesh_subnet_set>:

int bt_mesh_subnet_set(uint16_t net_idx, uint8_t kr_phase,
		       const uint8_t old_key[16], const uint8_t new_key[16])
{
    f2a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (subnets[i].net_idx == net_idx) {
    f2aa:	4d16      	ldr	r5, [pc, #88]	; (f304 <bt_mesh_subnet_set+0x5c>)
{
    f2ac:	461c      	mov	r4, r3
		if (subnets[i].net_idx == net_idx) {
    f2ae:	8bab      	ldrh	r3, [r5, #28]
    f2b0:	4298      	cmp	r0, r3
{
    f2b2:	4606      	mov	r6, r0
    f2b4:	460f      	mov	r7, r1
		if (subnets[i].net_idx == net_idx) {
    f2b6:	d01f      	beq.n	f2f8 <bt_mesh_subnet_set+0x50>
		if (!sub && subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
    f2b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    f2bc:	428b      	cmp	r3, r1
    f2be:	d11e      	bne.n	f2fe <bt_mesh_subnet_set+0x56>
	if (sub->net_idx == net_idx) {
		return -EALREADY;
	}

	for (int i = 0; i < ARRAY_SIZE(keys); i++) {
		if (!keys[i]) {
    f2c0:	b94a      	cbnz	r2, f2d6 <bt_mesh_subnet_set+0x2e>
    f2c2:	b994      	cbnz	r4, f2ea <bt_mesh_subnet_set+0x42>

	sub->net_idx = net_idx;
	sub->kr_phase = kr_phase;

	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY)) {
		sub->node_id = BT_MESH_NODE_IDENTITY_STOPPED;
    f2c4:	2400      	movs	r4, #0
	} else {
		sub->node_id = BT_MESH_NODE_IDENTITY_NOT_SUPPORTED;
	}

	/* Make sure we have valid beacon data to be sent */
	bt_mesh_beacon_update(sub);
    f2c6:	480f      	ldr	r0, [pc, #60]	; (f304 <bt_mesh_subnet_set+0x5c>)
	sub->net_idx = net_idx;
    f2c8:	83ae      	strh	r6, [r5, #28]
	sub->kr_phase = kr_phase;
    f2ca:	77af      	strb	r7, [r5, #30]
		sub->node_id = BT_MESH_NODE_IDENTITY_STOPPED;
    f2cc:	77ec      	strb	r4, [r5, #31]
	bt_mesh_beacon_update(sub);
    f2ce:	f7fe fe6b 	bl	dfa8 <bt_mesh_beacon_update>

	return 0;
    f2d2:	4620      	mov	r0, r4
    f2d4:	e008      	b.n	f2e8 <bt_mesh_subnet_set+0x40>
		if (net_keys_create(&sub->keys[i], keys[i])) {
    f2d6:	4611      	mov	r1, r2
    f2d8:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    f2dc:	f7ff fe8c 	bl	eff8 <net_keys_create>
    f2e0:	2800      	cmp	r0, #0
    f2e2:	d0ee      	beq.n	f2c2 <bt_mesh_subnet_set+0x1a>
			return -EIO;
    f2e4:	f06f 0004 	mvn.w	r0, #4
}
    f2e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (net_keys_create(&sub->keys[i], keys[i])) {
    f2ea:	4621      	mov	r1, r4
    f2ec:	4806      	ldr	r0, [pc, #24]	; (f308 <bt_mesh_subnet_set+0x60>)
    f2ee:	f7ff fe83 	bl	eff8 <net_keys_create>
    f2f2:	2800      	cmp	r0, #0
    f2f4:	d0e6      	beq.n	f2c4 <bt_mesh_subnet_set+0x1c>
    f2f6:	e7f5      	b.n	f2e4 <bt_mesh_subnet_set+0x3c>
		return -EALREADY;
    f2f8:	f06f 0077 	mvn.w	r0, #119	; 0x77
    f2fc:	e7f4      	b.n	f2e8 <bt_mesh_subnet_set+0x40>
		return -ENOMEM;
    f2fe:	f06f 000b 	mvn.w	r0, #11
    f302:	e7f1      	b.n	f2e8 <bt_mesh_subnet_set+0x40>
    f304:	20000800 	.word	0x20000800
    f308:	20000886 	.word	0x20000886

0000f30c <net_key_set>:
	return false;
}

static int net_key_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
    f30c:	b570      	push	{r4, r5, r6, lr}
    f30e:	4614      	mov	r4, r2
    f310:	b08a      	sub	sp, #40	; 0x28
    f312:	461e      	mov	r6, r3
	struct net_key_val key;
	int err;
	uint16_t net_idx;

	if (!name) {
    f314:	b940      	cbnz	r0, f328 <net_key_set+0x1c>
		BT_ERR("Insufficient number of arguments");
    f316:	2145      	movs	r1, #69	; 0x45
    f318:	4814      	ldr	r0, [pc, #80]	; (f36c <net_key_set+0x60>)
    f31a:	f017 fe28 	bl	26f6e <printk>
    f31e:	f06f 0401 	mvn.w	r4, #1
	BT_DBG("NetKeyIndex 0x%03x recovered from storage", net_idx);

	return bt_mesh_subnet_set(
		net_idx, key.kr_phase, key.val[0],
		(key.kr_phase != BT_MESH_KR_NORMAL) ? key.val[1] : NULL);
}
    f322:	4620      	mov	r0, r4
    f324:	b00a      	add	sp, #40	; 0x28
    f326:	bd70      	pop	{r4, r5, r6, pc}
	net_idx = strtol(name, NULL, 16);
    f328:	2210      	movs	r2, #16
    f32a:	2100      	movs	r1, #0
    f32c:	f016 ffb4 	bl	26298 <strtol>
	err = bt_mesh_settings_set(read_cb, cb_arg, &key, sizeof(key));
    f330:	2321      	movs	r3, #33	; 0x21
	net_idx = strtol(name, NULL, 16);
    f332:	b285      	uxth	r5, r0
	err = bt_mesh_settings_set(read_cb, cb_arg, &key, sizeof(key));
    f334:	aa01      	add	r2, sp, #4
    f336:	4620      	mov	r0, r4
    f338:	4631      	mov	r1, r6
    f33a:	f005 f97d 	bl	14638 <bt_mesh_settings_set>
	if (err) {
    f33e:	4604      	mov	r4, r0
    f340:	b120      	cbz	r0, f34c <net_key_set+0x40>
		BT_ERR("Failed to set \'net-key\'");
    f342:	2145      	movs	r1, #69	; 0x45
    f344:	480a      	ldr	r0, [pc, #40]	; (f370 <net_key_set+0x64>)
    f346:	f017 fe12 	bl	26f6e <printk>
		return err;
    f34a:	e7ea      	b.n	f322 <net_key_set+0x16>
		net_idx, key.kr_phase, key.val[0],
    f34c:	f89d 3004 	ldrb.w	r3, [sp, #4]
	return bt_mesh_subnet_set(
    f350:	0859      	lsrs	r1, r3, #1
    f352:	f013 03fe 	ands.w	r3, r3, #254	; 0xfe
    f356:	bf18      	it	ne
    f358:	f10d 0315 	addne.w	r3, sp, #21
    f35c:	f10d 0205 	add.w	r2, sp, #5
    f360:	4628      	mov	r0, r5
    f362:	f7ff ffa1 	bl	f2a8 <bt_mesh_subnet_set>
    f366:	4604      	mov	r4, r0
    f368:	e7db      	b.n	f322 <net_key_set+0x16>
    f36a:	bf00      	nop
    f36c:	000307a1 	.word	0x000307a1
    f370:	0003207d 	.word	0x0003207d

0000f374 <bt_mesh_subnet_find>:
{
    f374:	4603      	mov	r3, r0
		if (subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
    f376:	4807      	ldr	r0, [pc, #28]	; (f394 <bt_mesh_subnet_find+0x20>)
{
    f378:	b510      	push	{r4, lr}
		if (subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
    f37a:	8b84      	ldrh	r4, [r0, #28]
    f37c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f380:	4294      	cmp	r4, r2
    f382:	d005      	beq.n	f390 <bt_mesh_subnet_find+0x1c>
		if (!cb || cb(&subnets[i], cb_data)) {
    f384:	b90b      	cbnz	r3, f38a <bt_mesh_subnet_find+0x16>
			return &subnets[i];
    f386:	4803      	ldr	r0, [pc, #12]	; (f394 <bt_mesh_subnet_find+0x20>)
}
    f388:	bd10      	pop	{r4, pc}
		if (!cb || cb(&subnets[i], cb_data)) {
    f38a:	4798      	blx	r3
    f38c:	2800      	cmp	r0, #0
    f38e:	d1fa      	bne.n	f386 <bt_mesh_subnet_find+0x12>
	return NULL;
    f390:	2000      	movs	r0, #0
    f392:	e7f9      	b.n	f388 <bt_mesh_subnet_find+0x14>
    f394:	20000800 	.word	0x20000800

0000f398 <bt_mesh_subnet_foreach>:
{
    f398:	b508      	push	{r3, lr}
    f39a:	4603      	mov	r3, r0
		if (subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
    f39c:	4805      	ldr	r0, [pc, #20]	; (f3b4 <bt_mesh_subnet_foreach+0x1c>)
    f39e:	8b81      	ldrh	r1, [r0, #28]
    f3a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f3a4:	4291      	cmp	r1, r2
    f3a6:	d002      	beq.n	f3ae <bt_mesh_subnet_foreach+0x16>
		cb(&subnets[i]);
    f3a8:	4798      	blx	r3
		count++;
    f3aa:	2001      	movs	r0, #1
}
    f3ac:	bd08      	pop	{r3, pc}
    f3ae:	2000      	movs	r0, #0
	return count;
    f3b0:	e7fc      	b.n	f3ac <bt_mesh_subnet_foreach+0x14>
    f3b2:	bf00      	nop
    f3b4:	20000800 	.word	0x20000800

0000f3b8 <bt_mesh_subnet_next>:
	if (sub) {
    f3b8:	b178      	cbz	r0, f3da <bt_mesh_subnet_next+0x22>
		if (sub == &subnets[ARRAY_SIZE(subnets)]) {
    f3ba:	4a09      	ldr	r2, [pc, #36]	; (f3e0 <bt_mesh_subnet_next+0x28>)
		sub++;
    f3bc:	f100 03e0 	add.w	r3, r0, #224	; 0xe0
		sub = &subnets[0];
    f3c0:	f1a2 01e0 	sub.w	r1, r2, #224	; 0xe0
    f3c4:	4293      	cmp	r3, r2
    f3c6:	bf08      	it	eq
    f3c8:	460b      	moveq	r3, r1
		if (sub->net_idx != BT_MESH_KEY_UNUSED) {
    f3ca:	8b98      	ldrh	r0, [r3, #28]
}
    f3cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f3d0:	4290      	cmp	r0, r2
    f3d2:	bf14      	ite	ne
    f3d4:	4618      	movne	r0, r3
    f3d6:	2000      	moveq	r0, #0
    f3d8:	4770      	bx	lr
		sub = &subnets[0];
    f3da:	4b02      	ldr	r3, [pc, #8]	; (f3e4 <bt_mesh_subnet_next+0x2c>)
    f3dc:	e7f5      	b.n	f3ca <bt_mesh_subnet_next+0x12>
    f3de:	bf00      	nop
    f3e0:	200008e0 	.word	0x200008e0
    f3e4:	20000800 	.word	0x20000800

0000f3e8 <bt_mesh_net_keys_reset>:
		if (sub->net_idx != BT_MESH_KEY_UNUSED) {
    f3e8:	4804      	ldr	r0, [pc, #16]	; (f3fc <bt_mesh_net_keys_reset+0x14>)
    f3ea:	8b82      	ldrh	r2, [r0, #28]
    f3ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f3f0:	429a      	cmp	r2, r3
    f3f2:	d001      	beq.n	f3f8 <bt_mesh_net_keys_reset+0x10>
			subnet_del(sub);
    f3f4:	f01b b819 	b.w	2a42a <subnet_del>
}
    f3f8:	4770      	bx	lr
    f3fa:	bf00      	nop
    f3fc:	20000800 	.word	0x20000800

0000f400 <bt_mesh_net_cred_find>:
{
    f400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f404:	461d      	mov	r5, r3
		if (!frnd->subnet) {
    f406:	4b34      	ldr	r3, [pc, #208]	; (f4d8 <bt_mesh_net_cred_find+0xd8>)
    f408:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
{
    f40c:	4604      	mov	r4, r0
    f40e:	460e      	mov	r6, r1
    f410:	4617      	mov	r7, r2
    f412:	4698      	mov	r8, r3
		if (!frnd->subnet) {
    f414:	f1bc 0f00 	cmp.w	ip, #0
    f418:	d013      	beq.n	f442 <bt_mesh_net_cred_find+0x42>
		rx->sub = frnd->subnet;
    f41a:	f8c0 c000 	str.w	ip, [r0]
			if (!rx->sub->keys[j].valid) {
    f41e:	f89c c02c 	ldrb.w	ip, [ip, #44]	; 0x2c
    f422:	f1bc 0f00 	cmp.w	ip, #0
    f426:	d002      	beq.n	f42e <bt_mesh_net_cred_find+0x2e>
			if (cb(rx, in, out, &frnd->cred[j])) {
    f428:	3334      	adds	r3, #52	; 0x34
    f42a:	47a8      	blx	r5
    f42c:	bb68      	cbnz	r0, f48a <bt_mesh_net_cred_find+0x8a>
			if (!rx->sub->keys[j].valid) {
    f42e:	6823      	ldr	r3, [r4, #0]
    f430:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
    f434:	b12b      	cbz	r3, f442 <bt_mesh_net_cred_find+0x42>
			if (cb(rx, in, out, &frnd->cred[j])) {
    f436:	4b29      	ldr	r3, [pc, #164]	; (f4dc <bt_mesh_net_cred_find+0xdc>)
    f438:	463a      	mov	r2, r7
    f43a:	4631      	mov	r1, r6
    f43c:	4620      	mov	r0, r4
    f43e:	47a8      	blx	r5
    f440:	b9b0      	cbnz	r0, f470 <bt_mesh_net_cred_find+0x70>
		if (!frnd->subnet) {
    f442:	f8d8 3118 	ldr.w	r3, [r8, #280]	; 0x118
    f446:	b313      	cbz	r3, f48e <bt_mesh_net_cred_find+0x8e>
		rx->sub = frnd->subnet;
    f448:	6023      	str	r3, [r4, #0]
			if (!rx->sub->keys[j].valid) {
    f44a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    f44e:	b12b      	cbz	r3, f45c <bt_mesh_net_cred_find+0x5c>
			if (cb(rx, in, out, &frnd->cred[j])) {
    f450:	4b23      	ldr	r3, [pc, #140]	; (f4e0 <bt_mesh_net_cred_find+0xe0>)
    f452:	463a      	mov	r2, r7
    f454:	4631      	mov	r1, r6
    f456:	4620      	mov	r0, r4
    f458:	47a8      	blx	r5
    f45a:	b9b0      	cbnz	r0, f48a <bt_mesh_net_cred_find+0x8a>
			if (!rx->sub->keys[j].valid) {
    f45c:	6823      	ldr	r3, [r4, #0]
    f45e:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
    f462:	b1a3      	cbz	r3, f48e <bt_mesh_net_cred_find+0x8e>
			if (cb(rx, in, out, &frnd->cred[j])) {
    f464:	4b1f      	ldr	r3, [pc, #124]	; (f4e4 <bt_mesh_net_cred_find+0xe4>)
    f466:	463a      	mov	r2, r7
    f468:	4631      	mov	r1, r6
    f46a:	4620      	mov	r0, r4
    f46c:	47a8      	blx	r5
    f46e:	b170      	cbz	r0, f48e <bt_mesh_net_cred_find+0x8e>
		for (j = 0; j < ARRAY_SIZE(frnd->cred); j++) {
    f470:	2201      	movs	r2, #1
				rx->new_key = (j > 0);
    f472:	7d23      	ldrb	r3, [r4, #20]
    f474:	f362 0341 	bfi	r3, r2, #1, #1
				rx->friend_cred = 1U;
    f478:	f043 0304 	orr.w	r3, r3, #4
				rx->friend_cred = 0U;
    f47c:	7523      	strb	r3, [r4, #20]
				rx->ctx.net_idx = rx->sub->net_idx;
    f47e:	6823      	ldr	r3, [r4, #0]
    f480:	8b9b      	ldrh	r3, [r3, #28]
    f482:	80a3      	strh	r3, [r4, #4]
				return true;
    f484:	2001      	movs	r0, #1
}
    f486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		for (j = 0; j < ARRAY_SIZE(frnd->cred); j++) {
    f48a:	2200      	movs	r2, #0
    f48c:	e7f1      	b.n	f472 <bt_mesh_net_cred_find+0x72>
		rx->sub = &subnets[i];
    f48e:	4b16      	ldr	r3, [pc, #88]	; (f4e8 <bt_mesh_net_cred_find+0xe8>)
    f490:	6023      	str	r3, [r4, #0]
		if (rx->sub->net_idx == BT_MESH_KEY_UNUSED) {
    f492:	8b99      	ldrh	r1, [r3, #28]
    f494:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f498:	4291      	cmp	r1, r2
    f49a:	d01b      	beq.n	f4d4 <bt_mesh_net_cred_find+0xd4>
			if (!rx->sub->keys[j].valid) {
    f49c:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
    f4a0:	b12a      	cbz	r2, f4ae <bt_mesh_net_cred_find+0xae>
			if (cb(rx, in, out, &rx->sub->keys[j].msg)) {
    f4a2:	333d      	adds	r3, #61	; 0x3d
    f4a4:	463a      	mov	r2, r7
    f4a6:	4631      	mov	r1, r6
    f4a8:	4620      	mov	r0, r4
    f4aa:	47a8      	blx	r5
    f4ac:	b980      	cbnz	r0, f4d0 <bt_mesh_net_cred_find+0xd0>
			if (!rx->sub->keys[j].valid) {
    f4ae:	6823      	ldr	r3, [r4, #0]
    f4b0:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
    f4b4:	b172      	cbz	r2, f4d4 <bt_mesh_net_cred_find+0xd4>
			if (cb(rx, in, out, &rx->sub->keys[j].msg)) {
    f4b6:	3397      	adds	r3, #151	; 0x97
    f4b8:	463a      	mov	r2, r7
    f4ba:	4631      	mov	r1, r6
    f4bc:	4620      	mov	r0, r4
    f4be:	47a8      	blx	r5
    f4c0:	b140      	cbz	r0, f4d4 <bt_mesh_net_cred_find+0xd4>
		for (j = 0; j < ARRAY_SIZE(rx->sub->keys); j++) {
    f4c2:	2201      	movs	r2, #1
				rx->new_key = (j > 0);
    f4c4:	7d23      	ldrb	r3, [r4, #20]
    f4c6:	f362 0341 	bfi	r3, r2, #1, #1
				rx->friend_cred = 0U;
    f4ca:	f36f 0382 	bfc	r3, #2, #1
    f4ce:	e7d5      	b.n	f47c <bt_mesh_net_cred_find+0x7c>
		for (j = 0; j < ARRAY_SIZE(rx->sub->keys); j++) {
    f4d0:	2200      	movs	r2, #0
    f4d2:	e7f7      	b.n	f4c4 <bt_mesh_net_cred_find+0xc4>
	return false;
    f4d4:	2000      	movs	r0, #0
    f4d6:	e7d6      	b.n	f486 <bt_mesh_net_cred_find+0x86>
    f4d8:	20001dd8 	.word	0x20001dd8
    f4dc:	20001e2d 	.word	0x20001e2d
    f4e0:	20001ef4 	.word	0x20001ef4
    f4e4:	20001f15 	.word	0x20001f15
    f4e8:	20000800 	.word	0x20000800

0000f4ec <bt_mesh_subnet_pending_store>:

BT_MESH_SETTINGS_DEFINE(subnet, "NetKey", net_key_set);

void bt_mesh_subnet_pending_store(void)
{
    f4ec:	b510      	push	{r4, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(net_key_updates); i++) {
		struct net_key_update *update = &net_key_updates[i];

		if (!update->valid) {
    f4ee:	4c09      	ldr	r4, [pc, #36]	; (f514 <bt_mesh_subnet_pending_store+0x28>)
    f4f0:	7863      	ldrb	r3, [r4, #1]
    f4f2:	06da      	lsls	r2, r3, #27
    f4f4:	d50a      	bpl.n	f50c <bt_mesh_subnet_pending_store+0x20>
			continue;
		}

		if (update->clear) {
    f4f6:	8820      	ldrh	r0, [r4, #0]
    f4f8:	069b      	lsls	r3, r3, #26
    f4fa:	f3c0 000b 	ubfx	r0, r0, #0, #12
    f4fe:	d506      	bpl.n	f50e <bt_mesh_subnet_pending_store+0x22>
			clear_net_key(update->key_idx);
    f500:	f7ff fd3c 	bl	ef7c <clear_net_key>
		} else {
			store_subnet(update->key_idx);
		}

		update->valid = 0U;
    f504:	7863      	ldrb	r3, [r4, #1]
    f506:	f36f 1304 	bfc	r3, #4, #1
    f50a:	7063      	strb	r3, [r4, #1]
	}
}
    f50c:	bd10      	pop	{r4, pc}
			store_subnet(update->key_idx);
    f50e:	f7ff fdd3 	bl	f0b8 <store_subnet>
    f512:	e7f7      	b.n	f504 <bt_mesh_subnet_pending_store+0x18>
    f514:	200046ae 	.word	0x200046ae

0000f518 <clear_app_key>:

	return NULL;
}

static void clear_app_key(uint16_t app_idx)
{
    f518:	b510      	push	{r4, lr}
    f51a:	b086      	sub	sp, #24
	char path[20];
	int err;

	snprintk(path, sizeof(path), "bt/mesh/AppKey/%x", app_idx);
    f51c:	4603      	mov	r3, r0
{
    f51e:	4604      	mov	r4, r0
	snprintk(path, sizeof(path), "bt/mesh/AppKey/%x", app_idx);
    f520:	4a07      	ldr	r2, [pc, #28]	; (f540 <clear_app_key+0x28>)
    f522:	2114      	movs	r1, #20
    f524:	a801      	add	r0, sp, #4
    f526:	f017 fd2f 	bl	26f88 <snprintk>
	err = settings_delete(path);
    f52a:	a801      	add	r0, sp, #4
    f52c:	f018 f928 	bl	27780 <settings_delete>
	if (err) {
    f530:	b120      	cbz	r0, f53c <clear_app_key+0x24>
		BT_ERR("Failed to clear AppKeyIndex 0x%03x", app_idx);
    f532:	4622      	mov	r2, r4
    f534:	2145      	movs	r1, #69	; 0x45
    f536:	4803      	ldr	r0, [pc, #12]	; (f544 <clear_app_key+0x2c>)
    f538:	f017 fd19 	bl	26f6e <printk>
	} else {
		BT_DBG("Cleared AppKeyIndex 0x%03x", app_idx);
	}
}
    f53c:	b006      	add	sp, #24
    f53e:	bd10      	pop	{r4, pc}
    f540:	00032272 	.word	0x00032272
    f544:	00032284 	.word	0x00032284

0000f548 <app_key_evt>:

	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_APP_KEYS_PENDING);
}

static void app_key_evt(struct app_key *app, enum bt_mesh_key_evt evt)
{
    f548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	Z_STRUCT_SECTION_FOREACH(bt_mesh_app_key_cb, cb) {
    f54c:	4e0d      	ldr	r6, [pc, #52]	; (f584 <app_key_evt+0x3c>)
    f54e:	4c0e      	ldr	r4, [pc, #56]	; (f588 <app_key_evt+0x40>)
    f550:	4f0e      	ldr	r7, [pc, #56]	; (f58c <app_key_evt+0x44>)
{
    f552:	4605      	mov	r5, r0
    f554:	4689      	mov	r9, r1
    f556:	46b0      	mov	r8, r6
	Z_STRUCT_SECTION_FOREACH(bt_mesh_app_key_cb, cb) {
    f558:	42b4      	cmp	r4, r6
    f55a:	d908      	bls.n	f56e <app_key_evt+0x26>
    f55c:	4639      	mov	r1, r7
    f55e:	480c      	ldr	r0, [pc, #48]	; (f590 <app_key_evt+0x48>)
    f560:	22b2      	movs	r2, #178	; 0xb2
    f562:	f017 fd04 	bl	26f6e <printk>
    f566:	21b2      	movs	r1, #178	; 0xb2
    f568:	4638      	mov	r0, r7
    f56a:	f017 ff79 	bl	27460 <assert_post_action>
    f56e:	4544      	cmp	r4, r8
    f570:	d301      	bcc.n	f576 <app_key_evt+0x2e>
		cb->evt_handler(app->app_idx, app->net_idx, evt);
	}
}
    f572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cb->evt_handler(app->app_idx, app->net_idx, evt);
    f576:	f854 3b04 	ldr.w	r3, [r4], #4
    f57a:	8829      	ldrh	r1, [r5, #0]
    f57c:	8868      	ldrh	r0, [r5, #2]
    f57e:	464a      	mov	r2, r9
    f580:	4798      	blx	r3
    f582:	e7e9      	b.n	f558 <app_key_evt+0x10>
    f584:	0002e338 	.word	0x0002e338
    f588:	0002e334 	.word	0x0002e334
    f58c:	000321d1 	.word	0x000321d1
    f590:	0002fa94 	.word	0x0002fa94

0000f594 <store_app_key>:
{
    f594:	b510      	push	{r4, lr}
    f596:	b08e      	sub	sp, #56	; 0x38
	snprintk(path, sizeof(path), "bt/mesh/AppKey/%x", app_idx);
    f598:	4603      	mov	r3, r0
{
    f59a:	4604      	mov	r4, r0
	snprintk(path, sizeof(path), "bt/mesh/AppKey/%x", app_idx);
    f59c:	4a1a      	ldr	r2, [pc, #104]	; (f608 <store_app_key+0x74>)
    f59e:	2114      	movs	r1, #20
    f5a0:	4668      	mov	r0, sp
    f5a2:	f017 fcf1 	bl	26f88 <snprintk>
		if (apps[i].app_idx == app_idx) {
    f5a6:	4b19      	ldr	r3, [pc, #100]	; (f60c <store_app_key+0x78>)
    f5a8:	885a      	ldrh	r2, [r3, #2]
    f5aa:	42a2      	cmp	r2, r4
    f5ac:	d006      	beq.n	f5bc <store_app_key+0x28>
		BT_WARN("ApKeyIndex 0x%03x not found", app_idx);
    f5ae:	4818      	ldr	r0, [pc, #96]	; (f610 <store_app_key+0x7c>)
    f5b0:	4622      	mov	r2, r4
    f5b2:	2157      	movs	r1, #87	; 0x57
		BT_ERR("Failed to store AppKey %s value", log_strdup(path));
    f5b4:	f017 fcdb 	bl	26f6e <printk>
}
    f5b8:	b00e      	add	sp, #56	; 0x38
    f5ba:	bd10      	pop	{r4, pc}
	key.net_idx = app->net_idx,
    f5bc:	881a      	ldrh	r2, [r3, #0]
    f5be:	f8ad 2014 	strh.w	r2, [sp, #20]
	key.updated = app->updated,
    f5c2:	791a      	ldrb	r2, [r3, #4]
    f5c4:	f88d 2016 	strb.w	r2, [sp, #22]
	memcpy(key.val[0], app->keys[0].val, 16);
    f5c8:	f10d 0117 	add.w	r1, sp, #23
    f5cc:	1d9a      	adds	r2, r3, #6
    f5ce:	3316      	adds	r3, #22
    f5d0:	f852 0b04 	ldr.w	r0, [r2], #4
    f5d4:	f841 0b04 	str.w	r0, [r1], #4
    f5d8:	429a      	cmp	r2, r3
    f5da:	d1f9      	bne.n	f5d0 <store_app_key+0x3c>
	memcpy(key.val[1], app->keys[1].val, 16);
    f5dc:	4b0d      	ldr	r3, [pc, #52]	; (f614 <store_app_key+0x80>)
    f5de:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    f5e2:	f103 0110 	add.w	r1, r3, #16
    f5e6:	f853 0b04 	ldr.w	r0, [r3], #4
    f5ea:	f842 0b04 	str.w	r0, [r2], #4
    f5ee:	428b      	cmp	r3, r1
    f5f0:	d1f9      	bne.n	f5e6 <store_app_key+0x52>
	err = settings_save_one(path, &key, sizeof(key));
    f5f2:	2223      	movs	r2, #35	; 0x23
    f5f4:	a905      	add	r1, sp, #20
    f5f6:	4668      	mov	r0, sp
    f5f8:	f7f6 fb14 	bl	5c24 <settings_save_one>
	if (err) {
    f5fc:	2800      	cmp	r0, #0
    f5fe:	d0db      	beq.n	f5b8 <store_app_key+0x24>
		BT_ERR("Failed to store AppKey %s value", log_strdup(path));
    f600:	466a      	mov	r2, sp
    f602:	2145      	movs	r1, #69	; 0x45
    f604:	4804      	ldr	r0, [pc, #16]	; (f618 <store_app_key+0x84>)
    f606:	e7d5      	b.n	f5b4 <store_app_key+0x20>
    f608:	00032272 	.word	0x00032272
    f60c:	200010da 	.word	0x200010da
    f610:	000322ac 	.word	0x000322ac
    f614:	200010f1 	.word	0x200010f1
    f618:	000322cd 	.word	0x000322cd

0000f61c <update_app_key_settings>:
		if (update->key_idx == key_idx) {
    f61c:	4a11      	ldr	r2, [pc, #68]	; (f664 <update_app_key_settings+0x48>)
		if (!update->valid) {
    f61e:	7853      	ldrb	r3, [r2, #1]
{
    f620:	b470      	push	{r4, r5, r6}
		if (update->key_idx == key_idx) {
    f622:	8814      	ldrh	r4, [r2, #0]
		if (!update->valid) {
    f624:	f013 0f10 	tst.w	r3, #16
	uint8_t clear = store ? 0U : 1U;
    f628:	f081 0501 	eor.w	r5, r1, #1
		if (update->key_idx == key_idx) {
    f62c:	f3c4 040b 	ubfx	r4, r4, #0, #12
		if (!update->valid) {
    f630:	d10f      	bne.n	f652 <update_app_key_settings+0x36>
	free_slot->valid = 1U;
    f632:	f043 0310 	orr.w	r3, r3, #16
    f636:	7053      	strb	r3, [r2, #1]
	free_slot->key_idx = app_idx;
    f638:	8813      	ldrh	r3, [r2, #0]
    f63a:	f360 030b 	bfi	r3, r0, #0, #12
    f63e:	8013      	strh	r3, [r2, #0]
	free_slot->clear = clear;
    f640:	f3c3 2307 	ubfx	r3, r3, #8, #8
		update->clear = clear;
    f644:	f365 1345 	bfi	r3, r5, #5, #1
    f648:	7053      	strb	r3, [r2, #1]
		bt_mesh_settings_store_schedule(
    f64a:	2002      	movs	r0, #2
}
    f64c:	bc70      	pop	{r4, r5, r6}
		bt_mesh_settings_store_schedule(
    f64e:	f005 b815 	b.w	1467c <bt_mesh_settings_store_schedule>
		if (update->key_idx == key_idx) {
    f652:	4284      	cmp	r4, r0
    f654:	d0f6      	beq.n	f644 <update_app_key_settings+0x28>
		if (store) {
    f656:	b111      	cbz	r1, f65e <update_app_key_settings+0x42>
}
    f658:	bc70      	pop	{r4, r5, r6}
			store_app_key(app_idx);
    f65a:	f7ff bf9b 	b.w	f594 <store_app_key>
}
    f65e:	bc70      	pop	{r4, r5, r6}
			clear_app_key(app_idx);
    f660:	f7ff bf5a 	b.w	f518 <clear_app_key>
    f664:	200046b0 	.word	0x200046b0

0000f668 <subnet_evt>:
	return BT_MESH_KEY_UNUSED;
}

static void subnet_evt(struct bt_mesh_subnet *sub, enum bt_mesh_key_evt evt)
{
	if (evt == BT_MESH_KEY_UPDATED || evt == BT_MESH_KEY_ADDED) {
    f668:	f011 0ffd 	tst.w	r1, #253	; 0xfd
{
    f66c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f66e:	4606      	mov	r6, r0
    f670:	460b      	mov	r3, r1
	if (evt == BT_MESH_KEY_UPDATED || evt == BT_MESH_KEY_ADDED) {
    f672:	d037      	beq.n	f6e4 <subnet_evt+0x7c>
	}

	for (int i = 0; i < ARRAY_SIZE(apps); i++) {
		struct app_key *app = &apps[i];

		if (app->app_idx == BT_MESH_KEY_UNUSED) {
    f674:	481c      	ldr	r0, [pc, #112]	; (f6e8 <subnet_evt+0x80>)
    f676:	8845      	ldrh	r5, [r0, #2]
    f678:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f67c:	4295      	cmp	r5, r2
    f67e:	4604      	mov	r4, r0
    f680:	d030      	beq.n	f6e4 <subnet_evt+0x7c>
			continue;
		}

		if (app->net_idx != sub->net_idx) {
    f682:	8807      	ldrh	r7, [r0, #0]
    f684:	8bb2      	ldrh	r2, [r6, #28]
    f686:	4297      	cmp	r7, r2
    f688:	d12c      	bne.n	f6e4 <subnet_evt+0x7c>
			continue;
		}

		if (evt == BT_MESH_KEY_DELETED) {
    f68a:	2b01      	cmp	r3, #1
    f68c:	d103      	bne.n	f696 <subnet_evt+0x2e>
			app_key_revoke(app);
		} else if (evt == BT_MESH_KEY_SWAPPED && app->updated) {
			app_key_evt(app, BT_MESH_KEY_SWAPPED);
		}
	}
}
    f68e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			app_key_del(app);
    f692:	f01a bfae 	b.w	2a5f2 <app_key_del>
		} else if (evt == BT_MESH_KEY_REVOKED) {
    f696:	2b04      	cmp	r3, #4
    f698:	d11f      	bne.n	f6da <subnet_evt+0x72>
	if (!app->updated) {
    f69a:	7923      	ldrb	r3, [r4, #4]
    f69c:	b313      	cbz	r3, f6e4 <subnet_evt+0x7c>
	memcpy(&app->keys[0], &app->keys[1], sizeof(app->keys[0]));
    f69e:	f104 0316 	add.w	r3, r4, #22
    f6a2:	1d62      	adds	r2, r4, #5
    f6a4:	f104 0126 	add.w	r1, r4, #38	; 0x26
    f6a8:	f853 0b04 	ldr.w	r0, [r3], #4
    f6ac:	f842 0b04 	str.w	r0, [r2], #4
    f6b0:	428b      	cmp	r3, r1
    f6b2:	d1f9      	bne.n	f6a8 <subnet_evt+0x40>
    f6b4:	781b      	ldrb	r3, [r3, #0]
    f6b6:	7013      	strb	r3, [r2, #0]
	memset(&app->keys[1], 0, sizeof(app->keys[1]));
    f6b8:	2100      	movs	r1, #0
    f6ba:	2211      	movs	r2, #17
    f6bc:	480b      	ldr	r0, [pc, #44]	; (f6ec <subnet_evt+0x84>)
    f6be:	f01d ff9c 	bl	2d5fa <memset>
	app->updated = false;
    f6c2:	2300      	movs	r3, #0
		update_app_key_settings(app->app_idx, true);
    f6c4:	2101      	movs	r1, #1
    f6c6:	4628      	mov	r0, r5
	app->updated = false;
    f6c8:	7123      	strb	r3, [r4, #4]
		update_app_key_settings(app->app_idx, true);
    f6ca:	f7ff ffa7 	bl	f61c <update_app_key_settings>
	app_key_evt(app, BT_MESH_KEY_REVOKED);
    f6ce:	4806      	ldr	r0, [pc, #24]	; (f6e8 <subnet_evt+0x80>)
    f6d0:	2104      	movs	r1, #4
}
    f6d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			app_key_evt(app, BT_MESH_KEY_SWAPPED);
    f6d6:	f7ff bf37 	b.w	f548 <app_key_evt>
		} else if (evt == BT_MESH_KEY_SWAPPED && app->updated) {
    f6da:	2b03      	cmp	r3, #3
    f6dc:	d102      	bne.n	f6e4 <subnet_evt+0x7c>
    f6de:	7903      	ldrb	r3, [r0, #4]
    f6e0:	2b00      	cmp	r3, #0
    f6e2:	d1f6      	bne.n	f6d2 <subnet_evt+0x6a>
}
    f6e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f6e6:	bf00      	nop
    f6e8:	200010da 	.word	0x200010da
    f6ec:	200010f0 	.word	0x200010f0

0000f6f0 <bt_mesh_app_key_add>:
{
    f6f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f6f2:	4606      	mov	r6, r0
	if (!bt_mesh_subnet_get(net_idx)) {
    f6f4:	4608      	mov	r0, r1
{
    f6f6:	460f      	mov	r7, r1
    f6f8:	4615      	mov	r5, r2
	if (!bt_mesh_subnet_get(net_idx)) {
    f6fa:	f01a ff78 	bl	2a5ee <bt_mesh_subnet_get>
    f6fe:	b390      	cbz	r0, f766 <bt_mesh_app_key_add+0x76>
		if (apps[i].app_idx == app_idx) {
    f700:	4c1c      	ldr	r4, [pc, #112]	; (f774 <bt_mesh_app_key_add+0x84>)
    f702:	8863      	ldrh	r3, [r4, #2]
    f704:	429e      	cmp	r6, r3
    f706:	d00a      	beq.n	f71e <bt_mesh_app_key_add+0x2e>
		if (!app && apps[i].app_idx == BT_MESH_KEY_UNUSED) {
    f708:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f70c:	4293      	cmp	r3, r2
    f70e:	d12c      	bne.n	f76a <bt_mesh_app_key_add+0x7a>
			const uint8_t net_id[16], uint32_t iv_index,
			uint8_t auth[8]);

static inline int bt_mesh_app_id(const uint8_t app_key[16], uint8_t app_id[1])
{
	return bt_mesh_k4(app_key, app_id);
    f710:	1d61      	adds	r1, r4, #5
    f712:	4628      	mov	r0, r5
    f714:	f002 f872 	bl	117fc <bt_mesh_k4>
	if (bt_mesh_app_id(key, &app->keys[0].id)) {
    f718:	b170      	cbz	r0, f738 <bt_mesh_app_key_add+0x48>
		return STATUS_CANNOT_SET;
    f71a:	200f      	movs	r0, #15
    f71c:	e00b      	b.n	f736 <bt_mesh_app_key_add+0x46>
		if (app->net_idx != net_idx) {
    f71e:	8823      	ldrh	r3, [r4, #0]
    f720:	42bb      	cmp	r3, r7
    f722:	d124      	bne.n	f76e <bt_mesh_app_key_add+0x7e>
		if (memcmp(key, app->keys[0].val, 16)) {
    f724:	2210      	movs	r2, #16
    f726:	1da1      	adds	r1, r4, #6
    f728:	4628      	mov	r0, r5
    f72a:	f01d ff1d 	bl	2d568 <memcmp>
		return STATUS_SUCCESS;
    f72e:	2800      	cmp	r0, #0
    f730:	bf14      	ite	ne
    f732:	2006      	movne	r0, #6
    f734:	2000      	moveq	r0, #0
}
    f736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	app->updated = false;
    f738:	7120      	strb	r0, [r4, #4]
	app->net_idx = net_idx;
    f73a:	8027      	strh	r7, [r4, #0]
	app->app_idx = app_idx;
    f73c:	8066      	strh	r6, [r4, #2]
    f73e:	4628      	mov	r0, r5
    f740:	3406      	adds	r4, #6
    f742:	f105 0310 	add.w	r3, r5, #16
    f746:	f850 2b04 	ldr.w	r2, [r0], #4
    f74a:	f844 2b04 	str.w	r2, [r4], #4
    f74e:	4298      	cmp	r0, r3
    f750:	d1f9      	bne.n	f746 <bt_mesh_app_key_add+0x56>
		update_app_key_settings(app->app_idx, true);
    f752:	2101      	movs	r1, #1
    f754:	4630      	mov	r0, r6
    f756:	f7ff ff61 	bl	f61c <update_app_key_settings>
	app_key_evt(app, BT_MESH_KEY_ADDED);
    f75a:	4806      	ldr	r0, [pc, #24]	; (f774 <bt_mesh_app_key_add+0x84>)
    f75c:	2100      	movs	r1, #0
    f75e:	f7ff fef3 	bl	f548 <app_key_evt>
	return STATUS_SUCCESS;
    f762:	2000      	movs	r0, #0
    f764:	e7e7      	b.n	f736 <bt_mesh_app_key_add+0x46>
		return STATUS_INVALID_NETKEY;
    f766:	2004      	movs	r0, #4
    f768:	e7e5      	b.n	f736 <bt_mesh_app_key_add+0x46>
		return STATUS_INSUFF_RESOURCES;
    f76a:	2005      	movs	r0, #5
    f76c:	e7e3      	b.n	f736 <bt_mesh_app_key_add+0x46>
			return STATUS_INVALID_BINDING;
    f76e:	2011      	movs	r0, #17
    f770:	e7e1      	b.n	f736 <bt_mesh_app_key_add+0x46>
    f772:	bf00      	nop
    f774:	200010da 	.word	0x200010da

0000f778 <bt_mesh_app_key_update>:
		if (apps[i].app_idx == app_idx) {
    f778:	4b21      	ldr	r3, [pc, #132]	; (f800 <bt_mesh_app_key_update+0x88>)
{
    f77a:	b570      	push	{r4, r5, r6, lr}
    f77c:	4614      	mov	r4, r2
		if (apps[i].app_idx == app_idx) {
    f77e:	885a      	ldrh	r2, [r3, #2]
    f780:	4282      	cmp	r2, r0
    f782:	461d      	mov	r5, r3
    f784:	d135      	bne.n	f7f2 <bt_mesh_app_key_update+0x7a>
	if (net_idx != BT_MESH_KEY_UNUSED && app->net_idx != net_idx) {
    f786:	8818      	ldrh	r0, [r3, #0]
    f788:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f78c:	4299      	cmp	r1, r3
    f78e:	d001      	beq.n	f794 <bt_mesh_app_key_update+0x1c>
    f790:	4288      	cmp	r0, r1
    f792:	d130      	bne.n	f7f6 <bt_mesh_app_key_update+0x7e>
	sub = bt_mesh_subnet_get(app->net_idx);
    f794:	f01a ff2b 	bl	2a5ee <bt_mesh_subnet_get>
	if (!sub) {
    f798:	b378      	cbz	r0, f7fa <bt_mesh_app_key_update+0x82>
	if (sub->kr_phase != BT_MESH_KR_PHASE_1) {
    f79a:	7f86      	ldrb	r6, [r0, #30]
    f79c:	2e01      	cmp	r6, #1
    f79e:	d001      	beq.n	f7a4 <bt_mesh_app_key_update+0x2c>
		return STATUS_CANNOT_UPDATE;
    f7a0:	200b      	movs	r0, #11
}
    f7a2:	bd70      	pop	{r4, r5, r6, pc}
	if (app->updated) {
    f7a4:	792b      	ldrb	r3, [r5, #4]
    f7a6:	b14b      	cbz	r3, f7bc <bt_mesh_app_key_update+0x44>
		if (memcmp(app->keys[1].val, key, 16)) {
    f7a8:	2210      	movs	r2, #16
    f7aa:	4621      	mov	r1, r4
    f7ac:	4815      	ldr	r0, [pc, #84]	; (f804 <bt_mesh_app_key_update+0x8c>)
    f7ae:	f01d fedb 	bl	2d568 <memcmp>
		return STATUS_SUCCESS;
    f7b2:	2800      	cmp	r0, #0
    f7b4:	bf14      	ite	ne
    f7b6:	2006      	movne	r0, #6
    f7b8:	2000      	moveq	r0, #0
    f7ba:	e7f2      	b.n	f7a2 <bt_mesh_app_key_update+0x2a>
    f7bc:	4912      	ldr	r1, [pc, #72]	; (f808 <bt_mesh_app_key_update+0x90>)
    f7be:	4620      	mov	r0, r4
    f7c0:	f002 f81c 	bl	117fc <bt_mesh_k4>
	if (bt_mesh_app_id(key, &app->keys[1].id)) {
    f7c4:	2800      	cmp	r0, #0
    f7c6:	d1eb      	bne.n	f7a0 <bt_mesh_app_key_update+0x28>
    f7c8:	4b0e      	ldr	r3, [pc, #56]	; (f804 <bt_mesh_app_key_update+0x8c>)
	app->updated = true;
    f7ca:	712e      	strb	r6, [r5, #4]
    f7cc:	4622      	mov	r2, r4
    f7ce:	f104 0110 	add.w	r1, r4, #16
    f7d2:	f852 0b04 	ldr.w	r0, [r2], #4
    f7d6:	f843 0b04 	str.w	r0, [r3], #4
    f7da:	428a      	cmp	r2, r1
    f7dc:	d1f9      	bne.n	f7d2 <bt_mesh_app_key_update+0x5a>
		update_app_key_settings(app->app_idx, true);
    f7de:	2101      	movs	r1, #1
    f7e0:	8868      	ldrh	r0, [r5, #2]
    f7e2:	f7ff ff1b 	bl	f61c <update_app_key_settings>
	app_key_evt(app, BT_MESH_KEY_UPDATED);
    f7e6:	4806      	ldr	r0, [pc, #24]	; (f800 <bt_mesh_app_key_update+0x88>)
    f7e8:	2102      	movs	r1, #2
    f7ea:	f7ff fead 	bl	f548 <app_key_evt>
	return STATUS_SUCCESS;
    f7ee:	2000      	movs	r0, #0
    f7f0:	e7d7      	b.n	f7a2 <bt_mesh_app_key_update+0x2a>
		return STATUS_INVALID_APPKEY;
    f7f2:	2003      	movs	r0, #3
    f7f4:	e7d5      	b.n	f7a2 <bt_mesh_app_key_update+0x2a>
		return STATUS_INVALID_BINDING;
    f7f6:	2011      	movs	r0, #17
    f7f8:	e7d3      	b.n	f7a2 <bt_mesh_app_key_update+0x2a>
		return STATUS_INVALID_NETKEY;
    f7fa:	2004      	movs	r0, #4
    f7fc:	e7d1      	b.n	f7a2 <bt_mesh_app_key_update+0x2a>
    f7fe:	bf00      	nop
    f800:	200010da 	.word	0x200010da
    f804:	200010f1 	.word	0x200010f1
    f808:	200010f0 	.word	0x200010f0

0000f80c <bt_mesh_app_key_del>:
{
    f80c:	b538      	push	{r3, r4, r5, lr}
	if (net_idx != BT_MESH_KEY_UNUSED && !bt_mesh_subnet_get(net_idx)) {
    f80e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f812:	4299      	cmp	r1, r3
{
    f814:	4605      	mov	r5, r0
    f816:	460c      	mov	r4, r1
	if (net_idx != BT_MESH_KEY_UNUSED && !bt_mesh_subnet_get(net_idx)) {
    f818:	d105      	bne.n	f826 <bt_mesh_app_key_del+0x1a>
		if (apps[i].app_idx == app_idx) {
    f81a:	4b0d      	ldr	r3, [pc, #52]	; (f850 <bt_mesh_app_key_del+0x44>)
    f81c:	885a      	ldrh	r2, [r3, #2]
    f81e:	42aa      	cmp	r2, r5
    f820:	d008      	beq.n	f834 <bt_mesh_app_key_del+0x28>
	return STATUS_SUCCESS;
    f822:	2000      	movs	r0, #0
}
    f824:	bd38      	pop	{r3, r4, r5, pc}
	if (net_idx != BT_MESH_KEY_UNUSED && !bt_mesh_subnet_get(net_idx)) {
    f826:	4608      	mov	r0, r1
    f828:	f01a fee1 	bl	2a5ee <bt_mesh_subnet_get>
    f82c:	2800      	cmp	r0, #0
    f82e:	d1f4      	bne.n	f81a <bt_mesh_app_key_del+0xe>
		return STATUS_INVALID_NETKEY;
    f830:	2004      	movs	r0, #4
    f832:	e7f7      	b.n	f824 <bt_mesh_app_key_del+0x18>
	if (net_idx != BT_MESH_KEY_UNUSED && net_idx != app->net_idx) {
    f834:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f838:	4294      	cmp	r4, r2
    f83a:	d002      	beq.n	f842 <bt_mesh_app_key_del+0x36>
    f83c:	881b      	ldrh	r3, [r3, #0]
    f83e:	42a3      	cmp	r3, r4
    f840:	d103      	bne.n	f84a <bt_mesh_app_key_del+0x3e>
	app_key_del(app);
    f842:	4803      	ldr	r0, [pc, #12]	; (f850 <bt_mesh_app_key_del+0x44>)
    f844:	f01a fed5 	bl	2a5f2 <app_key_del>
    f848:	e7eb      	b.n	f822 <bt_mesh_app_key_del+0x16>
		return STATUS_INVALID_BINDING;
    f84a:	2011      	movs	r0, #17
    f84c:	e7ea      	b.n	f824 <bt_mesh_app_key_del+0x18>
    f84e:	bf00      	nop
    f850:	200010da 	.word	0x200010da

0000f854 <bt_mesh_app_key_set>:
{
    f854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (apps[i].app_idx == app_idx) {
    f858:	4d1f      	ldr	r5, [pc, #124]	; (f8d8 <bt_mesh_app_key_set+0x84>)
{
    f85a:	461c      	mov	r4, r3
		if (apps[i].app_idx == app_idx) {
    f85c:	886b      	ldrh	r3, [r5, #2]
    f85e:	4298      	cmp	r0, r3
{
    f860:	4607      	mov	r7, r0
    f862:	4688      	mov	r8, r1
		if (apps[i].app_idx == app_idx) {
    f864:	d032      	beq.n	f8cc <bt_mesh_app_key_set+0x78>
		if (!app && apps[i].app_idx == BT_MESH_KEY_UNUSED) {
    f866:	f64f 71ff 	movw	r1, #65535	; 0xffff
    f86a:	428b      	cmp	r3, r1
    f86c:	d130      	bne.n	f8d0 <bt_mesh_app_key_set+0x7c>
    f86e:	4613      	mov	r3, r2
    f870:	1da9      	adds	r1, r5, #6
    f872:	f102 0010 	add.w	r0, r2, #16
    f876:	f853 6b04 	ldr.w	r6, [r3], #4
    f87a:	f841 6b04 	str.w	r6, [r1], #4
    f87e:	4283      	cmp	r3, r0
    f880:	d1f9      	bne.n	f876 <bt_mesh_app_key_set+0x22>
    f882:	4916      	ldr	r1, [pc, #88]	; (f8dc <bt_mesh_app_key_set+0x88>)
    f884:	4610      	mov	r0, r2
    f886:	f001 ffb9 	bl	117fc <bt_mesh_k4>
	if (bt_mesh_app_id(old_key, &app->keys[0].id)) {
    f88a:	4606      	mov	r6, r0
    f88c:	b120      	cbz	r0, f898 <bt_mesh_app_key_set+0x44>
		return -EIO;
    f88e:	f06f 0604 	mvn.w	r6, #4
}
    f892:	4630      	mov	r0, r6
    f894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (new_key) {
    f898:	b93c      	cbnz	r4, f8aa <bt_mesh_app_key_set+0x56>
	app->updated = !!new_key;
    f89a:	3400      	adds	r4, #0
    f89c:	bf18      	it	ne
    f89e:	2401      	movne	r4, #1
	app->net_idx = net_idx;
    f8a0:	f8a5 8000 	strh.w	r8, [r5]
	app->app_idx = app_idx;
    f8a4:	806f      	strh	r7, [r5, #2]
	app->updated = !!new_key;
    f8a6:	712c      	strb	r4, [r5, #4]
	return 0;
    f8a8:	e7f3      	b.n	f892 <bt_mesh_app_key_set+0x3e>
    f8aa:	4a0d      	ldr	r2, [pc, #52]	; (f8e0 <bt_mesh_app_key_set+0x8c>)
    f8ac:	4623      	mov	r3, r4
    f8ae:	f104 0110 	add.w	r1, r4, #16
    f8b2:	f853 0b04 	ldr.w	r0, [r3], #4
    f8b6:	f842 0b04 	str.w	r0, [r2], #4
    f8ba:	428b      	cmp	r3, r1
    f8bc:	d1f9      	bne.n	f8b2 <bt_mesh_app_key_set+0x5e>
    f8be:	4909      	ldr	r1, [pc, #36]	; (f8e4 <bt_mesh_app_key_set+0x90>)
    f8c0:	4620      	mov	r0, r4
    f8c2:	f001 ff9b 	bl	117fc <bt_mesh_k4>
		if (bt_mesh_app_id(new_key, &app->keys[1].id)) {
    f8c6:	2800      	cmp	r0, #0
    f8c8:	d0e7      	beq.n	f89a <bt_mesh_app_key_set+0x46>
    f8ca:	e7e0      	b.n	f88e <bt_mesh_app_key_set+0x3a>
		return 0;
    f8cc:	2600      	movs	r6, #0
    f8ce:	e7e0      	b.n	f892 <bt_mesh_app_key_set+0x3e>
		return -ENOMEM;
    f8d0:	f06f 060b 	mvn.w	r6, #11
    f8d4:	e7dd      	b.n	f892 <bt_mesh_app_key_set+0x3e>
    f8d6:	bf00      	nop
    f8d8:	200010da 	.word	0x200010da
    f8dc:	200010df 	.word	0x200010df
    f8e0:	200010f1 	.word	0x200010f1
    f8e4:	200010f0 	.word	0x200010f0

0000f8e8 <app_key_set>:
	}
}

static int app_key_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
    f8e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    f8ea:	460c      	mov	r4, r1
    f8ec:	b08b      	sub	sp, #44	; 0x2c
    f8ee:	4616      	mov	r6, r2
    f8f0:	461f      	mov	r7, r3
	struct app_key_val key;
	uint16_t app_idx;
	int err;

	if (!name) {
    f8f2:	b940      	cbnz	r0, f906 <app_key_set+0x1e>
		BT_ERR("Insufficient number of arguments");
    f8f4:	2145      	movs	r1, #69	; 0x45
    f8f6:	4817      	ldr	r0, [pc, #92]	; (f954 <app_key_set+0x6c>)
    f8f8:	f017 fb39 	bl	26f6e <printk>
    f8fc:	f06f 0401 	mvn.w	r4, #1
	}

	BT_DBG("AppKeyIndex 0x%03x recovered from storage", app_idx);

	return 0;
}
    f900:	4620      	mov	r0, r4
    f902:	b00b      	add	sp, #44	; 0x2c
    f904:	bdf0      	pop	{r4, r5, r6, r7, pc}
	app_idx = strtol(name, NULL, 16);
    f906:	2210      	movs	r2, #16
    f908:	2100      	movs	r1, #0
    f90a:	f016 fcc5 	bl	26298 <strtol>
    f90e:	4605      	mov	r5, r0
	if (!len_rd) {
    f910:	2c00      	cmp	r4, #0
    f912:	d0f5      	beq.n	f900 <app_key_set+0x18>
	err = bt_mesh_settings_set(read_cb, cb_arg, &key, sizeof(key));
    f914:	2323      	movs	r3, #35	; 0x23
    f916:	aa01      	add	r2, sp, #4
    f918:	4639      	mov	r1, r7
    f91a:	4630      	mov	r0, r6
    f91c:	f004 fe8c 	bl	14638 <bt_mesh_settings_set>
	if (err < 0) {
    f920:	2800      	cmp	r0, #0
    f922:	db13      	blt.n	f94c <app_key_set+0x64>
	err = bt_mesh_app_key_set(app_idx, key.net_idx, key.val[0],
    f924:	f89d 3006 	ldrb.w	r3, [sp, #6]
    f928:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    f92c:	b10b      	cbz	r3, f932 <app_key_set+0x4a>
    f92e:	f10d 0317 	add.w	r3, sp, #23
    f932:	f10d 0207 	add.w	r2, sp, #7
    f936:	b2a8      	uxth	r0, r5
    f938:	f7ff ff8c 	bl	f854 <bt_mesh_app_key_set>
	if (err) {
    f93c:	4604      	mov	r4, r0
    f93e:	2800      	cmp	r0, #0
    f940:	d0de      	beq.n	f900 <app_key_set+0x18>
		BT_ERR("Failed to set \'app-key\'");
    f942:	2145      	movs	r1, #69	; 0x45
    f944:	4804      	ldr	r0, [pc, #16]	; (f958 <app_key_set+0x70>)
    f946:	f017 fb12 	bl	26f6e <printk>
		return err;
    f94a:	e7d9      	b.n	f900 <app_key_set+0x18>
		return -EINVAL;
    f94c:	f06f 0415 	mvn.w	r4, #21
    f950:	e7d6      	b.n	f900 <app_key_set+0x18>
    f952:	bf00      	nop
    f954:	000307a1 	.word	0x000307a1
    f958:	00032205 	.word	0x00032205

0000f95c <bt_mesh_app_key_exists>:
		if (apps[i].app_idx == app_idx) {
    f95c:	4b02      	ldr	r3, [pc, #8]	; (f968 <bt_mesh_app_key_exists+0xc>)
    f95e:	885b      	ldrh	r3, [r3, #2]
}
    f960:	1a1b      	subs	r3, r3, r0
    f962:	4258      	negs	r0, r3
    f964:	4158      	adcs	r0, r3
    f966:	4770      	bx	lr
    f968:	200010da 	.word	0x200010da

0000f96c <bt_mesh_app_keys_get>:
{
    f96c:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (int i = 0; i < ARRAY_SIZE(apps); i++) {
    f96e:	2500      	movs	r5, #0
		if (app->app_idx == BT_MESH_KEY_UNUSED) {
    f970:	4f0d      	ldr	r7, [pc, #52]	; (f9a8 <bt_mesh_app_keys_get+0x3c>)
	size_t count = 0;
    f972:	462c      	mov	r4, r5
		if (app->app_idx == BT_MESH_KEY_UNUSED) {
    f974:	f64f 7cff 	movw	ip, #65535	; 0xffff
    f978:	887e      	ldrh	r6, [r7, #2]
	for (int i = 0; i < ARRAY_SIZE(apps); i++) {
    f97a:	b10d      	cbz	r5, f980 <bt_mesh_app_keys_get+0x14>
	return count;
    f97c:	4620      	mov	r0, r4
}
    f97e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (app->app_idx == BT_MESH_KEY_UNUSED) {
    f980:	4566      	cmp	r6, ip
    f982:	d0fb      	beq.n	f97c <bt_mesh_app_keys_get+0x10>
		if (net_idx != BT_MESH_KEY_ANY && app->net_idx != net_idx) {
    f984:	4560      	cmp	r0, ip
    f986:	d002      	beq.n	f98e <bt_mesh_app_keys_get+0x22>
    f988:	883d      	ldrh	r5, [r7, #0]
    f98a:	4285      	cmp	r5, r0
    f98c:	d101      	bne.n	f992 <bt_mesh_app_keys_get+0x26>
		if (skip) {
    f98e:	b113      	cbz	r3, f996 <bt_mesh_app_keys_get+0x2a>
			skip--;
    f990:	3b01      	subs	r3, #1
			continue;
    f992:	2501      	movs	r5, #1
    f994:	e7f0      	b.n	f978 <bt_mesh_app_keys_get+0xc>
		if (count >= max) {
    f996:	4294      	cmp	r4, r2
    f998:	d203      	bcs.n	f9a2 <bt_mesh_app_keys_get+0x36>
		app_idxs[count++] = app->app_idx;
    f99a:	f821 6014 	strh.w	r6, [r1, r4, lsl #1]
    f99e:	3401      	adds	r4, #1
    f9a0:	e7f7      	b.n	f992 <bt_mesh_app_keys_get+0x26>
			return -ENOMEM;
    f9a2:	f06f 000b 	mvn.w	r0, #11
    f9a6:	e7ea      	b.n	f97e <bt_mesh_app_keys_get+0x12>
    f9a8:	200010da 	.word	0x200010da

0000f9ac <bt_mesh_keys_resolve>:
{
    f9ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f9b0:	4615      	mov	r5, r2
	if (BT_MESH_IS_DEV_KEY(ctx->app_idx)) {
    f9b2:	8842      	ldrh	r2, [r0, #2]
{
    f9b4:	461e      	mov	r6, r3
	if (BT_MESH_IS_DEV_KEY(ctx->app_idx)) {
    f9b6:	1cd3      	adds	r3, r2, #3
    f9b8:	b29b      	uxth	r3, r3
    f9ba:	2b01      	cmp	r3, #1
{
    f9bc:	4604      	mov	r4, r0
    f9be:	460f      	mov	r7, r1
	if (BT_MESH_IS_DEV_KEY(ctx->app_idx)) {
    f9c0:	d914      	bls.n	f9ec <bt_mesh_keys_resolve+0x40>
		if (apps[i].app_idx == app_idx) {
    f9c2:	4c1f      	ldr	r4, [pc, #124]	; (fa40 <bt_mesh_keys_resolve+0x94>)
    f9c4:	8863      	ldrh	r3, [r4, #2]
    f9c6:	4293      	cmp	r3, r2
    f9c8:	46a0      	mov	r8, r4
    f9ca:	d12f      	bne.n	fa2c <bt_mesh_keys_resolve+0x80>
	*sub = bt_mesh_subnet_get(app->net_idx);
    f9cc:	8820      	ldrh	r0, [r4, #0]
    f9ce:	f01a fe0e 	bl	2a5ee <bt_mesh_subnet_get>
    f9d2:	6038      	str	r0, [r7, #0]
	if (!*sub) {
    f9d4:	b178      	cbz	r0, f9f6 <bt_mesh_keys_resolve+0x4a>
	if ((*sub)->kr_phase == BT_MESH_KR_PHASE_2 && app->updated) {
    f9d6:	7f83      	ldrb	r3, [r0, #30]
    f9d8:	2b02      	cmp	r3, #2
    f9da:	d12a      	bne.n	fa32 <bt_mesh_keys_resolve+0x86>
    f9dc:	7923      	ldrb	r3, [r4, #4]
    f9de:	b343      	cbz	r3, fa32 <bt_mesh_keys_resolve+0x86>
		*aid = app->keys[1].id;
    f9e0:	7da3      	ldrb	r3, [r4, #22]
    f9e2:	7033      	strb	r3, [r6, #0]
		*app_key = app->keys[1].val;
    f9e4:	3417      	adds	r4, #23
    f9e6:	602c      	str	r4, [r5, #0]
	return 0;
    f9e8:	2000      	movs	r0, #0
    f9ea:	e01d      	b.n	fa28 <bt_mesh_keys_resolve+0x7c>
		*sub = bt_mesh_subnet_get(ctx->net_idx);
    f9ec:	8800      	ldrh	r0, [r0, #0]
    f9ee:	f01a fdfe 	bl	2a5ee <bt_mesh_subnet_get>
    f9f2:	6038      	str	r0, [r7, #0]
		if (!*sub) {
    f9f4:	b918      	cbnz	r0, f9fe <bt_mesh_keys_resolve+0x52>
		BT_WARN("Unknown NetKey 0x%03x", app->net_idx);
    f9f6:	8822      	ldrh	r2, [r4, #0]
    f9f8:	4812      	ldr	r0, [pc, #72]	; (fa44 <bt_mesh_keys_resolve+0x98>)
    f9fa:	2157      	movs	r1, #87	; 0x57
    f9fc:	e00b      	b.n	fa16 <bt_mesh_keys_resolve+0x6a>
		if (ctx->app_idx == BT_MESH_KEY_DEV_REMOTE &&
    f9fe:	8862      	ldrh	r2, [r4, #2]
    fa00:	f64f 73fd 	movw	r3, #65533	; 0xfffd
    fa04:	429a      	cmp	r2, r3
    fa06:	d10b      	bne.n	fa20 <bt_mesh_keys_resolve+0x74>
		    !bt_mesh_elem_find(ctx->addr)) {
    fa08:	88a0      	ldrh	r0, [r4, #4]
    fa0a:	f002 fadf 	bl	11fcc <bt_mesh_elem_find>
		if (ctx->app_idx == BT_MESH_KEY_DEV_REMOTE &&
    fa0e:	b938      	cbnz	r0, fa20 <bt_mesh_keys_resolve+0x74>
				BT_WARN("No DevKey for 0x%04x", ctx->addr);
    fa10:	88a2      	ldrh	r2, [r4, #4]
    fa12:	480d      	ldr	r0, [pc, #52]	; (fa48 <bt_mesh_keys_resolve+0x9c>)
    fa14:	2157      	movs	r1, #87	; 0x57
		BT_WARN("Unknown NetKey 0x%03x", app->net_idx);
    fa16:	f017 faaa 	bl	26f6e <printk>
		return -EINVAL;
    fa1a:	f06f 0015 	mvn.w	r0, #21
    fa1e:	e003      	b.n	fa28 <bt_mesh_keys_resolve+0x7c>
			*app_key = bt_mesh.dev_key;
    fa20:	4b0a      	ldr	r3, [pc, #40]	; (fa4c <bt_mesh_keys_resolve+0xa0>)
    fa22:	602b      	str	r3, [r5, #0]
		*aid = 0;
    fa24:	2000      	movs	r0, #0
    fa26:	7030      	strb	r0, [r6, #0]
}
    fa28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		BT_WARN("Unknown AppKey 0x%03x", ctx->app_idx);
    fa2c:	2157      	movs	r1, #87	; 0x57
    fa2e:	4808      	ldr	r0, [pc, #32]	; (fa50 <bt_mesh_keys_resolve+0xa4>)
    fa30:	e7f1      	b.n	fa16 <bt_mesh_keys_resolve+0x6a>
		*aid = app->keys[0].id;
    fa32:	f898 3005 	ldrb.w	r3, [r8, #5]
    fa36:	7033      	strb	r3, [r6, #0]
		*app_key = app->keys[0].val;
    fa38:	4b06      	ldr	r3, [pc, #24]	; (fa54 <bt_mesh_keys_resolve+0xa8>)
    fa3a:	602b      	str	r3, [r5, #0]
    fa3c:	e7d4      	b.n	f9e8 <bt_mesh_keys_resolve+0x3c>
    fa3e:	bf00      	nop
    fa40:	200010da 	.word	0x200010da
    fa44:	00032222 	.word	0x00032222
    fa48:	0003223d 	.word	0x0003223d
    fa4c:	20002000 	.word	0x20002000
    fa50:	00032257 	.word	0x00032257
    fa54:	200010e0 	.word	0x200010e0

0000fa58 <bt_mesh_app_key_find>:
{
    fa58:	b570      	push	{r4, r5, r6, lr}
    fa5a:	4615      	mov	r5, r2
	if (dev_key) {
    fa5c:	b180      	cbz	r0, fa80 <bt_mesh_app_key_find+0x28>
		if (BT_MESH_ADDR_IS_UNICAST(rx->ctx.recv_dst)) {
    fa5e:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
    fa62:	2a00      	cmp	r2, #0
    fa64:	dd04      	ble.n	fa70 <bt_mesh_app_key_find+0x18>
			err = cb(rx, bt_mesh.dev_key, cb_data);
    fa66:	9a04      	ldr	r2, [sp, #16]
    fa68:	4915      	ldr	r1, [pc, #84]	; (fac0 <bt_mesh_app_key_find+0x68>)
    fa6a:	4628      	mov	r0, r5
    fa6c:	4798      	blx	r3
			if (!err) {
    fa6e:	b120      	cbz	r0, fa7a <bt_mesh_app_key_find+0x22>
		return BT_MESH_KEY_UNUSED;
    fa70:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
    fa74:	bd70      	pop	{r4, r5, r6, pc}
			cred = &app->keys[0];
    fa76:	1d60      	adds	r0, r4, #5
    fa78:	e017      	b.n	faaa <bt_mesh_app_key_find+0x52>
				return BT_MESH_KEY_DEV_LOCAL;
    fa7a:	f64f 70fe 	movw	r0, #65534	; 0xfffe
    fa7e:	e7f9      	b.n	fa74 <bt_mesh_app_key_find+0x1c>
		if (app->app_idx == BT_MESH_KEY_UNUSED) {
    fa80:	4c10      	ldr	r4, [pc, #64]	; (fac4 <bt_mesh_app_key_find+0x6c>)
    fa82:	8860      	ldrh	r0, [r4, #2]
    fa84:	f64f 72ff 	movw	r2, #65535	; 0xffff
    fa88:	4290      	cmp	r0, r2
    fa8a:	d0f1      	beq.n	fa70 <bt_mesh_app_key_find+0x18>
		if (app->net_idx != rx->sub->net_idx) {
    fa8c:	682a      	ldr	r2, [r5, #0]
    fa8e:	8820      	ldrh	r0, [r4, #0]
    fa90:	8b92      	ldrh	r2, [r2, #28]
    fa92:	4290      	cmp	r0, r2
    fa94:	d1ec      	bne.n	fa70 <bt_mesh_app_key_find+0x18>
		if (rx->new_key && app->updated) {
    fa96:	7d2a      	ldrb	r2, [r5, #20]
    fa98:	0792      	lsls	r2, r2, #30
    fa9a:	d5ec      	bpl.n	fa76 <bt_mesh_app_key_find+0x1e>
    fa9c:	7926      	ldrb	r6, [r4, #4]
			cred = &app->keys[1];
    fa9e:	1d60      	adds	r0, r4, #5
    faa0:	f104 0216 	add.w	r2, r4, #22
    faa4:	2e00      	cmp	r6, #0
    faa6:	bf18      	it	ne
    faa8:	4610      	movne	r0, r2
		if (cred->id != aid) {
    faaa:	7802      	ldrb	r2, [r0, #0]
    faac:	428a      	cmp	r2, r1
    faae:	d1df      	bne.n	fa70 <bt_mesh_app_key_find+0x18>
		err = cb(rx, cred->val, cb_data);
    fab0:	1c41      	adds	r1, r0, #1
    fab2:	9a04      	ldr	r2, [sp, #16]
    fab4:	4628      	mov	r0, r5
    fab6:	4798      	blx	r3
		if (err) {
    fab8:	2800      	cmp	r0, #0
    faba:	d1d9      	bne.n	fa70 <bt_mesh_app_key_find+0x18>
		return app->app_idx;
    fabc:	8860      	ldrh	r0, [r4, #2]
    fabe:	e7d9      	b.n	fa74 <bt_mesh_app_key_find+0x1c>
    fac0:	20002000 	.word	0x20002000
    fac4:	200010da 	.word	0x200010da

0000fac8 <bt_mesh_app_keys_reset>:
		if (app->app_idx != BT_MESH_KEY_UNUSED) {
    fac8:	4804      	ldr	r0, [pc, #16]	; (fadc <bt_mesh_app_keys_reset+0x14>)
    faca:	8842      	ldrh	r2, [r0, #2]
    facc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    fad0:	429a      	cmp	r2, r3
    fad2:	d001      	beq.n	fad8 <bt_mesh_app_keys_reset+0x10>
			app_key_del(app);
    fad4:	f01a bd8d 	b.w	2a5f2 <app_key_del>
}
    fad8:	4770      	bx	lr
    fada:	bf00      	nop
    fadc:	200010da 	.word	0x200010da

0000fae0 <bt_mesh_app_key_pending_store>:

BT_MESH_SETTINGS_DEFINE(app, "AppKey", app_key_set);

void bt_mesh_app_key_pending_store(void)
{
    fae0:	b510      	push	{r4, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(app_key_updates); i++) {
		struct app_key_update *update = &app_key_updates[i];

		if (!update->valid) {
    fae2:	4c09      	ldr	r4, [pc, #36]	; (fb08 <bt_mesh_app_key_pending_store+0x28>)
    fae4:	7863      	ldrb	r3, [r4, #1]
    fae6:	06da      	lsls	r2, r3, #27
    fae8:	d50a      	bpl.n	fb00 <bt_mesh_app_key_pending_store+0x20>
			continue;
		}

		if (update->clear) {
    faea:	8820      	ldrh	r0, [r4, #0]
    faec:	069b      	lsls	r3, r3, #26
    faee:	f3c0 000b 	ubfx	r0, r0, #0, #12
    faf2:	d506      	bpl.n	fb02 <bt_mesh_app_key_pending_store+0x22>
			clear_app_key(update->key_idx);
    faf4:	f7ff fd10 	bl	f518 <clear_app_key>
		} else {
			store_app_key(update->key_idx);
		}

		update->valid = 0U;
    faf8:	7863      	ldrb	r3, [r4, #1]
    fafa:	f36f 1304 	bfc	r3, #4, #1
    fafe:	7063      	strb	r3, [r4, #1]
	}
}
    fb00:	bd10      	pop	{r4, pc}
			store_app_key(update->key_idx);
    fb02:	f7ff fd47 	bl	f594 <store_app_key>
    fb06:	e7f7      	b.n	faf8 <bt_mesh_app_key_pending_store+0x18>
    fb08:	200046b0 	.word	0x200046b0

0000fb0c <k_delayed_work_submit>:
    fb0c:	4601      	mov	r1, r0
    fb0e:	4801      	ldr	r0, [pc, #4]	; (fb14 <k_delayed_work_submit+0x8>)
    fb10:	f014 b942 	b.w	23d98 <k_delayed_work_submit_to_queue>
    fb14:	20002490 	.word	0x20002490

0000fb18 <seg_rx_reset>:
	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_ACK, buf, sizeof(buf),
				NULL, NULL);
}

static void seg_rx_reset(struct seg_rx *rx, bool full_reset)
{
    fb18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    fb1c:	4604      	mov	r4, r0
	int i;

	BT_DBG("rx %p", rx);

	k_delayed_work_cancel(&rx->ack);
    fb1e:	3030      	adds	r0, #48	; 0x30
{
    fb20:	460d      	mov	r5, r1
	k_delayed_work_cancel(&rx->ack);
    fb22:	f014 f9a9 	bl	23e78 <k_delayed_work_cancel>

	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && rx->obo &&
    fb26:	f994 301f 	ldrsb.w	r3, [r4, #31]
    fb2a:	2b00      	cmp	r3, #0
    fb2c:	da14      	bge.n	fb58 <seg_rx_reset+0x40>
	    rx->block != BLOCK_COMPLETE(rx->seg_n)) {
    fb2e:	7fe3      	ldrb	r3, [r4, #31]
    fb30:	f003 031f 	and.w	r3, r3, #31
    fb34:	1c5a      	adds	r2, r3, #1
    fb36:	2301      	movs	r3, #1
    fb38:	4093      	lsls	r3, r2
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && rx->obo &&
    fb3a:	6a62      	ldr	r2, [r4, #36]	; 0x24
	    rx->block != BLOCK_COMPLETE(rx->seg_n)) {
    fb3c:	3b01      	subs	r3, #1
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && rx->obo &&
    fb3e:	429a      	cmp	r2, r3
    fb40:	d00a      	beq.n	fb58 <seg_rx_reset+0x40>
		BT_WARN("Clearing incomplete buffers from Friend queue");
    fb42:	2157      	movs	r1, #87	; 0x57
    fb44:	4815      	ldr	r0, [pc, #84]	; (fb9c <seg_rx_reset+0x84>)
    fb46:	f017 fa12 	bl	26f6e <printk>
		bt_mesh_friend_clear_incomplete(rx->sub, rx->src, rx->dst,
    fb4a:	f104 0310 	add.w	r3, r4, #16
    fb4e:	8b62      	ldrh	r2, [r4, #26]
    fb50:	8b21      	ldrh	r1, [r4, #24]
    fb52:	6820      	ldr	r0, [r4, #0]
    fb54:	f005 ff82 	bl	15a5c <bt_mesh_friend_clear_incomplete>
{
    fb58:	2600      	movs	r6, #0
	for (i = 0; i <= rx->seg_n; i++) {
		if (!rx->seg[i]) {
			continue;
		}

		k_mem_slab_free(&segs, &rx->seg[i]);
    fb5a:	f8df 8044 	ldr.w	r8, [pc, #68]	; fba0 <seg_rx_reset+0x88>
    fb5e:	1d21      	adds	r1, r4, #4
		rx->seg[i] = NULL;
    fb60:	46b1      	mov	r9, r6
		if (!rx->seg[i]) {
    fb62:	460f      	mov	r7, r1
    fb64:	f857 3b04 	ldr.w	r3, [r7], #4
    fb68:	b123      	cbz	r3, fb74 <seg_rx_reset+0x5c>
		k_mem_slab_free(&segs, &rx->seg[i]);
    fb6a:	4640      	mov	r0, r8
    fb6c:	f012 fb40 	bl	221f0 <k_mem_slab_free>
		rx->seg[i] = NULL;
    fb70:	f847 9c04 	str.w	r9, [r7, #-4]
	for (i = 0; i <= rx->seg_n; i++) {
    fb74:	7fe3      	ldrb	r3, [r4, #31]
    fb76:	3601      	adds	r6, #1
    fb78:	f003 021f 	and.w	r2, r3, #31
    fb7c:	42b2      	cmp	r2, r6
    fb7e:	4639      	mov	r1, r7
    fb80:	daef      	bge.n	fb62 <seg_rx_reset+0x4a>
	}

	rx->in_use = 0U;
    fb82:	f36f 1386 	bfc	r3, #6, #1
    fb86:	77e3      	strb	r3, [r4, #31]

	/* We don't always reset these values since we need to be able to
	 * send an ack if we receive a segment after we've already received
	 * the full SDU.
	 */
	if (full_reset) {
    fb88:	b135      	cbz	r5, fb98 <seg_rx_reset+0x80>
		rx->seq_auth = 0U;
    fb8a:	2000      	movs	r0, #0
    fb8c:	2100      	movs	r1, #0
    fb8e:	e9c4 0104 	strd	r0, r1, [r4, #16]
		rx->sub = NULL;
    fb92:	2300      	movs	r3, #0
    fb94:	6023      	str	r3, [r4, #0]
		rx->src = BT_MESH_ADDR_UNASSIGNED;
    fb96:	61a3      	str	r3, [r4, #24]
		rx->dst = BT_MESH_ADDR_UNASSIGNED;
	}
}
    fb98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fb9c:	00032786 	.word	0x00032786
    fba0:	20001264 	.word	0x20001264

0000fba4 <va_set>:
}

#if CONFIG_BT_MESH_LABEL_COUNT > 0
static int va_set(const char *name, size_t len_rd,
		  settings_read_cb read_cb, void *cb_arg)
{
    fba4:	b5f0      	push	{r4, r5, r6, r7, lr}
    fba6:	460c      	mov	r4, r1
    fba8:	b087      	sub	sp, #28
    fbaa:	4616      	mov	r6, r2
    fbac:	461f      	mov	r7, r3
	struct va_val va;
	struct virtual_addr *lab;
	uint16_t index;
	int err;

	if (!name) {
    fbae:	b940      	cbnz	r0, fbc2 <va_set+0x1e>
		BT_ERR("Insufficient number of arguments");
    fbb0:	2145      	movs	r1, #69	; 0x45
    fbb2:	4821      	ldr	r0, [pc, #132]	; (fc38 <va_set+0x94>)
    fbb4:	f017 f9db 	bl	26f6e <printk>
		return -ENOENT;
    fbb8:	f06f 0401 	mvn.w	r4, #1

	BT_DBG("Restored Virtual Address, addr 0x%04x ref 0x%04x",
	       lab->addr, lab->ref);

	return 0;
}
    fbbc:	4620      	mov	r0, r4
    fbbe:	b007      	add	sp, #28
    fbc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	index = strtol(name, NULL, 16);
    fbc2:	2210      	movs	r2, #16
    fbc4:	2100      	movs	r1, #0
    fbc6:	f016 fb67 	bl	26298 <strtol>
    fbca:	4605      	mov	r5, r0
	if (len_rd == 0) {
    fbcc:	b924      	cbnz	r4, fbd8 <va_set+0x34>
		BT_WARN("Mesh Virtual Address length = 0");
    fbce:	481b      	ldr	r0, [pc, #108]	; (fc3c <va_set+0x98>)
    fbd0:	2157      	movs	r1, #87	; 0x57
		BT_WARN("Ignore Mesh Virtual Address ref = 0");
    fbd2:	f017 f9cc 	bl	26f6e <printk>
		return 0;
    fbd6:	e7f1      	b.n	fbbc <va_set+0x18>
	err = bt_mesh_settings_set(read_cb, cb_arg, &va, sizeof(va));
    fbd8:	2314      	movs	r3, #20
    fbda:	aa01      	add	r2, sp, #4
    fbdc:	4639      	mov	r1, r7
    fbde:	4630      	mov	r0, r6
    fbe0:	f004 fd2a 	bl	14638 <bt_mesh_settings_set>
	if (err) {
    fbe4:	4604      	mov	r4, r0
    fbe6:	b110      	cbz	r0, fbee <va_set+0x4a>
		BT_ERR("Failed to set \'virtual address\'");
    fbe8:	2145      	movs	r1, #69	; 0x45
    fbea:	4815      	ldr	r0, [pc, #84]	; (fc40 <va_set+0x9c>)
    fbec:	e7f1      	b.n	fbd2 <va_set+0x2e>
	if (va.ref == 0) {
    fbee:	f8bd 6004 	ldrh.w	r6, [sp, #4]
    fbf2:	b916      	cbnz	r6, fbfa <va_set+0x56>
		BT_WARN("Ignore Mesh Virtual Address ref = 0");
    fbf4:	2157      	movs	r1, #87	; 0x57
    fbf6:	4813      	ldr	r0, [pc, #76]	; (fc44 <va_set+0xa0>)
    fbf8:	e7eb      	b.n	fbd2 <va_set+0x2e>
	if (index >= ARRAY_SIZE(virtual_addrs)) {
    fbfa:	b2ad      	uxth	r5, r5
    fbfc:	b135      	cbz	r5, fc0c <va_set+0x68>
		BT_WARN("Out of labels buffers");
    fbfe:	2157      	movs	r1, #87	; 0x57
    fc00:	4811      	ldr	r0, [pc, #68]	; (fc48 <va_set+0xa4>)
    fc02:	f017 f9b4 	bl	26f6e <printk>
		return -ENOBUFS;
    fc06:	f06f 0468 	mvn.w	r4, #104	; 0x68
    fc0a:	e7d7      	b.n	fbbc <va_set+0x18>
	memcpy(lab->uuid, va.uuid, 16);
    fc0c:	4a0f      	ldr	r2, [pc, #60]	; (fc4c <va_set+0xa8>)
    fc0e:	ad02      	add	r5, sp, #8
    fc10:	af06      	add	r7, sp, #24
    fc12:	462b      	mov	r3, r5
    fc14:	cb03      	ldmia	r3!, {r0, r1}
    fc16:	42bb      	cmp	r3, r7
    fc18:	6010      	str	r0, [r2, #0]
    fc1a:	6051      	str	r1, [r2, #4]
    fc1c:	461d      	mov	r5, r3
    fc1e:	f102 0208 	add.w	r2, r2, #8
    fc22:	d1f6      	bne.n	fc12 <va_set+0x6e>
	lab->addr = va.addr;
    fc24:	4b0a      	ldr	r3, [pc, #40]	; (fc50 <va_set+0xac>)
    fc26:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    fc2a:	805a      	strh	r2, [r3, #2]
	lab->ref = va.ref;
    fc2c:	881a      	ldrh	r2, [r3, #0]
    fc2e:	f366 020e 	bfi	r2, r6, #0, #15
    fc32:	801a      	strh	r2, [r3, #0]
	return 0;
    fc34:	e7c2      	b.n	fbbc <va_set+0x18>
    fc36:	bf00      	nop
    fc38:	000307a1 	.word	0x000307a1
    fc3c:	000328dd 	.word	0x000328dd
    fc40:	00032902 	.word	0x00032902
    fc44:	00032927 	.word	0x00032927
    fc48:	00032950 	.word	0x00032950
    fc4c:	200046b6 	.word	0x200046b6
    fc50:	200046b2 	.word	0x200046b2

0000fc54 <seg_tx_reset>:
{
    fc54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fc58:	4604      	mov	r4, r0
	k_delayed_work_cancel(&tx->retransmit);
    fc5a:	3050      	adds	r0, #80	; 0x50
    fc5c:	f014 f90c 	bl	23e78 <k_delayed_work_cancel>
	tx->cb = NULL;
    fc60:	2500      	movs	r5, #0
	tx->blocked = false;
    fc62:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
	k_mem_slab_free(&segs, (void **)&tx->seg[seg_idx]);
    fc66:	4f20      	ldr	r7, [pc, #128]	; (fce8 <seg_tx_reset+0x94>)
	tx->sub = NULL;
    fc68:	6025      	str	r5, [r4, #0]
	tx->seq_auth = 0U;
    fc6a:	2000      	movs	r0, #0
    fc6c:	2100      	movs	r1, #0
	tx->cb_data = NULL;
    fc6e:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
	tx->seq_auth = 0U;
    fc72:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
	tx->blocked = false;
    fc76:	f365 0200 	bfi	r2, r5, #0, #1
	tx->src = BT_MESH_ADDR_UNASSIGNED;
    fc7a:	63a5      	str	r5, [r4, #56]	; 0x38
	tx->blocked = false;
    fc7c:	f884 2046 	strb.w	r2, [r4, #70]	; 0x46
	for (i = 0; i <= tx->seg_n && tx->nack_count; i++) {
    fc80:	1d26      	adds	r6, r4, #4
	tx->seg[seg_idx] = NULL;
    fc82:	46a8      	mov	r8, r5
	for (i = 0; i <= tx->seg_n && tx->nack_count; i++) {
    fc84:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
    fc88:	b19b      	cbz	r3, fcb2 <seg_tx_reset+0x5e>
		if (!tx->seg[i]) {
    fc8a:	6833      	ldr	r3, [r6, #0]
    fc8c:	b153      	cbz	r3, fca4 <seg_tx_reset+0x50>
	k_mem_slab_free(&segs, (void **)&tx->seg[seg_idx]);
    fc8e:	4631      	mov	r1, r6
    fc90:	4638      	mov	r0, r7
    fc92:	f012 faad 	bl	221f0 <k_mem_slab_free>
	tx->seg[seg_idx] = NULL;
    fc96:	f8c6 8000 	str.w	r8, [r6]
	tx->nack_count--;
    fc9a:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
    fc9e:	3b01      	subs	r3, #1
    fca0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
	for (i = 0; i <= tx->seg_n && tx->nack_count; i++) {
    fca4:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    fca8:	3501      	adds	r5, #1
    fcaa:	42ab      	cmp	r3, r5
    fcac:	f106 0604 	add.w	r6, r6, #4
    fcb0:	dae8      	bge.n	fc84 <seg_tx_reset+0x30>
	tx->nack_count = 0;
    fcb2:	2100      	movs	r1, #0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    fcb4:	4b0d      	ldr	r3, [pc, #52]	; (fcec <seg_tx_reset+0x98>)
    fcb6:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    fcba:	f3bf 8f5b 	dmb	ish
    fcbe:	e853 2f00 	ldrex	r2, [r3]
    fcc2:	f022 0020 	bic.w	r0, r2, #32
    fcc6:	e843 0400 	strex	r4, r0, [r3]
    fcca:	2c00      	cmp	r4, #0
    fccc:	d1f7      	bne.n	fcbe <seg_tx_reset+0x6a>
    fcce:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_mesh.flags, BT_MESH_IVU_PENDING)) {
    fcd2:	0692      	lsls	r2, r2, #26
    fcd4:	d505      	bpl.n	fce2 <seg_tx_reset+0x8e>
		bt_mesh_net_iv_update(bt_mesh.iv_index, false);
    fcd6:	f853 0c08 	ldr.w	r0, [r3, #-8]
}
    fcda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_mesh_net_iv_update(bt_mesh.iv_index, false);
    fcde:	f7fe bc7b 	b.w	e5d8 <bt_mesh_net_iv_update>
}
    fce2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fce6:	bf00      	nop
    fce8:	20001264 	.word	0x20001264
    fcec:	20001de0 	.word	0x20001de0

0000fcf0 <seg_tx_complete>:
{
    fcf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fcf4:	4604      	mov	r4, r0
	void *cb_data = tx->cb_data;
    fcf6:	e9d0 5712 	ldrd	r5, r7, [r0, #72]	; 0x48
		if (&seg_tx[i] != tx &&
    fcfa:	4813      	ldr	r0, [pc, #76]	; (fd48 <seg_tx_complete+0x58>)
    fcfc:	4284      	cmp	r4, r0
{
    fcfe:	460e      	mov	r6, r1
		if (&seg_tx[i] != tx &&
    fd00:	d014      	beq.n	fd2c <seg_tx_complete+0x3c>
		    seg_tx[i].blocked &&
    fd02:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
		if (&seg_tx[i] != tx &&
    fd06:	07da      	lsls	r2, r3, #31
    fd08:	d510      	bpl.n	fd2c <seg_tx_complete+0x3c>
	return (tx->src == src) && (tx->dst == dst);
    fd0a:	8f01      	ldrh	r1, [r0, #56]	; 0x38
    fd0c:	8f22      	ldrh	r2, [r4, #56]	; 0x38
    fd0e:	4291      	cmp	r1, r2
    fd10:	d10c      	bne.n	fd2c <seg_tx_complete+0x3c>
    fd12:	8f41      	ldrh	r1, [r0, #58]	; 0x3a
    fd14:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
    fd16:	4291      	cmp	r1, r2
    fd18:	d108      	bne.n	fd2c <seg_tx_complete+0x3c>
		blocked->blocked = false;
    fd1a:	f36f 0300 	bfc	r3, #0, #1
    fd1e:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
		k_delayed_work_submit(&blocked->retransmit, K_NO_WAIT);
    fd22:	2200      	movs	r2, #0
    fd24:	2300      	movs	r3, #0
    fd26:	3050      	adds	r0, #80	; 0x50
    fd28:	f7ff fef0 	bl	fb0c <k_delayed_work_submit>
	seg_tx_reset(tx);
    fd2c:	4620      	mov	r0, r4
    fd2e:	f7ff ff91 	bl	fc54 <seg_tx_reset>
	if (cb && cb->end) {
    fd32:	b135      	cbz	r5, fd42 <seg_tx_complete+0x52>
    fd34:	686b      	ldr	r3, [r5, #4]
    fd36:	b123      	cbz	r3, fd42 <seg_tx_complete+0x52>
		cb->end(err, cb_data);
    fd38:	4639      	mov	r1, r7
    fd3a:	4630      	mov	r0, r6
}
    fd3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb->end(err, cb_data);
    fd40:	4718      	bx	r3
}
    fd42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fd46:	bf00      	nop
    fd48:	20002070 	.word	0x20002070

0000fd4c <seg_tx_send_unacked>:
{
    fd4c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!tx->nack_count) {
    fd4e:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
{
    fd52:	b087      	sub	sp, #28
    fd54:	4604      	mov	r4, r0
	if (!tx->nack_count) {
    fd56:	b3bb      	cbz	r3, fdc8 <seg_tx_send_unacked+0x7c>
		.net_idx = tx->sub->net_idx,
    fd58:	6801      	ldr	r1, [r0, #0]
	struct bt_mesh_net_tx net_tx = {
    fd5a:	9103      	str	r1, [sp, #12]
	struct bt_mesh_msg_ctx ctx = {
    fd5c:	2300      	movs	r3, #0
    fd5e:	2501      	movs	r5, #1
    fd60:	f8cd 3006 	str.w	r3, [sp, #6]
    fd64:	8b8b      	ldrh	r3, [r1, #28]
    fd66:	f8ad 3000 	strh.w	r3, [sp]
	struct bt_mesh_net_tx net_tx = {
    fd6a:	8f01      	ldrh	r1, [r0, #56]	; 0x38
	struct bt_mesh_msg_ctx ctx = {
    fd6c:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
    fd70:	f88d 500a 	strb.w	r5, [sp, #10]
    fd74:	f890 5044 	ldrb.w	r5, [r0, #68]	; 0x44
    fd78:	f88d 500b 	strb.w	r5, [sp, #11]
	struct bt_mesh_net_tx net_tx = {
    fd7c:	f8ad 1014 	strh.w	r1, [sp, #20]
    fd80:	f890 503e 	ldrb.w	r5, [r0, #62]	; 0x3e
    fd84:	f890 103f 	ldrb.w	r1, [r0, #63]	; 0x3f
    fd88:	f88d 1016 	strb.w	r1, [sp, #22]
    fd8c:	f3c3 1140 	ubfx	r1, r3, #5, #1
	struct bt_mesh_msg_ctx ctx = {
    fd90:	f343 0240 	sbfx	r2, r3, #1, #1
	struct bt_mesh_net_tx net_tx = {
    fd94:	f365 0187 	bfi	r1, r5, #2, #6
	struct bt_mesh_msg_ctx ctx = {
    fd98:	f8ad 2002 	strh.w	r2, [sp, #2]
		.addr = tx->dst,
    fd9c:	8f42      	ldrh	r2, [r0, #58]	; 0x3a
	struct bt_mesh_net_tx net_tx = {
    fd9e:	f88d 1017 	strb.w	r1, [sp, #23]
	if (!tx->attempts) {
    fda2:	f890 1043 	ldrb.w	r1, [r0, #67]	; 0x43
	struct bt_mesh_msg_ctx ctx = {
    fda6:	f8ad 2004 	strh.w	r2, [sp, #4]
	struct bt_mesh_net_tx net_tx = {
    fdaa:	f8cd d010 	str.w	sp, [sp, #16]
	if (!tx->attempts) {
    fdae:	b969      	cbnz	r1, fdcc <seg_tx_send_unacked+0x80>
		if (BT_MESH_ADDR_IS_UNICAST(tx->dst)) {
    fdb0:	b212      	sxth	r2, r2
    fdb2:	2a00      	cmp	r2, #0
    fdb4:	dd06      	ble.n	fdc4 <seg_tx_send_unacked+0x78>
			BT_ERR("Ran out of retransmit attempts");
    fdb6:	2145      	movs	r1, #69	; 0x45
    fdb8:	483f      	ldr	r0, [pc, #252]	; (feb8 <seg_tx_send_unacked+0x16c>)
    fdba:	f017 f8d8 	bl	26f6e <printk>
			seg_tx_complete(tx, -ETIMEDOUT);
    fdbe:	f06f 0173 	mvn.w	r1, #115	; 0x73
    fdc2:	4620      	mov	r0, r4
			seg_tx_complete(tx, 0);
    fdc4:	f7ff ff94 	bl	fcf0 <seg_tx_complete>
}
    fdc8:	b007      	add	sp, #28
    fdca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	tx->sending = 1U;
    fdcc:	f043 0310 	orr.w	r3, r3, #16
		err = bt_mesh_net_send(&net_tx, seg, &seg_sent_cb, tx);
    fdd0:	4e3a      	ldr	r6, [pc, #232]	; (febc <seg_tx_send_unacked+0x170>)
	tx->sending = 1U;
    fdd2:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	for (; tx->seg_o <= tx->seg_n; tx->seg_o++) {
    fdd6:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    fdda:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
    fdde:	429a      	cmp	r2, r3
    fde0:	d208      	bcs.n	fdf4 <seg_tx_send_unacked+0xa8>
	tx->seg_o = 0U;
    fde2:	2300      	movs	r3, #0
    fde4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
	tx->attempts--;
    fde8:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    fdec:	3b01      	subs	r3, #1
    fdee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    fdf2:	e02a      	b.n	fe4a <seg_tx_send_unacked+0xfe>
		if (!tx->seg[tx->seg_o]) {
    fdf4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    fdf8:	685b      	ldr	r3, [r3, #4]
    fdfa:	2b00      	cmp	r3, #0
    fdfc:	d056      	beq.n	feac <seg_tx_send_unacked+0x160>
		seg = bt_mesh_adv_create(BT_MESH_ADV_DATA, tx->xmit,
    fdfe:	2200      	movs	r2, #0
    fe00:	2300      	movs	r3, #0
    fe02:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
    fe06:	2001      	movs	r0, #1
    fe08:	f7fd ff0c 	bl	dc24 <bt_mesh_adv_create>
		if (!seg) {
    fe0c:	4605      	mov	r5, r0
    fe0e:	b1e0      	cbz	r0, fe4a <seg_tx_send_unacked+0xfe>
	net_buf_simple_reserve(&buf->b, reserve);
    fe10:	f100 0708 	add.w	r7, r0, #8
    fe14:	2109      	movs	r1, #9
    fe16:	4638      	mov	r0, r7
    fe18:	f00e ffb2 	bl	1ed80 <net_buf_simple_reserve>
		seg_tx_buf_build(tx, tx->seg_o, &seg->b);
    fe1c:	463a      	mov	r2, r7
    fe1e:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
    fe22:	4620      	mov	r0, r4
    fe24:	f01a fc0c 	bl	2a640 <seg_tx_buf_build>
		tx->seg_pending++;
    fe28:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    fe2c:	3301      	adds	r3, #1
    fe2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		err = bt_mesh_net_send(&net_tx, seg, &seg_sent_cb, tx);
    fe32:	4632      	mov	r2, r6
    fe34:	4623      	mov	r3, r4
    fe36:	4629      	mov	r1, r5
    fe38:	a803      	add	r0, sp, #12
    fe3a:	f7fe fd33 	bl	e8a4 <bt_mesh_net_send>
		if (err) {
    fe3e:	b3a8      	cbz	r0, feac <seg_tx_send_unacked+0x160>
			tx->seg_pending--;
    fe40:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    fe44:	3b01      	subs	r3, #1
    fe46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	if (!tx->seg_pending) {
    fe4a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    fe4e:	bb33      	cbnz	r3, fe9e <seg_tx_send_unacked+0x152>
				      K_MSEC(SEG_RETRANSMIT_TIMEOUT(tx)));
    fe50:	f9b4 303a 	ldrsh.w	r3, [r4, #58]	; 0x3a
    fe54:	2b00      	cmp	r3, #0
    fe56:	bfc1      	itttt	gt
    fe58:	f894 1044 	ldrbgt.w	r1, [r4, #68]	; 0x44
    fe5c:	2232      	movgt	r2, #50	; 0x32
    fe5e:	f44f 73c8 	movgt.w	r3, #400	; 0x190
    fe62:	fb12 3201 	smlabbgt	r2, r2, r1, r3
    fe66:	bfce      	itee	gt
    fe68:	17d3      	asrgt	r3, r2, #31
    fe6a:	2232      	movle	r2, #50	; 0x32
    fe6c:	2300      	movle	r3, #0
    fe6e:	03d9      	lsls	r1, r3, #15
    fe70:	03d0      	lsls	r0, r2, #15
    fe72:	f240 36e7 	movw	r6, #999	; 0x3e7
    fe76:	1980      	adds	r0, r0, r6
    fe78:	ea41 4152 	orr.w	r1, r1, r2, lsr #17
    fe7c:	f04f 0600 	mov.w	r6, #0
    fe80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    fe84:	f04f 0300 	mov.w	r3, #0
    fe88:	eb46 0101 	adc.w	r1, r6, r1
    fe8c:	f7f1 fdce 	bl	1a2c <__aeabi_uldivmod>
		k_delayed_work_submit(&tx->retransmit,
    fe90:	f104 0550 	add.w	r5, r4, #80	; 0x50
    fe94:	4602      	mov	r2, r0
    fe96:	460b      	mov	r3, r1
    fe98:	4628      	mov	r0, r5
    fe9a:	f7ff fe37 	bl	fb0c <k_delayed_work_submit>
	tx->sending = 0U;
    fe9e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
    fea2:	f36f 1304 	bfc	r3, #4, #1
    fea6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
    feaa:	e78d      	b.n	fdc8 <seg_tx_send_unacked+0x7c>
	for (; tx->seg_o <= tx->seg_n; tx->seg_o++) {
    feac:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    feb0:	3301      	adds	r3, #1
    feb2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    feb6:	e78e      	b.n	fdd6 <seg_tx_send_unacked+0x8a>
    feb8:	000327b9 	.word	0x000327b9
    febc:	0002eee8 	.word	0x0002eee8

0000fec0 <ctl_recv>:
{
    fec0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (ctl_op) {
    fec4:	f011 0a7f 	ands.w	sl, r1, #127	; 0x7f
{
    fec8:	4604      	mov	r4, r0
    feca:	4616      	mov	r6, r2
    fecc:	461d      	mov	r5, r3
	switch (ctl_op) {
    fece:	d012      	beq.n	fef6 <ctl_recv+0x36>
    fed0:	f1ba 0f0a 	cmp.w	sl, #10
    fed4:	f000 80ae 	beq.w	10034 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x35>
	if (!rx->local_match) {
    fed8:	7d03      	ldrb	r3, [r0, #20]
    feda:	f013 0540 	ands.w	r5, r3, #64	; 0x40
    fede:	d02f      	beq.n	ff40 <ctl_recv+0x80>
		switch (ctl_op) {
    fee0:	f10a 33ff 	add.w	r3, sl, #4294967295
    fee4:	2b07      	cmp	r3, #7
    fee6:	f200 80c8 	bhi.w	1007a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x7b>
    feea:	e8df f003 	tbb	[pc, r3]
    feee:	c6a8      	.short	0xc6a8
    fef0:	b7b2c6ad 	.word	0xb7b2c6ad
    fef4:	c1bc      	.short	0xc1bc
	if (buf->len < 6) {
    fef6:	8893      	ldrh	r3, [r2, #4]
    fef8:	2b05      	cmp	r3, #5
    fefa:	d806      	bhi.n	ff0a <ctl_recv+0x4a>
		BT_ERR("Too short ack message");
    fefc:	4864      	ldr	r0, [pc, #400]	; (10090 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x91>)
    fefe:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Received ack for group seg");
    ff00:	f017 f835 	bl	26f6e <printk>
		return -EINVAL;
    ff04:	f06f 0515 	mvn.w	r5, #21
    ff08:	e01a      	b.n	ff40 <ctl_recv+0x80>
	seq_zero = net_buf_simple_pull_be16(buf);
    ff0a:	4610      	mov	r0, r2
    ff0c:	f01c fd33 	bl	2c976 <net_buf_simple_pull_be16>
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && rx->friend_match) {
    ff10:	f994 3014 	ldrsb.w	r3, [r4, #20]
	obo = seq_zero >> 15;
    ff14:	f3c0 3bcf 	ubfx	fp, r0, #15, #16
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && rx->friend_match) {
    ff18:	2b00      	cmp	r3, #0
	seq_zero = (seq_zero >> 2) & TRANS_SEQ_ZERO_MASK;
    ff1a:	f3c0 008c 	ubfx	r0, r0, #2, #13
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && rx->friend_match) {
    ff1e:	fa1f f880 	uxth.w	r8, r0
    ff22:	f04f 0900 	mov.w	r9, #0
    ff26:	da0e      	bge.n	ff46 <ctl_recv+0x86>
		*seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_RX(rx), seq_zero);
    ff28:	7d20      	ldrb	r0, [r4, #20]
    ff2a:	4a5a      	ldr	r2, [pc, #360]	; (10094 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x95>)
    ff2c:	f000 0301 	and.w	r3, r0, #1
    ff30:	6810      	ldr	r0, [r2, #0]
    ff32:	1ac0      	subs	r0, r0, r3
    ff34:	0a03      	lsrs	r3, r0, #8
    ff36:	ea48 6000 	orr.w	r0, r8, r0, lsl #24
    ff3a:	e9c5 0300 	strd	r0, r3, [r5]
		return 0;
    ff3e:	4655      	mov	r5, sl
}
    ff40:	4628      	mov	r0, r5
    ff42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ack = net_buf_simple_pull_be32(buf);
    ff46:	4630      	mov	r0, r6
    ff48:	f01c fd36 	bl	2c9b8 <net_buf_simple_pull_be32>
    ff4c:	4607      	mov	r7, r0
	tx = seg_tx_lookup(seq_zero, obo, rx->ctx.addr);
    ff4e:	8920      	ldrh	r0, [r4, #8]
		if ((tx->seq_auth & TRANS_SEQ_ZERO_MASK) != seq_zero) {
    ff50:	4c51      	ldr	r4, [pc, #324]	; (10098 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x99>)
    ff52:	e9d4 160c 	ldrd	r1, r6, [r4, #48]	; 0x30
    ff56:	45ca      	cmp	sl, r9
    ff58:	f3c1 020c 	ubfx	r2, r1, #0, #13
    ff5c:	bf08      	it	eq
    ff5e:	4542      	cmpeq	r2, r8
    ff60:	f040 8093 	bne.w	1008a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x8b>
		if (tx->dst == addr) {
    ff64:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
    ff66:	4283      	cmp	r3, r0
    ff68:	d00c      	beq.n	ff84 <ctl_recv+0xc4>
		if (obo && tx->nack_count == tx->seg_n + 1) {
    ff6a:	f1bb 0f00 	cmp.w	fp, #0
    ff6e:	f000 808c 	beq.w	1008a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x8b>
    ff72:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    ff76:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
    ff7a:	3301      	adds	r3, #1
    ff7c:	429a      	cmp	r2, r3
    ff7e:	f040 8084 	bne.w	1008a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x8b>
			tx->dst = addr;
    ff82:	8760      	strh	r0, [r4, #58]	; 0x3a
	if (!BT_MESH_ADDR_IS_UNICAST(tx->dst)) {
    ff84:	f9b4 303a 	ldrsh.w	r3, [r4, #58]	; 0x3a
    ff88:	2b00      	cmp	r3, #0
    ff8a:	dc02      	bgt.n	ff92 <ctl_recv+0xd2>
		BT_ERR("Received ack for group seg");
    ff8c:	2145      	movs	r1, #69	; 0x45
    ff8e:	4843      	ldr	r0, [pc, #268]	; (1009c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x9d>)
    ff90:	e7b6      	b.n	ff00 <ctl_recv+0x40>
	*seq_auth = tx->seq_auth;
    ff92:	e9c5 1600 	strd	r1, r6, [r5]
	if (!ack) {
    ff96:	b957      	cbnz	r7, ffae <ctl_recv+0xee>
		BT_WARN("SDU canceled");
    ff98:	2157      	movs	r1, #87	; 0x57
    ff9a:	4841      	ldr	r0, [pc, #260]	; (100a0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xa1>)
    ff9c:	f016 ffe7 	bl	26f6e <printk>
		seg_tx_complete(tx, -ECANCELED);
    ffa0:	f06f 018b 	mvn.w	r1, #139	; 0x8b
    ffa4:	483c      	ldr	r0, [pc, #240]	; (10098 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x99>)
    ffa6:	f7ff fea3 	bl	fcf0 <seg_tx_complete>
		return 0;
    ffaa:	463d      	mov	r5, r7
    ffac:	e7c8      	b.n	ff40 <ctl_recv+0x80>
{
	if (op == 0) {
		return 0;
	}

	return 32 - __builtin_clz(op);
    ffae:	fab7 f387 	clz	r3, r7
	if (find_msb_set(ack) - 1 > tx->seg_n) {
    ffb2:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
    ffb6:	f1c3 031f 	rsb	r3, r3, #31
    ffba:	4293      	cmp	r3, r2
    ffbc:	d902      	bls.n	ffc4 <ctl_recv+0x104>
		BT_ERR("Too large segment number in ack");
    ffbe:	2145      	movs	r1, #69	; 0x45
    ffc0:	4838      	ldr	r0, [pc, #224]	; (100a4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xa5>)
    ffc2:	e79d      	b.n	ff00 <ctl_recv+0x40>
	k_delayed_work_cancel(&tx->retransmit);
    ffc4:	4838      	ldr	r0, [pc, #224]	; (100a8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xa9>)
	k_mem_slab_free(&segs, (void **)&tx->seg[seg_idx]);
    ffc6:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 100b4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb5>
	k_delayed_work_cancel(&tx->retransmit);
    ffca:	f013 ff55 	bl	23e78 <k_delayed_work_cancel>
	tx->seg[seg_idx] = NULL;
    ffce:	f04f 0900 	mov.w	r9, #0
		ack &= ~BIT(bit - 1);
    ffd2:	f04f 0a01 	mov.w	sl, #1
 * @return least significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
	return __builtin_ffs(op);
    ffd6:	2f00      	cmp	r7, #0
    ffd8:	fa97 f6a7 	rbit	r6, r7
    ffdc:	fab6 f686 	clz	r6, r6
    ffe0:	bf08      	it	eq
    ffe2:	f04f 36ff 	moveq.w	r6, #4294967295
	while ((bit = find_lsb_set(ack))) {
    ffe6:	1c75      	adds	r5, r6, #1
    ffe8:	d106      	bne.n	fff8 <ctl_recv+0x138>
	if (tx->nack_count) {
    ffea:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
    ffee:	b1e3      	cbz	r3, 1002a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2b>
		seg_tx_send_unacked(tx);
    fff0:	4829      	ldr	r0, [pc, #164]	; (10098 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x99>)
    fff2:	f7ff feab 	bl	fd4c <seg_tx_send_unacked>
    fff6:	e7a3      	b.n	ff40 <ctl_recv+0x80>
		if (tx->seg[bit - 1]) {
    fff8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
    fffc:	685b      	ldr	r3, [r3, #4]
    fffe:	b17b      	cbz	r3, 10020 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x21>
			seg_tx_done(tx, bit - 1);
   10000:	b2f5      	uxtb	r5, r6
	k_mem_slab_free(&segs, (void **)&tx->seg[seg_idx]);
   10002:	1c69      	adds	r1, r5, #1
   10004:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   10008:	4640      	mov	r0, r8
   1000a:	f012 f8f1 	bl	221f0 <k_mem_slab_free>
	tx->nack_count--;
   1000e:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
	tx->seg[seg_idx] = NULL;
   10012:	eb04 0585 	add.w	r5, r4, r5, lsl #2
	tx->nack_count--;
   10016:	3b01      	subs	r3, #1
	tx->seg[seg_idx] = NULL;
   10018:	f8c5 9004 	str.w	r9, [r5, #4]
	tx->nack_count--;
   1001c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
		ack &= ~BIT(bit - 1);
   10020:	fa0a f606 	lsl.w	r6, sl, r6
   10024:	ea27 0706 	bic.w	r7, r7, r6
   10028:	e7d5      	b.n	ffd6 <ctl_recv+0x116>
		seg_tx_complete(tx, 0);
   1002a:	4629      	mov	r1, r5
   1002c:	481a      	ldr	r0, [pc, #104]	; (10098 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x99>)
   1002e:	f7ff fe5f 	bl	fcf0 <seg_tx_complete>
   10032:	e785      	b.n	ff40 <ctl_recv+0x80>
		return bt_mesh_hb_recv(rx, buf);
   10034:	4611      	mov	r1, r2
}
   10036:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		return bt_mesh_hb_recv(rx, buf);
   1003a:	f001 b95d 	b.w	112f8 <bt_mesh_hb_recv>
			return bt_mesh_friend_poll(rx, buf);
   1003e:	4631      	mov	r1, r6
}
   10040:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			return bt_mesh_friend_poll(rx, buf);
   10044:	f005 b92e 	b.w	152a4 <bt_mesh_friend_poll>
			return bt_mesh_friend_req(rx, buf);
   10048:	4631      	mov	r1, r6
}
   1004a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			return bt_mesh_friend_req(rx, buf);
   1004e:	f005 b9fb 	b.w	15448 <bt_mesh_friend_req>
			return bt_mesh_friend_clear(rx, buf);
   10052:	4631      	mov	r1, r6
}
   10054:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			return bt_mesh_friend_clear(rx, buf);
   10058:	f005 b816 	b.w	15088 <bt_mesh_friend_clear>
			return bt_mesh_friend_clear_cfm(rx, buf);
   1005c:	4631      	mov	r1, r6
}
   1005e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			return bt_mesh_friend_clear_cfm(rx, buf);
   10062:	f005 b9a7 	b.w	153b4 <bt_mesh_friend_clear_cfm>
			return bt_mesh_friend_sub_add(rx, buf);
   10066:	4631      	mov	r1, r6
}
   10068:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			return bt_mesh_friend_sub_add(rx, buf);
   1006c:	f005 b870 	b.w	15150 <bt_mesh_friend_sub_add>
			return bt_mesh_friend_sub_rem(rx, buf);
   10070:	4631      	mov	r1, r6
}
   10072:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			return bt_mesh_friend_sub_rem(rx, buf);
   10076:	f005 b8c1 	b.w	151fc <bt_mesh_friend_sub_rem>
	BT_WARN("Unhandled TransOpCode 0x%02x", ctl_op);
   1007a:	4652      	mov	r2, sl
   1007c:	2157      	movs	r1, #87	; 0x57
   1007e:	480b      	ldr	r0, [pc, #44]	; (100ac <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xad>)
   10080:	f016 ff75 	bl	26f6e <printk>
	return -ENOENT;
   10084:	f06f 0501 	mvn.w	r5, #1
   10088:	e75a      	b.n	ff40 <ctl_recv+0x80>
		BT_WARN("No matching TX context for ack");
   1008a:	2157      	movs	r1, #87	; 0x57
   1008c:	4808      	ldr	r0, [pc, #32]	; (100b0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb1>)
   1008e:	e737      	b.n	ff00 <ctl_recv+0x40>
   10090:	000326b0 	.word	0x000326b0
   10094:	20001dd8 	.word	0x20001dd8
   10098:	20002070 	.word	0x20002070
   1009c:	000326cb 	.word	0x000326cb
   100a0:	000326eb 	.word	0x000326eb
   100a4:	000326fd 	.word	0x000326fd
   100a8:	200020c0 	.word	0x200020c0
   100ac:	00032722 	.word	0x00032722
   100b0:	00032744 	.word	0x00032744
   100b4:	20001264 	.word	0x20001264

000100b8 <send_seg>:
{
   100b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if (seg_tx[i].nack_count) {
   100bc:	4c82      	ldr	r4, [pc, #520]	; (102c8 <send_seg+0x210>)
{
   100be:	b08f      	sub	sp, #60	; 0x3c
   100c0:	4605      	mov	r5, r0
   100c2:	460e      	mov	r6, r1
   100c4:	9303      	str	r3, [sp, #12]
		if (seg_tx[i].nack_count) {
   100c6:	8901      	ldrh	r1, [r0, #8]
   100c8:	6843      	ldr	r3, [r0, #4]
   100ca:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
{
   100ce:	9f18      	ldr	r7, [sp, #96]	; 0x60
   100d0:	4693      	mov	fp, r2
   100d2:	889a      	ldrh	r2, [r3, #4]
		if (seg_tx[i].nack_count) {
   100d4:	b140      	cbz	r0, 100e8 <send_seg+0x30>
		BT_ERR("No multi-segment message contexts available");
   100d6:	487d      	ldr	r0, [pc, #500]	; (102cc <send_seg+0x214>)
   100d8:	2145      	movs	r1, #69	; 0x45
   100da:	f016 ff48 	bl	26f6e <printk>
		return -EBUSY;
   100de:	f06f 000f 	mvn.w	r0, #15
}
   100e2:	b00f      	add	sp, #60	; 0x3c
   100e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (ctl_op) {
   100e8:	2f00      	cmp	r7, #0
   100ea:	d077      	beq.n	101dc <send_seg+0x124>
		tx->hdr = TRANS_CTL_HDR(*ctl_op, 1);
   100ec:	783b      	ldrb	r3, [r7, #0]
   100ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
		tx->hdr = SEG_HDR(1, net_tx->aid);
   100f2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
	tx->src = net_tx->src;
   100f6:	8721      	strh	r1, [r4, #56]	; 0x38
	tx->seg_n = (sdu->len - 1) / seg_len(!!ctl_op);
   100f8:	88b1      	ldrh	r1, [r6, #4]
	tx->dst = net_tx->ctx->addr;
   100fa:	8762      	strh	r2, [r4, #58]	; 0x3a
		return BT_MESH_APP_SEG_SDU_MAX;
   100fc:	2f00      	cmp	r7, #0
	tx->len = sdu->len;
   100fe:	87a1      	strh	r1, [r4, #60]	; 0x3c
	tx->seg_o = 0;
   10100:	f04f 0200 	mov.w	r2, #0
	tx->seg_n = (sdu->len - 1) / seg_len(!!ctl_op);
   10104:	f101 33ff 	add.w	r3, r1, #4294967295
		return BT_MESH_APP_SEG_SDU_MAX;
   10108:	bf18      	it	ne
   1010a:	f04f 0908 	movne.w	r9, #8
	tx->seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_TX, bt_mesh.seq);
   1010e:	4970      	ldr	r1, [pc, #448]	; (102d0 <send_seg+0x218>)
	tx->seg_o = 0;
   10110:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
		return BT_MESH_APP_SEG_SDU_MAX;
   10114:	bf08      	it	eq
   10116:	f04f 090c 	moveq.w	r9, #12
	tx->seg_n = (sdu->len - 1) / seg_len(!!ctl_op);
   1011a:	fb93 f3f9 	sdiv	r3, r3, r9
   1011e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
	tx->nack_count = tx->seg_n + 1;
   10122:	f103 0301 	add.w	r3, r3, #1
   10126:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
	tx->seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_TX, bt_mesh.seq);
   1012a:	680b      	ldr	r3, [r1, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1012c:	f3bf 8f5b 	dmb	ish
   10130:	6888      	ldr	r0, [r1, #8]
   10132:	f3bf 8f5b 	dmb	ish
   10136:	f3c0 0080 	ubfx	r0, r0, #2, #1
   1013a:	6849      	ldr	r1, [r1, #4]
   1013c:	f8df 8194 	ldr.w	r8, [pc, #404]	; 102d4 <send_seg+0x21c>
   10140:	eba3 0300 	sub.w	r3, r3, r0
   10144:	ea4f 2013 	mov.w	r0, r3, lsr #8
   10148:	ea41 6303 	orr.w	r3, r1, r3, lsl #24
   1014c:	e9c4 300c 	strd	r3, r0, [r4, #48]	; 0x30
	tx->cb_data = cb_data;
   10150:	9b03      	ldr	r3, [sp, #12]
	tx->sub = net_tx->sub;
   10152:	6828      	ldr	r0, [r5, #0]
	tx->cb_data = cb_data;
   10154:	64e3      	str	r3, [r4, #76]	; 0x4c
	tx->attempts = SEG_RETRANSMIT_ATTEMPTS;
   10156:	f04f 0304 	mov.w	r3, #4
   1015a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	tx->cb = cb;
   1015e:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	tx->xmit = net_tx->xmit;
   10162:	7aab      	ldrb	r3, [r5, #10]
   10164:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
	tx->aszmic = net_tx->aszmic;
   10168:	7ae9      	ldrb	r1, [r5, #11]
   1016a:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
	tx->sub = net_tx->sub;
   1016e:	6020      	str	r0, [r4, #0]
	tx->aszmic = net_tx->aszmic;
   10170:	f3c1 0140 	ubfx	r1, r1, #1, #1
   10174:	f361 0382 	bfi	r3, r1, #2, #1
	tx->friend_cred = net_tx->friend_cred;
   10178:	7ae9      	ldrb	r1, [r5, #11]
	tx->seg_pending = 0;
   1017a:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
	tx->friend_cred = net_tx->friend_cred;
   1017e:	f3c1 0100 	ubfx	r1, r1, #0, #1
   10182:	f361 1345 	bfi	r3, r1, #5, #1
	tx->ctl = !!ctl_op;
   10186:	bf18      	it	ne
   10188:	2201      	movne	r2, #1
   1018a:	f003 03f6 	and.w	r3, r3, #246	; 0xf6
   1018e:	f362 0341 	bfi	r3, r2, #1, #1
   10192:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	tx->ttl = net_tx->ctx->send_ttl;
   10196:	686b      	ldr	r3, [r5, #4]
   10198:	7adb      	ldrb	r3, [r3, #11]
   1019a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
					    tx->seg_n + 1) &&
   1019e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
	    !bt_mesh_friend_queue_has_space(tx->sub->net_idx, net_tx->src,
   101a2:	8b80      	ldrh	r0, [r0, #28]
   101a4:	8929      	ldrh	r1, [r5, #8]
					    tx->seg_n + 1) &&
   101a6:	3301      	adds	r3, #1
	    !bt_mesh_friend_queue_has_space(tx->sub->net_idx, net_tx->src,
   101a8:	b2db      	uxtb	r3, r3
   101aa:	9300      	str	r3, [sp, #0]
   101ac:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
   101ae:	4b49      	ldr	r3, [pc, #292]	; (102d4 <send_seg+0x21c>)
   101b0:	f005 faea 	bl	15788 <bt_mesh_friend_queue_has_space>
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) &&
   101b4:	2800      	cmp	r0, #0
   101b6:	d17b      	bne.n	102b0 <send_seg+0x1f8>
					    tx->seg_n + 1) &&
   101b8:	f9b4 303a 	ldrsh.w	r3, [r4, #58]	; 0x3a
   101bc:	2b00      	cmp	r3, #0
   101be:	dd77      	ble.n	102b0 <send_seg+0x1f8>
		BT_ERR("Not enough space in Friend Queue for %u segments",
   101c0:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
   101c4:	4844      	ldr	r0, [pc, #272]	; (102d8 <send_seg+0x220>)
   101c6:	3201      	adds	r2, #1
   101c8:	2145      	movs	r1, #69	; 0x45
   101ca:	f016 fed0 	bl	26f6e <printk>
		seg_tx_reset(tx);
   101ce:	f1a8 0030 	sub.w	r0, r8, #48	; 0x30
			seg_tx_reset(tx);
   101d2:	f7ff fd3f 	bl	fc54 <seg_tx_reset>
			return -ENOBUFS;
   101d6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   101da:	e782      	b.n	100e2 <send_seg+0x2a>
	} else if (BT_MESH_IS_DEV_KEY(net_tx->ctx->app_idx)) {
   101dc:	885b      	ldrh	r3, [r3, #2]
   101de:	3303      	adds	r3, #3
   101e0:	b29b      	uxth	r3, r3
   101e2:	2b01      	cmp	r3, #1
		tx->hdr = SEG_HDR(1, net_tx->aid);
   101e4:	bf85      	ittet	hi
   101e6:	7aeb      	ldrbhi	r3, [r5, #11]
   101e8:	f3c3 0385 	ubfxhi	r3, r3, #2, #6
		tx->hdr = SEG_HDR(0, 0);
   101ec:	2380      	movls	r3, #128	; 0x80
		tx->hdr = SEG_HDR(1, net_tx->aid);
   101ee:	f063 033f 	ornhi	r3, r3, #63	; 0x3f
   101f2:	e77e      	b.n	100f2 <send_seg+0x3a>
		err = k_mem_slab_alloc(&segs, &buf, BUF_TIMEOUT);
   101f4:	2200      	movs	r2, #0
   101f6:	2300      	movs	r3, #0
   101f8:	a906      	add	r1, sp, #24
   101fa:	4838      	ldr	r0, [pc, #224]	; (102dc <send_seg+0x224>)
   101fc:	f011 ff9e 	bl	2213c <k_mem_slab_alloc>
		if (err) {
   10200:	9002      	str	r0, [sp, #8]
   10202:	b128      	cbz	r0, 10210 <send_seg+0x158>
			BT_ERR("Out of segment buffers");
   10204:	4836      	ldr	r0, [pc, #216]	; (102e0 <send_seg+0x228>)
   10206:	2145      	movs	r1, #69	; 0x45
   10208:	f016 feb1 	bl	26f6e <printk>
			seg_tx_reset(tx);
   1020c:	482e      	ldr	r0, [pc, #184]	; (102c8 <send_seg+0x210>)
   1020e:	e7e0      	b.n	101d2 <send_seg+0x11a>
		memcpy(buf, net_buf_simple_pull_mem(sdu, len), len);
   10210:	88b2      	ldrh	r2, [r6, #4]
   10212:	f8dd a018 	ldr.w	sl, [sp, #24]
   10216:	454a      	cmp	r2, r9
   10218:	bf28      	it	cs
   1021a:	464a      	movcs	r2, r9
   1021c:	4611      	mov	r1, r2
   1021e:	4630      	mov	r0, r6
   10220:	9205      	str	r2, [sp, #20]
   10222:	f00e ffc9 	bl	1f1b8 <net_buf_simple_pull_mem>
   10226:	9a05      	ldr	r2, [sp, #20]
   10228:	4601      	mov	r1, r0
   1022a:	4650      	mov	r0, sl
		tx->seg[seg_o] = buf;
   1022c:	eb04 0a87 	add.w	sl, r4, r7, lsl #2
   10230:	f01d f9a8 	bl	2d584 <memcpy>
   10234:	9b06      	ldr	r3, [sp, #24]
   10236:	f8ca 3004 	str.w	r3, [sl, #4]
			NET_BUF_SIMPLE_DEFINE(seg, 16);
   1023a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   1023e:	ab0a      	add	r3, sp, #40	; 0x28
   10240:	e9cd 2308 	strd	r2, r3, [sp, #32]
   10244:	9307      	str	r3, [sp, #28]
			seg_tx_buf_build(tx, seg_o, &seg);
   10246:	ab07      	add	r3, sp, #28
   10248:	461a      	mov	r2, r3
   1024a:	4639      	mov	r1, r7
   1024c:	481e      	ldr	r0, [pc, #120]	; (102c8 <send_seg+0x210>)
   1024e:	f01a f9f7 	bl	2a640 <seg_tx_buf_build>
			if (seg_o == tx->seg_n) {
   10252:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
			if (bt_mesh_friend_enqueue_tx(
   10256:	ab07      	add	r3, sp, #28
				    tx->seg_n + 1, &seg) &&
   10258:	1c4a      	adds	r2, r1, #1
			if (bt_mesh_friend_enqueue_tx(
   1025a:	9300      	str	r3, [sp, #0]
   1025c:	428f      	cmp	r7, r1
   1025e:	bf0c      	ite	eq
   10260:	2102      	moveq	r1, #2
   10262:	2101      	movne	r1, #1
   10264:	b2d3      	uxtb	r3, r2
   10266:	4628      	mov	r0, r5
   10268:	9a04      	ldr	r2, [sp, #16]
   1026a:	f005 fb59 	bl	15920 <bt_mesh_friend_enqueue_tx>
   1026e:	b158      	cbz	r0, 10288 <send_seg+0x1d0>
			    BT_MESH_ADDR_IS_UNICAST(net_tx->ctx->addr)) {
   10270:	686b      	ldr	r3, [r5, #4]
				    tx->seg_n + 1, &seg) &&
   10272:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
   10276:	2b00      	cmp	r3, #0
   10278:	dd06      	ble.n	10288 <send_seg+0x1d0>
				k_mem_slab_free(&segs, &buf);
   1027a:	a906      	add	r1, sp, #24
   1027c:	4817      	ldr	r0, [pc, #92]	; (102dc <send_seg+0x224>)
   1027e:	f011 ffb7 	bl	221f0 <k_mem_slab_free>
				tx->seg[seg_o] = NULL;
   10282:	9b02      	ldr	r3, [sp, #8]
   10284:	f8ca 3004 	str.w	r3, [sl, #4]
   10288:	f108 0801 	add.w	r8, r8, #1
	for (seg_o = 0U; sdu->len; seg_o++) {
   1028c:	f8b6 a004 	ldrh.w	sl, [r6, #4]
   10290:	fa5f f788 	uxtb.w	r7, r8
   10294:	f1ba 0f00 	cmp.w	sl, #0
   10298:	d1ac      	bne.n	101f4 <send_seg+0x13c>
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && !tx->seg[0]) {
   1029a:	6864      	ldr	r4, [r4, #4]
		seg_tx_reset(tx);
   1029c:	480a      	ldr	r0, [pc, #40]	; (102c8 <send_seg+0x210>)
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && !tx->seg[0]) {
   1029e:	b97c      	cbnz	r4, 102c0 <send_seg+0x208>
		seg_tx_reset(tx);
   102a0:	f7ff fcd8 	bl	fc54 <seg_tx_reset>
		send_cb_finalize(cb, cb_data);
   102a4:	4658      	mov	r0, fp
   102a6:	9903      	ldr	r1, [sp, #12]
   102a8:	f01a f9b8 	bl	2a61c <send_cb_finalize>
		return 0;
   102ac:	4620      	mov	r0, r4
   102ae:	e718      	b.n	100e2 <send_seg+0x2a>
   102b0:	2f00      	cmp	r7, #0
   102b2:	bf0c      	ite	eq
   102b4:	4643      	moveq	r3, r8
   102b6:	2300      	movne	r3, #0
   102b8:	9304      	str	r3, [sp, #16]
				type = BT_MESH_FRIEND_PDU_PARTIAL;
   102ba:	f04f 0800 	mov.w	r8, #0
   102be:	e7e5      	b.n	1028c <send_seg+0x1d4>
	seg_tx_send_unacked(tx);
   102c0:	f7ff fd44 	bl	fd4c <seg_tx_send_unacked>
	return 0;
   102c4:	4650      	mov	r0, sl
   102c6:	e70c      	b.n	100e2 <send_seg+0x2a>
   102c8:	20002070 	.word	0x20002070
   102cc:	000327dd 	.word	0x000327dd
   102d0:	20001dd8 	.word	0x20001dd8
   102d4:	200020a0 	.word	0x200020a0
   102d8:	0003280e 	.word	0x0003280e
   102dc:	20001264 	.word	0x20001264
   102e0:	00032844 	.word	0x00032844

000102e4 <send_unseg>:
{
   102e4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   102e8:	4604      	mov	r4, r0
   102ea:	468a      	mov	sl, r1
   102ec:	4690      	mov	r8, r2
	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA, tx->xmit, BUF_TIMEOUT);
   102ee:	7a81      	ldrb	r1, [r0, #10]
{
   102f0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   102f2:	4699      	mov	r9, r3
	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA, tx->xmit, BUF_TIMEOUT);
   102f4:	2200      	movs	r2, #0
   102f6:	2300      	movs	r3, #0
   102f8:	2001      	movs	r0, #1
   102fa:	f7fd fc93 	bl	dc24 <bt_mesh_adv_create>
	if (!buf) {
   102fe:	4606      	mov	r6, r0
   10300:	b940      	cbnz	r0, 10314 <send_unseg+0x30>
		BT_ERR("Out of network buffers");
   10302:	2145      	movs	r1, #69	; 0x45
   10304:	4831      	ldr	r0, [pc, #196]	; (103cc <send_unseg+0xe8>)
   10306:	f016 fe32 	bl	26f6e <printk>
				return -ENOBUFS;
   1030a:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   1030e:	b002      	add	sp, #8
   10310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10314:	f100 0508 	add.w	r5, r0, #8
   10318:	2109      	movs	r1, #9
   1031a:	4628      	mov	r0, r5
   1031c:	f00e fd30 	bl	1ed80 <net_buf_simple_reserve>
	if (ctl_op) {
   10320:	b327      	cbz	r7, 1036c <send_unseg+0x88>
		net_buf_add_u8(buf, TRANS_CTL_HDR(*ctl_op, 0));
   10322:	7839      	ldrb	r1, [r7, #0]
	return net_buf_simple_add_u8(&buf->b, val);
   10324:	f001 017f 	and.w	r1, r1, #127	; 0x7f
   10328:	4628      	mov	r0, r5
   1032a:	f01c fb66 	bl	2c9fa <net_buf_simple_add_u8>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1032e:	f8ba 2004 	ldrh.w	r2, [sl, #4]
   10332:	f8da 1000 	ldr.w	r1, [sl]
   10336:	4628      	mov	r0, r5
   10338:	f01c fb53 	bl	2c9e2 <net_buf_simple_add_mem>
		if (!bt_mesh_friend_queue_has_space(tx->sub->net_idx,
   1033c:	6863      	ldr	r3, [r4, #4]
   1033e:	8921      	ldrh	r1, [r4, #8]
   10340:	889a      	ldrh	r2, [r3, #4]
   10342:	6823      	ldr	r3, [r4, #0]
   10344:	2701      	movs	r7, #1
   10346:	8b98      	ldrh	r0, [r3, #28]
   10348:	9700      	str	r7, [sp, #0]
   1034a:	2300      	movs	r3, #0
   1034c:	f005 fa1c 	bl	15788 <bt_mesh_friend_queue_has_space>
   10350:	bb28      	cbnz	r0, 1039e <send_unseg+0xba>
			if (BT_MESH_ADDR_IS_UNICAST(tx->ctx->addr)) {
   10352:	6863      	ldr	r3, [r4, #4]
   10354:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
   10358:	2b00      	cmp	r3, #0
   1035a:	dd13      	ble.n	10384 <send_unseg+0xa0>
				BT_ERR("Not enough space in Friend Queue");
   1035c:	2145      	movs	r1, #69	; 0x45
   1035e:	481c      	ldr	r0, [pc, #112]	; (103d0 <send_unseg+0xec>)
   10360:	f016 fe05 	bl	26f6e <printk>
				net_buf_unref(buf);
   10364:	4630      	mov	r0, r6
   10366:	f00e fdf5 	bl	1ef54 <net_buf_unref>
   1036a:	e7ce      	b.n	1030a <send_unseg+0x26>
	} else if (BT_MESH_IS_DEV_KEY(tx->ctx->app_idx)) {
   1036c:	6863      	ldr	r3, [r4, #4]
   1036e:	885b      	ldrh	r3, [r3, #2]
   10370:	3303      	adds	r3, #3
   10372:	b29b      	uxth	r3, r3
   10374:	2b01      	cmp	r3, #1
		net_buf_add_u8(buf, UNSEG_HDR(1, tx->aid));
   10376:	bf85      	ittet	hi
   10378:	7ae1      	ldrbhi	r1, [r4, #11]
   1037a:	0889      	lsrhi	r1, r1, #2
	return net_buf_simple_add_u8(&buf->b, val);
   1037c:	4639      	movls	r1, r7
   1037e:	f041 0140 	orrhi.w	r1, r1, #64	; 0x40
   10382:	e7d1      	b.n	10328 <send_unseg+0x44>
				BT_WARN("No space in Friend Queue");
   10384:	2157      	movs	r1, #87	; 0x57
   10386:	4813      	ldr	r0, [pc, #76]	; (103d4 <send_unseg+0xf0>)
   10388:	f016 fdf1 	bl	26f6e <printk>
	return bt_mesh_net_send(tx, buf, cb, cb_data);
   1038c:	464b      	mov	r3, r9
   1038e:	4642      	mov	r2, r8
   10390:	4631      	mov	r1, r6
   10392:	4620      	mov	r0, r4
}
   10394:	b002      	add	sp, #8
   10396:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_mesh_net_send(tx, buf, cb, cb_data);
   1039a:	f7fe ba83 	b.w	e8a4 <bt_mesh_net_send>
		if (bt_mesh_friend_enqueue_tx(tx, BT_MESH_FRIEND_PDU_SINGLE,
   1039e:	2200      	movs	r2, #0
   103a0:	9500      	str	r5, [sp, #0]
   103a2:	463b      	mov	r3, r7
   103a4:	4611      	mov	r1, r2
   103a6:	4620      	mov	r0, r4
   103a8:	f005 faba 	bl	15920 <bt_mesh_friend_enqueue_tx>
   103ac:	2800      	cmp	r0, #0
   103ae:	d0ed      	beq.n	1038c <send_unseg+0xa8>
		    BT_MESH_ADDR_IS_UNICAST(tx->ctx->addr)) {
   103b0:	6863      	ldr	r3, [r4, #4]
					      NULL, 1, &buf->b) &&
   103b2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
   103b6:	2b00      	cmp	r3, #0
   103b8:	dde8      	ble.n	1038c <send_unseg+0xa8>
			net_buf_unref(buf);
   103ba:	4630      	mov	r0, r6
   103bc:	f00e fdca 	bl	1ef54 <net_buf_unref>
			send_cb_finalize(cb, cb_data);
   103c0:	4640      	mov	r0, r8
   103c2:	4649      	mov	r1, r9
   103c4:	f01a f92a 	bl	2a61c <send_cb_finalize>
			return 0;
   103c8:	2000      	movs	r0, #0
   103ca:	e7a0      	b.n	1030e <send_unseg+0x2a>
   103cc:	00032860 	.word	0x00032860
   103d0:	0003287c 	.word	0x0003287c
   103d4:	000328a2 	.word	0x000328a2

000103d8 <bt_mesh_tx_in_progress>:
		if (seg_tx[i].nack_count) {
   103d8:	4b03      	ldr	r3, [pc, #12]	; (103e8 <bt_mesh_tx_in_progress+0x10>)
   103da:	f893 0042 	ldrb.w	r0, [r3, #66]	; 0x42
}
   103de:	3000      	adds	r0, #0
   103e0:	bf18      	it	ne
   103e2:	2001      	movne	r0, #1
   103e4:	4770      	bx	lr
   103e6:	bf00      	nop
   103e8:	20002070 	.word	0x20002070

000103ec <bt_mesh_ctl_send>:
{
   103ec:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
   103ee:	6846      	ldr	r6, [r0, #4]
{
   103f0:	461d      	mov	r5, r3
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
   103f2:	7af3      	ldrb	r3, [r6, #11]
{
   103f4:	b089      	sub	sp, #36	; 0x24
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
   103f6:	2bff      	cmp	r3, #255	; 0xff
{
   103f8:	4604      	mov	r4, r0
   103fa:	4617      	mov	r7, r2
   103fc:	f88d 100f 	strb.w	r1, [sp, #15]
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
   10400:	d119      	bne.n	10436 <bt_mesh_ctl_send+0x4a>
		tx->ctx->send_ttl = bt_mesh_default_ttl_get();
   10402:	f7fd fab7 	bl	d974 <bt_mesh_default_ttl_get>
   10406:	72f0      	strb	r0, [r6, #11]
	net_buf_simple_init_with_data(&buf, data, data_len);
   10408:	462a      	mov	r2, r5
   1040a:	4639      	mov	r1, r7
   1040c:	a805      	add	r0, sp, #20
   1040e:	f01c fa79 	bl	2c904 <net_buf_simple_init_with_data>
	if (data_len > BT_MESH_SDU_UNSEG_MAX) {
   10412:	6863      	ldr	r3, [r4, #4]
   10414:	2d0b      	cmp	r5, #11
		tx->ctx->send_rel = true;
   10416:	bf84      	itt	hi
   10418:	2201      	movhi	r2, #1
   1041a:	729a      	strbhi	r2, [r3, #10]
	tx->ctx->app_idx = BT_MESH_KEY_UNUSED;
   1041c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10420:	805a      	strh	r2, [r3, #2]
	if (tx->ctx->addr == BT_MESH_ADDR_UNASSIGNED ||
   10422:	889a      	ldrh	r2, [r3, #4]
   10424:	b122      	cbz	r2, 10430 <bt_mesh_ctl_send+0x44>
   10426:	f482 4200 	eor.w	r2, r2, #32768	; 0x8000
   1042a:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
   1042e:	d20c      	bcs.n	1044a <bt_mesh_ctl_send+0x5e>
		BT_ERR("Invalid destination address");
   10430:	2145      	movs	r1, #69	; 0x45
   10432:	480f      	ldr	r0, [pc, #60]	; (10470 <bt_mesh_ctl_send+0x84>)
   10434:	e003      	b.n	1043e <bt_mesh_ctl_send+0x52>
	} else if (tx->ctx->send_ttl > BT_MESH_TTL_MAX) {
   10436:	061b      	lsls	r3, r3, #24
   10438:	d5e6      	bpl.n	10408 <bt_mesh_ctl_send+0x1c>
		BT_ERR("TTL too large (max 127)");
   1043a:	480e      	ldr	r0, [pc, #56]	; (10474 <bt_mesh_ctl_send+0x88>)
   1043c:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Invalid destination address");
   1043e:	f016 fd96 	bl	26f6e <printk>
		return -EINVAL;
   10442:	f06f 0015 	mvn.w	r0, #21
}
   10446:	b009      	add	sp, #36	; 0x24
   10448:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (tx->ctx->send_rel) {
   1044a:	7a9a      	ldrb	r2, [r3, #10]
   1044c:	f10d 030f 	add.w	r3, sp, #15
		return send_seg(tx, &buf, cb, cb_data, &ctl_op);
   10450:	9300      	str	r3, [sp, #0]
   10452:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	if (tx->ctx->send_rel) {
   10454:	b12a      	cbz	r2, 10462 <bt_mesh_ctl_send+0x76>
		return send_seg(tx, &buf, cb, cb_data, &ctl_op);
   10456:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   10458:	a905      	add	r1, sp, #20
   1045a:	4620      	mov	r0, r4
   1045c:	f7ff fe2c 	bl	100b8 <send_seg>
   10460:	e7f1      	b.n	10446 <bt_mesh_ctl_send+0x5a>
		return send_unseg(tx, &buf, cb, cb_data, &ctl_op);
   10462:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   10464:	a905      	add	r1, sp, #20
   10466:	4620      	mov	r0, r4
   10468:	f7ff ff3c 	bl	102e4 <send_unseg>
   1046c:	e7eb      	b.n	10446 <bt_mesh_ctl_send+0x5a>
   1046e:	bf00      	nop
   10470:	0003232f 	.word	0x0003232f
   10474:	00032312 	.word	0x00032312

00010478 <seg_ack>:
{
   10478:	b5f0      	push	{r4, r5, r6, r7, lr}
   1047a:	4604      	mov	r4, r0
   1047c:	b085      	sub	sp, #20
	struct seg_rx *rx = CONTAINER_OF(work, struct seg_rx, ack);
   1047e:	f1a0 0530 	sub.w	r5, r0, #48	; 0x30
   10482:	f01c ffdf 	bl	2d444 <z_impl_k_uptime_ticks>
   10486:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1048a:	fba0 6703 	umull	r6, r7, r0, r3
   1048e:	fb03 7701 	mla	r7, r3, r1, r7
	if (k_uptime_get_32() - rx->last > (60 * MSEC_PER_SEC)) {
   10492:	f854 2c08 	ldr.w	r2, [r4, #-8]
   10496:	0bf3      	lsrs	r3, r6, #15
   10498:	ea43 4347 	orr.w	r3, r3, r7, lsl #17
   1049c:	1a9b      	subs	r3, r3, r2
   1049e:	f64e 2260 	movw	r2, #60000	; 0xea60
   104a2:	4293      	cmp	r3, r2
   104a4:	d90a      	bls.n	104bc <seg_ack+0x44>
		BT_WARN("Incomplete timer expired");
   104a6:	2157      	movs	r1, #87	; 0x57
   104a8:	481b      	ldr	r0, [pc, #108]	; (10518 <seg_ack+0xa0>)
   104aa:	f016 fd60 	bl	26f6e <printk>
		seg_rx_reset(rx, false);
   104ae:	2100      	movs	r1, #0
   104b0:	4628      	mov	r0, r5
}
   104b2:	b005      	add	sp, #20
   104b4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		seg_rx_reset(rx, false);
   104b8:	f7ff bb2e 	b.w	fb18 <seg_rx_reset>
		 rx->block, rx->obo);
   104bc:	f814 3c11 	ldrb.w	r3, [r4, #-17]
	send_ack(rx->sub, rx->dst, rx->src, rx->ttl, &rx->seq_auth,
   104c0:	f834 2c18 	ldrh.w	r2, [r4, #-24]
   104c4:	f834 1c16 	ldrh.w	r1, [r4, #-22]
   104c8:	f854 0c30 	ldr.w	r0, [r4, #-48]
   104cc:	09db      	lsrs	r3, r3, #7
   104ce:	9302      	str	r3, [sp, #8]
   104d0:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   104d4:	9301      	str	r3, [sp, #4]
   104d6:	f1a4 0320 	sub.w	r3, r4, #32
   104da:	9300      	str	r3, [sp, #0]
   104dc:	f814 3c10 	ldrb.w	r3, [r4, #-16]
   104e0:	f01a f9ae 	bl	2a840 <send_ack>
	timeout = ack_timeout(rx);
   104e4:	4628      	mov	r0, r5
   104e6:	f01a f8e9 	bl	2a6bc <ack_timeout>
   104ea:	f44f 4500 	mov.w	r5, #32768	; 0x8000
	k_delayed_work_submit(&rx->ack, K_MSEC(timeout));
   104ee:	ea20 76e0 	bic.w	r6, r0, r0, asr #31
   104f2:	2100      	movs	r1, #0
   104f4:	f240 30e7 	movw	r0, #999	; 0x3e7
   104f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   104fc:	2300      	movs	r3, #0
   104fe:	fbc5 0106 	smlal	r0, r1, r5, r6
   10502:	f7f1 fa93 	bl	1a2c <__aeabi_uldivmod>
   10506:	4602      	mov	r2, r0
   10508:	460b      	mov	r3, r1
   1050a:	4620      	mov	r0, r4
}
   1050c:	b005      	add	sp, #20
   1050e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_delayed_work_submit(&rx->ack, K_MSEC(timeout));
   10512:	f7ff bafb 	b.w	fb0c <k_delayed_work_submit>
   10516:	bf00      	nop
   10518:	00032768 	.word	0x00032768

0001051c <bt_mesh_trans_reset>:
{
   1051c:	b508      	push	{r3, lr}
		seg_rx_reset(&seg_rx[i], true);
   1051e:	2101      	movs	r1, #1
   10520:	480a      	ldr	r0, [pc, #40]	; (1054c <bt_mesh_trans_reset+0x30>)
   10522:	f7ff faf9 	bl	fb18 <seg_rx_reset>
		seg_tx_reset(&seg_tx[i]);
   10526:	480a      	ldr	r0, [pc, #40]	; (10550 <bt_mesh_trans_reset+0x34>)
   10528:	f7ff fb94 	bl	fc54 <seg_tx_reset>
		if (virtual_addrs[i].ref) {
   1052c:	4a09      	ldr	r2, [pc, #36]	; (10554 <bt_mesh_trans_reset+0x38>)
   1052e:	8813      	ldrh	r3, [r2, #0]
   10530:	f3c3 030e 	ubfx	r3, r3, #0, #15
   10534:	b113      	cbz	r3, 1053c <bt_mesh_trans_reset+0x20>
			virtual_addrs[i].ref = 0U;
   10536:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1053a:	8013      	strh	r3, [r2, #0]
	bt_mesh_rpl_clear();
   1053c:	f01a f9d4 	bl	2a8e8 <bt_mesh_rpl_clear>
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_VA_PENDING);
   10540:	2009      	movs	r0, #9
}
   10542:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_VA_PENDING);
   10546:	f004 b899 	b.w	1467c <bt_mesh_settings_store_schedule>
   1054a:	bf00      	nop
   1054c:	20002010 	.word	0x20002010
   10550:	20002070 	.word	0x20002070
   10554:	200046b2 	.word	0x200046b2

00010558 <bt_mesh_trans_init>:
{
   10558:	b538      	push	{r3, r4, r5, lr}
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   1055a:	4c09      	ldr	r4, [pc, #36]	; (10580 <bt_mesh_trans_init+0x28>)
   1055c:	2530      	movs	r5, #48	; 0x30
   1055e:	462a      	mov	r2, r5
   10560:	2100      	movs	r1, #0
   10562:	f104 0050 	add.w	r0, r4, #80	; 0x50
   10566:	f01d f848 	bl	2d5fa <memset>
   1056a:	4b06      	ldr	r3, [pc, #24]	; (10584 <bt_mesh_trans_init+0x2c>)
   1056c:	6563      	str	r3, [r4, #84]	; 0x54
   1056e:	4c06      	ldr	r4, [pc, #24]	; (10588 <bt_mesh_trans_init+0x30>)
   10570:	462a      	mov	r2, r5
   10572:	2100      	movs	r1, #0
   10574:	1960      	adds	r0, r4, r5
   10576:	f01d f840 	bl	2d5fa <memset>
   1057a:	4b04      	ldr	r3, [pc, #16]	; (1058c <bt_mesh_trans_init+0x34>)
   1057c:	6363      	str	r3, [r4, #52]	; 0x34
}
   1057e:	bd38      	pop	{r3, r4, r5, pc}
   10580:	20002070 	.word	0x20002070
   10584:	0002a83b 	.word	0x0002a83b
   10588:	20002010 	.word	0x20002010
   1058c:	00010479 	.word	0x00010479

00010590 <bt_mesh_va_add>:
{
   10590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (!virtual_addrs[i].ref) {
   10592:	4d1e      	ldr	r5, [pc, #120]	; (1060c <bt_mesh_va_add+0x7c>)
   10594:	882a      	ldrh	r2, [r5, #0]
   10596:	f3c2 020e 	ubfx	r2, r2, #0, #15
{
   1059a:	4603      	mov	r3, r0
   1059c:	460f      	mov	r7, r1
   1059e:	462e      	mov	r6, r5
		if (!virtual_addrs[i].ref) {
   105a0:	b1b2      	cbz	r2, 105d0 <bt_mesh_va_add+0x40>
		if (!memcmp(uuid, virtual_addrs[i].uuid,
   105a2:	2210      	movs	r2, #16
   105a4:	1d29      	adds	r1, r5, #4
   105a6:	f01c ffdf 	bl	2d568 <memcmp>
   105aa:	4604      	mov	r4, r0
   105ac:	bb60      	cbnz	r0, 10608 <bt_mesh_va_add+0x78>
			*addr = virtual_addrs[i].addr;
   105ae:	886b      	ldrh	r3, [r5, #2]
   105b0:	803b      	strh	r3, [r7, #0]
			virtual_addrs[i].ref++;
   105b2:	882b      	ldrh	r3, [r5, #0]
   105b4:	1c5a      	adds	r2, r3, #1
   105b6:	f362 030e 	bfi	r3, r2, #0, #15
   105ba:	802b      	strh	r3, [r5, #0]
	store->changed = 1U;
   105bc:	f3c3 2307 	ubfx	r3, r3, #8, #8
   105c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_VA_PENDING);
   105c4:	2009      	movs	r0, #9
	store->changed = 1U;
   105c6:	706b      	strb	r3, [r5, #1]
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_VA_PENDING);
   105c8:	f004 f858 	bl	1467c <bt_mesh_settings_store_schedule>
	return STATUS_SUCCESS;
   105cc:	4620      	mov	r0, r4
   105ce:	e011      	b.n	105f4 <bt_mesh_va_add+0x64>
   105d0:	4602      	mov	r2, r0
   105d2:	1d29      	adds	r1, r5, #4
   105d4:	3010      	adds	r0, #16
   105d6:	f852 4b04 	ldr.w	r4, [r2], #4
   105da:	f841 4b04 	str.w	r4, [r1], #4
   105de:	4282      	cmp	r2, r0
   105e0:	d1f9      	bne.n	105d6 <bt_mesh_va_add+0x46>
	err = bt_mesh_virtual_addr(uuid, &va->addr);
   105e2:	490b      	ldr	r1, [pc, #44]	; (10610 <bt_mesh_va_add+0x80>)
   105e4:	4618      	mov	r0, r3
   105e6:	f001 f96d 	bl	118c4 <bt_mesh_virtual_addr>
	if (err) {
   105ea:	4604      	mov	r4, r0
   105ec:	b118      	cbz	r0, 105f6 <bt_mesh_va_add+0x66>
		va->addr = BT_MESH_ADDR_UNASSIGNED;
   105ee:	2300      	movs	r3, #0
   105f0:	8073      	strh	r3, [r6, #2]
		return STATUS_UNSPECIFIED;
   105f2:	2010      	movs	r0, #16
}
   105f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	va->ref = 1;
   105f6:	f248 0301 	movw	r3, #32769	; 0x8001
   105fa:	8033      	strh	r3, [r6, #0]
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_VA_PENDING);
   105fc:	2009      	movs	r0, #9
   105fe:	f004 f83d 	bl	1467c <bt_mesh_settings_store_schedule>
	*addr = va->addr;
   10602:	8873      	ldrh	r3, [r6, #2]
   10604:	803b      	strh	r3, [r7, #0]
   10606:	e7e1      	b.n	105cc <bt_mesh_va_add+0x3c>
		return STATUS_INSUFF_RESOURCES;
   10608:	2005      	movs	r0, #5
   1060a:	e7f3      	b.n	105f4 <bt_mesh_va_add+0x64>
   1060c:	200046b2 	.word	0x200046b2
   10610:	200046b4 	.word	0x200046b4

00010614 <bt_mesh_va_del>:
{
   10614:	b538      	push	{r3, r4, r5, lr}
		if (virtual_addrs[i].ref &&
   10616:	4c10      	ldr	r4, [pc, #64]	; (10658 <bt_mesh_va_del+0x44>)
   10618:	8823      	ldrh	r3, [r4, #0]
   1061a:	f3c3 030e 	ubfx	r3, r3, #0, #15
{
   1061e:	460d      	mov	r5, r1
		if (virtual_addrs[i].ref &&
   10620:	b90b      	cbnz	r3, 10626 <bt_mesh_va_del+0x12>
		return STATUS_CANNOT_REMOVE;
   10622:	200c      	movs	r0, #12
}
   10624:	bd38      	pop	{r3, r4, r5, pc}
		    !memcmp(uuid, virtual_addrs[i].uuid,
   10626:	2210      	movs	r2, #16
   10628:	1d21      	adds	r1, r4, #4
   1062a:	f01c ff9d 	bl	2d568 <memcmp>
		if (virtual_addrs[i].ref &&
   1062e:	2800      	cmp	r0, #0
   10630:	d1f7      	bne.n	10622 <bt_mesh_va_del+0xe>
	va->ref--;
   10632:	8823      	ldrh	r3, [r4, #0]
   10634:	f503 42ff 	add.w	r2, r3, #32640	; 0x7f80
   10638:	327f      	adds	r2, #127	; 0x7f
   1063a:	f362 030e 	bfi	r3, r2, #0, #15
   1063e:	8023      	strh	r3, [r4, #0]
	if (addr) {
   10640:	b10d      	cbz	r5, 10646 <bt_mesh_va_del+0x32>
		*addr = va->addr;
   10642:	8863      	ldrh	r3, [r4, #2]
   10644:	802b      	strh	r3, [r5, #0]
	store->changed = 1U;
   10646:	7863      	ldrb	r3, [r4, #1]
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_VA_PENDING);
   10648:	2009      	movs	r0, #9
	store->changed = 1U;
   1064a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1064e:	7063      	strb	r3, [r4, #1]
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_VA_PENDING);
   10650:	f004 f814 	bl	1467c <bt_mesh_settings_store_schedule>
	return STATUS_SUCCESS;
   10654:	2000      	movs	r0, #0
   10656:	e7e5      	b.n	10624 <bt_mesh_va_del+0x10>
   10658:	200046b2 	.word	0x200046b2

0001065c <bt_mesh_va_label_get>:
{
   1065c:	4602      	mov	r2, r0
		if (virtual_addrs[i].ref && virtual_addrs[i].addr == addr) {
   1065e:	4808      	ldr	r0, [pc, #32]	; (10680 <bt_mesh_va_label_get+0x24>)
   10660:	8801      	ldrh	r1, [r0, #0]
   10662:	f3c1 010e 	ubfx	r1, r1, #0, #15
{
   10666:	b508      	push	{r3, lr}
		if (virtual_addrs[i].ref && virtual_addrs[i].addr == addr) {
   10668:	b111      	cbz	r1, 10670 <bt_mesh_va_label_get+0x14>
   1066a:	8841      	ldrh	r1, [r0, #2]
   1066c:	4291      	cmp	r1, r2
   1066e:	d005      	beq.n	1067c <bt_mesh_va_label_get+0x20>
	BT_WARN("No matching Label UUID for 0x%04x", addr);
   10670:	4804      	ldr	r0, [pc, #16]	; (10684 <bt_mesh_va_label_get+0x28>)
   10672:	2157      	movs	r1, #87	; 0x57
   10674:	f016 fc7b 	bl	26f6e <printk>
	return NULL;
   10678:	2000      	movs	r0, #0
}
   1067a:	bd08      	pop	{r3, pc}
			return virtual_addrs[i].uuid;
   1067c:	3004      	adds	r0, #4
   1067e:	e7fc      	b.n	1067a <bt_mesh_va_label_get+0x1e>
   10680:	200046b2 	.word	0x200046b2
   10684:	0003264a 	.word	0x0003264a

00010688 <bt_mesh_trans_send>:
{
   10688:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1068c:	4616      	mov	r6, r2
	if (msg->len < 1) {
   1068e:	888a      	ldrh	r2, [r1, #4]
{
   10690:	b08b      	sub	sp, #44	; 0x2c
   10692:	4604      	mov	r4, r0
   10694:	460d      	mov	r5, r1
   10696:	461f      	mov	r7, r3
	if (msg->len < 1) {
   10698:	b932      	cbnz	r2, 106a8 <bt_mesh_trans_send+0x20>
		BT_ERR("Zero-length SDU not allowed");
   1069a:	4855      	ldr	r0, [pc, #340]	; (107f0 <bt_mesh_trans_send+0x168>)
   1069c:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Invalid destination address");
   1069e:	f016 fc66 	bl	26f6e <printk>
		return -EINVAL;
   106a2:	f06f 0015 	mvn.w	r0, #21
   106a6:	e007      	b.n	106b8 <bt_mesh_trans_send+0x30>
	if (msg->len > BT_MESH_TX_SDU_MAX) {
   106a8:	2a78      	cmp	r2, #120	; 0x78
   106aa:	d908      	bls.n	106be <bt_mesh_trans_send+0x36>
		BT_ERR("Not enough segment buffers for length %u", msg->len);
   106ac:	4851      	ldr	r0, [pc, #324]	; (107f4 <bt_mesh_trans_send+0x16c>)
   106ae:	2145      	movs	r1, #69	; 0x45
   106b0:	f016 fc5d 	bl	26f6e <printk>
		return -EMSGSIZE;
   106b4:	f06f 0079 	mvn.w	r0, #121	; 0x79
}
   106b8:	b00b      	add	sp, #44	; 0x2c
   106ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (net_buf_simple_tailroom(msg) < 4) {
   106be:	4608      	mov	r0, r1
   106c0:	f01c f987 	bl	2c9d2 <net_buf_simple_tailroom>
   106c4:	2803      	cmp	r0, #3
   106c6:	d802      	bhi.n	106ce <bt_mesh_trans_send+0x46>
		BT_ERR("Insufficient tailroom for Transport MIC");
   106c8:	2145      	movs	r1, #69	; 0x45
   106ca:	484b      	ldr	r0, [pc, #300]	; (107f8 <bt_mesh_trans_send+0x170>)
   106cc:	e7e7      	b.n	1069e <bt_mesh_trans_send+0x16>
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
   106ce:	f8d4 8004 	ldr.w	r8, [r4, #4]
   106d2:	f898 300b 	ldrb.w	r3, [r8, #11]
   106d6:	2bff      	cmp	r3, #255	; 0xff
   106d8:	d116      	bne.n	10708 <bt_mesh_trans_send+0x80>
		tx->ctx->send_ttl = bt_mesh_default_ttl_get();
   106da:	f7fd f94b 	bl	d974 <bt_mesh_default_ttl_get>
   106de:	f888 000b 	strb.w	r0, [r8, #11]
	if (msg->len > BT_MESH_SDU_UNSEG_MAX) {
   106e2:	88ab      	ldrh	r3, [r5, #4]
   106e4:	6860      	ldr	r0, [r4, #4]
   106e6:	2b0b      	cmp	r3, #11
		tx->ctx->send_rel = true;
   106e8:	bf84      	itt	hi
   106ea:	2301      	movhi	r3, #1
   106ec:	7283      	strbhi	r3, [r0, #10]
	if (tx->ctx->addr == BT_MESH_ADDR_UNASSIGNED ||
   106ee:	8883      	ldrh	r3, [r0, #4]
   106f0:	b13b      	cbz	r3, 10702 <bt_mesh_trans_send+0x7a>
   106f2:	b21b      	sxth	r3, r3
   106f4:	2b00      	cmp	r3, #0
   106f6:	dc0c      	bgt.n	10712 <bt_mesh_trans_send+0x8a>
	     BT_MESH_IS_DEV_KEY(tx->ctx->app_idx))) {
   106f8:	8843      	ldrh	r3, [r0, #2]
   106fa:	3303      	adds	r3, #3
	    (!BT_MESH_ADDR_IS_UNICAST(tx->ctx->addr) &&
   106fc:	b29b      	uxth	r3, r3
   106fe:	2b01      	cmp	r3, #1
   10700:	d807      	bhi.n	10712 <bt_mesh_trans_send+0x8a>
		BT_ERR("Invalid destination address");
   10702:	2145      	movs	r1, #69	; 0x45
   10704:	483d      	ldr	r0, [pc, #244]	; (107fc <bt_mesh_trans_send+0x174>)
   10706:	e7ca      	b.n	1069e <bt_mesh_trans_send+0x16>
	} else if (tx->ctx->send_ttl > BT_MESH_TTL_MAX) {
   10708:	061b      	lsls	r3, r3, #24
   1070a:	d5ea      	bpl.n	106e2 <bt_mesh_trans_send+0x5a>
		BT_ERR("TTL too large (max 127)");
   1070c:	2145      	movs	r1, #69	; 0x45
   1070e:	483c      	ldr	r0, [pc, #240]	; (10800 <bt_mesh_trans_send+0x178>)
   10710:	e7c5      	b.n	1069e <bt_mesh_trans_send+0x16>
	err = bt_mesh_keys_resolve(tx->ctx, &tx->sub, &key, &aid);
   10712:	f10d 030f 	add.w	r3, sp, #15
   10716:	aa04      	add	r2, sp, #16
   10718:	4621      	mov	r1, r4
   1071a:	f7ff f947 	bl	f9ac <bt_mesh_keys_resolve>
	if (err) {
   1071e:	2800      	cmp	r0, #0
   10720:	d1ca      	bne.n	106b8 <bt_mesh_trans_send+0x30>
	tx->xmit = bt_mesh_net_transmit_get();
   10722:	f7fd f941 	bl	d9a8 <bt_mesh_net_transmit_get>
	tx->aid = aid;
   10726:	7ae3      	ldrb	r3, [r4, #11]
   10728:	f89d 200f 	ldrb.w	r2, [sp, #15]
	tx->xmit = bt_mesh_net_transmit_get();
   1072c:	72a0      	strb	r0, [r4, #10]
	tx->aid = aid;
   1072e:	f362 0387 	bfi	r3, r2, #2, #6
   10732:	72e3      	strb	r3, [r4, #11]
	if (!tx->ctx->send_rel || net_buf_simple_tailroom(msg) < 8) {
   10734:	6863      	ldr	r3, [r4, #4]
   10736:	f893 900a 	ldrb.w	r9, [r3, #10]
   1073a:	f1b9 0f00 	cmp.w	r9, #0
   1073e:	d008      	beq.n	10752 <bt_mesh_trans_send+0xca>
   10740:	4628      	mov	r0, r5
   10742:	f01c f946 	bl	2c9d2 <net_buf_simple_tailroom>
   10746:	2807      	cmp	r0, #7
   10748:	bf94      	ite	ls
   1074a:	f04f 0900 	movls.w	r9, #0
   1074e:	f04f 0901 	movhi.w	r9, #1
   10752:	7ae3      	ldrb	r3, [r4, #11]
	err = trans_encrypt(tx, key, msg);
   10754:	f8dd 8010 	ldr.w	r8, [sp, #16]
   10758:	f369 0341 	bfi	r3, r9, #1, #1
   1075c:	72e3      	strb	r3, [r4, #11]
	struct bt_mesh_app_crypto_ctx crypto = {
   1075e:	220e      	movs	r2, #14
   10760:	2100      	movs	r1, #0
   10762:	f10d 001a 	add.w	r0, sp, #26
   10766:	f01c ff48 	bl	2d5fa <memset>
		.dev_key = BT_MESH_IS_DEV_KEY(tx->ctx->app_idx),
   1076a:	6862      	ldr	r2, [r4, #4]
	struct bt_mesh_app_crypto_ctx crypto = {
   1076c:	f88d 9015 	strb.w	r9, [sp, #21]
		.dev_key = BT_MESH_IS_DEV_KEY(tx->ctx->app_idx),
   10770:	8853      	ldrh	r3, [r2, #2]
   10772:	3303      	adds	r3, #3
   10774:	b29b      	uxth	r3, r3
   10776:	2b01      	cmp	r3, #1
   10778:	bf8c      	ite	hi
   1077a:	2300      	movhi	r3, #0
   1077c:	2301      	movls	r3, #1
   1077e:	f88d 3014 	strb.w	r3, [sp, #20]
	struct bt_mesh_app_crypto_ctx crypto = {
   10782:	8923      	ldrh	r3, [r4, #8]
   10784:	f8ad 3016 	strh.w	r3, [sp, #22]
   10788:	8893      	ldrh	r3, [r2, #4]
		.seq_num = bt_mesh.seq,
   1078a:	4a1e      	ldr	r2, [pc, #120]	; (10804 <bt_mesh_trans_send+0x17c>)
	struct bt_mesh_app_crypto_ctx crypto = {
   1078c:	f8ad 3018 	strh.w	r3, [sp, #24]
   10790:	6853      	ldr	r3, [r2, #4]
   10792:	9307      	str	r3, [sp, #28]
		.iv_index = BT_MESH_NET_IVI_TX,
   10794:	6813      	ldr	r3, [r2, #0]
   10796:	f3bf 8f5b 	dmb	ish
   1079a:	6892      	ldr	r2, [r2, #8]
   1079c:	f3bf 8f5b 	dmb	ish
   107a0:	f3c2 0280 	ubfx	r2, r2, #2, #1
   107a4:	1a9b      	subs	r3, r3, r2
	struct bt_mesh_app_crypto_ctx crypto = {
   107a6:	9308      	str	r3, [sp, #32]
	if (BT_MESH_ADDR_IS_VIRTUAL(tx->ctx->addr)) {
   107a8:	6863      	ldr	r3, [r4, #4]
   107aa:	8898      	ldrh	r0, [r3, #4]
   107ac:	f480 4300 	eor.w	r3, r0, #32768	; 0x8000
   107b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   107b4:	d202      	bcs.n	107bc <bt_mesh_trans_send+0x134>
		crypto.ad = bt_mesh_va_label_get(tx->ctx->addr);
   107b6:	f7ff ff51 	bl	1065c <bt_mesh_va_label_get>
   107ba:	9009      	str	r0, [sp, #36]	; 0x24
	return bt_mesh_app_encrypt(key, &crypto, msg);
   107bc:	462a      	mov	r2, r5
   107be:	a905      	add	r1, sp, #20
   107c0:	4640      	mov	r0, r8
   107c2:	f01a f9f0 	bl	2aba6 <bt_mesh_app_encrypt>
	if (err) {
   107c6:	2800      	cmp	r0, #0
   107c8:	f47f af76 	bne.w	106b8 <bt_mesh_trans_send+0x30>
	if (tx->ctx->send_rel) {
   107cc:	6863      	ldr	r3, [r4, #4]
   107ce:	7a9b      	ldrb	r3, [r3, #10]
		err = send_seg(tx, msg, cb, cb_data, NULL);
   107d0:	9000      	str	r0, [sp, #0]
	if (tx->ctx->send_rel) {
   107d2:	b133      	cbz	r3, 107e2 <bt_mesh_trans_send+0x15a>
		err = send_seg(tx, msg, cb, cb_data, NULL);
   107d4:	463b      	mov	r3, r7
   107d6:	4632      	mov	r2, r6
   107d8:	4629      	mov	r1, r5
   107da:	4620      	mov	r0, r4
   107dc:	f7ff fc6c 	bl	100b8 <send_seg>
   107e0:	e76a      	b.n	106b8 <bt_mesh_trans_send+0x30>
		err = send_unseg(tx, msg, cb, cb_data, NULL);
   107e2:	463b      	mov	r3, r7
   107e4:	4632      	mov	r2, r6
   107e6:	4629      	mov	r1, r5
   107e8:	4620      	mov	r0, r4
   107ea:	f7ff fd7b 	bl	102e4 <send_unseg>
   107ee:	e763      	b.n	106b8 <bt_mesh_trans_send+0x30>
   107f0:	000325ce 	.word	0x000325ce
   107f4:	000325ef 	.word	0x000325ef
   107f8:	0003261d 	.word	0x0003261d
   107fc:	0003232f 	.word	0x0003232f
   10800:	00032312 	.word	0x00032312
   10804:	20001dd8 	.word	0x20001dd8

00010808 <sdu_recv>:
{
   10808:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1080c:	4691      	mov	r9, r2
   1080e:	b08b      	sub	sp, #44	; 0x2c
	struct decrypt_ctx ctx = {
   10810:	220e      	movs	r2, #14
{
   10812:	4604      	mov	r4, r0
   10814:	460f      	mov	r7, r1
	struct decrypt_ctx ctx = {
   10816:	eb0d 0002 	add.w	r0, sp, r2
   1081a:	2100      	movs	r1, #0
{
   1081c:	4698      	mov	r8, r3
   1081e:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	struct decrypt_ctx ctx = {
   10822:	f01c feea 	bl	2d5fa <memset>
			.dev_key = !AKF(&hdr),
   10826:	ea6f 1397 	mvn.w	r3, r7, lsr #6
   1082a:	f003 0301 	and.w	r3, r3, #1
   1082e:	f88d 3008 	strb.w	r3, [sp, #8]
			.dst = rx->ctx.recv_dst,
   10832:	8960      	ldrh	r0, [r4, #10]
	struct decrypt_ctx ctx = {
   10834:	8923      	ldrh	r3, [r4, #8]
   10836:	f88d 9009 	strb.w	r9, [sp, #9]
   1083a:	f8ad 300a 	strh.w	r3, [sp, #10]
   1083e:	f8ad 000c 	strh.w	r0, [sp, #12]
   10842:	b375      	cbz	r5, 108a2 <sdu_recv+0x9a>
   10844:	692a      	ldr	r2, [r5, #16]
   10846:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   1084a:	9204      	str	r2, [sp, #16]
			.iv_index = BT_MESH_NET_IVI_RX(rx),
   1084c:	4a16      	ldr	r2, [pc, #88]	; (108a8 <sdu_recv+0xa0>)
   1084e:	7d23      	ldrb	r3, [r4, #20]
   10850:	6812      	ldr	r2, [r2, #0]
	struct decrypt_ctx ctx = {
   10852:	9509      	str	r5, [sp, #36]	; 0x24
			.iv_index = BT_MESH_NET_IVI_RX(rx),
   10854:	f003 0101 	and.w	r1, r3, #1
   10858:	1a52      	subs	r2, r2, r1
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && !rx->local_match) {
   1085a:	065b      	lsls	r3, r3, #25
	struct decrypt_ctx ctx = {
   1085c:	9205      	str	r2, [sp, #20]
   1085e:	e9cd 8607 	strd	r8, r6, [sp, #28]
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && !rx->local_match) {
   10862:	d51a      	bpl.n	1089a <sdu_recv+0x92>
	if (BT_MESH_ADDR_IS_VIRTUAL(rx->ctx.recv_dst)) {
   10864:	f480 4300 	eor.w	r3, r0, #32768	; 0x8000
   10868:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   1086c:	d202      	bcs.n	10874 <sdu_recv+0x6c>
		ctx.crypto.ad = bt_mesh_va_label_get(rx->ctx.recv_dst);
   1086e:	f7ff fef5 	bl	1065c <bt_mesh_va_label_get>
   10872:	9006      	str	r0, [sp, #24]
	rx->ctx.app_idx = bt_mesh_app_key_find(ctx.crypto.dev_key, AID(&hdr),
   10874:	ab02      	add	r3, sp, #8
   10876:	9300      	str	r3, [sp, #0]
   10878:	4622      	mov	r2, r4
   1087a:	4b0c      	ldr	r3, [pc, #48]	; (108ac <sdu_recv+0xa4>)
   1087c:	f89d 0008 	ldrb.w	r0, [sp, #8]
   10880:	f007 013f 	and.w	r1, r7, #63	; 0x3f
   10884:	f7ff f8e8 	bl	fa58 <bt_mesh_app_key_find>
	if (rx->ctx.app_idx == BT_MESH_KEY_UNUSED) {
   10888:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1088c:	4298      	cmp	r0, r3
	rx->ctx.app_idx = bt_mesh_app_key_find(ctx.crypto.dev_key, AID(&hdr),
   1088e:	80e0      	strh	r0, [r4, #6]
	if (rx->ctx.app_idx == BT_MESH_KEY_UNUSED) {
   10890:	d003      	beq.n	1089a <sdu_recv+0x92>
	bt_mesh_model_recv(rx, sdu);
   10892:	4631      	mov	r1, r6
   10894:	4620      	mov	r0, r4
   10896:	f001 fbd9 	bl	1204c <bt_mesh_model_recv>
}
   1089a:	2000      	movs	r0, #0
   1089c:	b00b      	add	sp, #44	; 0x2c
   1089e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	struct decrypt_ctx ctx = {
   108a2:	6922      	ldr	r2, [r4, #16]
   108a4:	e7d1      	b.n	1084a <sdu_recv+0x42>
   108a6:	bf00      	nop
   108a8:	20001dd8 	.word	0x20001dd8
   108ac:	0002a757 	.word	0x0002a757

000108b0 <bt_mesh_trans_recv>:
{
   108b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint64_t seq_auth = TRANS_SEQ_AUTH_NVAL;
   108b4:	f04f 32ff 	mov.w	r2, #4294967295
{
   108b8:	b099      	sub	sp, #100	; 0x64
	uint64_t seq_auth = TRANS_SEQ_AUTH_NVAL;
   108ba:	f04f 33ff 	mov.w	r3, #4294967295
   108be:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		rx->friend_match = bt_mesh_friend_match(rx->sub->net_idx,
   108c2:	680b      	ldr	r3, [r1, #0]
{
   108c4:	4606      	mov	r6, r0
   108c6:	460c      	mov	r4, r1
		rx->friend_match = bt_mesh_friend_match(rx->sub->net_idx,
   108c8:	8b98      	ldrh	r0, [r3, #28]
   108ca:	8949      	ldrh	r1, [r1, #10]
   108cc:	f004 ff4a 	bl	15764 <bt_mesh_friend_match>
   108d0:	7d23      	ldrb	r3, [r4, #20]
   108d2:	f360 13c7 	bfi	r3, r0, #7, #1
   108d6:	7523      	strb	r3, [r4, #20]
	net_buf_simple_pull(buf, BT_MESH_NET_HDR_LEN);
   108d8:	2109      	movs	r1, #9
   108da:	4630      	mov	r0, r6
   108dc:	f00e fc50 	bl	1f180 <net_buf_simple_pull>
	state->offset = net_buf_simple_headroom(buf);
   108e0:	4630      	mov	r0, r6
   108e2:	f01c f872 	bl	2c9ca <net_buf_simple_headroom>
	if (SEG(buf->data)) {
   108e6:	f8d6 a000 	ldr.w	sl, [r6]
	state->len = buf->len;
   108ea:	88b3      	ldrh	r3, [r6, #4]
   108ec:	9306      	str	r3, [sp, #24]
   108ee:	f99a 3000 	ldrsb.w	r3, [sl]
	state->offset = net_buf_simple_headroom(buf);
   108f2:	9009      	str	r0, [sp, #36]	; 0x24
   108f4:	2b00      	cmp	r3, #0
   108f6:	f280 8260 	bge.w	10dba <bt_mesh_trans_recv+0x50a>
		if (!rx->local_match && !rx->friend_match) {
   108fa:	f894 b014 	ldrb.w	fp, [r4, #20]
   108fe:	f01b 0bc0 	ands.w	fp, fp, #192	; 0xc0
   10902:	f04f 0900 	mov.w	r9, #0
   10906:	f000 8116 	beq.w	10b36 <bt_mesh_trans_recv+0x286>
	if (buf->len < 5) {
   1090a:	9b06      	ldr	r3, [sp, #24]
	struct bt_mesh_rpl *rpl = NULL;
   1090c:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
	if (buf->len < 5) {
   10910:	2b04      	cmp	r3, #4
   10912:	d806      	bhi.n	10922 <bt_mesh_trans_recv+0x72>
		BT_ERR("Too short segmented message (len %u)", buf->len);
   10914:	461a      	mov	r2, r3
   10916:	2145      	movs	r1, #69	; 0x45
   10918:	4889      	ldr	r0, [pc, #548]	; (10b40 <bt_mesh_trans_recv+0x290>)
   1091a:	f016 fb28 	bl	26f6e <printk>
	enum bt_mesh_friend_pdu_type pdu_type = BT_MESH_FRIEND_PDU_SINGLE;
   1091e:	2500      	movs	r5, #0
   10920:	e296      	b.n	10e50 <bt_mesh_trans_recv+0x5a0>
	if (bt_mesh_rpl_check(net_rx, &rpl)) {
   10922:	a90b      	add	r1, sp, #44	; 0x2c
   10924:	4620      	mov	r0, r4
   10926:	f000 fb5f 	bl	10fe8 <bt_mesh_rpl_check>
   1092a:	4605      	mov	r5, r0
   1092c:	b140      	cbz	r0, 10940 <bt_mesh_trans_recv+0x90>
		BT_WARN("Replay: src 0x%04x dst 0x%04x seq 0x%06x",
   1092e:	6923      	ldr	r3, [r4, #16]
   10930:	9300      	str	r3, [sp, #0]
   10932:	8922      	ldrh	r2, [r4, #8]
   10934:	8963      	ldrh	r3, [r4, #10]
   10936:	4883      	ldr	r0, [pc, #524]	; (10b44 <bt_mesh_trans_recv+0x294>)
   10938:	2157      	movs	r1, #87	; 0x57
   1093a:	f016 fb18 	bl	26f6e <printk>
		return -EINVAL;
   1093e:	e7ee      	b.n	1091e <bt_mesh_trans_recv+0x6e>
	net_buf_simple_pull(buf, 1);
   10940:	2101      	movs	r1, #1
   10942:	4630      	mov	r0, r6
   10944:	f00e fc1c 	bl	1f180 <net_buf_simple_pull>
	seq_zero = net_buf_simple_pull_be16(buf);
   10948:	4630      	mov	r0, r6
   1094a:	f01c f814 	bl	2c976 <net_buf_simple_pull_be16>
	seg_o = (seq_zero & 0x03) << 3;
   1094e:	00c7      	lsls	r7, r0, #3
	seq_zero = (seq_zero >> 2) & TRANS_SEQ_ZERO_MASK;
   10950:	f3c0 088c 	ubfx	r8, r0, #2, #13
	seg_n = net_buf_simple_pull_u8(buf);
   10954:	4630      	mov	r0, r6
   10956:	f01b fffe 	bl	2c956 <net_buf_simple_pull_u8>
	seg_o = (seq_zero & 0x03) << 3;
   1095a:	f007 0718 	and.w	r7, r7, #24
	seg_o |= seg_n >> 5;
   1095e:	ea47 1750 	orr.w	r7, r7, r0, lsr #5
	seg_n &= 0x1f;
   10962:	f000 031f 	and.w	r3, r0, #31
	seg_o |= seg_n >> 5;
   10966:	b2ff      	uxtb	r7, r7
	if (seg_o > seg_n) {
   10968:	429f      	cmp	r7, r3
	seg_n = net_buf_simple_pull_u8(buf);
   1096a:	9007      	str	r0, [sp, #28]
	seg_n &= 0x1f;
   1096c:	9305      	str	r3, [sp, #20]
	if (seg_o > seg_n) {
   1096e:	d906      	bls.n	1097e <bt_mesh_trans_recv+0xce>
		BT_ERR("SegO greater than SegN (%u > %u)", seg_o, seg_n);
   10970:	463a      	mov	r2, r7
   10972:	2145      	movs	r1, #69	; 0x45
   10974:	4874      	ldr	r0, [pc, #464]	; (10b48 <bt_mesh_trans_recv+0x298>)
   10976:	f016 fafa 	bl	26f6e <printk>
	uint8_t seg_count = 0;
   1097a:	46a9      	mov	r9, r5
   1097c:	e7cf      	b.n	1091e <bt_mesh_trans_recv+0x6e>
	*seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_RX(net_rx),
   1097e:	6921      	ldr	r1, [r4, #16]
   10980:	4872      	ldr	r0, [pc, #456]	; (10b4c <bt_mesh_trans_recv+0x29c>)
   10982:	7d23      	ldrb	r3, [r4, #20]
   10984:	6800      	ldr	r0, [r0, #0]
   10986:	eba1 0808 	sub.w	r8, r1, r8
   1098a:	f003 0201 	and.w	r2, r3, #1
   1098e:	f3c8 080c 	ubfx	r8, r8, #0, #13
   10992:	1a82      	subs	r2, r0, r2
   10994:	eba1 0808 	sub.w	r8, r1, r8
   10998:	ea48 6b02 	orr.w	fp, r8, r2, lsl #24
   1099c:	ea4f 2c12 	mov.w	ip, r2, lsr #8
	*seg_count = seg_n + 1;
   109a0:	9a05      	ldr	r2, [sp, #20]
		if (rx->src != net_rx->ctx.addr ||
   109a2:	486b      	ldr	r0, [pc, #428]	; (10b50 <bt_mesh_trans_recv+0x2a0>)
	*seg_count = seg_n + 1;
   109a4:	3201      	adds	r2, #1
   109a6:	9208      	str	r2, [sp, #32]
		if (rx->src != net_rx->ctx.addr ||
   109a8:	6981      	ldr	r1, [r0, #24]
   109aa:	68a2      	ldr	r2, [r4, #8]
	*seg_count = seg_n + 1;
   109ac:	f89d 9020 	ldrb.w	r9, [sp, #32]
		if (rx->src != net_rx->ctx.addr ||
   109b0:	4291      	cmp	r1, r2
	*seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_RX(net_rx),
   109b2:	e9cd bc0c 	strd	fp, ip, [sp, #48]	; 0x30
		if (rx->src != net_rx->ctx.addr ||
   109b6:	4680      	mov	r8, r0
   109b8:	d113      	bne.n	109e2 <bt_mesh_trans_recv+0x132>
		if (rx->seq_auth >= *seq_auth) {
   109ba:	e9d0 0104 	ldrd	r0, r1, [r0, #16]
   109be:	4561      	cmp	r1, ip
   109c0:	bf08      	it	eq
   109c2:	4558      	cmpeq	r0, fp
   109c4:	f080 823b 	bcs.w	10e3e <bt_mesh_trans_recv+0x58e>
		if (rx->in_use) {
   109c8:	f898 301f 	ldrb.w	r3, [r8, #31]
   109cc:	065a      	lsls	r2, r3, #25
   109ce:	d508      	bpl.n	109e2 <bt_mesh_trans_recv+0x132>
			BT_WARN("Duplicate SDU from src 0x%04x",
   109d0:	2157      	movs	r1, #87	; 0x57
   109d2:	4860      	ldr	r0, [pc, #384]	; (10b54 <bt_mesh_trans_recv+0x2a4>)
   109d4:	8922      	ldrh	r2, [r4, #8]
   109d6:	f016 faca 	bl	26f6e <printk>
			seg_rx_reset(rx, true);
   109da:	2101      	movs	r1, #1
   109dc:	4640      	mov	r0, r8
   109de:	f7ff f89b 	bl	fb18 <seg_rx_reset>
	if (!sdu_len_is_ok(net_rx->ctl, seg_n)) {
   109e2:	9b05      	ldr	r3, [sp, #20]
   109e4:	2b02      	cmp	r3, #2
   109e6:	d953      	bls.n	10a90 <bt_mesh_trans_recv+0x1e0>
		BT_ERR("Too big incoming SDU length");
   109e8:	2145      	movs	r1, #69	; 0x45
   109ea:	485b      	ldr	r0, [pc, #364]	; (10b58 <bt_mesh_trans_recv+0x2a8>)
   109ec:	f016 fabf 	bl	26f6e <printk>
			 net_rx->friend_match);
   109f0:	7d23      	ldrb	r3, [r4, #20]
		send_ack(net_rx->sub, net_rx->ctx.recv_dst, net_rx->ctx.addr,
   109f2:	8922      	ldrh	r2, [r4, #8]
   109f4:	8961      	ldrh	r1, [r4, #10]
   109f6:	6820      	ldr	r0, [r4, #0]
   109f8:	09db      	lsrs	r3, r3, #7
   109fa:	9302      	str	r3, [sp, #8]
   109fc:	2500      	movs	r5, #0
   109fe:	ab0c      	add	r3, sp, #48	; 0x30
   10a00:	9300      	str	r3, [sp, #0]
   10a02:	9501      	str	r5, [sp, #4]
   10a04:	7be3      	ldrb	r3, [r4, #15]
   10a06:	f019 ff1b 	bl	2a840 <send_ack>
			return -EMSGSIZE;
   10a0a:	f06f 0b79 	mvn.w	fp, #121	; 0x79
   10a0e:	e075      	b.n	10afc <bt_mesh_trans_recv+0x24c>
	if (rx->hdr != *hdr || rx->seg_n != seg_n) {
   10a10:	f89a 1000 	ldrb.w	r1, [sl]
   10a14:	f898 201e 	ldrb.w	r2, [r8, #30]
   10a18:	4291      	cmp	r1, r2
   10a1a:	d106      	bne.n	10a2a <bt_mesh_trans_recv+0x17a>
   10a1c:	f898 101f 	ldrb.w	r1, [r8, #31]
   10a20:	9a05      	ldr	r2, [sp, #20]
   10a22:	f001 011f 	and.w	r1, r1, #31
   10a26:	4291      	cmp	r1, r2
   10a28:	d004      	beq.n	10a34 <bt_mesh_trans_recv+0x184>
		BT_ERR("Invalid segment for ongoing session");
   10a2a:	484c      	ldr	r0, [pc, #304]	; (10b5c <bt_mesh_trans_recv+0x2ac>)
   10a2c:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Inconsistent CTL in segment");
   10a2e:	f016 fa9e 	bl	26f6e <printk>
		return false;
   10a32:	e774      	b.n	1091e <bt_mesh_trans_recv+0x6e>
	if (rx->ctl != net_rx->ctl) {
   10a34:	f898 201f 	ldrb.w	r2, [r8, #31]
   10a38:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   10a3c:	f3c2 1040 	ubfx	r0, r2, #5, #1
   10a40:	4298      	cmp	r0, r3
   10a42:	d002      	beq.n	10a4a <bt_mesh_trans_recv+0x19a>
		BT_ERR("Inconsistent CTL in segment");
   10a44:	2145      	movs	r1, #69	; 0x45
   10a46:	4846      	ldr	r0, [pc, #280]	; (10b60 <bt_mesh_trans_recv+0x2b0>)
   10a48:	e7f1      	b.n	10a2e <bt_mesh_trans_recv+0x17e>
		if (rx->in_use) {
   10a4a:	f012 0540 	ands.w	r5, r2, #64	; 0x40
   10a4e:	f040 80bd 	bne.w	10bcc <bt_mesh_trans_recv+0x31c>
		if (rx->block == BLOCK_COMPLETE(rx->seg_n)) {
   10a52:	3101      	adds	r1, #1
   10a54:	2301      	movs	r3, #1
   10a56:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
   10a5a:	fa03 f101 	lsl.w	r1, r3, r1
   10a5e:	3901      	subs	r1, #1
   10a60:	4288      	cmp	r0, r1
   10a62:	d112      	bne.n	10a8a <bt_mesh_trans_recv+0x1da>
			send_ack(net_rx->sub, net_rx->ctx.recv_dst,
   10a64:	09d2      	lsrs	r2, r2, #7
   10a66:	ab0c      	add	r3, sp, #48	; 0x30
   10a68:	e9cd 0201 	strd	r0, r2, [sp, #4]
   10a6c:	9300      	str	r3, [sp, #0]
   10a6e:	8922      	ldrh	r2, [r4, #8]
   10a70:	7be3      	ldrb	r3, [r4, #15]
   10a72:	8961      	ldrh	r1, [r4, #10]
   10a74:	6820      	ldr	r0, [r4, #0]
   10a76:	f019 fee3 	bl	2a840 <send_ack>
			if (rpl) {
   10a7a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10a7c:	b110      	cbz	r0, 10a84 <bt_mesh_trans_recv+0x1d4>
				bt_mesh_rpl_update(rpl, net_rx);
   10a7e:	4621      	mov	r1, r4
   10a80:	f019 ff25 	bl	2a8ce <bt_mesh_rpl_update>
		return -EALREADY;
   10a84:	f06f 0b77 	mvn.w	fp, #119	; 0x77
   10a88:	e038      	b.n	10afc <bt_mesh_trans_recv+0x24c>
		BT_WARN("Got segment for canceled SDU");
   10a8a:	2157      	movs	r1, #87	; 0x57
   10a8c:	4835      	ldr	r0, [pc, #212]	; (10b64 <bt_mesh_trans_recv+0x2b4>)
   10a8e:	e1dd      	b.n	10e4c <bt_mesh_trans_recv+0x59c>
	    net_rx->friend_match && !net_rx->local_match &&
   10a90:	7d23      	ldrb	r3, [r4, #20]
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) &&
   10a92:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   10a96:	2b80      	cmp	r3, #128	; 0x80
   10a98:	d120      	bne.n	10adc <bt_mesh_trans_recv+0x22c>
	    !bt_mesh_friend_queue_has_space(net_rx->sub->net_idx,
   10a9a:	6823      	ldr	r3, [r4, #0]
   10a9c:	8962      	ldrh	r2, [r4, #10]
   10a9e:	8b98      	ldrh	r0, [r3, #28]
   10aa0:	8921      	ldrh	r1, [r4, #8]
   10aa2:	f8cd 9000 	str.w	r9, [sp]
   10aa6:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
   10aaa:	465b      	mov	r3, fp
   10aac:	f004 fe6c 	bl	15788 <bt_mesh_friend_queue_has_space>
	    net_rx->friend_match && !net_rx->local_match &&
   10ab0:	4605      	mov	r5, r0
   10ab2:	b998      	cbnz	r0, 10adc <bt_mesh_trans_recv+0x22c>
		BT_ERR("No space in Friend Queue for %u segments", *seg_count);
   10ab4:	9a08      	ldr	r2, [sp, #32]
   10ab6:	482c      	ldr	r0, [pc, #176]	; (10b68 <bt_mesh_trans_recv+0x2b8>)
   10ab8:	2145      	movs	r1, #69	; 0x45
   10aba:	f016 fa58 	bl	26f6e <printk>
			 net_rx->friend_match);
   10abe:	7d23      	ldrb	r3, [r4, #20]
		send_ack(net_rx->sub, net_rx->ctx.recv_dst, net_rx->ctx.addr,
   10ac0:	f8cd b000 	str.w	fp, [sp]
   10ac4:	09db      	lsrs	r3, r3, #7
   10ac6:	e9cd 5301 	strd	r5, r3, [sp, #4]
   10aca:	8922      	ldrh	r2, [r4, #8]
   10acc:	7be3      	ldrb	r3, [r4, #15]
   10ace:	8961      	ldrh	r1, [r4, #10]
   10ad0:	6820      	ldr	r0, [r4, #0]
   10ad2:	f019 feb5 	bl	2a840 <send_ack>
		return -ENOBUFS;
   10ad6:	f06f 0b68 	mvn.w	fp, #104	; 0x68
   10ada:	e00f      	b.n	10afc <bt_mesh_trans_recv+0x24c>
	return slab->num_blocks - slab->num_used;
   10adc:	4b23      	ldr	r3, [pc, #140]	; (10b6c <bt_mesh_trans_recv+0x2bc>)
	if (k_mem_slab_num_free_get(&segs) < 1) {
   10ade:	689a      	ldr	r2, [r3, #8]
   10ae0:	699b      	ldr	r3, [r3, #24]
   10ae2:	429a      	cmp	r2, r3
   10ae4:	d148      	bne.n	10b78 <bt_mesh_trans_recv+0x2c8>
		BT_WARN("Not enough segments for incoming message");
   10ae6:	2157      	movs	r1, #87	; 0x57
   10ae8:	4821      	ldr	r0, [pc, #132]	; (10b70 <bt_mesh_trans_recv+0x2c0>)
   10aea:	f016 fa40 	bl	26f6e <printk>
		BT_WARN("No free slots for new incoming segmented messages");
   10aee:	2157      	movs	r1, #87	; 0x57
   10af0:	4820      	ldr	r0, [pc, #128]	; (10b74 <bt_mesh_trans_recv+0x2c4>)
   10af2:	f016 fa3c 	bl	26f6e <printk>
	enum bt_mesh_friend_pdu_type pdu_type = BT_MESH_FRIEND_PDU_SINGLE;
   10af6:	2500      	movs	r5, #0
		return -ENOMEM;
   10af8:	f06f 0b0b 	mvn.w	fp, #11
	buf->data = buf->__buf + state->offset;
   10afc:	68b3      	ldr	r3, [r6, #8]
   10afe:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10b00:	fa13 f382 	uxtah	r3, r3, r2
   10b04:	6033      	str	r3, [r6, #0]
	buf->len = state->len;
   10b06:	9b06      	ldr	r3, [sp, #24]
   10b08:	80b3      	strh	r3, [r6, #4]
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && rx->friend_match && !err) {
   10b0a:	f994 3014 	ldrsb.w	r3, [r4, #20]
   10b0e:	2b00      	cmp	r3, #0
   10b10:	da11      	bge.n	10b36 <bt_mesh_trans_recv+0x286>
   10b12:	f1bb 0f00 	cmp.w	fp, #0
   10b16:	d10e      	bne.n	10b36 <bt_mesh_trans_recv+0x286>
		if (seq_auth == TRANS_SEQ_AUTH_NVAL) {
   10b18:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
   10b1c:	3301      	adds	r3, #1
   10b1e:	bf08      	it	eq
   10b20:	f1b2 3fff 	cmpeq.w	r2, #4294967295
			bt_mesh_friend_enqueue_rx(rx, pdu_type, NULL,
   10b24:	9600      	str	r6, [sp, #0]
   10b26:	464b      	mov	r3, r9
   10b28:	bf0c      	ite	eq
   10b2a:	465a      	moveq	r2, fp
			bt_mesh_friend_enqueue_rx(rx, pdu_type, &seq_auth,
   10b2c:	aa0c      	addne	r2, sp, #48	; 0x30
   10b2e:	4629      	mov	r1, r5
   10b30:	4620      	mov	r0, r4
   10b32:	f004 fe5f 	bl	157f4 <bt_mesh_friend_enqueue_rx>
}
   10b36:	4658      	mov	r0, fp
   10b38:	b019      	add	sp, #100	; 0x64
   10b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10b3e:	bf00      	nop
   10b40:	00032350 	.word	0x00032350
   10b44:	0003237a 	.word	0x0003237a
   10b48:	000323a8 	.word	0x000323a8
   10b4c:	20001dd8 	.word	0x20001dd8
   10b50:	20002010 	.word	0x20002010
   10b54:	000323ce 	.word	0x000323ce
   10b58:	00032477 	.word	0x00032477
   10b5c:	0003240b 	.word	0x0003240b
   10b60:	00032434 	.word	0x00032434
   10b64:	00032455 	.word	0x00032455
   10b68:	00032498 	.word	0x00032498
   10b6c:	20001264 	.word	0x20001264
   10b70:	000324c6 	.word	0x000324c6
   10b74:	000324f4 	.word	0x000324f4
		if (rx->in_use) {
   10b78:	49b7      	ldr	r1, [pc, #732]	; (10e58 <bt_mesh_trans_recv+0x5a8>)
   10b7a:	7fcb      	ldrb	r3, [r1, #31]
   10b7c:	f013 0040 	ands.w	r0, r3, #64	; 0x40
   10b80:	d1b5      	bne.n	10aee <bt_mesh_trans_recv+0x23e>
		rx->in_use = 1U;
   10b82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10b86:	77cb      	strb	r3, [r1, #31]
		rx->sub = net_rx->sub;
   10b88:	6823      	ldr	r3, [r4, #0]
   10b8a:	600b      	str	r3, [r1, #0]
		rx->ctl = net_rx->ctl;
   10b8c:	7d23      	ldrb	r3, [r4, #20]
   10b8e:	7fcd      	ldrb	r5, [r1, #31]
   10b90:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   10b94:	f363 1545 	bfi	r5, r3, #5, #1
		rx->seq_auth = *seq_auth;
   10b98:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
   10b9c:	e9c1 2304 	strd	r2, r3, [r1, #16]
		rx->seg_n = seg_n;
   10ba0:	9a07      	ldr	r2, [sp, #28]
   10ba2:	462b      	mov	r3, r5
   10ba4:	f362 0304 	bfi	r3, r2, #0, #5
   10ba8:	77cb      	strb	r3, [r1, #31]
		rx->hdr = *hdr;
   10baa:	f89a 3000 	ldrb.w	r3, [sl]
   10bae:	778b      	strb	r3, [r1, #30]
		rx->ttl = net_rx->ctx.send_ttl;
   10bb0:	7be3      	ldrb	r3, [r4, #15]
   10bb2:	f881 3020 	strb.w	r3, [r1, #32]
		rx->src = net_rx->ctx.addr;
   10bb6:	8923      	ldrh	r3, [r4, #8]
   10bb8:	830b      	strh	r3, [r1, #24]
		rx->dst = net_rx->ctx.recv_dst;
   10bba:	8963      	ldrh	r3, [r4, #10]
   10bbc:	834b      	strh	r3, [r1, #26]
	rx->obo = net_rx->friend_match;
   10bbe:	7d23      	ldrb	r3, [r4, #20]
   10bc0:	7fca      	ldrb	r2, [r1, #31]
		rx->block = 0U;
   10bc2:	6248      	str	r0, [r1, #36]	; 0x24
	rx->obo = net_rx->friend_match;
   10bc4:	09db      	lsrs	r3, r3, #7
   10bc6:	f363 12c7 	bfi	r2, r3, #7, #1
   10bca:	77ca      	strb	r2, [r1, #31]
	if (BIT(seg_o) & rx->block) {
   10bcc:	f8df b288 	ldr.w	fp, [pc, #648]	; 10e58 <bt_mesh_trans_recv+0x5a8>
   10bd0:	f8db 5024 	ldr.w	r5, [fp, #36]	; 0x24
   10bd4:	40fd      	lsrs	r5, r7
   10bd6:	f015 0501 	ands.w	r5, r5, #1
   10bda:	f040 80ec 	bne.w	10db6 <bt_mesh_trans_recv+0x506>
	if (seg_o == seg_n) {
   10bde:	9b05      	ldr	r3, [sp, #20]
   10be0:	f89b 201f 	ldrb.w	r2, [fp, #31]
   10be4:	88b1      	ldrh	r1, [r6, #4]
   10be6:	429f      	cmp	r7, r3
   10be8:	f3c2 1240 	ubfx	r2, r2, #5, #1
   10bec:	d120      	bne.n	10c30 <bt_mesh_trans_recv+0x380>
		return BT_MESH_APP_SEG_SDU_MAX;
   10bee:	2a00      	cmp	r2, #0
   10bf0:	bf14      	ite	ne
   10bf2:	2308      	movne	r3, #8
   10bf4:	230c      	moveq	r3, #12
		rx->len = seg_n * seg_len(rx->ctl) + buf->len;
   10bf6:	fb03 1307 	mla	r3, r3, r7, r1
   10bfa:	b29b      	uxth	r3, r3
		if (rx->len > BT_MESH_RX_SDU_MAX) {
   10bfc:	2b24      	cmp	r3, #36	; 0x24
		rx->len = seg_n * seg_len(rx->ctl) + buf->len;
   10bfe:	f8ab 301c 	strh.w	r3, [fp, #28]
		if (rx->len > BT_MESH_RX_SDU_MAX) {
   10c02:	d91e      	bls.n	10c42 <bt_mesh_trans_recv+0x392>
			BT_ERR("Too large SDU len");
   10c04:	2145      	movs	r1, #69	; 0x45
   10c06:	4895      	ldr	r0, [pc, #596]	; (10e5c <bt_mesh_trans_recv+0x5ac>)
   10c08:	f016 f9b1 	bl	26f6e <printk>
				 seq_auth, 0, rx->obo);
   10c0c:	f89b 301f 	ldrb.w	r3, [fp, #31]
			send_ack(net_rx->sub, net_rx->ctx.recv_dst,
   10c10:	8961      	ldrh	r1, [r4, #10]
   10c12:	8922      	ldrh	r2, [r4, #8]
   10c14:	6820      	ldr	r0, [r4, #0]
   10c16:	09db      	lsrs	r3, r3, #7
   10c18:	e9cd 5301 	strd	r5, r3, [sp, #4]
   10c1c:	ab0c      	add	r3, sp, #48	; 0x30
   10c1e:	9300      	str	r3, [sp, #0]
   10c20:	7be3      	ldrb	r3, [r4, #15]
   10c22:	f019 fe0d 	bl	2a840 <send_ack>
			seg_rx_reset(rx, true);
   10c26:	2101      	movs	r1, #1
   10c28:	4658      	mov	r0, fp
   10c2a:	f7fe ff75 	bl	fb18 <seg_rx_reset>
   10c2e:	e6ec      	b.n	10a0a <bt_mesh_trans_recv+0x15a>
		return BT_MESH_APP_SEG_SDU_MAX;
   10c30:	2a00      	cmp	r2, #0
		if (buf->len != seg_len(rx->ctl)) {
   10c32:	bf14      	ite	ne
   10c34:	2308      	movne	r3, #8
   10c36:	230c      	moveq	r3, #12
   10c38:	428b      	cmp	r3, r1
   10c3a:	d002      	beq.n	10c42 <bt_mesh_trans_recv+0x392>
			BT_ERR("Incorrect segment size for message type");
   10c3c:	2145      	movs	r1, #69	; 0x45
   10c3e:	4888      	ldr	r0, [pc, #544]	; (10e60 <bt_mesh_trans_recv+0x5b0>)
   10c40:	e104      	b.n	10e4c <bt_mesh_trans_recv+0x59c>
   10c42:	f01c fbff 	bl	2d444 <z_impl_k_uptime_ticks>
   10c46:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   10c4a:	fba0 bc05 	umull	fp, ip, r0, r5
   10c4e:	fb05 cc01 	mla	ip, r5, r1, ip
   10c52:	ea4f 32db 	mov.w	r2, fp, lsr #15
   10c56:	ea42 424c 	orr.w	r2, r2, ip, lsl #17
	return (uint32_t)k_uptime_get();
   10c5a:	f8c8 2028 	str.w	r2, [r8, #40]	; 0x28
	return k_ticks_to_ms_floor32(z_timeout_remaining(&work->timeout));
   10c5e:	4881      	ldr	r0, [pc, #516]	; (10e64 <bt_mesh_trans_recv+0x5b4>)
   10c60:	f013 fad6 	bl	24210 <z_timeout_remaining>
			return (uint32_t)((t * to_hz + off) / from_hz);
   10c64:	fba0 0105 	umull	r0, r1, r0, r5
   10c68:	0bc3      	lsrs	r3, r0, #15
	if (!k_delayed_work_remaining_get(&rx->ack) &&
   10c6a:	ea53 4341 	orrs.w	r3, r3, r1, lsl #17
   10c6e:	d115      	bne.n	10c9c <bt_mesh_trans_recv+0x3ec>
		int32_t timeout = ack_timeout(rx);
   10c70:	4879      	ldr	r0, [pc, #484]	; (10e58 <bt_mesh_trans_recv+0x5a8>)
   10c72:	f019 fd23 	bl	2a6bc <ack_timeout>
			return (t * to_hz + off) / from_hz;
   10c76:	f44f 4500 	mov.w	r5, #32768	; 0x8000
		k_delayed_work_submit(&rx->ack, K_MSEC(timeout));
   10c7a:	ea20 7ce0 	bic.w	ip, r0, r0, asr #31
   10c7e:	2100      	movs	r1, #0
   10c80:	f240 30e7 	movw	r0, #999	; 0x3e7
   10c84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10c88:	2300      	movs	r3, #0
   10c8a:	fbc5 010c 	smlal	r0, r1, r5, ip
   10c8e:	f7f0 fecd 	bl	1a2c <__aeabi_uldivmod>
   10c92:	4602      	mov	r2, r0
   10c94:	460b      	mov	r3, r1
   10c96:	4874      	ldr	r0, [pc, #464]	; (10e68 <bt_mesh_trans_recv+0x5b8>)
   10c98:	f7fe ff38 	bl	fb0c <k_delayed_work_submit>
	err = k_mem_slab_alloc(&segs, &rx->seg[seg_o], K_NO_WAIT);
   10c9c:	1c79      	adds	r1, r7, #1
   10c9e:	2200      	movs	r2, #0
   10ca0:	2300      	movs	r3, #0
   10ca2:	eb08 0181 	add.w	r1, r8, r1, lsl #2
   10ca6:	4871      	ldr	r0, [pc, #452]	; (10e6c <bt_mesh_trans_recv+0x5bc>)
   10ca8:	f011 fa48 	bl	2213c <k_mem_slab_alloc>
	if (err) {
   10cac:	4683      	mov	fp, r0
   10cae:	b130      	cbz	r0, 10cbe <bt_mesh_trans_recv+0x40e>
		BT_WARN("Unable allocate buffer for Seg %u", seg_o);
   10cb0:	463a      	mov	r2, r7
   10cb2:	2157      	movs	r1, #87	; 0x57
   10cb4:	486e      	ldr	r0, [pc, #440]	; (10e70 <bt_mesh_trans_recv+0x5c0>)
   10cb6:	f016 f95a 	bl	26f6e <printk>
	enum bt_mesh_friend_pdu_type pdu_type = BT_MESH_FRIEND_PDU_SINGLE;
   10cba:	2500      	movs	r5, #0
   10cbc:	e70b      	b.n	10ad6 <bt_mesh_trans_recv+0x226>
	memcpy(rx->seg[seg_o], buf->data, buf->len);
   10cbe:	eb08 0387 	add.w	r3, r8, r7, lsl #2
   10cc2:	88b2      	ldrh	r2, [r6, #4]
   10cc4:	6858      	ldr	r0, [r3, #4]
   10cc6:	6831      	ldr	r1, [r6, #0]
   10cc8:	f01c fc5c 	bl	2d584 <memcpy>
	rx->block |= BIT(seg_o);
   10ccc:	2501      	movs	r5, #1
   10cce:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
   10cd2:	fa05 f707 	lsl.w	r7, r5, r7
   10cd6:	431f      	orrs	r7, r3
	if (rx->block != BLOCK_COMPLETE(seg_n)) {
   10cd8:	9b05      	ldr	r3, [sp, #20]
	rx->block |= BIT(seg_o);
   10cda:	f8c8 7024 	str.w	r7, [r8, #36]	; 0x24
	if (rx->block != BLOCK_COMPLETE(seg_n)) {
   10cde:	442b      	add	r3, r5
   10ce0:	fa05 f303 	lsl.w	r3, r5, r3
   10ce4:	3b01      	subs	r3, #1
   10ce6:	429f      	cmp	r7, r3
   10ce8:	f47f af08 	bne.w	10afc <bt_mesh_trans_recv+0x24c>
	if (rpl) {
   10cec:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10cee:	b110      	cbz	r0, 10cf6 <bt_mesh_trans_recv+0x446>
		bt_mesh_rpl_update(rpl, net_rx);
   10cf0:	4621      	mov	r1, r4
   10cf2:	f019 fdec 	bl	2a8ce <bt_mesh_rpl_update>
	k_delayed_work_cancel(&rx->ack);
   10cf6:	485c      	ldr	r0, [pc, #368]	; (10e68 <bt_mesh_trans_recv+0x5b8>)
   10cf8:	f013 f8be 	bl	23e78 <k_delayed_work_cancel>
		 net_rx->ctx.send_ttl, seq_auth, rx->block, rx->obo);
   10cfc:	f898 301f 	ldrb.w	r3, [r8, #31]
	send_ack(net_rx->sub, net_rx->ctx.recv_dst, net_rx->ctx.addr,
   10d00:	8922      	ldrh	r2, [r4, #8]
   10d02:	8961      	ldrh	r1, [r4, #10]
   10d04:	6820      	ldr	r0, [r4, #0]
   10d06:	09db      	lsrs	r3, r3, #7
   10d08:	9302      	str	r3, [sp, #8]
   10d0a:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
   10d0e:	9301      	str	r3, [sp, #4]
   10d10:	ad0c      	add	r5, sp, #48	; 0x30
   10d12:	7be3      	ldrb	r3, [r4, #15]
   10d14:	9500      	str	r5, [sp, #0]
   10d16:	f019 fd93 	bl	2a840 <send_ack>
	if (net_rx->ctl) {
   10d1a:	7d23      	ldrb	r3, [r4, #20]
   10d1c:	071b      	lsls	r3, r3, #28
   10d1e:	d513      	bpl.n	10d48 <bt_mesh_trans_recv+0x498>
		NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_RX_CTL_MAX);
   10d20:	ab12      	add	r3, sp, #72	; 0x48
   10d22:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
   10d26:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
		seg_rx_assemble(rx, &sdu, 0U);
   10d2a:	a90f      	add	r1, sp, #60	; 0x3c
   10d2c:	2200      	movs	r2, #0
   10d2e:	484a      	ldr	r0, [pc, #296]	; (10e58 <bt_mesh_trans_recv+0x5a8>)
		NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_RX_CTL_MAX);
   10d30:	930f      	str	r3, [sp, #60]	; 0x3c
		seg_rx_assemble(rx, &sdu, 0U);
   10d32:	f019 fce1 	bl	2a6f8 <seg_rx_assemble>
		err = ctl_recv(net_rx, *hdr, &sdu, seq_auth);
   10d36:	462b      	mov	r3, r5
   10d38:	aa0f      	add	r2, sp, #60	; 0x3c
   10d3a:	f89a 1000 	ldrb.w	r1, [sl]
   10d3e:	4620      	mov	r0, r4
   10d40:	f7ff f8be 	bl	fec0 <ctl_recv>
		err = sdu_recv(net_rx, *hdr, ASZMIC(hdr), &seg_buf, &sdu, rx);
   10d44:	4683      	mov	fp, r0
   10d46:	e00f      	b.n	10d68 <bt_mesh_trans_recv+0x4b8>
	} else if (rx->len < 1 + APP_MIC_LEN(ASZMIC(hdr))) {
   10d48:	f89a 3001 	ldrb.w	r3, [sl, #1]
   10d4c:	f8b8 201c 	ldrh.w	r2, [r8, #28]
   10d50:	09db      	lsrs	r3, r3, #7
   10d52:	bf14      	ite	ne
   10d54:	2309      	movne	r3, #9
   10d56:	2305      	moveq	r3, #5
   10d58:	429a      	cmp	r2, r3
   10d5a:	da0b      	bge.n	10d74 <bt_mesh_trans_recv+0x4c4>
		BT_ERR("Too short SDU + MIC");
   10d5c:	2145      	movs	r1, #69	; 0x45
   10d5e:	4845      	ldr	r0, [pc, #276]	; (10e74 <bt_mesh_trans_recv+0x5c4>)
   10d60:	f016 f905 	bl	26f6e <printk>
		err = -EINVAL;
   10d64:	f06f 0b15 	mvn.w	fp, #21
	seg_rx_reset(rx, false);
   10d68:	2100      	movs	r1, #0
   10d6a:	483b      	ldr	r0, [pc, #236]	; (10e58 <bt_mesh_trans_recv+0x5a8>)
   10d6c:	f7fe fed4 	bl	fb18 <seg_rx_reset>
	*pdu_type = BT_MESH_FRIEND_PDU_COMPLETE;
   10d70:	2502      	movs	r5, #2
   10d72:	e6c3      	b.n	10afc <bt_mesh_trans_recv+0x24c>
	if (!buf->__buf) {
   10d74:	4b40      	ldr	r3, [pc, #256]	; (10e78 <bt_mesh_trans_recv+0x5c8>)
   10d76:	6899      	ldr	r1, [r3, #8]
   10d78:	b911      	cbnz	r1, 10d80 <bt_mesh_trans_recv+0x4d0>
		buf->__buf = (uint8_t *)buf + sizeof(*buf);
   10d7a:	f103 010c 	add.w	r1, r3, #12
   10d7e:	6099      	str	r1, [r3, #8]
	buf->data = buf->__buf + reserve_head;
   10d80:	6899      	ldr	r1, [r3, #8]
   10d82:	6019      	str	r1, [r3, #0]
	buf->len = 0U;
   10d84:	2000      	movs	r0, #0
   10d86:	8098      	strh	r0, [r3, #4]
			&sdu, seg_buf.data, rx->len - APP_MIC_LEN(ASZMIC(hdr)));
   10d88:	f89a 3001 	ldrb.w	r3, [sl, #1]
   10d8c:	09db      	lsrs	r3, r3, #7
   10d8e:	bf14      	ite	ne
   10d90:	2308      	movne	r3, #8
   10d92:	2304      	moveq	r3, #4
		net_buf_simple_init_with_data(
   10d94:	ad12      	add	r5, sp, #72	; 0x48
   10d96:	1ad2      	subs	r2, r2, r3
   10d98:	4628      	mov	r0, r5
   10d9a:	f01b fdb3 	bl	2c904 <net_buf_simple_init_with_data>
		err = sdu_recv(net_rx, *hdr, ASZMIC(hdr), &seg_buf, &sdu, rx);
   10d9e:	f89a 2001 	ldrb.w	r2, [sl, #1]
   10da2:	f89a 1000 	ldrb.w	r1, [sl]
   10da6:	4b34      	ldr	r3, [pc, #208]	; (10e78 <bt_mesh_trans_recv+0x5c8>)
   10da8:	e9cd 5800 	strd	r5, r8, [sp]
   10dac:	09d2      	lsrs	r2, r2, #7
   10dae:	4620      	mov	r0, r4
   10db0:	f7ff fd2a 	bl	10808 <sdu_recv>
   10db4:	e7c6      	b.n	10d44 <bt_mesh_trans_recv+0x494>
	enum bt_mesh_friend_pdu_type pdu_type = BT_MESH_FRIEND_PDU_SINGLE;
   10db6:	2500      	movs	r5, #0
   10db8:	e664      	b.n	10a84 <bt_mesh_trans_recv+0x1d4>
	if (buf->len < 1) {
   10dba:	9b06      	ldr	r3, [sp, #24]
   10dbc:	b933      	cbnz	r3, 10dcc <bt_mesh_trans_recv+0x51c>
		BT_ERR("Too small unsegmented PDU");
   10dbe:	2145      	movs	r1, #69	; 0x45
   10dc0:	482e      	ldr	r0, [pc, #184]	; (10e7c <bt_mesh_trans_recv+0x5cc>)
   10dc2:	f016 f8d4 	bl	26f6e <printk>
		seg_count = 1;
   10dc6:	f04f 0901 	mov.w	r9, #1
   10dca:	e5a8      	b.n	1091e <bt_mesh_trans_recv+0x6e>
	if (bt_mesh_rpl_check(rx, NULL)) {
   10dcc:	2100      	movs	r1, #0
   10dce:	4620      	mov	r0, r4
   10dd0:	f000 f90a 	bl	10fe8 <bt_mesh_rpl_check>
   10dd4:	4607      	mov	r7, r0
   10dd6:	b140      	cbz	r0, 10dea <bt_mesh_trans_recv+0x53a>
		BT_WARN("Replay: src 0x%04x dst 0x%04x seq 0x%06x",
   10dd8:	6923      	ldr	r3, [r4, #16]
   10dda:	9300      	str	r3, [sp, #0]
   10ddc:	8922      	ldrh	r2, [r4, #8]
   10dde:	8963      	ldrh	r3, [r4, #10]
   10de0:	4827      	ldr	r0, [pc, #156]	; (10e80 <bt_mesh_trans_recv+0x5d0>)
   10de2:	2157      	movs	r1, #87	; 0x57
   10de4:	f016 f8c3 	bl	26f6e <printk>
   10de8:	e7ed      	b.n	10dc6 <bt_mesh_trans_recv+0x516>
	hdr = net_buf_simple_pull_u8(buf);
   10dea:	4630      	mov	r0, r6
   10dec:	f01b fdb3 	bl	2c956 <net_buf_simple_pull_u8>
	if (rx->ctl) {
   10df0:	7d25      	ldrb	r5, [r4, #20]
   10df2:	f015 0508 	ands.w	r5, r5, #8
	hdr = net_buf_simple_pull_u8(buf);
   10df6:	4601      	mov	r1, r0
	if (rx->ctl) {
   10df8:	d009      	beq.n	10e0e <bt_mesh_trans_recv+0x55e>
		return ctl_recv(rx, hdr, buf, seq_auth);
   10dfa:	ab0c      	add	r3, sp, #48	; 0x30
   10dfc:	4632      	mov	r2, r6
   10dfe:	4620      	mov	r0, r4
   10e00:	f7ff f85e 	bl	fec0 <ctl_recv>
		seg_count = 1;
   10e04:	f04f 0901 	mov.w	r9, #1
		return ctl_recv(rx, hdr, buf, seq_auth);
   10e08:	4683      	mov	fp, r0
	enum bt_mesh_friend_pdu_type pdu_type = BT_MESH_FRIEND_PDU_SINGLE;
   10e0a:	463d      	mov	r5, r7
   10e0c:	e676      	b.n	10afc <bt_mesh_trans_recv+0x24c>
	if (buf->len < 1 + APP_MIC_LEN(0)) {
   10e0e:	88b3      	ldrh	r3, [r6, #4]
   10e10:	2b04      	cmp	r3, #4
   10e12:	d806      	bhi.n	10e22 <bt_mesh_trans_recv+0x572>
		BT_ERR("Too short SDU + MIC");
   10e14:	2145      	movs	r1, #69	; 0x45
   10e16:	4817      	ldr	r0, [pc, #92]	; (10e74 <bt_mesh_trans_recv+0x5c4>)
   10e18:	f016 f8a9 	bl	26f6e <printk>
		seg_count = 1;
   10e1c:	f04f 0901 	mov.w	r9, #1
   10e20:	e016      	b.n	10e50 <bt_mesh_trans_recv+0x5a0>
	buf->len -= APP_MIC_LEN(0);
   10e22:	3b04      	subs	r3, #4
   10e24:	80b3      	strh	r3, [r6, #4]
	return sdu_recv(rx, hdr, 0, buf, &sdu, NULL);
   10e26:	4b17      	ldr	r3, [pc, #92]	; (10e84 <bt_mesh_trans_recv+0x5d4>)
   10e28:	9300      	str	r3, [sp, #0]
   10e2a:	9501      	str	r5, [sp, #4]
   10e2c:	4633      	mov	r3, r6
   10e2e:	462a      	mov	r2, r5
   10e30:	4620      	mov	r0, r4
   10e32:	f7ff fce9 	bl	10808 <sdu_recv>
		seg_count = 1;
   10e36:	f04f 0901 	mov.w	r9, #1
	return sdu_recv(rx, hdr, 0, buf, &sdu, NULL);
   10e3a:	4683      	mov	fp, r0
   10e3c:	e65e      	b.n	10afc <bt_mesh_trans_recv+0x24c>
		if (rx->seq_auth > *seq_auth) {
   10e3e:	458c      	cmp	ip, r1
   10e40:	bf08      	it	eq
   10e42:	4583      	cmpeq	fp, r0
   10e44:	f4bf ade4 	bcs.w	10a10 <bt_mesh_trans_recv+0x160>
			BT_WARN("Ignoring old SeqAuth");
   10e48:	480f      	ldr	r0, [pc, #60]	; (10e88 <bt_mesh_trans_recv+0x5d8>)
   10e4a:	2157      	movs	r1, #87	; 0x57
			BT_ERR("Incorrect segment size for message type");
   10e4c:	f016 f88f 	bl	26f6e <printk>
		return -EINVAL;
   10e50:	f06f 0b15 	mvn.w	fp, #21
   10e54:	e652      	b.n	10afc <bt_mesh_trans_recv+0x24c>
   10e56:	bf00      	nop
   10e58:	20002010 	.word	0x20002010
   10e5c:	0003252b 	.word	0x0003252b
   10e60:	00032542 	.word	0x00032542
   10e64:	20002050 	.word	0x20002050
   10e68:	20002040 	.word	0x20002040
   10e6c:	20001264 	.word	0x20001264
   10e70:	0003256f 	.word	0x0003256f
   10e74:	00032596 	.word	0x00032596
   10e78:	200008ec 	.word	0x200008ec
   10e7c:	000325af 	.word	0x000325af
   10e80:	0003237a 	.word	0x0003237a
   10e84:	200008e0 	.word	0x200008e0
   10e88:	000323f1 	.word	0x000323f1

00010e8c <bt_mesh_va_pending_store>:
BT_MESH_SETTINGS_DEFINE(va, "Va", va_set);
#endif /* CONFIG_BT_MESH_LABEL_COUNT > 0 */

#define IS_VA_DEL(_label)	((_label)->ref == 0)
void bt_mesh_va_pending_store(void)
{
   10e8c:	b570      	push	{r4, r5, r6, lr}
	char path[18];
	uint16_t i;
	int err;

	for (i = 0; (lab = bt_mesh_va_get(i)) != NULL; i++) {
		if (!lab->changed) {
   10e8e:	4c20      	ldr	r4, [pc, #128]	; (10f10 <bt_mesh_va_pending_store+0x84>)
   10e90:	f994 3001 	ldrsb.w	r3, [r4, #1]
   10e94:	2b00      	cmp	r3, #0
{
   10e96:	b08c      	sub	sp, #48	; 0x30
		if (!lab->changed) {
   10e98:	da1f      	bge.n	10eda <bt_mesh_va_pending_store+0x4e>
			continue;
		}

		lab->changed = 0U;
   10e9a:	7863      	ldrb	r3, [r4, #1]

		snprintk(path, sizeof(path), "bt/mesh/Va/%x", i);
   10e9c:	4a1d      	ldr	r2, [pc, #116]	; (10f14 <bt_mesh_va_pending_store+0x88>)
		lab->changed = 0U;
   10e9e:	f36f 13c7 	bfc	r3, #7, #1
   10ea2:	7063      	strb	r3, [r4, #1]
		snprintk(path, sizeof(path), "bt/mesh/Va/%x", i);
   10ea4:	2112      	movs	r1, #18
   10ea6:	2300      	movs	r3, #0
   10ea8:	a802      	add	r0, sp, #8
   10eaa:	f016 f86d 	bl	26f88 <snprintk>

		if (IS_VA_DEL(lab)) {
   10eae:	8823      	ldrh	r3, [r4, #0]
   10eb0:	f3c3 020e 	ubfx	r2, r3, #0, #15
   10eb4:	b99a      	cbnz	r2, 10ede <bt_mesh_va_pending_store+0x52>
			err = settings_delete(path);
   10eb6:	a802      	add	r0, sp, #8
   10eb8:	f016 fc62 	bl	27780 <settings_delete>
			memcpy(va.uuid, lab->uuid, 16);

			err = settings_save_one(path, &va, sizeof(va));
		}

		if (err) {
   10ebc:	b168      	cbz	r0, 10eda <bt_mesh_va_pending_store+0x4e>
			BT_ERR("Failed to %s %s value (err %d)",
   10ebe:	8821      	ldrh	r1, [r4, #0]
   10ec0:	9000      	str	r0, [sp, #0]
   10ec2:	4a15      	ldr	r2, [pc, #84]	; (10f18 <bt_mesh_va_pending_store+0x8c>)
   10ec4:	4815      	ldr	r0, [pc, #84]	; (10f1c <bt_mesh_va_pending_store+0x90>)
   10ec6:	f3c1 010e 	ubfx	r1, r1, #0, #15
   10eca:	2900      	cmp	r1, #0
   10ecc:	bf08      	it	eq
   10ece:	4602      	moveq	r2, r0
   10ed0:	ab02      	add	r3, sp, #8
   10ed2:	2145      	movs	r1, #69	; 0x45
   10ed4:	4812      	ldr	r0, [pc, #72]	; (10f20 <bt_mesh_va_pending_store+0x94>)
   10ed6:	f016 f84a 	bl	26f6e <printk>
			BT_DBG("%s %s value",
			       IS_VA_DEL(lab) ? "Deleted" : "Stored",
			       log_strdup(path));
		}
	}
}
   10eda:	b00c      	add	sp, #48	; 0x30
   10edc:	bd70      	pop	{r4, r5, r6, pc}
			va.ref = lab->ref;
   10ede:	f3c3 030e 	ubfx	r3, r3, #0, #15
   10ee2:	f8ad 301c 	strh.w	r3, [sp, #28]
			va.addr = lab->addr;
   10ee6:	8863      	ldrh	r3, [r4, #2]
   10ee8:	f8ad 301e 	strh.w	r3, [sp, #30]
			memcpy(va.uuid, lab->uuid, 16);
   10eec:	ad08      	add	r5, sp, #32
   10eee:	1d23      	adds	r3, r4, #4
   10ef0:	f104 0614 	add.w	r6, r4, #20
   10ef4:	6818      	ldr	r0, [r3, #0]
   10ef6:	6859      	ldr	r1, [r3, #4]
   10ef8:	462a      	mov	r2, r5
   10efa:	c203      	stmia	r2!, {r0, r1}
   10efc:	3308      	adds	r3, #8
   10efe:	42b3      	cmp	r3, r6
   10f00:	4615      	mov	r5, r2
   10f02:	d1f7      	bne.n	10ef4 <bt_mesh_va_pending_store+0x68>
			err = settings_save_one(path, &va, sizeof(va));
   10f04:	2214      	movs	r2, #20
   10f06:	a907      	add	r1, sp, #28
   10f08:	a802      	add	r0, sp, #8
   10f0a:	f7f4 fe8b 	bl	5c24 <settings_save_one>
   10f0e:	e7d5      	b.n	10ebc <bt_mesh_va_pending_store+0x30>
   10f10:	200046b2 	.word	0x200046b2
   10f14:	0003267e 	.word	0x0003267e
   10f18:	00032678 	.word	0x00032678
   10f1c:	00032671 	.word	0x00032671
   10f20:	0003268c 	.word	0x0003268c

00010f24 <rpl_set>:
	}
}

static int rpl_set(const char *name, size_t len_rd,
		   settings_read_cb read_cb, void *cb_arg)
{
   10f24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10f26:	460c      	mov	r4, r1
   10f28:	4616      	mov	r6, r2
   10f2a:	461f      	mov	r7, r3
	struct bt_mesh_rpl *entry;
	struct rpl_val rpl;
	int err;
	uint16_t src;

	if (!name) {
   10f2c:	b940      	cbnz	r0, 10f40 <rpl_set+0x1c>
		BT_ERR("Insufficient number of arguments");
   10f2e:	2145      	movs	r1, #69	; 0x45
   10f30:	4828      	ldr	r0, [pc, #160]	; (10fd4 <rpl_set+0xb0>)
   10f32:	f016 f81c 	bl	26f6e <printk>
		return -ENOENT;
   10f36:	f06f 0401 	mvn.w	r4, #1

	BT_DBG("RPL entry for 0x%04x: Seq 0x%06x old_iv %u", entry->src,
	       entry->seq, entry->old_iv);

	return 0;
}
   10f3a:	4620      	mov	r0, r4
   10f3c:	b003      	add	sp, #12
   10f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	src = strtol(name, NULL, 16);
   10f40:	2210      	movs	r2, #16
   10f42:	2100      	movs	r1, #0
   10f44:	f015 f9a8 	bl	26298 <strtol>
		if (replay_list[i].src == src) {
   10f48:	4923      	ldr	r1, [pc, #140]	; (10fd8 <rpl_set+0xb4>)
	src = strtol(name, NULL, 16);
   10f4a:	b282      	uxth	r2, r0
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
   10f4c:	2300      	movs	r3, #0
   10f4e:	460d      	mov	r5, r1
		if (replay_list[i].src == src) {
   10f50:	f831 c033 	ldrh.w	ip, [r1, r3, lsl #3]
   10f54:	4594      	cmp	ip, r2
   10f56:	d110      	bne.n	10f7a <rpl_set+0x56>
			return &replay_list[i];
   10f58:	eb01 05c3 	add.w	r5, r1, r3, lsl #3
	if (len_rd == 0) {
   10f5c:	b1d4      	cbz	r4, 10f94 <rpl_set+0x70>
	err = bt_mesh_settings_set(read_cb, cb_arg, &rpl, sizeof(rpl));
   10f5e:	2304      	movs	r3, #4
   10f60:	eb0d 0203 	add.w	r2, sp, r3
   10f64:	4639      	mov	r1, r7
   10f66:	4630      	mov	r0, r6
   10f68:	f003 fb66 	bl	14638 <bt_mesh_settings_set>
	if (err) {
   10f6c:	4604      	mov	r4, r0
   10f6e:	b330      	cbz	r0, 10fbe <rpl_set+0x9a>
		BT_ERR("Failed to set `net`");
   10f70:	2145      	movs	r1, #69	; 0x45
   10f72:	481a      	ldr	r0, [pc, #104]	; (10fdc <rpl_set+0xb8>)
   10f74:	f015 fffb 	bl	26f6e <printk>
		return err;
   10f78:	e7df      	b.n	10f3a <rpl_set+0x16>
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
   10f7a:	3301      	adds	r3, #1
   10f7c:	2b0a      	cmp	r3, #10
   10f7e:	d1e7      	bne.n	10f50 <rpl_set+0x2c>
	if (len_rd == 0) {
   10f80:	b164      	cbz	r4, 10f9c <rpl_set+0x78>
   10f82:	2300      	movs	r3, #0
		if (!replay_list[i].src) {
   10f84:	f835 1033 	ldrh.w	r1, [r5, r3, lsl #3]
   10f88:	b971      	cbnz	r1, 10fa8 <rpl_set+0x84>
			replay_list[i].src = src;
   10f8a:	f825 2033 	strh.w	r2, [r5, r3, lsl #3]
			return &replay_list[i];
   10f8e:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
		if (!entry) {
   10f92:	e7e4      	b.n	10f5e <rpl_set+0x3a>
__ssp_bos_icheck3(memset, void *, int)
   10f94:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   10f98:	606c      	str	r4, [r5, #4]
   10f9a:	e7ce      	b.n	10f3a <rpl_set+0x16>
			BT_WARN("Unable to find RPL entry for 0x%04x", src);
   10f9c:	b282      	uxth	r2, r0
   10f9e:	2157      	movs	r1, #87	; 0x57
   10fa0:	480f      	ldr	r0, [pc, #60]	; (10fe0 <rpl_set+0xbc>)
   10fa2:	f015 ffe4 	bl	26f6e <printk>
   10fa6:	e7c8      	b.n	10f3a <rpl_set+0x16>
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
   10fa8:	3301      	adds	r3, #1
   10faa:	2b0a      	cmp	r3, #10
   10fac:	d1ea      	bne.n	10f84 <rpl_set+0x60>
			BT_ERR("Unable to allocate RPL entry for 0x%04x", src);
   10fae:	b282      	uxth	r2, r0
   10fb0:	2145      	movs	r1, #69	; 0x45
   10fb2:	480c      	ldr	r0, [pc, #48]	; (10fe4 <rpl_set+0xc0>)
   10fb4:	f015 ffdb 	bl	26f6e <printk>
			return -ENOMEM;
   10fb8:	f06f 040b 	mvn.w	r4, #11
   10fbc:	e7bd      	b.n	10f3a <rpl_set+0x16>
	entry->seq = rpl.seq;
   10fbe:	9b01      	ldr	r3, [sp, #4]
   10fc0:	f3c3 0317 	ubfx	r3, r3, #0, #24
   10fc4:	606b      	str	r3, [r5, #4]
	entry->old_iv = rpl.old_iv;
   10fc6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10fca:	f3c3 0300 	ubfx	r3, r3, #0, #1
   10fce:	70ab      	strb	r3, [r5, #2]
	return 0;
   10fd0:	e7b3      	b.n	10f3a <rpl_set+0x16>
   10fd2:	bf00      	nop
   10fd4:	000307a1 	.word	0x000307a1
   10fd8:	20002db4 	.word	0x20002db4
   10fdc:	000329f0 	.word	0x000329f0
   10fe0:	000329c7 	.word	0x000329c7
   10fe4:	00032a09 	.word	0x00032a09

00010fe8 <bt_mesh_rpl_check>:
{
   10fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10fea:	460c      	mov	r4, r1
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
   10fec:	7d01      	ldrb	r1, [r0, #20]
   10fee:	f001 0330 	and.w	r3, r1, #48	; 0x30
   10ff2:	2b10      	cmp	r3, #16
{
   10ff4:	4605      	mov	r5, r0
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
   10ff6:	d009      	beq.n	1100c <bt_mesh_rpl_check+0x24>
	if (!rx->local_match) {
   10ff8:	f011 0340 	ands.w	r3, r1, #64	; 0x40
   10ffc:	d006      	beq.n	1100c <bt_mesh_rpl_check+0x24>
   10ffe:	4815      	ldr	r0, [pc, #84]	; (11054 <bt_mesh_rpl_check+0x6c>)
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
   11000:	2200      	movs	r2, #0
   11002:	4606      	mov	r6, r0
		if (!rpl->src) {
   11004:	8803      	ldrh	r3, [r0, #0]
   11006:	b91b      	cbnz	r3, 11010 <bt_mesh_rpl_check+0x28>
				if (match) {
   11008:	b1ac      	cbz	r4, 11036 <bt_mesh_rpl_check+0x4e>
					*match = rpl;
   1100a:	6020      	str	r0, [r4, #0]
		return false;
   1100c:	2000      	movs	r0, #0
}
   1100e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (rpl->src == rx->ctx.addr) {
   11010:	892f      	ldrh	r7, [r5, #8]
   11012:	429f      	cmp	r7, r3
   11014:	d113      	bne.n	1103e <bt_mesh_rpl_check+0x56>
			if (rx->old_iv && !rpl->old_iv) {
   11016:	00d2      	lsls	r2, r2, #3
   11018:	18b3      	adds	r3, r6, r2
   1101a:	07c9      	lsls	r1, r1, #31
   1101c:	789b      	ldrb	r3, [r3, #2]
   1101e:	d502      	bpl.n	11026 <bt_mesh_rpl_check+0x3e>
   11020:	b91b      	cbnz	r3, 1102a <bt_mesh_rpl_check+0x42>
				return true;
   11022:	2001      	movs	r0, #1
   11024:	e7f3      	b.n	1100e <bt_mesh_rpl_check+0x26>
			if ((!rx->old_iv && rpl->old_iv) ||
   11026:	2b00      	cmp	r3, #0
   11028:	d1ee      	bne.n	11008 <bt_mesh_rpl_check+0x20>
			    rpl->seq < rx->seq) {
   1102a:	4432      	add	r2, r6
			if ((!rx->old_iv && rpl->old_iv) ||
   1102c:	692b      	ldr	r3, [r5, #16]
   1102e:	6852      	ldr	r2, [r2, #4]
   11030:	429a      	cmp	r2, r3
   11032:	d2f6      	bcs.n	11022 <bt_mesh_rpl_check+0x3a>
   11034:	e7e8      	b.n	11008 <bt_mesh_rpl_check+0x20>
					bt_mesh_rpl_update(rpl, rx);
   11036:	4629      	mov	r1, r5
   11038:	f019 fc49 	bl	2a8ce <bt_mesh_rpl_update>
   1103c:	e7e6      	b.n	1100c <bt_mesh_rpl_check+0x24>
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
   1103e:	3201      	adds	r2, #1
   11040:	2a0a      	cmp	r2, #10
   11042:	f100 0008 	add.w	r0, r0, #8
   11046:	d1dd      	bne.n	11004 <bt_mesh_rpl_check+0x1c>
	BT_ERR("RPL is full!");
   11048:	2145      	movs	r1, #69	; 0x45
   1104a:	4803      	ldr	r0, [pc, #12]	; (11058 <bt_mesh_rpl_check+0x70>)
   1104c:	f015 ff8f 	bl	26f6e <printk>
	return true;
   11050:	e7e7      	b.n	11022 <bt_mesh_rpl_check+0x3a>
   11052:	bf00      	nop
   11054:	20002db4 	.word	0x20002db4
   11058:	0003296b 	.word	0x0003296b

0001105c <bt_mesh_rpl_reset>:
{
   1105c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
   1105e:	2500      	movs	r5, #0
   11060:	4c0a      	ldr	r4, [pc, #40]	; (1108c <bt_mesh_rpl_reset+0x30>)
   11062:	2601      	movs	r6, #1
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_RPL_PENDING);
   11064:	462f      	mov	r7, r5
		if (rpl->src) {
   11066:	8823      	ldrh	r3, [r4, #0]
   11068:	b13b      	cbz	r3, 1107a <bt_mesh_rpl_reset+0x1e>
			if (rpl->old_iv) {
   1106a:	78a3      	ldrb	r3, [r4, #2]
   1106c:	b15b      	cbz	r3, 11086 <bt_mesh_rpl_reset+0x2a>
   1106e:	6027      	str	r7, [r4, #0]
   11070:	6067      	str	r7, [r4, #4]
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_RPL_PENDING);
   11072:	2000      	movs	r0, #0
	entry->store = true;
   11074:	70e6      	strb	r6, [r4, #3]
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_RPL_PENDING);
   11076:	f003 fb01 	bl	1467c <bt_mesh_settings_store_schedule>
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
   1107a:	3501      	adds	r5, #1
   1107c:	2d0a      	cmp	r5, #10
   1107e:	f104 0408 	add.w	r4, r4, #8
   11082:	d1f0      	bne.n	11066 <bt_mesh_rpl_reset+0xa>
}
   11084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				rpl->old_iv = true;
   11086:	70a6      	strb	r6, [r4, #2]
   11088:	e7f3      	b.n	11072 <bt_mesh_rpl_reset+0x16>
   1108a:	bf00      	nop
   1108c:	20002db4 	.word	0x20002db4

00011090 <bt_mesh_rpl_pending_store>:
#endif
	store_rpl(rpl);
}

void bt_mesh_rpl_pending_store(void)
{
   11090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11094:	4c25      	ldr	r4, [pc, #148]	; (1112c <bt_mesh_rpl_pending_store+0x9c>)
   11096:	4f26      	ldr	r7, [pc, #152]	; (11130 <bt_mesh_rpl_pending_store+0xa0>)
	snprintk(path, sizeof(path), "bt/mesh/RPL/%x", rpl->src);
   11098:	4e26      	ldr	r6, [pc, #152]	; (11134 <bt_mesh_rpl_pending_store+0xa4>)
		BT_ERR("Failed to clear RPL");
   1109a:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 1113c <bt_mesh_rpl_pending_store+0xac>
{
   1109e:	b086      	sub	sp, #24
	int i;

	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
   110a0:	2500      	movs	r5, #0
   110a2:	f3bf 8f5b 	dmb	ish
   110a6:	683b      	ldr	r3, [r7, #0]
   110a8:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
   110ac:	07db      	lsls	r3, r3, #31
   110ae:	d529      	bpl.n	11104 <bt_mesh_rpl_pending_store+0x74>
	if (!rpl->store) {
   110b0:	78e3      	ldrb	r3, [r4, #3]
   110b2:	b1fb      	cbz	r3, 110f4 <bt_mesh_rpl_pending_store+0x64>
	rpl->store = false;
   110b4:	2300      	movs	r3, #0
	rpl.seq = entry->seq;
   110b6:	6862      	ldr	r2, [r4, #4]
	rpl->store = false;
   110b8:	70e3      	strb	r3, [r4, #3]
	rpl.seq = entry->seq;
   110ba:	9b00      	ldr	r3, [sp, #0]
   110bc:	f362 0317 	bfi	r3, r2, #0, #24
	rpl.old_iv = entry->old_iv;
   110c0:	78a2      	ldrb	r2, [r4, #2]
	rpl.seq = entry->seq;
   110c2:	9300      	str	r3, [sp, #0]
	rpl.old_iv = entry->old_iv;
   110c4:	f3c3 6307 	ubfx	r3, r3, #24, #8
   110c8:	f362 0300 	bfi	r3, r2, #0, #1
   110cc:	f88d 3003 	strb.w	r3, [sp, #3]
	snprintk(path, sizeof(path), "bt/mesh/RPL/%x", entry->src);
   110d0:	4632      	mov	r2, r6
   110d2:	2112      	movs	r1, #18
   110d4:	8823      	ldrh	r3, [r4, #0]
   110d6:	a801      	add	r0, sp, #4
   110d8:	f015 ff56 	bl	26f88 <snprintk>
	err = settings_save_one(path, &rpl, sizeof(rpl));
   110dc:	2204      	movs	r2, #4
   110de:	4669      	mov	r1, sp
   110e0:	eb0d 0002 	add.w	r0, sp, r2
   110e4:	f7f4 fd9e 	bl	5c24 <settings_save_one>
	if (err) {
   110e8:	b120      	cbz	r0, 110f4 <bt_mesh_rpl_pending_store+0x64>
		BT_ERR("Failed to store RPL %s value", log_strdup(path));
   110ea:	aa01      	add	r2, sp, #4
   110ec:	2145      	movs	r1, #69	; 0x45
   110ee:	4812      	ldr	r0, [pc, #72]	; (11138 <bt_mesh_rpl_pending_store+0xa8>)
   110f0:	f015 ff3d 	bl	26f6e <printk>
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
   110f4:	3501      	adds	r5, #1
   110f6:	2d0a      	cmp	r5, #10
   110f8:	f104 0408 	add.w	r4, r4, #8
   110fc:	d1d1      	bne.n	110a2 <bt_mesh_rpl_pending_store+0x12>
			store_pending_rpl(&replay_list[i]);
		} else {
			clear_rpl(&replay_list[i]);
		}
	}
}
   110fe:	b006      	add	sp, #24
   11100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!rpl->src) {
   11104:	8823      	ldrh	r3, [r4, #0]
   11106:	2b00      	cmp	r3, #0
   11108:	d0f4      	beq.n	110f4 <bt_mesh_rpl_pending_store+0x64>
	snprintk(path, sizeof(path), "bt/mesh/RPL/%x", rpl->src);
   1110a:	4632      	mov	r2, r6
   1110c:	2112      	movs	r1, #18
   1110e:	a801      	add	r0, sp, #4
   11110:	f015 ff3a 	bl	26f88 <snprintk>
	err = settings_delete(path);
   11114:	a801      	add	r0, sp, #4
   11116:	f016 fb33 	bl	27780 <settings_delete>
	if (err) {
   1111a:	b118      	cbz	r0, 11124 <bt_mesh_rpl_pending_store+0x94>
		BT_ERR("Failed to clear RPL");
   1111c:	2145      	movs	r1, #69	; 0x45
   1111e:	4640      	mov	r0, r8
   11120:	f015 ff25 	bl	26f6e <printk>
   11124:	2300      	movs	r3, #0
   11126:	6023      	str	r3, [r4, #0]
   11128:	6063      	str	r3, [r4, #4]
   1112a:	e7e3      	b.n	110f4 <bt_mesh_rpl_pending_store+0x64>
   1112c:	20002db4 	.word	0x20002db4
   11130:	20001de0 	.word	0x20001de0
   11134:	0003297d 	.word	0x0003297d
   11138:	0003298c 	.word	0x0003298c
   1113c:	000329ae 	.word	0x000329ae

00011140 <notify_sub_end>:
		}
	}
}

static void notify_sub_end(void)
{
   11140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	sub.remaining = 0;
   11142:	4b0d      	ldr	r3, [pc, #52]	; (11178 <notify_sub_end+0x38>)

	Z_STRUCT_SECTION_FOREACH(bt_mesh_hb_cb, cb) {
   11144:	4d0d      	ldr	r5, [pc, #52]	; (1117c <notify_sub_end+0x3c>)
   11146:	4c0e      	ldr	r4, [pc, #56]	; (11180 <notify_sub_end+0x40>)
   11148:	4e0e      	ldr	r6, [pc, #56]	; (11184 <notify_sub_end+0x44>)
	sub.remaining = 0;
   1114a:	2200      	movs	r2, #0
   1114c:	605a      	str	r2, [r3, #4]
	Z_STRUCT_SECTION_FOREACH(bt_mesh_hb_cb, cb) {
   1114e:	462f      	mov	r7, r5
   11150:	42ac      	cmp	r4, r5
   11152:	d908      	bls.n	11166 <notify_sub_end+0x26>
   11154:	4631      	mov	r1, r6
   11156:	480c      	ldr	r0, [pc, #48]	; (11188 <notify_sub_end+0x48>)
   11158:	2247      	movs	r2, #71	; 0x47
   1115a:	f015 ff08 	bl	26f6e <printk>
   1115e:	2147      	movs	r1, #71	; 0x47
   11160:	4630      	mov	r0, r6
   11162:	f016 f97d 	bl	27460 <assert_post_action>
   11166:	42bc      	cmp	r4, r7
   11168:	d300      	bcc.n	1116c <notify_sub_end+0x2c>
		if (cb->sub_end) {
			cb->sub_end(&sub);
		}
	}
}
   1116a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->sub_end) {
   1116c:	6863      	ldr	r3, [r4, #4]
   1116e:	b10b      	cbz	r3, 11174 <notify_sub_end+0x34>
			cb->sub_end(&sub);
   11170:	4801      	ldr	r0, [pc, #4]	; (11178 <notify_sub_end+0x38>)
   11172:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_mesh_hb_cb, cb) {
   11174:	3408      	adds	r4, #8
   11176:	e7eb      	b.n	11150 <notify_sub_end+0x10>
   11178:	20002e14 	.word	0x20002e14
   1117c:	0002e338 	.word	0x0002e338
   11180:	0002e338 	.word	0x0002e338
   11184:	00032b72 	.word	0x00032b72
   11188:	0002fa94 	.word	0x0002fa94

0001118c <k_delayed_work_submit>:
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   1118c:	4601      	mov	r1, r0
   1118e:	4801      	ldr	r0, [pc, #4]	; (11194 <k_delayed_work_submit+0x8>)
   11190:	f012 be02 	b.w	23d98 <k_delayed_work_submit_to_queue>
   11194:	20002490 	.word	0x20002490

00011198 <hb_publish_end_cb>:
{
   11198:	b5d0      	push	{r4, r6, r7, lr}
	if (pub.period && pub.count > 1) {
   1119a:	4c12      	ldr	r4, [pc, #72]	; (111e4 <hb_publish_end_cb+0x4c>)
   1119c:	68e3      	ldr	r3, [r4, #12]
   1119e:	b1c3      	cbz	r3, 111d2 <hb_publish_end_cb+0x3a>
   111a0:	8862      	ldrh	r2, [r4, #2]
   111a2:	2a01      	cmp	r2, #1
   111a4:	d915      	bls.n	111d2 <hb_publish_end_cb+0x3a>
		k_delayed_work_submit(&pub_timer, K_SECONDS(pub.period));
   111a6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   111aa:	4359      	muls	r1, r3
   111ac:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   111b0:	f240 36e7 	movw	r6, #999	; 0x3e7
   111b4:	2700      	movs	r7, #0
   111b6:	fbe0 6701 	umlal	r6, r7, r0, r1
   111ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   111be:	2300      	movs	r3, #0
   111c0:	4630      	mov	r0, r6
   111c2:	4639      	mov	r1, r7
   111c4:	f7f0 fc32 	bl	1a2c <__aeabi_uldivmod>
   111c8:	4602      	mov	r2, r0
   111ca:	460b      	mov	r3, r1
   111cc:	4806      	ldr	r0, [pc, #24]	; (111e8 <hb_publish_end_cb+0x50>)
   111ce:	f7ff ffdd 	bl	1118c <k_delayed_work_submit>
	if (pub.count != 0xffff) {
   111d2:	8863      	ldrh	r3, [r4, #2]
   111d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   111d8:	4293      	cmp	r3, r2
		pub.count--;
   111da:	bf1c      	itt	ne
   111dc:	f103 33ff 	addne.w	r3, r3, #4294967295
   111e0:	8063      	strhne	r3, [r4, #2]
}
   111e2:	bdd0      	pop	{r4, r6, r7, pc}
   111e4:	20002e04 	.word	0x20002e04
   111e8:	200020f0 	.word	0x200020f0

000111ec <heartbeat_send.constprop.3>:
static void sub_end(struct k_work *work)
{
	notify_sub_end();
}

static int heartbeat_send(const struct bt_mesh_send_cb *cb, void *cb_data)
   111ec:	b530      	push	{r4, r5, lr}
	struct __packed {
		uint8_t init_ttl;
		uint16_t feat;
	} hb;
	struct bt_mesh_msg_ctx ctx = {
		.net_idx = pub.net_idx,
   111ee:	4c25      	ldr	r4, [pc, #148]	; (11284 <heartbeat_send.constprop.3+0x98>)
static int heartbeat_send(const struct bt_mesh_send_cb *cb, void *cb_data)
   111f0:	b08b      	sub	sp, #44	; 0x2c
	struct bt_mesh_msg_ctx ctx = {
   111f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   111f6:	f8ad 2012 	strh.w	r2, [sp, #18]
   111fa:	8822      	ldrh	r2, [r4, #0]
   111fc:	f8ad 2014 	strh.w	r2, [sp, #20]
   11200:	2300      	movs	r3, #0
   11202:	7922      	ldrb	r2, [r4, #4]
   11204:	f8ad 301a 	strh.w	r3, [sp, #26]
static int heartbeat_send(const struct bt_mesh_send_cb *cb, void *cb_data)
   11208:	4605      	mov	r5, r0
		.net_idx = pub.net_idx,
   1120a:	8920      	ldrh	r0, [r4, #8]
	struct bt_mesh_msg_ctx ctx = {
   1120c:	f88d 201b 	strb.w	r2, [sp, #27]
   11210:	f8cd 3016 	str.w	r3, [sp, #22]
		.app_idx = BT_MESH_KEY_UNUSED,
		.addr = pub.dst,
		.send_ttl = pub.ttl,
	};
	struct bt_mesh_net_tx tx = {
   11214:	e9cd 3307 	strd	r3, r3, [sp, #28]
   11218:	9309      	str	r3, [sp, #36]	; 0x24
	struct bt_mesh_msg_ctx ctx = {
   1121a:	f8ad 0010 	strh.w	r0, [sp, #16]
		.sub = bt_mesh_subnet_get(pub.net_idx),
   1121e:	f019 f9e6 	bl	2a5ee <bt_mesh_subnet_get>
	struct bt_mesh_net_tx tx = {
   11222:	ab04      	add	r3, sp, #16
   11224:	9308      	str	r3, [sp, #32]
   11226:	9007      	str	r0, [sp, #28]
		.ctx = &ctx,
		.src = bt_mesh_primary_addr(),
   11228:	f000 feca 	bl	11fc0 <bt_mesh_primary_addr>
	struct bt_mesh_net_tx tx = {
   1122c:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
		.xmit = bt_mesh_net_transmit_get(),
   11230:	f7fc fbba 	bl	d9a8 <bt_mesh_net_transmit_get>
	struct bt_mesh_net_tx tx = {
   11234:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
	};

	/* Do nothing if heartbeat publication is not enabled */
	if (pub.dst == BT_MESH_ADDR_UNASSIGNED) {
   11238:	8820      	ldrh	r0, [r4, #0]
   1123a:	b300      	cbz	r0, 1127e <heartbeat_send.constprop.3+0x92>
		return 0U;
	}

	hb.init_ttl = pub.ttl;
   1123c:	7923      	ldrb	r3, [r4, #4]
   1123e:	f88d 300c 	strb.w	r3, [sp, #12]

	if (bt_mesh_relay_get() == BT_MESH_RELAY_ENABLED) {
   11242:	f019 f874 	bl	2a32e <bt_mesh_relay_get>
	uint16_t feat = 0U;
   11246:	1e43      	subs	r3, r0, #1
   11248:	425c      	negs	r4, r3
   1124a:	415c      	adcs	r4, r3
		feat |= BT_MESH_FEAT_RELAY;
	}

	if (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED) {
   1124c:	f019 f852 	bl	2a2f4 <bt_mesh_gatt_proxy_get>
   11250:	2801      	cmp	r0, #1
		feat |= BT_MESH_FEAT_PROXY;
   11252:	bf08      	it	eq
   11254:	f044 0402 	orreq.w	r4, r4, #2
	}

	if (bt_mesh_friend_get() == BT_MESH_FRIEND_ENABLED) {
   11258:	f019 f866 	bl	2a328 <bt_mesh_friend_get>
   1125c:	2801      	cmp	r0, #1

	hb.feat = sys_cpu_to_be16(feat);

	BT_DBG("InitTTL %u feat 0x%04x", pub.ttl, feat);

	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_HEARTBEAT, &hb, sizeof(hb),
   1125e:	f04f 0300 	mov.w	r3, #0
		feat |= BT_MESH_FEAT_FRIEND;
   11262:	bf08      	it	eq
   11264:	f044 0404 	orreq.w	r4, r4, #4
	hb.feat = sys_cpu_to_be16(feat);
   11268:	0224      	lsls	r4, r4, #8
	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_HEARTBEAT, &hb, sizeof(hb),
   1126a:	e9cd 5300 	strd	r5, r3, [sp]
   1126e:	aa03      	add	r2, sp, #12
   11270:	2303      	movs	r3, #3
   11272:	210a      	movs	r1, #10
   11274:	a807      	add	r0, sp, #28
	hb.feat = sys_cpu_to_be16(feat);
   11276:	f8ad 400d 	strh.w	r4, [sp, #13]
	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_HEARTBEAT, &hb, sizeof(hb),
   1127a:	f7ff f8b7 	bl	103ec <bt_mesh_ctl_send>
				cb, cb_data);
}
   1127e:	b00b      	add	sp, #44	; 0x2c
   11280:	bd30      	pop	{r4, r5, pc}
   11282:	bf00      	nop
   11284:	20002e04 	.word	0x20002e04

00011288 <hb_publish>:
		hb_publish_end_cb(err, cb_data);
	}
}

static void hb_publish(struct k_work *work)
{
   11288:	b538      	push	{r3, r4, r5, lr}
	struct bt_mesh_subnet *sub;
	int err;

	BT_DBG("hb_pub.count: %u", pub.count);

	sub = bt_mesh_subnet_get(pub.net_idx);
   1128a:	4c0d      	ldr	r4, [pc, #52]	; (112c0 <hb_publish+0x38>)
   1128c:	8920      	ldrh	r0, [r4, #8]
   1128e:	f019 f9ae 	bl	2a5ee <bt_mesh_subnet_get>
	if (!sub) {
   11292:	4605      	mov	r5, r0
   11294:	b930      	cbnz	r0, 112a4 <hb_publish+0x1c>
		BT_ERR("No matching subnet for idx 0x%02x", pub.net_idx);
   11296:	8922      	ldrh	r2, [r4, #8]
   11298:	480a      	ldr	r0, [pc, #40]	; (112c4 <hb_publish+0x3c>)
   1129a:	2145      	movs	r1, #69	; 0x45
   1129c:	f015 fe67 	bl	26f6e <printk>
		pub.dst = BT_MESH_ADDR_UNASSIGNED;
   112a0:	8025      	strh	r5, [r4, #0]

	err = heartbeat_send(&publish_cb, NULL);
	if (err) {
		hb_publish_end_cb(err, NULL);
	}
}
   112a2:	bd38      	pop	{r3, r4, r5, pc}
	if (pub.count == 0U) {
   112a4:	8863      	ldrh	r3, [r4, #2]
   112a6:	2b00      	cmp	r3, #0
   112a8:	d0fb      	beq.n	112a2 <hb_publish+0x1a>
	err = heartbeat_send(&publish_cb, NULL);
   112aa:	4807      	ldr	r0, [pc, #28]	; (112c8 <hb_publish+0x40>)
   112ac:	f7ff ff9e 	bl	111ec <heartbeat_send.constprop.3>
	if (err) {
   112b0:	2800      	cmp	r0, #0
   112b2:	d0f6      	beq.n	112a2 <hb_publish+0x1a>
		hb_publish_end_cb(err, NULL);
   112b4:	2100      	movs	r1, #0
}
   112b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		hb_publish_end_cb(err, NULL);
   112ba:	f7ff bf6d 	b.w	11198 <hb_publish_end_cb>
   112be:	bf00      	nop
   112c0:	20002e04 	.word	0x20002e04
   112c4:	00032b4b 	.word	0x00032b4b
   112c8:	0002eef0 	.word	0x0002eef0

000112cc <sub_remaining>:
{
   112cc:	b508      	push	{r3, lr}
	if (sub.dst == BT_MESH_ADDR_UNASSIGNED) {
   112ce:	4b08      	ldr	r3, [pc, #32]	; (112f0 <sub_remaining+0x24>)
   112d0:	8958      	ldrh	r0, [r3, #10]
   112d2:	b158      	cbz	r0, 112ec <sub_remaining+0x20>
	return k_ticks_to_ms_floor32(z_timeout_remaining(&work->timeout));
   112d4:	4807      	ldr	r0, [pc, #28]	; (112f4 <sub_remaining+0x28>)
   112d6:	f012 ff9b 	bl	24210 <z_timeout_remaining>
			return (uint32_t)((t * to_hz + off) / from_hz);
   112da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   112de:	fba0 0102 	umull	r0, r1, r0, r2
   112e2:	0bc3      	lsrs	r3, r0, #15
   112e4:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
	return k_delayed_work_remaining_get(&sub_timer) / MSEC_PER_SEC;
   112e8:	fbb3 f0f2 	udiv	r0, r3, r2
}
   112ec:	2100      	movs	r1, #0
   112ee:	bd08      	pop	{r3, pc}
   112f0:	20002e14 	.word	0x20002e14
   112f4:	20002130 	.word	0x20002130

000112f8 <bt_mesh_hb_recv>:

int bt_mesh_hb_recv(struct bt_mesh_net_rx *rx, struct net_buf_simple *buf)
{
   112f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint8_t init_ttl, hops;
	uint16_t feat;

	if (buf->len < 3) {
   112fc:	888b      	ldrh	r3, [r1, #4]
   112fe:	2b02      	cmp	r3, #2
{
   11300:	4607      	mov	r7, r0
   11302:	460d      	mov	r5, r1
	if (buf->len < 3) {
   11304:	d807      	bhi.n	11316 <bt_mesh_hb_recv+0x1e>
		BT_ERR("Too short heartbeat message");
   11306:	4828      	ldr	r0, [pc, #160]	; (113a8 <bt_mesh_hb_recv+0xb0>)
   11308:	2145      	movs	r1, #69	; 0x45
   1130a:	f015 fe30 	bl	26f6e <printk>
		return -EINVAL;
   1130e:	f06f 0015 	mvn.w	r0, #21
	       (hops == 1U) ? "" : "s", feat);

	notify_recv(hops, feat);

	return 0;
}
   11312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	init_ttl = (net_buf_simple_pull_u8(buf) & 0x7f);
   11316:	4608      	mov	r0, r1
   11318:	f01b fb1d 	bl	2c956 <net_buf_simple_pull_u8>
   1131c:	4604      	mov	r4, r0
	feat = net_buf_simple_pull_be16(buf);
   1131e:	4628      	mov	r0, r5
	if (rx->ctx.addr != sub.src || rx->ctx.recv_dst != sub.dst) {
   11320:	4d22      	ldr	r5, [pc, #136]	; (113ac <bt_mesh_hb_recv+0xb4>)
	feat = net_buf_simple_pull_be16(buf);
   11322:	f01b fb28 	bl	2c976 <net_buf_simple_pull_be16>
	if (rx->ctx.addr != sub.src || rx->ctx.recv_dst != sub.dst) {
   11326:	68ba      	ldr	r2, [r7, #8]
   11328:	68ab      	ldr	r3, [r5, #8]
   1132a:	429a      	cmp	r2, r3
	feat = net_buf_simple_pull_be16(buf);
   1132c:	4606      	mov	r6, r0
	if (rx->ctx.addr != sub.src || rx->ctx.recv_dst != sub.dst) {
   1132e:	d001      	beq.n	11334 <bt_mesh_hb_recv+0x3c>
		return 0;
   11330:	2000      	movs	r0, #0
   11332:	e7ee      	b.n	11312 <bt_mesh_hb_recv+0x1a>
	if (!k_delayed_work_pending(&sub_timer)) {
   11334:	481e      	ldr	r0, [pc, #120]	; (113b0 <bt_mesh_hb_recv+0xb8>)
	hops = (init_ttl - rx->ctx.recv_ttl + 1);
   11336:	7b7f      	ldrb	r7, [r7, #13]
	if (!k_delayed_work_pending(&sub_timer)) {
   11338:	f01c f873 	bl	2d422 <k_delayed_work_pending>
   1133c:	2800      	cmp	r0, #0
   1133e:	d0f7      	beq.n	11330 <bt_mesh_hb_recv+0x38>
	init_ttl = (net_buf_simple_pull_u8(buf) & 0x7f);
   11340:	f004 047f 	and.w	r4, r4, #127	; 0x7f
	hops = (init_ttl - rx->ctx.recv_ttl + 1);
   11344:	1be4      	subs	r4, r4, r7
	sub.min_hops = MIN(sub.min_hops, hops);
   11346:	7bab      	ldrb	r3, [r5, #14]
	Z_STRUCT_SECTION_FOREACH(bt_mesh_hb_cb, cb) {
   11348:	4f1a      	ldr	r7, [pc, #104]	; (113b4 <bt_mesh_hb_recv+0xbc>)
   1134a:	f8df 8074 	ldr.w	r8, [pc, #116]	; 113c0 <bt_mesh_hb_recv+0xc8>
	hops = (init_ttl - rx->ctx.recv_ttl + 1);
   1134e:	3401      	adds	r4, #1
   11350:	b2e4      	uxtb	r4, r4
	sub.min_hops = MIN(sub.min_hops, hops);
   11352:	42a3      	cmp	r3, r4
   11354:	bf28      	it	cs
   11356:	4623      	movcs	r3, r4
   11358:	73ab      	strb	r3, [r5, #14]
	sub.max_hops = MAX(sub.max_hops, hops);
   1135a:	7beb      	ldrb	r3, [r5, #15]
   1135c:	42a3      	cmp	r3, r4
   1135e:	bf38      	it	cc
   11360:	4623      	movcc	r3, r4
   11362:	73eb      	strb	r3, [r5, #15]
	if (sub.count < 0xffff) {
   11364:	89ab      	ldrh	r3, [r5, #12]
   11366:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1136a:	4293      	cmp	r3, r2
		sub.count++;
   1136c:	bf1c      	itt	ne
   1136e:	3301      	addne	r3, #1
   11370:	81ab      	strhne	r3, [r5, #12]
	sub.remaining = sub_remaining();
   11372:	f7ff ffab 	bl	112cc <sub_remaining>
   11376:	6068      	str	r0, [r5, #4]
	Z_STRUCT_SECTION_FOREACH(bt_mesh_hb_cb, cb) {
   11378:	4d0f      	ldr	r5, [pc, #60]	; (113b8 <bt_mesh_hb_recv+0xc0>)
   1137a:	46b9      	mov	r9, r7
   1137c:	42bd      	cmp	r5, r7
   1137e:	d908      	bls.n	11392 <bt_mesh_hb_recv+0x9a>
   11380:	4641      	mov	r1, r8
   11382:	480e      	ldr	r0, [pc, #56]	; (113bc <bt_mesh_hb_recv+0xc4>)
   11384:	223c      	movs	r2, #60	; 0x3c
   11386:	f015 fdf2 	bl	26f6e <printk>
   1138a:	213c      	movs	r1, #60	; 0x3c
   1138c:	4640      	mov	r0, r8
   1138e:	f016 f867 	bl	27460 <assert_post_action>
   11392:	454d      	cmp	r5, r9
   11394:	d2cc      	bcs.n	11330 <bt_mesh_hb_recv+0x38>
		if (cb->recv) {
   11396:	682b      	ldr	r3, [r5, #0]
   11398:	b11b      	cbz	r3, 113a2 <bt_mesh_hb_recv+0xaa>
			cb->recv(&sub, hops, feat);
   1139a:	4632      	mov	r2, r6
   1139c:	4621      	mov	r1, r4
   1139e:	4803      	ldr	r0, [pc, #12]	; (113ac <bt_mesh_hb_recv+0xb4>)
   113a0:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_mesh_hb_cb, cb) {
   113a2:	3508      	adds	r5, #8
   113a4:	e7ea      	b.n	1137c <bt_mesh_hb_recv+0x84>
   113a6:	bf00      	nop
   113a8:	00032aa2 	.word	0x00032aa2
   113ac:	20002e14 	.word	0x20002e14
   113b0:	20002120 	.word	0x20002120
   113b4:	0002e338 	.word	0x0002e338
   113b8:	0002e338 	.word	0x0002e338
   113bc:	0002fa94 	.word	0x0002fa94
   113c0:	00032b72 	.word	0x00032b72

000113c4 <bt_mesh_hb_pub_set>:

	k_delayed_work_cancel(&pub_timer);
}

uint8_t bt_mesh_hb_pub_set(struct bt_mesh_hb_pub *new_pub)
{
   113c4:	b538      	push	{r3, r4, r5, lr}
	if (!new_pub || new_pub->dst == BT_MESH_ADDR_UNASSIGNED) {
   113c6:	4604      	mov	r4, r0
   113c8:	b108      	cbz	r0, 113ce <bt_mesh_hb_pub_set+0xa>
   113ca:	8803      	ldrh	r3, [r0, #0]
   113cc:	b963      	cbnz	r3, 113e8 <bt_mesh_hb_pub_set+0x24>
	pub.dst = BT_MESH_ADDR_UNASSIGNED;
   113ce:	4b1b      	ldr	r3, [pc, #108]	; (1143c <bt_mesh_hb_pub_set+0x78>)
	k_delayed_work_cancel(&pub_timer);
   113d0:	481b      	ldr	r0, [pc, #108]	; (11440 <bt_mesh_hb_pub_set+0x7c>)
	pub.dst = BT_MESH_ADDR_UNASSIGNED;
   113d2:	2200      	movs	r2, #0
   113d4:	601a      	str	r2, [r3, #0]
	pub.ttl = 0U;
   113d6:	711a      	strb	r2, [r3, #4]
	pub.period = 0U;
   113d8:	60da      	str	r2, [r3, #12]
	k_delayed_work_cancel(&pub_timer);
   113da:	f012 fd4d 	bl	23e78 <k_delayed_work_cancel>
		pub_disable();

		if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
		    bt_mesh_is_provisioned()) {
   113de:	f018 ff44 	bl	2a26a <bt_mesh_is_provisioned>
		if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   113e2:	bb10      	cbnz	r0, 1142a <bt_mesh_hb_pub_set+0x66>
			bt_mesh_settings_store_schedule(
					BT_MESH_SETTINGS_HB_PUB_PENDING);
		}

		return STATUS_SUCCESS;
   113e4:	2000      	movs	r0, #0
		bt_mesh_settings_store_schedule(
					BT_MESH_SETTINGS_HB_PUB_PENDING);
	}

	return STATUS_SUCCESS;
}
   113e6:	bd38      	pop	{r3, r4, r5, pc}
	if (!bt_mesh_subnet_get(new_pub->net_idx)) {
   113e8:	8900      	ldrh	r0, [r0, #8]
   113ea:	f019 f900 	bl	2a5ee <bt_mesh_subnet_get>
   113ee:	b930      	cbnz	r0, 113fe <bt_mesh_hb_pub_set+0x3a>
		BT_ERR("Unknown NetKey 0x%04x", new_pub->net_idx);
   113f0:	4814      	ldr	r0, [pc, #80]	; (11444 <bt_mesh_hb_pub_set+0x80>)
   113f2:	8922      	ldrh	r2, [r4, #8]
   113f4:	2145      	movs	r1, #69	; 0x45
   113f6:	f015 fdba 	bl	26f6e <printk>
		return STATUS_INVALID_NETKEY;
   113fa:	2004      	movs	r0, #4
   113fc:	e7f3      	b.n	113e6 <bt_mesh_hb_pub_set+0x22>
	new_pub->feat &= BT_MESH_FEAT_SUPPORTED;
   113fe:	88e3      	ldrh	r3, [r4, #6]
	pub = *new_pub;
   11400:	4d0e      	ldr	r5, [pc, #56]	; (1143c <bt_mesh_hb_pub_set+0x78>)
	new_pub->feat &= BT_MESH_FEAT_SUPPORTED;
   11402:	f003 030f 	and.w	r3, r3, #15
   11406:	80e3      	strh	r3, [r4, #6]
	pub = *new_pub;
   11408:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   1140c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	if (!bt_mesh_is_provisioned()) {
   11410:	f018 ff2b 	bl	2a26a <bt_mesh_is_provisioned>
   11414:	2800      	cmp	r0, #0
   11416:	d0e5      	beq.n	113e4 <bt_mesh_hb_pub_set+0x20>
	if (pub.period && pub.count) {
   11418:	68eb      	ldr	r3, [r5, #12]
   1141a:	b153      	cbz	r3, 11432 <bt_mesh_hb_pub_set+0x6e>
   1141c:	886b      	ldrh	r3, [r5, #2]
   1141e:	b143      	cbz	r3, 11432 <bt_mesh_hb_pub_set+0x6e>
		k_delayed_work_submit(&pub_timer, K_NO_WAIT);
   11420:	2200      	movs	r2, #0
   11422:	2300      	movs	r3, #0
   11424:	4806      	ldr	r0, [pc, #24]	; (11440 <bt_mesh_hb_pub_set+0x7c>)
   11426:	f7ff feb1 	bl	1118c <k_delayed_work_submit>
			bt_mesh_settings_store_schedule(
   1142a:	2006      	movs	r0, #6
   1142c:	f003 f926 	bl	1467c <bt_mesh_settings_store_schedule>
   11430:	e7d8      	b.n	113e4 <bt_mesh_hb_pub_set+0x20>
		k_delayed_work_cancel(&pub_timer);
   11432:	4803      	ldr	r0, [pc, #12]	; (11440 <bt_mesh_hb_pub_set+0x7c>)
   11434:	f012 fd20 	bl	23e78 <k_delayed_work_cancel>
   11438:	e7f7      	b.n	1142a <bt_mesh_hb_pub_set+0x66>
   1143a:	bf00      	nop
   1143c:	20002e04 	.word	0x20002e04
   11440:	200020f0 	.word	0x200020f0
   11444:	00032a87 	.word	0x00032a87

00011448 <hb_pub_set>:
	}
}

static int hb_pub_set(const char *name, size_t len_rd,
		      settings_read_cb read_cb, void *cb_arg)
{
   11448:	b510      	push	{r4, lr}
   1144a:	b086      	sub	sp, #24
   1144c:	4610      	mov	r0, r2
   1144e:	4619      	mov	r1, r3
	struct bt_mesh_hb_pub pub;
	struct hb_pub_val hb_val;
	int err;

	err = bt_mesh_settings_set(read_cb, cb_arg, &hb_val, sizeof(hb_val));
   11450:	466a      	mov	r2, sp
   11452:	2308      	movs	r3, #8
   11454:	f003 f8f0 	bl	14638 <bt_mesh_settings_set>
	if (err) {
   11458:	4604      	mov	r4, r0
   1145a:	b130      	cbz	r0, 1146a <hb_pub_set+0x22>
		BT_ERR("Failed to set \'hb_val\'");
   1145c:	2145      	movs	r1, #69	; 0x45
   1145e:	4819      	ldr	r0, [pc, #100]	; (114c4 <hb_pub_set+0x7c>)
   11460:	f015 fd85 	bl	26f6e <printk>
	(void)bt_mesh_hb_pub_set(&pub);

	BT_DBG("Restored heartbeat publication");

	return 0;
}
   11464:	4620      	mov	r0, r4
   11466:	b006      	add	sp, #24
   11468:	bd10      	pop	{r4, pc}
	pub.period = bt_mesh_hb_pwr2(hb_val.period);
   1146a:	f89d 2002 	ldrb.w	r2, [sp, #2]
	pub.dst = hb_val.dst;
   1146e:	f8bd 3000 	ldrh.w	r3, [sp]
   11472:	f8ad 3008 	strh.w	r3, [sp, #8]
 * SPDX-License-Identifier: Apache-2.0
 */

static inline uint16_t bt_mesh_hb_pwr2(uint8_t val)
{
	if (!val) {
   11476:	b302      	cbz	r2, 114ba <hb_pub_set+0x72>
		return 0x0000;
	} else if (val == 0xff || val == 0x11) {
   11478:	2aff      	cmp	r2, #255	; 0xff
   1147a:	d020      	beq.n	114be <hb_pub_set+0x76>
   1147c:	2a11      	cmp	r2, #17
   1147e:	d01e      	beq.n	114be <hb_pub_set+0x76>
		return 0xffff;
	} else {
		return (1 << (val - 1));
   11480:	3a01      	subs	r2, #1
   11482:	2301      	movs	r3, #1
   11484:	4093      	lsls	r3, r2
   11486:	b29b      	uxth	r3, r3
	pub.period = bt_mesh_hb_pwr2(hb_val.period);
   11488:	9305      	str	r3, [sp, #20]
	pub.ttl = hb_val.ttl;
   1148a:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1148e:	f88d 300c 	strb.w	r3, [sp, #12]
	pub.feat = hb_val.feat;
   11492:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   11496:	f8ad 300e 	strh.w	r3, [sp, #14]
	pub.net_idx = hb_val.net_idx;
   1149a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1149e:	f3c3 030b 	ubfx	r3, r3, #0, #12
   114a2:	f8ad 3010 	strh.w	r3, [sp, #16]
	if (hb_val.indefinite) {
   114a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
	(void)bt_mesh_hb_pub_set(&pub);
   114aa:	a802      	add	r0, sp, #8
	if (hb_val.indefinite) {
   114ac:	f343 1300 	sbfx	r3, r3, #4, #1
   114b0:	f8ad 300a 	strh.w	r3, [sp, #10]
	(void)bt_mesh_hb_pub_set(&pub);
   114b4:	f7ff ff86 	bl	113c4 <bt_mesh_hb_pub_set>
	return 0;
   114b8:	e7d4      	b.n	11464 <hb_pub_set+0x1c>
		return 0x0000;
   114ba:	4603      	mov	r3, r0
   114bc:	e7e4      	b.n	11488 <hb_pub_set+0x40>
		return 0xffff;
   114be:	f64f 73ff 	movw	r3, #65535	; 0xffff
   114c2:	e7e1      	b.n	11488 <hb_pub_set+0x40>
   114c4:	00032b2f 	.word	0x00032b2f

000114c8 <bt_mesh_hb_pub_get>:
	*get = pub;
   114c8:	4b03      	ldr	r3, [pc, #12]	; (114d8 <bt_mesh_hb_pub_get+0x10>)
{
   114ca:	b510      	push	{r4, lr}
   114cc:	4604      	mov	r4, r0
	*get = pub;
   114ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   114d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   114d4:	bd10      	pop	{r4, pc}
   114d6:	bf00      	nop
   114d8:	20002e04 	.word	0x20002e04

000114dc <bt_mesh_hb_sub_set>:
{
   114dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (src != BT_MESH_ADDR_UNASSIGNED && !BT_MESH_ADDR_IS_UNICAST(src)) {
   114de:	0403      	lsls	r3, r0, #16
{
   114e0:	4607      	mov	r7, r0
   114e2:	460d      	mov	r5, r1
   114e4:	4616      	mov	r6, r2
	if (src != BT_MESH_ADDR_UNASSIGNED && !BT_MESH_ADDR_IS_UNICAST(src)) {
   114e6:	d505      	bpl.n	114f4 <bt_mesh_hb_sub_set+0x18>
		BT_WARN("Prohibited source address");
   114e8:	482a      	ldr	r0, [pc, #168]	; (11594 <bt_mesh_hb_sub_set+0xb8>)
   114ea:	2157      	movs	r1, #87	; 0x57
		BT_WARN("Prohibited destination address");
   114ec:	f015 fd3f 	bl	26f6e <printk>
		return STATUS_INVALID_ADDRESS;
   114f0:	2001      	movs	r0, #1
}
   114f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (BT_MESH_ADDR_IS_VIRTUAL(dst) || BT_MESH_ADDR_IS_RFU(dst) ||
   114f4:	f481 4300 	eor.w	r3, r1, #32768	; 0x8000
   114f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   114fc:	d202      	bcs.n	11504 <bt_mesh_hb_sub_set+0x28>
		BT_WARN("Prohibited destination address");
   114fe:	2157      	movs	r1, #87	; 0x57
   11500:	4825      	ldr	r0, [pc, #148]	; (11598 <bt_mesh_hb_sub_set+0xbc>)
   11502:	e7f3      	b.n	114ec <bt_mesh_hb_sub_set+0x10>
	if (BT_MESH_ADDR_IS_VIRTUAL(dst) || BT_MESH_ADDR_IS_RFU(dst) ||
   11504:	f501 7380 	add.w	r3, r1, #256	; 0x100
   11508:	b29b      	uxth	r3, r3
   1150a:	2bfb      	cmp	r3, #251	; 0xfb
   1150c:	d9f7      	bls.n	114fe <bt_mesh_hb_sub_set+0x22>
   1150e:	b20b      	sxth	r3, r1
   11510:	2b00      	cmp	r3, #0
   11512:	dd03      	ble.n	1151c <bt_mesh_hb_sub_set+0x40>
	    (BT_MESH_ADDR_IS_UNICAST(dst) && dst != bt_mesh_primary_addr())) {
   11514:	f000 fd54 	bl	11fc0 <bt_mesh_primary_addr>
   11518:	42a8      	cmp	r0, r5
   1151a:	d1f0      	bne.n	114fe <bt_mesh_hb_sub_set+0x22>
	if (period > (1U << 16)) {
   1151c:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
   11520:	d906      	bls.n	11530 <bt_mesh_hb_sub_set+0x54>
		BT_WARN("Prohibited subscription period %u s", period);
   11522:	481e      	ldr	r0, [pc, #120]	; (1159c <bt_mesh_hb_sub_set+0xc0>)
   11524:	4632      	mov	r2, r6
   11526:	2157      	movs	r1, #87	; 0x57
   11528:	f015 fd21 	bl	26f6e <printk>
		return STATUS_CANNOT_SET;
   1152c:	200f      	movs	r0, #15
   1152e:	e7e0      	b.n	114f2 <bt_mesh_hb_sub_set+0x16>
	if (src == BT_MESH_ADDR_UNASSIGNED || dst == BT_MESH_ADDR_UNASSIGNED) {
   11530:	4c1b      	ldr	r4, [pc, #108]	; (115a0 <bt_mesh_hb_sub_set+0xc4>)
   11532:	b107      	cbz	r7, 11536 <bt_mesh_hb_sub_set+0x5a>
   11534:	b985      	cbnz	r5, 11558 <bt_mesh_hb_sub_set+0x7c>
		sub.src = BT_MESH_ADDR_UNASSIGNED;
   11536:	2300      	movs	r3, #0
		sub.count = 0U;
   11538:	e9c4 3302 	strd	r3, r3, [r4, #8]
		sub.period = sub.period - sub_remaining();
   1153c:	6825      	ldr	r5, [r4, #0]
   1153e:	f7ff fec5 	bl	112cc <sub_remaining>
   11542:	1a28      	subs	r0, r5, r0
   11544:	6020      	str	r0, [r4, #0]
		if (!k_delayed_work_cancel(&sub_timer)) {
   11546:	4817      	ldr	r0, [pc, #92]	; (115a4 <bt_mesh_hb_sub_set+0xc8>)
   11548:	f012 fc96 	bl	23e78 <k_delayed_work_cancel>
   1154c:	b108      	cbz	r0, 11552 <bt_mesh_hb_sub_set+0x76>
	return STATUS_SUCCESS;
   1154e:	2000      	movs	r0, #0
   11550:	e7cf      	b.n	114f2 <bt_mesh_hb_sub_set+0x16>
			notify_sub_end();
   11552:	f7ff fdf5 	bl	11140 <notify_sub_end>
   11556:	e7fa      	b.n	1154e <bt_mesh_hb_sub_set+0x72>
	} else if (period) {
   11558:	2e00      	cmp	r6, #0
   1155a:	d0ef      	beq.n	1153c <bt_mesh_hb_sub_set+0x60>
		sub.count = 0U;
   1155c:	f44f 03fe 	mov.w	r3, #8323072	; 0x7f0000
		k_delayed_work_submit(&sub_timer, K_SECONDS(period));
   11560:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
		sub.src = src;
   11564:	8127      	strh	r7, [r4, #8]
		sub.dst = dst;
   11566:	8165      	strh	r5, [r4, #10]
		sub.count = 0U;
   11568:	60e3      	str	r3, [r4, #12]
		sub.period = period;
   1156a:	6026      	str	r6, [r4, #0]
			return (t * to_hz + off) / from_hz;
   1156c:	f240 30e7 	movw	r0, #999	; 0x3e7
		k_delayed_work_submit(&sub_timer, K_SECONDS(period));
   11570:	4356      	muls	r6, r2
   11572:	f44f 4400 	mov.w	r4, #32768	; 0x8000
   11576:	2100      	movs	r1, #0
   11578:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1157c:	2300      	movs	r3, #0
   1157e:	fbe4 0106 	umlal	r0, r1, r4, r6
   11582:	f7f0 fa53 	bl	1a2c <__aeabi_uldivmod>
   11586:	4602      	mov	r2, r0
   11588:	460b      	mov	r3, r1
   1158a:	4806      	ldr	r0, [pc, #24]	; (115a4 <bt_mesh_hb_sub_set+0xc8>)
   1158c:	f7ff fdfe 	bl	1118c <k_delayed_work_submit>
   11590:	e7dd      	b.n	1154e <bt_mesh_hb_sub_set+0x72>
   11592:	bf00      	nop
   11594:	00032ac3 	.word	0x00032ac3
   11598:	00032ae2 	.word	0x00032ae2
   1159c:	00032b06 	.word	0x00032b06
   115a0:	20002e14 	.word	0x20002e14
   115a4:	20002120 	.word	0x20002120

000115a8 <bt_mesh_hb_sub_reset_count>:
	sub.count = 0;
   115a8:	4b01      	ldr	r3, [pc, #4]	; (115b0 <bt_mesh_hb_sub_reset_count+0x8>)
   115aa:	2200      	movs	r2, #0
   115ac:	819a      	strh	r2, [r3, #12]
}
   115ae:	4770      	bx	lr
   115b0:	20002e14 	.word	0x20002e14

000115b4 <bt_mesh_hb_sub_get>:
	*get = sub;
   115b4:	4b04      	ldr	r3, [pc, #16]	; (115c8 <bt_mesh_hb_sub_get+0x14>)
{
   115b6:	b510      	push	{r4, lr}
   115b8:	4604      	mov	r4, r0
	*get = sub;
   115ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   115bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	get->remaining = sub_remaining();
   115c0:	f7ff fe84 	bl	112cc <sub_remaining>
   115c4:	6060      	str	r0, [r4, #4]
}
   115c6:	bd10      	pop	{r4, pc}
   115c8:	20002e14 	.word	0x20002e14

000115cc <bt_mesh_hb_feature_changed>:
	if (pub.dst == BT_MESH_ADDR_UNASSIGNED) {
   115cc:	4b04      	ldr	r3, [pc, #16]	; (115e0 <bt_mesh_hb_feature_changed+0x14>)
   115ce:	881a      	ldrh	r2, [r3, #0]
   115d0:	b12a      	cbz	r2, 115de <bt_mesh_hb_feature_changed+0x12>
	if (!(pub.feat & features)) {
   115d2:	88db      	ldrh	r3, [r3, #6]
   115d4:	4218      	tst	r0, r3
   115d6:	d002      	beq.n	115de <bt_mesh_hb_feature_changed+0x12>
	heartbeat_send(NULL, NULL);
   115d8:	2000      	movs	r0, #0
   115da:	f7ff be07 	b.w	111ec <heartbeat_send.constprop.3>
}
   115de:	4770      	bx	lr
   115e0:	20002e04 	.word	0x20002e04

000115e4 <bt_mesh_hb_init>:
	pub.net_idx = BT_MESH_KEY_UNUSED;
   115e4:	4b0b      	ldr	r3, [pc, #44]	; (11614 <bt_mesh_hb_init+0x30>)
   115e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
{
   115ea:	b510      	push	{r4, lr}
	pub.net_idx = BT_MESH_KEY_UNUSED;
   115ec:	811a      	strh	r2, [r3, #8]
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   115ee:	4b0a      	ldr	r3, [pc, #40]	; (11618 <bt_mesh_hb_init+0x34>)
   115f0:	2430      	movs	r4, #48	; 0x30
   115f2:	4622      	mov	r2, r4
   115f4:	2100      	movs	r1, #0
   115f6:	4618      	mov	r0, r3
   115f8:	f01b ffff 	bl	2d5fa <memset>
   115fc:	4b07      	ldr	r3, [pc, #28]	; (1161c <bt_mesh_hb_init+0x38>)
   115fe:	4a08      	ldr	r2, [pc, #32]	; (11620 <bt_mesh_hb_init+0x3c>)
   11600:	6042      	str	r2, [r0, #4]
   11602:	2100      	movs	r1, #0
   11604:	4622      	mov	r2, r4
   11606:	4618      	mov	r0, r3
   11608:	f01b fff7 	bl	2d5fa <memset>
   1160c:	4a05      	ldr	r2, [pc, #20]	; (11624 <bt_mesh_hb_init+0x40>)
   1160e:	6042      	str	r2, [r0, #4]
}
   11610:	bd10      	pop	{r4, pc}
   11612:	bf00      	nop
   11614:	20002e04 	.word	0x20002e04
   11618:	200020f0 	.word	0x200020f0
   1161c:	20002120 	.word	0x20002120
   11620:	00011289 	.word	0x00011289
   11624:	0002a8ef 	.word	0x0002a8ef

00011628 <bt_mesh_hb_start>:
	if (pub.count && pub.period) {
   11628:	4b05      	ldr	r3, [pc, #20]	; (11640 <bt_mesh_hb_start+0x18>)
   1162a:	885a      	ldrh	r2, [r3, #2]
   1162c:	b132      	cbz	r2, 1163c <bt_mesh_hb_start+0x14>
   1162e:	68db      	ldr	r3, [r3, #12]
   11630:	b123      	cbz	r3, 1163c <bt_mesh_hb_start+0x14>
		k_delayed_work_submit(&pub_timer, K_NO_WAIT);
   11632:	2200      	movs	r2, #0
   11634:	2300      	movs	r3, #0
   11636:	4803      	ldr	r0, [pc, #12]	; (11644 <bt_mesh_hb_start+0x1c>)
   11638:	f7ff bda8 	b.w	1118c <k_delayed_work_submit>
}
   1163c:	4770      	bx	lr
   1163e:	bf00      	nop
   11640:	20002e04 	.word	0x20002e04
   11644:	200020f0 	.word	0x200020f0

00011648 <bt_mesh_hb_pub_pending_store>:

BT_MESH_SETTINGS_DEFINE(pub, "HBPub", hb_pub_set);

void bt_mesh_hb_pub_pending_store(void)
{
   11648:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct bt_mesh_hb_pub pub;
	struct hb_pub_val val;
	int err;

	bt_mesh_hb_pub_get(&pub);
   1164a:	a802      	add	r0, sp, #8
   1164c:	f7ff ff3c 	bl	114c8 <bt_mesh_hb_pub_get>
	if (pub.dst == BT_MESH_ADDR_UNASSIGNED) {
   11650:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   11654:	b951      	cbnz	r1, 1166c <bt_mesh_hb_pub_pending_store+0x24>
		err = settings_delete("bt/mesh/HBPub");
   11656:	481e      	ldr	r0, [pc, #120]	; (116d0 <bt_mesh_hb_pub_pending_store+0x88>)
   11658:	f016 f892 	bl	27780 <settings_delete>
		val.net_idx = pub.net_idx;

		err = settings_save_one("bt/mesh/HBPub", &val, sizeof(val));
	}

	if (err) {
   1165c:	b118      	cbz	r0, 11666 <bt_mesh_hb_pub_pending_store+0x1e>
		BT_ERR("Failed to store Heartbeat Publication");
   1165e:	2145      	movs	r1, #69	; 0x45
   11660:	481c      	ldr	r0, [pc, #112]	; (116d4 <bt_mesh_hb_pub_pending_store+0x8c>)
   11662:	f015 fc84 	bl	26f6e <printk>
	} else {
		BT_DBG("Stored Heartbeat Publication");
	}
}
   11666:	b007      	add	sp, #28
   11668:	f85d fb04 	ldr.w	pc, [sp], #4
		val.indefinite = (pub.count == 0xffff);
   1166c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
		val.dst = pub.dst;
   11670:	f8ad 1000 	strh.w	r1, [sp]
		val.indefinite = (pub.count == 0xffff);
   11674:	f64f 72ff 	movw	r2, #65535	; 0xffff
   11678:	1a98      	subs	r0, r3, r2
   1167a:	4243      	negs	r3, r0
   1167c:	4143      	adcs	r3, r0
   1167e:	f89d 0007 	ldrb.w	r0, [sp, #7]
   11682:	f363 1004 	bfi	r0, r3, #4, #1
		val.period = bt_mesh_hb_log(pub.period);
   11686:	9b05      	ldr	r3, [sp, #20]
		val.indefinite = (pub.count == 0xffff);
   11688:	f88d 0007 	strb.w	r0, [sp, #7]
	}
}

static inline uint8_t bt_mesh_hb_log(uint32_t val)
{
	if (!val) {
   1168c:	b13b      	cbz	r3, 1169e <bt_mesh_hb_pub_pending_store+0x56>
		return 0x00;
	} else if (val == 0xffff) {
   1168e:	4293      	cmp	r3, r2
		return 0xff;
	} else {
		return 32 - __builtin_clz(val);
   11690:	bf1d      	ittte	ne
   11692:	fab3 f383 	clzne	r3, r3
   11696:	f1c3 0320 	rsbne	r3, r3, #32
   1169a:	b2db      	uxtbne	r3, r3
		return 0xff;
   1169c:	23ff      	moveq	r3, #255	; 0xff
		val.period = bt_mesh_hb_log(pub.period);
   1169e:	f88d 3002 	strb.w	r3, [sp, #2]
		val.ttl = pub.ttl;
   116a2:	f89d 300c 	ldrb.w	r3, [sp, #12]
   116a6:	f88d 3003 	strb.w	r3, [sp, #3]
		val.feat = pub.feat;
   116aa:	f8bd 300e 	ldrh.w	r3, [sp, #14]
		val.net_idx = pub.net_idx;
   116ae:	f8bd 2010 	ldrh.w	r2, [sp, #16]
		val.feat = pub.feat;
   116b2:	f8ad 3004 	strh.w	r3, [sp, #4]
		val.net_idx = pub.net_idx;
   116b6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
		err = settings_save_one("bt/mesh/HBPub", &val, sizeof(val));
   116ba:	4805      	ldr	r0, [pc, #20]	; (116d0 <bt_mesh_hb_pub_pending_store+0x88>)
		val.net_idx = pub.net_idx;
   116bc:	f362 030b 	bfi	r3, r2, #0, #12
		err = settings_save_one("bt/mesh/HBPub", &val, sizeof(val));
   116c0:	4669      	mov	r1, sp
   116c2:	2208      	movs	r2, #8
		val.net_idx = pub.net_idx;
   116c4:	f8ad 3006 	strh.w	r3, [sp, #6]
		err = settings_save_one("bt/mesh/HBPub", &val, sizeof(val));
   116c8:	f7f4 faac 	bl	5c24 <settings_save_one>
   116cc:	e7c6      	b.n	1165c <bt_mesh_hb_pub_pending_store+0x14>
   116ce:	bf00      	nop
   116d0:	00032a4e 	.word	0x00032a4e
   116d4:	00032a5c 	.word	0x00032a5c

000116d8 <bt_mesh_k2>:
	return bt_mesh_aes_cmac_one(okm, info, strlen(info), okm);
}

int bt_mesh_k2(const uint8_t n[16], const uint8_t *p, size_t p_len,
	       uint8_t net_id[1], uint8_t enc_key[16], uint8_t priv_key[16])
{
   116d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   116dc:	b094      	sub	sp, #80	; 0x50
   116de:	4680      	mov	r8, r0
   116e0:	460f      	mov	r7, r1
	int err;

	BT_DBG("n %s", bt_hex(n, 16));
	BT_DBG("p %s", bt_hex(p, p_len));

	err = bt_mesh_s1("smk2", salt);
   116e2:	482f      	ldr	r0, [pc, #188]	; (117a0 <bt_mesh_k2+0xc8>)
   116e4:	a902      	add	r1, sp, #8
{
   116e6:	4614      	mov	r4, r2
   116e8:	461e      	mov	r6, r3
	err = bt_mesh_s1("smk2", salt);
   116ea:	f019 f95d 	bl	2a9a8 <bt_mesh_s1>
	if (err) {
   116ee:	2800      	cmp	r0, #0
   116f0:	d153      	bne.n	1179a <bt_mesh_k2+0xc2>
		return err;
	}

	err = bt_mesh_aes_cmac_one(salt, n, 16, t);
   116f2:	ad0a      	add	r5, sp, #40	; 0x28
   116f4:	2210      	movs	r2, #16
   116f6:	462b      	mov	r3, r5
   116f8:	4641      	mov	r1, r8
   116fa:	a802      	add	r0, sp, #8
   116fc:	f019 f94a 	bl	2a994 <bt_mesh_aes_cmac_one>
	if (err) {
   11700:	4602      	mov	r2, r0
   11702:	2800      	cmp	r0, #0
   11704:	d145      	bne.n	11792 <bt_mesh_k2+0xba>
		return err;
	}

	pad = 0x01;
   11706:	2301      	movs	r3, #1

	sg[0].data = NULL;
	sg[0].len  = 0;
	sg[1].data = p;
	sg[1].len  = p_len;
   11708:	e9cd 7410 	strd	r7, r4, [sp, #64]	; 0x40
	sg[2].data = &pad;
   1170c:	f10d 0207 	add.w	r2, sp, #7
	sg[2].len  = sizeof(pad);

	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
   11710:	ac06      	add	r4, sp, #24
	sg[2].len  = sizeof(pad);
   11712:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
	pad = 0x01;
   11716:	f88d 3007 	strb.w	r3, [sp, #7]
	sg[0].len  = 0;
   1171a:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
   1171e:	2203      	movs	r2, #3
   11720:	4623      	mov	r3, r4
   11722:	a90e      	add	r1, sp, #56	; 0x38
   11724:	4628      	mov	r0, r5
   11726:	f019 f913 	bl	2a950 <bt_mesh_aes_cmac>
	if (err) {
   1172a:	4602      	mov	r2, r0
   1172c:	bb88      	cbnz	r0, 11792 <bt_mesh_k2+0xba>
		return err;
	}

	net_id[0] = out[15] & 0x7f;
   1172e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27

	sg[0].data = out;
   11732:	940e      	str	r4, [sp, #56]	; 0x38
	net_id[0] = out[15] & 0x7f;
   11734:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   11738:	7033      	strb	r3, [r6, #0]
	sg[0].len  = sizeof(out);
   1173a:	2310      	movs	r3, #16
   1173c:	930f      	str	r3, [sp, #60]	; 0x3c
	pad = 0x02;
   1173e:	2302      	movs	r3, #2
   11740:	f88d 3007 	strb.w	r3, [sp, #7]

	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
   11744:	2203      	movs	r2, #3
   11746:	4623      	mov	r3, r4
   11748:	a90e      	add	r1, sp, #56	; 0x38
   1174a:	4628      	mov	r0, r5
   1174c:	f019 f900 	bl	2a950 <bt_mesh_aes_cmac>
	if (err) {
   11750:	4602      	mov	r2, r0
   11752:	b9f0      	cbnz	r0, 11792 <bt_mesh_k2+0xba>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   11754:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   11756:	4626      	mov	r6, r4
   11758:	4633      	mov	r3, r6
   1175a:	cb03      	ldmia	r3!, {r0, r1}
   1175c:	42ab      	cmp	r3, r5
   1175e:	6010      	str	r0, [r2, #0]
   11760:	6051      	str	r1, [r2, #4]
   11762:	461e      	mov	r6, r3
   11764:	f102 0208 	add.w	r2, r2, #8
   11768:	d1f6      	bne.n	11758 <bt_mesh_k2+0x80>
		return err;
	}

	memcpy(enc_key, out, 16);

	pad = 0x03;
   1176a:	2203      	movs	r2, #3

	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
   1176c:	4623      	mov	r3, r4
   1176e:	a90e      	add	r1, sp, #56	; 0x38
   11770:	4628      	mov	r0, r5
	pad = 0x03;
   11772:	f88d 2007 	strb.w	r2, [sp, #7]
	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
   11776:	f019 f8eb 	bl	2a950 <bt_mesh_aes_cmac>
	if (err) {
   1177a:	4602      	mov	r2, r0
   1177c:	b948      	cbnz	r0, 11792 <bt_mesh_k2+0xba>
   1177e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
   11780:	4623      	mov	r3, r4
   11782:	cb03      	ldmia	r3!, {r0, r1}
   11784:	42ab      	cmp	r3, r5
   11786:	6030      	str	r0, [r6, #0]
   11788:	6071      	str	r1, [r6, #4]
   1178a:	461c      	mov	r4, r3
   1178c:	f106 0608 	add.w	r6, r6, #8
   11790:	d1f6      	bne.n	11780 <bt_mesh_k2+0xa8>

	BT_DBG("NID 0x%02x enc_key %s", net_id[0], bt_hex(enc_key, 16));
	BT_DBG("priv_key %s", bt_hex(priv_key, 16));

	return 0;
}
   11792:	4610      	mov	r0, r2
   11794:	b014      	add	sp, #80	; 0x50
   11796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return err;
   1179a:	2201      	movs	r2, #1
   1179c:	e7f9      	b.n	11792 <bt_mesh_k2+0xba>
   1179e:	bf00      	nop
   117a0:	00032bb9 	.word	0x00032bb9

000117a4 <bt_mesh_k3>:

int bt_mesh_k3(const uint8_t n[16], uint8_t out[8])
{
   117a4:	b530      	push	{r4, r5, lr}
	uint8_t id64[] = { 'i', 'd', '6', '4', 0x01 };
   117a6:	4b13      	ldr	r3, [pc, #76]	; (117f4 <bt_mesh_k3+0x50>)
{
   117a8:	b08b      	sub	sp, #44	; 0x2c
   117aa:	4605      	mov	r5, r0
	uint8_t id64[] = { 'i', 'd', '6', '4', 0x01 };
   117ac:	6818      	ldr	r0, [r3, #0]
   117ae:	9000      	str	r0, [sp, #0]
{
   117b0:	460c      	mov	r4, r1
	uint8_t id64[] = { 'i', 'd', '6', '4', 0x01 };
   117b2:	791b      	ldrb	r3, [r3, #4]
	uint8_t tmp[16];
	uint8_t t[16];
	int err;

	err = bt_mesh_s1("smk3", tmp);
   117b4:	4810      	ldr	r0, [pc, #64]	; (117f8 <bt_mesh_k3+0x54>)
	uint8_t id64[] = { 'i', 'd', '6', '4', 0x01 };
   117b6:	f88d 3004 	strb.w	r3, [sp, #4]
	err = bt_mesh_s1("smk3", tmp);
   117ba:	a902      	add	r1, sp, #8
   117bc:	f019 f8f4 	bl	2a9a8 <bt_mesh_s1>
	if (err) {
   117c0:	b9b0      	cbnz	r0, 117f0 <bt_mesh_k3+0x4c>
		return err;
	}

	err = bt_mesh_aes_cmac_one(tmp, n, 16, t);
   117c2:	ab06      	add	r3, sp, #24
   117c4:	2210      	movs	r2, #16
   117c6:	4629      	mov	r1, r5
   117c8:	a802      	add	r0, sp, #8
   117ca:	f019 f8e3 	bl	2a994 <bt_mesh_aes_cmac_one>
	if (err) {
   117ce:	4603      	mov	r3, r0
   117d0:	b958      	cbnz	r0, 117ea <bt_mesh_k3+0x46>
		return err;
	}

	err = bt_mesh_aes_cmac_one(t, id64, sizeof(id64), tmp);
   117d2:	ab02      	add	r3, sp, #8
   117d4:	2205      	movs	r2, #5
   117d6:	4669      	mov	r1, sp
   117d8:	a806      	add	r0, sp, #24
   117da:	f019 f8db 	bl	2a994 <bt_mesh_aes_cmac_one>
	if (err) {
   117de:	4603      	mov	r3, r0
   117e0:	b918      	cbnz	r0, 117ea <bt_mesh_k3+0x46>
   117e2:	aa04      	add	r2, sp, #16
   117e4:	ca03      	ldmia	r2!, {r0, r1}
   117e6:	6020      	str	r0, [r4, #0]
   117e8:	6061      	str	r1, [r4, #4]
	}

	memcpy(out, tmp + 8, 8);

	return 0;
}
   117ea:	4618      	mov	r0, r3
   117ec:	b00b      	add	sp, #44	; 0x2c
   117ee:	bd30      	pop	{r4, r5, pc}
		return err;
   117f0:	2301      	movs	r3, #1
   117f2:	e7fa      	b.n	117ea <bt_mesh_k3+0x46>
   117f4:	0002e721 	.word	0x0002e721
   117f8:	00032bbe 	.word	0x00032bbe

000117fc <bt_mesh_k4>:

int bt_mesh_k4(const uint8_t n[16], uint8_t out[1])
{
   117fc:	b530      	push	{r4, r5, lr}
	uint8_t id6[] = { 'i', 'd', '6', 0x01 };
   117fe:	4b11      	ldr	r3, [pc, #68]	; (11844 <bt_mesh_k4+0x48>)
{
   11800:	b08b      	sub	sp, #44	; 0x2c
   11802:	4605      	mov	r5, r0
	uint8_t id6[] = { 'i', 'd', '6', 0x01 };
   11804:	6818      	ldr	r0, [r3, #0]
   11806:	9001      	str	r0, [sp, #4]
{
   11808:	460c      	mov	r4, r1
	uint8_t tmp[16];
	uint8_t t[16];
	int err;

	err = bt_mesh_s1("smk4", tmp);
   1180a:	480f      	ldr	r0, [pc, #60]	; (11848 <bt_mesh_k4+0x4c>)
   1180c:	a902      	add	r1, sp, #8
   1180e:	f019 f8cb 	bl	2a9a8 <bt_mesh_s1>
	if (err) {
   11812:	b9a8      	cbnz	r0, 11840 <bt_mesh_k4+0x44>
		return err;
	}

	err = bt_mesh_aes_cmac_one(tmp, n, 16, t);
   11814:	ab06      	add	r3, sp, #24
   11816:	2210      	movs	r2, #16
   11818:	4629      	mov	r1, r5
   1181a:	a802      	add	r0, sp, #8
   1181c:	f019 f8ba 	bl	2a994 <bt_mesh_aes_cmac_one>
	if (err) {
   11820:	b960      	cbnz	r0, 1183c <bt_mesh_k4+0x40>
		return err;
	}

	err = bt_mesh_aes_cmac_one(t, id6, sizeof(id6), tmp);
   11822:	2204      	movs	r2, #4
   11824:	ab02      	add	r3, sp, #8
   11826:	eb0d 0102 	add.w	r1, sp, r2
   1182a:	a806      	add	r0, sp, #24
   1182c:	f019 f8b2 	bl	2a994 <bt_mesh_aes_cmac_one>
	if (err) {
   11830:	b920      	cbnz	r0, 1183c <bt_mesh_k4+0x40>
		return err;
	}

	out[0] = tmp[15] & BIT_MASK(6);
   11832:	f89d 3017 	ldrb.w	r3, [sp, #23]
   11836:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1183a:	7023      	strb	r3, [r4, #0]

	return 0;
}
   1183c:	b00b      	add	sp, #44	; 0x2c
   1183e:	bd30      	pop	{r4, r5, pc}
		return err;
   11840:	2001      	movs	r0, #1
   11842:	e7fb      	b.n	1183c <bt_mesh_k4+0x40>
   11844:	0002e726 	.word	0x0002e726
   11848:	00032bc3 	.word	0x00032bc3

0001184c <bt_mesh_id128>:

int bt_mesh_id128(const uint8_t n[16], const char *s, uint8_t out[16])
{
   1184c:	b530      	push	{r4, r5, lr}
   1184e:	b087      	sub	sp, #28
   11850:	4604      	mov	r4, r0
   11852:	4608      	mov	r0, r1
	const char *id128 = "id128\x01";
	uint8_t salt[16];
	int err;

	err = bt_mesh_s1(s, salt);
   11854:	a902      	add	r1, sp, #8
{
   11856:	4615      	mov	r5, r2
	err = bt_mesh_s1(s, salt);
   11858:	f019 f8a6 	bl	2a9a8 <bt_mesh_s1>
	if (err) {
   1185c:	b940      	cbnz	r0, 11870 <bt_mesh_id128+0x24>
		return err;
	}

	return bt_mesh_k1(n, 16, salt, id128, out);
   1185e:	9500      	str	r5, [sp, #0]
   11860:	4b04      	ldr	r3, [pc, #16]	; (11874 <bt_mesh_id128+0x28>)
   11862:	aa02      	add	r2, sp, #8
   11864:	2110      	movs	r1, #16
   11866:	4620      	mov	r0, r4
   11868:	f019 f8b5 	bl	2a9d6 <bt_mesh_k1>
}
   1186c:	b007      	add	sp, #28
   1186e:	bd30      	pop	{r4, r5, pc}
		return err;
   11870:	2001      	movs	r0, #1
   11872:	e7fb      	b.n	1186c <bt_mesh_id128+0x20>
   11874:	00032bb2 	.word	0x00032bb2

00011878 <bt_mesh_fcs_calc>:
	0xb4, 0x25, 0x57, 0xc6, 0xb3, 0x22, 0x50, 0xc1,
	0xba, 0x2b, 0x59, 0xc8, 0xbd, 0x2c, 0x5e, 0xcf
};

uint8_t bt_mesh_fcs_calc(const uint8_t *data, uint8_t data_len)
{
   11878:	b510      	push	{r4, lr}
	uint8_t fcs = 0xff;

	while (data_len--) {
		fcs = crc_table[fcs ^ *data++];
   1187a:	4a06      	ldr	r2, [pc, #24]	; (11894 <bt_mesh_fcs_calc+0x1c>)
   1187c:	4401      	add	r1, r0
	uint8_t fcs = 0xff;
   1187e:	23ff      	movs	r3, #255	; 0xff
	while (data_len--) {
   11880:	4288      	cmp	r0, r1
   11882:	d102      	bne.n	1188a <bt_mesh_fcs_calc+0x12>
	}

	BT_DBG("fcs 0x%02x", 0xff - fcs);

	return 0xff - fcs;
   11884:	43d8      	mvns	r0, r3
}
   11886:	b2c0      	uxtb	r0, r0
   11888:	bd10      	pop	{r4, pc}
		fcs = crc_table[fcs ^ *data++];
   1188a:	f810 4b01 	ldrb.w	r4, [r0], #1
   1188e:	4063      	eors	r3, r4
   11890:	5cd3      	ldrb	r3, [r2, r3]
   11892:	e7f5      	b.n	11880 <bt_mesh_fcs_calc+0x8>
   11894:	00032bd2 	.word	0x00032bd2

00011898 <bt_mesh_fcs_check>:

bool bt_mesh_fcs_check(struct net_buf_simple *buf, uint8_t received_fcs)
{
	const uint8_t *data = buf->data;
   11898:	6802      	ldr	r2, [r0, #0]
	uint16_t data_len = buf->len;
	uint8_t fcs = 0xff;

	while (data_len--) {
   1189a:	8880      	ldrh	r0, [r0, #4]
{
   1189c:	b530      	push	{r4, r5, lr}
   1189e:	4c08      	ldr	r4, [pc, #32]	; (118c0 <bt_mesh_fcs_check+0x28>)
   118a0:	4410      	add	r0, r2
	uint8_t fcs = 0xff;
   118a2:	23ff      	movs	r3, #255	; 0xff
	while (data_len--) {
   118a4:	4282      	cmp	r2, r0
   118a6:	d106      	bne.n	118b6 <bt_mesh_fcs_check+0x1e>
		fcs = crc_table[fcs ^ *data++];
	}

	return crc_table[fcs ^ received_fcs] == 0xcf;
   118a8:	404b      	eors	r3, r1
   118aa:	5ce0      	ldrb	r0, [r4, r3]
}
   118ac:	f1a0 03cf 	sub.w	r3, r0, #207	; 0xcf
   118b0:	4258      	negs	r0, r3
   118b2:	4158      	adcs	r0, r3
   118b4:	bd30      	pop	{r4, r5, pc}
		fcs = crc_table[fcs ^ *data++];
   118b6:	f812 5b01 	ldrb.w	r5, [r2], #1
   118ba:	406b      	eors	r3, r5
   118bc:	5ce3      	ldrb	r3, [r4, r3]
   118be:	e7f1      	b.n	118a4 <bt_mesh_fcs_check+0xc>
   118c0:	00032bd2 	.word	0x00032bd2

000118c4 <bt_mesh_virtual_addr>:

int bt_mesh_virtual_addr(const uint8_t virtual_label[16], uint16_t *addr)
{
   118c4:	b530      	push	{r4, r5, lr}
   118c6:	b089      	sub	sp, #36	; 0x24
   118c8:	4605      	mov	r5, r0
   118ca:	460c      	mov	r4, r1
	uint8_t salt[16];
	uint8_t tmp[16];
	int err;

	err = bt_mesh_s1("vtad", salt);
   118cc:	480e      	ldr	r0, [pc, #56]	; (11908 <bt_mesh_virtual_addr+0x44>)
   118ce:	4669      	mov	r1, sp
   118d0:	f019 f86a 	bl	2a9a8 <bt_mesh_s1>
	if (err) {
   118d4:	b9a8      	cbnz	r0, 11902 <bt_mesh_virtual_addr+0x3e>
		return err;
	}

	err = bt_mesh_aes_cmac_one(salt, virtual_label, 16, tmp);
   118d6:	ab04      	add	r3, sp, #16
   118d8:	2210      	movs	r2, #16
   118da:	4629      	mov	r1, r5
   118dc:	4668      	mov	r0, sp
   118de:	f019 f859 	bl	2a994 <bt_mesh_aes_cmac_one>
	if (err) {
   118e2:	b960      	cbnz	r0, 118fe <bt_mesh_virtual_addr+0x3a>
	return ((uint16_t)src[0] << 8) | src[1];
   118e4:	f89d 201e 	ldrb.w	r2, [sp, #30]
   118e8:	f89d 301f 	ldrb.w	r3, [sp, #31]
   118ec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		return err;
	}

	*addr = (sys_get_be16(&tmp[14]) & 0x3fff) | 0x8000;
   118f0:	f3c3 030d 	ubfx	r3, r3, #0, #14
   118f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
   118f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
   118fc:	8023      	strh	r3, [r4, #0]

	return 0;
}
   118fe:	b009      	add	sp, #36	; 0x24
   11900:	bd30      	pop	{r4, r5, pc}
		return err;
   11902:	2001      	movs	r0, #1
   11904:	e7fb      	b.n	118fe <bt_mesh_virtual_addr+0x3a>
   11906:	bf00      	nop
   11908:	00032bcd 	.word	0x00032bcd

0001190c <bt_mesh_prov_conf_key>:
	return bt_mesh_aes_cmac_one(conf_salt_key, conf_inputs, 145, salt);
}

int bt_mesh_prov_conf_key(const uint8_t dhkey[32], const uint8_t conf_salt[16],
			  uint8_t conf_key[16])
{
   1190c:	b507      	push	{r0, r1, r2, lr}
	return bt_mesh_k1(dhkey, 32, conf_salt, "prck", conf_key);
   1190e:	4b04      	ldr	r3, [pc, #16]	; (11920 <bt_mesh_prov_conf_key+0x14>)
   11910:	9200      	str	r2, [sp, #0]
   11912:	460a      	mov	r2, r1
   11914:	2120      	movs	r1, #32
   11916:	f019 f85e 	bl	2a9d6 <bt_mesh_k1>
}
   1191a:	b003      	add	sp, #12
   1191c:	f85d fb04 	ldr.w	pc, [sp], #4
   11920:	00032bc8 	.word	0x00032bc8

00011924 <encode_mod_path>:

BT_MESH_SETTINGS_DEFINE(vnd_mod, "v", vnd_mod_set);

static void encode_mod_path(struct bt_mesh_model *mod, bool vnd,
			    const char *key, char *path, size_t path_len)
{
   11924:	b470      	push	{r4, r5, r6}
   11926:	4605      	mov	r5, r0
   11928:	4618      	mov	r0, r3
	uint16_t mod_key = (((uint16_t)mod->elem_idx << 8) | mod->mod_idx);
   1192a:	792e      	ldrb	r6, [r5, #4]
   1192c:	796b      	ldrb	r3, [r5, #5]
{
   1192e:	9c03      	ldr	r4, [sp, #12]

	if (vnd) {
		snprintk(path, path_len, "bt/mesh/v/%x/%s", mod_key, key);
   11930:	9203      	str	r2, [sp, #12]
   11932:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
	if (vnd) {
   11936:	b121      	cbz	r1, 11942 <encode_mod_path+0x1e>
		snprintk(path, path_len, "bt/mesh/v/%x/%s", mod_key, key);
   11938:	4a03      	ldr	r2, [pc, #12]	; (11948 <encode_mod_path+0x24>)
	} else {
		snprintk(path, path_len, "bt/mesh/s/%x/%s", mod_key, key);
   1193a:	4621      	mov	r1, r4
	}
}
   1193c:	bc70      	pop	{r4, r5, r6}
		snprintk(path, path_len, "bt/mesh/s/%x/%s", mod_key, key);
   1193e:	f015 bb23 	b.w	26f88 <snprintk>
   11942:	4a02      	ldr	r2, [pc, #8]	; (1194c <encode_mod_path+0x28>)
   11944:	e7f9      	b.n	1193a <encode_mod_path+0x16>
   11946:	bf00      	nop
   11948:	00032e49 	.word	0x00032e49
   1194c:	00032e59 	.word	0x00032e59

00011950 <model_send>:
{
   11950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11954:	4680      	mov	r8, r0
   11956:	460d      	mov	r5, r1
   11958:	4691      	mov	r9, r2
   1195a:	461c      	mov	r4, r3
   1195c:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
	if (!bt_mesh_is_provisioned()) {
   11960:	f018 fc83 	bl	2a26a <bt_mesh_is_provisioned>
   11964:	b938      	cbnz	r0, 11976 <model_send+0x26>
		BT_ERR("Local node is not yet provisioned");
   11966:	481e      	ldr	r0, [pc, #120]	; (119e0 <model_send+0x90>)
   11968:	2145      	movs	r1, #69	; 0x45
   1196a:	f015 fb00 	bl	26f6e <printk>
		return -EAGAIN;
   1196e:	f06f 000a 	mvn.w	r0, #10
}
   11972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (net_buf_simple_tailroom(msg) < 4) {
   11976:	4620      	mov	r0, r4
   11978:	f01b f82b 	bl	2c9d2 <net_buf_simple_tailroom>
   1197c:	2803      	cmp	r0, #3
   1197e:	d806      	bhi.n	1198e <model_send+0x3e>
		BT_ERR("Not enough tailroom for TransMIC");
   11980:	2145      	movs	r1, #69	; 0x45
   11982:	4818      	ldr	r0, [pc, #96]	; (119e4 <model_send+0x94>)
   11984:	f015 faf3 	bl	26f6e <printk>
		return -EINVAL;
   11988:	f06f 0015 	mvn.w	r0, #21
   1198c:	e7f1      	b.n	11972 <model_send+0x22>
	if (msg->len > BT_MESH_TX_SDU_MAX - 4) {
   1198e:	88a3      	ldrh	r3, [r4, #4]
   11990:	2b74      	cmp	r3, #116	; 0x74
   11992:	d906      	bls.n	119a2 <model_send+0x52>
		BT_ERR("Too big message");
   11994:	4814      	ldr	r0, [pc, #80]	; (119e8 <model_send+0x98>)
   11996:	2145      	movs	r1, #69	; 0x45
   11998:	f015 fae9 	bl	26f6e <printk>
		return -EMSGSIZE;
   1199c:	f06f 0079 	mvn.w	r0, #121	; 0x79
   119a0:	e7e7      	b.n	11972 <model_send+0x22>
	if (!implicit_bind && !model_has_key(model, tx->ctx->app_idx)) {
   119a2:	f1b9 0f00 	cmp.w	r9, #0
   119a6:	d10d      	bne.n	119c4 <model_send+0x74>
   119a8:	686b      	ldr	r3, [r5, #4]
   119aa:	885a      	ldrh	r2, [r3, #2]
		if (mod->keys[i] == key ||
   119ac:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   119b0:	429a      	cmp	r2, r3
   119b2:	d007      	beq.n	119c4 <model_send+0x74>
   119b4:	f64f 71fc 	movw	r1, #65532	; 0xfffc
   119b8:	428b      	cmp	r3, r1
   119ba:	d10b      	bne.n	119d4 <model_send+0x84>
		     BT_MESH_IS_DEV_KEY(key))) {
   119bc:	1cd3      	adds	r3, r2, #3
		    (mod->keys[i] == BT_MESH_KEY_DEV_ANY &&
   119be:	b29b      	uxth	r3, r3
   119c0:	2b01      	cmp	r3, #1
   119c2:	d807      	bhi.n	119d4 <model_send+0x84>
	return bt_mesh_trans_send(tx, msg, cb, cb_data);
   119c4:	463b      	mov	r3, r7
   119c6:	4632      	mov	r2, r6
   119c8:	4621      	mov	r1, r4
   119ca:	4628      	mov	r0, r5
}
   119cc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_mesh_trans_send(tx, msg, cb, cb_data);
   119d0:	f7fe be5a 	b.w	10688 <bt_mesh_trans_send>
		BT_ERR("Model not bound to AppKey 0x%04x", tx->ctx->app_idx);
   119d4:	2145      	movs	r1, #69	; 0x45
   119d6:	4805      	ldr	r0, [pc, #20]	; (119ec <model_send+0x9c>)
   119d8:	f015 fac9 	bl	26f6e <printk>
   119dc:	e7d4      	b.n	11988 <model_send+0x38>
   119de:	bf00      	nop
   119e0:	00032f9c 	.word	0x00032f9c
   119e4:	00032fc3 	.word	0x00032fc3
   119e8:	00032fe9 	.word	0x00032fe9
   119ec:	00032ffe 	.word	0x00032ffe

000119f0 <publish_start>:
{
   119f0:	b510      	push	{r4, lr}
	if (err) {
   119f2:	b131      	cbz	r1, 11a02 <publish_start+0x12>
		BT_ERR("Failed to publish: err %d", err);
   119f4:	460a      	mov	r2, r1
   119f6:	4809      	ldr	r0, [pc, #36]	; (11a1c <publish_start+0x2c>)
   119f8:	2145      	movs	r1, #69	; 0x45
}
   119fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Failed to publish: err %d", err);
   119fe:	f015 bab6 	b.w	26f6e <printk>
	struct bt_mesh_model_pub *pub = mod->pub;
   11a02:	6894      	ldr	r4, [r2, #8]
	if (pub->count == BT_MESH_PUB_TRANSMIT_COUNT(pub->retransmit)) {
   11a04:	7a63      	ldrb	r3, [r4, #9]
   11a06:	7ae2      	ldrb	r2, [r4, #11]
   11a08:	f003 0307 	and.w	r3, r3, #7
   11a0c:	ebb3 1f52 	cmp.w	r3, r2, lsr #5
   11a10:	d102      	bne.n	11a18 <publish_start+0x28>
		pub->period_start = k_uptime_get_32();
   11a12:	f019 f962 	bl	2acda <k_uptime_get_32>
   11a16:	60e0      	str	r0, [r4, #12]
}
   11a18:	bd10      	pop	{r4, pc}
   11a1a:	bf00      	nop
   11a1c:	00033059 	.word	0x00033059

00011a20 <store_pending_mod>:
}

static void store_pending_mod(struct bt_mesh_model *mod,
			      struct bt_mesh_elem *elem, bool vnd,
			      bool primary, void *user_data)
{
   11a20:	b570      	push	{r4, r5, r6, lr}
	if (!mod->flags) {
   11a22:	88c3      	ldrh	r3, [r0, #6]
{
   11a24:	b08a      	sub	sp, #40	; 0x28
   11a26:	4604      	mov	r4, r0
   11a28:	4616      	mov	r6, r2
	if (!mod->flags) {
   11a2a:	2b00      	cmp	r3, #0
   11a2c:	d05e      	beq.n	11aec <store_pending_mod+0xcc>
		return;
	}

	if (mod->flags & BT_MESH_MOD_BIND_PENDING) {
   11a2e:	07d8      	lsls	r0, r3, #31
   11a30:	d522      	bpl.n	11a78 <store_pending_mod+0x58>
		mod->flags &= ~BT_MESH_MOD_BIND_PENDING;
   11a32:	f023 0301 	bic.w	r3, r3, #1
   11a36:	80e3      	strh	r3, [r4, #6]
		if (mod->keys[i] != BT_MESH_KEY_UNUSED) {
   11a38:	89a3      	ldrh	r3, [r4, #12]
   11a3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   11a3e:	4293      	cmp	r3, r2
			keys[count++] = mod->keys[i];
   11a40:	bf18      	it	ne
   11a42:	f8ad 300c 	strhne.w	r3, [sp, #12]
	encode_mod_path(mod, vnd, "bind", path, sizeof(path));
   11a46:	f04f 0314 	mov.w	r3, #20
			keys[count++] = mod->keys[i];
   11a4a:	bf14      	ite	ne
   11a4c:	2501      	movne	r5, #1
		if (mod->keys[i] != BT_MESH_KEY_UNUSED) {
   11a4e:	2500      	moveq	r5, #0
	encode_mod_path(mod, vnd, "bind", path, sizeof(path));
   11a50:	9300      	str	r3, [sp, #0]
   11a52:	4a3a      	ldr	r2, [pc, #232]	; (11b3c <store_pending_mod+0x11c>)
   11a54:	446b      	add	r3, sp
   11a56:	4631      	mov	r1, r6
   11a58:	4620      	mov	r0, r4
   11a5a:	f7ff ff63 	bl	11924 <encode_mod_path>
	if (count) {
   11a5e:	2d00      	cmp	r5, #0
   11a60:	d046      	beq.n	11af0 <store_pending_mod+0xd0>
		err = settings_save_one(path, keys, count * sizeof(keys[0]));
   11a62:	2202      	movs	r2, #2
   11a64:	a903      	add	r1, sp, #12
   11a66:	a805      	add	r0, sp, #20
   11a68:	f7f4 f8dc 	bl	5c24 <settings_save_one>
	if (err) {
   11a6c:	b120      	cbz	r0, 11a78 <store_pending_mod+0x58>
		BT_ERR("Failed to store %s value", log_strdup(path));
   11a6e:	aa05      	add	r2, sp, #20
   11a70:	2145      	movs	r1, #69	; 0x45
   11a72:	4833      	ldr	r0, [pc, #204]	; (11b40 <store_pending_mod+0x120>)
   11a74:	f015 fa7b 	bl	26f6e <printk>
		store_pending_mod_bind(mod, vnd);
	}

	if (mod->flags & BT_MESH_MOD_SUB_PENDING) {
   11a78:	88e3      	ldrh	r3, [r4, #6]
   11a7a:	0799      	lsls	r1, r3, #30
   11a7c:	d51b      	bpl.n	11ab6 <store_pending_mod+0x96>
		if (mod->groups[i] != BT_MESH_ADDR_UNASSIGNED) {
   11a7e:	89e5      	ldrh	r5, [r4, #14]
		mod->flags &= ~BT_MESH_MOD_SUB_PENDING;
   11a80:	f023 0302 	bic.w	r3, r3, #2
   11a84:	80e3      	strh	r3, [r4, #6]
		if (mod->groups[i] != BT_MESH_ADDR_UNASSIGNED) {
   11a86:	b115      	cbz	r5, 11a8e <store_pending_mod+0x6e>
			groups[count++] = mod->groups[i];
   11a88:	f8ad 500c 	strh.w	r5, [sp, #12]
   11a8c:	2501      	movs	r5, #1
	encode_mod_path(mod, vnd, "sub", path, sizeof(path));
   11a8e:	2314      	movs	r3, #20
   11a90:	9300      	str	r3, [sp, #0]
   11a92:	4a2c      	ldr	r2, [pc, #176]	; (11b44 <store_pending_mod+0x124>)
   11a94:	446b      	add	r3, sp
   11a96:	4631      	mov	r1, r6
   11a98:	4620      	mov	r0, r4
   11a9a:	f7ff ff43 	bl	11924 <encode_mod_path>
	if (count) {
   11a9e:	b35d      	cbz	r5, 11af8 <store_pending_mod+0xd8>
		err = settings_save_one(path, groups,
   11aa0:	2202      	movs	r2, #2
   11aa2:	a903      	add	r1, sp, #12
   11aa4:	a805      	add	r0, sp, #20
   11aa6:	f7f4 f8bd 	bl	5c24 <settings_save_one>
	if (err) {
   11aaa:	b120      	cbz	r0, 11ab6 <store_pending_mod+0x96>
		BT_ERR("Failed to store %s value", log_strdup(path));
   11aac:	aa05      	add	r2, sp, #20
   11aae:	2145      	movs	r1, #69	; 0x45
   11ab0:	4823      	ldr	r0, [pc, #140]	; (11b40 <store_pending_mod+0x120>)
   11ab2:	f015 fa5c 	bl	26f6e <printk>
		store_pending_mod_sub(mod, vnd);
	}

	if (mod->flags & BT_MESH_MOD_PUB_PENDING) {
   11ab6:	88e3      	ldrh	r3, [r4, #6]
   11ab8:	075a      	lsls	r2, r3, #29
   11aba:	d517      	bpl.n	11aec <store_pending_mod+0xcc>
		mod->flags &= ~BT_MESH_MOD_PUB_PENDING;
   11abc:	f023 0304 	bic.w	r3, r3, #4
   11ac0:	80e3      	strh	r3, [r4, #6]
	encode_mod_path(mod, vnd, "pub", path, sizeof(path));
   11ac2:	2314      	movs	r3, #20
   11ac4:	9300      	str	r3, [sp, #0]
   11ac6:	4a20      	ldr	r2, [pc, #128]	; (11b48 <store_pending_mod+0x128>)
   11ac8:	446b      	add	r3, sp
   11aca:	4631      	mov	r1, r6
   11acc:	4620      	mov	r0, r4
   11ace:	f7ff ff29 	bl	11924 <encode_mod_path>
	if (!mod->pub || mod->pub->addr == BT_MESH_ADDR_UNASSIGNED) {
   11ad2:	68a3      	ldr	r3, [r4, #8]
   11ad4:	b10b      	cbz	r3, 11ada <store_pending_mod+0xba>
   11ad6:	889a      	ldrh	r2, [r3, #4]
   11ad8:	b992      	cbnz	r2, 11b00 <store_pending_mod+0xe0>
		err = settings_delete(path);
   11ada:	a805      	add	r0, sp, #20
   11adc:	f015 fe50 	bl	27780 <settings_delete>
	if (err) {
   11ae0:	b120      	cbz	r0, 11aec <store_pending_mod+0xcc>
		BT_ERR("Failed to store %s value", log_strdup(path));
   11ae2:	aa05      	add	r2, sp, #20
   11ae4:	2145      	movs	r1, #69	; 0x45
   11ae6:	4816      	ldr	r0, [pc, #88]	; (11b40 <store_pending_mod+0x120>)
   11ae8:	f015 fa41 	bl	26f6e <printk>
		store_pending_mod_pub(mod, vnd);
	}
}
   11aec:	b00a      	add	sp, #40	; 0x28
   11aee:	bd70      	pop	{r4, r5, r6, pc}
		err = settings_delete(path);
   11af0:	a805      	add	r0, sp, #20
   11af2:	f015 fe45 	bl	27780 <settings_delete>
   11af6:	e7b9      	b.n	11a6c <store_pending_mod+0x4c>
		err = settings_delete(path);
   11af8:	a805      	add	r0, sp, #20
   11afa:	f015 fe41 	bl	27780 <settings_delete>
   11afe:	e7d4      	b.n	11aaa <store_pending_mod+0x8a>
		pub.addr = mod->pub->addr;
   11b00:	f8ad 200c 	strh.w	r2, [sp, #12]
		pub.key = mod->pub->key;
   11b04:	88da      	ldrh	r2, [r3, #6]
   11b06:	f3c2 020b 	ubfx	r2, r2, #0, #12
   11b0a:	f8ad 200e 	strh.w	r2, [sp, #14]
		pub.ttl = mod->pub->ttl;
   11b0e:	6899      	ldr	r1, [r3, #8]
   11b10:	9a04      	ldr	r2, [sp, #16]
   11b12:	f021 4170 	bic.w	r1, r1, #4026531840	; 0xf0000000
   11b16:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
   11b1a:	430a      	orrs	r2, r1
   11b1c:	9204      	str	r2, [sp, #16]
		pub.cred = mod->pub->cred;
   11b1e:	79db      	ldrb	r3, [r3, #7]
   11b20:	f89d 2013 	ldrb.w	r2, [sp, #19]
   11b24:	f3c3 1300 	ubfx	r3, r3, #4, #1
   11b28:	f363 1204 	bfi	r2, r3, #4, #1
   11b2c:	f88d 2013 	strb.w	r2, [sp, #19]
		err = settings_save_one(path, &pub, sizeof(pub));
   11b30:	a903      	add	r1, sp, #12
   11b32:	2208      	movs	r2, #8
   11b34:	a805      	add	r0, sp, #20
   11b36:	f7f4 f875 	bl	5c24 <settings_save_one>
   11b3a:	e7d1      	b.n	11ae0 <store_pending_mod+0xc0>
   11b3c:	00033078 	.word	0x00033078
   11b40:	0003307d 	.word	0x0003307d
   11b44:	0003309b 	.word	0x0003309b
   11b48:	0003309f 	.word	0x0003309f

00011b4c <mod_init>:
{
   11b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11b50:	9d06      	ldr	r5, [sp, #24]
   11b52:	460e      	mov	r6, r1
	if (*err) {
   11b54:	6829      	ldr	r1, [r5, #0]
{
   11b56:	4604      	mov	r4, r0
   11b58:	4690      	mov	r8, r2
	if (*err) {
   11b5a:	bb19      	cbnz	r1, 11ba4 <mod_init+0x58>
	if (mod->pub) {
   11b5c:	6887      	ldr	r7, [r0, #8]
   11b5e:	b13f      	cbz	r7, 11b70 <mod_init+0x24>
		mod->pub->mod = mod;
   11b60:	4638      	mov	r0, r7
   11b62:	2230      	movs	r2, #48	; 0x30
   11b64:	f840 4b18 	str.w	r4, [r0], #24
   11b68:	f01b fd47 	bl	2d5fa <memset>
   11b6c:	4b0f      	ldr	r3, [pc, #60]	; (11bac <mod_init+0x60>)
   11b6e:	61fb      	str	r3, [r7, #28]
		mod->keys[i] = BT_MESH_KEY_UNUSED;
   11b70:	f64f 73ff 	movw	r3, #65535	; 0xffff
   11b74:	81a3      	strh	r3, [r4, #12]
	mod->elem_idx = elem - dev_comp->elem;
   11b76:	4b0e      	ldr	r3, [pc, #56]	; (11bb0 <mod_init+0x64>)
   11b78:	681b      	ldr	r3, [r3, #0]
   11b7a:	68db      	ldr	r3, [r3, #12]
   11b7c:	1af3      	subs	r3, r6, r3
   11b7e:	111b      	asrs	r3, r3, #4
   11b80:	7123      	strb	r3, [r4, #4]
	if (vnd) {
   11b82:	4b0c      	ldr	r3, [pc, #48]	; (11bb4 <mod_init+0x68>)
   11b84:	f1b8 0f00 	cmp.w	r8, #0
   11b88:	d00e      	beq.n	11ba8 <mod_init+0x5c>
		mod->mod_idx = mod - elem->vnd_models;
   11b8a:	68f2      	ldr	r2, [r6, #12]
		mod->mod_idx = mod - elem->models;
   11b8c:	1aa2      	subs	r2, r4, r2
   11b8e:	1092      	asrs	r2, r2, #2
   11b90:	4353      	muls	r3, r2
   11b92:	b2db      	uxtb	r3, r3
   11b94:	7163      	strb	r3, [r4, #5]
	if (mod->cb && mod->cb->init) {
   11b96:	6963      	ldr	r3, [r4, #20]
   11b98:	b123      	cbz	r3, 11ba4 <mod_init+0x58>
   11b9a:	689b      	ldr	r3, [r3, #8]
   11b9c:	b113      	cbz	r3, 11ba4 <mod_init+0x58>
		*err = mod->cb->init(mod);
   11b9e:	4620      	mov	r0, r4
   11ba0:	4798      	blx	r3
   11ba2:	6028      	str	r0, [r5, #0]
}
   11ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		mod->mod_idx = mod - elem->models;
   11ba8:	68b2      	ldr	r2, [r6, #8]
   11baa:	e7ef      	b.n	11b8c <mod_init+0x40>
   11bac:	000122b1 	.word	0x000122b1
   11bb0:	20002e24 	.word	0x20002e24
   11bb4:	b6db6db7 	.word	0xb6db6db7

00011bb8 <bt_mesh_model_foreach>:
{
   11bb8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < dev_comp->elem_count; i++) {
   11bbc:	f8df a068 	ldr.w	sl, [pc, #104]	; 11c28 <bt_mesh_model_foreach+0x70>
{
   11bc0:	4607      	mov	r7, r0
   11bc2:	4688      	mov	r8, r1
	for (i = 0; i < dev_comp->elem_count; i++) {
   11bc4:	2500      	movs	r5, #0
			struct bt_mesh_model *model = &elem->models[j];
   11bc6:	f04f 091c 	mov.w	r9, #28
	for (i = 0; i < dev_comp->elem_count; i++) {
   11bca:	f8da 3000 	ldr.w	r3, [sl]
   11bce:	689a      	ldr	r2, [r3, #8]
   11bd0:	42aa      	cmp	r2, r5
   11bd2:	d802      	bhi.n	11bda <bt_mesh_model_foreach+0x22>
}
   11bd4:	b002      	add	sp, #8
   11bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
   11bda:	68dc      	ldr	r4, [r3, #12]
		for (j = 0; j < elem->model_count; j++) {
   11bdc:	2600      	movs	r6, #0
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
   11bde:	eb04 1405 	add.w	r4, r4, r5, lsl #4
		for (j = 0; j < elem->model_count; j++) {
   11be2:	7923      	ldrb	r3, [r4, #4]
   11be4:	42b3      	cmp	r3, r6
   11be6:	dc05      	bgt.n	11bf4 <bt_mesh_model_foreach+0x3c>
		for (j = 0; j < elem->vnd_model_count; j++) {
   11be8:	2600      	movs	r6, #0
   11bea:	7963      	ldrb	r3, [r4, #5]
   11bec:	42b3      	cmp	r3, r6
   11bee:	dc0e      	bgt.n	11c0e <bt_mesh_model_foreach+0x56>
	for (i = 0; i < dev_comp->elem_count; i++) {
   11bf0:	3501      	adds	r5, #1
   11bf2:	e7ea      	b.n	11bca <bt_mesh_model_foreach+0x12>
			struct bt_mesh_model *model = &elem->models[j];
   11bf4:	68a0      	ldr	r0, [r4, #8]
			func(model, elem, false, i == 0, user_data);
   11bf6:	f8cd 8000 	str.w	r8, [sp]
   11bfa:	fab5 f385 	clz	r3, r5
   11bfe:	fb09 0006 	mla	r0, r9, r6, r0
   11c02:	095b      	lsrs	r3, r3, #5
   11c04:	2200      	movs	r2, #0
   11c06:	4621      	mov	r1, r4
   11c08:	47b8      	blx	r7
		for (j = 0; j < elem->model_count; j++) {
   11c0a:	3601      	adds	r6, #1
   11c0c:	e7e9      	b.n	11be2 <bt_mesh_model_foreach+0x2a>
			struct bt_mesh_model *model = &elem->vnd_models[j];
   11c0e:	68e0      	ldr	r0, [r4, #12]
			func(model, elem, true, i == 0, user_data);
   11c10:	f8cd 8000 	str.w	r8, [sp]
   11c14:	fab5 f385 	clz	r3, r5
   11c18:	fb09 0006 	mla	r0, r9, r6, r0
   11c1c:	095b      	lsrs	r3, r3, #5
   11c1e:	2201      	movs	r2, #1
   11c20:	4621      	mov	r1, r4
   11c22:	47b8      	blx	r7
		for (j = 0; j < elem->vnd_model_count; j++) {
   11c24:	3601      	adds	r6, #1
   11c26:	e7e0      	b.n	11bea <bt_mesh_model_foreach+0x32>
   11c28:	20002e24 	.word	0x20002e24

00011c2c <bt_mesh_model_pub_period_get>:
	if (!mod->pub) {
   11c2c:	6882      	ldr	r2, [r0, #8]
   11c2e:	b302      	cbz	r2, 11c72 <bt_mesh_model_pub_period_get+0x46>
	switch (mod->pub->period >> 6) {
   11c30:	7a93      	ldrb	r3, [r2, #10]
   11c32:	0999      	lsrs	r1, r3, #6
   11c34:	2902      	cmp	r1, #2
   11c36:	d013      	beq.n	11c60 <bt_mesh_model_pub_period_get+0x34>
   11c38:	2903      	cmp	r1, #3
   11c3a:	d016      	beq.n	11c6a <bt_mesh_model_pub_period_get+0x3e>
   11c3c:	2901      	cmp	r1, #1
   11c3e:	d009      	beq.n	11c54 <bt_mesh_model_pub_period_get+0x28>
		period = (mod->pub->period & BIT_MASK(6)) * 100U;
   11c40:	2064      	movs	r0, #100	; 0x64
   11c42:	fb13 f000 	smulbb	r0, r3, r0
	if (mod->pub->fast_period) {
   11c46:	7ad3      	ldrb	r3, [r2, #11]
   11c48:	06da      	lsls	r2, r3, #27
   11c4a:	d513      	bpl.n	11c74 <bt_mesh_model_pub_period_get+0x48>
		return period >> mod->pub->period_div;
   11c4c:	f003 030f 	and.w	r3, r3, #15
   11c50:	4118      	asrs	r0, r3
   11c52:	4770      	bx	lr
		period = (mod->pub->period & BIT_MASK(6)) * MSEC_PER_SEC;
   11c54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   11c58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
		period = (mod->pub->period & BIT_MASK(6)) * 600U * MSEC_PER_SEC;
   11c5c:	4358      	muls	r0, r3
		break;
   11c5e:	e7f2      	b.n	11c46 <bt_mesh_model_pub_period_get+0x1a>
		period = (mod->pub->period & BIT_MASK(6)) * 10U * MSEC_PER_SEC;
   11c60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   11c64:	f242 7010 	movw	r0, #10000	; 0x2710
   11c68:	e7f8      	b.n	11c5c <bt_mesh_model_pub_period_get+0x30>
		period = (mod->pub->period & BIT_MASK(6)) * 600U * MSEC_PER_SEC;
   11c6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   11c6e:	4802      	ldr	r0, [pc, #8]	; (11c78 <bt_mesh_model_pub_period_get+0x4c>)
   11c70:	e7f4      	b.n	11c5c <bt_mesh_model_pub_period_get+0x30>
		return 0;
   11c72:	4610      	mov	r0, r2
}
   11c74:	4770      	bx	lr
   11c76:	bf00      	nop
   11c78:	000927c0 	.word	0x000927c0

00011c7c <publish_sent>:
{
   11c7c:	b570      	push	{r4, r5, r6, lr}
	if (mod->pub->count) {
   11c7e:	688e      	ldr	r6, [r1, #8]
   11c80:	7af3      	ldrb	r3, [r6, #11]
   11c82:	f013 0fe0 	tst.w	r3, #224	; 0xe0
{
   11c86:	460d      	mov	r5, r1
	if (mod->pub->count) {
   11c88:	d01c      	beq.n	11cc4 <publish_sent+0x48>
		delay = BT_MESH_PUB_TRANSMIT_INT(mod->pub->retransmit);
   11c8a:	7a70      	ldrb	r0, [r6, #9]
   11c8c:	08c4      	lsrs	r4, r0, #3
   11c8e:	2032      	movs	r0, #50	; 0x32
   11c90:	fb04 0000 	mla	r0, r4, r0, r0
		k_delayed_work_submit(&mod->pub->timer, K_MSEC(delay));
   11c94:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
   11c98:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   11c9c:	f240 30e7 	movw	r0, #999	; 0x3e7
   11ca0:	2100      	movs	r1, #0
   11ca2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11ca6:	2300      	movs	r3, #0
   11ca8:	fbc6 0104 	smlal	r0, r1, r6, r4
   11cac:	f7ef febe 	bl	1a2c <__aeabi_uldivmod>
   11cb0:	68ad      	ldr	r5, [r5, #8]
   11cb2:	3518      	adds	r5, #24
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   11cb4:	4602      	mov	r2, r0
   11cb6:	460b      	mov	r3, r1
   11cb8:	480d      	ldr	r0, [pc, #52]	; (11cf0 <publish_sent+0x74>)
   11cba:	4629      	mov	r1, r5
}
   11cbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11cc0:	f012 b86a 	b.w	23d98 <k_delayed_work_submit_to_queue>
	period = bt_mesh_model_pub_period_get(mod);
   11cc4:	4608      	mov	r0, r1
   11cc6:	f7ff ffb1 	bl	11c2c <bt_mesh_model_pub_period_get>
	if (!period) {
   11cca:	4604      	mov	r4, r0
   11ccc:	b170      	cbz	r0, 11cec <publish_sent+0x70>
	elapsed = k_uptime_get_32() - pub->period_start;
   11cce:	f019 f804 	bl	2acda <k_uptime_get_32>
   11cd2:	68f3      	ldr	r3, [r6, #12]
   11cd4:	1ac2      	subs	r2, r0, r3
	if (elapsed >= period) {
   11cd6:	4294      	cmp	r4, r2
   11cd8:	d805      	bhi.n	11ce6 <publish_sent+0x6a>
		BT_WARN("Publication sending took longer than the period");
   11cda:	4806      	ldr	r0, [pc, #24]	; (11cf4 <publish_sent+0x78>)
   11cdc:	2157      	movs	r1, #87	; 0x57
   11cde:	f015 f946 	bl	26f6e <printk>
		return 1;
   11ce2:	2001      	movs	r0, #1
   11ce4:	e7d6      	b.n	11c94 <publish_sent+0x18>
	return period - elapsed;
   11ce6:	441c      	add	r4, r3
	if (delay) {
   11ce8:	1a20      	subs	r0, r4, r0
   11cea:	d1d3      	bne.n	11c94 <publish_sent+0x18>
}
   11cec:	bd70      	pop	{r4, r5, r6, pc}
   11cee:	bf00      	nop
   11cf0:	20002490 	.word	0x20002490
   11cf4:	00033024 	.word	0x00033024

00011cf8 <commit_mod>:
	return err;
}

static void commit_mod(struct bt_mesh_model *mod, struct bt_mesh_elem *elem,
		       bool vnd, bool primary, void *user_data)
{
   11cf8:	b570      	push	{r4, r5, r6, lr}
	if (mod->pub && mod->pub->update &&
   11cfa:	6884      	ldr	r4, [r0, #8]
   11cfc:	b1e4      	cbz	r4, 11d38 <commit_mod+0x40>
   11cfe:	6963      	ldr	r3, [r4, #20]
   11d00:	b1d3      	cbz	r3, 11d38 <commit_mod+0x40>
   11d02:	88a3      	ldrh	r3, [r4, #4]
   11d04:	b1c3      	cbz	r3, 11d38 <commit_mod+0x40>
	    mod->pub->addr != BT_MESH_ADDR_UNASSIGNED) {
		int32_t ms = bt_mesh_model_pub_period_get(mod);
   11d06:	f7ff ff91 	bl	11c2c <bt_mesh_model_pub_period_get>

		if (ms > 0) {
   11d0a:	1e06      	subs	r6, r0, #0
   11d0c:	dd14      	ble.n	11d38 <commit_mod+0x40>
   11d0e:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   11d12:	f240 30e7 	movw	r0, #999	; 0x3e7
   11d16:	2100      	movs	r1, #0
   11d18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11d1c:	2300      	movs	r3, #0
   11d1e:	fbc5 0106 	smlal	r0, r1, r5, r6
   11d22:	f7ef fe83 	bl	1a2c <__aeabi_uldivmod>
   11d26:	4602      	mov	r2, r0
   11d28:	460b      	mov	r3, r1
   11d2a:	4804      	ldr	r0, [pc, #16]	; (11d3c <commit_mod+0x44>)
   11d2c:	f104 0118 	add.w	r1, r4, #24
	for (int i = 0; i < ARRAY_SIZE(mod->groups); i++) {
		if (mod->groups[i] != BT_MESH_ADDR_UNASSIGNED) {
			bt_mesh_lpn_group_add(mod->groups[i]);
		}
	}
}
   11d30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11d34:	f012 b830 	b.w	23d98 <k_delayed_work_submit_to_queue>
   11d38:	bd70      	pop	{r4, r5, r6, pc}
   11d3a:	bf00      	nop
   11d3c:	20002490 	.word	0x20002490

00011d40 <bt_mesh_model_elem>:
	return &dev_comp->elem[mod->elem_idx];
   11d40:	4b03      	ldr	r3, [pc, #12]	; (11d50 <bt_mesh_model_elem+0x10>)
   11d42:	7900      	ldrb	r0, [r0, #4]
   11d44:	681b      	ldr	r3, [r3, #0]
   11d46:	68db      	ldr	r3, [r3, #12]
}
   11d48:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   11d4c:	4770      	bx	lr
   11d4e:	bf00      	nop
   11d50:	20002e24 	.word	0x20002e24

00011d54 <bt_mesh_model_get>:
{
   11d54:	b538      	push	{r3, r4, r5, lr}
	if (elem_idx >= dev_comp->elem_count) {
   11d56:	4b13      	ldr	r3, [pc, #76]	; (11da4 <bt_mesh_model_get+0x50>)
   11d58:	681b      	ldr	r3, [r3, #0]
   11d5a:	689d      	ldr	r5, [r3, #8]
   11d5c:	42a9      	cmp	r1, r5
{
   11d5e:	4604      	mov	r4, r0
	if (elem_idx >= dev_comp->elem_count) {
   11d60:	d306      	bcc.n	11d70 <bt_mesh_model_get+0x1c>
		BT_ERR("Invalid element index %u", elem_idx);
   11d62:	4811      	ldr	r0, [pc, #68]	; (11da8 <bt_mesh_model_get+0x54>)
   11d64:	460a      	mov	r2, r1
   11d66:	2145      	movs	r1, #69	; 0x45
   11d68:	f015 f901 	bl	26f6e <printk>
		return NULL;
   11d6c:	2000      	movs	r0, #0
}
   11d6e:	bd38      	pop	{r3, r4, r5, pc}
	elem = &dev_comp->elem[elem_idx];
   11d70:	68db      	ldr	r3, [r3, #12]
   11d72:	eb03 1101 	add.w	r1, r3, r1, lsl #4
	if (vnd) {
   11d76:	b15c      	cbz	r4, 11d90 <bt_mesh_model_get+0x3c>
		if (mod_idx >= elem->vnd_model_count) {
   11d78:	794b      	ldrb	r3, [r1, #5]
   11d7a:	4293      	cmp	r3, r2
   11d7c:	d802      	bhi.n	11d84 <bt_mesh_model_get+0x30>
			BT_ERR("Invalid vendor model index %u", mod_idx);
   11d7e:	2145      	movs	r1, #69	; 0x45
   11d80:	480a      	ldr	r0, [pc, #40]	; (11dac <bt_mesh_model_get+0x58>)
   11d82:	e7f1      	b.n	11d68 <bt_mesh_model_get+0x14>
		return &elem->vnd_models[mod_idx];
   11d84:	68c8      	ldr	r0, [r1, #12]
   11d86:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
		return &elem->models[mod_idx];
   11d8a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   11d8e:	e7ee      	b.n	11d6e <bt_mesh_model_get+0x1a>
		if (mod_idx >= elem->model_count) {
   11d90:	790b      	ldrb	r3, [r1, #4]
   11d92:	4293      	cmp	r3, r2
   11d94:	d802      	bhi.n	11d9c <bt_mesh_model_get+0x48>
			BT_ERR("Invalid SIG model index %u", mod_idx);
   11d96:	2145      	movs	r1, #69	; 0x45
   11d98:	4805      	ldr	r0, [pc, #20]	; (11db0 <bt_mesh_model_get+0x5c>)
   11d9a:	e7e5      	b.n	11d68 <bt_mesh_model_get+0x14>
		return &elem->models[mod_idx];
   11d9c:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
   11da0:	6888      	ldr	r0, [r1, #8]
   11da2:	e7f2      	b.n	11d8a <bt_mesh_model_get+0x36>
   11da4:	20002e24 	.word	0x20002e24
   11da8:	00032ce3 	.word	0x00032ce3
   11dac:	00032d01 	.word	0x00032d01
   11db0:	00032d24 	.word	0x00032d24

00011db4 <mod_set>:
{
   11db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11db8:	b086      	sub	sp, #24
   11dba:	4605      	mov	r5, r0
   11dbc:	4616      	mov	r6, r2
   11dbe:	461f      	mov	r7, r3
   11dc0:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
	if (!name) {
   11dc4:	4689      	mov	r9, r1
   11dc6:	b931      	cbnz	r1, 11dd6 <mod_set+0x22>
		BT_ERR("Insufficient number of arguments");
   11dc8:	2145      	movs	r1, #69	; 0x45
   11dca:	485a      	ldr	r0, [pc, #360]	; (11f34 <mod_set+0x180>)
   11dcc:	f015 f8cf 	bl	26f6e <printk>
	return -ENOENT;
   11dd0:	f06f 0401 	mvn.w	r4, #1
   11dd4:	e027      	b.n	11e26 <mod_set+0x72>
	mod_key = strtol(name, NULL, 16);
   11dd6:	2210      	movs	r2, #16
   11dd8:	2100      	movs	r1, #0
   11dda:	4648      	mov	r0, r9
   11ddc:	f014 fa5c 	bl	26298 <strtol>
	elem_idx = mod_key >> 8;
   11de0:	f3c0 2a07 	ubfx	sl, r0, #8, #8
	mod = bt_mesh_model_get(vnd, elem_idx, mod_idx);
   11de4:	b2c4      	uxtb	r4, r0
   11de6:	4622      	mov	r2, r4
   11de8:	4628      	mov	r0, r5
   11dea:	4651      	mov	r1, sl
   11dec:	f7ff ffb2 	bl	11d54 <bt_mesh_model_get>
	if (!mod) {
   11df0:	4605      	mov	r5, r0
   11df2:	b930      	cbnz	r0, 11e02 <mod_set+0x4e>
		BT_ERR("Failed to get model for elem_idx %u mod_idx %u",
   11df4:	4623      	mov	r3, r4
   11df6:	4652      	mov	r2, sl
   11df8:	2145      	movs	r1, #69	; 0x45
   11dfa:	484f      	ldr	r0, [pc, #316]	; (11f38 <mod_set+0x184>)
   11dfc:	f015 f8b7 	bl	26f6e <printk>
		return -ENOENT;
   11e00:	e7e6      	b.n	11dd0 <mod_set+0x1c>
	len = settings_name_next(name, &next);
   11e02:	4648      	mov	r0, r9
   11e04:	a903      	add	r1, sp, #12
   11e06:	f015 fcdf 	bl	277c8 <settings_name_next>
   11e0a:	4681      	mov	r9, r0
	if (!next) {
   11e0c:	9803      	ldr	r0, [sp, #12]
   11e0e:	2800      	cmp	r0, #0
   11e10:	d0da      	beq.n	11dc8 <mod_set+0x14>
	if (!strncmp(next, "bind", len)) {
   11e12:	464a      	mov	r2, r9
   11e14:	4949      	ldr	r1, [pc, #292]	; (11f3c <mod_set+0x188>)
   11e16:	f01b fd47 	bl	2d8a8 <strncmp>
   11e1a:	b9a8      	cbnz	r0, 11e48 <mod_set+0x94>
		mod->keys[i] = BT_MESH_KEY_UNUSED;
   11e1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   11e20:	81ab      	strh	r3, [r5, #12]
	if (len_rd == 0) {
   11e22:	b926      	cbnz	r6, 11e2e <mod_set+0x7a>
		return 0;
   11e24:	2400      	movs	r4, #0
}
   11e26:	4620      	mov	r0, r4
   11e28:	b006      	add	sp, #24
   11e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	len = read_cb(cb_arg, mod->keys, sizeof(mod->keys));
   11e2e:	2202      	movs	r2, #2
   11e30:	f105 010c 	add.w	r1, r5, #12
	len = read_cb(cb_arg, mod->groups, sizeof(mod->groups));
   11e34:	4640      	mov	r0, r8
   11e36:	47b8      	blx	r7
	if (len < 0) {
   11e38:	1e04      	subs	r4, r0, #0
   11e3a:	daf3      	bge.n	11e24 <mod_set+0x70>
		BT_ERR("Failed to read value (err %zd)", len);
   11e3c:	4622      	mov	r2, r4
   11e3e:	2145      	movs	r1, #69	; 0x45
   11e40:	483f      	ldr	r0, [pc, #252]	; (11f40 <mod_set+0x18c>)
   11e42:	f015 f894 	bl	26f6e <printk>
		return len;
   11e46:	e7ee      	b.n	11e26 <mod_set+0x72>
	if (!strncmp(next, "sub", len)) {
   11e48:	464a      	mov	r2, r9
   11e4a:	493e      	ldr	r1, [pc, #248]	; (11f44 <mod_set+0x190>)
   11e4c:	9803      	ldr	r0, [sp, #12]
   11e4e:	f01b fd2b 	bl	2d8a8 <strncmp>
   11e52:	b930      	cbnz	r0, 11e62 <mod_set+0xae>
	(void)memset(mod->groups, 0, sizeof(mod->groups));
   11e54:	f105 010e 	add.w	r1, r5, #14
__ssp_bos_icheck3(memset, void *, int)
   11e58:	81e8      	strh	r0, [r5, #14]
	if (len_rd == 0) {
   11e5a:	2e00      	cmp	r6, #0
   11e5c:	d0e2      	beq.n	11e24 <mod_set+0x70>
	len = read_cb(cb_arg, mod->groups, sizeof(mod->groups));
   11e5e:	2202      	movs	r2, #2
   11e60:	e7e8      	b.n	11e34 <mod_set+0x80>
	if (!strncmp(next, "pub", len)) {
   11e62:	464a      	mov	r2, r9
   11e64:	4938      	ldr	r1, [pc, #224]	; (11f48 <mod_set+0x194>)
   11e66:	9803      	ldr	r0, [sp, #12]
   11e68:	f01b fd1e 	bl	2d8a8 <strncmp>
   11e6c:	4604      	mov	r4, r0
   11e6e:	2800      	cmp	r0, #0
   11e70:	d13d      	bne.n	11eee <mod_set+0x13a>
	if (!mod->pub) {
   11e72:	68ab      	ldr	r3, [r5, #8]
   11e74:	b933      	cbnz	r3, 11e84 <mod_set+0xd0>
		BT_WARN("Model has no publication context!");
   11e76:	2157      	movs	r1, #87	; 0x57
   11e78:	4834      	ldr	r0, [pc, #208]	; (11f4c <mod_set+0x198>)
   11e7a:	f015 f878 	bl	26f6e <printk>
		return -EINVAL;
   11e7e:	f06f 0415 	mvn.w	r4, #21
   11e82:	e7d0      	b.n	11e26 <mod_set+0x72>
	if (len_rd == 0) {
   11e84:	b946      	cbnz	r6, 11e98 <mod_set+0xe4>
		mod->pub->addr = BT_MESH_ADDR_UNASSIGNED;
   11e86:	685a      	ldr	r2, [r3, #4]
   11e88:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
   11e8c:	605a      	str	r2, [r3, #4]
		mod->pub->ttl = 0U;
   11e8e:	689a      	ldr	r2, [r3, #8]
   11e90:	f002 52f8 	and.w	r2, r2, #520093696	; 0x1f000000
   11e94:	609a      	str	r2, [r3, #8]
		return 0;
   11e96:	e7c6      	b.n	11e26 <mod_set+0x72>
	err = bt_mesh_settings_set(read_cb, cb_arg, &pub, sizeof(pub));
   11e98:	2308      	movs	r3, #8
   11e9a:	aa04      	add	r2, sp, #16
   11e9c:	4641      	mov	r1, r8
   11e9e:	4638      	mov	r0, r7
   11ea0:	f002 fbca 	bl	14638 <bt_mesh_settings_set>
	if (err) {
   11ea4:	4604      	mov	r4, r0
   11ea6:	b120      	cbz	r0, 11eb2 <mod_set+0xfe>
		BT_ERR("Failed to set \'model-pub\'");
   11ea8:	2145      	movs	r1, #69	; 0x45
   11eaa:	4829      	ldr	r0, [pc, #164]	; (11f50 <mod_set+0x19c>)
   11eac:	f015 f85f 	bl	26f6e <printk>
		return err;
   11eb0:	e7b9      	b.n	11e26 <mod_set+0x72>
	mod->pub->addr = pub.addr;
   11eb2:	68ab      	ldr	r3, [r5, #8]
   11eb4:	f8bd 2010 	ldrh.w	r2, [sp, #16]
	mod->pub->key = pub.key;
   11eb8:	f8bd 1012 	ldrh.w	r1, [sp, #18]
	mod->pub->addr = pub.addr;
   11ebc:	809a      	strh	r2, [r3, #4]
	mod->pub->key = pub.key;
   11ebe:	88da      	ldrh	r2, [r3, #6]
   11ec0:	f361 020b 	bfi	r2, r1, #0, #12
	mod->pub->cred = pub.cred;
   11ec4:	f89d 1017 	ldrb.w	r1, [sp, #23]
	mod->pub->key = pub.key;
   11ec8:	80da      	strh	r2, [r3, #6]
	mod->pub->cred = pub.cred;
   11eca:	f3c1 1100 	ubfx	r1, r1, #4, #1
   11ece:	f3c2 2207 	ubfx	r2, r2, #8, #8
   11ed2:	f361 1204 	bfi	r2, r1, #4, #1
   11ed6:	71da      	strb	r2, [r3, #7]
	mod->pub->period = pub.period;
   11ed8:	f89d 2016 	ldrb.w	r2, [sp, #22]
	mod->pub->ttl = pub.ttl;
   11edc:	f8bd 1014 	ldrh.w	r1, [sp, #20]
	mod->pub->period = pub.period;
   11ee0:	729a      	strb	r2, [r3, #10]
	mod->pub->count = 0U;
   11ee2:	7ada      	ldrb	r2, [r3, #11]
	mod->pub->ttl = pub.ttl;
   11ee4:	8119      	strh	r1, [r3, #8]
	mod->pub->count = 0U;
   11ee6:	f360 1247 	bfi	r2, r0, #5, #3
   11eea:	72da      	strb	r2, [r3, #11]
		return mod_set_pub(mod, len_rd, read_cb, cb_arg);
   11eec:	e79b      	b.n	11e26 <mod_set+0x72>
	if (!strncmp(next, "data", len)) {
   11eee:	464a      	mov	r2, r9
   11ef0:	4918      	ldr	r1, [pc, #96]	; (11f54 <mod_set+0x1a0>)
   11ef2:	9803      	ldr	r0, [sp, #12]
   11ef4:	f01b fcd8 	bl	2d8a8 <strncmp>
   11ef8:	4604      	mov	r4, r0
   11efa:	b9a0      	cbnz	r0, 11f26 <mod_set+0x172>
	settings_name_next(name, &next);
   11efc:	a904      	add	r1, sp, #16
   11efe:	9803      	ldr	r0, [sp, #12]
   11f00:	f015 fc62 	bl	277c8 <settings_name_next>
	if (mod->cb && mod->cb->settings_set) {
   11f04:	696b      	ldr	r3, [r5, #20]
   11f06:	2b00      	cmp	r3, #0
   11f08:	d08d      	beq.n	11e26 <mod_set+0x72>
   11f0a:	f8d3 9000 	ldr.w	r9, [r3]
   11f0e:	f1b9 0f00 	cmp.w	r9, #0
   11f12:	d088      	beq.n	11e26 <mod_set+0x72>
		return mod->cb->settings_set(mod, next, len_rd,
   11f14:	f8cd 8000 	str.w	r8, [sp]
   11f18:	463b      	mov	r3, r7
   11f1a:	4632      	mov	r2, r6
   11f1c:	9904      	ldr	r1, [sp, #16]
   11f1e:	4628      	mov	r0, r5
   11f20:	47c8      	blx	r9
   11f22:	4604      	mov	r4, r0
		return mod_data_set(mod, next, len_rd, read_cb, cb_arg);
   11f24:	e77f      	b.n	11e26 <mod_set+0x72>
	BT_WARN("Unknown module key %s", next);
   11f26:	9a03      	ldr	r2, [sp, #12]
   11f28:	480b      	ldr	r0, [pc, #44]	; (11f58 <mod_set+0x1a4>)
   11f2a:	2157      	movs	r1, #87	; 0x57
   11f2c:	f015 f81f 	bl	26f6e <printk>
   11f30:	e74e      	b.n	11dd0 <mod_set+0x1c>
   11f32:	bf00      	nop
   11f34:	000307a1 	.word	0x000307a1
   11f38:	00032ede 	.word	0x00032ede
   11f3c:	00033078 	.word	0x00033078
   11f40:	00032f12 	.word	0x00032f12
   11f44:	0003309b 	.word	0x0003309b
   11f48:	0003309f 	.word	0x0003309f
   11f4c:	00032f36 	.word	0x00032f36
   11f50:	00032f5d 	.word	0x00032f5d
   11f54:	00032f7c 	.word	0x00032f7c
   11f58:	00032f81 	.word	0x00032f81

00011f5c <bt_mesh_comp_register>:
	if (!comp->elem_count) {
   11f5c:	6883      	ldr	r3, [r0, #8]
{
   11f5e:	b507      	push	{r0, r1, r2, lr}
	if (!comp->elem_count) {
   11f60:	b15b      	cbz	r3, 11f7a <bt_mesh_comp_register+0x1e>
	dev_comp = comp;
   11f62:	4b07      	ldr	r3, [pc, #28]	; (11f80 <bt_mesh_comp_register+0x24>)
	bt_mesh_model_foreach(mod_init, &err);
   11f64:	a901      	add	r1, sp, #4
	dev_comp = comp;
   11f66:	6018      	str	r0, [r3, #0]
	err = 0;
   11f68:	2300      	movs	r3, #0
	bt_mesh_model_foreach(mod_init, &err);
   11f6a:	4806      	ldr	r0, [pc, #24]	; (11f84 <bt_mesh_comp_register+0x28>)
	err = 0;
   11f6c:	9301      	str	r3, [sp, #4]
	bt_mesh_model_foreach(mod_init, &err);
   11f6e:	f7ff fe23 	bl	11bb8 <bt_mesh_model_foreach>
	return err;
   11f72:	9801      	ldr	r0, [sp, #4]
}
   11f74:	b003      	add	sp, #12
   11f76:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
   11f7a:	f06f 0015 	mvn.w	r0, #21
   11f7e:	e7f9      	b.n	11f74 <bt_mesh_comp_register+0x18>
   11f80:	20002e24 	.word	0x20002e24
   11f84:	00011b4d 	.word	0x00011b4d

00011f88 <bt_mesh_comp_provision>:
	dev_primary_addr = addr;
   11f88:	4b08      	ldr	r3, [pc, #32]	; (11fac <bt_mesh_comp_provision+0x24>)
{
   11f8a:	b570      	push	{r4, r5, r6, lr}
	dev_primary_addr = addr;
   11f8c:	8018      	strh	r0, [r3, #0]
	for (i = 0; i < dev_comp->elem_count; i++) {
   11f8e:	4b08      	ldr	r3, [pc, #32]	; (11fb0 <bt_mesh_comp_provision+0x28>)
   11f90:	6819      	ldr	r1, [r3, #0]
   11f92:	688c      	ldr	r4, [r1, #8]
   11f94:	2300      	movs	r3, #0
   11f96:	18c2      	adds	r2, r0, r3
   11f98:	42a3      	cmp	r3, r4
   11f9a:	b292      	uxth	r2, r2
   11f9c:	d100      	bne.n	11fa0 <bt_mesh_comp_provision+0x18>
}
   11f9e:	bd70      	pop	{r4, r5, r6, pc}
		elem->addr = addr++;
   11fa0:	011d      	lsls	r5, r3, #4
   11fa2:	68ce      	ldr	r6, [r1, #12]
	for (i = 0; i < dev_comp->elem_count; i++) {
   11fa4:	3301      	adds	r3, #1
		elem->addr = addr++;
   11fa6:	5372      	strh	r2, [r6, r5]
		BT_DBG("addr 0x%04x mod_count %u vnd_mod_count %u",
   11fa8:	e7f5      	b.n	11f96 <bt_mesh_comp_provision+0xe>
   11faa:	bf00      	nop
   11fac:	200046c6 	.word	0x200046c6
   11fb0:	20002e24 	.word	0x20002e24

00011fb4 <bt_mesh_comp_unprovision>:
	dev_primary_addr = BT_MESH_ADDR_UNASSIGNED;
   11fb4:	4b01      	ldr	r3, [pc, #4]	; (11fbc <bt_mesh_comp_unprovision+0x8>)
   11fb6:	2200      	movs	r2, #0
   11fb8:	801a      	strh	r2, [r3, #0]
}
   11fba:	4770      	bx	lr
   11fbc:	200046c6 	.word	0x200046c6

00011fc0 <bt_mesh_primary_addr>:
}
   11fc0:	4b01      	ldr	r3, [pc, #4]	; (11fc8 <bt_mesh_primary_addr+0x8>)
   11fc2:	8818      	ldrh	r0, [r3, #0]
   11fc4:	4770      	bx	lr
   11fc6:	bf00      	nop
   11fc8:	200046c6 	.word	0x200046c6

00011fcc <bt_mesh_elem_find>:
	if (BT_MESH_ADDR_IS_UNICAST(addr)) {
   11fcc:	4b1b      	ldr	r3, [pc, #108]	; (1203c <bt_mesh_elem_find+0x70>)
{
   11fce:	b5f0      	push	{r4, r5, r6, r7, lr}
   11fd0:	681d      	ldr	r5, [r3, #0]
	if (BT_MESH_ADDR_IS_UNICAST(addr)) {
   11fd2:	b203      	sxth	r3, r0
   11fd4:	2b00      	cmp	r3, #0
{
   11fd6:	4604      	mov	r4, r0
   11fd8:	68ae      	ldr	r6, [r5, #8]
	if (BT_MESH_ADDR_IS_UNICAST(addr)) {
   11fda:	dd27      	ble.n	1202c <bt_mesh_elem_find+0x60>
		index = (addr - dev_comp->elem[0].addr);
   11fdc:	68ea      	ldr	r2, [r5, #12]
   11fde:	8813      	ldrh	r3, [r2, #0]
   11fe0:	1ac0      	subs	r0, r0, r3
		if (index < dev_comp->elem_count) {
   11fe2:	b280      	uxth	r0, r0
   11fe4:	42b0      	cmp	r0, r6
   11fe6:	d226      	bcs.n	12036 <bt_mesh_elem_find+0x6a>
			return &dev_comp->elem[index];
   11fe8:	eb02 1000 	add.w	r0, r2, r0, lsl #4
}
   11fec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		struct bt_mesh_elem *elem = &dev_comp->elem[index];
   11fee:	68e8      	ldr	r0, [r5, #12]
   11ff0:	eb00 1002 	add.w	r0, r0, r2, lsl #4
	for (i = 0; i < elem->model_count; i++) {
   11ff4:	2200      	movs	r2, #0
   11ff6:	f890 c004 	ldrb.w	ip, [r0, #4]
   11ffa:	4562      	cmp	r2, ip
   11ffc:	db06      	blt.n	1200c <bt_mesh_elem_find+0x40>
	for (i = 0; i < elem->vnd_model_count; i++) {
   11ffe:	f890 c005 	ldrb.w	ip, [r0, #5]
   12002:	2200      	movs	r2, #0
   12004:	4562      	cmp	r2, ip
   12006:	db09      	blt.n	1201c <bt_mesh_elem_find+0x50>
   12008:	3301      	adds	r3, #1
   1200a:	e011      	b.n	12030 <bt_mesh_elem_find+0x64>
		if (mod->groups[i] == addr) {
   1200c:	6881      	ldr	r1, [r0, #8]
   1200e:	fb07 1102 	mla	r1, r7, r2, r1
   12012:	89c9      	ldrh	r1, [r1, #14]
   12014:	42a1      	cmp	r1, r4
   12016:	d0e9      	beq.n	11fec <bt_mesh_elem_find+0x20>
	for (i = 0; i < elem->model_count; i++) {
   12018:	3201      	adds	r2, #1
   1201a:	e7ee      	b.n	11ffa <bt_mesh_elem_find+0x2e>
		if (mod->groups[i] == addr) {
   1201c:	68c1      	ldr	r1, [r0, #12]
   1201e:	fb07 1102 	mla	r1, r7, r2, r1
   12022:	89c9      	ldrh	r1, [r1, #14]
   12024:	42a1      	cmp	r1, r4
   12026:	d0e1      	beq.n	11fec <bt_mesh_elem_find+0x20>
	for (i = 0; i < elem->vnd_model_count; i++) {
   12028:	3201      	adds	r2, #1
   1202a:	e7eb      	b.n	12004 <bt_mesh_elem_find+0x38>
   1202c:	2300      	movs	r3, #0
		if (mod->groups[i] == addr) {
   1202e:	271c      	movs	r7, #28
   12030:	b29a      	uxth	r2, r3
	for (index = 0; index < dev_comp->elem_count; index++) {
   12032:	42b2      	cmp	r2, r6
   12034:	d3db      	bcc.n	11fee <bt_mesh_elem_find+0x22>
			return NULL;
   12036:	2000      	movs	r0, #0
   12038:	e7d8      	b.n	11fec <bt_mesh_elem_find+0x20>
   1203a:	bf00      	nop
   1203c:	20002e24 	.word	0x20002e24

00012040 <bt_mesh_elem_count>:
	return dev_comp->elem_count;
   12040:	4b01      	ldr	r3, [pc, #4]	; (12048 <bt_mesh_elem_count+0x8>)
   12042:	681b      	ldr	r3, [r3, #0]
}
   12044:	7a18      	ldrb	r0, [r3, #8]
   12046:	4770      	bx	lr
   12048:	20002e24 	.word	0x20002e24

0001204c <bt_mesh_model_recv>:
{
   1204c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (buf->data[0] >> 6) {
   12050:	680b      	ldr	r3, [r1, #0]
   12052:	781b      	ldrb	r3, [r3, #0]
   12054:	099a      	lsrs	r2, r3, #6
   12056:	2a02      	cmp	r2, #2
{
   12058:	b085      	sub	sp, #20
   1205a:	4680      	mov	r8, r0
   1205c:	460c      	mov	r4, r1
	switch (buf->data[0] >> 6) {
   1205e:	d01e      	beq.n	1209e <bt_mesh_model_recv+0x52>
   12060:	2a03      	cmp	r2, #3
   12062:	d026      	beq.n	120b2 <bt_mesh_model_recv+0x66>
		if (buf->data[0] == 0x7f) {
   12064:	2b7f      	cmp	r3, #127	; 0x7f
   12066:	d10a      	bne.n	1207e <bt_mesh_model_recv+0x32>
			BT_ERR("Ignoring RFU OpCode");
   12068:	4850      	ldr	r0, [pc, #320]	; (121ac <bt_mesh_model_recv+0x160>)
   1206a:	2145      	movs	r1, #69	; 0x45
			BT_ERR("Too short payload for 2-octet OpCode");
   1206c:	f014 ff7f 	bl	26f6e <printk>
		BT_WARN("Unable to decode OpCode");
   12070:	484f      	ldr	r0, [pc, #316]	; (121b0 <bt_mesh_model_recv+0x164>)
   12072:	2157      	movs	r1, #87	; 0x57
}
   12074:	b005      	add	sp, #20
   12076:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		BT_WARN("Unable to decode OpCode");
   1207a:	f014 bf78 	b.w	26f6e <printk>
		*opcode = net_buf_simple_pull_u8(buf);
   1207e:	4608      	mov	r0, r1
   12080:	f01a fc69 	bl	2c956 <net_buf_simple_pull_u8>
		*opcode = net_buf_simple_pull_be16(buf);
   12084:	4606      	mov	r6, r0
		op->func(model, &rx->ctx, buf);
   12086:	f108 0304 	add.w	r3, r8, #4
	for (i = 0; i < dev_comp->elem_count; i++) {
   1208a:	2700      	movs	r7, #0
		op->func(model, &rx->ctx, buf);
   1208c:	9301      	str	r3, [sp, #4]
	for (i = 0; i < dev_comp->elem_count; i++) {
   1208e:	4b49      	ldr	r3, [pc, #292]	; (121b4 <bt_mesh_model_recv+0x168>)
   12090:	681b      	ldr	r3, [r3, #0]
   12092:	689a      	ldr	r2, [r3, #8]
   12094:	42ba      	cmp	r2, r7
   12096:	d81c      	bhi.n	120d2 <bt_mesh_model_recv+0x86>
}
   12098:	b005      	add	sp, #20
   1209a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (buf->len < 2) {
   1209e:	888b      	ldrh	r3, [r1, #4]
   120a0:	2b01      	cmp	r3, #1
   120a2:	d802      	bhi.n	120aa <bt_mesh_model_recv+0x5e>
			BT_ERR("Too short payload for 2-octet OpCode");
   120a4:	2145      	movs	r1, #69	; 0x45
   120a6:	4844      	ldr	r0, [pc, #272]	; (121b8 <bt_mesh_model_recv+0x16c>)
   120a8:	e7e0      	b.n	1206c <bt_mesh_model_recv+0x20>
		*opcode = net_buf_simple_pull_be16(buf);
   120aa:	4608      	mov	r0, r1
   120ac:	f01a fc63 	bl	2c976 <net_buf_simple_pull_be16>
   120b0:	e7e8      	b.n	12084 <bt_mesh_model_recv+0x38>
		if (buf->len < 3) {
   120b2:	888b      	ldrh	r3, [r1, #4]
   120b4:	2b02      	cmp	r3, #2
   120b6:	d802      	bhi.n	120be <bt_mesh_model_recv+0x72>
			BT_ERR("Too short payload for 3-octet OpCode");
   120b8:	2145      	movs	r1, #69	; 0x45
   120ba:	4840      	ldr	r0, [pc, #256]	; (121bc <bt_mesh_model_recv+0x170>)
   120bc:	e7d6      	b.n	1206c <bt_mesh_model_recv+0x20>
		*opcode = net_buf_simple_pull_u8(buf) << 16;
   120be:	4608      	mov	r0, r1
   120c0:	f01a fc49 	bl	2c956 <net_buf_simple_pull_u8>
   120c4:	4606      	mov	r6, r0
		*opcode |= net_buf_simple_pull_le16(buf);
   120c6:	4620      	mov	r0, r4
   120c8:	f01a fc4d 	bl	2c966 <net_buf_simple_pull_le16>
   120cc:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
		return 0;
   120d0:	e7d9      	b.n	12086 <bt_mesh_model_recv+0x3a>
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
   120d2:	68d8      	ldr	r0, [r3, #12]
   120d4:	eb00 1307 	add.w	r3, r0, r7, lsl #4
			models = elem->vnd_models;
   120d8:	e9d3 2502 	ldrd	r2, r5, [r3, #8]
		if (BT_MESH_MODEL_OP_LEN(opcode) < 3) {
   120dc:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
			count = elem->model_count;
   120e0:	bf36      	itet	cc
   120e2:	f893 c004 	ldrbcc.w	ip, [r3, #4]
			count = elem->vnd_model_count;
   120e6:	f893 c005 	ldrbcs.w	ip, [r3, #5]
			models = elem->models;
   120ea:	4615      	movcc	r5, r2
   120ec:	2100      	movs	r1, #0
	for (i = 0U; i < model_count; i++) {
   120ee:	b2cb      	uxtb	r3, r1
   120f0:	4563      	cmp	r3, ip
   120f2:	d301      	bcc.n	120f8 <bt_mesh_model_recv+0xac>
	for (i = 0; i < dev_comp->elem_count; i++) {
   120f4:	3701      	adds	r7, #1
   120f6:	e7ca      	b.n	1208e <bt_mesh_model_recv+0x42>
		for (op = (*model)->op; op->func; op++) {
   120f8:	f8d5 a010 	ldr.w	sl, [r5, #16]
   120fc:	f8da 2008 	ldr.w	r2, [sl, #8]
   12100:	b912      	cbnz	r2, 12108 <bt_mesh_model_recv+0xbc>
   12102:	3101      	adds	r1, #1
   12104:	351c      	adds	r5, #28
   12106:	e7f2      	b.n	120ee <bt_mesh_model_recv+0xa2>
			if (op->opcode == opcode) {
   12108:	f8da 2000 	ldr.w	r2, [sl]
   1210c:	42b2      	cmp	r2, r6
   1210e:	d026      	beq.n	1215e <bt_mesh_model_recv+0x112>
		for (op = (*model)->op; op->func; op++) {
   12110:	f10a 0a0c 	add.w	sl, sl, #12
   12114:	e7f2      	b.n	120fc <bt_mesh_model_recv+0xb0>
	} else if (BT_MESH_ADDR_IS_GROUP(dst) || BT_MESH_ADDR_IS_VIRTUAL(dst)) {
   12116:	f481 4200 	eor.w	r2, r1, #32768	; 0x8000
   1211a:	f5b2 4ffe 	cmp.w	r2, #32512	; 0x7f00
   1211e:	d806      	bhi.n	1212e <bt_mesh_model_recv+0xe2>
		return !!bt_mesh_model_find_group(&mod, dst);
   12120:	a803      	add	r0, sp, #12
   12122:	f018 fdfd 	bl	2ad20 <bt_mesh_model_find_group>
   12126:	3000      	adds	r0, #0
   12128:	bf18      	it	ne
   1212a:	2001      	movne	r0, #1
   1212c:	e030      	b.n	12190 <bt_mesh_model_recv+0x144>
	return mod->elem_idx == 0;
   1212e:	7928      	ldrb	r0, [r5, #4]
   12130:	fab0 f080 	clz	r0, r0
   12134:	0940      	lsrs	r0, r0, #5
   12136:	e02b      	b.n	12190 <bt_mesh_model_recv+0x144>
	state->offset = net_buf_simple_headroom(buf);
   12138:	4620      	mov	r0, r4
   1213a:	f01a fc46 	bl	2c9ca <net_buf_simple_headroom>
		op->func(model, &rx->ctx, buf);
   1213e:	f8da 3008 	ldr.w	r3, [sl, #8]
   12142:	9901      	ldr	r1, [sp, #4]
	state->len = buf->len;
   12144:	f8b4 b004 	ldrh.w	fp, [r4, #4]
	state->offset = net_buf_simple_headroom(buf);
   12148:	4681      	mov	r9, r0
   1214a:	4622      	mov	r2, r4
   1214c:	4628      	mov	r0, r5
   1214e:	4798      	blx	r3
	buf->data = buf->__buf + state->offset;
   12150:	68a3      	ldr	r3, [r4, #8]
	buf->len = state->len;
   12152:	f8a4 b004 	strh.w	fp, [r4, #4]
	buf->data = buf->__buf + state->offset;
   12156:	fa13 f389 	uxtah	r3, r3, r9
   1215a:	6023      	str	r3, [r4, #0]
	buf->len = state->len;
   1215c:	e7ca      	b.n	120f4 <bt_mesh_model_recv+0xa8>
		if (!model_has_key(model, rx->ctx.app_idx)) {
   1215e:	f8b8 2006 	ldrh.w	r2, [r8, #6]
		if (mod->keys[i] == key ||
   12162:	89a9      	ldrh	r1, [r5, #12]
   12164:	428a      	cmp	r2, r1
   12166:	d007      	beq.n	12178 <bt_mesh_model_recv+0x12c>
   12168:	f64f 7cfc 	movw	ip, #65532	; 0xfffc
   1216c:	4561      	cmp	r1, ip
   1216e:	d1c1      	bne.n	120f4 <bt_mesh_model_recv+0xa8>
		     BT_MESH_IS_DEV_KEY(key))) {
   12170:	3203      	adds	r2, #3
		    (mod->keys[i] == BT_MESH_KEY_DEV_ANY &&
   12172:	b292      	uxth	r2, r2
   12174:	2a01      	cmp	r2, #1
   12176:	d8bd      	bhi.n	120f4 <bt_mesh_model_recv+0xa8>
		if (!model_has_dst(model, rx->ctx.recv_dst)) {
   12178:	f8b8 100a 	ldrh.w	r1, [r8, #10]
   1217c:	9503      	str	r5, [sp, #12]
	if (BT_MESH_ADDR_IS_UNICAST(dst)) {
   1217e:	b20a      	sxth	r2, r1
   12180:	2a00      	cmp	r2, #0
   12182:	ddc8      	ble.n	12116 <bt_mesh_model_recv+0xca>
		return (dev_comp->elem[mod->elem_idx].addr == dst);
   12184:	792a      	ldrb	r2, [r5, #4]
   12186:	0112      	lsls	r2, r2, #4
   12188:	5a80      	ldrh	r0, [r0, r2]
   1218a:	1a43      	subs	r3, r0, r1
   1218c:	4258      	negs	r0, r3
   1218e:	4158      	adcs	r0, r3
		if (!model_has_dst(model, rx->ctx.recv_dst)) {
   12190:	2800      	cmp	r0, #0
   12192:	d0af      	beq.n	120f4 <bt_mesh_model_recv+0xa8>
		if (buf->len < op->min_len) {
   12194:	88a1      	ldrh	r1, [r4, #4]
   12196:	f8da 2004 	ldr.w	r2, [sl, #4]
   1219a:	4291      	cmp	r1, r2
   1219c:	d2cc      	bcs.n	12138 <bt_mesh_model_recv+0xec>
			BT_ERR("Too short message for OpCode 0x%08x", opcode);
   1219e:	4632      	mov	r2, r6
   121a0:	2145      	movs	r1, #69	; 0x45
   121a2:	4807      	ldr	r0, [pc, #28]	; (121c0 <bt_mesh_model_recv+0x174>)
   121a4:	f014 fee3 	bl	26f6e <printk>
			continue;
   121a8:	e7a4      	b.n	120f4 <bt_mesh_model_recv+0xa8>
   121aa:	bf00      	nop
   121ac:	00032d96 	.word	0x00032d96
   121b0:	00032e03 	.word	0x00032e03
   121b4:	20002e24 	.word	0x20002e24
   121b8:	00032daf 	.word	0x00032daf
   121bc:	00032dd9 	.word	0x00032dd9
   121c0:	00032e20 	.word	0x00032e20

000121c4 <bt_mesh_model_publish>:
{
   121c4:	b570      	push	{r4, r5, r6, lr}
	struct bt_mesh_model_pub *pub = model->pub;
   121c6:	6884      	ldr	r4, [r0, #8]
{
   121c8:	b0aa      	sub	sp, #168	; 0xa8
		.app_idx = pub->key,
   121ca:	88e1      	ldrh	r1, [r4, #6]
		.addr = pub->addr,
   121cc:	88a6      	ldrh	r6, [r4, #4]
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   121ce:	ab0c      	add	r3, sp, #48	; 0x30
   121d0:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
   121d4:	e9cd 2304 	strd	r2, r3, [sp, #16]
   121d8:	9303      	str	r3, [sp, #12]
		.app_idx = pub->key,
   121da:	f3c1 010b 	ubfx	r1, r1, #0, #12
	struct bt_mesh_msg_ctx ctx = {
   121de:	2300      	movs	r3, #0
   121e0:	e9cd 3306 	strd	r3, r3, [sp, #24]
   121e4:	f8ad 101a 	strh.w	r1, [sp, #26]
		.send_rel = pub->send_rel,
   121e8:	79e1      	ldrb	r1, [r4, #7]
	struct bt_mesh_msg_ctx ctx = {
   121ea:	f8ad 3020 	strh.w	r3, [sp, #32]
		.send_rel = pub->send_rel,
   121ee:	f3c1 1140 	ubfx	r1, r1, #5, #1
	struct bt_mesh_msg_ctx ctx = {
   121f2:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
   121f6:	7a21      	ldrb	r1, [r4, #8]
   121f8:	f8ad 601c 	strh.w	r6, [sp, #28]
   121fc:	aa06      	add	r2, sp, #24
	struct bt_mesh_net_tx tx = {
   121fe:	9309      	str	r3, [sp, #36]	; 0x24
   12200:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
{
   12204:	4605      	mov	r5, r0
	struct bt_mesh_msg_ctx ctx = {
   12206:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
		.src = bt_mesh_model_elem(model)->addr,
   1220a:	f7ff fd99 	bl	11d40 <bt_mesh_model_elem>
	struct bt_mesh_net_tx tx = {
   1220e:	8803      	ldrh	r3, [r0, #0]
   12210:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
	if (pub->addr == BT_MESH_ADDR_UNASSIGNED) {
   12214:	2e00      	cmp	r6, #0
   12216:	d041      	beq.n	1229c <bt_mesh_model_publish+0xd8>
	if (pub->msg->len + 4 > BT_MESH_TX_SDU_MAX) {
   12218:	6923      	ldr	r3, [r4, #16]
   1221a:	889b      	ldrh	r3, [r3, #4]
   1221c:	3304      	adds	r3, #4
   1221e:	2b78      	cmp	r3, #120	; 0x78
   12220:	dd08      	ble.n	12234 <bt_mesh_model_publish+0x70>
		BT_ERR("Message does not fit maximum SDU size");
   12222:	2145      	movs	r1, #69	; 0x45
   12224:	481f      	ldr	r0, [pc, #124]	; (122a4 <bt_mesh_model_publish+0xe0>)
   12226:	f014 fea2 	bl	26f6e <printk>
		return -EMSGSIZE;
   1222a:	f06f 0579 	mvn.w	r5, #121	; 0x79
}
   1222e:	4628      	mov	r0, r5
   12230:	b02a      	add	sp, #168	; 0xa8
   12232:	bd70      	pop	{r4, r5, r6, pc}
	if (pub->count) {
   12234:	7ae3      	ldrb	r3, [r4, #11]
   12236:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   1223a:	d007      	beq.n	1224c <bt_mesh_model_publish+0x88>
		BT_WARN("Clearing publish retransmit timer");
   1223c:	481a      	ldr	r0, [pc, #104]	; (122a8 <bt_mesh_model_publish+0xe4>)
   1223e:	2157      	movs	r1, #87	; 0x57
   12240:	f014 fe95 	bl	26f6e <printk>
		k_delayed_work_cancel(&pub->timer);
   12244:	f104 0018 	add.w	r0, r4, #24
   12248:	f011 fe16 	bl	23e78 <k_delayed_work_cancel>
	net_buf_simple_add_mem(&sdu, pub->msg->data, pub->msg->len);
   1224c:	6923      	ldr	r3, [r4, #16]
   1224e:	a803      	add	r0, sp, #12
   12250:	889a      	ldrh	r2, [r3, #4]
   12252:	6819      	ldr	r1, [r3, #0]
   12254:	f01a fbc5 	bl	2c9e2 <net_buf_simple_add_mem>
	tx.friend_cred = pub->cred;
   12258:	79e3      	ldrb	r3, [r4, #7]
   1225a:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
   1225e:	f3c3 1300 	ubfx	r3, r3, #4, #1
   12262:	f363 0200 	bfi	r2, r3, #0, #1
   12266:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
	pub->count = BT_MESH_PUB_TRANSMIT_COUNT(pub->retransmit);
   1226a:	7ae3      	ldrb	r3, [r4, #11]
   1226c:	7a62      	ldrb	r2, [r4, #9]
   1226e:	f362 1347 	bfi	r3, r2, #5, #3
   12272:	72e3      	strb	r3, [r4, #11]
	err = model_send(model, &tx, true, &sdu, &pub_sent_cb, model);
   12274:	4b0d      	ldr	r3, [pc, #52]	; (122ac <bt_mesh_model_publish+0xe8>)
   12276:	9501      	str	r5, [sp, #4]
   12278:	9300      	str	r3, [sp, #0]
   1227a:	4628      	mov	r0, r5
   1227c:	ab03      	add	r3, sp, #12
   1227e:	2201      	movs	r2, #1
   12280:	a909      	add	r1, sp, #36	; 0x24
   12282:	f7ff fb65 	bl	11950 <model_send>
	if (err) {
   12286:	4605      	mov	r5, r0
   12288:	2800      	cmp	r0, #0
   1228a:	d0d0      	beq.n	1222e <bt_mesh_model_publish+0x6a>
	pub->count = 0U;
   1228c:	7ae3      	ldrb	r3, [r4, #11]
	publish_sent(err, pub->mod);
   1228e:	6821      	ldr	r1, [r4, #0]
	pub->count = 0U;
   12290:	f36f 1347 	bfc	r3, #5, #3
   12294:	72e3      	strb	r3, [r4, #11]
	publish_sent(err, pub->mod);
   12296:	f7ff fcf1 	bl	11c7c <publish_sent>
   1229a:	e7c8      	b.n	1222e <bt_mesh_model_publish+0x6a>
		return -EADDRNOTAVAIL;
   1229c:	f06f 057c 	mvn.w	r5, #124	; 0x7c
   122a0:	e7c5      	b.n	1222e <bt_mesh_model_publish+0x6a>
   122a2:	bf00      	nop
   122a4:	00032d44 	.word	0x00032d44
   122a8:	00032d6f 	.word	0x00032d6f
   122ac:	0002eef8 	.word	0x0002eef8

000122b0 <mod_publish>:
{
   122b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	period_ms = bt_mesh_model_pub_period_get(pub->mod);
   122b4:	f850 8c18 	ldr.w	r8, [r0, #-24]
{
   122b8:	4604      	mov	r4, r0
   122ba:	b0a8      	sub	sp, #160	; 0xa0
	period_ms = bt_mesh_model_pub_period_get(pub->mod);
   122bc:	4640      	mov	r0, r8
   122be:	f7ff fcb5 	bl	11c2c <bt_mesh_model_pub_period_get>
	if (pub->count) {
   122c2:	f814 3c0d 	ldrb.w	r3, [r4, #-13]
   122c6:	f013 0fe0 	tst.w	r3, #224	; 0xe0
	period_ms = bt_mesh_model_pub_period_get(pub->mod);
   122ca:	4607      	mov	r7, r0
	if (pub->count) {
   122cc:	d05c      	beq.n	12388 <mod_publish+0xd8>
	struct bt_mesh_model_pub *pub = mod->pub;
   122ce:	f8d8 5008 	ldr.w	r5, [r8, #8]
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   122d2:	ab0a      	add	r3, sp, #40	; 0x28
   122d4:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
   122d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
	struct bt_mesh_msg_ctx ctx = {
   122dc:	2600      	movs	r6, #0
		.app_idx = pub->key,
   122de:	88ea      	ldrh	r2, [r5, #6]
	struct bt_mesh_msg_ctx ctx = {
   122e0:	9606      	str	r6, [sp, #24]
   122e2:	e9cd 6604 	strd	r6, r6, [sp, #16]
		.app_idx = pub->key,
   122e6:	f3c2 020b 	ubfx	r2, r2, #0, #12
	struct bt_mesh_msg_ctx ctx = {
   122ea:	f8ad 2012 	strh.w	r2, [sp, #18]
   122ee:	88aa      	ldrh	r2, [r5, #4]
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   122f0:	9301      	str	r3, [sp, #4]
	struct bt_mesh_msg_ctx ctx = {
   122f2:	f8ad 2014 	strh.w	r2, [sp, #20]
   122f6:	ab04      	add	r3, sp, #16
   122f8:	7a2a      	ldrb	r2, [r5, #8]
   122fa:	f88d 201b 	strb.w	r2, [sp, #27]
		.src = bt_mesh_model_elem(mod)->addr,
   122fe:	4640      	mov	r0, r8
	struct bt_mesh_net_tx tx = {
   12300:	e9cd 3608 	strd	r3, r6, [sp, #32]
   12304:	9607      	str	r6, [sp, #28]
		.src = bt_mesh_model_elem(mod)->addr,
   12306:	f7ff fd1b 	bl	11d40 <bt_mesh_model_elem>
	struct bt_mesh_net_tx tx = {
   1230a:	8803      	ldrh	r3, [r0, #0]
   1230c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
		.friend_cred = pub->cred,
   12310:	79eb      	ldrb	r3, [r5, #7]
	struct bt_mesh_net_tx tx = {
   12312:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
		.friend_cred = pub->cred,
   12316:	f3c3 1300 	ubfx	r3, r3, #4, #1
	struct bt_mesh_net_tx tx = {
   1231a:	f363 0200 	bfi	r2, r3, #0, #1
	net_buf_simple_add_mem(&sdu, pub->msg->data, pub->msg->len);
   1231e:	692b      	ldr	r3, [r5, #16]
	struct bt_mesh_net_tx tx = {
   12320:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
	net_buf_simple_add_mem(&sdu, pub->msg->data, pub->msg->len);
   12324:	889a      	ldrh	r2, [r3, #4]
   12326:	6819      	ldr	r1, [r3, #0]
   12328:	a801      	add	r0, sp, #4
   1232a:	f01a fb5a 	bl	2c9e2 <net_buf_simple_add_mem>
	pub->count--;
   1232e:	7aeb      	ldrb	r3, [r5, #11]
	return bt_mesh_trans_send(&tx, &sdu, &pub_sent_cb, mod);
   12330:	4a2e      	ldr	r2, [pc, #184]	; (123ec <mod_publish+0x13c>)
	pub->count--;
   12332:	33e0      	adds	r3, #224	; 0xe0
   12334:	72eb      	strb	r3, [r5, #11]
	return bt_mesh_trans_send(&tx, &sdu, &pub_sent_cb, mod);
   12336:	a901      	add	r1, sp, #4
   12338:	4643      	mov	r3, r8
   1233a:	a807      	add	r0, sp, #28
   1233c:	f7fe f9a4 	bl	10688 <bt_mesh_trans_send>
		if (err) {
   12340:	4602      	mov	r2, r0
   12342:	b1f0      	cbz	r0, 12382 <mod_publish+0xd2>
			BT_ERR("Failed to retransmit (err %d)", err);
   12344:	2145      	movs	r1, #69	; 0x45
   12346:	482a      	ldr	r0, [pc, #168]	; (123f0 <mod_publish+0x140>)
   12348:	f014 fe11 	bl	26f6e <printk>
			pub->count = 0U;
   1234c:	f814 3c0d 	ldrb.w	r3, [r4, #-13]
   12350:	f366 1347 	bfi	r3, r6, #5, #3
   12354:	f804 3c0d 	strb.w	r3, [r4, #-13]
			if (period_ms) {
   12358:	b19f      	cbz	r7, 12382 <mod_publish+0xd2>
						      K_MSEC(period_ms));
   1235a:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
   1235e:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   12362:	f240 30e7 	movw	r0, #999	; 0x3e7
   12366:	2100      	movs	r1, #0
   12368:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1236c:	2300      	movs	r3, #0
   1236e:	fbc5 0107 	smlal	r0, r1, r5, r7
   12372:	f7ef fb5b 	bl	1a2c <__aeabi_uldivmod>
   12376:	4602      	mov	r2, r0
   12378:	460b      	mov	r3, r1
   1237a:	481e      	ldr	r0, [pc, #120]	; (123f4 <mod_publish+0x144>)
   1237c:	4621      	mov	r1, r4
   1237e:	f011 fd0b 	bl	23d98 <k_delayed_work_submit_to_queue>
}
   12382:	b028      	add	sp, #160	; 0xa0
   12384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!period_ms) {
   12388:	2800      	cmp	r0, #0
   1238a:	d0fa      	beq.n	12382 <mod_publish+0xd2>
	__ASSERT_NO_MSG(pub->update != NULL);
   1238c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   12390:	b943      	cbnz	r3, 123a4 <mod_publish+0xf4>
   12392:	4919      	ldr	r1, [pc, #100]	; (123f8 <mod_publish+0x148>)
   12394:	4819      	ldr	r0, [pc, #100]	; (123fc <mod_publish+0x14c>)
   12396:	22f2      	movs	r2, #242	; 0xf2
   12398:	f014 fde9 	bl	26f6e <printk>
   1239c:	21f2      	movs	r1, #242	; 0xf2
   1239e:	4816      	ldr	r0, [pc, #88]	; (123f8 <mod_publish+0x148>)
   123a0:	f015 f85e 	bl	27460 <assert_post_action>
	err = pub->update(pub->mod);
   123a4:	f854 3c04 	ldr.w	r3, [r4, #-4]
   123a8:	f854 0c18 	ldr.w	r0, [r4, #-24]
   123ac:	4798      	blx	r3
	if (err) {
   123ae:	4605      	mov	r5, r0
   123b0:	b178      	cbz	r0, 123d2 <mod_publish+0x122>
		pub->period_start = k_uptime_get_32();
   123b2:	f018 fc92 	bl	2acda <k_uptime_get_32>
	pub->count = 0U;
   123b6:	f814 3c0d 	ldrb.w	r3, [r4, #-13]
		pub->period_start = k_uptime_get_32();
   123ba:	f844 0c0c 	str.w	r0, [r4, #-12]
	pub->count = 0U;
   123be:	f36f 1347 	bfc	r3, #5, #3
   123c2:	f804 3c0d 	strb.w	r3, [r4, #-13]
	publish_sent(err, pub->mod);
   123c6:	f854 1c18 	ldr.w	r1, [r4, #-24]
   123ca:	4628      	mov	r0, r5
   123cc:	f7ff fc56 	bl	11c7c <publish_sent>
   123d0:	e7d7      	b.n	12382 <mod_publish+0xd2>
	err = bt_mesh_model_publish(pub->mod);
   123d2:	f854 0c18 	ldr.w	r0, [r4, #-24]
   123d6:	f7ff fef5 	bl	121c4 <bt_mesh_model_publish>
	if (err) {
   123da:	4602      	mov	r2, r0
   123dc:	2800      	cmp	r0, #0
   123de:	d0d0      	beq.n	12382 <mod_publish+0xd2>
		BT_ERR("Publishing failed (err %d)", err);
   123e0:	2145      	movs	r1, #69	; 0x45
   123e2:	4807      	ldr	r0, [pc, #28]	; (12400 <mod_publish+0x150>)
   123e4:	f014 fdc3 	bl	26f6e <printk>
   123e8:	e7cb      	b.n	12382 <mod_publish+0xd2>
   123ea:	bf00      	nop
   123ec:	0002eef8 	.word	0x0002eef8
   123f0:	00032e69 	.word	0x00032e69
   123f4:	20002490 	.word	0x20002490
   123f8:	00032e8c 	.word	0x00032e8c
   123fc:	0002fa94 	.word	0x0002fa94
   12400:	00032ebe 	.word	0x00032ebe

00012404 <bt_mesh_comp_get>:
}
   12404:	4b01      	ldr	r3, [pc, #4]	; (1240c <bt_mesh_comp_get+0x8>)
   12406:	6818      	ldr	r0, [r3, #0]
   12408:	4770      	bx	lr
   1240a:	bf00      	nop
   1240c:	20002e24 	.word	0x20002e24

00012410 <bt_mesh_model_pending_store>:
	bt_mesh_model_foreach(store_pending_mod, NULL);
   12410:	2100      	movs	r1, #0
   12412:	4801      	ldr	r0, [pc, #4]	; (12418 <bt_mesh_model_pending_store+0x8>)
   12414:	f7ff bbd0 	b.w	11bb8 <bt_mesh_model_foreach>
   12418:	00011a21 	.word	0x00011a21

0001241c <bt_mesh_model_data_store>:
{
   1241c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1241e:	b08b      	sub	sp, #44	; 0x2c
	encode_mod_path(mod, vnd, "data", path, sizeof(path));
   12420:	241e      	movs	r4, #30
{
   12422:	4616      	mov	r6, r2
   12424:	461f      	mov	r7, r3
	encode_mod_path(mod, vnd, "data", path, sizeof(path));
   12426:	9400      	str	r4, [sp, #0]
   12428:	ab02      	add	r3, sp, #8
   1242a:	4a12      	ldr	r2, [pc, #72]	; (12474 <bt_mesh_model_data_store+0x58>)
{
   1242c:	9d10      	ldr	r5, [sp, #64]	; 0x40
	encode_mod_path(mod, vnd, "data", path, sizeof(path));
   1242e:	f7ff fa79 	bl	11924 <encode_mod_path>
	if (name) {
   12432:	b15e      	cbz	r6, 1244c <bt_mesh_model_data_store+0x30>
		strcat(path, "/");
   12434:	4622      	mov	r2, r4
   12436:	4910      	ldr	r1, [pc, #64]	; (12478 <bt_mesh_model_data_store+0x5c>)
   12438:	a802      	add	r0, sp, #8
   1243a:	f01b f9f4 	bl	2d826 <__strcat_chk>
		strncat(path, name, 8);
   1243e:	2208      	movs	r2, #8
   12440:	4623      	mov	r3, r4
   12442:	4631      	mov	r1, r6
   12444:	eb0d 0002 	add.w	r0, sp, r2
   12448:	f01b fa0d 	bl	2d866 <__strncat_chk>
	if (data_len) {
   1244c:	b175      	cbz	r5, 1246c <bt_mesh_model_data_store+0x50>
		err = settings_save_one(path, data, data_len);
   1244e:	462a      	mov	r2, r5
   12450:	4639      	mov	r1, r7
   12452:	a802      	add	r0, sp, #8
   12454:	f7f3 fbe6 	bl	5c24 <settings_save_one>
		err = settings_delete(path);
   12458:	4604      	mov	r4, r0
	if (err) {
   1245a:	b120      	cbz	r0, 12466 <bt_mesh_model_data_store+0x4a>
		BT_ERR("Failed to store %s value", log_strdup(path));
   1245c:	aa02      	add	r2, sp, #8
   1245e:	2145      	movs	r1, #69	; 0x45
   12460:	4806      	ldr	r0, [pc, #24]	; (1247c <bt_mesh_model_data_store+0x60>)
   12462:	f014 fd84 	bl	26f6e <printk>
}
   12466:	4620      	mov	r0, r4
   12468:	b00b      	add	sp, #44	; 0x2c
   1246a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		err = settings_delete(path);
   1246c:	a802      	add	r0, sp, #8
   1246e:	f015 f987 	bl	27780 <settings_delete>
   12472:	e7f1      	b.n	12458 <bt_mesh_model_data_store+0x3c>
   12474:	00032f7c 	.word	0x00032f7c
   12478:	00032ce1 	.word	0x00032ce1
   1247c:	0003307d 	.word	0x0003307d

00012480 <bt_mesh_model_settings_commit>:

void bt_mesh_model_settings_commit(void)
{
	bt_mesh_model_foreach(commit_mod, NULL);
   12480:	2100      	movs	r1, #0
   12482:	4801      	ldr	r0, [pc, #4]	; (12488 <bt_mesh_model_settings_commit+0x8>)
   12484:	f7ff bb98 	b.w	11bb8 <bt_mesh_model_foreach>
   12488:	00011cf9 	.word	0x00011cf9

0001248c <app_key_evt>:
	mod_unbind(mod, *app_idx, true);
}

static void app_key_evt(uint16_t app_idx, uint16_t net_idx,
			enum bt_mesh_key_evt evt)
{
   1248c:	b507      	push	{r0, r1, r2, lr}
	if (evt == BT_MESH_KEY_DELETED) {
   1248e:	2a01      	cmp	r2, #1
{
   12490:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (evt == BT_MESH_KEY_DELETED) {
   12494:	d104      	bne.n	124a0 <app_key_evt+0x14>
		bt_mesh_model_foreach(&mod_app_key_del, &app_idx);
   12496:	f10d 0106 	add.w	r1, sp, #6
   1249a:	4803      	ldr	r0, [pc, #12]	; (124a8 <app_key_evt+0x1c>)
   1249c:	f7ff fb8c 	bl	11bb8 <bt_mesh_model_foreach>
	}
}
   124a0:	b003      	add	sp, #12
   124a2:	f85d fb04 	ldr.w	pc, [sp], #4
   124a6:	bf00      	nop
   124a8:	0002b085 	.word	0x0002b085

000124ac <lpn_timeout_get>:
}

static void lpn_timeout_get(struct bt_mesh_model *model,
			    struct bt_mesh_msg_ctx *ctx,
			    struct net_buf_simple *buf)
{
   124ac:	b570      	push	{r4, r5, r6, lr}
   124ae:	b088      	sub	sp, #32
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_LPN_TIMEOUT_STATUS, 5);
   124b0:	ab02      	add	r3, sp, #8
{
   124b2:	4604      	mov	r4, r0
   124b4:	460d      	mov	r5, r1
	struct bt_mesh_friend *frnd;
	uint16_t lpn_addr;
	int32_t timeout_ms;

	lpn_addr = net_buf_simple_pull_le16(buf);
   124b6:	4610      	mov	r0, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_LPN_TIMEOUT_STATUS, 5);
   124b8:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
   124bc:	9305      	str	r3, [sp, #20]
   124be:	e9cd 1306 	strd	r1, r3, [sp, #24]
	lpn_addr = net_buf_simple_pull_le16(buf);
   124c2:	f01a fa50 	bl	2c966 <net_buf_simple_pull_le16>

	BT_DBG("net_idx 0x%04x app_idx 0x%04x src 0x%04x lpn_addr 0x%02x",
	       ctx->net_idx, ctx->app_idx, ctx->addr, lpn_addr);

	if (!BT_MESH_ADDR_IS_UNICAST(lpn_addr)) {
   124c6:	b203      	sxth	r3, r0
   124c8:	2b00      	cmp	r3, #0
	lpn_addr = net_buf_simple_pull_le16(buf);
   124ca:	4606      	mov	r6, r0
	if (!BT_MESH_ADDR_IS_UNICAST(lpn_addr)) {
   124cc:	dc05      	bgt.n	124da <lpn_timeout_get+0x2e>
		BT_WARN("Invalid LPNAddress; ignoring msg");
   124ce:	481a      	ldr	r0, [pc, #104]	; (12538 <lpn_timeout_get+0x8c>)
   124d0:	2157      	movs	r1, #87	; 0x57

send_rsp:
	net_buf_simple_add_le24(&msg, timeout_ms);

	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
		BT_ERR("Unable to send LPN PollTimeout Status");
   124d2:	f014 fd4c 	bl	26f6e <printk>
	}
}
   124d6:	b008      	add	sp, #32
   124d8:	bd70      	pop	{r4, r5, r6, pc}
	bt_mesh_model_msg_init(&msg, OP_LPN_TIMEOUT_STATUS);
   124da:	f248 012e 	movw	r1, #32814	; 0x802e
   124de:	a805      	add	r0, sp, #20
   124e0:	f018 fc25 	bl	2ad2e <bt_mesh_model_msg_init>
	net_buf_simple_add_le16(&msg, lpn_addr);
   124e4:	4631      	mov	r1, r6
   124e6:	a805      	add	r0, sp, #20
   124e8:	f01a fa8e 	bl	2ca08 <net_buf_simple_add_le16>
	frnd = bt_mesh_friend_find(BT_MESH_KEY_ANY, lpn_addr, true, true);
   124ec:	2301      	movs	r3, #1
   124ee:	461a      	mov	r2, r3
   124f0:	4631      	mov	r1, r6
   124f2:	f64f 70ff 	movw	r0, #65535	; 0xffff
   124f6:	f018 ffdd 	bl	2b4b4 <bt_mesh_friend_find>
	if (!frnd) {
   124fa:	b1d8      	cbz	r0, 12534 <lpn_timeout_get+0x88>
	return k_ticks_to_ms_floor32(z_timeout_remaining(&work->timeout));
   124fc:	3070      	adds	r0, #112	; 0x70
   124fe:	f011 fe87 	bl	24210 <z_timeout_remaining>
			return (uint32_t)((t * to_hz + off) / from_hz);
   12502:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   12506:	fba0 2302 	umull	r2, r3, r0, r2
   1250a:	0bd1      	lsrs	r1, r2, #15
   1250c:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
	timeout_ms = k_delayed_work_remaining_get(&frnd->timer) / 100;
   12510:	2064      	movs	r0, #100	; 0x64
   12512:	fbb1 f1f0 	udiv	r1, r1, r0
	net_buf_simple_add_le24(&msg, timeout_ms);
   12516:	a805      	add	r0, sp, #20
   12518:	f01a fa88 	bl	2ca2c <net_buf_simple_add_le24>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1251c:	2300      	movs	r3, #0
   1251e:	9300      	str	r3, [sp, #0]
   12520:	aa05      	add	r2, sp, #20
   12522:	4629      	mov	r1, r5
   12524:	4620      	mov	r0, r4
   12526:	f018 fc2b 	bl	2ad80 <bt_mesh_model_send>
   1252a:	2800      	cmp	r0, #0
   1252c:	d0d3      	beq.n	124d6 <lpn_timeout_get+0x2a>
		BT_ERR("Unable to send LPN PollTimeout Status");
   1252e:	2145      	movs	r1, #69	; 0x45
   12530:	4802      	ldr	r0, [pc, #8]	; (1253c <lpn_timeout_get+0x90>)
   12532:	e7ce      	b.n	124d2 <lpn_timeout_get+0x26>
		timeout_ms = 0;
   12534:	4601      	mov	r1, r0
   12536:	e7ee      	b.n	12516 <lpn_timeout_get+0x6a>
   12538:	0003336e 	.word	0x0003336e
   1253c:	00033394 	.word	0x00033394

00012540 <node_reset>:
{
   12540:	b530      	push	{r4, r5, lr}
   12542:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NODE_RESET_STATUS, 0);
   12544:	ab03      	add	r3, sp, #12
   12546:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
{
   1254a:	4604      	mov	r4, r0
   1254c:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_NODE_RESET_STATUS);
   1254e:	a805      	add	r0, sp, #20
   12550:	f248 014a 	movw	r1, #32842	; 0x804a
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NODE_RESET_STATUS, 0);
   12554:	e9cd 2306 	strd	r2, r3, [sp, #24]
   12558:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_NODE_RESET_STATUS);
   1255a:	f018 fbe8 	bl	2ad2e <bt_mesh_model_msg_init>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1255e:	2300      	movs	r3, #0
   12560:	9300      	str	r3, [sp, #0]
   12562:	aa05      	add	r2, sp, #20
   12564:	4629      	mov	r1, r5
   12566:	4620      	mov	r0, r4
   12568:	f018 fc0a 	bl	2ad80 <bt_mesh_model_send>
   1256c:	b118      	cbz	r0, 12576 <node_reset+0x36>
		BT_ERR("Unable to send Node Reset Status");
   1256e:	2145      	movs	r1, #69	; 0x45
   12570:	4803      	ldr	r0, [pc, #12]	; (12580 <node_reset+0x40>)
   12572:	f014 fcfc 	bl	26f6e <printk>
	bt_mesh_proxy_on_idle(&proxy_idle);
   12576:	4803      	ldr	r0, [pc, #12]	; (12584 <node_reset+0x44>)
   12578:	f005 fcfa 	bl	17f70 <bt_mesh_proxy_on_idle>
}
   1257c:	b009      	add	sp, #36	; 0x24
   1257e:	bd30      	pop	{r4, r5, pc}
   12580:	00033606 	.word	0x00033606
   12584:	200008f8 	.word	0x200008f8

00012588 <send_mod_sub_status>:
{
   12588:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1258c:	b08b      	sub	sp, #44	; 0x2c
   1258e:	4698      	mov	r8, r3
   12590:	460e      	mov	r6, r1
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_SUB_STATUS, 9);
   12592:	f44f 2370 	mov.w	r3, #983040	; 0xf0000
   12596:	a906      	add	r1, sp, #24
{
   12598:	4691      	mov	r9, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_SUB_STATUS, 9);
   1259a:	e9cd 3104 	strd	r3, r1, [sp, #16]
   1259e:	9103      	str	r1, [sp, #12]
{
   125a0:	4605      	mov	r5, r0
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_STATUS);
   125a2:	f248 011f 	movw	r1, #32799	; 0x801f
   125a6:	a803      	add	r0, sp, #12
{
   125a8:	f89d 7050 	ldrb.w	r7, [sp, #80]	; 0x50
   125ac:	9c13      	ldr	r4, [sp, #76]	; 0x4c
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_STATUS);
   125ae:	f018 fbbe 	bl	2ad2e <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   125b2:	4649      	mov	r1, r9
   125b4:	a803      	add	r0, sp, #12
   125b6:	f01a fa20 	bl	2c9fa <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, elem_addr);
   125ba:	4641      	mov	r1, r8
   125bc:	a803      	add	r0, sp, #12
   125be:	f01a fa23 	bl	2ca08 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, sub_addr);
   125c2:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   125c6:	a803      	add	r0, sp, #12
   125c8:	f01a fa1e 	bl	2ca08 <net_buf_simple_add_le16>
	if (vnd) {
   125cc:	b1a7      	cbz	r7, 125f8 <send_mod_sub_status+0x70>
		memcpy(net_buf_simple_add(&msg, 4), mod_id, 4);
   125ce:	2104      	movs	r1, #4
   125d0:	a803      	add	r0, sp, #12
   125d2:	f00c fe0f 	bl	1f1f4 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   125d6:	6823      	ldr	r3, [r4, #0]
   125d8:	6003      	str	r3, [r0, #0]
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   125da:	2300      	movs	r3, #0
   125dc:	9300      	str	r3, [sp, #0]
   125de:	aa03      	add	r2, sp, #12
   125e0:	4631      	mov	r1, r6
   125e2:	4628      	mov	r0, r5
   125e4:	f018 fbcc 	bl	2ad80 <bt_mesh_model_send>
   125e8:	b118      	cbz	r0, 125f2 <send_mod_sub_status+0x6a>
		BT_ERR("Unable to send Model Subscription Status");
   125ea:	2145      	movs	r1, #69	; 0x45
   125ec:	4806      	ldr	r0, [pc, #24]	; (12608 <send_mod_sub_status+0x80>)
   125ee:	f014 fcbe 	bl	26f6e <printk>
}
   125f2:	b00b      	add	sp, #44	; 0x2c
   125f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		memcpy(net_buf_simple_add(&msg, 2), mod_id, 2);
   125f8:	2102      	movs	r1, #2
   125fa:	a803      	add	r0, sp, #12
   125fc:	f00c fdfa 	bl	1f1f4 <net_buf_simple_add>
   12600:	8823      	ldrh	r3, [r4, #0]
   12602:	8003      	strh	r3, [r0, #0]
   12604:	e7e9      	b.n	125da <send_mod_sub_status+0x52>
   12606:	bf00      	nop
   12608:	00033775 	.word	0x00033775

0001260c <net_key_get>:
{
   1260c:	b530      	push	{r4, r5, lr}
   1260e:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_KEY_LIST,
   12610:	ab03      	add	r3, sp, #12
   12612:	f44f 2200 	mov.w	r2, #524288	; 0x80000
{
   12616:	4604      	mov	r4, r0
   12618:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_NET_KEY_LIST);
   1261a:	a805      	add	r0, sp, #20
   1261c:	f248 0143 	movw	r1, #32835	; 0x8043
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_KEY_LIST,
   12620:	e9cd 2306 	strd	r2, r3, [sp, #24]
   12624:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_NET_KEY_LIST);
   12626:	f018 fb82 	bl	2ad2e <bt_mesh_model_msg_init>
	count = bt_mesh_subnets_get(net_idx, ARRAY_SIZE(net_idx), 0);
   1262a:	2200      	movs	r2, #0
   1262c:	2101      	movs	r1, #1
   1262e:	a802      	add	r0, sp, #8
   12630:	f7fc fe1e 	bl	f270 <bt_mesh_subnets_get>
	if (count < 0 || count > ARRAY_SIZE(net_idx)) {
   12634:	b120      	cbz	r0, 12640 <net_key_get+0x34>
		net_buf_simple_add_le16(&msg, net_idx[i]);
   12636:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   1263a:	a805      	add	r0, sp, #20
   1263c:	f01a f9e4 	bl	2ca08 <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   12640:	2300      	movs	r3, #0
   12642:	9300      	str	r3, [sp, #0]
   12644:	aa05      	add	r2, sp, #20
   12646:	4629      	mov	r1, r5
   12648:	4620      	mov	r0, r4
   1264a:	f018 fb99 	bl	2ad80 <bt_mesh_model_send>
   1264e:	b118      	cbz	r0, 12658 <net_key_get+0x4c>
		BT_ERR("Unable to send NetKey List");
   12650:	2145      	movs	r1, #69	; 0x45
   12652:	4802      	ldr	r0, [pc, #8]	; (1265c <net_key_get+0x50>)
   12654:	f014 fc8b 	bl	26f6e <printk>
}
   12658:	b009      	add	sp, #36	; 0x24
   1265a:	bd30      	pop	{r4, r5, pc}
   1265c:	00033565 	.word	0x00033565

00012660 <mod_sub_get_vnd>:
{
   12660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12664:	4614      	mov	r4, r2
   12666:	b0a6      	sub	sp, #152	; 0x98
	NET_BUF_SIMPLE_DEFINE(msg, BT_MESH_TX_SDU_MAX);
   12668:	ab08      	add	r3, sp, #32
   1266a:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
{
   1266e:	4681      	mov	r9, r0
	addr = net_buf_simple_pull_le16(buf);
   12670:	4620      	mov	r0, r4
	NET_BUF_SIMPLE_DEFINE(msg, BT_MESH_TX_SDU_MAX);
   12672:	9305      	str	r3, [sp, #20]
   12674:	e9cd 2306 	strd	r2, r3, [sp, #24]
{
   12678:	468a      	mov	sl, r1
	addr = net_buf_simple_pull_le16(buf);
   1267a:	f01a f974 	bl	2c966 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(addr)) {
   1267e:	b203      	sxth	r3, r0
   12680:	2b00      	cmp	r3, #0
	addr = net_buf_simple_pull_le16(buf);
   12682:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(addr)) {
   12684:	dc06      	bgt.n	12694 <mod_sub_get_vnd+0x34>
		BT_WARN("Prohibited element address");
   12686:	482d      	ldr	r0, [pc, #180]	; (1273c <mod_sub_get_vnd+0xdc>)
   12688:	2157      	movs	r1, #87	; 0x57
		BT_ERR("Unable to send Vendor Model Subscription List");
   1268a:	f014 fc70 	bl	26f6e <printk>
}
   1268e:	b026      	add	sp, #152	; 0x98
   12690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	company = net_buf_simple_pull_le16(buf);
   12694:	4620      	mov	r0, r4
   12696:	f01a f966 	bl	2c966 <net_buf_simple_pull_le16>
   1269a:	4607      	mov	r7, r0
	id = net_buf_simple_pull_le16(buf);
   1269c:	4620      	mov	r0, r4
   1269e:	f01a f962 	bl	2c966 <net_buf_simple_pull_le16>
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_LIST_VND);
   126a2:	ac05      	add	r4, sp, #20
	id = net_buf_simple_pull_le16(buf);
   126a4:	4606      	mov	r6, r0
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_LIST_VND);
   126a6:	f248 012c 	movw	r1, #32812	; 0x802c
   126aa:	4620      	mov	r0, r4
   126ac:	f018 fb3f 	bl	2ad2e <bt_mesh_model_msg_init>
	elem = bt_mesh_elem_find(addr);
   126b0:	4628      	mov	r0, r5
   126b2:	f7ff fc8b 	bl	11fcc <bt_mesh_elem_find>
	if (!elem) {
   126b6:	b9d8      	cbnz	r0, 126f0 <mod_sub_get_vnd+0x90>
		net_buf_simple_add_u8(&msg, STATUS_INVALID_ADDRESS);
   126b8:	2101      	movs	r1, #1
		net_buf_simple_add_u8(&msg, STATUS_INVALID_MODEL);
   126ba:	4620      	mov	r0, r4
   126bc:	f01a f99d 	bl	2c9fa <net_buf_simple_add_u8>
		net_buf_simple_add_le16(&msg, addr);
   126c0:	4629      	mov	r1, r5
   126c2:	4620      	mov	r0, r4
   126c4:	f01a f9a0 	bl	2ca08 <net_buf_simple_add_le16>
		net_buf_simple_add_le16(&msg, company);
   126c8:	4639      	mov	r1, r7
   126ca:	4620      	mov	r0, r4
   126cc:	f01a f99c 	bl	2ca08 <net_buf_simple_add_le16>
		net_buf_simple_add_le16(&msg, id);
   126d0:	4631      	mov	r1, r6
   126d2:	4620      	mov	r0, r4
   126d4:	f01a f998 	bl	2ca08 <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   126d8:	2300      	movs	r3, #0
   126da:	9300      	str	r3, [sp, #0]
   126dc:	4622      	mov	r2, r4
   126de:	4651      	mov	r1, sl
   126e0:	4648      	mov	r0, r9
   126e2:	f018 fb4d 	bl	2ad80 <bt_mesh_model_send>
   126e6:	2800      	cmp	r0, #0
   126e8:	d0d1      	beq.n	1268e <mod_sub_get_vnd+0x2e>
		BT_ERR("Unable to send Vendor Model Subscription List");
   126ea:	2145      	movs	r1, #69	; 0x45
   126ec:	4814      	ldr	r0, [pc, #80]	; (12740 <mod_sub_get_vnd+0xe0>)
   126ee:	e7cc      	b.n	1268a <mod_sub_get_vnd+0x2a>
	mod = bt_mesh_model_find_vnd(elem, company, id);
   126f0:	4632      	mov	r2, r6
   126f2:	4639      	mov	r1, r7
   126f4:	f018 fb5c 	bl	2adb0 <bt_mesh_model_find_vnd>
	if (!mod) {
   126f8:	4680      	mov	r8, r0
   126fa:	b908      	cbnz	r0, 12700 <mod_sub_get_vnd+0xa0>
		net_buf_simple_add_u8(&msg, STATUS_INVALID_MODEL);
   126fc:	2102      	movs	r1, #2
   126fe:	e7dc      	b.n	126ba <mod_sub_get_vnd+0x5a>
	net_buf_simple_add_u8(&msg, STATUS_SUCCESS);
   12700:	2100      	movs	r1, #0
   12702:	4620      	mov	r0, r4
   12704:	f01a f979 	bl	2c9fa <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, addr);
   12708:	4629      	mov	r1, r5
   1270a:	4620      	mov	r0, r4
   1270c:	f01a f97c 	bl	2ca08 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, company);
   12710:	4639      	mov	r1, r7
   12712:	4620      	mov	r0, r4
   12714:	f01a f978 	bl	2ca08 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, id);
   12718:	4631      	mov	r1, r6
   1271a:	4620      	mov	r0, r4
   1271c:	f01a f974 	bl	2ca08 <net_buf_simple_add_le16>
	visit_ctx.msg = &msg;
   12720:	9404      	str	r4, [sp, #16]
	visit_ctx.elem_idx = mod->elem_idx;
   12722:	f898 3004 	ldrb.w	r3, [r8, #4]
   12726:	f8ad 300c 	strh.w	r3, [sp, #12]
	bt_mesh_model_tree_walk(bt_mesh_model_root(mod), mod_sub_list_visitor,
   1272a:	4640      	mov	r0, r8
   1272c:	f018 fb6b 	bl	2ae06 <bt_mesh_model_root>
   12730:	aa03      	add	r2, sp, #12
   12732:	4904      	ldr	r1, [pc, #16]	; (12744 <mod_sub_get_vnd+0xe4>)
   12734:	f018 fb68 	bl	2ae08 <bt_mesh_model_tree_walk>
   12738:	e7ce      	b.n	126d8 <mod_sub_get_vnd+0x78>
   1273a:	bf00      	nop
   1273c:	000334dc 	.word	0x000334dc
   12740:	000334fc 	.word	0x000334fc
   12744:	00013599 	.word	0x00013599

00012748 <mod_sub_get>:
{
   12748:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1274c:	4614      	mov	r4, r2
   1274e:	b0a7      	sub	sp, #156	; 0x9c
	NET_BUF_SIMPLE_DEFINE(msg, BT_MESH_TX_SDU_MAX);
   12750:	ab08      	add	r3, sp, #32
   12752:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
{
   12756:	4680      	mov	r8, r0
	addr = net_buf_simple_pull_le16(buf);
   12758:	4620      	mov	r0, r4
	NET_BUF_SIMPLE_DEFINE(msg, BT_MESH_TX_SDU_MAX);
   1275a:	9305      	str	r3, [sp, #20]
   1275c:	e9cd 2306 	strd	r2, r3, [sp, #24]
{
   12760:	4689      	mov	r9, r1
	addr = net_buf_simple_pull_le16(buf);
   12762:	f01a f900 	bl	2c966 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(addr)) {
   12766:	b203      	sxth	r3, r0
   12768:	2b00      	cmp	r3, #0
	addr = net_buf_simple_pull_le16(buf);
   1276a:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(addr)) {
   1276c:	dc06      	bgt.n	1277c <mod_sub_get+0x34>
		BT_WARN("Prohibited element address");
   1276e:	4826      	ldr	r0, [pc, #152]	; (12808 <mod_sub_get+0xc0>)
   12770:	2157      	movs	r1, #87	; 0x57
		BT_ERR("Unable to send Model Subscription List");
   12772:	f014 fbfc 	bl	26f6e <printk>
}
   12776:	b027      	add	sp, #156	; 0x9c
   12778:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	id = net_buf_simple_pull_le16(buf);
   1277c:	4620      	mov	r0, r4
   1277e:	f01a f8f2 	bl	2c966 <net_buf_simple_pull_le16>
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_LIST);
   12782:	ac05      	add	r4, sp, #20
	id = net_buf_simple_pull_le16(buf);
   12784:	4606      	mov	r6, r0
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_LIST);
   12786:	f248 012a 	movw	r1, #32810	; 0x802a
   1278a:	4620      	mov	r0, r4
   1278c:	f018 facf 	bl	2ad2e <bt_mesh_model_msg_init>
	elem = bt_mesh_elem_find(addr);
   12790:	4628      	mov	r0, r5
   12792:	f7ff fc1b 	bl	11fcc <bt_mesh_elem_find>
	if (!elem) {
   12796:	b9b8      	cbnz	r0, 127c8 <mod_sub_get+0x80>
		net_buf_simple_add_u8(&msg, STATUS_INVALID_ADDRESS);
   12798:	2101      	movs	r1, #1
		net_buf_simple_add_u8(&msg, STATUS_INVALID_MODEL);
   1279a:	4620      	mov	r0, r4
   1279c:	f01a f92d 	bl	2c9fa <net_buf_simple_add_u8>
		net_buf_simple_add_le16(&msg, addr);
   127a0:	4629      	mov	r1, r5
   127a2:	4620      	mov	r0, r4
   127a4:	f01a f930 	bl	2ca08 <net_buf_simple_add_le16>
		net_buf_simple_add_le16(&msg, id);
   127a8:	4631      	mov	r1, r6
   127aa:	4620      	mov	r0, r4
   127ac:	f01a f92c 	bl	2ca08 <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   127b0:	2300      	movs	r3, #0
   127b2:	9300      	str	r3, [sp, #0]
   127b4:	4622      	mov	r2, r4
   127b6:	4649      	mov	r1, r9
   127b8:	4640      	mov	r0, r8
   127ba:	f018 fae1 	bl	2ad80 <bt_mesh_model_send>
   127be:	2800      	cmp	r0, #0
   127c0:	d0d9      	beq.n	12776 <mod_sub_get+0x2e>
		BT_ERR("Unable to send Model Subscription List");
   127c2:	2145      	movs	r1, #69	; 0x45
   127c4:	4811      	ldr	r0, [pc, #68]	; (1280c <mod_sub_get+0xc4>)
   127c6:	e7d4      	b.n	12772 <mod_sub_get+0x2a>
	mod = bt_mesh_model_find(elem, id);
   127c8:	4631      	mov	r1, r6
   127ca:	f018 fb08 	bl	2adde <bt_mesh_model_find>
	if (!mod) {
   127ce:	4607      	mov	r7, r0
   127d0:	b908      	cbnz	r0, 127d6 <mod_sub_get+0x8e>
		net_buf_simple_add_u8(&msg, STATUS_INVALID_MODEL);
   127d2:	2102      	movs	r1, #2
   127d4:	e7e1      	b.n	1279a <mod_sub_get+0x52>
	net_buf_simple_add_u8(&msg, STATUS_SUCCESS);
   127d6:	2100      	movs	r1, #0
   127d8:	4620      	mov	r0, r4
   127da:	f01a f90e 	bl	2c9fa <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, addr);
   127de:	4629      	mov	r1, r5
   127e0:	4620      	mov	r0, r4
   127e2:	f01a f911 	bl	2ca08 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, id);
   127e6:	4631      	mov	r1, r6
   127e8:	4620      	mov	r0, r4
   127ea:	f01a f90d 	bl	2ca08 <net_buf_simple_add_le16>
	visit_ctx.msg = &msg;
   127ee:	9404      	str	r4, [sp, #16]
	visit_ctx.elem_idx = mod->elem_idx;
   127f0:	793b      	ldrb	r3, [r7, #4]
   127f2:	f8ad 300c 	strh.w	r3, [sp, #12]
	bt_mesh_model_tree_walk(bt_mesh_model_root(mod), mod_sub_list_visitor,
   127f6:	4638      	mov	r0, r7
   127f8:	f018 fb05 	bl	2ae06 <bt_mesh_model_root>
   127fc:	aa03      	add	r2, sp, #12
   127fe:	4904      	ldr	r1, [pc, #16]	; (12810 <mod_sub_get+0xc8>)
   12800:	f018 fb02 	bl	2ae08 <bt_mesh_model_tree_walk>
   12804:	e7d4      	b.n	127b0 <mod_sub_get+0x68>
   12806:	bf00      	nop
   12808:	000334dc 	.word	0x000334dc
   1280c:	000334b0 	.word	0x000334b0
   12810:	00013599 	.word	0x00013599

00012814 <relay_set>:
{
   12814:	b530      	push	{r4, r5, lr}
   12816:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_RELAY_STATUS, 2);
   12818:	ab03      	add	r3, sp, #12
{
   1281a:	460d      	mov	r5, r1
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_RELAY_STATUS, 2);
   1281c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   12820:	e9cd 1306 	strd	r1, r3, [sp, #24]
   12824:	9305      	str	r3, [sp, #20]
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   12826:	6813      	ldr	r3, [r2, #0]
   12828:	781a      	ldrb	r2, [r3, #0]
   1282a:	2a01      	cmp	r2, #1
{
   1282c:	4604      	mov	r4, r0
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   1282e:	d905      	bls.n	1283c <relay_set+0x28>
		BT_WARN("Invalid Relay value 0x%02x", buf->data[0]);
   12830:	2157      	movs	r1, #87	; 0x57
   12832:	4814      	ldr	r0, [pc, #80]	; (12884 <relay_set+0x70>)
   12834:	f014 fb9b 	bl	26f6e <printk>
}
   12838:	b009      	add	sp, #36	; 0x24
   1283a:	bd30      	pop	{r4, r5, pc}
	(void)bt_mesh_relay_set(buf->data[0], buf->data[1]);
   1283c:	7859      	ldrb	r1, [r3, #1]
   1283e:	4610      	mov	r0, r2
   12840:	f7fb f8b8 	bl	d9b4 <bt_mesh_relay_set>
	bt_mesh_model_msg_init(&msg, OP_RELAY_STATUS);
   12844:	f248 0128 	movw	r1, #32808	; 0x8028
   12848:	a805      	add	r0, sp, #20
   1284a:	f018 fa70 	bl	2ad2e <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_relay_get());
   1284e:	f017 fd6e 	bl	2a32e <bt_mesh_relay_get>
   12852:	4601      	mov	r1, r0
   12854:	a805      	add	r0, sp, #20
   12856:	f01a f8d0 	bl	2c9fa <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, bt_mesh_relay_retransmit_get());
   1285a:	f7fb f901 	bl	da60 <bt_mesh_relay_retransmit_get>
   1285e:	4601      	mov	r1, r0
   12860:	a805      	add	r0, sp, #20
   12862:	f01a f8ca 	bl	2c9fa <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   12866:	2300      	movs	r3, #0
   12868:	9300      	str	r3, [sp, #0]
   1286a:	aa05      	add	r2, sp, #20
   1286c:	4629      	mov	r1, r5
   1286e:	4620      	mov	r0, r4
   12870:	f018 fa86 	bl	2ad80 <bt_mesh_model_send>
   12874:	2800      	cmp	r0, #0
   12876:	d0df      	beq.n	12838 <relay_set+0x24>
		BT_ERR("Unable to send Relay Status response");
   12878:	2145      	movs	r1, #69	; 0x45
   1287a:	4803      	ldr	r0, [pc, #12]	; (12888 <relay_set+0x74>)
   1287c:	f014 fb77 	bl	26f6e <printk>
   12880:	e7da      	b.n	12838 <relay_set+0x24>
   12882:	bf00      	nop
   12884:	0003365d 	.word	0x0003365d
   12888:	0003367d 	.word	0x0003367d

0001288c <beacon_set>:
{
   1288c:	b570      	push	{r4, r5, r6, lr}
   1288e:	b088      	sub	sp, #32
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_BEACON_STATUS, 1);
   12890:	ab03      	add	r3, sp, #12
{
   12892:	4614      	mov	r4, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_BEACON_STATUS, 1);
   12894:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
   12898:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1289c:	9305      	str	r3, [sp, #20]
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   1289e:	6823      	ldr	r3, [r4, #0]
   128a0:	781a      	ldrb	r2, [r3, #0]
   128a2:	2a01      	cmp	r2, #1
{
   128a4:	4605      	mov	r5, r0
   128a6:	460e      	mov	r6, r1
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   128a8:	d905      	bls.n	128b6 <beacon_set+0x2a>
		BT_WARN("Invalid Config Beacon value 0x%02x", buf->data[0]);
   128aa:	2157      	movs	r1, #87	; 0x57
   128ac:	4810      	ldr	r0, [pc, #64]	; (128f0 <beacon_set+0x64>)
   128ae:	f014 fb5e 	bl	26f6e <printk>
}
   128b2:	b008      	add	sp, #32
   128b4:	bd70      	pop	{r4, r5, r6, pc}
	bt_mesh_beacon_set(buf->data[0]);
   128b6:	f002 0001 	and.w	r0, r2, #1
   128ba:	f7fb f815 	bl	d8e8 <bt_mesh_beacon_set>
	bt_mesh_model_msg_init(&msg, OP_BEACON_STATUS);
   128be:	f248 010b 	movw	r1, #32779	; 0x800b
   128c2:	a805      	add	r0, sp, #20
   128c4:	f018 fa33 	bl	2ad2e <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, buf->data[0]);
   128c8:	6823      	ldr	r3, [r4, #0]
   128ca:	a805      	add	r0, sp, #20
   128cc:	7819      	ldrb	r1, [r3, #0]
   128ce:	f01a f894 	bl	2c9fa <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   128d2:	2300      	movs	r3, #0
   128d4:	9300      	str	r3, [sp, #0]
   128d6:	aa05      	add	r2, sp, #20
   128d8:	4631      	mov	r1, r6
   128da:	4628      	mov	r0, r5
   128dc:	f018 fa50 	bl	2ad80 <bt_mesh_model_send>
   128e0:	2800      	cmp	r0, #0
   128e2:	d0e6      	beq.n	128b2 <beacon_set+0x26>
		BT_ERR("Unable to send Config Beacon Status response");
   128e4:	2145      	movs	r1, #69	; 0x45
   128e6:	4803      	ldr	r0, [pc, #12]	; (128f4 <beacon_set+0x68>)
   128e8:	f014 fb41 	bl	26f6e <printk>
   128ec:	e7e1      	b.n	128b2 <beacon_set+0x26>
   128ee:	bf00      	nop
   128f0:	00033106 	.word	0x00033106
   128f4:	0003312e 	.word	0x0003312e

000128f8 <app_key_get>:
{
   128f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   128fa:	b08b      	sub	sp, #44	; 0x2c
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_APP_KEY_LIST,
   128fc:	ab04      	add	r3, sp, #16
{
   128fe:	4606      	mov	r6, r0
   12900:	460f      	mov	r7, r1
	get_idx = net_buf_simple_pull_le16(buf);
   12902:	4610      	mov	r0, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_APP_KEY_LIST,
   12904:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
   12908:	9307      	str	r3, [sp, #28]
   1290a:	e9cd 1308 	strd	r1, r3, [sp, #32]
	get_idx = net_buf_simple_pull_le16(buf);
   1290e:	f01a f82a 	bl	2c966 <net_buf_simple_pull_le16>
	if (get_idx > 0xfff) {
   12912:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	get_idx = net_buf_simple_pull_le16(buf);
   12916:	4604      	mov	r4, r0
	if (get_idx > 0xfff) {
   12918:	d306      	bcc.n	12928 <app_key_get+0x30>
		BT_ERR("Invalid NetKeyIndex 0x%04x", get_idx);
   1291a:	4602      	mov	r2, r0
   1291c:	2145      	movs	r1, #69	; 0x45
   1291e:	481a      	ldr	r0, [pc, #104]	; (12988 <app_key_get+0x90>)
   12920:	f014 fb25 	bl	26f6e <printk>
}
   12924:	b00b      	add	sp, #44	; 0x2c
   12926:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_mesh_model_msg_init(&msg, OP_APP_KEY_LIST);
   12928:	f248 0102 	movw	r1, #32770	; 0x8002
   1292c:	a807      	add	r0, sp, #28
   1292e:	f018 f9fe 	bl	2ad2e <bt_mesh_model_msg_init>
	if (!bt_mesh_subnet_exists(get_idx)) {
   12932:	4620      	mov	r0, r4
   12934:	f017 fdc9 	bl	2a4ca <bt_mesh_subnet_exists>
		status = STATUS_SUCCESS;
   12938:	2800      	cmp	r0, #0
   1293a:	bf0c      	ite	eq
   1293c:	2504      	moveq	r5, #4
   1293e:	2500      	movne	r5, #0
	net_buf_simple_add_u8(&msg, status);
   12940:	4629      	mov	r1, r5
   12942:	a807      	add	r0, sp, #28
   12944:	f01a f859 	bl	2c9fa <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, get_idx);
   12948:	4621      	mov	r1, r4
   1294a:	a807      	add	r0, sp, #28
   1294c:	f01a f85c 	bl	2ca08 <net_buf_simple_add_le16>
	if (status != STATUS_SUCCESS) {
   12950:	b95d      	cbnz	r5, 1296a <app_key_get+0x72>
	count = bt_mesh_app_keys_get(get_idx, app_idx, ARRAY_SIZE(app_idx), 0);
   12952:	462b      	mov	r3, r5
   12954:	2201      	movs	r2, #1
   12956:	a903      	add	r1, sp, #12
   12958:	4620      	mov	r0, r4
   1295a:	f7fd f807 	bl	f96c <bt_mesh_app_keys_get>
	if (count < 0 || count > ARRAY_SIZE(app_idx)) {
   1295e:	b120      	cbz	r0, 1296a <app_key_get+0x72>
		net_buf_simple_add_le16(&msg, app_idx[i]);
   12960:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   12964:	a807      	add	r0, sp, #28
   12966:	f01a f84f 	bl	2ca08 <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1296a:	2300      	movs	r3, #0
   1296c:	9300      	str	r3, [sp, #0]
   1296e:	aa07      	add	r2, sp, #28
   12970:	4639      	mov	r1, r7
   12972:	4630      	mov	r0, r6
   12974:	f018 fa04 	bl	2ad80 <bt_mesh_model_send>
   12978:	2800      	cmp	r0, #0
   1297a:	d0d3      	beq.n	12924 <app_key_get+0x2c>
		BT_ERR("Unable to send AppKey List");
   1297c:	2145      	movs	r1, #69	; 0x45
   1297e:	4803      	ldr	r0, [pc, #12]	; (1298c <app_key_get+0x94>)
   12980:	f014 faf5 	bl	26f6e <printk>
   12984:	e7ce      	b.n	12924 <app_key_get+0x2c>
   12986:	bf00      	nop
   12988:	000330c6 	.word	0x000330c6
   1298c:	000330e6 	.word	0x000330e6

00012990 <mod_sub_list_clear.isra.3.part.4>:
static size_t mod_sub_list_clear(struct bt_mesh_model *mod)
   12990:	b538      	push	{r3, r4, r5, lr}
   12992:	4605      	mov	r5, r0
		if (!BT_MESH_ADDR_IS_VIRTUAL(mod->groups[i])) {
   12994:	8800      	ldrh	r0, [r0, #0]
   12996:	f480 4300 	eor.w	r3, r0, #32768	; 0x8000
   1299a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   1299e:	f04f 0400 	mov.w	r4, #0
   129a2:	d303      	bcc.n	129ac <mod_sub_list_clear.isra.3.part.4+0x1c>
			if (mod->groups[i] != BT_MESH_ADDR_UNASSIGNED) {
   129a4:	b108      	cbz	r0, 129aa <mod_sub_list_clear.isra.3.part.4+0x1a>
				mod->groups[i] = BT_MESH_ADDR_UNASSIGNED;
   129a6:	802c      	strh	r4, [r5, #0]
		clear_count++;
   129a8:	2001      	movs	r0, #1
}
   129aa:	bd38      	pop	{r3, r4, r5, pc}
		label_uuid = bt_mesh_va_label_get(mod->groups[i]);
   129ac:	f7fd fe56 	bl	1065c <bt_mesh_va_label_get>
		mod->groups[i] = BT_MESH_ADDR_UNASSIGNED;
   129b0:	802c      	strh	r4, [r5, #0]
		if (label_uuid) {
   129b2:	b118      	cbz	r0, 129bc <mod_sub_list_clear.isra.3.part.4+0x2c>
			bt_mesh_va_del(label_uuid, NULL);
   129b4:	4621      	mov	r1, r4
   129b6:	f7fd fe2d 	bl	10614 <bt_mesh_va_del>
   129ba:	e7f5      	b.n	129a8 <mod_sub_list_clear.isra.3.part.4+0x18>
			BT_ERR("Label UUID not found");
   129bc:	2145      	movs	r1, #69	; 0x45
   129be:	4802      	ldr	r0, [pc, #8]	; (129c8 <mod_sub_list_clear.isra.3.part.4+0x38>)
   129c0:	f014 fad5 	bl	26f6e <printk>
   129c4:	e7f0      	b.n	129a8 <mod_sub_list_clear.isra.3.part.4+0x18>
   129c6:	bf00      	nop
   129c8:	0003352f 	.word	0x0003352f

000129cc <cfg_srv_init>:
	{ OP_HEARTBEAT_SUB_SET,        5,   heartbeat_sub_set },
	BT_MESH_MODEL_OP_END,
};

static int cfg_srv_init(struct bt_mesh_model *model)
{
   129cc:	b508      	push	{r3, lr}
	if (!bt_mesh_model_in_primary(model)) {
   129ce:	7903      	ldrb	r3, [r0, #4]
   129d0:	b133      	cbz	r3, 129e0 <cfg_srv_init+0x14>
		BT_ERR("Configuration Server only allowed in primary element");
   129d2:	4806      	ldr	r0, [pc, #24]	; (129ec <cfg_srv_init+0x20>)
   129d4:	2145      	movs	r1, #69	; 0x45
   129d6:	f014 faca 	bl	26f6e <printk>
   129da:	f06f 0015 	mvn.w	r0, #21
	 * device-key is allowed to access this model.
	 */
	model->keys[0] = BT_MESH_KEY_DEV_LOCAL;

	return 0;
}
   129de:	bd08      	pop	{r3, pc}
	model->keys[0] = BT_MESH_KEY_DEV_LOCAL;
   129e0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   129e4:	8182      	strh	r2, [r0, #12]
	return 0;
   129e6:	4618      	mov	r0, r3
   129e8:	e7f9      	b.n	129de <cfg_srv_init+0x12>
   129ea:	bf00      	nop
   129ec:	00033160 	.word	0x00033160

000129f0 <send_krp_status>:
{
   129f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   129f2:	b089      	sub	sp, #36	; 0x24
   129f4:	460d      	mov	r5, r1
   129f6:	461e      	mov	r6, r3
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_KRP_STATUS, 4);
   129f8:	a902      	add	r1, sp, #8
   129fa:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
   129fe:	e9cd 3106 	strd	r3, r1, [sp, #24]
{
   12a02:	4604      	mov	r4, r0
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_KRP_STATUS, 4);
   12a04:	9105      	str	r1, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_KRP_STATUS);
   12a06:	a805      	add	r0, sp, #20
   12a08:	f248 0117 	movw	r1, #32791	; 0x8017
{
   12a0c:	4617      	mov	r7, r2
	bt_mesh_model_msg_init(&msg, OP_KRP_STATUS);
   12a0e:	f018 f98e 	bl	2ad2e <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   12a12:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
   12a16:	a805      	add	r0, sp, #20
   12a18:	f019 ffef 	bl	2c9fa <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, idx);
   12a1c:	4639      	mov	r1, r7
   12a1e:	a805      	add	r0, sp, #20
   12a20:	f019 fff2 	bl	2ca08 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(&msg, phase);
   12a24:	4631      	mov	r1, r6
   12a26:	a805      	add	r0, sp, #20
   12a28:	f019 ffe7 	bl	2c9fa <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   12a2c:	2300      	movs	r3, #0
   12a2e:	9300      	str	r3, [sp, #0]
   12a30:	aa05      	add	r2, sp, #20
   12a32:	4629      	mov	r1, r5
   12a34:	4620      	mov	r0, r4
   12a36:	f018 f9a3 	bl	2ad80 <bt_mesh_model_send>
   12a3a:	b118      	cbz	r0, 12a44 <send_krp_status+0x54>
		BT_ERR("Unable to send Key Refresh State Status");
   12a3c:	2145      	movs	r1, #69	; 0x45
   12a3e:	4802      	ldr	r0, [pc, #8]	; (12a48 <send_krp_status+0x58>)
   12a40:	f014 fa95 	bl	26f6e <printk>
}
   12a44:	b009      	add	sp, #36	; 0x24
   12a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12a48:	0003371b 	.word	0x0003371b

00012a4c <krp_set>:
{
   12a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   12a4e:	4606      	mov	r6, r0
   12a50:	b085      	sub	sp, #20
	idx = net_buf_simple_pull_le16(buf);
   12a52:	4610      	mov	r0, r2
{
   12a54:	4615      	mov	r5, r2
   12a56:	460f      	mov	r7, r1
	idx = net_buf_simple_pull_le16(buf);
   12a58:	f019 ff85 	bl	2c966 <net_buf_simple_pull_le16>
   12a5c:	4604      	mov	r4, r0
	phase = net_buf_simple_pull_u8(buf);
   12a5e:	4628      	mov	r0, r5
   12a60:	f019 ff79 	bl	2c956 <net_buf_simple_pull_u8>
	if (idx > 0xfff) {
   12a64:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
	phase = net_buf_simple_pull_u8(buf);
   12a68:	f88d 000f 	strb.w	r0, [sp, #15]
	if (idx > 0xfff) {
   12a6c:	d306      	bcc.n	12a7c <krp_set+0x30>
		BT_ERR("Invalid NetKeyIndex 0x%04x", idx);
   12a6e:	480d      	ldr	r0, [pc, #52]	; (12aa4 <krp_set+0x58>)
   12a70:	4622      	mov	r2, r4
   12a72:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Invalid kr phase transition 0x%02x", phase);
   12a74:	f014 fa7b 	bl	26f6e <printk>
}
   12a78:	b005      	add	sp, #20
   12a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = bt_mesh_subnet_kr_phase_set(idx, &phase);
   12a7c:	f10d 010f 	add.w	r1, sp, #15
   12a80:	4620      	mov	r0, r4
   12a82:	f7fc fbc5 	bl	f210 <bt_mesh_subnet_kr_phase_set>
	if (status == STATUS_CANNOT_UPDATE) {
   12a86:	280b      	cmp	r0, #11
   12a88:	f89d 300f 	ldrb.w	r3, [sp, #15]
   12a8c:	d103      	bne.n	12a96 <krp_set+0x4a>
		BT_ERR("Invalid kr phase transition 0x%02x", phase);
   12a8e:	461a      	mov	r2, r3
   12a90:	2145      	movs	r1, #69	; 0x45
   12a92:	4805      	ldr	r0, [pc, #20]	; (12aa8 <krp_set+0x5c>)
   12a94:	e7ee      	b.n	12a74 <krp_set+0x28>
	send_krp_status(model, ctx, idx, phase, status);
   12a96:	9000      	str	r0, [sp, #0]
   12a98:	4622      	mov	r2, r4
   12a9a:	4639      	mov	r1, r7
   12a9c:	4630      	mov	r0, r6
   12a9e:	f7ff ffa7 	bl	129f0 <send_krp_status>
   12aa2:	e7e9      	b.n	12a78 <krp_set+0x2c>
   12aa4:	000330c6 	.word	0x000330c6
   12aa8:	00033346 	.word	0x00033346

00012aac <krp_get>:
{
   12aac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   12aae:	4605      	mov	r5, r0
	idx = net_buf_simple_pull_le16(buf);
   12ab0:	4610      	mov	r0, r2
{
   12ab2:	460e      	mov	r6, r1
	idx = net_buf_simple_pull_le16(buf);
   12ab4:	f019 ff57 	bl	2c966 <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
   12ab8:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
   12abc:	4604      	mov	r4, r0
	if (idx > 0xfff) {
   12abe:	d306      	bcc.n	12ace <krp_get+0x22>
		BT_ERR("Invalid NetKeyIndex 0x%04x", idx);
   12ac0:	4602      	mov	r2, r0
   12ac2:	2145      	movs	r1, #69	; 0x45
   12ac4:	4808      	ldr	r0, [pc, #32]	; (12ae8 <krp_get+0x3c>)
   12ac6:	f014 fa52 	bl	26f6e <printk>
}
   12aca:	b004      	add	sp, #16
   12acc:	bd70      	pop	{r4, r5, r6, pc}
	status = bt_mesh_subnet_kr_phase_get(idx, &kr_phase);
   12ace:	f10d 010f 	add.w	r1, sp, #15
   12ad2:	f017 fd62 	bl	2a59a <bt_mesh_subnet_kr_phase_get>
	send_krp_status(model, ctx, idx, kr_phase, status);
   12ad6:	f89d 300f 	ldrb.w	r3, [sp, #15]
   12ada:	9000      	str	r0, [sp, #0]
   12adc:	4622      	mov	r2, r4
   12ade:	4631      	mov	r1, r6
   12ae0:	4628      	mov	r0, r5
   12ae2:	f7ff ff85 	bl	129f0 <send_krp_status>
   12ae6:	e7f0      	b.n	12aca <krp_get+0x1e>
   12ae8:	000330c6 	.word	0x000330c6

00012aec <send_node_id_status>:
{
   12aec:	b5f0      	push	{r4, r5, r6, r7, lr}
   12aee:	b089      	sub	sp, #36	; 0x24
   12af0:	460d      	mov	r5, r1
   12af2:	461e      	mov	r6, r3
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NODE_IDENTITY_STATUS, 4);
   12af4:	a902      	add	r1, sp, #8
   12af6:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
{
   12afa:	4617      	mov	r7, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NODE_IDENTITY_STATUS, 4);
   12afc:	e9cd 3106 	strd	r3, r1, [sp, #24]
{
   12b00:	4604      	mov	r4, r0
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NODE_IDENTITY_STATUS, 4);
   12b02:	9105      	str	r1, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_NODE_IDENTITY_STATUS);
   12b04:	a805      	add	r0, sp, #20
   12b06:	f248 0148 	movw	r1, #32840	; 0x8048
   12b0a:	f018 f910 	bl	2ad2e <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   12b0e:	4639      	mov	r1, r7
   12b10:	a805      	add	r0, sp, #20
   12b12:	f019 ff72 	bl	2c9fa <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, net_idx);
   12b16:	4631      	mov	r1, r6
   12b18:	a805      	add	r0, sp, #20
   12b1a:	f019 ff75 	bl	2ca08 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(&msg, node_id);
   12b1e:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
   12b22:	a805      	add	r0, sp, #20
   12b24:	f019 ff69 	bl	2c9fa <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   12b28:	2300      	movs	r3, #0
   12b2a:	9300      	str	r3, [sp, #0]
   12b2c:	aa05      	add	r2, sp, #20
   12b2e:	4629      	mov	r1, r5
   12b30:	4620      	mov	r0, r4
   12b32:	f018 f925 	bl	2ad80 <bt_mesh_model_send>
   12b36:	b118      	cbz	r0, 12b40 <send_node_id_status+0x54>
		BT_ERR("Unable to send Node Identity Status");
   12b38:	2145      	movs	r1, #69	; 0x45
   12b3a:	4802      	ldr	r0, [pc, #8]	; (12b44 <send_node_id_status+0x58>)
   12b3c:	f014 fa17 	bl	26f6e <printk>
}
   12b40:	b009      	add	sp, #36	; 0x24
   12b42:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12b44:	000337c5 	.word	0x000337c5

00012b48 <node_identity_set>:
{
   12b48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12b4a:	4606      	mov	r6, r0
	idx = net_buf_simple_pull_le16(buf);
   12b4c:	4610      	mov	r0, r2
{
   12b4e:	460f      	mov	r7, r1
   12b50:	4615      	mov	r5, r2
	idx = net_buf_simple_pull_le16(buf);
   12b52:	f019 ff08 	bl	2c966 <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
   12b56:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
   12b5a:	4604      	mov	r4, r0
	if (idx > 0xfff) {
   12b5c:	d307      	bcc.n	12b6e <node_identity_set+0x26>
		BT_WARN("Invalid NetKeyIndex 0x%04x", idx);
   12b5e:	4602      	mov	r2, r0
   12b60:	4814      	ldr	r0, [pc, #80]	; (12bb4 <node_identity_set+0x6c>)
   12b62:	2157      	movs	r1, #87	; 0x57
}
   12b64:	b003      	add	sp, #12
   12b66:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		BT_WARN("Invalid Node ID value 0x%02x", node_id);
   12b6a:	f014 ba00 	b.w	26f6e <printk>
	node_id = net_buf_simple_pull_u8(buf);
   12b6e:	4628      	mov	r0, r5
   12b70:	f019 fef1 	bl	2c956 <net_buf_simple_pull_u8>
	if (node_id != 0x00 && node_id != 0x01) {
   12b74:	2801      	cmp	r0, #1
	node_id = net_buf_simple_pull_u8(buf);
   12b76:	4605      	mov	r5, r0
	if (node_id != 0x00 && node_id != 0x01) {
   12b78:	d903      	bls.n	12b82 <node_identity_set+0x3a>
		BT_WARN("Invalid Node ID value 0x%02x", node_id);
   12b7a:	4602      	mov	r2, r0
   12b7c:	2157      	movs	r1, #87	; 0x57
   12b7e:	480e      	ldr	r0, [pc, #56]	; (12bb8 <node_identity_set+0x70>)
   12b80:	e7f0      	b.n	12b64 <node_identity_set+0x1c>
	status = bt_mesh_subnet_node_id_set(idx, node_id);
   12b82:	4601      	mov	r1, r0
   12b84:	4620      	mov	r0, r4
   12b86:	f017 fd13 	bl	2a5b0 <bt_mesh_subnet_node_id_set>
	if (status == STATUS_INVALID_NETKEY) {
   12b8a:	2804      	cmp	r0, #4
	status = bt_mesh_subnet_node_id_set(idx, node_id);
   12b8c:	4602      	mov	r2, r0
	if (status == STATUS_INVALID_NETKEY) {
   12b8e:	d103      	bne.n	12b98 <node_identity_set+0x50>
		send_node_id_status(model, ctx, status, idx,
   12b90:	2300      	movs	r3, #0
   12b92:	9300      	str	r3, [sp, #0]
	send_node_id_status(model, ctx, status, idx, node_id);
   12b94:	4623      	mov	r3, r4
   12b96:	e005      	b.n	12ba4 <node_identity_set+0x5c>
	if (status == STATUS_FEAT_NOT_SUPP) {
   12b98:	280a      	cmp	r0, #10
   12b9a:	d109      	bne.n	12bb0 <node_identity_set+0x68>
		send_node_id_status(model, ctx, STATUS_SUCCESS, idx,
   12b9c:	2302      	movs	r3, #2
   12b9e:	9300      	str	r3, [sp, #0]
   12ba0:	2200      	movs	r2, #0
   12ba2:	4623      	mov	r3, r4
	send_node_id_status(model, ctx, status, idx, node_id);
   12ba4:	4639      	mov	r1, r7
   12ba6:	4630      	mov	r0, r6
   12ba8:	f7ff ffa0 	bl	12aec <send_node_id_status>
}
   12bac:	b003      	add	sp, #12
   12bae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	send_node_id_status(model, ctx, status, idx, node_id);
   12bb0:	9500      	str	r5, [sp, #0]
   12bb2:	e7ef      	b.n	12b94 <node_identity_set+0x4c>
   12bb4:	000330c6 	.word	0x000330c6
   12bb8:	000335e4 	.word	0x000335e4

00012bbc <node_identity_get>:
{
   12bbc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   12bbe:	4605      	mov	r5, r0
	idx = net_buf_simple_pull_le16(buf);
   12bc0:	4610      	mov	r0, r2
{
   12bc2:	460e      	mov	r6, r1
	idx = net_buf_simple_pull_le16(buf);
   12bc4:	f019 fecf 	bl	2c966 <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
   12bc8:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
   12bcc:	4604      	mov	r4, r0
	if (idx > 0xfff) {
   12bce:	d306      	bcc.n	12bde <node_identity_get+0x22>
		BT_ERR("Invalid NetKeyIndex 0x%04x", idx);
   12bd0:	4602      	mov	r2, r0
   12bd2:	2145      	movs	r1, #69	; 0x45
   12bd4:	4809      	ldr	r0, [pc, #36]	; (12bfc <node_identity_get+0x40>)
   12bd6:	f014 f9ca 	bl	26f6e <printk>
}
   12bda:	b004      	add	sp, #16
   12bdc:	bd70      	pop	{r4, r5, r6, pc}
	status = bt_mesh_subnet_node_id_get(idx, &node_id);
   12bde:	f10d 010f 	add.w	r1, sp, #15
   12be2:	f017 fcf9 	bl	2a5d8 <bt_mesh_subnet_node_id_get>
	send_node_id_status(model, ctx, status, idx, node_id);
   12be6:	f89d 300f 	ldrb.w	r3, [sp, #15]
   12bea:	9300      	str	r3, [sp, #0]
   12bec:	4602      	mov	r2, r0
   12bee:	4623      	mov	r3, r4
   12bf0:	4631      	mov	r1, r6
   12bf2:	4628      	mov	r0, r5
   12bf4:	f7ff ff7a 	bl	12aec <send_node_id_status>
   12bf8:	e7ef      	b.n	12bda <node_identity_get+0x1e>
   12bfa:	bf00      	nop
   12bfc:	000330c6 	.word	0x000330c6

00012c00 <send_net_key_status>:
{
   12c00:	b5f0      	push	{r4, r5, r6, r7, lr}
   12c02:	b089      	sub	sp, #36	; 0x24
   12c04:	460d      	mov	r5, r1
   12c06:	461f      	mov	r7, r3
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_KEY_STATUS, 3);
   12c08:	a902      	add	r1, sp, #8
   12c0a:	f44f 2310 	mov.w	r3, #589824	; 0x90000
   12c0e:	e9cd 3106 	strd	r3, r1, [sp, #24]
{
   12c12:	4604      	mov	r4, r0
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_KEY_STATUS, 3);
   12c14:	9105      	str	r1, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_NET_KEY_STATUS);
   12c16:	a805      	add	r0, sp, #20
   12c18:	f248 0144 	movw	r1, #32836	; 0x8044
{
   12c1c:	4616      	mov	r6, r2
	bt_mesh_model_msg_init(&msg, OP_NET_KEY_STATUS);
   12c1e:	f018 f886 	bl	2ad2e <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   12c22:	4639      	mov	r1, r7
   12c24:	a805      	add	r0, sp, #20
   12c26:	f019 fee8 	bl	2c9fa <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, idx);
   12c2a:	4631      	mov	r1, r6
   12c2c:	a805      	add	r0, sp, #20
   12c2e:	f019 feeb 	bl	2ca08 <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   12c32:	2300      	movs	r3, #0
   12c34:	9300      	str	r3, [sp, #0]
   12c36:	aa05      	add	r2, sp, #20
   12c38:	4629      	mov	r1, r5
   12c3a:	4620      	mov	r0, r4
   12c3c:	f018 f8a0 	bl	2ad80 <bt_mesh_model_send>
   12c40:	b118      	cbz	r0, 12c4a <send_net_key_status+0x4a>
		BT_ERR("Unable to send NetKey Status");
   12c42:	2145      	movs	r1, #69	; 0x45
   12c44:	4802      	ldr	r0, [pc, #8]	; (12c50 <send_net_key_status+0x50>)
   12c46:	f014 f992 	bl	26f6e <printk>
}
   12c4a:	b009      	add	sp, #36	; 0x24
   12c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12c4e:	bf00      	nop
   12c50:	000337a3 	.word	0x000337a3

00012c54 <net_key_del>:
{
   12c54:	b570      	push	{r4, r5, r6, lr}
   12c56:	4606      	mov	r6, r0
	del_idx = net_buf_simple_pull_le16(buf);
   12c58:	4610      	mov	r0, r2
{
   12c5a:	460d      	mov	r5, r1
	del_idx = net_buf_simple_pull_le16(buf);
   12c5c:	f019 fe83 	bl	2c966 <net_buf_simple_pull_le16>
	if (del_idx > 0xfff) {
   12c60:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	del_idx = net_buf_simple_pull_le16(buf);
   12c64:	4604      	mov	r4, r0
	if (del_idx > 0xfff) {
   12c66:	d306      	bcc.n	12c76 <net_key_del+0x22>
		BT_ERR("Invalid NetKeyIndex 0x%04x", del_idx);
   12c68:	4602      	mov	r2, r0
   12c6a:	2145      	movs	r1, #69	; 0x45
   12c6c:	4809      	ldr	r0, [pc, #36]	; (12c94 <net_key_del+0x40>)
}
   12c6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Invalid NetKeyIndex 0x%04x", del_idx);
   12c72:	f014 b97c 	b.w	26f6e <printk>
	if (ctx->net_idx == del_idx) {
   12c76:	882a      	ldrh	r2, [r5, #0]
   12c78:	4282      	cmp	r2, r0
   12c7a:	d106      	bne.n	12c8a <net_key_del+0x36>
		send_net_key_status(model, ctx, del_idx,
   12c7c:	230c      	movs	r3, #12
	send_net_key_status(model, ctx, del_idx, STATUS_SUCCESS);
   12c7e:	4629      	mov	r1, r5
   12c80:	4630      	mov	r0, r6
}
   12c82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	send_net_key_status(model, ctx, del_idx, STATUS_SUCCESS);
   12c86:	f7ff bfbb 	b.w	12c00 <send_net_key_status>
	bt_mesh_subnet_del(del_idx);
   12c8a:	f017 fc54 	bl	2a536 <bt_mesh_subnet_del>
	send_net_key_status(model, ctx, del_idx, STATUS_SUCCESS);
   12c8e:	2300      	movs	r3, #0
   12c90:	4622      	mov	r2, r4
   12c92:	e7f4      	b.n	12c7e <net_key_del+0x2a>
   12c94:	000330c6 	.word	0x000330c6

00012c98 <net_key_update>:
{
   12c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12c9c:	4606      	mov	r6, r0
	idx = net_buf_simple_pull_le16(buf);
   12c9e:	4610      	mov	r0, r2
{
   12ca0:	460f      	mov	r7, r1
   12ca2:	4615      	mov	r5, r2
	idx = net_buf_simple_pull_le16(buf);
   12ca4:	f019 fe5f 	bl	2c966 <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
   12ca8:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
   12cac:	4604      	mov	r4, r0
	if (idx > 0xfff) {
   12cae:	d306      	bcc.n	12cbe <net_key_update+0x26>
		BT_ERR("Invalid NetKeyIndex 0x%04x", idx);
   12cb0:	4602      	mov	r2, r0
   12cb2:	2145      	movs	r1, #69	; 0x45
   12cb4:	4807      	ldr	r0, [pc, #28]	; (12cd4 <net_key_update+0x3c>)
}
   12cb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_ERR("Invalid NetKeyIndex 0x%04x", idx);
   12cba:	f014 b958 	b.w	26f6e <printk>
	status = bt_mesh_subnet_update(idx, buf->data);
   12cbe:	6829      	ldr	r1, [r5, #0]
   12cc0:	f017 fc0a 	bl	2a4d8 <bt_mesh_subnet_update>
	send_net_key_status(model, ctx, idx, status);
   12cc4:	4622      	mov	r2, r4
   12cc6:	4603      	mov	r3, r0
   12cc8:	4639      	mov	r1, r7
   12cca:	4630      	mov	r0, r6
}
   12ccc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	send_net_key_status(model, ctx, idx, status);
   12cd0:	f7ff bf96 	b.w	12c00 <send_net_key_status>
   12cd4:	000330c6 	.word	0x000330c6

00012cd8 <net_key_add>:
{
   12cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12cdc:	4606      	mov	r6, r0
	idx = net_buf_simple_pull_le16(buf);
   12cde:	4610      	mov	r0, r2
{
   12ce0:	460f      	mov	r7, r1
   12ce2:	4615      	mov	r5, r2
	idx = net_buf_simple_pull_le16(buf);
   12ce4:	f019 fe3f 	bl	2c966 <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
   12ce8:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
   12cec:	4604      	mov	r4, r0
	if (idx > 0xfff) {
   12cee:	d306      	bcc.n	12cfe <net_key_add+0x26>
		BT_ERR("Invalid NetKeyIndex 0x%04x", idx);
   12cf0:	4602      	mov	r2, r0
   12cf2:	2145      	movs	r1, #69	; 0x45
   12cf4:	4807      	ldr	r0, [pc, #28]	; (12d14 <net_key_add+0x3c>)
}
   12cf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_ERR("Invalid NetKeyIndex 0x%04x", idx);
   12cfa:	f014 b938 	b.w	26f6e <printk>
	status = bt_mesh_subnet_add(idx, buf->data);
   12cfe:	6829      	ldr	r1, [r5, #0]
   12d00:	f7fc fa5a 	bl	f1b8 <bt_mesh_subnet_add>
	send_net_key_status(model, ctx, idx, status);
   12d04:	4622      	mov	r2, r4
   12d06:	4603      	mov	r3, r0
   12d08:	4639      	mov	r1, r7
   12d0a:	4630      	mov	r0, r6
}
   12d0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	send_net_key_status(model, ctx, idx, status);
   12d10:	f7ff bf76 	b.w	12c00 <send_net_key_status>
   12d14:	000330c6 	.word	0x000330c6

00012d18 <send_app_key_status>:
{
   12d18:	b5f0      	push	{r4, r5, r6, r7, lr}
   12d1a:	b089      	sub	sp, #36	; 0x24
   12d1c:	460d      	mov	r5, r1
   12d1e:	461e      	mov	r6, r3
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_APP_KEY_STATUS, 4);
   12d20:	a902      	add	r1, sp, #8
   12d22:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
   12d26:	e9cd 3106 	strd	r3, r1, [sp, #24]
{
   12d2a:	4617      	mov	r7, r2
   12d2c:	4604      	mov	r4, r0
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_APP_KEY_STATUS, 4);
   12d2e:	9105      	str	r1, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_APP_KEY_STATUS);
   12d30:	a805      	add	r0, sp, #20
   12d32:	f248 0103 	movw	r1, #32771	; 0x8003
   12d36:	f017 fffa 	bl	2ad2e <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   12d3a:	4639      	mov	r1, r7
   12d3c:	a805      	add	r0, sp, #20
   12d3e:	f019 fe5c 	bl	2c9fa <net_buf_simple_add_u8>
	key_idx_pack(&msg, net_idx, app_idx);
   12d42:	4632      	mov	r2, r6
   12d44:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
   12d48:	a805      	add	r0, sp, #20
   12d4a:	f018 f875 	bl	2ae38 <key_idx_pack>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   12d4e:	2300      	movs	r3, #0
   12d50:	9300      	str	r3, [sp, #0]
   12d52:	aa05      	add	r2, sp, #20
   12d54:	4629      	mov	r1, r5
   12d56:	4620      	mov	r0, r4
   12d58:	f018 f812 	bl	2ad80 <bt_mesh_model_send>
   12d5c:	b118      	cbz	r0, 12d66 <send_app_key_status+0x4e>
		BT_ERR("Unable to send App Key Status response");
   12d5e:	2145      	movs	r1, #69	; 0x45
   12d60:	4802      	ldr	r0, [pc, #8]	; (12d6c <send_app_key_status+0x54>)
   12d62:	f014 f904 	bl	26f6e <printk>
}
   12d66:	b009      	add	sp, #36	; 0x24
   12d68:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12d6a:	bf00      	nop
   12d6c:	000336a7 	.word	0x000336a7

00012d70 <send_friend_status>:
{
   12d70:	b530      	push	{r4, r5, lr}
   12d72:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_FRIEND_STATUS, 1);
   12d74:	ab03      	add	r3, sp, #12
   12d76:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   12d7a:	4604      	mov	r4, r0
   12d7c:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_FRIEND_STATUS);
   12d7e:	a805      	add	r0, sp, #20
   12d80:	f248 0111 	movw	r1, #32785	; 0x8011
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_FRIEND_STATUS, 1);
   12d84:	e9cd 2306 	strd	r2, r3, [sp, #24]
   12d88:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_FRIEND_STATUS);
   12d8a:	f017 ffd0 	bl	2ad2e <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_friend_get());
   12d8e:	f017 facb 	bl	2a328 <bt_mesh_friend_get>
   12d92:	4601      	mov	r1, r0
   12d94:	a805      	add	r0, sp, #20
   12d96:	f019 fe30 	bl	2c9fa <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   12d9a:	2300      	movs	r3, #0
   12d9c:	9300      	str	r3, [sp, #0]
   12d9e:	aa05      	add	r2, sp, #20
   12da0:	4629      	mov	r1, r5
   12da2:	4620      	mov	r0, r4
   12da4:	f017 ffec 	bl	2ad80 <bt_mesh_model_send>
   12da8:	b118      	cbz	r0, 12db2 <send_friend_status+0x42>
		BT_ERR("Unable to send Friend Status");
   12daa:	2145      	movs	r1, #69	; 0x45
   12dac:	4802      	ldr	r0, [pc, #8]	; (12db8 <send_friend_status+0x48>)
   12dae:	f014 f8de 	bl	26f6e <printk>
}
   12db2:	b009      	add	sp, #36	; 0x24
   12db4:	bd30      	pop	{r4, r5, pc}
   12db6:	bf00      	nop
   12db8:	000336d3 	.word	0x000336d3

00012dbc <friend_set>:
{
   12dbc:	b538      	push	{r3, r4, r5, lr}
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   12dbe:	6813      	ldr	r3, [r2, #0]
   12dc0:	781a      	ldrb	r2, [r3, #0]
   12dc2:	2a01      	cmp	r2, #1
{
   12dc4:	4604      	mov	r4, r0
   12dc6:	460d      	mov	r5, r1
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   12dc8:	d905      	bls.n	12dd6 <friend_set+0x1a>
		BT_WARN("Invalid Friend value 0x%02x", buf->data[0]);
   12dca:	2157      	movs	r1, #87	; 0x57
   12dcc:	4806      	ldr	r0, [pc, #24]	; (12de8 <friend_set+0x2c>)
}
   12dce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_WARN("Invalid Friend value 0x%02x", buf->data[0]);
   12dd2:	f014 b8cc 	b.w	26f6e <printk>
	(void)bt_mesh_friend_set(buf->data[0]);
   12dd6:	4610      	mov	r0, r2
   12dd8:	f017 fa8f 	bl	2a2fa <bt_mesh_friend_set>
	send_friend_status(model, ctx);
   12ddc:	4629      	mov	r1, r5
   12dde:	4620      	mov	r0, r4
}
   12de0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	send_friend_status(model, ctx);
   12de4:	f7ff bfc4 	b.w	12d70 <send_friend_status>
   12de8:	00033272 	.word	0x00033272

00012dec <mod_app_get>:
{
   12dec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12df0:	4614      	mov	r4, r2
   12df2:	b08d      	sub	sp, #52	; 0x34
	NET_BUF_SIMPLE_DEFINE(msg,
   12df4:	ab07      	add	r3, sp, #28
   12df6:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
{
   12dfa:	4606      	mov	r6, r0
	elem_addr = net_buf_simple_pull_le16(buf);
   12dfc:	4620      	mov	r0, r4
	NET_BUF_SIMPLE_DEFINE(msg,
   12dfe:	9304      	str	r3, [sp, #16]
   12e00:	e9cd 2305 	strd	r2, r3, [sp, #20]
{
   12e04:	460f      	mov	r7, r1
	elem_addr = net_buf_simple_pull_le16(buf);
   12e06:	f019 fdae 	bl	2c966 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   12e0a:	b203      	sxth	r3, r0
   12e0c:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   12e0e:	4681      	mov	r9, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   12e10:	dc06      	bgt.n	12e20 <mod_app_get+0x34>
		BT_WARN("Prohibited element address");
   12e12:	4828      	ldr	r0, [pc, #160]	; (12eb4 <mod_app_get+0xc8>)
   12e14:	2157      	movs	r1, #87	; 0x57
		BT_ERR("Unable to send Model Application List message");
   12e16:	f014 f8aa 	bl	26f6e <printk>
}
   12e1a:	b00d      	add	sp, #52	; 0x34
   12e1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	mod_id = buf->data;
   12e20:	f8d4 8000 	ldr.w	r8, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   12e24:	f7ff f8d2 	bl	11fcc <bt_mesh_elem_find>
	if (!elem) {
   12e28:	4605      	mov	r5, r0
   12e2a:	bb58      	cbnz	r0, 12e84 <mod_app_get+0x98>
		vnd = (buf->len == 4U);
   12e2c:	88a3      	ldrh	r3, [r4, #4]
   12e2e:	1f1a      	subs	r2, r3, #4
   12e30:	4253      	negs	r3, r2
   12e32:	4153      	adcs	r3, r2
   12e34:	f88d 300f 	strb.w	r3, [sp, #15]
		status = STATUS_INVALID_ADDRESS;
   12e38:	2401      	movs	r4, #1
	if (vnd) {
   12e3a:	f89d 300f 	ldrb.w	r3, [sp, #15]
   12e3e:	b35b      	cbz	r3, 12e98 <mod_app_get+0xac>
		bt_mesh_model_msg_init(&msg, OP_VND_MOD_APP_LIST);
   12e40:	f248 014e 	movw	r1, #32846	; 0x804e
		bt_mesh_model_msg_init(&msg, OP_SIG_MOD_APP_LIST);
   12e44:	a804      	add	r0, sp, #16
   12e46:	f017 ff72 	bl	2ad2e <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   12e4a:	4621      	mov	r1, r4
   12e4c:	a804      	add	r0, sp, #16
   12e4e:	f019 fdd4 	bl	2c9fa <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, elem_addr);
   12e52:	4649      	mov	r1, r9
   12e54:	a804      	add	r0, sp, #16
   12e56:	f019 fdd7 	bl	2ca08 <net_buf_simple_add_le16>
	if (vnd) {
   12e5a:	f89d 300f 	ldrb.w	r3, [sp, #15]
   12e5e:	b1f3      	cbz	r3, 12e9e <mod_app_get+0xb2>
		net_buf_simple_add_mem(&msg, mod_id, 4);
   12e60:	2204      	movs	r2, #4
		net_buf_simple_add_mem(&msg, mod_id, 2);
   12e62:	4641      	mov	r1, r8
   12e64:	a804      	add	r0, sp, #16
   12e66:	f019 fdbc 	bl	2c9e2 <net_buf_simple_add_mem>
	if (mod) {
   12e6a:	b9d5      	cbnz	r5, 12ea2 <mod_app_get+0xb6>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   12e6c:	2300      	movs	r3, #0
   12e6e:	9300      	str	r3, [sp, #0]
   12e70:	aa04      	add	r2, sp, #16
   12e72:	4639      	mov	r1, r7
   12e74:	4630      	mov	r0, r6
   12e76:	f017 ff83 	bl	2ad80 <bt_mesh_model_send>
   12e7a:	2800      	cmp	r0, #0
   12e7c:	d0cd      	beq.n	12e1a <mod_app_get+0x2e>
		BT_ERR("Unable to send Model Application List message");
   12e7e:	2145      	movs	r1, #69	; 0x45
   12e80:	480d      	ldr	r0, [pc, #52]	; (12eb8 <mod_app_get+0xcc>)
   12e82:	e7c8      	b.n	12e16 <mod_app_get+0x2a>
	mod = get_model(elem, buf, &vnd);
   12e84:	4621      	mov	r1, r4
   12e86:	f10d 020f 	add.w	r2, sp, #15
   12e8a:	f018 f875 	bl	2af78 <get_model>
		status = STATUS_INVALID_MODEL;
   12e8e:	1e05      	subs	r5, r0, #0
   12e90:	bf14      	ite	ne
   12e92:	2400      	movne	r4, #0
   12e94:	2402      	moveq	r4, #2
   12e96:	e7d0      	b.n	12e3a <mod_app_get+0x4e>
		bt_mesh_model_msg_init(&msg, OP_SIG_MOD_APP_LIST);
   12e98:	f248 014c 	movw	r1, #32844	; 0x804c
   12e9c:	e7d2      	b.n	12e44 <mod_app_get+0x58>
		net_buf_simple_add_mem(&msg, mod_id, 2);
   12e9e:	2202      	movs	r2, #2
   12ea0:	e7df      	b.n	12e62 <mod_app_get+0x76>
			if (mod->keys[i] != BT_MESH_KEY_UNUSED) {
   12ea2:	89a9      	ldrh	r1, [r5, #12]
   12ea4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   12ea8:	4299      	cmp	r1, r3
   12eaa:	d0df      	beq.n	12e6c <mod_app_get+0x80>
				net_buf_simple_add_le16(&msg, mod->keys[i]);
   12eac:	a804      	add	r0, sp, #16
   12eae:	f019 fdab 	bl	2ca08 <net_buf_simple_add_le16>
   12eb2:	e7db      	b.n	12e6c <mod_app_get+0x80>
   12eb4:	000334dc 	.word	0x000334dc
   12eb8:	0003342a 	.word	0x0003342a

00012ebc <mod_sub_del_all>:
{
   12ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12ec0:	4606      	mov	r6, r0
   12ec2:	b086      	sub	sp, #24
	elem_addr = net_buf_simple_pull_le16(buf);
   12ec4:	4610      	mov	r0, r2
{
   12ec6:	460f      	mov	r7, r1
   12ec8:	4614      	mov	r4, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   12eca:	f019 fd4c 	bl	2c966 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   12ece:	b203      	sxth	r3, r0
   12ed0:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   12ed2:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   12ed4:	dc06      	bgt.n	12ee4 <mod_sub_del_all+0x28>
		BT_WARN("Prohibited element address");
   12ed6:	2157      	movs	r1, #87	; 0x57
   12ed8:	4818      	ldr	r0, [pc, #96]	; (12f3c <mod_sub_del_all+0x80>)
   12eda:	f014 f848 	bl	26f6e <printk>
}
   12ede:	b006      	add	sp, #24
   12ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	mod_id = buf->data;
   12ee4:	f8d4 8000 	ldr.w	r8, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   12ee8:	f7ff f870 	bl	11fcc <bt_mesh_elem_find>
	if (!elem) {
   12eec:	b990      	cbnz	r0, 12f14 <mod_sub_del_all+0x58>
		vnd = (buf->len == 4U);
   12eee:	88a3      	ldrh	r3, [r4, #4]
   12ef0:	1f1a      	subs	r2, r3, #4
   12ef2:	4253      	negs	r3, r2
   12ef4:	4153      	adcs	r3, r2
   12ef6:	f88d 3017 	strb.w	r3, [sp, #23]
		status = STATUS_INVALID_ADDRESS;
   12efa:	2201      	movs	r2, #1
	send_mod_sub_status(model, ctx, status, elem_addr,
   12efc:	f89d 3017 	ldrb.w	r3, [sp, #23]
   12f00:	e9cd 8301 	strd	r8, r3, [sp, #4]
   12f04:	2300      	movs	r3, #0
   12f06:	9300      	str	r3, [sp, #0]
   12f08:	4639      	mov	r1, r7
   12f0a:	462b      	mov	r3, r5
   12f0c:	4630      	mov	r0, r6
   12f0e:	f7ff fb3b 	bl	12588 <send_mod_sub_status>
   12f12:	e7e4      	b.n	12ede <mod_sub_del_all+0x22>
	mod = get_model(elem, buf, &vnd);
   12f14:	4621      	mov	r1, r4
   12f16:	f10d 0217 	add.w	r2, sp, #23
   12f1a:	f018 f82d 	bl	2af78 <get_model>
	if (!mod) {
   12f1e:	4604      	mov	r4, r0
   12f20:	b150      	cbz	r0, 12f38 <mod_sub_del_all+0x7c>
	bt_mesh_model_tree_walk(bt_mesh_model_root(mod), mod_sub_clear_visitor,
   12f22:	f017 ff70 	bl	2ae06 <bt_mesh_model_root>
   12f26:	2200      	movs	r2, #0
   12f28:	4905      	ldr	r1, [pc, #20]	; (12f40 <mod_sub_del_all+0x84>)
   12f2a:	f017 ff6d 	bl	2ae08 <bt_mesh_model_tree_walk>
		bt_mesh_model_sub_store(mod);
   12f2e:	4620      	mov	r0, r4
   12f30:	f017 ff74 	bl	2ae1c <bt_mesh_model_sub_store>
	status = STATUS_SUCCESS;
   12f34:	2200      	movs	r2, #0
   12f36:	e7e1      	b.n	12efc <mod_sub_del_all+0x40>
		status = STATUS_INVALID_MODEL;
   12f38:	2202      	movs	r2, #2
   12f3a:	e7df      	b.n	12efc <mod_sub_del_all+0x40>
   12f3c:	000334dc 	.word	0x000334dc
   12f40:	0002ae99 	.word	0x0002ae99

00012f44 <mod_sub_overwrite>:
{
   12f44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12f48:	4607      	mov	r7, r0
   12f4a:	b087      	sub	sp, #28
	elem_addr = net_buf_simple_pull_le16(buf);
   12f4c:	4610      	mov	r0, r2
{
   12f4e:	4688      	mov	r8, r1
   12f50:	4614      	mov	r4, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   12f52:	f019 fd08 	bl	2c966 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   12f56:	b203      	sxth	r3, r0
   12f58:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   12f5a:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   12f5c:	dc06      	bgt.n	12f6c <mod_sub_overwrite+0x28>
		BT_WARN("Prohibited element address");
   12f5e:	2157      	movs	r1, #87	; 0x57
   12f60:	481e      	ldr	r0, [pc, #120]	; (12fdc <mod_sub_overwrite+0x98>)
   12f62:	f014 f804 	bl	26f6e <printk>
}
   12f66:	b007      	add	sp, #28
   12f68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	sub_addr = net_buf_simple_pull_le16(buf);
   12f6c:	4620      	mov	r0, r4
   12f6e:	f019 fcfa 	bl	2c966 <net_buf_simple_pull_le16>
   12f72:	4606      	mov	r6, r0
	elem = bt_mesh_elem_find(elem_addr);
   12f74:	4628      	mov	r0, r5
	mod_id = buf->data;
   12f76:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   12f7a:	f7ff f827 	bl	11fcc <bt_mesh_elem_find>
	if (!elem) {
   12f7e:	b938      	cbnz	r0, 12f90 <mod_sub_overwrite+0x4c>
		vnd = (buf->len == 4U);
   12f80:	88a3      	ldrh	r3, [r4, #4]
   12f82:	1f1a      	subs	r2, r3, #4
   12f84:	4253      	negs	r3, r2
   12f86:	4153      	adcs	r3, r2
   12f88:	f88d 3017 	strb.w	r3, [sp, #23]
		status = STATUS_INVALID_ADDRESS;
   12f8c:	2201      	movs	r2, #1
   12f8e:	e017      	b.n	12fc0 <mod_sub_overwrite+0x7c>
	mod = get_model(elem, buf, &vnd);
   12f90:	4621      	mov	r1, r4
   12f92:	f10d 0217 	add.w	r2, sp, #23
   12f96:	f017 ffef 	bl	2af78 <get_model>
	if (!mod) {
   12f9a:	4604      	mov	r4, r0
   12f9c:	b1d8      	cbz	r0, 12fd6 <mod_sub_overwrite+0x92>
	if (!BT_MESH_ADDR_IS_GROUP(sub_addr)) {
   12f9e:	f506 4380 	add.w	r3, r6, #16384	; 0x4000
   12fa2:	b29b      	uxth	r3, r3
   12fa4:	f5b3 5f7c 	cmp.w	r3, #16128	; 0x3f00
   12fa8:	d8f0      	bhi.n	12f8c <mod_sub_overwrite+0x48>
		bt_mesh_model_tree_walk(bt_mesh_model_root(mod),
   12faa:	f017 ff2c 	bl	2ae06 <bt_mesh_model_root>
   12fae:	2200      	movs	r2, #0
   12fb0:	490b      	ldr	r1, [pc, #44]	; (12fe0 <mod_sub_overwrite+0x9c>)
   12fb2:	f017 ff29 	bl	2ae08 <bt_mesh_model_tree_walk>
		mod->groups[0] = sub_addr;
   12fb6:	81e6      	strh	r6, [r4, #14]
			bt_mesh_model_sub_store(mod);
   12fb8:	4620      	mov	r0, r4
   12fba:	f017 ff2f 	bl	2ae1c <bt_mesh_model_sub_store>
		status = STATUS_SUCCESS;
   12fbe:	2200      	movs	r2, #0
	send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   12fc0:	f89d 3017 	ldrb.w	r3, [sp, #23]
   12fc4:	9600      	str	r6, [sp, #0]
   12fc6:	e9cd 9301 	strd	r9, r3, [sp, #4]
   12fca:	4641      	mov	r1, r8
   12fcc:	462b      	mov	r3, r5
   12fce:	4638      	mov	r0, r7
   12fd0:	f7ff fada 	bl	12588 <send_mod_sub_status>
   12fd4:	e7c7      	b.n	12f66 <mod_sub_overwrite+0x22>
		status = STATUS_INVALID_MODEL;
   12fd6:	2202      	movs	r2, #2
   12fd8:	e7f2      	b.n	12fc0 <mod_sub_overwrite+0x7c>
   12fda:	bf00      	nop
   12fdc:	000334dc 	.word	0x000334dc
   12fe0:	0002ae99 	.word	0x0002ae99

00012fe4 <mod_sub_va_overwrite>:
{
   12fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12fe8:	b086      	sub	sp, #24
	uint16_t elem_addr, sub_addr = BT_MESH_ADDR_UNASSIGNED;
   12fea:	2300      	movs	r3, #0
{
   12fec:	4607      	mov	r7, r0
	elem_addr = net_buf_simple_pull_le16(buf);
   12fee:	4610      	mov	r0, r2
	uint16_t elem_addr, sub_addr = BT_MESH_ADDR_UNASSIGNED;
   12ff0:	f8ad 3016 	strh.w	r3, [sp, #22]
{
   12ff4:	4688      	mov	r8, r1
   12ff6:	4614      	mov	r4, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   12ff8:	f019 fcb5 	bl	2c966 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   12ffc:	b203      	sxth	r3, r0
   12ffe:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   13000:	4606      	mov	r6, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   13002:	dc06      	bgt.n	13012 <mod_sub_va_overwrite+0x2e>
		BT_WARN("Prohibited element address");
   13004:	2157      	movs	r1, #87	; 0x57
   13006:	4822      	ldr	r0, [pc, #136]	; (13090 <mod_sub_va_overwrite+0xac>)
   13008:	f013 ffb1 	bl	26f6e <printk>
}
   1300c:	b006      	add	sp, #24
   1300e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	label_uuid = net_buf_simple_pull_mem(buf, 16);
   13012:	2110      	movs	r1, #16
   13014:	4620      	mov	r0, r4
   13016:	f00c f8cf 	bl	1f1b8 <net_buf_simple_pull_mem>
   1301a:	4682      	mov	sl, r0
	elem = bt_mesh_elem_find(elem_addr);
   1301c:	4630      	mov	r0, r6
	mod_id = buf->data;
   1301e:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   13022:	f7fe ffd3 	bl	11fcc <bt_mesh_elem_find>
	if (!elem) {
   13026:	b9a0      	cbnz	r0, 13052 <mod_sub_va_overwrite+0x6e>
		vnd = (buf->len == 4U);
   13028:	88a3      	ldrh	r3, [r4, #4]
   1302a:	1f1a      	subs	r2, r3, #4
   1302c:	4253      	negs	r3, r2
   1302e:	4153      	adcs	r3, r2
   13030:	f88d 3015 	strb.w	r3, [sp, #21]
		status = STATUS_INVALID_ADDRESS;
   13034:	2401      	movs	r4, #1
	send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   13036:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1303a:	e9cd 9301 	strd	r9, r3, [sp, #4]
   1303e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   13042:	9300      	str	r3, [sp, #0]
   13044:	4622      	mov	r2, r4
   13046:	4633      	mov	r3, r6
   13048:	4641      	mov	r1, r8
   1304a:	4638      	mov	r0, r7
   1304c:	f7ff fa9c 	bl	12588 <send_mod_sub_status>
   13050:	e7dc      	b.n	1300c <mod_sub_va_overwrite+0x28>
	mod = get_model(elem, buf, &vnd);
   13052:	f10d 0215 	add.w	r2, sp, #21
   13056:	4621      	mov	r1, r4
   13058:	f017 ff8e 	bl	2af78 <get_model>
	if (!mod) {
   1305c:	4605      	mov	r5, r0
   1305e:	b1a8      	cbz	r0, 1308c <mod_sub_va_overwrite+0xa8>
		status = bt_mesh_va_add(label_uuid, &sub_addr);
   13060:	f10d 0116 	add.w	r1, sp, #22
   13064:	4650      	mov	r0, sl
   13066:	f7fd fa93 	bl	10590 <bt_mesh_va_add>
		if (status == STATUS_SUCCESS) {
   1306a:	4604      	mov	r4, r0
   1306c:	2800      	cmp	r0, #0
   1306e:	d1e2      	bne.n	13036 <mod_sub_va_overwrite+0x52>
			bt_mesh_model_tree_walk(bt_mesh_model_root(mod),
   13070:	4628      	mov	r0, r5
   13072:	f017 fec8 	bl	2ae06 <bt_mesh_model_root>
   13076:	4622      	mov	r2, r4
   13078:	4906      	ldr	r1, [pc, #24]	; (13094 <mod_sub_va_overwrite+0xb0>)
   1307a:	f017 fec5 	bl	2ae08 <bt_mesh_model_tree_walk>
			mod->groups[0] = sub_addr;
   1307e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   13082:	81eb      	strh	r3, [r5, #14]
				bt_mesh_model_sub_store(mod);
   13084:	4628      	mov	r0, r5
   13086:	f017 fec9 	bl	2ae1c <bt_mesh_model_sub_store>
   1308a:	e7d4      	b.n	13036 <mod_sub_va_overwrite+0x52>
		status = STATUS_INVALID_MODEL;
   1308c:	2402      	movs	r4, #2
   1308e:	e7d2      	b.n	13036 <mod_sub_va_overwrite+0x52>
   13090:	000334dc 	.word	0x000334dc
   13094:	0002ae99 	.word	0x0002ae99

00013098 <mod_sub_va_del>:
{
   13098:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1309c:	4606      	mov	r6, r0
   1309e:	b087      	sub	sp, #28
	elem_addr = net_buf_simple_pull_le16(buf);
   130a0:	4610      	mov	r0, r2
{
   130a2:	460f      	mov	r7, r1
   130a4:	4614      	mov	r4, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   130a6:	f019 fc5e 	bl	2c966 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   130aa:	b203      	sxth	r3, r0
   130ac:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   130ae:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   130b0:	dc06      	bgt.n	130c0 <mod_sub_va_del+0x28>
		BT_WARN("Prohibited element address");
   130b2:	2157      	movs	r1, #87	; 0x57
   130b4:	4824      	ldr	r0, [pc, #144]	; (13148 <mod_sub_va_del+0xb0>)
   130b6:	f013 ff5a 	bl	26f6e <printk>
}
   130ba:	b007      	add	sp, #28
   130bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	label_uuid = net_buf_simple_pull_mem(buf, 16);
   130c0:	2110      	movs	r1, #16
   130c2:	4620      	mov	r0, r4
   130c4:	f00c f878 	bl	1f1b8 <net_buf_simple_pull_mem>
   130c8:	4681      	mov	r9, r0
	elem = bt_mesh_elem_find(elem_addr);
   130ca:	4628      	mov	r0, r5
	mod_id = buf->data;
   130cc:	f8d4 8000 	ldr.w	r8, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   130d0:	f7fe ff7c 	bl	11fcc <bt_mesh_elem_find>
	if (!elem) {
   130d4:	b9b0      	cbnz	r0, 13104 <mod_sub_va_del+0x6c>
		vnd = (buf->len == 4U);
   130d6:	88a3      	ldrh	r3, [r4, #4]
		mod = NULL;
   130d8:	9005      	str	r0, [sp, #20]
		vnd = (buf->len == 4U);
   130da:	1f19      	subs	r1, r3, #4
   130dc:	424b      	negs	r3, r1
   130de:	414b      	adcs	r3, r1
   130e0:	f88d 3011 	strb.w	r3, [sp, #17]
		sub_addr = BT_MESH_ADDR_UNASSIGNED;
   130e4:	f8ad 0012 	strh.w	r0, [sp, #18]
		status = STATUS_INVALID_ADDRESS;
   130e8:	2201      	movs	r2, #1
	send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   130ea:	f89d 3011 	ldrb.w	r3, [sp, #17]
   130ee:	e9cd 8301 	strd	r8, r3, [sp, #4]
   130f2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   130f6:	9300      	str	r3, [sp, #0]
   130f8:	4639      	mov	r1, r7
   130fa:	462b      	mov	r3, r5
   130fc:	4630      	mov	r0, r6
   130fe:	f7ff fa43 	bl	12588 <send_mod_sub_status>
   13102:	e7da      	b.n	130ba <mod_sub_va_del+0x22>
	mod = get_model(elem, buf, &vnd);
   13104:	f10d 0211 	add.w	r2, sp, #17
   13108:	4621      	mov	r1, r4
   1310a:	f017 ff35 	bl	2af78 <get_model>
   1310e:	9005      	str	r0, [sp, #20]
	if (!mod) {
   13110:	b918      	cbnz	r0, 1311a <mod_sub_va_del+0x82>
		sub_addr = BT_MESH_ADDR_UNASSIGNED;
   13112:	f8ad 0012 	strh.w	r0, [sp, #18]
		status = STATUS_INVALID_MODEL;
   13116:	2202      	movs	r2, #2
		goto send_status;
   13118:	e7e7      	b.n	130ea <mod_sub_va_del+0x52>
	status = bt_mesh_va_del(label_uuid, &sub_addr);
   1311a:	f10d 0112 	add.w	r1, sp, #18
   1311e:	4648      	mov	r0, r9
   13120:	f7fd fa78 	bl	10614 <bt_mesh_va_del>
	if (sub_addr == BT_MESH_ADDR_UNASSIGNED) {
   13124:	f8bd 1012 	ldrh.w	r1, [sp, #18]
	status = bt_mesh_va_del(label_uuid, &sub_addr);
   13128:	4602      	mov	r2, r0
	if (sub_addr == BT_MESH_ADDR_UNASSIGNED) {
   1312a:	2900      	cmp	r1, #0
   1312c:	d0dd      	beq.n	130ea <mod_sub_va_del+0x52>
	match = bt_mesh_model_find_group(&mod, sub_addr);
   1312e:	a805      	add	r0, sp, #20
   13130:	f017 fdf6 	bl	2ad20 <bt_mesh_model_find_group>
	if (match) {
   13134:	b130      	cbz	r0, 13144 <mod_sub_va_del+0xac>
		*match = BT_MESH_ADDR_UNASSIGNED;
   13136:	2400      	movs	r4, #0
   13138:	8004      	strh	r4, [r0, #0]
			bt_mesh_model_sub_store(mod);
   1313a:	9805      	ldr	r0, [sp, #20]
   1313c:	f017 fe6e 	bl	2ae1c <bt_mesh_model_sub_store>
		status = STATUS_SUCCESS;
   13140:	4622      	mov	r2, r4
   13142:	e7d2      	b.n	130ea <mod_sub_va_del+0x52>
		status = STATUS_CANNOT_REMOVE;
   13144:	220c      	movs	r2, #12
   13146:	e7d0      	b.n	130ea <mod_sub_va_del+0x52>
   13148:	000334dc 	.word	0x000334dc

0001314c <mod_sub_del>:
{
   1314c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13150:	4607      	mov	r7, r0
   13152:	b087      	sub	sp, #28
	elem_addr = net_buf_simple_pull_le16(buf);
   13154:	4610      	mov	r0, r2
{
   13156:	4688      	mov	r8, r1
   13158:	4614      	mov	r4, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   1315a:	f019 fc04 	bl	2c966 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1315e:	b203      	sxth	r3, r0
   13160:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   13162:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   13164:	dc06      	bgt.n	13174 <mod_sub_del+0x28>
		BT_WARN("Prohibited element address");
   13166:	2157      	movs	r1, #87	; 0x57
   13168:	481f      	ldr	r0, [pc, #124]	; (131e8 <mod_sub_del+0x9c>)
   1316a:	f013 ff00 	bl	26f6e <printk>
}
   1316e:	b007      	add	sp, #28
   13170:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	sub_addr = net_buf_simple_pull_le16(buf);
   13174:	4620      	mov	r0, r4
   13176:	f019 fbf6 	bl	2c966 <net_buf_simple_pull_le16>
   1317a:	4606      	mov	r6, r0
	elem = bt_mesh_elem_find(elem_addr);
   1317c:	4628      	mov	r0, r5
	mod_id = buf->data;
   1317e:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   13182:	f7fe ff23 	bl	11fcc <bt_mesh_elem_find>
	if (!elem) {
   13186:	b940      	cbnz	r0, 1319a <mod_sub_del+0x4e>
		vnd = (buf->len == 4U);
   13188:	88a3      	ldrh	r3, [r4, #4]
		mod = NULL;
   1318a:	9005      	str	r0, [sp, #20]
		vnd = (buf->len == 4U);
   1318c:	1f1a      	subs	r2, r3, #4
   1318e:	4253      	negs	r3, r2
   13190:	4153      	adcs	r3, r2
   13192:	f88d 3013 	strb.w	r3, [sp, #19]
		status = STATUS_INVALID_ADDRESS;
   13196:	2201      	movs	r2, #1
   13198:	e017      	b.n	131ca <mod_sub_del+0x7e>
	mod = get_model(elem, buf, &vnd);
   1319a:	f10d 0213 	add.w	r2, sp, #19
   1319e:	4621      	mov	r1, r4
   131a0:	f017 feea 	bl	2af78 <get_model>
   131a4:	9005      	str	r0, [sp, #20]
	if (!mod) {
   131a6:	b1d8      	cbz	r0, 131e0 <mod_sub_del+0x94>
	if (!BT_MESH_ADDR_IS_GROUP(sub_addr)) {
   131a8:	f506 4380 	add.w	r3, r6, #16384	; 0x4000
   131ac:	b29b      	uxth	r3, r3
   131ae:	f5b3 5f7c 	cmp.w	r3, #16128	; 0x3f00
   131b2:	d8f0      	bhi.n	13196 <mod_sub_del+0x4a>
	match = bt_mesh_model_find_group(&mod, sub_addr);
   131b4:	4631      	mov	r1, r6
   131b6:	a805      	add	r0, sp, #20
   131b8:	f017 fdb2 	bl	2ad20 <bt_mesh_model_find_group>
	if (match) {
   131bc:	2400      	movs	r4, #0
   131be:	b188      	cbz	r0, 131e4 <mod_sub_del+0x98>
		*match = BT_MESH_ADDR_UNASSIGNED;
   131c0:	8004      	strh	r4, [r0, #0]
			bt_mesh_model_sub_store(mod);
   131c2:	9805      	ldr	r0, [sp, #20]
   131c4:	f017 fe2a 	bl	2ae1c <bt_mesh_model_sub_store>
	status = STATUS_SUCCESS;
   131c8:	4622      	mov	r2, r4
	send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   131ca:	f89d 3013 	ldrb.w	r3, [sp, #19]
   131ce:	9600      	str	r6, [sp, #0]
   131d0:	e9cd 9301 	strd	r9, r3, [sp, #4]
   131d4:	4641      	mov	r1, r8
   131d6:	462b      	mov	r3, r5
   131d8:	4638      	mov	r0, r7
   131da:	f7ff f9d5 	bl	12588 <send_mod_sub_status>
   131de:	e7c6      	b.n	1316e <mod_sub_del+0x22>
		status = STATUS_INVALID_MODEL;
   131e0:	2202      	movs	r2, #2
   131e2:	e7f2      	b.n	131ca <mod_sub_del+0x7e>
	status = STATUS_SUCCESS;
   131e4:	4602      	mov	r2, r0
   131e6:	e7f0      	b.n	131ca <mod_sub_del+0x7e>
   131e8:	000334dc 	.word	0x000334dc

000131ec <mod_sub_va_add>:
{
   131ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   131f0:	4607      	mov	r7, r0
   131f2:	b087      	sub	sp, #28
	elem_addr = net_buf_simple_pull_le16(buf);
   131f4:	4610      	mov	r0, r2
{
   131f6:	4688      	mov	r8, r1
   131f8:	4614      	mov	r4, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   131fa:	f019 fbb4 	bl	2c966 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   131fe:	b203      	sxth	r3, r0
   13200:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   13202:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   13204:	dc06      	bgt.n	13214 <mod_sub_va_add+0x28>
		BT_WARN("Prohibited element address");
   13206:	2157      	movs	r1, #87	; 0x57
   13208:	482b      	ldr	r0, [pc, #172]	; (132b8 <mod_sub_va_add+0xcc>)
   1320a:	f013 feb0 	bl	26f6e <printk>
}
   1320e:	b007      	add	sp, #28
   13210:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	label_uuid = net_buf_simple_pull_mem(buf, 16);
   13214:	2110      	movs	r1, #16
   13216:	4620      	mov	r0, r4
   13218:	f00b ffce 	bl	1f1b8 <net_buf_simple_pull_mem>
   1321c:	4606      	mov	r6, r0
	elem = bt_mesh_elem_find(elem_addr);
   1321e:	4628      	mov	r0, r5
	mod_id = buf->data;
   13220:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   13224:	f7fe fed2 	bl	11fcc <bt_mesh_elem_find>
	if (!elem) {
   13228:	b9b8      	cbnz	r0, 1325a <mod_sub_va_add+0x6e>
		vnd = (buf->len == 4U);
   1322a:	88a3      	ldrh	r3, [r4, #4]
		mod = NULL;
   1322c:	9005      	str	r0, [sp, #20]
		vnd = (buf->len == 4U);
   1322e:	1f19      	subs	r1, r3, #4
   13230:	424b      	negs	r3, r1
   13232:	414b      	adcs	r3, r1
   13234:	f88d 3011 	strb.w	r3, [sp, #17]
		sub_addr = BT_MESH_ADDR_UNASSIGNED;
   13238:	f8ad 0012 	strh.w	r0, [sp, #18]
		status = STATUS_INVALID_ADDRESS;
   1323c:	2401      	movs	r4, #1
	send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   1323e:	f89d 3011 	ldrb.w	r3, [sp, #17]
   13242:	e9cd 9301 	strd	r9, r3, [sp, #4]
   13246:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   1324a:	9300      	str	r3, [sp, #0]
   1324c:	4622      	mov	r2, r4
   1324e:	462b      	mov	r3, r5
   13250:	4641      	mov	r1, r8
   13252:	4638      	mov	r0, r7
   13254:	f7ff f998 	bl	12588 <send_mod_sub_status>
   13258:	e7d9      	b.n	1320e <mod_sub_va_add+0x22>
	mod = get_model(elem, buf, &vnd);
   1325a:	f10d 0211 	add.w	r2, sp, #17
   1325e:	4621      	mov	r1, r4
   13260:	f017 fe8a 	bl	2af78 <get_model>
   13264:	9005      	str	r0, [sp, #20]
	if (!mod) {
   13266:	b918      	cbnz	r0, 13270 <mod_sub_va_add+0x84>
		sub_addr = BT_MESH_ADDR_UNASSIGNED;
   13268:	f8ad 0012 	strh.w	r0, [sp, #18]
		status = STATUS_INVALID_MODEL;
   1326c:	2402      	movs	r4, #2
		goto send_status;
   1326e:	e7e6      	b.n	1323e <mod_sub_va_add+0x52>
	status = bt_mesh_va_add(label_uuid, &sub_addr);
   13270:	f10d 0112 	add.w	r1, sp, #18
   13274:	4630      	mov	r0, r6
   13276:	f7fd f98b 	bl	10590 <bt_mesh_va_add>
	if (status != STATUS_SUCCESS) {
   1327a:	4604      	mov	r4, r0
   1327c:	2800      	cmp	r0, #0
   1327e:	d1de      	bne.n	1323e <mod_sub_va_add+0x52>
	if (bt_mesh_model_find_group(&mod, sub_addr)) {
   13280:	f8bd 1012 	ldrh.w	r1, [sp, #18]
   13284:	a805      	add	r0, sp, #20
   13286:	f017 fd4b 	bl	2ad20 <bt_mesh_model_find_group>
		bt_mesh_va_del(label_uuid, NULL);
   1328a:	4621      	mov	r1, r4
	if (bt_mesh_model_find_group(&mod, sub_addr)) {
   1328c:	b118      	cbz	r0, 13296 <mod_sub_va_add+0xaa>
		bt_mesh_va_del(label_uuid, NULL);
   1328e:	4630      	mov	r0, r6
   13290:	f7fd f9c0 	bl	10614 <bt_mesh_va_del>
		goto send_status;
   13294:	e7d3      	b.n	1323e <mod_sub_va_add+0x52>
	entry = bt_mesh_model_find_group(&mod, BT_MESH_ADDR_UNASSIGNED);
   13296:	a805      	add	r0, sp, #20
   13298:	f017 fd42 	bl	2ad20 <bt_mesh_model_find_group>
	if (!entry) {
   1329c:	b928      	cbnz	r0, 132aa <mod_sub_va_add+0xbe>
		bt_mesh_va_del(label_uuid, NULL);
   1329e:	4621      	mov	r1, r4
   132a0:	4630      	mov	r0, r6
   132a2:	f7fd f9b7 	bl	10614 <bt_mesh_va_del>
		status = STATUS_INSUFF_RESOURCES;
   132a6:	2405      	movs	r4, #5
		goto send_status;
   132a8:	e7c9      	b.n	1323e <mod_sub_va_add+0x52>
	*entry = sub_addr;
   132aa:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   132ae:	8003      	strh	r3, [r0, #0]
		bt_mesh_model_sub_store(mod);
   132b0:	9805      	ldr	r0, [sp, #20]
   132b2:	f017 fdb3 	bl	2ae1c <bt_mesh_model_sub_store>
	status = STATUS_SUCCESS;
   132b6:	e7c2      	b.n	1323e <mod_sub_va_add+0x52>
   132b8:	000334dc 	.word	0x000334dc

000132bc <mod_sub_add>:
{
   132bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   132c0:	4607      	mov	r7, r0
   132c2:	b087      	sub	sp, #28
	elem_addr = net_buf_simple_pull_le16(buf);
   132c4:	4610      	mov	r0, r2
{
   132c6:	4688      	mov	r8, r1
   132c8:	4614      	mov	r4, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   132ca:	f019 fb4c 	bl	2c966 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   132ce:	b203      	sxth	r3, r0
   132d0:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   132d2:	4606      	mov	r6, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   132d4:	dc06      	bgt.n	132e4 <mod_sub_add+0x28>
		BT_WARN("Prohibited element address");
   132d6:	2157      	movs	r1, #87	; 0x57
   132d8:	4821      	ldr	r0, [pc, #132]	; (13360 <mod_sub_add+0xa4>)
   132da:	f013 fe48 	bl	26f6e <printk>
}
   132de:	b007      	add	sp, #28
   132e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	sub_addr = net_buf_simple_pull_le16(buf);
   132e4:	4620      	mov	r0, r4
   132e6:	f019 fb3e 	bl	2c966 <net_buf_simple_pull_le16>
   132ea:	4605      	mov	r5, r0
	elem = bt_mesh_elem_find(elem_addr);
   132ec:	4630      	mov	r0, r6
	mod_id = buf->data;
   132ee:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   132f2:	f7fe fe6b 	bl	11fcc <bt_mesh_elem_find>
	if (!elem) {
   132f6:	b940      	cbnz	r0, 1330a <mod_sub_add+0x4e>
		vnd = (buf->len == 4U);
   132f8:	88a3      	ldrh	r3, [r4, #4]
		mod = NULL;
   132fa:	9005      	str	r0, [sp, #20]
		vnd = (buf->len == 4U);
   132fc:	1f1a      	subs	r2, r3, #4
   132fe:	4253      	negs	r3, r2
   13300:	4153      	adcs	r3, r2
   13302:	f88d 3013 	strb.w	r3, [sp, #19]
		status = STATUS_INVALID_ADDRESS;
   13306:	2201      	movs	r2, #1
   13308:	e01d      	b.n	13346 <mod_sub_add+0x8a>
	mod = get_model(elem, buf, &vnd);
   1330a:	f10d 0213 	add.w	r2, sp, #19
   1330e:	4621      	mov	r1, r4
   13310:	f017 fe32 	bl	2af78 <get_model>
   13314:	9005      	str	r0, [sp, #20]
	if (!mod) {
   13316:	b1a8      	cbz	r0, 13344 <mod_sub_add+0x88>
	if (!BT_MESH_ADDR_IS_GROUP(sub_addr)) {
   13318:	f505 4380 	add.w	r3, r5, #16384	; 0x4000
   1331c:	b29b      	uxth	r3, r3
   1331e:	f5b3 5f7c 	cmp.w	r3, #16128	; 0x3f00
   13322:	d8f0      	bhi.n	13306 <mod_sub_add+0x4a>
	if (bt_mesh_model_find_group(&mod, sub_addr)) {
   13324:	4629      	mov	r1, r5
   13326:	a805      	add	r0, sp, #20
   13328:	f017 fcfa 	bl	2ad20 <bt_mesh_model_find_group>
   1332c:	b940      	cbnz	r0, 13340 <mod_sub_add+0x84>
	entry = bt_mesh_model_find_group(&mod, BT_MESH_ADDR_UNASSIGNED);
   1332e:	4601      	mov	r1, r0
   13330:	a805      	add	r0, sp, #20
   13332:	f017 fcf5 	bl	2ad20 <bt_mesh_model_find_group>
	if (!entry) {
   13336:	b188      	cbz	r0, 1335c <mod_sub_add+0xa0>
	*entry = sub_addr;
   13338:	8005      	strh	r5, [r0, #0]
		bt_mesh_model_sub_store(mod);
   1333a:	9805      	ldr	r0, [sp, #20]
   1333c:	f017 fd6e 	bl	2ae1c <bt_mesh_model_sub_store>
		status = STATUS_SUCCESS;
   13340:	2200      	movs	r2, #0
   13342:	e000      	b.n	13346 <mod_sub_add+0x8a>
		status = STATUS_INVALID_MODEL;
   13344:	2202      	movs	r2, #2
	send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   13346:	f89d 3013 	ldrb.w	r3, [sp, #19]
   1334a:	9500      	str	r5, [sp, #0]
   1334c:	e9cd 9301 	strd	r9, r3, [sp, #4]
   13350:	4641      	mov	r1, r8
   13352:	4633      	mov	r3, r6
   13354:	4638      	mov	r0, r7
   13356:	f7ff f917 	bl	12588 <send_mod_sub_status>
   1335a:	e7c0      	b.n	132de <mod_sub_add+0x22>
		status = STATUS_INSUFF_RESOURCES;
   1335c:	2205      	movs	r2, #5
   1335e:	e7f2      	b.n	13346 <mod_sub_add+0x8a>
   13360:	000334dc 	.word	0x000334dc

00013364 <mod_app_bind>:
{
   13364:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13368:	4614      	mov	r4, r2
   1336a:	b08b      	sub	sp, #44	; 0x2c
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_APP_STATUS, 9);
   1336c:	ab06      	add	r3, sp, #24
   1336e:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
{
   13372:	4607      	mov	r7, r0
	elem_addr = net_buf_simple_pull_le16(buf);
   13374:	4620      	mov	r0, r4
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_APP_STATUS, 9);
   13376:	9303      	str	r3, [sp, #12]
   13378:	e9cd 2304 	strd	r2, r3, [sp, #16]
{
   1337c:	4688      	mov	r8, r1
	elem_addr = net_buf_simple_pull_le16(buf);
   1337e:	f019 faf2 	bl	2c966 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   13382:	b203      	sxth	r3, r0
   13384:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   13386:	4606      	mov	r6, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   13388:	dc06      	bgt.n	13398 <mod_app_bind+0x34>
		BT_WARN("Prohibited element address");
   1338a:	4829      	ldr	r0, [pc, #164]	; (13430 <mod_app_bind+0xcc>)
   1338c:	2157      	movs	r1, #87	; 0x57
		BT_ERR("Unable to send Model App Bind Status response");
   1338e:	f013 fdee 	bl	26f6e <printk>
}
   13392:	b00b      	add	sp, #44	; 0x2c
   13394:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	key_app_idx = net_buf_simple_pull_le16(buf);
   13398:	4620      	mov	r0, r4
   1339a:	f019 fae4 	bl	2c966 <net_buf_simple_pull_le16>
   1339e:	4605      	mov	r5, r0
	elem = bt_mesh_elem_find(elem_addr);
   133a0:	4630      	mov	r0, r6
	mod_id = buf->data;
   133a2:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   133a6:	f7fe fe11 	bl	11fcc <bt_mesh_elem_find>
	if (!elem) {
   133aa:	b9d8      	cbnz	r0, 133e4 <mod_app_bind+0x80>
		vnd = (buf->len == 4U);
   133ac:	88a3      	ldrh	r3, [r4, #4]
   133ae:	1f1a      	subs	r2, r3, #4
   133b0:	4253      	negs	r3, r2
   133b2:	4153      	adcs	r3, r2
   133b4:	f88d 300b 	strb.w	r3, [sp, #11]
		status = STATUS_INVALID_ADDRESS;
   133b8:	2301      	movs	r3, #1
	create_mod_app_status(&msg, mod, vnd, elem_addr, key_app_idx, status,
   133ba:	e9cd 3900 	strd	r3, r9, [sp]
   133be:	4632      	mov	r2, r6
   133c0:	462b      	mov	r3, r5
   133c2:	f89d 100b 	ldrb.w	r1, [sp, #11]
   133c6:	a803      	add	r0, sp, #12
   133c8:	f017 fdf7 	bl	2afba <create_mod_app_status.isra.13>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   133cc:	2300      	movs	r3, #0
   133ce:	9300      	str	r3, [sp, #0]
   133d0:	aa03      	add	r2, sp, #12
   133d2:	4641      	mov	r1, r8
   133d4:	4638      	mov	r0, r7
   133d6:	f017 fcd3 	bl	2ad80 <bt_mesh_model_send>
   133da:	2800      	cmp	r0, #0
   133dc:	d0d9      	beq.n	13392 <mod_app_bind+0x2e>
		BT_ERR("Unable to send Model App Bind Status response");
   133de:	2145      	movs	r1, #69	; 0x45
   133e0:	4814      	ldr	r0, [pc, #80]	; (13434 <mod_app_bind+0xd0>)
   133e2:	e7d4      	b.n	1338e <mod_app_bind+0x2a>
	mod = get_model(elem, buf, &vnd);
   133e4:	4621      	mov	r1, r4
   133e6:	f10d 020b 	add.w	r2, sp, #11
   133ea:	f017 fdc5 	bl	2af78 <get_model>
	if (!mod) {
   133ee:	4604      	mov	r4, r0
   133f0:	b1c0      	cbz	r0, 13424 <mod_app_bind+0xc0>
	if (model == mod) {
   133f2:	42b8      	cmp	r0, r7
   133f4:	d105      	bne.n	13402 <mod_app_bind+0x9e>
		BT_ERR("Client tried to bind AppKey to Configuration Model");
   133f6:	2145      	movs	r1, #69	; 0x45
   133f8:	480f      	ldr	r0, [pc, #60]	; (13438 <mod_app_bind+0xd4>)
   133fa:	f013 fdb8 	bl	26f6e <printk>
		status = STATUS_CANNOT_BIND;
   133fe:	230d      	movs	r3, #13
		goto send_status;
   13400:	e7db      	b.n	133ba <mod_app_bind+0x56>
	if (!bt_mesh_app_key_exists(key_idx)) {
   13402:	4628      	mov	r0, r5
   13404:	f7fc faaa 	bl	f95c <bt_mesh_app_key_exists>
   13408:	b170      	cbz	r0, 13428 <mod_app_bind+0xc4>
		if (model->keys[i] == key_idx) {
   1340a:	89a3      	ldrh	r3, [r4, #12]
   1340c:	429d      	cmp	r5, r3
   1340e:	d007      	beq.n	13420 <mod_app_bind+0xbc>
		if (model->keys[i] == BT_MESH_KEY_UNUSED) {
   13410:	f64f 72ff 	movw	r2, #65535	; 0xffff
   13414:	4293      	cmp	r3, r2
   13416:	d109      	bne.n	1342c <mod_app_bind+0xc8>
			model->keys[i] = key_idx;
   13418:	81a5      	strh	r5, [r4, #12]
				bt_mesh_model_bind_store(model);
   1341a:	4620      	mov	r0, r4
   1341c:	f017 fcf7 	bl	2ae0e <bt_mesh_model_bind_store>
			return STATUS_SUCCESS;
   13420:	2300      	movs	r3, #0
   13422:	e7ca      	b.n	133ba <mod_app_bind+0x56>
		status = STATUS_INVALID_MODEL;
   13424:	2302      	movs	r3, #2
   13426:	e7c8      	b.n	133ba <mod_app_bind+0x56>
		return STATUS_INVALID_APPKEY;
   13428:	2303      	movs	r3, #3
   1342a:	e7c6      	b.n	133ba <mod_app_bind+0x56>
	return STATUS_INSUFF_RESOURCES;
   1342c:	2305      	movs	r3, #5
   1342e:	e7c4      	b.n	133ba <mod_app_bind+0x56>
   13430:	000334dc 	.word	0x000334dc
   13434:	000333f7 	.word	0x000333f7
   13438:	000333bf 	.word	0x000333bf

0001343c <send_mod_pub_status.isra.15>:
static void send_mod_pub_status(struct bt_mesh_model *cfg_mod,
   1343c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13440:	b08b      	sub	sp, #44	; 0x2c
   13442:	460f      	mov	r7, r1
   13444:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
   13448:	f89d 8050 	ldrb.w	r8, [sp, #80]	; 0x50
   1344c:	9c15      	ldr	r4, [sp, #84]	; 0x54
   1344e:	9d17      	ldr	r5, [sp, #92]	; 0x5c
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_PUB_STATUS, 14);
   13450:	a905      	add	r1, sp, #20
static void send_mod_pub_status(struct bt_mesh_model *cfg_mod,
   13452:	469a      	mov	sl, r3
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_PUB_STATUS, 14);
   13454:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
   13458:	e9cd 3103 	strd	r3, r1, [sp, #12]
   1345c:	9102      	str	r1, [sp, #8]
static void send_mod_pub_status(struct bt_mesh_model *cfg_mod,
   1345e:	4606      	mov	r6, r0
	bt_mesh_model_msg_init(&msg, OP_MOD_PUB_STATUS);
   13460:	f248 0119 	movw	r1, #32793	; 0x8019
   13464:	a802      	add	r0, sp, #8
static void send_mod_pub_status(struct bt_mesh_model *cfg_mod,
   13466:	4693      	mov	fp, r2
	bt_mesh_model_msg_init(&msg, OP_MOD_PUB_STATUS);
   13468:	f017 fc61 	bl	2ad2e <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   1346c:	4649      	mov	r1, r9
   1346e:	a802      	add	r0, sp, #8
   13470:	f019 fac3 	bl	2c9fa <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, elem_addr);
   13474:	4659      	mov	r1, fp
   13476:	a802      	add	r0, sp, #8
   13478:	f019 fac6 	bl	2ca08 <net_buf_simple_add_le16>
	if (status != STATUS_SUCCESS) {
   1347c:	f1b9 0f00 	cmp.w	r9, #0
   13480:	d01f      	beq.n	134c2 <send_mod_pub_status.isra.15+0x86>
		(void)memset(net_buf_simple_add(&msg, 7), 0, 7);
   13482:	2107      	movs	r1, #7
   13484:	a802      	add	r0, sp, #8
   13486:	f00b feb5 	bl	1f1f4 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   1348a:	2300      	movs	r3, #0
   1348c:	6003      	str	r3, [r0, #0]
   1348e:	f8c0 3003 	str.w	r3, [r0, #3]
	if (vnd) {
   13492:	f1b8 0f00 	cmp.w	r8, #0
   13496:	d034      	beq.n	13502 <send_mod_pub_status.isra.15+0xc6>
		memcpy(net_buf_simple_add(&msg, 4), mod_id, 4);
   13498:	2104      	movs	r1, #4
   1349a:	a802      	add	r0, sp, #8
   1349c:	f00b feaa 	bl	1f1f4 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   134a0:	682b      	ldr	r3, [r5, #0]
   134a2:	6003      	str	r3, [r0, #0]
	if (bt_mesh_model_send(cfg_mod, ctx, &msg, NULL, NULL)) {
   134a4:	2300      	movs	r3, #0
   134a6:	9300      	str	r3, [sp, #0]
   134a8:	aa02      	add	r2, sp, #8
   134aa:	4639      	mov	r1, r7
   134ac:	4630      	mov	r0, r6
   134ae:	f017 fc67 	bl	2ad80 <bt_mesh_model_send>
   134b2:	b118      	cbz	r0, 134bc <send_mod_pub_status.isra.15+0x80>
		BT_ERR("Unable to send Model Publication Status");
   134b4:	2145      	movs	r1, #69	; 0x45
   134b6:	4816      	ldr	r0, [pc, #88]	; (13510 <send_mod_pub_status.isra.15+0xd4>)
   134b8:	f013 fd59 	bl	26f6e <printk>
}
   134bc:	b00b      	add	sp, #44	; 0x2c
   134be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		net_buf_simple_add_le16(&msg, pub_addr);
   134c2:	4651      	mov	r1, sl
   134c4:	a802      	add	r0, sp, #8
   134c6:	f019 fa9f 	bl	2ca08 <net_buf_simple_add_le16>
		idx_cred = mod->pub->key | (uint16_t)mod->pub->cred << 12;
   134ca:	6823      	ldr	r3, [r4, #0]
   134cc:	79d9      	ldrb	r1, [r3, #7]
   134ce:	88db      	ldrh	r3, [r3, #6]
   134d0:	f3c1 1100 	ubfx	r1, r1, #4, #1
   134d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
		net_buf_simple_add_le16(&msg, idx_cred);
   134d8:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
   134dc:	a802      	add	r0, sp, #8
   134de:	f019 fa93 	bl	2ca08 <net_buf_simple_add_le16>
		net_buf_simple_add_u8(&msg, mod->pub->ttl);
   134e2:	6823      	ldr	r3, [r4, #0]
   134e4:	a802      	add	r0, sp, #8
   134e6:	7a19      	ldrb	r1, [r3, #8]
   134e8:	f019 fa87 	bl	2c9fa <net_buf_simple_add_u8>
		net_buf_simple_add_u8(&msg, mod->pub->period);
   134ec:	6823      	ldr	r3, [r4, #0]
   134ee:	a802      	add	r0, sp, #8
   134f0:	7a99      	ldrb	r1, [r3, #10]
   134f2:	f019 fa82 	bl	2c9fa <net_buf_simple_add_u8>
		net_buf_simple_add_u8(&msg, mod->pub->retransmit);
   134f6:	6823      	ldr	r3, [r4, #0]
   134f8:	a802      	add	r0, sp, #8
   134fa:	7a59      	ldrb	r1, [r3, #9]
   134fc:	f019 fa7d 	bl	2c9fa <net_buf_simple_add_u8>
   13500:	e7c7      	b.n	13492 <send_mod_pub_status.isra.15+0x56>
		memcpy(net_buf_simple_add(&msg, 2), mod_id, 2);
   13502:	2102      	movs	r1, #2
   13504:	a802      	add	r0, sp, #8
   13506:	f00b fe75 	bl	1f1f4 <net_buf_simple_add>
   1350a:	882b      	ldrh	r3, [r5, #0]
   1350c:	8003      	strh	r3, [r0, #0]
   1350e:	e7c9      	b.n	134a4 <send_mod_pub_status.isra.15+0x68>
   13510:	00033748 	.word	0x00033748

00013514 <mod_pub_get>:
{
   13514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13518:	4605      	mov	r5, r0
   1351a:	b086      	sub	sp, #24
	elem_addr = net_buf_simple_pull_le16(buf);
   1351c:	4610      	mov	r0, r2
{
   1351e:	460e      	mov	r6, r1
   13520:	4690      	mov	r8, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   13522:	f019 fa20 	bl	2c966 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   13526:	b203      	sxth	r3, r0
   13528:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   1352a:	4604      	mov	r4, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1352c:	dc06      	bgt.n	1353c <mod_pub_get+0x28>
		BT_WARN("Prohibited element address");
   1352e:	2157      	movs	r1, #87	; 0x57
   13530:	4818      	ldr	r0, [pc, #96]	; (13594 <mod_pub_get+0x80>)
   13532:	f013 fd1c 	bl	26f6e <printk>
}
   13536:	b006      	add	sp, #24
   13538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	mod_id = buf->data;
   1353c:	f8d8 7000 	ldr.w	r7, [r8]
	elem = bt_mesh_elem_find(elem_addr);
   13540:	f7fe fd44 	bl	11fcc <bt_mesh_elem_find>
	if (!elem) {
   13544:	4602      	mov	r2, r0
   13546:	b948      	cbnz	r0, 1355c <mod_pub_get+0x48>
		vnd = (buf->len == 4U);
   13548:	f8b8 3004 	ldrh.w	r3, [r8, #4]
   1354c:	1f19      	subs	r1, r3, #4
   1354e:	424b      	negs	r3, r1
   13550:	414b      	adcs	r3, r1
   13552:	f88d 3017 	strb.w	r3, [sp, #23]
		status = STATUS_INVALID_ADDRESS;
   13556:	2101      	movs	r1, #1
	uint16_t elem_addr, pub_addr = 0U;
   13558:	4613      	mov	r3, r2
   1355a:	e00a      	b.n	13572 <mod_pub_get+0x5e>
	mod = get_model(elem, buf, &vnd);
   1355c:	f10d 0217 	add.w	r2, sp, #23
   13560:	4641      	mov	r1, r8
   13562:	f017 fd09 	bl	2af78 <get_model>
	if (!mod) {
   13566:	4602      	mov	r2, r0
   13568:	b180      	cbz	r0, 1358c <mod_pub_get+0x78>
	if (!mod->pub) {
   1356a:	6883      	ldr	r3, [r0, #8]
   1356c:	b183      	cbz	r3, 13590 <mod_pub_get+0x7c>
	pub_addr = mod->pub->addr;
   1356e:	889b      	ldrh	r3, [r3, #4]
	status = STATUS_SUCCESS;
   13570:	2100      	movs	r1, #0
	send_mod_pub_status(model, ctx, elem_addr, pub_addr, vnd, mod,
   13572:	3208      	adds	r2, #8
   13574:	9201      	str	r2, [sp, #4]
   13576:	f89d 2017 	ldrb.w	r2, [sp, #23]
   1357a:	9200      	str	r2, [sp, #0]
   1357c:	e9cd 1702 	strd	r1, r7, [sp, #8]
   13580:	4622      	mov	r2, r4
   13582:	4631      	mov	r1, r6
   13584:	4628      	mov	r0, r5
   13586:	f7ff ff59 	bl	1343c <send_mod_pub_status.isra.15>
   1358a:	e7d4      	b.n	13536 <mod_pub_get+0x22>
		status = STATUS_INVALID_MODEL;
   1358c:	2102      	movs	r1, #2
   1358e:	e7e3      	b.n	13558 <mod_pub_get+0x44>
		status = STATUS_NVAL_PUB_PARAM;
   13590:	2107      	movs	r1, #7
   13592:	e7ee      	b.n	13572 <mod_pub_get+0x5e>
   13594:	000334dc 	.word	0x000334dc

00013598 <mod_sub_list_visitor>:
{
   13598:	b538      	push	{r3, r4, r5, lr}
   1359a:	4615      	mov	r5, r2
	if (mod->elem_idx != visit->elem_idx) {
   1359c:	7902      	ldrb	r2, [r0, #4]
   1359e:	882b      	ldrh	r3, [r5, #0]
   135a0:	429a      	cmp	r2, r3
{
   135a2:	4604      	mov	r4, r0
	if (mod->elem_idx != visit->elem_idx) {
   135a4:	d110      	bne.n	135c8 <mod_sub_list_visitor+0x30>
		if (mod->groups[i] == BT_MESH_ADDR_UNASSIGNED) {
   135a6:	89c3      	ldrh	r3, [r0, #14]
   135a8:	b173      	cbz	r3, 135c8 <mod_sub_list_visitor+0x30>
		if (net_buf_simple_tailroom(visit->msg) <
   135aa:	6868      	ldr	r0, [r5, #4]
   135ac:	f019 fa11 	bl	2c9d2 <net_buf_simple_tailroom>
   135b0:	2805      	cmp	r0, #5
   135b2:	d805      	bhi.n	135c0 <mod_sub_list_visitor+0x28>
			BT_WARN("No room for all groups");
   135b4:	4805      	ldr	r0, [pc, #20]	; (135cc <mod_sub_list_visitor+0x34>)
   135b6:	2157      	movs	r1, #87	; 0x57
   135b8:	f013 fcd9 	bl	26f6e <printk>
   135bc:	2000      	movs	r0, #0
}
   135be:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_simple_add_le16(visit->msg, mod->groups[i]);
   135c0:	89e1      	ldrh	r1, [r4, #14]
   135c2:	6868      	ldr	r0, [r5, #4]
   135c4:	f019 fa20 	bl	2ca08 <net_buf_simple_add_le16>
		return BT_MESH_WALK_CONTINUE;
   135c8:	2001      	movs	r0, #1
   135ca:	e7f8      	b.n	135be <mod_sub_list_visitor+0x26>
   135cc:	00033549 	.word	0x00033549

000135d0 <relay_get>:
{
   135d0:	b530      	push	{r4, r5, lr}
   135d2:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_RELAY_STATUS, 2);
   135d4:	ab03      	add	r3, sp, #12
   135d6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
{
   135da:	4604      	mov	r4, r0
   135dc:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_RELAY_STATUS);
   135de:	a805      	add	r0, sp, #20
   135e0:	f248 0128 	movw	r1, #32808	; 0x8028
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_RELAY_STATUS, 2);
   135e4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   135e8:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_RELAY_STATUS);
   135ea:	f017 fba0 	bl	2ad2e <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_relay_get());
   135ee:	f016 fe9e 	bl	2a32e <bt_mesh_relay_get>
   135f2:	4601      	mov	r1, r0
   135f4:	a805      	add	r0, sp, #20
   135f6:	f019 fa00 	bl	2c9fa <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, bt_mesh_relay_retransmit_get());
   135fa:	f7fa fa31 	bl	da60 <bt_mesh_relay_retransmit_get>
   135fe:	4601      	mov	r1, r0
   13600:	a805      	add	r0, sp, #20
   13602:	f019 f9fa 	bl	2c9fa <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   13606:	2300      	movs	r3, #0
   13608:	9300      	str	r3, [sp, #0]
   1360a:	aa05      	add	r2, sp, #20
   1360c:	4629      	mov	r1, r5
   1360e:	4620      	mov	r0, r4
   13610:	f017 fbb6 	bl	2ad80 <bt_mesh_model_send>
   13614:	b118      	cbz	r0, 1361e <relay_get+0x4e>
		BT_ERR("Unable to send Config Relay Status response");
   13616:	2145      	movs	r1, #69	; 0x45
   13618:	4802      	ldr	r0, [pc, #8]	; (13624 <relay_get+0x54>)
   1361a:	f013 fca8 	bl	26f6e <printk>
}
   1361e:	b009      	add	sp, #36	; 0x24
   13620:	bd30      	pop	{r4, r5, pc}
   13622:	bf00      	nop
   13624:	0003362c 	.word	0x0003362c

00013628 <net_transmit_set>:
{
   13628:	b570      	push	{r4, r5, r6, lr}
   1362a:	b088      	sub	sp, #32
   1362c:	4614      	mov	r4, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_TRANSMIT_STATUS, 1);
   1362e:	ab03      	add	r3, sp, #12
   13630:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
   13634:	e9cd 2306 	strd	r2, r3, [sp, #24]
   13638:	9305      	str	r3, [sp, #20]
	bt_mesh_net_transmit_set(buf->data[0]);
   1363a:	6823      	ldr	r3, [r4, #0]
{
   1363c:	4605      	mov	r5, r0
	bt_mesh_net_transmit_set(buf->data[0]);
   1363e:	7818      	ldrb	r0, [r3, #0]
{
   13640:	460e      	mov	r6, r1
	bt_mesh_net_transmit_set(buf->data[0]);
   13642:	f7fa f99d 	bl	d980 <bt_mesh_net_transmit_set>
	bt_mesh_model_msg_init(&msg, OP_NET_TRANSMIT_STATUS);
   13646:	f248 0125 	movw	r1, #32805	; 0x8025
   1364a:	a805      	add	r0, sp, #20
   1364c:	f017 fb6f 	bl	2ad2e <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, buf->data[0]);
   13650:	6823      	ldr	r3, [r4, #0]
   13652:	a805      	add	r0, sp, #20
   13654:	7819      	ldrb	r1, [r3, #0]
   13656:	f019 f9d0 	bl	2c9fa <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1365a:	2300      	movs	r3, #0
   1365c:	9300      	str	r3, [sp, #0]
   1365e:	aa05      	add	r2, sp, #20
   13660:	4631      	mov	r1, r6
   13662:	4628      	mov	r0, r5
   13664:	f017 fb8c 	bl	2ad80 <bt_mesh_model_send>
   13668:	b118      	cbz	r0, 13672 <net_transmit_set+0x4a>
		BT_ERR("Unable to send Network Transmit Status");
   1366a:	2145      	movs	r1, #69	; 0x45
   1366c:	4802      	ldr	r0, [pc, #8]	; (13678 <net_transmit_set+0x50>)
   1366e:	f013 fc7e 	bl	26f6e <printk>
}
   13672:	b008      	add	sp, #32
   13674:	bd70      	pop	{r4, r5, r6, pc}
   13676:	bf00      	nop
   13678:	000335b8 	.word	0x000335b8

0001367c <net_transmit_get>:
{
   1367c:	b530      	push	{r4, r5, lr}
   1367e:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_TRANSMIT_STATUS, 1);
   13680:	ab03      	add	r3, sp, #12
   13682:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   13686:	4604      	mov	r4, r0
   13688:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_NET_TRANSMIT_STATUS);
   1368a:	a805      	add	r0, sp, #20
   1368c:	f248 0125 	movw	r1, #32805	; 0x8025
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_TRANSMIT_STATUS, 1);
   13690:	e9cd 2306 	strd	r2, r3, [sp, #24]
   13694:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_NET_TRANSMIT_STATUS);
   13696:	f017 fb4a 	bl	2ad2e <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_net_transmit_get());
   1369a:	f7fa f985 	bl	d9a8 <bt_mesh_net_transmit_get>
   1369e:	4601      	mov	r1, r0
   136a0:	a805      	add	r0, sp, #20
   136a2:	f019 f9aa 	bl	2c9fa <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   136a6:	2300      	movs	r3, #0
   136a8:	9300      	str	r3, [sp, #0]
   136aa:	aa05      	add	r2, sp, #20
   136ac:	4629      	mov	r1, r5
   136ae:	4620      	mov	r0, r4
   136b0:	f017 fb66 	bl	2ad80 <bt_mesh_model_send>
   136b4:	b118      	cbz	r0, 136be <net_transmit_get+0x42>
		BT_ERR("Unable to send Config Network Transmit Status");
   136b6:	2145      	movs	r1, #69	; 0x45
   136b8:	4802      	ldr	r0, [pc, #8]	; (136c4 <net_transmit_get+0x48>)
   136ba:	f013 fc58 	bl	26f6e <printk>
}
   136be:	b009      	add	sp, #36	; 0x24
   136c0:	bd30      	pop	{r4, r5, pc}
   136c2:	bf00      	nop
   136c4:	00033585 	.word	0x00033585

000136c8 <send_gatt_proxy_status>:
{
   136c8:	b530      	push	{r4, r5, lr}
   136ca:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_GATT_PROXY_STATUS, 1);
   136cc:	ab03      	add	r3, sp, #12
   136ce:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   136d2:	4604      	mov	r4, r0
   136d4:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_GATT_PROXY_STATUS);
   136d6:	a805      	add	r0, sp, #20
   136d8:	f248 0114 	movw	r1, #32788	; 0x8014
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_GATT_PROXY_STATUS, 1);
   136dc:	e9cd 2306 	strd	r2, r3, [sp, #24]
   136e0:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_GATT_PROXY_STATUS);
   136e2:	f017 fb24 	bl	2ad2e <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_gatt_proxy_get());
   136e6:	f016 fe05 	bl	2a2f4 <bt_mesh_gatt_proxy_get>
   136ea:	4601      	mov	r1, r0
   136ec:	a805      	add	r0, sp, #20
   136ee:	f019 f984 	bl	2c9fa <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   136f2:	2300      	movs	r3, #0
   136f4:	9300      	str	r3, [sp, #0]
   136f6:	aa05      	add	r2, sp, #20
   136f8:	4629      	mov	r1, r5
   136fa:	4620      	mov	r0, r4
   136fc:	f017 fb40 	bl	2ad80 <bt_mesh_model_send>
   13700:	b118      	cbz	r0, 1370a <send_gatt_proxy_status+0x42>
		BT_ERR("Unable to send GATT Proxy Status");
   13702:	2145      	movs	r1, #69	; 0x45
   13704:	4802      	ldr	r0, [pc, #8]	; (13710 <send_gatt_proxy_status+0x48>)
   13706:	f013 fc32 	bl	26f6e <printk>
}
   1370a:	b009      	add	sp, #36	; 0x24
   1370c:	bd30      	pop	{r4, r5, pc}
   1370e:	bf00      	nop
   13710:	000336f5 	.word	0x000336f5

00013714 <gatt_proxy_set>:
{
   13714:	b538      	push	{r3, r4, r5, lr}
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   13716:	6813      	ldr	r3, [r2, #0]
   13718:	781a      	ldrb	r2, [r3, #0]
   1371a:	2a01      	cmp	r2, #1
{
   1371c:	4604      	mov	r4, r0
   1371e:	460d      	mov	r5, r1
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   13720:	d905      	bls.n	1372e <gatt_proxy_set+0x1a>
		BT_WARN("Invalid GATT Proxy value 0x%02x", buf->data[0]);
   13722:	2157      	movs	r1, #87	; 0x57
   13724:	4806      	ldr	r0, [pc, #24]	; (13740 <gatt_proxy_set+0x2c>)
}
   13726:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_WARN("Invalid GATT Proxy value 0x%02x", buf->data[0]);
   1372a:	f013 bc20 	b.w	26f6e <printk>
	(void)bt_mesh_gatt_proxy_set(buf->data[0]);
   1372e:	4610      	mov	r0, r2
   13730:	f016 fdcd 	bl	2a2ce <bt_mesh_gatt_proxy_set>
	send_gatt_proxy_status(model, ctx);
   13734:	4629      	mov	r1, r5
   13736:	4620      	mov	r0, r4
}
   13738:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	send_gatt_proxy_status(model, ctx);
   1373c:	f7ff bfc4 	b.w	136c8 <send_gatt_proxy_status>
   13740:	00033293 	.word	0x00033293

00013744 <default_ttl_set>:
{
   13744:	b5f0      	push	{r4, r5, r6, r7, lr}
   13746:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_DEFAULT_TTL_STATUS, 1);
   13748:	ab03      	add	r3, sp, #12
{
   1374a:	4615      	mov	r5, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_DEFAULT_TTL_STATUS, 1);
   1374c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
   13750:	e9cd 2306 	strd	r2, r3, [sp, #24]
   13754:	9305      	str	r3, [sp, #20]
	err = bt_mesh_default_ttl_set(buf->data[0]);
   13756:	682b      	ldr	r3, [r5, #0]
{
   13758:	4606      	mov	r6, r0
	err = bt_mesh_default_ttl_set(buf->data[0]);
   1375a:	7818      	ldrb	r0, [r3, #0]
{
   1375c:	460f      	mov	r7, r1
	err = bt_mesh_default_ttl_set(buf->data[0]);
   1375e:	f7fa f8ed 	bl	d93c <bt_mesh_default_ttl_set>
	if (err) {
   13762:	4604      	mov	r4, r0
   13764:	b138      	cbz	r0, 13776 <default_ttl_set+0x32>
		BT_WARN("Prohibited Default TTL value 0x%02x", buf->data[0]);
   13766:	682b      	ldr	r3, [r5, #0]
   13768:	480f      	ldr	r0, [pc, #60]	; (137a8 <default_ttl_set+0x64>)
   1376a:	781a      	ldrb	r2, [r3, #0]
   1376c:	2157      	movs	r1, #87	; 0x57
   1376e:	f013 fbfe 	bl	26f6e <printk>
}
   13772:	b009      	add	sp, #36	; 0x24
   13774:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_mesh_model_msg_init(&msg, OP_DEFAULT_TTL_STATUS);
   13776:	f248 010e 	movw	r1, #32782	; 0x800e
   1377a:	a805      	add	r0, sp, #20
   1377c:	f017 fad7 	bl	2ad2e <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, buf->data[0]);
   13780:	682b      	ldr	r3, [r5, #0]
   13782:	a805      	add	r0, sp, #20
   13784:	7819      	ldrb	r1, [r3, #0]
   13786:	f019 f938 	bl	2c9fa <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1378a:	9400      	str	r4, [sp, #0]
   1378c:	4623      	mov	r3, r4
   1378e:	aa05      	add	r2, sp, #20
   13790:	4639      	mov	r1, r7
   13792:	4630      	mov	r0, r6
   13794:	f017 faf4 	bl	2ad80 <bt_mesh_model_send>
   13798:	2800      	cmp	r0, #0
   1379a:	d0ea      	beq.n	13772 <default_ttl_set+0x2e>
		BT_ERR("Unable to send Default TTL Status response");
   1379c:	2145      	movs	r1, #69	; 0x45
   1379e:	4803      	ldr	r0, [pc, #12]	; (137ac <default_ttl_set+0x68>)
   137a0:	f013 fbe5 	bl	26f6e <printk>
   137a4:	e7e5      	b.n	13772 <default_ttl_set+0x2e>
   137a6:	bf00      	nop
   137a8:	0003319a 	.word	0x0003319a
   137ac:	000331c3 	.word	0x000331c3

000137b0 <default_ttl_get>:
{
   137b0:	b530      	push	{r4, r5, lr}
   137b2:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_DEFAULT_TTL_STATUS, 1);
   137b4:	ab03      	add	r3, sp, #12
   137b6:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   137ba:	4604      	mov	r4, r0
   137bc:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_DEFAULT_TTL_STATUS);
   137be:	a805      	add	r0, sp, #20
   137c0:	f248 010e 	movw	r1, #32782	; 0x800e
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_DEFAULT_TTL_STATUS, 1);
   137c4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   137c8:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_DEFAULT_TTL_STATUS);
   137ca:	f017 fab0 	bl	2ad2e <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_default_ttl_get());
   137ce:	f7fa f8d1 	bl	d974 <bt_mesh_default_ttl_get>
   137d2:	4601      	mov	r1, r0
   137d4:	a805      	add	r0, sp, #20
   137d6:	f019 f910 	bl	2c9fa <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   137da:	2300      	movs	r3, #0
   137dc:	9300      	str	r3, [sp, #0]
   137de:	aa05      	add	r2, sp, #20
   137e0:	4629      	mov	r1, r5
   137e2:	4620      	mov	r0, r4
   137e4:	f017 facc 	bl	2ad80 <bt_mesh_model_send>
   137e8:	b118      	cbz	r0, 137f2 <default_ttl_get+0x42>
		BT_ERR("Unable to send Default TTL Status response");
   137ea:	2145      	movs	r1, #69	; 0x45
   137ec:	4802      	ldr	r0, [pc, #8]	; (137f8 <default_ttl_get+0x48>)
   137ee:	f013 fbbe 	bl	26f6e <printk>
}
   137f2:	b009      	add	sp, #36	; 0x24
   137f4:	bd30      	pop	{r4, r5, pc}
   137f6:	bf00      	nop
   137f8:	000331c3 	.word	0x000331c3

000137fc <beacon_get>:
{
   137fc:	b530      	push	{r4, r5, lr}
   137fe:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_BEACON_STATUS, 1);
   13800:	ab03      	add	r3, sp, #12
   13802:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   13806:	4604      	mov	r4, r0
   13808:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_BEACON_STATUS);
   1380a:	a805      	add	r0, sp, #20
   1380c:	f248 010b 	movw	r1, #32779	; 0x800b
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_BEACON_STATUS, 1);
   13810:	e9cd 2306 	strd	r2, r3, [sp, #24]
   13814:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_BEACON_STATUS);
   13816:	f017 fa8a 	bl	2ad2e <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_beacon_enabled());
   1381a:	f016 fd55 	bl	2a2c8 <bt_mesh_beacon_enabled>
   1381e:	4601      	mov	r1, r0
   13820:	a805      	add	r0, sp, #20
   13822:	f019 f8ea 	bl	2c9fa <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   13826:	2300      	movs	r3, #0
   13828:	9300      	str	r3, [sp, #0]
   1382a:	aa05      	add	r2, sp, #20
   1382c:	4629      	mov	r1, r5
   1382e:	4620      	mov	r0, r4
   13830:	f017 faa6 	bl	2ad80 <bt_mesh_model_send>
   13834:	b118      	cbz	r0, 1383e <beacon_get+0x42>
		BT_ERR("Unable to send Config Beacon Status response");
   13836:	2145      	movs	r1, #69	; 0x45
   13838:	4802      	ldr	r0, [pc, #8]	; (13844 <beacon_get+0x48>)
   1383a:	f013 fb98 	bl	26f6e <printk>
}
   1383e:	b009      	add	sp, #36	; 0x24
   13840:	bd30      	pop	{r4, r5, pc}
   13842:	bf00      	nop
   13844:	0003312e 	.word	0x0003312e

00013848 <dev_comp_data_get>:
{
   13848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1384c:	b0a7      	sub	sp, #156	; 0x9c
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   1384e:	ab08      	add	r3, sp, #32
{
   13850:	4681      	mov	r9, r0
   13852:	468a      	mov	sl, r1
	page = net_buf_simple_pull_u8(buf);
   13854:	4610      	mov	r0, r2
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   13856:	f44f 01f0 	mov.w	r1, #7864320	; 0x780000
   1385a:	e9cd 1306 	strd	r1, r3, [sp, #24]
   1385e:	9305      	str	r3, [sp, #20]
	page = net_buf_simple_pull_u8(buf);
   13860:	f019 f879 	bl	2c956 <net_buf_simple_pull_u8>
	bt_mesh_model_msg_init(&sdu, OP_DEV_COMP_DATA_STATUS);
   13864:	2102      	movs	r1, #2
   13866:	a805      	add	r0, sp, #20
   13868:	f017 fa61 	bl	2ad2e <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&sdu, page);
   1386c:	2100      	movs	r1, #0
   1386e:	a805      	add	r0, sp, #20
   13870:	f019 f8c3 	bl	2c9fa <net_buf_simple_add_u8>
	comp = bt_mesh_comp_get();
   13874:	f7fe fdc6 	bl	12404 <bt_mesh_comp_get>
   13878:	4605      	mov	r5, r0
	net_buf_simple_add_le16(buf, comp->cid);
   1387a:	8801      	ldrh	r1, [r0, #0]
   1387c:	a805      	add	r0, sp, #20
   1387e:	f019 f8c3 	bl	2ca08 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(buf, comp->pid);
   13882:	8869      	ldrh	r1, [r5, #2]
   13884:	a805      	add	r0, sp, #20
   13886:	f019 f8bf 	bl	2ca08 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(buf, comp->vid);
   1388a:	88a9      	ldrh	r1, [r5, #4]
   1388c:	a805      	add	r0, sp, #20
   1388e:	f019 f8bb 	bl	2ca08 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(buf, CONFIG_BT_MESH_CRPL);
   13892:	210a      	movs	r1, #10
   13894:	a805      	add	r0, sp, #20
   13896:	f019 f8b7 	bl	2ca08 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(buf, feat);
   1389a:	2107      	movs	r1, #7
   1389c:	a805      	add	r0, sp, #20
   1389e:	f019 f8b3 	bl	2ca08 <net_buf_simple_add_le16>
	for (i = 0; i < comp->elem_count; i++) {
   138a2:	2600      	movs	r6, #0
	    4 + (elem->model_count * 2U) + (elem->vnd_model_count * 4U)) {
   138a4:	f04f 0b02 	mov.w	fp, #2
		net_buf_simple_add_le16(buf, mod->id);
   138a8:	f04f 081c 	mov.w	r8, #28
	for (i = 0; i < comp->elem_count; i++) {
   138ac:	68ab      	ldr	r3, [r5, #8]
   138ae:	42b3      	cmp	r3, r6
   138b0:	d80a      	bhi.n	138c8 <dev_comp_data_get+0x80>
	if (bt_mesh_model_send(model, ctx, &sdu, NULL, NULL)) {
   138b2:	2300      	movs	r3, #0
   138b4:	9300      	str	r3, [sp, #0]
   138b6:	aa05      	add	r2, sp, #20
   138b8:	4651      	mov	r1, sl
   138ba:	4648      	mov	r0, r9
   138bc:	f017 fa60 	bl	2ad80 <bt_mesh_model_send>
   138c0:	b1c0      	cbz	r0, 138f4 <dev_comp_data_get+0xac>
		BT_ERR("Unable to send Device Composition Status response");
   138c2:	2145      	movs	r1, #69	; 0x45
   138c4:	4824      	ldr	r0, [pc, #144]	; (13958 <dev_comp_data_get+0x110>)
   138c6:	e013      	b.n	138f0 <dev_comp_data_get+0xa8>
		err = comp_add_elem(buf, &comp->elem[i], i == 0);
   138c8:	68ec      	ldr	r4, [r5, #12]
   138ca:	eb04 1406 	add.w	r4, r4, r6, lsl #4
	if (net_buf_simple_tailroom(buf) <
   138ce:	a805      	add	r0, sp, #20
   138d0:	f019 f87f 	bl	2c9d2 <net_buf_simple_tailroom>
	    4 + (elem->model_count * 2U) + (elem->vnd_model_count * 4U)) {
   138d4:	7922      	ldrb	r2, [r4, #4]
   138d6:	7963      	ldrb	r3, [r4, #5]
   138d8:	3202      	adds	r2, #2
   138da:	fb1b 2303 	smlabb	r3, fp, r3, r2
	if (net_buf_simple_tailroom(buf) <
   138de:	ebb0 0f43 	cmp.w	r0, r3, lsl #1
   138e2:	d20a      	bcs.n	138fa <dev_comp_data_get+0xb2>
		BT_ERR("Too large device composition");
   138e4:	2145      	movs	r1, #69	; 0x45
   138e6:	481d      	ldr	r0, [pc, #116]	; (1395c <dev_comp_data_get+0x114>)
   138e8:	f013 fb41 	bl	26f6e <printk>
		BT_ERR("Unable to get composition page 0");
   138ec:	481c      	ldr	r0, [pc, #112]	; (13960 <dev_comp_data_get+0x118>)
   138ee:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Unable to send Device Composition Status response");
   138f0:	f013 fb3d 	bl	26f6e <printk>
}
   138f4:	b027      	add	sp, #156	; 0x9c
   138f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	net_buf_simple_add_le16(buf, elem->loc);
   138fa:	8861      	ldrh	r1, [r4, #2]
   138fc:	a805      	add	r0, sp, #20
   138fe:	f019 f883 	bl	2ca08 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(buf, elem->model_count);
   13902:	7921      	ldrb	r1, [r4, #4]
   13904:	a805      	add	r0, sp, #20
   13906:	f019 f878 	bl	2c9fa <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, elem->vnd_model_count);
   1390a:	7961      	ldrb	r1, [r4, #5]
   1390c:	a805      	add	r0, sp, #20
   1390e:	f019 f874 	bl	2c9fa <net_buf_simple_add_u8>
	for (i = 0; i < elem->model_count; i++) {
   13912:	2700      	movs	r7, #0
   13914:	7923      	ldrb	r3, [r4, #4]
   13916:	429f      	cmp	r7, r3
   13918:	db05      	blt.n	13926 <dev_comp_data_get+0xde>
	for (i = 0; i < elem->vnd_model_count; i++) {
   1391a:	2700      	movs	r7, #0
   1391c:	7963      	ldrb	r3, [r4, #5]
   1391e:	429f      	cmp	r7, r3
   13920:	db0a      	blt.n	13938 <dev_comp_data_get+0xf0>
	for (i = 0; i < comp->elem_count; i++) {
   13922:	3601      	adds	r6, #1
   13924:	e7c2      	b.n	138ac <dev_comp_data_get+0x64>
		net_buf_simple_add_le16(buf, mod->id);
   13926:	fb08 f307 	mul.w	r3, r8, r7
   1392a:	68a2      	ldr	r2, [r4, #8]
   1392c:	a805      	add	r0, sp, #20
   1392e:	5ad1      	ldrh	r1, [r2, r3]
   13930:	f019 f86a 	bl	2ca08 <net_buf_simple_add_le16>
	for (i = 0; i < elem->model_count; i++) {
   13934:	3701      	adds	r7, #1
   13936:	e7ed      	b.n	13914 <dev_comp_data_get+0xcc>
		mod = &elem->vnd_models[i];
   13938:	fb08 f307 	mul.w	r3, r8, r7
   1393c:	68e1      	ldr	r1, [r4, #12]
		net_buf_simple_add_le16(buf, mod->vnd.company);
   1393e:	a805      	add	r0, sp, #20
		mod = &elem->vnd_models[i];
   13940:	18ca      	adds	r2, r1, r3
		net_buf_simple_add_le16(buf, mod->vnd.company);
   13942:	5ac9      	ldrh	r1, [r1, r3]
		mod = &elem->vnd_models[i];
   13944:	9203      	str	r2, [sp, #12]
		net_buf_simple_add_le16(buf, mod->vnd.company);
   13946:	f019 f85f 	bl	2ca08 <net_buf_simple_add_le16>
		net_buf_simple_add_le16(buf, mod->vnd.id);
   1394a:	9a03      	ldr	r2, [sp, #12]
   1394c:	a805      	add	r0, sp, #20
   1394e:	8851      	ldrh	r1, [r2, #2]
   13950:	f019 f85a 	bl	2ca08 <net_buf_simple_add_le16>
	for (i = 0; i < elem->vnd_model_count; i++) {
   13954:	3701      	adds	r7, #1
   13956:	e7e1      	b.n	1391c <dev_comp_data_get+0xd4>
   13958:	0003323b 	.word	0x0003323b
   1395c:	000331f3 	.word	0x000331f3
   13960:	00033215 	.word	0x00033215

00013964 <_mod_pub_set.constprop.29>:
static uint8_t _mod_pub_set(struct bt_mesh_model *model, uint16_t pub_addr,
   13964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13968:	4605      	mov	r5, r0
	if (!model->pub) {
   1396a:	6880      	ldr	r0, [r0, #8]
static uint8_t _mod_pub_set(struct bt_mesh_model *model, uint16_t pub_addr,
   1396c:	f89d 601c 	ldrb.w	r6, [sp, #28]
   13970:	4688      	mov	r8, r1
   13972:	4617      	mov	r7, r2
   13974:	461c      	mov	r4, r3
	if (!model->pub) {
   13976:	2800      	cmp	r0, #0
   13978:	d062      	beq.n	13a40 <_mod_pub_set.constprop.29+0xdc>
	if (!IS_ENABLED(CONFIG_BT_MESH_LOW_POWER) && cred_flag) {
   1397a:	2b00      	cmp	r3, #0
   1397c:	d15e      	bne.n	13a3c <_mod_pub_set.constprop.29+0xd8>
	if (!model->pub->update && period) {
   1397e:	6942      	ldr	r2, [r0, #20]
   13980:	b90a      	cbnz	r2, 13986 <_mod_pub_set.constprop.29+0x22>
   13982:	2e00      	cmp	r6, #0
   13984:	d15c      	bne.n	13a40 <_mod_pub_set.constprop.29+0xdc>
	if (pub_addr == BT_MESH_ADDR_UNASSIGNED) {
   13986:	f1b8 0f00 	cmp.w	r8, #0
   1398a:	d113      	bne.n	139b4 <_mod_pub_set.constprop.29+0x50>
		if (model->pub->addr == BT_MESH_ADDR_UNASSIGNED) {
   1398c:	8883      	ldrh	r3, [r0, #4]
   1398e:	b173      	cbz	r3, 139ae <_mod_pub_set.constprop.29+0x4a>
		model->pub->addr = BT_MESH_ADDR_UNASSIGNED;
   13990:	6843      	ldr	r3, [r0, #4]
   13992:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
   13996:	6043      	str	r3, [r0, #4]
		model->pub->ttl = 0U;
   13998:	6883      	ldr	r3, [r0, #8]
   1399a:	f003 53f8 	and.w	r3, r3, #520093696	; 0x1f000000
   1399e:	6083      	str	r3, [r0, #8]
		if (model->pub->update) {
   139a0:	b112      	cbz	r2, 139a8 <_mod_pub_set.constprop.29+0x44>
			k_delayed_work_cancel(&model->pub->timer);
   139a2:	3018      	adds	r0, #24
   139a4:	f010 fa68 	bl	23e78 <k_delayed_work_cancel>
			bt_mesh_model_pub_store(model);
   139a8:	4628      	mov	r0, r5
   139aa:	f017 fa3e 	bl	2ae2a <bt_mesh_model_pub_store>
}
   139ae:	4620      	mov	r0, r4
   139b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!bt_mesh_app_key_exists(app_idx)) {
   139b4:	4638      	mov	r0, r7
   139b6:	f7fb ffd1 	bl	f95c <bt_mesh_app_key_exists>
   139ba:	2800      	cmp	r0, #0
   139bc:	d042      	beq.n	13a44 <_mod_pub_set.constprop.29+0xe0>
	if (BT_MESH_ADDR_IS_VIRTUAL(model->pub->addr)) {
   139be:	68ab      	ldr	r3, [r5, #8]
   139c0:	8898      	ldrh	r0, [r3, #4]
   139c2:	f480 4300 	eor.w	r3, r0, #32768	; 0x8000
   139c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   139ca:	d205      	bcs.n	139d8 <_mod_pub_set.constprop.29+0x74>
		uint8_t *uuid = bt_mesh_va_label_get(model->pub->addr);
   139cc:	f7fc fe46 	bl	1065c <bt_mesh_va_label_get>
		if (uuid) {
   139d0:	b110      	cbz	r0, 139d8 <_mod_pub_set.constprop.29+0x74>
			bt_mesh_va_del(uuid, NULL);
   139d2:	2100      	movs	r1, #0
   139d4:	f7fc fe1e 	bl	10614 <bt_mesh_va_del>
	model->pub->addr = pub_addr;
   139d8:	68ab      	ldr	r3, [r5, #8]
	model->pub->key = app_idx;
   139da:	88da      	ldrh	r2, [r3, #6]
	model->pub->addr = pub_addr;
   139dc:	f8a3 8004 	strh.w	r8, [r3, #4]
	model->pub->key = app_idx;
   139e0:	f367 020b 	bfi	r2, r7, #0, #12
   139e4:	80da      	strh	r2, [r3, #6]
	model->pub->cred = cred_flag;
   139e6:	f3c2 2207 	ubfx	r2, r2, #8, #8
   139ea:	f36f 1204 	bfc	r2, #4, #1
   139ee:	71da      	strb	r2, [r3, #7]
	model->pub->ttl = ttl;
   139f0:	f89d 2018 	ldrb.w	r2, [sp, #24]
   139f4:	721a      	strb	r2, [r3, #8]
	model->pub->retransmit = retransmit;
   139f6:	f89d 2020 	ldrb.w	r2, [sp, #32]
	model->pub->period = period;
   139fa:	729e      	strb	r6, [r3, #10]
	model->pub->retransmit = retransmit;
   139fc:	725a      	strb	r2, [r3, #9]
	if (model->pub->update) {
   139fe:	695b      	ldr	r3, [r3, #20]
   13a00:	2b00      	cmp	r3, #0
   13a02:	d0d1      	beq.n	139a8 <_mod_pub_set.constprop.29+0x44>
		period_ms = bt_mesh_model_pub_period_get(model);
   13a04:	4628      	mov	r0, r5
   13a06:	f7fe f911 	bl	11c2c <bt_mesh_model_pub_period_get>
		if (period_ms > 0) {
   13a0a:	f1b0 0c00 	subs.w	ip, r0, #0
   13a0e:	68a8      	ldr	r0, [r5, #8]
   13a10:	ddc7      	ble.n	139a2 <_mod_pub_set.constprop.29+0x3e>
			k_delayed_work_submit(&model->pub->timer,
   13a12:	f100 0618 	add.w	r6, r0, #24
			return (t * to_hz + off) / from_hz;
   13a16:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   13a1a:	f240 30e7 	movw	r0, #999	; 0x3e7
   13a1e:	2100      	movs	r1, #0
   13a20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   13a24:	2300      	movs	r3, #0
   13a26:	fbc7 010c 	smlal	r0, r1, r7, ip
   13a2a:	f7ed ffff 	bl	1a2c <__aeabi_uldivmod>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   13a2e:	4602      	mov	r2, r0
   13a30:	460b      	mov	r3, r1
   13a32:	4805      	ldr	r0, [pc, #20]	; (13a48 <_mod_pub_set.constprop.29+0xe4>)
   13a34:	4631      	mov	r1, r6
   13a36:	f010 f9af 	bl	23d98 <k_delayed_work_submit_to_queue>
   13a3a:	e7b5      	b.n	139a8 <_mod_pub_set.constprop.29+0x44>
		return STATUS_FEAT_NOT_SUPP;
   13a3c:	240a      	movs	r4, #10
   13a3e:	e7b6      	b.n	139ae <_mod_pub_set.constprop.29+0x4a>
		return STATUS_NVAL_PUB_PARAM;
   13a40:	2407      	movs	r4, #7
   13a42:	e7b4      	b.n	139ae <_mod_pub_set.constprop.29+0x4a>
		return STATUS_INVALID_APPKEY;
   13a44:	2403      	movs	r4, #3
   13a46:	e7b2      	b.n	139ae <_mod_pub_set.constprop.29+0x4a>
   13a48:	20002490 	.word	0x20002490

00013a4c <mod_app_unbind>:
{
   13a4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13a50:	4614      	mov	r4, r2
   13a52:	b08b      	sub	sp, #44	; 0x2c
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_APP_STATUS, 9);
   13a54:	ab06      	add	r3, sp, #24
   13a56:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
{
   13a5a:	4607      	mov	r7, r0
	elem_addr = net_buf_simple_pull_le16(buf);
   13a5c:	4620      	mov	r0, r4
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_APP_STATUS, 9);
   13a5e:	9303      	str	r3, [sp, #12]
   13a60:	e9cd 2304 	strd	r2, r3, [sp, #16]
{
   13a64:	4688      	mov	r8, r1
	elem_addr = net_buf_simple_pull_le16(buf);
   13a66:	f018 ff7e 	bl	2c966 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   13a6a:	b203      	sxth	r3, r0
   13a6c:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   13a6e:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   13a70:	dc06      	bgt.n	13a80 <mod_app_unbind+0x34>
		BT_WARN("Prohibited element address");
   13a72:	4820      	ldr	r0, [pc, #128]	; (13af4 <mod_app_unbind+0xa8>)
   13a74:	2157      	movs	r1, #87	; 0x57
		BT_ERR("Unable to send Model App Unbind Status response");
   13a76:	f013 fa7a 	bl	26f6e <printk>
}
   13a7a:	b00b      	add	sp, #44	; 0x2c
   13a7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	key_app_idx = net_buf_simple_pull_le16(buf);
   13a80:	4620      	mov	r0, r4
   13a82:	f018 ff70 	bl	2c966 <net_buf_simple_pull_le16>
   13a86:	4606      	mov	r6, r0
	elem = bt_mesh_elem_find(elem_addr);
   13a88:	4628      	mov	r0, r5
	mod_id = buf->data;
   13a8a:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   13a8e:	f7fe fa9d 	bl	11fcc <bt_mesh_elem_find>
	if (!elem) {
   13a92:	b9d8      	cbnz	r0, 13acc <mod_app_unbind+0x80>
		vnd = (buf->len == 4U);
   13a94:	88a3      	ldrh	r3, [r4, #4]
   13a96:	1f1a      	subs	r2, r3, #4
   13a98:	4253      	negs	r3, r2
   13a9a:	4153      	adcs	r3, r2
   13a9c:	f88d 300b 	strb.w	r3, [sp, #11]
		status = STATUS_INVALID_ADDRESS;
   13aa0:	2001      	movs	r0, #1
	create_mod_app_status(&msg, mod, vnd, elem_addr, key_app_idx, status,
   13aa2:	e9cd 0900 	strd	r0, r9, [sp]
   13aa6:	4633      	mov	r3, r6
   13aa8:	462a      	mov	r2, r5
   13aaa:	f89d 100b 	ldrb.w	r1, [sp, #11]
   13aae:	a803      	add	r0, sp, #12
   13ab0:	f017 fa83 	bl	2afba <create_mod_app_status.isra.13>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   13ab4:	2300      	movs	r3, #0
   13ab6:	9300      	str	r3, [sp, #0]
   13ab8:	aa03      	add	r2, sp, #12
   13aba:	4641      	mov	r1, r8
   13abc:	4638      	mov	r0, r7
   13abe:	f017 f95f 	bl	2ad80 <bt_mesh_model_send>
   13ac2:	2800      	cmp	r0, #0
   13ac4:	d0d9      	beq.n	13a7a <mod_app_unbind+0x2e>
		BT_ERR("Unable to send Model App Unbind Status response");
   13ac6:	2145      	movs	r1, #69	; 0x45
   13ac8:	480b      	ldr	r0, [pc, #44]	; (13af8 <mod_app_unbind+0xac>)
   13aca:	e7d4      	b.n	13a76 <mod_app_unbind+0x2a>
	mod = get_model(elem, buf, &vnd);
   13acc:	4621      	mov	r1, r4
   13ace:	f10d 020b 	add.w	r2, sp, #11
   13ad2:	f017 fa51 	bl	2af78 <get_model>
	if (!mod) {
   13ad6:	4604      	mov	r4, r0
   13ad8:	b140      	cbz	r0, 13aec <mod_app_unbind+0xa0>
	if (!bt_mesh_app_key_exists(key_idx)) {
   13ada:	4630      	mov	r0, r6
   13adc:	f7fb ff3e 	bl	f95c <bt_mesh_app_key_exists>
   13ae0:	b130      	cbz	r0, 13af0 <mod_app_unbind+0xa4>
   13ae2:	4631      	mov	r1, r6
   13ae4:	4620      	mov	r0, r4
   13ae6:	f017 fa92 	bl	2b00e <mod_unbind.part.2.constprop.28>
   13aea:	e7da      	b.n	13aa2 <mod_app_unbind+0x56>
		status = STATUS_INVALID_MODEL;
   13aec:	2002      	movs	r0, #2
   13aee:	e7d8      	b.n	13aa2 <mod_app_unbind+0x56>
		return STATUS_INVALID_APPKEY;
   13af0:	2003      	movs	r0, #3
   13af2:	e7d6      	b.n	13aa2 <mod_app_unbind+0x56>
   13af4:	000334dc 	.word	0x000334dc
   13af8:	0003345d 	.word	0x0003345d

00013afc <mod_pub_va_set>:
{
   13afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b00:	4682      	mov	sl, r0
   13b02:	b08b      	sub	sp, #44	; 0x2c
	elem_addr = net_buf_simple_pull_le16(buf);
   13b04:	4610      	mov	r0, r2
{
   13b06:	468b      	mov	fp, r1
   13b08:	4614      	mov	r4, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   13b0a:	f018 ff2c 	bl	2c966 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   13b0e:	b203      	sxth	r3, r0
   13b10:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   13b12:	4606      	mov	r6, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   13b14:	dc06      	bgt.n	13b24 <mod_pub_va_set+0x28>
		BT_WARN("Prohibited element address");
   13b16:	2157      	movs	r1, #87	; 0x57
   13b18:	4838      	ldr	r0, [pc, #224]	; (13bfc <mod_pub_va_set+0x100>)
   13b1a:	f013 fa28 	bl	26f6e <printk>
}
   13b1e:	b00b      	add	sp, #44	; 0x2c
   13b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	label_uuid = net_buf_simple_pull_mem(buf, 16);
   13b24:	2110      	movs	r1, #16
   13b26:	4620      	mov	r0, r4
   13b28:	f00b fb46 	bl	1f1b8 <net_buf_simple_pull_mem>
   13b2c:	4680      	mov	r8, r0
	pub_app_idx = net_buf_simple_pull_le16(buf);
   13b2e:	4620      	mov	r0, r4
   13b30:	f018 ff19 	bl	2c966 <net_buf_simple_pull_le16>
   13b34:	4681      	mov	r9, r0
	pub_ttl = net_buf_simple_pull_u8(buf);
   13b36:	4620      	mov	r0, r4
   13b38:	f018 ff0d 	bl	2c956 <net_buf_simple_pull_u8>
	if (pub_ttl > BT_MESH_TTL_MAX && pub_ttl != BT_MESH_TTL_DEFAULT) {
   13b3c:	f1a0 0380 	sub.w	r3, r0, #128	; 0x80
   13b40:	b2db      	uxtb	r3, r3
   13b42:	2b7e      	cmp	r3, #126	; 0x7e
	pub_ttl = net_buf_simple_pull_u8(buf);
   13b44:	4607      	mov	r7, r0
	if (pub_ttl > BT_MESH_TTL_MAX && pub_ttl != BT_MESH_TTL_DEFAULT) {
   13b46:	d805      	bhi.n	13b54 <mod_pub_va_set+0x58>
		BT_ERR("Invalid TTL value 0x%02x", pub_ttl);
   13b48:	4602      	mov	r2, r0
   13b4a:	2145      	movs	r1, #69	; 0x45
   13b4c:	482c      	ldr	r0, [pc, #176]	; (13c00 <mod_pub_va_set+0x104>)
   13b4e:	f013 fa0e 	bl	26f6e <printk>
		return;
   13b52:	e7e4      	b.n	13b1e <mod_pub_va_set+0x22>
	pub_period = net_buf_simple_pull_u8(buf);
   13b54:	4620      	mov	r0, r4
   13b56:	f018 fefe 	bl	2c956 <net_buf_simple_pull_u8>
   13b5a:	9006      	str	r0, [sp, #24]
	retransmit = net_buf_simple_pull_u8(buf);
   13b5c:	4620      	mov	r0, r4
   13b5e:	f018 fefa 	bl	2c956 <net_buf_simple_pull_u8>
	mod_id = buf->data;
   13b62:	6823      	ldr	r3, [r4, #0]
	retransmit = net_buf_simple_pull_u8(buf);
   13b64:	9007      	str	r0, [sp, #28]
	elem = bt_mesh_elem_find(elem_addr);
   13b66:	4630      	mov	r0, r6
	mod_id = buf->data;
   13b68:	9305      	str	r3, [sp, #20]
	elem = bt_mesh_elem_find(elem_addr);
   13b6a:	f7fe fa2f 	bl	11fcc <bt_mesh_elem_find>
	if (!elem) {
   13b6e:	4605      	mov	r5, r0
   13b70:	b9c0      	cbnz	r0, 13ba4 <mod_pub_va_set+0xa8>
		vnd = (buf->len == 4U);
   13b72:	88a3      	ldrh	r3, [r4, #4]
		pub_addr = 0U;
   13b74:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
		vnd = (buf->len == 4U);
   13b78:	1f1a      	subs	r2, r3, #4
   13b7a:	4253      	negs	r3, r2
   13b7c:	4153      	adcs	r3, r2
   13b7e:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
		status = STATUS_INVALID_ADDRESS;
   13b82:	2301      	movs	r3, #1
	send_mod_pub_status(model, ctx, elem_addr, pub_addr, vnd, mod,
   13b84:	9a05      	ldr	r2, [sp, #20]
   13b86:	3508      	adds	r5, #8
   13b88:	e9cd 3202 	strd	r3, r2, [sp, #8]
   13b8c:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   13b90:	9300      	str	r3, [sp, #0]
   13b92:	9501      	str	r5, [sp, #4]
   13b94:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   13b98:	4632      	mov	r2, r6
   13b9a:	4659      	mov	r1, fp
   13b9c:	4650      	mov	r0, sl
   13b9e:	f7ff fc4d 	bl	1343c <send_mod_pub_status.isra.15>
   13ba2:	e7bc      	b.n	13b1e <mod_pub_va_set+0x22>
	mod = get_model(elem, buf, &vnd);
   13ba4:	f10d 0225 	add.w	r2, sp, #37	; 0x25
   13ba8:	4621      	mov	r1, r4
   13baa:	f017 f9e5 	bl	2af78 <get_model>
	if (!mod) {
   13bae:	4605      	mov	r5, r0
   13bb0:	b918      	cbnz	r0, 13bba <mod_pub_va_set+0xbe>
		pub_addr = 0U;
   13bb2:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
		status = STATUS_INVALID_MODEL;
   13bb6:	2302      	movs	r3, #2
		goto send_status;
   13bb8:	e7e4      	b.n	13b84 <mod_pub_va_set+0x88>
	status = bt_mesh_va_add(label_uuid, &pub_addr);
   13bba:	f10d 0126 	add.w	r1, sp, #38	; 0x26
   13bbe:	4640      	mov	r0, r8
   13bc0:	f7fc fce6 	bl	10590 <bt_mesh_va_add>
   13bc4:	4603      	mov	r3, r0
   13bc6:	4604      	mov	r4, r0
	if (status != STATUS_SUCCESS) {
   13bc8:	2800      	cmp	r0, #0
   13bca:	d1db      	bne.n	13b84 <mod_pub_va_set+0x88>
	status = _mod_pub_set(mod, pub_addr, pub_app_idx, cred_flag, pub_ttl,
   13bcc:	9b07      	ldr	r3, [sp, #28]
   13bce:	9302      	str	r3, [sp, #8]
   13bd0:	9b06      	ldr	r3, [sp, #24]
   13bd2:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
   13bd6:	e9cd 7300 	strd	r7, r3, [sp]
   13bda:	f3c9 020b 	ubfx	r2, r9, #0, #12
   13bde:	f3c9 3300 	ubfx	r3, r9, #12, #1
   13be2:	4628      	mov	r0, r5
   13be4:	f7ff febe 	bl	13964 <_mod_pub_set.constprop.29>
	if (status != STATUS_SUCCESS) {
   13be8:	4603      	mov	r3, r0
   13bea:	2800      	cmp	r0, #0
   13bec:	d0ca      	beq.n	13b84 <mod_pub_va_set+0x88>
   13bee:	9006      	str	r0, [sp, #24]
		bt_mesh_va_del(label_uuid, NULL);
   13bf0:	4621      	mov	r1, r4
   13bf2:	4640      	mov	r0, r8
   13bf4:	f7fc fd0e 	bl	10614 <bt_mesh_va_del>
   13bf8:	9b06      	ldr	r3, [sp, #24]
   13bfa:	e7c3      	b.n	13b84 <mod_pub_va_set+0x88>
   13bfc:	000334dc 	.word	0x000334dc
   13c00:	00033492 	.word	0x00033492

00013c04 <mod_pub_set>:
{
   13c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c08:	4681      	mov	r9, r0
   13c0a:	b08b      	sub	sp, #44	; 0x2c
	elem_addr = net_buf_simple_pull_le16(buf);
   13c0c:	4610      	mov	r0, r2
{
   13c0e:	468a      	mov	sl, r1
   13c10:	4614      	mov	r4, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   13c12:	f018 fea8 	bl	2c966 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   13c16:	b203      	sxth	r3, r0
   13c18:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   13c1a:	4606      	mov	r6, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   13c1c:	dc06      	bgt.n	13c2c <mod_pub_set+0x28>
		BT_WARN("Prohibited element address");
   13c1e:	2157      	movs	r1, #87	; 0x57
   13c20:	482b      	ldr	r0, [pc, #172]	; (13cd0 <mod_pub_set+0xcc>)
   13c22:	f013 f9a4 	bl	26f6e <printk>
}
   13c26:	b00b      	add	sp, #44	; 0x2c
   13c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	pub_addr = net_buf_simple_pull_le16(buf);
   13c2c:	4620      	mov	r0, r4
   13c2e:	f018 fe9a 	bl	2c966 <net_buf_simple_pull_le16>
   13c32:	4607      	mov	r7, r0
	pub_app_idx = net_buf_simple_pull_le16(buf);
   13c34:	4620      	mov	r0, r4
   13c36:	f018 fe96 	bl	2c966 <net_buf_simple_pull_le16>
   13c3a:	4680      	mov	r8, r0
	pub_ttl = net_buf_simple_pull_u8(buf);
   13c3c:	4620      	mov	r0, r4
   13c3e:	f018 fe8a 	bl	2c956 <net_buf_simple_pull_u8>
	if (pub_ttl > BT_MESH_TTL_MAX && pub_ttl != BT_MESH_TTL_DEFAULT) {
   13c42:	f1a0 0280 	sub.w	r2, r0, #128	; 0x80
   13c46:	b2d2      	uxtb	r2, r2
   13c48:	2a7e      	cmp	r2, #126	; 0x7e
	pub_ttl = net_buf_simple_pull_u8(buf);
   13c4a:	4683      	mov	fp, r0
	if (pub_ttl > BT_MESH_TTL_MAX && pub_ttl != BT_MESH_TTL_DEFAULT) {
   13c4c:	d805      	bhi.n	13c5a <mod_pub_set+0x56>
		BT_ERR("Invalid TTL value 0x%02x", pub_ttl);
   13c4e:	4602      	mov	r2, r0
   13c50:	2145      	movs	r1, #69	; 0x45
   13c52:	4820      	ldr	r0, [pc, #128]	; (13cd4 <mod_pub_set+0xd0>)
   13c54:	f013 f98b 	bl	26f6e <printk>
		return;
   13c58:	e7e5      	b.n	13c26 <mod_pub_set+0x22>
	pub_period = net_buf_simple_pull_u8(buf);
   13c5a:	4620      	mov	r0, r4
   13c5c:	f018 fe7b 	bl	2c956 <net_buf_simple_pull_u8>
   13c60:	9006      	str	r0, [sp, #24]
	retransmit = net_buf_simple_pull_u8(buf);
   13c62:	4620      	mov	r0, r4
   13c64:	f018 fe77 	bl	2c956 <net_buf_simple_pull_u8>
	mod_id = buf->data;
   13c68:	6823      	ldr	r3, [r4, #0]
	retransmit = net_buf_simple_pull_u8(buf);
   13c6a:	9007      	str	r0, [sp, #28]
	elem = bt_mesh_elem_find(elem_addr);
   13c6c:	4630      	mov	r0, r6
	mod_id = buf->data;
   13c6e:	9305      	str	r3, [sp, #20]
	elem = bt_mesh_elem_find(elem_addr);
   13c70:	f7fe f9ac 	bl	11fcc <bt_mesh_elem_find>
	if (!elem) {
   13c74:	4605      	mov	r5, r0
   13c76:	b9a8      	cbnz	r0, 13ca4 <mod_pub_set+0xa0>
		vnd = (buf->len == 4U);
   13c78:	88a3      	ldrh	r3, [r4, #4]
   13c7a:	1f1a      	subs	r2, r3, #4
   13c7c:	4253      	negs	r3, r2
   13c7e:	4153      	adcs	r3, r2
   13c80:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
		status = STATUS_INVALID_ADDRESS;
   13c84:	2001      	movs	r0, #1
	send_mod_pub_status(model, ctx, elem_addr, pub_addr, vnd, mod,
   13c86:	9b05      	ldr	r3, [sp, #20]
   13c88:	3508      	adds	r5, #8
   13c8a:	e9cd 0302 	strd	r0, r3, [sp, #8]
   13c8e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   13c92:	9300      	str	r3, [sp, #0]
   13c94:	9501      	str	r5, [sp, #4]
   13c96:	463b      	mov	r3, r7
   13c98:	4632      	mov	r2, r6
   13c9a:	4651      	mov	r1, sl
   13c9c:	4648      	mov	r0, r9
   13c9e:	f7ff fbcd 	bl	1343c <send_mod_pub_status.isra.15>
   13ca2:	e7c0      	b.n	13c26 <mod_pub_set+0x22>
	mod = get_model(elem, buf, &vnd);
   13ca4:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   13ca8:	4621      	mov	r1, r4
   13caa:	f017 f965 	bl	2af78 <get_model>
	if (!mod) {
   13cae:	4605      	mov	r5, r0
   13cb0:	b160      	cbz	r0, 13ccc <mod_pub_set+0xc8>
	status = _mod_pub_set(mod, pub_addr, pub_app_idx, cred_flag, pub_ttl,
   13cb2:	9b07      	ldr	r3, [sp, #28]
   13cb4:	9302      	str	r3, [sp, #8]
   13cb6:	9b06      	ldr	r3, [sp, #24]
   13cb8:	f3c8 020b 	ubfx	r2, r8, #0, #12
   13cbc:	e9cd b300 	strd	fp, r3, [sp]
   13cc0:	4639      	mov	r1, r7
   13cc2:	f3c8 3300 	ubfx	r3, r8, #12, #1
   13cc6:	f7ff fe4d 	bl	13964 <_mod_pub_set.constprop.29>
   13cca:	e7dc      	b.n	13c86 <mod_pub_set+0x82>
		status = STATUS_INVALID_MODEL;
   13ccc:	2002      	movs	r0, #2
   13cce:	e7da      	b.n	13c86 <mod_pub_set+0x82>
   13cd0:	000334dc 	.word	0x000334dc
   13cd4:	00033492 	.word	0x00033492

00013cd8 <hb_sub_send_status>:
{
   13cd8:	b570      	push	{r4, r5, r6, lr}
   13cda:	b08a      	sub	sp, #40	; 0x28
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_HEARTBEAT_SUB_STATUS, 9);
   13cdc:	ab06      	add	r3, sp, #24
{
   13cde:	4614      	mov	r4, r2
   13ce0:	4605      	mov	r5, r0
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_HEARTBEAT_SUB_STATUS, 9);
   13ce2:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
	bt_mesh_model_msg_init(&msg, OP_HEARTBEAT_SUB_STATUS);
   13ce6:	a803      	add	r0, sp, #12
{
   13ce8:	460e      	mov	r6, r1
	bt_mesh_model_msg_init(&msg, OP_HEARTBEAT_SUB_STATUS);
   13cea:	f248 013c 	movw	r1, #32828	; 0x803c
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_HEARTBEAT_SUB_STATUS, 9);
   13cee:	9303      	str	r3, [sp, #12]
   13cf0:	e9cd 2304 	strd	r2, r3, [sp, #16]
	bt_mesh_model_msg_init(&msg, OP_HEARTBEAT_SUB_STATUS);
   13cf4:	f017 f81b 	bl	2ad2e <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, STATUS_SUCCESS);
   13cf8:	2100      	movs	r1, #0
   13cfa:	a803      	add	r0, sp, #12
   13cfc:	f018 fe7d 	bl	2c9fa <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, sub->src);
   13d00:	8921      	ldrh	r1, [r4, #8]
   13d02:	a803      	add	r0, sp, #12
   13d04:	f018 fe80 	bl	2ca08 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, sub->dst);
   13d08:	8961      	ldrh	r1, [r4, #10]
   13d0a:	a803      	add	r0, sp, #12
   13d0c:	f018 fe7c 	bl	2ca08 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(&msg, bt_mesh_hb_log(sub->remaining));
   13d10:	6861      	ldr	r1, [r4, #4]
	if (!val) {
   13d12:	b149      	cbz	r1, 13d28 <hb_sub_send_status+0x50>
	} else if (val == 0xffff) {
   13d14:	f64f 73ff 	movw	r3, #65535	; 0xffff
   13d18:	4299      	cmp	r1, r3
		return 32 - __builtin_clz(val);
   13d1a:	bf1d      	ittte	ne
   13d1c:	fab1 f181 	clzne	r1, r1
   13d20:	f1c1 0120 	rsbne	r1, r1, #32
   13d24:	b2c9      	uxtbne	r1, r1
		return 0xff;
   13d26:	21ff      	moveq	r1, #255	; 0xff
   13d28:	a803      	add	r0, sp, #12
   13d2a:	f018 fe66 	bl	2c9fa <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, bt_mesh_hb_log(sub->count));
   13d2e:	89a1      	ldrh	r1, [r4, #12]
	if (!val) {
   13d30:	b149      	cbz	r1, 13d46 <hb_sub_send_status+0x6e>
	} else if (val == 0xffff) {
   13d32:	f64f 73ff 	movw	r3, #65535	; 0xffff
   13d36:	4299      	cmp	r1, r3
		return 32 - __builtin_clz(val);
   13d38:	bf1d      	ittte	ne
   13d3a:	fab1 f181 	clzne	r1, r1
   13d3e:	f1c1 0120 	rsbne	r1, r1, #32
   13d42:	b2c9      	uxtbne	r1, r1
		return 0xff;
   13d44:	21ff      	moveq	r1, #255	; 0xff
   13d46:	a803      	add	r0, sp, #12
   13d48:	f018 fe57 	bl	2c9fa <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, sub->min_hops);
   13d4c:	7ba1      	ldrb	r1, [r4, #14]
   13d4e:	a803      	add	r0, sp, #12
   13d50:	f018 fe53 	bl	2c9fa <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, sub->max_hops);
   13d54:	7be1      	ldrb	r1, [r4, #15]
   13d56:	a803      	add	r0, sp, #12
   13d58:	f018 fe4f 	bl	2c9fa <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   13d5c:	2300      	movs	r3, #0
   13d5e:	9300      	str	r3, [sp, #0]
   13d60:	aa03      	add	r2, sp, #12
   13d62:	4631      	mov	r1, r6
   13d64:	4628      	mov	r0, r5
   13d66:	f017 f80b 	bl	2ad80 <bt_mesh_model_send>
   13d6a:	b118      	cbz	r0, 13d74 <hb_sub_send_status+0x9c>
		BT_ERR("Unable to send Heartbeat Subscription Status");
   13d6c:	2145      	movs	r1, #69	; 0x45
   13d6e:	4802      	ldr	r0, [pc, #8]	; (13d78 <hb_sub_send_status+0xa0>)
   13d70:	f013 f8fd 	bl	26f6e <printk>
}
   13d74:	b00a      	add	sp, #40	; 0x28
   13d76:	bd70      	pop	{r4, r5, r6, pc}
   13d78:	000332e9 	.word	0x000332e9

00013d7c <heartbeat_sub_set>:
{
   13d7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13d80:	4606      	mov	r6, r0
   13d82:	b085      	sub	sp, #20
	sub_src = net_buf_simple_pull_le16(buf);
   13d84:	4610      	mov	r0, r2
{
   13d86:	4614      	mov	r4, r2
   13d88:	460f      	mov	r7, r1
	sub_src = net_buf_simple_pull_le16(buf);
   13d8a:	f018 fdec 	bl	2c966 <net_buf_simple_pull_le16>
   13d8e:	4680      	mov	r8, r0
	sub_dst = net_buf_simple_pull_le16(buf);
   13d90:	4620      	mov	r0, r4
   13d92:	f018 fde8 	bl	2c966 <net_buf_simple_pull_le16>
   13d96:	4681      	mov	r9, r0
	period_log = net_buf_simple_pull_u8(buf);
   13d98:	4620      	mov	r0, r4
   13d9a:	f018 fddc 	bl	2c956 <net_buf_simple_pull_u8>
	if (period_log > 0x11) {
   13d9e:	2811      	cmp	r0, #17
	period_log = net_buf_simple_pull_u8(buf);
   13da0:	4604      	mov	r4, r0
	if (period_log > 0x11) {
   13da2:	d907      	bls.n	13db4 <heartbeat_sub_set+0x38>
		BT_WARN("Prohibited subscription period 0x%02x", period_log);
   13da4:	4602      	mov	r2, r0
   13da6:	2157      	movs	r1, #87	; 0x57
   13da8:	4815      	ldr	r0, [pc, #84]	; (13e00 <heartbeat_sub_set+0x84>)
   13daa:	f013 f8e0 	bl	26f6e <printk>
}
   13dae:	b005      	add	sp, #20
   13db0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	period = bt_mesh_hb_pwr2(period_log);
   13db4:	f017 f862 	bl	2ae7c <bt_mesh_hb_pwr2>
	status = bt_mesh_hb_sub_set(sub_src, sub_dst, period);
   13db8:	4649      	mov	r1, r9
	period = bt_mesh_hb_pwr2(period_log);
   13dba:	4605      	mov	r5, r0
	status = bt_mesh_hb_sub_set(sub_src, sub_dst, period);
   13dbc:	4602      	mov	r2, r0
   13dbe:	4640      	mov	r0, r8
   13dc0:	f7fd fb8c 	bl	114dc <bt_mesh_hb_sub_set>
	if (status != STATUS_SUCCESS) {
   13dc4:	2800      	cmp	r0, #0
   13dc6:	d1f2      	bne.n	13dae <heartbeat_sub_set+0x32>
	bt_mesh_hb_sub_get(&sub);
   13dc8:	4668      	mov	r0, sp
   13dca:	f7fd fbf3 	bl	115b4 <bt_mesh_hb_sub_get>
	if (sub.src == BT_MESH_ADDR_UNASSIGNED || !period_log) {
   13dce:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   13dd2:	b103      	cbz	r3, 13dd6 <heartbeat_sub_set+0x5a>
   13dd4:	b914      	cbnz	r4, 13ddc <heartbeat_sub_set+0x60>
		sub.min_hops = BT_MESH_TTL_MAX;
   13dd6:	237f      	movs	r3, #127	; 0x7f
   13dd8:	f88d 300e 	strb.w	r3, [sp, #14]
	hb_sub_send_status(model, ctx, &sub);
   13ddc:	466a      	mov	r2, sp
   13dde:	4639      	mov	r1, r7
   13de0:	4630      	mov	r0, r6
   13de2:	f7ff ff79 	bl	13cd8 <hb_sub_send_status>
	if (sub.src != BT_MESH_ADDR_UNASSIGNED &&
   13de6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   13dea:	2b00      	cmp	r3, #0
   13dec:	d0df      	beq.n	13dae <heartbeat_sub_set+0x32>
   13dee:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   13df2:	2b00      	cmp	r3, #0
   13df4:	d0db      	beq.n	13dae <heartbeat_sub_set+0x32>
	    sub.dst != BT_MESH_ADDR_UNASSIGNED && !period) {
   13df6:	2d00      	cmp	r5, #0
   13df8:	d1d9      	bne.n	13dae <heartbeat_sub_set+0x32>
		bt_mesh_hb_sub_reset_count();
   13dfa:	f7fd fbd5 	bl	115a8 <bt_mesh_hb_sub_reset_count>
   13dfe:	e7d6      	b.n	13dae <heartbeat_sub_set+0x32>
   13e00:	0003331b 	.word	0x0003331b

00013e04 <hb_pub_send_status>:
{
   13e04:	b5f0      	push	{r4, r5, r6, r7, lr}
   13e06:	b08b      	sub	sp, #44	; 0x2c
   13e08:	461c      	mov	r4, r3
   13e0a:	4617      	mov	r7, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_HEARTBEAT_PUB_STATUS, 10);
   13e0c:	ab06      	add	r3, sp, #24
   13e0e:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
{
   13e12:	4605      	mov	r5, r0
   13e14:	460e      	mov	r6, r1
	bt_mesh_model_msg_init(&msg, OP_HEARTBEAT_PUB_STATUS);
   13e16:	a803      	add	r0, sp, #12
   13e18:	2106      	movs	r1, #6
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_HEARTBEAT_PUB_STATUS, 10);
   13e1a:	9303      	str	r3, [sp, #12]
   13e1c:	e9cd 2304 	strd	r2, r3, [sp, #16]
	bt_mesh_model_msg_init(&msg, OP_HEARTBEAT_PUB_STATUS);
   13e20:	f016 ff85 	bl	2ad2e <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   13e24:	4639      	mov	r1, r7
   13e26:	a803      	add	r0, sp, #12
   13e28:	f018 fde7 	bl	2c9fa <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, pub->dst);
   13e2c:	8821      	ldrh	r1, [r4, #0]
   13e2e:	a803      	add	r0, sp, #12
   13e30:	f018 fdea 	bl	2ca08 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(&msg, hb_pub_count_log(pub->count));
   13e34:	8861      	ldrh	r1, [r4, #2]
	if (!val) {
   13e36:	b171      	cbz	r1, 13e56 <hb_pub_send_status+0x52>
	} else if (val == 0x01) {
   13e38:	2901      	cmp	r1, #1
   13e3a:	d00c      	beq.n	13e56 <hb_pub_send_status+0x52>
	} else if (val == 0xffff) {
   13e3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   13e40:	4299      	cmp	r1, r3
		return 32 - __builtin_clz(val - 1) + 1;
   13e42:	bf1f      	itttt	ne
   13e44:	f101 31ff 	addne.w	r1, r1, #4294967295
   13e48:	fab1 f181 	clzne	r1, r1
   13e4c:	f1c1 0121 	rsbne	r1, r1, #33	; 0x21
   13e50:	b2c9      	uxtbne	r1, r1
		return 0xff;
   13e52:	bf08      	it	eq
   13e54:	21ff      	moveq	r1, #255	; 0xff
	net_buf_simple_add_u8(&msg, hb_pub_count_log(pub->count));
   13e56:	a803      	add	r0, sp, #12
   13e58:	f018 fdcf 	bl	2c9fa <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, bt_mesh_hb_log(pub->period));
   13e5c:	68e1      	ldr	r1, [r4, #12]
	if (!val) {
   13e5e:	b149      	cbz	r1, 13e74 <hb_pub_send_status+0x70>
	} else if (val == 0xffff) {
   13e60:	f64f 73ff 	movw	r3, #65535	; 0xffff
   13e64:	4299      	cmp	r1, r3
		return 32 - __builtin_clz(val);
   13e66:	bf1d      	ittte	ne
   13e68:	fab1 f181 	clzne	r1, r1
   13e6c:	f1c1 0120 	rsbne	r1, r1, #32
   13e70:	b2c9      	uxtbne	r1, r1
		return 0xff;
   13e72:	21ff      	moveq	r1, #255	; 0xff
   13e74:	a803      	add	r0, sp, #12
   13e76:	f018 fdc0 	bl	2c9fa <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, pub->ttl);
   13e7a:	7921      	ldrb	r1, [r4, #4]
   13e7c:	a803      	add	r0, sp, #12
   13e7e:	f018 fdbc 	bl	2c9fa <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, pub->feat);
   13e82:	88e1      	ldrh	r1, [r4, #6]
   13e84:	a803      	add	r0, sp, #12
   13e86:	f018 fdbf 	bl	2ca08 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, pub->net_idx);
   13e8a:	8921      	ldrh	r1, [r4, #8]
   13e8c:	a803      	add	r0, sp, #12
   13e8e:	f018 fdbb 	bl	2ca08 <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   13e92:	2300      	movs	r3, #0
   13e94:	9300      	str	r3, [sp, #0]
   13e96:	aa03      	add	r2, sp, #12
   13e98:	4631      	mov	r1, r6
   13e9a:	4628      	mov	r0, r5
   13e9c:	f016 ff70 	bl	2ad80 <bt_mesh_model_send>
   13ea0:	b118      	cbz	r0, 13eaa <hb_pub_send_status+0xa6>
		BT_ERR("Unable to send Heartbeat Publication Status");
   13ea2:	2145      	movs	r1, #69	; 0x45
   13ea4:	4802      	ldr	r0, [pc, #8]	; (13eb0 <hb_pub_send_status+0xac>)
   13ea6:	f013 f862 	bl	26f6e <printk>
}
   13eaa:	b00b      	add	sp, #44	; 0x2c
   13eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13eae:	bf00      	nop
   13eb0:	000332b8 	.word	0x000332b8

00013eb4 <heartbeat_pub_set>:
{
   13eb4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   13eb8:	460e      	mov	r6, r1
	struct hb_pub_param *param = (void *)buf->data;
   13eba:	6811      	ldr	r1, [r2, #0]
	pub.count = bt_mesh_hb_pwr2(param->count_log);
   13ebc:	788c      	ldrb	r4, [r1, #2]
	pub.dst = sys_le16_to_cpu(param->dst);
   13ebe:	880b      	ldrh	r3, [r1, #0]
   13ec0:	f8ad 3000 	strh.w	r3, [sp]
{
   13ec4:	4605      	mov	r5, r0
	pub.count = bt_mesh_hb_pwr2(param->count_log);
   13ec6:	4620      	mov	r0, r4
	pub.dst = sys_le16_to_cpu(param->dst);
   13ec8:	b29f      	uxth	r7, r3
	pub.count = bt_mesh_hb_pwr2(param->count_log);
   13eca:	f016 ffd7 	bl	2ae7c <bt_mesh_hb_pwr2>
   13ece:	f8ad 0002 	strh.w	r0, [sp, #2]
	pub.period = bt_mesh_hb_pwr2(param->period_log);
   13ed2:	f891 8003 	ldrb.w	r8, [r1, #3]
   13ed6:	4640      	mov	r0, r8
   13ed8:	f016 ffd0 	bl	2ae7c <bt_mesh_hb_pwr2>
   13edc:	9003      	str	r0, [sp, #12]
	pub.ttl = param->ttl;
   13ede:	790b      	ldrb	r3, [r1, #4]
   13ee0:	f88d 3004 	strb.w	r3, [sp, #4]
	pub.feat = sys_le16_to_cpu(param->feat);
   13ee4:	794a      	ldrb	r2, [r1, #5]
   13ee6:	7988      	ldrb	r0, [r1, #6]
   13ee8:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
   13eec:	f8ad 2006 	strh.w	r2, [sp, #6]
	pub.net_idx = sys_le16_to_cpu(param->net_idx);
   13ef0:	f8b1 1007 	ldrh.w	r1, [r1, #7]
   13ef4:	f8ad 1008 	strh.w	r1, [sp, #8]
	if (BT_MESH_ADDR_IS_VIRTUAL(pub.dst)) {
   13ef8:	f487 4700 	eor.w	r7, r7, #32768	; 0x8000
   13efc:	f5b7 4f80 	cmp.w	r7, #16384	; 0x4000
	pub.net_idx = sys_le16_to_cpu(param->net_idx);
   13f00:	b28a      	uxth	r2, r1
	if (BT_MESH_ADDR_IS_VIRTUAL(pub.dst)) {
   13f02:	d322      	bcc.n	13f4a <heartbeat_pub_set+0x96>
	if (param->count_log > 0x11 && param->count_log != 0xff) {
   13f04:	3c12      	subs	r4, #18
   13f06:	b2e4      	uxtb	r4, r4
   13f08:	2cec      	cmp	r4, #236	; 0xec
   13f0a:	d920      	bls.n	13f4e <heartbeat_pub_set+0x9a>
	if (param->period_log > 0x10) {
   13f0c:	f1b8 0f10 	cmp.w	r8, #16
   13f10:	d81d      	bhi.n	13f4e <heartbeat_pub_set+0x9a>
	if (param->ttl > BT_MESH_TTL_MAX && param->ttl != BT_MESH_TTL_DEFAULT) {
   13f12:	f083 0180 	eor.w	r1, r3, #128	; 0x80
   13f16:	297e      	cmp	r1, #126	; 0x7e
   13f18:	d807      	bhi.n	13f2a <heartbeat_pub_set+0x76>
		BT_ERR("Invalid TTL value 0x%02x", param->ttl);
   13f1a:	480e      	ldr	r0, [pc, #56]	; (13f54 <heartbeat_pub_set+0xa0>)
   13f1c:	461a      	mov	r2, r3
   13f1e:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Invalid NetKeyIndex 0x%04x", pub.net_idx);
   13f20:	f013 f825 	bl	26f6e <printk>
}
   13f24:	b004      	add	sp, #16
   13f26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (pub.net_idx > 0xfff) {
   13f2a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
   13f2e:	d302      	bcc.n	13f36 <heartbeat_pub_set+0x82>
		BT_ERR("Invalid NetKeyIndex 0x%04x", pub.net_idx);
   13f30:	2145      	movs	r1, #69	; 0x45
   13f32:	4809      	ldr	r0, [pc, #36]	; (13f58 <heartbeat_pub_set+0xa4>)
   13f34:	e7f4      	b.n	13f20 <heartbeat_pub_set+0x6c>
	status = bt_mesh_hb_pub_set(&pub);
   13f36:	4668      	mov	r0, sp
   13f38:	f7fd fa44 	bl	113c4 <bt_mesh_hb_pub_set>
   13f3c:	4602      	mov	r2, r0
	hb_pub_send_status(model, ctx, status, &pub);
   13f3e:	466b      	mov	r3, sp
   13f40:	4631      	mov	r1, r6
   13f42:	4628      	mov	r0, r5
   13f44:	f7ff ff5e 	bl	13e04 <hb_pub_send_status>
   13f48:	e7ec      	b.n	13f24 <heartbeat_pub_set+0x70>
		status = STATUS_INVALID_ADDRESS;
   13f4a:	2201      	movs	r2, #1
   13f4c:	e7f7      	b.n	13f3e <heartbeat_pub_set+0x8a>
		status = STATUS_CANNOT_SET;
   13f4e:	220f      	movs	r2, #15
   13f50:	e7f5      	b.n	13f3e <heartbeat_pub_set+0x8a>
   13f52:	bf00      	nop
   13f54:	00033492 	.word	0x00033492
   13f58:	000330c6 	.word	0x000330c6

00013f5c <bt_mesh_cfg_reset>:
	}
}

void bt_mesh_cfg_reset(void)
{
	bt_mesh_model_foreach(mod_reset, NULL);
   13f5c:	2100      	movs	r1, #0
   13f5e:	4801      	ldr	r0, [pc, #4]	; (13f64 <bt_mesh_cfg_reset+0x8>)
   13f60:	f7fd be2a 	b.w	11bb8 <bt_mesh_model_foreach>
   13f64:	0002aea5 	.word	0x0002aea5

00013f68 <health_period_set_unrel>:
}

static void health_period_set_unrel(struct bt_mesh_model *model,
				    struct bt_mesh_msg_ctx *ctx,
				    struct net_buf_simple *buf)
{
   13f68:	b510      	push	{r4, lr}
   13f6a:	4604      	mov	r4, r0
	uint8_t period;

	period = net_buf_simple_pull_u8(buf);
   13f6c:	4610      	mov	r0, r2
   13f6e:	f018 fcf2 	bl	2c956 <net_buf_simple_pull_u8>
	if (period > 15) {
   13f72:	280f      	cmp	r0, #15
	period = net_buf_simple_pull_u8(buf);
   13f74:	4602      	mov	r2, r0
	if (period > 15) {
   13f76:	d905      	bls.n	13f84 <health_period_set_unrel+0x1c>
		BT_WARN("Prohibited period value %u", period);
   13f78:	2157      	movs	r1, #87	; 0x57
   13f7a:	4805      	ldr	r0, [pc, #20]	; (13f90 <health_period_set_unrel+0x28>)
	}

	BT_DBG("period %u", period);

	model->pub->period_div = period;
}
   13f7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Prohibited period value %u", period);
   13f80:	f012 bff5 	b.w	26f6e <printk>
	model->pub->period_div = period;
   13f84:	68a3      	ldr	r3, [r4, #8]
   13f86:	7ad9      	ldrb	r1, [r3, #11]
   13f88:	f360 0103 	bfi	r1, r0, #0, #4
   13f8c:	72d9      	strb	r1, [r3, #11]
}
   13f8e:	bd10      	pop	{r4, pc}
   13f90:	000338c3 	.word	0x000338c3

00013f94 <health_get_registered>:
{
   13f94:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   13f98:	4614      	mov	r4, r2
	struct bt_mesh_health_srv *srv = mod->user_data;
   13f9a:	f8d0 8018 	ldr.w	r8, [r0, #24]
{
   13f9e:	460f      	mov	r7, r1
   13fa0:	4606      	mov	r6, r0
	bt_mesh_model_msg_init(msg, OP_HEALTH_FAULT_STATUS);
   13fa2:	2105      	movs	r1, #5
   13fa4:	4610      	mov	r0, r2
   13fa6:	f016 fec2 	bl	2ad2e <bt_mesh_model_msg_init>
	test_id = net_buf_simple_add(msg, 1);
   13faa:	2101      	movs	r1, #1
   13fac:	4620      	mov	r0, r4
   13fae:	f00b f921 	bl	1f1f4 <net_buf_simple_add>
	net_buf_simple_add_le16(msg, company_id);
   13fb2:	4639      	mov	r1, r7
	test_id = net_buf_simple_add(msg, 1);
   13fb4:	4605      	mov	r5, r0
	net_buf_simple_add_le16(msg, company_id);
   13fb6:	4620      	mov	r0, r4
   13fb8:	f018 fd26 	bl	2ca08 <net_buf_simple_add_le16>
	if (srv->cb && srv->cb->fault_get_reg) {
   13fbc:	f8d8 3004 	ldr.w	r3, [r8, #4]
   13fc0:	b333      	cbz	r3, 14010 <health_get_registered+0x7c>
   13fc2:	685b      	ldr	r3, [r3, #4]
   13fc4:	b323      	cbz	r3, 14010 <health_get_registered+0x7c>
		uint8_t fault_count = net_buf_simple_tailroom(msg) - 4;
   13fc6:	4620      	mov	r0, r4
   13fc8:	f018 fd03 	bl	2c9d2 <net_buf_simple_tailroom>
   13fcc:	3804      	subs	r0, #4
		err = srv->cb->fault_get_reg(mod, company_id, test_id,
   13fce:	f8d8 1004 	ldr.w	r1, [r8, #4]
	return buf->data + buf->len;
   13fd2:	6822      	ldr	r2, [r4, #0]
		uint8_t fault_count = net_buf_simple_tailroom(msg) - 4;
   13fd4:	f88d 000f 	strb.w	r0, [sp, #15]
   13fd8:	88a3      	ldrh	r3, [r4, #4]
		err = srv->cb->fault_get_reg(mod, company_id, test_id,
   13fda:	f10d 000f 	add.w	r0, sp, #15
   13fde:	9000      	str	r0, [sp, #0]
   13fe0:	f8d1 8004 	ldr.w	r8, [r1, #4]
   13fe4:	4413      	add	r3, r2
   13fe6:	4639      	mov	r1, r7
   13fe8:	462a      	mov	r2, r5
   13fea:	4630      	mov	r0, r6
   13fec:	47c0      	blx	r8
		if (err) {
   13fee:	4602      	mov	r2, r0
   13ff0:	b130      	cbz	r0, 14000 <health_get_registered+0x6c>
			BT_ERR("Failed to get faults (err %d)", err);
   13ff2:	2145      	movs	r1, #69	; 0x45
   13ff4:	4809      	ldr	r0, [pc, #36]	; (1401c <health_get_registered+0x88>)
   13ff6:	f012 ffba 	bl	26f6e <printk>
		*test_id = HEALTH_TEST_STANDARD;
   13ffa:	2300      	movs	r3, #0
   13ffc:	702b      	strb	r3, [r5, #0]
}
   13ffe:	e004      	b.n	1400a <health_get_registered+0x76>
			net_buf_simple_add(msg, fault_count);
   14000:	f89d 100f 	ldrb.w	r1, [sp, #15]
   14004:	4620      	mov	r0, r4
   14006:	f00b f8f5 	bl	1f1f4 <net_buf_simple_add>
}
   1400a:	b004      	add	sp, #16
   1400c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		BT_WARN("No callback for getting faults");
   14010:	2157      	movs	r1, #87	; 0x57
   14012:	4803      	ldr	r0, [pc, #12]	; (14020 <health_get_registered+0x8c>)
   14014:	f012 ffab 	bl	26f6e <printk>
   14018:	e7ef      	b.n	13ffa <health_get_registered+0x66>
   1401a:	bf00      	nop
   1401c:	0003387c 	.word	0x0003387c
   14020:	0003389f 	.word	0x0003389f

00014024 <health_fault_test>:
{
   14024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14028:	4615      	mov	r5, r2
   1402a:	b0a4      	sub	sp, #144	; 0x90
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   1402c:	ab06      	add	r3, sp, #24
   1402e:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
	struct bt_mesh_health_srv *srv = model->user_data;
   14032:	f8d0 8018 	ldr.w	r8, [r0, #24]
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   14036:	9303      	str	r3, [sp, #12]
{
   14038:	4604      	mov	r4, r0
	test_id = net_buf_simple_pull_u8(buf);
   1403a:	4628      	mov	r0, r5
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   1403c:	e9cd 2304 	strd	r2, r3, [sp, #16]
{
   14040:	460e      	mov	r6, r1
	test_id = net_buf_simple_pull_u8(buf);
   14042:	f018 fc88 	bl	2c956 <net_buf_simple_pull_u8>
   14046:	4607      	mov	r7, r0
	company_id = net_buf_simple_pull_le16(buf);
   14048:	4628      	mov	r0, r5
   1404a:	f018 fc8c 	bl	2c966 <net_buf_simple_pull_le16>
	if (srv->cb && srv->cb->fault_test) {
   1404e:	f8d8 3004 	ldr.w	r3, [r8, #4]
	company_id = net_buf_simple_pull_le16(buf);
   14052:	4605      	mov	r5, r0
	if (srv->cb && srv->cb->fault_test) {
   14054:	b173      	cbz	r3, 14074 <health_fault_test+0x50>
   14056:	68db      	ldr	r3, [r3, #12]
   14058:	b163      	cbz	r3, 14074 <health_fault_test+0x50>
		err = srv->cb->fault_test(model, test_id, company_id);
   1405a:	4602      	mov	r2, r0
   1405c:	4639      	mov	r1, r7
   1405e:	4620      	mov	r0, r4
   14060:	4798      	blx	r3
		if (err) {
   14062:	4602      	mov	r2, r0
   14064:	b130      	cbz	r0, 14074 <health_fault_test+0x50>
			BT_WARN("Running fault test failed with err %d", err);
   14066:	2157      	movs	r1, #87	; 0x57
   14068:	480c      	ldr	r0, [pc, #48]	; (1409c <health_fault_test+0x78>)
   1406a:	f012 ff80 	bl	26f6e <printk>
}
   1406e:	b024      	add	sp, #144	; 0x90
   14070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	health_get_registered(model, company_id, &sdu);
   14074:	aa03      	add	r2, sp, #12
   14076:	4629      	mov	r1, r5
   14078:	4620      	mov	r0, r4
   1407a:	f7ff ff8b 	bl	13f94 <health_get_registered>
	if (bt_mesh_model_send(model, ctx, &sdu, NULL, NULL)) {
   1407e:	2300      	movs	r3, #0
   14080:	9300      	str	r3, [sp, #0]
   14082:	aa03      	add	r2, sp, #12
   14084:	4631      	mov	r1, r6
   14086:	4620      	mov	r0, r4
   14088:	f016 fe7a 	bl	2ad80 <bt_mesh_model_send>
   1408c:	2800      	cmp	r0, #0
   1408e:	d0ee      	beq.n	1406e <health_fault_test+0x4a>
		BT_ERR("Unable to send Health Current Status response");
   14090:	2145      	movs	r1, #69	; 0x45
   14092:	4803      	ldr	r0, [pc, #12]	; (140a0 <health_fault_test+0x7c>)
   14094:	f012 ff6b 	bl	26f6e <printk>
   14098:	e7e9      	b.n	1406e <health_fault_test+0x4a>
   1409a:	bf00      	nop
   1409c:	0003381e 	.word	0x0003381e
   140a0:	00033849 	.word	0x00033849

000140a4 <health_pub_update>:
	{ OP_ATTENTION_SET_UNREL,      1,   attention_set_unrel },
	BT_MESH_MODEL_OP_END,
};

static int health_pub_update(struct bt_mesh_model *mod)
{
   140a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_mesh_model_pub *pub = mod->pub;
   140a8:	6886      	ldr	r6, [r0, #8]
	struct bt_mesh_health_srv *srv = mod->user_data;
   140aa:	f8d0 a018 	ldr.w	sl, [r0, #24]
	size_t count;

	BT_DBG("");

	count = health_get_current(mod, pub->msg);
   140ae:	6934      	ldr	r4, [r6, #16]
	bt_mesh_model_msg_init(msg, OP_HEALTH_CURRENT_STATUS);
   140b0:	2104      	movs	r1, #4
{
   140b2:	4680      	mov	r8, r0
	bt_mesh_model_msg_init(msg, OP_HEALTH_CURRENT_STATUS);
   140b4:	4620      	mov	r0, r4
   140b6:	f016 fe3a 	bl	2ad2e <bt_mesh_model_msg_init>
	test_id = net_buf_simple_add(msg, 1);
   140ba:	2101      	movs	r1, #1
   140bc:	4620      	mov	r0, r4
   140be:	f00b f899 	bl	1f1f4 <net_buf_simple_add>
	company_ptr = net_buf_simple_add(msg, sizeof(company_id));
   140c2:	2102      	movs	r1, #2
	test_id = net_buf_simple_add(msg, 1);
   140c4:	4607      	mov	r7, r0
	company_ptr = net_buf_simple_add(msg, sizeof(company_id));
   140c6:	4620      	mov	r0, r4
   140c8:	f00b f894 	bl	1f1f4 <net_buf_simple_add>
   140cc:	4605      	mov	r5, r0
	comp = bt_mesh_comp_get();
   140ce:	f7fe f999 	bl	12404 <bt_mesh_comp_get>
	if (srv->cb && srv->cb->fault_get_cur) {
   140d2:	f8da 3004 	ldr.w	r3, [sl, #4]
	comp = bt_mesh_comp_get();
   140d6:	4681      	mov	r9, r0
	if (srv->cb && srv->cb->fault_get_cur) {
   140d8:	2b00      	cmp	r3, #0
   140da:	d03d      	beq.n	14158 <health_pub_update+0xb4>
   140dc:	681b      	ldr	r3, [r3, #0]
   140de:	2b00      	cmp	r3, #0
   140e0:	d03a      	beq.n	14158 <health_pub_update+0xb4>
		fault_count = net_buf_simple_tailroom(msg);
   140e2:	4620      	mov	r0, r4
   140e4:	f018 fc75 	bl	2c9d2 <net_buf_simple_tailroom>
   140e8:	f88d 000d 	strb.w	r0, [sp, #13]
   140ec:	6822      	ldr	r2, [r4, #0]
		err = srv->cb->fault_get_cur(mod, test_id, &company_id,
   140ee:	f8da 1004 	ldr.w	r1, [sl, #4]
   140f2:	88a3      	ldrh	r3, [r4, #4]
   140f4:	f10d 000d 	add.w	r0, sp, #13
   140f8:	9000      	str	r0, [sp, #0]
   140fa:	f8d1 a000 	ldr.w	sl, [r1]
   140fe:	4413      	add	r3, r2
   14100:	4639      	mov	r1, r7
   14102:	f10d 020e 	add.w	r2, sp, #14
   14106:	4640      	mov	r0, r8
   14108:	47d0      	blx	sl
		if (err) {
   1410a:	4602      	mov	r2, r0
   1410c:	b168      	cbz	r0, 1412a <health_pub_update+0x86>
			BT_ERR("Failed to get faults (err %d)", err);
   1410e:	2145      	movs	r1, #69	; 0x45
   14110:	4814      	ldr	r0, [pc, #80]	; (14164 <health_pub_update+0xc0>)
   14112:	f012 ff2c 	bl	26f6e <printk>
		sys_put_le16(comp->cid, company_ptr);
   14116:	f8b9 3000 	ldrh.w	r3, [r9]
	dst[0] = val;
   1411a:	702b      	strb	r3, [r5, #0]
	dst[1] = val >> 8;
   1411c:	0a1b      	lsrs	r3, r3, #8
   1411e:	706b      	strb	r3, [r5, #1]
		*test_id = HEALTH_TEST_STANDARD;
   14120:	2300      	movs	r3, #0
   14122:	703b      	strb	r3, [r7, #0]
		fault_count = 0U;
   14124:	f88d 300d 	strb.w	r3, [sp, #13]
   14128:	e009      	b.n	1413e <health_pub_update+0x9a>
			sys_put_le16(company_id, company_ptr);
   1412a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
	dst[0] = val;
   1412e:	702b      	strb	r3, [r5, #0]
	dst[1] = val >> 8;
   14130:	0a1b      	lsrs	r3, r3, #8
   14132:	706b      	strb	r3, [r5, #1]
			net_buf_simple_add(msg, fault_count);
   14134:	f89d 100d 	ldrb.w	r1, [sp, #13]
   14138:	4620      	mov	r0, r4
   1413a:	f00b f85b 	bl	1f1f4 <net_buf_simple_add>
	return fault_count;
   1413e:	f89d 300d 	ldrb.w	r3, [sp, #13]
	if (count) {
   14142:	7af2      	ldrb	r2, [r6, #11]
   14144:	3300      	adds	r3, #0
   14146:	bf18      	it	ne
   14148:	2301      	movne	r3, #1
   1414a:	f363 1204 	bfi	r2, r3, #4, #1
	} else {
		pub->fast_period = 0U;
	}

	return 0;
}
   1414e:	2000      	movs	r0, #0
   14150:	72f2      	strb	r2, [r6, #11]
   14152:	b004      	add	sp, #16
   14154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		BT_WARN("No callback for getting faults");
   14158:	2157      	movs	r1, #87	; 0x57
   1415a:	4803      	ldr	r0, [pc, #12]	; (14168 <health_pub_update+0xc4>)
   1415c:	f012 ff07 	bl	26f6e <printk>
   14160:	e7d9      	b.n	14116 <health_pub_update+0x72>
   14162:	bf00      	nop
   14164:	0003387c 	.word	0x0003387c
   14168:	0003389f 	.word	0x0003389f

0001416c <send_health_period_status>:
{
   1416c:	b530      	push	{r4, r5, lr}
   1416e:	4604      	mov	r4, r0
   14170:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_HEALTH_PERIOD_STATUS, 1);
   14172:	ab03      	add	r3, sp, #12
   14174:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   14178:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_HEALTH_PERIOD_STATUS);
   1417a:	a805      	add	r0, sp, #20
   1417c:	f248 0137 	movw	r1, #32823	; 0x8037
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_HEALTH_PERIOD_STATUS, 1);
   14180:	e9cd 2306 	strd	r2, r3, [sp, #24]
   14184:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_HEALTH_PERIOD_STATUS);
   14186:	f016 fdd2 	bl	2ad2e <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, model->pub->period_div);
   1418a:	68a3      	ldr	r3, [r4, #8]
   1418c:	7ad9      	ldrb	r1, [r3, #11]
   1418e:	a805      	add	r0, sp, #20
   14190:	f001 010f 	and.w	r1, r1, #15
   14194:	f018 fc31 	bl	2c9fa <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   14198:	2300      	movs	r3, #0
   1419a:	9300      	str	r3, [sp, #0]
   1419c:	aa05      	add	r2, sp, #20
   1419e:	4629      	mov	r1, r5
   141a0:	4620      	mov	r0, r4
   141a2:	f016 fded 	bl	2ad80 <bt_mesh_model_send>
   141a6:	b118      	cbz	r0, 141b0 <send_health_period_status+0x44>
		BT_ERR("Unable to send Health Period Status");
   141a8:	2145      	movs	r1, #69	; 0x45
   141aa:	4802      	ldr	r0, [pc, #8]	; (141b4 <send_health_period_status+0x48>)
   141ac:	f012 fedf 	bl	26f6e <printk>
}
   141b0:	b009      	add	sp, #36	; 0x24
   141b2:	bd30      	pop	{r4, r5, pc}
   141b4:	0003395d 	.word	0x0003395d

000141b8 <send_attention_status>:
{
   141b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   141ba:	4605      	mov	r5, r0
	return k_ticks_to_ms_floor32(z_timeout_remaining(&work->timeout));
   141bc:	6980      	ldr	r0, [r0, #24]
   141be:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_ATTENTION_STATUS, 1);
   141c0:	ab03      	add	r3, sp, #12
   141c2:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
   141c6:	3018      	adds	r0, #24
   141c8:	9305      	str	r3, [sp, #20]
   141ca:	e9cd 2306 	strd	r2, r3, [sp, #24]
{
   141ce:	460f      	mov	r7, r1
   141d0:	f010 f81e 	bl	24210 <z_timeout_remaining>
	bt_mesh_model_msg_init(&msg, OP_ATTENTION_STATUS);
   141d4:	f248 0107 	movw	r1, #32775	; 0x8007
   141d8:	4604      	mov	r4, r0
   141da:	a805      	add	r0, sp, #20
   141dc:	f016 fda7 	bl	2ad2e <bt_mesh_model_msg_init>
			return (uint32_t)((t * to_hz + off) / from_hz);
   141e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   141e4:	fba4 2300 	umull	r2, r3, r4, r0
   141e8:	0bd1      	lsrs	r1, r2, #15
   141ea:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 * @return The converted time value
 */
static TIME_CONSTEXPR inline uint32_t k_ticks_to_ms_floor32(uint32_t t)
{
	/* Generated.  Do not edit.  See above. */
	return z_tmcvt(t, Z_HZ_ticks, Z_HZ_ms, true, true, false, false);
   141ee:	2600      	movs	r6, #0
	time = k_delayed_work_remaining_get(&srv->attn_timer) / 1000;
   141f0:	fbb1 f1f0 	udiv	r1, r1, r0
	net_buf_simple_add_u8(&msg, time);
   141f4:	a805      	add	r0, sp, #20
   141f6:	b2c9      	uxtb	r1, r1
   141f8:	f018 fbff 	bl	2c9fa <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   141fc:	9600      	str	r6, [sp, #0]
   141fe:	4633      	mov	r3, r6
   14200:	aa05      	add	r2, sp, #20
   14202:	4639      	mov	r1, r7
   14204:	4628      	mov	r0, r5
   14206:	f016 fdbb 	bl	2ad80 <bt_mesh_model_send>
   1420a:	b118      	cbz	r0, 14214 <send_attention_status+0x5c>
		BT_ERR("Unable to send Attention Status");
   1420c:	2145      	movs	r1, #69	; 0x45
   1420e:	4802      	ldr	r0, [pc, #8]	; (14218 <send_attention_status+0x60>)
   14210:	f012 fead 	bl	26f6e <printk>
}
   14214:	b009      	add	sp, #36	; 0x24
   14216:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14218:	00033938 	.word	0x00033938

0001421c <health_fault_clear>:
{
   1421c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1421e:	b0a5      	sub	sp, #148	; 0x94
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   14220:	ab06      	add	r3, sp, #24
	struct bt_mesh_health_srv *srv = model->user_data;
   14222:	6987      	ldr	r7, [r0, #24]
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   14224:	9303      	str	r3, [sp, #12]
{
   14226:	4604      	mov	r4, r0
   14228:	460e      	mov	r6, r1
	company_id = net_buf_simple_pull_le16(buf);
   1422a:	4610      	mov	r0, r2
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   1422c:	f44f 01f0 	mov.w	r1, #7864320	; 0x780000
   14230:	e9cd 1304 	strd	r1, r3, [sp, #16]
	company_id = net_buf_simple_pull_le16(buf);
   14234:	f018 fb97 	bl	2c966 <net_buf_simple_pull_le16>
	if (srv->cb && srv->cb->fault_clear) {
   14238:	687b      	ldr	r3, [r7, #4]
	company_id = net_buf_simple_pull_le16(buf);
   1423a:	4605      	mov	r5, r0
	if (srv->cb && srv->cb->fault_clear) {
   1423c:	b123      	cbz	r3, 14248 <health_fault_clear+0x2c>
   1423e:	689b      	ldr	r3, [r3, #8]
   14240:	b113      	cbz	r3, 14248 <health_fault_clear+0x2c>
		srv->cb->fault_clear(model, company_id);
   14242:	4601      	mov	r1, r0
   14244:	4620      	mov	r0, r4
   14246:	4798      	blx	r3
	health_get_registered(model, company_id, &sdu);
   14248:	aa03      	add	r2, sp, #12
   1424a:	4629      	mov	r1, r5
   1424c:	4620      	mov	r0, r4
   1424e:	f7ff fea1 	bl	13f94 <health_get_registered>
	if (bt_mesh_model_send(model, ctx, &sdu, NULL, NULL)) {
   14252:	2300      	movs	r3, #0
   14254:	9300      	str	r3, [sp, #0]
   14256:	aa03      	add	r2, sp, #12
   14258:	4631      	mov	r1, r6
   1425a:	4620      	mov	r0, r4
   1425c:	f016 fd90 	bl	2ad80 <bt_mesh_model_send>
   14260:	b118      	cbz	r0, 1426a <health_fault_clear+0x4e>
		BT_ERR("Unable to send Health Current Status response");
   14262:	2145      	movs	r1, #69	; 0x45
   14264:	4802      	ldr	r0, [pc, #8]	; (14270 <health_fault_clear+0x54>)
   14266:	f012 fe82 	bl	26f6e <printk>
}
   1426a:	b025      	add	sp, #148	; 0x94
   1426c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1426e:	bf00      	nop
   14270:	00033849 	.word	0x00033849

00014274 <health_srv_init>:
		srv->cb->attn_off(srv->model);
	}
}

static int health_srv_init(struct bt_mesh_model *model)
{
   14274:	b538      	push	{r3, r4, r5, lr}
	struct bt_mesh_health_srv *srv = model->user_data;
   14276:	6984      	ldr	r4, [r0, #24]
{
   14278:	4605      	mov	r5, r0

	if (!srv) {
   1427a:	b934      	cbnz	r4, 1428a <health_srv_init+0x16>
		BT_ERR("No Health Server context provided");
   1427c:	480e      	ldr	r0, [pc, #56]	; (142b8 <health_srv_init+0x44>)
   1427e:	2145      	movs	r1, #69	; 0x45
		return -EINVAL;
	}

	if (!model->pub) {
		BT_ERR("Health Server has no publication support");
   14280:	f012 fe75 	bl	26f6e <printk>
		return -EINVAL;
   14284:	f06f 0015 	mvn.w	r0, #21
	if (bt_mesh_model_in_primary(model)) {
		health_srv = srv;
	}

	return 0;
}
   14288:	bd38      	pop	{r3, r4, r5, pc}
	if (!model->pub) {
   1428a:	6883      	ldr	r3, [r0, #8]
   1428c:	b913      	cbnz	r3, 14294 <health_srv_init+0x20>
		BT_ERR("Health Server has no publication support");
   1428e:	2145      	movs	r1, #69	; 0x45
   14290:	480a      	ldr	r0, [pc, #40]	; (142bc <health_srv_init+0x48>)
   14292:	e7f5      	b.n	14280 <health_srv_init+0xc>
	model->pub->update = health_pub_update;
   14294:	4a0a      	ldr	r2, [pc, #40]	; (142c0 <health_srv_init+0x4c>)
   14296:	615a      	str	r2, [r3, #20]
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   14298:	2100      	movs	r1, #0
   1429a:	2230      	movs	r2, #48	; 0x30
   1429c:	f104 0008 	add.w	r0, r4, #8
   142a0:	f019 f9ab 	bl	2d5fa <memset>
   142a4:	4b07      	ldr	r3, [pc, #28]	; (142c4 <health_srv_init+0x50>)
   142a6:	60e3      	str	r3, [r4, #12]
	srv->model = model;
   142a8:	6025      	str	r5, [r4, #0]
	if (bt_mesh_model_in_primary(model)) {
   142aa:	7928      	ldrb	r0, [r5, #4]
   142ac:	b910      	cbnz	r0, 142b4 <health_srv_init+0x40>
		health_srv = srv;
   142ae:	4b06      	ldr	r3, [pc, #24]	; (142c8 <health_srv_init+0x54>)
   142b0:	601c      	str	r4, [r3, #0]
   142b2:	e7e9      	b.n	14288 <health_srv_init+0x14>
	return 0;
   142b4:	2000      	movs	r0, #0
   142b6:	e7e7      	b.n	14288 <health_srv_init+0x14>
   142b8:	000338e3 	.word	0x000338e3
   142bc:	0003390a 	.word	0x0003390a
   142c0:	000140a5 	.word	0x000140a5
   142c4:	0002b0a3 	.word	0x0002b0a3
   142c8:	20002e28 	.word	0x20002e28

000142cc <health_fault_get>:
{
   142cc:	b530      	push	{r4, r5, lr}
   142ce:	b0a5      	sub	sp, #148	; 0x94
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   142d0:	ab06      	add	r3, sp, #24
{
   142d2:	4604      	mov	r4, r0
   142d4:	460d      	mov	r5, r1
	company_id = net_buf_simple_pull_le16(buf);
   142d6:	4610      	mov	r0, r2
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   142d8:	f44f 01f0 	mov.w	r1, #7864320	; 0x780000
   142dc:	e9cd 1304 	strd	r1, r3, [sp, #16]
   142e0:	9303      	str	r3, [sp, #12]
	company_id = net_buf_simple_pull_le16(buf);
   142e2:	f018 fb40 	bl	2c966 <net_buf_simple_pull_le16>
	health_get_registered(model, company_id, &sdu);
   142e6:	aa03      	add	r2, sp, #12
   142e8:	4601      	mov	r1, r0
   142ea:	4620      	mov	r0, r4
   142ec:	f7ff fe52 	bl	13f94 <health_get_registered>
	if (bt_mesh_model_send(model, ctx, &sdu, NULL, NULL)) {
   142f0:	2300      	movs	r3, #0
   142f2:	9300      	str	r3, [sp, #0]
   142f4:	aa03      	add	r2, sp, #12
   142f6:	4629      	mov	r1, r5
   142f8:	4620      	mov	r0, r4
   142fa:	f016 fd41 	bl	2ad80 <bt_mesh_model_send>
   142fe:	b118      	cbz	r0, 14308 <health_fault_get+0x3c>
		BT_ERR("Unable to send Health Current Status response");
   14300:	2145      	movs	r1, #69	; 0x45
   14302:	4802      	ldr	r0, [pc, #8]	; (1430c <health_fault_get+0x40>)
   14304:	f012 fe33 	bl	26f6e <printk>
}
   14308:	b025      	add	sp, #148	; 0x94
   1430a:	bd30      	pop	{r4, r5, pc}
   1430c:	00033849 	.word	0x00033849

00014310 <bt_mesh_attention>:
const struct bt_mesh_model_cb bt_mesh_health_srv_cb = {
	.init = health_srv_init,
};

void bt_mesh_attention(struct bt_mesh_model *model, uint8_t time)
{
   14310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14314:	460f      	mov	r7, r1
	struct bt_mesh_health_srv *srv;

	if (!model) {
   14316:	4605      	mov	r5, r0
   14318:	bb60      	cbnz	r0, 14374 <bt_mesh_attention+0x64>
		srv = health_srv;
   1431a:	4b1e      	ldr	r3, [pc, #120]	; (14394 <bt_mesh_attention+0x84>)
   1431c:	681c      	ldr	r4, [r3, #0]
		if (!srv) {
   1431e:	b92c      	cbnz	r4, 1432c <bt_mesh_attention+0x1c>
			BT_WARN("No Health Server available");
   14320:	2157      	movs	r1, #87	; 0x57
   14322:	481d      	ldr	r0, [pc, #116]	; (14398 <bt_mesh_attention+0x88>)

		if (srv->cb && srv->cb->attn_off) {
			srv->cb->attn_off(model);
		}
	}
}
   14324:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			BT_WARN("No Health Server available");
   14328:	f012 be21 	b.w	26f6e <printk>
		model = srv->model;
   1432c:	6825      	ldr	r5, [r4, #0]
	if (time > 0) {
   1432e:	f104 0608 	add.w	r6, r4, #8
   14332:	b30f      	cbz	r7, 14378 <bt_mesh_attention+0x68>
		if (srv->cb && srv->cb->attn_on) {
   14334:	6863      	ldr	r3, [r4, #4]
   14336:	b11b      	cbz	r3, 14340 <bt_mesh_attention+0x30>
   14338:	691b      	ldr	r3, [r3, #16]
   1433a:	b10b      	cbz	r3, 14340 <bt_mesh_attention+0x30>
			srv->cb->attn_on(model);
   1433c:	4628      	mov	r0, r5
   1433e:	4798      	blx	r3
		k_delayed_work_submit(&srv->attn_timer, K_SECONDS(time));
   14340:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   14344:	fb03 f107 	mul.w	r1, r3, r7
			return (t * to_hz + off) / from_hz;
   14348:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1434c:	f240 34e7 	movw	r4, #999	; 0x3e7
   14350:	2500      	movs	r5, #0
   14352:	fbe0 4501 	umlal	r4, r5, r0, r1
   14356:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1435a:	2300      	movs	r3, #0
   1435c:	4620      	mov	r0, r4
   1435e:	4629      	mov	r1, r5
   14360:	f7ed fb64 	bl	1a2c <__aeabi_uldivmod>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   14364:	4602      	mov	r2, r0
   14366:	460b      	mov	r3, r1
   14368:	480c      	ldr	r0, [pc, #48]	; (1439c <bt_mesh_attention+0x8c>)
   1436a:	4631      	mov	r1, r6
}
   1436c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   14370:	f00f bd12 	b.w	23d98 <k_delayed_work_submit_to_queue>
		srv = model->user_data;
   14374:	6984      	ldr	r4, [r0, #24]
   14376:	e7da      	b.n	1432e <bt_mesh_attention+0x1e>
		k_delayed_work_cancel(&srv->attn_timer);
   14378:	4630      	mov	r0, r6
   1437a:	f00f fd7d 	bl	23e78 <k_delayed_work_cancel>
		if (srv->cb && srv->cb->attn_off) {
   1437e:	6863      	ldr	r3, [r4, #4]
   14380:	b12b      	cbz	r3, 1438e <bt_mesh_attention+0x7e>
   14382:	695b      	ldr	r3, [r3, #20]
   14384:	b11b      	cbz	r3, 1438e <bt_mesh_attention+0x7e>
			srv->cb->attn_off(model);
   14386:	4628      	mov	r0, r5
}
   14388:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			srv->cb->attn_off(model);
   1438c:	4718      	bx	r3
}
   1438e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14392:	bf00      	nop
   14394:	20002e28 	.word	0x20002e28
   14398:	000337fe 	.word	0x000337fe
   1439c:	20002490 	.word	0x20002490

000143a0 <adv_thread>:

	BT_DBG("Advertising stopped (%u ms)", (uint32_t) k_uptime_delta(&time));
}

static void adv_thread(void *p1, void *p2, void *p3)
{
   143a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   143a4:	f240 36e7 	movw	r6, #999	; 0x3e7
   143a8:	b08b      	sub	sp, #44	; 0x2c
   143aa:	2700      	movs	r7, #0

	while (1) {
		struct net_buf *buf;

		if (IS_ENABLED(CONFIG_BT_MESH_PROXY)) {
			buf = net_buf_get(&bt_mesh_adv_queue, K_NO_WAIT);
   143ac:	2200      	movs	r2, #0
   143ae:	2300      	movs	r3, #0
   143b0:	485b      	ldr	r0, [pc, #364]	; (14520 <adv_thread+0x180>)
			while (!buf) {

				/* Adv timeout may be set by a call from proxy
				 * to bt_mesh_adv_start:
				 */
				adv_timeout = SYS_FOREVER_MS;
   143b2:	4c5c      	ldr	r4, [pc, #368]	; (14524 <adv_thread+0x184>)
			buf = net_buf_get(&bt_mesh_adv_queue, K_NO_WAIT);
   143b4:	f00a fcb4 	bl	1ed20 <net_buf_get>
   143b8:	4605      	mov	r5, r0
			while (!buf) {
   143ba:	2d00      	cmp	r5, #0
   143bc:	d065      	beq.n	1448a <adv_thread+0xea>
		if (!buf) {
			continue;
		}

		/* busy == 0 means this was canceled */
		if (BT_MESH_ADV(buf)->busy) {
   143be:	696a      	ldr	r2, [r5, #20]
   143c0:	7a13      	ldrb	r3, [r2, #8]
   143c2:	0759      	lsls	r1, r3, #29
   143c4:	f140 80a8 	bpl.w	14518 <adv_thread+0x178>
			BT_MESH_ADV(buf)->busy = 0U;
   143c8:	f36f 0382 	bfc	r3, #2, #1
   143cc:	7213      	strb	r3, [r2, #8]
		((bt_dev.hci_version >= BT_HCI_VERSION_5_0) ?
   143ce:	4b56      	ldr	r3, [pc, #344]	; (14528 <adv_thread+0x188>)
	const struct bt_mesh_send_cb *cb = BT_MESH_ADV(buf)->cb;
   143d0:	f8d5 a014 	ldr.w	sl, [r5, #20]
			       ADV_INT_FAST_MS :
   143d4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
	struct bt_le_adv_param param = {};
   143d8:	2214      	movs	r2, #20
			       ADV_INT_FAST_MS :
   143da:	2b08      	cmp	r3, #8
	struct bt_le_adv_param param = {};
   143dc:	eb0d 0002 	add.w	r0, sp, r2
   143e0:	f04f 0100 	mov.w	r1, #0
			       ADV_INT_FAST_MS :
   143e4:	bf8c      	ite	hi
   143e6:	f04f 0b14 	movhi.w	fp, #20
   143ea:	f04f 0b64 	movls.w	fp, #100	; 0x64
	void *cb_data = BT_MESH_ADV(buf)->cb_data;
   143ee:	e9da 8900 	ldrd	r8, r9, [sl]
	struct bt_le_adv_param param = {};
   143f2:	f019 f902 	bl	2d5fa <memset>
	adv_int = MAX(adv_int_min,
   143f6:	f89a 4009 	ldrb.w	r4, [sl, #9]
	ad.type = bt_mesh_adv_type[BT_MESH_ADV(buf)->type];
   143fa:	494c      	ldr	r1, [pc, #304]	; (1452c <adv_thread+0x18c>)
	adv_int = MAX(adv_int_min,
   143fc:	08e3      	lsrs	r3, r4, #3
   143fe:	3301      	adds	r3, #1
   14400:	220a      	movs	r2, #10
   14402:	435a      	muls	r2, r3
   14404:	455a      	cmp	r2, fp
   14406:	bfa6      	itte	ge
   14408:	eb03 0383 	addge.w	r3, r3, r3, lsl #2
   1440c:	005b      	lslge	r3, r3, #1
   1440e:	fa1f f38b 	uxthlt.w	r3, fp
		    ((BT_MESH_TRANSMIT_COUNT(BT_MESH_ADV(buf)->xmit) + 1) *
   14412:	f004 0207 	and.w	r2, r4, #7
		     (adv_int + 10)));
   14416:	f103 040a 	add.w	r4, r3, #10
	duration = (BT_MESH_SCAN_WINDOW_MS +
   1441a:	fb02 4404 	mla	r4, r2, r4, r4
	ad.type = bt_mesh_adv_type[BT_MESH_ADV(buf)->type];
   1441e:	f89a 2008 	ldrb.w	r2, [sl, #8]
   14422:	f002 0203 	and.w	r2, r2, #3
	duration = (BT_MESH_SCAN_WINDOW_MS +
   14426:	341e      	adds	r4, #30
	ad.type = bt_mesh_adv_type[BT_MESH_ADV(buf)->type];
   14428:	5c8a      	ldrb	r2, [r1, r2]
   1442a:	f88d 200c 	strb.w	r2, [sp, #12]
	ad.data_len = buf->len;
   1442e:	89aa      	ldrh	r2, [r5, #12]
   14430:	f88d 200d 	strb.w	r2, [sp, #13]
	ad.data = buf->data;
   14434:	68aa      	ldr	r2, [r5, #8]
   14436:	9204      	str	r2, [sp, #16]
	duration = (BT_MESH_SCAN_WINDOW_MS +
   14438:	b224      	sxth	r4, r4
	param.interval_min = BT_MESH_ADV_SCAN_UNIT(adv_int);
   1443a:	2205      	movs	r2, #5
   1443c:	00db      	lsls	r3, r3, #3
   1443e:	fbb3 f3f2 	udiv	r3, r3, r2
	param.interval_max = param.interval_min;
   14442:	e9cd 3307 	strd	r3, r3, [sp, #28]
   14446:	f018 fffd 	bl	2d444 <z_impl_k_uptime_ticks>
	err = bt_le_adv_start(&param, &ad, 1, NULL, 0);
   1444a:	2300      	movs	r3, #0
   1444c:	9300      	str	r3, [sp, #0]
   1444e:	2201      	movs	r2, #1
   14450:	a903      	add	r1, sp, #12
   14452:	a805      	add	r0, sp, #20
   14454:	f7f5 fb28 	bl	9aa8 <bt_le_adv_start>
   14458:	4682      	mov	sl, r0
	net_buf_unref(buf);
   1445a:	4628      	mov	r0, r5
   1445c:	f00a fd7a 	bl	1ef54 <net_buf_unref>

static inline void bt_mesh_adv_send_start(uint16_t duration, int err,
					  const struct bt_mesh_send_cb *cb,
					  void *cb_data)
{
	if (cb && cb->start) {
   14460:	f1b8 0f00 	cmp.w	r8, #0
   14464:	d006      	beq.n	14474 <adv_thread+0xd4>
   14466:	f8d8 3000 	ldr.w	r3, [r8]
   1446a:	b11b      	cbz	r3, 14474 <adv_thread+0xd4>
		cb->start(duration, err, cb_data);
   1446c:	b2a0      	uxth	r0, r4
   1446e:	464a      	mov	r2, r9
   14470:	4651      	mov	r1, sl
   14472:	4798      	blx	r3
	if (err) {
   14474:	f1ba 0f00 	cmp.w	sl, #0
   14478:	d02c      	beq.n	144d4 <adv_thread+0x134>
		BT_ERR("Advertising failed: err %d", err);
   1447a:	482d      	ldr	r0, [pc, #180]	; (14530 <adv_thread+0x190>)
   1447c:	4652      	mov	r2, sl
   1447e:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Stopping advertising failed: err %d", err);
   14480:	f012 fd75 	bl	26f6e <printk>
	z_impl_k_yield();
   14484:	f00f f8ba 	bl	235fc <z_impl_k_yield>
   14488:	e790      	b.n	143ac <adv_thread+0xc>
				adv_timeout = SYS_FOREVER_MS;
   1448a:	f04f 33ff 	mov.w	r3, #4294967295
   1448e:	6023      	str	r3, [r4, #0]
				bt_mesh_proxy_adv_start();
   14490:	f003 fbc8 	bl	17c24 <bt_mesh_proxy_adv_start>
						  SYS_TIMEOUT_MS(adv_timeout));
   14494:	6821      	ldr	r1, [r4, #0]
				buf = net_buf_get(&bt_mesh_adv_queue,
   14496:	1c48      	adds	r0, r1, #1
   14498:	d017      	beq.n	144ca <adv_thread+0x12a>
						  SYS_TIMEOUT_MS(adv_timeout));
   1449a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   1449e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   144a2:	46b0      	mov	r8, r6
   144a4:	46b9      	mov	r9, r7
   144a6:	fbc0 8901 	smlal	r8, r9, r0, r1
   144aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   144ae:	2300      	movs	r3, #0
   144b0:	4640      	mov	r0, r8
   144b2:	4649      	mov	r1, r9
   144b4:	f7ed faba 	bl	1a2c <__aeabi_uldivmod>
   144b8:	4602      	mov	r2, r0
   144ba:	460b      	mov	r3, r1
				buf = net_buf_get(&bt_mesh_adv_queue,
   144bc:	4818      	ldr	r0, [pc, #96]	; (14520 <adv_thread+0x180>)
   144be:	f00a fc2f 	bl	1ed20 <net_buf_get>
   144c2:	4605      	mov	r5, r0
				bt_le_adv_stop();
   144c4:	f7f5 fafe 	bl	9ac4 <bt_le_adv_stop>
   144c8:	e777      	b.n	143ba <adv_thread+0x1a>
				buf = net_buf_get(&bt_mesh_adv_queue,
   144ca:	f04f 32ff 	mov.w	r2, #4294967295
   144ce:	f04f 33ff 	mov.w	r3, #4294967295
   144d2:	e7f3      	b.n	144bc <adv_thread+0x11c>
	k_sleep(K_MSEC(duration));
   144d4:	b224      	sxth	r4, r4
   144d6:	17e5      	asrs	r5, r4, #31
   144d8:	03e9      	lsls	r1, r5, #15
   144da:	03e0      	lsls	r0, r4, #15
   144dc:	1980      	adds	r0, r0, r6
   144de:	ea41 4154 	orr.w	r1, r1, r4, lsr #17
   144e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   144e6:	f04f 0300 	mov.w	r3, #0
   144ea:	eb47 0101 	adc.w	r1, r7, r1
   144ee:	f7ed fa9d 	bl	1a2c <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   144f2:	f00f f991 	bl	23818 <z_impl_k_sleep>
	err = bt_le_adv_stop();
   144f6:	f7f5 fae5 	bl	9ac4 <bt_le_adv_stop>
   144fa:	4604      	mov	r4, r0
}

static inline void bt_mesh_adv_send_end(
	int err, const struct bt_mesh_send_cb *cb, void *cb_data)
{
	if (cb && cb->end) {
   144fc:	f1b8 0f00 	cmp.w	r8, #0
   14500:	d004      	beq.n	1450c <adv_thread+0x16c>
   14502:	f8d8 3004 	ldr.w	r3, [r8, #4]
   14506:	b10b      	cbz	r3, 1450c <adv_thread+0x16c>
		cb->end(err, cb_data);
   14508:	4649      	mov	r1, r9
   1450a:	4798      	blx	r3
	if (err) {
   1450c:	2c00      	cmp	r4, #0
   1450e:	d0b9      	beq.n	14484 <adv_thread+0xe4>
		BT_ERR("Stopping advertising failed: err %d", err);
   14510:	4622      	mov	r2, r4
   14512:	2145      	movs	r1, #69	; 0x45
   14514:	4807      	ldr	r0, [pc, #28]	; (14534 <adv_thread+0x194>)
   14516:	e7b3      	b.n	14480 <adv_thread+0xe0>
			adv_send(buf);
		} else {
			net_buf_unref(buf);
   14518:	4628      	mov	r0, r5
   1451a:	f00a fd1b 	bl	1ef54 <net_buf_unref>
   1451e:	e7b1      	b.n	14484 <adv_thread+0xe4>
   14520:	2000132c 	.word	0x2000132c
   14524:	20002e2c 	.word	0x20002e2c
   14528:	200001c0 	.word	0x200001c0
   1452c:	00031a2d 	.word	0x00031a2d
   14530:	00033999 	.word	0x00033999
   14534:	000339b9 	.word	0x000339b9

00014538 <bt_mesh_adv_update>:
	z_impl_k_queue_cancel_wait(queue);
   14538:	4801      	ldr	r0, [pc, #4]	; (14540 <bt_mesh_adv_update+0x8>)
   1453a:	f00e b8a7 	b.w	2268c <z_impl_k_queue_cancel_wait>
   1453e:	bf00      	nop
   14540:	2000132c 	.word	0x2000132c

00014544 <bt_mesh_adv_init>:
{
	/* Will be handled automatically */
}

void bt_mesh_adv_init(void)
{
   14544:	b510      	push	{r4, lr}
   14546:	b088      	sub	sp, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   14548:	4c0e      	ldr	r4, [pc, #56]	; (14584 <bt_mesh_adv_init+0x40>)
   1454a:	490f      	ldr	r1, [pc, #60]	; (14588 <bt_mesh_adv_init+0x44>)
   1454c:	f04f 32ff 	mov.w	r2, #4294967295
   14550:	f04f 33ff 	mov.w	r3, #4294967295
   14554:	e9cd 2306 	strd	r2, r3, [sp, #24]
   14558:	2300      	movs	r3, #0
   1455a:	f06f 0208 	mvn.w	r2, #8
   1455e:	e9cd 2303 	strd	r2, r3, [sp, #12]
   14562:	e9cd 3301 	strd	r3, r3, [sp, #4]
   14566:	9300      	str	r3, [sp, #0]
   14568:	f44f 7240 	mov.w	r2, #768	; 0x300
   1456c:	4b07      	ldr	r3, [pc, #28]	; (1458c <bt_mesh_adv_init+0x48>)
   1456e:	4620      	mov	r0, r4
   14570:	f00f fad4 	bl	23b1c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   14574:	4906      	ldr	r1, [pc, #24]	; (14590 <bt_mesh_adv_init+0x4c>)
   14576:	4620      	mov	r0, r4
	k_thread_create(&adv_thread_data, adv_thread_stack,
			K_KERNEL_STACK_SIZEOF(adv_thread_stack), adv_thread,
			NULL, NULL, NULL, K_PRIO_COOP(7), 0, K_FOREVER);
	k_thread_name_set(&adv_thread_data, "BT Mesh adv");
}
   14578:	b008      	add	sp, #32
   1457a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1457e:	f018 bee6 	b.w	2d34e <z_impl_k_thread_name_set>
   14582:	bf00      	nop
   14584:	20002150 	.word	0x20002150
   14588:	20004fc0 	.word	0x20004fc0
   1458c:	000143a1 	.word	0x000143a1
   14590:	000339e2 	.word	0x000339e2

00014594 <bt_mesh_adv_enable>:

int bt_mesh_adv_enable(void)
{
   14594:	b508      	push	{r3, lr}
	z_impl_k_thread_start(thread);
   14596:	4802      	ldr	r0, [pc, #8]	; (145a0 <bt_mesh_adv_enable+0xc>)
   14598:	f018 fede 	bl	2d358 <z_impl_k_thread_start>
	k_thread_start(&adv_thread_data);
	return 0;
}
   1459c:	2000      	movs	r0, #0
   1459e:	bd08      	pop	{r3, pc}
   145a0:	20002150 	.word	0x20002150

000145a4 <bt_mesh_adv_start>:

int bt_mesh_adv_start(const struct bt_le_adv_param *param, int32_t duration,
		      const struct bt_data *ad, size_t ad_len,
		      const struct bt_data *sd, size_t sd_len)
{
   145a4:	b430      	push	{r4, r5}
	adv_timeout = duration;
   145a6:	4d05      	ldr	r5, [pc, #20]	; (145bc <bt_mesh_adv_start+0x18>)
{
   145a8:	4614      	mov	r4, r2
	adv_timeout = duration;
   145aa:	6029      	str	r1, [r5, #0]
	return bt_le_adv_start(param, ad, ad_len, sd, sd_len);
   145ac:	9903      	ldr	r1, [sp, #12]
{
   145ae:	461a      	mov	r2, r3
   145b0:	9b02      	ldr	r3, [sp, #8]
	return bt_le_adv_start(param, ad, ad_len, sd, sd_len);
   145b2:	9102      	str	r1, [sp, #8]
   145b4:	4621      	mov	r1, r4
}
   145b6:	bc30      	pop	{r4, r5}
	return bt_le_adv_start(param, ad, ad_len, sd, sd_len);
   145b8:	f7f5 ba76 	b.w	9aa8 <bt_le_adv_start>
   145bc:	20002e2c 	.word	0x20002e2c

000145c0 <atomic_test_and_clear_bit.constprop.5>:
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
   145c0:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   145c2:	2301      	movs	r3, #1
   145c4:	fa03 f000 	lsl.w	r0, r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   145c8:	4b0a      	ldr	r3, [pc, #40]	; (145f4 <atomic_test_and_clear_bit.constprop.5+0x34>)
   145ca:	f3bf 8f5b 	dmb	ish
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   145ce:	43c1      	mvns	r1, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   145d0:	e853 2f00 	ldrex	r2, [r3]
   145d4:	ea02 0c01 	and.w	ip, r2, r1
   145d8:	e843 ce00 	strex	lr, ip, [r3]
   145dc:	f1be 0f00 	cmp.w	lr, #0
   145e0:	d1f6      	bne.n	145d0 <atomic_test_and_clear_bit.constprop.5+0x10>
   145e2:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   145e6:	4202      	tst	r2, r0
}
   145e8:	bf14      	ite	ne
   145ea:	2001      	movne	r0, #1
   145ec:	2000      	moveq	r0, #0
   145ee:	f85d fb04 	ldr.w	pc, [sp], #4
   145f2:	bf00      	nop
   145f4:	20002e30 	.word	0x20002e30

000145f8 <mesh_commit>:

	return 0;
}

static int mesh_commit(void)
{
   145f8:	b508      	push	{r3, lr}
	if (!bt_mesh_subnet_next(NULL)) {
   145fa:	2000      	movs	r0, #0
   145fc:	f7fa fedc 	bl	f3b8 <bt_mesh_subnet_next>
   14600:	b1a8      	cbz	r0, 1462e <mesh_commit+0x36>
		/* Nothing to do since we're not yet provisioned */
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT)) {
		bt_mesh_proxy_prov_disable(true);
   14602:	2001      	movs	r0, #1
   14604:	f003 fa18 	bl	17a38 <bt_mesh_proxy_prov_disable>
	}

	bt_mesh_net_settings_commit();
   14608:	f7fa fca4 	bl	ef54 <bt_mesh_net_settings_commit>
	bt_mesh_model_settings_commit();
   1460c:	f7fd ff38 	bl	12480 <bt_mesh_model_settings_commit>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14610:	f3bf 8f5b 	dmb	ish
   14614:	4b07      	ldr	r3, [pc, #28]	; (14634 <mesh_commit+0x3c>)
   14616:	e853 2f00 	ldrex	r2, [r3]
   1461a:	f042 0201 	orr.w	r2, r2, #1
   1461e:	e843 2100 	strex	r1, r2, [r3]
   14622:	2900      	cmp	r1, #0
   14624:	d1f7      	bne.n	14616 <mesh_commit+0x1e>
   14626:	f3bf 8f5b 	dmb	ish

	atomic_set_bit(bt_mesh.flags, BT_MESH_VALID);

	bt_mesh_start();
   1462a:	f7f9 f895 	bl	d758 <bt_mesh_start>

	return 0;
}
   1462e:	2000      	movs	r0, #0
   14630:	bd08      	pop	{r3, pc}
   14632:	bf00      	nop
   14634:	20001de0 	.word	0x20001de0

00014638 <bt_mesh_settings_set>:
{
   14638:	b538      	push	{r3, r4, r5, lr}
   1463a:	4604      	mov	r4, r0
   1463c:	4608      	mov	r0, r1
   1463e:	4611      	mov	r1, r2
	len = read_cb(cb_arg, out, read_len);
   14640:	461a      	mov	r2, r3
{
   14642:	461d      	mov	r5, r3
	len = read_cb(cb_arg, out, read_len);
   14644:	47a0      	blx	r4
	if (len < 0) {
   14646:	1e04      	subs	r4, r0, #0
   14648:	da06      	bge.n	14658 <bt_mesh_settings_set+0x20>
		BT_ERR("Failed to read value (err %zd)", len);
   1464a:	4622      	mov	r2, r4
   1464c:	2145      	movs	r1, #69	; 0x45
   1464e:	4809      	ldr	r0, [pc, #36]	; (14674 <bt_mesh_settings_set+0x3c>)
   14650:	f012 fc8d 	bl	26f6e <printk>
}
   14654:	4620      	mov	r0, r4
   14656:	bd38      	pop	{r3, r4, r5, pc}
	if (len != read_len) {
   14658:	42a5      	cmp	r5, r4
   1465a:	d008      	beq.n	1466e <bt_mesh_settings_set+0x36>
		BT_ERR("Unexpected value length (%zd != %zu)", len, read_len);
   1465c:	4622      	mov	r2, r4
   1465e:	462b      	mov	r3, r5
   14660:	2145      	movs	r1, #69	; 0x45
   14662:	4805      	ldr	r0, [pc, #20]	; (14678 <bt_mesh_settings_set+0x40>)
   14664:	f012 fc83 	bl	26f6e <printk>
		return -EINVAL;
   14668:	f06f 0415 	mvn.w	r4, #21
   1466c:	e7f2      	b.n	14654 <bt_mesh_settings_set+0x1c>
	return 0;
   1466e:	2400      	movs	r4, #0
   14670:	e7f0      	b.n	14654 <bt_mesh_settings_set+0x1c>
   14672:	bf00      	nop
   14674:	00032f12 	.word	0x00032f12
   14678:	00033a01 	.word	0x00033a01

0001467c <bt_mesh_settings_store_schedule>:
			      BIT(BT_MESH_SETTINGS_HB_PUB_PENDING)   |      \
			      BIT(BT_MESH_SETTINGS_CFG_PENDING)      |      \
			      BIT(BT_MESH_SETTINGS_MOD_PENDING))

void bt_mesh_settings_store_schedule(enum bt_mesh_settings_flag flag)
{
   1467c:	b570      	push	{r4, r5, r6, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1467e:	4a2a      	ldr	r2, [pc, #168]	; (14728 <bt_mesh_settings_store_schedule+0xac>)
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14680:	f3bf 8f5b 	dmb	ish
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   14684:	0943      	lsrs	r3, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   14686:	2101      	movs	r1, #1
   14688:	f000 001f 	and.w	r0, r0, #31
   1468c:	fa01 f000 	lsl.w	r0, r1, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14690:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   14694:	e853 1f00 	ldrex	r1, [r3]
   14698:	4301      	orrs	r1, r0
   1469a:	e843 1400 	strex	r4, r1, [r3]
   1469e:	2c00      	cmp	r4, #0
   146a0:	d1f8      	bne.n	14694 <bt_mesh_settings_store_schedule+0x18>
   146a2:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   146a6:	f3bf 8f5b 	dmb	ish
   146aa:	6813      	ldr	r3, [r2, #0]
   146ac:	f3bf 8f5b 	dmb	ish
	int32_t timeout_ms, remaining;

	atomic_set_bit(pending_flags, flag);

	if (atomic_get(pending_flags) & NO_WAIT_PENDING_BITS) {
   146b0:	f413 6f87 	tst.w	r3, #1080	; 0x438
   146b4:	d132      	bne.n	1471c <bt_mesh_settings_store_schedule+0xa0>
   146b6:	f3bf 8f5b 	dmb	ish
   146ba:	6813      	ldr	r3, [r2, #0]
   146bc:	f3bf 8f5b 	dmb	ish
		timeout_ms = 0;
	} else if (atomic_test_bit(pending_flags,
   146c0:	07db      	lsls	r3, r3, #31
   146c2:	d508      	bpl.n	146d6 <bt_mesh_settings_store_schedule+0x5a>
   146c4:	f3bf 8f5b 	dmb	ish
   146c8:	4b18      	ldr	r3, [pc, #96]	; (1472c <bt_mesh_settings_store_schedule+0xb0>)
   146ca:	681b      	ldr	r3, [r3, #0]
   146cc:	f3bf 8f5b 	dmb	ish
				   BT_MESH_SETTINGS_RPL_PENDING) &&
   146d0:	f413 7fe3 	tst.w	r3, #454	; 0x1c6
   146d4:	d024      	beq.n	14720 <bt_mesh_settings_store_schedule+0xa4>
		   (!(atomic_get(bt_mesh.flags) & GENERIC_PENDING_BITS) ||
		    (CONFIG_BT_MESH_RPL_STORE_TIMEOUT <
		     CONFIG_BT_MESH_STORE_TIMEOUT))) {
		timeout_ms = CONFIG_BT_MESH_RPL_STORE_TIMEOUT * MSEC_PER_SEC;
	} else {
		timeout_ms = CONFIG_BT_MESH_STORE_TIMEOUT * MSEC_PER_SEC;
   146d6:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
	return k_ticks_to_ms_floor32(z_timeout_remaining(&work->timeout));
   146da:	4815      	ldr	r0, [pc, #84]	; (14730 <bt_mesh_settings_store_schedule+0xb4>)
   146dc:	f00f fd98 	bl	24210 <z_timeout_remaining>
			return (uint32_t)((t * to_hz + off) / from_hz);
   146e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   146e4:	fba0 0103 	umull	r0, r1, r0, r3
   146e8:	0bc3      	lsrs	r3, r0, #15
	}

	remaining = k_delayed_work_remaining_get(&pending_store);
	if ((remaining > 0) && remaining < timeout_ms) {
   146ea:	ea53 4341 	orrs.w	r3, r3, r1, lsl #17
   146ee:	d001      	beq.n	146f4 <bt_mesh_settings_store_schedule+0x78>
   146f0:	429c      	cmp	r4, r3
   146f2:	dc18      	bgt.n	14726 <bt_mesh_settings_store_schedule+0xaa>
			return (t * to_hz + off) / from_hz;
   146f4:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   146f8:	f240 30e7 	movw	r0, #999	; 0x3e7
   146fc:	2100      	movs	r1, #0
   146fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   14702:	2300      	movs	r3, #0
   14704:	fbc5 0104 	smlal	r0, r1, r5, r4
   14708:	f7ed f990 	bl	1a2c <__aeabi_uldivmod>
	}

	BT_DBG("Waiting %d seconds", timeout_ms / MSEC_PER_SEC);

	k_delayed_work_submit(&pending_store, K_MSEC(timeout_ms));
}
   1470c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   14710:	4602      	mov	r2, r0
   14712:	460b      	mov	r3, r1
   14714:	4807      	ldr	r0, [pc, #28]	; (14734 <bt_mesh_settings_store_schedule+0xb8>)
   14716:	4908      	ldr	r1, [pc, #32]	; (14738 <bt_mesh_settings_store_schedule+0xbc>)
   14718:	f00f bb3e 	b.w	23d98 <k_delayed_work_submit_to_queue>
		timeout_ms = 0;
   1471c:	2400      	movs	r4, #0
   1471e:	e7dc      	b.n	146da <bt_mesh_settings_store_schedule+0x5e>
		timeout_ms = CONFIG_BT_MESH_RPL_STORE_TIMEOUT * MSEC_PER_SEC;
   14720:	f241 3488 	movw	r4, #5000	; 0x1388
   14724:	e7d9      	b.n	146da <bt_mesh_settings_store_schedule+0x5e>
}
   14726:	bd70      	pop	{r4, r5, r6, pc}
   14728:	20002e30 	.word	0x20002e30
   1472c:	20001de0 	.word	0x20001de0
   14730:	200021f0 	.word	0x200021f0
   14734:	20002490 	.word	0x20002490
   14738:	200021e0 	.word	0x200021e0

0001473c <bt_mesh_settings_init>:
		bt_mesh_cdb_pending_store();
	}
}

void bt_mesh_settings_init(void)
{
   1473c:	b508      	push	{r3, lr}
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   1473e:	4b04      	ldr	r3, [pc, #16]	; (14750 <bt_mesh_settings_init+0x14>)
   14740:	2230      	movs	r2, #48	; 0x30
   14742:	2100      	movs	r1, #0
   14744:	4618      	mov	r0, r3
   14746:	f018 ff58 	bl	2d5fa <memset>
   1474a:	4a02      	ldr	r2, [pc, #8]	; (14754 <bt_mesh_settings_init+0x18>)
   1474c:	6042      	str	r2, [r0, #4]
	k_delayed_work_init(&pending_store, store_pending);
}
   1474e:	bd08      	pop	{r3, pc}
   14750:	200021e0 	.word	0x200021e0
   14754:	0002b151 	.word	0x0002b151

00014758 <adv_alloc>:
	uint16_t app_idx;
} adv_pool[FRIEND_BUF_COUNT];

static struct bt_mesh_adv *adv_alloc(int id)
{
	adv_pool[id].app_idx = BT_MESH_KEY_UNUSED;
   14758:	4b03      	ldr	r3, [pc, #12]	; (14768 <adv_alloc+0x10>)
   1475a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   1475e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   14762:	8183      	strh	r3, [r0, #12]
	return &adv_pool[id].adv;
}
   14764:	4770      	bx	lr
   14766:	bf00      	nop
   14768:	20002e34 	.word	0x20002e34

0001476c <send_friend_clear>:
static const struct bt_mesh_send_cb clear_sent_cb = {
	.end = friend_clear_sent,
};

static void send_friend_clear(struct bt_mesh_friend *frnd)
{
   1476c:	b510      	push	{r4, lr}
	struct bt_mesh_msg_ctx ctx = {
		.net_idx  = frnd->subnet->net_idx,
   1476e:	6902      	ldr	r2, [r0, #16]
{
   14770:	b08a      	sub	sp, #40	; 0x28
	struct bt_mesh_msg_ctx ctx = {
   14772:	8b91      	ldrh	r1, [r2, #28]
   14774:	f8ad 1010 	strh.w	r1, [sp, #16]
   14778:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1477c:	2300      	movs	r3, #0
   1477e:	f8ad 1012 	strh.w	r1, [sp, #18]
   14782:	f8b0 10b4 	ldrh.w	r1, [r0, #180]	; 0xb4
   14786:	f8ad 301a 	strh.w	r3, [sp, #26]
   1478a:	f8cd 3016 	str.w	r3, [sp, #22]
   1478e:	f8ad 1014 	strh.w	r1, [sp, #20]
		.app_idx  = BT_MESH_KEY_UNUSED,
		.addr     = frnd->clear.frnd,
		.send_ttl = BT_MESH_TTL_MAX,
	};
	struct bt_mesh_net_tx tx = {
   14792:	9309      	str	r3, [sp, #36]	; 0x24
	struct bt_mesh_msg_ctx ctx = {
   14794:	217f      	movs	r1, #127	; 0x7f
	struct bt_mesh_net_tx tx = {
   14796:	ab04      	add	r3, sp, #16
{
   14798:	4604      	mov	r4, r0
	struct bt_mesh_msg_ctx ctx = {
   1479a:	f88d 101b 	strb.w	r1, [sp, #27]
	struct bt_mesh_net_tx tx = {
   1479e:	9207      	str	r2, [sp, #28]
   147a0:	9308      	str	r3, [sp, #32]
		.sub  = frnd->subnet,
		.ctx  = &ctx,
		.src  = bt_mesh_primary_addr(),
   147a2:	f7fd fc0d 	bl	11fc0 <bt_mesh_primary_addr>
	struct bt_mesh_net_tx tx = {
   147a6:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
		.xmit = bt_mesh_net_transmit_get(),
   147aa:	f7f9 f8fd 	bl	d9a8 <bt_mesh_net_transmit_get>
	};
	struct bt_mesh_ctl_friend_clear req = {
		.lpn_addr    = sys_cpu_to_be16(frnd->lpn),
   147ae:	8822      	ldrh	r2, [r4, #0]
	struct bt_mesh_net_tx tx = {
   147b0:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
		.lpn_addr    = sys_cpu_to_be16(frnd->lpn),
   147b4:	0213      	lsls	r3, r2, #8
   147b6:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
		.lpn_counter = sys_cpu_to_be16(frnd->lpn_counter),
   147ba:	8962      	ldrh	r2, [r4, #10]
	struct bt_mesh_ctl_friend_clear req = {
   147bc:	f8ad 300c 	strh.w	r3, [sp, #12]
		.lpn_counter = sys_cpu_to_be16(frnd->lpn_counter),
   147c0:	0213      	lsls	r3, r2, #8
   147c2:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
	struct bt_mesh_ctl_friend_clear req = {
   147c6:	f8ad 300e 	strh.w	r3, [sp, #14]
	};

	BT_DBG("");

	bt_mesh_ctl_send(&tx, TRANS_CTL_OP_FRIEND_CLEAR, &req,
   147ca:	4b05      	ldr	r3, [pc, #20]	; (147e0 <send_friend_clear+0x74>)
   147cc:	9300      	str	r3, [sp, #0]
   147ce:	9401      	str	r4, [sp, #4]
   147d0:	2304      	movs	r3, #4
   147d2:	aa03      	add	r2, sp, #12
   147d4:	2105      	movs	r1, #5
   147d6:	a807      	add	r0, sp, #28
   147d8:	f7fb fe08 	bl	103ec <bt_mesh_ctl_send>
			 sizeof(req), &clear_sent_cb, frnd);
}
   147dc:	b00a      	add	sp, #40	; 0x28
   147de:	bd10      	pop	{r4, pc}
   147e0:	0002f1f8 	.word	0x0002f1f8

000147e4 <k_delayed_work_submit>:
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   147e4:	4601      	mov	r1, r0
   147e6:	4801      	ldr	r0, [pc, #4]	; (147ec <k_delayed_work_submit+0x8>)
   147e8:	f00f bad6 	b.w	23d98 <k_delayed_work_submit_to_queue>
   147ec:	20002490 	.word	0x20002490

000147f0 <buf_send_end>:
{
	struct bt_mesh_friend *frnd = user_data;

	BT_DBG("err %d", err);

	if (frnd->pending_req) {
   147f0:	78cb      	ldrb	r3, [r1, #3]
   147f2:	075a      	lsls	r2, r3, #29
{
   147f4:	b5d0      	push	{r4, r6, r7, lr}
	if (frnd->pending_req) {
   147f6:	d505      	bpl.n	14804 <buf_send_end+0x14>
		BT_WARN("Another request before previous completed sending");
   147f8:	2157      	movs	r1, #87	; 0x57
   147fa:	4812      	ldr	r0, [pc, #72]	; (14844 <buf_send_end+0x54>)
	} else {
		/* Friend offer timeout is 1 second */
		k_delayed_work_submit(&frnd->timer, K_SECONDS(1));
		BT_DBG("Waiting for first poll");
	}
}
   147fc:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
		BT_WARN("Another request before previous completed sending");
   14800:	f012 bbb5 	b.w	26f6e <printk>
	if (frnd->established) {
   14804:	06db      	lsls	r3, r3, #27
   14806:	f101 0460 	add.w	r4, r1, #96	; 0x60
   1480a:	d517      	bpl.n	1483c <buf_send_end+0x4c>
		k_delayed_work_submit(&frnd->timer, K_MSEC(frnd->poll_to));
   1480c:	6849      	ldr	r1, [r1, #4]
   1480e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   14812:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   14816:	f240 36e7 	movw	r6, #999	; 0x3e7
   1481a:	2700      	movs	r7, #0
   1481c:	fbc0 6701 	smlal	r6, r7, r0, r1
   14820:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   14824:	2300      	movs	r3, #0
   14826:	4630      	mov	r0, r6
   14828:	4639      	mov	r1, r7
   1482a:	f7ed f8ff 	bl	1a2c <__aeabi_uldivmod>
   1482e:	4602      	mov	r2, r0
   14830:	460b      	mov	r3, r1
		k_delayed_work_submit(&frnd->timer, K_SECONDS(1));
   14832:	4620      	mov	r0, r4
}
   14834:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
		k_delayed_work_submit(&frnd->timer, K_SECONDS(1));
   14838:	f7ff bfd4 	b.w	147e4 <k_delayed_work_submit>
   1483c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   14840:	2300      	movs	r3, #0
   14842:	e7f6      	b.n	14832 <buf_send_end+0x42>
   14844:	00033e7b 	.word	0x00033e7b

00014848 <atomic_test_bit.constprop.26>:
   14848:	4b04      	ldr	r3, [pc, #16]	; (1485c <atomic_test_bit.constprop.26+0x14>)
   1484a:	f3bf 8f5b 	dmb	ish
   1484e:	6818      	ldr	r0, [r3, #0]
   14850:	f3bf 8f5b 	dmb	ish
}
   14854:	f3c0 0080 	ubfx	r0, r0, #2, #1
   14858:	4770      	bx	lr
   1485a:	bf00      	nop
   1485c:	20001de0 	.word	0x20001de0

00014860 <encrypt_friend_pdu>:
{
   14860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14864:	6903      	ldr	r3, [r0, #16]
   14866:	7f9d      	ldrb	r5, [r3, #30]
   14868:	460e      	mov	r6, r1
   1486a:	1ea9      	subs	r1, r5, #2
   1486c:	424d      	negs	r5, r1
   1486e:	b08e      	sub	sp, #56	; 0x38
   14870:	4604      	mov	r4, r0
   14872:	414d      	adcs	r5, r1
	if (master_cred) {
   14874:	2a00      	cmp	r2, #0
   14876:	d05d      	beq.n	14934 <encrypt_friend_pdu+0xd4>
		cred = &frnd->subnet->keys[SUBNET_KEY_TX_IDX(frnd->subnet)]
   14878:	225a      	movs	r2, #90	; 0x5a
   1487a:	fb02 3505 	mla	r5, r2, r5, r3
   1487e:	353d      	adds	r5, #61	; 0x3d
	src = sys_get_be16(&buf->data[5]);
   14880:	4637      	mov	r7, r6
   14882:	f857 3f08 	ldr.w	r3, [r7, #8]!
	return ((uint16_t)src[0] << 8) | src[1];
   14886:	7958      	ldrb	r0, [r3, #5]
   14888:	799b      	ldrb	r3, [r3, #6]
	if (bt_mesh_elem_find(src)) {
   1488a:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   1488e:	f7fd fb9d 	bl	11fcc <bt_mesh_elem_find>
   14892:	2800      	cmp	r0, #0
   14894:	f000 80b5 	beq.w	14a02 <encrypt_friend_pdu+0x1a2>
		if (FRIEND_ADV(buf)->app_idx != BT_MESH_KEY_UNUSED) {
   14898:	6973      	ldr	r3, [r6, #20]
   1489a:	f8b3 800c 	ldrh.w	r8, [r3, #12]
   1489e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   148a2:	4598      	cmp	r8, r3
   148a4:	f000 8087 	beq.w	149b6 <encrypt_friend_pdu+0x156>
	err = unseg_app_sdu_unpack(frnd, buf, &meta);
   148a8:	6924      	ldr	r4, [r4, #16]
	struct bt_mesh_net_rx net = {
   148aa:	2218      	movs	r2, #24
   148ac:	2100      	movs	r1, #0
   148ae:	4668      	mov	r0, sp
   148b0:	f018 fea3 	bl	2d5fa <memset>
   148b4:	8ba3      	ldrh	r3, [r4, #28]
   148b6:	f8ad 3004 	strh.w	r3, [sp, #4]
	bt_mesh_net_header_parse(&buf->b, &net);
   148ba:	4669      	mov	r1, sp
   148bc:	4638      	mov	r0, r7
	meta->subnet = frnd->subnet;
   148be:	940c      	str	r4, [sp, #48]	; 0x30
	struct bt_mesh_net_rx net = {
   148c0:	f8ad 8006 	strh.w	r8, [sp, #6]
	bt_mesh_net_header_parse(&buf->b, &net);
   148c4:	f7fa f8bc 	bl	ea40 <bt_mesh_net_header_parse>
	err = bt_mesh_keys_resolve(&net.ctx, &net.sub, &meta->key, &meta->aid);
   148c8:	ab0d      	add	r3, sp, #52	; 0x34
   148ca:	aa0b      	add	r2, sp, #44	; 0x2c
   148cc:	4669      	mov	r1, sp
   148ce:	a801      	add	r0, sp, #4
   148d0:	f7fb f86c 	bl	f9ac <bt_mesh_keys_resolve>
	if (err) {
   148d4:	4604      	mov	r4, r0
   148d6:	bb48      	cbnz	r0, 1492c <encrypt_friend_pdu+0xcc>
	meta->crypto.src = net.ctx.addr;
   148d8:	f8bd 3008 	ldrh.w	r3, [sp, #8]
	meta->crypto.iv_index = BT_MESH_NET_IVI_TX;
   148dc:	4954      	ldr	r1, [pc, #336]	; (14a30 <encrypt_friend_pdu+0x1d0>)
	meta->crypto.src = net.ctx.addr;
   148de:	f8ad 301a 	strh.w	r3, [sp, #26]
	meta->crypto.dst = net.ctx.recv_dst;
   148e2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   148e6:	f8ad 301c 	strh.w	r3, [sp, #28]
	meta->crypto.iv_index = BT_MESH_NET_IVI_TX;
   148ea:	680a      	ldr	r2, [r1, #0]
   148ec:	f7ff ffac 	bl	14848 <atomic_test_bit.constprop.26>
	meta->crypto.dev_key = BT_MESH_IS_DEV_KEY(app_idx);
   148f0:	f108 0303 	add.w	r3, r8, #3
   148f4:	b29b      	uxth	r3, r3
   148f6:	2b01      	cmp	r3, #1
	meta->crypto.iv_index = BT_MESH_NET_IVI_TX;
   148f8:	eba2 0000 	sub.w	r0, r2, r0
	meta->crypto.dev_key = BT_MESH_IS_DEV_KEY(app_idx);
   148fc:	bf8c      	ite	hi
   148fe:	2300      	movhi	r3, #0
   14900:	2301      	movls	r3, #1
	meta->crypto.iv_index = BT_MESH_NET_IVI_TX;
   14902:	9009      	str	r0, [sp, #36]	; 0x24
	if (BT_MESH_ADDR_IS_VIRTUAL(meta->crypto.dst)) {
   14904:	f8bd 001c 	ldrh.w	r0, [sp, #28]
	meta->crypto.dev_key = BT_MESH_IS_DEV_KEY(app_idx);
   14908:	f88d 3018 	strb.w	r3, [sp, #24]
	meta->crypto.seq_num = net.seq;
   1490c:	9b04      	ldr	r3, [sp, #16]
   1490e:	9308      	str	r3, [sp, #32]
	if (BT_MESH_ADDR_IS_VIRTUAL(meta->crypto.dst)) {
   14910:	f480 4300 	eor.w	r3, r0, #32768	; 0x8000
   14914:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
	meta->crypto.aszmic = 0;
   14918:	f88d 4019 	strb.w	r4, [sp, #25]
	if (BT_MESH_ADDR_IS_VIRTUAL(meta->crypto.dst)) {
   1491c:	4688      	mov	r8, r1
   1491e:	d20e      	bcs.n	1493e <encrypt_friend_pdu+0xde>
		meta->crypto.ad = bt_mesh_va_label_get(meta->crypto.dst);
   14920:	f7fb fe9c 	bl	1065c <bt_mesh_va_label_get>
   14924:	900a      	str	r0, [sp, #40]	; 0x28
		if (!meta->crypto.ad) {
   14926:	b958      	cbnz	r0, 14940 <encrypt_friend_pdu+0xe0>
			return -ENOENT;
   14928:	f06f 0401 	mvn.w	r4, #1
}
   1492c:	4620      	mov	r0, r4
   1492e:	b00e      	add	sp, #56	; 0x38
   14930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cred = &frnd->cred[SUBNET_KEY_TX_IDX(frnd->subnet)];
   14934:	016b      	lsls	r3, r5, #5
   14936:	441d      	add	r5, r3
   14938:	3514      	adds	r5, #20
   1493a:	4405      	add	r5, r0
   1493c:	e7a0      	b.n	14880 <encrypt_friend_pdu+0x20>
		meta->crypto.ad = NULL;
   1493e:	940a      	str	r4, [sp, #40]	; 0x28
	if (meta.crypto.seq_num == bt_mesh.seq) {
   14940:	f8d8 3004 	ldr.w	r3, [r8, #4]
   14944:	9a08      	ldr	r2, [sp, #32]
   14946:	429a      	cmp	r2, r3
   14948:	d035      	beq.n	149b6 <encrypt_friend_pdu+0x156>
	net_buf_simple_clone(&buf->b, &sdu);
   1494a:	4669      	mov	r1, sp
   1494c:	4638      	mov	r0, r7
   1494e:	f017 ffdf 	bl	2c910 <net_buf_simple_clone>
	net_buf_simple_pull(&sdu, 10);
   14952:	210a      	movs	r1, #10
   14954:	4668      	mov	r0, sp
   14956:	f00a fc13 	bl	1f180 <net_buf_simple_pull>
	sdu.len -= 4;
   1495a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
	return bt_mesh_app_decrypt(meta->key, &meta->crypto, &sdu, &sdu);
   1495e:	980b      	ldr	r0, [sp, #44]	; 0x2c
	sdu.len -= 4;
   14960:	3b04      	subs	r3, #4
   14962:	f8ad 3004 	strh.w	r3, [sp, #4]
	return bt_mesh_app_decrypt(meta->key, &meta->crypto, &sdu, &sdu);
   14966:	466a      	mov	r2, sp
   14968:	466b      	mov	r3, sp
   1496a:	a906      	add	r1, sp, #24
   1496c:	f016 f944 	bl	2abf8 <bt_mesh_app_decrypt>
	if (err) {
   14970:	4604      	mov	r4, r0
   14972:	b128      	cbz	r0, 14980 <encrypt_friend_pdu+0x120>
		BT_WARN("Decryption failed! %d", err);
   14974:	4602      	mov	r2, r0
   14976:	482f      	ldr	r0, [pc, #188]	; (14a34 <encrypt_friend_pdu+0x1d4>)
   14978:	2157      	movs	r1, #87	; 0x57
		BT_WARN("Re-encryption failed! %d", err);
   1497a:	f012 faf8 	bl	26f6e <printk>
   1497e:	e7d5      	b.n	1492c <encrypt_friend_pdu+0xcc>
	meta.crypto.seq_num = bt_mesh.seq;
   14980:	f8d8 3004 	ldr.w	r3, [r8, #4]
   14984:	9308      	str	r3, [sp, #32]
	net_buf_simple_clone(&buf->b, &sdu);
   14986:	4669      	mov	r1, sp
   14988:	4638      	mov	r0, r7
   1498a:	f017 ffc1 	bl	2c910 <net_buf_simple_clone>
	net_buf_simple_pull(&sdu, 10);
   1498e:	210a      	movs	r1, #10
   14990:	4668      	mov	r0, sp
   14992:	f00a fbf5 	bl	1f180 <net_buf_simple_pull>
	sdu.len -= 4;
   14996:	f8bd 3004 	ldrh.w	r3, [sp, #4]
	return bt_mesh_app_encrypt(meta->key, &meta->crypto, &sdu);
   1499a:	980b      	ldr	r0, [sp, #44]	; 0x2c
	sdu.len -= 4;
   1499c:	3b04      	subs	r3, #4
	return bt_mesh_app_encrypt(meta->key, &meta->crypto, &sdu);
   1499e:	466a      	mov	r2, sp
   149a0:	a906      	add	r1, sp, #24
	sdu.len -= 4;
   149a2:	f8ad 3004 	strh.w	r3, [sp, #4]
	return bt_mesh_app_encrypt(meta->key, &meta->crypto, &sdu);
   149a6:	f016 f8fe 	bl	2aba6 <bt_mesh_app_encrypt>
	if (err) {
   149aa:	4604      	mov	r4, r0
   149ac:	b118      	cbz	r0, 149b6 <encrypt_friend_pdu+0x156>
		BT_WARN("Re-encryption failed! %d", err);
   149ae:	4602      	mov	r2, r0
   149b0:	2157      	movs	r1, #87	; 0x57
   149b2:	4821      	ldr	r0, [pc, #132]	; (14a38 <encrypt_friend_pdu+0x1d8>)
   149b4:	e7e1      	b.n	1497a <encrypt_friend_pdu+0x11a>
		seq = bt_mesh_next_seq();
   149b6:	f7f9 fedb 	bl	e770 <bt_mesh_next_seq>
		sys_put_be24(seq, &buf->data[2]);
   149ba:	68b3      	ldr	r3, [r6, #8]
	dst[0] = val >> 16;
   149bc:	0c02      	lsrs	r2, r0, #16
   149be:	709a      	strb	r2, [r3, #2]
	dst[0] = val >> 8;
   149c0:	f3c0 2207 	ubfx	r2, r0, #8, #8
   149c4:	70da      	strb	r2, [r3, #3]
	dst[1] = val;
   149c6:	7118      	strb	r0, [r3, #4]
		iv_index = BT_MESH_NET_IVI_TX;
   149c8:	4b19      	ldr	r3, [pc, #100]	; (14a30 <encrypt_friend_pdu+0x1d0>)
   149ca:	681c      	ldr	r4, [r3, #0]
   149cc:	f7ff ff3c 	bl	14848 <atomic_test_bit.constprop.26>
		FRIEND_ADV(buf)->app_idx = BT_MESH_KEY_UNUSED;
   149d0:	6973      	ldr	r3, [r6, #20]
   149d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
		iv_index = BT_MESH_NET_IVI_TX;
   149d6:	1a24      	subs	r4, r4, r0
		FRIEND_ADV(buf)->app_idx = BT_MESH_KEY_UNUSED;
   149d8:	819a      	strh	r2, [r3, #12]
	buf->data[0] = (cred->nid | (iv_index & 1) << 7);
   149da:	4628      	mov	r0, r5
   149dc:	68b2      	ldr	r2, [r6, #8]
   149de:	f810 3b01 	ldrb.w	r3, [r0], #1
   149e2:	ea43 13c4 	orr.w	r3, r3, r4, lsl #7
   149e6:	7013      	strb	r3, [r2, #0]
	if (bt_mesh_net_encrypt(cred->enc, &buf->b, iv_index, false)) {
   149e8:	4639      	mov	r1, r7
   149ea:	2300      	movs	r3, #0
   149ec:	4622      	mov	r2, r4
   149ee:	f016 f838 	bl	2aa62 <bt_mesh_net_encrypt>
   149f2:	b180      	cbz	r0, 14a16 <encrypt_friend_pdu+0x1b6>
		BT_ERR("Encrypting failed");
   149f4:	4811      	ldr	r0, [pc, #68]	; (14a3c <encrypt_friend_pdu+0x1dc>)
   149f6:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Obfuscating failed");
   149f8:	f012 fab9 	bl	26f6e <printk>
		return -EINVAL;
   149fc:	f06f 0415 	mvn.w	r4, #21
   14a00:	e794      	b.n	1492c <encrypt_friend_pdu+0xcc>
		iv_index = (bt_mesh.iv_index - ((bt_mesh.iv_index & 1) != ivi));
   14a02:	4b0b      	ldr	r3, [pc, #44]	; (14a30 <encrypt_friend_pdu+0x1d0>)
   14a04:	681c      	ldr	r4, [r3, #0]
		uint8_t ivi = (buf->data[0] >> 7);
   14a06:	68b3      	ldr	r3, [r6, #8]
   14a08:	781a      	ldrb	r2, [r3, #0]
		iv_index = (bt_mesh.iv_index - ((bt_mesh.iv_index & 1) != ivi));
   14a0a:	f004 0301 	and.w	r3, r4, #1
   14a0e:	ea83 13d2 	eor.w	r3, r3, r2, lsr #7
   14a12:	1ae4      	subs	r4, r4, r3
   14a14:	e7e1      	b.n	149da <encrypt_friend_pdu+0x17a>
	if (bt_mesh_net_obfuscate(buf->data, iv_index, cred->privacy)) {
   14a16:	4621      	mov	r1, r4
   14a18:	f105 0211 	add.w	r2, r5, #17
   14a1c:	68b0      	ldr	r0, [r6, #8]
   14a1e:	f015 fff2 	bl	2aa06 <bt_mesh_net_obfuscate>
   14a22:	4604      	mov	r4, r0
   14a24:	2800      	cmp	r0, #0
   14a26:	d081      	beq.n	1492c <encrypt_friend_pdu+0xcc>
		BT_ERR("Obfuscating failed");
   14a28:	2145      	movs	r1, #69	; 0x45
   14a2a:	4805      	ldr	r0, [pc, #20]	; (14a40 <encrypt_friend_pdu+0x1e0>)
   14a2c:	e7e4      	b.n	149f8 <encrypt_friend_pdu+0x198>
   14a2e:	bf00      	nop
   14a30:	20001dd8 	.word	0x20001dd8
   14a34:	00033eb2 	.word	0x00033eb2
   14a38:	00033ecd 	.word	0x00033ecd
   14a3c:	00033eeb 	.word	0x00033eeb
   14a40:	00033f02 	.word	0x00033f02

00014a44 <friend_clear>:
{
   14a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14a48:	4604      	mov	r4, r0
	k_delayed_work_cancel(&frnd->timer);
   14a4a:	3060      	adds	r0, #96	; 0x60
   14a4c:	f00f fa14 	bl	23e78 <k_delayed_work_cancel>
__ssp_bos_icheck3(memset, void *, int)
   14a50:	2242      	movs	r2, #66	; 0x42
   14a52:	2100      	movs	r1, #0
   14a54:	f104 0014 	add.w	r0, r4, #20
   14a58:	f018 fdcf 	bl	2d5fa <memset>
	if (frnd->last) {
   14a5c:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   14a60:	b160      	cbz	r0, 14a7c <friend_clear+0x38>
		if (frnd->pending_buf) {
   14a62:	78e3      	ldrb	r3, [r4, #3]
   14a64:	071a      	lsls	r2, r3, #28
			BT_MESH_ADV(frnd->last)->busy = 0U;
   14a66:	bf41      	itttt	mi
   14a68:	6943      	ldrmi	r3, [r0, #20]
   14a6a:	7a1a      	ldrbmi	r2, [r3, #8]
   14a6c:	f36f 0282 	bfcmi	r2, #2, #1
   14a70:	721a      	strbmi	r2, [r3, #8]
		net_buf_unref(frnd->last);
   14a72:	f00a fa6f 	bl	1ef54 <net_buf_unref>
		frnd->last = NULL;
   14a76:	2300      	movs	r3, #0
   14a78:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	purge_buffers(&frnd->queue);
   14a7c:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   14a80:	f016 fcbe 	bl	2b400 <purge_buffers>
	Z_STRUCT_SECTION_FOREACH(bt_mesh_friend_cb, cb) {
   14a84:	4e19      	ldr	r6, [pc, #100]	; (14aec <friend_clear+0xa8>)
   14a86:	4d1a      	ldr	r5, [pc, #104]	; (14af0 <friend_clear+0xac>)
   14a88:	4f1a      	ldr	r7, [pc, #104]	; (14af4 <friend_clear+0xb0>)
		purge_buffers(&seg->queue);
   14a8a:	f104 0090 	add.w	r0, r4, #144	; 0x90
   14a8e:	f016 fcb7 	bl	2b400 <purge_buffers>
		seg->seg_count = 0U;
   14a92:	2300      	movs	r3, #0
   14a94:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
   14a98:	46b0      	mov	r8, r6
	Z_STRUCT_SECTION_FOREACH(bt_mesh_friend_cb, cb) {
   14a9a:	42b5      	cmp	r5, r6
   14a9c:	d908      	bls.n	14ab0 <friend_clear+0x6c>
   14a9e:	4639      	mov	r1, r7
   14aa0:	4815      	ldr	r0, [pc, #84]	; (14af8 <friend_clear+0xb4>)
   14aa2:	22af      	movs	r2, #175	; 0xaf
   14aa4:	f012 fa63 	bl	26f6e <printk>
   14aa8:	21af      	movs	r1, #175	; 0xaf
   14aaa:	4638      	mov	r0, r7
   14aac:	f012 fcd8 	bl	27460 <assert_post_action>
   14ab0:	4545      	cmp	r5, r8
   14ab2:	d310      	bcc.n	14ad6 <friend_clear+0x92>
	frnd->counter++;
   14ab4:	89a3      	ldrh	r3, [r4, #12]
	frnd->fsn = 0U;
   14ab6:	78e2      	ldrb	r2, [r4, #3]
	frnd->counter++;
   14ab8:	3301      	adds	r3, #1
   14aba:	81a3      	strh	r3, [r4, #12]
	frnd->fsn = 0U;
   14abc:	f022 021d 	bic.w	r2, r2, #29
	frnd->subnet = NULL;
   14ac0:	2300      	movs	r3, #0
   14ac2:	6123      	str	r3, [r4, #16]
	frnd->queue_size = 0U;
   14ac4:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	frnd->fsn = 0U;
   14ac8:	70e2      	strb	r2, [r4, #3]
   14aca:	f8c4 3056 	str.w	r3, [r4, #86]	; 0x56
   14ace:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
}
   14ad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (frnd->established && cb->terminated) {
   14ad6:	78e3      	ldrb	r3, [r4, #3]
   14ad8:	06db      	lsls	r3, r3, #27
   14ada:	d505      	bpl.n	14ae8 <friend_clear+0xa4>
   14adc:	686b      	ldr	r3, [r5, #4]
   14ade:	b11b      	cbz	r3, 14ae8 <friend_clear+0xa4>
			cb->terminated(frnd->subnet->net_idx, frnd->lpn);
   14ae0:	6922      	ldr	r2, [r4, #16]
   14ae2:	8821      	ldrh	r1, [r4, #0]
   14ae4:	8b90      	ldrh	r0, [r2, #28]
   14ae6:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_mesh_friend_cb, cb) {
   14ae8:	3508      	adds	r5, #8
   14aea:	e7d6      	b.n	14a9a <friend_clear+0x56>
   14aec:	0002e338 	.word	0x0002e338
   14af0:	0002e338 	.word	0x0002e338
   14af4:	00033faa 	.word	0x00033faa
   14af8:	0002fa94 	.word	0x0002fa94

00014afc <friend_queue_prepare_space>:
				   const uint64_t *seq_auth, uint8_t seg_count)
{
	uint32_t total = 0;
	int i;

	if (seg_count > CONFIG_BT_MESH_FRIEND_QUEUE_SIZE) {
   14afc:	2b10      	cmp	r3, #16
	return someone_has_space;
}

static bool friend_queue_prepare_space(struct bt_mesh_friend *frnd, uint16_t addr,
				       const uint64_t *seq_auth, uint8_t seg_count)
{
   14afe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14b02:	4605      	mov	r5, r0
   14b04:	461f      	mov	r7, r3
	if (seg_count > CONFIG_BT_MESH_FRIEND_QUEUE_SIZE) {
   14b06:	d904      	bls.n	14b12 <friend_queue_prepare_space+0x16>
	bool pending_segments;
	uint8_t avail_space;

	if (!friend_queue_has_space(frnd, addr, seq_auth, seg_count)) {
		return false;
   14b08:	f04f 0800 	mov.w	r8, #0

		net_buf_unref(buf);
	}

	return true;
}
   14b0c:	4640      	mov	r0, r8
   14b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14b12:	f016 fcb9 	bl	2b488 <friend_queue_has_space.part.18>
	if (!friend_queue_has_space(frnd, addr, seq_auth, seg_count)) {
   14b16:	4680      	mov	r8, r0
   14b18:	2800      	cmp	r0, #0
   14b1a:	d0f5      	beq.n	14b08 <friend_queue_prepare_space+0xc>
	avail_space = CONFIG_BT_MESH_FRIEND_QUEUE_SIZE - frnd->queue_size;
   14b1c:	f8d5 40a8 	ldr.w	r4, [r5, #168]	; 0xa8
	pending_segments = false;
   14b20:	2600      	movs	r6, #0
	avail_space = CONFIG_BT_MESH_FRIEND_QUEUE_SIZE - frnd->queue_size;
   14b22:	f1c4 0410 	rsb	r4, r4, #16
   14b26:	b2e4      	uxtb	r4, r4
		buf->frags = NULL;
   14b28:	46b2      	mov	sl, r6
	while (pending_segments || avail_space < seg_count) {
   14b2a:	b90e      	cbnz	r6, 14b30 <friend_queue_prepare_space+0x34>
   14b2c:	42bc      	cmp	r4, r7
   14b2e:	d2ed      	bcs.n	14b0c <friend_queue_prepare_space+0x10>
Z_GENLIST_IS_EMPTY(slist)
   14b30:	f8d5 90a0 	ldr.w	r9, [r5, #160]	; 0xa0
Z_GENLIST_GET(slist, snode)
   14b34:	f1b9 0f00 	cmp.w	r9, #0
   14b38:	d104      	bne.n	14b44 <friend_queue_prepare_space+0x48>
			BT_ERR("Unable to free up enough buffers");
   14b3a:	2145      	movs	r1, #69	; 0x45
   14b3c:	4811      	ldr	r0, [pc, #68]	; (14b84 <friend_queue_prepare_space+0x88>)
   14b3e:	f012 fa16 	bl	26f6e <printk>
			return false;
   14b42:	e7e1      	b.n	14b08 <friend_queue_prepare_space+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   14b44:	f8d5 20a4 	ldr.w	r2, [r5, #164]	; 0xa4
   14b48:	f8d9 3000 	ldr.w	r3, [r9]
	list->head = node;
   14b4c:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   14b50:	4591      	cmp	r9, r2
   14b52:	d101      	bne.n	14b58 <friend_queue_prepare_space+0x5c>
	list->tail = node;
   14b54:	f8c5 30a4 	str.w	r3, [r5, #164]	; 0xa4
		frnd->queue_size--;
   14b58:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
   14b5c:	3b01      	subs	r3, #1
   14b5e:	f8c5 30a8 	str.w	r3, [r5, #168]	; 0xa8
		pending_segments = (buf->flags & NET_BUF_FRAGS);
   14b62:	f899 3005 	ldrb.w	r3, [r9, #5]
		buf->frags = NULL;
   14b66:	f8c9 a000 	str.w	sl, [r9]
		pending_segments = (buf->flags & NET_BUF_FRAGS);
   14b6a:	f003 0601 	and.w	r6, r3, #1
		buf->flags &= ~NET_BUF_FRAGS;
   14b6e:	f023 0301 	bic.w	r3, r3, #1
		avail_space++;
   14b72:	3401      	adds	r4, #1
		buf->flags &= ~NET_BUF_FRAGS;
   14b74:	f889 3005 	strb.w	r3, [r9, #5]
		net_buf_unref(buf);
   14b78:	4648      	mov	r0, r9
		avail_space++;
   14b7a:	b2e4      	uxtb	r4, r4
		net_buf_unref(buf);
   14b7c:	f00a f9ea 	bl	1ef54 <net_buf_unref>
   14b80:	e7d3      	b.n	14b2a <friend_queue_prepare_space+0x2e>
   14b82:	bf00      	nop
   14b84:	00033fdc 	.word	0x00033fdc

00014b88 <enqueue_friend_pdu.part.20>:
static void enqueue_friend_pdu(struct bt_mesh_friend *frnd,
   14b88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14b8c:	9d08      	ldr	r5, [sp, #32]
   14b8e:	4699      	mov	r9, r3
	uint16_t seq_zero = (((buf->data[10] << 8 | buf->data[11]) >> 2) & TRANS_SEQ_ZERO_MASK);
   14b90:	68ab      	ldr	r3, [r5, #8]
static void enqueue_friend_pdu(struct bt_mesh_friend *frnd,
   14b92:	4617      	mov	r7, r2
	uint16_t seq_zero = (((buf->data[10] << 8 | buf->data[11]) >> 2) & TRANS_SEQ_ZERO_MASK);
   14b94:	895a      	ldrh	r2, [r3, #10]
		struct bt_mesh_friend_seg *seg = &frnd->seg[i];
   14b96:	f100 0690 	add.w	r6, r0, #144	; 0x90
	uint16_t seq_zero = (((buf->data[10] << 8 | buf->data[11]) >> 2) & TRANS_SEQ_ZERO_MASK);
   14b9a:	ba52      	rev16	r2, r2
static void enqueue_friend_pdu(struct bt_mesh_friend *frnd,
   14b9c:	4604      	mov	r4, r0
   14b9e:	4688      	mov	r8, r1
		if (is_seg(seg, src, seq_zero)) {
   14ba0:	f3c2 028c 	ubfx	r2, r2, #2, #13
   14ba4:	4639      	mov	r1, r7
   14ba6:	4630      	mov	r0, r6
   14ba8:	f016 fc3e 	bl	2b428 <is_seg>
   14bac:	b920      	cbnz	r0, 14bb8 <enqueue_friend_pdu.part.20+0x30>
		if (!unassigned && !sys_slist_peek_head(&seg->queue)) {
   14bae:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   14bb2:	b9fb      	cbnz	r3, 14bf4 <enqueue_friend_pdu.part.20+0x6c>
		unassigned->seg_count = seg_count;
   14bb4:	f884 9098 	strb.w	r9, [r4, #152]	; 0x98
	net_buf_slist_put(&seg->queue, buf);
   14bb8:	4629      	mov	r1, r5
   14bba:	4630      	mov	r0, r6
   14bbc:	f00a f904 	bl	1edc8 <net_buf_slist_put>
	if (type == BT_MESH_FRIEND_PDU_COMPLETE) {
   14bc0:	f1b8 0f02 	cmp.w	r8, #2
   14bc4:	d122      	bne.n	14c0c <enqueue_friend_pdu.part.20+0x84>
Z_GENLIST_APPEND_LIST(slist, snode)
   14bc6:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
Z_GENLIST_MERGE_LIST(slist, snode)
   14bca:	e9d4 2124 	ldrd	r2, r1, [r4, #144]	; 0x90
Z_GENLIST_APPEND_LIST(slist, snode)
   14bce:	b9db      	cbnz	r3, 14c08 <enqueue_friend_pdu.part.20+0x80>
	list->head = node;
   14bd0:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
	list->head = NULL;
   14bd4:	2300      	movs	r3, #0
		frnd->queue_size += seg->seg_count;
   14bd6:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
	list->tail = node;
   14bda:	f8c4 10a4 	str.w	r1, [r4, #164]	; 0xa4
   14bde:	f894 1098 	ldrb.w	r1, [r4, #152]	; 0x98
		seg->seg_count = 0U;
   14be2:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
	list->tail = NULL;
   14be6:	e9c4 3324 	strd	r3, r3, [r4, #144]	; 0x90
		frnd->queue_size += seg->seg_count;
   14bea:	440a      	add	r2, r1
   14bec:	f8c4 20a8 	str.w	r2, [r4, #168]	; 0xa8
}
   14bf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		BT_ERR("No free friend segment RX contexts for 0x%04x", src);
   14bf4:	463a      	mov	r2, r7
   14bf6:	4808      	ldr	r0, [pc, #32]	; (14c18 <enqueue_friend_pdu.part.20+0x90>)
   14bf8:	2145      	movs	r1, #69	; 0x45
   14bfa:	f012 f9b8 	bl	26f6e <printk>
		net_buf_unref(buf);
   14bfe:	4628      	mov	r0, r5
}
   14c00:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		net_buf_unref(buf);
   14c04:	f00a b9a6 	b.w	1ef54 <net_buf_unref>
	parent->next = child;
   14c08:	601a      	str	r2, [r3, #0]
   14c0a:	e7e3      	b.n	14bd4 <enqueue_friend_pdu.part.20+0x4c>
		buf->flags |= NET_BUF_FRAGS;
   14c0c:	796b      	ldrb	r3, [r5, #5]
   14c0e:	f043 0301 	orr.w	r3, r3, #1
   14c12:	716b      	strb	r3, [r5, #5]
   14c14:	e7ec      	b.n	14bf0 <enqueue_friend_pdu.part.20+0x68>
   14c16:	bf00      	nop
   14c18:	00033f1a 	.word	0x00033f1a

00014c1c <create_friend_pdu.isra.10>:
static struct net_buf *create_friend_pdu(struct bt_mesh_friend *frnd,
   14c1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
					   FRIEND_XMIT, K_NO_WAIT);
   14c1e:	2300      	movs	r3, #0
   14c20:	2200      	movs	r2, #0
	buf = bt_mesh_adv_create_from_pool(&friend_buf_pool, adv_alloc,
   14c22:	e9cd 2300 	strd	r2, r3, [sp]
static struct net_buf *create_friend_pdu(struct bt_mesh_friend *frnd,
   14c26:	4605      	mov	r5, r0
   14c28:	460f      	mov	r7, r1
	buf = bt_mesh_adv_create_from_pool(&friend_buf_pool, adv_alloc,
   14c2a:	2308      	movs	r3, #8
   14c2c:	2201      	movs	r2, #1
   14c2e:	4918      	ldr	r1, [pc, #96]	; (14c90 <create_friend_pdu.isra.10+0x74>)
   14c30:	4818      	ldr	r0, [pc, #96]	; (14c94 <create_friend_pdu.isra.10+0x78>)
   14c32:	f7f8 ffc9 	bl	dbc8 <bt_mesh_adv_create_from_pool>
	if (!buf) {
   14c36:	4606      	mov	r6, r0
   14c38:	b330      	cbz	r0, 14c88 <create_friend_pdu.isra.10+0x6c>
	net_buf_add_u8(buf, (info->iv_index & 1) << 7); /* Will be reset in encryption */
   14c3a:	68a9      	ldr	r1, [r5, #8]
	return net_buf_simple_add_u8(&buf->b, val);
   14c3c:	f100 0408 	add.w	r4, r0, #8
   14c40:	01c9      	lsls	r1, r1, #7
   14c42:	f001 0180 	and.w	r1, r1, #128	; 0x80
   14c46:	4620      	mov	r0, r4
   14c48:	f017 fed7 	bl	2c9fa <net_buf_simple_add_u8>
	if (info->ctl) {
   14c4c:	f995 3007 	ldrsb.w	r3, [r5, #7]
   14c50:	79e9      	ldrb	r1, [r5, #7]
   14c52:	2b00      	cmp	r3, #0
		net_buf_add_u8(buf, info->ttl | 0x80);
   14c54:	f001 017f 	and.w	r1, r1, #127	; 0x7f
   14c58:	bfb8      	it	lt
   14c5a:	f041 0180 	orrlt.w	r1, r1, #128	; 0x80
   14c5e:	4620      	mov	r0, r4
   14c60:	f017 fecb 	bl	2c9fa <net_buf_simple_add_u8>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   14c64:	2203      	movs	r2, #3
   14c66:	1d29      	adds	r1, r5, #4
   14c68:	4620      	mov	r0, r4
   14c6a:	f017 feba 	bl	2c9e2 <net_buf_simple_add_mem>
	net_buf_simple_add_be16(&buf->b, val);
   14c6e:	8829      	ldrh	r1, [r5, #0]
   14c70:	4620      	mov	r0, r4
   14c72:	f017 fed2 	bl	2ca1a <net_buf_simple_add_be16>
   14c76:	8869      	ldrh	r1, [r5, #2]
   14c78:	4620      	mov	r0, r4
   14c7a:	f017 fece 	bl	2ca1a <net_buf_simple_add_be16>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   14c7e:	88ba      	ldrh	r2, [r7, #4]
   14c80:	6839      	ldr	r1, [r7, #0]
   14c82:	4620      	mov	r0, r4
   14c84:	f017 fead 	bl	2c9e2 <net_buf_simple_add_mem>
}
   14c88:	4630      	mov	r0, r6
   14c8a:	b003      	add	sp, #12
   14c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14c8e:	bf00      	nop
   14c90:	00014759 	.word	0x00014759
   14c94:	20001430 	.word	0x20001430

00014c98 <encode_friend_ctl.isra.11>:
static struct net_buf *encode_friend_ctl(struct bt_mesh_friend *frnd,
   14c98:	b530      	push	{r4, r5, lr}
   14c9a:	4605      	mov	r5, r0
   14c9c:	b085      	sub	sp, #20
	net_buf_simple_push_u8(sdu, TRANS_CTL_HDR(ctl_op, 0));
   14c9e:	4610      	mov	r0, r2
static struct net_buf *encode_friend_ctl(struct bt_mesh_friend *frnd,
   14ca0:	4614      	mov	r4, r2
	net_buf_simple_push_u8(sdu, TRANS_CTL_HDR(ctl_op, 0));
   14ca2:	f017 fe45 	bl	2c930 <net_buf_simple_push_u8>
	info.src = bt_mesh_primary_addr();
   14ca6:	f7fd f98b 	bl	11fc0 <bt_mesh_primary_addr>
	info.dst = frnd->lpn;
   14caa:	882b      	ldrh	r3, [r5, #0]
   14cac:	f8ad 3006 	strh.w	r3, [sp, #6]
	info.ttl = 0U;
   14cb0:	2380      	movs	r3, #128	; 0x80
   14cb2:	f88d 300b 	strb.w	r3, [sp, #11]
	memset(info.seq, 0, sizeof(info.seq));
   14cb6:	2300      	movs	r3, #0
   14cb8:	f8ad 3008 	strh.w	r3, [sp, #8]
   14cbc:	f88d 300a 	strb.w	r3, [sp, #10]
	info.iv_index = BT_MESH_NET_IVI_TX;
   14cc0:	4b06      	ldr	r3, [pc, #24]	; (14cdc <encode_friend_ctl.isra.11+0x44>)
	info.src = bt_mesh_primary_addr();
   14cc2:	f8ad 0004 	strh.w	r0, [sp, #4]
	info.iv_index = BT_MESH_NET_IVI_TX;
   14cc6:	6819      	ldr	r1, [r3, #0]
   14cc8:	f7ff fdbe 	bl	14848 <atomic_test_bit.constprop.26>
   14ccc:	1a08      	subs	r0, r1, r0
   14cce:	9003      	str	r0, [sp, #12]
	return create_friend_pdu(frnd, &info, sdu);
   14cd0:	4621      	mov	r1, r4
   14cd2:	a801      	add	r0, sp, #4
   14cd4:	f7ff ffa2 	bl	14c1c <create_friend_pdu.isra.10>
}
   14cd8:	b005      	add	sp, #20
   14cda:	bd30      	pop	{r4, r5, pc}
   14cdc:	20001dd8 	.word	0x20001dd8

00014ce0 <enqueue_sub_cfm>:
{
   14ce0:	b530      	push	{r4, r5, lr}
   14ce2:	b085      	sub	sp, #20
	NET_BUF_SIMPLE_DEFINE(sdu, 1 + sizeof(*cfm));
   14ce4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
{
   14ce8:	460d      	mov	r5, r1
   14cea:	4604      	mov	r4, r0
	net_buf_simple_reserve(&sdu, 1);
   14cec:	2101      	movs	r1, #1
   14cee:	a801      	add	r0, sp, #4
	NET_BUF_SIMPLE_DEFINE(sdu, 1 + sizeof(*cfm));
   14cf0:	9302      	str	r3, [sp, #8]
   14cf2:	f8cd d004 	str.w	sp, [sp, #4]
   14cf6:	f8cd d00c 	str.w	sp, [sp, #12]
	net_buf_simple_reserve(&sdu, 1);
   14cfa:	f00a f841 	bl	1ed80 <net_buf_simple_reserve>
	cfm = net_buf_simple_add(&sdu, sizeof(*cfm));
   14cfe:	2101      	movs	r1, #1
   14d00:	a801      	add	r0, sp, #4
   14d02:	f00a fa77 	bl	1f1f4 <net_buf_simple_add>
	buf = encode_friend_ctl(frnd, TRANS_CTL_OP_FRIEND_SUB_CFM, &sdu);
   14d06:	aa01      	add	r2, sp, #4
	cfm->xact = xact;
   14d08:	7005      	strb	r5, [r0, #0]
	buf = encode_friend_ctl(frnd, TRANS_CTL_OP_FRIEND_SUB_CFM, &sdu);
   14d0a:	2109      	movs	r1, #9
   14d0c:	4620      	mov	r0, r4
   14d0e:	f7ff ffc3 	bl	14c98 <encode_friend_ctl.isra.11>
	if (!buf) {
   14d12:	4605      	mov	r5, r0
   14d14:	b928      	cbnz	r0, 14d22 <enqueue_sub_cfm+0x42>
		BT_ERR("Unable to encode Subscription List Confirmation");
   14d16:	2145      	movs	r1, #69	; 0x45
   14d18:	480b      	ldr	r0, [pc, #44]	; (14d48 <enqueue_sub_cfm+0x68>)
   14d1a:	f012 f928 	bl	26f6e <printk>
}
   14d1e:	b005      	add	sp, #20
   14d20:	bd30      	pop	{r4, r5, pc}
	if (encrypt_friend_pdu(frnd, buf, false)) {
   14d22:	4601      	mov	r1, r0
   14d24:	2200      	movs	r2, #0
   14d26:	4620      	mov	r0, r4
   14d28:	f7ff fd9a 	bl	14860 <encrypt_friend_pdu>
   14d2c:	2800      	cmp	r0, #0
   14d2e:	d1f6      	bne.n	14d1e <enqueue_sub_cfm+0x3e>
	if (frnd->last) {
   14d30:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   14d34:	b108      	cbz	r0, 14d3a <enqueue_sub_cfm+0x5a>
		net_buf_unref(frnd->last);
   14d36:	f00a f90d 	bl	1ef54 <net_buf_unref>
	frnd->send_last = 1U;
   14d3a:	78e3      	ldrb	r3, [r4, #3]
	frnd->last = buf;
   14d3c:	f8c4 509c 	str.w	r5, [r4, #156]	; 0x9c
	frnd->send_last = 1U;
   14d40:	f043 0302 	orr.w	r3, r3, #2
   14d44:	70e3      	strb	r3, [r4, #3]
   14d46:	e7ea      	b.n	14d1e <enqueue_sub_cfm+0x3e>
   14d48:	00033f4d 	.word	0x00033f4d

00014d4c <friend_timeout>:
	__ASSERT_NO_MSG(frnd->pending_buf == 0U);
   14d4c:	f810 3c5d 	ldrb.w	r3, [r0, #-93]
   14d50:	0719      	lsls	r1, r3, #28
{
   14d52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14d56:	4604      	mov	r4, r0
	struct bt_mesh_friend *frnd = CONTAINER_OF(work, struct bt_mesh_friend,
   14d58:	f1a0 0660 	sub.w	r6, r0, #96	; 0x60
	__ASSERT_NO_MSG(frnd->pending_buf == 0U);
   14d5c:	d50a      	bpl.n	14d74 <friend_timeout+0x28>
   14d5e:	4941      	ldr	r1, [pc, #260]	; (14e64 <friend_timeout+0x118>)
   14d60:	4841      	ldr	r0, [pc, #260]	; (14e68 <friend_timeout+0x11c>)
   14d62:	f240 42aa 	movw	r2, #1194	; 0x4aa
   14d66:	f012 f902 	bl	26f6e <printk>
   14d6a:	f240 41aa 	movw	r1, #1194	; 0x4aa
   14d6e:	483d      	ldr	r0, [pc, #244]	; (14e64 <friend_timeout+0x118>)
   14d70:	f012 fb76 	bl	27460 <assert_post_action>
	if (frnd->send_last && frnd->last) {
   14d74:	f814 3c5d 	ldrb.w	r3, [r4, #-93]
   14d78:	079a      	lsls	r2, r3, #30
   14d7a:	d514      	bpl.n	14da6 <friend_timeout+0x5a>
   14d7c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   14d7e:	b192      	cbz	r2, 14da6 <friend_timeout+0x5a>
		frnd->send_last = 0U;
   14d80:	f36f 0341 	bfc	r3, #1, #1
   14d84:	f804 3c5d 	strb.w	r3, [r4, #-93]
	frnd->pending_req = 0U;
   14d88:	f814 3c5d 	ldrb.w	r3, [r4, #-93]
	bt_mesh_adv_send(frnd->last, &buf_sent_cb, frnd);
   14d8c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   14d8e:	4937      	ldr	r1, [pc, #220]	; (14e6c <friend_timeout+0x120>)
	frnd->pending_buf = 1U;
   14d90:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   14d94:	f043 0308 	orr.w	r3, r3, #8
   14d98:	f804 3c5d 	strb.w	r3, [r4, #-93]
	bt_mesh_adv_send(frnd->last, &buf_sent_cb, frnd);
   14d9c:	4632      	mov	r2, r6
}
   14d9e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	bt_mesh_adv_send(frnd->last, &buf_sent_cb, frnd);
   14da2:	f7f8 bf4f 	b.w	dc44 <bt_mesh_adv_send>
	if (frnd->established && !frnd->pending_req) {
   14da6:	f003 0314 	and.w	r3, r3, #20
   14daa:	2b10      	cmp	r3, #16
   14dac:	d10a      	bne.n	14dc4 <friend_timeout+0x78>
		BT_WARN("Friendship lost with 0x%04x", frnd->lpn);
   14dae:	f834 2c60 	ldrh.w	r2, [r4, #-96]
   14db2:	482f      	ldr	r0, [pc, #188]	; (14e70 <friend_timeout+0x124>)
   14db4:	2157      	movs	r1, #87	; 0x57
		BT_WARN("Friendship not established with 0x%04x",
   14db6:	f012 f8da 	bl	26f6e <printk>
		friend_clear(frnd);
   14dba:	4630      	mov	r0, r6
}
   14dbc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		friend_clear(frnd);
   14dc0:	f7ff be40 	b.w	14a44 <friend_clear>
Z_GENLIST_IS_EMPTY(slist)
   14dc4:	6c25      	ldr	r5, [r4, #64]	; 0x40
Z_GENLIST_GET(slist, snode)
   14dc6:	b92d      	cbnz	r5, 14dd4 <friend_timeout+0x88>
	frnd->last = (void *)sys_slist_get(&frnd->queue);
   14dc8:	63e5      	str	r5, [r4, #60]	; 0x3c
		BT_WARN("Friendship not established with 0x%04x",
   14dca:	f834 2c60 	ldrh.w	r2, [r4, #-96]
   14dce:	4829      	ldr	r0, [pc, #164]	; (14e74 <friend_timeout+0x128>)
   14dd0:	2157      	movs	r1, #87	; 0x57
   14dd2:	e7f0      	b.n	14db6 <friend_timeout+0x6a>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   14dd4:	6c63      	ldr	r3, [r4, #68]	; 0x44
   14dd6:	682f      	ldr	r7, [r5, #0]
	list->head = node;
   14dd8:	6427      	str	r7, [r4, #64]	; 0x40
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   14dda:	429d      	cmp	r5, r3
	if (buf->len != 16) {
   14ddc:	89ab      	ldrh	r3, [r5, #12]
	list->tail = node;
   14dde:	bf08      	it	eq
   14de0:	6467      	streq	r7, [r4, #68]	; 0x44
   14de2:	2b10      	cmp	r3, #16
	frnd->last = (void *)sys_slist_get(&frnd->queue);
   14de4:	63e5      	str	r5, [r4, #60]	; 0x3c
	if (buf->len != 16) {
   14de6:	d12b      	bne.n	14e40 <friend_timeout+0xf4>
	net_buf_simple_save(&buf->b, &state);
   14de8:	f105 0808 	add.w	r8, r5, #8
	state->offset = net_buf_simple_headroom(buf);
   14dec:	4640      	mov	r0, r8
   14dee:	f017 fdec 	bl	2c9ca <net_buf_simple_headroom>
	net_buf_skip(buf, 1); /* skip IVI, NID */
   14df2:	2101      	movs	r1, #1
   14df4:	4681      	mov	r9, r0
   14df6:	4628      	mov	r0, r5
	state->len = buf->len;
   14df8:	f8b5 a00c 	ldrh.w	sl, [r5, #12]
   14dfc:	f016 fa46 	bl	2b28c <net_buf_skip>
	return net_buf_simple_pull_u8(&buf->b);
   14e00:	4640      	mov	r0, r8
   14e02:	f017 fda8 	bl	2c956 <net_buf_simple_pull_u8>
	if (!(net_buf_pull_u8(buf) >> 7)) {
   14e06:	0603      	lsls	r3, r0, #24
   14e08:	d514      	bpl.n	14e34 <friend_timeout+0xe8>
	net_buf_skip(buf, 7); /* skip seqnum src dec*/
   14e0a:	2107      	movs	r1, #7
   14e0c:	4628      	mov	r0, r5
   14e0e:	f016 fa3d 	bl	2b28c <net_buf_skip>
	return net_buf_simple_pull_mem(&buf->b, len);
   14e12:	2101      	movs	r1, #1
   14e14:	4640      	mov	r0, r8
   14e16:	f00a f9cf 	bl	1f1b8 <net_buf_simple_pull_mem>
	if (TRANS_CTL_OP((uint8_t *) net_buf_pull_mem(buf, 1))
   14e1a:	7803      	ldrb	r3, [r0, #0]
   14e1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   14e20:	2b02      	cmp	r3, #2
   14e22:	d107      	bne.n	14e34 <friend_timeout+0xe8>
   14e24:	2106      	movs	r1, #6
   14e26:	4640      	mov	r0, r8
   14e28:	f00a f9c6 	bl	1f1b8 <net_buf_simple_pull_mem>
	md = (uint8_t)(sys_slist_peek_head(&frnd->queue) != NULL);
   14e2c:	3700      	adds	r7, #0
   14e2e:	bf18      	it	ne
   14e30:	2701      	movne	r7, #1
   14e32:	7147      	strb	r7, [r0, #5]
	buf->data = buf->__buf + state->offset;
   14e34:	692b      	ldr	r3, [r5, #16]
	buf->len = state->len;
   14e36:	f8a5 a00c 	strh.w	sl, [r5, #12]
	buf->data = buf->__buf + state->offset;
   14e3a:	fa13 f389 	uxtah	r3, r3, r9
   14e3e:	60ab      	str	r3, [r5, #8]
	if (encrypt_friend_pdu(frnd, frnd->last, false)) {
   14e40:	2200      	movs	r2, #0
   14e42:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   14e44:	4630      	mov	r0, r6
   14e46:	f7ff fd0b 	bl	14860 <encrypt_friend_pdu>
   14e4a:	b948      	cbnz	r0, 14e60 <friend_timeout+0x114>
	frnd->last->flags &= ~NET_BUF_FRAGS;
   14e4c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   14e4e:	795a      	ldrb	r2, [r3, #5]
	frnd->last->frags = NULL;
   14e50:	6018      	str	r0, [r3, #0]
	frnd->last->flags &= ~NET_BUF_FRAGS;
   14e52:	f022 0201 	bic.w	r2, r2, #1
   14e56:	715a      	strb	r2, [r3, #5]
	frnd->queue_size--;
   14e58:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   14e5a:	3b01      	subs	r3, #1
   14e5c:	64a3      	str	r3, [r4, #72]	; 0x48
   14e5e:	e793      	b.n	14d88 <friend_timeout+0x3c>
}
   14e60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14e64:	00033faa 	.word	0x00033faa
   14e68:	0002fa94 	.word	0x0002fa94
   14e6c:	0002f1f0 	.word	0x0002f1f0
   14e70:	00034002 	.word	0x00034002
   14e74:	00034023 	.word	0x00034023

00014e78 <enqueue_update.constprop.23>:
static void enqueue_update(struct bt_mesh_friend *frnd, uint8_t md)
   14e78:	b530      	push	{r4, r5, lr}
   14e7a:	b087      	sub	sp, #28
	NET_BUF_SIMPLE_DEFINE(sdu, 1 + sizeof(*upd));
   14e7c:	ab01      	add	r3, sp, #4
   14e7e:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
   14e82:	9303      	str	r3, [sp, #12]
   14e84:	e9cd 2304 	strd	r2, r3, [sp, #16]
	__ASSERT_NO_MSG(frnd->subnet);
   14e88:	6903      	ldr	r3, [r0, #16]
static void enqueue_update(struct bt_mesh_friend *frnd, uint8_t md)
   14e8a:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(frnd->subnet);
   14e8c:	b953      	cbnz	r3, 14ea4 <enqueue_update.constprop.23+0x2c>
   14e8e:	491b      	ldr	r1, [pc, #108]	; (14efc <enqueue_update.constprop.23+0x84>)
   14e90:	481b      	ldr	r0, [pc, #108]	; (14f00 <enqueue_update.constprop.23+0x88>)
   14e92:	f240 2216 	movw	r2, #534	; 0x216
   14e96:	f012 f86a 	bl	26f6e <printk>
   14e9a:	f240 2116 	movw	r1, #534	; 0x216
   14e9e:	4817      	ldr	r0, [pc, #92]	; (14efc <enqueue_update.constprop.23+0x84>)
   14ea0:	f012 fade 	bl	27460 <assert_post_action>
	net_buf_simple_reserve(&sdu, 1);
   14ea4:	2101      	movs	r1, #1
   14ea6:	a803      	add	r0, sp, #12
   14ea8:	f009 ff6a 	bl	1ed80 <net_buf_simple_reserve>
	upd = net_buf_simple_add(&sdu, sizeof(*upd));
   14eac:	2106      	movs	r1, #6
   14eae:	a803      	add	r0, sp, #12
   14eb0:	f00a f9a0 	bl	1f1f4 <net_buf_simple_add>
   14eb4:	4605      	mov	r5, r0
	upd->flags = bt_mesh_net_flags(frnd->subnet);
   14eb6:	6920      	ldr	r0, [r4, #16]
   14eb8:	f7fa f96c 	bl	f194 <bt_mesh_net_flags>
   14ebc:	4b11      	ldr	r3, [pc, #68]	; (14f04 <enqueue_update.constprop.23+0x8c>)
   14ebe:	7028      	strb	r0, [r5, #0]
	upd->iv_index = sys_cpu_to_be32(bt_mesh.iv_index);
   14ec0:	681b      	ldr	r3, [r3, #0]
   14ec2:	ba1b      	rev	r3, r3
   14ec4:	f8c5 3001 	str.w	r3, [r5, #1]
	upd->md = md;
   14ec8:	2300      	movs	r3, #0
	return encode_friend_ctl(frnd, TRANS_CTL_OP_FRIEND_UPDATE, &sdu);
   14eca:	2102      	movs	r1, #2
	upd->md = md;
   14ecc:	716b      	strb	r3, [r5, #5]
	return encode_friend_ctl(frnd, TRANS_CTL_OP_FRIEND_UPDATE, &sdu);
   14ece:	aa03      	add	r2, sp, #12
   14ed0:	4620      	mov	r0, r4
   14ed2:	f7ff fee1 	bl	14c98 <encode_friend_ctl.isra.11>
	if (!buf) {
   14ed6:	4601      	mov	r1, r0
   14ed8:	b928      	cbnz	r0, 14ee6 <enqueue_update.constprop.23+0x6e>
		BT_ERR("Unable to encode Friend Update");
   14eda:	2145      	movs	r1, #69	; 0x45
   14edc:	480a      	ldr	r0, [pc, #40]	; (14f08 <enqueue_update.constprop.23+0x90>)
   14ede:	f012 f846 	bl	26f6e <printk>
}
   14ee2:	b007      	add	sp, #28
   14ee4:	bd30      	pop	{r4, r5, pc}
	net_buf_slist_put(&frnd->queue, buf);
   14ee6:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   14eea:	f009 ff6d 	bl	1edc8 <net_buf_slist_put>
	frnd->queue_size++;
   14eee:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   14ef2:	3301      	adds	r3, #1
   14ef4:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
   14ef8:	e7f3      	b.n	14ee2 <enqueue_update.constprop.23+0x6a>
   14efa:	bf00      	nop
   14efc:	00033faa 	.word	0x00033faa
   14f00:	0002fa94 	.word	0x0002fa94
   14f04:	20001dd8 	.word	0x20001dd8
   14f08:	00033f82 	.word	0x00033f82

00014f0c <subnet_evt>:
{
   14f0c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   14f10:	4680      	mov	r8, r0
	if (evt == BT_MESH_KEY_ADDED) {
   14f12:	b369      	cbz	r1, 14f70 <subnet_evt+0x64>
   14f14:	4c23      	ldr	r4, [pc, #140]	; (14fa4 <subnet_evt+0x98>)
				BT_ERR("Failed updating friend cred for 0x%04x",
   14f16:	f8df 9090 	ldr.w	r9, [pc, #144]	; 14fa8 <subnet_evt+0x9c>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
   14f1a:	2700      	movs	r7, #0
		switch (evt) {
   14f1c:	1e4d      	subs	r5, r1, #1
		if (frnd->subnet != sub) {
   14f1e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   14f20:	4598      	cmp	r8, r3
   14f22:	d122      	bne.n	14f6a <subnet_evt+0x5e>
   14f24:	f104 0620 	add.w	r6, r4, #32
		switch (evt) {
   14f28:	2d03      	cmp	r5, #3
   14f2a:	d81e      	bhi.n	14f6a <subnet_evt+0x5e>
   14f2c:	e8df f005 	tbb	[pc, r5]
   14f30:	2336041a 	.word	0x2336041a
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
   14f34:	2701      	movs	r7, #1
   14f36:	e7f2      	b.n	14f1e <subnet_evt+0x12>
	return bt_mesh_friend_cred_create(&frnd->cred[idx], frnd->lpn,
   14f38:	f8b4 a020 	ldrh.w	sl, [r4, #32]
   14f3c:	f7fd f840 	bl	11fc0 <bt_mesh_primary_addr>
					  frnd->subnet->keys[idx].net);
   14f40:	6b23      	ldr	r3, [r4, #48]	; 0x30
   14f42:	3387      	adds	r3, #135	; 0x87
	return bt_mesh_friend_cred_create(&frnd->cred[idx], frnd->lpn,
   14f44:	9301      	str	r3, [sp, #4]
   14f46:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   14f48:	9300      	str	r3, [sp, #0]
   14f4a:	4602      	mov	r2, r0
   14f4c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   14f4e:	4651      	mov	r1, sl
   14f50:	f104 0055 	add.w	r0, r4, #85	; 0x55
   14f54:	f015 faf9 	bl	2a54a <bt_mesh_friend_cred_create>
			if (err) {
   14f58:	b138      	cbz	r0, 14f6a <subnet_evt+0x5e>
				BT_ERR("Failed updating friend cred for 0x%04x",
   14f5a:	8c22      	ldrh	r2, [r4, #32]
   14f5c:	2145      	movs	r1, #69	; 0x45
   14f5e:	4648      	mov	r0, r9
   14f60:	f012 f805 	bl	26f6e <printk>
				friend_clear(frnd);
   14f64:	4630      	mov	r0, r6
   14f66:	f7ff fd6d 	bl	14a44 <friend_clear>
   14f6a:	34e8      	adds	r4, #232	; 0xe8
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
   14f6c:	2f00      	cmp	r7, #0
   14f6e:	d0e1      	beq.n	14f34 <subnet_evt+0x28>
}
   14f70:	b002      	add	sp, #8
   14f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			memcpy(&frnd->cred[0], &frnd->cred[1],
   14f76:	f104 0055 	add.w	r0, r4, #85	; 0x55
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   14f7a:	4603      	mov	r3, r0
   14f7c:	f104 0234 	add.w	r2, r4, #52	; 0x34
   14f80:	f104 0175 	add.w	r1, r4, #117	; 0x75
   14f84:	f853 cb04 	ldr.w	ip, [r3], #4
   14f88:	f842 cb04 	str.w	ip, [r2], #4
   14f8c:	428b      	cmp	r3, r1
   14f8e:	d1f9      	bne.n	14f84 <subnet_evt+0x78>
   14f90:	781b      	ldrb	r3, [r3, #0]
   14f92:	7013      	strb	r3, [r2, #0]
__ssp_bos_icheck3(memset, void *, int)
   14f94:	2100      	movs	r1, #0
   14f96:	2221      	movs	r2, #33	; 0x21
   14f98:	f018 fb2f 	bl	2d5fa <memset>
			enqueue_update(frnd, 0);
   14f9c:	4630      	mov	r0, r6
   14f9e:	f7ff ff6b 	bl	14e78 <enqueue_update.constprop.23>
			break;
   14fa2:	e7e2      	b.n	14f6a <subnet_evt+0x5e>
   14fa4:	20001dd8 	.word	0x20001dd8
   14fa8:	0003405e 	.word	0x0003405e

00014fac <bt_mesh_friend_find.part.21>:
struct bt_mesh_friend *bt_mesh_friend_find(uint16_t net_idx, uint16_t lpn_addr,
   14fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14fb0:	4d16      	ldr	r5, [pc, #88]	; (1500c <bt_mesh_friend_find.part.21+0x60>)
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
   14fb2:	2400      	movs	r4, #0
   14fb4:	46ac      	mov	ip, r5
		if (net_idx != BT_MESH_KEY_ANY &&
   14fb6:	f64f 7eff 	movw	lr, #65535	; 0xffff
		if (established && !frnd->established) {
   14fba:	f04f 08e8 	mov.w	r8, #232	; 0xe8
		if (valid && !frnd->subnet) {
   14fbe:	b10a      	cbz	r2, 14fc4 <bt_mesh_friend_find.part.21+0x18>
   14fc0:	6b2e      	ldr	r6, [r5, #48]	; 0x30
   14fc2:	b1b6      	cbz	r6, 14ff2 <bt_mesh_friend_find.part.21+0x46>
		if (established && !frnd->established) {
   14fc4:	b12b      	cbz	r3, 14fd2 <bt_mesh_friend_find.part.21+0x26>
   14fc6:	fb08 c604 	mla	r6, r8, r4, ip
   14fca:	f896 6023 	ldrb.w	r6, [r6, #35]	; 0x23
   14fce:	06f6      	lsls	r6, r6, #27
   14fd0:	d50f      	bpl.n	14ff2 <bt_mesh_friend_find.part.21+0x46>
		if (net_idx != BT_MESH_KEY_ANY &&
   14fd2:	4570      	cmp	r0, lr
   14fd4:	d004      	beq.n	14fe0 <bt_mesh_friend_find.part.21+0x34>
		    (!frnd->subnet || frnd->subnet->net_idx != net_idx)) {
   14fd6:	6b2e      	ldr	r6, [r5, #48]	; 0x30
		if (net_idx != BT_MESH_KEY_ANY &&
   14fd8:	b15e      	cbz	r6, 14ff2 <bt_mesh_friend_find.part.21+0x46>
		    (!frnd->subnet || frnd->subnet->net_idx != net_idx)) {
   14fda:	8bb6      	ldrh	r6, [r6, #28]
   14fdc:	4286      	cmp	r6, r0
   14fde:	d108      	bne.n	14ff2 <bt_mesh_friend_find.part.21+0x46>
	if (frnd->lpn == BT_MESH_ADDR_UNASSIGNED) {
   14fe0:	8c2f      	ldrh	r7, [r5, #32]
   14fe2:	b137      	cbz	r7, 14ff2 <bt_mesh_friend_find.part.21+0x46>
	return (addr >= frnd->lpn && addr < (frnd->lpn + frnd->num_elem));
   14fe4:	42b9      	cmp	r1, r7
   14fe6:	d304      	bcc.n	14ff2 <bt_mesh_friend_find.part.21+0x46>
   14fe8:	f895 6028 	ldrb.w	r6, [r5, #40]	; 0x28
   14fec:	443e      	add	r6, r7
   14fee:	42b1      	cmp	r1, r6
   14ff0:	db06      	blt.n	15000 <bt_mesh_friend_find.part.21+0x54>
   14ff2:	35e8      	adds	r5, #232	; 0xe8
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
   14ff4:	b114      	cbz	r4, 14ffc <bt_mesh_friend_find.part.21+0x50>
	return NULL;
   14ff6:	2000      	movs	r0, #0
}
   14ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
   14ffc:	2401      	movs	r4, #1
   14ffe:	e7de      	b.n	14fbe <bt_mesh_friend_find.part.21+0x12>
		struct bt_mesh_friend *frnd = &bt_mesh.frnd[i];
   15000:	20e8      	movs	r0, #232	; 0xe8
   15002:	fb00 c004 	mla	r0, r0, r4, ip
   15006:	3020      	adds	r0, #32
   15008:	e7f6      	b.n	14ff8 <bt_mesh_friend_find.part.21+0x4c>
   1500a:	bf00      	nop
   1500c:	20001dd8 	.word	0x20001dd8

00015010 <bt_mesh_friends_clear>:
{
   15010:	b510      	push	{r4, lr}
		if (!frnd->subnet) {
   15012:	4c08      	ldr	r4, [pc, #32]	; (15034 <bt_mesh_friends_clear+0x24>)
   15014:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15016:	b11b      	cbz	r3, 15020 <bt_mesh_friends_clear+0x10>
		friend_clear(frnd);
   15018:	f104 0020 	add.w	r0, r4, #32
   1501c:	f7ff fd12 	bl	14a44 <friend_clear>
		if (!frnd->subnet) {
   15020:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
   15024:	b123      	cbz	r3, 15030 <bt_mesh_friends_clear+0x20>
		friend_clear(frnd);
   15026:	4804      	ldr	r0, [pc, #16]	; (15038 <bt_mesh_friends_clear+0x28>)
}
   15028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		friend_clear(frnd);
   1502c:	f7ff bd0a 	b.w	14a44 <friend_clear>
}
   15030:	bd10      	pop	{r4, pc}
   15032:	bf00      	nop
   15034:	20001dd8 	.word	0x20001dd8
   15038:	20001ee0 	.word	0x20001ee0

0001503c <bt_mesh_friend_sec_update>:
{
   1503c:	b538      	push	{r3, r4, r5, lr}
		if (!frnd->subnet) {
   1503e:	4d0f      	ldr	r5, [pc, #60]	; (1507c <bt_mesh_friend_sec_update+0x40>)
   15040:	6b2a      	ldr	r2, [r5, #48]	; 0x30
{
   15042:	4604      	mov	r4, r0
		if (!frnd->subnet) {
   15044:	b132      	cbz	r2, 15054 <bt_mesh_friend_sec_update+0x18>
		if (net_idx == BT_MESH_KEY_ANY ||
   15046:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1504a:	4298      	cmp	r0, r3
   1504c:	d10e      	bne.n	1506c <bt_mesh_friend_sec_update+0x30>
			enqueue_update(frnd, 0x00);
   1504e:	480c      	ldr	r0, [pc, #48]	; (15080 <bt_mesh_friend_sec_update+0x44>)
   15050:	f7ff ff12 	bl	14e78 <enqueue_update.constprop.23>
		if (!frnd->subnet) {
   15054:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   15058:	b17b      	cbz	r3, 1507a <bt_mesh_friend_sec_update+0x3e>
		if (net_idx == BT_MESH_KEY_ANY ||
   1505a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1505e:	4294      	cmp	r4, r2
   15060:	d108      	bne.n	15074 <bt_mesh_friend_sec_update+0x38>
			enqueue_update(frnd, 0x00);
   15062:	4808      	ldr	r0, [pc, #32]	; (15084 <bt_mesh_friend_sec_update+0x48>)
}
   15064:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			enqueue_update(frnd, 0x00);
   15068:	f7ff bf06 	b.w	14e78 <enqueue_update.constprop.23>
		if (net_idx == BT_MESH_KEY_ANY ||
   1506c:	8b93      	ldrh	r3, [r2, #28]
   1506e:	4283      	cmp	r3, r0
   15070:	d1f0      	bne.n	15054 <bt_mesh_friend_sec_update+0x18>
   15072:	e7ec      	b.n	1504e <bt_mesh_friend_sec_update+0x12>
   15074:	8b9b      	ldrh	r3, [r3, #28]
   15076:	42a3      	cmp	r3, r4
   15078:	d0f3      	beq.n	15062 <bt_mesh_friend_sec_update+0x26>
}
   1507a:	bd38      	pop	{r3, r4, r5, pc}
   1507c:	20001dd8 	.word	0x20001dd8
   15080:	20001df8 	.word	0x20001df8
   15084:	20001ee0 	.word	0x20001ee0

00015088 <bt_mesh_friend_clear>:
{
   15088:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_mesh_net_tx tx = {
   1508c:	4603      	mov	r3, r0
{
   1508e:	b087      	sub	sp, #28
	struct bt_mesh_net_tx tx = {
   15090:	f853 2b04 	ldr.w	r2, [r3], #4
	struct bt_mesh_ctl_friend_clear *msg = (void *)buf->data;
   15094:	680d      	ldr	r5, [r1, #0]
	struct bt_mesh_net_tx tx = {
   15096:	2400      	movs	r4, #0
{
   15098:	460e      	mov	r6, r1
	struct bt_mesh_net_tx tx = {
   1509a:	e9cd 2303 	strd	r2, r3, [sp, #12]
{
   1509e:	4607      	mov	r7, r0
	struct bt_mesh_net_tx tx = {
   150a0:	9405      	str	r4, [sp, #20]
		.src  = bt_mesh_primary_addr(),
   150a2:	f7fc ff8d 	bl	11fc0 <bt_mesh_primary_addr>
	struct bt_mesh_net_tx tx = {
   150a6:	f8ad 0014 	strh.w	r0, [sp, #20]
		.xmit = bt_mesh_net_transmit_get(),
   150aa:	f7f8 fc7d 	bl	d9a8 <bt_mesh_net_transmit_get>
	if (buf->len < sizeof(*msg)) {
   150ae:	88b3      	ldrh	r3, [r6, #4]
	struct bt_mesh_net_tx tx = {
   150b0:	f88d 0016 	strb.w	r0, [sp, #22]
	if (buf->len < sizeof(*msg)) {
   150b4:	2b03      	cmp	r3, #3
   150b6:	d808      	bhi.n	150ca <bt_mesh_friend_clear+0x42>
		BT_WARN("Too short Friend Clear");
   150b8:	4822      	ldr	r0, [pc, #136]	; (15144 <bt_mesh_friend_clear+0xbc>)
   150ba:	2157      	movs	r1, #87	; 0x57
   150bc:	f011 ff57 	bl	26f6e <printk>
		return -EINVAL;
   150c0:	f06f 0015 	mvn.w	r0, #21
}
   150c4:	b007      	add	sp, #28
   150c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	lpn_addr = sys_be16_to_cpu(msg->lpn_addr);
   150ca:	f8b5 9000 	ldrh.w	r9, [r5]
	frnd = bt_mesh_friend_find(rx->sub->net_idx, lpn_addr, false, false);
   150ce:	6838      	ldr	r0, [r7, #0]
	lpn_counter = sys_be16_to_cpu(msg->lpn_counter);
   150d0:	f8b5 8002 	ldrh.w	r8, [r5, #2]
   150d4:	8b80      	ldrh	r0, [r0, #28]
	lpn_addr = sys_be16_to_cpu(msg->lpn_addr);
   150d6:	ea4f 2609 	mov.w	r6, r9, lsl #8
   150da:	ea46 2619 	orr.w	r6, r6, r9, lsr #8
   150de:	b2b6      	uxth	r6, r6
	lpn_counter = sys_be16_to_cpu(msg->lpn_counter);
   150e0:	4623      	mov	r3, r4
   150e2:	4622      	mov	r2, r4
   150e4:	4631      	mov	r1, r6
   150e6:	f7ff ff61 	bl	14fac <bt_mesh_friend_find.part.21>
   150ea:	ea4f 2508 	mov.w	r5, r8, lsl #8
   150ee:	ea45 2518 	orr.w	r5, r5, r8, lsr #8
   150f2:	b2ad      	uxth	r5, r5
	if (!frnd) {
   150f4:	4607      	mov	r7, r0
   150f6:	b930      	cbnz	r0, 15106 <bt_mesh_friend_clear+0x7e>
		BT_WARN("No matching LPN addr 0x%04x", lpn_addr);
   150f8:	4813      	ldr	r0, [pc, #76]	; (15148 <bt_mesh_friend_clear+0xc0>)
   150fa:	4632      	mov	r2, r6
   150fc:	2157      	movs	r1, #87	; 0x57
   150fe:	f011 ff36 	bl	26f6e <printk>
		return 0;
   15102:	4638      	mov	r0, r7
   15104:	e7de      	b.n	150c4 <bt_mesh_friend_clear+0x3c>
	if (lpn_counter - frnd->lpn_counter > 255) {
   15106:	8942      	ldrh	r2, [r0, #10]
   15108:	1aab      	subs	r3, r5, r2
   1510a:	2bff      	cmp	r3, #255	; 0xff
   1510c:	dd06      	ble.n	1511c <bt_mesh_friend_clear+0x94>
		BT_WARN("LPN Counter out of range (old %u new %u)",
   1510e:	462b      	mov	r3, r5
   15110:	2157      	movs	r1, #87	; 0x57
   15112:	480e      	ldr	r0, [pc, #56]	; (1514c <bt_mesh_friend_clear+0xc4>)
   15114:	f011 ff2b 	bl	26f6e <printk>
	return 0;
   15118:	4620      	mov	r0, r4
   1511a:	e7d3      	b.n	150c4 <bt_mesh_friend_clear+0x3c>
	tx.ctx->send_ttl = BT_MESH_TTL_MAX;
   1511c:	9b04      	ldr	r3, [sp, #16]
	cfm.lpn_addr    = msg->lpn_addr;
   1511e:	f8ad 9008 	strh.w	r9, [sp, #8]
	tx.ctx->send_ttl = BT_MESH_TTL_MAX;
   15122:	227f      	movs	r2, #127	; 0x7f
   15124:	72da      	strb	r2, [r3, #11]
	bt_mesh_ctl_send(&tx, TRANS_CTL_OP_FRIEND_CLEAR_CFM, &cfm,
   15126:	2106      	movs	r1, #6
   15128:	e9cd 4400 	strd	r4, r4, [sp]
   1512c:	2304      	movs	r3, #4
   1512e:	aa02      	add	r2, sp, #8
   15130:	a803      	add	r0, sp, #12
	cfm.lpn_counter = msg->lpn_counter;
   15132:	f8ad 800a 	strh.w	r8, [sp, #10]
	bt_mesh_ctl_send(&tx, TRANS_CTL_OP_FRIEND_CLEAR_CFM, &cfm,
   15136:	f7fb f959 	bl	103ec <bt_mesh_ctl_send>
	friend_clear(frnd);
   1513a:	4638      	mov	r0, r7
   1513c:	f7ff fc82 	bl	14a44 <friend_clear>
   15140:	e7ea      	b.n	15118 <bt_mesh_friend_clear+0x90>
   15142:	bf00      	nop
   15144:	00033a44 	.word	0x00033a44
   15148:	00033a60 	.word	0x00033a60
   1514c:	00033a81 	.word	0x00033a81

00015150 <bt_mesh_friend_sub_add>:
{
   15150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < BT_MESH_FRIEND_SUB_MIN_LEN) {
   15152:	888b      	ldrh	r3, [r1, #4]
   15154:	2b02      	cmp	r3, #2
{
   15156:	460d      	mov	r5, r1
	if (buf->len < BT_MESH_FRIEND_SUB_MIN_LEN) {
   15158:	d806      	bhi.n	15168 <bt_mesh_friend_sub_add+0x18>
		BT_WARN("Too short Friend Subscription Add");
   1515a:	4824      	ldr	r0, [pc, #144]	; (151ec <bt_mesh_friend_sub_add+0x9c>)
   1515c:	2157      	movs	r1, #87	; 0x57
   1515e:	f011 ff06 	bl	26f6e <printk>
		return -EINVAL;
   15162:	f06f 0015 	mvn.w	r0, #21
}
   15166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	frnd = bt_mesh_friend_find(rx->sub->net_idx, rx->ctx.addr, true, true);
   15168:	8906      	ldrh	r6, [r0, #8]
   1516a:	6800      	ldr	r0, [r0, #0]
   1516c:	2301      	movs	r3, #1
   1516e:	461a      	mov	r2, r3
   15170:	4631      	mov	r1, r6
   15172:	8b80      	ldrh	r0, [r0, #28]
   15174:	f7ff ff1a 	bl	14fac <bt_mesh_friend_find.part.21>
	if (!frnd) {
   15178:	4604      	mov	r4, r0
   1517a:	b930      	cbnz	r0, 1518a <bt_mesh_friend_sub_add+0x3a>
		BT_WARN("No matching LPN addr 0x%04x", rx->ctx.addr);
   1517c:	4632      	mov	r2, r6
   1517e:	2157      	movs	r1, #87	; 0x57
   15180:	481b      	ldr	r0, [pc, #108]	; (151f0 <bt_mesh_friend_sub_add+0xa0>)
   15182:	f011 fef4 	bl	26f6e <printk>
	return 0;
   15186:	2000      	movs	r0, #0
   15188:	e7ed      	b.n	15166 <bt_mesh_friend_sub_add+0x16>
	if (frnd->pending_buf) {
   1518a:	78c3      	ldrb	r3, [r0, #3]
   1518c:	071b      	lsls	r3, r3, #28
   1518e:	d504      	bpl.n	1519a <bt_mesh_friend_sub_add+0x4a>
		BT_WARN("Previous buffer not yet sent!");
   15190:	2157      	movs	r1, #87	; 0x57
   15192:	4818      	ldr	r0, [pc, #96]	; (151f4 <bt_mesh_friend_sub_add+0xa4>)
   15194:	f011 feeb 	bl	26f6e <printk>
		return 0;
   15198:	e7f5      	b.n	15186 <bt_mesh_friend_sub_add+0x36>
	friend_recv_delay(frnd);
   1519a:	f016 f819 	bl	2b1d0 <friend_recv_delay>
	xact = net_buf_simple_pull_u8(buf);
   1519e:	4628      	mov	r0, r5
   151a0:	f017 fbd9 	bl	2c956 <net_buf_simple_pull_u8>
	BT_WARN("No space in friend subscription list");
   151a4:	4f14      	ldr	r7, [pc, #80]	; (151f8 <bt_mesh_friend_sub_add+0xa8>)
	xact = net_buf_simple_pull_u8(buf);
   151a6:	4606      	mov	r6, r0
	while (buf->len >= 2U) {
   151a8:	88ab      	ldrh	r3, [r5, #4]
   151aa:	2b01      	cmp	r3, #1
   151ac:	d804      	bhi.n	151b8 <bt_mesh_friend_sub_add+0x68>
	enqueue_sub_cfm(frnd, xact);
   151ae:	4631      	mov	r1, r6
   151b0:	4620      	mov	r0, r4
   151b2:	f7ff fd95 	bl	14ce0 <enqueue_sub_cfm>
   151b6:	e7e6      	b.n	15186 <bt_mesh_friend_sub_add+0x36>
		friend_sub_add(frnd, net_buf_simple_pull_be16(buf));
   151b8:	4628      	mov	r0, r5
   151ba:	f017 fbdc 	bl	2c976 <net_buf_simple_pull_be16>
		if (frnd->sub_list[i] == BT_MESH_ADDR_UNASSIGNED) {
   151be:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
   151c2:	b133      	cbz	r3, 151d2 <bt_mesh_friend_sub_add+0x82>
   151c4:	f8b4 3058 	ldrh.w	r3, [r4, #88]	; 0x58
   151c8:	b143      	cbz	r3, 151dc <bt_mesh_friend_sub_add+0x8c>
   151ca:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
   151ce:	b93b      	cbnz	r3, 151e0 <bt_mesh_friend_sub_add+0x90>
	for (i = 0; i < ARRAY_SIZE(frnd->sub_list); i++) {
   151d0:	2302      	movs	r3, #2
			frnd->sub_list[i] = addr;
   151d2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
   151d6:	f8a3 0056 	strh.w	r0, [r3, #86]	; 0x56
			return;
   151da:	e7e5      	b.n	151a8 <bt_mesh_friend_sub_add+0x58>
	for (i = 0; i < ARRAY_SIZE(frnd->sub_list); i++) {
   151dc:	2301      	movs	r3, #1
   151de:	e7f8      	b.n	151d2 <bt_mesh_friend_sub_add+0x82>
	BT_WARN("No space in friend subscription list");
   151e0:	2157      	movs	r1, #87	; 0x57
   151e2:	4638      	mov	r0, r7
   151e4:	f011 fec3 	bl	26f6e <printk>
   151e8:	e7de      	b.n	151a8 <bt_mesh_friend_sub_add+0x58>
   151ea:	bf00      	nop
   151ec:	00033ddd 	.word	0x00033ddd
   151f0:	00033a60 	.word	0x00033a60
   151f4:	00033e04 	.word	0x00033e04
   151f8:	00033e27 	.word	0x00033e27

000151fc <bt_mesh_friend_sub_rem>:
{
   151fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < BT_MESH_FRIEND_SUB_MIN_LEN) {
   151fe:	888b      	ldrh	r3, [r1, #4]
   15200:	2b02      	cmp	r3, #2
{
   15202:	460e      	mov	r6, r1
	if (buf->len < BT_MESH_FRIEND_SUB_MIN_LEN) {
   15204:	d806      	bhi.n	15214 <bt_mesh_friend_sub_rem+0x18>
		BT_WARN("Too short Friend Subscription Remove");
   15206:	4824      	ldr	r0, [pc, #144]	; (15298 <bt_mesh_friend_sub_rem+0x9c>)
   15208:	2157      	movs	r1, #87	; 0x57
   1520a:	f011 feb0 	bl	26f6e <printk>
		return -EINVAL;
   1520e:	f06f 0015 	mvn.w	r0, #21
}
   15212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	frnd = bt_mesh_friend_find(rx->sub->net_idx, rx->ctx.addr, true, true);
   15214:	8905      	ldrh	r5, [r0, #8]
   15216:	6800      	ldr	r0, [r0, #0]
   15218:	2301      	movs	r3, #1
   1521a:	461a      	mov	r2, r3
   1521c:	4629      	mov	r1, r5
   1521e:	8b80      	ldrh	r0, [r0, #28]
   15220:	f7ff fec4 	bl	14fac <bt_mesh_friend_find.part.21>
	if (!frnd) {
   15224:	4604      	mov	r4, r0
   15226:	b930      	cbnz	r0, 15236 <bt_mesh_friend_sub_rem+0x3a>
		BT_WARN("No matching LPN addr 0x%04x", rx->ctx.addr);
   15228:	462a      	mov	r2, r5
   1522a:	2157      	movs	r1, #87	; 0x57
   1522c:	481b      	ldr	r0, [pc, #108]	; (1529c <bt_mesh_friend_sub_rem+0xa0>)
   1522e:	f011 fe9e 	bl	26f6e <printk>
	return 0;
   15232:	2000      	movs	r0, #0
   15234:	e7ed      	b.n	15212 <bt_mesh_friend_sub_rem+0x16>
	if (frnd->pending_buf) {
   15236:	78c3      	ldrb	r3, [r0, #3]
   15238:	f013 0508 	ands.w	r5, r3, #8
   1523c:	d004      	beq.n	15248 <bt_mesh_friend_sub_rem+0x4c>
		BT_WARN("Previous buffer not yet sent!");
   1523e:	2157      	movs	r1, #87	; 0x57
   15240:	4817      	ldr	r0, [pc, #92]	; (152a0 <bt_mesh_friend_sub_rem+0xa4>)
   15242:	f011 fe94 	bl	26f6e <printk>
		return 0;
   15246:	e7f4      	b.n	15232 <bt_mesh_friend_sub_rem+0x36>
	friend_recv_delay(frnd);
   15248:	f015 ffc2 	bl	2b1d0 <friend_recv_delay>
	xact = net_buf_simple_pull_u8(buf);
   1524c:	4630      	mov	r0, r6
   1524e:	f017 fb82 	bl	2c956 <net_buf_simple_pull_u8>
   15252:	4607      	mov	r7, r0
	while (buf->len >= 2U) {
   15254:	88b3      	ldrh	r3, [r6, #4]
   15256:	2b01      	cmp	r3, #1
   15258:	d804      	bhi.n	15264 <bt_mesh_friend_sub_rem+0x68>
	enqueue_sub_cfm(frnd, xact);
   1525a:	4639      	mov	r1, r7
   1525c:	4620      	mov	r0, r4
   1525e:	f7ff fd3f 	bl	14ce0 <enqueue_sub_cfm>
   15262:	e7e6      	b.n	15232 <bt_mesh_friend_sub_rem+0x36>
		friend_sub_rem(frnd, net_buf_simple_pull_be16(buf));
   15264:	4630      	mov	r0, r6
   15266:	f017 fb86 	bl	2c976 <net_buf_simple_pull_be16>
		if (frnd->sub_list[i] == addr) {
   1526a:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
   1526e:	4283      	cmp	r3, r0
   15270:	d00d      	beq.n	1528e <bt_mesh_friend_sub_rem+0x92>
   15272:	f8b4 3058 	ldrh.w	r3, [r4, #88]	; 0x58
   15276:	4283      	cmp	r3, r0
   15278:	d00b      	beq.n	15292 <bt_mesh_friend_sub_rem+0x96>
   1527a:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
   1527e:	4283      	cmp	r3, r0
   15280:	d1e8      	bne.n	15254 <bt_mesh_friend_sub_rem+0x58>
	for (i = 0; i < ARRAY_SIZE(frnd->sub_list); i++) {
   15282:	2302      	movs	r3, #2
			frnd->sub_list[i] = BT_MESH_ADDR_UNASSIGNED;
   15284:	eb04 0343 	add.w	r3, r4, r3, lsl #1
   15288:	f8a3 5056 	strh.w	r5, [r3, #86]	; 0x56
			return;
   1528c:	e7e2      	b.n	15254 <bt_mesh_friend_sub_rem+0x58>
	for (i = 0; i < ARRAY_SIZE(frnd->sub_list); i++) {
   1528e:	2300      	movs	r3, #0
   15290:	e7f8      	b.n	15284 <bt_mesh_friend_sub_rem+0x88>
   15292:	2301      	movs	r3, #1
   15294:	e7f6      	b.n	15284 <bt_mesh_friend_sub_rem+0x88>
   15296:	bf00      	nop
   15298:	00033e51 	.word	0x00033e51
   1529c:	00033a60 	.word	0x00033a60
   152a0:	00033e04 	.word	0x00033e04

000152a4 <bt_mesh_friend_poll>:
{
   152a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (buf->len < sizeof(*msg)) {
   152a8:	888b      	ldrh	r3, [r1, #4]
	struct bt_mesh_ctl_friend_poll *msg = (void *)buf->data;
   152aa:	680f      	ldr	r7, [r1, #0]
	if (buf->len < sizeof(*msg)) {
   152ac:	b933      	cbnz	r3, 152bc <bt_mesh_friend_poll+0x18>
		BT_WARN("Too short Friend Poll");
   152ae:	4839      	ldr	r0, [pc, #228]	; (15394 <bt_mesh_friend_poll+0xf0>)
   152b0:	2157      	movs	r1, #87	; 0x57
		BT_WARN("Prohibited (non-zero) padding bits");
   152b2:	f011 fe5c 	bl	26f6e <printk>
		return -EINVAL;
   152b6:	f06f 0515 	mvn.w	r5, #21
   152ba:	e00f      	b.n	152dc <bt_mesh_friend_poll+0x38>
	frnd = bt_mesh_friend_find(rx->sub->net_idx, rx->ctx.addr, true, false);
   152bc:	8905      	ldrh	r5, [r0, #8]
   152be:	6800      	ldr	r0, [r0, #0]
   152c0:	2300      	movs	r3, #0
   152c2:	2201      	movs	r2, #1
   152c4:	4629      	mov	r1, r5
   152c6:	8b80      	ldrh	r0, [r0, #28]
   152c8:	f7ff fe70 	bl	14fac <bt_mesh_friend_find.part.21>
	if (!frnd) {
   152cc:	4604      	mov	r4, r0
   152ce:	b940      	cbnz	r0, 152e2 <bt_mesh_friend_poll+0x3e>
		BT_WARN("No matching LPN addr 0x%04x", rx->ctx.addr);
   152d0:	462a      	mov	r2, r5
   152d2:	2157      	movs	r1, #87	; 0x57
   152d4:	4830      	ldr	r0, [pc, #192]	; (15398 <bt_mesh_friend_poll+0xf4>)
   152d6:	f011 fe4a 	bl	26f6e <printk>
		return 0;
   152da:	4625      	mov	r5, r4
}
   152dc:	4628      	mov	r0, r5
   152de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (msg->fsn & ~1) {
   152e2:	783d      	ldrb	r5, [r7, #0]
   152e4:	f035 0501 	bics.w	r5, r5, #1
   152e8:	d002      	beq.n	152f0 <bt_mesh_friend_poll+0x4c>
		BT_WARN("Prohibited (non-zero) padding bits");
   152ea:	2157      	movs	r1, #87	; 0x57
   152ec:	482b      	ldr	r0, [pc, #172]	; (1539c <bt_mesh_friend_poll+0xf8>)
   152ee:	e7e0      	b.n	152b2 <bt_mesh_friend_poll+0xe>
	if (frnd->pending_buf) {
   152f0:	78c3      	ldrb	r3, [r0, #3]
   152f2:	0719      	lsls	r1, r3, #28
   152f4:	d504      	bpl.n	15300 <bt_mesh_friend_poll+0x5c>
		BT_WARN("Previous buffer not yet sent");
   152f6:	2157      	movs	r1, #87	; 0x57
   152f8:	4829      	ldr	r0, [pc, #164]	; (153a0 <bt_mesh_friend_poll+0xfc>)
   152fa:	f011 fe38 	bl	26f6e <printk>
		return 0;
   152fe:	e7ed      	b.n	152dc <bt_mesh_friend_poll+0x38>
	friend_recv_delay(frnd);
   15300:	f015 ff66 	bl	2b1d0 <friend_recv_delay>
	if (!frnd->established) {
   15304:	78e3      	ldrb	r3, [r4, #3]
   15306:	06da      	lsls	r2, r3, #27
   15308:	d50c      	bpl.n	15324 <bt_mesh_friend_poll+0x80>
	if (msg->fsn == frnd->fsn && frnd->last) {
   1530a:	78e3      	ldrb	r3, [r4, #3]
   1530c:	7839      	ldrb	r1, [r7, #0]
   1530e:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   15312:	f003 0201 	and.w	r2, r3, #1
   15316:	4291      	cmp	r1, r2
   15318:	d129      	bne.n	1536e <bt_mesh_friend_poll+0xca>
   1531a:	b370      	cbz	r0, 1537a <bt_mesh_friend_poll+0xd6>
		frnd->send_last = 1U;
   1531c:	f043 0302 	orr.w	r3, r3, #2
   15320:	70e3      	strb	r3, [r4, #3]
   15322:	e7db      	b.n	152dc <bt_mesh_friend_poll+0x38>
		Z_STRUCT_SECTION_FOREACH(bt_mesh_friend_cb, cb) {
   15324:	f8df 8084 	ldr.w	r8, [pc, #132]	; 153ac <bt_mesh_friend_poll+0x108>
   15328:	4e1e      	ldr	r6, [pc, #120]	; (153a4 <bt_mesh_friend_poll+0x100>)
   1532a:	f8df 9084 	ldr.w	r9, [pc, #132]	; 153b0 <bt_mesh_friend_poll+0x10c>
		frnd->established = 1U;
   1532e:	f043 0310 	orr.w	r3, r3, #16
   15332:	70e3      	strb	r3, [r4, #3]
		Z_STRUCT_SECTION_FOREACH(bt_mesh_friend_cb, cb) {
   15334:	46c3      	mov	fp, r8
   15336:	4546      	cmp	r6, r8
   15338:	d90a      	bls.n	15350 <bt_mesh_friend_poll+0xac>
   1533a:	4649      	mov	r1, r9
   1533c:	481a      	ldr	r0, [pc, #104]	; (153a8 <bt_mesh_friend_poll+0x104>)
   1533e:	f44f 7232 	mov.w	r2, #712	; 0x2c8
   15342:	f011 fe14 	bl	26f6e <printk>
   15346:	f44f 7132 	mov.w	r1, #712	; 0x2c8
   1534a:	4648      	mov	r0, r9
   1534c:	f012 f888 	bl	27460 <assert_post_action>
   15350:	455e      	cmp	r6, fp
   15352:	d2da      	bcs.n	1530a <bt_mesh_friend_poll+0x66>
			if (cb->established) {
   15354:	f8d6 a000 	ldr.w	sl, [r6]
   15358:	f1ba 0f00 	cmp.w	sl, #0
   1535c:	d005      	beq.n	1536a <bt_mesh_friend_poll+0xc6>
				cb->established(frnd->subnet->net_idx, frnd->lpn, frnd->recv_delay,
   1535e:	6920      	ldr	r0, [r4, #16]
   15360:	6863      	ldr	r3, [r4, #4]
   15362:	78a2      	ldrb	r2, [r4, #2]
   15364:	8821      	ldrh	r1, [r4, #0]
   15366:	8b80      	ldrh	r0, [r0, #28]
   15368:	47d0      	blx	sl
		Z_STRUCT_SECTION_FOREACH(bt_mesh_friend_cb, cb) {
   1536a:	3608      	adds	r6, #8
   1536c:	e7e3      	b.n	15336 <bt_mesh_friend_poll+0x92>
		if (frnd->last) {
   1536e:	b120      	cbz	r0, 1537a <bt_mesh_friend_poll+0xd6>
			net_buf_unref(frnd->last);
   15370:	f009 fdf0 	bl	1ef54 <net_buf_unref>
			frnd->last = NULL;
   15374:	2300      	movs	r3, #0
   15376:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
		frnd->fsn = msg->fsn;
   1537a:	78e3      	ldrb	r3, [r4, #3]
   1537c:	783a      	ldrb	r2, [r7, #0]
   1537e:	f362 0300 	bfi	r3, r2, #0, #1
   15382:	70e3      	strb	r3, [r4, #3]
		if (sys_slist_is_empty(&frnd->queue)) {
   15384:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   15388:	2b00      	cmp	r3, #0
   1538a:	d1a7      	bne.n	152dc <bt_mesh_friend_poll+0x38>
			enqueue_update(frnd, 0);
   1538c:	4620      	mov	r0, r4
   1538e:	f7ff fd73 	bl	14e78 <enqueue_update.constprop.23>
			BT_DBG("Enqueued Friend Update to empty queue");
   15392:	e7a3      	b.n	152dc <bt_mesh_friend_poll+0x38>
   15394:	00033ba9 	.word	0x00033ba9
   15398:	00033a60 	.word	0x00033a60
   1539c:	00033bc4 	.word	0x00033bc4
   153a0:	00033bec 	.word	0x00033bec
   153a4:	0002e338 	.word	0x0002e338
   153a8:	0002fa94 	.word	0x0002fa94
   153ac:	0002e338 	.word	0x0002e338
   153b0:	00033faa 	.word	0x00033faa

000153b4 <bt_mesh_friend_clear_cfm>:
{
   153b4:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*msg)) {
   153b6:	888b      	ldrh	r3, [r1, #4]
	struct bt_mesh_ctl_friend_clear_confirm *msg = (void *)buf->data;
   153b8:	680d      	ldr	r5, [r1, #0]
	if (buf->len < sizeof(*msg)) {
   153ba:	2b03      	cmp	r3, #3
   153bc:	d806      	bhi.n	153cc <bt_mesh_friend_clear_cfm+0x18>
		BT_WARN("Too short Friend Clear Confirm");
   153be:	481d      	ldr	r0, [pc, #116]	; (15434 <bt_mesh_friend_clear_cfm+0x80>)
   153c0:	2157      	movs	r1, #87	; 0x57
   153c2:	f011 fdd4 	bl	26f6e <printk>
		return -EINVAL;
   153c6:	f06f 0015 	mvn.w	r0, #21
}
   153ca:	bd38      	pop	{r3, r4, r5, pc}
		if (frnd->clear.frnd == prev_friend) {
   153cc:	4c1a      	ldr	r4, [pc, #104]	; (15438 <bt_mesh_friend_clear_cfm+0x84>)
	frnd = find_clear(rx->ctx.addr);
   153ce:	8902      	ldrh	r2, [r0, #8]
		if (frnd->clear.frnd == prev_friend) {
   153d0:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	; 0xd4
   153d4:	4293      	cmp	r3, r2
   153d6:	d01c      	beq.n	15412 <bt_mesh_friend_clear_cfm+0x5e>
   153d8:	f8b4 31bc 	ldrh.w	r3, [r4, #444]	; 0x1bc
   153dc:	4293      	cmp	r3, r2
   153de:	d026      	beq.n	1542e <bt_mesh_friend_clear_cfm+0x7a>
		BT_WARN("No pending clear procedure for 0x%02x", rx->ctx.addr);
   153e0:	2157      	movs	r1, #87	; 0x57
   153e2:	4816      	ldr	r0, [pc, #88]	; (1543c <bt_mesh_friend_clear_cfm+0x88>)
   153e4:	f011 fdc3 	bl	26f6e <printk>
		return 0;
   153e8:	2000      	movs	r0, #0
   153ea:	e7ee      	b.n	153ca <bt_mesh_friend_clear_cfm+0x16>
	lpn_counter = sys_be16_to_cpu(msg->lpn_counter);
   153ec:	886b      	ldrh	r3, [r5, #2]
   153ee:	021a      	lsls	r2, r3, #8
   153f0:	ea42 2213 	orr.w	r2, r2, r3, lsr #8
	if (lpn_counter != frnd->lpn_counter) {
   153f4:	8963      	ldrh	r3, [r4, #10]
	lpn_counter = sys_be16_to_cpu(msg->lpn_counter);
   153f6:	b292      	uxth	r2, r2
	if (lpn_counter != frnd->lpn_counter) {
   153f8:	4293      	cmp	r3, r2
   153fa:	d002      	beq.n	15402 <bt_mesh_friend_clear_cfm+0x4e>
		BT_WARN("LPN counter mismatch (0x%04x != 0x%04x)",
   153fc:	2157      	movs	r1, #87	; 0x57
   153fe:	4810      	ldr	r0, [pc, #64]	; (15440 <bt_mesh_friend_clear_cfm+0x8c>)
   15400:	e012      	b.n	15428 <bt_mesh_friend_clear_cfm+0x74>
	k_delayed_work_cancel(&frnd->clear.timer);
   15402:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   15406:	f00e fd37 	bl	23e78 <k_delayed_work_cancel>
	frnd->clear.frnd = BT_MESH_ADDR_UNASSIGNED;
   1540a:	2000      	movs	r0, #0
   1540c:	f8a4 00b4 	strh.w	r0, [r4, #180]	; 0xb4
	return 0;
   15410:	e7db      	b.n	153ca <bt_mesh_friend_clear_cfm+0x16>
		struct bt_mesh_friend *frnd = &bt_mesh.frnd[i];
   15412:	3420      	adds	r4, #32
	lpn_addr = sys_be16_to_cpu(msg->lpn_addr);
   15414:	882b      	ldrh	r3, [r5, #0]
   15416:	021a      	lsls	r2, r3, #8
   15418:	ea42 2213 	orr.w	r2, r2, r3, lsr #8
	if (lpn_addr != frnd->lpn) {
   1541c:	8823      	ldrh	r3, [r4, #0]
	lpn_addr = sys_be16_to_cpu(msg->lpn_addr);
   1541e:	b292      	uxth	r2, r2
	if (lpn_addr != frnd->lpn) {
   15420:	4293      	cmp	r3, r2
   15422:	d0e3      	beq.n	153ec <bt_mesh_friend_clear_cfm+0x38>
		BT_WARN("LPN address mismatch (0x%04x != 0x%04x)",
   15424:	4807      	ldr	r0, [pc, #28]	; (15444 <bt_mesh_friend_clear_cfm+0x90>)
   15426:	2157      	movs	r1, #87	; 0x57
		BT_WARN("LPN counter mismatch (0x%04x != 0x%04x)",
   15428:	f011 fda1 	bl	26f6e <printk>
   1542c:	e7dc      	b.n	153e8 <bt_mesh_friend_clear_cfm+0x34>
		struct bt_mesh_friend *frnd = &bt_mesh.frnd[i];
   1542e:	f504 7484 	add.w	r4, r4, #264	; 0x108
   15432:	e7ef      	b.n	15414 <bt_mesh_friend_clear_cfm+0x60>
   15434:	00033aaf 	.word	0x00033aaf
   15438:	20001dd8 	.word	0x20001dd8
   1543c:	00033ad3 	.word	0x00033ad3
   15440:	00033b2b 	.word	0x00033b2b
   15444:	00033afe 	.word	0x00033afe

00015448 <bt_mesh_friend_req>:
{
   15448:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
   1544c:	7d03      	ldrb	r3, [r0, #20]
   1544e:	f003 0330 	and.w	r3, r3, #48	; 0x30
   15452:	2b10      	cmp	r3, #16
{
   15454:	b089      	sub	sp, #36	; 0x24
   15456:	4606      	mov	r6, r0
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
   15458:	d046      	beq.n	154e8 <bt_mesh_friend_req+0xa0>
	if (buf->len < sizeof(*msg)) {
   1545a:	888b      	ldrh	r3, [r1, #4]
   1545c:	2b09      	cmp	r3, #9
   1545e:	d804      	bhi.n	1546a <bt_mesh_friend_req+0x22>
		BT_WARN("Too short Friend Request");
   15460:	4895      	ldr	r0, [pc, #596]	; (156b8 <bt_mesh_friend_req+0x270>)
   15462:	2157      	movs	r1, #87	; 0x57
		BT_WARN("Prohibited NumElements value (0x00)");
   15464:	f011 fd83 	bl	26f6e <printk>
		return -EINVAL;
   15468:	e007      	b.n	1547a <bt_mesh_friend_req+0x32>
	struct bt_mesh_ctl_friend_req *msg = (void *)buf->data;
   1546a:	680d      	ldr	r5, [r1, #0]
	if (msg->recv_delay <= 0x09) {
   1546c:	786a      	ldrb	r2, [r5, #1]
   1546e:	2a09      	cmp	r2, #9
   15470:	d809      	bhi.n	15486 <bt_mesh_friend_req+0x3e>
		BT_WARN("Prohibited ReceiveDelay (0x%02x)", msg->recv_delay);
   15472:	4892      	ldr	r0, [pc, #584]	; (156bc <bt_mesh_friend_req+0x274>)
   15474:	2157      	movs	r1, #87	; 0x57
   15476:	f011 fd7a 	bl	26f6e <printk>
		return -EINVAL;
   1547a:	f06f 0515 	mvn.w	r5, #21
}
   1547e:	4628      	mov	r0, r5
   15480:	b009      	add	sp, #36	; 0x24
   15482:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return ((uint16_t)src[0] << 8) | src[1];
   15486:	78eb      	ldrb	r3, [r5, #3]
   15488:	792f      	ldrb	r7, [r5, #4]
	return ((uint32_t)src[0] << 16) | sys_get_be16(&src[1]);
   1548a:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
   1548e:	78ab      	ldrb	r3, [r5, #2]
   15490:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
	if (poll_to <= 0x000009 || poll_to >= 0x34bc00) {
   15494:	4b8a      	ldr	r3, [pc, #552]	; (156c0 <bt_mesh_friend_req+0x278>)
   15496:	f1a7 020a 	sub.w	r2, r7, #10
   1549a:	429a      	cmp	r2, r3
   1549c:	d903      	bls.n	154a6 <bt_mesh_friend_req+0x5e>
		BT_WARN("Prohibited PollTimeout (0x%06x)", poll_to);
   1549e:	463a      	mov	r2, r7
   154a0:	2157      	movs	r1, #87	; 0x57
   154a2:	4888      	ldr	r0, [pc, #544]	; (156c4 <bt_mesh_friend_req+0x27c>)
   154a4:	e7e7      	b.n	15476 <bt_mesh_friend_req+0x2e>
	if (msg->num_elem == 0x00) {
   154a6:	79eb      	ldrb	r3, [r5, #7]
   154a8:	b913      	cbnz	r3, 154b0 <bt_mesh_friend_req+0x68>
		BT_WARN("Prohibited NumElements value (0x00)");
   154aa:	2157      	movs	r1, #87	; 0x57
   154ac:	4886      	ldr	r0, [pc, #536]	; (156c8 <bt_mesh_friend_req+0x280>)
   154ae:	e7d9      	b.n	15464 <bt_mesh_friend_req+0x1c>
	if (!BT_MESH_ADDR_IS_UNICAST(rx->ctx.addr + msg->num_elem - 1)) {
   154b0:	8901      	ldrh	r1, [r0, #8]
   154b2:	440b      	add	r3, r1
   154b4:	2b01      	cmp	r3, #1
   154b6:	d003      	beq.n	154c0 <bt_mesh_friend_req+0x78>
   154b8:	3b01      	subs	r3, #1
   154ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   154be:	db02      	blt.n	154c6 <bt_mesh_friend_req+0x7e>
		BT_WARN("LPN elements stretch outside of unicast range");
   154c0:	2157      	movs	r1, #87	; 0x57
   154c2:	4882      	ldr	r0, [pc, #520]	; (156cc <bt_mesh_friend_req+0x284>)
   154c4:	e7ce      	b.n	15464 <bt_mesh_friend_req+0x1c>
	if (!MIN_QUEUE_SIZE_LOG(msg->criteria)) {
   154c6:	782b      	ldrb	r3, [r5, #0]
   154c8:	f013 0307 	ands.w	r3, r3, #7
   154cc:	d102      	bne.n	154d4 <bt_mesh_friend_req+0x8c>
		BT_WARN("Prohibited Minimum Queue Size in Friend Request");
   154ce:	2157      	movs	r1, #87	; 0x57
   154d0:	487f      	ldr	r0, [pc, #508]	; (156d0 <bt_mesh_friend_req+0x288>)
   154d2:	e7c7      	b.n	15464 <bt_mesh_friend_req+0x1c>
	if (CONFIG_BT_MESH_FRIEND_QUEUE_SIZE < MIN_QUEUE_SIZE(msg->criteria)) {
   154d4:	2201      	movs	r2, #1
   154d6:	fa02 f303 	lsl.w	r3, r2, r3
   154da:	2b10      	cmp	r3, #16
   154dc:	d906      	bls.n	154ec <bt_mesh_friend_req+0xa4>
		BT_WARN("We have a too small Friend Queue size (%u < %u)",
   154de:	2210      	movs	r2, #16
   154e0:	2157      	movs	r1, #87	; 0x57
   154e2:	487c      	ldr	r0, [pc, #496]	; (156d4 <bt_mesh_friend_req+0x28c>)
   154e4:	f011 fd43 	bl	26f6e <printk>
		return 0;
   154e8:	2500      	movs	r5, #0
   154ea:	e7c8      	b.n	1547e <bt_mesh_friend_req+0x36>
	frnd = bt_mesh_friend_find(rx->sub->net_idx, rx->ctx.addr, true, false);
   154ec:	6800      	ldr	r0, [r0, #0]
   154ee:	2300      	movs	r3, #0
   154f0:	8b80      	ldrh	r0, [r0, #28]
   154f2:	f7ff fd5b 	bl	14fac <bt_mesh_friend_find.part.21>
	if (frnd) {
   154f6:	4604      	mov	r4, r0
   154f8:	b968      	cbnz	r0, 15516 <bt_mesh_friend_req+0xce>
		if (!bt_mesh.frnd[i].subnet) {
   154fa:	4b77      	ldr	r3, [pc, #476]	; (156d8 <bt_mesh_friend_req+0x290>)
   154fc:	6b1c      	ldr	r4, [r3, #48]	; 0x30
   154fe:	461a      	mov	r2, r3
   15500:	b124      	cbz	r4, 1550c <bt_mesh_friend_req+0xc4>
   15502:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
   15506:	2b00      	cmp	r3, #0
   15508:	d14c      	bne.n	155a4 <bt_mesh_friend_req+0x15c>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
   1550a:	2401      	movs	r4, #1
			frnd = &bt_mesh.frnd[i];
   1550c:	23e8      	movs	r3, #232	; 0xe8
   1550e:	fb03 2404 	mla	r4, r3, r4, r2
   15512:	3420      	adds	r4, #32
	if (!frnd) {
   15514:	e006      	b.n	15524 <bt_mesh_friend_req+0xdc>
		BT_WARN("Existing LPN re-requesting Friendship");
   15516:	4871      	ldr	r0, [pc, #452]	; (156dc <bt_mesh_friend_req+0x294>)
   15518:	2157      	movs	r1, #87	; 0x57
   1551a:	f011 fd28 	bl	26f6e <printk>
		friend_clear(frnd);
   1551e:	4620      	mov	r0, r4
   15520:	f7ff fa90 	bl	14a44 <friend_clear>
	frnd->lpn = rx->ctx.addr;
   15524:	f8b6 8008 	ldrh.w	r8, [r6, #8]
   15528:	f8a4 8000 	strh.w	r8, [r4]
	frnd->num_elem = msg->num_elem;
   1552c:	79eb      	ldrb	r3, [r5, #7]
   1552e:	7223      	strb	r3, [r4, #8]
	frnd->subnet = rx->sub;
   15530:	6832      	ldr	r2, [r6, #0]
   15532:	6122      	str	r2, [r4, #16]
	frnd->recv_delay = msg->recv_delay;
   15534:	786b      	ldrb	r3, [r5, #1]
   15536:	70a3      	strb	r3, [r4, #2]
	frnd->poll_to = poll_to * 100U;
   15538:	2364      	movs	r3, #100	; 0x64
   1553a:	435f      	muls	r7, r3
   1553c:	6067      	str	r7, [r4, #4]
	frnd->lpn_counter = sys_be16_to_cpu(msg->lpn_counter);
   1553e:	8929      	ldrh	r1, [r5, #8]
   15540:	020b      	lsls	r3, r1, #8
   15542:	ea43 2311 	orr.w	r3, r3, r1, lsr #8
   15546:	8163      	strh	r3, [r4, #10]
	frnd->clear.frnd = sys_be16_to_cpu(msg->prev_addr);
   15548:	f8b5 1005 	ldrh.w	r1, [r5, #5]
   1554c:	020b      	lsls	r3, r1, #8
   1554e:	ea43 2311 	orr.w	r3, r3, r1, lsr #8
   15552:	f8a4 30b4 	strh.w	r3, [r4, #180]	; 0xb4
	err = friend_cred_create(frnd, SUBNET_KEY_TX_IDX(frnd->subnet));
   15556:	7f92      	ldrb	r2, [r2, #30]
   15558:	1e93      	subs	r3, r2, #2
   1555a:	f1d3 0900 	rsbs	r9, r3, #0
   1555e:	eb49 0903 	adc.w	r9, r9, r3
	return bt_mesh_friend_cred_create(&frnd->cred[idx], frnd->lpn,
   15562:	f7fc fd2d 	bl	11fc0 <bt_mesh_primary_addr>
					  frnd->subnet->keys[idx].net);
   15566:	225a      	movs	r2, #90	; 0x5a
   15568:	6921      	ldr	r1, [r4, #16]
	return bt_mesh_friend_cred_create(&frnd->cred[idx], frnd->lpn,
   1556a:	8963      	ldrh	r3, [r4, #10]
					  frnd->subnet->keys[idx].net);
   1556c:	fb02 f209 	mul.w	r2, r2, r9
	return bt_mesh_friend_cred_create(&frnd->cred[idx], frnd->lpn,
   15570:	ea4f 1749 	mov.w	r7, r9, lsl #5
					  frnd->subnet->keys[idx].net);
   15574:	322d      	adds	r2, #45	; 0x2d
   15576:	440a      	add	r2, r1
	return bt_mesh_friend_cred_create(&frnd->cred[idx], frnd->lpn,
   15578:	444f      	add	r7, r9
   1557a:	3714      	adds	r7, #20
   1557c:	9201      	str	r2, [sp, #4]
   1557e:	89a2      	ldrh	r2, [r4, #12]
   15580:	9200      	str	r2, [sp, #0]
   15582:	4427      	add	r7, r4
   15584:	4602      	mov	r2, r0
   15586:	4641      	mov	r1, r8
   15588:	4638      	mov	r0, r7
   1558a:	f014 ffde 	bl	2a54a <bt_mesh_friend_cred_create>
	if (err) {
   1558e:	b180      	cbz	r0, 155b2 <bt_mesh_friend_req+0x16a>
		BT_ERR("Failed to create friend credentials");
   15590:	2145      	movs	r1, #69	; 0x45
   15592:	4853      	ldr	r0, [pc, #332]	; (156e0 <bt_mesh_friend_req+0x298>)
   15594:	f011 fceb 	bl	26f6e <printk>
		friend_clear(frnd);
   15598:	4620      	mov	r0, r4
   1559a:	f7ff fa53 	bl	14a44 <friend_clear>
		return -EIO;
   1559e:	f06f 0504 	mvn.w	r5, #4
   155a2:	e76c      	b.n	1547e <bt_mesh_friend_req+0x36>
		BT_WARN("No free Friend contexts for new LPN");
   155a4:	2157      	movs	r1, #87	; 0x57
   155a6:	484f      	ldr	r0, [pc, #316]	; (156e4 <bt_mesh_friend_req+0x29c>)
   155a8:	f011 fce1 	bl	26f6e <printk>
		return -ENOMEM;
   155ac:	f06f 050b 	mvn.w	r5, #11
   155b0:	e765      	b.n	1547e <bt_mesh_friend_req+0x36>
	if (BT_MESH_ADDR_IS_UNICAST(frnd->clear.frnd) &&
   155b2:	f8b4 00b4 	ldrh.w	r0, [r4, #180]	; 0xb4
   155b6:	b203      	sxth	r3, r0
   155b8:	2b00      	cmp	r3, #0
   155ba:	dd16      	ble.n	155ea <bt_mesh_friend_req+0x1a2>
	    !bt_mesh_elem_find(frnd->clear.frnd)) {
   155bc:	f7fc fd06 	bl	11fcc <bt_mesh_elem_find>
	if (BT_MESH_ADDR_IS_UNICAST(frnd->clear.frnd) &&
   155c0:	b998      	cbnz	r0, 155ea <bt_mesh_friend_req+0x1a2>
	return z_impl_k_uptime_ticks();
   155c2:	f017 ff3f 	bl	2d444 <z_impl_k_uptime_ticks>
   155c6:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   155ca:	fba0 8907 	umull	r8, r9, r0, r7
   155ce:	fb07 9901 	mla	r9, r7, r1, r9
   155d2:	ea4f 32d8 	mov.w	r2, r8, lsr #15
   155d6:	ea42 4249 	orr.w	r2, r2, r9, lsl #17
	frnd->clear.repeat_sec = 1U;
   155da:	2301      	movs	r3, #1
	return (uint32_t)k_uptime_get();
   155dc:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
   155e0:	f8a4 30b6 	strh.w	r3, [r4, #182]	; 0xb6
	send_friend_clear(frnd);
   155e4:	4620      	mov	r0, r4
   155e6:	f7ff f8c1 	bl	1476c <send_friend_clear>
	delay = offer_delay(frnd, rx->ctx.recv_rssi, msg->criteria);
   155ea:	782a      	ldrb	r2, [r5, #0]
	delay = (int32_t)fact[RECV_WIN_FACT(crit)] * RECV_WIN;
   155ec:	483e      	ldr	r0, [pc, #248]	; (156e8 <bt_mesh_friend_req+0x2a0>)
   155ee:	f3c2 03c1 	ubfx	r3, r2, #3, #2
	delay -= (int32_t)fact[RSSI_FACT(crit)] * rssi;
   155f2:	f3c2 1241 	ubfx	r2, r2, #5, #2
	delay = (int32_t)fact[RECV_WIN_FACT(crit)] * RECV_WIN;
   155f6:	5cc1      	ldrb	r1, [r0, r3]
	delay -= (int32_t)fact[RSSI_FACT(crit)] * rssi;
   155f8:	5c82      	ldrb	r2, [r0, r2]
	delay = (int32_t)fact[RECV_WIN_FACT(crit)] * RECV_WIN;
   155fa:	ebc1 2301 	rsb	r3, r1, r1, lsl #8
	delay -= (int32_t)fact[RSSI_FACT(crit)] * rssi;
   155fe:	f996 100c 	ldrsb.w	r1, [r6, #12]
   15602:	fb02 3111 	mls	r1, r2, r1, r3
	delay /= 10;
   15606:	230a      	movs	r3, #10
   15608:	fb91 f1f3 	sdiv	r1, r1, r3
	return MAX(delay, 100);
   1560c:	2964      	cmp	r1, #100	; 0x64
   1560e:	bfb8      	it	lt
   15610:	2164      	movlt	r1, #100	; 0x64
   15612:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   15616:	f240 38e7 	movw	r8, #999	; 0x3e7
   1561a:	f04f 0900 	mov.w	r9, #0
   1561e:	fbc0 8901 	smlal	r8, r9, r0, r1
   15622:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   15626:	2300      	movs	r3, #0
   15628:	4640      	mov	r0, r8
   1562a:	4649      	mov	r1, r9
   1562c:	f7ec f9fe 	bl	1a2c <__aeabi_uldivmod>
	k_delayed_work_submit(&frnd->timer, K_MSEC(delay));
   15630:	4602      	mov	r2, r0
   15632:	460b      	mov	r3, r1
   15634:	f104 0060 	add.w	r0, r4, #96	; 0x60
   15638:	f7ff f8d4 	bl	147e4 <k_delayed_work_submit>
	NET_BUF_SIMPLE_DEFINE(sdu, 1 + sizeof(*off));
   1563c:	ab03      	add	r3, sp, #12
   1563e:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
	net_buf_simple_reserve(&sdu, 1);
   15642:	2101      	movs	r1, #1
   15644:	a805      	add	r0, sp, #20
	NET_BUF_SIMPLE_DEFINE(sdu, 1 + sizeof(*off));
   15646:	e9cd 2306 	strd	r2, r3, [sp, #24]
	enqueue_offer(frnd, rx->ctx.recv_rssi);
   1564a:	f996 500c 	ldrsb.w	r5, [r6, #12]
	NET_BUF_SIMPLE_DEFINE(sdu, 1 + sizeof(*off));
   1564e:	9305      	str	r3, [sp, #20]
	net_buf_simple_reserve(&sdu, 1);
   15650:	f009 fb96 	bl	1ed80 <net_buf_simple_reserve>
	off = net_buf_simple_add(&sdu, sizeof(*off));
   15654:	2106      	movs	r1, #6
   15656:	a805      	add	r0, sp, #20
   15658:	f009 fdcc 	bl	1f1f4 <net_buf_simple_add>
	off->recv_win = CONFIG_BT_MESH_FRIEND_RECV_WIN,
   1565c:	23ff      	movs	r3, #255	; 0xff
   1565e:	7003      	strb	r3, [r0, #0]
	off->queue_size = CONFIG_BT_MESH_FRIEND_QUEUE_SIZE,
   15660:	2310      	movs	r3, #16
   15662:	7043      	strb	r3, [r0, #1]
	off->sub_list_size = ARRAY_SIZE(frnd->sub_list),
   15664:	2303      	movs	r3, #3
   15666:	7083      	strb	r3, [r0, #2]
	off->rssi = rssi,
   15668:	70c5      	strb	r5, [r0, #3]
	off->frnd_counter = sys_cpu_to_be16(frnd->counter);
   1566a:	89a2      	ldrh	r2, [r4, #12]
   1566c:	0213      	lsls	r3, r2, #8
   1566e:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   15672:	8083      	strh	r3, [r0, #4]
	buf = encode_friend_ctl(frnd, TRANS_CTL_OP_FRIEND_OFFER, &sdu);
   15674:	aa05      	add	r2, sp, #20
   15676:	2104      	movs	r1, #4
   15678:	4620      	mov	r0, r4
   1567a:	f7ff fb0d 	bl	14c98 <encode_friend_ctl.isra.11>
	if (!buf) {
   1567e:	4606      	mov	r6, r0
   15680:	b920      	cbnz	r0, 1568c <bt_mesh_friend_req+0x244>
		BT_ERR("Unable to encode Friend Offer");
   15682:	2145      	movs	r1, #69	; 0x45
   15684:	4819      	ldr	r0, [pc, #100]	; (156ec <bt_mesh_friend_req+0x2a4>)
   15686:	f011 fc72 	bl	26f6e <printk>
		return;
   1568a:	e72d      	b.n	154e8 <bt_mesh_friend_req+0xa0>
	if (encrypt_friend_pdu(frnd, buf, true)) {
   1568c:	4601      	mov	r1, r0
   1568e:	2201      	movs	r2, #1
   15690:	4620      	mov	r0, r4
   15692:	f7ff f8e5 	bl	14860 <encrypt_friend_pdu>
   15696:	4605      	mov	r5, r0
   15698:	2800      	cmp	r0, #0
   1569a:	f47f af25 	bne.w	154e8 <bt_mesh_friend_req+0xa0>
	if (frnd->last) {
   1569e:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   156a2:	b108      	cbz	r0, 156a8 <bt_mesh_friend_req+0x260>
		net_buf_unref(frnd->last);
   156a4:	f009 fc56 	bl	1ef54 <net_buf_unref>
	frnd->send_last = 1U;
   156a8:	78e3      	ldrb	r3, [r4, #3]
	frnd->last = buf;
   156aa:	f8c4 609c 	str.w	r6, [r4, #156]	; 0x9c
	frnd->send_last = 1U;
   156ae:	f043 0302 	orr.w	r3, r3, #2
   156b2:	70e3      	strb	r3, [r4, #3]
   156b4:	e6e3      	b.n	1547e <bt_mesh_friend_req+0x36>
   156b6:	bf00      	nop
   156b8:	00033c0e 	.word	0x00033c0e
   156bc:	00033c2c 	.word	0x00033c2c
   156c0:	0034bbf5 	.word	0x0034bbf5
   156c4:	00033c52 	.word	0x00033c52
   156c8:	00033c77 	.word	0x00033c77
   156cc:	00033ca0 	.word	0x00033ca0
   156d0:	00033cd3 	.word	0x00033cd3
   156d4:	00033d08 	.word	0x00033d08
   156d8:	20001dd8 	.word	0x20001dd8
   156dc:	00033d3d 	.word	0x00033d3d
   156e0:	00033d91 	.word	0x00033d91
   156e4:	00033d68 	.word	0x00033d68
   156e8:	00033fa6 	.word	0x00033fa6
   156ec:	00033dba 	.word	0x00033dba

000156f0 <bt_mesh_friend_init>:
{
   156f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	list->head = NULL;
   156f4:	4c18      	ldr	r4, [pc, #96]	; (15758 <bt_mesh_friend_init+0x68>)
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   156f6:	f8df 8068 	ldr.w	r8, [pc, #104]	; 15760 <bt_mesh_friend_init+0x70>
   156fa:	4f18      	ldr	r7, [pc, #96]	; (1575c <bt_mesh_friend_init+0x6c>)
   156fc:	2500      	movs	r5, #0
   156fe:	2630      	movs	r6, #48	; 0x30
   15700:	4632      	mov	r2, r6
   15702:	4629      	mov	r1, r5
   15704:	f104 0080 	add.w	r0, r4, #128	; 0x80
	list->tail = NULL;
   15708:	e9c4 5530 	strd	r5, r5, [r4, #192]	; 0xc0
   1570c:	f017 ff75 	bl	2d5fa <memset>
   15710:	4632      	mov	r2, r6
   15712:	4629      	mov	r1, r5
   15714:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   15718:	f8c4 8084 	str.w	r8, [r4, #132]	; 0x84
   1571c:	f017 ff6d 	bl	2d5fa <memset>
   15720:	4632      	mov	r2, r6
   15722:	4629      	mov	r1, r5
   15724:	f504 70b4 	add.w	r0, r4, #360	; 0x168
   15728:	f8c4 70dc 	str.w	r7, [r4, #220]	; 0xdc
   1572c:	e9c4 552c 	strd	r5, r5, [r4, #176]	; 0xb0
   15730:	e9c4 556a 	strd	r5, r5, [r4, #424]	; 0x1a8
   15734:	f017 ff61 	bl	2d5fa <memset>
   15738:	4632      	mov	r2, r6
   1573a:	4629      	mov	r1, r5
   1573c:	f504 70e0 	add.w	r0, r4, #448	; 0x1c0
   15740:	f8c4 816c 	str.w	r8, [r4, #364]	; 0x16c
   15744:	f017 ff59 	bl	2d5fa <memset>
   15748:	f8c4 71c4 	str.w	r7, [r4, #452]	; 0x1c4
   1574c:	e9c4 5566 	strd	r5, r5, [r4, #408]	; 0x198
}
   15750:	4628      	mov	r0, r5
   15752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15756:	bf00      	nop
   15758:	20001dd8 	.word	0x20001dd8
   1575c:	0002b24f 	.word	0x0002b24f
   15760:	00014d4d 	.word	0x00014d4d

00015764 <bt_mesh_friend_match>:
{
   15764:	b538      	push	{r3, r4, r5, lr}
		if (friend_lpn_matches(frnd, net_idx, addr)) {
   15766:	460a      	mov	r2, r1
   15768:	4601      	mov	r1, r0
   1576a:	4805      	ldr	r0, [pc, #20]	; (15780 <bt_mesh_friend_match+0x1c>)
   1576c:	f015 fda2 	bl	2b2b4 <friend_lpn_matches>
   15770:	b920      	cbnz	r0, 1577c <bt_mesh_friend_match+0x18>
   15772:	4804      	ldr	r0, [pc, #16]	; (15784 <bt_mesh_friend_match+0x20>)
}
   15774:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		if (friend_lpn_matches(frnd, net_idx, addr)) {
   15778:	f015 bd9c 	b.w	2b2b4 <friend_lpn_matches>
}
   1577c:	bd38      	pop	{r3, r4, r5, pc}
   1577e:	bf00      	nop
   15780:	20001df8 	.word	0x20001df8
   15784:	20001ee0 	.word	0x20001ee0

00015788 <bt_mesh_friend_queue_has_space>:
{
   15788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1578c:	4681      	mov	r9, r0
   1578e:	460f      	mov	r7, r1
		if (!friend_lpn_matches(frnd, net_idx, dst)) {
   15790:	4601      	mov	r1, r0
   15792:	4816      	ldr	r0, [pc, #88]	; (157ec <bt_mesh_friend_queue_has_space+0x64>)
{
   15794:	f89d 5020 	ldrb.w	r5, [sp, #32]
   15798:	4692      	mov	sl, r2
   1579a:	4698      	mov	r8, r3
		if (!friend_lpn_matches(frnd, net_idx, dst)) {
   1579c:	f015 fd8a 	bl	2b2b4 <friend_lpn_matches>
   157a0:	4606      	mov	r6, r0
   157a2:	b1e0      	cbz	r0, 157de <bt_mesh_friend_queue_has_space+0x56>
	if (seg_count > CONFIG_BT_MESH_FRIEND_QUEUE_SIZE) {
   157a4:	2d10      	cmp	r5, #16
   157a6:	d81a      	bhi.n	157de <bt_mesh_friend_queue_has_space+0x56>
   157a8:	462b      	mov	r3, r5
   157aa:	4642      	mov	r2, r8
   157ac:	4639      	mov	r1, r7
   157ae:	480f      	ldr	r0, [pc, #60]	; (157ec <bt_mesh_friend_queue_has_space+0x64>)
   157b0:	f015 fe6a 	bl	2b488 <friend_queue_has_space.part.18>
   157b4:	4604      	mov	r4, r0
		if (!friend_lpn_matches(frnd, net_idx, dst)) {
   157b6:	4652      	mov	r2, sl
   157b8:	4649      	mov	r1, r9
   157ba:	480d      	ldr	r0, [pc, #52]	; (157f0 <bt_mesh_friend_queue_has_space+0x68>)
   157bc:	f015 fd7a 	bl	2b2b4 <friend_lpn_matches>
   157c0:	b178      	cbz	r0, 157e2 <bt_mesh_friend_queue_has_space+0x5a>
	if (seg_count > CONFIG_BT_MESH_FRIEND_QUEUE_SIZE) {
   157c2:	2d10      	cmp	r5, #16
   157c4:	d808      	bhi.n	157d8 <bt_mesh_friend_queue_has_space+0x50>
   157c6:	462b      	mov	r3, r5
   157c8:	4642      	mov	r2, r8
   157ca:	4639      	mov	r1, r7
   157cc:	4808      	ldr	r0, [pc, #32]	; (157f0 <bt_mesh_friend_queue_has_space+0x68>)
   157ce:	f015 fe5b 	bl	2b488 <friend_queue_has_space.part.18>
			someone_has_space = true;
   157d2:	2800      	cmp	r0, #0
   157d4:	bf18      	it	ne
   157d6:	4604      	movne	r4, r0
}
   157d8:	4620      	mov	r0, r4
   157da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	bool someone_has_space = false, friend_match = false;
   157de:	2400      	movs	r4, #0
   157e0:	e7e9      	b.n	157b6 <bt_mesh_friend_queue_has_space+0x2e>
	if (!friend_match) {
   157e2:	2e00      	cmp	r6, #0
		return true;
   157e4:	bf08      	it	eq
   157e6:	2401      	moveq	r4, #1
   157e8:	e7f6      	b.n	157d8 <bt_mesh_friend_queue_has_space+0x50>
   157ea:	bf00      	nop
   157ec:	20001df8 	.word	0x20001df8
   157f0:	20001ee0 	.word	0x20001ee0

000157f4 <bt_mesh_friend_enqueue_rx>:

void bt_mesh_friend_enqueue_rx(struct bt_mesh_net_rx *rx,
			       enum bt_mesh_friend_pdu_type type,
			       const uint64_t *seq_auth, uint8_t seg_count,
			       struct net_buf_simple *sbuf)
{
   157f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   157f8:	4699      	mov	r9, r3
	int i;

	if (!rx->friend_match ||
   157fa:	7d03      	ldrb	r3, [r0, #20]
{
   157fc:	4617      	mov	r7, r2
	if (!rx->friend_match ||
   157fe:	061a      	lsls	r2, r3, #24
{
   15800:	b089      	sub	sp, #36	; 0x24
   15802:	4605      	mov	r5, r0
   15804:	460e      	mov	r6, r1
	if (!rx->friend_match ||
   15806:	d56c      	bpl.n	158e2 <bt_mesh_friend_enqueue_rx+0xee>
   15808:	7b42      	ldrb	r2, [r0, #13]
   1580a:	2a01      	cmp	r2, #1
   1580c:	d803      	bhi.n	15816 <bt_mesh_friend_enqueue_rx+0x22>
	    (rx->ctx.recv_ttl <= 1U && rx->net_if != BT_MESH_NET_IF_LOCAL) ||
   1580e:	f003 0330 	and.w	r3, r3, #48	; 0x30
   15812:	2b10      	cmp	r3, #16
   15814:	d165      	bne.n	158e2 <bt_mesh_friend_enqueue_rx+0xee>
	    bt_mesh_friend_get() != BT_MESH_FRIEND_ENABLED) {
   15816:	f014 fd87 	bl	2a328 <bt_mesh_friend_get>
	    (rx->ctx.recv_ttl <= 1U && rx->net_if != BT_MESH_NET_IF_LOCAL) ||
   1581a:	2801      	cmp	r0, #1
   1581c:	d161      	bne.n	158e2 <bt_mesh_friend_enqueue_rx+0xee>
   1581e:	4c3e      	ldr	r4, [pc, #248]	; (15918 <bt_mesh_friend_enqueue_rx+0x124>)

	BT_DBG("recv_ttl %u net_idx 0x%04x src 0x%04x dst 0x%04x",
	       rx->ctx.recv_ttl, rx->sub->net_idx, rx->ctx.addr,
	       rx->ctx.recv_dst);

	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
   15820:	f04f 0800 	mov.w	r8, #0
	info.iv_index = BT_MESH_NET_IVI_RX(rx);
   15824:	f1a4 0b20 	sub.w	fp, r4, #32
		struct bt_mesh_friend *frnd = &bt_mesh.frnd[i];

		if (!friend_lpn_matches(frnd, rx->sub->net_idx,
   15828:	682b      	ldr	r3, [r5, #0]
   1582a:	896a      	ldrh	r2, [r5, #10]
   1582c:	8b9b      	ldrh	r3, [r3, #28]
   1582e:	9303      	str	r3, [sp, #12]
   15830:	4619      	mov	r1, r3
   15832:	4620      	mov	r0, r4
   15834:	f015 fd3e 	bl	2b2b4 <friend_lpn_matches>
   15838:	2800      	cmp	r0, #0
   1583a:	d04e      	beq.n	158da <bt_mesh_friend_enqueue_rx+0xe6>
					rx->ctx.recv_dst)) {
			continue;
		}

		if (friend_lpn_matches(frnd, rx->sub->net_idx,
   1583c:	f8b5 a008 	ldrh.w	sl, [r5, #8]
   15840:	9b03      	ldr	r3, [sp, #12]
   15842:	4652      	mov	r2, sl
   15844:	4619      	mov	r1, r3
   15846:	4620      	mov	r0, r4
   15848:	f015 fd34 	bl	2b2b4 <friend_lpn_matches>
   1584c:	2800      	cmp	r0, #0
   1584e:	d144      	bne.n	158da <bt_mesh_friend_enqueue_rx+0xe6>
					rx->ctx.addr)) {
			continue;
		}

		if (!friend_queue_prepare_space(frnd, rx->ctx.addr, seq_auth,
   15850:	464b      	mov	r3, r9
   15852:	463a      	mov	r2, r7
   15854:	4651      	mov	r1, sl
   15856:	4620      	mov	r0, r4
   15858:	f7ff f950 	bl	14afc <friend_queue_prepare_space>
   1585c:	2800      	cmp	r0, #0
   1585e:	d03c      	beq.n	158da <bt_mesh_friend_enqueue_rx+0xe6>
	if (bt_mesh_elem_find(rx->ctx.addr)) {
   15860:	8928      	ldrh	r0, [r5, #8]
   15862:	f7fc fbb3 	bl	11fcc <bt_mesh_elem_find>
   15866:	2800      	cmp	r0, #0
   15868:	d137      	bne.n	158da <bt_mesh_friend_enqueue_rx+0xe6>
	if (type == BT_MESH_FRIEND_PDU_SINGLE && seq_auth) {
   1586a:	b92e      	cbnz	r6, 15878 <bt_mesh_friend_enqueue_rx+0x84>
   1586c:	b127      	cbz	r7, 15878 <bt_mesh_friend_enqueue_rx+0x84>
		friend_purge_old_ack(frnd, seq_auth, rx->ctx.addr);
   1586e:	892a      	ldrh	r2, [r5, #8]
   15870:	4639      	mov	r1, r7
   15872:	4620      	mov	r0, r4
   15874:	f015 fd5a 	bl	2b32c <friend_purge_old_ack>
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
   15878:	7d2a      	ldrb	r2, [r5, #20]
	info.src = rx->ctx.addr;
   1587a:	68ab      	ldr	r3, [r5, #8]
   1587c:	9305      	str	r3, [sp, #20]
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
   1587e:	f002 0130 	and.w	r1, r2, #48	; 0x30
   15882:	7b6b      	ldrb	r3, [r5, #13]
   15884:	2910      	cmp	r1, #16
		info.ttl = rx->ctx.recv_ttl - 1U;
   15886:	bf18      	it	ne
   15888:	f103 33ff 	addne.w	r3, r3, #4294967295
   1588c:	f89d 101b 	ldrb.w	r1, [sp, #27]
   15890:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   15894:	f363 0106 	bfi	r1, r3, #0, #7
	info.ctl = rx->ctl;
   15898:	f3c2 00c0 	ubfx	r0, r2, #3, #1
   1589c:	460b      	mov	r3, r1
   1589e:	f360 13c7 	bfi	r3, r0, #7, #1
   158a2:	f88d 301b 	strb.w	r3, [sp, #27]
	sys_put_be24(rx->seq, info.seq);
   158a6:	692b      	ldr	r3, [r5, #16]
	dst[1] = val;
   158a8:	f88d 301a 	strb.w	r3, [sp, #26]
	dst[0] = val >> 16;
   158ac:	0c19      	lsrs	r1, r3, #16
   158ae:	f88d 1018 	strb.w	r1, [sp, #24]
	dst[0] = val >> 8;
   158b2:	f3c3 2107 	ubfx	r1, r3, #8, #8
	info.iv_index = BT_MESH_NET_IVI_RX(rx);
   158b6:	f8db 3000 	ldr.w	r3, [fp]
   158ba:	f88d 1019 	strb.w	r1, [sp, #25]
   158be:	f002 0201 	and.w	r2, r2, #1
   158c2:	1a9a      	subs	r2, r3, r2
	buf = create_friend_pdu(frnd, &info, sbuf);
   158c4:	9912      	ldr	r1, [sp, #72]	; 0x48
	info.iv_index = BT_MESH_NET_IVI_RX(rx);
   158c6:	9207      	str	r2, [sp, #28]
	buf = create_friend_pdu(frnd, &info, sbuf);
   158c8:	a805      	add	r0, sp, #20
   158ca:	f7ff f9a7 	bl	14c1c <create_friend_pdu.isra.10>
	if (!buf) {
   158ce:	4601      	mov	r1, r0
   158d0:	b968      	cbnz	r0, 158ee <bt_mesh_friend_enqueue_rx+0xfa>
		BT_ERR("Failed to encode Friend buffer");
   158d2:	2145      	movs	r1, #69	; 0x45
   158d4:	4811      	ldr	r0, [pc, #68]	; (1591c <bt_mesh_friend_enqueue_rx+0x128>)
   158d6:	f011 fb4a 	bl	26f6e <printk>
		return;
   158da:	34e8      	adds	r4, #232	; 0xe8
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
   158dc:	f1b8 0f00 	cmp.w	r8, #0
   158e0:	d002      	beq.n	158e8 <bt_mesh_friend_enqueue_rx+0xf4>
		}

		friend_lpn_enqueue_rx(frnd, rx, type, seq_auth, seg_count,
				      sbuf);
	}
}
   158e2:	b009      	add	sp, #36	; 0x24
   158e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   158e8:	f04f 0801 	mov.w	r8, #1
   158ec:	e79c      	b.n	15828 <bt_mesh_friend_enqueue_rx+0x34>
	if (type == BT_MESH_FRIEND_PDU_SINGLE) {
   158ee:	b94e      	cbnz	r6, 15904 <bt_mesh_friend_enqueue_rx+0x110>
	net_buf_slist_put(&frnd->queue, buf);
   158f0:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   158f4:	f009 fa68 	bl	1edc8 <net_buf_slist_put>
	frnd->queue_size++;
   158f8:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   158fc:	3301      	adds	r3, #1
   158fe:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
   15902:	e7ea      	b.n	158da <bt_mesh_friend_enqueue_rx+0xe6>
   15904:	9000      	str	r0, [sp, #0]
   15906:	464b      	mov	r3, r9
   15908:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   1590c:	4631      	mov	r1, r6
   1590e:	4620      	mov	r0, r4
   15910:	f7ff f93a 	bl	14b88 <enqueue_friend_pdu.part.20>
	BT_DBG("Queued message for LPN 0x%04x, queue_size %u",
   15914:	e7e1      	b.n	158da <bt_mesh_friend_enqueue_rx+0xe6>
   15916:	bf00      	nop
   15918:	20001df8 	.word	0x20001df8
   1591c:	00033b85 	.word	0x00033b85

00015920 <bt_mesh_friend_enqueue_tx>:

bool bt_mesh_friend_enqueue_tx(struct bt_mesh_net_tx *tx,
			       enum bt_mesh_friend_pdu_type type,
			       const uint64_t *seq_auth, uint8_t seg_count,
			       struct net_buf_simple *sbuf)
{
   15920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15924:	b089      	sub	sp, #36	; 0x24
   15926:	4605      	mov	r5, r0
   15928:	9303      	str	r3, [sp, #12]
	bool matched = false;
	int i;

	if (!bt_mesh_friend_match(tx->sub->net_idx, tx->ctx->addr) ||
   1592a:	6803      	ldr	r3, [r0, #0]
   1592c:	8b9c      	ldrh	r4, [r3, #28]
   1592e:	6843      	ldr	r3, [r0, #4]
		if (friend_lpn_matches(frnd, net_idx, addr)) {
   15930:	4847      	ldr	r0, [pc, #284]	; (15a50 <bt_mesh_friend_enqueue_tx+0x130>)
	if (!bt_mesh_friend_match(tx->sub->net_idx, tx->ctx->addr) ||
   15932:	889e      	ldrh	r6, [r3, #4]
{
   15934:	460f      	mov	r7, r1
   15936:	4692      	mov	sl, r2
		if (friend_lpn_matches(frnd, net_idx, addr)) {
   15938:	4621      	mov	r1, r4
   1593a:	4632      	mov	r2, r6
   1593c:	f015 fcba 	bl	2b2b4 <friend_lpn_matches>
   15940:	b940      	cbnz	r0, 15954 <bt_mesh_friend_enqueue_tx+0x34>
   15942:	4844      	ldr	r0, [pc, #272]	; (15a54 <bt_mesh_friend_enqueue_tx+0x134>)
   15944:	f015 fcb6 	bl	2b2b4 <friend_lpn_matches>
   15948:	b920      	cbnz	r0, 15954 <bt_mesh_friend_enqueue_tx+0x34>
	    bt_mesh_friend_get() != BT_MESH_FRIEND_ENABLED) {
		return matched;
   1594a:	2600      	movs	r6, #0
				      sbuf);
		matched = true;
	}

	return matched;
}
   1594c:	4630      	mov	r0, r6
   1594e:	b009      	add	sp, #36	; 0x24
   15950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	    bt_mesh_friend_get() != BT_MESH_FRIEND_ENABLED) {
   15954:	f014 fce8 	bl	2a328 <bt_mesh_friend_get>
	if (!bt_mesh_friend_match(tx->sub->net_idx, tx->ctx->addr) ||
   15958:	2801      	cmp	r0, #1
   1595a:	d1f6      	bne.n	1594a <bt_mesh_friend_enqueue_tx+0x2a>
   1595c:	4c3c      	ldr	r4, [pc, #240]	; (15a50 <bt_mesh_friend_enqueue_tx+0x130>)
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
   1595e:	f04f 0900 	mov.w	r9, #0
	bool matched = false;
   15962:	464e      	mov	r6, r9
	sys_put_be24(bt_mesh.seq, info.seq);
   15964:	f1a4 0b20 	sub.w	fp, r4, #32
		if (!friend_lpn_matches(frnd, tx->sub->net_idx,
   15968:	e9d5 3200 	ldrd	r3, r2, [r5]
   1596c:	4620      	mov	r0, r4
   1596e:	8892      	ldrh	r2, [r2, #4]
   15970:	8b99      	ldrh	r1, [r3, #28]
   15972:	f015 fc9f 	bl	2b2b4 <friend_lpn_matches>
   15976:	2800      	cmp	r0, #0
   15978:	d047      	beq.n	15a0a <bt_mesh_friend_enqueue_tx+0xea>
		if (!friend_queue_prepare_space(frnd, tx->src, seq_auth,
   1597a:	9b03      	ldr	r3, [sp, #12]
   1597c:	8929      	ldrh	r1, [r5, #8]
   1597e:	4652      	mov	r2, sl
   15980:	4620      	mov	r0, r4
   15982:	f7ff f8bb 	bl	14afc <friend_queue_prepare_space>
   15986:	4680      	mov	r8, r0
   15988:	2800      	cmp	r0, #0
   1598a:	d03e      	beq.n	15a0a <bt_mesh_friend_enqueue_tx+0xea>
	if (type == BT_MESH_FRIEND_PDU_SINGLE && seq_auth) {
   1598c:	b93f      	cbnz	r7, 1599e <bt_mesh_friend_enqueue_tx+0x7e>
   1598e:	f1ba 0f00 	cmp.w	sl, #0
   15992:	d004      	beq.n	1599e <bt_mesh_friend_enqueue_tx+0x7e>
		friend_purge_old_ack(frnd, seq_auth, tx->src);
   15994:	892a      	ldrh	r2, [r5, #8]
   15996:	4651      	mov	r1, sl
   15998:	4620      	mov	r0, r4
   1599a:	f015 fcc7 	bl	2b32c <friend_purge_old_ack>
	info.src = tx->src;
   1599e:	892b      	ldrh	r3, [r5, #8]
   159a0:	f8ad 3014 	strh.w	r3, [sp, #20]
	info.dst = tx->ctx->addr;
   159a4:	686b      	ldr	r3, [r5, #4]
   159a6:	889a      	ldrh	r2, [r3, #4]
	info.ttl = tx->ctx->send_ttl;
   159a8:	7ad9      	ldrb	r1, [r3, #11]
	info.dst = tx->ctx->addr;
   159aa:	f8ad 2016 	strh.w	r2, [sp, #22]
	info.ttl = tx->ctx->send_ttl;
   159ae:	f89d 201b 	ldrb.w	r2, [sp, #27]
   159b2:	f361 0206 	bfi	r2, r1, #0, #7
   159b6:	f88d 201b 	strb.w	r2, [sp, #27]
	info.ctl = (tx->ctx->app_idx == BT_MESH_KEY_UNUSED);
   159ba:	885b      	ldrh	r3, [r3, #2]
   159bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
   159c0:	1a9a      	subs	r2, r3, r2
   159c2:	4253      	negs	r3, r2
   159c4:	4153      	adcs	r3, r2
   159c6:	f89d 201b 	ldrb.w	r2, [sp, #27]
   159ca:	f363 12c7 	bfi	r2, r3, #7, #1
	sys_put_be24(bt_mesh.seq, info.seq);
   159ce:	f8db 3004 	ldr.w	r3, [fp, #4]
	info.ctl = (tx->ctx->app_idx == BT_MESH_KEY_UNUSED);
   159d2:	f88d 201b 	strb.w	r2, [sp, #27]
	dst[0] = val >> 16;
   159d6:	0c1a      	lsrs	r2, r3, #16
   159d8:	f88d 2018 	strb.w	r2, [sp, #24]
	dst[0] = val >> 8;
   159dc:	f3c3 2207 	ubfx	r2, r3, #8, #8
   159e0:	f88d 2019 	strb.w	r2, [sp, #25]
	dst[1] = val;
   159e4:	f88d 301a 	strb.w	r3, [sp, #26]
	info.iv_index = BT_MESH_NET_IVI_TX;
   159e8:	f8db 2000 	ldr.w	r2, [fp]
   159ec:	f7fe ff2c 	bl	14848 <atomic_test_bit.constprop.26>
   159f0:	1a10      	subs	r0, r2, r0
   159f2:	9007      	str	r0, [sp, #28]
	buf = create_friend_pdu(frnd, &info, sbuf);
   159f4:	9912      	ldr	r1, [sp, #72]	; 0x48
   159f6:	a805      	add	r0, sp, #20
   159f8:	f7ff f910 	bl	14c1c <create_friend_pdu.isra.10>
	if (!buf) {
   159fc:	4601      	mov	r1, r0
   159fe:	b958      	cbnz	r0, 15a18 <bt_mesh_friend_enqueue_tx+0xf8>
		BT_ERR("Failed to encode Friend buffer");
   15a00:	2145      	movs	r1, #69	; 0x45
   15a02:	4815      	ldr	r0, [pc, #84]	; (15a58 <bt_mesh_friend_enqueue_tx+0x138>)
   15a04:	f011 fab3 	bl	26f6e <printk>
		matched = true;
   15a08:	4646      	mov	r6, r8
   15a0a:	34e8      	adds	r4, #232	; 0xe8
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
   15a0c:	f1b9 0f00 	cmp.w	r9, #0
   15a10:	d19c      	bne.n	1594c <bt_mesh_friend_enqueue_tx+0x2c>
   15a12:	f04f 0901 	mov.w	r9, #1
   15a16:	e7a7      	b.n	15968 <bt_mesh_friend_enqueue_tx+0x48>
	if (type == BT_MESH_FRIEND_PDU_SINGLE && !info.ctl) {
   15a18:	b98f      	cbnz	r7, 15a3e <bt_mesh_friend_enqueue_tx+0x11e>
   15a1a:	f99d 301b 	ldrsb.w	r3, [sp, #27]
   15a1e:	2b00      	cmp	r3, #0
   15a20:	db03      	blt.n	15a2a <bt_mesh_friend_enqueue_tx+0x10a>
		FRIEND_ADV(buf)->app_idx = tx->ctx->app_idx;
   15a22:	686a      	ldr	r2, [r5, #4]
   15a24:	6943      	ldr	r3, [r0, #20]
   15a26:	8852      	ldrh	r2, [r2, #2]
   15a28:	819a      	strh	r2, [r3, #12]
	net_buf_slist_put(&frnd->queue, buf);
   15a2a:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   15a2e:	f009 f9cb 	bl	1edc8 <net_buf_slist_put>
	frnd->queue_size++;
   15a32:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   15a36:	3301      	adds	r3, #1
   15a38:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
   15a3c:	e7e4      	b.n	15a08 <bt_mesh_friend_enqueue_tx+0xe8>
	if (type == BT_MESH_FRIEND_PDU_SINGLE) {
   15a3e:	9000      	str	r0, [sp, #0]
   15a40:	9b03      	ldr	r3, [sp, #12]
   15a42:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   15a46:	4639      	mov	r1, r7
   15a48:	4620      	mov	r0, r4
   15a4a:	f7ff f89d 	bl	14b88 <enqueue_friend_pdu.part.20>
   15a4e:	e7db      	b.n	15a08 <bt_mesh_friend_enqueue_tx+0xe8>
   15a50:	20001df8 	.word	0x20001df8
   15a54:	20001ee0 	.word	0x20001ee0
   15a58:	00033b85 	.word	0x00033b85

00015a5c <bt_mesh_friend_clear_incomplete>:
	return 0;
}

void bt_mesh_friend_clear_incomplete(struct bt_mesh_subnet *sub, uint16_t src,
				     uint16_t dst, uint64_t *seq_auth)
{
   15a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15a5e:	4606      	mov	r6, r0
   15a60:	460c      	mov	r4, r1

	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
		struct bt_mesh_friend *frnd = &bt_mesh.frnd[i];
		int j;

		if (!friend_lpn_matches(frnd, sub->net_idx, dst)) {
   15a62:	8b81      	ldrh	r1, [r0, #28]
   15a64:	481a      	ldr	r0, [pc, #104]	; (15ad0 <bt_mesh_friend_clear_incomplete+0x74>)
{
   15a66:	4617      	mov	r7, r2
   15a68:	461d      	mov	r5, r3
		if (!friend_lpn_matches(frnd, sub->net_idx, dst)) {
   15a6a:	f015 fc23 	bl	2b2b4 <friend_lpn_matches>
   15a6e:	b198      	cbz	r0, 15a98 <bt_mesh_friend_clear_incomplete+0x3c>
		}

		for (j = 0; j < ARRAY_SIZE(frnd->seg); j++) {
			struct bt_mesh_friend_seg *seg = &frnd->seg[j];

			if (!is_seg(seg, src, *seq_auth & TRANS_SEQ_ZERO_MASK)) {
   15a70:	882a      	ldrh	r2, [r5, #0]
   15a72:	4818      	ldr	r0, [pc, #96]	; (15ad4 <bt_mesh_friend_clear_incomplete+0x78>)
   15a74:	f3c2 020c 	ubfx	r2, r2, #0, #13
   15a78:	4621      	mov	r1, r4
   15a7a:	f015 fcd5 	bl	2b428 <is_seg>
   15a7e:	b158      	cbz	r0, 15a98 <bt_mesh_friend_clear_incomplete+0x3c>
				continue;
			}

			BT_WARN("Clearing incomplete segments for 0x%04x", src);
   15a80:	4622      	mov	r2, r4
   15a82:	2157      	movs	r1, #87	; 0x57
   15a84:	4814      	ldr	r0, [pc, #80]	; (15ad8 <bt_mesh_friend_clear_incomplete+0x7c>)
   15a86:	f011 fa72 	bl	26f6e <printk>

			purge_buffers(&seg->queue);
   15a8a:	4812      	ldr	r0, [pc, #72]	; (15ad4 <bt_mesh_friend_clear_incomplete+0x78>)
   15a8c:	f015 fcb8 	bl	2b400 <purge_buffers>
			seg->seg_count = 0U;
   15a90:	4b12      	ldr	r3, [pc, #72]	; (15adc <bt_mesh_friend_clear_incomplete+0x80>)
   15a92:	2200      	movs	r2, #0
   15a94:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		if (!friend_lpn_matches(frnd, sub->net_idx, dst)) {
   15a98:	463a      	mov	r2, r7
   15a9a:	8bb1      	ldrh	r1, [r6, #28]
   15a9c:	4810      	ldr	r0, [pc, #64]	; (15ae0 <bt_mesh_friend_clear_incomplete+0x84>)
   15a9e:	f015 fc09 	bl	2b2b4 <friend_lpn_matches>
   15aa2:	b198      	cbz	r0, 15acc <bt_mesh_friend_clear_incomplete+0x70>
			if (!is_seg(seg, src, *seq_auth & TRANS_SEQ_ZERO_MASK)) {
   15aa4:	882a      	ldrh	r2, [r5, #0]
   15aa6:	480f      	ldr	r0, [pc, #60]	; (15ae4 <bt_mesh_friend_clear_incomplete+0x88>)
   15aa8:	f3c2 020c 	ubfx	r2, r2, #0, #13
   15aac:	4621      	mov	r1, r4
   15aae:	f015 fcbb 	bl	2b428 <is_seg>
   15ab2:	b158      	cbz	r0, 15acc <bt_mesh_friend_clear_incomplete+0x70>
			BT_WARN("Clearing incomplete segments for 0x%04x", src);
   15ab4:	4622      	mov	r2, r4
   15ab6:	2157      	movs	r1, #87	; 0x57
   15ab8:	4807      	ldr	r0, [pc, #28]	; (15ad8 <bt_mesh_friend_clear_incomplete+0x7c>)
   15aba:	f011 fa58 	bl	26f6e <printk>
			purge_buffers(&seg->queue);
   15abe:	4809      	ldr	r0, [pc, #36]	; (15ae4 <bt_mesh_friend_clear_incomplete+0x88>)
   15ac0:	f015 fc9e 	bl	2b400 <purge_buffers>
			seg->seg_count = 0U;
   15ac4:	4b05      	ldr	r3, [pc, #20]	; (15adc <bt_mesh_friend_clear_incomplete+0x80>)
   15ac6:	2200      	movs	r2, #0
   15ac8:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
			break;
		}
	}
}
   15acc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15ace:	bf00      	nop
   15ad0:	20001df8 	.word	0x20001df8
   15ad4:	20001e88 	.word	0x20001e88
   15ad8:	00033b58 	.word	0x00033b58
   15adc:	20001dd8 	.word	0x20001dd8
   15ae0:	20001ee0 	.word	0x20001ee0
   15ae4:	20001f70 	.word	0x20001f70

00015ae8 <prov_link_closed>:
static void prov_link_closed(const struct prov_bearer *bearer, void *cb_data,
			     enum prov_bearer_link_status reason)
{
	BT_DBG("%u", reason);

	if (bt_mesh_prov_link.role->link_closed) {
   15ae8:	4b07      	ldr	r3, [pc, #28]	; (15b08 <prov_link_closed+0x20>)
   15aea:	689b      	ldr	r3, [r3, #8]
   15aec:	685b      	ldr	r3, [r3, #4]
{
   15aee:	b510      	push	{r4, lr}
   15af0:	4604      	mov	r4, r0
	if (bt_mesh_prov_link.role->link_closed) {
   15af2:	b103      	cbz	r3, 15af6 <prov_link_closed+0xe>
		bt_mesh_prov_link.role->link_closed();
   15af4:	4798      	blx	r3
	}

	if (bt_mesh_prov->link_close) {
   15af6:	4b05      	ldr	r3, [pc, #20]	; (15b0c <prov_link_closed+0x24>)
   15af8:	681b      	ldr	r3, [r3, #0]
   15afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   15afc:	b11b      	cbz	r3, 15b06 <prov_link_closed+0x1e>
		bt_mesh_prov->link_close(bearer->type);
   15afe:	7820      	ldrb	r0, [r4, #0]
	}
}
   15b00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_mesh_prov->link_close(bearer->type);
   15b04:	4718      	bx	r3
}
   15b06:	bd10      	pop	{r4, pc}
   15b08:	20003058 	.word	0x20003058
   15b0c:	20003054 	.word	0x20003054

00015b10 <prov_bearer_error>:

static void prov_bearer_error(const struct prov_bearer *bearer, void *cb_data,
			      uint8_t err)
{
	if (bt_mesh_prov_link.role->error) {
   15b10:	4b03      	ldr	r3, [pc, #12]	; (15b20 <prov_bearer_error+0x10>)
   15b12:	689b      	ldr	r3, [r3, #8]
   15b14:	689b      	ldr	r3, [r3, #8]
   15b16:	b10b      	cbz	r3, 15b1c <prov_bearer_error+0xc>
		bt_mesh_prov_link.role->error(err);
   15b18:	4610      	mov	r0, r2
   15b1a:	4718      	bx	r3
	}
}
   15b1c:	4770      	bx	lr
   15b1e:	bf00      	nop
   15b20:	20003058 	.word	0x20003058

00015b24 <prov_recv>:
{
   15b24:	b570      	push	{r4, r5, r6, lr}
	uint8_t type = buf->data[0];
   15b26:	6810      	ldr	r0, [r2, #0]
   15b28:	4c19      	ldr	r4, [pc, #100]	; (15b90 <prov_recv+0x6c>)
{
   15b2a:	4613      	mov	r3, r2
	uint8_t type = buf->data[0];
   15b2c:	7802      	ldrb	r2, [r0, #0]
	if (type >= ARRAY_SIZE(bt_mesh_prov_link.role->op)) {
   15b2e:	2a09      	cmp	r2, #9
   15b30:	d907      	bls.n	15b42 <prov_recv+0x1e>
		BT_ERR("Unknown provisioning PDU type 0x%02x", type);
   15b32:	2145      	movs	r1, #69	; 0x45
   15b34:	4817      	ldr	r0, [pc, #92]	; (15b94 <prov_recv+0x70>)
   15b36:	f011 fa1a 	bl	26f6e <printk>
		bt_mesh_prov_link.role->error(PROV_ERR_NVAL_FMT);
   15b3a:	68a3      	ldr	r3, [r4, #8]
   15b3c:	2002      	movs	r0, #2
   15b3e:	689b      	ldr	r3, [r3, #8]
   15b40:	e012      	b.n	15b68 <prov_recv+0x44>
	if ((type != PROV_FAILED && type != bt_mesh_prov_link.expect) ||
   15b42:	d003      	beq.n	15b4c <prov_recv+0x28>
   15b44:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
   15b48:	4291      	cmp	r1, r2
   15b4a:	d104      	bne.n	15b56 <prov_recv+0x32>
	    !bt_mesh_prov_link.role->op[type]) {
   15b4c:	68a1      	ldr	r1, [r4, #8]
   15b4e:	1d15      	adds	r5, r2, #4
   15b50:	f851 1025 	ldr.w	r1, [r1, r5, lsl #2]
	if ((type != PROV_FAILED && type != bt_mesh_prov_link.expect) ||
   15b54:	b959      	cbnz	r1, 15b6e <prov_recv+0x4a>
		BT_WARN("Unexpected msg 0x%02x != 0x%02x", type, bt_mesh_prov_link.expect);
   15b56:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
   15b5a:	480f      	ldr	r0, [pc, #60]	; (15b98 <prov_recv+0x74>)
   15b5c:	2157      	movs	r1, #87	; 0x57
   15b5e:	f011 fa06 	bl	26f6e <printk>
		bt_mesh_prov_link.role->error(PROV_ERR_UNEXP_PDU);
   15b62:	68a3      	ldr	r3, [r4, #8]
   15b64:	689b      	ldr	r3, [r3, #8]
   15b66:	2003      	movs	r0, #3
}
   15b68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_mesh_prov_link.role->error(PROV_ERR_UNEXP_PDU);
   15b6c:	4718      	bx	r3
	if (1 + op_len[type] != buf->len) {
   15b6e:	889d      	ldrh	r5, [r3, #4]
   15b70:	4b0a      	ldr	r3, [pc, #40]	; (15b9c <prov_recv+0x78>)
   15b72:	5c9b      	ldrb	r3, [r3, r2]
   15b74:	3301      	adds	r3, #1
   15b76:	42ab      	cmp	r3, r5
   15b78:	d006      	beq.n	15b88 <prov_recv+0x64>
		BT_ERR("Invalid length %u for type 0x%02x", buf->len, type);
   15b7a:	4613      	mov	r3, r2
   15b7c:	2145      	movs	r1, #69	; 0x45
   15b7e:	462a      	mov	r2, r5
   15b80:	4807      	ldr	r0, [pc, #28]	; (15ba0 <prov_recv+0x7c>)
   15b82:	f011 f9f4 	bl	26f6e <printk>
   15b86:	e7d8      	b.n	15b3a <prov_recv+0x16>
	bt_mesh_prov_link.role->op[type](&buf->data[1]);
   15b88:	3001      	adds	r0, #1
}
   15b8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_mesh_prov_link.role->op[type](&buf->data[1]);
   15b8e:	4708      	bx	r1
   15b90:	20003058 	.word	0x20003058
   15b94:	000340eb 	.word	0x000340eb
   15b98:	00034115 	.word	0x00034115
   15b9c:	000340e1 	.word	0x000340e1
   15ba0:	0003413a 	.word	0x0003413a

00015ba4 <pub_key_ready>:
	if (!pkey) {
   15ba4:	b918      	cbnz	r0, 15bae <pub_key_ready+0xa>
		BT_WARN("Public key not available");
   15ba6:	2157      	movs	r1, #87	; 0x57
   15ba8:	4801      	ldr	r0, [pc, #4]	; (15bb0 <pub_key_ready+0xc>)
   15baa:	f011 b9e0 	b.w	26f6e <printk>
}
   15bae:	4770      	bx	lr
   15bb0:	00034161 	.word	0x00034161

00015bb4 <atomic_or.constprop.4>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15bb4:	4b07      	ldr	r3, [pc, #28]	; (15bd4 <atomic_or.constprop.4+0x20>)
}
   15bb6:	f3bf 8f5b 	dmb	ish
   15bba:	4602      	mov	r2, r0
   15bbc:	e853 0f00 	ldrex	r0, [r3]
   15bc0:	ea40 0102 	orr.w	r1, r0, r2
   15bc4:	e843 1c00 	strex	ip, r1, [r3]
   15bc8:	f1bc 0f00 	cmp.w	ip, #0
   15bcc:	d1f6      	bne.n	15bbc <atomic_or.constprop.4+0x8>
   15bce:	f3bf 8f5b 	dmb	ish
   15bd2:	4770      	bx	lr
   15bd4:	20003058 	.word	0x20003058

00015bd8 <prov_link_opened>:
{
   15bd8:	b510      	push	{r4, lr}
   15bda:	4604      	mov	r4, r0
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   15bdc:	2002      	movs	r0, #2
   15bde:	f7ff ffe9 	bl	15bb4 <atomic_or.constprop.4>
	if (bt_mesh_prov->link_open) {
   15be2:	4b07      	ldr	r3, [pc, #28]	; (15c00 <prov_link_opened+0x28>)
   15be4:	681b      	ldr	r3, [r3, #0]
   15be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   15be8:	b10b      	cbz	r3, 15bee <prov_link_opened+0x16>
		bt_mesh_prov->link_open(bearer->type);
   15bea:	7820      	ldrb	r0, [r4, #0]
   15bec:	4798      	blx	r3
	bt_mesh_prov_link.bearer = bearer;
   15bee:	4b05      	ldr	r3, [pc, #20]	; (15c04 <prov_link_opened+0x2c>)
   15bf0:	605c      	str	r4, [r3, #4]
	if (bt_mesh_prov_link.role->link_opened) {
   15bf2:	689b      	ldr	r3, [r3, #8]
   15bf4:	681b      	ldr	r3, [r3, #0]
   15bf6:	b113      	cbz	r3, 15bfe <prov_link_opened+0x26>
}
   15bf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_mesh_prov_link.role->link_opened();
   15bfc:	4718      	bx	r3
}
   15bfe:	bd10      	pop	{r4, pc}
   15c00:	20003054 	.word	0x20003054
   15c04:	20003058 	.word	0x20003058

00015c08 <bt_mesh_prov_reset_state>:
{
   15c08:	b510      	push	{r4, lr}
	pub_key_cb.func = func ? func : pub_key_ready;
   15c0a:	4b15      	ldr	r3, [pc, #84]	; (15c60 <bt_mesh_prov_reset_state+0x58>)
	if (bt_mesh_prov_link.conf_inputs[0]) {
   15c0c:	4c15      	ldr	r4, [pc, #84]	; (15c64 <bt_mesh_prov_reset_state+0x5c>)
	pub_key_cb.func = func ? func : pub_key_ready;
   15c0e:	2800      	cmp	r0, #0
   15c10:	bf08      	it	eq
   15c12:	4618      	moveq	r0, r3
   15c14:	4b14      	ldr	r3, [pc, #80]	; (15c68 <bt_mesh_prov_reset_state+0x60>)
   15c16:	6018      	str	r0, [r3, #0]
	if (bt_mesh_prov_link.conf_inputs[0]) {
   15c18:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
   15c1c:	b11b      	cbz	r3, 15c26 <bt_mesh_prov_reset_state+0x1e>
		bt_mesh_attention(NULL, 0);
   15c1e:	2100      	movs	r1, #0
   15c20:	4608      	mov	r0, r1
   15c22:	f7fe fb75 	bl	14310 <bt_mesh_attention>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   15c26:	f3bf 8f5b 	dmb	ish
   15c2a:	2100      	movs	r1, #0
   15c2c:	e854 3f00 	ldrex	r3, [r4]
   15c30:	e844 1200 	strex	r2, r1, [r4]
   15c34:	2a00      	cmp	r2, #0
   15c36:	d1f9      	bne.n	15c2c <bt_mesh_prov_reset_state+0x24>
   15c38:	f3bf 8f5b 	dmb	ish
	(void)memset((uint8_t *)&bt_mesh_prov_link + offset, 0,
   15c3c:	f240 1205 	movw	r2, #261	; 0x105
   15c40:	480a      	ldr	r0, [pc, #40]	; (15c6c <bt_mesh_prov_reset_state+0x64>)
   15c42:	f017 fcda 	bl	2d5fa <memset>
	err = bt_pub_key_gen(&pub_key_cb);
   15c46:	4808      	ldr	r0, [pc, #32]	; (15c68 <bt_mesh_prov_reset_state+0x60>)
   15c48:	f7f4 f94a 	bl	9ee0 <bt_pub_key_gen>
	if (err) {
   15c4c:	4604      	mov	r4, r0
   15c4e:	b120      	cbz	r0, 15c5a <bt_mesh_prov_reset_state+0x52>
		BT_ERR("Failed to generate public key (%d)", err);
   15c50:	4602      	mov	r2, r0
   15c52:	2145      	movs	r1, #69	; 0x45
   15c54:	4806      	ldr	r0, [pc, #24]	; (15c70 <bt_mesh_prov_reset_state+0x68>)
   15c56:	f011 f98a 	bl	26f6e <printk>
}
   15c5a:	4620      	mov	r0, r4
   15c5c:	bd10      	pop	{r4, pc}
   15c5e:	bf00      	nop
   15c60:	00015ba5 	.word	0x00015ba5
   15c64:	20003058 	.word	0x20003058
   15c68:	2000317c 	.word	0x2000317c
   15c6c:	20003077 	.word	0x20003077
   15c70:	000340b9 	.word	0x000340b9

00015c74 <bt_mesh_prov_auth>:
{
   15c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15c78:	4614      	mov	r4, r2
   15c7a:	b08a      	sub	sp, #40	; 0x28
	switch (method) {
   15c7c:	2803      	cmp	r0, #3
   15c7e:	f200 80ac 	bhi.w	15dda <bt_mesh_prov_auth+0x166>
   15c82:	e8df f000 	tbb	[pc, r0]
   15c86:	0f02      	.short	0x0f02
   15c88:	9118      	.short	0x9118
		if (action || size) {
   15c8a:	ea51 0402 	orrs.w	r4, r1, r2
   15c8e:	f040 80a4 	bne.w	15dda <bt_mesh_prov_auth+0x166>
		(void)memset(bt_mesh_prov_link.auth, 0, sizeof(bt_mesh_prov_link.auth));
   15c92:	2210      	movs	r2, #16
   15c94:	4621      	mov	r1, r4
   15c96:	4852      	ldr	r0, [pc, #328]	; (15de0 <bt_mesh_prov_auth+0x16c>)
   15c98:	f017 fcaf 	bl	2d5fa <memset>
		return 0;
   15c9c:	4620      	mov	r0, r4
}
   15c9e:	b00a      	add	sp, #40	; 0x28
   15ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (action || size) {
   15ca4:	ea51 0402 	orrs.w	r4, r1, r2
   15ca8:	f040 8097 	bne.w	15dda <bt_mesh_prov_auth+0x166>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   15cac:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   15cb0:	f7ff ff80 	bl	15bb4 <atomic_or.constprop.4>
   15cb4:	e7f2      	b.n	15c9c <bt_mesh_prov_auth+0x28>
	switch (action) {
   15cb6:	2904      	cmp	r1, #4
   15cb8:	f200 808f 	bhi.w	15dda <bt_mesh_prov_auth+0x166>
   15cbc:	4b49      	ldr	r3, [pc, #292]	; (15de4 <bt_mesh_prov_auth+0x170>)
   15cbe:	5c5f      	ldrb	r7, [r3, r1]
		if (!output) {
   15cc0:	2f00      	cmp	r7, #0
   15cc2:	f000 808a 	beq.w	15dda <bt_mesh_prov_auth+0x166>
		if (!(bt_mesh_prov->output_actions & output)) {
   15cc6:	f8df 812c 	ldr.w	r8, [pc, #300]	; 15df4 <bt_mesh_prov_auth+0x180>
   15cca:	f8d8 3000 	ldr.w	r3, [r8]
   15cce:	8a5a      	ldrh	r2, [r3, #18]
   15cd0:	423a      	tst	r2, r7
   15cd2:	4645      	mov	r5, r8
   15cd4:	f000 8081 	beq.w	15dda <bt_mesh_prov_auth+0x166>
		if (size > bt_mesh_prov->output_size) {
   15cd8:	7c5b      	ldrb	r3, [r3, #17]
   15cda:	42a3      	cmp	r3, r4
   15cdc:	d37d      	bcc.n	15dda <bt_mesh_prov_auth+0x166>
   15cde:	2010      	movs	r0, #16
   15ce0:	f7ff ff68 	bl	15bb4 <atomic_or.constprop.4>
		if (output == BT_MESH_DISPLAY_STRING) {
   15ce4:	2f10      	cmp	r7, #16
   15ce6:	d131      	bne.n	15d4c <bt_mesh_prov_auth+0xd8>
			bt_rand(str, size);
   15ce8:	4621      	mov	r1, r4
   15cea:	a802      	add	r0, sp, #8
   15cec:	f016 f81f 	bl	2bd2e <bt_rand>
				str[i] %= 36;
   15cf0:	2624      	movs	r6, #36	; 0x24
   15cf2:	a802      	add	r0, sp, #8
			for (i = 0U; i < size; i++) {
   15cf4:	2100      	movs	r1, #0
   15cf6:	b2cb      	uxtb	r3, r1
   15cf8:	42a3      	cmp	r3, r4
   15cfa:	d317      	bcc.n	15d2c <bt_mesh_prov_auth+0xb8>
			str[size] = '\0';
   15cfc:	ab0a      	add	r3, sp, #40	; 0x28
   15cfe:	4423      	add	r3, r4
			memcpy(bt_mesh_prov_link.auth, str, size);
   15d00:	4e37      	ldr	r6, [pc, #220]	; (15de0 <bt_mesh_prov_auth+0x16c>)
			str[size] = '\0';
   15d02:	2700      	movs	r7, #0
   15d04:	f803 7c20 	strb.w	r7, [r3, #-32]
			memcpy(bt_mesh_prov_link.auth, str, size);
   15d08:	4622      	mov	r2, r4
   15d0a:	f240 1315 	movw	r3, #277	; 0x115
   15d0e:	a902      	add	r1, sp, #8
   15d10:	4630      	mov	r0, r6
   15d12:	f017 fc45 	bl	2d5a0 <__memcpy_chk>
   15d16:	f1c4 0210 	rsb	r2, r4, #16
   15d1a:	4639      	mov	r1, r7
   15d1c:	1930      	adds	r0, r6, r4
   15d1e:	f017 fc6c 	bl	2d5fa <memset>
			return bt_mesh_prov->output_string((char *)str);
   15d22:	682b      	ldr	r3, [r5, #0]
   15d24:	a802      	add	r0, sp, #8
   15d26:	6a1b      	ldr	r3, [r3, #32]
   15d28:	4798      	blx	r3
   15d2a:	e7b8      	b.n	15c9e <bt_mesh_prov_auth+0x2a>
				str[i] %= 36;
   15d2c:	7803      	ldrb	r3, [r0, #0]
   15d2e:	fbb3 f2f6 	udiv	r2, r3, r6
   15d32:	fb06 3212 	mls	r2, r6, r2, r3
   15d36:	b2d2      	uxtb	r2, r2
				if (str[i] < 10) {
   15d38:	b253      	sxtb	r3, r2
   15d3a:	2a09      	cmp	r2, #9
					str[i] += '0';
   15d3c:	bf94      	ite	ls
   15d3e:	3330      	addls	r3, #48	; 0x30
					str[i] += 'A' - 10;
   15d40:	3337      	addhi	r3, #55	; 0x37
   15d42:	b2db      	uxtb	r3, r3
   15d44:	f800 3b01 	strb.w	r3, [r0], #1
   15d48:	3101      	adds	r1, #1
   15d4a:	e7d4      	b.n	15cf6 <bt_mesh_prov_auth+0x82>
			uint32_t div[8] = { 10, 100, 1000, 10000, 100000,
   15d4c:	4e26      	ldr	r6, [pc, #152]	; (15de8 <bt_mesh_prov_auth+0x174>)
   15d4e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   15d50:	ad02      	add	r5, sp, #8
   15d52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   15d54:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   15d58:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
			bt_rand(&num, sizeof(num));
   15d5c:	2104      	movs	r1, #4
   15d5e:	eb0d 0001 	add.w	r0, sp, r1
   15d62:	f015 ffe4 	bl	2bd2e <bt_rand>
			num %= div[size - 1];
   15d66:	ab0a      	add	r3, sp, #40	; 0x28
   15d68:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   15d6c:	9a01      	ldr	r2, [sp, #4]
   15d6e:	f854 3c24 	ldr.w	r3, [r4, #-36]
   15d72:	fbb2 f1f3 	udiv	r1, r2, r3
   15d76:	fb03 2111 	mls	r1, r3, r1, r2
	dst[0] = val >> 8;
   15d7a:	4b1c      	ldr	r3, [pc, #112]	; (15dec <bt_mesh_prov_auth+0x178>)
   15d7c:	9101      	str	r1, [sp, #4]
	sys_put_be16(val >> 16, dst);
   15d7e:	0c0a      	lsrs	r2, r1, #16
	dst[0] = val >> 8;
   15d80:	0a10      	lsrs	r0, r2, #8
	dst[1] = val;
   15d82:	771a      	strb	r2, [r3, #28]
	dst[0] = val >> 8;
   15d84:	f3c1 2207 	ubfx	r2, r1, #8, #8
   15d88:	775a      	strb	r2, [r3, #29]
			(void)memset(bt_mesh_prov_link.auth, 0, 12);
   15d8a:	2200      	movs	r2, #0
	dst[1] = val;
   15d8c:	7799      	strb	r1, [r3, #30]
	dst[0] = val >> 8;
   15d8e:	76d8      	strb	r0, [r3, #27]
   15d90:	f8c3 200f 	str.w	r2, [r3, #15]
   15d94:	f8c3 2013 	str.w	r2, [r3, #19]
   15d98:	f8c3 2017 	str.w	r2, [r3, #23]
			return bt_mesh_prov->output_number(output, num);
   15d9c:	f8d8 3000 	ldr.w	r3, [r8]
   15da0:	4638      	mov	r0, r7
   15da2:	69db      	ldr	r3, [r3, #28]
   15da4:	4798      	blx	r3
   15da6:	e77a      	b.n	15c9e <bt_mesh_prov_auth+0x2a>
	switch (action) {
   15da8:	2903      	cmp	r1, #3
   15daa:	d816      	bhi.n	15dda <bt_mesh_prov_auth+0x166>
   15dac:	4b10      	ldr	r3, [pc, #64]	; (15df0 <bt_mesh_prov_auth+0x17c>)
   15dae:	5c5d      	ldrb	r5, [r3, r1]
		if (!input) {
   15db0:	b19d      	cbz	r5, 15dda <bt_mesh_prov_auth+0x166>
		if (!(bt_mesh_prov->input_actions & input)) {
   15db2:	4e10      	ldr	r6, [pc, #64]	; (15df4 <bt_mesh_prov_auth+0x180>)
   15db4:	6832      	ldr	r2, [r6, #0]
   15db6:	8ad1      	ldrh	r1, [r2, #22]
   15db8:	4229      	tst	r1, r5
   15dba:	d00e      	beq.n	15dda <bt_mesh_prov_auth+0x166>
		if (size > bt_mesh_prov->input_size) {
   15dbc:	7d13      	ldrb	r3, [r2, #20]
   15dbe:	42a3      	cmp	r3, r4
   15dc0:	d30b      	bcc.n	15dda <bt_mesh_prov_auth+0x166>
		if (input == BT_MESH_ENTER_STRING) {
   15dc2:	2d08      	cmp	r5, #8
   15dc4:	bf0c      	ite	eq
   15dc6:	4628      	moveq	r0, r5
   15dc8:	2004      	movne	r0, #4
   15dca:	f7ff fef3 	bl	15bb4 <atomic_or.constprop.4>
		return bt_mesh_prov->input(input, size);
   15dce:	6833      	ldr	r3, [r6, #0]
   15dd0:	4621      	mov	r1, r4
   15dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   15dd4:	4628      	mov	r0, r5
   15dd6:	4798      	blx	r3
   15dd8:	e761      	b.n	15c9e <bt_mesh_prov_auth+0x2a>
			return -EINVAL;
   15dda:	f06f 0015 	mvn.w	r0, #21
   15dde:	e75e      	b.n	15c9e <bt_mesh_prov_auth+0x2a>
   15de0:	20003067 	.word	0x20003067
   15de4:	0003408a 	.word	0x0003408a
   15de8:	0002e6ec 	.word	0x0002e6ec
   15dec:	20003058 	.word	0x20003058
   15df0:	0003408f 	.word	0x0003408f
   15df4:	20003054 	.word	0x20003054

00015df8 <bt_mesh_prov_get>:
}
   15df8:	4b01      	ldr	r3, [pc, #4]	; (15e00 <bt_mesh_prov_get+0x8>)
   15dfa:	6818      	ldr	r0, [r3, #0]
   15dfc:	4770      	bx	lr
   15dfe:	bf00      	nop
   15e00:	20003054 	.word	0x20003054

00015e04 <bt_mesh_prov_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15e04:	4b04      	ldr	r3, [pc, #16]	; (15e18 <bt_mesh_prov_active+0x14>)
   15e06:	f3bf 8f5b 	dmb	ish
   15e0a:	6818      	ldr	r0, [r3, #0]
   15e0c:	f3bf 8f5b 	dmb	ish
}
   15e10:	f3c0 0040 	ubfx	r0, r0, #1, #1
   15e14:	4770      	bx	lr
   15e16:	bf00      	nop
   15e18:	20003058 	.word	0x20003058

00015e1c <bt_mesh_prov_bearer_cb_get>:
};

const struct prov_bearer_cb *bt_mesh_prov_bearer_cb_get(void)
{
	return &prov_bearer_cb;
}
   15e1c:	4800      	ldr	r0, [pc, #0]	; (15e20 <bt_mesh_prov_bearer_cb_get+0x4>)
   15e1e:	4770      	bx	lr
   15e20:	0002f210 	.word	0x0002f210

00015e24 <bt_mesh_prov_complete>:

void bt_mesh_prov_complete(uint16_t net_idx, uint16_t addr)
{
	if (bt_mesh_prov->complete) {
   15e24:	4b02      	ldr	r3, [pc, #8]	; (15e30 <bt_mesh_prov_complete+0xc>)
   15e26:	681b      	ldr	r3, [r3, #0]
   15e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   15e2a:	b103      	cbz	r3, 15e2e <bt_mesh_prov_complete+0xa>
		bt_mesh_prov->complete(net_idx, addr);
   15e2c:	4718      	bx	r3
	}
}
   15e2e:	4770      	bx	lr
   15e30:	20003054 	.word	0x20003054

00015e34 <bt_mesh_prov_reset>:

void bt_mesh_prov_reset(void)
{
   15e34:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_BT_MESH_PB_ADV)) {
		pb_adv_reset();
   15e36:	f015 fb50 	bl	2b4da <pb_adv_reset>
	}

	if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT)) {
		pb_gatt_reset();
   15e3a:	f015 fb54 	bl	2b4e6 <pb_gatt_reset>
	}

	bt_mesh_prov_reset_state(NULL);
   15e3e:	2000      	movs	r0, #0
   15e40:	f7ff fee2 	bl	15c08 <bt_mesh_prov_reset_state>

	if (bt_mesh_prov->reset) {
   15e44:	4b03      	ldr	r3, [pc, #12]	; (15e54 <bt_mesh_prov_reset+0x20>)
   15e46:	681b      	ldr	r3, [r3, #0]
   15e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   15e4a:	b113      	cbz	r3, 15e52 <bt_mesh_prov_reset+0x1e>
		bt_mesh_prov->reset();
	}
}
   15e4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_mesh_prov->reset();
   15e50:	4718      	bx	r3
}
   15e52:	bd10      	pop	{r4, pc}
   15e54:	20003054 	.word	0x20003054

00015e58 <bt_mesh_prov_init>:

int bt_mesh_prov_init(const struct bt_mesh_prov *prov_info)
{
   15e58:	b508      	push	{r3, lr}
	if (!prov_info) {
   15e5a:	b150      	cbz	r0, 15e72 <bt_mesh_prov_init+0x1a>
		BT_ERR("No provisioning context provided");
		return -EINVAL;
	}

	bt_mesh_prov = prov_info;
   15e5c:	4b08      	ldr	r3, [pc, #32]	; (15e80 <bt_mesh_prov_init+0x28>)
   15e5e:	6018      	str	r0, [r3, #0]

	if (IS_ENABLED(CONFIG_BT_MESH_PB_ADV)) {
		pb_adv_init();
   15e60:	f001 f990 	bl	17184 <pb_adv_init>
	}

	if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT)) {
		pb_gatt_init();
   15e64:	f001 fa5a 	bl	1731c <pb_gatt_init>
	}

	return bt_mesh_prov_reset_state(NULL);
   15e68:	2000      	movs	r0, #0
}
   15e6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_mesh_prov_reset_state(NULL);
   15e6e:	f7ff becb 	b.w	15c08 <bt_mesh_prov_reset_state>
		BT_ERR("No provisioning context provided");
   15e72:	2145      	movs	r1, #69	; 0x45
   15e74:	4803      	ldr	r0, [pc, #12]	; (15e84 <bt_mesh_prov_init+0x2c>)
   15e76:	f011 f87a 	bl	26f6e <printk>
}
   15e7a:	f06f 0015 	mvn.w	r0, #21
   15e7e:	bd08      	pop	{r3, pc}
   15e80:	20003054 	.word	0x20003054
   15e84:	00034093 	.word	0x00034093

00015e88 <bt_mesh_prov_send>:
extern const struct bt_mesh_prov *bt_mesh_prov;

static inline int bt_mesh_prov_send(struct net_buf_simple *buf,
				    prov_bearer_send_complete_t cb)
{
	return bt_mesh_prov_link.bearer->send(buf, cb, NULL);
   15e88:	4b02      	ldr	r3, [pc, #8]	; (15e94 <bt_mesh_prov_send+0xc>)
   15e8a:	685b      	ldr	r3, [r3, #4]
   15e8c:	2200      	movs	r2, #0
   15e8e:	689b      	ldr	r3, [r3, #8]
   15e90:	4718      	bx	r3
   15e92:	bf00      	nop
   15e94:	20003058 	.word	0x20003058

00015e98 <prov_link_opened>:
	reset_state();
}

static void prov_link_opened(void)
{
	bt_mesh_prov_link.expect = PROV_INVITE;
   15e98:	4b02      	ldr	r3, [pc, #8]	; (15ea4 <prov_link_opened+0xc>)
   15e9a:	2200      	movs	r2, #0
   15e9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
}
   15ea0:	4770      	bx	lr
   15ea2:	bf00      	nop
   15ea4:	20003058 	.word	0x20003058

00015ea8 <send_input_complete>:
{
   15ea8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	PROV_BUF(buf, 1);
   15eaa:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   15eae:	ab01      	add	r3, sp, #4
	bt_mesh_prov_buf_init(&buf, PROV_INPUT_COMPLETE);
   15eb0:	2104      	movs	r1, #4
   15eb2:	a803      	add	r0, sp, #12
	PROV_BUF(buf, 1);
   15eb4:	9303      	str	r3, [sp, #12]
   15eb6:	e9cd 2304 	strd	r2, r3, [sp, #16]
	bt_mesh_prov_buf_init(&buf, PROV_INPUT_COMPLETE);
   15eba:	f015 fafd 	bl	2b4b8 <bt_mesh_prov_buf_init>
	if (bt_mesh_prov_send(&buf, NULL)) {
   15ebe:	2100      	movs	r1, #0
   15ec0:	a803      	add	r0, sp, #12
   15ec2:	f7ff ffe1 	bl	15e88 <bt_mesh_prov_send>
   15ec6:	b118      	cbz	r0, 15ed0 <send_input_complete+0x28>
		BT_ERR("Failed to send Provisioning Input Complete");
   15ec8:	2145      	movs	r1, #69	; 0x45
   15eca:	4805      	ldr	r0, [pc, #20]	; (15ee0 <send_input_complete+0x38>)
   15ecc:	f011 f84f 	bl	26f6e <printk>
	bt_mesh_prov_link.expect = PROV_CONFIRM;
   15ed0:	4b04      	ldr	r3, [pc, #16]	; (15ee4 <send_input_complete+0x3c>)
   15ed2:	2205      	movs	r2, #5
   15ed4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
}
   15ed8:	b007      	add	sp, #28
   15eda:	f85d fb04 	ldr.w	pc, [sp], #4
   15ede:	bf00      	nop
   15ee0:	0003458b 	.word	0x0003458b
   15ee4:	20003058 	.word	0x20003058

00015ee8 <prov_send_fail_msg>:
{
   15ee8:	b510      	push	{r4, lr}
   15eea:	b086      	sub	sp, #24
	PROV_BUF(buf, 2);
   15eec:	ab01      	add	r3, sp, #4
   15eee:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
   15ef2:	e9cd 2304 	strd	r2, r3, [sp, #16]
   15ef6:	9303      	str	r3, [sp, #12]
	bt_mesh_prov_link.expect = PROV_NO_PDU;
   15ef8:	4b0b      	ldr	r3, [pc, #44]	; (15f28 <prov_send_fail_msg+0x40>)
   15efa:	22ff      	movs	r2, #255	; 0xff
{
   15efc:	4604      	mov	r4, r0
	bt_mesh_prov_buf_init(&buf, PROV_FAILED);
   15efe:	2109      	movs	r1, #9
   15f00:	a803      	add	r0, sp, #12
	bt_mesh_prov_link.expect = PROV_NO_PDU;
   15f02:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	bt_mesh_prov_buf_init(&buf, PROV_FAILED);
   15f06:	f015 fad7 	bl	2b4b8 <bt_mesh_prov_buf_init>
	net_buf_simple_add_u8(&buf, err);
   15f0a:	4621      	mov	r1, r4
   15f0c:	a803      	add	r0, sp, #12
   15f0e:	f016 fd74 	bl	2c9fa <net_buf_simple_add_u8>
	if (bt_mesh_prov_send(&buf, NULL)) {
   15f12:	2100      	movs	r1, #0
   15f14:	a803      	add	r0, sp, #12
   15f16:	f7ff ffb7 	bl	15e88 <bt_mesh_prov_send>
   15f1a:	b118      	cbz	r0, 15f24 <prov_send_fail_msg+0x3c>
		BT_ERR("Failed to send Provisioning Failed message");
   15f1c:	2145      	movs	r1, #69	; 0x45
   15f1e:	4803      	ldr	r0, [pc, #12]	; (15f2c <prov_send_fail_msg+0x44>)
   15f20:	f011 f825 	bl	26f6e <printk>
}
   15f24:	b006      	add	sp, #24
   15f26:	bd10      	pop	{r4, pc}
   15f28:	20003058 	.word	0x20003058
   15f2c:	000344cf 	.word	0x000344cf

00015f30 <prov_invite>:
{
   15f30:	b530      	push	{r4, r5, lr}
   15f32:	b089      	sub	sp, #36	; 0x24
	if (data[0]) {
   15f34:	7801      	ldrb	r1, [r0, #0]
	PROV_BUF(buf, 12);
   15f36:	ab03      	add	r3, sp, #12
   15f38:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
{
   15f3c:	4604      	mov	r4, r0
	PROV_BUF(buf, 12);
   15f3e:	9300      	str	r3, [sp, #0]
   15f40:	e9cd 2301 	strd	r2, r3, [sp, #4]
	if (data[0]) {
   15f44:	b111      	cbz	r1, 15f4c <prov_invite+0x1c>
		bt_mesh_attention(NULL, data[0]);
   15f46:	2000      	movs	r0, #0
   15f48:	f7fe f9e2 	bl	14310 <bt_mesh_attention>
	bt_mesh_prov_link.conf_inputs[0] = data[0];
   15f4c:	4d27      	ldr	r5, [pc, #156]	; (15fec <prov_invite+0xbc>)
   15f4e:	7823      	ldrb	r3, [r4, #0]
   15f50:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
	bt_mesh_prov_buf_init(&buf, PROV_CAPABILITIES);
   15f54:	2101      	movs	r1, #1
   15f56:	4668      	mov	r0, sp
   15f58:	f015 faae 	bl	2b4b8 <bt_mesh_prov_buf_init>
	net_buf_simple_add_u8(&buf, bt_mesh_elem_count());
   15f5c:	f7fc f870 	bl	12040 <bt_mesh_elem_count>
   15f60:	4601      	mov	r1, r0
   15f62:	4668      	mov	r0, sp
   15f64:	f016 fd49 	bl	2c9fa <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&buf, bt_mesh_prov->static_val ? BIT(0) : 0x00);
   15f68:	4c21      	ldr	r4, [pc, #132]	; (15ff0 <prov_invite+0xc0>)
	net_buf_simple_add_be16(&buf, BIT(PROV_ALG_P256));
   15f6a:	2101      	movs	r1, #1
   15f6c:	4668      	mov	r0, sp
   15f6e:	f016 fd54 	bl	2ca1a <net_buf_simple_add_be16>
	net_buf_simple_add_u8(&buf, PUB_KEY_NO_OOB);
   15f72:	2100      	movs	r1, #0
   15f74:	4668      	mov	r0, sp
   15f76:	f016 fd40 	bl	2c9fa <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&buf, bt_mesh_prov->static_val ? BIT(0) : 0x00);
   15f7a:	6823      	ldr	r3, [r4, #0]
   15f7c:	68d9      	ldr	r1, [r3, #12]
   15f7e:	3100      	adds	r1, #0
   15f80:	bf18      	it	ne
   15f82:	2101      	movne	r1, #1
   15f84:	4668      	mov	r0, sp
   15f86:	f016 fd38 	bl	2c9fa <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&buf, bt_mesh_prov->output_size);
   15f8a:	6823      	ldr	r3, [r4, #0]
   15f8c:	4668      	mov	r0, sp
   15f8e:	7c59      	ldrb	r1, [r3, #17]
   15f90:	f016 fd33 	bl	2c9fa <net_buf_simple_add_u8>
	net_buf_simple_add_be16(&buf, bt_mesh_prov->output_actions);
   15f94:	6823      	ldr	r3, [r4, #0]
   15f96:	4668      	mov	r0, sp
   15f98:	8a59      	ldrh	r1, [r3, #18]
   15f9a:	f016 fd3e 	bl	2ca1a <net_buf_simple_add_be16>
	net_buf_simple_add_u8(&buf, bt_mesh_prov->input_size);
   15f9e:	6823      	ldr	r3, [r4, #0]
   15fa0:	4668      	mov	r0, sp
   15fa2:	7d19      	ldrb	r1, [r3, #20]
   15fa4:	f016 fd29 	bl	2c9fa <net_buf_simple_add_u8>
	net_buf_simple_add_be16(&buf, bt_mesh_prov->input_actions);
   15fa8:	6823      	ldr	r3, [r4, #0]
   15faa:	4668      	mov	r0, sp
   15fac:	8ad9      	ldrh	r1, [r3, #22]
   15fae:	f016 fd34 	bl	2ca1a <net_buf_simple_add_be16>
	memcpy(&bt_mesh_prov_link.conf_inputs[1], &buf.data[1], 11);
   15fb2:	9b00      	ldr	r3, [sp, #0]
   15fb4:	f853 1f01 	ldr.w	r1, [r3, #1]!
   15fb8:	f8c5 1081 	str.w	r1, [r5, #129]	; 0x81
   15fbc:	6859      	ldr	r1, [r3, #4]
   15fbe:	f8c5 1085 	str.w	r1, [r5, #133]	; 0x85
   15fc2:	8919      	ldrh	r1, [r3, #8]
   15fc4:	f8a5 1089 	strh.w	r1, [r5, #137]	; 0x89
   15fc8:	7a9b      	ldrb	r3, [r3, #10]
   15fca:	f885 308b 	strb.w	r3, [r5, #139]	; 0x8b
	if (bt_mesh_prov_send(&buf, NULL)) {
   15fce:	2100      	movs	r1, #0
   15fd0:	4668      	mov	r0, sp
   15fd2:	f7ff ff59 	bl	15e88 <bt_mesh_prov_send>
   15fd6:	b128      	cbz	r0, 15fe4 <prov_invite+0xb4>
		BT_ERR("Failed to send capabilities");
   15fd8:	2145      	movs	r1, #69	; 0x45
   15fda:	4806      	ldr	r0, [pc, #24]	; (15ff4 <prov_invite+0xc4>)
   15fdc:	f010 ffc7 	bl	26f6e <printk>
}
   15fe0:	b009      	add	sp, #36	; 0x24
   15fe2:	bd30      	pop	{r4, r5, pc}
	bt_mesh_prov_link.expect = PROV_START;
   15fe4:	2302      	movs	r3, #2
   15fe6:	f885 303f 	strb.w	r3, [r5, #63]	; 0x3f
   15fea:	e7f9      	b.n	15fe0 <prov_invite+0xb0>
   15fec:	20003058 	.word	0x20003058
   15ff0:	20003054 	.word	0x20003054
   15ff4:	000343b4 	.word	0x000343b4

00015ff8 <prov_link_closed>:
	return bt_mesh_prov_reset_state(pub_key_ready);
   15ff8:	4801      	ldr	r0, [pc, #4]	; (16000 <prov_link_closed+0x8>)
   15ffa:	f7ff be05 	b.w	15c08 <bt_mesh_prov_reset_state>
   15ffe:	bf00      	nop
   16000:	000162f1 	.word	0x000162f1

00016004 <prov_random>:
{
   16004:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!memcmp(data, bt_mesh_prov_link.rand, 16)) {
   16006:	4c31      	ldr	r4, [pc, #196]	; (160cc <prov_random+0xc8>)
{
   16008:	b08f      	sub	sp, #60	; 0x3c
	if (!memcmp(data, bt_mesh_prov_link.rand, 16)) {
   1600a:	2210      	movs	r2, #16
   1600c:	4621      	mov	r1, r4
{
   1600e:	4606      	mov	r6, r0
	if (!memcmp(data, bt_mesh_prov_link.rand, 16)) {
   16010:	f017 faaa 	bl	2d568 <memcmp>
   16014:	b940      	cbnz	r0, 16028 <prov_random+0x24>
		BT_ERR("Random value is identical to ours, rejecting.");
   16016:	482e      	ldr	r0, [pc, #184]	; (160d0 <prov_random+0xcc>)
   16018:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Invalid confirmation value");
   1601a:	f010 ffa8 	bl	26f6e <printk>
	prov_send_fail_msg(reason);
   1601e:	2004      	movs	r0, #4
   16020:	f7ff ff62 	bl	15ee8 <prov_send_fail_msg>
}
   16024:	b00f      	add	sp, #60	; 0x3c
   16026:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_mesh_prov_conf(bt_mesh_prov_link.conf_key, data,
   16028:	466b      	mov	r3, sp
   1602a:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
   1602e:	4631      	mov	r1, r6
   16030:	f104 0020 	add.w	r0, r4, #32
   16034:	f014 fe18 	bl	2ac68 <bt_mesh_prov_conf>
   16038:	b128      	cbz	r0, 16046 <prov_random+0x42>
		BT_ERR("Unable to calculate confirmation verification");
   1603a:	4826      	ldr	r0, [pc, #152]	; (160d4 <prov_random+0xd0>)
   1603c:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Failed to generate provisioning salt");
   1603e:	f010 ff96 	bl	26f6e <printk>
	prov_send_fail_msg(reason);
   16042:	2007      	movs	r0, #7
   16044:	e7ec      	b.n	16020 <prov_random+0x1c>
	if (memcmp(conf_verify, bt_mesh_prov_link.conf, 16)) {
   16046:	f1a4 0110 	sub.w	r1, r4, #16
   1604a:	2210      	movs	r2, #16
   1604c:	4668      	mov	r0, sp
   1604e:	f017 fa8b 	bl	2d568 <memcmp>
   16052:	4601      	mov	r1, r0
   16054:	b110      	cbz	r0, 1605c <prov_random+0x58>
		BT_ERR("Invalid confirmation value");
   16056:	2145      	movs	r1, #69	; 0x45
   16058:	481f      	ldr	r0, [pc, #124]	; (160d8 <prov_random+0xd4>)
   1605a:	e7de      	b.n	1601a <prov_random+0x16>
static inline int bt_mesh_prov_salt(const uint8_t conf_salt[16],
				    const uint8_t prov_rand[16],
				    const uint8_t dev_rand[16],
				    uint8_t prov_salt[16])
{
	const uint8_t prov_salt_key[16] = { 0 };
   1605c:	2510      	movs	r5, #16
   1605e:	462a      	mov	r2, r5
   16060:	eb0d 0005 	add.w	r0, sp, r5
   16064:	f017 fac9 	bl	2d5fa <memset>
	struct bt_mesh_sg sg[] = {
   16068:	1963      	adds	r3, r4, r5
   1606a:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
		{ conf_salt, 16 },
		{ prov_rand, 16 },
		{ dev_rand, 16 },
	};

	return bt_mesh_aes_cmac(prov_salt_key, sg, ARRAY_SIZE(sg), prov_salt);
   1606e:	ae08      	add	r6, sp, #32
	struct bt_mesh_sg sg[] = {
   16070:	e9cd 3508 	strd	r3, r5, [sp, #32]
	return bt_mesh_aes_cmac(prov_salt_key, sg, ARRAY_SIZE(sg), prov_salt);
   16074:	2203      	movs	r2, #3
   16076:	f104 03c1 	add.w	r3, r4, #193	; 0xc1
   1607a:	4631      	mov	r1, r6
   1607c:	eb0d 0005 	add.w	r0, sp, r5
	struct bt_mesh_sg sg[] = {
   16080:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
	return bt_mesh_aes_cmac(prov_salt_key, sg, ARRAY_SIZE(sg), prov_salt);
   16084:	f014 fc64 	bl	2a950 <bt_mesh_aes_cmac>
	if (bt_mesh_prov_salt(bt_mesh_prov_link.conf_salt, data,
   16088:	4607      	mov	r7, r0
   1608a:	b110      	cbz	r0, 16092 <prov_random+0x8e>
		BT_ERR("Failed to generate provisioning salt");
   1608c:	2145      	movs	r1, #69	; 0x45
   1608e:	4813      	ldr	r0, [pc, #76]	; (160dc <prov_random+0xd8>)
   16090:	e7d5      	b.n	1603e <prov_random+0x3a>
	PROV_BUF(rnd, 17);
   16092:	f44f 13b0 	mov.w	r3, #1441792	; 0x160000
	bt_mesh_prov_buf_init(&rnd, PROV_RANDOM);
   16096:	2106      	movs	r1, #6
   16098:	a804      	add	r0, sp, #16
	PROV_BUF(rnd, 17);
   1609a:	e9cd 3605 	strd	r3, r6, [sp, #20]
   1609e:	9604      	str	r6, [sp, #16]
	bt_mesh_prov_buf_init(&rnd, PROV_RANDOM);
   160a0:	f015 fa0a 	bl	2b4b8 <bt_mesh_prov_buf_init>
	net_buf_simple_add_mem(&rnd, bt_mesh_prov_link.rand, 16);
   160a4:	4621      	mov	r1, r4
   160a6:	462a      	mov	r2, r5
   160a8:	a804      	add	r0, sp, #16
   160aa:	f016 fc9a 	bl	2c9e2 <net_buf_simple_add_mem>
	if (bt_mesh_prov_send(&rnd, NULL)) {
   160ae:	4639      	mov	r1, r7
   160b0:	a804      	add	r0, sp, #16
   160b2:	f7ff fee9 	bl	15e88 <bt_mesh_prov_send>
   160b6:	b120      	cbz	r0, 160c2 <prov_random+0xbe>
		BT_ERR("Failed to send Provisioning Random");
   160b8:	2145      	movs	r1, #69	; 0x45
   160ba:	4809      	ldr	r0, [pc, #36]	; (160e0 <prov_random+0xdc>)
   160bc:	f010 ff57 	bl	26f6e <printk>
		return;
   160c0:	e7b0      	b.n	16024 <prov_random+0x20>
	bt_mesh_prov_link.expect = PROV_DATA;
   160c2:	2307      	movs	r3, #7
   160c4:	f804 3c11 	strb.w	r3, [r4, #-17]
   160c8:	e7ac      	b.n	16024 <prov_random+0x20>
   160ca:	bf00      	nop
   160cc:	200030a8 	.word	0x200030a8
   160d0:	000343f7 	.word	0x000343f7
   160d4:	0003442a 	.word	0x0003442a
   160d8:	0003445d 	.word	0x0003445d
   160dc:	0003447d 	.word	0x0003447d
   160e0:	000344a7 	.word	0x000344a7

000160e4 <prov_data>:
{
   160e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   160e8:	b09f      	sub	sp, #124	; 0x7c
	PROV_BUF(msg, 1);
   160ea:	ab06      	add	r3, sp, #24
   160ec:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   160f0:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
	return bt_mesh_k1(dhkey, 32, prov_salt, "prsk", session_key);
   160f4:	4a4f      	ldr	r2, [pc, #316]	; (16234 <prov_data+0x150>)
   160f6:	9308      	str	r3, [sp, #32]
   160f8:	ae0f      	add	r6, sp, #60	; 0x3c
{
   160fa:	4680      	mov	r8, r0
   160fc:	9600      	str	r6, [sp, #0]
   160fe:	4b4e      	ldr	r3, [pc, #312]	; (16238 <prov_data+0x154>)
   16100:	2120      	movs	r1, #32
   16102:	f1a2 00f2 	sub.w	r0, r2, #242	; 0xf2
   16106:	f014 fc66 	bl	2a9d6 <bt_mesh_k1>
	if (err) {
   1610a:	b128      	cbz	r0, 16118 <prov_data+0x34>
		BT_ERR("Unable to generate session key");
   1610c:	484b      	ldr	r0, [pc, #300]	; (1623c <prov_data+0x158>)
   1610e:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Unable to generate session nonce");
   16110:	f010 ff2d 	bl	26f6e <printk>
	prov_send_fail_msg(reason);
   16114:	2007      	movs	r0, #7
   16116:	e028      	b.n	1616a <prov_data+0x86>
	err = bt_mesh_k1(dhkey, 32, prov_salt, "prsn", tmp);
   16118:	4a46      	ldr	r2, [pc, #280]	; (16234 <prov_data+0x150>)
   1611a:	4b49      	ldr	r3, [pc, #292]	; (16240 <prov_data+0x15c>)
   1611c:	ad17      	add	r5, sp, #92	; 0x5c
   1611e:	9500      	str	r5, [sp, #0]
   16120:	2120      	movs	r1, #32
   16122:	f1a2 00f2 	sub.w	r0, r2, #242	; 0xf2
   16126:	f014 fc56 	bl	2a9d6 <bt_mesh_k1>
	if (!err) {
   1612a:	2800      	cmp	r0, #0
   1612c:	d17e      	bne.n	1622c <prov_data+0x148>
		memcpy(nonce, tmp + 3, 13);
   1612e:	aa0b      	add	r2, sp, #44	; 0x2c
   16130:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   16134:	f10d 0c67 	add.w	ip, sp, #103	; 0x67
   16138:	4617      	mov	r7, r2
   1613a:	6818      	ldr	r0, [r3, #0]
   1613c:	6859      	ldr	r1, [r3, #4]
   1613e:	4614      	mov	r4, r2
   16140:	c403      	stmia	r4!, {r0, r1}
   16142:	3308      	adds	r3, #8
   16144:	4563      	cmp	r3, ip
   16146:	4622      	mov	r2, r4
   16148:	d1f7      	bne.n	1613a <prov_data+0x56>
   1614a:	6818      	ldr	r0, [r3, #0]
   1614c:	6020      	str	r0, [r4, #0]
   1614e:	791b      	ldrb	r3, [r3, #4]
   16150:	7123      	strb	r3, [r4, #4]
	err = bt_mesh_prov_decrypt(session_key, nonce, data, pdu);
   16152:	4642      	mov	r2, r8
   16154:	462b      	mov	r3, r5
   16156:	4639      	mov	r1, r7
   16158:	4630      	mov	r0, r6
   1615a:	f014 fd92 	bl	2ac82 <bt_mesh_prov_decrypt>
	if (err) {
   1615e:	b138      	cbz	r0, 16170 <prov_data+0x8c>
		BT_ERR("Unable to decrypt provisioning data");
   16160:	4838      	ldr	r0, [pc, #224]	; (16244 <prov_data+0x160>)
   16162:	2145      	movs	r1, #69	; 0x45
   16164:	f010 ff03 	bl	26f6e <printk>
	prov_send_fail_msg(reason);
   16168:	2006      	movs	r0, #6
   1616a:	f7ff febd 	bl	15ee8 <prov_send_fail_msg>
		return;
   1616e:	e033      	b.n	161d8 <prov_data+0xf4>
	return bt_mesh_k1(dhkey, 32, prov_salt, "prdk", dev_key);
   16170:	4a30      	ldr	r2, [pc, #192]	; (16234 <prov_data+0x150>)
   16172:	4b35      	ldr	r3, [pc, #212]	; (16248 <prov_data+0x164>)
   16174:	af13      	add	r7, sp, #76	; 0x4c
   16176:	9700      	str	r7, [sp, #0]
   16178:	2120      	movs	r1, #32
   1617a:	f1a2 00f2 	sub.w	r0, r2, #242	; 0xf2
   1617e:	f014 fc2a 	bl	2a9d6 <bt_mesh_k1>
	if (err) {
   16182:	4604      	mov	r4, r0
   16184:	b110      	cbz	r0, 1618c <prov_data+0xa8>
		BT_ERR("Unable to generate device key");
   16186:	2145      	movs	r1, #69	; 0x45
   16188:	4830      	ldr	r0, [pc, #192]	; (1624c <prov_data+0x168>)
   1618a:	e7c1      	b.n	16110 <prov_data+0x2c>
	flags = pdu[18];
   1618c:	f89d 306e 	ldrb.w	r3, [sp, #110]	; 0x6e
   16190:	9302      	str	r3, [sp, #8]
	return ((uint16_t)src[0] << 8) | src[1];
   16192:	f89d 306f 	ldrb.w	r3, [sp, #111]	; 0x6f
   16196:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
   1619a:	9305      	str	r3, [sp, #20]
	bt_mesh_prov_buf_init(&msg, PROV_COMPLETE);
   1619c:	2108      	movs	r1, #8
   1619e:	f89d 3071 	ldrb.w	r3, [sp, #113]	; 0x71
   161a2:	9303      	str	r3, [sp, #12]
   161a4:	a808      	add	r0, sp, #32
   161a6:	9204      	str	r2, [sp, #16]
   161a8:	f89d a06c 	ldrb.w	sl, [sp, #108]	; 0x6c
   161ac:	f89d 906d 	ldrb.w	r9, [sp, #109]	; 0x6d
   161b0:	f89d 8070 	ldrb.w	r8, [sp, #112]	; 0x70
   161b4:	f89d 6072 	ldrb.w	r6, [sp, #114]	; 0x72
   161b8:	f89d b073 	ldrb.w	fp, [sp, #115]	; 0x73
   161bc:	f015 f97c 	bl	2b4b8 <bt_mesh_prov_buf_init>
	if (bt_mesh_prov_send(&msg, NULL)) {
   161c0:	4621      	mov	r1, r4
   161c2:	a808      	add	r0, sp, #32
   161c4:	f7ff fe60 	bl	15e88 <bt_mesh_prov_send>
   161c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   161cc:	4604      	mov	r4, r0
   161ce:	b130      	cbz	r0, 161de <prov_data+0xfa>
		BT_ERR("Failed to send Provisioning Complete");
   161d0:	2145      	movs	r1, #69	; 0x45
   161d2:	481f      	ldr	r0, [pc, #124]	; (16250 <prov_data+0x16c>)
   161d4:	f010 fecb 	bl	26f6e <printk>
}
   161d8:	b01f      	add	sp, #124	; 0x7c
   161da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bt_mesh_prov_link.expect = PROV_NO_PDU;
   161de:	491d      	ldr	r1, [pc, #116]	; (16254 <prov_data+0x170>)
   161e0:	20ff      	movs	r0, #255	; 0xff
   161e2:	f881 003f 	strb.w	r0, [r1, #63]	; 0x3f
	return bt_mesh_prov_link.bearer &&
   161e6:	6849      	ldr	r1, [r1, #4]
   161e8:	b119      	cbz	r1, 161f2 <prov_data+0x10e>
   161ea:	780c      	ldrb	r4, [r1, #0]
   161ec:	1ea1      	subs	r1, r4, #2
   161ee:	424c      	negs	r4, r1
   161f0:	414c      	adcs	r4, r1
	return ((uint32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   161f2:	9903      	ldr	r1, [sp, #12]
	err = bt_mesh_provision(pdu, net_idx, flags, iv_index, addr, dev_key);
   161f4:	9701      	str	r7, [sp, #4]
   161f6:	ea46 2601 	orr.w	r6, r6, r1, lsl #8
   161fa:	ea42 220b 	orr.w	r2, r2, fp, lsl #8
   161fe:	ea48 2303 	orr.w	r3, r8, r3, lsl #8
   16202:	9200      	str	r2, [sp, #0]
   16204:	ea46 4303 	orr.w	r3, r6, r3, lsl #16
   16208:	9a02      	ldr	r2, [sp, #8]
   1620a:	ea49 210a 	orr.w	r1, r9, sl, lsl #8
   1620e:	4628      	mov	r0, r5
   16210:	f7f7 fad6 	bl	d7c0 <bt_mesh_provision>
	if (err) {
   16214:	4602      	mov	r2, r0
   16216:	b120      	cbz	r0, 16222 <prov_data+0x13e>
		BT_ERR("Failed to provision (err %d)", err);
   16218:	2145      	movs	r1, #69	; 0x45
   1621a:	480f      	ldr	r0, [pc, #60]	; (16258 <prov_data+0x174>)
   1621c:	f010 fea7 	bl	26f6e <printk>
		return;
   16220:	e7da      	b.n	161d8 <prov_data+0xf4>
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) && identity_enable) {
   16222:	2c00      	cmp	r4, #0
   16224:	d0d8      	beq.n	161d8 <prov_data+0xf4>
		bt_mesh_proxy_identity_enable();
   16226:	f001 fbbd 	bl	179a4 <bt_mesh_proxy_identity_enable>
   1622a:	e7d5      	b.n	161d8 <prov_data+0xf4>
		BT_ERR("Unable to generate session nonce");
   1622c:	2145      	movs	r1, #69	; 0x45
   1622e:	480b      	ldr	r0, [pc, #44]	; (1625c <prov_data+0x178>)
   16230:	e76e      	b.n	16110 <prov_data+0x2c>
   16232:	bf00      	nop
   16234:	20003169 	.word	0x20003169
   16238:	0003424c 	.word	0x0003424c
   1623c:	00034251 	.word	0x00034251
   16240:	00034275 	.word	0x00034275
   16244:	0003427a 	.word	0x0003427a
   16248:	000342a3 	.word	0x000342a3
   1624c:	000342a8 	.word	0x000342a8
   16250:	000342cb 	.word	0x000342cb
   16254:	20003058 	.word	0x20003058
   16258:	000342f5 	.word	0x000342f5
   1625c:	00034317 	.word	0x00034317

00016260 <sys_memcpy_swap.constprop.10>:
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   16260:	4288      	cmp	r0, r1
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
   16262:	b570      	push	{r4, r5, r6, lr}
   16264:	4604      	mov	r4, r0
   16266:	460e      	mov	r6, r1
   16268:	f101 0520 	add.w	r5, r1, #32
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1626c:	d915      	bls.n	1629a <sys_memcpy_swap.constprop.10+0x3a>
   1626e:	42a8      	cmp	r0, r5
   16270:	d20a      	bcs.n	16288 <sys_memcpy_swap.constprop.10+0x28>
   16272:	490c      	ldr	r1, [pc, #48]	; (162a4 <sys_memcpy_swap.constprop.10+0x44>)
   16274:	480c      	ldr	r0, [pc, #48]	; (162a8 <sys_memcpy_swap.constprop.10+0x48>)
   16276:	f240 2219 	movw	r2, #537	; 0x219
   1627a:	f010 fe78 	bl	26f6e <printk>
   1627e:	f240 2119 	movw	r1, #537	; 0x219
   16282:	4808      	ldr	r0, [pc, #32]	; (162a4 <sys_memcpy_swap.constprop.10+0x44>)
   16284:	f011 f8ec 	bl	27460 <assert_post_action>
	for (; length > 0; length--) {
   16288:	462b      	mov	r3, r5
   1628a:	3c01      	subs	r4, #1
		*pdst++ = *psrc--;
   1628c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   16290:	f804 2f01 	strb.w	r2, [r4, #1]!
	for (; length > 0; length--) {
   16294:	42b3      	cmp	r3, r6
   16296:	d1f9      	bne.n	1628c <sys_memcpy_swap.constprop.10+0x2c>
}
   16298:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1629a:	d0ea      	beq.n	16272 <sys_memcpy_swap.constprop.10+0x12>
   1629c:	f100 0320 	add.w	r3, r0, #32
   162a0:	4299      	cmp	r1, r3
   162a2:	e7e5      	b.n	16270 <sys_memcpy_swap.constprop.10+0x10>
   162a4:	000306a9 	.word	0x000306a9
   162a8:	0002fa94 	.word	0x0002fa94

000162ac <prov_dh_key_gen>:
{
   162ac:	b500      	push	{lr}
   162ae:	b091      	sub	sp, #68	; 0x44
	sys_memcpy_swap(remote_pk_le, remote_pk, 32);
   162b0:	490b      	ldr	r1, [pc, #44]	; (162e0 <prov_dh_key_gen+0x34>)
   162b2:	4668      	mov	r0, sp
   162b4:	f7ff ffd4 	bl	16260 <sys_memcpy_swap.constprop.10>
	sys_memcpy_swap(&remote_pk_le[32], &remote_pk[32], 32);
   162b8:	490a      	ldr	r1, [pc, #40]	; (162e4 <prov_dh_key_gen+0x38>)
   162ba:	a808      	add	r0, sp, #32
   162bc:	f7ff ffd0 	bl	16260 <sys_memcpy_swap.constprop.10>
	if (bt_dh_key_gen(remote_pk_le, prov_dh_key_cb)) {
   162c0:	4909      	ldr	r1, [pc, #36]	; (162e8 <prov_dh_key_gen+0x3c>)
   162c2:	4668      	mov	r0, sp
   162c4:	f7f3 fe5a 	bl	9f7c <bt_dh_key_gen>
   162c8:	b130      	cbz	r0, 162d8 <prov_dh_key_gen+0x2c>
		BT_ERR("Failed to generate DHKey");
   162ca:	4808      	ldr	r0, [pc, #32]	; (162ec <prov_dh_key_gen+0x40>)
   162cc:	2145      	movs	r1, #69	; 0x45
   162ce:	f010 fe4e 	bl	26f6e <printk>
	prov_send_fail_msg(reason);
   162d2:	2007      	movs	r0, #7
   162d4:	f7ff fe08 	bl	15ee8 <prov_send_fail_msg>
}
   162d8:	b011      	add	sp, #68	; 0x44
   162da:	f85d fb04 	ldr.w	pc, [sp], #4
   162de:	bf00      	nop
   162e0:	200030e9 	.word	0x200030e9
   162e4:	20003109 	.word	0x20003109
   162e8:	000163f1 	.word	0x000163f1
   162ec:	00034396 	.word	0x00034396

000162f0 <pub_key_ready>:
	if (!pkey) {
   162f0:	b918      	cbnz	r0, 162fa <pub_key_ready+0xa>
		BT_WARN("Public key not available");
   162f2:	2157      	movs	r1, #87	; 0x57
   162f4:	480a      	ldr	r0, [pc, #40]	; (16320 <pub_key_ready+0x30>)
   162f6:	f010 be3a 	b.w	26f6e <printk>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   162fa:	4b0a      	ldr	r3, [pc, #40]	; (16324 <pub_key_ready+0x34>)
   162fc:	f3bf 8f5b 	dmb	ish
   16300:	e853 2f00 	ldrex	r2, [r3]
   16304:	f022 0101 	bic.w	r1, r2, #1
   16308:	e843 1000 	strex	r0, r1, [r3]
   1630c:	2800      	cmp	r0, #0
   1630e:	d1f7      	bne.n	16300 <pub_key_ready+0x10>
   16310:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_mesh_prov_link.flags, WAIT_PUB_KEY)) {
   16314:	07d3      	lsls	r3, r2, #31
   16316:	d501      	bpl.n	1631c <pub_key_ready+0x2c>
		prov_dh_key_gen();
   16318:	f7ff bfc8 	b.w	162ac <prov_dh_key_gen>
}
   1631c:	4770      	bx	lr
   1631e:	bf00      	nop
   16320:	00034161 	.word	0x00034161
   16324:	20003058 	.word	0x20003058

00016328 <atomic_test_bit.constprop.12>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16328:	4b05      	ldr	r3, [pc, #20]	; (16340 <atomic_test_bit.constprop.12+0x18>)
   1632a:	f3bf 8f5b 	dmb	ish
   1632e:	681b      	ldr	r3, [r3, #0]
   16330:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   16334:	fa43 f000 	asr.w	r0, r3, r0
}
   16338:	f000 0001 	and.w	r0, r0, #1
   1633c:	4770      	bx	lr
   1633e:	bf00      	nop
   16340:	20003058 	.word	0x20003058

00016344 <prov_start>:
{
   16344:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (data[0] != PROV_ALG_P256) {
   16346:	7802      	ldrb	r2, [r0, #0]
{
   16348:	4604      	mov	r4, r0
	if (data[0] != PROV_ALG_P256) {
   1634a:	b14a      	cbz	r2, 16360 <prov_start+0x1c>
		BT_ERR("Unknown algorithm 0x%02x", data[0]);
   1634c:	4822      	ldr	r0, [pc, #136]	; (163d8 <prov_start+0x94>)
   1634e:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Invalid public key type: 0x%02x", data[1]);
   16350:	f010 fe0d 	bl	26f6e <printk>
	prov_send_fail_msg(reason);
   16354:	2002      	movs	r0, #2
}
   16356:	b003      	add	sp, #12
   16358:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	prov_send_fail_msg(reason);
   1635c:	f7ff bdc4 	b.w	15ee8 <prov_send_fail_msg>
	if (data[1] != PUB_KEY_NO_OOB) {
   16360:	7842      	ldrb	r2, [r0, #1]
   16362:	b112      	cbz	r2, 1636a <prov_start+0x26>
		BT_ERR("Invalid public key type: 0x%02x", data[1]);
   16364:	2145      	movs	r1, #69	; 0x45
   16366:	481d      	ldr	r0, [pc, #116]	; (163dc <prov_start+0x98>)
   16368:	e7f2      	b.n	16350 <prov_start+0xc>
	memcpy(&bt_mesh_prov_link.conf_inputs[12], data, 5);
   1636a:	4b1d      	ldr	r3, [pc, #116]	; (163e0 <prov_start+0x9c>)
   1636c:	6800      	ldr	r0, [r0, #0]
   1636e:	6018      	str	r0, [r3, #0]
   16370:	7922      	ldrb	r2, [r4, #4]
   16372:	711a      	strb	r2, [r3, #4]
	bt_mesh_prov_link.expect = PROV_PUB_KEY;
   16374:	2203      	movs	r2, #3
   16376:	f803 2c4d 	strb.w	r2, [r3, #-77]
	if (bt_mesh_prov_auth(data[2], data[3], data[4]) < 0) {
   1637a:	7922      	ldrb	r2, [r4, #4]
   1637c:	78e1      	ldrb	r1, [r4, #3]
   1637e:	78a0      	ldrb	r0, [r4, #2]
   16380:	f7ff fc78 	bl	15c74 <bt_mesh_prov_auth>
   16384:	2800      	cmp	r0, #0
   16386:	da0a      	bge.n	1639e <prov_start+0x5a>
		BT_ERR("Invalid authentication method: 0x%02x; "
   16388:	7923      	ldrb	r3, [r4, #4]
   1638a:	9300      	str	r3, [sp, #0]
   1638c:	4815      	ldr	r0, [pc, #84]	; (163e4 <prov_start+0xa0>)
   1638e:	78e3      	ldrb	r3, [r4, #3]
   16390:	78a2      	ldrb	r2, [r4, #2]
   16392:	2145      	movs	r1, #69	; 0x45
   16394:	f010 fdeb 	bl	26f6e <printk>
	prov_send_fail_msg(reason);
   16398:	2002      	movs	r0, #2
   1639a:	f7ff fda5 	bl	15ee8 <prov_send_fail_msg>
	if (atomic_test_bit(bt_mesh_prov_link.flags, OOB_STATIC_KEY)) {
   1639e:	200c      	movs	r0, #12
   163a0:	f7ff ffc2 	bl	16328 <atomic_test_bit.constprop.12>
   163a4:	b1a8      	cbz	r0, 163d2 <prov_start+0x8e>
		memcpy(bt_mesh_prov_link.auth + 16 - bt_mesh_prov->static_val_len,
   163a6:	4b10      	ldr	r3, [pc, #64]	; (163e8 <prov_start+0xa4>)
   163a8:	4d10      	ldr	r5, [pc, #64]	; (163ec <prov_start+0xa8>)
   163aa:	681c      	ldr	r4, [r3, #0]
   163ac:	7c22      	ldrb	r2, [r4, #16]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   163ae:	68e1      	ldr	r1, [r4, #12]
   163b0:	f1c2 0010 	rsb	r0, r2, #16
   163b4:	4428      	add	r0, r5
   163b6:	f017 f8e5 	bl	2d584 <memcpy>
		(void)memset(bt_mesh_prov_link.auth, 0,
   163ba:	7c22      	ldrb	r2, [r4, #16]
   163bc:	f240 1315 	movw	r3, #277	; 0x115
   163c0:	f1c2 0210 	rsb	r2, r2, #16
   163c4:	2100      	movs	r1, #0
   163c6:	4628      	mov	r0, r5
}
   163c8:	b003      	add	sp, #12
   163ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		(void)memset(bt_mesh_prov_link.auth, 0,
   163ce:	f017 b91c 	b.w	2d60a <__memset_chk>
}
   163d2:	b003      	add	sp, #12
   163d4:	bd30      	pop	{r4, r5, pc}
   163d6:	bf00      	nop
   163d8:	000344ff 	.word	0x000344ff
   163dc:	0003451d 	.word	0x0003451d
   163e0:	200030e4 	.word	0x200030e4
   163e4:	00034542 	.word	0x00034542
   163e8:	20003054 	.word	0x20003054
   163ec:	20003067 	.word	0x20003067

000163f0 <prov_dh_key_cb>:
{
   163f0:	b510      	push	{r4, lr}
	if (!dhkey) {
   163f2:	4601      	mov	r1, r0
{
   163f4:	b096      	sub	sp, #88	; 0x58
	if (!dhkey) {
   163f6:	b940      	cbnz	r0, 1640a <prov_dh_key_cb+0x1a>
		BT_ERR("DHKey generation failed");
   163f8:	4827      	ldr	r0, [pc, #156]	; (16498 <prov_dh_key_cb+0xa8>)
   163fa:	2145      	movs	r1, #69	; 0x45
		BT_ERR("No public key available");
   163fc:	f010 fdb7 	bl	26f6e <printk>
	prov_send_fail_msg(reason);
   16400:	2007      	movs	r0, #7
   16402:	f7ff fd71 	bl	15ee8 <prov_send_fail_msg>
}
   16406:	b016      	add	sp, #88	; 0x58
   16408:	bd10      	pop	{r4, pc}
	sys_memcpy_swap(bt_mesh_prov_link.dhkey, dhkey, 32);
   1640a:	4824      	ldr	r0, [pc, #144]	; (1649c <prov_dh_key_cb+0xac>)
   1640c:	f7ff ff28 	bl	16260 <sys_memcpy_swap.constprop.10>
	PROV_BUF(buf, 65);
   16410:	ab04      	add	r3, sp, #16
   16412:	f44f 028c 	mov.w	r2, #4587520	; 0x460000
   16416:	9301      	str	r3, [sp, #4]
   16418:	e9cd 2302 	strd	r2, r3, [sp, #8]
	key = bt_pub_key_get();
   1641c:	f7f3 fda0 	bl	9f60 <bt_pub_key_get>
	if (!key) {
   16420:	4604      	mov	r4, r0
   16422:	b910      	cbnz	r0, 1642a <prov_dh_key_cb+0x3a>
		BT_ERR("No public key available");
   16424:	2145      	movs	r1, #69	; 0x45
   16426:	481e      	ldr	r0, [pc, #120]	; (164a0 <prov_dh_key_cb+0xb0>)
   16428:	e7e8      	b.n	163fc <prov_dh_key_cb+0xc>
	bt_mesh_prov_buf_init(&buf, PROV_PUB_KEY);
   1642a:	2103      	movs	r1, #3
   1642c:	a801      	add	r0, sp, #4
   1642e:	f015 f843 	bl	2b4b8 <bt_mesh_prov_buf_init>
	sys_memcpy_swap(net_buf_simple_add(&buf, 32), key, 32);
   16432:	2120      	movs	r1, #32
   16434:	a801      	add	r0, sp, #4
   16436:	f008 fedd 	bl	1f1f4 <net_buf_simple_add>
   1643a:	4621      	mov	r1, r4
   1643c:	f7ff ff10 	bl	16260 <sys_memcpy_swap.constprop.10>
	sys_memcpy_swap(net_buf_simple_add(&buf, 32), &key[32], 32);
   16440:	2120      	movs	r1, #32
   16442:	a801      	add	r0, sp, #4
   16444:	f008 fed6 	bl	1f1f4 <net_buf_simple_add>
   16448:	f104 0120 	add.w	r1, r4, #32
   1644c:	f7ff ff08 	bl	16260 <sys_memcpy_swap.constprop.10>
	memcpy(&bt_mesh_prov_link.conf_inputs[81], &buf.data[1], 64);
   16450:	9b01      	ldr	r3, [sp, #4]
   16452:	4914      	ldr	r1, [pc, #80]	; (164a4 <prov_dh_key_cb+0xb4>)
   16454:	1c5a      	adds	r2, r3, #1
   16456:	3341      	adds	r3, #65	; 0x41
   16458:	f852 0b04 	ldr.w	r0, [r2], #4
   1645c:	f841 0b04 	str.w	r0, [r1], #4
   16460:	429a      	cmp	r2, r3
   16462:	d1f9      	bne.n	16458 <prov_dh_key_cb+0x68>
	if (bt_mesh_prov_send(&buf, public_key_sent)) {
   16464:	4910      	ldr	r1, [pc, #64]	; (164a8 <prov_dh_key_cb+0xb8>)
   16466:	a801      	add	r0, sp, #4
   16468:	f7ff fd0e 	bl	15e88 <bt_mesh_prov_send>
   1646c:	b120      	cbz	r0, 16478 <prov_dh_key_cb+0x88>
		BT_ERR("Failed to send Public Key");
   1646e:	2145      	movs	r1, #69	; 0x45
   16470:	480e      	ldr	r0, [pc, #56]	; (164ac <prov_dh_key_cb+0xbc>)
   16472:	f010 fd7c 	bl	26f6e <printk>
		return;
   16476:	e7c6      	b.n	16406 <prov_dh_key_cb+0x16>
	if (atomic_test_bit(bt_mesh_prov_link.flags, WAIT_NUMBER) ||
   16478:	2002      	movs	r0, #2
   1647a:	f7ff ff55 	bl	16328 <atomic_test_bit.constprop.12>
   1647e:	b918      	cbnz	r0, 16488 <prov_dh_key_cb+0x98>
	    atomic_test_bit(bt_mesh_prov_link.flags, WAIT_STRING)) {
   16480:	2003      	movs	r0, #3
   16482:	f7ff ff51 	bl	16328 <atomic_test_bit.constprop.12>
	if (atomic_test_bit(bt_mesh_prov_link.flags, WAIT_NUMBER) ||
   16486:	b120      	cbz	r0, 16492 <prov_dh_key_cb+0xa2>
		bt_mesh_prov_link.expect = PROV_NO_PDU; /* Wait for input */
   16488:	23ff      	movs	r3, #255	; 0xff
   1648a:	4a09      	ldr	r2, [pc, #36]	; (164b0 <prov_dh_key_cb+0xc0>)
   1648c:	f882 303f 	strb.w	r3, [r2, #63]	; 0x3f
   16490:	e7b9      	b.n	16406 <prov_dh_key_cb+0x16>
		bt_mesh_prov_link.expect = PROV_CONFIRM;
   16492:	2305      	movs	r3, #5
   16494:	e7f9      	b.n	1648a <prov_dh_key_cb+0x9a>
   16496:	bf00      	nop
   16498:	0003433d 	.word	0x0003433d
   1649c:	20003077 	.word	0x20003077
   164a0:	0003435a 	.word	0x0003435a
   164a4:	20003129 	.word	0x20003129
   164a8:	00016545 	.word	0x00016545
   164ac:	00034377 	.word	0x00034377
   164b0:	20003058 	.word	0x20003058

000164b4 <prov_pub_key>:
{
   164b4:	b510      	push	{r4, lr}
	memcpy(&bt_mesh_prov_link.conf_inputs[17], data, 64);
   164b6:	4b13      	ldr	r3, [pc, #76]	; (16504 <prov_pub_key+0x50>)
   164b8:	f100 0240 	add.w	r2, r0, #64	; 0x40
   164bc:	f850 1b04 	ldr.w	r1, [r0], #4
   164c0:	f843 1b04 	str.w	r1, [r3], #4
   164c4:	4290      	cmp	r0, r2
   164c6:	d1f9      	bne.n	164bc <prov_pub_key+0x8>
	if (!bt_pub_key_get()) {
   164c8:	f7f3 fd4a 	bl	9f60 <bt_pub_key_get>
   164cc:	b9a8      	cbnz	r0, 164fa <prov_pub_key+0x46>
		bt_mesh_prov_link.bearer->clear_tx();
   164ce:	4c0e      	ldr	r4, [pc, #56]	; (16508 <prov_pub_key+0x54>)
   164d0:	6863      	ldr	r3, [r4, #4]
   164d2:	68db      	ldr	r3, [r3, #12]
   164d4:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   164d6:	f3bf 8f5b 	dmb	ish
   164da:	e854 3f00 	ldrex	r3, [r4]
   164de:	f043 0301 	orr.w	r3, r3, #1
   164e2:	e844 3200 	strex	r2, r3, [r4]
   164e6:	2a00      	cmp	r2, #0
   164e8:	d1f7      	bne.n	164da <prov_pub_key+0x26>
   164ea:	f3bf 8f5b 	dmb	ish
		BT_WARN("Waiting for local public key");
   164ee:	2157      	movs	r1, #87	; 0x57
   164f0:	4806      	ldr	r0, [pc, #24]	; (1650c <prov_pub_key+0x58>)
}
   164f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Waiting for local public key");
   164f6:	f010 bd3a 	b.w	26f6e <printk>
}
   164fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prov_dh_key_gen();
   164fe:	f7ff bed5 	b.w	162ac <prov_dh_key_gen>
   16502:	bf00      	nop
   16504:	200030e9 	.word	0x200030e9
   16508:	20003058 	.word	0x20003058
   1650c:	000343d5 	.word	0x000343d5

00016510 <local_input_complete>:
{
   16510:	b508      	push	{r3, lr}
	if (atomic_test_bit(bt_mesh_prov_link.flags, PUB_KEY_SENT)) {
   16512:	2007      	movs	r0, #7
   16514:	f7ff ff08 	bl	16328 <atomic_test_bit.constprop.12>
   16518:	b118      	cbz	r0, 16522 <local_input_complete+0x12>
}
   1651a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		send_input_complete();
   1651e:	f7ff bcc3 	b.w	15ea8 <send_input_complete>
   16522:	4b07      	ldr	r3, [pc, #28]	; (16540 <local_input_complete+0x30>)
   16524:	f3bf 8f5b 	dmb	ish
   16528:	e853 2f00 	ldrex	r2, [r3]
   1652c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   16530:	e843 2100 	strex	r1, r2, [r3]
   16534:	2900      	cmp	r1, #0
   16536:	d1f7      	bne.n	16528 <local_input_complete+0x18>
   16538:	f3bf 8f5b 	dmb	ish
}
   1653c:	bd08      	pop	{r3, pc}
   1653e:	bf00      	nop
   16540:	20003058 	.word	0x20003058

00016544 <public_key_sent>:
{
   16544:	b508      	push	{r3, lr}
   16546:	4b0b      	ldr	r3, [pc, #44]	; (16574 <public_key_sent+0x30>)
   16548:	f3bf 8f5b 	dmb	ish
   1654c:	e853 2f00 	ldrex	r2, [r3]
   16550:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   16554:	e843 2100 	strex	r1, r2, [r3]
   16558:	2900      	cmp	r1, #0
   1655a:	d1f7      	bne.n	1654c <public_key_sent+0x8>
   1655c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_mesh_prov_link.flags, INPUT_COMPLETE)) {
   16560:	2009      	movs	r0, #9
   16562:	f7ff fee1 	bl	16328 <atomic_test_bit.constprop.12>
   16566:	b118      	cbz	r0, 16570 <public_key_sent+0x2c>
}
   16568:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		send_input_complete();
   1656c:	f7ff bc9c 	b.w	15ea8 <send_input_complete>
}
   16570:	bd08      	pop	{r3, pc}
   16572:	bf00      	nop
   16574:	20003058 	.word	0x20003058

00016578 <prov_confirm>:
{
   16578:	b530      	push	{r4, r5, lr}
	memcpy(bt_mesh_prov_link.conf, data, 16);
   1657a:	4c35      	ldr	r4, [pc, #212]	; (16650 <prov_confirm+0xd8>)
{
   1657c:	b08b      	sub	sp, #44	; 0x2c
   1657e:	4603      	mov	r3, r0
	memcpy(bt_mesh_prov_link.conf, data, 16);
   16580:	f100 0510 	add.w	r5, r0, #16
   16584:	6818      	ldr	r0, [r3, #0]
   16586:	6859      	ldr	r1, [r3, #4]
   16588:	4622      	mov	r2, r4
   1658a:	c203      	stmia	r2!, {r0, r1}
   1658c:	3308      	adds	r3, #8
   1658e:	42ab      	cmp	r3, r5
   16590:	4614      	mov	r4, r2
   16592:	d1f7      	bne.n	16584 <prov_confirm+0xc>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16594:	f3bf 8f5b 	dmb	ish
   16598:	4c2e      	ldr	r4, [pc, #184]	; (16654 <prov_confirm+0xdc>)
   1659a:	e854 2f00 	ldrex	r2, [r4]
   1659e:	f022 0310 	bic.w	r3, r2, #16
   165a2:	e844 3100 	strex	r1, r3, [r4]
   165a6:	2900      	cmp	r1, #0
   165a8:	d1f7      	bne.n	1659a <prov_confirm+0x22>
   165aa:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_mesh_prov_link.flags,
   165ae:	06d3      	lsls	r3, r2, #27
   165b0:	d504      	bpl.n	165bc <prov_confirm+0x44>
	    bt_mesh_prov->input_complete) {
   165b2:	4b29      	ldr	r3, [pc, #164]	; (16658 <prov_confirm+0xe0>)
   165b4:	681b      	ldr	r3, [r3, #0]
   165b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
				      NOTIFY_INPUT_COMPLETE) &&
   165b8:	b103      	cbz	r3, 165bc <prov_confirm+0x44>
		bt_mesh_prov->input_complete();
   165ba:	4798      	blx	r3
	if (bt_mesh_prov_conf_salt(bt_mesh_prov_link.conf_inputs,
   165bc:	4927      	ldr	r1, [pc, #156]	; (1665c <prov_confirm+0xe4>)
	PROV_BUF(cfm, 17);
   165be:	ab04      	add	r3, sp, #16
   165c0:	f44f 12b0 	mov.w	r2, #1441792	; 0x160000
	if (bt_mesh_prov_conf_salt(bt_mesh_prov_link.conf_inputs,
   165c4:	f101 0020 	add.w	r0, r1, #32
	PROV_BUF(cfm, 17);
   165c8:	9301      	str	r3, [sp, #4]
   165ca:	e9cd 2302 	strd	r2, r3, [sp, #8]
	if (bt_mesh_prov_conf_salt(bt_mesh_prov_link.conf_inputs,
   165ce:	f014 fb3a 	bl	2ac46 <bt_mesh_prov_conf_salt>
   165d2:	b140      	cbz	r0, 165e6 <prov_confirm+0x6e>
		BT_ERR("Unable to generate confirmation salt");
   165d4:	4822      	ldr	r0, [pc, #136]	; (16660 <prov_confirm+0xe8>)
   165d6:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Unable to generate confirmation value");
   165d8:	f010 fcc9 	bl	26f6e <printk>
	prov_send_fail_msg(reason);
   165dc:	2007      	movs	r0, #7
   165de:	f7ff fc83 	bl	15ee8 <prov_send_fail_msg>
}
   165e2:	b00b      	add	sp, #44	; 0x2c
   165e4:	bd30      	pop	{r4, r5, pc}
	if (bt_mesh_prov_conf_key(bt_mesh_prov_link.dhkey, bt_mesh_prov_link.conf_salt,
   165e6:	4a1f      	ldr	r2, [pc, #124]	; (16664 <prov_confirm+0xec>)
   165e8:	f1a2 0110 	sub.w	r1, r2, #16
   165ec:	f1a2 0051 	sub.w	r0, r2, #81	; 0x51
   165f0:	f7fb f98c 	bl	1190c <bt_mesh_prov_conf_key>
   165f4:	b110      	cbz	r0, 165fc <prov_confirm+0x84>
		BT_ERR("Unable to generate confirmation key");
   165f6:	2145      	movs	r1, #69	; 0x45
   165f8:	481b      	ldr	r0, [pc, #108]	; (16668 <prov_confirm+0xf0>)
   165fa:	e7ed      	b.n	165d8 <prov_confirm+0x60>
	if (bt_rand(bt_mesh_prov_link.rand, 16)) {
   165fc:	2110      	movs	r1, #16
   165fe:	481b      	ldr	r0, [pc, #108]	; (1666c <prov_confirm+0xf4>)
   16600:	f015 fb95 	bl	2bd2e <bt_rand>
   16604:	b110      	cbz	r0, 1660c <prov_confirm+0x94>
		BT_ERR("Unable to generate random number");
   16606:	2145      	movs	r1, #69	; 0x45
   16608:	4819      	ldr	r0, [pc, #100]	; (16670 <prov_confirm+0xf8>)
   1660a:	e7e5      	b.n	165d8 <prov_confirm+0x60>
	bt_mesh_prov_buf_init(&cfm, PROV_CONFIRM);
   1660c:	2105      	movs	r1, #5
   1660e:	a801      	add	r0, sp, #4
   16610:	f014 ff52 	bl	2b4b8 <bt_mesh_prov_buf_init>
			      bt_mesh_prov_link.auth, net_buf_simple_add(&cfm, 16))) {
   16614:	2110      	movs	r1, #16
   16616:	a801      	add	r0, sp, #4
   16618:	f008 fdec 	bl	1f1f4 <net_buf_simple_add>
	if (bt_mesh_prov_conf(bt_mesh_prov_link.conf_key, bt_mesh_prov_link.rand,
   1661c:	4a15      	ldr	r2, [pc, #84]	; (16674 <prov_confirm+0xfc>)
   1661e:	4603      	mov	r3, r0
   16620:	f102 0141 	add.w	r1, r2, #65	; 0x41
   16624:	f102 0061 	add.w	r0, r2, #97	; 0x61
   16628:	f014 fb1e 	bl	2ac68 <bt_mesh_prov_conf>
   1662c:	4601      	mov	r1, r0
   1662e:	b110      	cbz	r0, 16636 <prov_confirm+0xbe>
		BT_ERR("Unable to generate confirmation value");
   16630:	2145      	movs	r1, #69	; 0x45
   16632:	4811      	ldr	r0, [pc, #68]	; (16678 <prov_confirm+0x100>)
   16634:	e7d0      	b.n	165d8 <prov_confirm+0x60>
	if (bt_mesh_prov_send(&cfm, NULL)) {
   16636:	a801      	add	r0, sp, #4
   16638:	f7ff fc26 	bl	15e88 <bt_mesh_prov_send>
   1663c:	b120      	cbz	r0, 16648 <prov_confirm+0xd0>
		BT_ERR("Failed to send Provisioning Confirm");
   1663e:	2145      	movs	r1, #69	; 0x45
   16640:	480e      	ldr	r0, [pc, #56]	; (1667c <prov_confirm+0x104>)
   16642:	f010 fc94 	bl	26f6e <printk>
		return;
   16646:	e7cc      	b.n	165e2 <prov_confirm+0x6a>
	bt_mesh_prov_link.expect = PROV_RANDOM;
   16648:	2306      	movs	r3, #6
   1664a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
   1664e:	e7c8      	b.n	165e2 <prov_confirm+0x6a>
   16650:	20003098 	.word	0x20003098
   16654:	20003058 	.word	0x20003058
   16658:	20003054 	.word	0x20003054
   1665c:	200030b8 	.word	0x200030b8
   16660:	0003417f 	.word	0x0003417f
   16664:	200030c8 	.word	0x200030c8
   16668:	000341a9 	.word	0x000341a9
   1666c:	200030a8 	.word	0x200030a8
   16670:	000341d2 	.word	0x000341d2
   16674:	20003067 	.word	0x20003067
   16678:	000341f8 	.word	0x000341f8
   1667c:	00034223 	.word	0x00034223

00016680 <bt_mesh_prov_enable>:
		[PROV_DATA] = prov_data,
	},
};

int bt_mesh_prov_enable(bt_mesh_prov_bearer_t bearers)
{
   16680:	b538      	push	{r3, r4, r5, lr}
   16682:	4604      	mov	r4, r0
	if (bt_mesh_is_provisioned()) {
   16684:	f013 fdf1 	bl	2a26a <bt_mesh_is_provisioned>
   16688:	4605      	mov	r5, r0
   1668a:	b9a0      	cbnz	r0, 166b6 <bt_mesh_prov_enable+0x36>

		memcpy(uuid.val, bt_mesh_prov->uuid, 16);
		BT_INFO("Device UUID: %s", bt_uuid_str(&uuid.uuid));
	}

	if (IS_ENABLED(CONFIG_BT_MESH_PB_ADV) &&
   1668c:	07e2      	lsls	r2, r4, #31
   1668e:	d505      	bpl.n	1669c <bt_mesh_prov_enable+0x1c>
	    (bearers & BT_MESH_PROV_ADV)) {
		pb_adv.link_accept(bt_mesh_prov_bearer_cb_get(), NULL);
   16690:	f7ff fbc4 	bl	15e1c <bt_mesh_prov_bearer_cb_get>
   16694:	4b09      	ldr	r3, [pc, #36]	; (166bc <bt_mesh_prov_enable+0x3c>)
   16696:	4629      	mov	r1, r5
   16698:	685b      	ldr	r3, [r3, #4]
   1669a:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT) &&
   1669c:	07a3      	lsls	r3, r4, #30
   1669e:	d505      	bpl.n	166ac <bt_mesh_prov_enable+0x2c>
	    (bearers & BT_MESH_PROV_GATT)) {
		pb_gatt.link_accept(bt_mesh_prov_bearer_cb_get(), NULL);
   166a0:	f7ff fbbc 	bl	15e1c <bt_mesh_prov_bearer_cb_get>
   166a4:	4b06      	ldr	r3, [pc, #24]	; (166c0 <bt_mesh_prov_enable+0x40>)
   166a6:	2100      	movs	r1, #0
   166a8:	685b      	ldr	r3, [r3, #4]
   166aa:	4798      	blx	r3
	}

	bt_mesh_prov_link.role = &role_device;
   166ac:	4b05      	ldr	r3, [pc, #20]	; (166c4 <bt_mesh_prov_enable+0x44>)
   166ae:	4a06      	ldr	r2, [pc, #24]	; (166c8 <bt_mesh_prov_enable+0x48>)
   166b0:	609a      	str	r2, [r3, #8]

	return 0;
   166b2:	2000      	movs	r0, #0
}
   166b4:	bd38      	pop	{r3, r4, r5, pc}
		return -EALREADY;
   166b6:	f06f 0077 	mvn.w	r0, #119	; 0x77
   166ba:	e7fb      	b.n	166b4 <bt_mesh_prov_enable+0x34>
   166bc:	0002f280 	.word	0x0002f280
   166c0:	0002f298 	.word	0x0002f298
   166c4:	20003058 	.word	0x20003058
   166c8:	0002f220 	.word	0x0002f220

000166cc <free_segments>:

	return 1 + (len / CONT_PAYLOAD_MAX);
}

static void free_segments(void)
{
   166cc:	b570      	push	{r4, r5, r6, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   166ce:	2400      	movs	r4, #0
   166d0:	4d08      	ldr	r5, [pc, #32]	; (166f4 <free_segments+0x28>)

		if (!buf) {
			break;
		}

		link.tx.buf[i] = NULL;
   166d2:	4626      	mov	r6, r4
		struct net_buf *buf = link.tx.buf[i];
   166d4:	f855 0b04 	ldr.w	r0, [r5], #4
		if (!buf) {
   166d8:	b158      	cbz	r0, 166f2 <free_segments+0x26>
		/* Mark as canceled */
		BT_MESH_ADV(buf)->busy = 0U;
   166da:	6943      	ldr	r3, [r0, #20]
		link.tx.buf[i] = NULL;
   166dc:	f845 6c04 	str.w	r6, [r5, #-4]
		BT_MESH_ADV(buf)->busy = 0U;
   166e0:	7a1a      	ldrb	r2, [r3, #8]
   166e2:	f366 0282 	bfi	r2, r6, #2, #1
   166e6:	721a      	strb	r2, [r3, #8]
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   166e8:	3401      	adds	r4, #1
		net_buf_unref(buf);
   166ea:	f008 fc33 	bl	1ef54 <net_buf_unref>
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   166ee:	2c03      	cmp	r4, #3
   166f0:	d1f0      	bne.n	166d4 <free_segments+0x8>
	}
}
   166f2:	bd70      	pop	{r4, r5, r6, pc}
   166f4:	20000304 	.word	0x20000304

000166f8 <prov_clear_tx>:
{
	return (((id + 1) & XACT_ID_MAX) | (id & (XACT_ID_MAX+1)));
}

static void prov_clear_tx(void)
{
   166f8:	b508      	push	{r3, lr}
	BT_DBG("");

	k_delayed_work_cancel(&link.tx.retransmit);
   166fa:	4803      	ldr	r0, [pc, #12]	; (16708 <prov_clear_tx+0x10>)
   166fc:	f00d fbbc 	bl	23e78 <k_delayed_work_cancel>

	free_segments();
}
   16700:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	free_segments();
   16704:	f7ff bfe2 	b.w	166cc <free_segments>
   16708:	20000318 	.word	0x20000318

0001670c <adv_buf_create>:
	reset_adv_link();
	cb->link_closed(&pb_adv, cb_data, reason);
}

static struct net_buf *adv_buf_create(uint8_t retransmits)
{
   1670c:	b510      	push	{r4, lr}
	struct net_buf *buf;

	buf = bt_mesh_adv_create(BT_MESH_ADV_PROV,
   1670e:	f040 0108 	orr.w	r1, r0, #8
   16712:	f243 3234 	movw	r2, #13108	; 0x3334
   16716:	2300      	movs	r3, #0
   16718:	2000      	movs	r0, #0
   1671a:	f7f7 fa83 	bl	dc24 <bt_mesh_adv_create>
				 BT_MESH_TRANSMIT(retransmits, 20),
				 BUF_TIMEOUT);
	if (!buf) {
   1671e:	4604      	mov	r4, r0
   16720:	b918      	cbnz	r0, 1672a <adv_buf_create+0x1e>
		BT_ERR("Out of provisioning buffers");
   16722:	2145      	movs	r1, #69	; 0x45
   16724:	4802      	ldr	r0, [pc, #8]	; (16730 <adv_buf_create+0x24>)
   16726:	f010 fc22 	bl	26f6e <printk>
		return NULL;
	}

	return buf;
}
   1672a:	4620      	mov	r0, r4
   1672c:	bd10      	pop	{r4, pc}
   1672e:	bf00      	nop
   16730:	000345cf 	.word	0x000345cf

00016734 <atomic_test_bit.constprop.16>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16734:	4b05      	ldr	r3, [pc, #20]	; (1674c <atomic_test_bit.constprop.16+0x18>)
   16736:	f3bf 8f5b 	dmb	ish
   1673a:	685b      	ldr	r3, [r3, #4]
   1673c:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   16740:	fa43 f000 	asr.w	r0, r3, r0
}
   16744:	f000 0001 	and.w	r0, r0, #1
   16748:	4770      	bx	lr
   1674a:	bf00      	nop
   1674c:	200002e0 	.word	0x200002e0

00016750 <prov_link_accept>:

	return 0;
}

static int prov_link_accept(const struct prov_bearer_cb *cb, void *cb_data)
{
   16750:	b570      	push	{r4, r5, r6, lr}
   16752:	4606      	mov	r6, r0
   16754:	460d      	mov	r5, r1
	int err;

	err = bt_mesh_adv_enable();
   16756:	f7fd ff1d 	bl	14594 <bt_mesh_adv_enable>
	if (err) {
   1675a:	4604      	mov	r4, r0
   1675c:	b128      	cbz	r0, 1676a <prov_link_accept+0x1a>
		BT_ERR("Failed enabling advertiser");
   1675e:	2145      	movs	r1, #69	; 0x45
   16760:	480b      	ldr	r0, [pc, #44]	; (16790 <prov_link_accept+0x40>)
   16762:	f010 fc04 	bl	26f6e <printk>
	bt_mesh_scan_enable();
	/* Enable unprovisioned beacon sending */
	bt_mesh_beacon_enable();

	return 0;
}
   16766:	4620      	mov	r0, r4
   16768:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_bit(link.flags, ADV_LINK_ACTIVE)) {
   1676a:	f7ff ffe3 	bl	16734 <atomic_test_bit.constprop.16>
   1676e:	b960      	cbnz	r0, 1678a <prov_link_accept+0x3a>
	link.rx.id = XACT_ID_MAX;
   16770:	4b08      	ldr	r3, [pc, #32]	; (16794 <prov_link_accept+0x44>)
   16772:	227f      	movs	r2, #127	; 0x7f
   16774:	741a      	strb	r2, [r3, #16]
	link.tx.id = XACT_ID_NVAL;
   16776:	22ff      	movs	r2, #255	; 0xff
   16778:	f883 2020 	strb.w	r2, [r3, #32]
	link.cb_data = cb_data;
   1677c:	e9c3 6502 	strd	r6, r5, [r3, #8]
	bt_mesh_scan_enable();
   16780:	f7f7 fa76 	bl	dc70 <bt_mesh_scan_enable>
	bt_mesh_beacon_enable();
   16784:	f7f7 fd34 	bl	e1f0 <bt_mesh_beacon_enable>
	return 0;
   16788:	e7ed      	b.n	16766 <prov_link_accept+0x16>
		return -EBUSY;
   1678a:	f06f 040f 	mvn.w	r4, #15
   1678e:	e7ea      	b.n	16766 <prov_link_accept+0x16>
   16790:	00031952 	.word	0x00031952
   16794:	200002e0 	.word	0x200002e0

00016798 <reset_adv_link>:
{
   16798:	b510      	push	{r4, lr}
	k_delayed_work_cancel(&link.prot_timer);
   1679a:	4c17      	ldr	r4, [pc, #92]	; (167f8 <reset_adv_link+0x60>)
	prov_clear_tx();
   1679c:	f7ff ffac 	bl	166f8 <prov_clear_tx>
	k_delayed_work_cancel(&link.prot_timer);
   167a0:	f104 0068 	add.w	r0, r4, #104	; 0x68
   167a4:	f00d fb68 	bl	23e78 <k_delayed_work_cancel>
	if (atomic_test_bit(link.flags, ADV_PROVISIONER)) {
   167a8:	2005      	movs	r0, #5
   167aa:	f7ff ffc3 	bl	16734 <atomic_test_bit.constprop.16>
   167ae:	b180      	cbz	r0, 167d2 <reset_adv_link+0x3a>
		(void)memset(&link, 0, offsetof(struct pb_adv, tx.retransmit));
   167b0:	2238      	movs	r2, #56	; 0x38
   167b2:	2100      	movs	r1, #0
   167b4:	4620      	mov	r0, r4
   167b6:	f016 ff20 	bl	2d5fa <memset>
		link.rx.id = XACT_ID_NVAL;
   167ba:	22ff      	movs	r2, #255	; 0xff
   167bc:	7422      	strb	r2, [r4, #16]
	link.tx.pending_ack = XACT_ID_NVAL;
   167be:	22ff      	movs	r2, #255	; 0xff
   167c0:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
	link.rx.buf = &rx_buf;
   167c4:	4a0d      	ldr	r2, [pc, #52]	; (167fc <reset_adv_link+0x64>)
   167c6:	6162      	str	r2, [r4, #20]
	buf->len  = 0U;
   167c8:	2300      	movs	r3, #0
   167ca:	8093      	strh	r3, [r2, #4]
	buf->data = buf->__buf;
   167cc:	6893      	ldr	r3, [r2, #8]
   167ce:	6013      	str	r3, [r2, #0]
}
   167d0:	bd10      	pop	{r4, pc}
		link.id = 0;
   167d2:	4622      	mov	r2, r4
   167d4:	f842 0b04 	str.w	r0, [r2], #4
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   167d8:	f3bf 8f5b 	dmb	ish
   167dc:	e852 1f00 	ldrex	r1, [r2]
   167e0:	e842 0300 	strex	r3, r0, [r2]
   167e4:	2b00      	cmp	r3, #0
   167e6:	d1f9      	bne.n	167dc <reset_adv_link+0x44>
   167e8:	f3bf 8f5b 	dmb	ish
		link.rx.id = XACT_ID_MAX;
   167ec:	227f      	movs	r2, #127	; 0x7f
   167ee:	7422      	strb	r2, [r4, #16]
		link.tx.id = XACT_ID_NVAL;
   167f0:	22ff      	movs	r2, #255	; 0xff
   167f2:	f884 2020 	strb.w	r2, [r4, #32]
   167f6:	e7e2      	b.n	167be <reset_adv_link+0x26>
   167f8:	200002e0 	.word	0x200002e0
   167fc:	20000908 	.word	0x20000908

00016800 <close_link>:
{
   16800:	b570      	push	{r4, r5, r6, lr}
	const struct prov_bearer_cb *cb = link.cb;
   16802:	4b06      	ldr	r3, [pc, #24]	; (1681c <close_link+0x1c>)
	void *cb_data = link.cb_data;
   16804:	e9d3 6402 	ldrd	r6, r4, [r3, #8]
{
   16808:	4605      	mov	r5, r0
	reset_adv_link();
   1680a:	f7ff ffc5 	bl	16798 <reset_adv_link>
	cb->link_closed(&pb_adv, cb_data, reason);
   1680e:	6873      	ldr	r3, [r6, #4]
   16810:	4803      	ldr	r0, [pc, #12]	; (16820 <close_link+0x20>)
   16812:	462a      	mov	r2, r5
   16814:	4621      	mov	r1, r4
}
   16816:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb->link_closed(&pb_adv, cb_data, reason);
   1681a:	4718      	bx	r3
   1681c:	200002e0 	.word	0x200002e0
   16820:	0002f280 	.word	0x0002f280

00016824 <prov_retransmit>:
{
   16824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!atomic_test_bit(link.flags, ADV_LINK_ACTIVE)) {
   16828:	2000      	movs	r0, #0
   1682a:	f7ff ff83 	bl	16734 <atomic_test_bit.constprop.16>
   1682e:	b928      	cbnz	r0, 1683c <prov_retransmit+0x18>
		BT_WARN("Link not active");
   16830:	2157      	movs	r1, #87	; 0x57
   16832:	482a      	ldr	r0, [pc, #168]	; (168dc <prov_retransmit+0xb8>)
}
   16834:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		BT_WARN("Link not active");
   16838:	f010 bb99 	b.w	26f6e <printk>
	if (atomic_test_bit(link.flags, ADV_LINK_CLOSING)) {
   1683c:	2002      	movs	r0, #2
   1683e:	f7ff ff79 	bl	16734 <atomic_test_bit.constprop.16>
		timeout_ms = TRANSACTION_TIMEOUT;
   16842:	f640 35b8 	movw	r5, #3000	; 0xbb8
   16846:	f247 5330 	movw	r3, #30000	; 0x7530
   1684a:	2800      	cmp	r0, #0
   1684c:	bf08      	it	eq
   1684e:	461d      	moveq	r5, r3
   16850:	f016 fdf8 	bl	2d444 <z_impl_k_uptime_ticks>
	if (k_uptime_get() - link.tx.start > timeout_ms) {
   16854:	4c22      	ldr	r4, [pc, #136]	; (168e0 <prov_retransmit+0xbc>)
   16856:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1685a:	fba0 8903 	umull	r8, r9, r0, r3
   1685e:	fb03 9901 	mla	r9, r3, r1, r9
   16862:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
   16866:	ea4f 33d8 	mov.w	r3, r8, lsr #15
   1686a:	ea43 4349 	orr.w	r3, r3, r9, lsl #17
   1686e:	1a5e      	subs	r6, r3, r1
   16870:	ea4f 32d9 	mov.w	r2, r9, lsr #15
   16874:	eb62 0700 	sbc.w	r7, r2, r0
   16878:	17e9      	asrs	r1, r5, #31
   1687a:	42b5      	cmp	r5, r6
   1687c:	eb71 0307 	sbcs.w	r3, r1, r7
   16880:	da0e      	bge.n	168a0 <prov_retransmit+0x7c>
		if (atomic_test_bit(link.flags, ADV_LINK_CLOSING)) {
   16882:	2002      	movs	r0, #2
   16884:	f7ff ff56 	bl	16734 <atomic_test_bit.constprop.16>
   16888:	b120      	cbz	r0, 16894 <prov_retransmit+0x70>
			close_link(PROV_BEARER_LINK_STATUS_SUCCESS);
   1688a:	2000      	movs	r0, #0
}
   1688c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			close_link(PROV_BEARER_LINK_STATUS_TIMEOUT);
   16890:	f7ff bfb6 	b.w	16800 <close_link>
			BT_WARN("Giving up transaction");
   16894:	4813      	ldr	r0, [pc, #76]	; (168e4 <prov_retransmit+0xc0>)
   16896:	2157      	movs	r1, #87	; 0x57
   16898:	f010 fb69 	bl	26f6e <printk>
			close_link(PROV_BEARER_LINK_STATUS_TIMEOUT);
   1689c:	2001      	movs	r0, #1
   1689e:	e7f5      	b.n	1688c <prov_retransmit+0x68>
			bt_mesh_adv_send(buf, &buf_sent_cb, NULL);
   168a0:	4e11      	ldr	r6, [pc, #68]	; (168e8 <prov_retransmit+0xc4>)
   168a2:	3424      	adds	r4, #36	; 0x24
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   168a4:	2500      	movs	r5, #0
		struct net_buf *buf = link.tx.buf[i];
   168a6:	f854 0b04 	ldr.w	r0, [r4], #4
		if (!buf) {
   168aa:	b1a0      	cbz	r0, 168d6 <prov_retransmit+0xb2>
		if (BT_MESH_ADV(buf)->busy) {
   168ac:	6943      	ldr	r3, [r0, #20]
   168ae:	7a1a      	ldrb	r2, [r3, #8]
   168b0:	f012 0204 	ands.w	r2, r2, #4
   168b4:	f105 0501 	add.w	r5, r5, #1
   168b8:	d10b      	bne.n	168d2 <prov_retransmit+0xae>
		if (i + 1 < ARRAY_SIZE(link.tx.buf) && link.tx.buf[i + 1]) {
   168ba:	2d03      	cmp	r5, #3
   168bc:	d005      	beq.n	168ca <prov_retransmit+0xa6>
   168be:	6823      	ldr	r3, [r4, #0]
   168c0:	b11b      	cbz	r3, 168ca <prov_retransmit+0xa6>
			bt_mesh_adv_send(buf, NULL, NULL);
   168c2:	4611      	mov	r1, r2
   168c4:	f7f7 f9be 	bl	dc44 <bt_mesh_adv_send>
   168c8:	e7ed      	b.n	168a6 <prov_retransmit+0x82>
			bt_mesh_adv_send(buf, &buf_sent_cb, NULL);
   168ca:	2200      	movs	r2, #0
   168cc:	4631      	mov	r1, r6
   168ce:	f7f7 f9b9 	bl	dc44 <bt_mesh_adv_send>
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   168d2:	2d03      	cmp	r5, #3
   168d4:	d1e7      	bne.n	168a6 <prov_retransmit+0x82>
}
   168d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   168da:	bf00      	nop
   168dc:	000347f6 	.word	0x000347f6
   168e0:	200002e0 	.word	0x200002e0
   168e4:	0003480b 	.word	0x0003480b
   168e8:	20000900 	.word	0x20000900

000168ec <protocol_timeout>:
	link.rx.seg = 0U;
   168ec:	4b02      	ldr	r3, [pc, #8]	; (168f8 <protocol_timeout+0xc>)
   168ee:	2200      	movs	r2, #0
	close_link(PROV_BEARER_LINK_STATUS_TIMEOUT);
   168f0:	2001      	movs	r0, #1
	link.rx.seg = 0U;
   168f2:	745a      	strb	r2, [r3, #17]
	close_link(PROV_BEARER_LINK_STATUS_TIMEOUT);
   168f4:	f7ff bf84 	b.w	16800 <close_link>
   168f8:	200002e0 	.word	0x200002e0

000168fc <gen_prov_ack>:
{
   168fc:	b510      	push	{r4, lr}
	if (!link.tx.buf[0]) {
   168fe:	4c0b      	ldr	r4, [pc, #44]	; (1692c <gen_prov_ack+0x30>)
   16900:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16902:	b18b      	cbz	r3, 16928 <gen_prov_ack+0x2c>
	if (rx->xact_id == link.tx.id) {
   16904:	7902      	ldrb	r2, [r0, #4]
   16906:	f894 3020 	ldrb.w	r3, [r4, #32]
   1690a:	429a      	cmp	r2, r3
   1690c:	d10c      	bne.n	16928 <gen_prov_ack+0x2c>
		if (!atomic_test_bit(link.flags, ADV_LINK_CLOSING)) {
   1690e:	2002      	movs	r0, #2
   16910:	f7ff ff10 	bl	16734 <atomic_test_bit.constprop.16>
   16914:	b908      	cbnz	r0, 1691a <gen_prov_ack+0x1e>
			prov_clear_tx();
   16916:	f7ff feef 	bl	166f8 <prov_clear_tx>
		if (link.tx.cb) {
   1691a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1691c:	b123      	cbz	r3, 16928 <gen_prov_ack+0x2c>
			link.tx.cb(0, link.tx.cb_data);
   1691e:	6b61      	ldr	r1, [r4, #52]	; 0x34
   16920:	2000      	movs	r0, #0
}
   16922:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			link.tx.cb(0, link.tx.cb_data);
   16926:	4718      	bx	r3
}
   16928:	bd10      	pop	{r4, pc}
   1692a:	bf00      	nop
   1692c:	200002e0 	.word	0x200002e0

00016930 <ack_complete>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16930:	4b06      	ldr	r3, [pc, #24]	; (1694c <ack_complete+0x1c>)
   16932:	f3bf 8f5b 	dmb	ish
   16936:	e853 2f00 	ldrex	r2, [r3]
   1693a:	f022 0210 	bic.w	r2, r2, #16
   1693e:	e843 2100 	strex	r1, r2, [r3]
   16942:	2900      	cmp	r1, #0
   16944:	d1f7      	bne.n	16936 <ack_complete+0x6>
   16946:	f3bf 8f5b 	dmb	ish
}
   1694a:	4770      	bx	lr
   1694c:	200002e4 	.word	0x200002e4

00016950 <buf_sent>:
	if (!link.tx.buf[0]) {
   16950:	4905      	ldr	r1, [pc, #20]	; (16968 <buf_sent+0x18>)
   16952:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   16954:	b133      	cbz	r3, 16964 <buf_sent+0x14>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   16956:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1695a:	2300      	movs	r3, #0
   1695c:	3138      	adds	r1, #56	; 0x38
   1695e:	4803      	ldr	r0, [pc, #12]	; (1696c <buf_sent+0x1c>)
   16960:	f00d ba1a 	b.w	23d98 <k_delayed_work_submit_to_queue>
}
   16964:	4770      	bx	lr
   16966:	bf00      	nop
   16968:	200002e0 	.word	0x200002e0
   1696c:	20002490 	.word	0x20002490

00016970 <prov_failed>:
{
   16970:	b510      	push	{r4, lr}
	link.cb->error(&pb_adv, link.cb_data, err);
   16972:	4c0a      	ldr	r4, [pc, #40]	; (1699c <prov_failed+0x2c>)
   16974:	68a3      	ldr	r3, [r4, #8]
   16976:	68e1      	ldr	r1, [r4, #12]
   16978:	689b      	ldr	r3, [r3, #8]
   1697a:	4602      	mov	r2, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1697c:	3404      	adds	r4, #4
   1697e:	4808      	ldr	r0, [pc, #32]	; (169a0 <prov_failed+0x30>)
   16980:	4798      	blx	r3
   16982:	f3bf 8f5b 	dmb	ish
   16986:	e854 3f00 	ldrex	r3, [r4]
   1698a:	f043 0308 	orr.w	r3, r3, #8
   1698e:	e844 3200 	strex	r2, r3, [r4]
   16992:	2a00      	cmp	r2, #0
   16994:	d1f7      	bne.n	16986 <prov_failed+0x16>
   16996:	f3bf 8f5b 	dmb	ish
}
   1699a:	bd10      	pop	{r4, pc}
   1699c:	200002e0 	.word	0x200002e0
   169a0:	0002f280 	.word	0x0002f280

000169a4 <gen_prov_ack_send>:
{
   169a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   169a8:	4e23      	ldr	r6, [pc, #140]	; (16a38 <gen_prov_ack_send+0x94>)
   169aa:	f3bf 8f5b 	dmb	ish
   169ae:	4680      	mov	r8, r0
   169b0:	1d33      	adds	r3, r6, #4
   169b2:	e853 2f00 	ldrex	r2, [r3]
   169b6:	f042 0110 	orr.w	r1, r2, #16
   169ba:	e843 1000 	strex	r0, r1, [r3]
   169be:	2800      	cmp	r0, #0
   169c0:	d1f7      	bne.n	169b2 <gen_prov_ack_send+0xe>
   169c2:	f3bf 8f5b 	dmb	ish
	if (pending && link.tx.pending_ack == xact_id) {
   169c6:	f012 0710 	ands.w	r7, r2, #16
   169ca:	461c      	mov	r4, r3
   169cc:	d003      	beq.n	169d6 <gen_prov_ack_send+0x32>
   169ce:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
   169d2:	4543      	cmp	r3, r8
   169d4:	d010      	beq.n	169f8 <gen_prov_ack_send+0x54>
	buf = adv_buf_create(RETRANSMITS_ACK);
   169d6:	2002      	movs	r0, #2
   169d8:	f7ff fe98 	bl	1670c <adv_buf_create>
	if (!buf) {
   169dc:	4605      	mov	r5, r0
   169de:	b968      	cbnz	r0, 169fc <gen_prov_ack_send+0x58>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   169e0:	f3bf 8f5b 	dmb	ish
   169e4:	e854 3f00 	ldrex	r3, [r4]
   169e8:	f023 0310 	bic.w	r3, r3, #16
   169ec:	e844 3200 	strex	r2, r3, [r4]
   169f0:	2a00      	cmp	r2, #0
   169f2:	d1f7      	bne.n	169e4 <gen_prov_ack_send+0x40>
   169f4:	f3bf 8f5b 	dmb	ish
}
   169f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (pending) {
   169fc:	b9cf      	cbnz	r7, 16a32 <gen_prov_ack_send+0x8e>
		complete = &cb;
   169fe:	4c0f      	ldr	r4, [pc, #60]	; (16a3c <gen_prov_ack_send+0x98>)
		link.tx.pending_ack = xact_id;
   16a00:	f886 8021 	strb.w	r8, [r6, #33]	; 0x21
	net_buf_simple_add_be32(&buf->b, val);
   16a04:	6831      	ldr	r1, [r6, #0]
   16a06:	f105 0008 	add.w	r0, r5, #8
   16a0a:	f016 f829 	bl	2ca60 <net_buf_simple_add_be32>
	net_buf_add_u8(buf, xact_id);
   16a0e:	4641      	mov	r1, r8
   16a10:	4628      	mov	r0, r5
   16a12:	f014 fd5f 	bl	2b4d4 <net_buf_add_u8>
	net_buf_add_u8(buf, GPC_ACK);
   16a16:	2101      	movs	r1, #1
   16a18:	4628      	mov	r0, r5
   16a1a:	f014 fd5b 	bl	2b4d4 <net_buf_add_u8>
	bt_mesh_adv_send(buf, complete, NULL);
   16a1e:	4628      	mov	r0, r5
   16a20:	4621      	mov	r1, r4
   16a22:	2200      	movs	r2, #0
   16a24:	f7f7 f90e 	bl	dc44 <bt_mesh_adv_send>
	net_buf_unref(buf);
   16a28:	4628      	mov	r0, r5
}
   16a2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	net_buf_unref(buf);
   16a2e:	f008 ba91 	b.w	1ef54 <net_buf_unref>
		complete = NULL;
   16a32:	2400      	movs	r4, #0
   16a34:	e7e6      	b.n	16a04 <gen_prov_ack_send+0x60>
   16a36:	bf00      	nop
   16a38:	200002e0 	.word	0x200002e0
   16a3c:	0002f258 	.word	0x0002f258

00016a40 <prov_msg_recv>:
{
   16a40:	b510      	push	{r4, lr}
   16a42:	4c17      	ldr	r4, [pc, #92]	; (16aa0 <prov_msg_recv+0x60>)
   16a44:	4817      	ldr	r0, [pc, #92]	; (16aa4 <prov_msg_recv+0x64>)
   16a46:	f104 0168 	add.w	r1, r4, #104	; 0x68
   16a4a:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   16a4e:	2300      	movs	r3, #0
   16a50:	f00d f9a2 	bl	23d98 <k_delayed_work_submit_to_queue>
	if (!bt_mesh_fcs_check(link.rx.buf, link.rx.fcs)) {
   16a54:	7ce1      	ldrb	r1, [r4, #19]
   16a56:	6960      	ldr	r0, [r4, #20]
   16a58:	f7fa ff1e 	bl	11898 <bt_mesh_fcs_check>
   16a5c:	b928      	cbnz	r0, 16a6a <prov_msg_recv+0x2a>
		BT_ERR("Incorrect FCS");
   16a5e:	2145      	movs	r1, #69	; 0x45
   16a60:	4811      	ldr	r0, [pc, #68]	; (16aa8 <prov_msg_recv+0x68>)
}
   16a62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Incorrect FCS");
   16a66:	f010 ba82 	b.w	26f6e <printk>
	gen_prov_ack_send(link.rx.id);
   16a6a:	7c20      	ldrb	r0, [r4, #16]
   16a6c:	f7ff ff9a 	bl	169a4 <gen_prov_ack_send>
	if (atomic_test_bit(link.flags, ADV_LINK_INVALID)) {
   16a70:	2003      	movs	r0, #3
   16a72:	f7ff fe5f 	bl	16734 <atomic_test_bit.constprop.16>
   16a76:	b158      	cbz	r0, 16a90 <prov_msg_recv+0x50>
		BT_WARN("Unexpected msg 0x%02x on invalidated link",
   16a78:	6963      	ldr	r3, [r4, #20]
   16a7a:	480c      	ldr	r0, [pc, #48]	; (16aac <prov_msg_recv+0x6c>)
   16a7c:	681b      	ldr	r3, [r3, #0]
   16a7e:	2157      	movs	r1, #87	; 0x57
   16a80:	781a      	ldrb	r2, [r3, #0]
   16a82:	f010 fa74 	bl	26f6e <printk>
		prov_failed(PROV_ERR_UNEXP_PDU);
   16a86:	2003      	movs	r0, #3
}
   16a88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		prov_failed(PROV_ERR_UNEXP_PDU);
   16a8c:	f7ff bf70 	b.w	16970 <prov_failed>
	link.cb->recv(&pb_adv, link.cb_data, link.rx.buf);
   16a90:	68a3      	ldr	r3, [r4, #8]
   16a92:	6962      	ldr	r2, [r4, #20]
   16a94:	68e1      	ldr	r1, [r4, #12]
   16a96:	68db      	ldr	r3, [r3, #12]
   16a98:	4805      	ldr	r0, [pc, #20]	; (16ab0 <prov_msg_recv+0x70>)
}
   16a9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	link.cb->recv(&pb_adv, link.cb_data, link.rx.buf);
   16a9e:	4718      	bx	r3
   16aa0:	200002e0 	.word	0x200002e0
   16aa4:	20002490 	.word	0x20002490
   16aa8:	000347b4 	.word	0x000347b4
   16aac:	000347c7 	.word	0x000347c7
   16ab0:	0002f280 	.word	0x0002f280

00016ab4 <gen_prov_cont>:
{
   16ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16ab8:	4d3a      	ldr	r5, [pc, #232]	; (16ba4 <gen_prov_cont+0xf0>)
	uint8_t seg = CONT_SEG_INDEX(rx->gpc);
   16aba:	7944      	ldrb	r4, [r0, #5]
	if (!link.rx.seg && link.rx.id == rx->xact_id) {
   16abc:	f895 c011 	ldrb.w	ip, [r5, #17]
   16ac0:	7c2b      	ldrb	r3, [r5, #16]
   16ac2:	7902      	ldrb	r2, [r0, #4]
{
   16ac4:	4607      	mov	r7, r0
   16ac6:	460e      	mov	r6, r1
	if (!link.rx.seg && link.rx.id == rx->xact_id) {
   16ac8:	f1bc 0f00 	cmp.w	ip, #0
   16acc:	d12d      	bne.n	16b2a <gen_prov_cont+0x76>
   16ace:	4293      	cmp	r3, r2
   16ad0:	d109      	bne.n	16ae6 <gen_prov_cont+0x32>
	return atomic_test_bit(link.flags, ADV_ACK_PENDING);
   16ad2:	2004      	movs	r0, #4
   16ad4:	f7ff fe2e 	bl	16734 <atomic_test_bit.constprop.16>
		if (!ack_pending()) {
   16ad8:	2800      	cmp	r0, #0
   16ada:	d161      	bne.n	16ba0 <gen_prov_cont+0xec>
			gen_prov_ack_send(rx->xact_id);
   16adc:	7938      	ldrb	r0, [r7, #4]
}
   16ade:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			gen_prov_ack_send(rx->xact_id);
   16ae2:	f7ff bf5f 	b.w	169a4 <gen_prov_ack_send>
	return (((id + 1) & XACT_ID_MAX) | (id & (XACT_ID_MAX+1)));
   16ae6:	b259      	sxtb	r1, r3
   16ae8:	1c48      	adds	r0, r1, #1
   16aea:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   16aee:	f001 0180 	and.w	r1, r1, #128	; 0x80
	if (!link.rx.seg &&
   16af2:	4301      	orrs	r1, r0
   16af4:	428a      	cmp	r2, r1
   16af6:	d11a      	bne.n	16b2e <gen_prov_cont+0x7a>
		net_buf_simple_reset(link.rx.buf);
   16af8:	696b      	ldr	r3, [r5, #20]
		link.rx.id = rx->xact_id;
   16afa:	742a      	strb	r2, [r5, #16]
	buf->data = buf->__buf;
   16afc:	689a      	ldr	r2, [r3, #8]
	buf->len  = 0U;
   16afe:	f8a3 c004 	strh.w	ip, [r3, #4]
	buf->data = buf->__buf;
   16b02:	601a      	str	r2, [r3, #0]
		link.rx.seg = SEG_NVAL;
   16b04:	23ff      	movs	r3, #255	; 0xff
   16b06:	746b      	strb	r3, [r5, #17]
		link.rx.last_seg = SEG_NVAL;
   16b08:	74ab      	strb	r3, [r5, #18]
		prov_clear_tx();
   16b0a:	f7ff fdf5 	bl	166f8 <prov_clear_tx>
	if (seg > link.rx.last_seg) {
   16b0e:	7cab      	ldrb	r3, [r5, #18]
	uint8_t seg = CONT_SEG_INDEX(rx->gpc);
   16b10:	08a4      	lsrs	r4, r4, #2
	if (seg > link.rx.last_seg) {
   16b12:	42a3      	cmp	r3, r4
   16b14:	d211      	bcs.n	16b3a <gen_prov_cont+0x86>
		BT_ERR("Invalid segment index %u", seg);
   16b16:	4622      	mov	r2, r4
   16b18:	2145      	movs	r1, #69	; 0x45
   16b1a:	4823      	ldr	r0, [pc, #140]	; (16ba8 <gen_prov_cont+0xf4>)
   16b1c:	f010 fa27 	bl	26f6e <printk>
			prov_failed(PROV_ERR_NVAL_FMT);
   16b20:	2002      	movs	r0, #2
}
   16b22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			prov_failed(PROV_ERR_NVAL_FMT);
   16b26:	f7ff bf23 	b.w	16970 <prov_failed>
	} else if (rx->xact_id != link.rx.id) {
   16b2a:	4293      	cmp	r3, r2
   16b2c:	d0ef      	beq.n	16b0e <gen_prov_cont+0x5a>
		BT_WARN("Data for unknown transaction (0x%x != 0x%x)",
   16b2e:	2157      	movs	r1, #87	; 0x57
   16b30:	481e      	ldr	r0, [pc, #120]	; (16bac <gen_prov_cont+0xf8>)
}
   16b32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("Data for unknown transaction (0x%x != 0x%x)",
   16b36:	f010 ba1a 	b.w	26f6e <printk>
	if (!(link.rx.seg & BIT(seg))) {
   16b3a:	7c6b      	ldrb	r3, [r5, #17]
   16b3c:	40e3      	lsrs	r3, r4
   16b3e:	07da      	lsls	r2, r3, #31
   16b40:	d52e      	bpl.n	16ba0 <gen_prov_cont+0xec>
	memcpy(XACT_SEG_DATA(seg), buf->data, buf->len);
   16b42:	696a      	ldr	r2, [r5, #20]
   16b44:	6831      	ldr	r1, [r6, #0]
   16b46:	1e60      	subs	r0, r4, #1
   16b48:	2317      	movs	r3, #23
   16b4a:	4343      	muls	r3, r0
   16b4c:	6810      	ldr	r0, [r2, #0]
   16b4e:	88b2      	ldrh	r2, [r6, #4]
   16b50:	3314      	adds	r3, #20
   16b52:	4418      	add	r0, r3
   16b54:	f016 fd16 	bl	2d584 <memcpy>
	XACT_SEG_RECV(seg);
   16b58:	2101      	movs	r1, #1
   16b5a:	fa01 f304 	lsl.w	r3, r1, r4
   16b5e:	7c69      	ldrb	r1, [r5, #17]
   16b60:	ea21 0103 	bic.w	r1, r1, r3
	if (seg == link.rx.last_seg && !(link.rx.seg & BIT(0))) {
   16b64:	7cab      	ldrb	r3, [r5, #18]
	XACT_SEG_RECV(seg);
   16b66:	7469      	strb	r1, [r5, #17]
	if (seg == link.rx.last_seg && !(link.rx.seg & BIT(0))) {
   16b68:	429c      	cmp	r4, r3
   16b6a:	d114      	bne.n	16b96 <gen_prov_cont+0xe2>
   16b6c:	07cb      	lsls	r3, r1, #31
   16b6e:	d417      	bmi.n	16ba0 <gen_prov_cont+0xec>
		expect_len = (link.rx.buf->len - 20U -
   16b70:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
   16b74:	696b      	ldr	r3, [r5, #20]
   16b76:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   16b7a:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
   16b7e:	791c      	ldrb	r4, [r3, #4]
		if (expect_len != buf->len) {
   16b80:	88b3      	ldrh	r3, [r6, #4]
		expect_len = (link.rx.buf->len - 20U -
   16b82:	3203      	adds	r2, #3
   16b84:	4422      	add	r2, r4
   16b86:	b2d2      	uxtb	r2, r2
		if (expect_len != buf->len) {
   16b88:	429a      	cmp	r2, r3
   16b8a:	d004      	beq.n	16b96 <gen_prov_cont+0xe2>
			BT_ERR("Incorrect last seg len: %u != %u", expect_len,
   16b8c:	2145      	movs	r1, #69	; 0x45
   16b8e:	4808      	ldr	r0, [pc, #32]	; (16bb0 <gen_prov_cont+0xfc>)
   16b90:	f010 f9ed 	bl	26f6e <printk>
   16b94:	e7c4      	b.n	16b20 <gen_prov_cont+0x6c>
	if (!link.rx.seg) {
   16b96:	b919      	cbnz	r1, 16ba0 <gen_prov_cont+0xec>
}
   16b98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		prov_msg_recv();
   16b9c:	f7ff bf50 	b.w	16a40 <prov_msg_recv>
}
   16ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16ba4:	200002e0 	.word	0x200002e0
   16ba8:	00034670 	.word	0x00034670
   16bac:	0003463f 	.word	0x0003463f
   16bb0:	0003468e 	.word	0x0003468e

00016bb4 <send_reliable>:
{
   16bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16bb6:	f016 fc45 	bl	2d444 <z_impl_k_uptime_ticks>
   16bba:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   16bbe:	fba0 6705 	umull	r6, r7, r0, r5
   16bc2:	fb05 7701 	mla	r7, r5, r1, r7
	link.tx.start = k_uptime_get();
   16bc6:	4c0f      	ldr	r4, [pc, #60]	; (16c04 <send_reliable+0x50>)
   16bc8:	0bf2      	lsrs	r2, r6, #15
   16bca:	ea42 4247 	orr.w	r2, r2, r7, lsl #17
   16bce:	0bfb      	lsrs	r3, r7, #15
			bt_mesh_adv_send(buf, &buf_sent_cb, NULL);
   16bd0:	4e0d      	ldr	r6, [pc, #52]	; (16c08 <send_reliable+0x54>)
	link.tx.start = k_uptime_get();
   16bd2:	e9c4 2306 	strd	r2, r3, [r4, #24]
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   16bd6:	2500      	movs	r5, #0
   16bd8:	3424      	adds	r4, #36	; 0x24
		struct net_buf *buf = link.tx.buf[i];
   16bda:	f854 0b04 	ldr.w	r0, [r4], #4
		if (!buf) {
   16bde:	b178      	cbz	r0, 16c00 <send_reliable+0x4c>
		if (i + 1 < ARRAY_SIZE(link.tx.buf) && link.tx.buf[i + 1]) {
   16be0:	3501      	adds	r5, #1
   16be2:	2d03      	cmp	r5, #3
			bt_mesh_adv_send(buf, NULL, NULL);
   16be4:	f04f 0200 	mov.w	r2, #0
		if (i + 1 < ARRAY_SIZE(link.tx.buf) && link.tx.buf[i + 1]) {
   16be8:	d005      	beq.n	16bf6 <send_reliable+0x42>
   16bea:	6823      	ldr	r3, [r4, #0]
   16bec:	b11b      	cbz	r3, 16bf6 <send_reliable+0x42>
			bt_mesh_adv_send(buf, NULL, NULL);
   16bee:	4611      	mov	r1, r2
   16bf0:	f7f7 f828 	bl	dc44 <bt_mesh_adv_send>
   16bf4:	e7f1      	b.n	16bda <send_reliable+0x26>
			bt_mesh_adv_send(buf, &buf_sent_cb, NULL);
   16bf6:	4631      	mov	r1, r6
   16bf8:	f7f7 f824 	bl	dc44 <bt_mesh_adv_send>
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   16bfc:	2d03      	cmp	r5, #3
   16bfe:	d1ec      	bne.n	16bda <send_reliable+0x26>
}
   16c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16c02:	bf00      	nop
   16c04:	200002e0 	.word	0x200002e0
   16c08:	20000900 	.word	0x20000900

00016c0c <bearer_ctl_send>:
{
   16c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16c10:	461c      	mov	r4, r3
   16c12:	4606      	mov	r6, r0
   16c14:	4688      	mov	r8, r1
   16c16:	4691      	mov	r9, r2
	prov_clear_tx();
   16c18:	f7ff fd6e 	bl	166f8 <prov_clear_tx>
   16c1c:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   16c20:	2300      	movs	r3, #0
   16c22:	491c      	ldr	r1, [pc, #112]	; (16c94 <bearer_ctl_send+0x88>)
   16c24:	481c      	ldr	r0, [pc, #112]	; (16c98 <bearer_ctl_send+0x8c>)
   16c26:	f00d f8b7 	bl	23d98 <k_delayed_work_submit_to_queue>
	buf = adv_buf_create(reliable ? RETRANSMITS_RELIABLE :
   16c2a:	2c00      	cmp	r4, #0
   16c2c:	bf0c      	ite	eq
   16c2e:	2002      	moveq	r0, #2
   16c30:	2000      	movne	r0, #0
   16c32:	f7ff fd6b 	bl	1670c <adv_buf_create>
	if (!buf) {
   16c36:	4605      	mov	r5, r0
   16c38:	b348      	cbz	r0, 16c8e <bearer_ctl_send+0x82>
	net_buf_add_be32(buf, link.id);
   16c3a:	f8df a064 	ldr.w	sl, [pc, #100]	; 16ca0 <bearer_ctl_send+0x94>
	net_buf_simple_add_be32(&buf->b, val);
   16c3e:	f100 0708 	add.w	r7, r0, #8
   16c42:	f8da 1000 	ldr.w	r1, [sl]
   16c46:	4638      	mov	r0, r7
   16c48:	f015 ff0a 	bl	2ca60 <net_buf_simple_add_be32>
	net_buf_add_u8(buf, 0x00);
   16c4c:	2100      	movs	r1, #0
   16c4e:	4628      	mov	r0, r5
   16c50:	f014 fc40 	bl	2b4d4 <net_buf_add_u8>
	net_buf_add_u8(buf, GPC_CTL(op));
   16c54:	00b1      	lsls	r1, r6, #2
   16c56:	f041 0103 	orr.w	r1, r1, #3
   16c5a:	b2c9      	uxtb	r1, r1
   16c5c:	4628      	mov	r0, r5
   16c5e:	f014 fc39 	bl	2b4d4 <net_buf_add_u8>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   16c62:	464a      	mov	r2, r9
   16c64:	4641      	mov	r1, r8
   16c66:	4638      	mov	r0, r7
   16c68:	f015 febb 	bl	2c9e2 <net_buf_simple_add_mem>
	if (reliable) {
   16c6c:	b134      	cbz	r4, 16c7c <bearer_ctl_send+0x70>
		link.tx.buf[0] = buf;
   16c6e:	f8ca 5024 	str.w	r5, [sl, #36]	; 0x24
		send_reliable();
   16c72:	f7ff ff9f 	bl	16bb4 <send_reliable>
	return 0;
   16c76:	2000      	movs	r0, #0
}
   16c78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bt_mesh_adv_send(buf, &buf_sent_cb, NULL);
   16c7c:	4628      	mov	r0, r5
   16c7e:	4622      	mov	r2, r4
   16c80:	4906      	ldr	r1, [pc, #24]	; (16c9c <bearer_ctl_send+0x90>)
   16c82:	f7f6 ffdf 	bl	dc44 <bt_mesh_adv_send>
		net_buf_unref(buf);
   16c86:	4628      	mov	r0, r5
   16c88:	f008 f964 	bl	1ef54 <net_buf_unref>
   16c8c:	e7f3      	b.n	16c76 <bearer_ctl_send+0x6a>
		return -ENOBUFS;
   16c8e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   16c92:	e7f1      	b.n	16c78 <bearer_ctl_send+0x6c>
   16c94:	20000348 	.word	0x20000348
   16c98:	20002490 	.word	0x20002490
   16c9c:	20000900 	.word	0x20000900
   16ca0:	200002e0 	.word	0x200002e0

00016ca4 <gen_prov_ctl>:
{
   16ca4:	b570      	push	{r4, r5, r6, lr}
	switch (BEARER_CTL(rx->gpc)) {
   16ca6:	7942      	ldrb	r2, [r0, #5]
   16ca8:	0892      	lsrs	r2, r2, #2
   16caa:	2a01      	cmp	r2, #1
{
   16cac:	4604      	mov	r4, r0
	switch (BEARER_CTL(rx->gpc)) {
   16cae:	d04c      	beq.n	16d4a <gen_prov_ctl+0xa6>
   16cb0:	b255      	sxtb	r5, r2
   16cb2:	b125      	cbz	r5, 16cbe <gen_prov_ctl+0x1a>
   16cb4:	2a02      	cmp	r2, #2
   16cb6:	d063      	beq.n	16d80 <gen_prov_ctl+0xdc>
		BT_ERR("Unknown bearer opcode: 0x%02x", BEARER_CTL(rx->gpc));
   16cb8:	2145      	movs	r1, #69	; 0x45
   16cba:	4839      	ldr	r0, [pc, #228]	; (16da0 <gen_prov_ctl+0xfc>)
   16cbc:	e004      	b.n	16cc8 <gen_prov_ctl+0x24>
	if (buf->len < 16) {
   16cbe:	888a      	ldrh	r2, [r1, #4]
   16cc0:	2a0f      	cmp	r2, #15
   16cc2:	d805      	bhi.n	16cd0 <gen_prov_ctl+0x2c>
		BT_ERR("Too short bearer open message (len %u)", buf->len);
   16cc4:	4837      	ldr	r0, [pc, #220]	; (16da4 <gen_prov_ctl+0x100>)
   16cc6:	2145      	movs	r1, #69	; 0x45
}
   16cc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unknown bearer opcode: 0x%02x", BEARER_CTL(rx->gpc));
   16ccc:	f010 b94f 	b.w	26f6e <printk>
	if (atomic_test_bit(link.flags, ADV_LINK_ACTIVE)) {
   16cd0:	4628      	mov	r0, r5
   16cd2:	f7ff fd2f 	bl	16734 <atomic_test_bit.constprop.16>
   16cd6:	b160      	cbz	r0, 16cf2 <gen_prov_ctl+0x4e>
		if (link.id == rx->link_id) {
   16cd8:	4b33      	ldr	r3, [pc, #204]	; (16da8 <gen_prov_ctl+0x104>)
   16cda:	681a      	ldr	r2, [r3, #0]
   16cdc:	6823      	ldr	r3, [r4, #0]
   16cde:	429a      	cmp	r2, r3
   16ce0:	d15c      	bne.n	16d9c <gen_prov_ctl+0xf8>
			bearer_ctl_send(LINK_ACK, NULL, 0, false);
   16ce2:	462b      	mov	r3, r5
   16ce4:	462a      	mov	r2, r5
   16ce6:	4629      	mov	r1, r5
   16ce8:	2001      	movs	r0, #1
}
   16cea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bearer_ctl_send(LINK_ACK, NULL, 0, false);
   16cee:	f7ff bf8d 	b.w	16c0c <bearer_ctl_send>
	if (memcmp(buf->data, bt_mesh_prov_get()->uuid, 16)) {
   16cf2:	680d      	ldr	r5, [r1, #0]
   16cf4:	f7ff f880 	bl	15df8 <bt_mesh_prov_get>
   16cf8:	2210      	movs	r2, #16
   16cfa:	6801      	ldr	r1, [r0, #0]
   16cfc:	4628      	mov	r0, r5
   16cfe:	f016 fc33 	bl	2d568 <memcmp>
   16d02:	4603      	mov	r3, r0
   16d04:	2800      	cmp	r0, #0
   16d06:	d149      	bne.n	16d9c <gen_prov_ctl+0xf8>
	link.id = rx->link_id;
   16d08:	6821      	ldr	r1, [r4, #0]
   16d0a:	4c27      	ldr	r4, [pc, #156]	; (16da8 <gen_prov_ctl+0x104>)
   16d0c:	4622      	mov	r2, r4
   16d0e:	f842 1b04 	str.w	r1, [r2], #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16d12:	f3bf 8f5b 	dmb	ish
   16d16:	e852 1f00 	ldrex	r1, [r2]
   16d1a:	f041 0101 	orr.w	r1, r1, #1
   16d1e:	e842 1000 	strex	r0, r1, [r2]
   16d22:	2800      	cmp	r0, #0
   16d24:	d1f7      	bne.n	16d16 <gen_prov_ctl+0x72>
   16d26:	f3bf 8f5b 	dmb	ish
	net_buf_simple_reset(link.rx.buf);
   16d2a:	6962      	ldr	r2, [r4, #20]
	buf->data = buf->__buf;
   16d2c:	6891      	ldr	r1, [r2, #8]
   16d2e:	6011      	str	r1, [r2, #0]
	buf->len  = 0U;
   16d30:	8093      	strh	r3, [r2, #4]
	bearer_ctl_send(LINK_ACK, NULL, 0, false);
   16d32:	4619      	mov	r1, r3
   16d34:	461a      	mov	r2, r3
   16d36:	2001      	movs	r0, #1
   16d38:	f7ff ff68 	bl	16c0c <bearer_ctl_send>
		link.cb->link_opened(&pb_adv, link.cb_data);
   16d3c:	68a3      	ldr	r3, [r4, #8]
   16d3e:	68e1      	ldr	r1, [r4, #12]
   16d40:	681b      	ldr	r3, [r3, #0]
   16d42:	481a      	ldr	r0, [pc, #104]	; (16dac <gen_prov_ctl+0x108>)
}
   16d44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		link.cb->link_opened(&pb_adv, link.cb_data);
   16d48:	4718      	bx	r3
		if (!atomic_test_bit(link.flags, ADV_LINK_ACTIVE)) {
   16d4a:	2000      	movs	r0, #0
   16d4c:	f7ff fcf2 	bl	16734 <atomic_test_bit.constprop.16>
   16d50:	b320      	cbz	r0, 16d9c <gen_prov_ctl+0xf8>
	if (atomic_test_bit(link.flags, ADV_PROVISIONER)) {
   16d52:	2005      	movs	r0, #5
   16d54:	f7ff fcee 	bl	16734 <atomic_test_bit.constprop.16>
   16d58:	b300      	cbz	r0, 16d9c <gen_prov_ctl+0xf8>
   16d5a:	f3bf 8f5b 	dmb	ish
   16d5e:	4c12      	ldr	r4, [pc, #72]	; (16da8 <gen_prov_ctl+0x104>)
   16d60:	1d23      	adds	r3, r4, #4
   16d62:	e853 2f00 	ldrex	r2, [r3]
   16d66:	f042 0102 	orr.w	r1, r2, #2
   16d6a:	e843 1000 	strex	r0, r1, [r3]
   16d6e:	2800      	cmp	r0, #0
   16d70:	d1f7      	bne.n	16d62 <gen_prov_ctl+0xbe>
   16d72:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_set_bit(link.flags, ADV_LINK_ACK_RECVD)) {
   16d76:	0793      	lsls	r3, r2, #30
   16d78:	d410      	bmi.n	16d9c <gen_prov_ctl+0xf8>
		prov_clear_tx();
   16d7a:	f7ff fcbd 	bl	166f8 <prov_clear_tx>
   16d7e:	e7dd      	b.n	16d3c <gen_prov_ctl+0x98>
		if (!atomic_test_bit(link.flags, ADV_LINK_ACTIVE)) {
   16d80:	2000      	movs	r0, #0
   16d82:	f7ff fcd7 	bl	16734 <atomic_test_bit.constprop.16>
   16d86:	b148      	cbz	r0, 16d9c <gen_prov_ctl+0xf8>
	if (buf->len != 1) {
   16d88:	888b      	ldrh	r3, [r1, #4]
   16d8a:	2b01      	cmp	r3, #1
   16d8c:	d106      	bne.n	16d9c <gen_prov_ctl+0xf8>
	close_link(net_buf_simple_pull_u8(buf));
   16d8e:	4608      	mov	r0, r1
   16d90:	f015 fde1 	bl	2c956 <net_buf_simple_pull_u8>
}
   16d94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	close_link(net_buf_simple_pull_u8(buf));
   16d98:	f7ff bd32 	b.w	16800 <close_link>
}
   16d9c:	bd70      	pop	{r4, r5, r6, pc}
   16d9e:	bf00      	nop
   16da0:	000346e0 	.word	0x000346e0
   16da4:	000346b4 	.word	0x000346b4
   16da8:	200002e0 	.word	0x200002e0
   16dac:	0002f280 	.word	0x0002f280

00016db0 <prov_link_close>:

static void prov_link_close(enum prov_bearer_link_status status)
{
   16db0:	b507      	push	{r0, r1, r2, lr}
   16db2:	4b0d      	ldr	r3, [pc, #52]	; (16de8 <prov_link_close+0x38>)
   16db4:	f88d 0007 	strb.w	r0, [sp, #7]
   16db8:	f3bf 8f5b 	dmb	ish
   16dbc:	e853 2f00 	ldrex	r2, [r3]
   16dc0:	f042 0104 	orr.w	r1, r2, #4
   16dc4:	e843 1000 	strex	r0, r1, [r3]
   16dc8:	2800      	cmp	r0, #0
   16dca:	d1f7      	bne.n	16dbc <prov_link_close+0xc>
   16dcc:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(link.flags, ADV_LINK_CLOSING)) {
   16dd0:	0753      	lsls	r3, r2, #29
   16dd2:	d406      	bmi.n	16de2 <prov_link_close+0x32>
		return;
	}

	bearer_ctl_send(LINK_CLOSE, &status, 1, true);
   16dd4:	2301      	movs	r3, #1
   16dd6:	461a      	mov	r2, r3
   16dd8:	f10d 0107 	add.w	r1, sp, #7
   16ddc:	2002      	movs	r0, #2
   16dde:	f7ff ff15 	bl	16c0c <bearer_ctl_send>
}
   16de2:	b003      	add	sp, #12
   16de4:	f85d fb04 	ldr.w	pc, [sp], #4
   16de8:	200002e4 	.word	0x200002e4

00016dec <prov_link_open>:
{
   16dec:	b570      	push	{r4, r5, r6, lr}
   16dee:	4606      	mov	r6, r0
	err = bt_mesh_adv_enable();
   16df0:	f7fd fbd0 	bl	14594 <bt_mesh_adv_enable>
	if (err) {
   16df4:	4604      	mov	r4, r0
   16df6:	b128      	cbz	r0, 16e04 <prov_link_open+0x18>
		BT_ERR("Failed enabling advertiser");
   16df8:	2145      	movs	r1, #69	; 0x45
   16dfa:	481e      	ldr	r0, [pc, #120]	; (16e74 <prov_link_open+0x88>)
   16dfc:	f010 f8b7 	bl	26f6e <printk>
}
   16e00:	4620      	mov	r0, r4
   16e02:	bd70      	pop	{r4, r5, r6, pc}
   16e04:	4d1c      	ldr	r5, [pc, #112]	; (16e78 <prov_link_open+0x8c>)
   16e06:	f3bf 8f5b 	dmb	ish
   16e0a:	1d2b      	adds	r3, r5, #4
   16e0c:	e853 4f00 	ldrex	r4, [r3]
   16e10:	f044 0201 	orr.w	r2, r4, #1
   16e14:	e843 2100 	strex	r1, r2, [r3]
   16e18:	2900      	cmp	r1, #0
   16e1a:	d1f7      	bne.n	16e0c <prov_link_open+0x20>
   16e1c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(link.flags, ADV_LINK_ACTIVE)) {
   16e20:	f014 0401 	ands.w	r4, r4, #1
   16e24:	d123      	bne.n	16e6e <prov_link_open+0x82>
   16e26:	f3bf 8f5b 	dmb	ish
   16e2a:	e853 2f00 	ldrex	r2, [r3]
   16e2e:	f042 0220 	orr.w	r2, r2, #32
   16e32:	e843 2100 	strex	r1, r2, [r3]
   16e36:	2900      	cmp	r1, #0
   16e38:	d1f7      	bne.n	16e2a <prov_link_open+0x3e>
   16e3a:	f3bf 8f5b 	dmb	ish
	bt_rand(&link.id, sizeof(link.id));
   16e3e:	2104      	movs	r1, #4
   16e40:	4628      	mov	r0, r5
   16e42:	f014 ff74 	bl	2bd2e <bt_rand>
	link.tx.id = XACT_ID_MAX;
   16e46:	237f      	movs	r3, #127	; 0x7f
   16e48:	f885 3020 	strb.w	r3, [r5, #32]
	link.rx.id = XACT_ID_NVAL;
   16e4c:	23ff      	movs	r3, #255	; 0xff
   16e4e:	742b      	strb	r3, [r5, #16]
	link.cb = cb;
   16e50:	9b04      	ldr	r3, [sp, #16]
   16e52:	60ab      	str	r3, [r5, #8]
	link.cb_data = cb_data;
   16e54:	9b05      	ldr	r3, [sp, #20]
   16e56:	60eb      	str	r3, [r5, #12]
	net_buf_simple_reset(link.rx.buf);
   16e58:	696b      	ldr	r3, [r5, #20]
	buf->data = buf->__buf;
   16e5a:	689a      	ldr	r2, [r3, #8]
	buf->len  = 0U;
   16e5c:	809c      	strh	r4, [r3, #4]
	buf->data = buf->__buf;
   16e5e:	601a      	str	r2, [r3, #0]
	bearer_ctl_send(LINK_OPEN, uuid, 16, true);
   16e60:	4631      	mov	r1, r6
   16e62:	2301      	movs	r3, #1
   16e64:	2210      	movs	r2, #16
   16e66:	4620      	mov	r0, r4
   16e68:	f7ff fed0 	bl	16c0c <bearer_ctl_send>
	return 0;
   16e6c:	e7c8      	b.n	16e00 <prov_link_open+0x14>
		return -EBUSY;
   16e6e:	f06f 040f 	mvn.w	r4, #15
   16e72:	e7c5      	b.n	16e00 <prov_link_open+0x14>
   16e74:	00031952 	.word	0x00031952
   16e78:	200002e0 	.word	0x200002e0

00016e7c <prov_send_adv>:
{
   16e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16e80:	4c4e      	ldr	r4, [pc, #312]	; (16fbc <prov_send_adv+0x140>)
   16e82:	4605      	mov	r5, r0
   16e84:	4689      	mov	r9, r1
   16e86:	4690      	mov	r8, r2
	prov_clear_tx();
   16e88:	f7ff fc36 	bl	166f8 <prov_clear_tx>
   16e8c:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   16e90:	2300      	movs	r3, #0
   16e92:	f104 0168 	add.w	r1, r4, #104	; 0x68
   16e96:	484a      	ldr	r0, [pc, #296]	; (16fc0 <prov_send_adv+0x144>)
   16e98:	f00c ff7e 	bl	23d98 <k_delayed_work_submit_to_queue>
	start = adv_buf_create(RETRANSMITS_RELIABLE);
   16e9c:	2000      	movs	r0, #0
   16e9e:	f7ff fc35 	bl	1670c <adv_buf_create>
	if (!start) {
   16ea2:	4606      	mov	r6, r0
   16ea4:	2800      	cmp	r0, #0
   16ea6:	d061      	beq.n	16f6c <prov_send_adv+0xf0>
	return (((id + 1) & XACT_ID_MAX) | (id & (XACT_ID_MAX+1)));
   16ea8:	f994 2020 	ldrsb.w	r2, [r4, #32]
	net_buf_simple_add_be32(&buf->b, val);
   16eac:	6821      	ldr	r1, [r4, #0]
   16eae:	1c53      	adds	r3, r2, #1
   16eb0:	f100 0708 	add.w	r7, r0, #8
   16eb4:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   16eb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   16ebc:	4313      	orrs	r3, r2
   16ebe:	4638      	mov	r0, r7
	link.tx.id = next_transaction_id(link.tx.id);
   16ec0:	f884 3020 	strb.w	r3, [r4, #32]
   16ec4:	f015 fdcc 	bl	2ca60 <net_buf_simple_add_be32>
	net_buf_add_u8(start, link.tx.id);
   16ec8:	f894 1020 	ldrb.w	r1, [r4, #32]
   16ecc:	4630      	mov	r0, r6
   16ece:	f014 fb01 	bl	2b4d4 <net_buf_add_u8>
	net_buf_add_u8(start, GPC_START(last_seg(msg->len)));
   16ed2:	88ab      	ldrh	r3, [r5, #4]
	if (len <= START_PAYLOAD_MAX) {
   16ed4:	b2da      	uxtb	r2, r3
   16ed6:	2a14      	cmp	r2, #20
	len -= START_PAYLOAD_MAX;
   16ed8:	bf81      	itttt	hi
   16eda:	f1a3 0114 	subhi.w	r1, r3, #20
	return 1 + (len / CONT_PAYLOAD_MAX);
   16ede:	b2c9      	uxtbhi	r1, r1
   16ee0:	2317      	movhi	r3, #23
   16ee2:	fbb1 f1f3 	udivhi	r1, r1, r3
   16ee6:	bf86      	itte	hi
   16ee8:	3101      	addhi	r1, #1
   16eea:	b2c9      	uxtbhi	r1, r1
		return 0;
   16eec:	2100      	movls	r1, #0
	net_buf_add_u8(start, GPC_START(last_seg(msg->len)));
   16eee:	0089      	lsls	r1, r1, #2
   16ef0:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
   16ef4:	4630      	mov	r0, r6
   16ef6:	f014 faed 	bl	2b4d4 <net_buf_add_u8>
	net_buf_simple_add_be16(&buf->b, val);
   16efa:	4638      	mov	r0, r7
   16efc:	88a9      	ldrh	r1, [r5, #4]
   16efe:	f015 fd8c 	bl	2ca1a <net_buf_simple_add_be16>
	net_buf_add_u8(start, bt_mesh_fcs_calc(msg->data, msg->len));
   16f02:	7929      	ldrb	r1, [r5, #4]
   16f04:	6828      	ldr	r0, [r5, #0]
   16f06:	f7fa fcb7 	bl	11878 <bt_mesh_fcs_calc>
   16f0a:	4601      	mov	r1, r0
   16f0c:	4630      	mov	r0, r6
   16f0e:	f014 fae1 	bl	2b4d4 <net_buf_add_u8>
	link.tx.buf[0] = start;
   16f12:	6266      	str	r6, [r4, #36]	; 0x24
	seg_len = MIN(msg->len, START_PAYLOAD_MAX);
   16f14:	88ae      	ldrh	r6, [r5, #4]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   16f16:	6829      	ldr	r1, [r5, #0]
	net_buf_add_mem(start, msg->data, seg_len);
   16f18:	2e14      	cmp	r6, #20
   16f1a:	bf28      	it	cs
   16f1c:	2614      	movcs	r6, #20
   16f1e:	4632      	mov	r2, r6
   16f20:	4638      	mov	r0, r7
	link.tx.cb_data = cb_data;
   16f22:	e9c4 980c 	strd	r9, r8, [r4, #48]	; 0x30
   16f26:	f015 fd5c 	bl	2c9e2 <net_buf_simple_add_mem>
	net_buf_simple_pull(msg, seg_len);
   16f2a:	4631      	mov	r1, r6
   16f2c:	4628      	mov	r0, r5
   16f2e:	f008 f927 	bl	1f180 <net_buf_simple_pull>
	for (seg_id = 1U; msg->len > 0; seg_id++) {
   16f32:	f8df 9094 	ldr.w	r9, [pc, #148]	; 16fc8 <prov_send_adv+0x14c>
   16f36:	2700      	movs	r7, #0
   16f38:	88ae      	ldrh	r6, [r5, #4]
   16f3a:	b91e      	cbnz	r6, 16f44 <prov_send_adv+0xc8>
	send_reliable();
   16f3c:	f7ff fe3a 	bl	16bb4 <send_reliable>
	return 0;
   16f40:	4630      	mov	r0, r6
   16f42:	e009      	b.n	16f58 <prov_send_adv+0xdc>
		if (seg_id >= ARRAY_SIZE(link.tx.buf)) {
   16f44:	2f08      	cmp	r7, #8
   16f46:	d109      	bne.n	16f5c <prov_send_adv+0xe0>
			BT_ERR("Too big message");
   16f48:	481e      	ldr	r0, [pc, #120]	; (16fc4 <prov_send_adv+0x148>)
   16f4a:	2145      	movs	r1, #69	; 0x45
   16f4c:	f010 f80f 	bl	26f6e <printk>
			free_segments();
   16f50:	f7ff fbbc 	bl	166cc <free_segments>
			return -E2BIG;
   16f54:	f06f 0006 	mvn.w	r0, #6
}
   16f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		buf = adv_buf_create(RETRANSMITS_RELIABLE);
   16f5c:	2000      	movs	r0, #0
   16f5e:	f7ff fbd5 	bl	1670c <adv_buf_create>
		if (!buf) {
   16f62:	3704      	adds	r7, #4
   16f64:	4606      	mov	r6, r0
   16f66:	b920      	cbnz	r0, 16f72 <prov_send_adv+0xf6>
			free_segments();
   16f68:	f7ff fbb0 	bl	166cc <free_segments>
		return -ENOBUFS;
   16f6c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   16f70:	e7f2      	b.n	16f58 <prov_send_adv+0xdc>
		seg_len = MIN(msg->len, CONT_PAYLOAD_MAX);
   16f72:	f8b5 8004 	ldrh.w	r8, [r5, #4]
		link.tx.buf[seg_id] = buf;
   16f76:	f849 0b04 	str.w	r0, [r9], #4
	net_buf_simple_add_be32(&buf->b, val);
   16f7a:	f100 0a08 	add.w	sl, r0, #8
		seg_len = MIN(msg->len, CONT_PAYLOAD_MAX);
   16f7e:	f1b8 0f17 	cmp.w	r8, #23
   16f82:	6821      	ldr	r1, [r4, #0]
   16f84:	4650      	mov	r0, sl
   16f86:	bf28      	it	cs
   16f88:	f04f 0817 	movcs.w	r8, #23
   16f8c:	f015 fd68 	bl	2ca60 <net_buf_simple_add_be32>
		net_buf_add_u8(buf, link.tx.id);
   16f90:	f894 1020 	ldrb.w	r1, [r4, #32]
   16f94:	4630      	mov	r0, r6
   16f96:	f014 fa9d 	bl	2b4d4 <net_buf_add_u8>
		net_buf_add_u8(buf, GPC_CONT(seg_id));
   16f9a:	f047 0102 	orr.w	r1, r7, #2
   16f9e:	b2c9      	uxtb	r1, r1
   16fa0:	4630      	mov	r0, r6
   16fa2:	f014 fa97 	bl	2b4d4 <net_buf_add_u8>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   16fa6:	6829      	ldr	r1, [r5, #0]
   16fa8:	4642      	mov	r2, r8
   16faa:	4650      	mov	r0, sl
   16fac:	f015 fd19 	bl	2c9e2 <net_buf_simple_add_mem>
		net_buf_simple_pull(msg, seg_len);
   16fb0:	4641      	mov	r1, r8
   16fb2:	4628      	mov	r0, r5
   16fb4:	f008 f8e4 	bl	1f180 <net_buf_simple_pull>
   16fb8:	e7be      	b.n	16f38 <prov_send_adv+0xbc>
   16fba:	bf00      	nop
   16fbc:	200002e0 	.word	0x200002e0
   16fc0:	20002490 	.word	0x20002490
   16fc4:	00032fe9 	.word	0x00032fe9
   16fc8:	20000308 	.word	0x20000308

00016fcc <gen_prov_start>:
{
   16fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (rx->xact_id == link.rx.id) {
   16fd0:	4b3f      	ldr	r3, [pc, #252]	; (170d0 <gen_prov_start+0x104>)
   16fd2:	7902      	ldrb	r2, [r0, #4]
{
   16fd4:	460d      	mov	r5, r1
	if (rx->xact_id == link.rx.id) {
   16fd6:	7c19      	ldrb	r1, [r3, #16]
   16fd8:	428a      	cmp	r2, r1
{
   16fda:	4606      	mov	r6, r0
   16fdc:	461c      	mov	r4, r3
	if (rx->xact_id == link.rx.id) {
   16fde:	d10e      	bne.n	16ffe <gen_prov_start+0x32>
		if (!link.rx.seg) {
   16fe0:	7c5b      	ldrb	r3, [r3, #17]
   16fe2:	b943      	cbnz	r3, 16ff6 <gen_prov_start+0x2a>
	return atomic_test_bit(link.flags, ADV_ACK_PENDING);
   16fe4:	2004      	movs	r0, #4
   16fe6:	f7ff fba5 	bl	16734 <atomic_test_bit.constprop.16>
			if (!ack_pending()) {
   16fea:	b930      	cbnz	r0, 16ffa <gen_prov_start+0x2e>
				gen_prov_ack_send(rx->xact_id);
   16fec:	7930      	ldrb	r0, [r6, #4]
}
   16fee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				gen_prov_ack_send(rx->xact_id);
   16ff2:	f7ff bcd7 	b.w	169a4 <gen_prov_ack_send>
		if (!(link.rx.seg & BIT(0))) {
   16ff6:	07da      	lsls	r2, r3, #31
   16ff8:	d410      	bmi.n	1701c <gen_prov_start+0x50>
}
   16ffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return (((id + 1) & XACT_ID_MAX) | (id & (XACT_ID_MAX+1)));
   16ffe:	b249      	sxtb	r1, r1
   17000:	1c4b      	adds	r3, r1, #1
   17002:	f003 007f 	and.w	r0, r3, #127	; 0x7f
   17006:	f001 0380 	and.w	r3, r1, #128	; 0x80
   1700a:	4303      	orrs	r3, r0
	} else if (rx->xact_id != next_transaction_id(link.rx.id)) {
   1700c:	429a      	cmp	r2, r3
   1700e:	d005      	beq.n	1701c <gen_prov_start+0x50>
		BT_WARN("Unexpected xact 0x%x, expected 0x%x", rx->xact_id,
   17010:	2157      	movs	r1, #87	; 0x57
   17012:	4830      	ldr	r0, [pc, #192]	; (170d4 <gen_prov_start+0x108>)
}
   17014:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("Unexpected xact 0x%x, expected 0x%x", rx->xact_id,
   17018:	f00f bfa9 	b.w	26f6e <printk>
	net_buf_simple_reset(link.rx.buf);
   1701c:	6967      	ldr	r7, [r4, #20]
	buf->len  = 0U;
   1701e:	2300      	movs	r3, #0
   17020:	80bb      	strh	r3, [r7, #4]
	buf->data = buf->__buf;
   17022:	68bb      	ldr	r3, [r7, #8]
   17024:	603b      	str	r3, [r7, #0]
	link.rx.buf->len = net_buf_simple_pull_be16(buf);
   17026:	4628      	mov	r0, r5
   17028:	f015 fca5 	bl	2c976 <net_buf_simple_pull_be16>
   1702c:	80b8      	strh	r0, [r7, #4]
	link.rx.id = rx->xact_id;
   1702e:	7933      	ldrb	r3, [r6, #4]
   17030:	7423      	strb	r3, [r4, #16]
	link.rx.fcs = net_buf_simple_pull_u8(buf);
   17032:	4628      	mov	r0, r5
   17034:	f015 fc8f 	bl	2c956 <net_buf_simple_pull_u8>
	if (link.rx.buf->len < 1) {
   17038:	6963      	ldr	r3, [r4, #20]
	link.rx.fcs = net_buf_simple_pull_u8(buf);
   1703a:	74e0      	strb	r0, [r4, #19]
	if (link.rx.buf->len < 1) {
   1703c:	889a      	ldrh	r2, [r3, #4]
   1703e:	b922      	cbnz	r2, 1704a <gen_prov_start+0x7e>
		BT_ERR("Ignoring zero-length provisioning PDU");
   17040:	4825      	ldr	r0, [pc, #148]	; (170d8 <gen_prov_start+0x10c>)
   17042:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Too small total length for multi-segment PDU");
   17044:	f00f ff93 	bl	26f6e <printk>
		prov_failed(PROV_ERR_NVAL_FMT);
   17048:	e006      	b.n	17058 <gen_prov_start+0x8c>
	if (link.rx.buf->len > link.rx.buf->size) {
   1704a:	88db      	ldrh	r3, [r3, #6]
   1704c:	4293      	cmp	r3, r2
   1704e:	d208      	bcs.n	17062 <gen_prov_start+0x96>
		BT_ERR("Too large provisioning PDU (%u bytes)",
   17050:	4822      	ldr	r0, [pc, #136]	; (170dc <gen_prov_start+0x110>)
   17052:	2145      	movs	r1, #69	; 0x45
   17054:	f00f ff8b 	bl	26f6e <printk>
		prov_failed(PROV_ERR_NVAL_FMT);
   17058:	2002      	movs	r0, #2
}
   1705a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		prov_failed(PROV_ERR_NVAL_FMT);
   1705e:	f7ff bc87 	b.w	16970 <prov_failed>
	if (START_LAST_SEG(rx->gpc) > 0 && link.rx.buf->len <= 20U) {
   17062:	7973      	ldrb	r3, [r6, #5]
   17064:	089b      	lsrs	r3, r3, #2
   17066:	d004      	beq.n	17072 <gen_prov_start+0xa6>
   17068:	2a14      	cmp	r2, #20
   1706a:	d802      	bhi.n	17072 <gen_prov_start+0xa6>
		BT_ERR("Too small total length for multi-segment PDU");
   1706c:	2145      	movs	r1, #69	; 0x45
   1706e:	481c      	ldr	r0, [pc, #112]	; (170e0 <gen_prov_start+0x114>)
   17070:	e7e8      	b.n	17044 <gen_prov_start+0x78>
	prov_clear_tx();
   17072:	f7ff fb41 	bl	166f8 <prov_clear_tx>
	link.rx.last_seg = START_LAST_SEG(rx->gpc);
   17076:	7972      	ldrb	r2, [r6, #5]
	if ((link.rx.seg & BIT(0)) &&
   17078:	7c61      	ldrb	r1, [r4, #17]
	link.rx.last_seg = START_LAST_SEG(rx->gpc);
   1707a:	0892      	lsrs	r2, r2, #2
	if ((link.rx.seg & BIT(0)) &&
   1707c:	07cb      	lsls	r3, r1, #31
	link.rx.last_seg = START_LAST_SEG(rx->gpc);
   1707e:	74a2      	strb	r2, [r4, #18]
	if ((link.rx.seg & BIT(0)) &&
   17080:	d50d      	bpl.n	1709e <gen_prov_start+0xd2>
	    (find_msb_set((~link.rx.seg) & SEG_NVAL) - 1 > link.rx.last_seg)) {
   17082:	43cb      	mvns	r3, r1
	if (op == 0) {
   17084:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   17088:	d005      	beq.n	17096 <gen_prov_start+0xca>
	return 32 - __builtin_clz(op);
   1708a:	fab3 f383 	clz	r3, r3
   1708e:	f1c3 031f 	rsb	r3, r3, #31
	if ((link.rx.seg & BIT(0)) &&
   17092:	4293      	cmp	r3, r2
   17094:	d906      	bls.n	170a4 <gen_prov_start+0xd8>
		BT_ERR("Invalid segment index %u", seg);
   17096:	22ff      	movs	r2, #255	; 0xff
   17098:	2145      	movs	r1, #69	; 0x45
   1709a:	4812      	ldr	r0, [pc, #72]	; (170e4 <gen_prov_start+0x118>)
   1709c:	e7da      	b.n	17054 <gen_prov_start+0x88>
	uint8_t seg = SEG_NVAL;
   1709e:	2900      	cmp	r1, #0
   170a0:	bf08      	it	eq
   170a2:	21ff      	moveq	r1, #255	; 0xff
	link.rx.seg = seg & ((1 << (START_LAST_SEG(rx->gpc) + 1)) - 1);
   170a4:	3201      	adds	r2, #1
   170a6:	2301      	movs	r3, #1
   170a8:	4093      	lsls	r3, r2
   170aa:	3b01      	subs	r3, #1
   170ac:	400b      	ands	r3, r1
   170ae:	7463      	strb	r3, [r4, #17]
	memcpy(link.rx.buf->data, buf->data, buf->len);
   170b0:	6963      	ldr	r3, [r4, #20]
   170b2:	88aa      	ldrh	r2, [r5, #4]
   170b4:	6818      	ldr	r0, [r3, #0]
   170b6:	6829      	ldr	r1, [r5, #0]
   170b8:	f016 fa64 	bl	2d584 <memcpy>
	XACT_SEG_RECV(0);
   170bc:	7c63      	ldrb	r3, [r4, #17]
   170be:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
   170c2:	7463      	strb	r3, [r4, #17]
	if (!link.rx.seg) {
   170c4:	2b00      	cmp	r3, #0
   170c6:	d198      	bne.n	16ffa <gen_prov_start+0x2e>
}
   170c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		prov_msg_recv();
   170cc:	f7ff bcb8 	b.w	16a40 <prov_msg_recv>
   170d0:	200002e0 	.word	0x200002e0
   170d4:	00034703 	.word	0x00034703
   170d8:	0003472c 	.word	0x0003472c
   170dc:	00034757 	.word	0x00034757
   170e0:	00034782 	.word	0x00034782
   170e4:	00034670 	.word	0x00034670

000170e8 <bt_mesh_pb_adv_recv>:
{
   170e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!link.cb) {
   170ea:	4d22      	ldr	r5, [pc, #136]	; (17174 <bt_mesh_pb_adv_recv+0x8c>)
   170ec:	68ab      	ldr	r3, [r5, #8]
{
   170ee:	4604      	mov	r4, r0
	if (!link.cb) {
   170f0:	b133      	cbz	r3, 17100 <bt_mesh_pb_adv_recv+0x18>
	if (buf->len < 6) {
   170f2:	8882      	ldrh	r2, [r0, #4]
   170f4:	2a05      	cmp	r2, #5
   170f6:	d805      	bhi.n	17104 <bt_mesh_pb_adv_recv+0x1c>
		BT_WARN("Too short provisioning packet (len %u)", buf->len);
   170f8:	481f      	ldr	r0, [pc, #124]	; (17178 <bt_mesh_pb_adv_recv+0x90>)
   170fa:	2157      	movs	r1, #87	; 0x57
		BT_ERR("Too short GPC message type %u", GPCF(rx->gpc));
   170fc:	f00f ff37 	bl	26f6e <printk>
}
   17100:	b003      	add	sp, #12
   17102:	bd30      	pop	{r4, r5, pc}
	rx.link_id = net_buf_simple_pull_be32(buf);
   17104:	f015 fc58 	bl	2c9b8 <net_buf_simple_pull_be32>
   17108:	9000      	str	r0, [sp, #0]
	rx.xact_id = net_buf_simple_pull_u8(buf);
   1710a:	4620      	mov	r0, r4
   1710c:	f015 fc23 	bl	2c956 <net_buf_simple_pull_u8>
   17110:	f88d 0004 	strb.w	r0, [sp, #4]
	rx.gpc = net_buf_simple_pull_u8(buf);
   17114:	4620      	mov	r0, r4
   17116:	f015 fc1e 	bl	2c956 <net_buf_simple_pull_u8>
   1711a:	f88d 0005 	strb.w	r0, [sp, #5]
	if (atomic_test_bit(link.flags, ADV_LINK_ACTIVE) && link.id != rx.link_id) {
   1711e:	2000      	movs	r0, #0
   17120:	f7ff fb08 	bl	16734 <atomic_test_bit.constprop.16>
   17124:	b118      	cbz	r0, 1712e <bt_mesh_pb_adv_recv+0x46>
   17126:	682a      	ldr	r2, [r5, #0]
   17128:	9b00      	ldr	r3, [sp, #0]
   1712a:	429a      	cmp	r2, r3
   1712c:	d1e8      	bne.n	17100 <bt_mesh_pb_adv_recv+0x18>
	if (buf->len < gen_prov[GPCF(rx->gpc)].min_len) {
   1712e:	f89d 2005 	ldrb.w	r2, [sp, #5]
   17132:	4912      	ldr	r1, [pc, #72]	; (1717c <bt_mesh_pb_adv_recv+0x94>)
   17134:	88a0      	ldrh	r0, [r4, #4]
   17136:	f002 0203 	and.w	r2, r2, #3
   1713a:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
   1713e:	795b      	ldrb	r3, [r3, #5]
   17140:	4298      	cmp	r0, r3
   17142:	d202      	bcs.n	1714a <bt_mesh_pb_adv_recv+0x62>
		BT_ERR("Too short GPC message type %u", GPCF(rx->gpc));
   17144:	2145      	movs	r1, #69	; 0x45
   17146:	480e      	ldr	r0, [pc, #56]	; (17180 <bt_mesh_pb_adv_recv+0x98>)
   17148:	e7d8      	b.n	170fc <bt_mesh_pb_adv_recv+0x14>
	if (!atomic_test_bit(link.flags, ADV_LINK_ACTIVE) &&
   1714a:	2000      	movs	r0, #0
   1714c:	f7ff faf2 	bl	16734 <atomic_test_bit.constprop.16>
   17150:	f89d 3005 	ldrb.w	r3, [sp, #5]
   17154:	b930      	cbnz	r0, 17164 <bt_mesh_pb_adv_recv+0x7c>
	    gen_prov[GPCF(rx->gpc)].require_link) {
   17156:	f003 0203 	and.w	r2, r3, #3
   1715a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
	if (!atomic_test_bit(link.flags, ADV_LINK_ACTIVE) &&
   1715e:	7912      	ldrb	r2, [r2, #4]
   17160:	2a00      	cmp	r2, #0
   17162:	d1cd      	bne.n	17100 <bt_mesh_pb_adv_recv+0x18>
	gen_prov[GPCF(rx->gpc)].func(rx, buf);
   17164:	f003 0303 	and.w	r3, r3, #3
   17168:	4668      	mov	r0, sp
   1716a:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   1716e:	4621      	mov	r1, r4
   17170:	4798      	blx	r3
   17172:	e7c5      	b.n	17100 <bt_mesh_pb_adv_recv+0x18>
   17174:	200002e0 	.word	0x200002e0
   17178:	000345f0 	.word	0x000345f0
   1717c:	0002f260 	.word	0x0002f260
   17180:	0003461c 	.word	0x0003461c

00017184 <pb_adv_init>:

void pb_adv_init(void)
{
   17184:	b538      	push	{r3, r4, r5, lr}
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   17186:	4c09      	ldr	r4, [pc, #36]	; (171ac <pb_adv_init+0x28>)
   17188:	2530      	movs	r5, #48	; 0x30
   1718a:	462a      	mov	r2, r5
   1718c:	2100      	movs	r1, #0
   1718e:	f104 0068 	add.w	r0, r4, #104	; 0x68
   17192:	f016 fa32 	bl	2d5fa <memset>
   17196:	4b06      	ldr	r3, [pc, #24]	; (171b0 <pb_adv_init+0x2c>)
   17198:	66e3      	str	r3, [r4, #108]	; 0x6c
   1719a:	462a      	mov	r2, r5
   1719c:	2100      	movs	r1, #0
   1719e:	f104 0038 	add.w	r0, r4, #56	; 0x38
   171a2:	f016 fa2a 	bl	2d5fa <memset>
   171a6:	4b03      	ldr	r3, [pc, #12]	; (171b4 <pb_adv_init+0x30>)
   171a8:	63e3      	str	r3, [r4, #60]	; 0x3c
	k_delayed_work_init(&link.prot_timer, protocol_timeout);
	k_delayed_work_init(&link.tx.retransmit, prov_retransmit);
}
   171aa:	bd38      	pop	{r3, r4, r5, pc}
   171ac:	200002e0 	.word	0x200002e0
   171b0:	000168ed 	.word	0x000168ed
   171b4:	00016825 	.word	0x00016825

000171b8 <reset_state>:
};

static struct prov_link link;

static void reset_state(void)
{
   171b8:	b510      	push	{r4, lr}
	if (link.conn) {
   171ba:	4c07      	ldr	r4, [pc, #28]	; (171d8 <reset_state+0x20>)
   171bc:	6820      	ldr	r0, [r4, #0]
   171be:	b118      	cbz	r0, 171c8 <reset_state+0x10>
		bt_conn_unref(link.conn);
   171c0:	f7f3 f9c2 	bl	a548 <bt_conn_unref>
		link.conn = NULL;
   171c4:	2300      	movs	r3, #0
   171c6:	6023      	str	r3, [r4, #0]
	}

	k_delayed_work_cancel(&link.prot_timer);
   171c8:	4804      	ldr	r0, [pc, #16]	; (171dc <reset_state+0x24>)
   171ca:	f00c fe55 	bl	23e78 <k_delayed_work_cancel>

	link.rx_buf = bt_mesh_proxy_get_buf();
   171ce:	f000 fbfb 	bl	179c8 <bt_mesh_proxy_get_buf>
   171d2:	60e0      	str	r0, [r4, #12]
}
   171d4:	bd10      	pop	{r4, pc}
   171d6:	bf00      	nop
   171d8:	20002210 	.word	0x20002210
   171dc:	20002220 	.word	0x20002220

000171e0 <link_closed>:

static void link_closed(enum prov_bearer_link_status status)
{
   171e0:	b570      	push	{r4, r5, r6, lr}
	const struct prov_bearer_cb *cb = link.cb;
   171e2:	4b06      	ldr	r3, [pc, #24]	; (171fc <link_closed+0x1c>)
	void *cb_data = link.cb_data;
   171e4:	e9d3 6401 	ldrd	r6, r4, [r3, #4]
{
   171e8:	4605      	mov	r5, r0

	reset_state();
   171ea:	f7ff ffe5 	bl	171b8 <reset_state>

	cb->link_closed(&pb_gatt, cb_data, status);
   171ee:	6873      	ldr	r3, [r6, #4]
   171f0:	4803      	ldr	r0, [pc, #12]	; (17200 <link_closed+0x20>)
   171f2:	462a      	mov	r2, r5
   171f4:	4621      	mov	r1, r4
}
   171f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb->link_closed(&pb_gatt, cb_data, status);
   171fa:	4718      	bx	r3
   171fc:	20002210 	.word	0x20002210
   17200:	0002f298 	.word	0x0002f298

00017204 <link_accept>:

	return 0;
}

static int link_accept(const struct prov_bearer_cb *cb, void *cb_data)
{
   17204:	b538      	push	{r3, r4, r5, lr}
   17206:	460c      	mov	r4, r1
   17208:	4605      	mov	r5, r0
	bt_mesh_proxy_prov_enable();
   1720a:	f000 fbe7 	bl	179dc <bt_mesh_proxy_prov_enable>
	bt_mesh_adv_update();
   1720e:	f7fd f993 	bl	14538 <bt_mesh_adv_update>

	link.cb = cb;
   17212:	4b02      	ldr	r3, [pc, #8]	; (1721c <link_accept+0x18>)
	link.cb_data = cb_data;

	return 0;
}
   17214:	2000      	movs	r0, #0
	link.cb_data = cb_data;
   17216:	e9c3 5401 	strd	r5, r4, [r3, #4]
}
   1721a:	bd38      	pop	{r3, r4, r5, pc}
   1721c:	20002210 	.word	0x20002210

00017220 <buf_send>:

static int buf_send(struct net_buf_simple *buf, prov_bearer_send_complete_t cb,
		    void *cb_data)
{
   17220:	b538      	push	{r3, r4, r5, lr}
	if (!link.conn) {
   17222:	4c0b      	ldr	r4, [pc, #44]	; (17250 <buf_send+0x30>)
   17224:	6823      	ldr	r3, [r4, #0]
{
   17226:	4605      	mov	r5, r0
	if (!link.conn) {
   17228:	b173      	cbz	r3, 17248 <buf_send+0x28>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   1722a:	f104 0110 	add.w	r1, r4, #16
   1722e:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   17232:	2300      	movs	r3, #0
   17234:	4807      	ldr	r0, [pc, #28]	; (17254 <buf_send+0x34>)
   17236:	f00c fdaf 	bl	23d98 <k_delayed_work_submit_to_queue>
		return -ENOTCONN;
	}

	k_delayed_work_submit(&link.prot_timer, PROTOCOL_TIMEOUT);

	return bt_mesh_proxy_send(link.conn, BT_MESH_PROXY_PROV, buf);
   1723a:	462a      	mov	r2, r5
   1723c:	6820      	ldr	r0, [r4, #0]
   1723e:	2103      	movs	r1, #3
}
   17240:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_mesh_proxy_send(link.conn, BT_MESH_PROXY_PROV, buf);
   17244:	f000 bc80 	b.w	17b48 <bt_mesh_proxy_send>
}
   17248:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1724c:	bd38      	pop	{r3, r4, r5, pc}
   1724e:	bf00      	nop
   17250:	20002210 	.word	0x20002210
   17254:	20002490 	.word	0x20002490

00017258 <bt_mesh_pb_gatt_recv>:
{
   17258:	b538      	push	{r3, r4, r5, lr}
	if (link.conn != conn || !link.cb) {
   1725a:	4c13      	ldr	r4, [pc, #76]	; (172a8 <bt_mesh_pb_gatt_recv+0x50>)
   1725c:	6823      	ldr	r3, [r4, #0]
   1725e:	4283      	cmp	r3, r0
{
   17260:	460d      	mov	r5, r1
	if (link.conn != conn || !link.cb) {
   17262:	d101      	bne.n	17268 <bt_mesh_pb_gatt_recv+0x10>
   17264:	6863      	ldr	r3, [r4, #4]
   17266:	b933      	cbnz	r3, 17276 <bt_mesh_pb_gatt_recv+0x1e>
		BT_WARN("Data for unexpected connection");
   17268:	4810      	ldr	r0, [pc, #64]	; (172ac <bt_mesh_pb_gatt_recv+0x54>)
   1726a:	2157      	movs	r1, #87	; 0x57
   1726c:	f00f fe7f 	bl	26f6e <printk>
		return -ENOTCONN;
   17270:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   17274:	bd38      	pop	{r3, r4, r5, pc}
	if (buf->len < 1) {
   17276:	888a      	ldrh	r2, [r1, #4]
   17278:	b932      	cbnz	r2, 17288 <bt_mesh_pb_gatt_recv+0x30>
		BT_WARN("Too short provisioning packet (len %u)", buf->len);
   1727a:	480d      	ldr	r0, [pc, #52]	; (172b0 <bt_mesh_pb_gatt_recv+0x58>)
   1727c:	2157      	movs	r1, #87	; 0x57
   1727e:	f00f fe76 	bl	26f6e <printk>
		return -EINVAL;
   17282:	f06f 0015 	mvn.w	r0, #21
   17286:	e7f5      	b.n	17274 <bt_mesh_pb_gatt_recv+0x1c>
   17288:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   1728c:	2300      	movs	r3, #0
   1728e:	f104 0110 	add.w	r1, r4, #16
   17292:	4808      	ldr	r0, [pc, #32]	; (172b4 <bt_mesh_pb_gatt_recv+0x5c>)
   17294:	f00c fd80 	bl	23d98 <k_delayed_work_submit_to_queue>
	link.cb->recv(&pb_gatt, link.cb_data, buf);
   17298:	6863      	ldr	r3, [r4, #4]
   1729a:	4807      	ldr	r0, [pc, #28]	; (172b8 <bt_mesh_pb_gatt_recv+0x60>)
   1729c:	68db      	ldr	r3, [r3, #12]
   1729e:	68a1      	ldr	r1, [r4, #8]
   172a0:	462a      	mov	r2, r5
   172a2:	4798      	blx	r3
	return 0;
   172a4:	2000      	movs	r0, #0
   172a6:	e7e5      	b.n	17274 <bt_mesh_pb_gatt_recv+0x1c>
   172a8:	20002210 	.word	0x20002210
   172ac:	00034835 	.word	0x00034835
   172b0:	000345f0 	.word	0x000345f0
   172b4:	20002490 	.word	0x20002490
   172b8:	0002f298 	.word	0x0002f298

000172bc <bt_mesh_pb_gatt_open>:
{
   172bc:	b538      	push	{r3, r4, r5, lr}
	if (link.conn) {
   172be:	4d0c      	ldr	r5, [pc, #48]	; (172f0 <bt_mesh_pb_gatt_open+0x34>)
   172c0:	682c      	ldr	r4, [r5, #0]
   172c2:	b98c      	cbnz	r4, 172e8 <bt_mesh_pb_gatt_open+0x2c>
	link.conn = bt_conn_ref(conn);
   172c4:	f012 f902 	bl	294cc <bt_conn_ref>
   172c8:	4629      	mov	r1, r5
   172ca:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   172ce:	f841 0b10 	str.w	r0, [r1], #16
   172d2:	2300      	movs	r3, #0
   172d4:	4807      	ldr	r0, [pc, #28]	; (172f4 <bt_mesh_pb_gatt_open+0x38>)
   172d6:	f00c fd5f 	bl	23d98 <k_delayed_work_submit_to_queue>
	link.cb->link_opened(&pb_gatt, link.cb_data);
   172da:	686b      	ldr	r3, [r5, #4]
   172dc:	4806      	ldr	r0, [pc, #24]	; (172f8 <bt_mesh_pb_gatt_open+0x3c>)
   172de:	681b      	ldr	r3, [r3, #0]
   172e0:	68a9      	ldr	r1, [r5, #8]
   172e2:	4798      	blx	r3
	return 0;
   172e4:	4620      	mov	r0, r4
}
   172e6:	bd38      	pop	{r3, r4, r5, pc}
		return -EBUSY;
   172e8:	f06f 000f 	mvn.w	r0, #15
   172ec:	e7fb      	b.n	172e6 <bt_mesh_pb_gatt_open+0x2a>
   172ee:	bf00      	nop
   172f0:	20002210 	.word	0x20002210
   172f4:	20002490 	.word	0x20002490
   172f8:	0002f298 	.word	0x0002f298

000172fc <bt_mesh_pb_gatt_close>:
{
   172fc:	b508      	push	{r3, lr}
	if (link.conn != conn) {
   172fe:	4b06      	ldr	r3, [pc, #24]	; (17318 <bt_mesh_pb_gatt_close+0x1c>)
   17300:	681b      	ldr	r3, [r3, #0]
   17302:	4283      	cmp	r3, r0
   17304:	d104      	bne.n	17310 <bt_mesh_pb_gatt_close+0x14>
	link_closed(PROV_BEARER_LINK_STATUS_SUCCESS);
   17306:	2000      	movs	r0, #0
   17308:	f7ff ff6a 	bl	171e0 <link_closed>
	return 0;
   1730c:	2000      	movs	r0, #0
}
   1730e:	bd08      	pop	{r3, pc}
		return -ENOTCONN;
   17310:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   17314:	e7fb      	b.n	1730e <bt_mesh_pb_gatt_close+0x12>
   17316:	bf00      	nop
   17318:	20002210 	.word	0x20002210

0001731c <pb_gatt_init>:
{
	/* No action */
}

void pb_gatt_init(void)
{
   1731c:	b510      	push	{r4, lr}
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   1731e:	4c05      	ldr	r4, [pc, #20]	; (17334 <pb_gatt_init+0x18>)
   17320:	2230      	movs	r2, #48	; 0x30
   17322:	2100      	movs	r1, #0
   17324:	f104 0010 	add.w	r0, r4, #16
   17328:	f016 f967 	bl	2d5fa <memset>
   1732c:	4b02      	ldr	r3, [pc, #8]	; (17338 <pb_gatt_init+0x1c>)
   1732e:	6163      	str	r3, [r4, #20]
	k_delayed_work_init(&link.prot_timer, protocol_timeout);
}
   17330:	bd10      	pop	{r4, pc}
   17332:	bf00      	nop
   17334:	20002210 	.word	0x20002210
   17338:	0002b4e1 	.word	0x0002b4e1

0001733c <find_client>:
static struct bt_mesh_proxy_client *find_client(struct bt_conn *conn)
{
	int i;

	for (i = 0; i < ARRAY_SIZE(clients); i++) {
		if (clients[i].conn == conn) {
   1733c:	4a0a      	ldr	r2, [pc, #40]	; (17368 <find_client+0x2c>)
   1733e:	6813      	ldr	r3, [r2, #0]
   17340:	4298      	cmp	r0, r3
   17342:	d00b      	beq.n	1735c <find_client+0x20>
   17344:	6d93      	ldr	r3, [r2, #88]	; 0x58
   17346:	4298      	cmp	r0, r3
   17348:	d00a      	beq.n	17360 <find_client+0x24>
   1734a:	f8d2 30b0 	ldr.w	r3, [r2, #176]	; 0xb0
   1734e:	4298      	cmp	r0, r3
   17350:	d108      	bne.n	17364 <find_client+0x28>
	for (i = 0; i < ARRAY_SIZE(clients); i++) {
   17352:	2302      	movs	r3, #2
			return &clients[i];
   17354:	2058      	movs	r0, #88	; 0x58
   17356:	fb00 2003 	mla	r0, r0, r3, r2
   1735a:	4770      	bx	lr
	for (i = 0; i < ARRAY_SIZE(clients); i++) {
   1735c:	2300      	movs	r3, #0
   1735e:	e7f9      	b.n	17354 <find_client+0x18>
   17360:	2301      	movs	r3, #1
   17362:	e7f7      	b.n	17354 <find_client+0x18>
		}
	}

	return NULL;
   17364:	2000      	movs	r0, #0
}
   17366:	4770      	bx	lr
   17368:	20000378 	.word	0x20000378

0001736c <proxy_send_beacons>:
{
	struct bt_mesh_proxy_client *client;

	client = CONTAINER_OF(work, struct bt_mesh_proxy_client, send_beacons);

	(void)bt_mesh_subnet_find(send_beacon_cb, client);
   1736c:	f1a0 010c 	sub.w	r1, r0, #12
   17370:	4801      	ldr	r0, [pc, #4]	; (17378 <proxy_send_beacons+0xc>)
   17372:	f7f7 bfff 	b.w	f374 <bt_mesh_subnet_find>
   17376:	bf00      	nop
   17378:	0002b603 	.word	0x0002b603

0001737c <proxy_sar_timeout>:
{
   1737c:	b510      	push	{r4, lr}
   1737e:	4604      	mov	r4, r0
	BT_WARN("Proxy SAR timeout");
   17380:	2157      	movs	r1, #87	; 0x57
   17382:	4806      	ldr	r0, [pc, #24]	; (1739c <proxy_sar_timeout+0x20>)
   17384:	f00f fdf3 	bl	26f6e <printk>
	if (client->conn) {
   17388:	f854 0c18 	ldr.w	r0, [r4, #-24]
   1738c:	b120      	cbz	r0, 17398 <proxy_sar_timeout+0x1c>
		bt_conn_disconnect(client->conn,
   1738e:	2113      	movs	r1, #19
}
   17390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_conn_disconnect(client->conn,
   17394:	f7f3 ba52 	b.w	a83c <bt_conn_disconnect>
}
   17398:	bd10      	pop	{r4, pc}
   1739a:	bf00      	nop
   1739c:	00034c2d 	.word	0x00034c2d

000173a0 <proxy_disconnected>:
{
	int i;

	BT_DBG("conn %p reason 0x%02x", conn, reason);

	conn_count--;
   173a0:	4a15      	ldr	r2, [pc, #84]	; (173f8 <proxy_disconnected+0x58>)
   173a2:	6813      	ldr	r3, [r2, #0]
{
   173a4:	b570      	push	{r4, r5, r6, lr}

	for (i = 0; i < ARRAY_SIZE(clients); i++) {
		struct bt_mesh_proxy_client *client = &clients[i];

		if (client->conn == conn) {
   173a6:	4c15      	ldr	r4, [pc, #84]	; (173fc <proxy_disconnected+0x5c>)
	conn_count--;
   173a8:	3b01      	subs	r3, #1
   173aa:	6013      	str	r3, [r2, #0]
		if (client->conn == conn) {
   173ac:	6823      	ldr	r3, [r4, #0]
   173ae:	4298      	cmp	r0, r3
   173b0:	d01e      	beq.n	173f0 <proxy_disconnected+0x50>
   173b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
   173b4:	4298      	cmp	r0, r3
   173b6:	d01d      	beq.n	173f4 <proxy_disconnected+0x54>
   173b8:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   173bc:	4298      	cmp	r0, r3
   173be:	d113      	bne.n	173e8 <proxy_disconnected+0x48>
	for (i = 0; i < ARRAY_SIZE(clients); i++) {
   173c0:	2602      	movs	r6, #2
			if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT) &&
			    client->filter_type == PROV) {
   173c2:	2558      	movs	r5, #88	; 0x58
   173c4:	fb05 4306 	mla	r3, r5, r6, r4
			if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT) &&
   173c8:	7a9b      	ldrb	r3, [r3, #10]
   173ca:	2b03      	cmp	r3, #3
   173cc:	d101      	bne.n	173d2 <proxy_disconnected+0x32>
				bt_mesh_pb_gatt_close(conn);
   173ce:	f7ff ff95 	bl	172fc <bt_mesh_pb_gatt_close>
			}

			k_delayed_work_cancel(&client->sar_timer);
   173d2:	4375      	muls	r5, r6
   173d4:	f105 0018 	add.w	r0, r5, #24
   173d8:	4420      	add	r0, r4
   173da:	f00c fd4d 	bl	23e78 <k_delayed_work_cancel>
			bt_conn_unref(client->conn);
   173de:	5960      	ldr	r0, [r4, r5]
   173e0:	f7f3 f8b2 	bl	a548 <bt_conn_unref>
			client->conn = NULL;
   173e4:	2300      	movs	r3, #0
   173e6:	5163      	str	r3, [r4, r5]
			break;
		}
	}

	bt_mesh_adv_update();
}
   173e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_mesh_adv_update();
   173ec:	f7fd b8a4 	b.w	14538 <bt_mesh_adv_update>
	for (i = 0; i < ARRAY_SIZE(clients); i++) {
   173f0:	2600      	movs	r6, #0
   173f2:	e7e6      	b.n	173c2 <proxy_disconnected+0x22>
   173f4:	2601      	movs	r6, #1
   173f6:	e7e4      	b.n	173c2 <proxy_disconnected+0x22>
   173f8:	20003188 	.word	0x20003188
   173fc:	20000378 	.word	0x20000378

00017400 <prov_ccc_write>:
{
	struct bt_mesh_proxy_client *client;

	BT_DBG("value 0x%04x", value);

	if (value != BT_GATT_CCC_NOTIFY) {
   17400:	2a01      	cmp	r2, #1
{
   17402:	b538      	push	{r3, r4, r5, lr}
   17404:	4605      	mov	r5, r0
	if (value != BT_GATT_CCC_NOTIFY) {
   17406:	d006      	beq.n	17416 <prov_ccc_write+0x16>
		BT_WARN("Client wrote 0x%04x instead enabling notify", value);
   17408:	480f      	ldr	r0, [pc, #60]	; (17448 <prov_ccc_write+0x48>)
   1740a:	2157      	movs	r1, #87	; 0x57
   1740c:	f00f fdaf 	bl	26f6e <printk>
   17410:	f06f 0012 	mvn.w	r0, #18
		client->filter_type = PROV;
		bt_mesh_pb_gatt_open(conn);
	}

	return sizeof(value);
}
   17414:	bd38      	pop	{r3, r4, r5, pc}
	client = find_client(conn);
   17416:	f7ff ff91 	bl	1733c <find_client>
	__ASSERT(client, "No client for connection");
   1741a:	4604      	mov	r4, r0
   1741c:	b950      	cbnz	r0, 17434 <prov_ccc_write+0x34>
   1741e:	490b      	ldr	r1, [pc, #44]	; (1744c <prov_ccc_write+0x4c>)
   17420:	480b      	ldr	r0, [pc, #44]	; (17450 <prov_ccc_write+0x50>)
   17422:	f240 226e 	movw	r2, #622	; 0x26e
   17426:	f00f fda2 	bl	26f6e <printk>
   1742a:	f240 216e 	movw	r1, #622	; 0x26e
   1742e:	4807      	ldr	r0, [pc, #28]	; (1744c <prov_ccc_write+0x4c>)
   17430:	f010 f816 	bl	27460 <assert_post_action>
	if (client->filter_type == NONE) {
   17434:	7aa3      	ldrb	r3, [r4, #10]
   17436:	b923      	cbnz	r3, 17442 <prov_ccc_write+0x42>
		client->filter_type = PROV;
   17438:	2303      	movs	r3, #3
   1743a:	72a3      	strb	r3, [r4, #10]
		bt_mesh_pb_gatt_open(conn);
   1743c:	4628      	mov	r0, r5
   1743e:	f7ff ff3d 	bl	172bc <bt_mesh_pb_gatt_open>
	return sizeof(value);
   17442:	2002      	movs	r0, #2
   17444:	e7e6      	b.n	17414 <prov_ccc_write+0x14>
   17446:	bf00      	nop
   17448:	0003495a 	.word	0x0003495a
   1744c:	0003498b 	.word	0x0003498b
   17450:	0002fa94 	.word	0x0002fa94

00017454 <proxy_connected>:
	conn_count++;
   17454:	4a16      	ldr	r2, [pc, #88]	; (174b0 <proxy_connected+0x5c>)
{
   17456:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	conn_count++;
   17458:	6813      	ldr	r3, [r2, #0]
   1745a:	3301      	adds	r3, #1
	if (conn_count < CONFIG_BT_MAX_CONN) {
   1745c:	2b02      	cmp	r3, #2
{
   1745e:	4607      	mov	r7, r0
	conn_count++;
   17460:	6013      	str	r3, [r2, #0]
	if (conn_count < CONFIG_BT_MAX_CONN) {
   17462:	dc01      	bgt.n	17468 <proxy_connected+0x14>
		bt_mesh_adv_update();
   17464:	f7fd f868 	bl	14538 <bt_mesh_adv_update>
		if (!clients[i].conn) {
   17468:	4c12      	ldr	r4, [pc, #72]	; (174b4 <proxy_connected+0x60>)
   1746a:	6823      	ldr	r3, [r4, #0]
   1746c:	b12b      	cbz	r3, 1747a <proxy_connected+0x26>
   1746e:	6da3      	ldr	r3, [r4, #88]	; 0x58
   17470:	b1ab      	cbz	r3, 1749e <proxy_connected+0x4a>
   17472:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   17476:	b9a3      	cbnz	r3, 174a2 <proxy_connected+0x4e>
	for (client = NULL, i = 0; i < ARRAY_SIZE(clients); i++) {
   17478:	2302      	movs	r3, #2
			client = &clients[i];
   1747a:	2558      	movs	r5, #88	; 0x58
	client->conn = bt_conn_ref(conn);
   1747c:	4638      	mov	r0, r7
   1747e:	435d      	muls	r5, r3
   17480:	f012 f824 	bl	294cc <bt_conn_ref>
			client = &clients[i];
   17484:	1966      	adds	r6, r4, r5
	client->conn = bt_conn_ref(conn);
   17486:	5160      	str	r0, [r4, r5]
	(void)memset(client->filter, 0, sizeof(client->filter));
   17488:	3504      	adds	r5, #4
	client->filter_type = NONE;
   1748a:	2300      	movs	r3, #0
	(void)memset(client->filter, 0, sizeof(client->filter));
   1748c:	1962      	adds	r2, r4, r5
	client->filter_type = NONE;
   1748e:	72b3      	strb	r3, [r6, #10]
__ssp_bos_icheck3(memset, void *, int)
   17490:	5163      	str	r3, [r4, r5]
   17492:	8093      	strh	r3, [r2, #4]
	buf->len  = 0U;
   17494:	f8a6 304c 	strh.w	r3, [r6, #76]	; 0x4c
	buf->data = buf->__buf;
   17498:	6d33      	ldr	r3, [r6, #80]	; 0x50
   1749a:	64b3      	str	r3, [r6, #72]	; 0x48
}
   1749c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (client = NULL, i = 0; i < ARRAY_SIZE(clients); i++) {
   1749e:	2301      	movs	r3, #1
   174a0:	e7eb      	b.n	1747a <proxy_connected+0x26>
		BT_ERR("No free Proxy Client objects");
   174a2:	2145      	movs	r1, #69	; 0x45
   174a4:	4804      	ldr	r0, [pc, #16]	; (174b8 <proxy_connected+0x64>)
}
   174a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("No free Proxy Client objects");
   174aa:	f00f bd60 	b.w	26f6e <printk>
   174ae:	bf00      	nop
   174b0:	20003188 	.word	0x20003188
   174b4:	20000378 	.word	0x20000378
   174b8:	00034aa9 	.word	0x00034aa9

000174bc <notify_complete>:
}

#endif /* CONFIG_BT_MESH_GATT_PROXY */

static void notify_complete(struct bt_conn *conn, void *user_data)
{
   174bc:	b510      	push	{r4, lr}
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   174be:	4b0d      	ldr	r3, [pc, #52]	; (174f4 <notify_complete+0x38>)
   174c0:	f3bf 8f5b 	dmb	ish
   174c4:	e853 2f00 	ldrex	r2, [r3]
   174c8:	1e51      	subs	r1, r2, #1
   174ca:	e843 1000 	strex	r0, r1, [r3]
   174ce:	2800      	cmp	r0, #0
   174d0:	d1f8      	bne.n	174c4 <notify_complete+0x8>
   174d2:	f3bf 8f5b 	dmb	ish
	sys_snode_t *n;

	if (atomic_dec(&pending_notifications) > 1) {
   174d6:	2a01      	cmp	r2, #1
   174d8:	dc0b      	bgt.n	174f2 <notify_complete+0x36>
Z_GENLIST_IS_EMPTY(slist)
   174da:	4c07      	ldr	r4, [pc, #28]	; (174f8 <notify_complete+0x3c>)
   174dc:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
   174de:	b143      	cbz	r3, 174f2 <notify_complete+0x36>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   174e0:	6861      	ldr	r1, [r4, #4]
   174e2:	681a      	ldr	r2, [r3, #0]
	list->head = node;
   174e4:	6022      	str	r2, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   174e6:	428b      	cmp	r3, r1
	list->tail = node;
   174e8:	bf08      	it	eq
   174ea:	6062      	streq	r2, [r4, #4]
	}

	BT_DBG("");

	while ((n = sys_slist_get(&idle_waiters))) {
		CONTAINER_OF(n, struct bt_mesh_proxy_idle_cb, n)->cb();
   174ec:	685b      	ldr	r3, [r3, #4]
   174ee:	4798      	blx	r3
   174f0:	e7f4      	b.n	174dc <notify_complete+0x20>
	}
}
   174f2:	bd10      	pop	{r4, pc}
   174f4:	20003194 	.word	0x20003194
   174f8:	2000318c 	.word	0x2000318c

000174fc <proxy_send>:

static int proxy_send(struct bt_conn *conn, const void *data,
		      uint16_t len)
{
   174fc:	b570      	push	{r4, r5, r6, lr}
   174fe:	b086      	sub	sp, #24
   17500:	460e      	mov	r6, r1
   17502:	4615      	mov	r5, r2
   17504:	4604      	mov	r4, r0
	struct bt_gatt_notify_params params = {
   17506:	2218      	movs	r2, #24
   17508:	2100      	movs	r1, #0
   1750a:	4668      	mov	r0, sp
   1750c:	f016 f875 	bl	2d5fa <memset>
   17510:	4b12      	ldr	r3, [pc, #72]	; (1755c <proxy_send+0x60>)
   17512:	9304      	str	r3, [sp, #16]
	int err;

	BT_DBG("%u bytes: %s", len, bt_hex(data, len));

#if defined(CONFIG_BT_MESH_GATT_PROXY)
	if (gatt_svc == MESH_GATT_PROXY) {
   17514:	4b12      	ldr	r3, [pc, #72]	; (17560 <proxy_send+0x64>)
	struct bt_gatt_notify_params params = {
   17516:	9602      	str	r6, [sp, #8]
	if (gatt_svc == MESH_GATT_PROXY) {
   17518:	781b      	ldrb	r3, [r3, #0]
	struct bt_gatt_notify_params params = {
   1751a:	f8ad 500c 	strh.w	r5, [sp, #12]
	if (gatt_svc == MESH_GATT_PROXY) {
   1751e:	2b02      	cmp	r3, #2
   17520:	d108      	bne.n	17534 <proxy_send+0x38>
		params.attr = &proxy_attrs[3];
   17522:	4b10      	ldr	r3, [pc, #64]	; (17564 <proxy_send+0x68>)
	}
#endif
#if defined(CONFIG_BT_MESH_PB_GATT)
	if (gatt_svc == MESH_GATT_PROV) {
		params.attr = &prov_attrs[3];
   17524:	9301      	str	r3, [sp, #4]

	if (!params.attr) {
		return 0;
	}

	err = bt_gatt_notify_cb(conn, &params);
   17526:	4669      	mov	r1, sp
   17528:	4620      	mov	r0, r4
   1752a:	f7f5 fd47 	bl	cfbc <bt_gatt_notify_cb>
	if (!err) {
   1752e:	b128      	cbz	r0, 1753c <proxy_send+0x40>
		atomic_inc(&pending_notifications);
	}

	return err;
}
   17530:	b006      	add	sp, #24
   17532:	bd70      	pop	{r4, r5, r6, pc}
	if (gatt_svc == MESH_GATT_PROV) {
   17534:	2b01      	cmp	r3, #1
   17536:	d10e      	bne.n	17556 <proxy_send+0x5a>
		params.attr = &prov_attrs[3];
   17538:	4b0b      	ldr	r3, [pc, #44]	; (17568 <proxy_send+0x6c>)
   1753a:	e7f3      	b.n	17524 <proxy_send+0x28>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1753c:	4b0b      	ldr	r3, [pc, #44]	; (1756c <proxy_send+0x70>)
   1753e:	f3bf 8f5b 	dmb	ish
   17542:	e853 2f00 	ldrex	r2, [r3]
   17546:	3201      	adds	r2, #1
   17548:	e843 2100 	strex	r1, r2, [r3]
   1754c:	2900      	cmp	r1, #0
   1754e:	d1f8      	bne.n	17542 <proxy_send+0x46>
   17550:	f3bf 8f5b 	dmb	ish
   17554:	e7ec      	b.n	17530 <proxy_send+0x34>
		return 0;
   17556:	2000      	movs	r0, #0
   17558:	e7ea      	b.n	17530 <proxy_send+0x34>
   1755a:	bf00      	nop
   1755c:	000174bd 	.word	0x000174bd
   17560:	20004840 	.word	0x20004840
   17564:	20000a34 	.word	0x20000a34
   17568:	20000984 	.word	0x20000984
   1756c:	20003194 	.word	0x20003194

00017570 <bt_mesh_proxy_beacon_send>:
{
   17570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!sub) {
   17572:	4605      	mov	r5, r0
   17574:	b920      	cbnz	r0, 17580 <bt_mesh_proxy_beacon_send+0x10>
		bt_mesh_subnet_foreach(bt_mesh_proxy_beacon_send);
   17576:	4809      	ldr	r0, [pc, #36]	; (1759c <bt_mesh_proxy_beacon_send+0x2c>)
}
   17578:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_mesh_subnet_foreach(bt_mesh_proxy_beacon_send);
   1757c:	f7f7 bf0c 	b.w	f398 <bt_mesh_subnet_foreach>
		if (clients[i].conn) {
   17580:	4e07      	ldr	r6, [pc, #28]	; (175a0 <bt_mesh_proxy_beacon_send+0x30>)
	for (i = 0; i < ARRAY_SIZE(clients); i++) {
   17582:	2400      	movs	r4, #0
		if (clients[i].conn) {
   17584:	2758      	movs	r7, #88	; 0x58
   17586:	fb07 f304 	mul.w	r3, r7, r4
   1758a:	5998      	ldr	r0, [r3, r6]
   1758c:	b110      	cbz	r0, 17594 <bt_mesh_proxy_beacon_send+0x24>
			beacon_send(clients[i].conn, sub);
   1758e:	4629      	mov	r1, r5
   17590:	f014 f81e 	bl	2b5d0 <beacon_send>
	for (i = 0; i < ARRAY_SIZE(clients); i++) {
   17594:	3401      	adds	r4, #1
   17596:	2c03      	cmp	r4, #3
   17598:	d1f5      	bne.n	17586 <bt_mesh_proxy_beacon_send+0x16>
}
   1759a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1759c:	00017571 	.word	0x00017571
   175a0:	20000378 	.word	0x20000378

000175a4 <subnet_evt>:
}

#if defined(CONFIG_BT_MESH_GATT_PROXY)
static void subnet_evt(struct bt_mesh_subnet *sub, enum bt_mesh_key_evt evt)
{
	if (evt == BT_MESH_KEY_DELETED) {
   175a4:	2901      	cmp	r1, #1
{
   175a6:	b410      	push	{r4}
	if (evt == BT_MESH_KEY_DELETED) {
   175a8:	d107      	bne.n	175ba <subnet_evt+0x16>
		if (sub == beacon_sub) {
   175aa:	4b05      	ldr	r3, [pc, #20]	; (175c0 <subnet_evt+0x1c>)
   175ac:	681a      	ldr	r2, [r3, #0]
   175ae:	4290      	cmp	r0, r2
   175b0:	d101      	bne.n	175b6 <subnet_evt+0x12>
			beacon_sub = NULL;
   175b2:	2200      	movs	r2, #0
   175b4:	601a      	str	r2, [r3, #0]
		}
	} else {
		bt_mesh_proxy_beacon_send(sub);
	}
}
   175b6:	bc10      	pop	{r4}
   175b8:	4770      	bx	lr
   175ba:	bc10      	pop	{r4}
		bt_mesh_proxy_beacon_send(sub);
   175bc:	f7ff bfd8 	b.w	17570 <bt_mesh_proxy_beacon_send>
   175c0:	20003184 	.word	0x20003184

000175c4 <send_filter_status>:
{
   175c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct bt_mesh_net_tx tx = {
   175c6:	f851 3b04 	ldr.w	r3, [r1], #4
   175ca:	2600      	movs	r6, #0
{
   175cc:	4614      	mov	r4, r2
   175ce:	4605      	mov	r5, r0
	struct bt_mesh_net_tx tx = {
   175d0:	e9cd 3101 	strd	r3, r1, [sp, #4]
   175d4:	9603      	str	r6, [sp, #12]
		.src = bt_mesh_primary_addr(),
   175d6:	f7fa fcf3 	bl	11fc0 <bt_mesh_primary_addr>
	tx.ctx->addr = BT_MESH_ADDR_UNASSIGNED;
   175da:	9b02      	ldr	r3, [sp, #8]
	struct bt_mesh_net_tx tx = {
   175dc:	f8ad 000c 	strh.w	r0, [sp, #12]
	tx.ctx->addr = BT_MESH_ADDR_UNASSIGNED;
   175e0:	809e      	strh	r6, [r3, #4]
   175e2:	68a3      	ldr	r3, [r4, #8]
   175e4:	6023      	str	r3, [r4, #0]
	net_buf_simple_reserve(buf, 10);
   175e6:	210a      	movs	r1, #10
   175e8:	4620      	mov	r0, r4
	buf->len  = 0U;
   175ea:	80a6      	strh	r6, [r4, #4]
   175ec:	f007 fbc8 	bl	1ed80 <net_buf_simple_reserve>
	net_buf_simple_add_u8(buf, CFG_FILTER_STATUS);
   175f0:	2103      	movs	r1, #3
   175f2:	4620      	mov	r0, r4
   175f4:	f015 fa01 	bl	2c9fa <net_buf_simple_add_u8>
	if (client->filter_type == WHITELIST) {
   175f8:	7aab      	ldrb	r3, [r5, #10]
   175fa:	2b01      	cmp	r3, #1
		net_buf_simple_add_u8(buf, 0x00);
   175fc:	bf0c      	ite	eq
   175fe:	4631      	moveq	r1, r6
		net_buf_simple_add_u8(buf, 0x01);
   17600:	2101      	movne	r1, #1
   17602:	4620      	mov	r0, r4
   17604:	f015 f9f9 	bl	2c9fa <net_buf_simple_add_u8>
		if (client->filter[i] != BT_MESH_ADDR_UNASSIGNED) {
   17608:	88a9      	ldrh	r1, [r5, #4]
   1760a:	88eb      	ldrh	r3, [r5, #6]
	for (filter_size = 0U, i = 0; i < ARRAY_SIZE(client->filter); i++) {
   1760c:	3100      	adds	r1, #0
   1760e:	bf18      	it	ne
   17610:	2101      	movne	r1, #1
		if (client->filter[i] != BT_MESH_ADDR_UNASSIGNED) {
   17612:	b103      	cbz	r3, 17616 <send_filter_status+0x52>
			filter_size++;
   17614:	3101      	adds	r1, #1
		if (client->filter[i] != BT_MESH_ADDR_UNASSIGNED) {
   17616:	892b      	ldrh	r3, [r5, #8]
   17618:	b10b      	cbz	r3, 1761e <send_filter_status+0x5a>
			filter_size++;
   1761a:	3101      	adds	r1, #1
   1761c:	b289      	uxth	r1, r1
	net_buf_simple_add_be16(buf, filter_size);
   1761e:	4620      	mov	r0, r4
   17620:	f015 f9fb 	bl	2ca1a <net_buf_simple_add_be16>
	err = bt_mesh_net_encode(&tx, buf, true);
   17624:	2201      	movs	r2, #1
   17626:	4621      	mov	r1, r4
   17628:	a801      	add	r0, sp, #4
   1762a:	f7f7 f911 	bl	e850 <bt_mesh_net_encode>
	if (err) {
   1762e:	4602      	mov	r2, r0
   17630:	b128      	cbz	r0, 1763e <send_filter_status+0x7a>
		BT_ERR("Encoding Proxy cfg message failed (err %d)", err);
   17632:	4808      	ldr	r0, [pc, #32]	; (17654 <send_filter_status+0x90>)
   17634:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Failed to send proxy cfg message (err %d)", err);
   17636:	f00f fc9a 	bl	26f6e <printk>
}
   1763a:	b004      	add	sp, #16
   1763c:	bd70      	pop	{r4, r5, r6, pc}
	err = proxy_segment_and_send(client->conn, BT_MESH_PROXY_CONFIG, buf);
   1763e:	4622      	mov	r2, r4
   17640:	2102      	movs	r1, #2
   17642:	6828      	ldr	r0, [r5, #0]
   17644:	f013 ff7b 	bl	2b53e <proxy_segment_and_send>
	if (err) {
   17648:	4602      	mov	r2, r0
   1764a:	2800      	cmp	r0, #0
   1764c:	d0f5      	beq.n	1763a <send_filter_status+0x76>
		BT_ERR("Failed to send proxy cfg message (err %d)", err);
   1764e:	2145      	movs	r1, #69	; 0x45
   17650:	4801      	ldr	r0, [pc, #4]	; (17658 <send_filter_status+0x94>)
   17652:	e7f0      	b.n	17636 <send_filter_status+0x72>
   17654:	00034c44 	.word	0x00034c44
   17658:	00034c74 	.word	0x00034c74

0001765c <proxy_complete_pdu>:
{
   1765c:	b570      	push	{r4, r5, r6, lr}
	switch (client->msg_type) {
   1765e:	7ac2      	ldrb	r2, [r0, #11]
{
   17660:	b094      	sub	sp, #80	; 0x50
   17662:	4604      	mov	r4, r0
	switch (client->msg_type) {
   17664:	2a03      	cmp	r2, #3
   17666:	f200 80a6 	bhi.w	177b6 <proxy_complete_pdu+0x15a>
   1766a:	e8df f002 	tbb	[pc, r2]
   1766e:	0e02      	.short	0x0e02
   17670:	9e12      	.short	0x9e12
		bt_mesh_net_recv(&client->buf, 0, BT_MESH_NET_IF_PROXY);
   17672:	2202      	movs	r2, #2
   17674:	2100      	movs	r1, #0
   17676:	3048      	adds	r0, #72	; 0x48
   17678:	f7f7 fabe 	bl	ebf8 <bt_mesh_net_recv>
   1767c:	2300      	movs	r3, #0
   1767e:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
	buf->data = buf->__buf;
   17682:	6d23      	ldr	r3, [r4, #80]	; 0x50
   17684:	64a3      	str	r3, [r4, #72]	; 0x48
}
   17686:	b014      	add	sp, #80	; 0x50
   17688:	bd70      	pop	{r4, r5, r6, pc}
		bt_mesh_beacon_recv(&client->buf);
   1768a:	3048      	adds	r0, #72	; 0x48
   1768c:	f7f6 fcee 	bl	e06c <bt_mesh_beacon_recv>
		break;
   17690:	e7f4      	b.n	1767c <proxy_complete_pdu+0x20>
	NET_BUF_SIMPLE_DEFINE(buf, BT_MESH_NET_MAX_PDU_LEN);
   17692:	ab0c      	add	r3, sp, #48	; 0x30
   17694:	f44f 12e8 	mov.w	r2, #1900544	; 0x1d0000
   17698:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1769c:	9303      	str	r3, [sp, #12]
	err = bt_mesh_net_decode(&client->buf, BT_MESH_NET_IF_PROXY_CFG,
   1769e:	aa06      	add	r2, sp, #24
   176a0:	ab03      	add	r3, sp, #12
   176a2:	2103      	movs	r1, #3
   176a4:	3048      	adds	r0, #72	; 0x48
   176a6:	f7f7 f9f3 	bl	ea90 <bt_mesh_net_decode>
	if (err) {
   176aa:	4602      	mov	r2, r0
   176ac:	b120      	cbz	r0, 176b8 <proxy_complete_pdu+0x5c>
		BT_ERR("Failed to decode Proxy Configuration (err %d)", err);
   176ae:	4843      	ldr	r0, [pc, #268]	; (177bc <proxy_complete_pdu+0x160>)
   176b0:	2145      	movs	r1, #69	; 0x45
		BT_WARN("Unhandled Message Type 0x%02x", client->msg_type);
   176b2:	f00f fc5c 	bl	26f6e <printk>
   176b6:	e7e1      	b.n	1767c <proxy_complete_pdu+0x20>
	rx.local_match = 1U;
   176b8:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
	if (bt_mesh_rpl_check(&rx, NULL)) {
   176bc:	4601      	mov	r1, r0
	rx.local_match = 1U;
   176be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
	if (bt_mesh_rpl_check(&rx, NULL)) {
   176c2:	a806      	add	r0, sp, #24
	rx.local_match = 1U;
   176c4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	if (bt_mesh_rpl_check(&rx, NULL)) {
   176c8:	f7f9 fc8e 	bl	10fe8 <bt_mesh_rpl_check>
   176cc:	4605      	mov	r5, r0
   176ce:	b150      	cbz	r0, 176e6 <proxy_complete_pdu+0x8a>
		BT_WARN("Replay: src 0x%04x dst 0x%04x seq 0x%06x",
   176d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   176d2:	9300      	str	r3, [sp, #0]
   176d4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   176d8:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
   176dc:	4838      	ldr	r0, [pc, #224]	; (177c0 <proxy_complete_pdu+0x164>)
   176de:	2157      	movs	r1, #87	; 0x57
   176e0:	f00f fc45 	bl	26f6e <printk>
		return;
   176e4:	e7ca      	b.n	1767c <proxy_complete_pdu+0x20>
	net_buf_simple_pull(&buf, BT_MESH_NET_HDR_LEN);
   176e6:	2109      	movs	r1, #9
   176e8:	a803      	add	r0, sp, #12
   176ea:	f007 fd49 	bl	1f180 <net_buf_simple_pull>
	if (buf.len < 1) {
   176ee:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   176f2:	b923      	cbnz	r3, 176fe <proxy_complete_pdu+0xa2>
		BT_WARN("Too short proxy configuration PDU");
   176f4:	2157      	movs	r1, #87	; 0x57
   176f6:	4833      	ldr	r0, [pc, #204]	; (177c4 <proxy_complete_pdu+0x168>)
   176f8:	f00f fc39 	bl	26f6e <printk>
		return;
   176fc:	e7be      	b.n	1767c <proxy_complete_pdu+0x20>
	opcode = net_buf_simple_pull_u8(&buf);
   176fe:	a803      	add	r0, sp, #12
   17700:	f015 f929 	bl	2c956 <net_buf_simple_pull_u8>
	switch (opcode) {
   17704:	2801      	cmp	r0, #1
	opcode = net_buf_simple_pull_u8(&buf);
   17706:	4602      	mov	r2, r0
	switch (opcode) {
   17708:	d043      	beq.n	17792 <proxy_complete_pdu+0x136>
   1770a:	b246      	sxtb	r6, r0
   1770c:	b1c6      	cbz	r6, 17740 <proxy_complete_pdu+0xe4>
   1770e:	2802      	cmp	r0, #2
   17710:	d148      	bne.n	177a4 <proxy_complete_pdu+0x148>
		while (buf.len >= 2) {
   17712:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   17716:	2b01      	cmp	r3, #1
   17718:	d919      	bls.n	1774e <proxy_complete_pdu+0xf2>
			addr = net_buf_simple_pull_be16(&buf);
   1771a:	a803      	add	r0, sp, #12
   1771c:	f015 f92b 	bl	2c976 <net_buf_simple_pull_be16>
	if (addr == BT_MESH_ADDR_UNASSIGNED) {
   17720:	2800      	cmp	r0, #0
   17722:	d0f6      	beq.n	17712 <proxy_complete_pdu+0xb6>
		if (client->filter[i] == addr) {
   17724:	88a3      	ldrh	r3, [r4, #4]
   17726:	4283      	cmp	r3, r0
   17728:	d038      	beq.n	1779c <proxy_complete_pdu+0x140>
   1772a:	88e3      	ldrh	r3, [r4, #6]
   1772c:	4283      	cmp	r3, r0
   1772e:	d037      	beq.n	177a0 <proxy_complete_pdu+0x144>
   17730:	8923      	ldrh	r3, [r4, #8]
   17732:	4283      	cmp	r3, r0
   17734:	d1ed      	bne.n	17712 <proxy_complete_pdu+0xb6>
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
   17736:	2302      	movs	r3, #2
			client->filter[i] = BT_MESH_ADDR_UNASSIGNED;
   17738:	eb04 0343 	add.w	r3, r4, r3, lsl #1
   1773c:	809d      	strh	r5, [r3, #4]
			return;
   1773e:	e7e8      	b.n	17712 <proxy_complete_pdu+0xb6>
	if (buf->len < 1) {
   17740:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   17744:	b94b      	cbnz	r3, 1775a <proxy_complete_pdu+0xfe>
		BT_WARN("Too short Filter Set message");
   17746:	2157      	movs	r1, #87	; 0x57
   17748:	481f      	ldr	r0, [pc, #124]	; (177c8 <proxy_complete_pdu+0x16c>)
   1774a:	f00f fc10 	bl	26f6e <printk>
		send_filter_status(client, &rx, &buf);
   1774e:	aa03      	add	r2, sp, #12
   17750:	a906      	add	r1, sp, #24
   17752:	4620      	mov	r0, r4
   17754:	f7ff ff36 	bl	175c4 <send_filter_status>
		break;
   17758:	e790      	b.n	1767c <proxy_complete_pdu+0x20>
	type = net_buf_simple_pull_u8(buf);
   1775a:	a803      	add	r0, sp, #12
   1775c:	f015 f8fb 	bl	2c956 <net_buf_simple_pull_u8>
	switch (type) {
   17760:	4602      	mov	r2, r0
   17762:	b130      	cbz	r0, 17772 <proxy_complete_pdu+0x116>
   17764:	2801      	cmp	r0, #1
   17766:	d009      	beq.n	1777c <proxy_complete_pdu+0x120>
		BT_WARN("Prohibited Filter Type 0x%02x", type);
   17768:	2157      	movs	r1, #87	; 0x57
   1776a:	4818      	ldr	r0, [pc, #96]	; (177cc <proxy_complete_pdu+0x170>)
   1776c:	f00f fbff 	bl	26f6e <printk>
		return -EINVAL;
   17770:	e7ed      	b.n	1774e <proxy_complete_pdu+0xf2>
   17772:	6060      	str	r0, [r4, #4]
   17774:	8120      	strh	r0, [r4, #8]
		client->filter_type = WHITELIST;
   17776:	2301      	movs	r3, #1
		client->filter_type = BLACKLIST;
   17778:	72a3      	strb	r3, [r4, #10]
		break;
   1777a:	e7e8      	b.n	1774e <proxy_complete_pdu+0xf2>
   1777c:	6066      	str	r6, [r4, #4]
   1777e:	8126      	strh	r6, [r4, #8]
		client->filter_type = BLACKLIST;
   17780:	2302      	movs	r3, #2
   17782:	e7f9      	b.n	17778 <proxy_complete_pdu+0x11c>
			addr = net_buf_simple_pull_be16(&buf);
   17784:	a803      	add	r0, sp, #12
   17786:	f015 f8f6 	bl	2c976 <net_buf_simple_pull_be16>
			filter_add(client, addr);
   1778a:	4601      	mov	r1, r0
   1778c:	4620      	mov	r0, r4
   1778e:	f013 fec1 	bl	2b514 <filter_add>
		while (buf.len >= 2) {
   17792:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   17796:	2b01      	cmp	r3, #1
   17798:	d8f4      	bhi.n	17784 <proxy_complete_pdu+0x128>
   1779a:	e7d8      	b.n	1774e <proxy_complete_pdu+0xf2>
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
   1779c:	2300      	movs	r3, #0
   1779e:	e7cb      	b.n	17738 <proxy_complete_pdu+0xdc>
   177a0:	2301      	movs	r3, #1
   177a2:	e7c9      	b.n	17738 <proxy_complete_pdu+0xdc>
		BT_WARN("Unhandled configuration OpCode 0x%02x", opcode);
   177a4:	2157      	movs	r1, #87	; 0x57
   177a6:	480a      	ldr	r0, [pc, #40]	; (177d0 <proxy_complete_pdu+0x174>)
   177a8:	e783      	b.n	176b2 <proxy_complete_pdu+0x56>
		bt_mesh_pb_gatt_recv(client->conn, &client->buf);
   177aa:	f100 0148 	add.w	r1, r0, #72	; 0x48
   177ae:	6800      	ldr	r0, [r0, #0]
   177b0:	f7ff fd52 	bl	17258 <bt_mesh_pb_gatt_recv>
		break;
   177b4:	e762      	b.n	1767c <proxy_complete_pdu+0x20>
		BT_WARN("Unhandled Message Type 0x%02x", client->msg_type);
   177b6:	2157      	movs	r1, #87	; 0x57
   177b8:	4806      	ldr	r0, [pc, #24]	; (177d4 <proxy_complete_pdu+0x178>)
   177ba:	e77a      	b.n	176b2 <proxy_complete_pdu+0x56>
   177bc:	000349bc 	.word	0x000349bc
   177c0:	0003237a 	.word	0x0003237a
   177c4:	000349ef 	.word	0x000349ef
   177c8:	00034a16 	.word	0x00034a16
   177cc:	00034a38 	.word	0x00034a38
   177d0:	00034a5b 	.word	0x00034a5b
   177d4:	00034a86 	.word	0x00034a86

000177d8 <proxy_recv>:
{
   177d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   177dc:	4616      	mov	r6, r2
   177de:	461c      	mov	r4, r3
	struct bt_mesh_proxy_client *client = find_client(conn);
   177e0:	f7ff fdac 	bl	1733c <find_client>
	if (!client) {
   177e4:	4605      	mov	r5, r0
   177e6:	2800      	cmp	r0, #0
   177e8:	d07c      	beq.n	178e4 <proxy_recv+0x10c>
	if (len < 1) {
   177ea:	b934      	cbnz	r4, 177fa <proxy_recv+0x22>
		BT_WARN("Too small Proxy PDU");
   177ec:	483f      	ldr	r0, [pc, #252]	; (178ec <proxy_recv+0x114>)
   177ee:	2157      	movs	r1, #87	; 0x57
			BT_WARN("Unexpected message type in last SAR PDU");
   177f0:	f00f fbbd 	bl	26f6e <printk>
			return -EINVAL;
   177f4:	f06f 0415 	mvn.w	r4, #21
   177f8:	e049      	b.n	1788e <proxy_recv+0xb6>
	if (ATTR_IS_PROV(attr) != (PDU_TYPE(data) == BT_MESH_PROXY_PROV)) {
   177fa:	7832      	ldrb	r2, [r6, #0]
   177fc:	68c9      	ldr	r1, [r1, #12]
   177fe:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   17802:	3100      	adds	r1, #0
   17804:	f1a2 0303 	sub.w	r3, r2, #3
   17808:	bf18      	it	ne
   1780a:	2101      	movne	r1, #1
   1780c:	425a      	negs	r2, r3
   1780e:	415a      	adcs	r2, r3
   17810:	4291      	cmp	r1, r2
   17812:	d002      	beq.n	1781a <proxy_recv+0x42>
		BT_WARN("Proxy PDU type doesn't match GATT service");
   17814:	2157      	movs	r1, #87	; 0x57
   17816:	4836      	ldr	r0, [pc, #216]	; (178f0 <proxy_recv+0x118>)
   17818:	e7ea      	b.n	177f0 <proxy_recv+0x18>
	if (len - 1 > net_buf_simple_tailroom(&client->buf)) {
   1781a:	f100 0748 	add.w	r7, r0, #72	; 0x48
   1781e:	4638      	mov	r0, r7
   17820:	f015 f8d7 	bl	2c9d2 <net_buf_simple_tailroom>
   17824:	f104 38ff 	add.w	r8, r4, #4294967295
   17828:	4580      	cmp	r8, r0
   1782a:	d902      	bls.n	17832 <proxy_recv+0x5a>
		BT_WARN("Too big proxy PDU");
   1782c:	2157      	movs	r1, #87	; 0x57
   1782e:	4831      	ldr	r0, [pc, #196]	; (178f4 <proxy_recv+0x11c>)
   17830:	e7de      	b.n	177f0 <proxy_recv+0x18>
	switch (PDU_SAR(data)) {
   17832:	7833      	ldrb	r3, [r6, #0]
   17834:	f8b5 204c 	ldrh.w	r2, [r5, #76]	; 0x4c
   17838:	0999      	lsrs	r1, r3, #6
   1783a:	2902      	cmp	r1, #2
   1783c:	d02a      	beq.n	17894 <proxy_recv+0xbc>
   1783e:	2903      	cmp	r1, #3
   17840:	d03f      	beq.n	178c2 <proxy_recv+0xea>
   17842:	2901      	cmp	r1, #1
   17844:	d00d      	beq.n	17862 <proxy_recv+0x8a>
		if (client->buf.len) {
   17846:	b112      	cbz	r2, 1784e <proxy_recv+0x76>
			BT_WARN("Complete PDU while a pending incomplete one");
   17848:	2157      	movs	r1, #87	; 0x57
   1784a:	482b      	ldr	r0, [pc, #172]	; (178f8 <proxy_recv+0x120>)
   1784c:	e7d0      	b.n	177f0 <proxy_recv+0x18>
		client->msg_type = PDU_TYPE(data);
   1784e:	72eb      	strb	r3, [r5, #11]
		net_buf_simple_add_mem(&client->buf, data + 1, len - 1);
   17850:	4642      	mov	r2, r8
   17852:	1c71      	adds	r1, r6, #1
   17854:	4638      	mov	r0, r7
   17856:	f015 f8c4 	bl	2c9e2 <net_buf_simple_add_mem>
		proxy_complete_pdu(client);
   1785a:	4628      	mov	r0, r5
   1785c:	f7ff fefe 	bl	1765c <proxy_complete_pdu>
		break;
   17860:	e015      	b.n	1788e <proxy_recv+0xb6>
		if (client->buf.len) {
   17862:	b112      	cbz	r2, 1786a <proxy_recv+0x92>
			BT_WARN("First PDU while a pending incomplete one");
   17864:	2157      	movs	r1, #87	; 0x57
   17866:	4825      	ldr	r0, [pc, #148]	; (178fc <proxy_recv+0x124>)
   17868:	e7c2      	b.n	177f0 <proxy_recv+0x18>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   1786a:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
   1786e:	2300      	movs	r3, #0
   17870:	f105 0118 	add.w	r1, r5, #24
   17874:	4822      	ldr	r0, [pc, #136]	; (17900 <proxy_recv+0x128>)
   17876:	f00c fa8f 	bl	23d98 <k_delayed_work_submit_to_queue>
		client->msg_type = PDU_TYPE(data);
   1787a:	4631      	mov	r1, r6
		net_buf_simple_add_mem(&client->buf, data + 1, len - 1);
   1787c:	4642      	mov	r2, r8
		client->msg_type = PDU_TYPE(data);
   1787e:	f811 3b01 	ldrb.w	r3, [r1], #1
   17882:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   17886:	72eb      	strb	r3, [r5, #11]
		net_buf_simple_add_mem(&client->buf, data + 1, len - 1);
   17888:	4638      	mov	r0, r7
   1788a:	f015 f8aa 	bl	2c9e2 <net_buf_simple_add_mem>
}
   1788e:	4620      	mov	r0, r4
   17890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!client->buf.len) {
   17894:	b912      	cbnz	r2, 1789c <proxy_recv+0xc4>
			BT_WARN("Continuation with no prior data");
   17896:	2157      	movs	r1, #87	; 0x57
   17898:	481a      	ldr	r0, [pc, #104]	; (17904 <proxy_recv+0x12c>)
   1789a:	e7a9      	b.n	177f0 <proxy_recv+0x18>
		if (client->msg_type != PDU_TYPE(data)) {
   1789c:	7aea      	ldrb	r2, [r5, #11]
   1789e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   178a2:	429a      	cmp	r2, r3
   178a4:	d002      	beq.n	178ac <proxy_recv+0xd4>
			BT_WARN("Unexpected message type in continuation");
   178a6:	2157      	movs	r1, #87	; 0x57
   178a8:	4817      	ldr	r0, [pc, #92]	; (17908 <proxy_recv+0x130>)
   178aa:	e7a1      	b.n	177f0 <proxy_recv+0x18>
   178ac:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
   178b0:	f105 0118 	add.w	r1, r5, #24
   178b4:	2300      	movs	r3, #0
   178b6:	4812      	ldr	r0, [pc, #72]	; (17900 <proxy_recv+0x128>)
   178b8:	f00c fa6e 	bl	23d98 <k_delayed_work_submit_to_queue>
		net_buf_simple_add_mem(&client->buf, data + 1, len - 1);
   178bc:	4642      	mov	r2, r8
   178be:	1c71      	adds	r1, r6, #1
   178c0:	e7e2      	b.n	17888 <proxy_recv+0xb0>
		if (!client->buf.len) {
   178c2:	b912      	cbnz	r2, 178ca <proxy_recv+0xf2>
			BT_WARN("Last SAR PDU with no prior data");
   178c4:	2157      	movs	r1, #87	; 0x57
   178c6:	4811      	ldr	r0, [pc, #68]	; (1790c <proxy_recv+0x134>)
   178c8:	e792      	b.n	177f0 <proxy_recv+0x18>
		if (client->msg_type != PDU_TYPE(data)) {
   178ca:	7aea      	ldrb	r2, [r5, #11]
   178cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   178d0:	429a      	cmp	r2, r3
   178d2:	d002      	beq.n	178da <proxy_recv+0x102>
			BT_WARN("Unexpected message type in last SAR PDU");
   178d4:	2157      	movs	r1, #87	; 0x57
   178d6:	480e      	ldr	r0, [pc, #56]	; (17910 <proxy_recv+0x138>)
   178d8:	e78a      	b.n	177f0 <proxy_recv+0x18>
		k_delayed_work_cancel(&client->sar_timer);
   178da:	f105 0018 	add.w	r0, r5, #24
   178de:	f00c facb 	bl	23e78 <k_delayed_work_cancel>
   178e2:	e7b5      	b.n	17850 <proxy_recv+0x78>
		return -ENOTCONN;
   178e4:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   178e8:	e7d1      	b.n	1788e <proxy_recv+0xb6>
   178ea:	bf00      	nop
   178ec:	00034acb 	.word	0x00034acb
   178f0:	00034ae4 	.word	0x00034ae4
   178f4:	00034b13 	.word	0x00034b13
   178f8:	00034b2a 	.word	0x00034b2a
   178fc:	00034b5b 	.word	0x00034b5b
   17900:	20002490 	.word	0x20002490
   17904:	00034b89 	.word	0x00034b89
   17908:	00034bae 	.word	0x00034bae
   1790c:	00034bdb 	.word	0x00034bdb
   17910:	00034c00 	.word	0x00034c00

00017914 <proxy_ccc_write>:
	if (value != BT_GATT_CCC_NOTIFY) {
   17914:	2a01      	cmp	r2, #1
{
   17916:	b510      	push	{r4, lr}
	if (value != BT_GATT_CCC_NOTIFY) {
   17918:	d006      	beq.n	17928 <proxy_ccc_write+0x14>
		BT_WARN("Client wrote 0x%04x instead enabling notify", value);
   1791a:	4819      	ldr	r0, [pc, #100]	; (17980 <proxy_ccc_write+0x6c>)
   1791c:	2157      	movs	r1, #87	; 0x57
   1791e:	f00f fb26 	bl	26f6e <printk>
   17922:	f06f 0012 	mvn.w	r0, #18
}
   17926:	bd10      	pop	{r4, pc}
	client = find_client(conn);
   17928:	f7ff fd08 	bl	1733c <find_client>
	__ASSERT(client, "No client for connection");
   1792c:	4604      	mov	r4, r0
   1792e:	b950      	cbnz	r0, 17946 <proxy_ccc_write+0x32>
   17930:	4914      	ldr	r1, [pc, #80]	; (17984 <proxy_ccc_write+0x70>)
   17932:	4815      	ldr	r0, [pc, #84]	; (17988 <proxy_ccc_write+0x74>)
   17934:	f240 22e5 	movw	r2, #741	; 0x2e5
   17938:	f00f fb19 	bl	26f6e <printk>
   1793c:	f240 21e5 	movw	r1, #741	; 0x2e5
   17940:	4810      	ldr	r0, [pc, #64]	; (17984 <proxy_ccc_write+0x70>)
   17942:	f00f fd8d 	bl	27460 <assert_post_action>
	if (client->filter_type == NONE) {
   17946:	7aa3      	ldrb	r3, [r4, #10]
   17948:	b10b      	cbz	r3, 1794e <proxy_ccc_write+0x3a>
	return sizeof(value);
   1794a:	2002      	movs	r0, #2
   1794c:	e7eb      	b.n	17926 <proxy_ccc_write+0x12>
		client->filter_type = WHITELIST;
   1794e:	2301      	movs	r3, #1
   17950:	72a3      	strb	r3, [r4, #10]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17952:	f104 0314 	add.w	r3, r4, #20
   17956:	f3bf 8f5b 	dmb	ish
   1795a:	e853 2f00 	ldrex	r2, [r3]
   1795e:	f042 0101 	orr.w	r1, r2, #1
   17962:	e843 1000 	strex	r0, r1, [r3]
   17966:	2800      	cmp	r0, #0
   17968:	d1f7      	bne.n	1795a <proxy_ccc_write+0x46>
   1796a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   1796e:	07d3      	lsls	r3, r2, #31
   17970:	d4eb      	bmi.n	1794a <proxy_ccc_write+0x36>
		k_queue_append(&work_q->queue, work);
   17972:	f104 010c 	add.w	r1, r4, #12
   17976:	4805      	ldr	r0, [pc, #20]	; (1798c <proxy_ccc_write+0x78>)
   17978:	f015 fc76 	bl	2d268 <k_queue_append>
   1797c:	e7e5      	b.n	1794a <proxy_ccc_write+0x36>
   1797e:	bf00      	nop
   17980:	0003495a 	.word	0x0003495a
   17984:	0003498b 	.word	0x0003498b
   17988:	0002fa94 	.word	0x0002fa94
   1798c:	20002490 	.word	0x20002490

00017990 <bt_mesh_proxy_identity_start>:
{
   17990:	b510      	push	{r4, lr}
   17992:	4604      	mov	r4, r0
	node_id_start(sub);
   17994:	f013 fe3b 	bl	2b60e <node_id_start>
	beacon_sub = sub;
   17998:	4b01      	ldr	r3, [pc, #4]	; (179a0 <bt_mesh_proxy_identity_start+0x10>)
   1799a:	601c      	str	r4, [r3, #0]
}
   1799c:	bd10      	pop	{r4, pc}
   1799e:	bf00      	nop
   179a0:	20003184 	.word	0x20003184

000179a4 <bt_mesh_proxy_identity_enable>:
{
   179a4:	b508      	push	{r3, lr}
	if (!bt_mesh_is_provisioned()) {
   179a6:	f012 fc60 	bl	2a26a <bt_mesh_is_provisioned>
   179aa:	b138      	cbz	r0, 179bc <bt_mesh_proxy_identity_enable+0x18>
	if (bt_mesh_subnet_foreach(node_id_start)) {
   179ac:	4805      	ldr	r0, [pc, #20]	; (179c4 <bt_mesh_proxy_identity_enable+0x20>)
   179ae:	f7f7 fcf3 	bl	f398 <bt_mesh_subnet_foreach>
   179b2:	b110      	cbz	r0, 179ba <bt_mesh_proxy_identity_enable+0x16>
		bt_mesh_adv_update();
   179b4:	f7fc fdc0 	bl	14538 <bt_mesh_adv_update>
	return 0;
   179b8:	2000      	movs	r0, #0
}
   179ba:	bd08      	pop	{r3, pc}
		return -EAGAIN;
   179bc:	f06f 000a 	mvn.w	r0, #10
   179c0:	e7fb      	b.n	179ba <bt_mesh_proxy_identity_enable+0x16>
   179c2:	bf00      	nop
   179c4:	0002b60f 	.word	0x0002b60f

000179c8 <bt_mesh_proxy_get_buf>:
	buf->len  = 0U;
   179c8:	4803      	ldr	r0, [pc, #12]	; (179d8 <bt_mesh_proxy_get_buf+0x10>)
   179ca:	2300      	movs	r3, #0
   179cc:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
	buf->data = buf->__buf;
   179d0:	6d03      	ldr	r3, [r0, #80]	; 0x50
   179d2:	f840 3f48 	str.w	r3, [r0, #72]!
}
   179d6:	4770      	bx	lr
   179d8:	20000378 	.word	0x20000378

000179dc <bt_mesh_proxy_prov_enable>:
{
   179dc:	b510      	push	{r4, lr}
	if (gatt_svc == MESH_GATT_PROV) {
   179de:	4c12      	ldr	r4, [pc, #72]	; (17a28 <bt_mesh_proxy_prov_enable+0x4c>)
   179e0:	7823      	ldrb	r3, [r4, #0]
   179e2:	2b01      	cmp	r3, #1
   179e4:	d019      	beq.n	17a1a <bt_mesh_proxy_prov_enable+0x3e>
	if (gatt_svc != MESH_GATT_NONE) {
   179e6:	b9db      	cbnz	r3, 17a20 <bt_mesh_proxy_prov_enable+0x44>
	bt_gatt_service_register(&prov_svc);
   179e8:	4810      	ldr	r0, [pc, #64]	; (17a2c <bt_mesh_proxy_prov_enable+0x50>)
   179ea:	f7f5 f987 	bl	ccfc <bt_gatt_service_register>
	prov_fast_adv = true;
   179ee:	4a10      	ldr	r2, [pc, #64]	; (17a30 <bt_mesh_proxy_prov_enable+0x54>)
	gatt_svc = MESH_GATT_PROV;
   179f0:	2301      	movs	r3, #1
	prov_fast_adv = true;
   179f2:	7013      	strb	r3, [r2, #0]
	gatt_svc = MESH_GATT_PROV;
   179f4:	7023      	strb	r3, [r4, #0]
		if (clients[i].conn) {
   179f6:	4b0f      	ldr	r3, [pc, #60]	; (17a34 <bt_mesh_proxy_prov_enable+0x58>)
   179f8:	681a      	ldr	r2, [r3, #0]
   179fa:	b10a      	cbz	r2, 17a00 <bt_mesh_proxy_prov_enable+0x24>
			clients[i].filter_type = PROV;
   179fc:	2203      	movs	r2, #3
   179fe:	729a      	strb	r2, [r3, #10]
		if (clients[i].conn) {
   17a00:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   17a02:	b112      	cbz	r2, 17a0a <bt_mesh_proxy_prov_enable+0x2e>
			clients[i].filter_type = PROV;
   17a04:	2203      	movs	r2, #3
   17a06:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
		if (clients[i].conn) {
   17a0a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
   17a0e:	b112      	cbz	r2, 17a16 <bt_mesh_proxy_prov_enable+0x3a>
			clients[i].filter_type = PROV;
   17a10:	2203      	movs	r2, #3
   17a12:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	return 0;
   17a16:	2000      	movs	r0, #0
}
   17a18:	bd10      	pop	{r4, pc}
		return -EALREADY;
   17a1a:	f06f 0077 	mvn.w	r0, #119	; 0x77
   17a1e:	e7fb      	b.n	17a18 <bt_mesh_proxy_prov_enable+0x3c>
		return -EBUSY;
   17a20:	f06f 000f 	mvn.w	r0, #15
   17a24:	e7f8      	b.n	17a18 <bt_mesh_proxy_prov_enable+0x3c>
   17a26:	bf00      	nop
   17a28:	20004840 	.word	0x20004840
   17a2c:	200009ec 	.word	0x200009ec
   17a30:	20004841 	.word	0x20004841
   17a34:	20000378 	.word	0x20000378

00017a38 <bt_mesh_proxy_prov_disable>:
{
   17a38:	b570      	push	{r4, r5, r6, lr}
	if (gatt_svc == MESH_GATT_NONE) {
   17a3a:	4d14      	ldr	r5, [pc, #80]	; (17a8c <bt_mesh_proxy_prov_disable+0x54>)
   17a3c:	782b      	ldrb	r3, [r5, #0]
{
   17a3e:	4606      	mov	r6, r0
	if (gatt_svc == MESH_GATT_NONE) {
   17a40:	b1eb      	cbz	r3, 17a7e <bt_mesh_proxy_prov_disable+0x46>
	if (gatt_svc != MESH_GATT_PROV) {
   17a42:	2b01      	cmp	r3, #1
   17a44:	d11e      	bne.n	17a84 <bt_mesh_proxy_prov_disable+0x4c>
	bt_gatt_service_unregister(&prov_svc);
   17a46:	4812      	ldr	r0, [pc, #72]	; (17a90 <bt_mesh_proxy_prov_disable+0x58>)
	gatt_svc = MESH_GATT_NONE;
   17a48:	2400      	movs	r4, #0
	bt_gatt_service_unregister(&prov_svc);
   17a4a:	f7f5 fd1d 	bl	d488 <bt_gatt_service_unregister>
	gatt_svc = MESH_GATT_NONE;
   17a4e:	702c      	strb	r4, [r5, #0]
	for (i = 0; i < ARRAY_SIZE(clients); i++) {
   17a50:	4d10      	ldr	r5, [pc, #64]	; (17a94 <bt_mesh_proxy_prov_disable+0x5c>)
		if (!client->conn || client->filter_type != PROV) {
   17a52:	6828      	ldr	r0, [r5, #0]
   17a54:	b130      	cbz	r0, 17a64 <bt_mesh_proxy_prov_disable+0x2c>
   17a56:	7aab      	ldrb	r3, [r5, #10]
   17a58:	2b03      	cmp	r3, #3
   17a5a:	d103      	bne.n	17a64 <bt_mesh_proxy_prov_disable+0x2c>
		if (disconnect) {
   17a5c:	b15e      	cbz	r6, 17a76 <bt_mesh_proxy_prov_disable+0x3e>
			bt_conn_disconnect(client->conn,
   17a5e:	2113      	movs	r1, #19
   17a60:	f7f2 feec 	bl	a83c <bt_conn_disconnect>
	for (i = 0; i < ARRAY_SIZE(clients); i++) {
   17a64:	3401      	adds	r4, #1
   17a66:	2c03      	cmp	r4, #3
   17a68:	f105 0558 	add.w	r5, r5, #88	; 0x58
   17a6c:	d1f1      	bne.n	17a52 <bt_mesh_proxy_prov_disable+0x1a>
	bt_mesh_adv_update();
   17a6e:	f7fc fd63 	bl	14538 <bt_mesh_adv_update>
	return 0;
   17a72:	2000      	movs	r0, #0
}
   17a74:	bd70      	pop	{r4, r5, r6, pc}
			bt_mesh_pb_gatt_close(client->conn);
   17a76:	f7ff fc41 	bl	172fc <bt_mesh_pb_gatt_close>
			client->filter_type = NONE;
   17a7a:	72ae      	strb	r6, [r5, #10]
   17a7c:	e7f2      	b.n	17a64 <bt_mesh_proxy_prov_disable+0x2c>
		return -EALREADY;
   17a7e:	f06f 0077 	mvn.w	r0, #119	; 0x77
   17a82:	e7f7      	b.n	17a74 <bt_mesh_proxy_prov_disable+0x3c>
		return -EBUSY;
   17a84:	f06f 000f 	mvn.w	r0, #15
   17a88:	e7f4      	b.n	17a74 <bt_mesh_proxy_prov_disable+0x3c>
   17a8a:	bf00      	nop
   17a8c:	20004840 	.word	0x20004840
   17a90:	200009ec 	.word	0x200009ec
   17a94:	20000378 	.word	0x20000378

00017a98 <bt_mesh_proxy_gatt_enable>:
{
   17a98:	b510      	push	{r4, lr}
	if (gatt_svc == MESH_GATT_PROXY) {
   17a9a:	4c11      	ldr	r4, [pc, #68]	; (17ae0 <bt_mesh_proxy_gatt_enable+0x48>)
   17a9c:	7823      	ldrb	r3, [r4, #0]
   17a9e:	2b02      	cmp	r3, #2
   17aa0:	d017      	beq.n	17ad2 <bt_mesh_proxy_gatt_enable+0x3a>
	if (gatt_svc != MESH_GATT_NONE) {
   17aa2:	b9cb      	cbnz	r3, 17ad8 <bt_mesh_proxy_gatt_enable+0x40>
	bt_gatt_service_register(&proxy_svc);
   17aa4:	480f      	ldr	r0, [pc, #60]	; (17ae4 <bt_mesh_proxy_gatt_enable+0x4c>)
   17aa6:	f7f5 f929 	bl	ccfc <bt_gatt_service_register>
	gatt_svc = MESH_GATT_PROXY;
   17aaa:	2302      	movs	r3, #2
   17aac:	7023      	strb	r3, [r4, #0]
		if (clients[i].conn) {
   17aae:	4b0e      	ldr	r3, [pc, #56]	; (17ae8 <bt_mesh_proxy_gatt_enable+0x50>)
   17ab0:	681a      	ldr	r2, [r3, #0]
   17ab2:	b10a      	cbz	r2, 17ab8 <bt_mesh_proxy_gatt_enable+0x20>
			clients[i].filter_type = WHITELIST;
   17ab4:	2201      	movs	r2, #1
   17ab6:	729a      	strb	r2, [r3, #10]
		if (clients[i].conn) {
   17ab8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   17aba:	b112      	cbz	r2, 17ac2 <bt_mesh_proxy_gatt_enable+0x2a>
			clients[i].filter_type = WHITELIST;
   17abc:	2201      	movs	r2, #1
   17abe:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
		if (clients[i].conn) {
   17ac2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
   17ac6:	b112      	cbz	r2, 17ace <bt_mesh_proxy_gatt_enable+0x36>
			clients[i].filter_type = WHITELIST;
   17ac8:	2201      	movs	r2, #1
   17aca:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	return 0;
   17ace:	2000      	movs	r0, #0
}
   17ad0:	bd10      	pop	{r4, pc}
		return -EALREADY;
   17ad2:	f06f 0077 	mvn.w	r0, #119	; 0x77
   17ad6:	e7fb      	b.n	17ad0 <bt_mesh_proxy_gatt_enable+0x38>
		return -EBUSY;
   17ad8:	f06f 000f 	mvn.w	r0, #15
   17adc:	e7f8      	b.n	17ad0 <bt_mesh_proxy_gatt_enable+0x38>
   17ade:	bf00      	nop
   17ae0:	20004840 	.word	0x20004840
   17ae4:	20000a9c 	.word	0x20000a9c
   17ae8:	20000378 	.word	0x20000378

00017aec <bt_mesh_proxy_gatt_disconnect>:
{
   17aec:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < ARRAY_SIZE(clients); i++) {
   17aee:	2500      	movs	r5, #0
   17af0:	4c08      	ldr	r4, [pc, #32]	; (17b14 <bt_mesh_proxy_gatt_disconnect+0x28>)
			client->filter_type = NONE;
   17af2:	462e      	mov	r6, r5
		if (client->conn && (client->filter_type == WHITELIST ||
   17af4:	6820      	ldr	r0, [r4, #0]
   17af6:	b138      	cbz	r0, 17b08 <bt_mesh_proxy_gatt_disconnect+0x1c>
   17af8:	7aa3      	ldrb	r3, [r4, #10]
   17afa:	3b01      	subs	r3, #1
   17afc:	2b01      	cmp	r3, #1
   17afe:	d803      	bhi.n	17b08 <bt_mesh_proxy_gatt_disconnect+0x1c>
			bt_conn_disconnect(client->conn,
   17b00:	2113      	movs	r1, #19
			client->filter_type = NONE;
   17b02:	72a6      	strb	r6, [r4, #10]
			bt_conn_disconnect(client->conn,
   17b04:	f7f2 fe9a 	bl	a83c <bt_conn_disconnect>
	for (i = 0; i < ARRAY_SIZE(clients); i++) {
   17b08:	3501      	adds	r5, #1
   17b0a:	2d03      	cmp	r5, #3
   17b0c:	f104 0458 	add.w	r4, r4, #88	; 0x58
   17b10:	d1f0      	bne.n	17af4 <bt_mesh_proxy_gatt_disconnect+0x8>
}
   17b12:	bd70      	pop	{r4, r5, r6, pc}
   17b14:	20000378 	.word	0x20000378

00017b18 <bt_mesh_proxy_gatt_disable>:
{
   17b18:	b510      	push	{r4, lr}
	if (gatt_svc == MESH_GATT_NONE) {
   17b1a:	4c09      	ldr	r4, [pc, #36]	; (17b40 <bt_mesh_proxy_gatt_disable+0x28>)
   17b1c:	7823      	ldrb	r3, [r4, #0]
   17b1e:	b14b      	cbz	r3, 17b34 <bt_mesh_proxy_gatt_disable+0x1c>
	if (gatt_svc != MESH_GATT_PROXY) {
   17b20:	2b02      	cmp	r3, #2
   17b22:	d10a      	bne.n	17b3a <bt_mesh_proxy_gatt_disable+0x22>
	bt_mesh_proxy_gatt_disconnect();
   17b24:	f7ff ffe2 	bl	17aec <bt_mesh_proxy_gatt_disconnect>
	bt_gatt_service_unregister(&proxy_svc);
   17b28:	4806      	ldr	r0, [pc, #24]	; (17b44 <bt_mesh_proxy_gatt_disable+0x2c>)
   17b2a:	f7f5 fcad 	bl	d488 <bt_gatt_service_unregister>
	gatt_svc = MESH_GATT_NONE;
   17b2e:	2000      	movs	r0, #0
   17b30:	7020      	strb	r0, [r4, #0]
}
   17b32:	bd10      	pop	{r4, pc}
		return -EALREADY;
   17b34:	f06f 0077 	mvn.w	r0, #119	; 0x77
   17b38:	e7fb      	b.n	17b32 <bt_mesh_proxy_gatt_disable+0x1a>
		return -EBUSY;
   17b3a:	f06f 000f 	mvn.w	r0, #15
   17b3e:	e7f8      	b.n	17b32 <bt_mesh_proxy_gatt_disable+0x1a>
   17b40:	20004840 	.word	0x20004840
   17b44:	20000a9c 	.word	0x20000a9c

00017b48 <bt_mesh_proxy_send>:
{
   17b48:	b538      	push	{r3, r4, r5, lr}
   17b4a:	4604      	mov	r4, r0
   17b4c:	4615      	mov	r5, r2
	struct bt_mesh_proxy_client *client = find_client(conn);
   17b4e:	f7ff fbf5 	bl	1733c <find_client>
	if (!client) {
   17b52:	b930      	cbnz	r0, 17b62 <bt_mesh_proxy_send+0x1a>
		BT_ERR("No Proxy Client found");
   17b54:	480f      	ldr	r0, [pc, #60]	; (17b94 <bt_mesh_proxy_send+0x4c>)
   17b56:	2145      	movs	r1, #69	; 0x45
   17b58:	f00f fa09 	bl	26f6e <printk>
   17b5c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   17b60:	bd38      	pop	{r3, r4, r5, pc}
	if ((client->filter_type == PROV) != (type == BT_MESH_PROXY_PROV)) {
   17b62:	7a83      	ldrb	r3, [r0, #10]
   17b64:	1ed8      	subs	r0, r3, #3
   17b66:	4243      	negs	r3, r0
   17b68:	f1a1 0c03 	sub.w	ip, r1, #3
   17b6c:	4143      	adcs	r3, r0
   17b6e:	f1dc 0200 	rsbs	r2, ip, #0
   17b72:	eb42 020c 	adc.w	r2, r2, ip
   17b76:	4293      	cmp	r3, r2
   17b78:	d006      	beq.n	17b88 <bt_mesh_proxy_send+0x40>
		BT_ERR("Invalid PDU type for Proxy Client");
   17b7a:	4807      	ldr	r0, [pc, #28]	; (17b98 <bt_mesh_proxy_send+0x50>)
   17b7c:	2145      	movs	r1, #69	; 0x45
   17b7e:	f00f f9f6 	bl	26f6e <printk>
		return -EINVAL;
   17b82:	f06f 0015 	mvn.w	r0, #21
   17b86:	e7eb      	b.n	17b60 <bt_mesh_proxy_send+0x18>
	return proxy_segment_and_send(conn, type, msg);
   17b88:	462a      	mov	r2, r5
   17b8a:	4620      	mov	r0, r4
}
   17b8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return proxy_segment_and_send(conn, type, msg);
   17b90:	f013 bcd5 	b.w	2b53e <proxy_segment_and_send>
   17b94:	00034918 	.word	0x00034918
   17b98:	00034933 	.word	0x00034933

00017b9c <bt_mesh_proxy_relay>:
{
   17b9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17ba0:	4c1f      	ldr	r4, [pc, #124]	; (17c20 <bt_mesh_proxy_relay+0x84>)
   17ba2:	b08d      	sub	sp, #52	; 0x34
   17ba4:	4606      	mov	r6, r0
   17ba6:	460d      	mov	r5, r1
   17ba8:	f504 7884 	add.w	r8, r4, #264	; 0x108
	bool relayed = false;
   17bac:	2000      	movs	r0, #0
		NET_BUF_SIMPLE_DEFINE(msg, 32);
   17bae:	af04      	add	r7, sp, #16
   17bb0:	f44f 1900 	mov.w	r9, #2097152	; 0x200000
		if (!client->conn) {
   17bb4:	6823      	ldr	r3, [r4, #0]
		NET_BUF_SIMPLE_DEFINE(msg, 32);
   17bb6:	9703      	str	r7, [sp, #12]
   17bb8:	e9cd 7901 	strd	r7, r9, [sp, #4]
		if (!client->conn) {
   17bbc:	b15b      	cbz	r3, 17bd6 <bt_mesh_proxy_relay+0x3a>
	if (client->filter_type == BLACKLIST) {
   17bbe:	7aa3      	ldrb	r3, [r4, #10]
   17bc0:	2b02      	cmp	r3, #2
   17bc2:	d10e      	bne.n	17be2 <bt_mesh_proxy_relay+0x46>
			if (client->filter[i] == addr) {
   17bc4:	88a3      	ldrh	r3, [r4, #4]
   17bc6:	42ab      	cmp	r3, r5
   17bc8:	d005      	beq.n	17bd6 <bt_mesh_proxy_relay+0x3a>
   17bca:	88e3      	ldrh	r3, [r4, #6]
   17bcc:	42ab      	cmp	r3, r5
   17bce:	d002      	beq.n	17bd6 <bt_mesh_proxy_relay+0x3a>
   17bd0:	8923      	ldrh	r3, [r4, #8]
   17bd2:	42ab      	cmp	r3, r5
   17bd4:	d114      	bne.n	17c00 <bt_mesh_proxy_relay+0x64>
   17bd6:	3458      	adds	r4, #88	; 0x58
	for (i = 0; i < ARRAY_SIZE(clients); i++) {
   17bd8:	45a0      	cmp	r8, r4
   17bda:	d1eb      	bne.n	17bb4 <bt_mesh_proxy_relay+0x18>
}
   17bdc:	b00d      	add	sp, #52	; 0x34
   17bde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (addr == BT_MESH_ADDR_ALL_NODES) {
   17be2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17be6:	4295      	cmp	r5, r2
   17be8:	d00a      	beq.n	17c00 <bt_mesh_proxy_relay+0x64>
	if (client->filter_type == WHITELIST) {
   17bea:	2b01      	cmp	r3, #1
   17bec:	d1f3      	bne.n	17bd6 <bt_mesh_proxy_relay+0x3a>
			if (client->filter[i] == addr) {
   17bee:	88a3      	ldrh	r3, [r4, #4]
   17bf0:	42ab      	cmp	r3, r5
   17bf2:	d005      	beq.n	17c00 <bt_mesh_proxy_relay+0x64>
   17bf4:	88e3      	ldrh	r3, [r4, #6]
   17bf6:	42ab      	cmp	r3, r5
   17bf8:	d002      	beq.n	17c00 <bt_mesh_proxy_relay+0x64>
   17bfa:	8923      	ldrh	r3, [r4, #8]
   17bfc:	42ab      	cmp	r3, r5
   17bfe:	d1ea      	bne.n	17bd6 <bt_mesh_proxy_relay+0x3a>
		net_buf_simple_reserve(&msg, 1);
   17c00:	2101      	movs	r1, #1
   17c02:	a801      	add	r0, sp, #4
   17c04:	f007 f8bc 	bl	1ed80 <net_buf_simple_reserve>
		net_buf_simple_add_mem(&msg, buf->data, buf->len);
   17c08:	88b2      	ldrh	r2, [r6, #4]
   17c0a:	6831      	ldr	r1, [r6, #0]
   17c0c:	a801      	add	r0, sp, #4
   17c0e:	f014 fee8 	bl	2c9e2 <net_buf_simple_add_mem>
		bt_mesh_proxy_send(client->conn, BT_MESH_PROXY_NET_PDU, &msg);
   17c12:	aa01      	add	r2, sp, #4
   17c14:	2100      	movs	r1, #0
   17c16:	6820      	ldr	r0, [r4, #0]
   17c18:	f7ff ff96 	bl	17b48 <bt_mesh_proxy_send>
		relayed = true;
   17c1c:	2001      	movs	r0, #1
   17c1e:	e7da      	b.n	17bd6 <bt_mesh_proxy_relay+0x3a>
   17c20:	20000378 	.word	0x20000378

00017c24 <bt_mesh_proxy_adv_start>:
{
   17c24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (gatt_svc == MESH_GATT_NONE) {
   17c28:	4ba3      	ldr	r3, [pc, #652]	; (17eb8 <bt_mesh_proxy_adv_start+0x294>)
   17c2a:	781b      	ldrb	r3, [r3, #0]
{
   17c2c:	b087      	sub	sp, #28
	if (gatt_svc == MESH_GATT_NONE) {
   17c2e:	2b00      	cmp	r3, #0
   17c30:	f000 8090 	beq.w	17d54 <bt_mesh_proxy_adv_start+0x130>
	if (!bt_mesh_is_provisioned()) {
   17c34:	f012 fb19 	bl	2a26a <bt_mesh_is_provisioned>
   17c38:	2800      	cmp	r0, #0
   17c3a:	d163      	bne.n	17d04 <bt_mesh_proxy_adv_start+0xe0>
	const struct bt_mesh_prov *prov = bt_mesh_prov_get();
   17c3c:	f7fe f8dc 	bl	15df8 <bt_mesh_prov_get>
   17c40:	4605      	mov	r5, r0
	const char *name = bt_get_name();
   17c42:	f7f1 fd21 	bl	9688 <bt_get_name>
   17c46:	4606      	mov	r6, r0
	size_t name_len = strlen(name);
   17c48:	f7ea f92e 	bl	1ea8 <strlen>
	memcpy(prov_svc_data + 2, prov->uuid, 16);
   17c4c:	682b      	ldr	r3, [r5, #0]
   17c4e:	4a9b      	ldr	r2, [pc, #620]	; (17ebc <bt_mesh_proxy_adv_start+0x298>)
	size_t name_len = strlen(name);
   17c50:	4607      	mov	r7, r0
	memcpy(prov_svc_data + 2, prov->uuid, 16);
   17c52:	f103 0110 	add.w	r1, r3, #16
   17c56:	f853 0b04 	ldr.w	r0, [r3], #4
   17c5a:	f842 0b04 	str.w	r0, [r2], #4
   17c5e:	428b      	cmp	r3, r1
   17c60:	d1f9      	bne.n	17c56 <bt_mesh_proxy_adv_start+0x32>
	sys_put_be16(prov->oob_info, prov_svc_data + 18);
   17c62:	892a      	ldrh	r2, [r5, #8]
	dst[0] = val >> 8;
   17c64:	4b96      	ldr	r3, [pc, #600]	; (17ec0 <bt_mesh_proxy_adv_start+0x29c>)
   17c66:	0a11      	lsrs	r1, r2, #8
   17c68:	7499      	strb	r1, [r3, #18]
	dst[1] = val;
   17c6a:	74da      	strb	r2, [r3, #19]
	if (prov->uri) {
   17c6c:	6868      	ldr	r0, [r5, #4]
   17c6e:	ac02      	add	r4, sp, #8
   17c70:	2800      	cmp	r0, #0
   17c72:	d039      	beq.n	17ce8 <bt_mesh_proxy_adv_start+0xc4>
		size_t uri_len = strlen(prov->uri);
   17c74:	f7ea f918 	bl	1ea8 <strlen>
		if (uri_len > 29) {
   17c78:	281d      	cmp	r0, #29
   17c7a:	d917      	bls.n	17cac <bt_mesh_proxy_adv_start+0x88>
			BT_WARN("Too long URI to fit advertising packet");
   17c7c:	4891      	ldr	r0, [pc, #580]	; (17ec4 <bt_mesh_proxy_adv_start+0x2a0>)
   17c7e:	2157      	movs	r1, #87	; 0x57
   17c80:	f00f f975 	bl	26f6e <printk>
	size_t sd_space = 31;
   17c84:	231f      	movs	r3, #31
	size_t prov_sd_len = 0;
   17c86:	2000      	movs	r0, #0
	if (sd_space > 2 && name_len > 0) {
   17c88:	b1ef      	cbz	r7, 17cc6 <bt_mesh_proxy_adv_start+0xa2>
		sd_space -= 2;
   17c8a:	3b02      	subs	r3, #2
		if (sd_space < name_len) {
   17c8c:	429f      	cmp	r7, r3
			prov_sd[prov_sd_len].type = BT_DATA_NAME_SHORTENED;
   17c8e:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
   17c92:	bf8b      	itete	hi
   17c94:	2108      	movhi	r1, #8
			prov_sd[prov_sd_len].type = BT_DATA_NAME_COMPLETE;
   17c96:	2309      	movls	r3, #9
			prov_sd[prov_sd_len].type = BT_DATA_NAME_SHORTENED;
   17c98:	f804 1030 	strbhi.w	r1, [r4, r0, lsl #3]
			prov_sd[prov_sd_len].type = BT_DATA_NAME_COMPLETE;
   17c9c:	f804 3030 	strbls.w	r3, [r4, r0, lsl #3]
			prov_sd[prov_sd_len].data_len = sd_space;
   17ca0:	bf8c      	ite	hi
   17ca2:	7053      	strbhi	r3, [r2, #1]
			prov_sd[prov_sd_len].data_len = name_len;
   17ca4:	7057      	strbls	r7, [r2, #1]
		prov_sd[prov_sd_len].data = name;
   17ca6:	6056      	str	r6, [r2, #4]
		prov_sd_len++;
   17ca8:	3001      	adds	r0, #1
   17caa:	e00c      	b.n	17cc6 <bt_mesh_proxy_adv_start+0xa2>
			prov_sd[0].type = BT_DATA_URI;
   17cac:	2324      	movs	r3, #36	; 0x24
			prov_sd[0].data_len = uri_len;
   17cae:	f88d 0009 	strb.w	r0, [sp, #9]
			prov_sd[0].type = BT_DATA_URI;
   17cb2:	f88d 3008 	strb.w	r3, [sp, #8]
			prov_sd[0].data = prov->uri;
   17cb6:	686b      	ldr	r3, [r5, #4]
   17cb8:	9303      	str	r3, [sp, #12]
			sd_space -= 2 + uri_len;
   17cba:	f1c0 031d 	rsb	r3, r0, #29
	if (sd_space > 2 && name_len > 0) {
   17cbe:	2b02      	cmp	r3, #2
			prov_sd_len++;
   17cc0:	f04f 0001 	mov.w	r0, #1
	if (sd_space > 2 && name_len > 0) {
   17cc4:	d8e0      	bhi.n	17c88 <bt_mesh_proxy_adv_start+0x64>
		if (!prov_fast_adv) {
   17cc6:	4d80      	ldr	r5, [pc, #512]	; (17ec8 <bt_mesh_proxy_adv_start+0x2a4>)
   17cc8:	782b      	ldrb	r3, [r5, #0]
			return bt_mesh_adv_start(&slow_adv_param,
   17cca:	e9cd 4000 	strd	r4, r0, [sp]
		if (!prov_fast_adv) {
   17cce:	b96b      	cbnz	r3, 17cec <bt_mesh_proxy_adv_start+0xc8>
			return bt_mesh_adv_start(&slow_adv_param,
   17cd0:	2303      	movs	r3, #3
   17cd2:	4a7e      	ldr	r2, [pc, #504]	; (17ecc <bt_mesh_proxy_adv_start+0x2a8>)
   17cd4:	487e      	ldr	r0, [pc, #504]	; (17ed0 <bt_mesh_proxy_adv_start+0x2ac>)
   17cd6:	f04f 31ff 	mov.w	r1, #4294967295
   17cda:	f7fc fc63 	bl	145a4 <bt_mesh_adv_start>
   17cde:	4604      	mov	r4, r0
}
   17ce0:	4620      	mov	r0, r4
   17ce2:	b007      	add	sp, #28
   17ce4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	size_t sd_space = 31;
   17ce8:	231f      	movs	r3, #31
   17cea:	e7cd      	b.n	17c88 <bt_mesh_proxy_adv_start+0x64>
		err = bt_mesh_adv_start(&fast_adv_param, (60 * MSEC_PER_SEC),
   17cec:	2303      	movs	r3, #3
   17cee:	4a77      	ldr	r2, [pc, #476]	; (17ecc <bt_mesh_proxy_adv_start+0x2a8>)
   17cf0:	4878      	ldr	r0, [pc, #480]	; (17ed4 <bt_mesh_proxy_adv_start+0x2b0>)
   17cf2:	f64e 2160 	movw	r1, #60000	; 0xea60
   17cf6:	f7fc fc55 	bl	145a4 <bt_mesh_adv_start>
		if (!err) {
   17cfa:	4604      	mov	r4, r0
   17cfc:	2800      	cmp	r0, #0
   17cfe:	d1ef      	bne.n	17ce0 <bt_mesh_proxy_adv_start+0xbc>
			prov_fast_adv = false;
   17d00:	7028      	strb	r0, [r5, #0]
   17d02:	e7ed      	b.n	17ce0 <bt_mesh_proxy_adv_start+0xbc>
	if (bt_mesh_is_provisioned()) {
   17d04:	f012 fab1 	bl	2a26a <bt_mesh_is_provisioned>
   17d08:	2800      	cmp	r0, #0
   17d0a:	f000 80ce 	beq.w	17eaa <bt_mesh_proxy_adv_start+0x286>
	if (!beacon_sub) {
   17d0e:	4e72      	ldr	r6, [pc, #456]	; (17ed8 <bt_mesh_proxy_adv_start+0x2b4>)
   17d10:	6830      	ldr	r0, [r6, #0]
   17d12:	b150      	cbz	r0, 17d2a <bt_mesh_proxy_adv_start+0x106>
	sub = beacon_sub;
   17d14:	6834      	ldr	r4, [r6, #0]
	if (sub->net_idx == BT_MESH_KEY_UNUSED) {
   17d16:	f64f 75ff 	movw	r5, #65535	; 0xffff
   17d1a:	8ba3      	ldrh	r3, [r4, #28]
   17d1c:	42ab      	cmp	r3, r5
   17d1e:	d020      	beq.n	17d62 <bt_mesh_proxy_adv_start+0x13e>
	return (sub->node_id == BT_MESH_NODE_IDENTITY_RUNNING ||
   17d20:	7fe3      	ldrb	r3, [r4, #31]
   17d22:	2b01      	cmp	r3, #1
   17d24:	d119      	bne.n	17d5a <bt_mesh_proxy_adv_start+0x136>
			beacon_sub = sub;
   17d26:	6034      	str	r4, [r6, #0]
			return sub;
   17d28:	e004      	b.n	17d34 <bt_mesh_proxy_adv_start+0x110>
		beacon_sub = bt_mesh_subnet_next(NULL);
   17d2a:	f7f7 fb45 	bl	f3b8 <bt_mesh_subnet_next>
   17d2e:	6030      	str	r0, [r6, #0]
		if (!beacon_sub) {
   17d30:	2800      	cmp	r0, #0
   17d32:	d1ef      	bne.n	17d14 <bt_mesh_proxy_adv_start+0xf0>
	if (conn_count == CONFIG_BT_MAX_CONN) {
   17d34:	4b69      	ldr	r3, [pc, #420]	; (17edc <bt_mesh_proxy_adv_start+0x2b8>)
   17d36:	681b      	ldr	r3, [r3, #0]
   17d38:	2b03      	cmp	r3, #3
   17d3a:	f000 80b9 	beq.w	17eb0 <bt_mesh_proxy_adv_start+0x28c>
	sub = beacon_sub ? beacon_sub : bt_mesh_subnet_next(beacon_sub);
   17d3e:	6835      	ldr	r5, [r6, #0]
   17d40:	b9bd      	cbnz	r5, 17d72 <bt_mesh_proxy_adv_start+0x14e>
   17d42:	4628      	mov	r0, r5
   17d44:	f7f7 fb38 	bl	f3b8 <bt_mesh_subnet_next>
	if (!sub) {
   17d48:	4605      	mov	r5, r0
   17d4a:	b990      	cbnz	r0, 17d72 <bt_mesh_proxy_adv_start+0x14e>
		BT_WARN("No subnets to advertise on");
   17d4c:	2157      	movs	r1, #87	; 0x57
   17d4e:	4864      	ldr	r0, [pc, #400]	; (17ee0 <bt_mesh_proxy_adv_start+0x2bc>)
   17d50:	f00f f90d 	bl	26f6e <printk>
		return -ENOENT;
   17d54:	f06f 0401 	mvn.w	r4, #1
   17d58:	e7c2      	b.n	17ce0 <bt_mesh_proxy_adv_start+0xbc>
		bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED);
   17d5a:	f012 facb 	bl	2a2f4 <bt_mesh_gatt_proxy_get>
		if (advertise_subnet(sub)) {
   17d5e:	2801      	cmp	r0, #1
   17d60:	d0e1      	beq.n	17d26 <bt_mesh_proxy_adv_start+0x102>
		sub = bt_mesh_subnet_next(sub);
   17d62:	4620      	mov	r0, r4
   17d64:	f7f7 fb28 	bl	f3b8 <bt_mesh_subnet_next>
	} while (sub != beacon_sub);
   17d68:	6833      	ldr	r3, [r6, #0]
   17d6a:	4298      	cmp	r0, r3
		sub = bt_mesh_subnet_next(sub);
   17d6c:	4604      	mov	r4, r0
	} while (sub != beacon_sub);
   17d6e:	d1d4      	bne.n	17d1a <bt_mesh_proxy_adv_start+0xf6>
   17d70:	e7e0      	b.n	17d34 <bt_mesh_proxy_adv_start+0x110>
	int count = 0;
   17d72:	2300      	movs	r3, #0
	(void)bt_mesh_subnet_find(sub_count_cb, &count);
   17d74:	a902      	add	r1, sp, #8
   17d76:	485b      	ldr	r0, [pc, #364]	; (17ee4 <bt_mesh_proxy_adv_start+0x2c0>)
	int count = 0;
   17d78:	9302      	str	r3, [sp, #8]
	(void)bt_mesh_subnet_find(sub_count_cb, &count);
   17d7a:	f7f7 fafb 	bl	f374 <bt_mesh_subnet_find>
	return count;
   17d7e:	9f02      	ldr	r7, [sp, #8]
	if (subnet_count > 1) {
   17d80:	2f01      	cmp	r7, #1
   17d82:	f340 8088 	ble.w	17e96 <bt_mesh_proxy_adv_start+0x272>
		max_timeout = NODE_ID_TIMEOUT / MAX(subnet_count, 6);
   17d86:	2f06      	cmp	r7, #6
   17d88:	bfb8      	it	lt
   17d8a:	2706      	movlt	r7, #6
   17d8c:	f64e 2360 	movw	r3, #60000	; 0xea60
   17d90:	fbb3 f7f7 	udiv	r7, r3, r7
		max_timeout = MAX(max_timeout, 1 * MSEC_PER_SEC);
   17d94:	f5b7 7f7a 	cmp.w	r7, #1000	; 0x3e8
   17d98:	bf38      	it	cc
   17d9a:	f44f 777a 	movcc.w	r7, #1000	; 0x3e8
	if (sub->node_id == BT_MESH_NODE_IDENTITY_RUNNING) {
   17d9e:	7fec      	ldrb	r4, [r5, #31]
   17da0:	2c01      	cmp	r4, #1
   17da2:	d17f      	bne.n	17ea4 <bt_mesh_proxy_adv_start+0x280>
   17da4:	f015 fb4e 	bl	2d444 <z_impl_k_uptime_ticks>
   17da8:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
   17dac:	fba0 890e 	umull	r8, r9, r0, lr
   17db0:	fb0e 9901 	mla	r9, lr, r1, r9
   17db4:	ea4f 32d8 	mov.w	r2, r8, lsr #15
		uint32_t active = k_uptime_get_32() - sub->node_id_start;
   17db8:	6a2b      	ldr	r3, [r5, #32]
   17dba:	ea42 4249 	orr.w	r2, r2, r9, lsl #17
   17dbe:	1ad0      	subs	r0, r2, r3
		if (active < NODE_ID_TIMEOUT) {
   17dc0:	f64e 215f 	movw	r1, #59999	; 0xea5f
   17dc4:	4288      	cmp	r0, r1
   17dc6:	f04f 0c00 	mov.w	ip, #0
   17dca:	d867      	bhi.n	17e9c <bt_mesh_proxy_adv_start+0x278>
	proxy_svc_data[2] = ID_TYPE_NODE;
   17dcc:	f8df 8120 	ldr.w	r8, [pc, #288]	; 17ef0 <bt_mesh_proxy_adv_start+0x2cc>
			remaining = NODE_ID_TIMEOUT - active;
   17dd0:	f503 476a 	add.w	r7, r3, #59904	; 0xea00
	err = bt_rand(proxy_svc_data + 11, 8);
   17dd4:	f108 090b 	add.w	r9, r8, #11
			remaining = NODE_ID_TIMEOUT - active;
   17dd8:	3760      	adds	r7, #96	; 0x60
	err = bt_rand(proxy_svc_data + 11, 8);
   17dda:	2108      	movs	r1, #8
   17ddc:	4648      	mov	r0, r9
	proxy_svc_data[2] = ID_TYPE_NODE;
   17dde:	f888 4002 	strb.w	r4, [r8, #2]
			remaining = NODE_ID_TIMEOUT - active;
   17de2:	1abf      	subs	r7, r7, r2
	err = bt_rand(proxy_svc_data + 11, 8);
   17de4:	f013 ffa3 	bl	2bd2e <bt_rand>
	if (err) {
   17de8:	4604      	mov	r4, r0
   17dea:	bb80      	cbnz	r0, 17e4e <bt_mesh_proxy_adv_start+0x22a>
	memcpy(tmp + 6, proxy_svc_data + 11, 8);
   17dec:	f8d8 300b 	ldr.w	r3, [r8, #11]
   17df0:	f8cd 300e 	str.w	r3, [sp, #14]
   17df4:	f8d8 300f 	ldr.w	r3, [r8, #15]
   17df8:	f8cd 3012 	str.w	r3, [sp, #18]
	(void)memset(tmp, 0, 6);
   17dfc:	9002      	str	r0, [sp, #8]
   17dfe:	f8ad 000c 	strh.w	r0, [sp, #12]
	sys_put_be16(bt_mesh_primary_addr(), tmp + 14);
   17e02:	f7fa f8dd 	bl	11fc0 <bt_mesh_primary_addr>
	dst[0] = val >> 8;
   17e06:	ba40      	rev16	r0, r0
   17e08:	f8ad 0016 	strh.w	r0, [sp, #22]
	err = bt_encrypt_be(sub->keys[SUBNET_KEY_TX_IDX(sub)].identity, tmp,
   17e0c:	7fa8      	ldrb	r0, [r5, #30]
   17e0e:	aa02      	add	r2, sp, #8
   17e10:	2802      	cmp	r0, #2
   17e12:	bf0c      	ite	eq
   17e14:	20c0      	moveq	r0, #192	; 0xc0
   17e16:	2066      	movne	r0, #102	; 0x66
   17e18:	4611      	mov	r1, r2
   17e1a:	4428      	add	r0, r5
   17e1c:	f013 ff89 	bl	2bd32 <bt_encrypt_be>
	if (err) {
   17e20:	4604      	mov	r4, r0
   17e22:	b9a0      	cbnz	r0, 17e4e <bt_mesh_proxy_adv_start+0x22a>
	memcpy(proxy_svc_data + 3, tmp + 8, 8);
   17e24:	ab04      	add	r3, sp, #16
   17e26:	cb03      	ldmia	r3!, {r0, r1}
	err = bt_mesh_adv_start(&fast_adv_param, duration, node_id_ad,
   17e28:	4a2f      	ldr	r2, [pc, #188]	; (17ee8 <bt_mesh_proxy_adv_start+0x2c4>)
	memcpy(proxy_svc_data + 3, tmp + 8, 8);
   17e2a:	f8c8 0003 	str.w	r0, [r8, #3]
   17e2e:	f8c8 1007 	str.w	r1, [r8, #7]
	err = bt_mesh_adv_start(&fast_adv_param, duration, node_id_ad,
   17e32:	2303      	movs	r3, #3
   17e34:	e9cd 4400 	strd	r4, r4, [sp]
   17e38:	4639      	mov	r1, r7
   17e3a:	4826      	ldr	r0, [pc, #152]	; (17ed4 <bt_mesh_proxy_adv_start+0x2b0>)
   17e3c:	f7fc fbb2 	bl	145a4 <bt_mesh_adv_start>
	if (err) {
   17e40:	4604      	mov	r4, r0
   17e42:	b120      	cbz	r0, 17e4e <bt_mesh_proxy_adv_start+0x22a>
		BT_WARN("Failed to advertise using Node ID (err %d)", err);
   17e44:	4602      	mov	r2, r0
   17e46:	2157      	movs	r1, #87	; 0x57
   17e48:	4828      	ldr	r0, [pc, #160]	; (17eec <bt_mesh_proxy_adv_start+0x2c8>)
   17e4a:	f00f f890 	bl	26f6e <printk>
	if (sub->node_id == BT_MESH_NODE_IDENTITY_STOPPED) {
   17e4e:	7feb      	ldrb	r3, [r5, #31]
   17e50:	b9e3      	cbnz	r3, 17e8c <bt_mesh_proxy_adv_start+0x268>
	memcpy(proxy_svc_data + 3, sub->keys[SUBNET_KEY_TX_IDX(sub)].net_id, 8);
   17e52:	7fa9      	ldrb	r1, [r5, #30]
	proxy_svc_data[2] = ID_TYPE_NET;
   17e54:	4a26      	ldr	r2, [pc, #152]	; (17ef0 <bt_mesh_proxy_adv_start+0x2cc>)
	err = bt_mesh_adv_start(&slow_adv_param, duration, net_id_ad,
   17e56:	481e      	ldr	r0, [pc, #120]	; (17ed0 <bt_mesh_proxy_adv_start+0x2ac>)
	proxy_svc_data[2] = ID_TYPE_NET;
   17e58:	7093      	strb	r3, [r2, #2]
	memcpy(proxy_svc_data + 3, sub->keys[SUBNET_KEY_TX_IDX(sub)].net_id, 8);
   17e5a:	2902      	cmp	r1, #2
   17e5c:	bf0c      	ite	eq
   17e5e:	21b8      	moveq	r1, #184	; 0xb8
   17e60:	215e      	movne	r1, #94	; 0x5e
   17e62:	440d      	add	r5, r1
   17e64:	6829      	ldr	r1, [r5, #0]
   17e66:	f8c2 1003 	str.w	r1, [r2, #3]
   17e6a:	6869      	ldr	r1, [r5, #4]
   17e6c:	f8c2 1007 	str.w	r1, [r2, #7]
	err = bt_mesh_adv_start(&slow_adv_param, duration, net_id_ad,
   17e70:	e9cd 3300 	strd	r3, r3, [sp]
   17e74:	4a1f      	ldr	r2, [pc, #124]	; (17ef4 <bt_mesh_proxy_adv_start+0x2d0>)
   17e76:	2303      	movs	r3, #3
   17e78:	4639      	mov	r1, r7
   17e7a:	f7fc fb93 	bl	145a4 <bt_mesh_adv_start>
	if (err) {
   17e7e:	4604      	mov	r4, r0
   17e80:	b120      	cbz	r0, 17e8c <bt_mesh_proxy_adv_start+0x268>
		BT_WARN("Failed to advertise using Network ID (err %d)", err);
   17e82:	4602      	mov	r2, r0
   17e84:	2157      	movs	r1, #87	; 0x57
   17e86:	481c      	ldr	r0, [pc, #112]	; (17ef8 <bt_mesh_proxy_adv_start+0x2d4>)
   17e88:	f00f f871 	bl	26f6e <printk>
	beacon_sub = bt_mesh_subnet_next(beacon_sub);
   17e8c:	6830      	ldr	r0, [r6, #0]
   17e8e:	f7f7 fa93 	bl	f3b8 <bt_mesh_subnet_next>
   17e92:	6030      	str	r0, [r6, #0]
	return err;
   17e94:	e724      	b.n	17ce0 <bt_mesh_proxy_adv_start+0xbc>
	int32_t remaining = SYS_FOREVER_MS;
   17e96:	f04f 37ff 	mov.w	r7, #4294967295
   17e9a:	e780      	b.n	17d9e <bt_mesh_proxy_adv_start+0x17a>
	sub->node_id = BT_MESH_NODE_IDENTITY_STOPPED;
   17e9c:	f885 c01f 	strb.w	ip, [r5, #31]
	sub->node_id_start = 0U;
   17ea0:	f8c5 c020 	str.w	ip, [r5, #32]
	int err = -EBUSY;
   17ea4:	f06f 040f 	mvn.w	r4, #15
   17ea8:	e7d1      	b.n	17e4e <bt_mesh_proxy_adv_start+0x22a>
	return -ENOTSUP;
   17eaa:	f06f 0485 	mvn.w	r4, #133	; 0x85
   17eae:	e717      	b.n	17ce0 <bt_mesh_proxy_adv_start+0xbc>
		return -ENOMEM;
   17eb0:	f06f 040b 	mvn.w	r4, #11
   17eb4:	e714      	b.n	17ce0 <bt_mesh_proxy_adv_start+0xbc>
   17eb6:	bf00      	nop
   17eb8:	20004840 	.word	0x20004840
   17ebc:	20001155 	.word	0x20001155
   17ec0:	20001153 	.word	0x20001153
   17ec4:	00034869 	.word	0x00034869
   17ec8:	20004841 	.word	0x20004841
   17ecc:	0002f2f4 	.word	0x0002f2f4
   17ed0:	0002f30c 	.word	0x0002f30c
   17ed4:	0002f2b0 	.word	0x0002f2b0
   17ed8:	20003184 	.word	0x20003184
   17edc:	20003188 	.word	0x20003188
   17ee0:	00034895 	.word	0x00034895
   17ee4:	0002b4ed 	.word	0x0002b4ed
   17ee8:	0002f2dc 	.word	0x0002f2dc
   17eec:	000348b5 	.word	0x000348b5
   17ef0:	20001167 	.word	0x20001167
   17ef4:	0002f2c4 	.word	0x0002f2c4
   17ef8:	000348e5 	.word	0x000348e5

00017efc <bt_mesh_proxy_init>:
	.connected = proxy_connected,
	.disconnected = proxy_disconnected,
};

int bt_mesh_proxy_init(void)
{
   17efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	/* Initialize the client receive buffers */
	for (i = 0; i < ARRAY_SIZE(clients); i++) {
		struct bt_mesh_proxy_client *client = &clients[i];

		client->buf.size = CLIENT_BUF_SIZE;
   17f00:	4c17      	ldr	r4, [pc, #92]	; (17f60 <bt_mesh_proxy_init+0x64>)
		client->buf.__buf = client_buf_data + (i * CLIENT_BUF_SIZE);
   17f02:	4d18      	ldr	r5, [pc, #96]	; (17f64 <bt_mesh_proxy_init+0x68>)
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   17f04:	4e18      	ldr	r6, [pc, #96]	; (17f68 <bt_mesh_proxy_init+0x6c>)
   17f06:	6525      	str	r5, [r4, #80]	; 0x50
   17f08:	2730      	movs	r7, #48	; 0x30
		client->buf.size = CLIENT_BUF_SIZE;
   17f0a:	f04f 0844 	mov.w	r8, #68	; 0x44
   17f0e:	463a      	mov	r2, r7
   17f10:	2100      	movs	r1, #0
   17f12:	f104 0018 	add.w	r0, r4, #24
   17f16:	f8a4 804e 	strh.w	r8, [r4, #78]	; 0x4e
   17f1a:	f015 fb6e 	bl	2d5fa <memset>
		client->buf.__buf = client_buf_data + (i * CLIENT_BUF_SIZE);
   17f1e:	eb05 0308 	add.w	r3, r5, r8
   17f22:	463a      	mov	r2, r7
   17f24:	2100      	movs	r1, #0
   17f26:	f104 0070 	add.w	r0, r4, #112	; 0x70
   17f2a:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
   17f2e:	61e6      	str	r6, [r4, #28]
		client->buf.size = CLIENT_BUF_SIZE;
   17f30:	f8a4 80a6 	strh.w	r8, [r4, #166]	; 0xa6
		client->buf.__buf = client_buf_data + (i * CLIENT_BUF_SIZE);
   17f34:	3588      	adds	r5, #136	; 0x88
   17f36:	f015 fb60 	bl	2d5fa <memset>
   17f3a:	463a      	mov	r2, r7
   17f3c:	2100      	movs	r1, #0
   17f3e:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
   17f42:	6766      	str	r6, [r4, #116]	; 0x74
		client->buf.size = CLIENT_BUF_SIZE;
   17f44:	f8a4 80fe 	strh.w	r8, [r4, #254]	; 0xfe
		client->buf.__buf = client_buf_data + (i * CLIENT_BUF_SIZE);
   17f48:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   17f4c:	f015 fb55 	bl	2d5fa <memset>

		k_delayed_work_init(&client->sar_timer, proxy_sar_timeout);
	}

	bt_conn_cb_register(&conn_callbacks);
   17f50:	4806      	ldr	r0, [pc, #24]	; (17f6c <bt_mesh_proxy_init+0x70>)
   17f52:	f8c4 60cc 	str.w	r6, [r4, #204]	; 0xcc
   17f56:	f7f2 f979 	bl	a24c <bt_conn_cb_register>

	return 0;
}
   17f5a:	2000      	movs	r0, #0
   17f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17f60:	20000378 	.word	0x20000378
   17f64:	2000908c 	.word	0x2000908c
   17f68:	0001737d 	.word	0x0001737d
   17f6c:	20000934 	.word	0x20000934

00017f70 <bt_mesh_proxy_on_idle>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17f70:	4b09      	ldr	r3, [pc, #36]	; (17f98 <bt_mesh_proxy_on_idle+0x28>)
   17f72:	f3bf 8f5b 	dmb	ish
   17f76:	681b      	ldr	r3, [r3, #0]
   17f78:	f3bf 8f5b 	dmb	ish

void bt_mesh_proxy_on_idle(struct bt_mesh_proxy_idle_cb *cb)
{
	if (!atomic_get(&pending_notifications)) {
   17f7c:	b90b      	cbnz	r3, 17f82 <bt_mesh_proxy_on_idle+0x12>
		cb->cb();
   17f7e:	6843      	ldr	r3, [r0, #4]
   17f80:	4718      	bx	r3
	parent->next = child;
   17f82:	2300      	movs	r3, #0
   17f84:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(slist, snode)
   17f86:	4b05      	ldr	r3, [pc, #20]	; (17f9c <bt_mesh_proxy_on_idle+0x2c>)
   17f88:	685a      	ldr	r2, [r3, #4]
   17f8a:	b912      	cbnz	r2, 17f92 <bt_mesh_proxy_on_idle+0x22>
	list->head = node;
   17f8c:	e9c3 0000 	strd	r0, r0, [r3]
   17f90:	4770      	bx	lr
	parent->next = child;
   17f92:	6010      	str	r0, [r2, #0]
	list->tail = node;
   17f94:	6058      	str	r0, [r3, #4]
		return;
	}

	sys_slist_append(&idle_waiters, &cb->n);
}
   17f96:	4770      	bx	lr
   17f98:	20003194 	.word	0x20003194
   17f9c:	2000318c 	.word	0x2000318c

00017fa0 <mayfly_init>:
#if defined(MAYFLY_UT)
static uint8_t _state;
#endif /* MAYFLY_UT */

void mayfly_init(void)
{
   17fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (callee_id--) {
		uint8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(&mfl[callee_id][caller_id],
   17fa4:	4f11      	ldr	r7, [pc, #68]	; (17fec <mayfly_init+0x4c>)
   17fa6:	f8df 9048 	ldr.w	r9, [pc, #72]	; 17ff0 <mayfly_init+0x50>
	callee_id = MAYFLY_CALLEE_COUNT;
   17faa:	2604      	movs	r6, #4
	while (callee_id--) {
   17fac:	3e01      	subs	r6, #1
   17fae:	b2f6      	uxtb	r6, r6
   17fb0:	2eff      	cmp	r6, #255	; 0xff
   17fb2:	d019      	beq.n	17fe8 <mayfly_init+0x48>
   17fb4:	b233      	sxth	r3, r6
   17fb6:	ea4f 0883 	mov.w	r8, r3, lsl #2
   17fba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   17fbe:	011d      	lsls	r5, r3, #4
		caller_id = MAYFLY_CALLER_COUNT;
   17fc0:	2404      	movs	r4, #4
   17fc2:	f04f 0a0c 	mov.w	sl, #12
   17fc6:	e00a      	b.n	17fde <mayfly_init+0x3e>
			memq_init(&mfl[callee_id][caller_id],
   17fc8:	fb1a 5104 	smlabb	r1, sl, r4, r5
   17fcc:	1d0a      	adds	r2, r1, #4
   17fce:	eb04 0008 	add.w	r0, r4, r8
   17fd2:	443a      	add	r2, r7
   17fd4:	4439      	add	r1, r7
   17fd6:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
   17fda:	f013 fbae 	bl	2b73a <memq_init>
		while (caller_id--) {
   17fde:	3c01      	subs	r4, #1
   17fe0:	b2e4      	uxtb	r4, r4
   17fe2:	2cff      	cmp	r4, #255	; 0xff
   17fe4:	d1f0      	bne.n	17fc8 <mayfly_init+0x28>
   17fe6:	e7e1      	b.n	17fac <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
   17fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17fec:	20003218 	.word	0x20003218
   17ff0:	20003198 	.word	0x20003198

00017ff4 <mayfly_enable>:

void mayfly_enable(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
   17ff4:	b4f0      	push	{r4, r5, r6, r7}
   17ff6:	2430      	movs	r4, #48	; 0x30
   17ff8:	4b10      	ldr	r3, [pc, #64]	; (1803c <mayfly_enable+0x48>)
   17ffa:	270c      	movs	r7, #12
	if (enable) {
		if (mft[callee_id][caller_id].enable_req ==
   17ffc:	434c      	muls	r4, r1
   17ffe:	fb07 4400 	mla	r4, r7, r0, r4
{
   18002:	4605      	mov	r5, r0
   18004:	460e      	mov	r6, r1
		if (mft[callee_id][caller_id].enable_req ==
   18006:	4423      	add	r3, r4
	if (enable) {
   18008:	b152      	cbz	r2, 18020 <mayfly_enable+0x2c>
		if (mft[callee_id][caller_id].enable_req ==
   1800a:	7a59      	ldrb	r1, [r3, #9]
   1800c:	7a18      	ldrb	r0, [r3, #8]
   1800e:	4281      	cmp	r1, r0
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
   18010:	bf04      	itt	eq
   18012:	3101      	addeq	r1, #1
   18014:	7219      	strbeq	r1, [r3, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
   18016:	4628      	mov	r0, r5
   18018:	4631      	mov	r1, r6

			/* pend the callee for execution */
			mayfly_pend(caller_id, callee_id);
		}
	}
}
   1801a:	bcf0      	pop	{r4, r5, r6, r7}
		mayfly_enable_cb(caller_id, callee_id, enable);
   1801c:	f006 bca6 	b.w	1e96c <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
   18020:	7a9c      	ldrb	r4, [r3, #10]
   18022:	7ada      	ldrb	r2, [r3, #11]
   18024:	42a2      	cmp	r2, r4
   18026:	d107      	bne.n	18038 <mayfly_enable+0x44>
			mft[callee_id][caller_id].disable_req++;
   18028:	3201      	adds	r2, #1
   1802a:	729a      	strb	r2, [r3, #10]
			mfp[callee_id] = 1U;
   1802c:	4b04      	ldr	r3, [pc, #16]	; (18040 <mayfly_enable+0x4c>)
   1802e:	2201      	movs	r2, #1
   18030:	545a      	strb	r2, [r3, r1]
}
   18032:	bcf0      	pop	{r4, r5, r6, r7}
			mayfly_pend(caller_id, callee_id);
   18034:	f006 bcd6 	b.w	1e9e4 <mayfly_pend>
}
   18038:	bcf0      	pop	{r4, r5, r6, r7}
   1803a:	4770      	bx	lr
   1803c:	20003218 	.word	0x20003218
   18040:	20004842 	.word	0x20004842

00018044 <mayfly_enqueue>:

uint32_t mayfly_enqueue(uint8_t caller_id, uint8_t callee_id, uint8_t chain,
			struct mayfly *m)
{
   18044:	b570      	push	{r4, r5, r6, lr}
   18046:	4606      	mov	r6, r0
   18048:	460d      	mov	r5, r1
   1804a:	461c      	mov	r4, r3
	uint8_t state;
	uint8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
   1804c:	b1a2      	cbz	r2, 18078 <mayfly_enqueue+0x34>
   1804e:	2301      	movs	r3, #1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
   18050:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
   18052:	7820      	ldrb	r0, [r4, #0]
   18054:	1a80      	subs	r0, r0, r2
	if (state != 0U) {
   18056:	f010 0003 	ands.w	r0, r0, #3
   1805a:	d02c      	beq.n	180b6 <mayfly_enqueue+0x72>
		if (chain) {
   1805c:	b31b      	cbz	r3, 180a6 <mayfly_enqueue+0x62>
			if (state != 1U) {
   1805e:	2801      	cmp	r0, #1
   18060:	d028      	beq.n	180b4 <mayfly_enqueue+0x70>
				/* mark as ready in queue */
				m->_req = ack + 1;
   18062:	3201      	adds	r2, #1
   18064:	b2d2      	uxtb	r2, r2
   18066:	7022      	strb	r2, [r4, #0]
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);

mayfly_enqueue_pend:
	/* set mayfly callee pending */
	mfp[callee_id] = 1U;
   18068:	4b1c      	ldr	r3, [pc, #112]	; (180dc <mayfly_enqueue+0x98>)
   1806a:	2201      	movs	r2, #1

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
   1806c:	4629      	mov	r1, r5
   1806e:	4630      	mov	r0, r6
	mfp[callee_id] = 1U;
   18070:	555a      	strb	r2, [r3, r5]
	mayfly_pend(caller_id, callee_id);
   18072:	f006 fcb7 	bl	1e9e4 <mayfly_pend>
   18076:	e01c      	b.n	180b2 <mayfly_enqueue+0x6e>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   18078:	f014 fb8b 	bl	2c792 <mayfly_prio_is_equal>
   1807c:	2800      	cmp	r0, #0
   1807e:	d0e6      	beq.n	1804e <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
   18080:	4629      	mov	r1, r5
   18082:	4630      	mov	r0, r6
   18084:	f006 fc90 	bl	1e9a8 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   18088:	2800      	cmp	r0, #0
   1808a:	d0e0      	beq.n	1804e <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
   1808c:	2330      	movs	r3, #48	; 0x30
   1808e:	220c      	movs	r2, #12
   18090:	436b      	muls	r3, r5
   18092:	fb02 3306 	mla	r3, r2, r6, r3
   18096:	4a12      	ldr	r2, [pc, #72]	; (180e0 <mayfly_enqueue+0x9c>)
   18098:	441a      	add	r2, r3
		!mayfly_is_enabled(caller_id, callee_id) ||
   1809a:	7a93      	ldrb	r3, [r2, #10]
   1809c:	7ad2      	ldrb	r2, [r2, #11]
   1809e:	1a9b      	subs	r3, r3, r2
   180a0:	bf18      	it	ne
   180a2:	2301      	movne	r3, #1
   180a4:	e7d4      	b.n	18050 <mayfly_enqueue+0xc>
		m->_req = ack + 2;
   180a6:	3202      	adds	r2, #2
   180a8:	b2d2      	uxtb	r2, r2
   180aa:	7022      	strb	r2, [r4, #0]
		m->fp(m->param);
   180ac:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
   180b0:	4798      	blx	r3

	return 0;
   180b2:	2000      	movs	r0, #0
}
   180b4:	bd70      	pop	{r4, r5, r6, pc}
	if (!chain) {
   180b6:	2b00      	cmp	r3, #0
   180b8:	d0f8      	beq.n	180ac <mayfly_enqueue+0x68>
	m->_req = ack + 1;
   180ba:	3201      	adds	r2, #1
   180bc:	b2d2      	uxtb	r2, r2
   180be:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   180c0:	2304      	movs	r3, #4
   180c2:	2230      	movs	r2, #48	; 0x30
   180c4:	fb12 3205 	smlabb	r2, r2, r5, r3
   180c8:	230c      	movs	r3, #12
   180ca:	fb13 2306 	smlabb	r3, r3, r6, r2
   180ce:	4a04      	ldr	r2, [pc, #16]	; (180e0 <mayfly_enqueue+0x9c>)
   180d0:	6860      	ldr	r0, [r4, #4]
   180d2:	441a      	add	r2, r3
   180d4:	4621      	mov	r1, r4
   180d6:	f013 fb3e 	bl	2b756 <memq_enqueue>
   180da:	e7c5      	b.n	18068 <mayfly_enqueue+0x24>
   180dc:	20004842 	.word	0x20004842
   180e0:	20003218 	.word	0x20003218

000180e4 <mayfly_run>:
		}
	}
}

void mayfly_run(uint8_t callee_id)
{
   180e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t disable = 0U;
	uint8_t enable = 0U;
	uint8_t caller_id;

	if (!mfp[callee_id]) {
   180e8:	4b57      	ldr	r3, [pc, #348]	; (18248 <mayfly_run+0x164>)
   180ea:	5c1a      	ldrb	r2, [r3, r0]
{
   180ec:	b089      	sub	sp, #36	; 0x24
   180ee:	4605      	mov	r5, r0
	if (!mfp[callee_id]) {
   180f0:	2a00      	cmp	r2, #0
   180f2:	f000 80a2 	beq.w	1823a <mayfly_run+0x156>
		return;
	}
	mfp[callee_id] = 0U;
   180f6:	2600      	movs	r6, #0
   180f8:	541e      	strb	r6, [r3, r0]

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
   180fa:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   180fe:	011b      	lsls	r3, r3, #4
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   18100:	f8df b148 	ldr.w	fp, [pc, #328]	; 1824c <mayfly_run+0x168>
   18104:	9304      	str	r3, [sp, #16]
   18106:	2404      	movs	r4, #4
   18108:	233c      	movs	r3, #60	; 0x3c
   1810a:	fb13 4300 	smlabb	r3, r3, r0, r4
   1810e:	445b      	add	r3, fp
   18110:	9303      	str	r3, [sp, #12]
	uint8_t disable = 0U;
   18112:	9600      	str	r6, [sp, #0]
   18114:	46d9      	mov	r9, fp
	while (caller_id--) {
   18116:	3c01      	subs	r4, #1
   18118:	b2e4      	uxtb	r4, r4
   1811a:	2cff      	cmp	r4, #255	; 0xff
   1811c:	d10c      	bne.n	18138 <mayfly_run+0x54>
			mft[callee_id][caller_id].enable_ack =
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
   1811e:	9b00      	ldr	r3, [sp, #0]
   18120:	2b00      	cmp	r3, #0
   18122:	f000 808a 	beq.w	1823a <mayfly_run+0x156>
   18126:	2e00      	cmp	r6, #0
   18128:	f040 8087 	bne.w	1823a <mayfly_run+0x156>
		mayfly_enable_cb(callee_id, callee_id, 0);
   1812c:	4632      	mov	r2, r6
   1812e:	4629      	mov	r1, r5
   18130:	4628      	mov	r0, r5
   18132:	f006 fc1b 	bl	1e96c <mayfly_enable_cb>
   18136:	e080      	b.n	1823a <mayfly_run+0x156>
		struct mayfly *m = 0;
   18138:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
   1813a:	270c      	movs	r7, #12
		struct mayfly *m = 0;
   1813c:	9307      	str	r3, [sp, #28]
		link = memq_peek(mft[callee_id][caller_id].head,
   1813e:	4367      	muls	r7, r4
   18140:	2330      	movs	r3, #48	; 0x30
   18142:	fb03 7305 	mla	r3, r3, r5, r7
   18146:	eb09 0103 	add.w	r1, r9, r3
   1814a:	aa07      	add	r2, sp, #28
   1814c:	f859 0003 	ldr.w	r0, [r9, r3]
   18150:	6849      	ldr	r1, [r1, #4]
   18152:	f013 fb07 	bl	2b764 <memq_peek>
		memq_dequeue(mft[callee_id][caller_id].tail,
   18156:	9a04      	ldr	r2, [sp, #16]
   18158:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1815c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   18160:	444b      	add	r3, r9
   18162:	e9cd 7301 	strd	r7, r3, [sp, #4]
		link = memq_peek(mft[callee_id][caller_id].head,
   18166:	4682      	mov	sl, r0
		while (link) {
   18168:	f1ba 0f00 	cmp.w	sl, #0
   1816c:	d047      	beq.n	181fe <mayfly_run+0x11a>
			state = (m->_req - m->_ack) & 0x03;
   1816e:	9b07      	ldr	r3, [sp, #28]
   18170:	f893 8000 	ldrb.w	r8, [r3]
   18174:	785a      	ldrb	r2, [r3, #1]
   18176:	eba8 0802 	sub.w	r8, r8, r2
   1817a:	f008 0803 	and.w	r8, r8, #3
			if (state == 1U) {
   1817e:	f1b8 0f01 	cmp.w	r8, #1
   18182:	d104      	bne.n	1818e <mayfly_run+0xaa>
				m->_ack--;
   18184:	3a01      	subs	r2, #1
   18186:	705a      	strb	r2, [r3, #1]
				m->fp(m->param);
   18188:	e9d3 0202 	ldrd	r0, r2, [r3, #8]
   1818c:	4790      	blx	r2
			dequeue(callee_id, caller_id, link, m);
   1818e:	9f07      	ldr	r7, [sp, #28]
	req = m->_req;
   18190:	783b      	ldrb	r3, [r7, #0]
	if (((req - m->_ack) & 0x03) != 1U) {
   18192:	787a      	ldrb	r2, [r7, #1]
	req = m->_req;
   18194:	b2db      	uxtb	r3, r3
	if (((req - m->_ack) & 0x03) != 1U) {
   18196:	1a9a      	subs	r2, r3, r2
   18198:	f002 0203 	and.w	r2, r2, #3
   1819c:	2a01      	cmp	r2, #1
   1819e:	9305      	str	r3, [sp, #20]
   181a0:	d01b      	beq.n	181da <mayfly_run+0xf6>
		memq_dequeue(mft[callee_id][caller_id].tail,
   181a2:	9b01      	ldr	r3, [sp, #4]
   181a4:	9902      	ldr	r1, [sp, #8]
   181a6:	2030      	movs	r0, #48	; 0x30
   181a8:	fb00 3005 	mla	r0, r0, r5, r3
   181ac:	4b27      	ldr	r3, [pc, #156]	; (1824c <mayfly_run+0x168>)
   181ae:	4418      	add	r0, r3
   181b0:	2200      	movs	r2, #0
   181b2:	6840      	ldr	r0, [r0, #4]
   181b4:	f013 fade 	bl	2b774 <memq_dequeue>
		m->_ack = req;
   181b8:	9b05      	ldr	r3, [sp, #20]
		ack = m->_ack;
   181ba:	787a      	ldrb	r2, [r7, #1]
		m->_ack = req;
   181bc:	707b      	strb	r3, [r7, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
   181be:	783b      	ldrb	r3, [r7, #0]
		m->_link = link;
   181c0:	f8c7 a004 	str.w	sl, [r7, #4]
		if (((m->_req - ack) & 0x03) == 1U) {
   181c4:	1a9b      	subs	r3, r3, r2
   181c6:	f003 0303 	and.w	r3, r3, #3
   181ca:	2b01      	cmp	r3, #1
   181cc:	d105      	bne.n	181da <mayfly_run+0xf6>
			m->_ack = ack;
   181ce:	707a      	strb	r2, [r7, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   181d0:	4639      	mov	r1, r7
   181d2:	9a03      	ldr	r2, [sp, #12]
   181d4:	4650      	mov	r0, sl
   181d6:	f013 fabe 	bl	2b756 <memq_enqueue>
			link = memq_peek(mft[callee_id][caller_id].head,
   181da:	9a01      	ldr	r2, [sp, #4]
   181dc:	2330      	movs	r3, #48	; 0x30
   181de:	fb03 2305 	mla	r3, r3, r5, r2
   181e2:	eb09 0103 	add.w	r1, r9, r3
   181e6:	aa07      	add	r2, sp, #28
   181e8:	6849      	ldr	r1, [r1, #4]
   181ea:	f859 0003 	ldr.w	r0, [r9, r3]
   181ee:	f013 fab9 	bl	2b764 <memq_peek>
			if (state == 1U) {
   181f2:	f1b8 0f01 	cmp.w	r8, #1
			link = memq_peek(mft[callee_id][caller_id].head,
   181f6:	4682      	mov	sl, r0
			if (state == 1U) {
   181f8:	d1b6      	bne.n	18168 <mayfly_run+0x84>
				if (caller_id || link) {
   181fa:	b9bc      	cbnz	r4, 1822c <mayfly_run+0x148>
   181fc:	b9b0      	cbnz	r0, 1822c <mayfly_run+0x148>
		if (mft[callee_id][caller_id].disable_req !=
   181fe:	2230      	movs	r2, #48	; 0x30
   18200:	4912      	ldr	r1, [pc, #72]	; (1824c <mayfly_run+0x168>)
   18202:	230c      	movs	r3, #12
   18204:	436a      	muls	r2, r5
   18206:	fb03 2204 	mla	r2, r3, r4, r2
   1820a:	440a      	add	r2, r1
   1820c:	7a91      	ldrb	r1, [r2, #10]
   1820e:	7ad0      	ldrb	r0, [r2, #11]
   18210:	4288      	cmp	r0, r1
   18212:	d115      	bne.n	18240 <mayfly_run+0x15c>
		if (mft[callee_id][caller_id].enable_req !=
   18214:	2230      	movs	r2, #48	; 0x30
   18216:	436a      	muls	r2, r5
   18218:	fb03 2304 	mla	r3, r3, r4, r2
   1821c:	445b      	add	r3, fp
   1821e:	7a1a      	ldrb	r2, [r3, #8]
   18220:	7a59      	ldrb	r1, [r3, #9]
   18222:	4291      	cmp	r1, r2
			mft[callee_id][caller_id].enable_ack =
   18224:	bf1c      	itt	ne
   18226:	725a      	strbne	r2, [r3, #9]
			enable = 1U;
   18228:	2601      	movne	r6, #1
   1822a:	e774      	b.n	18116 <mayfly_run+0x32>
					mfp[callee_id] = 1U;
   1822c:	4b06      	ldr	r3, [pc, #24]	; (18248 <mayfly_run+0x164>)
   1822e:	2201      	movs	r2, #1
					mayfly_pend(callee_id, callee_id);
   18230:	4629      	mov	r1, r5
   18232:	4628      	mov	r0, r5
					mfp[callee_id] = 1U;
   18234:	555a      	strb	r2, [r3, r5]
					mayfly_pend(callee_id, callee_id);
   18236:	f006 fbd5 	bl	1e9e4 <mayfly_pend>
	}
}
   1823a:	b009      	add	sp, #36	; 0x24
   1823c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mft[callee_id][caller_id].disable_ack =
   18240:	72d1      	strb	r1, [r2, #11]
			disable = 1U;
   18242:	2201      	movs	r2, #1
   18244:	9200      	str	r2, [sp, #0]
   18246:	e7e5      	b.n	18214 <mayfly_run+0x130>
   18248:	20004842 	.word	0x20004842
   1824c:	20003218 	.word	0x20003218

00018250 <ticker_job>:
 * @param param Pointer to ticker instance
 *
 * @internal
 */
void ticker_job(void *param)
{
   18250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18254:	b08f      	sub	sp, #60	; 0x3c
	uint8_t flag_compare_update;

	DEBUG_TICKER_JOB(1);

	/* Defer worker, as job is now running */
	if (instance->worker_trigger) {
   18256:	7fc3      	ldrb	r3, [r0, #31]
   18258:	9304      	str	r3, [sp, #16]
{
   1825a:	4604      	mov	r4, r0
	if (instance->worker_trigger) {
   1825c:	2b00      	cmp	r3, #0
   1825e:	f040 83cf 	bne.w	18a00 <ticker_job+0x7b0>
		return;
	}
	instance->job_guard = 1U;

	/* Back up the previous known tick */
	ticks_previous = instance->ticks_current;
   18262:	6943      	ldr	r3, [r0, #20]
   18264:	9307      	str	r3, [sp, #28]

	/* Update current tick with the elapsed value from queue, and dequeue */
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   18266:	7ac1      	ldrb	r1, [r0, #11]
   18268:	7a83      	ldrb	r3, [r0, #10]
	instance->job_guard = 1U;
   1826a:	2201      	movs	r2, #1
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   1826c:	4299      	cmp	r1, r3
	instance->job_guard = 1U;
   1826e:	7782      	strb	r2, [r0, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   18270:	d059      	beq.n	18326 <ticker_job+0xd6>
	uint8_t idx = *ticks_elapsed_index + 1;
   18272:	4413      	add	r3, r2
   18274:	b2db      	uxtb	r3, r3
		idx = 0U;
   18276:	2b02      	cmp	r3, #2
   18278:	bf08      	it	eq
   1827a:	2300      	moveq	r3, #0
	*ticks_elapsed_index = idx;
   1827c:	7283      	strb	r3, [r0, #10]
		ticker_next_elapsed(&instance->ticks_elapsed_first);

		ticks_elapsed =
   1827e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
		    instance->ticks_elapsed[instance->ticks_elapsed_first];

		instance->ticks_current += ticks_elapsed;
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;

		flag_elapsed = 1U;
   18282:	9205      	str	r2, [sp, #20]
		ticks_elapsed =
   18284:	68db      	ldr	r3, [r3, #12]
   18286:	9301      	str	r3, [sp, #4]
		instance->ticks_current += ticks_elapsed;
   18288:	9901      	ldr	r1, [sp, #4]
   1828a:	9b07      	ldr	r3, [sp, #28]
   1828c:	440b      	add	r3, r1
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
   1828e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   18292:	6143      	str	r3, [r0, #20]
	flag_compare_update = 0U;

	/* Remember the old head, so as to decide if new compare needs to be
	 * set.
	 */
	ticker_id_old_head = instance->ticker_id_head;
   18294:	7f63      	ldrb	r3, [r4, #29]
   18296:	9306      	str	r3, [sp, #24]
	node = &instance->nodes[0];
   18298:	6823      	ldr	r3, [r4, #0]
   1829a:	9309      	str	r3, [sp, #36]	; 0x24
	users = &instance->users[0];
   1829c:	6863      	ldr	r3, [r4, #4]
   1829e:	930d      	str	r3, [sp, #52]	; 0x34
	pending = 0U;
   182a0:	2300      	movs	r3, #0
   182a2:	9308      	str	r3, [sp, #32]
	count_user = instance->count_user;
   182a4:	f894 b009 	ldrb.w	fp, [r4, #9]
	insert_head = TICKER_NULL;
   182a8:	23ff      	movs	r3, #255	; 0xff
   182aa:	9303      	str	r3, [sp, #12]
	while (count_user--) {
   182ac:	f10b 33ff 	add.w	r3, fp, #4294967295
   182b0:	fa5f fb83 	uxtb.w	fp, r3
   182b4:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   182b8:	d139      	bne.n	1832e <ticker_job+0xde>

	/* Manage user operations (updates and deletions) in ticker list */
	pending = ticker_job_list_manage(instance, ticks_elapsed, &insert_head);

	/* Detect change in head of the list */
	if (instance->ticker_id_head != ticker_id_old_head) {
   182ba:	7f63      	ldrb	r3, [r4, #29]
		flag_compare_update = 1U;
   182bc:	9a06      	ldr	r2, [sp, #24]
   182be:	1a9b      	subs	r3, r3, r2
   182c0:	bf18      	it	ne
   182c2:	2301      	movne	r3, #1
   182c4:	9302      	str	r3, [sp, #8]
	}

	/* Handle expired tickers */
	if (flag_elapsed) {
   182c6:	9b05      	ldr	r3, [sp, #20]
   182c8:	2b00      	cmp	r3, #0
   182ca:	f000 8299 	beq.w	18800 <ticker_job+0x5b0>
	ticks_now = cntr_cnt_get();
   182ce:	f005 ffa1 	bl	1e214 <cntr_cnt_get>
 * @param ticks_now Highest tick count (now)
 * @param ticks_old Tick count to subtract from ticks_now
 */
uint32_t ticker_ticks_diff_get(uint32_t ticks_now, uint32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   182d2:	9b07      	ldr	r3, [sp, #28]
	node = &instance->nodes[0];
   182d4:	f8dd 8004 	ldr.w	r8, [sp, #4]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   182d8:	1ac0      	subs	r0, r0, r3
	node = &instance->nodes[0];
   182da:	6823      	ldr	r3, [r4, #0]
   182dc:	9309      	str	r3, [sp, #36]	; 0x24
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   182de:	f020 4b7f 	bic.w	fp, r0, #4278190080	; 0xff000000
	ticks_expired = 0U;
   182e2:	f04f 0a00 	mov.w	sl, #0
	while (instance->ticker_id_head != TICKER_NULL) {
   182e6:	7f67      	ldrb	r7, [r4, #29]
   182e8:	2fff      	cmp	r7, #255	; 0xff
   182ea:	d00e      	beq.n	1830a <ticker_job+0xba>
		ticker = &node[id_expired];
   182ec:	b23e      	sxth	r6, r7
   182ee:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   182f2:	0133      	lsls	r3, r6, #4
   182f4:	930a      	str	r3, [sp, #40]	; 0x28
   182f6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
   182fa:	189d      	adds	r5, r3, r2
		ticks_to_expire = ticker->ticks_to_expire;
   182fc:	68ab      	ldr	r3, [r5, #8]
		if (ticks_elapsed < ticks_to_expire) {
   182fe:	4543      	cmp	r3, r8
   18300:	f240 8137 	bls.w	18572 <ticker_job+0x322>
			ticker->ticks_to_expire -= ticks_elapsed;
   18304:	eba3 0308 	sub.w	r3, r3, r8
   18308:	60ab      	str	r3, [r5, #8]
			flag_compare_update = 1U;
   1830a:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
   1830e:	9b02      	ldr	r3, [sp, #8]
		ticker_job_list_insert(instance, insert_head);
   18310:	4620      	mov	r0, r4
			flag_compare_update = 1U;
   18312:	42b9      	cmp	r1, r7
   18314:	bf18      	it	ne
   18316:	4613      	movne	r3, r2
		ticker_job_list_insert(instance, insert_head);
   18318:	9903      	ldr	r1, [sp, #12]
			flag_compare_update = 1U;
   1831a:	9302      	str	r3, [sp, #8]
		ticker_job_list_insert(instance, insert_head);
   1831c:	f013 fa74 	bl	2b808 <ticker_job_list_insert>
	nodes = &instance->nodes[0];
   18320:	6820      	ldr	r0, [r4, #0]
		ticker_id_head = instance->ticker_id_head;
   18322:	7f66      	ldrb	r6, [r4, #29]
		while (ticker_id_head != TICKER_NULL) {
   18324:	e1e9      	b.n	186fa <ticker_job+0x4aa>
		flag_elapsed = 0U;
   18326:	9b04      	ldr	r3, [sp, #16]
   18328:	9305      	str	r3, [sp, #20]
		ticks_elapsed = 0U;
   1832a:	9301      	str	r3, [sp, #4]
   1832c:	e7b2      	b.n	18294 <ticker_job+0x44>
		user = &users[count_user];
   1832e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18330:	eb03 08cb 	add.w	r8, r3, fp, lsl #3
		user_ops = &user->user_op[0];
   18334:	f8d8 3004 	ldr.w	r3, [r8, #4]
   18338:	930a      	str	r3, [sp, #40]	; 0x28
		while (user->middle != user->last) {
   1833a:	f898 2003 	ldrb.w	r2, [r8, #3]
			user_op = &user_ops[user->middle];
   1833e:	2134      	movs	r1, #52	; 0x34
		while (user->middle != user->last) {
   18340:	f898 7002 	ldrb.w	r7, [r8, #2]
   18344:	4297      	cmp	r7, r2
   18346:	d0b1      	beq.n	182ac <ticker_job+0x5c>
			user_op = &user_ops[user->middle];
   18348:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			if (middle == user->count_user_op) {
   1834a:	f898 5000 	ldrb.w	r5, [r8]
			user_op = &user_ops[user->middle];
   1834e:	fb17 f001 	smulbb	r0, r7, r1
   18352:	181e      	adds	r6, r3, r0
			middle = user->middle + 1;
   18354:	1c7b      	adds	r3, r7, #1
   18356:	b2db      	uxtb	r3, r3
				middle = 0U;
   18358:	429d      	cmp	r5, r3
   1835a:	bf08      	it	eq
   1835c:	2300      	moveq	r3, #0
			user->middle = middle;
   1835e:	f888 3002 	strb.w	r3, [r8, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   18362:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   18364:	5c18      	ldrb	r0, [r3, r0]
   18366:	2804      	cmp	r0, #4
   18368:	d9ea      	bls.n	18340 <ticker_job+0xf0>
			ticker = &node[user_op->id];
   1836a:	7871      	ldrb	r1, [r6, #1]
   1836c:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   18370:	011b      	lsls	r3, r3, #4
   18372:	930c      	str	r3, [sp, #48]	; 0x30
   18374:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   18376:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18378:	189d      	adds	r5, r3, r2
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   1837a:	2807      	cmp	r0, #7
			state = (ticker->req - ticker->ack) & 0xff;
   1837c:	f895 c002 	ldrb.w	ip, [r5, #2]
   18380:	786a      	ldrb	r2, [r5, #1]
   18382:	eba2 020c 	sub.w	r2, r2, ip
   18386:	b2d2      	uxtb	r2, r2
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   18388:	d80e      	bhi.n	183a8 <ticker_job+0x158>
   1838a:	b16a      	cbz	r2, 183a8 <ticker_job+0x158>
			    (state == 0U) ||
   1838c:	2805      	cmp	r0, #5
   1838e:	d110      	bne.n	183b2 <ticker_job+0x162>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
   18390:	6873      	ldr	r3, [r6, #4]
   18392:	b973      	cbnz	r3, 183b2 <ticker_job+0x162>
			     (user_op->params.update.ticks_drift_plus == 0U) &&
   18394:	68b3      	ldr	r3, [r6, #8]
   18396:	b963      	cbnz	r3, 183b2 <ticker_job+0x162>
			     (user_op->params.update.ticks_drift_minus == 0U) &&
   18398:	68f3      	ldr	r3, [r6, #12]
   1839a:	b953      	cbnz	r3, 183b2 <ticker_job+0x162>
			     (user_op->params.update.ticks_slot_plus == 0U) &&
   1839c:	6933      	ldr	r3, [r6, #16]
   1839e:	b943      	cbnz	r3, 183b2 <ticker_job+0x162>
			     (user_op->params.update.lazy == 0U) &&
   183a0:	6973      	ldr	r3, [r6, #20]
   183a2:	f033 437f 	bics.w	r3, r3, #4278190080	; 0xff000000
   183a6:	d104      	bne.n	183b2 <ticker_job+0x162>
				ticker_job_op_cb(user_op,
   183a8:	2101      	movs	r1, #1
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
   183aa:	4630      	mov	r0, r6
   183ac:	f013 fa22 	bl	2b7f4 <ticker_job_op_cb>
   183b0:	e7c3      	b.n	1833a <ticker_job+0xea>
			if (state == 1U) {
   183b2:	2a01      	cmp	r2, #1
   183b4:	f040 80d2 	bne.w	1855c <ticker_job+0x30c>
	previous = instance->ticker_id_head;
   183b8:	7f63      	ldrb	r3, [r4, #29]
	node = &instance->nodes[0];
   183ba:	f8d4 e000 	ldr.w	lr, [r4]
	previous = instance->ticker_id_head;
   183be:	9302      	str	r3, [sp, #8]
	total = 0U;
   183c0:	2700      	movs	r7, #0
	while (current != TICKER_NULL) {
   183c2:	2bff      	cmp	r3, #255	; 0xff
   183c4:	d12e      	bne.n	18424 <ticker_job+0x1d4>
		return 0;
   183c6:	2700      	movs	r7, #0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   183c8:	2805      	cmp	r0, #5
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   183ca:	60af      	str	r7, [r5, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   183cc:	f040 80a3 	bne.w	18516 <ticker_job+0x2c6>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   183d0:	f8d4 9014 	ldr.w	r9, [r4, #20]
	ticks_now = cntr_cnt_get();
   183d4:	f005 ff1e 	bl	1e214 <cntr_cnt_get>
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   183d8:	9901      	ldr	r1, [sp, #4]
	ticks_now = cntr_cnt_get();
   183da:	9002      	str	r0, [sp, #8]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   183dc:	eba0 0309 	sub.w	r3, r0, r9
   183e0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   183e4:	440b      	add	r3, r1
	if (ticks_to_expire > ticks_elapsed) {
   183e6:	429f      	cmp	r7, r3
		ticker->ticks_to_expire_minus += ticks_elapsed -
   183e8:	bf98      	it	ls
   183ea:	6969      	ldrls	r1, [r5, #20]
	if ((ticker->ticks_periodic != 0U) &&
   183ec:	6868      	ldr	r0, [r5, #4]
		ticker->ticks_to_expire_minus += ticks_elapsed -
   183ee:	bf9d      	ittte	ls
   183f0:	1bcf      	subls	r7, r1, r7
   183f2:	19db      	addls	r3, r3, r7
   183f4:	616b      	strls	r3, [r5, #20]
		ticks_to_expire -= ticks_elapsed;
   183f6:	1afb      	subhi	r3, r7, r3
		ticks_to_expire = 0U;
   183f8:	bf98      	it	ls
   183fa:	2300      	movls	r3, #0
	if ((ticker->ticks_periodic != 0U) &&
   183fc:	2800      	cmp	r0, #0
   183fe:	d05b      	beq.n	184b8 <ticker_job+0x268>
	    (user_op->params.update.lazy != 0U)) {
   18400:	8ab1      	ldrh	r1, [r6, #20]
	if ((ticker->ticks_periodic != 0U) &&
   18402:	2900      	cmp	r1, #0
   18404:	d058      	beq.n	184b8 <ticker_job+0x268>
		user_op->params.update.lazy--;
   18406:	f101 3cff 	add.w	ip, r1, #4294967295
   1840a:	fa1f fc8c 	uxth.w	ip, ip
   1840e:	f8a6 c014 	strh.w	ip, [r6, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   18412:	4298      	cmp	r0, r3
   18414:	f8b5 e01e 	ldrh.w	lr, [r5, #30]
   18418:	d201      	bcs.n	1841e <ticker_job+0x1ce>
   1841a:	45f4      	cmp	ip, lr
   1841c:	d314      	bcc.n	18448 <ticker_job+0x1f8>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   1841e:	f8df a2bc 	ldr.w	sl, [pc, #700]	; 186dc <ticker_job+0x48c>
   18422:	e043      	b.n	184ac <ticker_job+0x25c>
		ticker_current = &node[current];
   18424:	eb03 0943 	add.w	r9, r3, r3, lsl #1
   18428:	ea4f 1909 	mov.w	r9, r9, lsl #4
   1842c:	eb0e 0a09 	add.w	sl, lr, r9
		if (current == id) {
   18430:	4299      	cmp	r1, r3
   18432:	f8da 2008 	ldr.w	r2, [sl, #8]
   18436:	920b      	str	r2, [sp, #44]	; 0x2c
   18438:	4417      	add	r7, r2
   1843a:	f81e 9009 	ldrb.w	r9, [lr, r9]
   1843e:	f000 82bd 	beq.w	189bc <ticker_job+0x76c>
   18442:	9302      	str	r3, [sp, #8]
   18444:	464b      	mov	r3, r9
   18446:	e7bc      	b.n	183c2 <ticker_job+0x172>
	if ((ticker->remainder_current >= BIT(31)) ||
   18448:	6a69      	ldr	r1, [r5, #36]	; 0x24
   1844a:	4fa2      	ldr	r7, [pc, #648]	; (186d4 <ticker_job+0x484>)
   1844c:	4aa2      	ldr	r2, [pc, #648]	; (186d8 <ticker_job+0x488>)
   1844e:	19cf      	adds	r7, r1, r7
   18450:	4297      	cmp	r7, r2
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
   18452:	bf81      	itttt	hi
   18454:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
   18458:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
   1845c:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
   18460:	6269      	strhi	r1, [r5, #36]	; 0x24
	ticker->remainder_current -= ticker->remainder_periodic;
   18462:	e9d5 1708 	ldrd	r1, r7, [r5, #32]
		decrement++;
   18466:	bf8c      	ite	hi
   18468:	f04f 0a01 	movhi.w	sl, #1
	uint8_t decrement = 0U;
   1846c:	f04f 0a00 	movls.w	sl, #0
	ticker->remainder_current -= ticker->remainder_periodic;
   18470:	1a7f      	subs	r7, r7, r1
			ticks_to_expire -= ticker->ticks_periodic +
   18472:	4482      	add	sl, r0
			ticker->lazy_current--;
   18474:	f10e 3eff 	add.w	lr, lr, #4294967295
	ticker->remainder_current -= ticker->remainder_periodic;
   18478:	626f      	str	r7, [r5, #36]	; 0x24
			ticks_to_expire -= ticker->ticks_periodic +
   1847a:	eba3 030a 	sub.w	r3, r3, sl
			ticker->lazy_current--;
   1847e:	f8a5 e01e 	strh.w	lr, [r5, #30]
   18482:	e7c6      	b.n	18412 <ticker_job+0x1c2>
	ticker->remainder_current += ticker->remainder_periodic;
   18484:	e9d5 1708 	ldrd	r1, r7, [r5, #32]
   18488:	440f      	add	r7, r1
	if ((ticker->remainder_current < BIT(31)) &&
   1848a:	4992      	ldr	r1, [pc, #584]	; (186d4 <ticker_job+0x484>)
   1848c:	4a92      	ldr	r2, [pc, #584]	; (186d8 <ticker_job+0x488>)
   1848e:	1879      	adds	r1, r7, r1
   18490:	4291      	cmp	r1, r2
	return 0;
   18492:	bf8e      	itee	hi
   18494:	2100      	movhi	r1, #0
		return 1;
   18496:	2101      	movls	r1, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   18498:	4457      	addls	r7, sl
			ticks_to_expire += ticker->ticks_periodic +
   1849a:	4401      	add	r1, r0
			ticker->lazy_current++;
   1849c:	f10e 0e01 	add.w	lr, lr, #1
	ticker->remainder_current += ticker->remainder_periodic;
   184a0:	bf8c      	ite	hi
   184a2:	626f      	strhi	r7, [r5, #36]	; 0x24
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   184a4:	626f      	strls	r7, [r5, #36]	; 0x24
			ticks_to_expire += ticker->ticks_periodic +
   184a6:	440b      	add	r3, r1
			ticker->lazy_current++;
   184a8:	f8a5 e01e 	strh.w	lr, [r5, #30]
		while (ticker->lazy_current < user_op->params.update.lazy) {
   184ac:	f8b5 e01e 	ldrh.w	lr, [r5, #30]
   184b0:	45f4      	cmp	ip, lr
   184b2:	d8e7      	bhi.n	18484 <ticker_job+0x234>
		ticker->lazy_periodic = user_op->params.update.lazy;
   184b4:	f8a5 c01c 	strh.w	ip, [r5, #28]
				  user_op->params.update.ticks_drift_plus;
   184b8:	6871      	ldr	r1, [r6, #4]
				user_op->params.update.ticks_drift_minus;
   184ba:	68b0      	ldr	r0, [r6, #8]
	struct ticker_ext *ext_data = ticker->ext_data;
   184bc:	6aaf      	ldr	r7, [r5, #40]	; 0x28
	ticker->ticks_to_expire = ticks_to_expire +
   184be:	440b      	add	r3, r1
   184c0:	60ab      	str	r3, [r5, #8]
	ticker->ticks_to_expire_minus +=
   184c2:	696b      	ldr	r3, [r5, #20]
   184c4:	4403      	add	r3, r0
   184c6:	616b      	str	r3, [r5, #20]
	if (ext_data && ext_data->ticks_slot_window != 0U) {
   184c8:	b11f      	cbz	r7, 184d2 <ticker_job+0x282>
   184ca:	683b      	ldr	r3, [r7, #0]
   184cc:	b10b      	cbz	r3, 184d2 <ticker_job+0x282>
			user_op->params.update.ticks_drift_plus -
   184ce:	1a09      	subs	r1, r1, r0
		ext_data->ticks_drift =
   184d0:	6079      	str	r1, [r7, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
   184d2:	9a02      	ldr	r2, [sp, #8]
   184d4:	4649      	mov	r1, r9
   184d6:	4628      	mov	r0, r5
   184d8:	f013 f96e 	bl	2b7b8 <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
   184dc:	68f2      	ldr	r2, [r6, #12]
   184de:	69ab      	ldr	r3, [r5, #24]
   184e0:	4413      	add	r3, r2
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
   184e2:	6932      	ldr	r2, [r6, #16]
   184e4:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
   184e6:	bf8c      	ite	hi
   184e8:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0U;
   184ea:	2300      	movls	r3, #0
   184ec:	61ab      	str	r3, [r5, #24]
	if (user_op->params.update.force != 0U) {
   184ee:	7db3      	ldrb	r3, [r6, #22]
   184f0:	b103      	cbz	r3, 184f4 <ticker_job+0x2a4>
		ticker->force = user_op->params.update.force;
   184f2:	70eb      	strb	r3, [r5, #3]
	if (user_op->params.update.must_expire) {
   184f4:	7df3      	ldrb	r3, [r6, #23]
   184f6:	b113      	cbz	r3, 184fe <ticker_job+0x2ae>
		ticker->must_expire = (user_op->params.update.must_expire - 1);
   184f8:	3b01      	subs	r3, #1
   184fa:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
	ticker->next = *insert_head;
   184fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18500:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   18502:	4619      	mov	r1, r3
   18504:	9b03      	ldr	r3, [sp, #12]
   18506:	548b      	strb	r3, [r1, r2]
	*insert_head = user_op->id;
   18508:	7873      	ldrb	r3, [r6, #1]
   1850a:	9303      	str	r3, [sp, #12]
		ticker->req++;
   1850c:	786b      	ldrb	r3, [r5, #1]
   1850e:	3301      	adds	r3, #1
   18510:	706b      	strb	r3, [r5, #1]
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
   18512:	2100      	movs	r1, #0
   18514:	e749      	b.n	183aa <ticker_job+0x15a>
		ticker->req = ticker->ack;
   18516:	f885 c001 	strb.w	ip, [r5, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
   1851a:	7f23      	ldrb	r3, [r4, #28]
   1851c:	428b      	cmp	r3, r1
   1851e:	d1f8      	bne.n	18512 <ticker_job+0x2c2>
			instance->ticker_id_slot_previous = TICKER_NULL;
   18520:	23ff      	movs	r3, #255	; 0xff
			if (user_op->op == TICKER_USER_OP_TYPE_STOP_ABS) {
   18522:	2807      	cmp	r0, #7
			instance->ticker_id_slot_previous = TICKER_NULL;
   18524:	7723      	strb	r3, [r4, #28]
			if (user_op->op == TICKER_USER_OP_TYPE_STOP_ABS) {
   18526:	d10d      	bne.n	18544 <ticker_job+0x2f4>
				ticks_at_stop =
   18528:	6870      	ldr	r0, [r6, #4]
			ticks_current = instance->ticks_current;
   1852a:	6963      	ldr	r3, [r4, #20]
			if (!((ticks_at_stop - ticks_current) &
   1852c:	1ac2      	subs	r2, r0, r3
   1852e:	0211      	lsls	r1, r2, #8
   18530:	d40b      	bmi.n	1854a <ticker_job+0x2fa>
				ticks_used = ticks_elapsed +
   18532:	9b01      	ldr	r3, [sp, #4]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   18534:	f022 407f 	bic.w	r0, r2, #4278190080	; 0xff000000
				ticks_used = ticks_elapsed +
   18538:	4418      	add	r0, r3
			if (instance->ticks_slot_previous > ticks_used) {
   1853a:	69a3      	ldr	r3, [r4, #24]
   1853c:	4283      	cmp	r3, r0
				instance->ticks_slot_previous = ticks_used;
   1853e:	bf88      	it	hi
   18540:	61a0      	strhi	r0, [r4, #24]
   18542:	e7e6      	b.n	18512 <ticker_job+0x2c2>
				ticks_at_stop = cntr_cnt_get();
   18544:	f005 fe66 	bl	1e214 <cntr_cnt_get>
   18548:	e7ef      	b.n	1852a <ticker_job+0x2da>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1854a:	1a18      	subs	r0, r3, r0
				if (ticks_elapsed > ticks_used) {
   1854c:	9b01      	ldr	r3, [sp, #4]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1854e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (ticks_elapsed > ticks_used) {
   18552:	4283      	cmp	r3, r0
					ticks_used = ticks_elapsed -
   18554:	bf8c      	ite	hi
   18556:	1a18      	subhi	r0, r3, r0
					ticks_used = 0;
   18558:	2000      	movls	r0, #0
   1855a:	e7ee      	b.n	1853a <ticker_job+0x2ea>
				instance->sched_cb(TICKER_CALL_ID_JOB,
   1855c:	2104      	movs	r1, #4
   1855e:	4623      	mov	r3, r4
   18560:	6a65      	ldr	r5, [r4, #36]	; 0x24
   18562:	2201      	movs	r2, #1
   18564:	4608      	mov	r0, r1
   18566:	47a8      	blx	r5
				pending = 1U;
   18568:	2301      	movs	r3, #1
				user->middle = prev;
   1856a:	f888 7002 	strb.w	r7, [r8, #2]
				pending = 1U;
   1856e:	9308      	str	r3, [sp, #32]
   18570:	e69c      	b.n	182ac <ticker_job+0x5c>
		if (instance->ticks_slot_previous > ticks_to_expire) {
   18572:	69a2      	ldr	r2, [r4, #24]
		skip_collision = (ticker->lazy_current != 0U);
   18574:	f8b5 901e 	ldrh.w	r9, [r5, #30]
		if (instance->ticks_slot_previous > ticks_to_expire) {
   18578:	4293      	cmp	r3, r2
		ticks_elapsed -= ticks_to_expire;
   1857a:	eba8 0803 	sub.w	r8, r8, r3
		ticks_expired += ticks_to_expire;
   1857e:	449a      	add	sl, r3
		ticks_latency -= ticks_to_expire;
   18580:	ebab 0b03 	sub.w	fp, fp, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
   18584:	bf25      	ittet	cs
   18586:	23ff      	movcs	r3, #255	; 0xff
   18588:	7723      	strbcs	r3, [r4, #28]
			instance->ticks_slot_previous -= ticks_to_expire;
   1858a:	1ad3      	subcc	r3, r2, r3
			instance->ticks_slot_previous = 0U;
   1858c:	2300      	movcs	r3, #0
   1858e:	61a3      	str	r3, [r4, #24]
		state = (ticker->req - ticker->ack) & 0xff;
   18590:	78a9      	ldrb	r1, [r5, #2]
   18592:	786b      	ldrb	r3, [r5, #1]
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   18594:	f8d5 c018 	ldr.w	ip, [r5, #24]
   18598:	6aaa      	ldr	r2, [r5, #40]	; 0x28
		state = (ticker->req - ticker->ack) & 0xff;
   1859a:	1a5b      	subs	r3, r3, r1
   1859c:	b2db      	uxtb	r3, r3
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   1859e:	f1bc 0f00 	cmp.w	ip, #0
   185a2:	d00d      	beq.n	185c0 <ticker_job+0x370>
   185a4:	2b02      	cmp	r3, #2
   185a6:	d10b      	bne.n	185c0 <ticker_job+0x370>
   185a8:	f1b9 0f00 	cmp.w	r9, #0
   185ac:	d108      	bne.n	185c0 <ticker_job+0x370>
   185ae:	b122      	cbz	r2, 185ba <ticker_job+0x36a>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   185b0:	f892 e008 	ldrb.w	lr, [r2, #8]
   185b4:	f1be 0f01 	cmp.w	lr, #1
   185b8:	d002      	beq.n	185c0 <ticker_job+0x370>
			instance->ticker_id_slot_previous = id_expired;
   185ba:	7727      	strb	r7, [r4, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
   185bc:	f8c4 c018 	str.w	ip, [r4, #24]
		instance->ticker_id_head = ticker->next;
   185c0:	e9dd 6009 	ldrd	r6, r0, [sp, #36]	; 0x24
		ticker->ticks_to_expire = 0U;
   185c4:	f04f 0c00 	mov.w	ip, #0
   185c8:	f8c5 c008 	str.w	ip, [r5, #8]
		instance->ticker_id_head = ticker->next;
   185cc:	f816 c000 	ldrb.w	ip, [r6, r0]
   185d0:	f884 c01d 	strb.w	ip, [r4, #29]
		if ((ticker->ticks_periodic != 0U) ||
   185d4:	f8d5 c004 	ldr.w	ip, [r5, #4]
   185d8:	f1bc 0f00 	cmp.w	ip, #0
   185dc:	d11d      	bne.n	1861a <ticker_job+0x3ca>
   185de:	2a00      	cmp	r2, #0
   185e0:	d068      	beq.n	186b4 <ticker_job+0x464>
		    TICKER_RESCHEDULE_PENDING(ticker)) {
   185e2:	f892 e008 	ldrb.w	lr, [r2, #8]
   185e6:	f1be 0f01 	cmp.w	lr, #1
   185ea:	d163      	bne.n	186b4 <ticker_job+0x464>
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
   185ec:	7a13      	ldrb	r3, [r2, #8]
   185ee:	2b01      	cmp	r3, #1
   185f0:	d115      	bne.n	1861e <ticker_job+0x3ce>
				ticker->ticks_to_expire = ticks_elapsed;
   185f2:	f8c5 8008 	str.w	r8, [r5, #8]
				ticker->req = ticker->ack;
   185f6:	7069      	strb	r1, [r5, #1]
			ticks_to_expire_prep(ticker, instance->ticks_current,
   185f8:	9b07      	ldr	r3, [sp, #28]
   185fa:	6961      	ldr	r1, [r4, #20]
   185fc:	eb03 020a 	add.w	r2, r3, sl
   18600:	4628      	mov	r0, r5
   18602:	f013 f8d9 	bl	2b7b8 <ticks_to_expire_prep>
			ticker->next = *insert_head;
   18606:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18608:	990a      	ldr	r1, [sp, #40]	; 0x28
   1860a:	461a      	mov	r2, r3
   1860c:	9b03      	ldr	r3, [sp, #12]
   1860e:	5453      	strb	r3, [r2, r1]
			ticker->req++;
   18610:	786b      	ldrb	r3, [r5, #1]
   18612:	3301      	adds	r3, #1
   18614:	706b      	strb	r3, [r5, #1]
			ticker->req = ticker->ack;
   18616:	9703      	str	r7, [sp, #12]
   18618:	e665      	b.n	182e6 <ticker_job+0x96>
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
   1861a:	2a00      	cmp	r2, #0
   1861c:	d1e6      	bne.n	185ec <ticker_job+0x39c>
				if (!ticker->lazy_current) {
   1861e:	f8b5 e01e 	ldrh.w	lr, [r5, #30]
   18622:	f1be 0f00 	cmp.w	lr, #0
   18626:	d124      	bne.n	18672 <ticker_job+0x422>
					lazy_periodic = ticker->lazy_periodic;
   18628:	8bab      	ldrh	r3, [r5, #28]
				while (count--) {
   1862a:	4699      	mov	r9, r3
				ticks_to_expire = 0U;
   1862c:	2000      	movs	r0, #0
	ticker->remainder_current += ticker->remainder_periodic;
   1862e:	e9d5 1208 	ldrd	r1, r2, [r5, #32]
   18632:	440a      	add	r2, r1
	if ((ticker->remainder_current < BIT(31)) &&
   18634:	4927      	ldr	r1, [pc, #156]	; (186d4 <ticker_job+0x484>)
   18636:	4e28      	ldr	r6, [pc, #160]	; (186d8 <ticker_job+0x488>)
   18638:	1851      	adds	r1, r2, r1
   1863a:	42b1      	cmp	r1, r6
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   1863c:	bf9f      	itttt	ls
   1863e:	f1a2 72e8 	subls.w	r2, r2, #30408704	; 0x1d00000
   18642:	f5a2 32d4 	subls.w	r2, r2, #108544	; 0x1a800
   18646:	f5a2 72a5 	subls.w	r2, r2, #330	; 0x14a
   1864a:	626a      	strls	r2, [r5, #36]	; 0x24
		return 1;
   1864c:	bf92      	itee	ls
   1864e:	9a05      	ldrls	r2, [sp, #20]
	ticker->remainder_current += ticker->remainder_periodic;
   18650:	626a      	strhi	r2, [r5, #36]	; 0x24
	return 0;
   18652:	2200      	movhi	r2, #0
					ticks_to_expire +=
   18654:	4462      	add	r2, ip
				while (count--) {
   18656:	f119 39ff 	adds.w	r9, r9, #4294967295
					ticks_to_expire +=
   1865a:	4410      	add	r0, r2
				while (count--) {
   1865c:	d2e7      	bcs.n	1862e <ticker_job+0x3de>
				if (!ticker->must_expire) {
   1865e:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
   18662:	b32a      	cbz	r2, 186b0 <ticker_job+0x460>
				lazy = 0U;
   18664:	2200      	movs	r2, #0
				ticker->lazy_current += (lazy_periodic + lazy);
   18666:	4413      	add	r3, r2
   18668:	449e      	add	lr, r3
				ticker->ticks_to_expire = ticks_to_expire;
   1866a:	60a8      	str	r0, [r5, #8]
				ticker->lazy_current += (lazy_periodic + lazy);
   1866c:	f8a5 e01e 	strh.w	lr, [r5, #30]
   18670:	e7c2      	b.n	185f8 <ticker_job+0x3a8>
					ticker->req = ticker->ack;
   18672:	7069      	strb	r1, [r5, #1]
					lazy_periodic = 0U;
   18674:	2300      	movs	r3, #0
   18676:	e7d8      	b.n	1862a <ticker_job+0x3da>
	ticker->remainder_current += ticker->remainder_periodic;
   18678:	e9d5 1208 	ldrd	r1, r2, [r5, #32]
   1867c:	440a      	add	r2, r1
	if ((ticker->remainder_current < BIT(31)) &&
   1867e:	4915      	ldr	r1, [pc, #84]	; (186d4 <ticker_job+0x484>)
   18680:	4e15      	ldr	r6, [pc, #84]	; (186d8 <ticker_job+0x488>)
   18682:	1851      	adds	r1, r2, r1
   18684:	42b1      	cmp	r1, r6
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   18686:	bf9f      	itttt	ls
   18688:	f1a2 72e8 	subls.w	r2, r2, #30408704	; 0x1d00000
   1868c:	f5a2 32d4 	subls.w	r2, r2, #108544	; 0x1a800
   18690:	f5a2 72a5 	subls.w	r2, r2, #330	; 0x14a
   18694:	626a      	strls	r2, [r5, #36]	; 0x24
		return 1;
   18696:	bf92      	itee	ls
   18698:	9a05      	ldrls	r2, [sp, #20]
	ticker->remainder_current += ticker->remainder_periodic;
   1869a:	626a      	strhi	r2, [r5, #36]	; 0x24
	return 0;
   1869c:	2200      	movhi	r2, #0
						ticks_to_expire +=
   1869e:	4462      	add	r2, ip
   186a0:	4410      	add	r0, r2
						lazy++;
   186a2:	f109 0901 	add.w	r9, r9, #1
					while (ticks_to_expire <
   186a6:	4583      	cmp	fp, r0
   186a8:	fa1f f289 	uxth.w	r2, r9
   186ac:	d8e4      	bhi.n	18678 <ticker_job+0x428>
   186ae:	e7da      	b.n	18666 <ticker_job+0x416>
				if (!ticker->must_expire) {
   186b0:	4691      	mov	r9, r2
   186b2:	e7f8      	b.n	186a6 <ticker_job+0x456>
			if (state && ((state == 1U) || skip_collision) &&
   186b4:	b14b      	cbz	r3, 186ca <ticker_job+0x47a>
   186b6:	2b01      	cmp	r3, #1
   186b8:	d002      	beq.n	186c0 <ticker_job+0x470>
   186ba:	f1b9 0f00 	cmp.w	r9, #0
   186be:	d004      	beq.n	186ca <ticker_job+0x47a>
			    ticker->fp_op_func) {
   186c0:	6a2b      	ldr	r3, [r5, #32]
			if (state && ((state == 1U) || skip_collision) &&
   186c2:	b113      	cbz	r3, 186ca <ticker_job+0x47a>
				ticker->fp_op_func(TICKER_STATUS_FAILURE,
   186c4:	6a69      	ldr	r1, [r5, #36]	; 0x24
   186c6:	2001      	movs	r0, #1
   186c8:	4798      	blx	r3
			ticker->req = ticker->ack;
   186ca:	78ab      	ldrb	r3, [r5, #2]
   186cc:	706b      	strb	r3, [r5, #1]
   186ce:	9f03      	ldr	r7, [sp, #12]
   186d0:	e7a1      	b.n	18616 <ticker_job+0x3c6>
   186d2:	bf00      	nop
   186d4:	ff172b5a 	.word	0xff172b5a
   186d8:	7f172b59 	.word	0x7f172b59
   186dc:	fe2e56b6 	.word	0xfe2e56b6
			ticker = &nodes[ticker_id_head];
   186e0:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   186e4:	011b      	lsls	r3, r3, #4
   186e6:	18c5      	adds	r5, r0, r3
			ext_data = ticker->ext_data;
   186e8:	f810 e003 	ldrb.w	lr, [r0, r3]
   186ec:	6aaf      	ldr	r7, [r5, #40]	; 0x28
			if (ext_data && ext_data->reschedule_state ==
   186ee:	b11f      	cbz	r7, 186f8 <ticker_job+0x4a8>
   186f0:	7a3b      	ldrb	r3, [r7, #8]
   186f2:	2b01      	cmp	r3, #1
   186f4:	f000 817e 	beq.w	189f4 <ticker_job+0x7a4>
			ticker_id_head = ticker->next;
   186f8:	4676      	mov	r6, lr
		while (ticker_id_head != TICKER_NULL) {
   186fa:	2eff      	cmp	r6, #255	; 0xff
   186fc:	d1f0      	bne.n	186e0 <ticker_job+0x490>
			flag_compare_update = 1U;
   186fe:	9a02      	ldr	r2, [sp, #8]
   18700:	9b04      	ldr	r3, [sp, #16]
   18702:	2b00      	cmp	r3, #0
   18704:	bf08      	it	eq
   18706:	4613      	moveq	r3, r2
   18708:	9302      	str	r3, [sp, #8]
   1870a:	e07d      	b.n	18808 <ticker_job+0x5b8>
			instance->ticks_slot_previous > ticks_elapsed) {
   1870c:	69a1      	ldr	r1, [r4, #24]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   1870e:	9b01      	ldr	r3, [sp, #4]
   18710:	428b      	cmp	r3, r1
   18712:	f080 8173 	bcs.w	189fc <ticker_job+0x7ac>
			window_start_ticks = instance->ticks_slot_previous -
   18716:	1acb      	subs	r3, r1, r3
		window_start_ticks = 0U;
   18718:	9303      	str	r3, [sp, #12]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   1871a:	e9d7 2300 	ldrd	r2, r3, [r7]
   1871e:	4293      	cmp	r3, r2
   18720:	d254      	bcs.n	187cc <ticker_job+0x57c>
			ticks_slot_window = ext_data->ticks_slot_window -
   18722:	f04f 0c00 	mov.w	ip, #0
   18726:	eba2 0b03 	sub.w	fp, r2, r3
		ticker_id_iter = nodes[ticker_id_head].next;
   1872a:	4672      	mov	r2, lr
			ticks_slot_window = ext_data->ticks_slot_window -
   1872c:	4663      	mov	r3, ip
		while (ticker_id_iter != TICKER_NULL &&
   1872e:	2aff      	cmp	r2, #255	; 0xff
   18730:	d006      	beq.n	18740 <ticker_job+0x4f0>
		       ticks_start_offset + ticker->ticks_slot <=
   18732:	f8d5 8018 	ldr.w	r8, [r5, #24]
   18736:	eb0c 0108 	add.w	r1, ip, r8
		while (ticker_id_iter != TICKER_NULL &&
   1873a:	458b      	cmp	fp, r1
		       ticks_start_offset + ticker->ticks_slot <=
   1873c:	9104      	str	r1, [sp, #16]
		while (ticker_id_iter != TICKER_NULL &&
   1873e:	d217      	bcs.n	18770 <ticker_job+0x520>
		ticker->ticks_to_expire = ticks_to_expire;
   18740:	60ab      	str	r3, [r5, #8]
		ticker_id_iter = nodes[ticker_id_head].next;
   18742:	4672      	mov	r2, lr
		ticker_id_prev = TICKER_NULL;
   18744:	23ff      	movs	r3, #255	; 0xff
		while (ticker_id_iter != TICKER_NULL) {
   18746:	2aff      	cmp	r2, #255	; 0xff
   18748:	d046      	beq.n	187d8 <ticker_job+0x588>
			node = &nodes[ticker_id_iter];
   1874a:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   1874e:	ea4f 1808 	mov.w	r8, r8, lsl #4
   18752:	eb00 0908 	add.w	r9, r0, r8
			if (ticker->ticks_to_expire > node->ticks_to_expire) {
   18756:	f8d5 c008 	ldr.w	ip, [r5, #8]
   1875a:	f8d9 1008 	ldr.w	r1, [r9, #8]
   1875e:	458c      	cmp	ip, r1
   18760:	d936      	bls.n	187d0 <ticker_job+0x580>
				ticker->ticks_to_expire -=
   18762:	ebac 0101 	sub.w	r1, ip, r1
   18766:	60a9      	str	r1, [r5, #8]
			ticker_id_iter = node->next;
   18768:	4613      	mov	r3, r2
   1876a:	f810 2008 	ldrb.w	r2, [r0, r8]
   1876e:	e7ea      	b.n	18746 <ticker_job+0x4f6>
			node = &nodes[ticker_id_iter];
   18770:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   18774:	0112      	lsls	r2, r2, #4
   18776:	eb00 0a02 	add.w	sl, r0, r2
			if (node->ext_data &&
   1877a:	f8da 9028 	ldr.w	r9, [sl, #40]	; 0x28
   1877e:	f1b9 0f00 	cmp.w	r9, #0
   18782:	d006      	beq.n	18792 <ticker_job+0x542>
   18784:	f899 9008 	ldrb.w	r9, [r9, #8]
   18788:	f1b9 0f01 	cmp.w	r9, #1
   1878c:	d101      	bne.n	18792 <ticker_job+0x542>
			ticker_id_iter = node->next;
   1878e:	5c82      	ldrb	r2, [r0, r2]
   18790:	e7cd      	b.n	1872e <ticker_job+0x4de>
			if (node->ticks_to_expire >
   18792:	f8da 9008 	ldr.w	r9, [sl, #8]
   18796:	f1b9 0f04 	cmp.w	r9, #4
   1879a:	d90e      	bls.n	187ba <ticker_job+0x56a>
					MIN(ticks_slot_window,
   1879c:	f1ac 0304 	sub.w	r3, ip, #4
   187a0:	444b      	add	r3, r9
				window_end_ticks =
   187a2:	455b      	cmp	r3, fp
			if (window_end_ticks > ticks_start_offset +
   187a4:	9904      	ldr	r1, [sp, #16]
				window_end_ticks =
   187a6:	bf28      	it	cs
   187a8:	465b      	movcs	r3, fp
			if (window_end_ticks > ticks_start_offset +
   187aa:	428b      	cmp	r3, r1
   187ac:	d905      	bls.n	187ba <ticker_job+0x56a>
			if (ticks_to_expire != 0U &&
   187ae:	ebb3 0308 	subs.w	r3, r3, r8
   187b2:	d002      	beq.n	187ba <ticker_job+0x56a>
   187b4:	9903      	ldr	r1, [sp, #12]
   187b6:	428b      	cmp	r3, r1
   187b8:	d2c2      	bcs.n	18740 <ticker_job+0x4f0>
			window_start_ticks  = node->ticks_to_expire +
   187ba:	f8da 1018 	ldr.w	r1, [sl, #24]
   187be:	eb01 0309 	add.w	r3, r1, r9
   187c2:	9303      	str	r3, [sp, #12]
			ticks_start_offset += node->ticks_to_expire;
   187c4:	44cc      	add	ip, r9
			ticks_to_expire     = ticks_slot_window -
   187c6:	ebab 0308 	sub.w	r3, fp, r8
   187ca:	e7e0      	b.n	1878e <ticker_job+0x53e>
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   187cc:	2300      	movs	r3, #0
   187ce:	e7b7      	b.n	18740 <ticker_job+0x4f0>
				node->ticks_to_expire -=
   187d0:	eba1 010c 	sub.w	r1, r1, ip
   187d4:	f8c9 1008 	str.w	r1, [r9, #8]
		if (ticker_id_prev != TICKER_NULL) {
   187d8:	2bff      	cmp	r3, #255	; 0xff
   187da:	d008      	beq.n	187ee <ticker_job+0x59e>
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   187dc:	b21b      	sxth	r3, r3
   187de:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   187e2:	011b      	lsls	r3, r3, #4
			instance->ticker_id_head = nodes[ticker_id_head].next;
   187e4:	f884 e01d 	strb.w	lr, [r4, #29]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   187e8:	5cc2      	ldrb	r2, [r0, r3]
   187ea:	702a      	strb	r2, [r5, #0]
			nodes[ticker_id_prev].next = ticker_id_head;
   187ec:	54c6      	strb	r6, [r0, r3]
		ticker->lazy_current--;
   187ee:	8beb      	ldrh	r3, [r5, #30]
   187f0:	3b01      	subs	r3, #1
   187f2:	83eb      	strh	r3, [r5, #30]
		ext_data->reschedule_state =
   187f4:	f04f 0302 	mov.w	r3, #2
   187f8:	723b      	strb	r3, [r7, #8]
		rescheduled  = 1U;
   187fa:	2301      	movs	r3, #1
   187fc:	9304      	str	r3, [sp, #16]
   187fe:	e590      	b.n	18322 <ticker_job+0xd2>
		ticker_job_list_insert(instance, insert_head);
   18800:	9903      	ldr	r1, [sp, #12]
   18802:	4620      	mov	r0, r4
   18804:	f013 f800 	bl	2b808 <ticker_job_list_insert>
	if (instance->ticker_id_head != ticker_id_old_head) {
   18808:	7f63      	ldrb	r3, [r4, #29]
		flag_compare_update = 1U;
   1880a:	9a02      	ldr	r2, [sp, #8]
   1880c:	9906      	ldr	r1, [sp, #24]
   1880e:	428b      	cmp	r3, r1
   18810:	bf18      	it	ne
   18812:	2201      	movne	r2, #1
	if (!pending) {
   18814:	9b08      	ldr	r3, [sp, #32]
		flag_compare_update = 1U;
   18816:	9202      	str	r2, [sp, #8]
	if (!pending) {
   18818:	b1e3      	cbz	r3, 18854 <ticker_job+0x604>
	instance->job_guard = 0U;
   1881a:	2300      	movs	r3, #0
   1881c:	77a3      	strb	r3, [r4, #30]
	if (flag_compare_update) {
   1881e:	9b02      	ldr	r3, [sp, #8]
   18820:	b153      	cbz	r3, 18838 <ticker_job+0x5e8>
	if (instance->ticker_id_head == TICKER_NULL) {
   18822:	7f63      	ldrb	r3, [r4, #29]
   18824:	2bff      	cmp	r3, #255	; 0xff
   18826:	f040 8082 	bne.w	1892e <ticker_job+0x6de>
		if (cntr_stop() == 0) {
   1882a:	f005 fcd1 	bl	1e1d0 <cntr_stop>
   1882e:	b918      	cbnz	r0, 18838 <ticker_job+0x5e8>
			instance->ticks_slot_previous = 0U;
   18830:	61a0      	str	r0, [r4, #24]
			instance->ticks_current = cntr_cnt_get();
   18832:	f005 fcef 	bl	1e214 <cntr_cnt_get>
   18836:	6160      	str	r0, [r4, #20]
	if (instance->worker_trigger) {
   18838:	7fe3      	ldrb	r3, [r4, #31]
   1883a:	2b00      	cmp	r3, #0
   1883c:	f000 80e0 	beq.w	18a00 <ticker_job+0x7b0>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   18840:	6a65      	ldr	r5, [r4, #36]	; 0x24
   18842:	4623      	mov	r3, r4
   18844:	2201      	movs	r2, #1
   18846:	2103      	movs	r1, #3
   18848:	2004      	movs	r0, #4
   1884a:	46ac      	mov	ip, r5
}
   1884c:	b00f      	add	sp, #60	; 0x3c
   1884e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   18852:	4760      	bx	ip
	users = &instance->users[0];
   18854:	6863      	ldr	r3, [r4, #4]
   18856:	9303      	str	r3, [sp, #12]
	count_user = instance->count_user;
   18858:	7a65      	ldrb	r5, [r4, #9]
		uop->status = TICKER_STATUS_SUCCESS;
   1885a:	9b08      	ldr	r3, [sp, #32]
   1885c:	9301      	str	r3, [sp, #4]
	while (count_user--) {
   1885e:	3d01      	subs	r5, #1
   18860:	b2ed      	uxtb	r5, r5
   18862:	2dff      	cmp	r5, #255	; 0xff
   18864:	d0d9      	beq.n	1881a <ticker_job+0x5ca>
		user = &users[count_user];
   18866:	9b03      	ldr	r3, [sp, #12]
   18868:	eb03 06c5 	add.w	r6, r3, r5, lsl #3
		user_op = &user->user_op[0];
   1886c:	f8d6 8004 	ldr.w	r8, [r6, #4]
		while (user->first != user->last) {
   18870:	7873      	ldrb	r3, [r6, #1]
   18872:	78f2      	ldrb	r2, [r6, #3]
   18874:	429a      	cmp	r2, r3
   18876:	d0f2      	beq.n	1885e <ticker_job+0x60e>
			ticker_job_op_inquire(instance, &user_op[user->first]);
   18878:	2234      	movs	r2, #52	; 0x34
   1887a:	fb13 f202 	smulbb	r2, r3, r2
   1887e:	eb08 0302 	add.w	r3, r8, r2
	switch (uop->op) {
   18882:	f818 2002 	ldrb.w	r2, [r8, r2]
   18886:	2a02      	cmp	r2, #2
   18888:	d013      	beq.n	188b2 <ticker_job+0x662>
   1888a:	2a03      	cmp	r2, #3
   1888c:	d040      	beq.n	18910 <ticker_job+0x6c0>
   1888e:	2a01      	cmp	r2, #1
   18890:	d106      	bne.n	188a0 <ticker_job+0x650>
			uop->status = TICKER_STATUS_SUCCESS;
   18892:	9a01      	ldr	r2, [sp, #4]
			uop->status = TICKER_STATUS_FAILURE;
   18894:	629a      	str	r2, [r3, #40]	; 0x28
		fp_op_func = uop->fp_op_func;
   18896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	if (fp_op_func) {
   18898:	b112      	cbz	r2, 188a0 <ticker_job+0x650>
		fp_op_func(uop->status, uop->op_context);
   1889a:	6b19      	ldr	r1, [r3, #48]	; 0x30
   1889c:	6a98      	ldr	r0, [r3, #40]	; 0x28
   1889e:	4790      	blx	r2
			first = user->first + 1;
   188a0:	7873      	ldrb	r3, [r6, #1]
			if (first == user->count_user_op) {
   188a2:	7832      	ldrb	r2, [r6, #0]
			first = user->first + 1;
   188a4:	3301      	adds	r3, #1
   188a6:	b2db      	uxtb	r3, r3
				first = 0U;
   188a8:	429a      	cmp	r2, r3
   188aa:	bf08      	it	eq
   188ac:	2300      	moveq	r3, #0
			user->first = first;
   188ae:	7073      	strb	r3, [r6, #1]
   188b0:	e7de      	b.n	18870 <ticker_job+0x620>
		ticker_by_next_slot_get(instance,
   188b2:	e9d3 9001 	ldrd	r9, r0, [r3, #4]
	_ticker_id_head = *ticker_id_head;
   188b6:	f899 2000 	ldrb.w	r2, [r9]
		ticker_by_next_slot_get(instance,
   188ba:	f8d3 e00c 	ldr.w	lr, [r3, #12]
	node = instance->nodes;
   188be:	f8d4 c000 	ldr.w	ip, [r4]
	if ((_ticker_id_head == TICKER_NULL) ||
   188c2:	6961      	ldr	r1, [r4, #20]
   188c4:	2aff      	cmp	r2, #255	; 0xff
   188c6:	d002      	beq.n	188ce <ticker_job+0x67e>
   188c8:	6807      	ldr	r7, [r0, #0]
   188ca:	428f      	cmp	r7, r1
   188cc:	d015      	beq.n	188fa <ticker_job+0x6aa>
		_ticker_id_head = instance->ticker_id_head;
   188ce:	7f62      	ldrb	r2, [r4, #29]
		*ticks_current = instance->ticks_current;
   188d0:	6001      	str	r1, [r0, #0]
		_ticks_to_expire = 0U;
   188d2:	2100      	movs	r1, #0
	while ((_ticker_id_head != TICKER_NULL) &&
   188d4:	2aff      	cmp	r2, #255	; 0xff
   188d6:	d00b      	beq.n	188f0 <ticker_job+0x6a0>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0U)) {
   188d8:	eb02 0a42 	add.w	sl, r2, r2, lsl #1
   188dc:	ea4f 1a0a 	mov.w	sl, sl, lsl #4
   188e0:	eb0c 0b0a 	add.w	fp, ip, sl
   188e4:	f8db 0008 	ldr.w	r0, [fp, #8]
   188e8:	4401      	add	r1, r0
	while ((_ticker_id_head != TICKER_NULL) &&
   188ea:	f8db 0018 	ldr.w	r0, [fp, #24]
   188ee:	b160      	cbz	r0, 1890a <ticker_job+0x6ba>
	*ticker_id_head = _ticker_id_head;
   188f0:	f889 2000 	strb.w	r2, [r9]
	*ticks_to_expire = _ticks_to_expire;
   188f4:	f8ce 1000 	str.w	r1, [lr]
		uop->status = TICKER_STATUS_SUCCESS;
   188f8:	e7cb      	b.n	18892 <ticker_job+0x642>
		ticker = &node[_ticker_id_head];
   188fa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   188fe:	0112      	lsls	r2, r2, #4
	_ticks_to_expire = *ticks_to_expire;
   18900:	f8de 1000 	ldr.w	r1, [lr]
		_ticker_id_head = ticker->next;
   18904:	f81c 2002 	ldrb.w	r2, [ip, r2]
   18908:	e7e4      	b.n	188d4 <ticker_job+0x684>
		_ticker_id_head = ticker->next;
   1890a:	f81c 200a 	ldrb.w	r2, [ip, sl]
   1890e:	e7e1      	b.n	188d4 <ticker_job+0x684>
		if (uop->id < instance->count_node) {
   18910:	785a      	ldrb	r2, [r3, #1]
   18912:	7a21      	ldrb	r1, [r4, #8]
   18914:	4291      	cmp	r1, r2
   18916:	d908      	bls.n	1892a <ticker_job+0x6da>
			node[uop->id].priority =
   18918:	6821      	ldr	r1, [r4, #0]
   1891a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1891e:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   18922:	7919      	ldrb	r1, [r3, #4]
   18924:	f882 102d 	strb.w	r1, [r2, #45]	; 0x2d
   18928:	e7b3      	b.n	18892 <ticker_job+0x642>
			uop->status = TICKER_STATUS_FAILURE;
   1892a:	2201      	movs	r2, #1
   1892c:	e7b2      	b.n	18894 <ticker_job+0x644>
	if (ticker_id_old_head == TICKER_NULL) {
   1892e:	9b06      	ldr	r3, [sp, #24]
   18930:	2bff      	cmp	r3, #255	; 0xff
   18932:	d106      	bne.n	18942 <ticker_job+0x6f2>
		ticks_current = cntr_cnt_get();
   18934:	f005 fc6e 	bl	1e214 <cntr_cnt_get>
   18938:	4605      	mov	r5, r0
		if (cntr_start() == 0) {
   1893a:	f005 fc3b 	bl	1e1b4 <cntr_start>
   1893e:	b900      	cbnz	r0, 18942 <ticker_job+0x6f2>
			instance->ticks_current = ticks_current;
   18940:	6165      	str	r5, [r4, #20]
	ticker = &instance->nodes[instance->ticker_id_head];
   18942:	7f63      	ldrb	r3, [r4, #29]
	ticks_to_expire = ticker->ticks_to_expire;
   18944:	6822      	ldr	r2, [r4, #0]
		LL_ASSERT(i);
   18946:	4f30      	ldr	r7, [pc, #192]	; (18a08 <ticker_job+0x7b8>)
   18948:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 18a0c <ticker_job+0x7bc>
	ticker = &instance->nodes[instance->ticker_id_head];
   1894c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	ticks_to_expire = ticker->ticks_to_expire;
   18950:	eb02 1303 	add.w	r3, r2, r3, lsl #4
	i = 10U;
   18954:	f04f 090a 	mov.w	r9, #10
	ticks_to_expire = ticker->ticks_to_expire;
   18958:	689e      	ldr	r6, [r3, #8]
		ctr = cntr_cnt_get();
   1895a:	f005 fc5b 	bl	1e214 <cntr_cnt_get>
		cc = instance->ticks_current;
   1895e:	6965      	ldr	r5, [r4, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   18960:	1b43      	subs	r3, r0, r5
   18962:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
   18966:	3303      	adds	r3, #3
		cc += MAX(ticks_elapsed, ticks_to_expire);
   18968:	42b3      	cmp	r3, r6
   1896a:	bf2c      	ite	cs
   1896c:	18ed      	addcs	r5, r5, r3
   1896e:	19ad      	addcc	r5, r5, r6
		cc &= HAL_TICKER_CNTR_MASK;
   18970:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
		ctr = cntr_cnt_get();
   18974:	4682      	mov	sl, r0
		instance->trigger_set_cb(cc);
   18976:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   18978:	4628      	mov	r0, r5
   1897a:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
   1897c:	f005 fc4a 	bl	1e214 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   18980:	eba0 000a 	sub.w	r0, r0, sl
   18984:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   18988:	eba5 050a 	sub.w	r5, r5, sl
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
   1898c:	3003      	adds	r0, #3
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1898e:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
		  ticker_ticks_diff_get(cc, ctr));
   18992:	42a8      	cmp	r0, r5
		i--;
   18994:	f109 39ff 	add.w	r9, r9, #4294967295
		  ticker_ticks_diff_get(cc, ctr));
   18998:	f67f af4e 	bls.w	18838 <ticker_job+0x5e8>
		LL_ASSERT(i);
   1899c:	f1b9 0f00 	cmp.w	r9, #0
   189a0:	d1db      	bne.n	1895a <ticker_job+0x70a>
   189a2:	f640 02ba 	movw	r2, #2234	; 0x8ba
   189a6:	4639      	mov	r1, r7
   189a8:	4640      	mov	r0, r8
   189aa:	f00e fae0 	bl	26f6e <printk>
   189ae:	4040      	eors	r0, r0
   189b0:	f380 8811 	msr	BASEPRI, r0
   189b4:	f04f 0003 	mov.w	r0, #3
   189b8:	df02      	svc	2
   189ba:	e7ce      	b.n	1895a <ticker_job+0x70a>
	if (previous == current) {
   189bc:	9b02      	ldr	r3, [sp, #8]
   189be:	4299      	cmp	r1, r3
   189c0:	d101      	bne.n	189c6 <ticker_job+0x776>
		instance->ticker_id_head = ticker_current->next;
   189c2:	f884 901d 	strb.w	r9, [r4, #29]
	node[previous].next = ticker_current->next;
   189c6:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
   189ca:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   189ce:	0112      	lsls	r2, r2, #4
   189d0:	f80e 9002 	strb.w	r9, [lr, r2]
	if (ticker_current->next != TICKER_NULL) {
   189d4:	f89a 3000 	ldrb.w	r3, [sl]
   189d8:	2bff      	cmp	r3, #255	; 0xff
   189da:	f43f acf5 	beq.w	183c8 <ticker_job+0x178>
		node[ticker_current->next].ticks_to_expire += timeout;
   189de:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   189e2:	eb0e 1e03 	add.w	lr, lr, r3, lsl #4
   189e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   189e8:	f8de 2008 	ldr.w	r2, [lr, #8]
   189ec:	441a      	add	r2, r3
   189ee:	f8ce 2008 	str.w	r2, [lr, #8]
	return (total + timeout);
   189f2:	e4e9      	b.n	183c8 <ticker_job+0x178>
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   189f4:	7f23      	ldrb	r3, [r4, #28]
   189f6:	2bff      	cmp	r3, #255	; 0xff
   189f8:	f47f ae88 	bne.w	1870c <ticker_job+0x4bc>
		window_start_ticks = 0U;
   189fc:	2300      	movs	r3, #0
   189fe:	e68b      	b.n	18718 <ticker_job+0x4c8>
}
   18a00:	b00f      	add	sp, #60	; 0x3c
   18a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18a06:	bf00      	nop
   18a08:	00034cc0 	.word	0x00034cc0
   18a0c:	0002fa94 	.word	0x0002fa94

00018a10 <ticker_init>:
{
   18a10:	b5f0      	push	{r4, r5, r6, r7, lr}
   18a12:	4694      	mov	ip, r2
   18a14:	9f05      	ldr	r7, [sp, #20]
   18a16:	f89d 6018 	ldrb.w	r6, [sp, #24]
   18a1a:	9a07      	ldr	r2, [sp, #28]
	if (instance_index >= TICKER_INSTANCE_MAX) {
   18a1c:	b108      	cbz	r0, 18a22 <ticker_init+0x12>
		return TICKER_STATUS_FAILURE;
   18a1e:	2001      	movs	r0, #1
}
   18a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
	instance->count_node = count_node;
   18a22:	4c18      	ldr	r4, [pc, #96]	; (18a84 <ticker_init+0x74>)
   18a24:	7221      	strb	r1, [r4, #8]
	instance->nodes = node;
   18a26:	f8c4 c000 	str.w	ip, [r4]
	while (count_node--) {
   18a2a:	3901      	subs	r1, #1
   18a2c:	b2c9      	uxtb	r1, r1
   18a2e:	29ff      	cmp	r1, #255	; 0xff
   18a30:	d116      	bne.n	18a60 <ticker_init+0x50>
	instance->count_user = count_user;
   18a32:	7263      	strb	r3, [r4, #9]
	instance->users = user;
   18a34:	6067      	str	r7, [r4, #4]
		user_op_ += users[count_user].count_user_op;
   18a36:	2534      	movs	r5, #52	; 0x34
	while (count_user--) {
   18a38:	3b01      	subs	r3, #1
   18a3a:	b2db      	uxtb	r3, r3
   18a3c:	2bff      	cmp	r3, #255	; 0xff
   18a3e:	d116      	bne.n	18a6e <ticker_init+0x5e>
	if (count_op) {
   18a40:	2e00      	cmp	r6, #0
   18a42:	d1ec      	bne.n	18a1e <ticker_init+0xe>
	instance->caller_id_get_cb = caller_id_get_cb;
   18a44:	9b08      	ldr	r3, [sp, #32]
   18a46:	6223      	str	r3, [r4, #32]
	instance->sched_cb = sched_cb;
   18a48:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18a4a:	6263      	str	r3, [r4, #36]	; 0x24
	instance->trigger_set_cb = trigger_set_cb;
   18a4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   18a4e:	62a3      	str	r3, [r4, #40]	; 0x28
	instance->ticker_id_slot_previous = TICKER_NULL;
   18a50:	f64f 73ff 	movw	r3, #65535	; 0xffff
	instance->ticks_slot_previous = 0U;
   18a54:	e9c4 6605 	strd	r6, r6, [r4, #20]
	instance->ticker_id_slot_previous = TICKER_NULL;
   18a58:	83a3      	strh	r3, [r4, #28]
	instance->ticks_elapsed_first = 0U;
   18a5a:	8166      	strh	r6, [r4, #10]
	return TICKER_STATUS_SUCCESS;
   18a5c:	4630      	mov	r0, r6
   18a5e:	e7df      	b.n	18a20 <ticker_init+0x10>
		instance->nodes[count_node].priority = 0;
   18a60:	eb01 0541 	add.w	r5, r1, r1, lsl #1
   18a64:	eb0c 1505 	add.w	r5, ip, r5, lsl #4
   18a68:	f885 002d 	strb.w	r0, [r5, #45]	; 0x2d
   18a6c:	e7dd      	b.n	18a2a <ticker_init+0x1a>
		users[count_user].user_op = user_op_;
   18a6e:	b219      	sxth	r1, r3
   18a70:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
   18a74:	6042      	str	r2, [r0, #4]
		user_op_ += users[count_user].count_user_op;
   18a76:	f817 0031 	ldrb.w	r0, [r7, r1, lsl #3]
   18a7a:	fb00 2205 	mla	r2, r0, r5, r2
		count_op -= users[count_user].count_user_op;
   18a7e:	1a30      	subs	r0, r6, r0
   18a80:	b2c6      	uxtb	r6, r0
   18a82:	e7d9      	b.n	18a38 <ticker_init+0x28>
   18a84:	200032d8 	.word	0x200032d8

00018a88 <ticker_is_initialized>:
	return !!(_instance[instance_index].count_node);
   18a88:	4a04      	ldr	r2, [pc, #16]	; (18a9c <ticker_is_initialized+0x14>)
   18a8a:	232c      	movs	r3, #44	; 0x2c
   18a8c:	fb03 2000 	mla	r0, r3, r0, r2
   18a90:	7a00      	ldrb	r0, [r0, #8]
}
   18a92:	3000      	adds	r0, #0
   18a94:	bf18      	it	ne
   18a96:	2001      	movne	r0, #1
   18a98:	4770      	bx	lr
   18a9a:	bf00      	nop
   18a9c:	200032d8 	.word	0x200032d8

00018aa0 <ticker_trigger>:
	if (instance->sched_cb) {
   18aa0:	4a07      	ldr	r2, [pc, #28]	; (18ac0 <ticker_trigger+0x20>)
   18aa2:	232c      	movs	r3, #44	; 0x2c
   18aa4:	fb03 2100 	mla	r1, r3, r0, r2
{
   18aa8:	b410      	push	{r4}
	if (instance->sched_cb) {
   18aaa:	6a4c      	ldr	r4, [r1, #36]	; 0x24
   18aac:	b134      	cbz	r4, 18abc <ticker_trigger+0x1c>
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   18aae:	460b      	mov	r3, r1
   18ab0:	46a4      	mov	ip, r4
   18ab2:	2201      	movs	r2, #1
   18ab4:	2103      	movs	r1, #3
   18ab6:	2002      	movs	r0, #2
}
   18ab8:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   18aba:	4760      	bx	ip
}
   18abc:	bc10      	pop	{r4}
   18abe:	4770      	bx	lr
   18ac0:	200032d8 	.word	0x200032d8

00018ac4 <ticker_start_ext>:
{
   18ac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   18ac8:	4c23      	ldr	r4, [pc, #140]	; (18b58 <ticker_start_ext+0x94>)
   18aca:	262c      	movs	r6, #44	; 0x2c
   18acc:	fb00 4906 	mla	r9, r0, r6, r4
	user = &instance->users[user_id];
   18ad0:	b20c      	sxth	r4, r1
   18ad2:	f8d9 0004 	ldr.w	r0, [r9, #4]
   18ad6:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
	if (last >= user->count_user_op) {
   18ada:	f810 0034 	ldrb.w	r0, [r0, r4, lsl #3]
	last = user->last + 1;
   18ade:	f89c 7003 	ldrb.w	r7, [ip, #3]
   18ae2:	1c7d      	adds	r5, r7, #1
   18ae4:	b2ed      	uxtb	r5, r5
		last = 0U;
   18ae6:	42a8      	cmp	r0, r5
   18ae8:	bf98      	it	ls
   18aea:	2500      	movls	r5, #0
	if (last == user->first) {
   18aec:	f89c 0001 	ldrb.w	r0, [ip, #1]
   18af0:	42a8      	cmp	r0, r5
   18af2:	d02f      	beq.n	18b54 <ticker_start_ext+0x90>
	user_op = &user->user_op[user->last];
   18af4:	2034      	movs	r0, #52	; 0x34
   18af6:	fb17 f700 	smulbb	r7, r7, r0
   18afa:	f8dc 0004 	ldr.w	r0, [ip, #4]
   18afe:	19c4      	adds	r4, r0, r7
	user_op->op = TICKER_USER_OP_TYPE_START;
   18b00:	f04f 0804 	mov.w	r8, #4
   18b04:	f800 8007 	strb.w	r8, [r0, r7]
	user_op->params.start.ticks_at_start = ticks_anchor;
   18b08:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
   18b0a:	9b08      	ldr	r3, [sp, #32]
   18b0c:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
   18b0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18b10:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
   18b12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   18b14:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
   18b16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   18b18:	61a3      	str	r3, [r4, #24]
	user_op->params.start.lazy = lazy;
   18b1a:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   18b1e:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.ext_data = ext_data;
   18b20:	9b11      	ldr	r3, [sp, #68]	; 0x44
   18b22:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->params.start.fp_timeout_func = fp_timeout_func;
   18b24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18b26:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
   18b28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   18b2a:	6223      	str	r3, [r4, #32]
	user_op->status = TICKER_STATUS_BUSY;
   18b2c:	2302      	movs	r3, #2
   18b2e:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->fp_op_func = fp_op_func;
   18b30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   18b32:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
   18b34:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
   18b36:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
   18b38:	6323      	str	r3, [r4, #48]	; 0x30
	user->last = last;
   18b3a:	f88c 5003 	strb.w	r5, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   18b3e:	e9d9 3508 	ldrd	r3, r5, [r9, #32]
   18b42:	4608      	mov	r0, r1
   18b44:	4798      	blx	r3
   18b46:	464b      	mov	r3, r9
   18b48:	2200      	movs	r2, #0
   18b4a:	4641      	mov	r1, r8
   18b4c:	47a8      	blx	r5
	return user_op->status;
   18b4e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   18b50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
   18b54:	2001      	movs	r0, #1
   18b56:	e7fb      	b.n	18b50 <ticker_start_ext+0x8c>
   18b58:	200032d8 	.word	0x200032d8

00018b5c <ticker_update_ext>:
{
   18b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   18b60:	4c22      	ldr	r4, [pc, #136]	; (18bec <ticker_update_ext+0x90>)
   18b62:	262c      	movs	r6, #44	; 0x2c
   18b64:	fb00 4806 	mla	r8, r0, r6, r4
	user = &instance->users[user_id];
   18b68:	b20c      	sxth	r4, r1
   18b6a:	f8d8 0004 	ldr.w	r0, [r8, #4]
   18b6e:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
	if (last >= user->count_user_op) {
   18b72:	f810 0034 	ldrb.w	r0, [r0, r4, lsl #3]
	last = user->last + 1;
   18b76:	f89c 7003 	ldrb.w	r7, [ip, #3]
   18b7a:	1c7d      	adds	r5, r7, #1
   18b7c:	b2ed      	uxtb	r5, r5
		last = 0U;
   18b7e:	42a8      	cmp	r0, r5
   18b80:	bf98      	it	ls
   18b82:	2500      	movls	r5, #0
	if (last == user->first) {
   18b84:	f89c 0001 	ldrb.w	r0, [ip, #1]
   18b88:	42a8      	cmp	r0, r5
   18b8a:	d02d      	beq.n	18be8 <ticker_update_ext+0x8c>
	user_op = &user->user_op[user->last];
   18b8c:	2034      	movs	r0, #52	; 0x34
   18b8e:	fb17 f700 	smulbb	r7, r7, r0
   18b92:	f8dc 0004 	ldr.w	r0, [ip, #4]
   18b96:	19c4      	adds	r4, r0, r7
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
   18b98:	f04f 0e05 	mov.w	lr, #5
   18b9c:	f800 e007 	strb.w	lr, [r0, r7]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
   18ba0:	6063      	str	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
   18ba2:	9b06      	ldr	r3, [sp, #24]
   18ba4:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
   18ba6:	9b07      	ldr	r3, [sp, #28]
   18ba8:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
   18baa:	9b08      	ldr	r3, [sp, #32]
   18bac:	6123      	str	r3, [r4, #16]
	user_op->params.update.lazy = lazy;
   18bae:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   18bb2:	82a3      	strh	r3, [r4, #20]
	user_op->params.update.force = force;
   18bb4:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   18bb8:	75a3      	strb	r3, [r4, #22]
	user_op->params.update.must_expire = must_expire;
   18bba:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
   18bbe:	75e3      	strb	r3, [r4, #23]
	user_op->status = TICKER_STATUS_BUSY;
   18bc0:	2302      	movs	r3, #2
   18bc2:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->fp_op_func = fp_op_func;
   18bc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   18bc6:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
   18bc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	user_op->id = ticker_id;
   18bca:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
   18bcc:	6323      	str	r3, [r4, #48]	; 0x30
	user->last = last;
   18bce:	f88c 5003 	strb.w	r5, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   18bd2:	e9d8 3508 	ldrd	r3, r5, [r8, #32]
   18bd6:	4608      	mov	r0, r1
   18bd8:	4798      	blx	r3
   18bda:	4643      	mov	r3, r8
   18bdc:	2200      	movs	r2, #0
   18bde:	2104      	movs	r1, #4
   18be0:	47a8      	blx	r5
	return user_op->status;
   18be2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   18be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   18be8:	2001      	movs	r0, #1
   18bea:	e7fb      	b.n	18be4 <ticker_update_ext+0x88>
   18bec:	200032d8 	.word	0x200032d8

00018bf0 <ticker_stop>:
{
   18bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   18bf4:	4c1a      	ldr	r4, [pc, #104]	; (18c60 <ticker_stop+0x70>)
   18bf6:	252c      	movs	r5, #44	; 0x2c
   18bf8:	fb00 4805 	mla	r8, r0, r5, r4
	user = &instance->users[user_id];
   18bfc:	b20e      	sxth	r6, r1
   18bfe:	f8d8 0004 	ldr.w	r0, [r8, #4]
   18c02:	eb00 0cc6 	add.w	ip, r0, r6, lsl #3
	if (last >= user->count_user_op) {
   18c06:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
   18c0a:	f89c 7003 	ldrb.w	r7, [ip, #3]
   18c0e:	1c7c      	adds	r4, r7, #1
   18c10:	b2e4      	uxtb	r4, r4
		last = 0U;
   18c12:	42a0      	cmp	r0, r4
   18c14:	bf98      	it	ls
   18c16:	2400      	movls	r4, #0
	if (last == user->first) {
   18c18:	f89c 0001 	ldrb.w	r0, [ip, #1]
   18c1c:	42a0      	cmp	r0, r4
   18c1e:	d01c      	beq.n	18c5a <ticker_stop+0x6a>
	user_op = &user->user_op[user->last];
   18c20:	2034      	movs	r0, #52	; 0x34
   18c22:	fb17 f700 	smulbb	r7, r7, r0
   18c26:	f8dc 0004 	ldr.w	r0, [ip, #4]
   18c2a:	19c6      	adds	r6, r0, r7
	user_op->op = TICKER_USER_OP_TYPE_STOP;
   18c2c:	f04f 0e06 	mov.w	lr, #6
   18c30:	f800 e007 	strb.w	lr, [r0, r7]
	user_op->id = ticker_id;
   18c34:	7072      	strb	r2, [r6, #1]
	user_op->status = TICKER_STATUS_BUSY;
   18c36:	2202      	movs	r2, #2
	user_op->fp_op_func = fp_op_func;
   18c38:	e9c6 230a 	strd	r2, r3, [r6, #40]	; 0x28
	user_op->op_context = op_context;
   18c3c:	9b06      	ldr	r3, [sp, #24]
   18c3e:	6333      	str	r3, [r6, #48]	; 0x30
	user->last = last;
   18c40:	f88c 4003 	strb.w	r4, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   18c44:	e9d8 3408 	ldrd	r3, r4, [r8, #32]
   18c48:	4608      	mov	r0, r1
   18c4a:	4798      	blx	r3
   18c4c:	4643      	mov	r3, r8
   18c4e:	2200      	movs	r2, #0
   18c50:	2104      	movs	r1, #4
   18c52:	47a0      	blx	r4
	return user_op->status;
   18c54:	6ab0      	ldr	r0, [r6, #40]	; 0x28
}
   18c56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   18c5a:	2001      	movs	r0, #1
   18c5c:	e7fb      	b.n	18c56 <ticker_stop+0x66>
   18c5e:	bf00      	nop
   18c60:	200032d8 	.word	0x200032d8

00018c64 <ll_addr_get>:
static uint8_t pub_addr[BDADDR_SIZE];
static uint8_t rnd_addr[BDADDR_SIZE];

uint8_t *ll_addr_get(uint8_t addr_type, uint8_t *bdaddr)
{
	if (addr_type > 1) {
   18c64:	2801      	cmp	r0, #1
   18c66:	d809      	bhi.n	18c7c <ll_addr_get+0x18>
		return NULL;
	}

	if (addr_type) {
   18c68:	b130      	cbz	r0, 18c78 <ll_addr_get+0x14>
		if (bdaddr) {
   18c6a:	4805      	ldr	r0, [pc, #20]	; (18c80 <ll_addr_get+0x1c>)
		}

		return rnd_addr;
	}

	if (bdaddr) {
   18c6c:	b139      	cbz	r1, 18c7e <ll_addr_get+0x1a>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   18c6e:	6803      	ldr	r3, [r0, #0]
   18c70:	600b      	str	r3, [r1, #0]
   18c72:	8883      	ldrh	r3, [r0, #4]
   18c74:	808b      	strh	r3, [r1, #4]
   18c76:	4770      	bx	lr
   18c78:	4802      	ldr	r0, [pc, #8]	; (18c84 <ll_addr_get+0x20>)
   18c7a:	e7f7      	b.n	18c6c <ll_addr_get+0x8>
		return NULL;
   18c7c:	2000      	movs	r0, #0
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
	}

	return pub_addr;
}
   18c7e:	4770      	bx	lr
   18c80:	2000484c 	.word	0x2000484c
   18c84:	20004846 	.word	0x20004846

00018c88 <ll_addr_set>:

uint8_t ll_addr_set(uint8_t addr_type, uint8_t const *const bdaddr)
{
   18c88:	b538      	push	{r3, r4, r5, lr}
   18c8a:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_BROADCASTER)) {
#if defined(CONFIG_BT_CTLR_ADV_EXT)
		if (ull_adv_is_enabled(0) && !ll_adv_cmds_is_ext()) {
#else /* !CONFIG_BT_CTLR_ADV_EXT */
		if (ull_adv_is_enabled(0)) {
   18c8c:	2000      	movs	r0, #0
{
   18c8e:	460d      	mov	r5, r1
		if (ull_adv_is_enabled(0)) {
   18c90:	f013 f896 	bl	2bdc0 <ull_adv_is_enabled>
   18c94:	b110      	cbz	r0, 18c9c <ll_addr_set+0x14>
#endif /* !CONFIG_BT_CTLR_ADV_EXT */
			return BT_HCI_ERR_CMD_DISALLOWED;
   18c96:	240c      	movs	r4, #12
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
}
   18c98:	4620      	mov	r0, r4
   18c9a:	bd38      	pop	{r3, r4, r5, pc}
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
   18c9c:	f013 f90e 	bl	2bebc <ull_scan_is_enabled>
	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
   18ca0:	f010 0006 	ands.w	r0, r0, #6
   18ca4:	d1f7      	bne.n	18c96 <ll_addr_set+0xe>
	if (addr_type) {
   18ca6:	682a      	ldr	r2, [r5, #0]
   18ca8:	b12c      	cbz	r4, 18cb6 <ll_addr_set+0x2e>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
   18caa:	4b05      	ldr	r3, [pc, #20]	; (18cc0 <ll_addr_set+0x38>)
   18cac:	601a      	str	r2, [r3, #0]
   18cae:	88aa      	ldrh	r2, [r5, #4]
   18cb0:	809a      	strh	r2, [r3, #4]
	return 0;
   18cb2:	4604      	mov	r4, r0
   18cb4:	e7f0      	b.n	18c98 <ll_addr_set+0x10>
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
   18cb6:	4b03      	ldr	r3, [pc, #12]	; (18cc4 <ll_addr_set+0x3c>)
   18cb8:	601a      	str	r2, [r3, #0]
   18cba:	88aa      	ldrh	r2, [r5, #4]
   18cbc:	809a      	strh	r2, [r3, #4]
   18cbe:	e7eb      	b.n	18c98 <ll_addr_set+0x10>
   18cc0:	2000484c 	.word	0x2000484c
   18cc4:	20004846 	.word	0x20004846

00018cc8 <hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int hci_driver_init(const struct device *unused)
{
   18cc8:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
   18cca:	4802      	ldr	r0, [pc, #8]	; (18cd4 <hci_driver_init+0xc>)
   18ccc:	f7f0 fa7c 	bl	91c8 <bt_hci_driver_register>

	return 0;
}
   18cd0:	2000      	movs	r0, #0
   18cd2:	bd08      	pop	{r3, pc}
   18cd4:	0002f320 	.word	0x0002f320

00018cd8 <hci_driver_send>:
	if (!buf->len) {
   18cd8:	8983      	ldrh	r3, [r0, #12]
{
   18cda:	b537      	push	{r0, r1, r2, r4, r5, lr}
   18cdc:	4605      	mov	r5, r0
	if (!buf->len) {
   18cde:	b943      	cbnz	r3, 18cf2 <hci_driver_send+0x1a>
		BT_ERR("Empty HCI packet");
   18ce0:	2145      	movs	r1, #69	; 0x45
   18ce2:	481a      	ldr	r0, [pc, #104]	; (18d4c <hci_driver_send+0x74>)
   18ce4:	f00e f943 	bl	26f6e <printk>
		return -EINVAL;
   18ce8:	f06f 0415 	mvn.w	r4, #21
}
   18cec:	4620      	mov	r0, r4
   18cee:	b003      	add	sp, #12
   18cf0:	bd30      	pop	{r4, r5, pc}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   18cf2:	7d02      	ldrb	r2, [r0, #20]
	switch (type) {
   18cf4:	b182      	cbz	r2, 18d18 <hci_driver_send+0x40>
   18cf6:	2a02      	cmp	r2, #2
   18cf8:	d122      	bne.n	18d40 <hci_driver_send+0x68>
	err = hci_acl_handle(buf, &evt);
   18cfa:	a901      	add	r1, sp, #4
   18cfc:	f000 fc66 	bl	195cc <hci_acl_handle>
   18d00:	4604      	mov	r4, r0
	if (evt) {
   18d02:	9801      	ldr	r0, [sp, #4]
   18d04:	b108      	cbz	r0, 18d0a <hci_driver_send+0x32>
		bt_recv_prio(evt);
   18d06:	f7f0 fa45 	bl	9194 <bt_recv_prio>
	if (!err) {
   18d0a:	2c00      	cmp	r4, #0
   18d0c:	d1ee      	bne.n	18cec <hci_driver_send+0x14>
		net_buf_unref(buf);
   18d0e:	4628      	mov	r0, r5
   18d10:	f006 f920 	bl	1ef54 <net_buf_unref>
   18d14:	2400      	movs	r4, #0
   18d16:	e7e9      	b.n	18cec <hci_driver_send+0x14>
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   18d18:	a901      	add	r1, sp, #4
	struct node_rx_pdu *node_rx = NULL;
   18d1a:	9201      	str	r2, [sp, #4]
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   18d1c:	f000 fa0e 	bl	1913c <hci_cmd_handle>
	if (evt) {
   18d20:	2800      	cmp	r0, #0
   18d22:	d0f4      	beq.n	18d0e <hci_driver_send+0x36>
		bt_recv_prio(evt);
   18d24:	f7f0 fa36 	bl	9194 <bt_recv_prio>
		if (node_rx) {
   18d28:	9c01      	ldr	r4, [sp, #4]
   18d2a:	2c00      	cmp	r4, #0
   18d2c:	d0ef      	beq.n	18d0e <hci_driver_send+0x36>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   18d2e:	4620      	mov	r0, r4
   18d30:	f012 ffe3 	bl	2bcfa <hci_get_class>
   18d34:	7160      	strb	r0, [r4, #5]
			k_fifo_put(&recv_fifo, node_rx);
   18d36:	9901      	ldr	r1, [sp, #4]
   18d38:	4805      	ldr	r0, [pc, #20]	; (18d50 <hci_driver_send+0x78>)
   18d3a:	f014 fa95 	bl	2d268 <k_queue_append>
	if (!err) {
   18d3e:	e7e6      	b.n	18d0e <hci_driver_send+0x36>
		BT_ERR("Unknown HCI type %u", type);
   18d40:	2145      	movs	r1, #69	; 0x45
   18d42:	4804      	ldr	r0, [pc, #16]	; (18d54 <hci_driver_send+0x7c>)
   18d44:	f00e f913 	bl	26f6e <printk>
   18d48:	e7ce      	b.n	18ce8 <hci_driver_send+0x10>
   18d4a:	bf00      	nop
   18d4c:	00034d31 	.word	0x00034d31
   18d50:	20001364 	.word	0x20001364
   18d54:	00034d47 	.word	0x00034d47

00018d58 <recv_thread>:
{
   18d58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return z_impl_k_queue_get(queue, timeout);
   18d5a:	4d2a      	ldr	r5, [pc, #168]	; (18e04 <recv_thread+0xac>)
		LL_ASSERT(0);
   18d5c:	4e2a      	ldr	r6, [pc, #168]	; (18e08 <recv_thread+0xb0>)
   18d5e:	4f2b      	ldr	r7, [pc, #172]	; (18e0c <recv_thread+0xb4>)
   18d60:	f04f 32ff 	mov.w	r2, #4294967295
   18d64:	f04f 33ff 	mov.w	r3, #4294967295
   18d68:	4628      	mov	r0, r5
   18d6a:	f009 fd19 	bl	227a0 <z_impl_k_queue_get>
		if (node_rx && !buf) {
   18d6e:	b368      	cbz	r0, 18dcc <recv_thread+0x74>
	uint8_t class = node_rx->hdr.user_meta;
   18d70:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
   18d72:	9001      	str	r0, [sp, #4]
	switch (class) {
   18d74:	b11b      	cbz	r3, 18d7e <recv_thread+0x26>
   18d76:	2b04      	cmp	r3, #4
   18d78:	d90e      	bls.n	18d98 <recv_thread+0x40>
   18d7a:	2b05      	cmp	r3, #5
   18d7c:	d031      	beq.n	18de2 <recv_thread+0x8a>
		LL_ASSERT(0);
   18d7e:	22cf      	movs	r2, #207	; 0xcf
   18d80:	4631      	mov	r1, r6
   18d82:	4638      	mov	r0, r7
   18d84:	f00e f8f3 	bl	26f6e <printk>
   18d88:	4040      	eors	r0, r0
   18d8a:	f380 8811 	msr	BASEPRI, r0
   18d8e:	f04f 0003 	mov.w	r0, #3
   18d92:	df02      	svc	2
	struct net_buf *buf = NULL;
   18d94:	2400      	movs	r4, #0
   18d96:	e00d      	b.n	18db4 <recv_thread+0x5c>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
   18d98:	2b02      	cmp	r3, #2
   18d9a:	d11a      	bne.n	18dd2 <recv_thread+0x7a>
			buf = bt_buf_get_evt(BT_HCI_EVT_UNKNOWN, true,
   18d9c:	2200      	movs	r2, #0
   18d9e:	2300      	movs	r3, #0
   18da0:	2101      	movs	r1, #1
   18da2:	2000      	movs	r0, #0
   18da4:	f7ef f8ba 	bl	7f1c <bt_buf_get_evt>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   18da8:	4604      	mov	r4, r0
		if (buf) {
   18daa:	b118      	cbz	r0, 18db4 <recv_thread+0x5c>
			hci_evt_encode(node_rx, buf);
   18dac:	4601      	mov	r1, r0
   18dae:	9801      	ldr	r0, [sp, #4]
   18db0:	f000 fce4 	bl	1977c <hci_evt_encode>
	node_rx->hdr.next = NULL;
   18db4:	9b01      	ldr	r3, [sp, #4]
   18db6:	2200      	movs	r2, #0
   18db8:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   18dba:	a801      	add	r0, sp, #4
   18dbc:	f001 fa1e 	bl	1a1fc <ll_rx_mem_release>
		if (buf) {
   18dc0:	b124      	cbz	r4, 18dcc <recv_thread+0x74>
			if (buf->len) {
   18dc2:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
   18dc4:	4620      	mov	r0, r4
			if (buf->len) {
   18dc6:	b1cb      	cbz	r3, 18dfc <recv_thread+0xa4>
				bt_recv(buf);
   18dc8:	f7f0 f94e 	bl	9068 <bt_recv>
	z_impl_k_yield();
   18dcc:	f00a fc16 	bl	235fc <z_impl_k_yield>
   18dd0:	e7c6      	b.n	18d60 <recv_thread+0x8>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   18dd2:	f04f 32ff 	mov.w	r2, #4294967295
   18dd6:	f04f 33ff 	mov.w	r3, #4294967295
   18dda:	2001      	movs	r0, #1
   18ddc:	f7ef f84e 	bl	7e7c <bt_buf_get_rx>
   18de0:	e7e2      	b.n	18da8 <recv_thread+0x50>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   18de2:	f04f 32ff 	mov.w	r2, #4294967295
   18de6:	f04f 33ff 	mov.w	r3, #4294967295
   18dea:	2003      	movs	r0, #3
   18dec:	f7ef f846 	bl	7e7c <bt_buf_get_rx>
   18df0:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
   18df2:	4601      	mov	r1, r0
   18df4:	9801      	ldr	r0, [sp, #4]
   18df6:	f000 fc8b 	bl	19710 <hci_acl_encode>
		break;
   18dfa:	e7db      	b.n	18db4 <recv_thread+0x5c>
				net_buf_unref(buf);
   18dfc:	f006 f8aa 	bl	1ef54 <net_buf_unref>
   18e00:	e7e4      	b.n	18dcc <recv_thread+0x74>
   18e02:	bf00      	nop
   18e04:	20001364 	.word	0x20001364
   18e08:	00034d60 	.word	0x00034d60
   18e0c:	0002fa94 	.word	0x0002fa94

00018e10 <prio_recv_thread>:
{
   18e10:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
   18e14:	4f2a      	ldr	r7, [pc, #168]	; (18ec0 <prio_recv_thread+0xb0>)
				k_fifo_put(&recv_fifo, node_rx);
   18e16:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 18ec4 <prio_recv_thread+0xb4>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   18e1a:	f10d 0102 	add.w	r1, sp, #2
   18e1e:	a801      	add	r0, sp, #4
   18e20:	f001 f8fc 	bl	1a01c <ll_rx_get>
   18e24:	4604      	mov	r4, r0
   18e26:	bb78      	cbnz	r0, 18e88 <prio_recv_thread+0x78>
		if (node_rx) {
   18e28:	9b01      	ldr	r3, [sp, #4]
   18e2a:	2b00      	cmp	r3, #0
   18e2c:	d040      	beq.n	18eb0 <prio_recv_thread+0xa0>
			ll_rx_dequeue();
   18e2e:	f001 f94d 	bl	1a0cc <ll_rx_dequeue>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   18e32:	9d01      	ldr	r5, [sp, #4]
   18e34:	4628      	mov	r0, r5
   18e36:	f012 ff60 	bl	2bcfa <hci_get_class>
   18e3a:	7168      	strb	r0, [r5, #5]
			buf = process_prio_evt(node_rx, &evt_flags);
   18e3c:	9d01      	ldr	r5, [sp, #4]
	if (node_rx->hdr.user_meta == HCI_CLASS_EVT_CONNECTION) {
   18e3e:	796b      	ldrb	r3, [r5, #5]
   18e40:	2b03      	cmp	r3, #3
   18e42:	d11c      	bne.n	18e7e <prio_recv_thread+0x6e>
		if (node_rx->hdr.type == NODE_RX_TYPE_TERMINATE) {
   18e44:	792b      	ldrb	r3, [r5, #4]
   18e46:	2b14      	cmp	r3, #20
   18e48:	d119      	bne.n	18e7e <prio_recv_thread+0x6e>
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   18e4a:	4621      	mov	r1, r4
   18e4c:	f04f 32ff 	mov.w	r2, #4294967295
   18e50:	f04f 33ff 	mov.w	r3, #4294967295
   18e54:	2005      	movs	r0, #5
		handle = node_rx->hdr.handle;
   18e56:	88ee      	ldrh	r6, [r5, #6]
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   18e58:	f7ef f860 	bl	7f1c <bt_buf_get_evt>
			hci_disconn_complete_encode(pdu_data, handle, buf);
   18e5c:	4631      	mov	r1, r6
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   18e5e:	4604      	mov	r4, r0
			hci_disconn_complete_encode(pdu_data, handle, buf);
   18e60:	4602      	mov	r2, r0
   18e62:	f105 001c 	add.w	r0, r5, #28
   18e66:	f000 fc29 	bl	196bc <hci_disconn_complete_encode>
			hci_disconn_complete_process(handle);
   18e6a:	4630      	mov	r0, r6
   18e6c:	f000 fc48 	bl	19700 <hci_disconn_complete_process>
			if (buf) {
   18e70:	b12c      	cbz	r4, 18e7e <prio_recv_thread+0x6e>
				bt_recv_prio(buf);
   18e72:	4620      	mov	r0, r4
   18e74:	f7f0 f98e 	bl	9194 <bt_recv_prio>
					net_buf_unref(buf);
   18e78:	4620      	mov	r0, r4
   18e7a:	f006 f86b 	bl	1ef54 <net_buf_unref>
				k_fifo_put(&recv_fifo, node_rx);
   18e7e:	9901      	ldr	r1, [sp, #4]
   18e80:	4640      	mov	r0, r8
   18e82:	f014 f9f1 	bl	2d268 <k_queue_append>
			continue;
   18e86:	e7c8      	b.n	18e1a <prio_recv_thread+0xa>
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   18e88:	f04f 33ff 	mov.w	r3, #4294967295
   18e8c:	f04f 32ff 	mov.w	r2, #4294967295
   18e90:	2100      	movs	r1, #0
   18e92:	2013      	movs	r0, #19
   18e94:	f7ef f842 	bl	7f1c <bt_buf_get_evt>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   18e98:	4622      	mov	r2, r4
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   18e9a:	4605      	mov	r5, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   18e9c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   18ea0:	f012 ff14 	bl	2bccc <hci_num_cmplt_encode>
			bt_recv_prio(buf);
   18ea4:	4628      	mov	r0, r5
   18ea6:	f7f0 f975 	bl	9194 <bt_recv_prio>
	z_impl_k_yield();
   18eaa:	f00a fba7 	bl	235fc <z_impl_k_yield>
   18eae:	e7b4      	b.n	18e1a <prio_recv_thread+0xa>
	return z_impl_k_sem_take(sem, timeout);
   18eb0:	f04f 32ff 	mov.w	r2, #4294967295
   18eb4:	f04f 33ff 	mov.w	r3, #4294967295
   18eb8:	4638      	mov	r0, r7
   18eba:	f00a fd3b 	bl	23934 <z_impl_k_sem_take>
		BT_DBG("sem taken");
   18ebe:	e7ac      	b.n	18e1a <prio_recv_thread+0xa>
   18ec0:	20001314 	.word	0x20001314
   18ec4:	20001364 	.word	0x20001364

00018ec8 <hci_driver_open>:
{
   18ec8:	b5d0      	push	{r4, r6, r7, lr}
	err = ll_init(&sem_prio_recv);
   18eca:	481d      	ldr	r0, [pc, #116]	; (18f40 <hci_driver_open+0x78>)
{
   18ecc:	b088      	sub	sp, #32
	err = ll_init(&sem_prio_recv);
   18ece:	f000 ffab 	bl	19e28 <ll_init>
	if (err) {
   18ed2:	4604      	mov	r4, r0
   18ed4:	b138      	cbz	r0, 18ee6 <hci_driver_open+0x1e>
		BT_ERR("LL initialization failed: %d", err);
   18ed6:	4602      	mov	r2, r0
   18ed8:	2145      	movs	r1, #69	; 0x45
   18eda:	481a      	ldr	r0, [pc, #104]	; (18f44 <hci_driver_open+0x7c>)
   18edc:	f00e f847 	bl	26f6e <printk>
}
   18ee0:	4620      	mov	r0, r4
   18ee2:	b008      	add	sp, #32
   18ee4:	bdd0      	pop	{r4, r6, r7, pc}
	hci_init(NULL);
   18ee6:	f000 fdc1 	bl	19a6c <hci_init>
	k_thread_create(&prio_recv_thread_data, prio_recv_thread_stack,
   18eea:	2600      	movs	r6, #0
   18eec:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   18eee:	f06f 0309 	mvn.w	r3, #9
   18ef2:	e9cd 4302 	strd	r4, r3, [sp, #8]
   18ef6:	e9cd 6706 	strd	r6, r7, [sp, #24]
   18efa:	9404      	str	r4, [sp, #16]
   18efc:	e9cd 4400 	strd	r4, r4, [sp]
   18f00:	4b11      	ldr	r3, [pc, #68]	; (18f48 <hci_driver_open+0x80>)
   18f02:	4912      	ldr	r1, [pc, #72]	; (18f4c <hci_driver_open+0x84>)
   18f04:	4812      	ldr	r0, [pc, #72]	; (18f50 <hci_driver_open+0x88>)
   18f06:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
   18f0a:	f00a fe07 	bl	23b1c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   18f0e:	4911      	ldr	r1, [pc, #68]	; (18f54 <hci_driver_open+0x8c>)
   18f10:	480f      	ldr	r0, [pc, #60]	; (18f50 <hci_driver_open+0x88>)
   18f12:	f014 fa1c 	bl	2d34e <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   18f16:	f06f 0307 	mvn.w	r3, #7
   18f1a:	e9cd 4302 	strd	r4, r3, [sp, #8]
   18f1e:	e9cd 6706 	strd	r6, r7, [sp, #24]
   18f22:	9404      	str	r4, [sp, #16]
   18f24:	e9cd 4400 	strd	r4, r4, [sp]
   18f28:	4b0b      	ldr	r3, [pc, #44]	; (18f58 <hci_driver_open+0x90>)
   18f2a:	490c      	ldr	r1, [pc, #48]	; (18f5c <hci_driver_open+0x94>)
   18f2c:	480c      	ldr	r0, [pc, #48]	; (18f60 <hci_driver_open+0x98>)
   18f2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   18f32:	f00a fdf3 	bl	23b1c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   18f36:	490b      	ldr	r1, [pc, #44]	; (18f64 <hci_driver_open+0x9c>)
   18f38:	4809      	ldr	r0, [pc, #36]	; (18f60 <hci_driver_open+0x98>)
   18f3a:	f014 fa08 	bl	2d34e <z_impl_k_thread_name_set>
	return 0;
   18f3e:	e7cf      	b.n	18ee0 <hci_driver_open+0x18>
   18f40:	20001314 	.word	0x20001314
   18f44:	00034cff 	.word	0x00034cff
   18f48:	00018e11 	.word	0x00018e11
   18f4c:	200052e0 	.word	0x200052e0
   18f50:	20002250 	.word	0x20002250
   18f54:	00034d21 	.word	0x00034d21
   18f58:	00018d59 	.word	0x00018d59
   18f5c:	200054c0 	.word	0x200054c0
   18f60:	200022e0 	.word	0x200022e0
   18f64:	00034d2b 	.word	0x00034d2b

00018f68 <cmd_complete_status>:
{
	return bt_hci_cmd_status_create(_opcode, status);
}

static struct net_buf *cmd_complete_status(uint8_t status)
{
   18f68:	b538      	push	{r3, r4, r5, lr}
	struct net_buf *buf;
	struct bt_hci_evt_cc_status *ccst;

	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   18f6a:	4b07      	ldr	r3, [pc, #28]	; (18f88 <cmd_complete_status+0x20>)
{
   18f6c:	4605      	mov	r5, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   18f6e:	2101      	movs	r1, #1
   18f70:	8818      	ldrh	r0, [r3, #0]
   18f72:	f010 f9ed 	bl	29350 <bt_hci_cmd_complete_create>
	return net_buf_simple_add(&buf->b, len);
   18f76:	2101      	movs	r1, #1
   18f78:	4604      	mov	r4, r0
   18f7a:	3008      	adds	r0, #8
   18f7c:	f006 f93a 	bl	1f1f4 <net_buf_simple_add>
	ccst = net_buf_add(buf, sizeof(*ccst));
	ccst->status = status;
   18f80:	7005      	strb	r5, [r0, #0]

	return buf;
}
   18f82:	4620      	mov	r0, r4
   18f84:	bd38      	pop	{r3, r4, r5, pc}
   18f86:	bf00      	nop
   18f88:	200046c8 	.word	0x200046c8

00018f8c <cmd_status>:
	return bt_hci_cmd_status_create(_opcode, status);
   18f8c:	4b02      	ldr	r3, [pc, #8]	; (18f98 <cmd_status+0xc>)
   18f8e:	4601      	mov	r1, r0
   18f90:	8818      	ldrh	r0, [r3, #0]
   18f92:	f010 b9ef 	b.w	29374 <bt_hci_cmd_status_create>
   18f96:	bf00      	nop
   18f98:	200046c8 	.word	0x200046c8

00018f9c <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(uint8_t status, struct pdu_data *pdu_data,
				    uint16_t handle, struct net_buf *buf)
{
   18f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18f9e:	4606      	mov	r6, r0
   18fa0:	4618      	mov	r0, r3
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   18fa2:	4b13      	ldr	r3, [pc, #76]	; (18ff0 <le_remote_feat_complete+0x54>)
{
   18fa4:	460c      	mov	r4, r1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   18fa6:	6859      	ldr	r1, [r3, #4]
   18fa8:	2500      	movs	r5, #0
{
   18faa:	4617      	mov	r7, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   18fac:	f001 5300 	and.w	r3, r1, #536870912	; 0x20000000
   18fb0:	462a      	mov	r2, r5
   18fb2:	4313      	orrs	r3, r2
   18fb4:	d016      	beq.n	18fe4 <le_remote_feat_complete+0x48>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
   18fb6:	4b0f      	ldr	r3, [pc, #60]	; (18ff4 <le_remote_feat_complete+0x58>)
   18fb8:	6819      	ldr	r1, [r3, #0]
   18fba:	462b      	mov	r3, r5
   18fbc:	f001 0208 	and.w	r2, r1, #8
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   18fc0:	4313      	orrs	r3, r2
   18fc2:	d00f      	beq.n	18fe4 <le_remote_feat_complete+0x48>
		return;
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
   18fc4:	220b      	movs	r2, #11
   18fc6:	2104      	movs	r1, #4
   18fc8:	f012 fe68 	bl	2bc9c <meta_evt>

	sep->status = status;
   18fcc:	7006      	strb	r6, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   18fce:	f8a0 7001 	strh.w	r7, [r0, #1]
	if (!status) {
   18fd2:	1cc2      	adds	r2, r0, #3
   18fd4:	b93e      	cbnz	r6, 18fe6 <le_remote_feat_complete+0x4a>
   18fd6:	4621      	mov	r1, r4
   18fd8:	f851 3f04 	ldr.w	r3, [r1, #4]!
   18fdc:	f8c0 3003 	str.w	r3, [r0, #3]
   18fe0:	684b      	ldr	r3, [r1, #4]
   18fe2:	6053      	str	r3, [r2, #4]
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
   18fe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
__ssp_bos_icheck3(memset, void *, int)
   18fe6:	f8c0 5003 	str.w	r5, [r0, #3]
   18fea:	6055      	str	r5, [r2, #4]
   18fec:	e7fa      	b.n	18fe4 <le_remote_feat_complete+0x48>
   18fee:	bf00      	nop
   18ff0:	20000480 	.word	0x20000480
   18ff4:	20000488 	.word	0x20000488

00018ff8 <hci_cmd_complete>:
{
   18ff8:	b538      	push	{r3, r4, r5, lr}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   18ffa:	4b06      	ldr	r3, [pc, #24]	; (19014 <hci_cmd_complete+0x1c>)
{
   18ffc:	4605      	mov	r5, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   18ffe:	8818      	ldrh	r0, [r3, #0]
{
   19000:	460c      	mov	r4, r1
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   19002:	f010 f9a5 	bl	29350 <bt_hci_cmd_complete_create>
   19006:	4621      	mov	r1, r4
   19008:	6028      	str	r0, [r5, #0]
   1900a:	3008      	adds	r0, #8
}
   1900c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   19010:	f006 b8f0 	b.w	1f1f4 <net_buf_simple_add>
   19014:	200046c8 	.word	0x200046c8

00019018 <hci_vendor_cmd_handle_common>:
{
   19018:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (ocf) {
   1901a:	3801      	subs	r0, #1
{
   1901c:	b087      	sub	sp, #28
   1901e:	4614      	mov	r4, r2
	switch (ocf) {
   19020:	2809      	cmp	r0, #9
   19022:	f200 8085 	bhi.w	19130 <hci_vendor_cmd_handle_common+0x118>
   19026:	e8df f000 	tbb	[pc, r0]
   1902a:	1c05      	.short	0x1c05
   1902c:	61838330 	.word	0x61838330
   19030:	776a3c83 	.word	0x776a3c83
	rp = hci_cmd_complete(evt, sizeof(*rp));
   19034:	210d      	movs	r1, #13
   19036:	4610      	mov	r0, r2
   19038:	f7ff ffde 	bl	18ff8 <hci_cmd_complete>
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   1903c:	2302      	movs	r3, #2
   1903e:	7043      	strb	r3, [r0, #1]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
   19040:	70c3      	strb	r3, [r0, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
   19042:	7183      	strb	r3, [r0, #6]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   19044:	2304      	movs	r3, #4
	rp->status = 0x00;
   19046:	2100      	movs	r1, #0
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   19048:	71c3      	strb	r3, [r0, #7]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
   1904a:	2363      	movs	r3, #99	; 0x63
	rp->status = 0x00;
   1904c:	7001      	strb	r1, [r0, #0]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   1904e:	7081      	strb	r1, [r0, #2]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
   19050:	7101      	strb	r1, [r0, #4]
	rp->fw_variant = 0U;
   19052:	7141      	strb	r1, [r0, #5]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   19054:	7201      	strb	r1, [r0, #8]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
   19056:	7243      	strb	r3, [r0, #9]
   19058:	7281      	strb	r1, [r0, #10]
   1905a:	72c1      	strb	r1, [r0, #11]
   1905c:	7301      	strb	r1, [r0, #12]
	return 0;
   1905e:	2400      	movs	r4, #0
   19060:	e010      	b.n	19084 <hci_vendor_cmd_handle_common+0x6c>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   19062:	2141      	movs	r1, #65	; 0x41
   19064:	4610      	mov	r0, r2
   19066:	f7ff ffc7 	bl	18ff8 <hci_cmd_complete>
	rp->status = 0x00;
   1906a:	2400      	movs	r4, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1906c:	4605      	mov	r5, r0
   1906e:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   19070:	f800 4b01 	strb.w	r4, [r0], #1
   19074:	4621      	mov	r1, r4
   19076:	f014 fac0 	bl	2d5fa <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
   1907a:	f06f 0358 	mvn.w	r3, #88	; 0x58
   1907e:	706b      	strb	r3, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   19080:	2303      	movs	r3, #3
   19082:	70ab      	strb	r3, [r5, #2]
}
   19084:	4620      	mov	r0, r4
   19086:	b007      	add	sp, #28
   19088:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1908a:	2109      	movs	r1, #9
   1908c:	4610      	mov	r0, r2
   1908e:	f7ff ffb3 	bl	18ff8 <hci_cmd_complete>
	rp->status = 0x00;
   19092:	4603      	mov	r3, r0
   19094:	2100      	movs	r1, #0
   19096:	f803 1b01 	strb.w	r1, [r3], #1
   1909a:	f8c0 1001 	str.w	r1, [r0, #1]
   1909e:	6059      	str	r1, [r3, #4]
   190a0:	e7dd      	b.n	1905e <hci_vendor_cmd_handle_common+0x46>
	const char build_info[] = HCI_VS_BUILD_INFO;
   190a2:	4b25      	ldr	r3, [pc, #148]	; (19138 <hci_vendor_cmd_handle_common+0x120>)
   190a4:	aa01      	add	r2, sp, #4
   190a6:	f103 0710 	add.w	r7, r3, #16
   190aa:	4615      	mov	r5, r2
   190ac:	6818      	ldr	r0, [r3, #0]
   190ae:	6859      	ldr	r1, [r3, #4]
   190b0:	4616      	mov	r6, r2
   190b2:	c603      	stmia	r6!, {r0, r1}
   190b4:	3308      	adds	r3, #8
   190b6:	42bb      	cmp	r3, r7
   190b8:	4632      	mov	r2, r6
   190ba:	d1f7      	bne.n	190ac <hci_vendor_cmd_handle_common+0x94>
   190bc:	881b      	ldrh	r3, [r3, #0]
   190be:	8033      	strh	r3, [r6, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
   190c0:	2113      	movs	r1, #19
   190c2:	4620      	mov	r0, r4
   190c4:	f7ff ff98 	bl	18ff8 <hci_cmd_complete>
	rp->status = 0x00;
   190c8:	4603      	mov	r3, r0
   190ca:	2200      	movs	r2, #0
   190cc:	f803 2b01 	strb.w	r2, [r3], #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   190d0:	462a      	mov	r2, r5
   190d2:	ad05      	add	r5, sp, #20
   190d4:	4614      	mov	r4, r2
   190d6:	cc03      	ldmia	r4!, {r0, r1}
   190d8:	42ac      	cmp	r4, r5
   190da:	6018      	str	r0, [r3, #0]
   190dc:	6059      	str	r1, [r3, #4]
   190de:	4622      	mov	r2, r4
   190e0:	f103 0308 	add.w	r3, r3, #8
   190e4:	d1f6      	bne.n	190d4 <hci_vendor_cmd_handle_common+0xbc>
   190e6:	8822      	ldrh	r2, [r4, #0]
   190e8:	801a      	strh	r2, [r3, #0]
   190ea:	e7b8      	b.n	1905e <hci_vendor_cmd_handle_common+0x46>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
   190ec:	6889      	ldr	r1, [r1, #8]
   190ee:	2000      	movs	r0, #0
   190f0:	f7ff fdca 	bl	18c88 <ll_addr_set>
	*evt = cmd_complete_status(0x00);
   190f4:	2000      	movs	r0, #0
   190f6:	f7ff ff37 	bl	18f68 <cmd_complete_status>
   190fa:	6020      	str	r0, [r4, #0]
   190fc:	e7af      	b.n	1905e <hci_vendor_cmd_handle_common+0x46>
	rp = hci_cmd_complete(evt, sizeof(*rp) +
   190fe:	2118      	movs	r1, #24
   19100:	4610      	mov	r0, r2
   19102:	f7ff ff79 	bl	18ff8 <hci_cmd_complete>
	rp->status = 0x00;
   19106:	2400      	movs	r4, #0
	rp = hci_cmd_complete(evt, sizeof(*rp) +
   19108:	4605      	mov	r5, r0
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   1910a:	2101      	movs	r1, #1
	rp->status = 0x00;
   1910c:	f800 4b02 	strb.w	r4, [r0], #2
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   19110:	f013 fb65 	bl	2c7de <hci_vendor_read_static_addr>
   19114:	7068      	strb	r0, [r5, #1]
   19116:	e7b5      	b.n	19084 <hci_vendor_cmd_handle_common+0x6c>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   19118:	2121      	movs	r1, #33	; 0x21
   1911a:	4610      	mov	r0, r2
   1911c:	f7ff ff6c 	bl	18ff8 <hci_cmd_complete>
	rp->status = 0x00;
   19120:	4601      	mov	r1, r0
   19122:	2400      	movs	r4, #0
   19124:	f801 4b11 	strb.w	r4, [r1], #17
	hci_vendor_read_key_hierarchy_roots(rp->ir, rp->er);
   19128:	3001      	adds	r0, #1
   1912a:	f013 fbae 	bl	2c88a <hci_vendor_read_key_hierarchy_roots>
   1912e:	e7a9      	b.n	19084 <hci_vendor_cmd_handle_common+0x6c>
		return -EINVAL;
   19130:	f06f 0415 	mvn.w	r4, #21
   19134:	e7a6      	b.n	19084 <hci_vendor_cmd_handle_common+0x6c>
   19136:	bf00      	nop
   19138:	00034eb1 	.word	0x00034eb1

0001913c <hci_cmd_handle>:
{
   1913c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
   1913e:	8983      	ldrh	r3, [r0, #12]
{
   19140:	b08b      	sub	sp, #44	; 0x2c
	struct net_buf *evt = NULL;
   19142:	2500      	movs	r5, #0
	if (cmd->len < sizeof(*chdr)) {
   19144:	2b02      	cmp	r3, #2
{
   19146:	4604      	mov	r4, r0
	struct net_buf *evt = NULL;
   19148:	9505      	str	r5, [sp, #20]
	if (cmd->len < sizeof(*chdr)) {
   1914a:	d806      	bhi.n	1915a <hci_cmd_handle+0x1e>
		BT_ERR("No HCI Command header");
   1914c:	48b9      	ldr	r0, [pc, #740]	; (19434 <hci_cmd_handle+0x2f8>)
   1914e:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Invalid HCI CMD packet length");
   19150:	f00d ff0d 	bl	26f6e <printk>
		return NULL;
   19154:	4628      	mov	r0, r5
}
   19156:	b00b      	add	sp, #44	; 0x2c
   19158:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1915a:	2103      	movs	r1, #3
   1915c:	3008      	adds	r0, #8
   1915e:	f006 f82b 	bl	1f1b8 <net_buf_simple_pull_mem>
	if (cmd->len < chdr->param_len) {
   19162:	89a2      	ldrh	r2, [r4, #12]
   19164:	7883      	ldrb	r3, [r0, #2]
   19166:	429a      	cmp	r2, r3
   19168:	d202      	bcs.n	19170 <hci_cmd_handle+0x34>
		BT_ERR("Invalid HCI CMD packet length");
   1916a:	2145      	movs	r1, #69	; 0x45
   1916c:	48b2      	ldr	r0, [pc, #712]	; (19438 <hci_cmd_handle+0x2fc>)
   1916e:	e7ef      	b.n	19150 <hci_cmd_handle+0x14>
	_opcode = sys_le16_to_cpu(chdr->opcode);
   19170:	8802      	ldrh	r2, [r0, #0]
   19172:	49b2      	ldr	r1, [pc, #712]	; (1943c <hci_cmd_handle+0x300>)
   19174:	b293      	uxth	r3, r2
	ocf = BT_OCF(_opcode);
   19176:	f3c3 0009 	ubfx	r0, r3, #0, #10
	switch (BT_OGF(_opcode)) {
   1917a:	0a9b      	lsrs	r3, r3, #10
   1917c:	2b04      	cmp	r3, #4
	_opcode = sys_le16_to_cpu(chdr->opcode);
   1917e:	800a      	strh	r2, [r1, #0]
	switch (BT_OGF(_opcode)) {
   19180:	d061      	beq.n	19246 <hci_cmd_handle+0x10a>
   19182:	d805      	bhi.n	19190 <hci_cmd_handle+0x54>
   19184:	2b01      	cmp	r3, #1
   19186:	d00f      	beq.n	191a8 <hci_cmd_handle+0x6c>
   19188:	2b03      	cmp	r3, #3
   1918a:	d01e      	beq.n	191ca <hci_cmd_handle+0x8e>
		evt = cmd_status(BT_HCI_ERR_UNKNOWN_CMD);
   1918c:	2001      	movs	r0, #1
   1918e:	e019      	b.n	191c4 <hci_cmd_handle+0x88>
	switch (BT_OGF(_opcode)) {
   19190:	2b08      	cmp	r3, #8
   19192:	f000 80c9 	beq.w	19328 <hci_cmd_handle+0x1ec>
   19196:	2b3f      	cmp	r3, #63	; 0x3f
   19198:	d1f8      	bne.n	1918c <hci_cmd_handle+0x50>

/* Map vendor command handler directly to common implementation */
inline int hci_vendor_cmd_handle(uint16_t ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	return hci_vendor_cmd_handle_common(ocf, cmd, evt);
   1919a:	aa05      	add	r2, sp, #20
   1919c:	4621      	mov	r1, r4
   1919e:	f7ff ff3b 	bl	19018 <hci_vendor_cmd_handle_common>
	if (err == -EINVAL) {
   191a2:	3016      	adds	r0, #22
   191a4:	d0f2      	beq.n	1918c <hci_cmd_handle+0x50>
   191a6:	e039      	b.n	1921c <hci_cmd_handle+0xe0>
	switch (ocf) {
   191a8:	2806      	cmp	r0, #6
   191aa:	d006      	beq.n	191ba <hci_cmd_handle+0x7e>
   191ac:	281d      	cmp	r0, #29
   191ae:	d1ed      	bne.n	1918c <hci_cmd_handle+0x50>
	handle = sys_le16_to_cpu(cmd->handle);
   191b0:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
   191b2:	8818      	ldrh	r0, [r3, #0]
   191b4:	f012 ffe4 	bl	2c180 <ll_version_ind_send>
	*evt = cmd_status(status);
   191b8:	e004      	b.n	191c4 <hci_cmd_handle+0x88>
		disconnect(cmd, evt);
   191ba:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
   191bc:	7899      	ldrb	r1, [r3, #2]
   191be:	8818      	ldrh	r0, [r3, #0]
   191c0:	f012 ff9c 	bl	2c0fc <ll_terminate_ind_send>
		evt = cmd_status(BT_HCI_ERR_UNKNOWN_CMD);
   191c4:	f7ff fee2 	bl	18f8c <cmd_status>
   191c8:	e012      	b.n	191f0 <hci_cmd_handle+0xb4>
	switch (ocf) {
   191ca:	2803      	cmp	r0, #3
   191cc:	d012      	beq.n	191f4 <hci_cmd_handle+0xb8>
   191ce:	d808      	bhi.n	191e2 <hci_cmd_handle+0xa6>
   191d0:	2801      	cmp	r0, #1
   191d2:	d1db      	bne.n	1918c <hci_cmd_handle+0x50>
	event_mask = sys_get_le64(cmd->events);
   191d4:	68a0      	ldr	r0, [r4, #8]
   191d6:	f012 fd5d 	bl	2bc94 <sys_get_le64>
   191da:	4b99      	ldr	r3, [pc, #612]	; (19440 <hci_cmd_handle+0x304>)
	le_event_mask = sys_get_le64(cmd->events);
   191dc:	e9c3 0100 	strd	r0, r1, [r3]
   191e0:	e003      	b.n	191ea <hci_cmd_handle+0xae>
	switch (ocf) {
   191e2:	282d      	cmp	r0, #45	; 0x2d
   191e4:	d01c      	beq.n	19220 <hci_cmd_handle+0xe4>
   191e6:	2863      	cmp	r0, #99	; 0x63
   191e8:	d1d0      	bne.n	1918c <hci_cmd_handle+0x50>
	*evt = cmd_complete_status(0x00);
   191ea:	2000      	movs	r0, #0
	*evt = cmd_complete_status(status);
   191ec:	f7ff febc 	bl	18f68 <cmd_complete_status>
		evt = cmd_status(BT_HCI_ERR_UNKNOWN_CMD);
   191f0:	9005      	str	r0, [sp, #20]
   191f2:	e013      	b.n	1921c <hci_cmd_handle+0xe0>
	event_mask = DEFAULT_EVENT_MASK;
   191f4:	4b92      	ldr	r3, [pc, #584]	; (19440 <hci_cmd_handle+0x304>)
   191f6:	f04f 30ff 	mov.w	r0, #4294967295
   191fa:	f641 71ff 	movw	r1, #8191	; 0x1fff
   191fe:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   19202:	4b90      	ldr	r3, [pc, #576]	; (19444 <hci_cmd_handle+0x308>)
   19204:	201f      	movs	r0, #31
   19206:	2100      	movs	r1, #0
   19208:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
   1920c:	f000 fe78 	bl	19f00 <ll_reset>
		*evt = cmd_complete_status(0x00);
   19210:	4628      	mov	r0, r5
   19212:	f7ff fea9 	bl	18f68 <cmd_complete_status>
	conn_count = 0U;
   19216:	4b8c      	ldr	r3, [pc, #560]	; (19448 <hci_cmd_handle+0x30c>)
		*evt = cmd_complete_status(0x00);
   19218:	9005      	str	r0, [sp, #20]
	conn_count = 0U;
   1921a:	601d      	str	r5, [r3, #0]
	return evt;
   1921c:	9805      	ldr	r0, [sp, #20]
   1921e:	e79a      	b.n	19156 <hci_cmd_handle+0x1a>
		read_tx_power_level(cmd, evt);
   19220:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   19222:	2104      	movs	r1, #4
   19224:	a805      	add	r0, sp, #20
	handle = sys_le16_to_cpu(cmd->handle);
   19226:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
   19228:	789f      	ldrb	r7, [r3, #2]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1922a:	f7ff fee5 	bl	18ff8 <hci_cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
   1922e:	b2ae      	uxth	r6, r5
	rp = hci_cmd_complete(evt, sizeof(*rp));
   19230:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(BT_HCI_VS_LL_HANDLE_TYPE_CONN,
   19232:	1cc3      	adds	r3, r0, #3
   19234:	463a      	mov	r2, r7
   19236:	4631      	mov	r1, r6
   19238:	2002      	movs	r0, #2
   1923a:	f012 fd18 	bl	2bc6e <ll_tx_pwr_lvl_get>
	rp->status = status;
   1923e:	7020      	strb	r0, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
   19240:	f8a4 5001 	strh.w	r5, [r4, #1]
	if (err == -EINVAL) {
   19244:	e7ea      	b.n	1921c <hci_cmd_handle+0xe0>
	switch (ocf) {
   19246:	3801      	subs	r0, #1
   19248:	2808      	cmp	r0, #8
   1924a:	d89f      	bhi.n	1918c <hci_cmd_handle+0x50>
   1924c:	a301      	add	r3, pc, #4	; (adr r3, 19254 <hci_cmd_handle+0x118>)
   1924e:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
   19252:	bf00      	nop
   19254:	00019279 	.word	0x00019279
   19258:	0001929f 	.word	0x0001929f
   1925c:	000192f5 	.word	0x000192f5
   19260:	0001918d 	.word	0x0001918d
   19264:	0001918d 	.word	0x0001918d
   19268:	0001918d 	.word	0x0001918d
   1926c:	0001918d 	.word	0x0001918d
   19270:	0001918d 	.word	0x0001918d
   19274:	00019311 	.word	0x00019311
	rp = hci_cmd_complete(evt, sizeof(*rp));
   19278:	2109      	movs	r1, #9
   1927a:	a805      	add	r0, sp, #20
   1927c:	f7ff febc 	bl	18ff8 <hci_cmd_complete>
	rp->hci_version = LL_VERSION_NUMBER;
   19280:	220b      	movs	r2, #11
	rp->status = 0x00;
   19282:	2300      	movs	r3, #0
	rp->hci_version = LL_VERSION_NUMBER;
   19284:	7042      	strb	r2, [r0, #1]
	rp->lmp_version = LL_VERSION_NUMBER;
   19286:	7102      	strb	r2, [r0, #4]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   19288:	2259      	movs	r2, #89	; 0x59
	rp->status = 0x00;
   1928a:	7003      	strb	r3, [r0, #0]
	rp->hci_revision = sys_cpu_to_le16(0);
   1928c:	7083      	strb	r3, [r0, #2]
   1928e:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   19290:	7183      	strb	r3, [r0, #6]
   19292:	7142      	strb	r2, [r0, #5]
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
   19294:	f04f 33ff 	mov.w	r3, #4294967295
	dst[0] = val;
   19298:	71c3      	strb	r3, [r0, #7]
	dst[1] = val >> 8;
   1929a:	7203      	strb	r3, [r0, #8]
	if (err == -EINVAL) {
   1929c:	e7be      	b.n	1921c <hci_cmd_handle+0xe0>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1929e:	2141      	movs	r1, #65	; 0x41
   192a0:	a805      	add	r0, sp, #20
   192a2:	f7ff fea9 	bl	18ff8 <hci_cmd_complete>
	rp->status = 0x00;
   192a6:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   192a8:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
   192aa:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   192ac:	f800 1b01 	strb.w	r1, [r0], #1
   192b0:	f014 f9a3 	bl	2d5fa <memset>
	rp->commands[5] |= BIT(6) | BIT(7);
   192b4:	f06f 033f 	mvn.w	r3, #63	; 0x3f
   192b8:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(2);
   192ba:	2304      	movs	r3, #4
   192bc:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
   192be:	2328      	movs	r3, #40	; 0x28
   192c0:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
   192c2:	2302      	movs	r3, #2
   192c4:	7423      	strb	r3, [r4, #16]
	rp->commands[22] |= BIT(2);
   192c6:	2304      	movs	r3, #4
   192c8:	75e3      	strb	r3, [r4, #23]
	rp->commands[28] |= BIT(3);
   192ca:	2308      	movs	r3, #8
   192cc:	7763      	strb	r3, [r4, #29]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   192ce:	f06f 0308 	mvn.w	r3, #8
   192d2:	76a3      	strb	r3, [r4, #26]
	rp->commands[26] |= BIT(2) | BIT(3);
   192d4:	f06f 0330 	mvn.w	r3, #48	; 0x30
   192d8:	76e3      	strb	r3, [r4, #27]
	rp->commands[0] |= BIT(5);
   192da:	2320      	movs	r3, #32
   192dc:	7063      	strb	r3, [r4, #1]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
   192de:	f06f 0308 	mvn.w	r3, #8
   192e2:	7723      	strb	r3, [r4, #28]
	rp->commands[33] |= BIT(4) | BIT(5);
   192e4:	2330      	movs	r3, #48	; 0x30
   192e6:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	rp->commands[38] |= BIT(7);
   192ea:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   192ee:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	if (err == -EINVAL) {
   192f2:	e793      	b.n	1921c <hci_cmd_handle+0xe0>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   192f4:	2109      	movs	r1, #9
   192f6:	a805      	add	r0, sp, #20
   192f8:	f7ff fe7e 	bl	18ff8 <hci_cmd_complete>
	rp->status = 0x00;
   192fc:	4603      	mov	r3, r0
   192fe:	2200      	movs	r2, #0
   19300:	f803 2b01 	strb.w	r2, [r3], #1
   19304:	f8c0 2001 	str.w	r2, [r0, #1]
   19308:	605a      	str	r2, [r3, #4]
	rp->features[4] = (1 << 5) | (1 << 6);
   1930a:	2360      	movs	r3, #96	; 0x60
   1930c:	7143      	strb	r3, [r0, #5]
	if (err == -EINVAL) {
   1930e:	e785      	b.n	1921c <hci_cmd_handle+0xe0>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   19310:	2107      	movs	r1, #7
   19312:	a805      	add	r0, sp, #20
   19314:	f7ff fe70 	bl	18ff8 <hci_cmd_complete>
	rp->status = 0x00;
   19318:	4601      	mov	r1, r0
   1931a:	2300      	movs	r3, #0
   1931c:	f801 3b01 	strb.w	r3, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
   19320:	4618      	mov	r0, r3
   19322:	f7ff fc9f 	bl	18c64 <ll_addr_get>
	if (err == -EINVAL) {
   19326:	e779      	b.n	1921c <hci_cmd_handle+0xe0>
	switch (ocf) {
   19328:	280f      	cmp	r0, #15
   1932a:	f000 80c8 	beq.w	194be <hci_cmd_handle+0x382>
   1932e:	d848      	bhi.n	193c2 <hci_cmd_handle+0x286>
   19330:	2807      	cmp	r0, #7
   19332:	f000 8103 	beq.w	1953c <hci_cmd_handle+0x400>
   19336:	d829      	bhi.n	1938c <hci_cmd_handle+0x250>
   19338:	2803      	cmp	r0, #3
   1933a:	f000 80ac 	beq.w	19496 <hci_cmd_handle+0x35a>
   1933e:	d811      	bhi.n	19364 <hci_cmd_handle+0x228>
   19340:	2801      	cmp	r0, #1
   19342:	f000 80a3 	beq.w	1948c <hci_cmd_handle+0x350>
   19346:	2802      	cmp	r0, #2
   19348:	f47f af20 	bne.w	1918c <hci_cmd_handle+0x50>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1934c:	2104      	movs	r1, #4
   1934e:	a805      	add	r0, sp, #20
   19350:	f7ff fe52 	bl	18ff8 <hci_cmd_complete>
	rp->status = 0x00;
   19354:	2300      	movs	r3, #0
	rp->le_max_len = sys_cpu_to_le16(CONFIG_BT_CTLR_TX_BUFFER_SIZE);
   19356:	221b      	movs	r2, #27
	rp->status = 0x00;
   19358:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(CONFIG_BT_CTLR_TX_BUFFER_SIZE);
   1935a:	7083      	strb	r3, [r0, #2]
   1935c:	7042      	strb	r2, [r0, #1]
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
   1935e:	2303      	movs	r3, #3
	dst[2] = val >> 16;
   19360:	70c3      	strb	r3, [r0, #3]
	if (err == -EINVAL) {
   19362:	e75b      	b.n	1921c <hci_cmd_handle+0xe0>
	switch (ocf) {
   19364:	2805      	cmp	r0, #5
   19366:	f000 80a5 	beq.w	194b4 <hci_cmd_handle+0x378>
   1936a:	2806      	cmp	r0, #6
   1936c:	f47f af0e 	bne.w	1918c <hci_cmd_handle+0x50>
		le_set_adv_param(cmd, evt);
   19370:	68a4      	ldr	r4, [r4, #8]
	status = ll_adv_params_set(min_interval, cmd->type,
   19372:	7ba5      	ldrb	r5, [r4, #14]
   19374:	79a3      	ldrb	r3, [r4, #6]
   19376:	7962      	ldrb	r2, [r4, #5]
   19378:	7921      	ldrb	r1, [r4, #4]
   1937a:	8820      	ldrh	r0, [r4, #0]
   1937c:	9502      	str	r5, [sp, #8]
   1937e:	7b65      	ldrb	r5, [r4, #13]
   19380:	9501      	str	r5, [sp, #4]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
   19382:	3407      	adds	r4, #7
	status = ll_adv_params_set(min_interval, cmd->type,
   19384:	9400      	str	r4, [sp, #0]
   19386:	f001 fcb9 	bl	1acfc <ll_adv_params_set>
	*evt = cmd_complete_status(status);
   1938a:	e72f      	b.n	191ec <hci_cmd_handle+0xb0>
	switch (ocf) {
   1938c:	280a      	cmp	r0, #10
   1938e:	f000 80e2 	beq.w	19556 <hci_cmd_handle+0x41a>
   19392:	d80b      	bhi.n	193ac <hci_cmd_handle+0x270>
   19394:	2808      	cmp	r0, #8
   19396:	f000 80d8 	beq.w	1954a <hci_cmd_handle+0x40e>
   1939a:	2809      	cmp	r0, #9
   1939c:	f47f aef6 	bne.w	1918c <hci_cmd_handle+0x50>
	status = ll_adv_scan_rsp_set(cmd->len, &cmd->data[0]);
   193a0:	68a1      	ldr	r1, [r4, #8]
   193a2:	f811 0b01 	ldrb.w	r0, [r1], #1
   193a6:	f001 fe37 	bl	1b018 <ll_adv_scan_rsp_set>
	*evt = cmd_complete_status(status);
   193aa:	e71f      	b.n	191ec <hci_cmd_handle+0xb0>
	switch (ocf) {
   193ac:	280b      	cmp	r0, #11
   193ae:	f000 80d7 	beq.w	19560 <hci_cmd_handle+0x424>
   193b2:	280c      	cmp	r0, #12
   193b4:	f47f aeea 	bne.w	1918c <hci_cmd_handle+0x50>
	status = ll_scan_enable(cmd->enable);
   193b8:	68a3      	ldr	r3, [r4, #8]
   193ba:	7818      	ldrb	r0, [r3, #0]
   193bc:	f012 fd5d 	bl	2be7a <ll_scan_enable>
   193c0:	e714      	b.n	191ec <hci_cmd_handle+0xb0>
	switch (ocf) {
   193c2:	2816      	cmp	r0, #22
   193c4:	f000 80d8 	beq.w	19578 <hci_cmd_handle+0x43c>
   193c8:	d81f      	bhi.n	1940a <hci_cmd_handle+0x2ce>
   193ca:	2812      	cmp	r0, #18
   193cc:	f000 8084 	beq.w	194d8 <hci_cmd_handle+0x39c>
   193d0:	d808      	bhi.n	193e4 <hci_cmd_handle+0x2a8>
   193d2:	2810      	cmp	r0, #16
   193d4:	d07d      	beq.n	194d2 <hci_cmd_handle+0x396>
   193d6:	2811      	cmp	r0, #17
   193d8:	f47f aed8 	bne.w	1918c <hci_cmd_handle+0x50>
	status = ll_wl_add(&cmd->addr);
   193dc:	68a0      	ldr	r0, [r4, #8]
   193de:	f003 f935 	bl	1c64c <ll_wl_add>
	*evt = cmd_complete_status(status);
   193e2:	e703      	b.n	191ec <hci_cmd_handle+0xb0>
	switch (ocf) {
   193e4:	2813      	cmp	r0, #19
   193e6:	f000 80cc 	beq.w	19582 <hci_cmd_handle+0x446>
   193ea:	2815      	cmp	r0, #21
   193ec:	f47f aece 	bne.w	1918c <hci_cmd_handle+0x50>
	handle = sys_le16_to_cpu(cmd->handle);
   193f0:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   193f2:	2108      	movs	r1, #8
   193f4:	a805      	add	r0, sp, #20
	handle = sys_le16_to_cpu(cmd->handle);
   193f6:	881d      	ldrh	r5, [r3, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   193f8:	f7ff fdfe 	bl	18ff8 <hci_cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
   193fc:	b2ae      	uxth	r6, r5
	rp = hci_cmd_complete(evt, sizeof(*rp));
   193fe:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
   19400:	1cc1      	adds	r1, r0, #3
   19402:	4630      	mov	r0, r6
   19404:	f012 fe64 	bl	2c0d0 <ll_chm_get>
   19408:	e719      	b.n	1923e <hci_cmd_handle+0x102>
	switch (ocf) {
   1940a:	281c      	cmp	r0, #28
   1940c:	f000 8083 	beq.w	19516 <hci_cmd_handle+0x3da>
   19410:	d81c      	bhi.n	1944c <hci_cmd_handle+0x310>
   19412:	2817      	cmp	r0, #23
   19414:	d064      	beq.n	194e0 <hci_cmd_handle+0x3a4>
   19416:	2818      	cmp	r0, #24
   19418:	f47f aeb8 	bne.w	1918c <hci_cmd_handle+0x50>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1941c:	2109      	movs	r1, #9
   1941e:	a805      	add	r0, sp, #20
   19420:	f7ff fdea 	bl	18ff8 <hci_cmd_complete>
	rp->status = 0x00;
   19424:	2300      	movs	r3, #0
   19426:	f800 3b01 	strb.w	r3, [r0], #1
	lll_csrand_get(rp->rand, count);
   1942a:	2108      	movs	r1, #8
   1942c:	f003 fb52 	bl	1cad4 <lll_csrand_get>
	if (err == -EINVAL) {
   19430:	e6f4      	b.n	1921c <hci_cmd_handle+0xe0>
   19432:	bf00      	nop
   19434:	00034e61 	.word	0x00034e61
   19438:	00034e7c 	.word	0x00034e7c
   1943c:	200046c8 	.word	0x200046c8
   19440:	20000480 	.word	0x20000480
   19444:	20000488 	.word	0x20000488
   19448:	20003304 	.word	0x20003304
	switch (ocf) {
   1944c:	2821      	cmp	r0, #33	; 0x21
   1944e:	f000 80a6 	beq.w	1959e <hci_cmd_handle+0x462>
   19452:	284b      	cmp	r0, #75	; 0x4b
   19454:	f000 80ab 	beq.w	195ae <hci_cmd_handle+0x472>
   19458:	2820      	cmp	r0, #32
   1945a:	f47f ae97 	bne.w	1918c <hci_cmd_handle+0x50>
		le_conn_param_req_reply(cmd, evt);
   1945e:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   19460:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   19462:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   19464:	8853      	ldrh	r3, [r2, #2]
   19466:	9102      	str	r1, [sp, #8]
   19468:	88d1      	ldrh	r1, [r2, #6]
   1946a:	9101      	str	r1, [sp, #4]
   1946c:	8892      	ldrh	r2, [r2, #4]
   1946e:	9200      	str	r2, [sp, #0]
   19470:	2200      	movs	r2, #0
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   19472:	2102      	movs	r1, #2
   19474:	4620      	mov	r0, r4
   19476:	f012 fda9 	bl	2bfcc <ll_conn_update>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1947a:	2103      	movs	r1, #3
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   1947c:	4605      	mov	r5, r0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1947e:	a805      	add	r0, sp, #20
   19480:	f7ff fdba 	bl	18ff8 <hci_cmd_complete>
	rp->status = status;
   19484:	7005      	strb	r5, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
   19486:	f8a0 4001 	strh.w	r4, [r0, #1]
	if (err == -EINVAL) {
   1948a:	e6c7      	b.n	1921c <hci_cmd_handle+0xe0>
	le_event_mask = sys_get_le64(cmd->events);
   1948c:	68a0      	ldr	r0, [r4, #8]
   1948e:	f012 fc01 	bl	2bc94 <sys_get_le64>
   19492:	4b4d      	ldr	r3, [pc, #308]	; (195c8 <hci_cmd_handle+0x48c>)
   19494:	e6a2      	b.n	191dc <hci_cmd_handle+0xa0>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   19496:	2109      	movs	r1, #9
   19498:	a805      	add	r0, sp, #20
   1949a:	f7ff fdad 	bl	18ff8 <hci_cmd_complete>
	rp->status = 0x00;
   1949e:	4602      	mov	r2, r0
   194a0:	2300      	movs	r3, #0
   194a2:	f802 3b01 	strb.w	r3, [r2], #1
   194a6:	f8c0 3001 	str.w	r3, [r0, #1]
   194aa:	6053      	str	r3, [r2, #4]
	dst[0] = val;
   194ac:	228e      	movs	r2, #142	; 0x8e
   194ae:	7042      	strb	r2, [r0, #1]
	dst[1] = val >> 8;
   194b0:	7083      	strb	r3, [r0, #2]
   194b2:	e755      	b.n	19360 <hci_cmd_handle+0x224>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
   194b4:	68a1      	ldr	r1, [r4, #8]
   194b6:	2001      	movs	r0, #1
   194b8:	f7ff fbe6 	bl	18c88 <ll_addr_set>
	*evt = cmd_complete_status(status);
   194bc:	e696      	b.n	191ec <hci_cmd_handle+0xb0>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   194be:	2102      	movs	r1, #2
   194c0:	a805      	add	r0, sp, #20
   194c2:	f7ff fd99 	bl	18ff8 <hci_cmd_complete>
	rp->status = 0x00;
   194c6:	7005      	strb	r5, [r0, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   194c8:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
   194ca:	f012 feb9 	bl	2c240 <ll_wl_size_get>
   194ce:	7060      	strb	r0, [r4, #1]
	if (err == -EINVAL) {
   194d0:	e6a4      	b.n	1921c <hci_cmd_handle+0xe0>
	status = ll_wl_clear();
   194d2:	f003 f8a5 	bl	1c620 <ll_wl_clear>
	*evt = cmd_complete_status(status);
   194d6:	e689      	b.n	191ec <hci_cmd_handle+0xb0>
	status = ll_wl_remove(&cmd->addr);
   194d8:	68a0      	ldr	r0, [r4, #8]
   194da:	f003 f8f3 	bl	1c6c4 <ll_wl_remove>
	*evt = cmd_complete_status(status);
   194de:	e685      	b.n	191ec <hci_cmd_handle+0xb0>
		le_encrypt(cmd, evt);
   194e0:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
   194e2:	2300      	movs	r3, #0
   194e4:	aa06      	add	r2, sp, #24
   194e6:	f100 0110 	add.w	r1, r0, #16
   194ea:	f013 f8ff 	bl	2c6ec <ecb_encrypt>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   194ee:	2111      	movs	r1, #17
   194f0:	a805      	add	r0, sp, #20
   194f2:	f7ff fd81 	bl	18ff8 <hci_cmd_complete>
	rp->status = 0x00;
   194f6:	4603      	mov	r3, r0
   194f8:	2200      	movs	r2, #0
   194fa:	f803 2b01 	strb.w	r2, [r3], #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   194fe:	ad0a      	add	r5, sp, #40	; 0x28
   19500:	aa06      	add	r2, sp, #24
   19502:	4614      	mov	r4, r2
   19504:	cc03      	ldmia	r4!, {r0, r1}
   19506:	42ac      	cmp	r4, r5
   19508:	6018      	str	r0, [r3, #0]
   1950a:	6059      	str	r1, [r3, #4]
   1950c:	4622      	mov	r2, r4
   1950e:	f103 0308 	add.w	r3, r3, #8
   19512:	d1f6      	bne.n	19502 <hci_cmd_handle+0x3c6>
   19514:	e682      	b.n	1921c <hci_cmd_handle+0xe0>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   19516:	2109      	movs	r1, #9
   19518:	a805      	add	r0, sp, #20
   1951a:	f7ff fd6d 	bl	18ff8 <hci_cmd_complete>
	dst[0] = val;
   1951e:	22bf      	movs	r2, #191	; 0xbf
   19520:	7042      	strb	r2, [r0, #1]
	dst[1] = val >> 8;
   19522:	22ff      	movs	r2, #255	; 0xff
   19524:	7082      	strb	r2, [r0, #2]
	dst[0] = val;
   19526:	2230      	movs	r2, #48	; 0x30
   19528:	70c2      	strb	r2, [r0, #3]
	dst[1] = val >> 8;
   1952a:	22ec      	movs	r2, #236	; 0xec
   1952c:	7102      	strb	r2, [r0, #4]
	dst[0] = val;
   1952e:	22c0      	movs	r2, #192	; 0xc0
	rp->status = 0x00;
   19530:	2300      	movs	r3, #0
   19532:	7142      	strb	r2, [r0, #5]
	dst[1] = val >> 8;
   19534:	2201      	movs	r2, #1
   19536:	7003      	strb	r3, [r0, #0]
   19538:	7182      	strb	r2, [r0, #6]
   1953a:	e6ad      	b.n	19298 <hci_cmd_handle+0x15c>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1953c:	2102      	movs	r1, #2
   1953e:	a805      	add	r0, sp, #20
   19540:	f7ff fd5a 	bl	18ff8 <hci_cmd_complete>
	rp->status = 0x00;
   19544:	7005      	strb	r5, [r0, #0]
	rp->tx_power_level = 0;
   19546:	7045      	strb	r5, [r0, #1]
	if (err == -EINVAL) {
   19548:	e668      	b.n	1921c <hci_cmd_handle+0xe0>
	status = ll_adv_data_set(cmd->len, &cmd->data[0]);
   1954a:	68a1      	ldr	r1, [r4, #8]
   1954c:	f811 0b01 	ldrb.w	r0, [r1], #1
   19550:	f001 fd5a 	bl	1b008 <ll_adv_data_set>
	*evt = cmd_complete_status(status);
   19554:	e64a      	b.n	191ec <hci_cmd_handle+0xb0>
	status = ll_adv_enable(cmd->enable);
   19556:	68a3      	ldr	r3, [r4, #8]
   19558:	7818      	ldrb	r0, [r3, #0]
   1955a:	f7e8 fd01 	bl	1f60 <ll_adv_enable>
	*evt = cmd_complete_status(status);
   1955e:	e645      	b.n	191ec <hci_cmd_handle+0xb0>
		le_set_scan_param(cmd, evt);
   19560:	68a4      	ldr	r4, [r4, #8]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
   19562:	7963      	ldrb	r3, [r4, #5]
   19564:	f8b4 2003 	ldrh.w	r2, [r4, #3]
   19568:	f8b4 1001 	ldrh.w	r1, [r4, #1]
   1956c:	7820      	ldrb	r0, [r4, #0]
   1956e:	79a4      	ldrb	r4, [r4, #6]
   19570:	9400      	str	r4, [sp, #0]
   19572:	f7e8 ff35 	bl	23e0 <ll_scan_params_set>
	*evt = cmd_complete_status(status);
   19576:	e639      	b.n	191ec <hci_cmd_handle+0xb0>
	handle = sys_le16_to_cpu(cmd->handle);
   19578:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
   1957a:	8818      	ldrh	r0, [r3, #0]
   1957c:	f012 fde5 	bl	2c14a <ll_feature_req_send>
	*evt = cmd_status(status);
   19580:	e620      	b.n	191c4 <hci_cmd_handle+0x88>
		le_conn_update(cmd, evt);
   19582:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_min,
   19584:	8911      	ldrh	r1, [r2, #8]
   19586:	8853      	ldrh	r3, [r2, #2]
   19588:	8810      	ldrh	r0, [r2, #0]
   1958a:	9102      	str	r1, [sp, #8]
   1958c:	88d1      	ldrh	r1, [r2, #6]
   1958e:	9101      	str	r1, [sp, #4]
   19590:	8892      	ldrh	r2, [r2, #4]
   19592:	9200      	str	r2, [sp, #0]
   19594:	2200      	movs	r2, #0
   19596:	4611      	mov	r1, r2
   19598:	f012 fd18 	bl	2bfcc <ll_conn_update>
	*evt = cmd_status(status);
   1959c:	e612      	b.n	191c4 <hci_cmd_handle+0x88>
		le_conn_param_req_neg_reply(cmd, evt);
   1959e:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   195a0:	881c      	ldrh	r4, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   195a2:	789a      	ldrb	r2, [r3, #2]
   195a4:	2300      	movs	r3, #0
   195a6:	e9cd 3301 	strd	r3, r3, [sp, #4]
   195aa:	9300      	str	r3, [sp, #0]
   195ac:	e761      	b.n	19472 <hci_cmd_handle+0x336>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   195ae:	2103      	movs	r1, #3
   195b0:	a805      	add	r0, sp, #20
   195b2:	f7ff fd21 	bl	18ff8 <hci_cmd_complete>
	rp->status = 0x00;
   195b6:	4601      	mov	r1, r0
   195b8:	2300      	movs	r3, #0
   195ba:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
   195be:	3001      	adds	r0, #1
   195c0:	f012 fb64 	bl	2bc8c <ll_tx_pwr_get>
	if (err == -EINVAL) {
   195c4:	e62a      	b.n	1921c <hci_cmd_handle+0xe0>
   195c6:	bf00      	nop
   195c8:	20000488 	.word	0x20000488

000195cc <hci_acl_handle>:
{
   195cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	*evt = NULL;
   195d0:	2300      	movs	r3, #0
   195d2:	600b      	str	r3, [r1, #0]
	if (buf->len < sizeof(*acl)) {
   195d4:	8983      	ldrh	r3, [r0, #12]
   195d6:	2b03      	cmp	r3, #3
{
   195d8:	4605      	mov	r5, r0
   195da:	4688      	mov	r8, r1
	if (buf->len < sizeof(*acl)) {
   195dc:	d806      	bhi.n	195ec <hci_acl_handle+0x20>
		BT_ERR("No HCI ACL header");
   195de:	4832      	ldr	r0, [pc, #200]	; (196a8 <hci_acl_handle+0xdc>)
   195e0:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Invalid HCI ACL packet length");
   195e2:	f00d fcc4 	bl	26f6e <printk>
		return -EINVAL;
   195e6:	f06f 0015 	mvn.w	r0, #21
   195ea:	e037      	b.n	1965c <hci_acl_handle+0x90>
   195ec:	2104      	movs	r1, #4
   195ee:	3008      	adds	r0, #8
   195f0:	f005 fde2 	bl	1f1b8 <net_buf_simple_pull_mem>
	if (buf->len < len) {
   195f4:	89ab      	ldrh	r3, [r5, #12]
	len = sys_le16_to_cpu(acl->len);
   195f6:	8847      	ldrh	r7, [r0, #2]
	handle = sys_le16_to_cpu(acl->handle);
   195f8:	f8b0 9000 	ldrh.w	r9, [r0]
	if (buf->len < len) {
   195fc:	42bb      	cmp	r3, r7
   195fe:	d202      	bcs.n	19606 <hci_acl_handle+0x3a>
		BT_ERR("Invalid HCI ACL packet length");
   19600:	2145      	movs	r1, #69	; 0x45
   19602:	482a      	ldr	r0, [pc, #168]	; (196ac <hci_acl_handle+0xe0>)
   19604:	e7ed      	b.n	195e2 <hci_acl_handle+0x16>
	node_tx = ll_tx_mem_acquire();
   19606:	f001 ff45 	bl	1b494 <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
   1960a:	ea4f 3619 	mov.w	r6, r9, lsr #12
	if (!node_tx) {
   1960e:	4604      	mov	r4, r0
   19610:	bb30      	cbnz	r0, 19660 <hci_acl_handle+0x94>
		BT_ERR("Tx Buffer Overflow");
   19612:	2145      	movs	r1, #69	; 0x45
   19614:	4826      	ldr	r0, [pc, #152]	; (196b0 <hci_acl_handle+0xe4>)
   19616:	f00d fcaa 	bl	26f6e <printk>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
   1961a:	4b26      	ldr	r3, [pc, #152]	; (196b4 <hci_acl_handle+0xe8>)
   1961c:	6819      	ldr	r1, [r3, #0]
   1961e:	4623      	mov	r3, r4
   19620:	f001 7200 	and.w	r2, r1, #33554432	; 0x2000000
   19624:	4313      	orrs	r3, r2
   19626:	d017      	beq.n	19658 <hci_acl_handle+0x8c>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   19628:	f04f 32ff 	mov.w	r2, #4294967295
   1962c:	f04f 33ff 	mov.w	r3, #4294967295
   19630:	2001      	movs	r0, #1
   19632:	f7ee fc23 	bl	7e7c <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
   19636:	2102      	movs	r1, #2
   19638:	f8c8 0000 	str.w	r0, [r8]
   1963c:	3008      	adds	r0, #8
   1963e:	f005 fdd9 	bl	1f1f4 <net_buf_simple_add>
	hdr->len = len;
   19642:	2401      	movs	r4, #1
	hdr->evt = evt;
   19644:	231a      	movs	r3, #26
   19646:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   19648:	7044      	strb	r4, [r0, #1]
   1964a:	f8d8 0000 	ldr.w	r0, [r8]
   1964e:	4621      	mov	r1, r4
   19650:	3008      	adds	r0, #8
   19652:	f005 fdcf 	bl	1f1f4 <net_buf_simple_add>
	ep->link_type = BT_OVERFLOW_LINK_ACL;
   19656:	7004      	strb	r4, [r0, #0]
		return -ENOBUFS;
   19658:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   1965c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (bt_acl_flags_bc(flags) != BT_ACL_POINT_TO_POINT) {
   19660:	08b3      	lsrs	r3, r6, #2
   19662:	d1c0      	bne.n	195e6 <hci_acl_handle+0x1a>
	switch (bt_acl_flags_pb(flags)) {
   19664:	b12e      	cbz	r6, 19672 <hci_acl_handle+0xa6>
   19666:	2e01      	cmp	r6, #1
   19668:	d1bd      	bne.n	195e6 <hci_acl_handle+0x1a>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1966a:	7903      	ldrb	r3, [r0, #4]
   1966c:	f366 0301 	bfi	r3, r6, #0, #2
   19670:	e003      	b.n	1967a <hci_acl_handle+0xae>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
   19672:	7903      	ldrb	r3, [r0, #4]
   19674:	2202      	movs	r2, #2
   19676:	f362 0301 	bfi	r3, r2, #0, #2
	pdu_data->len = len;
   1967a:	7167      	strb	r7, [r4, #5]
   1967c:	68a9      	ldr	r1, [r5, #8]
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1967e:	7123      	strb	r3, [r4, #4]
   19680:	463a      	mov	r2, r7
   19682:	1de0      	adds	r0, r4, #7
   19684:	f013 ff7e 	bl	2d584 <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
   19688:	4621      	mov	r1, r4
   1968a:	f3c9 000b 	ubfx	r0, r9, #0, #12
   1968e:	f001 ff0d 	bl	1b4ac <ll_tx_mem_enqueue>
   19692:	2800      	cmp	r0, #0
   19694:	d0e2      	beq.n	1965c <hci_acl_handle+0x90>
		BT_ERR("Invalid Tx Enqueue");
   19696:	2145      	movs	r1, #69	; 0x45
   19698:	4807      	ldr	r0, [pc, #28]	; (196b8 <hci_acl_handle+0xec>)
   1969a:	f00d fc68 	bl	26f6e <printk>
		ll_tx_mem_release(node_tx);
   1969e:	4620      	mov	r0, r4
   196a0:	f001 fefe 	bl	1b4a0 <ll_tx_mem_release>
		return -EINVAL;
   196a4:	e79f      	b.n	195e6 <hci_acl_handle+0x1a>
   196a6:	bf00      	nop
   196a8:	00034df7 	.word	0x00034df7
   196ac:	00034e0e 	.word	0x00034e0e
   196b0:	00034e31 	.word	0x00034e31
   196b4:	20000480 	.word	0x20000480
   196b8:	00034e49 	.word	0x00034e49

000196bc <hci_disconn_complete_encode>:
{
   196bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
   196be:	4b0f      	ldr	r3, [pc, #60]	; (196fc <hci_disconn_complete_encode+0x40>)
   196c0:	681b      	ldr	r3, [r3, #0]
   196c2:	2500      	movs	r5, #0
{
   196c4:	4606      	mov	r6, r0
   196c6:	460f      	mov	r7, r1
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
   196c8:	f003 0010 	and.w	r0, r3, #16
   196cc:	4629      	mov	r1, r5
   196ce:	ea50 0301 	orrs.w	r3, r0, r1
   196d2:	d011      	beq.n	196f8 <hci_disconn_complete_encode+0x3c>
   196d4:	f102 0408 	add.w	r4, r2, #8
   196d8:	2102      	movs	r1, #2
   196da:	4620      	mov	r0, r4
   196dc:	f005 fd8a 	bl	1f1f4 <net_buf_simple_add>
	hdr->evt = evt;
   196e0:	2305      	movs	r3, #5
	hdr->len = len;
   196e2:	2104      	movs	r1, #4
	hdr->evt = evt;
   196e4:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   196e6:	7041      	strb	r1, [r0, #1]
   196e8:	4620      	mov	r0, r4
   196ea:	f005 fd83 	bl	1f1f4 <net_buf_simple_add>
	ep->status = 0x00;
   196ee:	7005      	strb	r5, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   196f0:	f8a0 7001 	strh.w	r7, [r0, #1]
	ep->reason = *((uint8_t *)pdu_data);
   196f4:	7833      	ldrb	r3, [r6, #0]
   196f6:	70c3      	strb	r3, [r0, #3]
}
   196f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   196fa:	bf00      	nop
   196fc:	20000480 	.word	0x20000480

00019700 <hci_disconn_complete_process>:
	conn_count--;
   19700:	4a02      	ldr	r2, [pc, #8]	; (1970c <hci_disconn_complete_process+0xc>)
   19702:	6813      	ldr	r3, [r2, #0]
   19704:	3b01      	subs	r3, #1
   19706:	6013      	str	r3, [r2, #0]
}
   19708:	4770      	bx	lr
   1970a:	bf00      	nop
   1970c:	20003304 	.word	0x20003304

00019710 <hci_acl_encode>:
	uint16_t handle;
	uint8_t *data;

	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
   19710:	7f03      	ldrb	r3, [r0, #28]
   19712:	f003 0303 	and.w	r3, r3, #3
   19716:	3b01      	subs	r3, #1
   19718:	2b01      	cmp	r3, #1
{
   1971a:	b570      	push	{r4, r5, r6, lr}
   1971c:	4604      	mov	r4, r0
	switch (pdu_data->ll_id) {
   1971e:	d81c      	bhi.n	1975a <hci_acl_encode+0x4a>
   19720:	f101 0608 	add.w	r6, r1, #8
	handle = node_rx->hdr.handle;
   19724:	88c5      	ldrh	r5, [r0, #6]
   19726:	2104      	movs	r1, #4
   19728:	4630      	mov	r0, r6
   1972a:	f005 fd63 	bl	1f1f4 <net_buf_simple_add>
	case PDU_DATA_LLID_DATA_CONTINUE:
	case PDU_DATA_LLID_DATA_START:
		acl = (void *)net_buf_add(buf, sizeof(*acl));
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
   1972e:	7f23      	ldrb	r3, [r4, #28]
   19730:	f003 0303 	and.w	r3, r3, #3
   19734:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
   19736:	bf0c      	ite	eq
   19738:	f445 5500 	orreq.w	r5, r5, #8192	; 0x2000
		} else {
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
   1973c:	f445 5580 	orrne.w	r5, r5, #4096	; 0x1000
		}
		acl->handle = sys_cpu_to_le16(handle_flags);
   19740:	8005      	strh	r5, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
   19742:	7f61      	ldrb	r1, [r4, #29]
   19744:	8041      	strh	r1, [r0, #2]
   19746:	4630      	mov	r0, r6
   19748:	f005 fd54 	bl	1f1f4 <net_buf_simple_add>
   1974c:	7f62      	ldrb	r2, [r4, #29]
   1974e:	f104 011f 	add.w	r1, r4, #31

	default:
		LL_ASSERT(0);
		break;
	}
}
   19752:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   19756:	f013 bf15 	b.w	2d584 <memcpy>
		LL_ASSERT(0);
   1975a:	f241 726b 	movw	r2, #5995	; 0x176b
   1975e:	4905      	ldr	r1, [pc, #20]	; (19774 <hci_acl_encode+0x64>)
   19760:	4805      	ldr	r0, [pc, #20]	; (19778 <hci_acl_encode+0x68>)
   19762:	f00d fc04 	bl	26f6e <printk>
   19766:	4040      	eors	r0, r0
   19768:	f380 8811 	msr	BASEPRI, r0
   1976c:	f04f 0003 	mov.w	r0, #3
   19770:	df02      	svc	2
}
   19772:	bd70      	pop	{r4, r5, r6, pc}
   19774:	00034dbe 	.word	0x00034dbe
   19778:	0002fa94 	.word	0x0002fa94

0001977c <hci_evt_encode>:
#endif /* CONFIG_BT_CONN */

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
   1977c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19780:	4604      	mov	r4, r0
   19782:	b086      	sub	sp, #24
	struct pdu_data *pdu_data = (void *)node_rx->pdu;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   19784:	7923      	ldrb	r3, [r4, #4]
   19786:	88e7      	ldrh	r7, [r4, #6]
   19788:	2b03      	cmp	r3, #3
{
   1978a:	460e      	mov	r6, r1
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
   1978c:	f100 001c 	add.w	r0, r0, #28
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   19790:	f000 8112 	beq.w	199b8 <hci_evt_encode+0x23c>
	switch (node_rx->hdr.type) {
   19794:	2b13      	cmp	r3, #19
   19796:	f000 80c1 	beq.w	1991c <hci_evt_encode+0x1a0>
   1979a:	d80e      	bhi.n	197ba <hci_evt_encode+0x3e>
   1979c:	2b04      	cmp	r3, #4
   1979e:	d033      	beq.n	19808 <hci_evt_encode+0x8c>
		LL_ASSERT(0);
   197a0:	f241 6276 	movw	r2, #5750	; 0x1676
		LL_ASSERT(0);
   197a4:	49aa      	ldr	r1, [pc, #680]	; (19a50 <hci_evt_encode+0x2d4>)
   197a6:	48ab      	ldr	r0, [pc, #684]	; (19a54 <hci_evt_encode+0x2d8>)
   197a8:	f00d fbe1 	bl	26f6e <printk>
   197ac:	4040      	eors	r0, r0
   197ae:	f380 8811 	msr	BASEPRI, r0
   197b2:	f04f 0003 	mov.w	r0, #3
   197b6:	df02      	svc	2
		encode_control(node_rx, pdu_data, buf);
	} else if (IS_ENABLED(CONFIG_BT_CONN)) {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
   197b8:	e074      	b.n	198a4 <hci_evt_encode+0x128>
	switch (node_rx->hdr.type) {
   197ba:	2b14      	cmp	r3, #20
   197bc:	f000 80f5 	beq.w	199aa <hci_evt_encode+0x22e>
   197c0:	2b15      	cmp	r3, #21
   197c2:	d1ed      	bne.n	197a0 <hci_evt_encode+0x24>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   197c4:	4ba4      	ldr	r3, [pc, #656]	; (19a58 <hci_evt_encode+0x2dc>)
   197c6:	6858      	ldr	r0, [r3, #4]
   197c8:	2100      	movs	r1, #0
   197ca:	460a      	mov	r2, r1
   197cc:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   197d0:	4313      	orrs	r3, r2
   197d2:	d067      	beq.n	198a4 <hci_evt_encode+0x128>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
   197d4:	4ba1      	ldr	r3, [pc, #644]	; (19a5c <hci_evt_encode+0x2e0>)
   197d6:	6818      	ldr	r0, [r3, #0]
   197d8:	460b      	mov	r3, r1
   197da:	f000 0204 	and.w	r2, r0, #4
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   197de:	4313      	orrs	r3, r2
   197e0:	d060      	beq.n	198a4 <hci_evt_encode+0x128>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
   197e2:	2209      	movs	r2, #9
   197e4:	2103      	movs	r1, #3
   197e6:	4630      	mov	r0, r6
   197e8:	f012 fa58 	bl	2bc9c <meta_evt>
	sep->status = cu->status;
   197ec:	7f23      	ldrb	r3, [r4, #28]
   197ee:	7003      	strb	r3, [r0, #0]
	sep->interval = sys_cpu_to_le16(cu->interval);
   197f0:	8be3      	ldrh	r3, [r4, #30]
   197f2:	f8a0 3003 	strh.w	r3, [r0, #3]
	sep->latency = sys_cpu_to_le16(cu->latency);
   197f6:	8c23      	ldrh	r3, [r4, #32]
   197f8:	f8a0 3005 	strh.w	r3, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   197fc:	8c63      	ldrh	r3, [r4, #34]	; 0x22
	sep->handle = sys_cpu_to_le16(handle);
   197fe:	f8a0 7001 	strh.w	r7, [r0, #1]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   19802:	f8a0 3007 	strh.w	r3, [r0, #7]
   19806:	e04d      	b.n	198a4 <hci_evt_encode+0x128>
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   19808:	4b95      	ldr	r3, [pc, #596]	; (19a60 <hci_evt_encode+0x2e4>)
   1980a:	9304      	str	r3, [sp, #16]
   1980c:	f64f 7304 	movw	r3, #65284	; 0xff04
   19810:	f8ad 3014 	strh.w	r3, [sp, #20]
   19814:	2302      	movs	r3, #2
   19816:	f88d 3016 	strb.w	r3, [sp, #22]
	rssi = -(node_rx->hdr.rx_ftr.rssi);
   1981a:	4b8f      	ldr	r3, [pc, #572]	; (19a58 <hci_evt_encode+0x2dc>)
   1981c:	7e27      	ldrb	r7, [r4, #24]
   1981e:	6858      	ldr	r0, [r3, #4]
	direct = node_rx->hdr.rx_ftr.direct;
   19820:	7e65      	ldrb	r5, [r4, #25]
	rssi = -(node_rx->hdr.rx_ftr.rssi);
   19822:	427f      	negs	r7, r7
   19824:	2100      	movs	r1, #0
   19826:	b27f      	sxtb	r7, r7
	if (direct) {
   19828:	460a      	mov	r2, r1
   1982a:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   1982e:	2d00      	cmp	r5, #0
   19830:	d03b      	beq.n	198aa <hci_evt_encode+0x12e>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   19832:	4313      	orrs	r3, r2
   19834:	d036      	beq.n	198a4 <hci_evt_encode+0x128>
	    !(le_event_mask & BT_EVT_MASK_LE_DIRECT_ADV_REPORT)) {
   19836:	4b89      	ldr	r3, [pc, #548]	; (19a5c <hci_evt_encode+0x2e0>)
   19838:	6818      	ldr	r0, [r3, #0]
   1983a:	460b      	mov	r3, r1
   1983c:	f400 6280 	and.w	r2, r0, #1024	; 0x400
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   19840:	4313      	orrs	r3, r2
   19842:	d02f      	beq.n	198a4 <hci_evt_encode+0x128>
	LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
   19844:	7f23      	ldrb	r3, [r4, #28]
   19846:	f003 030f 	and.w	r3, r3, #15
   1984a:	2b01      	cmp	r3, #1
   1984c:	d00b      	beq.n	19866 <hci_evt_encode+0xea>
   1984e:	f241 0281 	movw	r2, #4225	; 0x1081
   19852:	497f      	ldr	r1, [pc, #508]	; (19a50 <hci_evt_encode+0x2d4>)
   19854:	487f      	ldr	r0, [pc, #508]	; (19a54 <hci_evt_encode+0x2d8>)
   19856:	f00d fb8a 	bl	26f6e <printk>
   1985a:	4040      	eors	r0, r0
   1985c:	f380 8811 	msr	BASEPRI, r0
   19860:	f04f 0003 	mov.w	r0, #3
   19864:	df02      	svc	2
	drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
   19866:	2211      	movs	r2, #17
   19868:	210b      	movs	r1, #11
   1986a:	4630      	mov	r0, r6
   1986c:	f012 fa16 	bl	2bc9c <meta_evt>
	drp->num_reports = 1U;
   19870:	2301      	movs	r3, #1
   19872:	7003      	strb	r3, [r0, #0]
	dir_info->evt_type = BT_HCI_ADV_DIRECT_IND;
   19874:	7043      	strb	r3, [r0, #1]
		dir_info->addr.type = adv->tx_addr;
   19876:	7f23      	ldrb	r3, [r4, #28]
   19878:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1987c:	7083      	strb	r3, [r0, #2]
   1987e:	4623      	mov	r3, r4
   19880:	f853 2f1e 	ldr.w	r2, [r3, #30]!
   19884:	f8c0 2003 	str.w	r2, [r0, #3]
   19888:	889b      	ldrh	r3, [r3, #4]
   1988a:	f8a0 3007 	strh.w	r3, [r0, #7]
	dir_info->dir_addr.type = adv->rx_addr;
   1988e:	7f23      	ldrb	r3, [r4, #28]
   19890:	f3c3 13c0 	ubfx	r3, r3, #7, #1
   19894:	7243      	strb	r3, [r0, #9]
   19896:	f854 3f24 	ldr.w	r3, [r4, #36]!
   1989a:	f8c0 300a 	str.w	r3, [r0, #10]
   1989e:	88a3      	ldrh	r3, [r4, #4]
   198a0:	81c3      	strh	r3, [r0, #14]
	dir_info->rssi = rssi;
   198a2:	7407      	strb	r7, [r0, #16]
}
   198a4:	b006      	add	sp, #24
   198a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   198aa:	4313      	orrs	r3, r2
   198ac:	d0fa      	beq.n	198a4 <hci_evt_encode+0x128>
	    !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) {
   198ae:	4b6b      	ldr	r3, [pc, #428]	; (19a5c <hci_evt_encode+0x2e0>)
   198b0:	6819      	ldr	r1, [r3, #0]
   198b2:	462b      	mov	r3, r5
   198b4:	f001 0202 	and.w	r2, r1, #2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   198b8:	4313      	orrs	r3, r2
   198ba:	d0f3      	beq.n	198a4 <hci_evt_encode+0x128>
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
   198bc:	7f23      	ldrb	r3, [r4, #28]
   198be:	f003 030f 	and.w	r3, r3, #15
   198c2:	2b01      	cmp	r3, #1
		data_len = (adv->len - BDADDR_SIZE);
   198c4:	bf1e      	ittt	ne
   198c6:	7f65      	ldrbne	r5, [r4, #29]
   198c8:	3d06      	subne	r5, #6
   198ca:	b2ed      	uxtbne	r5, r5
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
   198cc:	f105 020b 	add.w	r2, r5, #11
   198d0:	b2d2      	uxtb	r2, r2
   198d2:	2102      	movs	r1, #2
   198d4:	4630      	mov	r0, r6
   198d6:	f012 f9e1 	bl	2bc9c <meta_evt>
	sep->num_reports = 1U;
   198da:	2301      	movs	r3, #1
   198dc:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
   198de:	7f23      	ldrb	r3, [r4, #28]
   198e0:	aa06      	add	r2, sp, #24
   198e2:	f003 030f 	and.w	r3, r3, #15
   198e6:	4413      	add	r3, r2
   198e8:	f104 0124 	add.w	r1, r4, #36	; 0x24
   198ec:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   198f0:	7043      	strb	r3, [r0, #1]
		adv_info->addr.type = adv->tx_addr;
   198f2:	7f23      	ldrb	r3, [r4, #28]
   198f4:	f3c3 1380 	ubfx	r3, r3, #6, #1
   198f8:	7083      	strb	r3, [r0, #2]
   198fa:	4623      	mov	r3, r4
   198fc:	f853 2f1e 	ldr.w	r2, [r3, #30]!
   19900:	f8c0 2003 	str.w	r2, [r0, #3]
   19904:	889b      	ldrh	r3, [r3, #4]
   19906:	f8a0 3007 	strh.w	r3, [r0, #7]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
   1990a:	f100 030a 	add.w	r3, r0, #10
	adv_info->length = data_len;
   1990e:	7245      	strb	r5, [r0, #9]
   19910:	462a      	mov	r2, r5
   19912:	4618      	mov	r0, r3
   19914:	f013 fe36 	bl	2d584 <memcpy>
	*prssi = rssi;
   19918:	5547      	strb	r7, [r0, r5]
   1991a:	e7c3      	b.n	198a4 <hci_evt_encode+0x128>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1991c:	4b4e      	ldr	r3, [pc, #312]	; (19a58 <hci_evt_encode+0x2dc>)
   1991e:	6858      	ldr	r0, [r3, #4]
   19920:	2100      	movs	r1, #0
   19922:	460a      	mov	r2, r1
   19924:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   19928:	4313      	orrs	r3, r2
   1992a:	d0bb      	beq.n	198a4 <hci_evt_encode+0x128>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   1992c:	4b4b      	ldr	r3, [pc, #300]	; (19a5c <hci_evt_encode+0x2e0>)
   1992e:	6818      	ldr	r0, [r3, #0]
   19930:	460b      	mov	r3, r1
   19932:	f000 0201 	and.w	r2, r0, #1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   19936:	4313      	orrs	r3, r2
   19938:	d0b4      	beq.n	198a4 <hci_evt_encode+0x128>
	uint8_t status = cc->status;
   1993a:	f894 801c 	ldrb.w	r8, [r4, #28]
	if (!status) {
   1993e:	f1b8 0f00 	cmp.w	r8, #0
   19942:	d103      	bne.n	1994c <hci_evt_encode+0x1d0>
		conn_count++;
   19944:	4a47      	ldr	r2, [pc, #284]	; (19a64 <hci_evt_encode+0x2e8>)
   19946:	6813      	ldr	r3, [r2, #0]
   19948:	3301      	adds	r3, #1
   1994a:	6013      	str	r3, [r2, #0]
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
   1994c:	2212      	movs	r2, #18
   1994e:	2101      	movs	r1, #1
   19950:	4630      	mov	r0, r6
   19952:	f012 f9a3 	bl	2bc9c <meta_evt>
   19956:	4605      	mov	r5, r0
	if (status) {
   19958:	f1b8 0f00 	cmp.w	r8, #0
   1995c:	d006      	beq.n	1996c <hci_evt_encode+0x1f0>
__ssp_bos_icheck3(memset, void *, int)
   1995e:	2212      	movs	r2, #18
   19960:	2100      	movs	r1, #0
   19962:	f013 fe4a 	bl	2d5fa <memset>
		lecc->status = status;
   19966:	f885 8000 	strb.w	r8, [r5]
		return;
   1996a:	e79b      	b.n	198a4 <hci_evt_encode+0x128>
	lecc->status = 0x00;
   1996c:	f880 8000 	strb.w	r8, [r0]
	lecc->handle = sys_cpu_to_le16(handle);
   19970:	f8a0 7001 	strh.w	r7, [r0, #1]
	lecc->role = cc->role;
   19974:	7f63      	ldrb	r3, [r4, #29]
   19976:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = cc->peer_addr_type & 0x1;
   19978:	7fa3      	ldrb	r3, [r4, #30]
   1997a:	f003 0301 	and.w	r3, r3, #1
   1997e:	7103      	strb	r3, [r0, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   19980:	4623      	mov	r3, r4
   19982:	f853 2f1f 	ldr.w	r2, [r3, #31]!
   19986:	f8c0 2005 	str.w	r2, [r0, #5]
   1998a:	889b      	ldrh	r3, [r3, #4]
   1998c:	f8a0 3009 	strh.w	r3, [r0, #9]
	lecc->interval = sys_cpu_to_le16(cc->interval);
   19990:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   19992:	f8a0 300b 	strh.w	r3, [r0, #11]
	lecc->latency = sys_cpu_to_le16(cc->latency);
   19996:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   19998:	f8a0 300d 	strh.w	r3, [r0, #13]
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   1999c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   1999e:	f8a0 300f 	strh.w	r3, [r0, #15]
	lecc->clock_accuracy = cc->sca;
   199a2:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   199a6:	7443      	strb	r3, [r0, #17]
   199a8:	e77c      	b.n	198a4 <hci_evt_encode+0x128>
		hci_disconn_complete_encode(pdu_data, handle, buf);
   199aa:	460a      	mov	r2, r1
   199ac:	4639      	mov	r1, r7
}
   199ae:	b006      	add	sp, #24
   199b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		hci_disconn_complete_encode(pdu_data, handle, buf);
   199b4:	f7ff be82 	b.w	196bc <hci_disconn_complete_encode>
	switch (pdu_data->llctrl.opcode) {
   199b8:	7fe3      	ldrb	r3, [r4, #31]
   199ba:	2b09      	cmp	r3, #9
   199bc:	d00c      	beq.n	199d8 <hci_evt_encode+0x25c>
   199be:	2b0f      	cmp	r3, #15
   199c0:	d013      	beq.n	199ea <hci_evt_encode+0x26e>
   199c2:	2b07      	cmp	r3, #7
   199c4:	d140      	bne.n	19a48 <hci_evt_encode+0x2cc>
		le_unknown_rsp(pdu_data, handle, buf);
   199c6:	f894 2020 	ldrb.w	r2, [r4, #32]
	switch (pdu_data->llctrl.unknown_rsp.type) {
   199ca:	2a0e      	cmp	r2, #14
   199cc:	d135      	bne.n	19a3a <hci_evt_encode+0x2be>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   199ce:	460b      	mov	r3, r1
   199d0:	463a      	mov	r2, r7
   199d2:	2100      	movs	r1, #0
   199d4:	201a      	movs	r0, #26
   199d6:	e003      	b.n	199e0 <hci_evt_encode+0x264>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
   199d8:	460b      	mov	r3, r1
   199da:	463a      	mov	r2, r7
   199dc:	4601      	mov	r1, r0
   199de:	2000      	movs	r0, #0
}
   199e0:	b006      	add	sp, #24
   199e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   199e6:	f7ff bad9 	b.w	18f9c <le_remote_feat_complete>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   199ea:	4b1b      	ldr	r3, [pc, #108]	; (19a58 <hci_evt_encode+0x2dc>)
   199ec:	6858      	ldr	r0, [r3, #4]
   199ee:	2100      	movs	r1, #0
   199f0:	460a      	mov	r2, r1
   199f2:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   199f6:	4313      	orrs	r3, r2
   199f8:	d006      	beq.n	19a08 <hci_evt_encode+0x28c>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
   199fa:	4b18      	ldr	r3, [pc, #96]	; (19a5c <hci_evt_encode+0x2e0>)
   199fc:	6818      	ldr	r0, [r3, #0]
   199fe:	460b      	mov	r3, r1
   19a00:	f000 0220 	and.w	r2, r0, #32
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   19a04:	4313      	orrs	r3, r2
   19a06:	d109      	bne.n	19a1c <hci_evt_encode+0x2a0>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE, 0,
   19a08:	2300      	movs	r3, #0
   19a0a:	e9cd 3301 	strd	r3, r3, [sp, #4]
   19a0e:	9300      	str	r3, [sp, #0]
   19a10:	221a      	movs	r2, #26
   19a12:	2102      	movs	r1, #2
   19a14:	4638      	mov	r0, r7
   19a16:	f012 fad9 	bl	2bfcc <ll_conn_update>
		return;
   19a1a:	e743      	b.n	198a4 <hci_evt_encode+0x128>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
   19a1c:	220a      	movs	r2, #10
   19a1e:	2106      	movs	r1, #6
   19a20:	4630      	mov	r0, r6
   19a22:	f012 f93b 	bl	2bc9c <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
   19a26:	8007      	strh	r7, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
   19a28:	8c23      	ldrh	r3, [r4, #32]
   19a2a:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
   19a2c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   19a2e:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
   19a30:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   19a32:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
   19a34:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   19a36:	8103      	strh	r3, [r0, #8]
   19a38:	e734      	b.n	198a4 <hci_evt_encode+0x128>
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
   19a3a:	480b      	ldr	r0, [pc, #44]	; (19a68 <hci_evt_encode+0x2ec>)
   19a3c:	2157      	movs	r1, #87	; 0x57
}
   19a3e:	b006      	add	sp, #24
   19a40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
   19a44:	f00d ba93 	b.w	26f6e <printk>
		LL_ASSERT(0);
   19a48:	f241 723f 	movw	r2, #5951	; 0x173f
   19a4c:	e6aa      	b.n	197a4 <hci_evt_encode+0x28>
   19a4e:	bf00      	nop
   19a50:	00034dbe 	.word	0x00034dbe
   19a54:	0002fa94 	.word	0x0002fa94
   19a58:	20000480 	.word	0x20000480
   19a5c:	20000488 	.word	0x20000488
   19a60:	ff030100 	.word	0xff030100
   19a64:	20003304 	.word	0x20003304
   19a68:	00034e9f 	.word	0x00034e9f

00019a6c <hci_init>:
	event_mask = DEFAULT_EVENT_MASK;
   19a6c:	4b07      	ldr	r3, [pc, #28]	; (19a8c <hci_init+0x20>)
   19a6e:	f04f 30ff 	mov.w	r0, #4294967295
   19a72:	f641 71ff 	movw	r1, #8191	; 0x1fff
   19a76:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   19a7a:	4b05      	ldr	r3, [pc, #20]	; (19a90 <hci_init+0x24>)
   19a7c:	201f      	movs	r0, #31
   19a7e:	2100      	movs	r1, #0
   19a80:	e9c3 0100 	strd	r0, r1, [r3]
	conn_count = 0U;
   19a84:	4b03      	ldr	r3, [pc, #12]	; (19a94 <hci_init+0x28>)
   19a86:	2200      	movs	r2, #0
   19a88:	601a      	str	r2, [r3, #0]
{
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
   19a8a:	4770      	bx	lr
   19a8c:	20000480 	.word	0x20000480
   19a90:	20000488 	.word	0x20000488
   19a94:	20003304 	.word	0x20003304

00019a98 <ll_rx_link_inc_quota>:
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   19a98:	2801      	cmp	r0, #1
{
   19a9a:	b538      	push	{r3, r4, r5, lr}
   19a9c:	4604      	mov	r4, r0
   19a9e:	4d0a      	ldr	r5, [pc, #40]	; (19ac8 <ll_rx_link_inc_quota+0x30>)
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   19aa0:	d10e      	bne.n	19ac0 <ll_rx_link_inc_quota+0x28>
   19aa2:	782b      	ldrb	r3, [r5, #0]
   19aa4:	2b05      	cmp	r3, #5
   19aa6:	d90b      	bls.n	19ac0 <ll_rx_link_inc_quota+0x28>
   19aa8:	f240 42a9 	movw	r2, #1193	; 0x4a9
   19aac:	4907      	ldr	r1, [pc, #28]	; (19acc <ll_rx_link_inc_quota+0x34>)
   19aae:	4808      	ldr	r0, [pc, #32]	; (19ad0 <ll_rx_link_inc_quota+0x38>)
   19ab0:	f00d fa5d 	bl	26f6e <printk>
   19ab4:	4040      	eors	r0, r0
   19ab6:	f380 8811 	msr	BASEPRI, r0
   19aba:	f04f 0003 	mov.w	r0, #3
   19abe:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
   19ac0:	782b      	ldrb	r3, [r5, #0]
   19ac2:	441c      	add	r4, r3
   19ac4:	702c      	strb	r4, [r5, #0]
}
   19ac6:	bd38      	pop	{r3, r4, r5, pc}
   19ac8:	200033f4 	.word	0x200033f4
   19acc:	00034ede 	.word	0x00034ede
   19ad0:	0002fa94 	.word	0x0002fa94

00019ad4 <perform_lll_reset>:

	return 0;
}

static void perform_lll_reset(void *param)
{
   19ad4:	b510      	push	{r4, lr}
   19ad6:	4604      	mov	r4, r0
	int err;

	/* Reset LLL */
	err = lll_reset();
   19ad8:	f012 fbca 	bl	2c270 <lll_reset>
	LL_ASSERT(!err);
   19adc:	b158      	cbz	r0, 19af6 <perform_lll_reset+0x22>
   19ade:	f240 6279 	movw	r2, #1657	; 0x679
   19ae2:	491e      	ldr	r1, [pc, #120]	; (19b5c <perform_lll_reset+0x88>)
   19ae4:	481e      	ldr	r0, [pc, #120]	; (19b60 <perform_lll_reset+0x8c>)
   19ae6:	f00d fa42 	bl	26f6e <printk>
   19aea:	4040      	eors	r0, r0
   19aec:	f380 8811 	msr	BASEPRI, r0
   19af0:	f04f 0003 	mov.w	r0, #3
   19af4:	df02      	svc	2

#if defined(CONFIG_BT_BROADCASTER)
	/* Reset adv state */
	err = lll_adv_reset();
   19af6:	f012 fc25 	bl	2c344 <lll_adv_reset>
	LL_ASSERT(!err);
   19afa:	b158      	cbz	r0, 19b14 <perform_lll_reset+0x40>
   19afc:	f240 627e 	movw	r2, #1662	; 0x67e
   19b00:	4916      	ldr	r1, [pc, #88]	; (19b5c <perform_lll_reset+0x88>)
   19b02:	4817      	ldr	r0, [pc, #92]	; (19b60 <perform_lll_reset+0x8c>)
   19b04:	f00d fa33 	bl	26f6e <printk>
   19b08:	4040      	eors	r0, r0
   19b0a:	f380 8811 	msr	BASEPRI, r0
   19b0e:	f04f 0003 	mov.w	r0, #3
   19b12:	df02      	svc	2
#endif /* CONFIG_BT_BROADCASTER */

#if defined(CONFIG_BT_OBSERVER)
	/* Reset scan state */
	err = lll_scan_reset();
   19b14:	f012 fd48 	bl	2c5a8 <lll_scan_reset>
	LL_ASSERT(!err);
   19b18:	b158      	cbz	r0, 19b32 <perform_lll_reset+0x5e>
   19b1a:	f240 6284 	movw	r2, #1668	; 0x684
   19b1e:	490f      	ldr	r1, [pc, #60]	; (19b5c <perform_lll_reset+0x88>)
   19b20:	480f      	ldr	r0, [pc, #60]	; (19b60 <perform_lll_reset+0x8c>)
   19b22:	f00d fa24 	bl	26f6e <printk>
   19b26:	4040      	eors	r0, r0
   19b28:	f380 8811 	msr	BASEPRI, r0
   19b2c:	f04f 0003 	mov.w	r0, #3
   19b30:	df02      	svc	2
#endif /* CONFIG_BT_OBSERVER */

#if defined(CONFIG_BT_CONN)
	/* Reset conn role */
	err = lll_conn_reset();
   19b32:	f012 fd45 	bl	2c5c0 <lll_conn_reset>
	LL_ASSERT(!err);
   19b36:	b158      	cbz	r0, 19b50 <perform_lll_reset+0x7c>
   19b38:	f240 628a 	movw	r2, #1674	; 0x68a
   19b3c:	4907      	ldr	r1, [pc, #28]	; (19b5c <perform_lll_reset+0x88>)
   19b3e:	4808      	ldr	r0, [pc, #32]	; (19b60 <perform_lll_reset+0x8c>)
   19b40:	f00d fa15 	bl	26f6e <printk>
   19b44:	4040      	eors	r0, r0
   19b46:	f380 8811 	msr	BASEPRI, r0
   19b4a:	f04f 0003 	mov.w	r0, #3
   19b4e:	df02      	svc	2
	z_impl_k_sem_give(sem);
   19b50:	4620      	mov	r0, r4
#endif /* CONFIG_BT_CTLR_DF */

#if !defined(CONFIG_BT_CTLR_ZLI)
	k_sem_give(param);
#endif /* !CONFIG_BT_CTLR_ZLI */
}
   19b52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   19b56:	f009 beb1 	b.w	238bc <z_impl_k_sem_give>
   19b5a:	bf00      	nop
   19b5c:	00034ede 	.word	0x00034ede
   19b60:	0002fa94 	.word	0x0002fa94

00019b64 <rx_alloc>:

	return done;
}

static inline void rx_alloc(uint8_t max)
{
   19b64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint8_t idx;

	if (max > mem_link_rx.quota_pdu) {
   19b68:	4e37      	ldr	r6, [pc, #220]	; (19c48 <rx_alloc+0xe4>)
		max = mem_link_rx.quota_pdu;
	}

	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   19b6a:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 19c54 <rx_alloc+0xf0>
   19b6e:	7834      	ldrb	r4, [r6, #0]
   19b70:	4284      	cmp	r4, r0
   19b72:	bf28      	it	cs
   19b74:	4604      	movcs	r4, r0
   19b76:	3c01      	subs	r4, #1
   19b78:	b2e4      	uxtb	r4, r4
		memq_link_t *link;
		struct node_rx_hdr *rx;

		link = mem_acquire(&mem_link_rx.free);
   19b7a:	f106 0904 	add.w	r9, r6, #4
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   19b7e:	2cff      	cmp	r4, #255	; 0xff
   19b80:	d030      	beq.n	19be4 <rx_alloc+0x80>
 */
static inline bool mfifo_enqueue_idx_get(uint8_t count, uint8_t first, uint8_t last,
					 uint8_t *idx)
{
	/* Non-destructive: Advance write-index modulo 'count' */
	last = last + 1;
   19b82:	f898 5003 	ldrb.w	r5, [r8, #3]
	if (last == count) {
   19b86:	f898 2001 	ldrb.w	r2, [r8, #1]
   19b8a:	f898 3002 	ldrb.w	r3, [r8, #2]
	last = last + 1;
   19b8e:	3501      	adds	r5, #1
   19b90:	b2ed      	uxtb	r5, r5
		last = 0U;
   19b92:	42aa      	cmp	r2, r5
   19b94:	bf08      	it	eq
   19b96:	2500      	moveq	r5, #0
	 * We want to maintain the invariant of emptiness defined by
	 * first == last, but we just advanced a copy of the write-index before
	 * and may have wrapped. So if first == last the queue is full and we
	 * can not continue
	 */
	if (last == first) {
   19b98:	42ab      	cmp	r3, r5
   19b9a:	d021      	beq.n	19be0 <rx_alloc+0x7c>
		link = mem_acquire(&mem_link_rx.free);
   19b9c:	4648      	mov	r0, r9
   19b9e:	f011 fd88 	bl	2b6b2 <mem_acquire>
		if (!link) {
   19ba2:	4607      	mov	r7, r0
   19ba4:	b908      	cbnz	r0, 19baa <rx_alloc+0x46>
		MFIFO_BY_IDX_ENQUEUE(ll_pdu_rx_free, idx, rx);

		ll_rx_link_inc_quota(-1);
	}
#endif /* CONFIG_BT_CONN */
}
   19ba6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		rx = mem_acquire(&mem_pdu_rx.free);
   19baa:	4828      	ldr	r0, [pc, #160]	; (19c4c <rx_alloc+0xe8>)
   19bac:	f011 fd81 	bl	2b6b2 <mem_acquire>
		if (!rx) {
   19bb0:	3c01      	subs	r4, #1
   19bb2:	b2e4      	uxtb	r4, r4
   19bb4:	b928      	cbnz	r0, 19bc2 <rx_alloc+0x5e>
			mem_release(link, &mem_link_rx.free);
   19bb6:	4926      	ldr	r1, [pc, #152]	; (19c50 <rx_alloc+0xec>)
   19bb8:	4638      	mov	r0, r7
}
   19bba:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			mem_release(link, &mem_link_rx.free);
   19bbe:	f011 bd89 	b.w	2b6d4 <mem_release>
		rx->link = link;
   19bc2:	6007      	str	r7, [r0, #0]
 */
static inline void mfifo_by_idx_enqueue(uint8_t *fifo, uint8_t size, uint8_t idx,
					void *mem, uint8_t *last)
{
	/* API 2: fifo is array of void-ptrs */
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   19bc4:	f898 2003 	ldrb.w	r2, [r8, #3]
   19bc8:	f898 3000 	ldrb.w	r3, [r8]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   19bcc:	fb02 8303 	mla	r3, r2, r3, r8
   19bd0:	6058      	str	r0, [r3, #4]

	*last = idx; /* Commit: Update write index */
   19bd2:	f888 5003 	strb.w	r5, [r8, #3]
		ll_rx_link_inc_quota(-1);
   19bd6:	f04f 30ff 	mov.w	r0, #4294967295
   19bda:	f7ff ff5d 	bl	19a98 <ll_rx_link_inc_quota>
   19bde:	e7ce      	b.n	19b7e <rx_alloc+0x1a>
	if (!max) {
   19be0:	2c00      	cmp	r4, #0
   19be2:	d0e0      	beq.n	19ba6 <rx_alloc+0x42>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   19be4:	f8df 8070 	ldr.w	r8, [pc, #112]	; 19c58 <rx_alloc+0xf4>
		link = mem_acquire(&mem_link_rx.free);
   19be8:	4f19      	ldr	r7, [pc, #100]	; (19c50 <rx_alloc+0xec>)
   19bea:	e00f      	b.n	19c0c <rx_alloc+0xa8>
		link->mem = NULL;
   19bec:	2300      	movs	r3, #0
   19bee:	606b      	str	r3, [r5, #4]
		rx->link = link;
   19bf0:	6005      	str	r5, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   19bf2:	f898 2003 	ldrb.w	r2, [r8, #3]
   19bf6:	f898 3000 	ldrb.w	r3, [r8]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   19bfa:	fb02 8303 	mla	r3, r2, r3, r8
   19bfe:	6058      	str	r0, [r3, #4]
	*last = idx; /* Commit: Update write index */
   19c00:	f888 4003 	strb.w	r4, [r8, #3]
		ll_rx_link_inc_quota(-1);
   19c04:	f04f 30ff 	mov.w	r0, #4294967295
   19c08:	f7ff ff46 	bl	19a98 <ll_rx_link_inc_quota>
	while (mem_link_rx.quota_pdu &&
   19c0c:	7833      	ldrb	r3, [r6, #0]
   19c0e:	2b00      	cmp	r3, #0
   19c10:	d0c9      	beq.n	19ba6 <rx_alloc+0x42>
	last = last + 1;
   19c12:	f898 4003 	ldrb.w	r4, [r8, #3]
	if (last == count) {
   19c16:	f898 2001 	ldrb.w	r2, [r8, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   19c1a:	f898 3002 	ldrb.w	r3, [r8, #2]
	last = last + 1;
   19c1e:	3401      	adds	r4, #1
   19c20:	b2e4      	uxtb	r4, r4
		last = 0U;
   19c22:	42a2      	cmp	r2, r4
   19c24:	bf08      	it	eq
   19c26:	2400      	moveq	r4, #0
	if (last == first) {
   19c28:	429c      	cmp	r4, r3
   19c2a:	d0bc      	beq.n	19ba6 <rx_alloc+0x42>
		link = mem_acquire(&mem_link_rx.free);
   19c2c:	4638      	mov	r0, r7
   19c2e:	f011 fd40 	bl	2b6b2 <mem_acquire>
		if (!link) {
   19c32:	4605      	mov	r5, r0
   19c34:	2800      	cmp	r0, #0
   19c36:	d0b6      	beq.n	19ba6 <rx_alloc+0x42>
		rx = mem_acquire(&mem_pdu_rx.free);
   19c38:	4804      	ldr	r0, [pc, #16]	; (19c4c <rx_alloc+0xe8>)
   19c3a:	f011 fd3a 	bl	2b6b2 <mem_acquire>
		if (!rx) {
   19c3e:	2800      	cmp	r0, #0
   19c40:	d1d4      	bne.n	19bec <rx_alloc+0x88>
			mem_release(link, &mem_link_rx.free);
   19c42:	4903      	ldr	r1, [pc, #12]	; (19c50 <rx_alloc+0xec>)
   19c44:	4628      	mov	r0, r5
   19c46:	e7b8      	b.n	19bba <rx_alloc+0x56>
   19c48:	200033f4 	.word	0x200033f4
   19c4c:	2000345c 	.word	0x2000345c
   19c50:	200033f8 	.word	0x200033f8
   19c54:	20000acc 	.word	0x20000acc
   19c58:	20000abc 	.word	0x20000abc

00019c5c <init_reset>:
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   19c5c:	4b39      	ldr	r3, [pc, #228]	; (19d44 <init_reset+0xe8>)
{
   19c5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   19c62:	1d18      	adds	r0, r3, #4
   19c64:	2203      	movs	r2, #3
   19c66:	2134      	movs	r1, #52	; 0x34
   19c68:	f011 fd0a 	bl	2b680 <mem_init>
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX,
   19c6c:	4b36      	ldr	r3, [pc, #216]	; (19d48 <init_reset+0xec>)
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   19c6e:	4d37      	ldr	r5, [pc, #220]	; (19d4c <init_reset+0xf0>)
		link = mem_acquire(&mem_link_done.free);
   19c70:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 19d48 <init_reset+0xec>
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX,
   19c74:	2203      	movs	r2, #3
   19c76:	2108      	movs	r1, #8
   19c78:	1d18      	adds	r0, r3, #4
   19c7a:	f011 fd01 	bl	2b680 <mem_init>
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   19c7e:	462e      	mov	r6, r5
	last = last + 1;
   19c80:	78ec      	ldrb	r4, [r5, #3]
	if (last == count) {
   19c82:	786a      	ldrb	r2, [r5, #1]
   19c84:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   19c86:	3401      	adds	r4, #1
   19c88:	b2e4      	uxtb	r4, r4
		last = 0U;
   19c8a:	42a2      	cmp	r2, r4
   19c8c:	bf08      	it	eq
   19c8e:	2400      	moveq	r4, #0
	if (last == first) {
   19c90:	429c      	cmp	r4, r3
   19c92:	d00d      	beq.n	19cb0 <init_reset+0x54>
		link = mem_acquire(&mem_link_done.free);
   19c94:	4640      	mov	r0, r8
   19c96:	f011 fd0c 	bl	2b6b2 <mem_acquire>
		if (!link) {
   19c9a:	4607      	mov	r7, r0
   19c9c:	b140      	cbz	r0, 19cb0 <init_reset+0x54>
		rx = mem_acquire(&mem_done.free);
   19c9e:	4829      	ldr	r0, [pc, #164]	; (19d44 <init_reset+0xe8>)
   19ca0:	f011 fd07 	bl	2b6b2 <mem_acquire>
		if (!rx) {
   19ca4:	2800      	cmp	r0, #0
   19ca6:	d144      	bne.n	19d32 <init_reset+0xd6>
			mem_release(link, &mem_link_done.free);
   19ca8:	4927      	ldr	r1, [pc, #156]	; (19d48 <init_reset+0xec>)
   19caa:	4638      	mov	r0, r7
   19cac:	f011 fd12 	bl	2b6d4 <mem_release>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
   19cb0:	4b27      	ldr	r3, [pc, #156]	; (19d50 <init_reset+0xf4>)
   19cb2:	2208      	movs	r2, #8
   19cb4:	1d18      	adds	r0, r3, #4
   19cb6:	2148      	movs	r1, #72	; 0x48
   19cb8:	f011 fce2 	bl	2b680 <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
   19cbc:	4b25      	ldr	r3, [pc, #148]	; (19d54 <init_reset+0xf8>)
   19cbe:	220c      	movs	r2, #12
   19cc0:	1d18      	adds	r0, r3, #4
   19cc2:	2108      	movs	r1, #8
   19cc4:	f011 fcdc 	bl	2b680 <mem_init>
	link = mem_acquire(&mem_link_rx.free);
   19cc8:	4822      	ldr	r0, [pc, #136]	; (19d54 <init_reset+0xf8>)
   19cca:	f011 fcf2 	bl	2b6b2 <mem_acquire>
	LL_ASSERT(link);
   19cce:	4604      	mov	r4, r0
   19cd0:	b958      	cbnz	r0, 19cea <init_reset+0x8e>
   19cd2:	f44f 62cc 	mov.w	r2, #1632	; 0x660
   19cd6:	4920      	ldr	r1, [pc, #128]	; (19d58 <init_reset+0xfc>)
   19cd8:	4820      	ldr	r0, [pc, #128]	; (19d5c <init_reset+0x100>)
   19cda:	f00d f948 	bl	26f6e <printk>
   19cde:	4040      	eors	r0, r0
   19ce0:	f380 8811 	msr	BASEPRI, r0
   19ce4:	f04f 0003 	mov.w	r0, #3
   19ce8:	df02      	svc	2
	MEMQ_INIT(ull_rx, link);
   19cea:	4a1d      	ldr	r2, [pc, #116]	; (19d60 <init_reset+0x104>)
   19cec:	4620      	mov	r0, r4
   19cee:	1f11      	subs	r1, r2, #4
   19cf0:	f011 fd23 	bl	2b73a <memq_init>
	link = mem_acquire(&mem_link_rx.free);
   19cf4:	4817      	ldr	r0, [pc, #92]	; (19d54 <init_reset+0xf8>)
   19cf6:	f011 fcdc 	bl	2b6b2 <mem_acquire>
	LL_ASSERT(link);
   19cfa:	4604      	mov	r4, r0
   19cfc:	b958      	cbnz	r0, 19d16 <init_reset+0xba>
   19cfe:	f240 6267 	movw	r2, #1639	; 0x667
   19d02:	4915      	ldr	r1, [pc, #84]	; (19d58 <init_reset+0xfc>)
   19d04:	4815      	ldr	r0, [pc, #84]	; (19d5c <init_reset+0x100>)
   19d06:	f00d f932 	bl	26f6e <printk>
   19d0a:	4040      	eors	r0, r0
   19d0c:	f380 8811 	msr	BASEPRI, r0
   19d10:	f04f 0003 	mov.w	r0, #3
   19d14:	df02      	svc	2
	MEMQ_INIT(ll_rx, link);
   19d16:	4a13      	ldr	r2, [pc, #76]	; (19d64 <init_reset+0x108>)
   19d18:	4620      	mov	r0, r4
   19d1a:	1f11      	subs	r1, r2, #4
   19d1c:	f011 fd0d 	bl	2b73a <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
   19d20:	4b11      	ldr	r3, [pc, #68]	; (19d68 <init_reset+0x10c>)
   19d22:	2206      	movs	r2, #6
	rx_alloc(UINT8_MAX);
   19d24:	20ff      	movs	r0, #255	; 0xff
	mem_link_rx.quota_pdu = RX_CNT;
   19d26:	701a      	strb	r2, [r3, #0]
	rx_alloc(UINT8_MAX);
   19d28:	f7ff ff1c 	bl	19b64 <rx_alloc>
}
   19d2c:	2000      	movs	r0, #0
   19d2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx->link = link;
   19d32:	6007      	str	r7, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   19d34:	78f2      	ldrb	r2, [r6, #3]
   19d36:	7833      	ldrb	r3, [r6, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   19d38:	fb02 6303 	mla	r3, r2, r3, r6
   19d3c:	6058      	str	r0, [r3, #4]
	*last = idx; /* Commit: Update write index */
   19d3e:	70f4      	strb	r4, [r6, #3]
   19d40:	e79e      	b.n	19c80 <init_reset+0x24>
   19d42:	bf00      	nop
   19d44:	20003338 	.word	0x20003338
   19d48:	200033d8 	.word	0x200033d8
   19d4c:	20000aa8 	.word	0x20000aa8
   19d50:	2000345c 	.word	0x2000345c
   19d54:	200033f8 	.word	0x200033f8
   19d58:	00034ede 	.word	0x00034ede
   19d5c:	0002fa94 	.word	0x0002fa94
   19d60:	200036ac 	.word	0x200036ac
   19d64:	200036a4 	.word	0x200036a4
   19d68:	200033f4 	.word	0x200033f4

00019d6c <ull_ticker_status_give>:
	*((uint32_t volatile *)param) = status;
   19d6c:	6008      	str	r0, [r1, #0]
   19d6e:	4801      	ldr	r0, [pc, #4]	; (19d74 <ull_ticker_status_give+0x8>)
   19d70:	f009 bda4 	b.w	238bc <z_impl_k_sem_give>
   19d74:	200036b4 	.word	0x200036b4

00019d78 <tx_cmplt_get>:
#endif /* CONFIG_BT_CTLR_LOW_LAT_ULL */
}

#if defined(CONFIG_BT_CONN)
static uint8_t tx_cmplt_get(uint16_t *handle, uint8_t *first, uint8_t last)
{
   19d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19d7c:	460d      	mov	r5, r1
	struct lll_tx *tx;
	uint8_t cmplt;

	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   19d7e:	4e28      	ldr	r6, [pc, #160]	; (19e20 <tx_cmplt_get+0xa8>)
					   uint8_t first, uint8_t last, uint8_t *idx)
{
	void *p;
	uint8_t i;

	if (*idx >= count) {
   19d80:	782b      	ldrb	r3, [r5, #0]
   19d82:	7871      	ldrb	r1, [r6, #1]
   19d84:	428b      	cmp	r3, r1
   19d86:	bf28      	it	cs
   19d88:	78b3      	ldrbcs	r3, [r6, #2]
{
   19d8a:	4680      	mov	r8, r0
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   19d8c:	7830      	ldrb	r0, [r6, #0]
		*idx = first;
   19d8e:	bf28      	it	cs
   19d90:	702b      	strbcs	r3, [r5, #0]
	}

	if (*idx == last) {
   19d92:	782b      	ldrb	r3, [r5, #0]
   19d94:	429a      	cmp	r2, r3
{
   19d96:	4691      	mov	r9, r2
   19d98:	d103      	bne.n	19da2 <tx_cmplt_get+0x2a>
				    mfifo_tx_ack.n, mfifo_tx_ack.f, last,
				    first);
	if (!tx) {
		return 0;
   19d9a:	2700      	movs	r7, #0
					    mfifo_tx_ack.n, mfifo_tx_ack.f,
					    last, first);
	} while (tx && tx->handle == *handle);

	return cmplt;
}
   19d9c:	4638      	mov	r0, r7
   19d9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return NULL;
	}

	i = *idx + 1;
   19da2:	1c5a      	adds	r2, r3, #1
   19da4:	b2d2      	uxtb	r2, r2
	if (i == count) {
		i = 0U;
	}

	p = (void *)(fifo + (*idx) * size);
   19da6:	4c1f      	ldr	r4, [pc, #124]	; (19e24 <tx_cmplt_get+0xac>)
		i = 0U;
   19da8:	4291      	cmp	r1, r2
   19daa:	bf08      	it	eq
   19dac:	2200      	moveq	r2, #0
	p = (void *)(fifo + (*idx) * size);
   19dae:	fb13 f300 	smulbb	r3, r3, r0

	*idx = i;
   19db2:	702a      	strb	r2, [r5, #0]
	if (!tx) {
   19db4:	18e2      	adds	r2, r4, r3
   19db6:	d0f0      	beq.n	19d9a <tx_cmplt_get+0x22>
	*handle = tx->handle;
   19db8:	5ae3      	ldrh	r3, [r4, r3]
   19dba:	f8a8 3000 	strh.w	r3, [r8]
	cmplt = 0U;
   19dbe:	2700      	movs	r7, #0
		node_tx = tx->node;
   19dc0:	6850      	ldr	r0, [r2, #4]
		if (!node_tx || (node_tx == (void *)1) ||
   19dc2:	2801      	cmp	r0, #1
   19dc4:	f020 0103 	bic.w	r1, r0, #3
   19dc8:	d906      	bls.n	19dd8 <tx_cmplt_get+0x60>
   19dca:	b331      	cbz	r1, 19e1a <tx_cmplt_get+0xa2>
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
   19dcc:	7903      	ldrb	r3, [r0, #4]
   19dce:	f003 0303 	and.w	r3, r3, #3
		    (((uint32_t)node_tx & ~3) &&
   19dd2:	3b01      	subs	r3, #1
   19dd4:	2b01      	cmp	r3, #1
   19dd6:	d820      	bhi.n	19e1a <tx_cmplt_get+0xa2>
			cmplt++;
   19dd8:	3701      	adds	r7, #1
   19dda:	b2ff      	uxtb	r7, r7
			tx->node = (void *)1;
   19ddc:	2301      	movs	r3, #1
   19dde:	6053      	str	r3, [r2, #4]
		if (((uint32_t)node_tx & ~3)) {
   19de0:	b109      	cbz	r1, 19de6 <tx_cmplt_get+0x6e>
			ll_tx_mem_release(node_tx);
   19de2:	f001 fb5d 	bl	1b4a0 <ll_tx_mem_release>
	if (*idx >= count) {
   19de6:	782b      	ldrb	r3, [r5, #0]
		tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   19de8:	7872      	ldrb	r2, [r6, #1]
   19dea:	7830      	ldrb	r0, [r6, #0]
   19dec:	4293      	cmp	r3, r2
   19dee:	bf24      	itt	cs
   19df0:	78b3      	ldrbcs	r3, [r6, #2]
		*idx = first;
   19df2:	702b      	strbcs	r3, [r5, #0]
	if (*idx == last) {
   19df4:	782b      	ldrb	r3, [r5, #0]
   19df6:	4599      	cmp	r9, r3
   19df8:	d0d0      	beq.n	19d9c <tx_cmplt_get+0x24>
	i = *idx + 1;
   19dfa:	1c59      	adds	r1, r3, #1
   19dfc:	b2c9      	uxtb	r1, r1
	p = (void *)(fifo + (*idx) * size);
   19dfe:	fb13 f300 	smulbb	r3, r3, r0
		i = 0U;
   19e02:	428a      	cmp	r2, r1
   19e04:	bf08      	it	eq
   19e06:	2100      	moveq	r1, #0
	} while (tx && tx->handle == *handle);
   19e08:	18e2      	adds	r2, r4, r3
	*idx = i;
   19e0a:	7029      	strb	r1, [r5, #0]
   19e0c:	d0c6      	beq.n	19d9c <tx_cmplt_get+0x24>
   19e0e:	5ae3      	ldrh	r3, [r4, r3]
   19e10:	f8b8 1000 	ldrh.w	r1, [r8]
   19e14:	4299      	cmp	r1, r3
   19e16:	d0d3      	beq.n	19dc0 <tx_cmplt_get+0x48>
   19e18:	e7c0      	b.n	19d9c <tx_cmplt_get+0x24>
			tx->node = (void *)2;
   19e1a:	2302      	movs	r3, #2
   19e1c:	e7df      	b.n	19dde <tx_cmplt_get+0x66>
   19e1e:	bf00      	nop
   19e20:	20000c08 	.word	0x20000c08
   19e24:	20000c0c 	.word	0x20000c0c

00019e28 <ll_init>:
{
   19e28:	b510      	push	{r4, lr}
	sem_recv = sem_rx;
   19e2a:	4b2b      	ldr	r3, [pc, #172]	; (19ed8 <ll_init+0xb0>)
{
   19e2c:	b086      	sub	sp, #24
	sem_recv = sem_rx;
   19e2e:	6018      	str	r0, [r3, #0]
	cntr_init();
   19e30:	f004 f9b2 	bl	1e198 <cntr_init>
	mayfly_init();
   19e34:	f7fe f8b4 	bl	17fa0 <mayfly_init>
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   19e38:	4a28      	ldr	r2, [pc, #160]	; (19edc <ll_init+0xb4>)
   19e3a:	2103      	movs	r1, #3
   19e3c:	7011      	strb	r1, [r2, #0]
	ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   19e3e:	7611      	strb	r1, [r2, #24]
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   19e40:	2002      	movs	r0, #2
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   19e42:	4927      	ldr	r1, [pc, #156]	; (19ee0 <ll_init+0xb8>)
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   19e44:	7410      	strb	r0, [r2, #16]
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
   19e46:	2304      	movs	r3, #4
   19e48:	7213      	strb	r3, [r2, #8]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   19e4a:	9105      	str	r1, [sp, #20]
   19e4c:	4925      	ldr	r1, [pc, #148]	; (19ee4 <ll_init+0xbc>)
   19e4e:	9104      	str	r1, [sp, #16]
   19e50:	4925      	ldr	r1, [pc, #148]	; (19ee8 <ll_init+0xc0>)
   19e52:	9103      	str	r1, [sp, #12]
   19e54:	4925      	ldr	r1, [pc, #148]	; (19eec <ll_init+0xc4>)
   19e56:	9102      	str	r1, [sp, #8]
   19e58:	210c      	movs	r1, #12
   19e5a:	e9cd 2100 	strd	r2, r1, [sp]
   19e5e:	2000      	movs	r0, #0
   19e60:	4a23      	ldr	r2, [pc, #140]	; (19ef0 <ll_init+0xc8>)
   19e62:	210a      	movs	r1, #10
   19e64:	f7fe fdd4 	bl	18a10 <ticker_init>
	LL_ASSERT(!err);
   19e68:	b158      	cbz	r0, 19e82 <ll_init+0x5a>
   19e6a:	f240 126d 	movw	r2, #365	; 0x16d
   19e6e:	4921      	ldr	r1, [pc, #132]	; (19ef4 <ll_init+0xcc>)
   19e70:	4821      	ldr	r0, [pc, #132]	; (19ef8 <ll_init+0xd0>)
   19e72:	f00d f87c 	bl	26f6e <printk>
   19e76:	4040      	eors	r0, r0
   19e78:	f380 8811 	msr	BASEPRI, r0
   19e7c:	f04f 0003 	mov.w	r0, #3
   19e80:	df02      	svc	2
	return z_impl_k_sem_init(sem, initial_count, limit);
   19e82:	2201      	movs	r2, #1
   19e84:	2100      	movs	r1, #0
   19e86:	481d      	ldr	r0, [pc, #116]	; (19efc <ll_init+0xd4>)
   19e88:	f013 fa47 	bl	2d31a <z_impl_k_sem_init>
	err = lll_init();
   19e8c:	f002 fdee 	bl	1ca6c <lll_init>
	if (err) {
   19e90:	4604      	mov	r4, r0
   19e92:	b9f0      	cbnz	r0, 19ed2 <ll_init+0xaa>
	err = init_reset();
   19e94:	f7ff fee2 	bl	19c5c <init_reset>
	if (err) {
   19e98:	4604      	mov	r4, r0
   19e9a:	b9d0      	cbnz	r0, 19ed2 <ll_init+0xaa>
	err = lll_adv_init();
   19e9c:	f003 f874 	bl	1cf88 <lll_adv_init>
	if (err) {
   19ea0:	4604      	mov	r4, r0
   19ea2:	b9b0      	cbnz	r0, 19ed2 <ll_init+0xaa>
	err = ull_adv_init();
   19ea4:	f011 ff82 	bl	2bdac <ull_adv_init>
	if (err) {
   19ea8:	4604      	mov	r4, r0
   19eaa:	b990      	cbnz	r0, 19ed2 <ll_init+0xaa>
	err = lll_scan_init();
   19eac:	f012 fb7a 	bl	2c5a4 <lll_scan_init>
	if (err) {
   19eb0:	4604      	mov	r4, r0
   19eb2:	b970      	cbnz	r0, 19ed2 <ll_init+0xaa>
	err = ull_scan_init();
   19eb4:	f011 ffc6 	bl	2be44 <ull_scan_init>
	if (err) {
   19eb8:	4604      	mov	r4, r0
   19eba:	b950      	cbnz	r0, 19ed2 <ll_init+0xaa>
	err = lll_conn_init();
   19ebc:	f012 fb76 	bl	2c5ac <lll_conn_init>
	if (err) {
   19ec0:	4604      	mov	r4, r0
   19ec2:	b930      	cbnz	r0, 19ed2 <ll_init+0xaa>
	err = ull_conn_init();
   19ec4:	f012 f977 	bl	2c1b6 <ull_conn_init>
	if (err) {
   19ec8:	4604      	mov	r4, r0
   19eca:	b910      	cbnz	r0, 19ed2 <ll_init+0xaa>
		ull_filter_reset(true);
   19ecc:	2001      	movs	r0, #1
   19ece:	f002 fc41 	bl	1c754 <ull_filter_reset>
}
   19ed2:	4620      	mov	r0, r4
   19ed4:	b006      	add	sp, #24
   19ed6:	bd10      	pop	{r4, pc}
   19ed8:	200036b0 	.word	0x200036b0
   19edc:	20003b1c 	.word	0x20003b1c
   19ee0:	0002c7c5 	.word	0x0002c7c5
   19ee4:	0001ea75 	.word	0x0001ea75
   19ee8:	0001ea29 	.word	0x0001ea29
   19eec:	200038ac 	.word	0x200038ac
   19ef0:	200036cc 	.word	0x200036cc
   19ef4:	00034ede 	.word	0x00034ede
   19ef8:	0002fa94 	.word	0x0002fa94
   19efc:	200036b4 	.word	0x200036b4

00019f00 <ll_reset>:
{
   19f00:	b510      	push	{r4, lr}
   19f02:	b086      	sub	sp, #24
	err = ull_adv_reset();
   19f04:	f011 ff57 	bl	2bdb6 <ull_adv_reset>
	LL_ASSERT(!err);
   19f08:	b158      	cbz	r0, 19f22 <ll_reset+0x22>
   19f0a:	f240 12f9 	movw	r2, #505	; 0x1f9
   19f0e:	493b      	ldr	r1, [pc, #236]	; (19ffc <ll_reset+0xfc>)
   19f10:	483b      	ldr	r0, [pc, #236]	; (1a000 <ll_reset+0x100>)
   19f12:	f00d f82c 	bl	26f6e <printk>
   19f16:	4040      	eors	r0, r0
   19f18:	f380 8811 	msr	BASEPRI, r0
   19f1c:	f04f 0003 	mov.w	r0, #3
   19f20:	df02      	svc	2
	err = ull_scan_reset();
   19f22:	f011 ffa5 	bl	2be70 <ull_scan_reset>
	LL_ASSERT(!err);
   19f26:	b158      	cbz	r0, 19f40 <ll_reset+0x40>
   19f28:	f240 12ff 	movw	r2, #511	; 0x1ff
   19f2c:	4933      	ldr	r1, [pc, #204]	; (19ffc <ll_reset+0xfc>)
   19f2e:	4834      	ldr	r0, [pc, #208]	; (1a000 <ll_reset+0x100>)
   19f30:	f00d f81d 	bl	26f6e <printk>
   19f34:	4040      	eors	r0, r0
   19f36:	f380 8811 	msr	BASEPRI, r0
   19f3a:	f04f 0003 	mov.w	r0, #3
   19f3e:	df02      	svc	2
	err = ull_conn_reset();
   19f40:	f001 faf0 	bl	1b524 <ull_conn_reset>
	LL_ASSERT(!err);
   19f44:	b158      	cbz	r0, 19f5e <ll_reset+0x5e>
   19f46:	f240 2239 	movw	r2, #569	; 0x239
   19f4a:	492c      	ldr	r1, [pc, #176]	; (19ffc <ll_reset+0xfc>)
   19f4c:	482c      	ldr	r0, [pc, #176]	; (1a000 <ll_reset+0x100>)
   19f4e:	f00d f80e 	bl	26f6e <printk>
   19f52:	4040      	eors	r0, r0
   19f54:	f380 8811 	msr	BASEPRI, r0
   19f58:	f04f 0003 	mov.w	r0, #3
   19f5c:	df02      	svc	2
	MFIFO_INIT(tx_ack);
   19f5e:	4b29      	ldr	r3, [pc, #164]	; (1a004 <ll_reset+0x104>)
   19f60:	2400      	movs	r4, #0
   19f62:	805c      	strh	r4, [r3, #2]
		ull_filter_reset(false);
   19f64:	4620      	mov	r0, r4
   19f66:	f002 fbf5 	bl	1c754 <ull_filter_reset>
	MFIFO_INIT(prep);
   19f6a:	4b27      	ldr	r3, [pc, #156]	; (1a008 <ll_reset+0x108>)
   19f6c:	805c      	strh	r4, [r3, #2]
	MFIFO_INIT(done);
   19f6e:	4b27      	ldr	r3, [pc, #156]	; (1a00c <ll_reset+0x10c>)
   19f70:	805c      	strh	r4, [r3, #2]
	MFIFO_INIT(pdu_rx_free);
   19f72:	4b27      	ldr	r3, [pc, #156]	; (1a010 <ll_reset+0x110>)
   19f74:	805c      	strh	r4, [r3, #2]
	MFIFO_INIT(ll_pdu_rx_free);
   19f76:	4b27      	ldr	r3, [pc, #156]	; (1a014 <ll_reset+0x114>)
   19f78:	805c      	strh	r4, [r3, #2]
   19f7a:	2201      	movs	r2, #1
   19f7c:	4621      	mov	r1, r4
   19f7e:	4668      	mov	r0, sp
   19f80:	f013 f9cb 	bl	2d31a <z_impl_k_sem_init>
		mfy.param = &sem;
   19f84:	4b24      	ldr	r3, [pc, #144]	; (1a018 <ll_reset+0x118>)
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   19f86:	4622      	mov	r2, r4
   19f88:	4621      	mov	r1, r4
   19f8a:	2003      	movs	r0, #3
		mfy.param = &sem;
   19f8c:	f8c3 d008 	str.w	sp, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   19f90:	f7fe f858 	bl	18044 <mayfly_enqueue>
		LL_ASSERT(!retval);
   19f94:	b158      	cbz	r0, 19fae <ll_reset+0xae>
   19f96:	f240 226b 	movw	r2, #619	; 0x26b
   19f9a:	4918      	ldr	r1, [pc, #96]	; (19ffc <ll_reset+0xfc>)
   19f9c:	4818      	ldr	r0, [pc, #96]	; (1a000 <ll_reset+0x100>)
   19f9e:	f00c ffe6 	bl	26f6e <printk>
   19fa2:	4040      	eors	r0, r0
   19fa4:	f380 8811 	msr	BASEPRI, r0
   19fa8:	f04f 0003 	mov.w	r0, #3
   19fac:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   19fae:	f04f 32ff 	mov.w	r2, #4294967295
   19fb2:	f04f 33ff 	mov.w	r3, #4294967295
   19fb6:	4668      	mov	r0, sp
   19fb8:	f009 fcbc 	bl	23934 <z_impl_k_sem_take>
	err = ull_adv_reset_finalize();
   19fbc:	f000 ff08 	bl	1add0 <ull_adv_reset_finalize>
	LL_ASSERT(!err);
   19fc0:	b158      	cbz	r0, 19fda <ll_reset+0xda>
   19fc2:	f44f 721e 	mov.w	r2, #632	; 0x278
   19fc6:	490d      	ldr	r1, [pc, #52]	; (19ffc <ll_reset+0xfc>)
   19fc8:	480d      	ldr	r0, [pc, #52]	; (1a000 <ll_reset+0x100>)
   19fca:	f00c ffd0 	bl	26f6e <printk>
   19fce:	4040      	eors	r0, r0
   19fd0:	f380 8811 	msr	BASEPRI, r0
   19fd4:	f04f 0003 	mov.w	r0, #3
   19fd8:	df02      	svc	2
	err = init_reset();
   19fda:	f7ff fe3f 	bl	19c5c <init_reset>
	LL_ASSERT(!err);
   19fde:	b158      	cbz	r0, 19ff8 <ll_reset+0xf8>
   19fe0:	f240 227d 	movw	r2, #637	; 0x27d
   19fe4:	4905      	ldr	r1, [pc, #20]	; (19ffc <ll_reset+0xfc>)
   19fe6:	4806      	ldr	r0, [pc, #24]	; (1a000 <ll_reset+0x100>)
   19fe8:	f00c ffc1 	bl	26f6e <printk>
   19fec:	4040      	eors	r0, r0
   19fee:	f380 8811 	msr	BASEPRI, r0
   19ff2:	f04f 0003 	mov.w	r0, #3
   19ff6:	df02      	svc	2
}
   19ff8:	b006      	add	sp, #24
   19ffa:	bd10      	pop	{r4, pc}
   19ffc:	00034ede 	.word	0x00034ede
   1a000:	0002fa94 	.word	0x0002fa94
   1a004:	20000c08 	.word	0x20000c08
   1a008:	20000ae4 	.word	0x20000ae4
   1a00c:	20000aa8 	.word	0x20000aa8
   1a010:	20000acc 	.word	0x20000acc
   1a014:	20000abc 	.word	0x20000abc
   1a018:	20000c2c 	.word	0x20000c2c

0001a01c <ll_rx_get>:
{
   1a01c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
   1a020:	4d25      	ldr	r5, [pc, #148]	; (1a0b8 <ll_rx_get+0x9c>)
   1a022:	4e26      	ldr	r6, [pc, #152]	; (1a0bc <ll_rx_get+0xa0>)
{
   1a024:	4681      	mov	r9, r0
   1a026:	4688      	mov	r8, r1
   1a028:	46ab      	mov	fp, r5
	*node_rx = NULL;
   1a02a:	2300      	movs	r3, #0
   1a02c:	f8c9 3000 	str.w	r3, [r9]
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
   1a030:	aa01      	add	r2, sp, #4
   1a032:	e9d5 0100 	ldrd	r0, r1, [r5]
   1a036:	f011 fb95 	bl	2b764 <memq_peek>
	if (link) {
   1a03a:	4682      	mov	sl, r0
   1a03c:	b3a0      	cbz	r0, 1a0a8 <ll_rx_get+0x8c>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   1a03e:	9b01      	ldr	r3, [sp, #4]
   1a040:	491f      	ldr	r1, [pc, #124]	; (1a0c0 <ll_rx_get+0xa4>)
   1a042:	781a      	ldrb	r2, [r3, #0]
   1a044:	4640      	mov	r0, r8
   1a046:	f7ff fe97 	bl	19d78 <tx_cmplt_get>
		if (!cmplt) {
   1a04a:	4604      	mov	r4, r0
   1a04c:	bb40      	cbnz	r0, 1a0a0 <ll_rx_get+0x84>
			f = mfifo_tx_ack.f;
   1a04e:	78b3      	ldrb	r3, [r6, #2]
   1a050:	f88d 3001 	strb.w	r3, [sp, #1]
				cmplt_curr = tx_cmplt_get(&h, &f,
   1a054:	78f2      	ldrb	r2, [r6, #3]
   1a056:	f10d 0101 	add.w	r1, sp, #1
   1a05a:	f10d 0002 	add.w	r0, sp, #2
   1a05e:	f7ff fe8b 	bl	19d78 <tx_cmplt_get>
				 (cmplt_prev != cmplt_curr));
   1a062:	b9cc      	cbnz	r4, 1a098 <ll_rx_get+0x7c>
			} while ((cmplt_prev != 0U) ||
   1a064:	b9c0      	cbnz	r0, 1a098 <ll_rx_get+0x7c>
			if (rx->type == NODE_RX_TYPE_RELEASE) {
   1a066:	9b01      	ldr	r3, [sp, #4]
   1a068:	791f      	ldrb	r7, [r3, #4]
   1a06a:	2f01      	cmp	r7, #1
   1a06c:	d116      	bne.n	1a09c <ll_rx_get+0x80>
				(void)memq_dequeue(memq_ll_rx.tail,
   1a06e:	4622      	mov	r2, r4
   1a070:	4629      	mov	r1, r5
   1a072:	f8db 0004 	ldr.w	r0, [fp, #4]
   1a076:	f011 fb7d 	bl	2b774 <memq_dequeue>
				mem_release(link, &mem_link_rx.free);
   1a07a:	4912      	ldr	r1, [pc, #72]	; (1a0c4 <ll_rx_get+0xa8>)
   1a07c:	4650      	mov	r0, sl
   1a07e:	f011 fb29 	bl	2b6d4 <mem_release>
				ll_rx_link_inc_quota(1);
   1a082:	4638      	mov	r0, r7
   1a084:	f7ff fd08 	bl	19a98 <ll_rx_link_inc_quota>
				mem_release(rx, &mem_pdu_rx.free);
   1a088:	9801      	ldr	r0, [sp, #4]
   1a08a:	490f      	ldr	r1, [pc, #60]	; (1a0c8 <ll_rx_get+0xac>)
   1a08c:	f011 fb22 	bl	2b6d4 <mem_release>
				rx_alloc(1);
   1a090:	4638      	mov	r0, r7
   1a092:	f7ff fd67 	bl	19b64 <rx_alloc>
				goto ll_rx_get_again;
   1a096:	e7c8      	b.n	1a02a <ll_rx_get+0xe>
{
   1a098:	4604      	mov	r4, r0
   1a09a:	e7db      	b.n	1a054 <ll_rx_get+0x38>
			*node_rx = rx;
   1a09c:	f8c9 3000 	str.w	r3, [r9]
}
   1a0a0:	4620      	mov	r0, r4
   1a0a2:	b003      	add	sp, #12
   1a0a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, mfifo_tx_ack.l);
   1a0a8:	78f2      	ldrb	r2, [r6, #3]
   1a0aa:	4905      	ldr	r1, [pc, #20]	; (1a0c0 <ll_rx_get+0xa4>)
   1a0ac:	4640      	mov	r0, r8
   1a0ae:	f7ff fe63 	bl	19d78 <tx_cmplt_get>
   1a0b2:	4604      	mov	r4, r0
   1a0b4:	e7f4      	b.n	1a0a0 <ll_rx_get+0x84>
   1a0b6:	bf00      	nop
   1a0b8:	200036a0 	.word	0x200036a0
   1a0bc:	20000c08 	.word	0x20000c08
   1a0c0:	20000c0a 	.word	0x20000c0a
   1a0c4:	200033f8 	.word	0x200033f8
   1a0c8:	2000345c 	.word	0x2000345c

0001a0cc <ll_rx_dequeue>:
{
   1a0cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   1a0ce:	4945      	ldr	r1, [pc, #276]	; (1a1e4 <ll_rx_dequeue+0x118>)
	struct node_rx_hdr *rx = NULL;
   1a0d0:	2300      	movs	r3, #0
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   1a0d2:	aa01      	add	r2, sp, #4
   1a0d4:	6848      	ldr	r0, [r1, #4]
	struct node_rx_hdr *rx = NULL;
   1a0d6:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   1a0d8:	f011 fb4c 	bl	2b774 <memq_dequeue>
	LL_ASSERT(link);
   1a0dc:	4604      	mov	r4, r0
   1a0de:	b958      	cbnz	r0, 1a0f8 <ll_rx_dequeue+0x2c>
   1a0e0:	f240 22cf 	movw	r2, #719	; 0x2cf
   1a0e4:	4940      	ldr	r1, [pc, #256]	; (1a1e8 <ll_rx_dequeue+0x11c>)
   1a0e6:	4841      	ldr	r0, [pc, #260]	; (1a1ec <ll_rx_dequeue+0x120>)
   1a0e8:	f00c ff41 	bl	26f6e <printk>
   1a0ec:	4040      	eors	r0, r0
   1a0ee:	f380 8811 	msr	BASEPRI, r0
   1a0f2:	f04f 0003 	mov.w	r0, #3
   1a0f6:	df02      	svc	2
	mem_release(link, &mem_link_rx.free);
   1a0f8:	493d      	ldr	r1, [pc, #244]	; (1a1f0 <ll_rx_dequeue+0x124>)
   1a0fa:	4620      	mov	r0, r4
   1a0fc:	f011 faea 	bl	2b6d4 <mem_release>
	switch (rx->type) {
   1a100:	9b01      	ldr	r3, [sp, #4]
   1a102:	7919      	ldrb	r1, [r3, #4]
   1a104:	2918      	cmp	r1, #24
   1a106:	d869      	bhi.n	1a1dc <ll_rx_dequeue+0x110>
   1a108:	2201      	movs	r2, #1
   1a10a:	483a      	ldr	r0, [pc, #232]	; (1a1f4 <ll_rx_dequeue+0x128>)
   1a10c:	408a      	lsls	r2, r1
   1a10e:	4202      	tst	r2, r0
   1a110:	d15f      	bne.n	1a1d2 <ll_rx_dequeue+0x106>
   1a112:	0312      	lsls	r2, r2, #12
   1a114:	d562      	bpl.n	1a1dc <ll_rx_dequeue+0x110>
		} else if ((cc->status == BT_HCI_ERR_ADV_TIMEOUT) || cc->role) {
   1a116:	7f1a      	ldrb	r2, [r3, #28]
   1a118:	2a3c      	cmp	r2, #60	; 0x3c
   1a11a:	d002      	beq.n	1a122 <ll_rx_dequeue+0x56>
   1a11c:	7f59      	ldrb	r1, [r3, #29]
   1a11e:	2900      	cmp	r1, #0
   1a120:	d04a      	beq.n	1a1b8 <ll_rx_dequeue+0xec>
			struct lll_adv *lll = ftr->param;
   1a122:	689e      	ldr	r6, [r3, #8]
			if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
   1a124:	2a3c      	cmp	r2, #60	; 0x3c
			struct ll_adv_set *adv = (void *)HDR_LLL2EVT(lll);
   1a126:	6835      	ldr	r5, [r6, #0]
			if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
   1a128:	d13d      	bne.n	1a1a6 <ll_rx_dequeue+0xda>
				conn_lll = lll->conn;
   1a12a:	68b4      	ldr	r4, [r6, #8]
				LL_ASSERT(conn_lll);
   1a12c:	b95c      	cbnz	r4, 1a146 <ll_rx_dequeue+0x7a>
   1a12e:	f240 3236 	movw	r2, #822	; 0x336
   1a132:	492d      	ldr	r1, [pc, #180]	; (1a1e8 <ll_rx_dequeue+0x11c>)
   1a134:	482d      	ldr	r0, [pc, #180]	; (1a1ec <ll_rx_dequeue+0x120>)
   1a136:	f00c ff1a 	bl	26f6e <printk>
   1a13a:	4040      	eors	r0, r0
   1a13c:	f380 8811 	msr	BASEPRI, r0
   1a140:	f04f 0003 	mov.w	r0, #3
   1a144:	df02      	svc	2
				lll->conn = NULL;
   1a146:	2300      	movs	r3, #0
   1a148:	60b3      	str	r3, [r6, #8]
				LL_ASSERT(!conn_lll->link_tx_free);
   1a14a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1a14c:	b15b      	cbz	r3, 1a166 <ll_rx_dequeue+0x9a>
   1a14e:	f240 3239 	movw	r2, #825	; 0x339
   1a152:	4925      	ldr	r1, [pc, #148]	; (1a1e8 <ll_rx_dequeue+0x11c>)
   1a154:	4825      	ldr	r0, [pc, #148]	; (1a1ec <ll_rx_dequeue+0x120>)
   1a156:	f00c ff0a 	bl	26f6e <printk>
   1a15a:	4040      	eors	r0, r0
   1a15c:	f380 8811 	msr	BASEPRI, r0
   1a160:	f04f 0003 	mov.w	r0, #3
   1a164:	df02      	svc	2
				link = memq_deinit(&conn_lll->memq_tx.head,
   1a166:	f104 0144 	add.w	r1, r4, #68	; 0x44
   1a16a:	f104 0040 	add.w	r0, r4, #64	; 0x40
   1a16e:	f011 fae7 	bl	2b740 <memq_deinit>
				LL_ASSERT(link);
   1a172:	4606      	mov	r6, r0
   1a174:	b958      	cbnz	r0, 1a18e <ll_rx_dequeue+0xc2>
   1a176:	f44f 724f 	mov.w	r2, #828	; 0x33c
   1a17a:	491b      	ldr	r1, [pc, #108]	; (1a1e8 <ll_rx_dequeue+0x11c>)
   1a17c:	481b      	ldr	r0, [pc, #108]	; (1a1ec <ll_rx_dequeue+0x120>)
   1a17e:	f00c fef6 	bl	26f6e <printk>
   1a182:	4040      	eors	r0, r0
   1a184:	f380 8811 	msr	BASEPRI, r0
   1a188:	f04f 0003 	mov.w	r0, #3
   1a18c:	df02      	svc	2
				conn_lll->link_tx_free = link;
   1a18e:	6526      	str	r6, [r4, #80]	; 0x50
				ll_conn_release(conn);
   1a190:	6820      	ldr	r0, [r4, #0]
   1a192:	f001 f8fd 	bl	1b390 <ll_conn_release>
			adv->is_enabled = 0U;
   1a196:	f895 304e 	ldrb.w	r3, [r5, #78]	; 0x4e
   1a19a:	f36f 0300 	bfc	r3, #0, #1
   1a19e:	f885 304e 	strb.w	r3, [r5, #78]	; 0x4e
}
   1a1a2:	b002      	add	sp, #8
   1a1a4:	bd70      	pop	{r4, r5, r6, pc}
				if (adv->node_rx_cc_free) {
   1a1a6:	6ca8      	ldr	r0, [r5, #72]	; 0x48
   1a1a8:	2800      	cmp	r0, #0
   1a1aa:	d0f4      	beq.n	1a196 <ll_rx_dequeue+0xca>
					adv->node_rx_cc_free = NULL;
   1a1ac:	2300      	movs	r3, #0
   1a1ae:	64ab      	str	r3, [r5, #72]	; 0x48
					mem_release(rx_free, &mem_pdu_rx.free);
   1a1b0:	4911      	ldr	r1, [pc, #68]	; (1a1f8 <ll_rx_dequeue+0x12c>)
   1a1b2:	f011 fa8f 	bl	2b6d4 <mem_release>
   1a1b6:	e7ee      	b.n	1a196 <ll_rx_dequeue+0xca>
			LL_ASSERT(0);
   1a1b8:	f240 3261 	movw	r2, #865	; 0x361
		LL_ASSERT(0);
   1a1bc:	490a      	ldr	r1, [pc, #40]	; (1a1e8 <ll_rx_dequeue+0x11c>)
   1a1be:	480b      	ldr	r0, [pc, #44]	; (1a1ec <ll_rx_dequeue+0x120>)
   1a1c0:	f00c fed5 	bl	26f6e <printk>
   1a1c4:	4040      	eors	r0, r0
   1a1c6:	f380 8811 	msr	BASEPRI, r0
   1a1ca:	f04f 0003 	mov.w	r0, #3
   1a1ce:	df02      	svc	2
}
   1a1d0:	e7e7      	b.n	1a1a2 <ll_rx_dequeue+0xd6>
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
   1a1d2:	2900      	cmp	r1, #0
   1a1d4:	d1e5      	bne.n	1a1a2 <ll_rx_dequeue+0xd6>
   1a1d6:	f240 32b5 	movw	r2, #949	; 0x3b5
   1a1da:	e7ef      	b.n	1a1bc <ll_rx_dequeue+0xf0>
		LL_ASSERT(0);
   1a1dc:	f240 32b9 	movw	r2, #953	; 0x3b9
   1a1e0:	e7ec      	b.n	1a1bc <ll_rx_dequeue+0xf0>
   1a1e2:	bf00      	nop
   1a1e4:	200036a0 	.word	0x200036a0
   1a1e8:	00034ede 	.word	0x00034ede
   1a1ec:	0002fa94 	.word	0x0002fa94
   1a1f0:	200033f8 	.word	0x200033f8
   1a1f4:	01700019 	.word	0x01700019
   1a1f8:	2000345c 	.word	0x2000345c

0001a1fc <ll_rx_mem_release>:
{
   1a1fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx = *node_rx;
   1a200:	6804      	ldr	r4, [r0, #0]
			LL_ASSERT(0);
   1a202:	4d3d      	ldr	r5, [pc, #244]	; (1a2f8 <ll_rx_mem_release+0xfc>)
   1a204:	4e3d      	ldr	r6, [pc, #244]	; (1a2fc <ll_rx_mem_release+0x100>)
   1a206:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 1a304 <ll_rx_mem_release+0x108>
{
   1a20a:	4607      	mov	r7, r0
	while (rx) {
   1a20c:	b92c      	cbnz	r4, 1a21a <ll_rx_mem_release+0x1e>
	*node_rx = rx;
   1a20e:	603c      	str	r4, [r7, #0]
	rx_alloc(UINT8_MAX);
   1a210:	20ff      	movs	r0, #255	; 0xff
}
   1a212:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx_alloc(UINT8_MAX);
   1a216:	f7ff bca5 	b.w	19b64 <rx_alloc>
		switch (rx_free->type) {
   1a21a:	7922      	ldrb	r2, [r4, #4]
		rx = rx->next;
   1a21c:	f8d4 9000 	ldr.w	r9, [r4]
		switch (rx_free->type) {
   1a220:	2a18      	cmp	r2, #24
   1a222:	d85c      	bhi.n	1a2de <ll_rx_mem_release+0xe2>
   1a224:	2301      	movs	r3, #1
   1a226:	4093      	lsls	r3, r2
   1a228:	ea13 0f08 	tst.w	r3, r8
   1a22c:	d119      	bne.n	1a262 <ll_rx_mem_release+0x66>
   1a22e:	02da      	lsls	r2, r3, #11
   1a230:	d429      	bmi.n	1a286 <ll_rx_mem_release+0x8a>
   1a232:	031b      	lsls	r3, r3, #12
   1a234:	d553      	bpl.n	1a2de <ll_rx_mem_release+0xe2>
			} else if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
   1a236:	7f23      	ldrb	r3, [r4, #28]
   1a238:	2b3c      	cmp	r3, #60	; 0x3c
   1a23a:	d105      	bne.n	1a248 <ll_rx_mem_release+0x4c>
			mem_release(rx_free, &mem_pdu_rx.free);
   1a23c:	4930      	ldr	r1, [pc, #192]	; (1a300 <ll_rx_mem_release+0x104>)
   1a23e:	4620      	mov	r0, r4
   1a240:	f011 fa48 	bl	2b6d4 <mem_release>
{
   1a244:	464c      	mov	r4, r9
   1a246:	e7e1      	b.n	1a20c <ll_rx_mem_release+0x10>
				LL_ASSERT(!cc->status);
   1a248:	b15b      	cbz	r3, 1a262 <ll_rx_mem_release+0x66>
   1a24a:	f240 4223 	movw	r2, #1059	; 0x423
   1a24e:	4629      	mov	r1, r5
   1a250:	4630      	mov	r0, r6
   1a252:	f00c fe8c 	bl	26f6e <printk>
   1a256:	4040      	eors	r0, r0
   1a258:	f380 8811 	msr	BASEPRI, r0
   1a25c:	f04f 0003 	mov.w	r0, #3
   1a260:	df02      	svc	2
			LL_ASSERT(rx_free->type != NODE_RX_TYPE_NONE);
   1a262:	7923      	ldrb	r3, [r4, #4]
   1a264:	b95b      	cbnz	r3, 1a27e <ll_rx_mem_release+0x82>
   1a266:	f240 4269 	movw	r2, #1129	; 0x469
   1a26a:	4629      	mov	r1, r5
   1a26c:	4630      	mov	r0, r6
   1a26e:	f00c fe7e 	bl	26f6e <printk>
   1a272:	4040      	eors	r0, r0
   1a274:	f380 8811 	msr	BASEPRI, r0
   1a278:	f04f 0003 	mov.w	r0, #3
   1a27c:	df02      	svc	2
			ll_rx_link_inc_quota(1);
   1a27e:	2001      	movs	r0, #1
   1a280:	f7ff fc0a 	bl	19a98 <ll_rx_link_inc_quota>
   1a284:	e7da      	b.n	1a23c <ll_rx_mem_release+0x40>
			conn = ll_conn_get(rx_free->handle);
   1a286:	88e0      	ldrh	r0, [r4, #6]
   1a288:	f001 f8fc 	bl	1b484 <ll_conn_get>
			LL_ASSERT(!conn->lll.link_tx_free);
   1a28c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
			conn = ll_conn_get(rx_free->handle);
   1a28e:	4604      	mov	r4, r0
			LL_ASSERT(!conn->lll.link_tx_free);
   1a290:	b15b      	cbz	r3, 1a2aa <ll_rx_mem_release+0xae>
   1a292:	f44f 6292 	mov.w	r2, #1168	; 0x490
   1a296:	4629      	mov	r1, r5
   1a298:	4630      	mov	r0, r6
   1a29a:	f00c fe68 	bl	26f6e <printk>
   1a29e:	4040      	eors	r0, r0
   1a2a0:	f380 8811 	msr	BASEPRI, r0
   1a2a4:	f04f 0003 	mov.w	r0, #3
   1a2a8:	df02      	svc	2
			link = memq_deinit(&conn->lll.memq_tx.head,
   1a2aa:	f104 0160 	add.w	r1, r4, #96	; 0x60
   1a2ae:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   1a2b2:	f011 fa45 	bl	2b740 <memq_deinit>
			LL_ASSERT(link);
   1a2b6:	4682      	mov	sl, r0
   1a2b8:	b958      	cbnz	r0, 1a2d2 <ll_rx_mem_release+0xd6>
   1a2ba:	f240 4293 	movw	r2, #1171	; 0x493
   1a2be:	4629      	mov	r1, r5
   1a2c0:	4630      	mov	r0, r6
   1a2c2:	f00c fe54 	bl	26f6e <printk>
   1a2c6:	4040      	eors	r0, r0
   1a2c8:	f380 8811 	msr	BASEPRI, r0
   1a2cc:	f04f 0003 	mov.w	r0, #3
   1a2d0:	df02      	svc	2
			conn->lll.link_tx_free = link;
   1a2d2:	f8c4 a06c 	str.w	sl, [r4, #108]	; 0x6c
			ll_conn_release(conn);
   1a2d6:	4620      	mov	r0, r4
   1a2d8:	f001 f85a 	bl	1b390 <ll_conn_release>
		break;
   1a2dc:	e7b2      	b.n	1a244 <ll_rx_mem_release+0x48>
			LL_ASSERT(0);
   1a2de:	f240 429d 	movw	r2, #1181	; 0x49d
   1a2e2:	4629      	mov	r1, r5
   1a2e4:	4630      	mov	r0, r6
   1a2e6:	f00c fe42 	bl	26f6e <printk>
   1a2ea:	4040      	eors	r0, r0
   1a2ec:	f380 8811 	msr	BASEPRI, r0
   1a2f0:	f04f 0003 	mov.w	r0, #3
   1a2f4:	df02      	svc	2
			break;
   1a2f6:	e7a5      	b.n	1a244 <ll_rx_mem_release+0x48>
   1a2f8:	00034ede 	.word	0x00034ede
   1a2fc:	0002fa94 	.word	0x0002fa94
   1a300:	2000345c 	.word	0x2000345c
   1a304:	01600019 	.word	0x01600019

0001a308 <ll_rx_link_alloc>:
	return mem_acquire(&mem_link_rx.free);
   1a308:	4801      	ldr	r0, [pc, #4]	; (1a310 <ll_rx_link_alloc+0x8>)
   1a30a:	f011 b9d2 	b.w	2b6b2 <mem_acquire>
   1a30e:	bf00      	nop
   1a310:	200033f8 	.word	0x200033f8

0001a314 <ll_rx_link_release>:
	mem_release(link, &mem_link_rx.free);
   1a314:	4901      	ldr	r1, [pc, #4]	; (1a31c <ll_rx_link_release+0x8>)
   1a316:	f011 b9dd 	b.w	2b6d4 <mem_release>
   1a31a:	bf00      	nop
   1a31c:	200033f8 	.word	0x200033f8

0001a320 <ll_rx_alloc>:
	return mem_acquire(&mem_pdu_rx.free);
   1a320:	4801      	ldr	r0, [pc, #4]	; (1a328 <ll_rx_alloc+0x8>)
   1a322:	f011 b9c6 	b.w	2b6b2 <mem_acquire>
   1a326:	bf00      	nop
   1a328:	2000345c 	.word	0x2000345c

0001a32c <ll_rx_release>:
	mem_release(node_rx, &mem_pdu_rx.free);
   1a32c:	4901      	ldr	r1, [pc, #4]	; (1a334 <ll_rx_release+0x8>)
   1a32e:	f011 b9d1 	b.w	2b6d4 <mem_release>
   1a332:	bf00      	nop
   1a334:	2000345c 	.word	0x2000345c

0001a338 <ll_rx_put>:
	rx_hdr->ack_last = mfifo_tx_ack.l;
   1a338:	4b02      	ldr	r3, [pc, #8]	; (1a344 <ll_rx_put+0xc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   1a33a:	4a03      	ldr	r2, [pc, #12]	; (1a348 <ll_rx_put+0x10>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   1a33c:	78db      	ldrb	r3, [r3, #3]
   1a33e:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   1a340:	f011 ba09 	b.w	2b756 <memq_enqueue>
   1a344:	20000c08 	.word	0x20000c08
   1a348:	200036a4 	.word	0x200036a4

0001a34c <ll_rx_sched>:
	k_sem_give(sem_recv);
   1a34c:	4b01      	ldr	r3, [pc, #4]	; (1a354 <ll_rx_sched+0x8>)
   1a34e:	6818      	ldr	r0, [r3, #0]
	z_impl_k_sem_give(sem);
   1a350:	f009 bab4 	b.w	238bc <z_impl_k_sem_give>
   1a354:	200036b0 	.word	0x200036b0

0001a358 <ll_pdu_rx_alloc_peek>:
{
   1a358:	b510      	push	{r4, lr}
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   1a35a:	4a0a      	ldr	r2, [pc, #40]	; (1a384 <ll_pdu_rx_alloc_peek+0x2c>)
   1a35c:	7891      	ldrb	r1, [r2, #2]
   1a35e:	78d4      	ldrb	r4, [r2, #3]
   1a360:	7853      	ldrb	r3, [r2, #1]
	if (last >= first) {
   1a362:	42a1      	cmp	r1, r4
		return count - first + last;
   1a364:	bf8a      	itet	hi
   1a366:	1a5b      	subhi	r3, r3, r1
		return last - first;
   1a368:	1a63      	subls	r3, r4, r1
		return count - first + last;
   1a36a:	191b      	addhi	r3, r3, r4
   1a36c:	b2db      	uxtb	r3, r3
   1a36e:	4298      	cmp	r0, r3
   1a370:	d806      	bhi.n	1a380 <ll_pdu_rx_alloc_peek+0x28>
	if (first == last) {
   1a372:	42a1      	cmp	r1, r4
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   1a374:	7813      	ldrb	r3, [r2, #0]
   1a376:	d003      	beq.n	1a380 <ll_pdu_rx_alloc_peek+0x28>
	return *((void **)(fifo + first * size));
   1a378:	fb01 2203 	mla	r2, r1, r3, r2
   1a37c:	6850      	ldr	r0, [r2, #4]
}
   1a37e:	bd10      	pop	{r4, pc}
		return NULL;
   1a380:	2000      	movs	r0, #0
   1a382:	e7fc      	b.n	1a37e <ll_pdu_rx_alloc_peek+0x26>
   1a384:	20000abc 	.word	0x20000abc

0001a388 <ll_pdu_rx_alloc>:
{
   1a388:	b510      	push	{r4, lr}
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
   1a38a:	4a09      	ldr	r2, [pc, #36]	; (1a3b0 <ll_pdu_rx_alloc+0x28>)
 * @return              Head buffer; or NULL if queue was empty
 */
static inline void *mfifo_dequeue(uint8_t *fifo, uint8_t size, uint8_t count,
				  uint8_t last, uint8_t *first)
{
	uint8_t _first = *first; /* Copy read-index */
   1a38c:	7893      	ldrb	r3, [r2, #2]
	void *mem;

	/* Queue is empty if first == last */
	if (_first == last) {
   1a38e:	78d0      	ldrb	r0, [r2, #3]
   1a390:	7811      	ldrb	r1, [r2, #0]
   1a392:	7854      	ldrb	r4, [r2, #1]
   1a394:	4298      	cmp	r0, r3
   1a396:	d009      	beq.n	1a3ac <ll_pdu_rx_alloc+0x24>
	}

	/* Obtain address of head buffer.
	 * API 2: fifo is array of void-ptrs
	 */
	mem = *((void **)(fifo + _first * size));
   1a398:	fb03 2101 	mla	r1, r3, r1, r2

	/* Circular buffer increment read-index modulo 'count' */
	_first += 1U;
   1a39c:	3301      	adds	r3, #1
   1a39e:	b2db      	uxtb	r3, r3
	if (_first == count) {
		_first = 0U;
   1a3a0:	429c      	cmp	r4, r3
   1a3a2:	bf08      	it	eq
   1a3a4:	2300      	moveq	r3, #0
	mem = *((void **)(fifo + _first * size));
   1a3a6:	6848      	ldr	r0, [r1, #4]
	}

	*first = _first; /* Write back read-index */
   1a3a8:	7093      	strb	r3, [r2, #2]
}
   1a3aa:	bd10      	pop	{r4, pc}
		return NULL;
   1a3ac:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
   1a3ae:	e7fc      	b.n	1a3aa <ll_pdu_rx_alloc+0x22>
   1a3b0:	20000abc 	.word	0x20000abc

0001a3b4 <ll_tx_ack_put>:
{
   1a3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	idx = MFIFO_ENQUEUE_GET(tx_ack, (void **)&tx);
   1a3b6:	4a12      	ldr	r2, [pc, #72]	; (1a400 <ll_tx_ack_put+0x4c>)
   1a3b8:	78d4      	ldrb	r4, [r2, #3]
	if (last == count) {
   1a3ba:	7857      	ldrb	r7, [r2, #1]
   1a3bc:	7895      	ldrb	r5, [r2, #2]
   1a3be:	7816      	ldrb	r6, [r2, #0]
	last = last + 1;
   1a3c0:	1c63      	adds	r3, r4, #1
   1a3c2:	b2db      	uxtb	r3, r3
		last = 0U;
   1a3c4:	429f      	cmp	r7, r3
   1a3c6:	bf08      	it	eq
   1a3c8:	2300      	moveq	r3, #0
	if (last == first) {
   1a3ca:	429d      	cmp	r5, r3
   1a3cc:	d004      	beq.n	1a3d8 <ll_tx_ack_put+0x24>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   1a3ce:	1d15      	adds	r5, r2, #4
   1a3d0:	fb14 f406 	smulbb	r4, r4, r6
	LL_ASSERT(tx);
   1a3d4:	192e      	adds	r6, r5, r4
   1a3d6:	d10e      	bne.n	1a3f6 <ll_tx_ack_put+0x42>
   1a3d8:	f240 42f1 	movw	r2, #1265	; 0x4f1
   1a3dc:	4909      	ldr	r1, [pc, #36]	; (1a404 <ll_tx_ack_put+0x50>)
   1a3de:	480a      	ldr	r0, [pc, #40]	; (1a408 <ll_tx_ack_put+0x54>)
   1a3e0:	f00c fdc5 	bl	26f6e <printk>
   1a3e4:	4040      	eors	r0, r0
   1a3e6:	f380 8811 	msr	BASEPRI, r0
   1a3ea:	f04f 0003 	mov.w	r0, #3
   1a3ee:	df02      	svc	2
	tx->handle = handle;
   1a3f0:	2300      	movs	r3, #0
   1a3f2:	801b      	strh	r3, [r3, #0]
   1a3f4:	deff      	udf	#255	; 0xff
   1a3f6:	5328      	strh	r0, [r5, r4]
	*last = idx; /* Commit: Update write index */
   1a3f8:	70d3      	strb	r3, [r2, #3]
	tx->node = node_tx;
   1a3fa:	6071      	str	r1, [r6, #4]
}
   1a3fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a3fe:	bf00      	nop
   1a400:	20000c08 	.word	0x20000c08
   1a404:	00034ede 	.word	0x00034ede
   1a408:	0002fa94 	.word	0x0002fa94

0001a40c <ll_radio_state_abort>:
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   1a40c:	2200      	movs	r2, #0
{
   1a40e:	b508      	push	{r3, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   1a410:	4611      	mov	r1, r2
   1a412:	4b09      	ldr	r3, [pc, #36]	; (1a438 <ll_radio_state_abort+0x2c>)
   1a414:	2001      	movs	r0, #1
   1a416:	f7fd fe15 	bl	18044 <mayfly_enqueue>
	LL_ASSERT(!ret);
   1a41a:	b158      	cbz	r0, 1a434 <ll_radio_state_abort+0x28>
   1a41c:	f240 5209 	movw	r2, #1289	; 0x509
   1a420:	4906      	ldr	r1, [pc, #24]	; (1a43c <ll_radio_state_abort+0x30>)
   1a422:	4807      	ldr	r0, [pc, #28]	; (1a440 <ll_radio_state_abort+0x34>)
   1a424:	f00c fda3 	bl	26f6e <printk>
   1a428:	4040      	eors	r0, r0
   1a42a:	f380 8811 	msr	BASEPRI, r0
   1a42e:	f04f 0003 	mov.w	r0, #3
   1a432:	df02      	svc	2
}
   1a434:	bd08      	pop	{r3, pc}
   1a436:	bf00      	nop
   1a438:	20000c3c 	.word	0x20000c3c
   1a43c:	00034ede 	.word	0x00034ede
   1a440:	0002fa94 	.word	0x0002fa94

0001a444 <ull_ticker_status_take>:
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1a444:	f030 0302 	bics.w	r3, r0, #2
{
   1a448:	b510      	push	{r4, lr}
   1a44a:	460c      	mov	r4, r1
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1a44c:	d00e      	beq.n	1a46c <ull_ticker_status_take+0x28>
   1a44e:	680b      	ldr	r3, [r1, #0]
   1a450:	2b02      	cmp	r3, #2
   1a452:	d10b      	bne.n	1a46c <ull_ticker_status_take+0x28>
   1a454:	f240 5226 	movw	r2, #1318	; 0x526
   1a458:	4909      	ldr	r1, [pc, #36]	; (1a480 <ull_ticker_status_take+0x3c>)
   1a45a:	480a      	ldr	r0, [pc, #40]	; (1a484 <ull_ticker_status_take+0x40>)
   1a45c:	f00c fd87 	bl	26f6e <printk>
   1a460:	4040      	eors	r0, r0
   1a462:	f380 8811 	msr	BASEPRI, r0
   1a466:	f04f 0003 	mov.w	r0, #3
   1a46a:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   1a46c:	f04f 32ff 	mov.w	r2, #4294967295
   1a470:	f04f 33ff 	mov.w	r3, #4294967295
   1a474:	4804      	ldr	r0, [pc, #16]	; (1a488 <ull_ticker_status_take+0x44>)
   1a476:	f009 fa5d 	bl	23934 <z_impl_k_sem_take>
	return *ret_cb;
   1a47a:	6820      	ldr	r0, [r4, #0]
}
   1a47c:	bd10      	pop	{r4, pc}
   1a47e:	bf00      	nop
   1a480:	00034ede 	.word	0x00034ede
   1a484:	0002fa94 	.word	0x0002fa94
   1a488:	200036b4 	.word	0x200036b4

0001a48c <ull_disable_mark>:
	if (!*m) {
   1a48c:	4b02      	ldr	r3, [pc, #8]	; (1a498 <ull_disable_mark+0xc>)
   1a48e:	681a      	ldr	r2, [r3, #0]
   1a490:	b902      	cbnz	r2, 1a494 <ull_disable_mark+0x8>
		*m = param;
   1a492:	6018      	str	r0, [r3, #0]
}
   1a494:	6818      	ldr	r0, [r3, #0]
   1a496:	4770      	bx	lr
   1a498:	20003330 	.word	0x20003330

0001a49c <ull_disable_unmark>:
	if (*m && *m == param) {
   1a49c:	4905      	ldr	r1, [pc, #20]	; (1a4b4 <ull_disable_unmark+0x18>)
   1a49e:	680b      	ldr	r3, [r1, #0]
   1a4a0:	b12b      	cbz	r3, 1a4ae <ull_disable_unmark+0x12>
   1a4a2:	4298      	cmp	r0, r3
   1a4a4:	f04f 0200 	mov.w	r2, #0
		*m = NULL;
   1a4a8:	bf0c      	ite	eq
   1a4aa:	600a      	streq	r2, [r1, #0]
	return NULL;
   1a4ac:	4613      	movne	r3, r2
}
   1a4ae:	4618      	mov	r0, r3
   1a4b0:	4770      	bx	lr
   1a4b2:	bf00      	nop
   1a4b4:	20003330 	.word	0x20003330

0001a4b8 <ull_disable_mark_get>:
}
   1a4b8:	4b01      	ldr	r3, [pc, #4]	; (1a4c0 <ull_disable_mark_get+0x8>)
   1a4ba:	6818      	ldr	r0, [r3, #0]
   1a4bc:	4770      	bx	lr
   1a4be:	bf00      	nop
   1a4c0:	20003330 	.word	0x20003330

0001a4c4 <ull_update_mark>:
	if (!*m) {
   1a4c4:	4b02      	ldr	r3, [pc, #8]	; (1a4d0 <ull_update_mark+0xc>)
   1a4c6:	681a      	ldr	r2, [r3, #0]
   1a4c8:	b902      	cbnz	r2, 1a4cc <ull_update_mark+0x8>
		*m = param;
   1a4ca:	6018      	str	r0, [r3, #0]
}
   1a4cc:	6818      	ldr	r0, [r3, #0]
   1a4ce:	4770      	bx	lr
   1a4d0:	20003334 	.word	0x20003334

0001a4d4 <ull_update_unmark>:
	if (*m && *m == param) {
   1a4d4:	4905      	ldr	r1, [pc, #20]	; (1a4ec <ull_update_unmark+0x18>)
   1a4d6:	680b      	ldr	r3, [r1, #0]
   1a4d8:	b12b      	cbz	r3, 1a4e6 <ull_update_unmark+0x12>
   1a4da:	4298      	cmp	r0, r3
   1a4dc:	f04f 0200 	mov.w	r2, #0
		*m = NULL;
   1a4e0:	bf0c      	ite	eq
   1a4e2:	600a      	streq	r2, [r1, #0]
	return NULL;
   1a4e4:	4613      	movne	r3, r2
}
   1a4e6:	4618      	mov	r0, r3
   1a4e8:	4770      	bx	lr
   1a4ea:	bf00      	nop
   1a4ec:	20003334 	.word	0x20003334

0001a4f0 <ull_update_mark_get>:
}
   1a4f0:	4b01      	ldr	r3, [pc, #4]	; (1a4f8 <ull_update_mark_get+0x8>)
   1a4f2:	6818      	ldr	r0, [r3, #0]
   1a4f4:	4770      	bx	lr
   1a4f6:	bf00      	nop
   1a4f8:	20003334 	.word	0x20003334

0001a4fc <ull_disable>:
{
   1a4fc:	b530      	push	{r4, r5, lr}
	hdr = HDR_ULL(((struct lll_hdr *)lll)->parent);
   1a4fe:	6804      	ldr	r4, [r0, #0]
	if (!hdr) {
   1a500:	f114 0f10 	cmn.w	r4, #16
{
   1a504:	b087      	sub	sp, #28
   1a506:	4605      	mov	r5, r0
	if (!hdr) {
   1a508:	d102      	bne.n	1a510 <ull_disable+0x14>
		return ULL_STATUS_SUCCESS;
   1a50a:	2000      	movs	r0, #0
}
   1a50c:	b007      	add	sp, #28
   1a50e:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1a510:	2201      	movs	r2, #1
   1a512:	2100      	movs	r1, #0
   1a514:	4668      	mov	r0, sp
   1a516:	f012 ff00 	bl	2d31a <z_impl_k_sem_init>
	hdr->disabled_cb = disabled_cb;
   1a51a:	4b11      	ldr	r3, [pc, #68]	; (1a560 <ull_disable+0x64>)
   1a51c:	6163      	str	r3, [r4, #20]
	return hdr->ref;
   1a51e:	7c23      	ldrb	r3, [r4, #16]
	hdr->disabled_param = &sem;
   1a520:	f8c4 d018 	str.w	sp, [r4, #24]
	if (!ull_ref_get(hdr)) {
   1a524:	2b00      	cmp	r3, #0
   1a526:	d0f0      	beq.n	1a50a <ull_disable+0xe>
	mfy.param = lll;
   1a528:	4b0e      	ldr	r3, [pc, #56]	; (1a564 <ull_disable+0x68>)
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   1a52a:	2200      	movs	r2, #0
   1a52c:	4611      	mov	r1, r2
   1a52e:	2003      	movs	r0, #3
	mfy.param = lll;
   1a530:	609d      	str	r5, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   1a532:	f7fd fd87 	bl	18044 <mayfly_enqueue>
	LL_ASSERT(!ret);
   1a536:	b158      	cbz	r0, 1a550 <ull_disable+0x54>
   1a538:	f240 5297 	movw	r2, #1431	; 0x597
   1a53c:	490a      	ldr	r1, [pc, #40]	; (1a568 <ull_disable+0x6c>)
   1a53e:	480b      	ldr	r0, [pc, #44]	; (1a56c <ull_disable+0x70>)
   1a540:	f00c fd15 	bl	26f6e <printk>
   1a544:	4040      	eors	r0, r0
   1a546:	f380 8811 	msr	BASEPRI, r0
   1a54a:	f04f 0003 	mov.w	r0, #3
   1a54e:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   1a550:	f04f 32ff 	mov.w	r2, #4294967295
   1a554:	f04f 33ff 	mov.w	r3, #4294967295
   1a558:	4668      	mov	r0, sp
   1a55a:	f009 f9eb 	bl	23934 <z_impl_k_sem_take>
	return k_sem_take(&sem, K_FOREVER);
   1a55e:	e7d5      	b.n	1a50c <ull_disable+0x10>
   1a560:	0002bd3d 	.word	0x0002bd3d
   1a564:	20000c4c 	.word	0x20000c4c
   1a568:	00034ede 	.word	0x00034ede
   1a56c:	0002fa94 	.word	0x0002fa94

0001a570 <ull_ticker_stop_with_mark>:
{
   1a570:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a572:	4607      	mov	r7, r0
   1a574:	b085      	sub	sp, #20
	mark = ull_disable_mark(param);
   1a576:	4608      	mov	r0, r1
{
   1a578:	460c      	mov	r4, r1
   1a57a:	4616      	mov	r6, r2
	mark = ull_disable_mark(param);
   1a57c:	f7ff ff86 	bl	1a48c <ull_disable_mark>
	if (mark != param) {
   1a580:	4281      	cmp	r1, r0
   1a582:	d121      	bne.n	1a5c8 <ull_ticker_stop_with_mark+0x58>
	ret_cb = TICKER_STATUS_BUSY;
   1a584:	2302      	movs	r3, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   1a586:	ad03      	add	r5, sp, #12
	ret_cb = TICKER_STATUS_BUSY;
   1a588:	9303      	str	r3, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   1a58a:	2103      	movs	r1, #3
   1a58c:	9500      	str	r5, [sp, #0]
   1a58e:	4b11      	ldr	r3, [pc, #68]	; (1a5d4 <ull_ticker_stop_with_mark+0x64>)
   1a590:	463a      	mov	r2, r7
   1a592:	2000      	movs	r0, #0
   1a594:	f7fe fb2c 	bl	18bf0 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   1a598:	4629      	mov	r1, r5
   1a59a:	f7ff ff53 	bl	1a444 <ull_ticker_status_take>
	if (ret) {
   1a59e:	b148      	cbz	r0, 1a5b4 <ull_ticker_stop_with_mark+0x44>
		mark = ull_disable_unmark(param);
   1a5a0:	4620      	mov	r0, r4
   1a5a2:	f7ff ff7b 	bl	1a49c <ull_disable_unmark>
		if (mark != param) {
   1a5a6:	4284      	cmp	r4, r0
   1a5a8:	d10e      	bne.n	1a5c8 <ull_ticker_stop_with_mark+0x58>
		return -EALREADY;
   1a5aa:	f06f 0577 	mvn.w	r5, #119	; 0x77
}
   1a5ae:	4628      	mov	r0, r5
   1a5b0:	b005      	add	sp, #20
   1a5b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = ull_disable(lll_disable);
   1a5b4:	4630      	mov	r0, r6
   1a5b6:	f7ff ffa1 	bl	1a4fc <ull_disable>
	if (ret) {
   1a5ba:	4605      	mov	r5, r0
   1a5bc:	b938      	cbnz	r0, 1a5ce <ull_ticker_stop_with_mark+0x5e>
	mark = ull_disable_unmark(param);
   1a5be:	4620      	mov	r0, r4
   1a5c0:	f7ff ff6c 	bl	1a49c <ull_disable_unmark>
	if (mark != param) {
   1a5c4:	4284      	cmp	r4, r0
   1a5c6:	d0f2      	beq.n	1a5ae <ull_ticker_stop_with_mark+0x3e>
		return -ENOLCK;
   1a5c8:	f06f 052d 	mvn.w	r5, #45	; 0x2d
   1a5cc:	e7ef      	b.n	1a5ae <ull_ticker_stop_with_mark+0x3e>
		return -EBUSY;
   1a5ce:	f06f 050f 	mvn.w	r5, #15
   1a5d2:	e7ec      	b.n	1a5ae <ull_ticker_stop_with_mark+0x3e>
   1a5d4:	00019d6d 	.word	0x00019d6d

0001a5d8 <ull_pdu_rx_alloc_peek>:
{
   1a5d8:	b510      	push	{r4, lr}
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   1a5da:	4a0a      	ldr	r2, [pc, #40]	; (1a604 <ull_pdu_rx_alloc_peek+0x2c>)
   1a5dc:	7891      	ldrb	r1, [r2, #2]
   1a5de:	78d4      	ldrb	r4, [r2, #3]
   1a5e0:	7853      	ldrb	r3, [r2, #1]
	if (last >= first) {
   1a5e2:	42a1      	cmp	r1, r4
		return count - first + last;
   1a5e4:	bf8a      	itet	hi
   1a5e6:	1a5b      	subhi	r3, r3, r1
		return last - first;
   1a5e8:	1a63      	subls	r3, r4, r1
		return count - first + last;
   1a5ea:	191b      	addhi	r3, r3, r4
   1a5ec:	b2db      	uxtb	r3, r3
   1a5ee:	4298      	cmp	r0, r3
   1a5f0:	d806      	bhi.n	1a600 <ull_pdu_rx_alloc_peek+0x28>
	if (first == last) {
   1a5f2:	42a1      	cmp	r1, r4
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   1a5f4:	7813      	ldrb	r3, [r2, #0]
   1a5f6:	d003      	beq.n	1a600 <ull_pdu_rx_alloc_peek+0x28>
	return *((void **)(fifo + first * size));
   1a5f8:	fb01 2203 	mla	r2, r1, r3, r2
   1a5fc:	6850      	ldr	r0, [r2, #4]
}
   1a5fe:	bd10      	pop	{r4, pc}
		return NULL;
   1a600:	2000      	movs	r0, #0
   1a602:	e7fc      	b.n	1a5fe <ull_pdu_rx_alloc_peek+0x26>
   1a604:	20000acc 	.word	0x20000acc

0001a608 <ull_pdu_rx_alloc>:
{
   1a608:	b510      	push	{r4, lr}
	return MFIFO_DEQUEUE(pdu_rx_free);
   1a60a:	4a09      	ldr	r2, [pc, #36]	; (1a630 <ull_pdu_rx_alloc+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   1a60c:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
   1a60e:	78d0      	ldrb	r0, [r2, #3]
   1a610:	7811      	ldrb	r1, [r2, #0]
   1a612:	7854      	ldrb	r4, [r2, #1]
   1a614:	4298      	cmp	r0, r3
   1a616:	d009      	beq.n	1a62c <ull_pdu_rx_alloc+0x24>
	mem = *((void **)(fifo + _first * size));
   1a618:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
   1a61c:	3301      	adds	r3, #1
   1a61e:	b2db      	uxtb	r3, r3
		_first = 0U;
   1a620:	429c      	cmp	r4, r3
   1a622:	bf08      	it	eq
   1a624:	2300      	moveq	r3, #0
	mem = *((void **)(fifo + _first * size));
   1a626:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   1a628:	7093      	strb	r3, [r2, #2]
}
   1a62a:	bd10      	pop	{r4, pc}
		return NULL;
   1a62c:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(pdu_rx_free);
   1a62e:	e7fc      	b.n	1a62a <ull_pdu_rx_alloc+0x22>
   1a630:	20000acc 	.word	0x20000acc

0001a634 <ull_rx_put>:
{
   1a634:	b538      	push	{r3, r4, r5, lr}
   1a636:	460c      	mov	r4, r1
   1a638:	4605      	mov	r5, r0
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   1a63a:	f001 fe61 	bl	1c300 <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   1a63e:	4621      	mov	r1, r4
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   1a640:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   1a642:	4a03      	ldr	r2, [pc, #12]	; (1a650 <ull_rx_put+0x1c>)
   1a644:	4628      	mov	r0, r5
}
   1a646:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   1a64a:	f011 b884 	b.w	2b756 <memq_enqueue>
   1a64e:	bf00      	nop
   1a650:	200036ac 	.word	0x200036ac

0001a654 <ull_rx_sched>:
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   1a654:	2201      	movs	r2, #1
   1a656:	4b02      	ldr	r3, [pc, #8]	; (1a660 <ull_rx_sched+0xc>)
   1a658:	4611      	mov	r1, r2
   1a65a:	2000      	movs	r0, #0
   1a65c:	f7fd bcf2 	b.w	18044 <mayfly_enqueue>
   1a660:	20000c5c 	.word	0x20000c5c

0001a664 <ull_prepare_enqueue>:
{
   1a664:	b5f0      	push	{r4, r5, r6, r7, lr}
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   1a666:	4d18      	ldr	r5, [pc, #96]	; (1a6c8 <ull_prepare_enqueue+0x64>)
   1a668:	78ef      	ldrb	r7, [r5, #3]
	if (last == count) {
   1a66a:	f895 e001 	ldrb.w	lr, [r5, #1]
   1a66e:	78ac      	ldrb	r4, [r5, #2]
   1a670:	f895 c000 	ldrb.w	ip, [r5]
	last = last + 1;
   1a674:	1c7e      	adds	r6, r7, #1
   1a676:	b2f6      	uxtb	r6, r6
		last = 0U;
   1a678:	45b6      	cmp	lr, r6
   1a67a:	bf08      	it	eq
   1a67c:	2600      	moveq	r6, #0
	if (last == first) {
   1a67e:	42b4      	cmp	r4, r6
   1a680:	d01e      	beq.n	1a6c0 <ull_prepare_enqueue+0x5c>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   1a682:	1d2c      	adds	r4, r5, #4
   1a684:	fb07 440c 	mla	r4, r7, ip, r4
	if (!e) {
   1a688:	b1d4      	cbz	r4, 1a6c0 <ull_prepare_enqueue+0x5c>
   1a68a:	4627      	mov	r7, r4
   1a68c:	f102 0c10 	add.w	ip, r2, #16
   1a690:	f852 eb04 	ldr.w	lr, [r2], #4
   1a694:	f847 eb04 	str.w	lr, [r7], #4
   1a698:	4562      	cmp	r2, ip
   1a69a:	d1f9      	bne.n	1a690 <ull_prepare_enqueue+0x2c>
	e->is_abort_cb = is_abort_cb;
   1a69c:	e9c4 3004 	strd	r3, r0, [r4, #16]
	e->prio = prio;
   1a6a0:	9b05      	ldr	r3, [sp, #20]
   1a6a2:	61e3      	str	r3, [r4, #28]
	e->is_resume = is_resume;
   1a6a4:	f89d 2018 	ldrb.w	r2, [sp, #24]
   1a6a8:	f894 3020 	ldrb.w	r3, [r4, #32]
	e->abort_cb = abort_cb;
   1a6ac:	61a1      	str	r1, [r4, #24]
	e->is_resume = is_resume;
   1a6ae:	f362 0300 	bfi	r3, r2, #0, #1
	e->is_aborted = 0U;
   1a6b2:	f36f 0341 	bfc	r3, #1, #1
   1a6b6:	f884 3020 	strb.w	r3, [r4, #32]
	*last = idx; /* Commit: Update write index */
   1a6ba:	70ee      	strb	r6, [r5, #3]
	return 0;
   1a6bc:	2000      	movs	r0, #0
}
   1a6be:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
   1a6c0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1a6c4:	e7fb      	b.n	1a6be <ull_prepare_enqueue+0x5a>
   1a6c6:	bf00      	nop
   1a6c8:	20000ae4 	.word	0x20000ae4

0001a6cc <ull_prepare_dequeue_get>:
	return MFIFO_DEQUEUE_GET(prep);
   1a6cc:	4b05      	ldr	r3, [pc, #20]	; (1a6e4 <ull_prepare_dequeue_get+0x18>)
   1a6ce:	789a      	ldrb	r2, [r3, #2]
	if (first == last) {
   1a6d0:	78d9      	ldrb	r1, [r3, #3]
   1a6d2:	7818      	ldrb	r0, [r3, #0]
   1a6d4:	4291      	cmp	r1, r2
	return (void *)(fifo + first * size);
   1a6d6:	bf1a      	itte	ne
   1a6d8:	3304      	addne	r3, #4
   1a6da:	fb02 3000 	mlane	r0, r2, r0, r3
		return NULL;
   1a6de:	2000      	moveq	r0, #0
}
   1a6e0:	4770      	bx	lr
   1a6e2:	bf00      	nop
   1a6e4:	20000ae4 	.word	0x20000ae4

0001a6e8 <rx_demux>:
{
   1a6e8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
			ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
					     TICKER_USER_ID_LLL, 0, &mfy);
			LL_ASSERT(!ret);
		}

		MFIFO_DEQUEUE(prep);
   1a6ec:	4e89      	ldr	r6, [pc, #548]	; (1a914 <rx_demux+0x22c>)
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   1a6ee:	4c8a      	ldr	r4, [pc, #552]	; (1a918 <rx_demux+0x230>)
   1a6f0:	aa01      	add	r2, sp, #4
   1a6f2:	e9d4 0100 	ldrd	r0, r1, [r4]
   1a6f6:	f011 f835 	bl	2b764 <memq_peek>
		if (link) {
   1a6fa:	4605      	mov	r5, r0
   1a6fc:	2800      	cmp	r0, #0
   1a6fe:	f000 80f7 	beq.w	1a8f0 <rx_demux+0x208>
			LL_ASSERT(rx);
   1a702:	9b01      	ldr	r3, [sp, #4]
   1a704:	b95b      	cbnz	r3, 1a71e <rx_demux+0x36>
   1a706:	f44f 62e6 	mov.w	r2, #1840	; 0x730
   1a70a:	4984      	ldr	r1, [pc, #528]	; (1a91c <rx_demux+0x234>)
   1a70c:	4884      	ldr	r0, [pc, #528]	; (1a920 <rx_demux+0x238>)
   1a70e:	f00c fc2e 	bl	26f6e <printk>
   1a712:	4040      	eors	r0, r0
   1a714:	f380 8811 	msr	BASEPRI, r0
   1a718:	f04f 0003 	mov.w	r0, #3
   1a71c:	df02      	svc	2
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
   1a71e:	9b01      	ldr	r3, [sp, #4]
   1a720:	aa02      	add	r2, sp, #8
   1a722:	f10d 0102 	add.w	r1, sp, #2
   1a726:	7818      	ldrb	r0, [r3, #0]
   1a728:	f001 fe08 	bl	1c33c <ull_conn_ack_by_last_peek>
			if (link_tx) {
   1a72c:	4602      	mov	r2, r0
   1a72e:	9801      	ldr	r0, [sp, #4]
   1a730:	b132      	cbz	r2, 1a740 <rx_demux+0x58>
				rx_demux_conn_tx_ack(rx->ack_last, handle,
   1a732:	9b02      	ldr	r3, [sp, #8]
   1a734:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1a738:	7800      	ldrb	r0, [r0, #0]
				rx_demux_conn_tx_ack(ack_last, handle,
   1a73a:	f011 fb01 	bl	2bd40 <rx_demux_conn_tx_ack>
   1a73e:	e7d6      	b.n	1a6ee <rx_demux+0x6>
	switch (rx->type) {
   1a740:	7903      	ldrb	r3, [r0, #4]
   1a742:	9003      	str	r0, [sp, #12]
   1a744:	2b03      	cmp	r3, #3
   1a746:	f000 80bf 	beq.w	1a8c8 <rx_demux+0x1e0>
   1a74a:	d810      	bhi.n	1a76e <rx_demux+0x86>
   1a74c:	2b01      	cmp	r3, #1
   1a74e:	d015      	beq.n	1a77c <rx_demux+0x94>
   1a750:	2b02      	cmp	r3, #2
   1a752:	d01a      	beq.n	1a78a <rx_demux+0xa2>
		LL_ASSERT(0);
   1a754:	f640 0225 	movw	r2, #2085	; 0x825
   1a758:	4970      	ldr	r1, [pc, #448]	; (1a91c <rx_demux+0x234>)
   1a75a:	4871      	ldr	r0, [pc, #452]	; (1a920 <rx_demux+0x238>)
   1a75c:	f00c fc07 	bl	26f6e <printk>
   1a760:	4040      	eors	r0, r0
   1a762:	f380 8811 	msr	BASEPRI, r0
   1a766:	f04f 0003 	mov.w	r0, #3
   1a76a:	df02      	svc	2
			if (nack) {
   1a76c:	e7bf      	b.n	1a6ee <rx_demux+0x6>
	switch (rx->type) {
   1a76e:	2b13      	cmp	r3, #19
   1a770:	f000 80a1 	beq.w	1a8b6 <rx_demux+0x1ce>
   1a774:	2b14      	cmp	r3, #20
   1a776:	d001      	beq.n	1a77c <rx_demux+0x94>
   1a778:	2b04      	cmp	r3, #4
   1a77a:	d1eb      	bne.n	1a754 <rx_demux+0x6c>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   1a77c:	4966      	ldr	r1, [pc, #408]	; (1a918 <rx_demux+0x230>)
   1a77e:	6860      	ldr	r0, [r4, #4]
   1a780:	2200      	movs	r2, #0
   1a782:	f010 fff7 	bl	2b774 <memq_dequeue>
		ll_rx_put(link, rx);
   1a786:	9903      	ldr	r1, [sp, #12]
   1a788:	e0ac      	b.n	1a8e4 <rx_demux+0x1fc>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   1a78a:	6860      	ldr	r0, [r4, #4]
   1a78c:	4962      	ldr	r1, [pc, #392]	; (1a918 <rx_demux+0x230>)
   1a78e:	f010 fff1 	bl	2b774 <memq_dequeue>
		rx_demux_event_done(link, rx);
   1a792:	9f03      	ldr	r7, [sp, #12]
	switch (done->extra.type) {
   1a794:	f897 3020 	ldrb.w	r3, [r7, #32]
	ull_hdr = done->param;
   1a798:	69fc      	ldr	r4, [r7, #28]
	switch (done->extra.type) {
   1a79a:	b123      	cbz	r3, 1a7a6 <rx_demux+0xbe>
   1a79c:	2b01      	cmp	r3, #1
   1a79e:	d16d      	bne.n	1a87c <rx_demux+0x194>
		ull_conn_done(done);
   1a7a0:	4638      	mov	r0, r7
   1a7a2:	f001 fc95 	bl	1c0d0 <ull_conn_done>
	if (!MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   1a7a6:	4a5f      	ldr	r2, [pc, #380]	; (1a924 <rx_demux+0x23c>)
   1a7a8:	78d1      	ldrb	r1, [r2, #3]
	if (last == count) {
   1a7aa:	f892 c001 	ldrb.w	ip, [r2, #1]
   1a7ae:	7890      	ldrb	r0, [r2, #2]
	done->extra.type = 0U;
   1a7b0:	2300      	movs	r3, #0
   1a7b2:	f887 3020 	strb.w	r3, [r7, #32]
	last = last + 1;
   1a7b6:	1c4b      	adds	r3, r1, #1
   1a7b8:	b2db      	uxtb	r3, r3
		last = 0U;
   1a7ba:	459c      	cmp	ip, r3
   1a7bc:	bf08      	it	eq
   1a7be:	2300      	moveq	r3, #0
	if (last == first) {
   1a7c0:	4298      	cmp	r0, r3
   1a7c2:	d168      	bne.n	1a896 <rx_demux+0x1ae>
	LL_ASSERT(release == done);
   1a7c4:	f640 026c 	movw	r2, #2156	; 0x86c
   1a7c8:	4954      	ldr	r1, [pc, #336]	; (1a91c <rx_demux+0x234>)
   1a7ca:	4855      	ldr	r0, [pc, #340]	; (1a920 <rx_demux+0x238>)
   1a7cc:	f00c fbcf 	bl	26f6e <printk>
   1a7d0:	4040      	eors	r0, r0
   1a7d2:	f380 8811 	msr	BASEPRI, r0
   1a7d6:	f04f 0003 	mov.w	r0, #3
   1a7da:	df02      	svc	2
	next = ull_prepare_dequeue_get();
   1a7dc:	f7ff ff76 	bl	1a6cc <ull_prepare_dequeue_get>
			mfy.param = next;
   1a7e0:	f8df 8144 	ldr.w	r8, [pc, #324]	; 1a928 <rx_demux+0x240>
	while (next) {
   1a7e4:	b350      	cbz	r0, 1a83c <rx_demux+0x154>
		uint8_t is_aborted = next->is_aborted;
   1a7e6:	f890 5020 	ldrb.w	r5, [r0, #32]
   1a7ea:	f3c5 0740 	ubfx	r7, r5, #1, #1
		uint8_t is_resume = next->is_resume;
   1a7ee:	f005 0501 	and.w	r5, r5, #1
		if (!is_aborted) {
   1a7f2:	b9a7      	cbnz	r7, 1a81e <rx_demux+0x136>
			mfy.param = next;
   1a7f4:	f8c8 0008 	str.w	r0, [r8, #8]
			ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   1a7f8:	4b4b      	ldr	r3, [pc, #300]	; (1a928 <rx_demux+0x240>)
   1a7fa:	463a      	mov	r2, r7
   1a7fc:	4639      	mov	r1, r7
   1a7fe:	2001      	movs	r0, #1
   1a800:	f7fd fc20 	bl	18044 <mayfly_enqueue>
			LL_ASSERT(!ret);
   1a804:	b158      	cbz	r0, 1a81e <rx_demux+0x136>
   1a806:	f640 027d 	movw	r2, #2173	; 0x87d
   1a80a:	4944      	ldr	r1, [pc, #272]	; (1a91c <rx_demux+0x234>)
   1a80c:	4844      	ldr	r0, [pc, #272]	; (1a920 <rx_demux+0x238>)
   1a80e:	f00c fbae 	bl	26f6e <printk>
   1a812:	4040      	eors	r0, r0
   1a814:	f380 8811 	msr	BASEPRI, r0
   1a818:	f04f 0003 	mov.w	r0, #3
   1a81c:	df02      	svc	2
	uint8_t _first = *first; /* Copy read-index */
   1a81e:	78b3      	ldrb	r3, [r6, #2]
	if (_first == last) {
   1a820:	78f1      	ldrb	r1, [r6, #3]
		MFIFO_DEQUEUE(prep);
   1a822:	7872      	ldrb	r2, [r6, #1]
   1a824:	4299      	cmp	r1, r3
   1a826:	d005      	beq.n	1a834 <rx_demux+0x14c>
	_first += 1U;
   1a828:	3301      	adds	r3, #1
   1a82a:	b2db      	uxtb	r3, r3
		_first = 0U;
   1a82c:	429a      	cmp	r2, r3
   1a82e:	bf08      	it	eq
   1a830:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   1a832:	70b3      	strb	r3, [r6, #2]

		next = ull_prepare_dequeue_get();
   1a834:	f7ff ff4a 	bl	1a6cc <ull_prepare_dequeue_get>

		if (!next || (!is_aborted && (!is_resume || next->is_resume))) {
   1a838:	2800      	cmp	r0, #0
   1a83a:	d133      	bne.n	1a8a4 <rx_demux+0x1bc>
			break;
		}
	}

	/* ull instance will resume, dont decrement ref */
	if (!ull_hdr) {
   1a83c:	2c00      	cmp	r4, #0
   1a83e:	f43f af56 	beq.w	1a6ee <rx_demux+0x6>
   1a842:	7823      	ldrb	r3, [r4, #0]
		return;
	}

	/* Decrement prepare reference */
	LL_ASSERT(ull_ref_get(ull_hdr));
   1a844:	b95b      	cbnz	r3, 1a85e <rx_demux+0x176>
   1a846:	f640 028f 	movw	r2, #2191	; 0x88f
   1a84a:	4934      	ldr	r1, [pc, #208]	; (1a91c <rx_demux+0x234>)
   1a84c:	4834      	ldr	r0, [pc, #208]	; (1a920 <rx_demux+0x238>)
   1a84e:	f00c fb8e 	bl	26f6e <printk>
   1a852:	4040      	eors	r0, r0
   1a854:	f380 8811 	msr	BASEPRI, r0
   1a858:	f04f 0003 	mov.w	r0, #3
   1a85c:	df02      	svc	2
	return hdr->ref--;
   1a85e:	7823      	ldrb	r3, [r4, #0]
   1a860:	3b01      	subs	r3, #1
   1a862:	b2db      	uxtb	r3, r3
   1a864:	7023      	strb	r3, [r4, #0]
	return hdr->ref;
   1a866:	7823      	ldrb	r3, [r4, #0]
	ull_ref_dec(ull_hdr);

	/* If disable initiated, signal the semaphore */
	if (!ull_ref_get(ull_hdr) && ull_hdr->disabled_cb) {
   1a868:	2b00      	cmp	r3, #0
   1a86a:	f47f af40 	bne.w	1a6ee <rx_demux+0x6>
   1a86e:	6863      	ldr	r3, [r4, #4]
   1a870:	2b00      	cmp	r3, #0
   1a872:	f43f af3c 	beq.w	1a6ee <rx_demux+0x6>
		ull_hdr->disabled_cb(ull_hdr->disabled_param);
   1a876:	68a0      	ldr	r0, [r4, #8]
   1a878:	4798      	blx	r3
			if (nack) {
   1a87a:	e738      	b.n	1a6ee <rx_demux+0x6>
		LL_ASSERT(0);
   1a87c:	f640 0265 	movw	r2, #2149	; 0x865
   1a880:	4926      	ldr	r1, [pc, #152]	; (1a91c <rx_demux+0x234>)
   1a882:	4827      	ldr	r0, [pc, #156]	; (1a920 <rx_demux+0x238>)
   1a884:	f00c fb73 	bl	26f6e <printk>
   1a888:	4040      	eors	r0, r0
   1a88a:	f380 8811 	msr	BASEPRI, r0
   1a88e:	f04f 0003 	mov.w	r0, #3
   1a892:	df02      	svc	2
		break;
   1a894:	e787      	b.n	1a7a6 <rx_demux+0xbe>
	done->hdr.link = link;
   1a896:	603d      	str	r5, [r7, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   1a898:	7810      	ldrb	r0, [r2, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1a89a:	fb00 2101 	mla	r1, r0, r1, r2
   1a89e:	604f      	str	r7, [r1, #4]
	*last = idx; /* Commit: Update write index */
   1a8a0:	70d3      	strb	r3, [r2, #3]
	LL_ASSERT(release == done);
   1a8a2:	e79b      	b.n	1a7dc <rx_demux+0xf4>
		if (!next || (!is_aborted && (!is_resume || next->is_resume))) {
   1a8a4:	2f00      	cmp	r7, #0
   1a8a6:	d19d      	bne.n	1a7e4 <rx_demux+0xfc>
   1a8a8:	2d00      	cmp	r5, #0
   1a8aa:	d0c7      	beq.n	1a83c <rx_demux+0x154>
   1a8ac:	f890 3020 	ldrb.w	r3, [r0, #32]
   1a8b0:	07db      	lsls	r3, r3, #31
   1a8b2:	d4c3      	bmi.n	1a83c <rx_demux+0x154>
   1a8b4:	e796      	b.n	1a7e4 <rx_demux+0xfc>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   1a8b6:	4918      	ldr	r1, [pc, #96]	; (1a918 <rx_demux+0x230>)
   1a8b8:	6860      	ldr	r0, [r4, #4]
   1a8ba:	f010 ff5b 	bl	2b774 <memq_dequeue>
		ull_conn_setup(link, rx);
   1a8be:	9903      	ldr	r1, [sp, #12]
   1a8c0:	4628      	mov	r0, r5
   1a8c2:	f000 fe67 	bl	1b594 <ull_conn_setup>
			if (nack) {
   1a8c6:	e712      	b.n	1a6ee <rx_demux+0x6>
		nack = ull_conn_rx(link, (void *)&rx);
   1a8c8:	a903      	add	r1, sp, #12
   1a8ca:	4628      	mov	r0, r5
   1a8cc:	f000 fe80 	bl	1b5d0 <ull_conn_rx>
		if (nack) {
   1a8d0:	4602      	mov	r2, r0
   1a8d2:	b9d8      	cbnz	r0, 1a90c <rx_demux+0x224>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   1a8d4:	4910      	ldr	r1, [pc, #64]	; (1a918 <rx_demux+0x230>)
   1a8d6:	6860      	ldr	r0, [r4, #4]
   1a8d8:	f010 ff4c 	bl	2b774 <memq_dequeue>
		if (rx) {
   1a8dc:	9903      	ldr	r1, [sp, #12]
   1a8de:	2900      	cmp	r1, #0
   1a8e0:	f43f af05 	beq.w	1a6ee <rx_demux+0x6>
		ll_rx_put(link, rx);
   1a8e4:	4628      	mov	r0, r5
   1a8e6:	f7ff fd27 	bl	1a338 <ll_rx_put>
		ll_rx_sched();
   1a8ea:	f7ff fd2f 	bl	1a34c <ll_rx_sched>
			if (nack) {
   1a8ee:	e6fe      	b.n	1a6ee <rx_demux+0x6>
			link = ull_conn_ack_peek(&ack_last, &handle, &node_tx);
   1a8f0:	aa03      	add	r2, sp, #12
   1a8f2:	a902      	add	r1, sp, #8
   1a8f4:	f10d 0002 	add.w	r0, sp, #2
   1a8f8:	f001 fd08 	bl	1c30c <ull_conn_ack_peek>
			if (link) {
   1a8fc:	4602      	mov	r2, r0
   1a8fe:	b128      	cbz	r0, 1a90c <rx_demux+0x224>
				rx_demux_conn_tx_ack(ack_last, handle,
   1a900:	9b03      	ldr	r3, [sp, #12]
   1a902:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   1a906:	f89d 0002 	ldrb.w	r0, [sp, #2]
   1a90a:	e716      	b.n	1a73a <rx_demux+0x52>
}
   1a90c:	b004      	add	sp, #16
   1a90e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a912:	bf00      	nop
   1a914:	20000ae4 	.word	0x20000ae4
   1a918:	200036a8 	.word	0x200036a8
   1a91c:	00034ede 	.word	0x00034ede
   1a920:	0002fa94 	.word	0x0002fa94
   1a924:	20000aa8 	.word	0x20000aa8
   1a928:	20000c6c 	.word	0x20000c6c

0001a92c <ull_prepare_dequeue_iter>:
{
   1a92c:	b530      	push	{r4, r5, lr}
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   1a92e:	4b0c      	ldr	r3, [pc, #48]	; (1a960 <ull_prepare_dequeue_iter+0x34>)
	if (*idx >= count) {
   1a930:	7801      	ldrb	r1, [r0, #0]
   1a932:	785c      	ldrb	r4, [r3, #1]
   1a934:	78dd      	ldrb	r5, [r3, #3]
   1a936:	781a      	ldrb	r2, [r3, #0]
   1a938:	42a1      	cmp	r1, r4
   1a93a:	bf24      	itt	cs
   1a93c:	789b      	ldrbcs	r3, [r3, #2]
		*idx = first;
   1a93e:	7003      	strbcs	r3, [r0, #0]
	if (*idx == last) {
   1a940:	7801      	ldrb	r1, [r0, #0]
   1a942:	428d      	cmp	r5, r1
   1a944:	d00a      	beq.n	1a95c <ull_prepare_dequeue_iter+0x30>
	i = *idx + 1;
   1a946:	1c4b      	adds	r3, r1, #1
   1a948:	b2db      	uxtb	r3, r3
		i = 0U;
   1a94a:	429c      	cmp	r4, r3
   1a94c:	bf08      	it	eq
   1a94e:	2300      	moveq	r3, #0
	p = (void *)(fifo + (*idx) * size);
   1a950:	4c04      	ldr	r4, [pc, #16]	; (1a964 <ull_prepare_dequeue_iter+0x38>)
	*idx = i;
   1a952:	7003      	strb	r3, [r0, #0]
	p = (void *)(fifo + (*idx) * size);
   1a954:	fb01 4202 	mla	r2, r1, r2, r4
}
   1a958:	4610      	mov	r0, r2
   1a95a:	bd30      	pop	{r4, r5, pc}
		return NULL;
   1a95c:	2200      	movs	r2, #0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   1a95e:	e7fb      	b.n	1a958 <ull_prepare_dequeue_iter+0x2c>
   1a960:	20000ae4 	.word	0x20000ae4
   1a964:	20000ae8 	.word	0x20000ae8

0001a968 <ull_event_done_extra_get>:
	evdone = MFIFO_DEQUEUE_PEEK(done);
   1a968:	4b06      	ldr	r3, [pc, #24]	; (1a984 <ull_event_done_extra_get+0x1c>)
   1a96a:	7899      	ldrb	r1, [r3, #2]
	if (first == last) {
   1a96c:	78d8      	ldrb	r0, [r3, #3]
   1a96e:	781a      	ldrb	r2, [r3, #0]
   1a970:	4288      	cmp	r0, r1
   1a972:	d005      	beq.n	1a980 <ull_event_done_extra_get+0x18>
	return *((void **)(fifo + first * size));
   1a974:	fb01 3302 	mla	r3, r1, r2, r3
   1a978:	6858      	ldr	r0, [r3, #4]
	if (!evdone) {
   1a97a:	b110      	cbz	r0, 1a982 <ull_event_done_extra_get+0x1a>
	return &evdone->extra;
   1a97c:	3020      	adds	r0, #32
   1a97e:	4770      	bx	lr
		return NULL;
   1a980:	2000      	movs	r0, #0
}
   1a982:	4770      	bx	lr
   1a984:	20000aa8 	.word	0x20000aa8

0001a988 <ull_event_done>:
{
   1a988:	b538      	push	{r3, r4, r5, lr}
	evdone = MFIFO_DEQUEUE(done);
   1a98a:	4a10      	ldr	r2, [pc, #64]	; (1a9cc <ull_event_done+0x44>)
	uint8_t _first = *first; /* Copy read-index */
   1a98c:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
   1a98e:	78d4      	ldrb	r4, [r2, #3]
   1a990:	7811      	ldrb	r1, [r2, #0]
   1a992:	7855      	ldrb	r5, [r2, #1]
   1a994:	429c      	cmp	r4, r3
   1a996:	d017      	beq.n	1a9c8 <ull_event_done+0x40>
	mem = *((void **)(fifo + _first * size));
   1a998:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
   1a99c:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   1a99e:	684c      	ldr	r4, [r1, #4]
	_first += 1U;
   1a9a0:	b2db      	uxtb	r3, r3
		_first = 0U;
   1a9a2:	429d      	cmp	r5, r3
   1a9a4:	bf08      	it	eq
   1a9a6:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   1a9a8:	7093      	strb	r3, [r2, #2]
	if (!evdone) {
   1a9aa:	b15c      	cbz	r4, 1a9c4 <ull_event_done+0x3c>
	link = evdone->hdr.link;
   1a9ac:	6823      	ldr	r3, [r4, #0]
	evdone->param = param;
   1a9ae:	61e0      	str	r0, [r4, #28]
	evdone->hdr.link = NULL;
   1a9b0:	2200      	movs	r2, #0
   1a9b2:	6022      	str	r2, [r4, #0]
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   1a9b4:	2202      	movs	r2, #2
   1a9b6:	7122      	strb	r2, [r4, #4]
	ull_rx_put(link, evdone);
   1a9b8:	4621      	mov	r1, r4
   1a9ba:	4618      	mov	r0, r3
   1a9bc:	f7ff fe3a 	bl	1a634 <ull_rx_put>
	ull_rx_sched();
   1a9c0:	f7ff fe48 	bl	1a654 <ull_rx_sched>
}
   1a9c4:	4620      	mov	r0, r4
   1a9c6:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   1a9c8:	2400      	movs	r4, #0
   1a9ca:	e7fb      	b.n	1a9c4 <ull_event_done+0x3c>
   1a9cc:	20000aa8 	.word	0x20000aa8

0001a9d0 <ticker_cb>:
	return adv;
}

static void ticker_cb(uint32_t ticks_at_expire, uint32_t remainder, uint16_t lazy,
		      void *param)
{
   1a9d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a9d2:	461d      	mov	r5, r3

	DEBUG_RADIO_PREPARE_A(1);

	lll = &adv->lll;

	if (IS_ENABLED(CONFIG_BT_TICKER_COMPATIBILITY_MODE) ||
   1a9d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1a9d8:	429a      	cmp	r2, r3
{
   1a9da:	b08b      	sub	sp, #44	; 0x2c
   1a9dc:	4607      	mov	r7, r0
   1a9de:	460e      	mov	r6, r1
   1a9e0:	4614      	mov	r4, r2
	if (IS_ENABLED(CONFIG_BT_TICKER_COMPATIBILITY_MODE) ||
   1a9e2:	d02b      	beq.n	1aa3c <ticker_cb+0x6c>
	return ++hdr->ref;
   1a9e4:	7c2b      	ldrb	r3, [r5, #16]
   1a9e6:	3301      	adds	r3, #1
   1a9e8:	b2db      	uxtb	r3, r3
   1a9ea:	742b      	strb	r3, [r5, #16]
	    (lazy != TICKER_LAZY_MUST_EXPIRE)) {
		/* Increment prepare reference count */
		ref = ull_ref_inc(&adv->ull);
		LL_ASSERT(ref);
   1a9ec:	b95b      	cbnz	r3, 1aa06 <ticker_cb+0x36>
   1a9ee:	f240 6287 	movw	r2, #1671	; 0x687
   1a9f2:	492d      	ldr	r1, [pc, #180]	; (1aaa8 <ticker_cb+0xd8>)
   1a9f4:	482d      	ldr	r0, [pc, #180]	; (1aaac <ticker_cb+0xdc>)
   1a9f6:	f00c faba 	bl	26f6e <printk>
   1a9fa:	4040      	eors	r0, r0
   1a9fc:	f380 8811 	msr	BASEPRI, r0
   1aa00:	f04f 0003 	mov.w	r0, #3
   1aa04:	df02      	svc	2

		/* Append timing parameters */
		p.ticks_at_expire = ticks_at_expire;
   1aa06:	4a2a      	ldr	r2, [pc, #168]	; (1aab0 <ticker_cb+0xe0>)
	lll = &adv->lll;
   1aa08:	f105 031c 	add.w	r3, r5, #28
		p.remainder = remainder;
		p.lazy = lazy;
		p.param = lll;
   1aa0c:	60d3      	str	r3, [r2, #12]
		mfy.param = &p;
   1aa0e:	4b29      	ldr	r3, [pc, #164]	; (1aab4 <ticker_cb+0xe4>)
		p.lazy = lazy;
   1aa10:	8114      	strh	r4, [r2, #8]
		p.remainder = remainder;
   1aa12:	e9c2 7600 	strd	r7, r6, [r2]
		mfy.param = &p;
   1aa16:	609a      	str	r2, [r3, #8]

		/* Kick LLL prepare */
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   1aa18:	2200      	movs	r2, #0
   1aa1a:	4611      	mov	r1, r2
   1aa1c:	2001      	movs	r0, #1
   1aa1e:	f7fd fb11 	bl	18044 <mayfly_enqueue>
				     TICKER_USER_ID_LLL, 0, &mfy);
		LL_ASSERT(!ret);
   1aa22:	b158      	cbz	r0, 1aa3c <ticker_cb+0x6c>
   1aa24:	f240 6293 	movw	r2, #1683	; 0x693
   1aa28:	491f      	ldr	r1, [pc, #124]	; (1aaa8 <ticker_cb+0xd8>)
   1aa2a:	4820      	ldr	r0, [pc, #128]	; (1aaac <ticker_cb+0xdc>)
   1aa2c:	f00c fa9f 	bl	26f6e <printk>
   1aa30:	4040      	eors	r0, r0
   1aa32:	f380 8811 	msr	BASEPRI, r0
   1aa36:	f04f 0003 	mov.w	r0, #3
   1aa3a:	df02      	svc	2
	}

	/* Apply adv random delay */
#if defined(CONFIG_BT_PERIPHERAL)
	if (!lll->is_hdcd)
   1aa3c:	f895 4028 	ldrb.w	r4, [r5, #40]	; 0x28
   1aa40:	f014 0401 	ands.w	r4, r4, #1
   1aa44:	d12e      	bne.n	1aaa4 <ticker_cb+0xd4>
#endif /* CONFIG_BT_PERIPHERAL */
	{
		uint32_t random_delay;
		uint32_t ret;

		lll_rand_isr_get(&random_delay, sizeof(random_delay));
   1aa46:	2104      	movs	r1, #4
   1aa48:	a809      	add	r0, sp, #36	; 0x24
   1aa4a:	f011 fc0f 	bl	2c26c <lll_rand_isr_get>
		random_delay %= ULL_ADV_RANDOM_DELAY;
   1aa4e:	9909      	ldr	r1, [sp, #36]	; 0x24
		random_delay += 1;

		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1aa50:	9506      	str	r5, [sp, #24]
		random_delay %= ULL_ADV_RANDOM_DELAY;
   1aa52:	f240 1247 	movw	r2, #327	; 0x147
   1aa56:	fbb1 f3f2 	udiv	r3, r1, r2
   1aa5a:	fb02 1313 	mls	r3, r2, r3, r1
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   1aa5e:	4a16      	ldr	r2, [pc, #88]	; (1aab8 <ticker_cb+0xe8>)
   1aa60:	2150      	movs	r1, #80	; 0x50
   1aa62:	1aaa      	subs	r2, r5, r2
   1aa64:	fbb2 f2f1 	udiv	r2, r2, r1
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1aa68:	4914      	ldr	r1, [pc, #80]	; (1aabc <ticker_cb+0xec>)
				    TICKER_USER_ID_ULL_HIGH,
				    (TICKER_ID_ADV_BASE +
   1aa6a:	3202      	adds	r2, #2
		random_delay += 1;
   1aa6c:	3301      	adds	r3, #1
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1aa6e:	e9cd 4104 	strd	r4, r1, [sp, #16]
   1aa72:	e9cd 4402 	strd	r4, r4, [sp, #8]
   1aa76:	e9cd 4400 	strd	r4, r4, [sp]
   1aa7a:	b2d2      	uxtb	r2, r2
   1aa7c:	2101      	movs	r1, #1
   1aa7e:	4620      	mov	r0, r4
		random_delay += 1;
   1aa80:	9309      	str	r3, [sp, #36]	; 0x24
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1aa82:	f011 f8d6 	bl	2bc32 <ticker_update>
				     ull_adv_handle_get(adv)),
				    random_delay,
				    0, 0, 0, 0, 0,
				    ticker_op_update_cb, adv);
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1aa86:	f030 0302 	bics.w	r3, r0, #2
   1aa8a:	d00b      	beq.n	1aaa4 <ticker_cb+0xd4>
   1aa8c:	f240 62aa 	movw	r2, #1706	; 0x6aa
   1aa90:	4905      	ldr	r1, [pc, #20]	; (1aaa8 <ticker_cb+0xd8>)
   1aa92:	4806      	ldr	r0, [pc, #24]	; (1aaac <ticker_cb+0xdc>)
   1aa94:	f00c fa6b 	bl	26f6e <printk>
   1aa98:	4040      	eors	r0, r0
   1aa9a:	f380 8811 	msr	BASEPRI, r0
   1aa9e:	f04f 0003 	mov.w	r0, #3
   1aaa2:	df02      	svc	2
		ull_adv_aux_offset_get(adv);
	}
#endif /* CONFIG_BT_CTLR_ADV_EXT && (CONFIG_BT_CTLR_ADV_AUX_SET > 0) */

	DEBUG_RADIO_PREPARE_A(1);
}
   1aaa4:	b00b      	add	sp, #44	; 0x2c
   1aaa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1aaa8:	00034f35 	.word	0x00034f35
   1aaac:	0002fa94 	.word	0x0002fa94
   1aab0:	20003ba8 	.word	0x20003ba8
   1aab4:	20000c7c 	.word	0x20000c7c
   1aab8:	20003b4c 	.word	0x20003b4c
   1aabc:	0001ac41 	.word	0x0001ac41

0001aac0 <conn_release>:
	ll_rx_put(link, rx);
	ll_rx_sched();
}

static void conn_release(struct ll_adv_set *adv)
{
   1aac0:	b570      	push	{r4, r5, r6, lr}
	struct lll_conn *lll = adv->lll.conn;
   1aac2:	6a45      	ldr	r5, [r0, #36]	; 0x24
	memq_link_t *link;

	LL_ASSERT(!lll->link_tx_free);
   1aac4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
{
   1aac6:	4604      	mov	r4, r0
	LL_ASSERT(!lll->link_tx_free);
   1aac8:	b15b      	cbz	r3, 1aae2 <conn_release+0x22>
   1aaca:	f240 7241 	movw	r2, #1857	; 0x741
   1aace:	4916      	ldr	r1, [pc, #88]	; (1ab28 <conn_release+0x68>)
   1aad0:	4816      	ldr	r0, [pc, #88]	; (1ab2c <conn_release+0x6c>)
   1aad2:	f00c fa4c 	bl	26f6e <printk>
   1aad6:	4040      	eors	r0, r0
   1aad8:	f380 8811 	msr	BASEPRI, r0
   1aadc:	f04f 0003 	mov.w	r0, #3
   1aae0:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
   1aae2:	f105 0144 	add.w	r1, r5, #68	; 0x44
   1aae6:	f105 0040 	add.w	r0, r5, #64	; 0x40
   1aaea:	f010 fe29 	bl	2b740 <memq_deinit>
	LL_ASSERT(link);
   1aaee:	4606      	mov	r6, r0
   1aaf0:	b958      	cbnz	r0, 1ab0a <conn_release+0x4a>
   1aaf2:	f240 7243 	movw	r2, #1859	; 0x743
   1aaf6:	490c      	ldr	r1, [pc, #48]	; (1ab28 <conn_release+0x68>)
   1aaf8:	480c      	ldr	r0, [pc, #48]	; (1ab2c <conn_release+0x6c>)
   1aafa:	f00c fa38 	bl	26f6e <printk>
   1aafe:	4040      	eors	r0, r0
   1ab00:	f380 8811 	msr	BASEPRI, r0
   1ab04:	f04f 0003 	mov.w	r0, #3
   1ab08:	df02      	svc	2
	lll->link_tx_free = link;

	ll_conn_release(lll->hdr.parent);
   1ab0a:	6828      	ldr	r0, [r5, #0]
	lll->link_tx_free = link;
   1ab0c:	652e      	str	r6, [r5, #80]	; 0x50
	adv->lll.conn = NULL;
   1ab0e:	2500      	movs	r5, #0
	ll_conn_release(lll->hdr.parent);
   1ab10:	f000 fc3e 	bl	1b390 <ll_conn_release>

	ll_rx_release(adv->node_rx_cc_free);
   1ab14:	6ca0      	ldr	r0, [r4, #72]	; 0x48
	adv->lll.conn = NULL;
   1ab16:	6265      	str	r5, [r4, #36]	; 0x24
	ll_rx_release(adv->node_rx_cc_free);
   1ab18:	f7ff fc08 	bl	1a32c <ll_rx_release>
	adv->node_rx_cc_free = NULL;
   1ab1c:	64a5      	str	r5, [r4, #72]	; 0x48
	ll_rx_link_release(adv->link_cc_free);
   1ab1e:	6c60      	ldr	r0, [r4, #68]	; 0x44
   1ab20:	f7ff fbf8 	bl	1a314 <ll_rx_link_release>
	adv->link_cc_free = NULL;
   1ab24:	6465      	str	r5, [r4, #68]	; 0x44
}
   1ab26:	bd70      	pop	{r4, r5, r6, pc}
   1ab28:	00034f35 	.word	0x00034f35
   1ab2c:	0002fa94 	.word	0x0002fa94

0001ab30 <ticker_op_stop_cb>:
{
   1ab30:	b570      	push	{r4, r5, r6, lr}
   1ab32:	460c      	mov	r4, r1
	if (status != TICKER_STATUS_SUCCESS) {
   1ab34:	2800      	cmp	r0, #0
   1ab36:	d12f      	bne.n	1ab98 <ticker_op_stop_cb+0x68>
	mfy.param = &adv->lll;
   1ab38:	f101 021c 	add.w	r2, r1, #28
   1ab3c:	4b1c      	ldr	r3, [pc, #112]	; (1abb0 <ticker_op_stop_cb+0x80>)
	return hdr->ref;
   1ab3e:	7c09      	ldrb	r1, [r1, #16]
   1ab40:	609a      	str	r2, [r3, #8]
   1ab42:	461e      	mov	r6, r3
	if (ull_ref_get(hdr)) {
   1ab44:	f001 02ff 	and.w	r2, r1, #255	; 0xff
   1ab48:	4d1a      	ldr	r5, [pc, #104]	; (1abb4 <ticker_op_stop_cb+0x84>)
   1ab4a:	b331      	cbz	r1, 1ab9a <ticker_op_stop_cb+0x6a>
		LL_ASSERT(!hdr->disabled_cb);
   1ab4c:	6963      	ldr	r3, [r4, #20]
   1ab4e:	b15b      	cbz	r3, 1ab68 <ticker_op_stop_cb+0x38>
   1ab50:	f240 62fa 	movw	r2, #1786	; 0x6fa
   1ab54:	4918      	ldr	r1, [pc, #96]	; (1abb8 <ticker_op_stop_cb+0x88>)
   1ab56:	4819      	ldr	r0, [pc, #100]	; (1abbc <ticker_op_stop_cb+0x8c>)
   1ab58:	f00c fa09 	bl	26f6e <printk>
   1ab5c:	4040      	eors	r0, r0
   1ab5e:	f380 8811 	msr	BASEPRI, r0
   1ab62:	f04f 0003 	mov.w	r0, #3
   1ab66:	df02      	svc	2
		hdr->disabled_param = mfy.param;
   1ab68:	68b3      	ldr	r3, [r6, #8]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   1ab6a:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
   1ab6c:	e9c4 5305 	strd	r5, r3, [r4, #20]
		mfy.fp = lll_disable;
   1ab70:	4b13      	ldr	r3, [pc, #76]	; (1abc0 <ticker_op_stop_cb+0x90>)
   1ab72:	60f3      	str	r3, [r6, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   1ab74:	4611      	mov	r1, r2
   1ab76:	4b0e      	ldr	r3, [pc, #56]	; (1abb0 <ticker_op_stop_cb+0x80>)
   1ab78:	2002      	movs	r0, #2
   1ab7a:	f7fd fa63 	bl	18044 <mayfly_enqueue>
		LL_ASSERT(!ret);
   1ab7e:	b158      	cbz	r0, 1ab98 <ticker_op_stop_cb+0x68>
   1ab80:	f240 7201 	movw	r2, #1793	; 0x701
		LL_ASSERT(!ret);
   1ab84:	490c      	ldr	r1, [pc, #48]	; (1abb8 <ticker_op_stop_cb+0x88>)
   1ab86:	480d      	ldr	r0, [pc, #52]	; (1abbc <ticker_op_stop_cb+0x8c>)
   1ab88:	f00c f9f1 	bl	26f6e <printk>
   1ab8c:	4040      	eors	r0, r0
   1ab8e:	f380 8811 	msr	BASEPRI, r0
   1ab92:	f04f 0003 	mov.w	r0, #3
   1ab96:	df02      	svc	2
}
   1ab98:	bd70      	pop	{r4, r5, r6, pc}
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   1ab9a:	2101      	movs	r1, #1
   1ab9c:	2002      	movs	r0, #2
		mfy.fp = disabled_cb;
   1ab9e:	60dd      	str	r5, [r3, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   1aba0:	f7fd fa50 	bl	18044 <mayfly_enqueue>
		LL_ASSERT(!ret);
   1aba4:	2800      	cmp	r0, #0
   1aba6:	d0f7      	beq.n	1ab98 <ticker_op_stop_cb+0x68>
   1aba8:	f240 7206 	movw	r2, #1798	; 0x706
   1abac:	e7ea      	b.n	1ab84 <ticker_op_stop_cb+0x54>
   1abae:	bf00      	nop
   1abb0:	20000c8c 	.word	0x20000c8c
   1abb4:	0001abc5 	.word	0x0001abc5
   1abb8:	00034f35 	.word	0x00034f35
   1abbc:	0002fa94 	.word	0x0002fa94
   1abc0:	0001cb81 	.word	0x0001cb81

0001abc4 <disabled_cb>:
{
   1abc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	adv = ((struct lll_hdr *)param)->parent;
   1abc6:	6805      	ldr	r5, [r0, #0]
	LL_ASSERT(adv->link_cc_free);
   1abc8:	6c6b      	ldr	r3, [r5, #68]	; 0x44
{
   1abca:	4606      	mov	r6, r0
	LL_ASSERT(adv->link_cc_free);
   1abcc:	b95b      	cbnz	r3, 1abe6 <disabled_cb+0x22>
   1abce:	f240 7213 	movw	r2, #1811	; 0x713
   1abd2:	4919      	ldr	r1, [pc, #100]	; (1ac38 <disabled_cb+0x74>)
   1abd4:	4819      	ldr	r0, [pc, #100]	; (1ac3c <disabled_cb+0x78>)
   1abd6:	f00c f9ca 	bl	26f6e <printk>
   1abda:	4040      	eors	r0, r0
   1abdc:	f380 8811 	msr	BASEPRI, r0
   1abe0:	f04f 0003 	mov.w	r0, #3
   1abe4:	df02      	svc	2
	adv->link_cc_free = NULL;
   1abe6:	2300      	movs	r3, #0
	link = adv->link_cc_free;
   1abe8:	6c6f      	ldr	r7, [r5, #68]	; 0x44
	adv->link_cc_free = NULL;
   1abea:	646b      	str	r3, [r5, #68]	; 0x44
	LL_ASSERT(adv->node_rx_cc_free);
   1abec:	6cab      	ldr	r3, [r5, #72]	; 0x48
   1abee:	b95b      	cbnz	r3, 1ac08 <disabled_cb+0x44>
   1abf0:	f240 7217 	movw	r2, #1815	; 0x717
   1abf4:	4910      	ldr	r1, [pc, #64]	; (1ac38 <disabled_cb+0x74>)
   1abf6:	4811      	ldr	r0, [pc, #68]	; (1ac3c <disabled_cb+0x78>)
   1abf8:	f00c f9b9 	bl	26f6e <printk>
   1abfc:	4040      	eors	r0, r0
   1abfe:	f380 8811 	msr	BASEPRI, r0
   1ac02:	f04f 0003 	mov.w	r0, #3
   1ac06:	df02      	svc	2
	rx = adv->node_rx_cc_free;
   1ac08:	6cac      	ldr	r4, [r5, #72]	; 0x48
	adv->node_rx_cc_free = NULL;
   1ac0a:	2100      	movs	r1, #0
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1ac0c:	2313      	movs	r3, #19
	adv->node_rx_cc_free = NULL;
   1ac0e:	64a9      	str	r1, [r5, #72]	; 0x48
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1ac10:	7123      	strb	r3, [r4, #4]
	rx->hdr.handle = 0xffff;
   1ac12:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1ac16:	80e3      	strh	r3, [r4, #6]
__ssp_bos_icheck3(memset, void *, int)
   1ac18:	2212      	movs	r2, #18
   1ac1a:	f104 001c 	add.w	r0, r4, #28
   1ac1e:	f012 fcec 	bl	2d5fa <memset>
	cc->status = BT_HCI_ERR_ADV_TIMEOUT;
   1ac22:	233c      	movs	r3, #60	; 0x3c
   1ac24:	7723      	strb	r3, [r4, #28]
	rx->hdr.rx_ftr.param = param;
   1ac26:	60a6      	str	r6, [r4, #8]
	ll_rx_put(link, rx);
   1ac28:	4621      	mov	r1, r4
   1ac2a:	4638      	mov	r0, r7
   1ac2c:	f7ff fb84 	bl	1a338 <ll_rx_put>
}
   1ac30:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ll_rx_sched();
   1ac34:	f7ff bb8a 	b.w	1a34c <ll_rx_sched>
   1ac38:	00034f35 	.word	0x00034f35
   1ac3c:	0002fa94 	.word	0x0002fa94

0001ac40 <ticker_op_update_cb>:
{
   1ac40:	b510      	push	{r4, lr}
   1ac42:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   1ac44:	b178      	cbz	r0, 1ac66 <ticker_op_update_cb+0x26>
   1ac46:	f7ff fc37 	bl	1a4b8 <ull_disable_mark_get>
   1ac4a:	4284      	cmp	r4, r0
   1ac4c:	d00b      	beq.n	1ac66 <ticker_op_update_cb+0x26>
   1ac4e:	f240 62cb 	movw	r2, #1739	; 0x6cb
   1ac52:	4905      	ldr	r1, [pc, #20]	; (1ac68 <ticker_op_update_cb+0x28>)
   1ac54:	4805      	ldr	r0, [pc, #20]	; (1ac6c <ticker_op_update_cb+0x2c>)
   1ac56:	f00c f98a 	bl	26f6e <printk>
   1ac5a:	4040      	eors	r0, r0
   1ac5c:	f380 8811 	msr	BASEPRI, r0
   1ac60:	f04f 0003 	mov.w	r0, #3
   1ac64:	df02      	svc	2
}
   1ac66:	bd10      	pop	{r4, pc}
   1ac68:	00034f35 	.word	0x00034f35
   1ac6c:	0002fa94 	.word	0x0002fa94

0001ac70 <init_reset.part.3>:
static int init_reset(void)
   1ac70:	b510      	push	{r4, lr}
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
   1ac72:	4c05      	ldr	r4, [pc, #20]	; (1ac88 <init_reset.part.3+0x18>)
   1ac74:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   1ac78:	f002 f99e 	bl	1cfb8 <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
   1ac7c:	f104 0038 	add.w	r0, r4, #56	; 0x38
}
   1ac80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
   1ac84:	f002 b998 	b.w	1cfb8 <lll_adv_data_init>
   1ac88:	20003b4c 	.word	0x20003b4c

0001ac8c <ticker_stop_cb>:
{
   1ac8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   1ac8e:	4c17      	ldr	r4, [pc, #92]	; (1acec <ticker_stop_cb+0x60>)
   1ac90:	2250      	movs	r2, #80	; 0x50
   1ac92:	1b1c      	subs	r4, r3, r4
   1ac94:	fbb4 f4f2 	udiv	r4, r4, r2
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   1ac98:	f014 0fff 	tst.w	r4, #255	; 0xff
{
   1ac9c:	461d      	mov	r5, r3
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   1ac9e:	d00b      	beq.n	1acb8 <ticker_stop_cb+0x2c>
   1aca0:	f240 62d7 	movw	r2, #1751	; 0x6d7
   1aca4:	4912      	ldr	r1, [pc, #72]	; (1acf0 <ticker_stop_cb+0x64>)
   1aca6:	4813      	ldr	r0, [pc, #76]	; (1acf4 <ticker_stop_cb+0x68>)
   1aca8:	f00c f961 	bl	26f6e <printk>
   1acac:	4040      	eors	r0, r0
   1acae:	f380 8811 	msr	BASEPRI, r0
   1acb2:	f04f 0003 	mov.w	r0, #3
   1acb6:	df02      	svc	2
			  TICKER_ID_ADV_BASE + handle,
   1acb8:	1ca2      	adds	r2, r4, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
   1acba:	4b0f      	ldr	r3, [pc, #60]	; (1acf8 <ticker_stop_cb+0x6c>)
   1acbc:	9500      	str	r5, [sp, #0]
   1acbe:	b2d2      	uxtb	r2, r2
   1acc0:	2101      	movs	r1, #1
   1acc2:	2000      	movs	r0, #0
   1acc4:	f7fd ff94 	bl	18bf0 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1acc8:	f030 0302 	bics.w	r3, r0, #2
   1accc:	d00b      	beq.n	1ace6 <ticker_stop_cb+0x5a>
   1acce:	f240 62dd 	movw	r2, #1757	; 0x6dd
   1acd2:	4907      	ldr	r1, [pc, #28]	; (1acf0 <ticker_stop_cb+0x64>)
   1acd4:	4807      	ldr	r0, [pc, #28]	; (1acf4 <ticker_stop_cb+0x68>)
   1acd6:	f00c f94a 	bl	26f6e <printk>
   1acda:	4040      	eors	r0, r0
   1acdc:	f380 8811 	msr	BASEPRI, r0
   1ace0:	f04f 0003 	mov.w	r0, #3
   1ace4:	df02      	svc	2
}
   1ace6:	b003      	add	sp, #12
   1ace8:	bd30      	pop	{r4, r5, pc}
   1acea:	bf00      	nop
   1acec:	20003b4c 	.word	0x20003b4c
   1acf0:	00034f35 	.word	0x00034f35
   1acf4:	0002fa94 	.word	0x0002fa94
   1acf8:	0001ab31 	.word	0x0001ab31

0001acfc <ll_adv_params_set>:
{
   1acfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1acfe:	4605      	mov	r5, r0
	if (!adv || adv->is_enabled) {
   1ad00:	4c31      	ldr	r4, [pc, #196]	; (1adc8 <ll_adv_params_set+0xcc>)
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   1ad02:	4832      	ldr	r0, [pc, #200]	; (1adcc <ll_adv_params_set+0xd0>)
   1ad04:	9000      	str	r0, [sp, #0]
   1ad06:	2001      	movs	r0, #1
   1ad08:	f88d 0004 	strb.w	r0, [sp, #4]
	if (!adv || adv->is_enabled) {
   1ad0c:	f894 004e 	ldrb.w	r0, [r4, #78]	; 0x4e
{
   1ad10:	9f08      	ldr	r7, [sp, #32]
	if (!adv || adv->is_enabled) {
   1ad12:	f010 0001 	ands.w	r0, r0, #1
   1ad16:	d154      	bne.n	1adc2 <ll_adv_params_set+0xc6>
		adv->interval = 0;
   1ad18:	2901      	cmp	r1, #1
   1ad1a:	bf08      	it	eq
   1ad1c:	2500      	moveq	r5, #0
   1ad1e:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
	adv->lll.chan_map = chan_map;
   1ad22:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
   1ad26:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
   1ad2a:	f366 0543 	bfi	r5, r6, #1, #3
   1ad2e:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
	adv->lll.filter_policy = filter_policy;
   1ad32:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
   1ad36:	f894 5029 	ldrb.w	r5, [r4, #41]	; 0x29
   1ad3a:	f366 0501 	bfi	r5, r6, #0, #2
   1ad3e:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   1ad42:	f894 502d 	ldrb.w	r5, [r4, #45]	; 0x2d
   1ad46:	eb04 0585 	add.w	r5, r4, r5, lsl #2
	pdu->type = pdu_adv_type[adv_type];
   1ad4a:	ae02      	add	r6, sp, #8
   1ad4c:	6b2d      	ldr	r5, [r5, #48]	; 0x30
   1ad4e:	440e      	add	r6, r1
   1ad50:	7829      	ldrb	r1, [r5, #0]
   1ad52:	f816 6c08 	ldrb.w	r6, [r6, #-8]
   1ad56:	f366 0103 	bfi	r1, r6, #0, #4
	pdu->rfu = 0;
   1ad5a:	f001 01cf 	and.w	r1, r1, #207	; 0xcf
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   1ad5e:	f001 060f 	and.w	r6, r1, #15
   1ad62:	2e01      	cmp	r6, #1
	pdu->rfu = 0;
   1ad64:	7029      	strb	r1, [r5, #0]
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   1ad66:	f002 0201 	and.w	r2, r2, #1
   1ad6a:	d120      	bne.n	1adae <ll_adv_params_set+0xb2>
		pdu->tx_addr = own_addr_type & 0x1;
   1ad6c:	f362 1186 	bfi	r1, r2, #6, #1
		pdu->rx_addr = direct_addr_type;
   1ad70:	f363 11c7 	bfi	r1, r3, #7, #1
   1ad74:	462b      	mov	r3, r5
   1ad76:	f803 1b08 	strb.w	r1, [r3], #8
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1ad7a:	6839      	ldr	r1, [r7, #0]
   1ad7c:	60a9      	str	r1, [r5, #8]
   1ad7e:	88b9      	ldrh	r1, [r7, #4]
   1ad80:	8099      	strh	r1, [r3, #4]
		pdu->len = sizeof(struct pdu_adv_direct_ind);
   1ad82:	230c      	movs	r3, #12
		pdu->len = BDADDR_SIZE;
   1ad84:	706b      	strb	r3, [r5, #1]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   1ad86:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   1ad8a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   1ad8e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
		pdu->tx_addr = own_addr_type & 0x1;
   1ad90:	780b      	ldrb	r3, [r1, #0]
   1ad92:	f362 1386 	bfi	r3, r2, #6, #1
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   1ad96:	f003 0340 	and.w	r3, r3, #64	; 0x40
   1ad9a:	f043 0304 	orr.w	r3, r3, #4
   1ad9e:	700b      	strb	r3, [r1, #0]
		if (pdu->len == 0) {
   1ada0:	784b      	ldrb	r3, [r1, #1]
   1ada2:	b913      	cbnz	r3, 1adaa <ll_adv_params_set+0xae>
			pdu->len = BDADDR_SIZE;
   1ada4:	2206      	movs	r2, #6
   1ada6:	704a      	strb	r2, [r1, #1]
	return 0;
   1ada8:	4618      	mov	r0, r3
}
   1adaa:	b003      	add	sp, #12
   1adac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pdu->tx_addr = own_addr_type & 0x1;
   1adae:	f362 1186 	bfi	r1, r2, #6, #1
	} else if (pdu->len == 0) {
   1adb2:	786b      	ldrb	r3, [r5, #1]
		pdu->rx_addr = 0;
   1adb4:	f360 11c7 	bfi	r1, r0, #7, #1
   1adb8:	7029      	strb	r1, [r5, #0]
	} else if (pdu->len == 0) {
   1adba:	2b00      	cmp	r3, #0
   1adbc:	d1e3      	bne.n	1ad86 <ll_adv_params_set+0x8a>
		pdu->len = BDADDR_SIZE;
   1adbe:	2306      	movs	r3, #6
   1adc0:	e7e0      	b.n	1ad84 <ll_adv_params_set+0x88>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1adc2:	200c      	movs	r0, #12
   1adc4:	e7f1      	b.n	1adaa <ll_adv_params_set+0xae>
   1adc6:	bf00      	nop
   1adc8:	20003b4c 	.word	0x20003b4c
   1adcc:	02060100 	.word	0x02060100

0001add0 <ull_adv_reset_finalize>:
{
   1add0:	b510      	push	{r4, lr}
		lll_adv_data_reset(&ll_adv[handle].lll.adv_data);
   1add2:	4c06      	ldr	r4, [pc, #24]	; (1adec <ull_adv_reset_finalize+0x1c>)
   1add4:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   1add8:	f011 fab6 	bl	2c348 <lll_adv_data_reset>
		lll_adv_data_reset(&ll_adv[handle].lll.scan_rsp);
   1addc:	f104 0038 	add.w	r0, r4, #56	; 0x38
   1ade0:	f011 fab2 	bl	2c348 <lll_adv_data_reset>
	for (handle = 0U; handle < BT_CTLR_ADV_SET; handle++) {
   1ade4:	f7ff ff44 	bl	1ac70 <init_reset.part.3>
}
   1ade8:	2000      	movs	r0, #0
   1adea:	bd10      	pop	{r4, pc}
   1adec:	20003b4c 	.word	0x20003b4c

0001adf0 <ull_adv_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   1adf0:	4b03      	ldr	r3, [pc, #12]	; (1ae00 <ull_adv_handle_get+0x10>)
   1adf2:	1ac0      	subs	r0, r0, r3
   1adf4:	2350      	movs	r3, #80	; 0x50
   1adf6:	fbb0 f0f3 	udiv	r0, r0, r3
}
   1adfa:	b280      	uxth	r0, r0
   1adfc:	4770      	bx	lr
   1adfe:	bf00      	nop
   1ae00:	20003b4c 	.word	0x20003b4c

0001ae04 <ull_adv_lll_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   1ae04:	6800      	ldr	r0, [r0, #0]
   1ae06:	4b03      	ldr	r3, [pc, #12]	; (1ae14 <ull_adv_lll_handle_get+0x10>)
   1ae08:	1ac0      	subs	r0, r0, r3
   1ae0a:	2350      	movs	r3, #80	; 0x50
   1ae0c:	fbb0 f0f3 	udiv	r0, r0, r3
}
   1ae10:	b280      	uxth	r0, r0
   1ae12:	4770      	bx	lr
   1ae14:	20003b4c 	.word	0x20003b4c

0001ae18 <ull_adv_is_enabled_get>:
	if (handle >= BT_CTLR_ADV_SET) {
   1ae18:	b938      	cbnz	r0, 1ae2a <ull_adv_is_enabled_get+0x12>
	if (!adv || !adv->is_enabled) {
   1ae1a:	4805      	ldr	r0, [pc, #20]	; (1ae30 <ull_adv_is_enabled_get+0x18>)
   1ae1c:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
	return &ll_adv[handle];
   1ae20:	f013 0f01 	tst.w	r3, #1
   1ae24:	bf08      	it	eq
   1ae26:	2000      	moveq	r0, #0
   1ae28:	4770      	bx	lr
		return NULL;
   1ae2a:	2000      	movs	r0, #0
}
   1ae2c:	4770      	bx	lr
   1ae2e:	bf00      	nop
   1ae30:	20003b4c 	.word	0x20003b4c

0001ae34 <disable.constprop.6>:
	ll_rx_put(rx_hdr->link, rx_hdr);
	ll_rx_sched();
}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

static inline uint8_t disable(uint8_t handle)
   1ae34:	b530      	push	{r4, r5, lr}
	uint32_t volatile ret_cb;
	struct ll_adv_set *adv;
	void *mark;
	uint32_t ret;

	adv = ull_adv_is_enabled_get(handle);
   1ae36:	2000      	movs	r0, #0
static inline uint8_t disable(uint8_t handle)
   1ae38:	b085      	sub	sp, #20
	adv = ull_adv_is_enabled_get(handle);
   1ae3a:	f7ff ffed 	bl	1ae18 <ull_adv_is_enabled_get>
	if (!adv) {
   1ae3e:	4604      	mov	r4, r0
   1ae40:	b910      	cbnz	r0, 1ae48 <disable.constprop.6+0x14>
		ret = ull_ticker_status_take(ret, &ret_cb);
		if (ret) {
			mark = ull_disable_unmark(adv);
			LL_ASSERT(mark == adv);

			return BT_HCI_ERR_CMD_DISALLOWED;
   1ae42:	200c      	movs	r0, #12
		ull_filter_adv_scan_state_cb(0);
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */

	return 0;
}
   1ae44:	b005      	add	sp, #20
   1ae46:	bd30      	pop	{r4, r5, pc}
	mark = ull_disable_mark(adv);
   1ae48:	f7ff fb20 	bl	1a48c <ull_disable_mark>
	LL_ASSERT(mark == adv);
   1ae4c:	4284      	cmp	r4, r0
   1ae4e:	d00b      	beq.n	1ae68 <disable.constprop.6+0x34>
   1ae50:	f240 7296 	movw	r2, #1942	; 0x796
   1ae54:	4938      	ldr	r1, [pc, #224]	; (1af38 <disable.constprop.6+0x104>)
   1ae56:	4839      	ldr	r0, [pc, #228]	; (1af3c <disable.constprop.6+0x108>)
   1ae58:	f00c f889 	bl	26f6e <printk>
   1ae5c:	4040      	eors	r0, r0
   1ae5e:	f380 8811 	msr	BASEPRI, r0
   1ae62:	f04f 0003 	mov.w	r0, #3
   1ae66:	df02      	svc	2
	if (adv->lll.is_hdcd) {
   1ae68:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   1ae6c:	f013 0f01 	tst.w	r3, #1
   1ae70:	ad03      	add	r5, sp, #12
   1ae72:	d01e      	beq.n	1aeb2 <disable.constprop.6+0x7e>
		ret_cb = TICKER_STATUS_BUSY;
   1ae74:	2302      	movs	r3, #2
   1ae76:	9303      	str	r3, [sp, #12]
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1ae78:	2103      	movs	r1, #3
   1ae7a:	9500      	str	r5, [sp, #0]
   1ae7c:	4b30      	ldr	r3, [pc, #192]	; (1af40 <disable.constprop.6+0x10c>)
   1ae7e:	2201      	movs	r2, #1
   1ae80:	2000      	movs	r0, #0
   1ae82:	f7fd feb5 	bl	18bf0 <ticker_stop>
		ret = ull_ticker_status_take(ret, &ret_cb);
   1ae86:	4629      	mov	r1, r5
   1ae88:	f7ff fadc 	bl	1a444 <ull_ticker_status_take>
		if (ret) {
   1ae8c:	b188      	cbz	r0, 1aeb2 <disable.constprop.6+0x7e>
			mark = ull_disable_unmark(adv);
   1ae8e:	4620      	mov	r0, r4
   1ae90:	f7ff fb04 	bl	1a49c <ull_disable_unmark>
			LL_ASSERT(mark == adv);
   1ae94:	4284      	cmp	r4, r0
   1ae96:	d0d4      	beq.n	1ae42 <disable.constprop.6+0xe>
   1ae98:	f240 72a1 	movw	r2, #1953	; 0x7a1
   1ae9c:	4926      	ldr	r1, [pc, #152]	; (1af38 <disable.constprop.6+0x104>)
   1ae9e:	4827      	ldr	r0, [pc, #156]	; (1af3c <disable.constprop.6+0x108>)
   1aea0:	f00c f865 	bl	26f6e <printk>
   1aea4:	4040      	eors	r0, r0
   1aea6:	f380 8811 	msr	BASEPRI, r0
   1aeaa:	f04f 0003 	mov.w	r0, #3
   1aeae:	df02      	svc	2
   1aeb0:	e7c7      	b.n	1ae42 <disable.constprop.6+0xe>
	ret_cb = TICKER_STATUS_BUSY;
   1aeb2:	2202      	movs	r2, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   1aeb4:	2103      	movs	r1, #3
   1aeb6:	9500      	str	r5, [sp, #0]
   1aeb8:	4b21      	ldr	r3, [pc, #132]	; (1af40 <disable.constprop.6+0x10c>)
	ret_cb = TICKER_STATUS_BUSY;
   1aeba:	9203      	str	r2, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   1aebc:	2000      	movs	r0, #0
   1aebe:	f7fd fe97 	bl	18bf0 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   1aec2:	4629      	mov	r1, r5
   1aec4:	f7ff fabe 	bl	1a444 <ull_ticker_status_take>
	if (ret) {
   1aec8:	b138      	cbz	r0, 1aeda <disable.constprop.6+0xa6>
		mark = ull_disable_unmark(adv);
   1aeca:	4620      	mov	r0, r4
   1aecc:	f7ff fae6 	bl	1a49c <ull_disable_unmark>
		LL_ASSERT(mark == adv);
   1aed0:	4284      	cmp	r4, r0
   1aed2:	d0b6      	beq.n	1ae42 <disable.constprop.6+0xe>
   1aed4:	f240 72af 	movw	r2, #1967	; 0x7af
   1aed8:	e7e0      	b.n	1ae9c <disable.constprop.6+0x68>
	ret = ull_disable(&adv->lll);
   1aeda:	f104 001c 	add.w	r0, r4, #28
   1aede:	f7ff fb0d 	bl	1a4fc <ull_disable>
	LL_ASSERT(!ret);
   1aee2:	b158      	cbz	r0, 1aefc <disable.constprop.6+0xc8>
   1aee4:	f240 72b5 	movw	r2, #1973	; 0x7b5
   1aee8:	4913      	ldr	r1, [pc, #76]	; (1af38 <disable.constprop.6+0x104>)
   1aeea:	4814      	ldr	r0, [pc, #80]	; (1af3c <disable.constprop.6+0x108>)
   1aeec:	f00c f83f 	bl	26f6e <printk>
   1aef0:	4040      	eors	r0, r0
   1aef2:	f380 8811 	msr	BASEPRI, r0
   1aef6:	f04f 0003 	mov.w	r0, #3
   1aefa:	df02      	svc	2
	mark = ull_disable_unmark(adv);
   1aefc:	4620      	mov	r0, r4
   1aefe:	f7ff facd 	bl	1a49c <ull_disable_unmark>
	LL_ASSERT(mark == adv);
   1af02:	4284      	cmp	r4, r0
   1af04:	d00b      	beq.n	1af1e <disable.constprop.6+0xea>
   1af06:	f44f 62f7 	mov.w	r2, #1976	; 0x7b8
   1af0a:	490b      	ldr	r1, [pc, #44]	; (1af38 <disable.constprop.6+0x104>)
   1af0c:	480b      	ldr	r0, [pc, #44]	; (1af3c <disable.constprop.6+0x108>)
   1af0e:	f00c f82e 	bl	26f6e <printk>
   1af12:	4040      	eors	r0, r0
   1af14:	f380 8811 	msr	BASEPRI, r0
   1af18:	f04f 0003 	mov.w	r0, #3
   1af1c:	df02      	svc	2
	if (adv->lll.conn) {
   1af1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1af20:	b113      	cbz	r3, 1af28 <disable.constprop.6+0xf4>
		conn_release(adv);
   1af22:	4620      	mov	r0, r4
   1af24:	f7ff fdcc 	bl	1aac0 <conn_release>
	adv->is_enabled = 0U;
   1af28:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
   1af2c:	f36f 0300 	bfc	r3, #0, #1
   1af30:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
	return 0;
   1af34:	2000      	movs	r0, #0
   1af36:	e785      	b.n	1ae44 <disable.constprop.6+0x10>
   1af38:	00034f35 	.word	0x00034f35
   1af3c:	0002fa94 	.word	0x0002fa94
   1af40:	00019d6d 	.word	0x00019d6d

0001af44 <ull_adv_data_set>:
{
   1af44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   1af48:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   1af4c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   1af50:	4607      	mov	r7, r0
   1af52:	6b1d      	ldr	r5, [r3, #48]	; 0x30
	if (prev->type == PDU_ADV_TYPE_DIRECT_IND) {
   1af54:	782b      	ldrb	r3, [r5, #0]
   1af56:	f003 030f 	and.w	r3, r3, #15
   1af5a:	2b01      	cmp	r3, #1
{
   1af5c:	460e      	mov	r6, r1
   1af5e:	4690      	mov	r8, r2
	if (prev->type == PDU_ADV_TYPE_DIRECT_IND) {
   1af60:	d047      	beq.n	1aff2 <ull_adv_data_set+0xae>
	if (len > PDU_AC_DATA_SIZE_MAX) {
   1af62:	291f      	cmp	r1, #31
   1af64:	d849      	bhi.n	1affa <ull_adv_data_set+0xb6>
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   1af66:	f100 092c 	add.w	r9, r0, #44	; 0x2c
   1af6a:	f10d 0106 	add.w	r1, sp, #6
   1af6e:	4648      	mov	r0, r9
   1af70:	f002 f832 	bl	1cfd8 <lll_adv_pdu_alloc>
   1af74:	f10d 0107 	add.w	r1, sp, #7
   1af78:	4604      	mov	r4, r0
   1af7a:	4648      	mov	r0, r9
   1af7c:	f002 f82c 	bl	1cfd8 <lll_adv_pdu_alloc>
		__ASSERT((idx == idx_test), "Probable AD Data Corruption.\n");
   1af80:	f89d 2006 	ldrb.w	r2, [sp, #6]
   1af84:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1af88:	429a      	cmp	r2, r3
   1af8a:	d00a      	beq.n	1afa2 <ull_adv_data_set+0x5e>
   1af8c:	491c      	ldr	r1, [pc, #112]	; (1b000 <ull_adv_data_set+0xbc>)
   1af8e:	481d      	ldr	r0, [pc, #116]	; (1b004 <ull_adv_data_set+0xc0>)
   1af90:	f240 52e4 	movw	r2, #1508	; 0x5e4
   1af94:	f00b ffeb 	bl	26f6e <printk>
   1af98:	f240 51e4 	movw	r1, #1508	; 0x5e4
   1af9c:	4818      	ldr	r0, [pc, #96]	; (1b000 <ull_adv_data_set+0xbc>)
   1af9e:	f00c fa5f 	bl	27460 <assert_post_action>
	pdu->type = prev->type;
   1afa2:	782a      	ldrb	r2, [r5, #0]
   1afa4:	7823      	ldrb	r3, [r4, #0]
   1afa6:	f362 0303 	bfi	r3, r2, #0, #4
	pdu->rfu = 0U;
   1afaa:	f003 03cf 	and.w	r3, r3, #207	; 0xcf
   1afae:	7023      	strb	r3, [r4, #0]
	pdu->tx_addr = prev->tx_addr;
   1afb0:	782b      	ldrb	r3, [r5, #0]
   1afb2:	7822      	ldrb	r2, [r4, #0]
   1afb4:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1afb8:	f363 1286 	bfi	r2, r3, #6, #1
   1afbc:	7022      	strb	r2, [r4, #0]
	pdu->rx_addr = prev->rx_addr;
   1afbe:	782b      	ldrb	r3, [r5, #0]
   1afc0:	b2d2      	uxtb	r2, r2
   1afc2:	09db      	lsrs	r3, r3, #7
   1afc4:	f363 12c7 	bfi	r2, r3, #7, #1
   1afc8:	4623      	mov	r3, r4
   1afca:	4641      	mov	r1, r8
   1afcc:	f803 2b02 	strb.w	r2, [r3], #2
   1afd0:	f855 2f02 	ldr.w	r2, [r5, #2]!
   1afd4:	f8c4 2002 	str.w	r2, [r4, #2]
   1afd8:	88aa      	ldrh	r2, [r5, #4]
   1afda:	809a      	strh	r2, [r3, #4]
   1afdc:	f104 0008 	add.w	r0, r4, #8
   1afe0:	4632      	mov	r2, r6
   1afe2:	f012 facf 	bl	2d584 <memcpy>
	pdu->len = BDADDR_SIZE + len;
   1afe6:	3606      	adds	r6, #6
	pdu->last = idx;
   1afe8:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1afec:	7066      	strb	r6, [r4, #1]
   1afee:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		return 0;
   1aff2:	2000      	movs	r0, #0
}
   1aff4:	b003      	add	sp, #12
   1aff6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_INVALID_PARAM;
   1affa:	2012      	movs	r0, #18
   1affc:	e7fa      	b.n	1aff4 <ull_adv_data_set+0xb0>
   1affe:	bf00      	nop
   1b000:	00034f35 	.word	0x00034f35
   1b004:	0002fa94 	.word	0x0002fa94

0001b008 <ll_adv_data_set>:
	return ull_adv_data_set(adv, len, data);
   1b008:	460a      	mov	r2, r1
   1b00a:	4601      	mov	r1, r0
   1b00c:	4801      	ldr	r0, [pc, #4]	; (1b014 <ll_adv_data_set+0xc>)
   1b00e:	f7ff bf99 	b.w	1af44 <ull_adv_data_set>
   1b012:	bf00      	nop
   1b014:	20003b4c 	.word	0x20003b4c

0001b018 <ll_adv_scan_rsp_set>:
	return ull_scan_rsp_set(adv, len, data);
   1b018:	460a      	mov	r2, r1
   1b01a:	4601      	mov	r1, r0
   1b01c:	4801      	ldr	r0, [pc, #4]	; (1b024 <ll_adv_scan_rsp_set+0xc>)
   1b01e:	f010 bedf 	b.w	2bde0 <ull_scan_rsp_set>
   1b022:	bf00      	nop
   1b024:	20003b4c 	.word	0x20003b4c

0001b028 <ticker_cb>:
	return 0;
}

static void ticker_cb(uint32_t ticks_at_expire, uint32_t remainder,
		      uint16_t lazy, void *param)
{
   1b028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b02a:	4614      	mov	r4, r2
	return ++hdr->ref;
   1b02c:	7c1a      	ldrb	r2, [r3, #16]
   1b02e:	3201      	adds	r2, #1
   1b030:	b2d2      	uxtb	r2, r2
   1b032:	4606      	mov	r6, r0
   1b034:	460d      	mov	r5, r1
	uint8_t ref;

	DEBUG_RADIO_PREPARE_O(1);

	scan = param;
	lll = &scan->lll;
   1b036:	f103 071c 	add.w	r7, r3, #28
   1b03a:	741a      	strb	r2, [r3, #16]
	}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	/* Increment prepare reference count */
	ref = ull_ref_inc(&scan->ull);
	LL_ASSERT(ref);
   1b03c:	b95a      	cbnz	r2, 1b056 <ticker_cb+0x2e>
   1b03e:	f240 22c5 	movw	r2, #709	; 0x2c5
   1b042:	4912      	ldr	r1, [pc, #72]	; (1b08c <ticker_cb+0x64>)
   1b044:	4812      	ldr	r0, [pc, #72]	; (1b090 <ticker_cb+0x68>)
   1b046:	f00b ff92 	bl	26f6e <printk>
   1b04a:	4040      	eors	r0, r0
   1b04c:	f380 8811 	msr	BASEPRI, r0
   1b050:	f04f 0003 	mov.w	r0, #3
   1b054:	df02      	svc	2

	/* Append timing parameters */
	p.ticks_at_expire = ticks_at_expire;
   1b056:	4a0f      	ldr	r2, [pc, #60]	; (1b094 <ticker_cb+0x6c>)
	p.remainder = remainder;
	p.lazy = lazy;
	p.param = lll;
	mfy.param = &p;
   1b058:	4b0f      	ldr	r3, [pc, #60]	; (1b098 <ticker_cb+0x70>)
	p.lazy = lazy;
   1b05a:	8114      	strh	r4, [r2, #8]
	p.remainder = remainder;
   1b05c:	e9c2 6500 	strd	r6, r5, [r2]
	p.param = lll;
   1b060:	60d7      	str	r7, [r2, #12]
	mfy.param = &p;
   1b062:	609a      	str	r2, [r3, #8]

	/* Kick LLL prepare */
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1b064:	2200      	movs	r2, #0
   1b066:	4611      	mov	r1, r2
   1b068:	2001      	movs	r0, #1
   1b06a:	f7fc ffeb 	bl	18044 <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
   1b06e:	b158      	cbz	r0, 1b088 <ticker_cb+0x60>
   1b070:	f240 22d1 	movw	r2, #721	; 0x2d1
   1b074:	4905      	ldr	r1, [pc, #20]	; (1b08c <ticker_cb+0x64>)
   1b076:	4806      	ldr	r0, [pc, #24]	; (1b090 <ticker_cb+0x68>)
   1b078:	f00b ff79 	bl	26f6e <printk>
   1b07c:	4040      	eors	r0, r0
   1b07e:	f380 8811 	msr	BASEPRI, r0
   1b082:	f04f 0003 	mov.w	r0, #3
   1b086:	df02      	svc	2

	DEBUG_RADIO_PREPARE_O(1);
}
   1b088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b08a:	bf00      	nop
   1b08c:	00034f85 	.word	0x00034f85
   1b090:	0002fa94 	.word	0x0002fa94
   1b094:	20003bfc 	.word	0x20003bfc
   1b098:	20000c9c 	.word	0x20000c9c

0001b09c <ull_scan_disable>:
	err = ull_ticker_stop_with_mark(TICKER_ID_SCAN_BASE + handle,
   1b09c:	3004      	adds	r0, #4
{
   1b09e:	b508      	push	{r3, lr}
	err = ull_ticker_stop_with_mark(TICKER_ID_SCAN_BASE + handle,
   1b0a0:	f101 021c 	add.w	r2, r1, #28
   1b0a4:	b2c0      	uxtb	r0, r0
   1b0a6:	f7ff fa63 	bl	1a570 <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
   1b0aa:	b170      	cbz	r0, 1b0ca <ull_scan_disable+0x2e>
   1b0ac:	3078      	adds	r0, #120	; 0x78
   1b0ae:	d00b      	beq.n	1b0c8 <ull_scan_disable+0x2c>
   1b0b0:	f240 12c7 	movw	r2, #455	; 0x1c7
   1b0b4:	4905      	ldr	r1, [pc, #20]	; (1b0cc <ull_scan_disable+0x30>)
   1b0b6:	4806      	ldr	r0, [pc, #24]	; (1b0d0 <ull_scan_disable+0x34>)
   1b0b8:	f00b ff59 	bl	26f6e <printk>
   1b0bc:	4040      	eors	r0, r0
   1b0be:	f380 8811 	msr	BASEPRI, r0
   1b0c2:	f04f 0003 	mov.w	r0, #3
   1b0c6:	df02      	svc	2
		return BT_HCI_ERR_CMD_DISALLOWED;
   1b0c8:	200c      	movs	r0, #12
}
   1b0ca:	bd08      	pop	{r3, pc}
   1b0cc:	00034f85 	.word	0x00034f85
   1b0d0:	0002fa94 	.word	0x0002fa94

0001b0d4 <ull_scan_lll_handle_get>:
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
   1b0d4:	6800      	ldr	r0, [r0, #0]
   1b0d6:	4b03      	ldr	r3, [pc, #12]	; (1b0e4 <ull_scan_lll_handle_get+0x10>)
   1b0d8:	1ac0      	subs	r0, r0, r3
   1b0da:	233c      	movs	r3, #60	; 0x3c
   1b0dc:	fbb0 f0f3 	udiv	r0, r0, r3
}
   1b0e0:	b2c0      	uxtb	r0, r0
   1b0e2:	4770      	bx	lr
   1b0e4:	20003bc0 	.word	0x20003bc0

0001b0e8 <ull_scan_is_enabled_get>:
	if (handle >= BT_CTLR_SCAN_SET) {
   1b0e8:	b938      	cbnz	r0, 1b0fa <ull_scan_is_enabled_get+0x12>
	if (!scan || !scan->is_enabled) {
   1b0ea:	4805      	ldr	r0, [pc, #20]	; (1b100 <ull_scan_is_enabled_get+0x18>)
   1b0ec:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
	return &ll_scan[handle];
   1b0f0:	f013 0f01 	tst.w	r3, #1
   1b0f4:	bf08      	it	eq
   1b0f6:	2000      	moveq	r0, #0
   1b0f8:	4770      	bx	lr
		return NULL;
   1b0fa:	2000      	movs	r0, #0
}
   1b0fc:	4770      	bx	lr
   1b0fe:	bf00      	nop
   1b100:	20003bc0 	.word	0x20003bc0

0001b104 <ull_scan_is_disabled_get>:
	if (!scan || scan->is_enabled) {
   1b104:	4a04      	ldr	r2, [pc, #16]	; (1b118 <ull_scan_is_disabled_get+0x14>)
   1b106:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
   1b10a:	f003 0301 	and.w	r3, r3, #1
   1b10e:	4303      	orrs	r3, r0
}
   1b110:	bf0c      	ite	eq
   1b112:	4610      	moveq	r0, r2
   1b114:	2000      	movne	r0, #0
   1b116:	4770      	bx	lr
   1b118:	20003bc0 	.word	0x20003bc0

0001b11c <pdu_len_cmp>:
		break;
	}
}

static inline bool pdu_len_cmp(uint8_t opcode, uint8_t len)
{
   1b11c:	b5f0      	push	{r4, r5, r6, r7, lr}
	const uint8_t ctrl_len_lut[] = {
   1b11e:	4b0d      	ldr	r3, [pc, #52]	; (1b154 <pdu_len_cmp+0x38>)
{
   1b120:	b089      	sub	sp, #36	; 0x24
   1b122:	4605      	mov	r5, r0
   1b124:	460e      	mov	r6, r1
	const uint8_t ctrl_len_lut[] = {
   1b126:	aa01      	add	r2, sp, #4
   1b128:	f103 0718 	add.w	r7, r3, #24
   1b12c:	6818      	ldr	r0, [r3, #0]
   1b12e:	6859      	ldr	r1, [r3, #4]
   1b130:	4614      	mov	r4, r2
   1b132:	c403      	stmia	r4!, {r0, r1}
   1b134:	3308      	adds	r3, #8
   1b136:	42bb      	cmp	r3, r7
   1b138:	4622      	mov	r2, r4
   1b13a:	d1f7      	bne.n	1b12c <pdu_len_cmp+0x10>
   1b13c:	881b      	ldrh	r3, [r3, #0]
   1b13e:	8023      	strh	r3, [r4, #0]
		 sizeof(struct pdu_data_llctrl_phy_upd_ind)),
		(offsetof(struct pdu_data_llctrl, min_used_chans_ind) +
		 sizeof(struct pdu_data_llctrl_min_used_chans_ind)),
	};

	return ctrl_len_lut[opcode] == len;
   1b140:	ab08      	add	r3, sp, #32
   1b142:	441d      	add	r5, r3
   1b144:	f815 0c1c 	ldrb.w	r0, [r5, #-28]
}
   1b148:	1b83      	subs	r3, r0, r6
   1b14a:	4258      	negs	r0, r3
   1b14c:	4158      	adcs	r0, r3
   1b14e:	b009      	add	sp, #36	; 0x24
   1b150:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b152:	bf00      	nop
   1b154:	0002e72a 	.word	0x0002e72a

0001b158 <init_reset>:
{
   1b158:	b508      	push	{r3, lr}
	mem_init(conn_pool, sizeof(struct ll_conn),
   1b15a:	2203      	movs	r2, #3
   1b15c:	4b0c      	ldr	r3, [pc, #48]	; (1b190 <init_reset+0x38>)
   1b15e:	480d      	ldr	r0, [pc, #52]	; (1b194 <init_reset+0x3c>)
   1b160:	f44f 7196 	mov.w	r1, #300	; 0x12c
   1b164:	f010 fa8c 	bl	2b680 <mem_init>
	mem_init(mem_conn_tx.pool, CONN_TX_BUF_SIZE, CONFIG_BT_CTLR_TX_BUFFERS,
   1b168:	4b0b      	ldr	r3, [pc, #44]	; (1b198 <init_reset+0x40>)
   1b16a:	2203      	movs	r2, #3
   1b16c:	1d18      	adds	r0, r3, #4
   1b16e:	2124      	movs	r1, #36	; 0x24
   1b170:	f010 fa86 	bl	2b680 <mem_init>
	mem_init(mem_conn_tx_ctrl.pool, CONN_TX_CTRL_BUF_SIZE,
   1b174:	4b09      	ldr	r3, [pc, #36]	; (1b19c <init_reset+0x44>)
   1b176:	220c      	movs	r2, #12
   1b178:	1d18      	adds	r0, r3, #4
   1b17a:	2120      	movs	r1, #32
   1b17c:	f010 fa80 	bl	2b680 <mem_init>
	mem_init(mem_link_tx.pool, sizeof(memq_link_t),
   1b180:	4b07      	ldr	r3, [pc, #28]	; (1b1a0 <init_reset+0x48>)
   1b182:	220f      	movs	r2, #15
   1b184:	1d18      	adds	r0, r3, #4
   1b186:	2108      	movs	r1, #8
   1b188:	f010 fa7a 	bl	2b680 <mem_init>
}
   1b18c:	2000      	movs	r0, #0
   1b18e:	bd08      	pop	{r3, pc}
   1b190:	20003c0c 	.word	0x20003c0c
   1b194:	20003c10 	.word	0x20003c10
   1b198:	20003fa8 	.word	0x20003fa8
   1b19c:	20004018 	.word	0x20004018
   1b1a0:	2000419c 	.word	0x2000419c

0001b1a4 <ticker_op_stop_cb>:
{
   1b1a4:	b510      	push	{r4, lr}
   1b1a6:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1b1a8:	b158      	cbz	r0, 1b1c2 <ticker_op_stop_cb+0x1e>
   1b1aa:	f240 62aa 	movw	r2, #1706	; 0x6aa
   1b1ae:	490f      	ldr	r1, [pc, #60]	; (1b1ec <ticker_op_stop_cb+0x48>)
   1b1b0:	480f      	ldr	r0, [pc, #60]	; (1b1f0 <ticker_op_stop_cb+0x4c>)
   1b1b2:	f00b fedc 	bl	26f6e <printk>
   1b1b6:	4040      	eors	r0, r0
   1b1b8:	f380 8811 	msr	BASEPRI, r0
   1b1bc:	f04f 0003 	mov.w	r0, #3
   1b1c0:	df02      	svc	2
	mfy.param = param;
   1b1c2:	4b0c      	ldr	r3, [pc, #48]	; (1b1f4 <ticker_op_stop_cb+0x50>)
	retval = mayfly_enqueue(TICKER_USER_ID_ULL_LOW, TICKER_USER_ID_LLL, 0,
   1b1c4:	2200      	movs	r2, #0
   1b1c6:	4611      	mov	r1, r2
   1b1c8:	2002      	movs	r0, #2
	mfy.param = param;
   1b1ca:	609c      	str	r4, [r3, #8]
	retval = mayfly_enqueue(TICKER_USER_ID_ULL_LOW, TICKER_USER_ID_LLL, 0,
   1b1cc:	f7fc ff3a 	bl	18044 <mayfly_enqueue>
	LL_ASSERT(!retval);
   1b1d0:	b158      	cbz	r0, 1b1ea <ticker_op_stop_cb+0x46>
   1b1d2:	f240 62b1 	movw	r2, #1713	; 0x6b1
   1b1d6:	4905      	ldr	r1, [pc, #20]	; (1b1ec <ticker_op_stop_cb+0x48>)
   1b1d8:	4805      	ldr	r0, [pc, #20]	; (1b1f0 <ticker_op_stop_cb+0x4c>)
   1b1da:	f00b fec8 	bl	26f6e <printk>
   1b1de:	4040      	eors	r0, r0
   1b1e0:	f380 8811 	msr	BASEPRI, r0
   1b1e4:	f04f 0003 	mov.w	r0, #3
   1b1e8:	df02      	svc	2
}
   1b1ea:	bd10      	pop	{r4, pc}
   1b1ec:	00034fd6 	.word	0x00034fd6
   1b1f0:	0002fa94 	.word	0x0002fa94
   1b1f4:	20000d64 	.word	0x20000d64

0001b1f8 <ticker_start_conn_op_cb>:
{
   1b1f8:	b510      	push	{r4, lr}
   1b1fa:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1b1fc:	b158      	cbz	r0, 1b216 <ticker_start_conn_op_cb+0x1e>
   1b1fe:	f240 629e 	movw	r2, #1694	; 0x69e
   1b202:	490e      	ldr	r1, [pc, #56]	; (1b23c <ticker_start_conn_op_cb+0x44>)
   1b204:	480e      	ldr	r0, [pc, #56]	; (1b240 <ticker_start_conn_op_cb+0x48>)
   1b206:	f00b feb2 	bl	26f6e <printk>
   1b20a:	4040      	eors	r0, r0
   1b20c:	f380 8811 	msr	BASEPRI, r0
   1b210:	f04f 0003 	mov.w	r0, #3
   1b214:	df02      	svc	2
	p = ull_update_unmark(param);
   1b216:	4620      	mov	r0, r4
   1b218:	f7ff f95c 	bl	1a4d4 <ull_update_unmark>
	LL_ASSERT(p == param);
   1b21c:	4284      	cmp	r4, r0
   1b21e:	d00b      	beq.n	1b238 <ticker_start_conn_op_cb+0x40>
   1b220:	f240 62a1 	movw	r2, #1697	; 0x6a1
   1b224:	4905      	ldr	r1, [pc, #20]	; (1b23c <ticker_start_conn_op_cb+0x44>)
   1b226:	4806      	ldr	r0, [pc, #24]	; (1b240 <ticker_start_conn_op_cb+0x48>)
   1b228:	f00b fea1 	bl	26f6e <printk>
   1b22c:	4040      	eors	r0, r0
   1b22e:	f380 8811 	msr	BASEPRI, r0
   1b232:	f04f 0003 	mov.w	r0, #3
   1b236:	df02      	svc	2
}
   1b238:	bd10      	pop	{r4, pc}
   1b23a:	bf00      	nop
   1b23c:	00034fd6 	.word	0x00034fd6
   1b240:	0002fa94 	.word	0x0002fa94

0001b244 <ticker_stop_conn_op_cb>:
{
   1b244:	b510      	push	{r4, lr}
   1b246:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1b248:	b158      	cbz	r0, 1b262 <ticker_stop_conn_op_cb+0x1e>
   1b24a:	f240 6294 	movw	r2, #1684	; 0x694
   1b24e:	490e      	ldr	r1, [pc, #56]	; (1b288 <ticker_stop_conn_op_cb+0x44>)
   1b250:	480e      	ldr	r0, [pc, #56]	; (1b28c <ticker_stop_conn_op_cb+0x48>)
   1b252:	f00b fe8c 	bl	26f6e <printk>
   1b256:	4040      	eors	r0, r0
   1b258:	f380 8811 	msr	BASEPRI, r0
   1b25c:	f04f 0003 	mov.w	r0, #3
   1b260:	df02      	svc	2
	p = ull_update_mark(param);
   1b262:	4620      	mov	r0, r4
   1b264:	f7ff f92e 	bl	1a4c4 <ull_update_mark>
	LL_ASSERT(p == param);
   1b268:	4284      	cmp	r4, r0
   1b26a:	d00b      	beq.n	1b284 <ticker_stop_conn_op_cb+0x40>
   1b26c:	f240 6297 	movw	r2, #1687	; 0x697
   1b270:	4905      	ldr	r1, [pc, #20]	; (1b288 <ticker_stop_conn_op_cb+0x44>)
   1b272:	4806      	ldr	r0, [pc, #24]	; (1b28c <ticker_stop_conn_op_cb+0x48>)
   1b274:	f00b fe7b 	bl	26f6e <printk>
   1b278:	4040      	eors	r0, r0
   1b27a:	f380 8811 	msr	BASEPRI, r0
   1b27e:	f04f 0003 	mov.w	r0, #3
   1b282:	df02      	svc	2
}
   1b284:	bd10      	pop	{r4, pc}
   1b286:	bf00      	nop
   1b288:	00034fd6 	.word	0x00034fd6
   1b28c:	0002fa94 	.word	0x0002fa94

0001b290 <ticker_update_conn_op_cb>:
{
   1b290:	b510      	push	{r4, lr}
   1b292:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   1b294:	b198      	cbz	r0, 1b2be <ticker_update_conn_op_cb+0x2e>
   1b296:	f7ff f92b 	bl	1a4f0 <ull_update_mark_get>
   1b29a:	4284      	cmp	r4, r0
   1b29c:	d00f      	beq.n	1b2be <ticker_update_conn_op_cb+0x2e>
   1b29e:	f7ff f90b 	bl	1a4b8 <ull_disable_mark_get>
   1b2a2:	4284      	cmp	r4, r0
   1b2a4:	d00b      	beq.n	1b2be <ticker_update_conn_op_cb+0x2e>
   1b2a6:	f240 628d 	movw	r2, #1677	; 0x68d
   1b2aa:	4905      	ldr	r1, [pc, #20]	; (1b2c0 <ticker_update_conn_op_cb+0x30>)
   1b2ac:	4805      	ldr	r0, [pc, #20]	; (1b2c4 <ticker_update_conn_op_cb+0x34>)
   1b2ae:	f00b fe5e 	bl	26f6e <printk>
   1b2b2:	4040      	eors	r0, r0
   1b2b4:	f380 8811 	msr	BASEPRI, r0
   1b2b8:	f04f 0003 	mov.w	r0, #3
   1b2bc:	df02      	svc	2
}
   1b2be:	bd10      	pop	{r4, pc}
   1b2c0:	00034fd6 	.word	0x00034fd6
   1b2c4:	0002fa94 	.word	0x0002fa94

0001b2c8 <feature_rsp_send.isra.9>:
static int feature_rsp_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   1b2c8:	b570      	push	{r4, r5, r6, lr}
   1b2ca:	4605      	mov	r5, r0
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1b2cc:	481b      	ldr	r0, [pc, #108]	; (1b33c <feature_rsp_send.isra.9+0x74>)
static int feature_rsp_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   1b2ce:	460e      	mov	r6, r1
   1b2d0:	4614      	mov	r4, r2
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1b2d2:	f010 f9ee 	bl	2b6b2 <mem_acquire>
	if (!tx) {
   1b2d6:	4601      	mov	r1, r0
   1b2d8:	b368      	cbz	r0, 1b336 <feature_rsp_send.isra.9+0x6e>
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   1b2da:	3404      	adds	r4, #4
   1b2dc:	4620      	mov	r0, r4
   1b2de:	f010 fe37 	bl	2bf50 <feat_get>
   1b2e2:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
   1b2e6:	4018      	ands	r0, r3
   1b2e8:	f8c5 00b8 	str.w	r0, [r5, #184]	; 0xb8
		feat_land_octet0(feat_get(&req->features[0]), LL_FEAT);
   1b2ec:	4620      	mov	r0, r4
   1b2ee:	f010 fe2f 	bl	2bf50 <feat_get>
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   1b2f2:	4b13      	ldr	r3, [pc, #76]	; (1b340 <feature_rsp_send.isra.9+0x78>)
   1b2f4:	4003      	ands	r3, r0
	conn->llcp_feature.features_peer =
   1b2f6:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
	conn->common.fex_valid = 1U;
   1b2fa:	f895 3080 	ldrb.w	r3, [r5, #128]	; 0x80
   1b2fe:	f043 0301 	orr.w	r3, r3, #1
   1b302:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1b306:	790b      	ldrb	r3, [r1, #4]
   1b308:	f043 0303 	orr.w	r3, r3, #3
__ssp_bos_icheck3(memset, void *, int)
   1b30c:	2400      	movs	r4, #0
   1b30e:	710b      	strb	r3, [r1, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   1b310:	2309      	movs	r3, #9
   1b312:	608c      	str	r4, [r1, #8]
   1b314:	714b      	strb	r3, [r1, #5]
   1b316:	60cc      	str	r4, [r1, #12]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   1b318:	71cb      	strb	r3, [r1, #7]
	feat_result = feat_to_keep & feat_octet0;
   1b31a:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
   1b31e:	724c      	strb	r4, [r1, #9]
   1b320:	f003 038e 	and.w	r3, r3, #142	; 0x8e
	dst[0] = val;
   1b324:	720b      	strb	r3, [r1, #8]
	ctrl_tx_sec_enqueue(conn, tx);
   1b326:	4628      	mov	r0, r5
	dst[2] = val >> 16;
   1b328:	728c      	strb	r4, [r1, #10]
   1b32a:	f010 fe1f 	bl	2bf6c <ctrl_tx_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1b32e:	2301      	movs	r3, #1
   1b330:	7033      	strb	r3, [r6, #0]
	return 0;
   1b332:	4620      	mov	r0, r4
}
   1b334:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   1b336:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1b33a:	e7fb      	b.n	1b334 <feature_rsp_send.isra.9+0x6c>
   1b33c:	20004018 	.word	0x20004018
   1b340:	0001ff8e 	.word	0x0001ff8e

0001b344 <reject_ext_ind_send.isra.5>:
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   1b344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b346:	4605      	mov	r5, r0
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1b348:	480d      	ldr	r0, [pc, #52]	; (1b380 <reject_ext_ind_send.isra.5+0x3c>)
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   1b34a:	460c      	mov	r4, r1
   1b34c:	4617      	mov	r7, r2
   1b34e:	461e      	mov	r6, r3
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1b350:	f010 f9af 	bl	2b6b2 <mem_acquire>
	if (!tx) {
   1b354:	4601      	mov	r1, r0
   1b356:	b180      	cbz	r0, 1b37a <reject_ext_ind_send.isra.5+0x36>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1b358:	7900      	ldrb	r0, [r0, #4]
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
   1b35a:	720f      	strb	r7, [r1, #8]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   1b35c:	2303      	movs	r3, #3
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1b35e:	f040 0003 	orr.w	r0, r0, #3
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   1b362:	714b      	strb	r3, [r1, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   1b364:	2311      	movs	r3, #17
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1b366:	7108      	strb	r0, [r1, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   1b368:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_enqueue(conn, tx);
   1b36a:	4628      	mov	r0, r5
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
   1b36c:	724e      	strb	r6, [r1, #9]
	ctrl_tx_enqueue(conn, tx);
   1b36e:	f010 fdfd 	bl	2bf6c <ctrl_tx_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1b372:	2301      	movs	r3, #1
   1b374:	7023      	strb	r3, [r4, #0]
	return 0;
   1b376:	2000      	movs	r0, #0
}
   1b378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   1b37a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1b37e:	e7fb      	b.n	1b378 <reject_ext_ind_send.isra.5+0x34>
   1b380:	20004018 	.word	0x20004018

0001b384 <ll_conn_acquire>:
	return mem_acquire(&conn_free);
   1b384:	4801      	ldr	r0, [pc, #4]	; (1b38c <ll_conn_acquire+0x8>)
   1b386:	f010 b994 	b.w	2b6b2 <mem_acquire>
   1b38a:	bf00      	nop
   1b38c:	20003c0c 	.word	0x20003c0c

0001b390 <ll_conn_release>:
	mem_release(conn, &conn_free);
   1b390:	4901      	ldr	r1, [pc, #4]	; (1b398 <ll_conn_release+0x8>)
   1b392:	f010 b99f 	b.w	2b6d4 <mem_release>
   1b396:	bf00      	nop
   1b398:	20003c0c 	.word	0x20003c0c

0001b39c <ll_conn_handle_get>:
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   1b39c:	f44f 7296 	mov.w	r2, #300	; 0x12c
   1b3a0:	4901      	ldr	r1, [pc, #4]	; (1b3a8 <ll_conn_handle_get+0xc>)
   1b3a2:	f010 b9ab 	b.w	2b6fc <mem_index_get>
   1b3a6:	bf00      	nop
   1b3a8:	20003c10 	.word	0x20003c10

0001b3ac <tx_lll_flush>:
{
   1b3ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct ll_conn *conn = (void *)HDR_LLL2EVT(param);
   1b3b0:	6805      	ldr	r5, [r0, #0]
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   1b3b2:	4c31      	ldr	r4, [pc, #196]	; (1b478 <tx_lll_flush+0xcc>)
{
   1b3b4:	4606      	mov	r6, r0
	uint16_t handle = ll_conn_handle_get(conn);
   1b3b6:	4628      	mov	r0, r5
   1b3b8:	f7ff fff0 	bl	1b39c <ll_conn_handle_get>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   1b3bc:	f106 0740 	add.w	r7, r6, #64	; 0x40
	lll_conn_flush(handle, lll);
   1b3c0:	4631      	mov	r1, r6
   1b3c2:	f011 f8ff 	bl	2c5c4 <lll_conn_flush>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   1b3c6:	aa01      	add	r2, sp, #4
   1b3c8:	4639      	mov	r1, r7
   1b3ca:	6c70      	ldr	r0, [r6, #68]	; 0x44
   1b3cc:	f010 f9d2 	bl	2b774 <memq_dequeue>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   1b3d0:	f104 0804 	add.w	r8, r4, #4
	while (link) {
   1b3d4:	b9e8      	cbnz	r0, 1b412 <tx_lll_flush+0x66>
	LL_ASSERT(rx->hdr.link);
   1b3d6:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
	rx = (void *)&conn->llcp_terminate.node_rx;
   1b3da:	f105 04cc 	add.w	r4, r5, #204	; 0xcc
	LL_ASSERT(rx->hdr.link);
   1b3de:	b95b      	cbnz	r3, 1b3f8 <tx_lll_flush+0x4c>
   1b3e0:	f240 725d 	movw	r2, #1885	; 0x75d
   1b3e4:	4925      	ldr	r1, [pc, #148]	; (1b47c <tx_lll_flush+0xd0>)
   1b3e6:	4826      	ldr	r0, [pc, #152]	; (1b480 <tx_lll_flush+0xd4>)
   1b3e8:	f00b fdc1 	bl	26f6e <printk>
   1b3ec:	4040      	eors	r0, r0
   1b3ee:	f380 8811 	msr	BASEPRI, r0
   1b3f2:	f04f 0003 	mov.w	r0, #3
   1b3f6:	df02      	svc	2
	rx->hdr.link = NULL;
   1b3f8:	2300      	movs	r3, #0
	link = rx->hdr.link;
   1b3fa:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
	rx->hdr.link = NULL;
   1b3fe:	f8c5 30cc 	str.w	r3, [r5, #204]	; 0xcc
	ull_rx_put(link, rx);
   1b402:	4621      	mov	r1, r4
   1b404:	f7ff f916 	bl	1a634 <ull_rx_put>
	ull_rx_sched();
   1b408:	f7ff f924 	bl	1a654 <ull_rx_sched>
}
   1b40c:	b002      	add	sp, #8
   1b40e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   1b412:	78e2      	ldrb	r2, [r4, #3]
	if (last == count) {
   1b414:	f894 e001 	ldrb.w	lr, [r4, #1]
   1b418:	f894 c002 	ldrb.w	ip, [r4, #2]
   1b41c:	7821      	ldrb	r1, [r4, #0]
	last = last + 1;
   1b41e:	1c53      	adds	r3, r2, #1
   1b420:	b2db      	uxtb	r3, r3
		last = 0U;
   1b422:	459e      	cmp	lr, r3
   1b424:	bf08      	it	eq
   1b426:	2300      	moveq	r3, #0
	if (last == first) {
   1b428:	459c      	cmp	ip, r3
   1b42a:	d004      	beq.n	1b436 <tx_lll_flush+0x8a>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   1b42c:	fb12 f201 	smulbb	r2, r2, r1
		LL_ASSERT(lll_tx);
   1b430:	eb18 0c02 	adds.w	ip, r8, r2
   1b434:	d10e      	bne.n	1b454 <tx_lll_flush+0xa8>
   1b436:	f240 7249 	movw	r2, #1865	; 0x749
   1b43a:	4910      	ldr	r1, [pc, #64]	; (1b47c <tx_lll_flush+0xd0>)
   1b43c:	4810      	ldr	r0, [pc, #64]	; (1b480 <tx_lll_flush+0xd4>)
   1b43e:	f00b fd96 	bl	26f6e <printk>
   1b442:	4040      	eors	r0, r0
   1b444:	f380 8811 	msr	BASEPRI, r0
   1b448:	f04f 0003 	mov.w	r0, #3
   1b44c:	df02      	svc	2
		lll_tx->handle = 0xFFFF;
   1b44e:	2300      	movs	r3, #0
   1b450:	801b      	strh	r3, [r3, #0]
   1b452:	deff      	udf	#255	; 0xff
   1b454:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1b458:	f828 1002 	strh.w	r1, [r8, r2]
		lll_tx->node = tx;
   1b45c:	9901      	ldr	r1, [sp, #4]
   1b45e:	f8cc 1004 	str.w	r1, [ip, #4]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   1b462:	680a      	ldr	r2, [r1, #0]
   1b464:	6002      	str	r2, [r0, #0]
		tx->next = link;
   1b466:	6008      	str	r0, [r1, #0]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   1b468:	aa01      	add	r2, sp, #4
	*last = idx; /* Commit: Update write index */
   1b46a:	70e3      	strb	r3, [r4, #3]
   1b46c:	4639      	mov	r1, r7
   1b46e:	6c70      	ldr	r0, [r6, #68]	; 0x44
   1b470:	f010 f980 	bl	2b774 <memq_dequeue>
   1b474:	e7ae      	b.n	1b3d4 <tx_lll_flush+0x28>
   1b476:	bf00      	nop
   1b478:	20000cac 	.word	0x20000cac
   1b47c:	00034fd6 	.word	0x00034fd6
   1b480:	0002fa94 	.word	0x0002fa94

0001b484 <ll_conn_get>:
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1b484:	4602      	mov	r2, r0
   1b486:	f44f 7196 	mov.w	r1, #300	; 0x12c
   1b48a:	4801      	ldr	r0, [pc, #4]	; (1b490 <ll_conn_get+0xc>)
   1b48c:	f010 b933 	b.w	2b6f6 <mem_get>
   1b490:	20003c10 	.word	0x20003c10

0001b494 <ll_tx_mem_acquire>:
	return mem_acquire(&mem_conn_tx.free);
   1b494:	4801      	ldr	r0, [pc, #4]	; (1b49c <ll_tx_mem_acquire+0x8>)
   1b496:	f010 b90c 	b.w	2b6b2 <mem_acquire>
   1b49a:	bf00      	nop
   1b49c:	20003fa8 	.word	0x20003fa8

0001b4a0 <ll_tx_mem_release>:
	mem_release(tx, &mem_conn_tx.free);
   1b4a0:	4901      	ldr	r1, [pc, #4]	; (1b4a8 <ll_tx_mem_release+0x8>)
   1b4a2:	f010 b917 	b.w	2b6d4 <mem_release>
   1b4a6:	bf00      	nop
   1b4a8:	20003fa8 	.word	0x20003fa8

0001b4ac <ll_tx_mem_enqueue>:
{
   1b4ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b4b0:	4606      	mov	r6, r0
   1b4b2:	4688      	mov	r8, r1
	conn = ll_connected_get(handle);
   1b4b4:	f010 fd7f 	bl	2bfb6 <ll_connected_get>
	if (!conn) {
   1b4b8:	4604      	mov	r4, r0
   1b4ba:	b338      	cbz	r0, 1b50c <ll_tx_mem_enqueue+0x60>
	idx = MFIFO_ENQUEUE_GET(conn_tx, (void **) &lll_tx);
   1b4bc:	4a17      	ldr	r2, [pc, #92]	; (1b51c <ll_tx_mem_enqueue+0x70>)
   1b4be:	78d0      	ldrb	r0, [r2, #3]
	if (last == count) {
   1b4c0:	7857      	ldrb	r7, [r2, #1]
   1b4c2:	7895      	ldrb	r5, [r2, #2]
   1b4c4:	7811      	ldrb	r1, [r2, #0]
	last = last + 1;
   1b4c6:	1c43      	adds	r3, r0, #1
   1b4c8:	b2db      	uxtb	r3, r3
		last = 0U;
   1b4ca:	429f      	cmp	r7, r3
   1b4cc:	bf08      	it	eq
   1b4ce:	2300      	moveq	r3, #0
	if (last == first) {
   1b4d0:	429d      	cmp	r5, r3
   1b4d2:	d01f      	beq.n	1b514 <ll_tx_mem_enqueue+0x68>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   1b4d4:	1d15      	adds	r5, r2, #4
   1b4d6:	fb10 f001 	smulbb	r0, r0, r1
	if (!lll_tx) {
   1b4da:	182f      	adds	r7, r5, r0
   1b4dc:	d01a      	beq.n	1b514 <ll_tx_mem_enqueue+0x68>
	lll_tx->handle = handle;
   1b4de:	522e      	strh	r6, [r5, r0]
	lll_tx->node = tx;
   1b4e0:	f8c7 8004 	str.w	r8, [r7, #4]
	*last = idx; /* Commit: Update write index */
   1b4e4:	70d3      	strb	r3, [r2, #3]
	return hdr->ref;
   1b4e6:	7c23      	ldrb	r3, [r4, #16]
	if (ull_ref_get(&conn->ull)) {
   1b4e8:	b133      	cbz	r3, 1b4f8 <ll_tx_mem_enqueue+0x4c>
		mfy.param = conn;
   1b4ea:	4b0d      	ldr	r3, [pc, #52]	; (1b520 <ll_tx_mem_enqueue+0x74>)
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   1b4ec:	2200      	movs	r2, #0
   1b4ee:	2101      	movs	r1, #1
   1b4f0:	2003      	movs	r0, #3
		mfy.param = conn;
   1b4f2:	609c      	str	r4, [r3, #8]
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   1b4f4:	f7fc fda6 	bl	18044 <mayfly_enqueue>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1b4f8:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   1b4fc:	2b00      	cmp	r3, #0
   1b4fe:	da03      	bge.n	1b508 <ll_tx_mem_enqueue+0x5c>
		ull_slave_latency_cancel(conn, handle);
   1b500:	4631      	mov	r1, r6
   1b502:	4620      	mov	r0, r4
   1b504:	f001 f858 	bl	1c5b8 <ull_slave_latency_cancel>
	return 0;
   1b508:	2000      	movs	r0, #0
   1b50a:	e001      	b.n	1b510 <ll_tx_mem_enqueue+0x64>
		return -EINVAL;
   1b50c:	f06f 0015 	mvn.w	r0, #21
}
   1b510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOBUFS;
   1b514:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1b518:	e7fa      	b.n	1b510 <ll_tx_mem_enqueue+0x64>
   1b51a:	bf00      	nop
   1b51c:	20000d30 	.word	0x20000d30
   1b520:	20000d54 	.word	0x20000d54

0001b524 <ull_conn_reset>:
{
   1b524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	LL_ASSERT(err == 0 || err == -EALREADY);
   1b526:	4e16      	ldr	r6, [pc, #88]	; (1b580 <ull_conn_reset+0x5c>)
   1b528:	4f16      	ldr	r7, [pc, #88]	; (1b584 <ull_conn_reset+0x60>)
{
   1b52a:	2400      	movs	r4, #0
	conn = ll_conn_get(handle);
   1b52c:	b2a0      	uxth	r0, r4
   1b52e:	f7ff ffa9 	bl	1b484 <ll_conn_get>
   1b532:	4605      	mov	r5, r0
	err = ull_ticker_stop_with_mark(TICKER_ID_CONN_BASE + handle,
   1b534:	1d60      	adds	r0, r4, #5
   1b536:	f105 021c 	add.w	r2, r5, #28
   1b53a:	4629      	mov	r1, r5
   1b53c:	b2c0      	uxtb	r0, r0
   1b53e:	f7ff f817 	bl	1a570 <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
   1b542:	b168      	cbz	r0, 1b560 <ull_conn_reset+0x3c>
   1b544:	3078      	adds	r0, #120	; 0x78
   1b546:	d00b      	beq.n	1b560 <ull_conn_reset+0x3c>
   1b548:	f240 62bd 	movw	r2, #1725	; 0x6bd
   1b54c:	4631      	mov	r1, r6
   1b54e:	4638      	mov	r0, r7
   1b550:	f00b fd0d 	bl	26f6e <printk>
   1b554:	4040      	eors	r0, r0
   1b556:	f380 8811 	msr	BASEPRI, r0
   1b55a:	f04f 0003 	mov.w	r0, #3
   1b55e:	df02      	svc	2
	conn->lll.link_tx_free = NULL;
   1b560:	3401      	adds	r4, #1
   1b562:	2300      	movs	r3, #0
	for (handle = 0U; handle < CONFIG_BT_MAX_CONN; handle++) {
   1b564:	2c03      	cmp	r4, #3
	conn->lll.link_tx_free = NULL;
   1b566:	66eb      	str	r3, [r5, #108]	; 0x6c
	for (handle = 0U; handle < CONFIG_BT_MAX_CONN; handle++) {
   1b568:	d1e0      	bne.n	1b52c <ull_conn_reset+0x8>
	MFIFO_INIT(conn_tx);
   1b56a:	4a07      	ldr	r2, [pc, #28]	; (1b588 <ull_conn_reset+0x64>)
   1b56c:	8053      	strh	r3, [r2, #2]
	MFIFO_INIT(conn_ack);
   1b56e:	4a07      	ldr	r2, [pc, #28]	; (1b58c <ull_conn_reset+0x68>)
   1b570:	8053      	strh	r3, [r2, #2]
	conn_upd_curr = NULL;
   1b572:	4a07      	ldr	r2, [pc, #28]	; (1b590 <ull_conn_reset+0x6c>)
   1b574:	6013      	str	r3, [r2, #0]
}
   1b576:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	err = init_reset();
   1b57a:	f7ff bded 	b.w	1b158 <init_reset>
   1b57e:	bf00      	nop
   1b580:	00034fd6 	.word	0x00034fd6
   1b584:	0002fa94 	.word	0x0002fa94
   1b588:	20000d30 	.word	0x20000d30
   1b58c:	20000cac 	.word	0x20000cac
   1b590:	20003f94 	.word	0x20003f94

0001b594 <ull_conn_setup>:
	lll = *((struct lll_conn **)((uint8_t *)ftr->param +
   1b594:	688b      	ldr	r3, [r1, #8]
   1b596:	689b      	ldr	r3, [r3, #8]
{
   1b598:	b510      	push	{r4, lr}
	switch (lll->role) {
   1b59a:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
   1b59e:	09e4      	lsrs	r4, r4, #7
{
   1b5a0:	460a      	mov	r2, r1
	switch (lll->role) {
   1b5a2:	d004      	beq.n	1b5ae <ull_conn_setup+0x1a>
		ull_slave_setup(link, rx, ftr, lll);
   1b5a4:	3208      	adds	r2, #8
}
   1b5a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ull_slave_setup(link, rx, ftr, lll);
   1b5aa:	f7e7 bc01 	b.w	2db0 <ull_slave_setup>
		LL_ASSERT(0);
   1b5ae:	f240 321b 	movw	r2, #795	; 0x31b
   1b5b2:	4905      	ldr	r1, [pc, #20]	; (1b5c8 <ull_conn_setup+0x34>)
   1b5b4:	4805      	ldr	r0, [pc, #20]	; (1b5cc <ull_conn_setup+0x38>)
   1b5b6:	f00b fcda 	bl	26f6e <printk>
   1b5ba:	4040      	eors	r0, r0
   1b5bc:	f380 8811 	msr	BASEPRI, r0
   1b5c0:	f04f 0003 	mov.w	r0, #3
   1b5c4:	df02      	svc	2
}
   1b5c6:	bd10      	pop	{r4, pc}
   1b5c8:	00034fd6 	.word	0x00034fd6
   1b5cc:	0002fa94 	.word	0x0002fa94

0001b5d0 <ull_conn_rx>:
	conn = ll_connected_get((*rx)->hdr.handle);
   1b5d0:	680b      	ldr	r3, [r1, #0]
{
   1b5d2:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b5d6:	4607      	mov	r7, r0
	conn = ll_connected_get((*rx)->hdr.handle);
   1b5d8:	88d8      	ldrh	r0, [r3, #6]
{
   1b5da:	460e      	mov	r6, r1
	conn = ll_connected_get((*rx)->hdr.handle);
   1b5dc:	f010 fceb 	bl	2bfb6 <ll_connected_get>
	if (!conn) {
   1b5e0:	6835      	ldr	r5, [r6, #0]
   1b5e2:	4604      	mov	r4, r0
   1b5e4:	b910      	cbnz	r0, 1b5ec <ull_conn_rx+0x1c>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1b5e6:	2301      	movs	r3, #1
   1b5e8:	712b      	strb	r3, [r5, #4]
	return 0;
   1b5ea:	e049      	b.n	1b680 <ull_conn_rx+0xb0>
	switch (pdu_rx->ll_id) {
   1b5ec:	7f28      	ldrb	r0, [r5, #28]
   1b5ee:	f3c0 0001 	ubfx	r0, r0, #0, #2
   1b5f2:	b2c3      	uxtb	r3, r0
   1b5f4:	b240      	sxtb	r0, r0
   1b5f6:	2800      	cmp	r0, #0
   1b5f8:	f000 846a 	beq.w	1bed0 <ull_conn_rx+0x900>
   1b5fc:	2b02      	cmp	r3, #2
   1b5fe:	d93f      	bls.n	1b680 <ull_conn_rx+0xb0>
			  struct pdu_data *pdu_rx, struct ll_conn *conn)
{
	int nack = 0;
	uint8_t opcode;

	opcode = pdu_rx->llctrl.opcode;
   1b600:	f895 801f 	ldrb.w	r8, [r5, #31]
	pdu_rx = (void *)(*rx)->pdu;
   1b604:	f105 091c 	add.w	r9, r5, #28

		return 0;
	}
#endif /* CONFIG_BT_CTLR_LE_ENC */

	switch (opcode) {
   1b608:	f1b8 0f11 	cmp.w	r8, #17
   1b60c:	f200 844a 	bhi.w	1bea4 <ull_conn_rx+0x8d4>
   1b610:	e8df f018 	tbh	[pc, r8, lsl #1]
   1b614:	008a0012 	.word	0x008a0012
   1b618:	044800bc 	.word	0x044800bc
   1b61c:	04480448 	.word	0x04480448
   1b620:	03bc0448 	.word	0x03bc0448
   1b624:	00e400c8 	.word	0x00e400c8
   1b628:	04480448 	.word	0x04480448
   1b62c:	04480106 	.word	0x04480106
   1b630:	015e00dc 	.word	0x015e00dc
   1b634:	035e02cc 	.word	0x035e02cc
	case PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND:
	{
		uint8_t err;

		if (!conn->lll.role ||
   1b638:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   1b63c:	2b00      	cmp	r3, #0
   1b63e:	f280 8431 	bge.w	1bea4 <ull_conn_rx+0x8d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND,
   1b642:	7f69      	ldrb	r1, [r5, #29]
   1b644:	2000      	movs	r0, #0
   1b646:	f7ff fd69 	bl	1b11c <pdu_len_cmp>
		if (!conn->lll.role ||
   1b64a:	2800      	cmp	r0, #0
   1b64c:	f000 842a 	beq.w	1bea4 <ull_conn_rx+0x8d4>
	instant = sys_le16_to_cpu(pdu->llctrl.conn_update_ind.instant);
   1b650:	f8b5 2029 	ldrh.w	r2, [r5, #41]	; 0x29
	if (((instant - conn->lll.event_counter) & 0xFFFF) > 0x7FFF) {
   1b654:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   1b656:	1ad3      	subs	r3, r2, r3
   1b658:	041b      	lsls	r3, r3, #16
   1b65a:	d503      	bpl.n	1b664 <ull_conn_rx+0x94>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1b65c:	2301      	movs	r3, #1
   1b65e:	712b      	strb	r3, [r5, #4]
		err = BT_HCI_ERR_INSTANT_PASSED;
   1b660:	2328      	movs	r3, #40	; 0x28
   1b662:	e00b      	b.n	1b67c <ull_conn_rx+0xac>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   1b664:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
   1b668:	f894 108d 	ldrb.w	r1, [r4, #141]	; 0x8d
   1b66c:	1a5b      	subs	r3, r3, r1
   1b66e:	f003 0303 	and.w	r3, r3, #3
   1b672:	2b02      	cmp	r3, #2
   1b674:	d106      	bne.n	1b684 <ull_conn_rx+0xb4>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1b676:	2301      	movs	r3, #1
   1b678:	712b      	strb	r3, [r5, #4]
		err = BT_HCI_ERR_DIFF_TRANS_COLLISION;
   1b67a:	232a      	movs	r3, #42	; 0x2a
			goto ull_conn_rx_unknown_rsp_send;
		}

		err = chan_map_upd_recv(conn, *rx, pdu_rx);
		if (err) {
			conn->llcp_terminate.reason_peer = err;
   1b67c:	f884 30cb 	strb.w	r3, [r4, #203]	; 0xcb
	return 0;
   1b680:	2000      	movs	r0, #0
   1b682:	e0e0      	b.n	1b846 <ull_conn_rx+0x276>
	if (!conn_upd_curr) {
   1b684:	4bc3      	ldr	r3, [pc, #780]	; (1b994 <ull_conn_rx+0x3c4>)
   1b686:	6819      	ldr	r1, [r3, #0]
   1b688:	b901      	cbnz	r1, 1b68c <ull_conn_rx+0xbc>
		conn_upd_curr = conn;
   1b68a:	601c      	str	r4, [r3, #0]
	conn->llcp_cu.win_size = pdu->llctrl.conn_update_ind.win_size;
   1b68c:	f895 3020 	ldrb.w	r3, [r5, #32]
   1b690:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.win_offset) *
   1b694:	f8b5 1021 	ldrh.w	r1, [r5, #33]	; 0x21
   1b698:	f240 43e2 	movw	r3, #1250	; 0x4e2
   1b69c:	434b      	muls	r3, r1
	conn->llcp_cu.win_offset_us =
   1b69e:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.interval);
   1b6a2:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
   1b6a6:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
   1b6aa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	conn->llcp_cu.interval =
   1b6ae:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.latency);
   1b6b2:	f895 1026 	ldrb.w	r1, [r5, #38]	; 0x26
   1b6b6:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
   1b6ba:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	conn->llcp_cu.latency =
   1b6be:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   1b6c2:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
   1b6c6:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
	conn->llcp.conn_upd.instant = instant;
   1b6ca:	f8a4 2090 	strh.w	r2, [r4, #144]	; 0x90
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   1b6ce:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	conn->llcp_cu.timeout =
   1b6d2:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   1b6d6:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
   1b6da:	f023 0307 	bic.w	r3, r3, #7
   1b6de:	f043 0304 	orr.w	r3, r3, #4
   1b6e2:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
	conn->llcp_cu.ack--;
   1b6e6:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
   1b6ea:	3b01      	subs	r3, #1
   1b6ec:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
	link->mem = conn->llcp_rx;
   1b6f0:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   1b6f4:	607b      	str	r3, [r7, #4]
	(*rx)->hdr.link = link;
   1b6f6:	6833      	ldr	r3, [r6, #0]
   1b6f8:	601f      	str	r7, [r3, #0]
	conn->llcp_rx = *rx;
   1b6fa:	6833      	ldr	r3, [r6, #0]
   1b6fc:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	*rx = NULL;
   1b700:	2300      	movs	r3, #0
   1b702:	6033      	str	r3, [r6, #0]
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   1b704:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
   1b708:	f894 30ed 	ldrb.w	r3, [r4, #237]	; 0xed
   1b70c:	4293      	cmp	r3, r2
   1b70e:	d007      	beq.n	1b720 <ull_conn_rx+0x150>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
   1b710:	f894 30ee 	ldrb.w	r3, [r4, #238]	; 0xee
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   1b714:	f003 0307 	and.w	r3, r3, #7
   1b718:	2b04      	cmp	r3, #4
   1b71a:	d101      	bne.n	1b720 <ull_conn_rx+0x150>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   1b71c:	f884 20ed 	strb.w	r2, [r4, #237]	; 0xed
				break;
			}
		}

		/* Procedure complete */
		conn->procedure_expire = 0U;
   1b720:	2000      	movs	r0, #0
   1b722:	f8a4 007c 	strh.w	r0, [r4, #124]	; 0x7c
		break;
   1b726:	e08e      	b.n	1b846 <ull_conn_rx+0x276>
		if (!conn->lll.role ||
   1b728:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   1b72c:	2b00      	cmp	r3, #0
   1b72e:	f280 83b9 	bge.w	1bea4 <ull_conn_rx+0x8d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CHAN_MAP_IND,
   1b732:	7f69      	ldrb	r1, [r5, #29]
   1b734:	2001      	movs	r0, #1
   1b736:	f7ff fcf1 	bl	1b11c <pdu_len_cmp>
		if (!conn->lll.role ||
   1b73a:	2800      	cmp	r0, #0
   1b73c:	f000 83b2 	beq.w	1bea4 <ull_conn_rx+0x8d4>
	instant = sys_le16_to_cpu(pdu->llctrl.chan_map_ind.instant);
   1b740:	f8b5 1025 	ldrh.w	r1, [r5, #37]	; 0x25
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   1b744:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   1b746:	1acb      	subs	r3, r1, r3
   1b748:	0418      	lsls	r0, r3, #16
   1b74a:	d487      	bmi.n	1b65c <ull_conn_rx+0x8c>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   1b74c:	f894 208d 	ldrb.w	r2, [r4, #141]	; 0x8d
   1b750:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
   1b754:	1a9b      	subs	r3, r3, r2
   1b756:	f003 0303 	and.w	r3, r3, #3
   1b75a:	2b02      	cmp	r3, #2
   1b75c:	d08b      	beq.n	1b676 <ull_conn_rx+0xa6>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1b75e:	462b      	mov	r3, r5
	conn->llcp_ack -= 2U;
   1b760:	3a02      	subs	r2, #2
   1b762:	f853 0f20 	ldr.w	r0, [r3, #32]!
   1b766:	f8c4 0091 	str.w	r0, [r4, #145]	; 0x91
   1b76a:	791b      	ldrb	r3, [r3, #4]
   1b76c:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
	conn->llcp.chan_map.initiate = 0U;
   1b770:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
	conn->llcp.chan_map.instant = instant;
   1b774:	f8a4 1096 	strh.w	r1, [r4, #150]	; 0x96
	conn->llcp.chan_map.initiate = 0U;
   1b778:	f36f 0300 	bfc	r3, #0, #1
   1b77c:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
	conn->llcp_type = LLCP_CHAN_MAP;
   1b780:	2302      	movs	r3, #2
   1b782:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
	conn->llcp_ack -= 2U;
   1b786:	f884 208d 	strb.w	r2, [r4, #141]	; 0x8d
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1b78a:	e72c      	b.n	1b5e6 <ull_conn_rx+0x16>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
   1b78c:	7f69      	ldrb	r1, [r5, #29]
   1b78e:	2002      	movs	r0, #2
   1b790:	f7ff fcc4 	bl	1b11c <pdu_len_cmp>
   1b794:	2800      	cmp	r0, #0
   1b796:	f000 8385 	beq.w	1bea4 <ull_conn_rx+0x8d4>
	conn->llcp_terminate.reason_peer = pdu->llctrl.terminate_ind.error_code;
   1b79a:	f895 3020 	ldrb.w	r3, [r5, #32]
   1b79e:	f884 30cb 	strb.w	r3, [r4, #203]	; 0xcb
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1b7a2:	e720      	b.n	1b5e6 <ull_conn_rx+0x16>
		if (!conn->lll.role ||
   1b7a4:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   1b7a8:	2b00      	cmp	r3, #0
   1b7aa:	f280 837b 	bge.w	1bea4 <ull_conn_rx+0x8d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_REQ,
   1b7ae:	7f69      	ldrb	r1, [r5, #29]
   1b7b0:	2008      	movs	r0, #8
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
   1b7b2:	f7ff fcb3 	bl	1b11c <pdu_len_cmp>
		if (conn->lll.role ||
   1b7b6:	2800      	cmp	r0, #0
   1b7b8:	f000 8374 	beq.w	1bea4 <ull_conn_rx+0x8d4>
		nack = feature_rsp_send(conn, *rx, pdu_rx);
   1b7bc:	464a      	mov	r2, r9
   1b7be:	1d29      	adds	r1, r5, #4
   1b7c0:	4620      	mov	r0, r4
}
   1b7c2:	b001      	add	sp, #4
   1b7c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		nack = feature_rsp_send(conn, *rx, pdu_rx);
   1b7c8:	f7ff bd7e 	b.w	1b2c8 <feature_rsp_send.isra.9>
		if (conn->lll.role ||
   1b7cc:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   1b7d0:	2b00      	cmp	r3, #0
   1b7d2:	f2c0 8367 	blt.w	1bea4 <ull_conn_rx+0x8d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
   1b7d6:	7f69      	ldrb	r1, [r5, #29]
   1b7d8:	200e      	movs	r0, #14
   1b7da:	e7ea      	b.n	1b7b2 <ull_conn_rx+0x1e2>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_RSP,
   1b7dc:	7f69      	ldrb	r1, [r5, #29]
   1b7de:	2009      	movs	r0, #9
   1b7e0:	f7ff fc9c 	bl	1b11c <pdu_len_cmp>
		if ((!IS_ENABLED(CONFIG_BT_CTLR_SLAVE_FEAT_REQ) &&
   1b7e4:	2800      	cmp	r0, #0
   1b7e6:	f000 835d 	beq.w	1bea4 <ull_conn_rx+0x8d4>
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   1b7ea:	3520      	adds	r5, #32
   1b7ec:	4628      	mov	r0, r5
   1b7ee:	f010 fbaf 	bl	2bf50 <feat_get>
   1b7f2:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   1b7f6:	4018      	ands	r0, r3
   1b7f8:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
		feat_land_octet0(feat_get(&rsp->features[0]), LL_FEAT);
   1b7fc:	4628      	mov	r0, r5
   1b7fe:	f010 fba7 	bl	2bf50 <feat_get>
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   1b802:	4b65      	ldr	r3, [pc, #404]	; (1b998 <ull_conn_rx+0x3c8>)
   1b804:	4003      	ands	r3, r0
	conn->llcp_feature.features_peer =
   1b806:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
	conn->common.fex_valid = 1U;
   1b80a:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
   1b80e:	f043 0301 	orr.w	r3, r3, #1
   1b812:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
	conn->llcp_feature.ack = conn->llcp_feature.req;
   1b816:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
   1b81a:	f884 30b5 	strb.w	r3, [r4, #181]	; 0xb5
	conn->procedure_expire = 0U;
   1b81e:	e77f      	b.n	1b720 <ull_conn_rx+0x150>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
   1b820:	7f69      	ldrb	r1, [r5, #29]
   1b822:	200c      	movs	r0, #12
   1b824:	f7ff fc7a 	bl	1b11c <pdu_len_cmp>
   1b828:	2800      	cmp	r0, #0
   1b82a:	f000 833b 	beq.w	1bea4 <ull_conn_rx+0x8d4>
	if (!conn->llcp_version.tx) {
   1b82e:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
   1b832:	f013 0601 	ands.w	r6, r3, #1
   1b836:	d140      	bne.n	1b8ba <ull_conn_rx+0x2ea>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1b838:	4858      	ldr	r0, [pc, #352]	; (1b99c <ull_conn_rx+0x3cc>)
   1b83a:	f00f ff3a 	bl	2b6b2 <mem_acquire>
		if (!tx) {
   1b83e:	4601      	mov	r1, r0
   1b840:	b920      	cbnz	r0, 1b84c <ull_conn_rx+0x27c>
			return -ENOBUFS;
   1b842:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   1b846:	b001      	add	sp, #4
   1b848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		conn->llcp_version.tx = 1U;
   1b84c:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
   1b850:	f043 0301 	orr.w	r3, r3, #1
   1b854:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1b858:	7903      	ldrb	r3, [r0, #4]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   1b85a:	7286      	strb	r6, [r0, #10]
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1b85c:	f043 0303 	orr.w	r3, r3, #3
   1b860:	7103      	strb	r3, [r0, #4]
		pdu_tx->len =
   1b862:	2306      	movs	r3, #6
   1b864:	7143      	strb	r3, [r0, #5]
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   1b866:	230c      	movs	r3, #12
   1b868:	71c3      	strb	r3, [r0, #7]
		v->version_number = LL_VERSION_NUMBER;
   1b86a:	230b      	movs	r3, #11
   1b86c:	7203      	strb	r3, [r0, #8]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   1b86e:	2359      	movs	r3, #89	; 0x59
   1b870:	7243      	strb	r3, [r0, #9]
		v->sub_version_number =
   1b872:	f04f 33ff 	mov.w	r3, #4294967295
   1b876:	72c3      	strb	r3, [r0, #11]
   1b878:	7303      	strb	r3, [r0, #12]
		ctrl_tx_sec_enqueue(conn, tx);
   1b87a:	4620      	mov	r0, r4
   1b87c:	f010 fb76 	bl	2bf6c <ctrl_tx_enqueue>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1b880:	2301      	movs	r3, #1
   1b882:	712b      	strb	r3, [r5, #4]
	conn->llcp_version.version_number = v->version_number;
   1b884:	f895 3020 	ldrb.w	r3, [r5, #32]
   1b888:	f884 30c3 	strb.w	r3, [r4, #195]	; 0xc3
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   1b88c:	f895 2022 	ldrb.w	r2, [r5, #34]	; 0x22
   1b890:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   1b894:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1b898:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
		sys_le16_to_cpu(v->sub_version_number);
   1b89c:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
   1b8a0:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
   1b8a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp_version.sub_version_number =
   1b8a8:	f8a4 30c6 	strh.w	r3, [r4, #198]	; 0xc6
	conn->llcp_version.rx = 1U;
   1b8ac:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
   1b8b0:	f043 0302 	orr.w	r3, r3, #2
   1b8b4:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	return 0;
   1b8b8:	e6e2      	b.n	1b680 <ull_conn_rx+0xb0>
	} else if (!conn->llcp_version.rx) {
   1b8ba:	f013 0302 	ands.w	r3, r3, #2
   1b8be:	f47f ae92 	bne.w	1b5e6 <ull_conn_rx+0x16>
		conn->llcp_version.ack = conn->llcp_version.req;
   1b8c2:	f894 20c0 	ldrb.w	r2, [r4, #192]	; 0xc0
   1b8c6:	f884 20c1 	strb.w	r2, [r4, #193]	; 0xc1
		conn->procedure_expire = 0U;
   1b8ca:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
   1b8ce:	e7d9      	b.n	1b884 <ull_conn_rx+0x2b4>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ,
   1b8d0:	7f69      	ldrb	r1, [r5, #29]
   1b8d2:	200f      	movs	r0, #15
   1b8d4:	f7ff fc22 	bl	1b11c <pdu_len_cmp>
   1b8d8:	2800      	cmp	r0, #0
   1b8da:	f000 82e3 	beq.w	1bea4 <ull_conn_rx+0x8d4>
		if (conn_upd_curr && (conn_upd_curr != conn)) {
   1b8de:	4b2d      	ldr	r3, [pc, #180]	; (1b994 <ull_conn_rx+0x3c4>)
   1b8e0:	6818      	ldr	r0, [r3, #0]
   1b8e2:	b150      	cbz	r0, 1b8fa <ull_conn_rx+0x32a>
   1b8e4:	4284      	cmp	r4, r0
   1b8e6:	d008      	beq.n	1b8fa <ull_conn_rx+0x32a>
			nack = reject_ext_ind_send(conn, *rx,
   1b8e8:	2320      	movs	r3, #32
				nack = reject_ext_ind_send(conn, *rx,
   1b8ea:	220f      	movs	r2, #15
				nack = reject_ext_ind_send(conn, *rx,
   1b8ec:	1d29      	adds	r1, r5, #4
   1b8ee:	4620      	mov	r0, r4
}
   1b8f0:	b001      	add	sp, #4
   1b8f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				nack = reject_ext_ind_send(conn, *rx,
   1b8f6:	f7ff bd25 	b.w	1b344 <reject_ext_ind_send.isra.5>
		if (!conn->lll.role) {
   1b8fa:	f994 103d 	ldrsb.w	r1, [r4, #61]	; 0x3d
   1b8fe:	f894 20ed 	ldrb.w	r2, [r4, #237]	; 0xed
   1b902:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
   1b906:	2900      	cmp	r1, #0
   1b908:	f2c0 80b2 	blt.w	1ba70 <ull_conn_rx+0x4a0>
			if ((conn->llcp_conn_param.req !=
   1b90c:	429a      	cmp	r2, r3
   1b90e:	d009      	beq.n	1b924 <ull_conn_rx+0x354>
			    ((conn->llcp_conn_param.state ==
   1b910:	f894 30ee 	ldrb.w	r3, [r4, #238]	; 0xee
					conn->llcp_conn_param.ack) &&
   1b914:	f013 0307 	ands.w	r3, r3, #7
   1b918:	d002      	beq.n	1b920 <ull_conn_rx+0x350>
			      LLCP_CPR_STATE_REQ) ||
   1b91a:	3b04      	subs	r3, #4
   1b91c:	2b01      	cmp	r3, #1
   1b91e:	d801      	bhi.n	1b924 <ull_conn_rx+0x354>
				nack = reject_ext_ind_send(conn, *rx,
   1b920:	2323      	movs	r3, #35	; 0x23
   1b922:	e7e2      	b.n	1b8ea <ull_conn_rx+0x31a>
			} else if (((conn->llcp_req - conn->llcp_ack) &
   1b924:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
   1b928:	f894 108d 	ldrb.w	r1, [r4, #141]	; 0x8d
   1b92c:	1a5b      	subs	r3, r3, r1
   1b92e:	f003 0303 	and.w	r3, r3, #3
   1b932:	2b02      	cmp	r3, #2
   1b934:	d101      	bne.n	1b93a <ull_conn_rx+0x36a>
				nack = reject_ext_ind_send(conn, *rx,
   1b936:	232a      	movs	r3, #42	; 0x2a
   1b938:	e7d7      	b.n	1b8ea <ull_conn_rx+0x31a>
				uint16_t interval_min =
   1b93a:	f8b5 a020 	ldrh.w	sl, [r5, #32]
   1b93e:	fa1f f38a 	uxth.w	r3, sl
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   1b942:	2b05      	cmp	r3, #5
   1b944:	d924      	bls.n	1b990 <ull_conn_rx+0x3c0>
				uint16_t interval_max =
   1b946:	f8b5 9022 	ldrh.w	r9, [r5, #34]	; 0x22
   1b94a:	fa1f f189 	uxth.w	r1, r9
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   1b94e:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   1b952:	d81d      	bhi.n	1b990 <ull_conn_rx+0x3c0>
				    (interval_max > 3200) ||
   1b954:	428b      	cmp	r3, r1
   1b956:	d81b      	bhi.n	1b990 <ull_conn_rx+0x3c0>
				uint16_t latency =
   1b958:	f8b5 8024 	ldrh.w	r8, [r5, #36]	; 0x24
   1b95c:	fa1f f788 	uxth.w	r7, r8
				    (interval_min > interval_max) ||
   1b960:	f5b7 7ffa 	cmp.w	r7, #500	; 0x1f4
   1b964:	d214      	bcs.n	1b990 <ull_conn_rx+0x3c0>
				uint16_t timeout =
   1b966:	f8b5 e026 	ldrh.w	lr, [r5, #38]	; 0x26
   1b96a:	fa1f f38e 	uxth.w	r3, lr
				    (latency > 499) ||
   1b96e:	f1a3 0c0a 	sub.w	ip, r3, #10
   1b972:	fa1f fc8c 	uxth.w	ip, ip
   1b976:	f640 4b76 	movw	fp, #3190	; 0xc76
   1b97a:	45dc      	cmp	ip, fp
   1b97c:	d808      	bhi.n	1b990 <ull_conn_rx+0x3c0>
				     ((latency + 1) * interval_max)) ||
   1b97e:	fb07 1c01 	mla	ip, r7, r1, r1
				    (timeout > 3200) ||
   1b982:	ebbc 0f83 	cmp.w	ip, r3, lsl #2
   1b986:	d203      	bcs.n	1b990 <ull_conn_rx+0x3c0>
					cpr->preferred_periodicity;
   1b988:	f895 c028 	ldrb.w	ip, [r5, #40]	; 0x28
				     ((latency + 1) * interval_max)) ||
   1b98c:	4561      	cmp	r1, ip
   1b98e:	d207      	bcs.n	1b9a0 <ull_conn_rx+0x3d0>
				nack = reject_ext_ind_send(conn, *rx,
   1b990:	231e      	movs	r3, #30
   1b992:	e7aa      	b.n	1b8ea <ull_conn_rx+0x31a>
   1b994:	20003f94 	.word	0x20003f94
   1b998:	0001ff8e 	.word	0x0001ff8e
   1b99c:	20004018 	.word	0x20004018
				conn->llcp_conn_param.interval_min =
   1b9a0:	f8a4 a0f0 	strh.w	sl, [r4, #240]	; 0xf0
				conn->llcp_conn_param.interval_max =
   1b9a4:	f8a4 90f2 	strh.w	r9, [r4, #242]	; 0xf2
				conn->llcp_conn_param.latency =	latency;
   1b9a8:	f8a4 80f4 	strh.w	r8, [r4, #244]	; 0xf4
				conn->llcp_conn_param.timeout =	timeout;
   1b9ac:	f8a4 e0f6 	strh.w	lr, [r4, #246]	; 0xf6
				conn->llcp_conn_param.preferred_periodicity =
   1b9b0:	f884 c0f8 	strb.w	ip, [r4, #248]	; 0xf8
					sys_le16_to_cpu(cpr->reference_conn_event_count);
   1b9b4:	f895 e02a 	ldrb.w	lr, [r5, #42]	; 0x2a
   1b9b8:	f895 c029 	ldrb.w	ip, [r5, #41]	; 0x29
   1b9bc:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
   1b9c0:	f8a4 c0fa 	strh.w	ip, [r4, #250]	; 0xfa
					sys_le16_to_cpu(cpr->offset0);
   1b9c4:	f895 e02c 	ldrb.w	lr, [r5, #44]	; 0x2c
   1b9c8:	f895 c02b 	ldrb.w	ip, [r5, #43]	; 0x2b
   1b9cc:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
				conn->llcp_conn_param.offset0 =
   1b9d0:	f8a4 c0fc 	strh.w	ip, [r4, #252]	; 0xfc
					sys_le16_to_cpu(cpr->offset1);
   1b9d4:	f895 e02e 	ldrb.w	lr, [r5, #46]	; 0x2e
   1b9d8:	f895 c02d 	ldrb.w	ip, [r5, #45]	; 0x2d
   1b9dc:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
				conn->llcp_conn_param.offset1 =
   1b9e0:	f8a4 c0fe 	strh.w	ip, [r4, #254]	; 0xfe
					sys_le16_to_cpu(cpr->offset2);
   1b9e4:	f895 e030 	ldrb.w	lr, [r5, #48]	; 0x30
   1b9e8:	f895 c02f 	ldrb.w	ip, [r5, #47]	; 0x2f
   1b9ec:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
				conn->llcp_conn_param.offset2 =
   1b9f0:	f8a4 c100 	strh.w	ip, [r4, #256]	; 0x100
					sys_le16_to_cpu(cpr->offset3);
   1b9f4:	f895 e032 	ldrb.w	lr, [r5, #50]	; 0x32
   1b9f8:	f895 c031 	ldrb.w	ip, [r5, #49]	; 0x31
   1b9fc:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
				conn->llcp_conn_param.offset3 =
   1ba00:	f8a4 c102 	strh.w	ip, [r4, #258]	; 0x102
					sys_le16_to_cpu(cpr->offset4);
   1ba04:	f895 c033 	ldrb.w	ip, [r5, #51]	; 0x33
   1ba08:	f895 e034 	ldrb.w	lr, [r5, #52]	; 0x34
   1ba0c:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
				conn->llcp_conn_param.offset4 =
   1ba10:	f8a4 c104 	strh.w	ip, [r4, #260]	; 0x104
					sys_le16_to_cpu(cpr->offset5);
   1ba14:	f895 c035 	ldrb.w	ip, [r5, #53]	; 0x35
   1ba18:	f895 5036 	ldrb.w	r5, [r5, #54]	; 0x36
   1ba1c:	ea4c 2505 	orr.w	r5, ip, r5, lsl #8
				conn->llcp_conn_param.offset5 =
   1ba20:	f8a4 5106 	strh.w	r5, [r4, #262]	; 0x106
				     lll->interval) ||
   1ba24:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
				if ((conn->llcp_conn_param.interval_max !=
   1ba26:	42a9      	cmp	r1, r5
   1ba28:	d112      	bne.n	1ba50 <ull_conn_rx+0x480>
				     lll->interval) ||
   1ba2a:	8e21      	ldrh	r1, [r4, #48]	; 0x30
   1ba2c:	42b9      	cmp	r1, r7
   1ba2e:	d10f      	bne.n	1ba50 <ull_conn_rx+0x480>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   1ba30:	f240 41e2 	movw	r1, #1250	; 0x4e2
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   1ba34:	4369      	muls	r1, r5
   1ba36:	f242 7510 	movw	r5, #10000	; 0x2710
   1ba3a:	fb05 1303 	mla	r3, r5, r3, r1
   1ba3e:	3b01      	subs	r3, #1
   1ba40:	fbb3 f3f1 	udiv	r3, r3, r1
			    (conn->llcp_conn_param.latency != lll->latency) ||
   1ba44:	f8b4 1076 	ldrh.w	r1, [r4, #118]	; 0x76
   1ba48:	b29b      	uxth	r3, r3
   1ba4a:	4299      	cmp	r1, r3
   1ba4c:	f000 8095 	beq.w	1bb7a <ull_conn_rx+0x5aa>
				conn->llcp_conn_param.state =
   1ba50:	f894 30ee 	ldrb.w	r3, [r4, #238]	; 0xee
   1ba54:	2103      	movs	r1, #3
   1ba56:	f361 0302 	bfi	r3, r1, #0, #3
   1ba5a:	f884 30ee 	strb.w	r3, [r4, #238]	; 0xee
			conn->llcp_conn_param.ack--;
   1ba5e:	3a01      	subs	r2, #1
   1ba60:	f884 20ed 	strb.w	r2, [r4, #237]	; 0xed
			if (!conn_upd_curr) {
   1ba64:	2800      	cmp	r0, #0
   1ba66:	f47f ae0b 	bne.w	1b680 <ull_conn_rx+0xb0>
				conn_upd_curr = conn;
   1ba6a:	4bc5      	ldr	r3, [pc, #788]	; (1bd80 <ull_conn_rx+0x7b0>)
   1ba6c:	601c      	str	r4, [r3, #0]
   1ba6e:	e6ea      	b.n	1b846 <ull_conn_rx+0x276>
		} else if ((conn->llcp_conn_param.req ==
   1ba70:	429a      	cmp	r2, r3
   1ba72:	d004      	beq.n	1ba7e <ull_conn_rx+0x4ae>
			    conn->llcp_conn_param.ack) ||
   1ba74:	f894 30ee 	ldrb.w	r3, [r4, #238]	; 0xee
   1ba78:	0799      	lsls	r1, r3, #30
   1ba7a:	f040 808a 	bne.w	1bb92 <ull_conn_rx+0x5c2>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   1ba7e:	f8b5 a020 	ldrh.w	sl, [r5, #32]
   1ba82:	fa1f f38a 	uxth.w	r3, sl
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   1ba86:	2b05      	cmp	r3, #5
   1ba88:	d982      	bls.n	1b990 <ull_conn_rx+0x3c0>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   1ba8a:	f8b5 9022 	ldrh.w	r9, [r5, #34]	; 0x22
   1ba8e:	fa1f f189 	uxth.w	r1, r9
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   1ba92:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   1ba96:	f63f af7b 	bhi.w	1b990 <ull_conn_rx+0x3c0>
			    (interval_max > 3200) ||
   1ba9a:	428b      	cmp	r3, r1
   1ba9c:	f63f af78 	bhi.w	1b990 <ull_conn_rx+0x3c0>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   1baa0:	f8b5 8024 	ldrh.w	r8, [r5, #36]	; 0x24
   1baa4:	fa1f f788 	uxth.w	r7, r8
			    (interval_min > interval_max) ||
   1baa8:	f5b7 7ffa 	cmp.w	r7, #500	; 0x1f4
   1baac:	f4bf af70 	bcs.w	1b990 <ull_conn_rx+0x3c0>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   1bab0:	f8b5 e026 	ldrh.w	lr, [r5, #38]	; 0x26
   1bab4:	fa1f f38e 	uxth.w	r3, lr
			    (latency > 499) ||
   1bab8:	f1a3 0c0a 	sub.w	ip, r3, #10
   1babc:	fa1f fc8c 	uxth.w	ip, ip
   1bac0:	f640 4b76 	movw	fp, #3190	; 0xc76
   1bac4:	45dc      	cmp	ip, fp
   1bac6:	f63f af63 	bhi.w	1b990 <ull_conn_rx+0x3c0>
			     ((latency + 1) * interval_max)) ||
   1baca:	fb07 1c01 	mla	ip, r7, r1, r1
			    (timeout < 10) || (timeout > 3200) ||
   1bace:	ebbc 0f83 	cmp.w	ip, r3, lsl #2
   1bad2:	f4bf af5d 	bcs.w	1b990 <ull_conn_rx+0x3c0>
				cpr->preferred_periodicity;
   1bad6:	f895 c028 	ldrb.w	ip, [r5, #40]	; 0x28
			     ((latency + 1) * interval_max)) ||
   1bada:	4561      	cmp	r1, ip
   1badc:	f4ff af58 	bcc.w	1b990 <ull_conn_rx+0x3c0>
			conn->llcp_conn_param.interval_min = interval_min;
   1bae0:	f8a4 a0f0 	strh.w	sl, [r4, #240]	; 0xf0
			conn->llcp_conn_param.interval_max = interval_max;
   1bae4:	f8a4 90f2 	strh.w	r9, [r4, #242]	; 0xf2
			conn->llcp_conn_param.latency =	latency;
   1bae8:	f8a4 80f4 	strh.w	r8, [r4, #244]	; 0xf4
			conn->llcp_conn_param.timeout =	timeout;
   1baec:	f8a4 e0f6 	strh.w	lr, [r4, #246]	; 0xf6
			conn->llcp_conn_param.preferred_periodicity =
   1baf0:	f884 c0f8 	strb.w	ip, [r4, #248]	; 0xf8
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   1baf4:	f895 e02a 	ldrb.w	lr, [r5, #42]	; 0x2a
   1baf8:	f895 c029 	ldrb.w	ip, [r5, #41]	; 0x29
   1bafc:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   1bb00:	f8a4 c0fa 	strh.w	ip, [r4, #250]	; 0xfa
				sys_le16_to_cpu(cpr->offset0);
   1bb04:	f895 e02c 	ldrb.w	lr, [r5, #44]	; 0x2c
   1bb08:	f895 c02b 	ldrb.w	ip, [r5, #43]	; 0x2b
   1bb0c:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
			conn->llcp_conn_param.offset0 =
   1bb10:	f8a4 c0fc 	strh.w	ip, [r4, #252]	; 0xfc
				sys_le16_to_cpu(cpr->offset1);
   1bb14:	f895 e02e 	ldrb.w	lr, [r5, #46]	; 0x2e
   1bb18:	f895 c02d 	ldrb.w	ip, [r5, #45]	; 0x2d
   1bb1c:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
			conn->llcp_conn_param.offset1 =
   1bb20:	f8a4 c0fe 	strh.w	ip, [r4, #254]	; 0xfe
				sys_le16_to_cpu(cpr->offset2);
   1bb24:	f895 e030 	ldrb.w	lr, [r5, #48]	; 0x30
   1bb28:	f895 c02f 	ldrb.w	ip, [r5, #47]	; 0x2f
   1bb2c:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
			conn->llcp_conn_param.offset2 =
   1bb30:	f8a4 c100 	strh.w	ip, [r4, #256]	; 0x100
				sys_le16_to_cpu(cpr->offset3);
   1bb34:	f895 e032 	ldrb.w	lr, [r5, #50]	; 0x32
   1bb38:	f895 c031 	ldrb.w	ip, [r5, #49]	; 0x31
   1bb3c:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
			conn->llcp_conn_param.offset3 =
   1bb40:	f8a4 c102 	strh.w	ip, [r4, #258]	; 0x102
				sys_le16_to_cpu(cpr->offset4);
   1bb44:	f895 c033 	ldrb.w	ip, [r5, #51]	; 0x33
   1bb48:	f895 e034 	ldrb.w	lr, [r5, #52]	; 0x34
   1bb4c:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
			conn->llcp_conn_param.offset4 =
   1bb50:	f8a4 c104 	strh.w	ip, [r4, #260]	; 0x104
				sys_le16_to_cpu(cpr->offset5);
   1bb54:	f895 c035 	ldrb.w	ip, [r5, #53]	; 0x35
   1bb58:	f895 5036 	ldrb.w	r5, [r5, #54]	; 0x36
   1bb5c:	ea4c 2505 	orr.w	r5, ip, r5, lsl #8
			conn->llcp_conn_param.offset5 =
   1bb60:	f8a4 5106 	strh.w	r5, [r4, #262]	; 0x106
			     lll->interval) ||
   1bb64:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
			if ((conn->llcp_conn_param.interval_max !=
   1bb66:	42a9      	cmp	r1, r5
   1bb68:	f47f af72 	bne.w	1ba50 <ull_conn_rx+0x480>
			     lll->interval) ||
   1bb6c:	8e25      	ldrh	r5, [r4, #48]	; 0x30
   1bb6e:	42bd      	cmp	r5, r7
   1bb70:	f47f af6e 	bne.w	1ba50 <ull_conn_rx+0x480>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   1bb74:	f240 45e2 	movw	r5, #1250	; 0x4e2
   1bb78:	e75c      	b.n	1ba34 <ull_conn_rx+0x464>
				conn->llcp_conn_param.state =
   1bb7a:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
   1bb7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   1bb82:	f043 0301 	orr.w	r3, r3, #1
   1bb86:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1bb8a:	6833      	ldr	r3, [r6, #0]
   1bb8c:	2101      	movs	r1, #1
   1bb8e:	7119      	strb	r1, [r3, #4]
   1bb90:	e765      	b.n	1ba5e <ull_conn_rx+0x48e>
			LL_ASSERT(0);
   1bb92:	f241 7205 	movw	r2, #5893	; 0x1705
   1bb96:	497b      	ldr	r1, [pc, #492]	; (1bd84 <ull_conn_rx+0x7b4>)
   1bb98:	487b      	ldr	r0, [pc, #492]	; (1bd88 <ull_conn_rx+0x7b8>)
   1bb9a:	f00b f9e8 	bl	26f6e <printk>
   1bb9e:	4040      	eors	r0, r0
   1bba0:	f380 8811 	msr	BASEPRI, r0
   1bba4:	f04f 0003 	mov.w	r0, #3
   1bba8:	df02      	svc	2
   1bbaa:	e569      	b.n	1b680 <ull_conn_rx+0xb0>
		if (conn->lll.role ||
   1bbac:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   1bbb0:	2b00      	cmp	r3, #0
   1bbb2:	f2c0 8177 	blt.w	1bea4 <ull_conn_rx+0x8d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP,
   1bbb6:	7f69      	ldrb	r1, [r5, #29]
   1bbb8:	2010      	movs	r0, #16
   1bbba:	f7ff faaf 	bl	1b11c <pdu_len_cmp>
		if (conn->lll.role ||
   1bbbe:	2800      	cmp	r0, #0
   1bbc0:	f000 8170 	beq.w	1bea4 <ull_conn_rx+0x8d4>
		if (!conn->lll.role &&
   1bbc4:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
   1bbc8:	f894 30ed 	ldrb.w	r3, [r4, #237]	; 0xed
   1bbcc:	429a      	cmp	r2, r3
   1bbce:	d07b      	beq.n	1bcc8 <ull_conn_rx+0x6f8>
		    (conn->llcp_conn_param.state ==
   1bbd0:	f894 30ee 	ldrb.w	r3, [r4, #238]	; 0xee
		     conn->llcp_conn_param.ack) &&
   1bbd4:	f003 0307 	and.w	r3, r3, #7
   1bbd8:	2b04      	cmp	r3, #4
   1bbda:	d175      	bne.n	1bcc8 <ull_conn_rx+0x6f8>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   1bbdc:	f8b5 e020 	ldrh.w	lr, [r5, #32]
   1bbe0:	fa1f f28e 	uxth.w	r2, lr
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   1bbe4:	2a05      	cmp	r2, #5
   1bbe6:	d920      	bls.n	1bc2a <ull_conn_rx+0x65a>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   1bbe8:	f8b5 c022 	ldrh.w	ip, [r5, #34]	; 0x22
   1bbec:	fa1f f38c 	uxth.w	r3, ip
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   1bbf0:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   1bbf4:	d819      	bhi.n	1bc2a <ull_conn_rx+0x65a>
			    (interval_max > 3200) ||
   1bbf6:	429a      	cmp	r2, r3
   1bbf8:	d817      	bhi.n	1bc2a <ull_conn_rx+0x65a>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   1bbfa:	8caf      	ldrh	r7, [r5, #36]	; 0x24
   1bbfc:	b2ba      	uxth	r2, r7
			    (interval_min > interval_max) ||
   1bbfe:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   1bc02:	d212      	bcs.n	1bc2a <ull_conn_rx+0x65a>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   1bc04:	8ce8      	ldrh	r0, [r5, #38]	; 0x26
   1bc06:	fa1f f880 	uxth.w	r8, r0
			    (latency > 499) ||
   1bc0a:	f1a8 010a 	sub.w	r1, r8, #10
   1bc0e:	b289      	uxth	r1, r1
   1bc10:	f640 4976 	movw	r9, #3190	; 0xc76
   1bc14:	4549      	cmp	r1, r9
   1bc16:	d808      	bhi.n	1bc2a <ull_conn_rx+0x65a>
			     ((latency + 1) * interval_max)) ||
   1bc18:	fb02 3203 	mla	r2, r2, r3, r3
			    (timeout < 10) || (timeout > 3200) ||
   1bc1c:	ebb2 0f88 	cmp.w	r2, r8, lsl #2
   1bc20:	d203      	bcs.n	1bc2a <ull_conn_rx+0x65a>
				cpr->preferred_periodicity;
   1bc22:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
			     ((latency + 1) * interval_max)) ||
   1bc26:	4293      	cmp	r3, r2
   1bc28:	d202      	bcs.n	1bc30 <ull_conn_rx+0x660>
				nack = reject_ext_ind_send(conn, *rx,
   1bc2a:	231e      	movs	r3, #30
   1bc2c:	2210      	movs	r2, #16
   1bc2e:	e65d      	b.n	1b8ec <ull_conn_rx+0x31c>
			conn->procedure_expire = 0U;
   1bc30:	2300      	movs	r3, #0
   1bc32:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
			conn->llcp_conn_param.interval_min = interval_min;
   1bc36:	f8a4 e0f0 	strh.w	lr, [r4, #240]	; 0xf0
			conn->llcp_conn_param.interval_max = interval_max;
   1bc3a:	f8a4 c0f2 	strh.w	ip, [r4, #242]	; 0xf2
			conn->llcp_conn_param.latency =	latency;
   1bc3e:	f8a4 70f4 	strh.w	r7, [r4, #244]	; 0xf4
			conn->llcp_conn_param.timeout =	timeout;
   1bc42:	f8a4 00f6 	strh.w	r0, [r4, #246]	; 0xf6
			conn->llcp_conn_param.preferred_periodicity =
   1bc46:	f884 20f8 	strb.w	r2, [r4, #248]	; 0xf8
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   1bc4a:	f895 202a 	ldrb.w	r2, [r5, #42]	; 0x2a
   1bc4e:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
   1bc52:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   1bc56:	f8a4 30fa 	strh.w	r3, [r4, #250]	; 0xfa
				sys_le16_to_cpu(cpr->offset0);
   1bc5a:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
   1bc5e:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
   1bc62:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.offset0 =
   1bc66:	f8a4 30fc 	strh.w	r3, [r4, #252]	; 0xfc
				sys_le16_to_cpu(cpr->offset1);
   1bc6a:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
   1bc6e:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
   1bc72:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.offset1 =
   1bc76:	f8a4 30fe 	strh.w	r3, [r4, #254]	; 0xfe
				sys_le16_to_cpu(cpr->offset2);
   1bc7a:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
   1bc7e:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   1bc82:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.offset2 =
   1bc86:	f8a4 3100 	strh.w	r3, [r4, #256]	; 0x100
				sys_le16_to_cpu(cpr->offset3);
   1bc8a:	f895 2032 	ldrb.w	r2, [r5, #50]	; 0x32
   1bc8e:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
   1bc92:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.offset3 =
   1bc96:	f8a4 3102 	strh.w	r3, [r4, #258]	; 0x102
				sys_le16_to_cpu(cpr->offset4);
   1bc9a:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
   1bc9e:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
   1bca2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.offset4 =
   1bca6:	f8a4 3104 	strh.w	r3, [r4, #260]	; 0x104
				sys_le16_to_cpu(cpr->offset5);
   1bcaa:	f895 2036 	ldrb.w	r2, [r5, #54]	; 0x36
   1bcae:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
   1bcb2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.offset5 =
   1bcb6:	f8a4 3106 	strh.w	r3, [r4, #262]	; 0x106
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   1bcba:	f894 30ee 	ldrb.w	r3, [r4, #238]	; 0xee
   1bcbe:	2201      	movs	r2, #1
   1bcc0:	f362 0302 	bfi	r3, r2, #0, #3
   1bcc4:	f884 30ee 	strb.w	r3, [r4, #238]	; 0xee
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1bcc8:	6833      	ldr	r3, [r6, #0]
   1bcca:	2201      	movs	r2, #1
   1bccc:	711a      	strb	r2, [r3, #4]
		break;
   1bcce:	e4d7      	b.n	1b680 <ull_conn_rx+0xb0>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
   1bcd0:	7f69      	ldrb	r1, [r5, #29]
   1bcd2:	2011      	movs	r0, #17
   1bcd4:	f7ff fa22 	bl	1b11c <pdu_len_cmp>
   1bcd8:	2800      	cmp	r0, #0
   1bcda:	f000 80e3 	beq.w	1bea4 <ull_conn_rx+0x8d4>
	switch (rej_ext_ind->reject_opcode) {
   1bcde:	f895 3020 	ldrb.w	r3, [r5, #32]
   1bce2:	2b0f      	cmp	r3, #15
   1bce4:	f47f ac7f 	bne.w	1b5e6 <ull_conn_rx+0x16>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   1bce8:	f894 20ed 	ldrb.w	r2, [r4, #237]	; 0xed
   1bcec:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
   1bcf0:	429a      	cmp	r2, r3
   1bcf2:	f43f ac78 	beq.w	1b5e6 <ull_conn_rx+0x16>
	if (!lll->role && (rej_ext_ind->error_code ==
   1bcf6:	f994 203d 	ldrsb.w	r2, [r4, #61]	; 0x3d
   1bcfa:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   1bcfe:	2a00      	cmp	r2, #0
   1bd00:	f2c0 80e9 	blt.w	1bed6 <ull_conn_rx+0x906>
   1bd04:	2b1a      	cmp	r3, #26
   1bd06:	f040 80ec 	bne.w	1bee2 <ull_conn_rx+0x912>
		LL_ASSERT(conn->llcp_cu.req == conn->llcp_cu.ack);
   1bd0a:	f894 20a0 	ldrb.w	r2, [r4, #160]	; 0xa0
   1bd0e:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
   1bd12:	429a      	cmp	r2, r3
   1bd14:	d00b      	beq.n	1bd2e <ull_conn_rx+0x75e>
   1bd16:	f241 02f5 	movw	r2, #4341	; 0x10f5
   1bd1a:	491a      	ldr	r1, [pc, #104]	; (1bd84 <ull_conn_rx+0x7b4>)
   1bd1c:	481a      	ldr	r0, [pc, #104]	; (1bd88 <ull_conn_rx+0x7b8>)
   1bd1e:	f00b f926 	bl	26f6e <printk>
   1bd22:	4040      	eors	r0, r0
   1bd24:	f380 8811 	msr	BASEPRI, r0
   1bd28:	f04f 0003 	mov.w	r0, #3
   1bd2c:	df02      	svc	2
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   1bd2e:	f894 20ee 	ldrb.w	r2, [r4, #238]	; 0xee
   1bd32:	2305      	movs	r3, #5
   1bd34:	f363 0202 	bfi	r2, r3, #0, #3
		conn->llcp_cu.win_offset_us = 0U;
   1bd38:	2300      	movs	r3, #0
   1bd3a:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   1bd3e:	f8b4 30f2 	ldrh.w	r3, [r4, #242]	; 0xf2
   1bd42:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   1bd46:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
   1bd4a:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   1bd4e:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
   1bd52:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1bd56:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   1bd5a:	f884 20ee 	strb.w	r2, [r4, #238]	; 0xee
		conn->llcp_cu.win_size = 1U;
   1bd5e:	2101      	movs	r1, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1bd60:	f361 0301 	bfi	r3, r1, #0, #2
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   1bd64:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   1bd68:	f362 0382 	bfi	r3, r2, #2, #1
   1bd6c:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
		conn->llcp_cu.ack--;
   1bd70:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
		conn->llcp_cu.win_size = 1U;
   1bd74:	f884 10b0 	strb.w	r1, [r4, #176]	; 0xb0
		conn->llcp_cu.ack--;
   1bd78:	3b01      	subs	r3, #1
   1bd7a:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
	if (err) {
   1bd7e:	e432      	b.n	1b5e6 <ull_conn_rx+0x16>
   1bd80:	20003f94 	.word	0x20003f94
   1bd84:	00034fd6 	.word	0x00034fd6
   1bd88:	0002fa94 	.word	0x0002fa94
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
   1bd8c:	7f69      	ldrb	r1, [r5, #29]
   1bd8e:	2007      	movs	r0, #7
   1bd90:	f7ff f9c4 	bl	1b11c <pdu_len_cmp>
   1bd94:	2800      	cmp	r0, #0
   1bd96:	f000 8085 	beq.w	1bea4 <ull_conn_rx+0x8d4>
		} else if ((conn->llcp_conn_param.ack !=
   1bd9a:	f894 20ed 	ldrb.w	r2, [r4, #237]	; 0xed
   1bd9e:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
   1bda2:	429a      	cmp	r2, r3
   1bda4:	f43f acbc 	beq.w	1b720 <ull_conn_rx+0x150>
			    conn->llcp_conn_param.req) &&
   1bda8:	f895 3020 	ldrb.w	r3, [r5, #32]
   1bdac:	2b0f      	cmp	r3, #15
   1bdae:	f47f acb7 	bne.w	1b720 <ull_conn_rx+0x150>
			conn->llcp_conn_param.disabled = 1U;
   1bdb2:	f894 30ee 	ldrb.w	r3, [r4, #238]	; 0xee
   1bdb6:	f043 0310 	orr.w	r3, r3, #16
   1bdba:	f884 30ee 	strb.w	r3, [r4, #238]	; 0xee
			if (!conn->lll.role) {
   1bdbe:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   1bdc2:	2b00      	cmp	r3, #0
   1bdc4:	db3c      	blt.n	1be40 <ull_conn_rx+0x870>
				LL_ASSERT(conn->llcp_cu.req ==
   1bdc6:	f894 20a0 	ldrb.w	r2, [r4, #160]	; 0xa0
   1bdca:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
   1bdce:	429a      	cmp	r2, r3
   1bdd0:	d00b      	beq.n	1bdea <ull_conn_rx+0x81a>
   1bdd2:	f241 728a 	movw	r2, #6026	; 0x178a
   1bdd6:	495f      	ldr	r1, [pc, #380]	; (1bf54 <ull_conn_rx+0x984>)
   1bdd8:	485f      	ldr	r0, [pc, #380]	; (1bf58 <ull_conn_rx+0x988>)
   1bdda:	f00b f8c8 	bl	26f6e <printk>
   1bdde:	4040      	eors	r0, r0
   1bde0:	f380 8811 	msr	BASEPRI, r0
   1bde4:	f04f 0003 	mov.w	r0, #3
   1bde8:	df02      	svc	2
				conn->llcp_conn_param.state =
   1bdea:	f894 20ee 	ldrb.w	r2, [r4, #238]	; 0xee
   1bdee:	2305      	movs	r3, #5
   1bdf0:	f363 0202 	bfi	r2, r3, #0, #3
				conn->llcp_cu.interval =
   1bdf4:	f8b4 30f2 	ldrh.w	r3, [r4, #242]	; 0xf2
   1bdf8:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
				conn->llcp_cu.latency =
   1bdfc:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
   1be00:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
				conn->llcp_cu.timeout =
   1be04:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
   1be08:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1be0c:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
				conn->llcp_conn_param.state =
   1be10:	f884 20ee 	strb.w	r2, [r4, #238]	; 0xee
				conn->llcp_cu.win_size = 1U;
   1be14:	2101      	movs	r1, #1
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1be16:	f361 0301 	bfi	r3, r1, #0, #2
				conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   1be1a:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   1be1e:	f362 0382 	bfi	r3, r2, #2, #1
   1be22:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
				conn->llcp_cu.ack--;
   1be26:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
				conn->llcp_cu.win_size = 1U;
   1be2a:	f884 10b0 	strb.w	r1, [r4, #176]	; 0xb0
				conn->llcp_cu.ack--;
   1be2e:	3b01      	subs	r3, #1
   1be30:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1be34:	6833      	ldr	r3, [r6, #0]
				conn->llcp_cu.win_offset_us = 0U;
   1be36:	2000      	movs	r0, #0
   1be38:	f8c4 00ac 	str.w	r0, [r4, #172]	; 0xac
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1be3c:	7119      	strb	r1, [r3, #4]
				break;
   1be3e:	e502      	b.n	1b846 <ull_conn_rx+0x276>
			LL_ASSERT(conn_upd_curr == conn);
   1be40:	4f46      	ldr	r7, [pc, #280]	; (1bf5c <ull_conn_rx+0x98c>)
   1be42:	683a      	ldr	r2, [r7, #0]
   1be44:	4294      	cmp	r4, r2
   1be46:	d00b      	beq.n	1be60 <ull_conn_rx+0x890>
   1be48:	f241 72a1 	movw	r2, #6049	; 0x17a1
   1be4c:	4941      	ldr	r1, [pc, #260]	; (1bf54 <ull_conn_rx+0x984>)
   1be4e:	4842      	ldr	r0, [pc, #264]	; (1bf58 <ull_conn_rx+0x988>)
   1be50:	f00b f88d 	bl	26f6e <printk>
   1be54:	4040      	eors	r0, r0
   1be56:	f380 8811 	msr	BASEPRI, r0
   1be5a:	f04f 0003 	mov.w	r0, #3
   1be5e:	df02      	svc	2
	conn_upd_curr = NULL;
   1be60:	2300      	movs	r3, #0
			if (!conn->llcp_conn_param.cmd) {
   1be62:	f894 00ee 	ldrb.w	r0, [r4, #238]	; 0xee
	conn_upd_curr = NULL;
   1be66:	603b      	str	r3, [r7, #0]
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   1be68:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
   1be6c:	f884 30ed 	strb.w	r3, [r4, #237]	; 0xed
			if (!conn->llcp_conn_param.cmd) {
   1be70:	f010 0008 	ands.w	r0, r0, #8
   1be74:	6833      	ldr	r3, [r6, #0]
   1be76:	d102      	bne.n	1be7e <ull_conn_rx+0x8ae>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1be78:	2201      	movs	r2, #1
   1be7a:	711a      	strb	r2, [r3, #4]
				break;
   1be7c:	e4e3      	b.n	1b846 <ull_conn_rx+0x276>
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   1be7e:	2215      	movs	r2, #21
   1be80:	711a      	strb	r2, [r3, #4]
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   1be82:	231a      	movs	r3, #26
   1be84:	772b      	strb	r3, [r5, #28]
			cu->latency = lll->latency;
   1be86:	8e22      	ldrh	r2, [r4, #48]	; 0x30
			cu->interval = lll->interval;
   1be88:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
			cu->latency = lll->latency;
   1be8a:	842a      	strh	r2, [r5, #32]
			cu->timeout = conn->supervision_reload *
   1be8c:	f8b4 2076 	ldrh.w	r2, [r4, #118]	; 0x76
			cu->interval = lll->interval;
   1be90:	83eb      	strh	r3, [r5, #30]
			cu->timeout = conn->supervision_reload *
   1be92:	435a      	muls	r2, r3
				      lll->interval * 125U / 1000;
   1be94:	237d      	movs	r3, #125	; 0x7d
   1be96:	4353      	muls	r3, r2
   1be98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1be9c:	fbb3 f3f2 	udiv	r3, r3, r2
			cu->timeout = conn->supervision_reload *
   1bea0:	846b      	strh	r3, [r5, #34]	; 0x22
   1bea2:	e43d      	b.n	1b720 <ull_conn_rx+0x150>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1bea4:	482e      	ldr	r0, [pc, #184]	; (1bf60 <ull_conn_rx+0x990>)
   1bea6:	f00f fc04 	bl	2b6b2 <mem_acquire>
	if (!tx) {
   1beaa:	4601      	mov	r1, r0
   1beac:	2800      	cmp	r0, #0
   1beae:	f43f acc8 	beq.w	1b842 <ull_conn_rx+0x272>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1beb2:	7903      	ldrb	r3, [r0, #4]
	pdu->llctrl.unknown_rsp.type = type;
   1beb4:	f880 8008 	strb.w	r8, [r0, #8]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1beb8:	f043 0303 	orr.w	r3, r3, #3
   1bebc:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
   1bebe:	2302      	movs	r3, #2
   1bec0:	7143      	strb	r3, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   1bec2:	2307      	movs	r3, #7
   1bec4:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, tx);
   1bec6:	4620      	mov	r0, r4
   1bec8:	f010 f850 	bl	2bf6c <ctrl_tx_enqueue>
   1becc:	f7ff bb8b 	b.w	1b5e6 <ull_conn_rx+0x16>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1bed0:	2301      	movs	r3, #1
   1bed2:	712b      	strb	r3, [r5, #4]
		break;
   1bed4:	e4b7      	b.n	1b846 <ull_conn_rx+0x276>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   1bed6:	2b23      	cmp	r3, #35	; 0x23
   1bed8:	d003      	beq.n	1bee2 <ull_conn_rx+0x912>
			conn->slave.ticks_to_offset =
   1beda:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   1bede:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   1bee2:	f894 30ee 	ldrb.w	r3, [r4, #238]	; 0xee
   1bee6:	f003 0307 	and.w	r3, r3, #7
   1beea:	2b04      	cmp	r3, #4
   1beec:	d117      	bne.n	1bf1e <ull_conn_rx+0x94e>
		LL_ASSERT(conn_upd_curr == conn);
   1beee:	4e1b      	ldr	r6, [pc, #108]	; (1bf5c <ull_conn_rx+0x98c>)
   1bef0:	6832      	ldr	r2, [r6, #0]
   1bef2:	4294      	cmp	r4, r2
   1bef4:	d00b      	beq.n	1bf0e <ull_conn_rx+0x93e>
   1bef6:	f241 1210 	movw	r2, #4368	; 0x1110
   1befa:	4916      	ldr	r1, [pc, #88]	; (1bf54 <ull_conn_rx+0x984>)
   1befc:	4816      	ldr	r0, [pc, #88]	; (1bf58 <ull_conn_rx+0x988>)
   1befe:	f00b f836 	bl	26f6e <printk>
   1bf02:	4040      	eors	r0, r0
   1bf04:	f380 8811 	msr	BASEPRI, r0
   1bf08:	f04f 0003 	mov.w	r0, #3
   1bf0c:	df02      	svc	2
	conn_upd_curr = NULL;
   1bf0e:	2300      	movs	r3, #0
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   1bf10:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
	conn_upd_curr = NULL;
   1bf14:	6033      	str	r3, [r6, #0]
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   1bf16:	f884 20ed 	strb.w	r2, [r4, #237]	; 0xed
		conn->procedure_expire = 0U;
   1bf1a:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
	if (!conn->llcp_conn_param.cmd) {
   1bf1e:	f894 30ee 	ldrb.w	r3, [r4, #238]	; 0xee
   1bf22:	071b      	lsls	r3, r3, #28
   1bf24:	f57f ab5f 	bpl.w	1b5e6 <ull_conn_rx+0x16>
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   1bf28:	2315      	movs	r3, #21
   1bf2a:	712b      	strb	r3, [r5, #4]
	cu->status = rej_ext_ind->error_code;
   1bf2c:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   1bf30:	772b      	strb	r3, [r5, #28]
	cu->latency = lll->latency;
   1bf32:	8e22      	ldrh	r2, [r4, #48]	; 0x30
	cu->interval = lll->interval;
   1bf34:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
	cu->latency = lll->latency;
   1bf36:	842a      	strh	r2, [r5, #32]
	cu->timeout = conn->supervision_reload *
   1bf38:	f8b4 2076 	ldrh.w	r2, [r4, #118]	; 0x76
	cu->interval = lll->interval;
   1bf3c:	83eb      	strh	r3, [r5, #30]
	cu->timeout = conn->supervision_reload *
   1bf3e:	435a      	muls	r2, r3
		      lll->interval * 125U / 1000;
   1bf40:	237d      	movs	r3, #125	; 0x7d
   1bf42:	4353      	muls	r3, r2
   1bf44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1bf48:	fbb3 f3f2 	udiv	r3, r3, r2
	cu->timeout = conn->supervision_reload *
   1bf4c:	846b      	strh	r3, [r5, #34]	; 0x22
	if (err) {
   1bf4e:	f7ff bb97 	b.w	1b680 <ull_conn_rx+0xb0>
   1bf52:	bf00      	nop
   1bf54:	00034fd6 	.word	0x00034fd6
   1bf58:	0002fa94 	.word	0x0002fa94
   1bf5c:	20003f94 	.word	0x20003f94
   1bf60:	20004018 	.word	0x20004018

0001bf64 <ull_conn_tx_demux>:
{
   1bf64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   1bf68:	4e20      	ldr	r6, [pc, #128]	; (1bfec <ull_conn_tx_demux+0x88>)
{
   1bf6a:	4604      	mov	r4, r0
   1bf6c:	4637      	mov	r7, r6
	return (void *)(fifo + first * size);
   1bf6e:	1d35      	adds	r5, r6, #4
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   1bf70:	78b3      	ldrb	r3, [r6, #2]
	if (first == last) {
   1bf72:	78f1      	ldrb	r1, [r6, #3]
   1bf74:	7832      	ldrb	r2, [r6, #0]
   1bf76:	4299      	cmp	r1, r3
   1bf78:	d02d      	beq.n	1bfd6 <ull_conn_tx_demux+0x72>
	return (void *)(fifo + first * size);
   1bf7a:	fb13 f302 	smulbb	r3, r3, r2
		if (!lll_tx) {
   1bf7e:	eb15 0803 	adds.w	r8, r5, r3
   1bf82:	d028      	beq.n	1bfd6 <ull_conn_tx_demux+0x72>
		conn = ll_connected_get(lll_tx->handle);
   1bf84:	5ae8      	ldrh	r0, [r5, r3]
   1bf86:	f010 f816 	bl	2bfb6 <ll_connected_get>
		if (conn) {
   1bf8a:	f8d8 1004 	ldr.w	r1, [r8, #4]
   1bf8e:	b320      	cbz	r0, 1bfda <ull_conn_tx_demux+0x76>
			tx->next = NULL;
   1bf90:	2300      	movs	r3, #0
   1bf92:	600b      	str	r3, [r1, #0]
			if (!conn->tx_data) {
   1bf94:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
   1bf98:	b943      	cbnz	r3, 1bfac <ull_conn_tx_demux+0x48>
				if (!conn->tx_head) {
   1bf9a:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
				conn->tx_data = tx;
   1bf9e:	f8c0 1120 	str.w	r1, [r0, #288]	; 0x120
				if (!conn->tx_head) {
   1bfa2:	b91b      	cbnz	r3, 1bfac <ull_conn_tx_demux+0x48>
					conn->tx_head = tx;
   1bfa4:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
					conn->tx_data_last = NULL;
   1bfa8:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
			if (conn->tx_data_last) {
   1bfac:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
   1bfb0:	b103      	cbz	r3, 1bfb4 <ull_conn_tx_demux+0x50>
				conn->tx_data_last->next = tx;
   1bfb2:	6019      	str	r1, [r3, #0]
			conn->tx_data_last = tx;
   1bfb4:	f8c0 1124 	str.w	r1, [r0, #292]	; 0x124
	uint8_t _first = *first; /* Copy read-index */
   1bfb8:	78bb      	ldrb	r3, [r7, #2]
	if (_first == last) {
   1bfba:	78f9      	ldrb	r1, [r7, #3]
		MFIFO_DEQUEUE(conn_tx);
   1bfbc:	787a      	ldrb	r2, [r7, #1]
   1bfbe:	4299      	cmp	r1, r3
   1bfc0:	d005      	beq.n	1bfce <ull_conn_tx_demux+0x6a>
	_first += 1U;
   1bfc2:	3301      	adds	r3, #1
   1bfc4:	b2db      	uxtb	r3, r3
		_first = 0U;
   1bfc6:	429a      	cmp	r2, r3
   1bfc8:	bf08      	it	eq
   1bfca:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   1bfcc:	70bb      	strb	r3, [r7, #2]
	} while (--count);
   1bfce:	3c01      	subs	r4, #1
   1bfd0:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   1bfd4:	d1cc      	bne.n	1bf70 <ull_conn_tx_demux+0xc>
}
   1bfd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			p->ll_id = PDU_DATA_LLID_RESV;
   1bfda:	790b      	ldrb	r3, [r1, #4]
   1bfdc:	f360 0301 	bfi	r3, r0, #0, #2
   1bfe0:	710b      	strb	r3, [r1, #4]
			ll_tx_ack_put(0xFFFF, tx);
   1bfe2:	f64f 70ff 	movw	r0, #65535	; 0xffff
   1bfe6:	f7fe f9e5 	bl	1a3b4 <ll_tx_ack_put>
   1bfea:	e7e5      	b.n	1bfb8 <ull_conn_tx_demux+0x54>
   1bfec:	20000d30 	.word	0x20000d30

0001bff0 <conn_cleanup>:
	if (conn == conn_upd_curr) {
   1bff0:	4b32      	ldr	r3, [pc, #200]	; (1c0bc <conn_cleanup+0xcc>)
   1bff2:	681a      	ldr	r2, [r3, #0]
   1bff4:	4282      	cmp	r2, r0
	conn_upd_curr = NULL;
   1bff6:	bf08      	it	eq
   1bff8:	2200      	moveq	r2, #0
{
   1bffa:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	conn_upd_curr = NULL;
   1bffe:	bf08      	it	eq
   1c000:	601a      	streq	r2, [r3, #0]
	rx->hdr.handle = conn->lll.handle;
   1c002:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   1c004:	f8a0 30d2 	strh.w	r3, [r0, #210]	; 0xd2
	*((uint8_t *)rx->pdu) = reason;
   1c008:	f880 10e8 	strb.w	r1, [r0, #232]	; 0xe8
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   1c00c:	2314      	movs	r3, #20
	rx = conn->llcp_rx;
   1c00e:	f8d0 109c 	ldr.w	r1, [r0, #156]	; 0x9c
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   1c012:	f880 30d0 	strb.w	r3, [r0, #208]	; 0xd0
{
   1c016:	4604      	mov	r4, r0
	struct lll_conn *lll = &conn->lll;
   1c018:	f100 061c 	add.w	r6, r0, #28
		hdr->type = NODE_RX_TYPE_RELEASE;
   1c01c:	2501      	movs	r5, #1
	while (rx) {
   1c01e:	bb41      	cbnz	r1, 1c072 <conn_cleanup+0x82>
		link = mem_acquire(&mem_link_tx.free);
   1c020:	4f27      	ldr	r7, [pc, #156]	; (1c0c0 <conn_cleanup+0xd0>)
		LL_ASSERT(link);
   1c022:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 1c0c8 <conn_cleanup+0xd8>
   1c026:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 1c0cc <conn_cleanup+0xdc>
	while (conn->tx_head) {
   1c02a:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   1c02e:	bb38      	cbnz	r0, 1c080 <conn_cleanup+0x90>
				    TICKER_ID_CONN_BASE + lll->handle,
   1c030:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1c034:	4b23      	ldr	r3, [pc, #140]	; (1c0c4 <conn_cleanup+0xd4>)
   1c036:	9600      	str	r6, [sp, #0]
				    TICKER_ID_CONN_BASE + lll->handle,
   1c038:	3205      	adds	r2, #5
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1c03a:	b2d2      	uxtb	r2, r2
   1c03c:	2101      	movs	r1, #1
   1c03e:	f7fc fdd7 	bl	18bf0 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1c042:	f030 0302 	bics.w	r3, r0, #2
   1c046:	d00b      	beq.n	1c060 <conn_cleanup+0x70>
   1c048:	f240 62f1 	movw	r2, #1777	; 0x6f1
   1c04c:	491e      	ldr	r1, [pc, #120]	; (1c0c8 <conn_cleanup+0xd8>)
   1c04e:	481f      	ldr	r0, [pc, #124]	; (1c0cc <conn_cleanup+0xdc>)
   1c050:	f00a ff8d 	bl	26f6e <printk>
   1c054:	4040      	eors	r0, r0
   1c056:	f380 8811 	msr	BASEPRI, r0
   1c05a:	f04f 0003 	mov.w	r0, #3
   1c05e:	df02      	svc	2
	lll->handle = 0xFFFF;
   1c060:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ull_conn_tx_demux(UINT8_MAX);
   1c064:	20ff      	movs	r0, #255	; 0xff
	lll->handle = 0xFFFF;
   1c066:	85a3      	strh	r3, [r4, #44]	; 0x2c
}
   1c068:	b002      	add	sp, #8
   1c06a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ull_conn_tx_demux(UINT8_MAX);
   1c06e:	f7ff bf79 	b.w	1bf64 <ull_conn_tx_demux>
		rx = hdr->link->mem;
   1c072:	6808      	ldr	r0, [r1, #0]
   1c074:	6847      	ldr	r7, [r0, #4]
		hdr->type = NODE_RX_TYPE_RELEASE;
   1c076:	710d      	strb	r5, [r1, #4]
		ll_rx_put(hdr->link, hdr);
   1c078:	f7fe f95e 	bl	1a338 <ll_rx_put>
		rx = hdr->link->mem;
   1c07c:	4639      	mov	r1, r7
   1c07e:	e7ce      	b.n	1c01e <conn_cleanup+0x2e>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   1c080:	4601      	mov	r1, r0
   1c082:	4620      	mov	r0, r4
   1c084:	f00f ff31 	bl	2beea <tx_ull_dequeue>
   1c088:	4682      	mov	sl, r0
		link = mem_acquire(&mem_link_tx.free);
   1c08a:	4638      	mov	r0, r7
   1c08c:	f00f fb11 	bl	2b6b2 <mem_acquire>
		LL_ASSERT(link);
   1c090:	4605      	mov	r5, r0
   1c092:	b958      	cbnz	r0, 1c0ac <conn_cleanup+0xbc>
   1c094:	f240 7231 	movw	r2, #1841	; 0x731
   1c098:	4641      	mov	r1, r8
   1c09a:	4648      	mov	r0, r9
   1c09c:	f00a ff67 	bl	26f6e <printk>
   1c0a0:	4040      	eors	r0, r0
   1c0a2:	f380 8811 	msr	BASEPRI, r0
   1c0a6:	f04f 0003 	mov.w	r0, #3
   1c0aa:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   1c0ac:	f104 0260 	add.w	r2, r4, #96	; 0x60
   1c0b0:	4651      	mov	r1, sl
   1c0b2:	4628      	mov	r0, r5
   1c0b4:	f00f fb4f 	bl	2b756 <memq_enqueue>
   1c0b8:	e7b7      	b.n	1c02a <conn_cleanup+0x3a>
   1c0ba:	bf00      	nop
   1c0bc:	20003f94 	.word	0x20003f94
   1c0c0:	2000419c 	.word	0x2000419c
   1c0c4:	0001b1a5 	.word	0x0001b1a5
   1c0c8:	00034fd6 	.word	0x00034fd6
   1c0cc:	0002fa94 	.word	0x0002fa94

0001c0d0 <ull_conn_done>:
{
   1c0d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct lll_conn *lll = (void *)HDR_ULL2LLL(done->param);
   1c0d4:	69c5      	ldr	r5, [r0, #28]
	if (unlikely(lll->handle == 0xFFFF)) {
   1c0d6:	8baa      	ldrh	r2, [r5, #28]
	struct ll_conn *conn = (void *)HDR_LLL2EVT(lll);
   1c0d8:	68ec      	ldr	r4, [r5, #12]
	if (unlikely(lll->handle == 0xFFFF)) {
   1c0da:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1c0de:	429a      	cmp	r2, r3
{
   1c0e0:	b08b      	sub	sp, #44	; 0x2c
   1c0e2:	4681      	mov	r9, r0
	if (unlikely(lll->handle == 0xFFFF)) {
   1c0e4:	d006      	beq.n	1c0f4 <ull_conn_done+0x24>
	reason_peer = conn->llcp_terminate.reason_peer;
   1c0e6:	f894 60cb 	ldrb.w	r6, [r4, #203]	; 0xcb
	if (reason_peer && (
   1c0ea:	b136      	cbz	r6, 1c0fa <ull_conn_done+0x2a>
		conn_cleanup(conn, reason_peer);
   1c0ec:	4631      	mov	r1, r6
			conn_cleanup(conn, BT_HCI_ERR_CONN_FAIL_TO_ESTAB);
   1c0ee:	4620      	mov	r0, r4
   1c0f0:	f7ff ff7e 	bl	1bff0 <conn_cleanup>
}
   1c0f4:	b00b      	add	sp, #44	; 0x2c
   1c0f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	latency_event = lll->latency_event;
   1c0fa:	f8b5 8024 	ldrh.w	r8, [r5, #36]	; 0x24
	if (done->extra.trx_cnt) {
   1c0fe:	8c83      	ldrh	r3, [r0, #36]	; 0x24
	elapsed_event = latency_event + 1;
   1c100:	f108 0701 	add.w	r7, r8, #1
   1c104:	b2bf      	uxth	r7, r7
	ticks_drift_minus = 0U;
   1c106:	e9cd 6608 	strd	r6, r6, [sp, #32]
	if (done->extra.trx_cnt) {
   1c10a:	b17b      	cbz	r3, 1c12c <ull_conn_done+0x5c>
		} else if (lll->role) {
   1c10c:	f995 302d 	ldrsb.w	r3, [r5, #45]	; 0x2d
   1c110:	2b00      	cmp	r3, #0
   1c112:	da08      	bge.n	1c126 <ull_conn_done+0x56>
			ull_drift_ticks_get(done, &ticks_drift_plus,
   1c114:	aa08      	add	r2, sp, #32
   1c116:	a909      	add	r1, sp, #36	; 0x24
   1c118:	f7e5 feea 	bl	1ef0 <ull_drift_ticks_get>
			if (!conn->tx_head) {
   1c11c:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   1c120:	b15b      	cbz	r3, 1c13a <ull_conn_done+0x6a>
				lll->latency_event = 0;
   1c122:	2300      	movs	r3, #0
				lll->latency_event = lll->latency;
   1c124:	84ab      	strh	r3, [r5, #36]	; 0x24
		conn->connect_expire = 0U;
   1c126:	2300      	movs	r3, #0
   1c128:	f8a4 3074 	strh.w	r3, [r4, #116]	; 0x74
	if (done->extra.crc_valid) {
   1c12c:	f899 3026 	ldrb.w	r3, [r9, #38]	; 0x26
   1c130:	b1bb      	cbz	r3, 1c162 <ull_conn_done+0x92>
		conn->supervision_expire = 0U;
   1c132:	2300      	movs	r3, #0
			conn->supervision_expire = conn->supervision_reload;
   1c134:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
   1c138:	e01c      	b.n	1c174 <ull_conn_done+0xa4>
				ull_conn_tx_demux(UINT8_MAX);
   1c13a:	20ff      	movs	r0, #255	; 0xff
   1c13c:	f7ff ff12 	bl	1bf64 <ull_conn_tx_demux>
			if (conn->tx_head || memq_peek(lll->memq_tx.head,
   1c140:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   1c144:	2b00      	cmp	r3, #0
   1c146:	d1ec      	bne.n	1c122 <ull_conn_done+0x52>
   1c148:	4632      	mov	r2, r6
   1c14a:	e9d5 0113 	ldrd	r0, r1, [r5, #76]	; 0x4c
   1c14e:	f00f fb09 	bl	2b764 <memq_peek>
   1c152:	2800      	cmp	r0, #0
   1c154:	d1e5      	bne.n	1c122 <ull_conn_done+0x52>
			} else if (lll->slave.latency_enabled) {
   1c156:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   1c15a:	07db      	lsls	r3, r3, #31
   1c15c:	d5e3      	bpl.n	1c126 <ull_conn_done+0x56>
				lll->latency_event = lll->latency;
   1c15e:	8c2b      	ldrh	r3, [r5, #32]
   1c160:	e7e0      	b.n	1c124 <ull_conn_done+0x54>
	else if (conn->connect_expire) {
   1c162:	f8b4 3074 	ldrh.w	r3, [r4, #116]	; 0x74
   1c166:	2b00      	cmp	r3, #0
   1c168:	d07a      	beq.n	1c260 <ull_conn_done+0x190>
		if (conn->connect_expire > elapsed_event) {
   1c16a:	42bb      	cmp	r3, r7
   1c16c:	d976      	bls.n	1c25c <ull_conn_done+0x18c>
			conn->connect_expire -= elapsed_event;
   1c16e:	1bdb      	subs	r3, r3, r7
   1c170:	f8a4 3074 	strh.w	r3, [r4, #116]	; 0x74
	if (conn->supervision_expire) {
   1c174:	f8b4 3078 	ldrh.w	r3, [r4, #120]	; 0x78
   1c178:	b1eb      	cbz	r3, 1c1b6 <ull_conn_done+0xe6>
		if (conn->supervision_expire > elapsed_event) {
   1c17a:	42bb      	cmp	r3, r7
   1c17c:	d977      	bls.n	1c26e <ull_conn_done+0x19e>
			conn->supervision_expire -= elapsed_event;
   1c17e:	1bdb      	subs	r3, r3, r7
   1c180:	b29b      	uxth	r3, r3
			lll->latency_event = 0U;
   1c182:	2200      	movs	r2, #0
			if (conn->supervision_expire <= 6U) {
   1c184:	2b06      	cmp	r3, #6
			conn->supervision_expire -= elapsed_event;
   1c186:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
			lll->latency_event = 0U;
   1c18a:	84aa      	strh	r2, [r5, #36]	; 0x24
			if (conn->supervision_expire <= 6U) {
   1c18c:	d971      	bls.n	1c272 <ull_conn_done+0x1a2>
			else if (lll->role) {
   1c18e:	f995 302d 	ldrsb.w	r3, [r5, #45]	; 0x2d
   1c192:	4293      	cmp	r3, r2
   1c194:	da0f      	bge.n	1c1b6 <ull_conn_done+0xe6>
				if (latency_event) {
   1c196:	f1b8 0f00 	cmp.w	r8, #0
   1c19a:	d16a      	bne.n	1c272 <ull_conn_done+0x1a2>
					force = conn->slave.force & 0x01;
   1c19c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
					conn->slave.force >>= 1U;
   1c1a0:	085a      	lsrs	r2, r3, #1
					if (force) {
   1c1a2:	f013 0301 	ands.w	r3, r3, #1
						conn->slave.force |= BIT(31);
   1c1a6:	bf17      	itett	ne
   1c1a8:	f042 4200 	orrne.w	r2, r2, #2147483648	; 0x80000000
					conn->slave.force >>= 1U;
   1c1ac:	f8c4 2084 	streq.w	r2, [r4, #132]	; 0x84
						conn->slave.force |= BIT(31);
   1c1b0:	f8c4 2084 	strne.w	r2, [r4, #132]	; 0x84
					force = conn->slave.force & 0x01;
   1c1b4:	461e      	movne	r6, r3
	if (conn->procedure_expire != 0U) {
   1c1b6:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
   1c1ba:	b123      	cbz	r3, 1c1c6 <ull_conn_done+0xf6>
		if (conn->procedure_expire > elapsed_event) {
   1c1bc:	42bb      	cmp	r3, r7
   1c1be:	d95a      	bls.n	1c276 <ull_conn_done+0x1a6>
			conn->procedure_expire -= elapsed_event;
   1c1c0:	1bdf      	subs	r7, r3, r7
   1c1c2:	f8a4 707c 	strh.w	r7, [r4, #124]	; 0x7c
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   1c1c6:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
   1c1ca:	f894 208d 	ldrb.w	r2, [r4, #141]	; 0x8d
   1c1ce:	1a9b      	subs	r3, r3, r2
   1c1d0:	f003 0303 	and.w	r3, r3, #3
   1c1d4:	2b02      	cmp	r3, #2
   1c1d6:	d104      	bne.n	1c1e2 <ull_conn_done+0x112>
	     ((conn->llcp_type == LLCP_CONN_UPD) ||
   1c1d8:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   1c1dc:	3b01      	subs	r3, #1
   1c1de:	2b01      	cmp	r3, #1
   1c1e0:	d905      	bls.n	1c1ee <ull_conn_done+0x11e>
	      (conn->llcp_type == LLCP_CHAN_MAP))) ||
   1c1e2:	f894 20a0 	ldrb.w	r2, [r4, #160]	; 0xa0
   1c1e6:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
   1c1ea:	429a      	cmp	r2, r3
   1c1ec:	d001      	beq.n	1c1f2 <ull_conn_done+0x122>
		lll->latency_event = 0U;
   1c1ee:	2300      	movs	r3, #0
   1c1f0:	84ab      	strh	r3, [r5, #36]	; 0x24
	if ((force) || (latency_event != lll->latency_event)) {
   1c1f2:	8ca9      	ldrh	r1, [r5, #36]	; 0x24
   1c1f4:	b90e      	cbnz	r6, 1c1fa <ull_conn_done+0x12a>
   1c1f6:	4541      	cmp	r1, r8
   1c1f8:	d03f      	beq.n	1c27a <ull_conn_done+0x1aa>
		lazy = lll->latency_event + 1U;
   1c1fa:	3101      	adds	r1, #1
   1c1fc:	b289      	uxth	r1, r1
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   1c1fe:	e9dd 7308 	ldrd	r7, r3, [sp, #32]
   1c202:	ea53 0207 	orrs.w	r2, r3, r7
   1c206:	d103      	bne.n	1c210 <ull_conn_done+0x140>
   1c208:	b911      	cbnz	r1, 1c210 <ull_conn_done+0x140>
   1c20a:	2e00      	cmp	r6, #0
   1c20c:	f43f af72 	beq.w	1c0f4 <ull_conn_done+0x24>
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   1c210:	7f2a      	ldrb	r2, [r5, #28]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1c212:	481b      	ldr	r0, [pc, #108]	; (1c280 <ull_conn_done+0x1b0>)
		struct ll_conn *conn = lll->hdr.parent;
   1c214:	68ec      	ldr	r4, [r5, #12]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1c216:	9406      	str	r4, [sp, #24]
   1c218:	e9cd 6004 	strd	r6, r0, [sp, #16]
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   1c21c:	3205      	adds	r2, #5
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1c21e:	2000      	movs	r0, #0
   1c220:	9103      	str	r1, [sp, #12]
   1c222:	e9cd 0001 	strd	r0, r0, [sp, #4]
   1c226:	9700      	str	r7, [sp, #0]
   1c228:	b2d2      	uxtb	r2, r2
   1c22a:	2101      	movs	r1, #1
   1c22c:	f00f fd01 	bl	2bc32 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1c230:	f030 0302 	bics.w	r3, r0, #2
   1c234:	f43f af5e 	beq.w	1c0f4 <ull_conn_done+0x24>
   1c238:	f7fe f93e 	bl	1a4b8 <ull_disable_mark_get>
   1c23c:	4284      	cmp	r4, r0
   1c23e:	f43f af59 	beq.w	1c0f4 <ull_conn_done+0x24>
   1c242:	f240 5241 	movw	r2, #1345	; 0x541
   1c246:	490f      	ldr	r1, [pc, #60]	; (1c284 <ull_conn_done+0x1b4>)
   1c248:	480f      	ldr	r0, [pc, #60]	; (1c288 <ull_conn_done+0x1b8>)
   1c24a:	f00a fe90 	bl	26f6e <printk>
   1c24e:	4040      	eors	r0, r0
   1c250:	f380 8811 	msr	BASEPRI, r0
   1c254:	f04f 0003 	mov.w	r0, #3
   1c258:	df02      	svc	2
   1c25a:	e74b      	b.n	1c0f4 <ull_conn_done+0x24>
			conn_cleanup(conn, BT_HCI_ERR_CONN_FAIL_TO_ESTAB);
   1c25c:	213e      	movs	r1, #62	; 0x3e
   1c25e:	e746      	b.n	1c0ee <ull_conn_done+0x1e>
		if (!conn->supervision_expire) {
   1c260:	f8b4 3078 	ldrh.w	r3, [r4, #120]	; 0x78
   1c264:	2b00      	cmp	r3, #0
   1c266:	d185      	bne.n	1c174 <ull_conn_done+0xa4>
			conn->supervision_expire = conn->supervision_reload;
   1c268:	f8b4 3076 	ldrh.w	r3, [r4, #118]	; 0x76
   1c26c:	e762      	b.n	1c134 <ull_conn_done+0x64>
			conn_cleanup(conn, BT_HCI_ERR_CONN_TIMEOUT);
   1c26e:	2108      	movs	r1, #8
   1c270:	e73d      	b.n	1c0ee <ull_conn_done+0x1e>
				force = 1U;
   1c272:	2601      	movs	r6, #1
   1c274:	e79f      	b.n	1c1b6 <ull_conn_done+0xe6>
			conn_cleanup(conn, BT_HCI_ERR_LL_RESP_TIMEOUT);
   1c276:	2122      	movs	r1, #34	; 0x22
   1c278:	e739      	b.n	1c0ee <ull_conn_done+0x1e>
	lazy = 0U;
   1c27a:	4631      	mov	r1, r6
   1c27c:	e7bf      	b.n	1c1fe <ull_conn_done+0x12e>
   1c27e:	bf00      	nop
   1c280:	0001b291 	.word	0x0001b291
   1c284:	00034fd6 	.word	0x00034fd6
   1c288:	0002fa94 	.word	0x0002fa94

0001c28c <ull_conn_tx_lll_enqueue>:
{
   1c28c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		link = mem_acquire(&mem_link_tx.free);
   1c290:	4f15      	ldr	r7, [pc, #84]	; (1c2e8 <ull_conn_tx_lll_enqueue+0x5c>)
		LL_ASSERT(link);
   1c292:	f8df 8058 	ldr.w	r8, [pc, #88]	; 1c2ec <ull_conn_tx_lll_enqueue+0x60>
   1c296:	f8df 9058 	ldr.w	r9, [pc, #88]	; 1c2f0 <ull_conn_tx_lll_enqueue+0x64>
{
   1c29a:	4605      	mov	r5, r0
   1c29c:	460c      	mov	r4, r1
	while (conn->tx_head &&
   1c29e:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
   1c2a2:	b101      	cbz	r1, 1c2a6 <ull_conn_tx_lll_enqueue+0x1a>
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
   1c2a4:	b90c      	cbnz	r4, 1c2aa <ull_conn_tx_lll_enqueue+0x1e>
}
   1c2a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		tx = tx_ull_dequeue(conn, conn->tx_head);
   1c2aa:	4628      	mov	r0, r5
   1c2ac:	f00f fe1d 	bl	2beea <tx_ull_dequeue>
   1c2b0:	4682      	mov	sl, r0
		link = mem_acquire(&mem_link_tx.free);
   1c2b2:	4638      	mov	r0, r7
   1c2b4:	f00f f9fd 	bl	2b6b2 <mem_acquire>
		LL_ASSERT(link);
   1c2b8:	4606      	mov	r6, r0
   1c2ba:	b958      	cbnz	r0, 1c2d4 <ull_conn_tx_lll_enqueue+0x48>
   1c2bc:	f240 5293 	movw	r2, #1427	; 0x593
   1c2c0:	4641      	mov	r1, r8
   1c2c2:	4648      	mov	r0, r9
   1c2c4:	f00a fe53 	bl	26f6e <printk>
   1c2c8:	4040      	eors	r0, r0
   1c2ca:	f380 8811 	msr	BASEPRI, r0
   1c2ce:	f04f 0003 	mov.w	r0, #3
   1c2d2:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   1c2d4:	f105 0260 	add.w	r2, r5, #96	; 0x60
   1c2d8:	4651      	mov	r1, sl
   1c2da:	4630      	mov	r0, r6
   1c2dc:	3c01      	subs	r4, #1
   1c2de:	f00f fa3a 	bl	2b756 <memq_enqueue>
   1c2e2:	b2e4      	uxtb	r4, r4
   1c2e4:	e7db      	b.n	1c29e <ull_conn_tx_lll_enqueue+0x12>
   1c2e6:	bf00      	nop
   1c2e8:	2000419c 	.word	0x2000419c
   1c2ec:	00034fd6 	.word	0x00034fd6
   1c2f0:	0002fa94 	.word	0x0002fa94

0001c2f4 <ull_conn_link_tx_release>:
	mem_release(link, &mem_link_tx.free);
   1c2f4:	4901      	ldr	r1, [pc, #4]	; (1c2fc <ull_conn_link_tx_release+0x8>)
   1c2f6:	f00f b9ed 	b.w	2b6d4 <mem_release>
   1c2fa:	bf00      	nop
   1c2fc:	2000419c 	.word	0x2000419c

0001c300 <ull_conn_ack_last_idx_get>:
}
   1c300:	4b01      	ldr	r3, [pc, #4]	; (1c308 <ull_conn_ack_last_idx_get+0x8>)
   1c302:	78d8      	ldrb	r0, [r3, #3]
   1c304:	4770      	bx	lr
   1c306:	bf00      	nop
   1c308:	20000cac 	.word	0x20000cac

0001c30c <ull_conn_ack_peek>:
{
   1c30c:	b570      	push	{r4, r5, r6, lr}
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
   1c30e:	4b0a      	ldr	r3, [pc, #40]	; (1c338 <ull_conn_ack_peek+0x2c>)
   1c310:	789c      	ldrb	r4, [r3, #2]
   1c312:	78dd      	ldrb	r5, [r3, #3]
	if (first == last) {
   1c314:	42ac      	cmp	r4, r5
{
   1c316:	4606      	mov	r6, r0
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
   1c318:	7818      	ldrb	r0, [r3, #0]
   1c31a:	d00b      	beq.n	1c334 <ull_conn_ack_peek+0x28>
	return (void *)(fifo + first * size);
   1c31c:	3304      	adds	r3, #4
   1c31e:	fb14 f400 	smulbb	r4, r4, r0
	if (!lll_tx) {
   1c322:	1918      	adds	r0, r3, r4
   1c324:	d005      	beq.n	1c332 <ull_conn_ack_peek+0x26>
	*ack_last = mfifo_conn_ack.l;
   1c326:	7035      	strb	r5, [r6, #0]
	*handle = lll_tx->handle;
   1c328:	5b1b      	ldrh	r3, [r3, r4]
   1c32a:	800b      	strh	r3, [r1, #0]
	*tx = lll_tx->node;
   1c32c:	6843      	ldr	r3, [r0, #4]
   1c32e:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   1c330:	6818      	ldr	r0, [r3, #0]
}
   1c332:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   1c334:	2000      	movs	r0, #0
   1c336:	e7fc      	b.n	1c332 <ull_conn_ack_peek+0x26>
   1c338:	20000cac 	.word	0x20000cac

0001c33c <ull_conn_ack_by_last_peek>:
{
   1c33c:	b530      	push	{r4, r5, lr}
	lll_tx = mfifo_dequeue_get(mfifo_conn_ack.m, mfifo_conn_ack.s,
   1c33e:	4b09      	ldr	r3, [pc, #36]	; (1c364 <ull_conn_ack_by_last_peek+0x28>)
   1c340:	789c      	ldrb	r4, [r3, #2]
   1c342:	781d      	ldrb	r5, [r3, #0]
	if (first == last) {
   1c344:	4284      	cmp	r4, r0
   1c346:	d00a      	beq.n	1c35e <ull_conn_ack_by_last_peek+0x22>
	return (void *)(fifo + first * size);
   1c348:	3304      	adds	r3, #4
   1c34a:	fb14 f405 	smulbb	r4, r4, r5
	if (!lll_tx) {
   1c34e:	1918      	adds	r0, r3, r4
   1c350:	d004      	beq.n	1c35c <ull_conn_ack_by_last_peek+0x20>
	*handle = lll_tx->handle;
   1c352:	5b1b      	ldrh	r3, [r3, r4]
   1c354:	800b      	strh	r3, [r1, #0]
	*tx = lll_tx->node;
   1c356:	6843      	ldr	r3, [r0, #4]
   1c358:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   1c35a:	6818      	ldr	r0, [r3, #0]
}
   1c35c:	bd30      	pop	{r4, r5, pc}
		return NULL;
   1c35e:	2000      	movs	r0, #0
   1c360:	e7fc      	b.n	1c35c <ull_conn_ack_by_last_peek+0x20>
   1c362:	bf00      	nop
   1c364:	20000cac 	.word	0x20000cac

0001c368 <ull_conn_ack_dequeue>:
{
   1c368:	b510      	push	{r4, lr}
	return MFIFO_DEQUEUE(conn_ack);
   1c36a:	4a09      	ldr	r2, [pc, #36]	; (1c390 <ull_conn_ack_dequeue+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   1c36c:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
   1c36e:	78d0      	ldrb	r0, [r2, #3]
   1c370:	7811      	ldrb	r1, [r2, #0]
   1c372:	7854      	ldrb	r4, [r2, #1]
   1c374:	4298      	cmp	r0, r3
   1c376:	d009      	beq.n	1c38c <ull_conn_ack_dequeue+0x24>
	mem = *((void **)(fifo + _first * size));
   1c378:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
   1c37c:	3301      	adds	r3, #1
   1c37e:	b2db      	uxtb	r3, r3
		_first = 0U;
   1c380:	429c      	cmp	r4, r3
   1c382:	bf08      	it	eq
   1c384:	2300      	moveq	r3, #0
	mem = *((void **)(fifo + _first * size));
   1c386:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   1c388:	7093      	strb	r3, [r2, #2]
}
   1c38a:	bd10      	pop	{r4, pc}
		return NULL;
   1c38c:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(conn_ack);
   1c38e:	e7fc      	b.n	1c38a <ull_conn_ack_dequeue+0x22>
   1c390:	20000cac 	.word	0x20000cac

0001c394 <ull_conn_lll_ack_enqueue>:
{
   1c394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   1c396:	4a12      	ldr	r2, [pc, #72]	; (1c3e0 <ull_conn_lll_ack_enqueue+0x4c>)
   1c398:	78d4      	ldrb	r4, [r2, #3]
	if (last == count) {
   1c39a:	7857      	ldrb	r7, [r2, #1]
   1c39c:	7895      	ldrb	r5, [r2, #2]
   1c39e:	7816      	ldrb	r6, [r2, #0]
	last = last + 1;
   1c3a0:	1c63      	adds	r3, r4, #1
   1c3a2:	b2db      	uxtb	r3, r3
		last = 0U;
   1c3a4:	429f      	cmp	r7, r3
   1c3a6:	bf08      	it	eq
   1c3a8:	2300      	moveq	r3, #0
	if (last == first) {
   1c3aa:	429d      	cmp	r5, r3
   1c3ac:	d004      	beq.n	1c3b8 <ull_conn_lll_ack_enqueue+0x24>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   1c3ae:	1d15      	adds	r5, r2, #4
   1c3b0:	fb14 f406 	smulbb	r4, r4, r6
	LL_ASSERT(lll_tx);
   1c3b4:	192e      	adds	r6, r5, r4
   1c3b6:	d10e      	bne.n	1c3d6 <ull_conn_lll_ack_enqueue+0x42>
   1c3b8:	f240 52d1 	movw	r2, #1489	; 0x5d1
   1c3bc:	4909      	ldr	r1, [pc, #36]	; (1c3e4 <ull_conn_lll_ack_enqueue+0x50>)
   1c3be:	480a      	ldr	r0, [pc, #40]	; (1c3e8 <ull_conn_lll_ack_enqueue+0x54>)
   1c3c0:	f00a fdd5 	bl	26f6e <printk>
   1c3c4:	4040      	eors	r0, r0
   1c3c6:	f380 8811 	msr	BASEPRI, r0
   1c3ca:	f04f 0003 	mov.w	r0, #3
   1c3ce:	df02      	svc	2
	lll_tx->handle = handle;
   1c3d0:	2300      	movs	r3, #0
   1c3d2:	801b      	strh	r3, [r3, #0]
   1c3d4:	deff      	udf	#255	; 0xff
   1c3d6:	5328      	strh	r0, [r5, r4]
	*last = idx; /* Commit: Update write index */
   1c3d8:	70d3      	strb	r3, [r2, #3]
	lll_tx->node = tx;
   1c3da:	6071      	str	r1, [r6, #4]
}
   1c3dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c3de:	bf00      	nop
   1c3e0:	20000cac 	.word	0x20000cac
   1c3e4:	00034fd6 	.word	0x00034fd6
   1c3e8:	0002fa94 	.word	0x0002fa94

0001c3ec <ull_conn_tx_ack>:
{
   1c3ec:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(pdu_tx->len);
   1c3ee:	7953      	ldrb	r3, [r2, #5]
{
   1c3f0:	4605      	mov	r5, r0
   1c3f2:	460e      	mov	r6, r1
   1c3f4:	4614      	mov	r4, r2
	LL_ASSERT(pdu_tx->len);
   1c3f6:	b95b      	cbnz	r3, 1c410 <ull_conn_tx_ack+0x24>
   1c3f8:	f240 52de 	movw	r2, #1502	; 0x5de
   1c3fc:	4920      	ldr	r1, [pc, #128]	; (1c480 <ull_conn_tx_ack+0x94>)
   1c3fe:	4821      	ldr	r0, [pc, #132]	; (1c484 <ull_conn_tx_ack+0x98>)
   1c400:	f00a fdb5 	bl	26f6e <printk>
   1c404:	4040      	eors	r0, r0
   1c406:	f380 8811 	msr	BASEPRI, r0
   1c40a:	f04f 0003 	mov.w	r0, #3
   1c40e:	df02      	svc	2
	if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   1c410:	7923      	ldrb	r3, [r4, #4]
   1c412:	f003 0203 	and.w	r2, r3, #3
   1c416:	2a03      	cmp	r2, #3
   1c418:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1c41c:	d129      	bne.n	1c472 <ull_conn_tx_ack+0x86>
		if (handle != 0xFFFF) {
   1c41e:	4295      	cmp	r5, r2
   1c420:	d00b      	beq.n	1c43a <ull_conn_tx_ack+0x4e>
			struct ll_conn *conn = ll_conn_get(handle);
   1c422:	4628      	mov	r0, r5
   1c424:	f7ff f82e 	bl	1b484 <ll_conn_get>
	switch (pdu_tx->llctrl.opcode) {
   1c428:	79e3      	ldrb	r3, [r4, #7]
   1c42a:	2b02      	cmp	r3, #2
   1c42c:	d105      	bne.n	1c43a <ull_conn_tx_ack+0x4e>
		uint8_t reason = (pdu_tx->llctrl.terminate_ind.error_code ==
   1c42e:	7a21      	ldrb	r1, [r4, #8]
   1c430:	2913      	cmp	r1, #19
		conn_cleanup(conn, reason);
   1c432:	bf08      	it	eq
   1c434:	2116      	moveq	r1, #22
   1c436:	f7ff fddb 	bl	1bff0 <conn_cleanup>
		if (link->next == (void *)tx) {
   1c43a:	6833      	ldr	r3, [r6, #0]
   1c43c:	42a3      	cmp	r3, r4
   1c43e:	d105      	bne.n	1c44c <ull_conn_tx_ack+0x60>
			mem_release(tx, &mem_conn_tx_ctrl.free);
   1c440:	4620      	mov	r0, r4
   1c442:	4911      	ldr	r1, [pc, #68]	; (1c488 <ull_conn_tx_ack+0x9c>)
}
   1c444:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			mem_release(tx, &mem_conn_tx_ctrl.free);
   1c448:	f00f b944 	b.w	2b6d4 <mem_release>
			LL_ASSERT(!link->next);
   1c44c:	b15b      	cbz	r3, 1c466 <ull_conn_tx_ack+0x7a>
   1c44e:	f240 52f1 	movw	r2, #1521	; 0x5f1
   1c452:	490b      	ldr	r1, [pc, #44]	; (1c480 <ull_conn_tx_ack+0x94>)
   1c454:	480b      	ldr	r0, [pc, #44]	; (1c484 <ull_conn_tx_ack+0x98>)
   1c456:	f00a fd8a 	bl	26f6e <printk>
   1c45a:	4040      	eors	r0, r0
   1c45c:	f380 8811 	msr	BASEPRI, r0
   1c460:	f04f 0003 	mov.w	r0, #3
   1c464:	df02      	svc	2
	ll_tx_ack_put(handle, tx);
   1c466:	4621      	mov	r1, r4
   1c468:	4628      	mov	r0, r5
}
   1c46a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_tx_ack_put(handle, tx);
   1c46e:	f7fd bfa1 	b.w	1a3b4 <ll_tx_ack_put>
	} else if (handle == 0xFFFF) {
   1c472:	4295      	cmp	r5, r2
		pdu_tx->ll_id = PDU_DATA_LLID_RESV;
   1c474:	bf04      	itt	eq
   1c476:	f36f 0301 	bfceq	r3, #0, #2
   1c47a:	7123      	strbeq	r3, [r4, #4]
   1c47c:	e7f3      	b.n	1c466 <ull_conn_tx_ack+0x7a>
   1c47e:	bf00      	nop
   1c480:	00034fd6 	.word	0x00034fd6
   1c484:	0002fa94 	.word	0x0002fa94
   1c488:	20004018 	.word	0x20004018

0001c48c <ticker_update_latency_cancel_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
}

static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *params)
{
   1c48c:	b510      	push	{r4, lr}
   1c48e:	460c      	mov	r4, r1
	struct ll_conn *conn = params;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   1c490:	b158      	cbz	r0, 1c4aa <ticker_update_latency_cancel_op_cb+0x1e>
   1c492:	f240 220d 	movw	r2, #525	; 0x20d
   1c496:	4908      	ldr	r1, [pc, #32]	; (1c4b8 <ticker_update_latency_cancel_op_cb+0x2c>)
   1c498:	4808      	ldr	r0, [pc, #32]	; (1c4bc <ticker_update_latency_cancel_op_cb+0x30>)
   1c49a:	f00a fd68 	bl	26f6e <printk>
   1c49e:	4040      	eors	r0, r0
   1c4a0:	f380 8811 	msr	BASEPRI, r0
   1c4a4:	f04f 0003 	mov.w	r0, #3
   1c4a8:	df02      	svc	2

	conn->slave.latency_cancel = 0U;
   1c4aa:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
   1c4ae:	f36f 0341 	bfc	r3, #1, #1
   1c4b2:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
   1c4b6:	bd10      	pop	{r4, pc}
   1c4b8:	00035028 	.word	0x00035028
   1c4bc:	0002fa94 	.word	0x0002fa94

0001c4c0 <ticker_op_cb>:
{
   1c4c0:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1c4c2:	b158      	cbz	r0, 1c4dc <ticker_op_cb+0x1c>
   1c4c4:	f240 2205 	movw	r2, #517	; 0x205
   1c4c8:	4905      	ldr	r1, [pc, #20]	; (1c4e0 <ticker_op_cb+0x20>)
   1c4ca:	4806      	ldr	r0, [pc, #24]	; (1c4e4 <ticker_op_cb+0x24>)
   1c4cc:	f00a fd4f 	bl	26f6e <printk>
   1c4d0:	4040      	eors	r0, r0
   1c4d2:	f380 8811 	msr	BASEPRI, r0
   1c4d6:	f04f 0003 	mov.w	r0, #3
   1c4da:	df02      	svc	2
}
   1c4dc:	bd08      	pop	{r3, pc}
   1c4de:	bf00      	nop
   1c4e0:	00035028 	.word	0x00035028
   1c4e4:	0002fa94 	.word	0x0002fa94

0001c4e8 <ticker_op_stop_adv_cb>:
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   1c4e8:	2801      	cmp	r0, #1
{
   1c4ea:	b510      	push	{r4, lr}
   1c4ec:	460c      	mov	r4, r1
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   1c4ee:	d10f      	bne.n	1c510 <ticker_op_stop_adv_cb+0x28>
   1c4f0:	f7fd ffe2 	bl	1a4b8 <ull_disable_mark_get>
   1c4f4:	4284      	cmp	r4, r0
   1c4f6:	d00b      	beq.n	1c510 <ticker_op_stop_adv_cb+0x28>
   1c4f8:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   1c4fc:	4905      	ldr	r1, [pc, #20]	; (1c514 <ticker_op_stop_adv_cb+0x2c>)
   1c4fe:	4806      	ldr	r0, [pc, #24]	; (1c518 <ticker_op_stop_adv_cb+0x30>)
   1c500:	f00a fd35 	bl	26f6e <printk>
   1c504:	4040      	eors	r0, r0
   1c506:	f380 8811 	msr	BASEPRI, r0
   1c50a:	f04f 0003 	mov.w	r0, #3
   1c50e:	df02      	svc	2
}
   1c510:	bd10      	pop	{r4, pc}
   1c512:	bf00      	nop
   1c514:	00035028 	.word	0x00035028
   1c518:	0002fa94 	.word	0x0002fa94

0001c51c <ull_slave_ticker_cb>:
{
   1c51c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c51e:	460f      	mov	r7, r1
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   1c520:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
{
   1c522:	461c      	mov	r4, r3
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   1c524:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1c528:	4299      	cmp	r1, r3
{
   1c52a:	4605      	mov	r5, r0
   1c52c:	4616      	mov	r6, r2
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   1c52e:	d03a      	beq.n	1c5a6 <ull_slave_ticker_cb+0x8a>
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   1c530:	4601      	mov	r1, r0
   1c532:	4620      	mov	r0, r4
   1c534:	f7e5 ff88 	bl	2448 <ull_conn_llcp>
		if (ret) {
   1c538:	2800      	cmp	r0, #0
   1c53a:	d134      	bne.n	1c5a6 <ull_slave_ticker_cb+0x8a>
	return ++hdr->ref;
   1c53c:	7c23      	ldrb	r3, [r4, #16]
   1c53e:	3301      	adds	r3, #1
   1c540:	b2db      	uxtb	r3, r3
   1c542:	7423      	strb	r3, [r4, #16]
	LL_ASSERT(ref);
   1c544:	b95b      	cbnz	r3, 1c55e <ull_slave_ticker_cb+0x42>
   1c546:	f240 12b5 	movw	r2, #437	; 0x1b5
   1c54a:	4917      	ldr	r1, [pc, #92]	; (1c5a8 <ull_slave_ticker_cb+0x8c>)
   1c54c:	4817      	ldr	r0, [pc, #92]	; (1c5ac <ull_slave_ticker_cb+0x90>)
   1c54e:	f00a fd0e 	bl	26f6e <printk>
   1c552:	4040      	eors	r0, r0
   1c554:	f380 8811 	msr	BASEPRI, r0
   1c558:	f04f 0003 	mov.w	r0, #3
   1c55c:	df02      	svc	2
	p.ticks_at_expire = ticks_at_expire;
   1c55e:	4a14      	ldr	r2, [pc, #80]	; (1c5b0 <ull_slave_ticker_cb+0x94>)
	p.param = &conn->lll;
   1c560:	f104 031c 	add.w	r3, r4, #28
   1c564:	60d3      	str	r3, [r2, #12]
	mfy.param = &p;
   1c566:	4b13      	ldr	r3, [pc, #76]	; (1c5b4 <ull_slave_ticker_cb+0x98>)
	p.lazy = lazy;
   1c568:	8116      	strh	r6, [r2, #8]
	p.remainder = remainder;
   1c56a:	e9c2 5700 	strd	r5, r7, [r2]
	mfy.param = &p;
   1c56e:	609a      	str	r2, [r3, #8]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1c570:	2200      	movs	r2, #0
   1c572:	4611      	mov	r1, r2
   1c574:	2001      	movs	r0, #1
   1c576:	f7fb fd65 	bl	18044 <mayfly_enqueue>
	LL_ASSERT(!err);
   1c57a:	b158      	cbz	r0, 1c594 <ull_slave_ticker_cb+0x78>
   1c57c:	f240 12c1 	movw	r2, #449	; 0x1c1
   1c580:	4909      	ldr	r1, [pc, #36]	; (1c5a8 <ull_slave_ticker_cb+0x8c>)
   1c582:	480a      	ldr	r0, [pc, #40]	; (1c5ac <ull_slave_ticker_cb+0x90>)
   1c584:	f00a fcf3 	bl	26f6e <printk>
   1c588:	4040      	eors	r0, r0
   1c58a:	f380 8811 	msr	BASEPRI, r0
   1c58e:	f04f 0003 	mov.w	r0, #3
   1c592:	df02      	svc	2
	ull_conn_tx_demux(UINT8_MAX);
   1c594:	20ff      	movs	r0, #255	; 0xff
   1c596:	f7ff fce5 	bl	1bf64 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   1c59a:	4620      	mov	r0, r4
   1c59c:	21ff      	movs	r1, #255	; 0xff
}
   1c59e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   1c5a2:	f7ff be73 	b.w	1c28c <ull_conn_tx_lll_enqueue>
}
   1c5a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c5a8:	00035028 	.word	0x00035028
   1c5ac:	0002fa94 	.word	0x0002fa94
   1c5b0:	20004220 	.word	0x20004220
   1c5b4:	20000d74 	.word	0x20000d74

0001c5b8 <ull_slave_latency_cancel>:
{
   1c5b8:	b510      	push	{r4, lr}
	if (conn->lll.latency_event && !conn->slave.latency_cancel) {
   1c5ba:	8e83      	ldrh	r3, [r0, #52]	; 0x34
{
   1c5bc:	b088      	sub	sp, #32
	if (conn->lll.latency_event && !conn->slave.latency_cancel) {
   1c5be:	b333      	cbz	r3, 1c60e <ull_slave_latency_cancel+0x56>
   1c5c0:	f890 4080 	ldrb.w	r4, [r0, #128]	; 0x80
   1c5c4:	f014 0302 	ands.w	r3, r4, #2
   1c5c8:	d121      	bne.n	1c60e <ull_slave_latency_cancel+0x56>
				      (TICKER_ID_CONN_BASE + handle),
   1c5ca:	1d4a      	adds	r2, r1, #5
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   1c5cc:	4911      	ldr	r1, [pc, #68]	; (1c614 <ull_slave_latency_cancel+0x5c>)
		conn->slave.latency_cancel = 1U;
   1c5ce:	f044 0402 	orr.w	r4, r4, #2
   1c5d2:	f880 4080 	strb.w	r4, [r0, #128]	; 0x80
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   1c5d6:	e9cd 3104 	strd	r3, r1, [sp, #16]
   1c5da:	2101      	movs	r1, #1
   1c5dc:	e9cd 3102 	strd	r3, r1, [sp, #8]
   1c5e0:	9006      	str	r0, [sp, #24]
   1c5e2:	e9cd 3300 	strd	r3, r3, [sp]
   1c5e6:	4618      	mov	r0, r3
   1c5e8:	b2d2      	uxtb	r2, r2
   1c5ea:	2103      	movs	r1, #3
   1c5ec:	f00f fb21 	bl	2bc32 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1c5f0:	f030 0302 	bics.w	r3, r0, #2
   1c5f4:	d00b      	beq.n	1c60e <ull_slave_latency_cancel+0x56>
   1c5f6:	f44f 72c4 	mov.w	r2, #392	; 0x188
   1c5fa:	4907      	ldr	r1, [pc, #28]	; (1c618 <ull_slave_latency_cancel+0x60>)
   1c5fc:	4807      	ldr	r0, [pc, #28]	; (1c61c <ull_slave_latency_cancel+0x64>)
   1c5fe:	f00a fcb6 	bl	26f6e <printk>
   1c602:	4040      	eors	r0, r0
   1c604:	f380 8811 	msr	BASEPRI, r0
   1c608:	f04f 0003 	mov.w	r0, #3
   1c60c:	df02      	svc	2
}
   1c60e:	b008      	add	sp, #32
   1c610:	bd10      	pop	{r4, pc}
   1c612:	bf00      	nop
   1c614:	0001c48d 	.word	0x0001c48d
   1c618:	00035028 	.word	0x00035028
   1c61c:	0002fa94 	.word	0x0002fa94

0001c620 <ll_wl_clear>:
{
	return WL_SIZE;
}

uint8_t ll_wl_clear(void)
{
   1c620:	b508      	push	{r3, lr}
#if defined(CONFIG_BT_BROADCASTER)
	if (ull_adv_filter_pol_get(0)) {
   1c622:	2000      	movs	r0, #0
   1c624:	f00f fbd3 	bl	2bdce <ull_adv_filter_pol_get>
   1c628:	b108      	cbz	r0, 1c62e <ll_wl_clear+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1c62a:	200c      	movs	r0, #12
#endif /* CONFIG_BT_CTLR_PRIVACY */

	wl_anon = 0U;

	return 0;
}
   1c62c:	bd08      	pop	{r3, pc}
	if (ull_scan_filter_pol_get(0) & 0x1) {
   1c62e:	f00f fc53 	bl	2bed8 <ull_scan_filter_pol_get>
   1c632:	f010 0001 	ands.w	r0, r0, #1
   1c636:	d1f8      	bne.n	1c62a <ll_wl_clear+0xa>
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
}

static void filter_clear(struct lll_filter *filter)
{
	filter->enable_bitmask = 0;
   1c638:	4b02      	ldr	r3, [pc, #8]	; (1c644 <ll_wl_clear+0x24>)
   1c63a:	7018      	strb	r0, [r3, #0]
	filter->addr_type_bitmask = 0;
   1c63c:	7058      	strb	r0, [r3, #1]
	wl_anon = 0U;
   1c63e:	4b02      	ldr	r3, [pc, #8]	; (1c648 <ll_wl_clear+0x28>)
   1c640:	7018      	strb	r0, [r3, #0]
	return 0;
   1c642:	e7f3      	b.n	1c62c <ll_wl_clear+0xc>
   1c644:	20004853 	.word	0x20004853
   1c648:	20004852 	.word	0x20004852

0001c64c <ll_wl_add>:
{
   1c64c:	b570      	push	{r4, r5, r6, lr}
   1c64e:	4604      	mov	r4, r0
	if (ull_adv_filter_pol_get(0)) {
   1c650:	2000      	movs	r0, #0
   1c652:	f00f fbbc 	bl	2bdce <ull_adv_filter_pol_get>
   1c656:	b108      	cbz	r0, 1c65c <ll_wl_add+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1c658:	200c      	movs	r0, #12
}
   1c65a:	bd70      	pop	{r4, r5, r6, pc}
	if (ull_scan_filter_pol_get(0) & 0x1) {
   1c65c:	f00f fc3c 	bl	2bed8 <ull_scan_filter_pol_get>
   1c660:	f010 0001 	ands.w	r0, r0, #1
   1c664:	d1f8      	bne.n	1c658 <ll_wl_add+0xc>
	if (addr->type == ADDR_TYPE_ANON) {
   1c666:	7821      	ldrb	r1, [r4, #0]
   1c668:	29ff      	cmp	r1, #255	; 0xff
   1c66a:	d103      	bne.n	1c674 <ll_wl_add+0x28>
		wl_anon = 1U;
   1c66c:	4b13      	ldr	r3, [pc, #76]	; (1c6bc <ll_wl_add+0x70>)
   1c66e:	2201      	movs	r2, #1
   1c670:	701a      	strb	r2, [r3, #0]
		return 0;
   1c672:	e7f2      	b.n	1c65a <ll_wl_add+0xe>
	if (filter->enable_bitmask == LLL_FILTER_BITMASK_ALL) {
   1c674:	4a12      	ldr	r2, [pc, #72]	; (1c6c0 <ll_wl_add+0x74>)
   1c676:	7815      	ldrb	r5, [r2, #0]
   1c678:	2dff      	cmp	r5, #255	; 0xff
	return filter_add(&wl_filter, addr->type, addr->a.val);
   1c67a:	f104 0401 	add.w	r4, r4, #1
	if (filter->enable_bitmask == LLL_FILTER_BITMASK_ALL) {
   1c67e:	d01a      	beq.n	1c6b6 <ll_wl_add+0x6a>
	     (filter->enable_bitmask & BIT(index));
   1c680:	fa25 f300 	lsr.w	r3, r5, r0
	for (index = 0;
   1c684:	f013 0301 	ands.w	r3, r3, #1
   1c688:	d113      	bne.n	1c6b2 <ll_wl_add+0x66>
	filter->enable_bitmask |= BIT(index);
   1c68a:	2601      	movs	r6, #1
   1c68c:	4086      	lsls	r6, r0
   1c68e:	4335      	orrs	r5, r6
   1c690:	7015      	strb	r5, [r2, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1c692:	f001 0101 	and.w	r1, r1, #1
   1c696:	7855      	ldrb	r5, [r2, #1]
   1c698:	4081      	lsls	r1, r0
   1c69a:	4329      	orrs	r1, r5
   1c69c:	7051      	strb	r1, [r2, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1c69e:	2106      	movs	r1, #6
   1c6a0:	4341      	muls	r1, r0
   1c6a2:	3102      	adds	r1, #2
   1c6a4:	6825      	ldr	r5, [r4, #0]
   1c6a6:	5055      	str	r5, [r2, r1]
   1c6a8:	1850      	adds	r0, r2, r1
   1c6aa:	88a2      	ldrh	r2, [r4, #4]
   1c6ac:	8082      	strh	r2, [r0, #4]
	return filter_add(&wl_filter, addr->type, addr->a.val);
   1c6ae:	b2d8      	uxtb	r0, r3
   1c6b0:	e7d3      	b.n	1c65a <ll_wl_add+0xe>
	     index++) {
   1c6b2:	3001      	adds	r0, #1
   1c6b4:	e7e4      	b.n	1c680 <ll_wl_add+0x34>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   1c6b6:	2307      	movs	r3, #7
   1c6b8:	e7f9      	b.n	1c6ae <ll_wl_add+0x62>
   1c6ba:	bf00      	nop
   1c6bc:	20004852 	.word	0x20004852
   1c6c0:	20004853 	.word	0x20004853

0001c6c4 <ll_wl_remove>:
{
   1c6c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c6c8:	4607      	mov	r7, r0
	if (ull_adv_filter_pol_get(0)) {
   1c6ca:	2000      	movs	r0, #0
   1c6cc:	f00f fb7f 	bl	2bdce <ull_adv_filter_pol_get>
   1c6d0:	b110      	cbz	r0, 1c6d8 <ll_wl_remove+0x14>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1c6d2:	200c      	movs	r0, #12
}
   1c6d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (ull_scan_filter_pol_get(0) & 0x1) {
   1c6d8:	f00f fbfe 	bl	2bed8 <ull_scan_filter_pol_get>
   1c6dc:	f010 0501 	ands.w	r5, r0, #1
   1c6e0:	d1f7      	bne.n	1c6d2 <ll_wl_remove+0xe>
	if (addr->type == ADDR_TYPE_ANON) {
   1c6e2:	f897 8000 	ldrb.w	r8, [r7]
   1c6e6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   1c6ea:	d103      	bne.n	1c6f4 <ll_wl_remove+0x30>
		wl_anon = 0U;
   1c6ec:	4b17      	ldr	r3, [pc, #92]	; (1c74c <ll_wl_remove+0x88>)
		return 0;
   1c6ee:	4628      	mov	r0, r5
		wl_anon = 0U;
   1c6f0:	701d      	strb	r5, [r3, #0]
		return 0;
   1c6f2:	e7ef      	b.n	1c6d4 <ll_wl_remove+0x10>
	if (!filter->enable_bitmask) {
   1c6f4:	4c16      	ldr	r4, [pc, #88]	; (1c750 <ll_wl_remove+0x8c>)
   1c6f6:	7823      	ldrb	r3, [r4, #0]
	return filter_remove(&wl_filter, addr->type, addr->a.val);
   1c6f8:	3701      	adds	r7, #1
	if (!filter->enable_bitmask) {
   1c6fa:	b913      	cbnz	r3, 1c702 <ll_wl_remove+0x3e>
		return BT_HCI_ERR_INVALID_PARAM;
   1c6fc:	2512      	movs	r5, #18
	return filter_remove(&wl_filter, addr->type, addr->a.val);
   1c6fe:	b2e8      	uxtb	r0, r5
   1c700:	e7e8      	b.n	1c6d4 <ll_wl_remove+0x10>
	index = WL_SIZE;
   1c702:	2608      	movs	r6, #8
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
   1c704:	f104 0902 	add.w	r9, r4, #2
   1c708:	f04f 0a06 	mov.w	sl, #6
	while (index--) {
   1c70c:	f116 36ff 	adds.w	r6, r6, #4294967295
   1c710:	d3f4      	bcc.n	1c6fc <ll_wl_remove+0x38>
		if ((filter->enable_bitmask & BIT(index)) &&
   1c712:	7823      	ldrb	r3, [r4, #0]
   1c714:	40f3      	lsrs	r3, r6
   1c716:	07da      	lsls	r2, r3, #31
   1c718:	d5f8      	bpl.n	1c70c <ll_wl_remove+0x48>
		    (((filter->addr_type_bitmask >> index) & 0x01) ==
   1c71a:	7863      	ldrb	r3, [r4, #1]
   1c71c:	4133      	asrs	r3, r6
   1c71e:	ea83 0308 	eor.w	r3, r3, r8
		if ((filter->enable_bitmask & BIT(index)) &&
   1c722:	07db      	lsls	r3, r3, #31
   1c724:	d4f2      	bmi.n	1c70c <ll_wl_remove+0x48>
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
   1c726:	2206      	movs	r2, #6
   1c728:	4639      	mov	r1, r7
   1c72a:	fb0a 9006 	mla	r0, sl, r6, r9
   1c72e:	f010 ff1b 	bl	2d568 <memcmp>
		     (addr_type & 0x01)) &&
   1c732:	2800      	cmp	r0, #0
   1c734:	d1ea      	bne.n	1c70c <ll_wl_remove+0x48>
			filter->enable_bitmask &= ~BIT(index);
   1c736:	2301      	movs	r3, #1
   1c738:	40b3      	lsls	r3, r6
   1c73a:	7822      	ldrb	r2, [r4, #0]
   1c73c:	43db      	mvns	r3, r3
   1c73e:	b2db      	uxtb	r3, r3
   1c740:	401a      	ands	r2, r3
   1c742:	7022      	strb	r2, [r4, #0]
			filter->addr_type_bitmask &= ~BIT(index);
   1c744:	7862      	ldrb	r2, [r4, #1]
   1c746:	4013      	ands	r3, r2
   1c748:	7063      	strb	r3, [r4, #1]
			return 0;
   1c74a:	e7d8      	b.n	1c6fe <ll_wl_remove+0x3a>
   1c74c:	20004852 	.word	0x20004852
   1c750:	20004853 	.word	0x20004853

0001c754 <ull_filter_reset>:
	wl_anon = 0U;
   1c754:	4a03      	ldr	r2, [pc, #12]	; (1c764 <ull_filter_reset+0x10>)
   1c756:	2300      	movs	r3, #0
   1c758:	7013      	strb	r3, [r2, #0]
	filter->enable_bitmask = 0;
   1c75a:	4a03      	ldr	r2, [pc, #12]	; (1c768 <ull_filter_reset+0x14>)
   1c75c:	7013      	strb	r3, [r2, #0]
	filter->addr_type_bitmask = 0;
   1c75e:	7053      	strb	r3, [r2, #1]
}
   1c760:	4770      	bx	lr
   1c762:	bf00      	nop
   1c764:	20004852 	.word	0x20004852
   1c768:	20004853 	.word	0x20004853

0001c76c <ull_filter_lll_get>:
{
   1c76c:	b508      	push	{r3, lr}
	LL_ASSERT(whitelist);
   1c76e:	b958      	cbnz	r0, 1c788 <ull_filter_lll_get+0x1c>
   1c770:	f240 22d5 	movw	r2, #725	; 0x2d5
   1c774:	4905      	ldr	r1, [pc, #20]	; (1c78c <ull_filter_lll_get+0x20>)
   1c776:	4806      	ldr	r0, [pc, #24]	; (1c790 <ull_filter_lll_get+0x24>)
   1c778:	f00a fbf9 	bl	26f6e <printk>
   1c77c:	4040      	eors	r0, r0
   1c77e:	f380 8811 	msr	BASEPRI, r0
   1c782:	f04f 0003 	mov.w	r0, #3
   1c786:	df02      	svc	2
}
   1c788:	4802      	ldr	r0, [pc, #8]	; (1c794 <ull_filter_lll_get+0x28>)
   1c78a:	bd08      	pop	{r3, pc}
   1c78c:	0003508d 	.word	0x0003508d
   1c790:	0002fa94 	.word	0x0002fa94
   1c794:	20004853 	.word	0x20004853

0001c798 <rtc0_nrf5_isr>:
	DEBUG_RADIO_ISR(0);
	return 1;
}

static void rtc0_nrf5_isr(const void *arg)
{
   1c798:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	/* On compare0 run ticker worker instance0 */
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
   1c79a:	4b08      	ldr	r3, [pc, #32]	; (1c7bc <rtc0_nrf5_isr+0x24>)
   1c79c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   1c7a0:	b122      	cbz	r2, 1c7ac <rtc0_nrf5_isr+0x14>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   1c7a2:	2000      	movs	r0, #0
   1c7a4:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140

		ticker_trigger(0);
   1c7a8:	f7fc f97a 	bl	18aa0 <ticker_trigger>
	}

	mayfly_run(TICKER_USER_ID_ULL_HIGH);
   1c7ac:	2001      	movs	r0, #1
   1c7ae:	f7fb fc99 	bl	180e4 <mayfly_run>

#if !defined(CONFIG_BT_CTLR_LOW_LAT) && \
	(CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	mayfly_run(TICKER_USER_ID_ULL_LOW);
   1c7b2:	2002      	movs	r0, #2
#endif

	DEBUG_TICKER_ISR(0);
}
   1c7b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(TICKER_USER_ID_ULL_LOW);
   1c7b8:	f7fb bc94 	b.w	180e4 <mayfly_run>
   1c7bc:	4000b000 	.word	0x4000b000

0001c7c0 <ticker_stop_op_cb>:
	/* NOTE: this callback is present only for addition of debug messages
	 * when needed, else can be dispensed with.
	 */
	ARG_UNUSED(param);

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   1c7c0:	2801      	cmp	r0, #1
{
   1c7c2:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   1c7c4:	d90b      	bls.n	1c7de <ticker_stop_op_cb+0x1e>
   1c7c6:	f240 228f 	movw	r2, #655	; 0x28f
   1c7ca:	4905      	ldr	r1, [pc, #20]	; (1c7e0 <ticker_stop_op_cb+0x20>)
   1c7cc:	4805      	ldr	r0, [pc, #20]	; (1c7e4 <ticker_stop_op_cb+0x24>)
   1c7ce:	f00a fbce 	bl	26f6e <printk>
   1c7d2:	4040      	eors	r0, r0
   1c7d4:	f380 8811 	msr	BASEPRI, r0
   1c7d8:	f04f 0003 	mov.w	r0, #3
   1c7dc:	df02      	svc	2
		  (status == TICKER_STATUS_FAILURE));
}
   1c7de:	bd08      	pop	{r3, pc}
   1c7e0:	0003510c 	.word	0x0003510c
   1c7e4:	0002fa94 	.word	0x0002fa94

0001c7e8 <ticker_start_op_cb>:
	/* NOTE: this callback is present only for addition of debug messages
	 * when needed, else can be dispensed with.
	 */
	ARG_UNUSED(param);

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   1c7e8:	2801      	cmp	r0, #1
{
   1c7ea:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   1c7ec:	d90b      	bls.n	1c806 <ticker_start_op_cb+0x1e>
   1c7ee:	f240 229a 	movw	r2, #666	; 0x29a
   1c7f2:	4905      	ldr	r1, [pc, #20]	; (1c808 <ticker_start_op_cb+0x20>)
   1c7f4:	4805      	ldr	r0, [pc, #20]	; (1c80c <ticker_start_op_cb+0x24>)
   1c7f6:	f00a fbba 	bl	26f6e <printk>
   1c7fa:	4040      	eors	r0, r0
   1c7fc:	f380 8811 	msr	BASEPRI, r0
   1c800:	f04f 0003 	mov.w	r0, #3
   1c804:	df02      	svc	2
		  (status == TICKER_STATUS_FAILURE));
}
   1c806:	bd08      	pop	{r3, pc}
   1c808:	0003510c 	.word	0x0003510c
   1c80c:	0002fa94 	.word	0x0002fa94

0001c810 <preempt_ticker_start>:

static void preempt_ticker_start(struct lll_prepare_param *prepare_param)
{
   1c810:	b530      	push	{r4, r5, lr}
	struct evt_hdr *evt;
	uint32_t preempt_to;
	uint32_t ret;

	/* Calc the preempt timeout */
	evt = HDR_LLL2EVT(prepare_param->param);
   1c812:	68c3      	ldr	r3, [r0, #12]
   1c814:	6819      	ldr	r1, [r3, #0]
	preempt_to = MAX(evt->ticks_active_to_start,
			 evt->ticks_xtal_to_start) -
			 evt->ticks_preempt_to_start;

	/* Setup pre empt timeout */
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1c816:	4b15      	ldr	r3, [pc, #84]	; (1c86c <preempt_ticker_start+0x5c>)
   1c818:	2200      	movs	r2, #0
{
   1c81a:	b08b      	sub	sp, #44	; 0x2c
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1c81c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1c820:	4b13      	ldr	r3, [pc, #76]	; (1c870 <preempt_ticker_start+0x60>)
   1c822:	9208      	str	r2, [sp, #32]
   1c824:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1c828:	e9cd 2202 	strd	r2, r2, [sp, #8]
   1c82c:	9201      	str	r2, [sp, #4]
	preempt_to = MAX(evt->ticks_active_to_start,
   1c82e:	e9d1 5400 	ldrd	r5, r4, [r1]
   1c832:	688b      	ldr	r3, [r1, #8]
   1c834:	42a5      	cmp	r5, r4
   1c836:	bf2c      	ite	cs
   1c838:	ebc3 0305 	rsbcs	r3, r3, r5
   1c83c:	ebc3 0304 	rsbcc	r3, r3, r4
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1c840:	9300      	str	r3, [sp, #0]
   1c842:	6803      	ldr	r3, [r0, #0]
   1c844:	4611      	mov	r1, r2
   1c846:	4610      	mov	r0, r2
   1c848:	f00f f9d8 	bl	2bbfc <ticker_start>
			   TICKER_NULL_REMAINDER,
			   TICKER_NULL_LAZY,
			   TICKER_NULL_SLOT,
			   preempt_ticker_cb, NULL,
			   ticker_start_op_cb, NULL);
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1c84c:	2802      	cmp	r0, #2
   1c84e:	d90b      	bls.n	1c868 <preempt_ticker_start+0x58>
   1c850:	f240 22b9 	movw	r2, #697	; 0x2b9
   1c854:	4907      	ldr	r1, [pc, #28]	; (1c874 <preempt_ticker_start+0x64>)
   1c856:	4808      	ldr	r0, [pc, #32]	; (1c878 <preempt_ticker_start+0x68>)
   1c858:	f00a fb89 	bl	26f6e <printk>
   1c85c:	4040      	eors	r0, r0
   1c85e:	f380 8811 	msr	BASEPRI, r0
   1c862:	f04f 0003 	mov.w	r0, #3
   1c866:	df02      	svc	2
		  (ret == TICKER_STATUS_FAILURE) ||
		  (ret == TICKER_STATUS_BUSY));
}
   1c868:	b00b      	add	sp, #44	; 0x2c
   1c86a:	bd30      	pop	{r4, r5, pc}
   1c86c:	0001c7e9 	.word	0x0001c7e9
   1c870:	0001ca35 	.word	0x0001ca35
   1c874:	0003510c 	.word	0x0003510c
   1c878:	0002fa94 	.word	0x0002fa94

0001c87c <prepare>:
{
   1c87c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c880:	b085      	sub	sp, #20
   1c882:	4699      	mov	r9, r3
   1c884:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1c886:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
	idx = UINT8_MAX;
   1c88a:	23ff      	movs	r3, #255	; 0xff
{
   1c88c:	4680      	mov	r8, r0
   1c88e:	460f      	mov	r7, r1
   1c890:	4616      	mov	r6, r2
	idx = UINT8_MAX;
   1c892:	f88d 300f 	strb.w	r3, [sp, #15]
		p = ull_prepare_dequeue_iter(&idx);
   1c896:	f10d 000f 	add.w	r0, sp, #15
   1c89a:	f7fe f847 	bl	1a92c <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   1c89e:	b118      	cbz	r0, 1c8a8 <prepare+0x2c>
   1c8a0:	f890 3020 	ldrb.w	r3, [r0, #32]
   1c8a4:	079b      	lsls	r3, r3, #30
   1c8a6:	d1f6      	bne.n	1c896 <prepare+0x1a>
	if (event.curr.abort_cb || (p && is_resume)) {
   1c8a8:	4b20      	ldr	r3, [pc, #128]	; (1c92c <prepare+0xb0>)
   1c8aa:	689a      	ldr	r2, [r3, #8]
   1c8ac:	b90a      	cbnz	r2, 1c8b2 <prepare+0x36>
   1c8ae:	b1e0      	cbz	r0, 1c8ea <prepare+0x6e>
   1c8b0:	b1dd      	cbz	r5, 1c8ea <prepare+0x6e>
		err = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   1c8b2:	e9cd 9500 	strd	r9, r5, [sp]
   1c8b6:	4633      	mov	r3, r6
   1c8b8:	4622      	mov	r2, r4
   1c8ba:	4639      	mov	r1, r7
   1c8bc:	4640      	mov	r0, r8
   1c8be:	f7fd fed1 	bl	1a664 <ull_prepare_enqueue>
		LL_ASSERT(!err);
   1c8c2:	b158      	cbz	r0, 1c8dc <prepare+0x60>
   1c8c4:	f240 2233 	movw	r2, #563	; 0x233
   1c8c8:	4919      	ldr	r1, [pc, #100]	; (1c930 <prepare+0xb4>)
   1c8ca:	481a      	ldr	r0, [pc, #104]	; (1c934 <prepare+0xb8>)
   1c8cc:	f00a fb4f 	bl	26f6e <printk>
   1c8d0:	4040      	eors	r0, r0
   1c8d2:	f380 8811 	msr	BASEPRI, r0
   1c8d6:	f04f 0003 	mov.w	r0, #3
   1c8da:	df02      	svc	2
		if (is_resume) {
   1c8dc:	b915      	cbnz	r5, 1c8e4 <prepare+0x68>
		preempt_ticker_start(prepare_param);
   1c8de:	4620      	mov	r0, r4
   1c8e0:	f7ff ff96 	bl	1c810 <preempt_ticker_start>
			return -EINPROGRESS;
   1c8e4:	f06f 0476 	mvn.w	r4, #118	; 0x76
   1c8e8:	e01b      	b.n	1c922 <prepare+0xa6>
	event.curr.param = prepare_param->param;
   1c8ea:	68e2      	ldr	r2, [r4, #12]
	event.curr.abort_cb = abort_cb;
   1c8ec:	609f      	str	r7, [r3, #8]
	event.curr.is_abort_cb = is_abort_cb;
   1c8ee:	e9c3 2800 	strd	r2, r8, [r3]
	err = prepare_cb(prepare_param);
   1c8f2:	4620      	mov	r0, r4
   1c8f4:	47b0      	blx	r6
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1c8f6:	2200      	movs	r2, #0
	err = prepare_cb(prepare_param);
   1c8f8:	4604      	mov	r4, r0
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1c8fa:	9200      	str	r2, [sp, #0]
   1c8fc:	4b0e      	ldr	r3, [pc, #56]	; (1c938 <prepare+0xbc>)
   1c8fe:	4611      	mov	r1, r2
   1c900:	4610      	mov	r0, r2
   1c902:	f7fc f975 	bl	18bf0 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1c906:	2802      	cmp	r0, #2
   1c908:	d90b      	bls.n	1c922 <prepare+0xa6>
   1c90a:	f240 226f 	movw	r2, #623	; 0x26f
   1c90e:	4908      	ldr	r1, [pc, #32]	; (1c930 <prepare+0xb4>)
   1c910:	4808      	ldr	r0, [pc, #32]	; (1c934 <prepare+0xb8>)
   1c912:	f00a fb2c 	bl	26f6e <printk>
   1c916:	4040      	eors	r0, r0
   1c918:	f380 8811 	msr	BASEPRI, r0
   1c91c:	f04f 0003 	mov.w	r0, #3
   1c920:	df02      	svc	2
}
   1c922:	4620      	mov	r0, r4
   1c924:	b005      	add	sp, #20
   1c926:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1c92a:	bf00      	nop
   1c92c:	20004234 	.word	0x20004234
   1c930:	0003510c 	.word	0x0003510c
   1c934:	0002fa94 	.word	0x0002fa94
   1c938:	0001c7c1 	.word	0x0001c7c1

0001c93c <preempt>:
			     0, &mfy);
	LL_ASSERT(!ret);
}

static void preempt(void *param)
{
   1c93c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct lll_event *next;
	int resume_prio;
	uint8_t idx;
	int ret;

	if (!event.curr.abort_cb || !event.curr.param) {
   1c93e:	4c3a      	ldr	r4, [pc, #232]	; (1ca28 <preempt+0xec>)
   1c940:	68a3      	ldr	r3, [r4, #8]
{
   1c942:	b08b      	sub	sp, #44	; 0x2c
	if (!event.curr.abort_cb || !event.curr.param) {
   1c944:	b373      	cbz	r3, 1c9a4 <preempt+0x68>
   1c946:	6823      	ldr	r3, [r4, #0]
   1c948:	b363      	cbz	r3, 1c9a4 <preempt+0x68>
		return;
	}

	idx = UINT8_MAX;
   1c94a:	23ff      	movs	r3, #255	; 0xff
   1c94c:	f88d 300e 	strb.w	r3, [sp, #14]
	if (!next) {
		return;
	}

	while (next && (next->is_aborted || next->is_resume)) {
		next = ull_prepare_dequeue_iter(&idx);
   1c950:	f10d 000e 	add.w	r0, sp, #14
   1c954:	f7fd ffea 	bl	1a92c <ull_prepare_dequeue_iter>
	while (next && (next->is_aborted || next->is_resume)) {
   1c958:	4605      	mov	r5, r0
   1c95a:	b318      	cbz	r0, 1c9a4 <preempt+0x68>
   1c95c:	f890 0020 	ldrb.w	r0, [r0, #32]
   1c960:	f010 0603 	ands.w	r6, r0, #3
   1c964:	d1f4      	bne.n	1c950 <preempt+0x14>

	if (!next) {
		return;
	}

	ret = event.curr.is_abort_cb(next->prepare_param.param, next->prio,
   1c966:	ab05      	add	r3, sp, #20
   1c968:	9300      	str	r3, [sp, #0]
   1c96a:	6867      	ldr	r7, [r4, #4]
   1c96c:	6822      	ldr	r2, [r4, #0]
   1c96e:	69e9      	ldr	r1, [r5, #28]
   1c970:	68e8      	ldr	r0, [r5, #12]
   1c972:	ab04      	add	r3, sp, #16
   1c974:	47b8      	blx	r7
				     event.curr.param,
				     &resume_cb, &resume_prio);
	if (!ret) {
   1c976:	4607      	mov	r7, r0
   1c978:	b9b0      	cbnz	r0, 1c9a8 <preempt+0x6c>
		/* Let LLL know about the cancelled prepare */
		next->is_aborted = 1;
   1c97a:	f895 3020 	ldrb.w	r3, [r5, #32]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   1c97e:	68e9      	ldr	r1, [r5, #12]
		next->is_aborted = 1;
   1c980:	f043 0302 	orr.w	r3, r3, #2
   1c984:	f885 3020 	strb.w	r3, [r5, #32]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   1c988:	4628      	mov	r0, r5
   1c98a:	69ab      	ldr	r3, [r5, #24]
   1c98c:	4798      	blx	r3
		LL_ASSERT(ret == -ECANCELED);
	}

preempt_next:
	do {
		next = ull_prepare_dequeue_iter(&idx);
   1c98e:	f10d 000e 	add.w	r0, sp, #14
   1c992:	f7fd ffcb 	bl	1a92c <ull_prepare_dequeue_iter>
		if (!next) {
   1c996:	b128      	cbz	r0, 1c9a4 <preempt+0x68>
			return;
		}
	} while (next->is_aborted || next->is_resume);
   1c998:	f890 3020 	ldrb.w	r3, [r0, #32]
   1c99c:	079b      	lsls	r3, r3, #30
   1c99e:	d1f6      	bne.n	1c98e <preempt+0x52>

	preempt_ticker_start(&next->prepare_param);
   1c9a0:	f7ff ff36 	bl	1c810 <preempt_ticker_start>
}
   1c9a4:	b00b      	add	sp, #44	; 0x2c
   1c9a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	event.curr.abort_cb(NULL, event.curr.param);
   1c9a8:	68a3      	ldr	r3, [r4, #8]
   1c9aa:	6821      	ldr	r1, [r4, #0]
   1c9ac:	4630      	mov	r0, r6
   1c9ae:	4798      	blx	r3
	if (ret == -EAGAIN) {
   1c9b0:	f117 0f0b 	cmn.w	r7, #11
   1c9b4:	d132      	bne.n	1ca1c <preempt+0xe0>
		iter_idx = UINT8_MAX;
   1c9b6:	23ff      	movs	r3, #255	; 0xff
   1c9b8:	f88d 300f 	strb.w	r3, [sp, #15]
			iter = ull_prepare_dequeue_iter(&iter_idx);
   1c9bc:	f10d 000f 	add.w	r0, sp, #15
   1c9c0:	f7fd ffb4 	bl	1a92c <ull_prepare_dequeue_iter>
		while (iter) {
   1c9c4:	b9d8      	cbnz	r0, 1c9fe <preempt+0xc2>
	prepare_param.param = event.curr.param;
   1c9c6:	6823      	ldr	r3, [r4, #0]
   1c9c8:	9309      	str	r3, [sp, #36]	; 0x24
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   1c9ca:	2301      	movs	r3, #1
   1c9cc:	9301      	str	r3, [sp, #4]
   1c9ce:	9b05      	ldr	r3, [sp, #20]
	event.curr.param = NULL;
   1c9d0:	6020      	str	r0, [r4, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   1c9d2:	9300      	str	r3, [sp, #0]
   1c9d4:	aa06      	add	r2, sp, #24
   1c9d6:	9b04      	ldr	r3, [sp, #16]
   1c9d8:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
   1c9dc:	f7fd fe42 	bl	1a664 <ull_prepare_enqueue>
		LL_ASSERT(!ret);
   1c9e0:	2800      	cmp	r0, #0
   1c9e2:	d0d4      	beq.n	1c98e <preempt+0x52>
   1c9e4:	f240 3201 	movw	r2, #769	; 0x301
		LL_ASSERT(ret == -ECANCELED);
   1c9e8:	4910      	ldr	r1, [pc, #64]	; (1ca2c <preempt+0xf0>)
   1c9ea:	4811      	ldr	r0, [pc, #68]	; (1ca30 <preempt+0xf4>)
   1c9ec:	f00a fabf 	bl	26f6e <printk>
   1c9f0:	4040      	eors	r0, r0
   1c9f2:	f380 8811 	msr	BASEPRI, r0
   1c9f6:	f04f 0003 	mov.w	r0, #3
   1c9fa:	df02      	svc	2
   1c9fc:	e7c7      	b.n	1c98e <preempt+0x52>
			if (!iter->is_aborted &&
   1c9fe:	f890 3020 	ldrb.w	r3, [r0, #32]
   1ca02:	079a      	lsls	r2, r3, #30
   1ca04:	d4da      	bmi.n	1c9bc <preempt+0x80>
			    event.curr.param == iter->prepare_param.param) {
   1ca06:	68c2      	ldr	r2, [r0, #12]
			if (!iter->is_aborted &&
   1ca08:	6821      	ldr	r1, [r4, #0]
   1ca0a:	4291      	cmp	r1, r2
   1ca0c:	d1d6      	bne.n	1c9bc <preempt+0x80>
				iter->is_aborted = 1;
   1ca0e:	f043 0302 	orr.w	r3, r3, #2
   1ca12:	f880 3020 	strb.w	r3, [r0, #32]
				iter->abort_cb(&iter->prepare_param,
   1ca16:	6983      	ldr	r3, [r0, #24]
   1ca18:	4798      	blx	r3
   1ca1a:	e7cf      	b.n	1c9bc <preempt+0x80>
		LL_ASSERT(ret == -ECANCELED);
   1ca1c:	378c      	adds	r7, #140	; 0x8c
   1ca1e:	d0b6      	beq.n	1c98e <preempt+0x52>
   1ca20:	f240 3203 	movw	r2, #771	; 0x303
   1ca24:	e7e0      	b.n	1c9e8 <preempt+0xac>
   1ca26:	bf00      	nop
   1ca28:	20004234 	.word	0x20004234
   1ca2c:	0003510c 	.word	0x0003510c
   1ca30:	0002fa94 	.word	0x0002fa94

0001ca34 <preempt_ticker_cb>:
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1ca34:	2200      	movs	r2, #0
{
   1ca36:	b508      	push	{r3, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1ca38:	4611      	mov	r1, r2
   1ca3a:	4b09      	ldr	r3, [pc, #36]	; (1ca60 <preempt_ticker_cb+0x2c>)
   1ca3c:	2001      	movs	r0, #1
   1ca3e:	f7fb fb01 	bl	18044 <mayfly_enqueue>
	LL_ASSERT(!ret);
   1ca42:	b158      	cbz	r0, 1ca5c <preempt_ticker_cb+0x28>
   1ca44:	f240 22c5 	movw	r2, #709	; 0x2c5
   1ca48:	4906      	ldr	r1, [pc, #24]	; (1ca64 <preempt_ticker_cb+0x30>)
   1ca4a:	4807      	ldr	r0, [pc, #28]	; (1ca68 <preempt_ticker_cb+0x34>)
   1ca4c:	f00a fa8f 	bl	26f6e <printk>
   1ca50:	4040      	eors	r0, r0
   1ca52:	f380 8811 	msr	BASEPRI, r0
   1ca56:	f04f 0003 	mov.w	r0, #3
   1ca5a:	df02      	svc	2
}
   1ca5c:	bd08      	pop	{r3, pc}
   1ca5e:	bf00      	nop
   1ca60:	20000d84 	.word	0x20000d84
   1ca64:	0003510c 	.word	0x0003510c
   1ca68:	0002fa94 	.word	0x0002fa94

0001ca6c <lll_init>:
{
   1ca6c:	b510      	push	{r4, lr}
   1ca6e:	4816      	ldr	r0, [pc, #88]	; (1cac8 <lll_init+0x5c>)
   1ca70:	f005 f8e0 	bl	21c34 <z_impl_device_get_binding>
	dev_entropy = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   1ca74:	4b15      	ldr	r3, [pc, #84]	; (1cacc <lll_init+0x60>)
   1ca76:	6018      	str	r0, [r3, #0]
	if (!dev_entropy) {
   1ca78:	b310      	cbz	r0, 1cac0 <lll_init+0x54>
	event.curr.abort_cb = NULL;
   1ca7a:	4b15      	ldr	r3, [pc, #84]	; (1cad0 <lll_init+0x64>)
   1ca7c:	2400      	movs	r4, #0
   1ca7e:	609c      	str	r4, [r3, #8]
	err = lll_clock_init();
   1ca80:	f000 f984 	bl	1cd8c <lll_clock_init>
	if (err < 0) {
   1ca84:	2800      	cmp	r0, #0
   1ca86:	db1a      	blt.n	1cabe <lll_init+0x52>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_BT_CTLR_LLL_PRIO,
   1ca88:	4622      	mov	r2, r4
   1ca8a:	4621      	mov	r1, r4
   1ca8c:	2001      	movs	r0, #1
   1ca8e:	f7ea f95f 	bl	6d50 <z_arm_irq_priority_set>
	IRQ_CONNECT(RTC0_IRQn, CONFIG_BT_CTLR_ULL_HIGH_PRIO,
   1ca92:	4622      	mov	r2, r4
   1ca94:	4621      	mov	r1, r4
   1ca96:	200b      	movs	r0, #11
   1ca98:	f7ea f95a 	bl	6d50 <z_arm_irq_priority_set>
	IRQ_CONNECT(HAL_SWI_RADIO_IRQ, CONFIG_BT_CTLR_LLL_PRIO,
   1ca9c:	4622      	mov	r2, r4
   1ca9e:	4621      	mov	r1, r4
   1caa0:	2018      	movs	r0, #24
   1caa2:	f7ea f955 	bl	6d50 <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
   1caa6:	2001      	movs	r0, #1
   1caa8:	f7ea f920 	bl	6cec <arch_irq_enable>
	irq_enable(RTC0_IRQn);
   1caac:	200b      	movs	r0, #11
   1caae:	f7ea f91d 	bl	6cec <arch_irq_enable>
	irq_enable(HAL_SWI_RADIO_IRQ);
   1cab2:	2018      	movs	r0, #24
   1cab4:	f7ea f91a 	bl	6cec <arch_irq_enable>
	radio_setup();
   1cab8:	f00f fe40 	bl	2c73c <radio_setup>
	return 0;
   1cabc:	4620      	mov	r0, r4
}
   1cabe:	bd10      	pop	{r4, pc}
		return -ENODEV;
   1cac0:	f06f 0012 	mvn.w	r0, #18
   1cac4:	e7fb      	b.n	1cabe <lll_init+0x52>
   1cac6:	bf00      	nop
   1cac8:	000350fc 	.word	0x000350fc
   1cacc:	20004230 	.word	0x20004230
   1cad0:	20004234 	.word	0x20004234

0001cad4 <lll_csrand_get>:
	return entropy_get_entropy(dev_entropy, buf, len);
   1cad4:	4b0c      	ldr	r3, [pc, #48]	; (1cb08 <lll_csrand_get+0x34>)
{
   1cad6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cada:	4606      	mov	r6, r0
	return entropy_get_entropy(dev_entropy, buf, len);
   1cadc:	681c      	ldr	r4, [r3, #0]
   1cade:	b28f      	uxth	r7, r1

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
	const struct entropy_driver_api *api =
   1cae0:	68a5      	ldr	r5, [r4, #8]
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
   1cae2:	682b      	ldr	r3, [r5, #0]
   1cae4:	b943      	cbnz	r3, 1caf8 <lll_csrand_get+0x24>
   1cae6:	4909      	ldr	r1, [pc, #36]	; (1cb0c <lll_csrand_get+0x38>)
   1cae8:	4809      	ldr	r0, [pc, #36]	; (1cb10 <lll_csrand_get+0x3c>)
   1caea:	224c      	movs	r2, #76	; 0x4c
   1caec:	f00a fa3f 	bl	26f6e <printk>
   1caf0:	214c      	movs	r1, #76	; 0x4c
   1caf2:	4806      	ldr	r0, [pc, #24]	; (1cb0c <lll_csrand_get+0x38>)
   1caf4:	f00a fcb4 	bl	27460 <assert_post_action>
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   1caf8:	682b      	ldr	r3, [r5, #0]
   1cafa:	463a      	mov	r2, r7
   1cafc:	4631      	mov	r1, r6
   1cafe:	4620      	mov	r0, r4
}
   1cb00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1cb04:	4718      	bx	r3
   1cb06:	bf00      	nop
   1cb08:	20004230 	.word	0x20004230
   1cb0c:	000350cf 	.word	0x000350cf
   1cb10:	0002fa94 	.word	0x0002fa94

0001cb14 <lll_csrand_isr_get>:
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   1cb14:	4b08      	ldr	r3, [pc, #32]	; (1cb38 <lll_csrand_isr_get+0x24>)
{
   1cb16:	b430      	push	{r4, r5}
   1cb18:	4605      	mov	r5, r0
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   1cb1a:	6818      	ldr	r0, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   1cb1c:	6883      	ldr	r3, [r0, #8]
   1cb1e:	685c      	ldr	r4, [r3, #4]
   1cb20:	b28a      	uxth	r2, r1
   1cb22:	b124      	cbz	r4, 1cb2e <lll_csrand_isr_get+0x1a>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   1cb24:	4629      	mov	r1, r5
   1cb26:	46a4      	mov	ip, r4
   1cb28:	2300      	movs	r3, #0
}
   1cb2a:	bc30      	pop	{r4, r5}
   1cb2c:	4760      	bx	ip
   1cb2e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1cb32:	bc30      	pop	{r4, r5}
   1cb34:	4770      	bx	lr
   1cb36:	bf00      	nop
   1cb38:	20004230 	.word	0x20004230

0001cb3c <lll_resume>:
{
   1cb3c:	b507      	push	{r0, r1, r2, lr}
		      next->prio, &next->prepare_param, next->is_resume);
   1cb3e:	f890 3020 	ldrb.w	r3, [r0, #32]
	ret = prepare(next->is_abort_cb, next->abort_cb, next->prepare_cb,
   1cb42:	f003 0301 	and.w	r3, r3, #1
   1cb46:	e9cd 0300 	strd	r0, r3, [sp]
   1cb4a:	69c3      	ldr	r3, [r0, #28]
   1cb4c:	6902      	ldr	r2, [r0, #16]
   1cb4e:	e9d0 0105 	ldrd	r0, r1, [r0, #20]
   1cb52:	f7ff fe93 	bl	1c87c <prepare>
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   1cb56:	b160      	cbz	r0, 1cb72 <lll_resume+0x36>
   1cb58:	3077      	adds	r0, #119	; 0x77
   1cb5a:	d00a      	beq.n	1cb72 <lll_resume+0x36>
   1cb5c:	22e9      	movs	r2, #233	; 0xe9
   1cb5e:	4906      	ldr	r1, [pc, #24]	; (1cb78 <lll_resume+0x3c>)
   1cb60:	4806      	ldr	r0, [pc, #24]	; (1cb7c <lll_resume+0x40>)
   1cb62:	f00a fa04 	bl	26f6e <printk>
   1cb66:	4040      	eors	r0, r0
   1cb68:	f380 8811 	msr	BASEPRI, r0
   1cb6c:	f04f 0003 	mov.w	r0, #3
   1cb70:	df02      	svc	2
}
   1cb72:	b003      	add	sp, #12
   1cb74:	f85d fb04 	ldr.w	pc, [sp], #4
   1cb78:	0003510c 	.word	0x0003510c
   1cb7c:	0002fa94 	.word	0x0002fa94

0001cb80 <lll_disable>:
{
   1cb80:	b513      	push	{r0, r1, r4, lr}
   1cb82:	4b1a      	ldr	r3, [pc, #104]	; (1cbec <lll_disable+0x6c>)
	if (!param || (param == event.curr.param)) {
   1cb84:	4604      	mov	r4, r0
   1cb86:	b110      	cbz	r0, 1cb8e <lll_disable+0xe>
   1cb88:	681a      	ldr	r2, [r3, #0]
   1cb8a:	4282      	cmp	r2, r0
   1cb8c:	d105      	bne.n	1cb9a <lll_disable+0x1a>
		if (event.curr.abort_cb && event.curr.param) {
   1cb8e:	689a      	ldr	r2, [r3, #8]
   1cb90:	b16a      	cbz	r2, 1cbae <lll_disable+0x2e>
   1cb92:	6819      	ldr	r1, [r3, #0]
   1cb94:	b159      	cbz	r1, 1cbae <lll_disable+0x2e>
			event.curr.abort_cb(NULL, event.curr.param);
   1cb96:	2000      	movs	r0, #0
   1cb98:	4790      	blx	r2
		idx = UINT8_MAX;
   1cb9a:	23ff      	movs	r3, #255	; 0xff
   1cb9c:	f88d 3007 	strb.w	r3, [sp, #7]
			next = ull_prepare_dequeue_iter(&idx);
   1cba0:	f10d 0007 	add.w	r0, sp, #7
   1cba4:	f7fd fec2 	bl	1a92c <ull_prepare_dequeue_iter>
		while (next) {
   1cba8:	b978      	cbnz	r0, 1cbca <lll_disable+0x4a>
}
   1cbaa:	b002      	add	sp, #8
   1cbac:	bd10      	pop	{r4, pc}
			LL_ASSERT(!param);
   1cbae:	2c00      	cmp	r4, #0
   1cbb0:	d0f3      	beq.n	1cb9a <lll_disable+0x1a>
   1cbb2:	22f3      	movs	r2, #243	; 0xf3
   1cbb4:	490e      	ldr	r1, [pc, #56]	; (1cbf0 <lll_disable+0x70>)
   1cbb6:	480f      	ldr	r0, [pc, #60]	; (1cbf4 <lll_disable+0x74>)
   1cbb8:	f00a f9d9 	bl	26f6e <printk>
   1cbbc:	4040      	eors	r0, r0
   1cbbe:	f380 8811 	msr	BASEPRI, r0
   1cbc2:	f04f 0003 	mov.w	r0, #3
   1cbc6:	df02      	svc	2
   1cbc8:	e7e7      	b.n	1cb9a <lll_disable+0x1a>
			if (!next->is_aborted &&
   1cbca:	f890 3020 	ldrb.w	r3, [r0, #32]
   1cbce:	079b      	lsls	r3, r3, #30
   1cbd0:	d4e6      	bmi.n	1cba0 <lll_disable+0x20>
   1cbd2:	68c1      	ldr	r1, [r0, #12]
   1cbd4:	b10c      	cbz	r4, 1cbda <lll_disable+0x5a>
			    (!param || (param == next->prepare_param.param))) {
   1cbd6:	428c      	cmp	r4, r1
   1cbd8:	d1e2      	bne.n	1cba0 <lll_disable+0x20>
				next->is_aborted = 1;
   1cbda:	f890 3020 	ldrb.w	r3, [r0, #32]
   1cbde:	f043 0302 	orr.w	r3, r3, #2
   1cbe2:	f880 3020 	strb.w	r3, [r0, #32]
				next->abort_cb(&next->prepare_param,
   1cbe6:	6983      	ldr	r3, [r0, #24]
   1cbe8:	4798      	blx	r3
   1cbea:	e7d9      	b.n	1cba0 <lll_disable+0x20>
   1cbec:	20004234 	.word	0x20004234
   1cbf0:	0003510c 	.word	0x0003510c
   1cbf4:	0002fa94 	.word	0x0002fa94

0001cbf8 <lll_done>:
{
   1cbf8:	b510      	push	{r4, lr}
   1cbfa:	4604      	mov	r4, r0
	next = ull_prepare_dequeue_get();
   1cbfc:	f7fd fd66 	bl	1a6cc <ull_prepare_dequeue_get>
	LL_ASSERT(!param || next);
   1cc00:	b174      	cbz	r4, 1cc20 <lll_done+0x28>
   1cc02:	b958      	cbnz	r0, 1cc1c <lll_done+0x24>
   1cc04:	f44f 7293 	mov.w	r2, #294	; 0x126
   1cc08:	4919      	ldr	r1, [pc, #100]	; (1cc70 <lll_done+0x78>)
   1cc0a:	481a      	ldr	r0, [pc, #104]	; (1cc74 <lll_done+0x7c>)
   1cc0c:	f00a f9af 	bl	26f6e <printk>
   1cc10:	4040      	eors	r0, r0
   1cc12:	f380 8811 	msr	BASEPRI, r0
   1cc16:	f04f 0003 	mov.w	r0, #3
   1cc1a:	df02      	svc	2
		ull = HDR_ULL(((struct lll_hdr *)param)->parent);
   1cc1c:	6820      	ldr	r0, [r4, #0]
   1cc1e:	e014      	b.n	1cc4a <lll_done+0x52>
		LL_ASSERT(event.curr.abort_cb);
   1cc20:	4c15      	ldr	r4, [pc, #84]	; (1cc78 <lll_done+0x80>)
   1cc22:	68a3      	ldr	r3, [r4, #8]
   1cc24:	b95b      	cbnz	r3, 1cc3e <lll_done+0x46>
   1cc26:	f44f 7296 	mov.w	r2, #300	; 0x12c
   1cc2a:	4911      	ldr	r1, [pc, #68]	; (1cc70 <lll_done+0x78>)
   1cc2c:	4811      	ldr	r0, [pc, #68]	; (1cc74 <lll_done+0x7c>)
   1cc2e:	f00a f99e 	bl	26f6e <printk>
   1cc32:	4040      	eors	r0, r0
   1cc34:	f380 8811 	msr	BASEPRI, r0
   1cc38:	f04f 0003 	mov.w	r0, #3
   1cc3c:	df02      	svc	2
		param = event.curr.param;
   1cc3e:	6820      	ldr	r0, [r4, #0]
		event.curr.abort_cb = NULL;
   1cc40:	2300      	movs	r3, #0
   1cc42:	60a3      	str	r3, [r4, #8]
		event.curr.param = NULL;
   1cc44:	6023      	str	r3, [r4, #0]
		if (param) {
   1cc46:	b108      	cbz	r0, 1cc4c <lll_done+0x54>
			ull = HDR_ULL(((struct lll_hdr *)param)->parent);
   1cc48:	6800      	ldr	r0, [r0, #0]
   1cc4a:	3010      	adds	r0, #16
	evdone = ull_event_done(ull);
   1cc4c:	f7fd fe9c 	bl	1a988 <ull_event_done>
	LL_ASSERT(evdone);
   1cc50:	b958      	cbnz	r0, 1cc6a <lll_done+0x72>
   1cc52:	f44f 72a2 	mov.w	r2, #324	; 0x144
   1cc56:	4906      	ldr	r1, [pc, #24]	; (1cc70 <lll_done+0x78>)
   1cc58:	4806      	ldr	r0, [pc, #24]	; (1cc74 <lll_done+0x7c>)
   1cc5a:	f00a f988 	bl	26f6e <printk>
   1cc5e:	4040      	eors	r0, r0
   1cc60:	f380 8811 	msr	BASEPRI, r0
   1cc64:	f04f 0003 	mov.w	r0, #3
   1cc68:	df02      	svc	2
}
   1cc6a:	2000      	movs	r0, #0
   1cc6c:	bd10      	pop	{r4, pc}
   1cc6e:	bf00      	nop
   1cc70:	0003510c 	.word	0x0003510c
   1cc74:	0002fa94 	.word	0x0002fa94
   1cc78:	20004234 	.word	0x20004234

0001cc7c <lll_is_done>:
	return !event.curr.abort_cb;
   1cc7c:	4b02      	ldr	r3, [pc, #8]	; (1cc88 <lll_is_done+0xc>)
   1cc7e:	6898      	ldr	r0, [r3, #8]
}
   1cc80:	fab0 f080 	clz	r0, r0
   1cc84:	0940      	lsrs	r0, r0, #5
   1cc86:	4770      	bx	lr
   1cc88:	20004234 	.word	0x20004234

0001cc8c <lll_chan_set>:
	switch (chan) {
   1cc8c:	2826      	cmp	r0, #38	; 0x26
{
   1cc8e:	b510      	push	{r4, lr}
   1cc90:	4604      	mov	r4, r0
	switch (chan) {
   1cc92:	d00b      	beq.n	1ccac <lll_chan_set+0x20>
   1cc94:	2827      	cmp	r0, #39	; 0x27
   1cc96:	d00b      	beq.n	1ccb0 <lll_chan_set+0x24>
   1cc98:	2825      	cmp	r0, #37	; 0x25
   1cc9a:	d10b      	bne.n	1ccb4 <lll_chan_set+0x28>
		radio_freq_chan_set(2);
   1cc9c:	2002      	movs	r0, #2
		radio_freq_chan_set(26);
   1cc9e:	f001 fbd7 	bl	1e450 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   1cca2:	4620      	mov	r0, r4
}
   1cca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   1cca8:	f001 bbd8 	b.w	1e45c <radio_whiten_iv_set>
		radio_freq_chan_set(26);
   1ccac:	201a      	movs	r0, #26
   1ccae:	e7f6      	b.n	1cc9e <lll_chan_set+0x12>
		radio_freq_chan_set(80);
   1ccb0:	2050      	movs	r0, #80	; 0x50
   1ccb2:	e7f4      	b.n	1cc9e <lll_chan_set+0x12>
		if (chan < 11) {
   1ccb4:	280a      	cmp	r0, #10
   1ccb6:	d802      	bhi.n	1ccbe <lll_chan_set+0x32>
			radio_freq_chan_set(4 + (chan * 2U));
   1ccb8:	3002      	adds	r0, #2
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
   1ccba:	0040      	lsls	r0, r0, #1
   1ccbc:	e7ef      	b.n	1cc9e <lll_chan_set+0x12>
		} else if (chan < 40) {
   1ccbe:	2827      	cmp	r0, #39	; 0x27
   1ccc0:	d801      	bhi.n	1ccc6 <lll_chan_set+0x3a>
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
   1ccc2:	3003      	adds	r0, #3
   1ccc4:	e7f9      	b.n	1ccba <lll_chan_set+0x2e>
			LL_ASSERT(0);
   1ccc6:	f240 12a7 	movw	r2, #423	; 0x1a7
   1ccca:	4905      	ldr	r1, [pc, #20]	; (1cce0 <lll_chan_set+0x54>)
   1cccc:	4805      	ldr	r0, [pc, #20]	; (1cce4 <lll_chan_set+0x58>)
   1ccce:	f00a f94e 	bl	26f6e <printk>
   1ccd2:	4040      	eors	r0, r0
   1ccd4:	f380 8811 	msr	BASEPRI, r0
   1ccd8:	f04f 0003 	mov.w	r0, #3
   1ccdc:	df02      	svc	2
   1ccde:	e7e0      	b.n	1cca2 <lll_chan_set+0x16>
   1cce0:	0003510c 	.word	0x0003510c
   1cce4:	0002fa94 	.word	0x0002fa94

0001cce8 <lll_isr_cleanup>:
{
   1cce8:	b508      	push	{r3, lr}
	radio_isr_set(isr_race, param);
   1ccea:	4601      	mov	r1, r0
   1ccec:	480f      	ldr	r0, [pc, #60]	; (1cd2c <lll_isr_cleanup+0x44>)
   1ccee:	f001 fb55 	bl	1e39c <radio_isr_set>
	if (!radio_is_idle()) {
   1ccf2:	f001 fc53 	bl	1e59c <radio_is_idle>
   1ccf6:	b908      	cbnz	r0, 1ccfc <lll_isr_cleanup+0x14>
		radio_disable();
   1ccf8:	f001 fc1e 	bl	1e538 <radio_disable>
	radio_tmr_stop();
   1ccfc:	f001 fdb2 	bl	1e864 <radio_tmr_stop>
	err = lll_hfclock_off();
   1cd00:	f000 f886 	bl	1ce10 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1cd04:	2800      	cmp	r0, #0
   1cd06:	da0b      	bge.n	1cd20 <lll_isr_cleanup+0x38>
   1cd08:	f240 220a 	movw	r2, #522	; 0x20a
   1cd0c:	4908      	ldr	r1, [pc, #32]	; (1cd30 <lll_isr_cleanup+0x48>)
   1cd0e:	4809      	ldr	r0, [pc, #36]	; (1cd34 <lll_isr_cleanup+0x4c>)
   1cd10:	f00a f92d 	bl	26f6e <printk>
   1cd14:	4040      	eors	r0, r0
   1cd16:	f380 8811 	msr	BASEPRI, r0
   1cd1a:	f04f 0003 	mov.w	r0, #3
   1cd1e:	df02      	svc	2
	lll_done(NULL);
   1cd20:	2000      	movs	r0, #0
}
   1cd22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   1cd26:	f7ff bf67 	b.w	1cbf8 <lll_done>
   1cd2a:	bf00      	nop
   1cd2c:	0002c24b 	.word	0x0002c24b
   1cd30:	0003510c 	.word	0x0003510c
   1cd34:	0002fa94 	.word	0x0002fa94

0001cd38 <blocking_on>:

	k_sem_give(&clk_state->sem);
}

static int blocking_on(struct onoff_manager *mgr, uint32_t timeout)
{
   1cd38:	b530      	push	{r4, r5, lr}
   1cd3a:	4604      	mov	r4, r0
   1cd3c:	b08b      	sub	sp, #44	; 0x2c
   1cd3e:	460d      	mov	r5, r1
	return z_impl_k_sem_init(sem, initial_count, limit);
   1cd40:	2201      	movs	r2, #1
   1cd42:	2100      	movs	r1, #0
   1cd44:	a804      	add	r0, sp, #16
   1cd46:	f010 fae8 	bl	2d31a <z_impl_k_sem_init>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
   1cd4a:	2300      	movs	r3, #0
   1cd4c:	9303      	str	r3, [sp, #12]
   1cd4e:	4b0e      	ldr	r3, [pc, #56]	; (1cd88 <blocking_on+0x50>)
   1cd50:	9301      	str	r3, [sp, #4]
	struct lll_clock_state state;
	int err;

	k_sem_init(&state.sem, 0, 1);
	sys_notify_init_callback(&state.cli.notify, clock_ready);
	err = onoff_request(mgr, &state.cli);
   1cd52:	4669      	mov	r1, sp
   1cd54:	2303      	movs	r3, #3
   1cd56:	4620      	mov	r0, r4
   1cd58:	9302      	str	r3, [sp, #8]
   1cd5a:	f7e7 fdd3 	bl	4904 <onoff_request>
	if (err < 0) {
   1cd5e:	2800      	cmp	r0, #0
   1cd60:	db10      	blt.n	1cd84 <blocking_on+0x4c>
   1cd62:	f44f 4400 	mov.w	r4, #32768	; 0x8000
   1cd66:	f240 30e7 	movw	r0, #999	; 0x3e7
   1cd6a:	2100      	movs	r1, #0
   1cd6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1cd70:	2300      	movs	r3, #0
   1cd72:	fbe4 0105 	umlal	r0, r1, r4, r5
   1cd76:	f7e4 fe59 	bl	1a2c <__aeabi_uldivmod>
   1cd7a:	4602      	mov	r2, r0
   1cd7c:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   1cd7e:	a804      	add	r0, sp, #16
   1cd80:	f006 fdd8 	bl	23934 <z_impl_k_sem_take>
		return err;
	}

	return k_sem_take(&state.sem, K_MSEC(timeout));
}
   1cd84:	b00b      	add	sp, #44	; 0x2c
   1cd86:	bd30      	pop	{r4, r5, pc}
   1cd88:	0002c323 	.word	0x0002c323

0001cd8c <lll_clock_init>:

int lll_clock_init(void)
{
   1cd8c:	b508      	push	{r3, lr}
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   1cd8e:	2001      	movs	r0, #1
   1cd90:	f7e9 faee 	bl	6370 <z_nrf_clock_control_get_onoff>
	*notify = (struct sys_notify){
   1cd94:	4904      	ldr	r1, [pc, #16]	; (1cda8 <lll_clock_init+0x1c>)
   1cd96:	2300      	movs	r3, #0
   1cd98:	604b      	str	r3, [r1, #4]
   1cd9a:	60cb      	str	r3, [r1, #12]
   1cd9c:	2301      	movs	r3, #1
   1cd9e:	608b      	str	r3, [r1, #8]

	sys_notify_init_spinwait(&lf_cli.notify);

	return onoff_request(mgr, &lf_cli);
}
   1cda0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return onoff_request(mgr, &lf_cli);
   1cda4:	f7e7 bdae 	b.w	4904 <onoff_request>
   1cda8:	2000424c 	.word	0x2000424c

0001cdac <lll_clock_wait>:
{
	struct onoff_manager *mgr;
	static bool done;
	int err;

	if (done) {
   1cdac:	4b0c      	ldr	r3, [pc, #48]	; (1cde0 <lll_clock_wait+0x34>)
   1cdae:	781a      	ldrb	r2, [r3, #0]
{
   1cdb0:	b510      	push	{r4, lr}
	if (done) {
   1cdb2:	b10a      	cbz	r2, 1cdb8 <lll_clock_wait+0xc>
		return 0;
   1cdb4:	2000      	movs	r0, #0
	if (err != ONOFF_STATE_ON) {
		return -EIO;
	}

	return 0;
}
   1cdb6:	bd10      	pop	{r4, pc}
	done = true;
   1cdb8:	2001      	movs	r0, #1
   1cdba:	7018      	strb	r0, [r3, #0]
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   1cdbc:	f7e9 fad8 	bl	6370 <z_nrf_clock_control_get_onoff>
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   1cdc0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   1cdc4:	4604      	mov	r4, r0
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   1cdc6:	f7ff ffb7 	bl	1cd38 <blocking_on>
	if (err) {
   1cdca:	2800      	cmp	r0, #0
   1cdcc:	d1f3      	bne.n	1cdb6 <lll_clock_wait+0xa>
	err = onoff_release(mgr);
   1cdce:	4620      	mov	r0, r4
   1cdd0:	f7e7 fe1a 	bl	4a08 <onoff_release>
	if (err != ONOFF_STATE_ON) {
   1cdd4:	2802      	cmp	r0, #2
   1cdd6:	d0ed      	beq.n	1cdb4 <lll_clock_wait+0x8>
		return -EIO;
   1cdd8:	f06f 0004 	mvn.w	r0, #4
   1cddc:	e7eb      	b.n	1cdb6 <lll_clock_wait+0xa>
   1cdde:	bf00      	nop
   1cde0:	20004885 	.word	0x20004885

0001cde4 <lll_hfclock_on>:

int lll_hfclock_on(void)
{
   1cde4:	b508      	push	{r3, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1cde6:	4b09      	ldr	r3, [pc, #36]	; (1ce0c <lll_hfclock_on+0x28>)
   1cde8:	f3bf 8f5b 	dmb	ish
   1cdec:	e853 2f00 	ldrex	r2, [r3]
   1cdf0:	1c51      	adds	r1, r2, #1
   1cdf2:	e843 1000 	strex	r0, r1, [r3]
   1cdf6:	2800      	cmp	r0, #0
   1cdf8:	d1f8      	bne.n	1cdec <lll_hfclock_on+0x8>
   1cdfa:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&hf_refcnt) > 0) {
   1cdfe:	2a00      	cmp	r2, #0
   1ce00:	dc01      	bgt.n	1ce06 <lll_hfclock_on+0x22>
		return 0;
	}

	z_nrf_clock_bt_ctlr_hf_request();
   1ce02:	f7e9 fabd 	bl	6380 <z_nrf_clock_bt_ctlr_hf_request>
	DEBUG_RADIO_XTAL(1);

	return 0;
}
   1ce06:	2000      	movs	r0, #0
   1ce08:	bd08      	pop	{r3, pc}
   1ce0a:	bf00      	nop
   1ce0c:	20004248 	.word	0x20004248

0001ce10 <lll_hfclock_off>:

	return err;
}

int lll_hfclock_off(void)
{
   1ce10:	b508      	push	{r3, lr}
	if (hf_refcnt < 1) {
   1ce12:	4b0c      	ldr	r3, [pc, #48]	; (1ce44 <lll_hfclock_off+0x34>)
   1ce14:	681a      	ldr	r2, [r3, #0]
   1ce16:	2a00      	cmp	r2, #0
   1ce18:	dd10      	ble.n	1ce3c <lll_hfclock_off+0x2c>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1ce1a:	f3bf 8f5b 	dmb	ish
   1ce1e:	e853 2f00 	ldrex	r2, [r3]
   1ce22:	1e51      	subs	r1, r2, #1
   1ce24:	e843 1000 	strex	r0, r1, [r3]
   1ce28:	2800      	cmp	r0, #0
   1ce2a:	d1f8      	bne.n	1ce1e <lll_hfclock_off+0xe>
   1ce2c:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
	}

	if (atomic_dec(&hf_refcnt) > 1) {
   1ce30:	2a01      	cmp	r2, #1
   1ce32:	dc01      	bgt.n	1ce38 <lll_hfclock_off+0x28>
		return 0;
	}

	z_nrf_clock_bt_ctlr_hf_release();
   1ce34:	f7e9 faba 	bl	63ac <z_nrf_clock_bt_ctlr_hf_release>
		return 0;
   1ce38:	2000      	movs	r0, #0
   1ce3a:	e001      	b.n	1ce40 <lll_hfclock_off+0x30>
		return -EALREADY;
   1ce3c:	f06f 0077 	mvn.w	r0, #119	; 0x77
	DEBUG_RADIO_XTAL(0);

	return 0;
}
   1ce40:	bd08      	pop	{r3, pc}
   1ce42:	bf00      	nop
   1ce44:	20004248 	.word	0x20004248

0001ce48 <lll_clock_ppm_get>:
}

uint32_t lll_clock_ppm_get(uint8_t sca)
{
	return sca_ppm_lut[sca];
}
   1ce48:	4b01      	ldr	r3, [pc, #4]	; (1ce50 <lll_clock_ppm_get+0x8>)
   1ce4a:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   1ce4e:	4770      	bx	lr
   1ce50:	0002f6c8 	.word	0x0002f6c8

0001ce54 <is_abort_cb>:
	struct lll_adv *lll = curr;
	struct pdu_adv *pdu;
#endif /* CONFIG_BT_PERIPHERAL */

	/* TODO: prio check */
	if (next != curr) {
   1ce54:	4282      	cmp	r2, r0
{
   1ce56:	b508      	push	{r3, lr}
	if (next != curr) {
   1ce58:	d01a      	beq.n	1ce90 <is_abort_cb+0x3c>
		if (0) {
#if defined(CONFIG_BT_PERIPHERAL)
		} else if (lll->is_hdcd) {
   1ce5a:	7b12      	ldrb	r2, [r2, #12]
   1ce5c:	07d2      	lsls	r2, r2, #31
   1ce5e:	d524      	bpl.n	1ceaa <is_abort_cb+0x56>
			int err;

			/* wrap back after the pre-empter */
			*resume_cb = resume_prepare_cb;
   1ce60:	4a13      	ldr	r2, [pc, #76]	; (1ceb0 <is_abort_cb+0x5c>)
   1ce62:	601a      	str	r2, [r3, #0]
			*resume_prio = 0; /* TODO: */
   1ce64:	9b02      	ldr	r3, [sp, #8]
   1ce66:	2200      	movs	r2, #0
   1ce68:	601a      	str	r2, [r3, #0]

			/* Retain HF clk */
			err = lll_hfclock_on();
   1ce6a:	f7ff ffbb 	bl	1cde4 <lll_hfclock_on>
			LL_ASSERT(err >= 0);
   1ce6e:	2800      	cmp	r0, #0
   1ce70:	da0b      	bge.n	1ce8a <is_abort_cb+0x36>
   1ce72:	f44f 7213 	mov.w	r2, #588	; 0x24c
   1ce76:	490f      	ldr	r1, [pc, #60]	; (1ceb4 <is_abort_cb+0x60>)
   1ce78:	480f      	ldr	r0, [pc, #60]	; (1ceb8 <is_abort_cb+0x64>)
   1ce7a:	f00a f878 	bl	26f6e <printk>
   1ce7e:	4040      	eors	r0, r0
   1ce80:	f380 8811 	msr	BASEPRI, r0
   1ce84:	f04f 0003 	mov.w	r0, #3
   1ce88:	df02      	svc	2
   1ce8a:	f06f 000a 	mvn.w	r0, #10
   1ce8e:	e00b      	b.n	1cea8 <is_abort_cb+0x54>
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
}

static inline struct pdu_adv *lll_adv_data_curr_get(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
   1ce90:	7c13      	ldrb	r3, [r2, #16]
   1ce92:	eb02 0283 	add.w	r2, r2, r3, lsl #2
		}
	}

#if defined(CONFIG_BT_PERIPHERAL)
	pdu = lll_adv_data_curr_get(lll);
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   1ce96:	6953      	ldr	r3, [r2, #20]
   1ce98:	781b      	ldrb	r3, [r3, #0]
   1ce9a:	f003 030f 	and.w	r3, r3, #15
   1ce9e:	2b01      	cmp	r3, #1
		return 0;
   1cea0:	bf14      	ite	ne
   1cea2:	f06f 008b 	mvnne.w	r0, #139	; 0x8b
   1cea6:	2000      	moveq	r0, #0
	}
#endif /* CONFIG_BT_PERIPHERAL */

	return -ECANCELED;
}
   1cea8:	bd08      	pop	{r3, pc}
			return -ECANCELED;
   1ceaa:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   1ceae:	e7fb      	b.n	1cea8 <is_abort_cb+0x54>
   1ceb0:	0002c355 	.word	0x0002c355
   1ceb4:	00035164 	.word	0x00035164
   1ceb8:	0002fa94 	.word	0x0002fa94

0001cebc <abort_cb>:

static void abort_cb(struct lll_prepare_param *prepare_param, void *param)
{
   1cebc:	b510      	push	{r4, lr}
   1cebe:	460c      	mov	r4, r1
	int err;

	/* NOTE: This is not a prepare being cancelled */
	if (!prepare_param) {
   1cec0:	b930      	cbnz	r0, 1ced0 <abort_cb+0x14>
		/* Perform event abort here.
		 * After event has been cleanly aborted, clean up resources
		 * and dispatch event done.
		 */
		radio_isr_set(isr_abort, param);
   1cec2:	480e      	ldr	r0, [pc, #56]	; (1cefc <abort_cb+0x40>)
   1cec4:	f001 fa6a 	bl	1e39c <radio_isr_set>
	 */
	err = lll_hfclock_off();
	LL_ASSERT(err >= 0);

	lll_done(param);
}
   1cec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   1cecc:	f001 bb34 	b.w	1e538 <radio_disable>
	err = lll_hfclock_off();
   1ced0:	f7ff ff9e 	bl	1ce10 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1ced4:	2800      	cmp	r0, #0
   1ced6:	da0b      	bge.n	1cef0 <abort_cb+0x34>
   1ced8:	f240 2272 	movw	r2, #626	; 0x272
   1cedc:	4908      	ldr	r1, [pc, #32]	; (1cf00 <abort_cb+0x44>)
   1cede:	4809      	ldr	r0, [pc, #36]	; (1cf04 <abort_cb+0x48>)
   1cee0:	f00a f845 	bl	26f6e <printk>
   1cee4:	4040      	eors	r0, r0
   1cee6:	f380 8811 	msr	BASEPRI, r0
   1ceea:	f04f 0003 	mov.w	r0, #3
   1ceee:	df02      	svc	2
	lll_done(param);
   1cef0:	4620      	mov	r0, r4
}
   1cef2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1cef6:	f7ff be7f 	b.w	1cbf8 <lll_done>
   1cefa:	bf00      	nop
   1cefc:	0002c32f 	.word	0x0002c32f
   1cf00:	00035164 	.word	0x00035164
   1cf04:	0002fa94 	.word	0x0002fa94

0001cf08 <isr_tx>:

static void isr_tx(void *param)
{
   1cf08:	b538      	push	{r3, r4, r5, lr}
   1cf0a:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CTLR_PROFILE_ISR)) {
		lll_prof_latency_capture();
	}

	/* Clear radio tx status and events */
	lll_isr_tx_status_reset();
   1cf0c:	f00f f9e3 	bl	2c2d6 <lll_isr_tx_status_reset>

	/* setup tIFS switching */
	radio_tmr_tifs_set(EVENT_IFS_US);
   1cf10:	2096      	movs	r0, #150	; 0x96
   1cf12:	f001 fbff 	bl	1e714 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(phy_p, 0, phy_p, 0);
   1cf16:	2300      	movs	r3, #0
   1cf18:	461a      	mov	r2, r3
   1cf1a:	4619      	mov	r1, r3
   1cf1c:	4618      	mov	r0, r3
   1cf1e:	f001 fb71 	bl	1e604 <radio_switch_complete_and_tx>

	radio_pkt_rx_set(radio_pkt_scratch_get());
   1cf22:	f001 fb5f 	bl	1e5e4 <radio_pkt_scratch_get>
   1cf26:	f001 faef 	bl	1e508 <radio_pkt_rx_set>
	/* assert if radio packet ptr is not set and radio started rx */
	LL_ASSERT(!radio_is_ready());
   1cf2a:	f001 fb23 	bl	1e574 <radio_is_ready>
   1cf2e:	b158      	cbz	r0, 1cf48 <isr_tx+0x40>
   1cf30:	f240 228e 	movw	r2, #654	; 0x28e
   1cf34:	4911      	ldr	r1, [pc, #68]	; (1cf7c <isr_tx+0x74>)
   1cf36:	4812      	ldr	r0, [pc, #72]	; (1cf80 <isr_tx+0x78>)
   1cf38:	f00a f819 	bl	26f6e <printk>
   1cf3c:	4040      	eors	r0, r0
   1cf3e:	f380 8811 	msr	BASEPRI, r0
   1cf42:	f04f 0003 	mov.w	r0, #3
   1cf46:	df02      	svc	2

	if (IS_ENABLED(CONFIG_BT_CTLR_PROFILE_ISR)) {
		lll_prof_cputime_capture();
	}

	radio_isr_set(isr_rx, param);
   1cf48:	4621      	mov	r1, r4
   1cf4a:	480e      	ldr	r0, [pc, #56]	; (1cf84 <isr_tx+0x7c>)
   1cf4c:	f001 fa26 	bl	1e39c <radio_isr_set>
		radio_ar_configure(count, irks, 0);
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */

	/* +/- 2us active clock jitter, +1 us hcto compensation */
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1cf50:	f001 fcda 	bl	1e908 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   1cf54:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1cf56:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   1cf58:	4608      	mov	r0, r1
   1cf5a:	f00f fc15 	bl	2c788 <radio_rx_chain_delay_get>
	hcto += addr_us_get(phy_p);
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   1cf5e:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   1cf60:	4605      	mov	r5, r0
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   1cf62:	4608      	mov	r0, r1
   1cf64:	f00f fc0c 	bl	2c780 <radio_tx_chain_delay_get>
   1cf68:	442c      	add	r4, r5
   1cf6a:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   1cf6c:	1a20      	subs	r0, r4, r0
   1cf6e:	f001 fc85 	bl	1e87c <radio_tmr_hcto_configure>
		/* NOTE: as scratch packet is used to receive, it is safe to
		 * generate profile event using rx nodes.
		 */
		lll_prof_send();
	}
}
   1cf72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_tmr_end_capture();
   1cf76:	f001 bcb9 	b.w	1e8ec <radio_tmr_end_capture>
   1cf7a:	bf00      	nop
   1cf7c:	00035164 	.word	0x00035164
   1cf80:	0002fa94 	.word	0x0002fa94
   1cf84:	0001d391 	.word	0x0001d391

0001cf88 <lll_adv_init>:
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   1cf88:	4b08      	ldr	r3, [pc, #32]	; (1cfac <lll_adv_init+0x24>)
{
   1cf8a:	b510      	push	{r4, lr}
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   1cf8c:	1d18      	adds	r0, r3, #4
   1cf8e:	2205      	movs	r2, #5
   1cf90:	2128      	movs	r1, #40	; 0x28
   1cf92:	f00e fb75 	bl	2b680 <mem_init>
	MFIFO_INIT(pdu_free);
   1cf96:	4b06      	ldr	r3, [pc, #24]	; (1cfb0 <lll_adv_init+0x28>)
   1cf98:	2400      	movs	r4, #0
   1cf9a:	805c      	strh	r4, [r3, #2]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1cf9c:	2203      	movs	r2, #3
   1cf9e:	4621      	mov	r1, r4
   1cfa0:	4804      	ldr	r0, [pc, #16]	; (1cfb4 <lll_adv_init+0x2c>)
   1cfa2:	f010 f9ba 	bl	2d31a <z_impl_k_sem_init>
}
   1cfa6:	4620      	mov	r0, r4
   1cfa8:	bd10      	pop	{r4, pc}
   1cfaa:	bf00      	nop
   1cfac:	2000425c 	.word	0x2000425c
   1cfb0:	20000d94 	.word	0x20000d94
   1cfb4:	20004328 	.word	0x20004328

0001cfb8 <lll_adv_data_init>:
{
   1cfb8:	b510      	push	{r4, lr}
   1cfba:	4604      	mov	r4, r0
	p = mem_acquire(&mem_pdu.free);
   1cfbc:	4805      	ldr	r0, [pc, #20]	; (1cfd4 <lll_adv_data_init+0x1c>)
   1cfbe:	f00e fb78 	bl	2b6b2 <mem_acquire>
	if (!p) {
   1cfc2:	b120      	cbz	r0, 1cfce <lll_adv_data_init+0x16>
	p->len = 0U;
   1cfc4:	2300      	movs	r3, #0
   1cfc6:	7043      	strb	r3, [r0, #1]
	pdu->pdu[0] = (void *)p;
   1cfc8:	6060      	str	r0, [r4, #4]
	return 0;
   1cfca:	4618      	mov	r0, r3
}
   1cfcc:	bd10      	pop	{r4, pc}
		return -ENOMEM;
   1cfce:	f06f 000b 	mvn.w	r0, #11
   1cfd2:	e7fb      	b.n	1cfcc <lll_adv_data_init+0x14>
   1cfd4:	2000425c 	.word	0x2000425c

0001cfd8 <lll_adv_pdu_alloc>:
{
   1cfd8:	b570      	push	{r4, r5, r6, lr}
	first = pdu->first;
   1cfda:	7802      	ldrb	r2, [r0, #0]
	last = pdu->last;
   1cfdc:	7843      	ldrb	r3, [r0, #1]
	first = pdu->first;
   1cfde:	b2d2      	uxtb	r2, r2
	if (first == last) {
   1cfe0:	429a      	cmp	r2, r3
   1cfe2:	d132      	bne.n	1d04a <lll_adv_pdu_alloc+0x72>
		last++;
   1cfe4:	3301      	adds	r3, #1
   1cfe6:	b2db      	uxtb	r3, r3
		if (last == DOUBLE_BUFFER_SIZE) {
   1cfe8:	2b02      	cmp	r3, #2
   1cfea:	d100      	bne.n	1cfee <lll_adv_pdu_alloc+0x16>
			last = 0U;
   1cfec:	2300      	movs	r3, #0
	*idx = last;
   1cfee:	eb00 0683 	add.w	r6, r0, r3, lsl #2
   1cff2:	700b      	strb	r3, [r1, #0]
	p = (void *)pdu->pdu[last];
   1cff4:	6875      	ldr	r5, [r6, #4]
	if (p) {
   1cff6:	2d00      	cmp	r5, #0
   1cff8:	d134      	bne.n	1d064 <lll_adv_pdu_alloc+0x8c>
	p = MFIFO_DEQUEUE_PEEK(pdu_free);
   1cffa:	4c35      	ldr	r4, [pc, #212]	; (1d0d0 <lll_adv_pdu_alloc+0xf8>)
   1cffc:	78a2      	ldrb	r2, [r4, #2]
	if (first == last) {
   1cffe:	78e1      	ldrb	r1, [r4, #3]
   1d000:	7823      	ldrb	r3, [r4, #0]
   1d002:	4291      	cmp	r1, r2
   1d004:	d028      	beq.n	1d058 <lll_adv_pdu_alloc+0x80>
	return *((void **)(fifo + first * size));
   1d006:	fb02 4303 	mla	r3, r2, r3, r4
   1d00a:	685d      	ldr	r5, [r3, #4]
	if (p) {
   1d00c:	b325      	cbz	r5, 1d058 <lll_adv_pdu_alloc+0x80>
	return z_impl_k_sem_take(sem, timeout);
   1d00e:	2200      	movs	r2, #0
   1d010:	2300      	movs	r3, #0
   1d012:	4830      	ldr	r0, [pc, #192]	; (1d0d4 <lll_adv_pdu_alloc+0xfc>)
   1d014:	f006 fc8e 	bl	23934 <z_impl_k_sem_take>
		LL_ASSERT(!err);
   1d018:	b150      	cbz	r0, 1d030 <lll_adv_pdu_alloc+0x58>
   1d01a:	22f7      	movs	r2, #247	; 0xf7
   1d01c:	492e      	ldr	r1, [pc, #184]	; (1d0d8 <lll_adv_pdu_alloc+0x100>)
   1d01e:	482f      	ldr	r0, [pc, #188]	; (1d0dc <lll_adv_pdu_alloc+0x104>)
   1d020:	f009 ffa5 	bl	26f6e <printk>
   1d024:	4040      	eors	r0, r0
   1d026:	f380 8811 	msr	BASEPRI, r0
   1d02a:	f04f 0003 	mov.w	r0, #3
   1d02e:	df02      	svc	2
	uint8_t _first = *first; /* Copy read-index */
   1d030:	78a3      	ldrb	r3, [r4, #2]
	if (_first == last) {
   1d032:	78e1      	ldrb	r1, [r4, #3]
		MFIFO_DEQUEUE(pdu_free);
   1d034:	7862      	ldrb	r2, [r4, #1]
   1d036:	4299      	cmp	r1, r3
   1d038:	d005      	beq.n	1d046 <lll_adv_pdu_alloc+0x6e>
	_first += 1U;
   1d03a:	3301      	adds	r3, #1
   1d03c:	b2db      	uxtb	r3, r3
		_first = 0U;
   1d03e:	429a      	cmp	r2, r3
   1d040:	bf08      	it	eq
   1d042:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   1d044:	70a3      	strb	r3, [r4, #2]
	pdu->pdu[last] = (void *)p;
   1d046:	6075      	str	r5, [r6, #4]
	return p;
   1d048:	e00c      	b.n	1d064 <lll_adv_pdu_alloc+0x8c>
		pdu->last = first;
   1d04a:	7042      	strb	r2, [r0, #1]
   1d04c:	f3bf 8f4f 	dsb	sy
		first_latest = pdu->first;
   1d050:	7804      	ldrb	r4, [r0, #0]
		if (first_latest != first) {
   1d052:	42a2      	cmp	r2, r4
   1d054:	d1c6      	bne.n	1cfe4 <lll_adv_pdu_alloc+0xc>
   1d056:	e7ca      	b.n	1cfee <lll_adv_pdu_alloc+0x16>
	p = mem_acquire(&mem_pdu.free);
   1d058:	4821      	ldr	r0, [pc, #132]	; (1d0e0 <lll_adv_pdu_alloc+0x108>)
   1d05a:	f00e fb2a 	bl	2b6b2 <mem_acquire>
	if (p) {
   1d05e:	b118      	cbz	r0, 1d068 <lll_adv_pdu_alloc+0x90>
		pdu->pdu[last] = (void *)p;
   1d060:	6070      	str	r0, [r6, #4]
		return p;
   1d062:	4605      	mov	r5, r0
}
   1d064:	4628      	mov	r0, r5
   1d066:	bd70      	pop	{r4, r5, r6, pc}
   1d068:	f04f 32ff 	mov.w	r2, #4294967295
   1d06c:	f04f 33ff 	mov.w	r3, #4294967295
   1d070:	4818      	ldr	r0, [pc, #96]	; (1d0d4 <lll_adv_pdu_alloc+0xfc>)
   1d072:	f006 fc5f 	bl	23934 <z_impl_k_sem_take>
	LL_ASSERT(!err);
   1d076:	b158      	cbz	r0, 1d090 <lll_adv_pdu_alloc+0xb8>
   1d078:	f240 1207 	movw	r2, #263	; 0x107
   1d07c:	4916      	ldr	r1, [pc, #88]	; (1d0d8 <lll_adv_pdu_alloc+0x100>)
   1d07e:	4817      	ldr	r0, [pc, #92]	; (1d0dc <lll_adv_pdu_alloc+0x104>)
   1d080:	f009 ff75 	bl	26f6e <printk>
   1d084:	4040      	eors	r0, r0
   1d086:	f380 8811 	msr	BASEPRI, r0
   1d08a:	f04f 0003 	mov.w	r0, #3
   1d08e:	df02      	svc	2
	uint8_t _first = *first; /* Copy read-index */
   1d090:	78a3      	ldrb	r3, [r4, #2]
	if (_first == last) {
   1d092:	78e0      	ldrb	r0, [r4, #3]
	p = MFIFO_DEQUEUE(pdu_free);
   1d094:	7822      	ldrb	r2, [r4, #0]
   1d096:	7861      	ldrb	r1, [r4, #1]
   1d098:	4298      	cmp	r0, r3
   1d09a:	d10d      	bne.n	1d0b8 <lll_adv_pdu_alloc+0xe0>
	LL_ASSERT(p);
   1d09c:	f44f 7285 	mov.w	r2, #266	; 0x10a
   1d0a0:	490d      	ldr	r1, [pc, #52]	; (1d0d8 <lll_adv_pdu_alloc+0x100>)
   1d0a2:	480e      	ldr	r0, [pc, #56]	; (1d0dc <lll_adv_pdu_alloc+0x104>)
   1d0a4:	f009 ff63 	bl	26f6e <printk>
   1d0a8:	4040      	eors	r0, r0
   1d0aa:	f380 8811 	msr	BASEPRI, r0
   1d0ae:	f04f 0003 	mov.w	r0, #3
   1d0b2:	df02      	svc	2
   1d0b4:	2500      	movs	r5, #0
   1d0b6:	e7c6      	b.n	1d046 <lll_adv_pdu_alloc+0x6e>
	mem = *((void **)(fifo + _first * size));
   1d0b8:	fb03 4202 	mla	r2, r3, r2, r4
	_first += 1U;
   1d0bc:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   1d0be:	6855      	ldr	r5, [r2, #4]
	_first += 1U;
   1d0c0:	b2db      	uxtb	r3, r3
		_first = 0U;
   1d0c2:	4299      	cmp	r1, r3
   1d0c4:	bf08      	it	eq
   1d0c6:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   1d0c8:	70a3      	strb	r3, [r4, #2]
   1d0ca:	2d00      	cmp	r5, #0
   1d0cc:	d1bb      	bne.n	1d046 <lll_adv_pdu_alloc+0x6e>
   1d0ce:	e7e5      	b.n	1d09c <lll_adv_pdu_alloc+0xc4>
   1d0d0:	20000d94 	.word	0x20000d94
   1d0d4:	20004328 	.word	0x20004328
   1d0d8:	00035164 	.word	0x00035164
   1d0dc:	0002fa94 	.word	0x0002fa94
   1d0e0:	2000425c 	.word	0x2000425c

0001d0e4 <lll_adv_pdu_latest_get>:
{
   1d0e4:	b570      	push	{r4, r5, r6, lr}
   1d0e6:	4604      	mov	r4, r0
	first = pdu->first;
   1d0e8:	7800      	ldrb	r0, [r0, #0]
	if (first != pdu->last) {
   1d0ea:	7863      	ldrb	r3, [r4, #1]
	first = pdu->first;
   1d0ec:	b2c0      	uxtb	r0, r0
	if (first != pdu->last) {
   1d0ee:	4283      	cmp	r3, r0
   1d0f0:	d02f      	beq.n	1d152 <lll_adv_pdu_latest_get+0x6e>
		if (!MFIFO_ENQUEUE_IDX_GET(pdu_free, &free_idx)) {
   1d0f2:	4e1a      	ldr	r6, [pc, #104]	; (1d15c <lll_adv_pdu_latest_get+0x78>)
	last = last + 1;
   1d0f4:	78f3      	ldrb	r3, [r6, #3]
	if (last == count) {
   1d0f6:	7875      	ldrb	r5, [r6, #1]
   1d0f8:	78b2      	ldrb	r2, [r6, #2]
	last = last + 1;
   1d0fa:	3301      	adds	r3, #1
   1d0fc:	b2db      	uxtb	r3, r3
		last = 0U;
   1d0fe:	429d      	cmp	r5, r3
   1d100:	bf08      	it	eq
   1d102:	2300      	moveq	r3, #0
	if (last == first) {
   1d104:	429a      	cmp	r2, r3
   1d106:	d10d      	bne.n	1d124 <lll_adv_pdu_latest_get+0x40>
			LL_ASSERT(false);
   1d108:	f240 121d 	movw	r2, #285	; 0x11d
   1d10c:	4914      	ldr	r1, [pc, #80]	; (1d160 <lll_adv_pdu_latest_get+0x7c>)
   1d10e:	4815      	ldr	r0, [pc, #84]	; (1d164 <lll_adv_pdu_latest_get+0x80>)
   1d110:	f009 ff2d 	bl	26f6e <printk>
   1d114:	4040      	eors	r0, r0
   1d116:	f380 8811 	msr	BASEPRI, r0
   1d11a:	f04f 0003 	mov.w	r0, #3
   1d11e:	df02      	svc	2
   1d120:	2000      	movs	r0, #0
}
   1d122:	bd70      	pop	{r4, r5, r6, pc}
		first += 1U;
   1d124:	1c45      	adds	r5, r0, #1
   1d126:	b2ed      	uxtb	r5, r5
			first = 0U;
   1d128:	2d02      	cmp	r5, #2
   1d12a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   1d12e:	bf08      	it	eq
   1d130:	2500      	moveq	r5, #0
		*is_modified = 1U;
   1d132:	2201      	movs	r2, #1
		pdu->first = first;
   1d134:	7025      	strb	r5, [r4, #0]
		*is_modified = 1U;
   1d136:	700a      	strb	r2, [r1, #0]
		pdu->pdu[pdu_idx] = NULL;
   1d138:	2200      	movs	r2, #0
		p = pdu->pdu[pdu_idx];
   1d13a:	6841      	ldr	r1, [r0, #4]
		pdu->pdu[pdu_idx] = NULL;
   1d13c:	6042      	str	r2, [r0, #4]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   1d13e:	78f0      	ldrb	r0, [r6, #3]
   1d140:	7832      	ldrb	r2, [r6, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1d142:	fb00 6202 	mla	r2, r0, r2, r6
   1d146:	6051      	str	r1, [r2, #4]
	*last = idx; /* Commit: Update write index */
   1d148:	70f3      	strb	r3, [r6, #3]
	z_impl_k_sem_give(sem);
   1d14a:	4807      	ldr	r0, [pc, #28]	; (1d168 <lll_adv_pdu_latest_get+0x84>)
   1d14c:	f006 fbb6 	bl	238bc <z_impl_k_sem_give>
   1d150:	4628      	mov	r0, r5
	return (void *)pdu->pdu[first];
   1d152:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   1d156:	6840      	ldr	r0, [r0, #4]
   1d158:	e7e3      	b.n	1d122 <lll_adv_pdu_latest_get+0x3e>
   1d15a:	bf00      	nop
   1d15c:	20000d94 	.word	0x20000d94
   1d160:	00035164 	.word	0x00035164
   1d164:	0002fa94 	.word	0x0002fa94
   1d168:	20004328 	.word	0x20004328

0001d16c <chan_prepare>:
{
	struct pdu_adv *pdu;
	uint8_t chan;
	uint8_t upd;

	chan = find_lsb_set(lll->chan_map_curr);
   1d16c:	7b03      	ldrb	r3, [r0, #12]
	return __builtin_ffs(op);
   1d16e:	f3c3 1302 	ubfx	r3, r3, #4, #3
{
   1d172:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1d174:	2b00      	cmp	r3, #0
   1d176:	4604      	mov	r4, r0
   1d178:	fa93 f0a3 	rbit	r0, r3
   1d17c:	fab0 f080 	clz	r0, r0
   1d180:	bf08      	it	eq
   1d182:	f04f 30ff 	moveq.w	r0, #4294967295
	LL_ASSERT(chan);
   1d186:	1c45      	adds	r5, r0, #1
   1d188:	d10b      	bne.n	1d1a2 <chan_prepare+0x36>
   1d18a:	f240 3287 	movw	r2, #903	; 0x387
   1d18e:	4920      	ldr	r1, [pc, #128]	; (1d210 <chan_prepare+0xa4>)
   1d190:	4820      	ldr	r0, [pc, #128]	; (1d214 <chan_prepare+0xa8>)
   1d192:	f009 feec 	bl	26f6e <printk>
   1d196:	4040      	eors	r0, r0
   1d198:	f380 8811 	msr	BASEPRI, r0
   1d19c:	f04f 0003 	mov.w	r0, #3
   1d1a0:	df02      	svc	2

	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   1d1a2:	7b23      	ldrb	r3, [r4, #12]
   1d1a4:	f3c3 1202 	ubfx	r2, r3, #4, #3
   1d1a8:	1e51      	subs	r1, r2, #1
   1d1aa:	400a      	ands	r2, r1
   1d1ac:	f362 1306 	bfi	r3, r2, #4, #3
   1d1b0:	7323      	strb	r3, [r4, #12]

	lll_chan_set(36 + chan);
   1d1b2:	f105 0024 	add.w	r0, r5, #36	; 0x24
   1d1b6:	f7ff fd69 	bl	1cc8c <lll_chan_set>

	/* FIXME: get latest only when primary PDU without Aux PDUs */
	upd = 0U;
   1d1ba:	2600      	movs	r6, #0
	return lll_adv_pdu_latest_get(&lll->adv_data, is_modified);
   1d1bc:	f10d 0107 	add.w	r1, sp, #7
   1d1c0:	f104 0010 	add.w	r0, r4, #16
   1d1c4:	f88d 6007 	strb.w	r6, [sp, #7]
   1d1c8:	f7ff ff8c 	bl	1d0e4 <lll_adv_pdu_latest_get>
   1d1cc:	4605      	mov	r5, r0
	pdu = lll_adv_data_latest_get(lll, &upd);

	radio_pkt_tx_set(pdu);
   1d1ce:	f001 f9a1 	bl	1e514 <radio_pkt_tx_set>

	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   1d1d2:	782b      	ldrb	r3, [r5, #0]
   1d1d4:	f003 030f 	and.w	r3, r3, #15
   1d1d8:	2b02      	cmp	r3, #2
   1d1da:	d012      	beq.n	1d202 <chan_prepare+0x96>
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
   1d1dc:	f10d 0107 	add.w	r1, sp, #7
   1d1e0:	f104 001c 	add.w	r0, r4, #28
   1d1e4:	f7ff ff7e 	bl	1d0e4 <lll_adv_pdu_latest_get>
#else
		ARG_UNUSED(scan_pdu);
		ARG_UNUSED(upd);
#endif /* !CONFIG_BT_CTLR_PRIVACY */

		radio_isr_set(isr_tx, lll);
   1d1e8:	4621      	mov	r1, r4
   1d1ea:	480b      	ldr	r0, [pc, #44]	; (1d218 <chan_prepare+0xac>)
   1d1ec:	f001 f8d6 	bl	1e39c <radio_isr_set>
		radio_tmr_tifs_set(EVENT_IFS_US);
   1d1f0:	2096      	movs	r0, #150	; 0x96
   1d1f2:	f001 fa8f 	bl	1e714 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   1d1f6:	4630      	mov	r0, r6
   1d1f8:	f001 f9f8 	bl	1e5ec <radio_switch_complete_and_rx>
		radio_isr_set(isr_done, lll);
		radio_switch_complete_and_disable();
	}

	return pdu;
}
   1d1fc:	4628      	mov	r0, r5
   1d1fe:	b002      	add	sp, #8
   1d200:	bd70      	pop	{r4, r5, r6, pc}
		radio_isr_set(isr_done, lll);
   1d202:	4621      	mov	r1, r4
   1d204:	4805      	ldr	r0, [pc, #20]	; (1d21c <chan_prepare+0xb0>)
   1d206:	f001 f8c9 	bl	1e39c <radio_isr_set>
		radio_switch_complete_and_disable();
   1d20a:	f001 fa05 	bl	1e618 <radio_switch_complete_and_disable>
	return pdu;
   1d20e:	e7f5      	b.n	1d1fc <chan_prepare+0x90>
   1d210:	00035164 	.word	0x00035164
   1d214:	0002fa94 	.word	0x0002fa94
   1d218:	0001cf09 	.word	0x0001cf09
   1d21c:	0002c37d 	.word	0x0002c37d

0001d220 <prepare_cb>:
{
   1d220:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	lll = p->param;
   1d222:	68c4      	ldr	r4, [r0, #12]

static inline int lll_is_stop(void *lll)
{
	struct lll_hdr *hdr = lll;

	return !!hdr->is_stop;
   1d224:	7925      	ldrb	r5, [r4, #4]
	if (unlikely(lll_is_stop(lll))) {
   1d226:	f015 0501 	ands.w	r5, r5, #1
{
   1d22a:	4606      	mov	r6, r0
	if (unlikely(lll_is_stop(lll))) {
   1d22c:	d015      	beq.n	1d25a <prepare_cb+0x3a>
		err = lll_hfclock_off();
   1d22e:	f7ff fdef 	bl	1ce10 <lll_hfclock_off>
		LL_ASSERT(err >= 0);
   1d232:	2800      	cmp	r0, #0
   1d234:	da0b      	bge.n	1d24e <prepare_cb+0x2e>
   1d236:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
   1d23a:	4936      	ldr	r1, [pc, #216]	; (1d314 <prepare_cb+0xf4>)
   1d23c:	4836      	ldr	r0, [pc, #216]	; (1d318 <prepare_cb+0xf8>)
   1d23e:	f009 fe96 	bl	26f6e <printk>
   1d242:	4040      	eors	r0, r0
   1d244:	f380 8811 	msr	BASEPRI, r0
   1d248:	f04f 0003 	mov.w	r0, #3
   1d24c:	df02      	svc	2
		lll_done(NULL);
   1d24e:	2000      	movs	r0, #0
   1d250:	f7ff fcd2 	bl	1cbf8 <lll_done>
}
   1d254:	2000      	movs	r0, #0
   1d256:	b003      	add	sp, #12
   1d258:	bdf0      	pop	{r4, r5, r6, r7, pc}
	radio_reset();
   1d25a:	f001 f8bf 	bl	1e3dc <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   1d25e:	4628      	mov	r0, r5
   1d260:	f001 f8f0 	bl	1e444 <radio_tx_power_set>
	radio_phy_set(0, 0);
   1d264:	4629      	mov	r1, r5
   1d266:	4628      	mov	r0, r5
   1d268:	f001 f8dc 	bl	1e424 <radio_phy_set>
	radio_pkt_configure(8, PDU_AC_LEG_PAYLOAD_SIZE_MAX, 0);
   1d26c:	462a      	mov	r2, r5
   1d26e:	2125      	movs	r1, #37	; 0x25
   1d270:	2008      	movs	r0, #8
   1d272:	f001 f91d 	bl	1e4b0 <radio_pkt_configure>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   1d276:	4b29      	ldr	r3, [pc, #164]	; (1d31c <prepare_cb+0xfc>)
   1d278:	9301      	str	r3, [sp, #4]
	radio_aa_set((uint8_t *)&aa);
   1d27a:	a801      	add	r0, sp, #4
   1d27c:	f001 f900 	bl	1e480 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   1d280:	4927      	ldr	r1, [pc, #156]	; (1d320 <prepare_cb+0x100>)
   1d282:	f240 605b 	movw	r0, #1627	; 0x65b
   1d286:	f001 f993 	bl	1e5b0 <radio_crc_configure>
	lll->chan_map_curr = lll->chan_map;
   1d28a:	7b23      	ldrb	r3, [r4, #12]
   1d28c:	f3c3 0242 	ubfx	r2, r3, #1, #3
   1d290:	f362 1306 	bfi	r3, r2, #4, #3
   1d294:	7323      	strb	r3, [r4, #12]
	pdu = chan_prepare(lll);
   1d296:	4620      	mov	r0, r4
   1d298:	f7ff ff68 	bl	1d16c <chan_prepare>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER) && lll->filter_policy) {
   1d29c:	7b63      	ldrb	r3, [r4, #13]
   1d29e:	079b      	lsls	r3, r3, #30
   1d2a0:	d007      	beq.n	1d2b2 <prepare_cb+0x92>
		struct lll_filter *wl = ull_filter_lll_get(true);
   1d2a2:	2001      	movs	r0, #1
   1d2a4:	f7ff fa62 	bl	1c76c <ull_filter_lll_get>
		radio_filter_configure(wl->enable_bitmask,
   1d2a8:	1c82      	adds	r2, r0, #2
   1d2aa:	7841      	ldrb	r1, [r0, #1]
   1d2ac:	7800      	ldrb	r0, [r0, #0]
   1d2ae:	f001 f9e3 	bl	1e678 <radio_filter_configure>
	evt = HDR_LLL2EVT(lll);
   1d2b2:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   1d2b4:	6835      	ldr	r5, [r6, #0]
	ticks_at_event += lll_evt_offset_get(evt);
   1d2b6:	4638      	mov	r0, r7
   1d2b8:	f00e ffea 	bl	2c290 <lll_evt_offset_get>
   1d2bc:	4405      	add	r5, r0
	start_us = radio_tmr_start(1, ticks_at_start, remainder);
   1d2be:	6872      	ldr	r2, [r6, #4]
   1d2c0:	f105 0109 	add.w	r1, r5, #9
   1d2c4:	2001      	movs	r0, #1
   1d2c6:	f001 fa31 	bl	1e72c <radio_tmr_start>
	radio_tmr_end_capture();
   1d2ca:	f001 fb0f 	bl	1e8ec <radio_tmr_end_capture>
				   ull_adv_lll_handle_get(lll)),
   1d2ce:	4620      	mov	r0, r4
   1d2d0:	f7fd fd98 	bl	1ae04 <ull_adv_lll_handle_get>
	if (lll_preempt_calc(evt, (TICKER_ID_ADV_BASE +
   1d2d4:	1c81      	adds	r1, r0, #2
   1d2d6:	462a      	mov	r2, r5
   1d2d8:	b2c9      	uxtb	r1, r1
   1d2da:	4638      	mov	r0, r7
   1d2dc:	f00e ffe6 	bl	2c2ac <lll_preempt_calc>
   1d2e0:	b130      	cbz	r0, 1d2f0 <prepare_cb+0xd0>
		radio_isr_set(isr_abort, lll);
   1d2e2:	4621      	mov	r1, r4
   1d2e4:	480f      	ldr	r0, [pc, #60]	; (1d324 <prepare_cb+0x104>)
   1d2e6:	f001 f859 	bl	1e39c <radio_isr_set>
		radio_disable();
   1d2ea:	f001 f925 	bl	1e538 <radio_disable>
   1d2ee:	e7b1      	b.n	1d254 <prepare_cb+0x34>
		ret = lll_prepare_done(lll);
   1d2f0:	4620      	mov	r0, r4
   1d2f2:	f00e ffc8 	bl	2c286 <lll_prepare_done>
		LL_ASSERT(!ret);
   1d2f6:	2800      	cmp	r0, #0
   1d2f8:	d0ac      	beq.n	1d254 <prepare_cb+0x34>
   1d2fa:	f240 2221 	movw	r2, #545	; 0x221
   1d2fe:	4905      	ldr	r1, [pc, #20]	; (1d314 <prepare_cb+0xf4>)
   1d300:	4805      	ldr	r0, [pc, #20]	; (1d318 <prepare_cb+0xf8>)
   1d302:	f009 fe34 	bl	26f6e <printk>
   1d306:	4040      	eors	r0, r0
   1d308:	f380 8811 	msr	BASEPRI, r0
   1d30c:	f04f 0003 	mov.w	r0, #3
   1d310:	df02      	svc	2
   1d312:	e79f      	b.n	1d254 <prepare_cb+0x34>
   1d314:	00035164 	.word	0x00035164
   1d318:	0002fa94 	.word	0x0002fa94
   1d31c:	8e89bed6 	.word	0x8e89bed6
   1d320:	00555555 	.word	0x00555555
   1d324:	0002c32f 	.word	0x0002c32f

0001d328 <lll_adv_prepare>:
{
   1d328:	b513      	push	{r0, r1, r4, lr}
   1d32a:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   1d32c:	f7ff fd5a 	bl	1cde4 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   1d330:	2800      	cmp	r0, #0
   1d332:	da0b      	bge.n	1d34c <lll_adv_prepare+0x24>
   1d334:	f44f 729d 	mov.w	r2, #314	; 0x13a
   1d338:	4910      	ldr	r1, [pc, #64]	; (1d37c <lll_adv_prepare+0x54>)
   1d33a:	4811      	ldr	r0, [pc, #68]	; (1d380 <lll_adv_prepare+0x58>)
   1d33c:	f009 fe17 	bl	26f6e <printk>
   1d340:	4040      	eors	r0, r0
   1d342:	f380 8811 	msr	BASEPRI, r0
   1d346:	f04f 0003 	mov.w	r0, #3
   1d34a:	df02      	svc	2
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   1d34c:	9400      	str	r4, [sp, #0]
   1d34e:	2300      	movs	r3, #0
   1d350:	4a0c      	ldr	r2, [pc, #48]	; (1d384 <lll_adv_prepare+0x5c>)
   1d352:	490d      	ldr	r1, [pc, #52]	; (1d388 <lll_adv_prepare+0x60>)
   1d354:	480d      	ldr	r0, [pc, #52]	; (1d38c <lll_adv_prepare+0x64>)
   1d356:	f00e ff8d 	bl	2c274 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1d35a:	b168      	cbz	r0, 1d378 <lll_adv_prepare+0x50>
   1d35c:	3077      	adds	r0, #119	; 0x77
   1d35e:	d00b      	beq.n	1d378 <lll_adv_prepare+0x50>
   1d360:	f240 123d 	movw	r2, #317	; 0x13d
   1d364:	4905      	ldr	r1, [pc, #20]	; (1d37c <lll_adv_prepare+0x54>)
   1d366:	4806      	ldr	r0, [pc, #24]	; (1d380 <lll_adv_prepare+0x58>)
   1d368:	f009 fe01 	bl	26f6e <printk>
   1d36c:	4040      	eors	r0, r0
   1d36e:	f380 8811 	msr	BASEPRI, r0
   1d372:	f04f 0003 	mov.w	r0, #3
   1d376:	df02      	svc	2
}
   1d378:	b002      	add	sp, #8
   1d37a:	bd10      	pop	{r4, pc}
   1d37c:	00035164 	.word	0x00035164
   1d380:	0002fa94 	.word	0x0002fa94
   1d384:	0001d221 	.word	0x0001d221
   1d388:	0001cebd 	.word	0x0001cebd
   1d38c:	0001ce55 	.word	0x0001ce55

0001d390 <isr_rx>:
{
   1d390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d394:	b086      	sub	sp, #24
   1d396:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   1d398:	f001 f8f6 	bl	1e588 <radio_is_done>
   1d39c:	b2c5      	uxtb	r5, r0
	if (trx_done) {
   1d39e:	2d00      	cmp	r5, #0
   1d3a0:	d062      	beq.n	1d468 <isr_rx+0xd8>
		crc_ok = radio_crc_is_valid();
   1d3a2:	f001 f911 	bl	1e5c8 <radio_crc_is_valid>
   1d3a6:	b2c6      	uxtb	r6, r0
		devmatch_ok = radio_filter_has_match();
   1d3a8:	f001 f994 	bl	1e6d4 <radio_filter_has_match>
   1d3ac:	fa5f f980 	uxtb.w	r9, r0
		devmatch_id = radio_filter_match_get();
   1d3b0:	f001 f99a 	bl	1e6e8 <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
   1d3b4:	f001 fac6 	bl	1e944 <radio_ar_has_match>
		irkmatch_id = radio_ar_match_get();
   1d3b8:	f001 faac 	bl	1e914 <radio_ar_match_get>
		rssi_ready = radio_rssi_is_ready();
   1d3bc:	f001 f952 	bl	1e664 <radio_rssi_is_ready>
	lll_isr_status_reset();
   1d3c0:	f00e ff99 	bl	2c2f6 <lll_isr_status_reset>
	if (!trx_done) {
   1d3c4:	2d00      	cmp	r5, #0
   1d3c6:	f000 80bd 	beq.w	1d544 <isr_rx+0x1b4>
	if (crc_ok) {
   1d3ca:	2e00      	cmp	r6, #0
   1d3cc:	f000 80ba 	beq.w	1d544 <isr_rx+0x1b4>
#if defined(CONFIG_BT_CTLR_PRIVACY)
	/* An IRK match implies address resolution enabled */
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
				    FILTER_IDX_NONE;
#else
	uint8_t rl_idx = FILTER_IDX_NONE;
   1d3d0:	23ff      	movs	r3, #255	; 0xff
   1d3d2:	f88d 3017 	strb.w	r3, [sp, #23]
#endif /* CONFIG_BT_CTLR_PRIVACY */

	pdu_rx = (void *)radio_pkt_scratch_get();
   1d3d6:	f001 f905 	bl	1e5e4 <radio_pkt_scratch_get>
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
   1d3da:	7c23      	ldrb	r3, [r4, #16]
   1d3dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   1d3e0:	4605      	mov	r5, r0
   1d3e2:	695e      	ldr	r6, [r3, #20]
	pdu_adv = lll_adv_data_curr_get(lll);

	addr = pdu_adv->adv_ind.addr;
   1d3e4:	46b0      	mov	r8, r6
	tx_addr = pdu_adv->tx_addr;
   1d3e6:	f818 7b02 	ldrb.w	r7, [r8], #2

	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   1d3ea:	f007 030f 	and.w	r3, r7, #15
   1d3ee:	2b01      	cmp	r3, #1
	} else {
		tgt_addr = NULL;
	}
	rx_addr = pdu_adv->rx_addr;

	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1d3f0:	7803      	ldrb	r3, [r0, #0]
   1d3f2:	f003 030f 	and.w	r3, r3, #15
		tgt_addr = pdu_adv->direct_ind.tgt_addr;
   1d3f6:	bf0c      	ite	eq
   1d3f8:	3608      	addeq	r6, #8
		tgt_addr = NULL;
   1d3fa:	2600      	movne	r6, #0
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1d3fc:	2b03      	cmp	r3, #3
	tx_addr = pdu_adv->tx_addr;
   1d3fe:	f3c7 1a80 	ubfx	sl, r7, #6, #1
	rx_addr = pdu_adv->rx_addr;
   1d402:	ea4f 17d7 	mov.w	r7, r7, lsr #7
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1d406:	d132      	bne.n	1d46e <isr_rx+0xde>
   1d408:	7843      	ldrb	r3, [r0, #1]
   1d40a:	2b0c      	cmp	r3, #12
   1d40c:	f040 809a 	bne.w	1d544 <isr_rx+0x1b4>
	    (pdu_rx->len == sizeof(struct pdu_adv_scan_req)) &&
   1d410:	2e00      	cmp	r6, #0
   1d412:	f040 8097 	bne.w	1d544 <isr_rx+0x1b4>
	    (tgt_addr == NULL) &&
	    lll_adv_scan_req_check(lll, pdu_rx, tx_addr, addr, devmatch_ok,
   1d416:	f10d 0317 	add.w	r3, sp, #23
   1d41a:	e9cd 9300 	strd	r9, r3, [sp]
   1d41e:	4601      	mov	r1, r0
   1d420:	4643      	mov	r3, r8
   1d422:	4652      	mov	r2, sl
   1d424:	4620      	mov	r0, r4
   1d426:	f00e ffcb 	bl	2c3c0 <lll_adv_scan_req_check>
	    (tgt_addr == NULL) &&
   1d42a:	b300      	cbz	r0, 1d46e <isr_rx+0xde>
				    &rl_idx)) {
		radio_isr_set(isr_done, lll);
   1d42c:	4621      	mov	r1, r4
   1d42e:	4849      	ldr	r0, [pc, #292]	; (1d554 <isr_rx+0x1c4>)
   1d430:	f000 ffb4 	bl	1e39c <radio_isr_set>
		radio_switch_complete_and_disable();
   1d434:	f001 f8f0 	bl	1e618 <radio_switch_complete_and_disable>
}

static inline struct pdu_adv *lll_adv_scan_rsp_curr_get(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.first];
   1d438:	7f23      	ldrb	r3, [r4, #28]
   1d43a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
		radio_pkt_tx_set(lll_adv_scan_rsp_curr_get(lll));
   1d43e:	6a20      	ldr	r0, [r4, #32]
   1d440:	f001 f868 	bl	1e514 <radio_pkt_tx_set>

		/* assert if radio packet ptr is not set and radio started tx */
		LL_ASSERT(!radio_is_ready());
   1d444:	f001 f896 	bl	1e574 <radio_is_ready>
   1d448:	b158      	cbz	r0, 1d462 <isr_rx+0xd2>
   1d44a:	f240 32dd 	movw	r2, #989	; 0x3dd
   1d44e:	4942      	ldr	r1, [pc, #264]	; (1d558 <isr_rx+0x1c8>)
   1d450:	4842      	ldr	r0, [pc, #264]	; (1d55c <isr_rx+0x1cc>)
   1d452:	f009 fd8c 	bl	26f6e <printk>
   1d456:	4040      	eors	r0, r0
   1d458:	f380 8811 	msr	BASEPRI, r0
   1d45c:	f04f 0003 	mov.w	r0, #3
   1d460:	df02      	svc	2
}
   1d462:	b006      	add	sp, #24
   1d464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0U;
   1d468:	462e      	mov	r6, r5
   1d46a:	46a9      	mov	r9, r5
   1d46c:	e7a8      	b.n	1d3c0 <isr_rx+0x30>
					 CONFIG_BT_CTLR_GPIO_PA_OFFSET);
#endif /* CONFIG_BT_CTLR_GPIO_PA_PIN */
		return 0;

#if defined(CONFIG_BT_PERIPHERAL)
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   1d46e:	782b      	ldrb	r3, [r5, #0]
   1d470:	f003 030f 	and.w	r3, r3, #15
   1d474:	2b05      	cmp	r3, #5
   1d476:	d165      	bne.n	1d544 <isr_rx+0x1b4>
   1d478:	786b      	ldrb	r3, [r5, #1]
   1d47a:	2b22      	cmp	r3, #34	; 0x22
   1d47c:	d162      	bne.n	1d544 <isr_rx+0x1b4>
		   (pdu_rx->len == sizeof(struct pdu_adv_connect_ind)) &&
		   lll_adv_connect_ind_check(lll, pdu_rx, tx_addr, addr,
   1d47e:	f10d 0317 	add.w	r3, sp, #23
   1d482:	e9cd 9302 	strd	r9, r3, [sp, #8]
   1d486:	e9cd 7600 	strd	r7, r6, [sp]
   1d48a:	4643      	mov	r3, r8
   1d48c:	4652      	mov	r2, sl
   1d48e:	4629      	mov	r1, r5
   1d490:	4620      	mov	r0, r4
   1d492:	f00e ffad 	bl	2c3f0 <lll_adv_connect_ind_check>
		   (pdu_rx->len == sizeof(struct pdu_adv_connect_ind)) &&
   1d496:	2800      	cmp	r0, #0
   1d498:	d054      	beq.n	1d544 <isr_rx+0x1b4>
					     rx_addr, tgt_addr,
					     devmatch_ok, &rl_idx) &&
   1d49a:	68a3      	ldr	r3, [r4, #8]
   1d49c:	2b00      	cmp	r3, #0
   1d49e:	d051      	beq.n	1d544 <isr_rx+0x1b4>
		int ret;

		if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2)) {
			rx = ull_pdu_rx_alloc_peek(4);
		} else {
			rx = ull_pdu_rx_alloc_peek(3);
   1d4a0:	2003      	movs	r0, #3
   1d4a2:	f7fd f899 	bl	1a5d8 <ull_pdu_rx_alloc_peek>
		}

		if (!rx) {
   1d4a6:	2800      	cmp	r0, #0
   1d4a8:	d04c      	beq.n	1d544 <isr_rx+0x1b4>
			return -ENOBUFS;
		}

		radio_isr_set(isr_abort, lll);
   1d4aa:	4621      	mov	r1, r4
   1d4ac:	482c      	ldr	r0, [pc, #176]	; (1d560 <isr_rx+0x1d0>)
   1d4ae:	f000 ff75 	bl	1e39c <radio_isr_set>
		radio_disable();
   1d4b2:	f001 f841 	bl	1e538 <radio_disable>

		/* assert if radio started tx */
		LL_ASSERT(!radio_is_ready());
   1d4b6:	f001 f85d 	bl	1e574 <radio_is_ready>
   1d4ba:	b158      	cbz	r0, 1d4d4 <isr_rx+0x144>
   1d4bc:	f240 421b 	movw	r2, #1051	; 0x41b
   1d4c0:	4925      	ldr	r1, [pc, #148]	; (1d558 <isr_rx+0x1c8>)
   1d4c2:	4826      	ldr	r0, [pc, #152]	; (1d55c <isr_rx+0x1cc>)
   1d4c4:	f009 fd53 	bl	26f6e <printk>
   1d4c8:	4040      	eors	r0, r0
   1d4ca:	f380 8811 	msr	BASEPRI, r0
   1d4ce:	f04f 0003 	mov.w	r0, #3
   1d4d2:	df02      	svc	2
}

static inline int lll_stop(void *lll)
{
	struct lll_hdr *hdr = lll;
	int ret = !!hdr->is_stop;
   1d4d4:	7923      	ldrb	r3, [r4, #4]

	hdr->is_stop = 1U;
   1d4d6:	f043 0201 	orr.w	r2, r3, #1
		}
#endif /* CONFIG_BT_CTLR_CONN_RSSI */

		/* Stop further LLL radio events */
		ret = lll_stop(lll);
		LL_ASSERT(!ret);
   1d4da:	07db      	lsls	r3, r3, #31
   1d4dc:	7122      	strb	r2, [r4, #4]
   1d4de:	d50b      	bpl.n	1d4f8 <isr_rx+0x168>
   1d4e0:	f240 4229 	movw	r2, #1065	; 0x429
   1d4e4:	491c      	ldr	r1, [pc, #112]	; (1d558 <isr_rx+0x1c8>)
   1d4e6:	481d      	ldr	r0, [pc, #116]	; (1d55c <isr_rx+0x1cc>)
   1d4e8:	f009 fd41 	bl	26f6e <printk>
   1d4ec:	4040      	eors	r0, r0
   1d4ee:	f380 8811 	msr	BASEPRI, r0
   1d4f2:	f04f 0003 	mov.w	r0, #3
   1d4f6:	df02      	svc	2

		rx = ull_pdu_rx_alloc();
   1d4f8:	f7fd f886 	bl	1a608 <ull_pdu_rx_alloc>

		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1d4fc:	2313      	movs	r3, #19
   1d4fe:	7103      	strb	r3, [r0, #4]
		rx->hdr.handle = 0xffff;
   1d500:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1d504:	80c3      	strh	r3, [r0, #6]
		rx = ull_pdu_rx_alloc();
   1d506:	4606      	mov	r6, r0
   1d508:	f100 031c 	add.w	r3, r0, #28
   1d50c:	f105 0224 	add.w	r2, r5, #36	; 0x24
   1d510:	f855 1b04 	ldr.w	r1, [r5], #4
   1d514:	f843 1b04 	str.w	r1, [r3], #4
   1d518:	4295      	cmp	r5, r2
   1d51a:	d1f9      	bne.n	1d510 <isr_rx+0x180>

		memcpy(rx->pdu, pdu_rx, (offsetof(struct pdu_adv, connect_ind) +
					 sizeof(struct pdu_adv_connect_ind)));

		ftr = &(rx->hdr.rx_ftr);
		ftr->param = lll;
   1d51c:	60b4      	str	r4, [r6, #8]
		ftr->ticks_anchor = radio_tmr_start_get();
   1d51e:	f001 f99b 	bl	1e858 <radio_tmr_start_get>
   1d522:	6130      	str	r0, [r6, #16]
		ftr->radio_end_us = radio_tmr_end_get() -
   1d524:	f001 f9ea 	bl	1e8fc <radio_tmr_end_get>
				    radio_tx_chain_delay_get(0, 0);
   1d528:	2100      	movs	r1, #0
		ftr->radio_end_us = radio_tmr_end_get() -
   1d52a:	4604      	mov	r4, r0
				    radio_tx_chain_delay_get(0, 0);
   1d52c:	4608      	mov	r0, r1
   1d52e:	f00f f927 	bl	2c780 <radio_tx_chain_delay_get>
		ftr->radio_end_us = radio_tmr_end_get() -
   1d532:	1a20      	subs	r0, r4, r0
   1d534:	6170      	str	r0, [r6, #20]

		if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2)) {
			ftr->extra = ull_pdu_rx_alloc();
		}

		ull_rx_put(rx->hdr.link, rx);
   1d536:	4631      	mov	r1, r6
   1d538:	6830      	ldr	r0, [r6, #0]
   1d53a:	f7fd f87b 	bl	1a634 <ull_rx_put>
		ull_rx_sched();
   1d53e:	f7fd f889 	bl	1a654 <ull_rx_sched>
		if (!err) {
   1d542:	e78e      	b.n	1d462 <isr_rx+0xd2>
	radio_isr_set(isr_done, param);
   1d544:	4621      	mov	r1, r4
   1d546:	4803      	ldr	r0, [pc, #12]	; (1d554 <isr_rx+0x1c4>)
   1d548:	f000 ff28 	bl	1e39c <radio_isr_set>
	radio_disable();
   1d54c:	f000 fff4 	bl	1e538 <radio_disable>
   1d550:	e787      	b.n	1d462 <isr_rx+0xd2>
   1d552:	bf00      	nop
   1d554:	0002c37d 	.word	0x0002c37d
   1d558:	00035164 	.word	0x00035164
   1d55c:	0002fa94 	.word	0x0002fa94
   1d560:	0002c32f 	.word	0x0002c32f

0001d564 <ticker_stop_cb>:
	lll_done(param);
}

static void ticker_stop_cb(uint32_t ticks_at_expire, uint32_t remainder, uint16_t lazy,
			   void *param)
{
   1d564:	b508      	push	{r3, lr}
	radio_isr_set(isr_done_cleanup, param);
   1d566:	4619      	mov	r1, r3
   1d568:	4803      	ldr	r0, [pc, #12]	; (1d578 <ticker_stop_cb+0x14>)
   1d56a:	f000 ff17 	bl	1e39c <radio_isr_set>
	radio_disable();
}
   1d56e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_disable();
   1d572:	f000 bfe1 	b.w	1e538 <radio_disable>
   1d576:	bf00      	nop
   1d578:	0002c469 	.word	0x0002c469

0001d57c <prepare_cb>:
{
   1d57c:	b5f0      	push	{r4, r5, r6, r7, lr}
	lll = p->param;
   1d57e:	68c4      	ldr	r4, [r0, #12]
   1d580:	7925      	ldrb	r5, [r4, #4]
	if (unlikely(lll_is_stop(lll))) {
   1d582:	f015 0501 	ands.w	r5, r5, #1
{
   1d586:	b08d      	sub	sp, #52	; 0x34
   1d588:	4606      	mov	r6, r0
	if (unlikely(lll_is_stop(lll))) {
   1d58a:	d014      	beq.n	1d5b6 <prepare_cb+0x3a>
		err = lll_hfclock_off();
   1d58c:	f7ff fc40 	bl	1ce10 <lll_hfclock_off>
		LL_ASSERT(err >= 0);
   1d590:	2800      	cmp	r0, #0
   1d592:	da0a      	bge.n	1d5aa <prepare_cb+0x2e>
   1d594:	2290      	movs	r2, #144	; 0x90
   1d596:	495b      	ldr	r1, [pc, #364]	; (1d704 <prepare_cb+0x188>)
   1d598:	485b      	ldr	r0, [pc, #364]	; (1d708 <prepare_cb+0x18c>)
   1d59a:	f009 fce8 	bl	26f6e <printk>
   1d59e:	4040      	eors	r0, r0
   1d5a0:	f380 8811 	msr	BASEPRI, r0
   1d5a4:	f04f 0003 	mov.w	r0, #3
   1d5a8:	df02      	svc	2
		lll_done(NULL);
   1d5aa:	2000      	movs	r0, #0
   1d5ac:	f7ff fb24 	bl	1cbf8 <lll_done>
}
   1d5b0:	2000      	movs	r0, #0
   1d5b2:	b00d      	add	sp, #52	; 0x34
   1d5b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	lll->state = 0U;
   1d5b6:	7a23      	ldrb	r3, [r4, #8]
   1d5b8:	f365 0300 	bfi	r3, r5, #0, #1
   1d5bc:	7223      	strb	r3, [r4, #8]
	radio_reset();
   1d5be:	f000 ff0d 	bl	1e3dc <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   1d5c2:	4628      	mov	r0, r5
   1d5c4:	f000 ff3e 	bl	1e444 <radio_tx_power_set>
	radio_phy_set(0, 0);
   1d5c8:	4629      	mov	r1, r5
   1d5ca:	4628      	mov	r0, r5
   1d5cc:	f000 ff2a 	bl	1e424 <radio_phy_set>
	radio_pkt_configure(8, PDU_AC_LEG_PAYLOAD_SIZE_MAX, 0);
   1d5d0:	462a      	mov	r2, r5
   1d5d2:	2125      	movs	r1, #37	; 0x25
   1d5d4:	2008      	movs	r0, #8
   1d5d6:	f000 ff6b 	bl	1e4b0 <radio_pkt_configure>
	node_rx = ull_pdu_rx_alloc_peek(1);
   1d5da:	2001      	movs	r0, #1
   1d5dc:	f7fc fffc 	bl	1a5d8 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1d5e0:	4605      	mov	r5, r0
   1d5e2:	b950      	cbnz	r0, 1d5fa <prepare_cb+0x7e>
   1d5e4:	22af      	movs	r2, #175	; 0xaf
   1d5e6:	4947      	ldr	r1, [pc, #284]	; (1d704 <prepare_cb+0x188>)
   1d5e8:	4847      	ldr	r0, [pc, #284]	; (1d708 <prepare_cb+0x18c>)
   1d5ea:	f009 fcc0 	bl	26f6e <printk>
   1d5ee:	4040      	eors	r0, r0
   1d5f0:	f380 8811 	msr	BASEPRI, r0
   1d5f4:	f04f 0003 	mov.w	r0, #3
   1d5f8:	df02      	svc	2
	radio_pkt_rx_set(node_rx->pdu);
   1d5fa:	f105 001c 	add.w	r0, r5, #28
   1d5fe:	f000 ff83 	bl	1e508 <radio_pkt_rx_set>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   1d602:	4b42      	ldr	r3, [pc, #264]	; (1d70c <prepare_cb+0x190>)
   1d604:	930b      	str	r3, [sp, #44]	; 0x2c
	radio_aa_set((uint8_t *)&aa);
   1d606:	a80b      	add	r0, sp, #44	; 0x2c
   1d608:	f000 ff3a 	bl	1e480 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   1d60c:	4940      	ldr	r1, [pc, #256]	; (1d710 <prepare_cb+0x194>)
   1d60e:	f240 605b 	movw	r0, #1627	; 0x65b
   1d612:	f000 ffcd 	bl	1e5b0 <radio_crc_configure>
	lll_chan_set(37 + lll->chan);
   1d616:	7a20      	ldrb	r0, [r4, #8]
   1d618:	f3c0 0041 	ubfx	r0, r0, #1, #2
   1d61c:	3025      	adds	r0, #37	; 0x25
   1d61e:	f7ff fb35 	bl	1cc8c <lll_chan_set>
	radio_isr_set(isr_rx, lll);
   1d622:	4621      	mov	r1, r4
   1d624:	483b      	ldr	r0, [pc, #236]	; (1d714 <prepare_cb+0x198>)
   1d626:	f000 feb9 	bl	1e39c <radio_isr_set>
	radio_tmr_tifs_set(EVENT_IFS_US);
   1d62a:	2096      	movs	r0, #150	; 0x96
   1d62c:	f001 f872 	bl	1e714 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   1d630:	2300      	movs	r3, #0
   1d632:	461a      	mov	r2, r3
   1d634:	4619      	mov	r1, r3
   1d636:	4618      	mov	r0, r3
   1d638:	f000 ffe4 	bl	1e604 <radio_switch_complete_and_tx>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER) && lll->filter_policy) {
   1d63c:	7a23      	ldrb	r3, [r4, #8]
   1d63e:	f013 0f18 	tst.w	r3, #24
   1d642:	d007      	beq.n	1d654 <prepare_cb+0xd8>
		struct lll_filter *wl = ull_filter_lll_get(true);
   1d644:	2001      	movs	r0, #1
   1d646:	f7ff f891 	bl	1c76c <ull_filter_lll_get>
		radio_filter_configure(wl->enable_bitmask,
   1d64a:	1c82      	adds	r2, r0, #2
   1d64c:	7841      	ldrb	r1, [r0, #1]
   1d64e:	7800      	ldrb	r0, [r0, #0]
   1d650:	f001 f812 	bl	1e678 <radio_filter_configure>
	evt = HDR_LLL2EVT(lll);
   1d654:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   1d656:	6835      	ldr	r5, [r6, #0]
	ticks_at_event += lll_evt_offset_get(evt);
   1d658:	4638      	mov	r0, r7
   1d65a:	f00e fe19 	bl	2c290 <lll_evt_offset_get>
   1d65e:	4405      	add	r5, r0
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   1d660:	6872      	ldr	r2, [r6, #4]
   1d662:	f105 0109 	add.w	r1, r5, #9
   1d666:	2000      	movs	r0, #0
   1d668:	f001 f860 	bl	1e72c <radio_tmr_start>
	radio_tmr_end_capture();
   1d66c:	f001 f93e 	bl	1e8ec <radio_tmr_end_capture>
	radio_rssi_measure();
   1d670:	f000 ffe0 	bl	1e634 <radio_rssi_measure>
				   ull_scan_lll_handle_get(lll)),
   1d674:	4620      	mov	r0, r4
   1d676:	f7fd fd2d 	bl	1b0d4 <ull_scan_lll_handle_get>
	if (lll_preempt_calc(evt, (TICKER_ID_SCAN_BASE +
   1d67a:	1d01      	adds	r1, r0, #4
   1d67c:	b2c9      	uxtb	r1, r1
   1d67e:	462a      	mov	r2, r5
   1d680:	4638      	mov	r0, r7
   1d682:	f00e fe13 	bl	2c2ac <lll_preempt_calc>
   1d686:	4601      	mov	r1, r0
   1d688:	b130      	cbz	r0, 1d698 <prepare_cb+0x11c>
		radio_isr_set(isr_abort, lll);
   1d68a:	4621      	mov	r1, r4
   1d68c:	4822      	ldr	r0, [pc, #136]	; (1d718 <prepare_cb+0x19c>)
   1d68e:	f000 fe85 	bl	1e39c <radio_isr_set>
		radio_disable();
   1d692:	f000 ff51 	bl	1e538 <radio_disable>
   1d696:	e78b      	b.n	1d5b0 <prepare_cb+0x34>
		if (lll->ticks_window) {
   1d698:	69a3      	ldr	r3, [r4, #24]
   1d69a:	b1fb      	cbz	r3, 1d6dc <prepare_cb+0x160>
			ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1d69c:	f240 120f 	movw	r2, #271	; 0x10f
   1d6a0:	9208      	str	r2, [sp, #32]
   1d6a2:	4a1e      	ldr	r2, [pc, #120]	; (1d71c <prepare_cb+0x1a0>)
   1d6a4:	e9cd 4206 	strd	r4, r2, [sp, #24]
   1d6a8:	4a1d      	ldr	r2, [pc, #116]	; (1d720 <prepare_cb+0x1a4>)
   1d6aa:	e9cd 3000 	strd	r3, r0, [sp]
   1d6ae:	e9cd 0204 	strd	r0, r2, [sp, #16]
   1d6b2:	462b      	mov	r3, r5
   1d6b4:	e9cd 0002 	strd	r0, r0, [sp, #8]
   1d6b8:	2203      	movs	r2, #3
   1d6ba:	f00e fa9f 	bl	2bbfc <ticker_start>
			LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1d6be:	f030 0302 	bics.w	r3, r0, #2
   1d6c2:	d00b      	beq.n	1d6dc <prepare_cb+0x160>
   1d6c4:	f240 1211 	movw	r2, #273	; 0x111
   1d6c8:	490e      	ldr	r1, [pc, #56]	; (1d704 <prepare_cb+0x188>)
   1d6ca:	480f      	ldr	r0, [pc, #60]	; (1d708 <prepare_cb+0x18c>)
   1d6cc:	f009 fc4f 	bl	26f6e <printk>
   1d6d0:	4040      	eors	r0, r0
   1d6d2:	f380 8811 	msr	BASEPRI, r0
   1d6d6:	f04f 0003 	mov.w	r0, #3
   1d6da:	df02      	svc	2
		ret = lll_prepare_done(lll);
   1d6dc:	4620      	mov	r0, r4
   1d6de:	f00e fdd2 	bl	2c286 <lll_prepare_done>
		LL_ASSERT(!ret);
   1d6e2:	2800      	cmp	r0, #0
   1d6e4:	f43f af64 	beq.w	1d5b0 <prepare_cb+0x34>
   1d6e8:	f240 1229 	movw	r2, #297	; 0x129
   1d6ec:	4905      	ldr	r1, [pc, #20]	; (1d704 <prepare_cb+0x188>)
   1d6ee:	4806      	ldr	r0, [pc, #24]	; (1d708 <prepare_cb+0x18c>)
   1d6f0:	f009 fc3d 	bl	26f6e <printk>
   1d6f4:	4040      	eors	r0, r0
   1d6f6:	f380 8811 	msr	BASEPRI, r0
   1d6fa:	f04f 0003 	mov.w	r0, #3
   1d6fe:	df02      	svc	2
   1d700:	e756      	b.n	1d5b0 <prepare_cb+0x34>
   1d702:	bf00      	nop
   1d704:	000351be 	.word	0x000351be
   1d708:	0002fa94 	.word	0x0002fa94
   1d70c:	8e89bed6 	.word	0x8e89bed6
   1d710:	00555555 	.word	0x00555555
   1d714:	0001d8f9 	.word	0x0001d8f9
   1d718:	0002c55f 	.word	0x0002c55f
   1d71c:	0001d82d 	.word	0x0001d82d
   1d720:	0001d565 	.word	0x0001d565

0001d724 <isr_common_done>:

	radio_isr_set(isr_rx, param);
}

static void isr_common_done(void *param)
{
   1d724:	b538      	push	{r3, r4, r5, lr}
   1d726:	4604      	mov	r4, r0
	struct node_rx_pdu *node_rx;
	struct lll_scan *lll;

	/* Clear radio status and events */
	lll_isr_status_reset();
   1d728:	f00e fde5 	bl	2c2f6 <lll_isr_status_reset>

	/* Reset scanning state */
	lll = param;
	lll->state = 0U;
   1d72c:	7a23      	ldrb	r3, [r4, #8]
   1d72e:	f36f 0300 	bfc	r3, #0, #1
   1d732:	7223      	strb	r3, [r4, #8]
#if defined(CONFIG_BT_CTLR_ADV_EXT)
	lll->is_adv_ind = 0U;
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	/* setup tIFS switching */
	radio_tmr_tifs_set(EVENT_IFS_US);
   1d734:	2096      	movs	r0, #150	; 0x96
   1d736:	f000 ffed 	bl	1e714 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   1d73a:	2300      	movs	r3, #0
   1d73c:	4618      	mov	r0, r3
   1d73e:	461a      	mov	r2, r3
   1d740:	4619      	mov	r1, r3
   1d742:	f000 ff5f 	bl	1e604 <radio_switch_complete_and_tx>

	node_rx = ull_pdu_rx_alloc_peek(1);
   1d746:	2001      	movs	r0, #1
   1d748:	f7fc ff46 	bl	1a5d8 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1d74c:	4605      	mov	r5, r0
   1d74e:	b958      	cbnz	r0, 1d768 <isr_common_done+0x44>
   1d750:	f240 222f 	movw	r2, #559	; 0x22f
   1d754:	490a      	ldr	r1, [pc, #40]	; (1d780 <isr_common_done+0x5c>)
   1d756:	480b      	ldr	r0, [pc, #44]	; (1d784 <isr_common_done+0x60>)
   1d758:	f009 fc09 	bl	26f6e <printk>
   1d75c:	4040      	eors	r0, r0
   1d75e:	f380 8811 	msr	BASEPRI, r0
   1d762:	f04f 0003 	mov.w	r0, #3
   1d766:	df02      	svc	2
	radio_pkt_rx_set(node_rx->pdu);
   1d768:	f105 001c 	add.w	r0, r5, #28
   1d76c:	f000 fecc 	bl	1e508 <radio_pkt_rx_set>
		radio_ar_configure(count, irks, 0);
#endif
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */

	radio_rssi_measure();
   1d770:	f000 ff60 	bl	1e634 <radio_rssi_measure>

	radio_isr_set(isr_rx, param);
   1d774:	4621      	mov	r1, r4
   1d776:	4804      	ldr	r0, [pc, #16]	; (1d788 <isr_common_done+0x64>)
}
   1d778:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_isr_set(isr_rx, param);
   1d77c:	f000 be0e 	b.w	1e39c <radio_isr_set>
   1d780:	000351be 	.word	0x000351be
   1d784:	0002fa94 	.word	0x0002fa94
   1d788:	0001d8f9 	.word	0x0001d8f9

0001d78c <isr_tx>:
{
   1d78c:	b570      	push	{r4, r5, r6, lr}
   1d78e:	4605      	mov	r5, r0
	lll_isr_tx_status_reset();
   1d790:	f00e fda1 	bl	2c2d6 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   1d794:	2096      	movs	r0, #150	; 0x96
   1d796:	f000 ffbd 	bl	1e714 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   1d79a:	2300      	movs	r3, #0
   1d79c:	4618      	mov	r0, r3
   1d79e:	461a      	mov	r2, r3
   1d7a0:	4619      	mov	r1, r3
   1d7a2:	f000 ff2f 	bl	1e604 <radio_switch_complete_and_tx>
	node_rx = ull_pdu_rx_alloc_peek(1);
   1d7a6:	2001      	movs	r0, #1
   1d7a8:	f7fc ff16 	bl	1a5d8 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1d7ac:	4604      	mov	r4, r0
   1d7ae:	b958      	cbnz	r0, 1d7c8 <isr_tx+0x3c>
   1d7b0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   1d7b4:	491a      	ldr	r1, [pc, #104]	; (1d820 <isr_tx+0x94>)
   1d7b6:	481b      	ldr	r0, [pc, #108]	; (1d824 <isr_tx+0x98>)
   1d7b8:	f009 fbd9 	bl	26f6e <printk>
   1d7bc:	4040      	eors	r0, r0
   1d7be:	f380 8811 	msr	BASEPRI, r0
   1d7c2:	f04f 0003 	mov.w	r0, #3
   1d7c6:	df02      	svc	2
	radio_pkt_rx_set(node_rx->pdu);
   1d7c8:	f104 001c 	add.w	r0, r4, #28
   1d7cc:	f000 fe9c 	bl	1e508 <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   1d7d0:	f000 fed0 	bl	1e574 <radio_is_ready>
   1d7d4:	b158      	cbz	r0, 1d7ee <isr_tx+0x62>
   1d7d6:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
   1d7da:	4911      	ldr	r1, [pc, #68]	; (1d820 <isr_tx+0x94>)
   1d7dc:	4811      	ldr	r0, [pc, #68]	; (1d824 <isr_tx+0x98>)
   1d7de:	f009 fbc6 	bl	26f6e <printk>
   1d7e2:	4040      	eors	r0, r0
   1d7e4:	f380 8811 	msr	BASEPRI, r0
   1d7e8:	f04f 0003 	mov.w	r0, #3
   1d7ec:	df02      	svc	2
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1d7ee:	f001 f88b 	bl	1e908 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(0, 0);
   1d7f2:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1d7f4:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(0, 0);
   1d7f6:	4608      	mov	r0, r1
   1d7f8:	f00e ffc6 	bl	2c788 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(0, 0);
   1d7fc:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(0, 0);
   1d7fe:	4606      	mov	r6, r0
	hcto -= radio_tx_chain_delay_get(0, 0);
   1d800:	4608      	mov	r0, r1
   1d802:	f00e ffbd 	bl	2c780 <radio_tx_chain_delay_get>
   1d806:	4434      	add	r4, r6
   1d808:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   1d80a:	1a20      	subs	r0, r4, r0
   1d80c:	f001 f836 	bl	1e87c <radio_tmr_hcto_configure>
	radio_rssi_measure();
   1d810:	f000 ff10 	bl	1e634 <radio_rssi_measure>
	radio_isr_set(isr_rx, param);
   1d814:	4629      	mov	r1, r5
   1d816:	4804      	ldr	r0, [pc, #16]	; (1d828 <isr_tx+0x9c>)
}
   1d818:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	radio_isr_set(isr_rx, param);
   1d81c:	f000 bdbe 	b.w	1e39c <radio_isr_set>
   1d820:	000351be 	.word	0x000351be
   1d824:	0002fa94 	.word	0x0002fa94
   1d828:	0001d8f9 	.word	0x0001d8f9

0001d82c <ticker_op_start_cb>:
{
   1d82c:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1d82e:	b158      	cbz	r0, 1d848 <ticker_op_start_cb+0x1c>
   1d830:	f240 128d 	movw	r2, #397	; 0x18d
   1d834:	4905      	ldr	r1, [pc, #20]	; (1d84c <ticker_op_start_cb+0x20>)
   1d836:	4806      	ldr	r0, [pc, #24]	; (1d850 <ticker_op_start_cb+0x24>)
   1d838:	f009 fb99 	bl	26f6e <printk>
   1d83c:	4040      	eors	r0, r0
   1d83e:	f380 8811 	msr	BASEPRI, r0
   1d842:	f04f 0003 	mov.w	r0, #3
   1d846:	df02      	svc	2
}
   1d848:	bd08      	pop	{r3, pc}
   1d84a:	bf00      	nop
   1d84c:	000351be 	.word	0x000351be
   1d850:	0002fa94 	.word	0x0002fa94

0001d854 <abort_cb>:
{
   1d854:	b510      	push	{r4, lr}
   1d856:	460c      	mov	r4, r1
	if (!prepare_param) {
   1d858:	b930      	cbnz	r0, 1d868 <abort_cb+0x14>
			radio_isr_set(isr_abort, param);
   1d85a:	480e      	ldr	r0, [pc, #56]	; (1d894 <abort_cb+0x40>)
   1d85c:	f000 fd9e 	bl	1e39c <radio_isr_set>
}
   1d860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			radio_disable();
   1d864:	f000 be68 	b.w	1e538 <radio_disable>
	err = lll_hfclock_off();
   1d868:	f7ff fad2 	bl	1ce10 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1d86c:	2800      	cmp	r0, #0
   1d86e:	da0b      	bge.n	1d888 <abort_cb+0x34>
   1d870:	f240 127d 	movw	r2, #381	; 0x17d
   1d874:	4908      	ldr	r1, [pc, #32]	; (1d898 <abort_cb+0x44>)
   1d876:	4809      	ldr	r0, [pc, #36]	; (1d89c <abort_cb+0x48>)
   1d878:	f009 fb79 	bl	26f6e <printk>
   1d87c:	4040      	eors	r0, r0
   1d87e:	f380 8811 	msr	BASEPRI, r0
   1d882:	f04f 0003 	mov.w	r0, #3
   1d886:	df02      	svc	2
	lll_done(param);
   1d888:	4620      	mov	r0, r4
}
   1d88a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1d88e:	f7ff b9b3 	b.w	1cbf8 <lll_done>
   1d892:	bf00      	nop
   1d894:	0002c55f 	.word	0x0002c55f
   1d898:	000351be 	.word	0x000351be
   1d89c:	0002fa94 	.word	0x0002fa94

0001d8a0 <is_abort_cb>:
	if (next != curr) {
   1d8a0:	4282      	cmp	r2, r0
{
   1d8a2:	b508      	push	{r3, lr}
	if (next != curr) {
   1d8a4:	d017      	beq.n	1d8d6 <is_abort_cb+0x36>
			*resume_cb = resume_prepare_cb;
   1d8a6:	4a10      	ldr	r2, [pc, #64]	; (1d8e8 <is_abort_cb+0x48>)
   1d8a8:	601a      	str	r2, [r3, #0]
			*resume_prio = 0; /* TODO: */
   1d8aa:	9b02      	ldr	r3, [sp, #8]
   1d8ac:	2200      	movs	r2, #0
   1d8ae:	601a      	str	r2, [r3, #0]
			err = lll_hfclock_on();
   1d8b0:	f7ff fa98 	bl	1cde4 <lll_hfclock_on>
			LL_ASSERT(err >= 0);
   1d8b4:	2800      	cmp	r0, #0
   1d8b6:	da0b      	bge.n	1d8d0 <is_abort_cb+0x30>
   1d8b8:	f44f 72a8 	mov.w	r2, #336	; 0x150
   1d8bc:	490b      	ldr	r1, [pc, #44]	; (1d8ec <is_abort_cb+0x4c>)
   1d8be:	480c      	ldr	r0, [pc, #48]	; (1d8f0 <is_abort_cb+0x50>)
   1d8c0:	f009 fb55 	bl	26f6e <printk>
   1d8c4:	4040      	eors	r0, r0
   1d8c6:	f380 8811 	msr	BASEPRI, r0
   1d8ca:	f04f 0003 	mov.w	r0, #3
   1d8ce:	df02      	svc	2
   1d8d0:	f06f 000a 	mvn.w	r0, #10
   1d8d4:	e006      	b.n	1d8e4 <is_abort_cb+0x44>
		radio_isr_set(isr_window, lll);
   1d8d6:	4807      	ldr	r0, [pc, #28]	; (1d8f4 <is_abort_cb+0x54>)
   1d8d8:	4611      	mov	r1, r2
   1d8da:	f000 fd5f 	bl	1e39c <radio_isr_set>
	radio_disable();
   1d8de:	f000 fe2b 	bl	1e538 <radio_disable>
	return 0;
   1d8e2:	2000      	movs	r0, #0
}
   1d8e4:	bd08      	pop	{r3, pc}
   1d8e6:	bf00      	nop
   1d8e8:	0002c4b1 	.word	0x0002c4b1
   1d8ec:	000351be 	.word	0x000351be
   1d8f0:	0002fa94 	.word	0x0002fa94
   1d8f4:	0002c4d9 	.word	0x0002c4d9

0001d8f8 <isr_rx>:
{
   1d8f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d8fc:	4605      	mov	r5, r0
	trx_done = radio_is_done();
   1d8fe:	f000 fe43 	bl	1e588 <radio_is_done>
   1d902:	b2c4      	uxtb	r4, r0
	if (trx_done) {
   1d904:	2c00      	cmp	r4, #0
   1d906:	f000 8088 	beq.w	1da1a <isr_rx+0x122>
		crc_ok = radio_crc_is_valid();
   1d90a:	f000 fe5d 	bl	1e5c8 <radio_crc_is_valid>
   1d90e:	fa5f f880 	uxtb.w	r8, r0
		devmatch_ok = radio_filter_has_match();
   1d912:	f000 fedf 	bl	1e6d4 <radio_filter_has_match>
   1d916:	b2c7      	uxtb	r7, r0
		devmatch_id = radio_filter_match_get();
   1d918:	f000 fee6 	bl	1e6e8 <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
   1d91c:	f001 f812 	bl	1e944 <radio_ar_has_match>
		irkmatch_id = radio_ar_match_get();
   1d920:	f000 fff8 	bl	1e914 <radio_ar_match_get>
		rssi_ready = radio_rssi_is_ready();
   1d924:	f000 fe9e 	bl	1e664 <radio_rssi_is_ready>
   1d928:	b2c6      	uxtb	r6, r0
	lll_isr_status_reset();
   1d92a:	f00e fce4 	bl	2c2f6 <lll_isr_status_reset>
	if (!trx_done) {
   1d92e:	2c00      	cmp	r4, #0
   1d930:	f000 808d 	beq.w	1da4e <isr_rx+0x156>
	node_rx = ull_pdu_rx_alloc_peek(1);
   1d934:	2001      	movs	r0, #1
   1d936:	f7fc fe4f 	bl	1a5d8 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1d93a:	4604      	mov	r4, r0
   1d93c:	b958      	cbnz	r0, 1d956 <isr_rx+0x5e>
   1d93e:	f240 12bb 	movw	r2, #443	; 0x1bb
   1d942:	4965      	ldr	r1, [pc, #404]	; (1dad8 <isr_rx+0x1e0>)
   1d944:	4865      	ldr	r0, [pc, #404]	; (1dadc <isr_rx+0x1e4>)
   1d946:	f009 fb12 	bl	26f6e <printk>
   1d94a:	4040      	eors	r0, r0
   1d94c:	f380 8811 	msr	BASEPRI, r0
   1d950:	f04f 0003 	mov.w	r0, #3
   1d954:	df02      	svc	2
	if (crc_ok && isr_rx_scan_check(lll, irkmatch_ok, devmatch_ok,
   1d956:	f1b8 0f00 	cmp.w	r8, #0
   1d95a:	d078      	beq.n	1da4e <isr_rx+0x156>
		 (!devmatch_ok || ull_filter_lll_rl_idx_allowed(irkmatch_ok,
								rl_idx))) ||
		(((lll->filter_policy & 0x01) != 0) &&
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(rl_idx)));
#else
	return ((lll->filter_policy & 0x01) == 0U) ||
   1d95c:	7a29      	ldrb	r1, [r5, #8]
   1d95e:	0708      	lsls	r0, r1, #28
   1d960:	d501      	bpl.n	1d966 <isr_rx+0x6e>
	if (crc_ok && isr_rx_scan_check(lll, irkmatch_ok, devmatch_ok,
   1d962:	2f00      	cmp	r7, #0
   1d964:	d073      	beq.n	1da4e <isr_rx+0x156>

		return 0;
#endif /* CONFIG_BT_CENTRAL */

	/* Active scanner */
	} else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   1d966:	7f23      	ldrb	r3, [r4, #28]
   1d968:	f013 020f 	ands.w	r2, r3, #15
   1d96c:	d002      	beq.n	1d974 <isr_rx+0x7c>
   1d96e:	2a06      	cmp	r2, #6
   1d970:	f040 80b0 	bne.w	1dad4 <isr_rx+0x1dc>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
   1d974:	7f60      	ldrb	r0, [r4, #29]
   1d976:	2825      	cmp	r0, #37	; 0x25
   1d978:	d853      	bhi.n	1da22 <isr_rx+0x12a>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind)) &&
		   lll->type &&
   1d97a:	f995 0008 	ldrsb.w	r0, [r5, #8]
   1d97e:	2800      	cmp	r0, #0
   1d980:	da4f      	bge.n	1da22 <isr_rx+0x12a>
		bt_addr_t *lrpa;
#endif /* CONFIG_BT_CTLR_PRIVACY */
		int err;

		/* setup tIFS switching */
		radio_tmr_tifs_set(EVENT_IFS_US);
   1d982:	2096      	movs	r0, #150	; 0x96
   1d984:	f000 fec6 	bl	1e714 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   1d988:	2000      	movs	r0, #0
   1d98a:	f000 fe2f 	bl	1e5ec <radio_switch_complete_and_rx>

		/* save the adv packet */
		err = isr_rx_scan_report(lll, rssi_ready,
   1d98e:	2100      	movs	r1, #0
   1d990:	4630      	mov	r0, r6
   1d992:	f00e fdc2 	bl	2c51a <isr_rx_scan_report.isra.5>
					 irkmatch_ok ? rl_idx : FILTER_IDX_NONE,
					 false);
		if (err) {
   1d996:	2800      	cmp	r0, #0
   1d998:	d159      	bne.n	1da4e <isr_rx+0x156>
			return err;
		}

		/* prepare the scan request packet */
		pdu_tx = (void *)radio_pkt_scratch_get();
   1d99a:	f000 fe23 	bl	1e5e4 <radio_pkt_scratch_get>
		pdu_tx->type = PDU_ADV_TYPE_SCAN_REQ;
   1d99e:	7802      	ldrb	r2, [r0, #0]
   1d9a0:	2103      	movs	r1, #3
   1d9a2:	f361 0203 	bfi	r2, r1, #0, #4
   1d9a6:	7002      	strb	r2, [r0, #0]
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
   1d9a8:	7f21      	ldrb	r1, [r4, #28]
   1d9aa:	b2d2      	uxtb	r2, r2
   1d9ac:	f3c1 1180 	ubfx	r1, r1, #6, #1
   1d9b0:	f361 12c7 	bfi	r2, r1, #7, #1
		pdu_tx->len = sizeof(struct pdu_adv_scan_req);
   1d9b4:	210c      	movs	r1, #12
   1d9b6:	7041      	strb	r1, [r0, #1]
			       BDADDR_SIZE);
		} else {
#else
		if (1) {
#endif /* CONFIG_BT_CTLR_PRIVACY */
			pdu_tx->tx_addr = lll->init_addr_type;
   1d9b8:	7a29      	ldrb	r1, [r5, #8]
   1d9ba:	f3c1 1180 	ubfx	r1, r1, #6, #1
   1d9be:	f361 1286 	bfi	r2, r1, #6, #1
   1d9c2:	4601      	mov	r1, r0
   1d9c4:	f801 2b02 	strb.w	r2, [r1], #2
   1d9c8:	462a      	mov	r2, r5
   1d9ca:	f852 6f09 	ldr.w	r6, [r2, #9]!
   1d9ce:	f8c0 6002 	str.w	r6, [r0, #2]
   1d9d2:	8892      	ldrh	r2, [r2, #4]
   1d9d4:	808a      	strh	r2, [r1, #4]
   1d9d6:	f854 2f1e 	ldr.w	r2, [r4, #30]!
   1d9da:	6082      	str	r2, [r0, #8]
   1d9dc:	88a2      	ldrh	r2, [r4, #4]
   1d9de:	8182      	strh	r2, [r0, #12]
			       &lll->init_addr[0], BDADDR_SIZE);
		}
		memcpy(&pdu_tx->scan_req.adv_addr[0],
		       &pdu_adv_rx->adv_ind.addr[0], BDADDR_SIZE);

		radio_pkt_tx_set(pdu_tx);
   1d9e0:	f000 fd98 	bl	1e514 <radio_pkt_tx_set>

		/* assert if radio packet ptr is not set and radio started tx */
		LL_ASSERT(!radio_is_ready());
   1d9e4:	f000 fdc6 	bl	1e574 <radio_is_ready>
   1d9e8:	b158      	cbz	r0, 1da02 <isr_rx+0x10a>
   1d9ea:	f240 32f9 	movw	r2, #1017	; 0x3f9
   1d9ee:	493a      	ldr	r1, [pc, #232]	; (1dad8 <isr_rx+0x1e0>)
   1d9f0:	483a      	ldr	r0, [pc, #232]	; (1dadc <isr_rx+0x1e4>)
   1d9f2:	f009 fabc 	bl	26f6e <printk>
   1d9f6:	4040      	eors	r0, r0
   1d9f8:	f380 8811 	msr	BASEPRI, r0
   1d9fc:	f04f 0003 	mov.w	r0, #3
   1da00:	df02      	svc	2
			lll_prof_cputime_capture();

		}

		/* capture end of Tx-ed PDU, used to calculate HCTO. */
		radio_tmr_end_capture();
   1da02:	f000 ff73 	bl	1e8ec <radio_tmr_end_capture>
					 radio_rx_chain_delay_get(0, 0) -
					 CONFIG_BT_CTLR_GPIO_PA_OFFSET);
#endif /* CONFIG_BT_CTLR_GPIO_PA_PIN */

		/* switch scanner state to active */
		lll->state = 1U;
   1da06:	7a2b      	ldrb	r3, [r5, #8]
		if (pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) {
			lll->is_adv_ind = 1U;
		}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

		radio_isr_set(isr_tx, lll);
   1da08:	4835      	ldr	r0, [pc, #212]	; (1dae0 <isr_rx+0x1e8>)
		lll->state = 1U;
   1da0a:	f043 0301 	orr.w	r3, r3, #1
   1da0e:	722b      	strb	r3, [r5, #8]
		radio_isr_set(isr_tx, lll);
   1da10:	4629      	mov	r1, r5
}
   1da12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		radio_isr_set(isr_tx, lll);
   1da16:	f000 bcc1 	b.w	1e39c <radio_isr_set>
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0U;
   1da1a:	46a0      	mov	r8, r4
   1da1c:	4626      	mov	r6, r4
   1da1e:	4627      	mov	r7, r4
   1da20:	e783      	b.n	1d92a <isr_rx+0x32>

		return 0;
	}
	/* Passive scanner or scan responses */
	else if (((((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   1da22:	f013 0f0d 	tst.w	r3, #13
   1da26:	d001      	beq.n	1da2c <isr_rx+0x134>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
   1da28:	2a06      	cmp	r2, #6
   1da2a:	d109      	bne.n	1da40 <isr_rx+0x148>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
   1da2c:	7f60      	ldrb	r0, [r4, #29]
   1da2e:	2825      	cmp	r0, #37	; 0x25
   1da30:	d806      	bhi.n	1da40 <isr_rx+0x148>
	bool dir_report = false;
   1da32:	2100      	movs	r1, #0
		   (lll->phy)) ||
#endif /* CONFIG_BT_CTLR_ADV_EXT */
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_scan_rsp)) &&
		   (lll->state != 0U) &&
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
   1da34:	7f63      	ldrb	r3, [r4, #29]
   1da36:	b153      	cbz	r3, 1da4e <isr_rx+0x156>
		   1) {
#endif /* !CONFIG_BT_CENTRAL */
		uint32_t err;

		/* save the scan response packet */
		err = isr_rx_scan_report(lll, rssi_ready,
   1da38:	4630      	mov	r0, r6
   1da3a:	f00e fd6e 	bl	2c51a <isr_rx_scan_report.isra.5>
					 irkmatch_ok ? rl_idx :
						       FILTER_IDX_NONE,
					 dir_report);
		if (err) {
   1da3e:	e006      	b.n	1da4e <isr_rx+0x156>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind))) ||
   1da40:	2a01      	cmp	r2, #1
   1da42:	d00c      	beq.n	1da5e <isr_rx+0x166>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
   1da44:	7f23      	ldrb	r3, [r4, #28]
					&dir_report))) ||
   1da46:	f003 030f 	and.w	r3, r3, #15
   1da4a:	2b04      	cmp	r3, #4
   1da4c:	d02a      	beq.n	1daa4 <isr_rx+0x1ac>
	radio_isr_set(isr_done, lll);
   1da4e:	4629      	mov	r1, r5
   1da50:	4824      	ldr	r0, [pc, #144]	; (1dae4 <isr_rx+0x1ec>)
   1da52:	f000 fca3 	bl	1e39c <radio_isr_set>
}
   1da56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	radio_disable();
   1da5a:	f000 bd6d 	b.w	1e538 <radio_disable>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
   1da5e:	7f62      	ldrb	r2, [r4, #29]
   1da60:	2a0c      	cmp	r2, #12
   1da62:	d1f4      	bne.n	1da4e <isr_rx+0x156>
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */

	return (((lll->init_addr_type == pdu->rx_addr) &&
		!memcmp(lll->init_addr, pdu->direct_ind.tgt_addr,
			BDADDR_SIZE))) ||
   1da64:	f3c1 1180 	ubfx	r1, r1, #6, #1
   1da68:	ebb1 1fd3 	cmp.w	r1, r3, lsr #7
   1da6c:	d010      	beq.n	1da90 <isr_rx+0x198>

static inline bool isr_scan_tgta_rpa_check(struct lll_scan *lll,
					   struct pdu_adv *pdu,
					   bool *dir_report)
{
	if (((lll->filter_policy & 0x02) != 0U) &&
   1da6e:	7a2b      	ldrb	r3, [r5, #8]
   1da70:	f3c3 03c1 	ubfx	r3, r3, #3, #2
   1da74:	079a      	lsls	r2, r3, #30
   1da76:	d5e5      	bpl.n	1da44 <isr_rx+0x14c>
   1da78:	f994 301c 	ldrsb.w	r3, [r4, #28]
   1da7c:	2b00      	cmp	r3, #0
   1da7e:	dae1      	bge.n	1da44 <isr_rx+0x14c>
	    (pdu->rx_addr != 0) &&
   1da80:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   1da84:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1da88:	2b40      	cmp	r3, #64	; 0x40
   1da8a:	d1db      	bne.n	1da44 <isr_rx+0x14c>

		if (dir_report) {
			*dir_report = true;
		}

		return true;
   1da8c:	2101      	movs	r1, #1
   1da8e:	e7d1      	b.n	1da34 <isr_rx+0x13c>
		!memcmp(lll->init_addr, pdu->direct_ind.tgt_addr,
   1da90:	2206      	movs	r2, #6
   1da92:	f104 0124 	add.w	r1, r4, #36	; 0x24
   1da96:	f105 0009 	add.w	r0, r5, #9
   1da9a:	f00f fd65 	bl	2d568 <memcmp>
	return (((lll->init_addr_type == pdu->rx_addr) &&
   1da9e:	2800      	cmp	r0, #0
   1daa0:	d0c7      	beq.n	1da32 <isr_rx+0x13a>
   1daa2:	e7e4      	b.n	1da6e <isr_rx+0x176>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
   1daa4:	7f63      	ldrb	r3, [r4, #29]
   1daa6:	2b25      	cmp	r3, #37	; 0x25
   1daa8:	d8d1      	bhi.n	1da4e <isr_rx+0x156>
		   (lll->state != 0U) &&
   1daaa:	7a2b      	ldrb	r3, [r5, #8]
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_scan_rsp)) &&
   1daac:	07db      	lsls	r3, r3, #31
   1daae:	d5ce      	bpl.n	1da4e <isr_rx+0x156>
	return false;
}

static inline bool isr_scan_rsp_adva_matches(struct pdu_adv *srsp)
{
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
   1dab0:	f000 fd98 	bl	1e5e4 <radio_pkt_scratch_get>

	return ((sreq->rx_addr == srsp->tx_addr) &&
   1dab4:	7f23      	ldrb	r3, [r4, #28]
   1dab6:	7802      	ldrb	r2, [r0, #0]
   1dab8:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1dabc:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   1dac0:	d1c5      	bne.n	1da4e <isr_rx+0x156>
		(memcmp(&sreq->scan_req.adv_addr[0],
   1dac2:	2206      	movs	r2, #6
   1dac4:	f104 011e 	add.w	r1, r4, #30
   1dac8:	3008      	adds	r0, #8
   1daca:	f00f fd4d 	bl	2d568 <memcmp>
		   (lll->state != 0U) &&
   1dace:	2800      	cmp	r0, #0
   1dad0:	d0af      	beq.n	1da32 <isr_rx+0x13a>
   1dad2:	e7bc      	b.n	1da4e <isr_rx+0x156>
	else if (((((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   1dad4:	2a02      	cmp	r2, #2
   1dad6:	e7a8      	b.n	1da2a <isr_rx+0x132>
   1dad8:	000351be 	.word	0x000351be
   1dadc:	0002fa94 	.word	0x0002fa94
   1dae0:	0001d78d 	.word	0x0001d78d
   1dae4:	0002c49f 	.word	0x0002c49f

0001dae8 <lll_scan_prepare>:
{
   1dae8:	b513      	push	{r0, r1, r4, lr}
   1daea:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   1daec:	f7ff f97a 	bl	1cde4 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   1daf0:	2800      	cmp	r0, #0
   1daf2:	da0a      	bge.n	1db0a <lll_scan_prepare+0x22>
   1daf4:	2270      	movs	r2, #112	; 0x70
   1daf6:	4910      	ldr	r1, [pc, #64]	; (1db38 <lll_scan_prepare+0x50>)
   1daf8:	4810      	ldr	r0, [pc, #64]	; (1db3c <lll_scan_prepare+0x54>)
   1dafa:	f009 fa38 	bl	26f6e <printk>
   1dafe:	4040      	eors	r0, r0
   1db00:	f380 8811 	msr	BASEPRI, r0
   1db04:	f04f 0003 	mov.w	r0, #3
   1db08:	df02      	svc	2
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   1db0a:	9400      	str	r4, [sp, #0]
   1db0c:	2300      	movs	r3, #0
   1db0e:	4a0c      	ldr	r2, [pc, #48]	; (1db40 <lll_scan_prepare+0x58>)
   1db10:	490c      	ldr	r1, [pc, #48]	; (1db44 <lll_scan_prepare+0x5c>)
   1db12:	480d      	ldr	r0, [pc, #52]	; (1db48 <lll_scan_prepare+0x60>)
   1db14:	f00e fbae 	bl	2c274 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1db18:	b160      	cbz	r0, 1db34 <lll_scan_prepare+0x4c>
   1db1a:	3077      	adds	r0, #119	; 0x77
   1db1c:	d00a      	beq.n	1db34 <lll_scan_prepare+0x4c>
   1db1e:	2273      	movs	r2, #115	; 0x73
   1db20:	4905      	ldr	r1, [pc, #20]	; (1db38 <lll_scan_prepare+0x50>)
   1db22:	4806      	ldr	r0, [pc, #24]	; (1db3c <lll_scan_prepare+0x54>)
   1db24:	f009 fa23 	bl	26f6e <printk>
   1db28:	4040      	eors	r0, r0
   1db2a:	f380 8811 	msr	BASEPRI, r0
   1db2e:	f04f 0003 	mov.w	r0, #3
   1db32:	df02      	svc	2
}
   1db34:	b002      	add	sp, #8
   1db36:	bd10      	pop	{r4, pc}
   1db38:	000351be 	.word	0x000351be
   1db3c:	0002fa94 	.word	0x0002fa94
   1db40:	0001d57d 	.word	0x0001d57d
   1db44:	0001d855 	.word	0x0001d855
   1db48:	0001d8a1 	.word	0x0001d8a1

0001db4c <isr_done>:
{
	return 0;
}

static void isr_done(void *param)
{
   1db4c:	b570      	push	{r4, r5, r6, lr}
   1db4e:	4605      	mov	r5, r0
	struct event_done_extra *e;

	lll_isr_status_reset();
   1db50:	f00e fbd1 	bl	2c2f6 <lll_isr_status_reset>

	e = ull_event_done_extra_get();
   1db54:	f7fc ff08 	bl	1a968 <ull_event_done_extra_get>
	LL_ASSERT(e);
   1db58:	4604      	mov	r4, r0
   1db5a:	b958      	cbnz	r0, 1db74 <isr_done+0x28>
   1db5c:	f240 226d 	movw	r2, #621	; 0x26d
   1db60:	4914      	ldr	r1, [pc, #80]	; (1dbb4 <isr_done+0x68>)
   1db62:	4815      	ldr	r0, [pc, #84]	; (1dbb8 <isr_done+0x6c>)
   1db64:	f009 fa03 	bl	26f6e <printk>
   1db68:	4040      	eors	r0, r0
   1db6a:	f380 8811 	msr	BASEPRI, r0
   1db6e:	f04f 0003 	mov.w	r0, #3
   1db72:	df02      	svc	2

	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   1db74:	2301      	movs	r3, #1
   1db76:	7023      	strb	r3, [r4, #0]
	e->trx_cnt = trx_cnt;
   1db78:	4b10      	ldr	r3, [pc, #64]	; (1dbbc <isr_done+0x70>)
	e->crc_valid = crc_valid;
   1db7a:	4a11      	ldr	r2, [pc, #68]	; (1dbc0 <isr_done+0x74>)
	e->trx_cnt = trx_cnt;
   1db7c:	881b      	ldrh	r3, [r3, #0]
	e->crc_valid = crc_valid;
   1db7e:	7812      	ldrb	r2, [r2, #0]
	e->trx_cnt = trx_cnt;
   1db80:	80a3      	strh	r3, [r4, #4]
	e->crc_valid = crc_valid;
   1db82:	71a2      	strb	r2, [r4, #6]
#if defined(CONFIG_BT_CTLR_LE_ENC)
	e->mic_state = mic_state;
#endif /* CONFIG_BT_CTLR_LE_ENC */

#if defined(CONFIG_BT_PERIPHERAL)
	if (trx_cnt) {
   1db84:	b18b      	cbz	r3, 1dbaa <isr_done+0x5e>
		struct lll_conn *lll = param;

		if (lll->role) {
   1db86:	f995 3021 	ldrsb.w	r3, [r5, #33]	; 0x21
   1db8a:	2b00      	cmp	r3, #0
   1db8c:	da0d      	bge.n	1dbaa <isr_done+0x5e>
			preamble_to_addr_us =
				addr_us_get(0);
#endif /* !CONFIG_BT_CTLR_PHY */

			e->drift.start_to_address_actual_us =
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   1db8e:	f000 fea1 	bl	1e8d4 <radio_tmr_aa_restore>
   1db92:	4606      	mov	r6, r0
   1db94:	f000 fea4 	bl	1e8e0 <radio_tmr_ready_get>
			e->drift.window_widening_event_us =
   1db98:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1db9a:	60e3      	str	r3, [r4, #12]
				lll->slave.window_widening_event_us;
			e->drift.preamble_to_addr_us = preamble_to_addr_us;
   1db9c:	2328      	movs	r3, #40	; 0x28
   1db9e:	6123      	str	r3, [r4, #16]
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   1dba0:	1a30      	subs	r0, r6, r0

			/* Reset window widening, as anchor point sync-ed */
			lll->slave.window_widening_event_us = 0;
   1dba2:	2300      	movs	r3, #0
			e->drift.start_to_address_actual_us =
   1dba4:	60a0      	str	r0, [r4, #8]
			lll->slave.window_widening_event_us = 0;
   1dba6:	636b      	str	r3, [r5, #52]	; 0x34
			lll->slave.window_size_event_us = 0;
   1dba8:	63eb      	str	r3, [r5, #60]	; 0x3c
		}
	}
#endif /* CONFIG_BT_PERIPHERAL */

	lll_isr_cleanup(param);
   1dbaa:	4628      	mov	r0, r5
}
   1dbac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	lll_isr_cleanup(param);
   1dbb0:	f7ff b89a 	b.w	1cce8 <lll_isr_cleanup>
   1dbb4:	0003521a 	.word	0x0003521a
   1dbb8:	0002fa94 	.word	0x0002fa94
   1dbbc:	200046ca 	.word	0x200046ca
   1dbc0:	20004887 	.word	0x20004887

0001dbc4 <lll_conn_prepare_reset>:
	trx_cnt = 0U;
   1dbc4:	4a03      	ldr	r2, [pc, #12]	; (1dbd4 <lll_conn_prepare_reset+0x10>)
   1dbc6:	2300      	movs	r3, #0
   1dbc8:	8013      	strh	r3, [r2, #0]
	crc_valid = 0U;
   1dbca:	4a03      	ldr	r2, [pc, #12]	; (1dbd8 <lll_conn_prepare_reset+0x14>)
   1dbcc:	7013      	strb	r3, [r2, #0]
	crc_expire = 0U;
   1dbce:	4a03      	ldr	r2, [pc, #12]	; (1dbdc <lll_conn_prepare_reset+0x18>)
   1dbd0:	7013      	strb	r3, [r2, #0]
}
   1dbd2:	4770      	bx	lr
   1dbd4:	200046ca 	.word	0x200046ca
   1dbd8:	20004887 	.word	0x20004887
   1dbdc:	20004886 	.word	0x20004886

0001dbe0 <lll_conn_abort_cb>:
{
   1dbe0:	b510      	push	{r4, lr}
   1dbe2:	460c      	mov	r4, r1
	if (!prepare_param) {
   1dbe4:	b930      	cbnz	r0, 1dbf4 <lll_conn_abort_cb+0x14>
		radio_isr_set(isr_done, param);
   1dbe6:	480d      	ldr	r0, [pc, #52]	; (1dc1c <lll_conn_abort_cb+0x3c>)
   1dbe8:	f000 fbd8 	bl	1e39c <radio_isr_set>
}
   1dbec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   1dbf0:	f000 bca2 	b.w	1e538 <radio_disable>
	err = lll_hfclock_off();
   1dbf4:	f7ff f90c 	bl	1ce10 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1dbf8:	2800      	cmp	r0, #0
   1dbfa:	da0a      	bge.n	1dc12 <lll_conn_abort_cb+0x32>
   1dbfc:	229b      	movs	r2, #155	; 0x9b
   1dbfe:	4908      	ldr	r1, [pc, #32]	; (1dc20 <lll_conn_abort_cb+0x40>)
   1dc00:	4808      	ldr	r0, [pc, #32]	; (1dc24 <lll_conn_abort_cb+0x44>)
   1dc02:	f009 f9b4 	bl	26f6e <printk>
   1dc06:	4040      	eors	r0, r0
   1dc08:	f380 8811 	msr	BASEPRI, r0
   1dc0c:	f04f 0003 	mov.w	r0, #3
   1dc10:	df02      	svc	2
	lll_done(param);
   1dc12:	4620      	mov	r0, r4
}
   1dc14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1dc18:	f7fe bfee 	b.w	1cbf8 <lll_done>
   1dc1c:	0001db4d 	.word	0x0001db4d
   1dc20:	0003521a 	.word	0x0003521a
   1dc24:	0002fa94 	.word	0x0002fa94

0001dc28 <lll_conn_rx_pkt_set>:
{
   1dc28:	b510      	push	{r4, lr}
	node_rx = ull_pdu_rx_alloc_peek(1);
   1dc2a:	2001      	movs	r0, #1
   1dc2c:	f7fc fcd4 	bl	1a5d8 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1dc30:	4604      	mov	r4, r0
   1dc32:	b958      	cbnz	r0, 1dc4c <lll_conn_rx_pkt_set+0x24>
   1dc34:	f240 12d5 	movw	r2, #469	; 0x1d5
   1dc38:	490c      	ldr	r1, [pc, #48]	; (1dc6c <lll_conn_rx_pkt_set+0x44>)
   1dc3a:	480d      	ldr	r0, [pc, #52]	; (1dc70 <lll_conn_rx_pkt_set+0x48>)
   1dc3c:	f009 f997 	bl	26f6e <printk>
   1dc40:	4040      	eors	r0, r0
   1dc42:	f380 8811 	msr	BASEPRI, r0
   1dc46:	f04f 0003 	mov.w	r0, #3
   1dc4a:	df02      	svc	2
	radio_phy_set(phy, 0);
   1dc4c:	2100      	movs	r1, #0
   1dc4e:	4608      	mov	r0, r1
   1dc50:	f000 fbe8 	bl	1e424 <radio_phy_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
   1dc54:	2008      	movs	r0, #8
   1dc56:	2201      	movs	r2, #1
   1dc58:	211b      	movs	r1, #27
   1dc5a:	f000 fc29 	bl	1e4b0 <radio_pkt_configure>
		radio_pkt_rx_set(node_rx->pdu);
   1dc5e:	f104 001c 	add.w	r0, r4, #28
}
   1dc62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_pkt_rx_set(node_rx->pdu);
   1dc66:	f000 bc4f 	b.w	1e508 <radio_pkt_rx_set>
   1dc6a:	bf00      	nop
   1dc6c:	0003521a 	.word	0x0003521a
   1dc70:	0002fa94 	.word	0x0002fa94

0001dc74 <lll_conn_isr_tx>:
{
   1dc74:	b570      	push	{r4, r5, r6, lr}
   1dc76:	4605      	mov	r5, r0
	lll_isr_tx_status_reset();
   1dc78:	f00e fb2d 	bl	2c2d6 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   1dc7c:	2096      	movs	r0, #150	; 0x96
   1dc7e:	f000 fd49 	bl	1e714 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   1dc82:	2300      	movs	r3, #0
   1dc84:	4618      	mov	r0, r3
   1dc86:	461a      	mov	r2, r3
   1dc88:	4619      	mov	r1, r3
   1dc8a:	f000 fcbb 	bl	1e604 <radio_switch_complete_and_tx>
	lll_conn_rx_pkt_set(lll);
   1dc8e:	4628      	mov	r0, r5
   1dc90:	f7ff ffca 	bl	1dc28 <lll_conn_rx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   1dc94:	f000 fc6e 	bl	1e574 <radio_is_ready>
   1dc98:	b158      	cbz	r0, 1dcb2 <lll_conn_isr_tx+0x3e>
   1dc9a:	f240 12a1 	movw	r2, #417	; 0x1a1
   1dc9e:	4910      	ldr	r1, [pc, #64]	; (1dce0 <lll_conn_isr_tx+0x6c>)
   1dca0:	4810      	ldr	r0, [pc, #64]	; (1dce4 <lll_conn_isr_tx+0x70>)
   1dca2:	f009 f964 	bl	26f6e <printk>
   1dca6:	4040      	eors	r0, r0
   1dca8:	f380 8811 	msr	BASEPRI, r0
   1dcac:	f04f 0003 	mov.w	r0, #3
   1dcb0:	df02      	svc	2
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 +
   1dcb2:	f000 fe29 	bl	1e908 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(0, 0);
   1dcb6:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 +
   1dcb8:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(0, 0);
   1dcba:	4608      	mov	r0, r1
   1dcbc:	f00e fd64 	bl	2c788 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(0, 0);
   1dcc0:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(0, 0);
   1dcc2:	4606      	mov	r6, r0
	hcto -= radio_tx_chain_delay_get(0, 0);
   1dcc4:	4608      	mov	r0, r1
   1dcc6:	f00e fd5b 	bl	2c780 <radio_tx_chain_delay_get>
   1dcca:	4434      	add	r4, r6
   1dccc:	34cb      	adds	r4, #203	; 0xcb
	radio_tmr_hcto_configure(hcto);
   1dcce:	1a20      	subs	r0, r4, r0
   1dcd0:	f000 fdd4 	bl	1e87c <radio_tmr_hcto_configure>
	radio_isr_set(lll_conn_isr_rx, param);
   1dcd4:	4629      	mov	r1, r5
   1dcd6:	4804      	ldr	r0, [pc, #16]	; (1dce8 <lll_conn_isr_tx+0x74>)
}
   1dcd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	radio_isr_set(lll_conn_isr_rx, param);
   1dcdc:	f000 bb5e 	b.w	1e39c <radio_isr_set>
   1dce0:	0003521a 	.word	0x0003521a
   1dce4:	0002fa94 	.word	0x0002fa94
   1dce8:	0001dced 	.word	0x0001dced

0001dcec <lll_conn_isr_rx>:
{
   1dcec:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1dcf0:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   1dcf2:	f000 fc49 	bl	1e588 <radio_is_done>
   1dcf6:	b2c5      	uxtb	r5, r0
	if (trx_done) {
   1dcf8:	b185      	cbz	r5, 1dd1c <lll_conn_isr_rx+0x30>
		crc_ok = radio_crc_is_valid();
   1dcfa:	f000 fc65 	bl	1e5c8 <radio_crc_is_valid>
   1dcfe:	b2c7      	uxtb	r7, r0
		rssi_ready = radio_rssi_is_ready();
   1dd00:	f000 fcb0 	bl	1e664 <radio_rssi_is_ready>
	lll_isr_rx_status_reset();
   1dd04:	f00e faee 	bl	2c2e4 <lll_isr_rx_status_reset>
	if (!trx_done) {
   1dd08:	b955      	cbnz	r5, 1dd20 <lll_conn_isr_rx+0x34>
		radio_isr_set(isr_done, param);
   1dd0a:	4621      	mov	r1, r4
   1dd0c:	4893      	ldr	r0, [pc, #588]	; (1df5c <lll_conn_isr_rx+0x270>)
   1dd0e:	f000 fb45 	bl	1e39c <radio_isr_set>
		radio_disable();
   1dd12:	f000 fc11 	bl	1e538 <radio_disable>
}
   1dd16:	b002      	add	sp, #8
   1dd18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		crc_ok = rssi_ready = 0U;
   1dd1c:	462f      	mov	r7, r5
   1dd1e:	e7f1      	b.n	1dd04 <lll_conn_isr_rx+0x18>
	trx_cnt++;
   1dd20:	4a8f      	ldr	r2, [pc, #572]	; (1df60 <lll_conn_isr_rx+0x274>)
   1dd22:	8813      	ldrh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   1dd24:	2001      	movs	r0, #1
	trx_cnt++;
   1dd26:	3301      	adds	r3, #1
   1dd28:	8013      	strh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   1dd2a:	f7fc fc55 	bl	1a5d8 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1dd2e:	4606      	mov	r6, r0
   1dd30:	b950      	cbnz	r0, 1dd48 <lll_conn_isr_rx+0x5c>
   1dd32:	22d0      	movs	r2, #208	; 0xd0
   1dd34:	498b      	ldr	r1, [pc, #556]	; (1df64 <lll_conn_isr_rx+0x278>)
   1dd36:	488c      	ldr	r0, [pc, #560]	; (1df68 <lll_conn_isr_rx+0x27c>)
   1dd38:	f009 f919 	bl	26f6e <printk>
   1dd3c:	4040      	eors	r0, r0
   1dd3e:	f380 8811 	msr	BASEPRI, r0
   1dd42:	f04f 0003 	mov.w	r0, #3
   1dd46:	df02      	svc	2
	if (crc_ok) {
   1dd48:	f8df 8228 	ldr.w	r8, [pc, #552]	; 1df74 <lll_conn_isr_rx+0x288>
   1dd4c:	2f00      	cmp	r7, #0
   1dd4e:	f000 80e6 	beq.w	1df1e <lll_conn_isr_rx+0x232>
		       offsetof(struct pdu_data, lldata));
	}
#endif

	/* Ack for tx-ed data */
	if (pdu_data_rx->nesn != lll->sn) {
   1dd52:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
   1dd56:	7f31      	ldrb	r1, [r6, #28]
   1dd58:	f003 0201 	and.w	r2, r3, #1
   1dd5c:	f3c1 0180 	ubfx	r1, r1, #2, #1
   1dd60:	4291      	cmp	r1, r2
   1dd62:	f000 80a6 	beq.w	1deb2 <lll_conn_isr_rx+0x1c6>
		struct pdu_data *pdu_data_tx;
		struct node_tx *tx;
		memq_link_t *link;

		/* Increment sequence number */
		lll->sn++;
   1dd66:	f082 0201 	eor.w	r2, r2, #1
   1dd6a:	f362 0300 	bfi	r3, r2, #0, #1
   1dd6e:	f884 3056 	strb.w	r3, [r4, #86]	; 0x56

#if defined(CONFIG_BT_PERIPHERAL)
		/* First ack (and redundantly any other ack) enable use of
		 * slave latency.
		 */
		if (lll->role) {
   1dd72:	f994 3021 	ldrsb.w	r3, [r4, #33]	; 0x21
   1dd76:	2b00      	cmp	r3, #0
			lll->slave.latency_enabled = 1;
   1dd78:	bfbe      	ittt	lt
   1dd7a:	f894 3024 	ldrblt.w	r3, [r4, #36]	; 0x24
   1dd7e:	f043 0301 	orrlt.w	r3, r3, #1
   1dd82:	f884 3024 	strblt.w	r3, [r4, #36]	; 0x24
		}
#endif /* CONFIG_BT_PERIPHERAL */

		FORCE_MD_CNT_DEC();

		if (!lll->empty) {
   1dd86:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
   1dd8a:	f013 0504 	ands.w	r5, r3, #4
   1dd8e:	f040 808a 	bne.w	1dea6 <lll_conn_isr_rx+0x1ba>
			link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail,
   1dd92:	aa01      	add	r2, sp, #4
   1dd94:	e9d4 0110 	ldrd	r0, r1, [r4, #64]	; 0x40
   1dd98:	f00d fce4 	bl	2b764 <memq_peek>
			}

			link = NULL;
		}

		if (link) {
   1dd9c:	4681      	mov	r9, r0
   1dd9e:	2800      	cmp	r0, #0
   1dda0:	f040 808a 	bne.w	1deb8 <lll_conn_isr_rx+0x1cc>
			}
		}
	}

	/* process received data */
	if ((pdu_data_rx->sn == lll->nesn) &&
   1dda4:	7f32      	ldrb	r2, [r6, #28]
   1dda6:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
   1ddaa:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   1ddae:	f3c3 0340 	ubfx	r3, r3, #1, #1
   1ddb2:	429a      	cmp	r2, r3
   1ddb4:	f000 809f 	beq.w	1def6 <lll_conn_isr_rx+0x20a>
	is_rx_enqueue = 0U;
   1ddb8:	f04f 0a00 	mov.w	sl, #0
		crc_valid = 1U;
   1ddbc:	4b6b      	ldr	r3, [pc, #428]	; (1df6c <lll_conn_isr_rx+0x280>)
		crc_expire = 0U;
   1ddbe:	2500      	movs	r5, #0
		crc_valid = 1U;
   1ddc0:	2201      	movs	r2, #1
		crc_expire = 0U;
   1ddc2:	f888 5000 	strb.w	r5, [r8]
		crc_valid = 1U;
   1ddc6:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1ddc8:	a901      	add	r1, sp, #4
   1ddca:	4620      	mov	r0, r4
   1ddcc:	f00e fc0b 	bl	2c5e6 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1ddd0:	2d00      	cmp	r5, #0
   1ddd2:	f040 80b7 	bne.w	1df44 <lll_conn_isr_rx+0x258>
   1ddd6:	b157      	cbz	r7, 1ddee <lll_conn_isr_rx+0x102>
   1ddd8:	7f33      	ldrb	r3, [r6, #28]
   1ddda:	06d9      	lsls	r1, r3, #27
   1dddc:	d407      	bmi.n	1ddee <lll_conn_isr_rx+0x102>
			      (pdu_data_tx->md == 0) &&
   1ddde:	9b01      	ldr	r3, [sp, #4]
   1dde0:	781a      	ldrb	r2, [r3, #0]
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1dde2:	06d2      	lsls	r2, r2, #27
   1dde4:	d403      	bmi.n	1ddee <lll_conn_isr_rx+0x102>
			      (pdu_data_tx->md == 0) &&
   1dde6:	785b      	ldrb	r3, [r3, #1]
   1dde8:	2b00      	cmp	r3, #0
   1ddea:	f000 80ab 	beq.w	1df44 <lll_conn_isr_rx+0x258>
		radio_tmr_tifs_set(EVENT_IFS_US);
   1ddee:	2096      	movs	r0, #150	; 0x96
   1ddf0:	f000 fc90 	bl	1e714 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   1ddf4:	2000      	movs	r0, #0
   1ddf6:	f000 fbf9 	bl	1e5ec <radio_switch_complete_and_rx>
		radio_isr_set(lll_conn_isr_tx, param);
   1ddfa:	4621      	mov	r1, r4
   1ddfc:	485c      	ldr	r0, [pc, #368]	; (1df70 <lll_conn_isr_rx+0x284>)
   1ddfe:	f000 facd 	bl	1e39c <radio_isr_set>
		radio_tmr_end_capture();
   1de02:	f000 fd73 	bl	1e8ec <radio_tmr_end_capture>
	pdu_data_tx->sn = lll->sn;
   1de06:	9901      	ldr	r1, [sp, #4]
   1de08:	f894 2056 	ldrb.w	r2, [r4, #86]	; 0x56
   1de0c:	780b      	ldrb	r3, [r1, #0]
   1de0e:	f3c2 0200 	ubfx	r2, r2, #0, #1
   1de12:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = lll->nesn;
   1de16:	f894 2056 	ldrb.w	r2, [r4, #86]	; 0x56
   1de1a:	f3c2 0240 	ubfx	r2, r2, #1, #1
   1de1e:	f362 0382 	bfi	r3, r2, #2, #1
   1de22:	700b      	strb	r3, [r1, #0]
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   1de24:	4620      	mov	r0, r4
   1de26:	f00e fbce 	bl	2c5c6 <lll_conn_tx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   1de2a:	f000 fba3 	bl	1e574 <radio_is_ready>
   1de2e:	b158      	cbz	r0, 1de48 <lll_conn_isr_rx+0x15c>
   1de30:	f44f 729e 	mov.w	r2, #316	; 0x13c
   1de34:	494b      	ldr	r1, [pc, #300]	; (1df64 <lll_conn_isr_rx+0x278>)
   1de36:	484c      	ldr	r0, [pc, #304]	; (1df68 <lll_conn_isr_rx+0x27c>)
   1de38:	f009 f899 	bl	26f6e <printk>
   1de3c:	4040      	eors	r0, r0
   1de3e:	f380 8811 	msr	BASEPRI, r0
   1de42:	f04f 0003 	mov.w	r0, #3
   1de46:	df02      	svc	2
	if (!radio_tmr_aa_restore()) {
   1de48:	f000 fd44 	bl	1e8d4 <radio_tmr_aa_restore>
   1de4c:	b918      	cbnz	r0, 1de56 <lll_conn_isr_rx+0x16a>
		radio_tmr_aa_save(radio_tmr_aa_get());
   1de4e:	f000 fd35 	bl	1e8bc <radio_tmr_aa_get>
   1de52:	f000 fd39 	bl	1e8c8 <radio_tmr_aa_save>
	if (tx_release) {
   1de56:	f1b9 0f00 	cmp.w	r9, #0
   1de5a:	d07a      	beq.n	1df52 <lll_conn_isr_rx+0x266>
		LL_ASSERT(lll->handle != 0xFFFF);
   1de5c:	8a22      	ldrh	r2, [r4, #16]
   1de5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1de62:	429a      	cmp	r2, r3
   1de64:	d10b      	bne.n	1de7e <lll_conn_isr_rx+0x192>
   1de66:	f240 124b 	movw	r2, #331	; 0x14b
   1de6a:	493e      	ldr	r1, [pc, #248]	; (1df64 <lll_conn_isr_rx+0x278>)
   1de6c:	483e      	ldr	r0, [pc, #248]	; (1df68 <lll_conn_isr_rx+0x27c>)
   1de6e:	f009 f87e 	bl	26f6e <printk>
   1de72:	4040      	eors	r0, r0
   1de74:	f380 8811 	msr	BASEPRI, r0
   1de78:	f04f 0003 	mov.w	r0, #3
   1de7c:	df02      	svc	2
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   1de7e:	4649      	mov	r1, r9
   1de80:	8a20      	ldrh	r0, [r4, #16]
   1de82:	f7fe fa87 	bl	1c394 <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   1de86:	f1ba 0f00 	cmp.w	sl, #0
   1de8a:	d009      	beq.n	1dea0 <lll_conn_isr_rx+0x1b4>
		ull_pdu_rx_alloc();
   1de8c:	f7fc fbbc 	bl	1a608 <ull_pdu_rx_alloc>
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   1de90:	2303      	movs	r3, #3
   1de92:	7133      	strb	r3, [r6, #4]
		node_rx->hdr.handle = lll->handle;
   1de94:	8a23      	ldrh	r3, [r4, #16]
   1de96:	80f3      	strh	r3, [r6, #6]
		ull_rx_put(node_rx->hdr.link, node_rx);
   1de98:	4631      	mov	r1, r6
   1de9a:	6830      	ldr	r0, [r6, #0]
   1de9c:	f7fc fbca 	bl	1a634 <ull_rx_put>
		ull_rx_sched();
   1dea0:	f7fc fbd8 	bl	1a654 <ull_rx_sched>
	ARG_UNUSED(rssi_ready);
   1dea4:	e737      	b.n	1dd16 <lll_conn_isr_rx+0x2a>
			lll->empty = 0;
   1dea6:	f36f 0382 	bfc	r3, #2, #1
   1deaa:	f884 3056 	strb.w	r3, [r4, #86]	; 0x56
			pdu_data_tx = (void *)radio_pkt_empty_get();
   1deae:	f000 fb95 	bl	1e5dc <radio_pkt_empty_get>
	tx_release = NULL;
   1deb2:	f04f 0900 	mov.w	r9, #0
   1deb6:	e775      	b.n	1dda4 <lll_conn_isr_rx+0xb8>
					       lll->packet_tx_head_offset);
   1deb8:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
			pdu_data_tx_len = pdu_data_tx->len;
   1debc:	9a01      	ldr	r2, [sp, #4]
   1debe:	441a      	add	r2, r3
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   1dec0:	7952      	ldrb	r2, [r2, #5]
   1dec2:	4413      	add	r3, r2
			if (offset < lll->packet_tx_head_len) {
   1dec4:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   1dec8:	b2db      	uxtb	r3, r3
			if (offset < lll->packet_tx_head_len) {
   1deca:	4293      	cmp	r3, r2
   1decc:	d202      	bcs.n	1ded4 <lll_conn_isr_rx+0x1e8>
				lll->packet_tx_head_offset = offset;
   1dece:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
   1ded2:	e7ee      	b.n	1deb2 <lll_conn_isr_rx+0x1c6>
			} else if (offset == lll->packet_tx_head_len) {
   1ded4:	d1ed      	bne.n	1deb2 <lll_conn_isr_rx+0x1c6>
				memq_dequeue(lll->memq_tx.tail,
   1ded6:	462a      	mov	r2, r5
				lll->packet_tx_head_len = 0;
   1ded8:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
				memq_dequeue(lll->memq_tx.tail,
   1dedc:	f104 0140 	add.w	r1, r4, #64	; 0x40
   1dee0:	6c60      	ldr	r0, [r4, #68]	; 0x44
   1dee2:	f00d fc47 	bl	2b774 <memq_dequeue>
				link->next = tx->next; /* Indicates ctrl or data
   1dee6:	9b01      	ldr	r3, [sp, #4]
   1dee8:	681a      	ldr	r2, [r3, #0]
   1deea:	f8c9 2000 	str.w	r2, [r9]
				tx->next = link;
   1deee:	f8c3 9000 	str.w	r9, [r3]
   1def2:	4699      	mov	r9, r3
   1def4:	e756      	b.n	1dda4 <lll_conn_isr_rx+0xb8>
	    /* check so that we will NEVER use the rx buffer reserved for empty
	     * packet and internal control enqueue
	     */
	    (ull_pdu_rx_alloc_peek(3) != 0)) {
   1def6:	2003      	movs	r0, #3
   1def8:	f7fc fb6e 	bl	1a5d8 <ull_pdu_rx_alloc_peek>
	if ((pdu_data_rx->sn == lll->nesn) &&
   1defc:	2800      	cmp	r0, #0
   1defe:	f43f af5b 	beq.w	1ddb8 <lll_conn_isr_rx+0xcc>
		/* Increment next expected serial number */
		lll->nesn++;
   1df02:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
   1df06:	f083 0302 	eor.w	r3, r3, #2
   1df0a:	f884 3056 	strb.w	r3, [r4, #86]	; 0x56

		if (pdu_data_rx->len != 0) {
   1df0e:	f896 a01d 	ldrb.w	sl, [r6, #29]
	is_rx_enqueue = 0U;
   1df12:	f11a 0a00 	adds.w	sl, sl, #0
   1df16:	bf18      	it	ne
   1df18:	f04f 0a01 	movne.w	sl, #1
   1df1c:	e74e      	b.n	1ddbc <lll_conn_isr_rx+0xd0>
		if (crc_expire == 0U) {
   1df1e:	f898 3000 	ldrb.w	r3, [r8]
   1df22:	b913      	cbnz	r3, 1df2a <lll_conn_isr_rx+0x23e>
			crc_expire = 2U;
   1df24:	2302      	movs	r3, #2
   1df26:	f888 3000 	strb.w	r3, [r8]
		crc_expire--;
   1df2a:	f898 5000 	ldrb.w	r5, [r8]
   1df2e:	3d01      	subs	r5, #1
   1df30:	b2ed      	uxtb	r5, r5
   1df32:	f888 5000 	strb.w	r5, [r8]
	is_rx_enqueue = 0U;
   1df36:	f04f 0a00 	mov.w	sl, #0
		is_done = (crc_expire == 0U);
   1df3a:	fab5 f585 	clz	r5, r5
   1df3e:	096d      	lsrs	r5, r5, #5
	tx_release = NULL;
   1df40:	46d1      	mov	r9, sl
   1df42:	e741      	b.n	1ddc8 <lll_conn_isr_rx+0xdc>
		radio_isr_set(isr_done, param);
   1df44:	4621      	mov	r1, r4
   1df46:	4805      	ldr	r0, [pc, #20]	; (1df5c <lll_conn_isr_rx+0x270>)
   1df48:	f000 fa28 	bl	1e39c <radio_isr_set>
			radio_switch_complete_and_disable();
   1df4c:	f000 fb64 	bl	1e618 <radio_switch_complete_and_disable>
   1df50:	e759      	b.n	1de06 <lll_conn_isr_rx+0x11a>
	if (is_rx_enqueue) {
   1df52:	f1ba 0f00 	cmp.w	sl, #0
   1df56:	f43f aede 	beq.w	1dd16 <lll_conn_isr_rx+0x2a>
   1df5a:	e797      	b.n	1de8c <lll_conn_isr_rx+0x1a0>
   1df5c:	0001db4d 	.word	0x0001db4d
   1df60:	200046ca 	.word	0x200046ca
   1df64:	0003521a 	.word	0x0003521a
   1df68:	0002fa94 	.word	0x0002fa94
   1df6c:	20004887 	.word	0x20004887
   1df70:	0001dc75 	.word	0x0001dc75
   1df74:	20004886 	.word	0x20004886

0001df78 <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *p)
{
   1df78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	uint32_t remainder;
	uint32_t hcto;

	DEBUG_RADIO_START_S(1);

	lll = p->param;
   1df7c:	68c4      	ldr	r4, [r0, #12]

	/* Check if stopped (on disconnection between prepare and pre-empt)
	 */
	if (unlikely(lll->handle == 0xFFFF)) {
   1df7e:	8a22      	ldrh	r2, [r4, #16]
   1df80:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1df84:	429a      	cmp	r2, r3
{
   1df86:	4681      	mov	r9, r0
	if (unlikely(lll->handle == 0xFFFF)) {
   1df88:	d115      	bne.n	1dfb6 <prepare_cb+0x3e>
		int err;

		err = lll_hfclock_off();
   1df8a:	f7fe ff41 	bl	1ce10 <lll_hfclock_off>
		LL_ASSERT(err >= 0);
   1df8e:	2800      	cmp	r0, #0
   1df90:	da0a      	bge.n	1dfa8 <prepare_cb+0x30>
   1df92:	227d      	movs	r2, #125	; 0x7d
   1df94:	495b      	ldr	r1, [pc, #364]	; (1e104 <prepare_cb+0x18c>)
   1df96:	485c      	ldr	r0, [pc, #368]	; (1e108 <prepare_cb+0x190>)
   1df98:	f008 ffe9 	bl	26f6e <printk>
   1df9c:	4040      	eors	r0, r0
   1df9e:	f380 8811 	msr	BASEPRI, r0
   1dfa2:	f04f 0003 	mov.w	r0, #3
   1dfa6:	df02      	svc	2

		lll_done(NULL);
   1dfa8:	2000      	movs	r0, #0
   1dfaa:	f7fe fe25 	bl	1cbf8 <lll_done>
	}

	DEBUG_RADIO_START_S(1);

	return 0;
}
   1dfae:	2000      	movs	r0, #0
   1dfb0:	b003      	add	sp, #12
   1dfb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	lll_conn_prepare_reset();
   1dfb6:	f7ff fe05 	bl	1dbc4 <lll_conn_prepare_reset>
	lll->latency_event = lll->latency_prepare - 1;
   1dfba:	8ae3      	ldrh	r3, [r4, #22]
	lll->event_counter = lll->event_counter + lll->latency_prepare;
   1dfbc:	8b61      	ldrh	r1, [r4, #26]
	lll->latency_event = lll->latency_prepare - 1;
   1dfbe:	1e5a      	subs	r2, r3, #1
	lll->event_counter = lll->event_counter + lll->latency_prepare;
   1dfc0:	440b      	add	r3, r1
   1dfc2:	8363      	strh	r3, [r4, #26]
	if (lll->data_chan_sel) {
   1dfc4:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
	lll->latency_event = lll->latency_prepare - 1;
   1dfc8:	b292      	uxth	r2, r2
	lll->latency_prepare = 0;
   1dfca:	2600      	movs	r6, #0
	if (lll->data_chan_sel) {
   1dfcc:	0659      	lsls	r1, r3, #25
	lll->latency_event = lll->latency_prepare - 1;
   1dfce:	8322      	strh	r2, [r4, #24]
	lll->latency_prepare = 0;
   1dfd0:	82e6      	strh	r6, [r4, #22]
	if (lll->data_chan_sel) {
   1dfd2:	d577      	bpl.n	1e0c4 <prepare_cb+0x14c>
		LL_ASSERT(0);
   1dfd4:	229b      	movs	r2, #155	; 0x9b
   1dfd6:	494b      	ldr	r1, [pc, #300]	; (1e104 <prepare_cb+0x18c>)
   1dfd8:	484b      	ldr	r0, [pc, #300]	; (1e108 <prepare_cb+0x190>)
   1dfda:	f008 ffc8 	bl	26f6e <printk>
   1dfde:	4040      	eors	r0, r0
   1dfe0:	f380 8811 	msr	BASEPRI, r0
   1dfe4:	f04f 0003 	mov.w	r0, #3
   1dfe8:	df02      	svc	2
	lll->slave.window_widening_event_us +=
   1dfea:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
   1dfee:	4413      	add	r3, r2
	    lll->slave.window_widening_max_us) {
   1dff0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		lll->slave.window_widening_event_us =
   1dff2:	429a      	cmp	r2, r3
   1dff4:	bf94      	ite	ls
   1dff6:	6362      	strls	r2, [r4, #52]	; 0x34
   1dff8:	6363      	strhi	r3, [r4, #52]	; 0x34
	lll->slave.window_size_event_us +=
   1dffa:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
	lll->slave.window_widening_prepare_us = 0;
   1dffe:	2500      	movs	r5, #0
	lll->slave.window_size_event_us +=
   1e000:	4413      	add	r3, r2
	lll->slave.window_size_prepare_us = 0;
   1e002:	e9c4 530e 	strd	r5, r3, [r4, #56]	; 0x38
	lll->slave.window_widening_prepare_us = 0;
   1e006:	6325      	str	r5, [r4, #48]	; 0x30
	radio_reset();
   1e008:	f000 f9e8 	bl	1e3dc <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   1e00c:	4628      	mov	r0, r5
   1e00e:	f000 fa19 	bl	1e444 <radio_tx_power_set>
	lll_conn_rx_pkt_set(lll);
   1e012:	4620      	mov	r0, r4
   1e014:	f7ff fe08 	bl	1dc28 <lll_conn_rx_pkt_set>
	radio_aa_set(lll->access_addr);
   1e018:	f104 0008 	add.w	r0, r4, #8
   1e01c:	f000 fa30 	bl	1e480 <radio_aa_set>
			     ((uint32_t)lll->crc_init[1] << 8) |
   1e020:	7b63      	ldrb	r3, [r4, #13]
			    (((uint32_t)lll->crc_init[2] << 16) |
   1e022:	7ba1      	ldrb	r1, [r4, #14]
			     ((uint32_t)lll->crc_init[1] << 8) |
   1e024:	021b      	lsls	r3, r3, #8
			    (((uint32_t)lll->crc_init[2] << 16) |
   1e026:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((uint32_t)lll->crc_init[0])));
   1e02a:	7b21      	ldrb	r1, [r4, #12]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   1e02c:	f240 605b 	movw	r0, #1627	; 0x65b
   1e030:	4319      	orrs	r1, r3
   1e032:	f000 fabd 	bl	1e5b0 <radio_crc_configure>
	lll_chan_set(data_chan_use);
   1e036:	4630      	mov	r0, r6
   1e038:	f7fe fe28 	bl	1cc8c <lll_chan_set>
	radio_isr_set(lll_conn_isr_rx, lll);
   1e03c:	4621      	mov	r1, r4
   1e03e:	4833      	ldr	r0, [pc, #204]	; (1e10c <prepare_cb+0x194>)
   1e040:	f000 f9ac 	bl	1e39c <radio_isr_set>
	radio_tmr_tifs_set(EVENT_IFS_US);
   1e044:	2096      	movs	r0, #150	; 0x96
   1e046:	f000 fb65 	bl	1e714 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   1e04a:	462b      	mov	r3, r5
   1e04c:	462a      	mov	r2, r5
   1e04e:	4629      	mov	r1, r5
   1e050:	4628      	mov	r0, r5
   1e052:	f000 fad7 	bl	1e604 <radio_switch_complete_and_tx>
	evt = HDR_LLL2EVT(lll);
   1e056:	f8d4 8000 	ldr.w	r8, [r4]
	ticks_at_event = p->ticks_at_expire;
   1e05a:	f8d9 7000 	ldr.w	r7, [r9]
	ticks_at_event += lll_evt_offset_get(evt);
   1e05e:	4640      	mov	r0, r8
   1e060:	f00e f916 	bl	2c290 <lll_evt_offset_get>
   1e064:	4407      	add	r7, r0
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   1e066:	f8d9 2004 	ldr.w	r2, [r9, #4]
   1e06a:	f107 0109 	add.w	r1, r7, #9
   1e06e:	4628      	mov	r0, r5
   1e070:	f000 fb5c 	bl	1e72c <radio_tmr_start>
   1e074:	4681      	mov	r9, r0
	radio_tmr_aa_capture();
   1e076:	f000 fc0d 	bl	1e894 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   1e07a:	4628      	mov	r0, r5
   1e07c:	f000 fc24 	bl	1e8c8 <radio_tmr_aa_save>
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   1e080:	6b66      	ldr	r6, [r4, #52]	; 0x34
   1e082:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	hcto += radio_rx_ready_delay_get(0, 0);
   1e084:	4629      	mov	r1, r5
   1e086:	eb03 0346 	add.w	r3, r3, r6, lsl #1
   1e08a:	4628      	mov	r0, r5
   1e08c:	f103 0688 	add.w	r6, r3, #136	; 0x88
   1e090:	f00e fb78 	bl	2c784 <radio_rx_ready_delay_get>
	hcto += addr_us_get(0);
   1e094:	444e      	add	r6, r9
	hcto += radio_rx_chain_delay_get(0, 0);
   1e096:	4629      	mov	r1, r5
	hcto += addr_us_get(0);
   1e098:	4406      	add	r6, r0
	hcto += radio_rx_chain_delay_get(0, 0);
   1e09a:	4628      	mov	r0, r5
   1e09c:	f00e fb74 	bl	2c788 <radio_rx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   1e0a0:	4430      	add	r0, r6
   1e0a2:	f000 fbeb 	bl	1e87c <radio_tmr_hcto_configure>
	if (lll_preempt_calc(evt, (TICKER_ID_CONN_BASE + lll->handle),
   1e0a6:	7c21      	ldrb	r1, [r4, #16]
   1e0a8:	3105      	adds	r1, #5
   1e0aa:	463a      	mov	r2, r7
   1e0ac:	b2c9      	uxtb	r1, r1
   1e0ae:	4640      	mov	r0, r8
   1e0b0:	f00e f8fc 	bl	2c2ac <lll_preempt_calc>
   1e0b4:	b198      	cbz	r0, 1e0de <prepare_cb+0x166>
		radio_isr_set(lll_isr_abort, lll);
   1e0b6:	4621      	mov	r1, r4
   1e0b8:	4815      	ldr	r0, [pc, #84]	; (1e110 <prepare_cb+0x198>)
   1e0ba:	f000 f96f 	bl	1e39c <radio_isr_set>
		radio_disable();
   1e0be:	f000 fa3b 	bl	1e538 <radio_disable>
   1e0c2:	e774      	b.n	1dfae <prepare_cb+0x36>
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   1e0c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1e0c8:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
   1e0cc:	9300      	str	r3, [sp, #0]
   1e0ce:	f104 0023 	add.w	r0, r4, #35	; 0x23
   1e0d2:	f104 031c 	add.w	r3, r4, #28
   1e0d6:	f00e f87d 	bl	2c1d4 <lll_chan_sel_1>
   1e0da:	4606      	mov	r6, r0
   1e0dc:	e785      	b.n	1dfea <prepare_cb+0x72>
		ret = lll_prepare_done(lll);
   1e0de:	4620      	mov	r0, r4
   1e0e0:	f00e f8d1 	bl	2c286 <lll_prepare_done>
		LL_ASSERT(!ret);
   1e0e4:	2800      	cmp	r0, #0
   1e0e6:	f43f af62 	beq.w	1dfae <prepare_cb+0x36>
   1e0ea:	f240 1213 	movw	r2, #275	; 0x113
   1e0ee:	4905      	ldr	r1, [pc, #20]	; (1e104 <prepare_cb+0x18c>)
   1e0f0:	4805      	ldr	r0, [pc, #20]	; (1e108 <prepare_cb+0x190>)
   1e0f2:	f008 ff3c 	bl	26f6e <printk>
   1e0f6:	4040      	eors	r0, r0
   1e0f8:	f380 8811 	msr	BASEPRI, r0
   1e0fc:	f04f 0003 	mov.w	r0, #3
   1e100:	df02      	svc	2
   1e102:	e754      	b.n	1dfae <prepare_cb+0x36>
   1e104:	00035276 	.word	0x00035276
   1e108:	0002fa94 	.word	0x0002fa94
   1e10c:	0001dced 	.word	0x0001dced
   1e110:	0002c311 	.word	0x0002c311

0001e114 <lll_slave_prepare>:
{
   1e114:	b513      	push	{r0, r1, r4, lr}
   1e116:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   1e118:	f7fe fe64 	bl	1cde4 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   1e11c:	2800      	cmp	r0, #0
   1e11e:	da0a      	bge.n	1e136 <lll_slave_prepare+0x22>
   1e120:	2248      	movs	r2, #72	; 0x48
   1e122:	4918      	ldr	r1, [pc, #96]	; (1e184 <lll_slave_prepare+0x70>)
   1e124:	4818      	ldr	r0, [pc, #96]	; (1e188 <lll_slave_prepare+0x74>)
   1e126:	f008 ff22 	bl	26f6e <printk>
   1e12a:	4040      	eors	r0, r0
   1e12c:	f380 8811 	msr	BASEPRI, r0
   1e130:	f04f 0003 	mov.w	r0, #3
   1e134:	df02      	svc	2
	lll = p->param;
   1e136:	68e2      	ldr	r2, [r4, #12]
	elapsed = p->lazy + 1;
   1e138:	8923      	ldrh	r3, [r4, #8]
	lll->latency_prepare += elapsed;
   1e13a:	8ad1      	ldrh	r1, [r2, #22]
	    lll->slave.window_widening_periodic_us * elapsed;
   1e13c:	6a90      	ldr	r0, [r2, #40]	; 0x28
	elapsed = p->lazy + 1;
   1e13e:	3301      	adds	r3, #1
   1e140:	b29b      	uxth	r3, r3
	lll->latency_prepare += elapsed;
   1e142:	4419      	add	r1, r3
   1e144:	82d1      	strh	r1, [r2, #22]
	lll->slave.window_widening_prepare_us +=
   1e146:	6b11      	ldr	r1, [r2, #48]	; 0x30
   1e148:	fb00 1303 	mla	r3, r0, r3, r1
	    lll->slave.window_widening_max_us) {
   1e14c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
		lll->slave.window_widening_prepare_us =
   1e14e:	4299      	cmp	r1, r3
   1e150:	bf94      	ite	ls
   1e152:	6311      	strls	r1, [r2, #48]	; 0x30
   1e154:	6313      	strhi	r3, [r2, #48]	; 0x30
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   1e156:	480d      	ldr	r0, [pc, #52]	; (1e18c <lll_slave_prepare+0x78>)
   1e158:	9400      	str	r4, [sp, #0]
   1e15a:	2300      	movs	r3, #0
   1e15c:	4a0c      	ldr	r2, [pc, #48]	; (1e190 <lll_slave_prepare+0x7c>)
   1e15e:	490d      	ldr	r1, [pc, #52]	; (1e194 <lll_slave_prepare+0x80>)
   1e160:	f00e f888 	bl	2c274 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1e164:	b160      	cbz	r0, 1e180 <lll_slave_prepare+0x6c>
   1e166:	3077      	adds	r0, #119	; 0x77
   1e168:	d00a      	beq.n	1e180 <lll_slave_prepare+0x6c>
   1e16a:	225f      	movs	r2, #95	; 0x5f
   1e16c:	4905      	ldr	r1, [pc, #20]	; (1e184 <lll_slave_prepare+0x70>)
   1e16e:	4806      	ldr	r0, [pc, #24]	; (1e188 <lll_slave_prepare+0x74>)
   1e170:	f008 fefd 	bl	26f6e <printk>
   1e174:	4040      	eors	r0, r0
   1e176:	f380 8811 	msr	BASEPRI, r0
   1e17a:	f04f 0003 	mov.w	r0, #3
   1e17e:	df02      	svc	2
}
   1e180:	b002      	add	sp, #8
   1e182:	bd10      	pop	{r4, pc}
   1e184:	00035276 	.word	0x00035276
   1e188:	0002fa94 	.word	0x0002fa94
   1e18c:	0002c28b 	.word	0x0002c28b
   1e190:	0001df79 	.word	0x0001df79
   1e194:	0001dbe1 	.word	0x0001dbe1

0001e198 <cntr_init>:

static uint8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   1e198:	4b05      	ldr	r3, [pc, #20]	; (1e1b0 <cntr_init+0x18>)
   1e19a:	2200      	movs	r2, #0
   1e19c:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    p_reg->EVTENSET = mask;
   1e1a0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1e1a4:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
   1e1a8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}
   1e1ac:	4770      	bx	lr
   1e1ae:	bf00      	nop
   1e1b0:	4000b000 	.word	0x4000b000

0001e1b4 <cntr_start>:

uint32_t cntr_start(void)
{
	if (_refcount++) {
   1e1b4:	4a04      	ldr	r2, [pc, #16]	; (1e1c8 <cntr_start+0x14>)
   1e1b6:	7813      	ldrb	r3, [r2, #0]
   1e1b8:	1c59      	adds	r1, r3, #1
   1e1ba:	7011      	strb	r1, [r2, #0]
   1e1bc:	2001      	movs	r0, #1
   1e1be:	b913      	cbnz	r3, 1e1c6 <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1e1c0:	4a02      	ldr	r2, [pc, #8]	; (1e1cc <cntr_start+0x18>)
   1e1c2:	6010      	str	r0, [r2, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
   1e1c4:	4618      	mov	r0, r3
}
   1e1c6:	4770      	bx	lr
   1e1c8:	20004888 	.word	0x20004888
   1e1cc:	4000b000 	.word	0x4000b000

0001e1d0 <cntr_stop>:

uint32_t cntr_stop(void)
{
   1e1d0:	b510      	push	{r4, lr}
	LL_ASSERT(_refcount);
   1e1d2:	4c0c      	ldr	r4, [pc, #48]	; (1e204 <cntr_stop+0x34>)
   1e1d4:	7823      	ldrb	r3, [r4, #0]
   1e1d6:	b953      	cbnz	r3, 1e1ee <cntr_stop+0x1e>
   1e1d8:	222d      	movs	r2, #45	; 0x2d
   1e1da:	490b      	ldr	r1, [pc, #44]	; (1e208 <cntr_stop+0x38>)
   1e1dc:	480b      	ldr	r0, [pc, #44]	; (1e20c <cntr_stop+0x3c>)
   1e1de:	f008 fec6 	bl	26f6e <printk>
   1e1e2:	4040      	eors	r0, r0
   1e1e4:	f380 8811 	msr	BASEPRI, r0
   1e1e8:	f04f 0003 	mov.w	r0, #3
   1e1ec:	df02      	svc	2

	if (--_refcount) {
   1e1ee:	7820      	ldrb	r0, [r4, #0]
   1e1f0:	3801      	subs	r0, #1
   1e1f2:	b2c0      	uxtb	r0, r0
   1e1f4:	7020      	strb	r0, [r4, #0]
   1e1f6:	2301      	movs	r3, #1
   1e1f8:	b910      	cbnz	r0, 1e200 <cntr_stop+0x30>
   1e1fa:	4a05      	ldr	r2, [pc, #20]	; (1e210 <cntr_stop+0x40>)
   1e1fc:	6013      	str	r3, [r2, #0]
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
}
   1e1fe:	bd10      	pop	{r4, pc}
		return 1;
   1e200:	4618      	mov	r0, r3
   1e202:	e7fc      	b.n	1e1fe <cntr_stop+0x2e>
   1e204:	20004888 	.word	0x20004888
   1e208:	000352d4 	.word	0x000352d4
   1e20c:	0002fa94 	.word	0x0002fa94
   1e210:	4000b004 	.word	0x4000b004

0001e214 <cntr_cnt_get>:
     return p_reg->COUNTER;
   1e214:	4b01      	ldr	r3, [pc, #4]	; (1e21c <cntr_cnt_get+0x8>)
   1e216:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

uint32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
   1e21a:	4770      	bx	lr
   1e21c:	4000b000 	.word	0x4000b000

0001e220 <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
   1e220:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1e224:	4b01      	ldr	r3, [pc, #4]	; (1e22c <cntr_cmp_set+0xc>)
   1e226:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(uint8_t cmp, uint32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
   1e22a:	4770      	bx	lr
   1e22c:	4000b000 	.word	0x4000b000

0001e230 <do_ecb>:
	uint8_t clear_text[16];
	uint8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
   1e230:	b5f0      	push	{r4, r5, r6, r7, lr}
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   1e232:	4b13      	ldr	r3, [pc, #76]	; (1e280 <do_ecb+0x50>)

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e234:	4c13      	ldr	r4, [pc, #76]	; (1e284 <do_ecb+0x54>)
   1e236:	2501      	movs	r5, #1
{
   1e238:	4684      	mov	ip, r0
   1e23a:	462e      	mov	r6, r5
		NRF_ECB->EVENTS_ENDECB = 0;
   1e23c:	2700      	movs	r7, #0
   1e23e:	46a6      	mov	lr, r4
   1e240:	461a      	mov	r2, r3
   1e242:	6026      	str	r6, [r4, #0]
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   1e244:	f8c3 c504 	str.w	ip, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   1e248:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   1e24c:	f8c3 7104 	str.w	r7, [r3, #260]	; 0x104
   1e250:	601e      	str	r6, [r3, #0]
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   1e252:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
   1e256:	b931      	cbnz	r1, 1e266 <do_ecb+0x36>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   1e258:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   1e25c:	b919      	cbnz	r1, 1e266 <do_ecb+0x36>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   1e25e:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   1e262:	2900      	cmp	r1, #0
   1e264:	d1f5      	bne.n	1e252 <do_ecb+0x22>
   1e266:	f8ce 5000 	str.w	r5, [lr]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   1e26a:	f8d2 1104 	ldr.w	r1, [r2, #260]	; 0x104
   1e26e:	2900      	cmp	r1, #0
   1e270:	d1e7      	bne.n	1e242 <do_ecb+0x12>
   1e272:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
   1e276:	2800      	cmp	r0, #0
   1e278:	d0e3      	beq.n	1e242 <do_ecb+0x12>

	NRF_ECB->ECBDATAPTR = 0;
   1e27a:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
}
   1e27e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e280:	4000e000 	.word	0x4000e000
   1e284:	4000e004 	.word	0x4000e004

0001e288 <hal_radio_enable_on_tick_ppi_config_and_enable>:
static inline void hal_radio_enable_on_tick_ppi_config_and_enable(uint8_t trx)
{
	/* No need to configure anything for the pre-programmed channels.
	 * Just enable and disable them accordingly.
	 */
	nrf_ppi_channels_disable(
   1e288:	2800      	cmp	r0, #0
    p_reg->CHENSET = mask;
}

NRF_STATIC_INLINE void nrf_ppi_channels_disable(NRF_PPI_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
   1e28a:	4b08      	ldr	r3, [pc, #32]	; (1e2ac <hal_radio_enable_on_tick_ppi_config_and_enable+0x24>)
   1e28c:	bf14      	ite	ne
   1e28e:	f44f 1200 	movne.w	r2, #2097152	; 0x200000
   1e292:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
   1e296:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
		NRF_PPI,
		trx ? BIT(HAL_RADIO_ENABLE_RX_ON_TICK_PPI)
		    : BIT(HAL_RADIO_ENABLE_TX_ON_TICK_PPI));
	nrf_ppi_channels_enable(
   1e29a:	bf14      	ite	ne
   1e29c:	f44f 1280 	movne.w	r2, #1048576	; 0x100000
   1e2a0:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
    p_reg->CHENSET = mask;
   1e2a4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		NRF_PPI,
		trx ? BIT(HAL_RADIO_ENABLE_TX_ON_TICK_PPI)
		    : BIT(HAL_RADIO_ENABLE_RX_ON_TICK_PPI));
}
   1e2a8:	4770      	bx	lr
   1e2aa:	bf00      	nop
   1e2ac:	4001f000 	.word	0x4001f000

0001e2b0 <sw_switch.isra.10>:
#endif

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static uint8_t sw_tifs_toggle;

static void sw_switch(uint8_t dir, uint8_t phy_curr, uint8_t flags_curr, uint8_t phy_next,
   1e2b0:	b5f0      	push	{r4, r5, r6, r7, lr}
		      uint8_t flags_next)
{
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1e2b2:	4e2d      	ldr	r6, [pc, #180]	; (1e368 <sw_switch.isra.10+0xb8>)
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1e2b4:	4f2d      	ldr	r7, [pc, #180]	; (1e36c <sw_switch.isra.10+0xbc>)
   1e2b6:	7835      	ldrb	r5, [r6, #0]
   1e2b8:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 1e378 <sw_switch.isra.10+0xc8>
   1e2bc:	f8c7 c568 	str.w	ip, [r7, #1384]	; 0x568
	 */
	nrf_ppi_channel_endpoint_setup(
		NRF_PPI,
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI,
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_EVT,
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1e2c0:	b22b      	sxth	r3, r5
   1e2c2:	00dc      	lsls	r4, r3, #3
   1e2c4:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   1e2c8:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1e2cc:	f8c7 456c 	str.w	r4, [r7, #1388]	; 0x56c
   1e2d0:	f105 040c 	add.w	r4, r5, #12
   1e2d4:	b2e4      	uxtb	r4, r4
   1e2d6:	00e4      	lsls	r4, r4, #3
	 * (TX/RX).
	 */
	nrf_ppi_event_endpoint_setup(
		NRF_PPI,
		radio_enable_ppi,
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1e2d8:	f5a7 37af 	sub.w	r7, r7, #89600	; 0x15e00
   1e2dc:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   1e2e0:	3fc0      	subs	r7, #192	; 0xc0
   1e2e2:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
   1e2e6:	eb07 0783 	add.w	r7, r7, r3, lsl #2

NRF_STATIC_INLINE void nrf_ppi_event_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                    nrf_ppi_channel_t channel,
                                                    uint32_t          eep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1e2ea:	f8c4 7510 	str.w	r7, [r4, #1296]	; 0x510
	uint8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	uint32_t delay;

	hal_radio_sw_switch_setup(cc, ppi, sw_tifs_toggle);

	if (dir) {
   1e2ee:	2800      	cmp	r0, #0
   1e2f0:	d034      	beq.n	1e35c <sw_switch.isra.10+0xac>
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_1M_NS;
	case BIT(1):
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_2M_NS;
   1e2f2:	f649 4740 	movw	r7, #40000	; 0x9c40
   1e2f6:	f649 70c4 	movw	r0, #40900	; 0x9fc4
   1e2fa:	2a02      	cmp	r2, #2
   1e2fc:	bf08      	it	eq
   1e2fe:	4638      	moveq	r0, r7
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_NS;
	case BIT(1):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_NS;
   1e300:	f242 42b8 	movw	r2, #9400	; 0x24b8
   1e304:	f241 3788 	movw	r7, #5000	; 0x1388
   1e308:	2902      	cmp	r1, #2
   1e30a:	bf14      	ite	ne
   1e30c:	4611      	movne	r1, r2
   1e30e:	4639      	moveq	r1, r7
		/* TX */

		/* Calculate delay with respect to current (RX) and next
		 * (TX) PHY. If RX PHY is LE Coded, assume S8 coding scheme.
		 */
		delay = HAL_RADIO_NS2US_ROUND(
   1e310:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
   1e314:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1e318:	4401      	add	r1, r0
   1e31a:	fbb1 f1f2 	udiv	r1, r1, r2

NRF_STATIC_INLINE void nrf_ppi_task_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                   nrf_ppi_channel_t channel,
                                                   uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1e31e:	4a14      	ldr	r2, [pc, #80]	; (1e370 <sw_switch.isra.10+0xc0>)
   1e320:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
		}
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
   1e324:	009b      	lsls	r3, r3, #2
   1e326:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1e32a:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
		SW_SWITCH_TIMER->CC[cc]) {
   1e32e:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	if (delay <
   1e332:	428a      	cmp	r2, r1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
				 SW_SWITCH_TIMER->CC[cc] - delay);
   1e334:	bf8b      	itete	hi
   1e336:	f8d3 2540 	ldrhi.w	r2, [r3, #1344]	; 0x540

NRF_STATIC_INLINE void nrf_timer_cc_set(NRF_TIMER_Type *       p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
   1e33a:	2201      	movls	r2, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   1e33c:	1a51      	subhi	r1, r2, r1
   1e33e:	f8c3 2540 	strls.w	r2, [r3, #1344]	; 0x540
   1e342:	bf88      	it	hi
   1e344:	f8c3 1540 	strhi.w	r1, [r3, #1344]	; 0x540
    p_reg->CHENSET = mask;
   1e348:	4b08      	ldr	r3, [pc, #32]	; (1e36c <sw_switch.isra.10+0xbc>)
   1e34a:	f44f 6210 	mov.w	r2, #2304	; 0x900
   1e34e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1U;
   1e352:	1c6b      	adds	r3, r5, #1
	sw_tifs_toggle &= 1;
   1e354:	f003 0301 	and.w	r3, r3, #1
   1e358:	7033      	strb	r3, [r6, #0]
}
   1e35a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1e35c:	4a05      	ldr	r2, [pc, #20]	; (1e374 <sw_switch.isra.10+0xc4>)
   1e35e:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
		delay = HAL_RADIO_NS2US_CEIL(
   1e362:	2128      	movs	r1, #40	; 0x28
   1e364:	e7de      	b.n	1e324 <sw_switch.isra.10+0x74>
   1e366:	bf00      	nop
   1e368:	20004889 	.word	0x20004889
   1e36c:	4001f000 	.word	0x4001f000
   1e370:	40001000 	.word	0x40001000
   1e374:	40001004 	.word	0x40001004
   1e378:	4000110c 	.word	0x4000110c

0001e37c <isr_radio>:
	return (NRF_RADIO->EVENTS_DISABLED != 0);
   1e37c:	4b04      	ldr	r3, [pc, #16]	; (1e390 <isr_radio+0x14>)
   1e37e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
   1e382:	b123      	cbz	r3, 1e38e <isr_radio+0x12>
		isr_cb(isr_cb_param);
   1e384:	4b03      	ldr	r3, [pc, #12]	; (1e394 <isr_radio+0x18>)
   1e386:	4a04      	ldr	r2, [pc, #16]	; (1e398 <isr_radio+0x1c>)
   1e388:	681b      	ldr	r3, [r3, #0]
   1e38a:	6810      	ldr	r0, [r2, #0]
   1e38c:	4718      	bx	r3
}
   1e38e:	4770      	bx	lr
   1e390:	40001000 	.word	0x40001000
   1e394:	20004448 	.word	0x20004448
   1e398:	2000444c 	.word	0x2000444c

0001e39c <radio_isr_set>:
{
   1e39c:	b538      	push	{r3, r4, r5, lr}
   1e39e:	4604      	mov	r4, r0
	irq_disable(RADIO_IRQn);
   1e3a0:	2001      	movs	r0, #1
{
   1e3a2:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
   1e3a4:	f7e8 fcb2 	bl	6d0c <arch_irq_disable>
	isr_cb_param = param;
   1e3a8:	4b08      	ldr	r3, [pc, #32]	; (1e3cc <radio_isr_set+0x30>)
   1e3aa:	601d      	str	r5, [r3, #0]
	isr_cb = cb;
   1e3ac:	4b08      	ldr	r3, [pc, #32]	; (1e3d0 <radio_isr_set+0x34>)
   1e3ae:	601c      	str	r4, [r3, #0]
    return p_reg->SHORTS;
}

NRF_STATIC_INLINE void nrf_radio_int_enable(NRF_RADIO_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1e3b0:	4b08      	ldr	r3, [pc, #32]	; (1e3d4 <radio_isr_set+0x38>)
   1e3b2:	2210      	movs	r2, #16
   1e3b4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1e3b8:	4b07      	ldr	r3, [pc, #28]	; (1e3d8 <radio_isr_set+0x3c>)
   1e3ba:	2202      	movs	r2, #2
   1e3bc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
   1e3c0:	2001      	movs	r0, #1
}
   1e3c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	irq_enable(RADIO_IRQn);
   1e3c6:	f7e8 bc91 	b.w	6cec <arch_irq_enable>
   1e3ca:	bf00      	nop
   1e3cc:	2000444c 	.word	0x2000444c
   1e3d0:	20004448 	.word	0x20004448
   1e3d4:	40001000 	.word	0x40001000
   1e3d8:	e000e100 	.word	0xe000e100

0001e3dc <radio_reset>:
{
   1e3dc:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
   1e3de:	2001      	movs	r0, #1
   1e3e0:	f7e8 fc94 	bl	6d0c <arch_irq_disable>
}
#endif

NRF_STATIC_INLINE void nrf_radio_power_set(NRF_RADIO_Type * p_reg, bool radio_power)
{
    p_reg->POWER = (uint32_t) radio_power;
   1e3e4:	4b0c      	ldr	r3, [pc, #48]	; (1e418 <radio_reset+0x3c>)
   1e3e6:	2200      	movs	r2, #0
   1e3e8:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
   1e3ec:	2201      	movs	r2, #1
   1e3ee:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   1e3f2:	4a0a      	ldr	r2, [pc, #40]	; (1e41c <radio_reset+0x40>)
   1e3f4:	6813      	ldr	r3, [r2, #0]
					 0xfffffffe) | 0x01000000;
   1e3f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1e3fa:	f023 0301 	bic.w	r3, r3, #1
   1e3fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   1e402:	6013      	str	r3, [r2, #0]
static inline void hal_radio_sw_switch_ppi_group_setup(void)
{
	/* Include the appropriate PPI channels in the two PPI Groups. */
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || \
	!defined(CONFIG_HAS_HW_NRF_RADIO_BLE_CODED)
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   1e404:	4b06      	ldr	r3, [pc, #24]	; (1e420 <radio_reset+0x44>)
   1e406:	f44f 5290 	mov.w	r2, #4608	; 0x1200
   1e40a:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		BIT(HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) |
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PPI(0));
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   1e40e:	f44f 5210 	mov.w	r2, #9216	; 0x2400
   1e412:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
}
   1e416:	bd08      	pop	{r3, pc}
   1e418:	40001000 	.word	0x40001000
   1e41c:	40001774 	.word	0x40001774
   1e420:	4001f000 	.word	0x4001f000

0001e424 <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   1e424:	4b06      	ldr	r3, [pc, #24]	; (1e440 <radio_phy_set+0x1c>)
	switch (phy) {
   1e426:	2802      	cmp	r0, #2
		mode = RADIO_MODE_MODE_Ble_2Mbit;
   1e428:	bf14      	ite	ne
   1e42a:	2203      	movne	r2, #3
   1e42c:	2204      	moveq	r2, #4
   1e42e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   1e432:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   1e436:	f042 0201 	orr.w	r2, r2, #1
   1e43a:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
   1e43e:	4770      	bx	lr
   1e440:	40001000 	.word	0x40001000

0001e444 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = (uint32_t)power;
   1e444:	4b01      	ldr	r3, [pc, #4]	; (1e44c <radio_tx_power_set+0x8>)
   1e446:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   1e44a:	4770      	bx	lr
   1e44c:	40001000 	.word	0x40001000

0001e450 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   1e450:	4b01      	ldr	r3, [pc, #4]	; (1e458 <radio_freq_chan_set+0x8>)
   1e452:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
   1e456:	4770      	bx	lr
   1e458:	40001000 	.word	0x40001000

0001e45c <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   1e45c:	4b07      	ldr	r3, [pc, #28]	; (1e47c <radio_whiten_iv_set+0x20>)
   1e45e:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   1e462:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1e466:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   1e46a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   1e46e:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1e472:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   1e476:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   1e47a:	4770      	bx	lr
   1e47c:	40001000 	.word	0x40001000

0001e480 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   1e480:	4a0a      	ldr	r2, [pc, #40]	; (1e4ac <radio_aa_set+0x2c>)
   1e482:	2300      	movs	r3, #0
   1e484:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   1e488:	2301      	movs	r3, #1
   1e48a:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   1e48e:	78c3      	ldrb	r3, [r0, #3]
   1e490:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   1e494:	7843      	ldrb	r3, [r0, #1]
   1e496:	7881      	ldrb	r1, [r0, #2]
   1e498:	041b      	lsls	r3, r3, #16
   1e49a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   1e49e:	7801      	ldrb	r1, [r0, #0]
   1e4a0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   1e4a4:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
   1e4a8:	4770      	bx	lr
   1e4aa:	bf00      	nop
   1e4ac:	40001000 	.word	0x40001000

0001e4b0 <radio_pkt_configure>:
	switch (phy) {
   1e4b0:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   1e4b4:	2b02      	cmp	r3, #2
{
   1e4b6:	b510      	push	{r4, lr}
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   1e4b8:	bf14      	ite	ne
   1e4ba:	2400      	movne	r4, #0
   1e4bc:	f04f 7480 	moveq.w	r4, #16777216	; 0x1000000
	if (dc) {
   1e4c0:	07d3      	lsls	r3, r2, #31
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1e4c2:	f1c0 0308 	rsb	r3, r0, #8
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   1e4c6:	bf48      	it	mi
   1e4c8:	f444 1480 	orrmi.w	r4, r4, #1048576	; 0x100000
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1e4cc:	041b      	lsls	r3, r3, #16
			   ((((uint32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
   1e4ce:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
   1e4d2:	4320      	orrs	r0, r4
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1e4d4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   1e4d8:	4a09      	ldr	r2, [pc, #36]	; (1e500 <radio_pkt_configure+0x50>)
			    RADIO_PCNF0_S1LEN_Msk) |
   1e4da:	4303      	orrs	r3, r0
   1e4dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   1e4e0:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   1e4e4:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
   1e4e8:	4b06      	ldr	r3, [pc, #24]	; (1e504 <radio_pkt_configure+0x54>)
   1e4ea:	4003      	ands	r3, r0
   1e4ec:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((uint32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
   1e4f0:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   1e4f4:	4319      	orrs	r1, r3
   1e4f6:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
   1e4fa:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
}
   1e4fe:	bd10      	pop	{r4, pc}
   1e500:	40001000 	.word	0x40001000
   1e504:	fef80000 	.word	0xfef80000

0001e508 <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (uint32_t)rx_packet;
   1e508:	4b01      	ldr	r3, [pc, #4]	; (1e510 <radio_pkt_rx_set+0x8>)
   1e50a:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   1e50e:	4770      	bx	lr
   1e510:	40001000 	.word	0x40001000

0001e514 <radio_pkt_tx_set>:
   1e514:	4b01      	ldr	r3, [pc, #4]	; (1e51c <radio_pkt_tx_set+0x8>)
   1e516:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   1e51a:	4770      	bx	lr
   1e51c:	40001000 	.word	0x40001000

0001e520 <radio_rx_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e520:	4b01      	ldr	r3, [pc, #4]	; (1e528 <radio_rx_enable+0x8>)
   1e522:	2201      	movs	r2, #1
   1e524:	601a      	str	r2, [r3, #0]
}
   1e526:	4770      	bx	lr
   1e528:	40001004 	.word	0x40001004

0001e52c <radio_tx_enable>:
   1e52c:	4b01      	ldr	r3, [pc, #4]	; (1e534 <radio_tx_enable+0x8>)
   1e52e:	2201      	movs	r2, #1
   1e530:	601a      	str	r2, [r3, #0]
}
   1e532:	4770      	bx	lr
   1e534:	40001000 	.word	0x40001000

0001e538 <radio_disable>:
    p_reg->CHENCLR = mask;
   1e538:	4a07      	ldr	r2, [pc, #28]	; (1e558 <radio_disable+0x20>)
   1e53a:	f44f 6310 	mov.w	r3, #2304	; 0x900
   1e53e:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    p_reg->TASKS_CHG[(uint32_t) group].EN = 1UL;
}

NRF_STATIC_INLINE void nrf_ppi_group_disable(NRF_PPI_Type * p_reg, nrf_ppi_channel_group_t group)
{
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   1e542:	2301      	movs	r3, #1
   1e544:	6053      	str	r3, [r2, #4]
   1e546:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
   1e548:	f5a2 32f0 	sub.w	r2, r2, #122880	; 0x1e000
   1e54c:	2100      	movs	r1, #0
   1e54e:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
   1e552:	6113      	str	r3, [r2, #16]
}
   1e554:	4770      	bx	lr
   1e556:	bf00      	nop
   1e558:	4001f000 	.word	0x4001f000

0001e55c <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   1e55c:	4b04      	ldr	r3, [pc, #16]	; (1e570 <radio_status_reset+0x14>)
   1e55e:	2200      	movs	r2, #0
   1e560:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   1e564:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   1e568:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   1e56c:	4770      	bx	lr
   1e56e:	bf00      	nop
   1e570:	40001000 	.word	0x40001000

0001e574 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   1e574:	4b03      	ldr	r3, [pc, #12]	; (1e584 <radio_is_ready+0x10>)
   1e576:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   1e57a:	3000      	adds	r0, #0
   1e57c:	bf18      	it	ne
   1e57e:	2001      	movne	r0, #1
   1e580:	4770      	bx	lr
   1e582:	bf00      	nop
   1e584:	40001000 	.word	0x40001000

0001e588 <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
   1e588:	4b03      	ldr	r3, [pc, #12]	; (1e598 <radio_is_done+0x10>)
   1e58a:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   1e58e:	3000      	adds	r0, #0
   1e590:	bf18      	it	ne
   1e592:	2001      	movne	r0, #1
   1e594:	4770      	bx	lr
   1e596:	bf00      	nop
   1e598:	40001000 	.word	0x40001000

0001e59c <radio_is_idle>:
	return (NRF_RADIO->STATE == 0);
   1e59c:	4b03      	ldr	r3, [pc, #12]	; (1e5ac <radio_is_idle+0x10>)
   1e59e:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   1e5a2:	fab0 f080 	clz	r0, r0
   1e5a6:	0940      	lsrs	r0, r0, #5
   1e5a8:	4770      	bx	lr
   1e5aa:	bf00      	nop
   1e5ac:	40001000 	.word	0x40001000

0001e5b0 <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
   1e5b0:	4b04      	ldr	r3, [pc, #16]	; (1e5c4 <radio_crc_configure+0x14>)
   1e5b2:	f240 1203 	movw	r2, #259	; 0x103
   1e5b6:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
   1e5ba:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   1e5be:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
   1e5c2:	4770      	bx	lr
   1e5c4:	40001000 	.word	0x40001000

0001e5c8 <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
   1e5c8:	4b03      	ldr	r3, [pc, #12]	; (1e5d8 <radio_crc_is_valid+0x10>)
   1e5ca:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1e5ce:	3000      	adds	r0, #0
   1e5d0:	bf18      	it	ne
   1e5d2:	2001      	movne	r0, #1
   1e5d4:	4770      	bx	lr
   1e5d6:	bf00      	nop
   1e5d8:	40001000 	.word	0x40001000

0001e5dc <radio_pkt_empty_get>:
}
   1e5dc:	4800      	ldr	r0, [pc, #0]	; (1e5e0 <radio_pkt_empty_get+0x4>)
   1e5de:	4770      	bx	lr
   1e5e0:	20004340 	.word	0x20004340

0001e5e4 <radio_pkt_scratch_get>:
}
   1e5e4:	4800      	ldr	r0, [pc, #0]	; (1e5e8 <radio_pkt_scratch_get+0x4>)
   1e5e6:	4770      	bx	lr
   1e5e8:	20004344 	.word	0x20004344

0001e5ec <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1e5ec:	4b04      	ldr	r3, [pc, #16]	; (1e600 <radio_switch_complete_and_rx+0x14>)
   1e5ee:	2203      	movs	r2, #3
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
   1e5f0:	2100      	movs	r1, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1e5f2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	sw_switch(0, 0, 0, phy_rx, 0);
   1e5f6:	4602      	mov	r2, r0
   1e5f8:	4608      	mov	r0, r1
   1e5fa:	f7ff be59 	b.w	1e2b0 <sw_switch.isra.10>
   1e5fe:	bf00      	nop
   1e600:	40001000 	.word	0x40001000

0001e604 <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1e604:	4b03      	ldr	r3, [pc, #12]	; (1e614 <radio_switch_complete_and_tx+0x10>)
   1e606:	2103      	movs	r1, #3
   1e608:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
   1e60c:	4601      	mov	r1, r0
   1e60e:	2001      	movs	r0, #1
   1e610:	f7ff be4e 	b.w	1e2b0 <sw_switch.isra.10>
   1e614:	40001000 	.word	0x40001000

0001e618 <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
   1e618:	4b05      	ldr	r3, [pc, #20]	; (1e630 <radio_switch_complete_and_disable+0x18>)
   1e61a:	2203      	movs	r2, #3
   1e61c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    p_reg->CHENCLR = mask;
   1e620:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
   1e624:	f44f 6210 	mov.w	r2, #2304	; 0x900
   1e628:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	hal_radio_sw_switch_disable();
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1e62c:	4770      	bx	lr
   1e62e:	bf00      	nop
   1e630:	40001000 	.word	0x40001000

0001e634 <radio_rssi_measure>:

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
   1e634:	4a03      	ldr	r2, [pc, #12]	; (1e644 <radio_rssi_measure+0x10>)
   1e636:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   1e63a:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   1e63e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	    (RADIO_SHORTS_ADDRESS_RSSISTART_Msk |
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}
   1e642:	4770      	bx	lr
   1e644:	40001000 	.word	0x40001000

0001e648 <radio_rssi_get>:

uint32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
   1e648:	4b01      	ldr	r3, [pc, #4]	; (1e650 <radio_rssi_get+0x8>)
   1e64a:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
   1e64e:	4770      	bx	lr
   1e650:	40001000 	.word	0x40001000

0001e654 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   1e654:	4b02      	ldr	r3, [pc, #8]	; (1e660 <radio_rssi_status_reset+0xc>)
   1e656:	2200      	movs	r2, #0
   1e658:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
   1e65c:	4770      	bx	lr
   1e65e:	bf00      	nop
   1e660:	40001000 	.word	0x40001000

0001e664 <radio_rssi_is_ready>:

uint32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   1e664:	4b03      	ldr	r3, [pc, #12]	; (1e674 <radio_rssi_is_ready+0x10>)
   1e666:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   1e66a:	3000      	adds	r0, #0
   1e66c:	bf18      	it	ne
   1e66e:	2001      	movne	r0, #1
   1e670:	4770      	bx	lr
   1e672:	bf00      	nop
   1e674:	40001000 	.word	0x40001000

0001e678 <radio_filter_configure>:

void radio_filter_configure(uint8_t bitmask_enable, uint8_t bitmask_addr_type,
			    uint8_t *bdaddr)
{
   1e678:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e67a:	2400      	movs	r4, #0
   1e67c:	2706      	movs	r7, #6
   1e67e:	00a3      	lsls	r3, r4, #2
   1e680:	fb07 2504 	mla	r5, r7, r4, r2
	uint8_t index;

	for (index = 0U; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   1e684:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1e688:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
			((uint32_t)bdaddr[2] << 16) |
			((uint32_t)bdaddr[1] << 8) |
   1e68c:	682e      	ldr	r6, [r5, #0]
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   1e68e:	f8c3 6600 	str.w	r6, [r3, #1536]	; 0x600
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((uint32_t)bdaddr[5] << 8) | bdaddr[4];
   1e692:	3401      	adds	r4, #1
   1e694:	88ad      	ldrh	r5, [r5, #4]
   1e696:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0U; index < 8; index++) {
   1e69a:	2c08      	cmp	r4, #8
   1e69c:	d1ef      	bne.n	1e67e <radio_filter_configure+0x6>
		bdaddr += 6;
	}

	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   1e69e:	4b03      	ldr	r3, [pc, #12]	; (1e6ac <radio_filter_configure+0x34>)
   1e6a0:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
   1e6a4:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
   1e6a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e6aa:	bf00      	nop
   1e6ac:	40001000 	.word	0x40001000

0001e6b0 <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   1e6b0:	4a03      	ldr	r2, [pc, #12]	; (1e6c0 <radio_filter_disable+0x10>)
   1e6b2:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   1e6b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1e6ba:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   1e6be:	4770      	bx	lr
   1e6c0:	40001000 	.word	0x40001000

0001e6c4 <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   1e6c4:	4b02      	ldr	r3, [pc, #8]	; (1e6d0 <radio_filter_status_reset+0xc>)
   1e6c6:	2200      	movs	r2, #0
   1e6c8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   1e6cc:	4770      	bx	lr
   1e6ce:	bf00      	nop
   1e6d0:	40001000 	.word	0x40001000

0001e6d4 <radio_filter_has_match>:

uint32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   1e6d4:	4b03      	ldr	r3, [pc, #12]	; (1e6e4 <radio_filter_has_match+0x10>)
   1e6d6:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   1e6da:	3000      	adds	r0, #0
   1e6dc:	bf18      	it	ne
   1e6de:	2001      	movne	r0, #1
   1e6e0:	4770      	bx	lr
   1e6e2:	bf00      	nop
   1e6e4:	40001000 	.word	0x40001000

0001e6e8 <radio_filter_match_get>:

uint32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   1e6e8:	4b01      	ldr	r3, [pc, #4]	; (1e6f0 <radio_filter_match_get+0x8>)
   1e6ea:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   1e6ee:	4770      	bx	lr
   1e6f0:	40001000 	.word	0x40001000

0001e6f4 <radio_tmr_status_reset>:
    p_reg->EVTENCLR = mask;
   1e6f4:	4b05      	ldr	r3, [pc, #20]	; (1e70c <radio_tmr_status_reset+0x18>)
   1e6f6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   1e6fa:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
   1e6fe:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
   1e702:	4a03      	ldr	r2, [pc, #12]	; (1e710 <radio_tmr_status_reset+0x1c>)
   1e704:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
			BIT(HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI) |
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
			BIT(HAL_TRIGGER_CRYPT_PPI));
}
   1e708:	4770      	bx	lr
   1e70a:	bf00      	nop
   1e70c:	4000b000 	.word	0x4000b000
   1e710:	0e7000c0 	.word	0x0e7000c0

0001e714 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(uint32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_set(SW_SWITCH_TIMER,
   1e714:	4b03      	ldr	r3, [pc, #12]	; (1e724 <radio_tmr_tifs_set+0x10>)
   1e716:	4a04      	ldr	r2, [pc, #16]	; (1e728 <radio_tmr_tifs_set+0x14>)
   1e718:	781b      	ldrb	r3, [r3, #0]
   1e71a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   1e71e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			 SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1e722:	4770      	bx	lr
   1e724:	20004889 	.word	0x20004889
   1e728:	40009000 	.word	0x40009000

0001e72c <radio_tmr_start>:

uint32_t radio_tmr_start(uint8_t trx, uint32_t ticks_start, uint32_t remainder)
{
   1e72c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   1e72e:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   1e732:	4c2f      	ldr	r4, [pc, #188]	; (1e7f0 <radio_tmr_start+0xc4>)
   1e734:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   1e738:	42a3      	cmp	r3, r4
		ticks_start--;
		remainder += 30517578UL;
   1e73a:	bf88      	it	hi
   1e73c:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e740:	4b2c      	ldr	r3, [pc, #176]	; (1e7f4 <radio_tmr_start+0xc8>)
	}
	remainder /= 1000000UL;
   1e742:	4c2d      	ldr	r4, [pc, #180]	; (1e7f8 <radio_tmr_start+0xcc>)
		remainder += 30517578UL;
   1e744:	bf84      	itt	hi
   1e746:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
   1e74a:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
   1e74e:	f04f 0501 	mov.w	r5, #1
	remainder /= 1000000UL;
   1e752:	fbb2 f4f4 	udiv	r4, r2, r4

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
   1e756:	f04f 0600 	mov.w	r6, #0
	EVENT_TIMER->PRESCALER = 4;
   1e75a:	f04f 0704 	mov.w	r7, #4
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   1e75e:	f04f 0202 	mov.w	r2, #2
   1e762:	601d      	str	r5, [r3, #0]
	EVENT_TIMER->MODE = 0;
   1e764:	f8c3 64f8 	str.w	r6, [r3, #1272]	; 0x4f8
	EVENT_TIMER->PRESCALER = 4;
   1e768:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   1e76c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
    p_reg->CC[ch] = cc_val;
   1e770:	4a22      	ldr	r2, [pc, #136]	; (1e7fc <radio_tmr_start+0xd0>)
    p_reg->CC[cc_channel] = cc_value;
   1e772:	f8c3 4534 	str.w	r4, [r3, #1332]	; 0x534
		ticks_start--;
   1e776:	bf88      	it	hi
   1e778:	f101 31ff 	addhi.w	r1, r1, #4294967295
   1e77c:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   1e780:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   1e784:	f8c2 1344 	str.w	r1, [r2, #836]	; 0x344
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1e788:	491d      	ldr	r1, [pc, #116]	; (1e800 <radio_tmr_start+0xd4>)
   1e78a:	f502 72a4 	add.w	r2, r2, #328	; 0x148
	EVENT_TIMER->MODE = 0;
   1e78e:	3b0c      	subs	r3, #12
   1e790:	f8c1 2540 	str.w	r2, [r1, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1e794:	f8c1 3544 	str.w	r3, [r1, #1348]	; 0x544
    p_reg->CHENSET = mask;
   1e798:	2340      	movs	r3, #64	; 0x40
   1e79a:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
	nrf_rtc_event_enable(NRF_RTC0, RTC_EVTENSET_COMPARE2_Msk);

	hal_event_timer_start_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_EVENT_TIMER_START_PPI));

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
   1e79e:	f7ff fd73 	bl	1e288 <hal_radio_enable_on_tick_ppi_config_and_enable>
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
   1e7a2:	4b18      	ldr	r3, [pc, #96]	; (1e804 <radio_tmr_start+0xd8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e7a4:	4a18      	ldr	r2, [pc, #96]	; (1e808 <radio_tmr_start+0xdc>)
   1e7a6:	6015      	str	r5, [r2, #0]
   1e7a8:	f8c3 6504 	str.w	r6, [r3, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   1e7ac:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   1e7b0:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
   1e7b4:	601d      	str	r5, [r3, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1e7b6:	f5a3 43fd 	sub.w	r3, r3, #32384	; 0x7e80
   1e7ba:	3b74      	subs	r3, #116	; 0x74
   1e7bc:	f8c1 3550 	str.w	r3, [r1, #1360]	; 0x550
   1e7c0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   1e7c4:	3334      	adds	r3, #52	; 0x34
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1e7c6:	f8c1 2554 	str.w	r2, [r1, #1364]	; 0x554
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1e7ca:	f8c1 3558 	str.w	r3, [r1, #1368]	; 0x558
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1e7ce:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   1e7d2:	33c4      	adds	r3, #196	; 0xc4
   1e7d4:	f8c1 355c 	str.w	r3, [r1, #1372]	; 0x55c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1e7d8:	f5a3 33af 	sub.w	r3, r3, #89600	; 0x15e00
   1e7dc:	3bc0      	subs	r3, #192	; 0xc0
   1e7de:	f8c1 3560 	str.w	r3, [r1, #1376]	; 0x560
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1e7e2:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   1e7e6:	33c8      	adds	r3, #200	; 0xc8
   1e7e8:	f8c1 3564 	str.w	r3, [r1, #1380]	; 0x564
	 */
#endif /* CONFIG_BT_CTLR_PHY_CODED && CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   1e7ec:	4620      	mov	r0, r4
   1e7ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e7f0:	7ff0bdbf 	.word	0x7ff0bdbf
   1e7f4:	4000800c 	.word	0x4000800c
   1e7f8:	000f4240 	.word	0x000f4240
   1e7fc:	4000b000 	.word	0x4000b000
   1e800:	4001f000 	.word	0x4001f000
   1e804:	40009000 	.word	0x40009000
   1e808:	4000900c 	.word	0x4000900c

0001e80c <radio_tmr_start_tick>:
   1e80c:	4b0e      	ldr	r3, [pc, #56]	; (1e848 <radio_tmr_start_tick+0x3c>)
    p_reg->CC[cc_channel] = cc_value;
   1e80e:	4a0f      	ldr	r2, [pc, #60]	; (1e84c <radio_tmr_start_tick+0x40>)

uint32_t radio_tmr_start_tick(uint8_t trx, uint32_t tick)
{
   1e810:	b510      	push	{r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e812:	2401      	movs	r4, #1
   1e814:	601c      	str	r4, [r3, #0]
   1e816:	609c      	str	r4, [r3, #8]
    p_reg->CC[ch] = cc_val;
   1e818:	4b0d      	ldr	r3, [pc, #52]	; (1e850 <radio_tmr_start_tick+0x44>)
    p_reg->CC[cc_channel] = cc_value;
   1e81a:	f8c2 4540 	str.w	r4, [r2, #1344]	; 0x540
   1e81e:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   1e822:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   1e826:	f8c3 1344 	str.w	r1, [r3, #836]	; 0x344
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1e82a:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
   1e82e:	4909      	ldr	r1, [pc, #36]	; (1e854 <radio_tmr_start_tick+0x48>)
   1e830:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1e834:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    p_reg->CHENSET = mask;
   1e838:	2240      	movs	r2, #64	; 0x40
   1e83a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	nrf_rtc_event_enable(NRF_RTC0, RTC_EVTENSET_COMPARE2_Msk);

	hal_event_timer_start_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_EVENT_TIMER_START_PPI));

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
   1e83e:	f7ff fd23 	bl	1e288 <hal_radio_enable_on_tick_ppi_config_and_enable>
	hal_sw_switch_timer_clear_ppi_config();
#endif /* CONFIG_SOC_SERIES_NRF53X */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder_us;
}
   1e842:	4620      	mov	r0, r4
   1e844:	bd10      	pop	{r4, pc}
   1e846:	bf00      	nop
   1e848:	40008004 	.word	0x40008004
   1e84c:	40008000 	.word	0x40008000
   1e850:	4000b000 	.word	0x4000b000
   1e854:	4000b148 	.word	0x4000b148

0001e858 <radio_tmr_start_get>:
    return p_reg->CC[ch];
   1e858:	4b01      	ldr	r3, [pc, #4]	; (1e860 <radio_tmr_start_get+0x8>)
   1e85a:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

uint32_t radio_tmr_start_get(void)
{
	return nrf_rtc_cc_get(NRF_RTC0, 2);
}
   1e85e:	4770      	bx	lr
   1e860:	4000b000 	.word	0x4000b000

0001e864 <radio_tmr_stop>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e864:	4a04      	ldr	r2, [pc, #16]	; (1e878 <radio_tmr_stop+0x14>)
   1e866:	2301      	movs	r3, #1
   1e868:	6013      	str	r3, [r2, #0]
   1e86a:	60d3      	str	r3, [r2, #12]
   1e86c:	320c      	adds	r2, #12
   1e86e:	f602 72f4 	addw	r2, r2, #4084	; 0xff4
   1e872:	6013      	str	r3, [r2, #0]
   1e874:	60d3      	str	r3, [r2, #12]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1e876:	4770      	bx	lr
   1e878:	40008004 	.word	0x40008004

0001e87c <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
   1e87c:	4b04      	ldr	r3, [pc, #16]	; (1e890 <radio_tmr_hcto_configure+0x14>)
   1e87e:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
   1e882:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
   1e886:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
   1e88a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_disable_on_hcto_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI) |
		BIT(HAL_RADIO_DISABLE_ON_HCTO_PPI));
}
   1e88e:	4770      	bx	lr
   1e890:	40008000 	.word	0x40008000

0001e894 <radio_tmr_aa_capture>:
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1e894:	4b06      	ldr	r3, [pc, #24]	; (1e8b0 <radio_tmr_aa_capture+0x1c>)
   1e896:	4a07      	ldr	r2, [pc, #28]	; (1e8b4 <radio_tmr_aa_capture+0x20>)
   1e898:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1e89c:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   1e8a0:	3240      	adds	r2, #64	; 0x40
   1e8a2:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
    p_reg->CHENSET = mask;
   1e8a6:	4a04      	ldr	r2, [pc, #16]	; (1e8b8 <radio_tmr_aa_capture+0x24>)
   1e8a8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_ready_time_capture_ppi_config();
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_READY_TIME_CAPTURE_PPI) |
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI));
}
   1e8ac:	4770      	bx	lr
   1e8ae:	bf00      	nop
   1e8b0:	4001f000 	.word	0x4001f000
   1e8b4:	40001100 	.word	0x40001100
   1e8b8:	04000080 	.word	0x04000080

0001e8bc <radio_tmr_aa_get>:

uint32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   1e8bc:	4b01      	ldr	r3, [pc, #4]	; (1e8c4 <radio_tmr_aa_get+0x8>)
   1e8be:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   1e8c2:	4770      	bx	lr
   1e8c4:	40008000 	.word	0x40008000

0001e8c8 <radio_tmr_aa_save>:

static uint32_t radio_tmr_aa;

void radio_tmr_aa_save(uint32_t aa)
{
	radio_tmr_aa = aa;
   1e8c8:	4b01      	ldr	r3, [pc, #4]	; (1e8d0 <radio_tmr_aa_save+0x8>)
   1e8ca:	6018      	str	r0, [r3, #0]
}
   1e8cc:	4770      	bx	lr
   1e8ce:	bf00      	nop
   1e8d0:	20004450 	.word	0x20004450

0001e8d4 <radio_tmr_aa_restore>:

uint32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
}
   1e8d4:	4b01      	ldr	r3, [pc, #4]	; (1e8dc <radio_tmr_aa_restore+0x8>)
   1e8d6:	6818      	ldr	r0, [r3, #0]
   1e8d8:	4770      	bx	lr
   1e8da:	bf00      	nop
   1e8dc:	20004450 	.word	0x20004450

0001e8e0 <radio_tmr_ready_get>:

uint32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   1e8e0:	4b01      	ldr	r3, [pc, #4]	; (1e8e8 <radio_tmr_ready_get+0x8>)
   1e8e2:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   1e8e6:	4770      	bx	lr
   1e8e8:	40008000 	.word	0x40008000

0001e8ec <radio_tmr_end_capture>:
   1e8ec:	4b02      	ldr	r3, [pc, #8]	; (1e8f8 <radio_tmr_end_capture+0xc>)
   1e8ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   1e8f2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504

void radio_tmr_end_capture(void)
{
	hal_radio_end_time_capture_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
}
   1e8f6:	4770      	bx	lr
   1e8f8:	4001f000 	.word	0x4001f000

0001e8fc <radio_tmr_end_get>:
uint32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   1e8fc:	4b01      	ldr	r3, [pc, #4]	; (1e904 <radio_tmr_end_get+0x8>)
   1e8fe:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
   1e902:	4770      	bx	lr
   1e904:	40008000 	.word	0x40008000

0001e908 <radio_tmr_tifs_base_get>:
   1e908:	4b01      	ldr	r3, [pc, #4]	; (1e910 <radio_tmr_tifs_base_get+0x8>)
   1e90a:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   1e90e:	4770      	bx	lr
   1e910:	40008000 	.word	0x40008000

0001e914 <radio_ar_match_get>:
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_AAR_PPI));
}

uint32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   1e914:	4b01      	ldr	r3, [pc, #4]	; (1e91c <radio_ar_match_get+0x8>)
   1e916:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1e91a:	4770      	bx	lr
   1e91c:	4000f000 	.word	0x4000f000

0001e920 <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
   1e920:	4a06      	ldr	r2, [pc, #24]	; (1e93c <radio_ar_status_reset+0x1c>)
   1e922:	2300      	movs	r3, #0
   1e924:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   1e928:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
   1e92c:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    p_reg->CHENCLR = mask;
   1e930:	4b03      	ldr	r3, [pc, #12]	; (1e940 <radio_ar_status_reset+0x20>)
   1e932:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   1e936:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
			  AAR_ENABLE_ENABLE_Msk;

	hal_radio_nrf_ppi_channels_disable(BIT(HAL_TRIGGER_AAR_PPI));
}
   1e93a:	4770      	bx	lr
   1e93c:	40001000 	.word	0x40001000
   1e940:	4001f000 	.word	0x4001f000

0001e944 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   1e944:	4b08      	ldr	r3, [pc, #32]	; (1e968 <radio_ar_has_match+0x24>)
   1e946:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

uint32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   1e94a:	b160      	cbz	r0, 1e966 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   1e94c:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   1e950:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   1e954:	b138      	cbz	r0, 1e966 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   1e956:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   1e95a:	b120      	cbz	r0, 1e966 <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   1e95c:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   1e960:	fab0 f080 	clz	r0, r0
   1e964:	0940      	lsrs	r0, r0, #5
}
   1e966:	4770      	bx	lr
   1e968:	40001000 	.word	0x40001000

0001e96c <mayfly_enable_cb>:

void mayfly_enable_cb(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   1e96c:	2902      	cmp	r1, #2
{
   1e96e:	b510      	push	{r4, lr}
   1e970:	4614      	mov	r4, r2
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   1e972:	d00a      	beq.n	1e98a <mayfly_enable_cb+0x1e>
   1e974:	221e      	movs	r2, #30
   1e976:	490a      	ldr	r1, [pc, #40]	; (1e9a0 <mayfly_enable_cb+0x34>)
   1e978:	480a      	ldr	r0, [pc, #40]	; (1e9a4 <mayfly_enable_cb+0x38>)
   1e97a:	f008 faf8 	bl	26f6e <printk>
   1e97e:	4040      	eors	r0, r0
   1e980:	f380 8811 	msr	BASEPRI, r0
   1e984:	f04f 0003 	mov.w	r0, #3
   1e988:	df02      	svc	2

	if (enable) {
		irq_enable(HAL_SWI_JOB_IRQ);
   1e98a:	200b      	movs	r0, #11
	if (enable) {
   1e98c:	b11c      	cbz	r4, 1e996 <mayfly_enable_cb+0x2a>
	} else {
		irq_disable(HAL_SWI_JOB_IRQ);
	}
}
   1e98e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_enable(HAL_SWI_JOB_IRQ);
   1e992:	f7e8 b9ab 	b.w	6cec <arch_irq_enable>
}
   1e996:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_disable(HAL_SWI_JOB_IRQ);
   1e99a:	f7e8 b9b7 	b.w	6d0c <arch_irq_disable>
   1e99e:	bf00      	nop
   1e9a0:	00035341 	.word	0x00035341
   1e9a4:	0002fa94 	.word	0x0002fa94

0001e9a8 <mayfly_is_enabled>:

uint32_t mayfly_is_enabled(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   1e9a8:	2901      	cmp	r1, #1
{
   1e9aa:	b508      	push	{r3, lr}
	switch (callee_id) {
   1e9ac:	d014      	beq.n	1e9d8 <mayfly_is_enabled+0x30>
   1e9ae:	b171      	cbz	r1, 1e9ce <mayfly_is_enabled+0x26>
   1e9b0:	2902      	cmp	r1, #2
   1e9b2:	d011      	beq.n	1e9d8 <mayfly_is_enabled+0x30>

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(HAL_SWI_JOB_IRQ);

	default:
		LL_ASSERT(0);
   1e9b4:	2236      	movs	r2, #54	; 0x36
   1e9b6:	4909      	ldr	r1, [pc, #36]	; (1e9dc <mayfly_is_enabled+0x34>)
   1e9b8:	4809      	ldr	r0, [pc, #36]	; (1e9e0 <mayfly_is_enabled+0x38>)
   1e9ba:	f008 fad8 	bl	26f6e <printk>
   1e9be:	4040      	eors	r0, r0
   1e9c0:	f380 8811 	msr	BASEPRI, r0
   1e9c4:	f04f 0003 	mov.w	r0, #3
   1e9c8:	df02      	svc	2
		break;
	}

	return 0;
}
   1e9ca:	2000      	movs	r0, #0
   1e9cc:	bd08      	pop	{r3, pc}
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);
   1e9ce:	2018      	movs	r0, #24
}
   1e9d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		return irq_is_enabled(HAL_SWI_WORKER_IRQ);
   1e9d4:	f7e8 b9ae 	b.w	6d34 <arch_irq_is_enabled>
   1e9d8:	200b      	movs	r0, #11
   1e9da:	e7f9      	b.n	1e9d0 <mayfly_is_enabled+0x28>
   1e9dc:	00035341 	.word	0x00035341
   1e9e0:	0002fa94 	.word	0x0002fa94

0001e9e4 <mayfly_pend>:

void mayfly_pend(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   1e9e4:	2901      	cmp	r1, #1
{
   1e9e6:	b508      	push	{r3, lr}
	switch (callee_id) {
   1e9e8:	d014      	beq.n	1ea14 <mayfly_pend+0x30>
   1e9ea:	b169      	cbz	r1, 1ea08 <mayfly_pend+0x24>
   1e9ec:	2902      	cmp	r1, #2
   1e9ee:	d011      	beq.n	1ea14 <mayfly_pend+0x30>
	case MAYFLY_CALL_ID_JOB:
		hal_swi_job_pend();
		break;

	default:
		LL_ASSERT(0);
   1e9f0:	2267      	movs	r2, #103	; 0x67
   1e9f2:	490a      	ldr	r1, [pc, #40]	; (1ea1c <mayfly_pend+0x38>)
   1e9f4:	480a      	ldr	r0, [pc, #40]	; (1ea20 <mayfly_pend+0x3c>)
   1e9f6:	f008 faba 	bl	26f6e <printk>
   1e9fa:	4040      	eors	r0, r0
   1e9fc:	f380 8811 	msr	BASEPRI, r0
   1ea00:	f04f 0003 	mov.w	r0, #3
   1ea04:	df02      	svc	2
		break;
	}
}
   1ea06:	e004      	b.n	1ea12 <mayfly_pend+0x2e>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1ea08:	4b06      	ldr	r3, [pc, #24]	; (1ea24 <mayfly_pend+0x40>)
   1ea0a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   1ea0e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1ea12:	bd08      	pop	{r3, pc}
   1ea14:	4b03      	ldr	r3, [pc, #12]	; (1ea24 <mayfly_pend+0x40>)
   1ea16:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1ea1a:	e7f8      	b.n	1ea0e <mayfly_pend+0x2a>
   1ea1c:	00035341 	.word	0x00035341
   1ea20:	0002fa94 	.word	0x0002fa94
   1ea24:	e000e100 	.word	0xe000e100

0001ea28 <hal_ticker_instance0_caller_id_get>:

uint8_t hal_ticker_instance0_caller_id_get(uint8_t user_id)
{
	uint8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1ea28:	2803      	cmp	r0, #3
{
   1ea2a:	b510      	push	{r4, lr}
   1ea2c:	4604      	mov	r4, r0
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1ea2e:	d90a      	bls.n	1ea46 <hal_ticker_instance0_caller_id_get+0x1e>
   1ea30:	222b      	movs	r2, #43	; 0x2b
   1ea32:	490d      	ldr	r1, [pc, #52]	; (1ea68 <hal_ticker_instance0_caller_id_get+0x40>)
   1ea34:	480d      	ldr	r0, [pc, #52]	; (1ea6c <hal_ticker_instance0_caller_id_get+0x44>)
   1ea36:	f008 fa9a 	bl	26f6e <printk>
   1ea3a:	4040      	eors	r0, r0
   1ea3c:	f380 8811 	msr	BASEPRI, r0
   1ea40:	f04f 0003 	mov.w	r0, #3
   1ea44:	df02      	svc	2

	caller_id = caller_id_lut[user_id];
   1ea46:	4b0a      	ldr	r3, [pc, #40]	; (1ea70 <hal_ticker_instance0_caller_id_get+0x48>)
   1ea48:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   1ea4a:	b954      	cbnz	r4, 1ea62 <hal_ticker_instance0_caller_id_get+0x3a>
   1ea4c:	222e      	movs	r2, #46	; 0x2e
   1ea4e:	4906      	ldr	r1, [pc, #24]	; (1ea68 <hal_ticker_instance0_caller_id_get+0x40>)
   1ea50:	4806      	ldr	r0, [pc, #24]	; (1ea6c <hal_ticker_instance0_caller_id_get+0x44>)
   1ea52:	f008 fa8c 	bl	26f6e <printk>
   1ea56:	4040      	eors	r0, r0
   1ea58:	f380 8811 	msr	BASEPRI, r0
   1ea5c:	f04f 0003 	mov.w	r0, #3
   1ea60:	df02      	svc	2

	return caller_id;
}
   1ea62:	4620      	mov	r0, r4
   1ea64:	bd10      	pop	{r4, pc}
   1ea66:	bf00      	nop
   1ea68:	000353a6 	.word	0x000353a6
   1ea6c:	0002fa94 	.word	0x0002fa94
   1ea70:	000353a2 	.word	0x000353a2

0001ea74 <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   1ea74:	3801      	subs	r0, #1
{
   1ea76:	b510      	push	{r4, lr}
   1ea78:	461c      	mov	r4, r3
	switch (caller_id) {
   1ea7a:	2804      	cmp	r0, #4
   1ea7c:	d844      	bhi.n	1eb08 <hal_ticker_instance0_sched+0x94>
   1ea7e:	e8df f000 	tbb	[pc, r0]
   1ea82:	1903      	.short	0x1903
   1ea84:	2b22      	.short	0x2b22
   1ea86:	3a          	.byte	0x3a
   1ea87:	00          	.byte	0x00
	case TICKER_CALL_ID_ISR:
		switch (callee_id) {
   1ea88:	2904      	cmp	r1, #4
   1ea8a:	d107      	bne.n	1ea9c <hal_ticker_instance0_sched+0x28>
		{
			static memq_link_t link;
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_job};

			m.param = instance;
   1ea8c:	4b1f      	ldr	r3, [pc, #124]	; (1eb0c <hal_ticker_instance0_sched+0x98>)

			/* TODO: scheduler lock, if preemptive threads used */
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   1ea8e:	2102      	movs	r1, #2
			m.param = instance;
   1ea90:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   1ea92:	2000      	movs	r0, #0

	default:
		LL_ASSERT(0);
		break;
	}
}
   1ea94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1ea98:	f7f9 bad4 	b.w	18044 <mayfly_enqueue>
			LL_ASSERT(0);
   1ea9c:	224e      	movs	r2, #78	; 0x4e
		LL_ASSERT(0);
   1ea9e:	491c      	ldr	r1, [pc, #112]	; (1eb10 <hal_ticker_instance0_sched+0x9c>)
   1eaa0:	481c      	ldr	r0, [pc, #112]	; (1eb14 <hal_ticker_instance0_sched+0xa0>)
   1eaa2:	f008 fa64 	bl	26f6e <printk>
   1eaa6:	4040      	eors	r0, r0
   1eaa8:	f380 8811 	msr	BASEPRI, r0
   1eaac:	f04f 0003 	mov.w	r0, #3
   1eab0:	df02      	svc	2
}
   1eab2:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   1eab4:	2903      	cmp	r1, #3
   1eab6:	d104      	bne.n	1eac2 <hal_ticker_instance0_sched+0x4e>
			m.param = instance;
   1eab8:	4b17      	ldr	r3, [pc, #92]	; (1eb18 <hal_ticker_instance0_sched+0xa4>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1eaba:	2101      	movs	r1, #1
			m.param = instance;
   1eabc:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1eabe:	4608      	mov	r0, r1
   1eac0:	e7e8      	b.n	1ea94 <hal_ticker_instance0_sched+0x20>
			LL_ASSERT(0);
   1eac2:	2265      	movs	r2, #101	; 0x65
   1eac4:	e7eb      	b.n	1ea9e <hal_ticker_instance0_sched+0x2a>
		switch (callee_id) {
   1eac6:	2904      	cmp	r1, #4
   1eac8:	d104      	bne.n	1ead4 <hal_ticker_instance0_sched+0x60>
			m.param = instance;
   1eaca:	4b14      	ldr	r3, [pc, #80]	; (1eb1c <hal_ticker_instance0_sched+0xa8>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1eacc:	2102      	movs	r1, #2
			m.param = instance;
   1eace:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1ead0:	2001      	movs	r0, #1
   1ead2:	e7df      	b.n	1ea94 <hal_ticker_instance0_sched+0x20>
			LL_ASSERT(0);
   1ead4:	227c      	movs	r2, #124	; 0x7c
   1ead6:	e7e2      	b.n	1ea9e <hal_ticker_instance0_sched+0x2a>
		switch (callee_id) {
   1ead8:	2903      	cmp	r1, #3
   1eada:	d003      	beq.n	1eae4 <hal_ticker_instance0_sched+0x70>
   1eadc:	2904      	cmp	r1, #4
   1eade:	d006      	beq.n	1eaee <hal_ticker_instance0_sched+0x7a>
			LL_ASSERT(0);
   1eae0:	22a2      	movs	r2, #162	; 0xa2
   1eae2:	e7dc      	b.n	1ea9e <hal_ticker_instance0_sched+0x2a>
			m.param = instance;
   1eae4:	4b0e      	ldr	r3, [pc, #56]	; (1eb20 <hal_ticker_instance0_sched+0xac>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1eae6:	2101      	movs	r1, #1
			m.param = instance;
   1eae8:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1eaea:	2002      	movs	r0, #2
   1eaec:	e7d2      	b.n	1ea94 <hal_ticker_instance0_sched+0x20>
			m.param = instance;
   1eaee:	4b0d      	ldr	r3, [pc, #52]	; (1eb24 <hal_ticker_instance0_sched+0xb0>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1eaf0:	2102      	movs	r1, #2
			m.param = instance;
   1eaf2:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1eaf4:	e7e3      	b.n	1eabe <hal_ticker_instance0_sched+0x4a>
		switch (callee_id) {
   1eaf6:	2904      	cmp	r1, #4
   1eaf8:	d104      	bne.n	1eb04 <hal_ticker_instance0_sched+0x90>
			m.param = instance;
   1eafa:	4b0b      	ldr	r3, [pc, #44]	; (1eb28 <hal_ticker_instance0_sched+0xb4>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1eafc:	2102      	movs	r1, #2
			m.param = instance;
   1eafe:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1eb00:	2003      	movs	r0, #3
   1eb02:	e7c7      	b.n	1ea94 <hal_ticker_instance0_sched+0x20>
			LL_ASSERT(0);
   1eb04:	22ba      	movs	r2, #186	; 0xba
   1eb06:	e7ca      	b.n	1ea9e <hal_ticker_instance0_sched+0x2a>
		LL_ASSERT(0);
   1eb08:	22c0      	movs	r2, #192	; 0xc0
   1eb0a:	e7c8      	b.n	1ea9e <hal_ticker_instance0_sched+0x2a>
   1eb0c:	20000da8 	.word	0x20000da8
   1eb10:	000353a6 	.word	0x000353a6
   1eb14:	0002fa94 	.word	0x0002fa94
   1eb18:	20000db8 	.word	0x20000db8
   1eb1c:	20000dc8 	.word	0x20000dc8
   1eb20:	20000dd8 	.word	0x20000dd8
   1eb24:	20000de8 	.word	0x20000de8
   1eb28:	20000df8 	.word	0x20000df8

0001eb2c <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1eb2c:	4b02      	ldr	r3, [pc, #8]	; (1eb38 <net_buf_pool_get+0xc>)
   1eb2e:	222c      	movs	r2, #44	; 0x2c
   1eb30:	fb02 3000 	mla	r0, r2, r0, r3
   1eb34:	4770      	bx	lr
   1eb36:	bf00      	nop
   1eb38:	20001380 	.word	0x20001380

0001eb3c <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1eb3c:	7983      	ldrb	r3, [r0, #6]

	return buf - pool->__bufs;
   1eb3e:	4a05      	ldr	r2, [pc, #20]	; (1eb54 <net_buf_id+0x18>)
   1eb40:	212c      	movs	r1, #44	; 0x2c
   1eb42:	fb01 2303 	mla	r3, r1, r3, r2
   1eb46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1eb48:	1ac0      	subs	r0, r0, r3
}
   1eb4a:	4b03      	ldr	r3, [pc, #12]	; (1eb58 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   1eb4c:	10c0      	asrs	r0, r0, #3
}
   1eb4e:	4358      	muls	r0, r3
   1eb50:	4770      	bx	lr
   1eb52:	bf00      	nop
   1eb54:	20001380 	.word	0x20001380
   1eb58:	aaaaaaab 	.word	0xaaaaaaab

0001eb5c <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1eb5c:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1eb5e:	4a0a      	ldr	r2, [pc, #40]	; (1eb88 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1eb60:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1eb62:	242c      	movs	r4, #44	; 0x2c
   1eb64:	fb04 2303 	mla	r3, r4, r3, r2

	*size = MIN(fixed->data_size, *size);
   1eb68:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1eb6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1eb6c:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1eb6e:	6823      	ldr	r3, [r4, #0]
   1eb70:	429a      	cmp	r2, r3
   1eb72:	bf94      	ite	ls
   1eb74:	600a      	strls	r2, [r1, #0]
   1eb76:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1eb78:	f7ff ffe0 	bl	1eb3c <net_buf_id>
   1eb7c:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   1eb80:	fb02 3000 	mla	r0, r2, r0, r3
   1eb84:	bd10      	pop	{r4, pc}
   1eb86:	bf00      	nop
   1eb88:	20001380 	.word	0x20001380

0001eb8c <net_buf_reset>:
{
   1eb8c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf->flags == 0U);
   1eb8e:	7943      	ldrb	r3, [r0, #5]
{
   1eb90:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf->flags == 0U);
   1eb92:	b143      	cbz	r3, 1eba6 <net_buf_reset+0x1a>
   1eb94:	490c      	ldr	r1, [pc, #48]	; (1ebc8 <net_buf_reset+0x3c>)
   1eb96:	480d      	ldr	r0, [pc, #52]	; (1ebcc <net_buf_reset+0x40>)
   1eb98:	224f      	movs	r2, #79	; 0x4f
   1eb9a:	f008 f9e8 	bl	26f6e <printk>
   1eb9e:	214f      	movs	r1, #79	; 0x4f
   1eba0:	4809      	ldr	r0, [pc, #36]	; (1ebc8 <net_buf_reset+0x3c>)
   1eba2:	f008 fc5d 	bl	27460 <assert_post_action>
	__ASSERT_NO_MSG(buf->frags == NULL);
   1eba6:	6823      	ldr	r3, [r4, #0]
   1eba8:	b143      	cbz	r3, 1ebbc <net_buf_reset+0x30>
   1ebaa:	4907      	ldr	r1, [pc, #28]	; (1ebc8 <net_buf_reset+0x3c>)
   1ebac:	4807      	ldr	r0, [pc, #28]	; (1ebcc <net_buf_reset+0x40>)
   1ebae:	2250      	movs	r2, #80	; 0x50
   1ebb0:	f008 f9dd 	bl	26f6e <printk>
   1ebb4:	2150      	movs	r1, #80	; 0x50
   1ebb6:	4804      	ldr	r0, [pc, #16]	; (1ebc8 <net_buf_reset+0x3c>)
   1ebb8:	f008 fc52 	bl	27460 <assert_post_action>
	buf->len  = 0U;
   1ebbc:	2300      	movs	r3, #0
   1ebbe:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
   1ebc0:	6923      	ldr	r3, [r4, #16]
   1ebc2:	60a3      	str	r3, [r4, #8]
}
   1ebc4:	bd10      	pop	{r4, pc}
   1ebc6:	bf00      	nop
   1ebc8:	00035407 	.word	0x00035407
   1ebcc:	0002fa94 	.word	0x0002fa94

0001ebd0 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1ebd0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1ebd4:	4605      	mov	r5, r0
   1ebd6:	9101      	str	r1, [sp, #4]
	uint64_t end = z_timeout_end_calc(timeout);
   1ebd8:	4610      	mov	r0, r2
   1ebda:	4619      	mov	r1, r3
{
   1ebdc:	4616      	mov	r6, r2
   1ebde:	461f      	mov	r7, r3
	uint64_t end = z_timeout_end_calc(timeout);
   1ebe0:	f00e fc32 	bl	2d448 <z_timeout_end_calc>
   1ebe4:	4680      	mov	r8, r0
   1ebe6:	4689      	mov	r9, r1
	struct net_buf *buf;
	unsigned int key;

	__ASSERT_NO_MSG(pool);
   1ebe8:	b945      	cbnz	r5, 1ebfc <net_buf_alloc_len+0x2c>
   1ebea:	4949      	ldr	r1, [pc, #292]	; (1ed10 <net_buf_alloc_len+0x140>)
   1ebec:	4849      	ldr	r0, [pc, #292]	; (1ed14 <net_buf_alloc_len+0x144>)
   1ebee:	22ed      	movs	r2, #237	; 0xed
   1ebf0:	f008 f9bd 	bl	26f6e <printk>
   1ebf4:	21ed      	movs	r1, #237	; 0xed
   1ebf6:	4846      	ldr	r0, [pc, #280]	; (1ed10 <net_buf_alloc_len+0x140>)
   1ebf8:	f008 fc32 	bl	27460 <assert_post_action>
	__asm__ volatile(
   1ebfc:	f04f 0320 	mov.w	r3, #32
   1ec00:	f3ef 8a11 	mrs	sl, BASEPRI
   1ec04:	f383 8811 	msr	BASEPRI, r3
   1ec08:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1ec0c:	8beb      	ldrh	r3, [r5, #30]
   1ec0e:	2b00      	cmp	r3, #0
   1ec10:	d054      	beq.n	1ecbc <net_buf_alloc_len+0xec>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1ec12:	8baa      	ldrh	r2, [r5, #28]
   1ec14:	429a      	cmp	r2, r3
   1ec16:	d93d      	bls.n	1ec94 <net_buf_alloc_len+0xc4>
	return z_impl_k_queue_get(queue, timeout);
   1ec18:	2200      	movs	r2, #0
   1ec1a:	2300      	movs	r3, #0
   1ec1c:	4628      	mov	r0, r5
   1ec1e:	f003 fdbf 	bl	227a0 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1ec22:	4604      	mov	r4, r0
   1ec24:	2800      	cmp	r0, #0
   1ec26:	d035      	beq.n	1ec94 <net_buf_alloc_len+0xc4>
	__asm__ volatile(
   1ec28:	f38a 8811 	msr	BASEPRI, sl
   1ec2c:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1ec30:	9d01      	ldr	r5, [sp, #4]
   1ec32:	2d00      	cmp	r5, #0
   1ec34:	d06a      	beq.n	1ed0c <net_buf_alloc_len+0x13c>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1ec36:	ea56 0307 	orrs.w	r3, r6, r7
   1ec3a:	d010      	beq.n	1ec5e <net_buf_alloc_len+0x8e>
   1ec3c:	1c7b      	adds	r3, r7, #1
   1ec3e:	bf08      	it	eq
   1ec40:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1ec44:	d00b      	beq.n	1ec5e <net_buf_alloc_len+0x8e>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - z_tick_get();
   1ec46:	f005 fc41 	bl	244cc <z_tick_get>
   1ec4a:	ebb8 0600 	subs.w	r6, r8, r0
   1ec4e:	eb69 0701 	sbc.w	r7, r9, r1
   1ec52:	2e00      	cmp	r6, #0
   1ec54:	f177 0300 	sbcs.w	r3, r7, #0
   1ec58:	bfbc      	itt	lt
   1ec5a:	2600      	movlt	r6, #0
   1ec5c:	2700      	movlt	r7, #0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1ec5e:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1ec60:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 1ed18 <net_buf_alloc_len+0x148>
   1ec64:	f04f 092c 	mov.w	r9, #44	; 0x2c
   1ec68:	fb09 8303 	mla	r3, r9, r3, r8
   1ec6c:	4632      	mov	r2, r6
   1ec6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1ec70:	681b      	ldr	r3, [r3, #0]
   1ec72:	a901      	add	r1, sp, #4
   1ec74:	f8d3 a000 	ldr.w	sl, [r3]
   1ec78:	4620      	mov	r0, r4
   1ec7a:	463b      	mov	r3, r7
   1ec7c:	47d0      	blx	sl
   1ec7e:	4606      	mov	r6, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1ec80:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1ec82:	bb58      	cbnz	r0, 1ecdc <net_buf_alloc_len+0x10c>
	k_lifo_put(&pool->free, buf);
   1ec84:	79a0      	ldrb	r0, [r4, #6]
   1ec86:	4621      	mov	r1, r4
   1ec88:	fb00 8009 	mla	r0, r0, r9, r8
   1ec8c:	f00e faf7 	bl	2d27e <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1ec90:	4634      	mov	r4, r6
   1ec92:	e01f      	b.n	1ecd4 <net_buf_alloc_len+0x104>
		uninit_count = pool->uninit_count--;
   1ec94:	8beb      	ldrh	r3, [r5, #30]
   1ec96:	1e5a      	subs	r2, r3, #1
   1ec98:	83ea      	strh	r2, [r5, #30]
   1ec9a:	f38a 8811 	msr	BASEPRI, sl
   1ec9e:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   1eca2:	8bac      	ldrh	r4, [r5, #28]
   1eca4:	1ae4      	subs	r4, r4, r3
   1eca6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1eca8:	2218      	movs	r2, #24
   1ecaa:	fb02 3404 	mla	r4, r2, r4, r3
	return pool - _net_buf_pool_list;
   1ecae:	4b1a      	ldr	r3, [pc, #104]	; (1ed18 <net_buf_alloc_len+0x148>)
   1ecb0:	1aed      	subs	r5, r5, r3
   1ecb2:	4b1a      	ldr	r3, [pc, #104]	; (1ed1c <net_buf_alloc_len+0x14c>)
   1ecb4:	10ad      	asrs	r5, r5, #2
   1ecb6:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   1ecb8:	71a5      	strb	r5, [r4, #6]
		goto success;
   1ecba:	e7b9      	b.n	1ec30 <net_buf_alloc_len+0x60>
   1ecbc:	f38a 8811 	msr	BASEPRI, sl
   1ecc0:	f3bf 8f6f 	isb	sy
   1ecc4:	4632      	mov	r2, r6
   1ecc6:	463b      	mov	r3, r7
   1ecc8:	4628      	mov	r0, r5
   1ecca:	f003 fd69 	bl	227a0 <z_impl_k_queue_get>
	if (!buf) {
   1ecce:	4604      	mov	r4, r0
   1ecd0:	2800      	cmp	r0, #0
   1ecd2:	d1ad      	bne.n	1ec30 <net_buf_alloc_len+0x60>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1ecd4:	4620      	mov	r0, r4
   1ecd6:	b002      	add	sp, #8
   1ecd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		NET_BUF_ASSERT(req_size <= size);
   1ecdc:	9b01      	ldr	r3, [sp, #4]
   1ecde:	429d      	cmp	r5, r3
   1ece0:	d90a      	bls.n	1ecf8 <net_buf_alloc_len+0x128>
   1ece2:	490b      	ldr	r1, [pc, #44]	; (1ed10 <net_buf_alloc_len+0x140>)
   1ece4:	480b      	ldr	r0, [pc, #44]	; (1ed14 <net_buf_alloc_len+0x144>)
   1ece6:	f240 124d 	movw	r2, #333	; 0x14d
   1ecea:	f008 f940 	bl	26f6e <printk>
   1ecee:	f240 114d 	movw	r1, #333	; 0x14d
   1ecf2:	4807      	ldr	r0, [pc, #28]	; (1ed10 <net_buf_alloc_len+0x140>)
   1ecf4:	f008 fbb4 	bl	27460 <assert_post_action>
	buf->frags = NULL;
   1ecf8:	2300      	movs	r3, #0
   1ecfa:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   1ecfc:	2301      	movs	r3, #1
   1ecfe:	80a3      	strh	r3, [r4, #4]
	buf->size  = size;
   1ed00:	9b01      	ldr	r3, [sp, #4]
   1ed02:	81e3      	strh	r3, [r4, #14]
	net_buf_reset(buf);
   1ed04:	4620      	mov	r0, r4
   1ed06:	f7ff ff41 	bl	1eb8c <net_buf_reset>
	return buf;
   1ed0a:	e7e3      	b.n	1ecd4 <net_buf_alloc_len+0x104>
		buf->__buf = NULL;
   1ed0c:	6125      	str	r5, [r4, #16]
   1ed0e:	e7f3      	b.n	1ecf8 <net_buf_alloc_len+0x128>
   1ed10:	00035407 	.word	0x00035407
   1ed14:	0002fa94 	.word	0x0002fa94
   1ed18:	20001380 	.word	0x20001380
   1ed1c:	ba2e8ba3 	.word	0xba2e8ba3

0001ed20 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   1ed20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ed24:	4607      	mov	r7, r0
   1ed26:	f003 fd3b 	bl	227a0 <z_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p", func, line, fifo);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
   1ed2a:	4605      	mov	r5, r0
   1ed2c:	b140      	cbz	r0, 1ed40 <net_buf_get+0x20>
	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
		__ASSERT_NO_MSG(frag->frags);
   1ed2e:	4e12      	ldr	r6, [pc, #72]	; (1ed78 <net_buf_get+0x58>)
   1ed30:	f8df 8048 	ldr.w	r8, [pc, #72]	; 1ed7c <net_buf_get+0x5c>
   1ed34:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1ed36:	7963      	ldrb	r3, [r4, #5]
   1ed38:	f013 0301 	ands.w	r3, r3, #1
   1ed3c:	d103      	bne.n	1ed46 <net_buf_get+0x26>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   1ed3e:	6023      	str	r3, [r4, #0]

	return buf;
}
   1ed40:	4628      	mov	r0, r5
   1ed42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ed46:	2200      	movs	r2, #0
   1ed48:	2300      	movs	r3, #0
   1ed4a:	4638      	mov	r0, r7
   1ed4c:	f003 fd28 	bl	227a0 <z_impl_k_queue_get>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1ed50:	6020      	str	r0, [r4, #0]
		__ASSERT_NO_MSG(frag->frags);
   1ed52:	b950      	cbnz	r0, 1ed6a <net_buf_get+0x4a>
   1ed54:	4631      	mov	r1, r6
   1ed56:	4640      	mov	r0, r8
   1ed58:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
   1ed5c:	f008 f907 	bl	26f6e <printk>
   1ed60:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
   1ed64:	4630      	mov	r0, r6
   1ed66:	f008 fb7b 	bl	27460 <assert_post_action>
		frag->flags &= ~NET_BUF_FRAGS;
   1ed6a:	7963      	ldrb	r3, [r4, #5]
   1ed6c:	f023 0301 	bic.w	r3, r3, #1
   1ed70:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1ed72:	6824      	ldr	r4, [r4, #0]
   1ed74:	e7df      	b.n	1ed36 <net_buf_get+0x16>
   1ed76:	bf00      	nop
   1ed78:	00035407 	.word	0x00035407
   1ed7c:	0002fa94 	.word	0x0002fa94

0001ed80 <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   1ed80:	b538      	push	{r3, r4, r5, lr}
   1ed82:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf);
   1ed84:	4604      	mov	r4, r0
   1ed86:	b950      	cbnz	r0, 1ed9e <net_buf_simple_reserve+0x1e>
   1ed88:	490d      	ldr	r1, [pc, #52]	; (1edc0 <net_buf_simple_reserve+0x40>)
   1ed8a:	480e      	ldr	r0, [pc, #56]	; (1edc4 <net_buf_simple_reserve+0x44>)
   1ed8c:	f240 12bb 	movw	r2, #443	; 0x1bb
   1ed90:	f008 f8ed 	bl	26f6e <printk>
   1ed94:	f240 11bb 	movw	r1, #443	; 0x1bb
   1ed98:	4809      	ldr	r0, [pc, #36]	; (1edc0 <net_buf_simple_reserve+0x40>)
   1ed9a:	f008 fb61 	bl	27460 <assert_post_action>
	__ASSERT_NO_MSG(buf->len == 0U);
   1ed9e:	88a3      	ldrh	r3, [r4, #4]
   1eda0:	b153      	cbz	r3, 1edb8 <net_buf_simple_reserve+0x38>
   1eda2:	4907      	ldr	r1, [pc, #28]	; (1edc0 <net_buf_simple_reserve+0x40>)
   1eda4:	4807      	ldr	r0, [pc, #28]	; (1edc4 <net_buf_simple_reserve+0x44>)
   1eda6:	f44f 72de 	mov.w	r2, #444	; 0x1bc
   1edaa:	f008 f8e0 	bl	26f6e <printk>
   1edae:	f44f 71de 	mov.w	r1, #444	; 0x1bc
   1edb2:	4803      	ldr	r0, [pc, #12]	; (1edc0 <net_buf_simple_reserve+0x40>)
   1edb4:	f008 fb54 	bl	27460 <assert_post_action>
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   1edb8:	68a1      	ldr	r1, [r4, #8]
   1edba:	4429      	add	r1, r5
   1edbc:	6021      	str	r1, [r4, #0]
}
   1edbe:	bd38      	pop	{r3, r4, r5, pc}
   1edc0:	00035407 	.word	0x00035407
   1edc4:	0002fa94 	.word	0x0002fa94

0001edc8 <net_buf_slist_put>:

void net_buf_slist_put(sys_slist_t *list, struct net_buf *buf)
{
   1edc8:	b538      	push	{r3, r4, r5, lr}
   1edca:	460d      	mov	r5, r1
	struct net_buf *tail;
	unsigned int key;

	__ASSERT_NO_MSG(list);
   1edcc:	4604      	mov	r4, r0
   1edce:	b950      	cbnz	r0, 1ede6 <net_buf_slist_put+0x1e>
   1edd0:	4919      	ldr	r1, [pc, #100]	; (1ee38 <net_buf_slist_put+0x70>)
   1edd2:	481a      	ldr	r0, [pc, #104]	; (1ee3c <net_buf_slist_put+0x74>)
   1edd4:	f240 12c7 	movw	r2, #455	; 0x1c7
   1edd8:	f008 f8c9 	bl	26f6e <printk>
   1eddc:	f240 11c7 	movw	r1, #455	; 0x1c7
   1ede0:	4815      	ldr	r0, [pc, #84]	; (1ee38 <net_buf_slist_put+0x70>)
   1ede2:	f008 fb3d 	bl	27460 <assert_post_action>
	__ASSERT_NO_MSG(buf);
   1ede6:	b955      	cbnz	r5, 1edfe <net_buf_slist_put+0x36>
   1ede8:	4913      	ldr	r1, [pc, #76]	; (1ee38 <net_buf_slist_put+0x70>)
   1edea:	4814      	ldr	r0, [pc, #80]	; (1ee3c <net_buf_slist_put+0x74>)
   1edec:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
   1edf0:	f008 f8bd 	bl	26f6e <printk>
   1edf4:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   1edf8:	480f      	ldr	r0, [pc, #60]	; (1ee38 <net_buf_slist_put+0x70>)
   1edfa:	f008 fb31 	bl	27460 <assert_post_action>
{
   1edfe:	462b      	mov	r3, r5

	for (tail = buf; tail->frags; tail = tail->frags) {
   1ee00:	6819      	ldr	r1, [r3, #0]
   1ee02:	b981      	cbnz	r1, 1ee26 <net_buf_slist_put+0x5e>
	__asm__ volatile(
   1ee04:	f04f 0220 	mov.w	r2, #32
   1ee08:	f3ef 8111 	mrs	r1, BASEPRI
   1ee0c:	f382 8811 	msr	BASEPRI, r2
   1ee10:	f3bf 8f6f 	isb	sy
Z_GENLIST_APPEND_LIST(slist, snode)
   1ee14:	6862      	ldr	r2, [r4, #4]
   1ee16:	b962      	cbnz	r2, 1ee32 <net_buf_slist_put+0x6a>
	list->head = node;
   1ee18:	6025      	str	r5, [r4, #0]
	list->tail = node;
   1ee1a:	6063      	str	r3, [r4, #4]
	__asm__ volatile(
   1ee1c:	f381 8811 	msr	BASEPRI, r1
   1ee20:	f3bf 8f6f 	isb	sy
	}

	key = irq_lock();
	sys_slist_append_list(list, &buf->node, &tail->node);
	irq_unlock(key);
}
   1ee24:	bd38      	pop	{r3, r4, r5, pc}
		tail->flags |= NET_BUF_FRAGS;
   1ee26:	795a      	ldrb	r2, [r3, #5]
   1ee28:	f042 0201 	orr.w	r2, r2, #1
   1ee2c:	715a      	strb	r2, [r3, #5]
   1ee2e:	460b      	mov	r3, r1
   1ee30:	e7e6      	b.n	1ee00 <net_buf_slist_put+0x38>
	parent->next = child;
   1ee32:	6015      	str	r5, [r2, #0]
   1ee34:	e7f1      	b.n	1ee1a <net_buf_slist_put+0x52>
   1ee36:	bf00      	nop
   1ee38:	00035407 	.word	0x00035407
   1ee3c:	0002fa94 	.word	0x0002fa94

0001ee40 <net_buf_slist_get>:

struct net_buf *net_buf_slist_get(sys_slist_t *list)
{
   1ee40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct net_buf *buf, *frag;
	unsigned int key;

	__ASSERT_NO_MSG(list);
   1ee44:	4604      	mov	r4, r0
   1ee46:	b950      	cbnz	r0, 1ee5e <net_buf_slist_get+0x1e>
   1ee48:	4929      	ldr	r1, [pc, #164]	; (1eef0 <net_buf_slist_get+0xb0>)
   1ee4a:	482a      	ldr	r0, [pc, #168]	; (1eef4 <net_buf_slist_get+0xb4>)
   1ee4c:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
   1ee50:	f008 f88d 	bl	26f6e <printk>
   1ee54:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
   1ee58:	4825      	ldr	r0, [pc, #148]	; (1eef0 <net_buf_slist_get+0xb0>)
   1ee5a:	f008 fb01 	bl	27460 <assert_post_action>
	__asm__ volatile(
   1ee5e:	f04f 0320 	mov.w	r3, #32
   1ee62:	f3ef 8211 	mrs	r2, BASEPRI
   1ee66:	f383 8811 	msr	BASEPRI, r3
   1ee6a:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   1ee6e:	6826      	ldr	r6, [r4, #0]
Z_GENLIST_GET(slist, snode)
   1ee70:	b12e      	cbz	r6, 1ee7e <net_buf_slist_get+0x3e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1ee72:	6861      	ldr	r1, [r4, #4]
   1ee74:	6833      	ldr	r3, [r6, #0]
	list->head = node;
   1ee76:	6023      	str	r3, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1ee78:	428e      	cmp	r6, r1
	list->tail = node;
   1ee7a:	bf08      	it	eq
   1ee7c:	6063      	streq	r3, [r4, #4]
	__asm__ volatile(
   1ee7e:	f382 8811 	msr	BASEPRI, r2
   1ee82:	f3bf 8f6f 	isb	sy

	key = irq_lock();
	buf = (void *)sys_slist_get(list);
	irq_unlock(key);

	if (!buf) {
   1ee86:	b146      	cbz	r6, 1ee9a <net_buf_slist_get+0x5a>
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
		key = irq_lock();
		frag->frags = (void *)sys_slist_get(list);
		irq_unlock(key);

		__ASSERT_NO_MSG(frag->frags);
   1ee88:	4f19      	ldr	r7, [pc, #100]	; (1eef0 <net_buf_slist_get+0xb0>)
   1ee8a:	f8df 8068 	ldr.w	r8, [pc, #104]	; 1eef4 <net_buf_slist_get+0xb4>
   1ee8e:	4635      	mov	r5, r6
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1ee90:	796b      	ldrb	r3, [r5, #5]
   1ee92:	f013 0301 	ands.w	r3, r3, #1
   1ee96:	d103      	bne.n	1eea0 <net_buf_slist_get+0x60>
		/* The fragments flag is only for list-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   1ee98:	602b      	str	r3, [r5, #0]

	return buf;
}
   1ee9a:	4630      	mov	r0, r6
   1ee9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   1eea0:	f04f 0320 	mov.w	r3, #32
   1eea4:	f3ef 8011 	mrs	r0, BASEPRI
   1eea8:	f383 8811 	msr	BASEPRI, r3
   1eeac:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   1eeb0:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
   1eeb2:	b12b      	cbz	r3, 1eec0 <net_buf_slist_get+0x80>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1eeb4:	6861      	ldr	r1, [r4, #4]
   1eeb6:	681a      	ldr	r2, [r3, #0]
	list->head = node;
   1eeb8:	6022      	str	r2, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1eeba:	428b      	cmp	r3, r1
	list->tail = node;
   1eebc:	bf08      	it	eq
   1eebe:	6062      	streq	r2, [r4, #4]
		frag->frags = (void *)sys_slist_get(list);
   1eec0:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   1eec2:	f380 8811 	msr	BASEPRI, r0
   1eec6:	f3bf 8f6f 	isb	sy
		__ASSERT_NO_MSG(frag->frags);
   1eeca:	682b      	ldr	r3, [r5, #0]
   1eecc:	b953      	cbnz	r3, 1eee4 <net_buf_slist_get+0xa4>
   1eece:	4639      	mov	r1, r7
   1eed0:	4640      	mov	r0, r8
   1eed2:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
   1eed6:	f008 f84a 	bl	26f6e <printk>
   1eeda:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
   1eede:	4638      	mov	r0, r7
   1eee0:	f008 fabe 	bl	27460 <assert_post_action>
		frag->flags &= ~NET_BUF_FRAGS;
   1eee4:	796b      	ldrb	r3, [r5, #5]
   1eee6:	f023 0301 	bic.w	r3, r3, #1
   1eeea:	716b      	strb	r3, [r5, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1eeec:	682d      	ldr	r5, [r5, #0]
   1eeee:	e7cf      	b.n	1ee90 <net_buf_slist_get+0x50>
   1eef0:	00035407 	.word	0x00035407
   1eef4:	0002fa94 	.word	0x0002fa94

0001eef8 <net_buf_put>:

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   1eef8:	b538      	push	{r3, r4, r5, lr}
   1eefa:	460c      	mov	r4, r1
	struct net_buf *tail;

	__ASSERT_NO_MSG(fifo);
   1eefc:	4605      	mov	r5, r0
   1eefe:	b950      	cbnz	r0, 1ef16 <net_buf_put+0x1e>
   1ef00:	4912      	ldr	r1, [pc, #72]	; (1ef4c <net_buf_put+0x54>)
   1ef02:	4813      	ldr	r0, [pc, #76]	; (1ef50 <net_buf_put+0x58>)
   1ef04:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
   1ef08:	f008 f831 	bl	26f6e <printk>
   1ef0c:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
   1ef10:	480e      	ldr	r0, [pc, #56]	; (1ef4c <net_buf_put+0x54>)
   1ef12:	f008 faa5 	bl	27460 <assert_post_action>
	__ASSERT_NO_MSG(buf);
   1ef16:	b954      	cbnz	r4, 1ef2e <net_buf_put+0x36>
   1ef18:	490c      	ldr	r1, [pc, #48]	; (1ef4c <net_buf_put+0x54>)
   1ef1a:	480d      	ldr	r0, [pc, #52]	; (1ef50 <net_buf_put+0x58>)
   1ef1c:	f240 12f9 	movw	r2, #505	; 0x1f9
   1ef20:	f008 f825 	bl	26f6e <printk>
   1ef24:	f240 11f9 	movw	r1, #505	; 0x1f9
   1ef28:	4808      	ldr	r0, [pc, #32]	; (1ef4c <net_buf_put+0x54>)
   1ef2a:	f008 fa99 	bl	27460 <assert_post_action>
{
   1ef2e:	4622      	mov	r2, r4

	for (tail = buf; tail->frags; tail = tail->frags) {
   1ef30:	6811      	ldr	r1, [r2, #0]
   1ef32:	b929      	cbnz	r1, 1ef40 <net_buf_put+0x48>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
   1ef34:	4621      	mov	r1, r4
   1ef36:	4628      	mov	r0, r5
}
   1ef38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_fifo_put_list(fifo, buf, tail);
   1ef3c:	f003 bbdc 	b.w	226f8 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   1ef40:	7953      	ldrb	r3, [r2, #5]
   1ef42:	f043 0301 	orr.w	r3, r3, #1
   1ef46:	7153      	strb	r3, [r2, #5]
   1ef48:	460a      	mov	r2, r1
   1ef4a:	e7f1      	b.n	1ef30 <net_buf_put+0x38>
   1ef4c:	00035407 	.word	0x00035407
   1ef50:	0002fa94 	.word	0x0002fa94

0001ef54 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1ef54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   1ef58:	4604      	mov	r4, r0
   1ef5a:	b328      	cbz	r0, 1efa8 <net_buf_unref+0x54>
   1ef5c:	4d1c      	ldr	r5, [pc, #112]	; (1efd0 <net_buf_unref+0x7c>)
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1ef5e:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   1ef60:	272c      	movs	r7, #44	; 0x2c
		if (--buf->ref > 0) {
   1ef62:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   1ef64:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   1ef68:	3b01      	subs	r3, #1
   1ef6a:	b2db      	uxtb	r3, r3
   1ef6c:	7123      	strb	r3, [r4, #4]
   1ef6e:	b9cb      	cbnz	r3, 1efa4 <net_buf_unref+0x50>
		if (buf->__buf) {
   1ef70:	6921      	ldr	r1, [r4, #16]
   1ef72:	b159      	cbz	r1, 1ef8c <net_buf_unref+0x38>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1ef74:	7963      	ldrb	r3, [r4, #5]
   1ef76:	079b      	lsls	r3, r3, #30
   1ef78:	d407      	bmi.n	1ef8a <net_buf_unref+0x36>
	pool->alloc->cb->unref(buf, data);
   1ef7a:	79a3      	ldrb	r3, [r4, #6]
   1ef7c:	fb07 5303 	mla	r3, r7, r3, r5
   1ef80:	4620      	mov	r0, r4
   1ef82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1ef84:	681b      	ldr	r3, [r3, #0]
   1ef86:	689b      	ldr	r3, [r3, #8]
   1ef88:	4798      	blx	r3
			buf->__buf = NULL;
   1ef8a:	6126      	str	r6, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   1ef8c:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   1ef8e:	60a6      	str	r6, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   1ef90:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   1ef94:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   1ef96:	6a1b      	ldr	r3, [r3, #32]
   1ef98:	b19b      	cbz	r3, 1efc2 <net_buf_unref+0x6e>
			pool->destroy(buf);
   1ef9a:	4620      	mov	r0, r4
   1ef9c:	4798      	blx	r3
	while (buf) {
   1ef9e:	4644      	mov	r4, r8
   1efa0:	2c00      	cmp	r4, #0
   1efa2:	d1de      	bne.n	1ef62 <net_buf_unref+0xe>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1efa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
   1efa8:	490a      	ldr	r1, [pc, #40]	; (1efd4 <net_buf_unref+0x80>)
   1efaa:	480b      	ldr	r0, [pc, #44]	; (1efd8 <net_buf_unref+0x84>)
   1efac:	f44f 7202 	mov.w	r2, #520	; 0x208
   1efb0:	f007 ffdd 	bl	26f6e <printk>
   1efb4:	f44f 7102 	mov.w	r1, #520	; 0x208
   1efb8:	4806      	ldr	r0, [pc, #24]	; (1efd4 <net_buf_unref+0x80>)
}
   1efba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   1efbe:	f008 ba4f 	b.w	27460 <assert_post_action>
   1efc2:	4621      	mov	r1, r4
   1efc4:	fb00 5007 	mla	r0, r0, r7, r5
   1efc8:	f00e f959 	bl	2d27e <k_queue_prepend>
   1efcc:	e7e7      	b.n	1ef9e <net_buf_unref+0x4a>
   1efce:	bf00      	nop
   1efd0:	20001380 	.word	0x20001380
   1efd4:	00035407 	.word	0x00035407
   1efd8:	0002fa94 	.word	0x0002fa94

0001efdc <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
   1efdc:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   1efde:	4604      	mov	r4, r0
   1efe0:	b950      	cbnz	r0, 1eff8 <net_buf_ref+0x1c>
   1efe2:	4908      	ldr	r1, [pc, #32]	; (1f004 <net_buf_ref+0x28>)
   1efe4:	4808      	ldr	r0, [pc, #32]	; (1f008 <net_buf_ref+0x2c>)
   1efe6:	f240 2237 	movw	r2, #567	; 0x237
   1efea:	f007 ffc0 	bl	26f6e <printk>
   1efee:	f240 2137 	movw	r1, #567	; 0x237
   1eff2:	4804      	ldr	r0, [pc, #16]	; (1f004 <net_buf_ref+0x28>)
   1eff4:	f008 fa34 	bl	27460 <assert_post_action>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1eff8:	7923      	ldrb	r3, [r4, #4]
   1effa:	3301      	adds	r3, #1
   1effc:	7123      	strb	r3, [r4, #4]
	return buf;
}
   1effe:	4620      	mov	r0, r4
   1f000:	bd10      	pop	{r4, pc}
   1f002:	bf00      	nop
   1f004:	00035407 	.word	0x00035407
   1f008:	0002fa94 	.word	0x0002fa94

0001f00c <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   1f00c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   1f00e:	4604      	mov	r4, r0
   1f010:	b950      	cbnz	r0, 1f028 <net_buf_frag_last+0x1c>
   1f012:	4908      	ldr	r1, [pc, #32]	; (1f034 <net_buf_frag_last+0x28>)
   1f014:	4808      	ldr	r0, [pc, #32]	; (1f038 <net_buf_frag_last+0x2c>)
   1f016:	f44f 721d 	mov.w	r2, #628	; 0x274
   1f01a:	f007 ffa8 	bl	26f6e <printk>
   1f01e:	f44f 711d 	mov.w	r1, #628	; 0x274
   1f022:	4804      	ldr	r0, [pc, #16]	; (1f034 <net_buf_frag_last+0x28>)
   1f024:	f008 fa1c 	bl	27460 <assert_post_action>

	while (buf->frags) {
   1f028:	6823      	ldr	r3, [r4, #0]
   1f02a:	b90b      	cbnz	r3, 1f030 <net_buf_frag_last+0x24>
		buf = buf->frags;
	}

	return buf;
}
   1f02c:	4620      	mov	r0, r4
   1f02e:	bd10      	pop	{r4, pc}
   1f030:	461c      	mov	r4, r3
   1f032:	e7f9      	b.n	1f028 <net_buf_frag_last+0x1c>
   1f034:	00035407 	.word	0x00035407
   1f038:	0002fa94 	.word	0x0002fa94

0001f03c <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   1f03c:	b538      	push	{r3, r4, r5, lr}
   1f03e:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
   1f040:	4604      	mov	r4, r0
   1f042:	b950      	cbnz	r0, 1f05a <net_buf_frag_insert+0x1e>
   1f044:	490f      	ldr	r1, [pc, #60]	; (1f084 <net_buf_frag_insert+0x48>)
   1f046:	4810      	ldr	r0, [pc, #64]	; (1f088 <net_buf_frag_insert+0x4c>)
   1f048:	f240 227f 	movw	r2, #639	; 0x27f
   1f04c:	f007 ff8f 	bl	26f6e <printk>
   1f050:	f240 217f 	movw	r1, #639	; 0x27f
   1f054:	480b      	ldr	r0, [pc, #44]	; (1f084 <net_buf_frag_insert+0x48>)
   1f056:	f008 fa03 	bl	27460 <assert_post_action>
	__ASSERT_NO_MSG(frag);
   1f05a:	b955      	cbnz	r5, 1f072 <net_buf_frag_insert+0x36>
   1f05c:	4909      	ldr	r1, [pc, #36]	; (1f084 <net_buf_frag_insert+0x48>)
   1f05e:	480a      	ldr	r0, [pc, #40]	; (1f088 <net_buf_frag_insert+0x4c>)
   1f060:	f44f 7220 	mov.w	r2, #640	; 0x280
   1f064:	f007 ff83 	bl	26f6e <printk>
   1f068:	f44f 7120 	mov.w	r1, #640	; 0x280
   1f06c:	4805      	ldr	r0, [pc, #20]	; (1f084 <net_buf_frag_insert+0x48>)
   1f06e:	f008 f9f7 	bl	27460 <assert_post_action>

	if (parent->frags) {
   1f072:	6823      	ldr	r3, [r4, #0]
   1f074:	b123      	cbz	r3, 1f080 <net_buf_frag_insert+0x44>
		net_buf_frag_last(frag)->frags = parent->frags;
   1f076:	4628      	mov	r0, r5
   1f078:	f7ff ffc8 	bl	1f00c <net_buf_frag_last>
   1f07c:	6823      	ldr	r3, [r4, #0]
   1f07e:	6003      	str	r3, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1f080:	6025      	str	r5, [r4, #0]
}
   1f082:	bd38      	pop	{r3, r4, r5, pc}
   1f084:	00035407 	.word	0x00035407
   1f088:	0002fa94 	.word	0x0002fa94

0001f08c <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1f08c:	b538      	push	{r3, r4, r5, lr}
   1f08e:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(frag);
   1f090:	460d      	mov	r5, r1
   1f092:	b951      	cbnz	r1, 1f0aa <net_buf_frag_add+0x1e>
   1f094:	490c      	ldr	r1, [pc, #48]	; (1f0c8 <net_buf_frag_add+0x3c>)
   1f096:	480d      	ldr	r0, [pc, #52]	; (1f0cc <net_buf_frag_add+0x40>)
   1f098:	f240 228b 	movw	r2, #651	; 0x28b
   1f09c:	f007 ff67 	bl	26f6e <printk>
   1f0a0:	f240 218b 	movw	r1, #651	; 0x28b
   1f0a4:	4808      	ldr	r0, [pc, #32]	; (1f0c8 <net_buf_frag_add+0x3c>)
   1f0a6:	f008 f9db 	bl	27460 <assert_post_action>

	if (!head) {
   1f0aa:	b924      	cbnz	r4, 1f0b6 <net_buf_frag_add+0x2a>
		return net_buf_ref(frag);
   1f0ac:	4628      	mov	r0, r5
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   1f0ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_buf_ref(frag);
   1f0b2:	f7ff bf93 	b.w	1efdc <net_buf_ref>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1f0b6:	4620      	mov	r0, r4
   1f0b8:	f7ff ffa8 	bl	1f00c <net_buf_frag_last>
   1f0bc:	4629      	mov	r1, r5
   1f0be:	f7ff ffbd 	bl	1f03c <net_buf_frag_insert>
}
   1f0c2:	4620      	mov	r0, r4
   1f0c4:	bd38      	pop	{r3, r4, r5, pc}
   1f0c6:	bf00      	nop
   1f0c8:	00035407 	.word	0x00035407
   1f0cc:	0002fa94 	.word	0x0002fa94

0001f0d0 <net_buf_frag_del>:
				       struct net_buf *frag,
				       const char *func, int line)
#else
struct net_buf *net_buf_frag_del(struct net_buf *parent, struct net_buf *frag)
#endif
{
   1f0d0:	b538      	push	{r3, r4, r5, lr}
   1f0d2:	4605      	mov	r5, r0
	struct net_buf *next_frag;

	__ASSERT_NO_MSG(frag);
   1f0d4:	460c      	mov	r4, r1
   1f0d6:	b951      	cbnz	r1, 1f0ee <net_buf_frag_del+0x1e>
   1f0d8:	4918      	ldr	r1, [pc, #96]	; (1f13c <net_buf_frag_del+0x6c>)
   1f0da:	4819      	ldr	r0, [pc, #100]	; (1f140 <net_buf_frag_del+0x70>)
   1f0dc:	f44f 7228 	mov.w	r2, #672	; 0x2a0
   1f0e0:	f007 ff45 	bl	26f6e <printk>
   1f0e4:	f44f 7128 	mov.w	r1, #672	; 0x2a0
   1f0e8:	4814      	ldr	r0, [pc, #80]	; (1f13c <net_buf_frag_del+0x6c>)
   1f0ea:	f008 f9b9 	bl	27460 <assert_post_action>

	if (parent) {
   1f0ee:	b1e5      	cbz	r5, 1f12a <net_buf_frag_del+0x5a>
		__ASSERT_NO_MSG(parent->frags);
   1f0f0:	682b      	ldr	r3, [r5, #0]
   1f0f2:	b953      	cbnz	r3, 1f10a <net_buf_frag_del+0x3a>
   1f0f4:	4911      	ldr	r1, [pc, #68]	; (1f13c <net_buf_frag_del+0x6c>)
   1f0f6:	4812      	ldr	r0, [pc, #72]	; (1f140 <net_buf_frag_del+0x70>)
   1f0f8:	f240 22a3 	movw	r2, #675	; 0x2a3
   1f0fc:	f007 ff37 	bl	26f6e <printk>
   1f100:	f240 21a3 	movw	r1, #675	; 0x2a3
   1f104:	480d      	ldr	r0, [pc, #52]	; (1f13c <net_buf_frag_del+0x6c>)
   1f106:	f008 f9ab 	bl	27460 <assert_post_action>
		__ASSERT_NO_MSG(parent->frags == frag);
   1f10a:	682b      	ldr	r3, [r5, #0]
   1f10c:	42a3      	cmp	r3, r4
   1f10e:	d00a      	beq.n	1f126 <net_buf_frag_del+0x56>
   1f110:	490a      	ldr	r1, [pc, #40]	; (1f13c <net_buf_frag_del+0x6c>)
   1f112:	480b      	ldr	r0, [pc, #44]	; (1f140 <net_buf_frag_del+0x70>)
   1f114:	f44f 7229 	mov.w	r2, #676	; 0x2a4
   1f118:	f007 ff29 	bl	26f6e <printk>
   1f11c:	f44f 7129 	mov.w	r1, #676	; 0x2a4
   1f120:	4806      	ldr	r0, [pc, #24]	; (1f13c <net_buf_frag_del+0x6c>)
   1f122:	f008 f99d 	bl	27460 <assert_post_action>
		parent->frags = frag->frags;
   1f126:	6823      	ldr	r3, [r4, #0]
   1f128:	602b      	str	r3, [r5, #0]
	}

	next_frag = frag->frags;
   1f12a:	6825      	ldr	r5, [r4, #0]

	frag->frags = NULL;
   1f12c:	2300      	movs	r3, #0

#if defined(CONFIG_NET_BUF_LOG)
	net_buf_unref_debug(frag, func, line);
#else
	net_buf_unref(frag);
   1f12e:	4620      	mov	r0, r4
	frag->frags = NULL;
   1f130:	6023      	str	r3, [r4, #0]
	net_buf_unref(frag);
   1f132:	f7ff ff0f 	bl	1ef54 <net_buf_unref>
#endif

	return next_frag;
}
   1f136:	4628      	mov	r0, r5
   1f138:	bd38      	pop	{r3, r4, r5, pc}
   1f13a:	bf00      	nop
   1f13c:	00035407 	.word	0x00035407
   1f140:	0002fa94 	.word	0x0002fa94

0001f144 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   1f144:	b538      	push	{r3, r4, r5, lr}
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1f146:	6882      	ldr	r2, [r0, #8]
   1f148:	6803      	ldr	r3, [r0, #0]
   1f14a:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   1f14c:	4299      	cmp	r1, r3
{
   1f14e:	4604      	mov	r4, r0
   1f150:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   1f152:	d90a      	bls.n	1f16a <net_buf_simple_push+0x26>
   1f154:	4908      	ldr	r1, [pc, #32]	; (1f178 <net_buf_simple_push+0x34>)
   1f156:	4809      	ldr	r0, [pc, #36]	; (1f17c <net_buf_simple_push+0x38>)
   1f158:	f240 4204 	movw	r2, #1028	; 0x404
   1f15c:	f007 ff07 	bl	26f6e <printk>
   1f160:	f240 4104 	movw	r1, #1028	; 0x404
   1f164:	4804      	ldr	r0, [pc, #16]	; (1f178 <net_buf_simple_push+0x34>)
   1f166:	f008 f97b 	bl	27460 <assert_post_action>
	buf->data -= len;
   1f16a:	6820      	ldr	r0, [r4, #0]
	buf->len += len;
   1f16c:	88a3      	ldrh	r3, [r4, #4]
	buf->data -= len;
   1f16e:	1b40      	subs	r0, r0, r5
	buf->len += len;
   1f170:	441d      	add	r5, r3
	buf->data -= len;
   1f172:	6020      	str	r0, [r4, #0]
	buf->len += len;
   1f174:	80a5      	strh	r5, [r4, #4]
}
   1f176:	bd38      	pop	{r3, r4, r5, pc}
   1f178:	00035407 	.word	0x00035407
   1f17c:	0002fa94 	.word	0x0002fa94

0001f180 <net_buf_simple_pull>:
{
   1f180:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   1f182:	8883      	ldrh	r3, [r0, #4]
   1f184:	428b      	cmp	r3, r1
{
   1f186:	4604      	mov	r4, r0
   1f188:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf->len >= len);
   1f18a:	d20a      	bcs.n	1f1a2 <net_buf_simple_pull+0x22>
   1f18c:	4908      	ldr	r1, [pc, #32]	; (1f1b0 <net_buf_simple_pull+0x30>)
   1f18e:	4809      	ldr	r0, [pc, #36]	; (1f1b4 <net_buf_simple_pull+0x34>)
   1f190:	f240 4264 	movw	r2, #1124	; 0x464
   1f194:	f007 feeb 	bl	26f6e <printk>
   1f198:	f240 4164 	movw	r1, #1124	; 0x464
   1f19c:	4804      	ldr	r0, [pc, #16]	; (1f1b0 <net_buf_simple_pull+0x30>)
   1f19e:	f008 f95f 	bl	27460 <assert_post_action>
	buf->len -= len;
   1f1a2:	88a3      	ldrh	r3, [r4, #4]
	return buf->data += len;
   1f1a4:	6820      	ldr	r0, [r4, #0]
	buf->len -= len;
   1f1a6:	1b5b      	subs	r3, r3, r5
	return buf->data += len;
   1f1a8:	4428      	add	r0, r5
	buf->len -= len;
   1f1aa:	80a3      	strh	r3, [r4, #4]
	return buf->data += len;
   1f1ac:	6020      	str	r0, [r4, #0]
}
   1f1ae:	bd38      	pop	{r3, r4, r5, pc}
   1f1b0:	00035407 	.word	0x00035407
   1f1b4:	0002fa94 	.word	0x0002fa94

0001f1b8 <net_buf_simple_pull_mem>:
	__ASSERT_NO_MSG(buf->len >= len);
   1f1b8:	8883      	ldrh	r3, [r0, #4]
   1f1ba:	428b      	cmp	r3, r1
{
   1f1bc:	b570      	push	{r4, r5, r6, lr}
   1f1be:	4604      	mov	r4, r0
   1f1c0:	460d      	mov	r5, r1
	void *data = buf->data;
   1f1c2:	6806      	ldr	r6, [r0, #0]
	__ASSERT_NO_MSG(buf->len >= len);
   1f1c4:	d20a      	bcs.n	1f1dc <net_buf_simple_pull_mem+0x24>
   1f1c6:	4909      	ldr	r1, [pc, #36]	; (1f1ec <net_buf_simple_pull_mem+0x34>)
   1f1c8:	4809      	ldr	r0, [pc, #36]	; (1f1f0 <net_buf_simple_pull_mem+0x38>)
   1f1ca:	f44f 628e 	mov.w	r2, #1136	; 0x470
   1f1ce:	f007 fece 	bl	26f6e <printk>
   1f1d2:	f44f 618e 	mov.w	r1, #1136	; 0x470
   1f1d6:	4805      	ldr	r0, [pc, #20]	; (1f1ec <net_buf_simple_pull_mem+0x34>)
   1f1d8:	f008 f942 	bl	27460 <assert_post_action>
	buf->len -= len;
   1f1dc:	88a3      	ldrh	r3, [r4, #4]
	buf->data += len;
   1f1de:	6821      	ldr	r1, [r4, #0]
	buf->len -= len;
   1f1e0:	1b5b      	subs	r3, r3, r5
	buf->data += len;
   1f1e2:	4429      	add	r1, r5
	buf->len -= len;
   1f1e4:	80a3      	strh	r3, [r4, #4]
	buf->data += len;
   1f1e6:	6021      	str	r1, [r4, #0]
}
   1f1e8:	4630      	mov	r0, r6
   1f1ea:	bd70      	pop	{r4, r5, r6, pc}
   1f1ec:	00035407 	.word	0x00035407
   1f1f0:	0002fa94 	.word	0x0002fa94

0001f1f4 <net_buf_simple_add>:
{
   1f1f4:	b570      	push	{r4, r5, r6, lr}
	return buf->data + buf->len;
   1f1f6:	6803      	ldr	r3, [r0, #0]
   1f1f8:	8886      	ldrh	r6, [r0, #4]
   1f1fa:	4604      	mov	r4, r0
   1f1fc:	460d      	mov	r5, r1
   1f1fe:	441e      	add	r6, r3
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   1f200:	f00d fbe7 	bl	2c9d2 <net_buf_simple_tailroom>
   1f204:	4288      	cmp	r0, r1
   1f206:	d20a      	bcs.n	1f21e <net_buf_simple_add+0x2a>
   1f208:	4907      	ldr	r1, [pc, #28]	; (1f228 <net_buf_simple_add+0x34>)
   1f20a:	4808      	ldr	r0, [pc, #32]	; (1f22c <net_buf_simple_add+0x38>)
   1f20c:	f240 3215 	movw	r2, #789	; 0x315
   1f210:	f007 fead 	bl	26f6e <printk>
   1f214:	f240 3115 	movw	r1, #789	; 0x315
   1f218:	4803      	ldr	r0, [pc, #12]	; (1f228 <net_buf_simple_add+0x34>)
   1f21a:	f008 f921 	bl	27460 <assert_post_action>
	buf->len += len;
   1f21e:	88a3      	ldrh	r3, [r4, #4]
   1f220:	441d      	add	r5, r3
   1f222:	80a5      	strh	r5, [r4, #4]
}
   1f224:	4630      	mov	r0, r6
   1f226:	bd70      	pop	{r4, r5, r6, pc}
   1f228:	00035407 	.word	0x00035407
   1f22c:	0002fa94 	.word	0x0002fa94

0001f230 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   1f230:	b570      	push	{r4, r5, r6, lr}
   1f232:	4616      	mov	r6, r2
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1f234:	68c4      	ldr	r4, [r0, #12]
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   1f236:	460d      	mov	r5, r1
   1f238:	b941      	cbnz	r1, 1f24c <gpio_nrfx_manage_callback+0x1c>
   1f23a:	491e      	ldr	r1, [pc, #120]	; (1f2b4 <gpio_nrfx_manage_callback+0x84>)
   1f23c:	481e      	ldr	r0, [pc, #120]	; (1f2b8 <gpio_nrfx_manage_callback+0x88>)
   1f23e:	2224      	movs	r2, #36	; 0x24
   1f240:	f007 fe95 	bl	26f6e <printk>
   1f244:	2124      	movs	r1, #36	; 0x24
   1f246:	481b      	ldr	r0, [pc, #108]	; (1f2b4 <gpio_nrfx_manage_callback+0x84>)
   1f248:	f008 f90a 	bl	27460 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   1f24c:	686b      	ldr	r3, [r5, #4]
   1f24e:	b943      	cbnz	r3, 1f262 <gpio_nrfx_manage_callback+0x32>
   1f250:	4918      	ldr	r1, [pc, #96]	; (1f2b4 <gpio_nrfx_manage_callback+0x84>)
   1f252:	4819      	ldr	r0, [pc, #100]	; (1f2b8 <gpio_nrfx_manage_callback+0x88>)
   1f254:	2225      	movs	r2, #37	; 0x25
   1f256:	f007 fe8a 	bl	26f6e <printk>
   1f25a:	2125      	movs	r1, #37	; 0x25
   1f25c:	4815      	ldr	r0, [pc, #84]	; (1f2b4 <gpio_nrfx_manage_callback+0x84>)
   1f25e:	f008 f8ff 	bl	27460 <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
   1f262:	6863      	ldr	r3, [r4, #4]

	if (!sys_slist_is_empty(callbacks)) {
   1f264:	b15b      	cbz	r3, 1f27e <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f266:	2200      	movs	r2, #0
   1f268:	429d      	cmp	r5, r3
   1f26a:	d113      	bne.n	1f294 <gpio_nrfx_manage_callback+0x64>
Z_GENLIST_REMOVE(slist, snode)
   1f26c:	682b      	ldr	r3, [r5, #0]
   1f26e:	b95a      	cbnz	r2, 1f288 <gpio_nrfx_manage_callback+0x58>
   1f270:	68a2      	ldr	r2, [r4, #8]
	list->head = node;
   1f272:	6063      	str	r3, [r4, #4]
Z_GENLIST_REMOVE(slist, snode)
   1f274:	4295      	cmp	r5, r2
   1f276:	d100      	bne.n	1f27a <gpio_nrfx_manage_callback+0x4a>
	list->tail = node;
   1f278:	60a3      	str	r3, [r4, #8]
	parent->next = child;
   1f27a:	2300      	movs	r3, #0
   1f27c:	602b      	str	r3, [r5, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   1f27e:	b976      	cbnz	r6, 1f29e <gpio_nrfx_manage_callback+0x6e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   1f280:	2000      	movs	r0, #0
				     callback, set);
}
   1f282:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f284:	460b      	mov	r3, r1
   1f286:	e7ef      	b.n	1f268 <gpio_nrfx_manage_callback+0x38>
	parent->next = child;
   1f288:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1f28a:	68a3      	ldr	r3, [r4, #8]
   1f28c:	429d      	cmp	r5, r3
	list->tail = node;
   1f28e:	bf08      	it	eq
   1f290:	60a2      	streq	r2, [r4, #8]
   1f292:	e7f2      	b.n	1f27a <gpio_nrfx_manage_callback+0x4a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1f294:	6819      	ldr	r1, [r3, #0]
	return node->next;
   1f296:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f298:	2900      	cmp	r1, #0
   1f29a:	d1f3      	bne.n	1f284 <gpio_nrfx_manage_callback+0x54>
			if (!set) {
   1f29c:	b13e      	cbz	r6, 1f2ae <gpio_nrfx_manage_callback+0x7e>
Z_GENLIST_PREPEND(slist, snode)
   1f29e:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   1f2a0:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   1f2a2:	68a0      	ldr	r0, [r4, #8]
	list->head = node;
   1f2a4:	6065      	str	r5, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   1f2a6:	2800      	cmp	r0, #0
   1f2a8:	d1ea      	bne.n	1f280 <gpio_nrfx_manage_callback+0x50>
	list->tail = node;
   1f2aa:	60a5      	str	r5, [r4, #8]
   1f2ac:	e7e9      	b.n	1f282 <gpio_nrfx_manage_callback+0x52>
				return -EINVAL;
   1f2ae:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1f2b2:	e7e6      	b.n	1f282 <gpio_nrfx_manage_callback+0x52>
   1f2b4:	00035433 	.word	0x00035433
   1f2b8:	0002fa94 	.word	0x0002fa94

0001f2bc <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
   1f2bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1f2c0:	6804      	ldr	r4, [r0, #0]
{
   1f2c2:	4688      	mov	r8, r1
   1f2c4:	4616      	mov	r6, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1f2c6:	b1dc      	cbz	r4, 1f300 <gpio_fire_callbacks+0x44>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1f2c8:	6825      	ldr	r5, [r4, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
   1f2ca:	4f0e      	ldr	r7, [pc, #56]	; (1f304 <gpio_fire_callbacks+0x48>)
   1f2cc:	f8df 9038 	ldr.w	r9, [pc, #56]	; 1f308 <gpio_fire_callbacks+0x4c>
		if (cb->pin_mask & pins) {
   1f2d0:	68a3      	ldr	r3, [r4, #8]
   1f2d2:	421e      	tst	r6, r3
   1f2d4:	d010      	beq.n	1f2f8 <gpio_fire_callbacks+0x3c>
			__ASSERT(cb->handler, "No callback handler!");
   1f2d6:	6863      	ldr	r3, [r4, #4]
   1f2d8:	b943      	cbnz	r3, 1f2ec <gpio_fire_callbacks+0x30>
   1f2da:	4639      	mov	r1, r7
   1f2dc:	4648      	mov	r0, r9
   1f2de:	2245      	movs	r2, #69	; 0x45
   1f2e0:	f007 fe45 	bl	26f6e <printk>
   1f2e4:	2145      	movs	r1, #69	; 0x45
   1f2e6:	4638      	mov	r0, r7
   1f2e8:	f008 f8ba 	bl	27460 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
   1f2ec:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   1f2f0:	4621      	mov	r1, r4
   1f2f2:	4032      	ands	r2, r6
   1f2f4:	4640      	mov	r0, r8
   1f2f6:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1f2f8:	b115      	cbz	r5, 1f300 <gpio_fire_callbacks+0x44>
   1f2fa:	462c      	mov	r4, r5
   1f2fc:	682d      	ldr	r5, [r5, #0]
   1f2fe:	e7e7      	b.n	1f2d0 <gpio_fire_callbacks+0x14>
		}
	}
}
   1f300:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1f304:	00035433 	.word	0x00035433
   1f308:	0002fa94 	.word	0x0002fa94

0001f30c <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1f30c:	6802      	ldr	r2, [r0, #0]
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   1f30e:	0953      	lsrs	r3, r2, #5
{
   1f310:	b510      	push	{r4, lr}
   1f312:	4604      	mov	r4, r0
    switch (port)
   1f314:	d02a      	beq.n	1f36c <nrf_gpio_pin_port_decode+0x60>
   1f316:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
   1f318:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1f31c:	bf18      	it	ne
   1f31e:	2300      	movne	r3, #0
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
   1f320:	f002 021f 	and.w	r2, r2, #31

    return (mask & (1UL << pin_number)) ? true : false;
   1f324:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1f326:	07db      	lsls	r3, r3, #31
   1f328:	d40a      	bmi.n	1f340 <nrf_gpio_pin_port_decode+0x34>
   1f32a:	4913      	ldr	r1, [pc, #76]	; (1f378 <nrf_gpio_pin_port_decode+0x6c>)
   1f32c:	4813      	ldr	r0, [pc, #76]	; (1f37c <nrf_gpio_pin_port_decode+0x70>)
   1f32e:	f240 221a 	movw	r2, #538	; 0x21a
   1f332:	f007 fe1c 	bl	26f6e <printk>
   1f336:	f240 211a 	movw	r1, #538	; 0x21a
   1f33a:	480f      	ldr	r0, [pc, #60]	; (1f378 <nrf_gpio_pin_port_decode+0x6c>)
   1f33c:	f008 f890 	bl	27460 <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
   1f340:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   1f342:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1f346:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   1f348:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1f34a:	d00c      	beq.n	1f366 <nrf_gpio_pin_port_decode+0x5a>
   1f34c:	2b01      	cmp	r3, #1
   1f34e:	d010      	beq.n	1f372 <nrf_gpio_pin_port_decode+0x66>
            NRFX_ASSERT(0);
   1f350:	4909      	ldr	r1, [pc, #36]	; (1f378 <nrf_gpio_pin_port_decode+0x6c>)
   1f352:	480a      	ldr	r0, [pc, #40]	; (1f37c <nrf_gpio_pin_port_decode+0x70>)
   1f354:	f240 221f 	movw	r2, #543	; 0x21f
   1f358:	f007 fe09 	bl	26f6e <printk>
   1f35c:	f240 211f 	movw	r1, #543	; 0x21f
   1f360:	4805      	ldr	r0, [pc, #20]	; (1f378 <nrf_gpio_pin_port_decode+0x6c>)
   1f362:	f008 f87d 	bl	27460 <assert_post_action>
        case 0: return NRF_P0;
   1f366:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
   1f36a:	bd10      	pop	{r4, pc}
            mask = P0_FEATURE_PINS_PRESENT;
   1f36c:	f04f 33ff 	mov.w	r3, #4294967295
   1f370:	e7d6      	b.n	1f320 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
   1f372:	4803      	ldr	r0, [pc, #12]	; (1f380 <nrf_gpio_pin_port_decode+0x74>)
   1f374:	e7f9      	b.n	1f36a <nrf_gpio_pin_port_decode+0x5e>
   1f376:	bf00      	nop
   1f378:	00035460 	.word	0x00035460
   1f37c:	0002fa94 	.word	0x0002fa94
   1f380:	50000300 	.word	0x50000300

0001f384 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1f384:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   1f386:	4b09      	ldr	r3, [pc, #36]	; (1f3ac <gpio_nrfx_init+0x28>)
   1f388:	781a      	ldrb	r2, [r3, #0]
   1f38a:	b96a      	cbnz	r2, 1f3a8 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   1f38c:	2101      	movs	r1, #1
   1f38e:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1f390:	2006      	movs	r0, #6
   1f392:	2105      	movs	r1, #5
   1f394:	f7e7 fcdc 	bl	6d50 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   1f398:	2006      	movs	r0, #6
   1f39a:	f7e7 fca7 	bl	6cec <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1f39e:	4b04      	ldr	r3, [pc, #16]	; (1f3b0 <gpio_nrfx_init+0x2c>)
   1f3a0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1f3a4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   1f3a8:	2000      	movs	r0, #0
   1f3aa:	bd08      	pop	{r3, pc}
   1f3ac:	2000488a 	.word	0x2000488a
   1f3b0:	40006000 	.word	0x40006000

0001f3b4 <gpio_nrfx_pin_interrupt_configure>:
	if ((mode == GPIO_INT_MODE_EDGE) &&
   1f3b4:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
{
   1f3b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1f3bc:	4680      	mov	r8, r0
   1f3be:	460e      	mov	r6, r1
   1f3c0:	4617      	mov	r7, r2
   1f3c2:	4699      	mov	r9, r3
	struct gpio_nrfx_data *data = get_port_data(port);
   1f3c4:	68c4      	ldr	r4, [r0, #12]
	return port->config;
   1f3c6:	f001 051f 	and.w	r5, r1, #31
	if ((mode == GPIO_INT_MODE_EDGE) &&
   1f3ca:	f040 80a6 	bne.w	1f51a <gpio_nrfx_pin_interrupt_configure+0x166>
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1f3ce:	6843      	ldr	r3, [r0, #4]
   1f3d0:	7a1b      	ldrb	r3, [r3, #8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f3d2:	a801      	add	r0, sp, #4
   1f3d4:	ea45 1343 	orr.w	r3, r5, r3, lsl #5
   1f3d8:	9301      	str	r3, [sp, #4]
   1f3da:	f7ff ff97 	bl	1f30c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1f3de:	9b01      	ldr	r3, [sp, #4]
   1f3e0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1f3e4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if ((mode == GPIO_INT_MODE_EDGE) &&
   1f3e8:	07d8      	lsls	r0, r3, #31
   1f3ea:	f100 80b7 	bmi.w	1f55c <gpio_nrfx_pin_interrupt_configure+0x1a8>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1f3ee:	2101      	movs	r1, #1
   1f3f0:	68e3      	ldr	r3, [r4, #12]
   1f3f2:	40b1      	lsls	r1, r6
   1f3f4:	4319      	orrs	r1, r3
   1f3f6:	6963      	ldr	r3, [r4, #20]
   1f3f8:	60e1      	str	r1, [r4, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1f3fa:	2101      	movs	r1, #1
   1f3fc:	40b1      	lsls	r1, r6
   1f3fe:	f5b7 3fa0 	cmp.w	r7, #81920	; 0x14000
   1f402:	bf0c      	ite	eq
   1f404:	430b      	orreq	r3, r1
   1f406:	438b      	bicne	r3, r1
   1f408:	6163      	str	r3, [r4, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   1f40a:	69a3      	ldr	r3, [r4, #24]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   1f40c:	4a55      	ldr	r2, [pc, #340]	; (1f564 <gpio_nrfx_pin_interrupt_configure+0x1b0>)
	struct gpio_nrfx_data *data = get_port_data(port);
   1f40e:	f8d8 700c 	ldr.w	r7, [r8, #12]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   1f412:	f5b9 2fc0 	cmp.w	r9, #393216	; 0x60000
   1f416:	bf0c      	ite	eq
   1f418:	430b      	orreq	r3, r1
   1f41a:	438b      	bicne	r3, r1
   1f41c:	61a3      	str	r3, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   1f41e:	6923      	ldr	r3, [r4, #16]
   1f420:	f5b9 2f80 	cmp.w	r9, #262144	; 0x40000
   1f424:	bf0c      	ite	eq
   1f426:	4319      	orreq	r1, r3
   1f428:	ea23 0101 	bicne.w	r1, r3, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1f42c:	f8d8 3004 	ldr.w	r3, [r8, #4]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   1f430:	6121      	str	r1, [r4, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1f432:	7a1b      	ldrb	r3, [r3, #8]
   1f434:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
   1f438:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1f43c:	2000      	movs	r0, #0
   1f43e:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1f440:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   1f444:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
   1f448:	f3c1 2105 	ubfx	r1, r1, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   1f44c:	428d      	cmp	r5, r1
   1f44e:	d16f      	bne.n	1f530 <gpio_nrfx_pin_interrupt_configure+0x17c>
		    && (intenset & BIT(i))) {
   1f450:	fa23 f100 	lsr.w	r1, r3, r0
   1f454:	07c9      	lsls	r1, r1, #31
   1f456:	d56b      	bpl.n	1f530 <gpio_nrfx_pin_interrupt_configure+0x17c>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   1f458:	0083      	lsls	r3, r0, #2
   1f45a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1f45e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1f462:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   1f466:	f021 0101 	bic.w	r1, r1, #1
   1f46a:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   1f46e:	2301      	movs	r3, #1
   1f470:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
   1f472:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
   1f476:	b2c0      	uxtb	r0, r0
   1f478:	f001 ffe8 	bl	2144c <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1f47c:	4628      	mov	r0, r5
   1f47e:	2100      	movs	r1, #0
   1f480:	f00d fb23 	bl	2caca <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   1f484:	68f8      	ldr	r0, [r7, #12]
   1f486:	40f0      	lsrs	r0, r6
   1f488:	f010 0001 	ands.w	r0, r0, #1
   1f48c:	d042      	beq.n	1f514 <gpio_nrfx_pin_interrupt_configure+0x160>
		if (data->trig_edge & BIT(pin)) {
   1f48e:	6978      	ldr	r0, [r7, #20]
   1f490:	40f0      	lsrs	r0, r6
   1f492:	f010 0401 	ands.w	r4, r0, #1
   1f496:	d054      	beq.n	1f542 <gpio_nrfx_pin_interrupt_configure+0x18e>
			if (data->double_edge & BIT(pin)) {
   1f498:	69bb      	ldr	r3, [r7, #24]
   1f49a:	40f3      	lsrs	r3, r6
   1f49c:	07db      	lsls	r3, r3, #31
   1f49e:	d44b      	bmi.n	1f538 <gpio_nrfx_pin_interrupt_configure+0x184>
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   1f4a0:	693b      	ldr	r3, [r7, #16]
   1f4a2:	fa23 f606 	lsr.w	r6, r3, r6
				pol = NRF_GPIOTE_POLARITY_HITOLO;
   1f4a6:	f016 0f01 	tst.w	r6, #1
   1f4aa:	bf14      	ite	ne
   1f4ac:	2401      	movne	r4, #1
   1f4ae:	2402      	moveq	r4, #2
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   1f4b0:	a801      	add	r0, sp, #4
   1f4b2:	f001 ffed 	bl	21490 <nrfx_gpiote_channel_alloc>
   1f4b6:	4b2c      	ldr	r3, [pc, #176]	; (1f568 <gpio_nrfx_pin_interrupt_configure+0x1b4>)
   1f4b8:	4298      	cmp	r0, r3
   1f4ba:	d13f      	bne.n	1f53c <gpio_nrfx_pin_interrupt_configure+0x188>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
   1f4bc:	f89d 1004 	ldrb.w	r1, [sp, #4]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1f4c0:	008b      	lsls	r3, r1, #2
   1f4c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1f4c6:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1f4ca:	022d      	lsls	r5, r5, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1f4cc:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1f4d0:	f422 324f 	bic.w	r2, r2, #211968	; 0x33c00
   1f4d4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   1f4d8:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1f4dc:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1f4e0:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
   1f4e4:	4315      	orrs	r5, r2
    return ((uint32_t)p_reg + event);
   1f4e6:	008a      	lsls	r2, r1, #2
   1f4e8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1f4ec:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1f4f0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1f4f4:	2000      	movs	r0, #0
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1f4f6:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1f4fa:	6010      	str	r0, [r2, #0]
   1f4fc:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1f4fe:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1f502:	f042 0201 	orr.w	r2, r2, #1
   1f506:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   1f50a:	2301      	movs	r3, #1
    p_reg->INTENSET = mask;
   1f50c:	4a15      	ldr	r2, [pc, #84]	; (1f564 <gpio_nrfx_pin_interrupt_configure+0x1b0>)
   1f50e:	408b      	lsls	r3, r1
   1f510:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1f514:	b003      	add	sp, #12
   1f516:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1f51a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   1f51e:	f47f af66 	bne.w	1f3ee <gpio_nrfx_pin_interrupt_configure+0x3a>
   1f522:	2101      	movs	r1, #1
   1f524:	fa01 f306 	lsl.w	r3, r1, r6
   1f528:	68e1      	ldr	r1, [r4, #12]
   1f52a:	ea21 0103 	bic.w	r1, r1, r3
   1f52e:	e762      	b.n	1f3f6 <gpio_nrfx_pin_interrupt_configure+0x42>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1f530:	3001      	adds	r0, #1
   1f532:	2808      	cmp	r0, #8
   1f534:	d184      	bne.n	1f440 <gpio_nrfx_pin_interrupt_configure+0x8c>
   1f536:	e7a1      	b.n	1f47c <gpio_nrfx_pin_interrupt_configure+0xc8>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   1f538:	2403      	movs	r4, #3
   1f53a:	e7b9      	b.n	1f4b0 <gpio_nrfx_pin_interrupt_configure+0xfc>
		return -ENODEV;
   1f53c:	f06f 0012 	mvn.w	r0, #18
   1f540:	e7e8      	b.n	1f514 <gpio_nrfx_pin_interrupt_configure+0x160>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1f542:	693b      	ldr	r3, [r7, #16]
   1f544:	fa23 f606 	lsr.w	r6, r3, r6
		return NRF_GPIO_PIN_SENSE_HIGH;
   1f548:	f016 0f01 	tst.w	r6, #1
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1f54c:	4628      	mov	r0, r5
   1f54e:	bf0c      	ite	eq
   1f550:	2103      	moveq	r1, #3
   1f552:	2102      	movne	r1, #2
   1f554:	f00d fab9 	bl	2caca <nrf_gpio_cfg_sense_set>
	int res = 0;
   1f558:	4620      	mov	r0, r4
   1f55a:	e7db      	b.n	1f514 <gpio_nrfx_pin_interrupt_configure+0x160>
		return -ENOTSUP;
   1f55c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1f560:	e7d8      	b.n	1f514 <gpio_nrfx_pin_interrupt_configure+0x160>
   1f562:	bf00      	nop
   1f564:	40006000 	.word	0x40006000
   1f568:	0bad0000 	.word	0x0bad0000

0001f56c <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1f56c:	4b2e      	ldr	r3, [pc, #184]	; (1f628 <gpio_nrfx_config+0xbc>)
   1f56e:	4013      	ands	r3, r2
   1f570:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
{
   1f574:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1f576:	6840      	ldr	r0, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1f578:	d045      	beq.n	1f606 <gpio_nrfx_config+0x9a>
   1f57a:	d808      	bhi.n	1f58e <gpio_nrfx_config+0x22>
   1f57c:	2b02      	cmp	r3, #2
   1f57e:	d044      	beq.n	1f60a <gpio_nrfx_config+0x9e>
   1f580:	2b06      	cmp	r3, #6
   1f582:	d044      	beq.n	1f60e <gpio_nrfx_config+0xa2>
   1f584:	2b00      	cmp	r3, #0
   1f586:	d042      	beq.n	1f60e <gpio_nrfx_config+0xa2>
		return -EINVAL;
   1f588:	f06f 0015 	mvn.w	r0, #21
   1f58c:	e039      	b.n	1f602 <gpio_nrfx_config+0x96>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1f58e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   1f592:	d03e      	beq.n	1f612 <gpio_nrfx_config+0xa6>
   1f594:	d804      	bhi.n	1f5a0 <gpio_nrfx_config+0x34>
   1f596:	4c25      	ldr	r4, [pc, #148]	; (1f62c <gpio_nrfx_config+0xc0>)
   1f598:	42a3      	cmp	r3, r4
   1f59a:	d1f5      	bne.n	1f588 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0D1;
   1f59c:	2407      	movs	r4, #7
   1f59e:	e006      	b.n	1f5ae <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1f5a0:	4c23      	ldr	r4, [pc, #140]	; (1f630 <gpio_nrfx_config+0xc4>)
   1f5a2:	42a3      	cmp	r3, r4
   1f5a4:	d037      	beq.n	1f616 <gpio_nrfx_config+0xaa>
   1f5a6:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   1f5aa:	d1ed      	bne.n	1f588 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0H1;
   1f5ac:	2403      	movs	r4, #3
	if ((flags & GPIO_PULL_UP) != 0) {
   1f5ae:	06d5      	lsls	r5, r2, #27
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1f5b0:	f482 7380 	eor.w	r3, r2, #256	; 0x100
		pull = NRF_GPIO_PIN_NOPULL;
   1f5b4:	bf54      	ite	pl
   1f5b6:	f3c2 1740 	ubfxpl	r7, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
   1f5ba:	2703      	movmi	r7, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1f5bc:	f3c3 2600 	ubfx	r6, r3, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   1f5c0:	0593      	lsls	r3, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   1f5c2:	f3c2 2540 	ubfx	r5, r2, #9, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   1f5c6:	d507      	bpl.n	1f5d8 <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1f5c8:	0513      	lsls	r3, r2, #20
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1f5ca:	f8d0 c004 	ldr.w	ip, [r0, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1f5ce:	d524      	bpl.n	1f61a <gpio_nrfx_config+0xae>
			nrf_gpio_port_out_set(reg, BIT(pin));
   1f5d0:	2301      	movs	r3, #1
   1f5d2:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
   1f5d4:	f8cc 3508 	str.w	r3, [ip, #1288]	; 0x508
	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
   1f5d8:	7a03      	ldrb	r3, [r0, #8]
   1f5da:	f001 011f 	and.w	r1, r1, #31
   1f5de:	ea41 1143 	orr.w	r1, r1, r3, lsl #5
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f5e2:	a801      	add	r0, sp, #4
   1f5e4:	9101      	str	r1, [sp, #4]
   1f5e6:	f7ff fe91 	bl	1f30c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1f5ea:	9a01      	ldr	r2, [sp, #4]
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1f5ec:	ea45 0346 	orr.w	r3, r5, r6, lsl #1
   1f5f0:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1f5f4:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1f5f8:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1f5fc:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	return 0;
   1f600:	2000      	movs	r0, #0
}
   1f602:	b003      	add	sp, #12
   1f604:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0S1;
   1f606:	2401      	movs	r4, #1
   1f608:	e7d1      	b.n	1f5ae <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0S1;
   1f60a:	2404      	movs	r4, #4
   1f60c:	e7cf      	b.n	1f5ae <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_S0S1;
   1f60e:	461c      	mov	r4, r3
   1f610:	e7cd      	b.n	1f5ae <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_S0H1;
   1f612:	2402      	movs	r4, #2
   1f614:	e7cb      	b.n	1f5ae <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0H1;
   1f616:	2405      	movs	r4, #5
   1f618:	e7c9      	b.n	1f5ae <gpio_nrfx_config+0x42>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   1f61a:	0553      	lsls	r3, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   1f61c:	bf42      	ittt	mi
   1f61e:	2201      	movmi	r2, #1
   1f620:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
   1f622:	f8cc 250c 	strmi.w	r2, [ip, #1292]	; 0x50c
   1f626:	e7d7      	b.n	1f5d8 <gpio_nrfx_config+0x6c>
   1f628:	00f00006 	.word	0x00f00006
   1f62c:	00100006 	.word	0x00100006
   1f630:	00400002 	.word	0x00400002

0001f634 <gpiote_event_handler>:
{
   1f634:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   1f636:	2600      	movs	r6, #0
   1f638:	e9cd 6600 	strd	r6, r6, [sp]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f63c:	4d26      	ldr	r5, [pc, #152]	; (1f6d8 <gpiote_event_handler+0xa4>)
   1f63e:	682c      	ldr	r4, [r5, #0]
	if (port_event) {
   1f640:	b14c      	cbz	r4, 1f656 <gpiote_event_handler+0x22>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)));
   1f642:	4826      	ldr	r0, [pc, #152]	; (1f6dc <gpiote_event_handler+0xa8>)
   1f644:	f00d fa54 	bl	2caf0 <check_level_trigger_pins>
		fired_triggers[0] =
   1f648:	9000      	str	r0, [sp, #0]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)));
   1f64a:	4825      	ldr	r0, [pc, #148]	; (1f6e0 <gpiote_event_handler+0xac>)
   1f64c:	f00d fa50 	bl	2caf0 <check_level_trigger_pins>
		fired_triggers[1] =
   1f650:	9001      	str	r0, [sp, #4]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1f652:	602e      	str	r6, [r5, #0]
   1f654:	682b      	ldr	r3, [r5, #0]
    return p_reg->INTENSET & mask;
   1f656:	4d23      	ldr	r5, [pc, #140]	; (1f6e4 <gpiote_event_handler+0xb0>)
{
   1f658:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   1f65a:	2601      	movs	r6, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1f65c:	4694      	mov	ip, r2
    return p_reg->INTENSET & mask;
   1f65e:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
   1f662:	fa06 f102 	lsl.w	r1, r6, r2
   1f666:	4219      	tst	r1, r3
   1f668:	d01b      	beq.n	1f6a2 <gpiote_event_handler+0x6e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f66a:	0091      	lsls	r1, r2, #2
   1f66c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1f670:	f501 41c2 	add.w	r1, r1, #24832	; 0x6100
   1f674:	680b      	ldr	r3, [r1, #0]
   1f676:	b1a3      	cbz	r3, 1f6a2 <gpiote_event_handler+0x6e>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1f678:	f502 73a2 	add.w	r3, r2, #324	; 0x144
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   1f67c:	af02      	add	r7, sp, #8
   1f67e:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1f682:	f8c1 c000 	str.w	ip, [r1]
   1f686:	f3c3 3040 	ubfx	r0, r3, #13, #1
   1f68a:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   1f68e:	f3c3 2304 	ubfx	r3, r3, #8, #5
   1f692:	f850 7c08 	ldr.w	r7, [r0, #-8]
   1f696:	fa06 f303 	lsl.w	r3, r6, r3
   1f69a:	433b      	orrs	r3, r7
   1f69c:	f840 3c08 	str.w	r3, [r0, #-8]
   1f6a0:	680b      	ldr	r3, [r1, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1f6a2:	3201      	adds	r2, #1
   1f6a4:	2a08      	cmp	r2, #8
   1f6a6:	d1da      	bne.n	1f65e <gpiote_event_handler+0x2a>
	if (fired_triggers[0]) {
   1f6a8:	9a00      	ldr	r2, [sp, #0]
   1f6aa:	b11a      	cbz	r2, 1f6b4 <gpiote_event_handler+0x80>
	gpio_fire_callbacks(list, port, pins);
   1f6ac:	490b      	ldr	r1, [pc, #44]	; (1f6dc <gpiote_event_handler+0xa8>)
   1f6ae:	480e      	ldr	r0, [pc, #56]	; (1f6e8 <gpiote_event_handler+0xb4>)
   1f6b0:	f7ff fe04 	bl	1f2bc <gpio_fire_callbacks>
	if (fired_triggers[1]) {
   1f6b4:	9a01      	ldr	r2, [sp, #4]
   1f6b6:	b11a      	cbz	r2, 1f6c0 <gpiote_event_handler+0x8c>
	gpio_fire_callbacks(list, port, pins);
   1f6b8:	4909      	ldr	r1, [pc, #36]	; (1f6e0 <gpiote_event_handler+0xac>)
   1f6ba:	480c      	ldr	r0, [pc, #48]	; (1f6ec <gpiote_event_handler+0xb8>)
   1f6bc:	f7ff fdfe 	bl	1f2bc <gpio_fire_callbacks>
	if (port_event) {
   1f6c0:	b144      	cbz	r4, 1f6d4 <gpiote_event_handler+0xa0>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
   1f6c2:	4806      	ldr	r0, [pc, #24]	; (1f6dc <gpiote_event_handler+0xa8>)
   1f6c4:	f00d fa3d 	bl	2cb42 <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
   1f6c8:	4805      	ldr	r0, [pc, #20]	; (1f6e0 <gpiote_event_handler+0xac>)
}
   1f6ca:	b003      	add	sp, #12
   1f6cc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
   1f6d0:	f00d ba37 	b.w	2cb42 <cfg_level_pins>
}
   1f6d4:	b003      	add	sp, #12
   1f6d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f6d8:	4000617c 	.word	0x4000617c
   1f6dc:	200011ac 	.word	0x200011ac
   1f6e0:	200011bc 	.word	0x200011bc
   1f6e4:	40006000 	.word	0x40006000
   1f6e8:	20004488 	.word	0x20004488
   1f6ec:	200044a4 	.word	0x200044a4

0001f6f0 <twi_0_init>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twi_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWI
I2C_NRFX_TWI_DEVICE(0);
   1f6f0:	b510      	push	{r4, lr}
   1f6f2:	4604      	mov	r4, r0
   1f6f4:	2200      	movs	r2, #0
   1f6f6:	2101      	movs	r1, #1
   1f6f8:	2003      	movs	r0, #3
   1f6fa:	f7e7 fb29 	bl	6d50 <z_arm_irq_priority_set>
	nrfx_err_t result = nrfx_twi_init(&get_dev_config(dev)->twi,
   1f6fe:	6860      	ldr	r0, [r4, #4]
   1f700:	68e3      	ldr	r3, [r4, #12]
   1f702:	4a09      	ldr	r2, [pc, #36]	; (1f728 <twi_0_init+0x38>)
   1f704:	f100 0108 	add.w	r1, r0, #8
   1f708:	f002 f886 	bl	21818 <nrfx_twi_init>
	if (result != NRFX_SUCCESS) {
   1f70c:	4b07      	ldr	r3, [pc, #28]	; (1f72c <twi_0_init+0x3c>)
   1f70e:	4298      	cmp	r0, r3
   1f710:	d007      	beq.n	1f722 <twi_0_init+0x32>
		LOG_ERR("Failed to initialize device: %s",
   1f712:	4807      	ldr	r0, [pc, #28]	; (1f730 <twi_0_init+0x40>)
   1f714:	6822      	ldr	r2, [r4, #0]
   1f716:	2145      	movs	r1, #69	; 0x45
   1f718:	f007 fc29 	bl	26f6e <printk>
		return -EBUSY;
   1f71c:	f06f 000f 	mvn.w	r0, #15
I2C_NRFX_TWI_DEVICE(0);
   1f720:	bd10      	pop	{r4, pc}
	return 0;
   1f722:	2000      	movs	r0, #0
I2C_NRFX_TWI_DEVICE(0);
   1f724:	e7fc      	b.n	1f720 <twi_0_init+0x30>
   1f726:	bf00      	nop
   1f728:	0001f775 	.word	0x0001f775
   1f72c:	0bad0000 	.word	0x0bad0000
   1f730:	00035510 	.word	0x00035510

0001f734 <i2c_nrfx_twi_configure>:
	if (I2C_ADDR_10_BITS & dev_config) {
   1f734:	07ca      	lsls	r2, r1, #31
{
   1f736:	b508      	push	{r3, lr}
	nrfx_twi_t const *inst = &(get_dev_config(dev)->twi);
   1f738:	6843      	ldr	r3, [r0, #4]
	if (I2C_ADDR_10_BITS & dev_config) {
   1f73a:	d409      	bmi.n	1f750 <i2c_nrfx_twi_configure+0x1c>
	switch (I2C_SPEED_GET(dev_config)) {
   1f73c:	f3c1 0242 	ubfx	r2, r1, #1, #3
   1f740:	2a01      	cmp	r2, #1
   1f742:	d008      	beq.n	1f756 <i2c_nrfx_twi_configure+0x22>
   1f744:	2a02      	cmp	r2, #2
   1f746:	d00f      	beq.n	1f768 <i2c_nrfx_twi_configure+0x34>
		LOG_ERR("unsupported speed");
   1f748:	2145      	movs	r1, #69	; 0x45
   1f74a:	4809      	ldr	r0, [pc, #36]	; (1f770 <i2c_nrfx_twi_configure+0x3c>)
   1f74c:	f007 fc0f 	bl	26f6e <printk>
		return -EINVAL;
   1f750:	f06f 0015 	mvn.w	r0, #21
   1f754:	e007      	b.n	1f766 <i2c_nrfx_twi_configure+0x32>
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_100K);
   1f756:	681b      	ldr	r3, [r3, #0]
}

NRF_STATIC_INLINE void nrf_twi_frequency_set(NRF_TWI_Type *      p_reg,
                                             nrf_twi_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
   1f758:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
   1f75c:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	get_dev_data(dev)->dev_config = dev_config;
   1f760:	68c3      	ldr	r3, [r0, #12]
	return 0;
   1f762:	2000      	movs	r0, #0
	get_dev_data(dev)->dev_config = dev_config;
   1f764:	6359      	str	r1, [r3, #52]	; 0x34
}
   1f766:	bd08      	pop	{r3, pc}
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_400K);
   1f768:	681b      	ldr	r3, [r3, #0]
   1f76a:	f04f 62cd 	mov.w	r2, #107479040	; 0x6680000
   1f76e:	e7f5      	b.n	1f75c <i2c_nrfx_twi_configure+0x28>
   1f770:	00035497 	.word	0x00035497

0001f774 <event_handler>:
	switch (p_event->type) {
   1f774:	7803      	ldrb	r3, [r0, #0]
   1f776:	2b01      	cmp	r3, #1
   1f778:	d00a      	beq.n	1f790 <event_handler+0x1c>
   1f77a:	b11b      	cbz	r3, 1f784 <event_handler+0x10>
   1f77c:	2b02      	cmp	r3, #2
   1f77e:	d009      	beq.n	1f794 <event_handler+0x20>
		dev_data->res = NRFX_ERROR_INTERNAL;
   1f780:	4b05      	ldr	r3, [pc, #20]	; (1f798 <event_handler+0x24>)
   1f782:	e000      	b.n	1f786 <event_handler+0x12>
		dev_data->res = NRFX_SUCCESS;
   1f784:	4b05      	ldr	r3, [pc, #20]	; (1f79c <event_handler+0x28>)
		dev_data->res = NRFX_ERROR_INTERNAL;
   1f786:	630b      	str	r3, [r1, #48]	; 0x30
	z_impl_k_sem_give(sem);
   1f788:	f101 0018 	add.w	r0, r1, #24
   1f78c:	f004 b896 	b.w	238bc <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   1f790:	4b03      	ldr	r3, [pc, #12]	; (1f7a0 <event_handler+0x2c>)
   1f792:	e7f8      	b.n	1f786 <event_handler+0x12>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   1f794:	4b03      	ldr	r3, [pc, #12]	; (1f7a4 <event_handler+0x30>)
   1f796:	e7f6      	b.n	1f786 <event_handler+0x12>
   1f798:	0bad0001 	.word	0x0bad0001
   1f79c:	0bad0000 	.word	0x0bad0000
   1f7a0:	0bae0001 	.word	0x0bae0001
   1f7a4:	0bae0002 	.word	0x0bae0002

0001f7a8 <i2c_nrfx_twi_transfer>:
{
   1f7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f7ac:	4604      	mov	r4, r0
   1f7ae:	b087      	sub	sp, #28
   1f7b0:	460d      	mov	r5, r1
   1f7b2:	4690      	mov	r8, r2
   1f7b4:	469a      	mov	sl, r3
	k_sem_take(&(get_dev_data(dev)->transfer_sync), K_FOREVER);
   1f7b6:	68c0      	ldr	r0, [r0, #12]
	return z_impl_k_sem_take(sem, timeout);
   1f7b8:	f04f 32ff 	mov.w	r2, #4294967295
   1f7bc:	f04f 33ff 	mov.w	r3, #4294967295
   1f7c0:	f004 f8b8 	bl	23934 <z_impl_k_sem_take>
	k_sem_take(&(get_dev_data(dev)->completion_sync), K_NO_WAIT);
   1f7c4:	68e0      	ldr	r0, [r4, #12]
   1f7c6:	3018      	adds	r0, #24
   1f7c8:	2200      	movs	r2, #0
   1f7ca:	2300      	movs	r3, #0
   1f7cc:	f004 f8b2 	bl	23934 <z_impl_k_sem_take>
	nrfx_twi_enable(&get_dev_config(dev)->twi);
   1f7d0:	6860      	ldr	r0, [r4, #4]
		if (res != NRFX_SUCCESS) {
   1f7d2:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 1f8ac <i2c_nrfx_twi_transfer+0x104>
	nrfx_twi_enable(&get_dev_config(dev)->twi);
   1f7d6:	f002 f891 	bl	218fc <nrfx_twi_enable>
	for (size_t i = 0; i < num_msgs; i++) {
   1f7da:	2600      	movs	r6, #0
   1f7dc:	4546      	cmp	r6, r8
   1f7de:	d301      	bcc.n	1f7e4 <i2c_nrfx_twi_transfer+0x3c>
   1f7e0:	2500      	movs	r5, #0
   1f7e2:	e02e      	b.n	1f842 <i2c_nrfx_twi_transfer+0x9a>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
   1f7e4:	f895 b008 	ldrb.w	fp, [r5, #8]
   1f7e8:	f01b 0708 	ands.w	r7, fp, #8
   1f7ec:	d155      	bne.n	1f89a <i2c_nrfx_twi_transfer+0xf2>
		nrfx_twi_xfer_desc_t cur_xfer = {
   1f7ee:	2212      	movs	r2, #18
   1f7f0:	4639      	mov	r1, r7
   1f7f2:	f10d 0006 	add.w	r0, sp, #6
   1f7f6:	f00d ff00 	bl	2d5fa <memset>
   1f7fa:	686a      	ldr	r2, [r5, #4]
   1f7fc:	9202      	str	r2, [sp, #8]
					  NRFX_TWI_XFER_RX : NRFX_TWI_XFER_TX
   1f7fe:	f00b 0301 	and.w	r3, fp, #1
		nrfx_twi_xfer_desc_t cur_xfer = {
   1f802:	682a      	ldr	r2, [r5, #0]
   1f804:	f88d 3004 	strb.w	r3, [sp, #4]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
   1f808:	f01b 0f02 	tst.w	fp, #2
		nrfx_twi_xfer_desc_t cur_xfer = {
   1f80c:	f88d a005 	strb.w	sl, [sp, #5]
   1f810:	9204      	str	r2, [sp, #16]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
   1f812:	d120      	bne.n	1f856 <i2c_nrfx_twi_transfer+0xae>
			if ((i < (num_msgs - 1)) &&
   1f814:	f108 32ff 	add.w	r2, r8, #4294967295
   1f818:	42b2      	cmp	r2, r6
   1f81a:	d902      	bls.n	1f822 <i2c_nrfx_twi_transfer+0x7a>
   1f81c:	7d2a      	ldrb	r2, [r5, #20]
   1f81e:	0752      	lsls	r2, r2, #29
   1f820:	d51b      	bpl.n	1f85a <i2c_nrfx_twi_transfer+0xb2>
			} else if (msgs[i].flags & I2C_MSG_READ) {
   1f822:	2b00      	cmp	r3, #0
   1f824:	d139      	bne.n	1f89a <i2c_nrfx_twi_transfer+0xf2>
				xfer_flags |= NRFX_TWI_FLAG_TX_NO_STOP;
   1f826:	2220      	movs	r2, #32
		res = nrfx_twi_xfer(&get_dev_config(dev)->twi,
   1f828:	a901      	add	r1, sp, #4
   1f82a:	6860      	ldr	r0, [r4, #4]
   1f82c:	f002 f8c0 	bl	219b0 <nrfx_twi_xfer>
		if (res != NRFX_SUCCESS) {
   1f830:	4548      	cmp	r0, r9
   1f832:	d014      	beq.n	1f85e <i2c_nrfx_twi_transfer+0xb6>
			if (res == NRFX_ERROR_BUSY) {
   1f834:	4b1a      	ldr	r3, [pc, #104]	; (1f8a0 <i2c_nrfx_twi_transfer+0xf8>)
				ret = -EIO;
   1f836:	4298      	cmp	r0, r3
   1f838:	bf0c      	ite	eq
   1f83a:	f06f 050f 	mvneq.w	r5, #15
   1f83e:	f06f 0504 	mvnne.w	r5, #4
	nrfx_twi_disable(&get_dev_config(dev)->twi);
   1f842:	6860      	ldr	r0, [r4, #4]
   1f844:	f002 f882 	bl	2194c <nrfx_twi_disable>
	k_sem_give(&(get_dev_data(dev)->transfer_sync));
   1f848:	68e0      	ldr	r0, [r4, #12]
	z_impl_k_sem_give(sem);
   1f84a:	f004 f837 	bl	238bc <z_impl_k_sem_give>
}
   1f84e:	4628      	mov	r0, r5
   1f850:	b007      	add	sp, #28
   1f852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint32_t xfer_flags = 0;
   1f856:	463a      	mov	r2, r7
   1f858:	e7e6      	b.n	1f828 <i2c_nrfx_twi_transfer+0x80>
				xfer_flags |= NRFX_TWI_FLAG_SUSPEND;
   1f85a:	2240      	movs	r2, #64	; 0x40
   1f85c:	e7e4      	b.n	1f828 <i2c_nrfx_twi_transfer+0x80>
		ret = k_sem_take(&(get_dev_data(dev)->completion_sync),
   1f85e:	68e0      	ldr	r0, [r4, #12]
   1f860:	3018      	adds	r0, #24
	return z_impl_k_sem_take(sem, timeout);
   1f862:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1f866:	2300      	movs	r3, #0
   1f868:	f004 f864 	bl	23934 <z_impl_k_sem_take>
		if (ret != 0) {
   1f86c:	b138      	cbz	r0, 1f87e <i2c_nrfx_twi_transfer+0xd6>
			LOG_ERR("Error on I2C line occurred for message %d", i);
   1f86e:	4632      	mov	r2, r6
   1f870:	2145      	movs	r1, #69	; 0x45
   1f872:	480c      	ldr	r0, [pc, #48]	; (1f8a4 <i2c_nrfx_twi_transfer+0xfc>)
   1f874:	f007 fb7b 	bl	26f6e <printk>
			ret = -EIO;
   1f878:	f06f 0504 	mvn.w	r5, #4
			break;
   1f87c:	e7e1      	b.n	1f842 <i2c_nrfx_twi_transfer+0x9a>
		res = get_dev_data(dev)->res;
   1f87e:	68e3      	ldr	r3, [r4, #12]
   1f880:	6b1a      	ldr	r2, [r3, #48]	; 0x30
		if (res != NRFX_SUCCESS) {
   1f882:	454a      	cmp	r2, r9
   1f884:	f105 050c 	add.w	r5, r5, #12
   1f888:	d005      	beq.n	1f896 <i2c_nrfx_twi_transfer+0xee>
			LOG_ERR("Error %d occurred for message %d", res, i);
   1f88a:	4633      	mov	r3, r6
   1f88c:	2145      	movs	r1, #69	; 0x45
   1f88e:	4806      	ldr	r0, [pc, #24]	; (1f8a8 <i2c_nrfx_twi_transfer+0x100>)
   1f890:	f007 fb6d 	bl	26f6e <printk>
   1f894:	e7f0      	b.n	1f878 <i2c_nrfx_twi_transfer+0xd0>
	for (size_t i = 0; i < num_msgs; i++) {
   1f896:	3601      	adds	r6, #1
   1f898:	e7a0      	b.n	1f7dc <i2c_nrfx_twi_transfer+0x34>
			ret = -ENOTSUP;
   1f89a:	f06f 0585 	mvn.w	r5, #133	; 0x85
   1f89e:	e7d0      	b.n	1f842 <i2c_nrfx_twi_transfer+0x9a>
   1f8a0:	0bad000b 	.word	0x0bad000b
   1f8a4:	000354ae 	.word	0x000354ae
   1f8a8:	000354dd 	.word	0x000354dd
   1f8ac:	0bad0000 	.word	0x0bad0000

0001f8b0 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   1f8b0:	4b02      	ldr	r3, [pc, #8]	; (1f8bc <flash_nrf_pages_layout+0xc>)
   1f8b2:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   1f8b4:	2301      	movs	r3, #1
   1f8b6:	6013      	str	r3, [r2, #0]
}
   1f8b8:	4770      	bx	lr
   1f8ba:	bf00      	nop
   1f8bc:	200044bc 	.word	0x200044bc

0001f8c0 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   1f8c0:	4800      	ldr	r0, [pc, #0]	; (1f8c4 <flash_nrf_get_parameters+0x4>)
   1f8c2:	4770      	bx	lr
   1f8c4:	0002f3c0 	.word	0x0002f3c0

0001f8c8 <flash_nrf_read>:
{
   1f8c8:	b570      	push	{r4, r5, r6, lr}
   1f8ca:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   1f8cc:	4628      	mov	r0, r5
   1f8ce:	4619      	mov	r1, r3
{
   1f8d0:	4616      	mov	r6, r2
   1f8d2:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   1f8d4:	f00d f95d 	bl	2cb92 <is_regular_addr_valid>
   1f8d8:	b940      	cbnz	r0, 1f8ec <flash_nrf_read+0x24>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1f8da:	4809      	ldr	r0, [pc, #36]	; (1f900 <flash_nrf_read+0x38>)
   1f8dc:	4623      	mov	r3, r4
   1f8de:	462a      	mov	r2, r5
   1f8e0:	2145      	movs	r1, #69	; 0x45
   1f8e2:	f007 fb44 	bl	26f6e <printk>
   1f8e6:	f06f 0015 	mvn.w	r0, #21
}
   1f8ea:	bd70      	pop	{r4, r5, r6, pc}
	if (!len) {
   1f8ec:	b134      	cbz	r4, 1f8fc <flash_nrf_read+0x34>
   1f8ee:	4622      	mov	r2, r4
   1f8f0:	4629      	mov	r1, r5
   1f8f2:	4630      	mov	r0, r6
   1f8f4:	f00d fe46 	bl	2d584 <memcpy>
	return 0;
   1f8f8:	2000      	movs	r0, #0
   1f8fa:	e7f6      	b.n	1f8ea <flash_nrf_read+0x22>
		return 0;
   1f8fc:	4620      	mov	r0, r4
   1f8fe:	e7f4      	b.n	1f8ea <flash_nrf_read+0x22>
   1f900:	00035559 	.word	0x00035559

0001f904 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   1f904:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1f906:	2201      	movs	r2, #1
   1f908:	4611      	mov	r1, r2
   1f90a:	4807      	ldr	r0, [pc, #28]	; (1f928 <nrf_flash_init+0x24>)
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1f90c:	4c07      	ldr	r4, [pc, #28]	; (1f92c <nrf_flash_init+0x28>)
   1f90e:	f00d fd04 	bl	2d31a <z_impl_k_sem_init>
	nrf_flash_sync_init();
   1f912:	f000 fa27 	bl	1fd64 <nrf_flash_sync_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1f916:	f00d fbb5 	bl	2d084 <nrfx_nvmc_flash_page_count_get>
   1f91a:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   1f91c:	f00d fbae 	bl	2d07c <nrfx_nvmc_flash_page_size_get>
   1f920:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   1f922:	2000      	movs	r0, #0
   1f924:	bd10      	pop	{r4, pc}
   1f926:	bf00      	nop
   1f928:	200044c4 	.word	0x200044c4
   1f92c:	200044bc 	.word	0x200044bc

0001f930 <nrf_power_pofcon_set.constprop.10>:
NRF_STATIC_INLINE void nrf_power_pofcon_set(NRF_POWER_Type *    p_reg,
   1f930:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(thr == (thr & (POWER_POFCON_THRESHOLD_Msk >> POWER_POFCON_THRESHOLD_Pos)));
   1f932:	f031 030f 	bics.w	r3, r1, #15
NRF_STATIC_INLINE void nrf_power_pofcon_set(NRF_POWER_Type *    p_reg,
   1f936:	4605      	mov	r5, r0
   1f938:	460c      	mov	r4, r1
    NRFX_ASSERT(thr == (thr & (POWER_POFCON_THRESHOLD_Msk >> POWER_POFCON_THRESHOLD_Pos)));
   1f93a:	d00a      	beq.n	1f952 <nrf_power_pofcon_set.constprop.10+0x22>
   1f93c:	490b      	ldr	r1, [pc, #44]	; (1f96c <nrf_power_pofcon_set.constprop.10+0x3c>)
   1f93e:	480c      	ldr	r0, [pc, #48]	; (1f970 <nrf_power_pofcon_set.constprop.10+0x40>)
   1f940:	f240 32e7 	movw	r2, #999	; 0x3e7
   1f944:	f007 fb13 	bl	26f6e <printk>
   1f948:	f240 31e7 	movw	r1, #999	; 0x3e7
   1f94c:	4807      	ldr	r0, [pc, #28]	; (1f96c <nrf_power_pofcon_set.constprop.10+0x3c>)
   1f94e:	f007 fd87 	bl	27460 <assert_post_action>
    uint32_t pofcon = p_reg->POFCON;
   1f952:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f956:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   1f95a:	f021 011f 	bic.w	r1, r1, #31
   1f95e:	4329      	orrs	r1, r5
    pofcon |=
   1f960:	ea41 0144 	orr.w	r1, r1, r4, lsl #1
    p_reg->POFCON = pofcon;
   1f964:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
}
   1f968:	bd38      	pop	{r3, r4, r5, pc}
   1f96a:	bf00      	nop
   1f96c:	0003559e 	.word	0x0003559e
   1f970:	0002fa94 	.word	0x0002fa94

0001f974 <restore_pofwarn.part.2>:
	}

	return 0;
}

static void restore_pofwarn(void)
   1f974:	b508      	push	{r3, lr}
    uint32_t pofcon = p_reg->POFCON;
   1f976:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	nrf_power_pof_thr_t pof_thr;

	if (pofcon_enabled) {
		pof_thr = nrf_power_pofcon_get(NRF_POWER, NULL);

		nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
   1f97a:	2001      	movs	r0, #1
   1f97c:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   1f980:	f3c1 0143 	ubfx	r1, r1, #1, #4
   1f984:	f7ff ffd4 	bl	1f930 <nrf_power_pofcon_set.constprop.10>
		pofcon_enabled = false;
   1f988:	4b01      	ldr	r3, [pc, #4]	; (1f990 <restore_pofwarn.part.2+0x1c>)
   1f98a:	2200      	movs	r2, #0
   1f98c:	701a      	strb	r2, [r3, #0]
	}
}
   1f98e:	bd08      	pop	{r3, pc}
   1f990:	2000488b 	.word	0x2000488b

0001f994 <suspend_pofwarn.part.1>:
   1f994:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
static int suspend_pofwarn(void)
   1f998:	b510      	push	{r4, lr}
   1f99a:	f8d3 4510 	ldr.w	r4, [r3, #1296]	; 0x510
	if (enabled) {
   1f99e:	f014 0001 	ands.w	r0, r4, #1
   1f9a2:	d00e      	beq.n	1f9c2 <suspend_pofwarn.part.1+0x2e>
    return (nrf_power_pof_thr_t)((pofcon & POWER_POFCON_THRESHOLD_Msk) >>
   1f9a4:	f3c4 0443 	ubfx	r4, r4, #1, #4
		nrf_power_pofcon_set(NRF_POWER, false, pof_thr);
   1f9a8:	2000      	movs	r0, #0
   1f9aa:	4621      	mov	r1, r4
   1f9ac:	f7ff ffc0 	bl	1f930 <nrf_power_pofcon_set.constprop.10>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f9b0:	4b06      	ldr	r3, [pc, #24]	; (1f9cc <suspend_pofwarn.part.1+0x38>)
   1f9b2:	6818      	ldr	r0, [r3, #0]
		if (nrf_power_event_check(NRF_POWER, NRF_POWER_EVENT_POFWARN)) {
   1f9b4:	b130      	cbz	r0, 1f9c4 <suspend_pofwarn.part.1+0x30>
			nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
   1f9b6:	2001      	movs	r0, #1
   1f9b8:	4621      	mov	r1, r4
   1f9ba:	f7ff ffb9 	bl	1f930 <nrf_power_pofcon_set.constprop.10>
			return -ECANCELED;
   1f9be:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
   1f9c2:	bd10      	pop	{r4, pc}
		pofcon_enabled = enabled;
   1f9c4:	4b02      	ldr	r3, [pc, #8]	; (1f9d0 <suspend_pofwarn.part.1+0x3c>)
   1f9c6:	2201      	movs	r2, #1
   1f9c8:	701a      	strb	r2, [r3, #0]
   1f9ca:	e7fa      	b.n	1f9c2 <suspend_pofwarn.part.1+0x2e>
   1f9cc:	40000108 	.word	0x40000108
   1f9d0:	2000488b 	.word	0x2000488b

0001f9d4 <erase_op>:
{
   1f9d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f9d8:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1f9da:	f00d fb4f 	bl	2d07c <nrfx_nvmc_flash_page_size_get>
	if (e_ctx->enable_time_limit) {
   1f9de:	7b23      	ldrb	r3, [r4, #12]
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1f9e0:	4606      	mov	r6, r0
	if (e_ctx->enable_time_limit) {
   1f9e2:	b10b      	cbz	r3, 1f9e8 <erase_op+0x14>
		nrf_flash_sync_get_timestamp_begin();
   1f9e4:	f000 f9d0 	bl	1fd88 <nrf_flash_sync_get_timestamp_begin>
    #else
        #if defined (NRF52805_XXAA) || defined (DEVELOP_IN_NRF52805)\
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1f9e8:	4f16      	ldr	r7, [pc, #88]	; (1fa44 <erase_op+0x70>)
	if (pofcon_enabled) {
   1f9ea:	f8df 805c 	ldr.w	r8, [pc, #92]	; 1fa48 <erase_op+0x74>
{
   1f9ee:	2500      	movs	r5, #0
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1f9f0:	683b      	ldr	r3, [r7, #0]
   1f9f2:	2b08      	cmp	r3, #8
   1f9f4:	d019      	beq.n	1fa2a <erase_op+0x56>
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   1f9f6:	6860      	ldr	r0, [r4, #4]
   1f9f8:	f001 fd8c 	bl	21514 <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
   1f9fc:	68a3      	ldr	r3, [r4, #8]
   1f9fe:	1b9b      	subs	r3, r3, r6
   1fa00:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
   1fa02:	6863      	ldr	r3, [r4, #4]
   1fa04:	4433      	add	r3, r6
   1fa06:	6063      	str	r3, [r4, #4]
	if (pofcon_enabled) {
   1fa08:	f898 3000 	ldrb.w	r3, [r8]
   1fa0c:	b10b      	cbz	r3, 1fa12 <erase_op+0x3e>
   1fa0e:	f7ff ffb1 	bl	1f974 <restore_pofwarn.part.2>
		if (e_ctx->enable_time_limit) {
   1fa12:	7b23      	ldrb	r3, [r4, #12]
		i++;
   1fa14:	3501      	adds	r5, #1
		if (e_ctx->enable_time_limit) {
   1fa16:	b97b      	cbnz	r3, 1fa38 <erase_op+0x64>
	} while (e_ctx->len > 0);
   1fa18:	68a3      	ldr	r3, [r4, #8]
   1fa1a:	2b00      	cmp	r3, #0
   1fa1c:	d1e8      	bne.n	1f9f0 <erase_op+0x1c>
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
   1fa1e:	68a0      	ldr	r0, [r4, #8]
   1fa20:	3000      	adds	r0, #0
   1fa22:	bf18      	it	ne
   1fa24:	2001      	movne	r0, #1
}
   1fa26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            {
                switch(var2)
   1fa2a:	f7ff ffb3 	bl	1f994 <suspend_pofwarn.part.1>
		if (SUSPEND_POFWARN()) {
   1fa2e:	2800      	cmp	r0, #0
   1fa30:	d0e1      	beq.n	1f9f6 <erase_op+0x22>
			return -ECANCELED;
   1fa32:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   1fa36:	e7f6      	b.n	1fa26 <erase_op+0x52>
			if (nrf_flash_sync_check_time_limit(i)) {
   1fa38:	4628      	mov	r0, r5
   1fa3a:	f7e3 fba9 	bl	3190 <nrf_flash_sync_check_time_limit>
   1fa3e:	2800      	cmp	r0, #0
   1fa40:	d0ea      	beq.n	1fa18 <erase_op+0x44>
   1fa42:	e7ec      	b.n	1fa1e <erase_op+0x4a>
   1fa44:	10000130 	.word	0x10000130
   1fa48:	2000488b 	.word	0x2000488b

0001fa4c <flash_nrf_erase>:
{
   1fa4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fa4e:	b087      	sub	sp, #28
   1fa50:	460e      	mov	r6, r1
   1fa52:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1fa54:	f00d fb12 	bl	2d07c <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   1fa58:	4629      	mov	r1, r5
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1fa5a:	4607      	mov	r7, r0
	if (is_regular_addr_valid(addr, size)) {
   1fa5c:	4630      	mov	r0, r6
   1fa5e:	f00d f898 	bl	2cb92 <is_regular_addr_valid>
   1fa62:	b358      	cbz	r0, 1fabc <flash_nrf_erase+0x70>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   1fa64:	fbb6 f3f7 	udiv	r3, r6, r7
   1fa68:	fb07 6313 	mls	r3, r7, r3, r6
   1fa6c:	b923      	cbnz	r3, 1fa78 <flash_nrf_erase+0x2c>
   1fa6e:	fbb5 f4f7 	udiv	r4, r5, r7
   1fa72:	fb07 5414 	mls	r4, r7, r4, r5
   1fa76:	b154      	cbz	r4, 1fa8e <flash_nrf_erase+0x42>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   1fa78:	481f      	ldr	r0, [pc, #124]	; (1faf8 <flash_nrf_erase+0xac>)
   1fa7a:	462b      	mov	r3, r5
   1fa7c:	4632      	mov	r2, r6
   1fa7e:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1fa80:	f007 fa75 	bl	26f6e <printk>
		return -EINVAL;
   1fa84:	f06f 0415 	mvn.w	r4, #21
}
   1fa88:	4620      	mov	r0, r4
   1fa8a:	b007      	add	sp, #28
   1fa8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!n_pages) {
   1fa8e:	42bd      	cmp	r5, r7
   1fa90:	d3fa      	bcc.n	1fa88 <flash_nrf_erase+0x3c>
	return z_impl_k_sem_take(sem, timeout);
   1fa92:	f04f 33ff 	mov.w	r3, #4294967295
   1fa96:	f04f 32ff 	mov.w	r2, #4294967295
   1fa9a:	4818      	ldr	r0, [pc, #96]	; (1fafc <flash_nrf_erase+0xb0>)
   1fa9c:	f003 ff4a 	bl	23934 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   1faa0:	f00d f88a 	bl	2cbb8 <nrf_flash_sync_is_required>
   1faa4:	ab02      	add	r3, sp, #8
   1faa6:	4601      	mov	r1, r0
   1faa8:	b968      	cbnz	r0, 1fac6 <flash_nrf_erase+0x7a>
	struct flash_context context = {
   1faaa:	2210      	movs	r2, #16
   1faac:	4618      	mov	r0, r3
   1faae:	f00d fda4 	bl	2d5fa <memset>
   1fab2:	e9cd 6503 	strd	r6, r5, [sp, #12]
	return	erase_op(&context);
   1fab6:	f7ff ff8d 	bl	1f9d4 <erase_op>
   1faba:	e017      	b.n	1faec <flash_nrf_erase+0xa0>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1fabc:	462b      	mov	r3, r5
   1fabe:	4632      	mov	r2, r6
   1fac0:	2145      	movs	r1, #69	; 0x45
   1fac2:	480f      	ldr	r0, [pc, #60]	; (1fb00 <flash_nrf_erase+0xb4>)
   1fac4:	e7dc      	b.n	1fa80 <flash_nrf_erase+0x34>
	struct flash_context context = {
   1fac6:	2210      	movs	r2, #16
   1fac8:	4621      	mov	r1, r4
   1faca:	4618      	mov	r0, r3
   1facc:	f00d fd95 	bl	2d5fa <memset>
   1fad0:	2201      	movs	r2, #1
   1fad2:	f88d 2014 	strb.w	r2, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   1fad6:	4a0b      	ldr	r2, [pc, #44]	; (1fb04 <flash_nrf_erase+0xb8>)
   1fad8:	e9cd 2000 	strd	r2, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   1fadc:	480a      	ldr	r0, [pc, #40]	; (1fb08 <flash_nrf_erase+0xbc>)
	struct flash_context context = {
   1fade:	e9cd 6503 	strd	r6, r5, [sp, #12]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   1fae2:	f000 f949 	bl	1fd78 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   1fae6:	4668      	mov	r0, sp
   1fae8:	f7e3 fad6 	bl	3098 <nrf_flash_sync_exe>
	return	erase_op(&context);
   1faec:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   1faee:	4803      	ldr	r0, [pc, #12]	; (1fafc <flash_nrf_erase+0xb0>)
   1faf0:	f003 fee4 	bl	238bc <z_impl_k_sem_give>
   1faf4:	e7c8      	b.n	1fa88 <flash_nrf_erase+0x3c>
   1faf6:	bf00      	nop
   1faf8:	00035535 	.word	0x00035535
   1fafc:	200044c4 	.word	0x200044c4
   1fb00:	00035559 	.word	0x00035559
   1fb04:	0001f9d5 	.word	0x0001f9d5
   1fb08:	00015e64 	.word	0x00015e64

0001fb0c <write_op>:
{
   1fb0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (w_ctx->enable_time_limit) {
   1fb0e:	7b03      	ldrb	r3, [r0, #12]
{
   1fb10:	4604      	mov	r4, r0
	if (w_ctx->enable_time_limit) {
   1fb12:	b10b      	cbz	r3, 1fb18 <write_op+0xc>
		nrf_flash_sync_get_timestamp_begin();
   1fb14:	f000 f938 	bl	1fd88 <nrf_flash_sync_get_timestamp_begin>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1fb18:	4e1c      	ldr	r6, [pc, #112]	; (1fb8c <write_op+0x80>)
	if (pofcon_enabled) {
   1fb1a:	4f1d      	ldr	r7, [pc, #116]	; (1fb90 <write_op+0x84>)
{
   1fb1c:	2501      	movs	r5, #1
	while (w_ctx->len >= sizeof(uint32_t)) {
   1fb1e:	68a3      	ldr	r3, [r4, #8]
   1fb20:	2b03      	cmp	r3, #3
   1fb22:	d806      	bhi.n	1fb32 <write_op+0x26>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1fb24:	4a1b      	ldr	r2, [pc, #108]	; (1fb94 <write_op+0x88>)
   1fb26:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   1fb2a:	07db      	lsls	r3, r3, #31
   1fb2c:	d5fb      	bpl.n	1fb26 <write_op+0x1a>
	return FLASH_OP_DONE;
   1fb2e:	2000      	movs	r0, #0
}
   1fb30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if (var1 == 0x08)
   1fb32:	6833      	ldr	r3, [r6, #0]
   1fb34:	2b08      	cmp	r3, #8
   1fb36:	d021      	beq.n	1fb7c <write_op+0x70>
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
   1fb38:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   1fb3a:	6860      	ldr	r0, [r4, #4]
   1fb3c:	6819      	ldr	r1, [r3, #0]
   1fb3e:	f001 fd1d 	bl	2157c <nrfx_nvmc_word_write>
	if (pofcon_enabled) {
   1fb42:	783b      	ldrb	r3, [r7, #0]
   1fb44:	b10b      	cbz	r3, 1fb4a <write_op+0x3e>
   1fb46:	f7ff ff15 	bl	1f974 <restore_pofwarn.part.2>
	w_ctx->flash_addr += shift;
   1fb4a:	6863      	ldr	r3, [r4, #4]
   1fb4c:	3304      	adds	r3, #4
   1fb4e:	6063      	str	r3, [r4, #4]
	w_ctx->data_addr += shift;
   1fb50:	6823      	ldr	r3, [r4, #0]
   1fb52:	3304      	adds	r3, #4
   1fb54:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
   1fb56:	68a3      	ldr	r3, [r4, #8]
   1fb58:	3b04      	subs	r3, #4
   1fb5a:	60a3      	str	r3, [r4, #8]
		if (w_ctx->enable_time_limit) {
   1fb5c:	7b23      	ldrb	r3, [r4, #12]
		i++;
   1fb5e:	3501      	adds	r5, #1
		if (w_ctx->enable_time_limit) {
   1fb60:	2b00      	cmp	r3, #0
   1fb62:	d0dc      	beq.n	1fb1e <write_op+0x12>
			if (nrf_flash_sync_check_time_limit(i)) {
   1fb64:	4628      	mov	r0, r5
   1fb66:	f7e3 fb13 	bl	3190 <nrf_flash_sync_check_time_limit>
   1fb6a:	2800      	cmp	r0, #0
   1fb6c:	d0d7      	beq.n	1fb1e <write_op+0x12>
   1fb6e:	4a09      	ldr	r2, [pc, #36]	; (1fb94 <write_op+0x88>)
   1fb70:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   1fb74:	07d9      	lsls	r1, r3, #31
   1fb76:	d5fb      	bpl.n	1fb70 <write_op+0x64>
				return FLASH_OP_ONGOING;
   1fb78:	2001      	movs	r0, #1
   1fb7a:	e7d9      	b.n	1fb30 <write_op+0x24>
                switch(var2)
   1fb7c:	f7ff ff0a 	bl	1f994 <suspend_pofwarn.part.1>
		if (SUSPEND_POFWARN()) {
   1fb80:	2800      	cmp	r0, #0
   1fb82:	d0d9      	beq.n	1fb38 <write_op+0x2c>
			return -ECANCELED;
   1fb84:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   1fb88:	e7d2      	b.n	1fb30 <write_op+0x24>
   1fb8a:	bf00      	nop
   1fb8c:	10000130 	.word	0x10000130
   1fb90:	2000488b 	.word	0x2000488b
   1fb94:	4001e000 	.word	0x4001e000

0001fb98 <flash_nrf_write>:
{
   1fb98:	b570      	push	{r4, r5, r6, lr}
   1fb9a:	460d      	mov	r5, r1
   1fb9c:	b086      	sub	sp, #24
	if (is_regular_addr_valid(addr, len)) {
   1fb9e:	4619      	mov	r1, r3
   1fba0:	4628      	mov	r0, r5
{
   1fba2:	4616      	mov	r6, r2
   1fba4:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   1fba6:	f00c fff4 	bl	2cb92 <is_regular_addr_valid>
   1fbaa:	b950      	cbnz	r0, 1fbc2 <flash_nrf_write+0x2a>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1fbac:	481d      	ldr	r0, [pc, #116]	; (1fc24 <flash_nrf_write+0x8c>)
   1fbae:	4623      	mov	r3, r4
   1fbb0:	462a      	mov	r2, r5
   1fbb2:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   1fbb4:	f007 f9db 	bl	26f6e <printk>
		return -EINVAL;
   1fbb8:	f06f 0415 	mvn.w	r4, #21
}
   1fbbc:	4620      	mov	r0, r4
   1fbbe:	b006      	add	sp, #24
   1fbc0:	bd70      	pop	{r4, r5, r6, pc}
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   1fbc2:	ea44 0305 	orr.w	r3, r4, r5
   1fbc6:	079b      	lsls	r3, r3, #30
   1fbc8:	d004      	beq.n	1fbd4 <flash_nrf_write+0x3c>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   1fbca:	4623      	mov	r3, r4
   1fbcc:	462a      	mov	r2, r5
   1fbce:	2145      	movs	r1, #69	; 0x45
   1fbd0:	4815      	ldr	r0, [pc, #84]	; (1fc28 <flash_nrf_write+0x90>)
   1fbd2:	e7ef      	b.n	1fbb4 <flash_nrf_write+0x1c>
	if (!len) {
   1fbd4:	2c00      	cmp	r4, #0
   1fbd6:	d0f1      	beq.n	1fbbc <flash_nrf_write+0x24>
	return z_impl_k_sem_take(sem, timeout);
   1fbd8:	f04f 33ff 	mov.w	r3, #4294967295
   1fbdc:	f04f 32ff 	mov.w	r2, #4294967295
   1fbe0:	4812      	ldr	r0, [pc, #72]	; (1fc2c <flash_nrf_write+0x94>)
   1fbe2:	f003 fea7 	bl	23934 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   1fbe6:	f00c ffe7 	bl	2cbb8 <nrf_flash_sync_is_required>
   1fbea:	ab02      	add	r3, sp, #8
	struct flash_context context = {
   1fbec:	e9cd 6502 	strd	r6, r5, [sp, #8]
   1fbf0:	9404      	str	r4, [sp, #16]
	if (nrf_flash_sync_is_required()) {
   1fbf2:	b188      	cbz	r0, 1fc18 <flash_nrf_write+0x80>
	struct flash_context context = {
   1fbf4:	2201      	movs	r2, #1
   1fbf6:	f88d 2014 	strb.w	r2, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   1fbfa:	4a0d      	ldr	r2, [pc, #52]	; (1fc30 <flash_nrf_write+0x98>)
	nrf_flash_sync_set_context(FLASH_SLOT_WRITE);
   1fbfc:	f641 504c 	movw	r0, #7500	; 0x1d4c
	struct flash_op_desc flash_op_desc = {
   1fc00:	e9cd 2300 	strd	r2, r3, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_WRITE);
   1fc04:	f000 f8b8 	bl	1fd78 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   1fc08:	4668      	mov	r0, sp
   1fc0a:	f7e3 fa45 	bl	3098 <nrf_flash_sync_exe>
	return write_op(&context);
   1fc0e:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   1fc10:	4806      	ldr	r0, [pc, #24]	; (1fc2c <flash_nrf_write+0x94>)
   1fc12:	f003 fe53 	bl	238bc <z_impl_k_sem_give>
	return ret;
   1fc16:	e7d1      	b.n	1fbbc <flash_nrf_write+0x24>
	struct flash_context context = {
   1fc18:	f88d 0014 	strb.w	r0, [sp, #20]
	return write_op(&context);
   1fc1c:	4618      	mov	r0, r3
   1fc1e:	f7ff ff75 	bl	1fb0c <write_op>
   1fc22:	e7f4      	b.n	1fc0e <flash_nrf_write+0x76>
   1fc24:	00035559 	.word	0x00035559
   1fc28:	0003557b 	.word	0x0003557b
   1fc2c:	200044c4 	.word	0x200044c4
   1fc30:	0001fb0d 	.word	0x0001fb0d

0001fc34 <_ticker_stop>:
{
   1fc34:	b513      	push	{r0, r1, r4, lr}
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   1fc36:	2300      	movs	r3, #0
   1fc38:	9300      	str	r3, [sp, #0]
   1fc3a:	f7f8 ffd9 	bl	18bf0 <ticker_stop>
	if (ret != TICKER_STATUS_SUCCESS &&
   1fc3e:	f030 0302 	bics.w	r3, r0, #2
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   1fc42:	4604      	mov	r4, r0
	if (ret != TICKER_STATUS_SUCCESS &&
   1fc44:	d008      	beq.n	1fc58 <_ticker_stop+0x24>
		__ASSERT(0, "Failed to stop ticker.\n");
   1fc46:	4906      	ldr	r1, [pc, #24]	; (1fc60 <_ticker_stop+0x2c>)
   1fc48:	4806      	ldr	r0, [pc, #24]	; (1fc64 <_ticker_stop+0x30>)
   1fc4a:	2230      	movs	r2, #48	; 0x30
   1fc4c:	f007 f98f 	bl	26f6e <printk>
   1fc50:	2130      	movs	r1, #48	; 0x30
   1fc52:	4803      	ldr	r0, [pc, #12]	; (1fc60 <_ticker_stop+0x2c>)
   1fc54:	f007 fc04 	bl	27460 <assert_post_action>
}
   1fc58:	4620      	mov	r0, r4
   1fc5a:	b002      	add	sp, #8
   1fc5c:	bd10      	pop	{r4, pc}
   1fc5e:	bf00      	nop
   1fc60:	000355dc 	.word	0x000355dc
   1fc64:	0002fa94 	.word	0x0002fa94

0001fc68 <time_slot_delay>:
{
   1fc68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fc6c:	b08c      	sub	sp, #48	; 0x30
   1fc6e:	4605      	mov	r5, r0
   1fc70:	460e      	mov	r6, r1
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   1fc72:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   1fc76:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
{
   1fc7a:	4617      	mov	r7, r2
   1fc7c:	4698      	mov	r8, r3
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   1fc7e:	f00c f87d 	bl	2bd7c <ll_timeslice_ticker_id_get>
			   (ticker_id + 1), /* ticker_id */
   1fc82:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
	err = ticker_start(instance_index, /* Radio instance ticker */
   1fc86:	9600      	str	r6, [sp, #0]
   1fc88:	2400      	movs	r4, #0
			   (ticker_id + 1), /* ticker_id */
   1fc8a:	3101      	adds	r1, #1
	err = ticker_start(instance_index, /* Radio instance ticker */
   1fc8c:	462b      	mov	r3, r5
   1fc8e:	b2ca      	uxtb	r2, r1
   1fc90:	e9cd 4407 	strd	r4, r4, [sp, #28]
   1fc94:	e9cd 7805 	strd	r7, r8, [sp, #20]
   1fc98:	e9cd 4403 	strd	r4, r4, [sp, #12]
   1fc9c:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1fca0:	4621      	mov	r1, r4
   1fca2:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   1fca6:	f00b ffa9 	bl	2bbfc <ticker_start>
	if (err != TICKER_STATUS_SUCCESS && err != TICKER_STATUS_BUSY) {
   1fcaa:	f030 0302 	bics.w	r3, r0, #2
   1fcae:	d00b      	beq.n	1fcc8 <time_slot_delay+0x60>
		_ticker_sync_context.result = 0;
   1fcb0:	4b07      	ldr	r3, [pc, #28]	; (1fcd0 <time_slot_delay+0x68>)
		_ticker_stop(instance_index, 0, ticker_id);
   1fcb2:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
   1fcb6:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
		_ticker_sync_context.result = 0;
   1fcba:	60dc      	str	r4, [r3, #12]
		_ticker_stop(instance_index, 0, ticker_id);
   1fcbc:	4621      	mov	r1, r4
   1fcbe:	f7ff ffb9 	bl	1fc34 <_ticker_stop>
   1fcc2:	4804      	ldr	r0, [pc, #16]	; (1fcd4 <time_slot_delay+0x6c>)
   1fcc4:	f003 fdfa 	bl	238bc <z_impl_k_sem_give>
}
   1fcc8:	b00c      	add	sp, #48	; 0x30
   1fcca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1fcce:	bf00      	nop
   1fcd0:	200044dc 	.word	0x200044dc
   1fcd4:	200044ec 	.word	0x200044ec

0001fcd8 <time_slot_callback_prepare>:
	time_slot_delay(ticks_at_expire,
   1fcd8:	4a01      	ldr	r2, [pc, #4]	; (1fce0 <time_slot_callback_prepare+0x8>)
   1fcda:	2131      	movs	r1, #49	; 0x31
   1fcdc:	f7ff bfc4 	b.w	1fc68 <time_slot_delay>
   1fce0:	0001fce5 	.word	0x0001fce5

0001fce4 <time_slot_callback_abort>:
{
   1fce4:	b570      	push	{r4, r5, r6, lr}
   1fce6:	4604      	mov	r4, r0
   1fce8:	461d      	mov	r5, r3
	ll_radio_state_abort();
   1fcea:	f7fa fb8f 	bl	1a40c <ll_radio_state_abort>
	time_slot_delay(ticks_at_expire,
   1fcee:	462b      	mov	r3, r5
   1fcf0:	4620      	mov	r0, r4
   1fcf2:	4a03      	ldr	r2, [pc, #12]	; (1fd00 <time_slot_callback_abort+0x1c>)
   1fcf4:	2106      	movs	r1, #6
}
   1fcf6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	time_slot_delay(ticks_at_expire,
   1fcfa:	f7ff bfb5 	b.w	1fc68 <time_slot_delay>
   1fcfe:	bf00      	nop
   1fd00:	0001fd05 	.word	0x0001fd05

0001fd04 <time_slot_callback_work>:
{
   1fd04:	b513      	push	{r0, r1, r4, lr}
   1fd06:	461c      	mov	r4, r3
	__ASSERT(ll_radio_state_is_idle(),
   1fd08:	f00c f83d 	bl	2bd86 <ll_radio_state_is_idle>
   1fd0c:	b940      	cbnz	r0, 1fd20 <time_slot_callback_work+0x1c>
   1fd0e:	4911      	ldr	r1, [pc, #68]	; (1fd54 <time_slot_callback_work+0x50>)
   1fd10:	4811      	ldr	r0, [pc, #68]	; (1fd58 <time_slot_callback_work+0x54>)
   1fd12:	2240      	movs	r2, #64	; 0x40
   1fd14:	f007 f92b 	bl	26f6e <printk>
   1fd18:	2140      	movs	r1, #64	; 0x40
   1fd1a:	480e      	ldr	r0, [pc, #56]	; (1fd54 <time_slot_callback_work+0x50>)
   1fd1c:	f007 fba0 	bl	27460 <assert_post_action>
	rc = op_desc->handler(op_desc->context);
   1fd20:	e9d4 3000 	ldrd	r3, r0, [r4]
   1fd24:	4798      	blx	r3
	if (rc != FLASH_OP_ONGOING) {
   1fd26:	2801      	cmp	r0, #1
	rc = op_desc->handler(op_desc->context);
   1fd28:	4604      	mov	r4, r0
	if (rc != FLASH_OP_ONGOING) {
   1fd2a:	d011      	beq.n	1fd50 <time_slot_callback_work+0x4c>
		ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   1fd2c:	f10d 0107 	add.w	r1, sp, #7
   1fd30:	f10d 0006 	add.w	r0, sp, #6
   1fd34:	f00c f822 	bl	2bd7c <ll_timeslice_ticker_id_get>
		_ticker_stop(instance_index, 0, ticker_id);
   1fd38:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1fd3c:	f89d 0006 	ldrb.w	r0, [sp, #6]
   1fd40:	2100      	movs	r1, #0
   1fd42:	f7ff ff77 	bl	1fc34 <_ticker_stop>
		_ticker_sync_context.result = (rc == FLASH_OP_DONE) ? 0 : rc;
   1fd46:	4b05      	ldr	r3, [pc, #20]	; (1fd5c <time_slot_callback_work+0x58>)
   1fd48:	60dc      	str	r4, [r3, #12]
   1fd4a:	4805      	ldr	r0, [pc, #20]	; (1fd60 <time_slot_callback_work+0x5c>)
   1fd4c:	f003 fdb6 	bl	238bc <z_impl_k_sem_give>
}
   1fd50:	b002      	add	sp, #8
   1fd52:	bd10      	pop	{r4, pc}
   1fd54:	000355dc 	.word	0x000355dc
   1fd58:	0002fa94 	.word	0x0002fa94
   1fd5c:	200044dc 	.word	0x200044dc
   1fd60:	200044ec 	.word	0x200044ec

0001fd64 <nrf_flash_sync_init>:
{
   1fd64:	b508      	push	{r3, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1fd66:	2201      	movs	r2, #1
   1fd68:	2100      	movs	r1, #0
   1fd6a:	4802      	ldr	r0, [pc, #8]	; (1fd74 <nrf_flash_sync_init+0x10>)
   1fd6c:	f00d fad5 	bl	2d31a <z_impl_k_sem_init>
}
   1fd70:	2000      	movs	r0, #0
   1fd72:	bd08      	pop	{r3, pc}
   1fd74:	200044ec 	.word	0x200044ec

0001fd78 <nrf_flash_sync_set_context>:
	_ticker_sync_context.interval = duration - FLASH_SYNC_SWITCHING_TIME;
   1fd78:	4b02      	ldr	r3, [pc, #8]	; (1fd84 <nrf_flash_sync_set_context+0xc>)
   1fd7a:	f2a0 62a4 	subw	r2, r0, #1700	; 0x6a4
	_ticker_sync_context.slot = duration;
   1fd7e:	e9c3 2000 	strd	r2, r0, [r3]
}
   1fd82:	4770      	bx	lr
   1fd84:	200044dc 	.word	0x200044dc

0001fd88 <nrf_flash_sync_get_timestamp_begin>:
{
   1fd88:	b508      	push	{r3, lr}
	_ticker_sync_context.ticks_begin = ticker_ticks_now_get();
   1fd8a:	f00b ff6a 	bl	2bc62 <ticker_ticks_now_get>
   1fd8e:	4b01      	ldr	r3, [pc, #4]	; (1fd94 <nrf_flash_sync_get_timestamp_begin+0xc>)
   1fd90:	6098      	str	r0, [r3, #8]
}
   1fd92:	bd08      	pop	{r3, pc}
   1fd94:	200044dc 	.word	0x200044dc

0001fd98 <random_byte_get>:
	__asm__ volatile(
   1fd98:	f04f 0320 	mov.w	r3, #32
   1fd9c:	f3ef 8211 	mrs	r2, BASEPRI
   1fda0:	f383 8811 	msr	BASEPRI, r3
   1fda4:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1fda8:	4b08      	ldr	r3, [pc, #32]	; (1fdcc <random_byte_get+0x34>)
   1fdaa:	6819      	ldr	r1, [r3, #0]
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1fdac:	b159      	cbz	r1, 1fdc6 <random_byte_get+0x2e>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1fdae:	4908      	ldr	r1, [pc, #32]	; (1fdd0 <random_byte_get+0x38>)
   1fdb0:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1fdb4:	2100      	movs	r1, #0
   1fdb6:	6019      	str	r1, [r3, #0]
   1fdb8:	681b      	ldr	r3, [r3, #0]
		retval = nrf_rng_random_value_get(NRF_RNG);
   1fdba:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   1fdbc:	f382 8811 	msr	BASEPRI, r2
   1fdc0:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   1fdc4:	4770      	bx	lr
	int retval = -EAGAIN;
   1fdc6:	f06f 000a 	mvn.w	r0, #10
   1fdca:	e7f7      	b.n	1fdbc <random_byte_get+0x24>
   1fdcc:	4000d100 	.word	0x4000d100
   1fdd0:	4000d000 	.word	0x4000d000

0001fdd4 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   1fdd4:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t last  = rngp->last;
   1fdd6:	7883      	ldrb	r3, [r0, #2]
	uint32_t mask  = rngp->mask;
   1fdd8:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   1fdda:	f04f 0420 	mov.w	r4, #32
   1fdde:	f3ef 8e11 	mrs	lr, BASEPRI
   1fde2:	f384 8811 	msr	BASEPRI, r4
   1fde6:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   1fdea:	7806      	ldrb	r6, [r0, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1fdec:	f890 c001 	ldrb.w	ip, [r0, #1]

	available = (last - first) & mask;
   1fdf0:	1b9b      	subs	r3, r3, r6
   1fdf2:	403b      	ands	r3, r7
	if (available < len) {
   1fdf4:	429a      	cmp	r2, r3
		len = available;
   1fdf6:	bf88      	it	hi
   1fdf8:	b29a      	uxthhi	r2, r3

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1fdfa:	18b4      	adds	r4, r6, r2
   1fdfc:	403c      	ands	r4, r7
	first = rngp->first_alloc;
   1fdfe:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   1fe00:	7004      	strb	r4, [r0, #0]
	__asm__ volatile(
   1fe02:	f38e 8811 	msr	BASEPRI, lr
   1fe06:	f3bf 8f6f 	isb	sy
   1fe0a:	440a      	add	r2, r1
	uint8_t *dst   = buf;
   1fe0c:	460c      	mov	r4, r1
	irq_unlock(key);

	while (likely(len--)) {
   1fe0e:	42a2      	cmp	r2, r4
   1fe10:	d11a      	bne.n	1fe48 <rng_pool_get+0x74>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1fe12:	4566      	cmp	r6, ip
   1fe14:	d10d      	bne.n	1fe32 <rng_pool_get+0x5e>
	__asm__ volatile(
   1fe16:	f04f 0520 	mov.w	r5, #32
   1fe1a:	f3ef 8211 	mrs	r2, BASEPRI
   1fe1e:	f385 8811 	msr	BASEPRI, r5
   1fe22:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1fe26:	7805      	ldrb	r5, [r0, #0]
   1fe28:	7045      	strb	r5, [r0, #1]
	__asm__ volatile(
   1fe2a:	f382 8811 	msr	BASEPRI, r2
   1fe2e:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   1fe32:	1a64      	subs	r4, r4, r1
   1fe34:	b2a2      	uxth	r2, r4
	available = available - len;
	if (available <= rngp->threshold) {
   1fe36:	7901      	ldrb	r1, [r0, #4]
	available = available - len;
   1fe38:	1a9c      	subs	r4, r3, r2
	if (available <= rngp->threshold) {
   1fe3a:	42a1      	cmp	r1, r4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1fe3c:	bf22      	ittt	cs
   1fe3e:	4b07      	ldrcs	r3, [pc, #28]	; (1fe5c <rng_pool_get+0x88>)
   1fe40:	2101      	movcs	r1, #1
   1fe42:	6019      	strcs	r1, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   1fe44:	4610      	mov	r0, r2
   1fe46:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   1fe48:	eb00 0e05 	add.w	lr, r0, r5
		first = (first + 1) & mask;
   1fe4c:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   1fe4e:	f89e e005 	ldrb.w	lr, [lr, #5]
   1fe52:	f804 eb01 	strb.w	lr, [r4], #1
		first = (first + 1) & mask;
   1fe56:	403d      	ands	r5, r7
   1fe58:	e7d9      	b.n	1fe0e <rng_pool_get+0x3a>
   1fe5a:	bf00      	nop
   1fe5c:	4000d000 	.word	0x4000d000

0001fe60 <entropy_nrf5_get_entropy_isr>:
}

static int entropy_nrf5_get_entropy_isr(const struct device *dev,
					uint8_t *buf, uint16_t len,
					uint32_t flags)
{
   1fe60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1fe64:	4614      	mov	r4, r2
   1fe66:	461d      	mov	r5, r3
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   1fe68:	68c2      	ldr	r2, [r0, #12]
   1fe6a:	4b2c      	ldr	r3, [pc, #176]	; (1ff1c <entropy_nrf5_get_entropy_isr+0xbc>)
   1fe6c:	429a      	cmp	r2, r3
{
   1fe6e:	4688      	mov	r8, r1
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   1fe70:	d00a      	beq.n	1fe88 <entropy_nrf5_get_entropy_isr+0x28>
   1fe72:	492b      	ldr	r1, [pc, #172]	; (1ff20 <entropy_nrf5_get_entropy_isr+0xc0>)
   1fe74:	482b      	ldr	r0, [pc, #172]	; (1ff24 <entropy_nrf5_get_entropy_isr+0xc4>)
   1fe76:	f44f 7284 	mov.w	r2, #264	; 0x108
   1fe7a:	f007 f878 	bl	26f6e <printk>
   1fe7e:	f44f 7184 	mov.w	r1, #264	; 0x108
   1fe82:	4827      	ldr	r0, [pc, #156]	; (1ff20 <entropy_nrf5_get_entropy_isr+0xc0>)
   1fe84:	f007 faec 	bl	27460 <assert_post_action>

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1fe88:	07eb      	lsls	r3, r5, #31
   1fe8a:	d406      	bmi.n	1fe9a <entropy_nrf5_get_entropy_isr+0x3a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   1fe8c:	4622      	mov	r2, r4
   1fe8e:	4641      	mov	r1, r8
   1fe90:	4825      	ldr	r0, [pc, #148]	; (1ff28 <entropy_nrf5_get_entropy_isr+0xc8>)
   1fe92:	f7ff ff9f 	bl	1fdd4 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   1fe96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   1fe9a:	2c00      	cmp	r4, #0
   1fe9c:	d035      	beq.n	1ff0a <entropy_nrf5_get_entropy_isr+0xaa>
	__asm__ volatile(
   1fe9e:	f04f 0320 	mov.w	r3, #32
   1fea2:	f3ef 8511 	mrs	r5, BASEPRI
   1fea6:	f383 8811 	msr	BASEPRI, r3
   1feaa:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   1feae:	200d      	movs	r0, #13
   1feb0:	f7e6 ff40 	bl	6d34 <arch_irq_is_enabled>
   1feb4:	4681      	mov	r9, r0
		irq_disable(IRQN);
   1feb6:	200d      	movs	r0, #13
   1feb8:	f7e6 ff28 	bl	6d0c <arch_irq_disable>
	__asm__ volatile(
   1febc:	f385 8811 	msr	BASEPRI, r5
   1fec0:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1fec4:	4919      	ldr	r1, [pc, #100]	; (1ff2c <entropy_nrf5_get_entropy_isr+0xcc>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1fec6:	4e1a      	ldr	r6, [pc, #104]	; (1ff30 <entropy_nrf5_get_entropy_isr+0xd0>)
   1fec8:	2300      	movs	r3, #0
   1feca:	600b      	str	r3, [r1, #0]
   1fecc:	680b      	ldr	r3, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1fece:	4b19      	ldr	r3, [pc, #100]	; (1ff34 <entropy_nrf5_get_entropy_isr+0xd4>)
   1fed0:	2201      	movs	r2, #1
   1fed2:	f44f 5700 	mov.w	r7, #8192	; 0x2000
   1fed6:	601a      	str	r2, [r3, #0]
   1fed8:	4625      	mov	r5, r4
   1feda:	f8c6 7180 	str.w	r7, [r6, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1fede:	468a      	mov	sl, r1
   1fee0:	f8da 3000 	ldr.w	r3, [sl]
			while (!nrf_rng_event_check(NRF_RNG,
   1fee4:	b19b      	cbz	r3, 1ff0e <entropy_nrf5_get_entropy_isr+0xae>
			byte = random_byte_get();
   1fee6:	f7ff ff57 	bl	1fd98 <random_byte_get>
			if (byte < 0) {
   1feea:	2800      	cmp	r0, #0
   1feec:	f8c6 7180 	str.w	r7, [r6, #384]	; 0x180
   1fef0:	dbf6      	blt.n	1fee0 <entropy_nrf5_get_entropy_isr+0x80>
   1fef2:	3d01      	subs	r5, #1
   1fef4:	b2ad      	uxth	r5, r5
			buf[--len] = byte;
   1fef6:	f808 0005 	strb.w	r0, [r8, r5]
		} while (len);
   1fefa:	2d00      	cmp	r5, #0
   1fefc:	d1f0      	bne.n	1fee0 <entropy_nrf5_get_entropy_isr+0x80>
		if (irq_enabled) {
   1fefe:	f1b9 0f00 	cmp.w	r9, #0
   1ff02:	d002      	beq.n	1ff0a <entropy_nrf5_get_entropy_isr+0xaa>
			irq_enable(IRQN);
   1ff04:	200d      	movs	r0, #13
   1ff06:	f7e6 fef1 	bl	6cec <arch_irq_enable>
	return cnt;
   1ff0a:	4620      	mov	r0, r4
   1ff0c:	e7c3      	b.n	1fe96 <entropy_nrf5_get_entropy_isr+0x36>
   1ff0e:	f3bf 8f4f 	dsb	sy
				__WFE();
   1ff12:	bf20      	wfe
				__SEV();
   1ff14:	bf40      	sev
				__WFE();
   1ff16:	bf20      	wfe
   1ff18:	e7e2      	b.n	1fee0 <entropy_nrf5_get_entropy_isr+0x80>
   1ff1a:	bf00      	nop
   1ff1c:	20004504 	.word	0x20004504
   1ff20:	00035614 	.word	0x00035614
   1ff24:	0002fa94 	.word	0x0002fa94
   1ff28:	20004534 	.word	0x20004534
   1ff2c:	4000d100 	.word	0x4000d100
   1ff30:	e000e100 	.word	0xe000e100
   1ff34:	4000d000 	.word	0x4000d000

0001ff38 <entropy_nrf5_get_entropy>:
{
   1ff38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ff3c:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(device));
   1ff3e:	4b1a      	ldr	r3, [pc, #104]	; (1ffa8 <entropy_nrf5_get_entropy+0x70>)
   1ff40:	68c2      	ldr	r2, [r0, #12]
   1ff42:	429a      	cmp	r2, r3
{
   1ff44:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(device));
   1ff46:	d008      	beq.n	1ff5a <entropy_nrf5_get_entropy+0x22>
   1ff48:	4918      	ldr	r1, [pc, #96]	; (1ffac <entropy_nrf5_get_entropy+0x74>)
   1ff4a:	4819      	ldr	r0, [pc, #100]	; (1ffb0 <entropy_nrf5_get_entropy+0x78>)
   1ff4c:	22ea      	movs	r2, #234	; 0xea
   1ff4e:	f007 f80e 	bl	26f6e <printk>
   1ff52:	21ea      	movs	r1, #234	; 0xea
   1ff54:	4815      	ldr	r0, [pc, #84]	; (1ffac <entropy_nrf5_get_entropy+0x74>)
   1ff56:	f007 fa83 	bl	27460 <assert_post_action>
	return z_impl_k_sem_take(sem, timeout);
   1ff5a:	4d13      	ldr	r5, [pc, #76]	; (1ffa8 <entropy_nrf5_get_entropy+0x70>)
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1ff5c:	f105 0845 	add.w	r8, r5, #69	; 0x45
   1ff60:	f105 0918 	add.w	r9, r5, #24
	while (len) {
   1ff64:	b914      	cbnz	r4, 1ff6c <entropy_nrf5_get_entropy+0x34>
}
   1ff66:	4620      	mov	r0, r4
   1ff68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1ff6c:	f04f 33ff 	mov.w	r3, #4294967295
   1ff70:	f04f 32ff 	mov.w	r2, #4294967295
   1ff74:	4628      	mov	r0, r5
   1ff76:	f003 fcdd 	bl	23934 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1ff7a:	4622      	mov	r2, r4
   1ff7c:	4631      	mov	r1, r6
   1ff7e:	4640      	mov	r0, r8
   1ff80:	f7ff ff28 	bl	1fdd4 <rng_pool_get>
   1ff84:	4607      	mov	r7, r0
	z_impl_k_sem_give(sem);
   1ff86:	4628      	mov	r0, r5
   1ff88:	f003 fc98 	bl	238bc <z_impl_k_sem_give>
		if (bytes == 0U) {
   1ff8c:	b93f      	cbnz	r7, 1ff9e <entropy_nrf5_get_entropy+0x66>
	return z_impl_k_sem_take(sem, timeout);
   1ff8e:	f04f 32ff 	mov.w	r2, #4294967295
   1ff92:	f04f 33ff 	mov.w	r3, #4294967295
   1ff96:	4648      	mov	r0, r9
   1ff98:	f003 fccc 	bl	23934 <z_impl_k_sem_take>
			continue;
   1ff9c:	e7e2      	b.n	1ff64 <entropy_nrf5_get_entropy+0x2c>
		len -= bytes;
   1ff9e:	1be4      	subs	r4, r4, r7
   1ffa0:	b2a4      	uxth	r4, r4
		buf += bytes;
   1ffa2:	443e      	add	r6, r7
   1ffa4:	e7de      	b.n	1ff64 <entropy_nrf5_get_entropy+0x2c>
   1ffa6:	bf00      	nop
   1ffa8:	20004504 	.word	0x20004504
   1ffac:	00035614 	.word	0x00035614
   1ffb0:	0002fa94 	.word	0x0002fa94

0001ffb4 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *device)
{
   1ffb4:	b538      	push	{r3, r4, r5, lr}
	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(device));
   1ffb6:	4c1f      	ldr	r4, [pc, #124]	; (20034 <entropy_nrf5_init+0x80>)
   1ffb8:	68c3      	ldr	r3, [r0, #12]
   1ffba:	42a3      	cmp	r3, r4
   1ffbc:	d00a      	beq.n	1ffd4 <entropy_nrf5_init+0x20>
   1ffbe:	491e      	ldr	r1, [pc, #120]	; (20038 <entropy_nrf5_init+0x84>)
   1ffc0:	481e      	ldr	r0, [pc, #120]	; (2003c <entropy_nrf5_init+0x88>)
   1ffc2:	f240 1257 	movw	r2, #343	; 0x157
   1ffc6:	f006 ffd2 	bl	26f6e <printk>
   1ffca:	f240 1157 	movw	r1, #343	; 0x157
   1ffce:	481a      	ldr	r0, [pc, #104]	; (20038 <entropy_nrf5_init+0x84>)
   1ffd0:	f007 fa46 	bl	27460 <assert_post_action>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1ffd4:	2201      	movs	r2, #1
   1ffd6:	4611      	mov	r1, r2
   1ffd8:	4816      	ldr	r0, [pc, #88]	; (20034 <entropy_nrf5_init+0x80>)
   1ffda:	f00d f99e 	bl	2d31a <z_impl_k_sem_init>
   1ffde:	2201      	movs	r2, #1
   1ffe0:	2100      	movs	r1, #0
   1ffe2:	4817      	ldr	r0, [pc, #92]	; (20040 <entropy_nrf5_init+0x8c>)
   1ffe4:	f00d f999 	bl	2d31a <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   1ffe8:	f240 4307 	movw	r3, #1031	; 0x407
   1ffec:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   1fff0:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1fff4:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   1fff6:	230c      	movs	r3, #12
   1fff8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   1fffc:	2500      	movs	r5, #0
}

NRF_STATIC_INLINE void nrf_rng_error_correction_enable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   1fffe:	4b11      	ldr	r3, [pc, #68]	; (20044 <entropy_nrf5_init+0x90>)
   20000:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   20004:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   20008:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   2000c:	f042 0201 	orr.w	r2, r2, #1
   20010:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   20014:	4a0c      	ldr	r2, [pc, #48]	; (20048 <entropy_nrf5_init+0x94>)
    p_reg->INTENSET = mask;
   20016:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   20018:	6015      	str	r5, [r2, #0]
   2001a:	6812      	ldr	r2, [r2, #0]
    p_reg->INTENSET = mask;
   2001c:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   20020:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   20022:	6019      	str	r1, [r3, #0]
   20024:	200d      	movs	r0, #13
   20026:	f7e6 fe93 	bl	6d50 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   2002a:	200d      	movs	r0, #13
   2002c:	f7e6 fe5e 	bl	6cec <arch_irq_enable>

	return 0;
}
   20030:	4628      	mov	r0, r5
   20032:	bd38      	pop	{r3, r4, r5, pc}
   20034:	20004504 	.word	0x20004504
   20038:	00035614 	.word	0x00035614
   2003c:	0002fa94 	.word	0x0002fa94
   20040:	2000451c 	.word	0x2000451c
   20044:	4000d000 	.word	0x4000d000
   20048:	4000d100 	.word	0x4000d100

0002004c <isr>:
{
   2004c:	b510      	push	{r4, lr}
	byte = random_byte_get();
   2004e:	f7ff fea3 	bl	1fd98 <random_byte_get>
	if (byte < 0) {
   20052:	2800      	cmp	r0, #0
   20054:	db20      	blt.n	20098 <isr+0x4c>
	uint8_t last  = rngp->last;
   20056:	4b17      	ldr	r3, [pc, #92]	; (200b4 <isr+0x68>)
   20058:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   2005c:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   20060:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   20064:	1a51      	subs	r1, r2, r1
   20066:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   2006a:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   2006c:	d10d      	bne.n	2008a <isr+0x3e>
	uint8_t last  = rngp->last;
   2006e:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   20072:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   20076:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   2007a:	1a51      	subs	r1, r2, r1
   2007c:	ea34 0101 	bics.w	r1, r4, r1
   20080:	d10b      	bne.n	2009a <isr+0x4e>
   20082:	4b0d      	ldr	r3, [pc, #52]	; (200b8 <isr+0x6c>)
   20084:	2201      	movs	r2, #1
   20086:	601a      	str	r2, [r3, #0]
   20088:	e00e      	b.n	200a8 <isr+0x5c>
	rngp->buffer[last] = byte;
   2008a:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   2008c:	3201      	adds	r2, #1
   2008e:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   20090:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   20094:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   20098:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   2009a:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   2009c:	3201      	adds	r2, #1
   2009e:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   200a0:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   200a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   200a8:	4804      	ldr	r0, [pc, #16]	; (200bc <isr+0x70>)
}
   200aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   200ae:	f003 bc05 	b.w	238bc <z_impl_k_sem_give>
   200b2:	bf00      	nop
   200b4:	20004504 	.word	0x20004504
   200b8:	4000d004 	.word	0x4000d004
   200bc:	2000451c 	.word	0x2000451c

000200c0 <entropy_cc3xx_rng_get_entropy>:

static int entropy_cc3xx_rng_get_entropy(
	const struct device *dev,
	uint8_t *buffer,
	uint16_t length)
{
   200c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   200c2:	460d      	mov	r5, r1
   200c4:	4614      	mov	r4, r2
	int res = -EINVAL;
	size_t olen;

	__ASSERT_NO_MSG(dev != NULL);
   200c6:	b940      	cbnz	r0, 200da <entropy_cc3xx_rng_get_entropy+0x1a>
   200c8:	490f      	ldr	r1, [pc, #60]	; (20108 <entropy_cc3xx_rng_get_entropy+0x48>)
   200ca:	4810      	ldr	r0, [pc, #64]	; (2010c <entropy_cc3xx_rng_get_entropy+0x4c>)
   200cc:	221f      	movs	r2, #31
   200ce:	f006 ff4e 	bl	26f6e <printk>
   200d2:	211f      	movs	r1, #31
   200d4:	480c      	ldr	r0, [pc, #48]	; (20108 <entropy_cc3xx_rng_get_entropy+0x48>)
   200d6:	f007 f9c3 	bl	27460 <assert_post_action>
	__ASSERT_NO_MSG(buffer != NULL);
   200da:	b945      	cbnz	r5, 200ee <entropy_cc3xx_rng_get_entropy+0x2e>
   200dc:	490a      	ldr	r1, [pc, #40]	; (20108 <entropy_cc3xx_rng_get_entropy+0x48>)
   200de:	480b      	ldr	r0, [pc, #44]	; (2010c <entropy_cc3xx_rng_get_entropy+0x4c>)
   200e0:	2220      	movs	r2, #32
   200e2:	f006 ff44 	bl	26f6e <printk>
   200e6:	2120      	movs	r1, #32
   200e8:	4807      	ldr	r0, [pc, #28]	; (20108 <entropy_cc3xx_rng_get_entropy+0x48>)
   200ea:	f007 f9b9 	bl	27460 <assert_post_action>
#else
	/** This is a call from a secure app, in which case entropy is
	 *  gathered using CC3xx HW using the
	 *  nrf_cc310_platform/nrf_cc312_platform library.
	 */
	res = nrf_cc3xx_platform_entropy_get(buffer, length, &olen);
   200ee:	aa01      	add	r2, sp, #4
   200f0:	4621      	mov	r1, r4
   200f2:	4628      	mov	r0, r5
   200f4:	f004 fdd2 	bl	24c9c <nrf_cc3xx_platform_entropy_get>
	if (olen != length) {
   200f8:	9b01      	ldr	r3, [sp, #4]
		return -EINVAL;
   200fa:	429c      	cmp	r4, r3
	}
#endif

	return res;
}
   200fc:	bf18      	it	ne
   200fe:	f06f 0015 	mvnne.w	r0, #21
   20102:	b003      	add	sp, #12
   20104:	bd30      	pop	{r4, r5, pc}
   20106:	bf00      	nop
   20108:	00035646 	.word	0x00035646
   2010c:	0002fa94 	.word	0x0002fa94

00020110 <k_sys_fatal_error_handler>:
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
   20110:	4803      	ldr	r0, [pc, #12]	; (20120 <k_sys_fatal_error_handler+0x10>)
{
   20112:	b508      	push	{r3, lr}
	LOG_ERR("Resetting system");
   20114:	2145      	movs	r1, #69	; 0x45
   20116:	f006 ff2a 	bl	26f6e <printk>
	sys_arch_reboot(0);
   2011a:	2000      	movs	r0, #0
   2011c:	f7e7 fb08 	bl	7730 <sys_arch_reboot>

	CODE_UNREACHABLE;
   20120:	00035695 	.word	0x00035695

00020124 <handle_series_get>:
}

static void handle_series_get(struct bt_mesh_model *mod,
			      struct bt_mesh_msg_ctx *ctx,
			      struct net_buf_simple *buf)
{
   20124:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_mesh_sensor_srv *srv = mod->user_data;
	const struct bt_mesh_sensor_format *col_format;

	if (buf->len < 2) {
   20128:	8893      	ldrh	r3, [r2, #4]
   2012a:	2b01      	cmp	r3, #1
{
   2012c:	b0a9      	sub	sp, #164	; 0xa4
   2012e:	4680      	mov	r8, r0
   20130:	4689      	mov	r9, r1
   20132:	4615      	mov	r5, r2
	if (buf->len < 2) {
   20134:	d941      	bls.n	201ba <handle_series_get+0x96>
	struct bt_mesh_sensor_srv *srv = mod->user_data;
   20136:	6984      	ldr	r4, [r0, #24]
		return;
	}

	uint16_t id = net_buf_simple_pull_le16(buf);
   20138:	4610      	mov	r0, r2
   2013a:	f00c fc14 	bl	2c966 <net_buf_simple_pull_le16>

	if (id == BT_MESH_PROP_ID_PROHIBITED) {
   2013e:	4606      	mov	r6, r0
   20140:	2800      	cmp	r0, #0
   20142:	d03a      	beq.n	201ba <handle_series_get+0x96>
		return;
	}

	struct bt_mesh_sensor *sensor = sensor_get(srv, id);
   20144:	4601      	mov	r1, r0
   20146:	4620      	mov	r0, r4
   20148:	f00c fdc9 	bl	2ccde <sensor_get>

	NET_BUF_SIMPLE_DEFINE(rsp, BT_MESH_TX_SDU_MAX);
   2014c:	ab0a      	add	r3, sp, #40	; 0x28
	struct bt_mesh_sensor *sensor = sensor_get(srv, id);
   2014e:	4604      	mov	r4, r0
	NET_BUF_SIMPLE_DEFINE(rsp, BT_MESH_TX_SDU_MAX);
   20150:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
	bt_mesh_model_msg_init(&rsp, BT_MESH_SENSOR_OP_SERIES_STATUS);
   20154:	2154      	movs	r1, #84	; 0x54
   20156:	a803      	add	r0, sp, #12
	NET_BUF_SIMPLE_DEFINE(rsp, BT_MESH_TX_SDU_MAX);
   20158:	9303      	str	r3, [sp, #12]
   2015a:	e9cd 2304 	strd	r2, r3, [sp, #16]
	bt_mesh_model_msg_init(&rsp, BT_MESH_SENSOR_OP_SERIES_STATUS);
   2015e:	f00a fde6 	bl	2ad2e <bt_mesh_model_msg_init>
	net_buf_simple_add_le16(&rsp, id);
   20162:	4631      	mov	r1, r6
   20164:	a803      	add	r0, sp, #12
   20166:	f00c fc4f 	bl	2ca08 <net_buf_simple_add_le16>

	if (!sensor) {
   2016a:	b174      	cbz	r4, 2018a <handle_series_get+0x66>
		goto respond;
	}

	col_format = bt_mesh_sensor_column_format_get(sensor->type);
   2016c:	6820      	ldr	r0, [r4, #0]
   2016e:	f000 fd69 	bl	20c44 <bt_mesh_sensor_column_format_get>
	if (!col_format || !sensor->series.columns || !sensor->series.get) {
   20172:	4607      	mov	r7, r0
   20174:	b118      	cbz	r0, 2017e <handle_series_get+0x5a>
   20176:	6923      	ldr	r3, [r4, #16]
   20178:	b10b      	cbz	r3, 2017e <handle_series_get+0x5a>
   2017a:	69a3      	ldr	r3, [r4, #24]
   2017c:	b96b      	cbnz	r3, 2019a <handle_series_get+0x76>
		BT_WARN("No series support in 0x%04x", sensor->type->id);
   2017e:	6823      	ldr	r3, [r4, #0]
   20180:	4825      	ldr	r0, [pc, #148]	; (20218 <handle_series_get+0xf4>)
   20182:	881a      	ldrh	r2, [r3, #0]
   20184:	2157      	movs	r1, #87	; 0x57
   20186:	f006 fef2 	bl	26f6e <printk>
			return;
		}
	}

respond:
	bt_mesh_model_send(mod, ctx, &rsp, NULL, NULL);
   2018a:	2300      	movs	r3, #0
   2018c:	9300      	str	r3, [sp, #0]
   2018e:	aa03      	add	r2, sp, #12
   20190:	4649      	mov	r1, r9
   20192:	4640      	mov	r0, r8
   20194:	f00a fdf4 	bl	2ad80 <bt_mesh_model_send>
   20198:	e00f      	b.n	201ba <handle_series_get+0x96>
	bool ranged = (buf->len != 0);
   2019a:	88ae      	ldrh	r6, [r5, #4]
	if (buf->len == col_format->size * 2) {
   2019c:	68c3      	ldr	r3, [r0, #12]
   2019e:	ebb6 0f43 	cmp.w	r6, r3, lsl #1
   201a2:	d12a      	bne.n	201fa <handle_series_get+0xd6>
		err = sensor_ch_decode(buf, col_format, &range.start);
   201a4:	aa06      	add	r2, sp, #24
   201a6:	4601      	mov	r1, r0
   201a8:	4628      	mov	r0, r5
   201aa:	f00c fef5 	bl	2cf98 <sensor_ch_decode>
		if (err) {
   201ae:	4602      	mov	r2, r0
   201b0:	b130      	cbz	r0, 201c0 <handle_series_get+0x9c>
			BT_WARN("Range start decode failed: %d", err);
   201b2:	481a      	ldr	r0, [pc, #104]	; (2021c <handle_series_get+0xf8>)
   201b4:	2157      	movs	r1, #87	; 0x57
			BT_WARN("Failed encoding: %d", err);
   201b6:	f006 feda 	bl	26f6e <printk>
}
   201ba:	b029      	add	sp, #164	; 0xa4
   201bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = sensor_ch_decode(buf, col_format, &range.end);
   201c0:	aa08      	add	r2, sp, #32
   201c2:	4639      	mov	r1, r7
   201c4:	4628      	mov	r0, r5
   201c6:	f00c fee7 	bl	2cf98 <sensor_ch_decode>
		if (err) {
   201ca:	4602      	mov	r2, r0
   201cc:	b990      	cbnz	r0, 201f4 <handle_series_get+0xd0>
{
   201ce:	2500      	movs	r5, #0
	for (uint32_t i = 0; i < sensor->series.column_count; ++i) {
   201d0:	6963      	ldr	r3, [r4, #20]
   201d2:	429d      	cmp	r5, r3
   201d4:	d2d9      	bcs.n	2018a <handle_series_get+0x66>
		const struct bt_mesh_sensor_column *col =
   201d6:	6927      	ldr	r7, [r4, #16]
   201d8:	eb07 1705 	add.w	r7, r7, r5, lsl #4
		if (ranged &&
   201dc:	b99e      	cbnz	r6, 20206 <handle_series_get+0xe2>
		int err = sensor_column_encode(&rsp, sensor, ctx, col);
   201de:	464a      	mov	r2, r9
   201e0:	463b      	mov	r3, r7
   201e2:	4621      	mov	r1, r4
   201e4:	a803      	add	r0, sp, #12
   201e6:	f000 fd3b 	bl	20c60 <sensor_column_encode>
		if (err) {
   201ea:	4602      	mov	r2, r0
   201ec:	b188      	cbz	r0, 20212 <handle_series_get+0xee>
			BT_WARN("Failed encoding: %d", err);
   201ee:	2157      	movs	r1, #87	; 0x57
   201f0:	480b      	ldr	r0, [pc, #44]	; (20220 <handle_series_get+0xfc>)
   201f2:	e7e0      	b.n	201b6 <handle_series_get+0x92>
			BT_WARN("Range end decode failed: %d", err);
   201f4:	2157      	movs	r1, #87	; 0x57
   201f6:	480b      	ldr	r0, [pc, #44]	; (20224 <handle_series_get+0x100>)
   201f8:	e7dd      	b.n	201b6 <handle_series_get+0x92>
	} else if (buf->len != 0) {
   201fa:	2e00      	cmp	r6, #0
   201fc:	d0e7      	beq.n	201ce <handle_series_get+0xaa>
		BT_WARN("Invalid length (%u)", buf->len);
   201fe:	4632      	mov	r2, r6
   20200:	2157      	movs	r1, #87	; 0x57
   20202:	4809      	ldr	r0, [pc, #36]	; (20228 <handle_series_get+0x104>)
   20204:	e7d7      	b.n	201b6 <handle_series_get+0x92>
		    !bt_mesh_sensor_value_in_column(&col->start, &range)) {
   20206:	a906      	add	r1, sp, #24
   20208:	4638      	mov	r0, r7
   2020a:	f00c ff01 	bl	2d010 <bt_mesh_sensor_value_in_column>
		if (ranged &&
   2020e:	2800      	cmp	r0, #0
   20210:	d1e5      	bne.n	201de <handle_series_get+0xba>
	for (uint32_t i = 0; i < sensor->series.column_count; ++i) {
   20212:	3501      	adds	r5, #1
   20214:	e7dc      	b.n	201d0 <handle_series_get+0xac>
   20216:	bf00      	nop
   20218:	000357d2 	.word	0x000357d2
   2021c:	000357f3 	.word	0x000357f3
   20220:	00035850 	.word	0x00035850
   20224:	00035816 	.word	0x00035816
   20228:	00035837 	.word	0x00035837

0002022c <handle_column_get>:
{
   2022c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buf->len < 2) {
   20230:	8893      	ldrh	r3, [r2, #4]
   20232:	2b01      	cmp	r3, #1
{
   20234:	b08c      	sub	sp, #48	; 0x30
   20236:	4607      	mov	r7, r0
   20238:	460e      	mov	r6, r1
   2023a:	4690      	mov	r8, r2
	if (buf->len < 2) {
   2023c:	d95e      	bls.n	202fc <handle_column_get+0xd0>
	struct bt_mesh_sensor_srv *srv = mod->user_data;
   2023e:	6984      	ldr	r4, [r0, #24]
	uint16_t id = net_buf_simple_pull_le16(buf);
   20240:	4610      	mov	r0, r2
   20242:	f00c fb90 	bl	2c966 <net_buf_simple_pull_le16>
	if (id == BT_MESH_PROP_ID_PROHIBITED) {
   20246:	4605      	mov	r5, r0
   20248:	2800      	cmp	r0, #0
   2024a:	d057      	beq.n	202fc <handle_column_get+0xd0>
	struct bt_mesh_sensor *sensor = sensor_get(srv, id);
   2024c:	4601      	mov	r1, r0
   2024e:	4620      	mov	r0, r4
   20250:	f00c fd45 	bl	2ccde <sensor_get>
	BT_MESH_MODEL_BUF_DEFINE(rsp, BT_MESH_SENSOR_OP_COLUMN_STATUS,
   20254:	ab07      	add	r3, sp, #28
	struct bt_mesh_sensor *sensor = sensor_get(srv, id);
   20256:	4604      	mov	r4, r0
	BT_MESH_MODEL_BUF_DEFINE(rsp, BT_MESH_SENSOR_OP_COLUMN_STATUS,
   20258:	f44f 1298 	mov.w	r2, #1245184	; 0x130000
	bt_mesh_model_msg_init(&rsp, BT_MESH_SENSOR_OP_COLUMN_STATUS);
   2025c:	2153      	movs	r1, #83	; 0x53
   2025e:	a804      	add	r0, sp, #16
	BT_MESH_MODEL_BUF_DEFINE(rsp, BT_MESH_SENSOR_OP_COLUMN_STATUS,
   20260:	9304      	str	r3, [sp, #16]
   20262:	e9cd 2305 	strd	r2, r3, [sp, #20]
	bt_mesh_model_msg_init(&rsp, BT_MESH_SENSOR_OP_COLUMN_STATUS);
   20266:	f00a fd62 	bl	2ad2e <bt_mesh_model_msg_init>
	net_buf_simple_add_le16(&rsp, id);
   2026a:	4629      	mov	r1, r5
   2026c:	a804      	add	r0, sp, #16
   2026e:	f00c fbcb 	bl	2ca08 <net_buf_simple_add_le16>
	if (!sensor) {
   20272:	b174      	cbz	r4, 20292 <handle_column_get+0x66>
	col_format = bt_mesh_sensor_column_format_get(sensor->type);
   20274:	6820      	ldr	r0, [r4, #0]
   20276:	f000 fce5 	bl	20c44 <bt_mesh_sensor_column_format_get>
	if (!col_format || !sensor->series.columns || !sensor->series.get) {
   2027a:	4605      	mov	r5, r0
   2027c:	b118      	cbz	r0, 20286 <handle_column_get+0x5a>
   2027e:	6923      	ldr	r3, [r4, #16]
   20280:	b10b      	cbz	r3, 20286 <handle_column_get+0x5a>
   20282:	69a3      	ldr	r3, [r4, #24]
   20284:	b96b      	cbnz	r3, 202a2 <handle_column_get+0x76>
		BT_WARN("No series support in 0x%04x", sensor->type->id);
   20286:	6823      	ldr	r3, [r4, #0]
   20288:	481e      	ldr	r0, [pc, #120]	; (20304 <handle_column_get+0xd8>)
   2028a:	881a      	ldrh	r2, [r3, #0]
   2028c:	2157      	movs	r1, #87	; 0x57
   2028e:	f006 fe6e 	bl	26f6e <printk>
	bt_mesh_model_send(mod, ctx, &rsp, NULL, NULL);
   20292:	2300      	movs	r3, #0
   20294:	9300      	str	r3, [sp, #0]
   20296:	aa04      	add	r2, sp, #16
   20298:	4631      	mov	r1, r6
   2029a:	4638      	mov	r0, r7
   2029c:	f00a fd70 	bl	2ad80 <bt_mesh_model_send>
   202a0:	e02c      	b.n	202fc <handle_column_get+0xd0>
	err = sensor_ch_decode(buf, col_format, &col_x);
   202a2:	4601      	mov	r1, r0
   202a4:	aa02      	add	r2, sp, #8
   202a6:	4640      	mov	r0, r8
   202a8:	f00c fe76 	bl	2cf98 <sensor_ch_decode>
	if (err) {
   202ac:	bb30      	cbnz	r0, 202fc <handle_column_get+0xd0>
		    series->columns[i].start.val2 == val->val2) {
   202ae:	e9dd e802 	ldrd	lr, r8, [sp, #8]
	for (uint32_t i = 0; i < series->column_count; ++i) {
   202b2:	f8d4 c014 	ldr.w	ip, [r4, #20]
   202b6:	4560      	cmp	r0, ip
   202b8:	d109      	bne.n	202ce <handle_column_get+0xa2>
		BT_WARN("Unknown column");
   202ba:	2157      	movs	r1, #87	; 0x57
   202bc:	4812      	ldr	r0, [pc, #72]	; (20308 <handle_column_get+0xdc>)
   202be:	f006 fe56 	bl	26f6e <printk>
		sensor_ch_encode(&rsp, col_format, &col_x);
   202c2:	aa02      	add	r2, sp, #8
   202c4:	4629      	mov	r1, r5
   202c6:	a804      	add	r0, sp, #16
   202c8:	f00c fe47 	bl	2cf5a <sensor_ch_encode>
		goto respond;
   202cc:	e7e1      	b.n	20292 <handle_column_get+0x66>
		if (series->columns[i].start.val1 == val->val1 &&
   202ce:	0102      	lsls	r2, r0, #4
   202d0:	6921      	ldr	r1, [r4, #16]
   202d2:	188b      	adds	r3, r1, r2
   202d4:	588a      	ldr	r2, [r1, r2]
   202d6:	4572      	cmp	r2, lr
   202d8:	d102      	bne.n	202e0 <handle_column_get+0xb4>
   202da:	685a      	ldr	r2, [r3, #4]
   202dc:	4542      	cmp	r2, r8
   202de:	d001      	beq.n	202e4 <handle_column_get+0xb8>
	for (uint32_t i = 0; i < series->column_count; ++i) {
   202e0:	3001      	adds	r0, #1
   202e2:	e7e8      	b.n	202b6 <handle_column_get+0x8a>
	err = sensor_column_encode(&rsp, sensor, ctx, col);
   202e4:	4632      	mov	r2, r6
   202e6:	4621      	mov	r1, r4
   202e8:	a804      	add	r0, sp, #16
   202ea:	f000 fcb9 	bl	20c60 <sensor_column_encode>
	if (err) {
   202ee:	4602      	mov	r2, r0
   202f0:	2800      	cmp	r0, #0
   202f2:	d0ce      	beq.n	20292 <handle_column_get+0x66>
		BT_WARN("Failed encoding sensor column: %d", err);
   202f4:	2157      	movs	r1, #87	; 0x57
   202f6:	4805      	ldr	r0, [pc, #20]	; (2030c <handle_column_get+0xe0>)
   202f8:	f006 fe39 	bl	26f6e <printk>
}
   202fc:	b00c      	add	sp, #48	; 0x30
   202fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20302:	bf00      	nop
   20304:	000357d2 	.word	0x000357d2
   20308:	00035777 	.word	0x00035777
   2030c:	00035750 	.word	0x00035750

00020310 <value_get>:
	if (!sensor->get) {
   20310:	69c3      	ldr	r3, [r0, #28]
{
   20312:	b570      	push	{r4, r5, r6, lr}
   20314:	4605      	mov	r5, r0
   20316:	4616      	mov	r6, r2
	if (!sensor->get) {
   20318:	b183      	cbz	r3, 2033c <value_get+0x2c>
	err = sensor->get(sensor, ctx, value);
   2031a:	4798      	blx	r3
	if (err) {
   2031c:	4604      	mov	r4, r0
   2031e:	b140      	cbz	r0, 20332 <value_get+0x22>
		BT_WARN("Value get for 0x%04x: %d", sensor->type->id, err);
   20320:	682a      	ldr	r2, [r5, #0]
   20322:	4603      	mov	r3, r0
   20324:	8812      	ldrh	r2, [r2, #0]
   20326:	4807      	ldr	r0, [pc, #28]	; (20344 <value_get+0x34>)
   20328:	2157      	movs	r1, #87	; 0x57
   2032a:	f006 fe20 	bl	26f6e <printk>
}
   2032e:	4620      	mov	r0, r4
   20330:	bd70      	pop	{r4, r5, r6, pc}
	sensor_cadence_update(sensor, value);
   20332:	4631      	mov	r1, r6
   20334:	4628      	mov	r0, r5
   20336:	f000 fdcd 	bl	20ed4 <sensor_cadence_update>
	return 0;
   2033a:	e7f8      	b.n	2032e <value_get+0x1e>
		return -ENOTSUP;
   2033c:	f06f 0485 	mvn.w	r4, #133	; 0x85
   20340:	e7f5      	b.n	2032e <value_get+0x1e>
   20342:	bf00      	nop
   20344:	00035955 	.word	0x00035955

00020348 <buf_status_add>:
{
   20348:	b570      	push	{r4, r5, r6, lr}
   2034a:	b08a      	sub	sp, #40	; 0x28
   2034c:	460c      	mov	r4, r1
   2034e:	4605      	mov	r5, r0
	struct sensor_value value[CONFIG_BT_MESH_SENSOR_CHANNELS_MAX] = {};
   20350:	2100      	movs	r1, #0
{
   20352:	4616      	mov	r6, r2
	struct sensor_value value[CONFIG_BT_MESH_SENSOR_CHANNELS_MAX] = {};
   20354:	4668      	mov	r0, sp
   20356:	2228      	movs	r2, #40	; 0x28
   20358:	f00d f94f 	bl	2d5fa <memset>
	err = value_get(sensor, ctx, value);
   2035c:	4621      	mov	r1, r4
   2035e:	466a      	mov	r2, sp
   20360:	4628      	mov	r0, r5
   20362:	f7ff ffd5 	bl	20310 <value_get>
	if (err) {
   20366:	4604      	mov	r4, r0
   20368:	b140      	cbz	r0, 2037c <buf_status_add+0x34>
		sensor_status_id_encode(buf, 0, sensor->type->id);
   2036a:	682b      	ldr	r3, [r5, #0]
   2036c:	2100      	movs	r1, #0
   2036e:	881a      	ldrh	r2, [r3, #0]
   20370:	4630      	mov	r0, r6
   20372:	f00c fdc3 	bl	2cefc <sensor_status_id_encode>
}
   20376:	4620      	mov	r0, r4
   20378:	b00a      	add	sp, #40	; 0x28
   2037a:	bd70      	pop	{r4, r5, r6, pc}
	err = sensor_status_encode(buf, sensor, value);
   2037c:	466a      	mov	r2, sp
   2037e:	4629      	mov	r1, r5
   20380:	4630      	mov	r0, r6
   20382:	f00c fe27 	bl	2cfd4 <sensor_status_encode>
	if (err) {
   20386:	4604      	mov	r4, r0
   20388:	2800      	cmp	r0, #0
   2038a:	d0f4      	beq.n	20376 <buf_status_add+0x2e>
		BT_WARN("Sensor value encode for 0x%04x: %d", sensor->type->id,
   2038c:	682a      	ldr	r2, [r5, #0]
   2038e:	4603      	mov	r3, r0
   20390:	8812      	ldrh	r2, [r2, #0]
   20392:	4802      	ldr	r0, [pc, #8]	; (2039c <buf_status_add+0x54>)
   20394:	2157      	movs	r1, #87	; 0x57
   20396:	f006 fdea 	bl	26f6e <printk>
   2039a:	e7e6      	b.n	2036a <buf_status_add+0x22>
   2039c:	000356d3 	.word	0x000356d3

000203a0 <handle_get>:
{
   203a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len != 0 && buf->len != 2) {
   203a2:	8893      	ldrh	r3, [r2, #4]
   203a4:	f023 0302 	bic.w	r3, r3, #2
{
   203a8:	b0a5      	sub	sp, #148	; 0x94
   203aa:	4606      	mov	r6, r0
   203ac:	460d      	mov	r5, r1
   203ae:	4614      	mov	r4, r2
	if (buf->len != 0 && buf->len != 2) {
   203b0:	bb1b      	cbnz	r3, 203fa <handle_get+0x5a>
	NET_BUF_SIMPLE_DEFINE(rsp, BT_MESH_TX_SDU_MAX);
   203b2:	ab06      	add	r3, sp, #24
	struct bt_mesh_sensor_srv *srv = mod->user_data;
   203b4:	6987      	ldr	r7, [r0, #24]
	NET_BUF_SIMPLE_DEFINE(rsp, BT_MESH_TX_SDU_MAX);
   203b6:	9303      	str	r3, [sp, #12]
   203b8:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
	bt_mesh_model_msg_init(&rsp, BT_MESH_SENSOR_OP_STATUS);
   203bc:	2152      	movs	r1, #82	; 0x52
   203be:	a803      	add	r0, sp, #12
	NET_BUF_SIMPLE_DEFINE(rsp, BT_MESH_TX_SDU_MAX);
   203c0:	e9cd 2304 	strd	r2, r3, [sp, #16]
	bt_mesh_model_msg_init(&rsp, BT_MESH_SENSOR_OP_STATUS);
   203c4:	f00a fcb3 	bl	2ad2e <bt_mesh_model_msg_init>
	if (buf->len == 2) {
   203c8:	88a3      	ldrh	r3, [r4, #4]
   203ca:	2b02      	cmp	r3, #2
   203cc:	d122      	bne.n	20414 <handle_get+0x74>
		uint16_t id = net_buf_simple_pull_le16(buf);
   203ce:	4620      	mov	r0, r4
   203d0:	f00c fac9 	bl	2c966 <net_buf_simple_pull_le16>
		if (id == BT_MESH_PROP_ID_PROHIBITED) {
   203d4:	4604      	mov	r4, r0
   203d6:	b180      	cbz	r0, 203fa <handle_get+0x5a>
		sensor = sensor_get(srv, id);
   203d8:	4601      	mov	r1, r0
   203da:	4638      	mov	r0, r7
   203dc:	f00c fc7f 	bl	2ccde <sensor_get>
		if (sensor) {
   203e0:	4607      	mov	r7, r0
   203e2:	b160      	cbz	r0, 203fe <handle_get+0x5e>
			buf_status_add(sensor, ctx, &rsp);
   203e4:	aa03      	add	r2, sp, #12
   203e6:	4629      	mov	r1, r5
   203e8:	f7ff ffae 	bl	20348 <buf_status_add>
	bt_mesh_model_send(mod, ctx, &rsp, NULL, NULL);
   203ec:	2300      	movs	r3, #0
   203ee:	9300      	str	r3, [sp, #0]
   203f0:	aa03      	add	r2, sp, #12
   203f2:	4629      	mov	r1, r5
   203f4:	4630      	mov	r0, r6
   203f6:	f00a fcc3 	bl	2ad80 <bt_mesh_model_send>
}
   203fa:	b025      	add	sp, #148	; 0x94
   203fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			BT_WARN("Unknown sensor ID 0x%04x", id);
   203fe:	4622      	mov	r2, r4
   20400:	2157      	movs	r1, #87	; 0x57
   20402:	480b      	ldr	r0, [pc, #44]	; (20430 <handle_get+0x90>)
   20404:	f006 fdb3 	bl	26f6e <printk>
			sensor_status_id_encode(&rsp, 0, id);
   20408:	4622      	mov	r2, r4
   2040a:	4639      	mov	r1, r7
   2040c:	a803      	add	r0, sp, #12
   2040e:	f00c fd75 	bl	2cefc <sensor_status_id_encode>
   20412:	e7eb      	b.n	203ec <handle_get+0x4c>
	SENSOR_FOR_EACH(&srv->sensors, sensor) {
   20414:	687c      	ldr	r4, [r7, #4]
   20416:	2c00      	cmp	r4, #0
   20418:	d0e8      	beq.n	203ec <handle_get+0x4c>
   2041a:	3c48      	subs	r4, #72	; 0x48
   2041c:	2c00      	cmp	r4, #0
   2041e:	d0e5      	beq.n	203ec <handle_get+0x4c>
		buf_status_add(sensor, ctx, &rsp);
   20420:	4620      	mov	r0, r4
   20422:	aa03      	add	r2, sp, #12
   20424:	4629      	mov	r1, r5
   20426:	f7ff ff8f 	bl	20348 <buf_status_add>
   2042a:	6ca4      	ldr	r4, [r4, #72]	; 0x48
   2042c:	e7f3      	b.n	20416 <handle_get+0x76>
   2042e:	bf00      	nop
   20430:	000357b4 	.word	0x000357b4

00020434 <handle_descriptor_get>:
{
   20434:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len != 0 && buf->len != 2) {
   20436:	8893      	ldrh	r3, [r2, #4]
   20438:	f023 0302 	bic.w	r3, r3, #2
{
   2043c:	b0a5      	sub	sp, #148	; 0x94
   2043e:	4605      	mov	r5, r0
   20440:	460e      	mov	r6, r1
   20442:	4614      	mov	r4, r2
	if (buf->len != 0 && buf->len != 2) {
   20444:	bb13      	cbnz	r3, 2048c <handle_descriptor_get+0x58>
	NET_BUF_SIMPLE_DEFINE(rsp, BT_MESH_TX_SDU_MAX);
   20446:	ab06      	add	r3, sp, #24
	struct bt_mesh_sensor_srv *srv = mod->user_data;
   20448:	6987      	ldr	r7, [r0, #24]
	NET_BUF_SIMPLE_DEFINE(rsp, BT_MESH_TX_SDU_MAX);
   2044a:	9303      	str	r3, [sp, #12]
   2044c:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
	bt_mesh_model_msg_init(&rsp, BT_MESH_SENSOR_OP_DESCRIPTOR_STATUS);
   20450:	2151      	movs	r1, #81	; 0x51
   20452:	a803      	add	r0, sp, #12
	NET_BUF_SIMPLE_DEFINE(rsp, BT_MESH_TX_SDU_MAX);
   20454:	e9cd 2304 	strd	r2, r3, [sp, #16]
	bt_mesh_model_msg_init(&rsp, BT_MESH_SENSOR_OP_DESCRIPTOR_STATUS);
   20458:	f00a fc69 	bl	2ad2e <bt_mesh_model_msg_init>
	if (buf->len == 2) {
   2045c:	88a3      	ldrh	r3, [r4, #4]
   2045e:	2b02      	cmp	r3, #2
   20460:	d11b      	bne.n	2049a <handle_descriptor_get+0x66>
		uint16_t id = net_buf_simple_pull_le16(buf);
   20462:	4620      	mov	r0, r4
   20464:	f00c fa7f 	bl	2c966 <net_buf_simple_pull_le16>
		if (id == BT_MESH_PROP_ID_PROHIBITED) {
   20468:	4602      	mov	r2, r0
   2046a:	b178      	cbz	r0, 2048c <handle_descriptor_get+0x58>
		sensor = sensor_get(srv, id);
   2046c:	4601      	mov	r1, r0
   2046e:	4638      	mov	r0, r7
   20470:	f00c fc35 	bl	2ccde <sensor_get>
		if (sensor) {
   20474:	4601      	mov	r1, r0
   20476:	b158      	cbz	r0, 20490 <handle_descriptor_get+0x5c>
			sensor_descriptor_encode(&rsp, sensor);
   20478:	a803      	add	r0, sp, #12
   2047a:	f7e2 fef5 	bl	3268 <sensor_descriptor_encode>
	bt_mesh_model_send(mod, ctx, &rsp, NULL, NULL);
   2047e:	2300      	movs	r3, #0
   20480:	9300      	str	r3, [sp, #0]
   20482:	aa03      	add	r2, sp, #12
   20484:	4631      	mov	r1, r6
   20486:	4628      	mov	r0, r5
   20488:	f00a fc7a 	bl	2ad80 <bt_mesh_model_send>
}
   2048c:	b025      	add	sp, #148	; 0x94
   2048e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			net_buf_simple_add_le16(&rsp, id);
   20490:	4611      	mov	r1, r2
   20492:	a803      	add	r0, sp, #12
   20494:	f00c fab8 	bl	2ca08 <net_buf_simple_add_le16>
   20498:	e7f1      	b.n	2047e <handle_descriptor_get+0x4a>
	SENSOR_FOR_EACH(&srv->sensors, sensor) {
   2049a:	687c      	ldr	r4, [r7, #4]
   2049c:	2c00      	cmp	r4, #0
   2049e:	d0ee      	beq.n	2047e <handle_descriptor_get+0x4a>
   204a0:	3c48      	subs	r4, #72	; 0x48
   204a2:	2c00      	cmp	r4, #0
   204a4:	d0eb      	beq.n	2047e <handle_descriptor_get+0x4a>
		if (net_buf_simple_tailroom(&rsp) < (8 + BT_MESH_MIC_SHORT)) {
   204a6:	a803      	add	r0, sp, #12
   204a8:	f00c fa93 	bl	2c9d2 <net_buf_simple_tailroom>
   204ac:	280b      	cmp	r0, #11
   204ae:	d804      	bhi.n	204ba <handle_descriptor_get+0x86>
			BT_WARN("Not enough room for all descriptors");
   204b0:	2157      	movs	r1, #87	; 0x57
   204b2:	4805      	ldr	r0, [pc, #20]	; (204c8 <handle_descriptor_get+0x94>)
   204b4:	f006 fd5b 	bl	26f6e <printk>
   204b8:	e7e1      	b.n	2047e <handle_descriptor_get+0x4a>
		sensor_descriptor_encode(&rsp, sensor);
   204ba:	4621      	mov	r1, r4
   204bc:	a803      	add	r0, sp, #12
   204be:	f7e2 fed3 	bl	3268 <sensor_descriptor_encode>
   204c2:	6ca4      	ldr	r4, [r4, #72]	; 0x48
   204c4:	e7ea      	b.n	2049c <handle_descriptor_get+0x68>
   204c6:	bf00      	nop
   204c8:	0003578b 	.word	0x0003578b

000204cc <setting_set>:
	bt_mesh_model_send(mod, ctx, &rsp, NULL, NULL);
}

static void setting_set(struct bt_mesh_model *mod, struct bt_mesh_msg_ctx *ctx,
			struct net_buf_simple *buf, bool ack)
{
   204cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_mesh_sensor_srv *srv = mod->user_data;
   204d0:	6985      	ldr	r5, [r0, #24]
{
   204d2:	b098      	sub	sp, #96	; 0x60
   204d4:	4606      	mov	r6, r0
	uint16_t id = net_buf_simple_pull_le16(buf);
   204d6:	4610      	mov	r0, r2
{
   204d8:	4617      	mov	r7, r2
   204da:	4688      	mov	r8, r1
   204dc:	4699      	mov	r9, r3
	uint16_t id = net_buf_simple_pull_le16(buf);
   204de:	f00c fa42 	bl	2c966 <net_buf_simple_pull_le16>
   204e2:	4604      	mov	r4, r0
	uint16_t setting_id = net_buf_simple_pull_le16(buf);
   204e4:	4638      	mov	r0, r7
   204e6:	f00c fa3e 	bl	2c966 <net_buf_simple_pull_le16>
   204ea:	4682      	mov	sl, r0
	int err;

	if (id == BT_MESH_PROP_ID_PROHIBITED ||
   204ec:	2c00      	cmp	r4, #0
   204ee:	d067      	beq.n	205c0 <setting_set+0xf4>
   204f0:	2800      	cmp	r0, #0
   204f2:	d065      	beq.n	205c0 <setting_set+0xf4>
	    setting_id == BT_MESH_PROP_ID_PROHIBITED) {
		return;
	}

	BT_MESH_MODEL_BUF_DEFINE(rsp, BT_MESH_SENSOR_OP_SETTING_STATUS,
   204f4:	ab06      	add	r3, sp, #24
   204f6:	f44f 12e8 	mov.w	r2, #1900544	; 0x1d0000
				 BT_MESH_SENSOR_MSG_MAXLEN_SETTING_STATUS);
	bt_mesh_model_msg_init(&rsp, BT_MESH_SENSOR_OP_SETTING_STATUS);
   204fa:	215b      	movs	r1, #91	; 0x5b
   204fc:	a803      	add	r0, sp, #12
	BT_MESH_MODEL_BUF_DEFINE(rsp, BT_MESH_SENSOR_OP_SETTING_STATUS,
   204fe:	9303      	str	r3, [sp, #12]
   20500:	e9cd 2304 	strd	r2, r3, [sp, #16]
	bt_mesh_model_msg_init(&rsp, BT_MESH_SENSOR_OP_SETTING_STATUS);
   20504:	f00a fc13 	bl	2ad2e <bt_mesh_model_msg_init>
	net_buf_simple_add_le16(&rsp, id);
   20508:	4621      	mov	r1, r4
   2050a:	a803      	add	r0, sp, #12
   2050c:	f00c fa7c 	bl	2ca08 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&rsp, setting_id);
   20510:	4651      	mov	r1, sl
   20512:	a803      	add	r0, sp, #12
   20514:	f00c fa78 	bl	2ca08 <net_buf_simple_add_le16>

	const struct bt_mesh_sensor_setting *setting;
	struct bt_mesh_sensor *sensor;

	sensor = sensor_get(srv, id);
   20518:	4628      	mov	r0, r5
   2051a:	4621      	mov	r1, r4
   2051c:	f00c fbdf 	bl	2ccde <sensor_get>
	if (!sensor) {
   20520:	4605      	mov	r5, r0
   20522:	b128      	cbz	r0, 20530 <setting_set+0x64>
	for (uint32_t i = 0; i < sensor->settings.count; i++) {
   20524:	68c0      	ldr	r0, [r0, #12]
   20526:	2300      	movs	r3, #0
		if (sensor->settings.list[i].type->id == setting_id) {
   20528:	f04f 0c0c 	mov.w	ip, #12
	for (uint32_t i = 0; i < sensor->settings.count; i++) {
   2052c:	4283      	cmp	r3, r0
   2052e:	d10a      	bne.n	20546 <setting_set+0x7a>
	BT_DBG("0x%04x: 0x%04x", id, setting_id);

	model_send(mod, NULL, &rsp);

respond:
	if (ack) {
   20530:	f1b9 0f00 	cmp.w	r9, #0
   20534:	d044      	beq.n	205c0 <setting_set+0xf4>
		bt_mesh_model_send(mod, ctx, &rsp, NULL, NULL);
   20536:	2300      	movs	r3, #0
   20538:	9300      	str	r3, [sp, #0]
   2053a:	aa03      	add	r2, sp, #12
   2053c:	4641      	mov	r1, r8
   2053e:	4630      	mov	r0, r6
   20540:	f00a fc1e 	bl	2ad80 <bt_mesh_model_send>
   20544:	e03c      	b.n	205c0 <setting_set+0xf4>
		if (sensor->settings.list[i].type->id == setting_id) {
   20546:	fb0c f203 	mul.w	r2, ip, r3
   2054a:	68a9      	ldr	r1, [r5, #8]
   2054c:	188c      	adds	r4, r1, r2
   2054e:	5889      	ldr	r1, [r1, r2]
   20550:	880a      	ldrh	r2, [r1, #0]
   20552:	4552      	cmp	r2, sl
   20554:	d024      	beq.n	205a0 <setting_set+0xd4>
	for (uint32_t i = 0; i < sensor->settings.count; i++) {
   20556:	3301      	adds	r3, #1
   20558:	e7e8      	b.n	2052c <setting_set+0x60>
	setting->set(sensor, setting, ctx, values);
   2055a:	ab0e      	add	r3, sp, #56	; 0x38
   2055c:	4642      	mov	r2, r8
   2055e:	4621      	mov	r1, r4
   20560:	4628      	mov	r0, r5
   20562:	68a7      	ldr	r7, [r4, #8]
   20564:	47b8      	blx	r7
	net_buf_simple_add_u8(&rsp, 0x03); /* RW */
   20566:	2103      	movs	r1, #3
   20568:	a803      	add	r0, sp, #12
	uint8_t minlen = rsp.len;
   2056a:	f8bd 5010 	ldrh.w	r5, [sp, #16]
	net_buf_simple_add_u8(&rsp, 0x03); /* RW */
   2056e:	f00c fa44 	bl	2c9fa <net_buf_simple_add_u8>
	err = sensor_value_encode(&rsp, setting->type, values);
   20572:	aa0e      	add	r2, sp, #56	; 0x38
   20574:	6821      	ldr	r1, [r4, #0]
   20576:	a803      	add	r0, sp, #12
   20578:	f00c fcf8 	bl	2cf6c <sensor_value_encode>
	if (err) {
   2057c:	4603      	mov	r3, r0
   2057e:	b148      	cbz	r0, 20594 <setting_set+0xc8>
		BT_WARN("Error encoding sensor setting 0x%04x: %d",
   20580:	6822      	ldr	r2, [r4, #0]
   20582:	4811      	ldr	r0, [pc, #68]	; (205c8 <setting_set+0xfc>)
   20584:	8812      	ldrh	r2, [r2, #0]
   20586:	2157      	movs	r1, #87	; 0x57
		rsp.len = minlen;
   20588:	b2ed      	uxtb	r5, r5
		BT_WARN("Error encoding sensor setting 0x%04x: %d",
   2058a:	f006 fcf0 	bl	26f6e <printk>
		rsp.len = minlen;
   2058e:	f8ad 5010 	strh.w	r5, [sp, #16]
		goto respond;
   20592:	e7cd      	b.n	20530 <setting_set+0x64>
	model_send(mod, NULL, &rsp);
   20594:	4601      	mov	r1, r0
   20596:	aa03      	add	r2, sp, #12
   20598:	4630      	mov	r0, r6
   2059a:	f00c fb83 	bl	2cca4 <model_send>
   2059e:	e7c7      	b.n	20530 <setting_set+0x64>
	if (!setting || !setting->set) {
   205a0:	68a3      	ldr	r3, [r4, #8]
   205a2:	2b00      	cmp	r3, #0
   205a4:	d0c4      	beq.n	20530 <setting_set+0x64>
	err = sensor_value_decode(buf, setting->type, values);
   205a6:	aa0e      	add	r2, sp, #56	; 0x38
   205a8:	4638      	mov	r0, r7
   205aa:	f00c fcfd 	bl	2cfa8 <sensor_value_decode>
	if (err) {
   205ae:	4603      	mov	r3, r0
   205b0:	2800      	cmp	r0, #0
   205b2:	d0d2      	beq.n	2055a <setting_set+0x8e>
		BT_WARN("Error decoding sensor setting 0x%04x: %d",
   205b4:	6822      	ldr	r2, [r4, #0]
   205b6:	4805      	ldr	r0, [pc, #20]	; (205cc <setting_set+0x100>)
   205b8:	8812      	ldrh	r2, [r2, #0]
   205ba:	2157      	movs	r1, #87	; 0x57
   205bc:	f006 fcd7 	bl	26f6e <printk>
	}
}
   205c0:	b018      	add	sp, #96	; 0x60
   205c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   205c6:	bf00      	nop
   205c8:	00035914 	.word	0x00035914
   205cc:	000358e6 	.word	0x000358e6

000205d0 <handle_cadence_get>:
{
   205d0:	b570      	push	{r4, r5, r6, lr}
   205d2:	b08c      	sub	sp, #48	; 0x30
	BT_MESH_MODEL_BUF_DEFINE(rsp, BT_MESH_SENSOR_OP_CADENCE_STATUS,
   205d4:	ab05      	add	r3, sp, #20
{
   205d6:	4614      	mov	r4, r2
	struct bt_mesh_sensor_srv *srv = mod->user_data;
   205d8:	6985      	ldr	r5, [r0, #24]
	BT_MESH_MODEL_BUF_DEFINE(rsp, BT_MESH_SENSOR_OP_CADENCE_STATUS,
   205da:	9302      	str	r3, [sp, #8]
   205dc:	f44f 12c8 	mov.w	r2, #1638400	; 0x190000
	bt_mesh_model_msg_init(&rsp, BT_MESH_SENSOR_OP_CADENCE_STATUS);
   205e0:	a802      	add	r0, sp, #8
{
   205e2:	460e      	mov	r6, r1
	bt_mesh_model_msg_init(&rsp, BT_MESH_SENSOR_OP_CADENCE_STATUS);
   205e4:	2157      	movs	r1, #87	; 0x57
	BT_MESH_MODEL_BUF_DEFINE(rsp, BT_MESH_SENSOR_OP_CADENCE_STATUS,
   205e6:	e9cd 2303 	strd	r2, r3, [sp, #12]
	bt_mesh_model_msg_init(&rsp, BT_MESH_SENSOR_OP_CADENCE_STATUS);
   205ea:	f00a fba0 	bl	2ad2e <bt_mesh_model_msg_init>
	id = net_buf_simple_pull_le16(buf);
   205ee:	4620      	mov	r0, r4
   205f0:	f00c f9b9 	bl	2c966 <net_buf_simple_pull_le16>
	if (id == BT_MESH_PROP_ID_PROHIBITED) {
   205f4:	4604      	mov	r4, r0
   205f6:	b330      	cbz	r0, 20646 <handle_cadence_get+0x76>
	net_buf_simple_add_le16(&rsp, id);
   205f8:	4601      	mov	r1, r0
   205fa:	a802      	add	r0, sp, #8
   205fc:	f00c fa04 	bl	2ca08 <net_buf_simple_add_le16>
	sensor = sensor_get(srv, id);
   20600:	4621      	mov	r1, r4
   20602:	4628      	mov	r0, r5
   20604:	f00c fb6b 	bl	2ccde <sensor_get>
	if (!sensor || sensor->type->channel_count != 1) {
   20608:	b118      	cbz	r0, 20612 <handle_cadence_get+0x42>
   2060a:	6801      	ldr	r1, [r0, #0]
   2060c:	78cb      	ldrb	r3, [r1, #3]
   2060e:	2b01      	cmp	r3, #1
   20610:	d00c      	beq.n	2062c <handle_cadence_get+0x5c>
		BT_WARN("Cadence not supported");
   20612:	2157      	movs	r1, #87	; 0x57
   20614:	480d      	ldr	r0, [pc, #52]	; (2064c <handle_cadence_get+0x7c>)
   20616:	f006 fcaa 	bl	26f6e <printk>
	bt_mesh_model_send(srv->model, ctx, &rsp, NULL, NULL);
   2061a:	2300      	movs	r3, #0
   2061c:	9300      	str	r3, [sp, #0]
   2061e:	aa02      	add	r2, sp, #8
   20620:	4631      	mov	r1, r6
   20622:	f8d5 013c 	ldr.w	r0, [r5, #316]	; 0x13c
   20626:	f00a fbab 	bl	2ad80 <bt_mesh_model_send>
   2062a:	e00c      	b.n	20646 <handle_cadence_get+0x76>
	err = sensor_cadence_encode(&rsp, sensor->type, sensor->state.pub_div,
   2062c:	f890 2057 	ldrb.w	r2, [r0, #87]	; 0x57
   20630:	f890 3056 	ldrb.w	r3, [r0, #86]	; 0x56
				    &sensor->state.threshold);
   20634:	3020      	adds	r0, #32
	err = sensor_cadence_encode(&rsp, sensor->type, sensor->state.pub_div,
   20636:	9000      	str	r0, [sp, #0]
   20638:	f002 020f 	and.w	r2, r2, #15
   2063c:	a802      	add	r0, sp, #8
   2063e:	f000 fba1 	bl	20d84 <sensor_cadence_encode>
	if (err) {
   20642:	2800      	cmp	r0, #0
   20644:	d0e9      	beq.n	2061a <handle_cadence_get+0x4a>
}
   20646:	b00c      	add	sp, #48	; 0x30
   20648:	bd70      	pop	{r4, r5, r6, pc}
   2064a:	bf00      	nop
   2064c:	00035735 	.word	0x00035735

00020650 <cadence_set>:
{
   20650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20654:	b0af      	sub	sp, #188	; 0xbc
   20656:	4616      	mov	r6, r2
	struct bt_mesh_sensor_srv *srv = mod->user_data;
   20658:	6987      	ldr	r7, [r0, #24]
	BT_MESH_MODEL_BUF_DEFINE(rsp, BT_MESH_SENSOR_OP_CADENCE_STATUS,
   2065a:	f44f 12c8 	mov.w	r2, #1638400	; 0x190000
{
   2065e:	4680      	mov	r8, r0
   20660:	4689      	mov	r9, r1
	bt_mesh_model_msg_init(&rsp, BT_MESH_SENSOR_OP_CADENCE_STATUS);
   20662:	a803      	add	r0, sp, #12
   20664:	2157      	movs	r1, #87	; 0x57
{
   20666:	469a      	mov	sl, r3
	BT_MESH_MODEL_BUF_DEFINE(rsp, BT_MESH_SENSOR_OP_CADENCE_STATUS,
   20668:	ab09      	add	r3, sp, #36	; 0x24
   2066a:	9303      	str	r3, [sp, #12]
   2066c:	e9cd 2304 	strd	r2, r3, [sp, #16]
	bt_mesh_model_msg_init(&rsp, BT_MESH_SENSOR_OP_CADENCE_STATUS);
   20670:	f00a fb5d 	bl	2ad2e <bt_mesh_model_msg_init>
	id = net_buf_simple_pull_le16(buf);
   20674:	4630      	mov	r0, r6
   20676:	f00c f976 	bl	2c966 <net_buf_simple_pull_le16>
	if (id == BT_MESH_PROP_ID_PROHIBITED) {
   2067a:	4604      	mov	r4, r0
   2067c:	b358      	cbz	r0, 206d6 <cadence_set+0x86>
	net_buf_simple_add_le16(&rsp, id);
   2067e:	4601      	mov	r1, r0
   20680:	a803      	add	r0, sp, #12
   20682:	f00c f9c1 	bl	2ca08 <net_buf_simple_add_le16>
	sensor = sensor_get(srv, id);
   20686:	4621      	mov	r1, r4
   20688:	4638      	mov	r0, r7
   2068a:	f00c fb28 	bl	2ccde <sensor_get>
	if (!sensor || sensor->type->channel_count != 1) {
   2068e:	4605      	mov	r5, r0
   20690:	b118      	cbz	r0, 2069a <cadence_set+0x4a>
   20692:	6801      	ldr	r1, [r0, #0]
   20694:	78cb      	ldrb	r3, [r1, #3]
   20696:	2b01      	cmp	r3, #1
   20698:	d00e      	beq.n	206b8 <cadence_set+0x68>
		BT_WARN("Cadence not supported");
   2069a:	2157      	movs	r1, #87	; 0x57
   2069c:	483f      	ldr	r0, [pc, #252]	; (2079c <cadence_set+0x14c>)
   2069e:	f006 fc66 	bl	26f6e <printk>
	if (ack) {
   206a2:	f1ba 0f00 	cmp.w	sl, #0
   206a6:	d016      	beq.n	206d6 <cadence_set+0x86>
		bt_mesh_model_send(mod, ctx, &rsp, NULL, NULL);
   206a8:	2300      	movs	r3, #0
   206aa:	9300      	str	r3, [sp, #0]
   206ac:	aa03      	add	r2, sp, #12
   206ae:	4649      	mov	r1, r9
   206b0:	4640      	mov	r0, r8
   206b2:	f00a fb65 	bl	2ad80 <bt_mesh_model_send>
   206b6:	e00e      	b.n	206d6 <cadence_set+0x86>
	err = sensor_cadence_decode(buf, sensor->type, &period_div, &min_int,
   206b8:	ac10      	add	r4, sp, #64	; 0x40
   206ba:	4630      	mov	r0, r6
   206bc:	9400      	str	r4, [sp, #0]
   206be:	f10d 030b 	add.w	r3, sp, #11
   206c2:	f10d 020a 	add.w	r2, sp, #10
   206c6:	f000 fba1 	bl	20e0c <sensor_cadence_decode>
	if (err) {
   206ca:	4606      	mov	r6, r0
   206cc:	b130      	cbz	r0, 206dc <cadence_set+0x8c>
		BT_WARN("Invalid cadence");
   206ce:	2157      	movs	r1, #87	; 0x57
   206d0:	4833      	ldr	r0, [pc, #204]	; (207a0 <cadence_set+0x150>)
   206d2:	f006 fc4c 	bl	26f6e <printk>
}
   206d6:	b02f      	add	sp, #188	; 0xbc
   206d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	sensor->state.min_int = min_int;
   206dc:	f89d 300b 	ldrb.w	r3, [sp, #11]
   206e0:	f885 3056 	strb.w	r3, [r5, #86]	; 0x56
	sensor->state.pub_div = period_div;
   206e4:	f89d 200a 	ldrb.w	r2, [sp, #10]
   206e8:	f895 3057 	ldrb.w	r3, [r5, #87]	; 0x57
   206ec:	f362 0303 	bfi	r3, r2, #0, #4
   206f0:	f885 3057 	strb.w	r3, [r5, #87]	; 0x57
	sensor->state.threshold = threshold;
   206f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   206f6:	f105 0c20 	add.w	ip, r5, #32
   206fa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   206fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   20700:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   20704:	e894 0003 	ldmia.w	r4, {r0, r1}
	NET_BUF_SIMPLE_DEFINE(buf, (CONFIG_BT_MESH_SENSOR_SRV_SENSORS_MAX *
   20708:	ab1a      	add	r3, sp, #104	; 0x68
   2070a:	f44f 02a0 	mov.w	r2, #5242880	; 0x500000
	sensor->state.threshold = threshold;
   2070e:	e88c 0003 	stmia.w	ip, {r0, r1}
	NET_BUF_SIMPLE_DEFINE(buf, (CONFIG_BT_MESH_SENSOR_SRV_SENSORS_MAX *
   20712:	e9cd 2307 	strd	r2, r3, [sp, #28]
   20716:	9306      	str	r3, [sp, #24]
   20718:	f105 0b20 	add.w	fp, r5, #32
	for (int i = 0; i < srv->sensor_count; ++i) {
   2071c:	7bbb      	ldrb	r3, [r7, #14]
   2071e:	429e      	cmp	r6, r3
   20720:	db0f      	blt.n	20742 <cadence_set+0xf2>
	    bt_mesh_model_data_store(srv->model, false, NULL, buf.data,
   20722:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   20726:	9300      	str	r3, [sp, #0]
   20728:	2200      	movs	r2, #0
   2072a:	9b06      	ldr	r3, [sp, #24]
   2072c:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
   20730:	4611      	mov	r1, r2
   20732:	f7f1 fe73 	bl	1241c <bt_mesh_model_data_store>
	if (IS_ENABLED(CONFIG_SETTINGS) &&
   20736:	b1d0      	cbz	r0, 2076e <cadence_set+0x11e>
		BT_ERR("Sensor server data store failed");
   20738:	2145      	movs	r1, #69	; 0x45
   2073a:	481a      	ldr	r0, [pc, #104]	; (207a4 <cadence_set+0x154>)
   2073c:	f006 fc17 	bl	26f6e <printk>
   20740:	e015      	b.n	2076e <cadence_set+0x11e>
		const struct bt_mesh_sensor *s = srv->sensor_array[i];
   20742:	683b      	ldr	r3, [r7, #0]
   20744:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
		net_buf_simple_add_le16(&buf, s->type->id);
   20748:	6823      	ldr	r3, [r4, #0]
   2074a:	a806      	add	r0, sp, #24
   2074c:	8819      	ldrh	r1, [r3, #0]
   2074e:	f00c f95b 	bl	2ca08 <net_buf_simple_add_le16>
		err = sensor_cadence_encode(&buf, s->type, s->state.pub_div,
   20752:	f894 2057 	ldrb.w	r2, [r4, #87]	; 0x57
   20756:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
   2075a:	f104 0120 	add.w	r1, r4, #32
   2075e:	9100      	str	r1, [sp, #0]
   20760:	f002 020f 	and.w	r2, r2, #15
   20764:	6821      	ldr	r1, [r4, #0]
   20766:	a806      	add	r0, sp, #24
   20768:	f000 fb0c 	bl	20d84 <sensor_cadence_encode>
		if (err) {
   2076c:	b198      	cbz	r0, 20796 <cadence_set+0x146>
	err = sensor_cadence_encode(&rsp, sensor->type, sensor->state.pub_div,
   2076e:	f895 2057 	ldrb.w	r2, [r5, #87]	; 0x57
   20772:	f895 3056 	ldrb.w	r3, [r5, #86]	; 0x56
   20776:	f8cd b000 	str.w	fp, [sp]
   2077a:	6829      	ldr	r1, [r5, #0]
   2077c:	f002 020f 	and.w	r2, r2, #15
   20780:	a803      	add	r0, sp, #12
   20782:	f000 faff 	bl	20d84 <sensor_cadence_encode>
	if (err) {
   20786:	4601      	mov	r1, r0
   20788:	2800      	cmp	r0, #0
   2078a:	d1a4      	bne.n	206d6 <cadence_set+0x86>
	model_send(mod, NULL, &rsp);
   2078c:	aa03      	add	r2, sp, #12
   2078e:	4640      	mov	r0, r8
   20790:	f00c fa88 	bl	2cca4 <model_send>
   20794:	e785      	b.n	206a2 <cadence_set+0x52>
	for (int i = 0; i < srv->sensor_count; ++i) {
   20796:	3601      	adds	r6, #1
   20798:	e7c0      	b.n	2071c <cadence_set+0xcc>
   2079a:	bf00      	nop
   2079c:	00035735 	.word	0x00035735
   207a0:	000356fb 	.word	0x000356fb
   207a4:	00035710 	.word	0x00035710

000207a8 <sensor_srv_init>:

	return (srv->pub.msg->len > original_len) ? 0 : -ENOENT;
}

static int sensor_srv_init(struct bt_mesh_model *mod)
{
   207a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_mesh_sensor_srv *srv = mod->user_data;
   207ac:	6984      	ldr	r4, [r0, #24]
	list->head = NULL;
   207ae:	2500      	movs	r5, #0
	list->tail = NULL;
   207b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
{
   207b4:	4606      	mov	r6, r0
	sys_slist_init(&srv->sensors);

	/* Establish a sorted list of sensors, as this is a requirement when
	 * sending multiple sensor values in one message.
	 */
	uint16_t min_id = 0;
   207b6:	462a      	mov	r2, r5
	parent->next = child;
   207b8:	46ae      	mov	lr, r5

	for (int count = 0; count < srv->sensor_count; ++count) {
   207ba:	f894 c00e 	ldrb.w	ip, [r4, #14]
   207be:	4565      	cmp	r5, ip
   207c0:	da19      	bge.n	207f6 <sensor_srv_init+0x4e>
		struct bt_mesh_sensor *best = NULL;

		for (int j = 0; j < srv->sensor_count; ++j) {
   207c2:	2100      	movs	r1, #0
			if (srv->sensor_array[j]->type->id >= min_id &&
   207c4:	f8d4 9000 	ldr.w	r9, [r4]
		struct bt_mesh_sensor *best = NULL;
   207c8:	460b      	mov	r3, r1
			if (srv->sensor_array[j]->type->id >= min_id &&
   207ca:	f859 0021 	ldr.w	r0, [r9, r1, lsl #2]
   207ce:	6807      	ldr	r7, [r0, #0]
   207d0:	f8b7 8000 	ldrh.w	r8, [r7]
   207d4:	4590      	cmp	r8, r2
   207d6:	d305      	bcc.n	207e4 <sensor_srv_init+0x3c>
   207d8:	b333      	cbz	r3, 20828 <sensor_srv_init+0x80>
			    (!best ||
			     srv->sensor_array[j]->type->id < best->type->id)) {
   207da:	681f      	ldr	r7, [r3, #0]
			    (!best ||
   207dc:	883f      	ldrh	r7, [r7, #0]
   207de:	4547      	cmp	r7, r8
   207e0:	bf88      	it	hi
   207e2:	4603      	movhi	r3, r0
		for (int j = 0; j < srv->sensor_count; ++j) {
   207e4:	3101      	adds	r1, #1
   207e6:	4561      	cmp	r1, ip
   207e8:	dbef      	blt.n	207ca <sensor_srv_init+0x22>
				best = srv->sensor_array[j];
			}
		}

		if (!best) {
   207ea:	b9fb      	cbnz	r3, 2082c <sensor_srv_init+0x84>
			BT_ERR("Duplicate sensor ID");
   207ec:	2145      	movs	r1, #69	; 0x45
   207ee:	4818      	ldr	r0, [pc, #96]	; (20850 <sensor_srv_init+0xa8>)
   207f0:	f006 fbbd 	bl	26f6e <printk>
			srv->sensor_count = count;
   207f4:	73a5      	strb	r5, [r4, #14]
		min_id = best->type->id + 1;
	}

	srv->model = mod;

	srv->pub.update = update_handler;
   207f6:	4b17      	ldr	r3, [pc, #92]	; (20854 <sensor_srv_init+0xac>)
   207f8:	6263      	str	r3, [r4, #36]	; 0x24
	srv->pub.msg = &srv->pub_buf;
   207fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
	srv->setup_pub.msg = &srv->setup_pub_buf;
   207fe:	f504 7588 	add.w	r5, r4, #272	; 0x110
	srv->pub.msg = &srv->pub_buf;
   20802:	6220      	str	r0, [r4, #32]
	net_buf_simple_init_with_data(&srv->pub_buf, srv->pub_data,
   20804:	f104 0164 	add.w	r1, r4, #100	; 0x64
	srv->model = mod;
   20808:	f8c4 613c 	str.w	r6, [r4, #316]	; 0x13c
	srv->setup_pub.msg = &srv->setup_pub_buf;
   2080c:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
	net_buf_simple_init_with_data(&srv->pub_buf, srv->pub_data,
   20810:	2261      	movs	r2, #97	; 0x61
   20812:	f00c f877 	bl	2c904 <net_buf_simple_init_with_data>
				      sizeof(srv->pub_data));
	net_buf_simple_init_with_data(&srv->setup_pub_buf, srv->setup_pub_data,
   20816:	4628      	mov	r0, r5
   20818:	221d      	movs	r2, #29
   2081a:	f504 718e 	add.w	r1, r4, #284	; 0x11c
   2081e:	f00c f871 	bl	2c904 <net_buf_simple_init_with_data>
				      sizeof(srv->setup_pub_data));

	return 0;
}
   20822:	2000      	movs	r0, #0
   20824:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   20828:	4603      	mov	r3, r0
   2082a:	e7db      	b.n	207e4 <sensor_srv_init+0x3c>
   2082c:	f8c3 e048 	str.w	lr, [r3, #72]	; 0x48
Z_GENLIST_APPEND(slist, snode)
   20830:	68a1      	ldr	r1, [r4, #8]
		sys_slist_append(&srv->sensors, &best->state.node);
   20832:	f103 0248 	add.w	r2, r3, #72	; 0x48
   20836:	b939      	cbnz	r1, 20848 <sensor_srv_init+0xa0>
	list->head = node;
   20838:	e9c4 2201 	strd	r2, r2, [r4, #4]
		min_id = best->type->id + 1;
   2083c:	681b      	ldr	r3, [r3, #0]
   2083e:	881a      	ldrh	r2, [r3, #0]
   20840:	3201      	adds	r2, #1
   20842:	b292      	uxth	r2, r2
	for (int count = 0; count < srv->sensor_count; ++count) {
   20844:	3501      	adds	r5, #1
   20846:	e7b8      	b.n	207ba <sensor_srv_init+0x12>
	parent->next = child;
   20848:	600a      	str	r2, [r1, #0]
	list->tail = node;
   2084a:	60a2      	str	r2, [r4, #8]
   2084c:	e7f6      	b.n	2083c <sensor_srv_init+0x94>
   2084e:	bf00      	nop
   20850:	00035898 	.word	0x00035898
   20854:	0002cd87 	.word	0x0002cd87

00020858 <sensor_srv_settings_set>:
}

static int sensor_srv_settings_set(struct bt_mesh_model *mod, const char *name,
				   size_t len_rd, settings_read_cb read_cb,
				   void *cb_arg)
{
   20858:	b570      	push	{r4, r5, r6, lr}
   2085a:	b09a      	sub	sp, #104	; 0x68
   2085c:	4614      	mov	r4, r2
   2085e:	461d      	mov	r5, r3
	struct bt_mesh_sensor_srv *srv = mod->user_data;
	int err = 0;

	NET_BUF_SIMPLE_DEFINE(buf, (CONFIG_BT_MESH_SENSOR_SRV_SENSORS_MAX *
   20860:	aa06      	add	r2, sp, #24
   20862:	f44f 03a0 	mov.w	r3, #5242880	; 0x500000
	struct bt_mesh_sensor_srv *srv = mod->user_data;
   20866:	6986      	ldr	r6, [r0, #24]
	NET_BUF_SIMPLE_DEFINE(buf, (CONFIG_BT_MESH_SENSOR_SRV_SENSORS_MAX *
   20868:	9203      	str	r2, [sp, #12]
   2086a:	e9cd 3204 	strd	r3, r2, [sp, #16]
				    BT_MESH_SENSOR_MSG_MAXLEN_CADENCE_STATUS));

	if (name) {
   2086e:	2900      	cmp	r1, #0
   20870:	d142      	bne.n	208f8 <sensor_srv_settings_set+0xa0>
		return -ENOENT;
	}

	ssize_t len = read_cb(cb_arg, net_buf_simple_add(&buf, len_rd), len_rd);
   20872:	4621      	mov	r1, r4
   20874:	a803      	add	r0, sp, #12
   20876:	f7fe fcbd 	bl	1f1f4 <net_buf_simple_add>
   2087a:	4622      	mov	r2, r4
   2087c:	4601      	mov	r1, r0
   2087e:	981e      	ldr	r0, [sp, #120]	; 0x78
   20880:	47a8      	blx	r5

	if (len == 0) {
   20882:	4602      	mov	r2, r0
   20884:	b918      	cbnz	r0, 2088e <sensor_srv_settings_set+0x36>
		return 0;
   20886:	2400      	movs	r4, #0
	if (err) {
		BT_ERR("Failed: %d", err);
	}

	return err;
}
   20888:	4620      	mov	r0, r4
   2088a:	b01a      	add	sp, #104	; 0x68
   2088c:	bd70      	pop	{r4, r5, r6, pc}
	if (len != len_rd) {
   2088e:	42a0      	cmp	r0, r4
   20890:	d025      	beq.n	208de <sensor_srv_settings_set+0x86>
		BT_ERR("Failed: %d (expected length %u)", len, len_rd);
   20892:	4623      	mov	r3, r4
   20894:	2145      	movs	r1, #69	; 0x45
   20896:	481a      	ldr	r0, [pc, #104]	; (20900 <sensor_srv_settings_set+0xa8>)
   20898:	f006 fb69 	bl	26f6e <printk>
		return -EINVAL;
   2089c:	f06f 0415 	mvn.w	r4, #21
   208a0:	e7f2      	b.n	20888 <sensor_srv_settings_set+0x30>
		uint16_t id = net_buf_simple_pull_le16(&buf);
   208a2:	a803      	add	r0, sp, #12
   208a4:	f00c f85f 	bl	2c966 <net_buf_simple_pull_le16>
		s = sensor_get(srv, id);
   208a8:	4601      	mov	r1, r0
   208aa:	4630      	mov	r0, r6
   208ac:	f00c fa17 	bl	2ccde <sensor_get>
		if (!s) {
   208b0:	4605      	mov	r5, r0
   208b2:	b1c8      	cbz	r0, 208e8 <sensor_srv_settings_set+0x90>
		err = sensor_cadence_decode(&buf, s->type, &pub_div,
   208b4:	f100 0320 	add.w	r3, r0, #32
   208b8:	9300      	str	r3, [sp, #0]
   208ba:	6801      	ldr	r1, [r0, #0]
   208bc:	f100 0356 	add.w	r3, r0, #86	; 0x56
   208c0:	f10d 020b 	add.w	r2, sp, #11
   208c4:	a803      	add	r0, sp, #12
   208c6:	f000 faa1 	bl	20e0c <sensor_cadence_decode>
		if (err) {
   208ca:	4604      	mov	r4, r0
   208cc:	b970      	cbnz	r0, 208ec <sensor_srv_settings_set+0x94>
		s->state.pub_div = pub_div;
   208ce:	f895 3057 	ldrb.w	r3, [r5, #87]	; 0x57
   208d2:	f89d 200b 	ldrb.w	r2, [sp, #11]
   208d6:	f362 0303 	bfi	r3, r2, #0, #4
   208da:	f885 3057 	strb.w	r3, [r5, #87]	; 0x57
	while (buf.len) {
   208de:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   208e2:	2b00      	cmp	r3, #0
   208e4:	d1dd      	bne.n	208a2 <sensor_srv_settings_set+0x4a>
   208e6:	e7ce      	b.n	20886 <sensor_srv_settings_set+0x2e>
			err = -ENODEV;
   208e8:	f06f 0412 	mvn.w	r4, #18
		BT_ERR("Failed: %d", err);
   208ec:	4622      	mov	r2, r4
   208ee:	2145      	movs	r1, #69	; 0x45
   208f0:	4804      	ldr	r0, [pc, #16]	; (20904 <sensor_srv_settings_set+0xac>)
   208f2:	f006 fb3c 	bl	26f6e <printk>
   208f6:	e7c7      	b.n	20888 <sensor_srv_settings_set+0x30>
		return -ENOENT;
   208f8:	f06f 0401 	mvn.w	r4, #1
   208fc:	e7c4      	b.n	20888 <sensor_srv_settings_set+0x30>
   208fe:	bf00      	nop
   20900:	000358b1 	.word	0x000358b1
   20904:	000358d6 	.word	0x000358d6

00020908 <sensor_srv_reset>:
{
   20908:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_mesh_sensor_srv *srv = mod->user_data;
   2090a:	6985      	ldr	r5, [r0, #24]
		s->state.min_int = 0;
   2090c:	4e13      	ldr	r6, [pc, #76]	; (2095c <sensor_srv_reset+0x54>)
	net_buf_simple_reset(srv->pub.msg);
   2090e:	6a2b      	ldr	r3, [r5, #32]
	buf->len  = 0U;
   20910:	2400      	movs	r4, #0
	buf->data = buf->__buf;
   20912:	689a      	ldr	r2, [r3, #8]
   20914:	601a      	str	r2, [r3, #0]
	buf->len  = 0U;
   20916:	809c      	strh	r4, [r3, #4]
	net_buf_simple_reset(srv->setup_pub.msg);
   20918:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
	buf->data = buf->__buf;
   2091c:	689a      	ldr	r2, [r3, #8]
	buf->len  = 0U;
   2091e:	809c      	strh	r4, [r3, #4]
	buf->data = buf->__buf;
   20920:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < srv->sensor_count; ++i) {
   20922:	7bab      	ldrb	r3, [r5, #14]
   20924:	42a3      	cmp	r3, r4
   20926:	dc09      	bgt.n	2093c <sensor_srv_reset+0x34>
		(void)bt_mesh_model_data_store(srv->model, false, NULL, NULL,
   20928:	2300      	movs	r3, #0
   2092a:	9300      	str	r3, [sp, #0]
   2092c:	461a      	mov	r2, r3
   2092e:	4619      	mov	r1, r3
   20930:	f8d5 013c 	ldr.w	r0, [r5, #316]	; 0x13c
   20934:	f7f1 fd72 	bl	1241c <bt_mesh_model_data_store>
}
   20938:	b002      	add	sp, #8
   2093a:	bd70      	pop	{r4, r5, r6, pc}
		struct bt_mesh_sensor *s = srv->sensor_array[i];
   2093c:	682b      	ldr	r3, [r5, #0]
   2093e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
		s->state.min_int = 0;
   20942:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
   20946:	4033      	ands	r3, r6
   20948:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
__ssp_bos_icheck3(memset, void *, int)
   2094c:	2228      	movs	r2, #40	; 0x28
   2094e:	2100      	movs	r1, #0
   20950:	3020      	adds	r0, #32
   20952:	f00c fe52 	bl	2d5fa <memset>
	for (int i = 0; i < srv->sensor_count; ++i) {
   20956:	3401      	adds	r4, #1
   20958:	e7e3      	b.n	20922 <sensor_srv_reset+0x1a>
   2095a:	bf00      	nop
   2095c:	fffff000 	.word	0xfffff000

00020960 <handle_setting_get>:
{
   20960:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_mesh_sensor_srv *srv = mod->user_data;
   20964:	f8d0 9018 	ldr.w	r9, [r0, #24]
{
   20968:	b099      	sub	sp, #100	; 0x64
   2096a:	4606      	mov	r6, r0
	uint16_t id = net_buf_simple_pull_le16(buf);
   2096c:	4610      	mov	r0, r2
{
   2096e:	4615      	mov	r5, r2
   20970:	4688      	mov	r8, r1
	uint16_t id = net_buf_simple_pull_le16(buf);
   20972:	f00b fff8 	bl	2c966 <net_buf_simple_pull_le16>
   20976:	4604      	mov	r4, r0
	uint16_t setting_id = net_buf_simple_pull_le16(buf);
   20978:	4628      	mov	r0, r5
   2097a:	f00b fff4 	bl	2c966 <net_buf_simple_pull_le16>
   2097e:	4607      	mov	r7, r0
	if (id == BT_MESH_PROP_ID_PROHIBITED ||
   20980:	b32c      	cbz	r4, 209ce <handle_setting_get+0x6e>
   20982:	b320      	cbz	r0, 209ce <handle_setting_get+0x6e>
	BT_MESH_MODEL_BUF_DEFINE(rsp, BT_MESH_SENSOR_OP_SETTING_STATUS,
   20984:	ab06      	add	r3, sp, #24
   20986:	f44f 12e8 	mov.w	r2, #1900544	; 0x1d0000
	bt_mesh_model_msg_init(&rsp, BT_MESH_SENSOR_OP_SETTING_STATUS);
   2098a:	215b      	movs	r1, #91	; 0x5b
   2098c:	a803      	add	r0, sp, #12
	BT_MESH_MODEL_BUF_DEFINE(rsp, BT_MESH_SENSOR_OP_SETTING_STATUS,
   2098e:	9303      	str	r3, [sp, #12]
   20990:	e9cd 2304 	strd	r2, r3, [sp, #16]
	bt_mesh_model_msg_init(&rsp, BT_MESH_SENSOR_OP_SETTING_STATUS);
   20994:	f00a f9cb 	bl	2ad2e <bt_mesh_model_msg_init>
	net_buf_simple_add_le16(&rsp, id);
   20998:	4621      	mov	r1, r4
   2099a:	a803      	add	r0, sp, #12
   2099c:	f00c f834 	bl	2ca08 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&rsp, setting_id);
   209a0:	4639      	mov	r1, r7
   209a2:	a803      	add	r0, sp, #12
   209a4:	f00c f830 	bl	2ca08 <net_buf_simple_add_le16>
	struct bt_mesh_sensor *sensor = sensor_get(srv, id);
   209a8:	4621      	mov	r1, r4
   209aa:	4648      	mov	r0, r9
   209ac:	f00c f997 	bl	2ccde <sensor_get>
	if (!sensor) {
   209b0:	4605      	mov	r5, r0
   209b2:	b128      	cbz	r0, 209c0 <handle_setting_get+0x60>
	for (uint32_t i = 0; i < sensor->settings.count; i++) {
   209b4:	68c0      	ldr	r0, [r0, #12]
   209b6:	2300      	movs	r3, #0
		if (sensor->settings.list[i].type->id == setting_id) {
   209b8:	f04f 0c0c 	mov.w	ip, #12
	for (uint32_t i = 0; i < sensor->settings.count; i++) {
   209bc:	4283      	cmp	r3, r0
   209be:	d109      	bne.n	209d4 <handle_setting_get+0x74>
	bt_mesh_model_send(mod, ctx, &rsp, NULL, NULL);
   209c0:	2300      	movs	r3, #0
   209c2:	9300      	str	r3, [sp, #0]
   209c4:	aa03      	add	r2, sp, #12
   209c6:	4641      	mov	r1, r8
   209c8:	4630      	mov	r0, r6
   209ca:	f00a f9d9 	bl	2ad80 <bt_mesh_model_send>
}
   209ce:	b019      	add	sp, #100	; 0x64
   209d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (sensor->settings.list[i].type->id == setting_id) {
   209d4:	fb0c f203 	mul.w	r2, ip, r3
   209d8:	68a9      	ldr	r1, [r5, #8]
   209da:	188c      	adds	r4, r1, r2
   209dc:	588a      	ldr	r2, [r1, r2]
   209de:	8812      	ldrh	r2, [r2, #0]
   209e0:	42ba      	cmp	r2, r7
   209e2:	d001      	beq.n	209e8 <handle_setting_get+0x88>
	for (uint32_t i = 0; i < sensor->settings.count; i++) {
   209e4:	3301      	adds	r3, #1
   209e6:	e7e9      	b.n	209bc <handle_setting_get+0x5c>
	if (!setting || !setting->get) {
   209e8:	6863      	ldr	r3, [r4, #4]
   209ea:	2b00      	cmp	r3, #0
   209ec:	d0e8      	beq.n	209c0 <handle_setting_get+0x60>
	net_buf_simple_add_u8(&rsp, setting->set ? 0x03 : 0x01);
   209ee:	68a3      	ldr	r3, [r4, #8]
	uint8_t minlen = rsp.len;
   209f0:	f8bd 9010 	ldrh.w	r9, [sp, #16]
	net_buf_simple_add_u8(&rsp, setting->set ? 0x03 : 0x01);
   209f4:	2b00      	cmp	r3, #0
   209f6:	bf14      	ite	ne
   209f8:	2103      	movne	r1, #3
   209fa:	2101      	moveq	r1, #1
   209fc:	a803      	add	r0, sp, #12
   209fe:	f00b fffc 	bl	2c9fa <net_buf_simple_add_u8>
	setting->get(sensor, setting, ctx, values);
   20a02:	ab0e      	add	r3, sp, #56	; 0x38
   20a04:	4642      	mov	r2, r8
   20a06:	4621      	mov	r1, r4
   20a08:	4628      	mov	r0, r5
   20a0a:	6867      	ldr	r7, [r4, #4]
   20a0c:	47b8      	blx	r7
	err = sensor_value_encode(&rsp, setting->type, values);
   20a0e:	aa0e      	add	r2, sp, #56	; 0x38
   20a10:	6821      	ldr	r1, [r4, #0]
   20a12:	a803      	add	r0, sp, #12
   20a14:	f00c faaa 	bl	2cf6c <sensor_value_encode>
	if (err) {
   20a18:	4603      	mov	r3, r0
   20a1a:	2800      	cmp	r0, #0
   20a1c:	d0d0      	beq.n	209c0 <handle_setting_get+0x60>
		BT_WARN("Failed encoding sensor setting 0x%04x: %d",
   20a1e:	6822      	ldr	r2, [r4, #0]
   20a20:	4804      	ldr	r0, [pc, #16]	; (20a34 <handle_setting_get+0xd4>)
   20a22:	8812      	ldrh	r2, [r2, #0]
   20a24:	2157      	movs	r1, #87	; 0x57
		rsp.len = minlen;
   20a26:	fa5f f989 	uxtb.w	r9, r9
		BT_WARN("Failed encoding sensor setting 0x%04x: %d",
   20a2a:	f006 faa0 	bl	26f6e <printk>
		rsp.len = minlen;
   20a2e:	f8ad 9010 	strh.w	r9, [sp, #16]
   20a32:	e7c5      	b.n	209c0 <handle_setting_get+0x60>
   20a34:	00035869 	.word	0x00035869

00020a38 <scalar_decode>:
	return 0;
}

static int scalar_decode(const struct bt_mesh_sensor_format *format,
			 struct net_buf_simple *buf, struct sensor_value *val)
{
   20a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20a3a:	4607      	mov	r7, r0
	const struct scalar_repr *repr = format->user_data;

	if (buf->len < format->size) {
   20a3c:	e9d7 5302 	ldrd	r5, r3, [r7, #8]
{
   20a40:	4616      	mov	r6, r2
	if (buf->len < format->size) {
   20a42:	888a      	ldrh	r2, [r1, #4]
   20a44:	429a      	cmp	r2, r3
{
   20a46:	4608      	mov	r0, r1
	if (buf->len < format->size) {
   20a48:	d360      	bcc.n	20b0c <scalar_decode+0xd4>
		return -ENOMEM;
	}

	int32_t raw;

	switch (format->size) {
   20a4a:	3b01      	subs	r3, #1
   20a4c:	2b03      	cmp	r3, #3
   20a4e:	d860      	bhi.n	20b12 <scalar_decode+0xda>
   20a50:	e8df f003 	tbb	[pc, r3]
   20a54:	52473d02 	.word	0x52473d02
	case 1:
		if (repr->flags & SIGNED) {
   20a58:	782b      	ldrb	r3, [r5, #0]
   20a5a:	079c      	lsls	r4, r3, #30
   20a5c:	d533      	bpl.n	20ac6 <scalar_decode+0x8e>
			raw = (int8_t) net_buf_simple_pull_u8(buf);
   20a5e:	f00b ff7a 	bl	2c956 <net_buf_simple_pull_u8>
   20a62:	b244      	sxtb	r4, r0
		break;
	default:
		return -ERANGE;
	}

	int64_t max_value = scalar_max(format);
   20a64:	4638      	mov	r0, r7
   20a66:	f00c fa13 	bl	2ce90 <scalar_max>
	if (repr->flags & SIGNED) {
   20a6a:	68bb      	ldr	r3, [r7, #8]
   20a6c:	781b      	ldrb	r3, [r3, #0]
   20a6e:	f013 0302 	ands.w	r3, r3, #2
   20a72:	d005      	beq.n	20a80 <scalar_decode+0x48>
		return -BIT64(8 * format->size - 1);
   20a74:	68fb      	ldr	r3, [r7, #12]
   20a76:	00db      	lsls	r3, r3, #3
   20a78:	1e5a      	subs	r2, r3, #1
   20a7a:	f04f 33ff 	mov.w	r3, #4294967295
   20a7e:	4093      	lsls	r3, r2
	int32_t min_value = scalar_min(format);

	if (raw < min_value || raw > max_value) {
   20a80:	429c      	cmp	r4, r3
   20a82:	db46      	blt.n	20b12 <scalar_decode+0xda>
   20a84:	17e3      	asrs	r3, r4, #31
   20a86:	42a0      	cmp	r0, r4
   20a88:	eb71 0303 	sbcs.w	r3, r1, r3
   20a8c:	db41      	blt.n	20b12 <scalar_decode+0xda>
		return -ERANGE;
	}

	int64_t million = mul_scalar(raw * 1000000LL, repr);
   20a8e:	4822      	ldr	r0, [pc, #136]	; (20b18 <scalar_decode+0xe0>)
   20a90:	fb84 0100 	smull	r0, r1, r4, r0
	return (repr->flags & DIVIDE) ? (val / repr->value) :
   20a94:	782c      	ldrb	r4, [r5, #0]
   20a96:	0764      	lsls	r4, r4, #29
   20a98:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   20a9c:	d52f      	bpl.n	20afe <scalar_decode+0xc6>
   20a9e:	f7e0 ff75 	bl	198c <__aeabi_ldivmod>
   20aa2:	4604      	mov	r4, r0
   20aa4:	460d      	mov	r5, r1

	val->val1 = million / 1000000LL;
   20aa6:	4a1c      	ldr	r2, [pc, #112]	; (20b18 <scalar_decode+0xe0>)
   20aa8:	2300      	movs	r3, #0
   20aaa:	4620      	mov	r0, r4
   20aac:	4629      	mov	r1, r5
   20aae:	f7e0 ff6d 	bl	198c <__aeabi_ldivmod>
	val->val2 = million % 1000000LL;
   20ab2:	4a19      	ldr	r2, [pc, #100]	; (20b18 <scalar_decode+0xe0>)
	val->val1 = million / 1000000LL;
   20ab4:	6030      	str	r0, [r6, #0]
	val->val2 = million % 1000000LL;
   20ab6:	2300      	movs	r3, #0
   20ab8:	4620      	mov	r0, r4
   20aba:	4629      	mov	r1, r5
   20abc:	f7e0 ff66 	bl	198c <__aeabi_ldivmod>

	return 0;
   20ac0:	2000      	movs	r0, #0
	val->val2 = million % 1000000LL;
   20ac2:	6072      	str	r2, [r6, #4]
}
   20ac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			raw = net_buf_simple_pull_u8(buf);
   20ac6:	f00b ff46 	bl	2c956 <net_buf_simple_pull_u8>
		raw = net_buf_simple_pull_le32(buf);
   20aca:	4604      	mov	r4, r0
		break;
   20acc:	e7ca      	b.n	20a64 <scalar_decode+0x2c>
		if (repr->flags & SIGNED) {
   20ace:	782b      	ldrb	r3, [r5, #0]
   20ad0:	0799      	lsls	r1, r3, #30
   20ad2:	d503      	bpl.n	20adc <scalar_decode+0xa4>
			raw = (int16_t) net_buf_simple_pull_le16(buf);
   20ad4:	f00b ff47 	bl	2c966 <net_buf_simple_pull_le16>
   20ad8:	b204      	sxth	r4, r0
   20ada:	e7c3      	b.n	20a64 <scalar_decode+0x2c>
			raw = net_buf_simple_pull_le16(buf);
   20adc:	f00b ff43 	bl	2c966 <net_buf_simple_pull_le16>
   20ae0:	e7f3      	b.n	20aca <scalar_decode+0x92>
		raw = net_buf_simple_pull_le24(buf);
   20ae2:	f00b ff53 	bl	2c98c <net_buf_simple_pull_le24>
		if ((repr->flags & SIGNED) && (raw & BIT(24))) {
   20ae6:	782b      	ldrb	r3, [r5, #0]
   20ae8:	079a      	lsls	r2, r3, #30
		raw = net_buf_simple_pull_le24(buf);
   20aea:	4604      	mov	r4, r0
		if ((repr->flags & SIGNED) && (raw & BIT(24))) {
   20aec:	d5ba      	bpl.n	20a64 <scalar_decode+0x2c>
   20aee:	01c3      	lsls	r3, r0, #7
   20af0:	d5b8      	bpl.n	20a64 <scalar_decode+0x2c>
			raw |= (BIT_MASK(8) << 24);
   20af2:	f040 447f 	orr.w	r4, r0, #4278190080	; 0xff000000
   20af6:	e7b5      	b.n	20a64 <scalar_decode+0x2c>
		raw = net_buf_simple_pull_le32(buf);
   20af8:	f00b ff56 	bl	2c9a8 <net_buf_simple_pull_le32>
   20afc:	e7e5      	b.n	20aca <scalar_decode+0x92>
	return (repr->flags & DIVIDE) ? (val / repr->value) :
   20afe:	4343      	muls	r3, r0
   20b00:	fb02 3301 	mla	r3, r2, r1, r3
   20b04:	fba0 4502 	umull	r4, r5, r0, r2
   20b08:	441d      	add	r5, r3
   20b0a:	e7cc      	b.n	20aa6 <scalar_decode+0x6e>
		return -ENOMEM;
   20b0c:	f06f 000b 	mvn.w	r0, #11
   20b10:	e7d8      	b.n	20ac4 <scalar_decode+0x8c>
		return -ERANGE;
   20b12:	f06f 0021 	mvn.w	r0, #33	; 0x21
   20b16:	e7d5      	b.n	20ac4 <scalar_decode+0x8c>
   20b18:	000f4240 	.word	0x000f4240

00020b1c <scalar_encode>:
{
   20b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20b20:	b085      	sub	sp, #20
	const struct scalar_repr *repr = format->user_data;
   20b22:	6885      	ldr	r5, [r0, #8]
{
   20b24:	9000      	str	r0, [sp, #0]
	if (net_buf_simple_tailroom(buf) < format->size) {
   20b26:	4610      	mov	r0, r2
{
   20b28:	9102      	str	r1, [sp, #8]
   20b2a:	4691      	mov	r9, r2
	if (net_buf_simple_tailroom(buf) < format->size) {
   20b2c:	f00b ff51 	bl	2c9d2 <net_buf_simple_tailroom>
   20b30:	9b00      	ldr	r3, [sp, #0]
   20b32:	68df      	ldr	r7, [r3, #12]
   20b34:	42b8      	cmp	r0, r7
   20b36:	d37a      	bcc.n	20c2e <scalar_encode+0x112>
	int64_t raw = div_scalar(val->val1, repr) +
   20b38:	9b02      	ldr	r3, [sp, #8]
   20b3a:	681c      	ldr	r4, [r3, #0]
	return (repr->flags & DIVIDE) ? (val * repr->value) :
   20b3c:	782b      	ldrb	r3, [r5, #0]
   20b3e:	9301      	str	r3, [sp, #4]
   20b40:	f013 0304 	ands.w	r3, r3, #4
	int64_t raw = div_scalar(val->val1, repr) +
   20b44:	4620      	mov	r0, r4
   20b46:	ea4f 71e4 	mov.w	r1, r4, asr #31
	return (repr->flags & DIVIDE) ? (val * repr->value) :
   20b4a:	e9d5 8602 	ldrd	r8, r6, [r5, #8]
   20b4e:	9303      	str	r3, [sp, #12]
   20b50:	d043      	beq.n	20bda <scalar_encode+0xbe>
   20b52:	fb04 f306 	mul.w	r3, r4, r6
   20b56:	fb08 3301 	mla	r3, r8, r1, r3
   20b5a:	fba4 4508 	umull	r4, r5, r4, r8
   20b5e:	441d      	add	r5, r3
		    div_scalar(val->val2, repr) / 1000000LL;
   20b60:	9b02      	ldr	r3, [sp, #8]
	return (repr->flags & DIVIDE) ? (val * repr->value) :
   20b62:	9a03      	ldr	r2, [sp, #12]
		    div_scalar(val->val2, repr) / 1000000LL;
   20b64:	685b      	ldr	r3, [r3, #4]
   20b66:	4618      	mov	r0, r3
   20b68:	17d9      	asrs	r1, r3, #31
	return (repr->flags & DIVIDE) ? (val * repr->value) :
   20b6a:	2a00      	cmp	r2, #0
   20b6c:	d03c      	beq.n	20be8 <scalar_encode+0xcc>
   20b6e:	435e      	muls	r6, r3
   20b70:	fb08 6601 	mla	r6, r8, r1, r6
   20b74:	fba3 0108 	umull	r0, r1, r3, r8
   20b78:	4431      	add	r1, r6
		    div_scalar(val->val2, repr) / 1000000LL;
   20b7a:	4a31      	ldr	r2, [pc, #196]	; (20c40 <scalar_encode+0x124>)
   20b7c:	2300      	movs	r3, #0
   20b7e:	f7e0 ff05 	bl	198c <__aeabi_ldivmod>
	int64_t raw = div_scalar(val->val1, repr) +
   20b82:	eb10 0a04 	adds.w	sl, r0, r4
	int64_t max_value = scalar_max(format);
   20b86:	9800      	ldr	r0, [sp, #0]
	int64_t raw = div_scalar(val->val1, repr) +
   20b88:	eb41 0b05 	adc.w	fp, r1, r5
	int64_t max_value = scalar_max(format);
   20b8c:	f00c f980 	bl	2ce90 <scalar_max>
	if (repr->flags & SIGNED) {
   20b90:	9b00      	ldr	r3, [sp, #0]
   20b92:	689b      	ldr	r3, [r3, #8]
   20b94:	781a      	ldrb	r2, [r3, #0]
   20b96:	f012 0202 	ands.w	r2, r2, #2
		return -BIT64(8 * format->size - 1);
   20b9a:	bf1f      	itttt	ne
   20b9c:	00fa      	lslne	r2, r7, #3
   20b9e:	f102 33ff 	addne.w	r3, r2, #4294967295
   20ba2:	f04f 32ff 	movne.w	r2, #4294967295
   20ba6:	409a      	lslne	r2, r3
	if (raw > max_value || raw < min_value) {
   20ba8:	4550      	cmp	r0, sl
   20baa:	eb71 030b 	sbcs.w	r3, r1, fp
   20bae:	db04      	blt.n	20bba <scalar_encode+0x9e>
   20bb0:	17d3      	asrs	r3, r2, #31
   20bb2:	4592      	cmp	sl, r2
   20bb4:	eb7b 0303 	sbcs.w	r3, fp, r3
   20bb8:	da08      	bge.n	20bcc <scalar_encode+0xb0>
		uint32_t type_max = BIT64(8 * format->size) - 1;
   20bba:	00fa      	lsls	r2, r7, #3
   20bbc:	2301      	movs	r3, #1
   20bbe:	4093      	lsls	r3, r2
		if (repr->flags & (HAS_HIGHER_THAN | HAS_INVALID)) {
   20bc0:	9a01      	ldr	r2, [sp, #4]
   20bc2:	f012 0f30 	tst.w	r2, #48	; 0x30
   20bc6:	d014      	beq.n	20bf2 <scalar_encode+0xd6>
			raw = type_max - 2;
   20bc8:	3b03      	subs	r3, #3
			raw = type_max - 1;
   20bca:	469a      	mov	sl, r3
	switch (format->size) {
   20bcc:	3f01      	subs	r7, #1
   20bce:	2f03      	cmp	r7, #3
   20bd0:	d833      	bhi.n	20c3a <scalar_encode+0x11e>
   20bd2:	e8df f007 	tbb	[pc, r7]
   20bd6:	1c13      	.short	0x1c13
   20bd8:	2722      	.short	0x2722
	return (repr->flags & DIVIDE) ? (val * repr->value) :
   20bda:	4642      	mov	r2, r8
   20bdc:	4633      	mov	r3, r6
   20bde:	f7e0 fed5 	bl	198c <__aeabi_ldivmod>
   20be2:	4604      	mov	r4, r0
   20be4:	460d      	mov	r5, r1
   20be6:	e7bb      	b.n	20b60 <scalar_encode+0x44>
   20be8:	4642      	mov	r2, r8
   20bea:	4633      	mov	r3, r6
   20bec:	f7e0 fece 	bl	198c <__aeabi_ldivmod>
   20bf0:	e7c3      	b.n	20b7a <scalar_encode+0x5e>
		} else if (repr->flags & HAS_UNDEFINED) {
   20bf2:	9a01      	ldr	r2, [sp, #4]
   20bf4:	0712      	lsls	r2, r2, #28
   20bf6:	d51d      	bpl.n	20c34 <scalar_encode+0x118>
			raw = type_max - 1;
   20bf8:	3b02      	subs	r3, #2
   20bfa:	e7e6      	b.n	20bca <scalar_encode+0xae>
		net_buf_simple_add_u8(buf, raw);
   20bfc:	fa5f f18a 	uxtb.w	r1, sl
   20c00:	4648      	mov	r0, r9
   20c02:	f00b fefa 	bl	2c9fa <net_buf_simple_add_u8>
	return 0;
   20c06:	2000      	movs	r0, #0
}
   20c08:	b005      	add	sp, #20
   20c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		net_buf_simple_add_le16(buf, raw);
   20c0e:	fa1f f18a 	uxth.w	r1, sl
   20c12:	4648      	mov	r0, r9
   20c14:	f00b fef8 	bl	2ca08 <net_buf_simple_add_le16>
   20c18:	e7f5      	b.n	20c06 <scalar_encode+0xea>
		net_buf_simple_add_le24(buf, raw);
   20c1a:	4651      	mov	r1, sl
   20c1c:	4648      	mov	r0, r9
   20c1e:	f00b ff05 	bl	2ca2c <net_buf_simple_add_le24>
		break;
   20c22:	e7f0      	b.n	20c06 <scalar_encode+0xea>
		net_buf_simple_add_le32(buf, raw);
   20c24:	4651      	mov	r1, sl
   20c26:	4648      	mov	r0, r9
   20c28:	f00b ff0c 	bl	2ca44 <net_buf_simple_add_le32>
		break;
   20c2c:	e7eb      	b.n	20c06 <scalar_encode+0xea>
		return -ENOMEM;
   20c2e:	f06f 000b 	mvn.w	r0, #11
   20c32:	e7e9      	b.n	20c08 <scalar_encode+0xec>
			return -ERANGE;
   20c34:	f06f 0021 	mvn.w	r0, #33	; 0x21
   20c38:	e7e6      	b.n	20c08 <scalar_encode+0xec>
		return -EIO;
   20c3a:	f06f 0004 	mvn.w	r0, #4
   20c3e:	e7e3      	b.n	20c08 <scalar_encode+0xec>
   20c40:	000f4240 	.word	0x000f4240

00020c44 <bt_mesh_sensor_column_format_get>:
}

const struct bt_mesh_sensor_format *
bt_mesh_sensor_column_format_get(const struct bt_mesh_sensor_type *type)
{
	if (type->flags & BT_MESH_SENSOR_TYPE_FLAG_SERIES &&
   20c44:	7883      	ldrb	r3, [r0, #2]
   20c46:	07db      	lsls	r3, r3, #31
   20c48:	d505      	bpl.n	20c56 <bt_mesh_sensor_column_format_get+0x12>
   20c4a:	78c3      	ldrb	r3, [r0, #3]
   20c4c:	2b01      	cmp	r3, #1
   20c4e:	d902      	bls.n	20c56 <bt_mesh_sensor_column_format_get+0x12>
	    type->channel_count >= 2) {
		return type->channels[1].format;
   20c50:	6843      	ldr	r3, [r0, #4]
   20c52:	6858      	ldr	r0, [r3, #4]
   20c54:	4770      	bx	lr
	}

	return &bt_mesh_sensor_format_time_decihour_8;
   20c56:	4801      	ldr	r0, [pc, #4]	; (20c5c <bt_mesh_sensor_column_format_get+0x18>)
}
   20c58:	4770      	bx	lr
   20c5a:	bf00      	nop
   20c5c:	0002f4d4 	.word	0x0002f4d4

00020c60 <sensor_column_encode>:

int sensor_column_encode(struct net_buf_simple *buf,
			 struct bt_mesh_sensor *sensor,
			 struct bt_mesh_msg_ctx *ctx,
			 const struct bt_mesh_sensor_column *col)
{
   20c60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20c64:	461e      	mov	r6, r3
	struct sensor_value values[CONFIG_BT_MESH_SENSOR_CHANNELS_MAX];
	const struct bt_mesh_sensor_format *col_format;
	const uint64_t width_million =
		(col->end.val1 - col->start.val1) * 1000000L +
   20c66:	689c      	ldr	r4, [r3, #8]
   20c68:	681b      	ldr	r3, [r3, #0]
{
   20c6a:	4691      	mov	r9, r2
		(col->end.val1 - col->start.val1) * 1000000L +
   20c6c:	1ae4      	subs	r4, r4, r3
		(col->end.val2 - col->start.val2);
   20c6e:	6872      	ldr	r2, [r6, #4]
   20c70:	68f3      	ldr	r3, [r6, #12]
   20c72:	1a9b      	subs	r3, r3, r2
		(col->end.val1 - col->start.val1) * 1000000L +
   20c74:	4a1b      	ldr	r2, [pc, #108]	; (20ce4 <sensor_column_encode+0x84>)
   20c76:	fb02 3404 	mla	r4, r2, r4, r3
	const uint64_t width_million =
   20c7a:	17e5      	asrs	r5, r4, #31
{
   20c7c:	b08d      	sub	sp, #52	; 0x34
   20c7e:	460f      	mov	r7, r1
	const struct sensor_value width = {
		.val1 = width_million / 1000000L,
   20c80:	4a18      	ldr	r2, [pc, #96]	; (20ce4 <sensor_column_encode+0x84>)
   20c82:	2300      	movs	r3, #0
{
   20c84:	4680      	mov	r8, r0
		.val1 = width_million / 1000000L,
   20c86:	4629      	mov	r1, r5
   20c88:	4620      	mov	r0, r4
   20c8a:	f7e0 fecf 	bl	1a2c <__aeabi_uldivmod>
		.val2 = width_million % 1000000L,
   20c8e:	4a15      	ldr	r2, [pc, #84]	; (20ce4 <sensor_column_encode+0x84>)
	const struct sensor_value width = {
   20c90:	9000      	str	r0, [sp, #0]
		.val2 = width_million % 1000000L,
   20c92:	2300      	movs	r3, #0
   20c94:	4620      	mov	r0, r4
   20c96:	4629      	mov	r1, r5
   20c98:	f7e0 fec8 	bl	1a2c <__aeabi_uldivmod>
	};
	int err;

	BT_DBG("Column width: %s", bt_mesh_sensor_ch_str(&width));

	col_format = bt_mesh_sensor_column_format_get(sensor->type);
   20c9c:	6838      	ldr	r0, [r7, #0]
	const struct sensor_value width = {
   20c9e:	9201      	str	r2, [sp, #4]
	col_format = bt_mesh_sensor_column_format_get(sensor->type);
   20ca0:	f7ff ffd0 	bl	20c44 <bt_mesh_sensor_column_format_get>
	if (!col_format) {
   20ca4:	4604      	mov	r4, r0
   20ca6:	b1d0      	cbz	r0, 20cde <sensor_column_encode+0x7e>
		return -ENOTSUP;
	}

	err = sensor_ch_encode(buf, col_format, &col->start);
   20ca8:	4601      	mov	r1, r0
   20caa:	4632      	mov	r2, r6
   20cac:	4640      	mov	r0, r8
   20cae:	f00c f954 	bl	2cf5a <sensor_ch_encode>
	if (err) {
   20cb2:	b988      	cbnz	r0, 20cd8 <sensor_column_encode+0x78>
		return err;
	}

	/* The sensor columns are transmitted as start+width, not start+end: */
	err = sensor_ch_encode(buf, col_format, &width);
   20cb4:	466a      	mov	r2, sp
   20cb6:	4621      	mov	r1, r4
   20cb8:	4640      	mov	r0, r8
   20cba:	f00c f94e 	bl	2cf5a <sensor_ch_encode>
	if (err) {
   20cbe:	b958      	cbnz	r0, 20cd8 <sensor_column_encode+0x78>
		return err;
	}

	err = sensor->series.get(sensor, ctx, col, values);
   20cc0:	69bc      	ldr	r4, [r7, #24]
   20cc2:	ab02      	add	r3, sp, #8
   20cc4:	4632      	mov	r2, r6
   20cc6:	4649      	mov	r1, r9
   20cc8:	4638      	mov	r0, r7
   20cca:	47a0      	blx	r4
	if (err) {
   20ccc:	b920      	cbnz	r0, 20cd8 <sensor_column_encode+0x78>
		return err;
	}

	return sensor_value_encode(buf, sensor->type, values);
   20cce:	aa02      	add	r2, sp, #8
   20cd0:	6839      	ldr	r1, [r7, #0]
   20cd2:	4640      	mov	r0, r8
   20cd4:	f00c f94a 	bl	2cf6c <sensor_value_encode>
}
   20cd8:	b00d      	add	sp, #52	; 0x34
   20cda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -ENOTSUP;
   20cde:	f06f 0085 	mvn.w	r0, #133	; 0x85
   20ce2:	e7f9      	b.n	20cd8 <sensor_column_encode+0x78>
   20ce4:	000f4240 	.word	0x000f4240

00020ce8 <sensor_powtime_encode>:
	100000, 110000, 121000, 133100, 146410, 161051, 177156, 194871,
	214358, 235794, 259374, 285311, 313842, 345227, 379749, 417724,
};

uint8_t sensor_powtime_encode(uint64_t raw)
{
   20ce8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (raw == 0) {
   20cec:	ea50 0301 	orrs.w	r3, r0, r1
   20cf0:	d03d      	beq.n	20d6e <sensor_powtime_encode+0x86>
	}

	/* Search through the lookup table to find the highest encoding lower
	 * than the raw value.
	 */
	uint64_t raw_us = raw * USEC_PER_MSEC;
   20cf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   20cf6:	fba0 6703 	umull	r6, r7, r0, r3
   20cfa:	fb03 7701 	mla	r7, r3, r1, r7

	if (raw_us < powtime_lookup[0]) {
   20cfe:	2300      	movs	r3, #0
   20d00:	f640 02c2 	movw	r2, #2242	; 0x8c2
   20d04:	42bb      	cmp	r3, r7
   20d06:	bf08      	it	eq
   20d08:	42b2      	cmpeq	r2, r6
   20d0a:	d232      	bcs.n	20d72 <sensor_powtime_encode+0x8a>
   20d0c:	491a      	ldr	r1, [pc, #104]	; (20d78 <sensor_powtime_encode+0x90>)
		return 1;
	}

	const uint64_t *seed = &powtime_lookup[0];

	for (int i = 1; i < ARRAY_SIZE(powtime_lookup); ++i) {
   20d0e:	2401      	movs	r4, #1
   20d10:	4688      	mov	r8, r1
		if (raw_us < powtime_lookup[i]) {
   20d12:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   20d16:	429f      	cmp	r7, r3
   20d18:	bf08      	it	eq
   20d1a:	4296      	cmpeq	r6, r2
   20d1c:	d220      	bcs.n	20d60 <sensor_powtime_encode+0x78>
			seed = &powtime_lookup[i - 1];
   20d1e:	3c01      	subs	r4, #1
   20d20:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
	}

	int i;

	for (i = 0; (i < ARRAY_SIZE(powtime_mul) &&
		     raw_us > (*seed * powtime_mul[i]) / 100000);
   20d24:	e9d4 ba00 	ldrd	fp, sl, [r4]
   20d28:	f8df 9054 	ldr.w	r9, [pc, #84]	; 20d80 <sensor_powtime_encode+0x98>
	for (i = 0; (i < ARRAY_SIZE(powtime_mul) &&
   20d2c:	2500      	movs	r5, #0
		     raw_us > (*seed * powtime_mul[i]) / 100000);
   20d2e:	f859 3b04 	ldr.w	r3, [r9], #4
   20d32:	4a12      	ldr	r2, [pc, #72]	; (20d7c <sensor_powtime_encode+0x94>)
   20d34:	fba3 010b 	umull	r0, r1, r3, fp
   20d38:	fb03 110a 	mla	r1, r3, sl, r1
   20d3c:	2300      	movs	r3, #0
   20d3e:	f7e0 fe75 	bl	1a2c <__aeabi_uldivmod>
	for (i = 0; (i < ARRAY_SIZE(powtime_mul) &&
   20d42:	42b9      	cmp	r1, r7
   20d44:	bf08      	it	eq
   20d46:	42b0      	cmpeq	r0, r6
   20d48:	d202      	bcs.n	20d50 <sensor_powtime_encode+0x68>
	     i++) {
   20d4a:	3501      	adds	r5, #1
	for (i = 0; (i < ARRAY_SIZE(powtime_mul) &&
   20d4c:	2d10      	cmp	r5, #16
   20d4e:	d1ee      	bne.n	20d2e <sensor_powtime_encode+0x46>
	}

	return ARRAY_SIZE(powtime_mul) * (seed - &powtime_lookup[0]) + i;
   20d50:	eba4 0008 	sub.w	r0, r4, r8
   20d54:	10c0      	asrs	r0, r0, #3
   20d56:	eb05 1000 	add.w	r0, r5, r0, lsl #4
   20d5a:	b2c0      	uxtb	r0, r0
}
   20d5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int i = 1; i < ARRAY_SIZE(powtime_lookup); ++i) {
   20d60:	3401      	adds	r4, #1
   20d62:	2c10      	cmp	r4, #16
   20d64:	f101 0108 	add.w	r1, r1, #8
   20d68:	d1d3      	bne.n	20d12 <sensor_powtime_encode+0x2a>
	const uint64_t *seed = &powtime_lookup[0];
   20d6a:	4c03      	ldr	r4, [pc, #12]	; (20d78 <sensor_powtime_encode+0x90>)
   20d6c:	e7da      	b.n	20d24 <sensor_powtime_encode+0x3c>
		return 0;
   20d6e:	2000      	movs	r0, #0
   20d70:	e7f4      	b.n	20d5c <sensor_powtime_encode+0x74>
		return 1;
   20d72:	2001      	movs	r0, #1
   20d74:	e7f2      	b.n	20d5c <sensor_powtime_encode+0x74>
   20d76:	bf00      	nop
   20d78:	0002e7b8 	.word	0x0002e7b8
   20d7c:	000186a0 	.word	0x000186a0
   20d80:	0002f4f4 	.word	0x0002f4f4

00020d84 <sensor_cadence_encode>:

int sensor_cadence_encode(struct net_buf_simple *buf,
			  const struct bt_mesh_sensor_type *sensor_type,
			  uint8_t fast_period_div, uint8_t min_int,
			  const struct bt_mesh_sensor_threshold *threshold)
{
   20d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20d88:	9c06      	ldr	r4, [sp, #24]
   20d8a:	460f      	mov	r7, r1
	net_buf_simple_add_u8(buf, ((!!threshold->delta.type) << 7) |
   20d8c:	7821      	ldrb	r1, [r4, #0]
   20d8e:	2900      	cmp	r1, #0
   20d90:	bf18      	it	ne
   20d92:	2180      	movne	r1, #128	; 0x80
					   (BIT_MASK(7) & fast_period_div));
   20d94:	f002 027f 	and.w	r2, r2, #127	; 0x7f
	net_buf_simple_add_u8(buf, ((!!threshold->delta.type) << 7) |
   20d98:	4311      	orrs	r1, r2
{
   20d9a:	4605      	mov	r5, r0
   20d9c:	4698      	mov	r8, r3
	net_buf_simple_add_u8(buf, ((!!threshold->delta.type) << 7) |
   20d9e:	f00b fe2c 	bl	2c9fa <net_buf_simple_add_u8>

	const struct bt_mesh_sensor_format *delta_format =
		(threshold->delta.type == BT_MESH_SENSOR_DELTA_PERCENT) ?
			&bt_mesh_sensor_format_percentage_delta_trigger :
   20da2:	7823      	ldrb	r3, [r4, #0]
   20da4:	2b01      	cmp	r3, #1
   20da6:	bf16      	itet	ne
   20da8:	687b      	ldrne	r3, [r7, #4]
   20daa:	4e17      	ldreq	r6, [pc, #92]	; (20e08 <sensor_cadence_encode+0x84>)
   20dac:	681e      	ldrne	r6, [r3, #0]
			sensor_type->channels[0].format;
	int err;

	err = sensor_ch_encode(buf, delta_format, &threshold->delta.down);
   20dae:	f104 020c 	add.w	r2, r4, #12
   20db2:	4631      	mov	r1, r6
   20db4:	4628      	mov	r0, r5
   20db6:	f00c f8d0 	bl	2cf5a <sensor_ch_encode>
	if (err) {
   20dba:	bb10      	cbnz	r0, 20e02 <sensor_cadence_encode+0x7e>
		return err;
	}

	err = sensor_ch_encode(buf, delta_format, &threshold->delta.up);
   20dbc:	1d22      	adds	r2, r4, #4
   20dbe:	4631      	mov	r1, r6
   20dc0:	4628      	mov	r0, r5
   20dc2:	f00c f8ca 	bl	2cf5a <sensor_ch_encode>
	if (err) {
   20dc6:	b9e0      	cbnz	r0, 20e02 <sensor_cadence_encode+0x7e>
		return err;
	}

	net_buf_simple_add_u8(buf, min_int);
   20dc8:	4641      	mov	r1, r8
   20dca:	4628      	mov	r0, r5
   20dcc:	f00b fe15 	bl	2c9fa <net_buf_simple_add_u8>

	/* Flip the order if the cadence is fast outside. */
	const struct sensor_value *first, *second;

	if (threshold->range.cadence == BT_MESH_SENSOR_CADENCE_FAST) {
   20dd0:	7d23      	ldrb	r3, [r4, #20]
   20dd2:	f104 0220 	add.w	r2, r4, #32
   20dd6:	2b01      	cmp	r3, #1
   20dd8:	bf08      	it	eq
   20dda:	4613      	moveq	r3, r2
   20ddc:	f104 0618 	add.w	r6, r4, #24
		first = &threshold->range.low;
   20de0:	bf04      	itt	eq
   20de2:	4632      	moveq	r2, r6
		second = &threshold->range.high;
   20de4:	461e      	moveq	r6, r3
	} else {
		first = &threshold->range.high;
		second = &threshold->range.low;
	}

	err = sensor_ch_encode(buf, sensor_type->channels[0].format, first);
   20de6:	687b      	ldr	r3, [r7, #4]
   20de8:	4628      	mov	r0, r5
   20dea:	6819      	ldr	r1, [r3, #0]
   20dec:	f00c f8b5 	bl	2cf5a <sensor_ch_encode>
	if (err) {
   20df0:	b938      	cbnz	r0, 20e02 <sensor_cadence_encode+0x7e>
		return err;
	}

	return sensor_ch_encode(buf, sensor_type->channels[0].format, second);
   20df2:	687b      	ldr	r3, [r7, #4]
   20df4:	4632      	mov	r2, r6
   20df6:	4628      	mov	r0, r5
   20df8:	6819      	ldr	r1, [r3, #0]
}
   20dfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return sensor_ch_encode(buf, sensor_type->channels[0].format, second);
   20dfe:	f00c b8ac 	b.w	2cf5a <sensor_ch_encode>
}
   20e02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20e06:	bf00      	nop
   20e08:	0002f4b4 	.word	0x0002f4b4

00020e0c <sensor_cadence_decode>:

int sensor_cadence_decode(struct net_buf_simple *buf,
			  const struct bt_mesh_sensor_type *sensor_type,
			  uint8_t *fast_period_div, uint8_t *min_int,
			  struct bt_mesh_sensor_threshold *threshold)
{
   20e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20e10:	9c06      	ldr	r4, [sp, #24]
   20e12:	4616      	mov	r6, r2
   20e14:	461f      	mov	r7, r3
   20e16:	4605      	mov	r5, r0
   20e18:	4688      	mov	r8, r1
	const struct bt_mesh_sensor_format *delta_format;
	uint8_t div_and_type;
	int err;

	div_and_type = net_buf_simple_pull_u8(buf);
   20e1a:	f00b fd9c 	bl	2c956 <net_buf_simple_pull_u8>
	threshold->delta.type = div_and_type >> 7;
   20e1e:	09c3      	lsrs	r3, r0, #7
   20e20:	7023      	strb	r3, [r4, #0]
	*fast_period_div = div_and_type & BIT_MASK(7);
	if (*fast_period_div > BT_MESH_SENSOR_PERIOD_DIV_MAX) {
   20e22:	f010 0f70 	tst.w	r0, #112	; 0x70
	*fast_period_div = div_and_type & BIT_MASK(7);
   20e26:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   20e2a:	7033      	strb	r3, [r6, #0]
	if (*fast_period_div > BT_MESH_SENSOR_PERIOD_DIV_MAX) {
   20e2c:	d004      	beq.n	20e38 <sensor_cadence_decode+0x2c>
		return -EINVAL;
   20e2e:	f06f 0315 	mvn.w	r3, #21
	} else {
		threshold->range.cadence = BT_MESH_SENSOR_CADENCE_FAST;
	}

	return 0;
}
   20e32:	4618      	mov	r0, r3
   20e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			       &bt_mesh_sensor_format_percentage_delta_trigger :
   20e38:	7823      	ldrb	r3, [r4, #0]
   20e3a:	2b01      	cmp	r3, #1
   20e3c:	bf16      	itet	ne
   20e3e:	f8d8 3004 	ldrne.w	r3, [r8, #4]
   20e42:	4e23      	ldreq	r6, [pc, #140]	; (20ed0 <sensor_cadence_decode+0xc4>)
   20e44:	681e      	ldrne	r6, [r3, #0]
	err = sensor_ch_decode(buf, delta_format, &threshold->delta.down);
   20e46:	f104 020c 	add.w	r2, r4, #12
   20e4a:	4631      	mov	r1, r6
   20e4c:	4628      	mov	r0, r5
   20e4e:	f00c f8a3 	bl	2cf98 <sensor_ch_decode>
	if (err) {
   20e52:	4603      	mov	r3, r0
   20e54:	2800      	cmp	r0, #0
   20e56:	d1ec      	bne.n	20e32 <sensor_cadence_decode+0x26>
	err = sensor_ch_decode(buf, delta_format, &threshold->delta.up);
   20e58:	1d22      	adds	r2, r4, #4
   20e5a:	4631      	mov	r1, r6
   20e5c:	4628      	mov	r0, r5
   20e5e:	f00c f89b 	bl	2cf98 <sensor_ch_decode>
	if (err) {
   20e62:	4603      	mov	r3, r0
   20e64:	2800      	cmp	r0, #0
   20e66:	d1e4      	bne.n	20e32 <sensor_cadence_decode+0x26>
	*min_int = net_buf_simple_pull_u8(buf);
   20e68:	4628      	mov	r0, r5
   20e6a:	f00b fd74 	bl	2c956 <net_buf_simple_pull_u8>
	if (*min_int > BT_MESH_SENSOR_INTERVAL_MAX) {
   20e6e:	281a      	cmp	r0, #26
	*min_int = net_buf_simple_pull_u8(buf);
   20e70:	7038      	strb	r0, [r7, #0]
	if (*min_int > BT_MESH_SENSOR_INTERVAL_MAX) {
   20e72:	d8dc      	bhi.n	20e2e <sensor_cadence_decode+0x22>
	err = sensor_ch_decode(buf, sensor_type->channels[0].format,
   20e74:	f8d8 3004 	ldr.w	r3, [r8, #4]
   20e78:	f104 0718 	add.w	r7, r4, #24
   20e7c:	6819      	ldr	r1, [r3, #0]
   20e7e:	463a      	mov	r2, r7
   20e80:	4628      	mov	r0, r5
   20e82:	f00c f889 	bl	2cf98 <sensor_ch_decode>
	if (err) {
   20e86:	4603      	mov	r3, r0
   20e88:	2800      	cmp	r0, #0
   20e8a:	d1d2      	bne.n	20e32 <sensor_cadence_decode+0x26>
	err = sensor_ch_decode(buf, sensor_type->channels[0].format,
   20e8c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   20e90:	f104 0620 	add.w	r6, r4, #32
   20e94:	6819      	ldr	r1, [r3, #0]
   20e96:	4632      	mov	r2, r6
   20e98:	4628      	mov	r0, r5
   20e9a:	f00c f87d 	bl	2cf98 <sensor_ch_decode>
	if (err) {
   20e9e:	4603      	mov	r3, r0
   20ea0:	2800      	cmp	r0, #0
   20ea2:	d1c6      	bne.n	20e32 <sensor_cadence_decode+0x26>
	if (threshold->range.high.val1 < threshold->range.low.val1 ||
   20ea4:	6a22      	ldr	r2, [r4, #32]
   20ea6:	69a1      	ldr	r1, [r4, #24]
   20ea8:	428a      	cmp	r2, r1
   20eaa:	db04      	blt.n	20eb6 <sensor_cadence_decode+0xaa>
   20eac:	d10d      	bne.n	20eca <sensor_cadence_decode+0xbe>
	    (threshold->range.high.val1 == threshold->range.low.val1 &&
   20eae:	6a60      	ldr	r0, [r4, #36]	; 0x24
   20eb0:	69e1      	ldr	r1, [r4, #28]
   20eb2:	4288      	cmp	r0, r1
   20eb4:	da09      	bge.n	20eca <sensor_cadence_decode+0xbe>
		threshold->range.high = threshold->range.low;
   20eb6:	e897 0003 	ldmia.w	r7, {r0, r1}
		temp = threshold->range.high;
   20eba:	6a65      	ldr	r5, [r4, #36]	; 0x24
		threshold->range.high = threshold->range.low;
   20ebc:	e886 0003 	stmia.w	r6, {r0, r1}
		threshold->range.low = temp;
   20ec0:	e9c4 2506 	strd	r2, r5, [r4, #24]
		threshold->range.cadence = BT_MESH_SENSOR_CADENCE_NORMAL;
   20ec4:	2200      	movs	r2, #0
		threshold->range.cadence = BT_MESH_SENSOR_CADENCE_FAST;
   20ec6:	7522      	strb	r2, [r4, #20]
   20ec8:	e7b3      	b.n	20e32 <sensor_cadence_decode+0x26>
   20eca:	2201      	movs	r2, #1
   20ecc:	e7fb      	b.n	20ec6 <sensor_cadence_decode+0xba>
   20ece:	bf00      	nop
   20ed0:	0002f4b4 	.word	0x0002f4b4

00020ed4 <sensor_cadence_update>:
	int64_t high_mill = SENSOR_MILL(&threshold->range.high);
   20ed4:	6c42      	ldr	r2, [r0, #68]	; 0x44
   20ed6:	f8df c074 	ldr.w	ip, [pc, #116]	; 20f4c <sensor_cadence_update+0x78>
		(value->val1 == col->end.val1 && value->val2 <= col->end.val2));
}

void sensor_cadence_update(struct bt_mesh_sensor *sensor,
			   const struct sensor_value *value)
{
   20eda:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	int64_t high_mill = SENSOR_MILL(&threshold->range.high);
   20ede:	6c04      	ldr	r4, [r0, #64]	; 0x40
	int64_t low_mill = SENSOR_MILL(&threshold->range.low);
   20ee0:	6b86      	ldr	r6, [r0, #56]	; 0x38
	int64_t high_mill = SENSOR_MILL(&threshold->range.high);
   20ee2:	17d3      	asrs	r3, r2, #31
   20ee4:	fbcc 2304 	smlal	r2, r3, ip, r4
	int64_t low_mill = SENSOR_MILL(&threshold->range.low);
   20ee8:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
   20eea:	17e5      	asrs	r5, r4, #31
   20eec:	fbcc 4506 	smlal	r4, r5, ip, r6
	if (high_mill == low_mill) {
   20ef0:	42ab      	cmp	r3, r5
   20ef2:	bf08      	it	eq
   20ef4:	42a2      	cmpeq	r2, r4
   20ef6:	d027      	beq.n	20f48 <sensor_cadence_update+0x74>
	int64_t curr_mill = SENSOR_MILL(curr);
   20ef8:	684e      	ldr	r6, [r1, #4]
   20efa:	6809      	ldr	r1, [r1, #0]
   20efc:	17f7      	asrs	r7, r6, #31
	bool in_range = (curr_mill >= MIN(low_mill, high_mill) &&
   20efe:	4294      	cmp	r4, r2
	int64_t curr_mill = SENSOR_MILL(curr);
   20f00:	fbcc 6701 	smlal	r6, r7, ip, r1
	bool in_range = (curr_mill >= MIN(low_mill, high_mill) &&
   20f04:	eb75 0c03 	sbcs.w	ip, r5, r3
   20f08:	4690      	mov	r8, r2
   20f0a:	bfb8      	it	lt
   20f0c:	46a0      	movlt	r8, r4
   20f0e:	4699      	mov	r9, r3
   20f10:	bfb8      	it	lt
   20f12:	46a9      	movlt	r9, r5
   20f14:	4546      	cmp	r6, r8
   20f16:	eb77 0c09 	sbcs.w	ip, r7, r9
   20f1a:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
   20f1e:	db08      	blt.n	20f32 <sensor_cadence_update+0x5e>
			 curr_mill <= MAX(low_mill, high_mill));
   20f20:	42a2      	cmp	r2, r4
   20f22:	eb73 0c05 	sbcs.w	ip, r3, r5
   20f26:	bfbc      	itt	lt
   20f28:	4622      	movlt	r2, r4
   20f2a:	462b      	movlt	r3, r5
	bool in_range = (curr_mill >= MIN(low_mill, high_mill) &&
   20f2c:	42b2      	cmp	r2, r6
   20f2e:	41bb      	sbcs	r3, r7
   20f30:	da02      	bge.n	20f38 <sensor_cadence_update+0x64>
	return in_range ? threshold->range.cadence : !threshold->range.cadence;
   20f32:	fab1 f181 	clz	r1, r1
   20f36:	0949      	lsrs	r1, r1, #5
		BT_DBG("0x%04x new cadence: %s", sensor->type->id,
		       (new == BT_MESH_SENSOR_CADENCE_FAST) ? "fast" :
							      "normal");
	}

	sensor->state.fast_pub = new;
   20f38:	f890 3057 	ldrb.w	r3, [r0, #87]	; 0x57
   20f3c:	f361 1304 	bfi	r3, r1, #4, #1
   20f40:	f880 3057 	strb.w	r3, [r0, #87]	; 0x57
}
   20f44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_MESH_SENSOR_CADENCE_NORMAL;
   20f48:	2100      	movs	r1, #0
   20f4a:	e7f5      	b.n	20f38 <sensor_cadence_update+0x64>
   20f4c:	000f4240 	.word	0x000f4240

00020f50 <hw_cc3xx_init>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init(const struct device *dev)
{
   20f50:	b508      	push	{r3, lr}
	int res;

	__ASSERT_NO_MSG(dev != NULL);
   20f52:	b940      	cbnz	r0, 20f66 <hw_cc3xx_init+0x16>
   20f54:	4908      	ldr	r1, [pc, #32]	; (20f78 <hw_cc3xx_init+0x28>)
   20f56:	4809      	ldr	r0, [pc, #36]	; (20f7c <hw_cc3xx_init+0x2c>)
   20f58:	2218      	movs	r2, #24
   20f5a:	f006 f808 	bl	26f6e <printk>
   20f5e:	2118      	movs	r1, #24
   20f60:	4805      	ldr	r0, [pc, #20]	; (20f78 <hw_cc3xx_init+0x28>)
   20f62:	f006 fa7d 	bl	27460 <assert_post_action>

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   20f66:	f7e5 fc09 	bl	677c <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   20f6a:	f7e5 fcbb 	bl	68e4 <nrf_cc3xx_platform_mutex_init>
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
#endif
	return res;
}
   20f6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init();
   20f72:	f003 be37 	b.w	24be4 <nrf_cc3xx_platform_init>
   20f76:	bf00      	nop
   20f78:	00035982 	.word	0x00035982
   20f7c:	0002fa94 	.word	0x0002fa94

00020f80 <__NVIC_SystemReset>:
   20f80:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   20f84:	4905      	ldr	r1, [pc, #20]	; (20f9c <__NVIC_SystemReset+0x1c>)
   20f86:	4b06      	ldr	r3, [pc, #24]	; (20fa0 <__NVIC_SystemReset+0x20>)
   20f88:	68ca      	ldr	r2, [r1, #12]
   20f8a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   20f8e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   20f90:	60cb      	str	r3, [r1, #12]
   20f92:	f3bf 8f4f 	dsb	sy
    __NOP();
   20f96:	bf00      	nop
   20f98:	e7fd      	b.n	20f96 <__NVIC_SystemReset+0x16>
   20f9a:	bf00      	nop
   20f9c:	e000ed00 	.word	0xe000ed00
   20fa0:	05fa0004 	.word	0x05fa0004

00020fa4 <nrf52_errata_136>:
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   20fa4:	4b06      	ldr	r3, [pc, #24]	; (20fc0 <nrf52_errata_136+0x1c>)
   20fa6:	6818      	ldr	r0, [r3, #0]
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   20fa8:	3b04      	subs	r3, #4
            if (var1 == 0x08)
   20faa:	681b      	ldr	r3, [r3, #0]
   20fac:	2b08      	cmp	r3, #8
   20fae:	d104      	bne.n	20fba <nrf52_errata_136+0x16>
                switch(var2)
   20fb0:	2803      	cmp	r0, #3
   20fb2:	bf8c      	ite	hi
   20fb4:	2000      	movhi	r0, #0
   20fb6:	2001      	movls	r0, #1
   20fb8:	4770      	bx	lr
        return false;
   20fba:	2000      	movs	r0, #0
}
   20fbc:	4770      	bx	lr
   20fbe:	bf00      	nop
   20fc0:	10000134 	.word	0x10000134

00020fc4 <nrf52_errata_103>:
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   20fc4:	4b05      	ldr	r3, [pc, #20]	; (20fdc <nrf52_errata_103+0x18>)
   20fc6:	6818      	ldr	r0, [r3, #0]
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   20fc8:	3b04      	subs	r3, #4
            if (var1 == 0x08)
   20fca:	681b      	ldr	r3, [r3, #0]
   20fcc:	2b08      	cmp	r3, #8
                switch(var2)
   20fce:	bf06      	itte	eq
   20fd0:	fab0 f080 	clzeq	r0, r0
   20fd4:	0940      	lsreq	r0, r0, #5
        return false;
   20fd6:	2000      	movne	r0, #0
}
   20fd8:	4770      	bx	lr
   20fda:	bf00      	nop
   20fdc:	10000134 	.word	0x10000134

00020fe0 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   20fe0:	4a02      	ldr	r2, [pc, #8]	; (20fec <nvmc_wait+0xc>)
   20fe2:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   20fe6:	2b00      	cmp	r3, #0
   20fe8:	d0fb      	beq.n	20fe2 <nvmc_wait+0x2>
}
   20fea:	4770      	bx	lr
   20fec:	4001e000 	.word	0x4001e000

00020ff0 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   20ff0:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   20ff2:	f7ff ffd7 	bl	20fa4 <nrf52_errata_136>
   20ff6:	b140      	cbz	r0, 2100a <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   20ff8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   20ffc:	2200      	movs	r2, #0
   20ffe:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   21002:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   21006:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   2100a:	f7ff ffcb 	bl	20fa4 <nrf52_errata_136>
   2100e:	2800      	cmp	r0, #0
   21010:	d046      	beq.n	210a0 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   21012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   21016:	4b57      	ldr	r3, [pc, #348]	; (21174 <SystemInit+0x184>)
   21018:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   2101c:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   21020:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   21024:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   21028:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   2102c:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   21030:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   21034:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   21038:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   2103c:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   21040:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   21044:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   21048:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   2104c:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   21050:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   21054:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   21058:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   2105c:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   21060:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   21064:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   21068:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   2106c:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   21070:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   21074:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   21078:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   2107c:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   21080:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   21084:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   21088:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   2108c:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   21090:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   21094:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   21098:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   2109c:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   210a0:	f7ff ff90 	bl	20fc4 <nrf52_errata_103>
   210a4:	b110      	cbz	r0, 210ac <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   210a6:	4b34      	ldr	r3, [pc, #208]	; (21178 <SystemInit+0x188>)
   210a8:	4a34      	ldr	r2, [pc, #208]	; (2117c <SystemInit+0x18c>)
   210aa:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   210ac:	f7ff ff8a 	bl	20fc4 <nrf52_errata_103>
   210b0:	b118      	cbz	r0, 210ba <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   210b2:	4b33      	ldr	r3, [pc, #204]	; (21180 <SystemInit+0x190>)
   210b4:	22fb      	movs	r2, #251	; 0xfb
   210b6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   210ba:	f7ff ff83 	bl	20fc4 <nrf52_errata_103>
   210be:	b148      	cbz	r0, 210d4 <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   210c0:	4930      	ldr	r1, [pc, #192]	; (21184 <SystemInit+0x194>)
   210c2:	4b31      	ldr	r3, [pc, #196]	; (21188 <SystemInit+0x198>)
   210c4:	680a      	ldr	r2, [r1, #0]
   210c6:	681b      	ldr	r3, [r3, #0]
   210c8:	f022 020f 	bic.w	r2, r2, #15
   210cc:	f003 030f 	and.w	r3, r3, #15
   210d0:	4313      	orrs	r3, r2
   210d2:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   210d4:	f7ff ff76 	bl	20fc4 <nrf52_errata_103>
   210d8:	b118      	cbz	r0, 210e2 <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   210da:	4b2c      	ldr	r3, [pc, #176]	; (2118c <SystemInit+0x19c>)
   210dc:	f44f 7200 	mov.w	r2, #512	; 0x200
   210e0:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   210e2:	f7ff ff5f 	bl	20fa4 <nrf52_errata_136>
   210e6:	b148      	cbz	r0, 210fc <SystemInit+0x10c>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   210e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   210ec:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   210f0:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   210f2:	bf44      	itt	mi
   210f4:	f06f 0201 	mvnmi.w	r2, #1
   210f8:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400

    /* Configure NFCT pins as GPIOs if NFCT is not to be used in your code. If CONFIG_NFCT_PINS_AS_GPIOS is not defined,
       two GPIOs (see Product Specification to see which ones) will be reserved for NFC and will not be available as
       normal GPIOs. */
    #if defined (CONFIG_NFCT_PINS_AS_GPIOS) && defined(NFCT_PRESENT)
        if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
   210fc:	f04f 2110 	mov.w	r1, #268439552	; 0x10001000
   21100:	f8d1 320c 	ldr.w	r3, [r1, #524]	; 0x20c
   21104:	07db      	lsls	r3, r3, #31
   21106:	d514      	bpl.n	21132 <SystemInit+0x142>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   21108:	4821      	ldr	r0, [pc, #132]	; (21190 <SystemInit+0x1a0>)
   2110a:	2301      	movs	r3, #1
   2110c:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
    nvmc_wait();
   21110:	f7ff ff66 	bl	20fe0 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
   21114:	f8d1 320c 	ldr.w	r3, [r1, #524]	; 0x20c
   21118:	f023 0301 	bic.w	r3, r3, #1
   2111c:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c
            nvmc_wait();
   21120:	f7ff ff5e 	bl	20fe0 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   21124:	2300      	movs	r3, #0
   21126:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
    nvmc_wait();
   2112a:	f7ff ff59 	bl	20fe0 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
            nvmc_wait();
            NRF_UICR->PSELRESET[1] = RESET_PIN;
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
   2112e:	f7ff ff27 	bl	20f80 <__NVIC_SystemReset>
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   21132:	f8d1 3200 	ldr.w	r3, [r1, #512]	; 0x200
   21136:	2b00      	cmp	r3, #0
   21138:	db03      	blt.n	21142 <SystemInit+0x152>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   2113a:	f8d1 3204 	ldr.w	r3, [r1, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   2113e:	2b00      	cmp	r3, #0
   21140:	da14      	bge.n	2116c <SystemInit+0x17c>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   21142:	4913      	ldr	r1, [pc, #76]	; (21190 <SystemInit+0x1a0>)
   21144:	2301      	movs	r3, #1
   21146:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   2114a:	f7ff ff49 	bl	20fe0 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   2114e:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
   21152:	2412      	movs	r4, #18
   21154:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   21158:	f7ff ff42 	bl	20fe0 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   2115c:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   21160:	f7ff ff3e 	bl	20fe0 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   21164:	2300      	movs	r3, #0
   21166:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
   2116a:	e7de      	b.n	2112a <SystemInit+0x13a>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   2116c:	4b09      	ldr	r3, [pc, #36]	; (21194 <SystemInit+0x1a4>)
   2116e:	4a0a      	ldr	r2, [pc, #40]	; (21198 <SystemInit+0x1a8>)
   21170:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   21172:	bd10      	pop	{r4, pc}
   21174:	4000c000 	.word	0x4000c000
   21178:	4000568c 	.word	0x4000568c
   2117c:	00038148 	.word	0x00038148
   21180:	4000f000 	.word	0x4000f000
   21184:	40000ee4 	.word	0x40000ee4
   21188:	10000258 	.word	0x10000258
   2118c:	40029640 	.word	0x40029640
   21190:	4001e000 	.word	0x4001e000
   21194:	20000e40 	.word	0x20000e40
   21198:	03d09000 	.word	0x03d09000

0002119c <nrf_clock_is_running.constprop.2>:
NRF_STATIC_INLINE bool nrf_clock_is_running(NRF_CLOCK_Type const * p_reg,
   2119c:	b508      	push	{r3, lr}
    switch (domain)
   2119e:	b170      	cbz	r0, 211be <nrf_clock_is_running.constprop.2+0x22>
   211a0:	2801      	cmp	r0, #1
   211a2:	d01b      	beq.n	211dc <nrf_clock_is_running.constprop.2+0x40>
            NRFX_ASSERT(0);
   211a4:	f240 3242 	movw	r2, #834	; 0x342
   211a8:	4913      	ldr	r1, [pc, #76]	; (211f8 <nrf_clock_is_running.constprop.2+0x5c>)
   211aa:	4814      	ldr	r0, [pc, #80]	; (211fc <nrf_clock_is_running.constprop.2+0x60>)
   211ac:	f005 fedf 	bl	26f6e <printk>
   211b0:	4811      	ldr	r0, [pc, #68]	; (211f8 <nrf_clock_is_running.constprop.2+0x5c>)
   211b2:	f240 3142 	movw	r1, #834	; 0x342
   211b6:	f006 f953 	bl	27460 <assert_post_action>
            return false;
   211ba:	2000      	movs	r0, #0
   211bc:	e00d      	b.n	211da <nrf_clock_is_running.constprop.2+0x3e>
            if (p_clk_src != NULL)
   211be:	b131      	cbz	r1, 211ce <nrf_clock_is_running.constprop.2+0x32>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   211c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   211c4:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   211c8:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   211cc:	600b      	str	r3, [r1, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   211ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   211d2:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   211d6:	f3c0 4000 	ubfx	r0, r0, #16, #1
}
   211da:	bd08      	pop	{r3, pc}
            if (p_clk_src != NULL)
   211dc:	b131      	cbz	r1, 211ec <nrf_clock_is_running.constprop.2+0x50>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   211de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   211e2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
   211e6:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   211ea:	700b      	strb	r3, [r1, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   211ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   211f0:	f8d3 040c 	ldr.w	r0, [r3, #1036]	; 0x40c
   211f4:	e7ef      	b.n	211d6 <nrf_clock_is_running.constprop.2+0x3a>
   211f6:	bf00      	nop
   211f8:	000359b9 	.word	0x000359b9
   211fc:	0002fa94 	.word	0x0002fa94

00021200 <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
   21200:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
   21202:	4604      	mov	r4, r0
   21204:	b940      	cbnz	r0, 21218 <nrfx_clock_init+0x18>
   21206:	4909      	ldr	r1, [pc, #36]	; (2122c <nrfx_clock_init+0x2c>)
   21208:	4809      	ldr	r0, [pc, #36]	; (21230 <nrfx_clock_init+0x30>)
   2120a:	22b3      	movs	r2, #179	; 0xb3
   2120c:	f005 feaf 	bl	26f6e <printk>
   21210:	21b3      	movs	r1, #179	; 0xb3
   21212:	4806      	ldr	r0, [pc, #24]	; (2122c <nrfx_clock_init+0x2c>)
   21214:	f006 f924 	bl	27460 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   21218:	4b06      	ldr	r3, [pc, #24]	; (21234 <nrfx_clock_init+0x34>)
   2121a:	791a      	ldrb	r2, [r3, #4]
   2121c:	b922      	cbnz	r2, 21228 <nrfx_clock_init+0x28>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   2121e:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
   21220:	4805      	ldr	r0, [pc, #20]	; (21238 <nrfx_clock_init+0x38>)
        m_clock_cb.event_handler = event_handler;
   21222:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
   21224:	809a      	strh	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   21226:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   21228:	4804      	ldr	r0, [pc, #16]	; (2123c <nrfx_clock_init+0x3c>)
    return err_code;
   2122a:	e7fc      	b.n	21226 <nrfx_clock_init+0x26>
   2122c:	000359ed 	.word	0x000359ed
   21230:	0002fa94 	.word	0x0002fa94
   21234:	20004558 	.word	0x20004558
   21238:	0bad0000 	.word	0x0bad0000
   2123c:	0bad000c 	.word	0x0bad000c

00021240 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   21240:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   21242:	4b0a      	ldr	r3, [pc, #40]	; (2126c <nrfx_clock_enable+0x2c>)
   21244:	791b      	ldrb	r3, [r3, #4]
   21246:	b943      	cbnz	r3, 2125a <nrfx_clock_enable+0x1a>
   21248:	4909      	ldr	r1, [pc, #36]	; (21270 <nrfx_clock_enable+0x30>)
   2124a:	480a      	ldr	r0, [pc, #40]	; (21274 <nrfx_clock_enable+0x34>)
   2124c:	22cc      	movs	r2, #204	; 0xcc
   2124e:	f005 fe8e 	bl	26f6e <printk>
   21252:	21cc      	movs	r1, #204	; 0xcc
   21254:	4806      	ldr	r0, [pc, #24]	; (21270 <nrfx_clock_enable+0x30>)
   21256:	f006 f903 	bl	27460 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   2125a:	2000      	movs	r0, #0
   2125c:	f7e5 fd6a 	bl	6d34 <arch_irq_is_enabled>
   21260:	b918      	cbnz	r0, 2126a <nrfx_clock_enable+0x2a>
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   21262:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   21266:	f7e5 bd41 	b.w	6cec <arch_irq_enable>
   2126a:	bd08      	pop	{r3, pc}
   2126c:	20004558 	.word	0x20004558
   21270:	000359ed 	.word	0x000359ed
   21274:	0002fa94 	.word	0x0002fa94

00021278 <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   21278:	4b21      	ldr	r3, [pc, #132]	; (21300 <nrfx_clock_start+0x88>)
   2127a:	791b      	ldrb	r3, [r3, #4]
{
   2127c:	b513      	push	{r0, r1, r4, lr}
   2127e:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   21280:	b953      	cbnz	r3, 21298 <nrfx_clock_start+0x20>
   21282:	4920      	ldr	r1, [pc, #128]	; (21304 <nrfx_clock_start+0x8c>)
   21284:	4820      	ldr	r0, [pc, #128]	; (21308 <nrfx_clock_start+0x90>)
   21286:	f44f 7284 	mov.w	r2, #264	; 0x108
   2128a:	f005 fe70 	bl	26f6e <printk>
   2128e:	f44f 7184 	mov.w	r1, #264	; 0x108
   21292:	481c      	ldr	r0, [pc, #112]	; (21304 <nrfx_clock_start+0x8c>)
   21294:	f006 f8e4 	bl	27460 <assert_post_action>
    switch (domain)
   21298:	b16c      	cbz	r4, 212b6 <nrfx_clock_start+0x3e>
   2129a:	2c01      	cmp	r4, #1
   2129c:	d026      	beq.n	212ec <nrfx_clock_start+0x74>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   2129e:	f44f 729d 	mov.w	r2, #314	; 0x13a
   212a2:	4918      	ldr	r1, [pc, #96]	; (21304 <nrfx_clock_start+0x8c>)
   212a4:	4818      	ldr	r0, [pc, #96]	; (21308 <nrfx_clock_start+0x90>)
   212a6:	f005 fe62 	bl	26f6e <printk>
   212aa:	f44f 719d 	mov.w	r1, #314	; 0x13a
   212ae:	4815      	ldr	r0, [pc, #84]	; (21304 <nrfx_clock_start+0x8c>)
   212b0:	f006 f8d6 	bl	27460 <assert_post_action>
            break;
    }
}
   212b4:	e016      	b.n	212e4 <nrfx_clock_start+0x6c>
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   212b6:	a901      	add	r1, sp, #4
   212b8:	4620      	mov	r0, r4
   212ba:	f7ff ff6f 	bl	2119c <nrf_clock_is_running.constprop.2>
   212be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   212c2:	b188      	cbz	r0, 212e8 <nrfx_clock_start+0x70>
   212c4:	9a01      	ldr	r2, [sp, #4]
   212c6:	2a01      	cmp	r2, #1
   212c8:	d10e      	bne.n	212e8 <nrfx_clock_start+0x70>
    p_reg->LFCLKSRC = (uint32_t)(source);
   212ca:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   212ce:	4b0f      	ldr	r3, [pc, #60]	; (2130c <nrfx_clock_start+0x94>)
   212d0:	2200      	movs	r2, #0
   212d2:	601a      	str	r2, [r3, #0]
   212d4:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   212d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   212da:	2202      	movs	r2, #2
   212dc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   212e0:	2201      	movs	r2, #1
   212e2:	609a      	str	r2, [r3, #8]
}
   212e4:	b002      	add	sp, #8
   212e6:	bd10      	pop	{r4, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
   212e8:	2200      	movs	r2, #0
   212ea:	e7ee      	b.n	212ca <nrfx_clock_start+0x52>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   212ec:	4b08      	ldr	r3, [pc, #32]	; (21310 <nrfx_clock_start+0x98>)
   212ee:	2200      	movs	r2, #0
   212f0:	601a      	str	r2, [r3, #0]
   212f2:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   212f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   212f8:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   212fc:	601c      	str	r4, [r3, #0]
   212fe:	e7f1      	b.n	212e4 <nrfx_clock_start+0x6c>
   21300:	20004558 	.word	0x20004558
   21304:	000359ed 	.word	0x000359ed
   21308:	0002fa94 	.word	0x0002fa94
   2130c:	40000104 	.word	0x40000104
   21310:	40000100 	.word	0x40000100

00021314 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   21314:	b537      	push	{r0, r1, r2, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   21316:	4d2e      	ldr	r5, [pc, #184]	; (213d0 <nrfx_clock_stop+0xbc>)
   21318:	792a      	ldrb	r2, [r5, #4]
{
   2131a:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   2131c:	b952      	cbnz	r2, 21334 <nrfx_clock_stop+0x20>
   2131e:	492d      	ldr	r1, [pc, #180]	; (213d4 <nrfx_clock_stop+0xc0>)
   21320:	482d      	ldr	r0, [pc, #180]	; (213d8 <nrfx_clock_stop+0xc4>)
   21322:	f240 1241 	movw	r2, #321	; 0x141
   21326:	f005 fe22 	bl	26f6e <printk>
   2132a:	f240 1141 	movw	r1, #321	; 0x141
   2132e:	4829      	ldr	r0, [pc, #164]	; (213d4 <nrfx_clock_stop+0xc0>)
   21330:	f006 f896 	bl	27460 <assert_post_action>
    switch (domain)
   21334:	b174      	cbz	r4, 21354 <nrfx_clock_stop+0x40>
   21336:	2c01      	cmp	r4, #1
   21338:	d027      	beq.n	2138a <nrfx_clock_stop+0x76>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   2133a:	4926      	ldr	r1, [pc, #152]	; (213d4 <nrfx_clock_stop+0xc0>)
   2133c:	4826      	ldr	r0, [pc, #152]	; (213d8 <nrfx_clock_stop+0xc4>)
   2133e:	f240 125d 	movw	r2, #349	; 0x15d
   21342:	f005 fe14 	bl	26f6e <printk>
   21346:	f240 115d 	movw	r1, #349	; 0x15d
   2134a:	4822      	ldr	r0, [pc, #136]	; (213d4 <nrfx_clock_stop+0xc0>)
   2134c:	f006 f888 	bl	27460 <assert_post_action>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   21350:	b003      	add	sp, #12
   21352:	bd30      	pop	{r4, r5, pc}
    p_reg->INTENCLR = mask;
   21354:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   21358:	2202      	movs	r2, #2
   2135a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2135e:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
   21362:	f503 7382 	add.w	r3, r3, #260	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21366:	2201      	movs	r2, #1
   21368:	681b      	ldr	r3, [r3, #0]
   2136a:	4b1c      	ldr	r3, [pc, #112]	; (213dc <nrfx_clock_stop+0xc8>)
   2136c:	f242 7410 	movw	r4, #10000	; 0x2710
   21370:	601a      	str	r2, [r3, #0]
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
   21372:	2100      	movs	r1, #0
   21374:	4608      	mov	r0, r1
   21376:	f7ff ff11 	bl	2119c <nrf_clock_is_running.constprop.2>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   2137a:	2800      	cmp	r0, #0
   2137c:	d0e8      	beq.n	21350 <nrfx_clock_stop+0x3c>
   2137e:	2001      	movs	r0, #1
   21380:	f00b fe60 	bl	2d044 <nrfx_busy_wait>
   21384:	3c01      	subs	r4, #1
   21386:	d1f4      	bne.n	21372 <nrfx_clock_stop+0x5e>
   21388:	e7e2      	b.n	21350 <nrfx_clock_stop+0x3c>
    p_reg->INTENCLR = mask;
   2138a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2138e:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
   21390:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21394:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   21398:	f503 7380 	add.w	r3, r3, #256	; 0x100
   2139c:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2139e:	4b10      	ldr	r3, [pc, #64]	; (213e0 <nrfx_clock_stop+0xcc>)
   213a0:	601c      	str	r4, [r3, #0]
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   213a2:	f88d 4007 	strb.w	r4, [sp, #7]
   213a6:	f242 7410 	movw	r4, #10000	; 0x2710
   213aa:	f10d 0107 	add.w	r1, sp, #7
   213ae:	2001      	movs	r0, #1
   213b0:	f7ff fef4 	bl	2119c <nrf_clock_is_running.constprop.2>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   213b4:	b910      	cbnz	r0, 213bc <nrfx_clock_stop+0xa8>
            m_clock_cb.hfclk_started = false;
   213b6:	2300      	movs	r3, #0
   213b8:	716b      	strb	r3, [r5, #5]
   213ba:	e7c9      	b.n	21350 <nrfx_clock_stop+0x3c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   213bc:	f89d 0007 	ldrb.w	r0, [sp, #7]
   213c0:	2801      	cmp	r0, #1
   213c2:	d1f8      	bne.n	213b6 <nrfx_clock_stop+0xa2>
   213c4:	f00b fe3e 	bl	2d044 <nrfx_busy_wait>
   213c8:	3c01      	subs	r4, #1
   213ca:	d1ee      	bne.n	213aa <nrfx_clock_stop+0x96>
   213cc:	e7f3      	b.n	213b6 <nrfx_clock_stop+0xa2>
   213ce:	bf00      	nop
   213d0:	20004558 	.word	0x20004558
   213d4:	000359ed 	.word	0x000359ed
   213d8:	0002fa94 	.word	0x0002fa94
   213dc:	4000000c 	.word	0x4000000c
   213e0:	40000004 	.word	0x40000004

000213e4 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   213e4:	4b16      	ldr	r3, [pc, #88]	; (21440 <nrfx_power_clock_irq_handler+0x5c>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   213e6:	b507      	push	{r0, r1, r2, lr}
   213e8:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   213ea:	b16a      	cbz	r2, 21408 <nrfx_power_clock_irq_handler+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   213ec:	2200      	movs	r2, #0
   213ee:	601a      	str	r2, [r3, #0]
   213f0:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   213f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   213f6:	2201      	movs	r2, #1
   213f8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
   213fc:	4b11      	ldr	r3, [pc, #68]	; (21444 <nrfx_power_clock_irq_handler+0x60>)
   213fe:	7958      	ldrb	r0, [r3, #5]
   21400:	b910      	cbnz	r0, 21408 <nrfx_power_clock_irq_handler+0x24>
        {
            m_clock_cb.hfclk_started = true;
   21402:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   21404:	681b      	ldr	r3, [r3, #0]
   21406:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   21408:	4b0f      	ldr	r3, [pc, #60]	; (21448 <nrfx_power_clock_irq_handler+0x64>)
   2140a:	681a      	ldr	r2, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   2140c:	b16a      	cbz	r2, 2142a <nrfx_power_clock_irq_handler+0x46>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2140e:	2000      	movs	r0, #0
   21410:	6018      	str	r0, [r3, #0]
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
   21412:	a901      	add	r1, sp, #4
   21414:	681b      	ldr	r3, [r3, #0]
   21416:	f7ff fec1 	bl	2119c <nrf_clock_is_running.constprop.2>
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   2141a:	9a01      	ldr	r2, [sp, #4]
   2141c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   21420:	b932      	cbnz	r2, 21430 <nrfx_power_clock_irq_handler+0x4c>
    p_reg->LFCLKSRC = (uint32_t)(source);
   21422:	2201      	movs	r2, #1
   21424:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21428:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   2142a:	b003      	add	sp, #12
   2142c:	f85d fb04 	ldr.w	pc, [sp], #4
    p_reg->INTENCLR = mask;
   21430:	2202      	movs	r2, #2
   21432:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   21436:	4b03      	ldr	r3, [pc, #12]	; (21444 <nrfx_power_clock_irq_handler+0x60>)
   21438:	2001      	movs	r0, #1
   2143a:	681b      	ldr	r3, [r3, #0]
   2143c:	4798      	blx	r3
}
   2143e:	e7f4      	b.n	2142a <nrfx_power_clock_irq_handler+0x46>
   21440:	40000100 	.word	0x40000100
   21444:	20004558 	.word	0x20004558
   21448:	40000104 	.word	0x40000104

0002144c <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   2144c:	2301      	movs	r3, #1
   2144e:	fa03 f000 	lsl.w	r0, r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
   21452:	f010 0fff 	tst.w	r0, #255	; 0xff
   21456:	d012      	beq.n	2147e <nrfx_gpiote_channel_free+0x32>
	__asm__ volatile(
   21458:	f04f 0320 	mov.w	r3, #32
   2145c:	f3ef 8111 	mrs	r1, BASEPRI
   21460:	f383 8811 	msr	BASEPRI, r3
   21464:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
   21468:	4a06      	ldr	r2, [pc, #24]	; (21484 <nrfx_gpiote_channel_free+0x38>)
   2146a:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   2146c:	ea23 0000 	bic.w	r0, r3, r0
   21470:	65d0      	str	r0, [r2, #92]	; 0x5c
	__asm__ volatile(
   21472:	f381 8811 	msr	BASEPRI, r1
   21476:	f3bf 8f6f 	isb	sy
   2147a:	4803      	ldr	r0, [pc, #12]	; (21488 <nrfx_gpiote_channel_free+0x3c>)
   2147c:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
   2147e:	4803      	ldr	r0, [pc, #12]	; (2148c <nrfx_gpiote_channel_free+0x40>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   21480:	4770      	bx	lr
   21482:	bf00      	nop
   21484:	20004560 	.word	0x20004560
   21488:	0bad0000 	.word	0x0bad0000
   2148c:	0bad0004 	.word	0x0bad0004

00021490 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
   21490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21494:	4686      	mov	lr, r0
    return m_cb.allocated_channels_mask & (1UL << index);
   21496:	4e16      	ldr	r6, [pc, #88]	; (214f0 <nrfx_gpiote_channel_alloc+0x60>)
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   21498:	4816      	ldr	r0, [pc, #88]	; (214f4 <nrfx_gpiote_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
   2149a:	4f17      	ldr	r7, [pc, #92]	; (214f8 <nrfx_gpiote_channel_alloc+0x68>)
{
   2149c:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
   2149e:	22ff      	movs	r2, #255	; 0xff
    return m_cb.allocated_channels_mask & (1UL << index);
   214a0:	2501      	movs	r5, #1
   214a2:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
   214a4:	f04f 0120 	mov.w	r1, #32
   214a8:	f3ef 8811 	mrs	r8, BASEPRI
   214ac:	f381 8811 	msr	BASEPRI, r1
   214b0:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   214b4:	fa22 f103 	lsr.w	r1, r2, r3
   214b8:	07c9      	lsls	r1, r1, #31
   214ba:	d50b      	bpl.n	214d4 <nrfx_gpiote_channel_alloc+0x44>
    return m_cb.allocated_channels_mask & (1UL << index);
   214bc:	6df1      	ldr	r1, [r6, #92]	; 0x5c
   214be:	fa05 fc03 	lsl.w	ip, r5, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   214c2:	ea11 0f0c 	tst.w	r1, ip
    m_cb.allocated_channels_mask |= (1UL << index);
   214c6:	bf01      	itttt	eq
   214c8:	ea41 010c 	orreq.w	r1, r1, ip
   214cc:	65f1      	streq	r1, [r6, #92]	; 0x5c
            err_code = NRFX_SUCCESS;
   214ce:	4638      	moveq	r0, r7
            *p_channel = ch_idx;
   214d0:	f88e 3000 	strbeq.w	r3, [lr]
	__asm__ volatile(
   214d4:	f388 8811 	msr	BASEPRI, r8
   214d8:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
   214dc:	42b8      	cmp	r0, r7
   214de:	d005      	beq.n	214ec <nrfx_gpiote_channel_alloc+0x5c>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
   214e0:	fa05 f303 	lsl.w	r3, r5, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   214e4:	439a      	bics	r2, r3
   214e6:	f104 0401 	add.w	r4, r4, #1
   214ea:	d1da      	bne.n	214a2 <nrfx_gpiote_channel_alloc+0x12>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   214ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   214f0:	20004560 	.word	0x20004560
   214f4:	0bad0002 	.word	0x0bad0002
   214f8:	0bad0000 	.word	0x0bad0000

000214fc <nvmc_word_write>:
   214fc:	4a04      	ldr	r2, [pc, #16]	; (21510 <nvmc_word_write+0x14>)
   214fe:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   21502:	07db      	lsls	r3, r3, #31
   21504:	d5fb      	bpl.n	214fe <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   21506:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   21508:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   2150c:	4770      	bx	lr
   2150e:	bf00      	nop
   21510:	4001e000 	.word	0x4001e000

00021514 <nrfx_nvmc_page_erase>:
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
   21514:	b510      	push	{r4, lr}
    NRFX_ASSERT(is_valid_address(addr, false));
   21516:	2100      	movs	r1, #0
{
   21518:	4604      	mov	r4, r0
    NRFX_ASSERT(is_valid_address(addr, false));
   2151a:	f00b fd95 	bl	2d048 <is_valid_address>
   2151e:	b950      	cbnz	r0, 21536 <nrfx_nvmc_page_erase+0x22>
   21520:	4911      	ldr	r1, [pc, #68]	; (21568 <nrfx_nvmc_page_erase+0x54>)
   21522:	4812      	ldr	r0, [pc, #72]	; (2156c <nrfx_nvmc_page_erase+0x58>)
   21524:	f44f 7282 	mov.w	r2, #260	; 0x104
   21528:	f005 fd21 	bl	26f6e <printk>
   2152c:	f44f 7182 	mov.w	r1, #260	; 0x104
   21530:	480d      	ldr	r0, [pc, #52]	; (21568 <nrfx_nvmc_page_erase+0x54>)
   21532:	f005 ff95 	bl	27460 <assert_post_action>
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
   21536:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2153a:	691a      	ldr	r2, [r3, #16]
    return !(addr % flash_page_size_get());
   2153c:	fbb4 f3f2 	udiv	r3, r4, r2
   21540:	fb02 4313 	mls	r3, r2, r3, r4

    if (!is_page_aligned_check(addr))
   21544:	b973      	cbnz	r3, 21564 <nrfx_nvmc_page_erase+0x50>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
   21546:	4b0a      	ldr	r3, [pc, #40]	; (21570 <nrfx_nvmc_page_erase+0x5c>)
   21548:	2202      	movs	r2, #2
   2154a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
   2154e:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   21552:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   21556:	07d2      	lsls	r2, r2, #31
   21558:	d5fb      	bpl.n	21552 <nrfx_nvmc_page_erase+0x3e>
    p_reg->CONFIG = (uint32_t)mode;
   2155a:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   2155c:	4805      	ldr	r0, [pc, #20]	; (21574 <nrfx_nvmc_page_erase+0x60>)
   2155e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   21562:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_ADDR;
   21564:	4804      	ldr	r0, [pc, #16]	; (21578 <nrfx_nvmc_page_erase+0x64>)
   21566:	e7fc      	b.n	21562 <nrfx_nvmc_page_erase+0x4e>
   21568:	00035a2a 	.word	0x00035a2a
   2156c:	0002fa94 	.word	0x0002fa94
   21570:	4001e000 	.word	0x4001e000
   21574:	0bad0000 	.word	0x0bad0000
   21578:	0bad000a 	.word	0x0bad000a

0002157c <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   2157c:	b570      	push	{r4, r5, r6, lr}
   2157e:	460e      	mov	r6, r1
    NRFX_ASSERT(is_valid_address(addr, true));
   21580:	2101      	movs	r1, #1
{
   21582:	4605      	mov	r5, r0
    NRFX_ASSERT(is_valid_address(addr, true));
   21584:	f00b fd60 	bl	2d048 <is_valid_address>
   21588:	b950      	cbnz	r0, 215a0 <nrfx_nvmc_word_write+0x24>
   2158a:	4912      	ldr	r1, [pc, #72]	; (215d4 <nrfx_nvmc_word_write+0x58>)
   2158c:	4812      	ldr	r0, [pc, #72]	; (215d8 <nrfx_nvmc_word_write+0x5c>)
   2158e:	f44f 72c9 	mov.w	r2, #402	; 0x192
   21592:	f005 fcec 	bl	26f6e <printk>
   21596:	f44f 71c9 	mov.w	r1, #402	; 0x192
   2159a:	480e      	ldr	r0, [pc, #56]	; (215d4 <nrfx_nvmc_word_write+0x58>)
   2159c:	f005 ff60 	bl	27460 <assert_post_action>
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
   215a0:	07ab      	lsls	r3, r5, #30
   215a2:	d00a      	beq.n	215ba <nrfx_nvmc_word_write+0x3e>
   215a4:	490b      	ldr	r1, [pc, #44]	; (215d4 <nrfx_nvmc_word_write+0x58>)
   215a6:	480c      	ldr	r0, [pc, #48]	; (215d8 <nrfx_nvmc_word_write+0x5c>)
   215a8:	f240 1293 	movw	r2, #403	; 0x193
   215ac:	f005 fcdf 	bl	26f6e <printk>
   215b0:	f240 1193 	movw	r1, #403	; 0x193
   215b4:	4807      	ldr	r0, [pc, #28]	; (215d4 <nrfx_nvmc_word_write+0x58>)
   215b6:	f005 ff53 	bl	27460 <assert_post_action>
   215ba:	4c08      	ldr	r4, [pc, #32]	; (215dc <nrfx_nvmc_word_write+0x60>)
   215bc:	2301      	movs	r3, #1
   215be:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   215c2:	4631      	mov	r1, r6
   215c4:	4628      	mov	r0, r5
   215c6:	f7ff ff99 	bl	214fc <nvmc_word_write>
   215ca:	2300      	movs	r3, #0
   215cc:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504

    nvmc_readonly_mode_set();
}
   215d0:	bd70      	pop	{r4, r5, r6, pc}
   215d2:	bf00      	nop
   215d4:	00035a2a 	.word	0x00035a2a
   215d8:	0002fa94 	.word	0x0002fa94
   215dc:	4001e000 	.word	0x4001e000

000215e0 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   215e0:	6802      	ldr	r2, [r0, #0]
    switch (port)
   215e2:	0953      	lsrs	r3, r2, #5
{
   215e4:	b510      	push	{r4, lr}
   215e6:	4604      	mov	r4, r0
    switch (port)
   215e8:	d02a      	beq.n	21640 <nrf_gpio_pin_port_decode+0x60>
   215ea:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
   215ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
   215f0:	bf18      	it	ne
   215f2:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   215f4:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
   215f8:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   215fa:	07db      	lsls	r3, r3, #31
   215fc:	d40a      	bmi.n	21614 <nrf_gpio_pin_port_decode+0x34>
   215fe:	4913      	ldr	r1, [pc, #76]	; (2164c <nrf_gpio_pin_port_decode+0x6c>)
   21600:	4813      	ldr	r0, [pc, #76]	; (21650 <nrf_gpio_pin_port_decode+0x70>)
   21602:	f240 221a 	movw	r2, #538	; 0x21a
   21606:	f005 fcb2 	bl	26f6e <printk>
   2160a:	f240 211a 	movw	r1, #538	; 0x21a
   2160e:	480f      	ldr	r0, [pc, #60]	; (2164c <nrf_gpio_pin_port_decode+0x6c>)
   21610:	f005 ff26 	bl	27460 <assert_post_action>
    uint32_t pin_number = *p_pin;
   21614:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   21616:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2161a:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   2161c:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2161e:	d00c      	beq.n	2163a <nrf_gpio_pin_port_decode+0x5a>
   21620:	2b01      	cmp	r3, #1
   21622:	d010      	beq.n	21646 <nrf_gpio_pin_port_decode+0x66>
            NRFX_ASSERT(0);
   21624:	4909      	ldr	r1, [pc, #36]	; (2164c <nrf_gpio_pin_port_decode+0x6c>)
   21626:	480a      	ldr	r0, [pc, #40]	; (21650 <nrf_gpio_pin_port_decode+0x70>)
   21628:	f240 221f 	movw	r2, #543	; 0x21f
   2162c:	f005 fc9f 	bl	26f6e <printk>
   21630:	f240 211f 	movw	r1, #543	; 0x21f
   21634:	4805      	ldr	r0, [pc, #20]	; (2164c <nrf_gpio_pin_port_decode+0x6c>)
   21636:	f005 ff13 	bl	27460 <assert_post_action>
        case 0: return NRF_P0;
   2163a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
   2163e:	bd10      	pop	{r4, pc}
            mask = P0_FEATURE_PINS_PRESENT;
   21640:	f04f 33ff 	mov.w	r3, #4294967295
   21644:	e7d6      	b.n	215f4 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
   21646:	4803      	ldr	r0, [pc, #12]	; (21654 <nrf_gpio_pin_port_decode+0x74>)
   21648:	e7f9      	b.n	2163e <nrf_gpio_pin_port_decode+0x5e>
   2164a:	bf00      	nop
   2164c:	00035460 	.word	0x00035460
   21650:	0002fa94 	.word	0x0002fa94
   21654:	50000300 	.word	0x50000300

00021658 <twi_rx_start_transfer>:
    return ret_code;
}

static nrfx_err_t twi_rx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
   21658:	b537      	push	{r0, r1, r2, r4, r5, lr}
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
   2165a:	4b34      	ldr	r3, [pc, #208]	; (2172c <twi_rx_start_transfer+0xd4>)
   2165c:	9301      	str	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2165e:	2300      	movs	r3, #0
   21660:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   21664:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
   21668:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
   2166c:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
   21670:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
   21674:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
   21678:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   2167c:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);

    p_cb->bytes_transferred = 0;
   21680:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
   21682:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f

    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   21686:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   21688:	2b01      	cmp	r3, #1
{
   2168a:	4604      	mov	r4, r0
   2168c:	460d      	mov	r5, r1
    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   2168e:	d118      	bne.n	216c2 <twi_rx_start_transfer+0x6a>
   21690:	6a0b      	ldr	r3, [r1, #32]
   21692:	065b      	lsls	r3, r3, #25
   21694:	d415      	bmi.n	216c2 <twi_rx_start_transfer+0x6a>
}

NRF_STATIC_INLINE void nrf_twi_shorts_set(NRF_TWI_Type * p_reg,
                                          uint32_t       mask)
{
    p_reg->SHORTS = mask;
   21696:	2302      	movs	r3, #2
        nrf_twi_shorts_set(p_twi, NRF_TWI_SHORT_BB_SUSPEND_MASK);
    }
    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_RX)
   21698:	f895 202d 	ldrb.w	r2, [r5, #45]	; 0x2d
   2169c:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
   216a0:	2a02      	cmp	r2, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   216a2:	f04f 0301 	mov.w	r3, #1
   216a6:	6223      	str	r3, [r4, #32]
   216a8:	bf18      	it	ne
   216aa:	6023      	strne	r3, [r4, #0]
    {
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTRX);
    }

    if (p_cb->handler)
   216ac:	682b      	ldr	r3, [r5, #0]
   216ae:	b193      	cbz	r3, 216d6 <twi_rx_start_transfer+0x7e>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
   216b0:	f240 2386 	movw	r3, #646	; 0x286
   216b4:	60ab      	str	r3, [r5, #8]
                        NRF_TWI_INT_ERROR_MASK     |
                        NRF_TWI_INT_TXDSENT_MASK   |
                        NRF_TWI_INT_RXDREADY_MASK;
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
   216b6:	68ab      	ldr	r3, [r5, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
   216b8:	481d      	ldr	r0, [pc, #116]	; (21730 <twi_rx_start_transfer+0xd8>)
    p_reg->INTENSET = mask;
   216ba:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
            nrf_twi_enable(p_twi);
            ret_code = NRFX_ERROR_INTERNAL;
        }
    }
    return ret_code;
}
   216be:	b003      	add	sp, #12
   216c0:	bd30      	pop	{r4, r5, pc}
    p_reg->SHORTS = mask;
   216c2:	2301      	movs	r3, #1
   216c4:	e7e8      	b.n	21698 <twi_rx_start_transfer+0x40>
               twi_transfer(p_twi, p_cb))
   216c6:	4629      	mov	r1, r5
   216c8:	4620      	mov	r0, r4
   216ca:	f00b fcfc 	bl	2d0c6 <twi_transfer>
        while ((hw_timeout > 0) &&
   216ce:	b128      	cbz	r0, 216dc <twi_rx_start_transfer+0x84>
               hw_timeout--;
   216d0:	9b01      	ldr	r3, [sp, #4]
   216d2:	3b01      	subs	r3, #1
   216d4:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
   216d6:	9b01      	ldr	r3, [sp, #4]
   216d8:	2b00      	cmp	r3, #0
   216da:	dcf4      	bgt.n	216c6 <twi_rx_start_transfer+0x6e>
        if (p_cb->error)
   216dc:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   216e0:	b95b      	cbnz	r3, 216fa <twi_rx_start_transfer+0xa2>
    nrfx_err_t ret_code = NRFX_SUCCESS;
   216e2:	4813      	ldr	r0, [pc, #76]	; (21730 <twi_rx_start_transfer+0xd8>)
        if (hw_timeout <= 0)
   216e4:	9b01      	ldr	r3, [sp, #4]
   216e6:	2b00      	cmp	r3, #0
   216e8:	dce9      	bgt.n	216be <twi_rx_start_transfer+0x66>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   216ea:	2300      	movs	r3, #0
   216ec:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   216f0:	2305      	movs	r3, #5
   216f2:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
            ret_code = NRFX_ERROR_INTERNAL;
   216f6:	480f      	ldr	r0, [pc, #60]	; (21734 <twi_rx_start_transfer+0xdc>)
    return ret_code;
   216f8:	e7e1      	b.n	216be <twi_rx_start_transfer+0x66>
    uint32_t error_source = p_reg->ERRORSRC;
   216fa:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   216fe:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
   21702:	b18b      	cbz	r3, 21728 <twi_rx_start_transfer+0xd0>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   21704:	4a0c      	ldr	r2, [pc, #48]	; (21738 <twi_rx_start_transfer+0xe0>)
   21706:	480b      	ldr	r0, [pc, #44]	; (21734 <twi_rx_start_transfer+0xdc>)
   21708:	f013 0f01 	tst.w	r3, #1
   2170c:	bf18      	it	ne
   2170e:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   21710:	f013 0f02 	tst.w	r3, #2
   21714:	f102 0201 	add.w	r2, r2, #1
   21718:	bf18      	it	ne
   2171a:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   2171c:	f013 0f04 	tst.w	r3, #4
   21720:	4b06      	ldr	r3, [pc, #24]	; (2173c <twi_rx_start_transfer+0xe4>)
   21722:	bf18      	it	ne
   21724:	4618      	movne	r0, r3
   21726:	e7dd      	b.n	216e4 <twi_rx_start_transfer+0x8c>
                ret_code = NRFX_ERROR_INTERNAL;
   21728:	4802      	ldr	r0, [pc, #8]	; (21734 <twi_rx_start_transfer+0xdc>)
   2172a:	e7db      	b.n	216e4 <twi_rx_start_transfer+0x8c>
   2172c:	000186a0 	.word	0x000186a0
   21730:	0bad0000 	.word	0x0bad0000
   21734:	0bad0001 	.word	0x0bad0001
   21738:	0bae0000 	.word	0x0bae0000
   2173c:	0bae0002 	.word	0x0bae0002

00021740 <twi_tx_start_transfer>:
{
   21740:	b537      	push	{r0, r1, r2, r4, r5, lr}
    hw_timeout = HW_TIMEOUT;
   21742:	4b30      	ldr	r3, [pc, #192]	; (21804 <twi_tx_start_transfer+0xc4>)
   21744:	9301      	str	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21746:	2300      	movs	r3, #0
   21748:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   2174c:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
   21750:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
   21754:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
   21758:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
   2175c:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
   21760:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   21764:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
   21768:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
    p_reg->SHORTS = mask;
   2176c:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    p_cb->bytes_transferred = 0;
   21770:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
   21772:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21776:	2301      	movs	r3, #1
    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
   21778:	429a      	cmp	r2, r3
{
   2177a:	460d      	mov	r5, r1
   2177c:	6203      	str	r3, [r0, #32]
   2177e:	bf18      	it	ne
   21780:	6083      	strne	r3, [r0, #8]
   21782:	4604      	mov	r4, r0
    (void)twi_send_byte(p_twi, p_cb);
   21784:	f00b fc82 	bl	2d08c <twi_send_byte>
    if (p_cb->handler)
   21788:	682b      	ldr	r3, [r5, #0]
   2178a:	b183      	cbz	r3, 217ae <twi_tx_start_transfer+0x6e>
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
   2178c:	f240 2386 	movw	r3, #646	; 0x286
   21790:	60ab      	str	r3, [r5, #8]
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
   21792:	68ab      	ldr	r3, [r5, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
   21794:	481c      	ldr	r0, [pc, #112]	; (21808 <twi_tx_start_transfer+0xc8>)
    p_reg->INTENSET = mask;
   21796:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   2179a:	b003      	add	sp, #12
   2179c:	bd30      	pop	{r4, r5, pc}
               twi_transfer(p_twi, p_cb))
   2179e:	4629      	mov	r1, r5
   217a0:	4620      	mov	r0, r4
   217a2:	f00b fc90 	bl	2d0c6 <twi_transfer>
        while ((hw_timeout > 0) &&
   217a6:	b128      	cbz	r0, 217b4 <twi_tx_start_transfer+0x74>
            hw_timeout--;
   217a8:	9b01      	ldr	r3, [sp, #4]
   217aa:	3b01      	subs	r3, #1
   217ac:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
   217ae:	9b01      	ldr	r3, [sp, #4]
   217b0:	2b00      	cmp	r3, #0
   217b2:	dcf4      	bgt.n	2179e <twi_tx_start_transfer+0x5e>
        if (p_cb->error)
   217b4:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   217b8:	b95b      	cbnz	r3, 217d2 <twi_tx_start_transfer+0x92>
    nrfx_err_t ret_code = NRFX_SUCCESS;
   217ba:	4813      	ldr	r0, [pc, #76]	; (21808 <twi_tx_start_transfer+0xc8>)
        if (hw_timeout <= 0)
   217bc:	9b01      	ldr	r3, [sp, #4]
   217be:	2b00      	cmp	r3, #0
   217c0:	dceb      	bgt.n	2179a <twi_tx_start_transfer+0x5a>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   217c2:	2300      	movs	r3, #0
   217c4:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   217c8:	2305      	movs	r3, #5
   217ca:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
            ret_code = NRFX_ERROR_INTERNAL;
   217ce:	480f      	ldr	r0, [pc, #60]	; (2180c <twi_tx_start_transfer+0xcc>)
    return ret_code;
   217d0:	e7e3      	b.n	2179a <twi_tx_start_transfer+0x5a>
    uint32_t error_source = p_reg->ERRORSRC;
   217d2:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   217d6:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
   217da:	b18b      	cbz	r3, 21800 <twi_tx_start_transfer+0xc0>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   217dc:	4a0c      	ldr	r2, [pc, #48]	; (21810 <twi_tx_start_transfer+0xd0>)
   217de:	480b      	ldr	r0, [pc, #44]	; (2180c <twi_tx_start_transfer+0xcc>)
   217e0:	f013 0f01 	tst.w	r3, #1
   217e4:	bf18      	it	ne
   217e6:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   217e8:	f013 0f02 	tst.w	r3, #2
   217ec:	f102 0201 	add.w	r2, r2, #1
   217f0:	bf18      	it	ne
   217f2:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   217f4:	f013 0f04 	tst.w	r3, #4
   217f8:	4b06      	ldr	r3, [pc, #24]	; (21814 <twi_tx_start_transfer+0xd4>)
   217fa:	bf18      	it	ne
   217fc:	4618      	movne	r0, r3
   217fe:	e7dd      	b.n	217bc <twi_tx_start_transfer+0x7c>
                ret_code = NRFX_ERROR_INTERNAL;
   21800:	4802      	ldr	r0, [pc, #8]	; (2180c <twi_tx_start_transfer+0xcc>)
   21802:	e7db      	b.n	217bc <twi_tx_start_transfer+0x7c>
   21804:	000186a0 	.word	0x000186a0
   21808:	0bad0000 	.word	0x0bad0000
   2180c:	0bad0001 	.word	0x0bad0001
   21810:	0bae0000 	.word	0x0bae0000
   21814:	0bae0002 	.word	0x0bae0002

00021818 <nrfx_twi_init>:
{
   21818:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   2181c:	4680      	mov	r8, r0
   2181e:	4692      	mov	sl, r2
   21820:	4699      	mov	r9, r3
    NRFX_ASSERT(p_config);
   21822:	460c      	mov	r4, r1
   21824:	b941      	cbnz	r1, 21838 <nrfx_twi_init+0x20>
   21826:	4930      	ldr	r1, [pc, #192]	; (218e8 <nrfx_twi_init+0xd0>)
   21828:	4830      	ldr	r0, [pc, #192]	; (218ec <nrfx_twi_init+0xd4>)
   2182a:	22a1      	movs	r2, #161	; 0xa1
   2182c:	f005 fb9f 	bl	26f6e <printk>
   21830:	21a1      	movs	r1, #161	; 0xa1
   21832:	482d      	ldr	r0, [pc, #180]	; (218e8 <nrfx_twi_init+0xd0>)
   21834:	f005 fe14 	bl	27460 <assert_post_action>
    NRFX_ASSERT(p_config->scl != p_config->sda);
   21838:	e9d4 2300 	ldrd	r2, r3, [r4]
   2183c:	429a      	cmp	r2, r3
   2183e:	d108      	bne.n	21852 <nrfx_twi_init+0x3a>
   21840:	4929      	ldr	r1, [pc, #164]	; (218e8 <nrfx_twi_init+0xd0>)
   21842:	482a      	ldr	r0, [pc, #168]	; (218ec <nrfx_twi_init+0xd4>)
   21844:	22a2      	movs	r2, #162	; 0xa2
   21846:	f005 fb92 	bl	26f6e <printk>
   2184a:	21a2      	movs	r1, #162	; 0xa2
   2184c:	4826      	ldr	r0, [pc, #152]	; (218e8 <nrfx_twi_init+0xd0>)
   2184e:	f005 fe07 	bl	27460 <assert_post_action>
    twi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   21852:	f898 7004 	ldrb.w	r7, [r8, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   21856:	4d26      	ldr	r5, [pc, #152]	; (218f0 <nrfx_twi_init+0xd8>)
   21858:	263c      	movs	r6, #60	; 0x3c
   2185a:	437e      	muls	r6, r7
   2185c:	19ab      	adds	r3, r5, r6
   2185e:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
   21862:	2a00      	cmp	r2, #0
   21864:	d13e      	bne.n	218e4 <nrfx_twi_init+0xcc>
    p_cb->int_mask        = 0;
   21866:	609a      	str	r2, [r3, #8]
    p_cb->prev_suspend    = TWI_NO_SUSPEND;
   21868:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    p_cb->repeated        = false;
   2186c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    p_cb->busy            = false;
   21870:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   21874:	7b62      	ldrb	r2, [r4, #13]
   21876:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    p_cb->p_context       = p_context;
   2187a:	f8c3 9004 	str.w	r9, [r3, #4]
    p_cb->handler         = event_handler;
   2187e:	f845 a006 	str.w	sl, [r5, r6]
    TWI_PIN_INIT(p_config->scl);
   21882:	6823      	ldr	r3, [r4, #0]
   21884:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   21886:	a801      	add	r0, sp, #4
   21888:	f7ff feaa 	bl	215e0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   2188c:	9b01      	ldr	r3, [sp, #4]
   2188e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   21892:	f240 690c 	movw	r9, #1548	; 0x60c
   21896:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
    TWI_PIN_INIT(p_config->sda);
   2189a:	6863      	ldr	r3, [r4, #4]
   2189c:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2189e:	a801      	add	r0, sp, #4
   218a0:	f7ff fe9e 	bl	215e0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   218a4:	9b01      	ldr	r3, [sp, #4]
   218a6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   218aa:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
    nrf_twi_pins_set(p_twi, p_config->scl, p_config->sda);
   218ae:	e9d4 2300 	ldrd	r2, r3, [r4]
    NRF_TWI_Type * p_twi = p_instance->p_twi;
   218b2:	f8d8 0000 	ldr.w	r0, [r8]
    p_reg->PSEL.SCL = scl_pin;
   218b6:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
   218ba:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        (nrf_twi_frequency_t)p_config->frequency);
   218be:	68a3      	ldr	r3, [r4, #8]
    p_reg->FREQUENCY = frequency;
   218c0:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
    if (p_cb->handler)
   218c4:	59ab      	ldr	r3, [r5, r6]
   218c6:	b11b      	cbz	r3, 218d0 <nrfx_twi_init+0xb8>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twi));
   218c8:	f340 3007 	sbfx	r0, r0, #12, #8
   218cc:	f7e5 fa0e 	bl	6cec <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   218d0:	233c      	movs	r3, #60	; 0x3c
   218d2:	fb03 5507 	mla	r5, r3, r7, r5
    return err_code;
   218d6:	4807      	ldr	r0, [pc, #28]	; (218f4 <nrfx_twi_init+0xdc>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   218d8:	2301      	movs	r3, #1
   218da:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
}
   218de:	b002      	add	sp, #8
   218e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return err_code;
   218e4:	4804      	ldr	r0, [pc, #16]	; (218f8 <nrfx_twi_init+0xe0>)
   218e6:	e7fa      	b.n	218de <nrfx_twi_init+0xc6>
   218e8:	00035a66 	.word	0x00035a66
   218ec:	0002fa94 	.word	0x0002fa94
   218f0:	200045c0 	.word	0x200045c0
   218f4:	0bad0000 	.word	0x0bad0000
   218f8:	0bad0005 	.word	0x0bad0005

000218fc <nrfx_twi_enable>:
{
   218fc:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   218fe:	4d10      	ldr	r5, [pc, #64]	; (21940 <nrfx_twi_enable+0x44>)
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   21900:	7904      	ldrb	r4, [r0, #4]
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   21902:	223c      	movs	r2, #60	; 0x3c
   21904:	fb02 5204 	mla	r2, r2, r4, r5
{
   21908:	4606      	mov	r6, r0
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   2190a:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
   2190e:	2a01      	cmp	r2, #1
   21910:	d00a      	beq.n	21928 <nrfx_twi_enable+0x2c>
   21912:	490c      	ldr	r1, [pc, #48]	; (21944 <nrfx_twi_enable+0x48>)
   21914:	480c      	ldr	r0, [pc, #48]	; (21948 <nrfx_twi_enable+0x4c>)
   21916:	f240 1201 	movw	r2, #257	; 0x101
   2191a:	f005 fb28 	bl	26f6e <printk>
   2191e:	f240 1101 	movw	r1, #257	; 0x101
   21922:	4808      	ldr	r0, [pc, #32]	; (21944 <nrfx_twi_enable+0x48>)
   21924:	f005 fd9c 	bl	27460 <assert_post_action>
    NRF_TWI_Type * p_twi = p_instance->p_twi;
   21928:	6833      	ldr	r3, [r6, #0]
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   2192a:	2205      	movs	r2, #5
   2192c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   21930:	233c      	movs	r3, #60	; 0x3c
   21932:	fb03 5404 	mla	r4, r3, r4, r5
   21936:	2302      	movs	r3, #2
   21938:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
}
   2193c:	bd70      	pop	{r4, r5, r6, pc}
   2193e:	bf00      	nop
   21940:	200045c0 	.word	0x200045c0
   21944:	00035a66 	.word	0x00035a66
   21948:	0002fa94 	.word	0x0002fa94

0002194c <nrfx_twi_disable>:
{
   2194c:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   2194e:	4e14      	ldr	r6, [pc, #80]	; (219a0 <nrfx_twi_disable+0x54>)
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   21950:	7904      	ldrb	r4, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   21952:	233c      	movs	r3, #60	; 0x3c
   21954:	fb03 6304 	mla	r3, r3, r4, r6
{
   21958:	4605      	mov	r5, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   2195a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
   2195e:	b953      	cbnz	r3, 21976 <nrfx_twi_disable+0x2a>
   21960:	4910      	ldr	r1, [pc, #64]	; (219a4 <nrfx_twi_disable+0x58>)
   21962:	4811      	ldr	r0, [pc, #68]	; (219a8 <nrfx_twi_disable+0x5c>)
   21964:	f240 120d 	movw	r2, #269	; 0x10d
   21968:	f005 fb01 	bl	26f6e <printk>
   2196c:	f240 110d 	movw	r1, #269	; 0x10d
   21970:	480c      	ldr	r0, [pc, #48]	; (219a4 <nrfx_twi_disable+0x58>)
   21972:	f005 fd75 	bl	27460 <assert_post_action>
    NRF_TWI_Type * p_twi = p_instance->p_twi;
   21976:	682b      	ldr	r3, [r5, #0]
    p_reg->INTENCLR = mask;
   21978:	4a0c      	ldr	r2, [pc, #48]	; (219ac <nrfx_twi_disable+0x60>)
   2197a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
   2197e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   21982:	f022 0203 	bic.w	r2, r2, #3
   21986:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   2198a:	2200      	movs	r2, #0
   2198c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   21990:	233c      	movs	r3, #60	; 0x3c
   21992:	fb03 6404 	mla	r4, r3, r4, r6
   21996:	2301      	movs	r3, #1
   21998:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
}
   2199c:	bd70      	pop	{r4, r5, r6, pc}
   2199e:	bf00      	nop
   219a0:	200045c0 	.word	0x200045c0
   219a4:	00035a66 	.word	0x00035a66
   219a8:	0002fa94 	.word	0x0002fa94
   219ac:	00044286 	.word	0x00044286

000219b0 <nrfx_twi_xfer>:
}

nrfx_err_t nrfx_twi_xfer(nrfx_twi_t const *           p_instance,
                         nrfx_twi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
   219b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    nrfx_err_t err_code = NRFX_SUCCESS;
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   219b4:	7907      	ldrb	r7, [r0, #4]

    // TXRX and TXTX transfers are supported only in non-blocking mode.
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWI_XFER_TXRX)));
   219b6:	4c44      	ldr	r4, [pc, #272]	; (21ac8 <nrfx_twi_xfer+0x118>)
   219b8:	263c      	movs	r6, #60	; 0x3c
   219ba:	437e      	muls	r6, r7
{
   219bc:	4681      	mov	r9, r0
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWI_XFER_TXRX)));
   219be:	59a3      	ldr	r3, [r4, r6]
{
   219c0:	460d      	mov	r5, r1
   219c2:	4690      	mov	r8, r2
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWI_XFER_TXRX)));
   219c4:	b9fb      	cbnz	r3, 21a06 <nrfx_twi_xfer+0x56>
   219c6:	780b      	ldrb	r3, [r1, #0]
   219c8:	2b02      	cmp	r3, #2
   219ca:	d00e      	beq.n	219ea <nrfx_twi_xfer+0x3a>
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWI_XFER_TXTX)));
   219cc:	782b      	ldrb	r3, [r5, #0]
   219ce:	2b03      	cmp	r3, #3
   219d0:	d119      	bne.n	21a06 <nrfx_twi_xfer+0x56>
   219d2:	f240 227e 	movw	r2, #638	; 0x27e
   219d6:	493d      	ldr	r1, [pc, #244]	; (21acc <nrfx_twi_xfer+0x11c>)
   219d8:	483d      	ldr	r0, [pc, #244]	; (21ad0 <nrfx_twi_xfer+0x120>)
   219da:	f005 fac8 	bl	26f6e <printk>
   219de:	f240 217e 	movw	r1, #638	; 0x27e
   219e2:	483a      	ldr	r0, [pc, #232]	; (21acc <nrfx_twi_xfer+0x11c>)
   219e4:	f005 fd3c 	bl	27460 <assert_post_action>
   219e8:	e00d      	b.n	21a06 <nrfx_twi_xfer+0x56>
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWI_XFER_TXRX)));
   219ea:	f240 227d 	movw	r2, #637	; 0x27d
   219ee:	4937      	ldr	r1, [pc, #220]	; (21acc <nrfx_twi_xfer+0x11c>)
   219f0:	4837      	ldr	r0, [pc, #220]	; (21ad0 <nrfx_twi_xfer+0x120>)
   219f2:	f005 fabc 	bl	26f6e <printk>
   219f6:	f240 217d 	movw	r1, #637	; 0x27d
   219fa:	4834      	ldr	r0, [pc, #208]	; (21acc <nrfx_twi_xfer+0x11c>)
   219fc:	f005 fd30 	bl	27460 <assert_post_action>
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWI_XFER_TXTX)));
   21a00:	59a3      	ldr	r3, [r4, r6]
   21a02:	2b00      	cmp	r3, #0
   21a04:	d0e2      	beq.n	219cc <nrfx_twi_xfer+0x1c>
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   21a06:	233c      	movs	r3, #60	; 0x3c
   21a08:	fb03 4307 	mla	r3, r3, r7, r4
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twi_xfer((NRF_TWI_Type  *)p_instance->p_twi, p_cb, p_xfer_desc, flags);
   21a0c:	f8d9 9000 	ldr.w	r9, [r9]
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   21a10:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
   21a14:	2b01      	cmp	r3, #1
   21a16:	d104      	bne.n	21a22 <nrfx_twi_xfer+0x72>
   21a18:	782b      	ldrb	r3, [r5, #0]
   21a1a:	2b01      	cmp	r3, #1
   21a1c:	d106      	bne.n	21a2c <nrfx_twi_xfer+0x7c>
        return NRFX_ERROR_INVALID_STATE;
   21a1e:	482d      	ldr	r0, [pc, #180]	; (21ad4 <nrfx_twi_xfer+0x124>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   21a20:	e011      	b.n	21a46 <nrfx_twi_xfer+0x96>
    else if ((p_cb->prev_suspend == TWI_SUSPEND_RX) && (p_xfer_desc->type != NRFX_TWI_XFER_RX))
   21a22:	2b02      	cmp	r3, #2
   21a24:	d102      	bne.n	21a2c <nrfx_twi_xfer+0x7c>
   21a26:	782b      	ldrb	r3, [r5, #0]
   21a28:	2b01      	cmp	r3, #1
   21a2a:	d1f8      	bne.n	21a1e <nrfx_twi_xfer+0x6e>
    if (p_cb->busy)
   21a2c:	263c      	movs	r6, #60	; 0x3c
    p_reg->INTENCLR = mask;
   21a2e:	4b2a      	ldr	r3, [pc, #168]	; (21ad8 <nrfx_twi_xfer+0x128>)
   21a30:	f8c9 3308 	str.w	r3, [r9, #776]	; 0x308
   21a34:	fb06 4607 	mla	r6, r6, r7, r4
   21a38:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
   21a3c:	b12b      	cbz	r3, 21a4a <nrfx_twi_xfer+0x9a>
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
   21a3e:	68b3      	ldr	r3, [r6, #8]
        return err_code;
   21a40:	4826      	ldr	r0, [pc, #152]	; (21adc <nrfx_twi_xfer+0x12c>)
    p_reg->INTENSET = mask;
   21a42:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
}
   21a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        p_cb->busy = (TWI_FLAG_NO_HANDLER_IN_USE(flags)) ? false : true;
   21a4a:	f088 0304 	eor.w	r3, r8, #4
   21a4e:	f3c3 0380 	ubfx	r3, r3, #2, #1
   21a52:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
    p_cb->flags       = flags;
   21a56:	f8c6 8020 	str.w	r8, [r6, #32]
    p_cb->xfer_desc   = *p_xfer_desc;
   21a5a:	46ae      	mov	lr, r5
   21a5c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   21a60:	f106 0c0c 	add.w	ip, r6, #12
   21a64:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   21a68:	f8de 3000 	ldr.w	r3, [lr]
   21a6c:	f8cc 3000 	str.w	r3, [ip]
    p_cb->curr_length = p_xfer_desc->primary_length;
   21a70:	686b      	ldr	r3, [r5, #4]
   21a72:	62b3      	str	r3, [r6, #40]	; 0x28
    p_cb->p_curr_buf  = p_xfer_desc->p_primary_buf;
   21a74:	68eb      	ldr	r3, [r5, #12]
   21a76:	6273      	str	r3, [r6, #36]	; 0x24
    p_reg->ADDRESS = address;
   21a78:	786b      	ldrb	r3, [r5, #1]
   21a7a:	f8c9 3588 	str.w	r3, [r9, #1416]	; 0x588
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
   21a7e:	782b      	ldrb	r3, [r5, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   21a80:	ebc7 1a07 	rsb	sl, r7, r7, lsl #4
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
   21a84:	2b01      	cmp	r3, #1
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   21a86:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
   21a8a:	d017      	beq.n	21abc <nrfx_twi_xfer+0x10c>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
   21a8c:	b99b      	cbnz	r3, 21ab6 <nrfx_twi_xfer+0x106>
   21a8e:	f3c8 1840 	ubfx	r8, r8, #5, #1
        p_cb->curr_tx_no_stop = ((p_xfer_desc->type == NRFX_TWI_XFER_TX) &&
   21a92:	233c      	movs	r3, #60	; 0x3c
   21a94:	fb03 4307 	mla	r3, r3, r7, r4
        err_code = twi_tx_start_transfer(p_twi, p_cb);
   21a98:	4651      	mov	r1, sl
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
   21a9a:	f883 802c 	strb.w	r8, [r3, #44]	; 0x2c
        err_code = twi_tx_start_transfer(p_twi, p_cb);
   21a9e:	4648      	mov	r0, r9
   21aa0:	f7ff fe4e 	bl	21740 <twi_tx_start_transfer>
    if (p_cb->handler == NULL)
   21aa4:	233c      	movs	r3, #60	; 0x3c
   21aa6:	435f      	muls	r7, r3
   21aa8:	19e2      	adds	r2, r4, r7
   21aaa:	59e3      	ldr	r3, [r4, r7]
   21aac:	2b00      	cmp	r3, #0
   21aae:	d1ca      	bne.n	21a46 <nrfx_twi_xfer+0x96>
        p_cb->busy = false;
   21ab0:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
   21ab4:	e7c7      	b.n	21a46 <nrfx_twi_xfer+0x96>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
   21ab6:	f04f 0801 	mov.w	r8, #1
   21aba:	e7ea      	b.n	21a92 <nrfx_twi_xfer+0xe2>
        err_code = twi_rx_start_transfer(p_twi, p_cb);
   21abc:	4651      	mov	r1, sl
   21abe:	4648      	mov	r0, r9
   21ac0:	f7ff fdca 	bl	21658 <twi_rx_start_transfer>
   21ac4:	e7ee      	b.n	21aa4 <nrfx_twi_xfer+0xf4>
   21ac6:	bf00      	nop
   21ac8:	200045c0 	.word	0x200045c0
   21acc:	00035a66 	.word	0x00035a66
   21ad0:	0002fa94 	.word	0x0002fa94
   21ad4:	0bad0005 	.word	0x0bad0005
   21ad8:	00044286 	.word	0x00044286
   21adc:	0bad000b 	.word	0x0bad000b

00021ae0 <nrfx_twi_0_irq_handler>:

}

#if NRFX_CHECK(NRFX_TWI0_ENABLED)
void nrfx_twi_0_irq_handler(void)
{
   21ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
    NRFX_ASSERT(p_cb->handler);
   21ae2:	4c30      	ldr	r4, [pc, #192]	; (21ba4 <nrfx_twi_0_irq_handler+0xc4>)
   21ae4:	6823      	ldr	r3, [r4, #0]
{
   21ae6:	b087      	sub	sp, #28
    NRFX_ASSERT(p_cb->handler);
   21ae8:	b953      	cbnz	r3, 21b00 <nrfx_twi_0_irq_handler+0x20>
   21aea:	492f      	ldr	r1, [pc, #188]	; (21ba8 <nrfx_twi_0_irq_handler+0xc8>)
   21aec:	482f      	ldr	r0, [pc, #188]	; (21bac <nrfx_twi_0_irq_handler+0xcc>)
   21aee:	f240 229e 	movw	r2, #670	; 0x29e
   21af2:	f005 fa3c 	bl	26f6e <printk>
   21af6:	f240 219e 	movw	r1, #670	; 0x29e
   21afa:	482b      	ldr	r0, [pc, #172]	; (21ba8 <nrfx_twi_0_irq_handler+0xc8>)
   21afc:	f005 fcb0 	bl	27460 <assert_post_action>
    if (twi_transfer(p_twi, p_cb))
   21b00:	4928      	ldr	r1, [pc, #160]	; (21ba4 <nrfx_twi_0_irq_handler+0xc4>)
   21b02:	482b      	ldr	r0, [pc, #172]	; (21bb0 <nrfx_twi_0_irq_handler+0xd0>)
   21b04:	f00b fadf 	bl	2d0c6 <twi_transfer>
   21b08:	b9e0      	cbnz	r0, 21b44 <nrfx_twi_0_irq_handler+0x64>
    if (!p_cb->error &&
   21b0a:	f894 702f 	ldrb.w	r7, [r4, #47]	; 0x2f
   21b0e:	f8d4 c020 	ldr.w	ip, [r4, #32]
   21b12:	b9e7      	cbnz	r7, 21b4e <nrfx_twi_0_irq_handler+0x6e>
        ((p_cb->xfer_desc.type == NRFX_TWI_XFER_TXRX) ||
   21b14:	7b23      	ldrb	r3, [r4, #12]
    if (!p_cb->error &&
   21b16:	1e9a      	subs	r2, r3, #2
   21b18:	2a01      	cmp	r2, #1
   21b1a:	d818      	bhi.n	21b4e <nrfx_twi_0_irq_handler+0x6e>
         (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)) &&
   21b1c:	6a61      	ldr	r1, [r4, #36]	; 0x24
   21b1e:	69a2      	ldr	r2, [r4, #24]
   21b20:	4291      	cmp	r1, r2
   21b22:	d114      	bne.n	21b4e <nrfx_twi_0_irq_handler+0x6e>
        p_cb->p_curr_buf      = p_cb->xfer_desc.p_secondary_buf;
   21b24:	69e2      	ldr	r2, [r4, #28]
   21b26:	6262      	str	r2, [r4, #36]	; 0x24
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
   21b28:	f3cc 1c40 	ubfx	ip, ip, #5, #1
        p_cb->curr_length     = p_cb->xfer_desc.secondary_length;
   21b2c:	6962      	ldr	r2, [r4, #20]
   21b2e:	62a2      	str	r2, [r4, #40]	; 0x28
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
   21b30:	2b03      	cmp	r3, #3
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
   21b32:	f884 c02c 	strb.w	ip, [r4, #44]	; 0x2c
        p_cb->prev_suspend    = TWI_NO_SUSPEND;
   21b36:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
            (void)twi_tx_start_transfer(p_twi, p_cb);
   21b3a:	491a      	ldr	r1, [pc, #104]	; (21ba4 <nrfx_twi_0_irq_handler+0xc4>)
   21b3c:	481c      	ldr	r0, [pc, #112]	; (21bb0 <nrfx_twi_0_irq_handler+0xd0>)
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
   21b3e:	d103      	bne.n	21b48 <nrfx_twi_0_irq_handler+0x68>
            (void)twi_tx_start_transfer(p_twi, p_cb);
   21b40:	f7ff fdfe 	bl	21740 <twi_tx_start_transfer>
    twi_irq_handler(NRF_TWI0, &m_cb[NRFX_TWI0_INST_IDX]);
}
   21b44:	b007      	add	sp, #28
   21b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
            (void)twi_rx_start_transfer(p_twi, p_cb);
   21b48:	f7ff fd86 	bl	21658 <twi_rx_start_transfer>
   21b4c:	e7fa      	b.n	21b44 <nrfx_twi_0_irq_handler+0x64>
        event.xfer_desc = p_cb->xfer_desc;
   21b4e:	4e19      	ldr	r6, [pc, #100]	; (21bb4 <nrfx_twi_0_irq_handler+0xd4>)
   21b50:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   21b52:	ad01      	add	r5, sp, #4
   21b54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   21b56:	6833      	ldr	r3, [r6, #0]
   21b58:	602b      	str	r3, [r5, #0]
        if (p_cb->error)
   21b5a:	b1ff      	cbz	r7, 21b9c <nrfx_twi_0_irq_handler+0xbc>
    uint32_t error_source = p_reg->ERRORSRC;
   21b5c:	4a14      	ldr	r2, [pc, #80]	; (21bb0 <nrfx_twi_0_irq_handler+0xd0>)
   21b5e:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   21b62:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
            if (errorsrc & NRF_TWI_ERROR_ADDRESS_NACK)
   21b66:	0799      	lsls	r1, r3, #30
   21b68:	d50f      	bpl.n	21b8a <nrfx_twi_0_irq_handler+0xaa>
                event.type = NRFX_TWI_EVT_ADDRESS_NACK;
   21b6a:	2301      	movs	r3, #1
                event.type = NRFX_TWI_EVT_DATA_NACK;
   21b6c:	f88d 3000 	strb.w	r3, [sp]
        p_cb->busy = false;
   21b70:	2300      	movs	r3, #0
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
   21b72:	f01c 0f04 	tst.w	ip, #4
        p_cb->busy = false;
   21b76:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
   21b7a:	d001      	beq.n	21b80 <nrfx_twi_0_irq_handler+0xa0>
   21b7c:	2f00      	cmp	r7, #0
   21b7e:	d0e1      	beq.n	21b44 <nrfx_twi_0_irq_handler+0x64>
            p_cb->handler(&event, p_cb->p_context);
   21b80:	e9d4 3100 	ldrd	r3, r1, [r4]
   21b84:	4668      	mov	r0, sp
   21b86:	4798      	blx	r3
}
   21b88:	e7dc      	b.n	21b44 <nrfx_twi_0_irq_handler+0x64>
            else if (errorsrc & NRF_TWI_ERROR_DATA_NACK)
   21b8a:	075a      	lsls	r2, r3, #29
   21b8c:	d501      	bpl.n	21b92 <nrfx_twi_0_irq_handler+0xb2>
                event.type = NRFX_TWI_EVT_DATA_NACK;
   21b8e:	2302      	movs	r3, #2
   21b90:	e7ec      	b.n	21b6c <nrfx_twi_0_irq_handler+0x8c>
            else if (errorsrc & NRF_TWI_ERROR_OVERRUN)
   21b92:	07db      	lsls	r3, r3, #31
                event.type = NRFX_TWI_EVT_OVERRUN;
   21b94:	bf4c      	ite	mi
   21b96:	2303      	movmi	r3, #3
                event.type = NRFX_TWI_EVT_BUS_ERROR;
   21b98:	2304      	movpl	r3, #4
   21b9a:	e7e7      	b.n	21b6c <nrfx_twi_0_irq_handler+0x8c>
            event.type = NRFX_TWI_EVT_DONE;
   21b9c:	f88d 7000 	strb.w	r7, [sp]
            NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWI_EVT_DONE));
   21ba0:	e7e6      	b.n	21b70 <nrfx_twi_0_irq_handler+0x90>
   21ba2:	bf00      	nop
   21ba4:	200045c0 	.word	0x200045c0
   21ba8:	00035a66 	.word	0x00035a66
   21bac:	0002fa94 	.word	0x0002fa94
   21bb0:	40003000 	.word	0x40003000
   21bb4:	200045cc 	.word	0x200045cc

00021bb8 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   21bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   21bba:	4b10      	ldr	r3, [pc, #64]	; (21bfc <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
   21bbc:	4f10      	ldr	r7, [pc, #64]	; (21c00 <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   21bbe:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   21bc2:	3001      	adds	r0, #1
   21bc4:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   21bc8:	42ae      	cmp	r6, r5
   21bca:	d800      	bhi.n	21bce <z_sys_init_run_level+0x16>
		}
	}
}
   21bcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
   21bce:	e9d5 3400 	ldrd	r3, r4, [r5]
   21bd2:	4620      	mov	r0, r4
   21bd4:	4798      	blx	r3
   21bd6:	b170      	cbz	r0, 21bf6 <z_sys_init_run_level+0x3e>
   21bd8:	b16c      	cbz	r4, 21bf6 <z_sys_init_run_level+0x3e>
				(dev - __device_start));
   21bda:	1be4      	subs	r4, r4, r7
   21bdc:	1124      	asrs	r4, r4, #4
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   21bde:	0961      	lsrs	r1, r4, #5
   21be0:	4a08      	ldr	r2, [pc, #32]	; (21c04 <z_sys_init_run_level+0x4c>)
   21be2:	f004 041f 	and.w	r4, r4, #31
	uint32_t temp = *(volatile uint32_t *)addr;
   21be6:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	*(volatile uint32_t *)addr = temp | (1 << bit);
   21bea:	2301      	movs	r3, #1
   21bec:	fa03 f404 	lsl.w	r4, r3, r4
   21bf0:	4304      	orrs	r4, r0
   21bf2:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   21bf6:	3508      	adds	r5, #8
   21bf8:	e7e6      	b.n	21bc8 <z_sys_init_run_level+0x10>
   21bfa:	bf00      	nop
   21bfc:	0002f534 	.word	0x0002f534
   21c00:	2000117c 	.word	0x2000117c
   21c04:	2000120c 	.word	0x2000120c

00021c08 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
   21c08:	4b08      	ldr	r3, [pc, #32]	; (21c2c <z_device_ready+0x24>)
   21c0a:	1ac0      	subs	r0, r0, r3
   21c0c:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   21c0e:	0942      	lsrs	r2, r0, #5
   21c10:	4b07      	ldr	r3, [pc, #28]	; (21c30 <z_device_ready+0x28>)
   21c12:	f000 001f 	and.w	r0, r0, #31
	uint32_t temp = *(volatile uint32_t *)addr;
   21c16:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
   21c1a:	2301      	movs	r3, #1
   21c1c:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
   21c20:	4210      	tst	r0, r2
}
   21c22:	bf0c      	ite	eq
   21c24:	4618      	moveq	r0, r3
   21c26:	2000      	movne	r0, #0
   21c28:	4770      	bx	lr
   21c2a:	bf00      	nop
   21c2c:	2000117c 	.word	0x2000117c
   21c30:	2000120c 	.word	0x2000120c

00021c34 <z_impl_device_get_binding>:
	for (dev = __device_start; dev != __device_end; dev++) {
   21c34:	4911      	ldr	r1, [pc, #68]	; (21c7c <z_impl_device_get_binding+0x48>)
{
   21c36:	b570      	push	{r4, r5, r6, lr}
	for (dev = __device_start; dev != __device_end; dev++) {
   21c38:	4c11      	ldr	r4, [pc, #68]	; (21c80 <z_impl_device_get_binding+0x4c>)
{
   21c3a:	4605      	mov	r5, r0
   21c3c:	460e      	mov	r6, r1
	for (dev = __device_start; dev != __device_end; dev++) {
   21c3e:	428c      	cmp	r4, r1
   21c40:	d104      	bne.n	21c4c <z_impl_device_get_binding+0x18>
	for (dev = __device_start; dev != __device_end; dev++) {
   21c42:	4c0f      	ldr	r4, [pc, #60]	; (21c80 <z_impl_device_get_binding+0x4c>)
   21c44:	42b4      	cmp	r4, r6
   21c46:	d10a      	bne.n	21c5e <z_impl_device_get_binding+0x2a>
	return NULL;
   21c48:	2400      	movs	r4, #0
   21c4a:	e014      	b.n	21c76 <z_impl_device_get_binding+0x42>
		if (z_device_ready(dev) && (dev->name == name)) {
   21c4c:	4620      	mov	r0, r4
   21c4e:	f7ff ffdb 	bl	21c08 <z_device_ready>
   21c52:	b110      	cbz	r0, 21c5a <z_impl_device_get_binding+0x26>
   21c54:	6823      	ldr	r3, [r4, #0]
   21c56:	42ab      	cmp	r3, r5
   21c58:	d00d      	beq.n	21c76 <z_impl_device_get_binding+0x42>
	for (dev = __device_start; dev != __device_end; dev++) {
   21c5a:	3410      	adds	r4, #16
   21c5c:	e7ef      	b.n	21c3e <z_impl_device_get_binding+0xa>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   21c5e:	4620      	mov	r0, r4
   21c60:	f7ff ffd2 	bl	21c08 <z_device_ready>
   21c64:	b908      	cbnz	r0, 21c6a <z_impl_device_get_binding+0x36>
	for (dev = __device_start; dev != __device_end; dev++) {
   21c66:	3410      	adds	r4, #16
   21c68:	e7ec      	b.n	21c44 <z_impl_device_get_binding+0x10>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   21c6a:	6821      	ldr	r1, [r4, #0]
   21c6c:	4628      	mov	r0, r5
   21c6e:	f7e0 f911 	bl	1e94 <strcmp>
   21c72:	2800      	cmp	r0, #0
   21c74:	d1f7      	bne.n	21c66 <z_impl_device_get_binding+0x32>
}
   21c76:	4620      	mov	r0, r4
   21c78:	bd70      	pop	{r4, r5, r6, pc}
   21c7a:	bf00      	nop
   21c7c:	2000120c 	.word	0x2000120c
   21c80:	2000117c 	.word	0x2000117c

00021c84 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   21c84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   21c86:	4604      	mov	r4, r0
   21c88:	460e      	mov	r6, r1
	__asm__ volatile(
   21c8a:	f04f 0320 	mov.w	r3, #32
   21c8e:	f3ef 8711 	mrs	r7, BASEPRI
   21c92:	f383 8811 	msr	BASEPRI, r3
   21c96:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   21c9a:	f001 fe09 	bl	238b0 <z_impl_k_current_get>
   21c9e:	2c04      	cmp	r4, #4
   21ca0:	bf96      	itet	ls
   21ca2:	4b1e      	ldrls	r3, [pc, #120]	; (21d1c <z_fatal_error+0x98>)
   21ca4:	4b1e      	ldrhi	r3, [pc, #120]	; (21d20 <z_fatal_error+0x9c>)
   21ca6:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
	struct k_thread *thread = k_current_get();

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   21caa:	2200      	movs	r2, #0
   21cac:	4605      	mov	r5, r0
   21cae:	9200      	str	r2, [sp, #0]
   21cb0:	2145      	movs	r1, #69	; 0x45
   21cb2:	4622      	mov	r2, r4
   21cb4:	481b      	ldr	r0, [pc, #108]	; (21d24 <z_fatal_error+0xa0>)
   21cb6:	f005 f95a 	bl	26f6e <printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   21cba:	b13e      	cbz	r6, 21ccc <z_fatal_error+0x48>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   21cbc:	69f3      	ldr	r3, [r6, #28]
   21cbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
   21cc2:	b11b      	cbz	r3, 21ccc <z_fatal_error+0x48>
		LOG_ERR("Fault during interrupt handling\n");
   21cc4:	2145      	movs	r1, #69	; 0x45
   21cc6:	4818      	ldr	r0, [pc, #96]	; (21d28 <z_fatal_error+0xa4>)
   21cc8:	f005 f951 	bl	26f6e <printk>
	const char *thread_name = thread ? k_thread_name_get(thread) : NULL;
   21ccc:	b135      	cbz	r5, 21cdc <z_fatal_error+0x58>
   21cce:	4628      	mov	r0, r5
   21cd0:	f00b fb40 	bl	2d354 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   21cd4:	4603      	mov	r3, r0
   21cd6:	b108      	cbz	r0, 21cdc <z_fatal_error+0x58>
   21cd8:	7802      	ldrb	r2, [r0, #0]
   21cda:	b902      	cbnz	r2, 21cde <z_fatal_error+0x5a>
		thread_name = "unknown";
   21cdc:	4b13      	ldr	r3, [pc, #76]	; (21d2c <z_fatal_error+0xa8>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   21cde:	4814      	ldr	r0, [pc, #80]	; (21d30 <z_fatal_error+0xac>)
   21ce0:	462a      	mov	r2, r5
   21ce2:	2145      	movs	r1, #69	; 0x45
   21ce4:	f005 f943 	bl	26f6e <printk>
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   21ce8:	4631      	mov	r1, r6
   21cea:	4620      	mov	r0, r4
   21cec:	f7fe fa10 	bl	20110 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   21cf0:	2c04      	cmp	r4, #4
   21cf2:	d108      	bne.n	21d06 <z_fatal_error+0x82>
   21cf4:	490f      	ldr	r1, [pc, #60]	; (21d34 <z_fatal_error+0xb0>)
   21cf6:	4810      	ldr	r0, [pc, #64]	; (21d38 <z_fatal_error+0xb4>)
   21cf8:	228f      	movs	r2, #143	; 0x8f
   21cfa:	f005 f938 	bl	26f6e <printk>
   21cfe:	218f      	movs	r1, #143	; 0x8f
   21d00:	480c      	ldr	r0, [pc, #48]	; (21d34 <z_fatal_error+0xb0>)
   21d02:	f005 fbad 	bl	27460 <assert_post_action>
	__asm__ volatile(
   21d06:	f387 8811 	msr	BASEPRI, r7
   21d0a:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   21d0e:	4628      	mov	r0, r5
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   21d10:	b003      	add	sp, #12
   21d12:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   21d16:	f7e5 bb69 	b.w	73ec <z_impl_k_thread_abort>
   21d1a:	bf00      	nop
   21d1c:	0002f54c 	.word	0x0002f54c
   21d20:	00035aeb 	.word	0x00035aeb
   21d24:	00035b01 	.word	0x00035b01
   21d28:	00035b2e 	.word	0x00035b2e
   21d2c:	00035af9 	.word	0x00035af9
   21d30:	00035b54 	.word	0x00035b54
   21d34:	00035b71 	.word	0x00035b71
   21d38:	0002fa94 	.word	0x0002fa94

00021d3c <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *p1, void *unused2, void *unused3)
{
   21d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		 * saves no power and does not improve latency.  But it's an
		 * API we need to honor...
		 */
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
#ifdef CONFIG_PM
		_kernel.idle = ticks;
   21d3e:	4e16      	ldr	r6, [pc, #88]	; (21d98 <idle+0x5c>)
{
   21d40:	4605      	mov	r5, r0
			cpu->pending_abort = NULL;
   21d42:	2700      	movs	r7, #0
	__asm__ volatile(
   21d44:	f04f 0220 	mov.w	r2, #32
   21d48:	f3ef 8311 	mrs	r3, BASEPRI
   21d4c:	f382 8811 	msr	BASEPRI, r2
   21d50:	f3bf 8f6f 	isb	sy
		struct k_thread *to_abort = cpu->pending_abort;
   21d54:	6928      	ldr	r0, [r5, #16]
		if (to_abort) {
   21d56:	b188      	cbz	r0, 21d7c <idle+0x40>
			cpu->pending_abort = NULL;
   21d58:	612f      	str	r7, [r5, #16]
	__asm__ volatile(
   21d5a:	f383 8811 	msr	BASEPRI, r3
   21d5e:	f3bf 8f6f 	isb	sy
			z_thread_single_abort(to_abort);
   21d62:	f001 f989 	bl	23078 <z_thread_single_abort>
	__asm__ volatile(
   21d66:	f04f 0320 	mov.w	r3, #32
   21d6a:	f3ef 8011 	mrs	r0, BASEPRI
   21d6e:	f383 8811 	msr	BASEPRI, r3
   21d72:	f3bf 8f6f 	isb	sy
   21d76:	f00b fa95 	bl	2d2a4 <z_reschedule_irqlock>
   21d7a:	e7e3      	b.n	21d44 <idle+0x8>
		int32_t ticks = z_get_next_timeout_expiry();
   21d7c:	f002 fa82 	bl	24284 <z_get_next_timeout_expiry>
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   21d80:	2101      	movs	r1, #1
   21d82:	2802      	cmp	r0, #2
		int32_t ticks = z_get_next_timeout_expiry();
   21d84:	4604      	mov	r4, r0
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   21d86:	bfd8      	it	le
   21d88:	4608      	movle	r0, r1
   21d8a:	f002 fab1 	bl	242f0 <z_set_timeout_expiry>
		_kernel.idle = ticks;
   21d8e:	6274      	str	r4, [r6, #36]	; 0x24
	arch_cpu_idle();
   21d90:	f7e5 f86a 	bl	6e68 <arch_cpu_idle>
   21d94:	e7d6      	b.n	21d44 <idle+0x8>
   21d96:	bf00      	nop
   21d98:	20004604 	.word	0x20004604

00021d9c <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   21d9c:	4802      	ldr	r0, [pc, #8]	; (21da8 <z_bss_zero+0xc>)
   21d9e:	4a03      	ldr	r2, [pc, #12]	; (21dac <z_bss_zero+0x10>)
   21da0:	2100      	movs	r1, #0
   21da2:	1a12      	subs	r2, r2, r0
   21da4:	f00b bc29 	b.w	2d5fa <memset>
   21da8:	20001510 	.word	0x20001510
   21dac:	200048a0 	.word	0x200048a0

00021db0 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   21db0:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	z_sys_post_kernel = true;
   21db2:	4b0a      	ldr	r3, [pc, #40]	; (21ddc <bg_thread_main+0x2c>)
   21db4:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   21db6:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   21db8:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   21dba:	f7ff fefd 	bl	21bb8 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   21dbe:	f00b fb3c 	bl	2d43a <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   21dc2:	2003      	movs	r0, #3
   21dc4:	f7ff fef8 	bl	21bb8 <z_sys_init_run_level>

	z_init_static_threads();
   21dc8:	f001 feee 	bl	23ba8 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   21dcc:	f7e2 faa4 	bl	4318 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   21dd0:	4a03      	ldr	r2, [pc, #12]	; (21de0 <bg_thread_main+0x30>)
   21dd2:	7b13      	ldrb	r3, [r2, #12]
   21dd4:	f023 0301 	bic.w	r3, r3, #1
   21dd8:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   21dda:	bd08      	pop	{r3, pc}
   21ddc:	2000488c 	.word	0x2000488c
   21de0:	20002400 	.word	0x20002400

00021de4 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   21de4:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   21de8:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 21ee0 <z_cstart+0xfc>
   21dec:	b0ab      	sub	sp, #172	; 0xac
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   21dee:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   21df2:	4d33      	ldr	r5, [pc, #204]	; (21ec0 <z_cstart+0xdc>)
	_kernel.ready_q.cache = &z_main_thread;
   21df4:	4e33      	ldr	r6, [pc, #204]	; (21ec4 <z_cstart+0xe0>)
   21df6:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   21df8:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 21ee4 <z_cstart+0x100>
	z_setup_new_thread(thread, stack,
   21dfc:	4f32      	ldr	r7, [pc, #200]	; (21ec8 <z_cstart+0xe4>)
   21dfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   21e02:	2400      	movs	r4, #0
   21e04:	616b      	str	r3, [r5, #20]
   21e06:	23e0      	movs	r3, #224	; 0xe0
   21e08:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   21e0c:	77ec      	strb	r4, [r5, #31]
   21e0e:	762c      	strb	r4, [r5, #24]
   21e10:	766c      	strb	r4, [r5, #25]
   21e12:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   21e14:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   21e16:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   21e1a:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   21e1c:	f7e5 fac4 	bl	73a8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   21e20:	f7e5 f81c 	bl	6e5c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   21e24:	f04f 33ff 	mov.w	r3, #4294967295
   21e28:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   21e2a:	62eb      	str	r3, [r5, #44]	; 0x2c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   21e2c:	4d27      	ldr	r5, [pc, #156]	; (21ecc <z_cstart+0xe8>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   21e2e:	f240 1301 	movw	r3, #257	; 0x101
   21e32:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   21e36:	ab06      	add	r3, sp, #24
   21e38:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   21e3a:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   21e3c:	e9cd 4423 	strd	r4, r4, [sp, #140]	; 0x8c
   21e40:	f7ff feba 	bl	21bb8 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   21e44:	2001      	movs	r0, #1
   21e46:	f7ff feb7 	bl	21bb8 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   21e4a:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
   21e4e:	f001 fbc9 	bl	235e4 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   21e52:	4b1f      	ldr	r3, [pc, #124]	; (21ed0 <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
   21e54:	62ae      	str	r6, [r5, #40]	; 0x28
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   21e56:	f44f 6280 	mov.w	r2, #1024	; 0x400
   21e5a:	491e      	ldr	r1, [pc, #120]	; (21ed4 <z_cstart+0xf0>)
   21e5c:	9305      	str	r3, [sp, #20]
   21e5e:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   21e62:	4643      	mov	r3, r8
   21e64:	e9cd 4401 	strd	r4, r4, [sp, #4]
   21e68:	9400      	str	r4, [sp, #0]
   21e6a:	4630      	mov	r0, r6
   21e6c:	f001 fde4 	bl	23a38 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   21e70:	7b73      	ldrb	r3, [r6, #13]
   21e72:	4682      	mov	sl, r0
   21e74:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   21e78:	4630      	mov	r0, r6
   21e7a:	7373      	strb	r3, [r6, #13]
   21e7c:	f000 ff36 	bl	22cec <z_ready_thread>
	z_setup_new_thread(thread, stack,
   21e80:	230f      	movs	r3, #15
   21e82:	e9cd 4302 	strd	r4, r3, [sp, #8]
   21e86:	f44f 72a0 	mov.w	r2, #320	; 0x140
   21e8a:	4b13      	ldr	r3, [pc, #76]	; (21ed8 <z_cstart+0xf4>)
   21e8c:	4913      	ldr	r1, [pc, #76]	; (21edc <z_cstart+0xf8>)
   21e8e:	e9cd b404 	strd	fp, r4, [sp, #16]
   21e92:	e9cd 5400 	strd	r5, r4, [sp]
   21e96:	4638      	mov	r0, r7
   21e98:	f001 fdce 	bl	23a38 <z_setup_new_thread>
   21e9c:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   21e9e:	60ef      	str	r7, [r5, #12]
   21ea0:	f023 0304 	bic.w	r3, r3, #4
   21ea4:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   21ea6:	f105 031c 	add.w	r3, r5, #28
		_kernel.cpus[i].id = i;
   21eaa:	762c      	strb	r4, [r5, #24]
		_kernel.cpus[i].irq_stack =
   21eac:	f8c5 9004 	str.w	r9, [r5, #4]
	list->tail = (sys_dnode_t *)list;
   21eb0:	e9c5 3307 	strd	r3, r3, [r5, #28]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   21eb4:	4642      	mov	r2, r8
   21eb6:	4651      	mov	r1, sl
   21eb8:	4630      	mov	r0, r6
   21eba:	f7e4 ffb5 	bl	6e28 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   21ebe:	bf00      	nop
   21ec0:	e000ed00 	.word	0xe000ed00
   21ec4:	20002400 	.word	0x20002400
   21ec8:	20002370 	.word	0x20002370
   21ecc:	20004604 	.word	0x20004604
   21ed0:	0003197a 	.word	0x0003197a
   21ed4:	20005ce0 	.word	0x20005ce0
   21ed8:	00021d3d 	.word	0x00021d3d
   21edc:	20006100 	.word	0x20006100
   21ee0:	20006a80 	.word	0x20006a80
   21ee4:	00021db1 	.word	0x00021db1

00021ee8 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
   21ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   21eea:	4d0d      	ldr	r5, [pc, #52]	; (21f20 <statics_init+0x38>)
   21eec:	4c0d      	ldr	r4, [pc, #52]	; (21f24 <statics_init+0x3c>)
   21eee:	4e0e      	ldr	r6, [pc, #56]	; (21f28 <statics_init+0x40>)
   21ef0:	462f      	mov	r7, r5
   21ef2:	42ac      	cmp	r4, r5
   21ef4:	d908      	bls.n	21f08 <statics_init+0x20>
   21ef6:	4631      	mov	r1, r6
   21ef8:	480c      	ldr	r0, [pc, #48]	; (21f2c <statics_init+0x44>)
   21efa:	2215      	movs	r2, #21
   21efc:	f005 f837 	bl	26f6e <printk>
   21f00:	2115      	movs	r1, #21
   21f02:	4630      	mov	r0, r6
   21f04:	f005 faac 	bl	27460 <assert_post_action>
   21f08:	42bc      	cmp	r4, r7
   21f0a:	d301      	bcc.n	21f10 <statics_init+0x28>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   21f0c:	2000      	movs	r0, #0
   21f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   21f10:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   21f14:	4620      	mov	r0, r4
   21f16:	f00b f964 	bl	2d1e2 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   21f1a:	3418      	adds	r4, #24
   21f1c:	e7e9      	b.n	21ef2 <statics_init+0xa>
   21f1e:	bf00      	nop
   21f20:	20001280 	.word	0x20001280
   21f24:	20001280 	.word	0x20001280
   21f28:	00035b96 	.word	0x00035b96
   21f2c:	0002fa94 	.word	0x0002fa94

00021f30 <k_heap_aligned_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   21f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21f34:	b087      	sub	sp, #28
   21f36:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   21f3a:	4606      	mov	r6, r0
   21f3c:	460f      	mov	r7, r1
	int64_t now, end = z_timeout_end_calc(timeout);
   21f3e:	4640      	mov	r0, r8
   21f40:	4649      	mov	r1, r9
{
   21f42:	4692      	mov	sl, r2
	int64_t now, end = z_timeout_end_calc(timeout);
   21f44:	f00b fa80 	bl	2d448 <z_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   21f48:	f106 0514 	add.w	r5, r6, #20
	int64_t now, end = z_timeout_end_calc(timeout);
   21f4c:	9005      	str	r0, [sp, #20]
   21f4e:	468b      	mov	fp, r1
   21f50:	f04f 0320 	mov.w	r3, #32
   21f54:	f3ef 8411 	mrs	r4, BASEPRI
   21f58:	f383 8811 	msr	BASEPRI, r3
   21f5c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21f60:	4628      	mov	r0, r5
   21f62:	f001 fea1 	bl	23ca8 <z_spin_lock_valid>
   21f66:	b940      	cbnz	r0, 21f7a <k_heap_aligned_alloc+0x4a>
   21f68:	4936      	ldr	r1, [pc, #216]	; (22044 <k_heap_aligned_alloc+0x114>)
   21f6a:	4837      	ldr	r0, [pc, #220]	; (22048 <k_heap_aligned_alloc+0x118>)
   21f6c:	227c      	movs	r2, #124	; 0x7c
   21f6e:	f004 fffe 	bl	26f6e <printk>
   21f72:	217c      	movs	r1, #124	; 0x7c
   21f74:	4833      	ldr	r0, [pc, #204]	; (22044 <k_heap_aligned_alloc+0x114>)
   21f76:	f005 fa73 	bl	27460 <assert_post_action>
	z_spin_lock_set_owner(l);
   21f7a:	4628      	mov	r0, r5
   21f7c:	f001 feb2 	bl	23ce4 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   21f80:	f3ef 8305 	mrs	r3, IPSR

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   21f84:	b15b      	cbz	r3, 21f9e <k_heap_aligned_alloc+0x6e>
   21f86:	ea58 0309 	orrs.w	r3, r8, r9
   21f8a:	d008      	beq.n	21f9e <k_heap_aligned_alloc+0x6e>
   21f8c:	492f      	ldr	r1, [pc, #188]	; (2204c <k_heap_aligned_alloc+0x11c>)
   21f8e:	482e      	ldr	r0, [pc, #184]	; (22048 <k_heap_aligned_alloc+0x118>)
   21f90:	2224      	movs	r2, #36	; 0x24
   21f92:	f004 ffec 	bl	26f6e <printk>
   21f96:	2124      	movs	r1, #36	; 0x24
   21f98:	482c      	ldr	r0, [pc, #176]	; (2204c <k_heap_aligned_alloc+0x11c>)
   21f9a:	f005 fa61 	bl	27460 <assert_post_action>
		now = z_tick_get();
		if ((ret != NULL) || ((end - now) <= 0)) {
			break;
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   21f9e:	f106 030c 	add.w	r3, r6, #12
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21fa2:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 22044 <k_heap_aligned_alloc+0x114>
   21fa6:	9304      	str	r3, [sp, #16]
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   21fa8:	4652      	mov	r2, sl
   21faa:	4639      	mov	r1, r7
   21fac:	4630      	mov	r0, r6
   21fae:	f7e2 fdfb 	bl	4ba8 <sys_heap_aligned_alloc>
   21fb2:	4680      	mov	r8, r0
		now = z_tick_get();
   21fb4:	f002 fa8a 	bl	244cc <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   21fb8:	f1b8 0f00 	cmp.w	r8, #0
   21fbc:	d014      	beq.n	21fe8 <k_heap_aligned_alloc+0xb8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21fbe:	4628      	mov	r0, r5
   21fc0:	f001 fe80 	bl	23cc4 <z_spin_unlock_valid>
   21fc4:	b940      	cbnz	r0, 21fd8 <k_heap_aligned_alloc+0xa8>
   21fc6:	491f      	ldr	r1, [pc, #124]	; (22044 <k_heap_aligned_alloc+0x114>)
   21fc8:	481f      	ldr	r0, [pc, #124]	; (22048 <k_heap_aligned_alloc+0x118>)
   21fca:	22a7      	movs	r2, #167	; 0xa7
   21fcc:	f004 ffcf 	bl	26f6e <printk>
   21fd0:	21a7      	movs	r1, #167	; 0xa7
   21fd2:	481c      	ldr	r0, [pc, #112]	; (22044 <k_heap_aligned_alloc+0x114>)
   21fd4:	f005 fa44 	bl	27460 <assert_post_action>
	__asm__ volatile(
   21fd8:	f384 8811 	msr	BASEPRI, r4
   21fdc:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   21fe0:	4640      	mov	r0, r8
   21fe2:	b007      	add	sp, #28
   21fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   21fe8:	9b05      	ldr	r3, [sp, #20]
   21fea:	1a1b      	subs	r3, r3, r0
   21fec:	9302      	str	r3, [sp, #8]
   21fee:	eb6b 0301 	sbc.w	r3, fp, r1
   21ff2:	9303      	str	r3, [sp, #12]
   21ff4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   21ff8:	2a01      	cmp	r2, #1
   21ffa:	f173 0300 	sbcs.w	r3, r3, #0
   21ffe:	dbde      	blt.n	21fbe <k_heap_aligned_alloc+0x8e>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   22000:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   22004:	4621      	mov	r1, r4
   22006:	e9cd 2300 	strd	r2, r3, [sp]
   2200a:	4628      	mov	r0, r5
   2200c:	9a04      	ldr	r2, [sp, #16]
   2200e:	f001 f9df 	bl	233d0 <z_pend_curr>
	__asm__ volatile(
   22012:	f04f 0320 	mov.w	r3, #32
   22016:	f3ef 8411 	mrs	r4, BASEPRI
   2201a:	f383 8811 	msr	BASEPRI, r3
   2201e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22022:	4628      	mov	r0, r5
   22024:	f001 fe40 	bl	23ca8 <z_spin_lock_valid>
   22028:	b940      	cbnz	r0, 2203c <k_heap_aligned_alloc+0x10c>
   2202a:	4649      	mov	r1, r9
   2202c:	4806      	ldr	r0, [pc, #24]	; (22048 <k_heap_aligned_alloc+0x118>)
   2202e:	227c      	movs	r2, #124	; 0x7c
   22030:	f004 ff9d 	bl	26f6e <printk>
   22034:	217c      	movs	r1, #124	; 0x7c
   22036:	4648      	mov	r0, r9
   22038:	f005 fa12 	bl	27460 <assert_post_action>
	z_spin_lock_set_owner(l);
   2203c:	4628      	mov	r0, r5
   2203e:	f001 fe51 	bl	23ce4 <z_spin_lock_set_owner>
	return k;
   22042:	e7b1      	b.n	21fa8 <k_heap_aligned_alloc+0x78>
   22044:	0002fba8 	.word	0x0002fba8
   22048:	0002fa94 	.word	0x0002fa94
   2204c:	00035b96 	.word	0x00035b96

00022050 <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   22050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22052:	4605      	mov	r5, r0
   22054:	460f      	mov	r7, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   22056:	f100 0414 	add.w	r4, r0, #20
   2205a:	f04f 0320 	mov.w	r3, #32
   2205e:	f3ef 8611 	mrs	r6, BASEPRI
   22062:	f383 8811 	msr	BASEPRI, r3
   22066:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2206a:	4620      	mov	r0, r4
   2206c:	f001 fe1c 	bl	23ca8 <z_spin_lock_valid>
   22070:	b940      	cbnz	r0, 22084 <k_heap_free+0x34>
   22072:	4916      	ldr	r1, [pc, #88]	; (220cc <k_heap_free+0x7c>)
   22074:	4816      	ldr	r0, [pc, #88]	; (220d0 <k_heap_free+0x80>)
   22076:	227c      	movs	r2, #124	; 0x7c
   22078:	f004 ff79 	bl	26f6e <printk>
   2207c:	217c      	movs	r1, #124	; 0x7c
   2207e:	4813      	ldr	r0, [pc, #76]	; (220cc <k_heap_free+0x7c>)
   22080:	f005 f9ee 	bl	27460 <assert_post_action>
	z_spin_lock_set_owner(l);
   22084:	4620      	mov	r0, r4
   22086:	f001 fe2d 	bl	23ce4 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   2208a:	4628      	mov	r0, r5
   2208c:	4639      	mov	r1, r7
   2208e:	f7e2 fd4b 	bl	4b28 <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   22092:	f105 000c 	add.w	r0, r5, #12
   22096:	f00b f930 	bl	2d2fa <z_unpend_all>
   2209a:	b128      	cbz	r0, 220a8 <k_heap_free+0x58>
		z_reschedule(&h->lock, key);
   2209c:	4631      	mov	r1, r6
   2209e:	4620      	mov	r0, r4
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   220a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   220a4:	f000 bc50 	b.w	22948 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   220a8:	4620      	mov	r0, r4
   220aa:	f001 fe0b 	bl	23cc4 <z_spin_unlock_valid>
   220ae:	b940      	cbnz	r0, 220c2 <k_heap_free+0x72>
   220b0:	4906      	ldr	r1, [pc, #24]	; (220cc <k_heap_free+0x7c>)
   220b2:	4807      	ldr	r0, [pc, #28]	; (220d0 <k_heap_free+0x80>)
   220b4:	22a7      	movs	r2, #167	; 0xa7
   220b6:	f004 ff5a 	bl	26f6e <printk>
   220ba:	21a7      	movs	r1, #167	; 0xa7
   220bc:	4803      	ldr	r0, [pc, #12]	; (220cc <k_heap_free+0x7c>)
   220be:	f005 f9cf 	bl	27460 <assert_post_action>
	__asm__ volatile(
   220c2:	f386 8811 	msr	BASEPRI, r6
   220c6:	f3bf 8f6f 	isb	sy
}
   220ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   220cc:	0002fba8 	.word	0x0002fba8
   220d0:	0002fa94 	.word	0x0002fa94

000220d4 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   220d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   220d8:	4d14      	ldr	r5, [pc, #80]	; (2212c <init_mem_slab_module+0x58>)
   220da:	4c15      	ldr	r4, [pc, #84]	; (22130 <init_mem_slab_module+0x5c>)
   220dc:	4e15      	ldr	r6, [pc, #84]	; (22134 <init_mem_slab_module+0x60>)
   220de:	46a8      	mov	r8, r5
   220e0:	42ac      	cmp	r4, r5
   220e2:	d908      	bls.n	220f6 <init_mem_slab_module+0x22>
   220e4:	4631      	mov	r1, r6
   220e6:	4814      	ldr	r0, [pc, #80]	; (22138 <init_mem_slab_module+0x64>)
   220e8:	2242      	movs	r2, #66	; 0x42
   220ea:	f004 ff40 	bl	26f6e <printk>
   220ee:	2142      	movs	r1, #66	; 0x42
   220f0:	4630      	mov	r0, r6
   220f2:	f005 f9b5 	bl	27460 <assert_post_action>
   220f6:	4544      	cmp	r4, r8
   220f8:	d302      	bcc.n	22100 <init_mem_slab_module+0x2c>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   220fa:	2000      	movs	r0, #0
	return rc;
}
   220fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   22100:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   22104:	ea42 0301 	orr.w	r3, r2, r1
   22108:	f013 0303 	ands.w	r3, r3, #3
   2210c:	d10b      	bne.n	22126 <init_mem_slab_module+0x52>
	for (j = 0U; j < slab->num_blocks; j++) {
   2210e:	68a0      	ldr	r0, [r4, #8]
	slab->free_list = NULL;
   22110:	6163      	str	r3, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   22112:	4283      	cmp	r3, r0
   22114:	d101      	bne.n	2211a <init_mem_slab_module+0x46>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   22116:	341c      	adds	r4, #28
   22118:	e7e2      	b.n	220e0 <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
   2211a:	6967      	ldr	r7, [r4, #20]
   2211c:	6017      	str	r7, [r2, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   2211e:	3301      	adds	r3, #1
		slab->free_list = p;
   22120:	6162      	str	r2, [r4, #20]
		p += slab->block_size;
   22122:	440a      	add	r2, r1
   22124:	e7f5      	b.n	22112 <init_mem_slab_module+0x3e>
		return -EINVAL;
   22126:	f06f 0015 	mvn.w	r0, #21
	return rc;
   2212a:	e7e7      	b.n	220fc <init_mem_slab_module+0x28>
   2212c:	20001280 	.word	0x20001280
   22130:	20001210 	.word	0x20001210
   22134:	00035bb8 	.word	0x00035bb8
   22138:	0002fa94 	.word	0x0002fa94

0002213c <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   2213c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   22140:	4604      	mov	r4, r0
   22142:	460d      	mov	r5, r1
   22144:	4616      	mov	r6, r2
   22146:	461f      	mov	r7, r3
	__asm__ volatile(
   22148:	f04f 0320 	mov.w	r3, #32
   2214c:	f3ef 8811 	mrs	r8, BASEPRI
   22150:	f383 8811 	msr	BASEPRI, r3
   22154:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22158:	4821      	ldr	r0, [pc, #132]	; (221e0 <k_mem_slab_alloc+0xa4>)
   2215a:	f001 fda5 	bl	23ca8 <z_spin_lock_valid>
   2215e:	b940      	cbnz	r0, 22172 <k_mem_slab_alloc+0x36>
   22160:	4920      	ldr	r1, [pc, #128]	; (221e4 <k_mem_slab_alloc+0xa8>)
   22162:	4821      	ldr	r0, [pc, #132]	; (221e8 <k_mem_slab_alloc+0xac>)
   22164:	227c      	movs	r2, #124	; 0x7c
   22166:	f004 ff02 	bl	26f6e <printk>
   2216a:	217c      	movs	r1, #124	; 0x7c
   2216c:	481d      	ldr	r0, [pc, #116]	; (221e4 <k_mem_slab_alloc+0xa8>)
   2216e:	f005 f977 	bl	27460 <assert_post_action>
	z_spin_lock_set_owner(l);
   22172:	481b      	ldr	r0, [pc, #108]	; (221e0 <k_mem_slab_alloc+0xa4>)
   22174:	f001 fdb6 	bl	23ce4 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   22178:	6963      	ldr	r3, [r4, #20]
   2217a:	b1c3      	cbz	r3, 221ae <k_mem_slab_alloc+0x72>
		/* take a free block */
		*mem = slab->free_list;
   2217c:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   2217e:	681b      	ldr	r3, [r3, #0]
   22180:	6163      	str	r3, [r4, #20]
		slab->num_used++;
   22182:	69a3      	ldr	r3, [r4, #24]
   22184:	3301      	adds	r3, #1
   22186:	61a3      	str	r3, [r4, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   22188:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2218a:	4815      	ldr	r0, [pc, #84]	; (221e0 <k_mem_slab_alloc+0xa4>)
   2218c:	f001 fd9a 	bl	23cc4 <z_spin_unlock_valid>
   22190:	b940      	cbnz	r0, 221a4 <k_mem_slab_alloc+0x68>
   22192:	4914      	ldr	r1, [pc, #80]	; (221e4 <k_mem_slab_alloc+0xa8>)
   22194:	4814      	ldr	r0, [pc, #80]	; (221e8 <k_mem_slab_alloc+0xac>)
   22196:	22a7      	movs	r2, #167	; 0xa7
   22198:	f004 fee9 	bl	26f6e <printk>
   2219c:	21a7      	movs	r1, #167	; 0xa7
   2219e:	4811      	ldr	r0, [pc, #68]	; (221e4 <k_mem_slab_alloc+0xa8>)
   221a0:	f005 f95e 	bl	27460 <assert_post_action>
	__asm__ volatile(
   221a4:	f388 8811 	msr	BASEPRI, r8
   221a8:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   221ac:	e013      	b.n	221d6 <k_mem_slab_alloc+0x9a>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   221ae:	ea56 0207 	orrs.w	r2, r6, r7
   221b2:	d103      	bne.n	221bc <k_mem_slab_alloc+0x80>
		*mem = NULL;
   221b4:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
   221b6:	f06f 040b 	mvn.w	r4, #11
   221ba:	e7e6      	b.n	2218a <k_mem_slab_alloc+0x4e>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   221bc:	4622      	mov	r2, r4
   221be:	e9cd 6700 	strd	r6, r7, [sp]
   221c2:	4641      	mov	r1, r8
   221c4:	4806      	ldr	r0, [pc, #24]	; (221e0 <k_mem_slab_alloc+0xa4>)
   221c6:	f001 f903 	bl	233d0 <z_pend_curr>
		if (result == 0) {
   221ca:	4604      	mov	r4, r0
   221cc:	b918      	cbnz	r0, 221d6 <k_mem_slab_alloc+0x9a>
			*mem = _current->base.swap_data;
   221ce:	4b07      	ldr	r3, [pc, #28]	; (221ec <k_mem_slab_alloc+0xb0>)
   221d0:	689b      	ldr	r3, [r3, #8]
   221d2:	695b      	ldr	r3, [r3, #20]
   221d4:	602b      	str	r3, [r5, #0]
}
   221d6:	4620      	mov	r0, r4
   221d8:	b002      	add	sp, #8
   221da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   221de:	bf00      	nop
   221e0:	200045fc 	.word	0x200045fc
   221e4:	0002fba8 	.word	0x0002fba8
   221e8:	0002fa94 	.word	0x0002fa94
   221ec:	20004604 	.word	0x20004604

000221f0 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   221f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   221f2:	4604      	mov	r4, r0
   221f4:	460d      	mov	r5, r1
	__asm__ volatile(
   221f6:	f04f 0320 	mov.w	r3, #32
   221fa:	f3ef 8611 	mrs	r6, BASEPRI
   221fe:	f383 8811 	msr	BASEPRI, r3
   22202:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22206:	481e      	ldr	r0, [pc, #120]	; (22280 <k_mem_slab_free+0x90>)
   22208:	f001 fd4e 	bl	23ca8 <z_spin_lock_valid>
   2220c:	b940      	cbnz	r0, 22220 <k_mem_slab_free+0x30>
   2220e:	491d      	ldr	r1, [pc, #116]	; (22284 <k_mem_slab_free+0x94>)
   22210:	481d      	ldr	r0, [pc, #116]	; (22288 <k_mem_slab_free+0x98>)
   22212:	227c      	movs	r2, #124	; 0x7c
   22214:	f004 feab 	bl	26f6e <printk>
   22218:	217c      	movs	r1, #124	; 0x7c
   2221a:	481a      	ldr	r0, [pc, #104]	; (22284 <k_mem_slab_free+0x94>)
   2221c:	f005 f920 	bl	27460 <assert_post_action>
	z_spin_lock_set_owner(l);
   22220:	4817      	ldr	r0, [pc, #92]	; (22280 <k_mem_slab_free+0x90>)
   22222:	f001 fd5f 	bl	23ce4 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (slab->free_list == NULL) {
   22226:	6967      	ldr	r7, [r4, #20]
   22228:	b97f      	cbnz	r7, 2224a <k_mem_slab_free+0x5a>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   2222a:	4620      	mov	r0, r4
   2222c:	f001 f972 	bl	23514 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   22230:	b158      	cbz	r0, 2224a <k_mem_slab_free+0x5a>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   22232:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   22234:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   22236:	f8c0 7088 	str.w	r7, [r0, #136]	; 0x88
			z_ready_thread(pending_thread);
   2223a:	f000 fd57 	bl	22cec <z_ready_thread>
			z_reschedule(&lock, key);
   2223e:	4631      	mov	r1, r6
   22240:	480f      	ldr	r0, [pc, #60]	; (22280 <k_mem_slab_free+0x90>)
	}
	**(char ***) mem = slab->free_list;
	slab->free_list = *(char **) mem;
	slab->num_used--;
	k_spin_unlock(&lock, key);
}
   22242:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&lock, key);
   22246:	f000 bb7f 	b.w	22948 <z_reschedule>
	**(char ***) mem = slab->free_list;
   2224a:	682b      	ldr	r3, [r5, #0]
   2224c:	6962      	ldr	r2, [r4, #20]
   2224e:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   22250:	682b      	ldr	r3, [r5, #0]
   22252:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   22254:	69a3      	ldr	r3, [r4, #24]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22256:	480a      	ldr	r0, [pc, #40]	; (22280 <k_mem_slab_free+0x90>)
   22258:	3b01      	subs	r3, #1
   2225a:	61a3      	str	r3, [r4, #24]
   2225c:	f001 fd32 	bl	23cc4 <z_spin_unlock_valid>
   22260:	b940      	cbnz	r0, 22274 <k_mem_slab_free+0x84>
   22262:	4908      	ldr	r1, [pc, #32]	; (22284 <k_mem_slab_free+0x94>)
   22264:	4808      	ldr	r0, [pc, #32]	; (22288 <k_mem_slab_free+0x98>)
   22266:	22a7      	movs	r2, #167	; 0xa7
   22268:	f004 fe81 	bl	26f6e <printk>
   2226c:	21a7      	movs	r1, #167	; 0xa7
   2226e:	4805      	ldr	r0, [pc, #20]	; (22284 <k_mem_slab_free+0x94>)
   22270:	f005 f8f6 	bl	27460 <assert_post_action>
	__asm__ volatile(
   22274:	f386 8811 	msr	BASEPRI, r6
   22278:	f3bf 8f6f 	isb	sy
}
   2227c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2227e:	bf00      	nop
   22280:	200045fc 	.word	0x200045fc
   22284:	0002fba8 	.word	0x0002fba8
   22288:	0002fa94 	.word	0x0002fa94

0002228c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   2228c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   22290:	4604      	mov	r4, r0
   22292:	4616      	mov	r6, r2
   22294:	461f      	mov	r7, r3
   22296:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   2229a:	b143      	cbz	r3, 222ae <z_impl_k_mutex_lock+0x22>
   2229c:	4960      	ldr	r1, [pc, #384]	; (22420 <z_impl_k_mutex_lock+0x194>)
   2229e:	4861      	ldr	r0, [pc, #388]	; (22424 <z_impl_k_mutex_lock+0x198>)
   222a0:	227d      	movs	r2, #125	; 0x7d
   222a2:	f004 fe64 	bl	26f6e <printk>
   222a6:	217d      	movs	r1, #125	; 0x7d
   222a8:	485d      	ldr	r0, [pc, #372]	; (22420 <z_impl_k_mutex_lock+0x194>)
   222aa:	f005 f8d9 	bl	27460 <assert_post_action>
	__asm__ volatile(
   222ae:	f04f 0320 	mov.w	r3, #32
   222b2:	f3ef 8511 	mrs	r5, BASEPRI
   222b6:	f383 8811 	msr	BASEPRI, r3
   222ba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   222be:	485a      	ldr	r0, [pc, #360]	; (22428 <z_impl_k_mutex_lock+0x19c>)
   222c0:	f001 fcf2 	bl	23ca8 <z_spin_lock_valid>
   222c4:	b940      	cbnz	r0, 222d8 <z_impl_k_mutex_lock+0x4c>
   222c6:	4959      	ldr	r1, [pc, #356]	; (2242c <z_impl_k_mutex_lock+0x1a0>)
   222c8:	4856      	ldr	r0, [pc, #344]	; (22424 <z_impl_k_mutex_lock+0x198>)
   222ca:	227c      	movs	r2, #124	; 0x7c
   222cc:	f004 fe4f 	bl	26f6e <printk>
   222d0:	217c      	movs	r1, #124	; 0x7c
   222d2:	4856      	ldr	r0, [pc, #344]	; (2242c <z_impl_k_mutex_lock+0x1a0>)
   222d4:	f005 f8c4 	bl	27460 <assert_post_action>
	z_spin_lock_set_owner(l);
   222d8:	4853      	ldr	r0, [pc, #332]	; (22428 <z_impl_k_mutex_lock+0x19c>)
   222da:	f001 fd03 	bl	23ce4 <z_spin_lock_set_owner>

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   222de:	68e3      	ldr	r3, [r4, #12]
   222e0:	4a53      	ldr	r2, [pc, #332]	; (22430 <z_impl_k_mutex_lock+0x1a4>)
   222e2:	b1d3      	cbz	r3, 2231a <z_impl_k_mutex_lock+0x8e>
   222e4:	68a0      	ldr	r0, [r4, #8]
   222e6:	6891      	ldr	r1, [r2, #8]
   222e8:	4288      	cmp	r0, r1
   222ea:	d033      	beq.n	22354 <z_impl_k_mutex_lock+0xc8>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   222ec:	ea56 0307 	orrs.w	r3, r6, r7
   222f0:	d132      	bne.n	22358 <z_impl_k_mutex_lock+0xcc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   222f2:	484d      	ldr	r0, [pc, #308]	; (22428 <z_impl_k_mutex_lock+0x19c>)
   222f4:	f001 fce6 	bl	23cc4 <z_spin_unlock_valid>
   222f8:	b940      	cbnz	r0, 2230c <z_impl_k_mutex_lock+0x80>
   222fa:	494c      	ldr	r1, [pc, #304]	; (2242c <z_impl_k_mutex_lock+0x1a0>)
   222fc:	4849      	ldr	r0, [pc, #292]	; (22424 <z_impl_k_mutex_lock+0x198>)
   222fe:	22a7      	movs	r2, #167	; 0xa7
   22300:	f004 fe35 	bl	26f6e <printk>
   22304:	21a7      	movs	r1, #167	; 0xa7
   22306:	4849      	ldr	r0, [pc, #292]	; (2242c <z_impl_k_mutex_lock+0x1a0>)
   22308:	f005 f8aa 	bl	27460 <assert_post_action>
	__asm__ volatile(
   2230c:	f385 8811 	msr	BASEPRI, r5
   22310:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   22314:	f06f 000f 	mvn.w	r0, #15
   22318:	e019      	b.n	2234e <z_impl_k_mutex_lock+0xc2>
					_current->base.prio :
   2231a:	6891      	ldr	r1, [r2, #8]
   2231c:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   22320:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   22322:	3301      	adds	r3, #1
   22324:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   22326:	6893      	ldr	r3, [r2, #8]
   22328:	60a3      	str	r3, [r4, #8]
   2232a:	483f      	ldr	r0, [pc, #252]	; (22428 <z_impl_k_mutex_lock+0x19c>)
   2232c:	f001 fcca 	bl	23cc4 <z_spin_unlock_valid>
   22330:	b940      	cbnz	r0, 22344 <z_impl_k_mutex_lock+0xb8>
   22332:	493e      	ldr	r1, [pc, #248]	; (2242c <z_impl_k_mutex_lock+0x1a0>)
   22334:	483b      	ldr	r0, [pc, #236]	; (22424 <z_impl_k_mutex_lock+0x198>)
   22336:	22a7      	movs	r2, #167	; 0xa7
   22338:	f004 fe19 	bl	26f6e <printk>
   2233c:	21a7      	movs	r1, #167	; 0xa7
   2233e:	483b      	ldr	r0, [pc, #236]	; (2242c <z_impl_k_mutex_lock+0x1a0>)
   22340:	f005 f88e 	bl	27460 <assert_post_action>
   22344:	f385 8811 	msr	BASEPRI, r5
   22348:	f3bf 8f6f 	isb	sy
		return 0;
   2234c:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   2234e:	b002      	add	sp, #8
   22350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   22354:	6921      	ldr	r1, [r4, #16]
   22356:	e7e3      	b.n	22320 <z_impl_k_mutex_lock+0x94>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   22358:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2235c:	f991 100e 	ldrsb.w	r1, [r1, #14]
   22360:	4299      	cmp	r1, r3
   22362:	bfa8      	it	ge
   22364:	4619      	movge	r1, r3
   22366:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   2236a:	4299      	cmp	r1, r3
   2236c:	da3e      	bge.n	223ec <z_impl_k_mutex_lock+0x160>
		return z_set_prio(mutex->owner, new_prio);
   2236e:	f001 f855 	bl	2341c <z_set_prio>
   22372:	4680      	mov	r8, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   22374:	e9cd 6700 	strd	r6, r7, [sp]
   22378:	4622      	mov	r2, r4
   2237a:	4629      	mov	r1, r5
   2237c:	482a      	ldr	r0, [pc, #168]	; (22428 <z_impl_k_mutex_lock+0x19c>)
   2237e:	f001 f827 	bl	233d0 <z_pend_curr>
	if (got_mutex == 0) {
   22382:	2800      	cmp	r0, #0
   22384:	d0e3      	beq.n	2234e <z_impl_k_mutex_lock+0xc2>
	__asm__ volatile(
   22386:	f04f 0320 	mov.w	r3, #32
   2238a:	f3ef 8511 	mrs	r5, BASEPRI
   2238e:	f383 8811 	msr	BASEPRI, r3
   22392:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22396:	4824      	ldr	r0, [pc, #144]	; (22428 <z_impl_k_mutex_lock+0x19c>)
   22398:	f001 fc86 	bl	23ca8 <z_spin_lock_valid>
   2239c:	b940      	cbnz	r0, 223b0 <z_impl_k_mutex_lock+0x124>
   2239e:	4923      	ldr	r1, [pc, #140]	; (2242c <z_impl_k_mutex_lock+0x1a0>)
   223a0:	4820      	ldr	r0, [pc, #128]	; (22424 <z_impl_k_mutex_lock+0x198>)
   223a2:	227c      	movs	r2, #124	; 0x7c
   223a4:	f004 fde3 	bl	26f6e <printk>
   223a8:	217c      	movs	r1, #124	; 0x7c
   223aa:	4820      	ldr	r0, [pc, #128]	; (2242c <z_impl_k_mutex_lock+0x1a0>)
   223ac:	f005 f858 	bl	27460 <assert_post_action>
	z_spin_lock_set_owner(l);
   223b0:	481d      	ldr	r0, [pc, #116]	; (22428 <z_impl_k_mutex_lock+0x19c>)
   223b2:	f001 fc97 	bl	23ce4 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   223b6:	6823      	ldr	r3, [r4, #0]
   223b8:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   223ba:	42a3      	cmp	r3, r4
   223bc:	d007      	beq.n	223ce <z_impl_k_mutex_lock+0x142>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   223be:	b133      	cbz	r3, 223ce <z_impl_k_mutex_lock+0x142>
   223c0:	f993 300e 	ldrsb.w	r3, [r3, #14]
   223c4:	4299      	cmp	r1, r3
   223c6:	bfa8      	it	ge
   223c8:	4619      	movge	r1, r3
   223ca:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   223ce:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   223d0:	f990 300e 	ldrsb.w	r3, [r0, #14]
   223d4:	4299      	cmp	r1, r3
   223d6:	d10c      	bne.n	223f2 <z_impl_k_mutex_lock+0x166>
	if (resched) {
   223d8:	f1b8 0f00 	cmp.w	r8, #0
   223dc:	d00e      	beq.n	223fc <z_impl_k_mutex_lock+0x170>
		z_reschedule(&lock, key);
   223de:	4629      	mov	r1, r5
   223e0:	4811      	ldr	r0, [pc, #68]	; (22428 <z_impl_k_mutex_lock+0x19c>)
   223e2:	f000 fab1 	bl	22948 <z_reschedule>
	return -EAGAIN;
   223e6:	f06f 000a 	mvn.w	r0, #10
   223ea:	e7b0      	b.n	2234e <z_impl_k_mutex_lock+0xc2>
	bool resched = false;
   223ec:	f04f 0800 	mov.w	r8, #0
   223f0:	e7c0      	b.n	22374 <z_impl_k_mutex_lock+0xe8>
		return z_set_prio(mutex->owner, new_prio);
   223f2:	f001 f813 	bl	2341c <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   223f6:	2800      	cmp	r0, #0
   223f8:	d1f1      	bne.n	223de <z_impl_k_mutex_lock+0x152>
   223fa:	e7ed      	b.n	223d8 <z_impl_k_mutex_lock+0x14c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   223fc:	480a      	ldr	r0, [pc, #40]	; (22428 <z_impl_k_mutex_lock+0x19c>)
   223fe:	f001 fc61 	bl	23cc4 <z_spin_unlock_valid>
   22402:	b940      	cbnz	r0, 22416 <z_impl_k_mutex_lock+0x18a>
   22404:	4909      	ldr	r1, [pc, #36]	; (2242c <z_impl_k_mutex_lock+0x1a0>)
   22406:	4807      	ldr	r0, [pc, #28]	; (22424 <z_impl_k_mutex_lock+0x198>)
   22408:	22a7      	movs	r2, #167	; 0xa7
   2240a:	f004 fdb0 	bl	26f6e <printk>
   2240e:	21a7      	movs	r1, #167	; 0xa7
   22410:	4806      	ldr	r0, [pc, #24]	; (2242c <z_impl_k_mutex_lock+0x1a0>)
   22412:	f005 f825 	bl	27460 <assert_post_action>
	__asm__ volatile(
   22416:	f385 8811 	msr	BASEPRI, r5
   2241a:	f3bf 8f6f 	isb	sy
   2241e:	e7e2      	b.n	223e6 <z_impl_k_mutex_lock+0x15a>
   22420:	00035bdd 	.word	0x00035bdd
   22424:	0002fa94 	.word	0x0002fa94
   22428:	20004600 	.word	0x20004600
   2242c:	0002fba8 	.word	0x0002fba8
   22430:	20004604 	.word	0x20004604

00022434 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   22434:	b538      	push	{r3, r4, r5, lr}
   22436:	4604      	mov	r4, r0
   22438:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   2243c:	b143      	cbz	r3, 22450 <z_impl_k_mutex_unlock+0x1c>
   2243e:	4948      	ldr	r1, [pc, #288]	; (22560 <z_impl_k_mutex_unlock+0x12c>)
   22440:	4848      	ldr	r0, [pc, #288]	; (22564 <z_impl_k_mutex_unlock+0x130>)
   22442:	22d8      	movs	r2, #216	; 0xd8
   22444:	f004 fd93 	bl	26f6e <printk>
   22448:	21d8      	movs	r1, #216	; 0xd8
   2244a:	4845      	ldr	r0, [pc, #276]	; (22560 <z_impl_k_mutex_unlock+0x12c>)
   2244c:	f005 f808 	bl	27460 <assert_post_action>

	CHECKIF(mutex->owner == NULL) {
   22450:	68a3      	ldr	r3, [r4, #8]
   22452:	2b00      	cmp	r3, #0
   22454:	d07d      	beq.n	22552 <z_impl_k_mutex_unlock+0x11e>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   22456:	4d44      	ldr	r5, [pc, #272]	; (22568 <z_impl_k_mutex_unlock+0x134>)
   22458:	68aa      	ldr	r2, [r5, #8]
   2245a:	4293      	cmp	r3, r2
   2245c:	d17c      	bne.n	22558 <z_impl_k_mutex_unlock+0x124>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   2245e:	68e3      	ldr	r3, [r4, #12]
   22460:	b943      	cbnz	r3, 22474 <z_impl_k_mutex_unlock+0x40>
   22462:	493f      	ldr	r1, [pc, #252]	; (22560 <z_impl_k_mutex_unlock+0x12c>)
   22464:	483f      	ldr	r0, [pc, #252]	; (22564 <z_impl_k_mutex_unlock+0x130>)
   22466:	22ea      	movs	r2, #234	; 0xea
   22468:	f004 fd81 	bl	26f6e <printk>
   2246c:	21ea      	movs	r1, #234	; 0xea
   2246e:	483c      	ldr	r0, [pc, #240]	; (22560 <z_impl_k_mutex_unlock+0x12c>)
   22470:	f004 fff6 	bl	27460 <assert_post_action>
   22474:	f3ef 8305 	mrs	r3, IPSR
}

static inline void z_sched_lock(void)
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
   22478:	b153      	cbz	r3, 22490 <z_impl_k_mutex_unlock+0x5c>
   2247a:	493c      	ldr	r1, [pc, #240]	; (2256c <z_impl_k_mutex_unlock+0x138>)
   2247c:	4839      	ldr	r0, [pc, #228]	; (22564 <z_impl_k_mutex_unlock+0x130>)
   2247e:	f44f 7289 	mov.w	r2, #274	; 0x112
   22482:	f004 fd74 	bl	26f6e <printk>
   22486:	f44f 7189 	mov.w	r1, #274	; 0x112
   2248a:	4838      	ldr	r0, [pc, #224]	; (2256c <z_impl_k_mutex_unlock+0x138>)
   2248c:	f004 ffe8 	bl	27460 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   22490:	68ab      	ldr	r3, [r5, #8]
   22492:	7bdb      	ldrb	r3, [r3, #15]
   22494:	2b01      	cmp	r3, #1
   22496:	d10a      	bne.n	224ae <z_impl_k_mutex_unlock+0x7a>
   22498:	4934      	ldr	r1, [pc, #208]	; (2256c <z_impl_k_mutex_unlock+0x138>)
   2249a:	4832      	ldr	r0, [pc, #200]	; (22564 <z_impl_k_mutex_unlock+0x130>)
   2249c:	f240 1213 	movw	r2, #275	; 0x113
   224a0:	f004 fd65 	bl	26f6e <printk>
   224a4:	f240 1113 	movw	r1, #275	; 0x113
   224a8:	4830      	ldr	r0, [pc, #192]	; (2256c <z_impl_k_mutex_unlock+0x138>)
   224aa:	f004 ffd9 	bl	27460 <assert_post_action>

	--_current->base.sched_locked;
   224ae:	68aa      	ldr	r2, [r5, #8]
   224b0:	7bd3      	ldrb	r3, [r2, #15]
   224b2:	3b01      	subs	r3, #1
   224b4:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   224b6:	68e3      	ldr	r3, [r4, #12]
   224b8:	2b01      	cmp	r3, #1
   224ba:	d005      	beq.n	224c8 <z_impl_k_mutex_unlock+0x94>
		mutex->lock_count--;
   224bc:	3b01      	subs	r3, #1
   224be:	60e3      	str	r3, [r4, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   224c0:	f000 fb70 	bl	22ba4 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   224c4:	2000      	movs	r0, #0
}
   224c6:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   224c8:	f04f 0320 	mov.w	r3, #32
   224cc:	f3ef 8511 	mrs	r5, BASEPRI
   224d0:	f383 8811 	msr	BASEPRI, r3
   224d4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   224d8:	4825      	ldr	r0, [pc, #148]	; (22570 <z_impl_k_mutex_unlock+0x13c>)
   224da:	f001 fbe5 	bl	23ca8 <z_spin_lock_valid>
   224de:	b940      	cbnz	r0, 224f2 <z_impl_k_mutex_unlock+0xbe>
   224e0:	4924      	ldr	r1, [pc, #144]	; (22574 <z_impl_k_mutex_unlock+0x140>)
   224e2:	4820      	ldr	r0, [pc, #128]	; (22564 <z_impl_k_mutex_unlock+0x130>)
   224e4:	227c      	movs	r2, #124	; 0x7c
   224e6:	f004 fd42 	bl	26f6e <printk>
   224ea:	217c      	movs	r1, #124	; 0x7c
   224ec:	4821      	ldr	r0, [pc, #132]	; (22574 <z_impl_k_mutex_unlock+0x140>)
   224ee:	f004 ffb7 	bl	27460 <assert_post_action>
	z_spin_lock_set_owner(l);
   224f2:	481f      	ldr	r0, [pc, #124]	; (22570 <z_impl_k_mutex_unlock+0x13c>)
   224f4:	f001 fbf6 	bl	23ce4 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   224f8:	68a0      	ldr	r0, [r4, #8]
   224fa:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
   224fc:	f990 300e 	ldrsb.w	r3, [r0, #14]
   22500:	4299      	cmp	r1, r3
   22502:	d001      	beq.n	22508 <z_impl_k_mutex_unlock+0xd4>
		return z_set_prio(mutex->owner, new_prio);
   22504:	f000 ff8a 	bl	2341c <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   22508:	4620      	mov	r0, r4
   2250a:	f001 f803 	bl	23514 <z_unpend_first_thread>
	mutex->owner = new_owner;
   2250e:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   22510:	b160      	cbz	r0, 2252c <z_impl_k_mutex_unlock+0xf8>
		mutex->owner_orig_prio = new_owner->base.prio;
   22512:	f990 200e 	ldrsb.w	r2, [r0, #14]
   22516:	6122      	str	r2, [r4, #16]
   22518:	2200      	movs	r2, #0
   2251a:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
		z_ready_thread(new_owner);
   2251e:	f000 fbe5 	bl	22cec <z_ready_thread>
		z_reschedule(&lock, key);
   22522:	4629      	mov	r1, r5
   22524:	4812      	ldr	r0, [pc, #72]	; (22570 <z_impl_k_mutex_unlock+0x13c>)
   22526:	f000 fa0f 	bl	22948 <z_reschedule>
   2252a:	e7c9      	b.n	224c0 <z_impl_k_mutex_unlock+0x8c>
		mutex->lock_count = 0U;
   2252c:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2252e:	4810      	ldr	r0, [pc, #64]	; (22570 <z_impl_k_mutex_unlock+0x13c>)
   22530:	f001 fbc8 	bl	23cc4 <z_spin_unlock_valid>
   22534:	b940      	cbnz	r0, 22548 <z_impl_k_mutex_unlock+0x114>
   22536:	490f      	ldr	r1, [pc, #60]	; (22574 <z_impl_k_mutex_unlock+0x140>)
   22538:	480a      	ldr	r0, [pc, #40]	; (22564 <z_impl_k_mutex_unlock+0x130>)
   2253a:	22a7      	movs	r2, #167	; 0xa7
   2253c:	f004 fd17 	bl	26f6e <printk>
   22540:	21a7      	movs	r1, #167	; 0xa7
   22542:	480c      	ldr	r0, [pc, #48]	; (22574 <z_impl_k_mutex_unlock+0x140>)
   22544:	f004 ff8c 	bl	27460 <assert_post_action>
	__asm__ volatile(
   22548:	f385 8811 	msr	BASEPRI, r5
   2254c:	f3bf 8f6f 	isb	sy
   22550:	e7b6      	b.n	224c0 <z_impl_k_mutex_unlock+0x8c>
		return -EINVAL;
   22552:	f06f 0015 	mvn.w	r0, #21
   22556:	e7b6      	b.n	224c6 <z_impl_k_mutex_unlock+0x92>
		return -EPERM;
   22558:	f04f 30ff 	mov.w	r0, #4294967295
   2255c:	e7b3      	b.n	224c6 <z_impl_k_mutex_unlock+0x92>
   2255e:	bf00      	nop
   22560:	00035bdd 	.word	0x00035bdd
   22564:	0002fa94 	.word	0x0002fa94
   22568:	20004604 	.word	0x20004604
   2256c:	00035bff 	.word	0x00035bff
   22570:	20004600 	.word	0x20004600
   22574:	0002fba8 	.word	0x0002fba8

00022578 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   22578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2257c:	4604      	mov	r4, r0
   2257e:	460e      	mov	r6, r1
   22580:	4690      	mov	r8, r2
   22582:	4699      	mov	r9, r3
   22584:	f89d a020 	ldrb.w	sl, [sp, #32]
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   22588:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   2258c:	f04f 0320 	mov.w	r3, #32
   22590:	f3ef 8711 	mrs	r7, BASEPRI
   22594:	f383 8811 	msr	BASEPRI, r3
   22598:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2259c:	4628      	mov	r0, r5
   2259e:	f001 fb83 	bl	23ca8 <z_spin_lock_valid>
   225a2:	b940      	cbnz	r0, 225b6 <queue_insert+0x3e>
   225a4:	4937      	ldr	r1, [pc, #220]	; (22684 <queue_insert+0x10c>)
   225a6:	4838      	ldr	r0, [pc, #224]	; (22688 <queue_insert+0x110>)
   225a8:	227c      	movs	r2, #124	; 0x7c
   225aa:	f004 fce0 	bl	26f6e <printk>
   225ae:	217c      	movs	r1, #124	; 0x7c
   225b0:	4834      	ldr	r0, [pc, #208]	; (22684 <queue_insert+0x10c>)
   225b2:	f004 ff55 	bl	27460 <assert_post_action>
	z_spin_lock_set_owner(l);
   225b6:	4628      	mov	r0, r5
   225b8:	f001 fb94 	bl	23ce4 <z_spin_lock_set_owner>

	if (is_append) {
   225bc:	f1ba 0f00 	cmp.w	sl, #0
   225c0:	d000      	beq.n	225c4 <queue_insert+0x4c>
		prev = sys_sflist_peek_tail(&queue->data_q);
   225c2:	6866      	ldr	r6, [r4, #4]
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   225c4:	f104 000c 	add.w	r0, r4, #12
   225c8:	f000 ffa4 	bl	23514 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   225cc:	b160      	cbz	r0, 225e8 <queue_insert+0x70>
   225ce:	2400      	movs	r4, #0
   225d0:	f8c0 4088 	str.w	r4, [r0, #136]	; 0x88
   225d4:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   225d8:	f000 fb88 	bl	22cec <z_ready_thread>
		sys_sfnode_init(data, 0x0);
	}

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   225dc:	4628      	mov	r0, r5
   225de:	4639      	mov	r1, r7
   225e0:	f000 f9b2 	bl	22948 <z_reschedule>
	return 0;
   225e4:	2000      	movs	r0, #0
   225e6:	e019      	b.n	2261c <queue_insert+0xa4>
	if (alloc) {
   225e8:	f1b9 0f00 	cmp.w	r9, #0
   225ec:	d028      	beq.n	22640 <queue_insert+0xc8>
	return z_thread_aligned_alloc(0, size);
   225ee:	2108      	movs	r1, #8
   225f0:	f002 face 	bl	24b90 <z_thread_aligned_alloc>
		if (anode == NULL) {
   225f4:	b9a0      	cbnz	r0, 22620 <queue_insert+0xa8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   225f6:	4628      	mov	r0, r5
   225f8:	f001 fb64 	bl	23cc4 <z_spin_unlock_valid>
   225fc:	b940      	cbnz	r0, 22610 <queue_insert+0x98>
   225fe:	4921      	ldr	r1, [pc, #132]	; (22684 <queue_insert+0x10c>)
   22600:	4821      	ldr	r0, [pc, #132]	; (22688 <queue_insert+0x110>)
   22602:	22a7      	movs	r2, #167	; 0xa7
   22604:	f004 fcb3 	bl	26f6e <printk>
   22608:	21a7      	movs	r1, #167	; 0xa7
   2260a:	481e      	ldr	r0, [pc, #120]	; (22684 <queue_insert+0x10c>)
   2260c:	f004 ff28 	bl	27460 <assert_post_action>
	__asm__ volatile(
   22610:	f387 8811 	msr	BASEPRI, r7
   22614:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   22618:	f06f 000b 	mvn.w	r0, #11
}
   2261c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   22620:	2301      	movs	r3, #1
		anode->data = data;
   22622:	f8c0 8004 	str.w	r8, [r0, #4]
   22626:	6003      	str	r3, [r0, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   22628:	6803      	ldr	r3, [r0, #0]
   2262a:	f003 0303 	and.w	r3, r3, #3
   2262e:	b95e      	cbnz	r6, 22648 <queue_insert+0xd0>
	parent->next_and_flags = cur_flags | (unative_t)child;
   22630:	6822      	ldr	r2, [r4, #0]
   22632:	4313      	orrs	r3, r2
   22634:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   22636:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   22638:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2263a:	b973      	cbnz	r3, 2265a <queue_insert+0xe2>
	list->tail = node;
   2263c:	6060      	str	r0, [r4, #4]
   2263e:	e00c      	b.n	2265a <queue_insert+0xe2>
	node->next_and_flags = flags;
   22640:	f8c8 9000 	str.w	r9, [r8]
   22644:	4640      	mov	r0, r8
   22646:	e7ef      	b.n	22628 <queue_insert+0xb0>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   22648:	6832      	ldr	r2, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   2264a:	f032 0203 	bics.w	r2, r2, #3
   2264e:	d110      	bne.n	22672 <queue_insert+0xfa>
Z_GENLIST_APPEND(sflist, sfnode)
   22650:	6862      	ldr	r2, [r4, #4]
	parent->next_and_flags = cur_flags | (unative_t)child;
   22652:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   22654:	b93a      	cbnz	r2, 22666 <queue_insert+0xee>
	list->head = node;
   22656:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   2265a:	2104      	movs	r1, #4
   2265c:	f104 0014 	add.w	r0, r4, #20
   22660:	f00a ff65 	bl	2d52e <z_handle_obj_poll_events>
   22664:	e7ba      	b.n	225dc <queue_insert+0x64>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   22666:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   22668:	f003 0303 	and.w	r3, r3, #3
   2266c:	4303      	orrs	r3, r0
   2266e:	6013      	str	r3, [r2, #0]
   22670:	e7e4      	b.n	2263c <queue_insert+0xc4>
   22672:	4313      	orrs	r3, r2
   22674:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   22676:	6833      	ldr	r3, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   22678:	f003 0303 	and.w	r3, r3, #3
   2267c:	4318      	orrs	r0, r3
   2267e:	6030      	str	r0, [r6, #0]
   22680:	e7eb      	b.n	2265a <queue_insert+0xe2>
   22682:	bf00      	nop
   22684:	0002fba8 	.word	0x0002fba8
   22688:	0002fa94 	.word	0x0002fa94

0002268c <z_impl_k_queue_cancel_wait>:
{
   2268c:	b570      	push	{r4, r5, r6, lr}
   2268e:	4605      	mov	r5, r0
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   22690:	f100 0408 	add.w	r4, r0, #8
	__asm__ volatile(
   22694:	f04f 0320 	mov.w	r3, #32
   22698:	f3ef 8611 	mrs	r6, BASEPRI
   2269c:	f383 8811 	msr	BASEPRI, r3
   226a0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   226a4:	4620      	mov	r0, r4
   226a6:	f001 faff 	bl	23ca8 <z_spin_lock_valid>
   226aa:	b940      	cbnz	r0, 226be <z_impl_k_queue_cancel_wait+0x32>
   226ac:	4910      	ldr	r1, [pc, #64]	; (226f0 <z_impl_k_queue_cancel_wait+0x64>)
   226ae:	4811      	ldr	r0, [pc, #68]	; (226f4 <z_impl_k_queue_cancel_wait+0x68>)
   226b0:	227c      	movs	r2, #124	; 0x7c
   226b2:	f004 fc5c 	bl	26f6e <printk>
   226b6:	217c      	movs	r1, #124	; 0x7c
   226b8:	480d      	ldr	r0, [pc, #52]	; (226f0 <z_impl_k_queue_cancel_wait+0x64>)
   226ba:	f004 fed1 	bl	27460 <assert_post_action>
	z_spin_lock_set_owner(l);
   226be:	4620      	mov	r0, r4
   226c0:	f001 fb10 	bl	23ce4 <z_spin_lock_set_owner>
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   226c4:	f105 000c 	add.w	r0, r5, #12
   226c8:	f000 ff24 	bl	23514 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   226cc:	b128      	cbz	r0, 226da <z_impl_k_queue_cancel_wait+0x4e>
   226ce:	2200      	movs	r2, #0
   226d0:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
	thread->base.swap_data = data;
   226d4:	6142      	str	r2, [r0, #20]
	z_ready_thread(thread);
   226d6:	f000 fb09 	bl	22cec <z_ready_thread>
	z_handle_obj_poll_events(&queue->poll_events, state);
   226da:	f105 0014 	add.w	r0, r5, #20
   226de:	2108      	movs	r1, #8
   226e0:	f00a ff25 	bl	2d52e <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   226e4:	4631      	mov	r1, r6
   226e6:	4620      	mov	r0, r4
}
   226e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&queue->lock, key);
   226ec:	f000 b92c 	b.w	22948 <z_reschedule>
   226f0:	0002fba8 	.word	0x0002fba8
   226f4:	0002fa94 	.word	0x0002fa94

000226f8 <k_queue_append_list>:
}
#include <syscalls/k_queue_alloc_prepend_mrsh.c>
#endif

int k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   226f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   226fc:	4605      	mov	r5, r0
   226fe:	4617      	mov	r7, r2
	/* invalid head or tail of list */
	CHECKIF(head == NULL || tail == NULL) {
   22700:	460c      	mov	r4, r1
   22702:	2900      	cmp	r1, #0
   22704:	d045      	beq.n	22792 <k_queue_append_list+0x9a>
   22706:	2a00      	cmp	r2, #0
   22708:	d043      	beq.n	22792 <k_queue_append_list+0x9a>
		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2270a:	f100 0608 	add.w	r6, r0, #8
   2270e:	f04f 0320 	mov.w	r3, #32
   22712:	f3ef 8811 	mrs	r8, BASEPRI
   22716:	f383 8811 	msr	BASEPRI, r3
   2271a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2271e:	4630      	mov	r0, r6
   22720:	f001 fac2 	bl	23ca8 <z_spin_lock_valid>
   22724:	b940      	cbnz	r0, 22738 <k_queue_append_list+0x40>
   22726:	491c      	ldr	r1, [pc, #112]	; (22798 <k_queue_append_list+0xa0>)
   22728:	481c      	ldr	r0, [pc, #112]	; (2279c <k_queue_append_list+0xa4>)
   2272a:	227c      	movs	r2, #124	; 0x7c
   2272c:	f004 fc1f 	bl	26f6e <printk>
   22730:	217c      	movs	r1, #124	; 0x7c
   22732:	4819      	ldr	r0, [pc, #100]	; (22798 <k_queue_append_list+0xa0>)
   22734:	f004 fe94 	bl	27460 <assert_post_action>
	z_spin_lock_set_owner(l);
   22738:	4630      	mov	r0, r6
	struct k_thread *thread = NULL;

	if (head != NULL) {
		thread = z_unpend_first_thread(&queue->wait_q);
   2273a:	f105 090c 	add.w	r9, r5, #12
   2273e:	f001 fad1 	bl	23ce4 <z_spin_lock_set_owner>
   22742:	4648      	mov	r0, r9
   22744:	f000 fee6 	bl	23514 <z_unpend_first_thread>
   22748:	f04f 0a00 	mov.w	sl, #0
	}

	while ((head != NULL) && (thread != NULL)) {
   2274c:	b920      	cbnz	r0, 22758 <k_queue_append_list+0x60>
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   2274e:	686a      	ldr	r2, [r5, #4]
   22750:	b9ca      	cbnz	r2, 22786 <k_queue_append_list+0x8e>
	list->head = node;
   22752:	602c      	str	r4, [r5, #0]
	list->tail = node;
   22754:	606f      	str	r7, [r5, #4]
   22756:	e00a      	b.n	2276e <k_queue_append_list+0x76>
   22758:	6144      	str	r4, [r0, #20]
   2275a:	f8c0 a088 	str.w	sl, [r0, #136]	; 0x88
	z_ready_thread(thread);
   2275e:	f000 fac5 	bl	22cec <z_ready_thread>
		prepare_thread_to_run(thread, head);
		head = *(void **)head;
   22762:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   22764:	4648      	mov	r0, r9
   22766:	f000 fed5 	bl	23514 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   2276a:	2c00      	cmp	r4, #0
   2276c:	d1ee      	bne.n	2274c <k_queue_append_list+0x54>
	z_handle_obj_poll_events(&queue->poll_events, state);
   2276e:	2104      	movs	r1, #4
   22770:	f105 0014 	add.w	r0, r5, #20
   22774:	f00a fedb 	bl	2d52e <z_handle_obj_poll_events>
	if (head != NULL) {
		sys_sflist_append_list(&queue->data_q, head, tail);
	}

	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   22778:	4630      	mov	r0, r6
   2277a:	4641      	mov	r1, r8
   2277c:	f000 f8e4 	bl	22948 <z_reschedule>
	return 0;
   22780:	2000      	movs	r0, #0
}
   22782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   22786:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   22788:	f003 0303 	and.w	r3, r3, #3
   2278c:	431c      	orrs	r4, r3
   2278e:	6014      	str	r4, [r2, #0]
   22790:	e7e0      	b.n	22754 <k_queue_append_list+0x5c>
		return -EINVAL;
   22792:	f06f 0015 	mvn.w	r0, #21
   22796:	e7f4      	b.n	22782 <k_queue_append_list+0x8a>
   22798:	0002fba8 	.word	0x0002fba8
   2279c:	0002fa94 	.word	0x0002fa94

000227a0 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   227a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   227a4:	4605      	mov	r5, r0
   227a6:	4690      	mov	r8, r2
   227a8:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   227aa:	f100 0608 	add.w	r6, r0, #8
   227ae:	f04f 0320 	mov.w	r3, #32
   227b2:	f3ef 8711 	mrs	r7, BASEPRI
   227b6:	f383 8811 	msr	BASEPRI, r3
   227ba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   227be:	4630      	mov	r0, r6
   227c0:	f001 fa72 	bl	23ca8 <z_spin_lock_valid>
   227c4:	b940      	cbnz	r0, 227d8 <z_impl_k_queue_get+0x38>
   227c6:	4920      	ldr	r1, [pc, #128]	; (22848 <z_impl_k_queue_get+0xa8>)
   227c8:	4820      	ldr	r0, [pc, #128]	; (2284c <z_impl_k_queue_get+0xac>)
   227ca:	227c      	movs	r2, #124	; 0x7c
   227cc:	f004 fbcf 	bl	26f6e <printk>
   227d0:	217c      	movs	r1, #124	; 0x7c
   227d2:	481d      	ldr	r0, [pc, #116]	; (22848 <z_impl_k_queue_get+0xa8>)
   227d4:	f004 fe44 	bl	27460 <assert_post_action>
	z_spin_lock_set_owner(l);
   227d8:	4630      	mov	r0, r6
   227da:	f001 fa83 	bl	23ce4 <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(sflist)
   227de:	682c      	ldr	r4, [r5, #0]
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   227e0:	b30c      	cbz	r4, 22826 <z_impl_k_queue_get+0x86>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   227e2:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   227e4:	686a      	ldr	r2, [r5, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   227e6:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   227ea:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   227ec:	4620      	mov	r0, r4
	list->head = node;
   227ee:	602b      	str	r3, [r5, #0]
	list->tail = node;
   227f0:	bf08      	it	eq
   227f2:	606b      	streq	r3, [r5, #4]
   227f4:	2101      	movs	r1, #1
   227f6:	f00a fd1e 	bl	2d236 <z_queue_node_peek>
   227fa:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   227fc:	4630      	mov	r0, r6
   227fe:	f001 fa61 	bl	23cc4 <z_spin_unlock_valid>
   22802:	b940      	cbnz	r0, 22816 <z_impl_k_queue_get+0x76>
   22804:	4910      	ldr	r1, [pc, #64]	; (22848 <z_impl_k_queue_get+0xa8>)
   22806:	4811      	ldr	r0, [pc, #68]	; (2284c <z_impl_k_queue_get+0xac>)
   22808:	22a7      	movs	r2, #167	; 0xa7
   2280a:	f004 fbb0 	bl	26f6e <printk>
   2280e:	21a7      	movs	r1, #167	; 0xa7
   22810:	480d      	ldr	r0, [pc, #52]	; (22848 <z_impl_k_queue_get+0xa8>)
   22812:	f004 fe25 	bl	27460 <assert_post_action>
	__asm__ volatile(
   22816:	f387 8811 	msr	BASEPRI, r7
   2281a:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   2281e:	4620      	mov	r0, r4
   22820:	b003      	add	sp, #12
   22822:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   22826:	ea58 0309 	orrs.w	r3, r8, r9
   2282a:	d0e7      	beq.n	227fc <z_impl_k_queue_get+0x5c>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   2282c:	e9cd 8900 	strd	r8, r9, [sp]
   22830:	f105 020c 	add.w	r2, r5, #12
   22834:	4639      	mov	r1, r7
   22836:	4630      	mov	r0, r6
   22838:	f000 fdca 	bl	233d0 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   2283c:	2800      	cmp	r0, #0
   2283e:	d1ee      	bne.n	2281e <z_impl_k_queue_get+0x7e>
   22840:	4b03      	ldr	r3, [pc, #12]	; (22850 <z_impl_k_queue_get+0xb0>)
   22842:	689b      	ldr	r3, [r3, #8]
   22844:	695c      	ldr	r4, [r3, #20]
   22846:	e7ea      	b.n	2281e <z_impl_k_queue_get+0x7e>
   22848:	0002fba8 	.word	0x0002fba8
   2284c:	0002fa94 	.word	0x0002fa94
   22850:	20004604 	.word	0x20004604

00022854 <pended_on.isra.19>:
#include <syscalls/k_thread_resume_mrsh.c>
#endif

static _wait_q_t *pended_on(struct k_thread *thread)
{
	__ASSERT_NO_MSG(thread->base.pended_on);
   22854:	6803      	ldr	r3, [r0, #0]
static _wait_q_t *pended_on(struct k_thread *thread)
   22856:	b510      	push	{r4, lr}
   22858:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   2285a:	b953      	cbnz	r3, 22872 <pended_on.isra.19+0x1e>
   2285c:	4906      	ldr	r1, [pc, #24]	; (22878 <pended_on.isra.19+0x24>)
   2285e:	4807      	ldr	r0, [pc, #28]	; (2287c <pended_on.isra.19+0x28>)
   22860:	f44f 7201 	mov.w	r2, #516	; 0x204
   22864:	f004 fb83 	bl	26f6e <printk>
   22868:	f44f 7101 	mov.w	r1, #516	; 0x204
   2286c:	4802      	ldr	r0, [pc, #8]	; (22878 <pended_on.isra.19+0x24>)
   2286e:	f004 fdf7 	bl	27460 <assert_post_action>

	return thread->base.pended_on;
}
   22872:	6820      	ldr	r0, [r4, #0]
   22874:	bd10      	pop	{r4, pc}
   22876:	bf00      	nop
   22878:	00035c2a 	.word	0x00035c2a
   2287c:	0002fa94 	.word	0x0002fa94

00022880 <z_reset_time_slice>:
{
   22880:	b510      	push	{r4, lr}
	if (slice_time != 0) {
   22882:	4c08      	ldr	r4, [pc, #32]	; (228a4 <z_reset_time_slice+0x24>)
   22884:	6823      	ldr	r3, [r4, #0]
   22886:	b15b      	cbz	r3, 228a0 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   22888:	f7e3 ff3a 	bl	6700 <z_clock_elapsed>
   2288c:	6823      	ldr	r3, [r4, #0]
   2288e:	4a06      	ldr	r2, [pc, #24]	; (228a8 <z_reset_time_slice+0x28>)
   22890:	4418      	add	r0, r3
   22892:	6150      	str	r0, [r2, #20]
		z_set_timeout_expiry(slice_time, false);
   22894:	2100      	movs	r1, #0
   22896:	4618      	mov	r0, r3
}
   22898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   2289c:	f001 bd28 	b.w	242f0 <z_set_timeout_expiry>
}
   228a0:	bd10      	pop	{r4, pc}
   228a2:	bf00      	nop
   228a4:	20004644 	.word	0x20004644
   228a8:	20004604 	.word	0x20004604

000228ac <k_sched_time_slice_set>:
{
   228ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   228ae:	4607      	mov	r7, r0
   228b0:	460d      	mov	r5, r1
	__asm__ volatile(
   228b2:	f04f 0320 	mov.w	r3, #32
   228b6:	f3ef 8411 	mrs	r4, BASEPRI
   228ba:	f383 8811 	msr	BASEPRI, r3
   228be:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   228c2:	481b      	ldr	r0, [pc, #108]	; (22930 <k_sched_time_slice_set+0x84>)
   228c4:	f001 f9f0 	bl	23ca8 <z_spin_lock_valid>
   228c8:	b940      	cbnz	r0, 228dc <k_sched_time_slice_set+0x30>
   228ca:	491a      	ldr	r1, [pc, #104]	; (22934 <k_sched_time_slice_set+0x88>)
   228cc:	481a      	ldr	r0, [pc, #104]	; (22938 <k_sched_time_slice_set+0x8c>)
   228ce:	227c      	movs	r2, #124	; 0x7c
   228d0:	f004 fb4d 	bl	26f6e <printk>
   228d4:	217c      	movs	r1, #124	; 0x7c
   228d6:	4817      	ldr	r0, [pc, #92]	; (22934 <k_sched_time_slice_set+0x88>)
   228d8:	f004 fdc2 	bl	27460 <assert_post_action>
	z_spin_lock_set_owner(l);
   228dc:	4814      	ldr	r0, [pc, #80]	; (22930 <k_sched_time_slice_set+0x84>)
   228de:	f001 fa01 	bl	23ce4 <z_spin_lock_set_owner>
		_current_cpu->slice_ticks = 0;
   228e2:	4b16      	ldr	r3, [pc, #88]	; (2293c <k_sched_time_slice_set+0x90>)
   228e4:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   228e6:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   228ea:	f240 30e7 	movw	r0, #999	; 0x3e7
   228ee:	2100      	movs	r1, #0
   228f0:	615a      	str	r2, [r3, #20]
   228f2:	fbe6 0107 	umlal	r0, r1, r6, r7
   228f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   228fa:	2300      	movs	r3, #0
   228fc:	f7df f896 	bl	1a2c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   22900:	4b0f      	ldr	r3, [pc, #60]	; (22940 <k_sched_time_slice_set+0x94>)
   22902:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   22904:	4b0f      	ldr	r3, [pc, #60]	; (22944 <k_sched_time_slice_set+0x98>)
   22906:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   22908:	f7ff ffba 	bl	22880 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2290c:	4808      	ldr	r0, [pc, #32]	; (22930 <k_sched_time_slice_set+0x84>)
   2290e:	f001 f9d9 	bl	23cc4 <z_spin_unlock_valid>
   22912:	b940      	cbnz	r0, 22926 <k_sched_time_slice_set+0x7a>
   22914:	4907      	ldr	r1, [pc, #28]	; (22934 <k_sched_time_slice_set+0x88>)
   22916:	4808      	ldr	r0, [pc, #32]	; (22938 <k_sched_time_slice_set+0x8c>)
   22918:	22a7      	movs	r2, #167	; 0xa7
   2291a:	f004 fb28 	bl	26f6e <printk>
   2291e:	21a7      	movs	r1, #167	; 0xa7
   22920:	4804      	ldr	r0, [pc, #16]	; (22934 <k_sched_time_slice_set+0x88>)
   22922:	f004 fd9d 	bl	27460 <assert_post_action>
	__asm__ volatile(
   22926:	f384 8811 	msr	BASEPRI, r4
   2292a:	f3bf 8f6f 	isb	sy
}
   2292e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22930:	2000463c 	.word	0x2000463c
   22934:	0002fba8 	.word	0x0002fba8
   22938:	0002fa94 	.word	0x0002fa94
   2293c:	20004604 	.word	0x20004604
   22940:	20004644 	.word	0x20004644
   22944:	20004640 	.word	0x20004640

00022948 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   22948:	b510      	push	{r4, lr}
   2294a:	4602      	mov	r2, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2294c:	460c      	mov	r4, r1
   2294e:	b9c1      	cbnz	r1, 22982 <z_reschedule+0x3a>
   22950:	f3ef 8305 	mrs	r3, IPSR
   22954:	b9ab      	cbnz	r3, 22982 <z_reschedule+0x3a>
	return _kernel.ready_q.cache;
   22956:	4b14      	ldr	r3, [pc, #80]	; (229a8 <z_reschedule+0x60>)
	if (resched(key.key) && need_swap()) {
   22958:	6a99      	ldr	r1, [r3, #40]	; 0x28
   2295a:	689b      	ldr	r3, [r3, #8]
   2295c:	4299      	cmp	r1, r3
   2295e:	d010      	beq.n	22982 <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22960:	f001 f9b0 	bl	23cc4 <z_spin_unlock_valid>
   22964:	b940      	cbnz	r0, 22978 <z_reschedule+0x30>
   22966:	4911      	ldr	r1, [pc, #68]	; (229ac <z_reschedule+0x64>)
   22968:	4811      	ldr	r0, [pc, #68]	; (229b0 <z_reschedule+0x68>)
   2296a:	22be      	movs	r2, #190	; 0xbe
   2296c:	f004 faff 	bl	26f6e <printk>
   22970:	21be      	movs	r1, #190	; 0xbe
   22972:	480e      	ldr	r0, [pc, #56]	; (229ac <z_reschedule+0x64>)
   22974:	f004 fd74 	bl	27460 <assert_post_action>
	ret = arch_swap(key);
   22978:	2000      	movs	r0, #0
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   2297a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2297e:	f7e4 b95d 	b.w	6c3c <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22982:	4610      	mov	r0, r2
   22984:	f001 f99e 	bl	23cc4 <z_spin_unlock_valid>
   22988:	b940      	cbnz	r0, 2299c <z_reschedule+0x54>
   2298a:	4908      	ldr	r1, [pc, #32]	; (229ac <z_reschedule+0x64>)
   2298c:	4808      	ldr	r0, [pc, #32]	; (229b0 <z_reschedule+0x68>)
   2298e:	22a7      	movs	r2, #167	; 0xa7
   22990:	f004 faed 	bl	26f6e <printk>
   22994:	21a7      	movs	r1, #167	; 0xa7
   22996:	4805      	ldr	r0, [pc, #20]	; (229ac <z_reschedule+0x64>)
   22998:	f004 fd62 	bl	27460 <assert_post_action>
   2299c:	f384 8811 	msr	BASEPRI, r4
   229a0:	f3bf 8f6f 	isb	sy
   229a4:	bd10      	pop	{r4, pc}
   229a6:	bf00      	nop
   229a8:	20004604 	.word	0x20004604
   229ac:	0002fba8 	.word	0x0002fba8
   229b0:	0002fa94 	.word	0x0002fa94

000229b4 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   229b4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   229b6:	f04f 0320 	mov.w	r3, #32
   229ba:	f3ef 8511 	mrs	r5, BASEPRI
   229be:	f383 8811 	msr	BASEPRI, r3
   229c2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   229c6:	4822      	ldr	r0, [pc, #136]	; (22a50 <k_sched_lock+0x9c>)
   229c8:	f001 f96e 	bl	23ca8 <z_spin_lock_valid>
   229cc:	b940      	cbnz	r0, 229e0 <k_sched_lock+0x2c>
   229ce:	4921      	ldr	r1, [pc, #132]	; (22a54 <k_sched_lock+0xa0>)
   229d0:	4821      	ldr	r0, [pc, #132]	; (22a58 <k_sched_lock+0xa4>)
   229d2:	227c      	movs	r2, #124	; 0x7c
   229d4:	f004 facb 	bl	26f6e <printk>
   229d8:	217c      	movs	r1, #124	; 0x7c
   229da:	481e      	ldr	r0, [pc, #120]	; (22a54 <k_sched_lock+0xa0>)
   229dc:	f004 fd40 	bl	27460 <assert_post_action>
	z_spin_lock_set_owner(l);
   229e0:	481b      	ldr	r0, [pc, #108]	; (22a50 <k_sched_lock+0x9c>)
   229e2:	f001 f97f 	bl	23ce4 <z_spin_lock_set_owner>
   229e6:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   229ea:	b153      	cbz	r3, 22a02 <k_sched_lock+0x4e>
   229ec:	491b      	ldr	r1, [pc, #108]	; (22a5c <k_sched_lock+0xa8>)
   229ee:	481a      	ldr	r0, [pc, #104]	; (22a58 <k_sched_lock+0xa4>)
   229f0:	f44f 7289 	mov.w	r2, #274	; 0x112
   229f4:	f004 fabb 	bl	26f6e <printk>
   229f8:	f44f 7189 	mov.w	r1, #274	; 0x112
   229fc:	4817      	ldr	r0, [pc, #92]	; (22a5c <k_sched_lock+0xa8>)
   229fe:	f004 fd2f 	bl	27460 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   22a02:	4c17      	ldr	r4, [pc, #92]	; (22a60 <k_sched_lock+0xac>)
   22a04:	68a2      	ldr	r2, [r4, #8]
   22a06:	7bd2      	ldrb	r2, [r2, #15]
   22a08:	2a01      	cmp	r2, #1
   22a0a:	d10a      	bne.n	22a22 <k_sched_lock+0x6e>
   22a0c:	4913      	ldr	r1, [pc, #76]	; (22a5c <k_sched_lock+0xa8>)
   22a0e:	4812      	ldr	r0, [pc, #72]	; (22a58 <k_sched_lock+0xa4>)
   22a10:	f240 1213 	movw	r2, #275	; 0x113
   22a14:	f004 faab 	bl	26f6e <printk>
   22a18:	f240 1113 	movw	r1, #275	; 0x113
   22a1c:	480f      	ldr	r0, [pc, #60]	; (22a5c <k_sched_lock+0xa8>)
   22a1e:	f004 fd1f 	bl	27460 <assert_post_action>
	--_current->base.sched_locked;
   22a22:	68a2      	ldr	r2, [r4, #8]
   22a24:	7bd3      	ldrb	r3, [r2, #15]
   22a26:	3b01      	subs	r3, #1
   22a28:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22a2a:	4809      	ldr	r0, [pc, #36]	; (22a50 <k_sched_lock+0x9c>)
   22a2c:	f001 f94a 	bl	23cc4 <z_spin_unlock_valid>
   22a30:	b940      	cbnz	r0, 22a44 <k_sched_lock+0x90>
   22a32:	4908      	ldr	r1, [pc, #32]	; (22a54 <k_sched_lock+0xa0>)
   22a34:	4808      	ldr	r0, [pc, #32]	; (22a58 <k_sched_lock+0xa4>)
   22a36:	22a7      	movs	r2, #167	; 0xa7
   22a38:	f004 fa99 	bl	26f6e <printk>
   22a3c:	21a7      	movs	r1, #167	; 0xa7
   22a3e:	4805      	ldr	r0, [pc, #20]	; (22a54 <k_sched_lock+0xa0>)
   22a40:	f004 fd0e 	bl	27460 <assert_post_action>
	__asm__ volatile(
   22a44:	f385 8811 	msr	BASEPRI, r5
   22a48:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   22a4c:	bd38      	pop	{r3, r4, r5, pc}
   22a4e:	bf00      	nop
   22a50:	2000463c 	.word	0x2000463c
   22a54:	0002fba8 	.word	0x0002fba8
   22a58:	0002fa94 	.word	0x0002fa94
   22a5c:	00035bff 	.word	0x00035bff
   22a60:	20004604 	.word	0x20004604

00022a64 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   22a64:	4b11      	ldr	r3, [pc, #68]	; (22aac <z_priq_dumb_remove+0x48>)
   22a66:	f103 022c 	add.w	r2, r3, #44	; 0x2c
   22a6a:	4282      	cmp	r2, r0
{
   22a6c:	b510      	push	{r4, lr}
   22a6e:	460c      	mov	r4, r1
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   22a70:	d105      	bne.n	22a7e <z_priq_dumb_remove+0x1a>
   22a72:	689b      	ldr	r3, [r3, #8]
   22a74:	428b      	cmp	r3, r1
   22a76:	d102      	bne.n	22a7e <z_priq_dumb_remove+0x1a>
   22a78:	7b4b      	ldrb	r3, [r1, #13]
   22a7a:	06db      	lsls	r3, r3, #27
   22a7c:	d114      	bne.n	22aa8 <z_priq_dumb_remove+0x44>
	    z_is_thread_prevented_from_running(thread)) {
		return;
	}
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   22a7e:	4b0c      	ldr	r3, [pc, #48]	; (22ab0 <z_priq_dumb_remove+0x4c>)
   22a80:	429c      	cmp	r4, r3
   22a82:	d10a      	bne.n	22a9a <z_priq_dumb_remove+0x36>
   22a84:	490b      	ldr	r1, [pc, #44]	; (22ab4 <z_priq_dumb_remove+0x50>)
   22a86:	480c      	ldr	r0, [pc, #48]	; (22ab8 <z_priq_dumb_remove+0x54>)
   22a88:	f240 32da 	movw	r2, #986	; 0x3da
   22a8c:	f004 fa6f 	bl	26f6e <printk>
   22a90:	f240 31da 	movw	r1, #986	; 0x3da
   22a94:	4807      	ldr	r0, [pc, #28]	; (22ab4 <z_priq_dumb_remove+0x50>)
   22a96:	f004 fce3 	bl	27460 <assert_post_action>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   22a9a:	e9d4 3200 	ldrd	r3, r2, [r4]
   22a9e:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   22aa0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   22aa2:	2300      	movs	r3, #0
	node->prev = NULL;
   22aa4:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   22aa8:	bd10      	pop	{r4, pc}
   22aaa:	bf00      	nop
   22aac:	20004604 	.word	0x20004604
   22ab0:	20002370 	.word	0x20002370
   22ab4:	00035c2a 	.word	0x00035c2a
   22ab8:	0002fa94 	.word	0x0002fa94

00022abc <z_unpend_thread>:
{
   22abc:	b538      	push	{r3, r4, r5, lr}
   22abe:	4604      	mov	r4, r0
	__asm__ volatile(
   22ac0:	f04f 0320 	mov.w	r3, #32
   22ac4:	f3ef 8511 	mrs	r5, BASEPRI
   22ac8:	f383 8811 	msr	BASEPRI, r3
   22acc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22ad0:	4814      	ldr	r0, [pc, #80]	; (22b24 <z_unpend_thread+0x68>)
   22ad2:	f001 f8e9 	bl	23ca8 <z_spin_lock_valid>
   22ad6:	b940      	cbnz	r0, 22aea <z_unpend_thread+0x2e>
   22ad8:	4913      	ldr	r1, [pc, #76]	; (22b28 <z_unpend_thread+0x6c>)
   22ada:	4814      	ldr	r0, [pc, #80]	; (22b2c <z_unpend_thread+0x70>)
   22adc:	227c      	movs	r2, #124	; 0x7c
   22ade:	f004 fa46 	bl	26f6e <printk>
   22ae2:	217c      	movs	r1, #124	; 0x7c
   22ae4:	4810      	ldr	r0, [pc, #64]	; (22b28 <z_unpend_thread+0x6c>)
   22ae6:	f004 fcbb 	bl	27460 <assert_post_action>
	z_spin_lock_set_owner(l);
   22aea:	480e      	ldr	r0, [pc, #56]	; (22b24 <z_unpend_thread+0x68>)
   22aec:	f001 f8fa 	bl	23ce4 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   22af0:	4620      	mov	r0, r4
   22af2:	f00a fbed 	bl	2d2d0 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22af6:	480b      	ldr	r0, [pc, #44]	; (22b24 <z_unpend_thread+0x68>)
   22af8:	f001 f8e4 	bl	23cc4 <z_spin_unlock_valid>
   22afc:	b940      	cbnz	r0, 22b10 <z_unpend_thread+0x54>
   22afe:	490a      	ldr	r1, [pc, #40]	; (22b28 <z_unpend_thread+0x6c>)
   22b00:	480a      	ldr	r0, [pc, #40]	; (22b2c <z_unpend_thread+0x70>)
   22b02:	22a7      	movs	r2, #167	; 0xa7
   22b04:	f004 fa33 	bl	26f6e <printk>
   22b08:	21a7      	movs	r1, #167	; 0xa7
   22b0a:	4807      	ldr	r0, [pc, #28]	; (22b28 <z_unpend_thread+0x6c>)
   22b0c:	f004 fca8 	bl	27460 <assert_post_action>
	__asm__ volatile(
   22b10:	f385 8811 	msr	BASEPRI, r5
   22b14:	f3bf 8f6f 	isb	sy
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   22b18:	f104 0018 	add.w	r0, r4, #24
}
   22b1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   22b20:	f001 bb3a 	b.w	24198 <z_abort_timeout>
   22b24:	2000463c 	.word	0x2000463c
   22b28:	0002fba8 	.word	0x0002fba8
   22b2c:	0002fa94 	.word	0x0002fa94

00022b30 <update_cache>:
{
   22b30:	b538      	push	{r3, r4, r5, lr}
   22b32:	4c19      	ldr	r4, [pc, #100]	; (22b98 <update_cache+0x68>)
	if (_current_cpu->pending_abort != NULL) {
   22b34:	6923      	ldr	r3, [r4, #16]
   22b36:	68a2      	ldr	r2, [r4, #8]
{
   22b38:	4601      	mov	r1, r0
	if (_current_cpu->pending_abort != NULL) {
   22b3a:	b143      	cbz	r3, 22b4e <update_cache+0x1e>
		return _current_cpu->idle_thread;
   22b3c:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   22b3e:	b1a8      	cbz	r0, 22b6c <update_cache+0x3c>
		if (thread != _current) {
   22b40:	68a3      	ldr	r3, [r4, #8]
   22b42:	42ab      	cmp	r3, r5
   22b44:	d001      	beq.n	22b4a <update_cache+0x1a>
			z_reset_time_slice();
   22b46:	f7ff fe9b 	bl	22880 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   22b4a:	62a5      	str	r5, [r4, #40]	; 0x28
}
   22b4c:	e023      	b.n	22b96 <update_cache+0x66>
	thread = _priq_run_best(&_kernel.ready_q.runq);
   22b4e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   22b52:	f00a fbcc 	bl	2d2ee <z_priq_dumb_best>
	if (_current->base.thread_state & _THREAD_ABORTING) {
   22b56:	7b53      	ldrb	r3, [r2, #13]
	thread = _priq_run_best(&_kernel.ready_q.runq);
   22b58:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   22b5a:	0698      	lsls	r0, r3, #26
		_current->base.thread_state |= _THREAD_DEAD;
   22b5c:	bf44      	itt	mi
   22b5e:	f043 0308 	orrmi.w	r3, r3, #8
   22b62:	7353      	strbmi	r3, [r2, #13]
	return thread ? thread : _current_cpu->idle_thread;
   22b64:	b905      	cbnz	r5, 22b68 <update_cache+0x38>
   22b66:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   22b68:	b151      	cbz	r1, 22b80 <update_cache+0x50>
   22b6a:	e7e9      	b.n	22b40 <update_cache+0x10>
	__ASSERT(_current != NULL, "");
   22b6c:	b942      	cbnz	r2, 22b80 <update_cache+0x50>
   22b6e:	490b      	ldr	r1, [pc, #44]	; (22b9c <update_cache+0x6c>)
   22b70:	480b      	ldr	r0, [pc, #44]	; (22ba0 <update_cache+0x70>)
   22b72:	2283      	movs	r2, #131	; 0x83
   22b74:	f004 f9fb 	bl	26f6e <printk>
   22b78:	2183      	movs	r1, #131	; 0x83
   22b7a:	4808      	ldr	r0, [pc, #32]	; (22b9c <update_cache+0x6c>)
   22b7c:	f004 fc70 	bl	27460 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   22b80:	68a3      	ldr	r3, [r4, #8]
   22b82:	7b5a      	ldrb	r2, [r3, #13]
   22b84:	06d2      	lsls	r2, r2, #27
   22b86:	d1db      	bne.n	22b40 <update_cache+0x10>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   22b88:	69aa      	ldr	r2, [r5, #24]
   22b8a:	2a00      	cmp	r2, #0
   22b8c:	d1d8      	bne.n	22b40 <update_cache+0x10>
	if (is_preempt(_current) || is_metairq(thread)) {
   22b8e:	89da      	ldrh	r2, [r3, #14]
   22b90:	2a7f      	cmp	r2, #127	; 0x7f
   22b92:	d9d5      	bls.n	22b40 <update_cache+0x10>
		_kernel.ready_q.cache = _current;
   22b94:	62a3      	str	r3, [r4, #40]	; 0x28
}
   22b96:	bd38      	pop	{r3, r4, r5, pc}
   22b98:	20004604 	.word	0x20004604
   22b9c:	00035c2a 	.word	0x00035c2a
   22ba0:	0002fa94 	.word	0x0002fa94

00022ba4 <k_sched_unlock>:
{
   22ba4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   22ba6:	f04f 0320 	mov.w	r3, #32
   22baa:	f3ef 8511 	mrs	r5, BASEPRI
   22bae:	f383 8811 	msr	BASEPRI, r3
   22bb2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22bb6:	4824      	ldr	r0, [pc, #144]	; (22c48 <k_sched_unlock+0xa4>)
   22bb8:	f001 f876 	bl	23ca8 <z_spin_lock_valid>
   22bbc:	b940      	cbnz	r0, 22bd0 <k_sched_unlock+0x2c>
   22bbe:	4923      	ldr	r1, [pc, #140]	; (22c4c <k_sched_unlock+0xa8>)
   22bc0:	4823      	ldr	r0, [pc, #140]	; (22c50 <k_sched_unlock+0xac>)
   22bc2:	227c      	movs	r2, #124	; 0x7c
   22bc4:	f004 f9d3 	bl	26f6e <printk>
   22bc8:	217c      	movs	r1, #124	; 0x7c
   22bca:	4820      	ldr	r0, [pc, #128]	; (22c4c <k_sched_unlock+0xa8>)
   22bcc:	f004 fc48 	bl	27460 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0, "");
   22bd0:	4c20      	ldr	r4, [pc, #128]	; (22c54 <k_sched_unlock+0xb0>)
	z_spin_lock_set_owner(l);
   22bd2:	481d      	ldr	r0, [pc, #116]	; (22c48 <k_sched_unlock+0xa4>)
   22bd4:	f001 f886 	bl	23ce4 <z_spin_lock_set_owner>
   22bd8:	68a2      	ldr	r2, [r4, #8]
   22bda:	7bd2      	ldrb	r2, [r2, #15]
   22bdc:	b952      	cbnz	r2, 22bf4 <k_sched_unlock+0x50>
   22bde:	491e      	ldr	r1, [pc, #120]	; (22c58 <k_sched_unlock+0xb4>)
   22be0:	481b      	ldr	r0, [pc, #108]	; (22c50 <k_sched_unlock+0xac>)
   22be2:	f44f 725d 	mov.w	r2, #884	; 0x374
   22be6:	f004 f9c2 	bl	26f6e <printk>
   22bea:	f44f 715d 	mov.w	r1, #884	; 0x374
   22bee:	481a      	ldr	r0, [pc, #104]	; (22c58 <k_sched_unlock+0xb4>)
   22bf0:	f004 fc36 	bl	27460 <assert_post_action>
   22bf4:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   22bf8:	b153      	cbz	r3, 22c10 <k_sched_unlock+0x6c>
   22bfa:	4917      	ldr	r1, [pc, #92]	; (22c58 <k_sched_unlock+0xb4>)
   22bfc:	4814      	ldr	r0, [pc, #80]	; (22c50 <k_sched_unlock+0xac>)
   22bfe:	f240 3275 	movw	r2, #885	; 0x375
   22c02:	f004 f9b4 	bl	26f6e <printk>
   22c06:	f240 3175 	movw	r1, #885	; 0x375
   22c0a:	4813      	ldr	r0, [pc, #76]	; (22c58 <k_sched_unlock+0xb4>)
   22c0c:	f004 fc28 	bl	27460 <assert_post_action>
		++_current->base.sched_locked;
   22c10:	68a2      	ldr	r2, [r4, #8]
   22c12:	7bd3      	ldrb	r3, [r2, #15]
   22c14:	3301      	adds	r3, #1
		update_cache(0);
   22c16:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   22c18:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   22c1a:	f7ff ff89 	bl	22b30 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22c1e:	480a      	ldr	r0, [pc, #40]	; (22c48 <k_sched_unlock+0xa4>)
   22c20:	f001 f850 	bl	23cc4 <z_spin_unlock_valid>
   22c24:	b940      	cbnz	r0, 22c38 <k_sched_unlock+0x94>
   22c26:	4909      	ldr	r1, [pc, #36]	; (22c4c <k_sched_unlock+0xa8>)
   22c28:	4809      	ldr	r0, [pc, #36]	; (22c50 <k_sched_unlock+0xac>)
   22c2a:	22a7      	movs	r2, #167	; 0xa7
   22c2c:	f004 f99f 	bl	26f6e <printk>
   22c30:	21a7      	movs	r1, #167	; 0xa7
   22c32:	4806      	ldr	r0, [pc, #24]	; (22c4c <k_sched_unlock+0xa8>)
   22c34:	f004 fc14 	bl	27460 <assert_post_action>
	__asm__ volatile(
   22c38:	f385 8811 	msr	BASEPRI, r5
   22c3c:	f3bf 8f6f 	isb	sy
}
   22c40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   22c44:	f00a bb3a 	b.w	2d2bc <z_reschedule_unlocked>
   22c48:	2000463c 	.word	0x2000463c
   22c4c:	0002fba8 	.word	0x0002fba8
   22c50:	0002fa94 	.word	0x0002fa94
   22c54:	20004604 	.word	0x20004604
   22c58:	00035c2a 	.word	0x00035c2a

00022c5c <ready_thread>:
{
   22c5c:	b570      	push	{r4, r5, r6, lr}
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   22c5e:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   22c60:	061a      	lsls	r2, r3, #24
{
   22c62:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   22c64:	d439      	bmi.n	22cda <ready_thread+0x7e>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   22c66:	06db      	lsls	r3, r3, #27
   22c68:	d137      	bne.n	22cda <ready_thread+0x7e>
   22c6a:	6983      	ldr	r3, [r0, #24]
   22c6c:	2b00      	cmp	r3, #0
   22c6e:	d134      	bne.n	22cda <ready_thread+0x7e>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   22c70:	4b1a      	ldr	r3, [pc, #104]	; (22cdc <ready_thread+0x80>)
   22c72:	4298      	cmp	r0, r3
   22c74:	d10a      	bne.n	22c8c <ready_thread+0x30>
   22c76:	491a      	ldr	r1, [pc, #104]	; (22ce0 <ready_thread+0x84>)
   22c78:	481a      	ldr	r0, [pc, #104]	; (22ce4 <ready_thread+0x88>)
   22c7a:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   22c7e:	f004 f976 	bl	26f6e <printk>
   22c82:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   22c86:	4816      	ldr	r0, [pc, #88]	; (22ce0 <ready_thread+0x84>)
   22c88:	f004 fbea 	bl	27460 <assert_post_action>
	return list->head == list;
   22c8c:	4a16      	ldr	r2, [pc, #88]	; (22ce8 <ready_thread+0x8c>)
   22c8e:	e9d2 300b 	ldrd	r3, r0, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22c92:	f102 012c 	add.w	r1, r2, #44	; 0x2c
   22c96:	428b      	cmp	r3, r1
   22c98:	d019      	beq.n	22cce <ready_thread+0x72>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22c9a:	b1c3      	cbz	r3, 22cce <ready_thread+0x72>
	if (thread_1->base.prio < thread_2->base.prio) {
   22c9c:	f994 500e 	ldrsb.w	r5, [r4, #14]
   22ca0:	f993 600e 	ldrsb.w	r6, [r3, #14]
   22ca4:	42ae      	cmp	r6, r5
   22ca6:	dd0d      	ble.n	22cc4 <ready_thread+0x68>
	node->prev = successor->prev;
   22ca8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   22caa:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   22cae:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   22cb0:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   22cb2:	7b63      	ldrb	r3, [r4, #13]
   22cb4:	f063 037f 	orn	r3, r3, #127	; 0x7f
   22cb8:	7363      	strb	r3, [r4, #13]
		update_cache(0);
   22cba:	2000      	movs	r0, #0
}
   22cbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   22cc0:	f7ff bf36 	b.w	22b30 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   22cc4:	4298      	cmp	r0, r3
   22cc6:	d002      	beq.n	22cce <ready_thread+0x72>
   22cc8:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22cca:	2b00      	cmp	r3, #0
   22ccc:	d1e8      	bne.n	22ca0 <ready_thread+0x44>
	node->prev = list->tail;
   22cce:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   22cd2:	6b13      	ldr	r3, [r2, #48]	; 0x30
   22cd4:	601c      	str	r4, [r3, #0]
	list->tail = node;
   22cd6:	6314      	str	r4, [r2, #48]	; 0x30
   22cd8:	e7eb      	b.n	22cb2 <ready_thread+0x56>
}
   22cda:	bd70      	pop	{r4, r5, r6, pc}
   22cdc:	20002370 	.word	0x20002370
   22ce0:	00035c2a 	.word	0x00035c2a
   22ce4:	0002fa94 	.word	0x0002fa94
   22ce8:	20004604 	.word	0x20004604

00022cec <z_ready_thread>:
{
   22cec:	b538      	push	{r3, r4, r5, lr}
   22cee:	4605      	mov	r5, r0
	__asm__ volatile(
   22cf0:	f04f 0320 	mov.w	r3, #32
   22cf4:	f3ef 8411 	mrs	r4, BASEPRI
   22cf8:	f383 8811 	msr	BASEPRI, r3
   22cfc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22d00:	4812      	ldr	r0, [pc, #72]	; (22d4c <z_ready_thread+0x60>)
   22d02:	f000 ffd1 	bl	23ca8 <z_spin_lock_valid>
   22d06:	b940      	cbnz	r0, 22d1a <z_ready_thread+0x2e>
   22d08:	4911      	ldr	r1, [pc, #68]	; (22d50 <z_ready_thread+0x64>)
   22d0a:	4812      	ldr	r0, [pc, #72]	; (22d54 <z_ready_thread+0x68>)
   22d0c:	227c      	movs	r2, #124	; 0x7c
   22d0e:	f004 f92e 	bl	26f6e <printk>
   22d12:	217c      	movs	r1, #124	; 0x7c
   22d14:	480e      	ldr	r0, [pc, #56]	; (22d50 <z_ready_thread+0x64>)
   22d16:	f004 fba3 	bl	27460 <assert_post_action>
	z_spin_lock_set_owner(l);
   22d1a:	480c      	ldr	r0, [pc, #48]	; (22d4c <z_ready_thread+0x60>)
   22d1c:	f000 ffe2 	bl	23ce4 <z_spin_lock_set_owner>
		ready_thread(thread);
   22d20:	4628      	mov	r0, r5
   22d22:	f7ff ff9b 	bl	22c5c <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22d26:	4809      	ldr	r0, [pc, #36]	; (22d4c <z_ready_thread+0x60>)
   22d28:	f000 ffcc 	bl	23cc4 <z_spin_unlock_valid>
   22d2c:	b940      	cbnz	r0, 22d40 <z_ready_thread+0x54>
   22d2e:	4908      	ldr	r1, [pc, #32]	; (22d50 <z_ready_thread+0x64>)
   22d30:	4808      	ldr	r0, [pc, #32]	; (22d54 <z_ready_thread+0x68>)
   22d32:	22a7      	movs	r2, #167	; 0xa7
   22d34:	f004 f91b 	bl	26f6e <printk>
   22d38:	21a7      	movs	r1, #167	; 0xa7
   22d3a:	4805      	ldr	r0, [pc, #20]	; (22d50 <z_ready_thread+0x64>)
   22d3c:	f004 fb90 	bl	27460 <assert_post_action>
	__asm__ volatile(
   22d40:	f384 8811 	msr	BASEPRI, r4
   22d44:	f3bf 8f6f 	isb	sy
}
   22d48:	bd38      	pop	{r3, r4, r5, pc}
   22d4a:	bf00      	nop
   22d4c:	2000463c 	.word	0x2000463c
   22d50:	0002fba8 	.word	0x0002fba8
   22d54:	0002fa94 	.word	0x0002fa94

00022d58 <z_sched_start>:
{
   22d58:	b538      	push	{r3, r4, r5, lr}
   22d5a:	4604      	mov	r4, r0
	__asm__ volatile(
   22d5c:	f04f 0320 	mov.w	r3, #32
   22d60:	f3ef 8511 	mrs	r5, BASEPRI
   22d64:	f383 8811 	msr	BASEPRI, r3
   22d68:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22d6c:	4818      	ldr	r0, [pc, #96]	; (22dd0 <z_sched_start+0x78>)
   22d6e:	f000 ff9b 	bl	23ca8 <z_spin_lock_valid>
   22d72:	b940      	cbnz	r0, 22d86 <z_sched_start+0x2e>
   22d74:	4917      	ldr	r1, [pc, #92]	; (22dd4 <z_sched_start+0x7c>)
   22d76:	4818      	ldr	r0, [pc, #96]	; (22dd8 <z_sched_start+0x80>)
   22d78:	227c      	movs	r2, #124	; 0x7c
   22d7a:	f004 f8f8 	bl	26f6e <printk>
   22d7e:	217c      	movs	r1, #124	; 0x7c
   22d80:	4814      	ldr	r0, [pc, #80]	; (22dd4 <z_sched_start+0x7c>)
   22d82:	f004 fb6d 	bl	27460 <assert_post_action>
	z_spin_lock_set_owner(l);
   22d86:	4812      	ldr	r0, [pc, #72]	; (22dd0 <z_sched_start+0x78>)
   22d88:	f000 ffac 	bl	23ce4 <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
   22d8c:	7b63      	ldrb	r3, [r4, #13]
   22d8e:	075a      	lsls	r2, r3, #29
   22d90:	d411      	bmi.n	22db6 <z_sched_start+0x5e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22d92:	480f      	ldr	r0, [pc, #60]	; (22dd0 <z_sched_start+0x78>)
   22d94:	f000 ff96 	bl	23cc4 <z_spin_unlock_valid>
   22d98:	b940      	cbnz	r0, 22dac <z_sched_start+0x54>
   22d9a:	490e      	ldr	r1, [pc, #56]	; (22dd4 <z_sched_start+0x7c>)
   22d9c:	480e      	ldr	r0, [pc, #56]	; (22dd8 <z_sched_start+0x80>)
   22d9e:	22a7      	movs	r2, #167	; 0xa7
   22da0:	f004 f8e5 	bl	26f6e <printk>
   22da4:	21a7      	movs	r1, #167	; 0xa7
   22da6:	480b      	ldr	r0, [pc, #44]	; (22dd4 <z_sched_start+0x7c>)
   22da8:	f004 fb5a 	bl	27460 <assert_post_action>
	__asm__ volatile(
   22dac:	f385 8811 	msr	BASEPRI, r5
   22db0:	f3bf 8f6f 	isb	sy
}
   22db4:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   22db6:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   22dba:	4620      	mov	r0, r4
   22dbc:	7363      	strb	r3, [r4, #13]
   22dbe:	f7ff ff4d 	bl	22c5c <ready_thread>
	z_reschedule(&sched_spinlock, key);
   22dc2:	4629      	mov	r1, r5
   22dc4:	4802      	ldr	r0, [pc, #8]	; (22dd0 <z_sched_start+0x78>)
}
   22dc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   22dca:	f7ff bdbd 	b.w	22948 <z_reschedule>
   22dce:	bf00      	nop
   22dd0:	2000463c 	.word	0x2000463c
   22dd4:	0002fba8 	.word	0x0002fba8
   22dd8:	0002fa94 	.word	0x0002fa94

00022ddc <z_thread_timeout>:
{
   22ddc:	b570      	push	{r4, r5, r6, lr}
   22dde:	4604      	mov	r4, r0
	__asm__ volatile(
   22de0:	f04f 0320 	mov.w	r3, #32
   22de4:	f3ef 8611 	mrs	r6, BASEPRI
   22de8:	f383 8811 	msr	BASEPRI, r3
   22dec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22df0:	4819      	ldr	r0, [pc, #100]	; (22e58 <z_thread_timeout+0x7c>)
   22df2:	f000 ff59 	bl	23ca8 <z_spin_lock_valid>
   22df6:	b940      	cbnz	r0, 22e0a <z_thread_timeout+0x2e>
   22df8:	4918      	ldr	r1, [pc, #96]	; (22e5c <z_thread_timeout+0x80>)
   22dfa:	4819      	ldr	r0, [pc, #100]	; (22e60 <z_thread_timeout+0x84>)
   22dfc:	227c      	movs	r2, #124	; 0x7c
   22dfe:	f004 f8b6 	bl	26f6e <printk>
   22e02:	217c      	movs	r1, #124	; 0x7c
   22e04:	4815      	ldr	r0, [pc, #84]	; (22e5c <z_thread_timeout+0x80>)
   22e06:	f004 fb2b 	bl	27460 <assert_post_action>
	z_spin_lock_set_owner(l);
   22e0a:	4813      	ldr	r0, [pc, #76]	; (22e58 <z_thread_timeout+0x7c>)
   22e0c:	f000 ff6a 	bl	23ce4 <z_spin_lock_set_owner>
		if (thread->base.pended_on != NULL) {
   22e10:	f854 3c10 	ldr.w	r3, [r4, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
   22e14:	f1a4 0518 	sub.w	r5, r4, #24
		if (thread->base.pended_on != NULL) {
   22e18:	b113      	cbz	r3, 22e20 <z_thread_timeout+0x44>
			unpend_thread_no_timeout(thread);
   22e1a:	4628      	mov	r0, r5
   22e1c:	f00a fa58 	bl	2d2d0 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   22e20:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   22e24:	f023 0314 	bic.w	r3, r3, #20
		ready_thread(thread);
   22e28:	4628      	mov	r0, r5
   22e2a:	f804 3c0b 	strb.w	r3, [r4, #-11]
   22e2e:	f7ff ff15 	bl	22c5c <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22e32:	4809      	ldr	r0, [pc, #36]	; (22e58 <z_thread_timeout+0x7c>)
   22e34:	f000 ff46 	bl	23cc4 <z_spin_unlock_valid>
   22e38:	b940      	cbnz	r0, 22e4c <z_thread_timeout+0x70>
   22e3a:	4908      	ldr	r1, [pc, #32]	; (22e5c <z_thread_timeout+0x80>)
   22e3c:	4808      	ldr	r0, [pc, #32]	; (22e60 <z_thread_timeout+0x84>)
   22e3e:	22a7      	movs	r2, #167	; 0xa7
   22e40:	f004 f895 	bl	26f6e <printk>
   22e44:	21a7      	movs	r1, #167	; 0xa7
   22e46:	4805      	ldr	r0, [pc, #20]	; (22e5c <z_thread_timeout+0x80>)
   22e48:	f004 fb0a 	bl	27460 <assert_post_action>
	__asm__ volatile(
   22e4c:	f386 8811 	msr	BASEPRI, r6
   22e50:	f3bf 8f6f 	isb	sy
}
   22e54:	bd70      	pop	{r4, r5, r6, pc}
   22e56:	bf00      	nop
   22e58:	2000463c 	.word	0x2000463c
   22e5c:	0002fba8 	.word	0x0002fba8
   22e60:	0002fa94 	.word	0x0002fa94

00022e64 <move_thread_to_end_of_prio_q>:
{
   22e64:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   22e66:	f990 300d 	ldrsb.w	r3, [r0, #13]
   22e6a:	2b00      	cmp	r3, #0
{
   22e6c:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   22e6e:	da03      	bge.n	22e78 <move_thread_to_end_of_prio_q+0x14>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   22e70:	4601      	mov	r1, r0
   22e72:	481d      	ldr	r0, [pc, #116]	; (22ee8 <move_thread_to_end_of_prio_q+0x84>)
   22e74:	f7ff fdf6 	bl	22a64 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   22e78:	4b1c      	ldr	r3, [pc, #112]	; (22eec <move_thread_to_end_of_prio_q+0x88>)
   22e7a:	429c      	cmp	r4, r3
   22e7c:	d10a      	bne.n	22e94 <move_thread_to_end_of_prio_q+0x30>
   22e7e:	491c      	ldr	r1, [pc, #112]	; (22ef0 <move_thread_to_end_of_prio_q+0x8c>)
   22e80:	481c      	ldr	r0, [pc, #112]	; (22ef4 <move_thread_to_end_of_prio_q+0x90>)
   22e82:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   22e86:	f004 f872 	bl	26f6e <printk>
   22e8a:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   22e8e:	4818      	ldr	r0, [pc, #96]	; (22ef0 <move_thread_to_end_of_prio_q+0x8c>)
   22e90:	f004 fae6 	bl	27460 <assert_post_action>
	return list->head == list;
   22e94:	4a18      	ldr	r2, [pc, #96]	; (22ef8 <move_thread_to_end_of_prio_q+0x94>)
   22e96:	e9d2 300b 	ldrd	r3, r0, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22e9a:	f102 012c 	add.w	r1, r2, #44	; 0x2c
   22e9e:	428b      	cmp	r3, r1
   22ea0:	d01c      	beq.n	22edc <move_thread_to_end_of_prio_q+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22ea2:	b1db      	cbz	r3, 22edc <move_thread_to_end_of_prio_q+0x78>
	if (thread_1->base.prio < thread_2->base.prio) {
   22ea4:	f994 500e 	ldrsb.w	r5, [r4, #14]
   22ea8:	f993 600e 	ldrsb.w	r6, [r3, #14]
   22eac:	42ae      	cmp	r6, r5
   22eae:	dd10      	ble.n	22ed2 <move_thread_to_end_of_prio_q+0x6e>
	node->prev = successor->prev;
   22eb0:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   22eb2:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   22eb6:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   22eb8:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   22eba:	7b63      	ldrb	r3, [r4, #13]
	update_cache(thread == _current);
   22ebc:	6890      	ldr	r0, [r2, #8]
   22ebe:	f063 037f 	orn	r3, r3, #127	; 0x7f
   22ec2:	7363      	strb	r3, [r4, #13]
   22ec4:	1b03      	subs	r3, r0, r4
   22ec6:	4258      	negs	r0, r3
   22ec8:	4158      	adcs	r0, r3
}
   22eca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   22ece:	f7ff be2f 	b.w	22b30 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   22ed2:	4298      	cmp	r0, r3
   22ed4:	d002      	beq.n	22edc <move_thread_to_end_of_prio_q+0x78>
   22ed6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22ed8:	2b00      	cmp	r3, #0
   22eda:	d1e5      	bne.n	22ea8 <move_thread_to_end_of_prio_q+0x44>
	node->prev = list->tail;
   22edc:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   22ee0:	6b13      	ldr	r3, [r2, #48]	; 0x30
   22ee2:	601c      	str	r4, [r3, #0]
	list->tail = node;
   22ee4:	6314      	str	r4, [r2, #48]	; 0x30
   22ee6:	e7e8      	b.n	22eba <move_thread_to_end_of_prio_q+0x56>
   22ee8:	20004630 	.word	0x20004630
   22eec:	20002370 	.word	0x20002370
   22ef0:	00035c2a 	.word	0x00035c2a
   22ef4:	0002fa94 	.word	0x0002fa94
   22ef8:	20004604 	.word	0x20004604

00022efc <z_time_slice>:
{
   22efc:	b570      	push	{r4, r5, r6, lr}
   22efe:	4605      	mov	r5, r0
	__asm__ volatile(
   22f00:	f04f 0320 	mov.w	r3, #32
   22f04:	f3ef 8411 	mrs	r4, BASEPRI
   22f08:	f383 8811 	msr	BASEPRI, r3
   22f0c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22f10:	4825      	ldr	r0, [pc, #148]	; (22fa8 <z_time_slice+0xac>)
   22f12:	f000 fec9 	bl	23ca8 <z_spin_lock_valid>
   22f16:	b940      	cbnz	r0, 22f2a <z_time_slice+0x2e>
   22f18:	4924      	ldr	r1, [pc, #144]	; (22fac <z_time_slice+0xb0>)
   22f1a:	4825      	ldr	r0, [pc, #148]	; (22fb0 <z_time_slice+0xb4>)
   22f1c:	227c      	movs	r2, #124	; 0x7c
   22f1e:	f004 f826 	bl	26f6e <printk>
   22f22:	217c      	movs	r1, #124	; 0x7c
   22f24:	4821      	ldr	r0, [pc, #132]	; (22fac <z_time_slice+0xb0>)
   22f26:	f004 fa9b 	bl	27460 <assert_post_action>
	z_spin_lock_set_owner(l);
   22f2a:	481f      	ldr	r0, [pc, #124]	; (22fa8 <z_time_slice+0xac>)
   22f2c:	f000 feda 	bl	23ce4 <z_spin_lock_set_owner>
	if (pending_current == _current) {
   22f30:	4b20      	ldr	r3, [pc, #128]	; (22fb4 <z_time_slice+0xb8>)
   22f32:	4a21      	ldr	r2, [pc, #132]	; (22fb8 <z_time_slice+0xbc>)
   22f34:	6898      	ldr	r0, [r3, #8]
   22f36:	6811      	ldr	r1, [r2, #0]
   22f38:	4288      	cmp	r0, r1
   22f3a:	4619      	mov	r1, r3
   22f3c:	d113      	bne.n	22f66 <z_time_slice+0x6a>
			z_reset_time_slice();
   22f3e:	f7ff fc9f 	bl	22880 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22f42:	4819      	ldr	r0, [pc, #100]	; (22fa8 <z_time_slice+0xac>)
   22f44:	f000 febe 	bl	23cc4 <z_spin_unlock_valid>
   22f48:	b940      	cbnz	r0, 22f5c <z_time_slice+0x60>
   22f4a:	4918      	ldr	r1, [pc, #96]	; (22fac <z_time_slice+0xb0>)
   22f4c:	4818      	ldr	r0, [pc, #96]	; (22fb0 <z_time_slice+0xb4>)
   22f4e:	22a7      	movs	r2, #167	; 0xa7
   22f50:	f004 f80d 	bl	26f6e <printk>
   22f54:	21a7      	movs	r1, #167	; 0xa7
   22f56:	4815      	ldr	r0, [pc, #84]	; (22fac <z_time_slice+0xb0>)
   22f58:	f004 fa82 	bl	27460 <assert_post_action>
	__asm__ volatile(
   22f5c:	f384 8811 	msr	BASEPRI, r4
   22f60:	f3bf 8f6f 	isb	sy
}
   22f64:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   22f66:	2600      	movs	r6, #0
   22f68:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   22f6a:	4a14      	ldr	r2, [pc, #80]	; (22fbc <z_time_slice+0xc0>)
   22f6c:	6812      	ldr	r2, [r2, #0]
   22f6e:	b1ba      	cbz	r2, 22fa0 <z_time_slice+0xa4>
		&& !z_is_idle_thread_object(thread);
   22f70:	89c2      	ldrh	r2, [r0, #14]
   22f72:	2a7f      	cmp	r2, #127	; 0x7f
   22f74:	d814      	bhi.n	22fa0 <z_time_slice+0xa4>
		&& !z_is_thread_prevented_from_running(thread)
   22f76:	7b42      	ldrb	r2, [r0, #13]
   22f78:	06d2      	lsls	r2, r2, #27
   22f7a:	d111      	bne.n	22fa0 <z_time_slice+0xa4>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   22f7c:	4a10      	ldr	r2, [pc, #64]	; (22fc0 <z_time_slice+0xc4>)
   22f7e:	f990 600e 	ldrsb.w	r6, [r0, #14]
   22f82:	6812      	ldr	r2, [r2, #0]
   22f84:	4296      	cmp	r6, r2
   22f86:	db0b      	blt.n	22fa0 <z_time_slice+0xa4>
		&& !z_is_idle_thread_object(thread);
   22f88:	4a0e      	ldr	r2, [pc, #56]	; (22fc4 <z_time_slice+0xc8>)
   22f8a:	4290      	cmp	r0, r2
   22f8c:	d008      	beq.n	22fa0 <z_time_slice+0xa4>
		if (ticks >= _current_cpu->slice_ticks) {
   22f8e:	695a      	ldr	r2, [r3, #20]
   22f90:	42aa      	cmp	r2, r5
   22f92:	dc02      	bgt.n	22f9a <z_time_slice+0x9e>
			move_thread_to_end_of_prio_q(_current);
   22f94:	f7ff ff66 	bl	22e64 <move_thread_to_end_of_prio_q>
   22f98:	e7d1      	b.n	22f3e <z_time_slice+0x42>
			_current_cpu->slice_ticks -= ticks;
   22f9a:	1b52      	subs	r2, r2, r5
   22f9c:	615a      	str	r2, [r3, #20]
   22f9e:	e7d0      	b.n	22f42 <z_time_slice+0x46>
		_current_cpu->slice_ticks = 0;
   22fa0:	2300      	movs	r3, #0
   22fa2:	614b      	str	r3, [r1, #20]
   22fa4:	e7cd      	b.n	22f42 <z_time_slice+0x46>
   22fa6:	bf00      	nop
   22fa8:	2000463c 	.word	0x2000463c
   22fac:	0002fba8 	.word	0x0002fba8
   22fb0:	0002fa94 	.word	0x0002fa94
   22fb4:	20004604 	.word	0x20004604
   22fb8:	20004638 	.word	0x20004638
   22fbc:	20004644 	.word	0x20004644
   22fc0:	20004640 	.word	0x20004640
   22fc4:	20002370 	.word	0x20002370

00022fc8 <z_impl_k_thread_suspend>:
{
   22fc8:	b570      	push	{r4, r5, r6, lr}
   22fca:	4604      	mov	r4, r0
   22fcc:	3018      	adds	r0, #24
   22fce:	f001 f8e3 	bl	24198 <z_abort_timeout>
	__asm__ volatile(
   22fd2:	f04f 0320 	mov.w	r3, #32
   22fd6:	f3ef 8611 	mrs	r6, BASEPRI
   22fda:	f383 8811 	msr	BASEPRI, r3
   22fde:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22fe2:	4820      	ldr	r0, [pc, #128]	; (23064 <z_impl_k_thread_suspend+0x9c>)
   22fe4:	f000 fe60 	bl	23ca8 <z_spin_lock_valid>
   22fe8:	b940      	cbnz	r0, 22ffc <z_impl_k_thread_suspend+0x34>
   22fea:	491f      	ldr	r1, [pc, #124]	; (23068 <z_impl_k_thread_suspend+0xa0>)
   22fec:	481f      	ldr	r0, [pc, #124]	; (2306c <z_impl_k_thread_suspend+0xa4>)
   22fee:	227c      	movs	r2, #124	; 0x7c
   22ff0:	f003 ffbd 	bl	26f6e <printk>
   22ff4:	217c      	movs	r1, #124	; 0x7c
   22ff6:	481c      	ldr	r0, [pc, #112]	; (23068 <z_impl_k_thread_suspend+0xa0>)
   22ff8:	f004 fa32 	bl	27460 <assert_post_action>
	z_spin_lock_set_owner(l);
   22ffc:	4819      	ldr	r0, [pc, #100]	; (23064 <z_impl_k_thread_suspend+0x9c>)
   22ffe:	f000 fe71 	bl	23ce4 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   23002:	f994 300d 	ldrsb.w	r3, [r4, #13]
   23006:	2b00      	cmp	r3, #0
   23008:	da07      	bge.n	2301a <z_impl_k_thread_suspend+0x52>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   2300a:	4621      	mov	r1, r4
   2300c:	4818      	ldr	r0, [pc, #96]	; (23070 <z_impl_k_thread_suspend+0xa8>)
   2300e:	f7ff fd29 	bl	22a64 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   23012:	7b63      	ldrb	r3, [r4, #13]
   23014:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   23018:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   2301a:	4d16      	ldr	r5, [pc, #88]	; (23074 <z_impl_k_thread_suspend+0xac>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   2301c:	7b63      	ldrb	r3, [r4, #13]
   2301e:	68a8      	ldr	r0, [r5, #8]
   23020:	f043 0310 	orr.w	r3, r3, #16
   23024:	7363      	strb	r3, [r4, #13]
   23026:	1b03      	subs	r3, r0, r4
   23028:	4258      	negs	r0, r3
   2302a:	4158      	adcs	r0, r3
   2302c:	f7ff fd80 	bl	22b30 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23030:	480c      	ldr	r0, [pc, #48]	; (23064 <z_impl_k_thread_suspend+0x9c>)
   23032:	f000 fe47 	bl	23cc4 <z_spin_unlock_valid>
   23036:	b940      	cbnz	r0, 2304a <z_impl_k_thread_suspend+0x82>
   23038:	490b      	ldr	r1, [pc, #44]	; (23068 <z_impl_k_thread_suspend+0xa0>)
   2303a:	480c      	ldr	r0, [pc, #48]	; (2306c <z_impl_k_thread_suspend+0xa4>)
   2303c:	22a7      	movs	r2, #167	; 0xa7
   2303e:	f003 ff96 	bl	26f6e <printk>
   23042:	21a7      	movs	r1, #167	; 0xa7
   23044:	4808      	ldr	r0, [pc, #32]	; (23068 <z_impl_k_thread_suspend+0xa0>)
   23046:	f004 fa0b 	bl	27460 <assert_post_action>
	__asm__ volatile(
   2304a:	f386 8811 	msr	BASEPRI, r6
   2304e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   23052:	68ab      	ldr	r3, [r5, #8]
   23054:	42a3      	cmp	r3, r4
   23056:	d103      	bne.n	23060 <z_impl_k_thread_suspend+0x98>
}
   23058:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   2305c:	f00a b92e 	b.w	2d2bc <z_reschedule_unlocked>
}
   23060:	bd70      	pop	{r4, r5, r6, pc}
   23062:	bf00      	nop
   23064:	2000463c 	.word	0x2000463c
   23068:	0002fba8 	.word	0x0002fba8
   2306c:	0002fa94 	.word	0x0002fa94
   23070:	20004630 	.word	0x20004630
   23074:	20004604 	.word	0x20004604

00023078 <z_thread_single_abort>:
{
   23078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
   2307c:	7b03      	ldrb	r3, [r0, #12]
   2307e:	07dd      	lsls	r5, r3, #31
{
   23080:	4604      	mov	r4, r0
	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
   23082:	d50a      	bpl.n	2309a <z_thread_single_abort+0x22>
   23084:	4979      	ldr	r1, [pc, #484]	; (2326c <z_thread_single_abort+0x1f4>)
   23086:	487a      	ldr	r0, [pc, #488]	; (23270 <z_thread_single_abort+0x1f8>)
   23088:	f240 220e 	movw	r2, #526	; 0x20e
   2308c:	f003 ff6f 	bl	26f6e <printk>
   23090:	f240 210e 	movw	r1, #526	; 0x20e
   23094:	4875      	ldr	r0, [pc, #468]	; (2326c <z_thread_single_abort+0x1f4>)
   23096:	f004 f9e3 	bl	27460 <assert_post_action>
	__ASSERT(thread != _current || arch_is_in_isr(),
   2309a:	4e76      	ldr	r6, [pc, #472]	; (23274 <z_thread_single_abort+0x1fc>)
   2309c:	68b3      	ldr	r3, [r6, #8]
   2309e:	42a3      	cmp	r3, r4
   230a0:	d10d      	bne.n	230be <z_thread_single_abort+0x46>
   230a2:	f3ef 8305 	mrs	r3, IPSR
   230a6:	b953      	cbnz	r3, 230be <z_thread_single_abort+0x46>
   230a8:	4970      	ldr	r1, [pc, #448]	; (2326c <z_thread_single_abort+0x1f4>)
   230aa:	4871      	ldr	r0, [pc, #452]	; (23270 <z_thread_single_abort+0x1f8>)
   230ac:	f44f 7204 	mov.w	r2, #528	; 0x210
   230b0:	f003 ff5d 	bl	26f6e <printk>
   230b4:	f44f 7104 	mov.w	r1, #528	; 0x210
   230b8:	486c      	ldr	r0, [pc, #432]	; (2326c <z_thread_single_abort+0x1f4>)
   230ba:	f004 f9d1 	bl	27460 <assert_post_action>
	__asm__ volatile(
   230be:	f04f 0320 	mov.w	r3, #32
   230c2:	f3ef 8511 	mrs	r5, BASEPRI
   230c6:	f383 8811 	msr	BASEPRI, r3
   230ca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   230ce:	486a      	ldr	r0, [pc, #424]	; (23278 <z_thread_single_abort+0x200>)
   230d0:	f000 fdea 	bl	23ca8 <z_spin_lock_valid>
   230d4:	b940      	cbnz	r0, 230e8 <z_thread_single_abort+0x70>
   230d6:	4969      	ldr	r1, [pc, #420]	; (2327c <z_thread_single_abort+0x204>)
   230d8:	4865      	ldr	r0, [pc, #404]	; (23270 <z_thread_single_abort+0x1f8>)
   230da:	227c      	movs	r2, #124	; 0x7c
   230dc:	f003 ff47 	bl	26f6e <printk>
   230e0:	217c      	movs	r1, #124	; 0x7c
   230e2:	4866      	ldr	r0, [pc, #408]	; (2327c <z_thread_single_abort+0x204>)
   230e4:	f004 f9bc 	bl	27460 <assert_post_action>
	z_spin_lock_set_owner(l);
   230e8:	4863      	ldr	r0, [pc, #396]	; (23278 <z_thread_single_abort+0x200>)
   230ea:	f000 fdfb 	bl	23ce4 <z_spin_lock_set_owner>
	if ((thread->base.thread_state &
   230ee:	7b63      	ldrb	r3, [r4, #13]
   230f0:	f013 0f28 	tst.w	r3, #40	; 0x28
   230f4:	d012      	beq.n	2311c <z_thread_single_abort+0xa4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   230f6:	4860      	ldr	r0, [pc, #384]	; (23278 <z_thread_single_abort+0x200>)
   230f8:	f000 fde4 	bl	23cc4 <z_spin_unlock_valid>
   230fc:	b940      	cbnz	r0, 23110 <z_thread_single_abort+0x98>
   230fe:	495f      	ldr	r1, [pc, #380]	; (2327c <z_thread_single_abort+0x204>)
   23100:	485b      	ldr	r0, [pc, #364]	; (23270 <z_thread_single_abort+0x1f8>)
   23102:	22a7      	movs	r2, #167	; 0xa7
   23104:	f003 ff33 	bl	26f6e <printk>
   23108:	21a7      	movs	r1, #167	; 0xa7
   2310a:	485c      	ldr	r0, [pc, #368]	; (2327c <z_thread_single_abort+0x204>)
   2310c:	f004 f9a8 	bl	27460 <assert_post_action>
	__asm__ volatile(
   23110:	f385 8811 	msr	BASEPRI, r5
   23114:	f3bf 8f6f 	isb	sy
}
   23118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	thread->base.thread_state |= _THREAD_ABORTING;
   2311c:	f043 0320 	orr.w	r3, r3, #32
   23120:	7363      	strb	r3, [r4, #13]
   23122:	4855      	ldr	r0, [pc, #340]	; (23278 <z_thread_single_abort+0x200>)
   23124:	f000 fdce 	bl	23cc4 <z_spin_unlock_valid>
   23128:	b940      	cbnz	r0, 2313c <z_thread_single_abort+0xc4>
   2312a:	4954      	ldr	r1, [pc, #336]	; (2327c <z_thread_single_abort+0x204>)
   2312c:	4850      	ldr	r0, [pc, #320]	; (23270 <z_thread_single_abort+0x1f8>)
   2312e:	22a7      	movs	r2, #167	; 0xa7
   23130:	f003 ff1d 	bl	26f6e <printk>
   23134:	21a7      	movs	r1, #167	; 0xa7
   23136:	4851      	ldr	r0, [pc, #324]	; (2327c <z_thread_single_abort+0x204>)
   23138:	f004 f992 	bl	27460 <assert_post_action>
   2313c:	f385 8811 	msr	BASEPRI, r5
   23140:	f3bf 8f6f 	isb	sy
   23144:	f104 0018 	add.w	r0, r4, #24
   23148:	f001 f826 	bl	24198 <z_abort_timeout>
	__asm__ volatile(
   2314c:	f04f 0320 	mov.w	r3, #32
   23150:	f3ef 8711 	mrs	r7, BASEPRI
   23154:	f383 8811 	msr	BASEPRI, r3
   23158:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2315c:	4846      	ldr	r0, [pc, #280]	; (23278 <z_thread_single_abort+0x200>)
   2315e:	f000 fda3 	bl	23ca8 <z_spin_lock_valid>
   23162:	b940      	cbnz	r0, 23176 <z_thread_single_abort+0xfe>
   23164:	4945      	ldr	r1, [pc, #276]	; (2327c <z_thread_single_abort+0x204>)
   23166:	4842      	ldr	r0, [pc, #264]	; (23270 <z_thread_single_abort+0x1f8>)
   23168:	227c      	movs	r2, #124	; 0x7c
   2316a:	f003 ff00 	bl	26f6e <printk>
   2316e:	217c      	movs	r1, #124	; 0x7c
   23170:	4842      	ldr	r0, [pc, #264]	; (2327c <z_thread_single_abort+0x204>)
   23172:	f004 f975 	bl	27460 <assert_post_action>
	z_spin_lock_set_owner(l);
   23176:	4840      	ldr	r0, [pc, #256]	; (23278 <z_thread_single_abort+0x200>)
   23178:	f000 fdb4 	bl	23ce4 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2317c:	7b63      	ldrb	r3, [r4, #13]
   2317e:	06d8      	lsls	r0, r3, #27
   23180:	d116      	bne.n	231b0 <z_thread_single_abort+0x138>
		if (z_is_thread_ready(thread)) {
   23182:	69a2      	ldr	r2, [r4, #24]
   23184:	b9a2      	cbnz	r2, 231b0 <z_thread_single_abort+0x138>
			if (z_is_thread_queued(thread)) {
   23186:	0619      	lsls	r1, r3, #24
   23188:	d507      	bpl.n	2319a <z_thread_single_abort+0x122>
				_priq_run_remove(&_kernel.ready_q.runq,
   2318a:	4621      	mov	r1, r4
   2318c:	483c      	ldr	r0, [pc, #240]	; (23280 <z_thread_single_abort+0x208>)
   2318e:	f7ff fc69 	bl	22a64 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   23192:	7b63      	ldrb	r3, [r4, #13]
   23194:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   23198:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   2319a:	68b0      	ldr	r0, [r6, #8]
   2319c:	1b02      	subs	r2, r0, r4
   2319e:	4250      	negs	r0, r2
   231a0:	4150      	adcs	r0, r2
   231a2:	f7ff fcc5 	bl	22b30 <update_cache>
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   231a6:	f104 0930 	add.w	r9, r4, #48	; 0x30
			waiter->base.pended_on = NULL;
   231aa:	f04f 0800 	mov.w	r8, #0
   231ae:	e025      	b.n	231fc <z_thread_single_abort+0x184>
			if (z_is_thread_pending(thread)) {
   231b0:	079b      	lsls	r3, r3, #30
   231b2:	d5f8      	bpl.n	231a6 <z_thread_single_abort+0x12e>
				_priq_wait_remove(&pended_on(thread)->waitq,
   231b4:	f104 0008 	add.w	r0, r4, #8
   231b8:	f7ff fb4c 	bl	22854 <pended_on.isra.19>
   231bc:	4621      	mov	r1, r4
   231be:	f7ff fc51 	bl	22a64 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   231c2:	7b63      	ldrb	r3, [r4, #13]
   231c4:	f023 0302 	bic.w	r3, r3, #2
   231c8:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   231ca:	2300      	movs	r3, #0
   231cc:	60a3      	str	r3, [r4, #8]
   231ce:	e7ea      	b.n	231a6 <z_thread_single_abort+0x12e>
   231d0:	f105 0018 	add.w	r0, r5, #24
   231d4:	f000 ffe0 	bl	24198 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   231d8:	f105 0008 	add.w	r0, r5, #8
   231dc:	f7ff fb3a 	bl	22854 <pended_on.isra.19>
   231e0:	4629      	mov	r1, r5
   231e2:	f7ff fc3f 	bl	22a64 <z_priq_dumb_remove>
   231e6:	7b6b      	ldrb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   231e8:	f8c5 8008 	str.w	r8, [r5, #8]
   231ec:	f023 0302 	bic.w	r3, r3, #2
   231f0:	736b      	strb	r3, [r5, #13]
   231f2:	f8c5 8088 	str.w	r8, [r5, #136]	; 0x88
			ready_thread(waiter);
   231f6:	4628      	mov	r0, r5
   231f8:	f7ff fd30 	bl	22c5c <ready_thread>
	return list->head == list;
   231fc:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   231fe:	454d      	cmp	r5, r9
   23200:	d001      	beq.n	23206 <z_thread_single_abort+0x18e>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   23202:	2d00      	cmp	r5, #0
   23204:	d1e4      	bne.n	231d0 <z_thread_single_abort+0x158>
		if (z_is_idle_thread_object(_current)) {
   23206:	68b2      	ldr	r2, [r6, #8]
   23208:	4b1e      	ldr	r3, [pc, #120]	; (23284 <z_thread_single_abort+0x20c>)
   2320a:	429a      	cmp	r2, r3
   2320c:	d102      	bne.n	23214 <z_thread_single_abort+0x19c>
			update_cache(1);
   2320e:	2001      	movs	r0, #1
   23210:	f7ff fc8e 	bl	22b30 <update_cache>
		thread->base.thread_state |= _THREAD_DEAD;
   23214:	7b63      	ldrb	r3, [r4, #13]
		fn_abort = thread->fn_abort;
   23216:	6ea5      	ldr	r5, [r4, #104]	; 0x68
		thread->base.thread_state |= _THREAD_DEAD;
   23218:	f043 0308 	orr.w	r3, r3, #8
   2321c:	7363      	strb	r3, [r4, #13]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2321e:	2200      	movs	r2, #0
   23220:	f104 0338 	add.w	r3, r4, #56	; 0x38
   23224:	f3bf 8f5b 	dmb	ish
   23228:	e853 1f00 	ldrex	r1, [r3]
   2322c:	e843 2000 	strex	r0, r2, [r3]
   23230:	2800      	cmp	r0, #0
   23232:	d1f9      	bne.n	23228 <z_thread_single_abort+0x1b0>
   23234:	f3bf 8f5b 	dmb	ish
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23238:	480f      	ldr	r0, [pc, #60]	; (23278 <z_thread_single_abort+0x200>)
   2323a:	f000 fd43 	bl	23cc4 <z_spin_unlock_valid>
   2323e:	b940      	cbnz	r0, 23252 <z_thread_single_abort+0x1da>
   23240:	490e      	ldr	r1, [pc, #56]	; (2327c <z_thread_single_abort+0x204>)
   23242:	480b      	ldr	r0, [pc, #44]	; (23270 <z_thread_single_abort+0x1f8>)
   23244:	22a7      	movs	r2, #167	; 0xa7
   23246:	f003 fe92 	bl	26f6e <printk>
   2324a:	21a7      	movs	r1, #167	; 0xa7
   2324c:	480b      	ldr	r0, [pc, #44]	; (2327c <z_thread_single_abort+0x204>)
   2324e:	f004 f907 	bl	27460 <assert_post_action>
	__asm__ volatile(
   23252:	f387 8811 	msr	BASEPRI, r7
   23256:	f3bf 8f6f 	isb	sy
	if (fn_abort != NULL) {
   2325a:	2d00      	cmp	r5, #0
   2325c:	f43f af5c 	beq.w	23118 <z_thread_single_abort+0xa0>
		fn_abort(thread);
   23260:	4620      	mov	r0, r4
   23262:	462b      	mov	r3, r5
}
   23264:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		fn_abort(thread);
   23268:	4718      	bx	r3
   2326a:	bf00      	nop
   2326c:	00035c2a 	.word	0x00035c2a
   23270:	0002fa94 	.word	0x0002fa94
   23274:	20004604 	.word	0x20004604
   23278:	2000463c 	.word	0x2000463c
   2327c:	0002fba8 	.word	0x0002fba8
   23280:	20004630 	.word	0x20004630
   23284:	20002370 	.word	0x20002370

00023288 <unready_thread>:
{
   23288:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   2328a:	f990 300d 	ldrsb.w	r3, [r0, #13]
   2328e:	2b00      	cmp	r3, #0
{
   23290:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   23292:	da07      	bge.n	232a4 <unready_thread+0x1c>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   23294:	4601      	mov	r1, r0
   23296:	4808      	ldr	r0, [pc, #32]	; (232b8 <unready_thread+0x30>)
   23298:	f7ff fbe4 	bl	22a64 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   2329c:	7b63      	ldrb	r3, [r4, #13]
   2329e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   232a2:	7363      	strb	r3, [r4, #13]
	update_cache(thread == _current);
   232a4:	4b05      	ldr	r3, [pc, #20]	; (232bc <unready_thread+0x34>)
   232a6:	6898      	ldr	r0, [r3, #8]
   232a8:	1b03      	subs	r3, r0, r4
   232aa:	4258      	negs	r0, r3
   232ac:	4158      	adcs	r0, r3
}
   232ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   232b2:	f7ff bc3d 	b.w	22b30 <update_cache>
   232b6:	bf00      	nop
   232b8:	20004630 	.word	0x20004630
   232bc:	20004604 	.word	0x20004604

000232c0 <add_to_waitq_locked>:
{
   232c0:	b538      	push	{r3, r4, r5, lr}
   232c2:	4604      	mov	r4, r0
   232c4:	460d      	mov	r5, r1
	unready_thread(thread);
   232c6:	f7ff ffdf 	bl	23288 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   232ca:	7b63      	ldrb	r3, [r4, #13]
   232cc:	f043 0302 	orr.w	r3, r3, #2
   232d0:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   232d2:	b1ed      	cbz	r5, 23310 <add_to_waitq_locked+0x50>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   232d4:	4b15      	ldr	r3, [pc, #84]	; (2332c <add_to_waitq_locked+0x6c>)
		thread->base.pended_on = wait_q;
   232d6:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   232d8:	429c      	cmp	r4, r3
   232da:	d10a      	bne.n	232f2 <add_to_waitq_locked+0x32>
   232dc:	4914      	ldr	r1, [pc, #80]	; (23330 <add_to_waitq_locked+0x70>)
   232de:	4815      	ldr	r0, [pc, #84]	; (23334 <add_to_waitq_locked+0x74>)
   232e0:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   232e4:	f003 fe43 	bl	26f6e <printk>
   232e8:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   232ec:	4810      	ldr	r0, [pc, #64]	; (23330 <add_to_waitq_locked+0x70>)
   232ee:	f004 f8b7 	bl	27460 <assert_post_action>
	return list->head == list;
   232f2:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   232f4:	429d      	cmp	r5, r3
   232f6:	d012      	beq.n	2331e <add_to_waitq_locked+0x5e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   232f8:	b18b      	cbz	r3, 2331e <add_to_waitq_locked+0x5e>
	if (thread_1->base.prio < thread_2->base.prio) {
   232fa:	f994 200e 	ldrsb.w	r2, [r4, #14]
   232fe:	f993 100e 	ldrsb.w	r1, [r3, #14]
   23302:	4291      	cmp	r1, r2
   23304:	dd05      	ble.n	23312 <add_to_waitq_locked+0x52>
	node->prev = successor->prev;
   23306:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   23308:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   2330c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2330e:	605c      	str	r4, [r3, #4]
}
   23310:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   23312:	6869      	ldr	r1, [r5, #4]
   23314:	428b      	cmp	r3, r1
   23316:	d002      	beq.n	2331e <add_to_waitq_locked+0x5e>
   23318:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2331a:	2b00      	cmp	r3, #0
   2331c:	d1ef      	bne.n	232fe <add_to_waitq_locked+0x3e>
	node->prev = list->tail;
   2331e:	686b      	ldr	r3, [r5, #4]
   23320:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   23322:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   23324:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
   23326:	601c      	str	r4, [r3, #0]
	list->tail = node;
   23328:	606c      	str	r4, [r5, #4]
}
   2332a:	e7f1      	b.n	23310 <add_to_waitq_locked+0x50>
   2332c:	20002370 	.word	0x20002370
   23330:	00035c2a 	.word	0x00035c2a
   23334:	0002fa94 	.word	0x0002fa94

00023338 <pend>:
{
   23338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2333c:	4604      	mov	r4, r0
   2333e:	4688      	mov	r8, r1
   23340:	4616      	mov	r6, r2
   23342:	461f      	mov	r7, r3
	__asm__ volatile(
   23344:	f04f 0320 	mov.w	r3, #32
   23348:	f3ef 8511 	mrs	r5, BASEPRI
   2334c:	f383 8811 	msr	BASEPRI, r3
   23350:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23354:	481a      	ldr	r0, [pc, #104]	; (233c0 <pend+0x88>)
   23356:	f000 fca7 	bl	23ca8 <z_spin_lock_valid>
   2335a:	b940      	cbnz	r0, 2336e <pend+0x36>
   2335c:	4919      	ldr	r1, [pc, #100]	; (233c4 <pend+0x8c>)
   2335e:	481a      	ldr	r0, [pc, #104]	; (233c8 <pend+0x90>)
   23360:	227c      	movs	r2, #124	; 0x7c
   23362:	f003 fe04 	bl	26f6e <printk>
   23366:	217c      	movs	r1, #124	; 0x7c
   23368:	4816      	ldr	r0, [pc, #88]	; (233c4 <pend+0x8c>)
   2336a:	f004 f879 	bl	27460 <assert_post_action>
	z_spin_lock_set_owner(l);
   2336e:	4814      	ldr	r0, [pc, #80]	; (233c0 <pend+0x88>)
   23370:	f000 fcb8 	bl	23ce4 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
   23374:	4620      	mov	r0, r4
   23376:	4641      	mov	r1, r8
   23378:	f7ff ffa2 	bl	232c0 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2337c:	4810      	ldr	r0, [pc, #64]	; (233c0 <pend+0x88>)
   2337e:	f000 fca1 	bl	23cc4 <z_spin_unlock_valid>
   23382:	b940      	cbnz	r0, 23396 <pend+0x5e>
   23384:	490f      	ldr	r1, [pc, #60]	; (233c4 <pend+0x8c>)
   23386:	4810      	ldr	r0, [pc, #64]	; (233c8 <pend+0x90>)
   23388:	22a7      	movs	r2, #167	; 0xa7
   2338a:	f003 fdf0 	bl	26f6e <printk>
   2338e:	21a7      	movs	r1, #167	; 0xa7
   23390:	480c      	ldr	r0, [pc, #48]	; (233c4 <pend+0x8c>)
   23392:	f004 f865 	bl	27460 <assert_post_action>
	__asm__ volatile(
   23396:	f385 8811 	msr	BASEPRI, r5
   2339a:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2339e:	1c7b      	adds	r3, r7, #1
   233a0:	bf08      	it	eq
   233a2:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   233a6:	d008      	beq.n	233ba <pend+0x82>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   233a8:	4632      	mov	r2, r6
   233aa:	463b      	mov	r3, r7
   233ac:	f104 0018 	add.w	r0, r4, #24
   233b0:	4906      	ldr	r1, [pc, #24]	; (233cc <pend+0x94>)
}
   233b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   233b6:	f000 be2d 	b.w	24014 <z_add_timeout>
   233ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   233be:	bf00      	nop
   233c0:	2000463c 	.word	0x2000463c
   233c4:	0002fba8 	.word	0x0002fba8
   233c8:	0002fa94 	.word	0x0002fa94
   233cc:	00022ddd 	.word	0x00022ddd

000233d0 <z_pend_curr>:
{
   233d0:	b538      	push	{r3, r4, r5, lr}
	pending_current = _current;
   233d2:	4b0e      	ldr	r3, [pc, #56]	; (2340c <z_pend_curr+0x3c>)
{
   233d4:	4605      	mov	r5, r0
	pending_current = _current;
   233d6:	6898      	ldr	r0, [r3, #8]
   233d8:	4b0d      	ldr	r3, [pc, #52]	; (23410 <z_pend_curr+0x40>)
{
   233da:	460c      	mov	r4, r1
	pending_current = _current;
   233dc:	6018      	str	r0, [r3, #0]
{
   233de:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   233e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   233e4:	f7ff ffa8 	bl	23338 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   233e8:	4628      	mov	r0, r5
   233ea:	f000 fc6b 	bl	23cc4 <z_spin_unlock_valid>
   233ee:	b940      	cbnz	r0, 23402 <z_pend_curr+0x32>
   233f0:	4908      	ldr	r1, [pc, #32]	; (23414 <z_pend_curr+0x44>)
   233f2:	4809      	ldr	r0, [pc, #36]	; (23418 <z_pend_curr+0x48>)
   233f4:	22be      	movs	r2, #190	; 0xbe
   233f6:	f003 fdba 	bl	26f6e <printk>
   233fa:	21be      	movs	r1, #190	; 0xbe
   233fc:	4805      	ldr	r0, [pc, #20]	; (23414 <z_pend_curr+0x44>)
   233fe:	f004 f82f 	bl	27460 <assert_post_action>
   23402:	4620      	mov	r0, r4
}
   23404:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   23408:	f7e3 bc18 	b.w	6c3c <arch_swap>
   2340c:	20004604 	.word	0x20004604
   23410:	20004638 	.word	0x20004638
   23414:	0002fba8 	.word	0x0002fba8
   23418:	0002fa94 	.word	0x0002fa94

0002341c <z_set_prio>:
{
   2341c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2341e:	4604      	mov	r4, r0
   23420:	460d      	mov	r5, r1
	__asm__ volatile(
   23422:	f04f 0320 	mov.w	r3, #32
   23426:	f3ef 8611 	mrs	r6, BASEPRI
   2342a:	f383 8811 	msr	BASEPRI, r3
   2342e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23432:	4831      	ldr	r0, [pc, #196]	; (234f8 <z_set_prio+0xdc>)
   23434:	f000 fc38 	bl	23ca8 <z_spin_lock_valid>
   23438:	b940      	cbnz	r0, 2344c <z_set_prio+0x30>
   2343a:	4930      	ldr	r1, [pc, #192]	; (234fc <z_set_prio+0xe0>)
   2343c:	4830      	ldr	r0, [pc, #192]	; (23500 <z_set_prio+0xe4>)
   2343e:	227c      	movs	r2, #124	; 0x7c
   23440:	f003 fd95 	bl	26f6e <printk>
   23444:	217c      	movs	r1, #124	; 0x7c
   23446:	482d      	ldr	r0, [pc, #180]	; (234fc <z_set_prio+0xe0>)
   23448:	f004 f80a 	bl	27460 <assert_post_action>
	z_spin_lock_set_owner(l);
   2344c:	482a      	ldr	r0, [pc, #168]	; (234f8 <z_set_prio+0xdc>)
   2344e:	f000 fc49 	bl	23ce4 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   23452:	7b63      	ldrb	r3, [r4, #13]
   23454:	06db      	lsls	r3, r3, #27
   23456:	b26d      	sxtb	r5, r5
   23458:	d14a      	bne.n	234f0 <z_set_prio+0xd4>
		if (need_sched) {
   2345a:	69a3      	ldr	r3, [r4, #24]
   2345c:	2b00      	cmp	r3, #0
   2345e:	d147      	bne.n	234f0 <z_set_prio+0xd4>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   23460:	4621      	mov	r1, r4
   23462:	4828      	ldr	r0, [pc, #160]	; (23504 <z_set_prio+0xe8>)
   23464:	f7ff fafe 	bl	22a64 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   23468:	4b27      	ldr	r3, [pc, #156]	; (23508 <z_set_prio+0xec>)
				thread->base.prio = prio;
   2346a:	73a5      	strb	r5, [r4, #14]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2346c:	429c      	cmp	r4, r3
   2346e:	d10a      	bne.n	23486 <z_set_prio+0x6a>
   23470:	4926      	ldr	r1, [pc, #152]	; (2350c <z_set_prio+0xf0>)
   23472:	4823      	ldr	r0, [pc, #140]	; (23500 <z_set_prio+0xe4>)
   23474:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   23478:	f003 fd79 	bl	26f6e <printk>
   2347c:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   23480:	4822      	ldr	r0, [pc, #136]	; (2350c <z_set_prio+0xf0>)
   23482:	f003 ffed 	bl	27460 <assert_post_action>
	return list->head == list;
   23486:	4a22      	ldr	r2, [pc, #136]	; (23510 <z_set_prio+0xf4>)
   23488:	e9d2 300b 	ldrd	r3, r0, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2348c:	f102 012c 	add.w	r1, r2, #44	; 0x2c
   23490:	428b      	cmp	r3, r1
   23492:	d027      	beq.n	234e4 <z_set_prio+0xc8>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23494:	b333      	cbz	r3, 234e4 <z_set_prio+0xc8>
	if (thread_1->base.prio < thread_2->base.prio) {
   23496:	f994 500e 	ldrsb.w	r5, [r4, #14]
   2349a:	f993 700e 	ldrsb.w	r7, [r3, #14]
   2349e:	42af      	cmp	r7, r5
   234a0:	dd1b      	ble.n	234da <z_set_prio+0xbe>
	node->prev = successor->prev;
   234a2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   234a4:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   234a8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   234aa:	605c      	str	r4, [r3, #4]
			update_cache(1);
   234ac:	2001      	movs	r0, #1
   234ae:	f7ff fb3f 	bl	22b30 <update_cache>
   234b2:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   234b4:	4810      	ldr	r0, [pc, #64]	; (234f8 <z_set_prio+0xdc>)
   234b6:	f000 fc05 	bl	23cc4 <z_spin_unlock_valid>
   234ba:	b940      	cbnz	r0, 234ce <z_set_prio+0xb2>
   234bc:	490f      	ldr	r1, [pc, #60]	; (234fc <z_set_prio+0xe0>)
   234be:	4810      	ldr	r0, [pc, #64]	; (23500 <z_set_prio+0xe4>)
   234c0:	22a7      	movs	r2, #167	; 0xa7
   234c2:	f003 fd54 	bl	26f6e <printk>
   234c6:	21a7      	movs	r1, #167	; 0xa7
   234c8:	480c      	ldr	r0, [pc, #48]	; (234fc <z_set_prio+0xe0>)
   234ca:	f003 ffc9 	bl	27460 <assert_post_action>
	__asm__ volatile(
   234ce:	f386 8811 	msr	BASEPRI, r6
   234d2:	f3bf 8f6f 	isb	sy
}
   234d6:	4620      	mov	r0, r4
   234d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   234da:	4298      	cmp	r0, r3
   234dc:	d002      	beq.n	234e4 <z_set_prio+0xc8>
   234de:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   234e0:	2b00      	cmp	r3, #0
   234e2:	d1da      	bne.n	2349a <z_set_prio+0x7e>
	node->prev = list->tail;
   234e4:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   234e8:	6b13      	ldr	r3, [r2, #48]	; 0x30
   234ea:	601c      	str	r4, [r3, #0]
	list->tail = node;
   234ec:	6314      	str	r4, [r2, #48]	; 0x30
   234ee:	e7dd      	b.n	234ac <z_set_prio+0x90>
			thread->base.prio = prio;
   234f0:	73a5      	strb	r5, [r4, #14]
   234f2:	2400      	movs	r4, #0
   234f4:	e7de      	b.n	234b4 <z_set_prio+0x98>
   234f6:	bf00      	nop
   234f8:	2000463c 	.word	0x2000463c
   234fc:	0002fba8 	.word	0x0002fba8
   23500:	0002fa94 	.word	0x0002fa94
   23504:	20004630 	.word	0x20004630
   23508:	20002370 	.word	0x20002370
   2350c:	00035c2a 	.word	0x00035c2a
   23510:	20004604 	.word	0x20004604

00023514 <z_unpend_first_thread>:
{
   23514:	b538      	push	{r3, r4, r5, lr}
   23516:	4604      	mov	r4, r0
	__asm__ volatile(
   23518:	f04f 0320 	mov.w	r3, #32
   2351c:	f3ef 8511 	mrs	r5, BASEPRI
   23520:	f383 8811 	msr	BASEPRI, r3
   23524:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23528:	482b      	ldr	r0, [pc, #172]	; (235d8 <z_unpend_first_thread+0xc4>)
   2352a:	f000 fbbd 	bl	23ca8 <z_spin_lock_valid>
   2352e:	b940      	cbnz	r0, 23542 <z_unpend_first_thread+0x2e>
   23530:	492a      	ldr	r1, [pc, #168]	; (235dc <z_unpend_first_thread+0xc8>)
   23532:	482b      	ldr	r0, [pc, #172]	; (235e0 <z_unpend_first_thread+0xcc>)
   23534:	227c      	movs	r2, #124	; 0x7c
   23536:	f003 fd1a 	bl	26f6e <printk>
   2353a:	217c      	movs	r1, #124	; 0x7c
   2353c:	4827      	ldr	r0, [pc, #156]	; (235dc <z_unpend_first_thread+0xc8>)
   2353e:	f003 ff8f 	bl	27460 <assert_post_action>
	z_spin_lock_set_owner(l);
   23542:	4825      	ldr	r0, [pc, #148]	; (235d8 <z_unpend_first_thread+0xc4>)
   23544:	f000 fbce 	bl	23ce4 <z_spin_lock_set_owner>
		ret = _priq_wait_best(&wait_q->waitq);
   23548:	4620      	mov	r0, r4
   2354a:	f009 fed0 	bl	2d2ee <z_priq_dumb_best>
   2354e:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23550:	4821      	ldr	r0, [pc, #132]	; (235d8 <z_unpend_first_thread+0xc4>)
   23552:	f000 fbb7 	bl	23cc4 <z_spin_unlock_valid>
   23556:	b940      	cbnz	r0, 2356a <z_unpend_first_thread+0x56>
   23558:	4920      	ldr	r1, [pc, #128]	; (235dc <z_unpend_first_thread+0xc8>)
   2355a:	4821      	ldr	r0, [pc, #132]	; (235e0 <z_unpend_first_thread+0xcc>)
   2355c:	22a7      	movs	r2, #167	; 0xa7
   2355e:	f003 fd06 	bl	26f6e <printk>
   23562:	21a7      	movs	r1, #167	; 0xa7
   23564:	481d      	ldr	r0, [pc, #116]	; (235dc <z_unpend_first_thread+0xc8>)
   23566:	f003 ff7b 	bl	27460 <assert_post_action>
	__asm__ volatile(
   2356a:	f385 8811 	msr	BASEPRI, r5
   2356e:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   23572:	b37c      	cbz	r4, 235d4 <z_unpend_first_thread+0xc0>
	__asm__ volatile(
   23574:	f04f 0320 	mov.w	r3, #32
   23578:	f3ef 8511 	mrs	r5, BASEPRI
   2357c:	f383 8811 	msr	BASEPRI, r3
   23580:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23584:	4814      	ldr	r0, [pc, #80]	; (235d8 <z_unpend_first_thread+0xc4>)
   23586:	f000 fb8f 	bl	23ca8 <z_spin_lock_valid>
   2358a:	b940      	cbnz	r0, 2359e <z_unpend_first_thread+0x8a>
   2358c:	4913      	ldr	r1, [pc, #76]	; (235dc <z_unpend_first_thread+0xc8>)
   2358e:	4814      	ldr	r0, [pc, #80]	; (235e0 <z_unpend_first_thread+0xcc>)
   23590:	227c      	movs	r2, #124	; 0x7c
   23592:	f003 fcec 	bl	26f6e <printk>
   23596:	217c      	movs	r1, #124	; 0x7c
   23598:	4810      	ldr	r0, [pc, #64]	; (235dc <z_unpend_first_thread+0xc8>)
   2359a:	f003 ff61 	bl	27460 <assert_post_action>
	z_spin_lock_set_owner(l);
   2359e:	480e      	ldr	r0, [pc, #56]	; (235d8 <z_unpend_first_thread+0xc4>)
   235a0:	f000 fba0 	bl	23ce4 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   235a4:	4620      	mov	r0, r4
   235a6:	f009 fe93 	bl	2d2d0 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   235aa:	480b      	ldr	r0, [pc, #44]	; (235d8 <z_unpend_first_thread+0xc4>)
   235ac:	f000 fb8a 	bl	23cc4 <z_spin_unlock_valid>
   235b0:	b940      	cbnz	r0, 235c4 <z_unpend_first_thread+0xb0>
   235b2:	490a      	ldr	r1, [pc, #40]	; (235dc <z_unpend_first_thread+0xc8>)
   235b4:	480a      	ldr	r0, [pc, #40]	; (235e0 <z_unpend_first_thread+0xcc>)
   235b6:	22a7      	movs	r2, #167	; 0xa7
   235b8:	f003 fcd9 	bl	26f6e <printk>
   235bc:	21a7      	movs	r1, #167	; 0xa7
   235be:	4807      	ldr	r0, [pc, #28]	; (235dc <z_unpend_first_thread+0xc8>)
   235c0:	f003 ff4e 	bl	27460 <assert_post_action>
	__asm__ volatile(
   235c4:	f385 8811 	msr	BASEPRI, r5
   235c8:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   235cc:	f104 0018 	add.w	r0, r4, #24
   235d0:	f000 fde2 	bl	24198 <z_abort_timeout>
}
   235d4:	4620      	mov	r0, r4
   235d6:	bd38      	pop	{r3, r4, r5, pc}
   235d8:	2000463c 	.word	0x2000463c
   235dc:	0002fba8 	.word	0x0002fba8
   235e0:	0002fa94 	.word	0x0002fa94

000235e4 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   235e4:	4b04      	ldr	r3, [pc, #16]	; (235f8 <z_sched_init+0x14>)
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   235e6:	2100      	movs	r1, #0
   235e8:	f103 022c 	add.w	r2, r3, #44	; 0x2c
	list->tail = (sys_dnode_t *)list;
   235ec:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
   235f0:	4608      	mov	r0, r1
   235f2:	f7ff b95b 	b.w	228ac <k_sched_time_slice_set>
   235f6:	bf00      	nop
   235f8:	20004604 	.word	0x20004604

000235fc <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   235fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   235fe:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   23602:	b153      	cbz	r3, 2361a <z_impl_k_yield+0x1e>
   23604:	493d      	ldr	r1, [pc, #244]	; (236fc <z_impl_k_yield+0x100>)
   23606:	483e      	ldr	r0, [pc, #248]	; (23700 <z_impl_k_yield+0x104>)
   23608:	f240 42cf 	movw	r2, #1231	; 0x4cf
   2360c:	f003 fcaf 	bl	26f6e <printk>
   23610:	f240 41cf 	movw	r1, #1231	; 0x4cf
   23614:	4839      	ldr	r0, [pc, #228]	; (236fc <z_impl_k_yield+0x100>)
   23616:	f003 ff23 	bl	27460 <assert_post_action>

	if (!z_is_idle_thread_object(_current)) {
   2361a:	4c3a      	ldr	r4, [pc, #232]	; (23704 <z_impl_k_yield+0x108>)
   2361c:	4e3a      	ldr	r6, [pc, #232]	; (23708 <z_impl_k_yield+0x10c>)
   2361e:	68a2      	ldr	r2, [r4, #8]
   23620:	42b2      	cmp	r2, r6
   23622:	d054      	beq.n	236ce <z_impl_k_yield+0xd2>
	__asm__ volatile(
   23624:	f04f 0320 	mov.w	r3, #32
   23628:	f3ef 8711 	mrs	r7, BASEPRI
   2362c:	f383 8811 	msr	BASEPRI, r3
   23630:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23634:	4835      	ldr	r0, [pc, #212]	; (2370c <z_impl_k_yield+0x110>)
   23636:	f000 fb37 	bl	23ca8 <z_spin_lock_valid>
   2363a:	b940      	cbnz	r0, 2364e <z_impl_k_yield+0x52>
   2363c:	4934      	ldr	r1, [pc, #208]	; (23710 <z_impl_k_yield+0x114>)
   2363e:	4830      	ldr	r0, [pc, #192]	; (23700 <z_impl_k_yield+0x104>)
   23640:	227c      	movs	r2, #124	; 0x7c
   23642:	f003 fc94 	bl	26f6e <printk>
   23646:	217c      	movs	r1, #124	; 0x7c
   23648:	4831      	ldr	r0, [pc, #196]	; (23710 <z_impl_k_yield+0x114>)
   2364a:	f003 ff09 	bl	27460 <assert_post_action>
	z_spin_lock_set_owner(l);
   2364e:	482f      	ldr	r0, [pc, #188]	; (2370c <z_impl_k_yield+0x110>)
   23650:	f000 fb48 	bl	23ce4 <z_spin_lock_set_owner>
		LOCKED(&sched_spinlock) {
			if (!IS_ENABLED(CONFIG_SMP) ||
			    z_is_thread_queued(_current)) {
				_priq_run_remove(&_kernel.ready_q.runq,
   23654:	68a1      	ldr	r1, [r4, #8]
   23656:	482f      	ldr	r0, [pc, #188]	; (23714 <z_impl_k_yield+0x118>)
   23658:	f7ff fa04 	bl	22a64 <z_priq_dumb_remove>
						 _current);
			}
			_priq_run_add(&_kernel.ready_q.runq, _current);
   2365c:	68a5      	ldr	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2365e:	42b5      	cmp	r5, r6
   23660:	d10a      	bne.n	23678 <z_impl_k_yield+0x7c>
   23662:	4926      	ldr	r1, [pc, #152]	; (236fc <z_impl_k_yield+0x100>)
   23664:	4826      	ldr	r0, [pc, #152]	; (23700 <z_impl_k_yield+0x104>)
   23666:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   2366a:	f003 fc80 	bl	26f6e <printk>
   2366e:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   23672:	4822      	ldr	r0, [pc, #136]	; (236fc <z_impl_k_yield+0x100>)
   23674:	f003 fef4 	bl	27460 <assert_post_action>
	return list->head == list;
   23678:	e9d4 310b 	ldrd	r3, r1, [r4, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2367c:	4a25      	ldr	r2, [pc, #148]	; (23714 <z_impl_k_yield+0x118>)
   2367e:	4293      	cmp	r3, r2
   23680:	d036      	beq.n	236f0 <z_impl_k_yield+0xf4>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23682:	2b00      	cmp	r3, #0
   23684:	d034      	beq.n	236f0 <z_impl_k_yield+0xf4>
	if (thread_1->base.prio < thread_2->base.prio) {
   23686:	f995 000e 	ldrsb.w	r0, [r5, #14]
   2368a:	f993 600e 	ldrsb.w	r6, [r3, #14]
   2368e:	4286      	cmp	r6, r0
   23690:	dd29      	ble.n	236e6 <z_impl_k_yield+0xea>
	node->prev = successor->prev;
   23692:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   23694:	e9c5 3200 	strd	r3, r2, [r5]
	successor->prev->next = node;
   23698:	6015      	str	r5, [r2, #0]
	successor->prev = node;
   2369a:	605d      	str	r5, [r3, #4]
			z_mark_thread_as_queued(_current);
   2369c:	68a2      	ldr	r2, [r4, #8]
	thread->base.thread_state |= states;
   2369e:	7b53      	ldrb	r3, [r2, #13]
   236a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
			update_cache(1);
   236a4:	2001      	movs	r0, #1
   236a6:	7353      	strb	r3, [r2, #13]
   236a8:	f7ff fa42 	bl	22b30 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   236ac:	4817      	ldr	r0, [pc, #92]	; (2370c <z_impl_k_yield+0x110>)
   236ae:	f000 fb09 	bl	23cc4 <z_spin_unlock_valid>
   236b2:	b940      	cbnz	r0, 236c6 <z_impl_k_yield+0xca>
   236b4:	4916      	ldr	r1, [pc, #88]	; (23710 <z_impl_k_yield+0x114>)
   236b6:	4812      	ldr	r0, [pc, #72]	; (23700 <z_impl_k_yield+0x104>)
   236b8:	22a7      	movs	r2, #167	; 0xa7
   236ba:	f003 fc58 	bl	26f6e <printk>
   236be:	21a7      	movs	r1, #167	; 0xa7
   236c0:	4813      	ldr	r0, [pc, #76]	; (23710 <z_impl_k_yield+0x114>)
   236c2:	f003 fecd 	bl	27460 <assert_post_action>
	__asm__ volatile(
   236c6:	f387 8811 	msr	BASEPRI, r7
   236ca:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   236ce:	f04f 0320 	mov.w	r3, #32
   236d2:	f3ef 8011 	mrs	r0, BASEPRI
   236d6:	f383 8811 	msr	BASEPRI, r3
   236da:	f3bf 8f6f 	isb	sy
		}
	}
	z_swap_unlocked();
}
   236de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   236e2:	f7e3 baab 	b.w	6c3c <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   236e6:	4299      	cmp	r1, r3
   236e8:	d002      	beq.n	236f0 <z_impl_k_yield+0xf4>
   236ea:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   236ec:	2b00      	cmp	r3, #0
   236ee:	d1cc      	bne.n	2368a <z_impl_k_yield+0x8e>
	node->prev = list->tail;
   236f0:	e9c5 2100 	strd	r2, r1, [r5]
	list->tail->next = node;
   236f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   236f6:	601d      	str	r5, [r3, #0]
	list->tail = node;
   236f8:	6325      	str	r5, [r4, #48]	; 0x30
   236fa:	e7cf      	b.n	2369c <z_impl_k_yield+0xa0>
   236fc:	00035c2a 	.word	0x00035c2a
   23700:	0002fa94 	.word	0x0002fa94
   23704:	20004604 	.word	0x20004604
   23708:	20002370 	.word	0x20002370
   2370c:	2000463c 	.word	0x2000463c
   23710:	0002fba8 	.word	0x0002fba8
   23714:	20004630 	.word	0x20004630

00023718 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   23718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2371c:	4606      	mov	r6, r0
   2371e:	460f      	mov	r7, r1
   23720:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   23724:	b153      	cbz	r3, 2373c <z_tick_sleep+0x24>
   23726:	4935      	ldr	r1, [pc, #212]	; (237fc <z_tick_sleep+0xe4>)
   23728:	4835      	ldr	r0, [pc, #212]	; (23800 <z_tick_sleep+0xe8>)
   2372a:	f240 42ed 	movw	r2, #1261	; 0x4ed
   2372e:	f003 fc1e 	bl	26f6e <printk>
   23732:	f240 41ed 	movw	r1, #1261	; 0x4ed
   23736:	4831      	ldr	r0, [pc, #196]	; (237fc <z_tick_sleep+0xe4>)
   23738:	f003 fe92 	bl	27460 <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   2373c:	ea56 0307 	orrs.w	r3, r6, r7
   23740:	d104      	bne.n	2374c <z_tick_sleep+0x34>
	z_impl_k_yield();
   23742:	f7ff ff5b 	bl	235fc <z_impl_k_yield>
		k_yield();
		return 0;
   23746:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
   23748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	expected_wakeup_ticks = ticks + z_tick_get_32();
   2374c:	f009 fe76 	bl	2d43c <z_tick_get_32>
   23750:	1984      	adds	r4, r0, r6
   23752:	f04f 0320 	mov.w	r3, #32
   23756:	f3ef 8811 	mrs	r8, BASEPRI
   2375a:	f383 8811 	msr	BASEPRI, r3
   2375e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23762:	4828      	ldr	r0, [pc, #160]	; (23804 <z_tick_sleep+0xec>)
   23764:	f000 faa0 	bl	23ca8 <z_spin_lock_valid>
   23768:	b940      	cbnz	r0, 2377c <z_tick_sleep+0x64>
   2376a:	4927      	ldr	r1, [pc, #156]	; (23808 <z_tick_sleep+0xf0>)
   2376c:	4824      	ldr	r0, [pc, #144]	; (23800 <z_tick_sleep+0xe8>)
   2376e:	227c      	movs	r2, #124	; 0x7c
   23770:	f003 fbfd 	bl	26f6e <printk>
   23774:	217c      	movs	r1, #124	; 0x7c
   23776:	4824      	ldr	r0, [pc, #144]	; (23808 <z_tick_sleep+0xf0>)
   23778:	f003 fe72 	bl	27460 <assert_post_action>
	pending_current = _current;
   2377c:	4d23      	ldr	r5, [pc, #140]	; (2380c <z_tick_sleep+0xf4>)
	z_spin_lock_set_owner(l);
   2377e:	4821      	ldr	r0, [pc, #132]	; (23804 <z_tick_sleep+0xec>)
   23780:	f000 fab0 	bl	23ce4 <z_spin_lock_set_owner>
   23784:	4b22      	ldr	r3, [pc, #136]	; (23810 <z_tick_sleep+0xf8>)
   23786:	68a8      	ldr	r0, [r5, #8]
   23788:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   2378a:	f7ff fd7d 	bl	23288 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   2378e:	68a8      	ldr	r0, [r5, #8]
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   23790:	4920      	ldr	r1, [pc, #128]	; (23814 <z_tick_sleep+0xfc>)
   23792:	4632      	mov	r2, r6
   23794:	463b      	mov	r3, r7
   23796:	3018      	adds	r0, #24
   23798:	f000 fc3c 	bl	24014 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   2379c:	68aa      	ldr	r2, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2379e:	4819      	ldr	r0, [pc, #100]	; (23804 <z_tick_sleep+0xec>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   237a0:	7b53      	ldrb	r3, [r2, #13]
   237a2:	f043 0310 	orr.w	r3, r3, #16
   237a6:	7353      	strb	r3, [r2, #13]
   237a8:	f000 fa8c 	bl	23cc4 <z_spin_unlock_valid>
   237ac:	b940      	cbnz	r0, 237c0 <z_tick_sleep+0xa8>
   237ae:	4916      	ldr	r1, [pc, #88]	; (23808 <z_tick_sleep+0xf0>)
   237b0:	4813      	ldr	r0, [pc, #76]	; (23800 <z_tick_sleep+0xe8>)
   237b2:	22be      	movs	r2, #190	; 0xbe
   237b4:	f003 fbdb 	bl	26f6e <printk>
   237b8:	21be      	movs	r1, #190	; 0xbe
   237ba:	4813      	ldr	r0, [pc, #76]	; (23808 <z_tick_sleep+0xf0>)
   237bc:	f003 fe50 	bl	27460 <assert_post_action>
   237c0:	4640      	mov	r0, r8
   237c2:	f7e3 fa3b 	bl	6c3c <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   237c6:	68ab      	ldr	r3, [r5, #8]
   237c8:	7b5b      	ldrb	r3, [r3, #13]
   237ca:	06db      	lsls	r3, r3, #27
   237cc:	d50a      	bpl.n	237e4 <z_tick_sleep+0xcc>
   237ce:	490b      	ldr	r1, [pc, #44]	; (237fc <z_tick_sleep+0xe4>)
   237d0:	480b      	ldr	r0, [pc, #44]	; (23800 <z_tick_sleep+0xe8>)
   237d2:	f240 520b 	movw	r2, #1291	; 0x50b
   237d6:	f003 fbca 	bl	26f6e <printk>
   237da:	f240 510b 	movw	r1, #1291	; 0x50b
   237de:	4807      	ldr	r0, [pc, #28]	; (237fc <z_tick_sleep+0xe4>)
   237e0:	f003 fe3e 	bl	27460 <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - z_tick_get_32();
   237e4:	f009 fe2a 	bl	2d43c <z_tick_get_32>
   237e8:	1a20      	subs	r0, r4, r0
   237ea:	eb64 0104 	sbc.w	r1, r4, r4
   237ee:	2800      	cmp	r0, #0
   237f0:	f171 0300 	sbcs.w	r3, r1, #0
   237f4:	bfb8      	it	lt
   237f6:	2000      	movlt	r0, #0
   237f8:	e7a6      	b.n	23748 <z_tick_sleep+0x30>
   237fa:	bf00      	nop
   237fc:	00035c2a 	.word	0x00035c2a
   23800:	0002fa94 	.word	0x0002fa94
   23804:	2000463c 	.word	0x2000463c
   23808:	0002fba8 	.word	0x0002fba8
   2380c:	20004604 	.word	0x20004604
   23810:	20004638 	.word	0x20004638
   23814:	00022ddd 	.word	0x00022ddd

00023818 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   23818:	b538      	push	{r3, r4, r5, lr}
   2381a:	4604      	mov	r4, r0
   2381c:	460d      	mov	r5, r1
   2381e:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   23822:	b153      	cbz	r3, 2383a <z_impl_k_sleep+0x22>
   23824:	4911      	ldr	r1, [pc, #68]	; (2386c <z_impl_k_sleep+0x54>)
   23826:	4812      	ldr	r0, [pc, #72]	; (23870 <z_impl_k_sleep+0x58>)
   23828:	f240 521a 	movw	r2, #1306	; 0x51a
   2382c:	f003 fb9f 	bl	26f6e <printk>
   23830:	f240 511a 	movw	r1, #1306	; 0x51a
   23834:	480d      	ldr	r0, [pc, #52]	; (2386c <z_impl_k_sleep+0x54>)
   23836:	f003 fe13 	bl	27460 <assert_post_action>
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2383a:	1c6b      	adds	r3, r5, #1
   2383c:	bf08      	it	eq
   2383e:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   23842:	d106      	bne.n	23852 <z_impl_k_sleep+0x3a>
		k_thread_suspend(_current);
   23844:	4b0b      	ldr	r3, [pc, #44]	; (23874 <z_impl_k_sleep+0x5c>)
   23846:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   23848:	f7ff fbbe 	bl	22fc8 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   2384c:	f04f 30ff 	mov.w	r0, #4294967295
	ticks = timeout.ticks;

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
   23850:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
   23852:	4620      	mov	r0, r4
   23854:	4629      	mov	r1, r5
   23856:	f7ff ff5f 	bl	23718 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   2385a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   2385e:	fb80 3403 	smull	r3, r4, r0, r3
   23862:	0bd8      	lsrs	r0, r3, #15
   23864:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   23868:	e7f2      	b.n	23850 <z_impl_k_sleep+0x38>
   2386a:	bf00      	nop
   2386c:	00035c2a 	.word	0x00035c2a
   23870:	0002fa94 	.word	0x0002fa94
   23874:	20004604 	.word	0x20004604

00023878 <z_impl_k_usleep>:
}
#include <syscalls/k_sleep_mrsh.c>
#endif

int32_t z_impl_k_usleep(int us)
{
   23878:	b538      	push	{r3, r4, r5, lr}
   2387a:	4c0b      	ldr	r4, [pc, #44]	; (238a8 <z_impl_k_usleep+0x30>)
   2387c:	4a0b      	ldr	r2, [pc, #44]	; (238ac <z_impl_k_usleep+0x34>)
   2387e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   23882:	2500      	movs	r5, #0
   23884:	fbc1 4500 	smlal	r4, r5, r1, r0
   23888:	2300      	movs	r3, #0
   2388a:	4620      	mov	r0, r4
   2388c:	4629      	mov	r1, r5
   2388e:	f7de f8cd 	bl	1a2c <__aeabi_uldivmod>
	int32_t ticks;

	ticks = k_us_to_ticks_ceil64(us);
	ticks = z_tick_sleep(ticks);
   23892:	17c1      	asrs	r1, r0, #31
   23894:	f7ff ff40 	bl	23718 <z_tick_sleep>
   23898:	4a04      	ldr	r2, [pc, #16]	; (238ac <z_impl_k_usleep+0x34>)
   2389a:	fb80 2302 	smull	r2, r3, r0, r2
   2389e:	0bd0      	lsrs	r0, r2, #15
	return k_ticks_to_us_floor64(ticks);
}
   238a0:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   238a4:	bd38      	pop	{r3, r4, r5, pc}
   238a6:	bf00      	nop
   238a8:	000f423f 	.word	0x000f423f
   238ac:	000f4240 	.word	0x000f4240

000238b0 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   238b0:	4b01      	ldr	r3, [pc, #4]	; (238b8 <z_impl_k_current_get+0x8>)
   238b2:	6898      	ldr	r0, [r3, #8]
   238b4:	4770      	bx	lr
   238b6:	bf00      	nop
   238b8:	20004604 	.word	0x20004604

000238bc <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   238bc:	b538      	push	{r3, r4, r5, lr}
   238be:	4604      	mov	r4, r0
   238c0:	f04f 0320 	mov.w	r3, #32
   238c4:	f3ef 8511 	mrs	r5, BASEPRI
   238c8:	f383 8811 	msr	BASEPRI, r3
   238cc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   238d0:	4815      	ldr	r0, [pc, #84]	; (23928 <z_impl_k_sem_give+0x6c>)
   238d2:	f000 f9e9 	bl	23ca8 <z_spin_lock_valid>
   238d6:	b940      	cbnz	r0, 238ea <z_impl_k_sem_give+0x2e>
   238d8:	4914      	ldr	r1, [pc, #80]	; (2392c <z_impl_k_sem_give+0x70>)
   238da:	4815      	ldr	r0, [pc, #84]	; (23930 <z_impl_k_sem_give+0x74>)
   238dc:	227c      	movs	r2, #124	; 0x7c
   238de:	f003 fb46 	bl	26f6e <printk>
   238e2:	217c      	movs	r1, #124	; 0x7c
   238e4:	4811      	ldr	r0, [pc, #68]	; (2392c <z_impl_k_sem_give+0x70>)
   238e6:	f003 fdbb 	bl	27460 <assert_post_action>
	z_spin_lock_set_owner(l);
   238ea:	480f      	ldr	r0, [pc, #60]	; (23928 <z_impl_k_sem_give+0x6c>)
   238ec:	f000 f9fa 	bl	23ce4 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
   238f0:	4620      	mov	r0, r4
   238f2:	f7ff fe0f 	bl	23514 <z_unpend_first_thread>

	if (thread != NULL) {
   238f6:	b150      	cbz	r0, 2390e <z_impl_k_sem_give+0x52>
   238f8:	2200      	movs	r2, #0
   238fa:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   238fe:	f7ff f9f5 	bl	22cec <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   23902:	4629      	mov	r1, r5
   23904:	4808      	ldr	r0, [pc, #32]	; (23928 <z_impl_k_sem_give+0x6c>)
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
   23906:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   2390a:	f7ff b81d 	b.w	22948 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   2390e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   23912:	429a      	cmp	r2, r3
   23914:	bf18      	it	ne
   23916:	3301      	addne	r3, #1
   23918:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   2391a:	2102      	movs	r1, #2
   2391c:	f104 0010 	add.w	r0, r4, #16
   23920:	f009 fe05 	bl	2d52e <z_handle_obj_poll_events>
   23924:	e7ed      	b.n	23902 <z_impl_k_sem_give+0x46>
   23926:	bf00      	nop
   23928:	20004648 	.word	0x20004648
   2392c:	0002fba8 	.word	0x0002fba8
   23930:	0002fa94 	.word	0x0002fa94

00023934 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   23934:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   23936:	4605      	mov	r5, r0
   23938:	4616      	mov	r6, r2
   2393a:	461f      	mov	r7, r3
   2393c:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   23940:	b15b      	cbz	r3, 2395a <z_impl_k_sem_take+0x26>
   23942:	ea56 0307 	orrs.w	r3, r6, r7
   23946:	d008      	beq.n	2395a <z_impl_k_sem_take+0x26>
   23948:	492b      	ldr	r1, [pc, #172]	; (239f8 <z_impl_k_sem_take+0xc4>)
   2394a:	482c      	ldr	r0, [pc, #176]	; (239fc <z_impl_k_sem_take+0xc8>)
   2394c:	228d      	movs	r2, #141	; 0x8d
   2394e:	f003 fb0e 	bl	26f6e <printk>
   23952:	218d      	movs	r1, #141	; 0x8d
   23954:	4828      	ldr	r0, [pc, #160]	; (239f8 <z_impl_k_sem_take+0xc4>)
   23956:	f003 fd83 	bl	27460 <assert_post_action>
   2395a:	f04f 0320 	mov.w	r3, #32
   2395e:	f3ef 8411 	mrs	r4, BASEPRI
   23962:	f383 8811 	msr	BASEPRI, r3
   23966:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2396a:	4825      	ldr	r0, [pc, #148]	; (23a00 <z_impl_k_sem_take+0xcc>)
   2396c:	f000 f99c 	bl	23ca8 <z_spin_lock_valid>
   23970:	b940      	cbnz	r0, 23984 <z_impl_k_sem_take+0x50>
   23972:	4924      	ldr	r1, [pc, #144]	; (23a04 <z_impl_k_sem_take+0xd0>)
   23974:	4821      	ldr	r0, [pc, #132]	; (239fc <z_impl_k_sem_take+0xc8>)
   23976:	227c      	movs	r2, #124	; 0x7c
   23978:	f003 faf9 	bl	26f6e <printk>
   2397c:	217c      	movs	r1, #124	; 0x7c
   2397e:	4821      	ldr	r0, [pc, #132]	; (23a04 <z_impl_k_sem_take+0xd0>)
   23980:	f003 fd6e 	bl	27460 <assert_post_action>
	z_spin_lock_set_owner(l);
   23984:	481e      	ldr	r0, [pc, #120]	; (23a00 <z_impl_k_sem_take+0xcc>)
   23986:	f000 f9ad 	bl	23ce4 <z_spin_lock_set_owner>
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
   2398a:	68ab      	ldr	r3, [r5, #8]
   2398c:	b1ab      	cbz	r3, 239ba <z_impl_k_sem_take+0x86>
		sem->count--;
   2398e:	3b01      	subs	r3, #1
   23990:	60ab      	str	r3, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23992:	481b      	ldr	r0, [pc, #108]	; (23a00 <z_impl_k_sem_take+0xcc>)
   23994:	f000 f996 	bl	23cc4 <z_spin_unlock_valid>
   23998:	b940      	cbnz	r0, 239ac <z_impl_k_sem_take+0x78>
   2399a:	491a      	ldr	r1, [pc, #104]	; (23a04 <z_impl_k_sem_take+0xd0>)
   2399c:	4817      	ldr	r0, [pc, #92]	; (239fc <z_impl_k_sem_take+0xc8>)
   2399e:	22a7      	movs	r2, #167	; 0xa7
   239a0:	f003 fae5 	bl	26f6e <printk>
   239a4:	21a7      	movs	r1, #167	; 0xa7
   239a6:	4817      	ldr	r0, [pc, #92]	; (23a04 <z_impl_k_sem_take+0xd0>)
   239a8:	f003 fd5a 	bl	27460 <assert_post_action>
	__asm__ volatile(
   239ac:	f384 8811 	msr	BASEPRI, r4
   239b0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   239b4:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   239b6:	b003      	add	sp, #12
   239b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   239ba:	ea56 0307 	orrs.w	r3, r6, r7
   239be:	d113      	bne.n	239e8 <z_impl_k_sem_take+0xb4>
   239c0:	480f      	ldr	r0, [pc, #60]	; (23a00 <z_impl_k_sem_take+0xcc>)
   239c2:	f000 f97f 	bl	23cc4 <z_spin_unlock_valid>
   239c6:	b940      	cbnz	r0, 239da <z_impl_k_sem_take+0xa6>
   239c8:	490e      	ldr	r1, [pc, #56]	; (23a04 <z_impl_k_sem_take+0xd0>)
   239ca:	480c      	ldr	r0, [pc, #48]	; (239fc <z_impl_k_sem_take+0xc8>)
   239cc:	22a7      	movs	r2, #167	; 0xa7
   239ce:	f003 face 	bl	26f6e <printk>
   239d2:	21a7      	movs	r1, #167	; 0xa7
   239d4:	480b      	ldr	r0, [pc, #44]	; (23a04 <z_impl_k_sem_take+0xd0>)
   239d6:	f003 fd43 	bl	27460 <assert_post_action>
   239da:	f384 8811 	msr	BASEPRI, r4
   239de:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   239e2:	f06f 000f 	mvn.w	r0, #15
		goto out;
   239e6:	e7e6      	b.n	239b6 <z_impl_k_sem_take+0x82>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   239e8:	e9cd 6700 	strd	r6, r7, [sp]
   239ec:	462a      	mov	r2, r5
   239ee:	4621      	mov	r1, r4
   239f0:	4803      	ldr	r0, [pc, #12]	; (23a00 <z_impl_k_sem_take+0xcc>)
   239f2:	f7ff fced 	bl	233d0 <z_pend_curr>
	return ret;
   239f6:	e7de      	b.n	239b6 <z_impl_k_sem_take+0x82>
   239f8:	00035c4c 	.word	0x00035c4c
   239fc:	0002fa94 	.word	0x0002fa94
   23a00:	20004648 	.word	0x20004648
   23a04:	0002fba8 	.word	0x0002fba8

00023a08 <k_sys_work_q_init>:
K_KERNEL_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   23a08:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   23a0a:	4c08      	ldr	r4, [pc, #32]	; (23a2c <k_sys_work_q_init+0x24>)
   23a0c:	4908      	ldr	r1, [pc, #32]	; (23a30 <k_sys_work_q_init+0x28>)
   23a0e:	f04f 33ff 	mov.w	r3, #4294967295
   23a12:	f44f 6200 	mov.w	r2, #2048	; 0x800
   23a16:	4620      	mov	r0, r4
   23a18:	f000 f998 	bl	23d4c <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   23a1c:	4905      	ldr	r1, [pc, #20]	; (23a34 <k_sys_work_q_init+0x2c>)
   23a1e:	f104 0020 	add.w	r0, r4, #32
   23a22:	f009 fc94 	bl	2d34e <z_impl_k_thread_name_set>
		       K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   23a26:	2000      	movs	r0, #0
   23a28:	bd10      	pop	{r4, pc}
   23a2a:	bf00      	nop
   23a2c:	20002490 	.word	0x20002490
   23a30:	20006a80 	.word	0x20006a80
   23a34:	00035c6c 	.word	0x00035c6c

00023a38 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   23a38:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   23a3c:	4698      	mov	r8, r3
   23a3e:	4b32      	ldr	r3, [pc, #200]	; (23b08 <z_setup_new_thread+0xd0>)
   23a40:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   23a42:	f3bf 8f5b 	dmb	ish
   23a46:	4616      	mov	r6, r2
   23a48:	4604      	mov	r4, r0
   23a4a:	460f      	mov	r7, r1
   23a4c:	f100 0238 	add.w	r2, r0, #56	; 0x38
   23a50:	e852 1f00 	ldrex	r1, [r2]
   23a54:	e842 3000 	strex	r0, r3, [r2]
   23a58:	2800      	cmp	r0, #0
   23a5a:	d1f9      	bne.n	23a50 <z_setup_new_thread+0x18>
   23a5c:	f3bf 8f5b 	dmb	ish
	atomic_val_t old_val = atomic_set(&new_thread->base.cookie,
					  THREAD_COOKIE);
	/* Must be garbage or 0, never already set. Cleared at the end of
	 * z_thread_single_abort()
	 */
	__ASSERT(old_val != THREAD_COOKIE,
   23a60:	4299      	cmp	r1, r3
   23a62:	d10a      	bne.n	23a7a <z_setup_new_thread+0x42>
   23a64:	4929      	ldr	r1, [pc, #164]	; (23b0c <z_setup_new_thread+0xd4>)
   23a66:	482a      	ldr	r0, [pc, #168]	; (23b10 <z_setup_new_thread+0xd8>)
   23a68:	f44f 7209 	mov.w	r2, #548	; 0x224
   23a6c:	f003 fa7f 	bl	26f6e <printk>
   23a70:	f44f 7109 	mov.w	r1, #548	; 0x224
   23a74:	4825      	ldr	r0, [pc, #148]	; (23b0c <z_setup_new_thread+0xd4>)
   23a76:	f003 fcf3 	bl	27460 <assert_post_action>
		 "re-use of active thread object %p detected", new_thread);
#endif
	Z_ASSERT_VALID_PRIO(prio, entry);
   23a7a:	2d0f      	cmp	r5, #15
   23a7c:	d133      	bne.n	23ae6 <z_setup_new_thread+0xae>
   23a7e:	4b25      	ldr	r3, [pc, #148]	; (23b14 <z_setup_new_thread+0xdc>)
   23a80:	4598      	cmp	r8, r3
   23a82:	d134      	bne.n	23aee <z_setup_new_thread+0xb6>
	sys_dlist_init(&w->waitq);
   23a84:	f104 0330 	add.w	r3, r4, #48	; 0x30
	list->tail = (sys_dnode_t *)list;
   23a88:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
   23a8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   23a8e:	7323      	strb	r3, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   23a90:	2304      	movs	r3, #4
   23a92:	7363      	strb	r3, [r4, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   23a94:	1df3      	adds	r3, r6, #7
   23a96:	f023 0307 	bic.w	r3, r3, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   23a9a:	f107 0220 	add.w	r2, r7, #32
	new_thread->stack_info.size = stack_buf_size;
   23a9e:	e9c4 231d 	strd	r2, r3, [r4, #116]	; 0x74
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   23aa2:	f103 0620 	add.w	r6, r3, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   23aa6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   23aa8:	9302      	str	r3, [sp, #8]
   23aaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c

	thread_base->prio = priority;
   23aac:	73a5      	strb	r5, [r4, #14]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   23aae:	9301      	str	r3, [sp, #4]

	thread_base->sched_locked = 0U;
   23ab0:	2500      	movs	r5, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   23ab2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   23ab4:	9300      	str	r3, [sp, #0]
	stack_ptr = (char *)stack + stack_obj_size;
   23ab6:	443e      	add	r6, r7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   23ab8:	4643      	mov	r3, r8
	thread_base->sched_locked = 0U;
   23aba:	73e5      	strb	r5, [r4, #15]
	node->prev = NULL;
   23abc:	e9c4 5506 	strd	r5, r5, [r4, #24]
	new_thread->stack_info.delta = delta;
   23ac0:	67e5      	str	r5, [r4, #124]	; 0x7c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   23ac2:	4632      	mov	r2, r6
   23ac4:	4639      	mov	r1, r7
   23ac6:	4620      	mov	r0, r4
   23ac8:	f7e3 f978 	bl	6dbc <arch_new_thread>
	if (!_current) {
   23acc:	4b12      	ldr	r3, [pc, #72]	; (23b18 <z_setup_new_thread+0xe0>)
   23ace:	689b      	ldr	r3, [r3, #8]
	new_thread->fn_abort = NULL;
   23ad0:	e9c4 5519 	strd	r5, r5, [r4, #100]	; 0x64
	if (!_current) {
   23ad4:	b10b      	cbz	r3, 23ada <z_setup_new_thread+0xa2>
	new_thread->resource_pool = _current->resource_pool;
   23ad6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
	return stack_ptr;
   23ada:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
   23ade:	4630      	mov	r0, r6
   23ae0:	b004      	add	sp, #16
   23ae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   23ae6:	f105 0310 	add.w	r3, r5, #16
   23aea:	2b1e      	cmp	r3, #30
   23aec:	d9ca      	bls.n	23a84 <z_setup_new_thread+0x4c>
   23aee:	f240 2226 	movw	r2, #550	; 0x226
   23af2:	4906      	ldr	r1, [pc, #24]	; (23b0c <z_setup_new_thread+0xd4>)
   23af4:	4806      	ldr	r0, [pc, #24]	; (23b10 <z_setup_new_thread+0xd8>)
   23af6:	f003 fa3a 	bl	26f6e <printk>
   23afa:	f240 2126 	movw	r1, #550	; 0x226
   23afe:	4803      	ldr	r0, [pc, #12]	; (23b0c <z_setup_new_thread+0xd4>)
   23b00:	f003 fcae 	bl	27460 <assert_post_action>
   23b04:	e7be      	b.n	23a84 <z_setup_new_thread+0x4c>
   23b06:	bf00      	nop
   23b08:	1337c0d3 	.word	0x1337c0d3
   23b0c:	00035c75 	.word	0x00035c75
   23b10:	0002fa94 	.word	0x0002fa94
   23b14:	00021d3d 	.word	0x00021d3d
   23b18:	20004604 	.word	0x20004604

00023b1c <z_impl_k_thread_create>:
{
   23b1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23b20:	b087      	sub	sp, #28
   23b22:	4604      	mov	r4, r0
   23b24:	460d      	mov	r5, r1
   23b26:	4690      	mov	r8, r2
   23b28:	4699      	mov	r9, r3
   23b2a:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
   23b2e:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   23b32:	b153      	cbz	r3, 23b4a <z_impl_k_thread_create+0x2e>
   23b34:	4919      	ldr	r1, [pc, #100]	; (23b9c <z_impl_k_thread_create+0x80>)
   23b36:	481a      	ldr	r0, [pc, #104]	; (23ba0 <z_impl_k_thread_create+0x84>)
   23b38:	f240 228f 	movw	r2, #655	; 0x28f
   23b3c:	f003 fa17 	bl	26f6e <printk>
   23b40:	f240 218f 	movw	r1, #655	; 0x28f
   23b44:	4815      	ldr	r0, [pc, #84]	; (23b9c <z_impl_k_thread_create+0x80>)
   23b46:	f003 fc8b 	bl	27460 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   23b4a:	2300      	movs	r3, #0
   23b4c:	9305      	str	r3, [sp, #20]
   23b4e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   23b50:	9304      	str	r3, [sp, #16]
   23b52:	9b11      	ldr	r3, [sp, #68]	; 0x44
   23b54:	9303      	str	r3, [sp, #12]
   23b56:	9b10      	ldr	r3, [sp, #64]	; 0x40
   23b58:	9302      	str	r3, [sp, #8]
   23b5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   23b5c:	9301      	str	r3, [sp, #4]
   23b5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   23b60:	9300      	str	r3, [sp, #0]
   23b62:	4642      	mov	r2, r8
   23b64:	464b      	mov	r3, r9
   23b66:	4629      	mov	r1, r5
   23b68:	4620      	mov	r0, r4
   23b6a:	f7ff ff65 	bl	23a38 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   23b6e:	1c7b      	adds	r3, r7, #1
   23b70:	bf08      	it	eq
   23b72:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   23b76:	d005      	beq.n	23b84 <z_impl_k_thread_create+0x68>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   23b78:	ea56 0307 	orrs.w	r3, r6, r7
   23b7c:	d106      	bne.n	23b8c <z_impl_k_thread_create+0x70>
	z_sched_start(thread);
   23b7e:	4620      	mov	r0, r4
   23b80:	f7ff f8ea 	bl	22d58 <z_sched_start>
}
   23b84:	4620      	mov	r0, r4
   23b86:	b007      	add	sp, #28
   23b88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   23b8c:	4632      	mov	r2, r6
   23b8e:	463b      	mov	r3, r7
   23b90:	4904      	ldr	r1, [pc, #16]	; (23ba4 <z_impl_k_thread_create+0x88>)
   23b92:	f104 0018 	add.w	r0, r4, #24
   23b96:	f000 fa3d 	bl	24014 <z_add_timeout>
   23b9a:	e7f3      	b.n	23b84 <z_impl_k_thread_create+0x68>
   23b9c:	00035c75 	.word	0x00035c75
   23ba0:	0002fa94 	.word	0x0002fa94
   23ba4:	00022ddd 	.word	0x00022ddd

00023ba8 <z_init_static_threads>:
{
   23ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   23bac:	4f39      	ldr	r7, [pc, #228]	; (23c94 <z_init_static_threads+0xec>)
   23bae:	4d3a      	ldr	r5, [pc, #232]	; (23c98 <z_init_static_threads+0xf0>)
   23bb0:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 23ca0 <z_init_static_threads+0xf8>
{
   23bb4:	b086      	sub	sp, #24
   23bb6:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
   23bb8:	42bd      	cmp	r5, r7
   23bba:	d90a      	bls.n	23bd2 <z_init_static_threads+0x2a>
   23bbc:	4641      	mov	r1, r8
   23bbe:	4837      	ldr	r0, [pc, #220]	; (23c9c <z_init_static_threads+0xf4>)
   23bc0:	f240 22fd 	movw	r2, #765	; 0x2fd
   23bc4:	f003 f9d3 	bl	26f6e <printk>
   23bc8:	f240 21fd 	movw	r1, #765	; 0x2fd
   23bcc:	4640      	mov	r0, r8
   23bce:	f003 fc47 	bl	27460 <assert_post_action>
   23bd2:	42b5      	cmp	r5, r6
   23bd4:	f105 0430 	add.w	r4, r5, #48	; 0x30
   23bd8:	d31d      	bcc.n	23c16 <z_init_static_threads+0x6e>
	k_sched_lock();
   23bda:	f7fe feeb 	bl	229b4 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   23bde:	4c2e      	ldr	r4, [pc, #184]	; (23c98 <z_init_static_threads+0xf0>)
   23be0:	4d2f      	ldr	r5, [pc, #188]	; (23ca0 <z_init_static_threads+0xf8>)
   23be2:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 23c9c <z_init_static_threads+0xf4>
   23be6:	f240 38e7 	movw	r8, #999	; 0x3e7
   23bea:	f04f 0900 	mov.w	r9, #0
   23bee:	42b4      	cmp	r4, r6
   23bf0:	d90a      	bls.n	23c08 <z_init_static_threads+0x60>
   23bf2:	4629      	mov	r1, r5
   23bf4:	4650      	mov	r0, sl
   23bf6:	f44f 7247 	mov.w	r2, #796	; 0x31c
   23bfa:	f003 f9b8 	bl	26f6e <printk>
   23bfe:	f44f 7147 	mov.w	r1, #796	; 0x31c
   23c02:	4628      	mov	r0, r5
   23c04:	f003 fc2c 	bl	27460 <assert_post_action>
   23c08:	42b4      	cmp	r4, r6
   23c0a:	d321      	bcc.n	23c50 <z_init_static_threads+0xa8>
}
   23c0c:	b006      	add	sp, #24
   23c0e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
   23c12:	f7fe bfc7 	b.w	22ba4 <k_sched_unlock>
		z_setup_new_thread(
   23c16:	f854 3c04 	ldr.w	r3, [r4, #-4]
   23c1a:	9305      	str	r3, [sp, #20]
   23c1c:	f854 3c10 	ldr.w	r3, [r4, #-16]
   23c20:	9304      	str	r3, [sp, #16]
   23c22:	f854 3c14 	ldr.w	r3, [r4, #-20]
   23c26:	9303      	str	r3, [sp, #12]
   23c28:	f854 3c18 	ldr.w	r3, [r4, #-24]
   23c2c:	9302      	str	r3, [sp, #8]
   23c2e:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   23c32:	9301      	str	r3, [sp, #4]
   23c34:	f854 3c20 	ldr.w	r3, [r4, #-32]
   23c38:	9300      	str	r3, [sp, #0]
   23c3a:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   23c3e:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   23c42:	f7ff fef9 	bl	23a38 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   23c46:	f854 3c30 	ldr.w	r3, [r4, #-48]
   23c4a:	665d      	str	r5, [r3, #100]	; 0x64
   23c4c:	4625      	mov	r5, r4
   23c4e:	e7b3      	b.n	23bb8 <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   23c50:	6a63      	ldr	r3, [r4, #36]	; 0x24
   23c52:	1c5a      	adds	r2, r3, #1
   23c54:	d00f      	beq.n	23c76 <z_init_static_threads+0xce>
					    K_MSEC(thread_data->init_delay));
   23c56:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   23c5a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   23c5e:	4640      	mov	r0, r8
   23c60:	4649      	mov	r1, r9
   23c62:	fbc2 0103 	smlal	r0, r1, r2, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   23c66:	4549      	cmp	r1, r9
   23c68:	bf08      	it	eq
   23c6a:	4540      	cmpeq	r0, r8
			schedule_new_thread(thread_data->init_thread,
   23c6c:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   23c6e:	d104      	bne.n	23c7a <z_init_static_threads+0xd2>
	z_sched_start(thread);
   23c70:	4638      	mov	r0, r7
   23c72:	f7ff f871 	bl	22d58 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   23c76:	3430      	adds	r4, #48	; 0x30
   23c78:	e7b9      	b.n	23bee <z_init_static_threads+0x46>
   23c7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   23c7e:	2300      	movs	r3, #0
   23c80:	f7dd fed4 	bl	1a2c <__aeabi_uldivmod>
   23c84:	4602      	mov	r2, r0
   23c86:	460b      	mov	r3, r1
   23c88:	f107 0018 	add.w	r0, r7, #24
   23c8c:	4905      	ldr	r1, [pc, #20]	; (23ca4 <z_init_static_threads+0xfc>)
   23c8e:	f000 f9c1 	bl	24014 <z_add_timeout>
   23c92:	e7f0      	b.n	23c76 <z_init_static_threads+0xce>
   23c94:	20001210 	.word	0x20001210
   23c98:	20001210 	.word	0x20001210
   23c9c:	0002fa94 	.word	0x0002fa94
   23ca0:	00035c75 	.word	0x00035c75
   23ca4:	00022ddd 	.word	0x00022ddd

00023ca8 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   23ca8:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu) {
   23caa:	b138      	cbz	r0, 23cbc <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   23cac:	4b04      	ldr	r3, [pc, #16]	; (23cc0 <z_spin_lock_valid+0x18>)
   23cae:	7e1b      	ldrb	r3, [r3, #24]
   23cb0:	f000 0003 	and.w	r0, r0, #3
   23cb4:	1ac0      	subs	r0, r0, r3
   23cb6:	bf18      	it	ne
   23cb8:	2001      	movne	r0, #1
   23cba:	4770      	bx	lr
			return false;
		}
	}
	return true;
   23cbc:	2001      	movs	r0, #1
}
   23cbe:	4770      	bx	lr
   23cc0:	20004604 	.word	0x20004604

00023cc4 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   23cc4:	4a06      	ldr	r2, [pc, #24]	; (23ce0 <z_spin_unlock_valid+0x1c>)
   23cc6:	7e11      	ldrb	r1, [r2, #24]
   23cc8:	6893      	ldr	r3, [r2, #8]
   23cca:	6802      	ldr	r2, [r0, #0]
   23ccc:	430b      	orrs	r3, r1
   23cce:	429a      	cmp	r2, r3
   23cd0:	f04f 0300 	mov.w	r3, #0
		return false;
	}
	l->thread_cpu = 0;
   23cd4:	bf06      	itte	eq
   23cd6:	6003      	streq	r3, [r0, #0]
	return true;
   23cd8:	2001      	moveq	r0, #1
		return false;
   23cda:	4618      	movne	r0, r3
}
   23cdc:	4770      	bx	lr
   23cde:	bf00      	nop
   23ce0:	20004604 	.word	0x20004604

00023ce4 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   23ce4:	4a02      	ldr	r2, [pc, #8]	; (23cf0 <z_spin_lock_set_owner+0xc>)
   23ce6:	7e11      	ldrb	r1, [r2, #24]
   23ce8:	6893      	ldr	r3, [r2, #8]
   23cea:	430b      	orrs	r3, r1
   23cec:	6003      	str	r3, [r0, #0]
}
   23cee:	4770      	bx	lr
   23cf0:	20004604 	.word	0x20004604

00023cf4 <z_self_abort>:
#include <syscall_handler.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

FUNC_NORETURN void z_self_abort(void)
{
   23cf4:	b508      	push	{r3, lr}
	__asm__ volatile(
   23cf6:	f04f 0320 	mov.w	r3, #32
   23cfa:	f3ef 8511 	mrs	r5, BASEPRI
   23cfe:	f383 8811 	msr	BASEPRI, r3
   23d02:	f3bf 8f6f 	isb	sy
	/* Lock local IRQs to prevent us from migrating to another CPU
	 * while we set this up
	 */
	key = arch_irq_lock();
	cpu = _current_cpu;
	__ASSERT(cpu->pending_abort == NULL, "already have a thread to abort");
   23d06:	4c0e      	ldr	r4, [pc, #56]	; (23d40 <z_self_abort+0x4c>)
   23d08:	6923      	ldr	r3, [r4, #16]
   23d0a:	b143      	cbz	r3, 23d1e <z_self_abort+0x2a>
   23d0c:	490d      	ldr	r1, [pc, #52]	; (23d44 <z_self_abort+0x50>)
   23d0e:	480e      	ldr	r0, [pc, #56]	; (23d48 <z_self_abort+0x54>)
   23d10:	2228      	movs	r2, #40	; 0x28
   23d12:	f003 f92c 	bl	26f6e <printk>
   23d16:	2128      	movs	r1, #40	; 0x28
   23d18:	480a      	ldr	r0, [pc, #40]	; (23d44 <z_self_abort+0x50>)
   23d1a:	f003 fba1 	bl	27460 <assert_post_action>
	cpu->pending_abort = _current;
   23d1e:	68a0      	ldr	r0, [r4, #8]
   23d20:	6120      	str	r0, [r4, #16]
	z_impl_k_thread_suspend(thread);
   23d22:	f7ff f951 	bl	22fc8 <z_impl_k_thread_suspend>
   23d26:	4628      	mov	r0, r5
   23d28:	f7e2 ff88 	bl	6c3c <arch_swap>
	LOG_DBG("%p self-aborting, handle on idle thread %p",
		_current, cpu->idle_thread);

	k_thread_suspend(_current);
	z_swap_irqlock(key);
	__ASSERT(false, "should never get here");
   23d2c:	4905      	ldr	r1, [pc, #20]	; (23d44 <z_self_abort+0x50>)
   23d2e:	4806      	ldr	r0, [pc, #24]	; (23d48 <z_self_abort+0x54>)
   23d30:	2230      	movs	r2, #48	; 0x30
   23d32:	f003 f91c 	bl	26f6e <printk>
   23d36:	2130      	movs	r1, #48	; 0x30
   23d38:	4802      	ldr	r0, [pc, #8]	; (23d44 <z_self_abort+0x50>)
   23d3a:	f003 fb91 	bl	27460 <assert_post_action>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   23d3e:	bf00      	nop
   23d40:	20004604 	.word	0x20004604
   23d44:	00035c98 	.word	0x00035c98
   23d48:	0002fa94 	.word	0x0002fa94

00023d4c <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   23d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23d50:	4605      	mov	r5, r0
   23d52:	b088      	sub	sp, #32
   23d54:	460e      	mov	r6, r1
   23d56:	4617      	mov	r7, r2
   23d58:	4698      	mov	r8, r3
	z_impl_k_queue_init(queue);
   23d5a:	f009 fa78 	bl	2d24e <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   23d5e:	f105 0420 	add.w	r4, r5, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   23d62:	2000      	movs	r0, #0
   23d64:	2200      	movs	r2, #0
   23d66:	2300      	movs	r3, #0
   23d68:	e9cd 2306 	strd	r2, r3, [sp, #24]
   23d6c:	e9cd 8003 	strd	r8, r0, [sp, #12]
   23d70:	e9cd 0001 	strd	r0, r0, [sp, #4]
   23d74:	9500      	str	r5, [sp, #0]
   23d76:	4b06      	ldr	r3, [pc, #24]	; (23d90 <k_work_q_start+0x44>)
   23d78:	463a      	mov	r2, r7
   23d7a:	4631      	mov	r1, r6
   23d7c:	4620      	mov	r0, r4
   23d7e:	f7ff fecd 	bl	23b1c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   23d82:	4904      	ldr	r1, [pc, #16]	; (23d94 <k_work_q_start+0x48>)
   23d84:	4620      	mov	r0, r4
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   23d86:	b008      	add	sp, #32
   23d88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   23d8c:	f009 badf 	b.w	2d34e <z_impl_k_thread_name_set>
   23d90:	00004ac1 	.word	0x00004ac1
   23d94:	00035cc1 	.word	0x00035cc1

00023d98 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   k_timeout_t delay)
{
   23d98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23d9c:	4606      	mov	r6, r0
   23d9e:	460d      	mov	r5, r1
   23da0:	4690      	mov	r8, r2
   23da2:	4699      	mov	r9, r3
   23da4:	f04f 0320 	mov.w	r3, #32
   23da8:	f3ef 8711 	mrs	r7, BASEPRI
   23dac:	f383 8811 	msr	BASEPRI, r3
   23db0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23db4:	482c      	ldr	r0, [pc, #176]	; (23e68 <k_delayed_work_submit_to_queue+0xd0>)
   23db6:	f7ff ff77 	bl	23ca8 <z_spin_lock_valid>
   23dba:	b940      	cbnz	r0, 23dce <k_delayed_work_submit_to_queue+0x36>
   23dbc:	492b      	ldr	r1, [pc, #172]	; (23e6c <k_delayed_work_submit_to_queue+0xd4>)
   23dbe:	482c      	ldr	r0, [pc, #176]	; (23e70 <k_delayed_work_submit_to_queue+0xd8>)
   23dc0:	227c      	movs	r2, #124	; 0x7c
   23dc2:	f003 f8d4 	bl	26f6e <printk>
   23dc6:	217c      	movs	r1, #124	; 0x7c
   23dc8:	4828      	ldr	r0, [pc, #160]	; (23e6c <k_delayed_work_submit_to_queue+0xd4>)
   23dca:	f003 fb49 	bl	27460 <assert_post_action>
	z_spin_lock_set_owner(l);
   23dce:	4826      	ldr	r0, [pc, #152]	; (23e68 <k_delayed_work_submit_to_queue+0xd0>)
   23dd0:	f7ff ff88 	bl	23ce4 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   23dd4:	6aab      	ldr	r3, [r5, #40]	; 0x28
   23dd6:	b1e3      	cbz	r3, 23e12 <k_delayed_work_submit_to_queue+0x7a>
   23dd8:	42b3      	cmp	r3, r6
   23dda:	d142      	bne.n	23e62 <k_delayed_work_submit_to_queue+0xca>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   23ddc:	4628      	mov	r0, r5
   23dde:	f009 fada 	bl	2d396 <work_cancel>
		/* -EALREADY may indicate the work has already completed so
		 * this is likely a recurring work.  It may also indicate that
		 * the work handler is still executing.  But it's neither
		 * delayed nor pending, so it can be rescheduled.
		 */
		if (err == -EALREADY) {
   23de2:	f110 0f78 	cmn.w	r0, #120	; 0x78
		err = work_cancel(work);
   23de6:	4604      	mov	r4, r0
		if (err == -EALREADY) {
   23de8:	d015      	beq.n	23e16 <k_delayed_work_submit_to_queue+0x7e>
			err = 0;
		} else if (err < 0) {
   23dea:	2800      	cmp	r0, #0
   23dec:	da14      	bge.n	23e18 <k_delayed_work_submit_to_queue+0x80>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23dee:	481e      	ldr	r0, [pc, #120]	; (23e68 <k_delayed_work_submit_to_queue+0xd0>)
   23df0:	f7ff ff68 	bl	23cc4 <z_spin_unlock_valid>
   23df4:	b940      	cbnz	r0, 23e08 <k_delayed_work_submit_to_queue+0x70>
   23df6:	491d      	ldr	r1, [pc, #116]	; (23e6c <k_delayed_work_submit_to_queue+0xd4>)
   23df8:	481d      	ldr	r0, [pc, #116]	; (23e70 <k_delayed_work_submit_to_queue+0xd8>)
   23dfa:	22a7      	movs	r2, #167	; 0xa7
   23dfc:	f003 f8b7 	bl	26f6e <printk>
   23e00:	21a7      	movs	r1, #167	; 0xa7
   23e02:	481a      	ldr	r0, [pc, #104]	; (23e6c <k_delayed_work_submit_to_queue+0xd4>)
   23e04:	f003 fb2c 	bl	27460 <assert_post_action>
	__asm__ volatile(
   23e08:	f387 8811 	msr	BASEPRI, r7
   23e0c:	f3bf 8f6f 	isb	sy
	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout, delay);

done:
	k_spin_unlock(&lock, key);
	return err;
   23e10:	e01c      	b.n	23e4c <k_delayed_work_submit_to_queue+0xb4>
	if (work->work_q == work_q) {
   23e12:	2e00      	cmp	r6, #0
   23e14:	d0e2      	beq.n	23ddc <k_delayed_work_submit_to_queue+0x44>
	int err = 0;
   23e16:	2400      	movs	r4, #0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   23e18:	ea58 0309 	orrs.w	r3, r8, r9
	work->work_q = work_q;
   23e1c:	62ae      	str	r6, [r5, #40]	; 0x28
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   23e1e:	d118      	bne.n	23e52 <k_delayed_work_submit_to_queue+0xba>
   23e20:	4811      	ldr	r0, [pc, #68]	; (23e68 <k_delayed_work_submit_to_queue+0xd0>)
   23e22:	f7ff ff4f 	bl	23cc4 <z_spin_unlock_valid>
   23e26:	b940      	cbnz	r0, 23e3a <k_delayed_work_submit_to_queue+0xa2>
   23e28:	4910      	ldr	r1, [pc, #64]	; (23e6c <k_delayed_work_submit_to_queue+0xd4>)
   23e2a:	4811      	ldr	r0, [pc, #68]	; (23e70 <k_delayed_work_submit_to_queue+0xd8>)
   23e2c:	22a7      	movs	r2, #167	; 0xa7
   23e2e:	f003 f89e 	bl	26f6e <printk>
   23e32:	21a7      	movs	r1, #167	; 0xa7
   23e34:	480d      	ldr	r0, [pc, #52]	; (23e6c <k_delayed_work_submit_to_queue+0xd4>)
   23e36:	f003 fb13 	bl	27460 <assert_post_action>
   23e3a:	f387 8811 	msr	BASEPRI, r7
   23e3e:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   23e42:	4629      	mov	r1, r5
   23e44:	4630      	mov	r0, r6
   23e46:	f009 fa89 	bl	2d35c <k_work_submit_to_queue>
		return 0;
   23e4a:	2400      	movs	r4, #0
}
   23e4c:	4620      	mov	r0, r4
   23e4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&work->timeout, work_timeout, delay);
   23e52:	4642      	mov	r2, r8
   23e54:	464b      	mov	r3, r9
   23e56:	4907      	ldr	r1, [pc, #28]	; (23e74 <k_delayed_work_submit_to_queue+0xdc>)
   23e58:	f105 0010 	add.w	r0, r5, #16
   23e5c:	f000 f8da 	bl	24014 <z_add_timeout>
   23e60:	e7c5      	b.n	23dee <k_delayed_work_submit_to_queue+0x56>
		err = -EADDRINUSE;
   23e62:	f06f 046f 	mvn.w	r4, #111	; 0x6f
   23e66:	e7c2      	b.n	23dee <k_delayed_work_submit_to_queue+0x56>
   23e68:	2000464c 	.word	0x2000464c
   23e6c:	0002fba8 	.word	0x0002fba8
   23e70:	0002fa94 	.word	0x0002fa94
   23e74:	0002d38d 	.word	0x0002d38d

00023e78 <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   23e78:	b538      	push	{r3, r4, r5, lr}
   23e7a:	4604      	mov	r4, r0
	__asm__ volatile(
   23e7c:	f04f 0320 	mov.w	r3, #32
   23e80:	f3ef 8511 	mrs	r5, BASEPRI
   23e84:	f383 8811 	msr	BASEPRI, r3
   23e88:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23e8c:	4815      	ldr	r0, [pc, #84]	; (23ee4 <k_delayed_work_cancel+0x6c>)
   23e8e:	f7ff ff0b 	bl	23ca8 <z_spin_lock_valid>
   23e92:	b940      	cbnz	r0, 23ea6 <k_delayed_work_cancel+0x2e>
   23e94:	4914      	ldr	r1, [pc, #80]	; (23ee8 <k_delayed_work_cancel+0x70>)
   23e96:	4815      	ldr	r0, [pc, #84]	; (23eec <k_delayed_work_cancel+0x74>)
   23e98:	227c      	movs	r2, #124	; 0x7c
   23e9a:	f003 f868 	bl	26f6e <printk>
   23e9e:	217c      	movs	r1, #124	; 0x7c
   23ea0:	4811      	ldr	r0, [pc, #68]	; (23ee8 <k_delayed_work_cancel+0x70>)
   23ea2:	f003 fadd 	bl	27460 <assert_post_action>
	z_spin_lock_set_owner(l);
   23ea6:	480f      	ldr	r0, [pc, #60]	; (23ee4 <k_delayed_work_cancel+0x6c>)
   23ea8:	f7ff ff1c 	bl	23ce4 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = -EINVAL;

	if (work->work_q != NULL) {
   23eac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   23eae:	b1b3      	cbz	r3, 23ede <k_delayed_work_cancel+0x66>
		ret = work_cancel(work);
   23eb0:	4620      	mov	r0, r4
   23eb2:	f009 fa70 	bl	2d396 <work_cancel>
   23eb6:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23eb8:	480a      	ldr	r0, [pc, #40]	; (23ee4 <k_delayed_work_cancel+0x6c>)
   23eba:	f7ff ff03 	bl	23cc4 <z_spin_unlock_valid>
   23ebe:	b940      	cbnz	r0, 23ed2 <k_delayed_work_cancel+0x5a>
   23ec0:	4909      	ldr	r1, [pc, #36]	; (23ee8 <k_delayed_work_cancel+0x70>)
   23ec2:	480a      	ldr	r0, [pc, #40]	; (23eec <k_delayed_work_cancel+0x74>)
   23ec4:	22a7      	movs	r2, #167	; 0xa7
   23ec6:	f003 f852 	bl	26f6e <printk>
   23eca:	21a7      	movs	r1, #167	; 0xa7
   23ecc:	4806      	ldr	r0, [pc, #24]	; (23ee8 <k_delayed_work_cancel+0x70>)
   23ece:	f003 fac7 	bl	27460 <assert_post_action>
	__asm__ volatile(
   23ed2:	f385 8811 	msr	BASEPRI, r5
   23ed6:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
	return ret;
}
   23eda:	4620      	mov	r0, r4
   23edc:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   23ede:	f06f 0415 	mvn.w	r4, #21
   23ee2:	e7e9      	b.n	23eb8 <k_delayed_work_cancel+0x40>
   23ee4:	2000464c 	.word	0x2000464c
   23ee8:	0002fba8 	.word	0x0002fba8
   23eec:	0002fa94 	.word	0x0002fa94

00023ef0 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   23ef0:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   23ef2:	4806      	ldr	r0, [pc, #24]	; (23f0c <z_data_copy+0x1c>)
   23ef4:	4a06      	ldr	r2, [pc, #24]	; (23f10 <z_data_copy+0x20>)
   23ef6:	4907      	ldr	r1, [pc, #28]	; (23f14 <z_data_copy+0x24>)
   23ef8:	1a12      	subs	r2, r2, r0
   23efa:	f009 fb43 	bl	2d584 <memcpy>
   23efe:	4a06      	ldr	r2, [pc, #24]	; (23f18 <z_data_copy+0x28>)
   23f00:	4906      	ldr	r1, [pc, #24]	; (23f1c <z_data_copy+0x2c>)
   23f02:	4807      	ldr	r0, [pc, #28]	; (23f20 <z_data_copy+0x30>)
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   23f04:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   23f08:	f009 bb3c 	b.w	2d584 <memcpy>
   23f0c:	20000000 	.word	0x20000000
   23f10:	2000150c 	.word	0x2000150c
   23f14:	00035e68 	.word	0x00035e68
   23f18:	00000000 	.word	0x00000000
   23f1c:	00035e68 	.word	0x00035e68
   23f20:	20000000 	.word	0x20000000

00023f24 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0U;
   23f24:	4b03      	ldr	r3, [pc, #12]	; (23f34 <elapsed+0x10>)
   23f26:	681b      	ldr	r3, [r3, #0]
   23f28:	b90b      	cbnz	r3, 23f2e <elapsed+0xa>
   23f2a:	f7e2 bbe9 	b.w	6700 <z_clock_elapsed>
}
   23f2e:	2000      	movs	r0, #0
   23f30:	4770      	bx	lr
   23f32:	bf00      	nop
   23f34:	20004650 	.word	0x20004650

00023f38 <remove_timeout>:
{
   23f38:	b530      	push	{r4, r5, lr}
   23f3a:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   23f3c:	b168      	cbz	r0, 23f5a <remove_timeout+0x22>
   23f3e:	4a0a      	ldr	r2, [pc, #40]	; (23f68 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   23f40:	6852      	ldr	r2, [r2, #4]
   23f42:	4290      	cmp	r0, r2
   23f44:	d009      	beq.n	23f5a <remove_timeout+0x22>
	if (next(t) != NULL) {
   23f46:	b143      	cbz	r3, 23f5a <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   23f48:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   23f4c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   23f50:	1912      	adds	r2, r2, r4
   23f52:	eb45 0101 	adc.w	r1, r5, r1
   23f56:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
   23f5a:	6842      	ldr	r2, [r0, #4]
   23f5c:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   23f5e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   23f60:	2300      	movs	r3, #0
	node->prev = NULL;
   23f62:	e9c0 3300 	strd	r3, r3, [r0]
}
   23f66:	bd30      	pop	{r4, r5, pc}
   23f68:	20000e44 	.word	0x20000e44

00023f6c <next_timeout>:

static int32_t next_timeout(void)
{
   23f6c:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   23f6e:	4b13      	ldr	r3, [pc, #76]	; (23fbc <next_timeout+0x50>)
   23f70:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23f72:	429c      	cmp	r4, r3
   23f74:	bf08      	it	eq
   23f76:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   23f78:	f7ff ffd4 	bl	23f24 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
   23f7c:	b1c4      	cbz	r4, 23fb0 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   23f7e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   23f82:	1a14      	subs	r4, r2, r0
   23f84:	eb63 75e0 	sbc.w	r5, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   23f88:	2c01      	cmp	r4, #1
   23f8a:	f175 0300 	sbcs.w	r3, r5, #0
   23f8e:	db12      	blt.n	23fb6 <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   23f90:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   23f94:	2300      	movs	r3, #0
   23f96:	42a2      	cmp	r2, r4
   23f98:	4620      	mov	r0, r4
   23f9a:	eb73 0405 	sbcs.w	r4, r3, r5
   23f9e:	da00      	bge.n	23fa2 <next_timeout+0x36>
   23fa0:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   23fa2:	4b07      	ldr	r3, [pc, #28]	; (23fc0 <next_timeout+0x54>)
   23fa4:	695b      	ldr	r3, [r3, #20]
   23fa6:	b113      	cbz	r3, 23fae <next_timeout+0x42>
   23fa8:	4298      	cmp	r0, r3
   23faa:	bfa8      	it	ge
   23fac:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   23fae:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   23fb0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   23fb4:	e7f5      	b.n	23fa2 <next_timeout+0x36>
   23fb6:	2000      	movs	r0, #0
   23fb8:	e7f3      	b.n	23fa2 <next_timeout+0x36>
   23fba:	bf00      	nop
   23fbc:	20000e44 	.word	0x20000e44
   23fc0:	20004604 	.word	0x20004604

00023fc4 <timeout_rem>:
/* must be locked */
static k_ticks_t timeout_rem(const struct _timeout *timeout)
{
	k_ticks_t ticks = 0;

	if (z_is_inactive_timeout(timeout)) {
   23fc4:	6803      	ldr	r3, [r0, #0]
{
   23fc6:	b570      	push	{r4, r5, r6, lr}
	if (z_is_inactive_timeout(timeout)) {
   23fc8:	b1fb      	cbz	r3, 2400a <timeout_rem+0x46>
	return list->head == list;
   23fca:	4a11      	ldr	r2, [pc, #68]	; (24010 <timeout_rem+0x4c>)
   23fcc:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23fce:	4293      	cmp	r3, r2
   23fd0:	d018      	beq.n	24004 <timeout_rem+0x40>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   23fd2:	6851      	ldr	r1, [r2, #4]
   23fd4:	2400      	movs	r4, #0
   23fd6:	2500      	movs	r5, #0
		return 0;
	}

	for (struct _timeout *t = first(); t != NULL; t = next(t)) {
   23fd8:	b93b      	cbnz	r3, 23fea <timeout_rem+0x26>
		if (timeout == t) {
			break;
		}
	}

	return ticks - elapsed();
   23fda:	f7ff ffa3 	bl	23f24 <elapsed>
   23fde:	1a22      	subs	r2, r4, r0
   23fe0:	eb65 73e0 	sbc.w	r3, r5, r0, asr #31
   23fe4:	4619      	mov	r1, r3
   23fe6:	4610      	mov	r0, r2
}
   23fe8:	bd70      	pop	{r4, r5, r6, pc}
		ticks += t->dticks;
   23fea:	e9d3 2604 	ldrd	r2, r6, [r3, #16]
   23fee:	18a4      	adds	r4, r4, r2
   23ff0:	eb46 0505 	adc.w	r5, r6, r5
		if (timeout == t) {
   23ff4:	4283      	cmp	r3, r0
   23ff6:	d0f0      	beq.n	23fda <timeout_rem+0x16>
   23ff8:	2b00      	cmp	r3, #0
   23ffa:	d0ee      	beq.n	23fda <timeout_rem+0x16>
	return (node == list->tail) ? NULL : node->next;
   23ffc:	428b      	cmp	r3, r1
   23ffe:	d0ec      	beq.n	23fda <timeout_rem+0x16>
   24000:	681b      	ldr	r3, [r3, #0]
   24002:	e7e9      	b.n	23fd8 <timeout_rem+0x14>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24004:	2400      	movs	r4, #0
   24006:	2500      	movs	r5, #0
   24008:	e7e7      	b.n	23fda <timeout_rem+0x16>
		return 0;
   2400a:	2000      	movs	r0, #0
   2400c:	2100      	movs	r1, #0
   2400e:	e7eb      	b.n	23fe8 <timeout_rem+0x24>
   24010:	20000e44 	.word	0x20000e44

00024014 <z_add_timeout>:
{
   24014:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24018:	9101      	str	r1, [sp, #4]
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2401a:	1c59      	adds	r1, r3, #1
   2401c:	bf08      	it	eq
   2401e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   24022:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   24024:	f000 809d 	beq.w	24162 <z_add_timeout+0x14e>
	k_ticks_t ticks = timeout.ticks + 1;
   24028:	1c54      	adds	r4, r2, #1
   2402a:	f143 0500 	adc.w	r5, r3, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   2402e:	f06f 0301 	mvn.w	r3, #1
   24032:	ebb3 0804 	subs.w	r8, r3, r4
   24036:	f04f 3bff 	mov.w	fp, #4294967295
   2403a:	eb6b 0905 	sbc.w	r9, fp, r5
   2403e:	f1b8 0f00 	cmp.w	r8, #0
   24042:	f179 0300 	sbcs.w	r3, r9, #0
   24046:	db0f      	blt.n	24068 <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   24048:	f7ff ff6c 	bl	23f24 <elapsed>
   2404c:	4a4b      	ldr	r2, [pc, #300]	; (2417c <z_add_timeout+0x168>)
   2404e:	e9d2 1c00 	ldrd	r1, ip, [r2]
   24052:	f06f 0301 	mvn.w	r3, #1
   24056:	1a5b      	subs	r3, r3, r1
   24058:	eb6b 020c 	sbc.w	r2, fp, ip
   2405c:	1b1e      	subs	r6, r3, r4
   2405e:	eb62 0705 	sbc.w	r7, r2, r5
   24062:	1a34      	subs	r4, r6, r0
   24064:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   24068:	f8da 3000 	ldr.w	r3, [sl]
   2406c:	b143      	cbz	r3, 24080 <z_add_timeout+0x6c>
   2406e:	4944      	ldr	r1, [pc, #272]	; (24180 <z_add_timeout+0x16c>)
   24070:	4844      	ldr	r0, [pc, #272]	; (24184 <z_add_timeout+0x170>)
   24072:	2268      	movs	r2, #104	; 0x68
   24074:	f002 ff7b 	bl	26f6e <printk>
   24078:	2168      	movs	r1, #104	; 0x68
   2407a:	4841      	ldr	r0, [pc, #260]	; (24180 <z_add_timeout+0x16c>)
   2407c:	f003 f9f0 	bl	27460 <assert_post_action>
	to->fn = fn;
   24080:	9b01      	ldr	r3, [sp, #4]
   24082:	f8ca 3008 	str.w	r3, [sl, #8]
	ticks = MAX(1, ticks);
   24086:	2c01      	cmp	r4, #1
   24088:	f175 0300 	sbcs.w	r3, r5, #0
   2408c:	4627      	mov	r7, r4
   2408e:	46a8      	mov	r8, r5
   24090:	bfbc      	itt	lt
   24092:	2701      	movlt	r7, #1
   24094:	f04f 0800 	movlt.w	r8, #0
	__asm__ volatile(
   24098:	f04f 0320 	mov.w	r3, #32
   2409c:	f3ef 8611 	mrs	r6, BASEPRI
   240a0:	f383 8811 	msr	BASEPRI, r3
   240a4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   240a8:	4837      	ldr	r0, [pc, #220]	; (24188 <z_add_timeout+0x174>)
   240aa:	f7ff fdfd 	bl	23ca8 <z_spin_lock_valid>
   240ae:	b940      	cbnz	r0, 240c2 <z_add_timeout+0xae>
   240b0:	4936      	ldr	r1, [pc, #216]	; (2418c <z_add_timeout+0x178>)
   240b2:	4834      	ldr	r0, [pc, #208]	; (24184 <z_add_timeout+0x170>)
   240b4:	227c      	movs	r2, #124	; 0x7c
   240b6:	f002 ff5a 	bl	26f6e <printk>
   240ba:	217c      	movs	r1, #124	; 0x7c
   240bc:	4833      	ldr	r0, [pc, #204]	; (2418c <z_add_timeout+0x178>)
   240be:	f003 f9cf 	bl	27460 <assert_post_action>
	z_spin_lock_set_owner(l);
   240c2:	4831      	ldr	r0, [pc, #196]	; (24188 <z_add_timeout+0x174>)
   240c4:	f7ff fe0e 	bl	23ce4 <z_spin_lock_set_owner>
		to->dticks = ticks + elapsed();
   240c8:	f7ff ff2c 	bl	23f24 <elapsed>
	return list->head == list;
   240cc:	4b30      	ldr	r3, [pc, #192]	; (24190 <z_add_timeout+0x17c>)
   240ce:	681a      	ldr	r2, [r3, #0]
   240d0:	183c      	adds	r4, r7, r0
   240d2:	eb48 75e0 	adc.w	r5, r8, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   240d6:	429a      	cmp	r2, r3
   240d8:	e9ca 4504 	strd	r4, r5, [sl, #16]
   240dc:	d001      	beq.n	240e2 <z_add_timeout+0xce>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   240de:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   240e0:	b952      	cbnz	r2, 240f8 <z_add_timeout+0xe4>
	node->prev = list->tail;
   240e2:	685a      	ldr	r2, [r3, #4]
   240e4:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
   240e8:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   240ea:	f8ca 3000 	str.w	r3, [sl]
	list->tail->next = node;
   240ee:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   240f2:	f8c3 a004 	str.w	sl, [r3, #4]
   240f6:	e014      	b.n	24122 <z_add_timeout+0x10e>
			if (t->dticks > to->dticks) {
   240f8:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
   240fc:	e9da 4504 	ldrd	r4, r5, [sl, #16]
   24100:	4544      	cmp	r4, r8
   24102:	eb75 0109 	sbcs.w	r1, r5, r9
   24106:	da2f      	bge.n	24168 <z_add_timeout+0x154>
				t->dticks -= to->dticks;
   24108:	ebb8 0004 	subs.w	r0, r8, r4
   2410c:	eb69 0105 	sbc.w	r1, r9, r5
   24110:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
   24114:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   24116:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
   2411a:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   2411e:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
   24122:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24124:	429a      	cmp	r2, r3
   24126:	d00b      	beq.n	24140 <z_add_timeout+0x12c>
		if (to == first()) {
   24128:	4592      	cmp	sl, r2
   2412a:	d109      	bne.n	24140 <z_add_timeout+0x12c>
			int32_t next_time = next_timeout();
   2412c:	f7ff ff1e 	bl	23f6c <next_timeout>
			if (next_time == 0 ||
   24130:	b118      	cbz	r0, 2413a <z_add_timeout+0x126>
			    _current_cpu->slice_ticks != next_time) {
   24132:	4b18      	ldr	r3, [pc, #96]	; (24194 <z_add_timeout+0x180>)
			if (next_time == 0 ||
   24134:	695b      	ldr	r3, [r3, #20]
   24136:	4283      	cmp	r3, r0
   24138:	d002      	beq.n	24140 <z_add_timeout+0x12c>
				z_clock_set_timeout(next_time, false);
   2413a:	2100      	movs	r1, #0
   2413c:	f7e2 faae 	bl	669c <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24140:	4811      	ldr	r0, [pc, #68]	; (24188 <z_add_timeout+0x174>)
   24142:	f7ff fdbf 	bl	23cc4 <z_spin_unlock_valid>
   24146:	b940      	cbnz	r0, 2415a <z_add_timeout+0x146>
   24148:	4910      	ldr	r1, [pc, #64]	; (2418c <z_add_timeout+0x178>)
   2414a:	480e      	ldr	r0, [pc, #56]	; (24184 <z_add_timeout+0x170>)
   2414c:	22a7      	movs	r2, #167	; 0xa7
   2414e:	f002 ff0e 	bl	26f6e <printk>
   24152:	21a7      	movs	r1, #167	; 0xa7
   24154:	480d      	ldr	r0, [pc, #52]	; (2418c <z_add_timeout+0x178>)
   24156:	f003 f983 	bl	27460 <assert_post_action>
	__asm__ volatile(
   2415a:	f386 8811 	msr	BASEPRI, r6
   2415e:	f3bf 8f6f 	isb	sy
}
   24162:	b003      	add	sp, #12
   24164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
   24168:	ebb4 0008 	subs.w	r0, r4, r8
   2416c:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
   24170:	42ba      	cmp	r2, r7
   24172:	e9ca 0104 	strd	r0, r1, [sl, #16]
   24176:	d0b4      	beq.n	240e2 <z_add_timeout+0xce>
   24178:	6812      	ldr	r2, [r2, #0]
   2417a:	e7b1      	b.n	240e0 <z_add_timeout+0xcc>
   2417c:	20002540 	.word	0x20002540
   24180:	00035ccb 	.word	0x00035ccb
   24184:	0002fa94 	.word	0x0002fa94
   24188:	20004654 	.word	0x20004654
   2418c:	0002fba8 	.word	0x0002fba8
   24190:	20000e44 	.word	0x20000e44
   24194:	20004604 	.word	0x20004604

00024198 <z_abort_timeout>:
{
   24198:	b538      	push	{r3, r4, r5, lr}
   2419a:	4604      	mov	r4, r0
	__asm__ volatile(
   2419c:	f04f 0320 	mov.w	r3, #32
   241a0:	f3ef 8511 	mrs	r5, BASEPRI
   241a4:	f383 8811 	msr	BASEPRI, r3
   241a8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   241ac:	4815      	ldr	r0, [pc, #84]	; (24204 <z_abort_timeout+0x6c>)
   241ae:	f7ff fd7b 	bl	23ca8 <z_spin_lock_valid>
   241b2:	b940      	cbnz	r0, 241c6 <z_abort_timeout+0x2e>
   241b4:	4914      	ldr	r1, [pc, #80]	; (24208 <z_abort_timeout+0x70>)
   241b6:	4815      	ldr	r0, [pc, #84]	; (2420c <z_abort_timeout+0x74>)
   241b8:	227c      	movs	r2, #124	; 0x7c
   241ba:	f002 fed8 	bl	26f6e <printk>
   241be:	217c      	movs	r1, #124	; 0x7c
   241c0:	4811      	ldr	r0, [pc, #68]	; (24208 <z_abort_timeout+0x70>)
   241c2:	f003 f94d 	bl	27460 <assert_post_action>
	z_spin_lock_set_owner(l);
   241c6:	480f      	ldr	r0, [pc, #60]	; (24204 <z_abort_timeout+0x6c>)
   241c8:	f7ff fd8c 	bl	23ce4 <z_spin_lock_set_owner>
		if (sys_dnode_is_linked(&to->node)) {
   241cc:	6823      	ldr	r3, [r4, #0]
   241ce:	b1b3      	cbz	r3, 241fe <z_abort_timeout+0x66>
			remove_timeout(to);
   241d0:	4620      	mov	r0, r4
   241d2:	f7ff feb1 	bl	23f38 <remove_timeout>
			ret = 0;
   241d6:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   241d8:	480a      	ldr	r0, [pc, #40]	; (24204 <z_abort_timeout+0x6c>)
   241da:	f7ff fd73 	bl	23cc4 <z_spin_unlock_valid>
   241de:	b940      	cbnz	r0, 241f2 <z_abort_timeout+0x5a>
   241e0:	4909      	ldr	r1, [pc, #36]	; (24208 <z_abort_timeout+0x70>)
   241e2:	480a      	ldr	r0, [pc, #40]	; (2420c <z_abort_timeout+0x74>)
   241e4:	22a7      	movs	r2, #167	; 0xa7
   241e6:	f002 fec2 	bl	26f6e <printk>
   241ea:	21a7      	movs	r1, #167	; 0xa7
   241ec:	4806      	ldr	r0, [pc, #24]	; (24208 <z_abort_timeout+0x70>)
   241ee:	f003 f937 	bl	27460 <assert_post_action>
	__asm__ volatile(
   241f2:	f385 8811 	msr	BASEPRI, r5
   241f6:	f3bf 8f6f 	isb	sy
}
   241fa:	4620      	mov	r0, r4
   241fc:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   241fe:	f06f 0415 	mvn.w	r4, #21
   24202:	e7e9      	b.n	241d8 <z_abort_timeout+0x40>
   24204:	20004654 	.word	0x20004654
   24208:	0002fba8 	.word	0x0002fba8
   2420c:	0002fa94 	.word	0x0002fa94

00024210 <z_timeout_remaining>:

k_ticks_t z_timeout_remaining(const struct _timeout *timeout)
{
   24210:	b570      	push	{r4, r5, r6, lr}
   24212:	4604      	mov	r4, r0
	__asm__ volatile(
   24214:	f04f 0320 	mov.w	r3, #32
   24218:	f3ef 8611 	mrs	r6, BASEPRI
   2421c:	f383 8811 	msr	BASEPRI, r3
   24220:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24224:	4814      	ldr	r0, [pc, #80]	; (24278 <z_timeout_remaining+0x68>)
   24226:	f7ff fd3f 	bl	23ca8 <z_spin_lock_valid>
   2422a:	b940      	cbnz	r0, 2423e <z_timeout_remaining+0x2e>
   2422c:	4913      	ldr	r1, [pc, #76]	; (2427c <z_timeout_remaining+0x6c>)
   2422e:	4814      	ldr	r0, [pc, #80]	; (24280 <z_timeout_remaining+0x70>)
   24230:	227c      	movs	r2, #124	; 0x7c
   24232:	f002 fe9c 	bl	26f6e <printk>
   24236:	217c      	movs	r1, #124	; 0x7c
   24238:	4810      	ldr	r0, [pc, #64]	; (2427c <z_timeout_remaining+0x6c>)
   2423a:	f003 f911 	bl	27460 <assert_post_action>
	z_spin_lock_set_owner(l);
   2423e:	480e      	ldr	r0, [pc, #56]	; (24278 <z_timeout_remaining+0x68>)
   24240:	f7ff fd50 	bl	23ce4 <z_spin_lock_set_owner>
	k_ticks_t ticks = 0;

	LOCKED(&timeout_lock) {
		ticks = timeout_rem(timeout);
   24244:	4620      	mov	r0, r4
   24246:	f7ff febd 	bl	23fc4 <timeout_rem>
   2424a:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2424c:	480a      	ldr	r0, [pc, #40]	; (24278 <z_timeout_remaining+0x68>)
   2424e:	460d      	mov	r5, r1
   24250:	f7ff fd38 	bl	23cc4 <z_spin_unlock_valid>
   24254:	b940      	cbnz	r0, 24268 <z_timeout_remaining+0x58>
   24256:	4909      	ldr	r1, [pc, #36]	; (2427c <z_timeout_remaining+0x6c>)
   24258:	4809      	ldr	r0, [pc, #36]	; (24280 <z_timeout_remaining+0x70>)
   2425a:	22a7      	movs	r2, #167	; 0xa7
   2425c:	f002 fe87 	bl	26f6e <printk>
   24260:	21a7      	movs	r1, #167	; 0xa7
   24262:	4806      	ldr	r0, [pc, #24]	; (2427c <z_timeout_remaining+0x6c>)
   24264:	f003 f8fc 	bl	27460 <assert_post_action>
	__asm__ volatile(
   24268:	f386 8811 	msr	BASEPRI, r6
   2426c:	f3bf 8f6f 	isb	sy
	}

	return ticks;
}
   24270:	4620      	mov	r0, r4
   24272:	4629      	mov	r1, r5
   24274:	bd70      	pop	{r4, r5, r6, pc}
   24276:	bf00      	nop
   24278:	20004654 	.word	0x20004654
   2427c:	0002fba8 	.word	0x0002fba8
   24280:	0002fa94 	.word	0x0002fa94

00024284 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   24284:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   24286:	f04f 0320 	mov.w	r3, #32
   2428a:	f3ef 8511 	mrs	r5, BASEPRI
   2428e:	f383 8811 	msr	BASEPRI, r3
   24292:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24296:	4813      	ldr	r0, [pc, #76]	; (242e4 <z_get_next_timeout_expiry+0x60>)
   24298:	f7ff fd06 	bl	23ca8 <z_spin_lock_valid>
   2429c:	b940      	cbnz	r0, 242b0 <z_get_next_timeout_expiry+0x2c>
   2429e:	4912      	ldr	r1, [pc, #72]	; (242e8 <z_get_next_timeout_expiry+0x64>)
   242a0:	4812      	ldr	r0, [pc, #72]	; (242ec <z_get_next_timeout_expiry+0x68>)
   242a2:	227c      	movs	r2, #124	; 0x7c
   242a4:	f002 fe63 	bl	26f6e <printk>
   242a8:	217c      	movs	r1, #124	; 0x7c
   242aa:	480f      	ldr	r0, [pc, #60]	; (242e8 <z_get_next_timeout_expiry+0x64>)
   242ac:	f003 f8d8 	bl	27460 <assert_post_action>
	z_spin_lock_set_owner(l);
   242b0:	480c      	ldr	r0, [pc, #48]	; (242e4 <z_get_next_timeout_expiry+0x60>)
   242b2:	f7ff fd17 	bl	23ce4 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   242b6:	f7ff fe59 	bl	23f6c <next_timeout>
   242ba:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   242bc:	4809      	ldr	r0, [pc, #36]	; (242e4 <z_get_next_timeout_expiry+0x60>)
   242be:	f7ff fd01 	bl	23cc4 <z_spin_unlock_valid>
   242c2:	b940      	cbnz	r0, 242d6 <z_get_next_timeout_expiry+0x52>
   242c4:	4908      	ldr	r1, [pc, #32]	; (242e8 <z_get_next_timeout_expiry+0x64>)
   242c6:	4809      	ldr	r0, [pc, #36]	; (242ec <z_get_next_timeout_expiry+0x68>)
   242c8:	22a7      	movs	r2, #167	; 0xa7
   242ca:	f002 fe50 	bl	26f6e <printk>
   242ce:	21a7      	movs	r1, #167	; 0xa7
   242d0:	4805      	ldr	r0, [pc, #20]	; (242e8 <z_get_next_timeout_expiry+0x64>)
   242d2:	f003 f8c5 	bl	27460 <assert_post_action>
	__asm__ volatile(
   242d6:	f385 8811 	msr	BASEPRI, r5
   242da:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   242de:	4620      	mov	r0, r4
   242e0:	bd38      	pop	{r3, r4, r5, pc}
   242e2:	bf00      	nop
   242e4:	20004654 	.word	0x20004654
   242e8:	0002fba8 	.word	0x0002fba8
   242ec:	0002fa94 	.word	0x0002fa94

000242f0 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   242f0:	b570      	push	{r4, r5, r6, lr}
   242f2:	4604      	mov	r4, r0
   242f4:	460e      	mov	r6, r1
	__asm__ volatile(
   242f6:	f04f 0320 	mov.w	r3, #32
   242fa:	f3ef 8511 	mrs	r5, BASEPRI
   242fe:	f383 8811 	msr	BASEPRI, r3
   24302:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24306:	4816      	ldr	r0, [pc, #88]	; (24360 <z_set_timeout_expiry+0x70>)
   24308:	f7ff fcce 	bl	23ca8 <z_spin_lock_valid>
   2430c:	b940      	cbnz	r0, 24320 <z_set_timeout_expiry+0x30>
   2430e:	4915      	ldr	r1, [pc, #84]	; (24364 <z_set_timeout_expiry+0x74>)
   24310:	4815      	ldr	r0, [pc, #84]	; (24368 <z_set_timeout_expiry+0x78>)
   24312:	227c      	movs	r2, #124	; 0x7c
   24314:	f002 fe2b 	bl	26f6e <printk>
   24318:	217c      	movs	r1, #124	; 0x7c
   2431a:	4812      	ldr	r0, [pc, #72]	; (24364 <z_set_timeout_expiry+0x74>)
   2431c:	f003 f8a0 	bl	27460 <assert_post_action>
	z_spin_lock_set_owner(l);
   24320:	480f      	ldr	r0, [pc, #60]	; (24360 <z_set_timeout_expiry+0x70>)
   24322:	f7ff fcdf 	bl	23ce4 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   24326:	f7ff fe21 	bl	23f6c <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   2432a:	2801      	cmp	r0, #1
   2432c:	dd05      	ble.n	2433a <z_set_timeout_expiry+0x4a>
   2432e:	42a0      	cmp	r0, r4
   24330:	dd03      	ble.n	2433a <z_set_timeout_expiry+0x4a>
			z_clock_set_timeout(ticks, is_idle);
   24332:	4631      	mov	r1, r6
   24334:	4620      	mov	r0, r4
   24336:	f7e2 f9b1 	bl	669c <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2433a:	4809      	ldr	r0, [pc, #36]	; (24360 <z_set_timeout_expiry+0x70>)
   2433c:	f7ff fcc2 	bl	23cc4 <z_spin_unlock_valid>
   24340:	b940      	cbnz	r0, 24354 <z_set_timeout_expiry+0x64>
   24342:	4908      	ldr	r1, [pc, #32]	; (24364 <z_set_timeout_expiry+0x74>)
   24344:	4808      	ldr	r0, [pc, #32]	; (24368 <z_set_timeout_expiry+0x78>)
   24346:	22a7      	movs	r2, #167	; 0xa7
   24348:	f002 fe11 	bl	26f6e <printk>
   2434c:	21a7      	movs	r1, #167	; 0xa7
   2434e:	4805      	ldr	r0, [pc, #20]	; (24364 <z_set_timeout_expiry+0x74>)
   24350:	f003 f886 	bl	27460 <assert_post_action>
	__asm__ volatile(
   24354:	f385 8811 	msr	BASEPRI, r5
   24358:	f3bf 8f6f 	isb	sy
		}
	}
}
   2435c:	bd70      	pop	{r4, r5, r6, pc}
   2435e:	bf00      	nop
   24360:	20004654 	.word	0x20004654
   24364:	0002fba8 	.word	0x0002fba8
   24368:	0002fa94 	.word	0x0002fa94

0002436c <z_clock_announce>:

void z_clock_announce(int32_t ticks)
{
   2436c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24370:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   24372:	f7fe fdc3 	bl	22efc <z_time_slice>
	__asm__ volatile(
   24376:	f04f 0320 	mov.w	r3, #32
   2437a:	f3ef 8911 	mrs	r9, BASEPRI
   2437e:	f383 8811 	msr	BASEPRI, r3
   24382:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24386:	484b      	ldr	r0, [pc, #300]	; (244b4 <z_clock_announce+0x148>)
   24388:	f7ff fc8e 	bl	23ca8 <z_spin_lock_valid>
   2438c:	b940      	cbnz	r0, 243a0 <z_clock_announce+0x34>
   2438e:	494a      	ldr	r1, [pc, #296]	; (244b8 <z_clock_announce+0x14c>)
   24390:	484a      	ldr	r0, [pc, #296]	; (244bc <z_clock_announce+0x150>)
   24392:	227c      	movs	r2, #124	; 0x7c
   24394:	f002 fdeb 	bl	26f6e <printk>
   24398:	217c      	movs	r1, #124	; 0x7c
   2439a:	4847      	ldr	r0, [pc, #284]	; (244b8 <z_clock_announce+0x14c>)
   2439c:	f003 f860 	bl	27460 <assert_post_action>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   243a0:	4e47      	ldr	r6, [pc, #284]	; (244c0 <z_clock_announce+0x154>)
   243a2:	4f48      	ldr	r7, [pc, #288]	; (244c4 <z_clock_announce+0x158>)
	z_spin_lock_set_owner(l);
   243a4:	4843      	ldr	r0, [pc, #268]	; (244b4 <z_clock_announce+0x148>)
	return list->head == list;
   243a6:	f8df a120 	ldr.w	sl, [pc, #288]	; 244c8 <z_clock_announce+0x15c>
   243aa:	f7ff fc9b 	bl	23ce4 <z_spin_lock_set_owner>
   243ae:	46bb      	mov	fp, r7
   243b0:	6034      	str	r4, [r6, #0]
   243b2:	e9d7 3400 	ldrd	r3, r4, [r7]
   243b6:	f8da 8000 	ldr.w	r8, [sl]
   243ba:	f8d6 c000 	ldr.w	ip, [r6]
   243be:	e9cd 3400 	strd	r3, r4, [sp]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   243c2:	45d0      	cmp	r8, sl
   243c4:	4664      	mov	r4, ip
   243c6:	ea4f 75e4 	mov.w	r5, r4, asr #31
   243ca:	d00e      	beq.n	243ea <z_clock_announce+0x7e>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   243cc:	f1b8 0f00 	cmp.w	r8, #0
   243d0:	d00b      	beq.n	243ea <z_clock_announce+0x7e>
   243d2:	e9d8 1204 	ldrd	r1, r2, [r8, #16]
   243d6:	458c      	cmp	ip, r1
   243d8:	eb75 0302 	sbcs.w	r3, r5, r2
   243dc:	da28      	bge.n	24430 <z_clock_announce+0xc4>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   243de:	ebb1 000c 	subs.w	r0, r1, ip
   243e2:	eb62 0105 	sbc.w	r1, r2, r5
   243e6:	e9c8 0104 	strd	r0, r1, [r8, #16]
	}

	curr_tick += announce_remaining;
   243ea:	9b00      	ldr	r3, [sp, #0]
   243ec:	18e2      	adds	r2, r4, r3
   243ee:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
   243f0:	f04f 0400 	mov.w	r4, #0
	curr_tick += announce_remaining;
   243f4:	eb45 0303 	adc.w	r3, r5, r3
   243f8:	e9cb 2300 	strd	r2, r3, [fp]
	announce_remaining = 0;
   243fc:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
   243fe:	f7ff fdb5 	bl	23f6c <next_timeout>
   24402:	4621      	mov	r1, r4
   24404:	f7e2 f94a 	bl	669c <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24408:	482a      	ldr	r0, [pc, #168]	; (244b4 <z_clock_announce+0x148>)
   2440a:	f7ff fc5b 	bl	23cc4 <z_spin_unlock_valid>
   2440e:	b940      	cbnz	r0, 24422 <z_clock_announce+0xb6>
   24410:	4929      	ldr	r1, [pc, #164]	; (244b8 <z_clock_announce+0x14c>)
   24412:	482a      	ldr	r0, [pc, #168]	; (244bc <z_clock_announce+0x150>)
   24414:	22a7      	movs	r2, #167	; 0xa7
   24416:	f002 fdaa 	bl	26f6e <printk>
   2441a:	21a7      	movs	r1, #167	; 0xa7
   2441c:	4826      	ldr	r0, [pc, #152]	; (244b8 <z_clock_announce+0x14c>)
   2441e:	f003 f81f 	bl	27460 <assert_post_action>
	__asm__ volatile(
   24422:	f389 8811 	msr	BASEPRI, r9
   24426:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   2442a:	b003      	add	sp, #12
   2442c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
   24430:	e9dd 4500 	ldrd	r4, r5, [sp]
		announce_remaining -= dt;
   24434:	ebac 0001 	sub.w	r0, ip, r1
		curr_tick += dt;
   24438:	1864      	adds	r4, r4, r1
		t->dticks = 0;
   2443a:	f04f 0200 	mov.w	r2, #0
   2443e:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
   24442:	eb45 75e1 	adc.w	r5, r5, r1, asr #31
		announce_remaining -= dt;
   24446:	6030      	str	r0, [r6, #0]
		t->dticks = 0;
   24448:	e9c8 2304 	strd	r2, r3, [r8, #16]
		remove_timeout(t);
   2444c:	4640      	mov	r0, r8
		curr_tick += dt;
   2444e:	e9c7 4500 	strd	r4, r5, [r7]
		remove_timeout(t);
   24452:	f7ff fd71 	bl	23f38 <remove_timeout>
   24456:	4817      	ldr	r0, [pc, #92]	; (244b4 <z_clock_announce+0x148>)
   24458:	f7ff fc34 	bl	23cc4 <z_spin_unlock_valid>
   2445c:	b940      	cbnz	r0, 24470 <z_clock_announce+0x104>
   2445e:	4916      	ldr	r1, [pc, #88]	; (244b8 <z_clock_announce+0x14c>)
   24460:	4816      	ldr	r0, [pc, #88]	; (244bc <z_clock_announce+0x150>)
   24462:	22a7      	movs	r2, #167	; 0xa7
   24464:	f002 fd83 	bl	26f6e <printk>
   24468:	21a7      	movs	r1, #167	; 0xa7
   2446a:	4813      	ldr	r0, [pc, #76]	; (244b8 <z_clock_announce+0x14c>)
   2446c:	f002 fff8 	bl	27460 <assert_post_action>
   24470:	f389 8811 	msr	BASEPRI, r9
   24474:	f3bf 8f6f 	isb	sy
		t->fn(t);
   24478:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2447c:	4640      	mov	r0, r8
   2447e:	4798      	blx	r3
	__asm__ volatile(
   24480:	f04f 0320 	mov.w	r3, #32
   24484:	f3ef 8911 	mrs	r9, BASEPRI
   24488:	f383 8811 	msr	BASEPRI, r3
   2448c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24490:	4808      	ldr	r0, [pc, #32]	; (244b4 <z_clock_announce+0x148>)
   24492:	f7ff fc09 	bl	23ca8 <z_spin_lock_valid>
   24496:	b940      	cbnz	r0, 244aa <z_clock_announce+0x13e>
   24498:	4907      	ldr	r1, [pc, #28]	; (244b8 <z_clock_announce+0x14c>)
   2449a:	4808      	ldr	r0, [pc, #32]	; (244bc <z_clock_announce+0x150>)
   2449c:	227c      	movs	r2, #124	; 0x7c
   2449e:	f002 fd66 	bl	26f6e <printk>
   244a2:	217c      	movs	r1, #124	; 0x7c
   244a4:	4804      	ldr	r0, [pc, #16]	; (244b8 <z_clock_announce+0x14c>)
   244a6:	f002 ffdb 	bl	27460 <assert_post_action>
	z_spin_lock_set_owner(l);
   244aa:	4802      	ldr	r0, [pc, #8]	; (244b4 <z_clock_announce+0x148>)
   244ac:	f7ff fc1a 	bl	23ce4 <z_spin_lock_set_owner>
	return k;
   244b0:	e77f      	b.n	243b2 <z_clock_announce+0x46>
   244b2:	bf00      	nop
   244b4:	20004654 	.word	0x20004654
   244b8:	0002fba8 	.word	0x0002fba8
   244bc:	0002fa94 	.word	0x0002fa94
   244c0:	20004650 	.word	0x20004650
   244c4:	20002540 	.word	0x20002540
   244c8:	20000e44 	.word	0x20000e44

000244cc <z_tick_get>:

int64_t z_tick_get(void)
{
   244cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   244d0:	f04f 0320 	mov.w	r3, #32
   244d4:	f3ef 8611 	mrs	r6, BASEPRI
   244d8:	f383 8811 	msr	BASEPRI, r3
   244dc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   244e0:	4816      	ldr	r0, [pc, #88]	; (2453c <z_tick_get+0x70>)
   244e2:	f7ff fbe1 	bl	23ca8 <z_spin_lock_valid>
   244e6:	b940      	cbnz	r0, 244fa <z_tick_get+0x2e>
   244e8:	4915      	ldr	r1, [pc, #84]	; (24540 <z_tick_get+0x74>)
   244ea:	4816      	ldr	r0, [pc, #88]	; (24544 <z_tick_get+0x78>)
   244ec:	227c      	movs	r2, #124	; 0x7c
   244ee:	f002 fd3e 	bl	26f6e <printk>
   244f2:	217c      	movs	r1, #124	; 0x7c
   244f4:	4812      	ldr	r0, [pc, #72]	; (24540 <z_tick_get+0x74>)
   244f6:	f002 ffb3 	bl	27460 <assert_post_action>
	z_spin_lock_set_owner(l);
   244fa:	4810      	ldr	r0, [pc, #64]	; (2453c <z_tick_get+0x70>)
   244fc:	f7ff fbf2 	bl	23ce4 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   24500:	f7e2 f8fe 	bl	6700 <z_clock_elapsed>
   24504:	4b10      	ldr	r3, [pc, #64]	; (24548 <z_tick_get+0x7c>)
   24506:	e9d3 4500 	ldrd	r4, r5, [r3]
   2450a:	1827      	adds	r7, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2450c:	480b      	ldr	r0, [pc, #44]	; (2453c <z_tick_get+0x70>)
   2450e:	f145 0800 	adc.w	r8, r5, #0
   24512:	f7ff fbd7 	bl	23cc4 <z_spin_unlock_valid>
   24516:	b940      	cbnz	r0, 2452a <z_tick_get+0x5e>
   24518:	4909      	ldr	r1, [pc, #36]	; (24540 <z_tick_get+0x74>)
   2451a:	480a      	ldr	r0, [pc, #40]	; (24544 <z_tick_get+0x78>)
   2451c:	22a7      	movs	r2, #167	; 0xa7
   2451e:	f002 fd26 	bl	26f6e <printk>
   24522:	21a7      	movs	r1, #167	; 0xa7
   24524:	4806      	ldr	r0, [pc, #24]	; (24540 <z_tick_get+0x74>)
   24526:	f002 ff9b 	bl	27460 <assert_post_action>
	__asm__ volatile(
   2452a:	f386 8811 	msr	BASEPRI, r6
   2452e:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   24532:	4638      	mov	r0, r7
   24534:	4641      	mov	r1, r8
   24536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2453a:	bf00      	nop
   2453c:	20004654 	.word	0x20004654
   24540:	0002fba8 	.word	0x0002fba8
   24544:	0002fa94 	.word	0x0002fa94
   24548:	20002540 	.word	0x20002540

0002454c <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int num_events,
					      k_spinlock_key_t key)
{
   2454c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24550:	2414      	movs	r4, #20
		__ASSERT(false, "invalid event type\n");
   24552:	4d3d      	ldr	r5, [pc, #244]	; (24648 <clear_event_registrations+0xfc>)
   24554:	4e3d      	ldr	r6, [pc, #244]	; (2464c <clear_event_registrations+0x100>)
   24556:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 24654 <clear_event_registrations+0x108>
{
   2455a:	4681      	mov	r9, r0
   2455c:	4617      	mov	r7, r2
	while (num_events--) {
   2455e:	fb04 0401 	mla	r4, r4, r1, r0
   24562:	454c      	cmp	r4, r9
   24564:	d101      	bne.n	2456a <clear_event_registrations+0x1e>
		clear_event_registration(&events[num_events]);
		k_spin_unlock(&lock, key);
		key = k_spin_lock(&lock);
	}
}
   24566:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	event->poller = NULL;
   2456a:	2300      	movs	r3, #0
   2456c:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
   24570:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   24574:	f003 030f 	and.w	r3, r3, #15
   24578:	2b04      	cmp	r3, #4
   2457a:	d831      	bhi.n	245e0 <clear_event_registrations+0x94>
   2457c:	e8df f003 	tbb	[pc, r3]
   24580:	30032539 	.word	0x30032539
   24584:	1a          	.byte	0x1a
   24585:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   24586:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2458a:	b943      	cbnz	r3, 2459e <clear_event_registrations+0x52>
   2458c:	4629      	mov	r1, r5
   2458e:	229d      	movs	r2, #157	; 0x9d
   24590:	4630      	mov	r0, r6
   24592:	f002 fcec 	bl	26f6e <printk>
   24596:	219d      	movs	r1, #157	; 0x9d
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   24598:	4628      	mov	r0, r5
   2459a:	f002 ff61 	bl	27460 <assert_post_action>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   2459e:	f854 3c14 	ldr.w	r3, [r4, #-20]
   245a2:	b333      	cbz	r3, 245f2 <clear_event_registrations+0xa6>
	node->prev->next = node->next;
   245a4:	f854 2c10 	ldr.w	r2, [r4, #-16]
   245a8:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   245aa:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   245ac:	2300      	movs	r3, #0
	node->prev = NULL;
   245ae:	e944 3305 	strd	r3, r3, [r4, #-20]
   245b2:	e01e      	b.n	245f2 <clear_event_registrations+0xa6>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   245b4:	f854 3c04 	ldr.w	r3, [r4, #-4]
   245b8:	2b00      	cmp	r3, #0
   245ba:	d1f0      	bne.n	2459e <clear_event_registrations+0x52>
   245bc:	4629      	mov	r1, r5
   245be:	22a1      	movs	r2, #161	; 0xa1
   245c0:	4630      	mov	r0, r6
   245c2:	f002 fcd4 	bl	26f6e <printk>
   245c6:	21a1      	movs	r1, #161	; 0xa1
   245c8:	e7e6      	b.n	24598 <clear_event_registrations+0x4c>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   245ca:	f854 3c04 	ldr.w	r3, [r4, #-4]
   245ce:	2b00      	cmp	r3, #0
   245d0:	d1e5      	bne.n	2459e <clear_event_registrations+0x52>
   245d2:	4629      	mov	r1, r5
   245d4:	22a5      	movs	r2, #165	; 0xa5
   245d6:	4630      	mov	r0, r6
   245d8:	f002 fcc9 	bl	26f6e <printk>
   245dc:	21a5      	movs	r1, #165	; 0xa5
   245de:	e7db      	b.n	24598 <clear_event_registrations+0x4c>
		__ASSERT(false, "invalid event type\n");
   245e0:	4629      	mov	r1, r5
   245e2:	4630      	mov	r0, r6
   245e4:	22ac      	movs	r2, #172	; 0xac
   245e6:	f002 fcc2 	bl	26f6e <printk>
   245ea:	21ac      	movs	r1, #172	; 0xac
   245ec:	4628      	mov	r0, r5
   245ee:	f002 ff37 	bl	27460 <assert_post_action>
   245f2:	4640      	mov	r0, r8
   245f4:	f7ff fb66 	bl	23cc4 <z_spin_unlock_valid>
   245f8:	b940      	cbnz	r0, 2460c <clear_event_registrations+0xc0>
   245fa:	4915      	ldr	r1, [pc, #84]	; (24650 <clear_event_registrations+0x104>)
   245fc:	4630      	mov	r0, r6
   245fe:	22a7      	movs	r2, #167	; 0xa7
   24600:	f002 fcb5 	bl	26f6e <printk>
   24604:	21a7      	movs	r1, #167	; 0xa7
   24606:	4812      	ldr	r0, [pc, #72]	; (24650 <clear_event_registrations+0x104>)
   24608:	f002 ff2a 	bl	27460 <assert_post_action>
   2460c:	f387 8811 	msr	BASEPRI, r7
   24610:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   24614:	f04f 0320 	mov.w	r3, #32
   24618:	f3ef 8711 	mrs	r7, BASEPRI
   2461c:	f383 8811 	msr	BASEPRI, r3
   24620:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24624:	4640      	mov	r0, r8
   24626:	f7ff fb3f 	bl	23ca8 <z_spin_lock_valid>
   2462a:	b940      	cbnz	r0, 2463e <clear_event_registrations+0xf2>
   2462c:	4908      	ldr	r1, [pc, #32]	; (24650 <clear_event_registrations+0x104>)
   2462e:	4630      	mov	r0, r6
   24630:	227c      	movs	r2, #124	; 0x7c
   24632:	f002 fc9c 	bl	26f6e <printk>
   24636:	217c      	movs	r1, #124	; 0x7c
   24638:	4805      	ldr	r0, [pc, #20]	; (24650 <clear_event_registrations+0x104>)
   2463a:	f002 ff11 	bl	27460 <assert_post_action>
	z_spin_lock_set_owner(l);
   2463e:	4640      	mov	r0, r8
   24640:	f7ff fb50 	bl	23ce4 <z_spin_lock_set_owner>
	return k;
   24644:	3c14      	subs	r4, #20
   24646:	e78c      	b.n	24562 <clear_event_registrations+0x16>
   24648:	00035cef 	.word	0x00035cef
   2464c:	0002fa94 	.word	0x0002fa94
   24650:	0002fba8 	.word	0x0002fba8
   24654:	20004658 	.word	0x20004658

00024658 <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, uint32_t state)
{
   24658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   2465c:	6884      	ldr	r4, [r0, #8]
{
   2465e:	4605      	mov	r5, r0
   24660:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller) {
   24662:	b1b4      	cbz	r4, 24692 <signal_poll_event+0x3a>
		if (poller->mode == MODE_POLL) {
   24664:	7863      	ldrb	r3, [r4, #1]
   24666:	2b01      	cmp	r3, #1
   24668:	d147      	bne.n	246fa <signal_poll_event+0xa2>
	__ASSERT(thread != NULL, "poller should have a thread\n");
   2466a:	f1b4 076c 	subs.w	r7, r4, #108	; 0x6c
   2466e:	d10a      	bne.n	24686 <signal_poll_event+0x2e>
   24670:	22e3      	movs	r2, #227	; 0xe3
   24672:	492e      	ldr	r1, [pc, #184]	; (2472c <signal_poll_event+0xd4>)
   24674:	482e      	ldr	r0, [pc, #184]	; (24730 <signal_poll_event+0xd8>)
   24676:	f002 fc7a 	bl	26f6e <printk>
   2467a:	21e3      	movs	r1, #227	; 0xe3
   2467c:	482b      	ldr	r0, [pc, #172]	; (2472c <signal_poll_event+0xd4>)
   2467e:	f002 feef 	bl	27460 <assert_post_action>
	if (!z_is_thread_pending(thread)) {
   24682:	7b7b      	ldrb	r3, [r7, #13]
   24684:	deff      	udf	#255	; 0xff
   24686:	f814 3c5f 	ldrb.w	r3, [r4, #-95]
   2468a:	f013 0302 	ands.w	r3, r3, #2
   2468e:	d10a      	bne.n	246a6 <signal_poll_event+0x4e>
			retcode = signal_poller(event, state);
		} else if (poller->mode == MODE_TRIGGERED) {
			retcode = signal_triggered_work(event, state);
		}

		poller->is_polling = false;
   24690:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   24692:	68eb      	ldr	r3, [r5, #12]
   24694:	f3c3 3204 	ubfx	r2, r3, #12, #5
   24698:	4316      	orrs	r6, r2
	event->poller = NULL;
   2469a:	2000      	movs	r0, #0
	event->state |= state;
   2469c:	f366 3310 	bfi	r3, r6, #12, #5
	event->poller = NULL;
   246a0:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   246a2:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
   246a4:	e00d      	b.n	246c2 <signal_poll_event+0x6a>
	if (z_is_thread_timeout_expired(thread)) {
   246a6:	e954 2311 	ldrd	r2, r3, [r4, #-68]	; 0x44
   246aa:	f04f 31ff 	mov.w	r1, #4294967295
   246ae:	f06f 0001 	mvn.w	r0, #1
   246b2:	428b      	cmp	r3, r1
   246b4:	bf08      	it	eq
   246b6:	4282      	cmpeq	r2, r0
   246b8:	d105      	bne.n	246c6 <signal_poll_event+0x6e>
		poller->is_polling = false;
   246ba:	2300      	movs	r3, #0
   246bc:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   246be:	f06f 000a 	mvn.w	r0, #10
}
   246c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_unpend_thread(thread);
   246c6:	4638      	mov	r0, r7
   246c8:	f7fe f9f8 	bl	22abc <z_unpend_thread>
	arch_thread_return_value_set(thread,
   246cc:	2e08      	cmp	r6, #8
   246ce:	bf0c      	ite	eq
   246d0:	f06f 0303 	mvneq.w	r3, #3
   246d4:	2300      	movne	r3, #0
   246d6:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   246d8:	f814 3c5f 	ldrb.w	r3, [r4, #-95]
   246dc:	06db      	lsls	r3, r3, #27
   246de:	d104      	bne.n	246ea <signal_poll_event+0x92>
	if (!z_is_thread_ready(thread)) {
   246e0:	f854 8c54 	ldr.w	r8, [r4, #-84]
   246e4:	f1b8 0f00 	cmp.w	r8, #0
   246e8:	d001      	beq.n	246ee <signal_poll_event+0x96>
		poller->is_polling = false;
   246ea:	2300      	movs	r3, #0
   246ec:	e7d0      	b.n	24690 <signal_poll_event+0x38>
	z_ready_thread(thread);
   246ee:	4638      	mov	r0, r7
   246f0:	f7fe fafc 	bl	22cec <z_ready_thread>
		poller->is_polling = false;
   246f4:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   246f8:	e7cb      	b.n	24692 <signal_poll_event+0x3a>
		} else if (poller->mode == MODE_TRIGGERED) {
   246fa:	2b02      	cmp	r3, #2
   246fc:	d1f5      	bne.n	246ea <signal_poll_event+0x92>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   246fe:	7823      	ldrb	r3, [r4, #0]
   24700:	2b00      	cmp	r3, #0
   24702:	d0c6      	beq.n	24692 <signal_poll_event+0x3a>
   24704:	f854 7c04 	ldr.w	r7, [r4, #-4]
   24708:	b177      	cbz	r7, 24728 <signal_poll_event+0xd0>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
   2470a:	f1a4 0910 	sub.w	r9, r4, #16
   2470e:	f104 0010 	add.w	r0, r4, #16
		twork->poll_result = 0;
   24712:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   24716:	f7ff fd3f 	bl	24198 <z_abort_timeout>
		twork->poll_result = 0;
   2471a:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
		k_work_submit_to_queue(work_q, &twork->work);
   2471e:	4649      	mov	r1, r9
   24720:	4638      	mov	r0, r7
   24722:	f008 feba 	bl	2d49a <k_work_submit_to_queue>
   24726:	e7e5      	b.n	246f4 <signal_poll_event+0x9c>
		poller->is_polling = false;
   24728:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   2472a:	e7b2      	b.n	24692 <signal_poll_event+0x3a>
   2472c:	00035cef 	.word	0x00035cef
   24730:	0002fa94 	.word	0x0002fa94

00024734 <register_events>:
{
   24734:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   24738:	2600      	movs	r6, #0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2473a:	f8df 919c 	ldr.w	r9, [pc, #412]	; 248d8 <register_events+0x1a4>
   2473e:	4f63      	ldr	r7, [pc, #396]	; (248cc <register_events+0x198>)
   24740:	4c63      	ldr	r4, [pc, #396]	; (248d0 <register_events+0x19c>)
{
   24742:	9100      	str	r1, [sp, #0]
   24744:	4615      	mov	r5, r2
   24746:	9301      	str	r3, [sp, #4]
   24748:	4682      	mov	sl, r0
	int events_registered = 0;
   2474a:	46b0      	mov	r8, r6
	for (int ii = 0; ii < num_events; ii++) {
   2474c:	9b00      	ldr	r3, [sp, #0]
   2474e:	429e      	cmp	r6, r3
   24750:	db03      	blt.n	2475a <register_events+0x26>
}
   24752:	4640      	mov	r0, r8
   24754:	b003      	add	sp, #12
   24756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2475a:	f04f 0220 	mov.w	r2, #32
   2475e:	f3ef 8b11 	mrs	fp, BASEPRI
   24762:	f382 8811 	msr	BASEPRI, r2
   24766:	f3bf 8f6f 	isb	sy
   2476a:	4648      	mov	r0, r9
   2476c:	f7ff fa9c 	bl	23ca8 <z_spin_lock_valid>
   24770:	b940      	cbnz	r0, 24784 <register_events+0x50>
   24772:	4639      	mov	r1, r7
   24774:	4620      	mov	r0, r4
   24776:	227c      	movs	r2, #124	; 0x7c
   24778:	f002 fbf9 	bl	26f6e <printk>
   2477c:	217c      	movs	r1, #124	; 0x7c
   2477e:	4638      	mov	r0, r7
   24780:	f002 fe6e 	bl	27460 <assert_post_action>
	z_spin_lock_set_owner(l);
   24784:	4648      	mov	r0, r9
   24786:	f7ff faad 	bl	23ce4 <z_spin_lock_set_owner>
	switch (event->type) {
   2478a:	f89a 200d 	ldrb.w	r2, [sl, #13]
   2478e:	f002 020f 	and.w	r2, r2, #15
   24792:	2a04      	cmp	r2, #4
   24794:	d848      	bhi.n	24828 <register_events+0xf4>
   24796:	e8df f002 	tbb	[pc, r2]
   2479a:	402f      	.short	0x402f
   2479c:	4703      	.short	0x4703
   2479e:	2b          	.byte	0x2b
   2479f:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   247a0:	f8da 2010 	ldr.w	r2, [sl, #16]
   247a4:	6892      	ldr	r2, [r2, #8]
   247a6:	b33a      	cbz	r2, 247f8 <register_events+0xc4>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   247a8:	2102      	movs	r1, #2
	event->state |= state;
   247aa:	f8da 200c 	ldr.w	r2, [sl, #12]
   247ae:	f3c2 3c04 	ubfx	ip, r2, #12, #5
   247b2:	ea41 010c 	orr.w	r1, r1, ip
	event->poller = NULL;
   247b6:	2000      	movs	r0, #0
	event->state |= state;
   247b8:	f361 3210 	bfi	r2, r1, #12, #5
	event->poller = NULL;
   247bc:	f8ca 0008 	str.w	r0, [sl, #8]
	event->state |= state;
   247c0:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   247c4:	7028      	strb	r0, [r5, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   247c6:	4648      	mov	r0, r9
   247c8:	f7ff fa7c 	bl	23cc4 <z_spin_unlock_valid>
   247cc:	b940      	cbnz	r0, 247e0 <register_events+0xac>
   247ce:	4639      	mov	r1, r7
   247d0:	4620      	mov	r0, r4
   247d2:	22a7      	movs	r2, #167	; 0xa7
   247d4:	f002 fbcb 	bl	26f6e <printk>
   247d8:	21a7      	movs	r1, #167	; 0xa7
   247da:	4638      	mov	r0, r7
   247dc:	f002 fe40 	bl	27460 <assert_post_action>
	__asm__ volatile(
   247e0:	f38b 8811 	msr	BASEPRI, fp
   247e4:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   247e8:	3601      	adds	r6, #1
   247ea:	f10a 0a14 	add.w	sl, sl, #20
   247ee:	e7ad      	b.n	2474c <register_events+0x18>
		if (!k_queue_is_empty(event->queue)) {
   247f0:	f8da 2010 	ldr.w	r2, [sl, #16]
   247f4:	6812      	ldr	r2, [r2, #0]
   247f6:	bb0a      	cbnz	r2, 2483c <register_events+0x108>
		} else if (!just_check && poller->is_polling) {
   247f8:	9b01      	ldr	r3, [sp, #4]
   247fa:	2b00      	cmp	r3, #0
   247fc:	d1e3      	bne.n	247c6 <register_events+0x92>
   247fe:	782a      	ldrb	r2, [r5, #0]
   24800:	2a00      	cmp	r2, #0
   24802:	d0e0      	beq.n	247c6 <register_events+0x92>
	switch (event->type) {
   24804:	f89a 200d 	ldrb.w	r2, [sl, #13]
   24808:	f002 020f 	and.w	r2, r2, #15
   2480c:	2a04      	cmp	r2, #4
   2480e:	d852      	bhi.n	248b6 <register_events+0x182>
   24810:	e8df f002 	tbb	[pc, r2]
   24814:	51164029 	.word	0x51164029
   24818:	2e          	.byte	0x2e
   24819:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   2481a:	f8da 2010 	ldr.w	r2, [sl, #16]
   2481e:	6892      	ldr	r2, [r2, #8]
   24820:	2a00      	cmp	r2, #0
   24822:	d0e9      	beq.n	247f8 <register_events+0xc4>
			*state = K_POLL_STATE_SIGNALED;
   24824:	2101      	movs	r1, #1
   24826:	e7c0      	b.n	247aa <register_events+0x76>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   24828:	4620      	mov	r0, r4
   2482a:	2254      	movs	r2, #84	; 0x54
   2482c:	4929      	ldr	r1, [pc, #164]	; (248d4 <register_events+0x1a0>)
   2482e:	f002 fb9e 	bl	26f6e <printk>
   24832:	2154      	movs	r1, #84	; 0x54
   24834:	4827      	ldr	r0, [pc, #156]	; (248d4 <register_events+0x1a0>)
   24836:	f002 fe13 	bl	27460 <assert_post_action>
		break;
   2483a:	e7dd      	b.n	247f8 <register_events+0xc4>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   2483c:	2104      	movs	r1, #4
   2483e:	e7b4      	b.n	247aa <register_events+0x76>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   24840:	f8da 2010 	ldr.w	r2, [sl, #16]
   24844:	b942      	cbnz	r2, 24858 <register_events+0x124>
   24846:	4923      	ldr	r1, [pc, #140]	; (248d4 <register_events+0x1a0>)
   24848:	4620      	mov	r0, r4
   2484a:	227e      	movs	r2, #126	; 0x7e
   2484c:	f002 fb8f 	bl	26f6e <printk>
   24850:	217e      	movs	r1, #126	; 0x7e
   24852:	4820      	ldr	r0, [pc, #128]	; (248d4 <register_events+0x1a0>)
   24854:	f002 fe04 	bl	27460 <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   24858:	f8da 0010 	ldr.w	r0, [sl, #16]
   2485c:	462a      	mov	r2, r5
   2485e:	4651      	mov	r1, sl
   24860:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   24862:	f008 fe32 	bl	2d4ca <add_event>
	event->poller = poller;
   24866:	f8ca 5008 	str.w	r5, [sl, #8]
			events_registered += 1;
   2486a:	f108 0801 	add.w	r8, r8, #1
   2486e:	e7aa      	b.n	247c6 <register_events+0x92>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   24870:	f8da 2010 	ldr.w	r2, [sl, #16]
   24874:	b942      	cbnz	r2, 24888 <register_events+0x154>
   24876:	4917      	ldr	r1, [pc, #92]	; (248d4 <register_events+0x1a0>)
   24878:	4620      	mov	r0, r4
   2487a:	2282      	movs	r2, #130	; 0x82
   2487c:	f002 fb77 	bl	26f6e <printk>
   24880:	2182      	movs	r1, #130	; 0x82
   24882:	4814      	ldr	r0, [pc, #80]	; (248d4 <register_events+0x1a0>)
   24884:	f002 fdec 	bl	27460 <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   24888:	f8da 0010 	ldr.w	r0, [sl, #16]
   2488c:	462a      	mov	r2, r5
   2488e:	4651      	mov	r1, sl
   24890:	3014      	adds	r0, #20
   24892:	e7e6      	b.n	24862 <register_events+0x12e>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   24894:	f8da 2010 	ldr.w	r2, [sl, #16]
   24898:	b942      	cbnz	r2, 248ac <register_events+0x178>
   2489a:	490e      	ldr	r1, [pc, #56]	; (248d4 <register_events+0x1a0>)
   2489c:	4620      	mov	r0, r4
   2489e:	2286      	movs	r2, #134	; 0x86
   248a0:	f002 fb65 	bl	26f6e <printk>
   248a4:	2186      	movs	r1, #134	; 0x86
   248a6:	480b      	ldr	r0, [pc, #44]	; (248d4 <register_events+0x1a0>)
   248a8:	f002 fdda 	bl	27460 <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   248ac:	462a      	mov	r2, r5
   248ae:	4651      	mov	r1, sl
   248b0:	f8da 0010 	ldr.w	r0, [sl, #16]
   248b4:	e7d5      	b.n	24862 <register_events+0x12e>
		__ASSERT(false, "invalid event type\n");
   248b6:	4620      	mov	r0, r4
   248b8:	228d      	movs	r2, #141	; 0x8d
   248ba:	4906      	ldr	r1, [pc, #24]	; (248d4 <register_events+0x1a0>)
   248bc:	f002 fb57 	bl	26f6e <printk>
   248c0:	218d      	movs	r1, #141	; 0x8d
   248c2:	4804      	ldr	r0, [pc, #16]	; (248d4 <register_events+0x1a0>)
   248c4:	f002 fdcc 	bl	27460 <assert_post_action>
		break;
   248c8:	e7cd      	b.n	24866 <register_events+0x132>
   248ca:	bf00      	nop
   248cc:	0002fba8 	.word	0x0002fba8
   248d0:	0002fa94 	.word	0x0002fa94
   248d4:	00035cef 	.word	0x00035cef
   248d8:	20004658 	.word	0x20004658

000248dc <k_poll_event_init>:
{
   248dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   248de:	4604      	mov	r4, r0
   248e0:	460f      	mov	r7, r1
   248e2:	461d      	mov	r5, r3
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   248e4:	4616      	mov	r6, r2
   248e6:	b142      	cbz	r2, 248fa <k_poll_event_init+0x1e>
   248e8:	4916      	ldr	r1, [pc, #88]	; (24944 <k_poll_event_init+0x68>)
   248ea:	4817      	ldr	r0, [pc, #92]	; (24948 <k_poll_event_init+0x6c>)
   248ec:	222e      	movs	r2, #46	; 0x2e
   248ee:	f002 fb3e 	bl	26f6e <printk>
   248f2:	212e      	movs	r1, #46	; 0x2e
   248f4:	4813      	ldr	r0, [pc, #76]	; (24944 <k_poll_event_init+0x68>)
   248f6:	f002 fdb3 	bl	27460 <assert_post_action>
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   248fa:	2f0f      	cmp	r7, #15
   248fc:	d908      	bls.n	24910 <k_poll_event_init+0x34>
   248fe:	4911      	ldr	r1, [pc, #68]	; (24944 <k_poll_event_init+0x68>)
   24900:	4811      	ldr	r0, [pc, #68]	; (24948 <k_poll_event_init+0x6c>)
   24902:	222f      	movs	r2, #47	; 0x2f
   24904:	f002 fb33 	bl	26f6e <printk>
   24908:	212f      	movs	r1, #47	; 0x2f
   2490a:	480e      	ldr	r0, [pc, #56]	; (24944 <k_poll_event_init+0x68>)
   2490c:	f002 fda8 	bl	27460 <assert_post_action>
	__ASSERT(obj != NULL, "must provide an object\n");
   24910:	b945      	cbnz	r5, 24924 <k_poll_event_init+0x48>
   24912:	490c      	ldr	r1, [pc, #48]	; (24944 <k_poll_event_init+0x68>)
   24914:	480c      	ldr	r0, [pc, #48]	; (24948 <k_poll_event_init+0x6c>)
   24916:	2230      	movs	r2, #48	; 0x30
   24918:	f002 fb29 	bl	26f6e <printk>
   2491c:	2130      	movs	r1, #48	; 0x30
   2491e:	4809      	ldr	r0, [pc, #36]	; (24944 <k_poll_event_init+0x68>)
   24920:	f002 fd9e 	bl	27460 <assert_post_action>
	event->type = type;
   24924:	7b63      	ldrb	r3, [r4, #13]
   24926:	f367 0303 	bfi	r3, r7, #0, #4
   2492a:	7363      	strb	r3, [r4, #13]
	event->mode = mode;
   2492c:	7ba3      	ldrb	r3, [r4, #14]
   2492e:	f366 0341 	bfi	r3, r6, #1, #1
   24932:	73a3      	strb	r3, [r4, #14]
	event->poller = NULL;
   24934:	2300      	movs	r3, #0
	event->state = K_POLL_STATE_NOT_READY;
   24936:	68e2      	ldr	r2, [r4, #12]
	event->poller = NULL;
   24938:	60a3      	str	r3, [r4, #8]
	event->state = K_POLL_STATE_NOT_READY;
   2493a:	4b04      	ldr	r3, [pc, #16]	; (2494c <k_poll_event_init+0x70>)
   2493c:	4013      	ands	r3, r2
	event->obj = obj;
   2493e:	e9c4 3503 	strd	r3, r5, [r4, #12]
}
   24942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24944:	00035cef 	.word	0x00035cef
   24948:	0002fa94 	.word	0x0002fa94
   2494c:	00020fff 	.word	0x00020fff

00024950 <z_impl_k_poll>:
{
   24950:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24954:	4699      	mov	r9, r3
	struct z_poller *poller = &_current->poller;
   24956:	4b64      	ldr	r3, [pc, #400]	; (24ae8 <z_impl_k_poll+0x198>)
   24958:	689c      	ldr	r4, [r3, #8]
	poller->is_polling = true;
   2495a:	2301      	movs	r3, #1
{
   2495c:	b085      	sub	sp, #20
   2495e:	4605      	mov	r5, r0
   24960:	460e      	mov	r6, r1
   24962:	4690      	mov	r8, r2
	struct z_poller *poller = &_current->poller;
   24964:	f104 076c 	add.w	r7, r4, #108	; 0x6c
	poller->is_polling = true;
   24968:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
	poller->mode = MODE_POLL;
   2496c:	f884 306d 	strb.w	r3, [r4, #109]	; 0x6d
   24970:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   24974:	b153      	cbz	r3, 2498c <z_impl_k_poll+0x3c>
   24976:	495d      	ldr	r1, [pc, #372]	; (24aec <z_impl_k_poll+0x19c>)
   24978:	485d      	ldr	r0, [pc, #372]	; (24af0 <z_impl_k_poll+0x1a0>)
   2497a:	f44f 7282 	mov.w	r2, #260	; 0x104
   2497e:	f002 faf6 	bl	26f6e <printk>
   24982:	f44f 7182 	mov.w	r1, #260	; 0x104
   24986:	4859      	ldr	r0, [pc, #356]	; (24aec <z_impl_k_poll+0x19c>)
   24988:	f002 fd6a 	bl	27460 <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   2498c:	b955      	cbnz	r5, 249a4 <z_impl_k_poll+0x54>
   2498e:	4957      	ldr	r1, [pc, #348]	; (24aec <z_impl_k_poll+0x19c>)
   24990:	4857      	ldr	r0, [pc, #348]	; (24af0 <z_impl_k_poll+0x1a0>)
   24992:	f240 1205 	movw	r2, #261	; 0x105
   24996:	f002 faea 	bl	26f6e <printk>
   2499a:	f240 1105 	movw	r1, #261	; 0x105
   2499e:	4853      	ldr	r0, [pc, #332]	; (24aec <z_impl_k_poll+0x19c>)
   249a0:	f002 fd5e 	bl	27460 <assert_post_action>
	__ASSERT(num_events >= 0, "<0 events\n");
   249a4:	2e00      	cmp	r6, #0
   249a6:	da0a      	bge.n	249be <z_impl_k_poll+0x6e>
   249a8:	4950      	ldr	r1, [pc, #320]	; (24aec <z_impl_k_poll+0x19c>)
   249aa:	4851      	ldr	r0, [pc, #324]	; (24af0 <z_impl_k_poll+0x1a0>)
   249ac:	f44f 7283 	mov.w	r2, #262	; 0x106
   249b0:	f002 fadd 	bl	26f6e <printk>
   249b4:	f44f 7183 	mov.w	r1, #262	; 0x106
   249b8:	484c      	ldr	r0, [pc, #304]	; (24aec <z_impl_k_poll+0x19c>)
   249ba:	f002 fd51 	bl	27460 <assert_post_action>
	events_registered = register_events(events, num_events, poller,
   249be:	ea58 0309 	orrs.w	r3, r8, r9
   249c2:	bf0c      	ite	eq
   249c4:	2301      	moveq	r3, #1
   249c6:	2300      	movne	r3, #0
   249c8:	463a      	mov	r2, r7
   249ca:	4631      	mov	r1, r6
   249cc:	4628      	mov	r0, r5
   249ce:	f7ff feb1 	bl	24734 <register_events>
   249d2:	4607      	mov	r7, r0
	__asm__ volatile(
   249d4:	f04f 0320 	mov.w	r3, #32
   249d8:	f3ef 8611 	mrs	r6, BASEPRI
   249dc:	f383 8811 	msr	BASEPRI, r3
   249e0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   249e4:	4843      	ldr	r0, [pc, #268]	; (24af4 <z_impl_k_poll+0x1a4>)
   249e6:	f7ff f95f 	bl	23ca8 <z_spin_lock_valid>
   249ea:	b940      	cbnz	r0, 249fe <z_impl_k_poll+0xae>
   249ec:	4942      	ldr	r1, [pc, #264]	; (24af8 <z_impl_k_poll+0x1a8>)
   249ee:	4840      	ldr	r0, [pc, #256]	; (24af0 <z_impl_k_poll+0x1a0>)
   249f0:	227c      	movs	r2, #124	; 0x7c
   249f2:	f002 fabc 	bl	26f6e <printk>
   249f6:	217c      	movs	r1, #124	; 0x7c
   249f8:	483f      	ldr	r0, [pc, #252]	; (24af8 <z_impl_k_poll+0x1a8>)
   249fa:	f002 fd31 	bl	27460 <assert_post_action>
	z_spin_lock_set_owner(l);
   249fe:	483d      	ldr	r0, [pc, #244]	; (24af4 <z_impl_k_poll+0x1a4>)
   24a00:	f7ff f970 	bl	23ce4 <z_spin_lock_set_owner>
	if (!poller->is_polling) {
   24a04:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
   24a08:	b9d3      	cbnz	r3, 24a40 <z_impl_k_poll+0xf0>
		clear_event_registrations(events, events_registered, key);
   24a0a:	4628      	mov	r0, r5
   24a0c:	4632      	mov	r2, r6
   24a0e:	4639      	mov	r1, r7
   24a10:	f7ff fd9c 	bl	2454c <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24a14:	4837      	ldr	r0, [pc, #220]	; (24af4 <z_impl_k_poll+0x1a4>)
   24a16:	f7ff f955 	bl	23cc4 <z_spin_unlock_valid>
   24a1a:	b940      	cbnz	r0, 24a2e <z_impl_k_poll+0xde>
   24a1c:	4936      	ldr	r1, [pc, #216]	; (24af8 <z_impl_k_poll+0x1a8>)
   24a1e:	4834      	ldr	r0, [pc, #208]	; (24af0 <z_impl_k_poll+0x1a0>)
   24a20:	22a7      	movs	r2, #167	; 0xa7
   24a22:	f002 faa4 	bl	26f6e <printk>
   24a26:	21a7      	movs	r1, #167	; 0xa7
   24a28:	4833      	ldr	r0, [pc, #204]	; (24af8 <z_impl_k_poll+0x1a8>)
   24a2a:	f002 fd19 	bl	27460 <assert_post_action>
	__asm__ volatile(
   24a2e:	f386 8811 	msr	BASEPRI, r6
   24a32:	f3bf 8f6f 	isb	sy
		return 0;
   24a36:	2400      	movs	r4, #0
}
   24a38:	4620      	mov	r0, r4
   24a3a:	b005      	add	sp, #20
   24a3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	poller->is_polling = false;
   24a40:	2300      	movs	r3, #0
   24a42:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   24a46:	ea58 0309 	orrs.w	r3, r8, r9
   24a4a:	d113      	bne.n	24a74 <z_impl_k_poll+0x124>
   24a4c:	4829      	ldr	r0, [pc, #164]	; (24af4 <z_impl_k_poll+0x1a4>)
   24a4e:	f7ff f939 	bl	23cc4 <z_spin_unlock_valid>
   24a52:	b940      	cbnz	r0, 24a66 <z_impl_k_poll+0x116>
   24a54:	4928      	ldr	r1, [pc, #160]	; (24af8 <z_impl_k_poll+0x1a8>)
   24a56:	4826      	ldr	r0, [pc, #152]	; (24af0 <z_impl_k_poll+0x1a0>)
   24a58:	22a7      	movs	r2, #167	; 0xa7
   24a5a:	f002 fa88 	bl	26f6e <printk>
   24a5e:	21a7      	movs	r1, #167	; 0xa7
   24a60:	4825      	ldr	r0, [pc, #148]	; (24af8 <z_impl_k_poll+0x1a8>)
   24a62:	f002 fcfd 	bl	27460 <assert_post_action>
   24a66:	f386 8811 	msr	BASEPRI, r6
   24a6a:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   24a6e:	f06f 040a 	mvn.w	r4, #10
   24a72:	e7e1      	b.n	24a38 <z_impl_k_poll+0xe8>
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   24a74:	aa02      	add	r2, sp, #8
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   24a76:	e9cd 8900 	strd	r8, r9, [sp]
   24a7a:	4631      	mov	r1, r6
   24a7c:	481d      	ldr	r0, [pc, #116]	; (24af4 <z_impl_k_poll+0x1a4>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   24a7e:	e9cd 2202 	strd	r2, r2, [sp, #8]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   24a82:	f7fe fca5 	bl	233d0 <z_pend_curr>
   24a86:	4604      	mov	r4, r0
	__asm__ volatile(
   24a88:	f04f 0320 	mov.w	r3, #32
   24a8c:	f3ef 8611 	mrs	r6, BASEPRI
   24a90:	f383 8811 	msr	BASEPRI, r3
   24a94:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24a98:	4816      	ldr	r0, [pc, #88]	; (24af4 <z_impl_k_poll+0x1a4>)
   24a9a:	f7ff f905 	bl	23ca8 <z_spin_lock_valid>
   24a9e:	b940      	cbnz	r0, 24ab2 <z_impl_k_poll+0x162>
   24aa0:	4915      	ldr	r1, [pc, #84]	; (24af8 <z_impl_k_poll+0x1a8>)
   24aa2:	4813      	ldr	r0, [pc, #76]	; (24af0 <z_impl_k_poll+0x1a0>)
   24aa4:	227c      	movs	r2, #124	; 0x7c
   24aa6:	f002 fa62 	bl	26f6e <printk>
   24aaa:	217c      	movs	r1, #124	; 0x7c
   24aac:	4812      	ldr	r0, [pc, #72]	; (24af8 <z_impl_k_poll+0x1a8>)
   24aae:	f002 fcd7 	bl	27460 <assert_post_action>
	z_spin_lock_set_owner(l);
   24ab2:	4810      	ldr	r0, [pc, #64]	; (24af4 <z_impl_k_poll+0x1a4>)
   24ab4:	f7ff f916 	bl	23ce4 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   24ab8:	4628      	mov	r0, r5
   24aba:	4632      	mov	r2, r6
   24abc:	4639      	mov	r1, r7
   24abe:	f7ff fd45 	bl	2454c <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24ac2:	480c      	ldr	r0, [pc, #48]	; (24af4 <z_impl_k_poll+0x1a4>)
   24ac4:	f7ff f8fe 	bl	23cc4 <z_spin_unlock_valid>
   24ac8:	b940      	cbnz	r0, 24adc <z_impl_k_poll+0x18c>
   24aca:	490b      	ldr	r1, [pc, #44]	; (24af8 <z_impl_k_poll+0x1a8>)
   24acc:	4808      	ldr	r0, [pc, #32]	; (24af0 <z_impl_k_poll+0x1a0>)
   24ace:	22a7      	movs	r2, #167	; 0xa7
   24ad0:	f002 fa4d 	bl	26f6e <printk>
   24ad4:	21a7      	movs	r1, #167	; 0xa7
   24ad6:	4808      	ldr	r0, [pc, #32]	; (24af8 <z_impl_k_poll+0x1a8>)
   24ad8:	f002 fcc2 	bl	27460 <assert_post_action>
	__asm__ volatile(
   24adc:	f386 8811 	msr	BASEPRI, r6
   24ae0:	f3bf 8f6f 	isb	sy
	return swap_rc;
   24ae4:	e7a8      	b.n	24a38 <z_impl_k_poll+0xe8>
   24ae6:	bf00      	nop
   24ae8:	20004604 	.word	0x20004604
   24aec:	00035cef 	.word	0x00035cef
   24af0:	0002fa94 	.word	0x0002fa94
   24af4:	20004658 	.word	0x20004658
   24af8:	0002fba8 	.word	0x0002fba8

00024afc <z_impl_k_poll_signal_raise>:
{
   24afc:	b570      	push	{r4, r5, r6, lr}
   24afe:	4604      	mov	r4, r0
   24b00:	460e      	mov	r6, r1
	__asm__ volatile(
   24b02:	f04f 0320 	mov.w	r3, #32
   24b06:	f3ef 8511 	mrs	r5, BASEPRI
   24b0a:	f383 8811 	msr	BASEPRI, r3
   24b0e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24b12:	481c      	ldr	r0, [pc, #112]	; (24b84 <z_impl_k_poll_signal_raise+0x88>)
   24b14:	f7ff f8c8 	bl	23ca8 <z_spin_lock_valid>
   24b18:	b940      	cbnz	r0, 24b2c <z_impl_k_poll_signal_raise+0x30>
   24b1a:	491b      	ldr	r1, [pc, #108]	; (24b88 <z_impl_k_poll_signal_raise+0x8c>)
   24b1c:	481b      	ldr	r0, [pc, #108]	; (24b8c <z_impl_k_poll_signal_raise+0x90>)
   24b1e:	227c      	movs	r2, #124	; 0x7c
   24b20:	f002 fa25 	bl	26f6e <printk>
   24b24:	217c      	movs	r1, #124	; 0x7c
   24b26:	4818      	ldr	r0, [pc, #96]	; (24b88 <z_impl_k_poll_signal_raise+0x8c>)
   24b28:	f002 fc9a 	bl	27460 <assert_post_action>
	z_spin_lock_set_owner(l);
   24b2c:	4815      	ldr	r0, [pc, #84]	; (24b84 <z_impl_k_poll_signal_raise+0x88>)
   24b2e:	f7ff f8d9 	bl	23ce4 <z_spin_lock_set_owner>
	return list->head == list;
   24b32:	6820      	ldr	r0, [r4, #0]
	signal->result = result;
   24b34:	60e6      	str	r6, [r4, #12]
	signal->signaled = 1U;
   24b36:	2101      	movs	r1, #1

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   24b38:	4284      	cmp	r4, r0
   24b3a:	60a1      	str	r1, [r4, #8]
   24b3c:	d112      	bne.n	24b64 <z_impl_k_poll_signal_raise+0x68>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24b3e:	4811      	ldr	r0, [pc, #68]	; (24b84 <z_impl_k_poll_signal_raise+0x88>)
   24b40:	f7ff f8c0 	bl	23cc4 <z_spin_unlock_valid>
   24b44:	b940      	cbnz	r0, 24b58 <z_impl_k_poll_signal_raise+0x5c>
   24b46:	4910      	ldr	r1, [pc, #64]	; (24b88 <z_impl_k_poll_signal_raise+0x8c>)
   24b48:	4810      	ldr	r0, [pc, #64]	; (24b8c <z_impl_k_poll_signal_raise+0x90>)
   24b4a:	22a7      	movs	r2, #167	; 0xa7
   24b4c:	f002 fa0f 	bl	26f6e <printk>
   24b50:	21a7      	movs	r1, #167	; 0xa7
   24b52:	480d      	ldr	r0, [pc, #52]	; (24b88 <z_impl_k_poll_signal_raise+0x8c>)
   24b54:	f002 fc84 	bl	27460 <assert_post_action>
	__asm__ volatile(
   24b58:	f385 8811 	msr	BASEPRI, r5
   24b5c:	f3bf 8f6f 	isb	sy
		return 0;
   24b60:	2400      	movs	r4, #0
   24b62:	e00d      	b.n	24b80 <z_impl_k_poll_signal_raise+0x84>
	node->prev->next = node->next;
   24b64:	e9d0 3200 	ldrd	r3, r2, [r0]
   24b68:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   24b6a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   24b6c:	2300      	movs	r3, #0
	node->prev = NULL;
   24b6e:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   24b72:	f7ff fd71 	bl	24658 <signal_poll_event>
	z_reschedule(&lock, key);
   24b76:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   24b78:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   24b7a:	4802      	ldr	r0, [pc, #8]	; (24b84 <z_impl_k_poll_signal_raise+0x88>)
   24b7c:	f7fd fee4 	bl	22948 <z_reschedule>
}
   24b80:	4620      	mov	r0, r4
   24b82:	bd70      	pop	{r4, r5, r6, pc}
   24b84:	20004658 	.word	0x20004658
   24b88:	0002fba8 	.word	0x0002fba8
   24b8c:	0002fa94 	.word	0x0002fa94

00024b90 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   24b90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   24b92:	4607      	mov	r7, r0
   24b94:	460c      	mov	r4, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   24b96:	f008 fbd0 	bl	2d33a <k_is_in_isr>
   24b9a:	b110      	cbz	r0, 24ba2 <z_thread_aligned_alloc+0x12>
	}

	if (heap) {
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   24b9c:	2000      	movs	r0, #0
	}

	return ret;
}
   24b9e:	b003      	add	sp, #12
   24ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		heap = _current->resource_pool;
   24ba2:	4b0f      	ldr	r3, [pc, #60]	; (24be0 <z_thread_aligned_alloc+0x50>)
   24ba4:	689b      	ldr	r3, [r3, #8]
   24ba6:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
	if (heap) {
   24baa:	2e00      	cmp	r6, #0
   24bac:	d0f6      	beq.n	24b9c <z_thread_aligned_alloc+0xc>
	size_t excess = MAX(sizeof(struct k_heap *), align);
   24bae:	2f04      	cmp	r7, #4
   24bb0:	463d      	mov	r5, r7
   24bb2:	bf38      	it	cc
   24bb4:	2504      	movcc	r5, #4
	return c < a;
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a + b;
   24bb6:	1962      	adds	r2, r4, r5
   24bb8:	d2f0      	bcs.n	24b9c <z_thread_aligned_alloc+0xc>
	mem = k_heap_aligned_alloc(heap, align, size, K_NO_WAIT);
   24bba:	2000      	movs	r0, #0
   24bbc:	2100      	movs	r1, #0
   24bbe:	e9cd 0100 	strd	r0, r1, [sp]
   24bc2:	4639      	mov	r1, r7
   24bc4:	4630      	mov	r0, r6
   24bc6:	f7fd f9b3 	bl	21f30 <k_heap_aligned_alloc>
	if (mem == NULL) {
   24bca:	4604      	mov	r4, r0
   24bcc:	2800      	cmp	r0, #0
   24bce:	d0e5      	beq.n	24b9c <z_thread_aligned_alloc+0xc>
__ssp_bos_icheck3(memset, void *, int)
   24bd0:	462a      	mov	r2, r5
   24bd2:	21ff      	movs	r1, #255	; 0xff
   24bd4:	f008 fd11 	bl	2d5fa <memset>
	*heap_ref = heap;
   24bd8:	6026      	str	r6, [r4, #0]
	return mem + excess;
   24bda:	1960      	adds	r0, r4, r5
	return ret;
   24bdc:	e7df      	b.n	24b9e <z_thread_aligned_alloc+0xe>
   24bde:	bf00      	nop
   24be0:	20004604 	.word	0x20004604

00024be4 <nrf_cc3xx_platform_init>:
   24be4:	b510      	push	{r4, lr}
   24be6:	4c0c      	ldr	r4, [pc, #48]	; (24c18 <nrf_cc3xx_platform_init+0x34>)
   24be8:	6823      	ldr	r3, [r4, #0]
   24bea:	b113      	cbz	r3, 24bf2 <nrf_cc3xx_platform_init+0xe>
   24bec:	4b0b      	ldr	r3, [pc, #44]	; (24c1c <nrf_cc3xx_platform_init+0x38>)
   24bee:	681b      	ldr	r3, [r3, #0]
   24bf0:	b92b      	cbnz	r3, 24bfe <nrf_cc3xx_platform_init+0x1a>
   24bf2:	f000 f943 	bl	24e7c <CC_LibInit>
   24bf6:	b930      	cbnz	r0, 24c06 <nrf_cc3xx_platform_init+0x22>
   24bf8:	4b08      	ldr	r3, [pc, #32]	; (24c1c <nrf_cc3xx_platform_init+0x38>)
   24bfa:	2201      	movs	r2, #1
   24bfc:	601a      	str	r2, [r3, #0]
   24bfe:	2301      	movs	r3, #1
   24c00:	6023      	str	r3, [r4, #0]
   24c02:	2000      	movs	r0, #0
   24c04:	bd10      	pop	{r4, pc}
   24c06:	3801      	subs	r0, #1
   24c08:	2806      	cmp	r0, #6
   24c0a:	d901      	bls.n	24c10 <nrf_cc3xx_platform_init+0x2c>
   24c0c:	4804      	ldr	r0, [pc, #16]	; (24c20 <nrf_cc3xx_platform_init+0x3c>)
   24c0e:	bd10      	pop	{r4, pc}
   24c10:	4b04      	ldr	r3, [pc, #16]	; (24c24 <nrf_cc3xx_platform_init+0x40>)
   24c12:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   24c16:	bd10      	pop	{r4, pc}
   24c18:	2000465c 	.word	0x2000465c
   24c1c:	20004660 	.word	0x20004660
   24c20:	ffff8ffe 	.word	0xffff8ffe
   24c24:	0002f560 	.word	0x0002f560

00024c28 <nrf_cc3xx_platform_abort>:
   24c28:	f3bf 8f4f 	dsb	sy
   24c2c:	4905      	ldr	r1, [pc, #20]	; (24c44 <nrf_cc3xx_platform_abort+0x1c>)
   24c2e:	4b06      	ldr	r3, [pc, #24]	; (24c48 <nrf_cc3xx_platform_abort+0x20>)
   24c30:	68ca      	ldr	r2, [r1, #12]
   24c32:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   24c36:	4313      	orrs	r3, r2
   24c38:	60cb      	str	r3, [r1, #12]
   24c3a:	f3bf 8f4f 	dsb	sy
   24c3e:	bf00      	nop
   24c40:	e7fd      	b.n	24c3e <nrf_cc3xx_platform_abort+0x16>
   24c42:	bf00      	nop
   24c44:	e000ed00 	.word	0xe000ed00
   24c48:	05fa0004 	.word	0x05fa0004

00024c4c <CC_PalAbort>:
   24c4c:	b4f0      	push	{r4, r5, r6, r7}
   24c4e:	4f09      	ldr	r7, [pc, #36]	; (24c74 <CC_PalAbort+0x28>)
   24c50:	4e09      	ldr	r6, [pc, #36]	; (24c78 <CC_PalAbort+0x2c>)
   24c52:	4c0a      	ldr	r4, [pc, #40]	; (24c7c <CC_PalAbort+0x30>)
   24c54:	4a0a      	ldr	r2, [pc, #40]	; (24c80 <CC_PalAbort+0x34>)
   24c56:	4d0b      	ldr	r5, [pc, #44]	; (24c84 <CC_PalAbort+0x38>)
   24c58:	490b      	ldr	r1, [pc, #44]	; (24c88 <CC_PalAbort+0x3c>)
   24c5a:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
   24c5e:	603b      	str	r3, [r7, #0]
   24c60:	6852      	ldr	r2, [r2, #4]
   24c62:	6033      	str	r3, [r6, #0]
   24c64:	6023      	str	r3, [r4, #0]
   24c66:	2400      	movs	r4, #0
   24c68:	602b      	str	r3, [r5, #0]
   24c6a:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
   24c6e:	bcf0      	pop	{r4, r5, r6, r7}
   24c70:	4710      	bx	r2
   24c72:	bf00      	nop
   24c74:	5002b400 	.word	0x5002b400
   24c78:	5002b404 	.word	0x5002b404
   24c7c:	5002b408 	.word	0x5002b408
   24c80:	20000e4c 	.word	0x20000e4c
   24c84:	5002b40c 	.word	0x5002b40c
   24c88:	5002a000 	.word	0x5002a000

00024c8c <nrf_cc3xx_platform_set_abort>:
   24c8c:	e9d0 1200 	ldrd	r1, r2, [r0]
   24c90:	4b01      	ldr	r3, [pc, #4]	; (24c98 <nrf_cc3xx_platform_set_abort+0xc>)
   24c92:	e9c3 1200 	strd	r1, r2, [r3]
   24c96:	4770      	bx	lr
   24c98:	20000e4c 	.word	0x20000e4c

00024c9c <nrf_cc3xx_platform_entropy_get>:
   24c9c:	2990      	cmp	r1, #144	; 0x90
   24c9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24ca2:	460c      	mov	r4, r1
   24ca4:	4607      	mov	r7, r0
   24ca6:	4616      	mov	r6, r2
   24ca8:	d917      	bls.n	24cda <nrf_cc3xx_platform_entropy_get+0x3e>
   24caa:	2500      	movs	r5, #0
   24cac:	e003      	b.n	24cb6 <nrf_cc3xx_platform_entropy_get+0x1a>
   24cae:	6831      	ldr	r1, [r6, #0]
   24cb0:	1a64      	subs	r4, r4, r1
   24cb2:	440d      	add	r5, r1
   24cb4:	d00e      	beq.n	24cd4 <nrf_cc3xx_platform_entropy_get+0x38>
   24cb6:	2c90      	cmp	r4, #144	; 0x90
   24cb8:	4622      	mov	r2, r4
   24cba:	4633      	mov	r3, r6
   24cbc:	bf28      	it	cs
   24cbe:	2290      	movcs	r2, #144	; 0x90
   24cc0:	1979      	adds	r1, r7, r5
   24cc2:	2000      	movs	r0, #0
   24cc4:	f000 fd26 	bl	25714 <mbedtls_hardware_poll>
   24cc8:	2800      	cmp	r0, #0
   24cca:	d0f0      	beq.n	24cae <nrf_cc3xx_platform_entropy_get+0x12>
   24ccc:	2300      	movs	r3, #0
   24cce:	6033      	str	r3, [r6, #0]
   24cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24cd4:	6035      	str	r5, [r6, #0]
   24cd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24cda:	4613      	mov	r3, r2
   24cdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   24ce0:	460a      	mov	r2, r1
   24ce2:	4601      	mov	r1, r0
   24ce4:	2000      	movs	r0, #0
   24ce6:	f000 bd15 	b.w	25714 <mbedtls_hardware_poll>
   24cea:	bf00      	nop

00024cec <mutex_unlock>:
   24cec:	b148      	cbz	r0, 24d02 <mutex_unlock+0x16>
   24cee:	6843      	ldr	r3, [r0, #4]
   24cf0:	b12b      	cbz	r3, 24cfe <mutex_unlock+0x12>
   24cf2:	f3bf 8f5f 	dmb	sy
   24cf6:	2300      	movs	r3, #0
   24cf8:	6003      	str	r3, [r0, #0]
   24cfa:	4618      	mov	r0, r3
   24cfc:	4770      	bx	lr
   24cfe:	4802      	ldr	r0, [pc, #8]	; (24d08 <mutex_unlock+0x1c>)
   24d00:	4770      	bx	lr
   24d02:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   24d06:	4770      	bx	lr
   24d08:	ffff8fea 	.word	0xffff8fea

00024d0c <mutex_free>:
   24d0c:	b510      	push	{r4, lr}
   24d0e:	4604      	mov	r4, r0
   24d10:	b128      	cbz	r0, 24d1e <mutex_free+0x12>
   24d12:	6863      	ldr	r3, [r4, #4]
   24d14:	b113      	cbz	r3, 24d1c <mutex_free+0x10>
   24d16:	2300      	movs	r3, #0
   24d18:	6023      	str	r3, [r4, #0]
   24d1a:	6063      	str	r3, [r4, #4]
   24d1c:	bd10      	pop	{r4, pc}
   24d1e:	4b02      	ldr	r3, [pc, #8]	; (24d28 <mutex_free+0x1c>)
   24d20:	4802      	ldr	r0, [pc, #8]	; (24d2c <mutex_free+0x20>)
   24d22:	685b      	ldr	r3, [r3, #4]
   24d24:	4798      	blx	r3
   24d26:	e7f4      	b.n	24d12 <mutex_free+0x6>
   24d28:	20000e4c 	.word	0x20000e4c
   24d2c:	0002f57c 	.word	0x0002f57c

00024d30 <mutex_init>:
   24d30:	b510      	push	{r4, lr}
   24d32:	4604      	mov	r4, r0
   24d34:	b130      	cbz	r0, 24d44 <mutex_init+0x14>
   24d36:	6863      	ldr	r3, [r4, #4]
   24d38:	2200      	movs	r2, #0
   24d3a:	f043 0301 	orr.w	r3, r3, #1
   24d3e:	6063      	str	r3, [r4, #4]
   24d40:	6022      	str	r2, [r4, #0]
   24d42:	bd10      	pop	{r4, pc}
   24d44:	4801      	ldr	r0, [pc, #4]	; (24d4c <mutex_init+0x1c>)
   24d46:	f7ff ff81 	bl	24c4c <CC_PalAbort>
   24d4a:	e7f4      	b.n	24d36 <mutex_init+0x6>
   24d4c:	0002f5a4 	.word	0x0002f5a4

00024d50 <mutex_lock>:
   24d50:	b1a0      	cbz	r0, 24d7c <mutex_lock+0x2c>
   24d52:	6843      	ldr	r3, [r0, #4]
   24d54:	b183      	cbz	r3, 24d78 <mutex_lock+0x28>
   24d56:	2201      	movs	r2, #1
   24d58:	f3bf 8f5b 	dmb	ish
   24d5c:	e850 3f00 	ldrex	r3, [r0]
   24d60:	e840 2100 	strex	r1, r2, [r0]
   24d64:	2900      	cmp	r1, #0
   24d66:	d1f9      	bne.n	24d5c <mutex_lock+0xc>
   24d68:	f3bf 8f5b 	dmb	ish
   24d6c:	2b01      	cmp	r3, #1
   24d6e:	d0f3      	beq.n	24d58 <mutex_lock+0x8>
   24d70:	f3bf 8f5f 	dmb	sy
   24d74:	2000      	movs	r0, #0
   24d76:	4770      	bx	lr
   24d78:	4802      	ldr	r0, [pc, #8]	; (24d84 <mutex_lock+0x34>)
   24d7a:	4770      	bx	lr
   24d7c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   24d80:	4770      	bx	lr
   24d82:	bf00      	nop
   24d84:	ffff8fea 	.word	0xffff8fea

00024d88 <nrf_cc3xx_platform_set_mutexes>:
   24d88:	b470      	push	{r4, r5, r6}
   24d8a:	e9d0 6500 	ldrd	r6, r5, [r0]
   24d8e:	e9d0 4202 	ldrd	r4, r2, [r0, #8]
   24d92:	4b09      	ldr	r3, [pc, #36]	; (24db8 <nrf_cc3xx_platform_set_mutexes+0x30>)
   24d94:	e9c3 4202 	strd	r4, r2, [r3, #8]
   24d98:	e9c3 6500 	strd	r6, r5, [r3]
   24d9c:	e9d1 4002 	ldrd	r4, r0, [r1, #8]
   24da0:	e9d1 6500 	ldrd	r6, r5, [r1]
   24da4:	4b05      	ldr	r3, [pc, #20]	; (24dbc <nrf_cc3xx_platform_set_mutexes+0x34>)
   24da6:	690a      	ldr	r2, [r1, #16]
   24da8:	611a      	str	r2, [r3, #16]
   24daa:	e9c3 6500 	strd	r6, r5, [r3]
   24dae:	e9c3 4002 	strd	r4, r0, [r3, #8]
   24db2:	bc70      	pop	{r4, r5, r6}
   24db4:	4770      	bx	lr
   24db6:	bf00      	nop
   24db8:	20000e5c 	.word	0x20000e5c
   24dbc:	20000e6c 	.word	0x20000e6c

00024dc0 <CC_LibInitRngModule>:
   24dc0:	b530      	push	{r4, r5, lr}
   24dc2:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
   24dc6:	f44f 7208 	mov.w	r2, #544	; 0x220
   24dca:	2100      	movs	r1, #0
   24dcc:	a80c      	add	r0, sp, #48	; 0x30
   24dce:	f008 fc14 	bl	2d5fa <memset>
   24dd2:	2100      	movs	r1, #0
   24dd4:	a802      	add	r0, sp, #8
   24dd6:	2228      	movs	r2, #40	; 0x28
   24dd8:	9101      	str	r1, [sp, #4]
   24dda:	f008 fc0e 	bl	2d5fa <memset>
   24dde:	a802      	add	r0, sp, #8
   24de0:	f000 fcee 	bl	257c0 <RNG_PLAT_SetUserRngParameters>
   24de4:	b120      	cbz	r0, 24df0 <CC_LibInitRngModule+0x30>
   24de6:	2405      	movs	r4, #5
   24de8:	4620      	mov	r0, r4
   24dea:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
   24dee:	bd30      	pop	{r4, r5, pc}
   24df0:	4d1d      	ldr	r5, [pc, #116]	; (24e68 <CC_LibInitRngModule+0xa8>)
   24df2:	f04f 31ff 	mov.w	r1, #4294967295
   24df6:	6828      	ldr	r0, [r5, #0]
   24df8:	f000 f918 	bl	2502c <CC_PalMutexLock>
   24dfc:	4604      	mov	r4, r0
   24dfe:	b9e8      	cbnz	r0, 24e3c <CC_LibInitRngModule+0x7c>
   24e00:	2000      	movs	r0, #0
   24e02:	f000 f943 	bl	2508c <CC_PalPowerSaveModeSelect>
   24e06:	bb58      	cbnz	r0, 24e60 <CC_LibInitRngModule+0xa0>
   24e08:	aa0c      	add	r2, sp, #48	; 0x30
   24e0a:	a902      	add	r1, sp, #8
   24e0c:	a801      	add	r0, sp, #4
   24e0e:	f000 fc73 	bl	256f8 <LLF_RND_RunTrngStartupTest>
   24e12:	4604      	mov	r4, r0
   24e14:	2001      	movs	r0, #1
   24e16:	f000 f939 	bl	2508c <CC_PalPowerSaveModeSelect>
   24e1a:	b9e8      	cbnz	r0, 24e58 <CC_LibInitRngModule+0x98>
   24e1c:	6828      	ldr	r0, [r5, #0]
   24e1e:	f000 f90d 	bl	2503c <CC_PalMutexUnlock>
   24e22:	b928      	cbnz	r0, 24e30 <CC_LibInitRngModule+0x70>
   24e24:	2c00      	cmp	r4, #0
   24e26:	d1de      	bne.n	24de6 <CC_LibInitRngModule+0x26>
   24e28:	4620      	mov	r0, r4
   24e2a:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
   24e2e:	bd30      	pop	{r4, r5, pc}
   24e30:	480e      	ldr	r0, [pc, #56]	; (24e6c <CC_LibInitRngModule+0xac>)
   24e32:	f7ff ff0b 	bl	24c4c <CC_PalAbort>
   24e36:	2c00      	cmp	r4, #0
   24e38:	d0f6      	beq.n	24e28 <CC_LibInitRngModule+0x68>
   24e3a:	e7d4      	b.n	24de6 <CC_LibInitRngModule+0x26>
   24e3c:	480c      	ldr	r0, [pc, #48]	; (24e70 <CC_LibInitRngModule+0xb0>)
   24e3e:	f7ff ff05 	bl	24c4c <CC_PalAbort>
   24e42:	2c01      	cmp	r4, #1
   24e44:	d1dc      	bne.n	24e00 <CC_LibInitRngModule+0x40>
   24e46:	6828      	ldr	r0, [r5, #0]
   24e48:	f000 f8f8 	bl	2503c <CC_PalMutexUnlock>
   24e4c:	2800      	cmp	r0, #0
   24e4e:	d0ca      	beq.n	24de6 <CC_LibInitRngModule+0x26>
   24e50:	4806      	ldr	r0, [pc, #24]	; (24e6c <CC_LibInitRngModule+0xac>)
   24e52:	f7ff fefb 	bl	24c4c <CC_PalAbort>
   24e56:	e7c6      	b.n	24de6 <CC_LibInitRngModule+0x26>
   24e58:	4806      	ldr	r0, [pc, #24]	; (24e74 <CC_LibInitRngModule+0xb4>)
   24e5a:	f7ff fef7 	bl	24c4c <CC_PalAbort>
   24e5e:	e7dd      	b.n	24e1c <CC_LibInitRngModule+0x5c>
   24e60:	4805      	ldr	r0, [pc, #20]	; (24e78 <CC_LibInitRngModule+0xb8>)
   24e62:	f7ff fef3 	bl	24c4c <CC_PalAbort>
   24e66:	e7cf      	b.n	24e08 <CC_LibInitRngModule+0x48>
   24e68:	20000ea8 	.word	0x20000ea8
   24e6c:	0002f5e0 	.word	0x0002f5e0
   24e70:	0002f5c8 	.word	0x0002f5c8
   24e74:	0002f618 	.word	0x0002f618
   24e78:	0002f5f8 	.word	0x0002f5f8

00024e7c <CC_LibInit>:
   24e7c:	b508      	push	{r3, lr}
   24e7e:	f000 f83d 	bl	24efc <CC_HalInit>
   24e82:	b118      	cbz	r0, 24e8c <CC_LibInit+0x10>
   24e84:	f000 f886 	bl	24f94 <CC_PalTerminate>
   24e88:	2003      	movs	r0, #3
   24e8a:	bd08      	pop	{r3, pc}
   24e8c:	f000 f854 	bl	24f38 <CC_PalInit>
   24e90:	b9c0      	cbnz	r0, 24ec4 <CC_LibInit+0x48>
   24e92:	f000 f8fb 	bl	2508c <CC_PalPowerSaveModeSelect>
   24e96:	b9b8      	cbnz	r0, 24ec8 <CC_LibInit+0x4c>
   24e98:	4b14      	ldr	r3, [pc, #80]	; (24eec <CC_LibInit+0x70>)
   24e9a:	681b      	ldr	r3, [r3, #0]
   24e9c:	0e1b      	lsrs	r3, r3, #24
   24e9e:	2bf0      	cmp	r3, #240	; 0xf0
   24ea0:	d10a      	bne.n	24eb8 <CC_LibInit+0x3c>
   24ea2:	4a13      	ldr	r2, [pc, #76]	; (24ef0 <CC_LibInit+0x74>)
   24ea4:	4b13      	ldr	r3, [pc, #76]	; (24ef4 <CC_LibInit+0x78>)
   24ea6:	6812      	ldr	r2, [r2, #0]
   24ea8:	429a      	cmp	r2, r3
   24eaa:	d017      	beq.n	24edc <CC_LibInit+0x60>
   24eac:	f000 f828 	bl	24f00 <CC_HalTerminate>
   24eb0:	f000 f870 	bl	24f94 <CC_PalTerminate>
   24eb4:	2007      	movs	r0, #7
   24eb6:	bd08      	pop	{r3, pc}
   24eb8:	f000 f822 	bl	24f00 <CC_HalTerminate>
   24ebc:	f000 f86a 	bl	24f94 <CC_PalTerminate>
   24ec0:	2006      	movs	r0, #6
   24ec2:	bd08      	pop	{r3, pc}
   24ec4:	2004      	movs	r0, #4
   24ec6:	bd08      	pop	{r3, pc}
   24ec8:	f000 f81a 	bl	24f00 <CC_HalTerminate>
   24ecc:	f000 f862 	bl	24f94 <CC_PalTerminate>
   24ed0:	f7ff ff76 	bl	24dc0 <CC_LibInitRngModule>
   24ed4:	2800      	cmp	r0, #0
   24ed6:	bf18      	it	ne
   24ed8:	2005      	movne	r0, #5
   24eda:	bd08      	pop	{r3, pc}
   24edc:	2001      	movs	r0, #1
   24ede:	f000 f8d5 	bl	2508c <CC_PalPowerSaveModeSelect>
   24ee2:	2800      	cmp	r0, #0
   24ee4:	d1f0      	bne.n	24ec8 <CC_LibInit+0x4c>
   24ee6:	4b04      	ldr	r3, [pc, #16]	; (24ef8 <CC_LibInit+0x7c>)
   24ee8:	6018      	str	r0, [r3, #0]
   24eea:	e7f1      	b.n	24ed0 <CC_LibInit+0x54>
   24eec:	5002b928 	.word	0x5002b928
   24ef0:	5002ba24 	.word	0x5002ba24
   24ef4:	20e00000 	.word	0x20e00000
   24ef8:	5002ba0c 	.word	0x5002ba0c

00024efc <CC_HalInit>:
   24efc:	2000      	movs	r0, #0
   24efe:	4770      	bx	lr

00024f00 <CC_HalTerminate>:
   24f00:	2000      	movs	r0, #0
   24f02:	4770      	bx	lr

00024f04 <CC_HalClearInterruptBit>:
   24f04:	0543      	lsls	r3, r0, #21
   24f06:	d503      	bpl.n	24f10 <CC_HalClearInterruptBit+0xc>
   24f08:	4b03      	ldr	r3, [pc, #12]	; (24f18 <CC_HalClearInterruptBit+0x14>)
   24f0a:	f04f 32ff 	mov.w	r2, #4294967295
   24f0e:	601a      	str	r2, [r3, #0]
   24f10:	4b02      	ldr	r3, [pc, #8]	; (24f1c <CC_HalClearInterruptBit+0x18>)
   24f12:	6018      	str	r0, [r3, #0]
   24f14:	4770      	bx	lr
   24f16:	bf00      	nop
   24f18:	5002b108 	.word	0x5002b108
   24f1c:	5002ba08 	.word	0x5002ba08

00024f20 <CC_HalMaskInterrupt>:
   24f20:	4b01      	ldr	r3, [pc, #4]	; (24f28 <CC_HalMaskInterrupt+0x8>)
   24f22:	6018      	str	r0, [r3, #0]
   24f24:	4770      	bx	lr
   24f26:	bf00      	nop
   24f28:	5002ba04 	.word	0x5002ba04

00024f2c <CC_HalWaitInterruptRND>:
   24f2c:	b108      	cbz	r0, 24f32 <CC_HalWaitInterruptRND+0x6>
   24f2e:	f000 b84f 	b.w	24fd0 <CC_PalWaitInterruptRND>
   24f32:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   24f36:	4770      	bx	lr

00024f38 <CC_PalInit>:
   24f38:	b510      	push	{r4, lr}
   24f3a:	4811      	ldr	r0, [pc, #68]	; (24f80 <CC_PalInit+0x48>)
   24f3c:	f000 f862 	bl	25004 <CC_PalMutexCreate>
   24f40:	b100      	cbz	r0, 24f44 <CC_PalInit+0xc>
   24f42:	bd10      	pop	{r4, pc}
   24f44:	480f      	ldr	r0, [pc, #60]	; (24f84 <CC_PalInit+0x4c>)
   24f46:	f000 f85d 	bl	25004 <CC_PalMutexCreate>
   24f4a:	2800      	cmp	r0, #0
   24f4c:	d1f9      	bne.n	24f42 <CC_PalInit+0xa>
   24f4e:	4c0e      	ldr	r4, [pc, #56]	; (24f88 <CC_PalInit+0x50>)
   24f50:	4620      	mov	r0, r4
   24f52:	f000 f857 	bl	25004 <CC_PalMutexCreate>
   24f56:	2800      	cmp	r0, #0
   24f58:	d1f3      	bne.n	24f42 <CC_PalInit+0xa>
   24f5a:	4b0c      	ldr	r3, [pc, #48]	; (24f8c <CC_PalInit+0x54>)
   24f5c:	480c      	ldr	r0, [pc, #48]	; (24f90 <CC_PalInit+0x58>)
   24f5e:	601c      	str	r4, [r3, #0]
   24f60:	f000 f850 	bl	25004 <CC_PalMutexCreate>
   24f64:	4601      	mov	r1, r0
   24f66:	2800      	cmp	r0, #0
   24f68:	d1eb      	bne.n	24f42 <CC_PalInit+0xa>
   24f6a:	f000 f82d 	bl	24fc8 <CC_PalDmaInit>
   24f6e:	4604      	mov	r4, r0
   24f70:	b108      	cbz	r0, 24f76 <CC_PalInit+0x3e>
   24f72:	4620      	mov	r0, r4
   24f74:	bd10      	pop	{r4, pc}
   24f76:	f000 f86b 	bl	25050 <CC_PalPowerSaveModeInit>
   24f7a:	4620      	mov	r0, r4
   24f7c:	e7fa      	b.n	24f74 <CC_PalInit+0x3c>
   24f7e:	bf00      	nop
   24f80:	20000ea4 	.word	0x20000ea4
   24f84:	20000e98 	.word	0x20000e98
   24f88:	20000ea0 	.word	0x20000ea0
   24f8c:	20000ea8 	.word	0x20000ea8
   24f90:	20000e9c 	.word	0x20000e9c

00024f94 <CC_PalTerminate>:
   24f94:	b508      	push	{r3, lr}
   24f96:	4808      	ldr	r0, [pc, #32]	; (24fb8 <CC_PalTerminate+0x24>)
   24f98:	f000 f83e 	bl	25018 <CC_PalMutexDestroy>
   24f9c:	4807      	ldr	r0, [pc, #28]	; (24fbc <CC_PalTerminate+0x28>)
   24f9e:	f000 f83b 	bl	25018 <CC_PalMutexDestroy>
   24fa2:	4807      	ldr	r0, [pc, #28]	; (24fc0 <CC_PalTerminate+0x2c>)
   24fa4:	f000 f838 	bl	25018 <CC_PalMutexDestroy>
   24fa8:	4806      	ldr	r0, [pc, #24]	; (24fc4 <CC_PalTerminate+0x30>)
   24faa:	f000 f835 	bl	25018 <CC_PalMutexDestroy>
   24fae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   24fb2:	f000 b80b 	b.w	24fcc <CC_PalDmaTerminate>
   24fb6:	bf00      	nop
   24fb8:	20000ea4 	.word	0x20000ea4
   24fbc:	20000e98 	.word	0x20000e98
   24fc0:	20000ea0 	.word	0x20000ea0
   24fc4:	20000e9c 	.word	0x20000e9c

00024fc8 <CC_PalDmaInit>:
   24fc8:	2000      	movs	r0, #0
   24fca:	4770      	bx	lr

00024fcc <CC_PalDmaTerminate>:
   24fcc:	4770      	bx	lr
   24fce:	bf00      	nop

00024fd0 <CC_PalWaitInterruptRND>:
   24fd0:	b410      	push	{r4}
   24fd2:	4c08      	ldr	r4, [pc, #32]	; (24ff4 <CC_PalWaitInterruptRND+0x24>)
   24fd4:	4602      	mov	r2, r0
   24fd6:	6823      	ldr	r3, [r4, #0]
   24fd8:	4213      	tst	r3, r2
   24fda:	d0fc      	beq.n	24fd6 <CC_PalWaitInterruptRND+0x6>
   24fdc:	b121      	cbz	r1, 24fe8 <CC_PalWaitInterruptRND+0x18>
   24fde:	4b06      	ldr	r3, [pc, #24]	; (24ff8 <CC_PalWaitInterruptRND+0x28>)
   24fe0:	4806      	ldr	r0, [pc, #24]	; (24ffc <CC_PalWaitInterruptRND+0x2c>)
   24fe2:	681b      	ldr	r3, [r3, #0]
   24fe4:	600b      	str	r3, [r1, #0]
   24fe6:	6003      	str	r3, [r0, #0]
   24fe8:	4b05      	ldr	r3, [pc, #20]	; (25000 <CC_PalWaitInterruptRND+0x30>)
   24fea:	601a      	str	r2, [r3, #0]
   24fec:	2000      	movs	r0, #0
   24fee:	bc10      	pop	{r4}
   24ff0:	4770      	bx	lr
   24ff2:	bf00      	nop
   24ff4:	5002ba00 	.word	0x5002ba00
   24ff8:	5002b104 	.word	0x5002b104
   24ffc:	5002b108 	.word	0x5002b108
   25000:	5002ba08 	.word	0x5002ba08

00025004 <CC_PalMutexCreate>:
   25004:	b508      	push	{r3, lr}
   25006:	4b03      	ldr	r3, [pc, #12]	; (25014 <CC_PalMutexCreate+0x10>)
   25008:	6802      	ldr	r2, [r0, #0]
   2500a:	681b      	ldr	r3, [r3, #0]
   2500c:	6810      	ldr	r0, [r2, #0]
   2500e:	4798      	blx	r3
   25010:	2000      	movs	r0, #0
   25012:	bd08      	pop	{r3, pc}
   25014:	20000e5c 	.word	0x20000e5c

00025018 <CC_PalMutexDestroy>:
   25018:	b508      	push	{r3, lr}
   2501a:	4b03      	ldr	r3, [pc, #12]	; (25028 <CC_PalMutexDestroy+0x10>)
   2501c:	6802      	ldr	r2, [r0, #0]
   2501e:	685b      	ldr	r3, [r3, #4]
   25020:	6810      	ldr	r0, [r2, #0]
   25022:	4798      	blx	r3
   25024:	2000      	movs	r0, #0
   25026:	bd08      	pop	{r3, pc}
   25028:	20000e5c 	.word	0x20000e5c

0002502c <CC_PalMutexLock>:
   2502c:	4b02      	ldr	r3, [pc, #8]	; (25038 <CC_PalMutexLock+0xc>)
   2502e:	6802      	ldr	r2, [r0, #0]
   25030:	689b      	ldr	r3, [r3, #8]
   25032:	6810      	ldr	r0, [r2, #0]
   25034:	4718      	bx	r3
   25036:	bf00      	nop
   25038:	20000e5c 	.word	0x20000e5c

0002503c <CC_PalMutexUnlock>:
   2503c:	b508      	push	{r3, lr}
   2503e:	4b03      	ldr	r3, [pc, #12]	; (2504c <CC_PalMutexUnlock+0x10>)
   25040:	6802      	ldr	r2, [r0, #0]
   25042:	68db      	ldr	r3, [r3, #12]
   25044:	6810      	ldr	r0, [r2, #0]
   25046:	4798      	blx	r3
   25048:	2000      	movs	r0, #0
   2504a:	bd08      	pop	{r3, pc}
   2504c:	20000e5c 	.word	0x20000e5c

00025050 <CC_PalPowerSaveModeInit>:
   25050:	b570      	push	{r4, r5, r6, lr}
   25052:	4c09      	ldr	r4, [pc, #36]	; (25078 <CC_PalPowerSaveModeInit+0x28>)
   25054:	4d09      	ldr	r5, [pc, #36]	; (2507c <CC_PalPowerSaveModeInit+0x2c>)
   25056:	6920      	ldr	r0, [r4, #16]
   25058:	68ab      	ldr	r3, [r5, #8]
   2505a:	4798      	blx	r3
   2505c:	b118      	cbz	r0, 25066 <CC_PalPowerSaveModeInit+0x16>
   2505e:	4b08      	ldr	r3, [pc, #32]	; (25080 <CC_PalPowerSaveModeInit+0x30>)
   25060:	4808      	ldr	r0, [pc, #32]	; (25084 <CC_PalPowerSaveModeInit+0x34>)
   25062:	685b      	ldr	r3, [r3, #4]
   25064:	4798      	blx	r3
   25066:	4a08      	ldr	r2, [pc, #32]	; (25088 <CC_PalPowerSaveModeInit+0x38>)
   25068:	68eb      	ldr	r3, [r5, #12]
   2506a:	6920      	ldr	r0, [r4, #16]
   2506c:	2100      	movs	r1, #0
   2506e:	6011      	str	r1, [r2, #0]
   25070:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   25074:	4718      	bx	r3
   25076:	bf00      	nop
   25078:	20000e6c 	.word	0x20000e6c
   2507c:	20000e5c 	.word	0x20000e5c
   25080:	20000e4c 	.word	0x20000e4c
   25084:	0002f638 	.word	0x0002f638
   25088:	20004674 	.word	0x20004674

0002508c <CC_PalPowerSaveModeSelect>:
   2508c:	b570      	push	{r4, r5, r6, lr}
   2508e:	4d1a      	ldr	r5, [pc, #104]	; (250f8 <CC_PalPowerSaveModeSelect+0x6c>)
   25090:	4e1a      	ldr	r6, [pc, #104]	; (250fc <CC_PalPowerSaveModeSelect+0x70>)
   25092:	4604      	mov	r4, r0
   25094:	68b2      	ldr	r2, [r6, #8]
   25096:	6928      	ldr	r0, [r5, #16]
   25098:	4790      	blx	r2
   2509a:	b9f0      	cbnz	r0, 250da <CC_PalPowerSaveModeSelect+0x4e>
   2509c:	b15c      	cbz	r4, 250b6 <CC_PalPowerSaveModeSelect+0x2a>
   2509e:	4c18      	ldr	r4, [pc, #96]	; (25100 <CC_PalPowerSaveModeSelect+0x74>)
   250a0:	6823      	ldr	r3, [r4, #0]
   250a2:	b1ab      	cbz	r3, 250d0 <CC_PalPowerSaveModeSelect+0x44>
   250a4:	2b01      	cmp	r3, #1
   250a6:	d01a      	beq.n	250de <CC_PalPowerSaveModeSelect+0x52>
   250a8:	3b01      	subs	r3, #1
   250aa:	6023      	str	r3, [r4, #0]
   250ac:	6928      	ldr	r0, [r5, #16]
   250ae:	68f3      	ldr	r3, [r6, #12]
   250b0:	4798      	blx	r3
   250b2:	2000      	movs	r0, #0
   250b4:	bd70      	pop	{r4, r5, r6, pc}
   250b6:	4c12      	ldr	r4, [pc, #72]	; (25100 <CC_PalPowerSaveModeSelect+0x74>)
   250b8:	6821      	ldr	r1, [r4, #0]
   250ba:	b939      	cbnz	r1, 250cc <CC_PalPowerSaveModeSelect+0x40>
   250bc:	4b11      	ldr	r3, [pc, #68]	; (25104 <CC_PalPowerSaveModeSelect+0x78>)
   250be:	4a12      	ldr	r2, [pc, #72]	; (25108 <CC_PalPowerSaveModeSelect+0x7c>)
   250c0:	2001      	movs	r0, #1
   250c2:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
   250c6:	6813      	ldr	r3, [r2, #0]
   250c8:	2b00      	cmp	r3, #0
   250ca:	d1fc      	bne.n	250c6 <CC_PalPowerSaveModeSelect+0x3a>
   250cc:	3101      	adds	r1, #1
   250ce:	6021      	str	r1, [r4, #0]
   250d0:	68f3      	ldr	r3, [r6, #12]
   250d2:	6928      	ldr	r0, [r5, #16]
   250d4:	4798      	blx	r3
   250d6:	2000      	movs	r0, #0
   250d8:	bd70      	pop	{r4, r5, r6, pc}
   250da:	480c      	ldr	r0, [pc, #48]	; (2510c <CC_PalPowerSaveModeSelect+0x80>)
   250dc:	bd70      	pop	{r4, r5, r6, pc}
   250de:	4a0a      	ldr	r2, [pc, #40]	; (25108 <CC_PalPowerSaveModeSelect+0x7c>)
   250e0:	6813      	ldr	r3, [r2, #0]
   250e2:	2b00      	cmp	r3, #0
   250e4:	d1fc      	bne.n	250e0 <CC_PalPowerSaveModeSelect+0x54>
   250e6:	4a07      	ldr	r2, [pc, #28]	; (25104 <CC_PalPowerSaveModeSelect+0x78>)
   250e8:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   250ec:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   250f0:	f7ff ff16 	bl	24f20 <CC_HalMaskInterrupt>
   250f4:	6823      	ldr	r3, [r4, #0]
   250f6:	e7d7      	b.n	250a8 <CC_PalPowerSaveModeSelect+0x1c>
   250f8:	20000e6c 	.word	0x20000e6c
   250fc:	20000e5c 	.word	0x20000e5c
   25100:	20004674 	.word	0x20004674
   25104:	5002a000 	.word	0x5002a000
   25108:	5002b910 	.word	0x5002b910
   2510c:	ffff8fe9 	.word	0xffff8fe9

00025110 <startTrngHW>:
   25110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25114:	2800      	cmp	r0, #0
   25116:	d076      	beq.n	25206 <startTrngHW+0xf6>
   25118:	460c      	mov	r4, r1
   2511a:	2900      	cmp	r1, #0
   2511c:	d073      	beq.n	25206 <startTrngHW+0xf6>
   2511e:	461d      	mov	r5, r3
   25120:	2b00      	cmp	r3, #0
   25122:	d070      	beq.n	25206 <startTrngHW+0xf6>
   25124:	4606      	mov	r6, r0
   25126:	b11a      	cbz	r2, 25130 <startTrngHW+0x20>
   25128:	2201      	movs	r2, #1
   2512a:	2300      	movs	r3, #0
   2512c:	602a      	str	r2, [r5, #0]
   2512e:	6003      	str	r3, [r0, #0]
   25130:	682b      	ldr	r3, [r5, #0]
   25132:	2b00      	cmp	r3, #0
   25134:	d063      	beq.n	251fe <startTrngHW+0xee>
   25136:	4629      	mov	r1, r5
   25138:	4620      	mov	r0, r4
   2513a:	f000 fc05 	bl	25948 <LLF_RND_GetFastestRosc>
   2513e:	4607      	mov	r7, r0
   25140:	2800      	cmp	r0, #0
   25142:	d15d      	bne.n	25200 <startTrngHW+0xf0>
   25144:	6828      	ldr	r0, [r5, #0]
   25146:	4621      	mov	r1, r4
   25148:	f000 fbe0 	bl	2590c <LLF_RND_GetRoscSampleCnt>
   2514c:	4607      	mov	r7, r0
   2514e:	2800      	cmp	r0, #0
   25150:	d156      	bne.n	25200 <startTrngHW+0xf0>
   25152:	682b      	ldr	r3, [r5, #0]
   25154:	2b08      	cmp	r3, #8
   25156:	d065      	beq.n	25224 <startTrngHW+0x114>
   25158:	2b04      	cmp	r3, #4
   2515a:	d066      	beq.n	2522a <startTrngHW+0x11a>
   2515c:	f1a3 0802 	sub.w	r8, r3, #2
   25160:	fab8 f888 	clz	r8, r8
   25164:	ea4f 1858 	mov.w	r8, r8, lsr #5
   25168:	4b31      	ldr	r3, [pc, #196]	; (25230 <startTrngHW+0x120>)
   2516a:	4932      	ldr	r1, [pc, #200]	; (25234 <startTrngHW+0x124>)
   2516c:	4a32      	ldr	r2, [pc, #200]	; (25238 <startTrngHW+0x128>)
   2516e:	2001      	movs	r0, #1
   25170:	6018      	str	r0, [r3, #0]
   25172:	469c      	mov	ip, r3
   25174:	6008      	str	r0, [r1, #0]
   25176:	f8cc 0000 	str.w	r0, [ip]
   2517a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2517c:	6013      	str	r3, [r2, #0]
   2517e:	6811      	ldr	r1, [r2, #0]
   25180:	428b      	cmp	r3, r1
   25182:	d1f8      	bne.n	25176 <startTrngHW+0x66>
   25184:	4b2d      	ldr	r3, [pc, #180]	; (2523c <startTrngHW+0x12c>)
   25186:	f04f 0900 	mov.w	r9, #0
   2518a:	f8c3 9000 	str.w	r9, [r3]
   2518e:	f04f 30ff 	mov.w	r0, #4294967295
   25192:	f7ff feb7 	bl	24f04 <CC_HalClearInterruptBit>
   25196:	4b2a      	ldr	r3, [pc, #168]	; (25240 <startTrngHW+0x130>)
   25198:	4a2a      	ldr	r2, [pc, #168]	; (25244 <startTrngHW+0x134>)
   2519a:	601a      	str	r2, [r3, #0]
   2519c:	4648      	mov	r0, r9
   2519e:	f7ff febf 	bl	24f20 <CC_HalMaskInterrupt>
   251a2:	4a29      	ldr	r2, [pc, #164]	; (25248 <startTrngHW+0x138>)
   251a4:	4b29      	ldr	r3, [pc, #164]	; (2524c <startTrngHW+0x13c>)
   251a6:	f8c2 8000 	str.w	r8, [r2]
   251aa:	6818      	ldr	r0, [r3, #0]
   251ac:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   251b0:	f7ff feb6 	bl	24f20 <CC_HalMaskInterrupt>
   251b4:	4b26      	ldr	r3, [pc, #152]	; (25250 <startTrngHW+0x140>)
   251b6:	220a      	movs	r2, #10
   251b8:	601a      	str	r2, [r3, #0]
   251ba:	9908      	ldr	r1, [sp, #32]
   251bc:	6923      	ldr	r3, [r4, #16]
   251be:	6a62      	ldr	r2, [r4, #36]	; 0x24
   251c0:	2901      	cmp	r1, #1
   251c2:	d024      	beq.n	2520e <startTrngHW+0xfe>
   251c4:	4923      	ldr	r1, [pc, #140]	; (25254 <startTrngHW+0x144>)
   251c6:	fba1 1303 	umull	r1, r3, r1, r3
   251ca:	091b      	lsrs	r3, r3, #4
   251cc:	fb03 f302 	mul.w	r3, r3, r2
   251d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   251d4:	4920      	ldr	r1, [pc, #128]	; (25258 <startTrngHW+0x148>)
   251d6:	4a19      	ldr	r2, [pc, #100]	; (2523c <startTrngHW+0x12c>)
   251d8:	03db      	lsls	r3, r3, #15
   251da:	099b      	lsrs	r3, r3, #6
   251dc:	600b      	str	r3, [r1, #0]
   251de:	2301      	movs	r3, #1
   251e0:	6013      	str	r3, [r2, #0]
   251e2:	6833      	ldr	r3, [r6, #0]
   251e4:	682a      	ldr	r2, [r5, #0]
   251e6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   251ea:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   251ee:	6033      	str	r3, [r6, #0]
   251f0:	682a      	ldr	r2, [r5, #0]
   251f2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   251f6:	6033      	str	r3, [r6, #0]
   251f8:	4638      	mov	r0, r7
   251fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   251fe:	4f17      	ldr	r7, [pc, #92]	; (2525c <startTrngHW+0x14c>)
   25200:	4638      	mov	r0, r7
   25202:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   25206:	4f16      	ldr	r7, [pc, #88]	; (25260 <startTrngHW+0x150>)
   25208:	4638      	mov	r0, r7
   2520a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2520e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   25212:	f8d3 1c0c 	ldr.w	r1, [r3, #3084]	; 0xc0c
   25216:	3101      	adds	r1, #1
   25218:	d002      	beq.n	25220 <startTrngHW+0x110>
   2521a:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
   2521e:	e7d1      	b.n	251c4 <startTrngHW+0xb4>
   25220:	2316      	movs	r3, #22
   25222:	e7d3      	b.n	251cc <startTrngHW+0xbc>
   25224:	f04f 0803 	mov.w	r8, #3
   25228:	e79e      	b.n	25168 <startTrngHW+0x58>
   2522a:	f04f 0802 	mov.w	r8, #2
   2522e:	e79b      	b.n	25168 <startTrngHW+0x58>
   25230:	5002b1c4 	.word	0x5002b1c4
   25234:	5002b140 	.word	0x5002b140
   25238:	5002b130 	.word	0x5002b130
   2523c:	5002b12c 	.word	0x5002b12c
   25240:	5002b100 	.word	0x5002b100
   25244:	0ffffffe 	.word	0x0ffffffe
   25248:	5002b10c 	.word	0x5002b10c
   2524c:	5002ba04 	.word	0x5002ba04
   25250:	5002b138 	.word	0x5002b138
   25254:	aaaaaaab 	.word	0xaaaaaaab
   25258:	5002b1d8 	.word	0x5002b1d8
   2525c:	00f10c31 	.word	0x00f10c31
   25260:	00f10c35 	.word	0x00f10c35

00025264 <LLF_RND_RepetitionCounterTest.part.0>:
   25264:	b4f0      	push	{r4, r5, r6, r7}
   25266:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
   2526a:	2400      	movs	r4, #0
   2526c:	f10c 3cff 	add.w	ip, ip, #4294967295
   25270:	4626      	mov	r6, r4
   25272:	4627      	mov	r7, r4
   25274:	e006      	b.n	25284 <LLF_RND_RepetitionCounterTest.part.0+0x20>
   25276:	429f      	cmp	r7, r3
   25278:	d016      	beq.n	252a8 <LLF_RND_RepetitionCounterTest.part.0+0x44>
   2527a:	2601      	movs	r6, #1
   2527c:	4565      	cmp	r5, ip
   2527e:	d819      	bhi.n	252b4 <LLF_RND_RepetitionCounterTest.part.0+0x50>
   25280:	462c      	mov	r4, r5
   25282:	461f      	mov	r7, r3
   25284:	0963      	lsrs	r3, r4, #5
   25286:	f004 011f 	and.w	r1, r4, #31
   2528a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   2528e:	291f      	cmp	r1, #31
   25290:	fa23 f301 	lsr.w	r3, r3, r1
   25294:	f104 0501 	add.w	r5, r4, #1
   25298:	bf18      	it	ne
   2529a:	f003 0301 	andne.w	r3, r3, #1
   2529e:	2c00      	cmp	r4, #0
   252a0:	d1e9      	bne.n	25276 <LLF_RND_RepetitionCounterTest.part.0+0x12>
   252a2:	2601      	movs	r6, #1
   252a4:	4635      	mov	r5, r6
   252a6:	e7eb      	b.n	25280 <LLF_RND_RepetitionCounterTest.part.0+0x1c>
   252a8:	3601      	adds	r6, #1
   252aa:	4296      	cmp	r6, r2
   252ac:	d1e6      	bne.n	2527c <LLF_RND_RepetitionCounterTest.part.0+0x18>
   252ae:	4803      	ldr	r0, [pc, #12]	; (252bc <LLF_RND_RepetitionCounterTest.part.0+0x58>)
   252b0:	bcf0      	pop	{r4, r5, r6, r7}
   252b2:	4770      	bx	lr
   252b4:	2000      	movs	r0, #0
   252b6:	bcf0      	pop	{r4, r5, r6, r7}
   252b8:	4770      	bx	lr
   252ba:	bf00      	nop
   252bc:	00f10c36 	.word	0x00f10c36

000252c0 <LLF_RND_AdaptiveProportionTest>:
   252c0:	2800      	cmp	r0, #0
   252c2:	d061      	beq.n	25388 <LLF_RND_AdaptiveProportionTest+0xc8>
   252c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   252c8:	1e4c      	subs	r4, r1, #1
   252ca:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   252ce:	d227      	bcs.n	25320 <LLF_RND_AdaptiveProportionTest+0x60>
   252d0:	b333      	cbz	r3, 25320 <LLF_RND_AdaptiveProportionTest+0x60>
   252d2:	b32a      	cbz	r2, 25320 <LLF_RND_AdaptiveProportionTest+0x60>
   252d4:	00cd      	lsls	r5, r1, #3
   252d6:	2b01      	cmp	r3, #1
   252d8:	f105 3eff 	add.w	lr, r5, #4294967295
   252dc:	d030      	beq.n	25340 <LLF_RND_AdaptiveProportionTest+0x80>
   252de:	2100      	movs	r1, #0
   252e0:	468c      	mov	ip, r1
   252e2:	460f      	mov	r7, r1
   252e4:	460e      	mov	r6, r1
   252e6:	f103 38ff 	add.w	r8, r3, #4294967295
   252ea:	094c      	lsrs	r4, r1, #5
   252ec:	f001 051f 	and.w	r5, r1, #31
   252f0:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
   252f4:	2d1f      	cmp	r5, #31
   252f6:	fa24 f405 	lsr.w	r4, r4, r5
   252fa:	bf18      	it	ne
   252fc:	f004 0401 	andne.w	r4, r4, #1
   25300:	b921      	cbnz	r1, 2530c <LLF_RND_AdaptiveProportionTest+0x4c>
   25302:	2601      	movs	r6, #1
   25304:	46b4      	mov	ip, r6
   25306:	4631      	mov	r1, r6
   25308:	4627      	mov	r7, r4
   2530a:	e7ee      	b.n	252ea <LLF_RND_AdaptiveProportionTest+0x2a>
   2530c:	42b3      	cmp	r3, r6
   2530e:	d013      	beq.n	25338 <LLF_RND_AdaptiveProportionTest+0x78>
   25310:	42a7      	cmp	r7, r4
   25312:	d101      	bne.n	25318 <LLF_RND_AdaptiveProportionTest+0x58>
   25314:	f10c 0c01 	add.w	ip, ip, #1
   25318:	4546      	cmp	r6, r8
   2531a:	d104      	bne.n	25326 <LLF_RND_AdaptiveProportionTest+0x66>
   2531c:	4562      	cmp	r2, ip
   2531e:	d202      	bcs.n	25326 <LLF_RND_AdaptiveProportionTest+0x66>
   25320:	481a      	ldr	r0, [pc, #104]	; (2538c <LLF_RND_AdaptiveProportionTest+0xcc>)
   25322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25326:	463c      	mov	r4, r7
   25328:	3101      	adds	r1, #1
   2532a:	458e      	cmp	lr, r1
   2532c:	f106 0601 	add.w	r6, r6, #1
   25330:	d2ea      	bcs.n	25308 <LLF_RND_AdaptiveProportionTest+0x48>
   25332:	2000      	movs	r0, #0
   25334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25338:	2600      	movs	r6, #0
   2533a:	f04f 0c01 	mov.w	ip, #1
   2533e:	e7f3      	b.n	25328 <LLF_RND_AdaptiveProportionTest+0x68>
   25340:	2600      	movs	r6, #0
   25342:	46b4      	mov	ip, r6
   25344:	4637      	mov	r7, r6
   25346:	4634      	mov	r4, r6
   25348:	0961      	lsrs	r1, r4, #5
   2534a:	f004 031f 	and.w	r3, r4, #31
   2534e:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   25352:	2b1f      	cmp	r3, #31
   25354:	fa21 f103 	lsr.w	r1, r1, r3
   25358:	bf18      	it	ne
   2535a:	f001 0101 	andne.w	r1, r1, #1
   2535e:	b13c      	cbz	r4, 25370 <LLF_RND_AdaptiveProportionTest+0xb0>
   25360:	b95f      	cbnz	r7, 2537a <LLF_RND_AdaptiveProportionTest+0xba>
   25362:	458c      	cmp	ip, r1
   25364:	d001      	beq.n	2536a <LLF_RND_AdaptiveProportionTest+0xaa>
   25366:	4661      	mov	r1, ip
   25368:	e008      	b.n	2537c <LLF_RND_AdaptiveProportionTest+0xbc>
   2536a:	3601      	adds	r6, #1
   2536c:	4661      	mov	r1, ip
   2536e:	e005      	b.n	2537c <LLF_RND_AdaptiveProportionTest+0xbc>
   25370:	2601      	movs	r6, #1
   25372:	4634      	mov	r4, r6
   25374:	468c      	mov	ip, r1
   25376:	2701      	movs	r7, #1
   25378:	e7e6      	b.n	25348 <LLF_RND_AdaptiveProportionTest+0x88>
   2537a:	463e      	mov	r6, r7
   2537c:	42b2      	cmp	r2, r6
   2537e:	d3cf      	bcc.n	25320 <LLF_RND_AdaptiveProportionTest+0x60>
   25380:	3401      	adds	r4, #1
   25382:	42ac      	cmp	r4, r5
   25384:	d1f6      	bne.n	25374 <LLF_RND_AdaptiveProportionTest+0xb4>
   25386:	e7d4      	b.n	25332 <LLF_RND_AdaptiveProportionTest+0x72>
   25388:	4800      	ldr	r0, [pc, #0]	; (2538c <LLF_RND_AdaptiveProportionTest+0xcc>)
   2538a:	4770      	bx	lr
   2538c:	00f10c37 	.word	0x00f10c37

00025390 <getTrngSource>:
   25390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25394:	b08d      	sub	sp, #52	; 0x34
   25396:	e9dd 6517 	ldrd	r6, r5, [sp, #92]	; 0x5c
   2539a:	4607      	mov	r7, r0
   2539c:	460c      	mov	r4, r1
   2539e:	2d00      	cmp	r5, #0
   253a0:	d14c      	bne.n	2543c <getTrngSource+0xac>
   253a2:	f8d1 a010 	ldr.w	sl, [r1, #16]
   253a6:	601e      	str	r6, [r3, #0]
   253a8:	9b16      	ldr	r3, [sp, #88]	; 0x58
   253aa:	2100      	movs	r1, #0
   253ac:	6019      	str	r1, [r3, #0]
   253ae:	2a00      	cmp	r2, #0
   253b0:	f000 811b 	beq.w	255ea <getTrngSource+0x25a>
   253b4:	4a99      	ldr	r2, [pc, #612]	; (2561c <getTrngSource+0x28c>)
   253b6:	4b9a      	ldr	r3, [pc, #616]	; (25620 <getTrngSource+0x290>)
   253b8:	6811      	ldr	r1, [r2, #0]
   253ba:	6a62      	ldr	r2, [r4, #36]	; 0x24
   253bc:	681b      	ldr	r3, [r3, #0]
   253be:	429a      	cmp	r2, r3
   253c0:	d147      	bne.n	25452 <getTrngSource+0xc2>
   253c2:	290a      	cmp	r1, #10
   253c4:	d145      	bne.n	25452 <getTrngSource+0xc2>
   253c6:	78fb      	ldrb	r3, [r7, #3]
   253c8:	9304      	str	r3, [sp, #16]
   253ca:	4b96      	ldr	r3, [pc, #600]	; (25624 <getTrngSource+0x294>)
   253cc:	fba3 230a 	umull	r2, r3, r3, sl
   253d0:	ea4f 0b93 	mov.w	fp, r3, lsr #2
   253d4:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
   253d8:	f106 0208 	add.w	r2, r6, #8
   253dc:	ebaa 0b43 	sub.w	fp, sl, r3, lsl #1
   253e0:	2304      	movs	r3, #4
   253e2:	9203      	str	r2, [sp, #12]
   253e4:	9302      	str	r3, [sp, #8]
   253e6:	46b8      	mov	r8, r7
   253e8:	9b16      	ldr	r3, [sp, #88]	; 0x58
   253ea:	f8c3 a000 	str.w	sl, [r3]
   253ee:	f1ba 0f00 	cmp.w	sl, #0
   253f2:	f000 80c0 	beq.w	25576 <getTrngSource+0x1e6>
   253f6:	9e03      	ldr	r6, [sp, #12]
   253f8:	4655      	mov	r5, sl
   253fa:	f04f 0900 	mov.w	r9, #0
   253fe:	f000 fab3 	bl	25968 <LLF_RND_TurnOffTrng>
   25402:	2300      	movs	r3, #0
   25404:	9305      	str	r3, [sp, #20]
   25406:	f1b8 0f00 	cmp.w	r8, #0
   2540a:	f000 80e2 	beq.w	255d2 <getTrngSource+0x242>
   2540e:	2c00      	cmp	r4, #0
   25410:	f000 80df 	beq.w	255d2 <getTrngSource+0x242>
   25414:	9b04      	ldr	r3, [sp, #16]
   25416:	2b00      	cmp	r3, #0
   25418:	f000 80d9 	beq.w	255ce <getTrngSource+0x23e>
   2541c:	a904      	add	r1, sp, #16
   2541e:	4620      	mov	r0, r4
   25420:	f000 fa92 	bl	25948 <LLF_RND_GetFastestRosc>
   25424:	b1b8      	cbz	r0, 25456 <getTrngSource+0xc6>
   25426:	4b80      	ldr	r3, [pc, #512]	; (25628 <getTrngSource+0x298>)
   25428:	4298      	cmp	r0, r3
   2542a:	f040 80a4 	bne.w	25576 <getTrngSource+0x1e6>
   2542e:	9002      	str	r0, [sp, #8]
   25430:	f000 fa9a 	bl	25968 <LLF_RND_TurnOffTrng>
   25434:	9802      	ldr	r0, [sp, #8]
   25436:	b00d      	add	sp, #52	; 0x34
   25438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2543c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   25440:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
   25444:	3001      	adds	r0, #1
   25446:	bf14      	ite	ne
   25448:	f8d1 ac0c 	ldrne.w	sl, [r1, #3084]	; 0xc0c
   2544c:	f44f 7a04 	moveq.w	sl, #528	; 0x210
   25450:	e7a9      	b.n	253a6 <getTrngSource+0x16>
   25452:	4876      	ldr	r0, [pc, #472]	; (2562c <getTrngSource+0x29c>)
   25454:	e7eb      	b.n	2542e <getTrngSource+0x9e>
   25456:	9804      	ldr	r0, [sp, #16]
   25458:	4621      	mov	r1, r4
   2545a:	f000 fa57 	bl	2590c <LLF_RND_GetRoscSampleCnt>
   2545e:	2800      	cmp	r0, #0
   25460:	d1e1      	bne.n	25426 <getTrngSource+0x96>
   25462:	9f04      	ldr	r7, [sp, #16]
   25464:	2f08      	cmp	r7, #8
   25466:	f000 80b6 	beq.w	255d6 <getTrngSource+0x246>
   2546a:	2f04      	cmp	r7, #4
   2546c:	f000 80b5 	beq.w	255da <getTrngSource+0x24a>
   25470:	f1a7 0702 	sub.w	r7, r7, #2
   25474:	fab7 f787 	clz	r7, r7
   25478:	097f      	lsrs	r7, r7, #5
   2547a:	496d      	ldr	r1, [pc, #436]	; (25630 <getTrngSource+0x2a0>)
   2547c:	2301      	movs	r3, #1
   2547e:	600b      	str	r3, [r1, #0]
   25480:	f841 3c84 	str.w	r3, [r1, #-132]
   25484:	4619      	mov	r1, r3
   25486:	4b6a      	ldr	r3, [pc, #424]	; (25630 <getTrngSource+0x2a0>)
   25488:	4865      	ldr	r0, [pc, #404]	; (25620 <getTrngSource+0x290>)
   2548a:	6019      	str	r1, [r3, #0]
   2548c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2548e:	6003      	str	r3, [r0, #0]
   25490:	6800      	ldr	r0, [r0, #0]
   25492:	4283      	cmp	r3, r0
   25494:	d1f7      	bne.n	25486 <getTrngSource+0xf6>
   25496:	4a67      	ldr	r2, [pc, #412]	; (25634 <getTrngSource+0x2a4>)
   25498:	2300      	movs	r3, #0
   2549a:	6013      	str	r3, [r2, #0]
   2549c:	f04f 30ff 	mov.w	r0, #4294967295
   254a0:	f7ff fd30 	bl	24f04 <CC_HalClearInterruptBit>
   254a4:	4864      	ldr	r0, [pc, #400]	; (25638 <getTrngSource+0x2a8>)
   254a6:	4965      	ldr	r1, [pc, #404]	; (2563c <getTrngSource+0x2ac>)
   254a8:	6001      	str	r1, [r0, #0]
   254aa:	2300      	movs	r3, #0
   254ac:	4618      	mov	r0, r3
   254ae:	f7ff fd37 	bl	24f20 <CC_HalMaskInterrupt>
   254b2:	4963      	ldr	r1, [pc, #396]	; (25640 <getTrngSource+0x2b0>)
   254b4:	4b63      	ldr	r3, [pc, #396]	; (25644 <getTrngSource+0x2b4>)
   254b6:	600f      	str	r7, [r1, #0]
   254b8:	6818      	ldr	r0, [r3, #0]
   254ba:	4f5a      	ldr	r7, [pc, #360]	; (25624 <getTrngSource+0x294>)
   254bc:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   254c0:	f7ff fd2e 	bl	24f20 <CC_HalMaskInterrupt>
   254c4:	4b55      	ldr	r3, [pc, #340]	; (2561c <getTrngSource+0x28c>)
   254c6:	4860      	ldr	r0, [pc, #384]	; (25648 <getTrngSource+0x2b8>)
   254c8:	210a      	movs	r1, #10
   254ca:	6019      	str	r1, [r3, #0]
   254cc:	6921      	ldr	r1, [r4, #16]
   254ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
   254d0:	fba7 c101 	umull	ip, r1, r7, r1
   254d4:	0909      	lsrs	r1, r1, #4
   254d6:	fb03 f301 	mul.w	r3, r3, r1
   254da:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   254de:	03db      	lsls	r3, r3, #15
   254e0:	099b      	lsrs	r3, r3, #6
   254e2:	6003      	str	r3, [r0, #0]
   254e4:	4b53      	ldr	r3, [pc, #332]	; (25634 <getTrngSource+0x2a4>)
   254e6:	2201      	movs	r2, #1
   254e8:	601a      	str	r2, [r3, #0]
   254ea:	9904      	ldr	r1, [sp, #16]
   254ec:	f8d8 2000 	ldr.w	r2, [r8]
   254f0:	020b      	lsls	r3, r1, #8
   254f2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   254f6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   254fa:	4313      	orrs	r3, r2
   254fc:	f8c8 3000 	str.w	r3, [r8]
   25500:	a805      	add	r0, sp, #20
   25502:	f000 f9f3 	bl	258ec <LLF_RND_WaitRngInterrupt>
   25506:	2800      	cmp	r0, #0
   25508:	d18d      	bne.n	25426 <getTrngSource+0x96>
   2550a:	4a50      	ldr	r2, [pc, #320]	; (2564c <getTrngSource+0x2bc>)
   2550c:	4b50      	ldr	r3, [pc, #320]	; (25650 <getTrngSource+0x2c0>)
   2550e:	6812      	ldr	r2, [r2, #0]
   25510:	9206      	str	r2, [sp, #24]
   25512:	681a      	ldr	r2, [r3, #0]
   25514:	9207      	str	r2, [sp, #28]
   25516:	685a      	ldr	r2, [r3, #4]
   25518:	9208      	str	r2, [sp, #32]
   2551a:	689a      	ldr	r2, [r3, #8]
   2551c:	9209      	str	r2, [sp, #36]	; 0x24
   2551e:	68da      	ldr	r2, [r3, #12]
   25520:	920a      	str	r2, [sp, #40]	; 0x28
   25522:	3310      	adds	r3, #16
   25524:	fba7 2705 	umull	r2, r7, r7, r5
   25528:	681b      	ldr	r3, [r3, #0]
   2552a:	930b      	str	r3, [sp, #44]	; 0x2c
   2552c:	ebb9 0f97 	cmp.w	r9, r7, lsr #2
   25530:	d102      	bne.n	25538 <getTrngSource+0x1a8>
   25532:	f1bb 0f00 	cmp.w	fp, #0
   25536:	d141      	bne.n	255bc <getTrngSource+0x22c>
   25538:	2218      	movs	r2, #24
   2553a:	4630      	mov	r0, r6
   2553c:	eb0d 0102 	add.w	r1, sp, r2
   25540:	f000 f97a 	bl	25838 <CC_PalMemCopyPlat>
   25544:	3d18      	subs	r5, #24
   25546:	3618      	adds	r6, #24
   25548:	f109 0901 	add.w	r9, r9, #1
   2554c:	2d00      	cmp	r5, #0
   2554e:	f47f af56 	bne.w	253fe <getTrngSource+0x6e>
   25552:	f5ba 7f04 	cmp.w	sl, #528	; 0x210
   25556:	d85d      	bhi.n	25614 <getTrngSource+0x284>
   25558:	9d03      	ldr	r5, [sp, #12]
   2555a:	6962      	ldr	r2, [r4, #20]
   2555c:	4651      	mov	r1, sl
   2555e:	4628      	mov	r0, r5
   25560:	f7ff fe80 	bl	25264 <LLF_RND_RepetitionCounterTest.part.0>
   25564:	2800      	cmp	r0, #0
   25566:	d04b      	beq.n	25600 <getTrngSource+0x270>
   25568:	9a16      	ldr	r2, [sp, #88]	; 0x58
   2556a:	2300      	movs	r3, #0
   2556c:	6013      	str	r3, [r2, #0]
   2556e:	4b2e      	ldr	r3, [pc, #184]	; (25628 <getTrngSource+0x298>)
   25570:	4298      	cmp	r0, r3
   25572:	f43f af5c 	beq.w	2542e <getTrngSource+0x9e>
   25576:	9d04      	ldr	r5, [sp, #16]
   25578:	2d08      	cmp	r5, #8
   2557a:	d034      	beq.n	255e6 <getTrngSource+0x256>
   2557c:	2200      	movs	r2, #0
   2557e:	ab04      	add	r3, sp, #16
   25580:	006d      	lsls	r5, r5, #1
   25582:	9200      	str	r2, [sp, #0]
   25584:	4621      	mov	r1, r4
   25586:	4640      	mov	r0, r8
   25588:	9504      	str	r5, [sp, #16]
   2558a:	f7ff fdc1 	bl	25110 <startTrngHW>
   2558e:	4b31      	ldr	r3, [pc, #196]	; (25654 <getTrngSource+0x2c4>)
   25590:	4298      	cmp	r0, r3
   25592:	d024      	beq.n	255de <getTrngSource+0x24e>
   25594:	2800      	cmp	r0, #0
   25596:	f47f af4a 	bne.w	2542e <getTrngSource+0x9e>
   2559a:	f8d8 2000 	ldr.w	r2, [r8]
   2559e:	0a13      	lsrs	r3, r2, #8
   255a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   255a4:	4313      	orrs	r3, r2
   255a6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   255aa:	f8c8 3000 	str.w	r3, [r8]
   255ae:	9b02      	ldr	r3, [sp, #8]
   255b0:	3b01      	subs	r3, #1
   255b2:	9302      	str	r3, [sp, #8]
   255b4:	f47f af18 	bne.w	253e8 <getTrngSource+0x58>
   255b8:	2000      	movs	r0, #0
   255ba:	e738      	b.n	2542e <getTrngSource+0x9e>
   255bc:	4630      	mov	r0, r6
   255be:	465a      	mov	r2, fp
   255c0:	a906      	add	r1, sp, #24
   255c2:	f000 f939 	bl	25838 <CC_PalMemCopyPlat>
   255c6:	eba5 050b 	sub.w	r5, r5, fp
   255ca:	445e      	add	r6, fp
   255cc:	e7bc      	b.n	25548 <getTrngSource+0x1b8>
   255ce:	4821      	ldr	r0, [pc, #132]	; (25654 <getTrngSource+0x2c4>)
   255d0:	e729      	b.n	25426 <getTrngSource+0x96>
   255d2:	4821      	ldr	r0, [pc, #132]	; (25658 <getTrngSource+0x2c8>)
   255d4:	e727      	b.n	25426 <getTrngSource+0x96>
   255d6:	2703      	movs	r7, #3
   255d8:	e74f      	b.n	2547a <getTrngSource+0xea>
   255da:	2702      	movs	r7, #2
   255dc:	e74d      	b.n	2547a <getTrngSource+0xea>
   255de:	6a23      	ldr	r3, [r4, #32]
   255e0:	2b00      	cmp	r3, #0
   255e2:	f43f af24 	beq.w	2542e <getTrngSource+0x9e>
   255e6:	481d      	ldr	r0, [pc, #116]	; (2565c <getTrngSource+0x2cc>)
   255e8:	e721      	b.n	2542e <getTrngSource+0x9e>
   255ea:	9500      	str	r5, [sp, #0]
   255ec:	ab04      	add	r3, sp, #16
   255ee:	2201      	movs	r2, #1
   255f0:	4621      	mov	r1, r4
   255f2:	4638      	mov	r0, r7
   255f4:	f7ff fd8c 	bl	25110 <startTrngHW>
   255f8:	2800      	cmp	r0, #0
   255fa:	f43f aee6 	beq.w	253ca <getTrngSource+0x3a>
   255fe:	e716      	b.n	2542e <getTrngSource+0x9e>
   25600:	69a2      	ldr	r2, [r4, #24]
   25602:	f44f 6380 	mov.w	r3, #1024	; 0x400
   25606:	4651      	mov	r1, sl
   25608:	4628      	mov	r0, r5
   2560a:	f7ff fe59 	bl	252c0 <LLF_RND_AdaptiveProportionTest>
   2560e:	2800      	cmp	r0, #0
   25610:	d1aa      	bne.n	25568 <getTrngSource+0x1d8>
   25612:	e7d1      	b.n	255b8 <getTrngSource+0x228>
   25614:	9b16      	ldr	r3, [sp, #88]	; 0x58
   25616:	601d      	str	r5, [r3, #0]
   25618:	e7ad      	b.n	25576 <getTrngSource+0x1e6>
   2561a:	bf00      	nop
   2561c:	5002b138 	.word	0x5002b138
   25620:	5002b130 	.word	0x5002b130
   25624:	aaaaaaab 	.word	0xaaaaaaab
   25628:	00f10c02 	.word	0x00f10c02
   2562c:	00f10c30 	.word	0x00f10c30
   25630:	5002b1c4 	.word	0x5002b1c4
   25634:	5002b12c 	.word	0x5002b12c
   25638:	5002b100 	.word	0x5002b100
   2563c:	0ffffffe 	.word	0x0ffffffe
   25640:	5002b10c 	.word	0x5002b10c
   25644:	5002ba04 	.word	0x5002ba04
   25648:	5002b1d8 	.word	0x5002b1d8
   2564c:	5002b114 	.word	0x5002b114
   25650:	5002b118 	.word	0x5002b118
   25654:	00f10c31 	.word	0x00f10c31
   25658:	00f10c35 	.word	0x00f10c35
   2565c:	00f10c32 	.word	0x00f10c32

00025660 <LLF_RND_GetTrngSource>:
   25660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25664:	4e1f      	ldr	r6, [pc, #124]	; (256e4 <LLF_RND_GetTrngSource+0x84>)
   25666:	b084      	sub	sp, #16
   25668:	4604      	mov	r4, r0
   2566a:	460d      	mov	r5, r1
   2566c:	6830      	ldr	r0, [r6, #0]
   2566e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   25670:	f04f 31ff 	mov.w	r1, #4294967295
   25674:	4690      	mov	r8, r2
   25676:	f7ff fcd9 	bl	2502c <CC_PalMutexLock>
   2567a:	b9d8      	cbnz	r0, 256b4 <LLF_RND_GetTrngSource+0x54>
   2567c:	2000      	movs	r0, #0
   2567e:	f7ff fd05 	bl	2508c <CC_PalPowerSaveModeSelect>
   25682:	b9f8      	cbnz	r0, 256c4 <LLF_RND_GetTrngSource+0x64>
   25684:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   25686:	9200      	str	r2, [sp, #0]
   25688:	2300      	movs	r3, #0
   2568a:	4620      	mov	r0, r4
   2568c:	9302      	str	r3, [sp, #8]
   2568e:	9701      	str	r7, [sp, #4]
   25690:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   25692:	4642      	mov	r2, r8
   25694:	4629      	mov	r1, r5
   25696:	f7ff fe7b 	bl	25390 <getTrngSource>
   2569a:	4604      	mov	r4, r0
   2569c:	2001      	movs	r0, #1
   2569e:	f7ff fcf5 	bl	2508c <CC_PalPowerSaveModeSelect>
   256a2:	b9d0      	cbnz	r0, 256da <LLF_RND_GetTrngSource+0x7a>
   256a4:	6830      	ldr	r0, [r6, #0]
   256a6:	f7ff fcc9 	bl	2503c <CC_PalMutexUnlock>
   256aa:	b978      	cbnz	r0, 256cc <LLF_RND_GetTrngSource+0x6c>
   256ac:	4620      	mov	r0, r4
   256ae:	b004      	add	sp, #16
   256b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   256b4:	480c      	ldr	r0, [pc, #48]	; (256e8 <LLF_RND_GetTrngSource+0x88>)
   256b6:	f7ff fac9 	bl	24c4c <CC_PalAbort>
   256ba:	2000      	movs	r0, #0
   256bc:	f7ff fce6 	bl	2508c <CC_PalPowerSaveModeSelect>
   256c0:	2800      	cmp	r0, #0
   256c2:	d0df      	beq.n	25684 <LLF_RND_GetTrngSource+0x24>
   256c4:	4809      	ldr	r0, [pc, #36]	; (256ec <LLF_RND_GetTrngSource+0x8c>)
   256c6:	f7ff fac1 	bl	24c4c <CC_PalAbort>
   256ca:	e7db      	b.n	25684 <LLF_RND_GetTrngSource+0x24>
   256cc:	4808      	ldr	r0, [pc, #32]	; (256f0 <LLF_RND_GetTrngSource+0x90>)
   256ce:	f7ff fabd 	bl	24c4c <CC_PalAbort>
   256d2:	4620      	mov	r0, r4
   256d4:	b004      	add	sp, #16
   256d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   256da:	4806      	ldr	r0, [pc, #24]	; (256f4 <LLF_RND_GetTrngSource+0x94>)
   256dc:	f7ff fab6 	bl	24c4c <CC_PalAbort>
   256e0:	e7e0      	b.n	256a4 <LLF_RND_GetTrngSource+0x44>
   256e2:	bf00      	nop
   256e4:	20000ea8 	.word	0x20000ea8
   256e8:	0002f5c8 	.word	0x0002f5c8
   256ec:	0002f5f8 	.word	0x0002f5f8
   256f0:	0002f5e0 	.word	0x0002f5e0
   256f4:	0002f618 	.word	0x0002f618

000256f8 <LLF_RND_RunTrngStartupTest>:
   256f8:	b510      	push	{r4, lr}
   256fa:	b086      	sub	sp, #24
   256fc:	ab05      	add	r3, sp, #20
   256fe:	2401      	movs	r4, #1
   25700:	e9cd 2401 	strd	r2, r4, [sp, #4]
   25704:	9300      	str	r3, [sp, #0]
   25706:	2200      	movs	r2, #0
   25708:	ab04      	add	r3, sp, #16
   2570a:	f7ff fe41 	bl	25390 <getTrngSource>
   2570e:	b006      	add	sp, #24
   25710:	bd10      	pop	{r4, pc}
   25712:	bf00      	nop

00025714 <mbedtls_hardware_poll>:
   25714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25718:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
   2571c:	460f      	mov	r7, r1
   2571e:	9205      	str	r2, [sp, #20]
   25720:	2100      	movs	r1, #0
   25722:	4614      	mov	r4, r2
   25724:	a812      	add	r0, sp, #72	; 0x48
   25726:	f44f 7208 	mov.w	r2, #544	; 0x220
   2572a:	461e      	mov	r6, r3
   2572c:	f007 ff65 	bl	2d5fa <memset>
   25730:	2100      	movs	r1, #0
   25732:	a808      	add	r0, sp, #32
   25734:	2228      	movs	r2, #40	; 0x28
   25736:	9106      	str	r1, [sp, #24]
   25738:	f007 ff5f 	bl	2d5fa <memset>
   2573c:	2f00      	cmp	r7, #0
   2573e:	d03c      	beq.n	257ba <mbedtls_hardware_poll+0xa6>
   25740:	2e00      	cmp	r6, #0
   25742:	d03a      	beq.n	257ba <mbedtls_hardware_poll+0xa6>
   25744:	2c00      	cmp	r4, #0
   25746:	d038      	beq.n	257ba <mbedtls_hardware_poll+0xa6>
   25748:	2104      	movs	r1, #4
   2574a:	a806      	add	r0, sp, #24
   2574c:	f000 f876 	bl	2583c <CC_PalMemSetZeroPlat>
   25750:	a808      	add	r0, sp, #32
   25752:	2128      	movs	r1, #40	; 0x28
   25754:	f000 f872 	bl	2583c <CC_PalMemSetZeroPlat>
   25758:	a808      	add	r0, sp, #32
   2575a:	f000 f831 	bl	257c0 <RNG_PLAT_SetUserRngParameters>
   2575e:	b178      	cbz	r0, 25780 <mbedtls_hardware_poll+0x6c>
   25760:	f04f 35ff 	mov.w	r5, #4294967295
   25764:	a812      	add	r0, sp, #72	; 0x48
   25766:	f44f 7108 	mov.w	r1, #544	; 0x220
   2576a:	f000 f90b 	bl	25984 <mbedtls_platform_zeroize>
   2576e:	a806      	add	r0, sp, #24
   25770:	2104      	movs	r1, #4
   25772:	f000 f907 	bl	25984 <mbedtls_platform_zeroize>
   25776:	4628      	mov	r0, r5
   25778:	f50d 7d1a 	add.w	sp, sp, #616	; 0x268
   2577c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25780:	ab12      	add	r3, sp, #72	; 0x48
   25782:	f10d 081c 	add.w	r8, sp, #28
   25786:	e9cd 6301 	strd	r6, r3, [sp, #4]
   2578a:	9003      	str	r0, [sp, #12]
   2578c:	4602      	mov	r2, r0
   2578e:	ab05      	add	r3, sp, #20
   25790:	a908      	add	r1, sp, #32
   25792:	f8cd 8000 	str.w	r8, [sp]
   25796:	a806      	add	r0, sp, #24
   25798:	f7ff ff62 	bl	25660 <LLF_RND_GetTrngSource>
   2579c:	4605      	mov	r5, r0
   2579e:	2800      	cmp	r0, #0
   257a0:	d1de      	bne.n	25760 <mbedtls_hardware_poll+0x4c>
   257a2:	6833      	ldr	r3, [r6, #0]
   257a4:	42a3      	cmp	r3, r4
   257a6:	d3db      	bcc.n	25760 <mbedtls_hardware_poll+0x4c>
   257a8:	f8d8 1000 	ldr.w	r1, [r8]
   257ac:	4638      	mov	r0, r7
   257ae:	3108      	adds	r1, #8
   257b0:	4622      	mov	r2, r4
   257b2:	f000 f841 	bl	25838 <CC_PalMemCopyPlat>
   257b6:	6034      	str	r4, [r6, #0]
   257b8:	e7d4      	b.n	25764 <mbedtls_hardware_poll+0x50>
   257ba:	f04f 35ff 	mov.w	r5, #4294967295
   257be:	e7da      	b.n	25776 <mbedtls_hardware_poll+0x62>

000257c0 <RNG_PLAT_SetUserRngParameters>:
   257c0:	b530      	push	{r4, r5, lr}
   257c2:	b083      	sub	sp, #12
   257c4:	231c      	movs	r3, #28
   257c6:	a901      	add	r1, sp, #4
   257c8:	4604      	mov	r4, r0
   257ca:	9301      	str	r3, [sp, #4]
   257cc:	f000 f83a 	bl	25844 <CC_PalTrngParamGet>
   257d0:	4605      	mov	r5, r0
   257d2:	b938      	cbnz	r0, 257e4 <RNG_PLAT_SetUserRngParameters+0x24>
   257d4:	9b01      	ldr	r3, [sp, #4]
   257d6:	2b1c      	cmp	r3, #28
   257d8:	d007      	beq.n	257ea <RNG_PLAT_SetUserRngParameters+0x2a>
   257da:	4d15      	ldr	r5, [pc, #84]	; (25830 <RNG_PLAT_SetUserRngParameters+0x70>)
   257dc:	4620      	mov	r0, r4
   257de:	211c      	movs	r1, #28
   257e0:	f000 f82c 	bl	2583c <CC_PalMemSetZeroPlat>
   257e4:	4628      	mov	r0, r5
   257e6:	b003      	add	sp, #12
   257e8:	bd30      	pop	{r4, r5, pc}
   257ea:	e9d4 3200 	ldrd	r3, r2, [r4]
   257ee:	2101      	movs	r1, #1
   257f0:	3b00      	subs	r3, #0
   257f2:	bf18      	it	ne
   257f4:	2301      	movne	r3, #1
   257f6:	61e1      	str	r1, [r4, #28]
   257f8:	b10a      	cbz	r2, 257fe <RNG_PLAT_SetUserRngParameters+0x3e>
   257fa:	f043 0302 	orr.w	r3, r3, #2
   257fe:	68a2      	ldr	r2, [r4, #8]
   25800:	b932      	cbnz	r2, 25810 <RNG_PLAT_SetUserRngParameters+0x50>
   25802:	68e2      	ldr	r2, [r4, #12]
   25804:	b942      	cbnz	r2, 25818 <RNG_PLAT_SetUserRngParameters+0x58>
   25806:	e9c4 3208 	strd	r3, r2, [r4, #32]
   2580a:	b97b      	cbnz	r3, 2582c <RNG_PLAT_SetUserRngParameters+0x6c>
   2580c:	4d09      	ldr	r5, [pc, #36]	; (25834 <RNG_PLAT_SetUserRngParameters+0x74>)
   2580e:	e7e5      	b.n	257dc <RNG_PLAT_SetUserRngParameters+0x1c>
   25810:	68e2      	ldr	r2, [r4, #12]
   25812:	f043 0304 	orr.w	r3, r3, #4
   25816:	b13a      	cbz	r2, 25828 <RNG_PLAT_SetUserRngParameters+0x68>
   25818:	f043 0308 	orr.w	r3, r3, #8
   2581c:	2200      	movs	r2, #0
   2581e:	4628      	mov	r0, r5
   25820:	e9c4 3208 	strd	r3, r2, [r4, #32]
   25824:	b003      	add	sp, #12
   25826:	bd30      	pop	{r4, r5, pc}
   25828:	e9c4 3208 	strd	r3, r2, [r4, #32]
   2582c:	4615      	mov	r5, r2
   2582e:	e7d9      	b.n	257e4 <RNG_PLAT_SetUserRngParameters+0x24>
   25830:	00f00c37 	.word	0x00f00c37
   25834:	00f00c0e 	.word	0x00f00c0e

00025838 <CC_PalMemCopyPlat>:
   25838:	f007 bec5 	b.w	2d5c6 <memmove>

0002583c <CC_PalMemSetZeroPlat>:
   2583c:	460a      	mov	r2, r1
   2583e:	2100      	movs	r1, #0
   25840:	f007 bedb 	b.w	2d5fa <memset>

00025844 <CC_PalTrngParamGet>:
   25844:	b118      	cbz	r0, 2584e <CC_PalTrngParamGet+0xa>
   25846:	b111      	cbz	r1, 2584e <CC_PalTrngParamGet+0xa>
   25848:	680b      	ldr	r3, [r1, #0]
   2584a:	2b1c      	cmp	r3, #28
   2584c:	d001      	beq.n	25852 <CC_PalTrngParamGet+0xe>
   2584e:	2001      	movs	r0, #1
   25850:	4770      	bx	lr
   25852:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   25856:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   2585a:	3201      	adds	r2, #1
   2585c:	bf14      	ite	ne
   2585e:	f8d3 2c10 	ldrne.w	r2, [r3, #3088]	; 0xc10
   25862:	f241 225c 	movweq	r2, #4700	; 0x125c
   25866:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2586a:	6002      	str	r2, [r0, #0]
   2586c:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   25870:	3201      	adds	r2, #1
   25872:	bf14      	ite	ne
   25874:	f8d3 2c14 	ldrne.w	r2, [r3, #3092]	; 0xc14
   25878:	f641 1264 	movweq	r2, #6500	; 0x1964
   2587c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   25880:	6042      	str	r2, [r0, #4]
   25882:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   25886:	3201      	adds	r2, #1
   25888:	bf14      	ite	ne
   2588a:	f8d3 2c18 	ldrne.w	r2, [r3, #3096]	; 0xc18
   2588e:	f640 62d8 	movweq	r2, #3800	; 0xed8
   25892:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   25896:	6082      	str	r2, [r0, #8]
   25898:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   2589c:	3201      	adds	r2, #1
   2589e:	bf14      	ite	ne
   258a0:	f8d3 2c1c 	ldrne.w	r2, [r3, #3100]	; 0xc1c
   258a4:	f241 3288 	movweq	r2, #5000	; 0x1388
   258a8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   258ac:	60c2      	str	r2, [r0, #12]
   258ae:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   258b2:	3201      	adds	r2, #1
   258b4:	bf14      	ite	ne
   258b6:	f8d3 2c00 	ldrne.w	r2, [r3, #3072]	; 0xc00
   258ba:	2290      	moveq	r2, #144	; 0x90
   258bc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   258c0:	6102      	str	r2, [r0, #16]
   258c2:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   258c6:	3201      	adds	r2, #1
   258c8:	bf14      	ite	ne
   258ca:	f8d3 2c04 	ldrne.w	r2, [r3, #3076]	; 0xc04
   258ce:	2251      	moveq	r2, #81	; 0x51
   258d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   258d4:	6142      	str	r2, [r0, #20]
   258d6:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   258da:	3201      	adds	r2, #1
   258dc:	bf14      	ite	ne
   258de:	f8d3 3c08 	ldrne.w	r3, [r3, #3080]	; 0xc08
   258e2:	f240 3337 	movweq	r3, #823	; 0x337
   258e6:	6183      	str	r3, [r0, #24]
   258e8:	2000      	movs	r0, #0
   258ea:	4770      	bx	lr

000258ec <LLF_RND_WaitRngInterrupt>:
   258ec:	b508      	push	{r3, lr}
   258ee:	4601      	mov	r1, r0
   258f0:	f44f 6080 	mov.w	r0, #1024	; 0x400
   258f4:	f7ff fb1a 	bl	24f2c <CC_HalWaitInterruptRND>
   258f8:	4902      	ldr	r1, [pc, #8]	; (25904 <LLF_RND_WaitRngInterrupt+0x18>)
   258fa:	4a03      	ldr	r2, [pc, #12]	; (25908 <LLF_RND_WaitRngInterrupt+0x1c>)
   258fc:	2300      	movs	r3, #0
   258fe:	600b      	str	r3, [r1, #0]
   25900:	6013      	str	r3, [r2, #0]
   25902:	bd08      	pop	{r3, pc}
   25904:	5002b1c8 	.word	0x5002b1c8
   25908:	5002b12c 	.word	0x5002b12c

0002590c <LLF_RND_GetRoscSampleCnt>:
   2590c:	3801      	subs	r0, #1
   2590e:	2807      	cmp	r0, #7
   25910:	d805      	bhi.n	2591e <LLF_RND_GetRoscSampleCnt+0x12>
   25912:	e8df f000 	tbb	[pc, r0]
   25916:	0e0a      	.short	0x0e0a
   25918:	04041204 	.word	0x04041204
   2591c:	0604      	.short	0x0604
   2591e:	4809      	ldr	r0, [pc, #36]	; (25944 <LLF_RND_GetRoscSampleCnt+0x38>)
   25920:	4770      	bx	lr
   25922:	68cb      	ldr	r3, [r1, #12]
   25924:	624b      	str	r3, [r1, #36]	; 0x24
   25926:	2000      	movs	r0, #0
   25928:	4770      	bx	lr
   2592a:	680b      	ldr	r3, [r1, #0]
   2592c:	624b      	str	r3, [r1, #36]	; 0x24
   2592e:	2000      	movs	r0, #0
   25930:	4770      	bx	lr
   25932:	684b      	ldr	r3, [r1, #4]
   25934:	624b      	str	r3, [r1, #36]	; 0x24
   25936:	2000      	movs	r0, #0
   25938:	4770      	bx	lr
   2593a:	688b      	ldr	r3, [r1, #8]
   2593c:	624b      	str	r3, [r1, #36]	; 0x24
   2593e:	2000      	movs	r0, #0
   25940:	4770      	bx	lr
   25942:	bf00      	nop
   25944:	00f10c31 	.word	0x00f10c31

00025948 <LLF_RND_GetFastestRosc>:
   25948:	680b      	ldr	r3, [r1, #0]
   2594a:	e002      	b.n	25952 <LLF_RND_GetFastestRosc+0xa>
   2594c:	2b08      	cmp	r3, #8
   2594e:	600b      	str	r3, [r1, #0]
   25950:	d806      	bhi.n	25960 <LLF_RND_GetFastestRosc+0x18>
   25952:	6a02      	ldr	r2, [r0, #32]
   25954:	4213      	tst	r3, r2
   25956:	ea4f 0343 	mov.w	r3, r3, lsl #1
   2595a:	d0f7      	beq.n	2594c <LLF_RND_GetFastestRosc+0x4>
   2595c:	2000      	movs	r0, #0
   2595e:	4770      	bx	lr
   25960:	4800      	ldr	r0, [pc, #0]	; (25964 <LLF_RND_GetFastestRosc+0x1c>)
   25962:	4770      	bx	lr
   25964:	00f10c31 	.word	0x00f10c31

00025968 <LLF_RND_TurnOffTrng>:
   25968:	4904      	ldr	r1, [pc, #16]	; (2597c <LLF_RND_TurnOffTrng+0x14>)
   2596a:	4a05      	ldr	r2, [pc, #20]	; (25980 <LLF_RND_TurnOffTrng+0x18>)
   2596c:	2300      	movs	r3, #0
   2596e:	600b      	str	r3, [r1, #0]
   25970:	f44f 6080 	mov.w	r0, #1024	; 0x400
   25974:	6013      	str	r3, [r2, #0]
   25976:	f7ff bac5 	b.w	24f04 <CC_HalClearInterruptBit>
   2597a:	bf00      	nop
   2597c:	5002b12c 	.word	0x5002b12c
   25980:	5002b1c4 	.word	0x5002b1c4

00025984 <mbedtls_platform_zeroize>:
   25984:	b138      	cbz	r0, 25996 <mbedtls_platform_zeroize+0x12>
   25986:	b131      	cbz	r1, 25996 <mbedtls_platform_zeroize+0x12>
   25988:	4401      	add	r1, r0
   2598a:	2200      	movs	r2, #0
   2598c:	4603      	mov	r3, r0
   2598e:	3001      	adds	r0, #1
   25990:	4281      	cmp	r1, r0
   25992:	701a      	strb	r2, [r3, #0]
   25994:	d1fa      	bne.n	2598c <mbedtls_platform_zeroize+0x8>
   25996:	4770      	bx	lr

00025998 <malloc>:
   25998:	4b02      	ldr	r3, [pc, #8]	; (259a4 <malloc+0xc>)
   2599a:	4601      	mov	r1, r0
   2599c:	6818      	ldr	r0, [r3, #0]
   2599e:	f000 b851 	b.w	25a44 <_malloc_r>
   259a2:	bf00      	nop
   259a4:	20000eac 	.word	0x20000eac

000259a8 <_free_r>:
   259a8:	b538      	push	{r3, r4, r5, lr}
   259aa:	4605      	mov	r5, r0
   259ac:	2900      	cmp	r1, #0
   259ae:	d045      	beq.n	25a3c <_free_r+0x94>
   259b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
   259b4:	1f0c      	subs	r4, r1, #4
   259b6:	2b00      	cmp	r3, #0
   259b8:	bfb8      	it	lt
   259ba:	18e4      	addlt	r4, r4, r3
   259bc:	f000 fd3a 	bl	26434 <__malloc_lock>
   259c0:	4a1f      	ldr	r2, [pc, #124]	; (25a40 <_free_r+0x98>)
   259c2:	6813      	ldr	r3, [r2, #0]
   259c4:	4610      	mov	r0, r2
   259c6:	b933      	cbnz	r3, 259d6 <_free_r+0x2e>
   259c8:	6063      	str	r3, [r4, #4]
   259ca:	6014      	str	r4, [r2, #0]
   259cc:	4628      	mov	r0, r5
   259ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   259d2:	f000 bd35 	b.w	26440 <__malloc_unlock>
   259d6:	42a3      	cmp	r3, r4
   259d8:	d90c      	bls.n	259f4 <_free_r+0x4c>
   259da:	6821      	ldr	r1, [r4, #0]
   259dc:	1862      	adds	r2, r4, r1
   259de:	4293      	cmp	r3, r2
   259e0:	bf04      	itt	eq
   259e2:	681a      	ldreq	r2, [r3, #0]
   259e4:	685b      	ldreq	r3, [r3, #4]
   259e6:	6063      	str	r3, [r4, #4]
   259e8:	bf04      	itt	eq
   259ea:	1852      	addeq	r2, r2, r1
   259ec:	6022      	streq	r2, [r4, #0]
   259ee:	6004      	str	r4, [r0, #0]
   259f0:	e7ec      	b.n	259cc <_free_r+0x24>
   259f2:	4613      	mov	r3, r2
   259f4:	685a      	ldr	r2, [r3, #4]
   259f6:	b10a      	cbz	r2, 259fc <_free_r+0x54>
   259f8:	42a2      	cmp	r2, r4
   259fa:	d9fa      	bls.n	259f2 <_free_r+0x4a>
   259fc:	6819      	ldr	r1, [r3, #0]
   259fe:	1858      	adds	r0, r3, r1
   25a00:	42a0      	cmp	r0, r4
   25a02:	d10b      	bne.n	25a1c <_free_r+0x74>
   25a04:	6820      	ldr	r0, [r4, #0]
   25a06:	4401      	add	r1, r0
   25a08:	1858      	adds	r0, r3, r1
   25a0a:	4282      	cmp	r2, r0
   25a0c:	6019      	str	r1, [r3, #0]
   25a0e:	d1dd      	bne.n	259cc <_free_r+0x24>
   25a10:	6810      	ldr	r0, [r2, #0]
   25a12:	6852      	ldr	r2, [r2, #4]
   25a14:	605a      	str	r2, [r3, #4]
   25a16:	4401      	add	r1, r0
   25a18:	6019      	str	r1, [r3, #0]
   25a1a:	e7d7      	b.n	259cc <_free_r+0x24>
   25a1c:	d902      	bls.n	25a24 <_free_r+0x7c>
   25a1e:	230c      	movs	r3, #12
   25a20:	602b      	str	r3, [r5, #0]
   25a22:	e7d3      	b.n	259cc <_free_r+0x24>
   25a24:	6820      	ldr	r0, [r4, #0]
   25a26:	1821      	adds	r1, r4, r0
   25a28:	428a      	cmp	r2, r1
   25a2a:	bf04      	itt	eq
   25a2c:	6811      	ldreq	r1, [r2, #0]
   25a2e:	6852      	ldreq	r2, [r2, #4]
   25a30:	6062      	str	r2, [r4, #4]
   25a32:	bf04      	itt	eq
   25a34:	1809      	addeq	r1, r1, r0
   25a36:	6021      	streq	r1, [r4, #0]
   25a38:	605c      	str	r4, [r3, #4]
   25a3a:	e7c7      	b.n	259cc <_free_r+0x24>
   25a3c:	bd38      	pop	{r3, r4, r5, pc}
   25a3e:	bf00      	nop
   25a40:	20004678 	.word	0x20004678

00025a44 <_malloc_r>:
   25a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25a46:	1ccd      	adds	r5, r1, #3
   25a48:	f025 0503 	bic.w	r5, r5, #3
   25a4c:	3508      	adds	r5, #8
   25a4e:	2d0c      	cmp	r5, #12
   25a50:	bf38      	it	cc
   25a52:	250c      	movcc	r5, #12
   25a54:	2d00      	cmp	r5, #0
   25a56:	4606      	mov	r6, r0
   25a58:	db01      	blt.n	25a5e <_malloc_r+0x1a>
   25a5a:	42a9      	cmp	r1, r5
   25a5c:	d903      	bls.n	25a66 <_malloc_r+0x22>
   25a5e:	230c      	movs	r3, #12
   25a60:	6033      	str	r3, [r6, #0]
   25a62:	2000      	movs	r0, #0
   25a64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   25a66:	f000 fce5 	bl	26434 <__malloc_lock>
   25a6a:	4921      	ldr	r1, [pc, #132]	; (25af0 <_malloc_r+0xac>)
   25a6c:	680a      	ldr	r2, [r1, #0]
   25a6e:	4614      	mov	r4, r2
   25a70:	b99c      	cbnz	r4, 25a9a <_malloc_r+0x56>
   25a72:	4f20      	ldr	r7, [pc, #128]	; (25af4 <_malloc_r+0xb0>)
   25a74:	683b      	ldr	r3, [r7, #0]
   25a76:	b923      	cbnz	r3, 25a82 <_malloc_r+0x3e>
   25a78:	4621      	mov	r1, r4
   25a7a:	4630      	mov	r0, r6
   25a7c:	f000 fb84 	bl	26188 <_sbrk_r>
   25a80:	6038      	str	r0, [r7, #0]
   25a82:	4629      	mov	r1, r5
   25a84:	4630      	mov	r0, r6
   25a86:	f000 fb7f 	bl	26188 <_sbrk_r>
   25a8a:	1c43      	adds	r3, r0, #1
   25a8c:	d123      	bne.n	25ad6 <_malloc_r+0x92>
   25a8e:	230c      	movs	r3, #12
   25a90:	6033      	str	r3, [r6, #0]
   25a92:	4630      	mov	r0, r6
   25a94:	f000 fcd4 	bl	26440 <__malloc_unlock>
   25a98:	e7e3      	b.n	25a62 <_malloc_r+0x1e>
   25a9a:	6823      	ldr	r3, [r4, #0]
   25a9c:	1b5b      	subs	r3, r3, r5
   25a9e:	d417      	bmi.n	25ad0 <_malloc_r+0x8c>
   25aa0:	2b0b      	cmp	r3, #11
   25aa2:	d903      	bls.n	25aac <_malloc_r+0x68>
   25aa4:	6023      	str	r3, [r4, #0]
   25aa6:	441c      	add	r4, r3
   25aa8:	6025      	str	r5, [r4, #0]
   25aaa:	e004      	b.n	25ab6 <_malloc_r+0x72>
   25aac:	6863      	ldr	r3, [r4, #4]
   25aae:	42a2      	cmp	r2, r4
   25ab0:	bf0c      	ite	eq
   25ab2:	600b      	streq	r3, [r1, #0]
   25ab4:	6053      	strne	r3, [r2, #4]
   25ab6:	4630      	mov	r0, r6
   25ab8:	f000 fcc2 	bl	26440 <__malloc_unlock>
   25abc:	f104 000b 	add.w	r0, r4, #11
   25ac0:	1d23      	adds	r3, r4, #4
   25ac2:	f020 0007 	bic.w	r0, r0, #7
   25ac6:	1ac2      	subs	r2, r0, r3
   25ac8:	d0cc      	beq.n	25a64 <_malloc_r+0x20>
   25aca:	1a1b      	subs	r3, r3, r0
   25acc:	50a3      	str	r3, [r4, r2]
   25ace:	e7c9      	b.n	25a64 <_malloc_r+0x20>
   25ad0:	4622      	mov	r2, r4
   25ad2:	6864      	ldr	r4, [r4, #4]
   25ad4:	e7cc      	b.n	25a70 <_malloc_r+0x2c>
   25ad6:	1cc4      	adds	r4, r0, #3
   25ad8:	f024 0403 	bic.w	r4, r4, #3
   25adc:	42a0      	cmp	r0, r4
   25ade:	d0e3      	beq.n	25aa8 <_malloc_r+0x64>
   25ae0:	1a21      	subs	r1, r4, r0
   25ae2:	4630      	mov	r0, r6
   25ae4:	f000 fb50 	bl	26188 <_sbrk_r>
   25ae8:	3001      	adds	r0, #1
   25aea:	d1dd      	bne.n	25aa8 <_malloc_r+0x64>
   25aec:	e7cf      	b.n	25a8e <_malloc_r+0x4a>
   25aee:	bf00      	nop
   25af0:	20004678 	.word	0x20004678
   25af4:	2000467c 	.word	0x2000467c

00025af8 <_printf_float>:
   25af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25afc:	b091      	sub	sp, #68	; 0x44
   25afe:	460c      	mov	r4, r1
   25b00:	9f1a      	ldr	r7, [sp, #104]	; 0x68
   25b02:	4693      	mov	fp, r2
   25b04:	461e      	mov	r6, r3
   25b06:	4605      	mov	r5, r0
   25b08:	f000 fc90 	bl	2642c <_localeconv_r>
   25b0c:	6803      	ldr	r3, [r0, #0]
   25b0e:	9309      	str	r3, [sp, #36]	; 0x24
   25b10:	4618      	mov	r0, r3
   25b12:	f7dc f9c9 	bl	1ea8 <strlen>
   25b16:	2300      	movs	r3, #0
   25b18:	930e      	str	r3, [sp, #56]	; 0x38
   25b1a:	683b      	ldr	r3, [r7, #0]
   25b1c:	900a      	str	r0, [sp, #40]	; 0x28
   25b1e:	3307      	adds	r3, #7
   25b20:	f023 0307 	bic.w	r3, r3, #7
   25b24:	f103 0208 	add.w	r2, r3, #8
   25b28:	f894 8018 	ldrb.w	r8, [r4, #24]
   25b2c:	f8d4 a000 	ldr.w	sl, [r4]
   25b30:	603a      	str	r2, [r7, #0]
   25b32:	e9d3 2300 	ldrd	r2, r3, [r3]
   25b36:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
   25b3a:	e9d4 9712 	ldrd	r9, r7, [r4, #72]	; 0x48
   25b3e:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
   25b42:	930b      	str	r3, [sp, #44]	; 0x2c
   25b44:	f04f 32ff 	mov.w	r2, #4294967295
   25b48:	4ba5      	ldr	r3, [pc, #660]	; (25de0 <_printf_float+0x2e8>)
   25b4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   25b4c:	4648      	mov	r0, r9
   25b4e:	f7dc f98b 	bl	1e68 <__aeabi_dcmpun>
   25b52:	bb68      	cbnz	r0, 25bb0 <_printf_float+0xb8>
   25b54:	f04f 32ff 	mov.w	r2, #4294967295
   25b58:	4ba1      	ldr	r3, [pc, #644]	; (25de0 <_printf_float+0x2e8>)
   25b5a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   25b5c:	4648      	mov	r0, r9
   25b5e:	f7dc f965 	bl	1e2c <__aeabi_dcmple>
   25b62:	bb28      	cbnz	r0, 25bb0 <_printf_float+0xb8>
   25b64:	2200      	movs	r2, #0
   25b66:	2300      	movs	r3, #0
   25b68:	4648      	mov	r0, r9
   25b6a:	4639      	mov	r1, r7
   25b6c:	f7dc f954 	bl	1e18 <__aeabi_dcmplt>
   25b70:	b110      	cbz	r0, 25b78 <_printf_float+0x80>
   25b72:	232d      	movs	r3, #45	; 0x2d
   25b74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   25b78:	4f9a      	ldr	r7, [pc, #616]	; (25de4 <_printf_float+0x2ec>)
   25b7a:	4b9b      	ldr	r3, [pc, #620]	; (25de8 <_printf_float+0x2f0>)
   25b7c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   25b80:	bf88      	it	hi
   25b82:	461f      	movhi	r7, r3
   25b84:	2303      	movs	r3, #3
   25b86:	6123      	str	r3, [r4, #16]
   25b88:	f02a 0304 	bic.w	r3, sl, #4
   25b8c:	6023      	str	r3, [r4, #0]
   25b8e:	f04f 0900 	mov.w	r9, #0
   25b92:	9600      	str	r6, [sp, #0]
   25b94:	465b      	mov	r3, fp
   25b96:	aa0f      	add	r2, sp, #60	; 0x3c
   25b98:	4621      	mov	r1, r4
   25b9a:	4628      	mov	r0, r5
   25b9c:	f007 fdce 	bl	2d73c <_printf_common>
   25ba0:	3001      	adds	r0, #1
   25ba2:	f040 808e 	bne.w	25cc2 <_printf_float+0x1ca>
   25ba6:	f04f 30ff 	mov.w	r0, #4294967295
   25baa:	b011      	add	sp, #68	; 0x44
   25bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25bb0:	464a      	mov	r2, r9
   25bb2:	463b      	mov	r3, r7
   25bb4:	4648      	mov	r0, r9
   25bb6:	4639      	mov	r1, r7
   25bb8:	f7dc f956 	bl	1e68 <__aeabi_dcmpun>
   25bbc:	b138      	cbz	r0, 25bce <_printf_float+0xd6>
   25bbe:	2f00      	cmp	r7, #0
   25bc0:	bfbc      	itt	lt
   25bc2:	232d      	movlt	r3, #45	; 0x2d
   25bc4:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   25bc8:	4f88      	ldr	r7, [pc, #544]	; (25dec <_printf_float+0x2f4>)
   25bca:	4b89      	ldr	r3, [pc, #548]	; (25df0 <_printf_float+0x2f8>)
   25bcc:	e7d6      	b.n	25b7c <_printf_float+0x84>
   25bce:	6863      	ldr	r3, [r4, #4]
   25bd0:	1c5a      	adds	r2, r3, #1
   25bd2:	f008 01df 	and.w	r1, r8, #223	; 0xdf
   25bd6:	d142      	bne.n	25c5e <_printf_float+0x166>
   25bd8:	2306      	movs	r3, #6
   25bda:	6063      	str	r3, [r4, #4]
   25bdc:	2200      	movs	r2, #0
   25bde:	9206      	str	r2, [sp, #24]
   25be0:	aa0e      	add	r2, sp, #56	; 0x38
   25be2:	e9cd 8204 	strd	r8, r2, [sp, #16]
   25be6:	aa0d      	add	r2, sp, #52	; 0x34
   25be8:	f44a 6380 	orr.w	r3, sl, #1024	; 0x400
   25bec:	9203      	str	r2, [sp, #12]
   25bee:	f10d 0233 	add.w	r2, sp, #51	; 0x33
   25bf2:	e9cd 3201 	strd	r3, r2, [sp, #4]
   25bf6:	6023      	str	r3, [r4, #0]
   25bf8:	6863      	ldr	r3, [r4, #4]
   25bfa:	9300      	str	r3, [sp, #0]
   25bfc:	464a      	mov	r2, r9
   25bfe:	463b      	mov	r3, r7
   25c00:	4628      	mov	r0, r5
   25c02:	910b      	str	r1, [sp, #44]	; 0x2c
   25c04:	f007 fd0a 	bl	2d61c <__cvt>
   25c08:	990b      	ldr	r1, [sp, #44]	; 0x2c
   25c0a:	2947      	cmp	r1, #71	; 0x47
   25c0c:	4607      	mov	r7, r0
   25c0e:	990d      	ldr	r1, [sp, #52]	; 0x34
   25c10:	d108      	bne.n	25c24 <_printf_float+0x12c>
   25c12:	1cc8      	adds	r0, r1, #3
   25c14:	db02      	blt.n	25c1c <_printf_float+0x124>
   25c16:	6863      	ldr	r3, [r4, #4]
   25c18:	4299      	cmp	r1, r3
   25c1a:	dd40      	ble.n	25c9e <_printf_float+0x1a6>
   25c1c:	f1a8 0802 	sub.w	r8, r8, #2
   25c20:	fa5f f888 	uxtb.w	r8, r8
   25c24:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
   25c28:	d81f      	bhi.n	25c6a <_printf_float+0x172>
   25c2a:	3901      	subs	r1, #1
   25c2c:	4642      	mov	r2, r8
   25c2e:	f104 0050 	add.w	r0, r4, #80	; 0x50
   25c32:	910d      	str	r1, [sp, #52]	; 0x34
   25c34:	f007 fd50 	bl	2d6d8 <__exponent>
   25c38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   25c3a:	1813      	adds	r3, r2, r0
   25c3c:	2a01      	cmp	r2, #1
   25c3e:	4681      	mov	r9, r0
   25c40:	6123      	str	r3, [r4, #16]
   25c42:	dc02      	bgt.n	25c4a <_printf_float+0x152>
   25c44:	6822      	ldr	r2, [r4, #0]
   25c46:	07d2      	lsls	r2, r2, #31
   25c48:	d501      	bpl.n	25c4e <_printf_float+0x156>
   25c4a:	3301      	adds	r3, #1
   25c4c:	6123      	str	r3, [r4, #16]
   25c4e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   25c52:	2b00      	cmp	r3, #0
   25c54:	d09d      	beq.n	25b92 <_printf_float+0x9a>
   25c56:	232d      	movs	r3, #45	; 0x2d
   25c58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   25c5c:	e799      	b.n	25b92 <_printf_float+0x9a>
   25c5e:	2947      	cmp	r1, #71	; 0x47
   25c60:	d1bc      	bne.n	25bdc <_printf_float+0xe4>
   25c62:	2b00      	cmp	r3, #0
   25c64:	d1ba      	bne.n	25bdc <_printf_float+0xe4>
   25c66:	2301      	movs	r3, #1
   25c68:	e7b7      	b.n	25bda <_printf_float+0xe2>
   25c6a:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
   25c6e:	d118      	bne.n	25ca2 <_printf_float+0x1aa>
   25c70:	2900      	cmp	r1, #0
   25c72:	6863      	ldr	r3, [r4, #4]
   25c74:	dd0b      	ble.n	25c8e <_printf_float+0x196>
   25c76:	6121      	str	r1, [r4, #16]
   25c78:	b913      	cbnz	r3, 25c80 <_printf_float+0x188>
   25c7a:	6822      	ldr	r2, [r4, #0]
   25c7c:	07d0      	lsls	r0, r2, #31
   25c7e:	d502      	bpl.n	25c86 <_printf_float+0x18e>
   25c80:	3301      	adds	r3, #1
   25c82:	440b      	add	r3, r1
   25c84:	6123      	str	r3, [r4, #16]
   25c86:	65a1      	str	r1, [r4, #88]	; 0x58
   25c88:	f04f 0900 	mov.w	r9, #0
   25c8c:	e7df      	b.n	25c4e <_printf_float+0x156>
   25c8e:	b913      	cbnz	r3, 25c96 <_printf_float+0x19e>
   25c90:	6822      	ldr	r2, [r4, #0]
   25c92:	07d2      	lsls	r2, r2, #31
   25c94:	d501      	bpl.n	25c9a <_printf_float+0x1a2>
   25c96:	3302      	adds	r3, #2
   25c98:	e7f4      	b.n	25c84 <_printf_float+0x18c>
   25c9a:	2301      	movs	r3, #1
   25c9c:	e7f2      	b.n	25c84 <_printf_float+0x18c>
   25c9e:	f04f 0867 	mov.w	r8, #103	; 0x67
   25ca2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   25ca4:	4299      	cmp	r1, r3
   25ca6:	db05      	blt.n	25cb4 <_printf_float+0x1bc>
   25ca8:	6823      	ldr	r3, [r4, #0]
   25caa:	6121      	str	r1, [r4, #16]
   25cac:	07d8      	lsls	r0, r3, #31
   25cae:	d5ea      	bpl.n	25c86 <_printf_float+0x18e>
   25cb0:	1c4b      	adds	r3, r1, #1
   25cb2:	e7e7      	b.n	25c84 <_printf_float+0x18c>
   25cb4:	2900      	cmp	r1, #0
   25cb6:	bfd4      	ite	le
   25cb8:	f1c1 0202 	rsble	r2, r1, #2
   25cbc:	2201      	movgt	r2, #1
   25cbe:	4413      	add	r3, r2
   25cc0:	e7e0      	b.n	25c84 <_printf_float+0x18c>
   25cc2:	6823      	ldr	r3, [r4, #0]
   25cc4:	055a      	lsls	r2, r3, #21
   25cc6:	d407      	bmi.n	25cd8 <_printf_float+0x1e0>
   25cc8:	6923      	ldr	r3, [r4, #16]
   25cca:	463a      	mov	r2, r7
   25ccc:	4659      	mov	r1, fp
   25cce:	4628      	mov	r0, r5
   25cd0:	47b0      	blx	r6
   25cd2:	3001      	adds	r0, #1
   25cd4:	d129      	bne.n	25d2a <_printf_float+0x232>
   25cd6:	e766      	b.n	25ba6 <_printf_float+0xae>
   25cd8:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
   25cdc:	f240 80d7 	bls.w	25e8e <_printf_float+0x396>
   25ce0:	2200      	movs	r2, #0
   25ce2:	2300      	movs	r3, #0
   25ce4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   25ce8:	f7dc f88c 	bl	1e04 <__aeabi_dcmpeq>
   25cec:	b388      	cbz	r0, 25d52 <_printf_float+0x25a>
   25cee:	2301      	movs	r3, #1
   25cf0:	4a40      	ldr	r2, [pc, #256]	; (25df4 <_printf_float+0x2fc>)
   25cf2:	4659      	mov	r1, fp
   25cf4:	4628      	mov	r0, r5
   25cf6:	47b0      	blx	r6
   25cf8:	3001      	adds	r0, #1
   25cfa:	f43f af54 	beq.w	25ba6 <_printf_float+0xae>
   25cfe:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   25d02:	429a      	cmp	r2, r3
   25d04:	db02      	blt.n	25d0c <_printf_float+0x214>
   25d06:	6823      	ldr	r3, [r4, #0]
   25d08:	07d8      	lsls	r0, r3, #31
   25d0a:	d50e      	bpl.n	25d2a <_printf_float+0x232>
   25d0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   25d10:	4659      	mov	r1, fp
   25d12:	4628      	mov	r0, r5
   25d14:	47b0      	blx	r6
   25d16:	3001      	adds	r0, #1
   25d18:	f43f af45 	beq.w	25ba6 <_printf_float+0xae>
   25d1c:	2700      	movs	r7, #0
   25d1e:	f104 081a 	add.w	r8, r4, #26
   25d22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   25d24:	3b01      	subs	r3, #1
   25d26:	42bb      	cmp	r3, r7
   25d28:	dc09      	bgt.n	25d3e <_printf_float+0x246>
   25d2a:	6823      	ldr	r3, [r4, #0]
   25d2c:	079f      	lsls	r7, r3, #30
   25d2e:	f100 80fa 	bmi.w	25f26 <_printf_float+0x42e>
   25d32:	68e0      	ldr	r0, [r4, #12]
   25d34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   25d36:	4298      	cmp	r0, r3
   25d38:	bfb8      	it	lt
   25d3a:	4618      	movlt	r0, r3
   25d3c:	e735      	b.n	25baa <_printf_float+0xb2>
   25d3e:	2301      	movs	r3, #1
   25d40:	4642      	mov	r2, r8
   25d42:	4659      	mov	r1, fp
   25d44:	4628      	mov	r0, r5
   25d46:	47b0      	blx	r6
   25d48:	3001      	adds	r0, #1
   25d4a:	f43f af2c 	beq.w	25ba6 <_printf_float+0xae>
   25d4e:	3701      	adds	r7, #1
   25d50:	e7e7      	b.n	25d22 <_printf_float+0x22a>
   25d52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   25d54:	2b00      	cmp	r3, #0
   25d56:	dc2b      	bgt.n	25db0 <_printf_float+0x2b8>
   25d58:	2301      	movs	r3, #1
   25d5a:	4a26      	ldr	r2, [pc, #152]	; (25df4 <_printf_float+0x2fc>)
   25d5c:	4659      	mov	r1, fp
   25d5e:	4628      	mov	r0, r5
   25d60:	47b0      	blx	r6
   25d62:	3001      	adds	r0, #1
   25d64:	f43f af1f 	beq.w	25ba6 <_printf_float+0xae>
   25d68:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   25d6c:	4313      	orrs	r3, r2
   25d6e:	d102      	bne.n	25d76 <_printf_float+0x27e>
   25d70:	6823      	ldr	r3, [r4, #0]
   25d72:	07d9      	lsls	r1, r3, #31
   25d74:	d5d9      	bpl.n	25d2a <_printf_float+0x232>
   25d76:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   25d7a:	4659      	mov	r1, fp
   25d7c:	4628      	mov	r0, r5
   25d7e:	47b0      	blx	r6
   25d80:	3001      	adds	r0, #1
   25d82:	f43f af10 	beq.w	25ba6 <_printf_float+0xae>
   25d86:	f04f 0800 	mov.w	r8, #0
   25d8a:	f104 091a 	add.w	r9, r4, #26
   25d8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   25d90:	425b      	negs	r3, r3
   25d92:	4543      	cmp	r3, r8
   25d94:	dc01      	bgt.n	25d9a <_printf_float+0x2a2>
   25d96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   25d98:	e797      	b.n	25cca <_printf_float+0x1d2>
   25d9a:	2301      	movs	r3, #1
   25d9c:	464a      	mov	r2, r9
   25d9e:	4659      	mov	r1, fp
   25da0:	4628      	mov	r0, r5
   25da2:	47b0      	blx	r6
   25da4:	3001      	adds	r0, #1
   25da6:	f43f aefe 	beq.w	25ba6 <_printf_float+0xae>
   25daa:	f108 0801 	add.w	r8, r8, #1
   25dae:	e7ee      	b.n	25d8e <_printf_float+0x296>
   25db0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   25db2:	6da3      	ldr	r3, [r4, #88]	; 0x58
   25db4:	429a      	cmp	r2, r3
   25db6:	bfa8      	it	ge
   25db8:	461a      	movge	r2, r3
   25dba:	2a00      	cmp	r2, #0
   25dbc:	4690      	mov	r8, r2
   25dbe:	dd07      	ble.n	25dd0 <_printf_float+0x2d8>
   25dc0:	4613      	mov	r3, r2
   25dc2:	4659      	mov	r1, fp
   25dc4:	463a      	mov	r2, r7
   25dc6:	4628      	mov	r0, r5
   25dc8:	47b0      	blx	r6
   25dca:	3001      	adds	r0, #1
   25dcc:	f43f aeeb 	beq.w	25ba6 <_printf_float+0xae>
   25dd0:	f104 031a 	add.w	r3, r4, #26
   25dd4:	f04f 0a00 	mov.w	sl, #0
   25dd8:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
   25ddc:	930b      	str	r3, [sp, #44]	; 0x2c
   25dde:	e015      	b.n	25e0c <_printf_float+0x314>
   25de0:	7fefffff 	.word	0x7fefffff
   25de4:	00035e11 	.word	0x00035e11
   25de8:	00035e15 	.word	0x00035e15
   25dec:	00035e19 	.word	0x00035e19
   25df0:	00035e1d 	.word	0x00035e1d
   25df4:	0002fb51 	.word	0x0002fb51
   25df8:	2301      	movs	r3, #1
   25dfa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   25dfc:	4659      	mov	r1, fp
   25dfe:	4628      	mov	r0, r5
   25e00:	47b0      	blx	r6
   25e02:	3001      	adds	r0, #1
   25e04:	f43f aecf 	beq.w	25ba6 <_printf_float+0xae>
   25e08:	f10a 0a01 	add.w	sl, sl, #1
   25e0c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
   25e10:	eba9 0308 	sub.w	r3, r9, r8
   25e14:	4553      	cmp	r3, sl
   25e16:	dcef      	bgt.n	25df8 <_printf_float+0x300>
   25e18:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   25e1c:	429a      	cmp	r2, r3
   25e1e:	db1a      	blt.n	25e56 <_printf_float+0x35e>
   25e20:	6823      	ldr	r3, [r4, #0]
   25e22:	07da      	lsls	r2, r3, #31
   25e24:	d417      	bmi.n	25e56 <_printf_float+0x35e>
   25e26:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   25e2a:	4591      	cmp	r9, r2
   25e2c:	db1b      	blt.n	25e66 <_printf_float+0x36e>
   25e2e:	eba3 0809 	sub.w	r8, r3, r9
   25e32:	f1b8 0f00 	cmp.w	r8, #0
   25e36:	dd08      	ble.n	25e4a <_printf_float+0x352>
   25e38:	4643      	mov	r3, r8
   25e3a:	eb07 0209 	add.w	r2, r7, r9
   25e3e:	4659      	mov	r1, fp
   25e40:	4628      	mov	r0, r5
   25e42:	47b0      	blx	r6
   25e44:	3001      	adds	r0, #1
   25e46:	f43f aeae 	beq.w	25ba6 <_printf_float+0xae>
   25e4a:	2700      	movs	r7, #0
   25e4c:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
   25e50:	f104 091a 	add.w	r9, r4, #26
   25e54:	e013      	b.n	25e7e <_printf_float+0x386>
   25e56:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   25e5a:	4659      	mov	r1, fp
   25e5c:	4628      	mov	r0, r5
   25e5e:	47b0      	blx	r6
   25e60:	3001      	adds	r0, #1
   25e62:	d1e0      	bne.n	25e26 <_printf_float+0x32e>
   25e64:	e69f      	b.n	25ba6 <_printf_float+0xae>
   25e66:	eba3 0802 	sub.w	r8, r3, r2
   25e6a:	e7e2      	b.n	25e32 <_printf_float+0x33a>
   25e6c:	2301      	movs	r3, #1
   25e6e:	464a      	mov	r2, r9
   25e70:	4659      	mov	r1, fp
   25e72:	4628      	mov	r0, r5
   25e74:	47b0      	blx	r6
   25e76:	3001      	adds	r0, #1
   25e78:	f43f ae95 	beq.w	25ba6 <_printf_float+0xae>
   25e7c:	3701      	adds	r7, #1
   25e7e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   25e82:	1a9b      	subs	r3, r3, r2
   25e84:	eba3 0308 	sub.w	r3, r3, r8
   25e88:	42bb      	cmp	r3, r7
   25e8a:	dcef      	bgt.n	25e6c <_printf_float+0x374>
   25e8c:	e74d      	b.n	25d2a <_printf_float+0x232>
   25e8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   25e90:	2a01      	cmp	r2, #1
   25e92:	dc01      	bgt.n	25e98 <_printf_float+0x3a0>
   25e94:	07db      	lsls	r3, r3, #31
   25e96:	d534      	bpl.n	25f02 <_printf_float+0x40a>
   25e98:	2301      	movs	r3, #1
   25e9a:	463a      	mov	r2, r7
   25e9c:	4659      	mov	r1, fp
   25e9e:	4628      	mov	r0, r5
   25ea0:	47b0      	blx	r6
   25ea2:	3001      	adds	r0, #1
   25ea4:	f43f ae7f 	beq.w	25ba6 <_printf_float+0xae>
   25ea8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   25eac:	4659      	mov	r1, fp
   25eae:	4628      	mov	r0, r5
   25eb0:	47b0      	blx	r6
   25eb2:	3001      	adds	r0, #1
   25eb4:	f43f ae77 	beq.w	25ba6 <_printf_float+0xae>
   25eb8:	2200      	movs	r2, #0
   25eba:	2300      	movs	r3, #0
   25ebc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   25ec0:	f7db ffa0 	bl	1e04 <__aeabi_dcmpeq>
   25ec4:	b9c8      	cbnz	r0, 25efa <_printf_float+0x402>
   25ec6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   25ec8:	1c7a      	adds	r2, r7, #1
   25eca:	3b01      	subs	r3, #1
   25ecc:	4659      	mov	r1, fp
   25ece:	4628      	mov	r0, r5
   25ed0:	47b0      	blx	r6
   25ed2:	3001      	adds	r0, #1
   25ed4:	d10d      	bne.n	25ef2 <_printf_float+0x3fa>
   25ed6:	e666      	b.n	25ba6 <_printf_float+0xae>
   25ed8:	2301      	movs	r3, #1
   25eda:	4642      	mov	r2, r8
   25edc:	4659      	mov	r1, fp
   25ede:	4628      	mov	r0, r5
   25ee0:	47b0      	blx	r6
   25ee2:	3001      	adds	r0, #1
   25ee4:	f43f ae5f 	beq.w	25ba6 <_printf_float+0xae>
   25ee8:	3701      	adds	r7, #1
   25eea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   25eec:	3b01      	subs	r3, #1
   25eee:	42bb      	cmp	r3, r7
   25ef0:	dcf2      	bgt.n	25ed8 <_printf_float+0x3e0>
   25ef2:	464b      	mov	r3, r9
   25ef4:	f104 0250 	add.w	r2, r4, #80	; 0x50
   25ef8:	e6e8      	b.n	25ccc <_printf_float+0x1d4>
   25efa:	2700      	movs	r7, #0
   25efc:	f104 081a 	add.w	r8, r4, #26
   25f00:	e7f3      	b.n	25eea <_printf_float+0x3f2>
   25f02:	2301      	movs	r3, #1
   25f04:	463a      	mov	r2, r7
   25f06:	e7e1      	b.n	25ecc <_printf_float+0x3d4>
   25f08:	2301      	movs	r3, #1
   25f0a:	4642      	mov	r2, r8
   25f0c:	4659      	mov	r1, fp
   25f0e:	4628      	mov	r0, r5
   25f10:	47b0      	blx	r6
   25f12:	3001      	adds	r0, #1
   25f14:	f43f ae47 	beq.w	25ba6 <_printf_float+0xae>
   25f18:	3701      	adds	r7, #1
   25f1a:	68e3      	ldr	r3, [r4, #12]
   25f1c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   25f1e:	1a9b      	subs	r3, r3, r2
   25f20:	42bb      	cmp	r3, r7
   25f22:	dcf1      	bgt.n	25f08 <_printf_float+0x410>
   25f24:	e705      	b.n	25d32 <_printf_float+0x23a>
   25f26:	2700      	movs	r7, #0
   25f28:	f104 0819 	add.w	r8, r4, #25
   25f2c:	e7f5      	b.n	25f1a <_printf_float+0x422>
   25f2e:	bf00      	nop

00025f30 <_printf_i>:
   25f30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   25f34:	4606      	mov	r6, r0
   25f36:	460c      	mov	r4, r1
   25f38:	f101 0043 	add.w	r0, r1, #67	; 0x43
   25f3c:	7e09      	ldrb	r1, [r1, #24]
   25f3e:	b085      	sub	sp, #20
   25f40:	296e      	cmp	r1, #110	; 0x6e
   25f42:	4698      	mov	r8, r3
   25f44:	4617      	mov	r7, r2
   25f46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   25f48:	f000 80ba 	beq.w	260c0 <_printf_i+0x190>
   25f4c:	d824      	bhi.n	25f98 <_printf_i+0x68>
   25f4e:	2963      	cmp	r1, #99	; 0x63
   25f50:	d039      	beq.n	25fc6 <_printf_i+0x96>
   25f52:	d80a      	bhi.n	25f6a <_printf_i+0x3a>
   25f54:	2900      	cmp	r1, #0
   25f56:	f000 80c3 	beq.w	260e0 <_printf_i+0x1b0>
   25f5a:	2958      	cmp	r1, #88	; 0x58
   25f5c:	f000 8091 	beq.w	26082 <_printf_i+0x152>
   25f60:	f104 0542 	add.w	r5, r4, #66	; 0x42
   25f64:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
   25f68:	e035      	b.n	25fd6 <_printf_i+0xa6>
   25f6a:	2964      	cmp	r1, #100	; 0x64
   25f6c:	d001      	beq.n	25f72 <_printf_i+0x42>
   25f6e:	2969      	cmp	r1, #105	; 0x69
   25f70:	d1f6      	bne.n	25f60 <_printf_i+0x30>
   25f72:	6825      	ldr	r5, [r4, #0]
   25f74:	681a      	ldr	r2, [r3, #0]
   25f76:	f015 0f80 	tst.w	r5, #128	; 0x80
   25f7a:	f102 0104 	add.w	r1, r2, #4
   25f7e:	d02c      	beq.n	25fda <_printf_i+0xaa>
   25f80:	6812      	ldr	r2, [r2, #0]
   25f82:	6019      	str	r1, [r3, #0]
   25f84:	2a00      	cmp	r2, #0
   25f86:	da03      	bge.n	25f90 <_printf_i+0x60>
   25f88:	232d      	movs	r3, #45	; 0x2d
   25f8a:	4252      	negs	r2, r2
   25f8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   25f90:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 26150 <_printf_i+0x220>
   25f94:	230a      	movs	r3, #10
   25f96:	e03f      	b.n	26018 <_printf_i+0xe8>
   25f98:	2973      	cmp	r1, #115	; 0x73
   25f9a:	f000 80a5 	beq.w	260e8 <_printf_i+0x1b8>
   25f9e:	d808      	bhi.n	25fb2 <_printf_i+0x82>
   25fa0:	296f      	cmp	r1, #111	; 0x6f
   25fa2:	d021      	beq.n	25fe8 <_printf_i+0xb8>
   25fa4:	2970      	cmp	r1, #112	; 0x70
   25fa6:	d1db      	bne.n	25f60 <_printf_i+0x30>
   25fa8:	6822      	ldr	r2, [r4, #0]
   25faa:	f042 0220 	orr.w	r2, r2, #32
   25fae:	6022      	str	r2, [r4, #0]
   25fb0:	e003      	b.n	25fba <_printf_i+0x8a>
   25fb2:	2975      	cmp	r1, #117	; 0x75
   25fb4:	d018      	beq.n	25fe8 <_printf_i+0xb8>
   25fb6:	2978      	cmp	r1, #120	; 0x78
   25fb8:	d1d2      	bne.n	25f60 <_printf_i+0x30>
   25fba:	2278      	movs	r2, #120	; 0x78
   25fbc:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
   25fc0:	f8df c190 	ldr.w	ip, [pc, #400]	; 26154 <_printf_i+0x224>
   25fc4:	e061      	b.n	2608a <_printf_i+0x15a>
   25fc6:	681a      	ldr	r2, [r3, #0]
   25fc8:	1d11      	adds	r1, r2, #4
   25fca:	6019      	str	r1, [r3, #0]
   25fcc:	6813      	ldr	r3, [r2, #0]
   25fce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   25fd2:	f104 0542 	add.w	r5, r4, #66	; 0x42
   25fd6:	2301      	movs	r3, #1
   25fd8:	e093      	b.n	26102 <_printf_i+0x1d2>
   25fda:	6812      	ldr	r2, [r2, #0]
   25fdc:	6019      	str	r1, [r3, #0]
   25fde:	f015 0f40 	tst.w	r5, #64	; 0x40
   25fe2:	bf18      	it	ne
   25fe4:	b212      	sxthne	r2, r2
   25fe6:	e7cd      	b.n	25f84 <_printf_i+0x54>
   25fe8:	f8d4 c000 	ldr.w	ip, [r4]
   25fec:	681a      	ldr	r2, [r3, #0]
   25fee:	f01c 0f80 	tst.w	ip, #128	; 0x80
   25ff2:	f102 0504 	add.w	r5, r2, #4
   25ff6:	601d      	str	r5, [r3, #0]
   25ff8:	d001      	beq.n	25ffe <_printf_i+0xce>
   25ffa:	6812      	ldr	r2, [r2, #0]
   25ffc:	e003      	b.n	26006 <_printf_i+0xd6>
   25ffe:	f01c 0f40 	tst.w	ip, #64	; 0x40
   26002:	d0fa      	beq.n	25ffa <_printf_i+0xca>
   26004:	8812      	ldrh	r2, [r2, #0]
   26006:	f8df c148 	ldr.w	ip, [pc, #328]	; 26150 <_printf_i+0x220>
   2600a:	296f      	cmp	r1, #111	; 0x6f
   2600c:	bf0c      	ite	eq
   2600e:	2308      	moveq	r3, #8
   26010:	230a      	movne	r3, #10
   26012:	2100      	movs	r1, #0
   26014:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   26018:	6865      	ldr	r5, [r4, #4]
   2601a:	60a5      	str	r5, [r4, #8]
   2601c:	2d00      	cmp	r5, #0
   2601e:	bfa2      	ittt	ge
   26020:	6821      	ldrge	r1, [r4, #0]
   26022:	f021 0104 	bicge.w	r1, r1, #4
   26026:	6021      	strge	r1, [r4, #0]
   26028:	b90a      	cbnz	r2, 2602e <_printf_i+0xfe>
   2602a:	2d00      	cmp	r5, #0
   2602c:	d046      	beq.n	260bc <_printf_i+0x18c>
   2602e:	4605      	mov	r5, r0
   26030:	fbb2 f1f3 	udiv	r1, r2, r3
   26034:	fb03 2e11 	mls	lr, r3, r1, r2
   26038:	4293      	cmp	r3, r2
   2603a:	f81c e00e 	ldrb.w	lr, [ip, lr]
   2603e:	f805 ed01 	strb.w	lr, [r5, #-1]!
   26042:	d939      	bls.n	260b8 <_printf_i+0x188>
   26044:	2b08      	cmp	r3, #8
   26046:	d10b      	bne.n	26060 <_printf_i+0x130>
   26048:	6823      	ldr	r3, [r4, #0]
   2604a:	07da      	lsls	r2, r3, #31
   2604c:	d508      	bpl.n	26060 <_printf_i+0x130>
   2604e:	6923      	ldr	r3, [r4, #16]
   26050:	6862      	ldr	r2, [r4, #4]
   26052:	429a      	cmp	r2, r3
   26054:	bfde      	ittt	le
   26056:	2330      	movle	r3, #48	; 0x30
   26058:	f805 3c01 	strble.w	r3, [r5, #-1]
   2605c:	f105 35ff 	addle.w	r5, r5, #4294967295
   26060:	1b40      	subs	r0, r0, r5
   26062:	6120      	str	r0, [r4, #16]
   26064:	f8cd 8000 	str.w	r8, [sp]
   26068:	463b      	mov	r3, r7
   2606a:	aa03      	add	r2, sp, #12
   2606c:	4621      	mov	r1, r4
   2606e:	4630      	mov	r0, r6
   26070:	f007 fb64 	bl	2d73c <_printf_common>
   26074:	3001      	adds	r0, #1
   26076:	d149      	bne.n	2610c <_printf_i+0x1dc>
   26078:	f04f 30ff 	mov.w	r0, #4294967295
   2607c:	b005      	add	sp, #20
   2607e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   26082:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 26150 <_printf_i+0x220>
   26086:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
   2608a:	681d      	ldr	r5, [r3, #0]
   2608c:	6821      	ldr	r1, [r4, #0]
   2608e:	f855 2b04 	ldr.w	r2, [r5], #4
   26092:	601d      	str	r5, [r3, #0]
   26094:	060d      	lsls	r5, r1, #24
   26096:	d50b      	bpl.n	260b0 <_printf_i+0x180>
   26098:	07cd      	lsls	r5, r1, #31
   2609a:	bf44      	itt	mi
   2609c:	f041 0120 	orrmi.w	r1, r1, #32
   260a0:	6021      	strmi	r1, [r4, #0]
   260a2:	b91a      	cbnz	r2, 260ac <_printf_i+0x17c>
   260a4:	6823      	ldr	r3, [r4, #0]
   260a6:	f023 0320 	bic.w	r3, r3, #32
   260aa:	6023      	str	r3, [r4, #0]
   260ac:	2310      	movs	r3, #16
   260ae:	e7b0      	b.n	26012 <_printf_i+0xe2>
   260b0:	064b      	lsls	r3, r1, #25
   260b2:	bf48      	it	mi
   260b4:	b292      	uxthmi	r2, r2
   260b6:	e7ef      	b.n	26098 <_printf_i+0x168>
   260b8:	460a      	mov	r2, r1
   260ba:	e7b9      	b.n	26030 <_printf_i+0x100>
   260bc:	4605      	mov	r5, r0
   260be:	e7c1      	b.n	26044 <_printf_i+0x114>
   260c0:	681a      	ldr	r2, [r3, #0]
   260c2:	f8d4 c000 	ldr.w	ip, [r4]
   260c6:	6961      	ldr	r1, [r4, #20]
   260c8:	1d15      	adds	r5, r2, #4
   260ca:	601d      	str	r5, [r3, #0]
   260cc:	f01c 0f80 	tst.w	ip, #128	; 0x80
   260d0:	6813      	ldr	r3, [r2, #0]
   260d2:	d001      	beq.n	260d8 <_printf_i+0x1a8>
   260d4:	6019      	str	r1, [r3, #0]
   260d6:	e003      	b.n	260e0 <_printf_i+0x1b0>
   260d8:	f01c 0f40 	tst.w	ip, #64	; 0x40
   260dc:	d0fa      	beq.n	260d4 <_printf_i+0x1a4>
   260de:	8019      	strh	r1, [r3, #0]
   260e0:	2300      	movs	r3, #0
   260e2:	6123      	str	r3, [r4, #16]
   260e4:	4605      	mov	r5, r0
   260e6:	e7bd      	b.n	26064 <_printf_i+0x134>
   260e8:	681a      	ldr	r2, [r3, #0]
   260ea:	1d11      	adds	r1, r2, #4
   260ec:	6019      	str	r1, [r3, #0]
   260ee:	6815      	ldr	r5, [r2, #0]
   260f0:	6862      	ldr	r2, [r4, #4]
   260f2:	2100      	movs	r1, #0
   260f4:	4628      	mov	r0, r5
   260f6:	f7db f803 	bl	1100 <memchr>
   260fa:	b108      	cbz	r0, 26100 <_printf_i+0x1d0>
   260fc:	1b40      	subs	r0, r0, r5
   260fe:	6060      	str	r0, [r4, #4]
   26100:	6863      	ldr	r3, [r4, #4]
   26102:	6123      	str	r3, [r4, #16]
   26104:	2300      	movs	r3, #0
   26106:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   2610a:	e7ab      	b.n	26064 <_printf_i+0x134>
   2610c:	6923      	ldr	r3, [r4, #16]
   2610e:	462a      	mov	r2, r5
   26110:	4639      	mov	r1, r7
   26112:	4630      	mov	r0, r6
   26114:	47c0      	blx	r8
   26116:	3001      	adds	r0, #1
   26118:	d0ae      	beq.n	26078 <_printf_i+0x148>
   2611a:	6823      	ldr	r3, [r4, #0]
   2611c:	079b      	lsls	r3, r3, #30
   2611e:	d413      	bmi.n	26148 <_printf_i+0x218>
   26120:	68e0      	ldr	r0, [r4, #12]
   26122:	9b03      	ldr	r3, [sp, #12]
   26124:	4298      	cmp	r0, r3
   26126:	bfb8      	it	lt
   26128:	4618      	movlt	r0, r3
   2612a:	e7a7      	b.n	2607c <_printf_i+0x14c>
   2612c:	2301      	movs	r3, #1
   2612e:	464a      	mov	r2, r9
   26130:	4639      	mov	r1, r7
   26132:	4630      	mov	r0, r6
   26134:	47c0      	blx	r8
   26136:	3001      	adds	r0, #1
   26138:	d09e      	beq.n	26078 <_printf_i+0x148>
   2613a:	3501      	adds	r5, #1
   2613c:	68e3      	ldr	r3, [r4, #12]
   2613e:	9a03      	ldr	r2, [sp, #12]
   26140:	1a9b      	subs	r3, r3, r2
   26142:	42ab      	cmp	r3, r5
   26144:	dcf2      	bgt.n	2612c <_printf_i+0x1fc>
   26146:	e7eb      	b.n	26120 <_printf_i+0x1f0>
   26148:	2500      	movs	r5, #0
   2614a:	f104 0919 	add.w	r9, r4, #25
   2614e:	e7f5      	b.n	2613c <_printf_i+0x20c>
   26150:	00035e21 	.word	0x00035e21
   26154:	00035e32 	.word	0x00035e32

00026158 <iprintf>:
   26158:	b40f      	push	{r0, r1, r2, r3}
   2615a:	4b0a      	ldr	r3, [pc, #40]	; (26184 <iprintf+0x2c>)
   2615c:	b513      	push	{r0, r1, r4, lr}
   2615e:	681c      	ldr	r4, [r3, #0]
   26160:	b124      	cbz	r4, 2616c <iprintf+0x14>
   26162:	69a3      	ldr	r3, [r4, #24]
   26164:	b913      	cbnz	r3, 2616c <iprintf+0x14>
   26166:	4620      	mov	r0, r4
   26168:	f000 f8e2 	bl	26330 <__sinit>
   2616c:	ab05      	add	r3, sp, #20
   2616e:	9a04      	ldr	r2, [sp, #16]
   26170:	68a1      	ldr	r1, [r4, #8]
   26172:	9301      	str	r3, [sp, #4]
   26174:	4620      	mov	r0, r4
   26176:	f000 f9b7 	bl	264e8 <_vfiprintf_r>
   2617a:	b002      	add	sp, #8
   2617c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   26180:	b004      	add	sp, #16
   26182:	4770      	bx	lr
   26184:	20000eac 	.word	0x20000eac

00026188 <_sbrk_r>:
   26188:	b538      	push	{r3, r4, r5, lr}
   2618a:	4c06      	ldr	r4, [pc, #24]	; (261a4 <_sbrk_r+0x1c>)
   2618c:	2300      	movs	r3, #0
   2618e:	4605      	mov	r5, r0
   26190:	4608      	mov	r0, r1
   26192:	6023      	str	r3, [r4, #0]
   26194:	f7e1 fa84 	bl	76a0 <_sbrk>
   26198:	1c43      	adds	r3, r0, #1
   2619a:	d102      	bne.n	261a2 <_sbrk_r+0x1a>
   2619c:	6823      	ldr	r3, [r4, #0]
   2619e:	b103      	cbz	r3, 261a2 <_sbrk_r+0x1a>
   261a0:	602b      	str	r3, [r5, #0]
   261a2:	bd38      	pop	{r3, r4, r5, pc}
   261a4:	20004890 	.word	0x20004890

000261a8 <_strtol_l.isra.0>:
   261a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   261ac:	4f39      	ldr	r7, [pc, #228]	; (26294 <_strtol_l.isra.0+0xec>)
   261ae:	4686      	mov	lr, r0
   261b0:	4608      	mov	r0, r1
   261b2:	4605      	mov	r5, r0
   261b4:	f815 4b01 	ldrb.w	r4, [r5], #1
   261b8:	5de6      	ldrb	r6, [r4, r7]
   261ba:	f016 0608 	ands.w	r6, r6, #8
   261be:	d134      	bne.n	2622a <_strtol_l.isra.0+0x82>
   261c0:	2c2d      	cmp	r4, #45	; 0x2d
   261c2:	d134      	bne.n	2622e <_strtol_l.isra.0+0x86>
   261c4:	782c      	ldrb	r4, [r5, #0]
   261c6:	f04f 0801 	mov.w	r8, #1
   261ca:	1c85      	adds	r5, r0, #2
   261cc:	2b00      	cmp	r3, #0
   261ce:	d05c      	beq.n	2628a <_strtol_l.isra.0+0xe2>
   261d0:	2b10      	cmp	r3, #16
   261d2:	d109      	bne.n	261e8 <_strtol_l.isra.0+0x40>
   261d4:	2c30      	cmp	r4, #48	; 0x30
   261d6:	d107      	bne.n	261e8 <_strtol_l.isra.0+0x40>
   261d8:	7828      	ldrb	r0, [r5, #0]
   261da:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   261de:	2858      	cmp	r0, #88	; 0x58
   261e0:	d14e      	bne.n	26280 <_strtol_l.isra.0+0xd8>
   261e2:	786c      	ldrb	r4, [r5, #1]
   261e4:	2310      	movs	r3, #16
   261e6:	3502      	adds	r5, #2
   261e8:	f1b8 0f00 	cmp.w	r8, #0
   261ec:	bf14      	ite	ne
   261ee:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   261f2:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   261f6:	2700      	movs	r7, #0
   261f8:	fbbc f9f3 	udiv	r9, ip, r3
   261fc:	4638      	mov	r0, r7
   261fe:	fb03 ca19 	mls	sl, r3, r9, ip
   26202:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   26206:	2e09      	cmp	r6, #9
   26208:	d818      	bhi.n	2623c <_strtol_l.isra.0+0x94>
   2620a:	4634      	mov	r4, r6
   2620c:	42a3      	cmp	r3, r4
   2620e:	dd24      	ble.n	2625a <_strtol_l.isra.0+0xb2>
   26210:	1c7e      	adds	r6, r7, #1
   26212:	d007      	beq.n	26224 <_strtol_l.isra.0+0x7c>
   26214:	4581      	cmp	r9, r0
   26216:	d31d      	bcc.n	26254 <_strtol_l.isra.0+0xac>
   26218:	d101      	bne.n	2621e <_strtol_l.isra.0+0x76>
   2621a:	45a2      	cmp	sl, r4
   2621c:	db1a      	blt.n	26254 <_strtol_l.isra.0+0xac>
   2621e:	fb00 4003 	mla	r0, r0, r3, r4
   26222:	2701      	movs	r7, #1
   26224:	f815 4b01 	ldrb.w	r4, [r5], #1
   26228:	e7eb      	b.n	26202 <_strtol_l.isra.0+0x5a>
   2622a:	4628      	mov	r0, r5
   2622c:	e7c1      	b.n	261b2 <_strtol_l.isra.0+0xa>
   2622e:	2c2b      	cmp	r4, #43	; 0x2b
   26230:	bf08      	it	eq
   26232:	782c      	ldrbeq	r4, [r5, #0]
   26234:	46b0      	mov	r8, r6
   26236:	bf08      	it	eq
   26238:	1c85      	addeq	r5, r0, #2
   2623a:	e7c7      	b.n	261cc <_strtol_l.isra.0+0x24>
   2623c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
   26240:	2e19      	cmp	r6, #25
   26242:	d801      	bhi.n	26248 <_strtol_l.isra.0+0xa0>
   26244:	3c37      	subs	r4, #55	; 0x37
   26246:	e7e1      	b.n	2620c <_strtol_l.isra.0+0x64>
   26248:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
   2624c:	2e19      	cmp	r6, #25
   2624e:	d804      	bhi.n	2625a <_strtol_l.isra.0+0xb2>
   26250:	3c57      	subs	r4, #87	; 0x57
   26252:	e7db      	b.n	2620c <_strtol_l.isra.0+0x64>
   26254:	f04f 37ff 	mov.w	r7, #4294967295
   26258:	e7e4      	b.n	26224 <_strtol_l.isra.0+0x7c>
   2625a:	1c7b      	adds	r3, r7, #1
   2625c:	d106      	bne.n	2626c <_strtol_l.isra.0+0xc4>
   2625e:	2322      	movs	r3, #34	; 0x22
   26260:	f8ce 3000 	str.w	r3, [lr]
   26264:	4660      	mov	r0, ip
   26266:	b942      	cbnz	r2, 2627a <_strtol_l.isra.0+0xd2>
   26268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2626c:	f1b8 0f00 	cmp.w	r8, #0
   26270:	d000      	beq.n	26274 <_strtol_l.isra.0+0xcc>
   26272:	4240      	negs	r0, r0
   26274:	2a00      	cmp	r2, #0
   26276:	d0f7      	beq.n	26268 <_strtol_l.isra.0+0xc0>
   26278:	b107      	cbz	r7, 2627c <_strtol_l.isra.0+0xd4>
   2627a:	1e69      	subs	r1, r5, #1
   2627c:	6011      	str	r1, [r2, #0]
   2627e:	e7f3      	b.n	26268 <_strtol_l.isra.0+0xc0>
   26280:	2430      	movs	r4, #48	; 0x30
   26282:	2b00      	cmp	r3, #0
   26284:	d1b0      	bne.n	261e8 <_strtol_l.isra.0+0x40>
   26286:	2308      	movs	r3, #8
   26288:	e7ae      	b.n	261e8 <_strtol_l.isra.0+0x40>
   2628a:	2c30      	cmp	r4, #48	; 0x30
   2628c:	d0a4      	beq.n	261d8 <_strtol_l.isra.0+0x30>
   2628e:	230a      	movs	r3, #10
   26290:	e7aa      	b.n	261e8 <_strtol_l.isra.0+0x40>
   26292:	bf00      	nop
   26294:	00035d11 	.word	0x00035d11

00026298 <strtol>:
   26298:	4613      	mov	r3, r2
   2629a:	460a      	mov	r2, r1
   2629c:	4601      	mov	r1, r0
   2629e:	4802      	ldr	r0, [pc, #8]	; (262a8 <strtol+0x10>)
   262a0:	6800      	ldr	r0, [r0, #0]
   262a2:	f7ff bf81 	b.w	261a8 <_strtol_l.isra.0>
   262a6:	bf00      	nop
   262a8:	20000eac 	.word	0x20000eac

000262ac <std>:
   262ac:	2300      	movs	r3, #0
   262ae:	b510      	push	{r4, lr}
   262b0:	4604      	mov	r4, r0
   262b2:	e9c0 3300 	strd	r3, r3, [r0]
   262b6:	6083      	str	r3, [r0, #8]
   262b8:	8181      	strh	r1, [r0, #12]
   262ba:	6643      	str	r3, [r0, #100]	; 0x64
   262bc:	81c2      	strh	r2, [r0, #14]
   262be:	e9c0 3304 	strd	r3, r3, [r0, #16]
   262c2:	6183      	str	r3, [r0, #24]
   262c4:	4619      	mov	r1, r3
   262c6:	2208      	movs	r2, #8
   262c8:	305c      	adds	r0, #92	; 0x5c
   262ca:	f007 f996 	bl	2d5fa <memset>
   262ce:	4b05      	ldr	r3, [pc, #20]	; (262e4 <std+0x38>)
   262d0:	6263      	str	r3, [r4, #36]	; 0x24
   262d2:	4b05      	ldr	r3, [pc, #20]	; (262e8 <std+0x3c>)
   262d4:	62a3      	str	r3, [r4, #40]	; 0x28
   262d6:	4b05      	ldr	r3, [pc, #20]	; (262ec <std+0x40>)
   262d8:	62e3      	str	r3, [r4, #44]	; 0x2c
   262da:	4b05      	ldr	r3, [pc, #20]	; (262f0 <std+0x44>)
   262dc:	6224      	str	r4, [r4, #32]
   262de:	6323      	str	r3, [r4, #48]	; 0x30
   262e0:	bd10      	pop	{r4, pc}
   262e2:	bf00      	nop
   262e4:	0002dfdd 	.word	0x0002dfdd
   262e8:	0002dfff 	.word	0x0002dfff
   262ec:	0002e037 	.word	0x0002e037
   262f0:	0002e05b 	.word	0x0002e05b

000262f4 <_cleanup_r>:
   262f4:	4901      	ldr	r1, [pc, #4]	; (262fc <_cleanup_r+0x8>)
   262f6:	f007 bb94 	b.w	2da22 <_fwalk_reent>
   262fa:	bf00      	nop
   262fc:	00026a09 	.word	0x00026a09

00026300 <__sfp_lock_acquire>:
   26300:	4801      	ldr	r0, [pc, #4]	; (26308 <__sfp_lock_acquire+0x8>)
   26302:	f007 bbad 	b.w	2da60 <__retarget_lock_acquire_recursive>
   26306:	bf00      	nop
   26308:	2000489c 	.word	0x2000489c

0002630c <__sfp_lock_release>:
   2630c:	4801      	ldr	r0, [pc, #4]	; (26314 <__sfp_lock_release+0x8>)
   2630e:	f007 bba8 	b.w	2da62 <__retarget_lock_release_recursive>
   26312:	bf00      	nop
   26314:	2000489c 	.word	0x2000489c

00026318 <__sinit_lock_acquire>:
   26318:	4801      	ldr	r0, [pc, #4]	; (26320 <__sinit_lock_acquire+0x8>)
   2631a:	f007 bba1 	b.w	2da60 <__retarget_lock_acquire_recursive>
   2631e:	bf00      	nop
   26320:	20004897 	.word	0x20004897

00026324 <__sinit_lock_release>:
   26324:	4801      	ldr	r0, [pc, #4]	; (2632c <__sinit_lock_release+0x8>)
   26326:	f007 bb9c 	b.w	2da62 <__retarget_lock_release_recursive>
   2632a:	bf00      	nop
   2632c:	20004897 	.word	0x20004897

00026330 <__sinit>:
   26330:	b510      	push	{r4, lr}
   26332:	4604      	mov	r4, r0
   26334:	f7ff fff0 	bl	26318 <__sinit_lock_acquire>
   26338:	69a3      	ldr	r3, [r4, #24]
   2633a:	b11b      	cbz	r3, 26344 <__sinit+0x14>
   2633c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   26340:	f7ff bff0 	b.w	26324 <__sinit_lock_release>
   26344:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   26348:	6523      	str	r3, [r4, #80]	; 0x50
   2634a:	4b13      	ldr	r3, [pc, #76]	; (26398 <__sinit+0x68>)
   2634c:	4a13      	ldr	r2, [pc, #76]	; (2639c <__sinit+0x6c>)
   2634e:	681b      	ldr	r3, [r3, #0]
   26350:	62a2      	str	r2, [r4, #40]	; 0x28
   26352:	42a3      	cmp	r3, r4
   26354:	bf04      	itt	eq
   26356:	2301      	moveq	r3, #1
   26358:	61a3      	streq	r3, [r4, #24]
   2635a:	4620      	mov	r0, r4
   2635c:	f000 f820 	bl	263a0 <__sfp>
   26360:	6060      	str	r0, [r4, #4]
   26362:	4620      	mov	r0, r4
   26364:	f000 f81c 	bl	263a0 <__sfp>
   26368:	60a0      	str	r0, [r4, #8]
   2636a:	4620      	mov	r0, r4
   2636c:	f000 f818 	bl	263a0 <__sfp>
   26370:	2200      	movs	r2, #0
   26372:	60e0      	str	r0, [r4, #12]
   26374:	2104      	movs	r1, #4
   26376:	6860      	ldr	r0, [r4, #4]
   26378:	f7ff ff98 	bl	262ac <std>
   2637c:	2201      	movs	r2, #1
   2637e:	2109      	movs	r1, #9
   26380:	68a0      	ldr	r0, [r4, #8]
   26382:	f7ff ff93 	bl	262ac <std>
   26386:	2202      	movs	r2, #2
   26388:	2112      	movs	r1, #18
   2638a:	68e0      	ldr	r0, [r4, #12]
   2638c:	f7ff ff8e 	bl	262ac <std>
   26390:	2301      	movs	r3, #1
   26392:	61a3      	str	r3, [r4, #24]
   26394:	e7d2      	b.n	2633c <__sinit+0xc>
   26396:	bf00      	nop
   26398:	0002f6b8 	.word	0x0002f6b8
   2639c:	000262f5 	.word	0x000262f5

000263a0 <__sfp>:
   263a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   263a2:	4607      	mov	r7, r0
   263a4:	f7ff ffac 	bl	26300 <__sfp_lock_acquire>
   263a8:	4b1e      	ldr	r3, [pc, #120]	; (26424 <__sfp+0x84>)
   263aa:	681e      	ldr	r6, [r3, #0]
   263ac:	69b3      	ldr	r3, [r6, #24]
   263ae:	b913      	cbnz	r3, 263b6 <__sfp+0x16>
   263b0:	4630      	mov	r0, r6
   263b2:	f7ff ffbd 	bl	26330 <__sinit>
   263b6:	3648      	adds	r6, #72	; 0x48
   263b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   263bc:	3b01      	subs	r3, #1
   263be:	d503      	bpl.n	263c8 <__sfp+0x28>
   263c0:	6833      	ldr	r3, [r6, #0]
   263c2:	b30b      	cbz	r3, 26408 <__sfp+0x68>
   263c4:	6836      	ldr	r6, [r6, #0]
   263c6:	e7f7      	b.n	263b8 <__sfp+0x18>
   263c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   263cc:	b9d5      	cbnz	r5, 26404 <__sfp+0x64>
   263ce:	4b16      	ldr	r3, [pc, #88]	; (26428 <__sfp+0x88>)
   263d0:	60e3      	str	r3, [r4, #12]
   263d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
   263d6:	6665      	str	r5, [r4, #100]	; 0x64
   263d8:	f007 fb41 	bl	2da5e <__retarget_lock_init_recursive>
   263dc:	f7ff ff96 	bl	2630c <__sfp_lock_release>
   263e0:	6025      	str	r5, [r4, #0]
   263e2:	e9c4 5501 	strd	r5, r5, [r4, #4]
   263e6:	e9c4 5504 	strd	r5, r5, [r4, #16]
   263ea:	61a5      	str	r5, [r4, #24]
   263ec:	2208      	movs	r2, #8
   263ee:	4629      	mov	r1, r5
   263f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   263f4:	f007 f901 	bl	2d5fa <memset>
   263f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   263fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   26400:	4620      	mov	r0, r4
   26402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26404:	3468      	adds	r4, #104	; 0x68
   26406:	e7d9      	b.n	263bc <__sfp+0x1c>
   26408:	2104      	movs	r1, #4
   2640a:	4638      	mov	r0, r7
   2640c:	f007 faf3 	bl	2d9f6 <__sfmoreglue>
   26410:	4604      	mov	r4, r0
   26412:	6030      	str	r0, [r6, #0]
   26414:	2800      	cmp	r0, #0
   26416:	d1d5      	bne.n	263c4 <__sfp+0x24>
   26418:	f7ff ff78 	bl	2630c <__sfp_lock_release>
   2641c:	230c      	movs	r3, #12
   2641e:	603b      	str	r3, [r7, #0]
   26420:	e7ee      	b.n	26400 <__sfp+0x60>
   26422:	bf00      	nop
   26424:	0002f6b8 	.word	0x0002f6b8
   26428:	ffff0001 	.word	0xffff0001

0002642c <_localeconv_r>:
   2642c:	4800      	ldr	r0, [pc, #0]	; (26430 <_localeconv_r+0x4>)
   2642e:	4770      	bx	lr
   26430:	20001000 	.word	0x20001000

00026434 <__malloc_lock>:
   26434:	4801      	ldr	r0, [pc, #4]	; (2643c <__malloc_lock+0x8>)
   26436:	f007 bb13 	b.w	2da60 <__retarget_lock_acquire_recursive>
   2643a:	bf00      	nop
   2643c:	20004898 	.word	0x20004898

00026440 <__malloc_unlock>:
   26440:	4801      	ldr	r0, [pc, #4]	; (26448 <__malloc_unlock+0x8>)
   26442:	f007 bb0e 	b.w	2da62 <__retarget_lock_release_recursive>
   26446:	bf00      	nop
   26448:	20004898 	.word	0x20004898

0002644c <__pow5mult>:
   2644c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26450:	4615      	mov	r5, r2
   26452:	f012 0203 	ands.w	r2, r2, #3
   26456:	4606      	mov	r6, r0
   26458:	460f      	mov	r7, r1
   2645a:	d007      	beq.n	2646c <__pow5mult+0x20>
   2645c:	3a01      	subs	r2, #1
   2645e:	4c21      	ldr	r4, [pc, #132]	; (264e4 <__pow5mult+0x98>)
   26460:	2300      	movs	r3, #0
   26462:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   26466:	f007 fb48 	bl	2dafa <__multadd>
   2646a:	4607      	mov	r7, r0
   2646c:	10ad      	asrs	r5, r5, #2
   2646e:	d035      	beq.n	264dc <__pow5mult+0x90>
   26470:	6a74      	ldr	r4, [r6, #36]	; 0x24
   26472:	b93c      	cbnz	r4, 26484 <__pow5mult+0x38>
   26474:	2010      	movs	r0, #16
   26476:	f7ff fa8f 	bl	25998 <malloc>
   2647a:	e9c0 4401 	strd	r4, r4, [r0, #4]
   2647e:	6270      	str	r0, [r6, #36]	; 0x24
   26480:	6004      	str	r4, [r0, #0]
   26482:	60c4      	str	r4, [r0, #12]
   26484:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   26488:	f8d8 4008 	ldr.w	r4, [r8, #8]
   2648c:	b94c      	cbnz	r4, 264a2 <__pow5mult+0x56>
   2648e:	f240 2171 	movw	r1, #625	; 0x271
   26492:	4630      	mov	r0, r6
   26494:	f007 fbbc 	bl	2dc10 <__i2b>
   26498:	2300      	movs	r3, #0
   2649a:	f8c8 0008 	str.w	r0, [r8, #8]
   2649e:	4604      	mov	r4, r0
   264a0:	6003      	str	r3, [r0, #0]
   264a2:	f04f 0800 	mov.w	r8, #0
   264a6:	07eb      	lsls	r3, r5, #31
   264a8:	d50a      	bpl.n	264c0 <__pow5mult+0x74>
   264aa:	4639      	mov	r1, r7
   264ac:	4622      	mov	r2, r4
   264ae:	4630      	mov	r0, r6
   264b0:	f007 fbb7 	bl	2dc22 <__multiply>
   264b4:	4639      	mov	r1, r7
   264b6:	4681      	mov	r9, r0
   264b8:	4630      	mov	r0, r6
   264ba:	f007 fb07 	bl	2dacc <_Bfree>
   264be:	464f      	mov	r7, r9
   264c0:	106d      	asrs	r5, r5, #1
   264c2:	d00b      	beq.n	264dc <__pow5mult+0x90>
   264c4:	6820      	ldr	r0, [r4, #0]
   264c6:	b938      	cbnz	r0, 264d8 <__pow5mult+0x8c>
   264c8:	4622      	mov	r2, r4
   264ca:	4621      	mov	r1, r4
   264cc:	4630      	mov	r0, r6
   264ce:	f007 fba8 	bl	2dc22 <__multiply>
   264d2:	6020      	str	r0, [r4, #0]
   264d4:	f8c0 8000 	str.w	r8, [r0]
   264d8:	4604      	mov	r4, r0
   264da:	e7e4      	b.n	264a6 <__pow5mult+0x5a>
   264dc:	4638      	mov	r0, r7
   264de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   264e2:	bf00      	nop
   264e4:	0002f6bc 	.word	0x0002f6bc

000264e8 <_vfiprintf_r>:
   264e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   264ec:	460d      	mov	r5, r1
   264ee:	b09d      	sub	sp, #116	; 0x74
   264f0:	4614      	mov	r4, r2
   264f2:	461e      	mov	r6, r3
   264f4:	4607      	mov	r7, r0
   264f6:	b118      	cbz	r0, 26500 <_vfiprintf_r+0x18>
   264f8:	6983      	ldr	r3, [r0, #24]
   264fa:	b90b      	cbnz	r3, 26500 <_vfiprintf_r+0x18>
   264fc:	f7ff ff18 	bl	26330 <__sinit>
   26500:	4b85      	ldr	r3, [pc, #532]	; (26718 <_vfiprintf_r+0x230>)
   26502:	429d      	cmp	r5, r3
   26504:	d11b      	bne.n	2653e <_vfiprintf_r+0x56>
   26506:	687d      	ldr	r5, [r7, #4]
   26508:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   2650a:	07d9      	lsls	r1, r3, #31
   2650c:	d405      	bmi.n	2651a <_vfiprintf_r+0x32>
   2650e:	89ab      	ldrh	r3, [r5, #12]
   26510:	059a      	lsls	r2, r3, #22
   26512:	d402      	bmi.n	2651a <_vfiprintf_r+0x32>
   26514:	6da8      	ldr	r0, [r5, #88]	; 0x58
   26516:	f007 faa3 	bl	2da60 <__retarget_lock_acquire_recursive>
   2651a:	89ab      	ldrh	r3, [r5, #12]
   2651c:	071b      	lsls	r3, r3, #28
   2651e:	d501      	bpl.n	26524 <_vfiprintf_r+0x3c>
   26520:	692b      	ldr	r3, [r5, #16]
   26522:	b9eb      	cbnz	r3, 26560 <_vfiprintf_r+0x78>
   26524:	4629      	mov	r1, r5
   26526:	4638      	mov	r0, r7
   26528:	f000 f96a 	bl	26800 <__swsetup_r>
   2652c:	b1c0      	cbz	r0, 26560 <_vfiprintf_r+0x78>
   2652e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   26530:	07d8      	lsls	r0, r3, #31
   26532:	d50e      	bpl.n	26552 <_vfiprintf_r+0x6a>
   26534:	f04f 30ff 	mov.w	r0, #4294967295
   26538:	b01d      	add	sp, #116	; 0x74
   2653a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2653e:	4b77      	ldr	r3, [pc, #476]	; (2671c <_vfiprintf_r+0x234>)
   26540:	429d      	cmp	r5, r3
   26542:	d101      	bne.n	26548 <_vfiprintf_r+0x60>
   26544:	68bd      	ldr	r5, [r7, #8]
   26546:	e7df      	b.n	26508 <_vfiprintf_r+0x20>
   26548:	4b75      	ldr	r3, [pc, #468]	; (26720 <_vfiprintf_r+0x238>)
   2654a:	429d      	cmp	r5, r3
   2654c:	bf08      	it	eq
   2654e:	68fd      	ldreq	r5, [r7, #12]
   26550:	e7da      	b.n	26508 <_vfiprintf_r+0x20>
   26552:	89ab      	ldrh	r3, [r5, #12]
   26554:	0599      	lsls	r1, r3, #22
   26556:	d4ed      	bmi.n	26534 <_vfiprintf_r+0x4c>
   26558:	6da8      	ldr	r0, [r5, #88]	; 0x58
   2655a:	f007 fa82 	bl	2da62 <__retarget_lock_release_recursive>
   2655e:	e7e9      	b.n	26534 <_vfiprintf_r+0x4c>
   26560:	2300      	movs	r3, #0
   26562:	9309      	str	r3, [sp, #36]	; 0x24
   26564:	2320      	movs	r3, #32
   26566:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   2656a:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 26724 <_vfiprintf_r+0x23c>
   2656e:	9603      	str	r6, [sp, #12]
   26570:	2330      	movs	r3, #48	; 0x30
   26572:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   26576:	f04f 0a01 	mov.w	sl, #1
   2657a:	4623      	mov	r3, r4
   2657c:	461e      	mov	r6, r3
   2657e:	f813 2b01 	ldrb.w	r2, [r3], #1
   26582:	b10a      	cbz	r2, 26588 <_vfiprintf_r+0xa0>
   26584:	2a25      	cmp	r2, #37	; 0x25
   26586:	d1f9      	bne.n	2657c <_vfiprintf_r+0x94>
   26588:	ebb6 0b04 	subs.w	fp, r6, r4
   2658c:	d00b      	beq.n	265a6 <_vfiprintf_r+0xbe>
   2658e:	465b      	mov	r3, fp
   26590:	4622      	mov	r2, r4
   26592:	4629      	mov	r1, r5
   26594:	4638      	mov	r0, r7
   26596:	f007 fd0f 	bl	2dfb8 <__sfputs_r>
   2659a:	3001      	adds	r0, #1
   2659c:	f000 80a3 	beq.w	266e6 <_vfiprintf_r+0x1fe>
   265a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   265a2:	445b      	add	r3, fp
   265a4:	9309      	str	r3, [sp, #36]	; 0x24
   265a6:	7833      	ldrb	r3, [r6, #0]
   265a8:	2b00      	cmp	r3, #0
   265aa:	f000 809c 	beq.w	266e6 <_vfiprintf_r+0x1fe>
   265ae:	2300      	movs	r3, #0
   265b0:	f04f 32ff 	mov.w	r2, #4294967295
   265b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
   265b8:	3601      	adds	r6, #1
   265ba:	9304      	str	r3, [sp, #16]
   265bc:	9307      	str	r3, [sp, #28]
   265be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   265c2:	931a      	str	r3, [sp, #104]	; 0x68
   265c4:	4634      	mov	r4, r6
   265c6:	2205      	movs	r2, #5
   265c8:	f814 1b01 	ldrb.w	r1, [r4], #1
   265cc:	4855      	ldr	r0, [pc, #340]	; (26724 <_vfiprintf_r+0x23c>)
   265ce:	f7da fd97 	bl	1100 <memchr>
   265d2:	9b04      	ldr	r3, [sp, #16]
   265d4:	b9c0      	cbnz	r0, 26608 <_vfiprintf_r+0x120>
   265d6:	06da      	lsls	r2, r3, #27
   265d8:	bf44      	itt	mi
   265da:	2220      	movmi	r2, #32
   265dc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   265e0:	0718      	lsls	r0, r3, #28
   265e2:	bf44      	itt	mi
   265e4:	222b      	movmi	r2, #43	; 0x2b
   265e6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   265ea:	7832      	ldrb	r2, [r6, #0]
   265ec:	2a2a      	cmp	r2, #42	; 0x2a
   265ee:	d013      	beq.n	26618 <_vfiprintf_r+0x130>
   265f0:	9a07      	ldr	r2, [sp, #28]
   265f2:	4634      	mov	r4, r6
   265f4:	2000      	movs	r0, #0
   265f6:	260a      	movs	r6, #10
   265f8:	4621      	mov	r1, r4
   265fa:	f811 3b01 	ldrb.w	r3, [r1], #1
   265fe:	3b30      	subs	r3, #48	; 0x30
   26600:	2b09      	cmp	r3, #9
   26602:	d94b      	bls.n	2669c <_vfiprintf_r+0x1b4>
   26604:	b970      	cbnz	r0, 26624 <_vfiprintf_r+0x13c>
   26606:	e014      	b.n	26632 <_vfiprintf_r+0x14a>
   26608:	eba0 0009 	sub.w	r0, r0, r9
   2660c:	fa0a f000 	lsl.w	r0, sl, r0
   26610:	4318      	orrs	r0, r3
   26612:	9004      	str	r0, [sp, #16]
   26614:	4626      	mov	r6, r4
   26616:	e7d5      	b.n	265c4 <_vfiprintf_r+0xdc>
   26618:	9a03      	ldr	r2, [sp, #12]
   2661a:	1d11      	adds	r1, r2, #4
   2661c:	6812      	ldr	r2, [r2, #0]
   2661e:	9103      	str	r1, [sp, #12]
   26620:	2a00      	cmp	r2, #0
   26622:	db01      	blt.n	26628 <_vfiprintf_r+0x140>
   26624:	9207      	str	r2, [sp, #28]
   26626:	e004      	b.n	26632 <_vfiprintf_r+0x14a>
   26628:	4252      	negs	r2, r2
   2662a:	f043 0302 	orr.w	r3, r3, #2
   2662e:	9207      	str	r2, [sp, #28]
   26630:	9304      	str	r3, [sp, #16]
   26632:	7823      	ldrb	r3, [r4, #0]
   26634:	2b2e      	cmp	r3, #46	; 0x2e
   26636:	d10c      	bne.n	26652 <_vfiprintf_r+0x16a>
   26638:	7863      	ldrb	r3, [r4, #1]
   2663a:	2b2a      	cmp	r3, #42	; 0x2a
   2663c:	d133      	bne.n	266a6 <_vfiprintf_r+0x1be>
   2663e:	9b03      	ldr	r3, [sp, #12]
   26640:	1d1a      	adds	r2, r3, #4
   26642:	681b      	ldr	r3, [r3, #0]
   26644:	9203      	str	r2, [sp, #12]
   26646:	2b00      	cmp	r3, #0
   26648:	bfb8      	it	lt
   2664a:	f04f 33ff 	movlt.w	r3, #4294967295
   2664e:	3402      	adds	r4, #2
   26650:	9305      	str	r3, [sp, #20]
   26652:	4e35      	ldr	r6, [pc, #212]	; (26728 <_vfiprintf_r+0x240>)
   26654:	7821      	ldrb	r1, [r4, #0]
   26656:	2203      	movs	r2, #3
   26658:	4630      	mov	r0, r6
   2665a:	f7da fd51 	bl	1100 <memchr>
   2665e:	b138      	cbz	r0, 26670 <_vfiprintf_r+0x188>
   26660:	2340      	movs	r3, #64	; 0x40
   26662:	1b80      	subs	r0, r0, r6
   26664:	fa03 f000 	lsl.w	r0, r3, r0
   26668:	9b04      	ldr	r3, [sp, #16]
   2666a:	4303      	orrs	r3, r0
   2666c:	3401      	adds	r4, #1
   2666e:	9304      	str	r3, [sp, #16]
   26670:	f814 1b01 	ldrb.w	r1, [r4], #1
   26674:	482d      	ldr	r0, [pc, #180]	; (2672c <_vfiprintf_r+0x244>)
   26676:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   2667a:	2206      	movs	r2, #6
   2667c:	f7da fd40 	bl	1100 <memchr>
   26680:	2800      	cmp	r0, #0
   26682:	d03f      	beq.n	26704 <_vfiprintf_r+0x21c>
   26684:	4b2a      	ldr	r3, [pc, #168]	; (26730 <_vfiprintf_r+0x248>)
   26686:	bb13      	cbnz	r3, 266ce <_vfiprintf_r+0x1e6>
   26688:	9b03      	ldr	r3, [sp, #12]
   2668a:	3307      	adds	r3, #7
   2668c:	f023 0307 	bic.w	r3, r3, #7
   26690:	3308      	adds	r3, #8
   26692:	9303      	str	r3, [sp, #12]
   26694:	9b09      	ldr	r3, [sp, #36]	; 0x24
   26696:	4443      	add	r3, r8
   26698:	9309      	str	r3, [sp, #36]	; 0x24
   2669a:	e76e      	b.n	2657a <_vfiprintf_r+0x92>
   2669c:	fb06 3202 	mla	r2, r6, r2, r3
   266a0:	2001      	movs	r0, #1
   266a2:	460c      	mov	r4, r1
   266a4:	e7a8      	b.n	265f8 <_vfiprintf_r+0x110>
   266a6:	2300      	movs	r3, #0
   266a8:	3401      	adds	r4, #1
   266aa:	9305      	str	r3, [sp, #20]
   266ac:	4619      	mov	r1, r3
   266ae:	260a      	movs	r6, #10
   266b0:	4620      	mov	r0, r4
   266b2:	f810 2b01 	ldrb.w	r2, [r0], #1
   266b6:	3a30      	subs	r2, #48	; 0x30
   266b8:	2a09      	cmp	r2, #9
   266ba:	d903      	bls.n	266c4 <_vfiprintf_r+0x1dc>
   266bc:	2b00      	cmp	r3, #0
   266be:	d0c8      	beq.n	26652 <_vfiprintf_r+0x16a>
   266c0:	9105      	str	r1, [sp, #20]
   266c2:	e7c6      	b.n	26652 <_vfiprintf_r+0x16a>
   266c4:	fb06 2101 	mla	r1, r6, r1, r2
   266c8:	2301      	movs	r3, #1
   266ca:	4604      	mov	r4, r0
   266cc:	e7f0      	b.n	266b0 <_vfiprintf_r+0x1c8>
   266ce:	ab03      	add	r3, sp, #12
   266d0:	9300      	str	r3, [sp, #0]
   266d2:	462a      	mov	r2, r5
   266d4:	4b17      	ldr	r3, [pc, #92]	; (26734 <_vfiprintf_r+0x24c>)
   266d6:	a904      	add	r1, sp, #16
   266d8:	4638      	mov	r0, r7
   266da:	f7ff fa0d 	bl	25af8 <_printf_float>
   266de:	f1b0 3fff 	cmp.w	r0, #4294967295
   266e2:	4680      	mov	r8, r0
   266e4:	d1d6      	bne.n	26694 <_vfiprintf_r+0x1ac>
   266e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   266e8:	07d9      	lsls	r1, r3, #31
   266ea:	d405      	bmi.n	266f8 <_vfiprintf_r+0x210>
   266ec:	89ab      	ldrh	r3, [r5, #12]
   266ee:	059a      	lsls	r2, r3, #22
   266f0:	d402      	bmi.n	266f8 <_vfiprintf_r+0x210>
   266f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
   266f4:	f007 f9b5 	bl	2da62 <__retarget_lock_release_recursive>
   266f8:	89ab      	ldrh	r3, [r5, #12]
   266fa:	065b      	lsls	r3, r3, #25
   266fc:	f53f af1a 	bmi.w	26534 <_vfiprintf_r+0x4c>
   26700:	9809      	ldr	r0, [sp, #36]	; 0x24
   26702:	e719      	b.n	26538 <_vfiprintf_r+0x50>
   26704:	ab03      	add	r3, sp, #12
   26706:	9300      	str	r3, [sp, #0]
   26708:	462a      	mov	r2, r5
   2670a:	4b0a      	ldr	r3, [pc, #40]	; (26734 <_vfiprintf_r+0x24c>)
   2670c:	a904      	add	r1, sp, #16
   2670e:	4638      	mov	r0, r7
   26710:	f7ff fc0e 	bl	25f30 <_printf_i>
   26714:	e7e3      	b.n	266de <_vfiprintf_r+0x1f6>
   26716:	bf00      	nop
   26718:	0002f678 	.word	0x0002f678
   2671c:	0002f698 	.word	0x0002f698
   26720:	0002f658 	.word	0x0002f658
   26724:	00035e50 	.word	0x00035e50
   26728:	00035e56 	.word	0x00035e56
   2672c:	00035e5a 	.word	0x00035e5a
   26730:	00025af9 	.word	0x00025af9
   26734:	0002dfb9 	.word	0x0002dfb9

00026738 <__swbuf_r>:
   26738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2673a:	460e      	mov	r6, r1
   2673c:	4614      	mov	r4, r2
   2673e:	4605      	mov	r5, r0
   26740:	b118      	cbz	r0, 2674a <__swbuf_r+0x12>
   26742:	6983      	ldr	r3, [r0, #24]
   26744:	b90b      	cbnz	r3, 2674a <__swbuf_r+0x12>
   26746:	f7ff fdf3 	bl	26330 <__sinit>
   2674a:	4b21      	ldr	r3, [pc, #132]	; (267d0 <__swbuf_r+0x98>)
   2674c:	429c      	cmp	r4, r3
   2674e:	d12b      	bne.n	267a8 <__swbuf_r+0x70>
   26750:	686c      	ldr	r4, [r5, #4]
   26752:	69a3      	ldr	r3, [r4, #24]
   26754:	60a3      	str	r3, [r4, #8]
   26756:	89a3      	ldrh	r3, [r4, #12]
   26758:	071a      	lsls	r2, r3, #28
   2675a:	d52f      	bpl.n	267bc <__swbuf_r+0x84>
   2675c:	6923      	ldr	r3, [r4, #16]
   2675e:	b36b      	cbz	r3, 267bc <__swbuf_r+0x84>
   26760:	6923      	ldr	r3, [r4, #16]
   26762:	6820      	ldr	r0, [r4, #0]
   26764:	1ac0      	subs	r0, r0, r3
   26766:	6963      	ldr	r3, [r4, #20]
   26768:	b2f6      	uxtb	r6, r6
   2676a:	4283      	cmp	r3, r0
   2676c:	4637      	mov	r7, r6
   2676e:	dc04      	bgt.n	2677a <__swbuf_r+0x42>
   26770:	4621      	mov	r1, r4
   26772:	4628      	mov	r0, r5
   26774:	f000 f948 	bl	26a08 <_fflush_r>
   26778:	bb30      	cbnz	r0, 267c8 <__swbuf_r+0x90>
   2677a:	68a3      	ldr	r3, [r4, #8]
   2677c:	3b01      	subs	r3, #1
   2677e:	60a3      	str	r3, [r4, #8]
   26780:	6823      	ldr	r3, [r4, #0]
   26782:	1c5a      	adds	r2, r3, #1
   26784:	6022      	str	r2, [r4, #0]
   26786:	701e      	strb	r6, [r3, #0]
   26788:	6963      	ldr	r3, [r4, #20]
   2678a:	3001      	adds	r0, #1
   2678c:	4283      	cmp	r3, r0
   2678e:	d004      	beq.n	2679a <__swbuf_r+0x62>
   26790:	89a3      	ldrh	r3, [r4, #12]
   26792:	07db      	lsls	r3, r3, #31
   26794:	d506      	bpl.n	267a4 <__swbuf_r+0x6c>
   26796:	2e0a      	cmp	r6, #10
   26798:	d104      	bne.n	267a4 <__swbuf_r+0x6c>
   2679a:	4621      	mov	r1, r4
   2679c:	4628      	mov	r0, r5
   2679e:	f000 f933 	bl	26a08 <_fflush_r>
   267a2:	b988      	cbnz	r0, 267c8 <__swbuf_r+0x90>
   267a4:	4638      	mov	r0, r7
   267a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   267a8:	4b0a      	ldr	r3, [pc, #40]	; (267d4 <__swbuf_r+0x9c>)
   267aa:	429c      	cmp	r4, r3
   267ac:	d101      	bne.n	267b2 <__swbuf_r+0x7a>
   267ae:	68ac      	ldr	r4, [r5, #8]
   267b0:	e7cf      	b.n	26752 <__swbuf_r+0x1a>
   267b2:	4b09      	ldr	r3, [pc, #36]	; (267d8 <__swbuf_r+0xa0>)
   267b4:	429c      	cmp	r4, r3
   267b6:	bf08      	it	eq
   267b8:	68ec      	ldreq	r4, [r5, #12]
   267ba:	e7ca      	b.n	26752 <__swbuf_r+0x1a>
   267bc:	4621      	mov	r1, r4
   267be:	4628      	mov	r0, r5
   267c0:	f000 f81e 	bl	26800 <__swsetup_r>
   267c4:	2800      	cmp	r0, #0
   267c6:	d0cb      	beq.n	26760 <__swbuf_r+0x28>
   267c8:	f04f 37ff 	mov.w	r7, #4294967295
   267cc:	e7ea      	b.n	267a4 <__swbuf_r+0x6c>
   267ce:	bf00      	nop
   267d0:	0002f678 	.word	0x0002f678
   267d4:	0002f698 	.word	0x0002f698
   267d8:	0002f658 	.word	0x0002f658

000267dc <_write_r>:
   267dc:	b538      	push	{r3, r4, r5, lr}
   267de:	4c07      	ldr	r4, [pc, #28]	; (267fc <_write_r+0x20>)
   267e0:	4605      	mov	r5, r0
   267e2:	4608      	mov	r0, r1
   267e4:	4611      	mov	r1, r2
   267e6:	2200      	movs	r2, #0
   267e8:	6022      	str	r2, [r4, #0]
   267ea:	461a      	mov	r2, r3
   267ec:	f002 fa27 	bl	28c3e <_write>
   267f0:	1c43      	adds	r3, r0, #1
   267f2:	d102      	bne.n	267fa <_write_r+0x1e>
   267f4:	6823      	ldr	r3, [r4, #0]
   267f6:	b103      	cbz	r3, 267fa <_write_r+0x1e>
   267f8:	602b      	str	r3, [r5, #0]
   267fa:	bd38      	pop	{r3, r4, r5, pc}
   267fc:	20004890 	.word	0x20004890

00026800 <__swsetup_r>:
   26800:	4b32      	ldr	r3, [pc, #200]	; (268cc <__swsetup_r+0xcc>)
   26802:	b570      	push	{r4, r5, r6, lr}
   26804:	681d      	ldr	r5, [r3, #0]
   26806:	4606      	mov	r6, r0
   26808:	460c      	mov	r4, r1
   2680a:	b125      	cbz	r5, 26816 <__swsetup_r+0x16>
   2680c:	69ab      	ldr	r3, [r5, #24]
   2680e:	b913      	cbnz	r3, 26816 <__swsetup_r+0x16>
   26810:	4628      	mov	r0, r5
   26812:	f7ff fd8d 	bl	26330 <__sinit>
   26816:	4b2e      	ldr	r3, [pc, #184]	; (268d0 <__swsetup_r+0xd0>)
   26818:	429c      	cmp	r4, r3
   2681a:	d10f      	bne.n	2683c <__swsetup_r+0x3c>
   2681c:	686c      	ldr	r4, [r5, #4]
   2681e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   26822:	b29a      	uxth	r2, r3
   26824:	0715      	lsls	r5, r2, #28
   26826:	d42c      	bmi.n	26882 <__swsetup_r+0x82>
   26828:	06d0      	lsls	r0, r2, #27
   2682a:	d411      	bmi.n	26850 <__swsetup_r+0x50>
   2682c:	2209      	movs	r2, #9
   2682e:	6032      	str	r2, [r6, #0]
   26830:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   26834:	81a3      	strh	r3, [r4, #12]
   26836:	f04f 30ff 	mov.w	r0, #4294967295
   2683a:	e03e      	b.n	268ba <__swsetup_r+0xba>
   2683c:	4b25      	ldr	r3, [pc, #148]	; (268d4 <__swsetup_r+0xd4>)
   2683e:	429c      	cmp	r4, r3
   26840:	d101      	bne.n	26846 <__swsetup_r+0x46>
   26842:	68ac      	ldr	r4, [r5, #8]
   26844:	e7eb      	b.n	2681e <__swsetup_r+0x1e>
   26846:	4b24      	ldr	r3, [pc, #144]	; (268d8 <__swsetup_r+0xd8>)
   26848:	429c      	cmp	r4, r3
   2684a:	bf08      	it	eq
   2684c:	68ec      	ldreq	r4, [r5, #12]
   2684e:	e7e6      	b.n	2681e <__swsetup_r+0x1e>
   26850:	0751      	lsls	r1, r2, #29
   26852:	d512      	bpl.n	2687a <__swsetup_r+0x7a>
   26854:	6b61      	ldr	r1, [r4, #52]	; 0x34
   26856:	b141      	cbz	r1, 2686a <__swsetup_r+0x6a>
   26858:	f104 0344 	add.w	r3, r4, #68	; 0x44
   2685c:	4299      	cmp	r1, r3
   2685e:	d002      	beq.n	26866 <__swsetup_r+0x66>
   26860:	4630      	mov	r0, r6
   26862:	f7ff f8a1 	bl	259a8 <_free_r>
   26866:	2300      	movs	r3, #0
   26868:	6363      	str	r3, [r4, #52]	; 0x34
   2686a:	89a3      	ldrh	r3, [r4, #12]
   2686c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   26870:	81a3      	strh	r3, [r4, #12]
   26872:	2300      	movs	r3, #0
   26874:	6063      	str	r3, [r4, #4]
   26876:	6923      	ldr	r3, [r4, #16]
   26878:	6023      	str	r3, [r4, #0]
   2687a:	89a3      	ldrh	r3, [r4, #12]
   2687c:	f043 0308 	orr.w	r3, r3, #8
   26880:	81a3      	strh	r3, [r4, #12]
   26882:	6923      	ldr	r3, [r4, #16]
   26884:	b94b      	cbnz	r3, 2689a <__swsetup_r+0x9a>
   26886:	89a3      	ldrh	r3, [r4, #12]
   26888:	f403 7320 	and.w	r3, r3, #640	; 0x280
   2688c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   26890:	d003      	beq.n	2689a <__swsetup_r+0x9a>
   26892:	4621      	mov	r1, r4
   26894:	4630      	mov	r0, r6
   26896:	f000 f905 	bl	26aa4 <__smakebuf_r>
   2689a:	89a2      	ldrh	r2, [r4, #12]
   2689c:	f012 0301 	ands.w	r3, r2, #1
   268a0:	d00c      	beq.n	268bc <__swsetup_r+0xbc>
   268a2:	2300      	movs	r3, #0
   268a4:	60a3      	str	r3, [r4, #8]
   268a6:	6963      	ldr	r3, [r4, #20]
   268a8:	425b      	negs	r3, r3
   268aa:	61a3      	str	r3, [r4, #24]
   268ac:	6923      	ldr	r3, [r4, #16]
   268ae:	b953      	cbnz	r3, 268c6 <__swsetup_r+0xc6>
   268b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   268b4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
   268b8:	d1ba      	bne.n	26830 <__swsetup_r+0x30>
   268ba:	bd70      	pop	{r4, r5, r6, pc}
   268bc:	0792      	lsls	r2, r2, #30
   268be:	bf58      	it	pl
   268c0:	6963      	ldrpl	r3, [r4, #20]
   268c2:	60a3      	str	r3, [r4, #8]
   268c4:	e7f2      	b.n	268ac <__swsetup_r+0xac>
   268c6:	2000      	movs	r0, #0
   268c8:	e7f7      	b.n	268ba <__swsetup_r+0xba>
   268ca:	bf00      	nop
   268cc:	20000eac 	.word	0x20000eac
   268d0:	0002f678 	.word	0x0002f678
   268d4:	0002f698 	.word	0x0002f698
   268d8:	0002f658 	.word	0x0002f658

000268dc <_close_r>:
   268dc:	b538      	push	{r3, r4, r5, lr}
   268de:	4c06      	ldr	r4, [pc, #24]	; (268f8 <_close_r+0x1c>)
   268e0:	2300      	movs	r3, #0
   268e2:	4605      	mov	r5, r0
   268e4:	4608      	mov	r0, r1
   268e6:	6023      	str	r3, [r4, #0]
   268e8:	f002 f9ad 	bl	28c46 <_close>
   268ec:	1c43      	adds	r3, r0, #1
   268ee:	d102      	bne.n	268f6 <_close_r+0x1a>
   268f0:	6823      	ldr	r3, [r4, #0]
   268f2:	b103      	cbz	r3, 268f6 <_close_r+0x1a>
   268f4:	602b      	str	r3, [r5, #0]
   268f6:	bd38      	pop	{r3, r4, r5, pc}
   268f8:	20004890 	.word	0x20004890

000268fc <__sflush_r>:
   268fc:	898a      	ldrh	r2, [r1, #12]
   268fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26902:	4605      	mov	r5, r0
   26904:	0710      	lsls	r0, r2, #28
   26906:	460c      	mov	r4, r1
   26908:	d458      	bmi.n	269bc <__sflush_r+0xc0>
   2690a:	684b      	ldr	r3, [r1, #4]
   2690c:	2b00      	cmp	r3, #0
   2690e:	dc05      	bgt.n	2691c <__sflush_r+0x20>
   26910:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   26912:	2b00      	cmp	r3, #0
   26914:	dc02      	bgt.n	2691c <__sflush_r+0x20>
   26916:	2000      	movs	r0, #0
   26918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2691c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   2691e:	2e00      	cmp	r6, #0
   26920:	d0f9      	beq.n	26916 <__sflush_r+0x1a>
   26922:	2300      	movs	r3, #0
   26924:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   26928:	682f      	ldr	r7, [r5, #0]
   2692a:	602b      	str	r3, [r5, #0]
   2692c:	d032      	beq.n	26994 <__sflush_r+0x98>
   2692e:	6d60      	ldr	r0, [r4, #84]	; 0x54
   26930:	89a3      	ldrh	r3, [r4, #12]
   26932:	075a      	lsls	r2, r3, #29
   26934:	d505      	bpl.n	26942 <__sflush_r+0x46>
   26936:	6863      	ldr	r3, [r4, #4]
   26938:	1ac0      	subs	r0, r0, r3
   2693a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2693c:	b10b      	cbz	r3, 26942 <__sflush_r+0x46>
   2693e:	6c23      	ldr	r3, [r4, #64]	; 0x40
   26940:	1ac0      	subs	r0, r0, r3
   26942:	2300      	movs	r3, #0
   26944:	4602      	mov	r2, r0
   26946:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   26948:	6a21      	ldr	r1, [r4, #32]
   2694a:	4628      	mov	r0, r5
   2694c:	47b0      	blx	r6
   2694e:	1c43      	adds	r3, r0, #1
   26950:	89a3      	ldrh	r3, [r4, #12]
   26952:	d106      	bne.n	26962 <__sflush_r+0x66>
   26954:	6829      	ldr	r1, [r5, #0]
   26956:	291d      	cmp	r1, #29
   26958:	d82c      	bhi.n	269b4 <__sflush_r+0xb8>
   2695a:	4a2a      	ldr	r2, [pc, #168]	; (26a04 <__sflush_r+0x108>)
   2695c:	40ca      	lsrs	r2, r1
   2695e:	07d6      	lsls	r6, r2, #31
   26960:	d528      	bpl.n	269b4 <__sflush_r+0xb8>
   26962:	2200      	movs	r2, #0
   26964:	6062      	str	r2, [r4, #4]
   26966:	04d9      	lsls	r1, r3, #19
   26968:	6922      	ldr	r2, [r4, #16]
   2696a:	6022      	str	r2, [r4, #0]
   2696c:	d504      	bpl.n	26978 <__sflush_r+0x7c>
   2696e:	1c42      	adds	r2, r0, #1
   26970:	d101      	bne.n	26976 <__sflush_r+0x7a>
   26972:	682b      	ldr	r3, [r5, #0]
   26974:	b903      	cbnz	r3, 26978 <__sflush_r+0x7c>
   26976:	6560      	str	r0, [r4, #84]	; 0x54
   26978:	6b61      	ldr	r1, [r4, #52]	; 0x34
   2697a:	602f      	str	r7, [r5, #0]
   2697c:	2900      	cmp	r1, #0
   2697e:	d0ca      	beq.n	26916 <__sflush_r+0x1a>
   26980:	f104 0344 	add.w	r3, r4, #68	; 0x44
   26984:	4299      	cmp	r1, r3
   26986:	d002      	beq.n	2698e <__sflush_r+0x92>
   26988:	4628      	mov	r0, r5
   2698a:	f7ff f80d 	bl	259a8 <_free_r>
   2698e:	2000      	movs	r0, #0
   26990:	6360      	str	r0, [r4, #52]	; 0x34
   26992:	e7c1      	b.n	26918 <__sflush_r+0x1c>
   26994:	6a21      	ldr	r1, [r4, #32]
   26996:	2301      	movs	r3, #1
   26998:	4628      	mov	r0, r5
   2699a:	47b0      	blx	r6
   2699c:	1c41      	adds	r1, r0, #1
   2699e:	d1c7      	bne.n	26930 <__sflush_r+0x34>
   269a0:	682b      	ldr	r3, [r5, #0]
   269a2:	2b00      	cmp	r3, #0
   269a4:	d0c4      	beq.n	26930 <__sflush_r+0x34>
   269a6:	2b1d      	cmp	r3, #29
   269a8:	d001      	beq.n	269ae <__sflush_r+0xb2>
   269aa:	2b16      	cmp	r3, #22
   269ac:	d101      	bne.n	269b2 <__sflush_r+0xb6>
   269ae:	602f      	str	r7, [r5, #0]
   269b0:	e7b1      	b.n	26916 <__sflush_r+0x1a>
   269b2:	89a3      	ldrh	r3, [r4, #12]
   269b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   269b8:	81a3      	strh	r3, [r4, #12]
   269ba:	e7ad      	b.n	26918 <__sflush_r+0x1c>
   269bc:	690f      	ldr	r7, [r1, #16]
   269be:	2f00      	cmp	r7, #0
   269c0:	d0a9      	beq.n	26916 <__sflush_r+0x1a>
   269c2:	0793      	lsls	r3, r2, #30
   269c4:	680e      	ldr	r6, [r1, #0]
   269c6:	bf08      	it	eq
   269c8:	694b      	ldreq	r3, [r1, #20]
   269ca:	600f      	str	r7, [r1, #0]
   269cc:	bf18      	it	ne
   269ce:	2300      	movne	r3, #0
   269d0:	eba6 0807 	sub.w	r8, r6, r7
   269d4:	608b      	str	r3, [r1, #8]
   269d6:	f1b8 0f00 	cmp.w	r8, #0
   269da:	dd9c      	ble.n	26916 <__sflush_r+0x1a>
   269dc:	4643      	mov	r3, r8
   269de:	463a      	mov	r2, r7
   269e0:	6a21      	ldr	r1, [r4, #32]
   269e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   269e4:	4628      	mov	r0, r5
   269e6:	47b0      	blx	r6
   269e8:	2800      	cmp	r0, #0
   269ea:	dc06      	bgt.n	269fa <__sflush_r+0xfe>
   269ec:	89a3      	ldrh	r3, [r4, #12]
   269ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   269f2:	81a3      	strh	r3, [r4, #12]
   269f4:	f04f 30ff 	mov.w	r0, #4294967295
   269f8:	e78e      	b.n	26918 <__sflush_r+0x1c>
   269fa:	4407      	add	r7, r0
   269fc:	eba8 0800 	sub.w	r8, r8, r0
   26a00:	e7e9      	b.n	269d6 <__sflush_r+0xda>
   26a02:	bf00      	nop
   26a04:	20400001 	.word	0x20400001

00026a08 <_fflush_r>:
   26a08:	b538      	push	{r3, r4, r5, lr}
   26a0a:	690b      	ldr	r3, [r1, #16]
   26a0c:	4605      	mov	r5, r0
   26a0e:	460c      	mov	r4, r1
   26a10:	b913      	cbnz	r3, 26a18 <_fflush_r+0x10>
   26a12:	2500      	movs	r5, #0
   26a14:	4628      	mov	r0, r5
   26a16:	bd38      	pop	{r3, r4, r5, pc}
   26a18:	b118      	cbz	r0, 26a22 <_fflush_r+0x1a>
   26a1a:	6983      	ldr	r3, [r0, #24]
   26a1c:	b90b      	cbnz	r3, 26a22 <_fflush_r+0x1a>
   26a1e:	f7ff fc87 	bl	26330 <__sinit>
   26a22:	4b14      	ldr	r3, [pc, #80]	; (26a74 <_fflush_r+0x6c>)
   26a24:	429c      	cmp	r4, r3
   26a26:	d11b      	bne.n	26a60 <_fflush_r+0x58>
   26a28:	686c      	ldr	r4, [r5, #4]
   26a2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   26a2e:	2b00      	cmp	r3, #0
   26a30:	d0ef      	beq.n	26a12 <_fflush_r+0xa>
   26a32:	6e62      	ldr	r2, [r4, #100]	; 0x64
   26a34:	07d0      	lsls	r0, r2, #31
   26a36:	d404      	bmi.n	26a42 <_fflush_r+0x3a>
   26a38:	0599      	lsls	r1, r3, #22
   26a3a:	d402      	bmi.n	26a42 <_fflush_r+0x3a>
   26a3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   26a3e:	f007 f80f 	bl	2da60 <__retarget_lock_acquire_recursive>
   26a42:	4628      	mov	r0, r5
   26a44:	4621      	mov	r1, r4
   26a46:	f7ff ff59 	bl	268fc <__sflush_r>
   26a4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   26a4c:	07da      	lsls	r2, r3, #31
   26a4e:	4605      	mov	r5, r0
   26a50:	d4e0      	bmi.n	26a14 <_fflush_r+0xc>
   26a52:	89a3      	ldrh	r3, [r4, #12]
   26a54:	059b      	lsls	r3, r3, #22
   26a56:	d4dd      	bmi.n	26a14 <_fflush_r+0xc>
   26a58:	6da0      	ldr	r0, [r4, #88]	; 0x58
   26a5a:	f007 f802 	bl	2da62 <__retarget_lock_release_recursive>
   26a5e:	e7d9      	b.n	26a14 <_fflush_r+0xc>
   26a60:	4b05      	ldr	r3, [pc, #20]	; (26a78 <_fflush_r+0x70>)
   26a62:	429c      	cmp	r4, r3
   26a64:	d101      	bne.n	26a6a <_fflush_r+0x62>
   26a66:	68ac      	ldr	r4, [r5, #8]
   26a68:	e7df      	b.n	26a2a <_fflush_r+0x22>
   26a6a:	4b04      	ldr	r3, [pc, #16]	; (26a7c <_fflush_r+0x74>)
   26a6c:	429c      	cmp	r4, r3
   26a6e:	bf08      	it	eq
   26a70:	68ec      	ldreq	r4, [r5, #12]
   26a72:	e7da      	b.n	26a2a <_fflush_r+0x22>
   26a74:	0002f678 	.word	0x0002f678
   26a78:	0002f698 	.word	0x0002f698
   26a7c:	0002f658 	.word	0x0002f658

00026a80 <_lseek_r>:
   26a80:	b538      	push	{r3, r4, r5, lr}
   26a82:	4c07      	ldr	r4, [pc, #28]	; (26aa0 <_lseek_r+0x20>)
   26a84:	4605      	mov	r5, r0
   26a86:	4608      	mov	r0, r1
   26a88:	4611      	mov	r1, r2
   26a8a:	2200      	movs	r2, #0
   26a8c:	6022      	str	r2, [r4, #0]
   26a8e:	461a      	mov	r2, r3
   26a90:	f002 f8dc 	bl	28c4c <_lseek>
   26a94:	1c43      	adds	r3, r0, #1
   26a96:	d102      	bne.n	26a9e <_lseek_r+0x1e>
   26a98:	6823      	ldr	r3, [r4, #0]
   26a9a:	b103      	cbz	r3, 26a9e <_lseek_r+0x1e>
   26a9c:	602b      	str	r3, [r5, #0]
   26a9e:	bd38      	pop	{r3, r4, r5, pc}
   26aa0:	20004890 	.word	0x20004890

00026aa4 <__smakebuf_r>:
   26aa4:	898b      	ldrh	r3, [r1, #12]
   26aa6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   26aa8:	079d      	lsls	r5, r3, #30
   26aaa:	4606      	mov	r6, r0
   26aac:	460c      	mov	r4, r1
   26aae:	d507      	bpl.n	26ac0 <__smakebuf_r+0x1c>
   26ab0:	f104 0347 	add.w	r3, r4, #71	; 0x47
   26ab4:	6023      	str	r3, [r4, #0]
   26ab6:	6123      	str	r3, [r4, #16]
   26ab8:	2301      	movs	r3, #1
   26aba:	6163      	str	r3, [r4, #20]
   26abc:	b002      	add	sp, #8
   26abe:	bd70      	pop	{r4, r5, r6, pc}
   26ac0:	ab01      	add	r3, sp, #4
   26ac2:	466a      	mov	r2, sp
   26ac4:	f007 facd 	bl	2e062 <__swhatbuf_r>
   26ac8:	9900      	ldr	r1, [sp, #0]
   26aca:	4605      	mov	r5, r0
   26acc:	4630      	mov	r0, r6
   26ace:	f7fe ffb9 	bl	25a44 <_malloc_r>
   26ad2:	b948      	cbnz	r0, 26ae8 <__smakebuf_r+0x44>
   26ad4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   26ad8:	059a      	lsls	r2, r3, #22
   26ada:	d4ef      	bmi.n	26abc <__smakebuf_r+0x18>
   26adc:	f023 0303 	bic.w	r3, r3, #3
   26ae0:	f043 0302 	orr.w	r3, r3, #2
   26ae4:	81a3      	strh	r3, [r4, #12]
   26ae6:	e7e3      	b.n	26ab0 <__smakebuf_r+0xc>
   26ae8:	4b0d      	ldr	r3, [pc, #52]	; (26b20 <__smakebuf_r+0x7c>)
   26aea:	62b3      	str	r3, [r6, #40]	; 0x28
   26aec:	89a3      	ldrh	r3, [r4, #12]
   26aee:	6020      	str	r0, [r4, #0]
   26af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   26af4:	81a3      	strh	r3, [r4, #12]
   26af6:	9b00      	ldr	r3, [sp, #0]
   26af8:	6163      	str	r3, [r4, #20]
   26afa:	9b01      	ldr	r3, [sp, #4]
   26afc:	6120      	str	r0, [r4, #16]
   26afe:	b15b      	cbz	r3, 26b18 <__smakebuf_r+0x74>
   26b00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   26b04:	4630      	mov	r0, r6
   26b06:	f000 f831 	bl	26b6c <_isatty_r>
   26b0a:	b128      	cbz	r0, 26b18 <__smakebuf_r+0x74>
   26b0c:	89a3      	ldrh	r3, [r4, #12]
   26b0e:	f023 0303 	bic.w	r3, r3, #3
   26b12:	f043 0301 	orr.w	r3, r3, #1
   26b16:	81a3      	strh	r3, [r4, #12]
   26b18:	89a3      	ldrh	r3, [r4, #12]
   26b1a:	431d      	orrs	r5, r3
   26b1c:	81a5      	strh	r5, [r4, #12]
   26b1e:	e7cd      	b.n	26abc <__smakebuf_r+0x18>
   26b20:	000262f5 	.word	0x000262f5

00026b24 <_read_r>:
   26b24:	b538      	push	{r3, r4, r5, lr}
   26b26:	4c07      	ldr	r4, [pc, #28]	; (26b44 <_read_r+0x20>)
   26b28:	4605      	mov	r5, r0
   26b2a:	4608      	mov	r0, r1
   26b2c:	4611      	mov	r1, r2
   26b2e:	2200      	movs	r2, #0
   26b30:	6022      	str	r2, [r4, #0]
   26b32:	461a      	mov	r2, r3
   26b34:	f002 f87f 	bl	28c36 <_read>
   26b38:	1c43      	adds	r3, r0, #1
   26b3a:	d102      	bne.n	26b42 <_read_r+0x1e>
   26b3c:	6823      	ldr	r3, [r4, #0]
   26b3e:	b103      	cbz	r3, 26b42 <_read_r+0x1e>
   26b40:	602b      	str	r3, [r5, #0]
   26b42:	bd38      	pop	{r3, r4, r5, pc}
   26b44:	20004890 	.word	0x20004890

00026b48 <_fstat_r>:
   26b48:	b538      	push	{r3, r4, r5, lr}
   26b4a:	4c07      	ldr	r4, [pc, #28]	; (26b68 <_fstat_r+0x20>)
   26b4c:	2300      	movs	r3, #0
   26b4e:	4605      	mov	r5, r0
   26b50:	4608      	mov	r0, r1
   26b52:	4611      	mov	r1, r2
   26b54:	6023      	str	r3, [r4, #0]
   26b56:	f002 f880 	bl	28c5a <_fstat>
   26b5a:	1c43      	adds	r3, r0, #1
   26b5c:	d102      	bne.n	26b64 <_fstat_r+0x1c>
   26b5e:	6823      	ldr	r3, [r4, #0]
   26b60:	b103      	cbz	r3, 26b64 <_fstat_r+0x1c>
   26b62:	602b      	str	r3, [r5, #0]
   26b64:	bd38      	pop	{r3, r4, r5, pc}
   26b66:	bf00      	nop
   26b68:	20004890 	.word	0x20004890

00026b6c <_isatty_r>:
   26b6c:	b538      	push	{r3, r4, r5, lr}
   26b6e:	4c06      	ldr	r4, [pc, #24]	; (26b88 <_isatty_r+0x1c>)
   26b70:	2300      	movs	r3, #0
   26b72:	4605      	mov	r5, r0
   26b74:	4608      	mov	r0, r1
   26b76:	6023      	str	r3, [r4, #0]
   26b78:	f002 f86a 	bl	28c50 <_isatty>
   26b7c:	1c43      	adds	r3, r0, #1
   26b7e:	d102      	bne.n	26b86 <_isatty_r+0x1a>
   26b80:	6823      	ldr	r3, [r4, #0]
   26b82:	b103      	cbz	r3, 26b86 <_isatty_r+0x1a>
   26b84:	602b      	str	r3, [r5, #0]
   26b86:	bd38      	pop	{r3, r4, r5, pc}
   26b88:	20004890 	.word	0x20004890

00026b8c <prov_reset>:
	bt_mesh_prov_enable(BT_MESH_PROV_ADV | BT_MESH_PROV_GATT);
   26b8c:	2003      	movs	r0, #3
   26b8e:	f7ef bd77 	b.w	16680 <bt_mesh_prov_enable>

00026b92 <sensirion_i2c_init>:
}
   26b92:	4770      	bx	lr

00026b94 <sensirion_sleep_usec>:
 *
 * Despite the unit, a <10 millisecond precision is sufficient.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_sleep_usec(uint32_t useconds) {
   26b94:	b508      	push	{r3, lr}
    int32_t remaining = useconds;
    while (remaining > 0) {
   26b96:	2800      	cmp	r0, #0
   26b98:	dc00      	bgt.n	26b9c <sensirion_sleep_usec+0x8>
        remaining = k_usleep(remaining);
    }
}
   26b9a:	bd08      	pop	{r3, pc}
	return z_impl_k_usleep(us);
   26b9c:	f7fc fe6c 	bl	23878 <z_impl_k_usleep>
   26ba0:	e7f9      	b.n	26b96 <sensirion_sleep_usec+0x2>

00026ba2 <sensirion_common_generate_crc>:
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
   26ba2:	4401      	add	r1, r0
    uint8_t crc = CRC8_INIT;
   26ba4:	23ff      	movs	r3, #255	; 0xff
    for (current_byte = 0; current_byte < count; ++current_byte) {
   26ba6:	4281      	cmp	r1, r0
   26ba8:	d101      	bne.n	26bae <sensirion_common_generate_crc+0xc>
            else
                crc = (crc << 1);
        }
    }
    return crc;
}
   26baa:	4618      	mov	r0, r3
   26bac:	4770      	bx	lr
        crc ^= (data[current_byte]);
   26bae:	f810 2b01 	ldrb.w	r2, [r0], #1
   26bb2:	4053      	eors	r3, r2
   26bb4:	2208      	movs	r2, #8
            if (crc & 0x80)
   26bb6:	f013 0f80 	tst.w	r3, #128	; 0x80
   26bba:	f102 32ff 	add.w	r2, r2, #4294967295
   26bbe:	ea4f 0343 	mov.w	r3, r3, lsl #1
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
   26bc2:	bf18      	it	ne
   26bc4:	f083 0331 	eorne.w	r3, r3, #49	; 0x31
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
   26bc8:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
                crc = (crc << 1);
   26bcc:	b2db      	uxtb	r3, r3
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
   26bce:	d1f2      	bne.n	26bb6 <sensirion_common_generate_crc+0x14>
   26bd0:	e7e9      	b.n	26ba6 <sensirion_common_generate_crc+0x4>

00026bd2 <sensirion_common_check_crc>:

int8_t sensirion_common_check_crc(const uint8_t* data, uint16_t count,
                                  uint8_t checksum) {
   26bd2:	b510      	push	{r4, lr}
   26bd4:	4614      	mov	r4, r2
    if (sensirion_common_generate_crc(data, count) != checksum)
   26bd6:	f7ff ffe4 	bl	26ba2 <sensirion_common_generate_crc>
        return STATUS_FAIL;
    return NO_ERROR;
}
   26bda:	1b00      	subs	r0, r0, r4
   26bdc:	bf18      	it	ne
   26bde:	f04f 30ff 	movne.w	r0, #4294967295
   26be2:	bd10      	pop	{r4, pc}

00026be4 <sensirion_fill_cmd_send_buf>:
    const uint8_t data = 0x06;
    return sensirion_i2c_write(0, &data, (uint16_t)sizeof(data));
}

uint16_t sensirion_fill_cmd_send_buf(uint8_t* buf, uint16_t cmd,
                                     const uint16_t* args, uint8_t num_args) {
   26be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26be6:	461c      	mov	r4, r3
    uint8_t crc;
    uint8_t i;
    uint16_t idx = 0;

    buf[idx++] = (uint8_t)((cmd & 0xFF00) >> 8);
   26be8:	0a0b      	lsrs	r3, r1, #8
   26bea:	7003      	strb	r3, [r0, #0]
    buf[idx++] = (uint8_t)((cmd & 0x00FF) >> 0);
   26bec:	7041      	strb	r1, [r0, #1]

    for (i = 0; i < num_args; ++i) {
   26bee:	4615      	mov	r5, r2
   26bf0:	3002      	adds	r0, #2
   26bf2:	eb02 0744 	add.w	r7, r2, r4, lsl #1
   26bf6:	42bd      	cmp	r5, r7
   26bf8:	f100 0603 	add.w	r6, r0, #3
   26bfc:	d103      	bne.n	26c06 <sensirion_fill_cmd_send_buf+0x22>

        crc = sensirion_common_generate_crc((uint8_t*)&buf[idx - 2],
                                            SENSIRION_WORD_SIZE);
        buf[idx++] = crc;
    }
    return idx;
   26bfe:	eb04 0444 	add.w	r4, r4, r4, lsl #1
}
   26c02:	1ca0      	adds	r0, r4, #2
   26c04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        buf[idx++] = (uint8_t)((args[i] & 0xFF00) >> 8);
   26c06:	882b      	ldrh	r3, [r5, #0]
   26c08:	0a1b      	lsrs	r3, r3, #8
   26c0a:	f806 3c03 	strb.w	r3, [r6, #-3]
        buf[idx++] = (uint8_t)((args[i] & 0x00FF) >> 0);
   26c0e:	f835 3b02 	ldrh.w	r3, [r5], #2
   26c12:	f806 3c02 	strb.w	r3, [r6, #-2]
        crc = sensirion_common_generate_crc((uint8_t*)&buf[idx - 2],
   26c16:	2102      	movs	r1, #2
   26c18:	f7ff ffc3 	bl	26ba2 <sensirion_common_generate_crc>
        buf[idx++] = crc;
   26c1c:	f806 0c01 	strb.w	r0, [r6, #-1]
   26c20:	4630      	mov	r0, r6
   26c22:	e7e8      	b.n	26bf6 <sensirion_fill_cmd_send_buf+0x12>

00026c24 <sensirion_i2c_read_words_as_bytes>:

int16_t sensirion_i2c_read_words_as_bytes(uint8_t address, uint8_t* data,
                                          uint16_t num_words) {
   26c24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    int16_t ret;
    uint16_t i, j;
    uint16_t size = num_words * (SENSIRION_WORD_SIZE + CRC8_LEN);
   26c28:	eb02 0242 	add.w	r2, r2, r2, lsl #1
                                          uint16_t num_words) {
   26c2c:	b091      	sub	sp, #68	; 0x44
    uint16_t size = num_words * (SENSIRION_WORD_SIZE + CRC8_LEN);
   26c2e:	b297      	uxth	r7, r2
                                          uint16_t num_words) {
   26c30:	4688      	mov	r8, r1
    uint16_t word_buf[SENSIRION_MAX_BUFFER_WORDS];
    uint8_t* const buf8 = (uint8_t*)word_buf;

    ret = sensirion_i2c_read(address, buf8, size);
   26c32:	463a      	mov	r2, r7
   26c34:	4669      	mov	r1, sp
   26c36:	f7dd fbb5 	bl	43a4 <sensirion_i2c_read>
   26c3a:	b206      	sxth	r6, r0
    if (ret != NO_ERROR)
   26c3c:	b91e      	cbnz	r6, 26c46 <sensirion_i2c_read_words_as_bytes+0x22>
        return ret;

    /* check the CRC for each word */
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
   26c3e:	4635      	mov	r5, r6
   26c40:	4634      	mov	r4, r6
   26c42:	42bc      	cmp	r4, r7
   26c44:	d303      	bcc.n	26c4e <sensirion_i2c_read_words_as_bytes+0x2a>
        data[j++] = buf8[i];
        data[j++] = buf8[i + 1];
    }

    return NO_ERROR;
}
   26c46:	4630      	mov	r0, r6
   26c48:	b011      	add	sp, #68	; 0x44
   26c4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
   26c4e:	ab10      	add	r3, sp, #64	; 0x40
   26c50:	eb03 0904 	add.w	r9, r3, r4
   26c54:	2102      	movs	r1, #2
   26c56:	f819 2c3e 	ldrb.w	r2, [r9, #-62]
   26c5a:	eb0d 0004 	add.w	r0, sp, r4
   26c5e:	f7ff ffb8 	bl	26bd2 <sensirion_common_check_crc>
   26c62:	b200      	sxth	r0, r0
        if (ret != NO_ERROR)
   26c64:	b970      	cbnz	r0, 26c84 <sensirion_i2c_read_words_as_bytes+0x60>
        data[j++] = buf8[i];
   26c66:	1c6b      	adds	r3, r5, #1
   26c68:	f81d 2004 	ldrb.w	r2, [sp, r4]
   26c6c:	f808 2005 	strb.w	r2, [r8, r5]
   26c70:	b29b      	uxth	r3, r3
        data[j++] = buf8[i + 1];
   26c72:	3502      	adds	r5, #2
   26c74:	f819 2c3f 	ldrb.w	r2, [r9, #-63]
   26c78:	f808 2003 	strb.w	r2, [r8, r3]
   26c7c:	3403      	adds	r4, #3
   26c7e:	b2ad      	uxth	r5, r5
   26c80:	b2a4      	uxth	r4, r4
   26c82:	e7de      	b.n	26c42 <sensirion_i2c_read_words_as_bytes+0x1e>
        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
   26c84:	4606      	mov	r6, r0
   26c86:	e7de      	b.n	26c46 <sensirion_i2c_read_words_as_bytes+0x22>

00026c88 <sensirion_i2c_read_words>:

int16_t sensirion_i2c_read_words(uint8_t address, uint16_t* data_words,
                                 uint16_t num_words) {
   26c88:	b570      	push	{r4, r5, r6, lr}
   26c8a:	460c      	mov	r4, r1
   26c8c:	4615      	mov	r5, r2
    int16_t ret;
    uint8_t i;
    const uint8_t* word_bytes;

    ret = sensirion_i2c_read_words_as_bytes(address, (uint8_t*)data_words,
   26c8e:	f7ff ffc9 	bl	26c24 <sensirion_i2c_read_words_as_bytes>
                                            num_words);
    if (ret != NO_ERROR)
   26c92:	b920      	cbnz	r0, 26c9e <sensirion_i2c_read_words+0x16>
   26c94:	4603      	mov	r3, r0
   26c96:	1c59      	adds	r1, r3, #1
        return ret;

    for (i = 0; i < num_words; ++i) {
   26c98:	b2db      	uxtb	r3, r3
   26c9a:	42ab      	cmp	r3, r5
   26c9c:	d300      	bcc.n	26ca0 <sensirion_i2c_read_words+0x18>
        word_bytes = (uint8_t*)&data_words[i];
        data_words[i] = ((uint16_t)word_bytes[0] << 8) | word_bytes[1];
    }

    return NO_ERROR;
}
   26c9e:	bd70      	pop	{r4, r5, r6, pc}
        word_bytes = (uint8_t*)&data_words[i];
   26ca0:	eb04 0243 	add.w	r2, r4, r3, lsl #1
        data_words[i] = ((uint16_t)word_bytes[0] << 8) | word_bytes[1];
   26ca4:	f814 6013 	ldrb.w	r6, [r4, r3, lsl #1]
   26ca8:	7852      	ldrb	r2, [r2, #1]
   26caa:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
   26cae:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
   26cb2:	460b      	mov	r3, r1
   26cb4:	e7ef      	b.n	26c96 <sensirion_i2c_read_words+0xe>

00026cb6 <sensirion_i2c_write_cmd>:

int16_t sensirion_i2c_write_cmd(uint8_t address, uint16_t command) {
   26cb6:	b513      	push	{r0, r1, r4, lr}
    uint8_t buf[SENSIRION_COMMAND_SIZE];

    sensirion_fill_cmd_send_buf(buf, command, NULL, 0);
   26cb8:	2300      	movs	r3, #0
   26cba:	461a      	mov	r2, r3
int16_t sensirion_i2c_write_cmd(uint8_t address, uint16_t command) {
   26cbc:	4604      	mov	r4, r0
    sensirion_fill_cmd_send_buf(buf, command, NULL, 0);
   26cbe:	a801      	add	r0, sp, #4
   26cc0:	f7ff ff90 	bl	26be4 <sensirion_fill_cmd_send_buf>
    return sensirion_i2c_write(address, buf, SENSIRION_COMMAND_SIZE);
   26cc4:	2202      	movs	r2, #2
   26cc6:	a901      	add	r1, sp, #4
   26cc8:	4620      	mov	r0, r4
   26cca:	f7dd fb7f 	bl	43cc <sensirion_i2c_write>
}
   26cce:	b002      	add	sp, #8
   26cd0:	bd10      	pop	{r4, pc}

00026cd2 <sensirion_i2c_write_cmd_with_args>:

int16_t sensirion_i2c_write_cmd_with_args(uint8_t address, uint16_t command,
                                          const uint16_t* data_words,
                                          uint16_t num_words) {
   26cd2:	b510      	push	{r4, lr}
   26cd4:	b088      	sub	sp, #32
   26cd6:	4604      	mov	r4, r0
    uint8_t buf[SENSIRION_MAX_BUFFER_WORDS];
    uint16_t buf_size;

    buf_size = sensirion_fill_cmd_send_buf(buf, command, data_words, num_words);
   26cd8:	b2db      	uxtb	r3, r3
   26cda:	4668      	mov	r0, sp
   26cdc:	f7ff ff82 	bl	26be4 <sensirion_fill_cmd_send_buf>
    return sensirion_i2c_write(address, buf, buf_size);
   26ce0:	4669      	mov	r1, sp
   26ce2:	4602      	mov	r2, r0
   26ce4:	4620      	mov	r0, r4
   26ce6:	f7dd fb71 	bl	43cc <sensirion_i2c_write>
}
   26cea:	b008      	add	sp, #32
   26cec:	bd10      	pop	{r4, pc}

00026cee <svm_measure_iaq_blocking_read>:
const char* svm_get_driver_version() {
    return SGP_DRV_VERSION_STR;
}

int16_t svm_measure_iaq_blocking_read(uint16_t* tvoc_ppb, uint16_t* co2_eq_ppm,
                                      int32_t* temperature, int32_t* humidity) {
   26cee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26cf0:	4604      	mov	r4, r0
   26cf2:	460d      	mov	r5, r1
    int16_t err;

    err = shtc1_measure_blocking_read(temperature, humidity);
   26cf4:	4610      	mov	r0, r2
   26cf6:	4619      	mov	r1, r3
                                      int32_t* temperature, int32_t* humidity) {
   26cf8:	4616      	mov	r6, r2
   26cfa:	461f      	mov	r7, r3
    err = shtc1_measure_blocking_read(temperature, humidity);
   26cfc:	f000 f88b 	bl	26e16 <shtc1_measure_blocking_read>
    if (err != STATUS_OK)
   26d00:	b9e8      	cbnz	r0, 26d3e <svm_measure_iaq_blocking_read+0x50>
        sensirion_calc_absolute_humidity(*temperature, *humidity);
   26d02:	6839      	ldr	r1, [r7, #0]
   26d04:	6830      	ldr	r0, [r6, #0]
   26d06:	f7dd fb7d 	bl	4404 <sensirion_calc_absolute_humidity>
    if (absolute_humidity == 0)
   26d0a:	2800      	cmp	r0, #0
    return sgp30_set_absolute_humidity(absolute_humidity);
   26d0c:	bf08      	it	eq
   26d0e:	2001      	moveq	r0, #1
   26d10:	f000 f83c 	bl	26d8c <sgp30_set_absolute_humidity>
        return err;

    err = svm_set_humidity(temperature, humidity);
    if (err != STATUS_OK)
   26d14:	b998      	cbnz	r0, 26d3e <svm_measure_iaq_blocking_read+0x50>
    *temperature = ((*temperature * 8225) >> 13) - 500;
   26d16:	6833      	ldr	r3, [r6, #0]
   26d18:	f242 0121 	movw	r1, #8225	; 0x2021
   26d1c:	4359      	muls	r1, r3
   26d1e:	1349      	asrs	r1, r1, #13
   26d20:	f5a1 71fa 	sub.w	r1, r1, #500	; 0x1f4
   26d24:	6031      	str	r1, [r6, #0]
    *humidity = (*humidity * 8397) >> 13;
   26d26:	683a      	ldr	r2, [r7, #0]
   26d28:	f242 03cd 	movw	r3, #8397	; 0x20cd
   26d2c:	4353      	muls	r3, r2
   26d2e:	135b      	asrs	r3, r3, #13
   26d30:	603b      	str	r3, [r7, #0]
        return err;

    svm_compensate_rht(temperature, humidity);

    err = sgp30_measure_iaq_blocking_read(tvoc_ppb, co2_eq_ppm);
   26d32:	4629      	mov	r1, r5
   26d34:	4620      	mov	r0, r4
    if (err != STATUS_OK)
        return err;

    return STATUS_OK;
}
   26d36:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    err = sgp30_measure_iaq_blocking_read(tvoc_ppb, co2_eq_ppm);
   26d3a:	f000 b816 	b.w	26d6a <sgp30_measure_iaq_blocking_read>
}
   26d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00026d40 <sgp30_measure_iaq>:

    return STATUS_FAIL;
}

int16_t sgp30_measure_iaq() {
    return sensirion_i2c_write_cmd(SGP30_I2C_ADDRESS, SGP30_CMD_IAQ_MEASURE);
   26d40:	f242 0108 	movw	r1, #8200	; 0x2008
   26d44:	2058      	movs	r0, #88	; 0x58
   26d46:	f7ff bfb6 	b.w	26cb6 <sensirion_i2c_write_cmd>

00026d4a <sgp30_read_iaq>:
}

int16_t sgp30_read_iaq(uint16_t* tvoc_ppb, uint16_t* co2_eq_ppm) {
   26d4a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   26d4c:	4605      	mov	r5, r0
   26d4e:	460c      	mov	r4, r1
    int16_t ret;
    uint16_t words[SGP30_CMD_IAQ_MEASURE_WORDS];

    ret = sensirion_i2c_read_words(SGP30_I2C_ADDRESS, words,
   26d50:	2202      	movs	r2, #2
   26d52:	a901      	add	r1, sp, #4
   26d54:	2058      	movs	r0, #88	; 0x58
   26d56:	f7ff ff97 	bl	26c88 <sensirion_i2c_read_words>
                                   SGP30_CMD_IAQ_MEASURE_WORDS);

    *tvoc_ppb = words[1];
   26d5a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   26d5e:	802b      	strh	r3, [r5, #0]
    *co2_eq_ppm = words[0];
   26d60:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   26d64:	8023      	strh	r3, [r4, #0]

    return ret;
}
   26d66:	b003      	add	sp, #12
   26d68:	bd30      	pop	{r4, r5, pc}

00026d6a <sgp30_measure_iaq_blocking_read>:

int16_t sgp30_measure_iaq_blocking_read(uint16_t* tvoc_ppb,
                                        uint16_t* co2_eq_ppm) {
   26d6a:	b538      	push	{r3, r4, r5, lr}
   26d6c:	4604      	mov	r4, r0
   26d6e:	460d      	mov	r5, r1
    int16_t ret;

    ret = sgp30_measure_iaq();
   26d70:	f7ff ffe6 	bl	26d40 <sgp30_measure_iaq>
    if (ret != STATUS_OK)
   26d74:	b948      	cbnz	r0, 26d8a <sgp30_measure_iaq_blocking_read+0x20>
        return ret;

    sensirion_sleep_usec(SGP30_CMD_IAQ_MEASURE_DURATION_US);
   26d76:	f642 60e0 	movw	r0, #12000	; 0x2ee0
   26d7a:	f7ff ff0b 	bl	26b94 <sensirion_sleep_usec>

    return sgp30_read_iaq(tvoc_ppb, co2_eq_ppm);
   26d7e:	4629      	mov	r1, r5
   26d80:	4620      	mov	r0, r4
}
   26d82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return sgp30_read_iaq(tvoc_ppb, co2_eq_ppm);
   26d86:	f7ff bfe0 	b.w	26d4a <sgp30_read_iaq>
}
   26d8a:	bd38      	pop	{r3, r4, r5, pc}

00026d8c <sgp30_set_absolute_humidity>:

int16_t sgp30_set_absolute_humidity(uint32_t absolute_humidity) {
    int16_t ret;
    uint16_t ah_scaled;

    if (absolute_humidity > 256000)
   26d8c:	f5b0 3f7a 	cmp.w	r0, #256000	; 0x3e800
int16_t sgp30_set_absolute_humidity(uint32_t absolute_humidity) {
   26d90:	b513      	push	{r0, r1, r4, lr}
    if (absolute_humidity > 256000)
   26d92:	d815      	bhi.n	26dc0 <sgp30_set_absolute_humidity+0x34>
        return STATUS_FAIL;

    /* ah_scaled = (absolute_humidity / 1000) * 256 */
    ah_scaled = (uint16_t)((absolute_humidity * 16777) >> 16);
   26d94:	f244 1389 	movw	r3, #16777	; 0x4189
   26d98:	4343      	muls	r3, r0
   26d9a:	0c1b      	lsrs	r3, r3, #16
   26d9c:	f8ad 3006 	strh.w	r3, [sp, #6]

    ret = sensirion_i2c_write_cmd_with_args(
   26da0:	f10d 0206 	add.w	r2, sp, #6
   26da4:	2301      	movs	r3, #1
   26da6:	f242 0161 	movw	r1, #8289	; 0x2061
   26daa:	2058      	movs	r0, #88	; 0x58
   26dac:	f7ff ff91 	bl	26cd2 <sensirion_i2c_write_cmd_with_args>
   26db0:	4604      	mov	r4, r0
        SGP30_I2C_ADDRESS, SGP30_CMD_SET_ABSOLUTE_HUMIDITY, &ah_scaled,
        SENSIRION_NUM_WORDS(ah_scaled));

    sensirion_sleep_usec(SGP30_CMD_SET_ABSOLUTE_HUMIDITY_DURATION_US);
   26db2:	f242 7010 	movw	r0, #10000	; 0x2710
   26db6:	f7ff feed 	bl	26b94 <sensirion_sleep_usec>

    return ret;
}
   26dba:	4620      	mov	r0, r4
   26dbc:	b002      	add	sp, #8
   26dbe:	bd10      	pop	{r4, pc}
        return STATUS_FAIL;
   26dc0:	f04f 34ff 	mov.w	r4, #4294967295
   26dc4:	e7f9      	b.n	26dba <sgp30_set_absolute_humidity+0x2e>

00026dc6 <sgp30_iaq_init>:
                 (((uint64_t)words[2]) << 0);

    return STATUS_OK;
}

int16_t sgp30_iaq_init() {
   26dc6:	b510      	push	{r4, lr}
    int16_t ret =
        sensirion_i2c_write_cmd(SGP30_I2C_ADDRESS, SGP30_CMD_IAQ_INIT);
   26dc8:	f242 0103 	movw	r1, #8195	; 0x2003
   26dcc:	2058      	movs	r0, #88	; 0x58
   26dce:	f7ff ff72 	bl	26cb6 <sensirion_i2c_write_cmd>
   26dd2:	4604      	mov	r4, r0
    sensirion_sleep_usec(SGP30_CMD_IAQ_INIT_DURATION_US);
   26dd4:	f242 7010 	movw	r0, #10000	; 0x2710
   26dd8:	f7ff fedc 	bl	26b94 <sensirion_sleep_usec>
    return ret;
}
   26ddc:	4620      	mov	r0, r4
   26dde:	bd10      	pop	{r4, pc}

00026de0 <shtc1_read>:
}

int16_t shtc1_read(int32_t *temperature, int32_t *humidity) {
   26de0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   26de2:	4605      	mov	r5, r0
   26de4:	460c      	mov	r4, r1
    uint16_t words[2];
    int16_t ret = sensirion_i2c_read_words(SHTC1_ADDRESS, words,
   26de6:	2202      	movs	r2, #2
   26de8:	a901      	add	r1, sp, #4
   26dea:	2070      	movs	r0, #112	; 0x70
   26dec:	f7ff ff4c 	bl	26c88 <sensirion_i2c_read_words>
     * formulas for conversion of the sensor signals, optimized for fixed point
     * algebra:
     * Temperature = 175 * S_T / 2^16 - 45
     * Relative Humidity = 100 * S_RH / 2^16
     */
    *temperature = ((21875 * (int32_t)words[0]) >> 13) - 45000;
   26df0:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   26df4:	f245 5373 	movw	r3, #21875	; 0x5573
   26df8:	4353      	muls	r3, r2
   26dfa:	135b      	asrs	r3, r3, #13
   26dfc:	f5a3 432f 	sub.w	r3, r3, #44800	; 0xaf00
   26e00:	3bc8      	subs	r3, #200	; 0xc8
    *humidity = ((12500 * (int32_t)words[1]) >> 13);
   26e02:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    *temperature = ((21875 * (int32_t)words[0]) >> 13) - 45000;
   26e06:	602b      	str	r3, [r5, #0]
    *humidity = ((12500 * (int32_t)words[1]) >> 13);
   26e08:	f243 03d4 	movw	r3, #12500	; 0x30d4
   26e0c:	4353      	muls	r3, r2
   26e0e:	135b      	asrs	r3, r3, #13
   26e10:	6023      	str	r3, [r4, #0]

    return ret;
}
   26e12:	b003      	add	sp, #12
   26e14:	bd30      	pop	{r4, r5, pc}

00026e16 <shtc1_measure_blocking_read>:
int16_t shtc1_measure_blocking_read(int32_t *temperature, int32_t *humidity) {
   26e16:	b538      	push	{r3, r4, r5, lr}
   26e18:	4604      	mov	r4, r0
   26e1a:	460d      	mov	r5, r1
    ret = shtc1_measure();
   26e1c:	f7dd faea 	bl	43f4 <shtc1_measure>
    if (ret)
   26e20:	b948      	cbnz	r0, 26e36 <shtc1_measure_blocking_read+0x20>
    sensirion_sleep_usec(SHTC1_MEASUREMENT_DURATION_USEC);
   26e22:	f44f 5061 	mov.w	r0, #14400	; 0x3840
   26e26:	f7ff feb5 	bl	26b94 <sensirion_sleep_usec>
    return shtc1_read(temperature, humidity);
   26e2a:	4629      	mov	r1, r5
   26e2c:	4620      	mov	r0, r4
}
   26e2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return shtc1_read(temperature, humidity);
   26e32:	f7ff bfd5 	b.w	26de0 <shtc1_read>
}
   26e36:	bd38      	pop	{r3, r4, r5, pc}

00026e38 <u8_to_dec>:
 */

#include <sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   26e38:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t divisor = 100;
	uint8_t num_digits = 0;
   26e3a:	2300      	movs	r3, #0
	uint8_t digit;

	while (buflen > 0 && divisor > 0) {
   26e3c:	2504      	movs	r5, #4
	uint8_t divisor = 100;
   26e3e:	2464      	movs	r4, #100	; 0x64
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   26e40:	f04f 0c0a 	mov.w	ip, #10
	while (buflen > 0 && divisor > 0) {
   26e44:	b111      	cbz	r1, 26e4c <u8_to_dec+0x14>
   26e46:	3d01      	subs	r5, #1
   26e48:	d102      	bne.n	26e50 <u8_to_dec+0x18>
	}

	if (buflen) {
		*buf = '\0';
   26e4a:	7005      	strb	r5, [r0, #0]
	}

	return num_digits;
}
   26e4c:	4618      	mov	r0, r3
   26e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   26e50:	42a2      	cmp	r2, r4
		digit = value / divisor;
   26e52:	fbb2 f7f4 	udiv	r7, r2, r4
   26e56:	b2fe      	uxtb	r6, r7
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   26e58:	d202      	bcs.n	26e60 <u8_to_dec+0x28>
   26e5a:	2c01      	cmp	r4, #1
   26e5c:	d000      	beq.n	26e60 <u8_to_dec+0x28>
   26e5e:	b133      	cbz	r3, 26e6e <u8_to_dec+0x36>
			*buf = (char)digit + '0';
   26e60:	3630      	adds	r6, #48	; 0x30
			buflen--;
   26e62:	3901      	subs	r1, #1
			num_digits++;
   26e64:	3301      	adds	r3, #1
			*buf = (char)digit + '0';
   26e66:	f800 6b01 	strb.w	r6, [r0], #1
			buflen--;
   26e6a:	b2c9      	uxtb	r1, r1
			num_digits++;
   26e6c:	b2db      	uxtb	r3, r3
		value -= digit * divisor;
   26e6e:	fb04 2217 	mls	r2, r4, r7, r2
   26e72:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   26e74:	fbb4 f4fc 	udiv	r4, r4, ip
   26e78:	e7e4      	b.n	26e44 <u8_to_dec+0xc>

00026e7a <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   26e7a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   26e7e:	b2db      	uxtb	r3, r3
   26e80:	2b09      	cmp	r3, #9
   26e82:	d802      	bhi.n	26e8a <char2hex+0x10>
		*x = c - '0';
   26e84:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   26e86:	2000      	movs	r0, #0
   26e88:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   26e8a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   26e8e:	2b05      	cmp	r3, #5
   26e90:	d802      	bhi.n	26e98 <char2hex+0x1e>
		*x = c - 'a' + 10;
   26e92:	3857      	subs	r0, #87	; 0x57
   26e94:	7008      	strb	r0, [r1, #0]
   26e96:	e7f6      	b.n	26e86 <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   26e98:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   26e9c:	2b05      	cmp	r3, #5
   26e9e:	d801      	bhi.n	26ea4 <char2hex+0x2a>
		*x = c - 'A' + 10;
   26ea0:	3837      	subs	r0, #55	; 0x37
   26ea2:	e7f7      	b.n	26e94 <char2hex+0x1a>
		return -EINVAL;
   26ea4:	f06f 0015 	mvn.w	r0, #21
}
   26ea8:	4770      	bx	lr

00026eaa <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   26eaa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   26eac:	084e      	lsrs	r6, r1, #1
   26eae:	f001 0101 	and.w	r1, r1, #1
   26eb2:	1875      	adds	r5, r6, r1
   26eb4:	429d      	cmp	r5, r3
{
   26eb6:	4604      	mov	r4, r0
	if (buflen < hexlen / 2 + hexlen % 2) {
   26eb8:	d903      	bls.n	26ec2 <hex2bin+0x18>
		return 0;
   26eba:	2500      	movs	r5, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   26ebc:	4628      	mov	r0, r5
   26ebe:	b003      	add	sp, #12
   26ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   26ec2:	b159      	cbz	r1, 26edc <hex2bin+0x32>
		if (char2hex(hex[0], &dec) < 0) {
   26ec4:	f10d 0107 	add.w	r1, sp, #7
   26ec8:	7800      	ldrb	r0, [r0, #0]
   26eca:	f7ff ffd6 	bl	26e7a <char2hex>
   26ece:	2800      	cmp	r0, #0
   26ed0:	dbf3      	blt.n	26eba <hex2bin+0x10>
		buf[0] = dec;
   26ed2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   26ed6:	f802 3b01 	strb.w	r3, [r2], #1
		hex++;
   26eda:	3401      	adds	r4, #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   26edc:	3a01      	subs	r2, #1
   26ede:	eb04 0646 	add.w	r6, r4, r6, lsl #1
   26ee2:	42b4      	cmp	r4, r6
   26ee4:	d0ea      	beq.n	26ebc <hex2bin+0x12>
		if (char2hex(hex[2 * i], &dec) < 0) {
   26ee6:	f10d 0107 	add.w	r1, sp, #7
   26eea:	7820      	ldrb	r0, [r4, #0]
   26eec:	f7ff ffc5 	bl	26e7a <char2hex>
   26ef0:	2800      	cmp	r0, #0
   26ef2:	dbe2      	blt.n	26eba <hex2bin+0x10>
		buf[i] = dec << 4;
   26ef4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   26ef8:	011b      	lsls	r3, r3, #4
   26efa:	7053      	strb	r3, [r2, #1]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   26efc:	7860      	ldrb	r0, [r4, #1]
   26efe:	f10d 0107 	add.w	r1, sp, #7
   26f02:	f7ff ffba 	bl	26e7a <char2hex>
   26f06:	2800      	cmp	r0, #0
   26f08:	f104 0402 	add.w	r4, r4, #2
   26f0c:	dbd5      	blt.n	26eba <hex2bin+0x10>
		buf[i] += dec;
   26f0e:	7853      	ldrb	r3, [r2, #1]
   26f10:	f89d 1007 	ldrb.w	r1, [sp, #7]
   26f14:	440b      	add	r3, r1
   26f16:	f802 3f01 	strb.w	r3, [r2, #1]!
   26f1a:	e7e2      	b.n	26ee2 <hex2bin+0x38>

00026f1c <sys_notify_validate>:
	if (notify == NULL) {
   26f1c:	b140      	cbz	r0, 26f30 <sys_notify_validate+0x14>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   26f1e:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   26f20:	f003 0303 	and.w	r3, r3, #3
	switch (sys_notify_get_method(notify)) {
   26f24:	2b02      	cmp	r3, #2
   26f26:	d006      	beq.n	26f36 <sys_notify_validate+0x1a>
   26f28:	2b03      	cmp	r3, #3
   26f2a:	d004      	beq.n	26f36 <sys_notify_validate+0x1a>
   26f2c:	2b01      	cmp	r3, #1
   26f2e:	d005      	beq.n	26f3c <sys_notify_validate+0x20>
		return -EINVAL;
   26f30:	f06f 0015 	mvn.w	r0, #21
}
   26f34:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   26f36:	6803      	ldr	r3, [r0, #0]
   26f38:	2b00      	cmp	r3, #0
   26f3a:	d0f9      	beq.n	26f30 <sys_notify_validate+0x14>
		notify->result = 0;
   26f3c:	2300      	movs	r3, #0
   26f3e:	6083      	str	r3, [r0, #8]
   26f40:	4618      	mov	r0, r3
   26f42:	4770      	bx	lr

00026f44 <arch_printk_char_out>:
}
   26f44:	2000      	movs	r0, #0
   26f46:	4770      	bx	lr

00026f48 <str_out>:
{
   26f48:	b530      	push	{r4, r5, lr}
   26f4a:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   26f4c:	680c      	ldr	r4, [r1, #0]
   26f4e:	1c55      	adds	r5, r2, #1
   26f50:	b114      	cbz	r4, 26f58 <str_out+0x10>
   26f52:	684b      	ldr	r3, [r1, #4]
   26f54:	4293      	cmp	r3, r2
   26f56:	dc01      	bgt.n	26f5c <str_out+0x14>
		ctx->count++;
   26f58:	608d      	str	r5, [r1, #8]
}
   26f5a:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   26f5c:	3b01      	subs	r3, #1
   26f5e:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   26f60:	bf08      	it	eq
   26f62:	2200      	moveq	r2, #0
   26f64:	608d      	str	r5, [r1, #8]
   26f66:	bf0c      	ite	eq
   26f68:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   26f6a:	54a0      	strbne	r0, [r4, r2]
   26f6c:	e7f5      	b.n	26f5a <str_out+0x12>

00026f6e <printk>:
{
   26f6e:	b40f      	push	{r0, r1, r2, r3}
   26f70:	b507      	push	{r0, r1, r2, lr}
   26f72:	a904      	add	r1, sp, #16
   26f74:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   26f78:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   26f7a:	f7dd fac1 	bl	4500 <vprintk>
}
   26f7e:	b003      	add	sp, #12
   26f80:	f85d eb04 	ldr.w	lr, [sp], #4
   26f84:	b004      	add	sp, #16
   26f86:	4770      	bx	lr

00026f88 <snprintk>:
{
   26f88:	b40c      	push	{r2, r3}
   26f8a:	b507      	push	{r0, r1, r2, lr}
   26f8c:	ab04      	add	r3, sp, #16
   26f8e:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   26f92:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   26f94:	f7dd fac2 	bl	451c <vsnprintk>
}
   26f98:	b003      	add	sp, #12
   26f9a:	f85d eb04 	ldr.w	lr, [sp], #4
   26f9e:	b002      	add	sp, #8
   26fa0:	4770      	bx	lr

00026fa2 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   26fa2:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   26fa4:	f013 0307 	ands.w	r3, r3, #7
   26fa8:	d105      	bne.n	26fb6 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   26faa:	6803      	ldr	r3, [r0, #0]
   26fac:	2b00      	cmp	r3, #0
		evt = EVT_START;
   26fae:	bf0c      	ite	eq
   26fb0:	2000      	moveq	r0, #0
   26fb2:	2003      	movne	r0, #3
   26fb4:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   26fb6:	2b02      	cmp	r3, #2
   26fb8:	d105      	bne.n	26fc6 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   26fba:	8bc3      	ldrh	r3, [r0, #30]
   26fbc:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   26fbe:	bf14      	ite	ne
   26fc0:	2000      	movne	r0, #0
   26fc2:	2004      	moveq	r0, #4
   26fc4:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   26fc6:	2b01      	cmp	r3, #1
   26fc8:	d105      	bne.n	26fd6 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   26fca:	6803      	ldr	r3, [r0, #0]
   26fcc:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   26fce:	bf0c      	ite	eq
   26fd0:	2000      	moveq	r0, #0
   26fd2:	2005      	movne	r0, #5
   26fd4:	4770      	bx	lr
	int evt = EVT_NOP;
   26fd6:	2000      	movs	r0, #0
}
   26fd8:	4770      	bx	lr

00026fda <notify_one>:
{
   26fda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26fde:	460d      	mov	r5, r1
   26fe0:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   26fe2:	4619      	mov	r1, r3
   26fe4:	1d28      	adds	r0, r5, #4
{
   26fe6:	4690      	mov	r8, r2
   26fe8:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   26fea:	f7dd fa55 	bl	4498 <sys_notify_finalize>
	if (cb) {
   26fee:	4604      	mov	r4, r0
   26ff0:	b138      	cbz	r0, 27002 <notify_one+0x28>
		cb(mgr, cli, state, res);
   26ff2:	4633      	mov	r3, r6
   26ff4:	4642      	mov	r2, r8
   26ff6:	4629      	mov	r1, r5
   26ff8:	4638      	mov	r0, r7
   26ffa:	46a4      	mov	ip, r4
}
   26ffc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   27000:	4760      	bx	ip
}
   27002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00027006 <validate_args>:
{
   27006:	b510      	push	{r4, lr}
   27008:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   2700a:	b140      	cbz	r0, 2701e <validate_args+0x18>
   2700c:	b139      	cbz	r1, 2701e <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   2700e:	1d08      	adds	r0, r1, #4
   27010:	f7ff ff84 	bl	26f1c <sys_notify_validate>
	if ((rv == 0)
   27014:	b928      	cbnz	r0, 27022 <validate_args+0x1c>
	    && ((cli->notify.flags
   27016:	68a3      	ldr	r3, [r4, #8]
   27018:	f033 0303 	bics.w	r3, r3, #3
   2701c:	d001      	beq.n	27022 <validate_args+0x1c>
		rv = -EINVAL;
   2701e:	f06f 0015 	mvn.w	r0, #21
}
   27022:	bd10      	pop	{r4, pc}

00027024 <onoff_manager_init>:
{
   27024:	b538      	push	{r3, r4, r5, lr}
   27026:	460c      	mov	r4, r1
	if ((mgr == NULL)
   27028:	4605      	mov	r5, r0
   2702a:	b158      	cbz	r0, 27044 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   2702c:	b151      	cbz	r1, 27044 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   2702e:	680b      	ldr	r3, [r1, #0]
   27030:	b143      	cbz	r3, 27044 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   27032:	684b      	ldr	r3, [r1, #4]
   27034:	b133      	cbz	r3, 27044 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   27036:	2220      	movs	r2, #32
   27038:	2100      	movs	r1, #0
   2703a:	f006 fade 	bl	2d5fa <memset>
   2703e:	612c      	str	r4, [r5, #16]
	return 0;
   27040:	2000      	movs	r0, #0
}
   27042:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   27044:	f06f 0015 	mvn.w	r0, #21
   27048:	e7fb      	b.n	27042 <onoff_manager_init+0x1e>

0002704a <sys_sem_give>:

	return 0;
}

int sys_sem_give(struct sys_sem *sem)
{
   2704a:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   2704c:	f7fc fc36 	bl	238bc <z_impl_k_sem_give>
	k_sem_give(&sem->kernel_sem);

	return 0;
}
   27050:	2000      	movs	r0, #0
   27052:	bd08      	pop	{r3, pc}

00027054 <sys_sem_take>:

int sys_sem_take(struct sys_sem *sem, k_timeout_t timeout)
{
   27054:	b508      	push	{r3, lr}
	return z_impl_k_sem_take(sem, timeout);
   27056:	f7fc fc6d 	bl	23934 <z_impl_k_sem_take>
	int ret_value = 0;

	ret_value = k_sem_take(&sem->kernel_sem, timeout);
	if (ret_value == -EAGAIN || ret_value == -EBUSY) {
   2705a:	f110 0f0b 	cmn.w	r0, #11
   2705e:	d005      	beq.n	2706c <sys_sem_take+0x18>
   27060:	f110 0f10 	cmn.w	r0, #16
		ret_value = -ETIMEDOUT;
   27064:	bf08      	it	eq
   27066:	f06f 0073 	mvneq.w	r0, #115	; 0x73
	}

	return ret_value;
}
   2706a:	bd08      	pop	{r3, pc}
		ret_value = -ETIMEDOUT;
   2706c:	f06f 0073 	mvn.w	r0, #115	; 0x73
	return ret_value;
   27070:	e7fb      	b.n	2706a <sys_sem_take+0x16>

00027072 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   27072:	4604      	mov	r4, r0
   27074:	b508      	push	{r3, lr}
   27076:	4608      	mov	r0, r1
   27078:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   2707a:	461a      	mov	r2, r3
   2707c:	47a0      	blx	r4
	return z_impl_k_current_get();
   2707e:	f7fc fc17 	bl	238b0 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   27082:	f7e0 f9b3 	bl	73ec <z_impl_k_thread_abort>

00027086 <chunk_field>:
	if (big_heap(h)) {
   27086:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   27088:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   2708c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   27090:	bf2c      	ite	cs
   27092:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
		return ((uint16_t *)cmem)[f];
   27096:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
}
   2709a:	4770      	bx	lr

0002709c <chunk_set>:
	void *cmem = &buf[c];
   2709c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   270a0:	6880      	ldr	r0, [r0, #8]
   270a2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		((uint32_t *)cmem)[f] = val;
   270a6:	bf2c      	ite	cs
   270a8:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
		((uint16_t *)cmem)[f] = val;
   270ac:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
}
   270b0:	4770      	bx	lr

000270b2 <chunk_used>:
{
   270b2:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   270b4:	2201      	movs	r2, #1
   270b6:	f7ff ffe6 	bl	27086 <chunk_field>
}
   270ba:	f000 0001 	and.w	r0, r0, #1
   270be:	bd08      	pop	{r3, pc}

000270c0 <chunk_size>:
{
   270c0:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   270c2:	2201      	movs	r2, #1
   270c4:	f7ff ffdf 	bl	27086 <chunk_field>
}
   270c8:	0840      	lsrs	r0, r0, #1
   270ca:	bd08      	pop	{r3, pc}

000270cc <set_chunk_used>:
	if (big_heap(h)) {
   270cc:	6883      	ldr	r3, [r0, #8]
   270ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
   270d2:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   270d6:	d308      	bcc.n	270ea <set_chunk_used+0x1e>
		if (used) {
   270d8:	684b      	ldr	r3, [r1, #4]
   270da:	b11a      	cbz	r2, 270e4 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   270dc:	f043 0301 	orr.w	r3, r3, #1
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   270e0:	604b      	str	r3, [r1, #4]
   270e2:	4770      	bx	lr
   270e4:	f023 0301 	bic.w	r3, r3, #1
   270e8:	e7fa      	b.n	270e0 <set_chunk_used+0x14>
		if (used) {
   270ea:	884b      	ldrh	r3, [r1, #2]
   270ec:	b11a      	cbz	r2, 270f6 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   270ee:	f043 0301 	orr.w	r3, r3, #1
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   270f2:	804b      	strh	r3, [r1, #2]
}
   270f4:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   270f6:	f023 0301 	bic.w	r3, r3, #1
   270fa:	e7fa      	b.n	270f2 <set_chunk_used+0x26>

000270fc <set_chunk_size>:
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   270fc:	0053      	lsls	r3, r2, #1
   270fe:	2201      	movs	r2, #1
   27100:	f7ff bfcc 	b.w	2709c <chunk_set>

00027104 <bytes_to_chunksz>:
	return big_heap(h) ? 8 : 4;
   27104:	6883      	ldr	r3, [r0, #8]
   27106:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2710a:	bf2c      	ite	cs
   2710c:	2008      	movcs	r0, #8
   2710e:	2004      	movcc	r0, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   27110:	3107      	adds	r1, #7
   27112:	4408      	add	r0, r1
}
   27114:	08c0      	lsrs	r0, r0, #3
   27116:	4770      	bx	lr

00027118 <bucket_idx>:
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
   27118:	460a      	mov	r2, r1
   2711a:	b508      	push	{r3, lr}
	return bytes_to_chunksz(h, 1);
   2711c:	2101      	movs	r1, #1
   2711e:	f7ff fff1 	bl	27104 <bytes_to_chunksz>
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   27122:	3201      	adds	r2, #1
   27124:	1a10      	subs	r0, r2, r0
	return 31 - __builtin_clz(usable_sz);
   27126:	fab0 f080 	clz	r0, r0
}
   2712a:	f1c0 001f 	rsb	r0, r0, #31
   2712e:	bd08      	pop	{r3, pc}

00027130 <merge_chunks>:
{
   27130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27134:	4616      	mov	r6, r2
   27136:	4604      	mov	r4, r0
   27138:	460f      	mov	r7, r1
	size_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   2713a:	f7ff ffc1 	bl	270c0 <chunk_size>
   2713e:	4631      	mov	r1, r6
   27140:	4605      	mov	r5, r0
   27142:	4620      	mov	r0, r4
   27144:	f7ff ffbc 	bl	270c0 <chunk_size>
   27148:	4405      	add	r5, r0
	set_chunk_size(h, lc, newsz);
   2714a:	462a      	mov	r2, r5
   2714c:	4639      	mov	r1, r7
   2714e:	4620      	mov	r0, r4
   27150:	f7ff ffd4 	bl	270fc <set_chunk_size>
	return c + chunk_size(h, c);
   27154:	4631      	mov	r1, r6
   27156:	4620      	mov	r0, r4
   27158:	f7ff ffb2 	bl	270c0 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   2715c:	462b      	mov	r3, r5
   2715e:	1831      	adds	r1, r6, r0
   27160:	2200      	movs	r2, #0
   27162:	4620      	mov	r0, r4
}
   27164:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   27168:	f7ff bf98 	b.w	2709c <chunk_set>

0002716c <split_chunks>:
{
   2716c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27170:	4614      	mov	r4, r2
   27172:	4605      	mov	r5, r0
   27174:	460f      	mov	r7, r1
	size_t sz0 = chunk_size(h, lc);
   27176:	f7ff ffa3 	bl	270c0 <chunk_size>
	size_t lsz = rc - lc;
   2717a:	eba4 0807 	sub.w	r8, r4, r7
	size_t rsz = sz0 - lsz;
   2717e:	1b3e      	subs	r6, r7, r4
   27180:	4406      	add	r6, r0
	set_chunk_size(h, lc, lsz);
   27182:	4642      	mov	r2, r8
   27184:	4639      	mov	r1, r7
   27186:	4628      	mov	r0, r5
   27188:	f7ff ffb8 	bl	270fc <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   2718c:	4632      	mov	r2, r6
   2718e:	4621      	mov	r1, r4
   27190:	4628      	mov	r0, r5
   27192:	f7ff ffb3 	bl	270fc <set_chunk_size>
   27196:	4643      	mov	r3, r8
   27198:	2200      	movs	r2, #0
   2719a:	4621      	mov	r1, r4
   2719c:	4628      	mov	r0, r5
   2719e:	f7ff ff7d 	bl	2709c <chunk_set>
	return c + chunk_size(h, c);
   271a2:	4621      	mov	r1, r4
   271a4:	4628      	mov	r0, r5
   271a6:	f7ff ff8b 	bl	270c0 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   271aa:	4633      	mov	r3, r6
   271ac:	1821      	adds	r1, r4, r0
   271ae:	2200      	movs	r2, #0
   271b0:	4628      	mov	r0, r5
}
   271b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   271b6:	f7ff bf71 	b.w	2709c <chunk_set>

000271ba <free_list_remove_bidx>:
{
   271ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   271be:	4690      	mov	r8, r2
	return chunk_field(h, c, FREE_NEXT);
   271c0:	2203      	movs	r2, #3
   271c2:	460e      	mov	r6, r1
   271c4:	4604      	mov	r4, r0
   271c6:	f7ff ff5e 	bl	27086 <chunk_field>
	if (next_free_chunk(h, c) == c) {
   271ca:	4286      	cmp	r6, r0
   271cc:	4605      	mov	r5, r0
   271ce:	f108 0704 	add.w	r7, r8, #4
   271d2:	d10b      	bne.n	271ec <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   271d4:	2301      	movs	r3, #1
   271d6:	fa03 f208 	lsl.w	r2, r3, r8
   271da:	68e3      	ldr	r3, [r4, #12]
   271dc:	ea23 0302 	bic.w	r3, r3, r2
   271e0:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   271e2:	2300      	movs	r3, #0
   271e4:	f844 3027 	str.w	r3, [r4, r7, lsl #2]
}
   271e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   271ec:	4631      	mov	r1, r6
   271ee:	2202      	movs	r2, #2
   271f0:	4620      	mov	r0, r4
   271f2:	f7ff ff48 	bl	27086 <chunk_field>
	chunk_set(h, c, FREE_NEXT, next);
   271f6:	462b      	mov	r3, r5
	return chunk_field(h, c, FREE_PREV);
   271f8:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   271fa:	4601      	mov	r1, r0
		b->next = second;
   271fc:	f844 5027 	str.w	r5, [r4, r7, lsl #2]
   27200:	4620      	mov	r0, r4
   27202:	2203      	movs	r2, #3
   27204:	f7ff ff4a 	bl	2709c <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   27208:	4633      	mov	r3, r6
   2720a:	4629      	mov	r1, r5
   2720c:	4620      	mov	r0, r4
   2720e:	2202      	movs	r2, #2
}
   27210:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   27214:	f7ff bf42 	b.w	2709c <chunk_set>

00027218 <free_list_remove>:
{
   27218:	b538      	push	{r3, r4, r5, lr}
   2721a:	4604      	mov	r4, r0
   2721c:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   2721e:	f7ff ff4f 	bl	270c0 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   27222:	68a3      	ldr	r3, [r4, #8]
   27224:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   27228:	4601      	mov	r1, r0
   2722a:	d301      	bcc.n	27230 <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   2722c:	2801      	cmp	r0, #1
   2722e:	d009      	beq.n	27244 <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   27230:	4620      	mov	r0, r4
   27232:	f7ff ff71 	bl	27118 <bucket_idx>
		free_list_remove_bidx(h, c, bidx);
   27236:	4629      	mov	r1, r5
   27238:	4602      	mov	r2, r0
   2723a:	4620      	mov	r0, r4
}
   2723c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		free_list_remove_bidx(h, c, bidx);
   27240:	f7ff bfbb 	b.w	271ba <free_list_remove_bidx>
}
   27244:	bd38      	pop	{r3, r4, r5, pc}

00027246 <alloc_chunk>:
{
   27246:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2724a:	4604      	mov	r4, r0
   2724c:	468a      	mov	sl, r1
	int bi = bucket_idx(h, sz);
   2724e:	f7ff ff63 	bl	27118 <bucket_idx>
	if (bi > bucket_idx(h, h->len)) {
   27252:	68a1      	ldr	r1, [r4, #8]
	int bi = bucket_idx(h, sz);
   27254:	4606      	mov	r6, r0
	if (bi > bucket_idx(h, h->len)) {
   27256:	4620      	mov	r0, r4
   27258:	f7ff ff5e 	bl	27118 <bucket_idx>
   2725c:	42b0      	cmp	r0, r6
   2725e:	da03      	bge.n	27268 <alloc_chunk+0x22>
		return 0;
   27260:	2500      	movs	r5, #0
}
   27262:	4628      	mov	r0, r5
   27264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (b->next) {
   27268:	eb04 0786 	add.w	r7, r4, r6, lsl #2
   2726c:	f8d7 9010 	ldr.w	r9, [r7, #16]
   27270:	f1b9 0f00 	cmp.w	r9, #0
   27274:	d019      	beq.n	272aa <alloc_chunk+0x64>
   27276:	f04f 0803 	mov.w	r8, #3
			chunkid_t c = b->next;
   2727a:	693d      	ldr	r5, [r7, #16]
			if (chunk_size(h, c) >= sz) {
   2727c:	4620      	mov	r0, r4
   2727e:	4629      	mov	r1, r5
   27280:	f7ff ff1e 	bl	270c0 <chunk_size>
   27284:	4550      	cmp	r0, sl
   27286:	d305      	bcc.n	27294 <alloc_chunk+0x4e>
				free_list_remove_bidx(h, c, bi);
   27288:	4632      	mov	r2, r6
		free_list_remove_bidx(h, c, minbucket);
   2728a:	4629      	mov	r1, r5
   2728c:	4620      	mov	r0, r4
   2728e:	f7ff ff94 	bl	271ba <free_list_remove_bidx>
		return c;
   27292:	e7e6      	b.n	27262 <alloc_chunk+0x1c>
	return chunk_field(h, c, FREE_NEXT);
   27294:	2203      	movs	r2, #3
   27296:	4629      	mov	r1, r5
   27298:	4620      	mov	r0, r4
   2729a:	f7ff fef4 	bl	27086 <chunk_field>
		} while (--i && b->next != first);
   2729e:	f1b8 0801 	subs.w	r8, r8, #1
			b->next = next_free_chunk(h, c);
   272a2:	6138      	str	r0, [r7, #16]
		} while (--i && b->next != first);
   272a4:	d001      	beq.n	272aa <alloc_chunk+0x64>
   272a6:	4581      	cmp	r9, r0
   272a8:	d1e7      	bne.n	2727a <alloc_chunk+0x34>
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   272aa:	3601      	adds	r6, #1
   272ac:	f04f 32ff 	mov.w	r2, #4294967295
   272b0:	68e3      	ldr	r3, [r4, #12]
   272b2:	40b2      	lsls	r2, r6
	if ((bmask & h->avail_buckets) != 0U) {
   272b4:	401a      	ands	r2, r3
   272b6:	d0d3      	beq.n	27260 <alloc_chunk+0x1a>
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);
   272b8:	fa92 f2a2 	rbit	r2, r2
   272bc:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   272c0:	1d13      	adds	r3, r2, #4
   272c2:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
   272c6:	e7e0      	b.n	2728a <alloc_chunk+0x44>

000272c8 <free_list_add>:
{
   272c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   272cc:	4604      	mov	r4, r0
   272ce:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   272d0:	f7ff fef6 	bl	270c0 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   272d4:	68a3      	ldr	r3, [r4, #8]
   272d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   272da:	4601      	mov	r1, r0
   272dc:	d301      	bcc.n	272e2 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   272de:	2801      	cmp	r0, #1
   272e0:	d035      	beq.n	2734e <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   272e2:	4620      	mov	r0, r4
   272e4:	f7ff ff18 	bl	27118 <bucket_idx>
	if (b->next == 0U) {
   272e8:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   272ec:	6916      	ldr	r6, [r2, #16]
   272ee:	b99e      	cbnz	r6, 27318 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   272f0:	2301      	movs	r3, #1
   272f2:	fa03 f000 	lsl.w	r0, r3, r0
   272f6:	68e3      	ldr	r3, [r4, #12]
   272f8:	4303      	orrs	r3, r0
   272fa:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   272fc:	4629      	mov	r1, r5
		b->next = c;
   272fe:	6115      	str	r5, [r2, #16]
   27300:	462b      	mov	r3, r5
   27302:	2202      	movs	r2, #2
   27304:	4620      	mov	r0, r4
   27306:	f7ff fec9 	bl	2709c <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   2730a:	2203      	movs	r2, #3
   2730c:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   2730e:	4620      	mov	r0, r4
}
   27310:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   27314:	f7ff bec2 	b.w	2709c <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   27318:	2202      	movs	r2, #2
   2731a:	4631      	mov	r1, r6
   2731c:	4620      	mov	r0, r4
   2731e:	f7ff feb2 	bl	27086 <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
   27322:	2202      	movs	r2, #2
   27324:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
   27326:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   27328:	4629      	mov	r1, r5
   2732a:	4620      	mov	r0, r4
   2732c:	f7ff feb6 	bl	2709c <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   27330:	4633      	mov	r3, r6
   27332:	2203      	movs	r2, #3
   27334:	4629      	mov	r1, r5
   27336:	4620      	mov	r0, r4
   27338:	f7ff feb0 	bl	2709c <chunk_set>
   2733c:	2203      	movs	r2, #3
   2733e:	4639      	mov	r1, r7
   27340:	462b      	mov	r3, r5
   27342:	4620      	mov	r0, r4
   27344:	f7ff feaa 	bl	2709c <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   27348:	2202      	movs	r2, #2
   2734a:	4631      	mov	r1, r6
   2734c:	e7df      	b.n	2730e <free_list_add+0x46>
   2734e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00027352 <free_chunk>:
{
   27352:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27354:	460c      	mov	r4, r1
   27356:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   27358:	f7ff feb2 	bl	270c0 <chunk_size>
   2735c:	1826      	adds	r6, r4, r0
	if (!chunk_used(h, right_chunk(h, c))) {
   2735e:	4631      	mov	r1, r6
   27360:	4628      	mov	r0, r5
   27362:	f7ff fea6 	bl	270b2 <chunk_used>
   27366:	b960      	cbnz	r0, 27382 <free_chunk+0x30>
		free_list_remove(h, right_chunk(h, c));
   27368:	4631      	mov	r1, r6
   2736a:	4628      	mov	r0, r5
   2736c:	f7ff ff54 	bl	27218 <free_list_remove>
   27370:	4621      	mov	r1, r4
   27372:	4628      	mov	r0, r5
   27374:	f7ff fea4 	bl	270c0 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   27378:	4621      	mov	r1, r4
   2737a:	1822      	adds	r2, r4, r0
   2737c:	4628      	mov	r0, r5
   2737e:	f7ff fed7 	bl	27130 <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   27382:	2200      	movs	r2, #0
   27384:	4621      	mov	r1, r4
   27386:	4628      	mov	r0, r5
   27388:	f7ff fe7d 	bl	27086 <chunk_field>
   2738c:	1a27      	subs	r7, r4, r0
	if (!chunk_used(h, left_chunk(h, c))) {
   2738e:	4639      	mov	r1, r7
   27390:	4628      	mov	r0, r5
   27392:	f7ff fe8e 	bl	270b2 <chunk_used>
   27396:	4606      	mov	r6, r0
   27398:	b998      	cbnz	r0, 273c2 <free_chunk+0x70>
		free_list_remove(h, left_chunk(h, c));
   2739a:	4639      	mov	r1, r7
   2739c:	4628      	mov	r0, r5
   2739e:	f7ff ff3b 	bl	27218 <free_list_remove>
   273a2:	4621      	mov	r1, r4
   273a4:	4632      	mov	r2, r6
   273a6:	4628      	mov	r0, r5
   273a8:	f7ff fe6d 	bl	27086 <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   273ac:	4622      	mov	r2, r4
   273ae:	1a21      	subs	r1, r4, r0
   273b0:	4628      	mov	r0, r5
   273b2:	f7ff febd 	bl	27130 <merge_chunks>
   273b6:	4621      	mov	r1, r4
   273b8:	4632      	mov	r2, r6
   273ba:	4628      	mov	r0, r5
   273bc:	f7ff fe63 	bl	27086 <chunk_field>
   273c0:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   273c2:	4621      	mov	r1, r4
   273c4:	4628      	mov	r0, r5
}
   273c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   273ca:	f7ff bf7d 	b.w	272c8 <free_list_add>

000273ce <sys_heap_alloc>:
{
   273ce:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   273d0:	6804      	ldr	r4, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   273d2:	b909      	cbnz	r1, 273d8 <sys_heap_alloc+0xa>
		return NULL;
   273d4:	2000      	movs	r0, #0
}
   273d6:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   273d8:	68a3      	ldr	r3, [r4, #8]
   273da:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   273de:	d9f9      	bls.n	273d4 <sys_heap_alloc+0x6>
	size_t chunk_sz = bytes_to_chunksz(h, bytes);
   273e0:	4620      	mov	r0, r4
   273e2:	f7ff fe8f 	bl	27104 <bytes_to_chunksz>
	chunkid_t c = alloc_chunk(h, chunk_sz);
   273e6:	4601      	mov	r1, r0
	size_t chunk_sz = bytes_to_chunksz(h, bytes);
   273e8:	4606      	mov	r6, r0
	chunkid_t c = alloc_chunk(h, chunk_sz);
   273ea:	4620      	mov	r0, r4
   273ec:	f7ff ff2b 	bl	27246 <alloc_chunk>
	if (c == 0U) {
   273f0:	4605      	mov	r5, r0
   273f2:	2800      	cmp	r0, #0
   273f4:	d0ee      	beq.n	273d4 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   273f6:	4601      	mov	r1, r0
   273f8:	4620      	mov	r0, r4
   273fa:	f7ff fe61 	bl	270c0 <chunk_size>
   273fe:	42b0      	cmp	r0, r6
   27400:	d909      	bls.n	27416 <sys_heap_alloc+0x48>
		split_chunks(h, c, c + chunk_sz);
   27402:	442e      	add	r6, r5
   27404:	4629      	mov	r1, r5
   27406:	4620      	mov	r0, r4
   27408:	4632      	mov	r2, r6
   2740a:	f7ff feaf 	bl	2716c <split_chunks>
		free_list_add(h, c + chunk_sz);
   2740e:	4631      	mov	r1, r6
   27410:	4620      	mov	r0, r4
   27412:	f7ff ff59 	bl	272c8 <free_list_add>
	set_chunk_used(h, c, true);
   27416:	4620      	mov	r0, r4
   27418:	2201      	movs	r2, #1
   2741a:	4629      	mov	r1, r5
   2741c:	f7ff fe56 	bl	270cc <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   27420:	68a3      	ldr	r3, [r4, #8]
   27422:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   27426:	bf2c      	ite	cs
   27428:	2008      	movcs	r0, #8
   2742a:	2004      	movcc	r0, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   2742c:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
   27430:	4420      	add	r0, r4
	return chunk_mem(h, c);
   27432:	e7d0      	b.n	273d6 <sys_heap_alloc+0x8>

00027434 <outs>:
{
   27434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27438:	4607      	mov	r7, r0
   2743a:	4688      	mov	r8, r1
   2743c:	4615      	mov	r5, r2
   2743e:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   27440:	4614      	mov	r4, r2
   27442:	42b4      	cmp	r4, r6
   27444:	eba4 0005 	sub.w	r0, r4, r5
   27448:	d302      	bcc.n	27450 <outs+0x1c>
   2744a:	b93e      	cbnz	r6, 2745c <outs+0x28>
   2744c:	7823      	ldrb	r3, [r4, #0]
   2744e:	b12b      	cbz	r3, 2745c <outs+0x28>
		int rc = out((int)*sp++, ctx);
   27450:	4641      	mov	r1, r8
   27452:	f814 0b01 	ldrb.w	r0, [r4], #1
   27456:	47b8      	blx	r7
		if (rc < 0) {
   27458:	2800      	cmp	r0, #0
   2745a:	daf2      	bge.n	27442 <outs+0xe>
}
   2745c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00027460 <assert_post_action>:
	if (_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   27460:	4040      	eors	r0, r0
   27462:	f380 8811 	msr	BASEPRI, r0
   27466:	f04f 0004 	mov.w	r0, #4
   2746a:	df02      	svc	2
}
   2746c:	4770      	bx	lr

0002746e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   2746e:	4770      	bx	lr

00027470 <flash_write_protection_set>:
	return api->write_protection(dev, enable);
   27470:	6883      	ldr	r3, [r0, #8]
   27472:	68db      	ldr	r3, [r3, #12]
   27474:	4718      	bx	r3

00027476 <nvs_flash_rd>:
{
   27476:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   27478:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2747a:	8984      	ldrh	r4, [r0, #12]
	rc = flash_read(fs->flash_device, offset, data, len);
   2747c:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2747e:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   27480:	fa16 f181 	uxtah	r1, r6, r1
   27484:	fb05 1104 	mla	r1, r5, r4, r1
	return api->read(dev, offset, data, len);
   27488:	6884      	ldr	r4, [r0, #8]
   2748a:	6824      	ldr	r4, [r4, #0]
   2748c:	46a4      	mov	ip, r4
}
   2748e:	bc70      	pop	{r4, r5, r6}
   27490:	4760      	bx	ip

00027492 <nvs_flash_block_cmp>:
{
   27492:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   27496:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   27498:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2749a:	681d      	ldr	r5, [r3, #0]
   2749c:	426d      	negs	r5, r5
{
   2749e:	b089      	sub	sp, #36	; 0x24
   274a0:	4681      	mov	r9, r0
   274a2:	460f      	mov	r7, r1
   274a4:	4690      	mov	r8, r2
	block_size =
   274a6:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   274aa:	b91c      	cbnz	r4, 274b4 <nvs_flash_block_cmp+0x22>
	return 0;
   274ac:	4620      	mov	r0, r4
}
   274ae:	b009      	add	sp, #36	; 0x24
   274b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   274b4:	42ac      	cmp	r4, r5
   274b6:	4626      	mov	r6, r4
   274b8:	bf28      	it	cs
   274ba:	462e      	movcs	r6, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   274bc:	4633      	mov	r3, r6
   274be:	466a      	mov	r2, sp
   274c0:	4639      	mov	r1, r7
   274c2:	4648      	mov	r0, r9
   274c4:	f7ff ffd7 	bl	27476 <nvs_flash_rd>
		if (rc) {
   274c8:	2800      	cmp	r0, #0
   274ca:	d1f0      	bne.n	274ae <nvs_flash_block_cmp+0x1c>
		rc = memcmp(data8, buf, bytes_to_cmp);
   274cc:	4632      	mov	r2, r6
   274ce:	4669      	mov	r1, sp
   274d0:	4640      	mov	r0, r8
   274d2:	f006 f849 	bl	2d568 <memcmp>
		if (rc) {
   274d6:	b918      	cbnz	r0, 274e0 <nvs_flash_block_cmp+0x4e>
		len -= bytes_to_cmp;
   274d8:	1ba4      	subs	r4, r4, r6
		addr += bytes_to_cmp;
   274da:	4437      	add	r7, r6
		data8 += bytes_to_cmp;
   274dc:	44b0      	add	r8, r6
   274de:	e7e4      	b.n	274aa <nvs_flash_block_cmp+0x18>
			return 1;
   274e0:	2001      	movs	r0, #1
   274e2:	e7e4      	b.n	274ae <nvs_flash_block_cmp+0x1c>

000274e4 <nvs_flash_cmp_const>:
{
   274e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   274e8:	461d      	mov	r5, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   274ea:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   274ec:	681c      	ldr	r4, [r3, #0]
   274ee:	4264      	negs	r4, r4
{
   274f0:	b088      	sub	sp, #32
	block_size =
   274f2:	f004 0420 	and.w	r4, r4, #32
{
   274f6:	4680      	mov	r8, r0
   274f8:	460e      	mov	r6, r1
	(void)memset(cmp, value, block_size);
   274fa:	2320      	movs	r3, #32
{
   274fc:	4611      	mov	r1, r2
	(void)memset(cmp, value, block_size);
   274fe:	4668      	mov	r0, sp
   27500:	4622      	mov	r2, r4
   27502:	f006 f882 	bl	2d60a <__memset_chk>
	while (len) {
   27506:	b91d      	cbnz	r5, 27510 <nvs_flash_cmp_const+0x2c>
	return 0;
   27508:	4628      	mov	r0, r5
}
   2750a:	b008      	add	sp, #32
   2750c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   27510:	42a5      	cmp	r5, r4
   27512:	462f      	mov	r7, r5
   27514:	bf28      	it	cs
   27516:	4627      	movcs	r7, r4
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   27518:	463b      	mov	r3, r7
   2751a:	466a      	mov	r2, sp
   2751c:	4631      	mov	r1, r6
   2751e:	4640      	mov	r0, r8
   27520:	f7ff ffb7 	bl	27492 <nvs_flash_block_cmp>
		if (rc) {
   27524:	2800      	cmp	r0, #0
   27526:	d1f0      	bne.n	2750a <nvs_flash_cmp_const+0x26>
		len -= bytes_to_cmp;
   27528:	1bed      	subs	r5, r5, r7
		addr += bytes_to_cmp;
   2752a:	443e      	add	r6, r7
   2752c:	e7eb      	b.n	27506 <nvs_flash_cmp_const+0x22>

0002752e <nvs_ate_crc8_check>:
{
   2752e:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   27530:	4601      	mov	r1, r0
{
   27532:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   27534:	2207      	movs	r2, #7
   27536:	20ff      	movs	r0, #255	; 0xff
   27538:	f7dc ff98 	bl	446c <crc8_ccitt>
	if (crc8 == entry->crc8) {
   2753c:	79e3      	ldrb	r3, [r4, #7]
}
   2753e:	1a18      	subs	r0, r3, r0
   27540:	bf18      	it	ne
   27542:	2001      	movne	r0, #1
   27544:	bd10      	pop	{r4, pc}

00027546 <nvs_ate_crc8_update>:
{
   27546:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   27548:	4601      	mov	r1, r0
{
   2754a:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2754c:	2207      	movs	r2, #7
   2754e:	20ff      	movs	r0, #255	; 0xff
   27550:	f7dc ff8c 	bl	446c <crc8_ccitt>
	entry->crc8 = crc8;
   27554:	71e0      	strb	r0, [r4, #7]
}
   27556:	bd10      	pop	{r4, pc}

00027558 <nvs_al_size.isra.0>:
	if (write_block_size <= 1U) {
   27558:	7803      	ldrb	r3, [r0, #0]
   2755a:	2b01      	cmp	r3, #1
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   2755c:	bf81      	itttt	hi
   2755e:	18c9      	addhi	r1, r1, r3
   27560:	f101 31ff 	addhi.w	r1, r1, #4294967295
   27564:	425b      	neghi	r3, r3
   27566:	4019      	andhi	r1, r3
}
   27568:	4608      	mov	r0, r1
   2756a:	4770      	bx	lr

0002756c <nvs_sector_advance.isra.1>:
	*addr += (1 << ADDR_SECT_SHIFT);
   2756c:	680b      	ldr	r3, [r1, #0]
   2756e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   27572:	0c1a      	lsrs	r2, r3, #16
   27574:	4282      	cmp	r2, r0
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   27576:	bf08      	it	eq
   27578:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
   2757c:	600b      	str	r3, [r1, #0]
}
   2757e:	4770      	bx	lr

00027580 <nvs_flash_erase_sector>:
{
   27580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	rc = nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   27584:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   27586:	8983      	ldrh	r3, [r0, #12]
   27588:	7912      	ldrb	r2, [r2, #4]
	addr &= ADDR_SECT_MASK;
   2758a:	0c0d      	lsrs	r5, r1, #16
   2758c:	042d      	lsls	r5, r5, #16
	rc = nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   2758e:	4629      	mov	r1, r5
{
   27590:	4604      	mov	r4, r0
	rc = nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   27592:	f7ff ffa7 	bl	274e4 <nvs_flash_cmp_const>
	if (rc <= 0) {
   27596:	1e06      	subs	r6, r0, #0
   27598:	dd17      	ble.n	275ca <nvs_flash_erase_sector+0x4a>
	rc = flash_write_protection_set(fs->flash_device, false);
   2759a:	2100      	movs	r1, #0
   2759c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	offset = fs->offset;
   2759e:	6827      	ldr	r7, [r4, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   275a0:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	rc = flash_write_protection_set(fs->flash_device, false);
   275a4:	f7ff ff64 	bl	27470 <flash_write_protection_set>
	if (rc) {
   275a8:	4606      	mov	r6, r0
   275aa:	b970      	cbnz	r0, 275ca <nvs_flash_erase_sector+0x4a>
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   275ac:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   275ae:	89a2      	ldrh	r2, [r4, #12]
	return api->erase(dev, offset, size);
   275b0:	6883      	ldr	r3, [r0, #8]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   275b2:	0c29      	lsrs	r1, r5, #16
   275b4:	689b      	ldr	r3, [r3, #8]
   275b6:	fb08 7101 	mla	r1, r8, r1, r7
   275ba:	4798      	blx	r3
	if (rc) {
   275bc:	4606      	mov	r6, r0
   275be:	b920      	cbnz	r0, 275ca <nvs_flash_erase_sector+0x4a>
	(void) flash_write_protection_set(fs->flash_device, true);
   275c0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->write_protection(dev, enable);
   275c2:	6883      	ldr	r3, [r0, #8]
   275c4:	2101      	movs	r1, #1
   275c6:	68db      	ldr	r3, [r3, #12]
   275c8:	4798      	blx	r3
}
   275ca:	4630      	mov	r0, r6
   275cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000275d0 <nvs_prev_ate>:
{
   275d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   275d2:	4604      	mov	r4, r0
   275d4:	460d      	mov	r5, r1
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   275d6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   275d8:	2108      	movs	r1, #8
   275da:	f7ff ffbd 	bl	27558 <nvs_al_size.isra.0>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   275de:	2308      	movs	r3, #8
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   275e0:	4606      	mov	r6, r0
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   275e2:	6829      	ldr	r1, [r5, #0]
   275e4:	4620      	mov	r0, r4
   275e6:	f7ff ff46 	bl	27476 <nvs_flash_rd>
	if (rc) {
   275ea:	2800      	cmp	r0, #0
   275ec:	d13e      	bne.n	2766c <nvs_prev_ate+0x9c>
	*addr += ate_size;
   275ee:	6829      	ldr	r1, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   275f0:	89a3      	ldrh	r3, [r4, #12]
	*addr += ate_size;
   275f2:	4431      	add	r1, r6
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   275f4:	b28a      	uxth	r2, r1
   275f6:	1b9b      	subs	r3, r3, r6
   275f8:	429a      	cmp	r2, r3
	*addr += ate_size;
   275fa:	6029      	str	r1, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   275fc:	d136      	bne.n	2766c <nvs_prev_ate+0x9c>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   275fe:	0c0b      	lsrs	r3, r1, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   27600:	bf03      	ittte	eq
   27602:	89e3      	ldrheq	r3, [r4, #14]
   27604:	f103 33ff 	addeq.w	r3, r3, #4294967295
   27608:	eb01 4103 	addeq.w	r1, r1, r3, lsl #16
		*addr -= (1 << ADDR_SECT_SHIFT);
   2760c:	f5a1 3180 	subne.w	r1, r1, #65536	; 0x10000
   27610:	6029      	str	r1, [r5, #0]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   27612:	2308      	movs	r3, #8
   27614:	466a      	mov	r2, sp
   27616:	4620      	mov	r0, r4
   27618:	f7ff ff2d 	bl	27476 <nvs_flash_rd>
	if (rc) {
   2761c:	bb30      	cbnz	r0, 2766c <nvs_prev_ate+0x9c>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   2761e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   27620:	466a      	mov	r2, sp
   27622:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   27624:	4603      	mov	r3, r0
		if (data8[i] != value) {
   27626:	f812 7b01 	ldrb.w	r7, [r2], #1
   2762a:	42b9      	cmp	r1, r7
   2762c:	d115      	bne.n	2765a <nvs_prev_ate+0x8a>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   2762e:	3301      	adds	r3, #1
   27630:	2b08      	cmp	r3, #8
   27632:	d1f8      	bne.n	27626 <nvs_prev_ate+0x56>
		*addr = fs->ate_wra;
   27634:	6863      	ldr	r3, [r4, #4]
   27636:	e00e      	b.n	27656 <nvs_prev_ate+0x86>
		if (close_ate.offset < (fs->sector_size - ate_size) &&
   27638:	89a3      	ldrh	r3, [r4, #12]
   2763a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   2763e:	1b9b      	subs	r3, r3, r6
   27640:	429a      	cmp	r2, r3
   27642:	d20f      	bcs.n	27664 <nvs_prev_ate+0x94>
		    !(close_ate.offset % ate_size)) {
   27644:	fbb2 f3f6 	udiv	r3, r2, r6
   27648:	fb06 2613 	mls	r6, r6, r3, r2
		if (close_ate.offset < (fs->sector_size - ate_size) &&
   2764c:	b956      	cbnz	r6, 27664 <nvs_prev_ate+0x94>
			(*addr) &= ADDR_SECT_MASK;
   2764e:	682b      	ldr	r3, [r5, #0]
   27650:	0c1b      	lsrs	r3, r3, #16
   27652:	041b      	lsls	r3, r3, #16
			(*addr) += close_ate.offset;
   27654:	4413      	add	r3, r2
		*addr = fs->ate_wra;
   27656:	602b      	str	r3, [r5, #0]
		return 0;
   27658:	e008      	b.n	2766c <nvs_prev_ate+0x9c>
	if (!nvs_ate_crc8_check(&close_ate)) {
   2765a:	4668      	mov	r0, sp
   2765c:	f7ff ff67 	bl	2752e <nvs_ate_crc8_check>
   27660:	2800      	cmp	r0, #0
   27662:	d0e9      	beq.n	27638 <nvs_prev_ate+0x68>
	return nvs_recover_last_ate(fs, addr);
   27664:	4629      	mov	r1, r5
   27666:	4620      	mov	r0, r4
   27668:	f7dd ff36 	bl	54d8 <nvs_recover_last_ate>
}
   2766c:	b003      	add	sp, #12
   2766e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00027670 <nvs_flash_al_wrt.part.3>:
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   27670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   27674:	4607      	mov	r7, r0
   27676:	b088      	sub	sp, #32
   27678:	460d      	mov	r5, r1
	offset = fs->offset;
   2767a:	f8d0 a000 	ldr.w	sl, [r0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2767e:	8986      	ldrh	r6, [r0, #12]
	rc = flash_write_protection_set(fs->flash_device, false);
   27680:	6a80      	ldr	r0, [r0, #40]	; 0x28
   27682:	2100      	movs	r1, #0
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   27684:	4690      	mov	r8, r2
   27686:	461c      	mov	r4, r3
	rc = flash_write_protection_set(fs->flash_device, false);
   27688:	f7ff fef2 	bl	27470 <flash_write_protection_set>
	if (rc) {
   2768c:	2800      	cmp	r0, #0
   2768e:	d133      	bne.n	276f8 <nvs_flash_al_wrt.part.3+0x88>
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   27690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   27692:	ea4f 4915 	mov.w	r9, r5, lsr #16
	offset += addr & ADDR_OFFS_MASK;
   27696:	fa1a f585 	uxtah	r5, sl, r5
   2769a:	fb06 5909 	mla	r9, r6, r9, r5
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   2769e:	681d      	ldr	r5, [r3, #0]
   276a0:	426d      	negs	r5, r5
	if (blen > 0) {
   276a2:	4025      	ands	r5, r4
   276a4:	d00b      	beq.n	276be <nvs_flash_al_wrt.part.3+0x4e>
   276a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
	return api->write(dev, offset, data, len);
   276a8:	6883      	ldr	r3, [r0, #8]
   276aa:	4642      	mov	r2, r8
   276ac:	685e      	ldr	r6, [r3, #4]
   276ae:	4649      	mov	r1, r9
   276b0:	462b      	mov	r3, r5
   276b2:	47b0      	blx	r6
		if (rc) {
   276b4:	4606      	mov	r6, r0
   276b6:	b9d0      	cbnz	r0, 276ee <nvs_flash_al_wrt.part.3+0x7e>
		len -= blen;
   276b8:	1b64      	subs	r4, r4, r5
		offset += blen;
   276ba:	44a9      	add	r9, r5
		data8 += blen;
   276bc:	44a8      	add	r8, r5
	if (len) {
   276be:	b1f4      	cbz	r4, 276fe <nvs_flash_al_wrt.part.3+0x8e>
		memcpy(buf, data8, len);
   276c0:	2320      	movs	r3, #32
   276c2:	4622      	mov	r2, r4
   276c4:	4641      	mov	r1, r8
   276c6:	4668      	mov	r0, sp
   276c8:	6abe      	ldr	r6, [r7, #40]	; 0x28
   276ca:	f005 ff69 	bl	2d5a0 <__memcpy_chk>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   276ce:	6afd      	ldr	r5, [r7, #44]	; 0x2c
   276d0:	682a      	ldr	r2, [r5, #0]
   276d2:	7929      	ldrb	r1, [r5, #4]
   276d4:	1b12      	subs	r2, r2, r4
   276d6:	eb0d 0004 	add.w	r0, sp, r4
   276da:	f005 ff8e 	bl	2d5fa <memset>
		rc = flash_write(fs->flash_device, offset, buf,
   276de:	682b      	ldr	r3, [r5, #0]
   276e0:	68b2      	ldr	r2, [r6, #8]
   276e2:	4630      	mov	r0, r6
   276e4:	6854      	ldr	r4, [r2, #4]
   276e6:	4649      	mov	r1, r9
   276e8:	466a      	mov	r2, sp
   276ea:	47a0      	blx	r4
   276ec:	4606      	mov	r6, r0
	(void) flash_write_protection_set(fs->flash_device, true);
   276ee:	2101      	movs	r1, #1
   276f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   276f2:	f7ff febd 	bl	27470 <flash_write_protection_set>
	return rc;
   276f6:	4630      	mov	r0, r6
}
   276f8:	b008      	add	sp, #32
   276fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   276fe:	4626      	mov	r6, r4
   27700:	e7f5      	b.n	276ee <nvs_flash_al_wrt.part.3+0x7e>

00027702 <nvs_flash_ate_wrt>:
{
   27702:	b510      	push	{r4, lr}
   27704:	2308      	movs	r3, #8
   27706:	460a      	mov	r2, r1
   27708:	6841      	ldr	r1, [r0, #4]
   2770a:	4604      	mov	r4, r0
   2770c:	f7ff ffb0 	bl	27670 <nvs_flash_al_wrt.part.3>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   27710:	2108      	movs	r1, #8
   27712:	4602      	mov	r2, r0
   27714:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   27716:	f7ff ff1f 	bl	27558 <nvs_al_size.isra.0>
   2771a:	6863      	ldr	r3, [r4, #4]
   2771c:	1a18      	subs	r0, r3, r0
   2771e:	6060      	str	r0, [r4, #4]
}
   27720:	4610      	mov	r0, r2
   27722:	bd10      	pop	{r4, pc}

00027724 <nvs_delete>:
	return nvs_write(fs, id, NULL, 0);
   27724:	2300      	movs	r3, #0
   27726:	461a      	mov	r2, r3
   27728:	f7de b8f6 	b.w	5918 <nvs_write>

0002772c <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   2772c:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   2772e:	2400      	movs	r4, #0
   27730:	9400      	str	r4, [sp, #0]
   27732:	f7de f9cb 	bl	5acc <nvs_read_hist>
	return rc;
}
   27736:	b002      	add	sp, #8
   27738:	bd10      	pop	{r4, pc}

0002773a <device_get_binding>:
   2773a:	f7fa ba7b 	b.w	21c34 <z_impl_device_get_binding>

0002773e <get_sectors_cb>:
{
   2773e:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   27740:	6802      	ldr	r2, [r0, #0]
   27742:	684c      	ldr	r4, [r1, #4]
   27744:	42a2      	cmp	r2, r4
   27746:	d316      	bcc.n	27776 <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
   27748:	688b      	ldr	r3, [r1, #8]
   2774a:	4423      	add	r3, r4
   2774c:	429a      	cmp	r2, r3
   2774e:	d206      	bcs.n	2775e <get_sectors_cb+0x20>
	} else if (data->ret_idx >= data->ret_len) {
   27750:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
   27754:	42ab      	cmp	r3, r5
   27756:	d304      	bcc.n	27762 <get_sectors_cb+0x24>
		data->status = -ENOMEM;
   27758:	f06f 030b 	mvn.w	r3, #11
   2775c:	618b      	str	r3, [r1, #24]
		*bail_value = false;
   2775e:	2000      	movs	r0, #0
   27760:	e00a      	b.n	27778 <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   27762:	68cd      	ldr	r5, [r1, #12]
   27764:	1b12      	subs	r2, r2, r4
   27766:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
   2776a:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   2776e:	6842      	ldr	r2, [r0, #4]
   27770:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
   27772:	3301      	adds	r3, #1
   27774:	610b      	str	r3, [r1, #16]
		*bail_value = true;
   27776:	2001      	movs	r0, #1
}
   27778:	bd70      	pop	{r4, r5, r6, pc}

0002777a <settings_load>:
	return settings_load_subtree(NULL);
   2777a:	2000      	movs	r0, #0
   2777c:	f7de ba8a 	b.w	5c94 <settings_load_subtree>

00027780 <settings_delete>:
	return settings_save_one(name, NULL, 0);
   27780:	2200      	movs	r2, #0
   27782:	4611      	mov	r1, r2
   27784:	f7de ba4e 	b.w	5c24 <settings_save_one>

00027788 <settings_name_steq>:
{
   27788:	b530      	push	{r4, r5, lr}
	if (next) {
   2778a:	b10a      	cbz	r2, 27790 <settings_name_steq+0x8>
		*next = NULL;
   2778c:	2300      	movs	r3, #0
   2778e:	6013      	str	r3, [r2, #0]
	if ((!name) || (!key)) {
   27790:	b190      	cbz	r0, 277b8 <settings_name_steq+0x30>
   27792:	b151      	cbz	r1, 277aa <settings_name_steq+0x22>
   27794:	1e4d      	subs	r5, r1, #1
	while ((*key != '\0') && (*key == *name) &&
   27796:	f815 4f01 	ldrb.w	r4, [r5, #1]!
   2779a:	4603      	mov	r3, r0
   2779c:	f810 1b01 	ldrb.w	r1, [r0], #1
   277a0:	b15c      	cbz	r4, 277ba <settings_name_steq+0x32>
   277a2:	428c      	cmp	r4, r1
   277a4:	d101      	bne.n	277aa <settings_name_steq+0x22>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   277a6:	2c3d      	cmp	r4, #61	; 0x3d
   277a8:	d1f5      	bne.n	27796 <settings_name_steq+0xe>
	return 0;
   277aa:	2000      	movs	r0, #0
   277ac:	e004      	b.n	277b8 <settings_name_steq+0x30>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   277ae:	293d      	cmp	r1, #61	; 0x3d
   277b0:	d008      	beq.n	277c4 <settings_name_steq+0x3c>
   277b2:	fab1 f081 	clz	r0, r1
   277b6:	0940      	lsrs	r0, r0, #5
}
   277b8:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   277ba:	292f      	cmp	r1, #47	; 0x2f
   277bc:	d1f7      	bne.n	277ae <settings_name_steq+0x26>
		if (next) {
   277be:	b10a      	cbz	r2, 277c4 <settings_name_steq+0x3c>
			*next = name + 1;
   277c0:	3301      	adds	r3, #1
   277c2:	6013      	str	r3, [r2, #0]
		return 1;
   277c4:	2001      	movs	r0, #1
   277c6:	e7f7      	b.n	277b8 <settings_name_steq+0x30>

000277c8 <settings_name_next>:
{
   277c8:	b530      	push	{r4, r5, lr}
   277ca:	4603      	mov	r3, r0
	if (next) {
   277cc:	b109      	cbz	r1, 277d2 <settings_name_next+0xa>
		*next = NULL;
   277ce:	2200      	movs	r2, #0
   277d0:	600a      	str	r2, [r1, #0]
	if (!name) {
   277d2:	b16b      	cbz	r3, 277f0 <settings_name_next+0x28>
   277d4:	461a      	mov	r2, r3
   277d6:	4614      	mov	r4, r2
   277d8:	1ad0      	subs	r0, r2, r3
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   277da:	f812 5b01 	ldrb.w	r5, [r2], #1
   277de:	b135      	cbz	r5, 277ee <settings_name_next+0x26>
   277e0:	2d3d      	cmp	r5, #61	; 0x3d
   277e2:	d004      	beq.n	277ee <settings_name_next+0x26>
   277e4:	2d2f      	cmp	r5, #47	; 0x2f
   277e6:	d1f6      	bne.n	277d6 <settings_name_next+0xe>
		if (next) {
   277e8:	b109      	cbz	r1, 277ee <settings_name_next+0x26>
			*next = name + 1;
   277ea:	3401      	adds	r4, #1
   277ec:	600c      	str	r4, [r1, #0]
}
   277ee:	bd30      	pop	{r4, r5, pc}
		return 0;
   277f0:	4618      	mov	r0, r3
   277f2:	e7fc      	b.n	277ee <settings_name_next+0x26>

000277f4 <settings_nvs_read_fn>:
{
   277f4:	b510      	push	{r4, lr}
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   277f6:	4613      	mov	r3, r2
{
   277f8:	4614      	mov	r4, r2
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   277fa:	460a      	mov	r2, r1
   277fc:	8881      	ldrh	r1, [r0, #4]
   277fe:	6800      	ldr	r0, [r0, #0]
   27800:	f7ff ff94 	bl	2772c <nvs_read>
}
   27804:	42a0      	cmp	r0, r4
   27806:	bfa8      	it	ge
   27808:	4620      	movge	r0, r4
   2780a:	bd10      	pop	{r4, pc}

0002780c <settings_nvs_save>:
{
   2780c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27810:	b097      	sub	sp, #92	; 0x5c
   27812:	4604      	mov	r4, r0
   27814:	9201      	str	r2, [sp, #4]
   27816:	469b      	mov	fp, r3
	if (!name) {
   27818:	468a      	mov	sl, r1
   2781a:	2900      	cmp	r1, #0
   2781c:	d06b      	beq.n	278f6 <settings_nvs_save+0xea>
	delete = ((value == NULL) || (val_len == 0));
   2781e:	b1da      	cbz	r2, 27858 <settings_nvs_save+0x4c>
   27820:	fabb f78b 	clz	r7, fp
   27824:	097f      	lsrs	r7, r7, #5
	name_id = cf->last_name_id + 1;
   27826:	8f25      	ldrh	r5, [r4, #56]	; 0x38
   27828:	3501      	adds	r5, #1
   2782a:	b2ad      	uxth	r5, r5
	write_name_id = cf->last_name_id + 1;
   2782c:	46a8      	mov	r8, r5
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   2782e:	f104 0908 	add.w	r9, r4, #8
		name_id--;
   27832:	1e6e      	subs	r6, r5, #1
   27834:	b2b6      	uxth	r6, r6
		if (name_id == NVS_NAMECNT_ID) {
   27836:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   2783a:	d02d      	beq.n	27898 <settings_nvs_save+0x8c>
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   2783c:	234a      	movs	r3, #74	; 0x4a
   2783e:	aa03      	add	r2, sp, #12
   27840:	4631      	mov	r1, r6
   27842:	4648      	mov	r0, r9
   27844:	f7ff ff72 	bl	2772c <nvs_read>
		if (rc < 0) {
   27848:	2800      	cmp	r0, #0
   2784a:	da07      	bge.n	2785c <settings_nvs_save+0x50>
			if (rc == -ENOENT) {
   2784c:	f110 0f02 	cmn.w	r0, #2
   27850:	bf08      	it	eq
   27852:	46b0      	moveq	r8, r6
   27854:	4635      	mov	r5, r6
   27856:	e7ec      	b.n	27832 <settings_nvs_save+0x26>
	delete = ((value == NULL) || (val_len == 0));
   27858:	2701      	movs	r7, #1
   2785a:	e7e4      	b.n	27826 <settings_nvs_save+0x1a>
		rdname[rc] = '\0';
   2785c:	ab16      	add	r3, sp, #88	; 0x58
   2785e:	4418      	add	r0, r3
   27860:	2300      	movs	r3, #0
   27862:	f800 3c4c 	strb.w	r3, [r0, #-76]
		if (strcmp(name, rdname)) {
   27866:	a903      	add	r1, sp, #12
   27868:	4650      	mov	r0, sl
   2786a:	f7da fb13 	bl	1e94 <strcmp>
   2786e:	2800      	cmp	r0, #0
   27870:	d1f0      	bne.n	27854 <settings_nvs_save+0x48>
		if ((delete) && (name_id == cf->last_name_id)) {
   27872:	b1a7      	cbz	r7, 2789e <settings_nvs_save+0x92>
   27874:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   27876:	42b3      	cmp	r3, r6
   27878:	d143      	bne.n	27902 <settings_nvs_save+0xf6>
			cf->last_name_id--;
   2787a:	4622      	mov	r2, r4
   2787c:	1e73      	subs	r3, r6, #1
   2787e:	f822 3f38 	strh.w	r3, [r2, #56]!
			rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   27882:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   27886:	2302      	movs	r3, #2
   27888:	4648      	mov	r0, r9
   2788a:	f7de f845 	bl	5918 <nvs_write>
			if (rc < 0) {
   2788e:	2800      	cmp	r0, #0
   27890:	da37      	bge.n	27902 <settings_nvs_save+0xf6>
}
   27892:	b017      	add	sp, #92	; 0x5c
   27894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (delete) {
   27898:	b1ff      	cbz	r7, 278da <settings_nvs_save+0xce>
		return 0;
   2789a:	2000      	movs	r0, #0
   2789c:	e7f9      	b.n	27892 <settings_nvs_save+0x86>
   2789e:	46b0      	mov	r8, r6
	if (write_name_id == NVS_NAMECNT_ID + NVS_NAME_ID_OFFSET) {
   278a0:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
   278a4:	d02a      	beq.n	278fc <settings_nvs_save+0xf0>
	rc = nvs_write(&cf->cf_nvs, write_name_id + NVS_NAME_ID_OFFSET,
   278a6:	f104 0508 	add.w	r5, r4, #8
   278aa:	f508 4180 	add.w	r1, r8, #16384	; 0x4000
   278ae:	465b      	mov	r3, fp
   278b0:	9a01      	ldr	r2, [sp, #4]
   278b2:	b289      	uxth	r1, r1
   278b4:	4628      	mov	r0, r5
   278b6:	f7de f82f 	bl	5918 <nvs_write>
	if (rc < 0) {
   278ba:	2800      	cmp	r0, #0
   278bc:	dbe9      	blt.n	27892 <settings_nvs_save+0x86>
	if (write_name) {
   278be:	b977      	cbnz	r7, 278de <settings_nvs_save+0xd2>
	if (write_name_id > cf->last_name_id) {
   278c0:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   278c2:	4543      	cmp	r3, r8
   278c4:	d2e9      	bcs.n	2789a <settings_nvs_save+0x8e>
		cf->last_name_id = write_name_id;
   278c6:	4622      	mov	r2, r4
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   278c8:	2302      	movs	r3, #2
		cf->last_name_id = write_name_id;
   278ca:	f822 8f38 	strh.w	r8, [r2, #56]!
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   278ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   278d2:	4628      	mov	r0, r5
   278d4:	f7de f820 	bl	5918 <nvs_write>
   278d8:	e020      	b.n	2791c <settings_nvs_save+0x110>
	write_name = true;
   278da:	2701      	movs	r7, #1
   278dc:	e7e0      	b.n	278a0 <settings_nvs_save+0x94>
		rc = nvs_write(&cf->cf_nvs, write_name_id, name, strlen(name));
   278de:	4650      	mov	r0, sl
   278e0:	f7da fae2 	bl	1ea8 <strlen>
   278e4:	4652      	mov	r2, sl
   278e6:	4603      	mov	r3, r0
   278e8:	4641      	mov	r1, r8
   278ea:	4628      	mov	r0, r5
   278ec:	f7de f814 	bl	5918 <nvs_write>
		if (rc < 0) {
   278f0:	2800      	cmp	r0, #0
   278f2:	dae5      	bge.n	278c0 <settings_nvs_save+0xb4>
   278f4:	e7cd      	b.n	27892 <settings_nvs_save+0x86>
		return -EINVAL;
   278f6:	f06f 0015 	mvn.w	r0, #21
   278fa:	e7ca      	b.n	27892 <settings_nvs_save+0x86>
		return -ENOMEM;
   278fc:	f06f 000b 	mvn.w	r0, #11
   27900:	e7c7      	b.n	27892 <settings_nvs_save+0x86>
			rc = nvs_delete(&cf->cf_nvs, name_id);
   27902:	4631      	mov	r1, r6
   27904:	4648      	mov	r0, r9
   27906:	f7ff ff0d 	bl	27724 <nvs_delete>
			if (rc >= 0) {
   2790a:	2800      	cmp	r0, #0
   2790c:	dbc1      	blt.n	27892 <settings_nvs_save+0x86>
				rc = nvs_delete(&cf->cf_nvs, name_id +
   2790e:	f505 517f 	add.w	r1, r5, #16320	; 0x3fc0
   27912:	313f      	adds	r1, #63	; 0x3f
   27914:	b289      	uxth	r1, r1
   27916:	4648      	mov	r0, r9
   27918:	f7ff ff04 	bl	27724 <nvs_delete>
	if (rc < 0) {
   2791c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   27920:	e7b7      	b.n	27892 <settings_nvs_save+0x86>

00027922 <settings_nvs_backend_init>:
{
   27922:	b573      	push	{r0, r1, r4, r5, r6, lr}
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   27924:	f100 0608 	add.w	r6, r0, #8
   27928:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
{
   2792a:	4604      	mov	r4, r0
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   2792c:	4630      	mov	r0, r6
   2792e:	f7dd febd 	bl	56ac <nvs_init>
	if (rc) {
   27932:	4605      	mov	r5, r0
   27934:	b970      	cbnz	r0, 27954 <settings_nvs_backend_init+0x32>
	rc = nvs_read(&cf->cf_nvs, NVS_NAMECNT_ID, &last_name_id,
   27936:	2302      	movs	r3, #2
   27938:	f10d 0206 	add.w	r2, sp, #6
   2793c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   27940:	4630      	mov	r0, r6
   27942:	f7ff fef3 	bl	2772c <nvs_read>
	if (rc < 0) {
   27946:	2800      	cmp	r0, #0
		cf->last_name_id = NVS_NAMECNT_ID;
   27948:	bfb4      	ite	lt
   2794a:	f44f 4300 	movlt.w	r3, #32768	; 0x8000
		cf->last_name_id = last_name_id;
   2794e:	f8bd 3006 	ldrhge.w	r3, [sp, #6]
   27952:	8723      	strh	r3, [r4, #56]	; 0x38
}
   27954:	4628      	mov	r0, r5
   27956:	b002      	add	sp, #8
   27958:	bd70      	pop	{r4, r5, r6, pc}

0002795a <set_starting_state>:
{
   2795a:	b510      	push	{r4, lr}
	__asm__ volatile(
   2795c:	f04f 0320 	mov.w	r3, #32
   27960:	f3ef 8211 	mrs	r2, BASEPRI
   27964:	f383 8811 	msr	BASEPRI, r3
   27968:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2796c:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   2796e:	f003 0407 	and.w	r4, r3, #7
   27972:	2c01      	cmp	r4, #1
   27974:	d106      	bne.n	27984 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   27976:	6001      	str	r1, [r0, #0]
	int err = 0;
   27978:	2000      	movs	r0, #0
	__asm__ volatile(
   2797a:	f382 8811 	msr	BASEPRI, r2
   2797e:	f3bf 8f6f 	isb	sy
}
   27982:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   27984:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   27988:	428b      	cmp	r3, r1
		err = -EALREADY;
   2798a:	bf14      	ite	ne
   2798c:	f04f 30ff 	movne.w	r0, #4294967295
   27990:	f06f 0077 	mvneq.w	r0, #119	; 0x77
   27994:	e7f1      	b.n	2797a <set_starting_state+0x20>

00027996 <set_on_state>:
	__asm__ volatile(
   27996:	f04f 0320 	mov.w	r3, #32
   2799a:	f3ef 8211 	mrs	r2, BASEPRI
   2799e:	f383 8811 	msr	BASEPRI, r3
   279a2:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   279a6:	6803      	ldr	r3, [r0, #0]
   279a8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   279ac:	f043 0302 	orr.w	r3, r3, #2
   279b0:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   279b2:	f382 8811 	msr	BASEPRI, r2
   279b6:	f3bf 8f6f 	isb	sy
}
   279ba:	4770      	bx	lr

000279bc <onoff_started_callback>:
	return &data->mgr[type];
   279bc:	68c0      	ldr	r0, [r0, #12]
   279be:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   279c0:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   279c4:	2100      	movs	r1, #0
   279c6:	4710      	bx	r2

000279c8 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   279c8:	2000      	movs	r0, #0
   279ca:	f7f9 bc55 	b.w	21278 <nrfx_clock_start>

000279ce <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   279ce:	2000      	movs	r0, #0
   279d0:	f7f9 bca0 	b.w	21314 <nrfx_clock_stop>

000279d4 <api_stop>:
	return stop(dev, subsys, CTX_API);
   279d4:	2280      	movs	r2, #128	; 0x80
   279d6:	f7de bb9f 	b.w	6118 <stop>

000279da <blocking_start_callback>:
	z_impl_k_sem_give(sem);
   279da:	4610      	mov	r0, r2
   279dc:	f7fb bf6e 	b.w	238bc <z_impl_k_sem_give>

000279e0 <api_start>:
{
   279e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   279e4:	b2c9      	uxtb	r1, r1
	err = set_starting_state(&subdata->flags, ctx);
   279e6:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   279e8:	68c5      	ldr	r5, [r0, #12]
	err = set_starting_state(&subdata->flags, ctx);
   279ea:	434c      	muls	r4, r1
{
   279ec:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   279ee:	f104 0048 	add.w	r0, r4, #72	; 0x48
   279f2:	2180      	movs	r1, #128	; 0x80
   279f4:	4428      	add	r0, r5
{
   279f6:	4690      	mov	r8, r2
   279f8:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
   279fa:	f7ff ffae 	bl	2795a <set_starting_state>
	if (err < 0) {
   279fe:	2800      	cmp	r0, #0
   27a00:	db06      	blt.n	27a10 <api_start+0x30>
	subdata->cb = cb;
   27a02:	4425      	add	r5, r4
	subdata->user_data = user_data;
   27a04:	e9c5 8710 	strd	r8, r7, [r5, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   27a08:	6873      	ldr	r3, [r6, #4]
   27a0a:	591b      	ldr	r3, [r3, r4]
   27a0c:	4798      	blx	r3
	return 0;
   27a0e:	2000      	movs	r0, #0
}
   27a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00027a14 <z_impl_hwinfo_get_device_id>:
NRF_STATIC_INLINE uint32_t nrf_ficr_deviceid_get(NRF_FICR_Type const * p_reg, uint32_t reg_id)
{
#if defined(FICR_INFO_DEVICEID_DEVICEID_Msk)
    return p_reg->INFO.DEVICEID[reg_id];
#else
    return p_reg->DEVICEID[reg_id];
   27a14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
struct nrf_uid {
	uint32_t id[2];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
   27a18:	b573      	push	{r0, r1, r4, r5, r6, lr}
   27a1a:	6e56      	ldr	r6, [r2, #100]	; 0x64
   27a1c:	6e55      	ldr	r5, [r2, #100]	; 0x64
   27a1e:	6e54      	ldr	r4, [r2, #100]	; 0x64
   27a20:	6e53      	ldr	r3, [r2, #100]	; 0x64
	struct nrf_uid dev_id;

	dev_id.id[0] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 1));
   27a22:	0a2d      	lsrs	r5, r5, #8
   27a24:	061b      	lsls	r3, r3, #24
   27a26:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
   27a2a:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
   27a2e:	0224      	lsls	r4, r4, #8
   27a30:	432b      	orrs	r3, r5
   27a32:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
   27a36:	4323      	orrs	r3, r4
   27a38:	9300      	str	r3, [sp, #0]
   27a3a:	6e16      	ldr	r6, [r2, #96]	; 0x60
   27a3c:	6e15      	ldr	r5, [r2, #96]	; 0x60
   27a3e:	6e14      	ldr	r4, [r2, #96]	; 0x60
   27a40:	6e13      	ldr	r3, [r2, #96]	; 0x60
	dev_id.id[1] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 0));
   27a42:	0a2a      	lsrs	r2, r5, #8
   27a44:	061b      	lsls	r3, r3, #24
   27a46:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
   27a4a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
   27a4e:	2908      	cmp	r1, #8
   27a50:	ea43 0302 	orr.w	r3, r3, r2
   27a54:	ea4f 2204 	mov.w	r2, r4, lsl #8
   27a58:	bf28      	it	cs
   27a5a:	2108      	movcs	r1, #8
   27a5c:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
   27a60:	4313      	orrs	r3, r2
   27a62:	460c      	mov	r4, r1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   27a64:	460a      	mov	r2, r1
   27a66:	4669      	mov	r1, sp
   27a68:	9301      	str	r3, [sp, #4]
   27a6a:	f005 fd8b 	bl	2d584 <memcpy>
	}

	memcpy(buffer, dev_id.id, length);

	return length;
}
   27a6e:	4620      	mov	r0, r4
   27a70:	b002      	add	sp, #8
   27a72:	bd70      	pop	{r4, r5, r6, pc}

00027a74 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   27a74:	4770      	bx	lr

00027a76 <sys_clock_disable>:
   27a76:	4770      	bx	lr

00027a78 <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
   27a78:	2000      	movs	r0, #0
   27a7a:	f7de baf5 	b.w	6068 <sys_reboot>

00027a7e <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
   27a7e:	428b      	cmp	r3, r1
{
   27a80:	b538      	push	{r3, r4, r5, lr}
   27a82:	4615      	mov	r5, r2
   27a84:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   27a86:	d805      	bhi.n	27a94 <_copy+0x16>
   27a88:	461a      	mov	r2, r3
   27a8a:	4629      	mov	r1, r5
   27a8c:	f005 fd7a 	bl	2d584 <memcpy>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   27a90:	4620      	mov	r0, r4
   27a92:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   27a94:	2400      	movs	r4, #0
   27a96:	e7fb      	b.n	27a90 <_copy+0x12>

00027a98 <_set>:
__ssp_bos_icheck3(memset, void *, int)
   27a98:	f005 bdaf 	b.w	2d5fa <memset>

00027a9c <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   27a9c:	09c3      	lsrs	r3, r0, #7
   27a9e:	005a      	lsls	r2, r3, #1
   27aa0:	4413      	add	r3, r2
   27aa2:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   27aa6:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   27aaa:	b2c0      	uxtb	r0, r0
   27aac:	4770      	bx	lr

00027aae <_set_secure.constprop.0>:
   27aae:	460a      	mov	r2, r1
 * @param len IN -- number of times the value will be copied
 */
#ifdef TINYCRYPT_ARCH_HAS_SET_SECURE
extern void _set_secure(void *to, uint8_t val, unsigned int len);
#else /* ! TINYCRYPT_ARCH_HAS_SET_SECURE */
static inline void _set_secure(void *to, uint8_t val, unsigned int len)
   27ab0:	b508      	push	{r3, lr}
   27ab2:	2100      	movs	r1, #0
   27ab4:	f005 fda1 	bl	2d5fa <memset>
{
  (void) memset(to, val, len);
#ifdef __GNUC__
  __asm__ __volatile__("" :: "g"(to) : "memory");
#endif /* __GNUC__ */
}
   27ab8:	bd08      	pop	{r3, pc}

00027aba <uECC_make_key>:
	}
	return 0;
}

int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve)
{
   27aba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27abe:	4606      	mov	r6, r0
   27ac0:	b0a8      	sub	sp, #160	; 0xa0
   27ac2:	460f      	mov	r7, r1
   27ac4:	4614      	mov	r4, r2
   27ac6:	2540      	movs	r5, #64	; 0x40
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
        		return 0;
		}

		/* computing modular reduction of _random (see FIPS 186.4 B.4.1): */
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   27ac8:	f102 0824 	add.w	r8, r2, #36	; 0x24
		uECC_RNG_Function rng_function = uECC_get_rng();
   27acc:	f7de ff20 	bl	6910 <uECC_get_rng>
		if (!rng_function ||
   27ad0:	4603      	mov	r3, r0
   27ad2:	2800      	cmp	r0, #0
   27ad4:	d03c      	beq.n	27b50 <uECC_make_key+0x96>
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   27ad6:	2140      	movs	r1, #64	; 0x40
   27ad8:	a808      	add	r0, sp, #32
   27ada:	4798      	blx	r3
		if (!rng_function ||
   27adc:	b3c0      	cbz	r0, 27b50 <uECC_make_key+0x96>
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   27ade:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
   27ae2:	f112 031f 	adds.w	r3, r2, #31
   27ae6:	bf48      	it	mi
   27ae8:	f102 033e 	addmi.w	r3, r2, #62	; 0x3e
   27aec:	a908      	add	r1, sp, #32
   27aee:	4642      	mov	r2, r8
   27af0:	4668      	mov	r0, sp
   27af2:	f343 1347 	sbfx	r3, r3, #5, #8
   27af6:	f000 f9fc 	bl	27ef2 <uECC_vli_mmod>

		/* Computing public-key from private: */
		if (EccPoint_compute_public_key(_public, _private, curve)) {
   27afa:	4622      	mov	r2, r4
   27afc:	4669      	mov	r1, sp
   27afe:	a818      	add	r0, sp, #96	; 0x60
   27b00:	f000 fe12 	bl	28728 <EccPoint_compute_public_key>
   27b04:	b310      	cbz	r0, 27b4c <uECC_make_key+0x92>

			/* Converting buffers to correct bit order: */
			uECC_vli_nativeToBytes(private_key,
					       BITS_TO_BYTES(curve->num_n_bits),
   27b06:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
			uECC_vli_nativeToBytes(private_key,
   27b0a:	1dd9      	adds	r1, r3, #7
   27b0c:	bf48      	it	mi
   27b0e:	f103 010e 	addmi.w	r1, r3, #14
   27b12:	466a      	mov	r2, sp
   27b14:	10c9      	asrs	r1, r1, #3
   27b16:	4638      	mov	r0, r7
   27b18:	f000 fe2e 	bl	28778 <uECC_vli_nativeToBytes>
					       _private);
			uECC_vli_nativeToBytes(public_key,
   27b1c:	aa18      	add	r2, sp, #96	; 0x60
   27b1e:	f994 1001 	ldrsb.w	r1, [r4, #1]
   27b22:	4630      	mov	r0, r6
   27b24:	f000 fe28 	bl	28778 <uECC_vli_nativeToBytes>
					       curve->num_bytes,
					       _public);
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   27b28:	f994 1001 	ldrsb.w	r1, [r4, #1]
 					       curve->num_bytes,
					       _public + curve->num_words);
   27b2c:	f994 2000 	ldrsb.w	r2, [r4]
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   27b30:	ab18      	add	r3, sp, #96	; 0x60
   27b32:	1870      	adds	r0, r6, r1
   27b34:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   27b38:	f000 fe1e 	bl	28778 <uECC_vli_nativeToBytes>

			/* erasing temporary buffer that stored secret: */
			_set_secure(_private, 0, NUM_ECC_BYTES);
   27b3c:	4668      	mov	r0, sp
   27b3e:	2120      	movs	r1, #32
   27b40:	f7ff ffb5 	bl	27aae <_set_secure.constprop.0>

      			return 1;
   27b44:	2001      	movs	r0, #1
    		}
  	}
	return 0;
}
   27b46:	b028      	add	sp, #160	; 0xa0
   27b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   27b4c:	3d01      	subs	r5, #1
   27b4e:	d1bd      	bne.n	27acc <uECC_make_key+0x12>
        		return 0;
   27b50:	2000      	movs	r0, #0
   27b52:	e7f8      	b.n	27b46 <uECC_make_key+0x8c>

00027b54 <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,
		       uint8_t *secret, uECC_Curve curve)
{
   27b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   27b58:	461c      	mov	r4, r3
	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {_private, tmp};
	uECC_word_t *initial_Z = 0;
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
	wordcount_t num_bytes = curve->num_bytes;
   27b5a:	f993 6001 	ldrsb.w	r6, [r3, #1]
	wordcount_t num_words = curve->num_words;
   27b5e:	f993 a000 	ldrsb.w	sl, [r3]
	int r;

	/* Converting buffers to correct bit order: */
	uECC_vli_bytesToNative(_private,
      			       private_key,
			       BITS_TO_BYTES(curve->num_n_bits));
   27b62:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
   27b66:	b0a4      	sub	sp, #144	; 0x90
   27b68:	4690      	mov	r8, r2
	uECC_vli_bytesToNative(_private,
   27b6a:	1dda      	adds	r2, r3, #7
   27b6c:	bf48      	it	mi
   27b6e:	f103 020e 	addmi.w	r2, r3, #14
	uECC_word_t *p2[2] = {_private, tmp};
   27b72:	ad04      	add	r5, sp, #16
{
   27b74:	4681      	mov	r9, r0
	uECC_word_t *p2[2] = {_private, tmp};
   27b76:	af0c      	add	r7, sp, #48	; 0x30
	uECC_vli_bytesToNative(_private,
   27b78:	4628      	mov	r0, r5
   27b7a:	10d2      	asrs	r2, r2, #3
	uECC_word_t *p2[2] = {_private, tmp};
   27b7c:	9502      	str	r5, [sp, #8]
   27b7e:	9703      	str	r7, [sp, #12]
	uECC_vli_bytesToNative(_private,
   27b80:	f000 fe0e 	bl	287a0 <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public,
   27b84:	4632      	mov	r2, r6
   27b86:	4649      	mov	r1, r9
   27b88:	a814      	add	r0, sp, #80	; 0x50
   27b8a:	f000 fe09 	bl	287a0 <uECC_vli_bytesToNative>
      			       public_key,
			       num_bytes);
	uECC_vli_bytesToNative(_public + num_words,
   27b8e:	ab14      	add	r3, sp, #80	; 0x50
   27b90:	eb03 008a 	add.w	r0, r3, sl, lsl #2
   27b94:	4632      	mov	r2, r6
   27b96:	eb09 0106 	add.w	r1, r9, r6
   27b9a:	f000 fe01 	bl	287a0 <uECC_vli_bytesToNative>
			       public_key + num_bytes,
			       num_bytes);

	/* Regularize the bitcount for the private key so that attackers cannot use a
	 * side channel attack to learn the number of leading zeros. */
	carry = regularize_k(_private, _private, tmp, curve);
   27b9e:	4623      	mov	r3, r4
   27ba0:	463a      	mov	r2, r7
   27ba2:	4629      	mov	r1, r5
   27ba4:	4628      	mov	r0, r5
   27ba6:	f000 fd92 	bl	286ce <regularize_k>
			goto clear_and_out;
    		}
    		initial_Z = p2[carry];
  	}

	EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1,
   27baa:	fab0 f080 	clz	r0, r0
   27bae:	9401      	str	r4, [sp, #4]
   27bb0:	ab24      	add	r3, sp, #144	; 0x90
   27bb2:	0940      	lsrs	r0, r0, #5
   27bb4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   27bb8:	8863      	ldrh	r3, [r4, #2]
   27bba:	3301      	adds	r3, #1
   27bbc:	b21b      	sxth	r3, r3
   27bbe:	9300      	str	r3, [sp, #0]
   27bc0:	a914      	add	r1, sp, #80	; 0x50
   27bc2:	2300      	movs	r3, #0
   27bc4:	f850 2c88 	ldr.w	r2, [r0, #-136]
   27bc8:	4608      	mov	r0, r1
   27bca:	f000 fcb1 	bl	28530 <EccPoint_mult>
		      curve);

	uECC_vli_nativeToBytes(secret, num_bytes, _public);
   27bce:	aa14      	add	r2, sp, #80	; 0x50
   27bd0:	4631      	mov	r1, r6
   27bd2:	4640      	mov	r0, r8
   27bd4:	f000 fdd0 	bl	28778 <uECC_vli_nativeToBytes>
	r = !EccPoint_isZero(_public, curve);
   27bd8:	4621      	mov	r1, r4
   27bda:	a814      	add	r0, sp, #80	; 0x50
   27bdc:	f000 fc1f 	bl	2841e <EccPoint_isZero>

clear_and_out:
	/* erasing temporary buffer used to store secret: */
	_set_secure(p2, 0, sizeof(p2));
   27be0:	2108      	movs	r1, #8
	r = !EccPoint_isZero(_public, curve);
   27be2:	4604      	mov	r4, r0
	_set_secure(p2, 0, sizeof(p2));
   27be4:	eb0d 0001 	add.w	r0, sp, r1
   27be8:	f7ff ff61 	bl	27aae <_set_secure.constprop.0>
	_set_secure(tmp, 0, sizeof(tmp));
   27bec:	4638      	mov	r0, r7
   27bee:	2120      	movs	r1, #32
   27bf0:	f7ff ff5d 	bl	27aae <_set_secure.constprop.0>
	_set_secure(_private, 0, sizeof(_private));
   27bf4:	4628      	mov	r0, r5
   27bf6:	2120      	movs	r1, #32
   27bf8:	f7ff ff59 	bl	27aae <_set_secure.constprop.0>

	return r;
}
   27bfc:	fab4 f084 	clz	r0, r4
   27c00:	0940      	lsrs	r0, r0, #5
   27c02:	b024      	add	sp, #144	; 0x90
   27c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00027c08 <uECC_vli_add>:
{
   27c08:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   27c0a:	2400      	movs	r4, #0
{
   27c0c:	4607      	mov	r7, r0
	uECC_word_t carry = 0;
   27c0e:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   27c10:	b265      	sxtb	r5, r4
   27c12:	42ab      	cmp	r3, r5
   27c14:	dc00      	bgt.n	27c18 <uECC_vli_add+0x10>
}
   27c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t sum = left[i] + right[i] + carry;
   27c18:	f851 6024 	ldr.w	r6, [r1, r4, lsl #2]
   27c1c:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
   27c20:	4435      	add	r5, r6
   27c22:	4405      	add	r5, r0
		carry = cond_set(val, carry, (sum != left[i]));
   27c24:	42ae      	cmp	r6, r5
		uECC_word_t val = (sum < left[i]);
   27c26:	bf8c      	ite	hi
   27c28:	2601      	movhi	r6, #1
   27c2a:	2600      	movls	r6, #0
		result[i] = sum;
   27c2c:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   27c30:	bf18      	it	ne
   27c32:	4630      	movne	r0, r6
		result[i] = sum;
   27c34:	3401      	adds	r4, #1
   27c36:	e7eb      	b.n	27c10 <uECC_vli_add+0x8>

00027c38 <uECC_vli_rshift1>:
	vli += num_words;
   27c38:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	uECC_word_t carry = 0;
   27c3c:	2300      	movs	r3, #0
	while (vli-- > end) {
   27c3e:	4288      	cmp	r0, r1
   27c40:	d300      	bcc.n	27c44 <uECC_vli_rshift1+0xc>
}
   27c42:	4770      	bx	lr
		uECC_word_t temp = *vli;
   27c44:	f851 2d04 	ldr.w	r2, [r1, #-4]!
		*vli = (temp >> 1) | carry;
   27c48:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   27c4c:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - 1);
   27c4e:	07d3      	lsls	r3, r2, #31
   27c50:	e7f5      	b.n	27c3e <uECC_vli_rshift1+0x6>

00027c52 <vli_modInv_update>:
	if (!EVEN(uv)) {
   27c52:	6803      	ldr	r3, [r0, #0]
{
   27c54:	b570      	push	{r4, r5, r6, lr}
	if (!EVEN(uv)) {
   27c56:	f013 0601 	ands.w	r6, r3, #1
{
   27c5a:	4605      	mov	r5, r0
   27c5c:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
   27c5e:	d005      	beq.n	27c6c <vli_modInv_update+0x1a>
		carry = uECC_vli_add(uv, uv, mod, num_words);
   27c60:	4613      	mov	r3, r2
   27c62:	460a      	mov	r2, r1
   27c64:	4601      	mov	r1, r0
   27c66:	f7ff ffcf 	bl	27c08 <uECC_vli_add>
   27c6a:	4606      	mov	r6, r0
	uECC_vli_rshift1(uv, num_words);
   27c6c:	4621      	mov	r1, r4
   27c6e:	4628      	mov	r0, r5
   27c70:	f7ff ffe2 	bl	27c38 <uECC_vli_rshift1>
	if (carry) {
   27c74:	b146      	cbz	r6, 27c88 <vli_modInv_update+0x36>
		uv[num_words - 1] |= HIGH_BIT_SET;
   27c76:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   27c7a:	3a01      	subs	r2, #1
   27c7c:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   27c80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   27c84:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
}
   27c88:	bd70      	pop	{r4, r5, r6, pc}

00027c8a <uECC_vli_mult>:
{
   27c8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (k = 0; k < num_words; ++k) {
   27c8e:	2500      	movs	r5, #0
{
   27c90:	b087      	sub	sp, #28
   27c92:	e9cd 1200 	strd	r1, r2, [sp]
	uECC_word_t r1 = 0;
   27c96:	462c      	mov	r4, r5
	uECC_word_t r0 = 0;
   27c98:	462a      	mov	r2, r5
   27c9a:	fa4f f885 	sxtb.w	r8, r5
	for (k = 0; k < num_words; ++k) {
   27c9e:	4543      	cmp	r3, r8
   27ca0:	dc16      	bgt.n	27cd0 <uECC_vli_mult+0x46>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   27ca2:	f04f 35ff 	mov.w	r5, #4294967295
   27ca6:	eb05 0543 	add.w	r5, r5, r3, lsl #1
   27caa:	9502      	str	r5, [sp, #8]
   27cac:	f04f 0a00 	mov.w	sl, #0
   27cb0:	fa5f f58a 	uxtb.w	r5, sl
   27cb4:	eb05 0c03 	add.w	ip, r5, r3
   27cb8:	9e02      	ldr	r6, [sp, #8]
   27cba:	fa4f fc8c 	sxtb.w	ip, ip
   27cbe:	45b4      	cmp	ip, r6
   27cc0:	db2d      	blt.n	27d1e <uECC_vli_mult+0x94>
	result[num_words * 2 - 1] = r0;
   27cc2:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   27cc6:	f840 2c04 	str.w	r2, [r0, #-4]
}
   27cca:	b007      	add	sp, #28
   27ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27cd0:	9e01      	ldr	r6, [sp, #4]
	for (k = 0; k < num_words; ++k) {
   27cd2:	f04f 0c00 	mov.w	ip, #0
   27cd6:	eb06 0985 	add.w	r9, r6, r5, lsl #2
   27cda:	46e6      	mov	lr, ip
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   27cdc:	e9cd 2402 	strd	r2, r4, [sp, #8]
	uECC_dword_t p = (uECC_dword_t)a * b;
   27ce0:	9900      	ldr	r1, [sp, #0]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   27ce2:	f859 7904 	ldr.w	r7, [r9], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   27ce6:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
   27cea:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   27cee:	fba7 ab06 	umull	sl, fp, r7, r6
   27cf2:	eb1a 0601 	adds.w	r6, sl, r1
   27cf6:	f10c 0c01 	add.w	ip, ip, #1
   27cfa:	eb5b 0702 	adcs.w	r7, fp, r2
		for (i = 0; i <= k; ++i) {
   27cfe:	fa4f fa8c 	sxtb.w	sl, ip
   27d02:	bf2c      	ite	cs
   27d04:	2201      	movcs	r2, #1
   27d06:	2200      	movcc	r2, #0
   27d08:	45c2      	cmp	sl, r8
	*r2 += (r01 < p);
   27d0a:	4496      	add	lr, r2
	*r1 = r01 >> uECC_WORD_BITS;
   27d0c:	463c      	mov	r4, r7
	*r0 = (uECC_word_t)r01;
   27d0e:	4632      	mov	r2, r6
		for (i = 0; i <= k; ++i) {
   27d10:	dde4      	ble.n	27cdc <uECC_vli_mult+0x52>
		result[k] = r0;
   27d12:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
	*r1 = r01 >> uECC_WORD_BITS;
   27d16:	463a      	mov	r2, r7
   27d18:	3501      	adds	r5, #1
	*r2 += (r01 < p);
   27d1a:	4674      	mov	r4, lr
   27d1c:	e7bd      	b.n	27c9a <uECC_vli_mult+0x10>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   27d1e:	3501      	adds	r5, #1
   27d20:	b26d      	sxtb	r5, r5
   27d22:	9e01      	ldr	r6, [sp, #4]
   27d24:	9900      	ldr	r1, [sp, #0]
   27d26:	ebac 0e05 	sub.w	lr, ip, r5
   27d2a:	eb06 0e8e 	add.w	lr, r6, lr, lsl #2
   27d2e:	eb01 0b85 	add.w	fp, r1, r5, lsl #2
   27d32:	4626      	mov	r6, r4
   27d34:	2400      	movs	r4, #0
   27d36:	429d      	cmp	r5, r3
   27d38:	db05      	blt.n	27d46 <uECC_vli_mult+0xbc>
		result[k] = r0;
   27d3a:	f840 202c 	str.w	r2, [r0, ip, lsl #2]
		r2 = 0;
   27d3e:	f10a 0a01 	add.w	sl, sl, #1
		result[k] = r0;
   27d42:	4632      	mov	r2, r6
   27d44:	e7b4      	b.n	27cb0 <uECC_vli_mult+0x26>
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   27d46:	e9cd 2604 	strd	r2, r6, [sp, #16]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   27d4a:	f85e 7904 	ldr.w	r7, [lr], #-4
   27d4e:	f85b 8b04 	ldr.w	r8, [fp], #4
	r01 += p;
   27d52:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
	uECC_dword_t p = (uECC_dword_t)a * b;
   27d56:	fba8 8907 	umull	r8, r9, r8, r7
   27d5a:	eb18 0601 	adds.w	r6, r8, r1
   27d5e:	eb59 0702 	adcs.w	r7, r9, r2
   27d62:	bf2c      	ite	cs
   27d64:	2201      	movcs	r2, #1
   27d66:	2200      	movcc	r2, #0
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   27d68:	3501      	adds	r5, #1
	*r2 += (r01 < p);
   27d6a:	4414      	add	r4, r2
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   27d6c:	b26d      	sxtb	r5, r5
	*r0 = (uECC_word_t)r01;
   27d6e:	4632      	mov	r2, r6
	*r1 = r01 >> uECC_WORD_BITS;
   27d70:	463e      	mov	r6, r7
   27d72:	e7e0      	b.n	27d36 <uECC_vli_mult+0xac>

00027d74 <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   27d74:	2300      	movs	r3, #0
{
   27d76:	b510      	push	{r4, lr}
		 vli[i] = 0;
   27d78:	461c      	mov	r4, r3
	for (i = 0; i < num_words; ++i) {
   27d7a:	b25a      	sxtb	r2, r3
   27d7c:	4291      	cmp	r1, r2
   27d7e:	dc00      	bgt.n	27d82 <uECC_vli_clear+0xe>
}
   27d80:	bd10      	pop	{r4, pc}
		 vli[i] = 0;
   27d82:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
   27d86:	3301      	adds	r3, #1
   27d88:	e7f7      	b.n	27d7a <uECC_vli_clear+0x6>

00027d8a <uECC_vli_isZero>:
{
   27d8a:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   27d8c:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   27d8e:	461a      	mov	r2, r3
	for (i = 0; i < num_words; ++i) {
   27d90:	b25c      	sxtb	r4, r3
   27d92:	42a1      	cmp	r1, r4
   27d94:	dc03      	bgt.n	27d9e <uECC_vli_isZero+0x14>
}
   27d96:	fab2 f082 	clz	r0, r2
   27d9a:	0940      	lsrs	r0, r0, #5
   27d9c:	bd10      	pop	{r4, pc}
		bits |= vli[i];
   27d9e:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   27da2:	3301      	adds	r3, #1
   27da4:	4322      	orrs	r2, r4
   27da6:	e7f3      	b.n	27d90 <uECC_vli_isZero+0x6>

00027da8 <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   27da8:	114a      	asrs	r2, r1, #5
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   27daa:	2301      	movs	r3, #1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   27dac:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   27db0:	f001 011f 	and.w	r1, r1, #31
   27db4:	fa03 f101 	lsl.w	r1, r3, r1
}
   27db8:	4008      	ands	r0, r1
   27dba:	4770      	bx	lr

00027dbc <uECC_vli_numBits>:
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   27dbc:	3901      	subs	r1, #1
   27dbe:	b249      	sxtb	r1, r1
   27dc0:	eb00 0381 	add.w	r3, r0, r1, lsl #2
   27dc4:	2900      	cmp	r1, #0
   27dc6:	da04      	bge.n	27dd2 <uECC_vli_numBits+0x16>
	return (i + 1);
   27dc8:	3101      	adds	r1, #1
   27dca:	b249      	sxtb	r1, r1
	if (num_digits == 0) {
   27dcc:	b941      	cbnz	r1, 27de0 <uECC_vli_numBits+0x24>
		return 0;
   27dce:	4608      	mov	r0, r1
}
   27dd0:	4770      	bx	lr
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   27dd2:	f853 2904 	ldr.w	r2, [r3], #-4
   27dd6:	2a00      	cmp	r2, #0
   27dd8:	d1f6      	bne.n	27dc8 <uECC_vli_numBits+0xc>
   27dda:	3901      	subs	r1, #1
   27ddc:	b249      	sxtb	r1, r1
   27dde:	e7f1      	b.n	27dc4 <uECC_vli_numBits+0x8>
	digit = vli[num_digits - 1];
   27de0:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
   27de4:	3b01      	subs	r3, #1
   27de6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	for (i = 0; digit; ++i) {
   27dea:	2000      	movs	r0, #0
   27dec:	b923      	cbnz	r3, 27df8 <uECC_vli_numBits+0x3c>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   27dee:	3901      	subs	r1, #1
   27df0:	eb00 1141 	add.w	r1, r0, r1, lsl #5
   27df4:	b208      	sxth	r0, r1
   27df6:	4770      	bx	lr
		digit >>= 1;
   27df8:	085b      	lsrs	r3, r3, #1
	for (i = 0; digit; ++i) {
   27dfa:	3001      	adds	r0, #1
   27dfc:	e7f6      	b.n	27dec <uECC_vli_numBits+0x30>

00027dfe <uECC_vli_set>:
{
   27dfe:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   27e00:	2300      	movs	r3, #0
   27e02:	b25c      	sxtb	r4, r3
   27e04:	42a2      	cmp	r2, r4
   27e06:	dc00      	bgt.n	27e0a <uECC_vli_set+0xc>
}
   27e08:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
   27e0a:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   27e0e:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
   27e12:	3301      	adds	r3, #1
   27e14:	e7f5      	b.n	27e02 <uECC_vli_set+0x4>

00027e16 <uECC_vli_cmp_unsafe>:
{
   27e16:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
   27e18:	3a01      	subs	r2, #1
   27e1a:	b252      	sxtb	r2, r2
   27e1c:	0093      	lsls	r3, r2, #2
   27e1e:	2a00      	cmp	r2, #0
   27e20:	da01      	bge.n	27e26 <uECC_vli_cmp_unsafe+0x10>
	return 0;
   27e22:	2000      	movs	r0, #0
}
   27e24:	bd30      	pop	{r4, r5, pc}
		if (left[i] > right[i]) {
   27e26:	58c5      	ldr	r5, [r0, r3]
   27e28:	58cc      	ldr	r4, [r1, r3]
   27e2a:	42a5      	cmp	r5, r4
   27e2c:	d805      	bhi.n	27e3a <uECC_vli_cmp_unsafe+0x24>
		} else if (left[i] < right[i]) {
   27e2e:	f1a3 0304 	sub.w	r3, r3, #4
   27e32:	d304      	bcc.n	27e3e <uECC_vli_cmp_unsafe+0x28>
	for (i = num_words - 1; i >= 0; --i) {
   27e34:	3a01      	subs	r2, #1
   27e36:	b252      	sxtb	r2, r2
   27e38:	e7f1      	b.n	27e1e <uECC_vli_cmp_unsafe+0x8>
			return 1;
   27e3a:	2001      	movs	r0, #1
   27e3c:	e7f2      	b.n	27e24 <uECC_vli_cmp_unsafe+0xe>
			return -1;
   27e3e:	f04f 30ff 	mov.w	r0, #4294967295
   27e42:	e7ef      	b.n	27e24 <uECC_vli_cmp_unsafe+0xe>

00027e44 <uECC_vli_equal>:
	for (i = num_words - 1; i >= 0; --i) {
   27e44:	3a01      	subs	r2, #1
   27e46:	b252      	sxtb	r2, r2
{
   27e48:	b570      	push	{r4, r5, r6, lr}
   27e4a:	0093      	lsls	r3, r2, #2
	uECC_word_t diff = 0;
   27e4c:	2400      	movs	r4, #0
	for (i = num_words - 1; i >= 0; --i) {
   27e4e:	2a00      	cmp	r2, #0
   27e50:	da03      	bge.n	27e5a <uECC_vli_equal+0x16>
}
   27e52:	1c20      	adds	r0, r4, #0
   27e54:	bf18      	it	ne
   27e56:	2001      	movne	r0, #1
   27e58:	bd70      	pop	{r4, r5, r6, pc}
		diff |= (left[i] ^ right[i]);
   27e5a:	58c5      	ldr	r5, [r0, r3]
   27e5c:	58ce      	ldr	r6, [r1, r3]
	for (i = num_words - 1; i >= 0; --i) {
   27e5e:	3a01      	subs	r2, #1
		diff |= (left[i] ^ right[i]);
   27e60:	4075      	eors	r5, r6
   27e62:	432c      	orrs	r4, r5
	for (i = num_words - 1; i >= 0; --i) {
   27e64:	b252      	sxtb	r2, r2
   27e66:	3b04      	subs	r3, #4
   27e68:	e7f1      	b.n	27e4e <uECC_vli_equal+0xa>

00027e6a <uECC_vli_sub>:
{
   27e6a:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   27e6c:	2400      	movs	r4, #0
{
   27e6e:	4607      	mov	r7, r0
   27e70:	469c      	mov	ip, r3
	uECC_word_t borrow = 0;
   27e72:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   27e74:	b265      	sxtb	r5, r4
   27e76:	45ac      	cmp	ip, r5
   27e78:	dc00      	bgt.n	27e7c <uECC_vli_sub+0x12>
}
   27e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t diff = left[i] - right[i] - borrow;
   27e7c:	f851 6024 	ldr.w	r6, [r1, r4, lsl #2]
   27e80:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   27e84:	1a35      	subs	r5, r6, r0
   27e86:	1aed      	subs	r5, r5, r3
		borrow = cond_set(val, borrow, (diff != left[i]));
   27e88:	42ae      	cmp	r6, r5
		uECC_word_t val = (diff > left[i]);
   27e8a:	bf34      	ite	cc
   27e8c:	2601      	movcc	r6, #1
   27e8e:	2600      	movcs	r6, #0
		result[i] = diff;
   27e90:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   27e94:	bf18      	it	ne
   27e96:	4630      	movne	r0, r6
		result[i] = diff;
   27e98:	3401      	adds	r4, #1
   27e9a:	e7eb      	b.n	27e74 <uECC_vli_sub+0xa>

00027e9c <uECC_vli_modAdd>:
{
   27e9c:	b570      	push	{r4, r5, r6, lr}
   27e9e:	f99d 4010 	ldrsb.w	r4, [sp, #16]
   27ea2:	461e      	mov	r6, r3
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   27ea4:	4623      	mov	r3, r4
{
   27ea6:	4605      	mov	r5, r0
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   27ea8:	f7ff feae 	bl	27c08 <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   27eac:	b930      	cbnz	r0, 27ebc <uECC_vli_modAdd+0x20>
   27eae:	4622      	mov	r2, r4
   27eb0:	4629      	mov	r1, r5
   27eb2:	4630      	mov	r0, r6
   27eb4:	f7ff ffaf 	bl	27e16 <uECC_vli_cmp_unsafe>
   27eb8:	2801      	cmp	r0, #1
   27eba:	d007      	beq.n	27ecc <uECC_vli_modAdd+0x30>
		uECC_vli_sub(result, result, mod, num_words);
   27ebc:	4623      	mov	r3, r4
   27ebe:	4632      	mov	r2, r6
   27ec0:	4629      	mov	r1, r5
   27ec2:	4628      	mov	r0, r5
}
   27ec4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_sub(result, result, mod, num_words);
   27ec8:	f7ff bfcf 	b.w	27e6a <uECC_vli_sub>
}
   27ecc:	bd70      	pop	{r4, r5, r6, pc}

00027ece <uECC_vli_modSub>:
{
   27ece:	b570      	push	{r4, r5, r6, lr}
   27ed0:	f99d 4010 	ldrsb.w	r4, [sp, #16]
   27ed4:	461e      	mov	r6, r3
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   27ed6:	4623      	mov	r3, r4
{
   27ed8:	4605      	mov	r5, r0
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   27eda:	f7ff ffc6 	bl	27e6a <uECC_vli_sub>
	if (l_borrow) {
   27ede:	b138      	cbz	r0, 27ef0 <uECC_vli_modSub+0x22>
		uECC_vli_add(result, result, mod, num_words);
   27ee0:	4623      	mov	r3, r4
   27ee2:	4632      	mov	r2, r6
   27ee4:	4629      	mov	r1, r5
   27ee6:	4628      	mov	r0, r5
}
   27ee8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_add(result, result, mod, num_words);
   27eec:	f7ff be8c 	b.w	27c08 <uECC_vli_add>
}
   27ef0:	bd70      	pop	{r4, r5, r6, pc}

00027ef2 <uECC_vli_mmod>:
{
   27ef2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27ef6:	b0a5      	sub	sp, #148	; 0x94
   27ef8:	461d      	mov	r5, r3
	uECC_word_t *v[2] = {tmp, product};
   27efa:	ab14      	add	r3, sp, #80	; 0x50
   27efc:	e9cd 3102 	strd	r3, r1, [sp, #8]
{
   27f00:	4681      	mov	r9, r0
			   uECC_vli_numBits(mod, num_words);
   27f02:	4629      	mov	r1, r5
   27f04:	4610      	mov	r0, r2
{
   27f06:	4617      	mov	r7, r2
			   uECC_vli_numBits(mod, num_words);
   27f08:	f7ff ff58 	bl	27dbc <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   27f0c:	ebc0 1085 	rsb	r0, r0, r5, lsl #6
   27f10:	b204      	sxth	r4, r0
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   27f12:	2c00      	cmp	r4, #0
   27f14:	4626      	mov	r6, r4
   27f16:	bfb8      	it	lt
   27f18:	f104 061f 	addlt.w	r6, r4, #31
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   27f1c:	4263      	negs	r3, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   27f1e:	f346 1647 	sbfx	r6, r6, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   27f22:	f003 031f 	and.w	r3, r3, #31
   27f26:	f004 081f 	and.w	r8, r4, #31
	uECC_vli_clear(mod_multiple, word_shift);
   27f2a:	a804      	add	r0, sp, #16
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   27f2c:	bf58      	it	pl
   27f2e:	f1c3 0800 	rsbpl	r8, r3, #0
	uECC_vli_clear(mod_multiple, word_shift);
   27f32:	4631      	mov	r1, r6
   27f34:	f7ff ff1e 	bl	27d74 <uECC_vli_clear>
	if (bit_shift > 0) {
   27f38:	f1b8 0f00 	cmp.w	r8, #0
   27f3c:	b230      	sxth	r0, r6
   27f3e:	dd2d      	ble.n	27f9c <uECC_vli_mmod+0xaa>
   27f40:	ab04      	add	r3, sp, #16
	uECC_word_t carry = 0;
   27f42:	2200      	movs	r2, #0
   27f44:	eb03 0080 	add.w	r0, r3, r0, lsl #2
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   27f48:	f1c8 0c20 	rsb	ip, r8, #32
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   27f4c:	4613      	mov	r3, r2
   27f4e:	429d      	cmp	r5, r3
   27f50:	d819      	bhi.n	27f86 <uECC_vli_mmod+0x94>
		for (i = 0; i < num_words * 2; ++i) {
   27f52:	b22f      	sxth	r7, r5
   27f54:	007b      	lsls	r3, r7, #1
   27f56:	9301      	str	r3, [sp, #4]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   27f58:	ab04      	add	r3, sp, #16
   27f5a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   27f5e:	f105 38ff 	add.w	r8, r5, #4294967295
   27f62:	ab24      	add	r3, sp, #144	; 0x90
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   27f64:	2601      	movs	r6, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   27f66:	eb03 0888 	add.w	r8, r3, r8, lsl #2
	for (index = 1; shift >= 0; --shift) {
   27f6a:	2c00      	cmp	r4, #0
   27f6c:	da54      	bge.n	28018 <uECC_vli_mmod+0x126>
	uECC_vli_set(result, v[index], num_words);
   27f6e:	ab24      	add	r3, sp, #144	; 0x90
   27f70:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   27f74:	462a      	mov	r2, r5
   27f76:	f856 1c88 	ldr.w	r1, [r6, #-136]
   27f7a:	4648      	mov	r0, r9
   27f7c:	f7ff ff3f 	bl	27dfe <uECC_vli_set>
}
   27f80:	b025      	add	sp, #148	; 0x94
   27f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   27f86:	f857 6023 	ldr.w	r6, [r7, r3, lsl #2]
   27f8a:	fa06 f108 	lsl.w	r1, r6, r8
   27f8e:	430a      	orrs	r2, r1
   27f90:	f840 2b04 	str.w	r2, [r0], #4
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   27f94:	3301      	adds	r3, #1
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   27f96:	fa26 f20c 	lsr.w	r2, r6, ip
   27f9a:	e7d8      	b.n	27f4e <uECC_vli_mmod+0x5c>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   27f9c:	ab04      	add	r3, sp, #16
   27f9e:	462a      	mov	r2, r5
   27fa0:	4639      	mov	r1, r7
   27fa2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   27fa6:	f7ff ff2a 	bl	27dfe <uECC_vli_set>
   27faa:	e7d2      	b.n	27f52 <uECC_vli_mmod+0x60>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   27fac:	fa0f fe82 	sxth.w	lr, r2
   27fb0:	f85a 3c88 	ldr.w	r3, [sl, #-136]
   27fb4:	f853 b02e 	ldr.w	fp, [r3, lr, lsl #2]
   27fb8:	ab24      	add	r3, sp, #144	; 0x90
   27fba:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   27fbe:	3001      	adds	r0, #1
   27fc0:	f852 3c80 	ldr.w	r3, [r2, #-128]
   27fc4:	440b      	add	r3, r1
   27fc6:	ebbb 0303 	subs.w	r3, fp, r3
   27fca:	bf34      	ite	cc
   27fcc:	2201      	movcc	r2, #1
   27fce:	2200      	movcs	r2, #0
			if (diff != v[index][i]) {
   27fd0:	459b      	cmp	fp, r3
				borrow = (diff > v[index][i]);
   27fd2:	bf18      	it	ne
   27fd4:	4611      	movne	r1, r2
			v[1 - index][i] = diff;
   27fd6:	f85c 2c88 	ldr.w	r2, [ip, #-136]
   27fda:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
		for (i = 0; i < num_words * 2; ++i) {
   27fde:	9b01      	ldr	r3, [sp, #4]
   27fe0:	b242      	sxtb	r2, r0
   27fe2:	429a      	cmp	r2, r3
   27fe4:	dbe2      	blt.n	27fac <uECC_vli_mmod+0xba>
		index = !(index ^ borrow);
   27fe6:	1a73      	subs	r3, r6, r1
   27fe8:	425e      	negs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   27fea:	4629      	mov	r1, r5
   27fec:	a804      	add	r0, sp, #16
		index = !(index ^ borrow);
   27fee:	415e      	adcs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   27ff0:	f7ff fe22 	bl	27c38 <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   27ff4:	ab24      	add	r3, sp, #144	; 0x90
   27ff6:	eb03 0385 	add.w	r3, r3, r5, lsl #2
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   27ffa:	4629      	mov	r1, r5
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   27ffc:	f853 2c80 	ldr.w	r2, [r3, #-128]
   28000:	f858 3c80 	ldr.w	r3, [r8, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   28004:	4638      	mov	r0, r7
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   28006:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
	for (index = 1; shift >= 0; --shift) {
   2800a:	3c01      	subs	r4, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   2800c:	f848 3c80 	str.w	r3, [r8, #-128]
	for (index = 1; shift >= 0; --shift) {
   28010:	b224      	sxth	r4, r4
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   28012:	f7ff fe11 	bl	27c38 <uECC_vli_rshift1>
   28016:	e7a8      	b.n	27f6a <uECC_vli_mmod+0x78>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   28018:	ab24      	add	r3, sp, #144	; 0x90
   2801a:	2000      	movs	r0, #0
			v[1 - index][i] = diff;
   2801c:	f1c6 0c01 	rsb	ip, r6, #1
		uECC_word_t borrow = 0;
   28020:	4601      	mov	r1, r0
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   28022:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
			v[1 - index][i] = diff;
   28026:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   2802a:	e7d8      	b.n	27fde <uECC_vli_mmod+0xec>

0002802c <uECC_vli_modMult_fast>:
{
   2802c:	b530      	push	{r4, r5, lr}
   2802e:	461c      	mov	r4, r3
   28030:	b091      	sub	sp, #68	; 0x44
   28032:	4605      	mov	r5, r0
	uECC_vli_mult(product, left, right, curve->num_words);
   28034:	f993 3000 	ldrsb.w	r3, [r3]
   28038:	4668      	mov	r0, sp
   2803a:	f7ff fe26 	bl	27c8a <uECC_vli_mult>
	curve->mmod_fast(result, product);
   2803e:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   28042:	4669      	mov	r1, sp
   28044:	4628      	mov	r0, r5
   28046:	4798      	blx	r3
}
   28048:	b011      	add	sp, #68	; 0x44
   2804a:	bd30      	pop	{r4, r5, pc}

0002804c <uECC_vli_modSquare_fast>:
	uECC_vli_modMult_fast(result, left, left, curve);
   2804c:	4613      	mov	r3, r2
   2804e:	460a      	mov	r2, r1
   28050:	f7ff bfec 	b.w	2802c <uECC_vli_modMult_fast>

00028054 <double_jacobian_default>:
{
   28054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wordcount_t num_words = curve->num_words;
   28058:	f993 6000 	ldrsb.w	r6, [r3]
{
   2805c:	b092      	sub	sp, #72	; 0x48
   2805e:	4604      	mov	r4, r0
   28060:	4689      	mov	r9, r1
	if (uECC_vli_isZero(Z1, num_words)) {
   28062:	4610      	mov	r0, r2
   28064:	4631      	mov	r1, r6
{
   28066:	4615      	mov	r5, r2
   28068:	4698      	mov	r8, r3
	if (uECC_vli_isZero(Z1, num_words)) {
   2806a:	f7ff fe8e 	bl	27d8a <uECC_vli_isZero>
   2806e:	2800      	cmp	r0, #0
   28070:	f040 8091 	bne.w	28196 <double_jacobian_default+0x142>
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   28074:	4642      	mov	r2, r8
   28076:	4649      	mov	r1, r9
   28078:	a802      	add	r0, sp, #8
   2807a:	f7ff ffe7 	bl	2804c <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   2807e:	4643      	mov	r3, r8
   28080:	aa02      	add	r2, sp, #8
   28082:	4621      	mov	r1, r4
   28084:	a80a      	add	r0, sp, #40	; 0x28
   28086:	f7ff ffd1 	bl	2802c <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   2808a:	a902      	add	r1, sp, #8
   2808c:	4608      	mov	r0, r1
   2808e:	4642      	mov	r2, r8
   28090:	f7ff ffdc 	bl	2804c <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   28094:	4643      	mov	r3, r8
   28096:	462a      	mov	r2, r5
   28098:	4649      	mov	r1, r9
   2809a:	4648      	mov	r0, r9
   2809c:	f7ff ffc6 	bl	2802c <uECC_vli_modMult_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   280a0:	f108 0704 	add.w	r7, r8, #4
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   280a4:	4642      	mov	r2, r8
   280a6:	4629      	mov	r1, r5
   280a8:	4628      	mov	r0, r5
   280aa:	f7ff ffcf 	bl	2804c <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   280ae:	463b      	mov	r3, r7
   280b0:	462a      	mov	r2, r5
   280b2:	4621      	mov	r1, r4
   280b4:	4620      	mov	r0, r4
   280b6:	9600      	str	r6, [sp, #0]
   280b8:	f7ff fef0 	bl	27e9c <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   280bc:	463b      	mov	r3, r7
   280be:	462a      	mov	r2, r5
   280c0:	4629      	mov	r1, r5
   280c2:	4628      	mov	r0, r5
   280c4:	9600      	str	r6, [sp, #0]
   280c6:	f7ff fee9 	bl	27e9c <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   280ca:	463b      	mov	r3, r7
   280cc:	462a      	mov	r2, r5
   280ce:	4621      	mov	r1, r4
   280d0:	4628      	mov	r0, r5
   280d2:	9600      	str	r6, [sp, #0]
   280d4:	f7ff fefb 	bl	27ece <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   280d8:	4643      	mov	r3, r8
   280da:	462a      	mov	r2, r5
   280dc:	4621      	mov	r1, r4
   280de:	4620      	mov	r0, r4
   280e0:	f7ff ffa4 	bl	2802c <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   280e4:	463b      	mov	r3, r7
   280e6:	4622      	mov	r2, r4
   280e8:	4621      	mov	r1, r4
   280ea:	4628      	mov	r0, r5
   280ec:	9600      	str	r6, [sp, #0]
   280ee:	f7ff fed5 	bl	27e9c <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   280f2:	463b      	mov	r3, r7
   280f4:	9600      	str	r6, [sp, #0]
   280f6:	462a      	mov	r2, r5
   280f8:	4621      	mov	r1, r4
   280fa:	4620      	mov	r0, r4
   280fc:	f7ff fece 	bl	27e9c <uECC_vli_modAdd>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   28100:	6823      	ldr	r3, [r4, #0]
	if (uECC_vli_testBit(X1, 0)) {
   28102:	07db      	lsls	r3, r3, #31
   28104:	d54a      	bpl.n	2819c <double_jacobian_default+0x148>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   28106:	4633      	mov	r3, r6
   28108:	463a      	mov	r2, r7
   2810a:	4621      	mov	r1, r4
   2810c:	4620      	mov	r0, r4
   2810e:	f7ff fd7b 	bl	27c08 <uECC_vli_add>
		uECC_vli_rshift1(X1, num_words);
   28112:	4631      	mov	r1, r6
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   28114:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   28116:	4620      	mov	r0, r4
   28118:	f7ff fd8e 	bl	27c38 <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   2811c:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   28120:	3b01      	subs	r3, #1
   28122:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
   28126:	ea40 70ca 	orr.w	r0, r0, sl, lsl #31
   2812a:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   2812e:	4642      	mov	r2, r8
   28130:	4621      	mov	r1, r4
   28132:	4628      	mov	r0, r5
   28134:	f7ff ff8a 	bl	2804c <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   28138:	463b      	mov	r3, r7
   2813a:	aa0a      	add	r2, sp, #40	; 0x28
   2813c:	4629      	mov	r1, r5
   2813e:	4628      	mov	r0, r5
   28140:	9600      	str	r6, [sp, #0]
   28142:	f7ff fec4 	bl	27ece <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   28146:	463b      	mov	r3, r7
   28148:	aa0a      	add	r2, sp, #40	; 0x28
   2814a:	4629      	mov	r1, r5
   2814c:	4628      	mov	r0, r5
   2814e:	9600      	str	r6, [sp, #0]
   28150:	f7ff febd 	bl	27ece <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   28154:	a90a      	add	r1, sp, #40	; 0x28
   28156:	4608      	mov	r0, r1
   28158:	463b      	mov	r3, r7
   2815a:	462a      	mov	r2, r5
   2815c:	9600      	str	r6, [sp, #0]
   2815e:	f7ff feb6 	bl	27ece <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   28162:	4643      	mov	r3, r8
   28164:	aa0a      	add	r2, sp, #40	; 0x28
   28166:	4621      	mov	r1, r4
   28168:	4620      	mov	r0, r4
   2816a:	f7ff ff5f 	bl	2802c <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   2816e:	aa02      	add	r2, sp, #8
   28170:	463b      	mov	r3, r7
   28172:	4610      	mov	r0, r2
   28174:	4621      	mov	r1, r4
   28176:	9600      	str	r6, [sp, #0]
   28178:	f7ff fea9 	bl	27ece <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   2817c:	4632      	mov	r2, r6
   2817e:	4629      	mov	r1, r5
   28180:	4620      	mov	r0, r4
   28182:	f7ff fe3c 	bl	27dfe <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   28186:	4649      	mov	r1, r9
   28188:	4628      	mov	r0, r5
   2818a:	f7ff fe38 	bl	27dfe <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   2818e:	a902      	add	r1, sp, #8
   28190:	4648      	mov	r0, r9
   28192:	f7ff fe34 	bl	27dfe <uECC_vli_set>
}
   28196:	b012      	add	sp, #72	; 0x48
   28198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uECC_vli_rshift1(X1, num_words);
   2819c:	4631      	mov	r1, r6
   2819e:	4620      	mov	r0, r4
   281a0:	f7ff fd4a 	bl	27c38 <uECC_vli_rshift1>
   281a4:	e7c3      	b.n	2812e <double_jacobian_default+0xda>

000281a6 <x_side_default>:
{
   281a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   281aa:	4615      	mov	r5, r2
   281ac:	b08a      	sub	sp, #40	; 0x28
   281ae:	4604      	mov	r4, r0
   281b0:	4688      	mov	r8, r1
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   281b2:	221c      	movs	r2, #28
   281b4:	2100      	movs	r1, #0
   281b6:	a803      	add	r0, sp, #12
   281b8:	f005 fa1f 	bl	2d5fa <memset>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   281bc:	1d2e      	adds	r6, r5, #4
	wordcount_t num_words = curve->num_words;
   281be:	f995 7000 	ldrsb.w	r7, [r5]
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   281c2:	2303      	movs	r3, #3
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   281c4:	462a      	mov	r2, r5
   281c6:	4641      	mov	r1, r8
   281c8:	4620      	mov	r0, r4
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   281ca:	9302      	str	r3, [sp, #8]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   281cc:	f7ff ff3e 	bl	2804c <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   281d0:	4633      	mov	r3, r6
   281d2:	aa02      	add	r2, sp, #8
   281d4:	4621      	mov	r1, r4
   281d6:	4620      	mov	r0, r4
   281d8:	9700      	str	r7, [sp, #0]
   281da:	f7ff fe78 	bl	27ece <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   281de:	462b      	mov	r3, r5
   281e0:	4642      	mov	r2, r8
   281e2:	4621      	mov	r1, r4
   281e4:	4620      	mov	r0, r4
   281e6:	f7ff ff21 	bl	2802c <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   281ea:	9700      	str	r7, [sp, #0]
   281ec:	4633      	mov	r3, r6
   281ee:	f105 0284 	add.w	r2, r5, #132	; 0x84
   281f2:	4621      	mov	r1, r4
   281f4:	4620      	mov	r0, r4
   281f6:	f7ff fe51 	bl	27e9c <uECC_vli_modAdd>
}
   281fa:	b00a      	add	sp, #40	; 0x28
   281fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00028200 <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   28200:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   28204:	b09b      	sub	sp, #108	; 0x6c
   28206:	4616      	mov	r6, r2
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   28208:	9c22      	ldr	r4, [sp, #136]	; 0x88
   2820a:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   2820e:	9500      	str	r5, [sp, #0]
{
   28210:	4698      	mov	r8, r3
   28212:	4607      	mov	r7, r0
   28214:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   28216:	4623      	mov	r3, r4
   28218:	4602      	mov	r2, r0
   2821a:	4631      	mov	r1, r6
   2821c:	a802      	add	r0, sp, #8
   2821e:	f7ff fe56 	bl	27ece <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   28222:	a902      	add	r1, sp, #8
   28224:	9a22      	ldr	r2, [sp, #136]	; 0x88
   28226:	4608      	mov	r0, r1
   28228:	f7ff ff10 	bl	2804c <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   2822c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   2822e:	aa02      	add	r2, sp, #8
   28230:	4639      	mov	r1, r7
   28232:	4638      	mov	r0, r7
   28234:	f7ff fefa 	bl	2802c <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   28238:	9b22      	ldr	r3, [sp, #136]	; 0x88
   2823a:	aa02      	add	r2, sp, #8
   2823c:	4631      	mov	r1, r6
   2823e:	4630      	mov	r0, r6
   28240:	f7ff fef4 	bl	2802c <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   28244:	4623      	mov	r3, r4
   28246:	464a      	mov	r2, r9
   28248:	4641      	mov	r1, r8
   2824a:	a802      	add	r0, sp, #8
   2824c:	9500      	str	r5, [sp, #0]
   2824e:	f7ff fe25 	bl	27e9c <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   28252:	4623      	mov	r3, r4
   28254:	464a      	mov	r2, r9
   28256:	4641      	mov	r1, r8
   28258:	4640      	mov	r0, r8
   2825a:	9500      	str	r5, [sp, #0]
   2825c:	f7ff fe37 	bl	27ece <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   28260:	4623      	mov	r3, r4
   28262:	463a      	mov	r2, r7
   28264:	4631      	mov	r1, r6
   28266:	a80a      	add	r0, sp, #40	; 0x28
   28268:	9500      	str	r5, [sp, #0]
   2826a:	f7ff fe30 	bl	27ece <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   2826e:	9b22      	ldr	r3, [sp, #136]	; 0x88
   28270:	aa0a      	add	r2, sp, #40	; 0x28
   28272:	4649      	mov	r1, r9
   28274:	4648      	mov	r0, r9
   28276:	f7ff fed9 	bl	2802c <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   2827a:	4623      	mov	r3, r4
   2827c:	4632      	mov	r2, r6
   2827e:	4639      	mov	r1, r7
   28280:	a80a      	add	r0, sp, #40	; 0x28
   28282:	9500      	str	r5, [sp, #0]
   28284:	f7ff fe0a 	bl	27e9c <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   28288:	9a22      	ldr	r2, [sp, #136]	; 0x88
   2828a:	4641      	mov	r1, r8
   2828c:	4630      	mov	r0, r6
   2828e:	f7ff fedd 	bl	2804c <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   28292:	4623      	mov	r3, r4
   28294:	aa0a      	add	r2, sp, #40	; 0x28
   28296:	4631      	mov	r1, r6
   28298:	4630      	mov	r0, r6
   2829a:	9500      	str	r5, [sp, #0]
   2829c:	f7ff fe17 	bl	27ece <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   282a0:	4623      	mov	r3, r4
   282a2:	4632      	mov	r2, r6
   282a4:	4639      	mov	r1, r7
   282a6:	a812      	add	r0, sp, #72	; 0x48
   282a8:	9500      	str	r5, [sp, #0]
   282aa:	f7ff fe10 	bl	27ece <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   282ae:	9b22      	ldr	r3, [sp, #136]	; 0x88
   282b0:	aa12      	add	r2, sp, #72	; 0x48
   282b2:	4641      	mov	r1, r8
   282b4:	4640      	mov	r0, r8
   282b6:	f7ff feb9 	bl	2802c <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   282ba:	4623      	mov	r3, r4
   282bc:	464a      	mov	r2, r9
   282be:	4641      	mov	r1, r8
   282c0:	4640      	mov	r0, r8
   282c2:	9500      	str	r5, [sp, #0]
   282c4:	f7ff fe03 	bl	27ece <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   282c8:	9a22      	ldr	r2, [sp, #136]	; 0x88
   282ca:	a902      	add	r1, sp, #8
   282cc:	a812      	add	r0, sp, #72	; 0x48
   282ce:	f7ff febd 	bl	2804c <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   282d2:	a912      	add	r1, sp, #72	; 0x48
   282d4:	4623      	mov	r3, r4
   282d6:	aa0a      	add	r2, sp, #40	; 0x28
   282d8:	4608      	mov	r0, r1
   282da:	9500      	str	r5, [sp, #0]
   282dc:	f7ff fdf7 	bl	27ece <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   282e0:	4623      	mov	r3, r4
   282e2:	463a      	mov	r2, r7
   282e4:	a912      	add	r1, sp, #72	; 0x48
   282e6:	a80a      	add	r0, sp, #40	; 0x28
   282e8:	9500      	str	r5, [sp, #0]
   282ea:	f7ff fdf0 	bl	27ece <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   282ee:	a90a      	add	r1, sp, #40	; 0x28
   282f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
   282f2:	aa02      	add	r2, sp, #8
   282f4:	4608      	mov	r0, r1
   282f6:	f7ff fe99 	bl	2802c <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   282fa:	4623      	mov	r3, r4
   282fc:	464a      	mov	r2, r9
   282fe:	a90a      	add	r1, sp, #40	; 0x28
   28300:	4648      	mov	r0, r9
   28302:	9500      	str	r5, [sp, #0]
   28304:	f7ff fde3 	bl	27ece <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   28308:	462a      	mov	r2, r5
   2830a:	a912      	add	r1, sp, #72	; 0x48
   2830c:	4638      	mov	r0, r7
   2830e:	f7ff fd76 	bl	27dfe <uECC_vli_set>
}
   28312:	b01b      	add	sp, #108	; 0x6c
   28314:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00028318 <uECC_vli_modInv>:
{
   28318:	b5f0      	push	{r4, r5, r6, r7, lr}
   2831a:	460f      	mov	r7, r1
   2831c:	b0a1      	sub	sp, #132	; 0x84
   2831e:	4606      	mov	r6, r0
	if (uECC_vli_isZero(input, num_words)) {
   28320:	4619      	mov	r1, r3
   28322:	4638      	mov	r0, r7
{
   28324:	4615      	mov	r5, r2
   28326:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   28328:	f7ff fd2f 	bl	27d8a <uECC_vli_isZero>
   2832c:	b120      	cbz	r0, 28338 <uECC_vli_modInv+0x20>
		uECC_vli_clear(result, num_words);
   2832e:	4630      	mov	r0, r6
   28330:	f7ff fd20 	bl	27d74 <uECC_vli_clear>
}
   28334:	b021      	add	sp, #132	; 0x84
   28336:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uECC_vli_set(a, input, num_words);
   28338:	4622      	mov	r2, r4
   2833a:	4639      	mov	r1, r7
   2833c:	4668      	mov	r0, sp
   2833e:	f7ff fd5e 	bl	27dfe <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   28342:	4629      	mov	r1, r5
   28344:	a808      	add	r0, sp, #32
   28346:	f7ff fd5a 	bl	27dfe <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   2834a:	a810      	add	r0, sp, #64	; 0x40
   2834c:	4621      	mov	r1, r4
   2834e:	f7ff fd11 	bl	27d74 <uECC_vli_clear>
	u[0] = 1;
   28352:	2301      	movs	r3, #1
	uECC_vli_clear(v, num_words);
   28354:	a818      	add	r0, sp, #96	; 0x60
	u[0] = 1;
   28356:	9310      	str	r3, [sp, #64]	; 0x40
	uECC_vli_clear(v, num_words);
   28358:	f7ff fd0c 	bl	27d74 <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   2835c:	4622      	mov	r2, r4
   2835e:	a908      	add	r1, sp, #32
   28360:	4668      	mov	r0, sp
   28362:	f7ff fd58 	bl	27e16 <uECC_vli_cmp_unsafe>
   28366:	b928      	cbnz	r0, 28374 <uECC_vli_modInv+0x5c>
  	uECC_vli_set(result, u, num_words);
   28368:	4622      	mov	r2, r4
   2836a:	a910      	add	r1, sp, #64	; 0x40
   2836c:	4630      	mov	r0, r6
   2836e:	f7ff fd46 	bl	27dfe <uECC_vli_set>
   28372:	e7df      	b.n	28334 <uECC_vli_modInv+0x1c>
		if (EVEN(a)) {
   28374:	9b00      	ldr	r3, [sp, #0]
   28376:	07da      	lsls	r2, r3, #31
   28378:	d409      	bmi.n	2838e <uECC_vli_modInv+0x76>
			uECC_vli_rshift1(a, num_words);
   2837a:	4621      	mov	r1, r4
   2837c:	4668      	mov	r0, sp
   2837e:	f7ff fc5b 	bl	27c38 <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   28382:	4622      	mov	r2, r4
   28384:	4629      	mov	r1, r5
   28386:	a810      	add	r0, sp, #64	; 0x40
      			vli_modInv_update(v, mod, num_words);
   28388:	f7ff fc63 	bl	27c52 <vli_modInv_update>
   2838c:	e7e6      	b.n	2835c <uECC_vli_modInv+0x44>
    		} else if (EVEN(b)) {
   2838e:	9b08      	ldr	r3, [sp, #32]
   28390:	07db      	lsls	r3, r3, #31
   28392:	d407      	bmi.n	283a4 <uECC_vli_modInv+0x8c>
			uECC_vli_rshift1(b, num_words);
   28394:	4621      	mov	r1, r4
   28396:	a808      	add	r0, sp, #32
   28398:	f7ff fc4e 	bl	27c38 <uECC_vli_rshift1>
      			vli_modInv_update(v, mod, num_words);
   2839c:	4622      	mov	r2, r4
   2839e:	4629      	mov	r1, r5
   283a0:	a818      	add	r0, sp, #96	; 0x60
   283a2:	e7f1      	b.n	28388 <uECC_vli_modInv+0x70>
		} else if (cmpResult > 0) {
   283a4:	2800      	cmp	r0, #0
			uECC_vli_sub(a, a, b, num_words);
   283a6:	4623      	mov	r3, r4
		} else if (cmpResult > 0) {
   283a8:	dd1c      	ble.n	283e4 <uECC_vli_modInv+0xcc>
			uECC_vli_sub(a, a, b, num_words);
   283aa:	aa08      	add	r2, sp, #32
   283ac:	4669      	mov	r1, sp
   283ae:	4668      	mov	r0, sp
   283b0:	f7ff fd5b 	bl	27e6a <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   283b4:	4621      	mov	r1, r4
   283b6:	4668      	mov	r0, sp
   283b8:	f7ff fc3e 	bl	27c38 <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   283bc:	4622      	mov	r2, r4
   283be:	a918      	add	r1, sp, #96	; 0x60
   283c0:	a810      	add	r0, sp, #64	; 0x40
   283c2:	f7ff fd28 	bl	27e16 <uECC_vli_cmp_unsafe>
   283c6:	2800      	cmp	r0, #0
   283c8:	da05      	bge.n	283d6 <uECC_vli_modInv+0xbe>
        			uECC_vli_add(u, u, mod, num_words);
   283ca:	a910      	add	r1, sp, #64	; 0x40
   283cc:	4623      	mov	r3, r4
   283ce:	462a      	mov	r2, r5
   283d0:	4608      	mov	r0, r1
   283d2:	f7ff fc19 	bl	27c08 <uECC_vli_add>
      			uECC_vli_sub(u, u, v, num_words);
   283d6:	a910      	add	r1, sp, #64	; 0x40
   283d8:	4623      	mov	r3, r4
   283da:	aa18      	add	r2, sp, #96	; 0x60
   283dc:	4608      	mov	r0, r1
   283de:	f7ff fd44 	bl	27e6a <uECC_vli_sub>
   283e2:	e7ce      	b.n	28382 <uECC_vli_modInv+0x6a>
      			uECC_vli_sub(b, b, a, num_words);
   283e4:	a908      	add	r1, sp, #32
   283e6:	466a      	mov	r2, sp
   283e8:	4608      	mov	r0, r1
   283ea:	f7ff fd3e 	bl	27e6a <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   283ee:	4621      	mov	r1, r4
   283f0:	a808      	add	r0, sp, #32
   283f2:	f7ff fc21 	bl	27c38 <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   283f6:	4622      	mov	r2, r4
   283f8:	a910      	add	r1, sp, #64	; 0x40
   283fa:	a818      	add	r0, sp, #96	; 0x60
   283fc:	f7ff fd0b 	bl	27e16 <uECC_vli_cmp_unsafe>
   28400:	2800      	cmp	r0, #0
   28402:	da05      	bge.n	28410 <uECC_vli_modInv+0xf8>
        			uECC_vli_add(v, v, mod, num_words);
   28404:	a918      	add	r1, sp, #96	; 0x60
   28406:	4623      	mov	r3, r4
   28408:	462a      	mov	r2, r5
   2840a:	4608      	mov	r0, r1
   2840c:	f7ff fbfc 	bl	27c08 <uECC_vli_add>
      			uECC_vli_sub(v, v, u, num_words);
   28410:	a918      	add	r1, sp, #96	; 0x60
   28412:	4623      	mov	r3, r4
   28414:	aa10      	add	r2, sp, #64	; 0x40
   28416:	4608      	mov	r0, r1
   28418:	f7ff fd27 	bl	27e6a <uECC_vli_sub>
   2841c:	e7be      	b.n	2839c <uECC_vli_modInv+0x84>

0002841e <EccPoint_isZero>:
	return uECC_vli_isZero(point, curve->num_words * 2);
   2841e:	7809      	ldrb	r1, [r1, #0]
   28420:	0049      	lsls	r1, r1, #1
   28422:	b249      	sxtb	r1, r1
   28424:	f7ff bcb1 	b.w	27d8a <uECC_vli_isZero>

00028428 <apply_z>:
{
   28428:	b5f0      	push	{r4, r5, r6, r7, lr}
   2842a:	4615      	mov	r5, r2
   2842c:	b089      	sub	sp, #36	; 0x24
   2842e:	461c      	mov	r4, r3
   28430:	4607      	mov	r7, r0
   28432:	460e      	mov	r6, r1
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   28434:	461a      	mov	r2, r3
   28436:	4629      	mov	r1, r5
   28438:	4668      	mov	r0, sp
   2843a:	f7ff fe07 	bl	2804c <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   2843e:	4623      	mov	r3, r4
   28440:	466a      	mov	r2, sp
   28442:	4639      	mov	r1, r7
   28444:	4638      	mov	r0, r7
   28446:	f7ff fdf1 	bl	2802c <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   2844a:	4623      	mov	r3, r4
   2844c:	462a      	mov	r2, r5
   2844e:	4669      	mov	r1, sp
   28450:	4668      	mov	r0, sp
   28452:	f7ff fdeb 	bl	2802c <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   28456:	4623      	mov	r3, r4
   28458:	466a      	mov	r2, sp
   2845a:	4631      	mov	r1, r6
   2845c:	4630      	mov	r0, r6
   2845e:	f7ff fde5 	bl	2802c <uECC_vli_modMult_fast>
}
   28462:	b009      	add	sp, #36	; 0x24
   28464:	bdf0      	pop	{r4, r5, r6, r7, pc}

00028466 <XYcZ_add>:
{
   28466:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2846a:	b08b      	sub	sp, #44	; 0x2c
   2846c:	4614      	mov	r4, r2
	wordcount_t num_words = curve->num_words;
   2846e:	9d12      	ldr	r5, [sp, #72]	; 0x48
   28470:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   28474:	9600      	str	r6, [sp, #0]
{
   28476:	461f      	mov	r7, r3
   28478:	4680      	mov	r8, r0
   2847a:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   2847c:	462b      	mov	r3, r5
   2847e:	4602      	mov	r2, r0
   28480:	4621      	mov	r1, r4
   28482:	a802      	add	r0, sp, #8
   28484:	f7ff fd23 	bl	27ece <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   28488:	a902      	add	r1, sp, #8
   2848a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   2848c:	4608      	mov	r0, r1
   2848e:	f7ff fddd 	bl	2804c <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   28492:	9b12      	ldr	r3, [sp, #72]	; 0x48
   28494:	aa02      	add	r2, sp, #8
   28496:	4641      	mov	r1, r8
   28498:	4640      	mov	r0, r8
   2849a:	f7ff fdc7 	bl	2802c <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   2849e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   284a0:	aa02      	add	r2, sp, #8
   284a2:	4621      	mov	r1, r4
   284a4:	4620      	mov	r0, r4
   284a6:	f7ff fdc1 	bl	2802c <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   284aa:	462b      	mov	r3, r5
   284ac:	464a      	mov	r2, r9
   284ae:	4639      	mov	r1, r7
   284b0:	4638      	mov	r0, r7
   284b2:	9600      	str	r6, [sp, #0]
   284b4:	f7ff fd0b 	bl	27ece <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   284b8:	9a12      	ldr	r2, [sp, #72]	; 0x48
   284ba:	4639      	mov	r1, r7
   284bc:	a802      	add	r0, sp, #8
   284be:	f7ff fdc5 	bl	2804c <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   284c2:	a902      	add	r1, sp, #8
   284c4:	462b      	mov	r3, r5
   284c6:	4642      	mov	r2, r8
   284c8:	4608      	mov	r0, r1
   284ca:	9600      	str	r6, [sp, #0]
   284cc:	f7ff fcff 	bl	27ece <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   284d0:	a902      	add	r1, sp, #8
   284d2:	462b      	mov	r3, r5
   284d4:	4622      	mov	r2, r4
   284d6:	4608      	mov	r0, r1
   284d8:	9600      	str	r6, [sp, #0]
   284da:	f7ff fcf8 	bl	27ece <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   284de:	462b      	mov	r3, r5
   284e0:	4642      	mov	r2, r8
   284e2:	4621      	mov	r1, r4
   284e4:	4620      	mov	r0, r4
   284e6:	9600      	str	r6, [sp, #0]
   284e8:	f7ff fcf1 	bl	27ece <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   284ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
   284ee:	4622      	mov	r2, r4
   284f0:	4649      	mov	r1, r9
   284f2:	4648      	mov	r0, r9
   284f4:	f7ff fd9a 	bl	2802c <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   284f8:	462b      	mov	r3, r5
   284fa:	aa02      	add	r2, sp, #8
   284fc:	4641      	mov	r1, r8
   284fe:	4620      	mov	r0, r4
   28500:	9600      	str	r6, [sp, #0]
   28502:	f7ff fce4 	bl	27ece <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   28506:	9b12      	ldr	r3, [sp, #72]	; 0x48
   28508:	4622      	mov	r2, r4
   2850a:	4639      	mov	r1, r7
   2850c:	4638      	mov	r0, r7
   2850e:	f7ff fd8d 	bl	2802c <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   28512:	462b      	mov	r3, r5
   28514:	464a      	mov	r2, r9
   28516:	4639      	mov	r1, r7
   28518:	4638      	mov	r0, r7
   2851a:	9600      	str	r6, [sp, #0]
   2851c:	f7ff fcd7 	bl	27ece <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   28520:	4632      	mov	r2, r6
   28522:	a902      	add	r1, sp, #8
   28524:	4620      	mov	r0, r4
   28526:	f7ff fc6a 	bl	27dfe <uECC_vli_set>
}
   2852a:	b00b      	add	sp, #44	; 0x2c
   2852c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00028530 <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   28530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28534:	b0b1      	sub	sp, #196	; 0xc4
   28536:	e9cd 0104 	strd	r0, r1, [sp, #16]
   2853a:	9c3b      	ldr	r4, [sp, #236]	; 0xec
   2853c:	9206      	str	r2, [sp, #24]
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   2853e:	f994 7000 	ldrsb.w	r7, [r4]

	uECC_vli_set(Rx[1], point, num_words);
   28542:	a818      	add	r0, sp, #96	; 0x60
   28544:	463a      	mov	r2, r7
{
   28546:	461e      	mov	r6, r3
	uECC_vli_set(Rx[1], point, num_words);
   28548:	f7ff fc59 	bl	27dfe <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   2854c:	00bb      	lsls	r3, r7, #2
   2854e:	9307      	str	r3, [sp, #28]
   28550:	9b05      	ldr	r3, [sp, #20]
   28552:	00ba      	lsls	r2, r7, #2
   28554:	4413      	add	r3, r2
   28556:	4619      	mov	r1, r3
   28558:	463a      	mov	r2, r7
   2855a:	a828      	add	r0, sp, #160	; 0xa0
   2855c:	9302      	str	r3, [sp, #8]
   2855e:	f7ff fc4e 	bl	27dfe <uECC_vli_set>
	wordcount_t num_words = curve->num_words;
   28562:	f994 5000 	ldrsb.w	r5, [r4]
	if (initial_Z) {
   28566:	2e00      	cmp	r6, #0
   28568:	f000 8087 	beq.w	2867a <EccPoint_mult+0x14a>
		uECC_vli_set(z, initial_Z, num_words);
   2856c:	462a      	mov	r2, r5
   2856e:	4631      	mov	r1, r6
   28570:	a808      	add	r0, sp, #32
   28572:	f7ff fc44 	bl	27dfe <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   28576:	ae10      	add	r6, sp, #64	; 0x40
   28578:	462a      	mov	r2, r5
   2857a:	a918      	add	r1, sp, #96	; 0x60
   2857c:	4630      	mov	r0, r6
	uECC_vli_set(Y2, Y1, num_words);
   2857e:	f10d 0980 	add.w	r9, sp, #128	; 0x80
	uECC_vli_set(X2, X1, num_words);
   28582:	f7ff fc3c 	bl	27dfe <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   28586:	a928      	add	r1, sp, #160	; 0xa0
   28588:	4648      	mov	r0, r9
   2858a:	f7ff fc38 	bl	27dfe <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   2858e:	4623      	mov	r3, r4
   28590:	aa08      	add	r2, sp, #32
   28592:	a928      	add	r1, sp, #160	; 0xa0
   28594:	a818      	add	r0, sp, #96	; 0x60
   28596:	f7ff ff47 	bl	28428 <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   2859a:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
   2859e:	4623      	mov	r3, r4
   285a0:	aa08      	add	r2, sp, #32
   285a2:	a928      	add	r1, sp, #160	; 0xa0
   285a4:	a818      	add	r0, sp, #96	; 0x60
   285a6:	47a8      	blx	r5
	apply_z(X2, Y2, z, curve);
   285a8:	4623      	mov	r3, r4
   285aa:	aa08      	add	r2, sp, #32
   285ac:	4649      	mov	r1, r9
   285ae:	4630      	mov	r0, r6
   285b0:	f7ff ff3a 	bl	28428 <apply_z>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);

	for (i = num_bits - 2; i > 0; --i) {
   285b4:	f9bd 50e8 	ldrsh.w	r5, [sp, #232]	; 0xe8
   285b8:	3d02      	subs	r5, #2
   285ba:	b22d      	sxth	r5, r5
   285bc:	2d00      	cmp	r5, #0
   285be:	dc63      	bgt.n	28688 <EccPoint_mult+0x158>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   285c0:	9b06      	ldr	r3, [sp, #24]
   285c2:	681d      	ldr	r5, [r3, #0]
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
	}

	nb = !uECC_vli_testBit(scalar, 0);
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   285c4:	9400      	str	r4, [sp, #0]
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   285c6:	f005 0601 	and.w	r6, r5, #1
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   285ca:	ab10      	add	r3, sp, #64	; 0x40
   285cc:	0176      	lsls	r6, r6, #5
   285ce:	43ed      	mvns	r5, r5
   285d0:	eb03 0806 	add.w	r8, r3, r6
   285d4:	f005 0501 	and.w	r5, r5, #1
   285d8:	ab20      	add	r3, sp, #128	; 0x80
   285da:	441e      	add	r6, r3
   285dc:	016d      	lsls	r5, r5, #5
   285de:	ab10      	add	r3, sp, #64	; 0x40
   285e0:	eb03 0905 	add.w	r9, r3, r5
   285e4:	ab20      	add	r3, sp, #128	; 0x80
   285e6:	441d      	add	r5, r3

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   285e8:	f104 0a04 	add.w	sl, r4, #4
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   285ec:	462b      	mov	r3, r5
   285ee:	464a      	mov	r2, r9
   285f0:	4631      	mov	r1, r6
   285f2:	4640      	mov	r0, r8
   285f4:	f7ff fe04 	bl	28200 <XYcZ_addC>
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   285f8:	4653      	mov	r3, sl
   285fa:	aa10      	add	r2, sp, #64	; 0x40
   285fc:	a918      	add	r1, sp, #96	; 0x60
   285fe:	a808      	add	r0, sp, #32
   28600:	9700      	str	r7, [sp, #0]
   28602:	f7ff fc64 	bl	27ece <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   28606:	a908      	add	r1, sp, #32
   28608:	4623      	mov	r3, r4
   2860a:	4632      	mov	r2, r6
   2860c:	4608      	mov	r0, r1
   2860e:	f7ff fd0d 	bl	2802c <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   28612:	a908      	add	r1, sp, #32
   28614:	4623      	mov	r3, r4
   28616:	9a05      	ldr	r2, [sp, #20]
   28618:	4608      	mov	r0, r1
   2861a:	f7ff fd07 	bl	2802c <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   2861e:	a908      	add	r1, sp, #32
   28620:	463b      	mov	r3, r7
   28622:	4652      	mov	r2, sl
   28624:	4608      	mov	r0, r1
   28626:	f7ff fe77 	bl	28318 <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   2862a:	a908      	add	r1, sp, #32
   2862c:	4623      	mov	r3, r4
   2862e:	9a02      	ldr	r2, [sp, #8]
   28630:	4608      	mov	r0, r1
   28632:	f7ff fcfb 	bl	2802c <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   28636:	a908      	add	r1, sp, #32
   28638:	4623      	mov	r3, r4
   2863a:	4642      	mov	r2, r8
   2863c:	4608      	mov	r0, r1
   2863e:	f7ff fcf5 	bl	2802c <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   28642:	9400      	str	r4, [sp, #0]
   28644:	4633      	mov	r3, r6
   28646:	4642      	mov	r2, r8
   28648:	4629      	mov	r1, r5
   2864a:	4648      	mov	r0, r9
   2864c:	f7ff ff0b 	bl	28466 <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   28650:	4623      	mov	r3, r4
   28652:	aa08      	add	r2, sp, #32
   28654:	a920      	add	r1, sp, #128	; 0x80
   28656:	a810      	add	r0, sp, #64	; 0x40
   28658:	f7ff fee6 	bl	28428 <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   2865c:	463a      	mov	r2, r7
   2865e:	a910      	add	r1, sp, #64	; 0x40
   28660:	9804      	ldr	r0, [sp, #16]
   28662:	f7ff fbcc 	bl	27dfe <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   28666:	9b04      	ldr	r3, [sp, #16]
   28668:	9c07      	ldr	r4, [sp, #28]
   2866a:	4423      	add	r3, r4
   2866c:	a920      	add	r1, sp, #128	; 0x80
   2866e:	4618      	mov	r0, r3
   28670:	f7ff fbc5 	bl	27dfe <uECC_vli_set>
}
   28674:	b031      	add	sp, #196	; 0xc4
   28676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uECC_vli_clear(z, num_words);
   2867a:	4629      	mov	r1, r5
   2867c:	a808      	add	r0, sp, #32
   2867e:	f7ff fb79 	bl	27d74 <uECC_vli_clear>
		z[0] = 1;
   28682:	2301      	movs	r3, #1
   28684:	9308      	str	r3, [sp, #32]
   28686:	e776      	b.n	28576 <EccPoint_mult+0x46>
		nb = !uECC_vli_testBit(scalar, i);
   28688:	4629      	mov	r1, r5
   2868a:	9806      	ldr	r0, [sp, #24]
   2868c:	f7ff fb8c 	bl	27da8 <uECC_vli_testBit>
   28690:	fab0 f080 	clz	r0, r0
   28694:	0940      	lsrs	r0, r0, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   28696:	f1c0 0801 	rsb	r8, r0, #1
   2869a:	ea4f 1848 	mov.w	r8, r8, lsl #5
   2869e:	0140      	lsls	r0, r0, #5
   286a0:	eb06 0b08 	add.w	fp, r6, r8
   286a4:	eb06 0a00 	add.w	sl, r6, r0
   286a8:	44c8      	add	r8, r9
   286aa:	eb09 0300 	add.w	r3, r9, r0
   286ae:	4652      	mov	r2, sl
   286b0:	4641      	mov	r1, r8
   286b2:	4658      	mov	r0, fp
   286b4:	9400      	str	r4, [sp, #0]
   286b6:	9303      	str	r3, [sp, #12]
   286b8:	f7ff fda2 	bl	28200 <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   286bc:	9400      	str	r4, [sp, #0]
   286be:	4643      	mov	r3, r8
   286c0:	465a      	mov	r2, fp
   286c2:	9903      	ldr	r1, [sp, #12]
   286c4:	4650      	mov	r0, sl
   286c6:	f7ff fece 	bl	28466 <XYcZ_add>
	for (i = num_bits - 2; i > 0; --i) {
   286ca:	3d01      	subs	r5, #1
   286cc:	e775      	b.n	285ba <EccPoint_mult+0x8a>

000286ce <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   286ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   286d2:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
   286d6:	f114 051f 	adds.w	r5, r4, #31
   286da:	bf48      	it	mi
   286dc:	f104 053e 	addmi.w	r5, r4, #62	; 0x3e
{
   286e0:	460f      	mov	r7, r1

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   286e2:	f103 0624 	add.w	r6, r3, #36	; 0x24
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   286e6:	f345 1547 	sbfx	r5, r5, #5, #8
{
   286ea:	4690      	mov	r8, r2
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   286ec:	4601      	mov	r1, r0
   286ee:	462b      	mov	r3, r5
   286f0:	4632      	mov	r2, r6
   286f2:	4638      	mov	r0, r7
   286f4:	f7ff fa88 	bl	27c08 <uECC_vli_add>
   286f8:	b990      	cbnz	r0, 28720 <regularize_k+0x52>
   286fa:	ebb4 1f45 	cmp.w	r4, r5, lsl #5
   286fe:	da11      	bge.n	28724 <regularize_k+0x56>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   28700:	4621      	mov	r1, r4
   28702:	4638      	mov	r0, r7
   28704:	f7ff fb50 	bl	27da8 <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   28708:	1c04      	adds	r4, r0, #0
   2870a:	bf18      	it	ne
   2870c:	2401      	movne	r4, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   2870e:	462b      	mov	r3, r5
   28710:	4632      	mov	r2, r6
   28712:	4639      	mov	r1, r7
   28714:	4640      	mov	r0, r8
   28716:	f7ff fa77 	bl	27c08 <uECC_vli_add>

	return carry;
}
   2871a:	4620      	mov	r0, r4
   2871c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   28720:	2401      	movs	r4, #1
   28722:	e7f4      	b.n	2870e <regularize_k+0x40>
   28724:	4604      	mov	r4, r0
   28726:	e7f2      	b.n	2870e <regularize_k+0x40>

00028728 <EccPoint_compute_public_key>:

uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
					uECC_word_t *private_key,
					uECC_Curve curve)
{
   28728:	b530      	push	{r4, r5, lr}
   2872a:	4614      	mov	r4, r2
   2872c:	b095      	sub	sp, #84	; 0x54
   2872e:	4605      	mov	r5, r0

	uECC_word_t tmp1[NUM_ECC_WORDS];
 	uECC_word_t tmp2[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {tmp1, tmp2};
   28730:	aa0c      	add	r2, sp, #48	; 0x30
	uECC_word_t carry;

	/* Regularize the bitcount for the private key so that attackers cannot
	 * use a side channel attack to learn the number of leading zeros. */
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   28732:	4623      	mov	r3, r4
{
   28734:	4608      	mov	r0, r1
	uECC_word_t *p2[2] = {tmp1, tmp2};
   28736:	a904      	add	r1, sp, #16
   28738:	9102      	str	r1, [sp, #8]
   2873a:	9203      	str	r2, [sp, #12]
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   2873c:	f7ff ffc7 	bl	286ce <regularize_k>

	EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
   28740:	fab0 f080 	clz	r0, r0
   28744:	ab14      	add	r3, sp, #80	; 0x50
   28746:	0940      	lsrs	r0, r0, #5
   28748:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   2874c:	8863      	ldrh	r3, [r4, #2]
   2874e:	9401      	str	r4, [sp, #4]
   28750:	3301      	adds	r3, #1
   28752:	b21b      	sxth	r3, r3
   28754:	9300      	str	r3, [sp, #0]
   28756:	f850 2c48 	ldr.w	r2, [r0, #-72]
   2875a:	2300      	movs	r3, #0
   2875c:	f104 0144 	add.w	r1, r4, #68	; 0x44
   28760:	4628      	mov	r0, r5
   28762:	f7ff fee5 	bl	28530 <EccPoint_mult>

	if (EccPoint_isZero(result, curve)) {
   28766:	4621      	mov	r1, r4
   28768:	4628      	mov	r0, r5
   2876a:	f7ff fe58 	bl	2841e <EccPoint_isZero>
		return 0;
	}
	return 1;
}
   2876e:	fab0 f080 	clz	r0, r0
   28772:	0940      	lsrs	r0, r0, #5
   28774:	b015      	add	sp, #84	; 0x54
   28776:	bd30      	pop	{r4, r5, pc}

00028778 <uECC_vli_nativeToBytes>:

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   28778:	b5f0      	push	{r4, r5, r6, r7, lr}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   2877a:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   2877c:	1e4f      	subs	r7, r1, #1
   2877e:	b26c      	sxtb	r4, r5
	for (i = 0; i < num_bytes; ++i) {
   28780:	428c      	cmp	r4, r1
   28782:	f105 0501 	add.w	r5, r5, #1
   28786:	db00      	blt.n	2878a <uECC_vli_nativeToBytes+0x12>
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
	}
}
   28788:	bdf0      	pop	{r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   2878a:	1b3b      	subs	r3, r7, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   2878c:	f023 0603 	bic.w	r6, r3, #3
   28790:	f003 0303 	and.w	r3, r3, #3
   28794:	5996      	ldr	r6, [r2, r6]
   28796:	00db      	lsls	r3, r3, #3
   28798:	fa26 f303 	lsr.w	r3, r6, r3
   2879c:	5503      	strb	r3, [r0, r4]
   2879e:	e7ee      	b.n	2877e <uECC_vli_nativeToBytes+0x6>

000287a0 <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   287a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   287a2:	460e      	mov	r6, r1
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   287a4:	1cd1      	adds	r1, r2, #3
   287a6:	bf48      	it	mi
   287a8:	1d91      	addmi	r1, r2, #6
{
   287aa:	4614      	mov	r4, r2
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   287ac:	f341 0187 	sbfx	r1, r1, #2, #8
{
   287b0:	4605      	mov	r5, r0
	for (i = 0; i < num_bytes; ++i) {
		unsigned b = num_bytes - 1 - i;
   287b2:	1e67      	subs	r7, r4, #1
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   287b4:	f7ff fade 	bl	27d74 <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   287b8:	2100      	movs	r1, #0
   287ba:	b24a      	sxtb	r2, r1
   287bc:	42a2      	cmp	r2, r4
   287be:	f101 0101 	add.w	r1, r1, #1
   287c2:	db00      	blt.n	287c6 <uECC_vli_bytesToNative+0x26>
		native[b / uECC_WORD_SIZE] |=
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
  	}
}
   287c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   287c6:	1abb      	subs	r3, r7, r2
		native[b / uECC_WORD_SIZE] |=
   287c8:	f023 0003 	bic.w	r0, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   287cc:	5cb2      	ldrb	r2, [r6, r2]
   287ce:	f003 0303 	and.w	r3, r3, #3
   287d2:	00db      	lsls	r3, r3, #3
   287d4:	fa02 f303 	lsl.w	r3, r2, r3
		native[b / uECC_WORD_SIZE] |=
   287d8:	582a      	ldr	r2, [r5, r0]
   287da:	431a      	orrs	r2, r3
   287dc:	502a      	str	r2, [r5, r0]
   287de:	e7ec      	b.n	287ba <uECC_vli_bytesToNative+0x1a>

000287e0 <uECC_valid_point>:
	return 0;
}


int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve)
{
   287e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   287e4:	b090      	sub	sp, #64	; 0x40
   287e6:	4606      	mov	r6, r0
   287e8:	460c      	mov	r4, r1
	uECC_word_t tmp1[NUM_ECC_WORDS];
	uECC_word_t tmp2[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   287ea:	f991 5000 	ldrsb.w	r5, [r1]

	/* The point at infinity is invalid. */
	if (EccPoint_isZero(point, curve)) {
   287ee:	f7ff fe16 	bl	2841e <EccPoint_isZero>
   287f2:	bb40      	cbnz	r0, 28846 <uECC_valid_point+0x66>
		return -1;
	}

	/* x and y must be smaller than p. */
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   287f4:	f104 0804 	add.w	r8, r4, #4
   287f8:	462a      	mov	r2, r5
   287fa:	4631      	mov	r1, r6
   287fc:	4640      	mov	r0, r8
   287fe:	f7ff fb0a 	bl	27e16 <uECC_vli_cmp_unsafe>
   28802:	2801      	cmp	r0, #1
   28804:	d122      	bne.n	2884c <uECC_valid_point+0x6c>
		uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
   28806:	eb06 0785 	add.w	r7, r6, r5, lsl #2
   2880a:	462a      	mov	r2, r5
   2880c:	4639      	mov	r1, r7
   2880e:	4640      	mov	r0, r8
   28810:	f7ff fb01 	bl	27e16 <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   28814:	2801      	cmp	r0, #1
   28816:	d119      	bne.n	2884c <uECC_valid_point+0x6c>
		return -2;
	}

	uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
   28818:	4622      	mov	r2, r4
   2881a:	4668      	mov	r0, sp
   2881c:	f7ff fc16 	bl	2804c <uECC_vli_modSquare_fast>
	curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
   28820:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   28824:	4622      	mov	r2, r4
   28826:	4631      	mov	r1, r6
   28828:	a808      	add	r0, sp, #32
   2882a:	4798      	blx	r3

	/* Make sure that y^2 == x^3 + ax + b */
	if (uECC_vli_equal(tmp1, tmp2, num_words) != 0)
   2882c:	462a      	mov	r2, r5
   2882e:	a908      	add	r1, sp, #32
   28830:	4668      	mov	r0, sp
   28832:	f7ff fb07 	bl	27e44 <uECC_vli_equal>
   28836:	2800      	cmp	r0, #0
		return -3;
   28838:	bf0c      	ite	eq
   2883a:	2000      	moveq	r0, #0
   2883c:	f06f 0002 	mvnne.w	r0, #2

	return 0;
}
   28840:	b010      	add	sp, #64	; 0x40
   28842:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   28846:	f04f 30ff 	mov.w	r0, #4294967295
   2884a:	e7f9      	b.n	28840 <uECC_valid_point+0x60>
		return -2;
   2884c:	f06f 0001 	mvn.w	r0, #1
   28850:	e7f6      	b.n	28840 <uECC_valid_point+0x60>

00028852 <uECC_valid_public_key>:

int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve)
{
   28852:	b570      	push	{r4, r5, r6, lr}
   28854:	460c      	mov	r4, r1
   28856:	b090      	sub	sp, #64	; 0x40

	uECC_word_t _public[NUM_ECC_WORDS * 2];

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
	uECC_vli_bytesToNative(
	_public + curve->num_words,
   28858:	4625      	mov	r5, r4
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   2885a:	f991 2001 	ldrsb.w	r2, [r1, #1]
{
   2885e:	4606      	mov	r6, r0
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   28860:	4601      	mov	r1, r0
   28862:	4668      	mov	r0, sp
   28864:	f7ff ff9c 	bl	287a0 <uECC_vli_bytesToNative>
	public_key + curve->num_bytes,
   28868:	f994 2001 	ldrsb.w	r2, [r4, #1]
	_public + curve->num_words,
   2886c:	f915 0b44 	ldrsb.w	r0, [r5], #68
	uECC_vli_bytesToNative(
   28870:	18b1      	adds	r1, r6, r2
   28872:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
   28876:	f7ff ff93 	bl	287a0 <uECC_vli_bytesToNative>
	curve->num_bytes);

	if (uECC_vli_cmp_unsafe(_public, curve->G, NUM_ECC_WORDS * 2) == 0) {
   2887a:	2210      	movs	r2, #16
   2887c:	4629      	mov	r1, r5
   2887e:	4668      	mov	r0, sp
   28880:	f7ff fac9 	bl	27e16 <uECC_vli_cmp_unsafe>
   28884:	b128      	cbz	r0, 28892 <uECC_valid_public_key+0x40>
		return -4;
	}

	return uECC_valid_point(_public, curve);
   28886:	4621      	mov	r1, r4
   28888:	4668      	mov	r0, sp
   2888a:	f7ff ffa9 	bl	287e0 <uECC_valid_point>
}
   2888e:	b010      	add	sp, #64	; 0x40
   28890:	bd70      	pop	{r4, r5, r6, pc}
		return -4;
   28892:	f06f 0003 	mvn.w	r0, #3
   28896:	e7fa      	b.n	2888e <uECC_valid_public_key+0x3c>

00028898 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   28898:	78cb      	ldrb	r3, [r1, #3]
   2889a:	7802      	ldrb	r2, [r0, #0]
   2889c:	4053      	eors	r3, r2
   2889e:	7003      	strb	r3, [r0, #0]
   288a0:	884b      	ldrh	r3, [r1, #2]
   288a2:	7842      	ldrb	r2, [r0, #1]
   288a4:	4053      	eors	r3, r2
   288a6:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   288a8:	680a      	ldr	r2, [r1, #0]
   288aa:	7883      	ldrb	r3, [r0, #2]
   288ac:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   288b0:	7083      	strb	r3, [r0, #2]
   288b2:	680a      	ldr	r2, [r1, #0]
   288b4:	78c3      	ldrb	r3, [r0, #3]
   288b6:	4053      	eors	r3, r2
   288b8:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   288ba:	79cb      	ldrb	r3, [r1, #7]
   288bc:	7902      	ldrb	r2, [r0, #4]
   288be:	4053      	eors	r3, r2
   288c0:	7103      	strb	r3, [r0, #4]
   288c2:	88cb      	ldrh	r3, [r1, #6]
   288c4:	7942      	ldrb	r2, [r0, #5]
   288c6:	4053      	eors	r3, r2
   288c8:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   288ca:	684a      	ldr	r2, [r1, #4]
   288cc:	7983      	ldrb	r3, [r0, #6]
   288ce:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   288d2:	7183      	strb	r3, [r0, #6]
   288d4:	684a      	ldr	r2, [r1, #4]
   288d6:	79c3      	ldrb	r3, [r0, #7]
   288d8:	4053      	eors	r3, r2
   288da:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   288dc:	7acb      	ldrb	r3, [r1, #11]
   288de:	7a02      	ldrb	r2, [r0, #8]
   288e0:	4053      	eors	r3, r2
   288e2:	7203      	strb	r3, [r0, #8]
   288e4:	7a42      	ldrb	r2, [r0, #9]
   288e6:	894b      	ldrh	r3, [r1, #10]
   288e8:	4053      	eors	r3, r2
   288ea:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   288ec:	688a      	ldr	r2, [r1, #8]
   288ee:	7a83      	ldrb	r3, [r0, #10]
   288f0:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   288f4:	7283      	strb	r3, [r0, #10]
   288f6:	688a      	ldr	r2, [r1, #8]
   288f8:	7ac3      	ldrb	r3, [r0, #11]
   288fa:	4053      	eors	r3, r2
   288fc:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   288fe:	7bcb      	ldrb	r3, [r1, #15]
   28900:	7b02      	ldrb	r2, [r0, #12]
   28902:	4053      	eors	r3, r2
   28904:	7303      	strb	r3, [r0, #12]
   28906:	89cb      	ldrh	r3, [r1, #14]
   28908:	7b42      	ldrb	r2, [r0, #13]
   2890a:	4053      	eors	r3, r2
   2890c:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   2890e:	68ca      	ldr	r2, [r1, #12]
   28910:	7b83      	ldrb	r3, [r0, #14]
   28912:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   28916:	7383      	strb	r3, [r0, #14]
   28918:	68ca      	ldr	r2, [r1, #12]
   2891a:	7bc3      	ldrb	r3, [r0, #15]
   2891c:	4053      	eors	r3, r2
   2891e:	73c3      	strb	r3, [r0, #15]
}
   28920:	4770      	bx	lr

00028922 <shift_rows>:
{
   28922:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   28924:	7802      	ldrb	r2, [r0, #0]
   28926:	f88d 2000 	strb.w	r2, [sp]
   2892a:	7942      	ldrb	r2, [r0, #5]
   2892c:	f88d 2001 	strb.w	r2, [sp, #1]
   28930:	7a82      	ldrb	r2, [r0, #10]
   28932:	f88d 2002 	strb.w	r2, [sp, #2]
   28936:	7bc2      	ldrb	r2, [r0, #15]
   28938:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   2893c:	7902      	ldrb	r2, [r0, #4]
   2893e:	f88d 2004 	strb.w	r2, [sp, #4]
   28942:	7a42      	ldrb	r2, [r0, #9]
   28944:	f88d 2005 	strb.w	r2, [sp, #5]
   28948:	7b82      	ldrb	r2, [r0, #14]
   2894a:	f88d 2006 	strb.w	r2, [sp, #6]
   2894e:	78c2      	ldrb	r2, [r0, #3]
   28950:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   28954:	7a02      	ldrb	r2, [r0, #8]
   28956:	f88d 2008 	strb.w	r2, [sp, #8]
   2895a:	7b42      	ldrb	r2, [r0, #13]
   2895c:	f88d 2009 	strb.w	r2, [sp, #9]
   28960:	7882      	ldrb	r2, [r0, #2]
   28962:	f88d 200a 	strb.w	r2, [sp, #10]
   28966:	79c2      	ldrb	r2, [r0, #7]
   28968:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   2896c:	7b02      	ldrb	r2, [r0, #12]
   2896e:	f88d 200c 	strb.w	r2, [sp, #12]
   28972:	7842      	ldrb	r2, [r0, #1]
   28974:	f88d 200d 	strb.w	r2, [sp, #13]
   28978:	7ac3      	ldrb	r3, [r0, #11]
   2897a:	7982      	ldrb	r2, [r0, #6]
   2897c:	f88d 200e 	strb.w	r2, [sp, #14]
   28980:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   28984:	2310      	movs	r3, #16
   28986:	466a      	mov	r2, sp
   28988:	4619      	mov	r1, r3
   2898a:	f7ff f878 	bl	27a7e <_copy>
}
   2898e:	b005      	add	sp, #20
   28990:	f85d fb04 	ldr.w	pc, [sp], #4

00028994 <mult_row_column>:
{
   28994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28996:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   28998:	7808      	ldrb	r0, [r1, #0]
{
   2899a:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2899c:	f7ff f87e 	bl	27a9c <_double_byte>
   289a0:	4605      	mov	r5, r0
   289a2:	7860      	ldrb	r0, [r4, #1]
   289a4:	f7ff f87a 	bl	27a9c <_double_byte>
   289a8:	78a2      	ldrb	r2, [r4, #2]
   289aa:	7863      	ldrb	r3, [r4, #1]
   289ac:	4053      	eors	r3, r2
   289ae:	78e2      	ldrb	r2, [r4, #3]
   289b0:	4053      	eors	r3, r2
   289b2:	405d      	eors	r5, r3
   289b4:	4045      	eors	r5, r0
   289b6:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   289b8:	7860      	ldrb	r0, [r4, #1]
   289ba:	7827      	ldrb	r7, [r4, #0]
   289bc:	f7ff f86e 	bl	27a9c <_double_byte>
   289c0:	4605      	mov	r5, r0
   289c2:	78a0      	ldrb	r0, [r4, #2]
   289c4:	f7ff f86a 	bl	27a9c <_double_byte>
   289c8:	78a3      	ldrb	r3, [r4, #2]
   289ca:	405f      	eors	r7, r3
   289cc:	78e3      	ldrb	r3, [r4, #3]
   289ce:	405f      	eors	r7, r3
   289d0:	407d      	eors	r5, r7
   289d2:	4045      	eors	r5, r0
   289d4:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   289d6:	78a0      	ldrb	r0, [r4, #2]
   289d8:	7865      	ldrb	r5, [r4, #1]
   289da:	7827      	ldrb	r7, [r4, #0]
   289dc:	f7ff f85e 	bl	27a9c <_double_byte>
   289e0:	406f      	eors	r7, r5
   289e2:	4605      	mov	r5, r0
   289e4:	78e0      	ldrb	r0, [r4, #3]
   289e6:	f7ff f859 	bl	27a9c <_double_byte>
   289ea:	78e3      	ldrb	r3, [r4, #3]
   289ec:	405f      	eors	r7, r3
   289ee:	407d      	eors	r5, r7
   289f0:	4045      	eors	r5, r0
   289f2:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   289f4:	7820      	ldrb	r0, [r4, #0]
   289f6:	f7ff f851 	bl	27a9c <_double_byte>
   289fa:	7863      	ldrb	r3, [r4, #1]
   289fc:	7825      	ldrb	r5, [r4, #0]
   289fe:	405d      	eors	r5, r3
   28a00:	78a3      	ldrb	r3, [r4, #2]
   28a02:	405d      	eors	r5, r3
   28a04:	4045      	eors	r5, r0
   28a06:	78e0      	ldrb	r0, [r4, #3]
   28a08:	f7ff f848 	bl	27a9c <_double_byte>
   28a0c:	b2ed      	uxtb	r5, r5
   28a0e:	4068      	eors	r0, r5
   28a10:	70f0      	strb	r0, [r6, #3]
}
   28a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00028a14 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   28a14:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   28a16:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   28a18:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   28a1a:	f912 3b10 	ldrsb.w	r3, [r2], #16
   28a1e:	2b00      	cmp	r3, #0
   28a20:	bfb4      	ite	lt
   28a22:	2387      	movlt	r3, #135	; 0x87
   28a24:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   28a26:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   28a2a:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   28a2e:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   28a30:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   28a34:	d002      	beq.n	28a3c <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   28a36:	7813      	ldrb	r3, [r2, #0]
   28a38:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   28a3a:	e7f4      	b.n	28a26 <gf_double+0x12>
	}
}
   28a3c:	bd10      	pop	{r4, pc}

00028a3e <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   28a3e:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   28a40:	b120      	cbz	r0, 28a4c <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   28a42:	2258      	movs	r2, #88	; 0x58
   28a44:	2100      	movs	r1, #0
   28a46:	f7ff f827 	bl	27a98 <_set>
   28a4a:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   28a4c:	bd08      	pop	{r3, pc}

00028a4e <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   28a4e:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   28a50:	4604      	mov	r4, r0
   28a52:	b188      	cbz	r0, 28a78 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   28a54:	2210      	movs	r2, #16
   28a56:	2100      	movs	r1, #0
   28a58:	f7ff f81e 	bl	27a98 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   28a5c:	2210      	movs	r2, #16
   28a5e:	f104 0030 	add.w	r0, r4, #48	; 0x30
   28a62:	2100      	movs	r1, #0
   28a64:	f7ff f818 	bl	27a98 <_set>
	s->leftover_offset = 0;
   28a68:	2300      	movs	r3, #0
   28a6a:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   28a6c:	2200      	movs	r2, #0
   28a6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   28a72:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   28a76:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   28a78:	bd10      	pop	{r4, pc}

00028a7a <tc_cmac_setup>:
{
   28a7a:	b570      	push	{r4, r5, r6, lr}
   28a7c:	460d      	mov	r5, r1
   28a7e:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   28a80:	4604      	mov	r4, r0
   28a82:	b310      	cbz	r0, 28aca <tc_cmac_setup+0x50>
   28a84:	b311      	cbz	r1, 28acc <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   28a86:	2258      	movs	r2, #88	; 0x58
   28a88:	2100      	movs	r1, #0
   28a8a:	f7ff f805 	bl	27a98 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   28a8e:	4629      	mov	r1, r5
	s->sched = sched;
   28a90:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   28a92:	4630      	mov	r0, r6
   28a94:	f7de f812 	bl	6abc <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   28a98:	2210      	movs	r2, #16
   28a9a:	2100      	movs	r1, #0
   28a9c:	4620      	mov	r0, r4
   28a9e:	f7fe fffb 	bl	27a98 <_set>
	gf_double (s->K1, s->iv);
   28aa2:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   28aa6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   28aa8:	4621      	mov	r1, r4
   28aaa:	4620      	mov	r0, r4
   28aac:	f7de f85c 	bl	6b68 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   28ab0:	4621      	mov	r1, r4
   28ab2:	4628      	mov	r0, r5
   28ab4:	f7ff ffae 	bl	28a14 <gf_double>
	gf_double (s->K2, s->K1);
   28ab8:	4629      	mov	r1, r5
   28aba:	f104 0020 	add.w	r0, r4, #32
   28abe:	f7ff ffa9 	bl	28a14 <gf_double>
	tc_cmac_init(s);
   28ac2:	4620      	mov	r0, r4
   28ac4:	f7ff ffc3 	bl	28a4e <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   28ac8:	2001      	movs	r0, #1
}
   28aca:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   28acc:	4608      	mov	r0, r1
   28ace:	e7fc      	b.n	28aca <tc_cmac_setup+0x50>

00028ad0 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   28ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28ad4:	460d      	mov	r5, r1
   28ad6:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   28ad8:	4604      	mov	r4, r0
   28ada:	2800      	cmp	r0, #0
   28adc:	d060      	beq.n	28ba0 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   28ade:	b912      	cbnz	r2, 28ae6 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   28ae0:	2001      	movs	r0, #1
}
   28ae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   28ae6:	2900      	cmp	r1, #0
   28ae8:	d05a      	beq.n	28ba0 <tc_cmac_update+0xd0>
	if (s->countdown == 0) {
   28aea:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   28aee:	ea50 0301 	orrs.w	r3, r0, r1
   28af2:	d055      	beq.n	28ba0 <tc_cmac_update+0xd0>
	s->countdown--;
   28af4:	f110 32ff 	adds.w	r2, r0, #4294967295
	if (s->leftover_offset > 0) {
   28af8:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
	s->countdown--;
   28afc:	f141 33ff 	adc.w	r3, r1, #4294967295
   28b00:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
	if (s->leftover_offset > 0) {
   28b04:	f1b8 0f00 	cmp.w	r8, #0
   28b08:	d029      	beq.n	28b5e <tc_cmac_update+0x8e>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   28b0a:	f1c8 0710 	rsb	r7, r8, #16
		if (data_length < remaining_space) {
   28b0e:	f108 0030 	add.w	r0, r8, #48	; 0x30
   28b12:	42be      	cmp	r6, r7
   28b14:	4420      	add	r0, r4
   28b16:	d208      	bcs.n	28b2a <tc_cmac_update+0x5a>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   28b18:	4633      	mov	r3, r6
   28b1a:	4631      	mov	r1, r6
   28b1c:	462a      	mov	r2, r5
   28b1e:	f7fe ffae 	bl	27a7e <_copy>
			s->leftover_offset += data_length;
   28b22:	6c63      	ldr	r3, [r4, #68]	; 0x44
   28b24:	441e      	add	r6, r3
		s->leftover_offset = data_length;
   28b26:	6466      	str	r6, [r4, #68]	; 0x44
   28b28:	e7da      	b.n	28ae0 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   28b2a:	463b      	mov	r3, r7
   28b2c:	462a      	mov	r2, r5
   28b2e:	4639      	mov	r1, r7
   28b30:	f7fe ffa5 	bl	27a7e <_copy>
		data_length -= remaining_space;
   28b34:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   28b36:	2300      	movs	r3, #0
   28b38:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   28b3a:	4446      	add	r6, r8
		data += remaining_space;
   28b3c:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   28b3e:	1e63      	subs	r3, r4, #1
   28b40:	f104 000f 	add.w	r0, r4, #15
			s->iv[i] ^= s->leftover[i];
   28b44:	785a      	ldrb	r2, [r3, #1]
   28b46:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
   28b4a:	404a      	eors	r2, r1
   28b4c:	f803 2f01 	strb.w	r2, [r3, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   28b50:	4283      	cmp	r3, r0
   28b52:	d1f7      	bne.n	28b44 <tc_cmac_update+0x74>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   28b54:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   28b56:	4621      	mov	r1, r4
   28b58:	4620      	mov	r0, r4
   28b5a:	f7de f805 	bl	6b68 <tc_aes_encrypt>
   28b5e:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   28b62:	2e10      	cmp	r6, #16
   28b64:	d809      	bhi.n	28b7a <tc_cmac_update+0xaa>
	if (data_length > 0) {
   28b66:	2e00      	cmp	r6, #0
   28b68:	d0ba      	beq.n	28ae0 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   28b6a:	4633      	mov	r3, r6
   28b6c:	462a      	mov	r2, r5
   28b6e:	4631      	mov	r1, r6
   28b70:	f104 0030 	add.w	r0, r4, #48	; 0x30
   28b74:	f7fe ff83 	bl	27a7e <_copy>
   28b78:	e7d5      	b.n	28b26 <tc_cmac_update+0x56>
   28b7a:	1e63      	subs	r3, r4, #1
   28b7c:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   28b7e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   28b82:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   28b86:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   28b88:	ea82 0200 	eor.w	r2, r2, r0
   28b8c:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   28b8e:	d1f6      	bne.n	28b7e <tc_cmac_update+0xae>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   28b90:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   28b92:	4621      	mov	r1, r4
   28b94:	4620      	mov	r0, r4
   28b96:	f7dd ffe7 	bl	6b68 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   28b9a:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   28b9c:	3e10      	subs	r6, #16
   28b9e:	e7e0      	b.n	28b62 <tc_cmac_update+0x92>
		return TC_CRYPTO_FAIL;
   28ba0:	2000      	movs	r0, #0
   28ba2:	e79e      	b.n	28ae2 <tc_cmac_update+0x12>

00028ba4 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   28ba4:	b570      	push	{r4, r5, r6, lr}
   28ba6:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   28ba8:	4605      	mov	r5, r0
   28baa:	b1e8      	cbz	r0, 28be8 <tc_cmac_final+0x44>
   28bac:	b369      	cbz	r1, 28c0a <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   28bae:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   28bb0:	2a10      	cmp	r2, #16
   28bb2:	d11a      	bne.n	28bea <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   28bb4:	f101 0210 	add.w	r2, r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   28bb8:	1e61      	subs	r1, r4, #1
   28bba:	3a01      	subs	r2, #1
   28bbc:	f104 060f 	add.w	r6, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   28bc0:	f891 0031 	ldrb.w	r0, [r1, #49]	; 0x31
   28bc4:	784b      	ldrb	r3, [r1, #1]
   28bc6:	4043      	eors	r3, r0
   28bc8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   28bcc:	4043      	eors	r3, r0
   28bce:	f801 3f01 	strb.w	r3, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   28bd2:	428e      	cmp	r6, r1
   28bd4:	d1f4      	bne.n	28bc0 <tc_cmac_final+0x1c>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   28bd6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   28bd8:	4621      	mov	r1, r4
   28bda:	4628      	mov	r0, r5
   28bdc:	f7dd ffc4 	bl	6b68 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   28be0:	4620      	mov	r0, r4
   28be2:	f7ff ff2c 	bl	28a3e <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   28be6:	2001      	movs	r0, #1
}
   28be8:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   28bea:	f102 0030 	add.w	r0, r2, #48	; 0x30
   28bee:	2100      	movs	r1, #0
   28bf0:	f1c2 0210 	rsb	r2, r2, #16
   28bf4:	4420      	add	r0, r4
   28bf6:	f7fe ff4f 	bl	27a98 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   28bfa:	6c63      	ldr	r3, [r4, #68]	; 0x44
   28bfc:	4423      	add	r3, r4
   28bfe:	2280      	movs	r2, #128	; 0x80
   28c00:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   28c04:	f104 0220 	add.w	r2, r4, #32
   28c08:	e7d6      	b.n	28bb8 <tc_cmac_final+0x14>
		return TC_CRYPTO_FAIL;
   28c0a:	4608      	mov	r0, r1
   28c0c:	e7ec      	b.n	28be8 <tc_cmac_final+0x44>

00028c0e <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   28c0e:	2100      	movs	r1, #0
   28c10:	2001      	movs	r0, #1
   28c12:	f7de b941 	b.w	6e98 <z_arm_fatal_error>

00028c16 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   28c16:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   28c18:	6800      	ldr	r0, [r0, #0]
   28c1a:	f7de b93d 	b.w	6e98 <z_arm_fatal_error>

00028c1e <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   28c1e:	b508      	push	{r3, lr}
	handler();
   28c20:	f7de f968 	bl	6ef4 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   28c24:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   28c28:	f7de bbc6 	b.w	73b8 <z_arm_exc_exit>

00028c2c <_stdout_hook_default>:
}
   28c2c:	f04f 30ff 	mov.w	r0, #4294967295
   28c30:	4770      	bx	lr

00028c32 <_stdin_hook_default>:
}
   28c32:	2000      	movs	r0, #0
   28c34:	4770      	bx	lr

00028c36 <_read>:
{
   28c36:	4608      	mov	r0, r1
	return z_impl_zephyr_read_stdin(buf, nbytes);
   28c38:	4611      	mov	r1, r2
   28c3a:	f7de bd05 	b.w	7648 <z_impl_zephyr_read_stdin>

00028c3e <_write>:
{
   28c3e:	4608      	mov	r0, r1
	return z_impl_zephyr_write_stdout(buf, nbytes);
   28c40:	4611      	mov	r1, r2
   28c42:	f7de bd15 	b.w	7670 <z_impl_zephyr_write_stdout>

00028c46 <_close>:
   28c46:	f04f 30ff 	mov.w	r0, #4294967295
   28c4a:	4770      	bx	lr

00028c4c <_lseek>:
}
   28c4c:	2000      	movs	r0, #0
   28c4e:	4770      	bx	lr

00028c50 <_isatty>:
}
   28c50:	2802      	cmp	r0, #2
   28c52:	bfcc      	ite	gt
   28c54:	2000      	movgt	r0, #0
   28c56:	2001      	movle	r0, #1
   28c58:	4770      	bx	lr

00028c5a <_fstat>:
	st->st_mode = S_IFCHR;
   28c5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   28c5e:	604b      	str	r3, [r1, #4]
}
   28c60:	2000      	movs	r0, #0
   28c62:	4770      	bx	lr

00028c64 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   28c64:	f7f8 b9c4 	b.w	20ff0 <SystemInit>

00028c68 <send_cmd_status>:
{
   28c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   28c6c:	f04f 32ff 	mov.w	r2, #4294967295
{
   28c70:	4680      	mov	r8, r0
   28c72:	460f      	mov	r7, r1
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   28c74:	f04f 33ff 	mov.w	r3, #4294967295
   28c78:	2100      	movs	r1, #0
   28c7a:	200f      	movs	r0, #15
   28c7c:	f7df f94e 	bl	7f1c <bt_buf_get_evt>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   28c80:	2501      	movs	r5, #1
	return net_buf_simple_add(&buf->b, len);
   28c82:	f100 0608 	add.w	r6, r0, #8
   28c86:	4604      	mov	r4, r0
   28c88:	7505      	strb	r5, [r0, #20]
   28c8a:	2102      	movs	r1, #2
   28c8c:	4630      	mov	r0, r6
   28c8e:	f7f6 fab1 	bl	1f1f4 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   28c92:	230f      	movs	r3, #15
	hdr->len = sizeof(*evt);
   28c94:	2104      	movs	r1, #4
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   28c96:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*evt);
   28c98:	7041      	strb	r1, [r0, #1]
   28c9a:	4630      	mov	r0, r6
   28c9c:	f7f6 faaa 	bl	1f1f4 <net_buf_simple_add>
	evt->ncmd = 1U;
   28ca0:	7045      	strb	r5, [r0, #1]
	evt->status = status;
   28ca2:	7007      	strb	r7, [r0, #0]
	evt->opcode = sys_cpu_to_le16(opcode);
   28ca4:	f8a0 8002 	strh.w	r8, [r0, #2]
		bt_recv_prio(buf);
   28ca8:	4620      	mov	r0, r4
}
   28caa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_recv_prio(buf);
   28cae:	f7e0 ba71 	b.w	9194 <bt_recv_prio>

00028cb2 <default_CSPRNG>:
{
   28cb2:	b508      	push	{r3, lr}
	return !bt_rand(dst, len);
   28cb4:	f003 f83b 	bl	2bd2e <bt_rand>
}
   28cb8:	fab0 f080 	clz	r0, r0
   28cbc:	0940      	lsrs	r0, r0, #5
   28cbe:	bd08      	pop	{r3, pc}

00028cc0 <bt_settings_decode_key>:
{
   28cc0:	b570      	push	{r4, r5, r6, lr}
   28cc2:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   28cc4:	2100      	movs	r1, #0
{
   28cc6:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   28cc8:	f7fe fd7e 	bl	277c8 <settings_name_next>
   28ccc:	280d      	cmp	r0, #13
   28cce:	d118      	bne.n	28d02 <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   28cd0:	7b23      	ldrb	r3, [r4, #12]
   28cd2:	2b30      	cmp	r3, #48	; 0x30
   28cd4:	d111      	bne.n	28cfa <bt_settings_decode_key+0x3a>
		addr->type = BT_ADDR_LE_PUBLIC;
   28cd6:	2300      	movs	r3, #0
   28cd8:	702b      	strb	r3, [r5, #0]
   28cda:	f104 060c 	add.w	r6, r4, #12
   28cde:	3506      	adds	r5, #6
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   28ce0:	462a      	mov	r2, r5
   28ce2:	4620      	mov	r0, r4
   28ce4:	2301      	movs	r3, #1
   28ce6:	2102      	movs	r1, #2
   28ce8:	3402      	adds	r4, #2
   28cea:	f7fe f8de 	bl	26eaa <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   28cee:	42b4      	cmp	r4, r6
   28cf0:	f105 35ff 	add.w	r5, r5, #4294967295
   28cf4:	d1f4      	bne.n	28ce0 <bt_settings_decode_key+0x20>
	return 0;
   28cf6:	2000      	movs	r0, #0
}
   28cf8:	bd70      	pop	{r4, r5, r6, pc}
	} else if (key[12] == '1') {
   28cfa:	2b31      	cmp	r3, #49	; 0x31
   28cfc:	d101      	bne.n	28d02 <bt_settings_decode_key+0x42>
		addr->type = BT_ADDR_LE_RANDOM;
   28cfe:	2301      	movs	r3, #1
   28d00:	e7ea      	b.n	28cd8 <bt_settings_decode_key+0x18>
		return -EINVAL;
   28d02:	f06f 0015 	mvn.w	r0, #21
   28d06:	e7f7      	b.n	28cf8 <bt_settings_decode_key+0x38>

00028d08 <xor16>:
#define BT_DBG_ENABLED IS_ENABLED(CONFIG_BT_DEBUG_HCI_CORE)
#define LOG_MODULE_NAME bt_aes_ccm
#include "common/log.h"

static inline void xor16(uint8_t *dst, const uint8_t *a, const uint8_t *b)
{
   28d08:	b510      	push	{r4, lr}
	dst[0] = a[0] ^ b[0];
   28d0a:	780b      	ldrb	r3, [r1, #0]
   28d0c:	7814      	ldrb	r4, [r2, #0]
   28d0e:	4063      	eors	r3, r4
   28d10:	7003      	strb	r3, [r0, #0]
	dst[1] = a[1] ^ b[1];
   28d12:	7854      	ldrb	r4, [r2, #1]
   28d14:	784b      	ldrb	r3, [r1, #1]
   28d16:	4063      	eors	r3, r4
   28d18:	7043      	strb	r3, [r0, #1]
	dst[2] = a[2] ^ b[2];
   28d1a:	7894      	ldrb	r4, [r2, #2]
   28d1c:	788b      	ldrb	r3, [r1, #2]
   28d1e:	4063      	eors	r3, r4
   28d20:	7083      	strb	r3, [r0, #2]
	dst[3] = a[3] ^ b[3];
   28d22:	78d4      	ldrb	r4, [r2, #3]
   28d24:	78cb      	ldrb	r3, [r1, #3]
   28d26:	4063      	eors	r3, r4
   28d28:	70c3      	strb	r3, [r0, #3]
	dst[4] = a[4] ^ b[4];
   28d2a:	7914      	ldrb	r4, [r2, #4]
   28d2c:	790b      	ldrb	r3, [r1, #4]
   28d2e:	4063      	eors	r3, r4
   28d30:	7103      	strb	r3, [r0, #4]
	dst[5] = a[5] ^ b[5];
   28d32:	7954      	ldrb	r4, [r2, #5]
   28d34:	794b      	ldrb	r3, [r1, #5]
   28d36:	4063      	eors	r3, r4
   28d38:	7143      	strb	r3, [r0, #5]
	dst[6] = a[6] ^ b[6];
   28d3a:	7994      	ldrb	r4, [r2, #6]
   28d3c:	798b      	ldrb	r3, [r1, #6]
   28d3e:	4063      	eors	r3, r4
   28d40:	7183      	strb	r3, [r0, #6]
	dst[7] = a[7] ^ b[7];
   28d42:	79d4      	ldrb	r4, [r2, #7]
   28d44:	79cb      	ldrb	r3, [r1, #7]
   28d46:	4063      	eors	r3, r4
   28d48:	71c3      	strb	r3, [r0, #7]
	dst[8] = a[8] ^ b[8];
   28d4a:	7a14      	ldrb	r4, [r2, #8]
   28d4c:	7a0b      	ldrb	r3, [r1, #8]
   28d4e:	4063      	eors	r3, r4
   28d50:	7203      	strb	r3, [r0, #8]
	dst[9] = a[9] ^ b[9];
   28d52:	7a54      	ldrb	r4, [r2, #9]
   28d54:	7a4b      	ldrb	r3, [r1, #9]
   28d56:	4063      	eors	r3, r4
   28d58:	7243      	strb	r3, [r0, #9]
	dst[10] = a[10] ^ b[10];
   28d5a:	7a8b      	ldrb	r3, [r1, #10]
   28d5c:	7a94      	ldrb	r4, [r2, #10]
   28d5e:	4063      	eors	r3, r4
   28d60:	7283      	strb	r3, [r0, #10]
	dst[11] = a[11] ^ b[11];
   28d62:	7ad4      	ldrb	r4, [r2, #11]
   28d64:	7acb      	ldrb	r3, [r1, #11]
   28d66:	4063      	eors	r3, r4
   28d68:	72c3      	strb	r3, [r0, #11]
	dst[12] = a[12] ^ b[12];
   28d6a:	7b14      	ldrb	r4, [r2, #12]
   28d6c:	7b0b      	ldrb	r3, [r1, #12]
   28d6e:	4063      	eors	r3, r4
   28d70:	7303      	strb	r3, [r0, #12]
	dst[13] = a[13] ^ b[13];
   28d72:	7b54      	ldrb	r4, [r2, #13]
   28d74:	7b4b      	ldrb	r3, [r1, #13]
   28d76:	4063      	eors	r3, r4
   28d78:	7343      	strb	r3, [r0, #13]
	dst[14] = a[14] ^ b[14];
   28d7a:	7b94      	ldrb	r4, [r2, #14]
   28d7c:	7b8b      	ldrb	r3, [r1, #14]
   28d7e:	4063      	eors	r3, r4
   28d80:	7383      	strb	r3, [r0, #14]
	dst[15] = a[15] ^ b[15];
   28d82:	7bcb      	ldrb	r3, [r1, #15]
   28d84:	7bd2      	ldrb	r2, [r2, #15]
   28d86:	4053      	eors	r3, r2
   28d88:	73c3      	strb	r3, [r0, #15]
}
   28d8a:	bd10      	pop	{r4, pc}

00028d8c <ccm_crypt>:
	return 0;
}

static int ccm_crypt(const uint8_t key[16], const uint8_t nonce[13],
		     const uint8_t *in_msg, uint8_t *out_msg, size_t msg_len)
{
   28d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28d90:	b089      	sub	sp, #36	; 0x24
   28d92:	4698      	mov	r8, r3
   28d94:	9d12      	ldr	r5, [sp, #72]	; 0x48
	blk_cnt = (msg_len + 15) / 16;
	if (!last_blk) {
		last_blk = 16U;
	}

	a_i[0] = 0x01;
   28d96:	2301      	movs	r3, #1
	blk_cnt = (msg_len + 15) / 16;
   28d98:	f105 060f 	add.w	r6, r5, #15
		last_blk = 16U;
   28d9c:	f015 050f 	ands.w	r5, r5, #15
{
   28da0:	4617      	mov	r7, r2
	a_i[0] = 0x01;
   28da2:	f88d 3000 	strb.w	r3, [sp]
{
   28da6:	4681      	mov	r9, r0
	blk_cnt = (msg_len + 15) / 16;
   28da8:	ea4f 1616 	mov.w	r6, r6, lsr #4
		last_blk = 16U;
   28dac:	bf08      	it	eq
   28dae:	2510      	moveq	r5, #16
	memcpy(&a_i[1], nonce, 13);
   28db0:	446b      	add	r3, sp
   28db2:	f101 020c 	add.w	r2, r1, #12
   28db6:	f851 0b04 	ldr.w	r0, [r1], #4
   28dba:	f843 0b04 	str.w	r0, [r3], #4
   28dbe:	4291      	cmp	r1, r2
   28dc0:	d1f9      	bne.n	28db6 <ccm_crypt+0x2a>
   28dc2:	780a      	ldrb	r2, [r1, #0]
   28dc4:	701a      	strb	r2, [r3, #0]

	for (j = 0; j < blk_cnt; j++) {
   28dc6:	b2b6      	uxth	r6, r6
   28dc8:	2400      	movs	r4, #0
		if (err) {
			return err;
		}

		/* Encrypted = Payload[0-15] ^ C_1 */
		if (j < blk_cnt - 1) {
   28dca:	f106 3aff 	add.w	sl, r6, #4294967295
	for (j = 0; j < blk_cnt; j++) {
   28dce:	42b4      	cmp	r4, r6
   28dd0:	d303      	bcc.n	28dda <ccm_crypt+0x4e>
				out_msg[(j * 16) + i] =
					in_msg[(j * 16) + i] ^ s_i[i];
			}
		}
	}
	return 0;
   28dd2:	2000      	movs	r0, #0
}
   28dd4:	b009      	add	sp, #36	; 0x24
   28dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	dst[0] = val >> 8;
   28dda:	f104 0b01 	add.w	fp, r4, #1
   28dde:	f3cb 2307 	ubfx	r3, fp, #8, #8
		err = bt_encrypt_be(key, a_i, s_i);
   28de2:	aa04      	add	r2, sp, #16
   28de4:	4669      	mov	r1, sp
   28de6:	4648      	mov	r0, r9
   28de8:	f88d 300e 	strb.w	r3, [sp, #14]
	dst[1] = val;
   28dec:	f88d b00f 	strb.w	fp, [sp, #15]
   28df0:	f002 ff9f 	bl	2bd32 <bt_encrypt_be>
		if (err) {
   28df4:	2800      	cmp	r0, #0
   28df6:	d1ed      	bne.n	28dd4 <ccm_crypt+0x48>
		if (j < blk_cnt - 1) {
   28df8:	45a2      	cmp	sl, r4
   28dfa:	ea4f 1404 	mov.w	r4, r4, lsl #4
   28dfe:	d907      	bls.n	28e10 <ccm_crypt+0x84>
			xor16(&out_msg[j * 16], s_i, &in_msg[j * 16]);
   28e00:	193a      	adds	r2, r7, r4
   28e02:	a904      	add	r1, sp, #16
   28e04:	eb08 0004 	add.w	r0, r8, r4
   28e08:	f7ff ff7e 	bl	28d08 <xor16>
	for (j = 0; j < blk_cnt; j++) {
   28e0c:	465c      	mov	r4, fp
   28e0e:	e7de      	b.n	28dce <ccm_crypt+0x42>
   28e10:	1939      	adds	r1, r7, r4
   28e12:	aa04      	add	r2, sp, #16
   28e14:	4444      	add	r4, r8
					in_msg[(j * 16) + i] ^ s_i[i];
   28e16:	f811 3b01 	ldrb.w	r3, [r1], #1
   28e1a:	f812 cb01 	ldrb.w	ip, [r2], #1
			for (i = 0; i < last_blk; i++) {
   28e1e:	3001      	adds	r0, #1
				out_msg[(j * 16) + i] =
   28e20:	ea83 030c 	eor.w	r3, r3, ip
			for (i = 0; i < last_blk; i++) {
   28e24:	4285      	cmp	r5, r0
				out_msg[(j * 16) + i] =
   28e26:	f804 3b01 	strb.w	r3, [r4], #1
			for (i = 0; i < last_blk; i++) {
   28e2a:	d8f4      	bhi.n	28e16 <ccm_crypt+0x8a>
   28e2c:	e7ee      	b.n	28e0c <ccm_crypt+0x80>

00028e2e <ccm_auth>:
{
   28e2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28e32:	b091      	sub	sp, #68	; 0x44
		last_blk = 16U;
   28e34:	f013 070f 	ands.w	r7, r3, #15
{
   28e38:	461e      	mov	r6, r3
   28e3a:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
   28e3c:	9201      	str	r2, [sp, #4]
	b[0] = 0x01;
   28e3e:	f04f 0301 	mov.w	r3, #1
   28e42:	f88d 3010 	strb.w	r3, [sp, #16]
{
   28e46:	4680      	mov	r8, r0
		last_blk = 16U;
   28e48:	bf08      	it	eq
   28e4a:	2710      	moveq	r7, #16
	memcpy(b + 1, nonce, 13);
   28e4c:	f10d 0311 	add.w	r3, sp, #17
   28e50:	f101 020c 	add.w	r2, r1, #12
   28e54:	f851 0b04 	ldr.w	r0, [r1], #4
   28e58:	f843 0b04 	str.w	r0, [r3], #4
   28e5c:	4291      	cmp	r1, r2
   28e5e:	d1f9      	bne.n	28e54 <ccm_auth+0x26>
   28e60:	780a      	ldrb	r2, [r1, #0]
   28e62:	701a      	strb	r2, [r3, #0]
	err = bt_encrypt_be(key, b, s0);
   28e64:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
   28e68:	f10d 0b10 	add.w	fp, sp, #16
	dst[0] = val >> 8;
   28e6c:	2300      	movs	r3, #0
   28e6e:	4652      	mov	r2, sl
   28e70:	4659      	mov	r1, fp
   28e72:	4640      	mov	r0, r8
   28e74:	f8ad 301e 	strh.w	r3, [sp, #30]
   28e78:	f002 ff5b 	bl	2bd32 <bt_encrypt_be>
	if (err) {
   28e7c:	4605      	mov	r5, r0
   28e7e:	2800      	cmp	r0, #0
   28e80:	d165      	bne.n	28f4e <ccm_auth+0x120>
	b[0] = (((mic_size - 2) / 2) << 3) | ((!!aad_len) << 6) | 0x01;
   28e82:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   28e84:	f88d 001e 	strb.w	r0, [sp, #30]
   28e88:	3b02      	subs	r3, #2
   28e8a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   28e8e:	ea4f 0383 	mov.w	r3, r3, lsl #2
   28e92:	bf14      	ite	ne
   28e94:	2240      	movne	r2, #64	; 0x40
   28e96:	2200      	moveq	r2, #0
   28e98:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
   28e9c:	4313      	orrs	r3, r2
	err = bt_encrypt_be(key, b, X0);
   28e9e:	f10d 0920 	add.w	r9, sp, #32
	b[0] = (((mic_size - 2) / 2) << 3) | ((!!aad_len) << 6) | 0x01;
   28ea2:	f043 0301 	orr.w	r3, r3, #1
	err = bt_encrypt_be(key, b, X0);
   28ea6:	464a      	mov	r2, r9
   28ea8:	4659      	mov	r1, fp
   28eaa:	4640      	mov	r0, r8
	b[0] = (((mic_size - 2) / 2) << 3) | ((!!aad_len) << 6) | 0x01;
   28eac:	f88d 3010 	strb.w	r3, [sp, #16]
	dst[1] = val;
   28eb0:	f88d 601f 	strb.w	r6, [sp, #31]
	err = bt_encrypt_be(key, b, X0);
   28eb4:	f002 ff3d 	bl	2bd32 <bt_encrypt_be>
	if (err) {
   28eb8:	4603      	mov	r3, r0
   28eba:	bbb8      	cbnz	r0, 28f2c <ccm_auth+0xfe>
	if (aad_len) {
   28ebc:	b3b4      	cbz	r4, 28f2c <ccm_auth+0xfe>
			b[i] = X0[i] ^ b[i];
   28ebe:	f89d 2020 	ldrb.w	r2, [sp, #32]
   28ec2:	f88d 2010 	strb.w	r2, [sp, #16]
   28ec6:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
   28eca:	4062      	eors	r2, r4
		aad_len += sizeof(uint16_t);
   28ecc:	3402      	adds	r4, #2
			b[i] = X0[i] ^ b[i];
   28ece:	f88d 2011 	strb.w	r2, [sp, #17]
		aad_len += sizeof(uint16_t);
   28ed2:	b2e4      	uxtb	r4, r4
   28ed4:	2002      	movs	r0, #2
   28ed6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
		while (aad_len > 16) {
   28ed8:	2c10      	cmp	r4, #16
   28eda:	441a      	add	r2, r3
   28edc:	d80b      	bhi.n	28ef6 <ccm_auth+0xc8>
   28ede:	4613      	mov	r3, r2
   28ee0:	aa08      	add	r2, sp, #32
		for (; i < aad_len; i++, j++) {
   28ee2:	42a0      	cmp	r0, r4
   28ee4:	4621      	mov	r1, r4
   28ee6:	db36      	blt.n	28f56 <ccm_auth+0x128>
		for (i = aad_len; i < 16; i++) {
   28ee8:	290f      	cmp	r1, #15
   28eea:	dd40      	ble.n	28f6e <ccm_auth+0x140>
		err = bt_encrypt_be(key, b, X0);
   28eec:	a904      	add	r1, sp, #16
   28eee:	4640      	mov	r0, r8
   28ef0:	f002 ff1f 	bl	2bd32 <bt_encrypt_be>
		if (err) {
   28ef4:	e01a      	b.n	28f2c <ccm_auth+0xfe>
		while (aad_len > 16) {
   28ef6:	4601      	mov	r1, r0
				b[i] = X0[i] ^ aad[j];
   28ef8:	f811 e009 	ldrb.w	lr, [r1, r9]
   28efc:	f812 cb01 	ldrb.w	ip, [r2], #1
   28f00:	ea8c 0c0e 	eor.w	ip, ip, lr
   28f04:	f801 c00b 	strb.w	ip, [r1, fp]
				i++, j++;
   28f08:	3101      	adds	r1, #1
			} while (i < 16);
   28f0a:	2910      	cmp	r1, #16
   28f0c:	d1f4      	bne.n	28ef8 <ccm_auth+0xca>
   28f0e:	f1c0 0010 	rsb	r0, r0, #16
   28f12:	4403      	add	r3, r0
			err = bt_encrypt_be(key, b, X0);
   28f14:	464a      	mov	r2, r9
   28f16:	4659      	mov	r1, fp
   28f18:	4640      	mov	r0, r8
   28f1a:	e9cd 3302 	strd	r3, r3, [sp, #8]
   28f1e:	f002 ff08 	bl	2bd32 <bt_encrypt_be>
   28f22:	3c10      	subs	r4, #16
   28f24:	b2e4      	uxtb	r4, r4
			if (err) {
   28f26:	9b02      	ldr	r3, [sp, #8]
   28f28:	2800      	cmp	r0, #0
   28f2a:	d0d4      	beq.n	28ed6 <ccm_auth+0xa8>
	blk_cnt = (msg_len + 15) / 16;
   28f2c:	f106 040f 	add.w	r4, r6, #15
			memcpy(&b[i], &Xn[i], 16 - i);
   28f30:	ab04      	add	r3, sp, #16
   28f32:	f8dd 9004 	ldr.w	r9, [sp, #4]
	for (j = 0; j < blk_cnt; j++) {
   28f36:	f3c4 140f 	ubfx	r4, r4, #4, #16
   28f3a:	2600      	movs	r6, #0
			memcpy(&b[i], &Xn[i], 16 - i);
   28f3c:	eb03 0b07 	add.w	fp, r3, r7
	for (j = 0; j < blk_cnt; j++) {
   28f40:	42b4      	cmp	r4, r6
   28f42:	dc19      	bgt.n	28f78 <ccm_auth+0x14a>
	for (i = 0; i < mic_size; i++) {
   28f44:	2300      	movs	r3, #0
		mic[i] = s0[i] ^ Xn[i];
   28f46:	a908      	add	r1, sp, #32
	for (i = 0; i < mic_size; i++) {
   28f48:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   28f4a:	4293      	cmp	r3, r2
   28f4c:	d13f      	bne.n	28fce <ccm_auth+0x1a0>
}
   28f4e:	4628      	mov	r0, r5
   28f50:	b011      	add	sp, #68	; 0x44
   28f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			b[i] = X0[i] ^ aad[j];
   28f56:	f812 c000 	ldrb.w	ip, [r2, r0]
   28f5a:	f813 1b01 	ldrb.w	r1, [r3], #1
   28f5e:	ea81 010c 	eor.w	r1, r1, ip
   28f62:	f10d 0c10 	add.w	ip, sp, #16
   28f66:	f80c 1000 	strb.w	r1, [ip, r0]
		for (; i < aad_len; i++, j++) {
   28f6a:	3001      	adds	r0, #1
   28f6c:	e7b9      	b.n	28ee2 <ccm_auth+0xb4>
			b[i] = X0[i];
   28f6e:	a804      	add	r0, sp, #16
   28f70:	5c53      	ldrb	r3, [r2, r1]
   28f72:	5443      	strb	r3, [r0, r1]
		for (i = aad_len; i < 16; i++) {
   28f74:	3101      	adds	r1, #1
   28f76:	e7b7      	b.n	28ee8 <ccm_auth+0xba>
		if (j + 1 == blk_cnt) {
   28f78:	3601      	adds	r6, #1
   28f7a:	42a6      	cmp	r6, r4
   28f7c:	d121      	bne.n	28fc2 <ccm_auth+0x194>
   28f7e:	f10d 0c20 	add.w	ip, sp, #32
   28f82:	a904      	add	r1, sp, #16
   28f84:	4648      	mov	r0, r9
			for (i = 0; i < last_blk; i++) {
   28f86:	2300      	movs	r3, #0
				b[i] = Xn[i] ^ cleartext_msg[(j * 16) + i];
   28f88:	f81c 2b01 	ldrb.w	r2, [ip], #1
   28f8c:	f810 eb01 	ldrb.w	lr, [r0], #1
			for (i = 0; i < last_blk; i++) {
   28f90:	3301      	adds	r3, #1
				b[i] = Xn[i] ^ cleartext_msg[(j * 16) + i];
   28f92:	ea82 020e 	eor.w	r2, r2, lr
			for (i = 0; i < last_blk; i++) {
   28f96:	429f      	cmp	r7, r3
				b[i] = Xn[i] ^ cleartext_msg[(j * 16) + i];
   28f98:	f801 2b01 	strb.w	r2, [r1], #1
			for (i = 0; i < last_blk; i++) {
   28f9c:	dcf4      	bgt.n	28f88 <ccm_auth+0x15a>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   28f9e:	ab08      	add	r3, sp, #32
   28fa0:	f1c7 0210 	rsb	r2, r7, #16
   28fa4:	19d9      	adds	r1, r3, r7
   28fa6:	4658      	mov	r0, fp
   28fa8:	f004 faec 	bl	2d584 <memcpy>
		err = bt_encrypt_be(key, b, Xn);
   28fac:	aa08      	add	r2, sp, #32
   28fae:	a904      	add	r1, sp, #16
   28fb0:	4640      	mov	r0, r8
   28fb2:	f002 febe 	bl	2bd32 <bt_encrypt_be>
		if (err) {
   28fb6:	f109 0910 	add.w	r9, r9, #16
   28fba:	2800      	cmp	r0, #0
   28fbc:	d0c0      	beq.n	28f40 <ccm_auth+0x112>
		err = bt_encrypt_be(key, b, Xn);
   28fbe:	4605      	mov	r5, r0
   28fc0:	e7c5      	b.n	28f4e <ccm_auth+0x120>
			xor16(b, Xn, &cleartext_msg[j * 16]);
   28fc2:	464a      	mov	r2, r9
   28fc4:	a908      	add	r1, sp, #32
   28fc6:	a804      	add	r0, sp, #16
   28fc8:	f7ff fe9e 	bl	28d08 <xor16>
   28fcc:	e7ee      	b.n	28fac <ccm_auth+0x17e>
		mic[i] = s0[i] ^ Xn[i];
   28fce:	5c58      	ldrb	r0, [r3, r1]
   28fd0:	f81a 2003 	ldrb.w	r2, [sl, r3]
   28fd4:	4042      	eors	r2, r0
   28fd6:	981c      	ldr	r0, [sp, #112]	; 0x70
   28fd8:	54c2      	strb	r2, [r0, r3]
	for (i = 0; i < mic_size; i++) {
   28fda:	3301      	adds	r3, #1
   28fdc:	e7b4      	b.n	28f48 <ccm_auth+0x11a>

00028fde <bt_ccm_decrypt>:

int bt_ccm_decrypt(const uint8_t key[16], uint8_t nonce[13], const uint8_t *enc_msg,
		   size_t msg_len, const uint8_t *aad, size_t aad_len,
		   uint8_t *out_msg, size_t mic_size)
{
   28fde:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   28fe2:	b088      	sub	sp, #32
   28fe4:	4681      	mov	r9, r0
   28fe6:	9f11      	ldr	r7, [sp, #68]	; 0x44
   28fe8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
	uint8_t mic[16];

	if (aad_len >= 0xff00 || mic_size > sizeof(mic)) {
   28fea:	f5b7 4f7f 	cmp.w	r7, #65280	; 0xff00
{
   28fee:	468a      	mov	sl, r1
   28ff0:	4690      	mov	r8, r2
   28ff2:	461c      	mov	r4, r3
	if (aad_len >= 0xff00 || mic_size > sizeof(mic)) {
   28ff4:	d21e      	bcs.n	29034 <bt_ccm_decrypt+0x56>
   28ff6:	2d10      	cmp	r5, #16
   28ff8:	d81c      	bhi.n	29034 <bt_ccm_decrypt+0x56>
		return -EINVAL;
	}

	ccm_crypt(key, nonce, enc_msg, out_msg, msg_len);
   28ffa:	9300      	str	r3, [sp, #0]
   28ffc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   28ffe:	f7ff fec5 	bl	28d8c <ccm_crypt>

	ccm_auth(key, nonce, out_msg, msg_len, aad, aad_len, mic, mic_size);
   29002:	ae04      	add	r6, sp, #16
   29004:	9b10      	ldr	r3, [sp, #64]	; 0x40
   29006:	9300      	str	r3, [sp, #0]
   29008:	9a12      	ldr	r2, [sp, #72]	; 0x48
   2900a:	9503      	str	r5, [sp, #12]
   2900c:	4623      	mov	r3, r4
   2900e:	4651      	mov	r1, sl
   29010:	e9cd 7601 	strd	r7, r6, [sp, #4]
   29014:	4648      	mov	r0, r9
   29016:	f7ff ff0a 	bl	28e2e <ccm_auth>

	if (memcmp(mic, enc_msg + msg_len, mic_size)) {
   2901a:	462a      	mov	r2, r5
   2901c:	eb08 0104 	add.w	r1, r8, r4
   29020:	4630      	mov	r0, r6
   29022:	f004 faa1 	bl	2d568 <memcmp>
   29026:	2800      	cmp	r0, #0
		return -EBADMSG;
   29028:	bf18      	it	ne
   2902a:	f06f 004c 	mvnne.w	r0, #76	; 0x4c
	}

	return 0;
}
   2902e:	b008      	add	sp, #32
   29030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EINVAL;
   29034:	f06f 0015 	mvn.w	r0, #21
   29038:	e7f9      	b.n	2902e <bt_ccm_decrypt+0x50>

0002903a <bt_ccm_encrypt>:

int bt_ccm_encrypt(const uint8_t key[16], uint8_t nonce[13], const uint8_t *msg,
		   size_t msg_len, const uint8_t *aad, size_t aad_len,
		   uint8_t *out_msg, size_t mic_size)
{
   2903a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2903e:	b085      	sub	sp, #20
   29040:	4691      	mov	r9, r2
   29042:	e9dd 240d 	ldrd	r2, r4, [sp, #52]	; 0x34
	BT_DBG("nonce %s", bt_hex(nonce, 13));
	BT_DBG("msg (len %zu) %s", msg_len, bt_hex(msg, msg_len));
	BT_DBG("aad_len %zu mic_size %zu", aad_len, mic_size);

	/* Unsupported AAD size */
	if (aad_len >= 0xff00 || mic_size > 16) {
   29046:	f5b2 4f7f 	cmp.w	r2, #65280	; 0xff00
{
   2904a:	4607      	mov	r7, r0
   2904c:	4688      	mov	r8, r1
   2904e:	461d      	mov	r5, r3
   29050:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
	uint8_t *mic = out_msg + msg_len;
   29052:	eb04 0c03 	add.w	ip, r4, r3
	if (aad_len >= 0xff00 || mic_size > 16) {
   29056:	d214      	bcs.n	29082 <bt_ccm_encrypt+0x48>
   29058:	2e10      	cmp	r6, #16
   2905a:	d812      	bhi.n	29082 <bt_ccm_encrypt+0x48>
		return -EINVAL;
	}

	ccm_auth(key, nonce, out_msg, msg_len, aad, aad_len, mic, mic_size);
   2905c:	9201      	str	r2, [sp, #4]
   2905e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   29060:	9200      	str	r2, [sp, #0]
   29062:	e9cd c602 	strd	ip, r6, [sp, #8]
   29066:	4622      	mov	r2, r4
   29068:	f7ff fee1 	bl	28e2e <ccm_auth>

	ccm_crypt(key, nonce, msg, out_msg, msg_len);
   2906c:	9500      	str	r5, [sp, #0]
   2906e:	4623      	mov	r3, r4
   29070:	464a      	mov	r2, r9
   29072:	4641      	mov	r1, r8
   29074:	4638      	mov	r0, r7
   29076:	f7ff fe89 	bl	28d8c <ccm_crypt>

	return 0;
   2907a:	2000      	movs	r0, #0
}
   2907c:	b005      	add	sp, #20
   2907e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EINVAL;
   29082:	f06f 0015 	mvn.w	r0, #21
   29086:	e7f9      	b.n	2907c <bt_ccm_encrypt+0x42>

00029088 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   29088:	b510      	push	{r4, lr}
   2908a:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   2908c:	7801      	ldrb	r1, [r0, #0]
   2908e:	7822      	ldrb	r2, [r4, #0]
   29090:	428a      	cmp	r2, r1
{
   29092:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   29094:	d00e      	beq.n	290b4 <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
   29096:	4669      	mov	r1, sp
   29098:	f7de feac 	bl	7df4 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   2909c:	a905      	add	r1, sp, #20
   2909e:	4620      	mov	r0, r4
   290a0:	f7de fea8 	bl	7df4 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   290a4:	2210      	movs	r2, #16
   290a6:	f10d 0115 	add.w	r1, sp, #21
   290aa:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   290ae:	f004 fa5b 	bl	2d568 <memcmp>
   290b2:	e006      	b.n	290c2 <bt_uuid_cmp+0x3a>
	switch (u1->type) {
   290b4:	2a01      	cmp	r2, #1
   290b6:	d00a      	beq.n	290ce <bt_uuid_cmp+0x46>
   290b8:	b12a      	cbz	r2, 290c6 <bt_uuid_cmp+0x3e>
   290ba:	2a02      	cmp	r2, #2
   290bc:	d00a      	beq.n	290d4 <bt_uuid_cmp+0x4c>
	}

	return -EINVAL;
   290be:	f06f 0015 	mvn.w	r0, #21
}
   290c2:	b00a      	add	sp, #40	; 0x28
   290c4:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   290c6:	8840      	ldrh	r0, [r0, #2]
   290c8:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   290ca:	1ac0      	subs	r0, r0, r3
   290cc:	e7f9      	b.n	290c2 <bt_uuid_cmp+0x3a>
   290ce:	6840      	ldr	r0, [r0, #4]
   290d0:	6863      	ldr	r3, [r4, #4]
   290d2:	e7fa      	b.n	290ca <bt_uuid_cmp+0x42>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   290d4:	2210      	movs	r2, #16
   290d6:	1c61      	adds	r1, r4, #1
   290d8:	3001      	adds	r0, #1
   290da:	e7e8      	b.n	290ae <bt_uuid_cmp+0x26>

000290dc <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   290dc:	2a04      	cmp	r2, #4
{
   290de:	b530      	push	{r4, r5, lr}
	switch (data_len) {
   290e0:	d00d      	beq.n	290fe <bt_uuid_create+0x22>
   290e2:	2a10      	cmp	r2, #16
   290e4:	d019      	beq.n	2911a <bt_uuid_create+0x3e>
   290e6:	2a02      	cmp	r2, #2
   290e8:	f04f 0300 	mov.w	r3, #0
   290ec:	d121      	bne.n	29132 <bt_uuid_create+0x56>
	case 2:
		uuid->type = BT_UUID_TYPE_16;
   290ee:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   290f0:	784a      	ldrb	r2, [r1, #1]
   290f2:	780b      	ldrb	r3, [r1, #0]
   290f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   290f8:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   290fa:	2001      	movs	r0, #1
}
   290fc:	bd30      	pop	{r4, r5, pc}
		uuid->type = BT_UUID_TYPE_32;
   290fe:	2301      	movs	r3, #1
   29100:	7003      	strb	r3, [r0, #0]
   29102:	788a      	ldrb	r2, [r1, #2]
   29104:	78cc      	ldrb	r4, [r1, #3]
   29106:	784d      	ldrb	r5, [r1, #1]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   29108:	ea42 2404 	orr.w	r4, r2, r4, lsl #8
	return ((uint16_t)src[1] << 8) | src[0];
   2910c:	780a      	ldrb	r2, [r1, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   2910e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   29112:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   29116:	6042      	str	r2, [r0, #4]
		break;
   29118:	e7ef      	b.n	290fa <bt_uuid_create+0x1e>
		uuid->type = BT_UUID_TYPE_128;
   2911a:	2302      	movs	r3, #2
   2911c:	f800 3b01 	strb.w	r3, [r0], #1
   29120:	f101 0310 	add.w	r3, r1, #16
   29124:	f851 2b04 	ldr.w	r2, [r1], #4
   29128:	f840 2b04 	str.w	r2, [r0], #4
   2912c:	4299      	cmp	r1, r3
   2912e:	d1f9      	bne.n	29124 <bt_uuid_create+0x48>
   29130:	e7e3      	b.n	290fa <bt_uuid_create+0x1e>
		return false;
   29132:	4618      	mov	r0, r3
   29134:	e7e2      	b.n	290fc <bt_uuid_create+0x20>

00029136 <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   29136:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   29138:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   2913a:	2106      	movs	r1, #6
{
   2913c:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   2913e:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   29142:	f002 fdf4 	bl	2bd2e <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   29146:	b918      	cbnz	r0, 29150 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   29148:	79a3      	ldrb	r3, [r4, #6]
   2914a:	f063 033f 	orn	r3, r3, #63	; 0x3f
   2914e:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   29150:	bd10      	pop	{r4, pc}

00029152 <get_adv_channel_map>:
		channel_map &= ~0x01;
   29152:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   29156:	bf0c      	ite	eq
   29158:	2307      	moveq	r3, #7
   2915a:	2306      	movne	r3, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   2915c:	03c1      	lsls	r1, r0, #15
		channel_map &= ~0x02;
   2915e:	bf48      	it	mi
   29160:	f003 0305 	andmi.w	r3, r3, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   29164:	0382      	lsls	r2, r0, #14
		channel_map &= ~0x04;
   29166:	bf48      	it	mi
   29168:	f003 03fb 	andmi.w	r3, r3, #251	; 0xfb
}
   2916c:	4618      	mov	r0, r3
   2916e:	4770      	bx	lr

00029170 <atomic_or>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   29170:	f3bf 8f5b 	dmb	ish
   29174:	e850 3f00 	ldrex	r3, [r0]
   29178:	ea43 0201 	orr.w	r2, r3, r1
   2917c:	e840 2c00 	strex	ip, r2, [r0]
   29180:	f1bc 0f00 	cmp.w	ip, #0
   29184:	d1f6      	bne.n	29174 <atomic_or+0x4>
   29186:	f3bf 8f5b 	dmb	ish
}
   2918a:	4618      	mov	r0, r3
   2918c:	4770      	bx	lr

0002918e <atomic_test_and_set_bit>:
{
   2918e:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   29190:	2401      	movs	r4, #1
   29192:	408c      	lsls	r4, r1
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   29194:	4621      	mov	r1, r4
   29196:	f7ff ffeb 	bl	29170 <atomic_or>
	return (old & mask) != 0;
   2919a:	4204      	tst	r4, r0
}
   2919c:	bf14      	ite	ne
   2919e:	2001      	movne	r0, #1
   291a0:	2000      	moveq	r0, #0
   291a2:	bd10      	pop	{r4, pc}

000291a4 <atomic_and>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   291a4:	f3bf 8f5b 	dmb	ish
   291a8:	e850 3f00 	ldrex	r3, [r0]
   291ac:	ea03 0201 	and.w	r2, r3, r1
   291b0:	e840 2c00 	strex	ip, r2, [r0]
   291b4:	f1bc 0f00 	cmp.w	ip, #0
   291b8:	d1f6      	bne.n	291a8 <atomic_and+0x4>
   291ba:	f3bf 8f5b 	dmb	ish
}
   291be:	4618      	mov	r0, r3
   291c0:	4770      	bx	lr

000291c2 <atomic_set_bit_to>:
{
   291c2:	460b      	mov	r3, r1
   291c4:	b410      	push	{r4}
   291c6:	095b      	lsrs	r3, r3, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   291c8:	f001 041f 	and.w	r4, r1, #31
   291cc:	2101      	movs	r1, #1
   291ce:	40a1      	lsls	r1, r4
	if (val) {
   291d0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   291d4:	b112      	cbz	r2, 291dc <atomic_set_bit_to+0x1a>
}
   291d6:	bc10      	pop	{r4}
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   291d8:	f7ff bfca 	b.w	29170 <atomic_or>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   291dc:	43c9      	mvns	r1, r1
}
   291de:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   291e0:	f7ff bfe0 	b.w	291a4 <atomic_and>

000291e4 <bt_addr_le_cmp>:
   291e4:	2207      	movs	r2, #7
   291e6:	f004 b9bf 	b.w	2d568 <memcmp>

000291ea <bt_addr_copy>:
   291ea:	680b      	ldr	r3, [r1, #0]
   291ec:	6003      	str	r3, [r0, #0]
   291ee:	888b      	ldrh	r3, [r1, #4]
   291f0:	8083      	strh	r3, [r0, #4]
}
   291f2:	4770      	bx	lr

000291f4 <bt_addr_le_copy>:
   291f4:	680b      	ldr	r3, [r1, #0]
   291f6:	6003      	str	r3, [r0, #0]
   291f8:	888b      	ldrh	r3, [r1, #4]
   291fa:	8083      	strh	r3, [r0, #4]
   291fc:	798b      	ldrb	r3, [r1, #6]
   291fe:	7183      	strb	r3, [r0, #6]
}
   29200:	4770      	bx	lr

00029202 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   29202:	f3bf 8f5b 	dmb	ish
   29206:	6800      	ldr	r0, [r0, #0]
   29208:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2920c:	4108      	asrs	r0, r1
}
   2920e:	f000 0001 	and.w	r0, r0, #1
   29212:	4770      	bx	lr

00029214 <le_adv_set_private_addr.isra.27>:
static int le_adv_set_private_addr(struct bt_le_ext_adv *adv)
   29214:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   29216:	2106      	movs	r1, #6
   29218:	4668      	mov	r0, sp
   2921a:	f002 fd88 	bl	2bd2e <bt_rand>
	if (err) {
   2921e:	b940      	cbnz	r0, 29232 <le_adv_set_private_addr.isra.27+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   29220:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
   29224:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   29226:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2922a:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
   2922e:	f7df fdd9 	bl	8de4 <set_random_address>
}
   29232:	b003      	add	sp, #12
   29234:	f85d fb04 	ldr.w	pc, [sp], #4

00029238 <bt_hci_disconnect>:
{
   29238:	b570      	push	{r4, r5, r6, lr}
   2923a:	4606      	mov	r6, r0
   2923c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   2923e:	f240 4006 	movw	r0, #1030	; 0x406
   29242:	2103      	movs	r1, #3
   29244:	f7df fb22 	bl	888c <bt_hci_cmd_create>
	if (!buf) {
   29248:	4604      	mov	r4, r0
   2924a:	b168      	cbz	r0, 29268 <bt_hci_disconnect+0x30>
   2924c:	2103      	movs	r1, #3
   2924e:	3008      	adds	r0, #8
   29250:	f7f5 ffd0 	bl	1f1f4 <net_buf_simple_add>
	disconn->reason = reason;
   29254:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   29256:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   29258:	4621      	mov	r1, r4
   2925a:	2200      	movs	r2, #0
   2925c:	f240 4006 	movw	r0, #1030	; 0x406
}
   29260:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   29264:	f7df bc50 	b.w	8b08 <bt_hci_cmd_send_sync>
}
   29268:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2926c:	bd70      	pop	{r4, r5, r6, pc}

0002926e <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   2926e:	8802      	ldrh	r2, [r0, #0]
   29270:	8843      	ldrh	r3, [r0, #2]
   29272:	429a      	cmp	r2, r3
{
   29274:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   29276:	d818      	bhi.n	292aa <bt_le_conn_params_valid+0x3c>
   29278:	2a05      	cmp	r2, #5
   2927a:	d916      	bls.n	292aa <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   2927c:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   29280:	d813      	bhi.n	292aa <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
   29282:	8884      	ldrh	r4, [r0, #4]
   29284:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   29288:	d20f      	bcs.n	292aa <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
   2928a:	88c1      	ldrh	r1, [r0, #6]
   2928c:	f1a1 020a 	sub.w	r2, r1, #10
   29290:	b292      	uxth	r2, r2
   29292:	f640 4076 	movw	r0, #3190	; 0xc76
   29296:	4282      	cmp	r2, r0
   29298:	d807      	bhi.n	292aa <bt_le_conn_params_valid+0x3c>
	     ((1U + param->latency) * param->interval_max))) {
   2929a:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   2929e:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
   292a2:	bf34      	ite	cc
   292a4:	2001      	movcc	r0, #1
   292a6:	2000      	movcs	r0, #0
}
   292a8:	bd10      	pop	{r4, pc}
		return false;
   292aa:	2000      	movs	r0, #0
   292ac:	e7fc      	b.n	292a8 <bt_le_conn_params_valid+0x3a>

000292ae <bt_send>:
		return bt_hci_ecc_send(buf);
   292ae:	f7de bbfd 	b.w	7aac <bt_hci_ecc_send>

000292b2 <bt_addr_le_is_bonded>:
}
   292b2:	2000      	movs	r0, #0
   292b4:	4770      	bx	lr

000292b6 <le_enh_conn_complete>:
	enh_conn_complete((void *)buf->data);
   292b6:	6880      	ldr	r0, [r0, #8]
   292b8:	f7e0 bc98 	b.w	9bec <enh_conn_complete>

000292bc <le_legacy_conn_complete>:
{
   292bc:	b500      	push	{lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   292be:	6881      	ldr	r1, [r0, #8]
{
   292c0:	b08d      	sub	sp, #52	; 0x34
	enh.status         = evt->status;
   292c2:	780b      	ldrb	r3, [r1, #0]
   292c4:	f88d 3010 	strb.w	r3, [sp, #16]
	enh.handle         = evt->handle;
   292c8:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   292cc:	f8ad 3011 	strh.w	r3, [sp, #17]
	enh.role           = evt->role;
   292d0:	78cb      	ldrb	r3, [r1, #3]
   292d2:	f88d 3013 	strb.w	r3, [sp, #19]
	enh.interval       = evt->interval;
   292d6:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   292da:	f8ad 3027 	strh.w	r3, [sp, #39]	; 0x27
	enh.latency        = evt->latency;
   292de:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   292e2:	f8ad 3029 	strh.w	r3, [sp, #41]	; 0x29
	enh.supv_timeout   = evt->supv_timeout;
   292e6:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   292ea:	f8ad 302b 	strh.w	r3, [sp, #43]	; 0x2b
	enh.clock_accuracy = evt->clock_accuracy;
   292ee:	7c4b      	ldrb	r3, [r1, #17]
   292f0:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   292f4:	a805      	add	r0, sp, #20
   292f6:	3104      	adds	r1, #4
   292f8:	f7ff ff7c 	bl	291f4 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   292fc:	2200      	movs	r2, #0
   292fe:	4669      	mov	r1, sp
   29300:	f10d 001b 	add.w	r0, sp, #27
   29304:	9200      	str	r2, [sp, #0]
   29306:	f8ad 2004 	strh.w	r2, [sp, #4]
   2930a:	f7ff ff6e 	bl	291ea <bt_addr_copy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   2930e:	a902      	add	r1, sp, #8
   29310:	f10d 0021 	add.w	r0, sp, #33	; 0x21
   29314:	9202      	str	r2, [sp, #8]
   29316:	f8ad 200c 	strh.w	r2, [sp, #12]
   2931a:	f7ff ff66 	bl	291ea <bt_addr_copy>
	enh_conn_complete(&enh);
   2931e:	a804      	add	r0, sp, #16
   29320:	f7e0 fc64 	bl	9bec <enh_conn_complete>
}
   29324:	b00d      	add	sp, #52	; 0x34
   29326:	f85d fb04 	ldr.w	pc, [sp], #4

0002932a <bt_hci_evt_create>:
#include <stdint.h>
#include <sys/byteorder.h>
#include <drivers/bluetooth/hci_driver.h>

struct net_buf *bt_hci_evt_create(uint8_t evt, uint8_t len)
{
   2932a:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;

	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   2932c:	f04f 32ff 	mov.w	r2, #4294967295
{
   29330:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   29332:	f04f 33ff 	mov.w	r3, #4294967295
   29336:	2100      	movs	r1, #0
{
   29338:	4606      	mov	r6, r0
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   2933a:	f7de fdef 	bl	7f1c <bt_buf_get_evt>
   2933e:	2102      	movs	r1, #2
   29340:	4604      	mov	r4, r0
   29342:	3008      	adds	r0, #8
   29344:	f7f5 ff56 	bl	1f1f4 <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = evt;
   29348:	7006      	strb	r6, [r0, #0]
	hdr->len = len;
   2934a:	7045      	strb	r5, [r0, #1]

	return buf;
}
   2934c:	4620      	mov	r0, r4
   2934e:	bd70      	pop	{r4, r5, r6, pc}

00029350 <bt_hci_cmd_complete_create>:
struct net_buf *bt_hci_cmd_complete_create(uint16_t op, uint8_t plen)
{
	struct net_buf *buf;
	struct bt_hci_evt_cmd_complete *cc;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   29350:	3103      	adds	r1, #3
{
   29352:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   29354:	b2c9      	uxtb	r1, r1
{
   29356:	4605      	mov	r5, r0
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   29358:	200e      	movs	r0, #14
   2935a:	f7ff ffe6 	bl	2932a <bt_hci_evt_create>
   2935e:	2103      	movs	r1, #3
   29360:	4604      	mov	r4, r0
   29362:	3008      	adds	r0, #8
   29364:	f7f5 ff46 	bl	1f1f4 <net_buf_simple_add>

	cc = net_buf_add(buf, sizeof(*cc));
	cc->ncmd = 1U;
   29368:	2301      	movs	r3, #1
   2936a:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(op);
   2936c:	f8a0 5001 	strh.w	r5, [r0, #1]

	return buf;
}
   29370:	4620      	mov	r0, r4
   29372:	bd38      	pop	{r3, r4, r5, pc}

00029374 <bt_hci_cmd_status_create>:

struct net_buf *bt_hci_cmd_status_create(uint16_t op, uint8_t status)
{
   29374:	b570      	push	{r4, r5, r6, lr}
   29376:	4605      	mov	r5, r0
   29378:	460e      	mov	r6, r1
	struct net_buf *buf;
	struct bt_hci_evt_cmd_status *cs;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   2937a:	200f      	movs	r0, #15
   2937c:	2104      	movs	r1, #4
   2937e:	f7ff ffd4 	bl	2932a <bt_hci_evt_create>
   29382:	2104      	movs	r1, #4
   29384:	4604      	mov	r4, r0
   29386:	3008      	adds	r0, #8
   29388:	f7f5 ff34 	bl	1f1f4 <net_buf_simple_add>

	cs = net_buf_add(buf, sizeof(*cs));
	cs->status = status;
	cs->ncmd = 1U;
   2938c:	2301      	movs	r3, #1
	cs->status = status;
   2938e:	7006      	strb	r6, [r0, #0]
	cs->ncmd = 1U;
   29390:	7043      	strb	r3, [r0, #1]
	cs->opcode = sys_cpu_to_le16(op);
   29392:	8045      	strh	r5, [r0, #2]

	return buf;
}
   29394:	4620      	mov	r0, r4
   29396:	bd70      	pop	{r4, r5, r6, pc}

00029398 <bt_conn_new.part.10>:
struct bt_conn *bt_conn_new(struct bt_conn *conns, size_t size)
   29398:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   2939a:	2200      	movs	r2, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2939c:	2401      	movs	r4, #1
   2939e:	428a      	cmp	r2, r1
   293a0:	d102      	bne.n	293a8 <bt_conn_new.part.10+0x10>
		return NULL;
   293a2:	2300      	movs	r3, #0
}
   293a4:	4618      	mov	r0, r3
   293a6:	bd38      	pop	{r3, r4, r5, pc}
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   293a8:	4603      	mov	r3, r0
   293aa:	30b8      	adds	r0, #184	; 0xb8
   293ac:	f3bf 8f5b 	dmb	ish
   293b0:	e850 5f00 	ldrex	r5, [r0]
   293b4:	2d00      	cmp	r5, #0
   293b6:	d104      	bne.n	293c2 <bt_conn_new.part.10+0x2a>
   293b8:	e840 4c00 	strex	ip, r4, [r0]
   293bc:	f1bc 0f00 	cmp.w	ip, #0
   293c0:	d1f6      	bne.n	293b0 <bt_conn_new.part.10+0x18>
   293c2:	f3bf 8f5b 	dmb	ish
   293c6:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
   293ca:	d001      	beq.n	293d0 <bt_conn_new.part.10+0x38>
	for (i = 0; i < size; i++) {
   293cc:	3201      	adds	r2, #1
   293ce:	e7e6      	b.n	2939e <bt_conn_new.part.10+0x6>
	if (!conn) {
   293d0:	2b00      	cmp	r3, #0
   293d2:	d0e7      	beq.n	293a4 <bt_conn_new.part.10+0xc>
__ssp_bos_icheck3(memset, void *, int)
   293d4:	4618      	mov	r0, r3
   293d6:	22b8      	movs	r2, #184	; 0xb8
   293d8:	2100      	movs	r1, #0
   293da:	f004 f90e 	bl	2d5fa <memset>
   293de:	4603      	mov	r3, r0
   293e0:	e7e0      	b.n	293a4 <bt_conn_new.part.10+0xc>

000293e2 <tx_notify>:
{
   293e2:	b570      	push	{r4, r5, r6, lr}
   293e4:	4604      	mov	r4, r0
	__asm__ volatile(
   293e6:	f04f 0220 	mov.w	r2, #32
   293ea:	f3ef 8311 	mrs	r3, BASEPRI
   293ee:	f382 8811 	msr	BASEPRI, r2
   293f2:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   293f6:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   293f8:	b920      	cbnz	r0, 29404 <tx_notify+0x22>
	__asm__ volatile(
   293fa:	f383 8811 	msr	BASEPRI, r3
   293fe:	f3bf 8f6f 	isb	sy
}
   29402:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   29404:	6a61      	ldr	r1, [r4, #36]	; 0x24
   29406:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   29408:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2940a:	4288      	cmp	r0, r1
	list->tail = node;
   2940c:	bf08      	it	eq
   2940e:	6262      	streq	r2, [r4, #36]	; 0x24
   29410:	f383 8811 	msr	BASEPRI, r3
   29414:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   29418:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   2941c:	f7e0 fdf4 	bl	a008 <tx_free>
		cb(conn, user_data);
   29420:	4631      	mov	r1, r6
   29422:	4620      	mov	r0, r4
   29424:	47a8      	blx	r5
	while (1) {
   29426:	e7de      	b.n	293e6 <tx_notify+0x4>

00029428 <tx_complete_work>:
	tx_notify(conn);
   29428:	3828      	subs	r0, #40	; 0x28
   2942a:	f7ff bfda 	b.w	293e2 <tx_notify>

0002942e <bt_conn_ref.part.12>:
struct bt_conn *bt_conn_ref(struct bt_conn *conn)
   2942e:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   29430:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   29434:	f3bf 8f5b 	dmb	ish
   29438:	6813      	ldr	r3, [r2, #0]
   2943a:	f3bf 8f5b 	dmb	ish
		if (!old) {
   2943e:	b17b      	cbz	r3, 29460 <bt_conn_ref.part.12+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   29440:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   29444:	1c59      	adds	r1, r3, #1
   29446:	e852 4f00 	ldrex	r4, [r2]
   2944a:	429c      	cmp	r4, r3
   2944c:	d104      	bne.n	29458 <bt_conn_ref.part.12+0x2a>
   2944e:	e842 1c00 	strex	ip, r1, [r2]
   29452:	f1bc 0f00 	cmp.w	ip, #0
   29456:	d1f6      	bne.n	29446 <bt_conn_ref.part.12+0x18>
   29458:	f3bf 8f5b 	dmb	ish
   2945c:	d1ea      	bne.n	29434 <bt_conn_ref.part.12+0x6>
}
   2945e:	bd10      	pop	{r4, pc}
			return NULL;
   29460:	4618      	mov	r0, r3
   29462:	e7fc      	b.n	2945e <bt_conn_ref.part.12+0x30>

00029464 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   29464:	f3bf 8f5b 	dmb	ish
   29468:	6800      	ldr	r0, [r0, #0]
   2946a:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2946e:	4108      	asrs	r0, r1
}
   29470:	f000 0001 	and.w	r0, r0, #1
   29474:	4770      	bx	lr

00029476 <bt_conn_get_security>:
}
   29476:	2001      	movs	r0, #1
   29478:	4770      	bx	lr

0002947a <bt_conn_reset_rx_state>:
{
   2947a:	b510      	push	{r4, lr}
   2947c:	4604      	mov	r4, r0
	if (!conn->rx) {
   2947e:	6900      	ldr	r0, [r0, #16]
   29480:	b118      	cbz	r0, 2948a <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   29482:	f7f5 fd67 	bl	1ef54 <net_buf_unref>
	conn->rx = NULL;
   29486:	2300      	movs	r3, #0
   29488:	6123      	str	r3, [r4, #16]
}
   2948a:	bd10      	pop	{r4, pc}

0002948c <bt_conn_is_peer_addr_le>:
{
   2948c:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   2948e:	7a03      	ldrb	r3, [r0, #8]
   29490:	428b      	cmp	r3, r1
{
   29492:	4604      	mov	r4, r0
   29494:	4615      	mov	r5, r2
	if (id != conn->id) {
   29496:	d115      	bne.n	294c4 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   29498:	f100 0188 	add.w	r1, r0, #136	; 0x88
   2949c:	2207      	movs	r2, #7
   2949e:	4628      	mov	r0, r5
   294a0:	f004 f862 	bl	2d568 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   294a4:	b180      	cbz	r0, 294c8 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   294a6:	78e3      	ldrb	r3, [r4, #3]
   294a8:	2207      	movs	r2, #7
   294aa:	b943      	cbnz	r3, 294be <bt_conn_is_peer_addr_le+0x32>
   294ac:	f104 0196 	add.w	r1, r4, #150	; 0x96
   294b0:	4628      	mov	r0, r5
   294b2:	f004 f859 	bl	2d568 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   294b6:	fab0 f080 	clz	r0, r0
   294ba:	0940      	lsrs	r0, r0, #5
}
   294bc:	bd38      	pop	{r3, r4, r5, pc}
   294be:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   294c2:	e7f5      	b.n	294b0 <bt_conn_is_peer_addr_le+0x24>
		return false;
   294c4:	2000      	movs	r0, #0
   294c6:	e7f9      	b.n	294bc <bt_conn_is_peer_addr_le+0x30>
		return true;
   294c8:	2001      	movs	r0, #1
   294ca:	e7f7      	b.n	294bc <bt_conn_is_peer_addr_le+0x30>

000294cc <bt_conn_ref>:
{
   294cc:	f7ff bfaf 	b.w	2942e <bt_conn_ref.part.12>

000294d0 <conn_lookup_handle>:
{
   294d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   294d4:	4606      	mov	r6, r0
   294d6:	460d      	mov	r5, r1
   294d8:	4617      	mov	r7, r2
	for (i = 0; i < size; i++) {
   294da:	2400      	movs	r4, #0
   294dc:	f04f 08c0 	mov.w	r8, #192	; 0xc0
   294e0:	f04f 0901 	mov.w	r9, #1
   294e4:	42ac      	cmp	r4, r5
   294e6:	d103      	bne.n	294f0 <conn_lookup_handle+0x20>
	return NULL;
   294e8:	2300      	movs	r3, #0
}
   294ea:	4618      	mov	r0, r3
   294ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
struct bt_conn *bt_conn_ref(struct bt_conn *conn)
   294f0:	fb08 6004 	mla	r0, r8, r4, r6
   294f4:	f7ff ff9b 	bl	2942e <bt_conn_ref.part.12>
		if (!conn) {
   294f8:	4603      	mov	r3, r0
   294fa:	b160      	cbz	r0, 29516 <conn_lookup_handle+0x46>
		if (!bt_conn_is_handle_valid(conn)) {
   294fc:	7a82      	ldrb	r2, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   294fe:	2a08      	cmp	r2, #8
   29500:	d80b      	bhi.n	2951a <conn_lookup_handle+0x4a>
   29502:	fa09 f202 	lsl.w	r2, r9, r2
   29506:	f412 7fc1 	tst.w	r2, #386	; 0x182
   2950a:	d006      	beq.n	2951a <conn_lookup_handle+0x4a>
		if (conn->handle != handle) {
   2950c:	8802      	ldrh	r2, [r0, #0]
   2950e:	42ba      	cmp	r2, r7
   29510:	d0eb      	beq.n	294ea <conn_lookup_handle+0x1a>
			bt_conn_unref(conn);
   29512:	f7e1 f819 	bl	a548 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   29516:	3401      	adds	r4, #1
   29518:	e7e4      	b.n	294e4 <conn_lookup_handle+0x14>
			bt_conn_unref(conn);
   2951a:	4618      	mov	r0, r3
   2951c:	e7f9      	b.n	29512 <conn_lookup_handle+0x42>

0002951e <bt_conn_lookup_addr_le>:
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   2951e:	f7e1 b91d 	b.w	a75c <bt_conn_lookup_addr_le.part.13>

00029522 <bt_conn_le_conn_update>:
{
   29522:	b570      	push	{r4, r5, r6, lr}
   29524:	4606      	mov	r6, r0
   29526:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   29528:	f242 0013 	movw	r0, #8211	; 0x2013
   2952c:	210e      	movs	r1, #14
   2952e:	f7df f9ad 	bl	888c <bt_hci_cmd_create>
	if (!buf) {
   29532:	4605      	mov	r5, r0
   29534:	b1c8      	cbz	r0, 2956a <bt_conn_le_conn_update+0x48>
   29536:	210e      	movs	r1, #14
   29538:	3008      	adds	r0, #8
   2953a:	f7f5 fe5b 	bl	1f1f4 <net_buf_simple_add>
   2953e:	220e      	movs	r2, #14
   29540:	2100      	movs	r1, #0
   29542:	f004 f85a 	bl	2d5fa <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   29546:	8832      	ldrh	r2, [r6, #0]
   29548:	8002      	strh	r2, [r0, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   2954a:	8822      	ldrh	r2, [r4, #0]
   2954c:	8042      	strh	r2, [r0, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   2954e:	8862      	ldrh	r2, [r4, #2]
   29550:	8082      	strh	r2, [r0, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   29552:	88a2      	ldrh	r2, [r4, #4]
   29554:	80c2      	strh	r2, [r0, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   29556:	88e2      	ldrh	r2, [r4, #6]
   29558:	8102      	strh	r2, [r0, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2955a:	4629      	mov	r1, r5
   2955c:	2200      	movs	r2, #0
   2955e:	f242 0013 	movw	r0, #8211	; 0x2013
}
   29562:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   29566:	f7df bacf 	b.w	8b08 <bt_hci_cmd_send_sync>
}
   2956a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2956e:	bd70      	pop	{r4, r5, r6, pc}

00029570 <l2cap_connected>:
}
   29570:	4770      	bx	lr

00029572 <l2cap_disconnected>:
   29572:	4770      	bx	lr

00029574 <bt_l2cap_chan_remove>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   29574:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   29576:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   29578:	b17b      	cbz	r3, 2959a <bt_l2cap_chan_remove+0x26>
   2957a:	3b08      	subs	r3, #8
   2957c:	2200      	movs	r2, #0
   2957e:	b163      	cbz	r3, 2959a <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   29580:	428b      	cmp	r3, r1
   29582:	f103 0408 	add.w	r4, r3, #8
   29586:	d10f      	bne.n	295a8 <bt_l2cap_chan_remove+0x34>
Z_GENLIST_REMOVE(slist, snode)
   29588:	688b      	ldr	r3, [r1, #8]
   2958a:	b93a      	cbnz	r2, 2959c <bt_l2cap_chan_remove+0x28>
   2958c:	6d42      	ldr	r2, [r0, #84]	; 0x54
	list->head = node;
   2958e:	6503      	str	r3, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
   29590:	4294      	cmp	r4, r2
   29592:	d100      	bne.n	29596 <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   29594:	6543      	str	r3, [r0, #84]	; 0x54
	parent->next = child;
   29596:	2300      	movs	r3, #0
   29598:	608b      	str	r3, [r1, #8]
}
   2959a:	bd10      	pop	{r4, pc}
   2959c:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2959e:	6d43      	ldr	r3, [r0, #84]	; 0x54
   295a0:	429c      	cmp	r4, r3
	list->tail = node;
   295a2:	bf08      	it	eq
   295a4:	6542      	streq	r2, [r0, #84]	; 0x54
   295a6:	e7f6      	b.n	29596 <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   295a8:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   295aa:	2b00      	cmp	r3, #0
   295ac:	d0f5      	beq.n	2959a <bt_l2cap_chan_remove+0x26>
   295ae:	3b08      	subs	r3, #8
   295b0:	4622      	mov	r2, r4
   295b2:	e7e4      	b.n	2957e <bt_l2cap_chan_remove+0xa>

000295b4 <bt_l2cap_chan_del>:
{
   295b4:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   295b6:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   295ba:	4604      	mov	r4, r0
	if (!chan->conn) {
   295bc:	b123      	cbz	r3, 295c8 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   295be:	686b      	ldr	r3, [r5, #4]
   295c0:	b103      	cbz	r3, 295c4 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   295c2:	4798      	blx	r3
	chan->conn = NULL;
   295c4:	2300      	movs	r3, #0
   295c6:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   295c8:	68e3      	ldr	r3, [r4, #12]
   295ca:	b10b      	cbz	r3, 295d0 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   295cc:	4620      	mov	r0, r4
   295ce:	4798      	blx	r3
	if (ops->released) {
   295d0:	69eb      	ldr	r3, [r5, #28]
   295d2:	b11b      	cbz	r3, 295dc <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   295d4:	4620      	mov	r0, r4
}
   295d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   295da:	4718      	bx	r3
}
   295dc:	bd70      	pop	{r4, r5, r6, pc}

000295de <bt_l2cap_disconnected>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   295de:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   295e0:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   295e2:	b173      	cbz	r3, 29602 <bt_l2cap_disconnected+0x24>
   295e4:	f1b3 0008 	subs.w	r0, r3, #8
   295e8:	d00b      	beq.n	29602 <bt_l2cap_disconnected+0x24>
   295ea:	681c      	ldr	r4, [r3, #0]
   295ec:	b104      	cbz	r4, 295f0 <bt_l2cap_disconnected+0x12>
   295ee:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   295f0:	f7ff ffe0 	bl	295b4 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   295f4:	b12c      	cbz	r4, 29602 <bt_l2cap_disconnected+0x24>
   295f6:	68a3      	ldr	r3, [r4, #8]
   295f8:	b103      	cbz	r3, 295fc <bt_l2cap_disconnected+0x1e>
   295fa:	3b08      	subs	r3, #8
{
   295fc:	4620      	mov	r0, r4
   295fe:	461c      	mov	r4, r3
   29600:	e7f6      	b.n	295f0 <bt_l2cap_disconnected+0x12>
}
   29602:	bd10      	pop	{r4, pc}

00029604 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   29604:	3104      	adds	r1, #4
   29606:	f7e1 b9c9 	b.w	a99c <bt_conn_create_pdu_timeout>

0002960a <bt_l2cap_send_cb>:
{
   2960a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2960e:	4614      	mov	r4, r2
   29610:	4605      	mov	r5, r0
   29612:	4688      	mov	r8, r1
	return net_buf_simple_push(&buf->b, len);
   29614:	f102 0008 	add.w	r0, r2, #8
   29618:	2104      	movs	r1, #4
   2961a:	461e      	mov	r6, r3
   2961c:	9f06      	ldr	r7, [sp, #24]
   2961e:	f7f5 fd91 	bl	1f144 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   29622:	89a1      	ldrh	r1, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   29624:	f8a0 8002 	strh.w	r8, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   29628:	3904      	subs	r1, #4
   2962a:	8001      	strh	r1, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2962c:	463b      	mov	r3, r7
   2962e:	4632      	mov	r2, r6
   29630:	4621      	mov	r1, r4
   29632:	4628      	mov	r0, r5
}
   29634:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   29638:	f7e0 beb6 	b.w	a3a8 <bt_conn_send_cb>

0002963c <bt_l2cap_le_lookup_tx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2963c:	6d00      	ldr	r0, [r0, #80]	; 0x50
   2963e:	b108      	cbz	r0, 29644 <bt_l2cap_le_lookup_tx_cid+0x8>
   29640:	3808      	subs	r0, #8
   29642:	b900      	cbnz	r0, 29646 <bt_l2cap_le_lookup_tx_cid+0xa>
}
   29644:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   29646:	f8b0 3054 	ldrh.w	r3, [r0, #84]	; 0x54
   2964a:	428b      	cmp	r3, r1
   2964c:	d0fa      	beq.n	29644 <bt_l2cap_le_lookup_tx_cid+0x8>
   2964e:	6880      	ldr	r0, [r0, #8]
   29650:	e7f5      	b.n	2963e <bt_l2cap_le_lookup_tx_cid+0x2>

00029652 <bt_l2cap_le_lookup_rx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   29652:	6d00      	ldr	r0, [r0, #80]	; 0x50
   29654:	b108      	cbz	r0, 2965a <bt_l2cap_le_lookup_rx_cid+0x8>
   29656:	3808      	subs	r0, #8
   29658:	b900      	cbnz	r0, 2965c <bt_l2cap_le_lookup_rx_cid+0xa>
}
   2965a:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2965c:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   29660:	428b      	cmp	r3, r1
   29662:	d0fa      	beq.n	2965a <bt_l2cap_le_lookup_rx_cid+0x8>
   29664:	6880      	ldr	r0, [r0, #8]
   29666:	e7f5      	b.n	29654 <bt_l2cap_le_lookup_rx_cid+0x2>

00029668 <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   29668:	4770      	bx	lr

0002966a <sys_slist_get>:
Z_GENLIST_IS_EMPTY(slist)
   2966a:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET(slist, snode)
   2966c:	b12b      	cbz	r3, 2967a <sys_slist_get+0x10>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2966e:	6841      	ldr	r1, [r0, #4]
   29670:	681a      	ldr	r2, [r3, #0]
	list->head = node;
   29672:	6002      	str	r2, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   29674:	428b      	cmp	r3, r1
	list->tail = node;
   29676:	bf08      	it	eq
   29678:	6042      	streq	r2, [r0, #4]
Z_GENLIST_GET(slist, snode)
   2967a:	4618      	mov	r0, r3
   2967c:	4770      	bx	lr

0002967e <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2967e:	6803      	ldr	r3, [r0, #0]
   29680:	2200      	movs	r2, #0
   29682:	b90b      	cbnz	r3, 29688 <sys_slist_find_and_remove+0xa>
   29684:	4618      	mov	r0, r3
   29686:	4770      	bx	lr
   29688:	428b      	cmp	r3, r1
   2968a:	d110      	bne.n	296ae <sys_slist_find_and_remove+0x30>
Z_GENLIST_REMOVE(slist, snode)
   2968c:	680b      	ldr	r3, [r1, #0]
   2968e:	b942      	cbnz	r2, 296a2 <sys_slist_find_and_remove+0x24>
   29690:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   29692:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   29694:	4291      	cmp	r1, r2
   29696:	d100      	bne.n	2969a <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   29698:	6043      	str	r3, [r0, #4]
	parent->next = child;
   2969a:	2300      	movs	r3, #0
   2969c:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2969e:	2001      	movs	r0, #1
   296a0:	4770      	bx	lr
	parent->next = child;
   296a2:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   296a4:	6843      	ldr	r3, [r0, #4]
   296a6:	4299      	cmp	r1, r3
	list->tail = node;
   296a8:	bf08      	it	eq
   296aa:	6042      	streq	r2, [r0, #4]
   296ac:	e7f5      	b.n	2969a <sys_slist_find_and_remove+0x1c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   296ae:	461a      	mov	r2, r3
   296b0:	681b      	ldr	r3, [r3, #0]
   296b2:	e7e6      	b.n	29682 <sys_slist_find_and_remove+0x4>

000296b4 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   296b4:	4603      	mov	r3, r0
	size_t bytes = 0;
   296b6:	2000      	movs	r0, #0

	while (buf) {
   296b8:	b903      	cbnz	r3, 296bc <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   296ba:	4770      	bx	lr
		bytes += buf->len;
   296bc:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   296be:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   296c0:	4410      	add	r0, r2
		buf = buf->frags;
   296c2:	e7f9      	b.n	296b8 <net_buf_frags_len+0x4>

000296c4 <att_sent>:
	if (chan->ops->sent) {
   296c4:	684b      	ldr	r3, [r1, #4]
   296c6:	695b      	ldr	r3, [r3, #20]
   296c8:	b10b      	cbz	r3, 296ce <att_sent+0xa>
		chan->ops->sent(chan);
   296ca:	4608      	mov	r0, r1
   296cc:	4718      	bx	r3
}
   296ce:	4770      	bx	lr

000296d0 <attr_read_type_cb>:
{
   296d0:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   296d2:	68d4      	ldr	r4, [r2, #12]
   296d4:	7823      	ldrb	r3, [r4, #0]
   296d6:	3102      	adds	r1, #2
   296d8:	b913      	cbnz	r3, 296e0 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   296da:	7021      	strb	r1, [r4, #0]
	return true;
   296dc:	2001      	movs	r0, #1
   296de:	e006      	b.n	296ee <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   296e0:	428b      	cmp	r3, r1
   296e2:	d0fb      	beq.n	296dc <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   296e4:	8983      	ldrh	r3, [r0, #12]
   296e6:	3b02      	subs	r3, #2
   296e8:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   296ea:	2000      	movs	r0, #0
   296ec:	6110      	str	r0, [r2, #16]
}
   296ee:	bd10      	pop	{r4, pc}

000296f0 <att_prepare_write_req>:
}
   296f0:	2006      	movs	r0, #6
   296f2:	4770      	bx	lr

000296f4 <att_op_get_type>:
	switch (op) {
   296f4:	280e      	cmp	r0, #14
   296f6:	d00a      	beq.n	2970e <att_op_get_type+0x1a>
   296f8:	d81e      	bhi.n	29738 <att_op_get_type+0x44>
   296fa:	2807      	cmp	r0, #7
   296fc:	d015      	beq.n	2972a <att_op_get_type+0x36>
   296fe:	d80d      	bhi.n	2971c <att_op_get_type+0x28>
   29700:	2803      	cmp	r0, #3
   29702:	d012      	beq.n	2972a <att_op_get_type+0x36>
   29704:	d805      	bhi.n	29712 <att_op_get_type+0x1e>
   29706:	2801      	cmp	r0, #1
   29708:	d00f      	beq.n	2972a <att_op_get_type+0x36>
   2970a:	2802      	cmp	r0, #2
   2970c:	d12b      	bne.n	29766 <att_op_get_type+0x72>
		return ATT_REQUEST;
   2970e:	2001      	movs	r0, #1
   29710:	4770      	bx	lr
	switch (op) {
   29712:	2805      	cmp	r0, #5
		return ATT_REQUEST;
   29714:	bf0c      	ite	eq
   29716:	2002      	moveq	r0, #2
   29718:	2001      	movne	r0, #1
   2971a:	4770      	bx	lr
	switch (op) {
   2971c:	280a      	cmp	r0, #10
   2971e:	d0f6      	beq.n	2970e <att_op_get_type+0x1a>
   29720:	d805      	bhi.n	2972e <att_op_get_type+0x3a>
   29722:	2808      	cmp	r0, #8
   29724:	d0f3      	beq.n	2970e <att_op_get_type+0x1a>
   29726:	2809      	cmp	r0, #9
   29728:	d11d      	bne.n	29766 <att_op_get_type+0x72>
		return ATT_RESPONSE;
   2972a:	2002      	movs	r0, #2
   2972c:	4770      	bx	lr
	switch (op) {
   2972e:	280c      	cmp	r0, #12
		return ATT_RESPONSE;
   29730:	bf0c      	ite	eq
   29732:	2001      	moveq	r0, #1
   29734:	2002      	movne	r0, #2
   29736:	4770      	bx	lr
	switch (op) {
   29738:	2817      	cmp	r0, #23
   2973a:	d0f6      	beq.n	2972a <att_op_get_type+0x36>
   2973c:	d80b      	bhi.n	29756 <att_op_get_type+0x62>
   2973e:	2811      	cmp	r0, #17
   29740:	d0f3      	beq.n	2972a <att_op_get_type+0x36>
   29742:	d803      	bhi.n	2974c <att_op_get_type+0x58>
   29744:	280f      	cmp	r0, #15
   29746:	d0f0      	beq.n	2972a <att_op_get_type+0x36>
   29748:	2810      	cmp	r0, #16
   2974a:	e7df      	b.n	2970c <att_op_get_type+0x18>
   2974c:	2813      	cmp	r0, #19
   2974e:	d0ec      	beq.n	2972a <att_op_get_type+0x36>
   29750:	d3dd      	bcc.n	2970e <att_op_get_type+0x1a>
   29752:	2816      	cmp	r0, #22
   29754:	e7da      	b.n	2970c <att_op_get_type+0x18>
   29756:	281d      	cmp	r0, #29
   29758:	d013      	beq.n	29782 <att_op_get_type+0x8e>
   2975a:	d80a      	bhi.n	29772 <att_op_get_type+0x7e>
   2975c:	2819      	cmp	r0, #25
   2975e:	d0e4      	beq.n	2972a <att_op_get_type+0x36>
   29760:	d3d5      	bcc.n	2970e <att_op_get_type+0x1a>
   29762:	281b      	cmp	r0, #27
   29764:	d00f      	beq.n	29786 <att_op_get_type+0x92>
	if (op & ATT_CMD_MASK) {
   29766:	f010 0f40 	tst.w	r0, #64	; 0x40
		return ATT_COMMAND;
   2976a:	bf0c      	ite	eq
   2976c:	2006      	moveq	r0, #6
   2976e:	2000      	movne	r0, #0
   29770:	4770      	bx	lr
	switch (op) {
   29772:	2852      	cmp	r0, #82	; 0x52
   29774:	d009      	beq.n	2978a <att_op_get_type+0x96>
   29776:	28d2      	cmp	r0, #210	; 0xd2
   29778:	d007      	beq.n	2978a <att_op_get_type+0x96>
   2977a:	281e      	cmp	r0, #30
   2977c:	d1f3      	bne.n	29766 <att_op_get_type+0x72>
		return ATT_CONFIRMATION;
   2977e:	2004      	movs	r0, #4
}
   29780:	4770      	bx	lr
		return ATT_INDICATION;
   29782:	2005      	movs	r0, #5
   29784:	4770      	bx	lr
		return ATT_NOTIFICATION;
   29786:	2003      	movs	r0, #3
   29788:	4770      	bx	lr
		return ATT_COMMAND;
   2978a:	2000      	movs	r0, #0
   2978c:	4770      	bx	lr

0002978e <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2978e:	f3bf 8f5b 	dmb	ish
   29792:	6800      	ldr	r0, [r0, #0]
   29794:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   29798:	4108      	asrs	r0, r1
}
   2979a:	f000 0001 	and.w	r0, r0, #1
   2979e:	4770      	bx	lr

000297a0 <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   297a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   297a2:	e9cd 2301 	strd	r2, r3, [sp, #4]
   297a6:	2300      	movs	r3, #0
   297a8:	9300      	str	r3, [sp, #0]
   297aa:	461a      	mov	r2, r3
   297ac:	f7e3 f988 	bl	cac0 <bt_gatt_foreach_attr_type>
				  user_data);
}
   297b0:	b005      	add	sp, #20
   297b2:	f85d fb04 	ldr.w	pc, [sp], #4

000297b6 <att_chan_read>:
{
   297b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   297ba:	4680      	mov	r8, r0
   297bc:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   297be:	4610      	mov	r0, r2
{
   297c0:	469a      	mov	sl, r3
   297c2:	468b      	mov	fp, r1
   297c4:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   297c6:	f7ff ff75 	bl	296b4 <net_buf_frags_len>
   297ca:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
   297ce:	4283      	cmp	r3, r0
   297d0:	d97a      	bls.n	298c8 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   297d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   297d6:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   297d8:	4630      	mov	r0, r6
   297da:	f7f5 fc17 	bl	1f00c <net_buf_frag_last>
	size_t len, total = 0;
   297de:	f04f 0900 	mov.w	r9, #0
	frag = net_buf_frag_last(buf);
   297e2:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   297e4:	4630      	mov	r0, r6
   297e6:	f7ff ff65 	bl	296b4 <net_buf_frags_len>
   297ea:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
	return net_buf_simple_tailroom(&buf->b);
   297ee:	f105 0708 	add.w	r7, r5, #8
   297f2:	1a24      	subs	r4, r4, r0
   297f4:	4638      	mov	r0, r7
   297f6:	f003 f8ec 	bl	2c9d2 <net_buf_simple_tailroom>
   297fa:	4284      	cmp	r4, r0
   297fc:	d211      	bcs.n	29822 <att_chan_read+0x6c>
   297fe:	4630      	mov	r0, r6
   29800:	f7ff ff58 	bl	296b4 <net_buf_frags_len>
   29804:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   29808:	1a24      	subs	r4, r4, r0
		if (!len) {
   2980a:	bb34      	cbnz	r4, 2985a <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   2980c:	79b0      	ldrb	r0, [r6, #6]
   2980e:	f7f5 f98d 	bl	1eb2c <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   29812:	2200      	movs	r2, #0
   29814:	2300      	movs	r3, #0
   29816:	f003 f870 	bl	2c8fa <net_buf_alloc_fixed>
			if (!frag) {
   2981a:	4605      	mov	r5, r0
   2981c:	b930      	cbnz	r0, 2982c <att_chan_read+0x76>
	return total;
   2981e:	464f      	mov	r7, r9
   29820:	e02c      	b.n	2987c <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   29822:	4638      	mov	r0, r7
   29824:	f003 f8d5 	bl	2c9d2 <net_buf_simple_tailroom>
   29828:	4604      	mov	r4, r0
   2982a:	e7ee      	b.n	2980a <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   2982c:	4601      	mov	r1, r0
   2982e:	4630      	mov	r0, r6
   29830:	f7f5 fc2c 	bl	1f08c <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   29834:	4630      	mov	r0, r6
   29836:	f7ff ff3d 	bl	296b4 <net_buf_frags_len>
   2983a:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   2983e:	f105 0708 	add.w	r7, r5, #8
   29842:	1a24      	subs	r4, r4, r0
   29844:	4638      	mov	r0, r7
   29846:	f003 f8c4 	bl	2c9d2 <net_buf_simple_tailroom>
   2984a:	4284      	cmp	r4, r0
   2984c:	d21a      	bcs.n	29884 <att_chan_read+0xce>
   2984e:	4630      	mov	r0, r6
   29850:	f7ff ff30 	bl	296b4 <net_buf_frags_len>
   29854:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   29858:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   2985a:	68a9      	ldr	r1, [r5, #8]
   2985c:	89aa      	ldrh	r2, [r5, #12]
   2985e:	f8db 7004 	ldr.w	r7, [fp, #4]
   29862:	f8cd a000 	str.w	sl, [sp]
   29866:	440a      	add	r2, r1
   29868:	b2a3      	uxth	r3, r4
   2986a:	4659      	mov	r1, fp
   2986c:	9803      	ldr	r0, [sp, #12]
   2986e:	47b8      	blx	r7
		if (read < 0) {
   29870:	1e07      	subs	r7, r0, #0
   29872:	da0c      	bge.n	2988e <att_chan_read+0xd8>
				return total;
   29874:	f1b9 0f00 	cmp.w	r9, #0
   29878:	bf18      	it	ne
   2987a:	464f      	movne	r7, r9
}
   2987c:	4638      	mov	r0, r7
   2987e:	b005      	add	sp, #20
   29880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29884:	4638      	mov	r0, r7
   29886:	f003 f8a4 	bl	2c9d2 <net_buf_simple_tailroom>
   2988a:	4604      	mov	r4, r0
   2988c:	e7e5      	b.n	2985a <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   2988e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   29890:	b993      	cbnz	r3, 298b8 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   29892:	4639      	mov	r1, r7
   29894:	f105 0008 	add.w	r0, r5, #8
   29898:	f7f5 fcac 	bl	1f1f4 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2989c:	4630      	mov	r0, r6
   2989e:	f7ff ff09 	bl	296b4 <net_buf_frags_len>
   298a2:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
		offset += read;
   298a6:	44ba      	add	sl, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   298a8:	4283      	cmp	r3, r0
		total += read;
   298aa:	44b9      	add	r9, r7
		offset += read;
   298ac:	fa1f fa8a 	uxth.w	sl, sl
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   298b0:	d9b5      	bls.n	2981e <att_chan_read+0x68>
   298b2:	42a7      	cmp	r7, r4
   298b4:	d096      	beq.n	297e4 <att_chan_read+0x2e>
   298b6:	e7b2      	b.n	2981e <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   298b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   298ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   298bc:	4639      	mov	r1, r7
   298be:	4628      	mov	r0, r5
   298c0:	4798      	blx	r3
   298c2:	2800      	cmp	r0, #0
   298c4:	d1e5      	bne.n	29892 <att_chan_read+0xdc>
   298c6:	e7aa      	b.n	2981e <att_chan_read+0x68>
		return 0;
   298c8:	2700      	movs	r7, #0
   298ca:	e7d7      	b.n	2987c <att_chan_read+0xc6>

000298cc <attr_read_group_cb>:
	if (!data->rsp->len) {
   298cc:	68d0      	ldr	r0, [r2, #12]
   298ce:	7803      	ldrb	r3, [r0, #0]
   298d0:	3104      	adds	r1, #4
   298d2:	b913      	cbnz	r3, 298da <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   298d4:	7001      	strb	r1, [r0, #0]
	return true;
   298d6:	2001      	movs	r0, #1
}
   298d8:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   298da:	428b      	cmp	r3, r1
   298dc:	d0fb      	beq.n	298d6 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   298de:	6891      	ldr	r1, [r2, #8]
   298e0:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   298e2:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   298e4:	3b04      	subs	r3, #4
   298e6:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   298e8:	6110      	str	r0, [r2, #16]
		return false;
   298ea:	4770      	bx	lr

000298ec <process_queue>:
{
   298ec:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   298ee:	2200      	movs	r2, #0
{
   298f0:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   298f2:	2300      	movs	r3, #0
   298f4:	4608      	mov	r0, r1
{
   298f6:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   298f8:	f7f5 fa12 	bl	1ed20 <net_buf_get>
	if (buf) {
   298fc:	4605      	mov	r5, r0
   298fe:	b160      	cbz	r0, 2991a <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   29900:	4601      	mov	r1, r0
   29902:	2200      	movs	r2, #0
   29904:	4620      	mov	r0, r4
   29906:	f7e1 fc31 	bl	b16c <chan_send>
		if (err) {
   2990a:	4604      	mov	r4, r0
   2990c:	b118      	cbz	r0, 29916 <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   2990e:	4629      	mov	r1, r5
   29910:	4630      	mov	r0, r6
   29912:	f003 fcb4 	bl	2d27e <k_queue_prepend>
}
   29916:	4620      	mov	r0, r4
   29918:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   2991a:	f06f 0401 	mvn.w	r4, #1
   2991e:	e7fa      	b.n	29916 <process_queue+0x2a>

00029920 <find_info_cb>:
{
   29920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   29922:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   29924:	6816      	ldr	r6, [r2, #0]
{
   29926:	4605      	mov	r5, r0
   29928:	460f      	mov	r7, r1
   2992a:	4614      	mov	r4, r2
	if (!data->rsp) {
   2992c:	b963      	cbnz	r3, 29948 <find_info_cb+0x28>
   2992e:	6850      	ldr	r0, [r2, #4]
   29930:	2101      	movs	r1, #1
   29932:	3008      	adds	r0, #8
   29934:	f7f5 fc5e 	bl	1f1f4 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   29938:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   2993a:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   2993c:	781b      	ldrb	r3, [r3, #0]
   2993e:	2b00      	cmp	r3, #0
   29940:	bf0c      	ite	eq
   29942:	2301      	moveq	r3, #1
   29944:	2302      	movne	r3, #2
   29946:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   29948:	68a3      	ldr	r3, [r4, #8]
   2994a:	781b      	ldrb	r3, [r3, #0]
   2994c:	2b01      	cmp	r3, #1
   2994e:	d003      	beq.n	29958 <find_info_cb+0x38>
   29950:	2b02      	cmp	r3, #2
   29952:	d019      	beq.n	29988 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   29954:	2000      	movs	r0, #0
   29956:	e016      	b.n	29986 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   29958:	682b      	ldr	r3, [r5, #0]
   2995a:	781b      	ldrb	r3, [r3, #0]
   2995c:	2b00      	cmp	r3, #0
   2995e:	d1f9      	bne.n	29954 <find_info_cb+0x34>
   29960:	6860      	ldr	r0, [r4, #4]
   29962:	2104      	movs	r1, #4
   29964:	3008      	adds	r0, #8
   29966:	f7f5 fc45 	bl	1f1f4 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   2996a:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   2996c:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   2996e:	885b      	ldrh	r3, [r3, #2]
   29970:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   29972:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   29974:	8007      	strh	r7, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   29976:	899b      	ldrh	r3, [r3, #12]
   29978:	f8b6 005e 	ldrh.w	r0, [r6, #94]	; 0x5e
   2997c:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   2997e:	2804      	cmp	r0, #4
   29980:	bf94      	ite	ls
   29982:	2000      	movls	r0, #0
   29984:	2001      	movhi	r0, #1
}
   29986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   29988:	682b      	ldr	r3, [r5, #0]
   2998a:	781b      	ldrb	r3, [r3, #0]
   2998c:	2b02      	cmp	r3, #2
   2998e:	d1e1      	bne.n	29954 <find_info_cb+0x34>
   29990:	6860      	ldr	r0, [r4, #4]
   29992:	2112      	movs	r1, #18
   29994:	3008      	adds	r0, #8
   29996:	f7f5 fc2d 	bl	1f1f4 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2999a:	682b      	ldr	r3, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   2999c:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   2999e:	f820 7b02 	strh.w	r7, [r0], #2
   299a2:	1c5a      	adds	r2, r3, #1
   299a4:	3311      	adds	r3, #17
   299a6:	f852 1b04 	ldr.w	r1, [r2], #4
   299aa:	f840 1b04 	str.w	r1, [r0], #4
   299ae:	429a      	cmp	r2, r3
   299b0:	d1f9      	bne.n	299a6 <find_info_cb+0x86>
		if (chan->chan.tx.mtu - data->buf->len >
   299b2:	6863      	ldr	r3, [r4, #4]
   299b4:	f8b6 005e 	ldrh.w	r0, [r6, #94]	; 0x5e
   299b8:	899b      	ldrh	r3, [r3, #12]
   299ba:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   299bc:	2812      	cmp	r0, #18
   299be:	e7df      	b.n	29980 <find_info_cb+0x60>

000299c0 <att_exec_write_req>:
   299c0:	2006      	movs	r0, #6
   299c2:	4770      	bx	lr

000299c4 <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   299c4:	30c8      	adds	r0, #200	; 0xc8
   299c6:	f3bf 8f5b 	dmb	ish
   299ca:	e850 3f00 	ldrex	r3, [r0]
   299ce:	f023 0301 	bic.w	r3, r3, #1
   299d2:	e840 3200 	strex	r2, r3, [r0]
   299d6:	2a00      	cmp	r2, #0
   299d8:	d1f7      	bne.n	299ca <chan_rsp_sent+0x6>
   299da:	f3bf 8f5b 	dmb	ish
}
   299de:	4770      	bx	lr

000299e0 <chan_cfm_sent>:
   299e0:	30c8      	adds	r0, #200	; 0xc8
   299e2:	f3bf 8f5b 	dmb	ish
   299e6:	e850 3f00 	ldrex	r3, [r0]
   299ea:	f023 0302 	bic.w	r3, r3, #2
   299ee:	e840 3200 	strex	r2, r3, [r0]
   299f2:	2a00      	cmp	r2, #0
   299f4:	d1f7      	bne.n	299e6 <chan_cfm_sent+0x6>
   299f6:	f3bf 8f5b 	dmb	ish
}
   299fa:	4770      	bx	lr

000299fc <chan_req_send>:
{
   299fc:	b570      	push	{r4, r5, r6, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   299fe:	690e      	ldr	r6, [r1, #16]
{
   29a00:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   29a02:	4630      	mov	r0, r6
{
   29a04:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   29a06:	f7ff fe55 	bl	296b4 <net_buf_frags_len>
   29a0a:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
   29a0e:	4283      	cmp	r3, r0
   29a10:	d317      	bcc.n	29a42 <chan_req_send+0x46>
	chan->req = req;
   29a12:	f8c5 10cc 	str.w	r1, [r5, #204]	; 0xcc
	state->offset = net_buf_simple_headroom(buf);
   29a16:	f106 0008 	add.w	r0, r6, #8
   29a1a:	f002 ffd6 	bl	2c9ca <net_buf_simple_headroom>
	state->len = buf->len;
   29a1e:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
   29a20:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
   29a22:	81e3      	strh	r3, [r4, #14]
	err = chan_send(chan, net_buf_ref(req->buf), NULL);
   29a24:	6920      	ldr	r0, [r4, #16]
   29a26:	f7f5 fad9 	bl	1efdc <net_buf_ref>
   29a2a:	2200      	movs	r2, #0
   29a2c:	4601      	mov	r1, r0
   29a2e:	4628      	mov	r0, r5
   29a30:	f7e1 fb9c 	bl	b16c <chan_send>
	if (err) {
   29a34:	4605      	mov	r5, r0
   29a36:	b110      	cbz	r0, 29a3e <chan_req_send+0x42>
		net_buf_unref(req->buf);
   29a38:	6920      	ldr	r0, [r4, #16]
   29a3a:	f7f5 fa8b 	bl	1ef54 <net_buf_unref>
}
   29a3e:	4628      	mov	r0, r5
   29a40:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   29a42:	f06f 0579 	mvn.w	r5, #121	; 0x79
   29a46:	e7fa      	b.n	29a3e <chan_req_send+0x42>

00029a48 <bt_att_status>:
{
   29a48:	b538      	push	{r3, r4, r5, lr}
   29a4a:	4605      	mov	r5, r0
   29a4c:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   29a4e:	2100      	movs	r1, #0
   29a50:	f7ff fe9d 	bl	2978e <atomic_test_bit>
   29a54:	b1c8      	cbz	r0, 29a8a <bt_att_status+0x42>
	if (!chan->att) {
   29a56:	f855 0c08 	ldr.w	r0, [r5, #-8]
   29a5a:	b1b0      	cbz	r0, 29a8a <bt_att_status+0x42>
	if (chan->req) {
   29a5c:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
   29a60:	b99b      	cbnz	r3, 29a8a <bt_att_status+0x42>
	node = sys_slist_get(&chan->att->reqs);
   29a62:	3004      	adds	r0, #4
   29a64:	f7ff fe01 	bl	2966a <sys_slist_get>
	if (!node) {
   29a68:	4604      	mov	r4, r0
   29a6a:	b170      	cbz	r0, 29a8a <bt_att_status+0x42>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   29a6c:	4601      	mov	r1, r0
   29a6e:	f1a5 0008 	sub.w	r0, r5, #8
   29a72:	f7e1 fcc9 	bl	b408 <bt_att_chan_req_send>
   29a76:	2800      	cmp	r0, #0
   29a78:	da07      	bge.n	29a8a <bt_att_status+0x42>
	sys_slist_prepend(&chan->att->reqs, node);
   29a7a:	f855 3c08 	ldr.w	r3, [r5, #-8]
Z_GENLIST_PREPEND(slist, snode)
   29a7e:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   29a80:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   29a82:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   29a84:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   29a86:	b902      	cbnz	r2, 29a8a <bt_att_status+0x42>
	list->tail = node;
   29a88:	609c      	str	r4, [r3, #8]
}
   29a8a:	bd38      	pop	{r3, r4, r5, pc}

00029a8c <write_cb>:
{
   29a8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   29a8e:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   29a90:	4601      	mov	r1, r0
{
   29a92:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   29a94:	222a      	movs	r2, #42	; 0x2a
   29a96:	6820      	ldr	r0, [r4, #0]
   29a98:	f000 fb6e 	bl	2a178 <bt_gatt_check_perm>
   29a9c:	4605      	mov	r5, r0
   29a9e:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   29aa0:	bb00      	cbnz	r0, 29ae4 <write_cb+0x58>
	if (!data->req) {
   29aa2:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   29aa4:	68b7      	ldr	r7, [r6, #8]
   29aa6:	68e2      	ldr	r2, [r4, #12]
   29aa8:	6820      	ldr	r0, [r4, #0]
	if (!data->req) {
   29aaa:	2b00      	cmp	r3, #0
		flags |= BT_GATT_WRITE_FLAG_CMD;
   29aac:	bf14      	ite	ne
   29aae:	2300      	movne	r3, #0
   29ab0:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   29ab2:	9301      	str	r3, [sp, #4]
   29ab4:	8a63      	ldrh	r3, [r4, #18]
   29ab6:	9300      	str	r3, [sp, #0]
   29ab8:	4631      	mov	r1, r6
   29aba:	8a23      	ldrh	r3, [r4, #16]
   29abc:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   29abe:	2800      	cmp	r0, #0
   29ac0:	db05      	blt.n	29ace <write_cb+0x42>
   29ac2:	8a23      	ldrh	r3, [r4, #16]
   29ac4:	4298      	cmp	r0, r3
   29ac6:	d10b      	bne.n	29ae0 <write_cb+0x54>
	data->err = 0U;
   29ac8:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   29aca:	2501      	movs	r5, #1
   29acc:	e005      	b.n	29ada <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   29ace:	f110 0fff 	cmn.w	r0, #255	; 0xff
   29ad2:	d305      	bcc.n	29ae0 <write_cb+0x54>
		return -err;
   29ad4:	4240      	negs	r0, r0
   29ad6:	b2c0      	uxtb	r0, r0
		data->err = err_to_att(write);
   29ad8:	7520      	strb	r0, [r4, #20]
}
   29ada:	4628      	mov	r0, r5
   29adc:	b003      	add	sp, #12
   29ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   29ae0:	200e      	movs	r0, #14
   29ae2:	e7f9      	b.n	29ad8 <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   29ae4:	2500      	movs	r5, #0
   29ae6:	e7f8      	b.n	29ada <write_cb+0x4e>

00029ae8 <bt_att_sent>:
{
   29ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   29aea:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
	struct bt_att *att = chan->att;
   29aee:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   29af2:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   29af4:	f1a0 0608 	sub.w	r6, r0, #8
	if (chan->sent) {
   29af8:	b10b      	cbz	r3, 29afe <bt_att_sent+0x16>
		chan->sent(chan);
   29afa:	4630      	mov	r0, r6
   29afc:	4798      	blx	r3
   29afe:	f3bf 8f5b 	dmb	ish
   29b02:	f105 03c0 	add.w	r3, r5, #192	; 0xc0
   29b06:	e853 2f00 	ldrex	r2, [r3]
   29b0a:	f022 0210 	bic.w	r2, r2, #16
   29b0e:	e843 2100 	strex	r1, r2, [r3]
   29b12:	2900      	cmp	r1, #0
   29b14:	d1f7      	bne.n	29b06 <bt_att_sent+0x1e>
   29b16:	f3bf 8f5b 	dmb	ish
	if (!att) {
   29b1a:	b334      	cbz	r4, 29b6a <bt_att_sent+0x82>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   29b1c:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
   29b20:	b98b      	cbnz	r3, 29b46 <bt_att_sent+0x5e>
   29b22:	6863      	ldr	r3, [r4, #4]
   29b24:	b17b      	cbz	r3, 29b46 <bt_att_sent+0x5e>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   29b26:	1d20      	adds	r0, r4, #4
   29b28:	f7ff fd9f 	bl	2966a <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   29b2c:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   29b2e:	4607      	mov	r7, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   29b30:	4630      	mov	r0, r6
   29b32:	f7ff ff63 	bl	299fc <chan_req_send>
   29b36:	2800      	cmp	r0, #0
   29b38:	da17      	bge.n	29b6a <bt_att_sent+0x82>
Z_GENLIST_PREPEND(slist, snode)
   29b3a:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   29b3c:	603b      	str	r3, [r7, #0]
Z_GENLIST_PREPEND(slist, snode)
   29b3e:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   29b40:	6067      	str	r7, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   29b42:	b903      	cbnz	r3, 29b46 <bt_att_sent+0x5e>
	list->tail = node;
   29b44:	60a7      	str	r7, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   29b46:	f105 01c8 	add.w	r1, r5, #200	; 0xc8
   29b4a:	4630      	mov	r0, r6
   29b4c:	f7ff fece 	bl	298ec <process_queue>
	if (!err) {
   29b50:	b158      	cbz	r0, 29b6a <bt_att_sent+0x82>
	err = process_queue(chan, &att->tx_queue);
   29b52:	f104 010c 	add.w	r1, r4, #12
   29b56:	4630      	mov	r0, r6
   29b58:	f7ff fec8 	bl	298ec <process_queue>
	if (!err) {
   29b5c:	b128      	cbz	r0, 29b6a <bt_att_sent+0x82>
   29b5e:	f505 708c 	add.w	r0, r5, #280	; 0x118
}
   29b62:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   29b66:	f7f9 bea9 	b.w	238bc <z_impl_k_sem_give>
   29b6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00029b6c <read_cb>:
{
   29b6c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   29b70:	6817      	ldr	r7, [r2, #0]
{
   29b72:	4680      	mov	r8, r0
	data->err = 0x00;
   29b74:	2600      	movs	r6, #0
{
   29b76:	4615      	mov	r5, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   29b78:	68b8      	ldr	r0, [r7, #8]
	data->err = 0x00;
   29b7a:	7316      	strb	r6, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   29b7c:	4641      	mov	r1, r8
   29b7e:	2215      	movs	r2, #21
   29b80:	f000 fafa 	bl	2a178 <bt_gatt_check_perm>
   29b84:	4604      	mov	r4, r0
   29b86:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   29b88:	b9a0      	cbnz	r0, 29bb4 <read_cb+0x48>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   29b8a:	e9cd 0000 	strd	r0, r0, [sp]
   29b8e:	88ab      	ldrh	r3, [r5, #4]
   29b90:	68aa      	ldr	r2, [r5, #8]
   29b92:	4641      	mov	r1, r8
   29b94:	4638      	mov	r0, r7
   29b96:	f7ff fe0e 	bl	297b6 <att_chan_read>
	if (ret < 0) {
   29b9a:	2800      	cmp	r0, #0
   29b9c:	da0c      	bge.n	29bb8 <read_cb+0x4c>
	if (err < 0 && err >= -0xff) {
   29b9e:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   29ba2:	bf26      	itte	cs
   29ba4:	4240      	negcs	r0, r0
   29ba6:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   29ba8:	200e      	movcc	r0, #14
		data->err = err_to_att(ret);
   29baa:	7328      	strb	r0, [r5, #12]
}
   29bac:	4620      	mov	r0, r4
   29bae:	b002      	add	sp, #8
   29bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   29bb4:	4634      	mov	r4, r6
   29bb6:	e7f9      	b.n	29bac <read_cb+0x40>
	return BT_GATT_ITER_CONTINUE;
   29bb8:	2401      	movs	r4, #1
   29bba:	e7f7      	b.n	29bac <read_cb+0x40>

00029bbc <send_err_rsp.part.12>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   29bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29bc0:	4688      	mov	r8, r1
   29bc2:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   29bc4:	2101      	movs	r1, #1
   29bc6:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   29bc8:	4605      	mov	r5, r0
   29bca:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   29bcc:	f7e1 fca6 	bl	b51c <bt_att_chan_create_pdu>
	if (!buf) {
   29bd0:	4604      	mov	r4, r0
   29bd2:	b170      	cbz	r0, 29bf2 <send_err_rsp.part.12+0x36>
	return net_buf_simple_add(&buf->b, len);
   29bd4:	2104      	movs	r1, #4
   29bd6:	3008      	adds	r0, #8
   29bd8:	f7f5 fb0c 	bl	1f1f4 <net_buf_simple_add>
	rsp->request = req;
   29bdc:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   29be0:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   29be2:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   29be6:	4621      	mov	r1, r4
   29be8:	4628      	mov	r0, r5
}
   29bea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   29bee:	f7e1 bbb9 	b.w	b364 <bt_att_chan_send_rsp.constprop.24>
}
   29bf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00029bf6 <att_read_blob_req>:
{
   29bf6:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   29bf8:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   29bfa:	8813      	ldrh	r3, [r2, #0]
   29bfc:	8852      	ldrh	r2, [r2, #2]
   29bfe:	9200      	str	r2, [sp, #0]
   29c00:	210c      	movs	r1, #12
   29c02:	220d      	movs	r2, #13
   29c04:	f7e1 fe94 	bl	b930 <att_read_rsp>
}
   29c08:	b003      	add	sp, #12
   29c0a:	f85d fb04 	ldr.w	pc, [sp], #4

00029c0e <att_read_req>:
{
   29c0e:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   29c10:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   29c12:	2200      	movs	r2, #0
   29c14:	881b      	ldrh	r3, [r3, #0]
   29c16:	9200      	str	r2, [sp, #0]
   29c18:	210a      	movs	r1, #10
   29c1a:	220b      	movs	r2, #11
   29c1c:	f7e1 fe88 	bl	b930 <att_read_rsp>
}
   29c20:	b003      	add	sp, #12
   29c22:	f85d fb04 	ldr.w	pc, [sp], #4

00029c26 <att_mtu_req>:
{
   29c26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29c28:	4606      	mov	r6, r0
	struct bt_conn *conn = chan->att->conn;
   29c2a:	f850 3bc8 	ldr.w	r3, [r0], #200
{
   29c2e:	460a      	mov	r2, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   29c30:	2103      	movs	r1, #3
	struct bt_conn *conn = chan->att->conn;
   29c32:	681b      	ldr	r3, [r3, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   29c34:	f7ff fdab 	bl	2978e <atomic_test_bit>
   29c38:	4604      	mov	r4, r0
   29c3a:	b9f0      	cbnz	r0, 29c7a <att_mtu_req+0x54>
	mtu_client = sys_le16_to_cpu(req->mtu);
   29c3c:	6892      	ldr	r2, [r2, #8]
   29c3e:	8815      	ldrh	r5, [r2, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   29c40:	2d16      	cmp	r5, #22
   29c42:	d91c      	bls.n	29c7e <att_mtu_req+0x58>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   29c44:	2202      	movs	r2, #2
   29c46:	2103      	movs	r1, #3
   29c48:	4618      	mov	r0, r3
   29c4a:	f7e1 fd81 	bl	b750 <bt_att_create_pdu>
	if (!pdu) {
   29c4e:	4607      	mov	r7, r0
   29c50:	b1b8      	cbz	r0, 29c82 <att_mtu_req+0x5c>
   29c52:	2102      	movs	r1, #2
   29c54:	3008      	adds	r0, #8
   29c56:	f7f5 facd 	bl	1f1f4 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   29c5a:	2345      	movs	r3, #69	; 0x45
   29c5c:	7003      	strb	r3, [r0, #0]
   29c5e:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   29c60:	4639      	mov	r1, r7
   29c62:	4630      	mov	r0, r6
   29c64:	f7e1 fb7e 	bl	b364 <bt_att_chan_send_rsp.constprop.24>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   29c68:	2d45      	cmp	r5, #69	; 0x45
   29c6a:	bf28      	it	cs
   29c6c:	2545      	movcs	r5, #69	; 0x45
   29c6e:	f8a6 5052 	strh.w	r5, [r6, #82]	; 0x52
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   29c72:	f8a6 505e 	strh.w	r5, [r6, #94]	; 0x5e
	return 0;
   29c76:	4620      	mov	r0, r4
}
   29c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   29c7a:	2006      	movs	r0, #6
   29c7c:	e7fc      	b.n	29c78 <att_mtu_req+0x52>
		return BT_ATT_ERR_INVALID_PDU;
   29c7e:	2004      	movs	r0, #4
   29c80:	e7fa      	b.n	29c78 <att_mtu_req+0x52>
		return BT_ATT_ERR_UNLIKELY;
   29c82:	200e      	movs	r0, #14
   29c84:	e7f8      	b.n	29c78 <att_mtu_req+0x52>

00029c86 <bt_att_init>:
	bt_gatt_init();
   29c86:	f7e2 be83 	b.w	c990 <bt_gatt_init>

00029c8a <bt_att_get_mtu>:
{
   29c8a:	b508      	push	{r3, lr}
	att = att_get(conn);
   29c8c:	f7e1 fada 	bl	b244 <att_get>
	if (!att) {
   29c90:	b1c0      	cbz	r0, 29cc4 <bt_att_get_mtu+0x3a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   29c92:	6a80      	ldr	r0, [r0, #40]	; 0x28
   29c94:	b1b0      	cbz	r0, 29cc4 <bt_att_get_mtu+0x3a>
   29c96:	f5b0 719e 	subs.w	r1, r0, #316	; 0x13c
   29c9a:	d012      	beq.n	29cc2 <bt_att_get_mtu+0x38>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   29c9c:	6803      	ldr	r3, [r0, #0]
   29c9e:	b10b      	cbz	r3, 29ca4 <bt_att_get_mtu+0x1a>
   29ca0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
{
   29ca4:	2000      	movs	r0, #0
		if (chan->chan.tx.mtu > mtu) {
   29ca6:	f8b1 205e 	ldrh.w	r2, [r1, #94]	; 0x5e
   29caa:	4290      	cmp	r0, r2
   29cac:	bf38      	it	cc
   29cae:	4610      	movcc	r0, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   29cb0:	b143      	cbz	r3, 29cc4 <bt_att_get_mtu+0x3a>
   29cb2:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
   29cb6:	b10a      	cbz	r2, 29cbc <bt_att_get_mtu+0x32>
   29cb8:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
{
   29cbc:	4619      	mov	r1, r3
   29cbe:	4613      	mov	r3, r2
   29cc0:	e7f1      	b.n	29ca6 <bt_att_get_mtu+0x1c>
		return 0;
   29cc2:	4608      	mov	r0, r1
}
   29cc4:	bd08      	pop	{r3, pc}

00029cc6 <att_req_destroy>:
{
   29cc6:	b510      	push	{r4, lr}
   29cc8:	4604      	mov	r4, r0
	if (req->buf) {
   29cca:	6900      	ldr	r0, [r0, #16]
   29ccc:	b108      	cbz	r0, 29cd2 <att_req_destroy+0xc>
		net_buf_unref(req->buf);
   29cce:	f7f5 f941 	bl	1ef54 <net_buf_unref>
	if (req->destroy) {
   29cd2:	68a3      	ldr	r3, [r4, #8]
   29cd4:	b10b      	cbz	r3, 29cda <att_req_destroy+0x14>
		req->destroy(req);
   29cd6:	4620      	mov	r0, r4
   29cd8:	4798      	blx	r3
	bt_att_req_free(req);
   29cda:	4620      	mov	r0, r4
}
   29cdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
   29ce0:	f7e1 bf84 	b.w	bbec <bt_att_req_free>

00029ce4 <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   29ce4:	898a      	ldrh	r2, [r1, #12]
   29ce6:	6889      	ldr	r1, [r1, #8]
   29ce8:	2300      	movs	r3, #0
   29cea:	f7e1 bf8b 	b.w	bc04 <att_handle_rsp>

00029cee <att_chan_detach.part.15>:
static void att_chan_detach(struct bt_att_chan *chan)
   29cee:	b570      	push	{r4, r5, r6, lr}
   29cf0:	4604      	mov	r4, r0
   29cf2:	2508      	movs	r5, #8
		k_sem_give(&chan->tx_sem);
   29cf4:	f500 7690 	add.w	r6, r0, #288	; 0x120
   29cf8:	4630      	mov	r0, r6
   29cfa:	f7f9 fddf 	bl	238bc <z_impl_k_sem_give>
	for (i = 0; i < CONFIG_BT_ATT_TX_MAX; i++) {
   29cfe:	3d01      	subs	r5, #1
   29d00:	d1fa      	bne.n	29cf8 <att_chan_detach.part.15+0xa>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   29d02:	f104 05d0 	add.w	r5, r4, #208	; 0xd0
   29d06:	2200      	movs	r2, #0
   29d08:	2300      	movs	r3, #0
   29d0a:	4628      	mov	r0, r5
   29d0c:	f7f5 f808 	bl	1ed20 <net_buf_get>
   29d10:	4602      	mov	r2, r0
   29d12:	b950      	cbnz	r0, 29d2a <att_chan_detach.part.15+0x3c>
	if (chan->req) {
   29d14:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   29d18:	b123      	cbz	r3, 29d24 <att_chan_detach.part.15+0x36>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   29d1a:	4601      	mov	r1, r0
   29d1c:	230e      	movs	r3, #14
   29d1e:	4620      	mov	r0, r4
   29d20:	f7e1 ff70 	bl	bc04 <att_handle_rsp>
	chan->att = NULL;
   29d24:	2300      	movs	r3, #0
   29d26:	6023      	str	r3, [r4, #0]
}
   29d28:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
   29d2a:	f7f5 f913 	bl	1ef54 <net_buf_unref>
   29d2e:	e7ea      	b.n	29d06 <att_chan_detach.part.15+0x18>

00029d30 <bt_att_disconnected>:
{
   29d30:	b570      	push	{r4, r5, r6, lr}
	struct bt_att *att = att_chan->att;
   29d32:	4606      	mov	r6, r0
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   29d34:	f500 719a 	add.w	r1, r0, #308	; 0x134
	struct bt_att *att = att_chan->att;
   29d38:	f856 5d08 	ldr.w	r5, [r6, #-8]!
{
   29d3c:	4604      	mov	r4, r0
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   29d3e:	f105 0028 	add.w	r0, r5, #40	; 0x28
   29d42:	f7ff fc9c 	bl	2967e <sys_slist_find_and_remove>
	for (i = 0; i < CONFIG_BT_ATT_TX_MAX; i++) {
   29d46:	4630      	mov	r0, r6
   29d48:	f7ff ffd1 	bl	29cee <att_chan_detach.part.15>
	if (!sys_slist_is_empty(&att->chans)) {
   29d4c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   29d4e:	b93b      	cbnz	r3, 29d60 <bt_att_disconnected+0x30>
	att_reset(att);
   29d50:	4628      	mov	r0, r5
   29d52:	f7e1 ffbf 	bl	bcd4 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   29d56:	6820      	ldr	r0, [r4, #0]
}
   29d58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_gatt_disconnected(ch->chan.conn);
   29d5c:	f7e3 bc22 	b.w	d5a4 <bt_gatt_disconnected>
}
   29d60:	bd70      	pop	{r4, r5, r6, pc}

00029d62 <found_attr>:
	*found = attr;
   29d62:	6010      	str	r0, [r2, #0]
}
   29d64:	2000      	movs	r0, #0
   29d66:	4770      	bx	lr

00029d68 <gatt_ccc_changed>:
{
   29d68:	460b      	mov	r3, r1
   29d6a:	8909      	ldrh	r1, [r1, #8]
   29d6c:	8a5a      	ldrh	r2, [r3, #18]
   29d6e:	428a      	cmp	r2, r1
   29d70:	bf38      	it	cc
   29d72:	460a      	movcc	r2, r1
		if (ccc->cfg[i].value > value) {
   29d74:	8b99      	ldrh	r1, [r3, #28]
   29d76:	4291      	cmp	r1, r2
   29d78:	bf38      	it	cc
   29d7a:	4611      	movcc	r1, r2
	if (value != ccc->value) {
   29d7c:	8bda      	ldrh	r2, [r3, #30]
   29d7e:	428a      	cmp	r2, r1
   29d80:	d003      	beq.n	29d8a <gatt_ccc_changed+0x22>
		ccc->value = value;
   29d82:	83d9      	strh	r1, [r3, #30]
		if (ccc->cfg_changed) {
   29d84:	6a1b      	ldr	r3, [r3, #32]
   29d86:	b103      	cbz	r3, 29d8a <gatt_ccc_changed+0x22>
			ccc->cfg_changed(attr, value);
   29d88:	4718      	bx	r3
}
   29d8a:	4770      	bx	lr

00029d8c <gatt_indicate_rsp>:
{
   29d8c:	b510      	push	{r4, lr}
   29d8e:	9c02      	ldr	r4, [sp, #8]
	params->_ref--;
   29d90:	7da3      	ldrb	r3, [r4, #22]
   29d92:	3b01      	subs	r3, #1
   29d94:	75a3      	strb	r3, [r4, #22]
	params->func(conn, params, err);
   29d96:	460a      	mov	r2, r1
   29d98:	68a3      	ldr	r3, [r4, #8]
   29d9a:	4621      	mov	r1, r4
   29d9c:	4798      	blx	r3
	if (params->destroy && (params->_ref == 0)) {
   29d9e:	68e3      	ldr	r3, [r4, #12]
   29da0:	b12b      	cbz	r3, 29dae <gatt_indicate_rsp+0x22>
   29da2:	7da2      	ldrb	r2, [r4, #22]
   29da4:	b91a      	cbnz	r2, 29dae <gatt_indicate_rsp+0x22>
		params->destroy(params);
   29da6:	4620      	mov	r0, r4
}
   29da8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   29dac:	4718      	bx	r3
}
   29dae:	bd10      	pop	{r4, pc}

00029db0 <match_uuid>:
	data->attr = attr;
   29db0:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   29db2:	8091      	strh	r1, [r2, #4]
}
   29db4:	2000      	movs	r0, #0
   29db6:	4770      	bx	lr

00029db8 <ccc_set_cb>:
}
   29db8:	2000      	movs	r0, #0
   29dba:	4770      	bx	lr

00029dbc <gen_hash_m>:
{
   29dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   29dbe:	6806      	ldr	r6, [r0, #0]
   29dc0:	7835      	ldrb	r5, [r6, #0]
{
   29dc2:	b089      	sub	sp, #36	; 0x24
   29dc4:	4607      	mov	r7, r0
   29dc6:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   29dc8:	b10d      	cbz	r5, 29dce <gen_hash_m+0x12>
		return BT_GATT_ITER_CONTINUE;
   29dca:	2501      	movs	r5, #1
   29dcc:	e014      	b.n	29df8 <gen_hash_m+0x3c>
	switch (u16->val) {
   29dce:	8873      	ldrh	r3, [r6, #2]
   29dd0:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   29dd4:	d004      	beq.n	29de0 <gen_hash_m+0x24>
   29dd6:	d812      	bhi.n	29dfe <gen_hash_m+0x42>
   29dd8:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   29ddc:	2b03      	cmp	r3, #3
   29dde:	d8f4      	bhi.n	29dca <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   29de0:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   29de4:	2202      	movs	r2, #2
   29de6:	f10d 010e 	add.w	r1, sp, #14
   29dea:	4620      	mov	r0, r4
   29dec:	f7fe fe70 	bl	28ad0 <tc_cmac_update>
   29df0:	b9d0      	cbnz	r0, 29e28 <gen_hash_m+0x6c>
			state->err = -EINVAL;
   29df2:	f06f 0315 	mvn.w	r3, #21
   29df6:	65a3      	str	r3, [r4, #88]	; 0x58
}
   29df8:	4628      	mov	r0, r5
   29dfa:	b009      	add	sp, #36	; 0x24
   29dfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   29dfe:	f642 1205 	movw	r2, #10501	; 0x2905
   29e02:	4293      	cmp	r3, r2
   29e04:	d8e1      	bhi.n	29dca <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   29e06:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   29e0a:	2202      	movs	r2, #2
   29e0c:	f10d 010e 	add.w	r1, sp, #14
   29e10:	4620      	mov	r0, r4
   29e12:	f7fe fe5d 	bl	28ad0 <tc_cmac_update>
   29e16:	2800      	cmp	r0, #0
   29e18:	d0eb      	beq.n	29df2 <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   29e1a:	8873      	ldrh	r3, [r6, #2]
   29e1c:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   29e20:	2202      	movs	r2, #2
   29e22:	f10d 010e 	add.w	r1, sp, #14
   29e26:	e017      	b.n	29e58 <gen_hash_m+0x9c>
		value = sys_cpu_to_le16(u16->val);
   29e28:	8873      	ldrh	r3, [r6, #2]
   29e2a:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   29e2e:	2202      	movs	r2, #2
   29e30:	f10d 010e 	add.w	r1, sp, #14
   29e34:	4620      	mov	r0, r4
   29e36:	f7fe fe4b 	bl	28ad0 <tc_cmac_update>
   29e3a:	2800      	cmp	r0, #0
   29e3c:	d0d9      	beq.n	29df2 <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   29e3e:	2000      	movs	r0, #0
   29e40:	2310      	movs	r3, #16
   29e42:	eb0d 0203 	add.w	r2, sp, r3
   29e46:	9000      	str	r0, [sp, #0]
   29e48:	687e      	ldr	r6, [r7, #4]
   29e4a:	4639      	mov	r1, r7
   29e4c:	47b0      	blx	r6
		if (len < 0) {
   29e4e:	1e02      	subs	r2, r0, #0
   29e50:	da01      	bge.n	29e56 <gen_hash_m+0x9a>
			state->err = len;
   29e52:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   29e54:	e7d0      	b.n	29df8 <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   29e56:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   29e58:	4620      	mov	r0, r4
   29e5a:	f7fe fe39 	bl	28ad0 <tc_cmac_update>
   29e5e:	2800      	cmp	r0, #0
   29e60:	d1b3      	bne.n	29dca <gen_hash_m+0xe>
   29e62:	e7c6      	b.n	29df2 <gen_hash_m+0x36>

00029e64 <atomic_and>:
   29e64:	f3bf 8f5b 	dmb	ish
   29e68:	e850 3f00 	ldrex	r3, [r0]
   29e6c:	ea03 0201 	and.w	r2, r3, r1
   29e70:	e840 2c00 	strex	ip, r2, [r0]
   29e74:	f1bc 0f00 	cmp.w	ip, #0
   29e78:	d1f6      	bne.n	29e68 <atomic_and+0x4>
   29e7a:	f3bf 8f5b 	dmb	ish
}
   29e7e:	4618      	mov	r0, r3
   29e80:	4770      	bx	lr

00029e82 <bt_addr_le_copy>:
   29e82:	680b      	ldr	r3, [r1, #0]
   29e84:	6003      	str	r3, [r0, #0]
   29e86:	888b      	ldrh	r3, [r1, #4]
   29e88:	8083      	strh	r3, [r0, #4]
   29e8a:	798b      	ldrb	r3, [r1, #6]
   29e8c:	7183      	strb	r3, [r0, #6]
}
   29e8e:	4770      	bx	lr

00029e90 <clear_ccc_cfg>:
{
   29e90:	b513      	push	{r0, r1, r4, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   29e92:	2200      	movs	r2, #0
{
   29e94:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   29e96:	4669      	mov	r1, sp
   29e98:	3001      	adds	r0, #1
   29e9a:	9200      	str	r2, [sp, #0]
   29e9c:	f8cd 2003 	str.w	r2, [sp, #3]
   29ea0:	f7ff ffef 	bl	29e82 <bt_addr_le_copy>
	cfg->id = 0U;
   29ea4:	7022      	strb	r2, [r4, #0]
	cfg->value = 0U;
   29ea6:	8122      	strh	r2, [r4, #8]
}
   29ea8:	b002      	add	sp, #8
   29eaa:	bd10      	pop	{r4, pc}

00029eac <clear_sc_cfg>:
__ssp_bos_icheck3(memset, void *, int)
   29eac:	2300      	movs	r3, #0
   29eae:	6003      	str	r3, [r0, #0]
   29eb0:	6043      	str	r3, [r0, #4]
   29eb2:	6083      	str	r3, [r0, #8]
}
   29eb4:	4770      	bx	lr

00029eb6 <bt_gatt_attr_read.constprop.24>:
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   29eb6:	b538      	push	{r3, r4, r5, lr}
   29eb8:	4615      	mov	r5, r2
   29eba:	f8bd 2010 	ldrh.w	r2, [sp, #16]
	if (offset > value_len) {
   29ebe:	42aa      	cmp	r2, r5
   29ec0:	d30a      	bcc.n	29ed8 <bt_gatt_attr_read.constprop.24+0x22>
	len = MIN(buf_len, value_len - offset);
   29ec2:	1b54      	subs	r4, r2, r5
   29ec4:	428c      	cmp	r4, r1
   29ec6:	bfa8      	it	ge
   29ec8:	460c      	movge	r4, r1
   29eca:	b2a4      	uxth	r4, r4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   29ecc:	4622      	mov	r2, r4
   29ece:	1959      	adds	r1, r3, r5
   29ed0:	f003 fb58 	bl	2d584 <memcpy>
}
   29ed4:	4620      	mov	r0, r4
   29ed6:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   29ed8:	f06f 0406 	mvn.w	r4, #6
   29edc:	e7fa      	b.n	29ed4 <bt_gatt_attr_read.constprop.24+0x1e>

00029ede <bt_gatt_attr_read_service>:
{
   29ede:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   29ee0:	461c      	mov	r4, r3
	struct bt_uuid *uuid = attr->user_data;
   29ee2:	68cb      	ldr	r3, [r1, #12]
	if (uuid->type == BT_UUID_TYPE_16) {
   29ee4:	7819      	ldrb	r1, [r3, #0]
{
   29ee6:	4610      	mov	r0, r2
   29ee8:	f8bd 2018 	ldrh.w	r2, [sp, #24]
	if (uuid->type == BT_UUID_TYPE_16) {
   29eec:	b959      	cbnz	r1, 29f06 <bt_gatt_attr_read_service+0x28>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   29eee:	885b      	ldrh	r3, [r3, #2]
   29ef0:	f8ad 300e 	strh.w	r3, [sp, #14]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   29ef4:	2302      	movs	r3, #2
   29ef6:	9300      	str	r3, [sp, #0]
   29ef8:	f10d 030e 	add.w	r3, sp, #14
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   29efc:	4621      	mov	r1, r4
   29efe:	f7ff ffda 	bl	29eb6 <bt_gatt_attr_read.constprop.24>
}
   29f02:	b004      	add	sp, #16
   29f04:	bd10      	pop	{r4, pc}
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   29f06:	2110      	movs	r1, #16
   29f08:	9100      	str	r1, [sp, #0]
   29f0a:	3301      	adds	r3, #1
   29f0c:	e7f6      	b.n	29efc <bt_gatt_attr_read_service+0x1e>

00029f0e <read_name>:
{
   29f0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29f12:	4614      	mov	r4, r2
   29f14:	461d      	mov	r5, r3
   29f16:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	const char *name = bt_get_name();
   29f1a:	f7df fbb5 	bl	9688 <bt_get_name>
   29f1e:	4607      	mov	r7, r0
				 strlen(name));
   29f20:	f7d7 ffc2 	bl	1ea8 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   29f24:	b280      	uxth	r0, r0
   29f26:	9006      	str	r0, [sp, #24]
   29f28:	463b      	mov	r3, r7
   29f2a:	4632      	mov	r2, r6
   29f2c:	4629      	mov	r1, r5
   29f2e:	4620      	mov	r0, r4
}
   29f30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   29f34:	f7ff bfbf 	b.w	29eb6 <bt_gatt_attr_read.constprop.24>

00029f38 <read_appearance>:
{
   29f38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   29f3a:	4619      	mov	r1, r3
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   29f3c:	2300      	movs	r3, #0
   29f3e:	f8ad 300e 	strh.w	r3, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   29f42:	2302      	movs	r3, #2
   29f44:	9300      	str	r3, [sp, #0]
{
   29f46:	4610      	mov	r0, r2
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   29f48:	f10d 030e 	add.w	r3, sp, #14
   29f4c:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   29f50:	f7ff ffb1 	bl	29eb6 <bt_gatt_attr_read.constprop.24>
}
   29f54:	b005      	add	sp, #20
   29f56:	f85d fb04 	ldr.w	pc, [sp], #4

00029f5a <clear_cf_cfg>:
{
   29f5a:	b513      	push	{r0, r1, r4, lr}
   29f5c:	4602      	mov	r2, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   29f5e:	2400      	movs	r4, #0
   29f60:	4669      	mov	r1, sp
   29f62:	3001      	adds	r0, #1
   29f64:	9400      	str	r4, [sp, #0]
   29f66:	f8cd 4003 	str.w	r4, [sp, #3]
   29f6a:	f7ff ff8a 	bl	29e82 <bt_addr_le_copy>
__ssp_bos_icheck3(memset, void *, int)
   29f6e:	7214      	strb	r4, [r2, #8]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   29f70:	320c      	adds	r2, #12
   29f72:	f3bf 8f5b 	dmb	ish
   29f76:	e852 3f00 	ldrex	r3, [r2]
   29f7a:	e842 4100 	strex	r1, r4, [r2]
   29f7e:	2900      	cmp	r1, #0
   29f80:	d1f9      	bne.n	29f76 <clear_cf_cfg+0x1c>
   29f82:	f3bf 8f5b 	dmb	ish
}
   29f86:	b002      	add	sp, #8
   29f88:	bd10      	pop	{r4, pc}

00029f8a <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   29f8a:	f3bf 8f5b 	dmb	ish
   29f8e:	6800      	ldr	r0, [r0, #0]
   29f90:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   29f94:	4108      	asrs	r0, r1
}
   29f96:	f000 0001 	and.w	r0, r0, #1
   29f9a:	4770      	bx	lr

00029f9c <ccc_find_cfg>:
{
   29f9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   29fa0:	4604      	mov	r4, r0
   29fa2:	460f      	mov	r7, r1
   29fa4:	4690      	mov	r8, r2
   29fa6:	f100 061e 	add.w	r6, r0, #30
   29faa:	4605      	mov	r5, r0
		if (id == ccc->cfg[i].id &&
   29fac:	782b      	ldrb	r3, [r5, #0]
   29fae:	4543      	cmp	r3, r8
   29fb0:	d10b      	bne.n	29fca <ccc_find_cfg+0x2e>
	return memcmp(a, b, sizeof(*a));
   29fb2:	2207      	movs	r2, #7
   29fb4:	4639      	mov	r1, r7
   29fb6:	1c68      	adds	r0, r5, #1
   29fb8:	eba5 0904 	sub.w	r9, r5, r4
   29fbc:	f003 fad4 	bl	2d568 <memcmp>
   29fc0:	b918      	cbnz	r0, 29fca <ccc_find_cfg+0x2e>
			return &ccc->cfg[i];
   29fc2:	eb04 0009 	add.w	r0, r4, r9
}
   29fc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   29fca:	350a      	adds	r5, #10
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   29fcc:	42b5      	cmp	r5, r6
   29fce:	d1ed      	bne.n	29fac <ccc_find_cfg+0x10>
	return NULL;
   29fd0:	2000      	movs	r0, #0
   29fd2:	e7f8      	b.n	29fc6 <ccc_find_cfg+0x2a>

00029fd4 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   29fd4:	2a02      	cmp	r2, #2
{
   29fd6:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   29fd8:	d108      	bne.n	29fec <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   29fda:	2300      	movs	r3, #0
   29fdc:	f100 0188 	add.w	r1, r0, #136	; 0x88
   29fe0:	461a      	mov	r2, r3
   29fe2:	7a00      	ldrb	r0, [r0, #8]
   29fe4:	f7e2 f8e4 	bl	c1b0 <sc_save>
}
   29fe8:	2002      	movs	r0, #2
   29fea:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   29fec:	f7e2 f946 	bl	c27c <sc_clear>
   29ff0:	e7fa      	b.n	29fe8 <sc_ccc_cfg_write+0x14>

00029ff2 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   29ff2:	2301      	movs	r3, #1
   29ff4:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   29ff8:	f3bf 8f5b 	dmb	ish
   29ffc:	e850 3f00 	ldrex	r3, [r0]
   2a000:	430b      	orrs	r3, r1
   2a002:	e840 3200 	strex	r2, r3, [r0]
   2a006:	2a00      	cmp	r2, #0
   2a008:	d1f8      	bne.n	29ffc <atomic_set_bit+0xa>
   2a00a:	f3bf 8f5b 	dmb	ish
}
   2a00e:	4770      	bx	lr

0002a010 <sc_restore_rsp>:
{
   2a010:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   2a012:	f7e2 fa05 	bl	c420 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   2a016:	b140      	cbz	r0, 2a02a <sc_restore_rsp+0x1a>
   2a018:	7a03      	ldrb	r3, [r0, #8]
   2a01a:	07db      	lsls	r3, r3, #31
   2a01c:	d505      	bpl.n	2a02a <sc_restore_rsp+0x1a>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   2a01e:	2100      	movs	r1, #0
   2a020:	300c      	adds	r0, #12
}
   2a022:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   2a026:	f7ff bfe4 	b.w	29ff2 <atomic_set_bit>
}
   2a02a:	bd08      	pop	{r3, pc}

0002a02c <cf_read>:
{
   2a02c:	b530      	push	{r4, r5, lr}
   2a02e:	b085      	sub	sp, #20
   2a030:	461d      	mov	r5, r3
	uint8_t data[1] = {};
   2a032:	2300      	movs	r3, #0
{
   2a034:	4614      	mov	r4, r2
	uint8_t data[1] = {};
   2a036:	f88d 300c 	strb.w	r3, [sp, #12]
	cfg = find_cf_cfg(conn);
   2a03a:	f7e2 f9f1 	bl	c420 <find_cf_cfg>
	if (cfg) {
   2a03e:	b110      	cbz	r0, 2a046 <cf_read+0x1a>
		memcpy(data, cfg->data, sizeof(data));
   2a040:	7a03      	ldrb	r3, [r0, #8]
   2a042:	f88d 300c 	strb.w	r3, [sp, #12]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   2a046:	2301      	movs	r3, #1
   2a048:	9300      	str	r3, [sp, #0]
   2a04a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   2a04e:	ab03      	add	r3, sp, #12
   2a050:	4629      	mov	r1, r5
   2a052:	4620      	mov	r0, r4
   2a054:	f7ff ff2f 	bl	29eb6 <bt_gatt_attr_read.constprop.24>
}
   2a058:	b005      	add	sp, #20
   2a05a:	bd30      	pop	{r4, r5, pc}

0002a05c <find_ccc_cfg>:
{
   2a05c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2a05e:	4605      	mov	r5, r0
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   2a060:	1c4c      	adds	r4, r1, #1
   2a062:	f101 061f 	add.w	r6, r1, #31
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   2a066:	1e67      	subs	r7, r4, #1
		if (conn) {
   2a068:	b16d      	cbz	r5, 2a086 <find_ccc_cfg+0x2a>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   2a06a:	4622      	mov	r2, r4
   2a06c:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   2a070:	4628      	mov	r0, r5
   2a072:	f7ff fa0b 	bl	2948c <bt_conn_is_peer_addr_le>
   2a076:	b918      	cbnz	r0, 2a080 <find_ccc_cfg+0x24>
   2a078:	340a      	adds	r4, #10
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   2a07a:	42b4      	cmp	r4, r6
   2a07c:	d1f3      	bne.n	2a066 <find_ccc_cfg+0xa>
	return NULL;
   2a07e:	2700      	movs	r7, #0
}
   2a080:	4638      	mov	r0, r7
   2a082:	b003      	add	sp, #12
   2a084:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2a086:	2207      	movs	r2, #7
   2a088:	4669      	mov	r1, sp
   2a08a:	4620      	mov	r0, r4
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   2a08c:	9500      	str	r5, [sp, #0]
   2a08e:	f8cd 5003 	str.w	r5, [sp, #3]
   2a092:	f003 fa69 	bl	2d568 <memcmp>
   2a096:	2800      	cmp	r0, #0
   2a098:	d1ee      	bne.n	2a078 <find_ccc_cfg+0x1c>
   2a09a:	e7f1      	b.n	2a080 <find_ccc_cfg+0x24>

0002a09c <bt_gatt_attr_read_ccc>:
{
   2a09c:	b530      	push	{r4, r5, lr}
	cfg = find_ccc_cfg(conn, ccc);
   2a09e:	68c9      	ldr	r1, [r1, #12]
{
   2a0a0:	b085      	sub	sp, #20
   2a0a2:	4614      	mov	r4, r2
   2a0a4:	461d      	mov	r5, r3
	cfg = find_ccc_cfg(conn, ccc);
   2a0a6:	f7ff ffd9 	bl	2a05c <find_ccc_cfg>
	if (cfg) {
   2a0aa:	b100      	cbz	r0, 2a0ae <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(cfg->value);
   2a0ac:	8900      	ldrh	r0, [r0, #8]
   2a0ae:	f8ad 000e 	strh.w	r0, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   2a0b2:	2302      	movs	r3, #2
   2a0b4:	9300      	str	r3, [sp, #0]
   2a0b6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   2a0ba:	f10d 030e 	add.w	r3, sp, #14
   2a0be:	4629      	mov	r1, r5
   2a0c0:	4620      	mov	r0, r4
   2a0c2:	f7ff fef8 	bl	29eb6 <bt_gatt_attr_read.constprop.24>
}
   2a0c6:	b005      	add	sp, #20
   2a0c8:	bd30      	pop	{r4, r5, pc}

0002a0ca <bt_gatt_attr_value_handle>:
{
   2a0ca:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2a0cc:	4604      	mov	r4, r0
   2a0ce:	b910      	cbnz	r0, 2a0d6 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   2a0d0:	2000      	movs	r0, #0
}
   2a0d2:	b002      	add	sp, #8
   2a0d4:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2a0d6:	2300      	movs	r3, #0
   2a0d8:	f88d 3004 	strb.w	r3, [sp, #4]
   2a0dc:	a901      	add	r1, sp, #4
   2a0de:	f642 0303 	movw	r3, #10243	; 0x2803
   2a0e2:	6800      	ldr	r0, [r0, #0]
   2a0e4:	f8ad 3006 	strh.w	r3, [sp, #6]
   2a0e8:	f7fe ffce 	bl	29088 <bt_uuid_cmp>
   2a0ec:	2800      	cmp	r0, #0
   2a0ee:	d1ef      	bne.n	2a0d0 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   2a0f0:	68e3      	ldr	r3, [r4, #12]
   2a0f2:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   2a0f4:	2800      	cmp	r0, #0
   2a0f6:	d1ec      	bne.n	2a0d2 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   2a0f8:	4620      	mov	r0, r4
   2a0fa:	f7e2 fc9d 	bl	ca38 <bt_gatt_attr_get_handle>
   2a0fe:	3001      	adds	r0, #1
   2a100:	b280      	uxth	r0, r0
	return handle;
   2a102:	e7e6      	b.n	2a0d2 <bt_gatt_attr_value_handle+0x8>

0002a104 <bt_gatt_attr_read_chrc>:
{
   2a104:	b570      	push	{r4, r5, r6, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   2a106:	68cc      	ldr	r4, [r1, #12]
{
   2a108:	b088      	sub	sp, #32
   2a10a:	4608      	mov	r0, r1
   2a10c:	461e      	mov	r6, r3
	pdu.properties = chrc->properties;
   2a10e:	79a3      	ldrb	r3, [r4, #6]
   2a110:	f88d 300c 	strb.w	r3, [sp, #12]
{
   2a114:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2a116:	f7ff ffd8 	bl	2a0ca <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   2a11a:	6823      	ldr	r3, [r4, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2a11c:	f8ad 000d 	strh.w	r0, [sp, #13]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   2a120:	781a      	ldrb	r2, [r3, #0]
   2a122:	b96a      	cbnz	r2, 2a140 <bt_gatt_attr_read_chrc+0x3c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   2a124:	885b      	ldrh	r3, [r3, #2]
   2a126:	f8ad 300f 	strh.w	r3, [sp, #15]
		value_len += 2U;
   2a12a:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   2a12c:	9300      	str	r3, [sp, #0]
   2a12e:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   2a132:	ab03      	add	r3, sp, #12
   2a134:	4631      	mov	r1, r6
   2a136:	4628      	mov	r0, r5
   2a138:	f7ff febd 	bl	29eb6 <bt_gatt_attr_read.constprop.24>
}
   2a13c:	b008      	add	sp, #32
   2a13e:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   2a140:	1c5a      	adds	r2, r3, #1
   2a142:	f10d 000f 	add.w	r0, sp, #15
   2a146:	3311      	adds	r3, #17
   2a148:	f852 1b04 	ldr.w	r1, [r2], #4
   2a14c:	f840 1b04 	str.w	r1, [r0], #4
   2a150:	429a      	cmp	r2, r3
   2a152:	d1f9      	bne.n	2a148 <bt_gatt_attr_read_chrc+0x44>
		value_len += 16U;
   2a154:	2313      	movs	r3, #19
   2a156:	e7e9      	b.n	2a12c <bt_gatt_attr_read_chrc+0x28>

0002a158 <bt_gatt_foreach_attr>:
{
   2a158:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2a15a:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2a15e:	2300      	movs	r3, #0
   2a160:	9300      	str	r3, [sp, #0]
   2a162:	461a      	mov	r2, r3
   2a164:	f7e2 fcac 	bl	cac0 <bt_gatt_foreach_attr_type>
}
   2a168:	b005      	add	sp, #20
   2a16a:	f85d fb04 	ldr.w	pc, [sp], #4

0002a16e <db_hash_process>:
	db_hash_gen(true);
   2a16e:	2001      	movs	r0, #1
   2a170:	f7e2 bd5c 	b.w	cc2c <db_hash_gen>

0002a174 <bt_gatt_get_mtu>:
	return bt_att_get_mtu(conn);
   2a174:	f7ff bd89 	b.w	29c8a <bt_att_get_mtu>

0002a178 <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   2a178:	07d3      	lsls	r3, r2, #31
{
   2a17a:	b510      	push	{r4, lr}
   2a17c:	7c8c      	ldrb	r4, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   2a17e:	d504      	bpl.n	2a18a <bt_gatt_check_perm+0x12>
   2a180:	f014 0f15 	tst.w	r4, #21
   2a184:	d017      	beq.n	2a1b6 <bt_gatt_check_perm+0x3e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2a186:	684b      	ldr	r3, [r1, #4]
   2a188:	b1ab      	cbz	r3, 2a1b6 <bt_gatt_check_perm+0x3e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   2a18a:	0793      	lsls	r3, r2, #30
   2a18c:	d504      	bpl.n	2a198 <bt_gatt_check_perm+0x20>
   2a18e:	f014 0f2a 	tst.w	r4, #42	; 0x2a
   2a192:	d012      	beq.n	2a1ba <bt_gatt_check_perm+0x42>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   2a194:	688b      	ldr	r3, [r1, #8]
   2a196:	b183      	cbz	r3, 2a1ba <bt_gatt_check_perm+0x42>
	mask &= attr->perm;
   2a198:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   2a19a:	f014 0f30 	tst.w	r4, #48	; 0x30
   2a19e:	d104      	bne.n	2a1aa <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   2a1a0:	f014 000c 	ands.w	r0, r4, #12
   2a1a4:	bf18      	it	ne
   2a1a6:	200f      	movne	r0, #15
}
   2a1a8:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   2a1aa:	f7ff f964 	bl	29476 <bt_conn_get_security>
   2a1ae:	2802      	cmp	r0, #2
   2a1b0:	d8f6      	bhi.n	2a1a0 <bt_gatt_check_perm+0x28>
			return BT_ATT_ERR_AUTHENTICATION;
   2a1b2:	2005      	movs	r0, #5
   2a1b4:	e7f8      	b.n	2a1a8 <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   2a1b6:	2002      	movs	r0, #2
   2a1b8:	e7f6      	b.n	2a1a8 <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   2a1ba:	2003      	movs	r0, #3
   2a1bc:	e7f4      	b.n	2a1a8 <bt_gatt_check_perm+0x30>

0002a1be <bt_gatt_change_aware>:
{
   2a1be:	b570      	push	{r4, r5, r6, lr}
   2a1c0:	460d      	mov	r5, r1
	cfg = find_cf_cfg(conn);
   2a1c2:	f7e2 f92d 	bl	c420 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2a1c6:	b910      	cbnz	r0, 2a1ce <bt_gatt_change_aware+0x10>
		return true;
   2a1c8:	2501      	movs	r5, #1
}
   2a1ca:	4628      	mov	r0, r5
   2a1cc:	bd70      	pop	{r4, r5, r6, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2a1ce:	7a03      	ldrb	r3, [r0, #8]
   2a1d0:	07db      	lsls	r3, r3, #31
   2a1d2:	d5f9      	bpl.n	2a1c8 <bt_gatt_change_aware+0xa>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   2a1d4:	f100 040c 	add.w	r4, r0, #12
   2a1d8:	2100      	movs	r1, #0
   2a1da:	4620      	mov	r0, r4
   2a1dc:	f7ff fed5 	bl	29f8a <atomic_test_bit>
   2a1e0:	4606      	mov	r6, r0
   2a1e2:	2800      	cmp	r0, #0
   2a1e4:	d1f0      	bne.n	2a1c8 <bt_gatt_change_aware+0xa>
	if (!req) {
   2a1e6:	2d00      	cmp	r5, #0
   2a1e8:	d0ef      	beq.n	2a1ca <bt_gatt_change_aware+0xc>
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   2a1ea:	2101      	movs	r1, #1
   2a1ec:	4620      	mov	r0, r4
   2a1ee:	f7ff fecc 	bl	29f8a <atomic_test_bit>
   2a1f2:	4605      	mov	r5, r0
   2a1f4:	b148      	cbz	r0, 2a20a <bt_gatt_change_aware+0x4c>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2a1f6:	f06f 0102 	mvn.w	r1, #2
   2a1fa:	4620      	mov	r0, r4
   2a1fc:	f7ff fe32 	bl	29e64 <atomic_and>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   2a200:	4631      	mov	r1, r6
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   2a202:	4620      	mov	r0, r4
   2a204:	f7ff fef5 	bl	29ff2 <atomic_set_bit>
	return false;
   2a208:	e7df      	b.n	2a1ca <bt_gatt_change_aware+0xc>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   2a20a:	2101      	movs	r1, #1
   2a20c:	e7f9      	b.n	2a202 <bt_gatt_change_aware+0x44>

0002a20e <bt_smp_recv>:
{
   2a20e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   2a210:	2100      	movs	r1, #0
	struct bt_conn *conn = chan->conn;
   2a212:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   2a214:	f04f 32ff 	mov.w	r2, #4294967295
   2a218:	f04f 33ff 	mov.w	r3, #4294967295
   2a21c:	4608      	mov	r0, r1
   2a21e:	f7ff f9f1 	bl	29604 <bt_l2cap_create_pdu_timeout>
   2a222:	f100 0608 	add.w	r6, r0, #8
   2a226:	4605      	mov	r5, r0
   2a228:	2101      	movs	r1, #1
   2a22a:	4630      	mov	r0, r6
   2a22c:	f7f4 ffe2 	bl	1f1f4 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   2a230:	2405      	movs	r4, #5
   2a232:	7004      	strb	r4, [r0, #0]
   2a234:	2101      	movs	r1, #1
   2a236:	4630      	mov	r0, r6
   2a238:	f7f4 ffdc 	bl	1f1f4 <net_buf_simple_add>
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   2a23c:	7004      	strb	r4, [r0, #0]
   2a23e:	2400      	movs	r4, #0
   2a240:	9400      	str	r4, [sp, #0]
   2a242:	4623      	mov	r3, r4
   2a244:	462a      	mov	r2, r5
   2a246:	2106      	movs	r1, #6
   2a248:	4638      	mov	r0, r7
   2a24a:	f7ff f9de 	bl	2960a <bt_l2cap_send_cb>
}
   2a24e:	4620      	mov	r0, r4
   2a250:	b003      	add	sp, #12
   2a252:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002a254 <bt_smp_sign>:
   2a254:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2a258:	4770      	bx	lr

0002a25a <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   2a25a:	2000      	movs	r0, #0
   2a25c:	4770      	bx	lr

0002a25e <model_start>:
	if (mod->cb && mod->cb->start) {
   2a25e:	6943      	ldr	r3, [r0, #20]
   2a260:	b113      	cbz	r3, 2a268 <model_start+0xa>
   2a262:	685b      	ldr	r3, [r3, #4]
   2a264:	b103      	cbz	r3, 2a268 <model_start+0xa>
		mod->cb->start(mod);
   2a266:	4718      	bx	r3
}
   2a268:	4770      	bx	lr

0002a26a <bt_mesh_is_provisioned>:
	return atomic_test_bit(bt_mesh.flags, BT_MESH_VALID);
   2a26a:	f7e3 ba37 	b.w	d6dc <atomic_test_bit.constprop.4>

0002a26e <bt_mesh_init>:
{
   2a26e:	b538      	push	{r3, r4, r5, lr}
   2a270:	4605      	mov	r5, r0
	err = bt_mesh_comp_register(comp);
   2a272:	4608      	mov	r0, r1
   2a274:	f7e7 fe72 	bl	11f5c <bt_mesh_comp_register>
	if (err) {
   2a278:	4604      	mov	r4, r0
   2a27a:	b9a0      	cbnz	r0, 2a2a6 <bt_mesh_init+0x38>
		bt_mesh_proxy_init();
   2a27c:	f7ed fe3e 	bl	17efc <bt_mesh_proxy_init>
		err = bt_mesh_prov_init(prov);
   2a280:	4628      	mov	r0, r5
   2a282:	f7eb fde9 	bl	15e58 <bt_mesh_prov_init>
		if (err) {
   2a286:	4604      	mov	r4, r0
   2a288:	b968      	cbnz	r0, 2a2a6 <bt_mesh_init+0x38>
	bt_mesh_cfg_init();
   2a28a:	f7e3 fbef 	bl	da6c <bt_mesh_cfg_init>
	bt_mesh_net_init();
   2a28e:	f7e4 fdc7 	bl	ee20 <bt_mesh_net_init>
	bt_mesh_trans_init();
   2a292:	f7e6 f961 	bl	10558 <bt_mesh_trans_init>
	bt_mesh_hb_init();
   2a296:	f7e7 f9a5 	bl	115e4 <bt_mesh_hb_init>
	bt_mesh_beacon_init();
   2a29a:	f7e3 fead 	bl	dff8 <bt_mesh_beacon_init>
	bt_mesh_adv_init();
   2a29e:	f7ea f951 	bl	14544 <bt_mesh_adv_init>
		bt_mesh_settings_init();
   2a2a2:	f7ea fa4b 	bl	1473c <bt_mesh_settings_init>
}
   2a2a6:	4620      	mov	r0, r4
   2a2a8:	bd38      	pop	{r3, r4, r5, pc}

0002a2aa <atomic_or>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2a2aa:	f3bf 8f5b 	dmb	ish
   2a2ae:	e850 3f00 	ldrex	r3, [r0]
   2a2b2:	ea43 0201 	orr.w	r2, r3, r1
   2a2b6:	e840 2c00 	strex	ip, r2, [r0]
   2a2ba:	f1bc 0f00 	cmp.w	ip, #0
   2a2be:	d1f6      	bne.n	2a2ae <atomic_or+0x4>
   2a2c0:	f3bf 8f5b 	dmb	ish
}
   2a2c4:	4618      	mov	r0, r3
   2a2c6:	4770      	bx	lr

0002a2c8 <bt_mesh_beacon_enabled>:
	return atomic_test_bit(bt_mesh.flags, BT_MESH_BEACON);
   2a2c8:	2007      	movs	r0, #7
   2a2ca:	f7e3 bad3 	b.w	d874 <atomic_test_bit.constprop.7>

0002a2ce <bt_mesh_gatt_proxy_set>:
{
   2a2ce:	b510      	push	{r4, lr}
	err = feature_set(BT_MESH_GATT_PROXY, gatt_proxy);
   2a2d0:	4601      	mov	r1, r0
   2a2d2:	2008      	movs	r0, #8
   2a2d4:	f7e3 fadc 	bl	d890 <feature_set>
	if (err) {
   2a2d8:	4604      	mov	r4, r0
   2a2da:	b948      	cbnz	r0, 2a2f0 <bt_mesh_gatt_proxy_set+0x22>
	bt_mesh_hb_feature_changed(BT_MESH_FEAT_PROXY);
   2a2dc:	2002      	movs	r0, #2
   2a2de:	f7e7 f975 	bl	115cc <bt_mesh_hb_feature_changed>
	    atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
   2a2e2:	4620      	mov	r0, r4
   2a2e4:	f7e3 fac6 	bl	d874 <atomic_test_bit.constprop.7>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   2a2e8:	b110      	cbz	r0, 2a2f0 <bt_mesh_gatt_proxy_set+0x22>
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
   2a2ea:	2007      	movs	r0, #7
   2a2ec:	f7ea f9c6 	bl	1467c <bt_mesh_settings_store_schedule>
}
   2a2f0:	4620      	mov	r0, r4
   2a2f2:	bd10      	pop	{r4, pc}

0002a2f4 <bt_mesh_gatt_proxy_get>:
	return atomic_test_bit(bt_mesh.flags, feature_flag) ?
   2a2f4:	2008      	movs	r0, #8
   2a2f6:	f7e3 babd 	b.w	d874 <atomic_test_bit.constprop.7>

0002a2fa <bt_mesh_friend_set>:
{
   2a2fa:	b538      	push	{r3, r4, r5, lr}
	err = feature_set(BT_MESH_FRIEND, friendship);
   2a2fc:	4601      	mov	r1, r0
{
   2a2fe:	4605      	mov	r5, r0
	err = feature_set(BT_MESH_FRIEND, friendship);
   2a300:	2009      	movs	r0, #9
   2a302:	f7e3 fac5 	bl	d890 <feature_set>
	if (err) {
   2a306:	4604      	mov	r4, r0
   2a308:	b960      	cbnz	r0, 2a324 <bt_mesh_friend_set+0x2a>
	bt_mesh_hb_feature_changed(BT_MESH_FEAT_FRIEND);
   2a30a:	2004      	movs	r0, #4
   2a30c:	f7e7 f95e 	bl	115cc <bt_mesh_hb_feature_changed>
	    atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
   2a310:	4620      	mov	r0, r4
   2a312:	f7e3 faaf 	bl	d874 <atomic_test_bit.constprop.7>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   2a316:	b110      	cbz	r0, 2a31e <bt_mesh_friend_set+0x24>
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
   2a318:	2007      	movs	r0, #7
   2a31a:	f7ea f9af 	bl	1467c <bt_mesh_settings_store_schedule>
	if (friendship == BT_MESH_FEATURE_DISABLED) {
   2a31e:	b90d      	cbnz	r5, 2a324 <bt_mesh_friend_set+0x2a>
		bt_mesh_friends_clear();
   2a320:	f7ea fe76 	bl	15010 <bt_mesh_friends_clear>
}
   2a324:	4620      	mov	r0, r4
   2a326:	bd38      	pop	{r3, r4, r5, pc}

0002a328 <bt_mesh_friend_get>:
	return atomic_test_bit(bt_mesh.flags, feature_flag) ?
   2a328:	2009      	movs	r0, #9
   2a32a:	f7e3 baa3 	b.w	d874 <atomic_test_bit.constprop.7>

0002a32e <bt_mesh_relay_get>:
   2a32e:	2006      	movs	r0, #6
   2a330:	f7e3 baa0 	b.w	d874 <atomic_test_bit.constprop.7>

0002a334 <bt_mesh_fixed_group_match>:
	switch (addr) {
   2a334:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
   2a338:	38fc      	subs	r0, #252	; 0xfc
{
   2a33a:	b508      	push	{r3, lr}
	switch (addr) {
   2a33c:	2803      	cmp	r0, #3
   2a33e:	d803      	bhi.n	2a348 <bt_mesh_fixed_group_match+0x14>
   2a340:	e8df f000 	tbb	[pc, r0]
   2a344:	100d0a04 	.word	0x100d0a04
		return false;
   2a348:	2000      	movs	r0, #0
}
   2a34a:	bd08      	pop	{r3, pc}
		return (bt_mesh_gatt_proxy_get() == BT_MESH_FEATURE_ENABLED);
   2a34c:	f7ff ffd2 	bl	2a2f4 <bt_mesh_gatt_proxy_get>
		return (bt_mesh_friend_get() == BT_MESH_FEATURE_ENABLED);
   2a350:	1e43      	subs	r3, r0, #1
   2a352:	4258      	negs	r0, r3
   2a354:	4158      	adcs	r0, r3
   2a356:	e7f8      	b.n	2a34a <bt_mesh_fixed_group_match+0x16>
   2a358:	f7ff ffe6 	bl	2a328 <bt_mesh_friend_get>
   2a35c:	e7f8      	b.n	2a350 <bt_mesh_fixed_group_match+0x1c>
		return (bt_mesh_relay_get() == BT_MESH_FEATURE_ENABLED);
   2a35e:	f7ff ffe6 	bl	2a32e <bt_mesh_relay_get>
   2a362:	e7f5      	b.n	2a350 <bt_mesh_fixed_group_match+0x1c>
		return true;
   2a364:	2001      	movs	r0, #1
   2a366:	e7f0      	b.n	2a34a <bt_mesh_fixed_group_match+0x16>

0002a368 <sub_update_beacon_observation>:
	sub->beacons_last = sub->beacons_cur;
   2a368:	7943      	ldrb	r3, [r0, #5]
   2a36a:	7103      	strb	r3, [r0, #4]
	sub->beacons_cur = 0U;
   2a36c:	2300      	movs	r3, #0
   2a36e:	7143      	strb	r3, [r0, #5]
}
   2a370:	4770      	bx	lr

0002a372 <cache_check>:
{
   2a372:	b508      	push	{r3, lr}
	return !memcmp(sub->beacon_cache, beacon_data, 21);
   2a374:	2215      	movs	r2, #21
   2a376:	3006      	adds	r0, #6
   2a378:	f003 f8f6 	bl	2d568 <memcmp>
}
   2a37c:	fab0 f080 	clz	r0, r0
   2a380:	0940      	lsrs	r0, r0, #5
   2a382:	bd08      	pop	{r3, pc}

0002a384 <beacon_complete>:
{
   2a384:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   2a388:	460d      	mov	r5, r1
	return z_impl_k_uptime_ticks();
   2a38a:	f003 f85b 	bl	2d444 <z_impl_k_uptime_ticks>
   2a38e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   2a392:	fba0 bc04 	umull	fp, ip, r0, r4
   2a396:	fb04 cc01 	mla	ip, r4, r1, ip
   2a39a:	ea4f 32db 	mov.w	r2, fp, lsr #15
   2a39e:	ea42 424c 	orr.w	r2, r2, ip, lsl #17
	return (uint32_t)k_uptime_get();
   2a3a2:	602a      	str	r2, [r5, #0]
}
   2a3a4:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}

0002a3a8 <subnet_evt>:
	if (evt != BT_MESH_KEY_DELETED) {
   2a3a8:	2901      	cmp	r1, #1
   2a3aa:	d001      	beq.n	2a3b0 <subnet_evt+0x8>
		bt_mesh_beacon_update(sub);
   2a3ac:	f7e3 bdfc 	b.w	dfa8 <bt_mesh_beacon_update>
}
   2a3b0:	4770      	bx	lr

0002a3b2 <subnet_beacon_enable>:
	sub->beacons_last = 0U;
   2a3b2:	2200      	movs	r2, #0
   2a3b4:	8082      	strh	r2, [r0, #4]
	bt_mesh_beacon_update(sub);
   2a3b6:	f7e3 bdf7 	b.w	dfa8 <bt_mesh_beacon_update>

0002a3ba <sys_get_be24>:
	return ((uint16_t)src[0] << 8) | src[1];
   2a3ba:	7842      	ldrb	r2, [r0, #1]
   2a3bc:	7883      	ldrb	r3, [r0, #2]
	return ((uint32_t)src[0] << 16) | sys_get_be16(&src[1]);
   2a3be:	7800      	ldrb	r0, [r0, #0]
   2a3c0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
}
   2a3c4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   2a3c8:	4770      	bx	lr

0002a3ca <send_cb_finalize>:
void bt_mesh_net_clear(void);
void bt_mesh_net_settings_commit(void);

static inline void send_cb_finalize(const struct bt_mesh_send_cb *cb,
				    void *cb_data)
{
   2a3ca:	b570      	push	{r4, r5, r6, lr}
   2a3cc:	460d      	mov	r5, r1
	if (!cb) {
   2a3ce:	4604      	mov	r4, r0
   2a3d0:	b160      	cbz	r0, 2a3ec <send_cb_finalize+0x22>
		return;
	}

	if (cb->start) {
   2a3d2:	6803      	ldr	r3, [r0, #0]
   2a3d4:	b11b      	cbz	r3, 2a3de <send_cb_finalize+0x14>
		cb->start(0, 0, cb_data);
   2a3d6:	460a      	mov	r2, r1
   2a3d8:	2100      	movs	r1, #0
   2a3da:	4608      	mov	r0, r1
   2a3dc:	4798      	blx	r3
	}

	if (cb->end) {
   2a3de:	6863      	ldr	r3, [r4, #4]
   2a3e0:	b123      	cbz	r3, 2a3ec <send_cb_finalize+0x22>
		cb->end(0, cb_data);
   2a3e2:	4629      	mov	r1, r5
   2a3e4:	2000      	movs	r0, #0
	}
}
   2a3e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		cb->end(0, cb_data);
   2a3ea:	4718      	bx	r3
}
   2a3ec:	bd70      	pop	{r4, r5, r6, pc}

0002a3ee <net_encrypt>:
{
   2a3ee:	b570      	push	{r4, r5, r6, lr}
   2a3f0:	460d      	mov	r5, r1
   2a3f2:	4604      	mov	r4, r0
	err = bt_mesh_net_encrypt(cred->enc, buf, iv_index, proxy);
   2a3f4:	4601      	mov	r1, r0
   2a3f6:	1c68      	adds	r0, r5, #1
{
   2a3f8:	4616      	mov	r6, r2
	err = bt_mesh_net_encrypt(cred->enc, buf, iv_index, proxy);
   2a3fa:	f000 fb32 	bl	2aa62 <bt_mesh_net_encrypt>
	if (err) {
   2a3fe:	b938      	cbnz	r0, 2a410 <net_encrypt+0x22>
	return bt_mesh_net_obfuscate(buf->data, iv_index, cred->privacy);
   2a400:	f105 0211 	add.w	r2, r5, #17
   2a404:	4631      	mov	r1, r6
   2a406:	6820      	ldr	r0, [r4, #0]
}
   2a408:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_mesh_net_obfuscate(buf->data, iv_index, cred->privacy);
   2a40c:	f000 bafb 	b.w	2aa06 <bt_mesh_net_obfuscate>
}
   2a410:	bd70      	pop	{r4, r5, r6, pc}

0002a412 <bt_mesh_net_clear>:
{
   2a412:	b508      	push	{r3, lr}
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_NET_PENDING);
   2a414:	2003      	movs	r0, #3
   2a416:	f7ea f931 	bl	1467c <bt_mesh_settings_store_schedule>
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_IV_PENDING);
   2a41a:	2004      	movs	r0, #4
   2a41c:	f7ea f92e 	bl	1467c <bt_mesh_settings_store_schedule>
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
   2a420:	2007      	movs	r0, #7
}
   2a422:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
   2a426:	f7ea b929 	b.w	1467c <bt_mesh_settings_store_schedule>

0002a42a <subnet_del>:
{
   2a42a:	b510      	push	{r4, lr}
   2a42c:	4604      	mov	r4, r0
		update_subnet_settings(sub->net_idx, false);
   2a42e:	2100      	movs	r1, #0
   2a430:	8b80      	ldrh	r0, [r0, #28]
   2a432:	f7e4 fe89 	bl	f148 <update_subnet_settings>
	bt_mesh_net_loopback_clear(sub->net_idx);
   2a436:	8ba0      	ldrh	r0, [r4, #28]
   2a438:	f7e4 fade 	bl	e9f8 <bt_mesh_net_loopback_clear>
	subnet_evt(sub, BT_MESH_KEY_DELETED);
   2a43c:	2101      	movs	r1, #1
   2a43e:	4620      	mov	r0, r4
   2a440:	f7e4 fdb4 	bl	efac <subnet_evt>
   2a444:	22e0      	movs	r2, #224	; 0xe0
   2a446:	2100      	movs	r1, #0
   2a448:	4620      	mov	r0, r4
   2a44a:	f003 f8d6 	bl	2d5fa <memset>
	sub->net_idx = BT_MESH_KEY_UNUSED;
   2a44e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2a452:	83a3      	strh	r3, [r4, #28]
}
   2a454:	bd10      	pop	{r4, pc}

0002a456 <bt_mesh_subnet_store>:
	update_subnet_settings(net_idx, true);
   2a456:	2101      	movs	r1, #1
   2a458:	f7e4 be76 	b.w	f148 <update_subnet_settings>

0002a45c <key_refresh>:
{
   2a45c:	b538      	push	{r3, r4, r5, lr}
   2a45e:	4604      	mov	r4, r0
	switch (new_phase) {
   2a460:	2903      	cmp	r1, #3
   2a462:	d809      	bhi.n	2a478 <key_refresh+0x1c>
   2a464:	e8df f001 	tbb	[pc, r1]
   2a468:	110d0213 	.word	0x110d0213
		sub->kr_phase = new_phase;
   2a46c:	2301      	movs	r3, #1
   2a46e:	7783      	strb	r3, [r0, #30]
		subnet_evt(sub, BT_MESH_KEY_UPDATED);
   2a470:	2102      	movs	r1, #2
		subnet_evt(sub, BT_MESH_KEY_REVOKED);
   2a472:	4620      	mov	r0, r4
   2a474:	f7e4 fd9a 	bl	efac <subnet_evt>
		bt_mesh_subnet_store(sub->net_idx);
   2a478:	8ba0      	ldrh	r0, [r4, #28]
}
   2a47a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_mesh_subnet_store(sub->net_idx);
   2a47e:	f7ff bfea 	b.w	2a456 <bt_mesh_subnet_store>
		sub->kr_phase = new_phase;
   2a482:	2302      	movs	r3, #2
   2a484:	7783      	strb	r3, [r0, #30]
		subnet_evt(sub, BT_MESH_KEY_SWAPPED);
   2a486:	2103      	movs	r1, #3
   2a488:	e7f3      	b.n	2a472 <key_refresh+0x16>
		if (sub->kr_phase == BT_MESH_KR_NORMAL) {
   2a48a:	7f83      	ldrb	r3, [r0, #30]
   2a48c:	b163      	cbz	r3, 2a4a8 <key_refresh+0x4c>
		sub->kr_phase = BT_MESH_KR_NORMAL;
   2a48e:	2500      	movs	r5, #0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2a490:	f104 0186 	add.w	r1, r4, #134	; 0x86
   2a494:	77a5      	strb	r5, [r4, #30]
   2a496:	225a      	movs	r2, #90	; 0x5a
   2a498:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   2a49c:	f003 f872 	bl	2d584 <memcpy>
		sub->keys[1].valid = 0U;
   2a4a0:	f884 5086 	strb.w	r5, [r4, #134]	; 0x86
		subnet_evt(sub, BT_MESH_KEY_REVOKED);
   2a4a4:	2104      	movs	r1, #4
   2a4a6:	e7e4      	b.n	2a472 <key_refresh+0x16>
}
   2a4a8:	bd38      	pop	{r3, r4, r5, pc}

0002a4aa <bt_mesh_kr_update>:
	if (!new_key) {
   2a4aa:	b16a      	cbz	r2, 2a4c8 <bt_mesh_kr_update+0x1e>
	if (sub->kr_phase == BT_MESH_KR_PHASE_1) {
   2a4ac:	7f83      	ldrb	r3, [r0, #30]
   2a4ae:	2b01      	cmp	r3, #1
   2a4b0:	d105      	bne.n	2a4be <bt_mesh_kr_update+0x14>
		key_refresh(sub, (kr_flag ? BT_MESH_KR_PHASE_2 :
   2a4b2:	2900      	cmp	r1, #0
   2a4b4:	bf14      	ite	ne
   2a4b6:	2102      	movne	r1, #2
   2a4b8:	2103      	moveq	r1, #3
		key_refresh(sub, BT_MESH_KR_PHASE_3);
   2a4ba:	f7ff bfcf 	b.w	2a45c <key_refresh>
	} else if (sub->kr_phase == BT_MESH_KR_PHASE_2 && !kr_flag) {
   2a4be:	2b02      	cmp	r3, #2
   2a4c0:	d102      	bne.n	2a4c8 <bt_mesh_kr_update+0x1e>
   2a4c2:	b909      	cbnz	r1, 2a4c8 <bt_mesh_kr_update+0x1e>
		key_refresh(sub, BT_MESH_KR_PHASE_3);
   2a4c4:	2103      	movs	r1, #3
   2a4c6:	e7f8      	b.n	2a4ba <bt_mesh_kr_update+0x10>
}
   2a4c8:	4770      	bx	lr

0002a4ca <bt_mesh_subnet_exists>:
{
   2a4ca:	b508      	push	{r3, lr}
   2a4cc:	f7e4 fdea 	bl	f0a4 <bt_mesh_subnet_get.part.1>
}
   2a4d0:	3000      	adds	r0, #0
   2a4d2:	bf18      	it	ne
   2a4d4:	2001      	movne	r0, #1
   2a4d6:	bd08      	pop	{r3, pc}

0002a4d8 <bt_mesh_subnet_update>:
{
   2a4d8:	b538      	push	{r3, r4, r5, lr}
   2a4da:	460c      	mov	r4, r1
   2a4dc:	f7e4 fde2 	bl	f0a4 <bt_mesh_subnet_get.part.1>
	if (!sub) {
   2a4e0:	4605      	mov	r5, r0
   2a4e2:	b330      	cbz	r0, 2a532 <bt_mesh_subnet_update+0x5a>
	switch (sub->kr_phase) {
   2a4e4:	7f83      	ldrb	r3, [r0, #30]
   2a4e6:	2b03      	cmp	r3, #3
   2a4e8:	d815      	bhi.n	2a516 <bt_mesh_subnet_update+0x3e>
   2a4ea:	e8df f003 	tbb	[pc, r3]
   2a4ee:	0b02      	.short	0x0b02
   2a4f0:	1212      	.short	0x1212
		if (!memcmp(key, sub->keys[0].net, 16)) {
   2a4f2:	f100 012d 	add.w	r1, r0, #45	; 0x2d
   2a4f6:	2210      	movs	r2, #16
   2a4f8:	4620      	mov	r0, r4
   2a4fa:	f003 f835 	bl	2d568 <memcmp>
   2a4fe:	b950      	cbnz	r0, 2a516 <bt_mesh_subnet_update+0x3e>
			return STATUS_IDX_ALREADY_STORED;
   2a500:	2006      	movs	r0, #6
   2a502:	e015      	b.n	2a530 <bt_mesh_subnet_update+0x58>
		if (!memcmp(key, sub->keys[1].net, 16)) {
   2a504:	f100 0187 	add.w	r1, r0, #135	; 0x87
   2a508:	2210      	movs	r2, #16
   2a50a:	4620      	mov	r0, r4
   2a50c:	f003 f82c 	bl	2d568 <memcmp>
   2a510:	b170      	cbz	r0, 2a530 <bt_mesh_subnet_update+0x58>
		return STATUS_CANNOT_UPDATE;
   2a512:	200b      	movs	r0, #11
   2a514:	e00c      	b.n	2a530 <bt_mesh_subnet_update+0x58>
	err = net_keys_create(&sub->keys[1], key);
   2a516:	4621      	mov	r1, r4
   2a518:	f105 0086 	add.w	r0, r5, #134	; 0x86
   2a51c:	f7e4 fd6c 	bl	eff8 <net_keys_create>
	if (err) {
   2a520:	4604      	mov	r4, r0
   2a522:	2800      	cmp	r0, #0
   2a524:	d1f5      	bne.n	2a512 <bt_mesh_subnet_update+0x3a>
	key_refresh(sub, BT_MESH_KR_PHASE_1);
   2a526:	4628      	mov	r0, r5
   2a528:	2101      	movs	r1, #1
   2a52a:	f7ff ff97 	bl	2a45c <key_refresh>
	return STATUS_SUCCESS;
   2a52e:	4620      	mov	r0, r4
}
   2a530:	bd38      	pop	{r3, r4, r5, pc}
		return STATUS_INVALID_NETKEY;
   2a532:	2004      	movs	r0, #4
   2a534:	e7fc      	b.n	2a530 <bt_mesh_subnet_update+0x58>

0002a536 <bt_mesh_subnet_del>:
{
   2a536:	b508      	push	{r3, lr}
   2a538:	f7e4 fdb4 	bl	f0a4 <bt_mesh_subnet_get.part.1>
	if (!sub) {
   2a53c:	b118      	cbz	r0, 2a546 <bt_mesh_subnet_del+0x10>
	subnet_del(sub);
   2a53e:	f7ff ff74 	bl	2a42a <subnet_del>
	return STATUS_SUCCESS;
   2a542:	2000      	movs	r0, #0
}
   2a544:	bd08      	pop	{r3, pc}
		return STATUS_INVALID_NETKEY;
   2a546:	2004      	movs	r0, #4
   2a548:	e7fc      	b.n	2a544 <bt_mesh_subnet_del+0xe>

0002a54a <bt_mesh_friend_cred_create>:
{
   2a54a:	b530      	push	{r4, r5, lr}
   2a54c:	b087      	sub	sp, #28
	p[0] = 0x01;
   2a54e:	2501      	movs	r5, #1
{
   2a550:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
	p[0] = 0x01;
   2a554:	f88d 500c 	strb.w	r5, [sp, #12]
	dst[1] = val;
   2a558:	f88d 100e 	strb.w	r1, [sp, #14]
	dst[0] = val >> 8;
   2a55c:	0a0d      	lsrs	r5, r1, #8
	dst[1] = val;
   2a55e:	f88d 2010 	strb.w	r2, [sp, #16]
	dst[0] = val >> 8;
   2a562:	0a11      	lsrs	r1, r2, #8
	dst[1] = val;
   2a564:	f88d 3012 	strb.w	r3, [sp, #18]
	dst[0] = val >> 8;
   2a568:	0a1a      	lsrs	r2, r3, #8
   2a56a:	0a23      	lsrs	r3, r4, #8
   2a56c:	f88d 3013 	strb.w	r3, [sp, #19]
	return bt_mesh_k2(key, p, p_len, &cred->nid, cred->enc, cred->privacy);
   2a570:	f100 0311 	add.w	r3, r0, #17
   2a574:	9301      	str	r3, [sp, #4]
   2a576:	1c43      	adds	r3, r0, #1
   2a578:	f88d 100f 	strb.w	r1, [sp, #15]
   2a57c:	f88d 2011 	strb.w	r2, [sp, #17]
   2a580:	9300      	str	r3, [sp, #0]
   2a582:	2209      	movs	r2, #9
   2a584:	4603      	mov	r3, r0
   2a586:	a903      	add	r1, sp, #12
   2a588:	980b      	ldr	r0, [sp, #44]	; 0x2c
   2a58a:	f88d 500d 	strb.w	r5, [sp, #13]
	dst[1] = val;
   2a58e:	f88d 4014 	strb.w	r4, [sp, #20]
   2a592:	f7e7 f8a1 	bl	116d8 <bt_mesh_k2>
}
   2a596:	b007      	add	sp, #28
   2a598:	bd30      	pop	{r4, r5, pc}

0002a59a <bt_mesh_subnet_kr_phase_get>:
{
   2a59a:	b508      	push	{r3, lr}
   2a59c:	f7e4 fd82 	bl	f0a4 <bt_mesh_subnet_get.part.1>
	if (!sub) {
   2a5a0:	b118      	cbz	r0, 2a5aa <bt_mesh_subnet_kr_phase_get+0x10>
	*phase = sub->kr_phase;
   2a5a2:	7f83      	ldrb	r3, [r0, #30]
	return STATUS_SUCCESS;
   2a5a4:	2000      	movs	r0, #0
   2a5a6:	700b      	strb	r3, [r1, #0]
}
   2a5a8:	bd08      	pop	{r3, pc}
		*phase = BT_MESH_KR_NORMAL;
   2a5aa:	4603      	mov	r3, r0
		return STATUS_INVALID_NETKEY;
   2a5ac:	2004      	movs	r0, #4
   2a5ae:	e7fa      	b.n	2a5a6 <bt_mesh_subnet_kr_phase_get+0xc>

0002a5b0 <bt_mesh_subnet_node_id_set>:
	if (node_id == BT_MESH_FEATURE_NOT_SUPPORTED) {
   2a5b0:	2902      	cmp	r1, #2
{
   2a5b2:	b508      	push	{r3, lr}
	if (node_id == BT_MESH_FEATURE_NOT_SUPPORTED) {
   2a5b4:	d00c      	beq.n	2a5d0 <bt_mesh_subnet_node_id_set+0x20>
	for (int i = 0; i < ARRAY_SIZE(subnets); i++) {
   2a5b6:	f7e4 fd75 	bl	f0a4 <bt_mesh_subnet_get.part.1>
	if (!sub) {
   2a5ba:	b158      	cbz	r0, 2a5d4 <bt_mesh_subnet_node_id_set+0x24>
	if (node_id) {
   2a5bc:	b129      	cbz	r1, 2a5ca <bt_mesh_subnet_node_id_set+0x1a>
		bt_mesh_proxy_identity_start(sub);
   2a5be:	f7ed f9e7 	bl	17990 <bt_mesh_proxy_identity_start>
	bt_mesh_adv_update();
   2a5c2:	f7e9 ffb9 	bl	14538 <bt_mesh_adv_update>
	return STATUS_SUCCESS;
   2a5c6:	2000      	movs	r0, #0
}
   2a5c8:	bd08      	pop	{r3, pc}
		bt_mesh_proxy_identity_stop(sub);
   2a5ca:	f001 f834 	bl	2b636 <bt_mesh_proxy_identity_stop>
   2a5ce:	e7f8      	b.n	2a5c2 <bt_mesh_subnet_node_id_set+0x12>
		return STATUS_CANNOT_SET;
   2a5d0:	200f      	movs	r0, #15
   2a5d2:	e7f9      	b.n	2a5c8 <bt_mesh_subnet_node_id_set+0x18>
		return STATUS_INVALID_NETKEY;
   2a5d4:	2004      	movs	r0, #4
   2a5d6:	e7f7      	b.n	2a5c8 <bt_mesh_subnet_node_id_set+0x18>

0002a5d8 <bt_mesh_subnet_node_id_get>:
{
   2a5d8:	b508      	push	{r3, lr}
   2a5da:	f7e4 fd63 	bl	f0a4 <bt_mesh_subnet_get.part.1>
	if (!sub) {
   2a5de:	b118      	cbz	r0, 2a5e8 <bt_mesh_subnet_node_id_get+0x10>
	*node_id = sub->node_id;
   2a5e0:	7fc3      	ldrb	r3, [r0, #31]
	return STATUS_SUCCESS;
   2a5e2:	2000      	movs	r0, #0
   2a5e4:	700b      	strb	r3, [r1, #0]
}
   2a5e6:	bd08      	pop	{r3, pc}
		*node_id = 0x00;
   2a5e8:	4603      	mov	r3, r0
		return STATUS_INVALID_NETKEY;
   2a5ea:	2004      	movs	r0, #4
   2a5ec:	e7fa      	b.n	2a5e4 <bt_mesh_subnet_node_id_get+0xc>

0002a5ee <bt_mesh_subnet_get>:
	for (int i = 0; i < ARRAY_SIZE(subnets); i++) {
   2a5ee:	f7e4 bd59 	b.w	f0a4 <bt_mesh_subnet_get.part.1>

0002a5f2 <app_key_del>:
{
   2a5f2:	b510      	push	{r4, lr}
		update_app_key_settings(app->app_idx, false);
   2a5f4:	2100      	movs	r1, #0
{
   2a5f6:	4604      	mov	r4, r0
		update_app_key_settings(app->app_idx, false);
   2a5f8:	8840      	ldrh	r0, [r0, #2]
   2a5fa:	f7e5 f80f 	bl	f61c <update_app_key_settings>
	app_key_evt(app, BT_MESH_KEY_DELETED);
   2a5fe:	4620      	mov	r0, r4
   2a600:	2101      	movs	r1, #1
   2a602:	f7e4 ffa1 	bl	f548 <app_key_evt>
	app->net_idx = BT_MESH_KEY_UNUSED;
   2a606:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2a60a:	8023      	strh	r3, [r4, #0]
	app->app_idx = BT_MESH_KEY_UNUSED;
   2a60c:	8063      	strh	r3, [r4, #2]
__ssp_bos_icheck3(memset, void *, int)
   2a60e:	1d60      	adds	r0, r4, #5
   2a610:	2222      	movs	r2, #34	; 0x22
   2a612:	2100      	movs	r1, #0
}
   2a614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2a618:	f002 bfef 	b.w	2d5fa <memset>

0002a61c <send_cb_finalize>:
{
   2a61c:	b570      	push	{r4, r5, r6, lr}
   2a61e:	460d      	mov	r5, r1
	if (!cb) {
   2a620:	4604      	mov	r4, r0
   2a622:	b160      	cbz	r0, 2a63e <send_cb_finalize+0x22>
	if (cb->start) {
   2a624:	6803      	ldr	r3, [r0, #0]
   2a626:	b11b      	cbz	r3, 2a630 <send_cb_finalize+0x14>
		cb->start(0, 0, cb_data);
   2a628:	460a      	mov	r2, r1
   2a62a:	2100      	movs	r1, #0
   2a62c:	4608      	mov	r0, r1
   2a62e:	4798      	blx	r3
	if (cb->end) {
   2a630:	6863      	ldr	r3, [r4, #4]
   2a632:	b123      	cbz	r3, 2a63e <send_cb_finalize+0x22>
		cb->end(0, cb_data);
   2a634:	4629      	mov	r1, r5
   2a636:	2000      	movs	r0, #0
}
   2a638:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		cb->end(0, cb_data);
   2a63c:	4718      	bx	r3
}
   2a63e:	bd70      	pop	{r4, r5, r6, pc}

0002a640 <seg_tx_buf_build>:
{
   2a640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t len = MIN(seg_len(tx->ctl), tx->len - (seg_len(tx->ctl) * seg_o));
   2a644:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
	uint16_t seq_zero = tx->seq_auth & TRANS_SEQ_ZERO_MASK;
   2a648:	f8b0 8030 	ldrh.w	r8, [r0, #48]	; 0x30
		return BT_MESH_APP_SEG_SDU_MAX;
   2a64c:	f013 0f02 	tst.w	r3, #2
	uint8_t len = MIN(seg_len(tx->ctl), tx->len - (seg_len(tx->ctl) * seg_o));
   2a650:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
		return BT_MESH_APP_SEG_SDU_MAX;
   2a652:	bf14      	ite	ne
   2a654:	2608      	movne	r6, #8
   2a656:	260c      	moveq	r6, #12
	uint8_t len = MIN(seg_len(tx->ctl), tx->len - (seg_len(tx->ctl) * seg_o));
   2a658:	fb06 3311 	mls	r3, r6, r1, r3
{
   2a65c:	4604      	mov	r4, r0
	uint8_t len = MIN(seg_len(tx->ctl), tx->len - (seg_len(tx->ctl) * seg_o));
   2a65e:	429e      	cmp	r6, r3
{
   2a660:	460f      	mov	r7, r1
	net_buf_simple_add_u8(buf, tx->hdr);
   2a662:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
   2a666:	4610      	mov	r0, r2
{
   2a668:	4615      	mov	r5, r2
	uint8_t len = MIN(seg_len(tx->ctl), tx->len - (seg_len(tx->ctl) * seg_o));
   2a66a:	bfa8      	it	ge
   2a66c:	b2de      	uxtbge	r6, r3
	net_buf_simple_add_u8(buf, tx->hdr);
   2a66e:	f002 f9c4 	bl	2c9fa <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, (tx->aszmic << 7) | seq_zero >> 6);
   2a672:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
	uint16_t seq_zero = tx->seq_auth & TRANS_SEQ_ZERO_MASK;
   2a676:	f3c8 080c 	ubfx	r8, r8, #0, #13
	net_buf_simple_add_u8(buf, (tx->aszmic << 7) | seq_zero >> 6);
   2a67a:	f3c3 0380 	ubfx	r3, r3, #2, #1
   2a67e:	ea4f 1198 	mov.w	r1, r8, lsr #6
   2a682:	ea41 11c3 	orr.w	r1, r1, r3, lsl #7
   2a686:	4628      	mov	r0, r5
   2a688:	f002 f9b7 	bl	2c9fa <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, (((seq_zero & 0x3f) << 2) | (seg_o >> 3)));
   2a68c:	08f9      	lsrs	r1, r7, #3
   2a68e:	ea41 0188 	orr.w	r1, r1, r8, lsl #2
   2a692:	b2c9      	uxtb	r1, r1
   2a694:	4628      	mov	r0, r5
   2a696:	f002 f9b0 	bl	2c9fa <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, ((seg_o & 0x07) << 5) | tx->seg_n);
   2a69a:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
	net_buf_simple_add_mem(buf, tx->seg[seg_o], len);
   2a69e:	eb04 0487 	add.w	r4, r4, r7, lsl #2
	net_buf_simple_add_u8(buf, ((seg_o & 0x07) << 5) | tx->seg_n);
   2a6a2:	ea41 1147 	orr.w	r1, r1, r7, lsl #5
   2a6a6:	b2c9      	uxtb	r1, r1
   2a6a8:	4628      	mov	r0, r5
   2a6aa:	f002 f9a6 	bl	2c9fa <net_buf_simple_add_u8>
	net_buf_simple_add_mem(buf, tx->seg[seg_o], len);
   2a6ae:	4632      	mov	r2, r6
   2a6b0:	6861      	ldr	r1, [r4, #4]
   2a6b2:	4628      	mov	r0, r5
}
   2a6b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	net_buf_simple_add_mem(buf, tx->seg[seg_o], len);
   2a6b8:	f002 b993 	b.w	2c9e2 <net_buf_simple_add_mem>

0002a6bc <ack_timeout>:
{
   2a6bc:	b538      	push	{r3, r4, r5, lr}
	if (rx->ttl == BT_MESH_TTL_DEFAULT) {
   2a6be:	f890 4020 	ldrb.w	r4, [r0, #32]
   2a6c2:	2cff      	cmp	r4, #255	; 0xff
{
   2a6c4:	4605      	mov	r5, r0
	if (rx->ttl == BT_MESH_TTL_DEFAULT) {
   2a6c6:	d102      	bne.n	2a6ce <ack_timeout+0x12>
		ttl = bt_mesh_default_ttl_get();
   2a6c8:	f7e3 f954 	bl	d974 <bt_mesh_default_ttl_get>
   2a6cc:	4604      	mov	r4, r0
	to += ((rx->seg_n + 1) - popcount(rx->block)) * 100U;
   2a6ce:	6a68      	ldr	r0, [r5, #36]	; 0x24
   2a6d0:	f7d7 f9c4 	bl	1a5c <__popcountsi2>
   2a6d4:	7feb      	ldrb	r3, [r5, #31]
   2a6d6:	f003 031f 	and.w	r3, r3, #31
   2a6da:	1a18      	subs	r0, r3, r0
   2a6dc:	2364      	movs	r3, #100	; 0x64
   2a6de:	fb00 3303 	mla	r3, r0, r3, r3
	to = 150 + (ttl * 50U);
   2a6e2:	2296      	movs	r2, #150	; 0x96
   2a6e4:	2032      	movs	r0, #50	; 0x32
   2a6e6:	fb10 2004 	smlabb	r0, r0, r4, r2
	to += ((rx->seg_n + 1) - popcount(rx->block)) * 100U;
   2a6ea:	4418      	add	r0, r3
}
   2a6ec:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
   2a6f0:	bfb8      	it	lt
   2a6f2:	f44f 70c8 	movlt.w	r0, #400	; 0x190
   2a6f6:	bd38      	pop	{r3, r4, r5, pc}

0002a6f8 <seg_rx_assemble>:
{
   2a6f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf->data = buf->__buf;
   2a6fc:	688b      	ldr	r3, [r1, #8]
   2a6fe:	600b      	str	r3, [r1, #0]
	buf->len  = 0U;
   2a700:	2400      	movs	r4, #0
   2a702:	4606      	mov	r6, r0
   2a704:	460d      	mov	r5, r1
   2a706:	4617      	mov	r7, r2
   2a708:	808c      	strh	r4, [r1, #4]
	for (i = 0; i <= rx->seg_n; i++) {
   2a70a:	f100 0804 	add.w	r8, r0, #4
				       MIN(seg_len(rx->ctl),
   2a70e:	7ff3      	ldrb	r3, [r6, #31]
		net_buf_simple_add_mem(buf, rx->seg[i],
   2a710:	f858 1b04 	ldr.w	r1, [r8], #4
		return BT_MESH_APP_SEG_SDU_MAX;
   2a714:	f013 0f20 	tst.w	r3, #32
				       MIN(seg_len(rx->ctl),
   2a718:	8bb3      	ldrh	r3, [r6, #28]
		return BT_MESH_APP_SEG_SDU_MAX;
   2a71a:	bf14      	ite	ne
   2a71c:	2208      	movne	r2, #8
   2a71e:	220c      	moveq	r2, #12
				       MIN(seg_len(rx->ctl),
   2a720:	fb04 3312 	mls	r3, r4, r2, r3
		net_buf_simple_add_mem(buf, rx->seg[i],
   2a724:	429a      	cmp	r2, r3
   2a726:	bfa8      	it	ge
   2a728:	461a      	movge	r2, r3
   2a72a:	4628      	mov	r0, r5
   2a72c:	f002 f959 	bl	2c9e2 <net_buf_simple_add_mem>
	for (i = 0; i <= rx->seg_n; i++) {
   2a730:	7ff3      	ldrb	r3, [r6, #31]
   2a732:	3401      	adds	r4, #1
   2a734:	461a      	mov	r2, r3
   2a736:	f003 031f 	and.w	r3, r3, #31
   2a73a:	42a3      	cmp	r3, r4
   2a73c:	dae7      	bge.n	2a70e <seg_rx_assemble+0x16>
	if (!rx->ctl) {
   2a73e:	0693      	lsls	r3, r2, #26
   2a740:	d407      	bmi.n	2a752 <seg_rx_assemble+0x5a>
		buf->len -= APP_MIC_LEN(aszmic);
   2a742:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   2a746:	2f00      	cmp	r7, #0
   2a748:	bf14      	ite	ne
   2a74a:	2208      	movne	r2, #8
   2a74c:	2204      	moveq	r2, #4
   2a74e:	1a9b      	subs	r3, r3, r2
   2a750:	80ab      	strh	r3, [r5, #4]
}
   2a752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002a756 <sdu_try_decrypt>:
	if (ctx->seg) {
   2a756:	69d0      	ldr	r0, [r2, #28]
{
   2a758:	b570      	push	{r4, r5, r6, lr}
   2a75a:	460d      	mov	r5, r1
   2a75c:	4614      	mov	r4, r2
	if (ctx->seg) {
   2a75e:	b118      	cbz	r0, 2a768 <sdu_try_decrypt+0x12>
		seg_rx_assemble(ctx->seg, ctx->buf, ctx->crypto.aszmic);
   2a760:	7852      	ldrb	r2, [r2, #1]
   2a762:	6961      	ldr	r1, [r4, #20]
   2a764:	f7ff ffc8 	bl	2a6f8 <seg_rx_assemble>
	net_buf_simple_reset(ctx->sdu);
   2a768:	69a3      	ldr	r3, [r4, #24]
   2a76a:	2200      	movs	r2, #0
   2a76c:	809a      	strh	r2, [r3, #4]
	buf->data = buf->__buf;
   2a76e:	689a      	ldr	r2, [r3, #8]
   2a770:	601a      	str	r2, [r3, #0]
	return bt_mesh_app_decrypt(key, &ctx->crypto, ctx->buf, ctx->sdu);
   2a772:	4621      	mov	r1, r4
   2a774:	6962      	ldr	r2, [r4, #20]
   2a776:	4628      	mov	r0, r5
}
   2a778:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_mesh_app_decrypt(key, &ctx->crypto, ctx->buf, ctx->sdu);
   2a77c:	f000 ba3c 	b.w	2abf8 <bt_mesh_app_decrypt>

0002a780 <schedule_retransmit>:
{
   2a780:	b570      	push	{r4, r5, r6, lr}
	if (!tx->nack_count) {
   2a782:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
   2a786:	2b00      	cmp	r3, #0
   2a788:	d039      	beq.n	2a7fe <schedule_retransmit+0x7e>
	if (--tx->seg_pending || tx->sending) {
   2a78a:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
   2a78e:	3b01      	subs	r3, #1
   2a790:	b2db      	uxtb	r3, r3
   2a792:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
   2a796:	bb93      	cbnz	r3, 2a7fe <schedule_retransmit+0x7e>
   2a798:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
   2a79c:	06db      	lsls	r3, r3, #27
   2a79e:	d42e      	bmi.n	2a7fe <schedule_retransmit+0x7e>
	k_delayed_work_submit(&tx->retransmit,
   2a7a0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
   2a7a4:	f100 0450 	add.w	r4, r0, #80	; 0x50
   2a7a8:	b133      	cbz	r3, 2a7b8 <schedule_retransmit+0x38>
   2a7aa:	2200      	movs	r2, #0
   2a7ac:	2300      	movs	r3, #0
   2a7ae:	4620      	mov	r0, r4
}
   2a7b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_delayed_work_submit(&tx->retransmit,
   2a7b4:	f7e5 b9aa 	b.w	fb0c <k_delayed_work_submit>
					  K_MSEC(SEG_RETRANSMIT_TIMEOUT(tx)));
   2a7b8:	f9b0 303a 	ldrsh.w	r3, [r0, #58]	; 0x3a
   2a7bc:	2b00      	cmp	r3, #0
   2a7be:	bfc1      	itttt	gt
   2a7c0:	f890 1044 	ldrbgt.w	r1, [r0, #68]	; 0x44
   2a7c4:	2232      	movgt	r2, #50	; 0x32
   2a7c6:	f44f 73c8 	movgt.w	r3, #400	; 0x190
   2a7ca:	fb12 3201 	smlabbgt	r2, r2, r1, r3
   2a7ce:	bfce      	itee	gt
   2a7d0:	17d3      	asrgt	r3, r2, #31
   2a7d2:	2232      	movle	r2, #50	; 0x32
   2a7d4:	2300      	movle	r3, #0
   2a7d6:	03d9      	lsls	r1, r3, #15
   2a7d8:	03d0      	lsls	r0, r2, #15
   2a7da:	f240 35e7 	movw	r5, #999	; 0x3e7
   2a7de:	1940      	adds	r0, r0, r5
   2a7e0:	ea41 4152 	orr.w	r1, r1, r2, lsr #17
   2a7e4:	f04f 0500 	mov.w	r5, #0
   2a7e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2a7ec:	f04f 0300 	mov.w	r3, #0
   2a7f0:	eb45 0101 	adc.w	r1, r5, r1
   2a7f4:	f7d7 f91a 	bl	1a2c <__aeabi_uldivmod>
   2a7f8:	4602      	mov	r2, r0
   2a7fa:	460b      	mov	r3, r1
   2a7fc:	e7d7      	b.n	2a7ae <schedule_retransmit+0x2e>
}
   2a7fe:	bd70      	pop	{r4, r5, r6, pc}

0002a800 <seg_sent>:
	schedule_retransmit(tx);
   2a800:	4608      	mov	r0, r1
   2a802:	f7ff bfbd 	b.w	2a780 <schedule_retransmit>

0002a806 <seg_send_start>:
{
   2a806:	b538      	push	{r3, r4, r5, lr}
	if (!tx->started && tx->cb && tx->cb->start) {
   2a808:	f892 3046 	ldrb.w	r3, [r2, #70]	; 0x46
   2a80c:	071b      	lsls	r3, r3, #28
{
   2a80e:	460d      	mov	r5, r1
   2a810:	4614      	mov	r4, r2
	if (!tx->started && tx->cb && tx->cb->start) {
   2a812:	d40b      	bmi.n	2a82c <seg_send_start+0x26>
   2a814:	6c93      	ldr	r3, [r2, #72]	; 0x48
   2a816:	b14b      	cbz	r3, 2a82c <seg_send_start+0x26>
   2a818:	681b      	ldr	r3, [r3, #0]
   2a81a:	b13b      	cbz	r3, 2a82c <seg_send_start+0x26>
		tx->cb->start(duration, err, tx->cb_data);
   2a81c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
   2a81e:	4798      	blx	r3
		tx->started = 1U;
   2a820:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   2a824:	f043 0308 	orr.w	r3, r3, #8
   2a828:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	if (err) {
   2a82c:	b125      	cbz	r5, 2a838 <seg_send_start+0x32>
		schedule_retransmit(tx);
   2a82e:	4620      	mov	r0, r4
}
   2a830:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		schedule_retransmit(tx);
   2a834:	f7ff bfa4 	b.w	2a780 <schedule_retransmit>
}
   2a838:	bd38      	pop	{r3, r4, r5, pc}

0002a83a <seg_retransmit>:
	seg_tx_send_unacked(tx);
   2a83a:	3850      	subs	r0, #80	; 0x50
   2a83c:	f7e5 ba86 	b.w	fd4c <seg_tx_send_unacked>

0002a840 <send_ack>:
{
   2a840:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a842:	b08b      	sub	sp, #44	; 0x2c
	struct bt_mesh_msg_ctx ctx = {
   2a844:	8b87      	ldrh	r7, [r0, #28]
{
   2a846:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
	struct bt_mesh_msg_ctx ctx = {
   2a84a:	f8ad 7010 	strh.w	r7, [sp, #16]
{
   2a84e:	460e      	mov	r6, r1
	struct bt_mesh_msg_ctx ctx = {
   2a850:	2100      	movs	r1, #0
   2a852:	f8ad 101a 	strh.w	r1, [sp, #26]
   2a856:	f64f 77ff 	movw	r7, #65535	; 0xffff
   2a85a:	f88d 301b 	strb.w	r3, [sp, #27]
	struct bt_mesh_net_tx tx = {
   2a85e:	ab04      	add	r3, sp, #16
{
   2a860:	9d11      	ldr	r5, [sp, #68]	; 0x44
	struct bt_mesh_msg_ctx ctx = {
   2a862:	f8cd 1016 	str.w	r1, [sp, #22]
   2a866:	f8ad 7012 	strh.w	r7, [sp, #18]
   2a86a:	f8ad 2014 	strh.w	r2, [sp, #20]
	struct bt_mesh_net_tx tx = {
   2a86e:	9109      	str	r1, [sp, #36]	; 0x24
   2a870:	9007      	str	r0, [sp, #28]
   2a872:	9308      	str	r3, [sp, #32]
   2a874:	b33c      	cbz	r4, 2a8c6 <send_ack+0x86>
		.src = obo ? bt_mesh_primary_addr() : src,
   2a876:	f7e7 fba3 	bl	11fc0 <bt_mesh_primary_addr>
	struct bt_mesh_net_tx tx = {
   2a87a:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
		.xmit = bt_mesh_net_transmit_get(),
   2a87e:	f7e3 f893 	bl	d9a8 <bt_mesh_net_transmit_get>
	if (!BT_MESH_ADDR_IS_UNICAST(src)) {
   2a882:	b236      	sxth	r6, r6
   2a884:	2e00      	cmp	r6, #0
	struct bt_mesh_net_tx tx = {
   2a886:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
	if (!BT_MESH_ADDR_IS_UNICAST(src)) {
   2a88a:	dd1e      	ble.n	2a8ca <send_ack+0x8a>
	uint16_t seq_zero = *seq_auth & TRANS_SEQ_ZERO_MASK;
   2a88c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2a88e:	881b      	ldrh	r3, [r3, #0]
	sys_put_be16(((seq_zero << 2) & 0x7ffc) | (obo << 15), buf);
   2a890:	03e4      	lsls	r4, r4, #15
   2a892:	f3c3 030c 	ubfx	r3, r3, #0, #13
   2a896:	ea44 0483 	orr.w	r4, r4, r3, lsl #2
	sys_put_be16(val >> 16, dst);
   2a89a:	0c2b      	lsrs	r3, r5, #16
	dst[0] = val >> 8;
   2a89c:	0a1a      	lsrs	r2, r3, #8
	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_ACK, buf, sizeof(buf),
   2a89e:	2100      	movs	r1, #0
   2a8a0:	ba64      	rev16	r4, r4
   2a8a2:	f88d 200a 	strb.w	r2, [sp, #10]
	dst[1] = val;
   2a8a6:	f88d 300b 	strb.w	r3, [sp, #11]
	dst[0] = val >> 8;
   2a8aa:	ba6d      	rev16	r5, r5
   2a8ac:	e9cd 1100 	strd	r1, r1, [sp]
   2a8b0:	2306      	movs	r3, #6
   2a8b2:	aa02      	add	r2, sp, #8
   2a8b4:	a807      	add	r0, sp, #28
   2a8b6:	f8ad 4008 	strh.w	r4, [sp, #8]
   2a8ba:	f8ad 500c 	strh.w	r5, [sp, #12]
   2a8be:	f7e5 fd95 	bl	103ec <bt_mesh_ctl_send>
}
   2a8c2:	b00b      	add	sp, #44	; 0x2c
   2a8c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct bt_mesh_net_tx tx = {
   2a8c6:	4630      	mov	r0, r6
   2a8c8:	e7d7      	b.n	2a87a <send_ack+0x3a>
		return 0;
   2a8ca:	2000      	movs	r0, #0
   2a8cc:	e7f9      	b.n	2a8c2 <send_ack+0x82>

0002a8ce <bt_mesh_rpl_update>:
	rpl->src = rx->ctx.addr;
   2a8ce:	890b      	ldrh	r3, [r1, #8]
   2a8d0:	8003      	strh	r3, [r0, #0]
	rpl->seq = rx->seq;
   2a8d2:	690b      	ldr	r3, [r1, #16]
   2a8d4:	6043      	str	r3, [r0, #4]
	rpl->old_iv = rx->old_iv;
   2a8d6:	7d0b      	ldrb	r3, [r1, #20]
   2a8d8:	f3c3 0300 	ubfx	r3, r3, #0, #1
   2a8dc:	7083      	strb	r3, [r0, #2]
	entry->store = true;
   2a8de:	2301      	movs	r3, #1
   2a8e0:	70c3      	strb	r3, [r0, #3]
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_RPL_PENDING);
   2a8e2:	2000      	movs	r0, #0
   2a8e4:	f7e9 beca 	b.w	1467c <bt_mesh_settings_store_schedule>

0002a8e8 <bt_mesh_rpl_clear>:
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_RPL_PENDING);
   2a8e8:	2000      	movs	r0, #0
   2a8ea:	f7e9 bec7 	b.w	1467c <bt_mesh_settings_store_schedule>

0002a8ee <sub_end>:
	notify_sub_end();
   2a8ee:	f7e6 bc27 	b.w	11140 <notify_sub_end>

0002a8f2 <hb_publish_start_cb>:
	if (err) {
   2a8f2:	4608      	mov	r0, r1
   2a8f4:	b111      	cbz	r1, 2a8fc <hb_publish_start_cb+0xa>
		hb_publish_end_cb(err, cb_data);
   2a8f6:	4611      	mov	r1, r2
   2a8f8:	f7e6 bc4e 	b.w	11198 <hb_publish_end_cb>
}
   2a8fc:	4770      	bx	lr

0002a8fe <sys_put_be32>:
	sys_put_be16(val >> 16, dst);
   2a8fe:	0c03      	lsrs	r3, r0, #16
	dst[0] = val >> 8;
   2a900:	0a1a      	lsrs	r2, r3, #8
	dst[1] = val;
   2a902:	704b      	strb	r3, [r1, #1]
	dst[0] = val >> 8;
   2a904:	f3c0 2307 	ubfx	r3, r0, #8, #8
   2a908:	700a      	strb	r2, [r1, #0]
   2a90a:	708b      	strb	r3, [r1, #2]
	dst[1] = val;
   2a90c:	70c8      	strb	r0, [r1, #3]
}
   2a90e:	4770      	bx	lr

0002a910 <create_app_nonce>:
{
   2a910:	b538      	push	{r3, r4, r5, lr}
	if (ctx->dev_key) {
   2a912:	780b      	ldrb	r3, [r1, #0]
{
   2a914:	460c      	mov	r4, r1
	if (ctx->dev_key) {
   2a916:	2b00      	cmp	r3, #0
   2a918:	4601      	mov	r1, r0
		nonce[0] = 0x01;
   2a91a:	bf14      	ite	ne
   2a91c:	2302      	movne	r3, #2
   2a91e:	2301      	moveq	r3, #1
   2a920:	f801 3b01 	strb.w	r3, [r1], #1
{
   2a924:	4605      	mov	r5, r0
	sys_put_be32((ctx->seq_num | ((uint32_t)ctx->aszmic << 31)), &nonce[1]);
   2a926:	68a3      	ldr	r3, [r4, #8]
   2a928:	7860      	ldrb	r0, [r4, #1]
   2a92a:	ea43 70c0 	orr.w	r0, r3, r0, lsl #31
   2a92e:	f7ff ffe6 	bl	2a8fe <sys_put_be32>
	sys_put_be16(ctx->src, &nonce[5]);
   2a932:	8863      	ldrh	r3, [r4, #2]
	dst[1] = val;
   2a934:	71ab      	strb	r3, [r5, #6]
	dst[0] = val >> 8;
   2a936:	0a1a      	lsrs	r2, r3, #8
   2a938:	716a      	strb	r2, [r5, #5]
	sys_put_be16(ctx->dst, &nonce[7]);
   2a93a:	88a3      	ldrh	r3, [r4, #4]
	dst[1] = val;
   2a93c:	722b      	strb	r3, [r5, #8]
	dst[0] = val >> 8;
   2a93e:	0a1a      	lsrs	r2, r3, #8
   2a940:	71ea      	strb	r2, [r5, #7]
	sys_put_be32(ctx->iv_index, &nonce[9]);
   2a942:	f105 0109 	add.w	r1, r5, #9
   2a946:	68e0      	ldr	r0, [r4, #12]
}
   2a948:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	sys_put_be32(ctx->iv_index, &nonce[9]);
   2a94c:	f7ff bfd7 	b.w	2a8fe <sys_put_be32>

0002a950 <bt_mesh_aes_cmac>:
{
   2a950:	b570      	push	{r4, r5, r6, lr}
   2a952:	b0c2      	sub	sp, #264	; 0x108
   2a954:	460d      	mov	r5, r1
   2a956:	4614      	mov	r4, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   2a958:	4601      	mov	r1, r0
   2a95a:	aa16      	add	r2, sp, #88	; 0x58
   2a95c:	4668      	mov	r0, sp
{
   2a95e:	461e      	mov	r6, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   2a960:	f7fe f88b 	bl	28a7a <tc_cmac_setup>
   2a964:	b130      	cbz	r0, 2a974 <bt_mesh_aes_cmac+0x24>
   2a966:	3508      	adds	r5, #8
	for (; sg_len; sg_len--, sg++) {
   2a968:	b944      	cbnz	r4, 2a97c <bt_mesh_aes_cmac+0x2c>
	if (tc_cmac_final(mac, &state) == TC_CRYPTO_FAIL) {
   2a96a:	4669      	mov	r1, sp
   2a96c:	4630      	mov	r0, r6
   2a96e:	f7fe f919 	bl	28ba4 <tc_cmac_final>
   2a972:	b968      	cbnz	r0, 2a990 <bt_mesh_aes_cmac+0x40>
		return -EIO;
   2a974:	f06f 0004 	mvn.w	r0, #4
}
   2a978:	b042      	add	sp, #264	; 0x108
   2a97a:	bd70      	pop	{r4, r5, r6, pc}
		if (tc_cmac_update(&state, sg->data,
   2a97c:	e955 1202 	ldrd	r1, r2, [r5, #-8]
   2a980:	4668      	mov	r0, sp
   2a982:	f7fe f8a5 	bl	28ad0 <tc_cmac_update>
   2a986:	3508      	adds	r5, #8
   2a988:	2800      	cmp	r0, #0
   2a98a:	d0f3      	beq.n	2a974 <bt_mesh_aes_cmac+0x24>
	for (; sg_len; sg_len--, sg++) {
   2a98c:	3c01      	subs	r4, #1
   2a98e:	e7eb      	b.n	2a968 <bt_mesh_aes_cmac+0x18>
	return 0;
   2a990:	4620      	mov	r0, r4
   2a992:	e7f1      	b.n	2a978 <bt_mesh_aes_cmac+0x28>

0002a994 <bt_mesh_aes_cmac_one>:
{
   2a994:	b507      	push	{r0, r1, r2, lr}
	struct bt_mesh_sg sg = { m, len };
   2a996:	e9cd 1200 	strd	r1, r2, [sp]
	return bt_mesh_aes_cmac(key, &sg, 1, mac);
   2a99a:	2201      	movs	r2, #1
   2a99c:	4669      	mov	r1, sp
   2a99e:	f7ff ffd7 	bl	2a950 <bt_mesh_aes_cmac>
}
   2a9a2:	b003      	add	sp, #12
   2a9a4:	f85d fb04 	ldr.w	pc, [sp], #4

0002a9a8 <bt_mesh_s1>:
{
   2a9a8:	b530      	push	{r4, r5, lr}
   2a9aa:	b085      	sub	sp, #20
   2a9ac:	4604      	mov	r4, r0
   2a9ae:	460d      	mov	r5, r1
	const uint8_t zero[16] = { 0 };
   2a9b0:	2210      	movs	r2, #16
   2a9b2:	2100      	movs	r1, #0
   2a9b4:	4668      	mov	r0, sp
   2a9b6:	f002 fe20 	bl	2d5fa <memset>
	return bt_mesh_aes_cmac_one(zero, m, strlen(m), salt);
   2a9ba:	4620      	mov	r0, r4
   2a9bc:	f7d7 fa74 	bl	1ea8 <strlen>
   2a9c0:	462b      	mov	r3, r5
   2a9c2:	4602      	mov	r2, r0
   2a9c4:	4621      	mov	r1, r4
   2a9c6:	4668      	mov	r0, sp
   2a9c8:	f7ff ffe4 	bl	2a994 <bt_mesh_aes_cmac_one>
}
   2a9cc:	3000      	adds	r0, #0
   2a9ce:	bf18      	it	ne
   2a9d0:	2001      	movne	r0, #1
   2a9d2:	b005      	add	sp, #20
   2a9d4:	bd30      	pop	{r4, r5, pc}

0002a9d6 <bt_mesh_k1>:
{
   2a9d6:	b570      	push	{r4, r5, r6, lr}
   2a9d8:	9d04      	ldr	r5, [sp, #16]
   2a9da:	4616      	mov	r6, r2
   2a9dc:	461c      	mov	r4, r3
	err = bt_mesh_aes_cmac_one(salt, ikm, ikm_len, okm);
   2a9de:	460a      	mov	r2, r1
   2a9e0:	462b      	mov	r3, r5
   2a9e2:	4601      	mov	r1, r0
   2a9e4:	4630      	mov	r0, r6
   2a9e6:	f7ff ffd5 	bl	2a994 <bt_mesh_aes_cmac_one>
	if (err < 0) {
   2a9ea:	2800      	cmp	r0, #0
   2a9ec:	db0a      	blt.n	2aa04 <bt_mesh_k1+0x2e>
	return bt_mesh_aes_cmac_one(okm, info, strlen(info), okm);
   2a9ee:	4620      	mov	r0, r4
   2a9f0:	f7d7 fa5a 	bl	1ea8 <strlen>
   2a9f4:	462b      	mov	r3, r5
   2a9f6:	4602      	mov	r2, r0
   2a9f8:	4621      	mov	r1, r4
   2a9fa:	4628      	mov	r0, r5
}
   2a9fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_mesh_aes_cmac_one(okm, info, strlen(info), okm);
   2aa00:	f7ff bfc8 	b.w	2a994 <bt_mesh_aes_cmac_one>
}
   2aa04:	bd70      	pop	{r4, r5, r6, pc}

0002aa06 <bt_mesh_net_obfuscate>:
{
   2aa06:	b570      	push	{r4, r5, r6, lr}
   2aa08:	b088      	sub	sp, #32
   2aa0a:	4604      	mov	r4, r0
   2aa0c:	460e      	mov	r6, r1
   2aa0e:	4615      	mov	r5, r2
	uint8_t priv_rand[16] = { 0x00, 0x00, 0x00, 0x00, 0x00, };
   2aa10:	2100      	movs	r1, #0
   2aa12:	2210      	movs	r2, #16
   2aa14:	4668      	mov	r0, sp
   2aa16:	f002 fdf0 	bl	2d5fa <memset>
	sys_put_be32(iv_index, &priv_rand[5]);
   2aa1a:	f10d 0105 	add.w	r1, sp, #5
   2aa1e:	4630      	mov	r0, r6
   2aa20:	f7ff ff6d 	bl	2a8fe <sys_put_be32>
	memcpy(&priv_rand[9], &pdu[7], 7);
   2aa24:	4623      	mov	r3, r4
	err = bt_encrypt_be(privacy_key, priv_rand, tmp);
   2aa26:	4669      	mov	r1, sp
	memcpy(&priv_rand[9], &pdu[7], 7);
   2aa28:	f853 2f07 	ldr.w	r2, [r3, #7]!
   2aa2c:	f8cd 2009 	str.w	r2, [sp, #9]
   2aa30:	889a      	ldrh	r2, [r3, #4]
   2aa32:	f8ad 200d 	strh.w	r2, [sp, #13]
   2aa36:	799b      	ldrb	r3, [r3, #6]
   2aa38:	f88d 300f 	strb.w	r3, [sp, #15]
	err = bt_encrypt_be(privacy_key, priv_rand, tmp);
   2aa3c:	aa04      	add	r2, sp, #16
   2aa3e:	4628      	mov	r0, r5
   2aa40:	f001 f977 	bl	2bd32 <bt_encrypt_be>
	if (err) {
   2aa44:	b958      	cbnz	r0, 2aa5e <bt_mesh_net_obfuscate+0x58>
   2aa46:	4623      	mov	r3, r4
   2aa48:	aa04      	add	r2, sp, #16
   2aa4a:	3406      	adds	r4, #6
		pdu[1 + i] ^= tmp[i];
   2aa4c:	f813 5f01 	ldrb.w	r5, [r3, #1]!
   2aa50:	f812 1b01 	ldrb.w	r1, [r2], #1
	for (i = 0; i < 6; i++) {
   2aa54:	42a3      	cmp	r3, r4
		pdu[1 + i] ^= tmp[i];
   2aa56:	ea81 0105 	eor.w	r1, r1, r5
   2aa5a:	7019      	strb	r1, [r3, #0]
	for (i = 0; i < 6; i++) {
   2aa5c:	d1f6      	bne.n	2aa4c <bt_mesh_net_obfuscate+0x46>
}
   2aa5e:	b008      	add	sp, #32
   2aa60:	bd70      	pop	{r4, r5, r6, pc}

0002aa62 <bt_mesh_net_encrypt>:
{
   2aa62:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2aa66:	460c      	mov	r4, r1
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   2aa68:	6809      	ldr	r1, [r1, #0]
   2aa6a:	f891 9001 	ldrb.w	r9, [r1, #1]
   2aa6e:	f891 8002 	ldrb.w	r8, [r1, #2]
   2aa72:	f891 e003 	ldrb.w	lr, [r1, #3]
   2aa76:	f891 c004 	ldrb.w	ip, [r1, #4]
   2aa7a:	794f      	ldrb	r7, [r1, #5]
   2aa7c:	f019 0f80 	tst.w	r9, #128	; 0x80
{
   2aa80:	4605      	mov	r5, r0
   2aa82:	b089      	sub	sp, #36	; 0x24
   2aa84:	4610      	mov	r0, r2
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   2aa86:	bf14      	ite	ne
   2aa88:	2608      	movne	r6, #8
   2aa8a:	2604      	moveq	r6, #4
	if (IS_ENABLED(CONFIG_BT_MESH_PROXY) && proxy) {
   2aa8c:	798a      	ldrb	r2, [r1, #6]
   2aa8e:	b363      	cbz	r3, 2aaea <bt_mesh_net_encrypt+0x88>
	nonce[0] = 0x03;
   2aa90:	2303      	movs	r3, #3
   2aa92:	f8ad 3010 	strh.w	r3, [sp, #16]
	nonce[2] = pdu[2];
   2aa96:	f88d 8012 	strb.w	r8, [sp, #18]
	nonce[3] = pdu[3];
   2aa9a:	f88d e013 	strb.w	lr, [sp, #19]
	nonce[4] = pdu[4];
   2aa9e:	f88d c014 	strb.w	ip, [sp, #20]
	nonce[5] = pdu[5];
   2aaa2:	f88d 7015 	strb.w	r7, [sp, #21]
	nonce[6] = pdu[6];
   2aaa6:	f88d 2016 	strb.w	r2, [sp, #22]
	nonce[7] = 0U;
   2aaaa:	2300      	movs	r3, #0
	sys_put_be32(iv_index, &nonce[9]);
   2aaac:	f10d 0119 	add.w	r1, sp, #25
	nonce[7] = 0U;
   2aab0:	f88d 3017 	strb.w	r3, [sp, #23]
	nonce[8] = 0U;
   2aab4:	f88d 3018 	strb.w	r3, [sp, #24]
	sys_put_be32(iv_index, &nonce[9]);
   2aab8:	f7ff ff21 	bl	2a8fe <sys_put_be32>
	err = bt_ccm_encrypt(key, nonce, &buf->data[7], buf->len - 7, NULL, 0,
   2aabc:	6822      	ldr	r2, [r4, #0]
   2aabe:	88a3      	ldrh	r3, [r4, #4]
   2aac0:	3207      	adds	r2, #7
   2aac2:	2100      	movs	r1, #0
   2aac4:	e9cd 1100 	strd	r1, r1, [sp]
   2aac8:	4628      	mov	r0, r5
   2aaca:	e9cd 2602 	strd	r2, r6, [sp, #8]
   2aace:	3b07      	subs	r3, #7
   2aad0:	a904      	add	r1, sp, #16
   2aad2:	f7fe fab2 	bl	2903a <bt_ccm_encrypt>
	if (!err) {
   2aad6:	4605      	mov	r5, r0
   2aad8:	b918      	cbnz	r0, 2aae2 <bt_mesh_net_encrypt+0x80>
		net_buf_simple_add(buf, mic_len);
   2aada:	4631      	mov	r1, r6
   2aadc:	4620      	mov	r0, r4
   2aade:	f7f4 fb89 	bl	1f1f4 <net_buf_simple_add>
}
   2aae2:	4628      	mov	r0, r5
   2aae4:	b009      	add	sp, #36	; 0x24
   2aae6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nonce[0] = 0x00;
   2aaea:	f88d 3010 	strb.w	r3, [sp, #16]
	nonce[1] = pdu[1];
   2aaee:	f88d 9011 	strb.w	r9, [sp, #17]
	nonce[2] = pdu[2];
   2aaf2:	f88d 8012 	strb.w	r8, [sp, #18]
	nonce[3] = pdu[3];
   2aaf6:	f88d e013 	strb.w	lr, [sp, #19]
	nonce[4] = pdu[4];
   2aafa:	f88d c014 	strb.w	ip, [sp, #20]
	nonce[5] = pdu[5];
   2aafe:	f88d 7015 	strb.w	r7, [sp, #21]
	nonce[6] = pdu[6];
   2ab02:	f88d 2016 	strb.w	r2, [sp, #22]
   2ab06:	e7d1      	b.n	2aaac <bt_mesh_net_encrypt+0x4a>

0002ab08 <bt_mesh_net_decrypt>:
{
   2ab08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2ab0c:	460e      	mov	r6, r1
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   2ab0e:	6809      	ldr	r1, [r1, #0]
   2ab10:	f891 9001 	ldrb.w	r9, [r1, #1]
   2ab14:	f891 8002 	ldrb.w	r8, [r1, #2]
   2ab18:	f891 e003 	ldrb.w	lr, [r1, #3]
   2ab1c:	f891 c004 	ldrb.w	ip, [r1, #4]
   2ab20:	794f      	ldrb	r7, [r1, #5]
   2ab22:	f019 0f80 	tst.w	r9, #128	; 0x80
{
   2ab26:	4605      	mov	r5, r0
   2ab28:	b089      	sub	sp, #36	; 0x24
   2ab2a:	4610      	mov	r0, r2
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   2ab2c:	bf14      	ite	ne
   2ab2e:	2408      	movne	r4, #8
   2ab30:	2404      	moveq	r4, #4
	if (IS_ENABLED(CONFIG_BT_MESH_PROXY) && proxy) {
   2ab32:	798a      	ldrb	r2, [r1, #6]
   2ab34:	b343      	cbz	r3, 2ab88 <bt_mesh_net_decrypt+0x80>
	nonce[0] = 0x03;
   2ab36:	2303      	movs	r3, #3
   2ab38:	f8ad 3010 	strh.w	r3, [sp, #16]
	nonce[2] = pdu[2];
   2ab3c:	f88d 8012 	strb.w	r8, [sp, #18]
	nonce[3] = pdu[3];
   2ab40:	f88d e013 	strb.w	lr, [sp, #19]
	nonce[4] = pdu[4];
   2ab44:	f88d c014 	strb.w	ip, [sp, #20]
	nonce[5] = pdu[5];
   2ab48:	f88d 7015 	strb.w	r7, [sp, #21]
	nonce[6] = pdu[6];
   2ab4c:	f88d 2016 	strb.w	r2, [sp, #22]
	nonce[7] = 0U;
   2ab50:	2300      	movs	r3, #0
	sys_put_be32(iv_index, &nonce[9]);
   2ab52:	f10d 0119 	add.w	r1, sp, #25
	nonce[7] = 0U;
   2ab56:	f88d 3017 	strb.w	r3, [sp, #23]
	nonce[8] = 0U;
   2ab5a:	f88d 3018 	strb.w	r3, [sp, #24]
	sys_put_be32(iv_index, &nonce[9]);
   2ab5e:	f7ff fece 	bl	2a8fe <sys_put_be32>
	buf->len -= mic_len;
   2ab62:	88b3      	ldrh	r3, [r6, #4]
	return bt_ccm_decrypt(key, nonce, &buf->data[7], buf->len - 7, NULL, 0,
   2ab64:	6832      	ldr	r2, [r6, #0]
	buf->len -= mic_len;
   2ab66:	1b1b      	subs	r3, r3, r4
	return bt_ccm_decrypt(key, nonce, &buf->data[7], buf->len - 7, NULL, 0,
   2ab68:	3207      	adds	r2, #7
	buf->len -= mic_len;
   2ab6a:	b29b      	uxth	r3, r3
	return bt_ccm_decrypt(key, nonce, &buf->data[7], buf->len - 7, NULL, 0,
   2ab6c:	2100      	movs	r1, #0
	buf->len -= mic_len;
   2ab6e:	80b3      	strh	r3, [r6, #4]
	return bt_ccm_decrypt(key, nonce, &buf->data[7], buf->len - 7, NULL, 0,
   2ab70:	e9cd 1100 	strd	r1, r1, [sp]
   2ab74:	e9cd 2402 	strd	r2, r4, [sp, #8]
   2ab78:	3b07      	subs	r3, #7
   2ab7a:	a904      	add	r1, sp, #16
   2ab7c:	4628      	mov	r0, r5
   2ab7e:	f7fe fa2e 	bl	28fde <bt_ccm_decrypt>
}
   2ab82:	b009      	add	sp, #36	; 0x24
   2ab84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nonce[0] = 0x00;
   2ab88:	f88d 3010 	strb.w	r3, [sp, #16]
	nonce[1] = pdu[1];
   2ab8c:	f88d 9011 	strb.w	r9, [sp, #17]
	nonce[2] = pdu[2];
   2ab90:	f88d 8012 	strb.w	r8, [sp, #18]
	nonce[3] = pdu[3];
   2ab94:	f88d e013 	strb.w	lr, [sp, #19]
	nonce[4] = pdu[4];
   2ab98:	f88d c014 	strb.w	ip, [sp, #20]
	nonce[5] = pdu[5];
   2ab9c:	f88d 7015 	strb.w	r7, [sp, #21]
	nonce[6] = pdu[6];
   2aba0:	f88d 2016 	strb.w	r2, [sp, #22]
   2aba4:	e7d5      	b.n	2ab52 <bt_mesh_net_decrypt+0x4a>

0002aba6 <bt_mesh_app_encrypt>:
{
   2aba6:	b570      	push	{r4, r5, r6, lr}
   2aba8:	460d      	mov	r5, r1
   2abaa:	b088      	sub	sp, #32
   2abac:	4606      	mov	r6, r0
	create_app_nonce(nonce, ctx);
   2abae:	a804      	add	r0, sp, #16
{
   2abb0:	4614      	mov	r4, r2
	create_app_nonce(nonce, ctx);
   2abb2:	f7ff fead 	bl	2a910 <create_app_nonce>
	err = bt_ccm_encrypt(key, nonce, buf->data, buf->len, ctx->ad,
   2abb6:	692b      	ldr	r3, [r5, #16]
   2abb8:	7868      	ldrb	r0, [r5, #1]
   2abba:	6822      	ldr	r2, [r4, #0]
   2abbc:	2b00      	cmp	r3, #0
   2abbe:	bf14      	ite	ne
   2abc0:	2110      	movne	r1, #16
   2abc2:	2100      	moveq	r1, #0
   2abc4:	2800      	cmp	r0, #0
   2abc6:	bf14      	ite	ne
   2abc8:	2008      	movne	r0, #8
   2abca:	2004      	moveq	r0, #4
   2abcc:	e9cd 3100 	strd	r3, r1, [sp]
   2abd0:	e9cd 2002 	strd	r2, r0, [sp, #8]
   2abd4:	88a3      	ldrh	r3, [r4, #4]
   2abd6:	4630      	mov	r0, r6
   2abd8:	a904      	add	r1, sp, #16
   2abda:	f7fe fa2e 	bl	2903a <bt_ccm_encrypt>
	if (!err) {
   2abde:	4606      	mov	r6, r0
   2abe0:	b938      	cbnz	r0, 2abf2 <bt_mesh_app_encrypt+0x4c>
		net_buf_simple_add(buf, APP_MIC_LEN(ctx->aszmic));
   2abe2:	786b      	ldrb	r3, [r5, #1]
   2abe4:	2b00      	cmp	r3, #0
   2abe6:	bf14      	ite	ne
   2abe8:	2108      	movne	r1, #8
   2abea:	2104      	moveq	r1, #4
   2abec:	4620      	mov	r0, r4
   2abee:	f7f4 fb01 	bl	1f1f4 <net_buf_simple_add>
}
   2abf2:	4630      	mov	r0, r6
   2abf4:	b008      	add	sp, #32
   2abf6:	bd70      	pop	{r4, r5, r6, pc}

0002abf8 <bt_mesh_app_decrypt>:
{
   2abf8:	b5f0      	push	{r4, r5, r6, r7, lr}
   2abfa:	460d      	mov	r5, r1
   2abfc:	b089      	sub	sp, #36	; 0x24
   2abfe:	4607      	mov	r7, r0
	create_app_nonce(nonce, ctx);
   2ac00:	a804      	add	r0, sp, #16
{
   2ac02:	4614      	mov	r4, r2
   2ac04:	461e      	mov	r6, r3
	create_app_nonce(nonce, ctx);
   2ac06:	f7ff fe83 	bl	2a910 <create_app_nonce>
	err = bt_ccm_decrypt(key, nonce, buf->data, buf->len, ctx->ad,
   2ac0a:	692b      	ldr	r3, [r5, #16]
   2ac0c:	7868      	ldrb	r0, [r5, #1]
   2ac0e:	6831      	ldr	r1, [r6, #0]
   2ac10:	2b00      	cmp	r3, #0
   2ac12:	bf14      	ite	ne
   2ac14:	2210      	movne	r2, #16
   2ac16:	2200      	moveq	r2, #0
   2ac18:	2800      	cmp	r0, #0
   2ac1a:	bf14      	ite	ne
   2ac1c:	2008      	movne	r0, #8
   2ac1e:	2004      	moveq	r0, #4
   2ac20:	e9cd 1002 	strd	r1, r0, [sp, #8]
   2ac24:	e9cd 3200 	strd	r3, r2, [sp]
   2ac28:	a904      	add	r1, sp, #16
   2ac2a:	88a3      	ldrh	r3, [r4, #4]
   2ac2c:	6822      	ldr	r2, [r4, #0]
   2ac2e:	4638      	mov	r0, r7
   2ac30:	f7fe f9d5 	bl	28fde <bt_ccm_decrypt>
	if (!err) {
   2ac34:	4605      	mov	r5, r0
   2ac36:	b918      	cbnz	r0, 2ac40 <bt_mesh_app_decrypt+0x48>
		net_buf_simple_add(out, buf->len);
   2ac38:	88a1      	ldrh	r1, [r4, #4]
   2ac3a:	4630      	mov	r0, r6
   2ac3c:	f7f4 fada 	bl	1f1f4 <net_buf_simple_add>
}
   2ac40:	4628      	mov	r0, r5
   2ac42:	b009      	add	sp, #36	; 0x24
   2ac44:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002ac46 <bt_mesh_prov_conf_salt>:
{
   2ac46:	b530      	push	{r4, r5, lr}
   2ac48:	b085      	sub	sp, #20
   2ac4a:	4604      	mov	r4, r0
   2ac4c:	460d      	mov	r5, r1
	const uint8_t conf_salt_key[16] = { 0 };
   2ac4e:	2210      	movs	r2, #16
   2ac50:	2100      	movs	r1, #0
   2ac52:	4668      	mov	r0, sp
   2ac54:	f002 fcd1 	bl	2d5fa <memset>
	return bt_mesh_aes_cmac_one(conf_salt_key, conf_inputs, 145, salt);
   2ac58:	462b      	mov	r3, r5
   2ac5a:	2291      	movs	r2, #145	; 0x91
   2ac5c:	4621      	mov	r1, r4
   2ac5e:	4668      	mov	r0, sp
   2ac60:	f7ff fe98 	bl	2a994 <bt_mesh_aes_cmac_one>
}
   2ac64:	b005      	add	sp, #20
   2ac66:	bd30      	pop	{r4, r5, pc}

0002ac68 <bt_mesh_prov_conf>:

int bt_mesh_prov_conf(const uint8_t conf_key[16], const uint8_t rand[16],
		      const uint8_t auth[16], uint8_t conf[16])
{
   2ac68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct bt_mesh_sg sg[] = { { rand, 16 }, { auth, 16 } };
   2ac6a:	9100      	str	r1, [sp, #0]
   2ac6c:	2110      	movs	r1, #16
   2ac6e:	e9cd 1201 	strd	r1, r2, [sp, #4]
   2ac72:	9103      	str	r1, [sp, #12]

	BT_DBG("ConfirmationKey %s", bt_hex(conf_key, 16));
	BT_DBG("RandomDevice %s", bt_hex(rand, 16));
	BT_DBG("AuthValue %s", bt_hex(auth, 16));

	return bt_mesh_aes_cmac(conf_key, sg, ARRAY_SIZE(sg), conf);
   2ac74:	2202      	movs	r2, #2
   2ac76:	4669      	mov	r1, sp
   2ac78:	f7ff fe6a 	bl	2a950 <bt_mesh_aes_cmac>
}
   2ac7c:	b005      	add	sp, #20
   2ac7e:	f85d fb04 	ldr.w	pc, [sp], #4

0002ac82 <bt_mesh_prov_decrypt>:

int bt_mesh_prov_decrypt(const uint8_t key[16], uint8_t nonce[13],
			 const uint8_t data[25 + 8], uint8_t out[25])
{
   2ac82:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_ccm_decrypt(key, nonce, data, 25, NULL, 0, out, 8);
   2ac84:	2408      	movs	r4, #8
   2ac86:	e9cd 3402 	strd	r3, r4, [sp, #8]
   2ac8a:	2300      	movs	r3, #0
   2ac8c:	e9cd 3300 	strd	r3, r3, [sp]
   2ac90:	2319      	movs	r3, #25
   2ac92:	f7fe f9a4 	bl	28fde <bt_ccm_decrypt>
}
   2ac96:	b004      	add	sp, #16
   2ac98:	bd10      	pop	{r4, pc}

0002ac9a <bt_mesh_beacon_auth>:
}

int bt_mesh_beacon_auth(const uint8_t beacon_key[16], uint8_t flags,
			const uint8_t net_id[8], uint32_t iv_index,
			uint8_t auth[8])
{
   2ac9a:	b530      	push	{r4, r5, lr}
   2ac9c:	b089      	sub	sp, #36	; 0x24
   2ac9e:	4605      	mov	r5, r0

	BT_DBG("BeaconKey %s", bt_hex(beacon_key, 16));
	BT_DBG("NetId %s", bt_hex(net_id, 8));
	BT_DBG("IV Index 0x%08x", iv_index);

	msg[0] = flags;
   2aca0:	f88d 1000 	strb.w	r1, [sp]
	memcpy(&msg[1], net_id, 8);
   2aca4:	6811      	ldr	r1, [r2, #0]
   2aca6:	f8cd 1001 	str.w	r1, [sp, #1]
   2acaa:	6851      	ldr	r1, [r2, #4]
   2acac:	f8cd 1005 	str.w	r1, [sp, #5]
	sys_put_be32(iv_index, &msg[9]);
   2acb0:	4618      	mov	r0, r3
   2acb2:	f10d 0109 	add.w	r1, sp, #9
{
   2acb6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	sys_put_be32(iv_index, &msg[9]);
   2acb8:	f7ff fe21 	bl	2a8fe <sys_put_be32>

	BT_DBG("BeaconMsg %s", bt_hex(msg, sizeof(msg)));

	err = bt_mesh_aes_cmac_one(beacon_key, msg, sizeof(msg), tmp);
   2acbc:	220d      	movs	r2, #13
   2acbe:	ab04      	add	r3, sp, #16
   2acc0:	4669      	mov	r1, sp
   2acc2:	4628      	mov	r0, r5
   2acc4:	f7ff fe66 	bl	2a994 <bt_mesh_aes_cmac_one>
	if (!err) {
   2acc8:	4602      	mov	r2, r0
   2acca:	b918      	cbnz	r0, 2acd4 <bt_mesh_beacon_auth+0x3a>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2accc:	ab04      	add	r3, sp, #16
   2acce:	cb03      	ldmia	r3!, {r0, r1}
   2acd0:	6020      	str	r0, [r4, #0]
   2acd2:	6061      	str	r1, [r4, #4]
		memcpy(auth, tmp, 8);
	}

	return err;
}
   2acd4:	4610      	mov	r0, r2
   2acd6:	b009      	add	sp, #36	; 0x24
   2acd8:	bd30      	pop	{r4, r5, pc}

0002acda <k_uptime_get_32>:
{
   2acda:	b510      	push	{r4, lr}
   2acdc:	f002 fbb2 	bl	2d444 <z_impl_k_uptime_ticks>
   2ace0:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   2ace4:	fba0 2304 	umull	r2, r3, r0, r4
   2ace8:	fb04 3301 	mla	r3, r4, r1, r3
   2acec:	0bd0      	lsrs	r0, r2, #15
}
   2acee:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   2acf2:	bd10      	pop	{r4, pc}

0002acf4 <sig_mod_set>:
{
   2acf4:	b507      	push	{r0, r1, r2, lr}
	return mod_set(false, name, len_rd, read_cb, cb_arg);
   2acf6:	9300      	str	r3, [sp, #0]
   2acf8:	4613      	mov	r3, r2
   2acfa:	460a      	mov	r2, r1
   2acfc:	4601      	mov	r1, r0
   2acfe:	2000      	movs	r0, #0
   2ad00:	f7e7 f858 	bl	11db4 <mod_set>
}
   2ad04:	b003      	add	sp, #12
   2ad06:	f85d fb04 	ldr.w	pc, [sp], #4

0002ad0a <vnd_mod_set>:
{
   2ad0a:	b507      	push	{r0, r1, r2, lr}
	return mod_set(true, name, len_rd, read_cb, cb_arg);
   2ad0c:	9300      	str	r3, [sp, #0]
   2ad0e:	4613      	mov	r3, r2
   2ad10:	460a      	mov	r2, r1
   2ad12:	4601      	mov	r1, r0
   2ad14:	2001      	movs	r0, #1
   2ad16:	f7e7 f84d 	bl	11db4 <mod_set>
}
   2ad1a:	b003      	add	sp, #12
   2ad1c:	f85d fb04 	ldr.w	pc, [sp], #4

0002ad20 <bt_mesh_model_find_group>:
		.mod = *mod,
   2ad20:	6800      	ldr	r0, [r0, #0]
		if (mod->groups[i] == addr) {
   2ad22:	89c3      	ldrh	r3, [r0, #14]
   2ad24:	428b      	cmp	r3, r1
			return &mod->groups[i];
   2ad26:	bf0c      	ite	eq
   2ad28:	300e      	addeq	r0, #14
	ctx->entry = model_group_get(mod, ctx->addr);
   2ad2a:	2000      	movne	r0, #0
}
   2ad2c:	4770      	bx	lr

0002ad2e <bt_mesh_model_msg_init>:
{
   2ad2e:	b538      	push	{r3, r4, r5, lr}
	if (!buf->__buf) {
   2ad30:	6883      	ldr	r3, [r0, #8]
   2ad32:	4604      	mov	r4, r0
   2ad34:	b913      	cbnz	r3, 2ad3c <bt_mesh_model_msg_init+0xe>
		buf->__buf = (uint8_t *)buf + sizeof(*buf);
   2ad36:	f100 030c 	add.w	r3, r0, #12
   2ad3a:	6083      	str	r3, [r0, #8]
	buf->data = buf->__buf + reserve_head;
   2ad3c:	68a3      	ldr	r3, [r4, #8]
   2ad3e:	6023      	str	r3, [r4, #0]
	switch (BT_MESH_MODEL_OP_LEN(opcode)) {
   2ad40:	29ff      	cmp	r1, #255	; 0xff
	buf->len = 0U;
   2ad42:	f04f 0300 	mov.w	r3, #0
   2ad46:	80a3      	strh	r3, [r4, #4]
   2ad48:	d805      	bhi.n	2ad56 <bt_mesh_model_msg_init+0x28>
		net_buf_simple_add_u8(msg, opcode);
   2ad4a:	4620      	mov	r0, r4
   2ad4c:	b2c9      	uxtb	r1, r1
}
   2ad4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_simple_add_u8(msg, opcode);
   2ad52:	f001 be52 	b.w	2c9fa <net_buf_simple_add_u8>
	switch (BT_MESH_MODEL_OP_LEN(opcode)) {
   2ad56:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   2ad5a:	b28d      	uxth	r5, r1
   2ad5c:	d205      	bcs.n	2ad6a <bt_mesh_model_msg_init+0x3c>
		net_buf_simple_add_be16(msg, opcode);
   2ad5e:	4629      	mov	r1, r5
   2ad60:	4620      	mov	r0, r4
}
   2ad62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_simple_add_be16(msg, opcode);
   2ad66:	f001 be58 	b.w	2ca1a <net_buf_simple_add_be16>
		net_buf_simple_add_u8(msg, ((opcode >> 16) & 0xff));
   2ad6a:	f3c1 4107 	ubfx	r1, r1, #16, #8
   2ad6e:	4620      	mov	r0, r4
   2ad70:	f001 fe43 	bl	2c9fa <net_buf_simple_add_u8>
		net_buf_simple_add_le16(msg, opcode & 0xffff);
   2ad74:	4629      	mov	r1, r5
   2ad76:	4620      	mov	r0, r4
}
   2ad78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_simple_add_le16(msg, opcode & 0xffff);
   2ad7c:	f001 be44 	b.w	2ca08 <net_buf_simple_add_le16>

0002ad80 <bt_mesh_model_send>:
{
   2ad80:	b570      	push	{r4, r5, r6, lr}
   2ad82:	b086      	sub	sp, #24
   2ad84:	4615      	mov	r5, r2
	struct bt_mesh_net_tx tx = {
   2ad86:	2200      	movs	r2, #0
{
   2ad88:	461e      	mov	r6, r3
	struct bt_mesh_net_tx tx = {
   2ad8a:	e9cd 1204 	strd	r1, r2, [sp, #16]
{
   2ad8e:	4604      	mov	r4, r0
	struct bt_mesh_net_tx tx = {
   2ad90:	9203      	str	r2, [sp, #12]
		.src = bt_mesh_model_elem(model)->addr,
   2ad92:	f7e6 ffd5 	bl	11d40 <bt_mesh_model_elem>
	struct bt_mesh_net_tx tx = {
   2ad96:	8803      	ldrh	r3, [r0, #0]
   2ad98:	f8ad 3014 	strh.w	r3, [sp, #20]
	return model_send(model, &tx, false, msg, cb, cb_data);
   2ad9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2ad9e:	a903      	add	r1, sp, #12
   2ada0:	e9cd 6300 	strd	r6, r3, [sp]
   2ada4:	4620      	mov	r0, r4
   2ada6:	462b      	mov	r3, r5
   2ada8:	f7e6 fdd2 	bl	11950 <model_send>
}
   2adac:	b006      	add	sp, #24
   2adae:	bd70      	pop	{r4, r5, r6, pc}

0002adb0 <bt_mesh_model_find_vnd>:
{
   2adb0:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0U; i < elem->vnd_model_count; i++) {
   2adb2:	7947      	ldrb	r7, [r0, #5]
{
   2adb4:	4605      	mov	r5, r0
	for (i = 0U; i < elem->vnd_model_count; i++) {
   2adb6:	2300      	movs	r3, #0
		if (elem->vnd_models[i].vnd.company == company &&
   2adb8:	f04f 0c1c 	mov.w	ip, #28
	for (i = 0U; i < elem->vnd_model_count; i++) {
   2adbc:	b2d8      	uxtb	r0, r3
   2adbe:	4287      	cmp	r7, r0
   2adc0:	d801      	bhi.n	2adc6 <bt_mesh_model_find_vnd+0x16>
	return NULL;
   2adc2:	2000      	movs	r0, #0
}
   2adc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (elem->vnd_models[i].vnd.company == company &&
   2adc6:	fb0c f403 	mul.w	r4, ip, r3
   2adca:	68ee      	ldr	r6, [r5, #12]
   2adcc:	1930      	adds	r0, r6, r4
   2adce:	5b34      	ldrh	r4, [r6, r4]
   2add0:	428c      	cmp	r4, r1
   2add2:	d102      	bne.n	2adda <bt_mesh_model_find_vnd+0x2a>
   2add4:	8844      	ldrh	r4, [r0, #2]
   2add6:	4294      	cmp	r4, r2
   2add8:	d0f4      	beq.n	2adc4 <bt_mesh_model_find_vnd+0x14>
   2adda:	3301      	adds	r3, #1
   2addc:	e7ee      	b.n	2adbc <bt_mesh_model_find_vnd+0xc>

0002adde <bt_mesh_model_find>:
{
   2adde:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0U; i < elem->model_count; i++) {
   2ade0:	7906      	ldrb	r6, [r0, #4]
   2ade2:	2300      	movs	r3, #0
		if (elem->models[i].id == id) {
   2ade4:	271c      	movs	r7, #28
	for (i = 0U; i < elem->model_count; i++) {
   2ade6:	b2da      	uxtb	r2, r3
   2ade8:	4296      	cmp	r6, r2
   2adea:	d801      	bhi.n	2adf0 <bt_mesh_model_find+0x12>
	return NULL;
   2adec:	2200      	movs	r2, #0
   2adee:	e008      	b.n	2ae02 <bt_mesh_model_find+0x24>
		if (elem->models[i].id == id) {
   2adf0:	fb07 f403 	mul.w	r4, r7, r3
   2adf4:	6885      	ldr	r5, [r0, #8]
   2adf6:	192a      	adds	r2, r5, r4
   2adf8:	5b2c      	ldrh	r4, [r5, r4]
   2adfa:	428c      	cmp	r4, r1
   2adfc:	f103 0301 	add.w	r3, r3, #1
   2ae00:	d1f1      	bne.n	2ade6 <bt_mesh_model_find+0x8>
}
   2ae02:	4610      	mov	r0, r2
   2ae04:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002ae06 <bt_mesh_model_root>:
}
   2ae06:	4770      	bx	lr

0002ae08 <bt_mesh_model_tree_walk>:
{
   2ae08:	460b      	mov	r3, r1
		    cb(m, (uint32_t)depth, user_data) == BT_MESH_WALK_STOP) {
   2ae0a:	2100      	movs	r1, #0
   2ae0c:	4718      	bx	r3

0002ae0e <bt_mesh_model_bind_store>:
	mod->flags |= BT_MESH_MOD_BIND_PENDING;
   2ae0e:	88c3      	ldrh	r3, [r0, #6]
   2ae10:	f043 0301 	orr.w	r3, r3, #1
   2ae14:	80c3      	strh	r3, [r0, #6]
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_MOD_PENDING);
   2ae16:	2008      	movs	r0, #8
   2ae18:	f7e9 bc30 	b.w	1467c <bt_mesh_settings_store_schedule>

0002ae1c <bt_mesh_model_sub_store>:
	mod->flags |= BT_MESH_MOD_SUB_PENDING;
   2ae1c:	88c3      	ldrh	r3, [r0, #6]
   2ae1e:	f043 0302 	orr.w	r3, r3, #2
   2ae22:	80c3      	strh	r3, [r0, #6]
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_MOD_PENDING);
   2ae24:	2008      	movs	r0, #8
   2ae26:	f7e9 bc29 	b.w	1467c <bt_mesh_settings_store_schedule>

0002ae2a <bt_mesh_model_pub_store>:
	mod->flags |= BT_MESH_MOD_PUB_PENDING;
   2ae2a:	88c3      	ldrh	r3, [r0, #6]
   2ae2c:	f043 0304 	orr.w	r3, r3, #4
   2ae30:	80c3      	strh	r3, [r0, #6]
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_MOD_PENDING);
   2ae32:	2008      	movs	r0, #8
   2ae34:	f7e9 bc22 	b.w	1467c <bt_mesh_settings_store_schedule>

0002ae38 <key_idx_pack>:

#include <sys/byteorder.h>

static inline void key_idx_pack(struct net_buf_simple *buf,
				uint16_t idx1, uint16_t idx2)
{
   2ae38:	b538      	push	{r3, r4, r5, lr}
	net_buf_simple_add_le16(buf, idx1 | ((idx2 & 0x00f) << 12));
   2ae3a:	ea41 3102 	orr.w	r1, r1, r2, lsl #12
{
   2ae3e:	4605      	mov	r5, r0
   2ae40:	4614      	mov	r4, r2
	net_buf_simple_add_le16(buf, idx1 | ((idx2 & 0x00f) << 12));
   2ae42:	b289      	uxth	r1, r1
   2ae44:	f001 fde0 	bl	2ca08 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(buf, idx2 >> 4);
   2ae48:	f3c4 1107 	ubfx	r1, r4, #4, #8
   2ae4c:	4628      	mov	r0, r5
}
   2ae4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_simple_add_u8(buf, idx2 >> 4);
   2ae52:	f001 bdd2 	b.w	2c9fa <net_buf_simple_add_u8>

0002ae56 <key_idx_unpack>:

static inline void key_idx_unpack(struct net_buf_simple *buf,
				  uint16_t *idx1, uint16_t *idx2)
{
   2ae56:	b430      	push	{r4, r5}
	*idx1 = sys_get_le16(&buf->data[0]) & 0xfff;
   2ae58:	6804      	ldr	r4, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   2ae5a:	7865      	ldrb	r5, [r4, #1]
   2ae5c:	7823      	ldrb	r3, [r4, #0]
   2ae5e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   2ae62:	f3c3 030b 	ubfx	r3, r3, #0, #12
   2ae66:	800b      	strh	r3, [r1, #0]
   2ae68:	78a1      	ldrb	r1, [r4, #2]
   2ae6a:	7863      	ldrb	r3, [r4, #1]
	*idx2 = sys_get_le16(&buf->data[1]) >> 4;
   2ae6c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   2ae70:	091b      	lsrs	r3, r3, #4
   2ae72:	8013      	strh	r3, [r2, #0]
	net_buf_simple_pull(buf, 3);
   2ae74:	2103      	movs	r1, #3
}
   2ae76:	bc30      	pop	{r4, r5}
	net_buf_simple_pull(buf, 3);
   2ae78:	f7f4 b982 	b.w	1f180 <net_buf_simple_pull>

0002ae7c <bt_mesh_hb_pwr2>:
	if (!val) {
   2ae7c:	b158      	cbz	r0, 2ae96 <bt_mesh_hb_pwr2+0x1a>
	} else if (val == 0xff || val == 0x11) {
   2ae7e:	28ff      	cmp	r0, #255	; 0xff
   2ae80:	d007      	beq.n	2ae92 <bt_mesh_hb_pwr2+0x16>
   2ae82:	2811      	cmp	r0, #17
   2ae84:	d005      	beq.n	2ae92 <bt_mesh_hb_pwr2+0x16>
		return (1 << (val - 1));
   2ae86:	2301      	movs	r3, #1
   2ae88:	3801      	subs	r0, #1
   2ae8a:	fa03 f000 	lsl.w	r0, r3, r0
   2ae8e:	b280      	uxth	r0, r0
   2ae90:	4770      	bx	lr
		return 0xffff;
   2ae92:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
   2ae96:	4770      	bx	lr

0002ae98 <mod_sub_clear_visitor>:
{
   2ae98:	b508      	push	{r3, lr}
   2ae9a:	300e      	adds	r0, #14
   2ae9c:	f7e7 fd78 	bl	12990 <mod_sub_list_clear.isra.3.part.4>
}
   2aea0:	2001      	movs	r0, #1
   2aea2:	bd08      	pop	{r3, pc}

0002aea4 <mod_reset>:
{
   2aea4:	b510      	push	{r4, lr}
   2aea6:	4604      	mov	r4, r0
   2aea8:	300e      	adds	r0, #14
   2aeaa:	f7e7 fd71 	bl	12990 <mod_sub_list_clear.isra.3.part.4>
		if (clear_count) {
   2aeae:	b110      	cbz	r0, 2aeb6 <mod_reset+0x12>
			bt_mesh_model_sub_store(mod);
   2aeb0:	4620      	mov	r0, r4
   2aeb2:	f7ff ffb3 	bl	2ae1c <bt_mesh_model_sub_store>
	if (mod->cb && mod->cb->reset) {
   2aeb6:	6963      	ldr	r3, [r4, #20]
   2aeb8:	b12b      	cbz	r3, 2aec6 <mod_reset+0x22>
   2aeba:	68db      	ldr	r3, [r3, #12]
   2aebc:	b11b      	cbz	r3, 2aec6 <mod_reset+0x22>
		mod->cb->reset(mod);
   2aebe:	4620      	mov	r0, r4
}
   2aec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		mod->cb->reset(mod);
   2aec4:	4718      	bx	r3
}
   2aec6:	bd10      	pop	{r4, pc}

0002aec8 <app_key_del>:
{
   2aec8:	b530      	push	{r4, r5, lr}
   2aeca:	b085      	sub	sp, #20
   2aecc:	4604      	mov	r4, r0
   2aece:	460d      	mov	r5, r1
   2aed0:	4610      	mov	r0, r2
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
   2aed2:	a903      	add	r1, sp, #12
   2aed4:	f10d 020e 	add.w	r2, sp, #14
   2aed8:	f7ff ffbd 	bl	2ae56 <key_idx_unpack>
	status = bt_mesh_app_key_del(key_app_idx, key_net_idx);
   2aedc:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   2aee0:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   2aee4:	f7e4 fc92 	bl	f80c <bt_mesh_app_key_del>
	send_app_key_status(model, ctx, status, key_app_idx, key_net_idx);
   2aee8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   2aeec:	9300      	str	r3, [sp, #0]
   2aeee:	4602      	mov	r2, r0
   2aef0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   2aef4:	4629      	mov	r1, r5
   2aef6:	4620      	mov	r0, r4
   2aef8:	f7e7 ff0e 	bl	12d18 <send_app_key_status>
}
   2aefc:	b005      	add	sp, #20
   2aefe:	bd30      	pop	{r4, r5, pc}

0002af00 <app_key_update>:
{
   2af00:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2af02:	4614      	mov	r4, r2
   2af04:	4605      	mov	r5, r0
   2af06:	460e      	mov	r6, r1
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
   2af08:	f10d 020e 	add.w	r2, sp, #14
   2af0c:	a903      	add	r1, sp, #12
   2af0e:	4620      	mov	r0, r4
   2af10:	f7ff ffa1 	bl	2ae56 <key_idx_unpack>
	status = bt_mesh_app_key_update(key_app_idx, key_net_idx, buf->data);
   2af14:	6822      	ldr	r2, [r4, #0]
   2af16:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   2af1a:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   2af1e:	f7e4 fc2b 	bl	f778 <bt_mesh_app_key_update>
	send_app_key_status(model, ctx, status, key_app_idx, key_net_idx);
   2af22:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   2af26:	9300      	str	r3, [sp, #0]
   2af28:	4602      	mov	r2, r0
   2af2a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   2af2e:	4631      	mov	r1, r6
   2af30:	4628      	mov	r0, r5
   2af32:	f7e7 fef1 	bl	12d18 <send_app_key_status>
}
   2af36:	b004      	add	sp, #16
   2af38:	bd70      	pop	{r4, r5, r6, pc}

0002af3a <app_key_add>:
{
   2af3a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2af3c:	4614      	mov	r4, r2
   2af3e:	4605      	mov	r5, r0
   2af40:	460e      	mov	r6, r1
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
   2af42:	f10d 020e 	add.w	r2, sp, #14
   2af46:	a903      	add	r1, sp, #12
   2af48:	4620      	mov	r0, r4
   2af4a:	f7ff ff84 	bl	2ae56 <key_idx_unpack>
	status = bt_mesh_app_key_add(key_app_idx, key_net_idx, buf->data);
   2af4e:	6822      	ldr	r2, [r4, #0]
   2af50:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   2af54:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   2af58:	f7e4 fbca 	bl	f6f0 <bt_mesh_app_key_add>
	send_app_key_status(model, ctx, status, key_app_idx, key_net_idx);
   2af5c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   2af60:	9300      	str	r3, [sp, #0]
   2af62:	4602      	mov	r2, r0
   2af64:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   2af68:	4631      	mov	r1, r6
   2af6a:	4628      	mov	r0, r5
   2af6c:	f7e7 fed4 	bl	12d18 <send_app_key_status>
}
   2af70:	b004      	add	sp, #16
   2af72:	bd70      	pop	{r4, r5, r6, pc}

0002af74 <friend_get>:
	send_friend_status(model, ctx);
   2af74:	f7e7 befc 	b.w	12d70 <send_friend_status>

0002af78 <get_model>:
{
   2af78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < 4) {
   2af7a:	888b      	ldrh	r3, [r1, #4]
   2af7c:	2b03      	cmp	r3, #3
{
   2af7e:	4605      	mov	r5, r0
   2af80:	460c      	mov	r4, r1
   2af82:	4616      	mov	r6, r2
		id = net_buf_simple_pull_le16(buf);
   2af84:	4608      	mov	r0, r1
	if (buf->len < 4) {
   2af86:	d809      	bhi.n	2af9c <get_model+0x24>
		id = net_buf_simple_pull_le16(buf);
   2af88:	f001 fced 	bl	2c966 <net_buf_simple_pull_le16>
		*vnd = false;
   2af8c:	2300      	movs	r3, #0
   2af8e:	7033      	strb	r3, [r6, #0]
		return bt_mesh_model_find(elem, id);
   2af90:	4601      	mov	r1, r0
   2af92:	4628      	mov	r0, r5
}
   2af94:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		return bt_mesh_model_find(elem, id);
   2af98:	f7ff bf21 	b.w	2adde <bt_mesh_model_find>
		company = net_buf_simple_pull_le16(buf);
   2af9c:	f001 fce3 	bl	2c966 <net_buf_simple_pull_le16>
   2afa0:	4607      	mov	r7, r0
		id = net_buf_simple_pull_le16(buf);
   2afa2:	4620      	mov	r0, r4
   2afa4:	f001 fcdf 	bl	2c966 <net_buf_simple_pull_le16>
		*vnd = true;
   2afa8:	2301      	movs	r3, #1
   2afaa:	7033      	strb	r3, [r6, #0]
		return bt_mesh_model_find_vnd(elem, company, id);
   2afac:	4602      	mov	r2, r0
   2afae:	4639      	mov	r1, r7
   2afb0:	4628      	mov	r0, r5
}
   2afb2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		return bt_mesh_model_find_vnd(elem, company, id);
   2afb6:	f7ff befb 	b.w	2adb0 <bt_mesh_model_find_vnd>

0002afba <create_mod_app_status.isra.13>:
static void create_mod_app_status(struct net_buf_simple *msg,
   2afba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2afbe:	4604      	mov	r4, r0
   2afc0:	460e      	mov	r6, r1
	bt_mesh_model_msg_init(msg, OP_MOD_APP_STATUS);
   2afc2:	f248 013e 	movw	r1, #32830	; 0x803e
static void create_mod_app_status(struct net_buf_simple *msg,
   2afc6:	4690      	mov	r8, r2
   2afc8:	461f      	mov	r7, r3
   2afca:	9d07      	ldr	r5, [sp, #28]
	bt_mesh_model_msg_init(msg, OP_MOD_APP_STATUS);
   2afcc:	f7ff feaf 	bl	2ad2e <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, status);
   2afd0:	f89d 1018 	ldrb.w	r1, [sp, #24]
   2afd4:	4620      	mov	r0, r4
   2afd6:	f001 fd10 	bl	2c9fa <net_buf_simple_add_u8>
	net_buf_simple_add_le16(msg, elem_addr);
   2afda:	4641      	mov	r1, r8
   2afdc:	4620      	mov	r0, r4
   2afde:	f001 fd13 	bl	2ca08 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(msg, app_idx);
   2afe2:	4639      	mov	r1, r7
   2afe4:	4620      	mov	r0, r4
   2afe6:	f001 fd0f 	bl	2ca08 <net_buf_simple_add_le16>
	if (vnd) {
   2afea:	b13e      	cbz	r6, 2affc <create_mod_app_status.isra.13+0x42>
		memcpy(net_buf_simple_add(msg, 4), mod_id, 4);
   2afec:	2104      	movs	r1, #4
   2afee:	4620      	mov	r0, r4
   2aff0:	f7f4 f900 	bl	1f1f4 <net_buf_simple_add>
   2aff4:	682b      	ldr	r3, [r5, #0]
   2aff6:	6003      	str	r3, [r0, #0]
}
   2aff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(net_buf_simple_add(msg, 2), mod_id, 2);
   2affc:	2102      	movs	r1, #2
   2affe:	4620      	mov	r0, r4
   2b000:	f7f4 f8f8 	bl	1f1f4 <net_buf_simple_add>
   2b004:	882b      	ldrh	r3, [r5, #0]
   2b006:	8003      	strh	r3, [r0, #0]
   2b008:	e7f6      	b.n	2aff8 <create_mod_app_status.isra.13+0x3e>

0002b00a <gatt_proxy_get>:
	send_gatt_proxy_status(model, ctx);
   2b00a:	f7e8 bb5d 	b.w	136c8 <send_gatt_proxy_status>

0002b00e <mod_unbind.part.2.constprop.28>:
static uint8_t mod_unbind(struct bt_mesh_model *model, uint16_t key_idx, bool store)
   2b00e:	b530      	push	{r4, r5, lr}
		if (model->keys[i] != key_idx) {
   2b010:	8985      	ldrh	r5, [r0, #12]
   2b012:	428d      	cmp	r5, r1
static uint8_t mod_unbind(struct bt_mesh_model *model, uint16_t key_idx, bool store)
   2b014:	b085      	sub	sp, #20
   2b016:	4604      	mov	r4, r0
		if (model->keys[i] != key_idx) {
   2b018:	d114      	bne.n	2b044 <mod_unbind.part.2.constprop.28+0x36>
		model->keys[i] = BT_MESH_KEY_UNUSED;
   2b01a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2b01e:	8183      	strh	r3, [r0, #12]
			bt_mesh_model_bind_store(model);
   2b020:	f7ff fef5 	bl	2ae0e <bt_mesh_model_bind_store>
		if (model->pub && model->pub->key == key_idx) {
   2b024:	68a3      	ldr	r3, [r4, #8]
   2b026:	b16b      	cbz	r3, 2b044 <mod_unbind.part.2.constprop.28+0x36>
   2b028:	88db      	ldrh	r3, [r3, #6]
   2b02a:	f3c3 030b 	ubfx	r3, r3, #0, #12
   2b02e:	42ab      	cmp	r3, r5
   2b030:	d108      	bne.n	2b044 <mod_unbind.part.2.constprop.28+0x36>
			_mod_pub_set(model, BT_MESH_ADDR_UNASSIGNED,
   2b032:	2300      	movs	r3, #0
   2b034:	e9cd 3301 	strd	r3, r3, [sp, #4]
   2b038:	9300      	str	r3, [sp, #0]
   2b03a:	461a      	mov	r2, r3
   2b03c:	4619      	mov	r1, r3
   2b03e:	4620      	mov	r0, r4
   2b040:	f7e8 fc90 	bl	13964 <_mod_pub_set.constprop.29>
}
   2b044:	2000      	movs	r0, #0
   2b046:	b005      	add	sp, #20
   2b048:	bd30      	pop	{r4, r5, pc}

0002b04a <heartbeat_sub_get>:
{
   2b04a:	b530      	push	{r4, r5, lr}
   2b04c:	b085      	sub	sp, #20
   2b04e:	4604      	mov	r4, r0
   2b050:	460d      	mov	r5, r1
	bt_mesh_hb_sub_get(&sub);
   2b052:	4668      	mov	r0, sp
   2b054:	f7e6 faae 	bl	115b4 <bt_mesh_hb_sub_get>
	hb_sub_send_status(model, ctx, &sub);
   2b058:	466a      	mov	r2, sp
   2b05a:	4629      	mov	r1, r5
   2b05c:	4620      	mov	r0, r4
   2b05e:	f7e8 fe3b 	bl	13cd8 <hb_sub_send_status>
}
   2b062:	b005      	add	sp, #20
   2b064:	bd30      	pop	{r4, r5, pc}

0002b066 <heartbeat_pub_get>:
{
   2b066:	b530      	push	{r4, r5, lr}
   2b068:	b085      	sub	sp, #20
   2b06a:	4604      	mov	r4, r0
   2b06c:	460d      	mov	r5, r1
	bt_mesh_hb_pub_get(&pub);
   2b06e:	4668      	mov	r0, sp
   2b070:	f7e6 fa2a 	bl	114c8 <bt_mesh_hb_pub_get>
	hb_pub_send_status(model, ctx, STATUS_SUCCESS, &pub);
   2b074:	466b      	mov	r3, sp
   2b076:	2200      	movs	r2, #0
   2b078:	4629      	mov	r1, r5
   2b07a:	4620      	mov	r0, r4
   2b07c:	f7e8 fec2 	bl	13e04 <hb_pub_send_status>
}
   2b080:	b005      	add	sp, #20
   2b082:	bd30      	pop	{r4, r5, pc}

0002b084 <mod_app_key_del>:
{
   2b084:	b538      	push	{r3, r4, r5, lr}
	mod_unbind(mod, *app_idx, true);
   2b086:	9b04      	ldr	r3, [sp, #16]
   2b088:	881c      	ldrh	r4, [r3, #0]
{
   2b08a:	4605      	mov	r5, r0
	if (!bt_mesh_app_key_exists(key_idx)) {
   2b08c:	4620      	mov	r0, r4
   2b08e:	f7e4 fc65 	bl	f95c <bt_mesh_app_key_exists>
   2b092:	b128      	cbz	r0, 2b0a0 <mod_app_key_del+0x1c>
   2b094:	4621      	mov	r1, r4
   2b096:	4628      	mov	r0, r5
}
   2b098:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2b09c:	f7ff bfb7 	b.w	2b00e <mod_unbind.part.2.constprop.28>
   2b0a0:	bd38      	pop	{r3, r4, r5, pc}

0002b0a2 <attention_off>:
	if (srv->cb && srv->cb->attn_off) {
   2b0a2:	f850 3c04 	ldr.w	r3, [r0, #-4]
   2b0a6:	b123      	cbz	r3, 2b0b2 <attention_off+0x10>
   2b0a8:	695b      	ldr	r3, [r3, #20]
   2b0aa:	b113      	cbz	r3, 2b0b2 <attention_off+0x10>
		srv->cb->attn_off(srv->model);
   2b0ac:	f850 0c08 	ldr.w	r0, [r0, #-8]
   2b0b0:	4718      	bx	r3
}
   2b0b2:	4770      	bx	lr

0002b0b4 <health_fault_test_unrel>:
{
   2b0b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_mesh_health_srv *srv = model->user_data;
   2b0b8:	6987      	ldr	r7, [r0, #24]
{
   2b0ba:	4604      	mov	r4, r0
	test_id = net_buf_simple_pull_u8(buf);
   2b0bc:	4610      	mov	r0, r2
{
   2b0be:	4615      	mov	r5, r2
	test_id = net_buf_simple_pull_u8(buf);
   2b0c0:	f001 fc49 	bl	2c956 <net_buf_simple_pull_u8>
   2b0c4:	4606      	mov	r6, r0
	company_id = net_buf_simple_pull_le16(buf);
   2b0c6:	4628      	mov	r0, r5
   2b0c8:	f001 fc4d 	bl	2c966 <net_buf_simple_pull_le16>
	if (srv->cb && srv->cb->fault_test) {
   2b0cc:	687b      	ldr	r3, [r7, #4]
	company_id = net_buf_simple_pull_le16(buf);
   2b0ce:	4602      	mov	r2, r0
	if (srv->cb && srv->cb->fault_test) {
   2b0d0:	b133      	cbz	r3, 2b0e0 <health_fault_test_unrel+0x2c>
   2b0d2:	68db      	ldr	r3, [r3, #12]
   2b0d4:	b123      	cbz	r3, 2b0e0 <health_fault_test_unrel+0x2c>
		srv->cb->fault_test(model, test_id, company_id);
   2b0d6:	4631      	mov	r1, r6
   2b0d8:	4620      	mov	r0, r4
}
   2b0da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		srv->cb->fault_test(model, test_id, company_id);
   2b0de:	4718      	bx	r3
}
   2b0e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002b0e4 <health_fault_clear_unrel>:
{
   2b0e4:	b570      	push	{r4, r5, r6, lr}
	struct bt_mesh_health_srv *srv = model->user_data;
   2b0e6:	6985      	ldr	r5, [r0, #24]
{
   2b0e8:	4604      	mov	r4, r0
	company_id = net_buf_simple_pull_le16(buf);
   2b0ea:	4610      	mov	r0, r2
   2b0ec:	f001 fc3b 	bl	2c966 <net_buf_simple_pull_le16>
	if (srv->cb && srv->cb->fault_clear) {
   2b0f0:	686b      	ldr	r3, [r5, #4]
	company_id = net_buf_simple_pull_le16(buf);
   2b0f2:	4601      	mov	r1, r0
	if (srv->cb && srv->cb->fault_clear) {
   2b0f4:	b12b      	cbz	r3, 2b102 <health_fault_clear_unrel+0x1e>
   2b0f6:	689b      	ldr	r3, [r3, #8]
   2b0f8:	b11b      	cbz	r3, 2b102 <health_fault_clear_unrel+0x1e>
		srv->cb->fault_clear(model, company_id);
   2b0fa:	4620      	mov	r0, r4
}
   2b0fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		srv->cb->fault_clear(model, company_id);
   2b100:	4718      	bx	r3
}
   2b102:	bd70      	pop	{r4, r5, r6, pc}

0002b104 <health_period_set>:
{
   2b104:	b538      	push	{r3, r4, r5, lr}
   2b106:	4604      	mov	r4, r0
   2b108:	460d      	mov	r5, r1
	health_period_set_unrel(model, ctx, buf);
   2b10a:	f7e8 ff2d 	bl	13f68 <health_period_set_unrel>
	send_health_period_status(model, ctx);
   2b10e:	4629      	mov	r1, r5
   2b110:	4620      	mov	r0, r4
}
   2b112:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	send_health_period_status(model, ctx);
   2b116:	f7e9 b829 	b.w	1416c <send_health_period_status>

0002b11a <health_period_get>:
	send_health_period_status(model, ctx);
   2b11a:	f7e9 b827 	b.w	1416c <send_health_period_status>

0002b11e <attention_get>:
	send_attention_status(model, ctx);
   2b11e:	f7e9 b84b 	b.w	141b8 <send_attention_status>

0002b122 <attention_set_unrel>:
{
   2b122:	b510      	push	{r4, lr}
   2b124:	4604      	mov	r4, r0
	time = net_buf_simple_pull_u8(buf);
   2b126:	4610      	mov	r0, r2
   2b128:	f001 fc15 	bl	2c956 <net_buf_simple_pull_u8>
	bt_mesh_attention(model, time);
   2b12c:	4601      	mov	r1, r0
   2b12e:	4620      	mov	r0, r4
}
   2b130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_mesh_attention(model, time);
   2b134:	f7e9 b8ec 	b.w	14310 <bt_mesh_attention>

0002b138 <attention_set>:
{
   2b138:	b538      	push	{r3, r4, r5, lr}
   2b13a:	4604      	mov	r4, r0
   2b13c:	460d      	mov	r5, r1
	attention_set_unrel(model, ctx, buf);
   2b13e:	f7ff fff0 	bl	2b122 <attention_set_unrel>
	send_attention_status(model, ctx);
   2b142:	4629      	mov	r1, r5
   2b144:	4620      	mov	r0, r4
}
   2b146:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	send_attention_status(model, ctx);
   2b14a:	f7e9 b835 	b.w	141b8 <send_attention_status>

0002b14e <bt_mesh_adv_buf_ready>:
}
   2b14e:	4770      	bx	lr

0002b150 <store_pending>:
{
   2b150:	b508      	push	{r3, lr}
	if (atomic_test_and_clear_bit(pending_flags,
   2b152:	2000      	movs	r0, #0
   2b154:	f7e9 fa34 	bl	145c0 <atomic_test_and_clear_bit.constprop.5>
   2b158:	b108      	cbz	r0, 2b15e <store_pending+0xe>
		bt_mesh_rpl_pending_store();
   2b15a:	f7e5 ff99 	bl	11090 <bt_mesh_rpl_pending_store>
	if (atomic_test_and_clear_bit(pending_flags,
   2b15e:	2001      	movs	r0, #1
   2b160:	f7e9 fa2e 	bl	145c0 <atomic_test_and_clear_bit.constprop.5>
   2b164:	b108      	cbz	r0, 2b16a <store_pending+0x1a>
		bt_mesh_subnet_pending_store();
   2b166:	f7e4 f9c1 	bl	f4ec <bt_mesh_subnet_pending_store>
	if (atomic_test_and_clear_bit(pending_flags,
   2b16a:	2002      	movs	r0, #2
   2b16c:	f7e9 fa28 	bl	145c0 <atomic_test_and_clear_bit.constprop.5>
   2b170:	b108      	cbz	r0, 2b176 <store_pending+0x26>
		bt_mesh_app_key_pending_store();
   2b172:	f7e4 fcb5 	bl	fae0 <bt_mesh_app_key_pending_store>
	if (atomic_test_and_clear_bit(pending_flags,
   2b176:	2003      	movs	r0, #3
   2b178:	f7e9 fa22 	bl	145c0 <atomic_test_and_clear_bit.constprop.5>
   2b17c:	b108      	cbz	r0, 2b182 <store_pending+0x32>
		bt_mesh_net_pending_net_store();
   2b17e:	f7e3 fe99 	bl	eeb4 <bt_mesh_net_pending_net_store>
	if (atomic_test_and_clear_bit(pending_flags,
   2b182:	2004      	movs	r0, #4
   2b184:	f7e9 fa1c 	bl	145c0 <atomic_test_and_clear_bit.constprop.5>
   2b188:	b108      	cbz	r0, 2b18e <store_pending+0x3e>
		bt_mesh_net_pending_iv_store();
   2b18a:	f7e3 fe61 	bl	ee50 <bt_mesh_net_pending_iv_store>
	if (atomic_test_and_clear_bit(pending_flags,
   2b18e:	2005      	movs	r0, #5
   2b190:	f7e9 fa16 	bl	145c0 <atomic_test_and_clear_bit.constprop.5>
   2b194:	b108      	cbz	r0, 2b19a <store_pending+0x4a>
		bt_mesh_net_pending_seq_store();
   2b196:	f7e3 fec1 	bl	ef1c <bt_mesh_net_pending_seq_store>
	if (atomic_test_and_clear_bit(pending_flags,
   2b19a:	2006      	movs	r0, #6
   2b19c:	f7e9 fa10 	bl	145c0 <atomic_test_and_clear_bit.constprop.5>
   2b1a0:	b108      	cbz	r0, 2b1a6 <store_pending+0x56>
		bt_mesh_hb_pub_pending_store();
   2b1a2:	f7e6 fa51 	bl	11648 <bt_mesh_hb_pub_pending_store>
	if (atomic_test_and_clear_bit(pending_flags,
   2b1a6:	2007      	movs	r0, #7
   2b1a8:	f7e9 fa0a 	bl	145c0 <atomic_test_and_clear_bit.constprop.5>
   2b1ac:	b108      	cbz	r0, 2b1b2 <store_pending+0x62>
		bt_mesh_cfg_pending_store();
   2b1ae:	f7e2 fc7d 	bl	daac <bt_mesh_cfg_pending_store>
	if (atomic_test_and_clear_bit(pending_flags,
   2b1b2:	2008      	movs	r0, #8
   2b1b4:	f7e9 fa04 	bl	145c0 <atomic_test_and_clear_bit.constprop.5>
   2b1b8:	b108      	cbz	r0, 2b1be <store_pending+0x6e>
		bt_mesh_model_pending_store();
   2b1ba:	f7e7 f929 	bl	12410 <bt_mesh_model_pending_store>
	if (atomic_test_and_clear_bit(pending_flags,
   2b1be:	2009      	movs	r0, #9
   2b1c0:	f7e9 f9fe 	bl	145c0 <atomic_test_and_clear_bit.constprop.5>
   2b1c4:	b118      	cbz	r0, 2b1ce <store_pending+0x7e>
}
   2b1c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_mesh_va_pending_store();
   2b1ca:	f7e5 be5f 	b.w	10e8c <bt_mesh_va_pending_store>
}
   2b1ce:	bd08      	pop	{r3, pc}

0002b1d0 <friend_recv_delay>:
{
   2b1d0:	b5d0      	push	{r4, r6, r7, lr}
	frnd->pending_req = 1U;
   2b1d2:	78c3      	ldrb	r3, [r0, #3]
	return (int32_t)frnd->recv_delay + (CONFIG_BT_MESH_FRIEND_RECV_WIN / 5);
   2b1d4:	7881      	ldrb	r1, [r0, #2]
	frnd->pending_req = 1U;
   2b1d6:	f043 0304 	orr.w	r3, r3, #4
{
   2b1da:	4604      	mov	r4, r0
	frnd->pending_req = 1U;
   2b1dc:	70c3      	strb	r3, [r0, #3]
	return (int32_t)frnd->recv_delay + (CONFIG_BT_MESH_FRIEND_RECV_WIN / 5);
   2b1de:	3133      	adds	r1, #51	; 0x33
   2b1e0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   2b1e4:	f240 36e7 	movw	r6, #999	; 0x3e7
   2b1e8:	2700      	movs	r7, #0
   2b1ea:	fbc0 6701 	smlal	r6, r7, r0, r1
   2b1ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2b1f2:	2300      	movs	r3, #0
   2b1f4:	4630      	mov	r0, r6
   2b1f6:	4639      	mov	r1, r7
   2b1f8:	f7d6 fc18 	bl	1a2c <__aeabi_uldivmod>
	k_delayed_work_submit(&frnd->timer, K_MSEC(delay));
   2b1fc:	4602      	mov	r2, r0
   2b1fe:	460b      	mov	r3, r1
   2b200:	f104 0060 	add.w	r0, r4, #96	; 0x60
}
   2b204:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
	k_delayed_work_submit(&frnd->timer, K_MSEC(delay));
   2b208:	f7e9 baec 	b.w	147e4 <k_delayed_work_submit>

0002b20c <friend_clear_sent>:
			      K_SECONDS(frnd->clear.repeat_sec));
   2b20c:	f8b1 30b6 	ldrh.w	r3, [r1, #182]	; 0xb6
{
   2b210:	b5d0      	push	{r4, r6, r7, lr}
   2b212:	460c      	mov	r4, r1
			      K_SECONDS(frnd->clear.repeat_sec));
   2b214:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   2b218:	4359      	muls	r1, r3
   2b21a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   2b21e:	f240 36e7 	movw	r6, #999	; 0x3e7
   2b222:	2700      	movs	r7, #0
   2b224:	fbe0 6701 	umlal	r6, r7, r0, r1
   2b228:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2b22c:	2300      	movs	r3, #0
   2b22e:	4630      	mov	r0, r6
   2b230:	4639      	mov	r1, r7
   2b232:	f7d6 fbfb 	bl	1a2c <__aeabi_uldivmod>
	k_delayed_work_submit(&frnd->clear.timer,
   2b236:	4602      	mov	r2, r0
   2b238:	460b      	mov	r3, r1
   2b23a:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   2b23e:	f7e9 fad1 	bl	147e4 <k_delayed_work_submit>
	frnd->clear.repeat_sec *= 2U;
   2b242:	f8b4 30b6 	ldrh.w	r3, [r4, #182]	; 0xb6
   2b246:	005b      	lsls	r3, r3, #1
   2b248:	f8a4 30b6 	strh.w	r3, [r4, #182]	; 0xb6
}
   2b24c:	bdd0      	pop	{r4, r6, r7, pc}

0002b24e <clear_timeout>:
{
   2b24e:	b5d0      	push	{r4, r6, r7, lr}
   2b250:	4604      	mov	r4, r0
   2b252:	f002 f8f7 	bl	2d444 <z_impl_k_uptime_ticks>
   2b256:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   2b25a:	fba0 6703 	umull	r6, r7, r0, r3
   2b25e:	fb03 7701 	mla	r7, r3, r1, r7
   2b262:	0bf3      	lsrs	r3, r6, #15
	duration = k_uptime_get_32() - frnd->clear.start;
   2b264:	f854 1c08 	ldr.w	r1, [r4, #-8]
	if (duration > 2 * frnd->poll_to) {
   2b268:	f854 2cb4 	ldr.w	r2, [r4, #-180]
   2b26c:	ea43 4347 	orr.w	r3, r3, r7, lsl #17
	duration = k_uptime_get_32() - frnd->clear.start;
   2b270:	1a5b      	subs	r3, r3, r1
	if (duration > 2 * frnd->poll_to) {
   2b272:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
   2b276:	d903      	bls.n	2b280 <clear_timeout+0x32>
		frnd->clear.frnd = BT_MESH_ADDR_UNASSIGNED;
   2b278:	2300      	movs	r3, #0
   2b27a:	f824 3c04 	strh.w	r3, [r4, #-4]
}
   2b27e:	bdd0      	pop	{r4, r6, r7, pc}
	send_friend_clear(frnd);
   2b280:	f1a4 00b8 	sub.w	r0, r4, #184	; 0xb8
}
   2b284:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
	send_friend_clear(frnd);
   2b288:	f7e9 ba70 	b.w	1476c <send_friend_clear>

0002b28c <net_buf_skip>:
{
   2b28c:	b538      	push	{r3, r4, r5, lr}
   2b28e:	460d      	mov	r5, r1
			buf = net_buf_frag_del(NULL, buf);
   2b290:	4604      	mov	r4, r0
	while (buf && len--) {
   2b292:	b114      	cbz	r4, 2b29a <net_buf_skip+0xe>
   2b294:	f115 35ff 	adds.w	r5, r5, #4294967295
   2b298:	d201      	bcs.n	2b29e <net_buf_skip+0x12>
}
   2b29a:	4620      	mov	r0, r4
   2b29c:	bd38      	pop	{r3, r4, r5, pc}
	return net_buf_simple_pull_u8(&buf->b);
   2b29e:	f104 0008 	add.w	r0, r4, #8
   2b2a2:	f001 fb58 	bl	2c956 <net_buf_simple_pull_u8>
		if (!buf->len) {
   2b2a6:	89a0      	ldrh	r0, [r4, #12]
   2b2a8:	2800      	cmp	r0, #0
   2b2aa:	d1f2      	bne.n	2b292 <net_buf_skip+0x6>
			buf = net_buf_frag_del(NULL, buf);
   2b2ac:	4621      	mov	r1, r4
   2b2ae:	f7f3 ff0f 	bl	1f0d0 <net_buf_frag_del>
   2b2b2:	e7ed      	b.n	2b290 <net_buf_skip+0x4>

0002b2b4 <friend_lpn_matches>:
{
   2b2b4:	b510      	push	{r4, lr}
	if (!frnd->established) {
   2b2b6:	78c4      	ldrb	r4, [r0, #3]
   2b2b8:	f014 0410 	ands.w	r4, r4, #16
   2b2bc:	d01f      	beq.n	2b2fe <friend_lpn_matches+0x4a>
	if (net_idx != frnd->subnet->net_idx) {
   2b2be:	6903      	ldr	r3, [r0, #16]
   2b2c0:	8b9b      	ldrh	r3, [r3, #28]
   2b2c2:	428b      	cmp	r3, r1
   2b2c4:	d11b      	bne.n	2b2fe <friend_lpn_matches+0x4a>
	if (BT_MESH_ADDR_IS_UNICAST(addr)) {
   2b2c6:	b213      	sxth	r3, r2
   2b2c8:	2b00      	cmp	r3, #0
   2b2ca:	dc0d      	bgt.n	2b2e8 <friend_lpn_matches+0x34>
		if (frnd->sub_list[i] == addr) {
   2b2cc:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
   2b2d0:	4293      	cmp	r3, r2
   2b2d2:	d016      	beq.n	2b302 <friend_lpn_matches+0x4e>
   2b2d4:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
   2b2d8:	4293      	cmp	r3, r2
   2b2da:	d012      	beq.n	2b302 <friend_lpn_matches+0x4e>
   2b2dc:	f8b0 005a 	ldrh.w	r0, [r0, #90]	; 0x5a
   2b2e0:	1a83      	subs	r3, r0, r2
   2b2e2:	4258      	negs	r0, r3
   2b2e4:	4158      	adcs	r0, r3
}
   2b2e6:	bd10      	pop	{r4, pc}
	if (frnd->lpn == BT_MESH_ADDR_UNASSIGNED) {
   2b2e8:	8803      	ldrh	r3, [r0, #0]
   2b2ea:	b163      	cbz	r3, 2b306 <friend_lpn_matches+0x52>
	return (addr >= frnd->lpn && addr < (frnd->lpn + frnd->num_elem));
   2b2ec:	429a      	cmp	r2, r3
   2b2ee:	d306      	bcc.n	2b2fe <friend_lpn_matches+0x4a>
   2b2f0:	7a00      	ldrb	r0, [r0, #8]
   2b2f2:	4418      	add	r0, r3
   2b2f4:	4282      	cmp	r2, r0
   2b2f6:	bfac      	ite	ge
   2b2f8:	2000      	movge	r0, #0
   2b2fa:	2001      	movlt	r0, #1
   2b2fc:	e7f3      	b.n	2b2e6 <friend_lpn_matches+0x32>
		return false;
   2b2fe:	2000      	movs	r0, #0
   2b300:	e7f1      	b.n	2b2e6 <friend_lpn_matches+0x32>
			return true;
   2b302:	2001      	movs	r0, #1
   2b304:	e7ef      	b.n	2b2e6 <friend_lpn_matches+0x32>
		return false;
   2b306:	4618      	mov	r0, r3
   2b308:	e7ed      	b.n	2b2e6 <friend_lpn_matches+0x32>

0002b30a <buf_send_start>:
{
   2b30a:	b538      	push	{r3, r4, r5, lr}
	frnd->pending_buf = 0U;
   2b30c:	78d3      	ldrb	r3, [r2, #3]
   2b30e:	f36f 03c3 	bfc	r3, #3, #1
	if (!frnd->established && frnd->last) {
   2b312:	f013 0410 	ands.w	r4, r3, #16
{
   2b316:	4615      	mov	r5, r2
	frnd->pending_buf = 0U;
   2b318:	70d3      	strb	r3, [r2, #3]
	if (!frnd->established && frnd->last) {
   2b31a:	d106      	bne.n	2b32a <buf_send_start+0x20>
   2b31c:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
   2b320:	b118      	cbz	r0, 2b32a <buf_send_start+0x20>
		net_buf_unref(frnd->last);
   2b322:	f7f3 fe17 	bl	1ef54 <net_buf_unref>
		frnd->last = NULL;
   2b326:	f8c5 409c 	str.w	r4, [r5, #156]	; 0x9c
}
   2b32a:	bd38      	pop	{r3, r4, r5, pc}

0002b32c <friend_purge_old_ack>:
{
   2b32c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (cur = sys_slist_peek_head(&frnd->queue);
   2b330:	f8d0 40a0 	ldr.w	r4, [r0, #160]	; 0xa0
{
   2b334:	4682      	mov	sl, r0
   2b336:	460f      	mov	r7, r1
   2b338:	4690      	mov	r8, r2
	sys_snode_t *cur, *prev = NULL;
   2b33a:	2500      	movs	r5, #0
	for (cur = sys_slist_peek_head(&frnd->queue);
   2b33c:	b90c      	cbnz	r4, 2b342 <friend_purge_old_ack+0x16>
}
   2b33e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (buf->len != 16) {
   2b342:	89a3      	ldrh	r3, [r4, #12]
   2b344:	2b10      	cmp	r3, #16
   2b346:	d158      	bne.n	2b3fa <friend_purge_old_ack+0xce>
	net_buf_simple_save(&buf->b, &state);
   2b348:	f104 0b08 	add.w	fp, r4, #8
	state->offset = net_buf_simple_headroom(buf);
   2b34c:	4658      	mov	r0, fp
   2b34e:	f001 fb3c 	bl	2c9ca <net_buf_simple_headroom>
	net_buf_skip(buf, 1); /* skip IVI, NID */
   2b352:	2101      	movs	r1, #1
   2b354:	4606      	mov	r6, r0
   2b356:	4620      	mov	r0, r4
	state->len = buf->len;
   2b358:	f8b4 900c 	ldrh.w	r9, [r4, #12]
   2b35c:	f7ff ff96 	bl	2b28c <net_buf_skip>
	return net_buf_simple_pull_u8(&buf->b);
   2b360:	4658      	mov	r0, fp
   2b362:	f001 faf8 	bl	2c956 <net_buf_simple_pull_u8>
	if (!(net_buf_pull_u8(buf) >> 7)) {
   2b366:	0602      	lsls	r2, r0, #24
   2b368:	d41e      	bmi.n	2b3a8 <friend_purge_old_ack+0x7c>
	bool found = false;
   2b36a:	2300      	movs	r3, #0
	buf->data = buf->__buf + state->offset;
   2b36c:	6922      	ldr	r2, [r4, #16]
	buf->len = state->len;
   2b36e:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
   2b372:	fa12 f686 	uxtah	r6, r2, r6
   2b376:	60a6      	str	r6, [r4, #8]
		if (is_segack(buf, seq_auth, src)) {
   2b378:	2b00      	cmp	r3, #0
   2b37a:	d03e      	beq.n	2b3fa <friend_purge_old_ack+0xce>
Z_GENLIST_REMOVE(slist, snode)
   2b37c:	6823      	ldr	r3, [r4, #0]
   2b37e:	bba5      	cbnz	r5, 2b3ea <friend_purge_old_ack+0xbe>
   2b380:	f8da 20a4 	ldr.w	r2, [sl, #164]	; 0xa4
	list->head = node;
   2b384:	f8ca 30a0 	str.w	r3, [sl, #160]	; 0xa0
Z_GENLIST_REMOVE(slist, snode)
   2b388:	4294      	cmp	r4, r2
   2b38a:	d101      	bne.n	2b390 <friend_purge_old_ack+0x64>
	list->tail = node;
   2b38c:	f8ca 30a4 	str.w	r3, [sl, #164]	; 0xa4
			frnd->queue_size--;
   2b390:	f8da 30a8 	ldr.w	r3, [sl, #168]	; 0xa8
   2b394:	3b01      	subs	r3, #1
   2b396:	f8ca 30a8 	str.w	r3, [sl, #168]	; 0xa8
			buf->frags = NULL;
   2b39a:	2300      	movs	r3, #0
   2b39c:	6023      	str	r3, [r4, #0]
			net_buf_unref(buf);
   2b39e:	4620      	mov	r0, r4
}
   2b3a0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			net_buf_unref(buf);
   2b3a4:	f7f3 bdd6 	b.w	1ef54 <net_buf_unref>
	return net_buf_simple_pull(&buf->b, len);
   2b3a8:	2103      	movs	r1, #3
   2b3aa:	4658      	mov	r0, fp
   2b3ac:	f7f3 fee8 	bl	1f180 <net_buf_simple_pull>
	return net_buf_simple_pull_be16(&buf->b);
   2b3b0:	4658      	mov	r0, fp
   2b3b2:	f001 fae0 	bl	2c976 <net_buf_simple_pull_be16>
	if (src != net_buf_pull_be16(buf)) {
   2b3b6:	4580      	cmp	r8, r0
   2b3b8:	d1d7      	bne.n	2b36a <friend_purge_old_ack+0x3e>
	net_buf_skip(buf, 2); /* skip dst */
   2b3ba:	2102      	movs	r1, #2
   2b3bc:	4620      	mov	r0, r4
   2b3be:	f7ff ff65 	bl	2b28c <net_buf_skip>
	return net_buf_simple_pull_mem(&buf->b, len);
   2b3c2:	2101      	movs	r1, #1
   2b3c4:	4658      	mov	r0, fp
   2b3c6:	f7f3 fef7 	bl	1f1b8 <net_buf_simple_pull_mem>
	if (TRANS_CTL_OP((uint8_t *) net_buf_pull_mem(buf, 1)) != TRANS_CTL_OP_ACK) {
   2b3ca:	7803      	ldrb	r3, [r0, #0]
   2b3cc:	065b      	lsls	r3, r3, #25
   2b3ce:	d1cc      	bne.n	2b36a <friend_purge_old_ack+0x3e>
	return net_buf_simple_pull_be16(&buf->b);
   2b3d0:	4658      	mov	r0, fp
   2b3d2:	f001 fad0 	bl	2c976 <net_buf_simple_pull_be16>
	found = ((net_buf_pull_be16(buf) >> 2) & TRANS_SEQ_ZERO_MASK) ==
   2b3d6:	f3c0 038f 	ubfx	r3, r0, #2, #16
   2b3da:	6838      	ldr	r0, [r7, #0]
   2b3dc:	4043      	eors	r3, r0
   2b3de:	f3c3 030c 	ubfx	r3, r3, #0, #13
   2b3e2:	fab3 f383 	clz	r3, r3
   2b3e6:	095b      	lsrs	r3, r3, #5
   2b3e8:	e7c0      	b.n	2b36c <friend_purge_old_ack+0x40>
	parent->next = child;
   2b3ea:	602b      	str	r3, [r5, #0]
Z_GENLIST_REMOVE(slist, snode)
   2b3ec:	f8da 30a4 	ldr.w	r3, [sl, #164]	; 0xa4
   2b3f0:	429c      	cmp	r4, r3
	list->tail = node;
   2b3f2:	bf08      	it	eq
   2b3f4:	f8ca 50a4 	streq.w	r5, [sl, #164]	; 0xa4
   2b3f8:	e7ca      	b.n	2b390 <friend_purge_old_ack+0x64>
	     cur != NULL; prev = cur, cur = sys_slist_peek_next(cur)) {
   2b3fa:	4625      	mov	r5, r4
   2b3fc:	6824      	ldr	r4, [r4, #0]
   2b3fe:	e79d      	b.n	2b33c <friend_purge_old_ack+0x10>

0002b400 <purge_buffers>:
{
   2b400:	b538      	push	{r3, r4, r5, lr}
   2b402:	4604      	mov	r4, r0
		buf->frags = NULL;
   2b404:	2500      	movs	r5, #0
Z_GENLIST_IS_EMPTY(slist)
   2b406:	6820      	ldr	r0, [r4, #0]
	while (!sys_slist_is_empty(list)) {
   2b408:	b900      	cbnz	r0, 2b40c <purge_buffers+0xc>
}
   2b40a:	bd38      	pop	{r3, r4, r5, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2b40c:	6862      	ldr	r2, [r4, #4]
   2b40e:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   2b410:	6023      	str	r3, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2b412:	4290      	cmp	r0, r2
	list->tail = node;
   2b414:	bf08      	it	eq
   2b416:	6063      	streq	r3, [r4, #4]
		buf->flags &= ~NET_BUF_FRAGS;
   2b418:	7943      	ldrb	r3, [r0, #5]
		buf->frags = NULL;
   2b41a:	6005      	str	r5, [r0, #0]
		buf->flags &= ~NET_BUF_FRAGS;
   2b41c:	f023 0301 	bic.w	r3, r3, #1
   2b420:	7143      	strb	r3, [r0, #5]
		net_buf_unref(buf);
   2b422:	f7f3 fd97 	bl	1ef54 <net_buf_unref>
   2b426:	e7ee      	b.n	2b406 <purge_buffers+0x6>

0002b428 <is_seg>:
{
   2b428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct net_buf *buf = (void *)sys_slist_peek_head(&seg->queue);
   2b42c:	6804      	ldr	r4, [r0, #0]
{
   2b42e:	4689      	mov	r9, r1
   2b430:	4617      	mov	r7, r2
	if (!buf) {
   2b432:	b33c      	cbz	r4, 2b484 <is_seg+0x5c>
	net_buf_simple_save(&buf->b, &state);
   2b434:	f104 0608 	add.w	r6, r4, #8
	state->offset = net_buf_simple_headroom(buf);
   2b438:	4630      	mov	r0, r6
   2b43a:	f001 fac6 	bl	2c9ca <net_buf_simple_headroom>
	net_buf_skip(buf, 5);   /* skip IVI, NID, CTL, TTL, SEQ */
   2b43e:	2105      	movs	r1, #5
   2b440:	4605      	mov	r5, r0
   2b442:	4620      	mov	r0, r4
	state->len = buf->len;
   2b444:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
   2b448:	f7ff ff20 	bl	2b28c <net_buf_skip>
	return net_buf_simple_pull_be16(&buf->b);
   2b44c:	4630      	mov	r0, r6
   2b44e:	f001 fa92 	bl	2c976 <net_buf_simple_pull_be16>
	net_buf_skip(buf, 3);   /* skip DST, OP/AID */
   2b452:	2103      	movs	r1, #3
   2b454:	4680      	mov	r8, r0
   2b456:	4620      	mov	r0, r4
   2b458:	f7ff ff18 	bl	2b28c <net_buf_skip>
   2b45c:	4630      	mov	r0, r6
   2b45e:	f001 fa8a 	bl	2c976 <net_buf_simple_pull_be16>
	buf->data = buf->__buf + state->offset;
   2b462:	6923      	ldr	r3, [r4, #16]
	buf->len = state->len;
   2b464:	f8a4 a00c 	strh.w	sl, [r4, #12]
	buf->data = buf->__buf + state->offset;
   2b468:	fa13 f585 	uxtah	r5, r3, r5
	return ((src == buf_src) && (seq_zero == buf_seq_zero));
   2b46c:	45c1      	cmp	r9, r8
   2b46e:	60a5      	str	r5, [r4, #8]
   2b470:	d106      	bne.n	2b480 <is_seg+0x58>
   2b472:	f3c0 008c 	ubfx	r0, r0, #2, #13
   2b476:	1bc3      	subs	r3, r0, r7
   2b478:	4258      	negs	r0, r3
   2b47a:	4158      	adcs	r0, r3
}
   2b47c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return ((src == buf_src) && (seq_zero == buf_seq_zero));
   2b480:	2000      	movs	r0, #0
   2b482:	e7fb      	b.n	2b47c <is_seg+0x54>
		return false;
   2b484:	4620      	mov	r0, r4
   2b486:	e7f9      	b.n	2b47c <is_seg+0x54>

0002b488 <friend_queue_has_space.part.18>:
static bool friend_queue_has_space(struct bt_mesh_friend *frnd, uint16_t addr,
   2b488:	b538      	push	{r3, r4, r5, lr}
   2b48a:	4604      	mov	r4, r0
   2b48c:	461d      	mov	r5, r3
		if (seq_auth && is_seg(seg, addr, *seq_auth & TRANS_SEQ_ZERO_MASK)) {
   2b48e:	b942      	cbnz	r2, 2b4a2 <friend_queue_has_space.part.18+0x1a>
		total += seg->seg_count;
   2b490:	f894 0098 	ldrb.w	r0, [r4, #152]	; 0x98
	return (CONFIG_BT_MESH_FRIEND_QUEUE_SIZE - total) > seg_count;
   2b494:	f1c0 0010 	rsb	r0, r0, #16
   2b498:	42a8      	cmp	r0, r5
   2b49a:	bf94      	ite	ls
   2b49c:	2000      	movls	r0, #0
   2b49e:	2001      	movhi	r0, #1
}
   2b4a0:	bd38      	pop	{r3, r4, r5, pc}
		if (seq_auth && is_seg(seg, addr, *seq_auth & TRANS_SEQ_ZERO_MASK)) {
   2b4a2:	8812      	ldrh	r2, [r2, #0]
   2b4a4:	3090      	adds	r0, #144	; 0x90
   2b4a6:	f3c2 020c 	ubfx	r2, r2, #0, #13
   2b4aa:	f7ff ffbd 	bl	2b428 <is_seg>
   2b4ae:	2800      	cmp	r0, #0
   2b4b0:	d0ee      	beq.n	2b490 <friend_queue_has_space.part.18+0x8>
   2b4b2:	e7f5      	b.n	2b4a0 <friend_queue_has_space.part.18+0x18>

0002b4b4 <bt_mesh_friend_find>:
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
   2b4b4:	f7e9 bd7a 	b.w	14fac <bt_mesh_friend_find.part.21>

0002b4b8 <bt_mesh_prov_buf_init>:
}

static inline void bt_mesh_prov_buf_init(struct net_buf_simple *buf, uint8_t type)
{
   2b4b8:	b538      	push	{r3, r4, r5, lr}
   2b4ba:	4604      	mov	r4, r0
   2b4bc:	460d      	mov	r5, r1
	net_buf_simple_reserve(buf, PROV_BEARER_BUF_HEADROOM);
   2b4be:	2105      	movs	r1, #5
   2b4c0:	f7f3 fc5e 	bl	1ed80 <net_buf_simple_reserve>
	net_buf_simple_add_u8(buf, type);
   2b4c4:	4629      	mov	r1, r5
   2b4c6:	4620      	mov	r0, r4
}
   2b4c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_simple_add_u8(buf, type);
   2b4cc:	f001 ba95 	b.w	2c9fa <net_buf_simple_add_u8>

0002b4d0 <prov_fail>:
	prov_send_fail_msg(reason);
   2b4d0:	f7ea bd0a 	b.w	15ee8 <prov_send_fail_msg>

0002b4d4 <net_buf_add_u8>:
	return net_buf_simple_add_u8(&buf->b, val);
   2b4d4:	3008      	adds	r0, #8
   2b4d6:	f001 ba90 	b.w	2c9fa <net_buf_simple_add_u8>

0002b4da <pb_adv_reset>:

void pb_adv_reset(void)
{
	reset_adv_link();
   2b4da:	f7eb b95d 	b.w	16798 <reset_adv_link>

0002b4de <clear_tx>:
}
   2b4de:	4770      	bx	lr

0002b4e0 <protocol_timeout>:
	link_closed(PROV_BEARER_LINK_STATUS_TIMEOUT);
   2b4e0:	2001      	movs	r0, #1
   2b4e2:	f7eb be7d 	b.w	171e0 <link_closed>

0002b4e6 <pb_gatt_reset>:

void pb_gatt_reset(void)
{
	reset_state();
   2b4e6:	f7eb be67 	b.w	171b8 <reset_state>

0002b4ea <prov_ccc_changed>:
}
   2b4ea:	4770      	bx	lr

0002b4ec <sub_count_cb>:
	if (sub->net_idx == BT_MESH_KEY_UNUSED) {
   2b4ec:	8b82      	ldrh	r2, [r0, #28]
   2b4ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2b4f2:	429a      	cmp	r2, r3
{
   2b4f4:	b510      	push	{r4, lr}
   2b4f6:	460c      	mov	r4, r1
	if (sub->net_idx == BT_MESH_KEY_UNUSED) {
   2b4f8:	d005      	beq.n	2b506 <sub_count_cb+0x1a>
	return (sub->node_id == BT_MESH_NODE_IDENTITY_RUNNING ||
   2b4fa:	7fc3      	ldrb	r3, [r0, #31]
   2b4fc:	2b01      	cmp	r3, #1
   2b4fe:	d104      	bne.n	2b50a <sub_count_cb+0x1e>
		(*count)++;
   2b500:	6823      	ldr	r3, [r4, #0]
   2b502:	3301      	adds	r3, #1
   2b504:	6023      	str	r3, [r4, #0]
}
   2b506:	2000      	movs	r0, #0
   2b508:	bd10      	pop	{r4, pc}
		bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED);
   2b50a:	f7fe fef3 	bl	2a2f4 <bt_mesh_gatt_proxy_get>
	if (advertise_subnet(sub)) {
   2b50e:	2801      	cmp	r0, #1
   2b510:	d1f9      	bne.n	2b506 <sub_count_cb+0x1a>
   2b512:	e7f5      	b.n	2b500 <sub_count_cb+0x14>

0002b514 <filter_add>:
{
   2b514:	b510      	push	{r4, lr}
	if (addr == BT_MESH_ADDR_UNASSIGNED) {
   2b516:	b179      	cbz	r1, 2b538 <filter_add+0x24>
		if (client->filter[i] == addr) {
   2b518:	8883      	ldrh	r3, [r0, #4]
   2b51a:	4299      	cmp	r1, r3
   2b51c:	d00c      	beq.n	2b538 <filter_add+0x24>
   2b51e:	88c4      	ldrh	r4, [r0, #6]
   2b520:	42a1      	cmp	r1, r4
   2b522:	d009      	beq.n	2b538 <filter_add+0x24>
   2b524:	8902      	ldrh	r2, [r0, #8]
   2b526:	4291      	cmp	r1, r2
   2b528:	d006      	beq.n	2b538 <filter_add+0x24>
		if (client->filter[i] == BT_MESH_ADDR_UNASSIGNED) {
   2b52a:	b113      	cbz	r3, 2b532 <filter_add+0x1e>
   2b52c:	b12c      	cbz	r4, 2b53a <filter_add+0x26>
   2b52e:	b91a      	cbnz	r2, 2b538 <filter_add+0x24>
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
   2b530:	2302      	movs	r3, #2
			client->filter[i] = addr;
   2b532:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   2b536:	8081      	strh	r1, [r0, #4]
}
   2b538:	bd10      	pop	{r4, pc}
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
   2b53a:	2301      	movs	r3, #1
   2b53c:	e7f9      	b.n	2b532 <filter_add+0x1e>

0002b53e <proxy_segment_and_send>:
{
   2b53e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b542:	4688      	mov	r8, r1
   2b544:	4614      	mov	r4, r2
   2b546:	4607      	mov	r7, r0
	mtu = bt_gatt_get_mtu(conn) - 3;
   2b548:	f7fe fe14 	bl	2a174 <bt_gatt_get_mtu>
	if (mtu > msg->len) {
   2b54c:	88a3      	ldrh	r3, [r4, #4]
	mtu = bt_gatt_get_mtu(conn) - 3;
   2b54e:	3803      	subs	r0, #3
   2b550:	b285      	uxth	r5, r0
	if (mtu > msg->len) {
   2b552:	42ab      	cmp	r3, r5
   2b554:	f008 063f 	and.w	r6, r8, #63	; 0x3f
   2b558:	d20a      	bcs.n	2b570 <proxy_segment_and_send+0x32>
		net_buf_simple_push_u8(msg, PDU_HDR(SAR_COMPLETE, type));
   2b55a:	4631      	mov	r1, r6
   2b55c:	4620      	mov	r0, r4
   2b55e:	f001 f9e7 	bl	2c930 <net_buf_simple_push_u8>
		return proxy_send(conn, msg->data, msg->len);
   2b562:	88a2      	ldrh	r2, [r4, #4]
   2b564:	6821      	ldr	r1, [r4, #0]
   2b566:	4638      	mov	r0, r7
}
   2b568:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return proxy_send(conn, msg->data, msg->len);
   2b56c:	f7eb bfc6 	b.w	174fc <proxy_send>
	net_buf_simple_push_u8(msg, PDU_HDR(SAR_FIRST, type));
   2b570:	f046 0140 	orr.w	r1, r6, #64	; 0x40
   2b574:	4620      	mov	r0, r4
   2b576:	f001 f9db 	bl	2c930 <net_buf_simple_push_u8>
	proxy_send(conn, msg->data, mtu);
   2b57a:	462a      	mov	r2, r5
   2b57c:	6821      	ldr	r1, [r4, #0]
   2b57e:	4638      	mov	r0, r7
   2b580:	f7eb ffbc 	bl	174fc <proxy_send>
	net_buf_simple_pull(msg, mtu);
   2b584:	4629      	mov	r1, r5
   2b586:	4620      	mov	r0, r4
   2b588:	f7f3 fdfa 	bl	1f180 <net_buf_simple_pull>
		net_buf_simple_push_u8(msg, PDU_HDR(SAR_CONT, type));
   2b58c:	f046 0680 	orr.w	r6, r6, #128	; 0x80
	while (msg->len) {
   2b590:	88a3      	ldrh	r3, [r4, #4]
   2b592:	b163      	cbz	r3, 2b5ae <proxy_segment_and_send+0x70>
		if (msg->len + 1 < mtu) {
   2b594:	3301      	adds	r3, #1
   2b596:	42ab      	cmp	r3, r5
   2b598:	da0c      	bge.n	2b5b4 <proxy_segment_and_send+0x76>
			net_buf_simple_push_u8(msg, PDU_HDR(SAR_LAST, type));
   2b59a:	f048 01c0 	orr.w	r1, r8, #192	; 0xc0
   2b59e:	4620      	mov	r0, r4
   2b5a0:	f001 f9c6 	bl	2c930 <net_buf_simple_push_u8>
			proxy_send(conn, msg->data, msg->len);
   2b5a4:	88a2      	ldrh	r2, [r4, #4]
   2b5a6:	6821      	ldr	r1, [r4, #0]
   2b5a8:	4638      	mov	r0, r7
   2b5aa:	f7eb ffa7 	bl	174fc <proxy_send>
}
   2b5ae:	2000      	movs	r0, #0
   2b5b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_simple_push_u8(msg, PDU_HDR(SAR_CONT, type));
   2b5b4:	4631      	mov	r1, r6
   2b5b6:	4620      	mov	r0, r4
   2b5b8:	f001 f9ba 	bl	2c930 <net_buf_simple_push_u8>
		proxy_send(conn, msg->data, mtu);
   2b5bc:	6821      	ldr	r1, [r4, #0]
   2b5be:	462a      	mov	r2, r5
   2b5c0:	4638      	mov	r0, r7
   2b5c2:	f7eb ff9b 	bl	174fc <proxy_send>
		net_buf_simple_pull(msg, mtu);
   2b5c6:	4629      	mov	r1, r5
   2b5c8:	4620      	mov	r0, r4
   2b5ca:	f7f3 fdd9 	bl	1f180 <net_buf_simple_pull>
   2b5ce:	e7df      	b.n	2b590 <proxy_segment_and_send+0x52>

0002b5d0 <beacon_send>:
{
   2b5d0:	b530      	push	{r4, r5, lr}
   2b5d2:	b08b      	sub	sp, #44	; 0x2c
	NET_BUF_SIMPLE_DEFINE(buf, 23);
   2b5d4:	ab04      	add	r3, sp, #16
   2b5d6:	f44f 12b8 	mov.w	r2, #1507328	; 0x170000
{
   2b5da:	4604      	mov	r4, r0
   2b5dc:	460d      	mov	r5, r1
	net_buf_simple_reserve(&buf, 1);
   2b5de:	a801      	add	r0, sp, #4
   2b5e0:	2101      	movs	r1, #1
	NET_BUF_SIMPLE_DEFINE(buf, 23);
   2b5e2:	e9cd 2302 	strd	r2, r3, [sp, #8]
   2b5e6:	9301      	str	r3, [sp, #4]
	net_buf_simple_reserve(&buf, 1);
   2b5e8:	f7f3 fbca 	bl	1ed80 <net_buf_simple_reserve>
	bt_mesh_beacon_create(sub, &buf);
   2b5ec:	a901      	add	r1, sp, #4
   2b5ee:	4628      	mov	r0, r5
   2b5f0:	f7e2 fc70 	bl	ded4 <bt_mesh_beacon_create>
	return proxy_segment_and_send(conn, BT_MESH_PROXY_BEACON, &buf);
   2b5f4:	aa01      	add	r2, sp, #4
   2b5f6:	2101      	movs	r1, #1
   2b5f8:	4620      	mov	r0, r4
   2b5fa:	f7ff ffa0 	bl	2b53e <proxy_segment_and_send>
}
   2b5fe:	b00b      	add	sp, #44	; 0x2c
   2b600:	bd30      	pop	{r4, r5, pc}

0002b602 <send_beacon_cb>:
{
   2b602:	460b      	mov	r3, r1
	return beacon_send(client->conn, sub);
   2b604:	4601      	mov	r1, r0
   2b606:	6818      	ldr	r0, [r3, #0]
   2b608:	f7ff bfe2 	b.w	2b5d0 <beacon_send>

0002b60c <proxy_ccc_changed>:
   2b60c:	4770      	bx	lr

0002b60e <node_id_start>:
	sub->node_id = BT_MESH_NODE_IDENTITY_RUNNING;
   2b60e:	2301      	movs	r3, #1
{
   2b610:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   2b614:	4604      	mov	r4, r0
	sub->node_id = BT_MESH_NODE_IDENTITY_RUNNING;
   2b616:	77c3      	strb	r3, [r0, #31]
   2b618:	f001 ff14 	bl	2d444 <z_impl_k_uptime_ticks>
   2b61c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   2b620:	fba0 bc05 	umull	fp, ip, r0, r5
   2b624:	fb05 cc01 	mla	ip, r5, r1, ip
   2b628:	ea4f 32db 	mov.w	r2, fp, lsr #15
   2b62c:	ea42 424c 	orr.w	r2, r2, ip, lsl #17
	return (uint32_t)k_uptime_get();
   2b630:	6222      	str	r2, [r4, #32]
}
   2b632:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}

0002b636 <bt_mesh_proxy_identity_stop>:
	sub->node_id = BT_MESH_NODE_IDENTITY_STOPPED;
   2b636:	2300      	movs	r3, #0
   2b638:	77c3      	strb	r3, [r0, #31]
	sub->node_id_start = 0U;
   2b63a:	6203      	str	r3, [r0, #32]
}
   2b63c:	4770      	bx	lr

0002b63e <bt_mesh_proxy_addr_add>:
	if (client->filter_type == WHITELIST) {
   2b63e:	f810 3c3e 	ldrb.w	r3, [r0, #-62]
   2b642:	2b01      	cmp	r3, #1
{
   2b644:	460a      	mov	r2, r1
	if (client->filter_type == WHITELIST) {
   2b646:	d102      	bne.n	2b64e <bt_mesh_proxy_addr_add+0x10>
		filter_add(client, addr);
   2b648:	3848      	subs	r0, #72	; 0x48
   2b64a:	f7ff bf63 	b.w	2b514 <filter_add>
	} else if (client->filter_type == BLACKLIST) {
   2b64e:	2b02      	cmp	r3, #2
   2b650:	d111      	bne.n	2b676 <bt_mesh_proxy_addr_add+0x38>
	if (addr == BT_MESH_ADDR_UNASSIGNED) {
   2b652:	b181      	cbz	r1, 2b676 <bt_mesh_proxy_addr_add+0x38>
		if (client->filter[i] == addr) {
   2b654:	f830 1c44 	ldrh.w	r1, [r0, #-68]
   2b658:	4291      	cmp	r1, r2
   2b65a:	d00d      	beq.n	2b678 <bt_mesh_proxy_addr_add+0x3a>
   2b65c:	f830 1c42 	ldrh.w	r1, [r0, #-66]
   2b660:	4291      	cmp	r1, r2
   2b662:	d00b      	beq.n	2b67c <bt_mesh_proxy_addr_add+0x3e>
   2b664:	f830 1c40 	ldrh.w	r1, [r0, #-64]
   2b668:	4291      	cmp	r1, r2
   2b66a:	d104      	bne.n	2b676 <bt_mesh_proxy_addr_add+0x38>
			client->filter[i] = BT_MESH_ADDR_UNASSIGNED;
   2b66c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   2b670:	2300      	movs	r3, #0
   2b672:	f820 3c44 	strh.w	r3, [r0, #-68]
}
   2b676:	4770      	bx	lr
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
   2b678:	2300      	movs	r3, #0
   2b67a:	e7f7      	b.n	2b66c <bt_mesh_proxy_addr_add+0x2e>
   2b67c:	2301      	movs	r3, #1
   2b67e:	e7f5      	b.n	2b66c <bt_mesh_proxy_addr_add+0x2e>

0002b680 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, uint16_t mem_size, uint16_t mem_count,
	      void **mem_head)
{
   2b680:	b530      	push	{r4, r5, lr}
	*mem_head = mem_pool;
   2b682:	6018      	str	r0, [r3, #0]

	/* Store free mem_count after the list's next pointer at an 32-bit
	 * aligned memory location to ensure atomic read/write (in ARM for now).
	 */
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   2b684:	1dc3      	adds	r3, r0, #7
   2b686:	f023 0303 	bic.w	r3, r3, #3
__ssp_bos_icheck3(memset, void *, int)
   2b68a:	2400      	movs	r4, #0
   2b68c:	801a      	strh	r2, [r3, #0]

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   2b68e:	3a01      	subs	r2, #1
   2b690:	b292      	uxth	r2, r2
   2b692:	fb01 f302 	mul.w	r3, r1, r2
   2b696:	50c4      	str	r4, [r0, r3]
		     sizeof(mem_pool));
	while (mem_count--) {
   2b698:	f64f 74ff 	movw	r4, #65535	; 0xffff
   2b69c:	3a01      	subs	r2, #1
   2b69e:	b292      	uxth	r2, r2
   2b6a0:	42a2      	cmp	r2, r4
   2b6a2:	d100      	bne.n	2b6a6 <mem_init+0x26>
		next = (uint32_t)((uint8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
   2b6a4:	bd30      	pop	{r4, r5, pc}
			       (mem_size * (mem_count + 1)));
   2b6a6:	fb02 1301 	mla	r3, r2, r1, r1
		next = (uint32_t)((uint8_t *) mem_pool +
   2b6aa:	18c5      	adds	r5, r0, r3
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
   2b6ac:	1a5b      	subs	r3, r3, r1
   2b6ae:	50c5      	str	r5, [r0, r3]
   2b6b0:	e7f4      	b.n	2b69c <mem_init+0x1c>

0002b6b2 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
	if (*mem_head) {
   2b6b2:	6803      	ldr	r3, [r0, #0]
{
   2b6b4:	b510      	push	{r4, lr}
	if (*mem_head) {
   2b6b6:	b15b      	cbz	r3, 2b6d0 <mem_acquire+0x1e>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
   2b6b8:	681a      	ldr	r2, [r3, #0]

		/* Store free mem_count after the list's next pointer */
		if (head) {
   2b6ba:	b142      	cbz	r2, 2b6ce <mem_acquire+0x1c>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   2b6bc:	1dd9      	adds	r1, r3, #7
   2b6be:	f021 0103 	bic.w	r1, r1, #3
   2b6c2:	880c      	ldrh	r4, [r1, #0]
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
   2b6c4:	1dd1      	adds	r1, r2, #7
   2b6c6:	f021 0103 	bic.w	r1, r1, #3
		free_count--;
   2b6ca:	3c01      	subs	r4, #1
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
   2b6cc:	800c      	strh	r4, [r1, #0]
				free_count;
		}

		*mem_head = head;
   2b6ce:	6002      	str	r2, [r0, #0]
		return mem;
	}

	return NULL;
}
   2b6d0:	4618      	mov	r0, r3
   2b6d2:	bd10      	pop	{r4, pc}

0002b6d4 <mem_release>:
void mem_release(void *mem, void **mem_head)
{
	uint16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
   2b6d4:	680b      	ldr	r3, [r1, #0]
{
   2b6d6:	b510      	push	{r4, lr}
	if (*mem_head) {
   2b6d8:	b11b      	cbz	r3, 2b6e2 <mem_release+0xe>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   2b6da:	3307      	adds	r3, #7
   2b6dc:	f023 0303 	bic.w	r3, r3, #3
   2b6e0:	881b      	ldrh	r3, [r3, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2b6e2:	680c      	ldr	r4, [r1, #0]
   2b6e4:	4602      	mov	r2, r0
					       sizeof(mem_head)));
	}
	free_count++;
   2b6e6:	3301      	adds	r3, #1
   2b6e8:	f842 4b07 	str.w	r4, [r2], #7

	memcpy(mem, mem_head, sizeof(mem));

	/* Store free mem_count after the list's next pointer */
	*((uint16_t *)MROUND((uint8_t *)mem + sizeof(mem))) = free_count;
   2b6ec:	f022 0203 	bic.w	r2, r2, #3
   2b6f0:	8013      	strh	r3, [r2, #0]

	*mem_head = mem;
   2b6f2:	6008      	str	r0, [r1, #0]
}
   2b6f4:	bd10      	pop	{r4, pc}

0002b6f6 <mem_get>:
}

void *mem_get(void *mem_pool, uint16_t mem_size, uint16_t index)
{
	return ((void *)((uint8_t *)mem_pool + (mem_size * index)));
}
   2b6f6:	fb02 0001 	mla	r0, r2, r1, r0
   2b6fa:	4770      	bx	lr

0002b6fc <mem_index_get>:

uint16_t mem_index_get(void *mem, void *mem_pool, uint16_t mem_size)
{
	return ((uint16_t)((uint8_t *)mem - (uint8_t *)mem_pool) / mem_size);
   2b6fc:	1a40      	subs	r0, r0, r1
   2b6fe:	b280      	uxth	r0, r0
}
   2b700:	fbb0 f0f2 	udiv	r0, r0, r2
   2b704:	4770      	bx	lr

0002b706 <mem_rcopy>:
/**
 * @brief  Copy bytes in reverse
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(uint8_t *dst, uint8_t const *src, uint16_t len)
{
   2b706:	b510      	push	{r4, lr}
	src += len;
   2b708:	4411      	add	r1, r2
	while (len--) {
   2b70a:	3801      	subs	r0, #1
   2b70c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2b710:	3a01      	subs	r2, #1
   2b712:	b292      	uxth	r2, r2
   2b714:	429a      	cmp	r2, r3
   2b716:	d100      	bne.n	2b71a <mem_rcopy+0x14>
		*dst++ = *--src;
	}
}
   2b718:	bd10      	pop	{r4, pc}
		*dst++ = *--src;
   2b71a:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   2b71e:	f800 4f01 	strb.w	r4, [r0, #1]!
   2b722:	e7f5      	b.n	2b710 <mem_rcopy+0xa>

0002b724 <mem_nz>:
 * @brief Determine if src[0..len-1] contains one or more non-zero bytes
 * @return 0 if all bytes are zero; otherwise 1
 */
uint8_t mem_nz(uint8_t *src, uint16_t len)
{
	while (len--) {
   2b724:	4401      	add	r1, r0
   2b726:	4288      	cmp	r0, r1
   2b728:	d101      	bne.n	2b72e <mem_nz+0xa>
		if (*src++) {
			return 1;
		}
	}

	return 0;
   2b72a:	2000      	movs	r0, #0
   2b72c:	4770      	bx	lr
		if (*src++) {
   2b72e:	f810 3b01 	ldrb.w	r3, [r0], #1
   2b732:	2b00      	cmp	r3, #0
   2b734:	d0f7      	beq.n	2b726 <mem_nz+0x2>
			return 1;
   2b736:	2001      	movs	r0, #1
}
   2b738:	4770      	bx	lr

0002b73a <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
   2b73a:	6010      	str	r0, [r2, #0]
   2b73c:	6008      	str	r0, [r1, #0]

	return link;
}
   2b73e:	4770      	bx	lr

0002b740 <memq_deinit>:
memq_link_t *memq_deinit(memq_link_t **head, memq_link_t **tail)
{
	memq_link_t *old_head;

	/* If head and tail are not equal, then queue is not empty */
	if (*head != *tail) {
   2b740:	6803      	ldr	r3, [r0, #0]
   2b742:	680a      	ldr	r2, [r1, #0]
   2b744:	4293      	cmp	r3, r2
   2b746:	f04f 0200 	mov.w	r2, #0
		return NULL;
   2b74a:	bf12      	itee	ne
   2b74c:	4613      	movne	r3, r2
	}

	old_head = *head;
	*head = *tail = NULL;
   2b74e:	600a      	streq	r2, [r1, #0]
   2b750:	6002      	streq	r2, [r0, #0]

	return old_head;
}
   2b752:	4618      	mov	r0, r3
   2b754:	4770      	bx	lr

0002b756 <memq_enqueue>:
 * @param mem[in]      The memory payload to be enqueued. Pointed to by old tail
 * @param tail[in,out] Tail of queue. Will be updated to point to link
 * @return             New tail. Note: Does not point to the new mem
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
   2b756:	b510      	push	{r4, lr}
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
   2b758:	6814      	ldr	r4, [r2, #0]
   2b75a:	6020      	str	r0, [r4, #0]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
   2b75c:	6814      	ldr	r4, [r2, #0]
   2b75e:	6061      	str	r1, [r4, #4]

	/* Update the tail-pointer to point to the new tail element.
	 * The new tail-element is not expected to point to anything sensible
	 */
	*tail = link;
   2b760:	6010      	str	r0, [r2, #0]

	return link;
}
   2b762:	bd10      	pop	{r4, pc}

0002b764 <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
   2b764:	4288      	cmp	r0, r1
   2b766:	d003      	beq.n	2b770 <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
   2b768:	b11a      	cbz	r2, 2b772 <memq_peek+0xe>
		*mem = head->mem;
   2b76a:	6843      	ldr	r3, [r0, #4]
   2b76c:	6013      	str	r3, [r2, #0]
   2b76e:	4770      	bx	lr
		return NULL;
   2b770:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
   2b772:	4770      	bx	lr

0002b774 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
   2b774:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
   2b776:	4283      	cmp	r3, r0
   2b778:	d009      	beq.n	2b78e <memq_dequeue+0x1a>
	if (mem) {
   2b77a:	b122      	cbz	r2, 2b786 <memq_dequeue+0x12>
		*mem = head->mem;
   2b77c:	6858      	ldr	r0, [r3, #4]
   2b77e:	6010      	str	r0, [r2, #0]
	if (old_head == NULL) {
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
   2b780:	681a      	ldr	r2, [r3, #0]
   2b782:	600a      	str	r2, [r1, #0]

	return old_head;
   2b784:	e001      	b.n	2b78a <memq_dequeue+0x16>
	if (old_head == NULL) {
   2b786:	2b00      	cmp	r3, #0
   2b788:	d1fa      	bne.n	2b780 <memq_dequeue+0xc>
}
   2b78a:	4618      	mov	r0, r3
   2b78c:	4770      	bx	lr
		return NULL; /* queue is empty */
   2b78e:	2300      	movs	r3, #0
   2b790:	e7fb      	b.n	2b78a <memq_dequeue+0x16>

0002b792 <util_ones_count_get>:
 * @param octets_len Must not be bigger than 255/8 = 31 bytes
 *
 * @return popcnt of 'octets'
 */
uint8_t util_ones_count_get(uint8_t *octets, uint8_t octets_len)
{
   2b792:	b510      	push	{r4, lr}
   2b794:	1e42      	subs	r2, r0, #1
	uint8_t one_count = 0U;
   2b796:	2000      	movs	r0, #0

	while (octets_len--) {
   2b798:	3901      	subs	r1, #1
   2b79a:	b2c9      	uxtb	r1, r1
   2b79c:	29ff      	cmp	r1, #255	; 0xff
   2b79e:	d100      	bne.n	2b7a2 <util_ones_count_get+0x10>
		}
		octets++;
	}

	return one_count;
}
   2b7a0:	bd10      	pop	{r4, pc}
		bite = *octets;
   2b7a2:	f812 3f01 	ldrb.w	r3, [r2, #1]!
		while (bite) {
   2b7a6:	2b00      	cmp	r3, #0
   2b7a8:	d0f6      	beq.n	2b798 <util_ones_count_get+0x6>
			bite &= (bite - 1);
   2b7aa:	b25b      	sxtb	r3, r3
   2b7ac:	1e5c      	subs	r4, r3, #1
   2b7ae:	4023      	ands	r3, r4
			one_count++;
   2b7b0:	3001      	adds	r0, #1
			bite &= (bite - 1);
   2b7b2:	b2db      	uxtb	r3, r3
			one_count++;
   2b7b4:	b2c0      	uxtb	r0, r0
   2b7b6:	e7f6      	b.n	2b7a6 <util_ones_count_get+0x14>

0002b7b8 <ticks_to_expire_prep>:
{
   2b7b8:	b530      	push	{r4, r5, lr}
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   2b7ba:	1a55      	subs	r5, r2, r1
   2b7bc:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
   2b7c0:	6883      	ldr	r3, [r0, #8]
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
   2b7c2:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   2b7c4:	d109      	bne.n	2b7da <ticks_to_expire_prep+0x22>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   2b7c6:	f025 427f 	bic.w	r2, r5, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   2b7ca:	441a      	add	r2, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
   2b7cc:	42a2      	cmp	r2, r4
   2b7ce:	d90e      	bls.n	2b7ee <ticks_to_expire_prep+0x36>
		ticks_to_expire -= ticks_to_expire_minus;
   2b7d0:	1b12      	subs	r2, r2, r4
		ticks_to_expire_minus = 0U;
   2b7d2:	2400      	movs	r4, #0
	ticker->ticks_to_expire = ticks_to_expire;
   2b7d4:	6082      	str	r2, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   2b7d6:	6144      	str	r4, [r0, #20]
}
   2b7d8:	bd30      	pop	{r4, r5, pc}
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   2b7da:	1a8a      	subs	r2, r1, r2
   2b7dc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
   2b7e0:	4293      	cmp	r3, r2
   2b7e2:	d901      	bls.n	2b7e8 <ticks_to_expire_prep+0x30>
			ticks_to_expire -= delta_current_start;
   2b7e4:	1a9a      	subs	r2, r3, r2
   2b7e6:	e7f1      	b.n	2b7cc <ticks_to_expire_prep+0x14>
			ticks_to_expire_minus +=
   2b7e8:	4422      	add	r2, r4
   2b7ea:	1ad4      	subs	r4, r2, r3
			ticks_to_expire = 0U;
   2b7ec:	2200      	movs	r2, #0
		ticks_to_expire_minus -= ticks_to_expire;
   2b7ee:	1aa4      	subs	r4, r4, r2
		ticks_to_expire = 0U;
   2b7f0:	2200      	movs	r2, #0
   2b7f2:	e7ef      	b.n	2b7d4 <ticks_to_expire_prep+0x1c>

0002b7f4 <ticker_job_op_cb>:
{
   2b7f4:	4603      	mov	r3, r0
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   2b7f6:	2200      	movs	r2, #0
   2b7f8:	701a      	strb	r2, [r3, #0]
	if (user_op->fp_op_func) {
   2b7fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	user_op->status = status;
   2b7fc:	6299      	str	r1, [r3, #40]	; 0x28
{
   2b7fe:	4608      	mov	r0, r1
	if (user_op->fp_op_func) {
   2b800:	b10a      	cbz	r2, 2b806 <ticker_job_op_cb+0x12>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   2b802:	6b19      	ldr	r1, [r3, #48]	; 0x30
   2b804:	4710      	bx	r2
}
   2b806:	4770      	bx	lr

0002b808 <ticker_job_list_insert>:
{
   2b808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b80c:	b08b      	sub	sp, #44	; 0x2c
	node = &instance->nodes[0];
   2b80e:	6803      	ldr	r3, [r0, #0]
   2b810:	9302      	str	r3, [sp, #8]
	count_user = instance->count_user;
   2b812:	f890 b009 	ldrb.w	fp, [r0, #9]
	users = &instance->users[0];
   2b816:	6843      	ldr	r3, [r0, #4]
   2b818:	9307      	str	r3, [sp, #28]
{
   2b81a:	4607      	mov	r7, r0
   2b81c:	468a      	mov	sl, r1
	while (count_user--) {
   2b81e:	f10b 33ff 	add.w	r3, fp, #4294967295
   2b822:	fa5f fb83 	uxtb.w	fp, r3
   2b826:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   2b82a:	d102      	bne.n	2b832 <ticker_job_list_insert+0x2a>
}
   2b82c:	b00b      	add	sp, #44	; 0x2c
   2b82e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		user = &users[count_user];
   2b832:	9b07      	ldr	r3, [sp, #28]
   2b834:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
   2b838:	9301      	str	r3, [sp, #4]
		user_ops = (void *)&user->user_op[0];
   2b83a:	685b      	ldr	r3, [r3, #4]
   2b83c:	9304      	str	r3, [sp, #16]
		user_ops_first = user->first;
   2b83e:	9b01      	ldr	r3, [sp, #4]
   2b840:	785e      	ldrb	r6, [r3, #1]
		while ((insert_head != TICKER_NULL) ||
   2b842:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   2b846:	d071      	beq.n	2b92c <ticker_job_list_insert+0x124>
				ticker = &node[id_insert];
   2b848:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
   2b84c:	011b      	lsls	r3, r3, #4
   2b84e:	9a02      	ldr	r2, [sp, #8]
   2b850:	46d0      	mov	r8, sl
				insert_head = ticker->next;
   2b852:	f812 a003 	ldrb.w	sl, [r2, r3]
				ticker = &node[id_insert];
   2b856:	18d4      	adds	r4, r2, r3
				user_op = NULL;
   2b858:	2500      	movs	r5, #0
	ticker->next = TICKER_NULL;
   2b85a:	23ff      	movs	r3, #255	; 0xff
   2b85c:	7023      	strb	r3, [r4, #0]
	ticker_new = &node[id];
   2b85e:	fa0f f288 	sxth.w	r2, r8
	node = &instance->nodes[0];
   2b862:	6839      	ldr	r1, [r7, #0]
	previous = TICKER_NULL;
   2b864:	9303      	str	r3, [sp, #12]
	ticker_new = &node[id];
   2b866:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   2b86a:	0112      	lsls	r2, r2, #4
   2b86c:	eb01 0902 	add.w	r9, r1, r2
   2b870:	9205      	str	r2, [sp, #20]
	ticks_to_expire = ticker_new->ticks_to_expire;
   2b872:	f8d9 0008 	ldr.w	r0, [r9, #8]
	current = instance->ticker_id_head;
   2b876:	7f7a      	ldrb	r2, [r7, #29]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   2b878:	2aff      	cmp	r2, #255	; 0xff
   2b87a:	d00b      	beq.n	2b894 <ticker_job_list_insert+0x8c>
		(ticker_current = &node[current])->ticks_to_expire))) {
   2b87c:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
   2b880:	ea4f 130e 	mov.w	r3, lr, lsl #4
   2b884:	9306      	str	r3, [sp, #24]
   2b886:	18cb      	adds	r3, r1, r3
   2b888:	469e      	mov	lr, r3
		(ticks_to_expire_current =
   2b88a:	f8d3 c008 	ldr.w	ip, [r3, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   2b88e:	4560      	cmp	r0, ip
   2b890:	f080 8082 	bcs.w	2b998 <ticker_job_list_insert+0x190>
	ticker_new->next = current;
   2b894:	9b05      	ldr	r3, [sp, #20]
	ticker_new->ticks_to_expire = ticks_to_expire;
   2b896:	f8c9 0008 	str.w	r0, [r9, #8]
	ticker_new->next = current;
   2b89a:	54ca      	strb	r2, [r1, r3]
	if (previous == TICKER_NULL) {
   2b89c:	9b03      	ldr	r3, [sp, #12]
   2b89e:	2bff      	cmp	r3, #255	; 0xff
		node[previous].next = id;
   2b8a0:	bf17      	itett	ne
   2b8a2:	f9bd 300c 	ldrshne.w	r3, [sp, #12]
		instance->ticker_id_head = id;
   2b8a6:	f887 801d 	strbeq.w	r8, [r7, #29]
		node[previous].next = id;
   2b8aa:	eb03 0343 	addne.w	r3, r3, r3, lsl #1
   2b8ae:	011b      	lslne	r3, r3, #4
   2b8b0:	bf18      	it	ne
   2b8b2:	f801 8003 	strbne.w	r8, [r1, r3]
	if (current != TICKER_NULL) {
   2b8b6:	2aff      	cmp	r2, #255	; 0xff
   2b8b8:	d006      	beq.n	2b8c8 <ticker_job_list_insert+0xc0>
		node[current].ticks_to_expire -= ticks_to_expire;
   2b8ba:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   2b8be:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   2b8c2:	6893      	ldr	r3, [r2, #8]
   2b8c4:	1a18      	subs	r0, r3, r0
   2b8c6:	6090      	str	r0, [r2, #8]
	ticker->req = ticker->ack + 1;
   2b8c8:	78a3      	ldrb	r3, [r4, #2]
   2b8ca:	3301      	adds	r3, #1
   2b8cc:	7063      	strb	r3, [r4, #1]
			if (user_op) {
   2b8ce:	2d00      	cmp	r5, #0
   2b8d0:	d0b7      	beq.n	2b842 <ticker_job_list_insert+0x3a>
				ticker_job_op_cb(user_op, status);
   2b8d2:	2100      	movs	r1, #0
   2b8d4:	4628      	mov	r0, r5
   2b8d6:	f7ff ff8d 	bl	2b7f4 <ticker_job_op_cb>
				if ((ticker->ticks_periodic == 0U) &&
   2b8da:	6863      	ldr	r3, [r4, #4]
   2b8dc:	2b00      	cmp	r3, #0
   2b8de:	d1b0      	bne.n	2b842 <ticker_job_list_insert+0x3a>
					ticker->fp_op_func =
   2b8e0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   2b8e2:	6223      	str	r3, [r4, #32]
					ticker->op_context =
   2b8e4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   2b8e6:	6263      	str	r3, [r4, #36]	; 0x24
   2b8e8:	e7ab      	b.n	2b842 <ticker_job_list_insert+0x3a>
				user_op = &user_ops[user_ops_first];
   2b8ea:	9a04      	ldr	r2, [sp, #16]
   2b8ec:	2334      	movs	r3, #52	; 0x34
   2b8ee:	fb16 f303 	smulbb	r3, r6, r3
   2b8f2:	18d5      	adds	r5, r2, r3
				if (first == user->count_user_op) {
   2b8f4:	9a01      	ldr	r2, [sp, #4]
				first = user_ops_first + 1;
   2b8f6:	3601      	adds	r6, #1
				if (first == user->count_user_op) {
   2b8f8:	7812      	ldrb	r2, [r2, #0]
				first = user_ops_first + 1;
   2b8fa:	b2f6      	uxtb	r6, r6
					first = 0U;
   2b8fc:	42b2      	cmp	r2, r6
   2b8fe:	bf08      	it	eq
   2b900:	2600      	moveq	r6, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   2b902:	9a04      	ldr	r2, [sp, #16]
   2b904:	5cd3      	ldrb	r3, [r2, r3]
   2b906:	2b04      	cmp	r3, #4
   2b908:	d110      	bne.n	2b92c <ticker_job_list_insert+0x124>
				id_insert = user_op->id;
   2b90a:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
   2b90e:	9b02      	ldr	r3, [sp, #8]
   2b910:	eb08 0448 	add.w	r4, r8, r8, lsl #1
   2b914:	eb03 1404 	add.w	r4, r3, r4, lsl #4
				if (((ticker->req -
   2b918:	7863      	ldrb	r3, [r4, #1]
				      ticker->ack) & 0xff) != 0U) {
   2b91a:	78a2      	ldrb	r2, [r4, #2]
				if (((ticker->req -
   2b91c:	1a9b      	subs	r3, r3, r2
   2b91e:	f013 0fff 	tst.w	r3, #255	; 0xff
   2b922:	d008      	beq.n	2b936 <ticker_job_list_insert+0x12e>
					ticker_job_op_cb(user_op,
   2b924:	2101      	movs	r1, #1
   2b926:	4628      	mov	r0, r5
   2b928:	f7ff ff64 	bl	2b7f4 <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
   2b92c:	9b01      	ldr	r3, [sp, #4]
   2b92e:	789b      	ldrb	r3, [r3, #2]
   2b930:	42b3      	cmp	r3, r6
   2b932:	d1da      	bne.n	2b8ea <ticker_job_list_insert+0xe2>
   2b934:	e773      	b.n	2b81e <ticker_job_list_insert+0x16>
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   2b936:	8aab      	ldrh	r3, [r5, #20]
				ticker_job_op_start(ticker, user_op,
   2b938:	6979      	ldr	r1, [r7, #20]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   2b93a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   2b93e:	4293      	cmp	r3, r2
   2b940:	d006      	beq.n	2b950 <ticker_job_list_insert+0x148>
		ticker->must_expire =
   2b942:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2b946:	1a98      	subs	r0, r3, r2
   2b948:	4242      	negs	r2, r0
   2b94a:	4142      	adcs	r2, r0
   2b94c:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
	ticker->ext_data = start->ext_data;
   2b950:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   2b952:	62a2      	str	r2, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
   2b954:	68ea      	ldr	r2, [r5, #12]
   2b956:	6062      	str	r2, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   2b958:	692a      	ldr	r2, [r5, #16]
   2b95a:	6222      	str	r2, [r4, #32]
	ticker->lazy_periodic =
   2b95c:	f64f 72fd 	movw	r2, #65533	; 0xfffd
   2b960:	4293      	cmp	r3, r2
   2b962:	bf88      	it	hi
   2b964:	2300      	movhi	r3, #0
   2b966:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
   2b968:	69ab      	ldr	r3, [r5, #24]
   2b96a:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
   2b96c:	69eb      	ldr	r3, [r5, #28]
   2b96e:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
   2b970:	6a2b      	ldr	r3, [r5, #32]
   2b972:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire_minus = 0U;
   2b974:	f04f 0900 	mov.w	r9, #0
	ticker->ticks_to_expire = start->ticks_first;
   2b978:	68ab      	ldr	r3, [r5, #8]
   2b97a:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0U;
   2b97c:	f8c4 9014 	str.w	r9, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   2b980:	686a      	ldr	r2, [r5, #4]
   2b982:	4620      	mov	r0, r4
   2b984:	f7ff ff18 	bl	2b7b8 <ticks_to_expire_prep>
	ticker->force = 1U;
   2b988:	f04f 0301 	mov.w	r3, #1
	ticker->remainder_current = 0U;
   2b98c:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
   2b990:	f8a4 901e 	strh.w	r9, [r4, #30]
	ticker->force = 1U;
   2b994:	70e3      	strb	r3, [r4, #3]
   2b996:	e760      	b.n	2b85a <ticker_job_list_insert+0x52>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
   2b998:	ebb0 000c 	subs.w	r0, r0, ip
   2b99c:	d10a      	bne.n	2b9b4 <ticker_job_list_insert+0x1ac>
   2b99e:	f8b9 301e 	ldrh.w	r3, [r9, #30]
   2b9a2:	9308      	str	r3, [sp, #32]
   2b9a4:	f8be 301e 	ldrh.w	r3, [lr, #30]
   2b9a8:	9309      	str	r3, [sp, #36]	; 0x24
   2b9aa:	9b08      	ldr	r3, [sp, #32]
   2b9ac:	469e      	mov	lr, r3
   2b9ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2b9b0:	459e      	cmp	lr, r3
   2b9b2:	d803      	bhi.n	2b9bc <ticker_job_list_insert+0x1b4>
		current = ticker_current->next;
   2b9b4:	9b06      	ldr	r3, [sp, #24]
   2b9b6:	9203      	str	r2, [sp, #12]
   2b9b8:	5cca      	ldrb	r2, [r1, r3]
   2b9ba:	e75d      	b.n	2b878 <ticker_job_list_insert+0x70>
		(ticks_to_expire_current =
   2b9bc:	4660      	mov	r0, ip
   2b9be:	e769      	b.n	2b894 <ticker_job_list_insert+0x8c>

0002b9c0 <ticker_worker>:
{
   2b9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
   2b9c4:	7f86      	ldrb	r6, [r0, #30]
	instance->worker_trigger = 1U;
   2b9c6:	2301      	movs	r3, #1
{
   2b9c8:	b08b      	sub	sp, #44	; 0x2c
   2b9ca:	4605      	mov	r5, r0
	instance->worker_trigger = 1U;
   2b9cc:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
   2b9ce:	b91e      	cbnz	r6, 2b9d8 <ticker_worker+0x18>
	if (instance->ticker_id_head == TICKER_NULL) {
   2b9d0:	7f43      	ldrb	r3, [r0, #29]
   2b9d2:	2bff      	cmp	r3, #255	; 0xff
   2b9d4:	d103      	bne.n	2b9de <ticker_worker+0x1e>
		instance->worker_trigger = 0U;
   2b9d6:	77c6      	strb	r6, [r0, #31]
}
   2b9d8:	b00b      	add	sp, #44	; 0x2c
   2b9da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
   2b9de:	f7f2 fc19 	bl	1e214 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   2b9e2:	696b      	ldr	r3, [r5, #20]
	ticker_id_head = instance->ticker_id_head;
   2b9e4:	7f6f      	ldrb	r7, [r5, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   2b9e6:	1ac0      	subs	r0, r0, r3
	if (instance->ticker_id_slot_previous != TICKER_NULL) {
   2b9e8:	7f2b      	ldrb	r3, [r5, #28]
   2b9ea:	2bff      	cmp	r3, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   2b9ec:	f020 4b7f 	bic.w	fp, r0, #4278190080	; 0xff000000
	if (instance->ticker_id_slot_previous != TICKER_NULL) {
   2b9f0:	d004      	beq.n	2b9fc <ticker_worker+0x3c>
		if (instance->ticks_slot_previous > ticks_elapsed) {
   2b9f2:	69ae      	ldr	r6, [r5, #24]
	uint8_t slot_reserved = 0;
   2b9f4:	455e      	cmp	r6, fp
   2b9f6:	bf94      	ite	ls
   2b9f8:	2600      	movls	r6, #0
   2b9fa:	2601      	movhi	r6, #1
	ticks_expired = 0U;
   2b9fc:	2300      	movs	r3, #0
	node = &instance->nodes[0];
   2b9fe:	f8d5 8000 	ldr.w	r8, [r5]
	ticks_expired = 0U;
   2ba02:	9301      	str	r3, [sp, #4]
	while (ticker_id_head != TICKER_NULL) {
   2ba04:	2fff      	cmp	r7, #255	; 0xff
   2ba06:	d11a      	bne.n	2ba3e <ticker_worker+0x7e>
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
   2ba08:	7aea      	ldrb	r2, [r5, #11]
   2ba0a:	7aab      	ldrb	r3, [r5, #10]
   2ba0c:	4293      	cmp	r3, r2
   2ba0e:	d105      	bne.n	2ba1c <ticker_worker+0x5c>
	uint8_t idx = *ticks_elapsed_index + 1;
   2ba10:	3301      	adds	r3, #1
   2ba12:	b2db      	uxtb	r3, r3
		idx = 0U;
   2ba14:	2b02      	cmp	r3, #2
   2ba16:	bf08      	it	eq
   2ba18:	2300      	moveq	r3, #0
	*ticks_elapsed_index = idx;
   2ba1a:	72eb      	strb	r3, [r5, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   2ba1c:	7aeb      	ldrb	r3, [r5, #11]
   2ba1e:	9a01      	ldr	r2, [sp, #4]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   2ba20:	6a6c      	ldr	r4, [r5, #36]	; 0x24
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   2ba22:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   2ba26:	2104      	movs	r1, #4
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   2ba28:	60da      	str	r2, [r3, #12]
	instance->worker_trigger = 0U;
   2ba2a:	2300      	movs	r3, #0
   2ba2c:	77eb      	strb	r3, [r5, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   2ba2e:	2201      	movs	r2, #1
   2ba30:	462b      	mov	r3, r5
   2ba32:	2003      	movs	r0, #3
   2ba34:	46a4      	mov	ip, r4
}
   2ba36:	b00b      	add	sp, #44	; 0x2c
   2ba38:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   2ba3c:	4760      	bx	ip
		ticker = &node[ticker_id_head];
   2ba3e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   2ba42:	013f      	lsls	r7, r7, #4
   2ba44:	eb08 0407 	add.w	r4, r8, r7
		ticks_to_expire = ticker->ticks_to_expire;
   2ba48:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   2ba4a:	459b      	cmp	fp, r3
   2ba4c:	d3dc      	bcc.n	2ba08 <ticker_worker+0x48>
		ticks_expired += ticks_to_expire;
   2ba4e:	9a01      	ldr	r2, [sp, #4]
		ticker_id_head = ticker->next;
   2ba50:	f818 7007 	ldrb.w	r7, [r8, r7]
		ticks_expired += ticks_to_expire;
   2ba54:	441a      	add	r2, r3
		ticks_elapsed -= ticks_to_expire;
   2ba56:	ebab 0b03 	sub.w	fp, fp, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   2ba5a:	78a3      	ldrb	r3, [r4, #2]
   2ba5c:	9302      	str	r3, [sp, #8]
		ticks_expired += ticks_to_expire;
   2ba5e:	9201      	str	r2, [sp, #4]
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   2ba60:	7863      	ldrb	r3, [r4, #1]
   2ba62:	9a02      	ldr	r2, [sp, #8]
   2ba64:	1a9b      	subs	r3, r3, r2
   2ba66:	b2db      	uxtb	r3, r3
   2ba68:	2b01      	cmp	r3, #1
   2ba6a:	d1cb      	bne.n	2ba04 <ticker_worker+0x44>
		if (ticker->ticks_slot != 0U &&
   2ba6c:	69a3      	ldr	r3, [r4, #24]
   2ba6e:	9303      	str	r3, [sp, #12]
   2ba70:	2b00      	cmp	r3, #0
   2ba72:	d030      	beq.n	2bad6 <ticker_worker+0x116>
   2ba74:	2e00      	cmp	r6, #0
   2ba76:	f040 8095 	bne.w	2bba4 <ticker_worker+0x1e4>
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
   2ba7a:	f994 302d 	ldrsb.w	r3, [r4, #45]	; 0x2d
   2ba7e:	9304      	str	r3, [sp, #16]
   2ba80:	3380      	adds	r3, #128	; 0x80
   2ba82:	d028      	beq.n	2bad6 <ticker_worker+0x116>
   2ba84:	2fff      	cmp	r7, #255	; 0xff
   2ba86:	d026      	beq.n	2bad6 <ticker_worker+0x116>
		int32_t lazy_current = ticker->lazy_current;
   2ba88:	8be1      	ldrh	r1, [r4, #30]
		if (lazy_current >= ticker->lazy_periodic) {
   2ba8a:	8ba3      	ldrh	r3, [r4, #28]
		uint32_t current_age = ticker->ticks_periodic +
   2ba8c:	6862      	ldr	r2, [r4, #4]
		uint32_t acc_ticks_to_expire = 0U;
   2ba8e:	2000      	movs	r0, #0
		if (lazy_current >= ticker->lazy_periodic) {
   2ba90:	4299      	cmp	r1, r3
		uint32_t acc_ticks_to_expire = 0U;
   2ba92:	9005      	str	r0, [sp, #20]
				(lazy_current - ticker->priority);
   2ba94:	9804      	ldr	r0, [sp, #16]
			lazy_current -= ticker->lazy_periodic;
   2ba96:	bf28      	it	cs
   2ba98:	1ac9      	subcs	r1, r1, r3
		uint32_t current_age = ticker->ticks_periodic +
   2ba9a:	fb01 2302 	mla	r3, r1, r2, r2
				(lazy_current - ticker->priority);
   2ba9e:	1a09      	subs	r1, r1, r0
		uint32_t current_age = ticker->ticks_periodic +
   2baa0:	9308      	str	r3, [sp, #32]
				(lazy_current - ticker->priority);
   2baa2:	9109      	str	r1, [sp, #36]	; 0x24
		uint32_t current_age = ticker->ticks_periodic +
   2baa4:	463b      	mov	r3, r7
			struct ticker_node *ticker_next = &nodes[id_head];
   2baa6:	b21b      	sxth	r3, r3
   2baa8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   2baac:	011b      	lsls	r3, r3, #4
   2baae:	eb08 0a03 	add.w	sl, r8, r3
   2bab2:	9307      	str	r3, [sp, #28]
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
   2bab4:	f8da 9008 	ldr.w	r9, [sl, #8]
   2bab8:	9b05      	ldr	r3, [sp, #20]
   2baba:	444b      	add	r3, r9
   2babc:	9305      	str	r3, [sp, #20]
			if (acc_ticks_to_expire > ticker->ticks_slot) {
   2babe:	9905      	ldr	r1, [sp, #20]
   2bac0:	9b03      	ldr	r3, [sp, #12]
   2bac2:	428b      	cmp	r3, r1
   2bac4:	d307      	bcc.n	2bad6 <ticker_worker+0x116>
			if (ticker_next->ticks_slot == 0U) {
   2bac6:	f8da 3018 	ldr.w	r3, [sl, #24]
   2baca:	bb73      	cbnz	r3, 2bb2a <ticker_worker+0x16a>
			id_head = ticker_next->next;
   2bacc:	9b07      	ldr	r3, [sp, #28]
   2bace:	f818 3003 	ldrb.w	r3, [r8, r3]
		while (id_head != TICKER_NULL) {
   2bad2:	2bff      	cmp	r3, #255	; 0xff
   2bad4:	d1e7      	bne.n	2baa6 <ticker_worker+0xe6>
		must_expire_skip = 0U;
   2bad6:	f04f 0900 	mov.w	r9, #0
		if (ticker->ext_data) {
   2bada:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2badc:	b113      	cbz	r3, 2bae4 <ticker_worker+0x124>
			ticker->ext_data->ticks_drift = 0U;
   2bade:	2200      	movs	r2, #0
   2bae0:	605a      	str	r2, [r3, #4]
			ticker->ext_data->reschedule_state =
   2bae2:	721a      	strb	r2, [r3, #8]
		ticker->ack--;
   2bae4:	9b02      	ldr	r3, [sp, #8]
		if (ticker->timeout_func) {
   2bae6:	f8d4 a00c 	ldr.w	sl, [r4, #12]
		ticker->ack--;
   2baea:	3b01      	subs	r3, #1
   2baec:	70a3      	strb	r3, [r4, #2]
		if (ticker->timeout_func) {
   2baee:	f1ba 0f00 	cmp.w	sl, #0
   2baf2:	d087      	beq.n	2ba04 <ticker_worker+0x44>
					   ticks_expired -
   2baf4:	9b01      	ldr	r3, [sp, #4]
   2baf6:	6960      	ldr	r0, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
   2baf8:	6a61      	ldr	r1, [r4, #36]	; 0x24
					   ticks_expired -
   2bafa:	1a18      	subs	r0, r3, r0
   2bafc:	696b      	ldr	r3, [r5, #20]
   2bafe:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
   2bb00:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
   2bb04:	f1b9 0f00 	cmp.w	r9, #0
   2bb08:	d175      	bne.n	2bbf6 <ticker_worker+0x236>
   2bb0a:	8be2      	ldrh	r2, [r4, #30]
   2bb0c:	6923      	ldr	r3, [r4, #16]
   2bb0e:	47d0      	blx	sl
			if (must_expire_skip == 0U) {
   2bb10:	f1b9 0f00 	cmp.w	r9, #0
   2bb14:	f47f af76 	bne.w	2ba04 <ticker_worker+0x44>
				if (ticker->ticks_slot != 0U) {
   2bb18:	69a3      	ldr	r3, [r4, #24]
				ticker->lazy_current = 0U;
   2bb1a:	f8a4 901e 	strh.w	r9, [r4, #30]
					slot_reserved = 1U;
   2bb1e:	2b00      	cmp	r3, #0
				ticker->force = 0U;
   2bb20:	f884 9003 	strb.w	r9, [r4, #3]
					slot_reserved = 1U;
   2bb24:	bf18      	it	ne
   2bb26:	2601      	movne	r6, #1
   2bb28:	e76c      	b.n	2ba04 <ticker_worker+0x44>
			int32_t lazy_next = ticker_next->lazy_current;
   2bb2a:	f8ba 101e 	ldrh.w	r1, [sl, #30]
				ticker_next->lazy_periodic > lazy_next;
   2bb2e:	f8ba c01c 	ldrh.w	ip, [sl, #28]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   2bb32:	f8da e004 	ldr.w	lr, [sl, #4]
			int32_t lazy_next = ticker_next->lazy_current;
   2bb36:	9106      	str	r1, [sp, #24]
			if (!lazy_next_periodic_skip) {
   2bb38:	4561      	cmp	r1, ip
				lazy_next -= ticker_next->lazy_periodic;
   2bb3a:	bf24      	itt	cs
   2bb3c:	eba1 030c 	subcs.w	r3, r1, ip
   2bb40:	9306      	strcs	r3, [sp, #24]
				ticker_next->priority;
   2bb42:	f99a 002d 	ldrsb.w	r0, [sl, #45]	; 0x2d
					  0U :
   2bb46:	f1be 0f00 	cmp.w	lr, #0
   2bb4a:	d049      	beq.n	2bbe0 <ticker_worker+0x220>
   2bb4c:	ebae 0909 	sub.w	r9, lr, r9
				(ticker->ticks_periodic == 0U) ||
   2bb50:	2a00      	cmp	r2, #0
   2bb52:	d047      	beq.n	2bbe4 <ticker_worker+0x224>
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   2bb54:	9b06      	ldr	r3, [sp, #24]
   2bb56:	fb0e 9e03 	mla	lr, lr, r3, r9
				(ticker->ticks_periodic == 0U) ||
   2bb5a:	9b08      	ldr	r3, [sp, #32]
   2bb5c:	4573      	cmp	r3, lr
   2bb5e:	bf8c      	ite	hi
   2bb60:	f04f 0901 	movhi.w	r9, #1
   2bb64:	f04f 0900 	movls.w	r9, #0
					(ticker->ticks_periodic != 0U) &&
   2bb68:	bf34      	ite	cc
   2bb6a:	f04f 0e01 	movcc.w	lr, #1
   2bb6e:	f04f 0e00 	movcs.w	lr, #0
			if (!lazy_next_periodic_skip &&
   2bb72:	4561      	cmp	r1, ip
			uint8_t next_force = (ticker_next->force > ticker->force);
   2bb74:	f89a 3003 	ldrb.w	r3, [sl, #3]
   2bb78:	f894 a003 	ldrb.w	sl, [r4, #3]
			if (!lazy_next_periodic_skip &&
   2bb7c:	d3a6      	bcc.n	2bacc <ticker_worker+0x10c>
   2bb7e:	4553      	cmp	r3, sl
   2bb80:	d810      	bhi.n	2bba4 <ticker_worker+0x1e4>
			    (next_force ||
   2bb82:	f110 0f80 	cmn.w	r0, #128	; 0x80
   2bb86:	d00d      	beq.n	2bba4 <ticker_worker+0x1e4>
				(lazy_next - ticker_next->priority) >
   2bb88:	9b06      	ldr	r3, [sp, #24]
			     next_is_critical ||
   2bb8a:	9909      	ldr	r1, [sp, #36]	; 0x24
				(lazy_next - ticker_next->priority) >
   2bb8c:	1a1b      	subs	r3, r3, r0
			     next_is_critical ||
   2bb8e:	428b      	cmp	r3, r1
   2bb90:	dd02      	ble.n	2bb98 <ticker_worker+0x1d8>
			     (next_has_priority && !current_is_older) ||
   2bb92:	f1b9 0f00 	cmp.w	r9, #0
   2bb96:	d005      	beq.n	2bba4 <ticker_worker+0x1e4>
   2bb98:	9b04      	ldr	r3, [sp, #16]
   2bb9a:	4283      	cmp	r3, r0
   2bb9c:	d196      	bne.n	2bacc <ticker_worker+0x10c>
			     (equal_priority && next_is_older))) {
   2bb9e:	f1be 0f00 	cmp.w	lr, #0
   2bba2:	d093      	beq.n	2bacc <ticker_worker+0x10c>
			struct ticker_ext *ext_data = ticker->ext_data;
   2bba4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			if (ext_data &&
   2bba6:	8be2      	ldrh	r2, [r4, #30]
   2bba8:	b14b      	cbz	r3, 2bbbe <ticker_worker+0x1fe>
   2bbaa:	6819      	ldr	r1, [r3, #0]
   2bbac:	b1f1      	cbz	r1, 2bbec <ticker_worker+0x22c>
			    ext_data->ticks_slot_window != 0U &&
   2bbae:	7a19      	ldrb	r1, [r3, #8]
   2bbb0:	b9e1      	cbnz	r1, 2bbec <ticker_worker+0x22c>
			    TICKER_RESCHEDULE_STATE_NONE &&
   2bbb2:	8ba1      	ldrh	r1, [r4, #28]
   2bbb4:	4291      	cmp	r1, r2
   2bbb6:	d819      	bhi.n	2bbec <ticker_worker+0x22c>
				ext_data->reschedule_state =
   2bbb8:	f04f 0101 	mov.w	r1, #1
				ext_data->reschedule_state =
   2bbbc:	7219      	strb	r1, [r3, #8]
			ticker->lazy_current++;
   2bbbe:	3201      	adds	r2, #1
			if ((ticker->must_expire == 0U) ||
   2bbc0:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
			ticker->lazy_current++;
   2bbc4:	b292      	uxth	r2, r2
   2bbc6:	83e2      	strh	r2, [r4, #30]
			if ((ticker->must_expire == 0U) ||
   2bbc8:	b131      	cbz	r1, 2bbd8 <ticker_worker+0x218>
   2bbca:	8ba1      	ldrh	r1, [r4, #28]
   2bbcc:	4291      	cmp	r1, r2
   2bbce:	d203      	bcs.n	2bbd8 <ticker_worker+0x218>
			    (ticker->lazy_periodic >= ticker->lazy_current) ||
   2bbd0:	b173      	cbz	r3, 2bbf0 <ticker_worker+0x230>
			    TICKER_RESCHEDULE_PENDING(ticker)) {
   2bbd2:	7a1b      	ldrb	r3, [r3, #8]
   2bbd4:	2b01      	cmp	r3, #1
   2bbd6:	d10b      	bne.n	2bbf0 <ticker_worker+0x230>
				ticker->ack--;
   2bbd8:	9b02      	ldr	r3, [sp, #8]
   2bbda:	3b01      	subs	r3, #1
   2bbdc:	70a3      	strb	r3, [r4, #2]
				continue;
   2bbde:	e711      	b.n	2ba04 <ticker_worker+0x44>
					  0U :
   2bbe0:	46f1      	mov	r9, lr
   2bbe2:	e7b5      	b.n	2bb50 <ticker_worker+0x190>
				(ticker->ticks_periodic == 0U) ||
   2bbe4:	f04f 0901 	mov.w	r9, #1
					(ticker->ticks_periodic != 0U) &&
   2bbe8:	4696      	mov	lr, r2
   2bbea:	e7c2      	b.n	2bb72 <ticker_worker+0x1b2>
				ext_data->reschedule_state =
   2bbec:	2100      	movs	r1, #0
   2bbee:	e7e5      	b.n	2bbbc <ticker_worker+0x1fc>
			must_expire_skip = 1U;
   2bbf0:	f04f 0901 	mov.w	r9, #1
   2bbf4:	e771      	b.n	2bada <ticker_worker+0x11a>
			ticker->timeout_func(ticks_at_expire,
   2bbf6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2bbfa:	e787      	b.n	2bb0c <ticker_worker+0x14c>

0002bbfc <ticker_start>:
{
   2bbfc:	b510      	push	{r4, lr}
   2bbfe:	b08a      	sub	sp, #40	; 0x28
	return ticker_start_ext(instance_index, user_id, ticker_id,
   2bc00:	2400      	movs	r4, #0
   2bc02:	9409      	str	r4, [sp, #36]	; 0x24
   2bc04:	9c14      	ldr	r4, [sp, #80]	; 0x50
   2bc06:	9408      	str	r4, [sp, #32]
   2bc08:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   2bc0a:	9407      	str	r4, [sp, #28]
   2bc0c:	9c12      	ldr	r4, [sp, #72]	; 0x48
   2bc0e:	9406      	str	r4, [sp, #24]
   2bc10:	9c11      	ldr	r4, [sp, #68]	; 0x44
   2bc12:	9405      	str	r4, [sp, #20]
   2bc14:	9c10      	ldr	r4, [sp, #64]	; 0x40
   2bc16:	9404      	str	r4, [sp, #16]
   2bc18:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
   2bc1c:	9403      	str	r4, [sp, #12]
   2bc1e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   2bc20:	9402      	str	r4, [sp, #8]
   2bc22:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   2bc24:	9401      	str	r4, [sp, #4]
   2bc26:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2bc28:	9400      	str	r4, [sp, #0]
   2bc2a:	f7ec ff4b 	bl	18ac4 <ticker_start_ext>
}
   2bc2e:	b00a      	add	sp, #40	; 0x28
   2bc30:	bd10      	pop	{r4, pc}

0002bc32 <ticker_update>:
{
   2bc32:	b510      	push	{r4, lr}
   2bc34:	b088      	sub	sp, #32
	return ticker_update_ext(instance_index, user_id, ticker_id,
   2bc36:	2400      	movs	r4, #0
   2bc38:	9407      	str	r4, [sp, #28]
   2bc3a:	9c10      	ldr	r4, [sp, #64]	; 0x40
   2bc3c:	9406      	str	r4, [sp, #24]
   2bc3e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   2bc40:	9405      	str	r4, [sp, #20]
   2bc42:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
   2bc46:	9404      	str	r4, [sp, #16]
   2bc48:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
   2bc4c:	9403      	str	r4, [sp, #12]
   2bc4e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2bc50:	9402      	str	r4, [sp, #8]
   2bc52:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   2bc54:	9401      	str	r4, [sp, #4]
   2bc56:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   2bc58:	9400      	str	r4, [sp, #0]
   2bc5a:	f7ec ff7f 	bl	18b5c <ticker_update_ext>
}
   2bc5e:	b008      	add	sp, #32
   2bc60:	bd10      	pop	{r4, pc}

0002bc62 <ticker_ticks_now_get>:
	return cntr_cnt_get();
   2bc62:	f7f2 bad7 	b.w	1e214 <cntr_cnt_get>

0002bc66 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   2bc66:	1a40      	subs	r0, r0, r1
}
   2bc68:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   2bc6c:	4770      	bx	lr

0002bc6e <ll_tx_pwr_lvl_get>:
#include "ull_conn_internal.h"

uint8_t ll_tx_pwr_lvl_get(uint8_t handle_type,
		       uint16_t handle, uint8_t type, int8_t *tx_pwr_lvl)
{
	switch (handle_type) {
   2bc6e:	2802      	cmp	r0, #2
{
   2bc70:	b538      	push	{r3, r4, r5, lr}
   2bc72:	4604      	mov	r4, r0
   2bc74:	461d      	mov	r5, r3
	switch (handle_type) {
   2bc76:	d107      	bne.n	2bc88 <ll_tx_pwr_lvl_get+0x1a>
#endif /* CONFIG_BT_OBSERVER && CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL*/
#if defined(CONFIG_BT_CONN)
		case (BT_HCI_VS_LL_HANDLE_TYPE_CONN): {
			struct ll_conn *conn;

			conn = ll_connected_get(handle);
   2bc78:	4608      	mov	r0, r1
   2bc7a:	f000 f99c 	bl	2bfb6 <ll_connected_get>
			if (!conn) {
   2bc7e:	b108      	cbz	r0, 2bc84 <ll_tx_pwr_lvl_get+0x16>
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
				/* Level desired is maximum available */
				*tx_pwr_lvl = lll_radio_tx_pwr_max_get();
#else  /* !CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
				/* Return default if not multiple TXP */
				*tx_pwr_lvl = RADIO_TXP_DEFAULT;
   2bc80:	2400      	movs	r4, #0
   2bc82:	702c      	strb	r4, [r5, #0]
			return BT_HCI_ERR_UNKNOWN_CMD;
		}
	}

	return BT_HCI_ERR_SUCCESS;
}
   2bc84:	4620      	mov	r0, r4
   2bc86:	bd38      	pop	{r3, r4, r5, pc}
			return BT_HCI_ERR_UNKNOWN_CMD;
   2bc88:	2401      	movs	r4, #1
   2bc8a:	e7fb      	b.n	2bc84 <ll_tx_pwr_lvl_get+0x16>

0002bc8c <ll_tx_pwr_get>:
{
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	*min = lll_radio_tx_pwr_min_get();
	*max = lll_radio_tx_pwr_max_get();
#else
	*min = RADIO_TXP_DEFAULT;
   2bc8c:	2300      	movs	r3, #0
   2bc8e:	7003      	strb	r3, [r0, #0]
	*max = RADIO_TXP_DEFAULT;
   2bc90:	700b      	strb	r3, [r1, #0]
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
}
   2bc92:	4770      	bx	lr

0002bc94 <sys_get_le64>:
{
   2bc94:	4603      	mov	r3, r0
}
   2bc96:	6800      	ldr	r0, [r0, #0]
   2bc98:	6859      	ldr	r1, [r3, #4]
   2bc9a:	4770      	bx	lr

0002bc9c <meta_evt>:
{
   2bc9c:	b570      	push	{r4, r5, r6, lr}
	return net_buf_simple_add(&buf->b, len);
   2bc9e:	f100 0408 	add.w	r4, r0, #8
   2bca2:	460e      	mov	r6, r1
   2bca4:	4620      	mov	r0, r4
   2bca6:	2102      	movs	r1, #2
   2bca8:	4615      	mov	r5, r2
   2bcaa:	f7f3 faa3 	bl	1f1f4 <net_buf_simple_add>
	hdr->evt = evt;
   2bcae:	233e      	movs	r3, #62	; 0x3e
   2bcb0:	7003      	strb	r3, [r0, #0]
	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
   2bcb2:	1c6b      	adds	r3, r5, #1
	hdr->len = len;
   2bcb4:	7043      	strb	r3, [r0, #1]
   2bcb6:	2101      	movs	r1, #1
   2bcb8:	4620      	mov	r0, r4
   2bcba:	f7f3 fa9b 	bl	1f1f4 <net_buf_simple_add>
	me->subevent = subevt;
   2bcbe:	7006      	strb	r6, [r0, #0]
   2bcc0:	4629      	mov	r1, r5
   2bcc2:	4620      	mov	r0, r4
}
   2bcc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2bcc8:	f7f3 ba94 	b.w	1f1f4 <net_buf_simple_add>

0002bccc <hci_num_cmplt_encode>:
{
   2bccc:	b570      	push	{r4, r5, r6, lr}
   2bcce:	f100 0408 	add.w	r4, r0, #8
   2bcd2:	460e      	mov	r6, r1
   2bcd4:	4620      	mov	r0, r4
   2bcd6:	2102      	movs	r1, #2
   2bcd8:	4615      	mov	r5, r2
   2bcda:	f7f3 fa8b 	bl	1f1f4 <net_buf_simple_add>
	hdr->evt = evt;
   2bcde:	2313      	movs	r3, #19
	hdr->len = len;
   2bce0:	2105      	movs	r1, #5
	hdr->evt = evt;
   2bce2:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   2bce4:	7041      	strb	r1, [r0, #1]
   2bce6:	4620      	mov	r0, r4
   2bce8:	f7f3 fa84 	bl	1f1f4 <net_buf_simple_add>
	ep->num_handles = num_handles;
   2bcec:	2301      	movs	r3, #1
   2bcee:	7003      	strb	r3, [r0, #0]
	hc->handle = sys_cpu_to_le16(handle);
   2bcf0:	f8a0 6001 	strh.w	r6, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
   2bcf4:	f8a0 5003 	strh.w	r5, [r0, #3]
}
   2bcf8:	bd70      	pop	{r4, r5, r6, pc}

0002bcfa <hci_get_class>:
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   2bcfa:	7903      	ldrb	r3, [r0, #4]
   2bcfc:	2b03      	cmp	r3, #3
   2bcfe:	d00c      	beq.n	2bd1a <hci_get_class+0x20>
		switch (node_rx->hdr.type) {
   2bd00:	2b13      	cmp	r3, #19
   2bd02:	d012      	beq.n	2bd2a <hci_get_class+0x30>
   2bd04:	d804      	bhi.n	2bd10 <hci_get_class+0x16>
   2bd06:	2b04      	cmp	r3, #4
			return HCI_CLASS_NONE;
   2bd08:	bf0c      	ite	eq
   2bd0a:	2002      	moveq	r0, #2
   2bd0c:	2000      	movne	r0, #0
   2bd0e:	4770      	bx	lr
		switch (node_rx->hdr.type) {
   2bd10:	2b15      	cmp	r3, #21
			return HCI_CLASS_EVT_CONNECTION;
   2bd12:	bf8c      	ite	hi
   2bd14:	2000      	movhi	r0, #0
   2bd16:	2003      	movls	r0, #3
   2bd18:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
   2bd1a:	7f03      	ldrb	r3, [r0, #28]
   2bd1c:	f003 0303 	and.w	r3, r3, #3
   2bd20:	2b03      	cmp	r3, #3
		return HCI_CLASS_ACL_DATA;
   2bd22:	bf0c      	ite	eq
   2bd24:	2004      	moveq	r0, #4
   2bd26:	2005      	movne	r0, #5
   2bd28:	4770      	bx	lr
			return HCI_CLASS_EVT_REQUIRED;
   2bd2a:	2001      	movs	r0, #1
}
   2bd2c:	4770      	bx	lr

0002bd2e <bt_rand>:
#include "hal/ecb.h"
#include "lll.h"

int bt_rand(void *buf, size_t len)
{
	return lll_csrand_get(buf, len);
   2bd2e:	f7f0 bed1 	b.w	1cad4 <lll_csrand_get>

0002bd32 <bt_encrypt_be>:
	return 0;
}

int bt_encrypt_be(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
   2bd32:	b508      	push	{r3, lr}
	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	ecb_encrypt_be(key, plaintext, enc_data);
   2bd34:	f000 fcae 	bl	2c694 <ecb_encrypt_be>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
   2bd38:	2000      	movs	r0, #0
   2bd3a:	bd08      	pop	{r3, pc}

0002bd3c <disabled_cb>:
	z_impl_k_sem_give(sem);
   2bd3c:	f7f7 bdbe 	b.w	238bc <z_impl_k_sem_give>

0002bd40 <rx_demux_conn_tx_ack>:
{
   2bd40:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2bd42:	4605      	mov	r5, r0
   2bd44:	4614      	mov	r4, r2
   2bd46:	9300      	str	r3, [sp, #0]
   2bd48:	f8ad 1006 	strh.w	r1, [sp, #6]
		ull_conn_ack_dequeue();
   2bd4c:	f7f0 fb0c 	bl	1c368 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
   2bd50:	4621      	mov	r1, r4
   2bd52:	9a00      	ldr	r2, [sp, #0]
   2bd54:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   2bd58:	f7f0 fb48 	bl	1c3ec <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
   2bd5c:	4620      	mov	r0, r4
   2bd5e:	f7f0 fac9 	bl	1c2f4 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   2bd62:	466a      	mov	r2, sp
   2bd64:	f10d 0106 	add.w	r1, sp, #6
   2bd68:	4628      	mov	r0, r5
   2bd6a:	f7f0 fae7 	bl	1c33c <ull_conn_ack_by_last_peek>
	} while (link);
   2bd6e:	4604      	mov	r4, r0
   2bd70:	2800      	cmp	r0, #0
   2bd72:	d1eb      	bne.n	2bd4c <rx_demux_conn_tx_ack+0xc>
			ll_rx_sched();
   2bd74:	f7ee faea 	bl	1a34c <ll_rx_sched>
}
   2bd78:	b003      	add	sp, #12
   2bd7a:	bd30      	pop	{r4, r5, pc}

0002bd7c <ll_timeslice_ticker_id_get>:
	*instance_index = TICKER_INSTANCE_ID_CTLR;
   2bd7c:	2300      	movs	r3, #0
   2bd7e:	7003      	strb	r3, [r0, #0]
	*user_id = (TICKER_NODES - FLASH_TICKER_NODES);
   2bd80:	2308      	movs	r3, #8
   2bd82:	700b      	strb	r3, [r1, #0]
}
   2bd84:	4770      	bx	lr

0002bd86 <ll_radio_state_is_idle>:
	return lll_radio_is_idle();
   2bd86:	f000 baa2 	b.w	2c2ce <lll_radio_is_idle>

0002bd8a <adva_update.isra.4>:

	/* All legacy PDUs have AdvA at the same offset */
	return pdu->adv_ind.addr;
}

static const uint8_t *adva_update(struct ll_adv_set *adv, struct pdu_adv *pdu)
   2bd8a:	b538      	push	{r3, r4, r5, lr}
#if defined(CONFIG_BT_CTLR_ADV_EXT)
	} else if (ll_adv_cmds_is_ext() && pdu->tx_addr) {
		tx_addr = ll_adv_aux_random_addr_get(adv, NULL);
#endif
	} else {
		tx_addr = ll_addr_get(pdu->tx_addr, NULL);
   2bd8c:	4604      	mov	r4, r0
static const uint8_t *adva_update(struct ll_adv_set *adv, struct pdu_adv *pdu)
   2bd8e:	4605      	mov	r5, r0
		tx_addr = ll_addr_get(pdu->tx_addr, NULL);
   2bd90:	f814 0b02 	ldrb.w	r0, [r4], #2
   2bd94:	2100      	movs	r1, #0
   2bd96:	f3c0 1080 	ubfx	r0, r0, #6, #1
   2bd9a:	f7ec ff63 	bl	18c64 <ll_addr_get>
   2bd9e:	6803      	ldr	r3, [r0, #0]
   2bda0:	f8c5 3002 	str.w	r3, [r5, #2]
   2bda4:	8883      	ldrh	r3, [r0, #4]
   2bda6:	80a3      	strh	r3, [r4, #4]

	adv_addr = adv_pdu_adva_get(pdu);
	memcpy(adv_addr, tx_addr, BDADDR_SIZE);

	return adv_addr;
}
   2bda8:	4620      	mov	r0, r4
   2bdaa:	bd38      	pop	{r3, r4, r5, pc}

0002bdac <ull_adv_init>:
{
   2bdac:	b508      	push	{r3, lr}
   2bdae:	f7ee ff5f 	bl	1ac70 <init_reset.part.3>
}
   2bdb2:	2000      	movs	r0, #0
   2bdb4:	bd08      	pop	{r3, pc}

0002bdb6 <ull_adv_reset>:
{
   2bdb6:	b508      	push	{r3, lr}
		(void)disable(handle);
   2bdb8:	f7ef f83c 	bl	1ae34 <disable.constprop.6>
}
   2bdbc:	2000      	movs	r0, #0
   2bdbe:	bd08      	pop	{r3, pc}

0002bdc0 <ull_adv_is_enabled>:
{
   2bdc0:	b508      	push	{r3, lr}
	adv = ull_adv_is_enabled_get(handle);
   2bdc2:	f7ef f829 	bl	1ae18 <ull_adv_is_enabled_get>
}
   2bdc6:	3000      	adds	r0, #0
   2bdc8:	bf18      	it	ne
   2bdca:	2001      	movne	r0, #1
   2bdcc:	bd08      	pop	{r3, pc}

0002bdce <ull_adv_filter_pol_get>:
{
   2bdce:	b508      	push	{r3, lr}
	adv = ull_adv_is_enabled_get(handle);
   2bdd0:	f7ef f822 	bl	1ae18 <ull_adv_is_enabled_get>
	if (!adv) {
   2bdd4:	b118      	cbz	r0, 2bdde <ull_adv_filter_pol_get+0x10>
	return adv->lll.filter_policy;
   2bdd6:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
   2bdda:	f000 0003 	and.w	r0, r0, #3
}
   2bdde:	bd08      	pop	{r3, pc}

0002bde0 <ull_scan_rsp_set>:
{
   2bde0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   2bde2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
   2bde6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   2bdea:	460e      	mov	r6, r1
   2bdec:	4605      	mov	r5, r0
	return lll_adv_pdu_alloc(&lll->scan_rsp, idx);
   2bdee:	f10d 0107 	add.w	r1, sp, #7
   2bdf2:	3038      	adds	r0, #56	; 0x38
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   2bdf4:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   2bdf6:	4617      	mov	r7, r2
	return lll_adv_pdu_alloc(&lll->scan_rsp, idx);
   2bdf8:	f7f1 f8ee 	bl	1cfd8 <lll_adv_pdu_alloc>
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   2bdfc:	7803      	ldrb	r3, [r0, #0]
   2bdfe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   2be02:	f043 0304 	orr.w	r3, r3, #4
   2be06:	7003      	strb	r3, [r0, #0]
	pdu->tx_addr = prev->tx_addr;
   2be08:	7822      	ldrb	r2, [r4, #0]
   2be0a:	b2db      	uxtb	r3, r3
   2be0c:	f3c2 1280 	ubfx	r2, r2, #6, #1
   2be10:	f362 1386 	bfi	r3, r2, #6, #1
	pdu->rx_addr = 0;
   2be14:	f36f 13c7 	bfc	r3, #7, #1
   2be18:	7003      	strb	r3, [r0, #0]
	pdu->len = BDADDR_SIZE + len;
   2be1a:	1db3      	adds	r3, r6, #6
   2be1c:	7043      	strb	r3, [r0, #1]
   2be1e:	4623      	mov	r3, r4
   2be20:	4639      	mov	r1, r7
   2be22:	f853 2f02 	ldr.w	r2, [r3, #2]!
   2be26:	f8c0 2002 	str.w	r2, [r0, #2]
   2be2a:	889b      	ldrh	r3, [r3, #4]
   2be2c:	80c3      	strh	r3, [r0, #6]
   2be2e:	4632      	mov	r2, r6
   2be30:	3008      	adds	r0, #8
   2be32:	f001 fba7 	bl	2d584 <memcpy>
	pdu->last = idx;
   2be36:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2be3a:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
}
   2be3e:	2000      	movs	r0, #0
   2be40:	b003      	add	sp, #12
   2be42:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002be44 <ull_scan_init>:
}
   2be44:	2000      	movs	r0, #0
   2be46:	4770      	bx	lr

0002be48 <disable.constprop.1>:
	ll_rx_put(rx_hdr->link, rx_hdr);
	ll_rx_sched();
}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

static uint8_t disable(uint8_t handle)
   2be48:	b510      	push	{r4, lr}
{
	struct ll_scan_set *scan;
	uint8_t ret;

	scan = ull_scan_is_enabled_get(handle);
   2be4a:	2000      	movs	r0, #0
   2be4c:	f7ef f94c 	bl	1b0e8 <ull_scan_is_enabled_get>
	if (!scan) {
   2be50:	4604      	mov	r4, r0
   2be52:	b158      	cbz	r0, 2be6c <disable.constprop.1+0x24>
	if (scan->lll.conn) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}
#endif

	ret = ull_scan_disable(handle, scan);
   2be54:	4601      	mov	r1, r0
   2be56:	2000      	movs	r0, #0
   2be58:	f7ef f920 	bl	1b09c <ull_scan_disable>
	if (ret) {
   2be5c:	b928      	cbnz	r0, 2be6a <disable.constprop.1+0x22>
		return ret;
	}

	scan->is_enabled = 0U;
   2be5e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   2be62:	f360 0300 	bfi	r3, r0, #0, #1
   2be66:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		ull_filter_adv_scan_state_cb(0);
	}
#endif

	return 0;
}
   2be6a:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   2be6c:	200c      	movs	r0, #12
   2be6e:	e7fc      	b.n	2be6a <disable.constprop.1+0x22>

0002be70 <ull_scan_reset>:
{
   2be70:	b508      	push	{r3, lr}
		(void)disable(handle);
   2be72:	f7ff ffe9 	bl	2be48 <disable.constprop.1>
}
   2be76:	2000      	movs	r0, #0
   2be78:	bd08      	pop	{r3, pc}

0002be7a <ll_scan_enable>:
{
   2be7a:	b510      	push	{r4, lr}
	if (!enable) {
   2be7c:	b918      	cbnz	r0, 2be86 <ll_scan_enable+0xc>
}
   2be7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = disable(SCAN_HANDLE_1M);
   2be82:	f7ff bfe1 	b.w	2be48 <disable.constprop.1>
	scan = ull_scan_is_disabled_get(SCAN_HANDLE_1M);
   2be86:	2000      	movs	r0, #0
   2be88:	f7ef f93c 	bl	1b104 <ull_scan_is_disabled_get>
	if (!scan) {
   2be8c:	4604      	mov	r4, r0
   2be8e:	b198      	cbz	r0, 2beb8 <ll_scan_enable+0x3e>
	    (!is_coded_phy && (scan->own_addr_type & 0x1))) {
   2be90:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   2be94:	079b      	lsls	r3, r3, #30
   2be96:	d404      	bmi.n	2bea2 <ll_scan_enable+0x28>
		err = ull_scan_enable(scan);
   2be98:	4620      	mov	r0, r4
}
   2be9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = ull_scan_enable(scan);
   2be9e:	f7d6 ba0f 	b.w	22c0 <ull_scan_enable>
		if (!mem_nz(ll_addr_get(1, NULL), BDADDR_SIZE)) {
   2bea2:	2100      	movs	r1, #0
   2bea4:	2001      	movs	r0, #1
   2bea6:	f7ec fedd 	bl	18c64 <ll_addr_get>
   2beaa:	2106      	movs	r1, #6
   2beac:	f7ff fc3a 	bl	2b724 <mem_nz>
   2beb0:	2800      	cmp	r0, #0
   2beb2:	d1f1      	bne.n	2be98 <ll_scan_enable+0x1e>
			return BT_HCI_ERR_INVALID_PARAM;
   2beb4:	2012      	movs	r0, #18
}
   2beb6:	bd10      	pop	{r4, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   2beb8:	200c      	movs	r0, #12
   2beba:	e7fc      	b.n	2beb6 <ll_scan_enable+0x3c>

0002bebc <ull_scan_is_enabled>:
{
   2bebc:	b508      	push	{r3, lr}
	scan = ull_scan_is_enabled_get(handle);
   2bebe:	f7ef f913 	bl	1b0e8 <ull_scan_is_enabled_get>
	if (!scan) {
   2bec2:	b140      	cbz	r0, 2bed6 <ull_scan_is_enabled+0x1a>
	return (((uint32_t)scan->is_enabled << scan->lll.type) |
   2bec4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   2bec8:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   2becc:	f003 0301 	and.w	r3, r3, #1
   2bed0:	09c0      	lsrs	r0, r0, #7
   2bed2:	fa03 f000 	lsl.w	r0, r3, r0
}
   2bed6:	bd08      	pop	{r3, pc}

0002bed8 <ull_scan_filter_pol_get>:
{
   2bed8:	b508      	push	{r3, lr}
	scan = ull_scan_is_enabled_get(handle);
   2beda:	f7ef f905 	bl	1b0e8 <ull_scan_is_enabled_get>
	if (!scan) {
   2bede:	b118      	cbz	r0, 2bee8 <ull_scan_filter_pol_get+0x10>
	return scan->lll.filter_policy;
   2bee0:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   2bee4:	f3c0 00c1 	ubfx	r0, r0, #3, #2
}
   2bee8:	bd08      	pop	{r3, pc}

0002beea <tx_ull_dequeue>:
{
   2beea:	4603      	mov	r3, r0
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   2beec:	e9d0 2045 	ldrd	r2, r0, [r0, #276]	; 0x114
{
   2bef0:	b510      	push	{r4, lr}
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   2bef2:	b978      	cbnz	r0, 2bf14 <tx_ull_dequeue+0x2a>
   2bef4:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   2bef8:	4290      	cmp	r0, r2
   2befa:	d00b      	beq.n	2bf14 <tx_ull_dequeue+0x2a>
		if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   2befc:	7910      	ldrb	r0, [r2, #4]
   2befe:	f000 0003 	and.w	r0, r0, #3
   2bf02:	2803      	cmp	r0, #3
   2bf04:	d104      	bne.n	2bf10 <tx_ull_dequeue+0x26>
		    ((pdu_data_tx->llctrl.opcode !=
   2bf06:	79d0      	ldrb	r0, [r2, #7]
		if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   2bf08:	2803      	cmp	r0, #3
   2bf0a:	d003      	beq.n	2bf14 <tx_ull_dequeue+0x2a>
		      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   2bf0c:	280a      	cmp	r0, #10
   2bf0e:	d001      	beq.n	2bf14 <tx_ull_dequeue+0x2a>
			conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   2bf10:	e9c3 2246 	strd	r2, r2, [r3, #280]	; 0x118
	if (conn->tx_head == conn->tx_ctrl) {
   2bf14:	f8d3 4118 	ldr.w	r4, [r3, #280]	; 0x118
   2bf18:	6810      	ldr	r0, [r2, #0]
   2bf1a:	4294      	cmp	r4, r2
   2bf1c:	d10d      	bne.n	2bf3a <tx_ull_dequeue+0x50>
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   2bf1e:	f8d3 411c 	ldr.w	r4, [r3, #284]	; 0x11c
		conn->tx_head = conn->tx_head->next;
   2bf22:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   2bf26:	42a2      	cmp	r2, r4
			conn->tx_ctrl = NULL;
   2bf28:	bf06      	itte	eq
   2bf2a:	2200      	moveq	r2, #0
			conn->tx_ctrl_last = NULL;
   2bf2c:	e9c3 2246 	strdeq	r2, r2, [r3, #280]	; 0x118
			conn->tx_ctrl = conn->tx_head;
   2bf30:	f8c3 0118 	strne.w	r0, [r3, #280]	; 0x118
		tx->next = tx;
   2bf34:	6009      	str	r1, [r1, #0]
}
   2bf36:	4608      	mov	r0, r1
   2bf38:	bd10      	pop	{r4, pc}
		if (conn->tx_head == conn->tx_data) {
   2bf3a:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
		conn->tx_head = conn->tx_head->next;
   2bf3e:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
		if (conn->tx_head == conn->tx_data) {
   2bf42:	4294      	cmp	r4, r2
			conn->tx_data = conn->tx_data->next;
   2bf44:	bf08      	it	eq
   2bf46:	f8c3 0120 	streq.w	r0, [r3, #288]	; 0x120
		tx->next = NULL;
   2bf4a:	2300      	movs	r3, #0
   2bf4c:	600b      	str	r3, [r1, #0]
   2bf4e:	e7f2      	b.n	2bf36 <tx_ull_dequeue+0x4c>

0002bf50 <feat_get>:
	       (features[1] << 8) | (features[2] << 16);
   2bf50:	7883      	ldrb	r3, [r0, #2]
   2bf52:	7842      	ldrb	r2, [r0, #1]
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   2bf54:	7800      	ldrb	r0, [r0, #0]
	       (features[1] << 8) | (features[2] << 16);
   2bf56:	041b      	lsls	r3, r3, #16
   2bf58:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2bf5c:	4318      	orrs	r0, r3
   2bf5e:	f3c0 0010 	ubfx	r0, r0, #0, #17
}
   2bf62:	f440 5043 	orr.w	r0, r0, #12480	; 0x30c0
   2bf66:	f040 0010 	orr.w	r0, r0, #16
   2bf6a:	4770      	bx	lr

0002bf6c <ctrl_tx_enqueue>:
	if (
   2bf6c:	e9d0 3245 	ldrd	r3, r2, [r0, #276]	; 0x114
{
   2bf70:	b510      	push	{r4, lr}
	if (
   2bf72:	b18b      	cbz	r3, 2bf98 <ctrl_tx_enqueue+0x2c>
		if (conn->tx_head == conn->tx_data) {
   2bf74:	f8d0 4120 	ldr.w	r4, [r0, #288]	; 0x120
   2bf78:	42a3      	cmp	r3, r4
			conn->tx_data = conn->tx_data->next;
   2bf7a:	bf04      	itt	eq
   2bf7c:	681c      	ldreq	r4, [r3, #0]
   2bf7e:	f8c0 4120 	streq.w	r4, [r0, #288]	; 0x120
		if (!conn->tx_ctrl) {
   2bf82:	b992      	cbnz	r2, 2bfaa <ctrl_tx_enqueue+0x3e>
			tx->next = conn->tx_head->next;
   2bf84:	681a      	ldr	r2, [r3, #0]
   2bf86:	600a      	str	r2, [r1, #0]
			conn->tx_head->next = tx;
   2bf88:	6019      	str	r1, [r3, #0]
				conn->tx_ctrl = tx;
   2bf8a:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
	if (!tx->next) {
   2bf8e:	680b      	ldr	r3, [r1, #0]
	conn->tx_ctrl_last = tx;
   2bf90:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
	if (!tx->next) {
   2bf94:	b133      	cbz	r3, 2bfa4 <ctrl_tx_enqueue+0x38>
}
   2bf96:	bd10      	pop	{r4, pc}
		if (!conn->tx_ctrl) {
   2bf98:	b93a      	cbnz	r2, 2bfaa <ctrl_tx_enqueue+0x3e>
			tx->next = conn->tx_head;
   2bf9a:	600a      	str	r2, [r1, #0]
				conn->tx_ctrl = tx;
   2bf9c:	e9c0 1145 	strd	r1, r1, [r0, #276]	; 0x114
				conn->tx_ctrl_last = tx;
   2bfa0:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
		conn->tx_data_last = tx;
   2bfa4:	f8c0 1124 	str.w	r1, [r0, #292]	; 0x124
}
   2bfa8:	e7f5      	b.n	2bf96 <ctrl_tx_enqueue+0x2a>
	tx->next = conn->tx_ctrl_last->next;
   2bfaa:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
   2bfae:	681a      	ldr	r2, [r3, #0]
   2bfb0:	600a      	str	r2, [r1, #0]
	conn->tx_ctrl_last->next = tx;
   2bfb2:	6019      	str	r1, [r3, #0]
   2bfb4:	e7eb      	b.n	2bf8e <ctrl_tx_enqueue+0x22>

0002bfb6 <ll_connected_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   2bfb6:	2802      	cmp	r0, #2
{
   2bfb8:	b510      	push	{r4, lr}
   2bfba:	4604      	mov	r4, r0
	if (handle >= CONFIG_BT_MAX_CONN) {
   2bfbc:	d804      	bhi.n	2bfc8 <ll_connected_get+0x12>
	conn = ll_conn_get(handle);
   2bfbe:	f7ef fa61 	bl	1b484 <ll_conn_get>
	if (conn->lll.handle != handle) {
   2bfc2:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   2bfc4:	42a3      	cmp	r3, r4
   2bfc6:	d000      	beq.n	2bfca <ll_connected_get+0x14>
		return NULL;
   2bfc8:	2000      	movs	r0, #0
}
   2bfca:	bd10      	pop	{r4, pc}

0002bfcc <ll_conn_update>:
{
   2bfcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2bfd0:	4680      	mov	r8, r0
   2bfd2:	460c      	mov	r4, r1
   2bfd4:	4691      	mov	r9, r2
   2bfd6:	469a      	mov	sl, r3
   2bfd8:	f8bd 7020 	ldrh.w	r7, [sp, #32]
   2bfdc:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
   2bfe0:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
	conn = ll_connected_get(handle);
   2bfe4:	f7ff ffe7 	bl	2bfb6 <ll_connected_get>
	if (!conn) {
   2bfe8:	2800      	cmp	r0, #0
   2bfea:	d06b      	beq.n	2c0c4 <ll_conn_update+0xf8>
	if (!cmd) {
   2bfec:	bb84      	cbnz	r4, 2c050 <ll_conn_update+0x84>
		if (!conn->llcp_conn_param.disabled &&
   2bfee:	f890 30ee 	ldrb.w	r3, [r0, #238]	; 0xee
   2bff2:	06da      	lsls	r2, r3, #27
   2bff4:	d408      	bmi.n	2c008 <ll_conn_update+0x3c>
		    (!conn->common.fex_valid ||
   2bff6:	f890 1080 	ldrb.w	r1, [r0, #128]	; 0x80
		if (!conn->llcp_conn_param.disabled &&
   2bffa:	f011 0101 	ands.w	r1, r1, #1
   2bffe:	d042      	beq.n	2c086 <ll_conn_update+0xba>
		     (conn->llcp_feature.features_conn &
   2c000:	f8d0 20b8 	ldr.w	r2, [r0, #184]	; 0xb8
		    (!conn->common.fex_valid ||
   2c004:	0793      	lsls	r3, r2, #30
   2c006:	d424      	bmi.n	2c052 <ll_conn_update+0x86>
		} else if (conn->lll.role) {
   2c008:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
   2c00c:	2b00      	cmp	r3, #0
   2c00e:	db5b      	blt.n	2c0c8 <ll_conn_update+0xfc>
		if (conn->llcp_cu.req != conn->llcp_cu.ack) {
   2c010:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
   2c014:	f890 20a1 	ldrb.w	r2, [r0, #161]	; 0xa1
   2c018:	429a      	cmp	r2, r3
   2c01a:	d157      	bne.n	2c0cc <ll_conn_update+0x100>
		conn->llcp_cu.win_size = 1U;
   2c01c:	2301      	movs	r3, #1
   2c01e:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   2c022:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
		conn->llcp_cu.interval = interval_max;
   2c026:	f8a0 70a4 	strh.w	r7, [r0, #164]	; 0xa4
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   2c02a:	f023 0307 	bic.w	r3, r3, #7
		conn->llcp_cu.win_offset_us = 0U;
   2c02e:	2400      	movs	r4, #0
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   2c030:	f043 0305 	orr.w	r3, r3, #5
		conn->llcp_cu.req++;
   2c034:	3201      	adds	r2, #1
		conn->llcp_cu.win_offset_us = 0U;
   2c036:	f8c0 40ac 	str.w	r4, [r0, #172]	; 0xac
		conn->llcp_cu.latency = latency;
   2c03a:	f8a0 60a6 	strh.w	r6, [r0, #166]	; 0xa6
		conn->llcp_cu.timeout = timeout;
   2c03e:	f8a0 50a8 	strh.w	r5, [r0, #168]	; 0xa8
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   2c042:	f880 30a2 	strb.w	r3, [r0, #162]	; 0xa2
		conn->llcp_cu.req++;
   2c046:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
}
   2c04a:	4620      	mov	r0, r4
   2c04c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2c050:	4621      	mov	r1, r4
		cmd--;
   2c052:	3901      	subs	r1, #1
		if (cmd) {
   2c054:	f011 04ff 	ands.w	r4, r1, #255	; 0xff
   2c058:	f890 30ec 	ldrb.w	r3, [r0, #236]	; 0xec
   2c05c:	f890 20ed 	ldrb.w	r2, [r0, #237]	; 0xed
   2c060:	d013      	beq.n	2c08a <ll_conn_update+0xbe>
			if ((conn->llcp_conn_param.req ==
   2c062:	4293      	cmp	r3, r2
   2c064:	d032      	beq.n	2c0cc <ll_conn_update+0x100>
			    (conn->llcp_conn_param.state !=
   2c066:	f890 30ee 	ldrb.w	r3, [r0, #238]	; 0xee
			     conn->llcp_conn_param.ack) ||
   2c06a:	f003 0207 	and.w	r2, r3, #7
   2c06e:	2a03      	cmp	r2, #3
   2c070:	d12c      	bne.n	2c0cc <ll_conn_update+0x100>
			conn->llcp_conn_param.state = cmd;
   2c072:	f364 0302 	bfi	r3, r4, #0, #3
			conn->llcp_conn_param.cmd = 1U;
   2c076:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.status = status;
   2c07a:	f880 90ef 	strb.w	r9, [r0, #239]	; 0xef
			conn->llcp_conn_param.cmd = 1U;
   2c07e:	f880 30ee 	strb.w	r3, [r0, #238]	; 0xee
	return 0;
   2c082:	2400      	movs	r4, #0
   2c084:	e7e1      	b.n	2c04a <ll_conn_update+0x7e>
			cmd++;
   2c086:	2101      	movs	r1, #1
   2c088:	e7e3      	b.n	2c052 <ll_conn_update+0x86>
			if (conn->llcp_conn_param.req !=
   2c08a:	4293      	cmp	r3, r2
   2c08c:	d11e      	bne.n	2c0cc <ll_conn_update+0x100>
			conn->llcp_conn_param.state = cmd;
   2c08e:	f8b0 20ee 	ldrh.w	r2, [r0, #238]	; 0xee
			conn->llcp_conn_param.interval_min = interval_min;
   2c092:	f8a0 a0f0 	strh.w	sl, [r0, #240]	; 0xf0
			conn->llcp_conn_param.req++;
   2c096:	3301      	adds	r3, #1
   2c098:	f880 30ec 	strb.w	r3, [r0, #236]	; 0xec
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2c09c:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
			conn->llcp_conn_param.interval_max = interval_max;
   2c0a0:	f8a0 70f2 	strh.w	r7, [r0, #242]	; 0xf2
			conn->llcp_conn_param.state = cmd;
   2c0a4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
   2c0a8:	f042 0208 	orr.w	r2, r2, #8
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2c0ac:	2b00      	cmp	r3, #0
			conn->llcp_conn_param.latency = latency;
   2c0ae:	f8a0 60f4 	strh.w	r6, [r0, #244]	; 0xf4
			conn->llcp_conn_param.timeout = timeout;
   2c0b2:	f8a0 50f6 	strh.w	r5, [r0, #246]	; 0xf6
			conn->llcp_conn_param.state = cmd;
   2c0b6:	f8a0 20ee 	strh.w	r2, [r0, #238]	; 0xee
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2c0ba:	dac6      	bge.n	2c04a <ll_conn_update+0x7e>
				ull_slave_latency_cancel(conn, handle);
   2c0bc:	4641      	mov	r1, r8
   2c0be:	f7f0 fa7b 	bl	1c5b8 <ull_slave_latency_cancel>
   2c0c2:	e7c2      	b.n	2c04a <ll_conn_update+0x7e>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   2c0c4:	2402      	movs	r4, #2
   2c0c6:	e7c0      	b.n	2c04a <ll_conn_update+0x7e>
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   2c0c8:	241a      	movs	r4, #26
   2c0ca:	e7be      	b.n	2c04a <ll_conn_update+0x7e>
			return BT_HCI_ERR_CMD_DISALLOWED;
   2c0cc:	240c      	movs	r4, #12
   2c0ce:	e7bc      	b.n	2c04a <ll_conn_update+0x7e>

0002c0d0 <ll_chm_get>:
{
   2c0d0:	b538      	push	{r3, r4, r5, lr}
   2c0d2:	460c      	mov	r4, r1
	conn = ll_connected_get(handle);
   2c0d4:	f7ff ff6f 	bl	2bfb6 <ll_connected_get>
	if (!conn) {
   2c0d8:	4603      	mov	r3, r0
   2c0da:	b168      	cbz	r0, 2c0f8 <ll_chm_get+0x28>
		conn->chm_updated = 0U;
   2c0dc:	2500      	movs	r5, #0
   2c0de:	f100 0238 	add.w	r2, r0, #56	; 0x38
   2c0e2:	f883 5128 	strb.w	r5, [r3, #296]	; 0x128
   2c0e6:	6811      	ldr	r1, [r2, #0]
   2c0e8:	6021      	str	r1, [r4, #0]
   2c0ea:	7911      	ldrb	r1, [r2, #4]
   2c0ec:	7121      	strb	r1, [r4, #4]
	} while (conn->chm_updated);
   2c0ee:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   2c0f2:	2800      	cmp	r0, #0
   2c0f4:	d1f5      	bne.n	2c0e2 <ll_chm_get+0x12>
}
   2c0f6:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   2c0f8:	2002      	movs	r0, #2
   2c0fa:	e7fc      	b.n	2c0f6 <ll_chm_get+0x26>

0002c0fc <ll_terminate_ind_send>:
	switch (reason) {
   2c0fc:	2915      	cmp	r1, #21
{
   2c0fe:	b538      	push	{r3, r4, r5, lr}
   2c100:	4605      	mov	r5, r0
   2c102:	460c      	mov	r4, r1
	switch (reason) {
   2c104:	d817      	bhi.n	2c136 <ll_terminate_ind_send+0x3a>
   2c106:	2913      	cmp	r1, #19
   2c108:	d201      	bcs.n	2c10e <ll_terminate_ind_send+0x12>
   2c10a:	2905      	cmp	r1, #5
   2c10c:	d119      	bne.n	2c142 <ll_terminate_ind_send+0x46>
	conn = ll_connected_get(handle);
   2c10e:	4628      	mov	r0, r5
   2c110:	f7ff ff51 	bl	2bfb6 <ll_connected_get>
	if (!conn) {
   2c114:	b1b8      	cbz	r0, 2c146 <ll_terminate_ind_send+0x4a>
	conn->llcp_terminate.req++;
   2c116:	f890 20c8 	ldrb.w	r2, [r0, #200]	; 0xc8
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   2c11a:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
	conn->llcp_terminate.reason_own = reason;
   2c11e:	f880 40ca 	strb.w	r4, [r0, #202]	; 0xca
	conn->llcp_terminate.req++;
   2c122:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   2c124:	2b00      	cmp	r3, #0
	conn->llcp_terminate.req++;
   2c126:	f880 20c8 	strb.w	r2, [r0, #200]	; 0xc8
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   2c12a:	da02      	bge.n	2c132 <ll_terminate_ind_send+0x36>
		ull_slave_latency_cancel(conn, handle);
   2c12c:	4629      	mov	r1, r5
   2c12e:	f7f0 fa43 	bl	1c5b8 <ull_slave_latency_cancel>
	return 0;
   2c132:	2000      	movs	r0, #0
   2c134:	e006      	b.n	2c144 <ll_terminate_ind_send+0x48>
	switch (reason) {
   2c136:	2929      	cmp	r1, #41	; 0x29
   2c138:	d0e9      	beq.n	2c10e <ll_terminate_ind_send+0x12>
   2c13a:	293b      	cmp	r1, #59	; 0x3b
   2c13c:	d0e7      	beq.n	2c10e <ll_terminate_ind_send+0x12>
   2c13e:	291a      	cmp	r1, #26
   2c140:	e7e4      	b.n	2c10c <ll_terminate_ind_send+0x10>
		return BT_HCI_ERR_INVALID_PARAM;
   2c142:	2012      	movs	r0, #18
}
   2c144:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   2c146:	2002      	movs	r0, #2
   2c148:	e7fc      	b.n	2c144 <ll_terminate_ind_send+0x48>

0002c14a <ll_feature_req_send>:
{
   2c14a:	b510      	push	{r4, lr}
   2c14c:	4604      	mov	r4, r0
	conn = ll_connected_get(handle);
   2c14e:	f7ff ff32 	bl	2bfb6 <ll_connected_get>
	if (!conn) {
   2c152:	b188      	cbz	r0, 2c178 <ll_feature_req_send+0x2e>
	if (conn->llcp_feature.req != conn->llcp_feature.ack) {
   2c154:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
   2c158:	f890 20b5 	ldrb.w	r2, [r0, #181]	; 0xb5
   2c15c:	428a      	cmp	r2, r1
   2c15e:	d10d      	bne.n	2c17c <ll_feature_req_send+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2c160:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
	conn->llcp_feature.req++;
   2c164:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2c166:	2b00      	cmp	r3, #0
	conn->llcp_feature.req++;
   2c168:	f880 20b4 	strb.w	r2, [r0, #180]	; 0xb4
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2c16c:	da02      	bge.n	2c174 <ll_feature_req_send+0x2a>
		ull_slave_latency_cancel(conn, handle);
   2c16e:	4621      	mov	r1, r4
   2c170:	f7f0 fa22 	bl	1c5b8 <ull_slave_latency_cancel>
	return 0;
   2c174:	2000      	movs	r0, #0
   2c176:	e000      	b.n	2c17a <ll_feature_req_send+0x30>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   2c178:	2002      	movs	r0, #2
}
   2c17a:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   2c17c:	200c      	movs	r0, #12
   2c17e:	e7fc      	b.n	2c17a <ll_feature_req_send+0x30>

0002c180 <ll_version_ind_send>:
{
   2c180:	b510      	push	{r4, lr}
   2c182:	4604      	mov	r4, r0
	conn = ll_connected_get(handle);
   2c184:	f7ff ff17 	bl	2bfb6 <ll_connected_get>
	if (!conn) {
   2c188:	b188      	cbz	r0, 2c1ae <ll_version_ind_send+0x2e>
	if (conn->llcp_version.req != conn->llcp_version.ack) {
   2c18a:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
   2c18e:	f890 20c1 	ldrb.w	r2, [r0, #193]	; 0xc1
   2c192:	428a      	cmp	r2, r1
   2c194:	d10d      	bne.n	2c1b2 <ll_version_ind_send+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   2c196:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
	conn->llcp_version.req++;
   2c19a:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   2c19c:	2b00      	cmp	r3, #0
	conn->llcp_version.req++;
   2c19e:	f880 20c0 	strb.w	r2, [r0, #192]	; 0xc0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   2c1a2:	da02      	bge.n	2c1aa <ll_version_ind_send+0x2a>
		ull_slave_latency_cancel(conn, handle);
   2c1a4:	4621      	mov	r1, r4
   2c1a6:	f7f0 fa07 	bl	1c5b8 <ull_slave_latency_cancel>
	return 0;
   2c1aa:	2000      	movs	r0, #0
   2c1ac:	e000      	b.n	2c1b0 <ll_version_ind_send+0x30>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   2c1ae:	2002      	movs	r0, #2
}
   2c1b0:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   2c1b2:	200c      	movs	r0, #12
   2c1b4:	e7fc      	b.n	2c1b0 <ll_version_ind_send+0x30>

0002c1b6 <ull_conn_init>:
	err = init_reset();
   2c1b6:	f7ee bfcf 	b.w	1b158 <init_reset>

0002c1ba <tx_demux>:
{
   2c1ba:	b510      	push	{r4, lr}
   2c1bc:	4604      	mov	r4, r0
	ull_conn_tx_demux(1);
   2c1be:	2001      	movs	r0, #1
   2c1c0:	f7ef fed0 	bl	1bf64 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(param, 1);
   2c1c4:	4620      	mov	r0, r4
   2c1c6:	2101      	movs	r1, #1
}
   2c1c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ull_conn_tx_lll_enqueue(param, 1);
   2c1cc:	f7f0 b85e 	b.w	1c28c <ull_conn_tx_lll_enqueue>

0002c1d0 <ull_conn_lll_max_tx_octets_get>:
}
   2c1d0:	201b      	movs	r0, #27
   2c1d2:	4770      	bx	lr

0002c1d4 <lll_chan_sel_1>:
#endif /* CONFIG_BT_CTLR_CHAN_SEL_2 */

#if defined(CONFIG_BT_CONN)
uint8_t lll_chan_sel_1(uint8_t *chan_use, uint8_t hop, uint16_t latency, uint8_t *chan_map,
		    uint8_t chan_count)
{
   2c1d4:	b570      	push	{r4, r5, r6, lr}
	uint8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   2c1d6:	fb02 1101 	mla	r1, r2, r1, r1
   2c1da:	7802      	ldrb	r2, [r0, #0]
{
   2c1dc:	f89d 5010 	ldrb.w	r5, [sp, #16]
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   2c1e0:	440a      	add	r2, r1
   2c1e2:	2125      	movs	r1, #37	; 0x25
   2c1e4:	fbb2 f4f1 	udiv	r4, r2, r1
   2c1e8:	fb01 2414 	mls	r4, r1, r4, r2
   2c1ec:	b2e1      	uxtb	r1, r4
	*chan_use = chan_next;

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   2c1ee:	08ca      	lsrs	r2, r1, #3
	*chan_use = chan_next;
   2c1f0:	7001      	strb	r1, [r0, #0]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   2c1f2:	5c9a      	ldrb	r2, [r3, r2]
   2c1f4:	f004 0407 	and.w	r4, r4, #7
   2c1f8:	4122      	asrs	r2, r4
   2c1fa:	f012 0201 	ands.w	r2, r2, #1
   2c1fe:	d109      	bne.n	2c214 <lll_chan_sel_1+0x40>
		uint8_t chan_index;

		chan_index = chan_next % chan_count;
   2c200:	fbb1 f0f5 	udiv	r0, r1, r5
   2c204:	fb05 1010 	mls	r0, r5, r0, r1
   2c208:	b2c0      	uxtb	r0, r0
	uint8_t chan_next;
	uint8_t byte_count;

	chan_next = 0U;
	byte_count = 5U;
	while (byte_count--) {
   2c20a:	1e5d      	subs	r5, r3, #1
	chan_next = 0U;
   2c20c:	4611      	mov	r1, r2
   2c20e:	3304      	adds	r3, #4
	while (byte_count--) {
   2c210:	42ab      	cmp	r3, r5
   2c212:	d101      	bne.n	2c218 <lll_chan_sel_1+0x44>
}
   2c214:	4608      	mov	r0, r1
   2c216:	bd70      	pop	{r4, r5, r6, pc}
		uint8_t bite;
		uint8_t bit_count;

		bite = *chan_map;
   2c218:	f101 0408 	add.w	r4, r1, #8
   2c21c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
		bit_count = 8U;
		while (bit_count--) {
   2c220:	b2e4      	uxtb	r4, r4
		bite = *chan_map;
   2c222:	460a      	mov	r2, r1
		while (bit_count--) {
   2c224:	42a2      	cmp	r2, r4
   2c226:	4621      	mov	r1, r4
   2c228:	d0f2      	beq.n	2c210 <lll_chan_sel_1+0x3c>
			if (bite & 0x01) {
   2c22a:	07f1      	lsls	r1, r6, #31
   2c22c:	d502      	bpl.n	2c234 <lll_chan_sel_1+0x60>
				if (chan_index == 0U) {
   2c22e:	b128      	cbz	r0, 2c23c <lll_chan_sel_1+0x68>
					break;
				}
				chan_index--;
   2c230:	3801      	subs	r0, #1
   2c232:	b2c0      	uxtb	r0, r0
			}
			chan_next++;
   2c234:	3201      	adds	r2, #1
   2c236:	b2d2      	uxtb	r2, r2
			bite >>= 1;
   2c238:	0876      	lsrs	r6, r6, #1
   2c23a:	e7f3      	b.n	2c224 <lll_chan_sel_1+0x50>
				if (chan_index == 0U) {
   2c23c:	4611      	mov	r1, r2
   2c23e:	e7e9      	b.n	2c214 <lll_chan_sel_1+0x40>

0002c240 <ll_wl_size_get>:
}
   2c240:	2008      	movs	r0, #8
   2c242:	4770      	bx	lr

0002c244 <swi_lll_nrf5_isr>:
	mayfly_run(TICKER_USER_ID_LLL);
   2c244:	2000      	movs	r0, #0
   2c246:	f7eb bf4d 	b.w	180e4 <mayfly_run>

0002c24a <isr_race>:
	radio_status_reset();
   2c24a:	f7f2 b987 	b.w	1e55c <radio_status_reset>

0002c24e <radio_nrf5_isr>:
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   2c24e:	4668      	mov	r0, sp
   2c250:	f020 0107 	bic.w	r1, r0, #7
   2c254:	468d      	mov	sp, r1
   2c256:	b501      	push	{r0, lr}
	isr_radio();
   2c258:	f7f2 f890 	bl	1e37c <isr_radio>
	ISR_DIRECT_PM();
   2c25c:	f7da fda0 	bl	6da0 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   2c260:	f7db f8aa 	bl	73b8 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   2c264:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2c268:	4685      	mov	sp, r0
   2c26a:	4770      	bx	lr

0002c26c <lll_rand_isr_get>:
   2c26c:	f7f0 bc52 	b.w	1cb14 <lll_csrand_isr_get>

0002c270 <lll_reset>:
}
   2c270:	2000      	movs	r0, #0
   2c272:	4770      	bx	lr

0002c274 <lll_prepare>:
{
   2c274:	b513      	push	{r0, r1, r4, lr}
	return prepare(is_abort_cb, abort_cb, prepare_cb, prio, prepare_param,
   2c276:	2400      	movs	r4, #0
   2c278:	9401      	str	r4, [sp, #4]
   2c27a:	9c04      	ldr	r4, [sp, #16]
   2c27c:	9400      	str	r4, [sp, #0]
   2c27e:	f7f0 fafd 	bl	1c87c <prepare>
}
   2c282:	b002      	add	sp, #8
   2c284:	bd10      	pop	{r4, pc}

0002c286 <lll_prepare_done>:
}
   2c286:	2000      	movs	r0, #0
   2c288:	4770      	bx	lr

0002c28a <lll_is_abort_cb>:
}
   2c28a:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   2c28e:	4770      	bx	lr

0002c290 <lll_evt_offset_get>:
	} else if (evt->ticks_xtal_to_start & XON_BITMASK) {
   2c290:	e9d0 2300 	ldrd	r2, r3, [r0]
   2c294:	2a00      	cmp	r2, #0
   2c296:	da04      	bge.n	2c2a2 <lll_evt_offset_get+0x12>
		return MAX(evt->ticks_active_to_start,
   2c298:	6880      	ldr	r0, [r0, #8]
   2c29a:	4298      	cmp	r0, r3
   2c29c:	bf38      	it	cc
   2c29e:	4618      	movcc	r0, r3
   2c2a0:	4770      	bx	lr
		return MAX(evt->ticks_active_to_start,
   2c2a2:	429a      	cmp	r2, r3
   2c2a4:	bf38      	it	cc
   2c2a6:	461a      	movcc	r2, r3
   2c2a8:	4610      	mov	r0, r2
}
   2c2aa:	4770      	bx	lr

0002c2ac <lll_preempt_calc>:
{
   2c2ac:	b510      	push	{r4, lr}
   2c2ae:	4614      	mov	r4, r2
	ticks_now = ticker_ticks_now_get();
   2c2b0:	f7ff fcd7 	bl	2bc62 <ticker_ticks_now_get>
	diff = ticker_ticks_diff_get(ticks_now, ticks_at_event);
   2c2b4:	4621      	mov	r1, r4
   2c2b6:	f7ff fcd6 	bl	2bc66 <ticker_ticks_diff_get>
	diff += HAL_TICKER_CNTR_CMP_OFFSET_MIN;
   2c2ba:	3003      	adds	r0, #3
	if (!(diff & BIT(HAL_TICKER_CNTR_MSBIT)) &&
   2c2bc:	0203      	lsls	r3, r0, #8
   2c2be:	d404      	bmi.n	2c2ca <lll_preempt_calc+0x1e>
   2c2c0:	2809      	cmp	r0, #9
   2c2c2:	bf94      	ite	ls
   2c2c4:	2000      	movls	r0, #0
   2c2c6:	2001      	movhi	r0, #1
}
   2c2c8:	bd10      	pop	{r4, pc}
	return 0;
   2c2ca:	2000      	movs	r0, #0
   2c2cc:	e7fc      	b.n	2c2c8 <lll_preempt_calc+0x1c>

0002c2ce <lll_radio_is_idle>:
	return radio_is_idle();
   2c2ce:	f7f2 b965 	b.w	1e59c <radio_is_idle>

0002c2d2 <lll_radio_rx_ready_delay_get>:
	return radio_rx_ready_delay_get(phy, flags);
   2c2d2:	f000 ba57 	b.w	2c784 <radio_rx_ready_delay_get>

0002c2d6 <lll_isr_tx_status_reset>:
{
   2c2d6:	b508      	push	{r3, lr}
	radio_status_reset();
   2c2d8:	f7f2 f940 	bl	1e55c <radio_status_reset>
}
   2c2dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_status_reset();
   2c2e0:	f7f2 ba08 	b.w	1e6f4 <radio_tmr_status_reset>

0002c2e4 <lll_isr_rx_status_reset>:
{
   2c2e4:	b508      	push	{r3, lr}
	radio_status_reset();
   2c2e6:	f7f2 f939 	bl	1e55c <radio_status_reset>
	radio_tmr_status_reset();
   2c2ea:	f7f2 fa03 	bl	1e6f4 <radio_tmr_status_reset>
}
   2c2ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   2c2f2:	f7f2 b9af 	b.w	1e654 <radio_rssi_status_reset>

0002c2f6 <lll_isr_status_reset>:
{
   2c2f6:	b508      	push	{r3, lr}
	radio_status_reset();
   2c2f8:	f7f2 f930 	bl	1e55c <radio_status_reset>
	radio_tmr_status_reset();
   2c2fc:	f7f2 f9fa 	bl	1e6f4 <radio_tmr_status_reset>
	radio_filter_status_reset();
   2c300:	f7f2 f9e0 	bl	1e6c4 <radio_filter_status_reset>
	radio_ar_status_reset();
   2c304:	f7f2 fb0c 	bl	1e920 <radio_ar_status_reset>
}
   2c308:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   2c30c:	f7f2 b9a2 	b.w	1e654 <radio_rssi_status_reset>

0002c310 <lll_isr_abort>:
{
   2c310:	b510      	push	{r4, lr}
   2c312:	4604      	mov	r4, r0
	lll_isr_status_reset();
   2c314:	f7ff ffef 	bl	2c2f6 <lll_isr_status_reset>
	lll_isr_cleanup(param);
   2c318:	4620      	mov	r0, r4
}
   2c31a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   2c31e:	f7f0 bce3 	b.w	1cce8 <lll_isr_cleanup>

0002c322 <clock_ready>:
   2c322:	f101 0010 	add.w	r0, r1, #16
   2c326:	f7f7 bac9 	b.w	238bc <z_impl_k_sem_give>

0002c32a <lll_clock_ppm_local_get>:
}
   2c32a:	2014      	movs	r0, #20
   2c32c:	4770      	bx	lr

0002c32e <isr_abort>:
{
   2c32e:	b510      	push	{r4, lr}
   2c330:	4604      	mov	r4, r0
	lll_isr_status_reset();
   2c332:	f7ff ffe0 	bl	2c2f6 <lll_isr_status_reset>
	radio_filter_disable();
   2c336:	f7f2 f9bb 	bl	1e6b0 <radio_filter_disable>
	lll_isr_cleanup(param);
   2c33a:	4620      	mov	r0, r4
}
   2c33c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   2c340:	f7f0 bcd2 	b.w	1cce8 <lll_isr_cleanup>

0002c344 <lll_adv_reset>:
   2c344:	f7f0 be20 	b.w	1cf88 <lll_adv_init>

0002c348 <lll_adv_data_reset>:
	pdu->first = 0U;
   2c348:	2300      	movs	r3, #0
   2c34a:	7003      	strb	r3, [r0, #0]
	pdu->last = 0U;
   2c34c:	7043      	strb	r3, [r0, #1]
	pdu->pdu[1] = NULL;
   2c34e:	6083      	str	r3, [r0, #8]
}
   2c350:	4618      	mov	r0, r3
   2c352:	4770      	bx	lr

0002c354 <resume_prepare_cb>:
	evt = HDR_LLL2EVT(p->param);
   2c354:	68c3      	ldr	r3, [r0, #12]
{
   2c356:	b570      	push	{r4, r5, r6, lr}
   2c358:	4604      	mov	r4, r0
	evt = HDR_LLL2EVT(p->param);
   2c35a:	681e      	ldr	r6, [r3, #0]
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   2c35c:	f7ff fc81 	bl	2bc62 <ticker_ticks_now_get>
   2c360:	4605      	mov	r5, r0
   2c362:	4630      	mov	r0, r6
   2c364:	f7ff ff94 	bl	2c290 <lll_evt_offset_get>
	p->remainder = 0;
   2c368:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   2c36a:	1a28      	subs	r0, r5, r0
   2c36c:	6020      	str	r0, [r4, #0]
	p->remainder = 0;
   2c36e:	6063      	str	r3, [r4, #4]
	p->lazy = 0;
   2c370:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
   2c372:	4620      	mov	r0, r4
}
   2c374:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
   2c378:	f7f0 bf52 	b.w	1d220 <prepare_cb>

0002c37c <isr_done>:
{
   2c37c:	b510      	push	{r4, lr}
   2c37e:	4604      	mov	r4, r0
	lll_isr_status_reset();
   2c380:	f7ff ffb9 	bl	2c2f6 <lll_isr_status_reset>
	if (!IS_ENABLED(CONFIG_BT_CTLR_LOW_LAT) && lll->is_hdcd &&
   2c384:	7b23      	ldrb	r3, [r4, #12]
   2c386:	f003 0271 	and.w	r2, r3, #113	; 0x71
   2c38a:	2a01      	cmp	r2, #1
		lll->chan_map_curr = lll->chan_map;
   2c38c:	bf02      	ittt	eq
   2c38e:	f3c3 0242 	ubfxeq	r2, r3, #1, #3
   2c392:	f362 1306 	bfieq	r3, r2, #4, #3
   2c396:	7323      	strbeq	r3, [r4, #12]
	if (lll->chan_map_curr) {
   2c398:	7b23      	ldrb	r3, [r4, #12]
   2c39a:	f013 0f70 	tst.w	r3, #112	; 0x70
   2c39e:	d008      	beq.n	2c3b2 <isr_done+0x36>
		pdu = chan_prepare(lll);
   2c3a0:	4620      	mov	r0, r4
   2c3a2:	f7f0 fee3 	bl	1d16c <chan_prepare>
		radio_tx_enable();
   2c3a6:	f7f2 f8c1 	bl	1e52c <radio_tx_enable>
}
   2c3aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_tmr_end_capture();
   2c3ae:	f7f2 ba9d 	b.w	1e8ec <radio_tmr_end_capture>
	radio_filter_disable();
   2c3b2:	f7f2 f97d 	bl	1e6b0 <radio_filter_disable>
	lll_isr_cleanup(param);
   2c3b6:	4620      	mov	r0, r4
}
   2c3b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   2c3bc:	f7f0 bc94 	b.w	1cce8 <lll_isr_cleanup>

0002c3c0 <lll_adv_scan_req_check>:
{
   2c3c0:	b510      	push	{r4, lr}
	return (((lll->filter_policy & 0x01) == 0U) || devmatch_ok) &&
   2c3c2:	7b40      	ldrb	r0, [r0, #13]
{
   2c3c4:	f89d 4008 	ldrb.w	r4, [sp, #8]
	return (((lll->filter_policy & 0x01) == 0U) || devmatch_ok) &&
   2c3c8:	07c0      	lsls	r0, r0, #31
   2c3ca:	d500      	bpl.n	2c3ce <lll_adv_scan_req_check+0xe>
   2c3cc:	b174      	cbz	r4, 2c3ec <lll_adv_scan_req_check+0x2c>
}

static bool isr_rx_sr_adva_check(uint8_t tx_addr, uint8_t *addr,
				 struct pdu_adv *sr)
{
	return (tx_addr == sr->rx_addr) &&
   2c3ce:	7808      	ldrb	r0, [r1, #0]
   2c3d0:	ebb2 1fd0 	cmp.w	r2, r0, lsr #7
   2c3d4:	d108      	bne.n	2c3e8 <lll_adv_scan_req_check+0x28>
		!memcmp(addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   2c3d6:	2206      	movs	r2, #6
   2c3d8:	3108      	adds	r1, #8
   2c3da:	4618      	mov	r0, r3
   2c3dc:	f001 f8c4 	bl	2d568 <memcmp>
	return (tx_addr == sr->rx_addr) &&
   2c3e0:	fab0 f080 	clz	r0, r0
   2c3e4:	0940      	lsrs	r0, r0, #5
}
   2c3e6:	bd10      	pop	{r4, pc}
	return (tx_addr == sr->rx_addr) &&
   2c3e8:	2000      	movs	r0, #0
   2c3ea:	e7fc      	b.n	2c3e6 <lll_adv_scan_req_check+0x26>
	return (((lll->filter_policy & 0x01) == 0U) || devmatch_ok) &&
   2c3ec:	4620      	mov	r0, r4
   2c3ee:	e7fa      	b.n	2c3e6 <lll_adv_scan_req_check+0x26>

0002c3f0 <lll_adv_connect_ind_check>:
{
   2c3f0:	b538      	push	{r3, r4, r5, lr}
   2c3f2:	9d05      	ldr	r5, [sp, #20]
   2c3f4:	460c      	mov	r4, r1
   2c3f6:	f89d 1018 	ldrb.w	r1, [sp, #24]
	if (tgt_addr) {
   2c3fa:	b1fd      	cbz	r5, 2c43c <lll_adv_connect_ind_check+0x4c>
}

static inline bool isr_rx_ci_adva_check(uint8_t tx_addr, uint8_t *addr,
					struct pdu_adv *ci)
{
	return (tx_addr == ci->rx_addr) &&
   2c3fc:	7821      	ldrb	r1, [r4, #0]
   2c3fe:	ebb2 1fd1 	cmp.w	r2, r1, lsr #7
   2c402:	d003      	beq.n	2c40c <lll_adv_connect_ind_check+0x1c>
		       isr_rx_ci_adva_check(tx_addr, addr, ci) &&
   2c404:	2000      	movs	r0, #0
   2c406:	f000 0001 	and.w	r0, r0, #1
}
   2c40a:	bd38      	pop	{r3, r4, r5, pc}
		!memcmp(addr, ci->connect_ind.adv_addr, BDADDR_SIZE);
   2c40c:	2206      	movs	r2, #6
   2c40e:	f104 0108 	add.w	r1, r4, #8
   2c412:	4618      	mov	r0, r3
   2c414:	f001 f8a8 	bl	2d568 <memcmp>
		       isr_rx_ci_adva_check(tx_addr, addr, ci) &&
   2c418:	2800      	cmp	r0, #0
   2c41a:	d1f3      	bne.n	2c404 <lll_adv_connect_ind_check+0x14>
	return (rx_addr == ci->tx_addr) &&
   2c41c:	7823      	ldrb	r3, [r4, #0]
   2c41e:	f89d 2010 	ldrb.w	r2, [sp, #16]
   2c422:	f3c3 1380 	ubfx	r3, r3, #6, #1
   2c426:	4293      	cmp	r3, r2
   2c428:	d1ed      	bne.n	2c406 <lll_adv_connect_ind_check+0x16>
	       !memcmp(tgt_addr, ci->connect_ind.init_addr, BDADDR_SIZE);
   2c42a:	2206      	movs	r2, #6
   2c42c:	1ca1      	adds	r1, r4, #2
   2c42e:	4628      	mov	r0, r5
   2c430:	f001 f89a 	bl	2d568 <memcmp>
	return (rx_addr == ci->tx_addr) &&
   2c434:	fab0 f080 	clz	r0, r0
   2c438:	0940      	lsrs	r0, r0, #5
   2c43a:	e7e4      	b.n	2c406 <lll_adv_connect_ind_check+0x16>
	return (((lll->filter_policy & 0x02) == 0) ||
   2c43c:	7b40      	ldrb	r0, [r0, #13]
		(devmatch_ok)) &&
   2c43e:	0780      	lsls	r0, r0, #30
   2c440:	d500      	bpl.n	2c444 <lll_adv_connect_ind_check+0x54>
	return (((lll->filter_policy & 0x02) == 0) ||
   2c442:	b179      	cbz	r1, 2c464 <lll_adv_connect_ind_check+0x74>
	return (tx_addr == ci->rx_addr) &&
   2c444:	7821      	ldrb	r1, [r4, #0]
   2c446:	ebb2 1fd1 	cmp.w	r2, r1, lsr #7
   2c44a:	d109      	bne.n	2c460 <lll_adv_connect_ind_check+0x70>
		!memcmp(addr, ci->connect_ind.adv_addr, BDADDR_SIZE);
   2c44c:	2206      	movs	r2, #6
   2c44e:	f104 0108 	add.w	r1, r4, #8
   2c452:	4618      	mov	r0, r3
   2c454:	f001 f888 	bl	2d568 <memcmp>
	return (tx_addr == ci->rx_addr) &&
   2c458:	fab0 f080 	clz	r0, r0
   2c45c:	0940      	lsrs	r0, r0, #5
   2c45e:	e7d4      	b.n	2c40a <lll_adv_connect_ind_check+0x1a>
   2c460:	2000      	movs	r0, #0
   2c462:	e7d2      	b.n	2c40a <lll_adv_connect_ind_check+0x1a>
		(devmatch_ok)) &&
   2c464:	4608      	mov	r0, r1
   2c466:	e7d0      	b.n	2c40a <lll_adv_connect_ind_check+0x1a>

0002c468 <isr_done_cleanup>:
{
   2c468:	b538      	push	{r3, r4, r5, lr}
   2c46a:	4604      	mov	r4, r0
	if (lll_is_done(param)) {
   2c46c:	f7f0 fc06 	bl	1cc7c <lll_is_done>
   2c470:	4605      	mov	r5, r0
   2c472:	b998      	cbnz	r0, 2c49c <isr_done_cleanup+0x34>
	radio_filter_disable();
   2c474:	f7f2 f91c 	bl	1e6b0 <radio_filter_disable>
	if (++lll->chan == 3U) {
   2c478:	7a23      	ldrb	r3, [r4, #8]
   2c47a:	f3c3 0241 	ubfx	r2, r3, #1, #2
   2c47e:	3201      	adds	r2, #1
   2c480:	f002 0203 	and.w	r2, r2, #3
   2c484:	2a03      	cmp	r2, #3
   2c486:	bf14      	ite	ne
   2c488:	f362 0342 	bfine	r3, r2, #1, #2
		lll->chan = 0U;
   2c48c:	f365 0342 	bfieq	r3, r5, #1, #2
   2c490:	7223      	strb	r3, [r4, #8]
	lll_isr_cleanup(param);
   2c492:	4620      	mov	r0, r4
}
   2c494:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lll_isr_cleanup(param);
   2c498:	f7f0 bc26 	b.w	1cce8 <lll_isr_cleanup>
}
   2c49c:	bd38      	pop	{r3, r4, r5, pc}

0002c49e <isr_done>:
{
   2c49e:	b508      	push	{r3, lr}
	isr_common_done(param);
   2c4a0:	f7f1 f940 	bl	1d724 <isr_common_done>
	radio_rx_enable();
   2c4a4:	f7f2 f83c 	bl	1e520 <radio_rx_enable>
}
   2c4a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_end_capture();
   2c4ac:	f7f2 ba1e 	b.w	1e8ec <radio_tmr_end_capture>

0002c4b0 <resume_prepare_cb>:
	evt = HDR_LLL2EVT(p->param);
   2c4b0:	68c3      	ldr	r3, [r0, #12]
{
   2c4b2:	b570      	push	{r4, r5, r6, lr}
   2c4b4:	4604      	mov	r4, r0
	evt = HDR_LLL2EVT(p->param);
   2c4b6:	681e      	ldr	r6, [r3, #0]
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   2c4b8:	f7ff fbd3 	bl	2bc62 <ticker_ticks_now_get>
   2c4bc:	4605      	mov	r5, r0
   2c4be:	4630      	mov	r0, r6
   2c4c0:	f7ff fee6 	bl	2c290 <lll_evt_offset_get>
	p->remainder = 0;
   2c4c4:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   2c4c6:	1a28      	subs	r0, r5, r0
   2c4c8:	6020      	str	r0, [r4, #0]
	p->remainder = 0;
   2c4ca:	6063      	str	r3, [r4, #4]
	p->lazy = 0;
   2c4cc:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
   2c4ce:	4620      	mov	r0, r4
}
   2c4d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
   2c4d4:	f7f1 b852 	b.w	1d57c <prepare_cb>

0002c4d8 <isr_window>:
{
   2c4d8:	b510      	push	{r4, lr}
   2c4da:	4604      	mov	r4, r0
	isr_common_done(param);
   2c4dc:	f7f1 f922 	bl	1d724 <isr_common_done>
	if (++lll->chan == 3U) {
   2c4e0:	7a23      	ldrb	r3, [r4, #8]
   2c4e2:	f3c3 0241 	ubfx	r2, r3, #1, #2
   2c4e6:	3201      	adds	r2, #1
   2c4e8:	f002 0203 	and.w	r2, r2, #3
   2c4ec:	2a03      	cmp	r2, #3
   2c4ee:	bf14      	ite	ne
   2c4f0:	f362 0342 	bfine	r3, r2, #1, #2
		lll->chan = 0U;
   2c4f4:	f36f 0342 	bfceq	r3, #1, #2
   2c4f8:	7223      	strb	r3, [r4, #8]
	lll_chan_set(37 + lll->chan);
   2c4fa:	7a20      	ldrb	r0, [r4, #8]
   2c4fc:	f3c0 0041 	ubfx	r0, r0, #1, #2
   2c500:	3025      	adds	r0, #37	; 0x25
   2c502:	f7f0 fbc3 	bl	1cc8c <lll_chan_set>
	ticks_at_start = ticker_ticks_now_get() +
   2c506:	f7ff fbac 	bl	2bc62 <ticker_ticks_now_get>
	remainder_us = radio_tmr_start_tick(0, ticks_at_start);
   2c50a:	1cc1      	adds	r1, r0, #3
   2c50c:	2000      	movs	r0, #0
   2c50e:	f7f2 f97d 	bl	1e80c <radio_tmr_start_tick>
}
   2c512:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_tmr_end_capture();
   2c516:	f7f2 b9e9 	b.w	1e8ec <radio_tmr_end_capture>

0002c51a <isr_rx_scan_report.isra.5>:
			&srsp->scan_rsp.addr[0], BDADDR_SIZE) == 0));
}

static int isr_rx_scan_report(struct lll_scan *lll, uint8_t rssi_ready,
   2c51a:	b570      	push	{r4, r5, r6, lr}
   2c51c:	4606      	mov	r6, r0
				uint8_t rl_idx, bool dir_report)
{
	struct node_rx_pdu *node_rx;

	node_rx = ull_pdu_rx_alloc_peek(3);
   2c51e:	2003      	movs	r0, #3
static int isr_rx_scan_report(struct lll_scan *lll, uint8_t rssi_ready,
   2c520:	460d      	mov	r5, r1
	node_rx = ull_pdu_rx_alloc_peek(3);
   2c522:	f7ee f859 	bl	1a5d8 <ull_pdu_rx_alloc_peek>
	if (!node_rx) {
   2c526:	4604      	mov	r4, r0
   2c528:	b1b0      	cbz	r0, 2c558 <isr_rx_scan_report.isra.5+0x3e>
		return -ENOBUFS;
	}
	ull_pdu_rx_alloc();
   2c52a:	f7ee f86d 	bl	1a608 <ull_pdu_rx_alloc>

	/* Prepare the report (adv or scan resp) */
	node_rx->hdr.handle = 0xffff;
   2c52e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2c532:	80e3      	strh	r3, [r4, #6]
			}
			break;
		}
#endif /* CONFIG_BT_CTLR_ADV_EXT */
	} else {
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
   2c534:	2304      	movs	r3, #4
   2c536:	7123      	strb	r3, [r4, #4]
	}

	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
   2c538:	b166      	cbz	r6, 2c554 <isr_rx_scan_report.isra.5+0x3a>
   2c53a:	f7f2 f885 	bl	1e648 <radio_rssi_get>
   2c53e:	b2c0      	uxtb	r0, r0
   2c540:	7620      	strb	r0, [r4, #24]
		node_rx->hdr.rx_ftr.chan = _radio.scanner.chan - 1;
		node_rx->hdr.rx_ftr.ticks_anchor = _radio.ticks_anchor;
	}
#endif /* CONFIG_BT_CTLR_EXT_SCAN_FP */

	ull_rx_put(node_rx->hdr.link, node_rx);
   2c542:	4621      	mov	r1, r4
   2c544:	6820      	ldr	r0, [r4, #0]
	node_rx->hdr.rx_ftr.direct = dir_report;
   2c546:	7665      	strb	r5, [r4, #25]
	ull_rx_put(node_rx->hdr.link, node_rx);
   2c548:	f7ee f874 	bl	1a634 <ull_rx_put>
	ull_rx_sched();
   2c54c:	f7ee f882 	bl	1a654 <ull_rx_sched>

	return 0;
   2c550:	2000      	movs	r0, #0
}
   2c552:	bd70      	pop	{r4, r5, r6, pc}
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
   2c554:	207f      	movs	r0, #127	; 0x7f
   2c556:	e7f3      	b.n	2c540 <isr_rx_scan_report.isra.5+0x26>
		return -ENOBUFS;
   2c558:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2c55c:	e7f9      	b.n	2c552 <isr_rx_scan_report.isra.5+0x38>

0002c55e <isr_abort>:
{
   2c55e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2c560:	4605      	mov	r5, r0
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_LLL,
   2c562:	2400      	movs	r4, #0
	lll_isr_status_reset();
   2c564:	f7ff fec7 	bl	2c2f6 <lll_isr_status_reset>
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_LLL,
   2c568:	4623      	mov	r3, r4
   2c56a:	2203      	movs	r2, #3
   2c56c:	4621      	mov	r1, r4
   2c56e:	9400      	str	r4, [sp, #0]
   2c570:	4620      	mov	r0, r4
   2c572:	f7ec fb3d 	bl	18bf0 <ticker_stop>
	radio_disable();
   2c576:	f7f1 ffdf 	bl	1e538 <radio_disable>
	radio_filter_disable();
   2c57a:	f7f2 f899 	bl	1e6b0 <radio_filter_disable>
	if (++lll->chan == 3U) {
   2c57e:	7a2b      	ldrb	r3, [r5, #8]
   2c580:	f3c3 0241 	ubfx	r2, r3, #1, #2
   2c584:	3201      	adds	r2, #1
   2c586:	f002 0203 	and.w	r2, r2, #3
   2c58a:	2a03      	cmp	r2, #3
   2c58c:	bf14      	ite	ne
   2c58e:	f362 0342 	bfine	r3, r2, #1, #2
		lll->chan = 0U;
   2c592:	f364 0342 	bfieq	r3, r4, #1, #2
	lll_isr_cleanup(param);
   2c596:	4628      	mov	r0, r5
		lll->chan = 0U;
   2c598:	722b      	strb	r3, [r5, #8]
}
   2c59a:	b003      	add	sp, #12
   2c59c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	lll_isr_cleanup(param);
   2c5a0:	f7f0 bba2 	b.w	1cce8 <lll_isr_cleanup>

0002c5a4 <lll_scan_init>:
}
   2c5a4:	2000      	movs	r0, #0
   2c5a6:	4770      	bx	lr

0002c5a8 <lll_scan_reset>:
   2c5a8:	2000      	movs	r0, #0
   2c5aa:	4770      	bx	lr

0002c5ac <lll_conn_init>:
{
   2c5ac:	b508      	push	{r3, lr}

static void empty_tx_init(void)
{
	struct pdu_data *p;

	p = (void *)radio_pkt_empty_get();
   2c5ae:	f7f2 f815 	bl	1e5dc <radio_pkt_empty_get>
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   2c5b2:	7803      	ldrb	r3, [r0, #0]
   2c5b4:	2201      	movs	r2, #1
   2c5b6:	f362 0301 	bfi	r3, r2, #0, #2
   2c5ba:	7003      	strb	r3, [r0, #0]
}
   2c5bc:	2000      	movs	r0, #0
   2c5be:	bd08      	pop	{r3, pc}

0002c5c0 <lll_conn_reset>:
}
   2c5c0:	2000      	movs	r0, #0
   2c5c2:	4770      	bx	lr

0002c5c4 <lll_conn_flush>:
}
   2c5c4:	4770      	bx	lr

0002c5c6 <lll_conn_tx_pkt_set>:
{
   2c5c6:	b510      	push	{r4, lr}
   2c5c8:	460c      	mov	r4, r1
	radio_phy_set(phy, flags);
   2c5ca:	2100      	movs	r1, #0
   2c5cc:	4608      	mov	r0, r1
   2c5ce:	f7f1 ff29 	bl	1e424 <radio_phy_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
   2c5d2:	2008      	movs	r0, #8
   2c5d4:	2201      	movs	r2, #1
   2c5d6:	211b      	movs	r1, #27
   2c5d8:	f7f1 ff6a 	bl	1e4b0 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   2c5dc:	4620      	mov	r0, r4
}
   2c5de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_pkt_tx_set(pdu_data_tx);
   2c5e2:	f7f1 bf97 	b.w	1e514 <radio_pkt_tx_set>

0002c5e6 <lll_conn_pdu_tx_prep>:
{
   2c5e6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2c5ea:	4606      	mov	r6, r0
   2c5ec:	4688      	mov	r8, r1
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   2c5ee:	aa01      	add	r2, sp, #4
   2c5f0:	e9d0 0110 	ldrd	r0, r1, [r0, #64]	; 0x40
   2c5f4:	f7ff f8b6 	bl	2b764 <memq_peek>
	if (lll->empty || !link) {
   2c5f8:	f896 3056 	ldrb.w	r3, [r6, #86]	; 0x56
   2c5fc:	075b      	lsls	r3, r3, #29
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   2c5fe:	4681      	mov	r9, r0
	if (lll->empty || !link) {
   2c600:	d400      	bmi.n	2c604 <lll_conn_pdu_tx_prep+0x1e>
   2c602:	b9b8      	cbnz	r0, 2c634 <lll_conn_pdu_tx_prep+0x4e>
		lll->empty = 1U;
   2c604:	f896 3056 	ldrb.w	r3, [r6, #86]	; 0x56
   2c608:	f043 0304 	orr.w	r3, r3, #4
   2c60c:	f886 3056 	strb.w	r3, [r6, #86]	; 0x56
		p = (void *)radio_pkt_empty_get();
   2c610:	f7f1 ffe4 	bl	1e5dc <radio_pkt_empty_get>
   2c614:	4607      	mov	r7, r0
		if (link || FORCE_MD_CNT_GET()) {
   2c616:	7803      	ldrb	r3, [r0, #0]
   2c618:	f1b9 0f00 	cmp.w	r9, #0
   2c61c:	d007      	beq.n	2c62e <lll_conn_pdu_tx_prep+0x48>
			p->md = 1U;
   2c61e:	f043 0310 	orr.w	r3, r3, #16
			p->md = 0U;
   2c622:	703b      	strb	r3, [r7, #0]
	*pdu_data_tx = p;
   2c624:	f8c8 7000 	str.w	r7, [r8]
}
   2c628:	b003      	add	sp, #12
   2c62a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			p->md = 0U;
   2c62e:	f369 1304 	bfi	r3, r9, #4, #1
   2c632:	e7f6      	b.n	2c622 <lll_conn_pdu_tx_prep+0x3c>
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   2c634:	9d01      	ldr	r5, [sp, #4]
   2c636:	f896 4055 	ldrb.w	r4, [r6, #85]	; 0x55
		if (!lll->packet_tx_head_len) {
   2c63a:	f896 3054 	ldrb.w	r3, [r6, #84]	; 0x54
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   2c63e:	3504      	adds	r5, #4
   2c640:	192f      	adds	r7, r5, r4
		if (!lll->packet_tx_head_len) {
   2c642:	b913      	cbnz	r3, 2c64a <lll_conn_pdu_tx_prep+0x64>
			lll->packet_tx_head_len = p->len;
   2c644:	787b      	ldrb	r3, [r7, #1]
   2c646:	f886 3054 	strb.w	r3, [r6, #84]	; 0x54
		if (lll->packet_tx_head_offset) {
   2c64a:	b124      	cbz	r4, 2c656 <lll_conn_pdu_tx_prep+0x70>
			p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   2c64c:	5d2b      	ldrb	r3, [r5, r4]
   2c64e:	2201      	movs	r2, #1
   2c650:	f362 0301 	bfi	r3, r2, #0, #2
   2c654:	552b      	strb	r3, [r5, r4]
		p->len = lll->packet_tx_head_len - lll->packet_tx_head_offset;
   2c656:	f896 3054 	ldrb.w	r3, [r6, #84]	; 0x54
   2c65a:	1b1b      	subs	r3, r3, r4
   2c65c:	707b      	strb	r3, [r7, #1]
		max_tx_octets = ull_conn_lll_max_tx_octets_get(lll);
   2c65e:	4630      	mov	r0, r6
   2c660:	f7ff fdb6 	bl	2c1d0 <ull_conn_lll_max_tx_octets_get>
		if (p->len > max_tx_octets) {
   2c664:	787b      	ldrb	r3, [r7, #1]
   2c666:	4283      	cmp	r3, r0
   2c668:	d90b      	bls.n	2c682 <lll_conn_pdu_tx_prep+0x9c>
			p->len = max_tx_octets;
   2c66a:	7078      	strb	r0, [r7, #1]
			p->md = 1U;
   2c66c:	5d2b      	ldrb	r3, [r5, r4]
			p->md = 1U;
   2c66e:	f043 0310 	orr.w	r3, r3, #16
			p->md = 0U;
   2c672:	552b      	strb	r3, [r5, r4]
		p->rfu = 0U;
   2c674:	5d2b      	ldrb	r3, [r5, r4]
   2c676:	f36f 1347 	bfc	r3, #5, #3
   2c67a:	552b      	strb	r3, [r5, r4]
		p->resv = 0U;
   2c67c:	2300      	movs	r3, #0
   2c67e:	70bb      	strb	r3, [r7, #2]
   2c680:	e7d0      	b.n	2c624 <lll_conn_pdu_tx_prep+0x3e>
		} else if ((link->next != lll->memq_tx.tail) ||
   2c682:	6c73      	ldr	r3, [r6, #68]	; 0x44
   2c684:	f8d9 2000 	ldr.w	r2, [r9]
   2c688:	429a      	cmp	r2, r3
   2c68a:	5d2b      	ldrb	r3, [r5, r4]
   2c68c:	d1ef      	bne.n	2c66e <lll_conn_pdu_tx_prep+0x88>
			p->md = 0U;
   2c68e:	f36f 1304 	bfc	r3, #4, #1
   2c692:	e7ee      	b.n	2c672 <lll_conn_pdu_tx_prep+0x8c>

0002c694 <ecb_encrypt_be>:

void ecb_encrypt_be(uint8_t const *const key_be, uint8_t const *const clear_text_be,
		    uint8_t * const cipher_text_be)
{
   2c694:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c696:	b08d      	sub	sp, #52	; 0x34
   2c698:	4614      	mov	r4, r2
   2c69a:	460b      	mov	r3, r1
	struct ecb_param ecb;

	memcpy(&ecb.key[0], key_be, sizeof(ecb.key));
   2c69c:	4602      	mov	r2, r0
   2c69e:	466e      	mov	r6, sp
   2c6a0:	f100 0710 	add.w	r7, r0, #16
   2c6a4:	6810      	ldr	r0, [r2, #0]
   2c6a6:	6851      	ldr	r1, [r2, #4]
   2c6a8:	4635      	mov	r5, r6
   2c6aa:	c503      	stmia	r5!, {r0, r1}
   2c6ac:	3208      	adds	r2, #8
   2c6ae:	42ba      	cmp	r2, r7
   2c6b0:	462e      	mov	r6, r5
   2c6b2:	d1f7      	bne.n	2c6a4 <ecb_encrypt_be+0x10>
	memcpy(&ecb.clear_text[0], clear_text_be, sizeof(ecb.clear_text));
   2c6b4:	ad04      	add	r5, sp, #16
   2c6b6:	f103 0610 	add.w	r6, r3, #16
   2c6ba:	6818      	ldr	r0, [r3, #0]
   2c6bc:	6859      	ldr	r1, [r3, #4]
   2c6be:	462a      	mov	r2, r5
   2c6c0:	c203      	stmia	r2!, {r0, r1}
   2c6c2:	3308      	adds	r3, #8
   2c6c4:	42b3      	cmp	r3, r6
   2c6c6:	4615      	mov	r5, r2
   2c6c8:	d1f7      	bne.n	2c6ba <ecb_encrypt_be+0x26>

	do_ecb(&ecb);
   2c6ca:	4668      	mov	r0, sp
   2c6cc:	f7f1 fdb0 	bl	1e230 <do_ecb>
   2c6d0:	ad08      	add	r5, sp, #32
   2c6d2:	4622      	mov	r2, r4
   2c6d4:	ac0c      	add	r4, sp, #48	; 0x30
   2c6d6:	462b      	mov	r3, r5
   2c6d8:	cb03      	ldmia	r3!, {r0, r1}
   2c6da:	42a3      	cmp	r3, r4
   2c6dc:	6010      	str	r0, [r2, #0]
   2c6de:	6051      	str	r1, [r2, #4]
   2c6e0:	461d      	mov	r5, r3
   2c6e2:	f102 0208 	add.w	r2, r2, #8
   2c6e6:	d1f6      	bne.n	2c6d6 <ecb_encrypt_be+0x42>

	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}
   2c6e8:	b00d      	add	sp, #52	; 0x34
   2c6ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002c6ec <ecb_encrypt>:

void ecb_encrypt(uint8_t const *const key_le, uint8_t const *const clear_text_le,
		 uint8_t * const cipher_text_le, uint8_t * const cipher_text_be)
{
   2c6ec:	b570      	push	{r4, r5, r6, lr}
   2c6ee:	b08c      	sub	sp, #48	; 0x30
   2c6f0:	460e      	mov	r6, r1
   2c6f2:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   2c6f4:	4601      	mov	r1, r0
   2c6f6:	2210      	movs	r2, #16
   2c6f8:	4668      	mov	r0, sp
{
   2c6fa:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   2c6fc:	f7ff f803 	bl	2b706 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   2c700:	2210      	movs	r2, #16
   2c702:	eb0d 0002 	add.w	r0, sp, r2
   2c706:	4631      	mov	r1, r6
   2c708:	f7fe fffd 	bl	2b706 <mem_rcopy>

	do_ecb(&ecb);
   2c70c:	4668      	mov	r0, sp
   2c70e:	f7f1 fd8f 	bl	1e230 <do_ecb>

	if (cipher_text_le) {
   2c712:	b125      	cbz	r5, 2c71e <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   2c714:	2210      	movs	r2, #16
   2c716:	a908      	add	r1, sp, #32
   2c718:	4628      	mov	r0, r5
   2c71a:	f7fe fff4 	bl	2b706 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   2c71e:	b15c      	cbz	r4, 2c738 <ecb_encrypt+0x4c>
   2c720:	4623      	mov	r3, r4
   2c722:	ad08      	add	r5, sp, #32
   2c724:	ac0c      	add	r4, sp, #48	; 0x30
   2c726:	462a      	mov	r2, r5
   2c728:	ca03      	ldmia	r2!, {r0, r1}
   2c72a:	42a2      	cmp	r2, r4
   2c72c:	6018      	str	r0, [r3, #0]
   2c72e:	6059      	str	r1, [r3, #4]
   2c730:	4615      	mov	r5, r2
   2c732:	f103 0308 	add.w	r3, r3, #8
   2c736:	d1f6      	bne.n	2c726 <ecb_encrypt+0x3a>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
			 sizeof(ecb.cipher_text));
	}
}
   2c738:	b00c      	add	sp, #48	; 0x30
   2c73a:	bd70      	pop	{r4, r5, r6, pc}

0002c73c <radio_setup>:
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   2c73c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2c740:	f04f 32ff 	mov.w	r2, #4294967295
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   2c744:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   2c746:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   2c74a:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   2c74e:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   2c752:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   2c756:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   2c75a:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   2c75e:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   2c762:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   2c766:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   2c76a:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   2c76e:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   2c772:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   2c776:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   2c77a:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
}
   2c77e:	4770      	bx	lr

0002c780 <radio_tx_chain_delay_get>:
}
   2c780:	2001      	movs	r0, #1
   2c782:	4770      	bx	lr

0002c784 <radio_rx_ready_delay_get>:
}
   2c784:	2029      	movs	r0, #41	; 0x29
   2c786:	4770      	bx	lr

0002c788 <radio_rx_chain_delay_get>:
	switch (phy) {
   2c788:	2802      	cmp	r0, #2
}
   2c78a:	bf14      	ite	ne
   2c78c:	200a      	movne	r0, #10
   2c78e:	2005      	moveq	r0, #5
   2c790:	4770      	bx	lr

0002c792 <mayfly_prio_is_equal>:
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   2c792:	4288      	cmp	r0, r1
   2c794:	d00c      	beq.n	2c7b0 <mayfly_prio_is_equal+0x1e>
	return (caller_id == callee_id) ||
   2c796:	b978      	cbnz	r0, 2c7b8 <mayfly_prio_is_equal+0x26>
	       ((caller_id == MAYFLY_CALL_ID_LLL) &&
   2c798:	1e48      	subs	r0, r1, #1
   2c79a:	2801      	cmp	r0, #1
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   2c79c:	bf8c      	ite	hi
   2c79e:	2000      	movhi	r0, #0
   2c7a0:	2001      	movls	r0, #1
   2c7a2:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   2c7a4:	f011 0ffd 	tst.w	r1, #253	; 0xfd
   2c7a8:	bf0c      	ite	eq
   2c7aa:	2001      	moveq	r0, #1
   2c7ac:	2000      	movne	r0, #0
   2c7ae:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   2c7b0:	2001      	movs	r0, #1
   2c7b2:	4770      	bx	lr
   2c7b4:	2000      	movs	r0, #0
}
   2c7b6:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   2c7b8:	2801      	cmp	r0, #1
   2c7ba:	d0f3      	beq.n	2c7a4 <mayfly_prio_is_equal+0x12>
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   2c7bc:	2802      	cmp	r0, #2
   2c7be:	d1f9      	bne.n	2c7b4 <mayfly_prio_is_equal+0x22>
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   2c7c0:	2901      	cmp	r1, #1
   2c7c2:	e7eb      	b.n	2c79c <mayfly_prio_is_equal+0xa>

0002c7c4 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(uint32_t value)
{
	cntr_cmp_set(0, value);
   2c7c4:	4601      	mov	r1, r0
   2c7c6:	2000      	movs	r0, #0
   2c7c8:	f7f1 bd2a 	b.w	1e220 <cntr_cmp_set>

0002c7cc <sys_put_le32>:
	dst[1] = val >> 8;
   2c7cc:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   2c7d0:	7008      	strb	r0, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
   2c7d2:	0c00      	lsrs	r0, r0, #16
	dst[0] = val;
   2c7d4:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
   2c7d6:	0a00      	lsrs	r0, r0, #8
   2c7d8:	704b      	strb	r3, [r1, #1]
   2c7da:	70c8      	strb	r0, [r1, #3]
}
   2c7dc:	4770      	bx	lr

0002c7de <hci_vendor_read_static_addr>:
				 uint8_t size)
{
	/* only one supported */
	ARG_UNUSED(size);

	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   2c7de:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
{
   2c7e2:	b510      	push	{r4, lr}
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   2c7e4:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   2c7e8:	3201      	adds	r2, #1
{
   2c7ea:	4604      	mov	r4, r0
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   2c7ec:	d106      	bne.n	2c7fc <hci_vendor_read_static_addr+0x1e>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   2c7ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   2c7f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   2c7f6:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   2c7f8:	4293      	cmp	r3, r2
   2c7fa:	d044      	beq.n	2c886 <hci_vendor_read_static_addr+0xa8>
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   2c7fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   2c800:	f8d2 00a0 	ldr.w	r0, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   2c804:	f010 0001 	ands.w	r0, r0, #1
   2c808:	d036      	beq.n	2c878 <hci_vendor_read_static_addr+0x9a>
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addrs[0].bdaddr.val[0]);
   2c80a:	4621      	mov	r1, r4
   2c80c:	f8d2 00a4 	ldr.w	r0, [r2, #164]	; 0xa4
   2c810:	f7ff ffdc 	bl	2c7cc <sys_put_le32>
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addrs[0].bdaddr.val[4]);
   2c814:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
	dst[0] = val;
   2c818:	7123      	strb	r3, [r4, #4]
	dst[1] = val >> 8;
   2c81a:	f3c3 2307 	ubfx	r3, r3, #8, #8

		/* The FICR value is a just a random number, with no knowledge
		 * of the Bluetooth Specification requirements for random
		 * static addresses.
		 */
		BT_ADDR_SET_STATIC(&addrs[0].bdaddr);
   2c81e:	f063 033f 	orn	r3, r3, #63	; 0x3f
   2c822:	7163      	strb	r3, [r4, #5]

		/* If no public address is provided and a static address is
		 * available, then it is recommended to return an identity root
		 * key (if available) from this command.
		 */
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   2c824:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
   2c828:	3101      	adds	r1, #1
   2c82a:	f104 0306 	add.w	r3, r4, #6
   2c82e:	d024      	beq.n	2c87a <hci_vendor_read_static_addr+0x9c>
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   2c830:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   2c834:	3101      	adds	r1, #1
   2c836:	d020      	beq.n	2c87a <hci_vendor_read_static_addr+0x9c>
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   2c838:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   2c83c:	3101      	adds	r1, #1
   2c83e:	d01c      	beq.n	2c87a <hci_vendor_read_static_addr+0x9c>
		    (NRF_FICR->IR[3] != UINT32_MAX)) {
   2c840:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   2c844:	3101      	adds	r1, #1
   2c846:	d018      	beq.n	2c87a <hci_vendor_read_static_addr+0x9c>
			sys_put_le32(NRF_FICR->IR[0], &addrs[0].ir[0]);
   2c848:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
   2c84c:	4619      	mov	r1, r3
   2c84e:	f7ff ffbd 	bl	2c7cc <sys_put_le32>
			sys_put_le32(NRF_FICR->IR[1], &addrs[0].ir[4]);
   2c852:	f104 010a 	add.w	r1, r4, #10
   2c856:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
   2c85a:	f7ff ffb7 	bl	2c7cc <sys_put_le32>
			sys_put_le32(NRF_FICR->IR[2], &addrs[0].ir[8]);
   2c85e:	f104 010e 	add.w	r1, r4, #14
   2c862:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
   2c866:	f7ff ffb1 	bl	2c7cc <sys_put_le32>
			sys_put_le32(NRF_FICR->IR[3], &addrs[0].ir[12]);
   2c86a:	f104 0112 	add.w	r1, r4, #18
   2c86e:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
   2c872:	f7ff ffab 	bl	2c7cc <sys_put_le32>
		} else {
			/* Mark IR as invalid */
			(void)memset(addrs[0].ir, 0x00, sizeof(addrs[0].ir));
		}

		return 1;
   2c876:	2001      	movs	r0, #1
	}

	return 0;
}
   2c878:	bd10      	pop	{r4, pc}
__ssp_bos_icheck3(memset, void *, int)
   2c87a:	2210      	movs	r2, #16
   2c87c:	2100      	movs	r1, #0
   2c87e:	4618      	mov	r0, r3
   2c880:	f000 febb 	bl	2d5fa <memset>
   2c884:	e7f7      	b.n	2c876 <hci_vendor_read_static_addr+0x98>
	return 0;
   2c886:	2000      	movs	r0, #0
   2c888:	e7f6      	b.n	2c878 <hci_vendor_read_static_addr+0x9a>

0002c88a <hci_vendor_read_key_hierarchy_roots>:

void hci_vendor_read_key_hierarchy_roots(uint8_t ir[16], uint8_t er[16])
{
   2c88a:	b510      	push	{r4, lr}
   2c88c:	2210      	movs	r2, #16
   2c88e:	460c      	mov	r4, r1
   2c890:	2100      	movs	r1, #0
   2c892:	f000 feb2 	bl	2d5fa <memset>
	 * using Read Static Addresses command.
	 */
	(void)memset(ir, 0x00, 16);

	/* Fill in ER if present */
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   2c896:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   2c89a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   2c89e:	3301      	adds	r3, #1
   2c8a0:	d023      	beq.n	2c8ea <hci_vendor_read_key_hierarchy_roots+0x60>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   2c8a2:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   2c8a6:	3301      	adds	r3, #1
   2c8a8:	d01f      	beq.n	2c8ea <hci_vendor_read_key_hierarchy_roots+0x60>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   2c8aa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   2c8ae:	3301      	adds	r3, #1
   2c8b0:	d01b      	beq.n	2c8ea <hci_vendor_read_key_hierarchy_roots+0x60>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
   2c8b2:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   2c8b6:	3301      	adds	r3, #1
   2c8b8:	d017      	beq.n	2c8ea <hci_vendor_read_key_hierarchy_roots+0x60>
		sys_put_le32(NRF_FICR->ER[0], &er[0]);
   2c8ba:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
   2c8be:	4621      	mov	r1, r4
   2c8c0:	f7ff ff84 	bl	2c7cc <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[1], &er[4]);
   2c8c4:	1d21      	adds	r1, r4, #4
   2c8c6:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
   2c8ca:	f7ff ff7f 	bl	2c7cc <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[2], &er[8]);
   2c8ce:	f104 0108 	add.w	r1, r4, #8
   2c8d2:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
   2c8d6:	f7ff ff79 	bl	2c7cc <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   2c8da:	f104 010c 	add.w	r1, r4, #12
   2c8de:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
	} else {
		/* Mark ER as invalid */
		(void)memset(er, 0x00, 16);
	}
}
   2c8e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   2c8e6:	f7ff bf71 	b.w	2c7cc <sys_put_le32>
   2c8ea:	4620      	mov	r0, r4
   2c8ec:	2210      	movs	r2, #16
   2c8ee:	2100      	movs	r1, #0
}
   2c8f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2c8f4:	f000 be81 	b.w	2d5fa <memset>

0002c8f8 <fixed_data_unref>:
}
   2c8f8:	4770      	bx	lr

0002c8fa <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2c8fa:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   2c8fc:	6849      	ldr	r1, [r1, #4]
   2c8fe:	6809      	ldr	r1, [r1, #0]
   2c900:	f7f2 b966 	b.w	1ebd0 <net_buf_alloc_len>

0002c904 <net_buf_simple_init_with_data>:
	buf->size  = size;
   2c904:	b292      	uxth	r2, r2
	buf->__buf = data;
   2c906:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   2c908:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   2c90a:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   2c90c:	8082      	strh	r2, [r0, #4]
}
   2c90e:	4770      	bx	lr

0002c910 <net_buf_simple_clone>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2c910:	6803      	ldr	r3, [r0, #0]
   2c912:	600b      	str	r3, [r1, #0]
   2c914:	6843      	ldr	r3, [r0, #4]
   2c916:	604b      	str	r3, [r1, #4]
   2c918:	6883      	ldr	r3, [r0, #8]
   2c91a:	608b      	str	r3, [r1, #8]
}
   2c91c:	4770      	bx	lr

0002c91e <net_buf_simple_push_be16>:
{
   2c91e:	b510      	push	{r4, lr}
   2c920:	460c      	mov	r4, r1
	sys_put_be16(val, net_buf_simple_push(buf, sizeof(val)));
   2c922:	2102      	movs	r1, #2
   2c924:	f7f2 fc0e 	bl	1f144 <net_buf_simple_push>
	dst[0] = val >> 8;
   2c928:	0a23      	lsrs	r3, r4, #8
   2c92a:	7003      	strb	r3, [r0, #0]
	dst[1] = val;
   2c92c:	7044      	strb	r4, [r0, #1]
}
   2c92e:	bd10      	pop	{r4, pc}

0002c930 <net_buf_simple_push_u8>:
{
   2c930:	b510      	push	{r4, lr}
   2c932:	460c      	mov	r4, r1
	uint8_t *data = net_buf_simple_push(buf, 1);
   2c934:	2101      	movs	r1, #1
   2c936:	f7f2 fc05 	bl	1f144 <net_buf_simple_push>
	*data = val;
   2c93a:	7004      	strb	r4, [r0, #0]
}
   2c93c:	bd10      	pop	{r4, pc}

0002c93e <net_buf_simple_push_be24>:
{
   2c93e:	b510      	push	{r4, lr}
   2c940:	460c      	mov	r4, r1
	sys_put_be24(val, net_buf_simple_push(buf, 3));
   2c942:	2103      	movs	r1, #3
   2c944:	f7f2 fbfe 	bl	1f144 <net_buf_simple_push>
	dst[0] = val >> 16;
   2c948:	0c23      	lsrs	r3, r4, #16
   2c94a:	7003      	strb	r3, [r0, #0]
	dst[0] = val >> 8;
   2c94c:	f3c4 2307 	ubfx	r3, r4, #8, #8
   2c950:	7043      	strb	r3, [r0, #1]
	dst[1] = val;
   2c952:	7084      	strb	r4, [r0, #2]
}
   2c954:	bd10      	pop	{r4, pc}

0002c956 <net_buf_simple_pull_u8>:
{
   2c956:	b510      	push	{r4, lr}
	val = buf->data[0];
   2c958:	6803      	ldr	r3, [r0, #0]
   2c95a:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   2c95c:	2101      	movs	r1, #1
   2c95e:	f7f2 fc0f 	bl	1f180 <net_buf_simple_pull>
}
   2c962:	4620      	mov	r0, r4
   2c964:	bd10      	pop	{r4, pc}

0002c966 <net_buf_simple_pull_le16>:
{
   2c966:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
   2c968:	6803      	ldr	r3, [r0, #0]
   2c96a:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2c96c:	2102      	movs	r1, #2
   2c96e:	f7f2 fc07 	bl	1f180 <net_buf_simple_pull>
}
   2c972:	4620      	mov	r0, r4
   2c974:	bd10      	pop	{r4, pc}

0002c976 <net_buf_simple_pull_be16>:
	val = UNALIGNED_GET((uint16_t *)buf->data);
   2c976:	6803      	ldr	r3, [r0, #0]
{
   2c978:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
   2c97a:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2c97c:	2102      	movs	r1, #2
   2c97e:	f7f2 fbff 	bl	1f180 <net_buf_simple_pull>
	return sys_be16_to_cpu(val);
   2c982:	0220      	lsls	r0, r4, #8
   2c984:	ea40 2014 	orr.w	r0, r0, r4, lsr #8
}
   2c988:	b280      	uxth	r0, r0
   2c98a:	bd10      	pop	{r4, pc}

0002c98c <net_buf_simple_pull_le24>:
	val = UNALIGNED_GET((struct uint24 *)buf->data);
   2c98c:	6803      	ldr	r3, [r0, #0]
{
   2c98e:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((struct uint24 *)buf->data);
   2c990:	785a      	ldrb	r2, [r3, #1]
   2c992:	781c      	ldrb	r4, [r3, #0]
   2c994:	789b      	ldrb	r3, [r3, #2]
   2c996:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
   2c99a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
	net_buf_simple_pull(buf, sizeof(val));
   2c99e:	2103      	movs	r1, #3
   2c9a0:	f7f2 fbee 	bl	1f180 <net_buf_simple_pull>
}
   2c9a4:	4620      	mov	r0, r4
   2c9a6:	bd10      	pop	{r4, pc}

0002c9a8 <net_buf_simple_pull_le32>:
{
   2c9a8:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint32_t *)buf->data);
   2c9aa:	6803      	ldr	r3, [r0, #0]
   2c9ac:	681c      	ldr	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2c9ae:	2104      	movs	r1, #4
   2c9b0:	f7f2 fbe6 	bl	1f180 <net_buf_simple_pull>
}
   2c9b4:	4620      	mov	r0, r4
   2c9b6:	bd10      	pop	{r4, pc}

0002c9b8 <net_buf_simple_pull_be32>:
{
   2c9b8:	b510      	push	{r4, lr}
   2c9ba:	6803      	ldr	r3, [r0, #0]
   2c9bc:	681c      	ldr	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2c9be:	2104      	movs	r1, #4
   2c9c0:	ba24      	rev	r4, r4
   2c9c2:	f7f2 fbdd 	bl	1f180 <net_buf_simple_pull>
}
   2c9c6:	4620      	mov	r0, r4
   2c9c8:	bd10      	pop	{r4, pc}

0002c9ca <net_buf_simple_headroom>:
	return buf->data - buf->__buf;
   2c9ca:	6802      	ldr	r2, [r0, #0]
   2c9cc:	6880      	ldr	r0, [r0, #8]
}
   2c9ce:	1a10      	subs	r0, r2, r0
   2c9d0:	4770      	bx	lr

0002c9d2 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2c9d2:	8883      	ldrh	r3, [r0, #4]
   2c9d4:	88c2      	ldrh	r2, [r0, #6]
   2c9d6:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   2c9d8:	6803      	ldr	r3, [r0, #0]
   2c9da:	6880      	ldr	r0, [r0, #8]
   2c9dc:	1a18      	subs	r0, r3, r0
}
   2c9de:	1a10      	subs	r0, r2, r0
   2c9e0:	4770      	bx	lr

0002c9e2 <net_buf_simple_add_mem>:
{
   2c9e2:	b538      	push	{r3, r4, r5, lr}
   2c9e4:	460d      	mov	r5, r1
   2c9e6:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2c9e8:	4611      	mov	r1, r2
   2c9ea:	f7f2 fc03 	bl	1f1f4 <net_buf_simple_add>
   2c9ee:	4622      	mov	r2, r4
   2c9f0:	4629      	mov	r1, r5
}
   2c9f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2c9f6:	f000 bdc5 	b.w	2d584 <memcpy>

0002c9fa <net_buf_simple_add_u8>:
{
   2c9fa:	b510      	push	{r4, lr}
   2c9fc:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
   2c9fe:	2101      	movs	r1, #1
   2ca00:	f7f2 fbf8 	bl	1f1f4 <net_buf_simple_add>
	*u8 = val;
   2ca04:	7004      	strb	r4, [r0, #0]
}
   2ca06:	bd10      	pop	{r4, pc}

0002ca08 <net_buf_simple_add_le16>:
{
   2ca08:	b510      	push	{r4, lr}
   2ca0a:	460c      	mov	r4, r1
	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
   2ca0c:	2102      	movs	r1, #2
   2ca0e:	f7f2 fbf1 	bl	1f1f4 <net_buf_simple_add>
	dst[0] = val;
   2ca12:	7004      	strb	r4, [r0, #0]
	dst[1] = val >> 8;
   2ca14:	0a24      	lsrs	r4, r4, #8
   2ca16:	7044      	strb	r4, [r0, #1]
}
   2ca18:	bd10      	pop	{r4, pc}

0002ca1a <net_buf_simple_add_be16>:
{
   2ca1a:	b510      	push	{r4, lr}
   2ca1c:	460c      	mov	r4, r1
	sys_put_be16(val, net_buf_simple_add(buf, sizeof(val)));
   2ca1e:	2102      	movs	r1, #2
   2ca20:	f7f2 fbe8 	bl	1f1f4 <net_buf_simple_add>
	dst[0] = val >> 8;
   2ca24:	0a23      	lsrs	r3, r4, #8
   2ca26:	7003      	strb	r3, [r0, #0]
	dst[1] = val;
   2ca28:	7044      	strb	r4, [r0, #1]
}
   2ca2a:	bd10      	pop	{r4, pc}

0002ca2c <net_buf_simple_add_le24>:
{
   2ca2c:	b510      	push	{r4, lr}
   2ca2e:	460c      	mov	r4, r1
	sys_put_le24(val, net_buf_simple_add(buf, 3));
   2ca30:	2103      	movs	r1, #3
   2ca32:	f7f2 fbdf 	bl	1f1f4 <net_buf_simple_add>
	dst[1] = val >> 8;
   2ca36:	f3c4 2307 	ubfx	r3, r4, #8, #8
	dst[0] = val;
   2ca3a:	7004      	strb	r4, [r0, #0]
	dst[2] = val >> 16;
   2ca3c:	0c24      	lsrs	r4, r4, #16
	dst[1] = val >> 8;
   2ca3e:	7043      	strb	r3, [r0, #1]
	dst[2] = val >> 16;
   2ca40:	7084      	strb	r4, [r0, #2]
}
   2ca42:	bd10      	pop	{r4, pc}

0002ca44 <net_buf_simple_add_le32>:
{
   2ca44:	b510      	push	{r4, lr}
   2ca46:	460c      	mov	r4, r1
	sys_put_le32(val, net_buf_simple_add(buf, sizeof(val)));
   2ca48:	2104      	movs	r1, #4
   2ca4a:	f7f2 fbd3 	bl	1f1f4 <net_buf_simple_add>
	dst[1] = val >> 8;
   2ca4e:	f3c4 2307 	ubfx	r3, r4, #8, #8
	dst[0] = val;
   2ca52:	7004      	strb	r4, [r0, #0]
	sys_put_le16(val >> 16, &dst[2]);
   2ca54:	0c24      	lsrs	r4, r4, #16
	dst[0] = val;
   2ca56:	7084      	strb	r4, [r0, #2]
	dst[1] = val >> 8;
   2ca58:	0a24      	lsrs	r4, r4, #8
   2ca5a:	7043      	strb	r3, [r0, #1]
   2ca5c:	70c4      	strb	r4, [r0, #3]
}
   2ca5e:	bd10      	pop	{r4, pc}

0002ca60 <net_buf_simple_add_be32>:
{
   2ca60:	b510      	push	{r4, lr}
   2ca62:	460c      	mov	r4, r1
	sys_put_be32(val, net_buf_simple_add(buf, sizeof(val)));
   2ca64:	2104      	movs	r1, #4
   2ca66:	f7f2 fbc5 	bl	1f1f4 <net_buf_simple_add>
	sys_put_be16(val >> 16, dst);
   2ca6a:	0c23      	lsrs	r3, r4, #16
	dst[0] = val >> 8;
   2ca6c:	0a1a      	lsrs	r2, r3, #8
	dst[1] = val;
   2ca6e:	7043      	strb	r3, [r0, #1]
	dst[0] = val >> 8;
   2ca70:	f3c4 2307 	ubfx	r3, r4, #8, #8
   2ca74:	7002      	strb	r2, [r0, #0]
   2ca76:	7083      	strb	r3, [r0, #2]
	dst[1] = val;
   2ca78:	70c4      	strb	r4, [r0, #3]
}
   2ca7a:	bd10      	pop	{r4, pc}

0002ca7c <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2ca7c:	6843      	ldr	r3, [r0, #4]
   2ca7e:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   2ca80:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   2ca84:	600b      	str	r3, [r1, #0]
}
   2ca86:	2000      	movs	r0, #0
   2ca88:	4770      	bx	lr

0002ca8a <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2ca8a:	6843      	ldr	r3, [r0, #4]
   2ca8c:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   2ca8e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   2ca92:	4042      	eors	r2, r0
   2ca94:	400a      	ands	r2, r1
   2ca96:	4042      	eors	r2, r0
    p_reg->OUT = value;
   2ca98:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   2ca9c:	2000      	movs	r0, #0
   2ca9e:	4770      	bx	lr

0002caa0 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2caa0:	6843      	ldr	r3, [r0, #4]
   2caa2:	685b      	ldr	r3, [r3, #4]
}
   2caa4:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   2caa6:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   2caaa:	4770      	bx	lr

0002caac <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2caac:	6843      	ldr	r3, [r0, #4]
   2caae:	685b      	ldr	r3, [r3, #4]
}
   2cab0:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   2cab2:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   2cab6:	4770      	bx	lr

0002cab8 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2cab8:	6843      	ldr	r3, [r0, #4]
   2caba:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   2cabc:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   2cac0:	4059      	eors	r1, r3
    p_reg->OUT = value;
   2cac2:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
}
   2cac6:	2000      	movs	r0, #0
   2cac8:	4770      	bx	lr

0002caca <nrf_gpio_cfg_sense_set>:
{
   2caca:	b513      	push	{r0, r1, r4, lr}
   2cacc:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2cace:	a801      	add	r0, sp, #4
{
   2cad0:	460c      	mov	r4, r1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2cad2:	f7f2 fc1b 	bl	1f30c <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   2cad6:	9a01      	ldr	r2, [sp, #4]
   2cad8:	eb00 0082 	add.w	r0, r0, r2, lsl #2
   2cadc:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
   2cae0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   2cae4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   2cae8:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
   2caec:	b002      	add	sp, #8
   2caee:	bd10      	pop	{r4, pc}

0002caf0 <check_level_trigger_pins>:
	struct gpio_nrfx_data *data = get_port_data(port);
   2caf0:	68c3      	ldr	r3, [r0, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   2caf2:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
{
   2caf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t out = data->pin_int_en;
   2cafa:	68dc      	ldr	r4, [r3, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   2cafc:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   2cb00:	691b      	ldr	r3, [r3, #16]
	out &= ~data->trig_edge & ~data->double_edge;
   2cb02:	430a      	orrs	r2, r1
   2cb04:	ea24 0402 	bic.w	r4, r4, r2
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
   2cb08:	f8d8 2004 	ldr.w	r2, [r8, #4]
    return p_reg->IN;
   2cb0c:	f8d2 5510 	ldr.w	r5, [r2, #1296]	; 0x510
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   2cb10:	405d      	eors	r5, r3
	uint32_t out = pin_states & level_pins;
   2cb12:	ea24 0505 	bic.w	r5, r4, r5
	uint32_t bit = 1U << pin;
   2cb16:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   2cb18:	2700      	movs	r7, #0
	while (level_pins) {
   2cb1a:	b914      	cbnz	r4, 2cb22 <check_level_trigger_pins+0x32>
}
   2cb1c:	4628      	mov	r0, r5
   2cb1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   2cb22:	4234      	tst	r4, r6
   2cb24:	d00a      	beq.n	2cb3c <check_level_trigger_pins+0x4c>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   2cb26:	f898 3008 	ldrb.w	r3, [r8, #8]
   2cb2a:	f007 001f 	and.w	r0, r7, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   2cb2e:	2100      	movs	r1, #0
   2cb30:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   2cb34:	f7ff ffc9 	bl	2caca <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   2cb38:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   2cb3c:	3701      	adds	r7, #1
		bit <<= 1;
   2cb3e:	0076      	lsls	r6, r6, #1
   2cb40:	e7eb      	b.n	2cb1a <check_level_trigger_pins+0x2a>

0002cb42 <cfg_level_pins>:
{
   2cb42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct gpio_nrfx_data *data = get_port_data(port);
   2cb46:	68c7      	ldr	r7, [r0, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   2cb48:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
   2cb4c:	68fc      	ldr	r4, [r7, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   2cb4e:	e9d7 3205 	ldrd	r3, r2, [r7, #20]
   2cb52:	4313      	orrs	r3, r2
   2cb54:	ea24 0403 	bic.w	r4, r4, r3
	uint32_t bit = 1U << pin;
   2cb58:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   2cb5a:	2500      	movs	r5, #0
	while (level_pins) {
   2cb5c:	b90c      	cbnz	r4, 2cb62 <cfg_level_pins+0x20>
}
   2cb5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   2cb62:	4226      	tst	r6, r4
   2cb64:	d010      	beq.n	2cb88 <cfg_level_pins+0x46>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   2cb66:	693b      	ldr	r3, [r7, #16]
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   2cb68:	f898 2008 	ldrb.w	r2, [r8, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
   2cb6c:	40eb      	lsrs	r3, r5
		return NRF_GPIO_PIN_SENSE_HIGH;
   2cb6e:	f013 0f01 	tst.w	r3, #1
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   2cb72:	f005 001f 	and.w	r0, r5, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   2cb76:	bf0c      	ite	eq
   2cb78:	2103      	moveq	r1, #3
   2cb7a:	2102      	movne	r1, #2
   2cb7c:	ea40 1042 	orr.w	r0, r0, r2, lsl #5
   2cb80:	f7ff ffa3 	bl	2caca <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   2cb84:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   2cb88:	3501      	adds	r5, #1
		bit <<= 1;
   2cb8a:	0076      	lsls	r6, r6, #1
   2cb8c:	e7e6      	b.n	2cb5c <cfg_level_pins+0x1a>

0002cb8e <flash_nrf_write_protection>:
}
   2cb8e:	2000      	movs	r0, #0
   2cb90:	4770      	bx	lr

0002cb92 <is_regular_addr_valid>:
{
   2cb92:	b538      	push	{r3, r4, r5, lr}
   2cb94:	4604      	mov	r4, r0
   2cb96:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
   2cb98:	f000 fa6a 	bl	2d070 <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   2cb9c:	4284      	cmp	r4, r0
   2cb9e:	d209      	bcs.n	2cbb4 <is_regular_addr_valid+0x22>
   2cba0:	2c00      	cmp	r4, #0
   2cba2:	db07      	blt.n	2cbb4 <is_regular_addr_valid+0x22>
	    addr < 0 ||
   2cba4:	42a8      	cmp	r0, r5
   2cba6:	d305      	bcc.n	2cbb4 <is_regular_addr_valid+0x22>
	    (addr) + len > flash_size) {
   2cba8:	442c      	add	r4, r5
	    len > flash_size ||
   2cbaa:	4284      	cmp	r4, r0
   2cbac:	bf8c      	ite	hi
   2cbae:	2000      	movhi	r0, #0
   2cbb0:	2001      	movls	r0, #1
}
   2cbb2:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   2cbb4:	2000      	movs	r0, #0
   2cbb6:	e7fc      	b.n	2cbb2 <is_regular_addr_valid+0x20>

0002cbb8 <nrf_flash_sync_is_required>:
	return ticker_is_initialized(0);
   2cbb8:	2000      	movs	r0, #0
   2cbba:	f7eb bf65 	b.w	18a88 <ticker_is_initialized>

0002cbbe <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
				   bool use_addr, struct flash_pages_info *info)
{
   2cbbe:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2cbc2:	461d      	mov	r5, r3
	off_t group_offs = 0;
	uint32_t num_in_group;
	off_t end = 0;
	size_t layout_size;

	api->page_layout(dev, &layout, &layout_size);
   2cbc4:	6883      	ldr	r3, [r0, #8]
{
   2cbc6:	460c      	mov	r4, r1
	api->page_layout(dev, &layout, &layout_size);
   2cbc8:	695b      	ldr	r3, [r3, #20]
   2cbca:	4669      	mov	r1, sp
{
   2cbcc:	4616      	mov	r6, r2
	api->page_layout(dev, &layout, &layout_size);
   2cbce:	aa01      	add	r2, sp, #4
   2cbd0:	4798      	blx	r3

	while (layout_size--) {
   2cbd2:	e9dd 1200 	ldrd	r1, r2, [sp]
   2cbd6:	2300      	movs	r3, #0
   2cbd8:	3a01      	subs	r2, #1
	off_t end = 0;
   2cbda:	4618      	mov	r0, r3
	off_t group_offs = 0;
   2cbdc:	469e      	mov	lr, r3
	size_t page_count = 0;
   2cbde:	469c      	mov	ip, r3
	while (layout_size--) {
   2cbe0:	1c57      	adds	r7, r2, #1
   2cbe2:	d102      	bne.n	2cbea <flash_get_page_info+0x2c>
		page_count += layout->pages_count;

		layout++;
	}

	return -EINVAL; /* page of the index doesn't exist */
   2cbe4:	f06f 0015 	mvn.w	r0, #21
   2cbe8:	e01a      	b.n	2cc20 <flash_get_page_info+0x62>
		if (use_addr) {
   2cbea:	f8d1 8000 	ldr.w	r8, [r1]
   2cbee:	b1d6      	cbz	r6, 2cc26 <flash_get_page_info+0x68>
			end += layout->pages_count * layout->pages_size;
   2cbf0:	684f      	ldr	r7, [r1, #4]
   2cbf2:	fb07 0008 	mla	r0, r7, r8, r0
		if (offs < end) {
   2cbf6:	42a0      	cmp	r0, r4
   2cbf8:	f102 37ff 	add.w	r7, r2, #4294967295
   2cbfc:	dd18      	ble.n	2cc30 <flash_get_page_info+0x72>
   2cbfe:	9201      	str	r2, [sp, #4]
   2cc00:	b103      	cbz	r3, 2cc04 <flash_get_page_info+0x46>
   2cc02:	9100      	str	r1, [sp, #0]
			info->size = layout->pages_size;
   2cc04:	9b00      	ldr	r3, [sp, #0]
   2cc06:	685b      	ldr	r3, [r3, #4]
   2cc08:	606b      	str	r3, [r5, #4]
			if (use_addr) {
   2cc0a:	b176      	cbz	r6, 2cc2a <flash_get_page_info+0x6c>
				num_in_group = (offs - group_offs) /
   2cc0c:	eba4 040e 	sub.w	r4, r4, lr
   2cc10:	fbb4 f4f3 	udiv	r4, r4, r3
			info->start_offset = group_offs +
   2cc14:	fb04 e303 	mla	r3, r4, r3, lr
			info->index = page_count + num_in_group;
   2cc18:	4464      	add	r4, ip
			info->start_offset = group_offs +
   2cc1a:	602b      	str	r3, [r5, #0]
			info->index = page_count + num_in_group;
   2cc1c:	60ac      	str	r4, [r5, #8]
			return 0;
   2cc1e:	2000      	movs	r0, #0
}
   2cc20:	b002      	add	sp, #8
   2cc22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			end += layout->pages_count;
   2cc26:	4440      	add	r0, r8
   2cc28:	e7e5      	b.n	2cbf6 <flash_get_page_info+0x38>
				num_in_group = offs - page_count;
   2cc2a:	eba4 040c 	sub.w	r4, r4, ip
   2cc2e:	e7f1      	b.n	2cc14 <flash_get_page_info+0x56>
		group_offs += layout->pages_count * layout->pages_size;
   2cc30:	684b      	ldr	r3, [r1, #4]
		page_count += layout->pages_count;
   2cc32:	44c4      	add	ip, r8
		group_offs += layout->pages_count * layout->pages_size;
   2cc34:	fb03 ee08 	mla	lr, r3, r8, lr
		layout++;
   2cc38:	3108      	adds	r1, #8
   2cc3a:	2301      	movs	r3, #1
   2cc3c:	463a      	mov	r2, r7
   2cc3e:	e7cf      	b.n	2cbe0 <flash_get_page_info+0x22>

0002cc40 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
	return flash_get_page_info(dev, offs, true, info);
   2cc40:	4613      	mov	r3, r2
   2cc42:	2201      	movs	r2, #1
   2cc44:	f7ff bfbb 	b.w	2cbbe <flash_get_page_info>

0002cc48 <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   2cc48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
   2cc4c:	6883      	ldr	r3, [r0, #8]
{
   2cc4e:	b086      	sub	sp, #24
   2cc50:	4689      	mov	r9, r1
   2cc52:	4692      	mov	sl, r2
	api->page_layout(dev, &layout, &num_blocks);
   2cc54:	695b      	ldr	r3, [r3, #20]
   2cc56:	aa02      	add	r2, sp, #8
   2cc58:	a901      	add	r1, sp, #4
   2cc5a:	4798      	blx	r3
	off_t off = 0;
   2cc5c:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
   2cc5e:	46a0      	mov	r8, r4

	for (block = 0; block < num_blocks; block++) {
   2cc60:	4625      	mov	r5, r4
   2cc62:	9b02      	ldr	r3, [sp, #8]
   2cc64:	42ab      	cmp	r3, r5
   2cc66:	d802      	bhi.n	2cc6e <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   2cc68:	b006      	add	sp, #24
   2cc6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const struct flash_pages_layout *l = &layout[block];
   2cc6e:	9f01      	ldr	r7, [sp, #4]
   2cc70:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		for (i = 0; i < l->pages_count; i++) {
   2cc74:	2600      	movs	r6, #0
		page_info.size = l->pages_size;
   2cc76:	687b      	ldr	r3, [r7, #4]
   2cc78:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   2cc7a:	683a      	ldr	r2, [r7, #0]
   2cc7c:	42b2      	cmp	r2, r6
   2cc7e:	eb08 0306 	add.w	r3, r8, r6
   2cc82:	d802      	bhi.n	2cc8a <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   2cc84:	3501      	adds	r5, #1
   2cc86:	4698      	mov	r8, r3
   2cc88:	e7eb      	b.n	2cc62 <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
   2cc8a:	4651      	mov	r1, sl
   2cc8c:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
   2cc8e:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   2cc90:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   2cc92:	47c8      	blx	r9
   2cc94:	2800      	cmp	r0, #0
   2cc96:	d0e7      	beq.n	2cc68 <flash_page_foreach+0x20>
			off += page_info.size;
   2cc98:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   2cc9a:	3601      	adds	r6, #1
			off += page_info.size;
   2cc9c:	441c      	add	r4, r3
			page++;
   2cc9e:	e7ec      	b.n	2cc7a <flash_page_foreach+0x32>

0002cca0 <entropy_cc3xx_rng_init>:
{
	/* No initialization is required */
	(void)dev;

	return 0;
}
   2cca0:	2000      	movs	r0, #0
   2cca2:	4770      	bx	lr

0002cca4 <model_send>:
	return encoded_delay * DELAY_TIME_STEP_MS;
}

int model_send(struct bt_mesh_model *mod, struct bt_mesh_msg_ctx *ctx,
	       struct net_buf_simple *buf)
{
   2cca4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2cca6:	4613      	mov	r3, r2
   2cca8:	4604      	mov	r4, r0
	if (!ctx && !mod->pub) {
   2ccaa:	b921      	cbnz	r1, 2ccb6 <model_send+0x12>
   2ccac:	6882      	ldr	r2, [r0, #8]
   2ccae:	b942      	cbnz	r2, 2ccc2 <model_send+0x1e>
		return -ENOTSUP;
   2ccb0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2ccb4:	e003      	b.n	2ccbe <model_send+0x1a>
	}

	if (ctx) {
		return bt_mesh_model_send(mod, ctx, buf, NULL, 0);
   2ccb6:	2300      	movs	r3, #0
   2ccb8:	9300      	str	r3, [sp, #0]
   2ccba:	f7fe f861 	bl	2ad80 <bt_mesh_model_send>

	net_buf_simple_reset(mod->pub->msg);
	net_buf_simple_add_mem(mod->pub->msg, buf->data, buf->len);

	return bt_mesh_model_publish(mod);
}
   2ccbe:	b003      	add	sp, #12
   2ccc0:	bd30      	pop	{r4, r5, pc}
	net_buf_simple_reset(mod->pub->msg);
   2ccc2:	6910      	ldr	r0, [r2, #16]
	buf->data = buf->__buf;
   2ccc4:	6882      	ldr	r2, [r0, #8]
	buf->len  = 0U;
   2ccc6:	8081      	strh	r1, [r0, #4]
	buf->data = buf->__buf;
   2ccc8:	6002      	str	r2, [r0, #0]
	net_buf_simple_add_mem(mod->pub->msg, buf->data, buf->len);
   2ccca:	6819      	ldr	r1, [r3, #0]
   2cccc:	889a      	ldrh	r2, [r3, #4]
   2ccce:	f7ff fe88 	bl	2c9e2 <net_buf_simple_add_mem>
	return bt_mesh_model_publish(mod);
   2ccd2:	4620      	mov	r0, r4
}
   2ccd4:	b003      	add	sp, #12
   2ccd6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return bt_mesh_model_publish(mod);
   2ccda:	f7e5 ba73 	b.w	121c4 <bt_mesh_model_publish>

0002ccde <sensor_get>:
	SENSOR_FOR_EACH(&srv->sensors, sensor)
   2ccde:	6840      	ldr	r0, [r0, #4]
   2cce0:	b108      	cbz	r0, 2cce6 <sensor_get+0x8>
   2cce2:	3848      	subs	r0, #72	; 0x48
   2cce4:	b900      	cbnz	r0, 2cce8 <sensor_get+0xa>
}
   2cce6:	4770      	bx	lr
		if (sensor->type->id == id) {
   2cce8:	6803      	ldr	r3, [r0, #0]
   2ccea:	881b      	ldrh	r3, [r3, #0]
   2ccec:	428b      	cmp	r3, r1
   2ccee:	d0fa      	beq.n	2cce6 <sensor_get+0x8>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2ccf0:	6c80      	ldr	r0, [r0, #72]	; 0x48
   2ccf2:	e7f5      	b.n	2cce0 <sensor_get+0x2>

0002ccf4 <handle_settings_get>:
{
   2ccf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_mesh_sensor_srv *srv = mod->user_data;
   2ccf8:	6985      	ldr	r5, [r0, #24]
{
   2ccfa:	b08c      	sub	sp, #48	; 0x30
   2ccfc:	4606      	mov	r6, r0
	uint16_t id = net_buf_simple_pull_le16(buf);
   2ccfe:	4610      	mov	r0, r2
{
   2cd00:	460f      	mov	r7, r1
	uint16_t id = net_buf_simple_pull_le16(buf);
   2cd02:	f7ff fe30 	bl	2c966 <net_buf_simple_pull_le16>
	if (id == BT_MESH_PROP_ID_PROHIBITED) {
   2cd06:	4604      	mov	r4, r0
   2cd08:	b1d0      	cbz	r0, 2cd40 <handle_settings_get+0x4c>
	BT_MESH_MODEL_BUF_DEFINE(
   2cd0a:	ab06      	add	r3, sp, #24
   2cd0c:	f44f 12b8 	mov.w	r2, #1507328	; 0x170000
	bt_mesh_model_msg_init(&rsp, BT_MESH_SENSOR_OP_SETTINGS_STATUS);
   2cd10:	2158      	movs	r1, #88	; 0x58
   2cd12:	a803      	add	r0, sp, #12
	BT_MESH_MODEL_BUF_DEFINE(
   2cd14:	9303      	str	r3, [sp, #12]
   2cd16:	e9cd 2304 	strd	r2, r3, [sp, #16]
	bt_mesh_model_msg_init(&rsp, BT_MESH_SENSOR_OP_SETTINGS_STATUS);
   2cd1a:	f7fe f808 	bl	2ad2e <bt_mesh_model_msg_init>
	net_buf_simple_add_le16(&rsp, id);
   2cd1e:	4621      	mov	r1, r4
   2cd20:	a803      	add	r0, sp, #12
   2cd22:	f7ff fe71 	bl	2ca08 <net_buf_simple_add_le16>
	struct bt_mesh_sensor *sensor = sensor_get(srv, id);
   2cd26:	4628      	mov	r0, r5
   2cd28:	4621      	mov	r1, r4
   2cd2a:	f7ff ffd8 	bl	2ccde <sensor_get>
	if (!sensor) {
   2cd2e:	4605      	mov	r5, r0
   2cd30:	b9c8      	cbnz	r0, 2cd66 <handle_settings_get+0x72>
	bt_mesh_model_send(mod, ctx, &rsp, NULL, NULL);
   2cd32:	2300      	movs	r3, #0
   2cd34:	9300      	str	r3, [sp, #0]
   2cd36:	aa03      	add	r2, sp, #12
   2cd38:	4639      	mov	r1, r7
   2cd3a:	4630      	mov	r0, r6
   2cd3c:	f7fe f820 	bl	2ad80 <bt_mesh_model_send>
}
   2cd40:	b00c      	add	sp, #48	; 0x30
   2cd42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					sensor->settings.list[i].type->id);
   2cd46:	68aa      	ldr	r2, [r5, #8]
   2cd48:	fb08 f304 	mul.w	r3, r8, r4
		net_buf_simple_add_le16(&rsp,
   2cd4c:	a803      	add	r0, sp, #12
   2cd4e:	58d3      	ldr	r3, [r2, r3]
   2cd50:	8819      	ldrh	r1, [r3, #0]
   2cd52:	f7ff fe59 	bl	2ca08 <net_buf_simple_add_le16>
	     ++i) {
   2cd56:	3401      	adds	r4, #1
	for (uint32_t i = 0; i < MIN(CONFIG_BT_MESH_SENSOR_SRV_SETTINGS_MAX,
   2cd58:	68eb      	ldr	r3, [r5, #12]
   2cd5a:	2b08      	cmp	r3, #8
   2cd5c:	bf28      	it	cs
   2cd5e:	2308      	movcs	r3, #8
   2cd60:	429c      	cmp	r4, r3
   2cd62:	d3f0      	bcc.n	2cd46 <handle_settings_get+0x52>
   2cd64:	e7e5      	b.n	2cd32 <handle_settings_get+0x3e>
   2cd66:	2400      	movs	r4, #0
					sensor->settings.list[i].type->id);
   2cd68:	f04f 080c 	mov.w	r8, #12
   2cd6c:	e7f4      	b.n	2cd58 <handle_settings_get+0x64>

0002cd6e <handle_setting_set_unack>:
	setting_set(mod, ctx, buf, false);
   2cd6e:	2300      	movs	r3, #0
   2cd70:	f7f3 bbac 	b.w	204cc <setting_set>

0002cd74 <handle_setting_set>:
	setting_set(mod, ctx, buf, true);
   2cd74:	2301      	movs	r3, #1
   2cd76:	f7f3 bba9 	b.w	204cc <setting_set>

0002cd7a <handle_cadence_set_unack>:
	cadence_set(mod, ctx, buf, false);
   2cd7a:	2300      	movs	r3, #0
   2cd7c:	f7f3 bc68 	b.w	20650 <cadence_set>

0002cd80 <handle_cadence_set>:
	cadence_set(mod, ctx, buf, true);
   2cd80:	2301      	movs	r3, #1
   2cd82:	f7f3 bc65 	b.w	20650 <cadence_set>

0002cd86 <update_handler>:
{
   2cd86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_mesh_sensor_srv *srv = mod->user_data;
   2cd8a:	6985      	ldr	r5, [r0, #24]
{
   2cd8c:	4604      	mov	r4, r0
   2cd8e:	b08b      	sub	sp, #44	; 0x2c
	bt_mesh_model_msg_init(srv->pub.msg, BT_MESH_SENSOR_OP_STATUS);
   2cd90:	2152      	movs	r1, #82	; 0x52
   2cd92:	6a28      	ldr	r0, [r5, #32]
   2cd94:	f7fd ffcb 	bl	2ad2e <bt_mesh_model_msg_init>
	uint32_t original_len = srv->pub.msg->len;
   2cd98:	6a2b      	ldr	r3, [r5, #32]
   2cd9a:	f8b3 a004 	ldrh.w	sl, [r3, #4]
	uint8_t period_div = srv->pub.period_div;
   2cd9e:	7eeb      	ldrb	r3, [r5, #27]
   2cda0:	f003 080f 	and.w	r8, r3, #15
	srv->pub.period_div = 0;
   2cda4:	f023 031f 	bic.w	r3, r3, #31
	uint32_t base_period = bt_mesh_model_pub_period_get(mod);
   2cda8:	4620      	mov	r0, r4
	srv->pub.period_div = 0;
   2cdaa:	76eb      	strb	r3, [r5, #27]
	uint32_t base_period = bt_mesh_model_pub_period_get(mod);
   2cdac:	f7e4 ff3e 	bl	11c2c <bt_mesh_model_pub_period_get>
	SENSOR_FOR_EACH(&srv->sensors, s)
   2cdb0:	686c      	ldr	r4, [r5, #4]
   2cdb2:	b14c      	cbz	r4, 2cdc8 <update_handler+0x42>
	uint32_t pub_int = (base_period >> period_div);
   2cdb4:	fa20 f708 	lsr.w	r7, r0, r8
	SENSOR_FOR_EACH(&srv->sensors, s)
   2cdb8:	3c48      	subs	r4, #72	; 0x48
   2cdba:	f107 3bff 	add.w	fp, r7, #4294967295
	uint32_t min_int = (1 << sensor->state.min_int);
   2cdbe:	f04f 0901 	mov.w	r9, #1
	struct sensor_value value[CONFIG_BT_MESH_SENSOR_CHANNELS_MAX] = {};
   2cdc2:	466e      	mov	r6, sp
   2cdc4:	89ab      	ldrh	r3, [r5, #12]
	SENSOR_FOR_EACH(&srv->sensors, s)
   2cdc6:	b964      	cbnz	r4, 2cde2 <update_handler+0x5c>
	srv->seq++;
   2cdc8:	89ab      	ldrh	r3, [r5, #12]
   2cdca:	3301      	adds	r3, #1
   2cdcc:	81ab      	strh	r3, [r5, #12]
	return (srv->pub.msg->len > original_len) ? 0 : -ENOENT;
   2cdce:	6a2b      	ldr	r3, [r5, #32]
   2cdd0:	889b      	ldrh	r3, [r3, #4]
   2cdd2:	4553      	cmp	r3, sl
   2cdd4:	bf8c      	ite	hi
   2cdd6:	2000      	movhi	r0, #0
   2cdd8:	f06f 0001 	mvnls.w	r0, #1
}
   2cddc:	b00b      	add	sp, #44	; 0x2c
   2cdde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (srv->seq - s->state.seq < min_int) {
   2cde2:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   2cde6:	1a9a      	subs	r2, r3, r2
	uint32_t min_int = (1 << sensor->state.min_int);
   2cde8:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
   2cdec:	fa09 f303 	lsl.w	r3, r9, r3
	return ceiling_fraction(min_int, pub_int);
   2cdf0:	445b      	add	r3, fp
   2cdf2:	fbb3 f3f7 	udiv	r3, r3, r7
	if (srv->seq - s->state.seq < min_int) {
   2cdf6:	b29b      	uxth	r3, r3
   2cdf8:	429a      	cmp	r2, r3
   2cdfa:	db33      	blt.n	2ce64 <update_handler+0xde>
	struct sensor_value value[CONFIG_BT_MESH_SENSOR_CHANNELS_MAX] = {};
   2cdfc:	2228      	movs	r2, #40	; 0x28
   2cdfe:	2100      	movs	r1, #0
   2ce00:	4630      	mov	r0, r6
   2ce02:	f000 fbfa 	bl	2d5fa <memset>
	err = value_get(s, NULL, value);
   2ce06:	4632      	mov	r2, r6
   2ce08:	2100      	movs	r1, #0
   2ce0a:	4620      	mov	r0, r4
   2ce0c:	f7f3 fa80 	bl	20310 <value_get>
	if (err) {
   2ce10:	bb40      	cbnz	r0, 2ce64 <update_handler+0xde>
	bool delta_triggered = bt_mesh_sensor_delta_threshold(s, value);
   2ce12:	4631      	mov	r1, r6
   2ce14:	4620      	mov	r0, r4
   2ce16:	f7d6 f9df 	bl	31d8 <bt_mesh_sensor_delta_threshold>
	if (!delta_triggered && srv->seq - s->state.seq < interval) {
   2ce1a:	b9a0      	cbnz	r0, 2ce46 <update_handler+0xc0>
   2ce1c:	f8b4 3054 	ldrh.w	r3, [r4, #84]	; 0x54
	uint8_t div = (sensor->state.pub_div * sensor->state.fast_pub);
   2ce20:	f894 1057 	ldrb.w	r1, [r4, #87]	; 0x57
	if (!delta_triggered && srv->seq - s->state.seq < interval) {
   2ce24:	89aa      	ldrh	r2, [r5, #12]
   2ce26:	1ad2      	subs	r2, r2, r3
	uint8_t div = (sensor->state.pub_div * sensor->state.fast_pub);
   2ce28:	f3c1 0303 	ubfx	r3, r1, #0, #4
   2ce2c:	f3c1 1100 	ubfx	r1, r1, #4, #1
   2ce30:	fb13 f301 	smulbb	r3, r3, r1
	return (1U << MAX(0, period_div - div));
   2ce34:	b2db      	uxtb	r3, r3
   2ce36:	eba8 0303 	sub.w	r3, r8, r3
   2ce3a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2ce3e:	fa09 f303 	lsl.w	r3, r9, r3
	if (!delta_triggered && srv->seq - s->state.seq < interval) {
   2ce42:	429a      	cmp	r2, r3
   2ce44:	db0e      	blt.n	2ce64 <update_handler+0xde>
	err = sensor_status_encode(srv->pub.msg, s, value);
   2ce46:	4632      	mov	r2, r6
   2ce48:	4621      	mov	r1, r4
   2ce4a:	6a28      	ldr	r0, [r5, #32]
   2ce4c:	f000 f8c2 	bl	2cfd4 <sensor_status_encode>
	if (err) {
   2ce50:	b940      	cbnz	r0, 2ce64 <update_handler+0xde>
	s->state.prev = value[0];
   2ce52:	e896 0003 	ldmia.w	r6, {r0, r1}
   2ce56:	f104 034c 	add.w	r3, r4, #76	; 0x4c
   2ce5a:	e883 0003 	stmia.w	r3, {r0, r1}
	s->state.seq = srv->seq;
   2ce5e:	89ab      	ldrh	r3, [r5, #12]
   2ce60:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
		if (s->state.fast_pub) {
   2ce64:	f894 2057 	ldrb.w	r2, [r4, #87]	; 0x57
   2ce68:	06d3      	lsls	r3, r2, #27
   2ce6a:	d50c      	bpl.n	2ce86 <update_handler+0x100>
			srv->pub.fast_period = true;
   2ce6c:	7eeb      	ldrb	r3, [r5, #27]
				MAX(srv->pub.period_div, s->state.pub_div);
   2ce6e:	f043 0310 	orr.w	r3, r3, #16
   2ce72:	f002 020f 	and.w	r2, r2, #15
   2ce76:	f003 010f 	and.w	r1, r3, #15
   2ce7a:	428a      	cmp	r2, r1
   2ce7c:	bf38      	it	cc
   2ce7e:	460a      	movcc	r2, r1
			srv->pub.period_div =
   2ce80:	f362 0303 	bfi	r3, r2, #0, #4
   2ce84:	76eb      	strb	r3, [r5, #27]
   2ce86:	6ca4      	ldr	r4, [r4, #72]	; 0x48
	SENSOR_FOR_EACH(&srv->sensors, s)
   2ce88:	2c00      	cmp	r4, #0
   2ce8a:	d09d      	beq.n	2cdc8 <update_handler+0x42>
   2ce8c:	3c48      	subs	r4, #72	; 0x48
   2ce8e:	e799      	b.n	2cdc4 <update_handler+0x3e>

0002ce90 <scalar_max>:
	const struct scalar_repr *repr = format->user_data;
   2ce90:	6883      	ldr	r3, [r0, #8]
	if (repr->flags & HAS_MAX) {
   2ce92:	781a      	ldrb	r2, [r3, #0]
{
   2ce94:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (repr->flags & HAS_MAX) {
   2ce96:	f012 0640 	ands.w	r6, r2, #64	; 0x40
   2ce9a:	d002      	beq.n	2cea2 <scalar_max+0x12>
		return repr->max;
   2ce9c:	6858      	ldr	r0, [r3, #4]
   2ce9e:	2100      	movs	r1, #0
}
   2cea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (repr->flags & SIGNED) {
   2cea2:	68c3      	ldr	r3, [r0, #12]
   2cea4:	f012 0702 	ands.w	r7, r2, #2
   2cea8:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   2ceac:	f04f 0401 	mov.w	r4, #1
   2ceb0:	d00d      	beq.n	2cece <scalar_max+0x3e>
		return BIT64(8 * format->size - 1) - 1;
   2ceb2:	1e5d      	subs	r5, r3, #1
   2ceb4:	f1c5 0220 	rsb	r2, r5, #32
   2ceb8:	3b21      	subs	r3, #33	; 0x21
   2ceba:	fa04 f103 	lsl.w	r1, r4, r3
   2cebe:	fa24 f202 	lsr.w	r2, r4, r2
   2cec2:	4311      	orrs	r1, r2
   2cec4:	fa04 f005 	lsl.w	r0, r4, r5
	int64_t max_value = BIT64(8 * format->size) - 1;
   2cec8:	f110 30ff 	adds.w	r0, r0, #4294967295
   2cecc:	e00f      	b.n	2ceee <scalar_max+0x5e>
   2cece:	f1a3 0620 	sub.w	r6, r3, #32
   2ced2:	f1c3 0520 	rsb	r5, r3, #32
   2ced6:	fa04 f106 	lsl.w	r1, r4, r6
   2ceda:	fa24 f505 	lsr.w	r5, r4, r5
	if (repr->flags & (HAS_HIGHER_THAN | HAS_INVALID)) {
   2cede:	f012 0f30 	tst.w	r2, #48	; 0x30
	int64_t max_value = BIT64(8 * format->size) - 1;
   2cee2:	ea41 0105 	orr.w	r1, r1, r5
   2cee6:	fa04 f003 	lsl.w	r0, r4, r3
	if (repr->flags & (HAS_HIGHER_THAN | HAS_INVALID)) {
   2ceea:	d003      	beq.n	2cef4 <scalar_max+0x64>
		max_value -= 2;
   2ceec:	3803      	subs	r0, #3
		max_value -= 1;
   2ceee:	f141 31ff 	adc.w	r1, r1, #4294967295
   2cef2:	e7d5      	b.n	2cea0 <scalar_max+0x10>
	} else if (repr->flags & HAS_UNDEFINED) {
   2cef4:	0713      	lsls	r3, r2, #28
   2cef6:	d5e7      	bpl.n	2cec8 <scalar_max+0x38>
		max_value -= 1;
   2cef8:	3802      	subs	r0, #2
   2cefa:	e7f8      	b.n	2ceee <scalar_max+0x5e>

0002cefc <sensor_status_id_encode>:
{
   2cefc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((len > 0 && len <= 16) && id < 2048) {
   2cf00:	f101 38ff 	add.w	r8, r1, #4294967295
   2cf04:	fa5f f688 	uxtb.w	r6, r8
   2cf08:	2e0f      	cmp	r6, #15
{
   2cf0a:	4607      	mov	r7, r0
   2cf0c:	460d      	mov	r5, r1
   2cf0e:	4614      	mov	r4, r2
	if ((len > 0 && len <= 16) && id < 2048) {
   2cf10:	d814      	bhi.n	2cf3c <sensor_status_id_encode+0x40>
   2cf12:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   2cf16:	d211      	bcs.n	2cf3c <sensor_status_id_encode+0x40>
		if (net_buf_simple_tailroom(buf) < 2 + len) {
   2cf18:	f7ff fd5b 	bl	2c9d2 <net_buf_simple_tailroom>
   2cf1c:	3502      	adds	r5, #2
   2cf1e:	42a8      	cmp	r0, r5
   2cf20:	d203      	bcs.n	2cf2a <sensor_status_id_encode+0x2e>
			return -ENOMEM;
   2cf22:	f06f 000b 	mvn.w	r0, #11
}
   2cf26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_simple_add_le16(buf, ((len - 1) << 1) | (id << 5));
   2cf2a:	0161      	lsls	r1, r4, #5
   2cf2c:	ea41 0148 	orr.w	r1, r1, r8, lsl #1
   2cf30:	b289      	uxth	r1, r1
		net_buf_simple_add_le16(buf, id);
   2cf32:	4638      	mov	r0, r7
   2cf34:	f7ff fd68 	bl	2ca08 <net_buf_simple_add_le16>
	return 0;
   2cf38:	2000      	movs	r0, #0
   2cf3a:	e7f4      	b.n	2cf26 <sensor_status_id_encode+0x2a>
		if (net_buf_simple_tailroom(buf) < 3 + len) {
   2cf3c:	4638      	mov	r0, r7
   2cf3e:	f7ff fd48 	bl	2c9d2 <net_buf_simple_tailroom>
   2cf42:	3503      	adds	r5, #3
   2cf44:	42a8      	cmp	r0, r5
   2cf46:	d3ec      	bcc.n	2cf22 <sensor_status_id_encode+0x26>
						     << 1));
   2cf48:	0071      	lsls	r1, r6, #1
		net_buf_simple_add_u8(buf, BIT(0) | (((len - 1) & BIT_MASK(7))
   2cf4a:	f041 0101 	orr.w	r1, r1, #1
   2cf4e:	b2c9      	uxtb	r1, r1
   2cf50:	4638      	mov	r0, r7
   2cf52:	f7ff fd52 	bl	2c9fa <net_buf_simple_add_u8>
		net_buf_simple_add_le16(buf, id);
   2cf56:	4621      	mov	r1, r4
   2cf58:	e7eb      	b.n	2cf32 <sensor_status_id_encode+0x36>

0002cf5a <sensor_ch_encode>:
{
   2cf5a:	460b      	mov	r3, r1
   2cf5c:	b410      	push	{r4}
	return format->encode(format, value, buf);
   2cf5e:	681c      	ldr	r4, [r3, #0]
{
   2cf60:	4611      	mov	r1, r2
	return format->encode(format, value, buf);
   2cf62:	4602      	mov	r2, r0
   2cf64:	4618      	mov	r0, r3
   2cf66:	4623      	mov	r3, r4
}
   2cf68:	bc10      	pop	{r4}
	return format->encode(format, value, buf);
   2cf6a:	4718      	bx	r3

0002cf6c <sensor_value_encode>:
{
   2cf6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2cf6e:	4606      	mov	r6, r0
   2cf70:	460d      	mov	r5, r1
   2cf72:	4617      	mov	r7, r2
	for (uint32_t i = 0; i < type->channel_count; ++i) {
   2cf74:	2400      	movs	r4, #0
   2cf76:	78eb      	ldrb	r3, [r5, #3]
   2cf78:	42a3      	cmp	r3, r4
   2cf7a:	d801      	bhi.n	2cf80 <sensor_value_encode+0x14>
	return 0;
   2cf7c:	2000      	movs	r0, #0
}
   2cf7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = sensor_ch_encode(buf, type->channels[i].format,
   2cf80:	686b      	ldr	r3, [r5, #4]
   2cf82:	eb07 02c4 	add.w	r2, r7, r4, lsl #3
   2cf86:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
   2cf8a:	4630      	mov	r0, r6
   2cf8c:	f7ff ffe5 	bl	2cf5a <sensor_ch_encode>
		if (err) {
   2cf90:	2800      	cmp	r0, #0
   2cf92:	d1f4      	bne.n	2cf7e <sensor_value_encode+0x12>
	for (uint32_t i = 0; i < type->channel_count; ++i) {
   2cf94:	3401      	adds	r4, #1
   2cf96:	e7ee      	b.n	2cf76 <sensor_value_encode+0xa>

0002cf98 <sensor_ch_decode>:
{
   2cf98:	b410      	push	{r4}
	return format->decode(format, buf, value);
   2cf9a:	684c      	ldr	r4, [r1, #4]
{
   2cf9c:	460b      	mov	r3, r1
	return format->decode(format, buf, value);
   2cf9e:	4601      	mov	r1, r0
   2cfa0:	4618      	mov	r0, r3
   2cfa2:	4623      	mov	r3, r4
}
   2cfa4:	bc10      	pop	{r4}
	return format->decode(format, buf, value);
   2cfa6:	4718      	bx	r3

0002cfa8 <sensor_value_decode>:
{
   2cfa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2cfaa:	4606      	mov	r6, r0
   2cfac:	460d      	mov	r5, r1
   2cfae:	4617      	mov	r7, r2
	for (uint32_t i = 0; i < type->channel_count; ++i) {
   2cfb0:	2400      	movs	r4, #0
   2cfb2:	78eb      	ldrb	r3, [r5, #3]
   2cfb4:	42a3      	cmp	r3, r4
   2cfb6:	d801      	bhi.n	2cfbc <sensor_value_decode+0x14>
	return 0;
   2cfb8:	2000      	movs	r0, #0
}
   2cfba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = sensor_ch_decode(buf, type->channels[i].format,
   2cfbc:	686b      	ldr	r3, [r5, #4]
   2cfbe:	eb07 02c4 	add.w	r2, r7, r4, lsl #3
   2cfc2:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
   2cfc6:	4630      	mov	r0, r6
   2cfc8:	f7ff ffe6 	bl	2cf98 <sensor_ch_decode>
		if (err) {
   2cfcc:	2800      	cmp	r0, #0
   2cfce:	d1f4      	bne.n	2cfba <sensor_value_decode+0x12>
	for (uint32_t i = 0; i < type->channel_count; ++i) {
   2cfd0:	3401      	adds	r4, #1
   2cfd2:	e7ee      	b.n	2cfb2 <sensor_value_decode+0xa>

0002cfd4 <sensor_status_encode>:
{
   2cfd4:	b570      	push	{r4, r5, r6, lr}
	const struct bt_mesh_sensor_type *type = sensor->type;
   2cfd6:	680c      	ldr	r4, [r1, #0]
{
   2cfd8:	4616      	mov	r6, r2
	for (uint32_t i = 0; i < type->channel_count; ++i) {
   2cfda:	2300      	movs	r3, #0
   2cfdc:	78e2      	ldrb	r2, [r4, #3]
{
   2cfde:	4605      	mov	r5, r0
	size_t size = 0;
   2cfe0:	4619      	mov	r1, r3
	for (uint32_t i = 0; i < type->channel_count; ++i) {
   2cfe2:	429a      	cmp	r2, r3
   2cfe4:	d80c      	bhi.n	2d000 <sensor_status_encode+0x2c>
	err = sensor_status_id_encode(buf, size, type->id);
   2cfe6:	8822      	ldrh	r2, [r4, #0]
   2cfe8:	b2c9      	uxtb	r1, r1
   2cfea:	4628      	mov	r0, r5
   2cfec:	f7ff ff86 	bl	2cefc <sensor_status_id_encode>
	if (err) {
   2cff0:	b968      	cbnz	r0, 2d00e <sensor_status_encode+0x3a>
	return sensor_value_encode(buf, type, values);
   2cff2:	4632      	mov	r2, r6
   2cff4:	4621      	mov	r1, r4
   2cff6:	4628      	mov	r0, r5
}
   2cff8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return sensor_value_encode(buf, type, values);
   2cffc:	f7ff bfb6 	b.w	2cf6c <sensor_value_encode>
		size += type->channels[i].format->size;
   2d000:	6860      	ldr	r0, [r4, #4]
   2d002:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
   2d006:	68c0      	ldr	r0, [r0, #12]
	for (uint32_t i = 0; i < type->channel_count; ++i) {
   2d008:	3301      	adds	r3, #1
		size += type->channels[i].format->size;
   2d00a:	4401      	add	r1, r0
   2d00c:	e7e9      	b.n	2cfe2 <sensor_status_encode+0xe>
}
   2d00e:	bd70      	pop	{r4, r5, r6, pc}

0002d010 <bt_mesh_sensor_value_in_column>:
	return (value->val1 > col->start.val1 ||
   2d010:	6803      	ldr	r3, [r0, #0]
   2d012:	680a      	ldr	r2, [r1, #0]
		 value->val2 >= col->start.val2)) &&
   2d014:	4293      	cmp	r3, r2
{
   2d016:	b510      	push	{r4, lr}
		 value->val2 >= col->start.val2)) &&
   2d018:	dc04      	bgt.n	2d024 <bt_mesh_sensor_value_in_column+0x14>
	return (value->val1 > col->start.val1 ||
   2d01a:	d110      	bne.n	2d03e <bt_mesh_sensor_value_in_column+0x2e>
		(value->val1 == col->start.val1 &&
   2d01c:	6844      	ldr	r4, [r0, #4]
   2d01e:	684a      	ldr	r2, [r1, #4]
   2d020:	4294      	cmp	r4, r2
   2d022:	db0c      	blt.n	2d03e <bt_mesh_sensor_value_in_column+0x2e>
	       (value->val1 < col->end.val1 ||
   2d024:	688a      	ldr	r2, [r1, #8]
		 value->val2 >= col->start.val2)) &&
   2d026:	4293      	cmp	r3, r2
   2d028:	db07      	blt.n	2d03a <bt_mesh_sensor_value_in_column+0x2a>
	       (value->val1 < col->end.val1 ||
   2d02a:	d108      	bne.n	2d03e <bt_mesh_sensor_value_in_column+0x2e>
		(value->val1 == col->end.val1 && value->val2 <= col->end.val2));
   2d02c:	6840      	ldr	r0, [r0, #4]
   2d02e:	68cb      	ldr	r3, [r1, #12]
   2d030:	4298      	cmp	r0, r3
   2d032:	bfcc      	ite	gt
   2d034:	2000      	movgt	r0, #0
   2d036:	2001      	movle	r0, #1
}
   2d038:	bd10      	pop	{r4, pc}
		 value->val2 >= col->start.val2)) &&
   2d03a:	2001      	movs	r0, #1
   2d03c:	e7fc      	b.n	2d038 <bt_mesh_sensor_value_in_column+0x28>
   2d03e:	2000      	movs	r0, #0
   2d040:	e7fa      	b.n	2d038 <bt_mesh_sensor_value_in_column+0x28>

0002d042 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   2d042:	4700      	bx	r0

0002d044 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   2d044:	f000 b97f 	b.w	2d346 <z_impl_k_busy_wait>

0002d048 <is_valid_address>:
    return p_reg->CODEPAGESIZE;
   2d048:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
{
   2d04c:	b510      	push	{r4, lr}
   2d04e:	6914      	ldr	r4, [r2, #16]
    return p_reg->CODESIZE;
   2d050:	6953      	ldr	r3, [r2, #20]
    return flash_page_size_get() * flash_page_count_get();
   2d052:	4363      	muls	r3, r4
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   2d054:	4298      	cmp	r0, r3
   2d056:	d309      	bcc.n	2d06c <is_valid_address+0x24>
    if (uicr_allowed &&
   2d058:	b131      	cbz	r1, 2d068 <is_valid_address+0x20>
        (addr - (uint32_t)NRF_UICR) < sizeof(NRF_UICR_Type))
   2d05a:	f1a0 2110 	sub.w	r1, r0, #268439552	; 0x10001000
    if (uicr_allowed &&
   2d05e:	f5b1 7f42 	cmp.w	r1, #776	; 0x308
   2d062:	bf2c      	ite	cs
   2d064:	2100      	movcs	r1, #0
   2d066:	2101      	movcc	r1, #1
}
   2d068:	4608      	mov	r0, r1
   2d06a:	bd10      	pop	{r4, pc}
        return true;
   2d06c:	2101      	movs	r1, #1
   2d06e:	e7fb      	b.n	2d068 <is_valid_address+0x20>

0002d070 <nrfx_nvmc_flash_size_get>:
    return p_reg->CODEPAGESIZE;
   2d070:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2d074:	691a      	ldr	r2, [r3, #16]
    return p_reg->CODESIZE;
   2d076:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   2d078:	4350      	muls	r0, r2
   2d07a:	4770      	bx	lr

0002d07c <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
   2d07c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2d080:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   2d082:	4770      	bx	lr

0002d084 <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
   2d084:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2d088:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   2d08a:	4770      	bx	lr

0002d08c <twi_send_byte>:
    if (p_cb->bytes_transferred < p_cb->curr_length)
   2d08c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   2d08e:	6b4a      	ldr	r2, [r1, #52]	; 0x34
   2d090:	429a      	cmp	r2, r3
{
   2d092:	b510      	push	{r4, lr}
   2d094:	f04f 0301 	mov.w	r3, #1
    if (p_cb->bytes_transferred < p_cb->curr_length)
   2d098:	d205      	bcs.n	2d0a6 <twi_send_byte+0x1a>
        nrf_twi_txd_set(p_twi, p_cb->p_curr_buf[p_cb->bytes_transferred]);
   2d09a:	6a49      	ldr	r1, [r1, #36]	; 0x24
    p_reg->TXD = data;
   2d09c:	5c8a      	ldrb	r2, [r1, r2]
   2d09e:	f8c0 251c 	str.w	r2, [r0, #1308]	; 0x51c
    return true;
   2d0a2:	461a      	mov	r2, r3
   2d0a4:	e004      	b.n	2d0b0 <twi_send_byte+0x24>
        if (p_cb->curr_tx_no_stop)
   2d0a6:	f891 202c 	ldrb.w	r2, [r1, #44]	; 0x2c
   2d0aa:	b11a      	cbz	r2, 2d0b4 <twi_send_byte+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2d0ac:	61c3      	str	r3, [r0, #28]
            return false;
   2d0ae:	2200      	movs	r2, #0
}
   2d0b0:	4610      	mov	r0, r2
   2d0b2:	bd10      	pop	{r4, pc}
        else if(TWI_FLAG_SUSPEND(p_cb->flags))
   2d0b4:	6a0c      	ldr	r4, [r1, #32]
   2d0b6:	0664      	lsls	r4, r4, #25
   2d0b8:	d503      	bpl.n	2d0c2 <twi_send_byte+0x36>
   2d0ba:	61c3      	str	r3, [r0, #28]
            p_cb->prev_suspend = TWI_SUSPEND_TX;
   2d0bc:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
            return false;
   2d0c0:	e7f6      	b.n	2d0b0 <twi_send_byte+0x24>
   2d0c2:	6143      	str	r3, [r0, #20]
   2d0c4:	e7ed      	b.n	2d0a2 <twi_send_byte+0x16>

0002d0c6 <twi_transfer>:
{
   2d0c6:	b570      	push	{r4, r5, r6, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2d0c8:	f8d0 6104 	ldr.w	r6, [r0, #260]	; 0x104
   2d0cc:	4604      	mov	r4, r0
   2d0ce:	460d      	mov	r5, r1
    if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_STOPPED))
   2d0d0:	b12e      	cbz	r6, 2d0de <twi_transfer+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2d0d2:	2300      	movs	r3, #0
   2d0d4:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   2d0d8:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
        stopped = true;
   2d0dc:	2601      	movs	r6, #1
    if (p_cb->error)
   2d0de:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
   2d0e2:	b320      	cbz	r0, 2d12e <twi_transfer+0x68>
   2d0e4:	2300      	movs	r3, #0
   2d0e6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   2d0ea:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   2d0ee:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   2d0f2:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
   2d0f6:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   2d0fa:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    if (stopped)
   2d0fe:	2e00      	cmp	r6, #0
   2d100:	d068      	beq.n	2d1d4 <twi_transfer+0x10e>
        if (!p_cb->error)
   2d102:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
        p_cb->prev_suspend = TWI_NO_SUSPEND;
   2d106:	2300      	movs	r3, #0
   2d108:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
        if (!p_cb->error)
   2d10c:	bb88      	cbnz	r0, 2d172 <twi_transfer+0xac>
    if (p_cb->bytes_transferred != p_cb->curr_length)
   2d10e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2d110:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   2d112:	429a      	cmp	r2, r3
        return false;
   2d114:	bf1c      	itt	ne
   2d116:	4606      	movne	r6, r0
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   2d118:	2305      	movne	r3, #5
            p_cb->error = !xfer_completeness_check(p_twi, p_cb);
   2d11a:	f086 0601 	eor.w	r6, r6, #1
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   2d11e:	bf1c      	itt	ne
   2d120:	f8c4 0500 	strne.w	r0, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   2d124:	f8c4 3500 	strne.w	r3, [r4, #1280]	; 0x500
   2d128:	f885 602f 	strb.w	r6, [r5, #47]	; 0x2f
   2d12c:	e022      	b.n	2d174 <twi_transfer+0xae>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2d12e:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
    else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   2d132:	b142      	cbz	r2, 2d146 <twi_transfer+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2d134:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   2d138:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2d13c:	2301      	movs	r3, #1
   2d13e:	6163      	str	r3, [r4, #20]
                p_cb->error = true;
   2d140:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
   2d144:	e7db      	b.n	2d0fe <twi_transfer+0x38>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2d146:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
        if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_TXDSENT))
   2d14a:	b1a3      	cbz	r3, 2d176 <twi_transfer+0xb0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2d14c:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
   2d150:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
            ++(p_cb->bytes_transferred);
   2d154:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   2d156:	3301      	adds	r3, #1
   2d158:	636b      	str	r3, [r5, #52]	; 0x34
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2d15a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   2d15e:	b113      	cbz	r3, 2d166 <twi_transfer+0xa0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2d160:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   2d164:	e7e8      	b.n	2d138 <twi_transfer+0x72>
                if (!twi_send_byte(p_twi, p_cb))
   2d166:	4629      	mov	r1, r5
   2d168:	4620      	mov	r0, r4
   2d16a:	f7ff ff8f 	bl	2d08c <twi_send_byte>
   2d16e:	2800      	cmp	r0, #0
   2d170:	d1c5      	bne.n	2d0fe <twi_transfer+0x38>
                    return false;
   2d172:	2000      	movs	r0, #0
}
   2d174:	bd70      	pop	{r4, r5, r6, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2d176:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
        else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_RXDREADY))
   2d17a:	2a00      	cmp	r2, #0
   2d17c:	d0bf      	beq.n	2d0fe <twi_transfer+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2d17e:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   2d182:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2d186:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   2d18a:	b112      	cbz	r2, 2d192 <twi_transfer+0xcc>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2d18c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   2d190:	e7d2      	b.n	2d138 <twi_transfer+0x72>
    if (p_cb->bytes_transferred < p_cb->curr_length)
   2d192:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   2d194:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   2d196:	4293      	cmp	r3, r2
   2d198:	d2b1      	bcs.n	2d0fe <twi_transfer+0x38>
        p_cb->p_curr_buf[p_cb->bytes_transferred] = nrf_twi_rxd_get(p_twi);
   2d19a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    return (uint8_t)p_reg->RXD;
   2d19c:	f8d4 1518 	ldr.w	r1, [r4, #1304]	; 0x518
   2d1a0:	54d1      	strb	r1, [r2, r3]
        ++(p_cb->bytes_transferred);
   2d1a2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   2d1a4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
        ++(p_cb->bytes_transferred);
   2d1a6:	3301      	adds	r3, #1
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   2d1a8:	1e51      	subs	r1, r2, #1
   2d1aa:	428b      	cmp	r3, r1
        ++(p_cb->bytes_transferred);
   2d1ac:	636b      	str	r3, [r5, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   2d1ae:	d108      	bne.n	2d1c2 <twi_transfer+0xfc>
   2d1b0:	6a29      	ldr	r1, [r5, #32]
   2d1b2:	0649      	lsls	r1, r1, #25
   2d1b4:	d410      	bmi.n	2d1d8 <twi_transfer+0x112>
    p_reg->SHORTS = mask;
   2d1b6:	2302      	movs	r3, #2
   2d1b8:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2d1bc:	2301      	movs	r3, #1
   2d1be:	6223      	str	r3, [r4, #32]
   2d1c0:	e79d      	b.n	2d0fe <twi_transfer+0x38>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   2d1c2:	4293      	cmp	r3, r2
   2d1c4:	d1fa      	bne.n	2d1bc <twi_transfer+0xf6>
   2d1c6:	6a2b      	ldr	r3, [r5, #32]
   2d1c8:	065b      	lsls	r3, r3, #25
   2d1ca:	d598      	bpl.n	2d0fe <twi_transfer+0x38>
            p_cb->prev_suspend = TWI_SUSPEND_RX;
   2d1cc:	2302      	movs	r3, #2
   2d1ce:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
            return false;
   2d1d2:	e7cf      	b.n	2d174 <twi_transfer+0xae>
    return true;
   2d1d4:	2001      	movs	r0, #1
   2d1d6:	e7cd      	b.n	2d174 <twi_transfer+0xae>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   2d1d8:	4293      	cmp	r3, r2
   2d1da:	d1ef      	bne.n	2d1bc <twi_transfer+0xf6>
   2d1dc:	e7f6      	b.n	2d1cc <twi_transfer+0x106>

0002d1de <z_pm_save_idle_exit>:
	z_clock_idle_exit();
   2d1de:	f7fa bc49 	b.w	27a74 <z_clock_idle_exit>

0002d1e2 <k_heap_init>:
{
   2d1e2:	b410      	push	{r4}
   2d1e4:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   2d1e8:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   2d1ec:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   2d1ee:	f7d7 bd4f 	b.w	4c90 <sys_heap_init>

0002d1f2 <k_mem_slab_init>:
{
   2d1f2:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   2d1f4:	2400      	movs	r4, #0
   2d1f6:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2d1f8:	ea41 0402 	orr.w	r4, r1, r2
   2d1fc:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   2d200:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   2d204:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2d206:	d10c      	bne.n	2d222 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   2d208:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   2d20a:	42a3      	cmp	r3, r4
   2d20c:	d103      	bne.n	2d216 <k_mem_slab_init+0x24>
   2d20e:	e9c0 0000 	strd	r0, r0, [r0]
   2d212:	2000      	movs	r0, #0
}
   2d214:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   2d216:	6945      	ldr	r5, [r0, #20]
   2d218:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   2d21a:	3401      	adds	r4, #1
		slab->free_list = p;
   2d21c:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   2d21e:	4411      	add	r1, r2
   2d220:	e7f3      	b.n	2d20a <k_mem_slab_init+0x18>
		return -EINVAL;
   2d222:	f06f 0015 	mvn.w	r0, #21
	return rc;
   2d226:	e7f5      	b.n	2d214 <k_mem_slab_init+0x22>

0002d228 <z_impl_k_mutex_init>:
{
   2d228:	4603      	mov	r3, r0
	mutex->owner = NULL;
   2d22a:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   2d22c:	e9c3 0002 	strd	r0, r0, [r3, #8]
   2d230:	e9c3 3300 	strd	r3, r3, [r3]
}
   2d234:	4770      	bx	lr

0002d236 <z_queue_node_peek>:
{
   2d236:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   2d238:	4604      	mov	r4, r0
   2d23a:	b130      	cbz	r0, 2d24a <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2d23c:	6802      	ldr	r2, [r0, #0]
   2d23e:	0793      	lsls	r3, r2, #30
   2d240:	d003      	beq.n	2d24a <z_queue_node_peek+0x14>
		ret = anode->data;
   2d242:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   2d244:	b109      	cbz	r1, 2d24a <z_queue_node_peek+0x14>
			k_free(anode);
   2d246:	f000 f980 	bl	2d54a <k_free>
}
   2d24a:	4620      	mov	r0, r4
   2d24c:	bd10      	pop	{r4, pc}

0002d24e <z_impl_k_queue_init>:
	list->head = NULL;
   2d24e:	2300      	movs	r3, #0
	list->tail = NULL;
   2d250:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   2d254:	6083      	str	r3, [r0, #8]
   2d256:	f100 030c 	add.w	r3, r0, #12
   2d25a:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   2d25e:	f100 0314 	add.w	r3, r0, #20
   2d262:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   2d266:	4770      	bx	lr

0002d268 <k_queue_append>:
{
   2d268:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   2d26a:	2301      	movs	r3, #1
   2d26c:	9300      	str	r3, [sp, #0]
   2d26e:	2300      	movs	r3, #0
   2d270:	460a      	mov	r2, r1
   2d272:	4619      	mov	r1, r3
   2d274:	f7f5 f980 	bl	22578 <queue_insert>
}
   2d278:	b003      	add	sp, #12
   2d27a:	f85d fb04 	ldr.w	pc, [sp], #4

0002d27e <k_queue_prepend>:
{
   2d27e:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   2d280:	2300      	movs	r3, #0
   2d282:	460a      	mov	r2, r1
   2d284:	9300      	str	r3, [sp, #0]
   2d286:	4619      	mov	r1, r3
   2d288:	f7f5 f976 	bl	22578 <queue_insert>
}
   2d28c:	b003      	add	sp, #12
   2d28e:	f85d fb04 	ldr.w	pc, [sp], #4

0002d292 <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   2d292:	f990 000e 	ldrsb.w	r0, [r0, #14]
   2d296:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   2d29a:	4298      	cmp	r0, r3
   2d29c:	bfac      	ite	ge
   2d29e:	2000      	movge	r0, #0
   2d2a0:	2001      	movlt	r0, #1
   2d2a2:	4770      	bx	lr

0002d2a4 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2d2a4:	4603      	mov	r3, r0
   2d2a6:	b920      	cbnz	r0, 2d2b2 <z_reschedule_irqlock+0xe>
   2d2a8:	f3ef 8205 	mrs	r2, IPSR
   2d2ac:	b90a      	cbnz	r2, 2d2b2 <z_reschedule_irqlock+0xe>
   2d2ae:	f7d9 bcc5 	b.w	6c3c <arch_swap>
   2d2b2:	f383 8811 	msr	BASEPRI, r3
   2d2b6:	f3bf 8f6f 	isb	sy
}
   2d2ba:	4770      	bx	lr

0002d2bc <z_reschedule_unlocked>:
	__asm__ volatile(
   2d2bc:	f04f 0320 	mov.w	r3, #32
   2d2c0:	f3ef 8011 	mrs	r0, BASEPRI
   2d2c4:	f383 8811 	msr	BASEPRI, r3
   2d2c8:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2d2cc:	f7ff bfea 	b.w	2d2a4 <z_reschedule_irqlock>

0002d2d0 <unpend_thread_no_timeout>:
{
   2d2d0:	b510      	push	{r4, lr}
   2d2d2:	4604      	mov	r4, r0
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   2d2d4:	3008      	adds	r0, #8
   2d2d6:	f7f5 fabd 	bl	22854 <pended_on.isra.19>
   2d2da:	4621      	mov	r1, r4
   2d2dc:	f7f5 fbc2 	bl	22a64 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2d2e0:	7b63      	ldrb	r3, [r4, #13]
   2d2e2:	f023 0302 	bic.w	r3, r3, #2
   2d2e6:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   2d2e8:	2300      	movs	r3, #0
   2d2ea:	60a3      	str	r3, [r4, #8]
}
   2d2ec:	bd10      	pop	{r4, pc}

0002d2ee <z_priq_dumb_best>:
	return list->head == list;
   2d2ee:	6803      	ldr	r3, [r0, #0]
}
   2d2f0:	4298      	cmp	r0, r3
   2d2f2:	bf14      	ite	ne
   2d2f4:	4618      	movne	r0, r3
   2d2f6:	2000      	moveq	r0, #0
   2d2f8:	4770      	bx	lr

0002d2fa <z_unpend_all>:
{
   2d2fa:	b538      	push	{r3, r4, r5, lr}
   2d2fc:	4605      	mov	r5, r0
	int need_sched = 0;
   2d2fe:	2000      	movs	r0, #0
   2d300:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2d302:	42a5      	cmp	r5, r4
   2d304:	d000      	beq.n	2d308 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2d306:	b904      	cbnz	r4, 2d30a <z_unpend_all+0x10>
}
   2d308:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   2d30a:	4620      	mov	r0, r4
   2d30c:	f7f5 fbd6 	bl	22abc <z_unpend_thread>
		z_ready_thread(thread);
   2d310:	4620      	mov	r0, r4
   2d312:	f7f5 fceb 	bl	22cec <z_ready_thread>
		need_sched = 1;
   2d316:	2001      	movs	r0, #1
   2d318:	e7f2      	b.n	2d300 <z_unpend_all+0x6>

0002d31a <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   2d31a:	b15a      	cbz	r2, 2d334 <z_impl_k_sem_init+0x1a>
   2d31c:	428a      	cmp	r2, r1
   2d31e:	d309      	bcc.n	2d334 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   2d320:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   2d324:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   2d328:	e9c0 0000 	strd	r0, r0, [r0]
   2d32c:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   2d330:	2000      	movs	r0, #0
   2d332:	4770      	bx	lr
		return -EINVAL;
   2d334:	f06f 0015 	mvn.w	r0, #21
}
   2d338:	4770      	bx	lr

0002d33a <k_is_in_isr>:
   2d33a:	f3ef 8005 	mrs	r0, IPSR
}
   2d33e:	3000      	adds	r0, #0
   2d340:	bf18      	it	ne
   2d342:	2001      	movne	r0, #1
   2d344:	4770      	bx	lr

0002d346 <z_impl_k_busy_wait>:
	if (usec_to_wait == 0) {
   2d346:	b108      	cbz	r0, 2d34c <z_impl_k_busy_wait+0x6>
	arch_busy_wait(usec_to_wait);
   2d348:	f7da ba08 	b.w	775c <arch_busy_wait>
}
   2d34c:	4770      	bx	lr

0002d34e <z_impl_k_thread_name_set>:
}
   2d34e:	f06f 0057 	mvn.w	r0, #87	; 0x57
   2d352:	4770      	bx	lr

0002d354 <k_thread_name_get>:
}
   2d354:	2000      	movs	r0, #0
   2d356:	4770      	bx	lr

0002d358 <z_impl_k_thread_start>:
	z_sched_start(thread);
   2d358:	f7f5 bcfe 	b.w	22d58 <z_sched_start>

0002d35c <k_work_submit_to_queue>:
{
   2d35c:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2d35e:	f101 0308 	add.w	r3, r1, #8
   2d362:	f3bf 8f5b 	dmb	ish
   2d366:	e853 2f00 	ldrex	r2, [r3]
   2d36a:	f042 0c01 	orr.w	ip, r2, #1
   2d36e:	e843 ce00 	strex	lr, ip, [r3]
   2d372:	f1be 0f00 	cmp.w	lr, #0
   2d376:	d1f6      	bne.n	2d366 <k_work_submit_to_queue+0xa>
   2d378:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   2d37c:	07d3      	lsls	r3, r2, #31
   2d37e:	d403      	bmi.n	2d388 <k_work_submit_to_queue+0x2c>
}
   2d380:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   2d384:	f7ff bf70 	b.w	2d268 <k_queue_append>
}
   2d388:	f85d fb04 	ldr.w	pc, [sp], #4

0002d38c <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   2d38c:	f1a0 0110 	sub.w	r1, r0, #16
   2d390:	6980      	ldr	r0, [r0, #24]
   2d392:	f7ff bfe3 	b.w	2d35c <k_work_submit_to_queue>

0002d396 <work_cancel>:
{
   2d396:	b570      	push	{r4, r5, r6, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2d398:	f3bf 8f5b 	dmb	ish
   2d39c:	6883      	ldr	r3, [r0, #8]
   2d39e:	f3bf 8f5b 	dmb	ish
	if (k_work_pending(&work->work)) {
   2d3a2:	07db      	lsls	r3, r3, #31
{
   2d3a4:	4604      	mov	r4, r0
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   2d3a6:	f100 0508 	add.w	r5, r0, #8
	if (k_work_pending(&work->work)) {
   2d3aa:	d532      	bpl.n	2d412 <work_cancel+0x7c>
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   2d3ac:	6a82      	ldr	r2, [r0, #40]	; 0x28
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   2d3ae:	6813      	ldr	r3, [r2, #0]
   2d3b0:	2100      	movs	r1, #0
   2d3b2:	b913      	cbnz	r3, 2d3ba <work_cancel+0x24>
			return -EINVAL;
   2d3b4:	f06f 0015 	mvn.w	r0, #21
}
   2d3b8:	bd70      	pop	{r4, r5, r6, pc}
   2d3ba:	429c      	cmp	r4, r3
   2d3bc:	d124      	bne.n	2d408 <work_cancel+0x72>
Z_GENLIST_REMOVE(sflist, sfnode)
   2d3be:	6823      	ldr	r3, [r4, #0]
   2d3c0:	6856      	ldr	r6, [r2, #4]
   2d3c2:	f023 0003 	bic.w	r0, r3, #3
   2d3c6:	b9b1      	cbnz	r1, 2d3f6 <work_cancel+0x60>
   2d3c8:	42b4      	cmp	r4, r6
	list->head = node;
   2d3ca:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   2d3cc:	d100      	bne.n	2d3d0 <work_cancel+0x3a>
	list->tail = node;
   2d3ce:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2d3d0:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2d3d2:	f003 0303 	and.w	r3, r3, #3
   2d3d6:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   2d3d8:	2000      	movs	r0, #0
   2d3da:	62a0      	str	r0, [r4, #40]	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2d3dc:	f3bf 8f5b 	dmb	ish
   2d3e0:	e855 3f00 	ldrex	r3, [r5]
   2d3e4:	f023 0301 	bic.w	r3, r3, #1
   2d3e8:	e845 3200 	strex	r2, r3, [r5]
   2d3ec:	2a00      	cmp	r2, #0
   2d3ee:	d1f7      	bne.n	2d3e0 <work_cancel+0x4a>
   2d3f0:	f3bf 8f5b 	dmb	ish
   2d3f4:	e7e0      	b.n	2d3b8 <work_cancel+0x22>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2d3f6:	680b      	ldr	r3, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2d3f8:	f003 0303 	and.w	r3, r3, #3
   2d3fc:	4303      	orrs	r3, r0
Z_GENLIST_REMOVE(sflist, sfnode)
   2d3fe:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   2d400:	600b      	str	r3, [r1, #0]
	list->tail = node;
   2d402:	bf08      	it	eq
   2d404:	6051      	streq	r1, [r2, #4]
   2d406:	e7e3      	b.n	2d3d0 <work_cancel+0x3a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2d408:	6818      	ldr	r0, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   2d40a:	4619      	mov	r1, r3
   2d40c:	f020 0303 	bic.w	r3, r0, #3
   2d410:	e7cf      	b.n	2d3b2 <work_cancel+0x1c>
		int err = z_abort_timeout(&work->timeout);
   2d412:	3010      	adds	r0, #16
   2d414:	f7f6 fec0 	bl	24198 <z_abort_timeout>
		if (err) {
   2d418:	2800      	cmp	r0, #0
   2d41a:	d0dd      	beq.n	2d3d8 <work_cancel+0x42>
			return -EALREADY;
   2d41c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2d420:	e7ca      	b.n	2d3b8 <work_cancel+0x22>

0002d422 <k_delayed_work_pending>:

bool k_delayed_work_pending(struct k_delayed_work *work)
{
	return !z_is_inactive_timeout(&work->timeout) ||
   2d422:	6903      	ldr	r3, [r0, #16]
   2d424:	b93b      	cbnz	r3, 2d436 <k_delayed_work_pending+0x14>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2d426:	f3bf 8f5b 	dmb	ish
   2d42a:	6880      	ldr	r0, [r0, #8]
   2d42c:	f3bf 8f5b 	dmb	ish
   2d430:	f000 0001 	and.w	r0, r0, #1
   2d434:	4770      	bx	lr
   2d436:	2001      	movs	r0, #1
	       k_work_pending(&work->work);
}
   2d438:	4770      	bx	lr

0002d43a <boot_banner>:
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
   2d43a:	4770      	bx	lr

0002d43c <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
   2d43c:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
   2d43e:	f7f7 f845 	bl	244cc <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   2d442:	bd08      	pop	{r3, pc}

0002d444 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
   2d444:	f7f7 b842 	b.w	244cc <z_tick_get>

0002d448 <z_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t z_timeout_end_calc(k_timeout_t timeout)
{
   2d448:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2d44a:	1c4b      	adds	r3, r1, #1
   2d44c:	bf08      	it	eq
   2d44e:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   2d452:	4604      	mov	r4, r0
   2d454:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2d456:	d013      	beq.n	2d480 <z_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2d458:	ea54 0105 	orrs.w	r1, r4, r5
   2d45c:	d103      	bne.n	2d466 <z_timeout_end_calc+0x1e>

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
	return z_tick_get() + MAX(1, dt);
}
   2d45e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   2d462:	f7f7 b833 	b.w	244cc <z_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   2d466:	f06f 0101 	mvn.w	r1, #1
   2d46a:	1a0a      	subs	r2, r1, r0
   2d46c:	f04f 31ff 	mov.w	r1, #4294967295
   2d470:	eb61 0305 	sbc.w	r3, r1, r5
   2d474:	2a00      	cmp	r2, #0
   2d476:	f173 0100 	sbcs.w	r1, r3, #0
   2d47a:	db02      	blt.n	2d482 <z_timeout_end_calc+0x3a>
		return Z_TICK_ABS(dt);
   2d47c:	4610      	mov	r0, r2
   2d47e:	4619      	mov	r1, r3
}
   2d480:	bd38      	pop	{r3, r4, r5, pc}
	return z_tick_get() + MAX(1, dt);
   2d482:	f7f7 f823 	bl	244cc <z_tick_get>
   2d486:	2c01      	cmp	r4, #1
   2d488:	f175 0300 	sbcs.w	r3, r5, #0
   2d48c:	bfbc      	itt	lt
   2d48e:	2401      	movlt	r4, #1
   2d490:	2500      	movlt	r5, #0
   2d492:	1820      	adds	r0, r4, r0
   2d494:	eb45 0101 	adc.w	r1, r5, r1
   2d498:	e7f2      	b.n	2d480 <z_timeout_end_calc+0x38>

0002d49a <k_work_submit_to_queue>:
{
   2d49a:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2d49c:	f101 0308 	add.w	r3, r1, #8
   2d4a0:	f3bf 8f5b 	dmb	ish
   2d4a4:	e853 2f00 	ldrex	r2, [r3]
   2d4a8:	f042 0c01 	orr.w	ip, r2, #1
   2d4ac:	e843 ce00 	strex	lr, ip, [r3]
   2d4b0:	f1be 0f00 	cmp.w	lr, #0
   2d4b4:	d1f6      	bne.n	2d4a4 <k_work_submit_to_queue+0xa>
   2d4b6:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   2d4ba:	07d3      	lsls	r3, r2, #31
   2d4bc:	d403      	bmi.n	2d4c6 <k_work_submit_to_queue+0x2c>
}
   2d4be:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   2d4c2:	f7ff bed1 	b.w	2d268 <k_queue_append>
}
   2d4c6:	f85d fb04 	ldr.w	pc, [sp], #4

0002d4ca <add_event>:
{
   2d4ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d4cc:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2d4ce:	e9d0 2300 	ldrd	r2, r3, [r0]
   2d4d2:	4290      	cmp	r0, r2
   2d4d4:	4604      	mov	r4, r0
   2d4d6:	460d      	mov	r5, r1
   2d4d8:	d106      	bne.n	2d4e8 <add_event+0x1e>
	node->prev = list->tail;
   2d4da:	6863      	ldr	r3, [r4, #4]
   2d4dc:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   2d4de:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   2d4e0:	602c      	str	r4, [r5, #0]
	list->tail->next = node;
   2d4e2:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2d4e4:	6065      	str	r5, [r4, #4]
}
   2d4e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   2d4e8:	2b00      	cmp	r3, #0
   2d4ea:	d0f6      	beq.n	2d4da <add_event+0x10>
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   2d4ec:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2d4ee:	b100      	cbz	r0, 2d4f2 <add_event+0x28>
   2d4f0:	386c      	subs	r0, #108	; 0x6c
   2d4f2:	b107      	cbz	r7, 2d4f6 <add_event+0x2c>
   2d4f4:	3f6c      	subs	r7, #108	; 0x6c
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   2d4f6:	4639      	mov	r1, r7
   2d4f8:	f7ff fecb 	bl	2d292 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   2d4fc:	2800      	cmp	r0, #0
   2d4fe:	d1ec      	bne.n	2d4da <add_event+0x10>
	return list->head == list;
   2d500:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2d502:	42b4      	cmp	r4, r6
   2d504:	d0e9      	beq.n	2d4da <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2d506:	2e00      	cmp	r6, #0
   2d508:	d0e7      	beq.n	2d4da <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   2d50a:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2d50c:	b101      	cbz	r1, 2d510 <add_event+0x46>
   2d50e:	396c      	subs	r1, #108	; 0x6c
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   2d510:	4638      	mov	r0, r7
   2d512:	f7ff febe 	bl	2d292 <z_is_t1_higher_prio_than_t2>
   2d516:	b128      	cbz	r0, 2d524 <add_event+0x5a>
	node->prev = successor->prev;
   2d518:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   2d51a:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   2d51e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   2d520:	6075      	str	r5, [r6, #4]
			return;
   2d522:	e7e0      	b.n	2d4e6 <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   2d524:	6863      	ldr	r3, [r4, #4]
   2d526:	429e      	cmp	r6, r3
   2d528:	d0d7      	beq.n	2d4da <add_event+0x10>
   2d52a:	6836      	ldr	r6, [r6, #0]
   2d52c:	e7eb      	b.n	2d506 <add_event+0x3c>

0002d52e <z_handle_obj_poll_events>:
	return list->head == list;
   2d52e:	6803      	ldr	r3, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2d530:	4298      	cmp	r0, r3
   2d532:	d009      	beq.n	2d548 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   2d534:	e9d3 2000 	ldrd	r2, r0, [r3]
   2d538:	6002      	str	r2, [r0, #0]
	node->next->prev = node->prev;
   2d53a:	6050      	str	r0, [r2, #4]
	node->next = NULL;
   2d53c:	2200      	movs	r2, #0
	node->prev = NULL;
   2d53e:	e9c3 2200 	strd	r2, r2, [r3]
		(void) signal_poll_event(poll_event, state);
   2d542:	4618      	mov	r0, r3
   2d544:	f7f7 b888 	b.w	24658 <signal_poll_event>
}
   2d548:	4770      	bx	lr

0002d54a <k_free>:
	if (ptr != NULL) {
   2d54a:	b138      	cbz	r0, 2d55c <k_free+0x12>
		for (heap_ref = &((struct k_heap **)ptr)[-1];
   2d54c:	1f03      	subs	r3, r0, #4
   2d54e:	4619      	mov	r1, r3
			*heap_ref == (struct k_heap *)-1; --heap_ref) {
   2d550:	f853 0904 	ldr.w	r0, [r3], #-4
		for (heap_ref = &((struct k_heap **)ptr)[-1];
   2d554:	1c42      	adds	r2, r0, #1
   2d556:	d0fa      	beq.n	2d54e <k_free+0x4>
		k_heap_free(*heap_ref, ptr);
   2d558:	f7f4 bd7a 	b.w	22050 <k_heap_free>
}
   2d55c:	4770      	bx	lr

0002d55e <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   2d55e:	4770      	bx	lr

0002d560 <abs>:
   2d560:	2800      	cmp	r0, #0
   2d562:	bfb8      	it	lt
   2d564:	4240      	neglt	r0, r0
   2d566:	4770      	bx	lr

0002d568 <memcmp>:
   2d568:	b530      	push	{r4, r5, lr}
   2d56a:	3901      	subs	r1, #1
   2d56c:	2400      	movs	r4, #0
   2d56e:	42a2      	cmp	r2, r4
   2d570:	d101      	bne.n	2d576 <memcmp+0xe>
   2d572:	2000      	movs	r0, #0
   2d574:	e005      	b.n	2d582 <memcmp+0x1a>
   2d576:	5d03      	ldrb	r3, [r0, r4]
   2d578:	3401      	adds	r4, #1
   2d57a:	5d0d      	ldrb	r5, [r1, r4]
   2d57c:	42ab      	cmp	r3, r5
   2d57e:	d0f6      	beq.n	2d56e <memcmp+0x6>
   2d580:	1b58      	subs	r0, r3, r5
   2d582:	bd30      	pop	{r4, r5, pc}

0002d584 <memcpy>:
   2d584:	440a      	add	r2, r1
   2d586:	4291      	cmp	r1, r2
   2d588:	f100 33ff 	add.w	r3, r0, #4294967295
   2d58c:	d100      	bne.n	2d590 <memcpy+0xc>
   2d58e:	4770      	bx	lr
   2d590:	b510      	push	{r4, lr}
   2d592:	f811 4b01 	ldrb.w	r4, [r1], #1
   2d596:	f803 4f01 	strb.w	r4, [r3, #1]!
   2d59a:	4291      	cmp	r1, r2
   2d59c:	d1f9      	bne.n	2d592 <memcpy+0xe>
   2d59e:	bd10      	pop	{r4, pc}

0002d5a0 <__memcpy_chk>:
   2d5a0:	429a      	cmp	r2, r3
   2d5a2:	b508      	push	{r3, lr}
   2d5a4:	d901      	bls.n	2d5aa <__memcpy_chk+0xa>
   2d5a6:	f7da f89d 	bl	76e4 <__chk_fail>
   2d5aa:	4281      	cmp	r1, r0
   2d5ac:	d804      	bhi.n	2d5b8 <__memcpy_chk+0x18>
   2d5ae:	188b      	adds	r3, r1, r2
   2d5b0:	4298      	cmp	r0, r3
   2d5b2:	d3f8      	bcc.n	2d5a6 <__memcpy_chk+0x6>
   2d5b4:	4281      	cmp	r1, r0
   2d5b6:	d102      	bne.n	2d5be <__memcpy_chk+0x1e>
   2d5b8:	1883      	adds	r3, r0, r2
   2d5ba:	4299      	cmp	r1, r3
   2d5bc:	d3f3      	bcc.n	2d5a6 <__memcpy_chk+0x6>
   2d5be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2d5c2:	f7ff bfdf 	b.w	2d584 <memcpy>

0002d5c6 <memmove>:
   2d5c6:	4288      	cmp	r0, r1
   2d5c8:	b510      	push	{r4, lr}
   2d5ca:	eb01 0302 	add.w	r3, r1, r2
   2d5ce:	d902      	bls.n	2d5d6 <memmove+0x10>
   2d5d0:	4283      	cmp	r3, r0
   2d5d2:	461c      	mov	r4, r3
   2d5d4:	d807      	bhi.n	2d5e6 <memmove+0x20>
   2d5d6:	1e42      	subs	r2, r0, #1
   2d5d8:	4299      	cmp	r1, r3
   2d5da:	d008      	beq.n	2d5ee <memmove+0x28>
   2d5dc:	f811 4b01 	ldrb.w	r4, [r1], #1
   2d5e0:	f802 4f01 	strb.w	r4, [r2, #1]!
   2d5e4:	e7f8      	b.n	2d5d8 <memmove+0x12>
   2d5e6:	1883      	adds	r3, r0, r2
   2d5e8:	1a9a      	subs	r2, r3, r2
   2d5ea:	429a      	cmp	r2, r3
   2d5ec:	d100      	bne.n	2d5f0 <memmove+0x2a>
   2d5ee:	bd10      	pop	{r4, pc}
   2d5f0:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   2d5f4:	f803 1d01 	strb.w	r1, [r3, #-1]!
   2d5f8:	e7f7      	b.n	2d5ea <memmove+0x24>

0002d5fa <memset>:
   2d5fa:	4402      	add	r2, r0
   2d5fc:	4603      	mov	r3, r0
   2d5fe:	4293      	cmp	r3, r2
   2d600:	d100      	bne.n	2d604 <memset+0xa>
   2d602:	4770      	bx	lr
   2d604:	f803 1b01 	strb.w	r1, [r3], #1
   2d608:	e7f9      	b.n	2d5fe <memset+0x4>

0002d60a <__memset_chk>:
   2d60a:	429a      	cmp	r2, r3
   2d60c:	b508      	push	{r3, lr}
   2d60e:	d901      	bls.n	2d614 <__memset_chk+0xa>
   2d610:	f7da f868 	bl	76e4 <__chk_fail>
   2d614:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2d618:	f7ff bfef 	b.w	2d5fa <memset>

0002d61c <__cvt>:
   2d61c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2d620:	b088      	sub	sp, #32
   2d622:	2b00      	cmp	r3, #0
   2d624:	9f14      	ldr	r7, [sp, #80]	; 0x50
   2d626:	9d10      	ldr	r5, [sp, #64]	; 0x40
   2d628:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   2d62c:	461e      	mov	r6, r3
   2d62e:	4614      	mov	r4, r2
   2d630:	bfb8      	it	lt
   2d632:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
   2d636:	9a12      	ldr	r2, [sp, #72]	; 0x48
   2d638:	f027 0720 	bic.w	r7, r7, #32
   2d63c:	bfb6      	itet	lt
   2d63e:	461e      	movlt	r6, r3
   2d640:	2300      	movge	r3, #0
   2d642:	232d      	movlt	r3, #45	; 0x2d
   2d644:	2f46      	cmp	r7, #70	; 0x46
   2d646:	7013      	strb	r3, [r2, #0]
   2d648:	d004      	beq.n	2d654 <__cvt+0x38>
   2d64a:	2f45      	cmp	r7, #69	; 0x45
   2d64c:	d100      	bne.n	2d650 <__cvt+0x34>
   2d64e:	3501      	adds	r5, #1
   2d650:	2302      	movs	r3, #2
   2d652:	e000      	b.n	2d656 <__cvt+0x3a>
   2d654:	2303      	movs	r3, #3
   2d656:	aa07      	add	r2, sp, #28
   2d658:	9204      	str	r2, [sp, #16]
   2d65a:	aa06      	add	r2, sp, #24
   2d65c:	e9cd a202 	strd	sl, r2, [sp, #8]
   2d660:	e9cd 3500 	strd	r3, r5, [sp]
   2d664:	4622      	mov	r2, r4
   2d666:	4633      	mov	r3, r6
   2d668:	f7d5 fe82 	bl	3370 <_dtoa_r>
   2d66c:	2f47      	cmp	r7, #71	; 0x47
   2d66e:	4680      	mov	r8, r0
   2d670:	d102      	bne.n	2d678 <__cvt+0x5c>
   2d672:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2d674:	07db      	lsls	r3, r3, #31
   2d676:	d522      	bpl.n	2d6be <__cvt+0xa2>
   2d678:	2f46      	cmp	r7, #70	; 0x46
   2d67a:	eb08 0905 	add.w	r9, r8, r5
   2d67e:	d111      	bne.n	2d6a4 <__cvt+0x88>
   2d680:	f898 3000 	ldrb.w	r3, [r8]
   2d684:	2b30      	cmp	r3, #48	; 0x30
   2d686:	d10a      	bne.n	2d69e <__cvt+0x82>
   2d688:	2200      	movs	r2, #0
   2d68a:	2300      	movs	r3, #0
   2d68c:	4620      	mov	r0, r4
   2d68e:	4631      	mov	r1, r6
   2d690:	f7d4 fbb8 	bl	1e04 <__aeabi_dcmpeq>
   2d694:	b918      	cbnz	r0, 2d69e <__cvt+0x82>
   2d696:	f1c5 0501 	rsb	r5, r5, #1
   2d69a:	f8ca 5000 	str.w	r5, [sl]
   2d69e:	f8da 3000 	ldr.w	r3, [sl]
   2d6a2:	4499      	add	r9, r3
   2d6a4:	2200      	movs	r2, #0
   2d6a6:	2300      	movs	r3, #0
   2d6a8:	4620      	mov	r0, r4
   2d6aa:	4631      	mov	r1, r6
   2d6ac:	f7d4 fbaa 	bl	1e04 <__aeabi_dcmpeq>
   2d6b0:	b108      	cbz	r0, 2d6b6 <__cvt+0x9a>
   2d6b2:	f8cd 901c 	str.w	r9, [sp, #28]
   2d6b6:	2230      	movs	r2, #48	; 0x30
   2d6b8:	9b07      	ldr	r3, [sp, #28]
   2d6ba:	454b      	cmp	r3, r9
   2d6bc:	d308      	bcc.n	2d6d0 <__cvt+0xb4>
   2d6be:	9b07      	ldr	r3, [sp, #28]
   2d6c0:	9a15      	ldr	r2, [sp, #84]	; 0x54
   2d6c2:	eba3 0308 	sub.w	r3, r3, r8
   2d6c6:	4640      	mov	r0, r8
   2d6c8:	6013      	str	r3, [r2, #0]
   2d6ca:	b008      	add	sp, #32
   2d6cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2d6d0:	1c59      	adds	r1, r3, #1
   2d6d2:	9107      	str	r1, [sp, #28]
   2d6d4:	701a      	strb	r2, [r3, #0]
   2d6d6:	e7ef      	b.n	2d6b8 <__cvt+0x9c>

0002d6d8 <__exponent>:
   2d6d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2d6da:	2900      	cmp	r1, #0
   2d6dc:	bfba      	itte	lt
   2d6de:	4249      	neglt	r1, r1
   2d6e0:	232d      	movlt	r3, #45	; 0x2d
   2d6e2:	232b      	movge	r3, #43	; 0x2b
   2d6e4:	2909      	cmp	r1, #9
   2d6e6:	7002      	strb	r2, [r0, #0]
   2d6e8:	7043      	strb	r3, [r0, #1]
   2d6ea:	dd21      	ble.n	2d730 <__exponent+0x58>
   2d6ec:	f10d 0307 	add.w	r3, sp, #7
   2d6f0:	461f      	mov	r7, r3
   2d6f2:	260a      	movs	r6, #10
   2d6f4:	fb91 f2f6 	sdiv	r2, r1, r6
   2d6f8:	fb06 1412 	mls	r4, r6, r2, r1
   2d6fc:	3430      	adds	r4, #48	; 0x30
   2d6fe:	2963      	cmp	r1, #99	; 0x63
   2d700:	f103 35ff 	add.w	r5, r3, #4294967295
   2d704:	f803 4c01 	strb.w	r4, [r3, #-1]
   2d708:	dc0a      	bgt.n	2d720 <__exponent+0x48>
   2d70a:	3230      	adds	r2, #48	; 0x30
   2d70c:	f805 2c01 	strb.w	r2, [r5, #-1]
   2d710:	3b02      	subs	r3, #2
   2d712:	1c82      	adds	r2, r0, #2
   2d714:	42bb      	cmp	r3, r7
   2d716:	4614      	mov	r4, r2
   2d718:	d305      	bcc.n	2d726 <__exponent+0x4e>
   2d71a:	1a20      	subs	r0, r4, r0
   2d71c:	b003      	add	sp, #12
   2d71e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2d720:	462b      	mov	r3, r5
   2d722:	4611      	mov	r1, r2
   2d724:	e7e6      	b.n	2d6f4 <__exponent+0x1c>
   2d726:	f813 1b01 	ldrb.w	r1, [r3], #1
   2d72a:	f802 1b01 	strb.w	r1, [r2], #1
   2d72e:	e7f1      	b.n	2d714 <__exponent+0x3c>
   2d730:	2330      	movs	r3, #48	; 0x30
   2d732:	4419      	add	r1, r3
   2d734:	7083      	strb	r3, [r0, #2]
   2d736:	1d04      	adds	r4, r0, #4
   2d738:	70c1      	strb	r1, [r0, #3]
   2d73a:	e7ee      	b.n	2d71a <__exponent+0x42>

0002d73c <_printf_common>:
   2d73c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2d740:	4691      	mov	r9, r2
   2d742:	461f      	mov	r7, r3
   2d744:	688a      	ldr	r2, [r1, #8]
   2d746:	690b      	ldr	r3, [r1, #16]
   2d748:	f8dd 8020 	ldr.w	r8, [sp, #32]
   2d74c:	4293      	cmp	r3, r2
   2d74e:	bfb8      	it	lt
   2d750:	4613      	movlt	r3, r2
   2d752:	f8c9 3000 	str.w	r3, [r9]
   2d756:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   2d75a:	4606      	mov	r6, r0
   2d75c:	460c      	mov	r4, r1
   2d75e:	b112      	cbz	r2, 2d766 <_printf_common+0x2a>
   2d760:	3301      	adds	r3, #1
   2d762:	f8c9 3000 	str.w	r3, [r9]
   2d766:	6823      	ldr	r3, [r4, #0]
   2d768:	0699      	lsls	r1, r3, #26
   2d76a:	bf42      	ittt	mi
   2d76c:	f8d9 3000 	ldrmi.w	r3, [r9]
   2d770:	3302      	addmi	r3, #2
   2d772:	f8c9 3000 	strmi.w	r3, [r9]
   2d776:	6825      	ldr	r5, [r4, #0]
   2d778:	f015 0506 	ands.w	r5, r5, #6
   2d77c:	d107      	bne.n	2d78e <_printf_common+0x52>
   2d77e:	f104 0a19 	add.w	sl, r4, #25
   2d782:	68e3      	ldr	r3, [r4, #12]
   2d784:	f8d9 2000 	ldr.w	r2, [r9]
   2d788:	1a9b      	subs	r3, r3, r2
   2d78a:	42ab      	cmp	r3, r5
   2d78c:	dc28      	bgt.n	2d7e0 <_printf_common+0xa4>
   2d78e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   2d792:	6822      	ldr	r2, [r4, #0]
   2d794:	3300      	adds	r3, #0
   2d796:	bf18      	it	ne
   2d798:	2301      	movne	r3, #1
   2d79a:	0692      	lsls	r2, r2, #26
   2d79c:	d42d      	bmi.n	2d7fa <_printf_common+0xbe>
   2d79e:	f104 0243 	add.w	r2, r4, #67	; 0x43
   2d7a2:	4639      	mov	r1, r7
   2d7a4:	4630      	mov	r0, r6
   2d7a6:	47c0      	blx	r8
   2d7a8:	3001      	adds	r0, #1
   2d7aa:	d020      	beq.n	2d7ee <_printf_common+0xb2>
   2d7ac:	6823      	ldr	r3, [r4, #0]
   2d7ae:	68e5      	ldr	r5, [r4, #12]
   2d7b0:	f8d9 2000 	ldr.w	r2, [r9]
   2d7b4:	f003 0306 	and.w	r3, r3, #6
   2d7b8:	2b04      	cmp	r3, #4
   2d7ba:	bf08      	it	eq
   2d7bc:	1aad      	subeq	r5, r5, r2
   2d7be:	68a3      	ldr	r3, [r4, #8]
   2d7c0:	6922      	ldr	r2, [r4, #16]
   2d7c2:	bf0c      	ite	eq
   2d7c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   2d7c8:	2500      	movne	r5, #0
   2d7ca:	4293      	cmp	r3, r2
   2d7cc:	bfc4      	itt	gt
   2d7ce:	1a9b      	subgt	r3, r3, r2
   2d7d0:	18ed      	addgt	r5, r5, r3
   2d7d2:	f04f 0900 	mov.w	r9, #0
   2d7d6:	341a      	adds	r4, #26
   2d7d8:	454d      	cmp	r5, r9
   2d7da:	d11a      	bne.n	2d812 <_printf_common+0xd6>
   2d7dc:	2000      	movs	r0, #0
   2d7de:	e008      	b.n	2d7f2 <_printf_common+0xb6>
   2d7e0:	2301      	movs	r3, #1
   2d7e2:	4652      	mov	r2, sl
   2d7e4:	4639      	mov	r1, r7
   2d7e6:	4630      	mov	r0, r6
   2d7e8:	47c0      	blx	r8
   2d7ea:	3001      	adds	r0, #1
   2d7ec:	d103      	bne.n	2d7f6 <_printf_common+0xba>
   2d7ee:	f04f 30ff 	mov.w	r0, #4294967295
   2d7f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2d7f6:	3501      	adds	r5, #1
   2d7f8:	e7c3      	b.n	2d782 <_printf_common+0x46>
   2d7fa:	18e1      	adds	r1, r4, r3
   2d7fc:	1c5a      	adds	r2, r3, #1
   2d7fe:	2030      	movs	r0, #48	; 0x30
   2d800:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   2d804:	4422      	add	r2, r4
   2d806:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   2d80a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   2d80e:	3302      	adds	r3, #2
   2d810:	e7c5      	b.n	2d79e <_printf_common+0x62>
   2d812:	2301      	movs	r3, #1
   2d814:	4622      	mov	r2, r4
   2d816:	4639      	mov	r1, r7
   2d818:	4630      	mov	r0, r6
   2d81a:	47c0      	blx	r8
   2d81c:	3001      	adds	r0, #1
   2d81e:	d0e6      	beq.n	2d7ee <_printf_common+0xb2>
   2d820:	f109 0901 	add.w	r9, r9, #1
   2d824:	e7d8      	b.n	2d7d8 <_printf_common+0x9c>

0002d826 <__strcat_chk>:
   2d826:	b538      	push	{r3, r4, r5, lr}
   2d828:	4604      	mov	r4, r0
   2d82a:	4623      	mov	r3, r4
   2d82c:	f814 5b01 	ldrb.w	r5, [r4], #1
   2d830:	b935      	cbnz	r5, 2d840 <__strcat_chk+0x1a>
   2d832:	3901      	subs	r1, #1
   2d834:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   2d838:	b93c      	cbnz	r4, 2d84a <__strcat_chk+0x24>
   2d83a:	b112      	cbz	r2, 2d842 <__strcat_chk+0x1c>
   2d83c:	701c      	strb	r4, [r3, #0]
   2d83e:	bd38      	pop	{r3, r4, r5, pc}
   2d840:	b90a      	cbnz	r2, 2d846 <__strcat_chk+0x20>
   2d842:	f7d9 ff4f 	bl	76e4 <__chk_fail>
   2d846:	3a01      	subs	r2, #1
   2d848:	e7ef      	b.n	2d82a <__strcat_chk+0x4>
   2d84a:	2a00      	cmp	r2, #0
   2d84c:	d0f9      	beq.n	2d842 <__strcat_chk+0x1c>
   2d84e:	f803 4b01 	strb.w	r4, [r3], #1
   2d852:	3a01      	subs	r2, #1
   2d854:	e7ee      	b.n	2d834 <__strcat_chk+0xe>

0002d856 <strcpy>:
   2d856:	4603      	mov	r3, r0
   2d858:	f811 2b01 	ldrb.w	r2, [r1], #1
   2d85c:	f803 2b01 	strb.w	r2, [r3], #1
   2d860:	2a00      	cmp	r2, #0
   2d862:	d1f9      	bne.n	2d858 <strcpy+0x2>
   2d864:	4770      	bx	lr

0002d866 <__strncat_chk>:
   2d866:	b570      	push	{r4, r5, r6, lr}
   2d868:	b1b2      	cbz	r2, 2d898 <__strncat_chk+0x32>
   2d86a:	429a      	cmp	r2, r3
   2d86c:	d815      	bhi.n	2d89a <__strncat_chk+0x34>
   2d86e:	4604      	mov	r4, r0
   2d870:	4625      	mov	r5, r4
   2d872:	f815 6b01 	ldrb.w	r6, [r5], #1
   2d876:	b996      	cbnz	r6, 2d89e <__strncat_chk+0x38>
   2d878:	440a      	add	r2, r1
   2d87a:	f811 6b01 	ldrb.w	r6, [r1], #1
   2d87e:	7026      	strb	r6, [r4, #0]
   2d880:	4625      	mov	r5, r4
   2d882:	3401      	adds	r4, #1
   2d884:	b12e      	cbz	r6, 2d892 <__strncat_chk+0x2c>
   2d886:	1e5e      	subs	r6, r3, #1
   2d888:	b13b      	cbz	r3, 2d89a <__strncat_chk+0x34>
   2d88a:	4291      	cmp	r1, r2
   2d88c:	4625      	mov	r5, r4
   2d88e:	4633      	mov	r3, r6
   2d890:	d1f3      	bne.n	2d87a <__strncat_chk+0x14>
   2d892:	b113      	cbz	r3, 2d89a <__strncat_chk+0x34>
   2d894:	2300      	movs	r3, #0
   2d896:	702b      	strb	r3, [r5, #0]
   2d898:	bd70      	pop	{r4, r5, r6, pc}
   2d89a:	f7d9 ff23 	bl	76e4 <__chk_fail>
   2d89e:	2b00      	cmp	r3, #0
   2d8a0:	d0fb      	beq.n	2d89a <__strncat_chk+0x34>
   2d8a2:	3b01      	subs	r3, #1
   2d8a4:	462c      	mov	r4, r5
   2d8a6:	e7e3      	b.n	2d870 <__strncat_chk+0xa>

0002d8a8 <strncmp>:
   2d8a8:	b510      	push	{r4, lr}
   2d8aa:	b16a      	cbz	r2, 2d8c8 <strncmp+0x20>
   2d8ac:	3901      	subs	r1, #1
   2d8ae:	1884      	adds	r4, r0, r2
   2d8b0:	f810 3b01 	ldrb.w	r3, [r0], #1
   2d8b4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   2d8b8:	4293      	cmp	r3, r2
   2d8ba:	d103      	bne.n	2d8c4 <strncmp+0x1c>
   2d8bc:	42a0      	cmp	r0, r4
   2d8be:	d001      	beq.n	2d8c4 <strncmp+0x1c>
   2d8c0:	2b00      	cmp	r3, #0
   2d8c2:	d1f5      	bne.n	2d8b0 <strncmp+0x8>
   2d8c4:	1a98      	subs	r0, r3, r2
   2d8c6:	bd10      	pop	{r4, pc}
   2d8c8:	4610      	mov	r0, r2
   2d8ca:	e7fc      	b.n	2d8c6 <strncmp+0x1e>

0002d8cc <strnlen>:
   2d8cc:	b510      	push	{r4, lr}
   2d8ce:	4602      	mov	r2, r0
   2d8d0:	4401      	add	r1, r0
   2d8d2:	428a      	cmp	r2, r1
   2d8d4:	4613      	mov	r3, r2
   2d8d6:	d003      	beq.n	2d8e0 <strnlen+0x14>
   2d8d8:	781c      	ldrb	r4, [r3, #0]
   2d8da:	3201      	adds	r2, #1
   2d8dc:	2c00      	cmp	r4, #0
   2d8de:	d1f8      	bne.n	2d8d2 <strnlen+0x6>
   2d8e0:	1a18      	subs	r0, r3, r0
   2d8e2:	bd10      	pop	{r4, pc}

0002d8e4 <quorem>:
   2d8e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d8e8:	6903      	ldr	r3, [r0, #16]
   2d8ea:	690c      	ldr	r4, [r1, #16]
   2d8ec:	42a3      	cmp	r3, r4
   2d8ee:	4680      	mov	r8, r0
   2d8f0:	db7f      	blt.n	2d9f2 <quorem+0x10e>
   2d8f2:	3c01      	subs	r4, #1
   2d8f4:	f101 0714 	add.w	r7, r1, #20
   2d8f8:	00a0      	lsls	r0, r4, #2
   2d8fa:	f108 0514 	add.w	r5, r8, #20
   2d8fe:	182b      	adds	r3, r5, r0
   2d900:	9301      	str	r3, [sp, #4]
   2d902:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   2d906:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   2d90a:	3301      	adds	r3, #1
   2d90c:	429a      	cmp	r2, r3
   2d90e:	eb07 0900 	add.w	r9, r7, r0
   2d912:	fbb2 f6f3 	udiv	r6, r2, r3
   2d916:	d331      	bcc.n	2d97c <quorem+0x98>
   2d918:	f04f 0a00 	mov.w	sl, #0
   2d91c:	46bc      	mov	ip, r7
   2d91e:	46ae      	mov	lr, r5
   2d920:	46d3      	mov	fp, sl
   2d922:	f85c 2b04 	ldr.w	r2, [ip], #4
   2d926:	b293      	uxth	r3, r2
   2d928:	fb06 a303 	mla	r3, r6, r3, sl
   2d92c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   2d930:	b29b      	uxth	r3, r3
   2d932:	ebab 0303 	sub.w	r3, fp, r3
   2d936:	0c12      	lsrs	r2, r2, #16
   2d938:	f8de b000 	ldr.w	fp, [lr]
   2d93c:	fb06 a202 	mla	r2, r6, r2, sl
   2d940:	fa13 f38b 	uxtah	r3, r3, fp
   2d944:	ea4f 4a12 	mov.w	sl, r2, lsr #16
   2d948:	fa1f fb82 	uxth.w	fp, r2
   2d94c:	f8de 2000 	ldr.w	r2, [lr]
   2d950:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
   2d954:	eb02 4223 	add.w	r2, r2, r3, asr #16
   2d958:	b29b      	uxth	r3, r3
   2d95a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   2d95e:	45e1      	cmp	r9, ip
   2d960:	ea4f 4b22 	mov.w	fp, r2, asr #16
   2d964:	f84e 3b04 	str.w	r3, [lr], #4
   2d968:	d2db      	bcs.n	2d922 <quorem+0x3e>
   2d96a:	582b      	ldr	r3, [r5, r0]
   2d96c:	b933      	cbnz	r3, 2d97c <quorem+0x98>
   2d96e:	9b01      	ldr	r3, [sp, #4]
   2d970:	3b04      	subs	r3, #4
   2d972:	429d      	cmp	r5, r3
   2d974:	461a      	mov	r2, r3
   2d976:	d330      	bcc.n	2d9da <quorem+0xf6>
   2d978:	f8c8 4010 	str.w	r4, [r8, #16]
   2d97c:	4640      	mov	r0, r8
   2d97e:	f000 fa33 	bl	2dde8 <__mcmp>
   2d982:	2800      	cmp	r0, #0
   2d984:	db25      	blt.n	2d9d2 <quorem+0xee>
   2d986:	3601      	adds	r6, #1
   2d988:	4628      	mov	r0, r5
   2d98a:	f04f 0c00 	mov.w	ip, #0
   2d98e:	f857 2b04 	ldr.w	r2, [r7], #4
   2d992:	f8d0 e000 	ldr.w	lr, [r0]
   2d996:	b293      	uxth	r3, r2
   2d998:	ebac 0303 	sub.w	r3, ip, r3
   2d99c:	0c12      	lsrs	r2, r2, #16
   2d99e:	fa13 f38e 	uxtah	r3, r3, lr
   2d9a2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
   2d9a6:	eb02 4223 	add.w	r2, r2, r3, asr #16
   2d9aa:	b29b      	uxth	r3, r3
   2d9ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   2d9b0:	45b9      	cmp	r9, r7
   2d9b2:	ea4f 4c22 	mov.w	ip, r2, asr #16
   2d9b6:	f840 3b04 	str.w	r3, [r0], #4
   2d9ba:	d2e8      	bcs.n	2d98e <quorem+0xaa>
   2d9bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   2d9c0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   2d9c4:	b92a      	cbnz	r2, 2d9d2 <quorem+0xee>
   2d9c6:	3b04      	subs	r3, #4
   2d9c8:	429d      	cmp	r5, r3
   2d9ca:	461a      	mov	r2, r3
   2d9cc:	d30b      	bcc.n	2d9e6 <quorem+0x102>
   2d9ce:	f8c8 4010 	str.w	r4, [r8, #16]
   2d9d2:	4630      	mov	r0, r6
   2d9d4:	b003      	add	sp, #12
   2d9d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d9da:	6812      	ldr	r2, [r2, #0]
   2d9dc:	3b04      	subs	r3, #4
   2d9de:	2a00      	cmp	r2, #0
   2d9e0:	d1ca      	bne.n	2d978 <quorem+0x94>
   2d9e2:	3c01      	subs	r4, #1
   2d9e4:	e7c5      	b.n	2d972 <quorem+0x8e>
   2d9e6:	6812      	ldr	r2, [r2, #0]
   2d9e8:	3b04      	subs	r3, #4
   2d9ea:	2a00      	cmp	r2, #0
   2d9ec:	d1ef      	bne.n	2d9ce <quorem+0xea>
   2d9ee:	3c01      	subs	r4, #1
   2d9f0:	e7ea      	b.n	2d9c8 <quorem+0xe4>
   2d9f2:	2000      	movs	r0, #0
   2d9f4:	e7ee      	b.n	2d9d4 <quorem+0xf0>

0002d9f6 <__sfmoreglue>:
   2d9f6:	b570      	push	{r4, r5, r6, lr}
   2d9f8:	1e4a      	subs	r2, r1, #1
   2d9fa:	2568      	movs	r5, #104	; 0x68
   2d9fc:	4355      	muls	r5, r2
   2d9fe:	460e      	mov	r6, r1
   2da00:	f105 0174 	add.w	r1, r5, #116	; 0x74
   2da04:	f7f8 f81e 	bl	25a44 <_malloc_r>
   2da08:	4604      	mov	r4, r0
   2da0a:	b140      	cbz	r0, 2da1e <__sfmoreglue+0x28>
   2da0c:	2100      	movs	r1, #0
   2da0e:	e9c0 1600 	strd	r1, r6, [r0]
   2da12:	300c      	adds	r0, #12
   2da14:	60a0      	str	r0, [r4, #8]
   2da16:	f105 0268 	add.w	r2, r5, #104	; 0x68
   2da1a:	f7ff fdee 	bl	2d5fa <memset>
   2da1e:	4620      	mov	r0, r4
   2da20:	bd70      	pop	{r4, r5, r6, pc}

0002da22 <_fwalk_reent>:
   2da22:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2da26:	4680      	mov	r8, r0
   2da28:	4689      	mov	r9, r1
   2da2a:	f100 0448 	add.w	r4, r0, #72	; 0x48
   2da2e:	2600      	movs	r6, #0
   2da30:	b914      	cbnz	r4, 2da38 <_fwalk_reent+0x16>
   2da32:	4630      	mov	r0, r6
   2da34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2da38:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
   2da3c:	3f01      	subs	r7, #1
   2da3e:	d501      	bpl.n	2da44 <_fwalk_reent+0x22>
   2da40:	6824      	ldr	r4, [r4, #0]
   2da42:	e7f5      	b.n	2da30 <_fwalk_reent+0xe>
   2da44:	89ab      	ldrh	r3, [r5, #12]
   2da46:	2b01      	cmp	r3, #1
   2da48:	d907      	bls.n	2da5a <_fwalk_reent+0x38>
   2da4a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   2da4e:	3301      	adds	r3, #1
   2da50:	d003      	beq.n	2da5a <_fwalk_reent+0x38>
   2da52:	4629      	mov	r1, r5
   2da54:	4640      	mov	r0, r8
   2da56:	47c8      	blx	r9
   2da58:	4306      	orrs	r6, r0
   2da5a:	3568      	adds	r5, #104	; 0x68
   2da5c:	e7ee      	b.n	2da3c <_fwalk_reent+0x1a>

0002da5e <__retarget_lock_init_recursive>:
   2da5e:	4770      	bx	lr

0002da60 <__retarget_lock_acquire_recursive>:
   2da60:	4770      	bx	lr

0002da62 <__retarget_lock_release_recursive>:
   2da62:	4770      	bx	lr

0002da64 <_Balloc>:
   2da64:	b570      	push	{r4, r5, r6, lr}
   2da66:	6a45      	ldr	r5, [r0, #36]	; 0x24
   2da68:	4604      	mov	r4, r0
   2da6a:	460e      	mov	r6, r1
   2da6c:	b93d      	cbnz	r5, 2da7e <_Balloc+0x1a>
   2da6e:	2010      	movs	r0, #16
   2da70:	f7f7 ff92 	bl	25998 <malloc>
   2da74:	e9c0 5501 	strd	r5, r5, [r0, #4]
   2da78:	6260      	str	r0, [r4, #36]	; 0x24
   2da7a:	6005      	str	r5, [r0, #0]
   2da7c:	60c5      	str	r5, [r0, #12]
   2da7e:	6a65      	ldr	r5, [r4, #36]	; 0x24
   2da80:	68eb      	ldr	r3, [r5, #12]
   2da82:	b183      	cbz	r3, 2daa6 <_Balloc+0x42>
   2da84:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2da86:	68db      	ldr	r3, [r3, #12]
   2da88:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   2da8c:	b9b8      	cbnz	r0, 2dabe <_Balloc+0x5a>
   2da8e:	2101      	movs	r1, #1
   2da90:	fa01 f506 	lsl.w	r5, r1, r6
   2da94:	1d6a      	adds	r2, r5, #5
   2da96:	0092      	lsls	r2, r2, #2
   2da98:	4620      	mov	r0, r4
   2da9a:	f000 fa6a 	bl	2df72 <_calloc_r>
   2da9e:	b160      	cbz	r0, 2daba <_Balloc+0x56>
   2daa0:	e9c0 6501 	strd	r6, r5, [r0, #4]
   2daa4:	e00e      	b.n	2dac4 <_Balloc+0x60>
   2daa6:	2221      	movs	r2, #33	; 0x21
   2daa8:	2104      	movs	r1, #4
   2daaa:	4620      	mov	r0, r4
   2daac:	f000 fa61 	bl	2df72 <_calloc_r>
   2dab0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2dab2:	60e8      	str	r0, [r5, #12]
   2dab4:	68db      	ldr	r3, [r3, #12]
   2dab6:	2b00      	cmp	r3, #0
   2dab8:	d1e4      	bne.n	2da84 <_Balloc+0x20>
   2daba:	2000      	movs	r0, #0
   2dabc:	bd70      	pop	{r4, r5, r6, pc}
   2dabe:	6802      	ldr	r2, [r0, #0]
   2dac0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
   2dac4:	2300      	movs	r3, #0
   2dac6:	e9c0 3303 	strd	r3, r3, [r0, #12]
   2daca:	e7f7      	b.n	2dabc <_Balloc+0x58>

0002dacc <_Bfree>:
   2dacc:	b570      	push	{r4, r5, r6, lr}
   2dace:	6a44      	ldr	r4, [r0, #36]	; 0x24
   2dad0:	4606      	mov	r6, r0
   2dad2:	460d      	mov	r5, r1
   2dad4:	b93c      	cbnz	r4, 2dae6 <_Bfree+0x1a>
   2dad6:	2010      	movs	r0, #16
   2dad8:	f7f7 ff5e 	bl	25998 <malloc>
   2dadc:	e9c0 4401 	strd	r4, r4, [r0, #4]
   2dae0:	6270      	str	r0, [r6, #36]	; 0x24
   2dae2:	6004      	str	r4, [r0, #0]
   2dae4:	60c4      	str	r4, [r0, #12]
   2dae6:	b13d      	cbz	r5, 2daf8 <_Bfree+0x2c>
   2dae8:	6a73      	ldr	r3, [r6, #36]	; 0x24
   2daea:	686a      	ldr	r2, [r5, #4]
   2daec:	68db      	ldr	r3, [r3, #12]
   2daee:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   2daf2:	6029      	str	r1, [r5, #0]
   2daf4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   2daf8:	bd70      	pop	{r4, r5, r6, pc}

0002dafa <__multadd>:
   2dafa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2dafe:	690d      	ldr	r5, [r1, #16]
   2db00:	461f      	mov	r7, r3
   2db02:	4606      	mov	r6, r0
   2db04:	460c      	mov	r4, r1
   2db06:	f101 0c14 	add.w	ip, r1, #20
   2db0a:	2300      	movs	r3, #0
   2db0c:	f8dc 0000 	ldr.w	r0, [ip]
   2db10:	b281      	uxth	r1, r0
   2db12:	fb02 7101 	mla	r1, r2, r1, r7
   2db16:	0c0f      	lsrs	r7, r1, #16
   2db18:	0c00      	lsrs	r0, r0, #16
   2db1a:	fb02 7000 	mla	r0, r2, r0, r7
   2db1e:	b289      	uxth	r1, r1
   2db20:	3301      	adds	r3, #1
   2db22:	eb01 4100 	add.w	r1, r1, r0, lsl #16
   2db26:	429d      	cmp	r5, r3
   2db28:	ea4f 4710 	mov.w	r7, r0, lsr #16
   2db2c:	f84c 1b04 	str.w	r1, [ip], #4
   2db30:	dcec      	bgt.n	2db0c <__multadd+0x12>
   2db32:	b1d7      	cbz	r7, 2db6a <__multadd+0x70>
   2db34:	68a3      	ldr	r3, [r4, #8]
   2db36:	42ab      	cmp	r3, r5
   2db38:	dc12      	bgt.n	2db60 <__multadd+0x66>
   2db3a:	6861      	ldr	r1, [r4, #4]
   2db3c:	4630      	mov	r0, r6
   2db3e:	3101      	adds	r1, #1
   2db40:	f7ff ff90 	bl	2da64 <_Balloc>
   2db44:	6922      	ldr	r2, [r4, #16]
   2db46:	3202      	adds	r2, #2
   2db48:	f104 010c 	add.w	r1, r4, #12
   2db4c:	4680      	mov	r8, r0
   2db4e:	0092      	lsls	r2, r2, #2
   2db50:	300c      	adds	r0, #12
   2db52:	f7ff fd17 	bl	2d584 <memcpy>
   2db56:	4621      	mov	r1, r4
   2db58:	4630      	mov	r0, r6
   2db5a:	f7ff ffb7 	bl	2dacc <_Bfree>
   2db5e:	4644      	mov	r4, r8
   2db60:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   2db64:	3501      	adds	r5, #1
   2db66:	615f      	str	r7, [r3, #20]
   2db68:	6125      	str	r5, [r4, #16]
   2db6a:	4620      	mov	r0, r4
   2db6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002db70 <__hi0bits>:
   2db70:	0c02      	lsrs	r2, r0, #16
   2db72:	0412      	lsls	r2, r2, #16
   2db74:	4603      	mov	r3, r0
   2db76:	b9ca      	cbnz	r2, 2dbac <__hi0bits+0x3c>
   2db78:	0403      	lsls	r3, r0, #16
   2db7a:	2010      	movs	r0, #16
   2db7c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   2db80:	bf04      	itt	eq
   2db82:	021b      	lsleq	r3, r3, #8
   2db84:	3008      	addeq	r0, #8
   2db86:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   2db8a:	bf04      	itt	eq
   2db8c:	011b      	lsleq	r3, r3, #4
   2db8e:	3004      	addeq	r0, #4
   2db90:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   2db94:	bf04      	itt	eq
   2db96:	009b      	lsleq	r3, r3, #2
   2db98:	3002      	addeq	r0, #2
   2db9a:	2b00      	cmp	r3, #0
   2db9c:	db05      	blt.n	2dbaa <__hi0bits+0x3a>
   2db9e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   2dba2:	f100 0001 	add.w	r0, r0, #1
   2dba6:	bf08      	it	eq
   2dba8:	2020      	moveq	r0, #32
   2dbaa:	4770      	bx	lr
   2dbac:	2000      	movs	r0, #0
   2dbae:	e7e5      	b.n	2db7c <__hi0bits+0xc>

0002dbb0 <__lo0bits>:
   2dbb0:	6803      	ldr	r3, [r0, #0]
   2dbb2:	f013 0207 	ands.w	r2, r3, #7
   2dbb6:	4601      	mov	r1, r0
   2dbb8:	d00b      	beq.n	2dbd2 <__lo0bits+0x22>
   2dbba:	07da      	lsls	r2, r3, #31
   2dbbc:	d424      	bmi.n	2dc08 <__lo0bits+0x58>
   2dbbe:	0798      	lsls	r0, r3, #30
   2dbc0:	bf49      	itett	mi
   2dbc2:	085b      	lsrmi	r3, r3, #1
   2dbc4:	089b      	lsrpl	r3, r3, #2
   2dbc6:	2001      	movmi	r0, #1
   2dbc8:	600b      	strmi	r3, [r1, #0]
   2dbca:	bf5c      	itt	pl
   2dbcc:	600b      	strpl	r3, [r1, #0]
   2dbce:	2002      	movpl	r0, #2
   2dbd0:	4770      	bx	lr
   2dbd2:	b298      	uxth	r0, r3
   2dbd4:	b9b0      	cbnz	r0, 2dc04 <__lo0bits+0x54>
   2dbd6:	0c1b      	lsrs	r3, r3, #16
   2dbd8:	2010      	movs	r0, #16
   2dbda:	f013 0fff 	tst.w	r3, #255	; 0xff
   2dbde:	bf04      	itt	eq
   2dbe0:	0a1b      	lsreq	r3, r3, #8
   2dbe2:	3008      	addeq	r0, #8
   2dbe4:	071a      	lsls	r2, r3, #28
   2dbe6:	bf04      	itt	eq
   2dbe8:	091b      	lsreq	r3, r3, #4
   2dbea:	3004      	addeq	r0, #4
   2dbec:	079a      	lsls	r2, r3, #30
   2dbee:	bf04      	itt	eq
   2dbf0:	089b      	lsreq	r3, r3, #2
   2dbf2:	3002      	addeq	r0, #2
   2dbf4:	07da      	lsls	r2, r3, #31
   2dbf6:	d403      	bmi.n	2dc00 <__lo0bits+0x50>
   2dbf8:	085b      	lsrs	r3, r3, #1
   2dbfa:	f100 0001 	add.w	r0, r0, #1
   2dbfe:	d005      	beq.n	2dc0c <__lo0bits+0x5c>
   2dc00:	600b      	str	r3, [r1, #0]
   2dc02:	4770      	bx	lr
   2dc04:	4610      	mov	r0, r2
   2dc06:	e7e8      	b.n	2dbda <__lo0bits+0x2a>
   2dc08:	2000      	movs	r0, #0
   2dc0a:	4770      	bx	lr
   2dc0c:	2020      	movs	r0, #32
   2dc0e:	4770      	bx	lr

0002dc10 <__i2b>:
   2dc10:	b510      	push	{r4, lr}
   2dc12:	460c      	mov	r4, r1
   2dc14:	2101      	movs	r1, #1
   2dc16:	f7ff ff25 	bl	2da64 <_Balloc>
   2dc1a:	2201      	movs	r2, #1
   2dc1c:	6144      	str	r4, [r0, #20]
   2dc1e:	6102      	str	r2, [r0, #16]
   2dc20:	bd10      	pop	{r4, pc}

0002dc22 <__multiply>:
   2dc22:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2dc26:	4690      	mov	r8, r2
   2dc28:	690a      	ldr	r2, [r1, #16]
   2dc2a:	f8d8 3010 	ldr.w	r3, [r8, #16]
   2dc2e:	429a      	cmp	r2, r3
   2dc30:	bfb8      	it	lt
   2dc32:	460b      	movlt	r3, r1
   2dc34:	460c      	mov	r4, r1
   2dc36:	bfbc      	itt	lt
   2dc38:	4644      	movlt	r4, r8
   2dc3a:	4698      	movlt	r8, r3
   2dc3c:	6927      	ldr	r7, [r4, #16]
   2dc3e:	f8d8 9010 	ldr.w	r9, [r8, #16]
   2dc42:	68a3      	ldr	r3, [r4, #8]
   2dc44:	6861      	ldr	r1, [r4, #4]
   2dc46:	eb07 0609 	add.w	r6, r7, r9
   2dc4a:	42b3      	cmp	r3, r6
   2dc4c:	bfb8      	it	lt
   2dc4e:	3101      	addlt	r1, #1
   2dc50:	f7ff ff08 	bl	2da64 <_Balloc>
   2dc54:	f100 0514 	add.w	r5, r0, #20
   2dc58:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
   2dc5c:	462b      	mov	r3, r5
   2dc5e:	2200      	movs	r2, #0
   2dc60:	4573      	cmp	r3, lr
   2dc62:	d316      	bcc.n	2dc92 <__multiply+0x70>
   2dc64:	f104 0314 	add.w	r3, r4, #20
   2dc68:	f108 0214 	add.w	r2, r8, #20
   2dc6c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   2dc70:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   2dc74:	9300      	str	r3, [sp, #0]
   2dc76:	9b00      	ldr	r3, [sp, #0]
   2dc78:	9201      	str	r2, [sp, #4]
   2dc7a:	4293      	cmp	r3, r2
   2dc7c:	d80c      	bhi.n	2dc98 <__multiply+0x76>
   2dc7e:	2e00      	cmp	r6, #0
   2dc80:	dd03      	ble.n	2dc8a <__multiply+0x68>
   2dc82:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
   2dc86:	2b00      	cmp	r3, #0
   2dc88:	d059      	beq.n	2dd3e <__multiply+0x11c>
   2dc8a:	6106      	str	r6, [r0, #16]
   2dc8c:	b003      	add	sp, #12
   2dc8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2dc92:	f843 2b04 	str.w	r2, [r3], #4
   2dc96:	e7e3      	b.n	2dc60 <__multiply+0x3e>
   2dc98:	f8b2 a000 	ldrh.w	sl, [r2]
   2dc9c:	f1ba 0f00 	cmp.w	sl, #0
   2dca0:	d023      	beq.n	2dcea <__multiply+0xc8>
   2dca2:	f104 0914 	add.w	r9, r4, #20
   2dca6:	46ac      	mov	ip, r5
   2dca8:	f04f 0800 	mov.w	r8, #0
   2dcac:	f859 1b04 	ldr.w	r1, [r9], #4
   2dcb0:	f8dc b000 	ldr.w	fp, [ip]
   2dcb4:	b28b      	uxth	r3, r1
   2dcb6:	fa1f fb8b 	uxth.w	fp, fp
   2dcba:	fb0a b303 	mla	r3, sl, r3, fp
   2dcbe:	ea4f 4b11 	mov.w	fp, r1, lsr #16
   2dcc2:	f8dc 1000 	ldr.w	r1, [ip]
   2dcc6:	4443      	add	r3, r8
   2dcc8:	ea4f 4811 	mov.w	r8, r1, lsr #16
   2dccc:	fb0a 810b 	mla	r1, sl, fp, r8
   2dcd0:	eb01 4113 	add.w	r1, r1, r3, lsr #16
   2dcd4:	b29b      	uxth	r3, r3
   2dcd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   2dcda:	454f      	cmp	r7, r9
   2dcdc:	ea4f 4811 	mov.w	r8, r1, lsr #16
   2dce0:	f84c 3b04 	str.w	r3, [ip], #4
   2dce4:	d8e2      	bhi.n	2dcac <__multiply+0x8a>
   2dce6:	f8cc 8000 	str.w	r8, [ip]
   2dcea:	9b01      	ldr	r3, [sp, #4]
   2dcec:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   2dcf0:	3204      	adds	r2, #4
   2dcf2:	f1b9 0f00 	cmp.w	r9, #0
   2dcf6:	d020      	beq.n	2dd3a <__multiply+0x118>
   2dcf8:	682b      	ldr	r3, [r5, #0]
   2dcfa:	f104 0814 	add.w	r8, r4, #20
   2dcfe:	46ac      	mov	ip, r5
   2dd00:	f04f 0a00 	mov.w	sl, #0
   2dd04:	f8b8 1000 	ldrh.w	r1, [r8]
   2dd08:	f8bc b002 	ldrh.w	fp, [ip, #2]
   2dd0c:	fb09 b101 	mla	r1, r9, r1, fp
   2dd10:	448a      	add	sl, r1
   2dd12:	b29b      	uxth	r3, r3
   2dd14:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   2dd18:	f84c 3b04 	str.w	r3, [ip], #4
   2dd1c:	f858 3b04 	ldr.w	r3, [r8], #4
   2dd20:	f8bc 1000 	ldrh.w	r1, [ip]
   2dd24:	0c1b      	lsrs	r3, r3, #16
   2dd26:	fb09 1303 	mla	r3, r9, r3, r1
   2dd2a:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   2dd2e:	4547      	cmp	r7, r8
   2dd30:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   2dd34:	d8e6      	bhi.n	2dd04 <__multiply+0xe2>
   2dd36:	f8cc 3000 	str.w	r3, [ip]
   2dd3a:	3504      	adds	r5, #4
   2dd3c:	e79b      	b.n	2dc76 <__multiply+0x54>
   2dd3e:	3e01      	subs	r6, #1
   2dd40:	e79d      	b.n	2dc7e <__multiply+0x5c>

0002dd42 <__lshift>:
   2dd42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2dd46:	460c      	mov	r4, r1
   2dd48:	ea4f 1a62 	mov.w	sl, r2, asr #5
   2dd4c:	6923      	ldr	r3, [r4, #16]
   2dd4e:	6849      	ldr	r1, [r1, #4]
   2dd50:	eb0a 0903 	add.w	r9, sl, r3
   2dd54:	68a3      	ldr	r3, [r4, #8]
   2dd56:	4607      	mov	r7, r0
   2dd58:	4616      	mov	r6, r2
   2dd5a:	f109 0501 	add.w	r5, r9, #1
   2dd5e:	42ab      	cmp	r3, r5
   2dd60:	db33      	blt.n	2ddca <__lshift+0x88>
   2dd62:	4638      	mov	r0, r7
   2dd64:	f7ff fe7e 	bl	2da64 <_Balloc>
   2dd68:	2300      	movs	r3, #0
   2dd6a:	4680      	mov	r8, r0
   2dd6c:	f100 0114 	add.w	r1, r0, #20
   2dd70:	f100 0210 	add.w	r2, r0, #16
   2dd74:	4618      	mov	r0, r3
   2dd76:	4553      	cmp	r3, sl
   2dd78:	db2a      	blt.n	2ddd0 <__lshift+0x8e>
   2dd7a:	6920      	ldr	r0, [r4, #16]
   2dd7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   2dd80:	f104 0314 	add.w	r3, r4, #20
   2dd84:	f016 021f 	ands.w	r2, r6, #31
   2dd88:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   2dd8c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   2dd90:	d022      	beq.n	2ddd8 <__lshift+0x96>
   2dd92:	f1c2 0e20 	rsb	lr, r2, #32
   2dd96:	2000      	movs	r0, #0
   2dd98:	681e      	ldr	r6, [r3, #0]
   2dd9a:	4096      	lsls	r6, r2
   2dd9c:	4330      	orrs	r0, r6
   2dd9e:	f841 0b04 	str.w	r0, [r1], #4
   2dda2:	f853 0b04 	ldr.w	r0, [r3], #4
   2dda6:	459c      	cmp	ip, r3
   2dda8:	fa20 f00e 	lsr.w	r0, r0, lr
   2ddac:	d8f4      	bhi.n	2dd98 <__lshift+0x56>
   2ddae:	6008      	str	r0, [r1, #0]
   2ddb0:	b108      	cbz	r0, 2ddb6 <__lshift+0x74>
   2ddb2:	f109 0502 	add.w	r5, r9, #2
   2ddb6:	3d01      	subs	r5, #1
   2ddb8:	4638      	mov	r0, r7
   2ddba:	f8c8 5010 	str.w	r5, [r8, #16]
   2ddbe:	4621      	mov	r1, r4
   2ddc0:	f7ff fe84 	bl	2dacc <_Bfree>
   2ddc4:	4640      	mov	r0, r8
   2ddc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2ddca:	3101      	adds	r1, #1
   2ddcc:	005b      	lsls	r3, r3, #1
   2ddce:	e7c6      	b.n	2dd5e <__lshift+0x1c>
   2ddd0:	f842 0f04 	str.w	r0, [r2, #4]!
   2ddd4:	3301      	adds	r3, #1
   2ddd6:	e7ce      	b.n	2dd76 <__lshift+0x34>
   2ddd8:	3904      	subs	r1, #4
   2ddda:	f853 2b04 	ldr.w	r2, [r3], #4
   2ddde:	f841 2f04 	str.w	r2, [r1, #4]!
   2dde2:	459c      	cmp	ip, r3
   2dde4:	d8f9      	bhi.n	2ddda <__lshift+0x98>
   2dde6:	e7e6      	b.n	2ddb6 <__lshift+0x74>

0002dde8 <__mcmp>:
   2dde8:	6903      	ldr	r3, [r0, #16]
   2ddea:	690a      	ldr	r2, [r1, #16]
   2ddec:	1a9b      	subs	r3, r3, r2
   2ddee:	b530      	push	{r4, r5, lr}
   2ddf0:	d10c      	bne.n	2de0c <__mcmp+0x24>
   2ddf2:	0092      	lsls	r2, r2, #2
   2ddf4:	3014      	adds	r0, #20
   2ddf6:	3114      	adds	r1, #20
   2ddf8:	1884      	adds	r4, r0, r2
   2ddfa:	4411      	add	r1, r2
   2ddfc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   2de00:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   2de04:	4295      	cmp	r5, r2
   2de06:	d003      	beq.n	2de10 <__mcmp+0x28>
   2de08:	d305      	bcc.n	2de16 <__mcmp+0x2e>
   2de0a:	2301      	movs	r3, #1
   2de0c:	4618      	mov	r0, r3
   2de0e:	bd30      	pop	{r4, r5, pc}
   2de10:	42a0      	cmp	r0, r4
   2de12:	d3f3      	bcc.n	2ddfc <__mcmp+0x14>
   2de14:	e7fa      	b.n	2de0c <__mcmp+0x24>
   2de16:	f04f 33ff 	mov.w	r3, #4294967295
   2de1a:	e7f7      	b.n	2de0c <__mcmp+0x24>

0002de1c <__mdiff>:
   2de1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2de20:	460d      	mov	r5, r1
   2de22:	4607      	mov	r7, r0
   2de24:	4611      	mov	r1, r2
   2de26:	4628      	mov	r0, r5
   2de28:	4614      	mov	r4, r2
   2de2a:	f7ff ffdd 	bl	2dde8 <__mcmp>
   2de2e:	1e06      	subs	r6, r0, #0
   2de30:	d108      	bne.n	2de44 <__mdiff+0x28>
   2de32:	4631      	mov	r1, r6
   2de34:	4638      	mov	r0, r7
   2de36:	f7ff fe15 	bl	2da64 <_Balloc>
   2de3a:	2301      	movs	r3, #1
   2de3c:	e9c0 3604 	strd	r3, r6, [r0, #16]
   2de40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2de44:	bfa4      	itt	ge
   2de46:	4623      	movge	r3, r4
   2de48:	462c      	movge	r4, r5
   2de4a:	4638      	mov	r0, r7
   2de4c:	6861      	ldr	r1, [r4, #4]
   2de4e:	bfa6      	itte	ge
   2de50:	461d      	movge	r5, r3
   2de52:	2600      	movge	r6, #0
   2de54:	2601      	movlt	r6, #1
   2de56:	f7ff fe05 	bl	2da64 <_Balloc>
   2de5a:	692b      	ldr	r3, [r5, #16]
   2de5c:	60c6      	str	r6, [r0, #12]
   2de5e:	6926      	ldr	r6, [r4, #16]
   2de60:	f105 0914 	add.w	r9, r5, #20
   2de64:	f104 0214 	add.w	r2, r4, #20
   2de68:	eb02 0786 	add.w	r7, r2, r6, lsl #2
   2de6c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
   2de70:	f100 0514 	add.w	r5, r0, #20
   2de74:	f04f 0e00 	mov.w	lr, #0
   2de78:	f852 ab04 	ldr.w	sl, [r2], #4
   2de7c:	f859 4b04 	ldr.w	r4, [r9], #4
   2de80:	fa1e f18a 	uxtah	r1, lr, sl
   2de84:	b2a3      	uxth	r3, r4
   2de86:	1ac9      	subs	r1, r1, r3
   2de88:	0c23      	lsrs	r3, r4, #16
   2de8a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
   2de8e:	eb03 4321 	add.w	r3, r3, r1, asr #16
   2de92:	b289      	uxth	r1, r1
   2de94:	ea4f 4e23 	mov.w	lr, r3, asr #16
   2de98:	45c8      	cmp	r8, r9
   2de9a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   2de9e:	4694      	mov	ip, r2
   2dea0:	f845 3b04 	str.w	r3, [r5], #4
   2dea4:	d8e8      	bhi.n	2de78 <__mdiff+0x5c>
   2dea6:	45bc      	cmp	ip, r7
   2dea8:	d304      	bcc.n	2deb4 <__mdiff+0x98>
   2deaa:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   2deae:	b183      	cbz	r3, 2ded2 <__mdiff+0xb6>
   2deb0:	6106      	str	r6, [r0, #16]
   2deb2:	e7c5      	b.n	2de40 <__mdiff+0x24>
   2deb4:	f85c 1b04 	ldr.w	r1, [ip], #4
   2deb8:	fa1e f381 	uxtah	r3, lr, r1
   2debc:	141a      	asrs	r2, r3, #16
   2debe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   2dec2:	b29b      	uxth	r3, r3
   2dec4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   2dec8:	ea4f 4e22 	mov.w	lr, r2, asr #16
   2decc:	f845 3b04 	str.w	r3, [r5], #4
   2ded0:	e7e9      	b.n	2dea6 <__mdiff+0x8a>
   2ded2:	3e01      	subs	r6, #1
   2ded4:	e7e9      	b.n	2deaa <__mdiff+0x8e>

0002ded6 <__d2b>:
   2ded6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2deda:	2101      	movs	r1, #1
   2dedc:	461c      	mov	r4, r3
   2dede:	4690      	mov	r8, r2
   2dee0:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
   2dee4:	f7ff fdbe 	bl	2da64 <_Balloc>
   2dee8:	f3c4 0213 	ubfx	r2, r4, #0, #20
   2deec:	f3c4 540a 	ubfx	r4, r4, #20, #11
   2def0:	4607      	mov	r7, r0
   2def2:	bb2c      	cbnz	r4, 2df40 <__d2b+0x6a>
   2def4:	9201      	str	r2, [sp, #4]
   2def6:	f1b8 0200 	subs.w	r2, r8, #0
   2defa:	d026      	beq.n	2df4a <__d2b+0x74>
   2defc:	4668      	mov	r0, sp
   2defe:	9200      	str	r2, [sp, #0]
   2df00:	f7ff fe56 	bl	2dbb0 <__lo0bits>
   2df04:	9900      	ldr	r1, [sp, #0]
   2df06:	b1f0      	cbz	r0, 2df46 <__d2b+0x70>
   2df08:	9a01      	ldr	r2, [sp, #4]
   2df0a:	f1c0 0320 	rsb	r3, r0, #32
   2df0e:	fa02 f303 	lsl.w	r3, r2, r3
   2df12:	430b      	orrs	r3, r1
   2df14:	40c2      	lsrs	r2, r0
   2df16:	617b      	str	r3, [r7, #20]
   2df18:	9201      	str	r2, [sp, #4]
   2df1a:	9b01      	ldr	r3, [sp, #4]
   2df1c:	61bb      	str	r3, [r7, #24]
   2df1e:	2b00      	cmp	r3, #0
   2df20:	bf14      	ite	ne
   2df22:	2102      	movne	r1, #2
   2df24:	2101      	moveq	r1, #1
   2df26:	6139      	str	r1, [r7, #16]
   2df28:	b1c4      	cbz	r4, 2df5c <__d2b+0x86>
   2df2a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   2df2e:	4404      	add	r4, r0
   2df30:	6034      	str	r4, [r6, #0]
   2df32:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   2df36:	6028      	str	r0, [r5, #0]
   2df38:	4638      	mov	r0, r7
   2df3a:	b002      	add	sp, #8
   2df3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2df40:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   2df44:	e7d6      	b.n	2def4 <__d2b+0x1e>
   2df46:	6179      	str	r1, [r7, #20]
   2df48:	e7e7      	b.n	2df1a <__d2b+0x44>
   2df4a:	a801      	add	r0, sp, #4
   2df4c:	f7ff fe30 	bl	2dbb0 <__lo0bits>
   2df50:	9b01      	ldr	r3, [sp, #4]
   2df52:	617b      	str	r3, [r7, #20]
   2df54:	2101      	movs	r1, #1
   2df56:	6139      	str	r1, [r7, #16]
   2df58:	3020      	adds	r0, #32
   2df5a:	e7e5      	b.n	2df28 <__d2b+0x52>
   2df5c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   2df60:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   2df64:	6030      	str	r0, [r6, #0]
   2df66:	6918      	ldr	r0, [r3, #16]
   2df68:	f7ff fe02 	bl	2db70 <__hi0bits>
   2df6c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   2df70:	e7e1      	b.n	2df36 <__d2b+0x60>

0002df72 <_calloc_r>:
   2df72:	b538      	push	{r3, r4, r5, lr}
   2df74:	fb02 f401 	mul.w	r4, r2, r1
   2df78:	4621      	mov	r1, r4
   2df7a:	f7f7 fd63 	bl	25a44 <_malloc_r>
   2df7e:	4605      	mov	r5, r0
   2df80:	b118      	cbz	r0, 2df8a <_calloc_r+0x18>
   2df82:	4622      	mov	r2, r4
   2df84:	2100      	movs	r1, #0
   2df86:	f7ff fb38 	bl	2d5fa <memset>
   2df8a:	4628      	mov	r0, r5
   2df8c:	bd38      	pop	{r3, r4, r5, pc}

0002df8e <__sfputc_r>:
   2df8e:	6893      	ldr	r3, [r2, #8]
   2df90:	3b01      	subs	r3, #1
   2df92:	2b00      	cmp	r3, #0
   2df94:	b410      	push	{r4}
   2df96:	6093      	str	r3, [r2, #8]
   2df98:	da07      	bge.n	2dfaa <__sfputc_r+0x1c>
   2df9a:	6994      	ldr	r4, [r2, #24]
   2df9c:	42a3      	cmp	r3, r4
   2df9e:	db01      	blt.n	2dfa4 <__sfputc_r+0x16>
   2dfa0:	290a      	cmp	r1, #10
   2dfa2:	d102      	bne.n	2dfaa <__sfputc_r+0x1c>
   2dfa4:	bc10      	pop	{r4}
   2dfa6:	f7f8 bbc7 	b.w	26738 <__swbuf_r>
   2dfaa:	6813      	ldr	r3, [r2, #0]
   2dfac:	1c58      	adds	r0, r3, #1
   2dfae:	6010      	str	r0, [r2, #0]
   2dfb0:	7019      	strb	r1, [r3, #0]
   2dfb2:	4608      	mov	r0, r1
   2dfb4:	bc10      	pop	{r4}
   2dfb6:	4770      	bx	lr

0002dfb8 <__sfputs_r>:
   2dfb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2dfba:	4606      	mov	r6, r0
   2dfbc:	460f      	mov	r7, r1
   2dfbe:	4614      	mov	r4, r2
   2dfc0:	18d5      	adds	r5, r2, r3
   2dfc2:	42ac      	cmp	r4, r5
   2dfc4:	d101      	bne.n	2dfca <__sfputs_r+0x12>
   2dfc6:	2000      	movs	r0, #0
   2dfc8:	e007      	b.n	2dfda <__sfputs_r+0x22>
   2dfca:	463a      	mov	r2, r7
   2dfcc:	f814 1b01 	ldrb.w	r1, [r4], #1
   2dfd0:	4630      	mov	r0, r6
   2dfd2:	f7ff ffdc 	bl	2df8e <__sfputc_r>
   2dfd6:	1c43      	adds	r3, r0, #1
   2dfd8:	d1f3      	bne.n	2dfc2 <__sfputs_r+0xa>
   2dfda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002dfdc <__sread>:
   2dfdc:	b510      	push	{r4, lr}
   2dfde:	460c      	mov	r4, r1
   2dfe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2dfe4:	f7f8 fd9e 	bl	26b24 <_read_r>
   2dfe8:	2800      	cmp	r0, #0
   2dfea:	bfab      	itete	ge
   2dfec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   2dfee:	89a3      	ldrhlt	r3, [r4, #12]
   2dff0:	181b      	addge	r3, r3, r0
   2dff2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   2dff6:	bfac      	ite	ge
   2dff8:	6563      	strge	r3, [r4, #84]	; 0x54
   2dffa:	81a3      	strhlt	r3, [r4, #12]
   2dffc:	bd10      	pop	{r4, pc}

0002dffe <__swrite>:
   2dffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e002:	461f      	mov	r7, r3
   2e004:	898b      	ldrh	r3, [r1, #12]
   2e006:	05db      	lsls	r3, r3, #23
   2e008:	4605      	mov	r5, r0
   2e00a:	460c      	mov	r4, r1
   2e00c:	4616      	mov	r6, r2
   2e00e:	d505      	bpl.n	2e01c <__swrite+0x1e>
   2e010:	2302      	movs	r3, #2
   2e012:	2200      	movs	r2, #0
   2e014:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2e018:	f7f8 fd32 	bl	26a80 <_lseek_r>
   2e01c:	89a3      	ldrh	r3, [r4, #12]
   2e01e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   2e022:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   2e026:	81a3      	strh	r3, [r4, #12]
   2e028:	4632      	mov	r2, r6
   2e02a:	463b      	mov	r3, r7
   2e02c:	4628      	mov	r0, r5
   2e02e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2e032:	f7f8 bbd3 	b.w	267dc <_write_r>

0002e036 <__sseek>:
   2e036:	b510      	push	{r4, lr}
   2e038:	460c      	mov	r4, r1
   2e03a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2e03e:	f7f8 fd1f 	bl	26a80 <_lseek_r>
   2e042:	1c43      	adds	r3, r0, #1
   2e044:	89a3      	ldrh	r3, [r4, #12]
   2e046:	bf15      	itete	ne
   2e048:	6560      	strne	r0, [r4, #84]	; 0x54
   2e04a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   2e04e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   2e052:	81a3      	strheq	r3, [r4, #12]
   2e054:	bf18      	it	ne
   2e056:	81a3      	strhne	r3, [r4, #12]
   2e058:	bd10      	pop	{r4, pc}

0002e05a <__sclose>:
   2e05a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2e05e:	f7f8 bc3d 	b.w	268dc <_close_r>

0002e062 <__swhatbuf_r>:
   2e062:	b570      	push	{r4, r5, r6, lr}
   2e064:	460e      	mov	r6, r1
   2e066:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2e06a:	2900      	cmp	r1, #0
   2e06c:	b096      	sub	sp, #88	; 0x58
   2e06e:	4614      	mov	r4, r2
   2e070:	461d      	mov	r5, r3
   2e072:	da07      	bge.n	2e084 <__swhatbuf_r+0x22>
   2e074:	2300      	movs	r3, #0
   2e076:	602b      	str	r3, [r5, #0]
   2e078:	89b3      	ldrh	r3, [r6, #12]
   2e07a:	061a      	lsls	r2, r3, #24
   2e07c:	d410      	bmi.n	2e0a0 <__swhatbuf_r+0x3e>
   2e07e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   2e082:	e00e      	b.n	2e0a2 <__swhatbuf_r+0x40>
   2e084:	466a      	mov	r2, sp
   2e086:	f7f8 fd5f 	bl	26b48 <_fstat_r>
   2e08a:	2800      	cmp	r0, #0
   2e08c:	dbf2      	blt.n	2e074 <__swhatbuf_r+0x12>
   2e08e:	9a01      	ldr	r2, [sp, #4]
   2e090:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   2e094:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
   2e098:	425a      	negs	r2, r3
   2e09a:	415a      	adcs	r2, r3
   2e09c:	602a      	str	r2, [r5, #0]
   2e09e:	e7ee      	b.n	2e07e <__swhatbuf_r+0x1c>
   2e0a0:	2340      	movs	r3, #64	; 0x40
   2e0a2:	2000      	movs	r0, #0
   2e0a4:	6023      	str	r3, [r4, #0]
   2e0a6:	b016      	add	sp, #88	; 0x58
   2e0a8:	bd70      	pop	{r4, r5, r6, pc}

0002e0aa <__ascii_mbtowc>:
   2e0aa:	b082      	sub	sp, #8
   2e0ac:	b901      	cbnz	r1, 2e0b0 <__ascii_mbtowc+0x6>
   2e0ae:	a901      	add	r1, sp, #4
   2e0b0:	b142      	cbz	r2, 2e0c4 <__ascii_mbtowc+0x1a>
   2e0b2:	b14b      	cbz	r3, 2e0c8 <__ascii_mbtowc+0x1e>
   2e0b4:	7813      	ldrb	r3, [r2, #0]
   2e0b6:	600b      	str	r3, [r1, #0]
   2e0b8:	7812      	ldrb	r2, [r2, #0]
   2e0ba:	1c10      	adds	r0, r2, #0
   2e0bc:	bf18      	it	ne
   2e0be:	2001      	movne	r0, #1
   2e0c0:	b002      	add	sp, #8
   2e0c2:	4770      	bx	lr
   2e0c4:	4610      	mov	r0, r2
   2e0c6:	e7fb      	b.n	2e0c0 <__ascii_mbtowc+0x16>
   2e0c8:	f06f 0001 	mvn.w	r0, #1
   2e0cc:	e7f8      	b.n	2e0c0 <__ascii_mbtowc+0x16>

0002e0ce <__ascii_wctomb>:
   2e0ce:	b149      	cbz	r1, 2e0e4 <__ascii_wctomb+0x16>
   2e0d0:	2aff      	cmp	r2, #255	; 0xff
   2e0d2:	bf85      	ittet	hi
   2e0d4:	238a      	movhi	r3, #138	; 0x8a
   2e0d6:	6003      	strhi	r3, [r0, #0]
   2e0d8:	700a      	strbls	r2, [r1, #0]
   2e0da:	f04f 30ff 	movhi.w	r0, #4294967295
   2e0de:	bf98      	it	ls
   2e0e0:	2001      	movls	r0, #1
   2e0e2:	4770      	bx	lr
   2e0e4:	4608      	mov	r0, r1
   2e0e6:	4770      	bx	lr
