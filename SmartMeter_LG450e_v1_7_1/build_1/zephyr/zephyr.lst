
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
   0:	20002b60 	.word	0x20002b60
   4:	00006af5 	.word	0x00006af5
   8:	0001b483 	.word	0x0001b483
   c:	00006b49 	.word	0x00006b49
  10:	00006b49 	.word	0x00006b49
  14:	00006b49 	.word	0x00006b49
  18:	00006b49 	.word	0x00006b49
	...
  2c:	000068a5 	.word	0x000068a5
  30:	00006b49 	.word	0x00006b49
  34:	00000000 	.word	0x00000000
  38:	00006851 	.word	0x00006851
  3c:	0001b467 	.word	0x0001b467

00000040 <_irq_vector_table>:
  40:	00006ab5 00006ab5 00006ab5 00006ab5     .j...j...j...j..
  50:	00006ab5 00006ab5 00006ab5 00006ab5     .j...j...j...j..
  60:	00006ab5 00006ab5 00006ab5 00006ab5     .j...j...j...j..
  70:	00006ab5 00006ab5 00006ab5 00006ab5     .j...j...j...j..
  80:	00006ab5 00006ab5 00006ab5 00006ab5     .j...j...j...j..
  90:	00006ab5 00006ab5 00006ab5 00006ab5     .j...j...j...j..
  a0:	00006ab5 00006ab5 00006ab5 00006ab5     .j...j...j...j..
  b0:	00006ab5 00006ab5 00006ab5 00006ab5     .j...j...j...j..
  c0:	00006ab5 00006ab5 00006ab5 00006ab5     .j...j...j...j..
  d0:	00006ab5 00006ab5 00006ab5 00006ab5     .j...j...j...j..
  e0:	00006ab5 00006ab5 00006ab5 00006ab5     .j...j...j...j..
  f0:	00006ab5 00006ab5 00006ab5 00006ab5     .j...j...j...j..

Disassembly of section text:

00000100 <memchr>:
     100:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     104:	2a10      	cmp	r2, #16
     106:	db2b      	blt.n	160 <CONFIG_IDLE_STACK_SIZE+0x20>
     108:	f010 0f07 	tst.w	r0, #7
     10c:	d008      	beq.n	120 <memchr+0x20>
     10e:	f810 3b01 	ldrb.w	r3, [r0], #1
     112:	3a01      	subs	r2, #1
     114:	428b      	cmp	r3, r1
     116:	d02d      	beq.n	174 <CONFIG_IDLE_STACK_SIZE+0x34>
     118:	f010 0f07 	tst.w	r0, #7
     11c:	b342      	cbz	r2, 170 <CONFIG_IDLE_STACK_SIZE+0x30>
     11e:	d1f6      	bne.n	10e <memchr+0xe>
     120:	b4f0      	push	{r4, r5, r6, r7}
     122:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
     126:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
     12a:	f022 0407 	bic.w	r4, r2, #7
     12e:	f07f 0700 	mvns.w	r7, #0
     132:	2300      	movs	r3, #0
     134:	e8f0 5602 	ldrd	r5, r6, [r0], #8
     138:	3c08      	subs	r4, #8
     13a:	ea85 0501 	eor.w	r5, r5, r1
     13e:	ea86 0601 	eor.w	r6, r6, r1
     142:	fa85 f547 	uadd8	r5, r5, r7
     146:	faa3 f587 	sel	r5, r3, r7
     14a:	fa86 f647 	uadd8	r6, r6, r7
     14e:	faa5 f687 	sel	r6, r5, r7
     152:	b98e      	cbnz	r6, 178 <CONFIG_IDLE_STACK_SIZE+0x38>
     154:	d1ee      	bne.n	134 <memchr+0x34>
     156:	bcf0      	pop	{r4, r5, r6, r7}
     158:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     15c:	f002 0207 	and.w	r2, r2, #7
     160:	b132      	cbz	r2, 170 <CONFIG_IDLE_STACK_SIZE+0x30>
     162:	f810 3b01 	ldrb.w	r3, [r0], #1
     166:	3a01      	subs	r2, #1
     168:	ea83 0301 	eor.w	r3, r3, r1
     16c:	b113      	cbz	r3, 174 <CONFIG_IDLE_STACK_SIZE+0x34>
     16e:	d1f8      	bne.n	162 <CONFIG_IDLE_STACK_SIZE+0x22>
     170:	2000      	movs	r0, #0
     172:	4770      	bx	lr
     174:	3801      	subs	r0, #1
     176:	4770      	bx	lr
     178:	2d00      	cmp	r5, #0
     17a:	bf06      	itte	eq
     17c:	4635      	moveq	r5, r6
     17e:	3803      	subeq	r0, #3
     180:	3807      	subne	r0, #7
     182:	f015 0f01 	tst.w	r5, #1
     186:	d107      	bne.n	198 <CONFIG_IDLE_STACK_SIZE+0x58>
     188:	3001      	adds	r0, #1
     18a:	f415 7f80 	tst.w	r5, #256	; 0x100
     18e:	bf02      	ittt	eq
     190:	3001      	addeq	r0, #1
     192:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
     196:	3001      	addeq	r0, #1
     198:	bcf0      	pop	{r4, r5, r6, r7}
     19a:	3801      	subs	r0, #1
     19c:	4770      	bx	lr
     19e:	bf00      	nop

000001a0 <__aeabi_drsub>:
     1a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     1a4:	e002      	b.n	1ac <__adddf3>
     1a6:	bf00      	nop

000001a8 <__aeabi_dsub>:
     1a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000001ac <__adddf3>:
     1ac:	b530      	push	{r4, r5, lr}
     1ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
     1b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
     1b6:	ea94 0f05 	teq	r4, r5
     1ba:	bf08      	it	eq
     1bc:	ea90 0f02 	teqeq	r0, r2
     1c0:	bf1f      	itttt	ne
     1c2:	ea54 0c00 	orrsne.w	ip, r4, r0
     1c6:	ea55 0c02 	orrsne.w	ip, r5, r2
     1ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     1ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     1d2:	f000 80e2 	beq.w	39a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x9a>
     1d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
     1da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     1de:	bfb8      	it	lt
     1e0:	426d      	neglt	r5, r5
     1e2:	dd0c      	ble.n	1fe <__adddf3+0x52>
     1e4:	442c      	add	r4, r5
     1e6:	ea80 0202 	eor.w	r2, r0, r2
     1ea:	ea81 0303 	eor.w	r3, r1, r3
     1ee:	ea82 0000 	eor.w	r0, r2, r0
     1f2:	ea83 0101 	eor.w	r1, r3, r1
     1f6:	ea80 0202 	eor.w	r2, r0, r2
     1fa:	ea81 0303 	eor.w	r3, r1, r3
     1fe:	2d36      	cmp	r5, #54	; 0x36
     200:	bf88      	it	hi
     202:	bd30      	pophi	{r4, r5, pc}
     204:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     208:	ea4f 3101 	mov.w	r1, r1, lsl #12
     20c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     210:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     214:	d002      	beq.n	21c <__adddf3+0x70>
     216:	4240      	negs	r0, r0
     218:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     21c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     220:	ea4f 3303 	mov.w	r3, r3, lsl #12
     224:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     228:	d002      	beq.n	230 <__adddf3+0x84>
     22a:	4252      	negs	r2, r2
     22c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     230:	ea94 0f05 	teq	r4, r5
     234:	f000 80a7 	beq.w	386 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x86>
     238:	f1a4 0401 	sub.w	r4, r4, #1
     23c:	f1d5 0e20 	rsbs	lr, r5, #32
     240:	db0d      	blt.n	25e <__adddf3+0xb2>
     242:	fa02 fc0e 	lsl.w	ip, r2, lr
     246:	fa22 f205 	lsr.w	r2, r2, r5
     24a:	1880      	adds	r0, r0, r2
     24c:	f141 0100 	adc.w	r1, r1, #0
     250:	fa03 f20e 	lsl.w	r2, r3, lr
     254:	1880      	adds	r0, r0, r2
     256:	fa43 f305 	asr.w	r3, r3, r5
     25a:	4159      	adcs	r1, r3
     25c:	e00e      	b.n	27c <__adddf3+0xd0>
     25e:	f1a5 0520 	sub.w	r5, r5, #32
     262:	f10e 0e20 	add.w	lr, lr, #32
     266:	2a01      	cmp	r2, #1
     268:	fa03 fc0e 	lsl.w	ip, r3, lr
     26c:	bf28      	it	cs
     26e:	f04c 0c02 	orrcs.w	ip, ip, #2
     272:	fa43 f305 	asr.w	r3, r3, r5
     276:	18c0      	adds	r0, r0, r3
     278:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     27c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     280:	d507      	bpl.n	292 <__adddf3+0xe6>
     282:	f04f 0e00 	mov.w	lr, #0
     286:	f1dc 0c00 	rsbs	ip, ip, #0
     28a:	eb7e 0000 	sbcs.w	r0, lr, r0
     28e:	eb6e 0101 	sbc.w	r1, lr, r1
     292:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     296:	d31b      	bcc.n	2d0 <__adddf3+0x124>
     298:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     29c:	d30c      	bcc.n	2b8 <__adddf3+0x10c>
     29e:	0849      	lsrs	r1, r1, #1
     2a0:	ea5f 0030 	movs.w	r0, r0, rrx
     2a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
     2a8:	f104 0401 	add.w	r4, r4, #1
     2ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
     2b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     2b4:	f080 809a 	bcs.w	3ec <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x4>
     2b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     2bc:	bf08      	it	eq
     2be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     2c2:	f150 0000 	adcs.w	r0, r0, #0
     2c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     2ca:	ea41 0105 	orr.w	r1, r1, r5
     2ce:	bd30      	pop	{r4, r5, pc}
     2d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     2d4:	4140      	adcs	r0, r0
     2d6:	eb41 0101 	adc.w	r1, r1, r1
     2da:	3c01      	subs	r4, #1
     2dc:	bf28      	it	cs
     2de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     2e2:	d2e9      	bcs.n	2b8 <__adddf3+0x10c>
     2e4:	f091 0f00 	teq	r1, #0
     2e8:	bf04      	itt	eq
     2ea:	4601      	moveq	r1, r0
     2ec:	2000      	moveq	r0, #0
     2ee:	fab1 f381 	clz	r3, r1
     2f2:	bf08      	it	eq
     2f4:	3320      	addeq	r3, #32
     2f6:	f1a3 030b 	sub.w	r3, r3, #11
     2fa:	f1b3 0220 	subs.w	r2, r3, #32
     2fe:	da0c      	bge.n	31a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x1a>
     300:	320c      	adds	r2, #12
     302:	dd08      	ble.n	316 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x16>
     304:	f102 0c14 	add.w	ip, r2, #20
     308:	f1c2 020c 	rsb	r2, r2, #12
     30c:	fa01 f00c 	lsl.w	r0, r1, ip
     310:	fa21 f102 	lsr.w	r1, r1, r2
     314:	e00c      	b.n	330 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x30>
     316:	f102 0214 	add.w	r2, r2, #20
     31a:	bfd8      	it	le
     31c:	f1c2 0c20 	rsble	ip, r2, #32
     320:	fa01 f102 	lsl.w	r1, r1, r2
     324:	fa20 fc0c 	lsr.w	ip, r0, ip
     328:	bfdc      	itt	le
     32a:	ea41 010c 	orrle.w	r1, r1, ip
     32e:	4090      	lslle	r0, r2
     330:	1ae4      	subs	r4, r4, r3
     332:	bfa2      	ittt	ge
     334:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     338:	4329      	orrge	r1, r5
     33a:	bd30      	popge	{r4, r5, pc}
     33c:	ea6f 0404 	mvn.w	r4, r4
     340:	3c1f      	subs	r4, #31
     342:	da1c      	bge.n	37e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x7e>
     344:	340c      	adds	r4, #12
     346:	dc0e      	bgt.n	366 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x66>
     348:	f104 0414 	add.w	r4, r4, #20
     34c:	f1c4 0220 	rsb	r2, r4, #32
     350:	fa20 f004 	lsr.w	r0, r0, r4
     354:	fa01 f302 	lsl.w	r3, r1, r2
     358:	ea40 0003 	orr.w	r0, r0, r3
     35c:	fa21 f304 	lsr.w	r3, r1, r4
     360:	ea45 0103 	orr.w	r1, r5, r3
     364:	bd30      	pop	{r4, r5, pc}
     366:	f1c4 040c 	rsb	r4, r4, #12
     36a:	f1c4 0220 	rsb	r2, r4, #32
     36e:	fa20 f002 	lsr.w	r0, r0, r2
     372:	fa01 f304 	lsl.w	r3, r1, r4
     376:	ea40 0003 	orr.w	r0, r0, r3
     37a:	4629      	mov	r1, r5
     37c:	bd30      	pop	{r4, r5, pc}
     37e:	fa21 f004 	lsr.w	r0, r1, r4
     382:	4629      	mov	r1, r5
     384:	bd30      	pop	{r4, r5, pc}
     386:	f094 0f00 	teq	r4, #0
     38a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     38e:	bf06      	itte	eq
     390:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     394:	3401      	addeq	r4, #1
     396:	3d01      	subne	r5, #1
     398:	e74e      	b.n	238 <__adddf3+0x8c>
     39a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     39e:	bf18      	it	ne
     3a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     3a4:	d029      	beq.n	3fa <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x12>
     3a6:	ea94 0f05 	teq	r4, r5
     3aa:	bf08      	it	eq
     3ac:	ea90 0f02 	teqeq	r0, r2
     3b0:	d005      	beq.n	3be <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xbe>
     3b2:	ea54 0c00 	orrs.w	ip, r4, r0
     3b6:	bf04      	itt	eq
     3b8:	4619      	moveq	r1, r3
     3ba:	4610      	moveq	r0, r2
     3bc:	bd30      	pop	{r4, r5, pc}
     3be:	ea91 0f03 	teq	r1, r3
     3c2:	bf1e      	ittt	ne
     3c4:	2100      	movne	r1, #0
     3c6:	2000      	movne	r0, #0
     3c8:	bd30      	popne	{r4, r5, pc}
     3ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     3ce:	d105      	bne.n	3dc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xdc>
     3d0:	0040      	lsls	r0, r0, #1
     3d2:	4149      	adcs	r1, r1
     3d4:	bf28      	it	cs
     3d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     3da:	bd30      	pop	{r4, r5, pc}
     3dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     3e0:	bf3c      	itt	cc
     3e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     3e6:	bd30      	popcc	{r4, r5, pc}
     3e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     3ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     3f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     3f4:	f04f 0000 	mov.w	r0, #0
     3f8:	bd30      	pop	{r4, r5, pc}
     3fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     3fe:	bf1a      	itte	ne
     400:	4619      	movne	r1, r3
     402:	4610      	movne	r0, r2
     404:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     408:	bf1c      	itt	ne
     40a:	460b      	movne	r3, r1
     40c:	4602      	movne	r2, r0
     40e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     412:	bf06      	itte	eq
     414:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     418:	ea91 0f03 	teqeq	r1, r3
     41c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     420:	bd30      	pop	{r4, r5, pc}
     422:	bf00      	nop

00000424 <__aeabi_ui2d>:
     424:	f090 0f00 	teq	r0, #0
     428:	bf04      	itt	eq
     42a:	2100      	moveq	r1, #0
     42c:	4770      	bxeq	lr
     42e:	b530      	push	{r4, r5, lr}
     430:	f44f 6480 	mov.w	r4, #1024	; 0x400
     434:	f104 0432 	add.w	r4, r4, #50	; 0x32
     438:	f04f 0500 	mov.w	r5, #0
     43c:	f04f 0100 	mov.w	r1, #0
     440:	e750      	b.n	2e4 <__adddf3+0x138>
     442:	bf00      	nop

00000444 <__aeabi_i2d>:
     444:	f090 0f00 	teq	r0, #0
     448:	bf04      	itt	eq
     44a:	2100      	moveq	r1, #0
     44c:	4770      	bxeq	lr
     44e:	b530      	push	{r4, r5, lr}
     450:	f44f 6480 	mov.w	r4, #1024	; 0x400
     454:	f104 0432 	add.w	r4, r4, #50	; 0x32
     458:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     45c:	bf48      	it	mi
     45e:	4240      	negmi	r0, r0
     460:	f04f 0100 	mov.w	r1, #0
     464:	e73e      	b.n	2e4 <__adddf3+0x138>
     466:	bf00      	nop

00000468 <__aeabi_f2d>:
     468:	0042      	lsls	r2, r0, #1
     46a:	ea4f 01e2 	mov.w	r1, r2, asr #3
     46e:	ea4f 0131 	mov.w	r1, r1, rrx
     472:	ea4f 7002 	mov.w	r0, r2, lsl #28
     476:	bf1f      	itttt	ne
     478:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     47c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     480:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     484:	4770      	bxne	lr
     486:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     48a:	bf08      	it	eq
     48c:	4770      	bxeq	lr
     48e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     492:	bf04      	itt	eq
     494:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     498:	4770      	bxeq	lr
     49a:	b530      	push	{r4, r5, lr}
     49c:	f44f 7460 	mov.w	r4, #896	; 0x380
     4a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     4a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     4a8:	e71c      	b.n	2e4 <__adddf3+0x138>
     4aa:	bf00      	nop

000004ac <__aeabi_ul2d>:
     4ac:	ea50 0201 	orrs.w	r2, r0, r1
     4b0:	bf08      	it	eq
     4b2:	4770      	bxeq	lr
     4b4:	b530      	push	{r4, r5, lr}
     4b6:	f04f 0500 	mov.w	r5, #0
     4ba:	e00a      	b.n	4d2 <__aeabi_l2d+0x16>

000004bc <__aeabi_l2d>:
     4bc:	ea50 0201 	orrs.w	r2, r0, r1
     4c0:	bf08      	it	eq
     4c2:	4770      	bxeq	lr
     4c4:	b530      	push	{r4, r5, lr}
     4c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     4ca:	d502      	bpl.n	4d2 <__aeabi_l2d+0x16>
     4cc:	4240      	negs	r0, r0
     4ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     4d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
     4d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
     4da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     4de:	f43f aed8 	beq.w	292 <__adddf3+0xe6>
     4e2:	f04f 0203 	mov.w	r2, #3
     4e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4ea:	bf18      	it	ne
     4ec:	3203      	addne	r2, #3
     4ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4f2:	bf18      	it	ne
     4f4:	3203      	addne	r2, #3
     4f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     4fa:	f1c2 0320 	rsb	r3, r2, #32
     4fe:	fa00 fc03 	lsl.w	ip, r0, r3
     502:	fa20 f002 	lsr.w	r0, r0, r2
     506:	fa01 fe03 	lsl.w	lr, r1, r3
     50a:	ea40 000e 	orr.w	r0, r0, lr
     50e:	fa21 f102 	lsr.w	r1, r1, r2
     512:	4414      	add	r4, r2
     514:	e6bd      	b.n	292 <__adddf3+0xe6>
     516:	bf00      	nop

00000518 <__aeabi_dmul>:
     518:	b570      	push	{r4, r5, r6, lr}
     51a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     51e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     522:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     526:	bf1d      	ittte	ne
     528:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     52c:	ea94 0f0c 	teqne	r4, ip
     530:	ea95 0f0c 	teqne	r5, ip
     534:	f000 f8de 	bleq	6f4 <__aeabi_dmul+0x1dc>
     538:	442c      	add	r4, r5
     53a:	ea81 0603 	eor.w	r6, r1, r3
     53e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     542:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     546:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     54a:	bf18      	it	ne
     54c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     550:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     554:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     558:	d038      	beq.n	5cc <__aeabi_dmul+0xb4>
     55a:	fba0 ce02 	umull	ip, lr, r0, r2
     55e:	f04f 0500 	mov.w	r5, #0
     562:	fbe1 e502 	umlal	lr, r5, r1, r2
     566:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     56a:	fbe0 e503 	umlal	lr, r5, r0, r3
     56e:	f04f 0600 	mov.w	r6, #0
     572:	fbe1 5603 	umlal	r5, r6, r1, r3
     576:	f09c 0f00 	teq	ip, #0
     57a:	bf18      	it	ne
     57c:	f04e 0e01 	orrne.w	lr, lr, #1
     580:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     584:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     588:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     58c:	d204      	bcs.n	598 <__aeabi_dmul+0x80>
     58e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     592:	416d      	adcs	r5, r5
     594:	eb46 0606 	adc.w	r6, r6, r6
     598:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     59c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     5a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     5a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     5a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     5ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     5b0:	bf88      	it	hi
     5b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     5b6:	d81e      	bhi.n	5f6 <__aeabi_dmul+0xde>
     5b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     5bc:	bf08      	it	eq
     5be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     5c2:	f150 0000 	adcs.w	r0, r0, #0
     5c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     5ca:	bd70      	pop	{r4, r5, r6, pc}
     5cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     5d0:	ea46 0101 	orr.w	r1, r6, r1
     5d4:	ea40 0002 	orr.w	r0, r0, r2
     5d8:	ea81 0103 	eor.w	r1, r1, r3
     5dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     5e0:	bfc2      	ittt	gt
     5e2:	ebd4 050c 	rsbsgt	r5, r4, ip
     5e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     5ea:	bd70      	popgt	{r4, r5, r6, pc}
     5ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     5f0:	f04f 0e00 	mov.w	lr, #0
     5f4:	3c01      	subs	r4, #1
     5f6:	f300 80ab 	bgt.w	750 <__aeabi_dmul+0x238>
     5fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
     5fe:	bfde      	ittt	le
     600:	2000      	movle	r0, #0
     602:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     606:	bd70      	pople	{r4, r5, r6, pc}
     608:	f1c4 0400 	rsb	r4, r4, #0
     60c:	3c20      	subs	r4, #32
     60e:	da35      	bge.n	67c <__aeabi_dmul+0x164>
     610:	340c      	adds	r4, #12
     612:	dc1b      	bgt.n	64c <__aeabi_dmul+0x134>
     614:	f104 0414 	add.w	r4, r4, #20
     618:	f1c4 0520 	rsb	r5, r4, #32
     61c:	fa00 f305 	lsl.w	r3, r0, r5
     620:	fa20 f004 	lsr.w	r0, r0, r4
     624:	fa01 f205 	lsl.w	r2, r1, r5
     628:	ea40 0002 	orr.w	r0, r0, r2
     62c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     630:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     634:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     638:	fa21 f604 	lsr.w	r6, r1, r4
     63c:	eb42 0106 	adc.w	r1, r2, r6
     640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     644:	bf08      	it	eq
     646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     64a:	bd70      	pop	{r4, r5, r6, pc}
     64c:	f1c4 040c 	rsb	r4, r4, #12
     650:	f1c4 0520 	rsb	r5, r4, #32
     654:	fa00 f304 	lsl.w	r3, r0, r4
     658:	fa20 f005 	lsr.w	r0, r0, r5
     65c:	fa01 f204 	lsl.w	r2, r1, r4
     660:	ea40 0002 	orr.w	r0, r0, r2
     664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     668:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     66c:	f141 0100 	adc.w	r1, r1, #0
     670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     674:	bf08      	it	eq
     676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     67a:	bd70      	pop	{r4, r5, r6, pc}
     67c:	f1c4 0520 	rsb	r5, r4, #32
     680:	fa00 f205 	lsl.w	r2, r0, r5
     684:	ea4e 0e02 	orr.w	lr, lr, r2
     688:	fa20 f304 	lsr.w	r3, r0, r4
     68c:	fa01 f205 	lsl.w	r2, r1, r5
     690:	ea43 0302 	orr.w	r3, r3, r2
     694:	fa21 f004 	lsr.w	r0, r1, r4
     698:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     69c:	fa21 f204 	lsr.w	r2, r1, r4
     6a0:	ea20 0002 	bic.w	r0, r0, r2
     6a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     6a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     6ac:	bf08      	it	eq
     6ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     6b2:	bd70      	pop	{r4, r5, r6, pc}
     6b4:	f094 0f00 	teq	r4, #0
     6b8:	d10f      	bne.n	6da <__aeabi_dmul+0x1c2>
     6ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     6be:	0040      	lsls	r0, r0, #1
     6c0:	eb41 0101 	adc.w	r1, r1, r1
     6c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     6c8:	bf08      	it	eq
     6ca:	3c01      	subeq	r4, #1
     6cc:	d0f7      	beq.n	6be <__aeabi_dmul+0x1a6>
     6ce:	ea41 0106 	orr.w	r1, r1, r6
     6d2:	f095 0f00 	teq	r5, #0
     6d6:	bf18      	it	ne
     6d8:	4770      	bxne	lr
     6da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     6de:	0052      	lsls	r2, r2, #1
     6e0:	eb43 0303 	adc.w	r3, r3, r3
     6e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     6e8:	bf08      	it	eq
     6ea:	3d01      	subeq	r5, #1
     6ec:	d0f7      	beq.n	6de <__aeabi_dmul+0x1c6>
     6ee:	ea43 0306 	orr.w	r3, r3, r6
     6f2:	4770      	bx	lr
     6f4:	ea94 0f0c 	teq	r4, ip
     6f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     6fc:	bf18      	it	ne
     6fe:	ea95 0f0c 	teqne	r5, ip
     702:	d00c      	beq.n	71e <__aeabi_dmul+0x206>
     704:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     708:	bf18      	it	ne
     70a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     70e:	d1d1      	bne.n	6b4 <__aeabi_dmul+0x19c>
     710:	ea81 0103 	eor.w	r1, r1, r3
     714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     718:	f04f 0000 	mov.w	r0, #0
     71c:	bd70      	pop	{r4, r5, r6, pc}
     71e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     722:	bf06      	itte	eq
     724:	4610      	moveq	r0, r2
     726:	4619      	moveq	r1, r3
     728:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     72c:	d019      	beq.n	762 <__aeabi_dmul+0x24a>
     72e:	ea94 0f0c 	teq	r4, ip
     732:	d102      	bne.n	73a <__aeabi_dmul+0x222>
     734:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     738:	d113      	bne.n	762 <__aeabi_dmul+0x24a>
     73a:	ea95 0f0c 	teq	r5, ip
     73e:	d105      	bne.n	74c <__aeabi_dmul+0x234>
     740:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     744:	bf1c      	itt	ne
     746:	4610      	movne	r0, r2
     748:	4619      	movne	r1, r3
     74a:	d10a      	bne.n	762 <__aeabi_dmul+0x24a>
     74c:	ea81 0103 	eor.w	r1, r1, r3
     750:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     754:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     758:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     75c:	f04f 0000 	mov.w	r0, #0
     760:	bd70      	pop	{r4, r5, r6, pc}
     762:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     766:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     76a:	bd70      	pop	{r4, r5, r6, pc}

0000076c <__aeabi_ddiv>:
     76c:	b570      	push	{r4, r5, r6, lr}
     76e:	f04f 0cff 	mov.w	ip, #255	; 0xff
     772:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     776:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     77a:	bf1d      	ittte	ne
     77c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     780:	ea94 0f0c 	teqne	r4, ip
     784:	ea95 0f0c 	teqne	r5, ip
     788:	f000 f8a7 	bleq	8da <CONFIG_ISR_STACK_SIZE+0xda>
     78c:	eba4 0405 	sub.w	r4, r4, r5
     790:	ea81 0e03 	eor.w	lr, r1, r3
     794:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     798:	ea4f 3101 	mov.w	r1, r1, lsl #12
     79c:	f000 8088 	beq.w	8b0 <CONFIG_ISR_STACK_SIZE+0xb0>
     7a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
     7a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     7a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     7ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     7b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
     7b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     7b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     7bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
     7c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     7c4:	429d      	cmp	r5, r3
     7c6:	bf08      	it	eq
     7c8:	4296      	cmpeq	r6, r2
     7ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     7ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
     7d2:	d202      	bcs.n	7da <__aeabi_ddiv+0x6e>
     7d4:	085b      	lsrs	r3, r3, #1
     7d6:	ea4f 0232 	mov.w	r2, r2, rrx
     7da:	1ab6      	subs	r6, r6, r2
     7dc:	eb65 0503 	sbc.w	r5, r5, r3
     7e0:	085b      	lsrs	r3, r3, #1
     7e2:	ea4f 0232 	mov.w	r2, r2, rrx
     7e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     7ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     7ee:	ebb6 0e02 	subs.w	lr, r6, r2
     7f2:	eb75 0e03 	sbcs.w	lr, r5, r3
     7f6:	bf22      	ittt	cs
     7f8:	1ab6      	subcs	r6, r6, r2
     7fa:	4675      	movcs	r5, lr
     7fc:	ea40 000c 	orrcs.w	r0, r0, ip
     800:	085b      	lsrs	r3, r3, #1
     802:	ea4f 0232 	mov.w	r2, r2, rrx
     806:	ebb6 0e02 	subs.w	lr, r6, r2
     80a:	eb75 0e03 	sbcs.w	lr, r5, r3
     80e:	bf22      	ittt	cs
     810:	1ab6      	subcs	r6, r6, r2
     812:	4675      	movcs	r5, lr
     814:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     818:	085b      	lsrs	r3, r3, #1
     81a:	ea4f 0232 	mov.w	r2, r2, rrx
     81e:	ebb6 0e02 	subs.w	lr, r6, r2
     822:	eb75 0e03 	sbcs.w	lr, r5, r3
     826:	bf22      	ittt	cs
     828:	1ab6      	subcs	r6, r6, r2
     82a:	4675      	movcs	r5, lr
     82c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     830:	085b      	lsrs	r3, r3, #1
     832:	ea4f 0232 	mov.w	r2, r2, rrx
     836:	ebb6 0e02 	subs.w	lr, r6, r2
     83a:	eb75 0e03 	sbcs.w	lr, r5, r3
     83e:	bf22      	ittt	cs
     840:	1ab6      	subcs	r6, r6, r2
     842:	4675      	movcs	r5, lr
     844:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     848:	ea55 0e06 	orrs.w	lr, r5, r6
     84c:	d018      	beq.n	880 <CONFIG_ISR_STACK_SIZE+0x80>
     84e:	ea4f 1505 	mov.w	r5, r5, lsl #4
     852:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     856:	ea4f 1606 	mov.w	r6, r6, lsl #4
     85a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     85e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     862:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     866:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     86a:	d1c0      	bne.n	7ee <__aeabi_ddiv+0x82>
     86c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     870:	d10b      	bne.n	88a <CONFIG_ISR_STACK_SIZE+0x8a>
     872:	ea41 0100 	orr.w	r1, r1, r0
     876:	f04f 0000 	mov.w	r0, #0
     87a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     87e:	e7b6      	b.n	7ee <__aeabi_ddiv+0x82>
     880:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     884:	bf04      	itt	eq
     886:	4301      	orreq	r1, r0
     888:	2000      	moveq	r0, #0
     88a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     88e:	bf88      	it	hi
     890:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     894:	f63f aeaf 	bhi.w	5f6 <__aeabi_dmul+0xde>
     898:	ebb5 0c03 	subs.w	ip, r5, r3
     89c:	bf04      	itt	eq
     89e:	ebb6 0c02 	subseq.w	ip, r6, r2
     8a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     8a6:	f150 0000 	adcs.w	r0, r0, #0
     8aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     8ae:	bd70      	pop	{r4, r5, r6, pc}
     8b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     8b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     8b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     8bc:	bfc2      	ittt	gt
     8be:	ebd4 050c 	rsbsgt	r5, r4, ip
     8c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     8c6:	bd70      	popgt	{r4, r5, r6, pc}
     8c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     8cc:	f04f 0e00 	mov.w	lr, #0
     8d0:	3c01      	subs	r4, #1
     8d2:	e690      	b.n	5f6 <__aeabi_dmul+0xde>
     8d4:	ea45 0e06 	orr.w	lr, r5, r6
     8d8:	e68d      	b.n	5f6 <__aeabi_dmul+0xde>
     8da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     8de:	ea94 0f0c 	teq	r4, ip
     8e2:	bf08      	it	eq
     8e4:	ea95 0f0c 	teqeq	r5, ip
     8e8:	f43f af3b 	beq.w	762 <__aeabi_dmul+0x24a>
     8ec:	ea94 0f0c 	teq	r4, ip
     8f0:	d10a      	bne.n	908 <CONFIG_ISR_STACK_SIZE+0x108>
     8f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     8f6:	f47f af34 	bne.w	762 <__aeabi_dmul+0x24a>
     8fa:	ea95 0f0c 	teq	r5, ip
     8fe:	f47f af25 	bne.w	74c <__aeabi_dmul+0x234>
     902:	4610      	mov	r0, r2
     904:	4619      	mov	r1, r3
     906:	e72c      	b.n	762 <__aeabi_dmul+0x24a>
     908:	ea95 0f0c 	teq	r5, ip
     90c:	d106      	bne.n	91c <CONFIG_ISR_STACK_SIZE+0x11c>
     90e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     912:	f43f aefd 	beq.w	710 <__aeabi_dmul+0x1f8>
     916:	4610      	mov	r0, r2
     918:	4619      	mov	r1, r3
     91a:	e722      	b.n	762 <__aeabi_dmul+0x24a>
     91c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     920:	bf18      	it	ne
     922:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     926:	f47f aec5 	bne.w	6b4 <__aeabi_dmul+0x19c>
     92a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     92e:	f47f af0d 	bne.w	74c <__aeabi_dmul+0x234>
     932:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     936:	f47f aeeb 	bne.w	710 <__aeabi_dmul+0x1f8>
     93a:	e712      	b.n	762 <__aeabi_dmul+0x24a>

0000093c <__aeabi_d2iz>:
     93c:	ea4f 0241 	mov.w	r2, r1, lsl #1
     940:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     944:	d215      	bcs.n	972 <__aeabi_d2iz+0x36>
     946:	d511      	bpl.n	96c <__aeabi_d2iz+0x30>
     948:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     94c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     950:	d912      	bls.n	978 <__aeabi_d2iz+0x3c>
     952:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     956:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     95a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     95e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     962:	fa23 f002 	lsr.w	r0, r3, r2
     966:	bf18      	it	ne
     968:	4240      	negne	r0, r0
     96a:	4770      	bx	lr
     96c:	f04f 0000 	mov.w	r0, #0
     970:	4770      	bx	lr
     972:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     976:	d105      	bne.n	984 <__aeabi_d2iz+0x48>
     978:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
     97c:	bf08      	it	eq
     97e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     982:	4770      	bx	lr
     984:	f04f 0000 	mov.w	r0, #0
     988:	4770      	bx	lr
     98a:	bf00      	nop

0000098c <__aeabi_d2uiz>:
     98c:	004a      	lsls	r2, r1, #1
     98e:	d211      	bcs.n	9b4 <__aeabi_d2uiz+0x28>
     990:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     994:	d211      	bcs.n	9ba <__aeabi_d2uiz+0x2e>
     996:	d50d      	bpl.n	9b4 <__aeabi_d2uiz+0x28>
     998:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     99c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     9a0:	d40e      	bmi.n	9c0 <__aeabi_d2uiz+0x34>
     9a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     9a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     9aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     9ae:	fa23 f002 	lsr.w	r0, r3, r2
     9b2:	4770      	bx	lr
     9b4:	f04f 0000 	mov.w	r0, #0
     9b8:	4770      	bx	lr
     9ba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     9be:	d102      	bne.n	9c6 <__aeabi_d2uiz+0x3a>
     9c0:	f04f 30ff 	mov.w	r0, #4294967295
     9c4:	4770      	bx	lr
     9c6:	f04f 0000 	mov.w	r0, #0
     9ca:	4770      	bx	lr

000009cc <__aeabi_f2iz>:
     9cc:	ea4f 0240 	mov.w	r2, r0, lsl #1
     9d0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
     9d4:	d30f      	bcc.n	9f6 <__aeabi_f2iz+0x2a>
     9d6:	f04f 039e 	mov.w	r3, #158	; 0x9e
     9da:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
     9de:	d90d      	bls.n	9fc <__aeabi_f2iz+0x30>
     9e0:	ea4f 2300 	mov.w	r3, r0, lsl #8
     9e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     9e8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     9ec:	fa23 f002 	lsr.w	r0, r3, r2
     9f0:	bf18      	it	ne
     9f2:	4240      	negne	r0, r0
     9f4:	4770      	bx	lr
     9f6:	f04f 0000 	mov.w	r0, #0
     9fa:	4770      	bx	lr
     9fc:	f112 0f61 	cmn.w	r2, #97	; 0x61
     a00:	d101      	bne.n	a06 <__aeabi_f2iz+0x3a>
     a02:	0242      	lsls	r2, r0, #9
     a04:	d105      	bne.n	a12 <__aeabi_f2iz+0x46>
     a06:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
     a0a:	bf08      	it	eq
     a0c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     a10:	4770      	bx	lr
     a12:	f04f 0000 	mov.w	r0, #0
     a16:	4770      	bx	lr

00000a18 <__aeabi_ldivmod>:
     a18:	b97b      	cbnz	r3, a3a <__aeabi_ldivmod+0x22>
     a1a:	b972      	cbnz	r2, a3a <__aeabi_ldivmod+0x22>
     a1c:	2900      	cmp	r1, #0
     a1e:	bfbe      	ittt	lt
     a20:	2000      	movlt	r0, #0
     a22:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
     a26:	e006      	blt.n	a36 <__aeabi_ldivmod+0x1e>
     a28:	bf08      	it	eq
     a2a:	2800      	cmpeq	r0, #0
     a2c:	bf1c      	itt	ne
     a2e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
     a32:	f04f 30ff 	movne.w	r0, #4294967295
     a36:	f000 b9b7 	b.w	da8 <__aeabi_idiv0>
     a3a:	f1ad 0c08 	sub.w	ip, sp, #8
     a3e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     a42:	2900      	cmp	r1, #0
     a44:	db09      	blt.n	a5a <__aeabi_ldivmod+0x42>
     a46:	2b00      	cmp	r3, #0
     a48:	db1a      	blt.n	a80 <__aeabi_ldivmod+0x68>
     a4a:	f000 f84d 	bl	ae8 <__udivmoddi4>
     a4e:	f8dd e004 	ldr.w	lr, [sp, #4]
     a52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     a56:	b004      	add	sp, #16
     a58:	4770      	bx	lr
     a5a:	4240      	negs	r0, r0
     a5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     a60:	2b00      	cmp	r3, #0
     a62:	db1b      	blt.n	a9c <__aeabi_ldivmod+0x84>
     a64:	f000 f840 	bl	ae8 <__udivmoddi4>
     a68:	f8dd e004 	ldr.w	lr, [sp, #4]
     a6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     a70:	b004      	add	sp, #16
     a72:	4240      	negs	r0, r0
     a74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     a78:	4252      	negs	r2, r2
     a7a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     a7e:	4770      	bx	lr
     a80:	4252      	negs	r2, r2
     a82:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     a86:	f000 f82f 	bl	ae8 <__udivmoddi4>
     a8a:	f8dd e004 	ldr.w	lr, [sp, #4]
     a8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     a92:	b004      	add	sp, #16
     a94:	4240      	negs	r0, r0
     a96:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     a9a:	4770      	bx	lr
     a9c:	4252      	negs	r2, r2
     a9e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     aa2:	f000 f821 	bl	ae8 <__udivmoddi4>
     aa6:	f8dd e004 	ldr.w	lr, [sp, #4]
     aaa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     aae:	b004      	add	sp, #16
     ab0:	4252      	negs	r2, r2
     ab2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     ab6:	4770      	bx	lr

00000ab8 <__aeabi_uldivmod>:
     ab8:	b953      	cbnz	r3, ad0 <__aeabi_uldivmod+0x18>
     aba:	b94a      	cbnz	r2, ad0 <__aeabi_uldivmod+0x18>
     abc:	2900      	cmp	r1, #0
     abe:	bf08      	it	eq
     ac0:	2800      	cmpeq	r0, #0
     ac2:	bf1c      	itt	ne
     ac4:	f04f 31ff 	movne.w	r1, #4294967295
     ac8:	f04f 30ff 	movne.w	r0, #4294967295
     acc:	f000 b96c 	b.w	da8 <__aeabi_idiv0>
     ad0:	f1ad 0c08 	sub.w	ip, sp, #8
     ad4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     ad8:	f000 f806 	bl	ae8 <__udivmoddi4>
     adc:	f8dd e004 	ldr.w	lr, [sp, #4]
     ae0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     ae4:	b004      	add	sp, #16
     ae6:	4770      	bx	lr

00000ae8 <__udivmoddi4>:
     ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     aec:	9e08      	ldr	r6, [sp, #32]
     aee:	460d      	mov	r5, r1
     af0:	4604      	mov	r4, r0
     af2:	468e      	mov	lr, r1
     af4:	2b00      	cmp	r3, #0
     af6:	f040 8082 	bne.w	bfe <__udivmoddi4+0x116>
     afa:	428a      	cmp	r2, r1
     afc:	4617      	mov	r7, r2
     afe:	d946      	bls.n	b8e <__udivmoddi4+0xa6>
     b00:	fab2 f282 	clz	r2, r2
     b04:	b14a      	cbz	r2, b1a <__udivmoddi4+0x32>
     b06:	f1c2 0120 	rsb	r1, r2, #32
     b0a:	fa05 f302 	lsl.w	r3, r5, r2
     b0e:	fa20 f101 	lsr.w	r1, r0, r1
     b12:	4097      	lsls	r7, r2
     b14:	ea41 0e03 	orr.w	lr, r1, r3
     b18:	4094      	lsls	r4, r2
     b1a:	ea4f 4817 	mov.w	r8, r7, lsr #16
     b1e:	0c23      	lsrs	r3, r4, #16
     b20:	fbbe fcf8 	udiv	ip, lr, r8
     b24:	b2b9      	uxth	r1, r7
     b26:	fb08 ee1c 	mls	lr, r8, ip, lr
     b2a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     b2e:	fb0c f001 	mul.w	r0, ip, r1
     b32:	4298      	cmp	r0, r3
     b34:	d90a      	bls.n	b4c <__udivmoddi4+0x64>
     b36:	18fb      	adds	r3, r7, r3
     b38:	f10c 35ff 	add.w	r5, ip, #4294967295
     b3c:	f080 8116 	bcs.w	d6c <__udivmoddi4+0x284>
     b40:	4298      	cmp	r0, r3
     b42:	f240 8113 	bls.w	d6c <__udivmoddi4+0x284>
     b46:	f1ac 0c02 	sub.w	ip, ip, #2
     b4a:	443b      	add	r3, r7
     b4c:	1a1b      	subs	r3, r3, r0
     b4e:	b2a4      	uxth	r4, r4
     b50:	fbb3 f0f8 	udiv	r0, r3, r8
     b54:	fb08 3310 	mls	r3, r8, r0, r3
     b58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     b5c:	fb00 f101 	mul.w	r1, r0, r1
     b60:	42a1      	cmp	r1, r4
     b62:	d909      	bls.n	b78 <__udivmoddi4+0x90>
     b64:	193c      	adds	r4, r7, r4
     b66:	f100 33ff 	add.w	r3, r0, #4294967295
     b6a:	f080 8101 	bcs.w	d70 <__udivmoddi4+0x288>
     b6e:	42a1      	cmp	r1, r4
     b70:	f240 80fe 	bls.w	d70 <__udivmoddi4+0x288>
     b74:	3802      	subs	r0, #2
     b76:	443c      	add	r4, r7
     b78:	1a64      	subs	r4, r4, r1
     b7a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     b7e:	2100      	movs	r1, #0
     b80:	b11e      	cbz	r6, b8a <__udivmoddi4+0xa2>
     b82:	40d4      	lsrs	r4, r2
     b84:	2300      	movs	r3, #0
     b86:	e9c6 4300 	strd	r4, r3, [r6]
     b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     b8e:	b902      	cbnz	r2, b92 <__udivmoddi4+0xaa>
     b90:	deff      	udf	#255	; 0xff
     b92:	fab2 f282 	clz	r2, r2
     b96:	2a00      	cmp	r2, #0
     b98:	d14f      	bne.n	c3a <__udivmoddi4+0x152>
     b9a:	1bcb      	subs	r3, r1, r7
     b9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     ba0:	fa1f f887 	uxth.w	r8, r7
     ba4:	2101      	movs	r1, #1
     ba6:	fbb3 fcfe 	udiv	ip, r3, lr
     baa:	0c25      	lsrs	r5, r4, #16
     bac:	fb0e 331c 	mls	r3, lr, ip, r3
     bb0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     bb4:	fb08 f30c 	mul.w	r3, r8, ip
     bb8:	42ab      	cmp	r3, r5
     bba:	d907      	bls.n	bcc <__udivmoddi4+0xe4>
     bbc:	197d      	adds	r5, r7, r5
     bbe:	f10c 30ff 	add.w	r0, ip, #4294967295
     bc2:	d202      	bcs.n	bca <__udivmoddi4+0xe2>
     bc4:	42ab      	cmp	r3, r5
     bc6:	f200 80e7 	bhi.w	d98 <__udivmoddi4+0x2b0>
     bca:	4684      	mov	ip, r0
     bcc:	1aed      	subs	r5, r5, r3
     bce:	b2a3      	uxth	r3, r4
     bd0:	fbb5 f0fe 	udiv	r0, r5, lr
     bd4:	fb0e 5510 	mls	r5, lr, r0, r5
     bd8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     bdc:	fb08 f800 	mul.w	r8, r8, r0
     be0:	45a0      	cmp	r8, r4
     be2:	d907      	bls.n	bf4 <__udivmoddi4+0x10c>
     be4:	193c      	adds	r4, r7, r4
     be6:	f100 33ff 	add.w	r3, r0, #4294967295
     bea:	d202      	bcs.n	bf2 <__udivmoddi4+0x10a>
     bec:	45a0      	cmp	r8, r4
     bee:	f200 80d7 	bhi.w	da0 <__udivmoddi4+0x2b8>
     bf2:	4618      	mov	r0, r3
     bf4:	eba4 0408 	sub.w	r4, r4, r8
     bf8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     bfc:	e7c0      	b.n	b80 <__udivmoddi4+0x98>
     bfe:	428b      	cmp	r3, r1
     c00:	d908      	bls.n	c14 <__udivmoddi4+0x12c>
     c02:	2e00      	cmp	r6, #0
     c04:	f000 80af 	beq.w	d66 <__udivmoddi4+0x27e>
     c08:	2100      	movs	r1, #0
     c0a:	e9c6 0500 	strd	r0, r5, [r6]
     c0e:	4608      	mov	r0, r1
     c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     c14:	fab3 f183 	clz	r1, r3
     c18:	2900      	cmp	r1, #0
     c1a:	d14b      	bne.n	cb4 <__udivmoddi4+0x1cc>
     c1c:	42ab      	cmp	r3, r5
     c1e:	d302      	bcc.n	c26 <__udivmoddi4+0x13e>
     c20:	4282      	cmp	r2, r0
     c22:	f200 80b7 	bhi.w	d94 <__udivmoddi4+0x2ac>
     c26:	1a84      	subs	r4, r0, r2
     c28:	eb65 0303 	sbc.w	r3, r5, r3
     c2c:	2001      	movs	r0, #1
     c2e:	469e      	mov	lr, r3
     c30:	2e00      	cmp	r6, #0
     c32:	d0aa      	beq.n	b8a <__udivmoddi4+0xa2>
     c34:	e9c6 4e00 	strd	r4, lr, [r6]
     c38:	e7a7      	b.n	b8a <__udivmoddi4+0xa2>
     c3a:	f1c2 0c20 	rsb	ip, r2, #32
     c3e:	fa01 f302 	lsl.w	r3, r1, r2
     c42:	4097      	lsls	r7, r2
     c44:	fa20 f00c 	lsr.w	r0, r0, ip
     c48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     c4c:	fa21 fc0c 	lsr.w	ip, r1, ip
     c50:	4318      	orrs	r0, r3
     c52:	fbbc f1fe 	udiv	r1, ip, lr
     c56:	0c05      	lsrs	r5, r0, #16
     c58:	fb0e cc11 	mls	ip, lr, r1, ip
     c5c:	fa1f f887 	uxth.w	r8, r7
     c60:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     c64:	fb01 f308 	mul.w	r3, r1, r8
     c68:	42ab      	cmp	r3, r5
     c6a:	fa04 f402 	lsl.w	r4, r4, r2
     c6e:	d909      	bls.n	c84 <__udivmoddi4+0x19c>
     c70:	197d      	adds	r5, r7, r5
     c72:	f101 3cff 	add.w	ip, r1, #4294967295
     c76:	f080 808b 	bcs.w	d90 <__udivmoddi4+0x2a8>
     c7a:	42ab      	cmp	r3, r5
     c7c:	f240 8088 	bls.w	d90 <__udivmoddi4+0x2a8>
     c80:	3902      	subs	r1, #2
     c82:	443d      	add	r5, r7
     c84:	1aeb      	subs	r3, r5, r3
     c86:	b285      	uxth	r5, r0
     c88:	fbb3 f0fe 	udiv	r0, r3, lr
     c8c:	fb0e 3310 	mls	r3, lr, r0, r3
     c90:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     c94:	fb00 f308 	mul.w	r3, r0, r8
     c98:	42ab      	cmp	r3, r5
     c9a:	d907      	bls.n	cac <__udivmoddi4+0x1c4>
     c9c:	197d      	adds	r5, r7, r5
     c9e:	f100 3cff 	add.w	ip, r0, #4294967295
     ca2:	d271      	bcs.n	d88 <__udivmoddi4+0x2a0>
     ca4:	42ab      	cmp	r3, r5
     ca6:	d96f      	bls.n	d88 <__udivmoddi4+0x2a0>
     ca8:	3802      	subs	r0, #2
     caa:	443d      	add	r5, r7
     cac:	1aeb      	subs	r3, r5, r3
     cae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     cb2:	e778      	b.n	ba6 <__udivmoddi4+0xbe>
     cb4:	f1c1 0c20 	rsb	ip, r1, #32
     cb8:	408b      	lsls	r3, r1
     cba:	fa22 f70c 	lsr.w	r7, r2, ip
     cbe:	431f      	orrs	r7, r3
     cc0:	fa20 f40c 	lsr.w	r4, r0, ip
     cc4:	fa05 f301 	lsl.w	r3, r5, r1
     cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     ccc:	fa25 f50c 	lsr.w	r5, r5, ip
     cd0:	431c      	orrs	r4, r3
     cd2:	0c23      	lsrs	r3, r4, #16
     cd4:	fbb5 f9fe 	udiv	r9, r5, lr
     cd8:	fa1f f887 	uxth.w	r8, r7
     cdc:	fb0e 5519 	mls	r5, lr, r9, r5
     ce0:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     ce4:	fb09 fa08 	mul.w	sl, r9, r8
     ce8:	45aa      	cmp	sl, r5
     cea:	fa02 f201 	lsl.w	r2, r2, r1
     cee:	fa00 f301 	lsl.w	r3, r0, r1
     cf2:	d908      	bls.n	d06 <__udivmoddi4+0x21e>
     cf4:	197d      	adds	r5, r7, r5
     cf6:	f109 30ff 	add.w	r0, r9, #4294967295
     cfa:	d247      	bcs.n	d8c <__udivmoddi4+0x2a4>
     cfc:	45aa      	cmp	sl, r5
     cfe:	d945      	bls.n	d8c <__udivmoddi4+0x2a4>
     d00:	f1a9 0902 	sub.w	r9, r9, #2
     d04:	443d      	add	r5, r7
     d06:	eba5 050a 	sub.w	r5, r5, sl
     d0a:	b2a4      	uxth	r4, r4
     d0c:	fbb5 f0fe 	udiv	r0, r5, lr
     d10:	fb0e 5510 	mls	r5, lr, r0, r5
     d14:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     d18:	fb00 f808 	mul.w	r8, r0, r8
     d1c:	45a0      	cmp	r8, r4
     d1e:	d907      	bls.n	d30 <__udivmoddi4+0x248>
     d20:	193c      	adds	r4, r7, r4
     d22:	f100 35ff 	add.w	r5, r0, #4294967295
     d26:	d22d      	bcs.n	d84 <__udivmoddi4+0x29c>
     d28:	45a0      	cmp	r8, r4
     d2a:	d92b      	bls.n	d84 <__udivmoddi4+0x29c>
     d2c:	3802      	subs	r0, #2
     d2e:	443c      	add	r4, r7
     d30:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     d34:	eba4 0408 	sub.w	r4, r4, r8
     d38:	fba0 8902 	umull	r8, r9, r0, r2
     d3c:	454c      	cmp	r4, r9
     d3e:	46c6      	mov	lr, r8
     d40:	464d      	mov	r5, r9
     d42:	d319      	bcc.n	d78 <__udivmoddi4+0x290>
     d44:	d016      	beq.n	d74 <__udivmoddi4+0x28c>
     d46:	b15e      	cbz	r6, d60 <__udivmoddi4+0x278>
     d48:	ebb3 020e 	subs.w	r2, r3, lr
     d4c:	eb64 0405 	sbc.w	r4, r4, r5
     d50:	fa04 fc0c 	lsl.w	ip, r4, ip
     d54:	40ca      	lsrs	r2, r1
     d56:	ea4c 0202 	orr.w	r2, ip, r2
     d5a:	40cc      	lsrs	r4, r1
     d5c:	e9c6 2400 	strd	r2, r4, [r6]
     d60:	2100      	movs	r1, #0
     d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     d66:	4631      	mov	r1, r6
     d68:	4630      	mov	r0, r6
     d6a:	e70e      	b.n	b8a <__udivmoddi4+0xa2>
     d6c:	46ac      	mov	ip, r5
     d6e:	e6ed      	b.n	b4c <__udivmoddi4+0x64>
     d70:	4618      	mov	r0, r3
     d72:	e701      	b.n	b78 <__udivmoddi4+0x90>
     d74:	4543      	cmp	r3, r8
     d76:	d2e6      	bcs.n	d46 <__udivmoddi4+0x25e>
     d78:	ebb8 0e02 	subs.w	lr, r8, r2
     d7c:	eb69 0507 	sbc.w	r5, r9, r7
     d80:	3801      	subs	r0, #1
     d82:	e7e0      	b.n	d46 <__udivmoddi4+0x25e>
     d84:	4628      	mov	r0, r5
     d86:	e7d3      	b.n	d30 <__udivmoddi4+0x248>
     d88:	4660      	mov	r0, ip
     d8a:	e78f      	b.n	cac <__udivmoddi4+0x1c4>
     d8c:	4681      	mov	r9, r0
     d8e:	e7ba      	b.n	d06 <__udivmoddi4+0x21e>
     d90:	4661      	mov	r1, ip
     d92:	e777      	b.n	c84 <__udivmoddi4+0x19c>
     d94:	4608      	mov	r0, r1
     d96:	e74b      	b.n	c30 <__udivmoddi4+0x148>
     d98:	f1ac 0c02 	sub.w	ip, ip, #2
     d9c:	443d      	add	r5, r7
     d9e:	e715      	b.n	bcc <__udivmoddi4+0xe4>
     da0:	3802      	subs	r0, #2
     da2:	443c      	add	r4, r7
     da4:	e726      	b.n	bf4 <__udivmoddi4+0x10c>
     da6:	bf00      	nop

00000da8 <__aeabi_idiv0>:
     da8:	4770      	bx	lr
     daa:	bf00      	nop

00000dac <strcmp>:
     dac:	f810 2b01 	ldrb.w	r2, [r0], #1
     db0:	f811 3b01 	ldrb.w	r3, [r1], #1
     db4:	2a01      	cmp	r2, #1
     db6:	bf28      	it	cs
     db8:	429a      	cmpcs	r2, r3
     dba:	d0f7      	beq.n	dac <strcmp>
     dbc:	1ad0      	subs	r0, r2, r3
     dbe:	4770      	bx	lr

00000dc0 <strlen>:
     dc0:	4603      	mov	r3, r0
     dc2:	f813 2b01 	ldrb.w	r2, [r3], #1
     dc6:	2a00      	cmp	r2, #0
     dc8:	d1fb      	bne.n	dc2 <strlen+0x2>
     dca:	1a18      	subs	r0, r3, r0
     dcc:	3801      	subs	r0, #1
     dce:	4770      	bx	lr

00000dd0 <lora_config.constprop.0>:
			      struct lora_modem_config *config)
{
	const struct lora_driver_api *api =
		(const struct lora_driver_api *)dev->api;

	return api->config(dev, config);
     dd0:	6883      	ldr	r3, [r0, #8]
     dd2:	4901      	ldr	r1, [pc, #4]	; (dd8 <lora_config.constprop.0+0x8>)
     dd4:	681b      	ldr	r3, [r3, #0]
     dd6:	4718      	bx	r3
     dd8:	2000052c 	.word	0x2000052c

00000ddc <szl_encode_uleb128>:
 * Encode an unsigned LEB128 encoded datum. The algorithm is taken
 * from Appendix C of the DWARF 3 spec. For information on the
 * encodings refer to section "7.6 - Variable Length Data". Return
 * the number of bytes written.
 */
size_t szl_encode_uleb128(uint64_t val, uint8_t * dst){
     ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
     dde:	460d      	mov	r5, r1
     de0:	490d      	ldr	r1, [pc, #52]	; (e18 <szl_encode_uleb128+0x3c>)
     de2:	4604      	mov	r4, r0
	static uint8_t count;
	static uint8_t byte;
  count = 0;
     de4:	2000      	movs	r0, #0
	do {
		byte = val & 0x7f;
		val >>= 7;
     de6:	09e6      	lsrs	r6, r4, #7
     de8:	ea46 6645 	orr.w	r6, r6, r5, lsl #25
     dec:	09ef      	lsrs	r7, r5, #7
		byte = val & 0x7f;
     dee:	f004 037f 	and.w	r3, r4, #127	; 0x7f
		val >>= 7;
     df2:	463d      	mov	r5, r7
     df4:	4634      	mov	r4, r6

		if (val != 0)
     df6:	ea54 0605 	orrs.w	r6, r4, r5
		byte |= 0x80;  // mark this byte to show that more bytes will follow
     dfa:	bf18      	it	ne
     dfc:	f063 037f 	ornne	r3, r3, #127	; 0x7f
     e00:	700b      	strb	r3, [r1, #0]
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
     e02:	780b      	ldrb	r3, [r1, #0]
     e04:	5413      	strb	r3, [r2, r0]

		memcpy(dst+count,&byte,1);

		count++;
     e06:	3001      	adds	r0, #1
  	} while (val != 0);
     e08:	ea54 0305 	orrs.w	r3, r4, r5
		count++;
     e0c:	b2c0      	uxtb	r0, r0
  	} while (val != 0);
     e0e:	d1ea      	bne.n	de6 <szl_encode_uleb128+0xa>
     e10:	4b02      	ldr	r3, [pc, #8]	; (e1c <szl_encode_uleb128+0x40>)
     e12:	7018      	strb	r0, [r3, #0]
	return count;
}
     e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e16:	bf00      	nop
     e18:	20001036 	.word	0x20001036
     e1c:	20001037 	.word	0x20001037

00000e20 <sponge_encode>:
/**
 * Encode the buffer with sponge
 * @buffer: buffer to encode into
 * @ret: size of encoded bytes
 */
int sponge_encode(uint8_t *buffer) {
     e20:	b570      	push	{r4, r5, r6, lr}
    //Encode Message 
    int pos = 0;
    printk("Bitmask: %u\n",new_data_bitmask[0]); 
     e22:	4d2d      	ldr	r5, [pc, #180]	; (ed8 <sponge_encode+0xb8>)
int sponge_encode(uint8_t *buffer) {
     e24:	4606      	mov	r6, r0
    printk("Bitmask: %u\n",new_data_bitmask[0]); 
     e26:	7829      	ldrb	r1, [r5, #0]
     e28:	482c      	ldr	r0, [pc, #176]	; (edc <sponge_encode+0xbc>)
     e2a:	f019 fcad 	bl	1a788 <printk>
    pos += szl_encode_uleb128(new_data_bitmask[0],&buffer[pos]);
     e2e:	4632      	mov	r2, r6
     e30:	7828      	ldrb	r0, [r5, #0]
     e32:	2100      	movs	r1, #0
     e34:	f7ff ffd2 	bl	ddc <szl_encode_uleb128>
    if (new_data_bitmask[0] & (1 << 0))
     e38:	782b      	ldrb	r3, [r5, #0]
     e3a:	07da      	lsls	r2, r3, #31
    pos += szl_encode_uleb128(new_data_bitmask[0],&buffer[pos]);
     e3c:	4604      	mov	r4, r0
    if (new_data_bitmask[0] & (1 << 0))
     e3e:	d506      	bpl.n	e4e <sponge_encode+0x2e>
    {
      pos += szl_encode_uleb128(Smart_Meter_data.Strom_L1,&buffer[pos]);
     e40:	4b27      	ldr	r3, [pc, #156]	; (ee0 <sponge_encode+0xc0>)
     e42:	1832      	adds	r2, r6, r0
     e44:	2100      	movs	r1, #0
     e46:	8818      	ldrh	r0, [r3, #0]
     e48:	f7ff ffc8 	bl	ddc <szl_encode_uleb128>
     e4c:	4404      	add	r4, r0
    }
    if (new_data_bitmask[0] & (1 << 1))
     e4e:	782b      	ldrb	r3, [r5, #0]
     e50:	079b      	lsls	r3, r3, #30
     e52:	d506      	bpl.n	e62 <sponge_encode+0x42>
    {
      pos += szl_encode_uleb128(Smart_Meter_data.Strom_L2,&buffer[pos]);
     e54:	4b22      	ldr	r3, [pc, #136]	; (ee0 <sponge_encode+0xc0>)
     e56:	1932      	adds	r2, r6, r4
     e58:	8858      	ldrh	r0, [r3, #2]
     e5a:	2100      	movs	r1, #0
     e5c:	f7ff ffbe 	bl	ddc <szl_encode_uleb128>
     e60:	4404      	add	r4, r0
    }
    if (new_data_bitmask[0] & (1 << 2))
     e62:	782b      	ldrb	r3, [r5, #0]
     e64:	0758      	lsls	r0, r3, #29
     e66:	d506      	bpl.n	e76 <sponge_encode+0x56>
    {
      pos += szl_encode_uleb128(Smart_Meter_data.Strom_L3,&buffer[pos]);
     e68:	4b1d      	ldr	r3, [pc, #116]	; (ee0 <sponge_encode+0xc0>)
     e6a:	1932      	adds	r2, r6, r4
     e6c:	8898      	ldrh	r0, [r3, #4]
     e6e:	2100      	movs	r1, #0
     e70:	f7ff ffb4 	bl	ddc <szl_encode_uleb128>
     e74:	4404      	add	r4, r0
    }
    if (new_data_bitmask[0] & (1 << 3))
     e76:	782b      	ldrb	r3, [r5, #0]
     e78:	0719      	lsls	r1, r3, #28
     e7a:	d506      	bpl.n	e8a <sponge_encode+0x6a>
    {
      pos += szl_encode_uleb128(Smart_Meter_data.Wirkleistungsbezug,&buffer[pos]);
     e7c:	4b18      	ldr	r3, [pc, #96]	; (ee0 <sponge_encode+0xc0>)
     e7e:	1932      	adds	r2, r6, r4
     e80:	6898      	ldr	r0, [r3, #8]
     e82:	2100      	movs	r1, #0
     e84:	f7ff ffaa 	bl	ddc <szl_encode_uleb128>
     e88:	4404      	add	r4, r0
    }
    if (new_data_bitmask[0] & (1 << 4))
     e8a:	782b      	ldrb	r3, [r5, #0]
     e8c:	06da      	lsls	r2, r3, #27
     e8e:	d506      	bpl.n	e9e <sponge_encode+0x7e>
    {
      pos += szl_encode_uleb128(Smart_Meter_data.Wirkenergiebezug_Tarif_1,&buffer[pos]);
     e90:	4b13      	ldr	r3, [pc, #76]	; (ee0 <sponge_encode+0xc0>)
     e92:	1932      	adds	r2, r6, r4
     e94:	68d8      	ldr	r0, [r3, #12]
     e96:	2100      	movs	r1, #0
     e98:	f7ff ffa0 	bl	ddc <szl_encode_uleb128>
     e9c:	4404      	add	r4, r0
    }
    if (new_data_bitmask[0] & (1 << 5))
     e9e:	782b      	ldrb	r3, [r5, #0]
     ea0:	069b      	lsls	r3, r3, #26
     ea2:	d506      	bpl.n	eb2 <sponge_encode+0x92>
    {
      pos += szl_encode_uleb128(Smart_Meter_data.Wirkenergiebezug_Tarif_2,&buffer[pos]);
     ea4:	4b0e      	ldr	r3, [pc, #56]	; (ee0 <sponge_encode+0xc0>)
     ea6:	1932      	adds	r2, r6, r4
     ea8:	6918      	ldr	r0, [r3, #16]
     eaa:	2100      	movs	r1, #0
     eac:	f7ff ff96 	bl	ddc <szl_encode_uleb128>
     eb0:	4404      	add	r4, r0
    } 
    printk("Message Encoded Size: %u\n",pos);   
     eb2:	4621      	mov	r1, r4
     eb4:	480b      	ldr	r0, [pc, #44]	; (ee4 <sponge_encode+0xc4>)
     eb6:	f019 fc67 	bl	1a788 <printk>
    //Send LoRa 
    //k_sleep(K_MSEC(1000));
    //szl_lora_send((uint8_t *)"&buffer[0]", sizeof("&buffer[0]")-1);  
    //szl_lora_send(&buffer[0], (uint32_t) pos+1);
    //k_sleep(K_MSEC(1000));
    printk("Buffer Debug[0]: %u\n",buffer[0]); 
     eba:	7831      	ldrb	r1, [r6, #0]
     ebc:	480a      	ldr	r0, [pc, #40]	; (ee8 <sponge_encode+0xc8>)
     ebe:	f019 fc63 	bl	1a788 <printk>
    printk("Buffer Debug[1]: %u\n",buffer[1]);
     ec2:	7871      	ldrb	r1, [r6, #1]
     ec4:	4809      	ldr	r0, [pc, #36]	; (eec <sponge_encode+0xcc>)
     ec6:	f019 fc5f 	bl	1a788 <printk>
    printk("Buffer Debug[2]: %u\n",buffer[2]);
     eca:	78b1      	ldrb	r1, [r6, #2]
     ecc:	4808      	ldr	r0, [pc, #32]	; (ef0 <sponge_encode+0xd0>)
     ece:	f019 fc5b 	bl	1a788 <printk>
    return pos;
}
     ed2:	4620      	mov	r0, r4
     ed4:	bd70      	pop	{r4, r5, r6, pc}
     ed6:	bf00      	nop
     ed8:	20001137 	.word	0x20001137
     edc:	0001d37c 	.word	0x0001d37c
     ee0:	20000518 	.word	0x20000518
     ee4:	0001d389 	.word	0x0001d389
     ee8:	0001d3a3 	.word	0x0001d3a3
     eec:	0001d3b8 	.word	0x0001d3b8
     ef0:	0001d3cd 	.word	0x0001d3cd

00000ef4 <dlms_push_listener_init>:
{
  //Empty skeleton. This is added because server implementation needs this.
}

void dlms_push_listener_init(void)
{
     ef4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  console_init();
  BYTE_BUFFER_INIT(&frameData);
     ef6:	4c0d      	ldr	r4, [pc, #52]	; (f2c <dlms_push_listener_init+0x38>)
  console_init();
     ef8:	f005 f844 	bl	5f84 <console_init>
  BYTE_BUFFER_INIT(&frameData);
     efc:	4620      	mov	r0, r4
     efe:	f00b fe71 	bl	cbe4 <bb_init>
  //Set frame capacity.
  bb_capacity(&frameData, 512);
     f02:	f44f 7100 	mov.w	r1, #512	; 0x200
     f06:	4620      	mov	r0, r4
     f08:	f00b fe72 	bl	cbf0 <bb_capacity>
  reply_init(&data);
     f0c:	4808      	ldr	r0, [pc, #32]	; (f30 <dlms_push_listener_init+0x3c>)
     f0e:	f018 ffb0 	bl	19e72 <reply_init>
  //TODO: Parameters depend from the meter.
  cl_init(&settings, true, 13311, 1, DLMS_AUTHENTICATION_NONE, NULL, DLMS_INTERFACE_TYPE_HDLC);
     f12:	2300      	movs	r3, #0
     f14:	e9cd 3301 	strd	r3, r3, [sp, #4]
     f18:	9300      	str	r3, [sp, #0]
     f1a:	2301      	movs	r3, #1
     f1c:	4805      	ldr	r0, [pc, #20]	; (f34 <dlms_push_listener_init+0x40>)
     f1e:	f243 32ff 	movw	r2, #13311	; 0x33ff
     f22:	4619      	mov	r1, r3
     f24:	f001 ff9a 	bl	2e5c <cl_init>
}
     f28:	b004      	add	sp, #16
     f2a:	bd10      	pop	{r4, pc}
     f2c:	20000538 	.word	0x20000538
     f30:	20000268 	.word	0x20000268
     f34:	20000548 	.word	0x20000548

00000f38 <dlms_push_listener_rx>:

void dlms_push_listener_rx(void)
{
     f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t c = console_getchar();
    //Append to Data
    uint8_t available = 1;
    if (available > 0)
    {
      if (frameData.size + available > frameData.capacity)
     f3c:	4c87      	ldr	r4, [pc, #540]	; (115c <CONFIG_FPROTECT_BLOCK_SIZE+0x15c>)
          return;
        }
      }
      *(frameData.data + frameData.size) = c;
      frameData.size += available;
      if (notify_getData(&settings, &frameData, &data) != 0)
     f3e:	4f88      	ldr	r7, [pc, #544]	; (1160 <CONFIG_FPROTECT_BLOCK_SIZE+0x160>)
{
     f40:	b091      	sub	sp, #68	; 0x44
     f42:	4625      	mov	r5, r4
    uint8_t c = console_getchar();
     f44:	f005 f80e 	bl	5f64 <console_getchar>
      if (frameData.size + available > frameData.capacity)
     f48:	88e2      	ldrh	r2, [r4, #6]
     f4a:	88a3      	ldrh	r3, [r4, #4]
     f4c:	1c51      	adds	r1, r2, #1
     f4e:	4299      	cmp	r1, r3
    uint8_t c = console_getchar();
     f50:	b2c0      	uxtb	r0, r0
      if (frameData.size + available > frameData.capacity)
     f52:	dd0c      	ble.n	f6e <dlms_push_listener_rx+0x36>
        available = frameData.capacity - frameData.size;
     f54:	1a9b      	subs	r3, r3, r2
        if (available == 0)
     f56:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
     f5a:	d109      	bne.n	f70 <dlms_push_listener_rx+0x38>
          printk("Buffer is full!\n");
     f5c:	4881      	ldr	r0, [pc, #516]	; (1164 <CONFIG_FPROTECT_BLOCK_SIZE+0x164>)
     f5e:	f019 fc13 	bl	1a788 <printk>
          bb_empty(&frameData);
     f62:	487e      	ldr	r0, [pc, #504]	; (115c <CONFIG_FPROTECT_BLOCK_SIZE+0x15c>)
     f64:	f00c f812 	bl	cf8c <bb_empty>
        }
      }
    }
  }

}
     f68:	b011      	add	sp, #68	; 0x44
     f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint8_t available = 1;
     f6e:	2301      	movs	r3, #1
      *(frameData.data + frameData.size) = c;
     f70:	6829      	ldr	r1, [r5, #0]
     f72:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 1168 <CONFIG_FPROTECT_BLOCK_SIZE+0x168>
     f76:	5488      	strb	r0, [r1, r2]
      frameData.size += available;
     f78:	88ea      	ldrh	r2, [r5, #6]
      if (notify_getData(&settings, &frameData, &data) != 0)
     f7a:	487b      	ldr	r0, [pc, #492]	; (1168 <CONFIG_FPROTECT_BLOCK_SIZE+0x168>)
      frameData.size += available;
     f7c:	4413      	add	r3, r2
      if (notify_getData(&settings, &frameData, &data) != 0)
     f7e:	4621      	mov	r1, r4
     f80:	4a77      	ldr	r2, [pc, #476]	; (1160 <CONFIG_FPROTECT_BLOCK_SIZE+0x160>)
      frameData.size += available;
     f82:	80eb      	strh	r3, [r5, #6]
      if (notify_getData(&settings, &frameData, &data) != 0)
     f84:	f018 fe25 	bl	19bd2 <notify_getData>
     f88:	b130      	cbz	r0, f98 <dlms_push_listener_rx+0x60>
        printk("Invalid data received!\n");
     f8a:	4878      	ldr	r0, [pc, #480]	; (116c <CONFIG_FPROTECT_BLOCK_SIZE+0x16c>)
     f8c:	f019 fbfc 	bl	1a788 <printk>
        reply_clear(&data);
     f90:	4638      	mov	r0, r7
     f92:	f018 ffa9 	bl	19ee8 <reply_clear>
     f96:	e7d5      	b.n	f44 <dlms_push_listener_rx+0xc>
        if (data.complete)
     f98:	7c3b      	ldrb	r3, [r7, #16]
     f9a:	2b00      	cmp	r3, #0
     f9c:	d0d2      	beq.n	f44 <dlms_push_listener_rx+0xc>
          bb_empty(&frameData);
     f9e:	4620      	mov	r0, r4
     fa0:	f00b fff4 	bl	cf8c <bb_empty>
          if (data.moreData == DLMS_DATA_REQUEST_TYPES_NONE)
     fa4:	783e      	ldrb	r6, [r7, #0]
     fa6:	2e00      	cmp	r6, #0
     fa8:	d1cc      	bne.n	f44 <dlms_push_listener_rx+0xc>
            arr_init(&items);
     faa:	a808      	add	r0, sp, #32
     fac:	f00f f97f 	bl	102ae <arr_init>
            Smart_Meter_data = Smart_Meter_data_init; //Init the Target Data Structure
     fb0:	4d6f      	ldr	r5, [pc, #444]	; (1170 <CONFIG_FPROTECT_BLOCK_SIZE+0x170>)
            printk("Time Unix Epoch: %lu\n",data.time);
     fb2:	6b79      	ldr	r1, [r7, #52]	; 0x34
     fb4:	486f      	ldr	r0, [pc, #444]	; (1174 <CONFIG_FPROTECT_BLOCK_SIZE+0x174>)
            Smart_Meter_data = Smart_Meter_data_init; //Init the Target Data Structure
     fb6:	4c70      	ldr	r4, [pc, #448]	; (1178 <CONFIG_FPROTECT_BLOCK_SIZE+0x178>)
                snprintk(ln,sizeof(ln)-1,"%u.%u.%u.%u.%u.%u",item->logicalName[0],item->logicalName[1],item->logicalName[2],item->logicalName[3],item->logicalName[4],item->logicalName[5]);
     fb8:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 11b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b0>
                printk("LN: %u.%u.%u.%u.%u.%u\n",item->logicalName[0],item->logicalName[1],item->logicalName[2],item->logicalName[3],item->logicalName[4],item->logicalName[5]);
     fbc:	f8df b1f4 	ldr.w	fp, [pc, #500]	; 11b4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b4>
            printk("Time Unix Epoch: %lu\n",data.time);
     fc0:	f019 fbe2 	bl	1a788 <printk>
            notify_parsePush(&settings, data.dataValue.Arr, &items);
     fc4:	6a39      	ldr	r1, [r7, #32]
     fc6:	aa08      	add	r2, sp, #32
     fc8:	4640      	mov	r0, r8
     fca:	f018 fe05 	bl	19bd8 <notify_parsePush>
            Smart_Meter_data = Smart_Meter_data_init; //Init the Target Data Structure
     fce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     fd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     fd2:	682b      	ldr	r3, [r5, #0]
            new_data_bitmask[0] = 0x0; //Init the new_data_bitmask
     fd4:	4d69      	ldr	r5, [pc, #420]	; (117c <CONFIG_FPROTECT_BLOCK_SIZE+0x17c>)
            Smart_Meter_data = Smart_Meter_data_init; //Init the Target Data Structure
     fd6:	f844 3910 	str.w	r3, [r4], #-16
            new_data_bitmask[0] = 0x0; //Init the new_data_bitmask
     fda:	702e      	strb	r6, [r5, #0]
                oa_getByIndex(&settings.objects,pos,&item);
     fdc:	f108 0998 	add.w	r9, r8, #152	; 0x98
            for (pos = 0; pos != settings.objects.size; ++pos)
     fe0:	f8b8 309e 	ldrh.w	r3, [r8, #158]	; 0x9e
     fe4:	b2b1      	uxth	r1, r6
     fe6:	428b      	cmp	r3, r1
     fe8:	d106      	bne.n	ff8 <dlms_push_listener_rx+0xc0>
            bb_empty(&frameData);
     fea:	485c      	ldr	r0, [pc, #368]	; (115c <CONFIG_FPROTECT_BLOCK_SIZE+0x15c>)
     fec:	f00b ffce 	bl	cf8c <bb_empty>
            reply_clear(&data);
     ff0:	485b      	ldr	r0, [pc, #364]	; (1160 <CONFIG_FPROTECT_BLOCK_SIZE+0x160>)
     ff2:	f018 ff79 	bl	19ee8 <reply_clear>
            break;
     ff6:	e7b7      	b.n	f68 <dlms_push_listener_rx+0x30>
                oa_getByIndex(&settings.objects,pos,&item);
     ff8:	aa07      	add	r2, sp, #28
     ffa:	4648      	mov	r0, r9
     ffc:	f018 fee7 	bl	19dce <oa_getByIndex>
                snprintk(ln,sizeof(ln)-1,"%u.%u.%u.%u.%u.%u",item->logicalName[0],item->logicalName[1],item->logicalName[2],item->logicalName[3],item->logicalName[4],item->logicalName[5]);
    1000:	9a07      	ldr	r2, [sp, #28]
    1002:	7ad1      	ldrb	r1, [r2, #11]
    1004:	7993      	ldrb	r3, [r2, #6]
    1006:	9104      	str	r1, [sp, #16]
    1008:	7a91      	ldrb	r1, [r2, #10]
    100a:	9103      	str	r1, [sp, #12]
    100c:	7a51      	ldrb	r1, [r2, #9]
    100e:	9102      	str	r1, [sp, #8]
    1010:	7a11      	ldrb	r1, [r2, #8]
    1012:	9101      	str	r1, [sp, #4]
    1014:	79d2      	ldrb	r2, [r2, #7]
    1016:	9200      	str	r2, [sp, #0]
    1018:	2113      	movs	r1, #19
    101a:	4652      	mov	r2, sl
    101c:	a80b      	add	r0, sp, #44	; 0x2c
    101e:	f019 fbc0 	bl	1a7a2 <snprintk>
                printk("LN: %u.%u.%u.%u.%u.%u\n",item->logicalName[0],item->logicalName[1],item->logicalName[2],item->logicalName[3],item->logicalName[4],item->logicalName[5]);
    1022:	9807      	ldr	r0, [sp, #28]
    1024:	f890 c00b 	ldrb.w	ip, [r0, #11]
    1028:	7981      	ldrb	r1, [r0, #6]
    102a:	7a03      	ldrb	r3, [r0, #8]
    102c:	79c2      	ldrb	r2, [r0, #7]
    102e:	f8cd c008 	str.w	ip, [sp, #8]
    1032:	f890 c00a 	ldrb.w	ip, [r0, #10]
    1036:	f8cd c004 	str.w	ip, [sp, #4]
    103a:	7a40      	ldrb	r0, [r0, #9]
    103c:	9000      	str	r0, [sp, #0]
    103e:	4658      	mov	r0, fp
    1040:	f019 fba2 	bl	1a788 <printk>
                if (strcmp(ln,"1.0.31.7.0.255") == 0)
    1044:	494e      	ldr	r1, [pc, #312]	; (1180 <CONFIG_FPROTECT_BLOCK_SIZE+0x180>)
    1046:	a80b      	add	r0, sp, #44	; 0x2c
    1048:	f7ff feb0 	bl	dac <strcmp>
    104c:	b988      	cbnz	r0, 1072 <CONFIG_FPROTECT_BLOCK_SIZE+0x72>
                  va_getByIndex(data.dataValue.Arr,pos+1,&tmp);
    104e:	b2b1      	uxth	r1, r6
    1050:	aa06      	add	r2, sp, #24
    1052:	3101      	adds	r1, #1
    1054:	6a38      	ldr	r0, [r7, #32]
    1056:	f019 f924 	bl	1a2a2 <va_getByIndex>
                  printk("Strom L1: %u\n",tmp->uiVal);
    105a:	9b06      	ldr	r3, [sp, #24]
    105c:	4849      	ldr	r0, [pc, #292]	; (1184 <CONFIG_FPROTECT_BLOCK_SIZE+0x184>)
    105e:	8919      	ldrh	r1, [r3, #8]
    1060:	f019 fb92 	bl	1a788 <printk>
                  Smart_Meter_data.Strom_L1 = tmp->uiVal;
    1064:	9b06      	ldr	r3, [sp, #24]
    1066:	891b      	ldrh	r3, [r3, #8]
    1068:	8023      	strh	r3, [r4, #0]
                  new_data_bitmask[0] |= 1 << 0;
    106a:	782b      	ldrb	r3, [r5, #0]
    106c:	f043 0301 	orr.w	r3, r3, #1
    1070:	702b      	strb	r3, [r5, #0]
                if (strcmp(ln,"1.0.51.7.0.255") == 0)
    1072:	4945      	ldr	r1, [pc, #276]	; (1188 <CONFIG_FPROTECT_BLOCK_SIZE+0x188>)
    1074:	a80b      	add	r0, sp, #44	; 0x2c
    1076:	f7ff fe99 	bl	dac <strcmp>
    107a:	b988      	cbnz	r0, 10a0 <CONFIG_FPROTECT_BLOCK_SIZE+0xa0>
                  va_getByIndex(data.dataValue.Arr,pos+1,&tmp);
    107c:	b2b1      	uxth	r1, r6
    107e:	aa06      	add	r2, sp, #24
    1080:	3101      	adds	r1, #1
    1082:	6a38      	ldr	r0, [r7, #32]
    1084:	f019 f90d 	bl	1a2a2 <va_getByIndex>
                  printk("Strom L2: %u\n",tmp->uiVal);
    1088:	9b06      	ldr	r3, [sp, #24]
    108a:	4840      	ldr	r0, [pc, #256]	; (118c <CONFIG_FPROTECT_BLOCK_SIZE+0x18c>)
    108c:	8919      	ldrh	r1, [r3, #8]
    108e:	f019 fb7b 	bl	1a788 <printk>
                  Smart_Meter_data.Strom_L2 = tmp->uiVal;
    1092:	9b06      	ldr	r3, [sp, #24]
    1094:	891b      	ldrh	r3, [r3, #8]
    1096:	8063      	strh	r3, [r4, #2]
                  new_data_bitmask[0] |= 1 << 1;
    1098:	782b      	ldrb	r3, [r5, #0]
    109a:	f043 0302 	orr.w	r3, r3, #2
    109e:	702b      	strb	r3, [r5, #0]
                if (strcmp(ln,"1.0.71.7.0.255") == 0)
    10a0:	493b      	ldr	r1, [pc, #236]	; (1190 <CONFIG_FPROTECT_BLOCK_SIZE+0x190>)
    10a2:	a80b      	add	r0, sp, #44	; 0x2c
    10a4:	f7ff fe82 	bl	dac <strcmp>
    10a8:	b988      	cbnz	r0, 10ce <CONFIG_FPROTECT_BLOCK_SIZE+0xce>
                  va_getByIndex(data.dataValue.Arr,pos+1,&tmp);
    10aa:	b2b1      	uxth	r1, r6
    10ac:	aa06      	add	r2, sp, #24
    10ae:	3101      	adds	r1, #1
    10b0:	6a38      	ldr	r0, [r7, #32]
    10b2:	f019 f8f6 	bl	1a2a2 <va_getByIndex>
                  printk("Strom L3: %u\n",tmp->uiVal);
    10b6:	9b06      	ldr	r3, [sp, #24]
    10b8:	4836      	ldr	r0, [pc, #216]	; (1194 <CONFIG_FPROTECT_BLOCK_SIZE+0x194>)
    10ba:	8919      	ldrh	r1, [r3, #8]
    10bc:	f019 fb64 	bl	1a788 <printk>
                  Smart_Meter_data.Strom_L3 = tmp->uiVal;
    10c0:	9b06      	ldr	r3, [sp, #24]
    10c2:	891b      	ldrh	r3, [r3, #8]
    10c4:	80a3      	strh	r3, [r4, #4]
                  new_data_bitmask[0] |= 1 << 2;
    10c6:	782b      	ldrb	r3, [r5, #0]
    10c8:	f043 0304 	orr.w	r3, r3, #4
    10cc:	702b      	strb	r3, [r5, #0]
                if (strcmp(ln,"1.0.1.7.0.255") == 0)
    10ce:	4932      	ldr	r1, [pc, #200]	; (1198 <CONFIG_FPROTECT_BLOCK_SIZE+0x198>)
    10d0:	a80b      	add	r0, sp, #44	; 0x2c
    10d2:	f7ff fe6b 	bl	dac <strcmp>
    10d6:	b988      	cbnz	r0, 10fc <CONFIG_FPROTECT_BLOCK_SIZE+0xfc>
                  va_getByIndex(data.dataValue.Arr,pos+1,&tmp);
    10d8:	b2b1      	uxth	r1, r6
    10da:	aa06      	add	r2, sp, #24
    10dc:	3101      	adds	r1, #1
    10de:	6a38      	ldr	r0, [r7, #32]
    10e0:	f019 f8df 	bl	1a2a2 <va_getByIndex>
                  printk("Wirkleistungsbezug: %lu\n",tmp->ulVal);
    10e4:	9b06      	ldr	r3, [sp, #24]
    10e6:	482d      	ldr	r0, [pc, #180]	; (119c <CONFIG_FPROTECT_BLOCK_SIZE+0x19c>)
    10e8:	6899      	ldr	r1, [r3, #8]
    10ea:	f019 fb4d 	bl	1a788 <printk>
                  Smart_Meter_data.Wirkleistungsbezug = tmp->ulVal;
    10ee:	9b06      	ldr	r3, [sp, #24]
    10f0:	689b      	ldr	r3, [r3, #8]
    10f2:	60a3      	str	r3, [r4, #8]
                  new_data_bitmask[0] |= 1 << 3;
    10f4:	782b      	ldrb	r3, [r5, #0]
    10f6:	f043 0308 	orr.w	r3, r3, #8
    10fa:	702b      	strb	r3, [r5, #0]
                if (strcmp(ln,"1.1.1.8.1.255") == 0)
    10fc:	4928      	ldr	r1, [pc, #160]	; (11a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a0>)
    10fe:	a80b      	add	r0, sp, #44	; 0x2c
    1100:	f7ff fe54 	bl	dac <strcmp>
    1104:	b988      	cbnz	r0, 112a <CONFIG_FPROTECT_BLOCK_SIZE+0x12a>
                  va_getByIndex(data.dataValue.Arr,pos+1,&tmp);
    1106:	b2b1      	uxth	r1, r6
    1108:	aa06      	add	r2, sp, #24
    110a:	3101      	adds	r1, #1
    110c:	6a38      	ldr	r0, [r7, #32]
    110e:	f019 f8c8 	bl	1a2a2 <va_getByIndex>
                  printk("Wirkenergiebezug Tarif 1: %lu\n",tmp->ulVal);
    1112:	9b06      	ldr	r3, [sp, #24]
    1114:	4823      	ldr	r0, [pc, #140]	; (11a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a4>)
    1116:	6899      	ldr	r1, [r3, #8]
    1118:	f019 fb36 	bl	1a788 <printk>
                  Smart_Meter_data.Wirkenergiebezug_Tarif_1 = tmp->ulVal;
    111c:	9b06      	ldr	r3, [sp, #24]
    111e:	689b      	ldr	r3, [r3, #8]
    1120:	60e3      	str	r3, [r4, #12]
                  new_data_bitmask[0] |= 1 << 4;
    1122:	782b      	ldrb	r3, [r5, #0]
    1124:	f043 0310 	orr.w	r3, r3, #16
    1128:	702b      	strb	r3, [r5, #0]
                if (strcmp(ln,"1.1.1.8.2.255") == 0)
    112a:	491f      	ldr	r1, [pc, #124]	; (11a8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a8>)
    112c:	a80b      	add	r0, sp, #44	; 0x2c
    112e:	f7ff fe3d 	bl	dac <strcmp>
    1132:	b988      	cbnz	r0, 1158 <CONFIG_FPROTECT_BLOCK_SIZE+0x158>
                  va_getByIndex(data.dataValue.Arr,pos+1,&tmp);
    1134:	b2b1      	uxth	r1, r6
    1136:	aa06      	add	r2, sp, #24
    1138:	3101      	adds	r1, #1
    113a:	6a38      	ldr	r0, [r7, #32]
    113c:	f019 f8b1 	bl	1a2a2 <va_getByIndex>
                  printk("Wirkenergiebezug Tarif 2: %lu\n",tmp->ulVal);
    1140:	9b06      	ldr	r3, [sp, #24]
    1142:	481a      	ldr	r0, [pc, #104]	; (11ac <CONFIG_FPROTECT_BLOCK_SIZE+0x1ac>)
    1144:	6899      	ldr	r1, [r3, #8]
    1146:	f019 fb1f 	bl	1a788 <printk>
                  Smart_Meter_data.Wirkenergiebezug_Tarif_2 = tmp->ulVal;
    114a:	9b06      	ldr	r3, [sp, #24]
    114c:	689b      	ldr	r3, [r3, #8]
    114e:	6123      	str	r3, [r4, #16]
                  new_data_bitmask[0] |= 1 << 5;
    1150:	782b      	ldrb	r3, [r5, #0]
    1152:	f043 0320 	orr.w	r3, r3, #32
    1156:	702b      	strb	r3, [r5, #0]
            for (pos = 0; pos != settings.objects.size; ++pos)
    1158:	3601      	adds	r6, #1
    115a:	e741      	b.n	fe0 <dlms_push_listener_rx+0xa8>
    115c:	20000538 	.word	0x20000538
    1160:	20000268 	.word	0x20000268
    1164:	0001d3e2 	.word	0x0001d3e2
    1168:	20000548 	.word	0x20000548
    116c:	0001d3f3 	.word	0x0001d3f3
    1170:	0001c978 	.word	0x0001c978
    1174:	0001d40b 	.word	0x0001d40b
    1178:	20000518 	.word	0x20000518
    117c:	20001137 	.word	0x20001137
    1180:	0001d44a 	.word	0x0001d44a
    1184:	0001d459 	.word	0x0001d459
    1188:	0001d467 	.word	0x0001d467
    118c:	0001d476 	.word	0x0001d476
    1190:	0001d484 	.word	0x0001d484
    1194:	0001d493 	.word	0x0001d493
    1198:	0001d4a1 	.word	0x0001d4a1
    119c:	0001d4af 	.word	0x0001d4af
    11a0:	0001d4c8 	.word	0x0001d4c8
    11a4:	0001d4d6 	.word	0x0001d4d6
    11a8:	0001d4f5 	.word	0x0001d4f5
    11ac:	0001d503 	.word	0x0001d503
    11b0:	0001d421 	.word	0x0001d421
    11b4:	0001d433 	.word	0x0001d433

000011b8 <szl_lora_init>:
uint16_t crc, crc_calc;
int16_t rssi;
int8_t snr;

void szl_lora_init()
{
    11b8:	b508      	push	{r3, lr}
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    11ba:	4810      	ldr	r0, [pc, #64]	; (11fc <szl_lora_init+0x44>)
    11bc:	f009 f8c0 	bl	a340 <z_impl_device_get_binding>

    lora_dev = device_get_binding(DEFAULT_RADIO);
    11c0:	4a0f      	ldr	r2, [pc, #60]	; (1200 <szl_lora_init+0x48>)
    11c2:	6010      	str	r0, [r2, #0]
    if (!lora_dev)
    11c4:	b928      	cbnz	r0, 11d2 <szl_lora_init+0x1a>
    if (ret < 0)
    {
        printk("LoRa config failed\n");
        return;
    }
}
    11c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        printk("%s Device not found\n", DEFAULT_RADIO);
    11ca:	490c      	ldr	r1, [pc, #48]	; (11fc <szl_lora_init+0x44>)
    11cc:	480d      	ldr	r0, [pc, #52]	; (1204 <szl_lora_init+0x4c>)
    11ce:	f019 badb 	b.w	1a788 <printk>
    config.frequency = 865100000;
    11d2:	4b0d      	ldr	r3, [pc, #52]	; (1208 <szl_lora_init+0x50>)
    11d4:	4a0d      	ldr	r2, [pc, #52]	; (120c <szl_lora_init+0x54>)
    11d6:	601a      	str	r2, [r3, #0]
    config.bandwidth = BW_125_KHZ;
    11d8:	f44f 6220 	mov.w	r2, #2560	; 0xa00
    11dc:	809a      	strh	r2, [r3, #4]
    config.coding_rate = CR_4_5;
    11de:	2201      	movs	r2, #1
    11e0:	719a      	strb	r2, [r3, #6]
    config.preamble_len = 8;
    11e2:	4a0b      	ldr	r2, [pc, #44]	; (1210 <szl_lora_init+0x58>)
    11e4:	609a      	str	r2, [r3, #8]
    ret = lora_config(lora_dev, &config);
    11e6:	f7ff fdf3 	bl	dd0 <lora_config.constprop.0>
    if (ret < 0)
    11ea:	2800      	cmp	r0, #0
    11ec:	da04      	bge.n	11f8 <szl_lora_init+0x40>
}
    11ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        printk("LoRa config failed\n");
    11f2:	4808      	ldr	r0, [pc, #32]	; (1214 <szl_lora_init+0x5c>)
    11f4:	f019 bac8 	b.w	1a788 <printk>
}
    11f8:	bd08      	pop	{r3, pc}
    11fa:	bf00      	nop
    11fc:	0001d522 	.word	0x0001d522
    1200:	20000544 	.word	0x20000544
    1204:	0001d529 	.word	0x0001d529
    1208:	2000052c 	.word	0x2000052c
    120c:	339060e0 	.word	0x339060e0
    1210:	01040008 	.word	0x01040008
    1214:	0001d53e 	.word	0x0001d53e

00001218 <szl_lora_send>:

void szl_lora_send(uint8_t *data, uint32_t data_len)
{
    1218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (lora_dev == NULL)
    121c:	f8df 807c 	ldr.w	r8, [pc, #124]	; 129c <szl_lora_send+0x84>
{
    1220:	4606      	mov	r6, r0
    if (lora_dev == NULL)
    1222:	f8d8 0000 	ldr.w	r0, [r8]
{
    1226:	460c      	mov	r4, r1
    if (lora_dev == NULL)
    1228:	b920      	cbnz	r0, 1234 <szl_lora_send+0x1c>
    {
        printk("Could not get LoRa device\n");
    122a:	4815      	ldr	r0, [pc, #84]	; (1280 <szl_lora_send+0x68>)
        printk("LoRa send failed\n");
        return;
    }

    printk("Data sent!\n");
}
    122c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    printk("Data sent!\n");
    1230:	f019 baaa 	b.w	1a788 <printk>
    config.tx_power = 4;
    1234:	4b13      	ldr	r3, [pc, #76]	; (1284 <szl_lora_send+0x6c>)
    1236:	f44f 7282 	mov.w	r2, #260	; 0x104
    123a:	815a      	strh	r2, [r3, #10]
    ret = lora_config(lora_dev, &config);
    123c:	f7ff fdc8 	bl	dd0 <lora_config.constprop.0>
    if (ret < 0)
    1240:	2800      	cmp	r0, #0
    1242:	da01      	bge.n	1248 <szl_lora_send+0x30>
        printk("LoRa config failed\n");
    1244:	4810      	ldr	r0, [pc, #64]	; (1288 <szl_lora_send+0x70>)
    1246:	e7f1      	b.n	122c <szl_lora_send+0x14>
    crc = crc16_ccitt(0, data, (size_t)data_len);
    1248:	4622      	mov	r2, r4
    124a:	4631      	mov	r1, r6
    124c:	2000      	movs	r0, #0
    124e:	f019 fa55 	bl	1a6fc <crc16_ccitt>
    memcpy(data_crc, data, (size_t)data_len);                   // copy data
    1252:	4f0e      	ldr	r7, [pc, #56]	; (128c <szl_lora_send+0x74>)
    crc = crc16_ccitt(0, data, (size_t)data_len);
    1254:	4b0e      	ldr	r3, [pc, #56]	; (1290 <szl_lora_send+0x78>)
    1256:	4605      	mov	r5, r0
    1258:	8018      	strh	r0, [r3, #0]
    memcpy(data_crc, data, (size_t)data_len);                   // copy data
    125a:	4622      	mov	r2, r4
    125c:	23ff      	movs	r3, #255	; 0xff
    125e:	4631      	mov	r1, r6
    1260:	4638      	mov	r0, r7
    1262:	f01a ff4b 	bl	1c0fc <__memcpy_chk>
    1266:	533d      	strh	r5, [r7, r4]
    ret = lora_send(lora_dev, data_crc, (size_t)data_len + sizeof(crc));
    1268:	f8d8 0000 	ldr.w	r0, [r8]
			    uint8_t *data, uint32_t data_len)
{
	const struct lora_driver_api *api =
		(const struct lora_driver_api *)dev->api;

	return api->send(dev, data, data_len);
    126c:	6883      	ldr	r3, [r0, #8]
    126e:	1ca2      	adds	r2, r4, #2
    1270:	685b      	ldr	r3, [r3, #4]
    1272:	4639      	mov	r1, r7
    1274:	4798      	blx	r3
    if (ret < 0)
    1276:	2800      	cmp	r0, #0
        printk("LoRa send failed\n");
    1278:	bfb4      	ite	lt
    127a:	4806      	ldrlt	r0, [pc, #24]	; (1294 <szl_lora_send+0x7c>)
    printk("Data sent!\n");
    127c:	4806      	ldrge	r0, [pc, #24]	; (1298 <szl_lora_send+0x80>)
    127e:	e7d5      	b.n	122c <szl_lora_send+0x14>
    1280:	0001d552 	.word	0x0001d552
    1284:	2000052c 	.word	0x2000052c
    1288:	0001d53e 	.word	0x0001d53e
    128c:	20001038 	.word	0x20001038
    1290:	20001034 	.word	0x20001034
    1294:	0001d56d 	.word	0x0001d56d
    1298:	0001d57f 	.word	0x0001d57f
    129c:	20000544 	.word	0x20000544

000012a0 <main>:


/* ------------------- Main App ---------------------------- */

void main(void)
{
    12a0:	b500      	push	{lr}
  printk("Init Application\n");  
    12a2:	480a      	ldr	r0, [pc, #40]	; (12cc <main+0x2c>)
{
    12a4:	b0c1      	sub	sp, #260	; 0x104
  printk("Init Application\n");  
    12a6:	f019 fa6f 	bl	1a788 <printk>
  dlms_push_listener_init();
    12aa:	f7ff fe23 	bl	ef4 <dlms_push_listener_init>
  szl_lora_init();
    12ae:	f7ff ff83 	bl	11b8 <szl_lora_init>

  printk("Starting Application\n");
    12b2:	4807      	ldr	r0, [pc, #28]	; (12d0 <main+0x30>)
    12b4:	f019 fa68 	bl	1a788 <printk>
  char buffer[255];
  int sz;
  while (1)
  {
    dlms_push_listener_rx(); //Wait for a DLMS Package Received
    12b8:	f7ff fe3e 	bl	f38 <dlms_push_listener_rx>
    sz = sponge_encode(buffer); //Encode the Received Data into Sponge structure
    12bc:	4668      	mov	r0, sp
    12be:	f7ff fdaf 	bl	e20 <sponge_encode>
    12c2:	4601      	mov	r1, r0
    szl_lora_send(buffer,sz); //Send the Encoded Buffer over LoRa
    12c4:	4668      	mov	r0, sp
    12c6:	f7ff ffa7 	bl	1218 <szl_lora_send>
  while (1)
    12ca:	e7f5      	b.n	12b8 <main+0x18>
    12cc:	0001d58b 	.word	0x0001d58b
    12d0:	0001d59d 	.word	0x0001d59d

000012d4 <ba_getByteCount>:
#include "../include/bitarray.h"
#include "../include/helpers.h"

//Returs needed amount of bytes to store bits.
uint16_t ba_getByteCount(uint16_t bitCount)
{
    12d4:	b510      	push	{r4, lr}
    12d6:	4604      	mov	r4, r0
    double d = bitCount;
    12d8:	f7ff f8a4 	bl	424 <__aeabi_ui2d>
    12dc:	4602      	mov	r2, r0
    12de:	460b      	mov	r3, r1
    if (bitCount != 0)
    12e0:	b174      	cbz	r4, 1300 <ba_getByteCount+0x2c>
    {
        d /= 8;
    12e2:	2200      	movs	r2, #0
    12e4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    12e8:	f7ff f916 	bl	518 <__aeabi_dmul>
        if (bitCount == 0 || (bitCount % 8) != 0)
    12ec:	0764      	lsls	r4, r4, #29
        d /= 8;
    12ee:	4602      	mov	r2, r0
    12f0:	460b      	mov	r3, r1
        if (bitCount == 0 || (bitCount % 8) != 0)
    12f2:	d005      	beq.n	1300 <ba_getByteCount+0x2c>
        {
            ++d;
    12f4:	4b05      	ldr	r3, [pc, #20]	; (130c <ba_getByteCount+0x38>)
    12f6:	2200      	movs	r2, #0
    12f8:	f7fe ff58 	bl	1ac <__adddf3>
    12fc:	4602      	mov	r2, r0
    12fe:	460b      	mov	r3, r1
        }
    }
    return (uint16_t)d;
    1300:	4610      	mov	r0, r2
    1302:	4619      	mov	r1, r3
    1304:	f7ff fb42 	bl	98c <__aeabi_d2uiz>
}
    1308:	b280      	uxth	r0, r0
    130a:	bd10      	pop	{r4, pc}
    130c:	3ff00000 	.word	0x3ff00000

00001310 <cip_init>:
#include "../include/ciphering.h"
#include "../include/helpers.h"
#include "../include/gxaes.h"

void cip_init(ciphering* target)
{
    1310:	b570      	push	{r4, r5, r6, lr}
    static const unsigned char DEFAUlT_BLOCK_CIPHER_KEY[] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };
    static const unsigned char DEFAULT_SYSTEM_TITLE[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48 };
    static const unsigned char DEFAUlT_AUTHENTICATION_KEY[] = { 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7,
                                                                0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF
    };
    target->invocationCounter = 0;
    1312:	2500      	movs	r5, #0
    target->suite = DLMS_SECURITY_SUITE_V0;
    target->security = DLMS_SECURITY_NONE;
    target->encrypt = 0;
#ifndef DLMS_IGNORE_MALLOC
    BYTE_BUFFER_INIT(&target->blockCipherKey);
    1314:	1d06      	adds	r6, r0, #4
{
    1316:	4604      	mov	r4, r0
    target->invocationCounter = 0;
    1318:	61c5      	str	r5, [r0, #28]
    target->security = DLMS_SECURITY_NONE;
    131a:	8005      	strh	r5, [r0, #0]
    target->encrypt = 0;
    131c:	7085      	strb	r5, [r0, #2]
    BYTE_BUFFER_INIT(&target->blockCipherKey);
    131e:	4630      	mov	r0, r6
    1320:	f00b fc60 	bl	cbe4 <bb_init>
    bb_set(&target->blockCipherKey, DEFAUlT_BLOCK_CIPHER_KEY, sizeof(DEFAUlT_BLOCK_CIPHER_KEY));
    1324:	490d      	ldr	r1, [pc, #52]	; (135c <cip_init+0x4c>)
    1326:	2210      	movs	r2, #16
    1328:	4630      	mov	r0, r6
    BYTE_BUFFER_INIT(&target->systemTitle);
    132a:	f104 0610 	add.w	r6, r4, #16
    bb_set(&target->blockCipherKey, DEFAUlT_BLOCK_CIPHER_KEY, sizeof(DEFAUlT_BLOCK_CIPHER_KEY));
    132e:	f00b fda8 	bl	ce82 <bb_set>
    BYTE_BUFFER_INIT(&target->systemTitle);
    1332:	4630      	mov	r0, r6
    1334:	f00b fc56 	bl	cbe4 <bb_init>
    bb_set(&target->systemTitle, DEFAULT_SYSTEM_TITLE, sizeof(DEFAULT_SYSTEM_TITLE));
    1338:	4909      	ldr	r1, [pc, #36]	; (1360 <cip_init+0x50>)
    133a:	2208      	movs	r2, #8
    133c:	4630      	mov	r0, r6
    BYTE_BUFFER_INIT(&target->authenticationKey);
    133e:	f104 0620 	add.w	r6, r4, #32
    bb_set(&target->systemTitle, DEFAULT_SYSTEM_TITLE, sizeof(DEFAULT_SYSTEM_TITLE));
    1342:	f00b fd9e 	bl	ce82 <bb_set>
    BYTE_BUFFER_INIT(&target->authenticationKey);
    1346:	4630      	mov	r0, r6
    1348:	f00b fc4c 	bl	cbe4 <bb_init>
    bb_set(&target->authenticationKey, DEFAUlT_AUTHENTICATION_KEY, sizeof(DEFAUlT_AUTHENTICATION_KEY));
    134c:	4905      	ldr	r1, [pc, #20]	; (1364 <cip_init+0x54>)
    134e:	2210      	movs	r2, #16
    1350:	4630      	mov	r0, r6
    1352:	f00b fd96 	bl	ce82 <bb_set>
    target->dedicatedKey = NULL;
    1356:	62e5      	str	r5, [r4, #44]	; 0x2c
    memcpy(target->blockCipherKey, DEFAUlT_BLOCK_CIPHER_KEY, sizeof(DEFAUlT_BLOCK_CIPHER_KEY));
    memcpy(target->systemTitle, DEFAULT_SYSTEM_TITLE, sizeof(DEFAULT_SYSTEM_TITLE));
    memcpy(target->authenticationKey, DEFAUlT_AUTHENTICATION_KEY, sizeof(DEFAUlT_AUTHENTICATION_KEY));
    memset(target->dedicatedKey, 0, 16);
#endif //DLMS_IGNORE_MALLOC
}
    1358:	bd70      	pop	{r4, r5, r6, pc}
    135a:	bf00      	nop
    135c:	0001d5cb 	.word	0x0001d5cb
    1360:	0001d5b3 	.word	0x0001d5b3
    1364:	0001d5bb 	.word	0x0001d5bb

00001368 <cip_int>:
#define TE444(i) ((GetTe((i) & 0xff) >> 8) & 0x000000ff)

int cip_int(uint32_t* rk,
    const unsigned char* cipherKey,
    uint16_t keyBits)
{
    1368:	b5f0      	push	{r4, r5, r6, r7, lr}
    136a:	680b      	ldr	r3, [r1, #0]
    136c:	ba1b      	rev	r3, r3
    uint8_t i;
    uint32_t temp;

    rk[0] = GETU32(cipherKey);
    136e:	6003      	str	r3, [r0, #0]
    rk[1] = GETU32(cipherKey + 4);
    1370:	684b      	ldr	r3, [r1, #4]
    1372:	ba1b      	rev	r3, r3
    1374:	6043      	str	r3, [r0, #4]
    rk[2] = GETU32(cipherKey + 8);
    1376:	688b      	ldr	r3, [r1, #8]
    1378:	ba1b      	rev	r3, r3
    137a:	6083      	str	r3, [r0, #8]
    rk[3] = GETU32(cipherKey + 12);
    137c:	68cb      	ldr	r3, [r1, #12]

    if (keyBits == 128)
    137e:	2a80      	cmp	r2, #128	; 0x80
    1380:	ba1b      	rev	r3, r3
    rk[3] = GETU32(cipherKey + 12);
    1382:	60c3      	str	r3, [r0, #12]
    if (keyBits == 128)
    1384:	d134      	bne.n	13f0 <cip_int+0x88>
    1386:	4c76      	ldr	r4, [pc, #472]	; (1560 <cip_int+0x1f8>)
    return __TE[offset];
    1388:	4976      	ldr	r1, [pc, #472]	; (1564 <cip_int+0x1fc>)
    138a:	f100 05a0 	add.w	r5, r0, #160	; 0xa0
    {
        for (i = 0; i < 10; i++)
        {
            temp = rk[3];
    138e:	68c2      	ldr	r2, [r0, #12]
    return __R_CON[offset];
    1390:	f814 7b01 	ldrb.w	r7, [r4], #1
            rk[4] = rk[0] ^ TE421(temp) ^ TE432(temp) ^
                TE443(temp) ^ TE414(temp);
            rk[4] = rk[0] ^ TE421(temp) ^ TE432(temp) ^
                TE443(temp) ^ TE414(temp) ^ RCON(i);
    1394:	6806      	ldr	r6, [r0, #0]
    return __TE[offset];
    1396:	b2d3      	uxtb	r3, r2
                TE443(temp) ^ TE414(temp) ^ RCON(i);
    1398:	ea86 6607 	eor.w	r6, r6, r7, lsl #24
                TE443(temp) ^ TE414(temp);
    139c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    13a0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
                TE443(temp) ^ TE414(temp) ^ RCON(i);
    13a4:	4073      	eors	r3, r6
    return __TE[offset];
    13a6:	f3c2 2607 	ubfx	r6, r2, #8, #8
            rk[5] = rk[1] ^ rk[4];
            rk[6] = rk[2] ^ rk[5];
            rk[7] = rk[3] ^ rk[6];
            rk += 4;
    13aa:	3010      	adds	r0, #16
            rk[4] = rk[0] ^ TE421(temp) ^ TE432(temp) ^
    13ac:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
    13b0:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
                TE443(temp) ^ TE414(temp) ^ RCON(i);
    13b4:	4073      	eors	r3, r6
                TE443(temp) ^ TE414(temp);
    13b6:	0e16      	lsrs	r6, r2, #24
    13b8:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
    13bc:	f3c6 2607 	ubfx	r6, r6, #8, #8
                TE443(temp) ^ TE414(temp) ^ RCON(i);
    13c0:	4073      	eors	r3, r6
    return __TE[offset];
    13c2:	f3c2 4607 	ubfx	r6, r2, #16, #8
            rk[4] = rk[0] ^ TE421(temp) ^ TE432(temp) ^
    13c6:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
    13ca:	0236      	lsls	r6, r6, #8
    13cc:	f006 467f 	and.w	r6, r6, #4278190080	; 0xff000000
                TE443(temp) ^ TE414(temp) ^ RCON(i);
    13d0:	4073      	eors	r3, r6
            rk[5] = rk[1] ^ rk[4];
    13d2:	f850 6c0c 	ldr.w	r6, [r0, #-12]
            rk[4] = rk[0] ^ TE421(temp) ^ TE432(temp) ^
    13d6:	6003      	str	r3, [r0, #0]
            rk[5] = rk[1] ^ rk[4];
    13d8:	4073      	eors	r3, r6
            rk[6] = rk[2] ^ rk[5];
    13da:	f850 6c08 	ldr.w	r6, [r0, #-8]
            rk[5] = rk[1] ^ rk[4];
    13de:	6043      	str	r3, [r0, #4]
            rk[6] = rk[2] ^ rk[5];
    13e0:	4073      	eors	r3, r6
    13e2:	6083      	str	r3, [r0, #8]
            rk[7] = rk[3] ^ rk[6];
    13e4:	4053      	eors	r3, r2
    13e6:	60c3      	str	r3, [r0, #12]
        for (i = 0; i < 10; i++)
    13e8:	4285      	cmp	r5, r0
    13ea:	d1d0      	bne.n	138e <cip_int+0x26>
        }
        return 0;
    13ec:	2000      	movs	r0, #0
            rk[15] = rk[7] ^ rk[14];
            rk += 8;
        }
    }
    return DLMS_ERROR_CODE_INVALID_PARAMETER;
}
    13ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rk[4] = GETU32(cipherKey + 16);
    13f0:	690b      	ldr	r3, [r1, #16]
    13f2:	ba1b      	rev	r3, r3
    13f4:	6103      	str	r3, [r0, #16]
    rk[5] = GETU32(cipherKey + 20);
    13f6:	694b      	ldr	r3, [r1, #20]
    if (keyBits == 192)
    13f8:	2ac0      	cmp	r2, #192	; 0xc0
    13fa:	ba1b      	rev	r3, r3
    rk[5] = GETU32(cipherKey + 20);
    13fc:	6143      	str	r3, [r0, #20]
    if (keyBits == 192)
    13fe:	d141      	bne.n	1484 <cip_int+0x11c>
    1400:	4c57      	ldr	r4, [pc, #348]	; (1560 <cip_int+0x1f8>)
    return __TE[offset];
    1402:	4958      	ldr	r1, [pc, #352]	; (1564 <cip_int+0x1fc>)
    1404:	f100 05a8 	add.w	r5, r0, #168	; 0xa8
            temp = rk[5];
    1408:	6942      	ldr	r2, [r0, #20]
    return __R_CON[offset];
    140a:	f814 7b01 	ldrb.w	r7, [r4], #1
                TE443(temp) ^ TE414(temp) ^ RCON(i);
    140e:	6806      	ldr	r6, [r0, #0]
    return __TE[offset];
    1410:	b2d3      	uxtb	r3, r2
                TE443(temp) ^ TE414(temp) ^ RCON(i);
    1412:	ea86 6607 	eor.w	r6, r6, r7, lsl #24
    1416:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    141a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    141e:	4073      	eors	r3, r6
    return __TE[offset];
    1420:	f3c2 2607 	ubfx	r6, r2, #8, #8
            if (i == 7)
    1424:	4285      	cmp	r5, r0
            rk[6] = rk[0] ^ TE421(temp) ^ TE432(temp) ^
    1426:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
    142a:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
                TE443(temp) ^ TE414(temp) ^ RCON(i);
    142e:	ea83 0306 	eor.w	r3, r3, r6
    1432:	ea4f 6612 	mov.w	r6, r2, lsr #24
    1436:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
    143a:	f3c6 2607 	ubfx	r6, r6, #8, #8
    143e:	ea83 0306 	eor.w	r3, r3, r6
    return __TE[offset];
    1442:	f3c2 4607 	ubfx	r6, r2, #16, #8
            rk[6] = rk[0] ^ TE421(temp) ^ TE432(temp) ^
    1446:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
    144a:	ea4f 2606 	mov.w	r6, r6, lsl #8
    144e:	f006 467f 	and.w	r6, r6, #4278190080	; 0xff000000
                TE443(temp) ^ TE414(temp) ^ RCON(i);
    1452:	ea83 0306 	eor.w	r3, r3, r6
            rk[7] = rk[1] ^ rk[6];
    1456:	6846      	ldr	r6, [r0, #4]
            rk[6] = rk[0] ^ TE421(temp) ^ TE432(temp) ^
    1458:	6183      	str	r3, [r0, #24]
            rk[7] = rk[1] ^ rk[6];
    145a:	ea83 0306 	eor.w	r3, r3, r6
            rk[8] = rk[2] ^ rk[7];
    145e:	6886      	ldr	r6, [r0, #8]
            rk[7] = rk[1] ^ rk[6];
    1460:	61c3      	str	r3, [r0, #28]
            rk[8] = rk[2] ^ rk[7];
    1462:	ea83 0306 	eor.w	r3, r3, r6
            rk[9] = rk[3] ^ rk[8];
    1466:	68c6      	ldr	r6, [r0, #12]
            rk[8] = rk[2] ^ rk[7];
    1468:	6203      	str	r3, [r0, #32]
            rk[9] = rk[3] ^ rk[8];
    146a:	ea83 0306 	eor.w	r3, r3, r6
    146e:	6243      	str	r3, [r0, #36]	; 0x24
            if (i == 7)
    1470:	d101      	bne.n	1476 <cip_int+0x10e>
                return 12;
    1472:	200c      	movs	r0, #12
    1474:	e7bb      	b.n	13ee <cip_int+0x86>
            rk[10] = rk[4] ^ rk[9];
    1476:	6906      	ldr	r6, [r0, #16]
    1478:	4073      	eors	r3, r6
    147a:	6283      	str	r3, [r0, #40]	; 0x28
            rk[11] = rk[5] ^ rk[10];
    147c:	4053      	eors	r3, r2
    147e:	62c3      	str	r3, [r0, #44]	; 0x2c
            rk += 6;
    1480:	3018      	adds	r0, #24
        for (i = 0; i < 8; i++)
    1482:	e7c1      	b.n	1408 <cip_int+0xa0>
    rk[6] = GETU32(cipherKey + 24);
    1484:	698b      	ldr	r3, [r1, #24]
    1486:	ba1b      	rev	r3, r3
    1488:	6183      	str	r3, [r0, #24]
    rk[7] = GETU32(cipherKey + 28);
    148a:	69cb      	ldr	r3, [r1, #28]
    if (keyBits == 256)
    148c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    1490:	ba1b      	rev	r3, r3
    rk[7] = GETU32(cipherKey + 28);
    1492:	61c3      	str	r3, [r0, #28]
    if (keyBits == 256)
    1494:	d161      	bne.n	155a <cip_int+0x1f2>
    1496:	4c32      	ldr	r4, [pc, #200]	; (1560 <cip_int+0x1f8>)
    return __TE[offset];
    1498:	4a32      	ldr	r2, [pc, #200]	; (1564 <cip_int+0x1fc>)
    149a:	f100 05c0 	add.w	r5, r0, #192	; 0xc0
            temp = rk[7];
    149e:	69c1      	ldr	r1, [r0, #28]
    return __R_CON[offset];
    14a0:	f814 7b01 	ldrb.w	r7, [r4], #1
                TE443(temp) ^ TE414(temp) ^ RCON(i);
    14a4:	6806      	ldr	r6, [r0, #0]
    return __TE[offset];
    14a6:	b2cb      	uxtb	r3, r1
                TE443(temp) ^ TE414(temp) ^ RCON(i);
    14a8:	ea86 6607 	eor.w	r6, r6, r7, lsl #24
    14ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    14b0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    14b4:	4073      	eors	r3, r6
    return __TE[offset];
    14b6:	f3c1 2607 	ubfx	r6, r1, #8, #8
            if (i == 6)
    14ba:	4285      	cmp	r5, r0
            rk[8] = rk[0] ^ TE421(temp) ^ TE432(temp) ^
    14bc:	f852 6026 	ldr.w	r6, [r2, r6, lsl #2]
    14c0:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
                TE443(temp) ^ TE414(temp) ^ RCON(i);
    14c4:	ea83 0306 	eor.w	r3, r3, r6
    14c8:	ea4f 6611 	mov.w	r6, r1, lsr #24
    14cc:	f852 6026 	ldr.w	r6, [r2, r6, lsl #2]
    14d0:	f3c6 2607 	ubfx	r6, r6, #8, #8
    14d4:	ea83 0306 	eor.w	r3, r3, r6
    return __TE[offset];
    14d8:	f3c1 4607 	ubfx	r6, r1, #16, #8
            rk[8] = rk[0] ^ TE421(temp) ^ TE432(temp) ^
    14dc:	f852 6026 	ldr.w	r6, [r2, r6, lsl #2]
    14e0:	ea4f 2606 	mov.w	r6, r6, lsl #8
    14e4:	f006 467f 	and.w	r6, r6, #4278190080	; 0xff000000
                TE443(temp) ^ TE414(temp) ^ RCON(i);
    14e8:	ea83 0306 	eor.w	r3, r3, r6
            rk[9] = rk[1] ^ rk[8];
    14ec:	6846      	ldr	r6, [r0, #4]
            rk[8] = rk[0] ^ TE421(temp) ^ TE432(temp) ^
    14ee:	6203      	str	r3, [r0, #32]
            rk[9] = rk[1] ^ rk[8];
    14f0:	ea83 0306 	eor.w	r3, r3, r6
            rk[10] = rk[2] ^ rk[9];
    14f4:	6886      	ldr	r6, [r0, #8]
            rk[9] = rk[1] ^ rk[8];
    14f6:	6243      	str	r3, [r0, #36]	; 0x24
            rk[10] = rk[2] ^ rk[9];
    14f8:	ea83 0306 	eor.w	r3, r3, r6
            rk[11] = rk[3] ^ rk[10];
    14fc:	68c6      	ldr	r6, [r0, #12]
            rk[10] = rk[2] ^ rk[9];
    14fe:	6283      	str	r3, [r0, #40]	; 0x28
            rk[11] = rk[3] ^ rk[10];
    1500:	ea83 0306 	eor.w	r3, r3, r6
    1504:	62c3      	str	r3, [r0, #44]	; 0x2c
            if (i == 6)
    1506:	d101      	bne.n	150c <cip_int+0x1a4>
                return 14;
    1508:	200e      	movs	r0, #14
    150a:	e770      	b.n	13ee <cip_int+0x86>
    return __TE[offset];
    150c:	f3c3 2607 	ubfx	r6, r3, #8, #8
    1510:	b2df      	uxtb	r7, r3
                TE433(temp) ^ TE444(temp);
    1512:	f852 6026 	ldr.w	r6, [r2, r6, lsl #2]
    1516:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
    151a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
    151e:	f3c7 2707 	ubfx	r7, r7, #8, #8
    1522:	433e      	orrs	r6, r7
    1524:	6907      	ldr	r7, [r0, #16]
    1526:	407e      	eors	r6, r7
            rk[12] = rk[4] ^ TE411(temp) ^ TE422(temp) ^
    1528:	0e1f      	lsrs	r7, r3, #24
    return __TE[offset];
    152a:	f3c3 4307 	ubfx	r3, r3, #16, #8
            rk[12] = rk[4] ^ TE411(temp) ^ TE422(temp) ^
    152e:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
    1532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1536:	023f      	lsls	r7, r7, #8
    1538:	f007 477f 	and.w	r7, r7, #4278190080	; 0xff000000
    153c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
                TE433(temp) ^ TE444(temp);
    1540:	433b      	orrs	r3, r7
    1542:	4073      	eors	r3, r6
            rk[13] = rk[5] ^ rk[12];
    1544:	6946      	ldr	r6, [r0, #20]
            rk[12] = rk[4] ^ TE411(temp) ^ TE422(temp) ^
    1546:	6303      	str	r3, [r0, #48]	; 0x30
            rk[13] = rk[5] ^ rk[12];
    1548:	4073      	eors	r3, r6
            rk[14] = rk[6] ^ rk[13];
    154a:	6986      	ldr	r6, [r0, #24]
            rk[13] = rk[5] ^ rk[12];
    154c:	6343      	str	r3, [r0, #52]	; 0x34
            rk[14] = rk[6] ^ rk[13];
    154e:	4073      	eors	r3, r6
            rk[15] = rk[7] ^ rk[14];
    1550:	4059      	eors	r1, r3
            rk[14] = rk[6] ^ rk[13];
    1552:	6383      	str	r3, [r0, #56]	; 0x38
            rk[15] = rk[7] ^ rk[14];
    1554:	63c1      	str	r1, [r0, #60]	; 0x3c
            rk += 8;
    1556:	3020      	adds	r0, #32
        for (i = 0; i < 7; i++)
    1558:	e7a1      	b.n	149e <cip_int+0x136>
    return DLMS_ERROR_CODE_INVALID_PARAMETER;
    155a:	f44f 7081 	mov.w	r0, #258	; 0x102
    155e:	e746      	b.n	13ee <cip_int+0x86>
    1560:	0001d5e3 	.word	0x0001d5e3
    1564:	0001c98c 	.word	0x0001c98c

00001568 <aes_Encrypt>:

//Arduino DOIT ESP32 uses aes_encrypt. For that reason aes_Encrypt is used.
void aes_Encrypt(const uint32_t* rk, int Nr, const unsigned char* pt, unsigned char* ct)
{
    1568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    156c:	6814      	ldr	r4, [r2, #0]
    uint32_t s0, s1, s2, s3, t0, t1, t2, t3;
    int r;
    s0 = GETU32(pt) ^ rk[0];
    156e:	6805      	ldr	r5, [r0, #0]
    1570:	6857      	ldr	r7, [r2, #4]
    1572:	6896      	ldr	r6, [r2, #8]
    1574:	ba24      	rev	r4, r4
    1576:	406c      	eors	r4, r5
    s1 = GETU32(pt + 4) ^ rk[1];
    1578:	6845      	ldr	r5, [r0, #4]
    157a:	ba3f      	rev	r7, r7
    157c:	406f      	eors	r7, r5
    s2 = GETU32(pt + 8) ^ rk[2];
    157e:	6885      	ldr	r5, [r0, #8]
    1580:	ba36      	rev	r6, r6
    1582:	406e      	eors	r6, r5
    s3 = GETU32(pt + 12) ^ rk[3];
    1584:	68d5      	ldr	r5, [r2, #12]
    1586:	68c2      	ldr	r2, [r0, #12]
{
    1588:	b08b      	sub	sp, #44	; 0x2c
    158a:	ba2d      	rev	r5, r5
    s3 = GETU32(pt + 12) ^ rk[3];
    158c:	4055      	eors	r5, r2
d##1 = TE0(s##1) ^ TE1(s##2) ^ TE2(s##3) ^ TE3(s##0) ^ rk[4 * i + 1]; \
d##2 = TE0(s##2) ^ TE1(s##3) ^ TE2(s##0) ^ TE3(s##1) ^ rk[4 * i + 2]; \
d##3 = TE0(s##3) ^ TE1(s##0) ^ TE2(s##1) ^ TE3(s##2) ^ rk[4 * i + 3]

    /* Nr - 1 full rounds: */
    r = Nr >> 1;
    158e:	104a      	asrs	r2, r1, #1
    1590:	9201      	str	r2, [sp, #4]
    1592:	4693      	mov	fp, r2
    return __TE[offset];
    1594:	4aa4      	ldr	r2, [pc, #656]	; (1828 <aes_Encrypt+0x2c0>)
    1596:	4684      	mov	ip, r0
    for (;;)
    {
        ROUND(1, t, s);
    1598:	ea4f 6e14 	mov.w	lr, r4, lsr #24
    return __TE[offset];
    159c:	fa5f f885 	uxtb.w	r8, r5
        ROUND(1, t, s);
    15a0:	f8dc 1010 	ldr.w	r1, [ip, #16]
    15a4:	f852 e02e 	ldr.w	lr, [r2, lr, lsl #2]
    15a8:	f852 8028 	ldr.w	r8, [r2, r8, lsl #2]
    15ac:	ea8e 0e01 	eor.w	lr, lr, r1
    15b0:	ea8e 6e38 	eor.w	lr, lr, r8, ror #24
    return __TE[offset];
    15b4:	f3c7 4807 	ubfx	r8, r7, #16, #8
    15b8:	fa5f f984 	uxtb.w	r9, r4
        ROUND(1, t, s);
    15bc:	f852 8028 	ldr.w	r8, [r2, r8, lsl #2]
    15c0:	f8dc 1014 	ldr.w	r1, [ip, #20]
    15c4:	f852 9029 	ldr.w	r9, [r2, r9, lsl #2]
    15c8:	ea8e 2e38 	eor.w	lr, lr, r8, ror #8
    return __TE[offset];
    15cc:	f3c6 2807 	ubfx	r8, r6, #8, #8
    15d0:	fa5f fa87 	uxtb.w	sl, r7
        ROUND(1, t, s);
    15d4:	f852 8028 	ldr.w	r8, [r2, r8, lsl #2]
    15d8:	f852 a02a 	ldr.w	sl, [r2, sl, lsl #2]
    15dc:	ea8e 4e38 	eor.w	lr, lr, r8, ror #16
    15e0:	ea4f 6817 	mov.w	r8, r7, lsr #24
    return __TE[offset];
    15e4:	f3c7 2707 	ubfx	r7, r7, #8, #8
        ROUND(1, t, s);
    15e8:	f852 8028 	ldr.w	r8, [r2, r8, lsl #2]
    15ec:	ea88 0801 	eor.w	r8, r8, r1
    15f0:	ea88 6839 	eor.w	r8, r8, r9, ror #24
    return __TE[offset];
    15f4:	f3c6 4907 	ubfx	r9, r6, #16, #8
        ROUND(1, t, s);
    15f8:	f8dc 1018 	ldr.w	r1, [ip, #24]
    15fc:	f852 9029 	ldr.w	r9, [r2, r9, lsl #2]
    1600:	ea88 2839 	eor.w	r8, r8, r9, ror #8
    return __TE[offset];
    1604:	f3c5 2907 	ubfx	r9, r5, #8, #8
        rk += 8;
        if (--r == 0)
    1608:	f1bb 0b01 	subs.w	fp, fp, #1
        ROUND(1, t, s);
    160c:	f852 9029 	ldr.w	r9, [r2, r9, lsl #2]
    1610:	ea88 4839 	eor.w	r8, r8, r9, ror #16
    1614:	ea4f 6916 	mov.w	r9, r6, lsr #24
    return __TE[offset];
    1618:	b2f6      	uxtb	r6, r6
        ROUND(1, t, s);
    161a:	f852 9029 	ldr.w	r9, [r2, r9, lsl #2]
    161e:	f852 6026 	ldr.w	r6, [r2, r6, lsl #2]
    1622:	ea89 0901 	eor.w	r9, r9, r1
    1626:	ea89 693a 	eor.w	r9, r9, sl, ror #24
    return __TE[offset];
    162a:	f3c5 4a07 	ubfx	sl, r5, #16, #8
        ROUND(1, t, s);
    162e:	ea4f 6515 	mov.w	r5, r5, lsr #24
    1632:	f852 a02a 	ldr.w	sl, [r2, sl, lsl #2]
    1636:	f8dc 101c 	ldr.w	r1, [ip, #28]
    163a:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
    163e:	ea89 293a 	eor.w	r9, r9, sl, ror #8
    return __TE[offset];
    1642:	f3c4 2a07 	ubfx	sl, r4, #8, #8
    1646:	f3c4 4407 	ubfx	r4, r4, #16, #8
        ROUND(1, t, s);
    164a:	ea85 0501 	eor.w	r5, r5, r1
    164e:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
    1652:	f852 a02a 	ldr.w	sl, [r2, sl, lsl #2]
    1656:	ea85 6536 	eor.w	r5, r5, r6, ror #24
    165a:	ea85 2534 	eor.w	r5, r5, r4, ror #8
    165e:	f852 4027 	ldr.w	r4, [r2, r7, lsl #2]
    1662:	ea85 4534 	eor.w	r5, r5, r4, ror #16
    1666:	ea4f 6615 	mov.w	r6, r5, lsr #24
    166a:	ea89 493a 	eor.w	r9, r9, sl, ror #16
        if (--r == 0)
    166e:	f852 1026 	ldr.w	r1, [r2, r6, lsl #2]
    1672:	9102      	str	r1, [sp, #8]
    1674:	f3ce 4607 	ubfx	r6, lr, #16, #8
    1678:	f85c 4f20 	ldr.w	r4, [ip, #32]!
    167c:	f852 1026 	ldr.w	r1, [r2, r6, lsl #2]
    1680:	9103      	str	r1, [sp, #12]
    1682:	f3c8 2607 	ubfx	r6, r8, #8, #8
    1686:	f852 1026 	ldr.w	r1, [r2, r6, lsl #2]
    168a:	9104      	str	r1, [sp, #16]
    168c:	fa5f f689 	uxtb.w	r6, r9
    1690:	f852 1026 	ldr.w	r1, [r2, r6, lsl #2]
    1694:	9105      	str	r1, [sp, #20]
    1696:	fa5f f688 	uxtb.w	r6, r8
    169a:	f852 1026 	ldr.w	r1, [r2, r6, lsl #2]
    169e:	9106      	str	r1, [sp, #24]
    16a0:	f3ce 2607 	ubfx	r6, lr, #8, #8
    16a4:	f852 1026 	ldr.w	r1, [r2, r6, lsl #2]
    16a8:	9107      	str	r1, [sp, #28]
    16aa:	f3c5 4607 	ubfx	r6, r5, #16, #8
    16ae:	f852 1026 	ldr.w	r1, [r2, r6, lsl #2]
    16b2:	9108      	str	r1, [sp, #32]
    16b4:	ea4f 6619 	mov.w	r6, r9, lsr #24
    16b8:	f852 1026 	ldr.w	r1, [r2, r6, lsl #2]
    16bc:	9109      	str	r1, [sp, #36]	; 0x24
    16be:	fa5f f68e 	uxtb.w	r6, lr
    16c2:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
    16c6:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
    16ca:	f852 e02e 	ldr.w	lr, [r2, lr, lsl #2]
    16ce:	f3c5 2607 	ubfx	r6, r5, #8, #8
    16d2:	b2ed      	uxtb	r5, r5
    16d4:	f852 a026 	ldr.w	sl, [r2, r6, lsl #2]
    16d8:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
    16dc:	f3c9 4607 	ubfx	r6, r9, #16, #8
    16e0:	f3c9 2907 	ubfx	r9, r9, #8, #8
    16e4:	f852 1026 	ldr.w	r1, [r2, r6, lsl #2]
    16e8:	f852 9029 	ldr.w	r9, [r2, r9, lsl #2]
    16ec:	ea4f 6618 	mov.w	r6, r8, lsr #24
    16f0:	f3c8 4807 	ubfx	r8, r8, #16, #8
    16f4:	f852 6026 	ldr.w	r6, [r2, r6, lsl #2]
    16f8:	f852 8028 	ldr.w	r8, [r2, r8, lsl #2]
    16fc:	d02c      	beq.n	1758 <aes_Encrypt+0x1f0>
            break;
        ROUND(0, s, t);
    16fe:	ea84 040e 	eor.w	r4, r4, lr
    1702:	ea84 6435 	eor.w	r4, r4, r5, ror #24
    1706:	f8dc 5004 	ldr.w	r5, [ip, #4]
    170a:	406e      	eors	r6, r5
    170c:	ea86 6637 	eor.w	r6, r6, r7, ror #24
    1710:	ea86 2731 	eor.w	r7, r6, r1, ror #8
    1714:	9d09      	ldr	r5, [sp, #36]	; 0x24
    1716:	f8dc 6008 	ldr.w	r6, [ip, #8]
    171a:	9906      	ldr	r1, [sp, #24]
    171c:	4075      	eors	r5, r6
    171e:	ea85 6631 	eor.w	r6, r5, r1, ror #24
    1722:	9908      	ldr	r1, [sp, #32]
    1724:	f8dc 500c 	ldr.w	r5, [ip, #12]
    1728:	ea86 2631 	eor.w	r6, r6, r1, ror #8
    172c:	9907      	ldr	r1, [sp, #28]
    172e:	ea86 4631 	eor.w	r6, r6, r1, ror #16
    1732:	9902      	ldr	r1, [sp, #8]
    1734:	4069      	eors	r1, r5
    1736:	460d      	mov	r5, r1
    1738:	9905      	ldr	r1, [sp, #20]
    173a:	ea85 6531 	eor.w	r5, r5, r1, ror #24
    173e:	9903      	ldr	r1, [sp, #12]
    1740:	ea85 2531 	eor.w	r5, r5, r1, ror #8
    1744:	9904      	ldr	r1, [sp, #16]
    1746:	ea84 2438 	eor.w	r4, r4, r8, ror #8
    174a:	ea84 4439 	eor.w	r4, r4, r9, ror #16
    174e:	ea87 473a 	eor.w	r7, r7, sl, ror #16
    1752:	ea85 4531 	eor.w	r5, r5, r1, ror #16
        ROUND(1, t, s);
    1756:	e71f      	b.n	1598 <aes_Encrypt+0x30>
    }

#undef ROUND

    s0 = TE41(t0) ^ TE42(t1) ^ TE43(t2) ^ TE44(t3) ^ rk[0];
    1758:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
    175c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
    1760:	f00e 4e7f 	and.w	lr, lr, #4278190080	; 0xff000000
    1764:	f3c5 2507 	ubfx	r5, r5, #8, #8
    1768:	f408 087f 	and.w	r8, r8, #16711680	; 0xff0000
    176c:	ea45 0509 	orr.w	r5, r5, r9
    1770:	ea4e 0808 	orr.w	r8, lr, r8
    1774:	9a01      	ldr	r2, [sp, #4]
    1776:	ea85 0508 	eor.w	r5, r5, r8
    177a:	406c      	eors	r4, r5
    177c:	eb00 1042 	add.w	r0, r0, r2, lsl #5
    PUT32(ct, s0);
    1780:	0e22      	lsrs	r2, r4, #24
    1782:	701a      	strb	r2, [r3, #0]
    1784:	0c22      	lsrs	r2, r4, #16
    1786:	705a      	strb	r2, [r3, #1]
    1788:	0a22      	lsrs	r2, r4, #8
    178a:	709a      	strb	r2, [r3, #2]
    s1 = TE41(t1) ^ TE42(t2) ^ TE43(t3) ^ TE44(t0) ^ rk[1];
    178c:	0232      	lsls	r2, r6, #8
    178e:	f401 0b7f 	and.w	fp, r1, #16711680	; 0xff0000
    1792:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
    1796:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
    179a:	f3c7 2707 	ubfx	r7, r7, #8, #8
    PUT32(ct, s0);
    179e:	70dc      	strb	r4, [r3, #3]
    s1 = TE41(t1) ^ TE42(t2) ^ TE43(t3) ^ TE44(t0) ^ rk[1];
    17a0:	ea42 020b 	orr.w	r2, r2, fp
    17a4:	ea47 070a 	orr.w	r7, r7, sl
    17a8:	4057      	eors	r7, r2
    17aa:	6842      	ldr	r2, [r0, #4]
    17ac:	407a      	eors	r2, r7
    PUT32(ct + 4, s1);
    17ae:	0e11      	lsrs	r1, r2, #24
    17b0:	7119      	strb	r1, [r3, #4]
    17b2:	0c11      	lsrs	r1, r2, #16
    17b4:	7159      	strb	r1, [r3, #5]
    17b6:	71da      	strb	r2, [r3, #7]
    17b8:	0a11      	lsrs	r1, r2, #8
    s2 = TE41(t2) ^ TE42(t3) ^ TE43(t0) ^ TE44(t1) ^ rk[2];
    17ba:	9a06      	ldr	r2, [sp, #24]
    PUT32(ct + 4, s1);
    17bc:	7199      	strb	r1, [r3, #6]
    s2 = TE41(t2) ^ TE42(t3) ^ TE43(t0) ^ TE44(t1) ^ rk[2];
    17be:	f3c2 2607 	ubfx	r6, r2, #8, #8
    17c2:	9a07      	ldr	r2, [sp, #28]
    17c4:	9908      	ldr	r1, [sp, #32]
    17c6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
    17ca:	4316      	orrs	r6, r2
    17cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    17ce:	0212      	lsls	r2, r2, #8
    17d0:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    17d4:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
    17d8:	430a      	orrs	r2, r1
    17da:	4056      	eors	r6, r2
    17dc:	6882      	ldr	r2, [r0, #8]
    PUT32(ct + 8, s2);
    s3 = TE41(t3) ^ TE42(t0) ^ TE43(t1) ^ TE44(t2) ^ rk[3];
    17de:	9905      	ldr	r1, [sp, #20]
    s2 = TE41(t2) ^ TE42(t3) ^ TE43(t0) ^ TE44(t1) ^ rk[2];
    17e0:	4056      	eors	r6, r2
    PUT32(ct + 8, s2);
    17e2:	0e32      	lsrs	r2, r6, #24
    17e4:	721a      	strb	r2, [r3, #8]
    17e6:	0c32      	lsrs	r2, r6, #16
    17e8:	725a      	strb	r2, [r3, #9]
    17ea:	0a32      	lsrs	r2, r6, #8
    17ec:	729a      	strb	r2, [r3, #10]
    s3 = TE41(t3) ^ TE42(t0) ^ TE43(t1) ^ TE44(t2) ^ rk[3];
    17ee:	9a02      	ldr	r2, [sp, #8]
    PUT32(ct + 8, s2);
    17f0:	72de      	strb	r6, [r3, #11]
    s3 = TE41(t3) ^ TE42(t0) ^ TE43(t1) ^ TE44(t2) ^ rk[3];
    17f2:	0215      	lsls	r5, r2, #8
    17f4:	9a03      	ldr	r2, [sp, #12]
    17f6:	f005 457f 	and.w	r5, r5, #4278190080	; 0xff000000
    17fa:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
    17fe:	432a      	orrs	r2, r5
    1800:	f3c1 2507 	ubfx	r5, r1, #8, #8
    1804:	9904      	ldr	r1, [sp, #16]
    1806:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    180a:	430d      	orrs	r5, r1
    180c:	4055      	eors	r5, r2
    180e:	68c2      	ldr	r2, [r0, #12]
    1810:	4055      	eors	r5, r2
    PUT32(ct + 12, s3);
    1812:	0e2a      	lsrs	r2, r5, #24
    1814:	731a      	strb	r2, [r3, #12]
    1816:	0c2a      	lsrs	r2, r5, #16
    1818:	735a      	strb	r2, [r3, #13]
    181a:	0a2a      	lsrs	r2, r5, #8
    181c:	739a      	strb	r2, [r3, #14]
    181e:	73dd      	strb	r5, [r3, #15]
}
    1820:	b00b      	add	sp, #44	; 0x2c
    1822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1826:	bf00      	nop
    1828:	0001c98c 	.word	0x0001c98c

0000182c <cip_crypt>:
    unsigned char* systemTitle,
    unsigned char* key,
    gxByteBuffer* input,
    unsigned char encrypt)
#endif //DLMS_IGNORE_MALLOC
{
    182c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1830:	b0db      	sub	sp, #364	; 0x16c
    int ret;
    uint32_t aes[61] = { 0 };
    unsigned char H[16] = { 0 };
    1832:	2400      	movs	r4, #0
{
    1834:	9002      	str	r0, [sp, #8]
    1836:	9203      	str	r2, [sp, #12]
    1838:	460e      	mov	r6, r1
    uint32_t aes[61] = { 0 };
    183a:	22f4      	movs	r2, #244	; 0xf4
    183c:	2100      	movs	r1, #0
    183e:	a81d      	add	r0, sp, #116	; 0x74
{
    1840:	4699      	mov	r9, r3
    1842:	f89d b190 	ldrb.w	fp, [sp, #400]	; 0x190
    1846:	9d67      	ldr	r5, [sp, #412]	; 0x19c
    1848:	f89d 71a0 	ldrb.w	r7, [sp, #416]	; 0x1a0
    uint32_t aes[61] = { 0 };
    184c:	f01a fc83 	bl	1c156 <memset>
    unsigned char J0[16] = { 0 };
    unsigned char S[16] = { 0 };
    unsigned char NONSE[18] = { 0 };
    1850:	220e      	movs	r2, #14
    1852:	4621      	mov	r1, r4
    1854:	a819      	add	r0, sp, #100	; 0x64
    unsigned char H[16] = { 0 };
    1856:	e9cd 4408 	strd	r4, r4, [sp, #32]
    185a:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
    unsigned char J0[16] = { 0 };
    185e:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
    1862:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
    unsigned char S[16] = { 0 };
    1866:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
    186a:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
    unsigned char NONSE[18] = { 0 };
    186e:	9418      	str	r4, [sp, #96]	; 0x60
    1870:	f01a fc71 	bl	1c156 <memset>
    gxByteBuffer nonse;
    if (memcmp(systemTitle, EMPTY_SYSTEM_TITLE, 8) == 0)
    1874:	497a      	ldr	r1, [pc, #488]	; (1a60 <cip_crypt+0x234>)
    1876:	9865      	ldr	r0, [sp, #404]	; 0x194
    1878:	2208      	movs	r2, #8
    187a:	f01a fc23 	bl	1c0c4 <memcmp>
    187e:	2800      	cmp	r0, #0
    1880:	f000 81a8 	beq.w	1bd4 <cip_crypt+0x3a8>
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    bb_attach(&nonse, NONSE, 0, sizeof(NONSE));
    1884:	4622      	mov	r2, r4
    1886:	2312      	movs	r3, #18
    1888:	a918      	add	r1, sp, #96	; 0x60
    188a:	a805      	add	r0, sp, #20
    188c:	f00b fb49 	bl	cf22 <bb_attach>
    if ((ret = bb_capacity(nonce, 12)) != 0 ||
    1890:	210c      	movs	r1, #12
    1892:	a805      	add	r0, sp, #20
    nonce->size = 0;
    1894:	f8ad 401a 	strh.w	r4, [sp, #26]
    if ((ret = bb_capacity(nonce, 12)) != 0 ||
    1898:	f00b f9aa 	bl	cbf0 <bb_capacity>
    189c:	4604      	mov	r4, r0
    189e:	2800      	cmp	r0, #0
    18a0:	f040 8190 	bne.w	1bc4 <cip_crypt+0x398>
        (ret = bb_set(nonce, systemTitle, 8)) != 0 ||
    18a4:	9965      	ldr	r1, [sp, #404]	; 0x194
    18a6:	2208      	movs	r2, #8
    18a8:	a805      	add	r0, sp, #20
    18aa:	f00b faea 	bl	ce82 <bb_set>
    if ((ret = bb_capacity(nonce, 12)) != 0 ||
    18ae:	4604      	mov	r4, r0
    18b0:	2800      	cmp	r0, #0
    18b2:	f040 8187 	bne.w	1bc4 <cip_crypt+0x398>
        (ret = bb_setUInt32(nonce, frameCounter)) != 0)
    18b6:	4649      	mov	r1, r9
    18b8:	a805      	add	r0, sp, #20
    18ba:	f00b fa40 	bl	cd3e <bb_setUInt32>
        (ret = bb_set(nonce, systemTitle, 8)) != 0 ||
    18be:	4604      	mov	r4, r0
    18c0:	2800      	cmp	r0, #0
    18c2:	f040 817f 	bne.w	1bc4 <cip_crypt+0x398>
    if ((ret = cip_getNonse(frameCounter, systemTitle, &nonse)) != 0)
    {
        return ret;
    }
    if ((ret = cip_int(
    18c6:	9b66      	ldr	r3, [sp, #408]	; 0x198
    18c8:	2280      	movs	r2, #128	; 0x80
    18ca:	6819      	ldr	r1, [r3, #0]
    18cc:	a81d      	add	r0, sp, #116	; 0x74
    18ce:	f7ff fd4b 	bl	1368 <cip_int>
    18d2:	4604      	mov	r4, r0
    18d4:	2800      	cmp	r0, #0
    18d6:	f040 8175 	bne.w	1bc4 <cip_crypt+0x398>
        return ret;
    }
    aes[60] = 10;

    //Hash subkey.
    aes_Encrypt(aes, aes[60], H, H);
    18da:	ab08      	add	r3, sp, #32
    aes[60] = 10;
    18dc:	210a      	movs	r1, #10
    aes_Encrypt(aes, aes[60], H, H);
    18de:	461a      	mov	r2, r3
    18e0:	a81d      	add	r0, sp, #116	; 0x74
    aes[60] = 10;
    18e2:	9159      	str	r1, [sp, #356]	; 0x164
    aes_Encrypt(aes, aes[60], H, H);
    18e4:	f7ff fe40 	bl	1568 <aes_Encrypt>
    cip_init_j0(nonse.data, (unsigned char)nonse.size, H, J0);
    18e8:	f89d 801a 	ldrb.w	r8, [sp, #26]
    18ec:	f8dd a014 	ldr.w	sl, [sp, #20]
    if (len == 12)
    18f0:	f1b8 0f0c 	cmp.w	r8, #12
    18f4:	d176      	bne.n	19e4 <cip_crypt+0x1b8>
        memcpy(J0, iv, len);
    18f6:	f8da 0000 	ldr.w	r0, [sl]
    18fa:	f8da 1004 	ldr.w	r1, [sl, #4]
    18fe:	ab0c      	add	r3, sp, #48	; 0x30
    1900:	c303      	stmia	r3!, {r0, r1}
    1902:	f8da 0008 	ldr.w	r0, [sl, #8]
    1906:	6018      	str	r0, [r3, #0]
        J0[15] = 0x01;
    1908:	2301      	movs	r3, #1
        memset(J0 + len, 0, 16 - len);
    190a:	f8ad 403c 	strh.w	r4, [sp, #60]	; 0x3c
    190e:	f88d 403e 	strb.w	r4, [sp, #62]	; 0x3e
        J0[15] = 0x01;
    1912:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
    //Allocate space for authentication tag.
    if (security != DLMS_SECURITY_ENCRYPTION && !encrypt)
    1916:	2e20      	cmp	r6, #32
    1918:	f000 8092 	beq.w	1a40 <cip_crypt+0x214>
    191c:	2f00      	cmp	r7, #0
    191e:	f040 815c 	bne.w	1bda <cip_crypt+0x3ae>
    {
        //Save authentication key to nonse.
        bb_clear(&nonse);
    1922:	a805      	add	r0, sp, #20
    1924:	f00b fb21 	bl	cf6a <bb_clear>
        ret = bb_set(&nonse, input->data + input->size - 12, 12);
    1928:	88eb      	ldrh	r3, [r5, #6]
    192a:	6829      	ldr	r1, [r5, #0]
    192c:	3b0c      	subs	r3, #12
    192e:	4419      	add	r1, r3
    1930:	220c      	movs	r2, #12
    1932:	a805      	add	r0, sp, #20
    1934:	f00b faa5 	bl	ce82 <bb_set>
        input->size -= 12;
    1938:	88eb      	ldrh	r3, [r5, #6]
    193a:	3b0c      	subs	r3, #12
        ret = bb_set(&nonse, input->data + input->size - 12, 12);
    193c:	4604      	mov	r4, r0
        input->size -= 12;
    193e:	80eb      	strh	r3, [r5, #6]
    }

    if (security == DLMS_SECURITY_AUTHENTICATION)
    1940:	2e10      	cmp	r6, #16
    1942:	f040 808f 	bne.w	1a64 <cip_crypt+0x238>
    {
        if ((ret = bb_move(input, input->position, 17, bb_available(input))) == 0)
    1946:	4628      	mov	r0, r5
    1948:	892c      	ldrh	r4, [r5, #8]
    194a:	f00b f93e 	bl	cbca <bb_available>
    194e:	4621      	mov	r1, r4
    1950:	4603      	mov	r3, r0
    1952:	2211      	movs	r2, #17
    1954:	4628      	mov	r0, r5
    1956:	f00b fc8e 	bl	d276 <bb_move>
    195a:	4604      	mov	r4, r0
    195c:	2800      	cmp	r0, #0
    195e:	f040 8131 	bne.w	1bc4 <cip_crypt+0x398>
        {
            input->position = 0;
            bb_setUInt8ByIndex(input, 0, security);
    1962:	4601      	mov	r1, r0
            input->position = 0;
    1964:	8128      	strh	r0, [r5, #8]
            bb_setUInt8ByIndex(input, 0, security);
    1966:	4632      	mov	r2, r6
    1968:	4628      	mov	r0, r5
    196a:	f00b f995 	bl	cc98 <bb_setUInt8ByIndex>
    196e:	9b02      	ldr	r3, [sp, #8]
#ifndef DLMS_IGNORE_MALLOC
            memcpy(input->data + 1, settings->authenticationKey.data, 16);
    1970:	682a      	ldr	r2, [r5, #0]
    1972:	6a1b      	ldr	r3, [r3, #32]
    1974:	3201      	adds	r2, #1
    1976:	f103 0110 	add.w	r1, r3, #16
    197a:	f853 0b04 	ldr.w	r0, [r3], #4
    197e:	f842 0b04 	str.w	r0, [r2], #4
    1982:	428b      	cmp	r3, r1
    1984:	d1f9      	bne.n	197a <cip_crypt+0x14e>
#else
            memcpy(input->data + 1, settings->authenticationKey, 16);
#endif //DLMS_IGNORE_MALLOC
            aes_gcm_ghash(H, input->data, input->size, input->data, 0, S);
    1986:	f10d 0a40 	add.w	sl, sp, #64	; 0x40
    198a:	f04f 0800 	mov.w	r8, #0
    198e:	f8cd a004 	str.w	sl, [sp, #4]
    1992:	f8cd 8000 	str.w	r8, [sp]
    1996:	682b      	ldr	r3, [r5, #0]
    1998:	88ea      	ldrh	r2, [r5, #6]
    199a:	4619      	mov	r1, r3
    199c:	a808      	add	r0, sp, #32
    199e:	f00b fdbd 	bl	d51c <aes_gcm_ghash>
            ret = bb_move(input, 17, 0, input->size - 17);
    19a2:	88eb      	ldrh	r3, [r5, #6]
    19a4:	3b11      	subs	r3, #17
    19a6:	b29b      	uxth	r3, r3
    19a8:	4642      	mov	r2, r8
    19aa:	2111      	movs	r1, #17
    19ac:	4628      	mov	r0, r5
    19ae:	f00b fc62 	bl	d276 <bb_move>
            cip_gctr(aes, J0, S, sizeof(S), input->data + input->size);
    19b2:	88ea      	ldrh	r2, [r5, #6]
    19b4:	682b      	ldr	r3, [r5, #0]
    19b6:	4413      	add	r3, r2
    19b8:	9300      	str	r3, [sp, #0]
    19ba:	a90c      	add	r1, sp, #48	; 0x30
            ret = bb_move(input, 17, 0, input->size - 17);
    19bc:	4604      	mov	r4, r0
    if (len == 0)
    19be:	2310      	movs	r3, #16
    19c0:	4652      	mov	r2, sl
    19c2:	a81d      	add	r0, sp, #116	; 0x74
    19c4:	f00b fde2 	bl	d58c <cip_gctr.part.0>
            if (encrypt)
    19c8:	88e9      	ldrh	r1, [r5, #6]
    19ca:	b36f      	cbz	r7, 1a28 <cip_crypt+0x1fc>
            {
                if (type == DLMS_COUNT_TYPE_TAG)
    19cc:	9b03      	ldr	r3, [sp, #12]
    19ce:	2b01      	cmp	r3, #1
    19d0:	d127      	bne.n	1a22 <cip_crypt+0x1f6>
                {
                    bb_move(input, input->size, 0, 12);
    19d2:	230c      	movs	r3, #12
    19d4:	4642      	mov	r2, r8
    19d6:	4628      	mov	r0, r5
    19d8:	f00b fc4d 	bl	d276 <bb_move>
                    }
                }
            }
        }
    }
    if (ret == 0 && encrypt && type == DLMS_COUNT_TYPE_PACKET)
    19dc:	2c00      	cmp	r4, #0
    19de:	f000 80a6 	beq.w	1b2e <cip_crypt+0x302>
    19e2:	e0ef      	b.n	1bc4 <cip_crypt+0x398>
        memset(J0, 0, 16);
    19e4:	4621      	mov	r1, r4
    19e6:	2210      	movs	r2, #16
    19e8:	a80c      	add	r0, sp, #48	; 0x30
    19ea:	f01a fbb4 	bl	1c156 <memset>
        cip_getGHash(H, iv, len, J0);
    19ee:	ab0c      	add	r3, sp, #48	; 0x30
    19f0:	4642      	mov	r2, r8
    19f2:	4651      	mov	r1, sl
    19f4:	a808      	add	r0, sp, #32
    19f6:	f00b fd49 	bl	d48c <cip_getGHash>
        PUT32(tmp + 12, (uint32_t)(len * 8));
    19fa:	ea4f 1358 	mov.w	r3, r8, lsr #5
    19fe:	f88d 305e 	strb.w	r3, [sp, #94]	; 0x5e
    1a02:	ea4f 08c8 	mov.w	r8, r8, lsl #3
        cip_getGHash(H, tmp, sizeof(tmp), J0);
    1a06:	ab0c      	add	r3, sp, #48	; 0x30
    1a08:	2210      	movs	r2, #16
    1a0a:	a914      	add	r1, sp, #80	; 0x50
    1a0c:	a808      	add	r0, sp, #32
        PUT32(tmp + 4, (uint32_t)0);
    1a0e:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
        PUT32(tmp + 8, (uint32_t)0);
    1a12:	9416      	str	r4, [sp, #88]	; 0x58
        PUT32(tmp + 12, (uint32_t)(len * 8));
    1a14:	f8ad 405c 	strh.w	r4, [sp, #92]	; 0x5c
    1a18:	f88d 805f 	strb.w	r8, [sp, #95]	; 0x5f
        cip_getGHash(H, tmp, sizeof(tmp), J0);
    1a1c:	f00b fd36 	bl	d48c <cip_getGHash>
    1a20:	e779      	b.n	1916 <cip_crypt+0xea>
                    input->size += 12;
    1a22:	310c      	adds	r1, #12
    1a24:	80e9      	strh	r1, [r5, #6]
    1a26:	e7d9      	b.n	19dc <cip_crypt+0x1b0>
                if (memcmp(NONSE, input->data + input->size, 12) != 0)
    1a28:	682b      	ldr	r3, [r5, #0]
    1a2a:	220c      	movs	r2, #12
    1a2c:	4419      	add	r1, r3
    1a2e:	a818      	add	r0, sp, #96	; 0x60
    1a30:	f01a fb48 	bl	1c0c4 <memcmp>
    1a34:	2800      	cmp	r0, #0
    1a36:	f000 80d2 	beq.w	1bde <cip_crypt+0x3b2>
                        ret = DLMS_ERROR_CODE_INVALID_TAG;
    1a3a:	f240 140f 	movw	r4, #271	; 0x10f
    1a3e:	e0c1      	b.n	1bc4 <cip_crypt+0x398>
        aes_gcm_gctr(aes, J0, input->data + input->position, bb_available(input), NULL);
    1a40:	682a      	ldr	r2, [r5, #0]
    1a42:	892c      	ldrh	r4, [r5, #8]
    1a44:	4628      	mov	r0, r5
    1a46:	4414      	add	r4, r2
    1a48:	f00b f8bf 	bl	cbca <bb_available>
    1a4c:	4622      	mov	r2, r4
    1a4e:	4603      	mov	r3, r0
    1a50:	a90c      	add	r1, sp, #48	; 0x30
    1a52:	a81d      	add	r0, sp, #116	; 0x74
    1a54:	f00b fdec 	bl	d630 <aes_gcm_gctr.constprop.0>
    if (ret == 0 && encrypt && type == DLMS_COUNT_TYPE_PACKET)
    1a58:	2f00      	cmp	r7, #0
    1a5a:	f000 80b2 	beq.w	1bc2 <cip_crypt+0x396>
    1a5e:	e066      	b.n	1b2e <cip_crypt+0x302>
    1a60:	0001d5db 	.word	0x0001d5db
    else if (security == DLMS_SECURITY_AUTHENTICATION_ENCRYPTION)
    1a64:	2e30      	cmp	r6, #48	; 0x30
    1a66:	f040 80b1 	bne.w	1bcc <cip_crypt+0x3a0>
        if (encrypt)
    1a6a:	b15f      	cbz	r7, 1a84 <cip_crypt+0x258>
            aes_gcm_gctr(aes, J0, input->data + input->position, bb_available(input), NULL);
    1a6c:	682a      	ldr	r2, [r5, #0]
    1a6e:	892c      	ldrh	r4, [r5, #8]
    1a70:	4628      	mov	r0, r5
    1a72:	4414      	add	r4, r2
    1a74:	f00b f8a9 	bl	cbca <bb_available>
    1a78:	4622      	mov	r2, r4
    1a7a:	4603      	mov	r3, r0
    1a7c:	a90c      	add	r1, sp, #48	; 0x30
    1a7e:	a81d      	add	r0, sp, #116	; 0x74
    1a80:	f00b fdd6 	bl	d630 <aes_gcm_gctr.constprop.0>
        if ((ret = bb_move(input, input->position, 17, bb_available(input))) == 0)
    1a84:	4628      	mov	r0, r5
    1a86:	892c      	ldrh	r4, [r5, #8]
    1a88:	f00b f89f 	bl	cbca <bb_available>
    1a8c:	4621      	mov	r1, r4
    1a8e:	4603      	mov	r3, r0
    1a90:	2211      	movs	r2, #17
    1a92:	4628      	mov	r0, r5
    1a94:	f00b fbef 	bl	d276 <bb_move>
    1a98:	4604      	mov	r4, r0
    1a9a:	2800      	cmp	r0, #0
    1a9c:	f040 8092 	bne.w	1bc4 <cip_crypt+0x398>
            ret = bb_setUInt8ByIndex(input, 0, security);
    1aa0:	4601      	mov	r1, r0
            input->position = 0;
    1aa2:	8128      	strh	r0, [r5, #8]
            ret = bb_setUInt8ByIndex(input, 0, security);
    1aa4:	2230      	movs	r2, #48	; 0x30
    1aa6:	4628      	mov	r0, r5
    1aa8:	f00b f8f6 	bl	cc98 <bb_setUInt8ByIndex>
    1aac:	9b02      	ldr	r3, [sp, #8]
            memcpy(input->data + 1, settings->authenticationKey.data, 16);
    1aae:	682a      	ldr	r2, [r5, #0]
    1ab0:	6a1b      	ldr	r3, [r3, #32]
    1ab2:	3201      	adds	r2, #1
    1ab4:	f103 0110 	add.w	r1, r3, #16
    1ab8:	f853 0b04 	ldr.w	r0, [r3], #4
    1abc:	f842 0b04 	str.w	r0, [r2], #4
    1ac0:	428b      	cmp	r3, r1
    1ac2:	d1f9      	bne.n	1ab8 <cip_crypt+0x28c>
            aes_gcm_ghash(H, input->data, 17, input->data + 17, input->size - 17, S);
    1ac4:	f10d 0840 	add.w	r8, sp, #64	; 0x40
    1ac8:	6829      	ldr	r1, [r5, #0]
    1aca:	f8cd 8004 	str.w	r8, [sp, #4]
    1ace:	88eb      	ldrh	r3, [r5, #6]
    1ad0:	3b11      	subs	r3, #17
    1ad2:	9300      	str	r3, [sp, #0]
    1ad4:	2211      	movs	r2, #17
    1ad6:	f101 0311 	add.w	r3, r1, #17
    1ada:	a808      	add	r0, sp, #32
    1adc:	f00b fd1e 	bl	d51c <aes_gcm_ghash>
            if ((ret = bb_move(input, 17, 0, input->size - 17)) == 0)
    1ae0:	88eb      	ldrh	r3, [r5, #6]
    1ae2:	3b11      	subs	r3, #17
    1ae4:	b29b      	uxth	r3, r3
    1ae6:	2200      	movs	r2, #0
    1ae8:	2111      	movs	r1, #17
    1aea:	4628      	mov	r0, r5
    1aec:	f00b fbc3 	bl	d276 <bb_move>
    1af0:	4604      	mov	r4, r0
    1af2:	2800      	cmp	r0, #0
    1af4:	d166      	bne.n	1bc4 <cip_crypt+0x398>
                if (!encrypt)
    1af6:	b95f      	cbnz	r7, 1b10 <cip_crypt+0x2e4>
                    aes_gcm_gctr(aes, J0, input->data + input->position, bb_available(input), NULL);
    1af8:	682a      	ldr	r2, [r5, #0]
    1afa:	892c      	ldrh	r4, [r5, #8]
    1afc:	4628      	mov	r0, r5
    1afe:	4414      	add	r4, r2
    1b00:	f00b f863 	bl	cbca <bb_available>
    1b04:	4622      	mov	r2, r4
    1b06:	4603      	mov	r3, r0
    1b08:	a90c      	add	r1, sp, #48	; 0x30
    1b0a:	a81d      	add	r0, sp, #116	; 0x74
    1b0c:	f00b fd90 	bl	d630 <aes_gcm_gctr.constprop.0>
                cip_gctr(aes, J0, S, sizeof(S), input->data + input->size);
    1b10:	88ea      	ldrh	r2, [r5, #6]
    1b12:	682b      	ldr	r3, [r5, #0]
    1b14:	4413      	add	r3, r2
    1b16:	9300      	str	r3, [sp, #0]
    1b18:	4642      	mov	r2, r8
    1b1a:	2310      	movs	r3, #16
    1b1c:	a90c      	add	r1, sp, #48	; 0x30
    1b1e:	a81d      	add	r0, sp, #116	; 0x74
    1b20:	f00b fd34 	bl	d58c <cip_gctr.part.0>
                    input->size += 12;
    1b24:	88eb      	ldrh	r3, [r5, #6]
                if (encrypt)
    1b26:	2f00      	cmp	r7, #0
    1b28:	d042      	beq.n	1bb0 <cip_crypt+0x384>
                    input->size += 12;
    1b2a:	330c      	adds	r3, #12
    1b2c:	80eb      	strh	r3, [r5, #6]
    if (ret == 0 && encrypt && type == DLMS_COUNT_TYPE_PACKET)
    1b2e:	9b03      	ldr	r3, [sp, #12]
    1b30:	2b03      	cmp	r3, #3
    1b32:	d146      	bne.n	1bc2 <cip_crypt+0x396>
    {
        if ((ret = bb_clear(&nonse)) == 0 &&
    1b34:	a805      	add	r0, sp, #20
    1b36:	f00b fa18 	bl	cf6a <bb_clear>
    1b3a:	4604      	mov	r4, r0
    1b3c:	2800      	cmp	r0, #0
    1b3e:	d141      	bne.n	1bc4 <cip_crypt+0x398>
            (ret = bb_setUInt8(&nonse, tag)) == 0)
    1b40:	4659      	mov	r1, fp
    1b42:	a805      	add	r0, sp, #20
    1b44:	f00b f8b7 	bl	ccb6 <bb_setUInt8>
        if ((ret = bb_clear(&nonse)) == 0 &&
    1b48:	4604      	mov	r4, r0
    1b4a:	2800      	cmp	r0, #0
    1b4c:	d13a      	bne.n	1bc4 <cip_crypt+0x398>
        {
            if (tag == DLMS_COMMAND_GENERAL_GLO_CIPHERING ||
    1b4e:	f10b 0325 	add.w	r3, fp, #37	; 0x25
    1b52:	b2db      	uxtb	r3, r3
    1b54:	2b01      	cmp	r3, #1
    1b56:	d808      	bhi.n	1b6a <cip_crypt+0x33e>
                tag == DLMS_COMMAND_GENERAL_DED_CIPHERING)
            {
                hlp_setObjectCount(8, &nonse);
    1b58:	a905      	add	r1, sp, #20
    1b5a:	2008      	movs	r0, #8
    1b5c:	f017 fe9a 	bl	19894 <hlp_setObjectCount>
                bb_set(&nonse, systemTitle, 8);
    1b60:	9965      	ldr	r1, [sp, #404]	; 0x194
    1b62:	2208      	movs	r2, #8
    1b64:	a805      	add	r0, sp, #20
    1b66:	f00b f98c 	bl	ce82 <bb_set>
            }
            if ((ret = hlp_setObjectCount(5 + input->size, &nonse)) == 0 &&
    1b6a:	88e8      	ldrh	r0, [r5, #6]
    1b6c:	a905      	add	r1, sp, #20
    1b6e:	3005      	adds	r0, #5
    1b70:	f017 fe90 	bl	19894 <hlp_setObjectCount>
    1b74:	4604      	mov	r4, r0
    1b76:	bb28      	cbnz	r0, 1bc4 <cip_crypt+0x398>
                (ret = bb_setUInt8(&nonse, security)) == 0 &&
    1b78:	4631      	mov	r1, r6
    1b7a:	a805      	add	r0, sp, #20
    1b7c:	f00b f89b 	bl	ccb6 <bb_setUInt8>
            if ((ret = hlp_setObjectCount(5 + input->size, &nonse)) == 0 &&
    1b80:	4604      	mov	r4, r0
    1b82:	b9f8      	cbnz	r0, 1bc4 <cip_crypt+0x398>
                (ret = bb_setUInt32(&nonse, frameCounter)) == 0 &&
    1b84:	4649      	mov	r1, r9
    1b86:	a805      	add	r0, sp, #20
    1b88:	f00b f8d9 	bl	cd3e <bb_setUInt32>
                (ret = bb_setUInt8(&nonse, security)) == 0 &&
    1b8c:	4604      	mov	r4, r0
    1b8e:	b9c8      	cbnz	r0, 1bc4 <cip_crypt+0x398>
                (ret = bb_insert(nonse.data, nonse.size, input, 0)) == 0)
    1b90:	4603      	mov	r3, r0
    1b92:	f8bd 101a 	ldrh.w	r1, [sp, #26]
    1b96:	9805      	ldr	r0, [sp, #20]
    1b98:	462a      	mov	r2, r5
    1b9a:	f00b fb9d 	bl	d2d8 <bb_insert>
                (ret = bb_setUInt32(&nonse, frameCounter)) == 0 &&
    1b9e:	4604      	mov	r4, r0
    1ba0:	b980      	cbnz	r0, 1bc4 <cip_crypt+0x398>
    1ba2:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    1ba6:	9905      	ldr	r1, [sp, #20]
    1ba8:	6828      	ldr	r0, [r5, #0]
    1baa:	f01a fa99 	bl	1c0e0 <memcpy>
    1bae:	e009      	b.n	1bc4 <cip_crypt+0x398>
                    if (memcmp(NONSE, input->data + input->size, 12) != 0)
    1bb0:	6829      	ldr	r1, [r5, #0]
    1bb2:	220c      	movs	r2, #12
    1bb4:	4419      	add	r1, r3
    1bb6:	a818      	add	r0, sp, #96	; 0x60
    1bb8:	f01a fa84 	bl	1c0c4 <memcmp>
    1bbc:	2800      	cmp	r0, #0
    1bbe:	f47f af3c 	bne.w	1a3a <cip_crypt+0x20e>
{
    1bc2:	2400      	movs	r4, #0
                memcpy(input->data, nonse.data, nonse.size);
            }
        }
    }
    return ret;
}
    1bc4:	4620      	mov	r0, r4
    1bc6:	b05b      	add	sp, #364	; 0x16c
    1bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (ret == 0 && encrypt && type == DLMS_COUNT_TYPE_PACKET)
    1bcc:	2c00      	cmp	r4, #0
    1bce:	f43f af43 	beq.w	1a58 <cip_crypt+0x22c>
    1bd2:	e7f7      	b.n	1bc4 <cip_crypt+0x398>
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    1bd4:	f44f 7481 	mov.w	r4, #258	; 0x102
    1bd8:	e7f4      	b.n	1bc4 <cip_crypt+0x398>
    if ((ret = cip_int(
    1bda:	2400      	movs	r4, #0
    1bdc:	e6b0      	b.n	1940 <cip_crypt+0x114>
    if (ret == 0 && encrypt && type == DLMS_COUNT_TYPE_PACKET)
    1bde:	2c00      	cmp	r4, #0
    1be0:	d0ef      	beq.n	1bc2 <cip_crypt+0x396>
    1be2:	e7ef      	b.n	1bc4 <cip_crypt+0x398>

00001be4 <cip_decrypt>:
    gxByteBuffer* data,
    DLMS_SECURITY* security,
    DLMS_SECURITY_SUITE* suite,
    uint64_t* invocationCounter)
#endif //DLMS_IGNORE_MALLOC
{
    1be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1be8:	b08a      	sub	sp, #40	; 0x28
    1bea:	e9dd 7a12 	ldrd	r7, sl, [sp, #72]	; 0x48
    1bee:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
    1bf2:	4606      	mov	r6, r0
    1bf4:	460d      	mov	r5, r1
    1bf6:	4690      	mov	r8, r2
    int ret;
    unsigned char ch;
    uint32_t frameCounter;
    DLMS_COMMAND cmd;
    unsigned char systemTitle[8];
    if (data == NULL || data->size - data->position < 2)
    1bf8:	461c      	mov	r4, r3
    1bfa:	b913      	cbnz	r3, 1c02 <cip_decrypt+0x1e>
    if ((ret = bb_getUInt8(data, &ch)) != 0)
    {
        return ret;
    }
    cmd = (DLMS_COMMAND)ch;
    switch (cmd)
    1bfc:	f44f 7081 	mov.w	r0, #258	; 0x102
    1c00:	e09f      	b.n	1d42 <cip_decrypt+0x15e>
    if (data == NULL || data->size - data->position < 2)
    1c02:	88db      	ldrh	r3, [r3, #6]
    1c04:	8922      	ldrh	r2, [r4, #8]
    1c06:	1a9b      	subs	r3, r3, r2
    1c08:	2b01      	cmp	r3, #1
    1c0a:	ddf7      	ble.n	1bfc <cip_decrypt+0x18>
    if ((ret = bb_getUInt8(data, &ch)) != 0)
    1c0c:	f10d 0119 	add.w	r1, sp, #25
    1c10:	4620      	mov	r0, r4
    1c12:	f00b f9c0 	bl	cf96 <bb_getUInt8>
    1c16:	2800      	cmp	r0, #0
    1c18:	f040 8093 	bne.w	1d42 <cip_decrypt+0x15e>
    cmd = (DLMS_COMMAND)ch;
    1c1c:	f89d 3019 	ldrb.w	r3, [sp, #25]
    switch (cmd)
    1c20:	2bdc      	cmp	r3, #220	; 0xdc
    1c22:	d8eb      	bhi.n	1bfc <cip_decrypt+0x18>
    1c24:	2bc7      	cmp	r3, #199	; 0xc7
    1c26:	d823      	bhi.n	1c70 <cip_decrypt+0x8c>
    1c28:	2b2d      	cmp	r3, #45	; 0x2d
    1c2a:	d851      	bhi.n	1cd0 <cip_decrypt+0xec>
    1c2c:	2b20      	cmp	r3, #32
    1c2e:	d9e5      	bls.n	1bfc <cip_decrypt+0x18>
    1c30:	3b21      	subs	r3, #33	; 0x21
    1c32:	2b0c      	cmp	r3, #12
    1c34:	d8e2      	bhi.n	1bfc <cip_decrypt+0x18>
    1c36:	a201      	add	r2, pc, #4	; (adr r2, 1c3c <cip_decrypt+0x58>)
    1c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1c3c:	00001cd9 	.word	0x00001cd9
    1c40:	00001bfd 	.word	0x00001bfd
    1c44:	00001bfd 	.word	0x00001bfd
    1c48:	00001bfd 	.word	0x00001bfd
    1c4c:	00001cd9 	.word	0x00001cd9
    1c50:	00001cd9 	.word	0x00001cd9
    1c54:	00001bfd 	.word	0x00001bfd
    1c58:	00001cd9 	.word	0x00001cd9
    1c5c:	00001bfd 	.word	0x00001bfd
    1c60:	00001bfd 	.word	0x00001bfd
    1c64:	00001bfd 	.word	0x00001bfd
    1c68:	00001cd9 	.word	0x00001cd9
    1c6c:	00001cd9 	.word	0x00001cd9
    1c70:	3bc8      	subs	r3, #200	; 0xc8
    1c72:	2b14      	cmp	r3, #20
    1c74:	d8c2      	bhi.n	1bfc <cip_decrypt+0x18>
    1c76:	a201      	add	r2, pc, #4	; (adr r2, 1c7c <cip_decrypt+0x98>)
    1c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1c7c:	00001cd9 	.word	0x00001cd9
    1c80:	00001cd9 	.word	0x00001cd9
    1c84:	00001cd9 	.word	0x00001cd9
    1c88:	00001cd9 	.word	0x00001cd9
    1c8c:	00001cd9 	.word	0x00001cd9
    1c90:	00001cd9 	.word	0x00001cd9
    1c94:	00001bfd 	.word	0x00001bfd
    1c98:	00001cd9 	.word	0x00001cd9
    1c9c:	00001cd9 	.word	0x00001cd9
    1ca0:	00001cd9 	.word	0x00001cd9
    1ca4:	00001cd9 	.word	0x00001cd9
    1ca8:	00001cd9 	.word	0x00001cd9
    1cac:	00001cd9 	.word	0x00001cd9
    1cb0:	00001cd9 	.word	0x00001cd9
    1cb4:	00001bfd 	.word	0x00001bfd
    1cb8:	00001cd9 	.word	0x00001cd9
    1cbc:	00001bfd 	.word	0x00001bfd
    1cc0:	00001bfd 	.word	0x00001bfd
    1cc4:	00001bfd 	.word	0x00001bfd
    1cc8:	00001d49 	.word	0x00001d49
    1ccc:	00001d49 	.word	0x00001d49
    1cd0:	2b41      	cmp	r3, #65	; 0x41
    1cd2:	d001      	beq.n	1cd8 <cip_decrypt+0xf4>
    1cd4:	2b48      	cmp	r3, #72	; 0x48
    1cd6:	d191      	bne.n	1bfc <cip_decrypt+0x18>
    case DLMS_COMMAND_DED_EVENT_NOTIFICATION:
        break;
    default:
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    if ((ret = hlp_getObjectCount2(data, &length)) != 0)
    1cd8:	f10d 011a 	add.w	r1, sp, #26
    1cdc:	4620      	mov	r0, r4
    1cde:	f017 fda8 	bl	19832 <hlp_getObjectCount2>
    1ce2:	bb70      	cbnz	r0, 1d42 <cip_decrypt+0x15e>
    {
        return ret;
    }
    if ((ret = bb_getUInt8(data, &ch)) != 0)
    1ce4:	f10d 0119 	add.w	r1, sp, #25
    1ce8:	4620      	mov	r0, r4
    1cea:	f00b f954 	bl	cf96 <bb_getUInt8>
    1cee:	bb40      	cbnz	r0, 1d42 <cip_decrypt+0x15e>
    {
        return ret;
    }
    *security = (DLMS_SECURITY)(ch & 0x30);
    1cf0:	f89d 3019 	ldrb.w	r3, [sp, #25]
    1cf4:	f003 0230 	and.w	r2, r3, #48	; 0x30
    1cf8:	703a      	strb	r2, [r7, #0]
    if (suite != NULL)
    1cfa:	f1ba 0f00 	cmp.w	sl, #0
    1cfe:	d003      	beq.n	1d08 <cip_decrypt+0x124>
    {
        *suite = (DLMS_SECURITY_SUITE) (ch & 0x3);
    1d00:	f003 0203 	and.w	r2, r3, #3
    1d04:	f88a 2000 	strb.w	r2, [sl]
    }
    //If Key_Set or authentication or encryption is not used.
    if (ch & 0x40 || *security == DLMS_SECURITY_NONE)
    1d08:	065b      	lsls	r3, r3, #25
    1d0a:	f53f af77 	bmi.w	1bfc <cip_decrypt+0x18>
    1d0e:	783b      	ldrb	r3, [r7, #0]
    1d10:	2b00      	cmp	r3, #0
    1d12:	f43f af73 	beq.w	1bfc <cip_decrypt+0x18>
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    if ((ret = bb_getUInt32(data, &frameCounter)) != 0)
    1d16:	a907      	add	r1, sp, #28
    1d18:	4620      	mov	r0, r4
    1d1a:	f00b f97a 	bl	d012 <bb_getUInt32>
    1d1e:	b980      	cbnz	r0, 1d42 <cip_decrypt+0x15e>
    {
        return ret;
    }
    if (invocationCounter != NULL)
    1d20:	9b07      	ldr	r3, [sp, #28]
    1d22:	f1b9 0f00 	cmp.w	r9, #0
    1d26:	d001      	beq.n	1d2c <cip_decrypt+0x148>
    {
        *invocationCounter = frameCounter;
    1d28:	e9c9 3000 	strd	r3, r0, [r9]
    }
    ret = cip_crypt(
    1d2c:	2200      	movs	r2, #0
    1d2e:	e9cd 4203 	strd	r4, r2, [sp, #12]
    1d32:	e9cd 5801 	strd	r5, r8, [sp, #4]
    1d36:	9200      	str	r2, [sp, #0]
    1d38:	7839      	ldrb	r1, [r7, #0]
    1d3a:	2202      	movs	r2, #2
    1d3c:	4630      	mov	r0, r6
    1d3e:	f7ff fd75 	bl	182c <cip_crypt>
        title,
        key,
        data,
        0);
    return ret;
}
    1d42:	b00a      	add	sp, #40	; 0x28
    1d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if ((ret = hlp_getObjectCount2(data, &length)) != 0)
    1d48:	f10d 011a 	add.w	r1, sp, #26
    1d4c:	4620      	mov	r0, r4
    1d4e:	f017 fd70 	bl	19832 <hlp_getObjectCount2>
    1d52:	2800      	cmp	r0, #0
    1d54:	d1f5      	bne.n	1d42 <cip_decrypt+0x15e>
        if (length != 0)
    1d56:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    1d5a:	2a00      	cmp	r2, #0
    1d5c:	d0bc      	beq.n	1cd8 <cip_decrypt+0xf4>
            if (length != 8)
    1d5e:	2a08      	cmp	r2, #8
    1d60:	f47f af4c 	bne.w	1bfc <cip_decrypt+0x18>
            bb_get(data, systemTitle, length);
    1d64:	a908      	add	r1, sp, #32
    1d66:	4620      	mov	r0, r4
    1d68:	f00b faf4 	bl	d354 <bb_get>
            title = systemTitle;
    1d6c:	ad08      	add	r5, sp, #32
    1d6e:	e7b3      	b.n	1cd8 <cip_decrypt+0xf4>

00001d70 <cosem_init4>:
int cosem_init4(
    void* object,
    const uint16_t expectedSize,
    DLMS_OBJECT_TYPE type,
    const unsigned char* ln)
{
    1d70:	b570      	push	{r4, r5, r6, lr}
    1d72:	4604      	mov	r4, r0
    uint16_t size = cosem_getObjectSize(type);
    1d74:	4610      	mov	r0, r2
{
    1d76:	4615      	mov	r5, r2
    1d78:	461e      	mov	r6, r3
    uint16_t size = cosem_getObjectSize(type);
    1d7a:	f00b fc70 	bl	d65e <cosem_getObjectSize>
    if (size == 0)
    1d7e:	4602      	mov	r2, r0
    1d80:	2800      	cmp	r0, #0
    1d82:	d065      	beq.n	1e50 <cosem_init4+0xe0>
    {
        return DLMS_ERROR_CODE_UNAVAILABLE_OBJECT;
    }
    if (expectedSize != 0 && size != expectedSize)
    1d84:	b109      	cbz	r1, 1d8a <cosem_init4+0x1a>
    1d86:	4288      	cmp	r0, r1
    1d88:	d164      	bne.n	1e54 <cosem_init4+0xe4>
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    1d8a:	2100      	movs	r1, #0
    1d8c:	4620      	mov	r0, r4
    1d8e:	f01a f9e2 	bl	1c156 <memset>
    {
        return DLMS_ERROR_CODE_UNMATCH_TYPE;
    }
    memset(object, 0, size);
    ((gxObject*)object)->objectType = type;
    1d92:	8025      	strh	r5, [r4, #0]
    ((gxObject*)object)->logicalName[0] = ln[0];
    1d94:	7833      	ldrb	r3, [r6, #0]
    1d96:	71a3      	strb	r3, [r4, #6]
    ((gxObject*)object)->logicalName[1] = ln[1];
    1d98:	7873      	ldrb	r3, [r6, #1]
    1d9a:	71e3      	strb	r3, [r4, #7]
    ((gxObject*)object)->logicalName[2] = ln[2];
    1d9c:	78b3      	ldrb	r3, [r6, #2]
    1d9e:	7223      	strb	r3, [r4, #8]
    ((gxObject*)object)->logicalName[3] = ln[3];
    1da0:	78f3      	ldrb	r3, [r6, #3]
    1da2:	7263      	strb	r3, [r4, #9]
    ((gxObject*)object)->logicalName[4] = ln[4];
    1da4:	7933      	ldrb	r3, [r6, #4]
    1da6:	72a3      	strb	r3, [r4, #10]
    ((gxObject*)object)->logicalName[5] = ln[5];
    1da8:	7973      	ldrb	r3, [r6, #5]
    1daa:	72e3      	strb	r3, [r4, #11]
    //Set default values, if any.
    switch (type)
    1dac:	2d1d      	cmp	r5, #29
    1dae:	d80f      	bhi.n	1dd0 <cosem_init4+0x60>
    1db0:	2d0b      	cmp	r5, #11
    1db2:	d913      	bls.n	1ddc <cosem_init4+0x6c>
    1db4:	3d0c      	subs	r5, #12
    1db6:	2d11      	cmp	r5, #17
    1db8:	d810      	bhi.n	1ddc <cosem_init4+0x6c>
    1dba:	e8df f005 	tbb	[pc, r5]
    1dbe:	0f2c      	.short	0x0f2c
    1dc0:	0f0f110f 	.word	0x0f0f110f
    1dc4:	0f0f400f 	.word	0x0f0f400f
    1dc8:	0f40320f 	.word	0x0f40320f
    1dcc:	2f0f400f 	.word	0x2f0f400f
    1dd0:	2d2f      	cmp	r5, #47	; 0x2f
    1dd2:	d034      	beq.n	1e3e <cosem_init4+0xce>
    1dd4:	2d48      	cmp	r5, #72	; 0x48
    1dd6:	d032      	beq.n	1e3e <cosem_init4+0xce>
    1dd8:	2d29      	cmp	r5, #41	; 0x29
    1dda:	d032      	beq.n	1e42 <cosem_init4+0xd2>
    1ddc:	2000      	movs	r0, #0
    1dde:	e038      	b.n	1e52 <cosem_init4+0xe2>
#ifndef DLMS_IGNORE_ASSOCIATION_LOGICAL_NAME
    case DLMS_OBJECT_TYPE_ASSOCIATION_LOGICAL_NAME:
    {
        gxAssociationLogicalName* it = (gxAssociationLogicalName*)object;
        ((gxObject*)object)->version = 2;
        it->xDLMSContextInfo.dlmsVersionNumber = 6;
    1de0:	2206      	movs	r2, #6
    1de2:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
        it->applicationContextName.jointIsoCtt = 2;
    1de6:	f241 0202 	movw	r2, #4098	; 0x1002
    1dea:	84e2      	strh	r2, [r4, #38]	; 0x26
        it->applicationContextName.country = 16;
        it->applicationContextName.countryName = 756;
    1dec:	4a1a      	ldr	r2, [pc, #104]	; (1e58 <cosem_init4+0xe8>)
    1dee:	62a2      	str	r2, [r4, #40]	; 0x28
        it->applicationContextName.identifiedOrganization = 5;
        it->applicationContextName.dlmsUA = 8;
        it->applicationContextName.applicationContext = 1;
    1df0:	f240 1201 	movw	r2, #257	; 0x101
    1df4:	85a2      	strh	r2, [r4, #44]	; 0x2c
        it->applicationContextName.contextId = DLMS_APPLICATION_CONTEXT_NAME_LOGICAL_NAME;
        it->authenticationMechanismName.jointIsoCtt = 2;
    1df6:	f102 723d 	add.w	r2, r2, #49545216	; 0x2f40000
        ((gxObject*)object)->version = 2;
    1dfa:	2302      	movs	r3, #2
        it->authenticationMechanismName.jointIsoCtt = 2;
    1dfc:	f602 7201 	addw	r2, r2, #3841	; 0xf01
        ((gxObject*)object)->version = 2;
    1e00:	70a3      	strb	r3, [r4, #2]
        it->authenticationMechanismName.jointIsoCtt = 2;
    1e02:	64a2      	str	r2, [r4, #72]	; 0x48
        it->authenticationMechanismName.country = 16;
        it->authenticationMechanismName.countryName = 756;
        it->authenticationMechanismName.identifiedOrganization = 5;
        it->authenticationMechanismName.dlmsUA = 8;
        it->authenticationMechanismName.authenticationMechanismName = 2;
    1e04:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
        it->authenticationMechanismName.identifiedOrganization = 5;
    1e08:	f640 0205 	movw	r2, #2053	; 0x805
        it->serverSAP = 1;
    1e0c:	2301      	movs	r3, #1
        it->authenticationMechanismName.identifiedOrganization = 5;
    1e0e:	f8a4 204c 	strh.w	r2, [r4, #76]	; 0x4c
        it->serverSAP = 1;
    1e12:	83e3      	strh	r3, [r4, #30]
    }
    break;
    1e14:	e7e2      	b.n	1ddc <cosem_init4+0x6c>
#endif //DLMS_IGNORE_ASSOCIATION_LOGICAL_NAME
#ifndef DLMS_IGNORE_ASSOCIATION_SHORT_NAME
    case DLMS_OBJECT_TYPE_ASSOCIATION_SHORT_NAME:
    {
        ((gxObject*)object)->shortName = 0xFA00;
    1e16:	f44f 437a 	mov.w	r3, #64000	; 0xfa00
    1e1a:	80a3      	strh	r3, [r4, #4]
    break;
#endif //DLMS_IGNORE_ASSOCIATION_SHORT_NAME
    case DLMS_OBJECT_TYPE_AUTO_ANSWER:
        break;
    case DLMS_OBJECT_TYPE_AUTO_CONNECT:
        ((gxObject*)object)->version = 2;
    1e1c:	2302      	movs	r3, #2
        ((gxIecHdlcSetup*)object)->inactivityTimeout = 120;
        ((gxIecHdlcSetup*)object)->deviceAddress = 0x10;
        break;
#endif //DLMS_IGNORE_IEC_HDLC_SETUP
    case DLMS_OBJECT_TYPE_IEC_LOCAL_PORT_SETUP:
        ((gxObject*)object)->version = 1;
    1e1e:	70a3      	strb	r3, [r4, #2]
        break;
    1e20:	e7dc      	b.n	1ddc <cosem_init4+0x6c>
        ((gxIecHdlcSetup*)object)->maximumInfoLengthReceive = 128;
    1e22:	2280      	movs	r2, #128	; 0x80
    1e24:	83a2      	strh	r2, [r4, #28]
        ((gxIecHdlcSetup*)object)->interCharachterTimeout = 25;
    1e26:	2219      	movs	r2, #25
    1e28:	8362      	strh	r2, [r4, #26]
        ((gxIecHdlcSetup*)object)->inactivityTimeout = 120;
    1e2a:	4a0c      	ldr	r2, [pc, #48]	; (1e5c <cosem_init4+0xec>)
    1e2c:	6122      	str	r2, [r4, #16]
        ((gxIecHdlcSetup*)object)->maximumInfoLengthTransmit = 128;
    1e2e:	f502 0275 	add.w	r2, r2, #16056320	; 0xf50000
        ((gxObject*)object)->version = 1;
    1e32:	2301      	movs	r3, #1
        ((gxIecHdlcSetup*)object)->maximumInfoLengthTransmit = 128;
    1e34:	3208      	adds	r2, #8
        ((gxObject*)object)->version = 1;
    1e36:	70a3      	strb	r3, [r4, #2]
        ((gxIecHdlcSetup*)object)->maximumInfoLengthTransmit = 128;
    1e38:	6162      	str	r2, [r4, #20]
        ((gxIecHdlcSetup*)object)->windowSizeReceive = 1;
    1e3a:	7623      	strb	r3, [r4, #24]
        break;
    1e3c:	e7ce      	b.n	1ddc <cosem_init4+0x6c>
        ((gxObject*)object)->version = 1;
    1e3e:	2301      	movs	r3, #1
    1e40:	e7ed      	b.n	1e1e <cosem_init4+0xae>
        break;
    case DLMS_OBJECT_TYPE_STATUS_MAPPING:
        break;
#ifndef DLMS_IGNORE_TCP_UDP_SETUP
    case DLMS_OBJECT_TYPE_TCP_UDP_SETUP:
        ((gxTcpUdpSetup*)object)->maximumSimultaneousConnections = 1;
    1e42:	2301      	movs	r3, #1
    1e44:	7623      	strb	r3, [r4, #24]
        ((gxTcpUdpSetup*)object)->maximumSegmentSize = 40;
    1e46:	2328      	movs	r3, #40	; 0x28
    1e48:	83a3      	strh	r3, [r4, #28]
        ((gxTcpUdpSetup*)object)->inactivityTimeout = 180;
    1e4a:	23b4      	movs	r3, #180	; 0xb4
    1e4c:	8363      	strh	r3, [r4, #26]
        break;
    1e4e:	e7c5      	b.n	1ddc <cosem_init4+0x6c>
        return DLMS_ERROR_CODE_UNAVAILABLE_OBJECT;
    1e50:	200b      	movs	r0, #11
        break;
    default:
        break;
    }
    return 0;
}
    1e52:	bd70      	pop	{r4, r5, r6, pc}
        return DLMS_ERROR_CODE_UNMATCH_TYPE;
    1e54:	200c      	movs	r0, #12
    1e56:	e7fc      	b.n	1e52 <cosem_init4+0xe2>
    1e58:	080502f4 	.word	0x080502f4
    1e5c:	00100078 	.word	0x00100078

00001e60 <cosem_createObject>:
{
    1e60:	b537      	push	{r0, r1, r2, r4, r5, lr}
    unsigned char ln[] = { 0,0,40,0,0,255 };
    1e62:	4b13      	ldr	r3, [pc, #76]	; (1eb0 <cosem_createObject+0x50>)
{
    1e64:	4604      	mov	r4, r0
    unsigned char ln[] = { 0,0,40,0,0,255 };
    1e66:	6818      	ldr	r0, [r3, #0]
    1e68:	9000      	str	r0, [sp, #0]
    1e6a:	889b      	ldrh	r3, [r3, #4]
    1e6c:	f8ad 3004 	strh.w	r3, [sp, #4]
    uint16_t size = cosem_getObjectSize(type);
    1e70:	4620      	mov	r0, r4
{
    1e72:	460d      	mov	r5, r1
    uint16_t size = cosem_getObjectSize(type);
    1e74:	f00b fbf3 	bl	d65e <cosem_getObjectSize>
    if (size == 0)
    1e78:	4601      	mov	r1, r0
    1e7a:	b198      	cbz	r0, 1ea4 <cosem_createObject+0x44>
    *object = (gxObject*)gxcalloc(1, size);
    1e7c:	2001      	movs	r0, #1
    1e7e:	f009 fe91 	bl	bba4 <calloc>
    1e82:	6028      	str	r0, [r5, #0]
    if (*object == NULL)
    1e84:	b180      	cbz	r0, 1ea8 <cosem_createObject+0x48>
    if (type == DLMS_OBJECT_TYPE_ASSOCIATION_LOGICAL_NAME)
    1e86:	2c0f      	cmp	r4, #15
    (*object)->objectType = type;
    1e88:	8004      	strh	r4, [r0, #0]
    if (type == DLMS_OBJECT_TYPE_ASSOCIATION_LOGICAL_NAME)
    1e8a:	d005      	beq.n	1e98 <cosem_createObject+0x38>
    else if (type == DLMS_OBJECT_TYPE_ASSOCIATION_SHORT_NAME)
    1e8c:	2c0c      	cmp	r4, #12
        memset(ln, 0, 6);
    1e8e:	bf1e      	ittt	ne
    1e90:	2300      	movne	r3, #0
    1e92:	9300      	strne	r3, [sp, #0]
    1e94:	f8ad 3004 	strhne.w	r3, [sp, #4]
    ret = cosem_init2(*object, type, ln);
    1e98:	466a      	mov	r2, sp
    1e9a:	4621      	mov	r1, r4
    1e9c:	f00b fc52 	bl	d744 <cosem_init2>
}
    1ea0:	b003      	add	sp, #12
    1ea2:	bd30      	pop	{r4, r5, pc}
        return DLMS_ERROR_CODE_UNAVAILABLE_OBJECT;
    1ea4:	200b      	movs	r0, #11
    1ea6:	e7fb      	b.n	1ea0 <cosem_createObject+0x40>
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    1ea8:	f44f 7082 	mov.w	r0, #260	; 0x104
    1eac:	e7f8      	b.n	1ea0 <cosem_createObject+0x40>
    1eae:	bf00      	nop
    1eb0:	0001c95c 	.word	0x0001c95c

00001eb4 <cosem_findObjectByLN>:
int cosem_findObjectByLN(
    dlmsSettings* settings,
    DLMS_OBJECT_TYPE ot,
    const unsigned char* ln,
    gxObject** object)
{
    1eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1eb8:	4690      	mov	r8, r2
    1eba:	4606      	mov	r6, r0
    1ebc:	460f      	mov	r7, r1
    int ret;
    if (memcmp(ln, EMPTY_LN, sizeof(EMPTY_LN)) != 0)
    1ebe:	2206      	movs	r2, #6
    1ec0:	491a      	ldr	r1, [pc, #104]	; (1f2c <cosem_findObjectByLN+0x78>)
    1ec2:	4640      	mov	r0, r8
{
    1ec4:	461d      	mov	r5, r3
    if (memcmp(ln, EMPTY_LN, sizeof(EMPTY_LN)) != 0)
    1ec6:	f01a f8fd 	bl	1c0c4 <memcmp>
    1eca:	4604      	mov	r4, r0
    1ecc:	b350      	cbz	r0, 1f24 <cosem_findObjectByLN+0x70>
    {
        if ((ret = oa_findByLN(&settings->objects, ot, ln, object)) == 0)
    1ece:	462b      	mov	r3, r5
    1ed0:	4642      	mov	r2, r8
    1ed2:	4639      	mov	r1, r7
    1ed4:	f106 0098 	add.w	r0, r6, #152	; 0x98
    1ed8:	f017 ffa0 	bl	19e1c <oa_findByLN>
    1edc:	4604      	mov	r4, r0
    1ede:	b9f0      	cbnz	r0, 1f1e <cosem_findObjectByLN+0x6a>
        {
#ifndef DLMS_IGNORE_MALLOC
            if (*object == NULL)
    1ee0:	682b      	ldr	r3, [r5, #0]
    1ee2:	b9e3      	cbnz	r3, 1f1e <cosem_findObjectByLN+0x6a>
            {
                if ((ret = oa_findByLN(&settings->releasedObjects, ot, ln, object)) == 0)
    1ee4:	36e4      	adds	r6, #228	; 0xe4
    1ee6:	462b      	mov	r3, r5
    1ee8:	4642      	mov	r2, r8
    1eea:	4639      	mov	r1, r7
    1eec:	4630      	mov	r0, r6
    1eee:	f017 ff95 	bl	19e1c <oa_findByLN>
    1ef2:	b9c8      	cbnz	r0, 1f28 <cosem_findObjectByLN+0x74>
                {
                    if (*object == NULL && ot != DLMS_OBJECT_TYPE_NONE)
    1ef4:	682b      	ldr	r3, [r5, #0]
    1ef6:	b993      	cbnz	r3, 1f1e <cosem_findObjectByLN+0x6a>
    1ef8:	b18f      	cbz	r7, 1f1e <cosem_findObjectByLN+0x6a>
                    {
                        if ((ret = cosem_createObject(ot, object)) == 0)
    1efa:	4629      	mov	r1, r5
    1efc:	4638      	mov	r0, r7
    1efe:	f7ff ffaf 	bl	1e60 <cosem_createObject>
    1f02:	4604      	mov	r4, r0
    1f04:	b958      	cbnz	r0, 1f1e <cosem_findObjectByLN+0x6a>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    1f06:	682b      	ldr	r3, [r5, #0]
    1f08:	f8d8 2000 	ldr.w	r2, [r8]
    1f0c:	f8c3 2006 	str.w	r2, [r3, #6]
    1f10:	f8b8 2004 	ldrh.w	r2, [r8, #4]
    1f14:	815a      	strh	r2, [r3, #10]
                        {
                            memcpy((*object)->logicalName, ln, 6);
                            oa_push(&settings->releasedObjects, *object);
    1f16:	6829      	ldr	r1, [r5, #0]
    1f18:	4630      	mov	r0, r6
    1f1a:	f017 ff1f 	bl	19d5c <oa_push>
    {
        *object = NULL;
        ret = 0;
    }
    return ret;
    1f1e:	4620      	mov	r0, r4
    1f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        *object = NULL;
    1f24:	6028      	str	r0, [r5, #0]
        ret = 0;
    1f26:	e7fa      	b.n	1f1e <cosem_findObjectByLN+0x6a>
    1f28:	4604      	mov	r4, r0
    return ret;
    1f2a:	e7f8      	b.n	1f1e <cosem_findObjectByLN+0x6a>
    1f2c:	0001d5ee 	.word	0x0001d5ee

00001f30 <time_init>:
    unsigned char hour,
    unsigned char minute,
    unsigned char second,
    uint16_t millisecond,
    signed short devitation)
{
    1f30:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (devitation == -1)
    {
        devitation = 0x8000;
    1f32:	4c50      	ldr	r4, [pc, #320]	; (2074 <time_init+0x144>)
{
    1f34:	f9bd 5024 	ldrsh.w	r5, [sp, #36]	; 0x24
    1f38:	f89d 6014 	ldrb.w	r6, [sp, #20]
    1f3c:	f89d c018 	ldrb.w	ip, [sp, #24]
    1f40:	f89d 701c 	ldrb.w	r7, [sp, #28]
        devitation = 0x8000;
    1f44:	f1b5 3fff 	cmp.w	r5, #4294967295
    1f48:	bf08      	it	eq
    1f4a:	4625      	moveq	r5, r4
    }
#ifdef DLMS_USE_EPOCH_TIME
    //multiply to tmp variable or it'll fails for some compilers.
    uint32_t tmp;
    //January and February are counted as months 13 and 14 of the previous year
    if (month != 0xFF && month <= 2)
    1f4c:	2a02      	cmp	r2, #2
    1f4e:	d80a      	bhi.n	1f66 <time_init+0x36>
    {
        month += 12;
        if (year != 0xFFFF)
    1f50:	f64f 74ff 	movw	r4, #65535	; 0xffff
    1f54:	42a1      	cmp	r1, r4
        month += 12;
    1f56:	f102 020c 	add.w	r2, r2, #12
        {
            year -= 1;
    1f5a:	bf18      	it	ne
    1f5c:	f101 31ff 	addne.w	r1, r1, #4294967295
        month += 12;
    1f60:	b2d2      	uxtb	r2, r2
            year -= 1;
    1f62:	bf18      	it	ne
    1f64:	b289      	uxthne	r1, r1
        }
    }
    time->skip = DATETIME_SKIPS_NONE;
    1f66:	2400      	movs	r4, #0
    1f68:	80c4      	strh	r4, [r0, #6]
    time->status = DLMS_CLOCK_STATUS_OK;
    time->extraInfo = 0;
    1f6a:	8104      	strh	r4, [r0, #8]
    //Convert years to days
    time->value = 0;
    if (year == 0xFFFF)
    1f6c:	f64f 74ff 	movw	r4, #65535	; 0xffff
    1f70:	42a1      	cmp	r1, r4
    {
        time->skip = (unsigned char)(DATETIME_SKIPS_YEAR | DATETIME_SKIPS_DEVITATION);
    1f72:	bf02      	ittt	eq
    1f74:	2101      	moveq	r1, #1
    1f76:	80c1      	strheq	r1, [r0, #6]
        year = 1970;
    1f78:	f240 71b2 	movweq	r1, #1970	; 0x7b2
    }
    time->value = year;
    time->value *= 365L;
    tmp = year;
    tmp /= 4L;
    1f7c:	ea4f 0e91 	mov.w	lr, r1, lsr #2
    tmp = year;
    tmp /= 100L;
    time->value -= tmp;
    tmp = year;
    tmp /= 400L;
    time->value += tmp;
    1f80:	f240 146d 	movw	r4, #365	; 0x16d
    1f84:	fb04 e401 	mla	r4, r4, r1, lr
    //Convert months to days
    if (month == 0xFF)
    1f88:	2aff      	cmp	r2, #255	; 0xff
    tmp /= 400L;
    1f8a:	f44f 7ec8 	mov.w	lr, #400	; 0x190
    1f8e:	fbb1 fefe 	udiv	lr, r1, lr
    time->value += tmp;
    1f92:	4474      	add	r4, lr
    tmp /= 100L;
    1f94:	f04f 0e64 	mov.w	lr, #100	; 0x64
    1f98:	fbb1 f1fe 	udiv	r1, r1, lr
    time->value += tmp;
    1f9c:	eba4 0101 	sub.w	r1, r4, r1
    if (month == 0xFF)
    1fa0:	d105      	bne.n	1fae <time_init+0x7e>
    {
        time->skip |= DATETIME_SKIPS_MONTH | DATETIME_SKIPS_DEVITATION;
    1fa2:	88c2      	ldrh	r2, [r0, #6]
    1fa4:	f442 7281 	orr.w	r2, r2, #258	; 0x102
    1fa8:	80c2      	strh	r2, [r0, #6]
        month = 1;
    }
    else if (month == 0xFD)
    {
        time->extraInfo = DLMS_DATE_TIME_EXTRA_INFO_DST_END;
        month = 1;
    1faa:	2201      	movs	r2, #1
    1fac:	e003      	b.n	1fb6 <time_init+0x86>
    else if (month == 0xFE)
    1fae:	2afe      	cmp	r2, #254	; 0xfe
    1fb0:	d14f      	bne.n	2052 <time_init+0x122>
        time->extraInfo = DLMS_DATE_TIME_EXTRA_INFO_DST_BEGIN;
    1fb2:	2201      	movs	r2, #1
    1fb4:	7202      	strb	r2, [r0, #8]
    }
    if (day == 0xFF)
    1fb6:	2bff      	cmp	r3, #255	; 0xff
    1fb8:	d150      	bne.n	205c <time_init+0x12c>
    {
        time->skip |= DATETIME_SKIPS_DAY | DATETIME_SKIPS_DEVITATION;
    1fba:	88c3      	ldrh	r3, [r0, #6]
    1fbc:	f443 7382 	orr.w	r3, r3, #260	; 0x104
    1fc0:	80c3      	strh	r3, [r0, #6]
        day = 1;
    }
    else if (day == 0xFD)
    {
        time->extraInfo = DLMS_DATE_TIME_EXTRA_INFO_LAST_DAY2;
        day = 1;
    1fc2:	2301      	movs	r3, #1
    }
    tmp = month;
    tmp *= 30L;
    time->value += tmp;
    tmp = 1 + month;
    1fc4:	1c54      	adds	r4, r2, #1
    tmp = tmp * 3L;
    1fc6:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
    time->value += tmp;
    1fca:	241e      	movs	r4, #30
    1fcc:	fb14 1202 	smlabb	r2, r4, r2, r1
    tmp = tmp / 5L;
    1fd0:	2405      	movs	r4, #5
    1fd2:	fbbe f4f4 	udiv	r4, lr, r4
    time->value += tmp;
    1fd6:	4422      	add	r2, r4
    time->value += day;
    1fd8:	4413      	add	r3, r2
    //Unix time starts on January 1st, 1970
    if (time->value < 719561)
    1fda:	4a27      	ldr	r2, [pc, #156]	; (2078 <time_init+0x148>)
    1fdc:	4293      	cmp	r3, r2
    1fde:	d905      	bls.n	1fec <time_init+0xbc>
    {
        time->value = 0;
    }
    else
    {
        time->value -= 719561L;
    1fe0:	f5a3 232f 	sub.w	r3, r3, #716800	; 0xaf000
    1fe4:	f6a3 23c9 	subw	r3, r3, #2761	; 0xac9
    }
    //Convert days to seconds
    if (time->value != 0)
    1fe8:	2b00      	cmp	r3, #0
    1fea:	d140      	bne.n	206e <time_init+0x13e>
    1fec:	2300      	movs	r3, #0
    {
        time->value *= 86400L;
    1fee:	6003      	str	r3, [r0, #0]
    }
    //Add hours, minutes and seconds
    if (hour != 0xFF)
    1ff0:	2eff      	cmp	r6, #255	; 0xff
    {
        time->value += (3600L * hour);
    }
    else
    {
        time->skip |= DATETIME_SKIPS_HOUR;
    1ff2:	bf0c      	ite	eq
    1ff4:	88c3      	ldrheq	r3, [r0, #6]
        time->value += (3600L * hour);
    1ff6:	6803      	ldrne	r3, [r0, #0]
    time->skip |= DATETIME_SKIPS_MS;
    if (devitation == (short)0x8000)
    {
        time->skip |= DATETIME_SKIPS_DEVITATION;
    }
    time->deviation = devitation;
    1ff8:	8085      	strh	r5, [r0, #4]
        time->value += (3600L * hour);
    1ffa:	bf15      	itete	ne
    1ffc:	f44f 6261 	movne.w	r2, #3600	; 0xe10
        time->skip |= DATETIME_SKIPS_HOUR;
    2000:	f043 0310 	orreq.w	r3, r3, #16
        time->value += (3600L * hour);
    2004:	fb02 3606 	mlane	r6, r2, r6, r3
        time->skip |= DATETIME_SKIPS_HOUR;
    2008:	80c3      	strheq	r3, [r0, #6]
        time->value += (3600L * hour);
    200a:	bf18      	it	ne
    200c:	6006      	strne	r6, [r0, #0]
    if (minute != 0xFF)
    200e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
        time->skip |= DATETIME_SKIPS_MINUTE;
    2012:	bf0d      	iteet	eq
    2014:	88c3      	ldrheq	r3, [r0, #6]
        time->value += (60L * minute);
    2016:	6802      	ldrne	r2, [r0, #0]
    2018:	233c      	movne	r3, #60	; 0x3c
        time->skip |= DATETIME_SKIPS_MINUTE;
    201a:	f043 0320 	orreq.w	r3, r3, #32
        time->value += (60L * minute);
    201e:	bf16      	itet	ne
    2020:	fb13 230c 	smlabbne	r3, r3, ip, r2
        time->skip |= DATETIME_SKIPS_MINUTE;
    2024:	80c3      	strheq	r3, [r0, #6]
        time->value += (60L * minute);
    2026:	6003      	strne	r3, [r0, #0]
    if (second != 0xFF)
    2028:	2fff      	cmp	r7, #255	; 0xff
        time->skip |= DATETIME_SKIPS_SECOND;
    202a:	bf09      	itett	eq
    202c:	88c3      	ldrheq	r3, [r0, #6]
        time->value += second;
    202e:	6803      	ldrne	r3, [r0, #0]
        time->skip |= DATETIME_SKIPS_SECOND;
    2030:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
    2034:	80c3      	strheq	r3, [r0, #6]
        time->value += second;
    2036:	bf18      	it	ne
    2038:	18ff      	addne	r7, r7, r3
    time->skip |= DATETIME_SKIPS_MS;
    203a:	88c3      	ldrh	r3, [r0, #6]
        time->value += second;
    203c:	bf18      	it	ne
    203e:	6007      	strne	r7, [r0, #0]
    if (devitation == (short)0x8000)
    2040:	f515 4f00 	cmn.w	r5, #32768	; 0x8000
    time->skip |= DATETIME_SKIPS_MS;
    2044:	bf14      	ite	ne
    2046:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
        time->skip |= DATETIME_SKIPS_DEVITATION;
    204a:	f443 73c0 	orreq.w	r3, r3, #384	; 0x180
    204e:	80c3      	strh	r3, [r0, #6]
#if defined(_WIN32) || defined(_WIN64) || defined(__linux__)
        assert(0);
#endif
    }
#endif //DLMS_USE_EPOCH_TIME
}
    2050:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (month == 0xFD)
    2052:	2afd      	cmp	r2, #253	; 0xfd
    2054:	d1af      	bne.n	1fb6 <time_init+0x86>
        time->extraInfo = DLMS_DATE_TIME_EXTRA_INFO_DST_END;
    2056:	2202      	movs	r2, #2
    2058:	7202      	strb	r2, [r0, #8]
    205a:	e7a6      	b.n	1faa <time_init+0x7a>
    else if (day == 0xFE)
    205c:	2bfe      	cmp	r3, #254	; 0xfe
    205e:	d102      	bne.n	2066 <time_init+0x136>
        time->extraInfo = DLMS_DATE_TIME_EXTRA_INFO_LAST_DAY;
    2060:	2304      	movs	r3, #4
        time->extraInfo = DLMS_DATE_TIME_EXTRA_INFO_LAST_DAY2;
    2062:	7203      	strb	r3, [r0, #8]
    2064:	e7ad      	b.n	1fc2 <time_init+0x92>
    else if (day == 0xFD)
    2066:	2bfd      	cmp	r3, #253	; 0xfd
    2068:	d1ac      	bne.n	1fc4 <time_init+0x94>
        time->extraInfo = DLMS_DATE_TIME_EXTRA_INFO_LAST_DAY2;
    206a:	2308      	movs	r3, #8
    206c:	e7f9      	b.n	2062 <time_init+0x132>
        time->value *= 86400L;
    206e:	4a03      	ldr	r2, [pc, #12]	; (207c <time_init+0x14c>)
    2070:	4353      	muls	r3, r2
    2072:	e7bc      	b.n	1fee <time_init+0xbe>
    2074:	ffff8000 	.word	0xffff8000
    2078:	000afac8 	.word	0x000afac8
    207c:	00015180 	.word	0x00015180

00002080 <time_getYears2>:

uint16_t time_getYears2(
    uint32_t value)
{
    //remove hours, minutes and seconds
    value /= 86400;
    2080:	4b17      	ldr	r3, [pc, #92]	; (20e0 <time_getYears2+0x60>)
    2082:	fbb0 f0f3 	udiv	r0, r0, r3
    //Convert Unix time to date
    uint32_t a = (uint32_t)((4 * value + 102032) / 146097 + 15);
    2086:	f500 43c7 	add.w	r3, r0, #25472	; 0x6380
    208a:	3324      	adds	r3, #36	; 0x24
    uint32_t b = (uint32_t)(value + 2442113 + a - (a / 4));
    208c:	f500 1015 	add.w	r0, r0, #2441216	; 0x254000
    uint32_t a = (uint32_t)((4 * value + 102032) / 146097 + 15);
    2090:	4a14      	ldr	r2, [pc, #80]	; (20e4 <time_getYears2+0x64>)
    2092:	009b      	lsls	r3, r3, #2
    uint32_t b = (uint32_t)(value + 2442113 + a - (a / 4));
    2094:	f200 3081 	addw	r0, r0, #897	; 0x381
    uint32_t a = (uint32_t)((4 * value + 102032) / 146097 + 15);
    2098:	fbb3 f3f2 	udiv	r3, r3, r2
    209c:	330f      	adds	r3, #15
    uint32_t b = (uint32_t)(value + 2442113 + a - (a / 4));
    209e:	4418      	add	r0, r3
    20a0:	eba0 0093 	sub.w	r0, r0, r3, lsr #2
    uint32_t c = (20 * b - 2442) / 7305;
    20a4:	2214      	movs	r2, #20
    20a6:	4342      	muls	r2, r0
    20a8:	f6a2 128a 	subw	r2, r2, #2442	; 0x98a
    uint32_t d = b - 365 * c - (c / 4);
    20ac:	f247 2124 	movw	r1, #29220	; 0x7224
    uint32_t c = (20 * b - 2442) / 7305;
    20b0:	f641 4389 	movw	r3, #7305	; 0x1c89
    20b4:	fbb2 f3f3 	udiv	r3, r2, r3
    uint32_t d = b - 365 * c - (c / 4);
    20b8:	fbb2 f2f1 	udiv	r2, r2, r1
    20bc:	1a80      	subs	r0, r0, r2
    20be:	f240 126d 	movw	r2, #365	; 0x16d
    20c2:	fb02 0213 	mls	r2, r2, r3, r0
    uint32_t e = d * 1000 / 30601;
    20c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    20ca:	4350      	muls	r0, r2
    //January and February are counted as months 13 and 14 of the previous year
    if (e <= 13)
    20cc:	4a06      	ldr	r2, [pc, #24]	; (20e8 <time_getYears2+0x68>)
    20ce:	4290      	cmp	r0, r2
    20d0:	f5a3 5093 	sub.w	r0, r3, #4704	; 0x1260
    {
        c -= 4716;
    20d4:	bf94      	ite	ls
    20d6:	380c      	subls	r0, #12
    }
    else
    {
        c -= 4715;
    20d8:	380b      	subhi	r0, #11
    }
    return (uint16_t)c;
}
    20da:	b280      	uxth	r0, r0
    20dc:	4770      	bx	lr
    20de:	bf00      	nop
    20e0:	00015180 	.word	0x00015180
    20e4:	00023ab1 	.word	0x00023ab1
    20e8:	0006897d 	.word	0x0006897d

000020ec <time_getMonths2>:

unsigned char time_getMonths2(
    uint32_t value)
{
    //remove hours, minutes and seconds
    value /= 86400;
    20ec:	4b18      	ldr	r3, [pc, #96]	; (2150 <time_getMonths2+0x64>)
    20ee:	fbb0 f0f3 	udiv	r0, r0, r3
    //Convert Unix time to date
    uint32_t a = (uint32_t)((4 * value + 102032) / 146097 + 15);
    20f2:	f500 43c7 	add.w	r3, r0, #25472	; 0x6380
    20f6:	3324      	adds	r3, #36	; 0x24
    uint32_t b = (uint32_t)(value + 2442113 + a - (a / 4));
    20f8:	f500 1015 	add.w	r0, r0, #2441216	; 0x254000
    uint32_t a = (uint32_t)((4 * value + 102032) / 146097 + 15);
    20fc:	4a15      	ldr	r2, [pc, #84]	; (2154 <time_getMonths2+0x68>)
    20fe:	009b      	lsls	r3, r3, #2
    uint32_t b = (uint32_t)(value + 2442113 + a - (a / 4));
    2100:	f200 3081 	addw	r0, r0, #897	; 0x381
    uint32_t a = (uint32_t)((4 * value + 102032) / 146097 + 15);
    2104:	fbb3 f3f2 	udiv	r3, r3, r2
    2108:	330f      	adds	r3, #15
    uint32_t b = (uint32_t)(value + 2442113 + a - (a / 4));
    210a:	4418      	add	r0, r3
    210c:	eba0 0093 	sub.w	r0, r0, r3, lsr #2
    uint32_t c = (20 * b - 2442) / 7305;
    2110:	2314      	movs	r3, #20
    2112:	4343      	muls	r3, r0
    2114:	f6a3 138a 	subw	r3, r3, #2442	; 0x98a
    uint32_t d = b - 365 * c - (c / 4);
    2118:	f247 2224 	movw	r2, #29220	; 0x7224
    211c:	fbb3 f2f2 	udiv	r2, r3, r2
    2120:	1a80      	subs	r0, r0, r2
    uint32_t c = (20 * b - 2442) / 7305;
    2122:	f641 4289 	movw	r2, #7305	; 0x1c89
    2126:	fbb3 f3f2 	udiv	r3, r3, r2
    uint32_t d = b - 365 * c - (c / 4);
    212a:	f240 126d 	movw	r2, #365	; 0x16d
    212e:	fb02 0013 	mls	r0, r2, r3, r0
    uint32_t e = d * 1000 / 30601;
    //January and February are counted as months 13 and 14 of the previous year
    if (e <= 13)
    2132:	4a09      	ldr	r2, [pc, #36]	; (2158 <time_getMonths2+0x6c>)
    uint32_t e = d * 1000 / 30601;
    2134:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    2138:	4343      	muls	r3, r0
    if (e <= 13)
    213a:	4293      	cmp	r3, r2
    uint32_t e = d * 1000 / 30601;
    213c:	f247 7089 	movw	r0, #30601	; 0x7789
    2140:	fbb3 f0f0 	udiv	r0, r3, r0
    {
        e -= 1;
    2144:	bf94      	ite	ls
    2146:	f100 30ff 	addls.w	r0, r0, #4294967295
    }
    else
    {
        e -= 13;
    214a:	380d      	subhi	r0, #13
    }
    return (unsigned char)e;
}
    214c:	b2c0      	uxtb	r0, r0
    214e:	4770      	bx	lr
    2150:	00015180 	.word	0x00015180
    2154:	00023ab1 	.word	0x00023ab1
    2158:	0006897d 	.word	0x0006897d

0000215c <time_getDays2>:
}

unsigned char time_getDays2(uint32_t value)
{
    //remove hours, minutes and seconds
    value /= 86400;
    215c:	4b1a      	ldr	r3, [pc, #104]	; (21c8 <time_getDays2+0x6c>)
    215e:	fbb0 f0f3 	udiv	r0, r0, r3
    //Convert Unix time to date
    uint32_t a = (uint32_t)((4 * value + 102032) / 146097 + 15);
    2162:	f500 43c7 	add.w	r3, r0, #25472	; 0x6380
    2166:	3324      	adds	r3, #36	; 0x24
    uint32_t b = (uint32_t)(value + 2442113 + a - (a / 4));
    2168:	f500 1015 	add.w	r0, r0, #2441216	; 0x254000
    uint32_t a = (uint32_t)((4 * value + 102032) / 146097 + 15);
    216c:	4a17      	ldr	r2, [pc, #92]	; (21cc <time_getDays2+0x70>)
    216e:	009b      	lsls	r3, r3, #2
    uint32_t b = (uint32_t)(value + 2442113 + a - (a / 4));
    2170:	f200 3081 	addw	r0, r0, #897	; 0x381
    uint32_t a = (uint32_t)((4 * value + 102032) / 146097 + 15);
    2174:	fbb3 f3f2 	udiv	r3, r3, r2
    2178:	330f      	adds	r3, #15
    uint32_t b = (uint32_t)(value + 2442113 + a - (a / 4));
    217a:	4418      	add	r0, r3
    217c:	eba0 0093 	sub.w	r0, r0, r3, lsr #2
    uint32_t c = (20 * b - 2442) / 7305;
    2180:	2314      	movs	r3, #20
    2182:	4343      	muls	r3, r0
    2184:	f6a3 138a 	subw	r3, r3, #2442	; 0x98a
    uint32_t d = b - 365 * c - (c / 4);
    2188:	f247 2224 	movw	r2, #29220	; 0x7224
    218c:	fbb3 f2f2 	udiv	r2, r3, r2
    2190:	1a80      	subs	r0, r0, r2
    uint32_t c = (20 * b - 2442) / 7305;
    2192:	f641 4289 	movw	r2, #7305	; 0x1c89
    2196:	fbb3 f3f2 	udiv	r3, r3, r2
    uint32_t d = b - 365 * c - (c / 4);
    219a:	f240 126d 	movw	r2, #365	; 0x16d
    219e:	fb02 0013 	mls	r0, r2, r3, r0
    uint32_t e = d * 1000 / 30601;
    21a2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    21a6:	fb01 f300 	mul.w	r3, r1, r0
    21aa:	f247 7289 	movw	r2, #30601	; 0x7789
    21ae:	fbb3 f2f2 	udiv	r2, r3, r2
    uint32_t f = d - e * 30 - e * 601 / 1000;
    21b2:	231e      	movs	r3, #30
    21b4:	fb03 0012 	mls	r0, r3, r2, r0
    21b8:	f240 2359 	movw	r3, #601	; 0x259
    21bc:	4353      	muls	r3, r2
    21be:	fbb3 f3f1 	udiv	r3, r3, r1
    21c2:	1ac0      	subs	r0, r0, r3
    return (unsigned char)f;
}
    21c4:	b2c0      	uxtb	r0, r0
    21c6:	4770      	bx	lr
    21c8:	00015180 	.word	0x00015180
    21cc:	00023ab1 	.word	0x00023ab1

000021d0 <time_getHours>:

unsigned char time_getHours(
    const gxtime* value)
{
#ifdef DLMS_USE_EPOCH_TIME
    return (unsigned char)((value->value % 86400L) / 3600L);
    21d0:	6802      	ldr	r2, [r0, #0]
    21d2:	4b05      	ldr	r3, [pc, #20]	; (21e8 <time_getHours+0x18>)
    21d4:	fbb2 f0f3 	udiv	r0, r2, r3
    21d8:	fb03 2010 	mls	r0, r3, r0, r2
    21dc:	f44f 6361 	mov.w	r3, #3600	; 0xe10
    21e0:	fbb0 f0f3 	udiv	r0, r0, r3
#else
    return (unsigned char) value->value.tm_hour;
#endif // DLMS_USE_EPOCH_TIME
}
    21e4:	b2c0      	uxtb	r0, r0
    21e6:	4770      	bx	lr
    21e8:	00015180 	.word	0x00015180

000021ec <time_fromUnixTime2>:
    unsigned char* day,
    unsigned char* hour,
    unsigned char* minute,
    unsigned char* second,
    unsigned char* dayOfWeek)
{
    21ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    21ee:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
    21f2:	460e      	mov	r6, r1
    21f4:	e9dd 7c06 	ldrd	r7, ip, [sp, #24]
    21f8:	4611      	mov	r1, r2
    //Retrieve hours, minutes and seconds
    if (second != NULL)
    21fa:	b135      	cbz	r5, 220a <time_fromUnixTime2+0x1e>
    {
        *second = epoch % 60;
    21fc:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
    2200:	fbb0 f2fe 	udiv	r2, r0, lr
    2204:	fb0e 0212 	mls	r2, lr, r2, r0
    2208:	702a      	strb	r2, [r5, #0]
    }
    epoch /= 60;
    220a:	253c      	movs	r5, #60	; 0x3c
    220c:	fbb0 f0f5 	udiv	r0, r0, r5
    if (minute != NULL)
    2210:	f1bc 0f00 	cmp.w	ip, #0
    2214:	d005      	beq.n	2222 <time_fromUnixTime2+0x36>
    {
        *minute = epoch % 60;
    2216:	fbb0 f2f5 	udiv	r2, r0, r5
    221a:	fb05 0212 	mls	r2, r5, r2, r0
    221e:	f88c 2000 	strb.w	r2, [ip]
    }
    epoch /= 60;
    2222:	223c      	movs	r2, #60	; 0x3c
    2224:	fbb0 f0f2 	udiv	r0, r0, r2
    if (hour != NULL)
    2228:	b12f      	cbz	r7, 2236 <time_fromUnixTime2+0x4a>
    {
        *hour = epoch % 24;
    222a:	2518      	movs	r5, #24
    222c:	fbb0 f2f5 	udiv	r2, r0, r5
    2230:	fb05 0212 	mls	r2, r5, r2, r0
    2234:	703a      	strb	r2, [r7, #0]
    }
    epoch /= 24;
    2236:	2218      	movs	r2, #24
    2238:	fbb0 f0f2 	udiv	r0, r0, r2
    //Convert Unix time to date
    uint32_t a = (uint32_t)((4 * epoch + 102032) / 146097 + 15);
    223c:	f500 45c7 	add.w	r5, r0, #25472	; 0x6380
    2240:	3524      	adds	r5, #36	; 0x24
    uint32_t b = (uint32_t)(epoch + 2442113 + a - (a / 4));
    2242:	f500 1015 	add.w	r0, r0, #2441216	; 0x254000
    uint32_t a = (uint32_t)((4 * epoch + 102032) / 146097 + 15);
    2246:	4a26      	ldr	r2, [pc, #152]	; (22e0 <time_fromUnixTime2+0xf4>)
    uint32_t c = (20 * b - 2442) / 7305;
    uint32_t d = b - 365 * c - (c / 4);
    uint32_t e = d * 1000 / 30601;
    uint32_t f = d - e * 30 - e * 601 / 1000;
    //January and February are counted as months 13 and 14 of the previous year
    if (e <= 13)
    2248:	f8df c098 	ldr.w	ip, [pc, #152]	; 22e4 <time_fromUnixTime2+0xf8>
    uint32_t a = (uint32_t)((4 * epoch + 102032) / 146097 + 15);
    224c:	00ad      	lsls	r5, r5, #2
    uint32_t b = (uint32_t)(epoch + 2442113 + a - (a / 4));
    224e:	f200 3081 	addw	r0, r0, #897	; 0x381
    uint32_t a = (uint32_t)((4 * epoch + 102032) / 146097 + 15);
    2252:	fbb5 f5f2 	udiv	r5, r5, r2
    2256:	350f      	adds	r5, #15
    uint32_t b = (uint32_t)(epoch + 2442113 + a - (a / 4));
    2258:	4428      	add	r0, r5
    225a:	eba0 0095 	sub.w	r0, r0, r5, lsr #2
    uint32_t c = (20 * b - 2442) / 7305;
    225e:	2514      	movs	r5, #20
    2260:	4345      	muls	r5, r0
    2262:	f6a5 158a 	subw	r5, r5, #2442	; 0x98a
    uint32_t d = b - 365 * c - (c / 4);
    2266:	f247 2724 	movw	r7, #29220	; 0x7224
    uint32_t c = (20 * b - 2442) / 7305;
    226a:	f641 4289 	movw	r2, #7305	; 0x1c89
    226e:	fbb5 f2f2 	udiv	r2, r5, r2
    uint32_t d = b - 365 * c - (c / 4);
    2272:	fbb5 f5f7 	udiv	r5, r5, r7
    2276:	f240 176d 	movw	r7, #365	; 0x16d
    227a:	1b40      	subs	r0, r0, r5
    227c:	fb07 0712 	mls	r7, r7, r2, r0
    uint32_t e = d * 1000 / 30601;
    2280:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    2284:	4378      	muls	r0, r7
    if (e <= 13)
    2286:	4560      	cmp	r0, ip
    2288:	f5a2 5293 	sub.w	r2, r2, #4704	; 0x1260
    uint32_t e = d * 1000 / 30601;
    228c:	f247 7589 	movw	r5, #30601	; 0x7789
    {
        c -= 4716;
    2290:	bf98      	it	ls
    2292:	3a0c      	subls	r2, #12
    uint32_t e = d * 1000 / 30601;
    2294:	fbb0 f5f5 	udiv	r5, r0, r5
        e -= 1;
    }
    else
    {
        c -= 4715;
    2298:	bf8a      	itet	hi
    229a:	3a0b      	subhi	r2, #11
        e -= 1;
    229c:	f105 30ff 	addls.w	r0, r5, #4294967295
        e -= 13;
    22a0:	f1a5 000d 	subhi.w	r0, r5, #13
    }
    //Retrieve year, month and day
    if (year != NULL)
    22a4:	b106      	cbz	r6, 22a8 <time_fromUnixTime2+0xbc>
    {
        *year = (uint16_t)c;
    22a6:	8032      	strh	r2, [r6, #0]
    }
    if (month != NULL)
    22a8:	b101      	cbz	r1, 22ac <time_fromUnixTime2+0xc0>
    {
        *month = (unsigned char)e;
    22aa:	7008      	strb	r0, [r1, #0]
    }
    if (day != NULL)
    22ac:	b15b      	cbz	r3, 22c6 <time_fromUnixTime2+0xda>
    uint32_t f = d - e * 30 - e * 601 / 1000;
    22ae:	201e      	movs	r0, #30
    22b0:	fb00 7015 	mls	r0, r0, r5, r7
    22b4:	f240 2259 	movw	r2, #601	; 0x259
    22b8:	4355      	muls	r5, r2
    22ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    22be:	fbb5 f5f2 	udiv	r5, r5, r2
    22c2:	1b40      	subs	r0, r0, r5
    {
        *day = (unsigned char)f;
    22c4:	7018      	strb	r0, [r3, #0]
    }
    if (dayOfWeek != NULL && year != NULL && month != NULL && day != NULL)
    22c6:	b144      	cbz	r4, 22da <time_fromUnixTime2+0xee>
    22c8:	b13e      	cbz	r6, 22da <time_fromUnixTime2+0xee>
    22ca:	b131      	cbz	r1, 22da <time_fromUnixTime2+0xee>
    22cc:	b12b      	cbz	r3, 22da <time_fromUnixTime2+0xee>
    {
        //Calculate day of week
        *dayOfWeek = time_dayOfWeek(*year, *month, *day);
    22ce:	781a      	ldrb	r2, [r3, #0]
    22d0:	7809      	ldrb	r1, [r1, #0]
    22d2:	8830      	ldrh	r0, [r6, #0]
    22d4:	f00b fd90 	bl	ddf8 <time_dayOfWeek>
    22d8:	7020      	strb	r0, [r4, #0]
    }
    return 0;
}
    22da:	2000      	movs	r0, #0
    22dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    22de:	bf00      	nop
    22e0:	00023ab1 	.word	0x00023ab1
    22e4:	0006897d 	.word	0x0006897d

000022e8 <time_toString>:
{
    22e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    22ec:	b086      	sub	sp, #24
    time_fromUnixTime2(time->value, &year, &mon, &day, &hour, &min, &sec, NULL);
    22ee:	f10d 0315 	add.w	r3, sp, #21
    22f2:	9302      	str	r3, [sp, #8]
    22f4:	ab05      	add	r3, sp, #20
    uint16_t year = 0;
    22f6:	2400      	movs	r4, #0
    time_fromUnixTime2(time->value, &year, &mon, &day, &hour, &min, &sec, NULL);
    22f8:	9301      	str	r3, [sp, #4]
    22fa:	f10d 0313 	add.w	r3, sp, #19
    22fe:	9300      	str	r3, [sp, #0]
{
    2300:	4606      	mov	r6, r0
    time_fromUnixTime2(time->value, &year, &mon, &day, &hour, &min, &sec, NULL);
    2302:	9403      	str	r4, [sp, #12]
    2304:	f10d 0312 	add.w	r3, sp, #18
    2308:	f10d 0211 	add.w	r2, sp, #17
    230c:	6800      	ldr	r0, [r0, #0]
    uint16_t year = 0;
    230e:	f8ad 4016 	strh.w	r4, [sp, #22]
{
    2312:	460d      	mov	r5, r1
    time_fromUnixTime2(time->value, &year, &mon, &day, &hour, &min, &sec, NULL);
    2314:	f10d 0116 	add.w	r1, sp, #22
    unsigned char mon = 0, day = 0, hour = 0, min = 0, sec = 0;
    2318:	f88d 4011 	strb.w	r4, [sp, #17]
    231c:	f88d 4012 	strb.w	r4, [sp, #18]
    2320:	f88d 4013 	strb.w	r4, [sp, #19]
    2324:	f88d 4014 	strb.w	r4, [sp, #20]
    2328:	f88d 4015 	strb.w	r4, [sp, #21]
    time_fromUnixTime2(time->value, &year, &mon, &day, &hour, &min, &sec, NULL);
    232c:	f7ff ff5e 	bl	21ec <time_fromUnixTime2>
    if ((time->skip & (DATETIME_SKIPS_YEAR | DATETIME_SKIPS_MONTH | DATETIME_SKIPS_DAY)) != (DATETIME_SKIPS_YEAR | DATETIME_SKIPS_MONTH | DATETIME_SKIPS_DAY))
    2330:	88f2      	ldrh	r2, [r6, #6]
    2332:	f002 0307 	and.w	r3, r2, #7
    2336:	2b07      	cmp	r3, #7
    2338:	f000 80dd 	beq.w	24f6 <time_toString+0x20e>
            if ((time->extraInfo & DLMS_DATE_TIME_EXTRA_INFO_DST_BEGIN) != 0)
    233c:	7a33      	ldrb	r3, [r6, #8]
    233e:	f013 0701 	ands.w	r7, r3, #1
    2342:	d016      	beq.n	2372 <time_toString+0x8a>
                bb_addString(ba, GET_STR_FROM_EEPROM("BEGIN"));
    2344:	497f      	ldr	r1, [pc, #508]	; (2544 <time_toString+0x25c>)
    2346:	4628      	mov	r0, r5
    2348:	f00a fde6 	bl	cf18 <bb_addString>
            if ((time->skip & DATETIME_SKIPS_DAY) == 0)
    234c:	88f3      	ldrh	r3, [r6, #6]
    234e:	0759      	lsls	r1, r3, #29
    2350:	f100 80ac 	bmi.w	24ac <time_toString+0x1c4>
                if (!empty)
    2354:	b91c      	cbnz	r4, 235e <time_toString+0x76>
                    bb_setUInt8(ba, separator);
    2356:	212f      	movs	r1, #47	; 0x2f
    2358:	4628      	mov	r0, r5
    235a:	f00a fcac 	bl	ccb6 <bb_setUInt8>
                if ((time->extraInfo & DLMS_DATE_TIME_EXTRA_INFO_LAST_DAY) != 0)
    235e:	7a33      	ldrb	r3, [r6, #8]
    2360:	f013 0404 	ands.w	r4, r3, #4
    2364:	d023      	beq.n	23ae <time_toString+0xc6>
                    bb_addString(ba, GET_STR_FROM_EEPROM("LASTDAY"));
    2366:	4978      	ldr	r1, [pc, #480]	; (2548 <time_toString+0x260>)
                bb_addString(ba, GET_STR_FROM_EEPROM("*"));
    2368:	4628      	mov	r0, r5
    236a:	f00a fdd5 	bl	cf18 <bb_addString>
    236e:	2400      	movs	r4, #0
    2370:	e023      	b.n	23ba <time_toString+0xd2>
            else if ((time->extraInfo & DLMS_DATE_TIME_EXTRA_INFO_DST_END) != 0)
    2372:	f013 0402 	ands.w	r4, r3, #2
    2376:	d006      	beq.n	2386 <time_toString+0x9e>
                bb_addString(ba, GET_STR_FROM_EEPROM("END"));
    2378:	4974      	ldr	r1, [pc, #464]	; (254c <time_toString+0x264>)
    237a:	4628      	mov	r0, r5
                empty = 0;
    237c:	463c      	mov	r4, r7
                bb_addString(ba, GET_STR_FROM_EEPROM("END"));
    237e:	f00a fdcb 	bl	cf18 <bb_addString>
                addDate = 1;
    2382:	2701      	movs	r7, #1
    2384:	e7e2      	b.n	234c <time_toString+0x64>
            else if ((time->skip & DATETIME_SKIPS_MONTH) == 0)
    2386:	0790      	lsls	r0, r2, #30
    2388:	d407      	bmi.n	239a <time_toString+0xb2>
                bb_addIntAsString2(ba, mon, 2);
    238a:	f89d 1011 	ldrb.w	r1, [sp, #17]
    238e:	2202      	movs	r2, #2
    2390:	4628      	mov	r0, r5
    2392:	f00a ff5d 	bl	d250 <bb_addIntAsString2>
    unsigned char addDate = 0;
    2396:	4627      	mov	r7, r4
    2398:	e7d8      	b.n	234c <time_toString+0x64>
            else if ((time->extraInfo & (DLMS_DATE_TIME_EXTRA_INFO_LAST_DAY | DLMS_DATE_TIME_EXTRA_INFO_LAST_DAY2)) != 0)
    239a:	f013 070c 	ands.w	r7, r3, #12
    239e:	d004      	beq.n	23aa <time_toString+0xc2>
                bb_addString(ba, GET_STR_FROM_EEPROM("*"));
    23a0:	496b      	ldr	r1, [pc, #428]	; (2550 <time_toString+0x268>)
    23a2:	4628      	mov	r0, r5
    23a4:	f00a fdb8 	bl	cf18 <bb_addString>
    23a8:	e7f5      	b.n	2396 <time_toString+0xae>
    unsigned char empty = 1;
    23aa:	2401      	movs	r4, #1
    23ac:	e7ce      	b.n	234c <time_toString+0x64>
                else if ((time->extraInfo & DLMS_DATE_TIME_EXTRA_INFO_LAST_DAY2) != 0)
    23ae:	071a      	lsls	r2, r3, #28
    23b0:	d575      	bpl.n	249e <time_toString+0x1b6>
                    bb_addString(ba, GET_STR_FROM_EEPROM("LASTDAY2"));
    23b2:	4968      	ldr	r1, [pc, #416]	; (2554 <time_toString+0x26c>)
    23b4:	4628      	mov	r0, r5
    23b6:	f00a fdaf 	bl	cf18 <bb_addString>
            if ((time->skip & DATETIME_SKIPS_YEAR) == 0)
    23ba:	88f3      	ldrh	r3, [r6, #6]
    23bc:	07db      	lsls	r3, r3, #31
    23be:	f100 8088 	bmi.w	24d2 <time_toString+0x1ea>
                if (!empty)
    23c2:	2c00      	cmp	r4, #0
    23c4:	d07b      	beq.n	24be <time_toString+0x1d6>
                bb_addIntAsString(ba, (time->skip& DATETIME_SKIPS_YEAR) == 0 ? year : 0);
    23c6:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    23ca:	4628      	mov	r0, r5
    23cc:	f00a ff50 	bl	d270 <bb_addIntAsString>
    23d0:	2400      	movs	r4, #0
    unsigned char addTime = (time->skip & (DATETIME_SKIPS_HOUR | DATETIME_SKIPS_MINUTE | DATETIME_SKIPS_MINUTE | DATETIME_SKIPS_SECOND)) != 0;
    23d2:	88f7      	ldrh	r7, [r6, #6]
    23d4:	f007 0770 	and.w	r7, r7, #112	; 0x70
    if (!empty)
    23d8:	b91c      	cbnz	r4, 23e2 <time_toString+0xfa>
        bb_setUInt8(ba, ' ');
    23da:	2120      	movs	r1, #32
    23dc:	4628      	mov	r0, r5
    23de:	f00a fc6a 	bl	ccb6 <bb_setUInt8>
    if ((time->skip & DATETIME_SKIPS_HOUR) == 0)
    23e2:	88f3      	ldrh	r3, [r6, #6]
    23e4:	f013 0810 	ands.w	r8, r3, #16
    23e8:	f040 8087 	bne.w	24fa <time_toString+0x212>
        bb_addIntAsString2(ba, hour, 2);
    23ec:	f89d 1013 	ldrb.w	r1, [sp, #19]
    23f0:	2202      	movs	r2, #2
    23f2:	4628      	mov	r0, r5
    23f4:	f00a ff2c 	bl	d250 <bb_addIntAsString2>
        bb_setUInt8(ba, '*');
    23f8:	2400      	movs	r4, #0
    if ((time->skip & DATETIME_SKIPS_MINUTE) == 0)
    23fa:	88f3      	ldrh	r3, [r6, #6]
    23fc:	0699      	lsls	r1, r3, #26
    23fe:	f100 8089 	bmi.w	2514 <time_toString+0x22c>
        if (!empty)
    2402:	b91c      	cbnz	r4, 240c <time_toString+0x124>
            bb_setUInt8(ba, ':');
    2404:	213a      	movs	r1, #58	; 0x3a
    2406:	4628      	mov	r0, r5
    2408:	f00a fc55 	bl	ccb6 <bb_setUInt8>
        bb_addIntAsString2(ba, min, 2);
    240c:	f89d 1014 	ldrb.w	r1, [sp, #20]
    2410:	2202      	movs	r2, #2
    2412:	4628      	mov	r0, r5
    2414:	f00a ff1c 	bl	d250 <bb_addIntAsString2>
        bb_setUInt8(ba, '*');
    2418:	2400      	movs	r4, #0
    if ((time->skip & DATETIME_SKIPS_SECOND) == 0)
    241a:	88f3      	ldrh	r3, [r6, #6]
    241c:	065a      	lsls	r2, r3, #25
    241e:	f100 8085 	bmi.w	252c <time_toString+0x244>
        if (!empty)
    2422:	b91c      	cbnz	r4, 242c <time_toString+0x144>
            bb_setUInt8(ba, ':');
    2424:	213a      	movs	r1, #58	; 0x3a
    2426:	4628      	mov	r0, r5
    2428:	f00a fc45 	bl	ccb6 <bb_setUInt8>
        bb_addIntAsString2(ba, sec, 2);
    242c:	f89d 1015 	ldrb.w	r1, [sp, #21]
    2430:	2202      	movs	r2, #2
    2432:	4628      	mov	r0, r5
    2434:	f00a ff0c 	bl	d250 <bb_addIntAsString2>
    if (time->deviation != (short)0x8000 && (time->skip & DATETIME_SKIPS_DEVITATION) == 0)
    2438:	f9b6 4004 	ldrsh.w	r4, [r6, #4]
    243c:	f514 4f00 	cmn.w	r4, #32768	; 0x8000
    2440:	d022      	beq.n	2488 <time_toString+0x1a0>
    2442:	88f3      	ldrh	r3, [r6, #6]
    2444:	05db      	lsls	r3, r3, #23
    2446:	d41f      	bmi.n	2488 <time_toString+0x1a0>
        tmp = -tmp;
    2448:	4264      	negs	r4, r4
        bb_addString(ba, " UTC");
    244a:	4943      	ldr	r1, [pc, #268]	; (2558 <time_toString+0x270>)
        tmp = -tmp;
    244c:	b224      	sxth	r4, r4
        bb_addString(ba, " UTC");
    244e:	4628      	mov	r0, r5
    2450:	f00a fd62 	bl	cf18 <bb_addString>
        if (tmp < 0)
    2454:	2c00      	cmp	r4, #0
            bb_addString(ba, "-");
    2456:	bfb4      	ite	lt
    2458:	4940      	ldrlt	r1, [pc, #256]	; (255c <time_toString+0x274>)
            bb_addString(ba, "+");
    245a:	4941      	ldrge	r1, [pc, #260]	; (2560 <time_toString+0x278>)
    245c:	4628      	mov	r0, r5
    245e:	f00a fd5b 	bl	cf18 <bb_addString>
        bb_addIntAsString2(ba, (int)(tmp / 60), 2);
    2462:	273c      	movs	r7, #60	; 0x3c
    2464:	2202      	movs	r2, #2
    2466:	fb94 f6f7 	sdiv	r6, r4, r7
    246a:	4628      	mov	r0, r5
    246c:	4631      	mov	r1, r6
    246e:	f00a feef 	bl	d250 <bb_addIntAsString2>
        bb_addString(ba, ":");
    2472:	493c      	ldr	r1, [pc, #240]	; (2564 <time_toString+0x27c>)
    2474:	4628      	mov	r0, r5
    2476:	f00a fd4f 	bl	cf18 <bb_addString>
        bb_addIntAsString2(ba, (int)(tmp % 60), 2);
    247a:	fb07 4116 	mls	r1, r7, r6, r4
    247e:	2202      	movs	r2, #2
    2480:	b209      	sxth	r1, r1
    2482:	4628      	mov	r0, r5
    2484:	f00a fee4 	bl	d250 <bb_addIntAsString2>
    bb_setUInt8(ba, '\0');
    2488:	2100      	movs	r1, #0
    248a:	4628      	mov	r0, r5
    248c:	f00a fc13 	bl	ccb6 <bb_setUInt8>
    --ba->size;
    2490:	88eb      	ldrh	r3, [r5, #6]
}
    2492:	2000      	movs	r0, #0
    --ba->size;
    2494:	3b01      	subs	r3, #1
    2496:	80eb      	strh	r3, [r5, #6]
}
    2498:	b006      	add	sp, #24
    249a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    bb_addIntAsString2(ba, day, 2);
    249e:	f89d 1012 	ldrb.w	r1, [sp, #18]
    24a2:	2202      	movs	r2, #2
    24a4:	4628      	mov	r0, r5
    24a6:	f00a fed3 	bl	d250 <bb_addIntAsString2>
    24aa:	e786      	b.n	23ba <time_toString+0xd2>
            else if (addDate)
    24ac:	2f00      	cmp	r7, #0
    24ae:	d084      	beq.n	23ba <time_toString+0xd2>
                if (!empty)
    24b0:	b91c      	cbnz	r4, 24ba <time_toString+0x1d2>
                    bb_setUInt8(ba, separator);
    24b2:	212f      	movs	r1, #47	; 0x2f
    24b4:	4628      	mov	r0, r5
    24b6:	f00a fbfe 	bl	ccb6 <bb_setUInt8>
                bb_addString(ba, GET_STR_FROM_EEPROM("*"));
    24ba:	4925      	ldr	r1, [pc, #148]	; (2550 <time_toString+0x268>)
    24bc:	e754      	b.n	2368 <time_toString+0x80>
                    bb_setUInt8(ba, separator);
    24be:	212f      	movs	r1, #47	; 0x2f
    24c0:	4628      	mov	r0, r5
    24c2:	f00a fbf8 	bl	ccb6 <bb_setUInt8>
                bb_addIntAsString(ba, (time->skip& DATETIME_SKIPS_YEAR) == 0 ? year : 0);
    24c6:	88f3      	ldrh	r3, [r6, #6]
    24c8:	07d8      	lsls	r0, r3, #31
    24ca:	f57f af7c 	bpl.w	23c6 <time_toString+0xde>
    24ce:	4621      	mov	r1, r4
    24d0:	e77b      	b.n	23ca <time_toString+0xe2>
            else if ((time->extraInfo & (DLMS_DATE_TIME_EXTRA_INFO_LAST_DAY | DLMS_DATE_TIME_EXTRA_INFO_LAST_DAY2)) != 0)
    24d2:	7a33      	ldrb	r3, [r6, #8]
    24d4:	f013 0f0c 	tst.w	r3, #12
    24d8:	d009      	beq.n	24ee <time_toString+0x206>
                if (!empty)
    24da:	b91c      	cbnz	r4, 24e4 <time_toString+0x1fc>
                    bb_setUInt8(ba, separator);
    24dc:	212f      	movs	r1, #47	; 0x2f
    24de:	4628      	mov	r0, r5
    24e0:	f00a fbe9 	bl	ccb6 <bb_setUInt8>
                bb_addString(ba, GET_STR_FROM_EEPROM("*"));
    24e4:	491a      	ldr	r1, [pc, #104]	; (2550 <time_toString+0x268>)
    24e6:	4628      	mov	r0, r5
    24e8:	f00a fd16 	bl	cf18 <bb_addString>
    24ec:	e770      	b.n	23d0 <time_toString+0xe8>
            else if (addDate)
    24ee:	2f00      	cmp	r7, #0
    24f0:	f43f af6f 	beq.w	23d2 <time_toString+0xea>
    24f4:	e7f1      	b.n	24da <time_toString+0x1f2>
    unsigned char empty = 1;
    24f6:	2401      	movs	r4, #1
    24f8:	e76b      	b.n	23d2 <time_toString+0xea>
    else if (addTime)
    24fa:	2f00      	cmp	r7, #0
    24fc:	f43f af7d 	beq.w	23fa <time_toString+0x112>
        if (!empty)
    2500:	b91c      	cbnz	r4, 250a <time_toString+0x222>
            bb_setUInt8(ba, ':');
    2502:	213a      	movs	r1, #58	; 0x3a
    2504:	4628      	mov	r0, r5
    2506:	f00a fbd6 	bl	ccb6 <bb_setUInt8>
        bb_setUInt8(ba, '*');
    250a:	212a      	movs	r1, #42	; 0x2a
    250c:	4628      	mov	r0, r5
    250e:	f00a fbd2 	bl	ccb6 <bb_setUInt8>
    2512:	e771      	b.n	23f8 <time_toString+0x110>
    else if (addTime)
    2514:	2f00      	cmp	r7, #0
    2516:	d080      	beq.n	241a <time_toString+0x132>
        if (!empty)
    2518:	b91c      	cbnz	r4, 2522 <time_toString+0x23a>
            bb_setUInt8(ba, ':');
    251a:	213a      	movs	r1, #58	; 0x3a
    251c:	4628      	mov	r0, r5
    251e:	f00a fbca 	bl	ccb6 <bb_setUInt8>
        bb_setUInt8(ba, '*');
    2522:	212a      	movs	r1, #42	; 0x2a
    2524:	4628      	mov	r0, r5
    2526:	f00a fbc6 	bl	ccb6 <bb_setUInt8>
    252a:	e775      	b.n	2418 <time_toString+0x130>
    else if (addTime)
    252c:	2f00      	cmp	r7, #0
    252e:	d083      	beq.n	2438 <time_toString+0x150>
        if (!empty)
    2530:	b91c      	cbnz	r4, 253a <time_toString+0x252>
            bb_setUInt8(ba, ':');
    2532:	213a      	movs	r1, #58	; 0x3a
    2534:	4628      	mov	r0, r5
    2536:	f00a fbbe 	bl	ccb6 <bb_setUInt8>
        bb_setUInt8(ba, '*');
    253a:	212a      	movs	r1, #42	; 0x2a
    253c:	4628      	mov	r0, r5
    253e:	f00a fbba 	bl	ccb6 <bb_setUInt8>
    2542:	e779      	b.n	2438 <time_toString+0x150>
    2544:	0001d5f4 	.word	0x0001d5f4
    2548:	0001d5fe 	.word	0x0001d5fe
    254c:	0001d5fa 	.word	0x0001d5fa
    2550:	0001dcc5 	.word	0x0001dcc5
    2554:	0001d606 	.word	0x0001d606
    2558:	0001d60f 	.word	0x0001d60f
    255c:	0001e2c8 	.word	0x0001e2c8
    2560:	0001d614 	.word	0x0001d614
    2564:	0001d616 	.word	0x0001d616

00002568 <time_toUnixTime2>:

// Convert date time to Epoch time.
uint32_t time_toUnixTime2(gxtime* time)
{
    gxtime tmp = *time;
    if ((time->extraInfo & DLMS_DATE_TIME_EXTRA_INFO_LAST_DAY) != 0)
    2568:	7a03      	ldrb	r3, [r0, #8]
    256a:	075b      	lsls	r3, r3, #29
{
    256c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    gxtime tmp = *time;
    2570:	6805      	ldr	r5, [r0, #0]
    2572:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
{
    2576:	4604      	mov	r4, r0
    if ((time->extraInfo & DLMS_DATE_TIME_EXTRA_INFO_LAST_DAY) != 0)
    2578:	d511      	bpl.n	259e <time_toUnixTime2+0x36>
    {
        unsigned char days = time_getDays(time);
    257a:	f00b fbd3 	bl	dd24 <time_getDays>
    257e:	4606      	mov	r6, r0
        unsigned char max = date_daysInMonth(time_getYears(time), time_getMonths(time));
    2580:	4620      	mov	r0, r4
    2582:	f00b fbc9 	bl	dd18 <time_getYears>
    2586:	4607      	mov	r7, r0
    2588:	4620      	mov	r0, r4
    258a:	f00b fbc8 	bl	dd1e <time_getMonths>
    258e:	4601      	mov	r1, r0
    2590:	4638      	mov	r0, r7
    2592:	f00b fc0f 	bl	ddb4 <date_daysInMonth>
    value->value += seconds;
    2596:	4b06      	ldr	r3, [pc, #24]	; (25b0 <time_toUnixTime2+0x48>)
        time_addDays(&tmp, max - days);
    2598:	1b80      	subs	r0, r0, r6
    value->value += seconds;
    259a:	fb03 5500 	mla	r5, r3, r0, r5
    }
    uint32_t value;
#ifdef DLMS_USE_EPOCH_TIME
    value = tmp.value;
    if (tmp.deviation != 0 && time->deviation != (short)0x8000)
    259e:	f3c8 030e 	ubfx	r3, r8, #0, #15
    25a2:	b113      	cbz	r3, 25aa <time_toUnixTime2+0x42>
    {
#ifdef DLMS_USE_UTC_TIME_ZONE
        value -= 60 * tmp.deviation;
#else
        value += 60 * tmp.deviation;
    25a4:	233c      	movs	r3, #60	; 0x3c
    25a6:	fb18 5503 	smlabb	r5, r8, r3, r5
    }
#else
    value = (uint32_t)gxmktime(&tmp.value);
#endif //DLMS_USE_EPOCH_TIME
    return value;
}
    25aa:	4628      	mov	r0, r5
    25ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    25b0:	00015180 	.word	0x00015180

000025b4 <time_compareWithDiff>:
{
    25b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (value2 == 0xFFFFFFFF)
    25b6:	1c4f      	adds	r7, r1, #1
{
    25b8:	b089      	sub	sp, #36	; 0x24
    25ba:	4606      	mov	r6, r0
    25bc:	460d      	mov	r5, r1
    25be:	4614      	mov	r4, r2
    if (value2 == 0xFFFFFFFF)
    25c0:	f000 8081 	beq.w	26c6 <time_compareWithDiff+0x112>
    time_fromUnixTime2(time_toUnixTime2(value1), &year1, &month1,
    25c4:	f7ff ffd0 	bl	2568 <time_toUnixTime2>
    25c8:	2300      	movs	r3, #0
    25ca:	9303      	str	r3, [sp, #12]
    25cc:	f10d 0316 	add.w	r3, sp, #22
    25d0:	9302      	str	r3, [sp, #8]
    25d2:	f10d 0315 	add.w	r3, sp, #21
    25d6:	9301      	str	r3, [sp, #4]
    25d8:	ab05      	add	r3, sp, #20
    25da:	9300      	str	r3, [sp, #0]
    25dc:	f10d 0212 	add.w	r2, sp, #18
    25e0:	f10d 0313 	add.w	r3, sp, #19
    25e4:	a907      	add	r1, sp, #28
    25e6:	f7ff fe01 	bl	21ec <time_fromUnixTime2>
    if (deviationDiff != (short)0x8000)
    25ea:	f514 4f00 	cmn.w	r4, #32768	; 0x8000
        value2 += (60 * deviationDiff);
    25ee:	bf1c      	itt	ne
    25f0:	233c      	movne	r3, #60	; 0x3c
    25f2:	fb14 5503 	smlabbne	r5, r4, r3, r5
    time_fromUnixTime2(value2, &year2, &month2,
    25f6:	f10d 031b 	add.w	r3, sp, #27
    25fa:	9302      	str	r3, [sp, #8]
    25fc:	f10d 031a 	add.w	r3, sp, #26
    2600:	9301      	str	r3, [sp, #4]
    2602:	2700      	movs	r7, #0
    2604:	f10d 0319 	add.w	r3, sp, #25
    2608:	9300      	str	r3, [sp, #0]
    260a:	f10d 0217 	add.w	r2, sp, #23
    260e:	9703      	str	r7, [sp, #12]
    2610:	ab06      	add	r3, sp, #24
    2612:	f10d 011e 	add.w	r1, sp, #30
    2616:	4628      	mov	r0, r5
    2618:	f7ff fde8 	bl	21ec <time_fromUnixTime2>
    if ((value1->skip & (DATETIME_SKIPS_SECOND | DATETIME_SKIPS_MINUTE | DATETIME_SKIPS_HOUR | DATETIME_SKIPS_DAY | DATETIME_SKIPS_MONTH | DATETIME_SKIPS_YEAR)) != 0)
    261c:	88f2      	ldrh	r2, [r6, #6]
    261e:	f012 0477 	ands.w	r4, r2, #119	; 0x77
    2622:	d04a      	beq.n	26ba <time_compareWithDiff+0x106>
        if ((value1->skip & DATETIME_SKIPS_SECOND) == 0)
    2624:	0656      	lsls	r6, r2, #25
        uint32_t val1 = 0, val2 = 0;
    2626:	bf4d      	iteet	mi
    2628:	463b      	movmi	r3, r7
            val1 = second1;
    262a:	f89d 0016 	ldrbpl.w	r0, [sp, #22]
            val2 = second2;
    262e:	f89d 301b 	ldrbpl.w	r3, [sp, #27]
        uint32_t val1 = 0, val2 = 0;
    2632:	4618      	movmi	r0, r3
        if ((value1->skip & DATETIME_SKIPS_MINUTE) == 0)
    2634:	0695      	lsls	r5, r2, #26
    2636:	d408      	bmi.n	264a <time_compareWithDiff+0x96>
            val1 += 60L * minute1;
    2638:	f89d 4015 	ldrb.w	r4, [sp, #21]
    263c:	213c      	movs	r1, #60	; 0x3c
    263e:	fb11 0004 	smlabb	r0, r1, r4, r0
            val2 += 60L * minute2;
    2642:	f89d 401a 	ldrb.w	r4, [sp, #26]
    2646:	fb11 3304 	smlabb	r3, r1, r4, r3
        if ((value1->skip & DATETIME_SKIPS_HOUR) == 0)
    264a:	06d4      	lsls	r4, r2, #27
    264c:	d409      	bmi.n	2662 <time_compareWithDiff+0xae>
            val1 += 3600L * hour1;
    264e:	f89d 4014 	ldrb.w	r4, [sp, #20]
    2652:	f44f 6161 	mov.w	r1, #3600	; 0xe10
    2656:	fb01 0004 	mla	r0, r1, r4, r0
            val2 += 3600L * hour2;
    265a:	f89d 4019 	ldrb.w	r4, [sp, #25]
    265e:	fb01 3304 	mla	r3, r1, r4, r3
        if ((value1->skip & DATETIME_SKIPS_DAY) == 0)
    2662:	0751      	lsls	r1, r2, #29
    2664:	d408      	bmi.n	2678 <time_compareWithDiff+0xc4>
            val1 += 24L * 3600L * day1;
    2666:	f89d 4013 	ldrb.w	r4, [sp, #19]
    266a:	4918      	ldr	r1, [pc, #96]	; (26cc <time_compareWithDiff+0x118>)
    266c:	fb01 0004 	mla	r0, r1, r4, r0
            val2 += 24L * 3600L * day2;
    2670:	f89d 4018 	ldrb.w	r4, [sp, #24]
    2674:	fb01 3304 	mla	r3, r1, r4, r3
        if ((value1->skip & DATETIME_SKIPS_MONTH) == 0)
    2678:	f002 0101 	and.w	r1, r2, #1
    267c:	0792      	lsls	r2, r2, #30
    267e:	d415      	bmi.n	26ac <time_compareWithDiff+0xf8>
            if ((value1->skip & DATETIME_SKIPS_YEAR) == 0)
    2680:	b951      	cbnz	r1, 2698 <time_compareWithDiff+0xe4>
                if (year1 != year2)
    2682:	f8bd 101c 	ldrh.w	r1, [sp, #28]
    2686:	f8bd 201e 	ldrh.w	r2, [sp, #30]
    268a:	4291      	cmp	r1, r2
    268c:	d004      	beq.n	2698 <time_compareWithDiff+0xe4>
            return val1 < val2 ? -1 : 1;
    268e:	d21a      	bcs.n	26c6 <time_compareWithDiff+0x112>
                    return year1 < year2 ? -1 : 1;
    2690:	f04f 30ff 	mov.w	r0, #4294967295
}
    2694:	b009      	add	sp, #36	; 0x24
    2696:	bdf0      	pop	{r4, r5, r6, r7, pc}
            else if (month1 != month2)
    2698:	f89d 1012 	ldrb.w	r1, [sp, #18]
    269c:	f89d 2017 	ldrb.w	r2, [sp, #23]
            if (year1 != year2)
    26a0:	4291      	cmp	r1, r2
    26a2:	d1f4      	bne.n	268e <time_compareWithDiff+0xda>
        if (val1 != val2)
    26a4:	4298      	cmp	r0, r3
    26a6:	d1f2      	bne.n	268e <time_compareWithDiff+0xda>
        return 0;
    26a8:	2000      	movs	r0, #0
    26aa:	e7f3      	b.n	2694 <time_compareWithDiff+0xe0>
        else if ((value1->skip & DATETIME_SKIPS_YEAR) == 0)
    26ac:	2900      	cmp	r1, #0
    26ae:	d1f9      	bne.n	26a4 <time_compareWithDiff+0xf0>
            if (year1 != year2)
    26b0:	f8bd 101c 	ldrh.w	r1, [sp, #28]
    26b4:	f8bd 201e 	ldrh.w	r2, [sp, #30]
    26b8:	e7f2      	b.n	26a0 <time_compareWithDiff+0xec>
    if (time_toUnixTime2(value1) == value2)
    26ba:	4630      	mov	r0, r6
    26bc:	f7ff ff54 	bl	2568 <time_toUnixTime2>
    26c0:	4285      	cmp	r5, r0
    26c2:	d0f1      	beq.n	26a8 <time_compareWithDiff+0xf4>
    return time_toUnixTime2(value1) < value2 ? -1 : 1;
    26c4:	d8e4      	bhi.n	2690 <time_compareWithDiff+0xdc>
        return 1;
    26c6:	2001      	movs	r0, #1
    26c8:	e7e4      	b.n	2694 <time_compareWithDiff+0xe0>
    26ca:	bf00      	nop
    26cc:	00015180 	.word	0x00015180

000026d0 <countCRC.isra.0>:
        0x6B46, 0x7ACF, 0x4854, 0x59DD, 0x2D62, 0x3CEB, 0x0E70, 0x1FF9,
        0xF78F, 0xE606, 0xD49D, 0xC514, 0xB1AB, 0xA022, 0x92B9, 0x8330,
        0x7BC7, 0x6A4E, 0x58D5, 0x495C, 0x3DE3, 0x2C6A, 0x1EF1, 0x0F78
    };

    static uint16_t countCRC(gxByteBuffer* Buff, uint32_t index, uint32_t count)
    26d0:	b5f0      	push	{r4, r5, r6, r7, lr}
#ifdef ARDUINO_ARCH_AVR
//If Arduino is used data is read from flash like this.
            tmp = (FCS16 ^ Buff->data[index + pos]) & 0xFF;
            FCS16 = (FCS16 >> 8) ^ pgm_read_word_near(FCS16Table + tmp);
#else
            FCS16 = (FCS16 >> 8) ^ FCS16Table[(FCS16 ^ ((unsigned char*)Buff->data)[index + pos]) & 0xFF];
    26d2:	4f0b      	ldr	r7, [pc, #44]	; (2700 <countCRC.isra.0+0x30>)
    static uint16_t countCRC(gxByteBuffer* Buff, uint32_t index, uint32_t count)
    26d4:	2500      	movs	r5, #0
        uint16_t FCS16 = 0xFFFF;
    26d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
        for (pos = 0; pos < count; ++pos)
    26da:	b2ae      	uxth	r6, r5
    26dc:	4296      	cmp	r6, r2
    26de:	f105 0501 	add.w	r5, r5, #1
    26e2:	d303      	bcc.n	26ec <countCRC.isra.0+0x1c>
#endif //ARDUINO_ARCH_AVR
        }
        FCS16 = ~FCS16;
    26e4:	43d8      	mvns	r0, r3
        //CRC is in big endian byte order.
        tmp = FCS16;
        FCS16 = tmp >> 8;
        FCS16 |= tmp << 8;
        return FCS16;
    26e6:	ba40      	rev16	r0, r0
    }
    26e8:	b280      	uxth	r0, r0
    26ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
            FCS16 = (FCS16 >> 8) ^ FCS16Table[(FCS16 ^ ((unsigned char*)Buff->data)[index + pos]) & 0xFF];
    26ec:	6804      	ldr	r4, [r0, #0]
    26ee:	4434      	add	r4, r6
    26f0:	5c64      	ldrb	r4, [r4, r1]
    26f2:	405c      	eors	r4, r3
    26f4:	b2e4      	uxtb	r4, r4
    26f6:	f837 4014 	ldrh.w	r4, [r7, r4, lsl #1]
    26fa:	ea84 2313 	eor.w	r3, r4, r3, lsr #8
        for (pos = 0; pos < count; ++pos)
    26fe:	e7ec      	b.n	26da <countCRC.isra.0+0xa>
    2700:	0001d17c 	.word	0x0001d17c

00002704 <getBcd>:
* info
*            Data info.
* Returns  parsed BCD value.
*/
int getBcd(gxByteBuffer* buff, gxDataInfo* info, unsigned char knownType, dlmsVARIANT* value)
{
    2704:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    2708:	4605      	mov	r5, r0
    270a:	460e      	mov	r6, r1
    270c:	461c      	mov	r4, r3
#endif //DLMS_IGNORE_MALLOC
    static const char hexArray[] = { '0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F' };
    int ret = 0, a;
    uint16_t len;
    unsigned char ch;
    if (knownType)
    270e:	b1d2      	cbz	r2, 2746 <getBcd+0x42>
    {
        len = (uint16_t)buff->size;
    2710:	88c3      	ldrh	r3, [r0, #6]
    2712:	f8ad 3006 	strh.w	r3, [sp, #6]
            *p = hexArray[ch & 0x0F];
            p++;
        }
    }
#else
    value->strVal = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
    2716:	200c      	movs	r0, #12
    2718:	f009 fa4c 	bl	bbb4 <malloc>
    271c:	60a0      	str	r0, [r4, #8]
    BYTE_BUFFER_INIT(value->strVal);
    271e:	f00a fa61 	bl	cbe4 <bb_init>
    value->vt = DLMS_DATA_TYPE_STRING;
    bb_capacity(value->strVal, (uint16_t)(len * 2));
    2722:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    2726:	68a0      	ldr	r0, [r4, #8]
        {
            break;
        }
        idHigh = ch >> 4;
        idLow = ch & 0x0F;
        bb_setInt8(value->strVal, hexArray[idHigh]);
    2728:	f8df 8074 	ldr.w	r8, [pc, #116]	; 27a0 <getBcd+0x9c>
    value->vt = DLMS_DATA_TYPE_STRING;
    272c:	230a      	movs	r3, #10
    bb_capacity(value->strVal, (uint16_t)(len * 2));
    272e:	0049      	lsls	r1, r1, #1
    value->vt = DLMS_DATA_TYPE_STRING;
    2730:	7023      	strb	r3, [r4, #0]
    bb_capacity(value->strVal, (uint16_t)(len * 2));
    2732:	b289      	uxth	r1, r1
    2734:	f00a fa5c 	bl	cbf0 <bb_capacity>
    for (a = 0; a != len; ++a)
    2738:	2700      	movs	r7, #0
    273a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    273e:	42bb      	cmp	r3, r7
    2740:	d113      	bne.n	276a <getBcd+0x66>
    2742:	2000      	movs	r0, #0
    2744:	e00e      	b.n	2764 <getBcd+0x60>
        if (hlp_getObjectCount2(buff, &len) != 0)
    2746:	f10d 0106 	add.w	r1, sp, #6
    274a:	f017 f872 	bl	19832 <hlp_getObjectCount2>
    274e:	bb20      	cbnz	r0, 279a <getBcd+0x96>
        if ((buff->size - buff->position) < (uint16_t)(2 * len))
    2750:	892b      	ldrh	r3, [r5, #8]
    2752:	88ea      	ldrh	r2, [r5, #6]
    2754:	1ad2      	subs	r2, r2, r3
    2756:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    275a:	005b      	lsls	r3, r3, #1
    275c:	b29b      	uxth	r3, r3
    275e:	429a      	cmp	r2, r3
    2760:	dad9      	bge.n	2716 <getBcd+0x12>
            info->complete = 0;
    2762:	7170      	strb	r0, [r6, #5]
        bb_setInt8(value->strVal, hexArray[idLow]);
    }
#endif //DLMS_IGNORE_MALLOC
    return ret;
}
    2764:	b002      	add	sp, #8
    2766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ((ret = bb_getUInt8(buff, &ch)) != 0)
    276a:	f10d 0105 	add.w	r1, sp, #5
    276e:	4628      	mov	r0, r5
    2770:	f00a fc11 	bl	cf96 <bb_getUInt8>
    2774:	2800      	cmp	r0, #0
    2776:	d1f5      	bne.n	2764 <getBcd+0x60>
        idHigh = ch >> 4;
    2778:	f89d 6005 	ldrb.w	r6, [sp, #5]
        bb_setInt8(value->strVal, hexArray[idHigh]);
    277c:	68a0      	ldr	r0, [r4, #8]
    277e:	0933      	lsrs	r3, r6, #4
        bb_setInt8(value->strVal, hexArray[idLow]);
    2780:	f006 060f 	and.w	r6, r6, #15
        bb_setInt8(value->strVal, hexArray[idHigh]);
    2784:	f818 1003 	ldrb.w	r1, [r8, r3]
    2788:	f00a fb72 	bl	ce70 <bb_setInt8>
        bb_setInt8(value->strVal, hexArray[idLow]);
    278c:	f818 1006 	ldrb.w	r1, [r8, r6]
    2790:	68a0      	ldr	r0, [r4, #8]
    2792:	f00a fb6d 	bl	ce70 <bb_setInt8>
    for (a = 0; a != len; ++a)
    2796:	3701      	adds	r7, #1
    2798:	e7cf      	b.n	273a <getBcd+0x36>
            return DLMS_ERROR_CODE_OUTOFMEMORY;
    279a:	f44f 7082 	mov.w	r0, #260	; 0x104
    279e:	e7e1      	b.n	2764 <getBcd+0x60>
    27a0:	0001d626 	.word	0x0001d626

000027a4 <getTime>:
* info
*            Data info.
* Returns  Parsed time.
*/
int getTime(gxByteBuffer* buff, gxDataInfo* info, dlmsVARIANT* value)
{
    27a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    int ret;
    unsigned char ch, hour, minute, second;
    uint16_t ms = 0xFFFF;
    if (buff->size - buff->position < 4)
    27a8:	88c3      	ldrh	r3, [r0, #6]
{
    27aa:	4616      	mov	r6, r2
    if (buff->size - buff->position < 4)
    27ac:	8902      	ldrh	r2, [r0, #8]
    27ae:	1a9b      	subs	r3, r3, r2
    27b0:	2b03      	cmp	r3, #3
{
    27b2:	b089      	sub	sp, #36	; 0x24
    27b4:	4605      	mov	r5, r0
    if (buff->size - buff->position < 4)
    27b6:	dc06      	bgt.n	27c6 <getTime+0x22>
    {
        // If there is not enough data available.
        info->complete = 0;
    27b8:	2000      	movs	r0, #0
    27ba:	7148      	strb	r0, [r1, #5]
        return 0;
    27bc:	4604      	mov	r4, r0
    value->vt = DLMS_DATA_TYPE_TIME;
#else
    time_init((gxtime*)value->pVal, -1, -1, -1, hour, minute, second, ms, 0x8000);
#endif //DLMS_IGNORE_MALLOC
    return 0;
}
    27be:	4620      	mov	r0, r4
    27c0:	b009      	add	sp, #36	; 0x24
    27c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    27c6:	f10d 011f 	add.w	r1, sp, #31
    27ca:	f00a fbe4 	bl	cf96 <bb_getUInt8>
    27ce:	4604      	mov	r4, r0
    27d0:	2800      	cmp	r0, #0
    27d2:	d1f4      	bne.n	27be <getTime+0x1a>
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    27d4:	f10d 011f 	add.w	r1, sp, #31
    27d8:	4628      	mov	r0, r5
    hour = ch;
    27da:	f89d 701f 	ldrb.w	r7, [sp, #31]
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    27de:	f00a fbda 	bl	cf96 <bb_getUInt8>
    27e2:	4604      	mov	r4, r0
    27e4:	2800      	cmp	r0, #0
    27e6:	d1ea      	bne.n	27be <getTime+0x1a>
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    27e8:	f10d 011f 	add.w	r1, sp, #31
    27ec:	4628      	mov	r0, r5
    minute = ch;
    27ee:	f89d 801f 	ldrb.w	r8, [sp, #31]
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    27f2:	f00a fbd0 	bl	cf96 <bb_getUInt8>
    27f6:	4604      	mov	r4, r0
    27f8:	2800      	cmp	r0, #0
    27fa:	d1e0      	bne.n	27be <getTime+0x1a>
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    27fc:	f10d 011f 	add.w	r1, sp, #31
    2800:	4628      	mov	r0, r5
    second = ch;
    2802:	f89d 901f 	ldrb.w	r9, [sp, #31]
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    2806:	f00a fbc6 	bl	cf96 <bb_getUInt8>
    280a:	4604      	mov	r4, r0
    280c:	2800      	cmp	r0, #0
    280e:	d1d6      	bne.n	27be <getTime+0x1a>
    if (ch != 0xFF)
    2810:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2814:	2bff      	cmp	r3, #255	; 0xff
        ms = ch * 10;
    2816:	bf1c      	itt	ne
    2818:	eb03 0383 	addne.w	r3, r3, r3, lsl #2
    281c:	005d      	lslne	r5, r3, #1
    if ((value->vt & DLMS_DATA_TYPE_BYREF) == 0)
    281e:	f996 3000 	ldrsb.w	r3, [r6]
    uint16_t ms = 0xFFFF;
    2822:	bf08      	it	eq
    2824:	f64f 75ff 	movweq	r5, #65535	; 0xffff
    if ((value->vt & DLMS_DATA_TYPE_BYREF) == 0)
    2828:	2b00      	cmp	r3, #0
    282a:	db03      	blt.n	2834 <getTime+0x90>
        value->dateTime = (gxtime*)gxmalloc(sizeof(gxtime));
    282c:	200c      	movs	r0, #12
    282e:	f009 f9c1 	bl	bbb4 <malloc>
    2832:	60b0      	str	r0, [r6, #8]
    time_init(value->dateTime, (uint16_t)-1, 0xFF, 0xFF, hour, minute, second, ms, 0x8000);
    2834:	4b07      	ldr	r3, [pc, #28]	; (2854 <getTime+0xb0>)
    2836:	68b0      	ldr	r0, [r6, #8]
    2838:	9700      	str	r7, [sp, #0]
    283a:	e9cd 5303 	strd	r5, r3, [sp, #12]
    283e:	23ff      	movs	r3, #255	; 0xff
    2840:	461a      	mov	r2, r3
    2842:	e9cd 8901 	strd	r8, r9, [sp, #4]
    2846:	f64f 71ff 	movw	r1, #65535	; 0xffff
    284a:	f7ff fb71 	bl	1f30 <time_init>
    value->vt = DLMS_DATA_TYPE_TIME;
    284e:	231b      	movs	r3, #27
    2850:	7033      	strb	r3, [r6, #0]
    return 0;
    2852:	e7b4      	b.n	27be <getTime+0x1a>
    2854:	ffff8000 	.word	0xffff8000

00002858 <getDate>:
* info
*            Data info.
* Returns  Parsed date.
*/
int getDate(gxByteBuffer* buff, gxDataInfo* info, dlmsVARIANT* value)
{
    2858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    int ret;
	unsigned char month, day;
    uint16_t year;
    unsigned char ch;
    if (buff->size - buff->position < 5)
    285c:	88c3      	ldrh	r3, [r0, #6]
{
    285e:	4615      	mov	r5, r2
    if (buff->size - buff->position < 5)
    2860:	8902      	ldrh	r2, [r0, #8]
    2862:	1a9b      	subs	r3, r3, r2
    2864:	2b04      	cmp	r3, #4
{
    2866:	b088      	sub	sp, #32
    2868:	4606      	mov	r6, r0
    if (buff->size - buff->position < 5)
    286a:	dc06      	bgt.n	287a <getDate+0x22>
    {
        // If there is not enough data available.
        info->complete = 0;
    286c:	2000      	movs	r0, #0
    286e:	7148      	strb	r0, [r1, #5]
        return 0;
    2870:	4604      	mov	r4, r0
    {
        ((gxtime*)value->pVal)->skip |= DATETIME_SKIPS_DAYOFWEEK;
    }
#endif //DLMS_IGNORE_MALLOC
    return 0;
}
    2872:	4620      	mov	r0, r4
    2874:	b008      	add	sp, #32
    2876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((ret = bb_getUInt16(buff, &year)) != 0)
    287a:	f10d 011e 	add.w	r1, sp, #30
    287e:	f00a fbb3 	bl	cfe8 <bb_getUInt16>
    2882:	4604      	mov	r4, r0
    2884:	2800      	cmp	r0, #0
    2886:	d1f4      	bne.n	2872 <getDate+0x1a>
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    2888:	f10d 011d 	add.w	r1, sp, #29
    288c:	4630      	mov	r0, r6
    288e:	f00a fb82 	bl	cf96 <bb_getUInt8>
    2892:	4604      	mov	r4, r0
    2894:	2800      	cmp	r0, #0
    2896:	d1ec      	bne.n	2872 <getDate+0x1a>
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    2898:	f10d 011d 	add.w	r1, sp, #29
    289c:	4630      	mov	r0, r6
    month = ch;
    289e:	f89d 701d 	ldrb.w	r7, [sp, #29]
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    28a2:	f00a fb78 	bl	cf96 <bb_getUInt8>
    28a6:	4604      	mov	r4, r0
    28a8:	2800      	cmp	r0, #0
    28aa:	d1e2      	bne.n	2872 <getDate+0x1a>
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    28ac:	f10d 011d 	add.w	r1, sp, #29
    28b0:	4630      	mov	r0, r6
    day = ch;
    28b2:	f89d 801d 	ldrb.w	r8, [sp, #29]
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    28b6:	f00a fb6e 	bl	cf96 <bb_getUInt8>
    28ba:	4604      	mov	r4, r0
    28bc:	2800      	cmp	r0, #0
    28be:	d1d8      	bne.n	2872 <getDate+0x1a>
    if ((value->vt & DLMS_DATA_TYPE_BYREF) == 0)
    28c0:	f995 3000 	ldrsb.w	r3, [r5]
    28c4:	2b00      	cmp	r3, #0
    28c6:	db03      	blt.n	28d0 <getDate+0x78>
        value->dateTime = (gxtime*)gxmalloc(sizeof(gxtime));
    28c8:	200c      	movs	r0, #12
    28ca:	f009 f973 	bl	bbb4 <malloc>
    28ce:	60a8      	str	r0, [r5, #8]
    time_init(value->dateTime, year, month, day, 0xFF, 0xFF, 0xFF, 0xFF, 0x8000);
    28d0:	4a0c      	ldr	r2, [pc, #48]	; (2904 <getDate+0xac>)
    28d2:	f8bd 101e 	ldrh.w	r1, [sp, #30]
    28d6:	68a8      	ldr	r0, [r5, #8]
    28d8:	23ff      	movs	r3, #255	; 0xff
    28da:	e9cd 3203 	strd	r3, r2, [sp, #12]
    28de:	e9cd 3301 	strd	r3, r3, [sp, #4]
    28e2:	463a      	mov	r2, r7
    28e4:	9300      	str	r3, [sp, #0]
    28e6:	4643      	mov	r3, r8
    28e8:	f7ff fb22 	bl	1f30 <time_init>
    if (ch > 7)
    28ec:	f89d 301d 	ldrb.w	r3, [sp, #29]
    28f0:	2b07      	cmp	r3, #7
        value->dateTime->skip |= DATETIME_SKIPS_DAYOFWEEK;
    28f2:	bf81      	itttt	hi
    28f4:	68aa      	ldrhi	r2, [r5, #8]
    28f6:	88d3      	ldrhhi	r3, [r2, #6]
    28f8:	f043 0308 	orrhi.w	r3, r3, #8
    28fc:	80d3      	strhhi	r3, [r2, #6]
    value->vt = DLMS_DATA_TYPE_DATE;
    28fe:	231a      	movs	r3, #26
    2900:	702b      	strb	r3, [r5, #0]
    return 0;
    2902:	e7b6      	b.n	2872 <getDate+0x1a>
    2904:	ffff8000 	.word	0xffff8000

00002908 <dlms_checkLLCBytes>:

#ifndef DLMS_IGNORE_HDLC

//Return DLMS_ERROR_CODE_FALSE if LLC bytes are not included.
int dlms_checkLLCBytes(dlmsSettings* settings, gxByteBuffer* data)
{
    2908:	b510      	push	{r4, lr}
    290a:	4602      	mov	r2, r0
    290c:	680b      	ldr	r3, [r1, #0]
    290e:	8908      	ldrh	r0, [r1, #8]
    2910:	4418      	add	r0, r3
    if (settings->server)
    2912:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
{
    2916:	460c      	mov	r4, r1
    {
        //Check LLC bytes.
        if (memcmp(data->data + data->position, LLC_SEND_BYTES, 3) != 0)
    2918:	2203      	movs	r2, #3
    if (settings->server)
    291a:	b15b      	cbz	r3, 2934 <dlms_checkLLCBytes+0x2c>
        if (memcmp(data->data + data->position, LLC_SEND_BYTES, 3) != 0)
    291c:	4906      	ldr	r1, [pc, #24]	; (2938 <dlms_checkLLCBytes+0x30>)
    291e:	f019 fbd1 	bl	1c0c4 <memcmp>
    2922:	b920      	cbnz	r0, 292e <dlms_checkLLCBytes+0x26>
        if (memcmp(data->data + data->position, LLC_REPLY_BYTES, 3) != 0)
        {
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
        }
    }
    data->position += 3;
    2924:	8923      	ldrh	r3, [r4, #8]
    2926:	3303      	adds	r3, #3
    2928:	8123      	strh	r3, [r4, #8]
    return DLMS_ERROR_CODE_OK;
    292a:	2000      	movs	r0, #0
}
    292c:	bd10      	pop	{r4, pc}
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
    292e:	f44f 7081 	mov.w	r0, #258	; 0x102
    2932:	e7fb      	b.n	292c <dlms_checkLLCBytes+0x24>
        if (memcmp(data->data + data->position, LLC_REPLY_BYTES, 3) != 0)
    2934:	4901      	ldr	r1, [pc, #4]	; (293c <dlms_checkLLCBytes+0x34>)
    2936:	e7f2      	b.n	291e <dlms_checkLLCBytes+0x16>
    2938:	0001d623 	.word	0x0001d623
    293c:	0001d620 	.word	0x0001d620

00002940 <dlms_countFCS24>:
}

// Reserved for internal use.
const uint32_t CRCPOLY = 0xD3B6BA00;
uint32_t dlms_countFCS24(unsigned char* buff, int index, int count)
{
    2940:	b5f0      	push	{r4, r5, r6, r7, lr}
    unsigned char i, j;
    uint32_t crcreg = 0;
    for (j = 0; j < count; ++j)
    2942:	2600      	movs	r6, #0
            {
                crcreg |= 0x80000000;
            }
            if ((crcreg & 0x80) != 0)
            {
                crcreg = crcreg ^ CRCPOLY;
    2944:	4f0e      	ldr	r7, [pc, #56]	; (2980 <dlms_countFCS24+0x40>)
    uint32_t crcreg = 0;
    2946:	4633      	mov	r3, r6
    for (j = 0; j < count; ++j)
    2948:	b2f4      	uxtb	r4, r6
    294a:	4294      	cmp	r4, r2
    294c:	db01      	blt.n	2952 <dlms_countFCS24+0x12>
            }
            b <<= 1;
        }
    }
    return crcreg >> 8;
}
    294e:	0a18      	lsrs	r0, r3, #8
    2950:	bdf0      	pop	{r4, r5, r6, r7, pc}
        unsigned char b = buff[index + j];
    2952:	4404      	add	r4, r0
    2954:	5c65      	ldrb	r5, [r4, r1]
    2956:	2408      	movs	r4, #8
            crcreg >>= 1;
    2958:	085b      	lsrs	r3, r3, #1
            if ((b & 0x80) != 0)
    295a:	f015 0f80 	tst.w	r5, #128	; 0x80
                crcreg |= 0x80000000;
    295e:	bf18      	it	ne
    2960:	f043 4300 	orrne.w	r3, r3, #2147483648	; 0x80000000
            if ((crcreg & 0x80) != 0)
    2964:	f013 0f80 	tst.w	r3, #128	; 0x80
                crcreg = crcreg ^ CRCPOLY;
    2968:	f104 34ff 	add.w	r4, r4, #4294967295
    296c:	bf18      	it	ne
    296e:	407b      	eorne	r3, r7
            b <<= 1;
    2970:	006d      	lsls	r5, r5, #1
        for (i = 0; i < 8; ++i)
    2972:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
            b <<= 1;
    2976:	b2ed      	uxtb	r5, r5
        for (i = 0; i < 8; ++i)
    2978:	d1ee      	bne.n	2958 <dlms_countFCS24+0x18>
    for (j = 0; j < count; ++j)
    297a:	3601      	adds	r6, #1
    297c:	e7e4      	b.n	2948 <dlms_countFCS24+0x8>
    297e:	bf00      	nop
    2980:	d3b6ba00 	.word	0xd3b6ba00

00002984 <dlms_handleGloDedRequest>:
}

#if !defined(DLMS_IGNORE_SERVER)
int dlms_handleGloDedRequest(dlmsSettings* settings,
    gxReplyData* data)
{
    2984:	b5f0      	push	{r4, r5, r6, r7, lr}
    2986:	898b      	ldrh	r3, [r1, #12]
    ret = DLMS_ERROR_CODE_NOT_IMPLEMENTED;
#else
    DLMS_SECURITY_SUITE suite;
    uint64_t invocationCounter;
    // If all frames are read.
    if ((data->moreData & DLMS_DATA_REQUEST_TYPES_FRAME) == 0)
    2988:	780a      	ldrb	r2, [r1, #0]
    298a:	3b01      	subs	r3, #1
    298c:	f012 0f01 	tst.w	r2, #1
{
    2990:	b089      	sub	sp, #36	; 0x24
    2992:	4604      	mov	r4, r0
    2994:	460d      	mov	r5, r1
    {
        unsigned char ch;
        DLMS_SECURITY security;
        --data->data.position;
    2996:	818b      	strh	r3, [r1, #12]
    if ((data->moreData & DLMS_DATA_REQUEST_TYPES_FRAME) == 0)
    2998:	f040 808a 	bne.w	2ab0 <dlms_handleGloDedRequest+0x12c>
        unsigned char emptySourceSystemTile;
        emptySourceSystemTile = memcmp(settings->sourceSystemTitle, EMPTY_SYSTEM_TITLE, 8) == 0;
    299c:	f100 071c 	add.w	r7, r0, #28
    29a0:	2208      	movs	r2, #8
    29a2:	4944      	ldr	r1, [pc, #272]	; (2ab4 <dlms_handleGloDedRequest+0x130>)
    29a4:	4638      	mov	r0, r7
    29a6:	f019 fb8d 	bl	1c0c4 <memcmp>
    return settings->cipher.dedicatedKey != NULL;
    29aa:	f8d4 20d4 	ldr.w	r2, [r4, #212]	; 0xd4
        emptySourceSystemTile = memcmp(settings->sourceSystemTitle, EMPTY_SYSTEM_TITLE, 8) == 0;
    29ae:	4606      	mov	r6, r0
        if (dlms_useDedicatedKey(settings) && (settings->connected & DLMS_CONNECTION_STATE_DLMS) != 0)
    29b0:	b1a2      	cbz	r2, 29dc <dlms_handleGloDedRequest+0x58>
    29b2:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    29b6:	0799      	lsls	r1, r3, #30
    29b8:	d510      	bpl.n	29dc <dlms_handleGloDedRequest+0x58>
        {
            if ((ret = cip_decrypt(&settings->cipher,
    29ba:	ab06      	add	r3, sp, #24
    29bc:	9302      	str	r3, [sp, #8]
    29be:	f10d 0315 	add.w	r3, sp, #21
    29c2:	9301      	str	r3, [sp, #4]
    29c4:	f10d 0317 	add.w	r3, sp, #23
    29c8:	9300      	str	r3, [sp, #0]
    29ca:	1d2b      	adds	r3, r5, #4
                data->preEstablished = 1;
            }
        }
        else
        {
            if ((ret = cip_decrypt(&settings->cipher,
    29cc:	4639      	mov	r1, r7
    29ce:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
    29d2:	f7ff f907 	bl	1be4 <cip_decrypt>
    29d6:	2800      	cmp	r0, #0
    29d8:	d041      	beq.n	2a5e <dlms_handleGloDedRequest+0xda>
    29da:	e01b      	b.n	2a14 <dlms_handleGloDedRequest+0x90>
        else if (dlms_usePreEstablishedSystemTitle(settings) && emptySourceSystemTile)
    29dc:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
    29e0:	2b00      	cmp	r3, #0
    29e2:	d056      	beq.n	2a92 <dlms_handleGloDedRequest+0x10e>
    29e4:	2e00      	cmp	r6, #0
    29e6:	d154      	bne.n	2a92 <dlms_handleGloDedRequest+0x10e>
            if (settings->server && settings->connected == DLMS_CONNECTION_STATE_NONE && !data->preEstablished)
    29e8:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
    29ec:	b9a3      	cbnz	r3, 2a18 <dlms_handleGloDedRequest+0x94>
            if ((ret = cip_decrypt(&settings->cipher,
    29ee:	ab06      	add	r3, sp, #24
    29f0:	9302      	str	r3, [sp, #8]
    29f2:	f10d 0315 	add.w	r3, sp, #21
    29f6:	9301      	str	r3, [sp, #4]
    29f8:	f8d4 10dc 	ldr.w	r1, [r4, #220]	; 0xdc
    29fc:	f10d 0317 	add.w	r3, sp, #23
    2a00:	9300      	str	r3, [sp, #0]
    2a02:	6809      	ldr	r1, [r1, #0]
    2a04:	1d2b      	adds	r3, r5, #4
    2a06:	f104 02ac 	add.w	r2, r4, #172	; 0xac
    2a0a:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
    2a0e:	f7ff f8e9 	bl	1be4 <cip_decrypt>
    2a12:	b1f0      	cbz	r0, 2a52 <dlms_handleGloDedRequest+0xce>
    {
        data->data.position -= 1;
    }
#endif //DLMS_IGNORE_HIGH_GMAC
    return ret;
}
    2a14:	b009      	add	sp, #36	; 0x24
    2a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if (settings->server && settings->connected == DLMS_CONNECTION_STATE_NONE && !data->preEstablished)
    2a18:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    2a1c:	2b00      	cmp	r3, #0
    2a1e:	d1e6      	bne.n	29ee <dlms_handleGloDedRequest+0x6a>
    2a20:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
    2a24:	2b00      	cmp	r3, #0
    2a26:	d1e2      	bne.n	29ee <dlms_handleGloDedRequest+0x6a>
                if (!svr_isTarget(settings, settings->serverAddress, settings->clientAddress))
    2a28:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
    2a2a:	6b21      	ldr	r1, [r4, #48]	; 0x30
    2a2c:	4620      	mov	r0, r4
    2a2e:	f009 ffd0 	bl	c9d2 <svr_isTarget>
    2a32:	b940      	cbnz	r0, 2a46 <dlms_handleGloDedRequest+0xc2>
                    if ((settings->connected & DLMS_CONNECTION_STATE_DLMS) == 0)
    2a34:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    2a38:	079b      	lsls	r3, r3, #30
    2a3a:	d401      	bmi.n	2a40 <dlms_handleGloDedRequest+0xbc>
                        settings->serverAddress = settings->clientAddress = 0;
    2a3c:	85e6      	strh	r6, [r4, #46]	; 0x2e
    2a3e:	6326      	str	r6, [r4, #48]	; 0x30
                    return DLMS_ERROR_CODE_INVALID_CLIENT_ADDRESS;
    2a40:	f240 1007 	movw	r0, #263	; 0x107
    2a44:	e7e6      	b.n	2a14 <dlms_handleGloDedRequest+0x90>
                if ((ret = svr_connected((dlmsServerSettings*)settings)) != 0)
    2a46:	4620      	mov	r0, r4
    2a48:	f009 ffc1 	bl	c9ce <svr_connected>
    2a4c:	2800      	cmp	r0, #0
    2a4e:	d0ce      	beq.n	29ee <dlms_handleGloDedRequest+0x6a>
    2a50:	e7e0      	b.n	2a14 <dlms_handleGloDedRequest+0x90>
            if (data->preEstablished == 0)
    2a52:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
    2a56:	b913      	cbnz	r3, 2a5e <dlms_handleGloDedRequest+0xda>
                data->preEstablished = 1;
    2a58:	2301      	movs	r3, #1
    2a5a:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        if (settings->expectedInvocationCounter != NULL)
    2a5e:	f8d4 10f0 	ldr.w	r1, [r4, #240]	; 0xf0
    2a62:	b149      	cbz	r1, 2a78 <dlms_handleGloDedRequest+0xf4>
            if (invocationCounter < *settings->expectedInvocationCounter)
    2a64:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    2a68:	680e      	ldr	r6, [r1, #0]
    2a6a:	2700      	movs	r7, #0
    2a6c:	42bb      	cmp	r3, r7
    2a6e:	bf08      	it	eq
    2a70:	42b2      	cmpeq	r2, r6
    2a72:	d31a      	bcc.n	2aaa <dlms_handleGloDedRequest+0x126>
            * settings->expectedInvocationCounter = (uint32_t)(1 + invocationCounter);
    2a74:	3201      	adds	r2, #1
    2a76:	600a      	str	r2, [r1, #0]
        if ((ret = bb_getUInt8(&data->data, &ch)) != 0)
    2a78:	f10d 0116 	add.w	r1, sp, #22
    2a7c:	1d28      	adds	r0, r5, #4
    2a7e:	f00a fa8a 	bl	cf96 <bb_getUInt8>
    2a82:	2800      	cmp	r0, #0
    2a84:	d1c6      	bne.n	2a14 <dlms_handleGloDedRequest+0x90>
        data->encryptedCommand = data->command;
    2a86:	786b      	ldrb	r3, [r5, #1]
    2a88:	70ab      	strb	r3, [r5, #2]
        data->command = (DLMS_COMMAND)ch;
    2a8a:	f89d 3016 	ldrb.w	r3, [sp, #22]
    2a8e:	706b      	strb	r3, [r5, #1]
    2a90:	e7c0      	b.n	2a14 <dlms_handleGloDedRequest+0x90>
            if ((ret = cip_decrypt(&settings->cipher,
    2a92:	ab06      	add	r3, sp, #24
    2a94:	9302      	str	r3, [sp, #8]
    2a96:	f10d 0315 	add.w	r3, sp, #21
    2a9a:	9301      	str	r3, [sp, #4]
    2a9c:	f10d 0317 	add.w	r3, sp, #23
    2aa0:	9300      	str	r3, [sp, #0]
    2aa2:	f104 02ac 	add.w	r2, r4, #172	; 0xac
    2aa6:	1d2b      	adds	r3, r5, #4
    2aa8:	e790      	b.n	29cc <dlms_handleGloDedRequest+0x48>
                return DLMS_ERROR_CODE_INVOCATION_COUNTER_TOO_SMALL;
    2aaa:	f44f 708e 	mov.w	r0, #284	; 0x11c
    2aae:	e7b1      	b.n	2a14 <dlms_handleGloDedRequest+0x90>
    return ret;
    2ab0:	2000      	movs	r0, #0
    2ab2:	e7af      	b.n	2a14 <dlms_handleGloDedRequest+0x90>
    2ab4:	0001d618 	.word	0x0001d618

00002ab8 <dlms_getPdu>:

int dlms_getPdu(
    dlmsSettings* settings,
    gxReplyData* data,
    unsigned char first)
{
    2ab8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    int ret = DLMS_ERROR_CODE_OK;
    uint16_t index;
    unsigned char ch;
    DLMS_COMMAND cmd = data->command;
    2abc:	784e      	ldrb	r6, [r1, #1]
{
    2abe:	4604      	mov	r4, r0
    2ac0:	460d      	mov	r5, r1
    // If header is not read yet or GBT message.
    if (cmd == DLMS_COMMAND_NONE)
    2ac2:	2e00      	cmp	r6, #0
    2ac4:	f040 8122 	bne.w	2d0c <dlms_getPdu+0x254>
    {
        // If PDU is missing.
        if (bb_available(&data->data) == 0)
    2ac8:	f101 0804 	add.w	r8, r1, #4
    2acc:	4640      	mov	r0, r8
    2ace:	f00a f87c 	bl	cbca <bb_available>
    2ad2:	b198      	cbz	r0, 2afc <dlms_getPdu+0x44>
            // Invalid PDU.
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
        }
        index = (uint16_t)(data->data.position);
        // Get command.
        if ((ret = bb_getUInt8(&data->data, &ch)) != 0)
    2ad4:	f10d 0107 	add.w	r1, sp, #7
    2ad8:	4640      	mov	r0, r8
        index = (uint16_t)(data->data.position);
    2ada:	89af      	ldrh	r7, [r5, #12]
        if ((ret = bb_getUInt8(&data->data, &ch)) != 0)
    2adc:	f00a fa5b 	bl	cf96 <bb_getUInt8>
    2ae0:	2800      	cmp	r0, #0
    2ae2:	f040 80d2 	bne.w	2c8a <dlms_getPdu+0x1d2>
        {
            return ret;
        }
        cmd = (DLMS_COMMAND)ch;
    2ae6:	f89d 6007 	ldrb.w	r6, [sp, #7]
        data->command = cmd;
    2aea:	706e      	strb	r6, [r5, #1]
        switch (cmd)
    2aec:	2ee0      	cmp	r6, #224	; 0xe0
    2aee:	d805      	bhi.n	2afc <dlms_getPdu+0x44>
    2af0:	2ebf      	cmp	r6, #191	; 0xbf
    2af2:	d806      	bhi.n	2b02 <dlms_getPdu+0x4a>
    2af4:	2e18      	cmp	r6, #24
    2af6:	d87b      	bhi.n	2bf0 <dlms_getPdu+0x138>
    2af8:	2e04      	cmp	r6, #4
    2afa:	d84b      	bhi.n	2b94 <dlms_getPdu+0xdc>
    2afc:	f44f 7081 	mov.w	r0, #258	; 0x102
    2b00:	e0c3      	b.n	2c8a <dlms_getPdu+0x1d2>
    2b02:	f1a6 03c0 	sub.w	r3, r6, #192	; 0xc0
    2b06:	2b20      	cmp	r3, #32
    2b08:	d8f8      	bhi.n	2afc <dlms_getPdu+0x44>
    2b0a:	a201      	add	r2, pc, #4	; (adr r2, 2b10 <dlms_getPdu+0x58>)
    2b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2b10:	00002c35 	.word	0x00002c35
    2b14:	00002c35 	.word	0x00002c35
    2b18:	00002c35 	.word	0x00002c35
    2b1c:	00002c35 	.word	0x00002c35
    2b20:	00002c77 	.word	0x00002c77
    2b24:	00002c91 	.word	0x00002c91
    2b28:	00002afd 	.word	0x00002afd
    2b2c:	00002ca7 	.word	0x00002ca7
    2b30:	00002c03 	.word	0x00002c03
    2b34:	00002c03 	.word	0x00002c03
    2b38:	00002afd 	.word	0x00002afd
    2b3c:	00002c03 	.word	0x00002c03
    2b40:	00002c1f 	.word	0x00002c1f
    2b44:	00002c1f 	.word	0x00002c1f
    2b48:	00002afd 	.word	0x00002afd
    2b4c:	00002c1f 	.word	0x00002c1f
    2b50:	00002c03 	.word	0x00002c03
    2b54:	00002c03 	.word	0x00002c03
    2b58:	00002c1f 	.word	0x00002c1f
    2b5c:	00002c03 	.word	0x00002c03
    2b60:	00002c1f 	.word	0x00002c1f
    2b64:	00002c1f 	.word	0x00002c1f
    2b68:	00002afd 	.word	0x00002afd
    2b6c:	00002c1f 	.word	0x00002c1f
    2b70:	00002ccb 	.word	0x00002ccb
    2b74:	00002afd 	.word	0x00002afd
    2b78:	00002afd 	.word	0x00002afd
    2b7c:	00002cd3 	.word	0x00002cd3
    2b80:	00002cd3 	.word	0x00002cd3
    2b84:	00002cf9 	.word	0x00002cf9
    2b88:	00002afd 	.word	0x00002afd
    2b8c:	00002afd 	.word	0x00002afd
    2b90:	00002cb1 	.word	0x00002cb1
    2b94:	1f73      	subs	r3, r6, #5
    2b96:	2b13      	cmp	r3, #19
    2b98:	d8b0      	bhi.n	2afc <dlms_getPdu+0x44>
    2b9a:	a201      	add	r2, pc, #4	; (adr r2, 2ba0 <dlms_getPdu+0xe8>)
    2b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2ba0:	00002c0f 	.word	0x00002c0f
    2ba4:	00002c0f 	.word	0x00002c0f
    2ba8:	00002afd 	.word	0x00002afd
    2bac:	00002afd 	.word	0x00002afd
    2bb0:	00002afd 	.word	0x00002afd
    2bb4:	00002afd 	.word	0x00002afd
    2bb8:	00002afd 	.word	0x00002afd
    2bbc:	00002c5f 	.word	0x00002c5f
    2bc0:	00002c9f 	.word	0x00002c9f
    2bc4:	00002cc3 	.word	0x00002cc3
    2bc8:	00002d03 	.word	0x00002d03
    2bcc:	00002afd 	.word	0x00002afd
    2bd0:	00002afd 	.word	0x00002afd
    2bd4:	00002afd 	.word	0x00002afd
    2bd8:	00002afd 	.word	0x00002afd
    2bdc:	00002afd 	.word	0x00002afd
    2be0:	00002afd 	.word	0x00002afd
    2be4:	00002afd 	.word	0x00002afd
    2be8:	00002afd 	.word	0x00002afd
    2bec:	00002c0f 	.word	0x00002c0f
    2bf0:	2e61      	cmp	r6, #97	; 0x61
    2bf2:	d81a      	bhi.n	2c2a <dlms_getPdu+0x172>
    2bf4:	2e5f      	cmp	r6, #95	; 0x5f
    2bf6:	d860      	bhi.n	2cba <dlms_getPdu+0x202>
    2bf8:	2e26      	cmp	r6, #38	; 0x26
    2bfa:	d80b      	bhi.n	2c14 <dlms_getPdu+0x15c>
    2bfc:	2e24      	cmp	r6, #36	; 0x24
    2bfe:	f67f af7d 	bls.w	2afc <dlms_getPdu+0x44>
        case DLMS_COMMAND_GLO_SET_REQUEST:
        case DLMS_COMMAND_GLO_METHOD_REQUEST:
        case DLMS_COMMAND_DED_GET_REQUEST:
        case DLMS_COMMAND_DED_SET_REQUEST:
        case DLMS_COMMAND_DED_METHOD_REQUEST:
            ret = dlms_handleGloDedRequest(settings, data);
    2c02:	4629      	mov	r1, r5
    2c04:	4620      	mov	r0, r4
    2c06:	f7ff febd 	bl	2984 <dlms_handleGloDedRequest>
    }

#if !defined(DLMS_IGNORE_MALLOC) && !defined(DLMS_COSEM_EXACT_DATA_TYPES)
#if !defined(DLMS_IGNORE_ASSOCIATION_SHORT_NAME)
    // Get data only blocks if SN is used. This is faster.
    if (ret == 0 && cmd == DLMS_COMMAND_READ_RESPONSE
    2c0a:	2800      	cmp	r0, #0
    2c0c:	d13d      	bne.n	2c8a <dlms_getPdu+0x1d2>
    2c0e:	2e0c      	cmp	r6, #12
    2c10:	d02b      	beq.n	2c6a <dlms_getPdu+0x1b2>
    2c12:	e00f      	b.n	2c34 <dlms_getPdu+0x17c>
        switch (cmd)
    2c14:	f1a6 032c 	sub.w	r3, r6, #44	; 0x2c
    2c18:	2b01      	cmp	r3, #1
    2c1a:	f63f af6f 	bhi.w	2afc <dlms_getPdu+0x44>
            ret = dlms_handleGloDedResponse(settings, data, index);
    2c1e:	463a      	mov	r2, r7
    2c20:	4629      	mov	r1, r5
    2c22:	4620      	mov	r0, r4
    2c24:	f00d f9b2 	bl	ff8c <dlms_handleGloDedResponse>
            break;
    2c28:	e7ef      	b.n	2c0a <dlms_getPdu+0x152>
        switch (cmd)
    2c2a:	f1a6 0362 	sub.w	r3, r6, #98	; 0x62
    2c2e:	2b01      	cmp	r3, #1
    2c30:	f63f af64 	bhi.w	2afc <dlms_getPdu+0x44>
    {
        return 0;
    }
#endif //!defined(DLMS_IGNORE_ASSOCIATION_SHORT_NAME)
    // Get data if all data is read or we want to peek data.
    if (ret == 0 && !data->ignoreValue && data->data.position != data->data.size
    2c34:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
    2c38:	bb33      	cbnz	r3, 2c88 <dlms_getPdu+0x1d0>
    2c3a:	89aa      	ldrh	r2, [r5, #12]
    2c3c:	896b      	ldrh	r3, [r5, #10]
    2c3e:	429a      	cmp	r2, r3
    2c40:	d022      	beq.n	2c88 <dlms_getPdu+0x1d0>
        && (
    2c42:	2e0c      	cmp	r6, #12
    2c44:	d001      	beq.n	2c4a <dlms_getPdu+0x192>
#if !defined(DLMS_IGNORE_ASSOCIATION_SHORT_NAME)
            cmd == DLMS_COMMAND_READ_RESPONSE ||
    2c46:	2ec4      	cmp	r6, #196	; 0xc4
    2c48:	d11e      	bne.n	2c88 <dlms_getPdu+0x1d0>
#endif //!defined(DLMS_IGNORE_ASSOCIATION_SHORT_NAME)
            cmd == DLMS_COMMAND_GET_RESPONSE)
        && (data->moreData == DLMS_DATA_REQUEST_TYPES_NONE
    2c4a:	782b      	ldrb	r3, [r5, #0]
    2c4c:	b113      	cbz	r3, 2c54 <dlms_getPdu+0x19c>
            || data->peek))
    2c4e:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
    2c52:	b1cb      	cbz	r3, 2c88 <dlms_getPdu+0x1d0>
    {
        ret = dlms_getValueFromData(settings, data);
    2c54:	4629      	mov	r1, r5
    2c56:	4620      	mov	r0, r4
    2c58:	f00c fe40 	bl	f8dc <dlms_getValueFromData>
    2c5c:	e015      	b.n	2c8a <dlms_getPdu+0x1d2>
            if ((ret = dlms_handleReadResponse(settings, data, index)) != 0)
    2c5e:	463a      	mov	r2, r7
    2c60:	4629      	mov	r1, r5
    2c62:	4620      	mov	r0, r4
    2c64:	f00c ff02 	bl	fa6c <dlms_handleReadResponse>
    2c68:	b960      	cbnz	r0, 2c84 <dlms_getPdu+0x1cc>
        && data->commandType == DLMS_SINGLE_READ_RESPONSE_DATA_BLOCK_RESULT
    2c6a:	78eb      	ldrb	r3, [r5, #3]
    2c6c:	2b02      	cmp	r3, #2
    2c6e:	f000 80c3 	beq.w	2df8 <dlms_getPdu+0x340>
    2c72:	260c      	movs	r6, #12
    2c74:	e7de      	b.n	2c34 <dlms_getPdu+0x17c>
            if ((ret = dlms_handleGetResponse(settings, data, index)) != 0)
    2c76:	463a      	mov	r2, r7
    2c78:	4629      	mov	r1, r5
    2c7a:	4620      	mov	r0, r4
    2c7c:	f00c fd5e 	bl	f73c <dlms_handleGetResponse>
    2c80:	2800      	cmp	r0, #0
    2c82:	d0d7      	beq.n	2c34 <dlms_getPdu+0x17c>
                if (ret == DLMS_ERROR_CODE_FALSE)
    2c84:	1c44      	adds	r4, r0, #1
    2c86:	d100      	bne.n	2c8a <dlms_getPdu+0x1d2>
                    return DLMS_ERROR_CODE_OK;
    2c88:	2000      	movs	r0, #0
#else
    data->dataValue.byteArr = &data->data;
    data->dataValue.vt = DLMS_DATA_TYPE_BYREF | DLMS_DATA_TYPE_OCTET_STRING;
#endif //!defined(DLMS_IGNORE_MALLOC) && !defined(DLMS_COSEM_EXACT_DATA_TYPES)
    return ret;
}
    2c8a:	b002      	add	sp, #8
    2c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            ret = dlms_handleSetResponse(settings, data);
    2c90:	4629      	mov	r1, r5
    2c92:	4620      	mov	r0, r4
    2c94:	f00c fff9 	bl	fc8a <dlms_handleSetResponse>
    if (ret == 0 && cmd == DLMS_COMMAND_READ_RESPONSE
    2c98:	2800      	cmp	r0, #0
    2c9a:	d1f6      	bne.n	2c8a <dlms_getPdu+0x1d2>
    2c9c:	e7ca      	b.n	2c34 <dlms_getPdu+0x17c>
            ret = dlms_handleWriteResponse(data);
    2c9e:	4628      	mov	r0, r5
    2ca0:	f00c fdf4 	bl	f88c <handleWriteResponse>
            break;
    2ca4:	e7f8      	b.n	2c98 <dlms_getPdu+0x1e0>
            ret = dlms_handleMethodResponse(settings, data);
    2ca6:	4629      	mov	r1, r5
    2ca8:	4620      	mov	r0, r4
    2caa:	f00c ff99 	bl	fbe0 <dlms_handleMethodResponse>
            break;
    2cae:	e7f3      	b.n	2c98 <dlms_getPdu+0x1e0>
            ret = dlms_handleGbt(settings, data);
    2cb0:	4629      	mov	r1, r5
    2cb2:	4620      	mov	r0, r4
    2cb4:	f00d f8e7 	bl	fe86 <dlms_handleGbt>
            break;
    2cb8:	e7ee      	b.n	2c98 <dlms_getPdu+0x1e0>
            data->data.position -= 1;
    2cba:	89ab      	ldrh	r3, [r5, #12]
    2cbc:	3b01      	subs	r3, #1
    2cbe:	81ab      	strh	r3, [r5, #12]
    if (ret == 0 && cmd == DLMS_COMMAND_READ_RESPONSE
    2cc0:	e7b8      	b.n	2c34 <dlms_getPdu+0x17c>
            ret = dlms_handleConfirmedServiceError(&data->data);
    2cc2:	4640      	mov	r0, r8
    2cc4:	f00d f89c 	bl	fe00 <dlms_handleConfirmedServiceError>
            break;
    2cc8:	e7e6      	b.n	2c98 <dlms_getPdu+0x1e0>
            ret = dlms_handleExceptionResponse(&data->data);
    2cca:	4640      	mov	r0, r8
    2ccc:	f00d f8b9 	bl	fe42 <dlms_handleExceptionResponse>
            break;
    2cd0:	e7e2      	b.n	2c98 <dlms_getPdu+0x1e0>
            if (settings->server)
    2cd2:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
    2cd6:	b14b      	cbz	r3, 2cec <dlms_getPdu+0x234>
                if ((settings->connected & DLMS_CONNECTION_STATE_DLMS) == 0)
    2cd8:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    2cdc:	0799      	lsls	r1, r3, #30
    2cde:	f140 8090 	bpl.w	2e02 <dlms_getPdu+0x34a>
                ret = dlms_handleGloDedRequest(settings, data);
    2ce2:	4629      	mov	r1, r5
    2ce4:	4620      	mov	r0, r4
    2ce6:	f7ff fe4d 	bl	2984 <dlms_handleGloDedRequest>
    2cea:	e7d5      	b.n	2c98 <dlms_getPdu+0x1e0>
                ret = dlms_handleGloDedResponse(settings, data, index);
    2cec:	463a      	mov	r2, r7
    2cee:	4629      	mov	r1, r5
    2cf0:	4620      	mov	r0, r4
    2cf2:	f00d f94b 	bl	ff8c <dlms_handleGloDedResponse>
    2cf6:	e7cf      	b.n	2c98 <dlms_getPdu+0x1e0>
            ret = dlms_handleGeneralCiphering(settings, data);
    2cf8:	4629      	mov	r1, r5
    2cfa:	4620      	mov	r0, r4
    2cfc:	f00d f9b3 	bl	10066 <dlms_handleGeneralCiphering>
            break;
    2d00:	e7ca      	b.n	2c98 <dlms_getPdu+0x1e0>
            ret = dlms_handleDataNotification(settings, data);
    2d02:	4629      	mov	r1, r5
    2d04:	4620      	mov	r0, r4
    2d06:	f00d f835 	bl	fd74 <dlms_handleDataNotification>
            break;
    2d0a:	e7c5      	b.n	2c98 <dlms_getPdu+0x1e0>
    else if ((data->moreData & DLMS_DATA_REQUEST_TYPES_FRAME) == 0)
    2d0c:	780b      	ldrb	r3, [r1, #0]
    2d0e:	07da      	lsls	r2, r3, #31
    2d10:	f53f af7d 	bmi.w	2c0e <dlms_getPdu+0x156>
        if (!data->peek && data->moreData == DLMS_DATA_REQUEST_TYPES_NONE)
    2d14:	f891 002e 	ldrb.w	r0, [r1, #46]	; 0x2e
    2d18:	4318      	orrs	r0, r3
    2d1a:	d108      	bne.n	2d2e <dlms_getPdu+0x276>
            if (!settings->server || data->command == DLMS_COMMAND_AARE || data->command == DLMS_COMMAND_AARQ)
    2d1c:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
    2d20:	b11b      	cbz	r3, 2d2a <dlms_getPdu+0x272>
    2d22:	f1a6 0360 	sub.w	r3, r6, #96	; 0x60
    2d26:	2b01      	cmp	r3, #1
    2d28:	d805      	bhi.n	2d36 <dlms_getPdu+0x27e>
                data->data.position = 0;
    2d2a:	2300      	movs	r3, #0
    2d2c:	81ab      	strh	r3, [r5, #12]
        if (cmd == DLMS_COMMAND_GENERAL_BLOCK_TRANSFER)
    2d2e:	2ee0      	cmp	r6, #224	; 0xe0
    2d30:	d005      	beq.n	2d3e <dlms_getPdu+0x286>
    int ret = DLMS_ERROR_CODE_OK;
    2d32:	2000      	movs	r0, #0
    2d34:	e00e      	b.n	2d54 <dlms_getPdu+0x29c>
                data->data.position = 1;
    2d36:	2301      	movs	r3, #1
        if (cmd == DLMS_COMMAND_GENERAL_BLOCK_TRANSFER)
    2d38:	2ee0      	cmp	r6, #224	; 0xe0
                data->data.position = 1;
    2d3a:	818b      	strh	r3, [r1, #12]
        if (cmd == DLMS_COMMAND_GENERAL_BLOCK_TRANSFER)
    2d3c:	d10d      	bne.n	2d5a <dlms_getPdu+0x2a2>
            data->data.position = data->cipherIndex + 1;
    2d3e:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
    2d40:	3301      	adds	r3, #1
    2d42:	81ab      	strh	r3, [r5, #12]
            ret = dlms_handleGbt(settings, data);
    2d44:	4629      	mov	r1, r5
    2d46:	4620      	mov	r0, r4
    2d48:	f00d f89d 	bl	fe86 <dlms_handleGbt>
            data->cipherIndex = (uint16_t)data->data.size;
    2d4c:	896b      	ldrh	r3, [r5, #10]
    2d4e:	866b      	strh	r3, [r5, #50]	; 0x32
            data->command = DLMS_COMMAND_NONE;
    2d50:	2300      	movs	r3, #0
    2d52:	706b      	strb	r3, [r5, #1]
        if (settings->server)
    2d54:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
    2d58:	b1a3      	cbz	r3, 2d84 <dlms_getPdu+0x2cc>
            switch (cmd)
    2d5a:	2ec9      	cmp	r6, #201	; 0xc9
    2d5c:	d80f      	bhi.n	2d7e <dlms_getPdu+0x2c6>
    2d5e:	2ec7      	cmp	r6, #199	; 0xc7
    2d60:	d804      	bhi.n	2d6c <dlms_getPdu+0x2b4>
    2d62:	f1a6 0325 	sub.w	r3, r6, #37	; 0x25
    2d66:	2b01      	cmp	r3, #1
    2d68:	f63f af4f 	bhi.w	2c0a <dlms_getPdu+0x152>
                data->data.position = (data->cipherIndex);
    2d6c:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
    2d6e:	81ab      	strh	r3, [r5, #12]
                data->command = DLMS_COMMAND_NONE;
    2d70:	2200      	movs	r2, #0
    2d72:	706a      	strb	r2, [r5, #1]
                ret = dlms_getPdu(settings, data, 0);
    2d74:	4629      	mov	r1, r5
    2d76:	4620      	mov	r0, r4
    2d78:	f7ff fe9e 	bl	2ab8 <dlms_getPdu>
                break;
    2d7c:	e745      	b.n	2c0a <dlms_getPdu+0x152>
            switch (cmd)
    2d7e:	2ecb      	cmp	r6, #203	; 0xcb
    2d80:	d18a      	bne.n	2c98 <dlms_getPdu+0x1e0>
    2d82:	e7f3      	b.n	2d6c <dlms_getPdu+0x2b4>
            switch (cmd)
    2d84:	2e2d      	cmp	r6, #45	; 0x2d
            data->command = DLMS_COMMAND_NONE;
    2d86:	706b      	strb	r3, [r5, #1]
            switch (cmd)
    2d88:	d806      	bhi.n	2d98 <dlms_getPdu+0x2e0>
    2d8a:	2e2b      	cmp	r6, #43	; 0x2b
    2d8c:	f67f af3d 	bls.w	2c0a <dlms_getPdu+0x152>
                data->data.position = data->cipherIndex;
    2d90:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
    2d92:	81ab      	strh	r3, [r5, #12]
                ret = dlms_getPdu(settings, data, 0);
    2d94:	2200      	movs	r2, #0
    2d96:	e7ed      	b.n	2d74 <dlms_getPdu+0x2bc>
            switch (cmd)
    2d98:	f106 0334 	add.w	r3, r6, #52	; 0x34
    2d9c:	b2db      	uxtb	r3, r3
    2d9e:	2b10      	cmp	r3, #16
    2da0:	f63f af7a 	bhi.w	2c98 <dlms_getPdu+0x1e0>
    2da4:	f1a6 03cc 	sub.w	r3, r6, #204	; 0xcc
    2da8:	2b10      	cmp	r3, #16
    2daa:	f63f af2e 	bhi.w	2c0a <dlms_getPdu+0x152>
    2dae:	a201      	add	r2, pc, #4	; (adr r2, 2db4 <dlms_getPdu+0x2fc>)
    2db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2db4:	00002d91 	.word	0x00002d91
    2db8:	00002d91 	.word	0x00002d91
    2dbc:	00002c0b 	.word	0x00002c0b
    2dc0:	00002d91 	.word	0x00002d91
    2dc4:	00002c0b 	.word	0x00002c0b
    2dc8:	00002c0b 	.word	0x00002c0b
    2dcc:	00002c0b 	.word	0x00002c0b
    2dd0:	00002c0b 	.word	0x00002c0b
    2dd4:	00002d91 	.word	0x00002d91
    2dd8:	00002d91 	.word	0x00002d91
    2ddc:	00002c0b 	.word	0x00002c0b
    2de0:	00002d91 	.word	0x00002d91
    2de4:	00002c0b 	.word	0x00002c0b
    2de8:	00002c0b 	.word	0x00002c0b
    2dec:	00002c0b 	.word	0x00002c0b
    2df0:	00002d91 	.word	0x00002d91
    2df4:	00002d91 	.word	0x00002d91
        && (data->moreData & DLMS_DATA_REQUEST_TYPES_FRAME) != 0)
    2df8:	782b      	ldrb	r3, [r5, #0]
    2dfa:	07db      	lsls	r3, r3, #31
    2dfc:	f53f af44 	bmi.w	2c88 <dlms_getPdu+0x1d0>
    2e00:	e737      	b.n	2c72 <dlms_getPdu+0x1ba>
                    return DLMS_ERROR_CODE_INVALID_DECIPHERING_ERROR;
    2e02:	f240 101d 	movw	r0, #285	; 0x11d
    2e06:	e740      	b.n	2c8a <dlms_getPdu+0x1d2>

00002e08 <plc_reset>:
{
    settings->plcSettings.initialCredit = 7;
    settings->plcSettings.currentCredit = 7;
    settings->plcSettings.deltaCredit = 0;
    //New device addresses are used.
    if (settings->interfaceType == DLMS_INTERFACE_TYPE_PLC)
    2e08:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
    settings->plcSettings.initialCredit = 7;
    2e0c:	f240 7307 	movw	r3, #1799	; 0x707
    2e10:	f8a0 3078 	strh.w	r3, [r0, #120]	; 0x78
    if (settings->interfaceType == DLMS_INTERFACE_TYPE_PLC)
    2e14:	2a05      	cmp	r2, #5
    settings->plcSettings.deltaCredit = 0;
    2e16:	f04f 0300 	mov.w	r3, #0
    2e1a:	f880 307a 	strb.w	r3, [r0, #122]	; 0x7a
    if (settings->interfaceType == DLMS_INTERFACE_TYPE_PLC)
    2e1e:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
    2e22:	d10b      	bne.n	2e3c <plc_reset+0x34>
    {
        if (settings->server)
    2e24:	b143      	cbz	r3, 2e38 <plc_reset+0x30>
        {
            settings->plcSettings.macSourceAddress = DLMS_PLC_SOURCE_ADDRESS_NEW;
    2e26:	4b09      	ldr	r3, [pc, #36]	; (2e4c <plc_reset+0x44>)
            settings->plcSettings.macDestinationAddress = DLMS_PLC_SOURCE_ADDRESS_INITIATOR;
        }
        else
        {
            settings->plcSettings.macSourceAddress = DLMS_PLC_SOURCE_ADDRESS_INITIATOR;
    2e28:	67c3      	str	r3, [r0, #124]	; 0x7c
            settings->plcSettings.macDestinationAddress = DLMS_PLC_DESTINATION_ADDRESS_ALL_PHYSICAL;
        }
        settings->plcSettings.allowedTimeSlots = 10;
    2e2a:	230a      	movs	r3, #10
        else
        {
            settings->plcSettings.macSourceAddress = DLMS_PLC_HDLC_SOURCE_ADDRESS_INITIATOR;
            settings->plcSettings.macDestinationAddress = DLMS_PLC_DESTINATION_ADDRESS_ALL_PHYSICAL;
        }
        settings->plcSettings.allowedTimeSlots = 0x14;
    2e2c:	f8a0 3082 	strh.w	r3, [r0, #130]	; 0x82
    }
    settings->plcSettings.responseProbability = 100;
    2e30:	2364      	movs	r3, #100	; 0x64
    2e32:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
}
    2e36:	4770      	bx	lr
            settings->plcSettings.macSourceAddress = DLMS_PLC_SOURCE_ADDRESS_INITIATOR;
    2e38:	4b05      	ldr	r3, [pc, #20]	; (2e50 <plc_reset+0x48>)
    2e3a:	e7f5      	b.n	2e28 <plc_reset+0x20>
        if (settings->server)
    2e3c:	b11b      	cbz	r3, 2e46 <plc_reset+0x3e>
            settings->plcSettings.macSourceAddress = DLMS_PLC_SOURCE_ADDRESS_NEW;
    2e3e:	4b05      	ldr	r3, [pc, #20]	; (2e54 <plc_reset+0x4c>)
            settings->plcSettings.macSourceAddress = DLMS_PLC_HDLC_SOURCE_ADDRESS_INITIATOR;
    2e40:	67c3      	str	r3, [r0, #124]	; 0x7c
        settings->plcSettings.allowedTimeSlots = 0x14;
    2e42:	2314      	movs	r3, #20
    2e44:	e7f2      	b.n	2e2c <plc_reset+0x24>
            settings->plcSettings.macSourceAddress = DLMS_PLC_HDLC_SOURCE_ADDRESS_INITIATOR;
    2e46:	4b04      	ldr	r3, [pc, #16]	; (2e58 <plc_reset+0x50>)
    2e48:	e7fa      	b.n	2e40 <plc_reset+0x38>
    2e4a:	bf00      	nop
    2e4c:	0c000ffe 	.word	0x0c000ffe
    2e50:	0fff0c00 	.word	0x0fff0c00
    2e54:	0c010ffe 	.word	0x0c010ffe
    2e58:	0fff0c01 	.word	0x0fff0c01

00002e5c <cl_init>:
{
    2e5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2e60:	4604      	mov	r4, r0
    settings->protocolVersion = 0;
    2e62:	2500      	movs	r5, #0
{
    2e64:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
    2e68:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    settings->serverAddress = serverAddress;
    2e6c:	6323      	str	r3, [r4, #48]	; 0x30
    settings->blockIndex = 1;
    2e6e:	f04f 0801 	mov.w	r8, #1
    settings->dlmsVersionNumber = 6;
    2e72:	2306      	movs	r3, #6
    BYTE_BUFFER_INIT(&settings->password);
    2e74:	f104 0738 	add.w	r7, r4, #56	; 0x38
{
    2e78:	460e      	mov	r6, r1
    2e7a:	f89d 1020 	ldrb.w	r1, [sp, #32]
    settings->clientAddress = clientAddress;
    2e7e:	85e2      	strh	r2, [r4, #46]	; 0x2e
    settings->dlmsVersionNumber = 6;
    2e80:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    settings->useLogicalNameReferencing = useLogicalNameReferencing;
    2e84:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    settings->interfaceType = interfaceType;
    2e88:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    settings->authentication = authentication;
    2e8c:	f884 1036 	strb.w	r1, [r4, #54]	; 0x36
    settings->protocolVersion = 0;
    2e90:	f8a4 50da 	strh.w	r5, [r4, #218]	; 0xda
    settings->preEstablishedSystemTitle = NULL;
    2e94:	f8c4 50dc 	str.w	r5, [r4, #220]	; 0xdc
    settings->autoIncreaseInvokeID = 0;
    2e98:	f884 50e0 	strb.w	r5, [r4, #224]	; 0xe0
    settings->blockIndex = 1;
    2e9c:	f8c4 80a0 	str.w	r8, [r4, #160]	; 0xa0
    BYTE_BUFFER_INIT(&settings->password);
    2ea0:	4638      	mov	r0, r7
    2ea2:	f009 fe9f 	bl	cbe4 <bb_init>
    bb_addString(&settings->password, password);
    2ea6:	4649      	mov	r1, r9
    2ea8:	4638      	mov	r0, r7
    2eaa:	f00a f835 	bl	cf18 <bb_addString>
__ssp_bos_icheck3(memset, void *, int)
    2eae:	61e5      	str	r5, [r4, #28]
    2eb0:	6225      	str	r5, [r4, #32]
    BYTE_BUFFER_INIT(&settings->kek);
    2eb2:	f104 0044 	add.w	r0, r4, #68	; 0x44
    2eb6:	f009 fe95 	bl	cbe4 <bb_init>
    settings->maxServerPDUSize = 1024;
    2eba:	f44f 6380 	mov.w	r3, #1024	; 0x400
        settings->proposedConformance = (DLMS_CONFORMANCE)(DLMS_CONFORMANCE_INFORMATION_REPORT |
    2ebe:	4920      	ldr	r1, [pc, #128]	; (2f40 <cl_init+0xe4>)
    settings->maxServerPDUSize = 1024;
    2ec0:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
        settings->proposedConformance = (DLMS_CONFORMANCE)(DLMS_CONFORMANCE_INFORMATION_REPORT |
    2ec4:	4b1f      	ldr	r3, [pc, #124]	; (2f44 <cl_init+0xe8>)
    settings->server = 0;
    2ec6:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
        settings->proposedConformance = (DLMS_CONFORMANCE)(DLMS_CONFORMANCE_INFORMATION_REPORT |
    2eca:	42ae      	cmp	r6, r5
    2ecc:	bf14      	ite	ne
    2ece:	460e      	movne	r6, r1
    2ed0:	461e      	moveq	r6, r3
    settings->maxInfoTX = settings->maxInfoRX = 0x80;
    2ed2:	f04f 1380 	mov.w	r3, #8388736	; 0x800080
    settings->maxPduSize = 0xFFFF;
    2ed6:	f64f 77ff 	movw	r7, #65535	; 0xffff
    settings->maxInfoTX = settings->maxInfoRX = 0x80;
    2eda:	6663      	str	r3, [r4, #100]	; 0x64
    settings->windowSizeTX = settings->windowSizeRX = 1;
    2edc:	f240 1301 	movw	r3, #257	; 0x101
    2ee0:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    oa_init(&settings->objects);
    2ee4:	f104 0098 	add.w	r0, r4, #152	; 0x98
    settings->maxPduSize = 0xFFFF;
    2ee8:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if (useLogicalNameReferencing)
    2eec:	65e6      	str	r6, [r4, #92]	; 0x5c
    settings->longInvokeID = 0;
    2eee:	62a5      	str	r5, [r4, #40]	; 0x28
    settings->connected = DLMS_CONNECTION_STATE_NONE;
    2ef0:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
    oa_init(&settings->objects);
    2ef4:	f016 ff13 	bl	19d1e <oa_init>
    settings->connected = DLMS_CONNECTION_STATE_NONE;
    2ef8:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
    settings->customChallenges = 0;
    2efc:	7025      	strb	r5, [r4, #0]
    settings->invokeID = 1;
    2efe:	f884 8024 	strb.w	r8, [r4, #36]	; 0x24
    BYTE_BUFFER_INIT(&settings->ctoSChallenge);
    2f02:	1d20      	adds	r0, r4, #4
    2f04:	f009 fe6e 	bl	cbe4 <bb_init>
    BYTE_BUFFER_INIT(&settings->stoCChallenge);
    2f08:	f104 0010 	add.w	r0, r4, #16
    2f0c:	f009 fe6a 	bl	cbe4 <bb_init>
    cip_init(&settings->cipher);
    2f10:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
    settings->priority = DLMS_PRIORITY_HIGH;
    2f14:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    cip_init(&settings->cipher);
    2f18:	f7fe f9fa 	bl	1310 <cip_init>
    resetFrameSequence(settings);
    2f1c:	4620      	mov	r0, r4
    settings->userId = -1;
    2f1e:	f8a4 70d8 	strh.w	r7, [r4, #216]	; 0xd8
    resetFrameSequence(settings);
    2f22:	f00d f96e 	bl	10202 <resetFrameSequence>
    oa_init(&settings->releasedObjects);
    2f26:	f104 00e4 	add.w	r0, r4, #228	; 0xe4
    2f2a:	f016 fef8 	bl	19d1e <oa_init>
    settings->expectedClientSystemTitle = NULL;
    2f2e:	e9c4 553c 	strd	r5, r5, [r4, #240]	; 0xf0
    settings->expectedSecuritySuite = 0xFF;
    2f32:	f8a4 70ec 	strh.w	r7, [r4, #236]	; 0xec
    plc_reset(settings);
    2f36:	4620      	mov	r0, r4
}
    2f38:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    plc_reset(settings);
    2f3c:	f7ff bf64 	b.w	2e08 <plc_reset>
    2f40:	00b87800 	.word	0x00b87800
    2f44:	0004c038 	.word	0x0004c038

00002f48 <getActivityCalendarDayProfileTable>:
    return ret;
}
#endif //DLMS_IGNORE_ACTION_SCHEDULE
#ifndef DLMS_IGNORE_ACTIVITY_CALENDAR
int getActivityCalendarDayProfileTable(gxArray* list, gxByteBuffer* ba)
{
    2f48:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    2f4c:	460c      	mov	r4, r1
    2f4e:	4605      	mov	r5, r0
    gxDayProfile* dp;
    gxDayProfileAction* action;
    int ret;
    uint16_t pos, pos2;
    if ((ret = cosem_setArray(ba, list->size)) != 0)
    2f50:	88c1      	ldrh	r1, [r0, #6]
    2f52:	4620      	mov	r0, r4
    2f54:	f00a fdca 	bl	daec <cosem_setArray>
    2f58:	b928      	cbnz	r0, 2f66 <getActivityCalendarDayProfileTable+0x1e>
                break;
            }
#endif //DLMS_IGNORE_MALLOC
            if ((ret = cosem_setStructure(ba, 3)) != 0 ||
                (ret = cosem_setTimeAsOctetString(ba, &action->startTime)) != 0 ||
                (ret = cosem_setOctetString2(ba, SCRIPT_LOGICAL_NAME, 6)) != 0 ||
    2f5a:	4f28      	ldr	r7, [pc, #160]	; (2ffc <getActivityCalendarDayProfileTable+0xb4>)
    2f5c:	4606      	mov	r6, r0
    for (pos = 0; pos != list->size; ++pos)
    2f5e:	88eb      	ldrh	r3, [r5, #6]
    2f60:	b2b1      	uxth	r1, r6
    2f62:	428b      	cmp	r3, r1
    2f64:	d102      	bne.n	2f6c <getActivityCalendarDayProfileTable+0x24>
                break;
            }
        }
    }
    return ret;
}
    2f66:	b002      	add	sp, #8
    2f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ((ret = arr_getByIndex(list, pos, (void**)&dp)) != 0)
    2f6c:	466a      	mov	r2, sp
    2f6e:	4628      	mov	r0, r5
    2f70:	f00d fa09 	bl	10386 <arr_getByIndex>
    2f74:	2800      	cmp	r0, #0
    2f76:	d1f6      	bne.n	2f66 <getActivityCalendarDayProfileTable+0x1e>
        if ((ret = cosem_setStructure(ba, 2)) != 0 ||
    2f78:	2102      	movs	r1, #2
    2f7a:	4620      	mov	r0, r4
    2f7c:	f00a fda8 	bl	dad0 <cosem_setStructure>
    2f80:	2800      	cmp	r0, #0
    2f82:	d1f0      	bne.n	2f66 <getActivityCalendarDayProfileTable+0x1e>
            (ret = cosem_setUInt8(ba, dp->dayId)) != 0 ||
    2f84:	9b00      	ldr	r3, [sp, #0]
    2f86:	4620      	mov	r0, r4
    2f88:	7819      	ldrb	r1, [r3, #0]
    2f8a:	f00a fd46 	bl	da1a <cosem_setUInt8>
        if ((ret = cosem_setStructure(ba, 2)) != 0 ||
    2f8e:	2800      	cmp	r0, #0
    2f90:	d1e9      	bne.n	2f66 <getActivityCalendarDayProfileTable+0x1e>
            (ret = cosem_setArray(ba, dp->daySchedules.size)) != 0)
    2f92:	9b00      	ldr	r3, [sp, #0]
    2f94:	4620      	mov	r0, r4
    2f96:	8959      	ldrh	r1, [r3, #10]
    2f98:	f00a fda8 	bl	daec <cosem_setArray>
            (ret = cosem_setUInt8(ba, dp->dayId)) != 0 ||
    2f9c:	2800      	cmp	r0, #0
    2f9e:	d1e2      	bne.n	2f66 <getActivityCalendarDayProfileTable+0x1e>
    2fa0:	4680      	mov	r8, r0
        for (pos2 = 0; pos2 != dp->daySchedules.size; ++pos2)
    2fa2:	9800      	ldr	r0, [sp, #0]
    2fa4:	8943      	ldrh	r3, [r0, #10]
    2fa6:	fa1f f188 	uxth.w	r1, r8
    2faa:	428b      	cmp	r3, r1
    2fac:	d101      	bne.n	2fb2 <getActivityCalendarDayProfileTable+0x6a>
    2fae:	2000      	movs	r0, #0
    2fb0:	e020      	b.n	2ff4 <getActivityCalendarDayProfileTable+0xac>
            if ((ret = arr_getByIndex(&dp->daySchedules, pos2, (void**)&action)) != 0)
    2fb2:	aa01      	add	r2, sp, #4
    2fb4:	3004      	adds	r0, #4
    2fb6:	f00d f9e6 	bl	10386 <arr_getByIndex>
    2fba:	b9d8      	cbnz	r0, 2ff4 <getActivityCalendarDayProfileTable+0xac>
            if ((ret = cosem_setStructure(ba, 3)) != 0 ||
    2fbc:	2103      	movs	r1, #3
    2fbe:	4620      	mov	r0, r4
    2fc0:	f00a fd86 	bl	dad0 <cosem_setStructure>
    2fc4:	b9b0      	cbnz	r0, 2ff4 <getActivityCalendarDayProfileTable+0xac>
                (ret = cosem_setTimeAsOctetString(ba, &action->startTime)) != 0 ||
    2fc6:	9901      	ldr	r1, [sp, #4]
    2fc8:	4620      	mov	r0, r4
    2fca:	f00a fca5 	bl	d918 <cosem_setTimeAsOctetString>
            if ((ret = cosem_setStructure(ba, 3)) != 0 ||
    2fce:	b988      	cbnz	r0, 2ff4 <getActivityCalendarDayProfileTable+0xac>
                (ret = cosem_setOctetString2(ba, SCRIPT_LOGICAL_NAME, 6)) != 0 ||
    2fd0:	9b01      	ldr	r3, [sp, #4]
    2fd2:	68d9      	ldr	r1, [r3, #12]
    2fd4:	b181      	cbz	r1, 2ff8 <getActivityCalendarDayProfileTable+0xb0>
    2fd6:	3106      	adds	r1, #6
    2fd8:	2206      	movs	r2, #6
    2fda:	4620      	mov	r0, r4
    2fdc:	f00a fcfc 	bl	d9d8 <cosem_setOctetString2>
                (ret = cosem_setTimeAsOctetString(ba, &action->startTime)) != 0 ||
    2fe0:	b940      	cbnz	r0, 2ff4 <getActivityCalendarDayProfileTable+0xac>
                (ret = cosem_setUInt16(ba, action->scriptSelector)) != 0)
    2fe2:	9b01      	ldr	r3, [sp, #4]
    2fe4:	4620      	mov	r0, r4
    2fe6:	8a19      	ldrh	r1, [r3, #16]
    2fe8:	f00a fd25 	bl	da36 <cosem_setUInt16>
    2fec:	f108 0801 	add.w	r8, r8, #1
                (ret = cosem_setOctetString2(ba, SCRIPT_LOGICAL_NAME, 6)) != 0 ||
    2ff0:	2800      	cmp	r0, #0
    2ff2:	d0d6      	beq.n	2fa2 <getActivityCalendarDayProfileTable+0x5a>
    for (pos = 0; pos != list->size; ++pos)
    2ff4:	3601      	adds	r6, #1
    2ff6:	e7b2      	b.n	2f5e <getActivityCalendarDayProfileTable+0x16>
                (ret = cosem_setOctetString2(ba, SCRIPT_LOGICAL_NAME, 6)) != 0 ||
    2ff8:	4639      	mov	r1, r7
    2ffa:	e7ed      	b.n	2fd8 <getActivityCalendarDayProfileTable+0x90>
    2ffc:	0001d6ef 	.word	0x0001d6ef

00003000 <getLNObjects>:
// Returns LN Association View.
int getLNObjects(
    dlmsSettings* settings,
    gxValueEventArg* e,
    gxByteBuffer* data)
{
    3000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    gxAssociationLogicalName* object = (gxAssociationLogicalName*)e->target;
    int ret;
    uint16_t pos, pos2;
    unsigned char found = 0;
    gxObject* it, * it2;
    unsigned char ln[] = { 0, 0, 40, 0, 0, 255 };
    3004:	4b83      	ldr	r3, [pc, #524]	; (3214 <getLNObjects+0x214>)
    gxAssociationLogicalName* object = (gxAssociationLogicalName*)e->target;
    3006:	f8d1 9014 	ldr.w	r9, [r1, #20]
{
    300a:	b087      	sub	sp, #28
    300c:	4607      	mov	r7, r0
    unsigned char ln[] = { 0, 0, 40, 0, 0, 255 };
    300e:	6818      	ldr	r0, [r3, #0]
    3010:	9004      	str	r0, [sp, #16]
    3012:	889b      	ldrh	r3, [r3, #4]
    3014:	f8ad 3014 	strh.w	r3, [sp, #20]
{
    3018:	4688      	mov	r8, r1
    if ((ret = bb_capacity(data, settings->maxPduSize)) != 0)
    301a:	4610      	mov	r0, r2
    301c:	f8b7 1052 	ldrh.w	r1, [r7, #82]	; 0x52
{
    3020:	4615      	mov	r5, r2
    if ((ret = bb_capacity(data, settings->maxPduSize)) != 0)
    3022:	f009 fde5 	bl	cbf0 <bb_capacity>
    3026:	4604      	mov	r4, r0
    3028:	2800      	cmp	r0, #0
    302a:	f040 80ed 	bne.w	3208 <getLNObjects+0x208>
    {
        return ret;
    }
    //Add count only for first time.
    if (!e->transaction)
    302e:	f8b8 3040 	ldrh.w	r3, [r8, #64]	; 0x40
    3032:	bbb3      	cbnz	r3, 30a2 <getLNObjects+0xa2>
    3034:	f8b9 601a 	ldrh.w	r6, [r9, #26]
    3038:	4683      	mov	fp, r0
    unsigned char found = 0;
    303a:	4682      	mov	sl, r0
    {
        uint16_t count = object->objectList.size;
        //Find current association and if nout found add it.
        for (pos = 0; pos != object->objectList.size; ++pos)
    303c:	f8b9 301a 	ldrh.w	r3, [r9, #26]
    3040:	fa1f f18b 	uxth.w	r1, fp
    3044:	428b      	cmp	r3, r1
    3046:	d159      	bne.n	30fc <getLNObjects+0xfc>
                        break;
                    }
                }
            }
        }
        if (!found)
    3048:	f1ba 0f00 	cmp.w	sl, #0
    304c:	d101      	bne.n	3052 <getLNObjects+0x52>
        {
            ++count;
    304e:	3601      	adds	r6, #1
    3050:	b2b6      	uxth	r6, r6
        }
        e->transactionEndIndex = count;
    3052:	f8c8 603c 	str.w	r6, [r8, #60]	; 0x3c
        if ((ret = cosem_setArray(data, count)) != 0)
    3056:	4631      	mov	r1, r6
    3058:	4628      	mov	r0, r5
    305a:	f00a fd47 	bl	daec <cosem_setArray>
    305e:	b9f0      	cbnz	r0, 309e <getLNObjects+0x9e>
        {
            return ret;
        }
        if (!found)
    3060:	f1ba 0f00 	cmp.w	sl, #0
    3064:	d11d      	bne.n	30a2 <getLNObjects+0xa2>
        {
            //Count
            if ((ret = cosem_setStructure(data, 4)) != 0 ||
    3066:	2104      	movs	r1, #4
    3068:	4628      	mov	r0, r5
    306a:	f00a fd31 	bl	dad0 <cosem_setStructure>
    306e:	b9b0      	cbnz	r0, 309e <getLNObjects+0x9e>
                //ClassID
                (ret = cosem_setUInt16(data, DLMS_OBJECT_TYPE_ASSOCIATION_LOGICAL_NAME)) != 0 ||
    3070:	210f      	movs	r1, #15
    3072:	4628      	mov	r0, r5
    3074:	f00a fcdf 	bl	da36 <cosem_setUInt16>
            if ((ret = cosem_setStructure(data, 4)) != 0 ||
    3078:	b988      	cbnz	r0, 309e <getLNObjects+0x9e>
                //Version
                (ret = cosem_setUInt8(data, object->base.version)) != 0 ||
    307a:	f899 1002 	ldrb.w	r1, [r9, #2]
    307e:	4628      	mov	r0, r5
    3080:	f00a fccb 	bl	da1a <cosem_setUInt8>
                (ret = cosem_setUInt16(data, DLMS_OBJECT_TYPE_ASSOCIATION_LOGICAL_NAME)) != 0 ||
    3084:	b958      	cbnz	r0, 309e <getLNObjects+0x9e>
                //LN.
                (ret = cosem_setOctetString2(data, ln, 6)) != 0)
    3086:	2206      	movs	r2, #6
    3088:	a904      	add	r1, sp, #16
    308a:	4628      	mov	r0, r5
    308c:	f00a fca4 	bl	d9d8 <cosem_setOctetString2>
                (ret = cosem_setUInt8(data, object->base.version)) != 0 ||
    3090:	b928      	cbnz	r0, 309e <getLNObjects+0x9e>
            {
                return ret;
            }
            //Access rights.
            ret = getLNAccessRights(settings, &object->base, data);
    3092:	462a      	mov	r2, r5
    3094:	4649      	mov	r1, r9
    3096:	4638      	mov	r0, r7
    3098:	f00d fb89 	bl	107ae <getLNAccessRights>
            if (ret != 0)
    309c:	b108      	cbz	r0, 30a2 <getLNObjects+0xa2>
        }
        ignore = 0;
        //Remove objects that are only internal use.
        for (pos2 = 0; pos2 != settings->internalObjects.size; ++pos2)
        {
            if ((ret = oa_getByIndex(&settings->internalObjects, pos2, &it2)) != 0)
    309e:	4604      	mov	r4, r0
    30a0:	e0b2      	b.n	3208 <getLNObjects+0x208>
    for (pos = (uint16_t)e->transactionStartIndex; pos != object->objectList.size; ++pos)
    30a2:	f8b8 a038 	ldrh.w	sl, [r8, #56]	; 0x38
    30a6:	f8b9 301a 	ldrh.w	r3, [r9, #26]
    30aa:	4553      	cmp	r3, sl
    30ac:	f000 80ac 	beq.w	3208 <getLNObjects+0x208>
        ret = oa_getByIndex(&object->objectList, pos, &it);
    30b0:	aa02      	add	r2, sp, #8
    30b2:	4651      	mov	r1, sl
    30b4:	f109 0014 	add.w	r0, r9, #20
    30b8:	f016 fe89 	bl	19dce <oa_getByIndex>
        if (ret != 0)
    30bc:	4606      	mov	r6, r0
    30be:	2800      	cmp	r0, #0
    30c0:	f040 80a6 	bne.w	3210 <getLNObjects+0x210>
            if ((ret = oa_getByIndex(&settings->internalObjects, pos2, &it2)) != 0)
    30c4:	f107 0b90 	add.w	fp, r7, #144	; 0x90
        for (pos2 = 0; pos2 != settings->internalObjects.size; ++pos2)
    30c8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
    30cc:	b2b1      	uxth	r1, r6
    30ce:	428b      	cmp	r3, r1
    30d0:	d14f      	bne.n	3172 <getLNObjects+0x172>
                break;
            }
        }
        if (!ignore)
        {
            if (it->objectType == DLMS_OBJECT_TYPE_ASSOCIATION_LOGICAL_NAME)
    30d2:	9902      	ldr	r1, [sp, #8]
    30d4:	880b      	ldrh	r3, [r1, #0]
    30d6:	2b0f      	cmp	r3, #15
    30d8:	d103      	bne.n	30e2 <getLNObjects+0xe2>
            {
                if (!(it == e->target || memcmp(ln, it->logicalName, 6) == 0))
    30da:	f8d8 3014 	ldr.w	r3, [r8, #20]
    30de:	4299      	cmp	r1, r3
    30e0:	d158      	bne.n	3194 <getLNObjects+0x194>
                    continue;
                }
            }
            pduSize = (uint16_t)data->size;
            //Count
            if ((ret = cosem_setStructure(data, 4)) != 0 ||
    30e2:	2104      	movs	r1, #4
    30e4:	4628      	mov	r0, r5
            pduSize = (uint16_t)data->size;
    30e6:	88ee      	ldrh	r6, [r5, #6]
            if ((ret = cosem_setStructure(data, 4)) != 0 ||
    30e8:	f00a fcf2 	bl	dad0 <cosem_setStructure>
    30ec:	2800      	cmp	r0, #0
    30ee:	d059      	beq.n	31a4 <getLNObjects+0x1a4>
                }
            }
            ++e->transactionStartIndex;
        }
    }
    if (ret == DLMS_ERROR_CODE_OUTOFMEMORY)
    30f0:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
            ret = getLNAccessRights(settings, it, data);
    30f4:	4604      	mov	r4, r0
    if (ret == DLMS_ERROR_CODE_OUTOFMEMORY)
    30f6:	f000 8085 	beq.w	3204 <getLNObjects+0x204>
    30fa:	e085      	b.n	3208 <getLNObjects+0x208>
            if ((ret = oa_getByIndex(&object->objectList, pos, &it)) != 0)
    30fc:	aa02      	add	r2, sp, #8
    30fe:	f109 0014 	add.w	r0, r9, #20
    3102:	f016 fe64 	bl	19dce <oa_getByIndex>
    3106:	2800      	cmp	r0, #0
    3108:	d1c9      	bne.n	309e <getLNObjects+0x9e>
            if (it->objectType == DLMS_OBJECT_TYPE_ASSOCIATION_LOGICAL_NAME)
    310a:	9902      	ldr	r1, [sp, #8]
    310c:	880b      	ldrh	r3, [r1, #0]
    310e:	2b0f      	cmp	r3, #15
    3110:	d10d      	bne.n	312e <getLNObjects+0x12e>
                if (memcmp(ln, it->logicalName, 6) == 0)
    3112:	2206      	movs	r2, #6
    3114:	4411      	add	r1, r2
    3116:	a804      	add	r0, sp, #16
    3118:	f018 ffd4 	bl	1c0c4 <memcmp>
    311c:	b330      	cbz	r0, 316c <getLNObjects+0x16c>
                else if (it != e->target)
    311e:	f8d8 2014 	ldr.w	r2, [r8, #20]
    3122:	9b02      	ldr	r3, [sp, #8]
    3124:	429a      	cmp	r2, r3
                    --count;
    3126:	bf1c      	itt	ne
    3128:	f106 36ff 	addne.w	r6, r6, #4294967295
    312c:	b2b6      	uxthne	r6, r6
            if (!found)
    312e:	f1ba 0f00 	cmp.w	sl, #0
    3132:	d118      	bne.n	3166 <getLNObjects+0x166>
                    if ((ret = oa_getByIndex(&settings->internalObjects, pos2, &it2)) != 0)
    3134:	f107 0290 	add.w	r2, r7, #144	; 0x90
    3138:	4653      	mov	r3, sl
    313a:	9200      	str	r2, [sp, #0]
                for (pos2 = 0; pos2 != settings->internalObjects.size; ++pos2)
    313c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
    3140:	b299      	uxth	r1, r3
    3142:	428a      	cmp	r2, r1
    3144:	d00f      	beq.n	3166 <getLNObjects+0x166>
                    if ((ret = oa_getByIndex(&settings->internalObjects, pos2, &it2)) != 0)
    3146:	9800      	ldr	r0, [sp, #0]
    3148:	9301      	str	r3, [sp, #4]
    314a:	aa03      	add	r2, sp, #12
    314c:	f016 fe3f 	bl	19dce <oa_getByIndex>
    3150:	2800      	cmp	r0, #0
    3152:	d1a4      	bne.n	309e <getLNObjects+0x9e>
                    if (it2 == it)
    3154:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    3158:	9b01      	ldr	r3, [sp, #4]
    315a:	4291      	cmp	r1, r2
    315c:	f103 0301 	add.w	r3, r3, #1
    3160:	d1ec      	bne.n	313c <getLNObjects+0x13c>
                        --count;
    3162:	3e01      	subs	r6, #1
    3164:	b2b6      	uxth	r6, r6
        for (pos = 0; pos != object->objectList.size; ++pos)
    3166:	f10b 0b01 	add.w	fp, fp, #1
    316a:	e767      	b.n	303c <getLNObjects+0x3c>
                    found = 1;
    316c:	f04f 0a01 	mov.w	sl, #1
    3170:	e7f9      	b.n	3166 <getLNObjects+0x166>
            if ((ret = oa_getByIndex(&settings->internalObjects, pos2, &it2)) != 0)
    3172:	aa03      	add	r2, sp, #12
    3174:	4658      	mov	r0, fp
    3176:	f016 fe2a 	bl	19dce <oa_getByIndex>
    317a:	2800      	cmp	r0, #0
    317c:	d18f      	bne.n	309e <getLNObjects+0x9e>
            if (it2 == it)
    317e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
    3182:	429a      	cmp	r2, r3
    3184:	f106 0601 	add.w	r6, r6, #1
    3188:	d19e      	bne.n	30c8 <getLNObjects+0xc8>
    for (pos = (uint16_t)e->transactionStartIndex; pos != object->objectList.size; ++pos)
    318a:	f10a 0a01 	add.w	sl, sl, #1
    318e:	fa1f fa8a 	uxth.w	sl, sl
    3192:	e788      	b.n	30a6 <getLNObjects+0xa6>
                if (!(it == e->target || memcmp(ln, it->logicalName, 6) == 0))
    3194:	2206      	movs	r2, #6
    3196:	4411      	add	r1, r2
    3198:	a804      	add	r0, sp, #16
    319a:	f018 ff93 	bl	1c0c4 <memcmp>
    319e:	2800      	cmp	r0, #0
    31a0:	d09f      	beq.n	30e2 <getLNObjects+0xe2>
    31a2:	e7f2      	b.n	318a <getLNObjects+0x18a>
                (ret = cosem_setUInt16(data, it->objectType)) != 0 ||
    31a4:	9b02      	ldr	r3, [sp, #8]
    31a6:	4628      	mov	r0, r5
    31a8:	8819      	ldrh	r1, [r3, #0]
    31aa:	f00a fc44 	bl	da36 <cosem_setUInt16>
            if ((ret = cosem_setStructure(data, 4)) != 0 ||
    31ae:	2800      	cmp	r0, #0
    31b0:	d19e      	bne.n	30f0 <getLNObjects+0xf0>
                (ret = cosem_setUInt8(data, (unsigned char)it->version)) != 0 ||
    31b2:	9b02      	ldr	r3, [sp, #8]
    31b4:	4628      	mov	r0, r5
    31b6:	7899      	ldrb	r1, [r3, #2]
    31b8:	f00a fc2f 	bl	da1a <cosem_setUInt8>
                (ret = cosem_setUInt16(data, it->objectType)) != 0 ||
    31bc:	2800      	cmp	r0, #0
    31be:	d197      	bne.n	30f0 <getLNObjects+0xf0>
                (ret = cosem_setOctetString2(data, it->logicalName, 6)) != 0)
    31c0:	9902      	ldr	r1, [sp, #8]
    31c2:	2206      	movs	r2, #6
    31c4:	4411      	add	r1, r2
    31c6:	4628      	mov	r0, r5
    31c8:	f00a fc06 	bl	d9d8 <cosem_setOctetString2>
                (ret = cosem_setUInt8(data, (unsigned char)it->version)) != 0 ||
    31cc:	2800      	cmp	r0, #0
    31ce:	d18f      	bne.n	30f0 <getLNObjects+0xf0>
            ret = getLNAccessRights(settings, it, data);
    31d0:	9902      	ldr	r1, [sp, #8]
    31d2:	462a      	mov	r2, r5
    31d4:	4638      	mov	r0, r7
    31d6:	f00d faea 	bl	107ae <getLNAccessRights>
            if (ret != 0)
    31da:	2800      	cmp	r0, #0
    31dc:	d188      	bne.n	30f0 <getLNObjects+0xf0>
            if (settings->server)
    31de:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
    31e2:	b92b      	cbnz	r3, 31f0 <getLNObjects+0x1f0>
            ++e->transactionStartIndex;
    31e4:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
    31e8:	3301      	adds	r3, #1
    31ea:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
    31ee:	e7cc      	b.n	318a <getLNObjects+0x18a>
                if (!e->skipMaxPduSize && dlms_isPduFull(settings, data, NULL))
    31f0:	f898 2034 	ldrb.w	r2, [r8, #52]	; 0x34
    31f4:	2a00      	cmp	r2, #0
    31f6:	d1f5      	bne.n	31e4 <getLNObjects+0x1e4>
    31f8:	4629      	mov	r1, r5
    31fa:	4638      	mov	r0, r7
    31fc:	f00c ffde 	bl	101bc <dlms_isPduFull>
    3200:	2800      	cmp	r0, #0
    3202:	d0ef      	beq.n	31e4 <getLNObjects+0x1e4>
    {
        data->size = pduSize;
    3204:	80ee      	strh	r6, [r5, #6]
        ret = 0;
    3206:	2400      	movs	r4, #0
    }
    return ret;
}
    3208:	4620      	mov	r0, r4
    320a:	b007      	add	sp, #28
    320c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ret = oa_getByIndex(&object->objectList, pos, &it);
    3210:	4604      	mov	r4, r0
    3212:	e7f9      	b.n	3208 <getLNObjects+0x208>
    3214:	0001c962 	.word	0x0001c962

00003218 <cosem_getIP4Setup>:
#endif //DLMS_IGNORE_IEC_TWISTED_PAIR_SETUP

#ifndef DLMS_IGNORE_IP4_SETUP
int cosem_getIP4Setup(
    gxValueEventArg* e)
{
    3218:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    dlmsVARIANT* tmp;
#endif //!defined(DLMS_IGNORE_MALLOC) && !defined(DLMS_COSEM_EXACT_DATA_TYPES)
    gxip4SetupIpOption* it;
    gxIp4Setup* object = (gxIp4Setup*)e->target;
    gxByteBuffer* data = e->value.byteArr;
    if (e->index == 2)
    321c:	7e03      	ldrb	r3, [r0, #24]
    gxIp4Setup* object = (gxIp4Setup*)e->target;
    321e:	6946      	ldr	r6, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
    3220:	6885      	ldr	r5, [r0, #8]
    if (e->index == 2)
    3222:	2b02      	cmp	r3, #2
    3224:	d10a      	bne.n	323c <cosem_getIP4Setup+0x24>
    {
#ifndef DLMS_IGNORE_OBJECT_POINTERS
        if (object->dataLinkLayer == NULL)
    3226:	6931      	ldr	r1, [r6, #16]
        {
            ret = cosem_setOctetString2(data, EMPTY_LN, 6);
    3228:	2206      	movs	r2, #6
        if (object->dataLinkLayer == NULL)
    322a:	b929      	cbnz	r1, 3238 <cosem_getIP4Setup+0x20>
            ret = cosem_setOctetString2(data, EMPTY_LN, 6);
    322c:	4956      	ldr	r1, [pc, #344]	; (3388 <cosem_getIP4Setup+0x170>)
        }
        else
        {
            ret = cosem_setOctetString2(data, object->dataLinkLayer->logicalName, 6);
    322e:	4628      	mov	r0, r5
    3230:	f00a fbd2 	bl	d9d8 <cosem_setOctetString2>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
                    (ret = bb_setUInt8(data, (unsigned char)it->length)) != 0 ||
                    //Data
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                    (ret = bb_setUInt8(data, (unsigned char)bb_size(&it->data))) != 0 ||
                    (ret = bb_set2(data, &it->data, 0, bb_size(&it->data))) != 0)
    3234:	4604      	mov	r4, r0
    3236:	e010      	b.n	325a <cosem_getIP4Setup+0x42>
            ret = cosem_setOctetString2(data, object->dataLinkLayer->logicalName, 6);
    3238:	4411      	add	r1, r2
    323a:	e7f8      	b.n	322e <cosem_getIP4Setup+0x16>
    else if (e->index == 3)
    323c:	2b03      	cmp	r3, #3
    323e:	d104      	bne.n	324a <cosem_getIP4Setup+0x32>
        ret = cosem_setUInt32(data, object->ipAddress);
    3240:	6971      	ldr	r1, [r6, #20]
    {
        ret = cosem_setUInt32(e->value.byteArr, object->primaryDNSAddress);
    }
    else if (e->index == 10)
    {
        ret = cosem_setUInt32(e->value.byteArr, object->secondaryDNSAddress);
    3242:	4628      	mov	r0, r5
    3244:	f00a fc05 	bl	da52 <cosem_setUInt32>
    3248:	e7f4      	b.n	3234 <cosem_getIP4Setup+0x1c>
    else if (e->index == 4)
    324a:	2b04      	cmp	r3, #4
    324c:	d123      	bne.n	3296 <cosem_getIP4Setup+0x7e>
        if ((ret = cosem_setArray(data, object->multicastIPAddress.size)) == 0)
    324e:	8bf1      	ldrh	r1, [r6, #30]
    3250:	4628      	mov	r0, r5
    3252:	f00a fc4b 	bl	daec <cosem_setArray>
    3256:	4604      	mov	r4, r0
    3258:	b1c8      	cbz	r0, 328e <cosem_getIP4Setup+0x76>
    else
    {
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    return ret;
}
    325a:	4620      	mov	r0, r4
    325c:	b003      	add	sp, #12
    325e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                if ((ret = va_getByIndex(&object->multicastIPAddress, pos, &tmp)) != 0 ||
    3262:	aa01      	add	r2, sp, #4
    3264:	fa1f f188 	uxth.w	r1, r8
    3268:	4638      	mov	r0, r7
    326a:	f017 f81a 	bl	1a2a2 <va_getByIndex>
    326e:	2800      	cmp	r0, #0
    3270:	d1e0      	bne.n	3234 <cosem_getIP4Setup+0x1c>
                    (ret = var_getBytes(tmp, data)) != 0)
    3272:	9801      	ldr	r0, [sp, #4]
    3274:	4629      	mov	r1, r5
    3276:	f017 f954 	bl	1a522 <var_getBytes>
    327a:	f108 0801 	add.w	r8, r8, #1
                if ((ret = va_getByIndex(&object->multicastIPAddress, pos, &tmp)) != 0 ||
    327e:	2800      	cmp	r0, #0
    3280:	d1d8      	bne.n	3234 <cosem_getIP4Setup+0x1c>
            for (pos = 0; pos != object->multicastIPAddress.size; ++pos)
    3282:	8bf2      	ldrh	r2, [r6, #30]
    3284:	fa1f f388 	uxth.w	r3, r8
    3288:	429a      	cmp	r2, r3
    328a:	d1ea      	bne.n	3262 <cosem_getIP4Setup+0x4a>
    328c:	e7e5      	b.n	325a <cosem_getIP4Setup+0x42>
    328e:	4680      	mov	r8, r0
                if ((ret = va_getByIndex(&object->multicastIPAddress, pos, &tmp)) != 0 ||
    3290:	f106 0718 	add.w	r7, r6, #24
    3294:	e7f5      	b.n	3282 <cosem_getIP4Setup+0x6a>
    else if (e->index == 5)
    3296:	2b05      	cmp	r3, #5
    3298:	d15b      	bne.n	3352 <cosem_getIP4Setup+0x13a>
        if ((ret = cosem_setArray(data, object->ipOptions.size)) == 0)
    329a:	8cf1      	ldrh	r1, [r6, #38]	; 0x26
    329c:	4628      	mov	r0, r5
    329e:	f00a fc25 	bl	daec <cosem_setArray>
    32a2:	4604      	mov	r4, r0
    32a4:	2800      	cmp	r0, #0
    32a6:	d1d8      	bne.n	325a <cosem_getIP4Setup+0x42>
    32a8:	4607      	mov	r7, r0
                if ((ret = arr_getByIndex(&object->ipOptions, pos, (void**)&it)) != 0 ||
    32aa:	f106 0820 	add.w	r8, r6, #32
    32ae:	e04b      	b.n	3348 <cosem_getIP4Setup+0x130>
    32b0:	aa01      	add	r2, sp, #4
    32b2:	4640      	mov	r0, r8
    32b4:	f00d f867 	bl	10386 <arr_getByIndex>
    32b8:	2800      	cmp	r0, #0
    32ba:	d1bb      	bne.n	3234 <cosem_getIP4Setup+0x1c>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    32bc:	2102      	movs	r1, #2
    32be:	4628      	mov	r0, r5
    32c0:	f009 fcf9 	bl	ccb6 <bb_setUInt8>
                if ((ret = arr_getByIndex(&object->ipOptions, pos, (void**)&it)) != 0 ||
    32c4:	2800      	cmp	r0, #0
    32c6:	d1b5      	bne.n	3234 <cosem_getIP4Setup+0x1c>
                    (ret = bb_setUInt8(data, 3)) != 0 ||
    32c8:	2103      	movs	r1, #3
    32ca:	4628      	mov	r0, r5
    32cc:	f009 fcf3 	bl	ccb6 <bb_setUInt8>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    32d0:	2800      	cmp	r0, #0
    32d2:	d1af      	bne.n	3234 <cosem_getIP4Setup+0x1c>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
    32d4:	2111      	movs	r1, #17
    32d6:	4628      	mov	r0, r5
    32d8:	f009 fced 	bl	ccb6 <bb_setUInt8>
                    (ret = bb_setUInt8(data, 3)) != 0 ||
    32dc:	2800      	cmp	r0, #0
    32de:	d1a9      	bne.n	3234 <cosem_getIP4Setup+0x1c>
                    (ret = bb_setUInt8(data, it->type)) != 0 ||
    32e0:	9b01      	ldr	r3, [sp, #4]
    32e2:	4628      	mov	r0, r5
    32e4:	7819      	ldrb	r1, [r3, #0]
    32e6:	f009 fce6 	bl	ccb6 <bb_setUInt8>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
    32ea:	2800      	cmp	r0, #0
    32ec:	d1a2      	bne.n	3234 <cosem_getIP4Setup+0x1c>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
    32ee:	2111      	movs	r1, #17
    32f0:	4628      	mov	r0, r5
    32f2:	f009 fce0 	bl	ccb6 <bb_setUInt8>
                    (ret = bb_setUInt8(data, it->type)) != 0 ||
    32f6:	2800      	cmp	r0, #0
    32f8:	d19c      	bne.n	3234 <cosem_getIP4Setup+0x1c>
                    (ret = bb_setUInt8(data, (unsigned char)it->length)) != 0 ||
    32fa:	9b01      	ldr	r3, [sp, #4]
    32fc:	4628      	mov	r0, r5
    32fe:	7859      	ldrb	r1, [r3, #1]
    3300:	f009 fcd9 	bl	ccb6 <bb_setUInt8>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
    3304:	2800      	cmp	r0, #0
    3306:	d195      	bne.n	3234 <cosem_getIP4Setup+0x1c>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    3308:	2109      	movs	r1, #9
    330a:	4628      	mov	r0, r5
    330c:	f009 fcd3 	bl	ccb6 <bb_setUInt8>
                    (ret = bb_setUInt8(data, (unsigned char)it->length)) != 0 ||
    3310:	2800      	cmp	r0, #0
    3312:	d18f      	bne.n	3234 <cosem_getIP4Setup+0x1c>
                    (ret = bb_setUInt8(data, (unsigned char)bb_size(&it->data))) != 0 ||
    3314:	9801      	ldr	r0, [sp, #4]
    3316:	3004      	adds	r0, #4
    3318:	f009 fc61 	bl	cbde <bb_size>
    331c:	b2c1      	uxtb	r1, r0
    331e:	4628      	mov	r0, r5
    3320:	f009 fcc9 	bl	ccb6 <bb_setUInt8>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    3324:	2800      	cmp	r0, #0
    3326:	d185      	bne.n	3234 <cosem_getIP4Setup+0x1c>
                    (ret = bb_set2(data, &it->data, 0, bb_size(&it->data))) != 0)
    3328:	9901      	ldr	r1, [sp, #4]
    332a:	f101 0904 	add.w	r9, r1, #4
    332e:	4648      	mov	r0, r9
    3330:	f009 fc55 	bl	cbde <bb_size>
    3334:	2200      	movs	r2, #0
    3336:	4603      	mov	r3, r0
    3338:	4649      	mov	r1, r9
    333a:	4628      	mov	r0, r5
    333c:	f009 fdd0 	bl	cee0 <bb_set2>
    3340:	3701      	adds	r7, #1
                    (ret = bb_setUInt8(data, (unsigned char)bb_size(&it->data))) != 0 ||
    3342:	2800      	cmp	r0, #0
    3344:	f47f af76 	bne.w	3234 <cosem_getIP4Setup+0x1c>
            for (pos = 0; pos != object->ipOptions.size; ++pos)
    3348:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
    334a:	b2b9      	uxth	r1, r7
    334c:	428b      	cmp	r3, r1
    334e:	d1af      	bne.n	32b0 <cosem_getIP4Setup+0x98>
    3350:	e783      	b.n	325a <cosem_getIP4Setup+0x42>
    else if (e->index == 6)
    3352:	2b06      	cmp	r3, #6
    3354:	d101      	bne.n	335a <cosem_getIP4Setup+0x142>
        ret = cosem_setUInt32(e->value.byteArr, object->subnetMask);
    3356:	6af1      	ldr	r1, [r6, #44]	; 0x2c
    3358:	e773      	b.n	3242 <cosem_getIP4Setup+0x2a>
    else if (e->index == 7)
    335a:	2b07      	cmp	r3, #7
    335c:	d101      	bne.n	3362 <cosem_getIP4Setup+0x14a>
        ret = cosem_setUInt32(e->value.byteArr, object->gatewayIPAddress);
    335e:	6b31      	ldr	r1, [r6, #48]	; 0x30
    3360:	e76f      	b.n	3242 <cosem_getIP4Setup+0x2a>
    else if (e->index == 8)
    3362:	2b08      	cmp	r3, #8
    3364:	d105      	bne.n	3372 <cosem_getIP4Setup+0x15a>
        ret = cosem_setBoolean(e->value.byteArr, object->useDHCP);
    3366:	f896 1034 	ldrb.w	r1, [r6, #52]	; 0x34
    336a:	4628      	mov	r0, r5
    336c:	f00a fbda 	bl	db24 <cosem_setBoolean>
    3370:	e760      	b.n	3234 <cosem_getIP4Setup+0x1c>
    else if (e->index == 9)
    3372:	2b09      	cmp	r3, #9
    3374:	d101      	bne.n	337a <cosem_getIP4Setup+0x162>
        ret = cosem_setUInt32(e->value.byteArr, object->primaryDNSAddress);
    3376:	6bb1      	ldr	r1, [r6, #56]	; 0x38
    3378:	e763      	b.n	3242 <cosem_getIP4Setup+0x2a>
    else if (e->index == 10)
    337a:	2b0a      	cmp	r3, #10
    337c:	d101      	bne.n	3382 <cosem_getIP4Setup+0x16a>
        ret = cosem_setUInt32(e->value.byteArr, object->secondaryDNSAddress);
    337e:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
    3380:	e75f      	b.n	3242 <cosem_getIP4Setup+0x2a>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    3382:	f44f 7481 	mov.w	r4, #258	; 0x102
    return ret;
    3386:	e768      	b.n	325a <cosem_getIP4Setup+0x42>
    3388:	0001d6ef 	.word	0x0001d6ef

0000338c <cosem_getLimiter>:
}
#endif //DLMS_IGNORE_DISCONNECT_CONTROL
#ifndef DLMS_IGNORE_LIMITER
int cosem_getLimiter(
    gxValueEventArg* e)
{
    338c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
#if defined(DLMS_IGNORE_MALLOC) || defined(DLMS_COSEM_EXACT_DATA_TYPES)
    uint16_t* it;
#else
    dlmsVARIANT* it;
#endif //defined(DLMS_IGNORE_MALLOC) || defined(DLMS_COSEM_EXACT_DATA_TYPES)
    if (e->index == 2)
    3390:	7e01      	ldrb	r1, [r0, #24]
    gxLimiter* object = (gxLimiter*)e->target;
    3392:	6946      	ldr	r6, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
    3394:	6885      	ldr	r5, [r0, #8]
    if (e->index == 2)
    3396:	2902      	cmp	r1, #2
    3398:	d16d      	bne.n	3476 <cosem_getLimiter+0xea>
    {
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    339a:	4628      	mov	r0, r5
    339c:	f009 fc8b 	bl	ccb6 <bb_setUInt8>
    33a0:	4604      	mov	r4, r0
    33a2:	2800      	cmp	r0, #0
    33a4:	f040 80ba 	bne.w	351c <cosem_getLimiter+0x190>
            (ret = bb_setUInt8(data, 3)) != 0 ||
    33a8:	2103      	movs	r1, #3
    33aa:	4628      	mov	r0, r5
    33ac:	f009 fc83 	bl	ccb6 <bb_setUInt8>
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    33b0:	4604      	mov	r4, r0
    33b2:	2800      	cmp	r0, #0
    33b4:	f040 80b2 	bne.w	351c <cosem_getLimiter+0x190>
            //objectType
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0)
    33b8:	2112      	movs	r1, #18
    33ba:	4628      	mov	r0, r5
    33bc:	f009 fc7b 	bl	ccb6 <bb_setUInt8>
            (ret = bb_setUInt8(data, 3)) != 0 ||
    33c0:	4604      	mov	r4, r0
    33c2:	2800      	cmp	r0, #0
    33c4:	f040 80aa 	bne.w	351c <cosem_getLimiter+0x190>
        {
            return ret;
        }
        if (object->monitoredValue == NULL)
    33c8:	6933      	ldr	r3, [r6, #16]
    33ca:	bb6b      	cbnz	r3, 3428 <cosem_getLimiter+0x9c>
        {
            if ((ret = bb_setUInt16(data, 0)) != 0 ||
    33cc:	4601      	mov	r1, r0
    33ce:	4628      	mov	r0, r5
    33d0:	f009 fc93 	bl	ccfa <bb_setUInt16>
    33d4:	4604      	mov	r4, r0
    33d6:	2800      	cmp	r0, #0
    33d8:	f040 80a0 	bne.w	351c <cosem_getLimiter+0x190>
                //LN.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    33dc:	2109      	movs	r1, #9
    33de:	4628      	mov	r0, r5
    33e0:	f009 fc69 	bl	ccb6 <bb_setUInt8>
            if ((ret = bb_setUInt16(data, 0)) != 0 ||
    33e4:	4604      	mov	r4, r0
    33e6:	2800      	cmp	r0, #0
    33e8:	f040 8098 	bne.w	351c <cosem_getLimiter+0x190>
                (ret = bb_setUInt8(data, 6)) != 0 ||
    33ec:	2106      	movs	r1, #6
    33ee:	4628      	mov	r0, r5
    33f0:	f009 fc61 	bl	ccb6 <bb_setUInt8>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    33f4:	4604      	mov	r4, r0
    33f6:	2800      	cmp	r0, #0
    33f8:	f040 8090 	bne.w	351c <cosem_getLimiter+0x190>
                (ret = bb_set(data, EMPTY_LN, 6)) != 0 ||
    33fc:	499b      	ldr	r1, [pc, #620]	; (366c <cosem_getLimiter+0x2e0>)
    33fe:	2206      	movs	r2, #6
    3400:	4628      	mov	r0, r5
    3402:	f009 fd3e 	bl	ce82 <bb_set>
                (ret = bb_setUInt8(data, 6)) != 0 ||
    3406:	4604      	mov	r4, r0
    3408:	2800      	cmp	r0, #0
    340a:	f040 8087 	bne.w	351c <cosem_getLimiter+0x190>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
    340e:	210f      	movs	r1, #15
    3410:	4628      	mov	r0, r5
    3412:	f009 fc50 	bl	ccb6 <bb_setUInt8>
                (ret = bb_set(data, EMPTY_LN, 6)) != 0 ||
    3416:	4604      	mov	r4, r0
    3418:	2800      	cmp	r0, #0
    341a:	d17f      	bne.n	351c <cosem_getLimiter+0x190>
                (ret = bb_setUInt8(data, 0)) != 0)
    341c:	2100      	movs	r1, #0
                //LN.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                (ret = bb_setUInt8(data, 6)) != 0 ||
                (ret = bb_set(data, object->monitoredValue->logicalName, 6)) != 0 ||
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
                (ret = bb_setUInt8(data, object->selectedAttributeIndex)) != 0)
    341e:	4628      	mov	r0, r5
    3420:	f009 fc49 	bl	ccb6 <bb_setUInt8>
                {
                    break;
                }
#else
                if ((ret = va_getByIndex(&object->emergencyProfileGroupIDs, pos, &it)) != 0 ||
                    (ret = var_getBytes(it, data)) != 0)
    3424:	4604      	mov	r4, r0
    3426:	e079      	b.n	351c <cosem_getLimiter+0x190>
            if ((ret = bb_setUInt16(data, object->monitoredValue->objectType)) != 0 ||
    3428:	8819      	ldrh	r1, [r3, #0]
    342a:	4628      	mov	r0, r5
    342c:	f009 fc65 	bl	ccfa <bb_setUInt16>
    3430:	4604      	mov	r4, r0
    3432:	2800      	cmp	r0, #0
    3434:	d172      	bne.n	351c <cosem_getLimiter+0x190>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    3436:	2109      	movs	r1, #9
    3438:	4628      	mov	r0, r5
    343a:	f009 fc3c 	bl	ccb6 <bb_setUInt8>
            if ((ret = bb_setUInt16(data, object->monitoredValue->objectType)) != 0 ||
    343e:	4604      	mov	r4, r0
    3440:	2800      	cmp	r0, #0
    3442:	d16b      	bne.n	351c <cosem_getLimiter+0x190>
                (ret = bb_setUInt8(data, 6)) != 0 ||
    3444:	2106      	movs	r1, #6
    3446:	4628      	mov	r0, r5
    3448:	f009 fc35 	bl	ccb6 <bb_setUInt8>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    344c:	4604      	mov	r4, r0
    344e:	2800      	cmp	r0, #0
    3450:	d164      	bne.n	351c <cosem_getLimiter+0x190>
                (ret = bb_set(data, object->monitoredValue->logicalName, 6)) != 0 ||
    3452:	6931      	ldr	r1, [r6, #16]
    3454:	2206      	movs	r2, #6
    3456:	4411      	add	r1, r2
    3458:	4628      	mov	r0, r5
    345a:	f009 fd12 	bl	ce82 <bb_set>
                (ret = bb_setUInt8(data, 6)) != 0 ||
    345e:	4604      	mov	r4, r0
    3460:	2800      	cmp	r0, #0
    3462:	d15b      	bne.n	351c <cosem_getLimiter+0x190>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
    3464:	210f      	movs	r1, #15
    3466:	4628      	mov	r0, r5
    3468:	f009 fc25 	bl	ccb6 <bb_setUInt8>
                (ret = bb_set(data, object->monitoredValue->logicalName, 6)) != 0 ||
    346c:	4604      	mov	r4, r0
    346e:	2800      	cmp	r0, #0
    3470:	d154      	bne.n	351c <cosem_getLimiter+0x190>
                (ret = bb_setUInt8(data, object->selectedAttributeIndex)) != 0)
    3472:	7d31      	ldrb	r1, [r6, #20]
    3474:	e7d3      	b.n	341e <cosem_getLimiter+0x92>
    else if (e->index == 3)
    3476:	2903      	cmp	r1, #3
    3478:	d105      	bne.n	3486 <cosem_getLimiter+0xfa>
        ret = cosem_setVariant(e->value.byteArr, &object->thresholdActive);
    347a:	f106 0118 	add.w	r1, r6, #24
        ret = cosem_setVariant(e->value.byteArr, &object->thresholdNormal);
    347e:	4628      	mov	r0, r5
    3480:	f00a fb1f 	bl	dac2 <cosem_setVariant>
    3484:	e7ce      	b.n	3424 <cosem_getLimiter+0x98>
    else if (e->index == 4)
    3486:	2904      	cmp	r1, #4
    3488:	d102      	bne.n	3490 <cosem_getLimiter+0x104>
        ret = cosem_setVariant(e->value.byteArr, &object->thresholdNormal);
    348a:	f106 0128 	add.w	r1, r6, #40	; 0x28
    348e:	e7f6      	b.n	347e <cosem_getLimiter+0xf2>
    else if (e->index == 5)
    3490:	2905      	cmp	r1, #5
    3492:	d102      	bne.n	349a <cosem_getLimiter+0x10e>
        ret = cosem_setVariant(e->value.byteArr, &object->thresholdEmergency);
    3494:	f106 0138 	add.w	r1, r6, #56	; 0x38
    3498:	e7f1      	b.n	347e <cosem_getLimiter+0xf2>
    else if (e->index == 6)
    349a:	2906      	cmp	r1, #6
    349c:	d104      	bne.n	34a8 <cosem_getLimiter+0x11c>
        ret = cosem_setUInt32(e->value.byteArr, object->minOverThresholdDuration);
    349e:	6cb1      	ldr	r1, [r6, #72]	; 0x48
        ret = cosem_setUInt32(e->value.byteArr, object->minUnderThresholdDuration);
    34a0:	4628      	mov	r0, r5
    34a2:	f00a fad6 	bl	da52 <cosem_setUInt32>
    34a6:	e7bd      	b.n	3424 <cosem_getLimiter+0x98>
    else if (e->index == 7)
    34a8:	2907      	cmp	r1, #7
    34aa:	d101      	bne.n	34b0 <cosem_getLimiter+0x124>
        ret = cosem_setUInt32(e->value.byteArr, object->minUnderThresholdDuration);
    34ac:	6cf1      	ldr	r1, [r6, #76]	; 0x4c
    34ae:	e7f7      	b.n	34a0 <cosem_getLimiter+0x114>
    else if (e->index == 8)
    34b0:	2908      	cmp	r1, #8
    34b2:	d12a      	bne.n	350a <cosem_getLimiter+0x17e>
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    34b4:	2102      	movs	r1, #2
    34b6:	4628      	mov	r0, r5
    34b8:	f009 fbfd 	bl	ccb6 <bb_setUInt8>
    34bc:	4604      	mov	r4, r0
    34be:	bb68      	cbnz	r0, 351c <cosem_getLimiter+0x190>
            (ret = bb_setUInt8(data, 3)) != 0 ||
    34c0:	2103      	movs	r1, #3
    34c2:	4628      	mov	r0, r5
    34c4:	f009 fbf7 	bl	ccb6 <bb_setUInt8>
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    34c8:	4604      	mov	r4, r0
    34ca:	bb38      	cbnz	r0, 351c <cosem_getLimiter+0x190>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
    34cc:	2112      	movs	r1, #18
    34ce:	4628      	mov	r0, r5
    34d0:	f009 fbf1 	bl	ccb6 <bb_setUInt8>
            (ret = bb_setUInt8(data, 3)) != 0 ||
    34d4:	4604      	mov	r4, r0
    34d6:	bb08      	cbnz	r0, 351c <cosem_getLimiter+0x190>
            (ret = bb_setUInt16(data, object->emergencyProfile.id)) != 0 ||
    34d8:	f8b6 1050 	ldrh.w	r1, [r6, #80]	; 0x50
    34dc:	4628      	mov	r0, r5
    34de:	f009 fc0c 	bl	ccfa <bb_setUInt16>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
    34e2:	4604      	mov	r4, r0
    34e4:	b9d0      	cbnz	r0, 351c <cosem_getLimiter+0x190>
            (ret = cosem_setDateTimeAsOctetString(data, &object->emergencyProfile.activationTime)) != 0 ||
    34e6:	f106 0154 	add.w	r1, r6, #84	; 0x54
    34ea:	4628      	mov	r0, r5
    34ec:	f00a f9a2 	bl	d834 <cosem_setDateTimeAsOctetString>
            (ret = bb_setUInt16(data, object->emergencyProfile.id)) != 0 ||
    34f0:	4604      	mov	r4, r0
    34f2:	b998      	cbnz	r0, 351c <cosem_getLimiter+0x190>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT32)) != 0 ||
    34f4:	2106      	movs	r1, #6
    34f6:	4628      	mov	r0, r5
    34f8:	f009 fbdd 	bl	ccb6 <bb_setUInt8>
            (ret = cosem_setDateTimeAsOctetString(data, &object->emergencyProfile.activationTime)) != 0 ||
    34fc:	4604      	mov	r4, r0
    34fe:	b968      	cbnz	r0, 351c <cosem_getLimiter+0x190>
            (ret = bb_setUInt32(data, object->emergencyProfile.duration)) != 0)
    3500:	6e31      	ldr	r1, [r6, #96]	; 0x60
    3502:	4628      	mov	r0, r5
    3504:	f009 fc1b 	bl	cd3e <bb_setUInt32>
    3508:	e78c      	b.n	3424 <cosem_getLimiter+0x98>
    else if (e->index == 9)
    350a:	2909      	cmp	r1, #9
    350c:	d124      	bne.n	3558 <cosem_getLimiter+0x1cc>
        if ((ret = cosem_setArray(data, object->emergencyProfileGroupIDs.size)) == 0)
    350e:	f8b6 106a 	ldrh.w	r1, [r6, #106]	; 0x6a
    3512:	4628      	mov	r0, r5
    3514:	f00a faea 	bl	daec <cosem_setArray>
    3518:	4604      	mov	r4, r0
    351a:	b1c8      	cbz	r0, 3550 <cosem_getLimiter+0x1c4>
    else
    {
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    return ret;
}
    351c:	4620      	mov	r0, r4
    351e:	b002      	add	sp, #8
    3520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if ((ret = va_getByIndex(&object->emergencyProfileGroupIDs, pos, &it)) != 0 ||
    3524:	aa01      	add	r2, sp, #4
    3526:	4641      	mov	r1, r8
    3528:	4638      	mov	r0, r7
    352a:	f016 feba 	bl	1a2a2 <va_getByIndex>
    352e:	2800      	cmp	r0, #0
    3530:	f47f af78 	bne.w	3424 <cosem_getLimiter+0x98>
                    (ret = var_getBytes(it, data)) != 0)
    3534:	9801      	ldr	r0, [sp, #4]
    3536:	4629      	mov	r1, r5
    3538:	f016 fff3 	bl	1a522 <var_getBytes>
                if ((ret = va_getByIndex(&object->emergencyProfileGroupIDs, pos, &it)) != 0 ||
    353c:	2800      	cmp	r0, #0
    353e:	f47f af71 	bne.w	3424 <cosem_getLimiter+0x98>
            for (pos = 0; pos != object->emergencyProfileGroupIDs.size; ++pos)
    3542:	f108 0801 	add.w	r8, r8, #1
    3546:	f8b6 306a 	ldrh.w	r3, [r6, #106]	; 0x6a
    354a:	4543      	cmp	r3, r8
    354c:	d1ea      	bne.n	3524 <cosem_getLimiter+0x198>
    354e:	e7e5      	b.n	351c <cosem_getLimiter+0x190>
    3550:	4680      	mov	r8, r0
                if ((ret = va_getByIndex(&object->emergencyProfileGroupIDs, pos, &it)) != 0 ||
    3552:	f106 0764 	add.w	r7, r6, #100	; 0x64
    3556:	e7f6      	b.n	3546 <cosem_getLimiter+0x1ba>
    else if (e->index == 10)
    3558:	290a      	cmp	r1, #10
    355a:	d105      	bne.n	3568 <cosem_getLimiter+0x1dc>
        ret = cosem_setBoolean(e->value.byteArr, object->emergencyProfileActive);
    355c:	f896 106c 	ldrb.w	r1, [r6, #108]	; 0x6c
    3560:	4628      	mov	r0, r5
    3562:	f00a fadf 	bl	db24 <cosem_setBoolean>
    3566:	e75d      	b.n	3424 <cosem_getLimiter+0x98>
    else if (e->index == 11)
    3568:	290b      	cmp	r1, #11
    356a:	d17b      	bne.n	3664 <cosem_getLimiter+0x2d8>
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    356c:	2102      	movs	r1, #2
    356e:	4628      	mov	r0, r5
    3570:	f009 fba1 	bl	ccb6 <bb_setUInt8>
    3574:	4604      	mov	r4, r0
    3576:	2800      	cmp	r0, #0
    3578:	d1d0      	bne.n	351c <cosem_getLimiter+0x190>
            (ret = bb_setUInt8(data, 2)) != 0 ||
    357a:	2102      	movs	r1, #2
    357c:	4628      	mov	r0, r5
    357e:	f009 fb9a 	bl	ccb6 <bb_setUInt8>
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    3582:	4604      	mov	r4, r0
    3584:	2800      	cmp	r0, #0
    3586:	d1c9      	bne.n	351c <cosem_getLimiter+0x190>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    3588:	2102      	movs	r1, #2
    358a:	4628      	mov	r0, r5
    358c:	f009 fb93 	bl	ccb6 <bb_setUInt8>
            (ret = bb_setUInt8(data, 2)) != 0 ||
    3590:	4604      	mov	r4, r0
    3592:	2800      	cmp	r0, #0
    3594:	d1c2      	bne.n	351c <cosem_getLimiter+0x190>
            (ret = bb_setUInt8(data, 2)) != 0 ||
    3596:	2102      	movs	r1, #2
    3598:	4628      	mov	r0, r5
    359a:	f009 fb8c 	bl	ccb6 <bb_setUInt8>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    359e:	4604      	mov	r4, r0
    35a0:	2800      	cmp	r0, #0
    35a2:	d1bb      	bne.n	351c <cosem_getLimiter+0x190>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    35a4:	2109      	movs	r1, #9
    35a6:	4628      	mov	r0, r5
    35a8:	f009 fb85 	bl	ccb6 <bb_setUInt8>
            (ret = bb_setUInt8(data, 2)) != 0 ||
    35ac:	4604      	mov	r4, r0
    35ae:	2800      	cmp	r0, #0
    35b0:	d1b4      	bne.n	351c <cosem_getLimiter+0x190>
            (ret = bb_setUInt8(data, 6)) != 0 ||
    35b2:	2106      	movs	r1, #6
    35b4:	4628      	mov	r0, r5
    35b6:	f009 fb7e 	bl	ccb6 <bb_setUInt8>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    35ba:	4604      	mov	r4, r0
    35bc:	2800      	cmp	r0, #0
    35be:	d1ad      	bne.n	351c <cosem_getLimiter+0x190>
            (ret = bb_set(data, obj_getLogicalName((gxObject*)object->actionOverThreshold.script), 6)) != 0 ||
    35c0:	6f30      	ldr	r0, [r6, #112]	; 0x70
    35c2:	f000 fc11 	bl	3de8 <obj_getLogicalName>
    35c6:	2206      	movs	r2, #6
    35c8:	4601      	mov	r1, r0
    35ca:	4628      	mov	r0, r5
    35cc:	f009 fc59 	bl	ce82 <bb_set>
            (ret = bb_setUInt8(data, 6)) != 0 ||
    35d0:	4604      	mov	r4, r0
    35d2:	2800      	cmp	r0, #0
    35d4:	d1a2      	bne.n	351c <cosem_getLimiter+0x190>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
    35d6:	2112      	movs	r1, #18
    35d8:	4628      	mov	r0, r5
    35da:	f009 fb6c 	bl	ccb6 <bb_setUInt8>
            (ret = bb_set(data, obj_getLogicalName((gxObject*)object->actionOverThreshold.script), 6)) != 0 ||
    35de:	4604      	mov	r4, r0
    35e0:	2800      	cmp	r0, #0
    35e2:	d19b      	bne.n	351c <cosem_getLimiter+0x190>
            (ret = bb_setUInt16(data, object->actionOverThreshold.scriptSelector)) != 0 ||
    35e4:	f8b6 1074 	ldrh.w	r1, [r6, #116]	; 0x74
    35e8:	4628      	mov	r0, r5
    35ea:	f009 fb86 	bl	ccfa <bb_setUInt16>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
    35ee:	4604      	mov	r4, r0
    35f0:	2800      	cmp	r0, #0
    35f2:	d193      	bne.n	351c <cosem_getLimiter+0x190>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    35f4:	2102      	movs	r1, #2
    35f6:	4628      	mov	r0, r5
    35f8:	f009 fb5d 	bl	ccb6 <bb_setUInt8>
            (ret = bb_setUInt16(data, object->actionOverThreshold.scriptSelector)) != 0 ||
    35fc:	4604      	mov	r4, r0
    35fe:	2800      	cmp	r0, #0
    3600:	d18c      	bne.n	351c <cosem_getLimiter+0x190>
            (ret = bb_setUInt8(data, 2)) != 0 ||
    3602:	2102      	movs	r1, #2
    3604:	4628      	mov	r0, r5
    3606:	f009 fb56 	bl	ccb6 <bb_setUInt8>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    360a:	4604      	mov	r4, r0
    360c:	2800      	cmp	r0, #0
    360e:	d185      	bne.n	351c <cosem_getLimiter+0x190>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    3610:	2109      	movs	r1, #9
    3612:	4628      	mov	r0, r5
    3614:	f009 fb4f 	bl	ccb6 <bb_setUInt8>
            (ret = bb_setUInt8(data, 2)) != 0 ||
    3618:	4604      	mov	r4, r0
    361a:	2800      	cmp	r0, #0
    361c:	f47f af7e 	bne.w	351c <cosem_getLimiter+0x190>
            (ret = bb_setUInt8(data, 6)) != 0 ||
    3620:	2106      	movs	r1, #6
    3622:	4628      	mov	r0, r5
    3624:	f009 fb47 	bl	ccb6 <bb_setUInt8>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    3628:	4604      	mov	r4, r0
    362a:	2800      	cmp	r0, #0
    362c:	f47f af76 	bne.w	351c <cosem_getLimiter+0x190>
            (ret = bb_set(data, obj_getLogicalName((gxObject*)object->actionUnderThreshold.script), 6)) != 0 ||
    3630:	6fb0      	ldr	r0, [r6, #120]	; 0x78
    3632:	f000 fbd9 	bl	3de8 <obj_getLogicalName>
    3636:	2206      	movs	r2, #6
    3638:	4601      	mov	r1, r0
    363a:	4628      	mov	r0, r5
    363c:	f009 fc21 	bl	ce82 <bb_set>
            (ret = bb_setUInt8(data, 6)) != 0 ||
    3640:	4604      	mov	r4, r0
    3642:	2800      	cmp	r0, #0
    3644:	f47f af6a 	bne.w	351c <cosem_getLimiter+0x190>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
    3648:	2112      	movs	r1, #18
    364a:	4628      	mov	r0, r5
    364c:	f009 fb33 	bl	ccb6 <bb_setUInt8>
            (ret = bb_set(data, obj_getLogicalName((gxObject*)object->actionUnderThreshold.script), 6)) != 0 ||
    3650:	4604      	mov	r4, r0
    3652:	2800      	cmp	r0, #0
    3654:	f47f af62 	bne.w	351c <cosem_getLimiter+0x190>
            (ret = bb_setUInt16(data, object->actionUnderThreshold.scriptSelector)) != 0)
    3658:	f8b6 107c 	ldrh.w	r1, [r6, #124]	; 0x7c
    365c:	4628      	mov	r0, r5
    365e:	f009 fb4c 	bl	ccfa <bb_setUInt16>
    3662:	e6df      	b.n	3424 <cosem_getLimiter+0x98>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    3664:	f44f 7481 	mov.w	r4, #258	; 0x102
    3668:	e758      	b.n	351c <cosem_getLimiter+0x190>
    366a:	bf00      	nop
    366c:	0001d6ef 	.word	0x0001d6ef

00003670 <cosem_getmMbusClient>:
#endif //DLMS_IGNORE_LIMITER
#ifndef DLMS_IGNORE_MBUS_CLIENT
int cosem_getmMbusClient(
    gxValueEventArg* e)
{
    3670:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
#ifdef DLMS_IGNORE_MALLOC
    gxCaptureDefinition* it;
#else
    gxKey* it;
#endif //DLMS_IGNORE_MALLOC
    if (e->index == 2)
    3674:	7e03      	ldrb	r3, [r0, #24]
    gxMBusClient* object = (gxMBusClient*)e->target;
    3676:	6946      	ldr	r6, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
    3678:	6885      	ldr	r5, [r0, #8]
    if (e->index == 2)
    367a:	2b02      	cmp	r3, #2
    367c:	d10a      	bne.n	3694 <cosem_getmMbusClient+0x24>
    {
#ifndef DLMS_IGNORE_OBJECT_POINTERS
        if (object->mBusPort == NULL)
    367e:	69b1      	ldr	r1, [r6, #24]
        {
            ret = cosem_setOctetString2(e->value.byteArr, EMPTY_LN, 6);
    3680:	2206      	movs	r2, #6
        if (object->mBusPort == NULL)
    3682:	b929      	cbnz	r1, 3690 <cosem_getmMbusClient+0x20>
            ret = cosem_setOctetString2(e->value.byteArr, EMPTY_LN, 6);
    3684:	4959      	ldr	r1, [pc, #356]	; (37ec <cosem_getmMbusClient+0x17c>)
        }
        else
        {
            ret = cosem_setOctetString2(e->value.byteArr, object->mBusPort->logicalName, 6);
    3686:	4628      	mov	r0, r5
    3688:	f00a f9a6 	bl	d9d8 <cosem_setOctetString2>
                    (ret = hlp_setObjectCount(((gxByteBuffer*)it->key)->size, data)) != 0 ||
                    (ret = bb_set2(data, (gxByteBuffer*)it->key, 0, bb_size((gxByteBuffer*)it->key))) != 0 ||
                    //
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                    (ret = hlp_setObjectCount(((gxByteBuffer*)it->value)->size, data)) != 0 ||
                    (ret = bb_set2(data, (gxByteBuffer*)it->value, 0, bb_size((gxByteBuffer*)it->value))) != 0)
    368c:	4604      	mov	r4, r0
    368e:	e00a      	b.n	36a6 <cosem_getmMbusClient+0x36>
            ret = cosem_setOctetString2(e->value.byteArr, object->mBusPort->logicalName, 6);
    3690:	4411      	add	r1, r2
    3692:	e7f8      	b.n	3686 <cosem_getmMbusClient+0x16>
    else if (e->index == 3)
    3694:	2b03      	cmp	r3, #3
    3696:	d162      	bne.n	375e <cosem_getmMbusClient+0xee>
        if ((ret = cosem_setArray(data, object->captureDefinition.size)) == 0)
    3698:	8c71      	ldrh	r1, [r6, #34]	; 0x22
    369a:	4628      	mov	r0, r5
    369c:	f00a fa26 	bl	daec <cosem_setArray>
    36a0:	4604      	mov	r4, r0
    36a2:	2800      	cmp	r0, #0
    36a4:	d057      	beq.n	3756 <cosem_getmMbusClient+0xe6>
    else
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    return ret;
}
    36a6:	4620      	mov	r0, r4
    36a8:	b002      	add	sp, #8
    36aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                if ((ret = arr_getByIndex(&object->captureDefinition, pos, (void**)&it)) != 0 ||
    36ae:	aa01      	add	r2, sp, #4
    36b0:	4648      	mov	r0, r9
    36b2:	f00c fe68 	bl	10386 <arr_getByIndex>
    36b6:	2800      	cmp	r0, #0
    36b8:	d1e8      	bne.n	368c <cosem_getmMbusClient+0x1c>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    36ba:	2102      	movs	r1, #2
    36bc:	4628      	mov	r0, r5
    36be:	f009 fafa 	bl	ccb6 <bb_setUInt8>
                if ((ret = arr_getByIndex(&object->captureDefinition, pos, (void**)&it)) != 0 ||
    36c2:	2800      	cmp	r0, #0
    36c4:	d1e2      	bne.n	368c <cosem_getmMbusClient+0x1c>
                    (ret = bb_setUInt8(data, 2)) != 0 ||
    36c6:	2102      	movs	r1, #2
    36c8:	4628      	mov	r0, r5
    36ca:	f009 faf4 	bl	ccb6 <bb_setUInt8>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    36ce:	2800      	cmp	r0, #0
    36d0:	d1dc      	bne.n	368c <cosem_getmMbusClient+0x1c>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    36d2:	2109      	movs	r1, #9
    36d4:	4628      	mov	r0, r5
    36d6:	f009 faee 	bl	ccb6 <bb_setUInt8>
                    (ret = bb_setUInt8(data, 2)) != 0 ||
    36da:	2800      	cmp	r0, #0
    36dc:	d1d6      	bne.n	368c <cosem_getmMbusClient+0x1c>
                    (ret = hlp_setObjectCount(((gxByteBuffer*)it->key)->size, data)) != 0 ||
    36de:	9b01      	ldr	r3, [sp, #4]
    36e0:	681b      	ldr	r3, [r3, #0]
    36e2:	4629      	mov	r1, r5
    36e4:	88d8      	ldrh	r0, [r3, #6]
    36e6:	f016 f8d5 	bl	19894 <hlp_setObjectCount>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    36ea:	4607      	mov	r7, r0
    36ec:	2800      	cmp	r0, #0
    36ee:	d178      	bne.n	37e2 <cosem_getmMbusClient+0x172>
                    (ret = bb_set2(data, (gxByteBuffer*)it->key, 0, bb_size((gxByteBuffer*)it->key))) != 0 ||
    36f0:	9b01      	ldr	r3, [sp, #4]
    36f2:	f8d3 a000 	ldr.w	sl, [r3]
    36f6:	4650      	mov	r0, sl
    36f8:	f009 fa71 	bl	cbde <bb_size>
    36fc:	463a      	mov	r2, r7
    36fe:	4603      	mov	r3, r0
    3700:	4651      	mov	r1, sl
    3702:	4628      	mov	r0, r5
    3704:	f009 fbec 	bl	cee0 <bb_set2>
                    (ret = hlp_setObjectCount(((gxByteBuffer*)it->key)->size, data)) != 0 ||
    3708:	2800      	cmp	r0, #0
    370a:	d1bf      	bne.n	368c <cosem_getmMbusClient+0x1c>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    370c:	2109      	movs	r1, #9
    370e:	4628      	mov	r0, r5
    3710:	f009 fad1 	bl	ccb6 <bb_setUInt8>
                    (ret = bb_set2(data, (gxByteBuffer*)it->key, 0, bb_size((gxByteBuffer*)it->key))) != 0 ||
    3714:	2800      	cmp	r0, #0
    3716:	d1b9      	bne.n	368c <cosem_getmMbusClient+0x1c>
                    (ret = hlp_setObjectCount(((gxByteBuffer*)it->value)->size, data)) != 0 ||
    3718:	9b01      	ldr	r3, [sp, #4]
    371a:	685b      	ldr	r3, [r3, #4]
    371c:	4629      	mov	r1, r5
    371e:	88d8      	ldrh	r0, [r3, #6]
    3720:	f016 f8b8 	bl	19894 <hlp_setObjectCount>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    3724:	4607      	mov	r7, r0
    3726:	2800      	cmp	r0, #0
    3728:	d15b      	bne.n	37e2 <cosem_getmMbusClient+0x172>
                    (ret = bb_set2(data, (gxByteBuffer*)it->value, 0, bb_size((gxByteBuffer*)it->value))) != 0)
    372a:	9b01      	ldr	r3, [sp, #4]
    372c:	f8d3 a004 	ldr.w	sl, [r3, #4]
    3730:	4650      	mov	r0, sl
    3732:	f009 fa54 	bl	cbde <bb_size>
    3736:	463a      	mov	r2, r7
    3738:	4603      	mov	r3, r0
    373a:	4651      	mov	r1, sl
    373c:	4628      	mov	r0, r5
    373e:	f009 fbcf 	bl	cee0 <bb_set2>
    3742:	f108 0801 	add.w	r8, r8, #1
                    (ret = hlp_setObjectCount(((gxByteBuffer*)it->value)->size, data)) != 0 ||
    3746:	2800      	cmp	r0, #0
    3748:	d1a0      	bne.n	368c <cosem_getmMbusClient+0x1c>
            for (pos = 0; pos != object->captureDefinition.size; ++pos)
    374a:	8c73      	ldrh	r3, [r6, #34]	; 0x22
    374c:	fa1f f188 	uxth.w	r1, r8
    3750:	428b      	cmp	r3, r1
    3752:	d1ac      	bne.n	36ae <cosem_getmMbusClient+0x3e>
    3754:	e7a7      	b.n	36a6 <cosem_getmMbusClient+0x36>
    3756:	4680      	mov	r8, r0
                if ((ret = arr_getByIndex(&object->captureDefinition, pos, (void**)&it)) != 0 ||
    3758:	f106 091c 	add.w	r9, r6, #28
    375c:	e7f5      	b.n	374a <cosem_getmMbusClient+0xda>
    else if (e->index == 4)
    375e:	2b04      	cmp	r3, #4
    3760:	d104      	bne.n	376c <cosem_getmMbusClient+0xfc>
        ret = cosem_setUInt32(e->value.byteArr, object->capturePeriod);
    3762:	6931      	ldr	r1, [r6, #16]
        ret = cosem_setUInt32(e->value.byteArr, object->identificationNumber);
    3764:	4628      	mov	r0, r5
    3766:	f00a f974 	bl	da52 <cosem_setUInt32>
    376a:	e78f      	b.n	368c <cosem_getmMbusClient+0x1c>
    else if (e->index == 5)
    376c:	2b05      	cmp	r3, #5
    376e:	d104      	bne.n	377a <cosem_getmMbusClient+0x10a>
        ret = cosem_setUInt8(e->value.byteArr, object->primaryAddress);
    3770:	7d31      	ldrb	r1, [r6, #20]
        ret = cosem_setUInt8(e->value.byteArr, object->alarm);
    3772:	4628      	mov	r0, r5
    3774:	f00a f951 	bl	da1a <cosem_setUInt8>
    3778:	e788      	b.n	368c <cosem_getmMbusClient+0x1c>
    else if (e->index == 6)
    377a:	2b06      	cmp	r3, #6
    377c:	d101      	bne.n	3782 <cosem_getmMbusClient+0x112>
        ret = cosem_setUInt32(e->value.byteArr, object->identificationNumber);
    377e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    3780:	e7f0      	b.n	3764 <cosem_getmMbusClient+0xf4>
    else if (e->index == 7)
    3782:	2b07      	cmp	r3, #7
    3784:	d104      	bne.n	3790 <cosem_getmMbusClient+0x120>
        ret = cosem_setUInt16(e->value.byteArr, object->manufacturerID);
    3786:	8db1      	ldrh	r1, [r6, #44]	; 0x2c
        ret = cosem_setUInt16(e->value.byteArr, object->configuration);
    3788:	4628      	mov	r0, r5
    378a:	f00a f954 	bl	da36 <cosem_setUInt16>
    378e:	e77d      	b.n	368c <cosem_getmMbusClient+0x1c>
    else if (e->index == 8)
    3790:	2b08      	cmp	r3, #8
    3792:	d102      	bne.n	379a <cosem_getmMbusClient+0x12a>
        ret = cosem_setUInt8(e->value.byteArr, object->dataHeaderVersion);
    3794:	f896 102e 	ldrb.w	r1, [r6, #46]	; 0x2e
    3798:	e7eb      	b.n	3772 <cosem_getmMbusClient+0x102>
    else if (e->index == 9)
    379a:	2b09      	cmp	r3, #9
    379c:	d102      	bne.n	37a4 <cosem_getmMbusClient+0x134>
        ret = cosem_setUInt8(e->value.byteArr, object->deviceType);
    379e:	f896 102f 	ldrb.w	r1, [r6, #47]	; 0x2f
    37a2:	e7e6      	b.n	3772 <cosem_getmMbusClient+0x102>
    else if (e->index == 10)
    37a4:	2b0a      	cmp	r3, #10
    37a6:	d102      	bne.n	37ae <cosem_getmMbusClient+0x13e>
        ret = cosem_setUInt8(e->value.byteArr, object->accessNumber);
    37a8:	f896 1030 	ldrb.w	r1, [r6, #48]	; 0x30
    37ac:	e7e1      	b.n	3772 <cosem_getmMbusClient+0x102>
    else if (e->index == 11)
    37ae:	2b0b      	cmp	r3, #11
    37b0:	d102      	bne.n	37b8 <cosem_getmMbusClient+0x148>
        ret = cosem_setUInt8(e->value.byteArr, object->status);
    37b2:	f896 1031 	ldrb.w	r1, [r6, #49]	; 0x31
    37b6:	e7dc      	b.n	3772 <cosem_getmMbusClient+0x102>
    else if (e->index == 12)
    37b8:	2b0c      	cmp	r3, #12
    37ba:	d102      	bne.n	37c2 <cosem_getmMbusClient+0x152>
        ret = cosem_setUInt8(e->value.byteArr, object->alarm);
    37bc:	f896 1032 	ldrb.w	r1, [r6, #50]	; 0x32
    37c0:	e7d7      	b.n	3772 <cosem_getmMbusClient+0x102>
    else if (e->index == 13 && object->base.version != 0)
    37c2:	2b0d      	cmp	r3, #13
    37c4:	d103      	bne.n	37ce <cosem_getmMbusClient+0x15e>
    37c6:	78b3      	ldrb	r3, [r6, #2]
    37c8:	b16b      	cbz	r3, 37e6 <cosem_getmMbusClient+0x176>
        ret = cosem_setUInt16(e->value.byteArr, object->configuration);
    37ca:	8eb1      	ldrh	r1, [r6, #52]	; 0x34
    37cc:	e7dc      	b.n	3788 <cosem_getmMbusClient+0x118>
    else if (e->index == 14 && object->base.version != 0)
    37ce:	2b0e      	cmp	r3, #14
    37d0:	d109      	bne.n	37e6 <cosem_getmMbusClient+0x176>
    37d2:	78b3      	ldrb	r3, [r6, #2]
    37d4:	b13b      	cbz	r3, 37e6 <cosem_getmMbusClient+0x176>
        ret = cosem_setEnum(e->value.byteArr, object->encryptionKeyStatus);
    37d6:	f896 1036 	ldrb.w	r1, [r6, #54]	; 0x36
    37da:	4628      	mov	r0, r5
    37dc:	f00a f994 	bl	db08 <cosem_setEnum>
    37e0:	e754      	b.n	368c <cosem_getmMbusClient+0x1c>
                    (ret = hlp_setObjectCount(((gxByteBuffer*)it->value)->size, data)) != 0 ||
    37e2:	463c      	mov	r4, r7
    37e4:	e75f      	b.n	36a6 <cosem_getmMbusClient+0x36>
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    37e6:	f44f 7481 	mov.w	r4, #258	; 0x102
    37ea:	e75c      	b.n	36a6 <cosem_getmMbusClient+0x36>
    37ec:	0001d6ef 	.word	0x0001d6ef

000037f0 <cosem_getModemConfiguration>:
}

int cosem_getModemConfiguration(
    dlmsSettings* settings,
    gxValueEventArg* e)
{
    37f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
#else
    gxByteBuffer* ba;
#endif //DLMS_IGNORE_MALLOC
    gxModemConfiguration* target = ((gxModemConfiguration*)e->target);
    gxByteBuffer* data = e->value.byteArr;
    if (e->index == 2)
    37f4:	7e0f      	ldrb	r7, [r1, #24]
    gxModemConfiguration* target = ((gxModemConfiguration*)e->target);
    37f6:	694e      	ldr	r6, [r1, #20]
    gxByteBuffer* data = e->value.byteArr;
    37f8:	688d      	ldr	r5, [r1, #8]
    if (e->index == 2)
    37fa:	2f02      	cmp	r7, #2
    37fc:	d106      	bne.n	380c <cosem_getModemConfiguration+0x1c>
    {
        ret = cosem_setEnum(e->value.byteArr, target->communicationSpeed);
    37fe:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
    3802:	4628      	mov	r0, r5
    3804:	f00a f980 	bl	db08 <cosem_setEnum>
                    }
#else
                    if ((ret = arr_getByIndex(&target->modemProfile, pos, (void**)&ba)) != 0 ||
                        (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                        (ret = hlp_setObjectCount(ba->size, data)) != 0 ||
                        (ret = bb_set(data, ba->data, ba->size)) != 0)
    3808:	4604      	mov	r4, r0
    380a:	e008      	b.n	381e <cosem_getModemConfiguration+0x2e>
    else if (e->index == 3)
    380c:	2f03      	cmp	r7, #3
    380e:	d15d      	bne.n	38cc <cosem_getModemConfiguration+0xdc>
        if ((ret = cosem_setArray(data, target->initialisationStrings.size)) == 0)
    3810:	8af1      	ldrh	r1, [r6, #22]
    3812:	4628      	mov	r0, r5
    3814:	f00a f96a 	bl	daec <cosem_setArray>
    3818:	4604      	mov	r4, r0
    381a:	2800      	cmp	r0, #0
    381c:	d052      	beq.n	38c4 <cosem_getModemConfiguration+0xd4>
    else
    {
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    return ret;
}
    381e:	4620      	mov	r0, r4
    3820:	b002      	add	sp, #8
    3822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if ((ret = arr_getByIndex(&target->initialisationStrings, pos, (void**)&mi)) != 0 ||
    3826:	aa01      	add	r2, sp, #4
    3828:	4640      	mov	r0, r8
    382a:	f00c fdac 	bl	10386 <arr_getByIndex>
    382e:	2800      	cmp	r0, #0
    3830:	d1ea      	bne.n	3808 <cosem_getModemConfiguration+0x18>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    3832:	2102      	movs	r1, #2
    3834:	4628      	mov	r0, r5
    3836:	f009 fa3e 	bl	ccb6 <bb_setUInt8>
                if ((ret = arr_getByIndex(&target->initialisationStrings, pos, (void**)&mi)) != 0 ||
    383a:	2800      	cmp	r0, #0
    383c:	d1e4      	bne.n	3808 <cosem_getModemConfiguration+0x18>
                    (ret = bb_setUInt8(data, 3)) != 0 ||
    383e:	2103      	movs	r1, #3
    3840:	4628      	mov	r0, r5
    3842:	f009 fa38 	bl	ccb6 <bb_setUInt8>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    3846:	2800      	cmp	r0, #0
    3848:	d1de      	bne.n	3808 <cosem_getModemConfiguration+0x18>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    384a:	2109      	movs	r1, #9
    384c:	4628      	mov	r0, r5
    384e:	f009 fa32 	bl	ccb6 <bb_setUInt8>
                    (ret = bb_setUInt8(data, 3)) != 0 ||
    3852:	2800      	cmp	r0, #0
    3854:	d1d8      	bne.n	3808 <cosem_getModemConfiguration+0x18>
                    (ret = hlp_setObjectCount(mi->request.size, data)) != 0 ||
    3856:	9b01      	ldr	r3, [sp, #4]
    3858:	4629      	mov	r1, r5
    385a:	88d8      	ldrh	r0, [r3, #6]
    385c:	f016 f81a 	bl	19894 <hlp_setObjectCount>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    3860:	2800      	cmp	r0, #0
    3862:	d1d1      	bne.n	3808 <cosem_getModemConfiguration+0x18>
                    (ret = bb_set(data, mi->request.data, mi->request.size)) != 0 ||
    3864:	9b01      	ldr	r3, [sp, #4]
    3866:	4628      	mov	r0, r5
    3868:	88da      	ldrh	r2, [r3, #6]
    386a:	6819      	ldr	r1, [r3, #0]
    386c:	f009 fb09 	bl	ce82 <bb_set>
                    (ret = hlp_setObjectCount(mi->request.size, data)) != 0 ||
    3870:	2800      	cmp	r0, #0
    3872:	d1c9      	bne.n	3808 <cosem_getModemConfiguration+0x18>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    3874:	2109      	movs	r1, #9
    3876:	4628      	mov	r0, r5
    3878:	f009 fa1d 	bl	ccb6 <bb_setUInt8>
                    (ret = bb_set(data, mi->request.data, mi->request.size)) != 0 ||
    387c:	2800      	cmp	r0, #0
    387e:	d1c3      	bne.n	3808 <cosem_getModemConfiguration+0x18>
                    (ret = hlp_setObjectCount(mi->response.size, data)) != 0 ||
    3880:	9b01      	ldr	r3, [sp, #4]
    3882:	4629      	mov	r1, r5
    3884:	8a58      	ldrh	r0, [r3, #18]
    3886:	f016 f805 	bl	19894 <hlp_setObjectCount>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    388a:	2800      	cmp	r0, #0
    388c:	d1bc      	bne.n	3808 <cosem_getModemConfiguration+0x18>
                    (ret = bb_set(data, mi->response.data, mi->response.size)) != 0 ||
    388e:	9b01      	ldr	r3, [sp, #4]
    3890:	4628      	mov	r0, r5
    3892:	8a5a      	ldrh	r2, [r3, #18]
    3894:	68d9      	ldr	r1, [r3, #12]
    3896:	f009 faf4 	bl	ce82 <bb_set>
                    (ret = hlp_setObjectCount(mi->response.size, data)) != 0 ||
    389a:	2800      	cmp	r0, #0
    389c:	d1b4      	bne.n	3808 <cosem_getModemConfiguration+0x18>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
    389e:	2112      	movs	r1, #18
    38a0:	4628      	mov	r0, r5
    38a2:	f009 fa08 	bl	ccb6 <bb_setUInt8>
                    (ret = bb_set(data, mi->response.data, mi->response.size)) != 0 ||
    38a6:	2800      	cmp	r0, #0
    38a8:	d1ae      	bne.n	3808 <cosem_getModemConfiguration+0x18>
                    (ret = bb_setUInt16(data, mi->delay)) != 0)
    38aa:	9b01      	ldr	r3, [sp, #4]
    38ac:	4628      	mov	r0, r5
    38ae:	8b19      	ldrh	r1, [r3, #24]
    38b0:	f009 fa23 	bl	ccfa <bb_setUInt16>
    38b4:	3701      	adds	r7, #1
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
    38b6:	2800      	cmp	r0, #0
    38b8:	d1a6      	bne.n	3808 <cosem_getModemConfiguration+0x18>
            for (pos = 0; pos != target->initialisationStrings.size; ++pos)
    38ba:	8af3      	ldrh	r3, [r6, #22]
    38bc:	b2b9      	uxth	r1, r7
    38be:	428b      	cmp	r3, r1
    38c0:	d1b1      	bne.n	3826 <cosem_getModemConfiguration+0x36>
    38c2:	e7ac      	b.n	381e <cosem_getModemConfiguration+0x2e>
    38c4:	4607      	mov	r7, r0
                if ((ret = arr_getByIndex(&target->initialisationStrings, pos, (void**)&mi)) != 0 ||
    38c6:	f106 0810 	add.w	r8, r6, #16
    38ca:	e7f6      	b.n	38ba <cosem_getModemConfiguration+0xca>
    else if (e->index == 4)
    38cc:	2f04      	cmp	r7, #4
    38ce:	f040 80bf 	bne.w	3a50 <cosem_getModemConfiguration+0x260>
        if (settings->server && target->modemProfile.size == 0)
    38d2:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
    38d6:	8c71      	ldrh	r1, [r6, #34]	; 0x22
    38d8:	2b00      	cmp	r3, #0
    38da:	f000 8089 	beq.w	39f0 <cosem_getModemConfiguration+0x200>
    38de:	2900      	cmp	r1, #0
    38e0:	f040 8086 	bne.w	39f0 <cosem_getModemConfiguration+0x200>
            if ((ret = cosem_setArray(data, 17)) != 0 ||
    38e4:	2111      	movs	r1, #17
    38e6:	4628      	mov	r0, r5
    38e8:	f00a f900 	bl	daec <cosem_setArray>
    38ec:	4604      	mov	r4, r0
    38ee:	2800      	cmp	r0, #0
    38f0:	d195      	bne.n	381e <cosem_getModemConfiguration+0x2e>
                (ret = cosem_add(data, "OK", 2) != 0) ||
    38f2:	495a      	ldr	r1, [pc, #360]	; (3a5c <cosem_getModemConfiguration+0x26c>)
    38f4:	2202      	movs	r2, #2
    38f6:	4628      	mov	r0, r5
    38f8:	f00e f917 	bl	11b2a <cosem_add>
            if ((ret = cosem_setArray(data, 17)) != 0 ||
    38fc:	2800      	cmp	r0, #0
    38fe:	f040 80aa 	bne.w	3a56 <cosem_getModemConfiguration+0x266>
                (ret = cosem_add(data, "CONNECT", 7) != 0) ||
    3902:	4957      	ldr	r1, [pc, #348]	; (3a60 <cosem_getModemConfiguration+0x270>)
    3904:	2207      	movs	r2, #7
    3906:	4628      	mov	r0, r5
    3908:	f00e f90f 	bl	11b2a <cosem_add>
                (ret = cosem_add(data, "OK", 2) != 0) ||
    390c:	2800      	cmp	r0, #0
    390e:	f040 80a2 	bne.w	3a56 <cosem_getModemConfiguration+0x266>
                (ret = cosem_add(data, "RING", 4) != 0) ||
    3912:	4954      	ldr	r1, [pc, #336]	; (3a64 <cosem_getModemConfiguration+0x274>)
    3914:	463a      	mov	r2, r7
    3916:	4628      	mov	r0, r5
    3918:	f00e f907 	bl	11b2a <cosem_add>
                (ret = cosem_add(data, "CONNECT", 7) != 0) ||
    391c:	2800      	cmp	r0, #0
    391e:	f040 809a 	bne.w	3a56 <cosem_getModemConfiguration+0x266>
                (ret = cosem_add(data, "NO CARRIER", 10) != 0) ||
    3922:	4951      	ldr	r1, [pc, #324]	; (3a68 <cosem_getModemConfiguration+0x278>)
    3924:	220a      	movs	r2, #10
    3926:	4628      	mov	r0, r5
    3928:	f00e f8ff 	bl	11b2a <cosem_add>
                (ret = cosem_add(data, "RING", 4) != 0) ||
    392c:	2800      	cmp	r0, #0
    392e:	f040 8092 	bne.w	3a56 <cosem_getModemConfiguration+0x266>
                (ret = cosem_add(data, "ERROR", 5) != 0) ||
    3932:	494e      	ldr	r1, [pc, #312]	; (3a6c <cosem_getModemConfiguration+0x27c>)
    3934:	2205      	movs	r2, #5
    3936:	4628      	mov	r0, r5
    3938:	f00e f8f7 	bl	11b2a <cosem_add>
                (ret = cosem_add(data, "NO CARRIER", 10) != 0) ||
    393c:	2800      	cmp	r0, #0
    393e:	f040 808a 	bne.w	3a56 <cosem_getModemConfiguration+0x266>
                (ret = cosem_add(data, "CONNECT 1200", 12) != 0) ||
    3942:	494b      	ldr	r1, [pc, #300]	; (3a70 <cosem_getModemConfiguration+0x280>)
    3944:	220c      	movs	r2, #12
    3946:	4628      	mov	r0, r5
    3948:	f00e f8ef 	bl	11b2a <cosem_add>
                (ret = cosem_add(data, "ERROR", 5) != 0) ||
    394c:	2800      	cmp	r0, #0
    394e:	f040 8082 	bne.w	3a56 <cosem_getModemConfiguration+0x266>
                (ret = cosem_add(data, "NO DIAL TONE", 12) != 0) ||
    3952:	4948      	ldr	r1, [pc, #288]	; (3a74 <cosem_getModemConfiguration+0x284>)
    3954:	220c      	movs	r2, #12
    3956:	4628      	mov	r0, r5
    3958:	f00e f8e7 	bl	11b2a <cosem_add>
                (ret = cosem_add(data, "CONNECT 1200", 12) != 0) ||
    395c:	2800      	cmp	r0, #0
    395e:	d17a      	bne.n	3a56 <cosem_getModemConfiguration+0x266>
                (ret = cosem_add(data, "BUSY", 4) != 0) ||
    3960:	4945      	ldr	r1, [pc, #276]	; (3a78 <cosem_getModemConfiguration+0x288>)
    3962:	2204      	movs	r2, #4
    3964:	4628      	mov	r0, r5
    3966:	f00e f8e0 	bl	11b2a <cosem_add>
                (ret = cosem_add(data, "NO DIAL TONE", 12) != 0) ||
    396a:	2800      	cmp	r0, #0
    396c:	d173      	bne.n	3a56 <cosem_getModemConfiguration+0x266>
                (ret = cosem_add(data, "NO ANSWER", 9) != 0) ||
    396e:	4943      	ldr	r1, [pc, #268]	; (3a7c <cosem_getModemConfiguration+0x28c>)
    3970:	2209      	movs	r2, #9
    3972:	4628      	mov	r0, r5
    3974:	f00e f8d9 	bl	11b2a <cosem_add>
                (ret = cosem_add(data, "BUSY", 4) != 0) ||
    3978:	2800      	cmp	r0, #0
    397a:	d16c      	bne.n	3a56 <cosem_getModemConfiguration+0x266>
                (ret = cosem_add(data, "CONNECT 600", 11) != 0) ||
    397c:	4940      	ldr	r1, [pc, #256]	; (3a80 <cosem_getModemConfiguration+0x290>)
    397e:	220b      	movs	r2, #11
    3980:	4628      	mov	r0, r5
    3982:	f00e f8d2 	bl	11b2a <cosem_add>
                (ret = cosem_add(data, "NO ANSWER", 9) != 0) ||
    3986:	2800      	cmp	r0, #0
    3988:	d165      	bne.n	3a56 <cosem_getModemConfiguration+0x266>
                (ret = cosem_add(data, "CONNECT 2400", 12) != 0) ||
    398a:	493e      	ldr	r1, [pc, #248]	; (3a84 <cosem_getModemConfiguration+0x294>)
    398c:	220c      	movs	r2, #12
    398e:	4628      	mov	r0, r5
    3990:	f00e f8cb 	bl	11b2a <cosem_add>
                (ret = cosem_add(data, "CONNECT 600", 11) != 0) ||
    3994:	2800      	cmp	r0, #0
    3996:	d15e      	bne.n	3a56 <cosem_getModemConfiguration+0x266>
                (ret = cosem_add(data, "CONNECT 4800", 12) != 0) ||
    3998:	493b      	ldr	r1, [pc, #236]	; (3a88 <cosem_getModemConfiguration+0x298>)
    399a:	220c      	movs	r2, #12
    399c:	4628      	mov	r0, r5
    399e:	f00e f8c4 	bl	11b2a <cosem_add>
                (ret = cosem_add(data, "CONNECT 2400", 12) != 0) ||
    39a2:	2800      	cmp	r0, #0
    39a4:	d157      	bne.n	3a56 <cosem_getModemConfiguration+0x266>
                (ret = cosem_add(data, "CONNECT 9600", 12) != 0) ||
    39a6:	4939      	ldr	r1, [pc, #228]	; (3a8c <cosem_getModemConfiguration+0x29c>)
    39a8:	220c      	movs	r2, #12
    39aa:	4628      	mov	r0, r5
    39ac:	f00e f8bd 	bl	11b2a <cosem_add>
                (ret = cosem_add(data, "CONNECT 4800", 12) != 0) ||
    39b0:	2800      	cmp	r0, #0
    39b2:	d150      	bne.n	3a56 <cosem_getModemConfiguration+0x266>
                (ret = cosem_add(data, "CONNECT 14 400", 14) != 0) ||
    39b4:	4936      	ldr	r1, [pc, #216]	; (3a90 <cosem_getModemConfiguration+0x2a0>)
    39b6:	220e      	movs	r2, #14
    39b8:	4628      	mov	r0, r5
    39ba:	f00e f8b6 	bl	11b2a <cosem_add>
                (ret = cosem_add(data, "CONNECT 9600", 12) != 0) ||
    39be:	2800      	cmp	r0, #0
    39c0:	d149      	bne.n	3a56 <cosem_getModemConfiguration+0x266>
                (ret = cosem_add(data, "CONNECT 28 800", 14) != 0) ||
    39c2:	4934      	ldr	r1, [pc, #208]	; (3a94 <cosem_getModemConfiguration+0x2a4>)
    39c4:	220e      	movs	r2, #14
    39c6:	4628      	mov	r0, r5
    39c8:	f00e f8af 	bl	11b2a <cosem_add>
                (ret = cosem_add(data, "CONNECT 14 400", 14) != 0) ||
    39cc:	2800      	cmp	r0, #0
    39ce:	d142      	bne.n	3a56 <cosem_getModemConfiguration+0x266>
                (ret = cosem_add(data, "CONNECT 33 600", 14) != 0) ||
    39d0:	4931      	ldr	r1, [pc, #196]	; (3a98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT>)
    39d2:	220e      	movs	r2, #14
    39d4:	4628      	mov	r0, r5
    39d6:	f00e f8a8 	bl	11b2a <cosem_add>
                (ret = cosem_add(data, "CONNECT 28 800", 14) != 0) ||
    39da:	2800      	cmp	r0, #0
    39dc:	d13b      	bne.n	3a56 <cosem_getModemConfiguration+0x266>
                (ret = cosem_add(data, "CONNECT 56 000", 14) != 0))
    39de:	492f      	ldr	r1, [pc, #188]	; (3a9c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4>)
    39e0:	220e      	movs	r2, #14
    39e2:	4628      	mov	r0, r5
    39e4:	f00e f8a1 	bl	11b2a <cosem_add>
    39e8:	1e04      	subs	r4, r0, #0
    39ea:	bf18      	it	ne
    39ec:	2401      	movne	r4, #1
    39ee:	e716      	b.n	381e <cosem_getModemConfiguration+0x2e>
            if ((ret = cosem_setArray(data, target->modemProfile.size)) == 0)
    39f0:	4628      	mov	r0, r5
    39f2:	f00a f87b 	bl	daec <cosem_setArray>
    39f6:	4604      	mov	r4, r0
    39f8:	2800      	cmp	r0, #0
    39fa:	f47f af10 	bne.w	381e <cosem_getModemConfiguration+0x2e>
    39fe:	4607      	mov	r7, r0
                    if ((ret = arr_getByIndex(&target->modemProfile, pos, (void**)&ba)) != 0 ||
    3a00:	f106 081c 	add.w	r8, r6, #28
    3a04:	e01f      	b.n	3a46 <cosem_getModemConfiguration+0x256>
    3a06:	aa01      	add	r2, sp, #4
    3a08:	4640      	mov	r0, r8
    3a0a:	f00c fcbc 	bl	10386 <arr_getByIndex>
    3a0e:	2800      	cmp	r0, #0
    3a10:	f47f aefa 	bne.w	3808 <cosem_getModemConfiguration+0x18>
                        (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    3a14:	2109      	movs	r1, #9
    3a16:	4628      	mov	r0, r5
    3a18:	f009 f94d 	bl	ccb6 <bb_setUInt8>
                    if ((ret = arr_getByIndex(&target->modemProfile, pos, (void**)&ba)) != 0 ||
    3a1c:	2800      	cmp	r0, #0
    3a1e:	f47f aef3 	bne.w	3808 <cosem_getModemConfiguration+0x18>
                        (ret = hlp_setObjectCount(ba->size, data)) != 0 ||
    3a22:	9b01      	ldr	r3, [sp, #4]
    3a24:	4629      	mov	r1, r5
    3a26:	88d8      	ldrh	r0, [r3, #6]
    3a28:	f015 ff34 	bl	19894 <hlp_setObjectCount>
                        (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    3a2c:	2800      	cmp	r0, #0
    3a2e:	f47f aeeb 	bne.w	3808 <cosem_getModemConfiguration+0x18>
                        (ret = bb_set(data, ba->data, ba->size)) != 0)
    3a32:	9b01      	ldr	r3, [sp, #4]
    3a34:	4628      	mov	r0, r5
    3a36:	88da      	ldrh	r2, [r3, #6]
    3a38:	6819      	ldr	r1, [r3, #0]
    3a3a:	f009 fa22 	bl	ce82 <bb_set>
    3a3e:	3701      	adds	r7, #1
                        (ret = hlp_setObjectCount(ba->size, data)) != 0 ||
    3a40:	2800      	cmp	r0, #0
    3a42:	f47f aee1 	bne.w	3808 <cosem_getModemConfiguration+0x18>
                for (pos = 0; pos != target->modemProfile.size; ++pos)
    3a46:	8c73      	ldrh	r3, [r6, #34]	; 0x22
    3a48:	b2b9      	uxth	r1, r7
    3a4a:	428b      	cmp	r3, r1
    3a4c:	d1db      	bne.n	3a06 <cosem_getModemConfiguration+0x216>
    3a4e:	e6e6      	b.n	381e <cosem_getModemConfiguration+0x2e>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    3a50:	f44f 7481 	mov.w	r4, #258	; 0x102
    3a54:	e6e3      	b.n	381e <cosem_getModemConfiguration+0x2e>
                (ret = cosem_add(data, "CONNECT 33 600", 14) != 0) ||
    3a56:	2401      	movs	r4, #1
    3a58:	e6e1      	b.n	381e <cosem_getModemConfiguration+0x2e>
    3a5a:	bf00      	nop
    3a5c:	0001d636 	.word	0x0001d636
    3a60:	0001d639 	.word	0x0001d639
    3a64:	0001d641 	.word	0x0001d641
    3a68:	0001d646 	.word	0x0001d646
    3a6c:	0001d651 	.word	0x0001d651
    3a70:	0001d657 	.word	0x0001d657
    3a74:	0001d664 	.word	0x0001d664
    3a78:	0001d671 	.word	0x0001d671
    3a7c:	0001d676 	.word	0x0001d676
    3a80:	0001d680 	.word	0x0001d680
    3a84:	0001d68c 	.word	0x0001d68c
    3a88:	0001d699 	.word	0x0001d699
    3a8c:	0001d6a6 	.word	0x0001d6a6
    3a90:	0001d6b3 	.word	0x0001d6b3
    3a94:	0001d6c2 	.word	0x0001d6c2
    3a98:	0001d6d1 	.word	0x0001d6d1
    3a9c:	0001d6e0 	.word	0x0001d6e0

00003aa0 <cosem_getPppSetup>:
#endif //DLMS_IGNORE_MODEM_CONFIGURATION
#ifndef DLMS_IGNORE_PPP_SETUP
int cosem_getPppSetup(
    gxValueEventArg* e)
{
    3aa0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    uint16_t pos;
    gxpppSetupLcpOption* lcpItem;
    gxpppSetupIPCPOption* ipcpItem;
    gxPppSetup* object = (gxPppSetup*)e->target;
    gxByteBuffer* data = e->value.byteArr;
    if (e->index == 2)
    3aa4:	7e03      	ldrb	r3, [r0, #24]
    gxPppSetup* object = (gxPppSetup*)e->target;
    3aa6:	6946      	ldr	r6, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
    3aa8:	6885      	ldr	r5, [r0, #8]
    if (e->index == 2)
    3aaa:	2b02      	cmp	r3, #2
    3aac:	d10a      	bne.n	3ac4 <cosem_getPppSetup+0x24>
#else
        ret = cosem_setOctetString2(e->value.byteArr, object->PHYReference, sizeof(object->PHYReference));
#endif //DLMS_IGNORE_OBJECT_POINTERS
#else
#ifndef DLMS_IGNORE_OBJECT_POINTERS
        if (object->phy == NULL)
    3aae:	69f1      	ldr	r1, [r6, #28]
        {
            ret = cosem_setOctetString2(e->value.byteArr, EMPTY_LN, 6);
    3ab0:	2206      	movs	r2, #6
        if (object->phy == NULL)
    3ab2:	b929      	cbnz	r1, 3ac0 <cosem_getPppSetup+0x20>
            ret = cosem_setOctetString2(e->value.byteArr, EMPTY_LN, 6);
    3ab4:	4981      	ldr	r1, [pc, #516]	; (3cbc <cosem_getPppSetup+0x21c>)
        }
        else
        {
            ret = cosem_setOctetString2(e->value.byteArr, object->phy->logicalName, 6);
    3ab6:	4628      	mov	r0, r5
    3ab8:	f009 ff8e 	bl	d9d8 <cosem_setOctetString2>
                (ret = hlp_setObjectCount(object->userName.size, data)) != 0 ||
                (ret = bb_set2(data, &object->userName, 0, bb_size(&object->userName))) != 0 ||
                //Add pw.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                (ret = hlp_setObjectCount(object->password.size, data)) != 0 ||
                (ret = bb_set2(data, &object->password, 0, bb_size(&object->password))) != 0)
    3abc:	4604      	mov	r4, r0
    3abe:	e00a      	b.n	3ad6 <cosem_getPppSetup+0x36>
            ret = cosem_setOctetString2(e->value.byteArr, object->phy->logicalName, 6);
    3ac0:	4411      	add	r1, r2
    3ac2:	e7f8      	b.n	3ab6 <cosem_getPppSetup+0x16>
    else if (e->index == 3)
    3ac4:	2b03      	cmp	r3, #3
    3ac6:	d150      	bne.n	3b6a <cosem_getPppSetup+0xca>
        if ((ret = cosem_setArray(data, object->lcpOptions.size)) == 0)
    3ac8:	8cf1      	ldrh	r1, [r6, #38]	; 0x26
    3aca:	4628      	mov	r0, r5
    3acc:	f00a f80e 	bl	daec <cosem_setArray>
    3ad0:	4604      	mov	r4, r0
    3ad2:	2800      	cmp	r0, #0
    3ad4:	d045      	beq.n	3b62 <cosem_getPppSetup+0xc2>
    else
    {
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    return ret;
}
    3ad6:	4620      	mov	r0, r4
    3ad8:	b002      	add	sp, #8
    3ada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if ((ret = arr_getByIndex(&object->lcpOptions, pos, (void**)&lcpItem)) != 0 ||
    3ade:	aa01      	add	r2, sp, #4
    3ae0:	4640      	mov	r0, r8
    3ae2:	f00c fc50 	bl	10386 <arr_getByIndex>
    3ae6:	4604      	mov	r4, r0
    3ae8:	2800      	cmp	r0, #0
    3aea:	d1f4      	bne.n	3ad6 <cosem_getPppSetup+0x36>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    3aec:	2102      	movs	r1, #2
    3aee:	4628      	mov	r0, r5
    3af0:	f009 f8e1 	bl	ccb6 <bb_setUInt8>
                if ((ret = arr_getByIndex(&object->lcpOptions, pos, (void**)&lcpItem)) != 0 ||
    3af4:	4604      	mov	r4, r0
    3af6:	2800      	cmp	r0, #0
    3af8:	d1ed      	bne.n	3ad6 <cosem_getPppSetup+0x36>
                    (ret = bb_setUInt8(data, 3)) != 0 ||
    3afa:	2103      	movs	r1, #3
    3afc:	4628      	mov	r0, r5
    3afe:	f009 f8da 	bl	ccb6 <bb_setUInt8>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    3b02:	4604      	mov	r4, r0
    3b04:	2800      	cmp	r0, #0
    3b06:	d1e6      	bne.n	3ad6 <cosem_getPppSetup+0x36>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
    3b08:	2111      	movs	r1, #17
    3b0a:	4628      	mov	r0, r5
    3b0c:	f009 f8d3 	bl	ccb6 <bb_setUInt8>
                    (ret = bb_setUInt8(data, 3)) != 0 ||
    3b10:	4604      	mov	r4, r0
    3b12:	2800      	cmp	r0, #0
    3b14:	d1df      	bne.n	3ad6 <cosem_getPppSetup+0x36>
                    (ret = bb_setUInt8(data, lcpItem->type)) != 0 ||
    3b16:	9b01      	ldr	r3, [sp, #4]
    3b18:	4628      	mov	r0, r5
    3b1a:	7819      	ldrb	r1, [r3, #0]
    3b1c:	f009 f8cb 	bl	ccb6 <bb_setUInt8>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
    3b20:	4604      	mov	r4, r0
    3b22:	2800      	cmp	r0, #0
    3b24:	d1d7      	bne.n	3ad6 <cosem_getPppSetup+0x36>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
    3b26:	2111      	movs	r1, #17
    3b28:	4628      	mov	r0, r5
    3b2a:	f009 f8c4 	bl	ccb6 <bb_setUInt8>
                    (ret = bb_setUInt8(data, lcpItem->type)) != 0 ||
    3b2e:	4604      	mov	r4, r0
    3b30:	2800      	cmp	r0, #0
    3b32:	d1d0      	bne.n	3ad6 <cosem_getPppSetup+0x36>
                    (ret = bb_setUInt8(data, (unsigned char)lcpItem->length)) != 0 ||
    3b34:	9b01      	ldr	r3, [sp, #4]
    3b36:	4628      	mov	r0, r5
    3b38:	7859      	ldrb	r1, [r3, #1]
    3b3a:	f009 f8bc 	bl	ccb6 <bb_setUInt8>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
    3b3e:	4604      	mov	r4, r0
    3b40:	2800      	cmp	r0, #0
    3b42:	d1c8      	bne.n	3ad6 <cosem_getPppSetup+0x36>
                    (ret = var_getBytes(&lcpItem->data, data)) != 0)
    3b44:	9801      	ldr	r0, [sp, #4]
    3b46:	4629      	mov	r1, r5
    3b48:	3008      	adds	r0, #8
    3b4a:	f016 fcea 	bl	1a522 <var_getBytes>
    3b4e:	3701      	adds	r7, #1
                    (ret = bb_setUInt8(data, (unsigned char)lcpItem->length)) != 0 ||
    3b50:	4604      	mov	r4, r0
    3b52:	2800      	cmp	r0, #0
    3b54:	d1bf      	bne.n	3ad6 <cosem_getPppSetup+0x36>
            for (pos = 0; pos != object->lcpOptions.size; ++pos)
    3b56:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
    3b58:	b2b9      	uxth	r1, r7
    3b5a:	428b      	cmp	r3, r1
    3b5c:	d1bf      	bne.n	3ade <cosem_getPppSetup+0x3e>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    3b5e:	2400      	movs	r4, #0
    3b60:	e7b9      	b.n	3ad6 <cosem_getPppSetup+0x36>
    3b62:	4607      	mov	r7, r0
                if ((ret = arr_getByIndex(&object->lcpOptions, pos, (void**)&lcpItem)) != 0 ||
    3b64:	f106 0820 	add.w	r8, r6, #32
    3b68:	e7f5      	b.n	3b56 <cosem_getPppSetup+0xb6>
    else if (e->index == 4)
    3b6a:	2b04      	cmp	r3, #4
    3b6c:	d14e      	bne.n	3c0c <cosem_getPppSetup+0x16c>
        if ((ret = cosem_setArray(data, object->ipcpOptions.size)) == 0)
    3b6e:	8af1      	ldrh	r1, [r6, #22]
    3b70:	4628      	mov	r0, r5
    3b72:	f009 ffbb 	bl	daec <cosem_setArray>
    3b76:	4604      	mov	r4, r0
    3b78:	2800      	cmp	r0, #0
    3b7a:	d1ac      	bne.n	3ad6 <cosem_getPppSetup+0x36>
    3b7c:	4607      	mov	r7, r0
                if ((ret = arr_getByIndex(&object->ipcpOptions, pos, (void**)&ipcpItem)) != 0 ||
    3b7e:	f106 0810 	add.w	r8, r6, #16
    3b82:	e03e      	b.n	3c02 <cosem_getPppSetup+0x162>
    3b84:	aa01      	add	r2, sp, #4
    3b86:	4640      	mov	r0, r8
    3b88:	f00c fbfd 	bl	10386 <arr_getByIndex>
    3b8c:	4604      	mov	r4, r0
    3b8e:	2800      	cmp	r0, #0
    3b90:	d1a1      	bne.n	3ad6 <cosem_getPppSetup+0x36>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    3b92:	2102      	movs	r1, #2
    3b94:	4628      	mov	r0, r5
    3b96:	f009 f88e 	bl	ccb6 <bb_setUInt8>
                if ((ret = arr_getByIndex(&object->ipcpOptions, pos, (void**)&ipcpItem)) != 0 ||
    3b9a:	4604      	mov	r4, r0
    3b9c:	2800      	cmp	r0, #0
    3b9e:	d19a      	bne.n	3ad6 <cosem_getPppSetup+0x36>
                    (ret = bb_setUInt8(data, 3)) != 0 ||
    3ba0:	2103      	movs	r1, #3
    3ba2:	4628      	mov	r0, r5
    3ba4:	f009 f887 	bl	ccb6 <bb_setUInt8>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    3ba8:	4604      	mov	r4, r0
    3baa:	2800      	cmp	r0, #0
    3bac:	d193      	bne.n	3ad6 <cosem_getPppSetup+0x36>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
    3bae:	2111      	movs	r1, #17
    3bb0:	4628      	mov	r0, r5
    3bb2:	f009 f880 	bl	ccb6 <bb_setUInt8>
                    (ret = bb_setUInt8(data, 3)) != 0 ||
    3bb6:	4604      	mov	r4, r0
    3bb8:	2800      	cmp	r0, #0
    3bba:	d18c      	bne.n	3ad6 <cosem_getPppSetup+0x36>
                    (ret = bb_setUInt8(data, ipcpItem->type)) != 0 ||
    3bbc:	9b01      	ldr	r3, [sp, #4]
    3bbe:	4628      	mov	r0, r5
    3bc0:	7819      	ldrb	r1, [r3, #0]
    3bc2:	f009 f878 	bl	ccb6 <bb_setUInt8>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
    3bc6:	4604      	mov	r4, r0
    3bc8:	2800      	cmp	r0, #0
    3bca:	d184      	bne.n	3ad6 <cosem_getPppSetup+0x36>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
    3bcc:	2111      	movs	r1, #17
    3bce:	4628      	mov	r0, r5
    3bd0:	f009 f871 	bl	ccb6 <bb_setUInt8>
                    (ret = bb_setUInt8(data, ipcpItem->type)) != 0 ||
    3bd4:	4604      	mov	r4, r0
    3bd6:	2800      	cmp	r0, #0
    3bd8:	f47f af7d 	bne.w	3ad6 <cosem_getPppSetup+0x36>
                    (ret = bb_setUInt8(data, (unsigned char)ipcpItem->length)) != 0 ||
    3bdc:	9b01      	ldr	r3, [sp, #4]
    3bde:	4628      	mov	r0, r5
    3be0:	7859      	ldrb	r1, [r3, #1]
    3be2:	f009 f868 	bl	ccb6 <bb_setUInt8>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
    3be6:	4604      	mov	r4, r0
    3be8:	2800      	cmp	r0, #0
    3bea:	f47f af74 	bne.w	3ad6 <cosem_getPppSetup+0x36>
                    (ret = var_getBytes(&ipcpItem->data, data)) != 0)
    3bee:	9801      	ldr	r0, [sp, #4]
    3bf0:	4629      	mov	r1, r5
    3bf2:	3008      	adds	r0, #8
    3bf4:	f016 fc95 	bl	1a522 <var_getBytes>
    3bf8:	3701      	adds	r7, #1
                    (ret = bb_setUInt8(data, (unsigned char)ipcpItem->length)) != 0 ||
    3bfa:	4604      	mov	r4, r0
    3bfc:	2800      	cmp	r0, #0
    3bfe:	f47f af6a 	bne.w	3ad6 <cosem_getPppSetup+0x36>
            for (pos = 0; pos != object->ipcpOptions.size; ++pos)
    3c02:	8af3      	ldrh	r3, [r6, #22]
    3c04:	b2b9      	uxth	r1, r7
    3c06:	428b      	cmp	r3, r1
    3c08:	d1bc      	bne.n	3b84 <cosem_getPppSetup+0xe4>
    3c0a:	e7a8      	b.n	3b5e <cosem_getPppSetup+0xbe>
    else if (e->index == 5)
    3c0c:	2b05      	cmp	r3, #5
    3c0e:	d152      	bne.n	3cb6 <cosem_getPppSetup+0x216>
        if (bb_size(&object->userName) == 0)
    3c10:	f106 072c 	add.w	r7, r6, #44	; 0x2c
    3c14:	4638      	mov	r0, r7
    3c16:	f008 ffe2 	bl	cbde <bb_size>
    3c1a:	4601      	mov	r1, r0
    3c1c:	b918      	cbnz	r0, 3c26 <cosem_getPppSetup+0x186>
            ret = bb_setUInt8(data, DLMS_DATA_TYPE_NONE);
    3c1e:	4628      	mov	r0, r5
    3c20:	f009 f849 	bl	ccb6 <bb_setUInt8>
    3c24:	e74a      	b.n	3abc <cosem_getPppSetup+0x1c>
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    3c26:	2102      	movs	r1, #2
    3c28:	4628      	mov	r0, r5
    3c2a:	f009 f844 	bl	ccb6 <bb_setUInt8>
    3c2e:	4604      	mov	r4, r0
    3c30:	2800      	cmp	r0, #0
    3c32:	f47f af50 	bne.w	3ad6 <cosem_getPppSetup+0x36>
                (ret = bb_setUInt8(data, 2)) != 0 ||
    3c36:	2102      	movs	r1, #2
    3c38:	4628      	mov	r0, r5
    3c3a:	f009 f83c 	bl	ccb6 <bb_setUInt8>
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    3c3e:	4604      	mov	r4, r0
    3c40:	2800      	cmp	r0, #0
    3c42:	f47f af48 	bne.w	3ad6 <cosem_getPppSetup+0x36>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    3c46:	2109      	movs	r1, #9
    3c48:	4628      	mov	r0, r5
    3c4a:	f009 f834 	bl	ccb6 <bb_setUInt8>
                (ret = bb_setUInt8(data, 2)) != 0 ||
    3c4e:	4604      	mov	r4, r0
    3c50:	2800      	cmp	r0, #0
    3c52:	f47f af40 	bne.w	3ad6 <cosem_getPppSetup+0x36>
                (ret = hlp_setObjectCount(object->userName.size, data)) != 0 ||
    3c56:	8e70      	ldrh	r0, [r6, #50]	; 0x32
    3c58:	4629      	mov	r1, r5
    3c5a:	f015 fe1b 	bl	19894 <hlp_setObjectCount>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    3c5e:	4604      	mov	r4, r0
    3c60:	2800      	cmp	r0, #0
    3c62:	f47f af38 	bne.w	3ad6 <cosem_getPppSetup+0x36>
                (ret = bb_set2(data, &object->userName, 0, bb_size(&object->userName))) != 0 ||
    3c66:	4638      	mov	r0, r7
    3c68:	f008 ffb9 	bl	cbde <bb_size>
    3c6c:	4622      	mov	r2, r4
    3c6e:	4603      	mov	r3, r0
    3c70:	4639      	mov	r1, r7
    3c72:	4628      	mov	r0, r5
    3c74:	f009 f934 	bl	cee0 <bb_set2>
                (ret = hlp_setObjectCount(object->userName.size, data)) != 0 ||
    3c78:	4604      	mov	r4, r0
    3c7a:	2800      	cmp	r0, #0
    3c7c:	f47f af2b 	bne.w	3ad6 <cosem_getPppSetup+0x36>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    3c80:	2109      	movs	r1, #9
    3c82:	4628      	mov	r0, r5
    3c84:	f009 f817 	bl	ccb6 <bb_setUInt8>
                (ret = bb_set2(data, &object->userName, 0, bb_size(&object->userName))) != 0 ||
    3c88:	4604      	mov	r4, r0
    3c8a:	2800      	cmp	r0, #0
    3c8c:	f47f af23 	bne.w	3ad6 <cosem_getPppSetup+0x36>
                (ret = hlp_setObjectCount(object->password.size, data)) != 0 ||
    3c90:	8ff0      	ldrh	r0, [r6, #62]	; 0x3e
    3c92:	4629      	mov	r1, r5
    3c94:	f015 fdfe 	bl	19894 <hlp_setObjectCount>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    3c98:	4604      	mov	r4, r0
    3c9a:	2800      	cmp	r0, #0
    3c9c:	f47f af1b 	bne.w	3ad6 <cosem_getPppSetup+0x36>
                (ret = bb_set2(data, &object->password, 0, bb_size(&object->password))) != 0)
    3ca0:	3638      	adds	r6, #56	; 0x38
    3ca2:	4630      	mov	r0, r6
    3ca4:	f008 ff9b 	bl	cbde <bb_size>
    3ca8:	4622      	mov	r2, r4
    3caa:	4603      	mov	r3, r0
    3cac:	4631      	mov	r1, r6
    3cae:	4628      	mov	r0, r5
    3cb0:	f009 f916 	bl	cee0 <bb_set2>
    3cb4:	e702      	b.n	3abc <cosem_getPppSetup+0x1c>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    3cb6:	f44f 7481 	mov.w	r4, #258	; 0x102
    3cba:	e70c      	b.n	3ad6 <cosem_getPppSetup+0x36>
    3cbc:	0001d6ef 	.word	0x0001d6ef

00003cc0 <cosem_getParameterMonitor>:
#endif //DLMS_IGNORE_GSM_DIAGNOSTIC

#ifndef DLMS_IGNORE_PARAMETER_MONITOR
int cosem_getParameterMonitor(
    gxValueEventArg* e)
{
    3cc0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    int ret = 0;
    uint16_t pos;
    gxByteBuffer* data = e->value.byteArr;
    gxParameterMonitor* object = (gxParameterMonitor*)e->target;
    switch (e->index)
    3cc4:	7e01      	ldrb	r1, [r0, #24]
    gxByteBuffer* data = e->value.byteArr;
    3cc6:	6885      	ldr	r5, [r0, #8]
    gxParameterMonitor* object = (gxParameterMonitor*)e->target;
    3cc8:	6946      	ldr	r6, [r0, #20]
    switch (e->index)
    3cca:	2903      	cmp	r1, #3
    3ccc:	d047      	beq.n	3d5e <cosem_getParameterMonitor+0x9e>
    3cce:	2904      	cmp	r1, #4
    3cd0:	d04b      	beq.n	3d6a <cosem_getParameterMonitor+0xaa>
    3cd2:	2902      	cmp	r1, #2
    3cd4:	f040 8083 	bne.w	3dde <cosem_getParameterMonitor+0x11e>
    {
    case 2:
    {
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    3cd8:	4628      	mov	r0, r5
    3cda:	f008 ffec 	bl	ccb6 <bb_setUInt8>
    3cde:	4604      	mov	r4, r0
    3ce0:	2800      	cmp	r0, #0
    3ce2:	d149      	bne.n	3d78 <cosem_getParameterMonitor+0xb8>
            (ret = bb_setUInt8(data, 4)) != 0)
    3ce4:	2104      	movs	r1, #4
    3ce6:	4628      	mov	r0, r5
    3ce8:	f008 ffe5 	bl	ccb6 <bb_setUInt8>
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    3cec:	4604      	mov	r4, r0
    3cee:	2800      	cmp	r0, #0
    3cf0:	d142      	bne.n	3d78 <cosem_getParameterMonitor+0xb8>
        {
            return ret;
        }
#ifndef DLMS_IGNORE_OBJECT_POINTERS
        if (object->changedParameter.target == NULL)
    3cf2:	6933      	ldr	r3, [r6, #16]
    3cf4:	b9cb      	cbnz	r3, 3d2a <cosem_getParameterMonitor+0x6a>
        {
            if ((ret = cosem_setUInt16(data, 0)) != 0 ||
    3cf6:	4601      	mov	r1, r0
    3cf8:	4628      	mov	r0, r5
    3cfa:	f009 fe9c 	bl	da36 <cosem_setUInt16>
    3cfe:	4604      	mov	r4, r0
    3d00:	2800      	cmp	r0, #0
    3d02:	d139      	bne.n	3d78 <cosem_getParameterMonitor+0xb8>
                (ret = cosem_setOctetString2(data, EMPTY_LN, 6)) != 0 ||
    3d04:	4937      	ldr	r1, [pc, #220]	; (3de4 <cosem_getParameterMonitor+0x124>)
    3d06:	2206      	movs	r2, #6
    3d08:	4628      	mov	r0, r5
    3d0a:	f009 fe65 	bl	d9d8 <cosem_setOctetString2>
            if ((ret = cosem_setUInt16(data, 0)) != 0 ||
    3d0e:	4604      	mov	r4, r0
    3d10:	bb90      	cbnz	r0, 3d78 <cosem_getParameterMonitor+0xb8>
                (ret = cosem_setInt8(data, 0)) != 0 ||
    3d12:	4601      	mov	r1, r0
    3d14:	4628      	mov	r0, r5
    3d16:	f009 feaa 	bl	da6e <cosem_setInt8>
                (ret = cosem_setOctetString2(data, EMPTY_LN, 6)) != 0 ||
    3d1a:	4604      	mov	r4, r0
    3d1c:	bb60      	cbnz	r0, 3d78 <cosem_getParameterMonitor+0xb8>
                (ret = bb_setUInt8(data, 0)) != 0)
    3d1e:	4601      	mov	r1, r0
    3d20:	4628      	mov	r0, r5
    3d22:	f008 ffc8 	bl	ccb6 <bb_setUInt8>
                    //Type.
                    (ret = cosem_setUInt16(data, ((gxObject*)it->key)->objectType)) != 0 ||
                    //LN
                    (ret = cosem_setOctetString2(data, ((gxObject*)it->key)->logicalName, 6)) != 0 ||
                    //attributeIndex
                    (ret = cosem_setInt8(data, ((gxTarget*)it->value)->attributeIndex)) != 0)
    3d26:	4604      	mov	r4, r0
                }
#endif //DLMS_IGNORE_MALLOC
            }
        }
    }
    break;
    3d28:	e026      	b.n	3d78 <cosem_getParameterMonitor+0xb8>
            if ((ret = cosem_setUInt16(data, object->changedParameter.target->objectType)) != 0 ||
    3d2a:	8819      	ldrh	r1, [r3, #0]
    3d2c:	4628      	mov	r0, r5
    3d2e:	f009 fe82 	bl	da36 <cosem_setUInt16>
    3d32:	4604      	mov	r4, r0
    3d34:	bb00      	cbnz	r0, 3d78 <cosem_getParameterMonitor+0xb8>
                (ret = cosem_setOctetString2(data, object->changedParameter.target->logicalName, 6)) != 0 ||
    3d36:	6931      	ldr	r1, [r6, #16]
    3d38:	2206      	movs	r2, #6
    3d3a:	4411      	add	r1, r2
    3d3c:	4628      	mov	r0, r5
    3d3e:	f009 fe4b 	bl	d9d8 <cosem_setOctetString2>
            if ((ret = cosem_setUInt16(data, object->changedParameter.target->objectType)) != 0 ||
    3d42:	4604      	mov	r4, r0
    3d44:	b9c0      	cbnz	r0, 3d78 <cosem_getParameterMonitor+0xb8>
                (ret = cosem_setInt8(data, object->changedParameter.attributeIndex)) != 0 ||
    3d46:	7d31      	ldrb	r1, [r6, #20]
    3d48:	4628      	mov	r0, r5
    3d4a:	f009 fe90 	bl	da6e <cosem_setInt8>
                (ret = cosem_setOctetString2(data, object->changedParameter.target->logicalName, 6)) != 0 ||
    3d4e:	4604      	mov	r4, r0
    3d50:	b990      	cbnz	r0, 3d78 <cosem_getParameterMonitor+0xb8>
                (ret = cosem_setVariant(data, &object->changedParameter.value)) != 0)
    3d52:	f106 0118 	add.w	r1, r6, #24
    3d56:	4628      	mov	r0, r5
    3d58:	f009 feb3 	bl	dac2 <cosem_setVariant>
    3d5c:	e7e3      	b.n	3d26 <cosem_getParameterMonitor+0x66>
        ret = cosem_setDateTimeAsOctetString(e->value.byteArr, &object->captureTime);
    3d5e:	f106 0128 	add.w	r1, r6, #40	; 0x28
    3d62:	4628      	mov	r0, r5
    3d64:	f009 fd66 	bl	d834 <cosem_setDateTimeAsOctetString>
    3d68:	e7dd      	b.n	3d26 <cosem_getParameterMonitor+0x66>
        if ((ret = cosem_setArray(data, object->parameters.size)) == 0)
    3d6a:	8f71      	ldrh	r1, [r6, #58]	; 0x3a
    3d6c:	4628      	mov	r0, r5
    3d6e:	f009 febd 	bl	daec <cosem_setArray>
    3d72:	4604      	mov	r4, r0
    3d74:	2800      	cmp	r0, #0
    3d76:	d02e      	beq.n	3dd6 <cosem_getParameterMonitor+0x116>
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
    3d78:	4620      	mov	r0, r4
    3d7a:	b002      	add	sp, #8
    3d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if ((ret = arr_getByIndex(&object->parameters, pos, (void**)&it)) != 0 ||
    3d80:	aa01      	add	r2, sp, #4
    3d82:	4640      	mov	r0, r8
    3d84:	f00c faff 	bl	10386 <arr_getByIndex>
    3d88:	2800      	cmp	r0, #0
    3d8a:	d1cc      	bne.n	3d26 <cosem_getParameterMonitor+0x66>
                    (ret = cosem_setStructure(data, 3)) != 0 ||
    3d8c:	2103      	movs	r1, #3
    3d8e:	4628      	mov	r0, r5
    3d90:	f009 fe9e 	bl	dad0 <cosem_setStructure>
                if ((ret = arr_getByIndex(&object->parameters, pos, (void**)&it)) != 0 ||
    3d94:	2800      	cmp	r0, #0
    3d96:	d1c6      	bne.n	3d26 <cosem_getParameterMonitor+0x66>
                    (ret = cosem_setUInt16(data, ((gxObject*)it->key)->objectType)) != 0 ||
    3d98:	9b01      	ldr	r3, [sp, #4]
    3d9a:	681b      	ldr	r3, [r3, #0]
    3d9c:	4628      	mov	r0, r5
    3d9e:	8819      	ldrh	r1, [r3, #0]
    3da0:	f009 fe49 	bl	da36 <cosem_setUInt16>
                    (ret = cosem_setStructure(data, 3)) != 0 ||
    3da4:	2800      	cmp	r0, #0
    3da6:	d1be      	bne.n	3d26 <cosem_getParameterMonitor+0x66>
                    (ret = cosem_setOctetString2(data, ((gxObject*)it->key)->logicalName, 6)) != 0 ||
    3da8:	9b01      	ldr	r3, [sp, #4]
    3daa:	6819      	ldr	r1, [r3, #0]
    3dac:	2206      	movs	r2, #6
    3dae:	4411      	add	r1, r2
    3db0:	4628      	mov	r0, r5
    3db2:	f009 fe11 	bl	d9d8 <cosem_setOctetString2>
                    (ret = cosem_setUInt16(data, ((gxObject*)it->key)->objectType)) != 0 ||
    3db6:	2800      	cmp	r0, #0
    3db8:	d1b5      	bne.n	3d26 <cosem_getParameterMonitor+0x66>
                    (ret = cosem_setInt8(data, ((gxTarget*)it->value)->attributeIndex)) != 0)
    3dba:	9b01      	ldr	r3, [sp, #4]
    3dbc:	685b      	ldr	r3, [r3, #4]
    3dbe:	4628      	mov	r0, r5
    3dc0:	7819      	ldrb	r1, [r3, #0]
    3dc2:	f009 fe54 	bl	da6e <cosem_setInt8>
    3dc6:	3701      	adds	r7, #1
                    (ret = cosem_setOctetString2(data, ((gxObject*)it->key)->logicalName, 6)) != 0 ||
    3dc8:	2800      	cmp	r0, #0
    3dca:	d1ac      	bne.n	3d26 <cosem_getParameterMonitor+0x66>
            for (pos = 0; pos != object->parameters.size; ++pos)
    3dcc:	8f73      	ldrh	r3, [r6, #58]	; 0x3a
    3dce:	b2b9      	uxth	r1, r7
    3dd0:	428b      	cmp	r3, r1
    3dd2:	d1d5      	bne.n	3d80 <cosem_getParameterMonitor+0xc0>
    3dd4:	e7d0      	b.n	3d78 <cosem_getParameterMonitor+0xb8>
    3dd6:	4607      	mov	r7, r0
                if ((ret = arr_getByIndex(&object->parameters, pos, (void**)&it)) != 0 ||
    3dd8:	f106 0834 	add.w	r8, r6, #52	; 0x34
    3ddc:	e7f6      	b.n	3dcc <cosem_getParameterMonitor+0x10c>
    switch (e->index)
    3dde:	f44f 7481 	mov.w	r4, #258	; 0x102
    3de2:	e7c9      	b.n	3d78 <cosem_getParameterMonitor+0xb8>
    3de4:	0001d6ef 	.word	0x0001d6ef

00003de8 <obj_getLogicalName>:
#include "../include/gxobjects.h"
#include "../include/objectarray.h"

const unsigned char* obj_getLogicalName(gxObject* target)
{
    if (target == NULL)
    3de8:	b108      	cbz	r0, 3dee <obj_getLogicalName+0x6>
    {
        return EMPTY_LN;
    }
    return target->logicalName;
    3dea:	3006      	adds	r0, #6
    3dec:	4770      	bx	lr
        return EMPTY_LN;
    3dee:	4801      	ldr	r0, [pc, #4]	; (3df4 <obj_getLogicalName+0xc>)
}
    3df0:	4770      	bx	lr
    3df2:	bf00      	nop
    3df4:	0001d6f5 	.word	0x0001d6f5

00003df8 <cosem_setProfileGeneric>:
int cosem_setProfileGeneric(
    dlmsSettings* settings,
    gxProfileGeneric* object,
    unsigned char index,
    dlmsVARIANT* value)
{
    3df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret = 0;
    uint16_t pos, pos2;
    DLMS_OBJECT_TYPE type;
    dlmsVARIANT* tmp, * row, * data;
    variantArray* va;
    if (index == 2)
    3dfc:	2a02      	cmp	r2, #2
{
    3dfe:	b08b      	sub	sp, #44	; 0x2c
    3e00:	4680      	mov	r8, r0
    3e02:	460c      	mov	r4, r1
    3e04:	461e      	mov	r6, r3
    if (index == 2)
    3e06:	f040 80e5 	bne.w	3fd4 <cosem_setProfileGeneric+0x1dc>
    {
        static unsigned char UNIX_TIME[6] = { 0, 0, 1, 1, 0, 255 };
        if (object->captureObjects.size == 0)
    3e0a:	8c4b      	ldrh	r3, [r1, #34]	; 0x22
    3e0c:	b92b      	cbnz	r3, 3e1a <cosem_setProfileGeneric+0x22>
                    {
                        uint16_t cCount = row->Arr->size;
                        if (cCount > object->captureObjects.size)
                        {
                            //Number of columns do not match.
                            return DLMS_ERROR_CODE_INVALID_PARAMETER;
    3e0e:	f44f 7281 	mov.w	r2, #258	; 0x102
    else
    {
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    return ret;
}
    3e12:	4610      	mov	r0, r2
    3e14:	b00b      	add	sp, #44	; 0x2c
    3e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((ret = obj_clearProfileGenericBuffer(&object->buffer)) == 0)
    3e1a:	f101 0710 	add.w	r7, r1, #16
    3e1e:	4638      	mov	r0, r7
    3e20:	f00f fd86 	bl	13930 <obj_clearProfileGenericBuffer>
    3e24:	4605      	mov	r5, r0
    3e26:	bb40      	cbnz	r0, 3e7a <cosem_setProfileGeneric+0x82>
            if (value->vt == DLMS_DATA_TYPE_OCTET_STRING)
    3e28:	7833      	ldrb	r3, [r6, #0]
    3e2a:	2b09      	cmp	r3, #9
    3e2c:	d125      	bne.n	3e7a <cosem_setProfileGeneric+0x82>
                uint16_t rIndex, rCount = arr_getCapacity(&object->buffer);
    3e2e:	4638      	mov	r0, r7
    3e30:	f00c fa42 	bl	102b8 <arr_getCapacity>
                if ((ret = cosem_checkArray(value->byteArr, &rCount)) == 0)
    3e34:	a905      	add	r1, sp, #20
                uint16_t rIndex, rCount = arr_getCapacity(&object->buffer);
    3e36:	f8ad 0014 	strh.w	r0, [sp, #20]
                if ((ret = cosem_checkArray(value->byteArr, &rCount)) == 0)
    3e3a:	68b0      	ldr	r0, [r6, #8]
    3e3c:	f009 fccf 	bl	d7de <cosem_checkArray>
    3e40:	4605      	mov	r5, r0
    3e42:	b9d0      	cbnz	r0, 3e7a <cosem_setProfileGeneric+0x82>
                    object->buffer.size = rCount;
    3e44:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    3e48:	82e3      	strh	r3, [r4, #22]
                    if (rCount != 0 && (ret = arr_getByIndex(&object->buffer, 0, (void**)&row)) == 0)
    3e4a:	b1b3      	cbz	r3, 3e7a <cosem_setProfileGeneric+0x82>
    3e4c:	4601      	mov	r1, r0
    3e4e:	aa06      	add	r2, sp, #24
    3e50:	4638      	mov	r0, r7
    3e52:	f00c fa98 	bl	10386 <arr_getByIndex>
    3e56:	2800      	cmp	r0, #0
    3e58:	d138      	bne.n	3ecc <cosem_setProfileGeneric+0xd4>
                        uint16_t cCount = row->Arr->size;
    3e5a:	9b06      	ldr	r3, [sp, #24]
    3e5c:	689b      	ldr	r3, [r3, #8]
    3e5e:	f8b3 9006 	ldrh.w	r9, [r3, #6]
                        if (cCount > object->captureObjects.size)
    3e62:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    3e64:	454b      	cmp	r3, r9
    3e66:	d3d2      	bcc.n	3e0e <cosem_setProfileGeneric+0x16>
    3e68:	46aa      	mov	sl, r5
                                (ret = cosem_checkStructure(value->byteArr, (unsigned char)cCount)) != 0)
    3e6a:	fa5f f989 	uxtb.w	r9, r9
                        for (rIndex = 0; rIndex != rCount; ++rIndex)
    3e6e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    3e72:	fa1f f18a 	uxth.w	r1, sl
    3e76:	428b      	cmp	r3, r1
    3e78:	d11b      	bne.n	3eb2 <cosem_setProfileGeneric+0xba>
        if (value->vt == DLMS_DATA_TYPE_ARRAY)
    3e7a:	7833      	ldrb	r3, [r6, #0]
    3e7c:	2b01      	cmp	r3, #1
    3e7e:	d10e      	bne.n	3e9e <cosem_setProfileGeneric+0xa6>
            arr_capacity(&object->buffer, value->Arr->size);
    3e80:	68b3      	ldr	r3, [r6, #8]
                            memcmp(obj->logicalName, UNIX_TIME, 6) == 0)
    3e82:	f8df b290 	ldr.w	fp, [pc, #656]	; 4114 <cosem_setProfileGeneric+0x31c>
            arr_capacity(&object->buffer, value->Arr->size);
    3e86:	88d9      	ldrh	r1, [r3, #6]
    3e88:	4638      	mov	r0, r7
    3e8a:	f00c fa19 	bl	102c0 <arr_capacity>
            for (pos = 0; pos != value->Arr->size; ++pos)
    3e8e:	f04f 0900 	mov.w	r9, #0
    3e92:	68b0      	ldr	r0, [r6, #8]
    3e94:	88c2      	ldrh	r2, [r0, #6]
    3e96:	fa1f f389 	uxth.w	r3, r9
    3e9a:	429a      	cmp	r2, r3
    3e9c:	d118      	bne.n	3ed0 <cosem_setProfileGeneric+0xd8>
        if (settings->server)
    3e9e:	f898 3058 	ldrb.w	r3, [r8, #88]	; 0x58
    3ea2:	8ae1      	ldrh	r1, [r4, #22]
    3ea4:	b103      	cbz	r3, 3ea8 <cosem_setProfileGeneric+0xb0>
            object->entriesInUse = object->buffer.size;
    3ea6:	63a1      	str	r1, [r4, #56]	; 0x38
        arr_capacity(&object->buffer, object->buffer.size);
    3ea8:	4638      	mov	r0, r7
    3eaa:	f00c fa09 	bl	102c0 <arr_capacity>
                ret = va_getByIndex(value->Arr, pos, &row);
    3eae:	462a      	mov	r2, r5
    3eb0:	e7af      	b.n	3e12 <cosem_setProfileGeneric+0x1a>
                            if ((ret = arr_getByIndex(&object->buffer, rIndex, (void**)&row)) != 0 ||
    3eb2:	aa06      	add	r2, sp, #24
    3eb4:	4638      	mov	r0, r7
    3eb6:	f00c fa66 	bl	10386 <arr_getByIndex>
    3eba:	b938      	cbnz	r0, 3ecc <cosem_setProfileGeneric+0xd4>
                                (ret = cosem_checkStructure(value->byteArr, (unsigned char)cCount)) != 0)
    3ebc:	68b0      	ldr	r0, [r6, #8]
    3ebe:	4649      	mov	r1, r9
    3ec0:	f009 fc5e 	bl	d780 <cosem_checkStructure>
    3ec4:	f10a 0a01 	add.w	sl, sl, #1
                            if ((ret = arr_getByIndex(&object->buffer, rIndex, (void**)&row)) != 0 ||
    3ec8:	2800      	cmp	r0, #0
    3eca:	d0d0      	beq.n	3e6e <cosem_setProfileGeneric+0x76>
                                (ret = cosem_checkStructure(value->byteArr, (unsigned char)cCount)) != 0)
    3ecc:	4605      	mov	r5, r0
    3ece:	e7d4      	b.n	3e7a <cosem_setProfileGeneric+0x82>
                ret = va_getByIndex(value->Arr, pos, &row);
    3ed0:	aa03      	add	r2, sp, #12
    3ed2:	fa1f f189 	uxth.w	r1, r9
    3ed6:	f016 f9e4 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
    3eda:	4605      	mov	r5, r0
    3edc:	2800      	cmp	r0, #0
    3ede:	d1e6      	bne.n	3eae <cosem_setProfileGeneric+0xb6>
                if (row->Arr->size != object->captureObjects.size)
    3ee0:	9b03      	ldr	r3, [sp, #12]
    3ee2:	689b      	ldr	r3, [r3, #8]
    3ee4:	88da      	ldrh	r2, [r3, #6]
    3ee6:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    3ee8:	429a      	cmp	r2, r3
    3eea:	d190      	bne.n	3e0e <cosem_setProfileGeneric+0x16>
    3eec:	4682      	mov	sl, r0
                for (pos2 = 0; pos2 < row->Arr->size; ++pos2)
    3eee:	9a03      	ldr	r2, [sp, #12]
    3ef0:	6890      	ldr	r0, [r2, #8]
    3ef2:	88c2      	ldrh	r2, [r0, #6]
    3ef4:	fa1f f38a 	uxth.w	r3, sl
    3ef8:	429a      	cmp	r2, r3
    3efa:	d811      	bhi.n	3f20 <cosem_setProfileGeneric+0x128>
                va = (variantArray*)gxmalloc(sizeof(variantArray));
    3efc:	2008      	movs	r0, #8
    3efe:	f007 fe59 	bl	bbb4 <malloc>
    3f02:	4682      	mov	sl, r0
                va_init(va);
    3f04:	f016 f8d5 	bl	1a0b2 <va_init>
                va_attach2(va, row->Arr);
    3f08:	9b03      	ldr	r3, [sp, #12]
    3f0a:	4650      	mov	r0, sl
    3f0c:	6899      	ldr	r1, [r3, #8]
    3f0e:	f016 f9be 	bl	1a28e <va_attach2>
                arr_push(&object->buffer, va);
    3f12:	4651      	mov	r1, sl
    3f14:	4638      	mov	r0, r7
    3f16:	f00c f9f9 	bl	1030c <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
    3f1a:	f109 0901 	add.w	r9, r9, #1
    3f1e:	e7b8      	b.n	3e92 <cosem_setProfileGeneric+0x9a>
                    ret = va_getByIndex(row->Arr, pos2, &data);
    3f20:	aa04      	add	r2, sp, #16
    3f22:	fa1f f18a 	uxth.w	r1, sl
    3f26:	9301      	str	r3, [sp, #4]
    3f28:	f016 f9bb 	bl	1a2a2 <va_getByIndex>
                    if (ret != DLMS_ERROR_CODE_OK)
    3f2c:	4602      	mov	r2, r0
    3f2e:	2800      	cmp	r0, #0
    3f30:	f47f af6f 	bne.w	3e12 <cosem_setProfileGeneric+0x1a>
                    if (data->vt == DLMS_DATA_TYPE_OCTET_STRING || data->vt == DLMS_DATA_TYPE_UINT32)
    3f34:	9a04      	ldr	r2, [sp, #16]
    3f36:	9b01      	ldr	r3, [sp, #4]
    3f38:	7812      	ldrb	r2, [r2, #0]
    3f3a:	2a09      	cmp	r2, #9
    3f3c:	d001      	beq.n	3f42 <cosem_setProfileGeneric+0x14a>
    3f3e:	2a06      	cmp	r2, #6
    3f40:	d12c      	bne.n	3f9c <cosem_setProfileGeneric+0x1a4>
                        if ((ret = arr_getByIndex(&object->captureObjects, pos2, (void**)&k)) != 0)
    3f42:	aa05      	add	r2, sp, #20
    3f44:	4619      	mov	r1, r3
    3f46:	f104 001c 	add.w	r0, r4, #28
    3f4a:	f00c fa1c 	bl	10386 <arr_getByIndex>
    3f4e:	4602      	mov	r2, r0
    3f50:	2800      	cmp	r0, #0
    3f52:	f47f af5e 	bne.w	3e12 <cosem_setProfileGeneric+0x1a>
                        if (data->vt == DLMS_DATA_TYPE_OCTET_STRING && obj->objectType == DLMS_OBJECT_TYPE_CLOCK && t->attributeIndex == 2)
    3f56:	9a04      	ldr	r2, [sp, #16]
                        obj = (gxObject*)k->key;
    3f58:	9b05      	ldr	r3, [sp, #20]
                        if (data->vt == DLMS_DATA_TYPE_OCTET_STRING && obj->objectType == DLMS_OBJECT_TYPE_CLOCK && t->attributeIndex == 2)
    3f5a:	7812      	ldrb	r2, [r2, #0]
    3f5c:	2a09      	cmp	r2, #9
                        t = (gxTarget*)k->value;
    3f5e:	e9d3 0300 	ldrd	r0, r3, [r3]
                        if (data->vt == DLMS_DATA_TYPE_OCTET_STRING && obj->objectType == DLMS_OBJECT_TYPE_CLOCK && t->attributeIndex == 2)
    3f62:	d11e      	bne.n	3fa2 <cosem_setProfileGeneric+0x1aa>
    3f64:	8802      	ldrh	r2, [r0, #0]
    3f66:	2a08      	cmp	r2, #8
    3f68:	d118      	bne.n	3f9c <cosem_setProfileGeneric+0x1a4>
    3f6a:	f993 3000 	ldrsb.w	r3, [r3]
    3f6e:	2b02      	cmp	r3, #2
    3f70:	d114      	bne.n	3f9c <cosem_setProfileGeneric+0x1a4>
                            var_init(&tmp3);
    3f72:	a806      	add	r0, sp, #24
    3f74:	f015 ffbb 	bl	19eee <var_init>
                            var_attach(&tmp3, data->byteArr);
    3f78:	9b04      	ldr	r3, [sp, #16]
    3f7a:	a806      	add	r0, sp, #24
    3f7c:	6899      	ldr	r1, [r3, #8]
    3f7e:	f016 fba9 	bl	1a6d4 <var_attach>
                            ret = dlms_changeType(tmp3.byteArr, DLMS_DATA_TYPE_DATETIME, data);
    3f82:	9a04      	ldr	r2, [sp, #16]
    3f84:	9808      	ldr	r0, [sp, #32]
    3f86:	2119      	movs	r1, #25
    3f88:	f00b feaf 	bl	fcea <dlms_changeType>
    3f8c:	9001      	str	r0, [sp, #4]
                            var_clear(&tmp3);
    3f8e:	a806      	add	r0, sp, #24
    3f90:	f016 f909 	bl	1a1a6 <var_clear>
                            if (ret != 0)
    3f94:	9a01      	ldr	r2, [sp, #4]
    3f96:	2a00      	cmp	r2, #0
    3f98:	f47f af3b 	bne.w	3e12 <cosem_setProfileGeneric+0x1a>
                for (pos2 = 0; pos2 < row->Arr->size; ++pos2)
    3f9c:	f10a 0a01 	add.w	sl, sl, #1
    3fa0:	e7a5      	b.n	3eee <cosem_setProfileGeneric+0xf6>
                        else if (data->vt == DLMS_DATA_TYPE_UINT32 && obj->objectType == DLMS_OBJECT_TYPE_DATA && t->attributeIndex == 2 &&
    3fa2:	2a06      	cmp	r2, #6
    3fa4:	d1fa      	bne.n	3f9c <cosem_setProfileGeneric+0x1a4>
    3fa6:	8801      	ldrh	r1, [r0, #0]
    3fa8:	2901      	cmp	r1, #1
    3faa:	d1f7      	bne.n	3f9c <cosem_setProfileGeneric+0x1a4>
    3fac:	f993 3000 	ldrsb.w	r3, [r3]
    3fb0:	2b02      	cmp	r3, #2
    3fb2:	d1f3      	bne.n	3f9c <cosem_setProfileGeneric+0x1a4>
                            memcmp(obj->logicalName, UNIX_TIME, 6) == 0)
    3fb4:	4659      	mov	r1, fp
    3fb6:	3006      	adds	r0, #6
    3fb8:	f018 f884 	bl	1c0c4 <memcmp>
                        else if (data->vt == DLMS_DATA_TYPE_UINT32 && obj->objectType == DLMS_OBJECT_TYPE_DATA && t->attributeIndex == 2 &&
    3fbc:	2800      	cmp	r0, #0
    3fbe:	d1ed      	bne.n	3f9c <cosem_setProfileGeneric+0x1a4>
                            time_initUnix(&tmp4, data->ulVal);
    3fc0:	9b04      	ldr	r3, [sp, #16]
    3fc2:	a806      	add	r0, sp, #24
    3fc4:	6899      	ldr	r1, [r3, #8]
    3fc6:	f009 fed5 	bl	dd74 <time_initUnix>
                            var_setDateTime(data, &tmp4);
    3fca:	9804      	ldr	r0, [sp, #16]
    3fcc:	a906      	add	r1, sp, #24
    3fce:	f016 faac 	bl	1a52a <var_setDateTime>
    3fd2:	e7e3      	b.n	3f9c <cosem_setProfileGeneric+0x1a4>
    else if (index == 3)
    3fd4:	2a03      	cmp	r2, #3
    3fd6:	d111      	bne.n	3ffc <cosem_setProfileGeneric+0x204>
        object->entriesInUse = 0;
    3fd8:	2300      	movs	r3, #0
    3fda:	638b      	str	r3, [r1, #56]	; 0x38
        ret = obj_clearProfileGenericBuffer(&object->buffer);
    3fdc:	f101 0010 	add.w	r0, r1, #16
    3fe0:	f00f fca6 	bl	13930 <obj_clearProfileGenericBuffer>
        if (ret == DLMS_ERROR_CODE_OK)
    3fe4:	4602      	mov	r2, r0
    3fe6:	2800      	cmp	r0, #0
    3fe8:	f47f af13 	bne.w	3e12 <cosem_setProfileGeneric+0x1a>
            ret = setCaptureObjects(settings, &object->captureObjects, value);
    3fec:	4632      	mov	r2, r6
    3fee:	f104 011c 	add.w	r1, r4, #28
    3ff2:	4640      	mov	r0, r8
    3ff4:	f014 f83e 	bl	18074 <setCaptureObjects>
    3ff8:	4602      	mov	r2, r0
    3ffa:	e70a      	b.n	3e12 <cosem_setProfileGeneric+0x1a>
    else if (index == 4)
    3ffc:	2a04      	cmp	r2, #4
    3ffe:	d105      	bne.n	400c <cosem_setProfileGeneric+0x214>
        object->capturePeriod = var_toInteger(value);
    4000:	4618      	mov	r0, r3
    4002:	f016 fac8 	bl	1a596 <var_toInteger>
    4006:	62a0      	str	r0, [r4, #40]	; 0x28
    int ret = 0;
    4008:	2200      	movs	r2, #0
    400a:	e702      	b.n	3e12 <cosem_setProfileGeneric+0x1a>
    else if (index == 5)
    400c:	2a05      	cmp	r2, #5
    400e:	d105      	bne.n	401c <cosem_setProfileGeneric+0x224>
        object->sortMethod = (DLMS_SORT_METHOD)var_toInteger(value);
    4010:	4618      	mov	r0, r3
    4012:	f016 fac0 	bl	1a596 <var_toInteger>
    4016:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    401a:	e7f5      	b.n	4008 <cosem_setProfileGeneric+0x210>
    else if (index == 6)
    401c:	2a06      	cmp	r2, #6
    401e:	d169      	bne.n	40f4 <cosem_setProfileGeneric+0x2fc>
        if (value->vt == DLMS_DATA_TYPE_NONE)
    4020:	781a      	ldrb	r2, [r3, #0]
    4022:	b90a      	cbnz	r2, 4028 <cosem_setProfileGeneric+0x230>
            object->sortObject = NULL;
    4024:	630a      	str	r2, [r1, #48]	; 0x30
    4026:	e6f4      	b.n	3e12 <cosem_setProfileGeneric+0x1a>
            if (value->Arr == NULL || value->Arr->size != 4)
    4028:	6898      	ldr	r0, [r3, #8]
    402a:	2800      	cmp	r0, #0
    402c:	f43f aeef 	beq.w	3e0e <cosem_setProfileGeneric+0x16>
    4030:	88c3      	ldrh	r3, [r0, #6]
    4032:	2b04      	cmp	r3, #4
    4034:	f47f aeeb 	bne.w	3e0e <cosem_setProfileGeneric+0x16>
            ret = va_getByIndex(value->Arr, 0, &tmp);
    4038:	aa06      	add	r2, sp, #24
    403a:	2100      	movs	r1, #0
    403c:	f016 f931 	bl	1a2a2 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
    4040:	4602      	mov	r2, r0
    4042:	2800      	cmp	r0, #0
    4044:	f47f aee5 	bne.w	3e12 <cosem_setProfileGeneric+0x1a>
            type = (DLMS_OBJECT_TYPE)var_toInteger(tmp);
    4048:	9806      	ldr	r0, [sp, #24]
    404a:	f016 faa4 	bl	1a596 <var_toInteger>
            ret = va_getByIndex(value->Arr, 1, &tmp);
    404e:	aa06      	add	r2, sp, #24
            type = (DLMS_OBJECT_TYPE)var_toInteger(tmp);
    4050:	4605      	mov	r5, r0
            ret = va_getByIndex(value->Arr, 1, &tmp);
    4052:	2101      	movs	r1, #1
    4054:	68b0      	ldr	r0, [r6, #8]
    4056:	f016 f924 	bl	1a2a2 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
    405a:	4602      	mov	r2, r0
    405c:	2800      	cmp	r0, #0
    405e:	f47f aed8 	bne.w	3e12 <cosem_setProfileGeneric+0x1a>
            object->sortObject = NULL;
    4062:	4627      	mov	r7, r4
    4064:	2300      	movs	r3, #0
    4066:	f847 3f30 	str.w	r3, [r7, #48]!
            ret = oa_findByLN(&settings->objects, type, tmp->byteArr->data, &object->sortObject);
    406a:	9b06      	ldr	r3, [sp, #24]
    406c:	689a      	ldr	r2, [r3, #8]
            type = (DLMS_OBJECT_TYPE)var_toInteger(tmp);
    406e:	b2ad      	uxth	r5, r5
            ret = oa_findByLN(&settings->objects, type, tmp->byteArr->data, &object->sortObject);
    4070:	6812      	ldr	r2, [r2, #0]
    4072:	463b      	mov	r3, r7
    4074:	4629      	mov	r1, r5
    4076:	f108 0098 	add.w	r0, r8, #152	; 0x98
    407a:	f015 fecf 	bl	19e1c <oa_findByLN>
            if (ret != DLMS_ERROR_CODE_OK)
    407e:	4602      	mov	r2, r0
    4080:	2800      	cmp	r0, #0
    4082:	f47f aec6 	bne.w	3e12 <cosem_setProfileGeneric+0x1a>
            if (object->sortObject == NULL)
    4086:	6b23      	ldr	r3, [r4, #48]	; 0x30
    4088:	b9b3      	cbnz	r3, 40b8 <cosem_setProfileGeneric+0x2c0>
                ret = cosem_createObject(type, &object->sortObject);
    408a:	4639      	mov	r1, r7
    408c:	4628      	mov	r0, r5
    408e:	f7fd fee7 	bl	1e60 <cosem_createObject>
                if (ret != DLMS_ERROR_CODE_OK)
    4092:	4602      	mov	r2, r0
    4094:	2800      	cmp	r0, #0
    4096:	f47f aebc 	bne.w	3e12 <cosem_setProfileGeneric+0x1a>
                ret = cosem_setLogicalName(object->sortObject, tmp->byteArr->data);
    409a:	9b06      	ldr	r3, [sp, #24]
    409c:	6b20      	ldr	r0, [r4, #48]	; 0x30
    409e:	689b      	ldr	r3, [r3, #8]
    40a0:	6819      	ldr	r1, [r3, #0]
    40a2:	f009 fb48 	bl	d736 <cosem_setLogicalName>
                if (ret != DLMS_ERROR_CODE_OK)
    40a6:	4602      	mov	r2, r0
    40a8:	2800      	cmp	r0, #0
    40aa:	f47f aeb2 	bne.w	3e12 <cosem_setProfileGeneric+0x1a>
                ret = oa_push(&settings->releasedObjects, object->sortObject);
    40ae:	6b21      	ldr	r1, [r4, #48]	; 0x30
    40b0:	f108 00e4 	add.w	r0, r8, #228	; 0xe4
    40b4:	f015 fe52 	bl	19d5c <oa_push>
            ret = va_getByIndex(value->Arr, 2, &tmp);
    40b8:	aa06      	add	r2, sp, #24
    40ba:	68b0      	ldr	r0, [r6, #8]
    40bc:	2102      	movs	r1, #2
    40be:	f016 f8f0 	bl	1a2a2 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
    40c2:	4602      	mov	r2, r0
    40c4:	2800      	cmp	r0, #0
    40c6:	f47f aea4 	bne.w	3e12 <cosem_setProfileGeneric+0x1a>
            object->sortObjectAttributeIndex = (char)var_toInteger(tmp);
    40ca:	9806      	ldr	r0, [sp, #24]
    40cc:	f016 fa63 	bl	1a596 <var_toInteger>
    40d0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
            ret = va_getByIndex(value->Arr, 3, &tmp);
    40d4:	aa06      	add	r2, sp, #24
    40d6:	68b0      	ldr	r0, [r6, #8]
    40d8:	2103      	movs	r1, #3
    40da:	f016 f8e2 	bl	1a2a2 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
    40de:	4602      	mov	r2, r0
    40e0:	2800      	cmp	r0, #0
    40e2:	f47f ae96 	bne.w	3e12 <cosem_setProfileGeneric+0x1a>
    40e6:	9001      	str	r0, [sp, #4]
            object->sortObjectDataIndex = (uint16_t)var_toInteger(tmp);
    40e8:	9806      	ldr	r0, [sp, #24]
    40ea:	f016 fa54 	bl	1a596 <var_toInteger>
    40ee:	9a01      	ldr	r2, [sp, #4]
    40f0:	87e0      	strh	r0, [r4, #62]	; 0x3e
    40f2:	e68e      	b.n	3e12 <cosem_setProfileGeneric+0x1a>
    else if (index == 7)
    40f4:	2a07      	cmp	r2, #7
    40f6:	d104      	bne.n	4102 <cosem_setProfileGeneric+0x30a>
        object->entriesInUse = var_toInteger(value);
    40f8:	4618      	mov	r0, r3
    40fa:	f016 fa4c 	bl	1a596 <var_toInteger>
    40fe:	63a0      	str	r0, [r4, #56]	; 0x38
    4100:	e782      	b.n	4008 <cosem_setProfileGeneric+0x210>
    else if (index == 8)
    4102:	2a08      	cmp	r2, #8
    4104:	f47f ae83 	bne.w	3e0e <cosem_setProfileGeneric+0x16>
        object->profileEntries = var_toInteger(value);
    4108:	4618      	mov	r0, r3
    410a:	f016 fa44 	bl	1a596 <var_toInteger>
    410e:	6360      	str	r0, [r4, #52]	; 0x34
    4110:	e77a      	b.n	4008 <cosem_setProfileGeneric+0x210>
    4112:	bf00      	nop
    4114:	200001c4 	.word	0x200001c4

00004118 <hlp_bytesToHex>:
    return ret;
}

#ifndef DLMS_IGNORE_MALLOC
char* hlp_bytesToHex(const unsigned char* bytes, int count)
{
    4118:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char hexArray[] = { '0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F' };
    411a:	4b1c      	ldr	r3, [pc, #112]	; (418c <hlp_bytesToHex+0x74>)
{
    411c:	b085      	sub	sp, #20
    411e:	4605      	mov	r5, r0
    4120:	460c      	mov	r4, r1
    const char hexArray[] = { '0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F' };
    4122:	466e      	mov	r6, sp
    4124:	f103 0710 	add.w	r7, r3, #16
    4128:	6818      	ldr	r0, [r3, #0]
    412a:	6859      	ldr	r1, [r3, #4]
    412c:	4632      	mov	r2, r6
    412e:	c203      	stmia	r2!, {r0, r1}
    4130:	3308      	adds	r3, #8
    4132:	42bb      	cmp	r3, r7
    4134:	4616      	mov	r6, r2
    4136:	d1f7      	bne.n	4128 <hlp_bytesToHex+0x10>
    unsigned char tmp;
    int pos;
    char* hexChars;
    if (count != 0)
    4138:	b31c      	cbz	r4, 4182 <hlp_bytesToHex+0x6a>
    {
        hexChars = (char*)gxmalloc(3 * count);
    413a:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    413e:	4630      	mov	r0, r6
    4140:	f007 fd38 	bl	bbb4 <malloc>
        if (hexChars != NULL)
    4144:	b1d8      	cbz	r0, 417e <hlp_bytesToHex+0x66>
    4146:	462b      	mov	r3, r5
    4148:	441c      	add	r4, r3
    414a:	4605      	mov	r5, r0
            for (pos = 0; pos != count; ++pos)
            {
                tmp = bytes[pos] & 0xFF;
                hexChars[pos * 3] = hexArray[tmp >> 4];
                hexChars[pos * 3 + 1] = hexArray[tmp & 0x0F];
                hexChars[pos * 3 + 2] = ' ';
    414c:	2120      	movs	r1, #32
                tmp = bytes[pos] & 0xFF;
    414e:	f813 2b01 	ldrb.w	r2, [r3], #1
                hexChars[pos * 3 + 2] = ' ';
    4152:	70a9      	strb	r1, [r5, #2]
                hexChars[pos * 3] = hexArray[tmp >> 4];
    4154:	af04      	add	r7, sp, #16
    4156:	eb07 1712 	add.w	r7, r7, r2, lsr #4
                hexChars[pos * 3 + 1] = hexArray[tmp & 0x0F];
    415a:	f002 020f 	and.w	r2, r2, #15
                hexChars[pos * 3] = hexArray[tmp >> 4];
    415e:	f817 7c10 	ldrb.w	r7, [r7, #-16]
    4162:	702f      	strb	r7, [r5, #0]
                hexChars[pos * 3 + 1] = hexArray[tmp & 0x0F];
    4164:	af04      	add	r7, sp, #16
    4166:	443a      	add	r2, r7
            for (pos = 0; pos != count; ++pos)
    4168:	429c      	cmp	r4, r3
                hexChars[pos * 3 + 1] = hexArray[tmp & 0x0F];
    416a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
    416e:	706a      	strb	r2, [r5, #1]
            for (pos = 0; pos != count; ++pos)
    4170:	f105 0503 	add.w	r5, r5, #3
    4174:	d1eb      	bne.n	414e <hlp_bytesToHex+0x36>
            }
            hexChars[(3 * count) - 1] = '\0';
    4176:	1983      	adds	r3, r0, r6
    4178:	2200      	movs	r2, #0
    417a:	f803 2c01 	strb.w	r2, [r3, #-1]
    {
        hexChars = (char*)gxmalloc(1);
        hexChars[0] = '\0';
    }
    return hexChars;
}
    417e:	b005      	add	sp, #20
    4180:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hexChars = (char*)gxmalloc(1);
    4182:	2001      	movs	r0, #1
    4184:	f007 fd16 	bl	bbb4 <malloc>
        hexChars[0] = '\0';
    4188:	7004      	strb	r4, [r0, #0]
    return hexChars;
    418a:	e7f8      	b.n	417e <hlp_bytesToHex+0x66>
    418c:	0001d6fb 	.word	0x0001d6fb

00004190 <hlp_getDataTypeSize>:
}

int hlp_getDataTypeSize(DLMS_DATA_TYPE type)
{
    int size = -1;
    switch (type)
    4190:	281b      	cmp	r0, #27
    4192:	bf9a      	itte	ls
    4194:	4b02      	ldrls	r3, [pc, #8]	; (41a0 <hlp_getDataTypeSize+0x10>)
    4196:	5618      	ldrsbls	r0, [r3, r0]
{
    4198:	f04f 30ff 	movhi.w	r0, #4294967295
        break;
    default:
        break;
    }
    return size;
}
    419c:	4770      	bx	lr
    419e:	bf00      	nop
    41a0:	0001d70c 	.word	0x0001d70c

000041a4 <var_getDateTime2>:
}

int var_getDateTime2(
    gxtime* dateTime,
    gxByteBuffer* ba)
{
    41a4:	b570      	push	{r4, r5, r6, lr}
    41a6:	b086      	sub	sp, #24
    uint16_t year = 0xFFFF;
    unsigned char month = 0xFF, day = 0xFF, hour = 0xFF, minute = 0xFF, second = 0xFF, dayOfWeek = 0xFF;
    41a8:	23ff      	movs	r3, #255	; 0xff
    41aa:	f88d 3011 	strb.w	r3, [sp, #17]
#ifdef DLMS_USE_EPOCH_TIME
    time_fromUnixTime2(dateTime->value, &year, &month,
    41ae:	f10d 0315 	add.w	r3, sp, #21
    41b2:	9303      	str	r3, [sp, #12]
    41b4:	ab05      	add	r3, sp, #20
    41b6:	9302      	str	r3, [sp, #8]
    41b8:	f10d 0313 	add.w	r3, sp, #19
    41bc:	9301      	str	r3, [sp, #4]
    41be:	f10d 0312 	add.w	r3, sp, #18
{
    41c2:	4605      	mov	r5, r0
    time_fromUnixTime2(dateTime->value, &year, &month,
    41c4:	9300      	str	r3, [sp, #0]
    uint16_t year = 0xFFFF;
    41c6:	f64f 76ff 	movw	r6, #65535	; 0xffff
    time_fromUnixTime2(dateTime->value, &year, &month,
    41ca:	aa04      	add	r2, sp, #16
{
    41cc:	460c      	mov	r4, r1
    time_fromUnixTime2(dateTime->value, &year, &month,
    41ce:	f10d 0311 	add.w	r3, sp, #17
    41d2:	f10d 0116 	add.w	r1, sp, #22
    41d6:	6800      	ldr	r0, [r0, #0]
    uint16_t year = 0xFFFF;
    41d8:	f8ad 6016 	strh.w	r6, [sp, #22]
    unsigned char month = 0xFF, day = 0xFF, hour = 0xFF, minute = 0xFF, second = 0xFF, dayOfWeek = 0xFF;
    41dc:	f88d 6010 	strb.w	r6, [sp, #16]
    41e0:	f88d 6012 	strb.w	r6, [sp, #18]
    41e4:	f88d 6013 	strb.w	r6, [sp, #19]
    41e8:	f88d 6014 	strb.w	r6, [sp, #20]
    41ec:	f88d 6015 	strb.w	r6, [sp, #21]
    time_fromUnixTime2(dateTime->value, &year, &month,
    41f0:	f7fd fffc 	bl	21ec <time_fromUnixTime2>
        &day, &hour, &minute, &second, &dayOfWeek);
    //Add year.
    if ((dateTime->skip & DATETIME_SKIPS_YEAR) != 0)
    41f4:	88eb      	ldrh	r3, [r5, #6]
    41f6:	07d8      	lsls	r0, r3, #31
    {
        year = 0xFFFF;
    41f8:	bf48      	it	mi
    41fa:	f8ad 6016 	strhmi.w	r6, [sp, #22]
    }
    if ((dateTime->skip & (DATETIME_SKIPS_YEAR | DATETIME_SKIPS_MONTH | DATETIME_SKIPS_DAY)) != 0)
    41fe:	0759      	lsls	r1, r3, #29
    {
        dayOfWeek = 0xFF;
    4200:	bf18      	it	ne
    4202:	23ff      	movne	r3, #255	; 0xff
    {
        second = (unsigned char)dateTime->value.tm_sec;
    }
#endif // DLMS_USE_EPOCH_TIME
    //Add year.
    bb_setUInt16(ba, year);
    4204:	f8bd 1016 	ldrh.w	r1, [sp, #22]
        dayOfWeek = 0xFF;
    4208:	bf18      	it	ne
    420a:	f88d 3015 	strbne.w	r3, [sp, #21]
    bb_setUInt16(ba, year);
    420e:	4620      	mov	r0, r4
    4210:	f008 fd73 	bl	ccfa <bb_setUInt16>
    //Add month
    if ((dateTime->extraInfo & DLMS_DATE_TIME_EXTRA_INFO_DST_BEGIN) != 0)
    4214:	7a2b      	ldrb	r3, [r5, #8]
    4216:	07da      	lsls	r2, r3, #31
    4218:	d553      	bpl.n	42c2 <var_getDateTime2+0x11e>
    {
        bb_setUInt8(ba, 0xFE);
    421a:	21fe      	movs	r1, #254	; 0xfe
    {
        bb_setUInt8(ba, month);
    }
    else
    {
        bb_setUInt8(ba, 0xFF);
    421c:	4620      	mov	r0, r4
    421e:	f008 fd4a 	bl	ccb6 <bb_setUInt8>
    }
    //Add day
    if ((dateTime->extraInfo & DLMS_DATE_TIME_EXTRA_INFO_LAST_DAY) != 0)
    4222:	7a2b      	ldrb	r3, [r5, #8]
    4224:	0758      	lsls	r0, r3, #29
    4226:	d557      	bpl.n	42d8 <var_getDateTime2+0x134>
    {
        bb_setUInt8(ba, 0xFE);
    4228:	21fe      	movs	r1, #254	; 0xfe
    {
        bb_setUInt8(ba, day);
    }
    else
    {
        bb_setUInt8(ba, 0xFF);
    422a:	4620      	mov	r0, r4
    422c:	f008 fd43 	bl	ccb6 <bb_setUInt8>
    }
    //Add week day
    if ((dateTime->skip & DATETIME_SKIPS_DAYOFWEEK) == 0)
    4230:	88eb      	ldrh	r3, [r5, #6]
    4232:	071b      	lsls	r3, r3, #28
    4234:	d45b      	bmi.n	42ee <var_getDateTime2+0x14a>
    {
        //If Sunday.
        if (dayOfWeek == 0)
    4236:	f89d 3015 	ldrb.w	r3, [sp, #21]
    423a:	b913      	cbnz	r3, 4242 <var_getDateTime2+0x9e>
        {
            dayOfWeek = 7;
    423c:	2307      	movs	r3, #7
    423e:	f88d 3015 	strb.w	r3, [sp, #21]
        }
        bb_setUInt8(ba, dayOfWeek);
    4242:	f89d 1015 	ldrb.w	r1, [sp, #21]
    }
    else
    {
        bb_setUInt8(ba, 0xFF);
    4246:	4620      	mov	r0, r4
    4248:	f008 fd35 	bl	ccb6 <bb_setUInt8>
    }

    //Add Hours
    if ((dateTime->skip & DATETIME_SKIPS_HOUR) == 0)
    424c:	88eb      	ldrh	r3, [r5, #6]
    424e:	06de      	lsls	r6, r3, #27
    {
        bb_setUInt8(ba, hour);
    4250:	bf54      	ite	pl
    4252:	f89d 1012 	ldrbpl.w	r1, [sp, #18]
    }
    else
    {
        bb_setUInt8(ba, 0xFF);
    4256:	21ff      	movmi	r1, #255	; 0xff
    4258:	4620      	mov	r0, r4
    425a:	f008 fd2c 	bl	ccb6 <bb_setUInt8>
    }
    //Add Minutes
    if ((dateTime->skip & DATETIME_SKIPS_MINUTE) == 0)
    425e:	88eb      	ldrh	r3, [r5, #6]
    4260:	0698      	lsls	r0, r3, #26
    {
        bb_setUInt8(ba, minute);
    4262:	bf54      	ite	pl
    4264:	f89d 1013 	ldrbpl.w	r1, [sp, #19]
    }
    else
    {
        bb_setUInt8(ba, 0xFF);
    4268:	21ff      	movmi	r1, #255	; 0xff
    426a:	4620      	mov	r0, r4
    426c:	f008 fd23 	bl	ccb6 <bb_setUInt8>
    }
    //Add seconds.
    if ((dateTime->skip & DATETIME_SKIPS_SECOND) == 0)
    4270:	88eb      	ldrh	r3, [r5, #6]
    4272:	0659      	lsls	r1, r3, #25
    {
        bb_setUInt8(ba, second);
    4274:	bf54      	ite	pl
    4276:	f89d 1014 	ldrbpl.w	r1, [sp, #20]
    }
    else
    {
        bb_setUInt8(ba, 0xFF);
    427a:	21ff      	movmi	r1, #255	; 0xff
    427c:	4620      	mov	r0, r4
    427e:	f008 fd1a 	bl	ccb6 <bb_setUInt8>
    //Add ms.
#ifdef DLMS_ITALIAN_STANDARD
    //Italian standard uses 0 for ms.
    bb_setUInt8(ba, 0x00);
#else
    if ((dateTime->skip & DATETIME_SKIPS_MS) == 0)
    4282:	88e9      	ldrh	r1, [r5, #6]
    4284:	f011 0180 	ands.w	r1, r1, #128	; 0x80
    {
        bb_setUInt8(ba, 0x00);
    }
    else
    {
        bb_setUInt8(ba, 0xFF);
    4288:	bf18      	it	ne
    428a:	21ff      	movne	r1, #255	; 0xff
    428c:	4620      	mov	r0, r4
    428e:	f008 fd12 	bl	ccb6 <bb_setUInt8>
    }
#endif //DLMS_ITALIAN_STANDARD
    //Add Deviation
    if (year == 0xFFFF || (dateTime->skip & DATETIME_SKIPS_DEVITATION) != 0)
    4292:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    4296:	f64f 73ff 	movw	r3, #65535	; 0xffff
    429a:	429a      	cmp	r2, r3
    429c:	d002      	beq.n	42a4 <var_getDateTime2+0x100>
    429e:	88eb      	ldrh	r3, [r5, #6]
    42a0:	05da      	lsls	r2, r3, #23
    42a2:	d526      	bpl.n	42f2 <var_getDateTime2+0x14e>
    {
        bb_setInt16(ba, 0x8000);//(not specified)
    42a4:	4914      	ldr	r1, [pc, #80]	; (42f8 <var_getDateTime2+0x154>)
    }
    else
    {
        bb_setInt16(ba, dateTime->deviation);
    42a6:	4620      	mov	r0, r4
    42a8:	f008 fde4 	bl	ce74 <bb_setInt16>
    }
    //Add clock status
    if ((dateTime->skip & DATETIME_SKIPS_STATUS) != 0)
    42ac:	88eb      	ldrh	r3, [r5, #6]
    42ae:	059b      	lsls	r3, r3, #22
    {
        bb_setUInt8(ba, 0xFF);
    }
    else
    {
        bb_setUInt8(ba, dateTime->status);
    42b0:	bf54      	ite	pl
    42b2:	7a69      	ldrbpl	r1, [r5, #9]
        bb_setUInt8(ba, 0xFF);
    42b4:	21ff      	movmi	r1, #255	; 0xff
        bb_setUInt8(ba, dateTime->status);
    42b6:	4620      	mov	r0, r4
    42b8:	f008 fcfd 	bl	ccb6 <bb_setUInt8>
    }
    return 0;
}
    42bc:	2000      	movs	r0, #0
    42be:	b006      	add	sp, #24
    42c0:	bd70      	pop	{r4, r5, r6, pc}
    else if ((dateTime->extraInfo & DLMS_DATE_TIME_EXTRA_INFO_DST_END) != 0)
    42c2:	079b      	lsls	r3, r3, #30
    42c4:	d501      	bpl.n	42ca <var_getDateTime2+0x126>
        bb_setUInt8(ba, 0xFD);
    42c6:	21fd      	movs	r1, #253	; 0xfd
    42c8:	e7a8      	b.n	421c <var_getDateTime2+0x78>
    else if ((dateTime->skip & DATETIME_SKIPS_MONTH) == 0)
    42ca:	88eb      	ldrh	r3, [r5, #6]
    42cc:	079e      	lsls	r6, r3, #30
        bb_setUInt8(ba, month);
    42ce:	bf54      	ite	pl
    42d0:	f89d 1010 	ldrbpl.w	r1, [sp, #16]
        bb_setUInt8(ba, 0xFF);
    42d4:	21ff      	movmi	r1, #255	; 0xff
    42d6:	e7a1      	b.n	421c <var_getDateTime2+0x78>
    else if ((dateTime->extraInfo & DLMS_DATE_TIME_EXTRA_INFO_LAST_DAY2) != 0)
    42d8:	0719      	lsls	r1, r3, #28
    42da:	d501      	bpl.n	42e0 <var_getDateTime2+0x13c>
        bb_setUInt8(ba, 0xFD);
    42dc:	21fd      	movs	r1, #253	; 0xfd
    42de:	e7a4      	b.n	422a <var_getDateTime2+0x86>
    else if ((dateTime->skip & DATETIME_SKIPS_DAY) == 0)
    42e0:	88eb      	ldrh	r3, [r5, #6]
    42e2:	075a      	lsls	r2, r3, #29
        bb_setUInt8(ba, day);
    42e4:	bf54      	ite	pl
    42e6:	f89d 1011 	ldrbpl.w	r1, [sp, #17]
        bb_setUInt8(ba, 0xFF);
    42ea:	21ff      	movmi	r1, #255	; 0xff
    42ec:	e79d      	b.n	422a <var_getDateTime2+0x86>
        bb_setUInt8(ba, 0xFF);
    42ee:	21ff      	movs	r1, #255	; 0xff
    42f0:	e7a9      	b.n	4246 <var_getDateTime2+0xa2>
        bb_setInt16(ba, dateTime->deviation);
    42f2:	f9b5 1004 	ldrsh.w	r1, [r5, #4]
    42f6:	e7d6      	b.n	42a6 <var_getDateTime2+0x102>
    42f8:	ffff8000 	.word	0xffff8000

000042fc <var_copy>:
}
#endif //DLMS_IGNORE_MALLOC

//copy variant.
int var_copy(dlmsVARIANT* target, dlmsVARIANT* source)
{
    42fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    4300:	4688      	mov	r8, r1
    4302:	4605      	mov	r5, r0
#ifndef DLMS_IGNORE_MALLOC
    dlmsVARIANT* it;
    dlmsVARIANT* item;
#endif //DLMS_IGNORE_MALLOC
    int ret = DLMS_ERROR_CODE_OK;
    if ((source->vt & DLMS_DATA_TYPE_BYREF) != 0)
    4304:	f998 3000 	ldrsb.w	r3, [r8]
    4308:	7809      	ldrb	r1, [r1, #0]
    430a:	2b00      	cmp	r3, #0
    430c:	da26      	bge.n	435c <var_copy+0x60>
    {
        if (source->vt == (DLMS_DATA_TYPE_BYREF | DLMS_DATA_TYPE_ARRAY) ||
    430e:	f101 037f 	add.w	r3, r1, #127	; 0x7f
    4312:	b2db      	uxtb	r3, r3
    4314:	2b01      	cmp	r3, #1
    4316:	d807      	bhi.n	4328 <var_copy+0x2c>
            source->vt == (DLMS_DATA_TYPE_BYREF | DLMS_DATA_TYPE_STRUCTURE))
        {
            target->vt = source->vt & ~DLMS_DATA_TYPE_BYREF;
    4318:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    431c:	7001      	strb	r1, [r0, #0]
            target->pVal = source->pVal;
    431e:	f8d8 3008 	ldr.w	r3, [r8, #8]
    4322:	6083      	str	r3, [r0, #8]
        ret = var_getSize(source->vt);
        if (ret > 0)
        {
            memcpy(&target->pVal, &source->pVal, ret);
        }
        ret = 0;
    4324:	2400      	movs	r4, #0
    4326:	e034      	b.n	4392 <var_copy+0x96>
            source->vt == (DLMS_DATA_TYPE_BYREF | DLMS_DATA_TYPE_STRING) ||
    4328:	f101 037c 	add.w	r3, r1, #124	; 0x7c
    432c:	b2db      	uxtb	r3, r3
    432e:	2b17      	cmp	r3, #23
    4330:	d804      	bhi.n	433c <var_copy+0x40>
    4332:	4a7d      	ldr	r2, [pc, #500]	; (4528 <var_copy+0x22c>)
    4334:	fa22 f303 	lsr.w	r3, r2, r3
    4338:	07db      	lsls	r3, r3, #31
    433a:	d409      	bmi.n	4350 <var_copy+0x54>
        target->vt = source->vt & ~DLMS_DATA_TYPE_BYREF;
    433c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    4340:	7029      	strb	r1, [r5, #0]
        target->ullVal = *source->pullVal;
    4342:	f8d8 3008 	ldr.w	r3, [r8, #8]
    4346:	e9d3 2300 	ldrd	r2, r3, [r3]
    434a:	e9c5 2302 	strd	r2, r3, [r5, #8]
        return 0;
    434e:	e7e9      	b.n	4324 <var_copy+0x28>
            return var_getBytes2(source, source->vt, target->byteArr);
    4350:	6882      	ldr	r2, [r0, #8]
    4352:	4640      	mov	r0, r8
    4354:	f016 f8e2 	bl	1a51c <var_getBytes2>
        ret = ba_copy(target->bitArr, source->bitArr->data, (uint16_t)source->bitArr->size);
    4358:	4604      	mov	r4, r0
    435a:	e01a      	b.n	4392 <var_copy+0x96>
    if ((target->vt & DLMS_DATA_TYPE_BYREF) != 0)
    435c:	f990 2000 	ldrsb.w	r2, [r0]
    4360:	7803      	ldrb	r3, [r0, #0]
    4362:	2a00      	cmp	r2, #0
    4364:	da32      	bge.n	43cc <var_copy+0xd0>
        if (source->vt == DLMS_DATA_TYPE_OCTET_STRING || source->vt == DLMS_DATA_TYPE_STRING)
    4366:	f1a1 0309 	sub.w	r3, r1, #9
    436a:	2b01      	cmp	r3, #1
    436c:	d815      	bhi.n	439a <var_copy+0x9e>
            if ((ret = hlp_getObjectCount2(source->byteArr, &count)) != 0)
    436e:	f8d8 0008 	ldr.w	r0, [r8, #8]
    4372:	a901      	add	r1, sp, #4
    4374:	f015 fa5d 	bl	19832 <hlp_getObjectCount2>
    4378:	4604      	mov	r4, r0
    437a:	b950      	cbnz	r0, 4392 <var_copy+0x96>
            memcpy(target->pVal, source->byteArr + source->byteArr->position, count);
    437c:	f8d8 3008 	ldr.w	r3, [r8, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    4380:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    4384:	8919      	ldrh	r1, [r3, #8]
    4386:	200c      	movs	r0, #12
    4388:	fb00 3101 	mla	r1, r0, r1, r3
    438c:	68a8      	ldr	r0, [r5, #8]
    438e:	f017 fea7 	bl	1c0e0 <memcpy>
    }
    return ret;
}
    4392:	4620      	mov	r0, r4
    4394:	b002      	add	sp, #8
    4396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            count = (uint16_t)hlp_getDataTypeSize(source->vt);
    439a:	4608      	mov	r0, r1
    439c:	f7ff fef8 	bl	4190 <hlp_getDataTypeSize>
    43a0:	4604      	mov	r4, r0
    43a2:	f8ad 0004 	strh.w	r0, [sp, #4]
            if (count != hlp_getDataTypeSize(target->vt ^ DLMS_DATA_TYPE_BYREF))
    43a6:	7828      	ldrb	r0, [r5, #0]
    43a8:	f080 0080 	eor.w	r0, r0, #128	; 0x80
    43ac:	f7ff fef0 	bl	4190 <hlp_getDataTypeSize>
    43b0:	b2a4      	uxth	r4, r4
    43b2:	42a0      	cmp	r0, r4
    43b4:	d107      	bne.n	43c6 <var_copy+0xca>
    43b6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    43ba:	68a8      	ldr	r0, [r5, #8]
    43bc:	f108 0108 	add.w	r1, r8, #8
    43c0:	f017 fe8e 	bl	1c0e0 <memcpy>
    43c4:	e7ae      	b.n	4324 <var_copy+0x28>
                return DLMS_ERROR_CODE_INVALID_PARAMETER;
    43c6:	f44f 7481 	mov.w	r4, #258	; 0x102
    43ca:	e7e2      	b.n	4392 <var_copy+0x96>
    if ((target->vt == DLMS_DATA_TYPE_ARRAY || target->vt == DLMS_DATA_TYPE_STRUCTURE) && va_isAttached(target->Arr))
    43cc:	3b01      	subs	r3, #1
    43ce:	2b01      	cmp	r3, #1
    43d0:	d804      	bhi.n	43dc <var_copy+0xe0>
    return (arr->capacity & 0x8000) == 0x8000;
    43d2:	6883      	ldr	r3, [r0, #8]
    if ((target->vt == DLMS_DATA_TYPE_ARRAY || target->vt == DLMS_DATA_TYPE_STRUCTURE) && va_isAttached(target->Arr))
    43d4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    43d8:	2b00      	cmp	r3, #0
    43da:	db1f      	blt.n	441c <var_copy+0x120>
        ret = var_clear(target);
    43dc:	4628      	mov	r0, r5
    43de:	f015 fee2 	bl	1a1a6 <var_clear>
        if (ret != DLMS_ERROR_CODE_OK)
    43e2:	4604      	mov	r4, r0
    43e4:	2800      	cmp	r0, #0
    43e6:	d1d4      	bne.n	4392 <var_copy+0x96>
        target->vt = source->vt;
    43e8:	f898 3000 	ldrb.w	r3, [r8]
    43ec:	702b      	strb	r3, [r5, #0]
    unsigned char attaced = 0;
    43ee:	4607      	mov	r7, r0
    if (source->vt == DLMS_DATA_TYPE_STRING)
    43f0:	f898 3000 	ldrb.w	r3, [r8]
    43f4:	2b0a      	cmp	r3, #10
    43f6:	d113      	bne.n	4420 <var_copy+0x124>
        if (source->byteArr != 0)
    43f8:	f8d8 3008 	ldr.w	r3, [r8, #8]
    43fc:	2b00      	cmp	r3, #0
    43fe:	d091      	beq.n	4324 <var_copy+0x28>
            target->byteArr = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
    4400:	200c      	movs	r0, #12
    4402:	f007 fbd7 	bl	bbb4 <malloc>
    4406:	60a8      	str	r0, [r5, #8]
            BYTE_BUFFER_INIT(target->byteArr);
    4408:	f008 fbec 	bl	cbe4 <bb_init>
            bb_set(target->byteArr, source->byteArr->data, source->byteArr->size);
    440c:	f8d8 3008 	ldr.w	r3, [r8, #8]
    4410:	68a8      	ldr	r0, [r5, #8]
    4412:	88da      	ldrh	r2, [r3, #6]
    4414:	6819      	ldr	r1, [r3, #0]
    4416:	f008 fd34 	bl	ce82 <bb_set>
    441a:	e783      	b.n	4324 <var_copy+0x28>
        attaced = 1;
    441c:	2701      	movs	r7, #1
    441e:	e7e7      	b.n	43f0 <var_copy+0xf4>
    else if (source->vt == DLMS_DATA_TYPE_OCTET_STRING)
    4420:	2b09      	cmp	r3, #9
    4422:	d0e9      	beq.n	43f8 <var_copy+0xfc>
    else if (source->vt == DLMS_DATA_TYPE_ARRAY ||
    4424:	1e5a      	subs	r2, r3, #1
    4426:	2a01      	cmp	r2, #1
    4428:	d848      	bhi.n	44bc <var_copy+0x1c0>
        if (source->Arr != NULL && source->Arr->size != 0)
    442a:	f8d8 3008 	ldr.w	r3, [r8, #8]
    442e:	2b00      	cmp	r3, #0
    4430:	f43f af78 	beq.w	4324 <var_copy+0x28>
    4434:	88db      	ldrh	r3, [r3, #6]
    4436:	2b00      	cmp	r3, #0
    4438:	f43f af74 	beq.w	4324 <var_copy+0x28>
            if (target->Arr == NULL)
    443c:	68ac      	ldr	r4, [r5, #8]
    443e:	b92c      	cbnz	r4, 444c <var_copy+0x150>
                target->Arr = (variantArray*)gxmalloc(sizeof(variantArray));
    4440:	2008      	movs	r0, #8
    4442:	f007 fbb7 	bl	bbb4 <malloc>
    arr->capacity = 0;
    4446:	e9c0 4400 	strd	r4, r4, [r0]
                target->Arr = (variantArray*)gxmalloc(sizeof(variantArray));
    444a:	60a8      	str	r0, [r5, #8]
            va_capacity(target->Arr, source->Arr->size);
    444c:	f8d8 3008 	ldr.w	r3, [r8, #8]
    4450:	68a8      	ldr	r0, [r5, #8]
    4452:	88d9      	ldrh	r1, [r3, #6]
    4454:	f015 fe31 	bl	1a0ba <va_capacity>
            for (pos = 0; pos != source->Arr->size; ++pos)
    4458:	2600      	movs	r6, #0
    445a:	f8d8 0008 	ldr.w	r0, [r8, #8]
    445e:	88c3      	ldrh	r3, [r0, #6]
    4460:	42b3      	cmp	r3, r6
    4462:	f43f af5f 	beq.w	4324 <var_copy+0x28>
                if ((ret = va_getByIndex(source->Arr, pos, &it)) != DLMS_ERROR_CODE_OK)
    4466:	466a      	mov	r2, sp
    4468:	4631      	mov	r1, r6
    446a:	f015 ff1a 	bl	1a2a2 <va_getByIndex>
    446e:	4604      	mov	r4, r0
    4470:	2800      	cmp	r0, #0
    4472:	d18e      	bne.n	4392 <var_copy+0x96>
                if (attaced)
    4474:	b187      	cbz	r7, 4498 <var_copy+0x19c>
                    if ((ret = va_getByIndex(target->Arr, pos, &item)) != DLMS_ERROR_CODE_OK ||
    4476:	68a8      	ldr	r0, [r5, #8]
    4478:	aa01      	add	r2, sp, #4
    447a:	f015 ff12 	bl	1a2a2 <va_getByIndex>
    447e:	4604      	mov	r4, r0
    4480:	2800      	cmp	r0, #0
    4482:	d186      	bne.n	4392 <var_copy+0x96>
                        (ret = var_copy(item, it)) != DLMS_ERROR_CODE_OK)
    4484:	e9dd 1000 	ldrd	r1, r0, [sp]
    4488:	f7ff ff38 	bl	42fc <var_copy>
                    if ((ret = va_getByIndex(target->Arr, pos, &item)) != DLMS_ERROR_CODE_OK ||
    448c:	4604      	mov	r4, r0
    448e:	2800      	cmp	r0, #0
    4490:	f47f af7f 	bne.w	4392 <var_copy+0x96>
            for (pos = 0; pos != source->Arr->size; ++pos)
    4494:	3601      	adds	r6, #1
    4496:	e7e0      	b.n	445a <var_copy+0x15e>
                    item = (dlmsVARIANT*)gxmalloc(sizeof(dlmsVARIANT));
    4498:	2010      	movs	r0, #16
    449a:	f007 fb8b 	bl	bbb4 <malloc>
                    ret = var_copy(item, it);
    449e:	9900      	ldr	r1, [sp, #0]
    data->vt = DLMS_DATA_TYPE_NONE;
    44a0:	7007      	strb	r7, [r0, #0]
    data->byteArr = NULL;
    44a2:	6087      	str	r7, [r0, #8]
                    item = (dlmsVARIANT*)gxmalloc(sizeof(dlmsVARIANT));
    44a4:	9001      	str	r0, [sp, #4]
                    ret = var_copy(item, it);
    44a6:	f7ff ff29 	bl	42fc <var_copy>
                    if (ret != DLMS_ERROR_CODE_OK)
    44aa:	4604      	mov	r4, r0
    44ac:	2800      	cmp	r0, #0
    44ae:	f47f af70 	bne.w	4392 <var_copy+0x96>
                    va_push(target->Arr, item);
    44b2:	9901      	ldr	r1, [sp, #4]
    44b4:	68a8      	ldr	r0, [r5, #8]
    44b6:	f015 fe28 	bl	1a10a <va_push>
    44ba:	e7eb      	b.n	4494 <var_copy+0x198>
    else if (source->vt == DLMS_DATA_TYPE_DATETIME)
    44bc:	2b19      	cmp	r3, #25
    44be:	d105      	bne.n	44cc <var_copy+0x1d0>
        ret = var_setDateTime(target, source->dateTime);
    44c0:	f8d8 1008 	ldr.w	r1, [r8, #8]
    44c4:	4628      	mov	r0, r5
    44c6:	f016 f830 	bl	1a52a <var_setDateTime>
    44ca:	e745      	b.n	4358 <var_copy+0x5c>
    else if (source->vt == DLMS_DATA_TYPE_DATE)
    44cc:	2b1a      	cmp	r3, #26
    44ce:	d105      	bne.n	44dc <var_copy+0x1e0>
        ret = var_setDate(target, source->dateTime);
    44d0:	f8d8 1008 	ldr.w	r1, [r8, #8]
    44d4:	4628      	mov	r0, r5
    44d6:	f016 f83a 	bl	1a54e <var_setDate>
    44da:	e73d      	b.n	4358 <var_copy+0x5c>
    else if (source->vt == DLMS_DATA_TYPE_TIME)
    44dc:	2b1b      	cmp	r3, #27
    44de:	d105      	bne.n	44ec <var_copy+0x1f0>
        ret = var_setTime(target, source->dateTime);
    44e0:	f8d8 1008 	ldr.w	r1, [r8, #8]
    44e4:	4628      	mov	r0, r5
    44e6:	f016 f844 	bl	1a572 <var_setTime>
    44ea:	e735      	b.n	4358 <var_copy+0x5c>
    else if (source->vt == DLMS_DATA_TYPE_BIT_STRING)
    44ec:	2b04      	cmp	r3, #4
    44ee:	d10d      	bne.n	450c <var_copy+0x210>
        target->bitArr = (bitArray*)gxmalloc(sizeof(bitArray));
    44f0:	2008      	movs	r0, #8
    44f2:	f007 fb5f 	bl	bbb4 <malloc>
    44f6:	60a8      	str	r0, [r5, #8]
        ba_init(target->bitArr);
    44f8:	f008 fa6d 	bl	c9d6 <ba_init>
        ret = ba_copy(target->bitArr, source->bitArr->data, (uint16_t)source->bitArr->size);
    44fc:	f8d8 3008 	ldr.w	r3, [r8, #8]
    4500:	68a8      	ldr	r0, [r5, #8]
    4502:	88da      	ldrh	r2, [r3, #6]
    4504:	6819      	ldr	r1, [r3, #0]
    4506:	f008 fae1 	bl	cacc <ba_copy>
    450a:	e725      	b.n	4358 <var_copy+0x5c>
    switch (vt)
    450c:	2b19      	cmp	r3, #25
    450e:	f63f af09 	bhi.w	4324 <var_copy+0x28>
    4512:	4a06      	ldr	r2, [pc, #24]	; (452c <var_copy+0x230>)
    4514:	56d2      	ldrsb	r2, [r2, r3]
        if (ret > 0)
    4516:	2a00      	cmp	r2, #0
    4518:	f77f af04 	ble.w	4324 <var_copy+0x28>
    451c:	f108 0108 	add.w	r1, r8, #8
    4520:	f105 0008 	add.w	r0, r5, #8
    4524:	e74c      	b.n	43c0 <var_copy+0xc4>
    4526:	bf00      	nop
    4528:	00e00061 	.word	0x00e00061
    452c:	0001d73a 	.word	0x0001d73a

00004530 <convert.part.0>:
static int convert(dlmsVARIANT* item, DLMS_DATA_TYPE type)
    4530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4534:	b0ca      	sub	sp, #296	; 0x128
    data->vt = DLMS_DATA_TYPE_NONE;
    4536:	2300      	movs	r3, #0
static int convert(dlmsVARIANT* item, DLMS_DATA_TYPE type)
    4538:	4604      	mov	r4, r0
    453a:	460d      	mov	r5, r1
    ret = var_copy(&tmp, item);
    453c:	4601      	mov	r1, r0
    453e:	a802      	add	r0, sp, #8
    data->vt = DLMS_DATA_TYPE_NONE;
    4540:	f88d 3008 	strb.w	r3, [sp, #8]
    data->byteArr = NULL;
    4544:	9304      	str	r3, [sp, #16]
    data->vt = DLMS_DATA_TYPE_NONE;
    4546:	f88d 3018 	strb.w	r3, [sp, #24]
    data->byteArr = NULL;
    454a:	9308      	str	r3, [sp, #32]
    ret = var_copy(&tmp, item);
    454c:	f7ff fed6 	bl	42fc <var_copy>
    if (ret != DLMS_ERROR_CODE_OK)
    4550:	4606      	mov	r6, r0
    4552:	2800      	cmp	r0, #0
    4554:	d170      	bne.n	4638 <convert.part.0+0x108>
    var_clear(item);
    4556:	4620      	mov	r0, r4
    4558:	f015 fe25 	bl	1a1a6 <var_clear>
    if (type == DLMS_DATA_TYPE_STRING)
    455c:	2d0a      	cmp	r5, #10
    455e:	f040 80d6 	bne.w	470e <convert.part.0+0x1de>
        item->strVal = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
    4562:	200c      	movs	r0, #12
    4564:	f007 fb26 	bl	bbb4 <malloc>
    4568:	60a0      	str	r0, [r4, #8]
        BYTE_BUFFER_INIT(item->strVal);
    456a:	f008 fb3b 	bl	cbe4 <bb_init>
        switch (tmp.vt)
    456e:	f89d 3008 	ldrb.w	r3, [sp, #8]
    4572:	2b1b      	cmp	r3, #27
    4574:	f200 815f 	bhi.w	4836 <convert.part.0+0x306>
    4578:	e8df f013 	tbh	[pc, r3, lsl #1]
    457c:	001c0032 	.word	0x001c0032
    4580:	0062001c 	.word	0x0062001c
    4584:	006c00ad 	.word	0x006c00ad
    4588:	015d0077 	.word	0x015d0077
    458c:	00ba015d 	.word	0x00ba015d
    4590:	015d015d 	.word	0x015d015d
    4594:	015d015d 	.word	0x015d015d
    4598:	007a015d 	.word	0x007a015d
    459c:	00860080 	.word	0x00860080
    45a0:	015d008b 	.word	0x015d008b
    45a4:	00990090 	.word	0x00990090
    45a8:	009b0086 	.word	0x009b0086
    45ac:	00b500a7 	.word	0x00b500a7
    45b0:	00b500b5 	.word	0x00b500b5
            bb_setUInt8(item->strVal, '{');
    45b4:	68a0      	ldr	r0, [r4, #8]
    45b6:	217b      	movs	r1, #123	; 0x7b
    45b8:	f008 fb7d 	bl	ccb6 <bb_setUInt8>
            for (pos = 0; pos != tmp.Arr->size; ++pos)
    45bc:	2500      	movs	r5, #0
    45be:	9804      	ldr	r0, [sp, #16]
    45c0:	88c3      	ldrh	r3, [r0, #6]
    45c2:	b2af      	uxth	r7, r5
    45c4:	42bb      	cmp	r3, r7
    45c6:	d111      	bne.n	45ec <convert.part.0+0xbc>
            bb_setUInt8(item->strVal, '}');
    45c8:	217d      	movs	r1, #125	; 0x7d
    45ca:	68a0      	ldr	r0, [r4, #8]
    45cc:	f008 fb73 	bl	ccb6 <bb_setUInt8>
            bb_setUInt8(item->strVal, '\0');
    45d0:	68a0      	ldr	r0, [r4, #8]
    45d2:	2100      	movs	r1, #0
    45d4:	f008 fb6f 	bl	ccb6 <bb_setUInt8>
            --item->strVal->size;
    45d8:	68a2      	ldr	r2, [r4, #8]
    45da:	88d3      	ldrh	r3, [r2, #6]
    45dc:	3b01      	subs	r3, #1
    45de:	80d3      	strh	r3, [r2, #6]
            item->vt = type;
    45e0:	230a      	movs	r3, #10
            item->vt = type;
    45e2:	7023      	strb	r3, [r4, #0]
    var_clear(&tmp);
    45e4:	a802      	add	r0, sp, #8
    45e6:	f015 fdde 	bl	1a1a6 <var_clear>
    return DLMS_ERROR_CODE_OK;
    45ea:	e025      	b.n	4638 <convert.part.0+0x108>
                ret = va_getByIndex(tmp.Arr, pos, &it);
    45ec:	aa0b      	add	r2, sp, #44	; 0x2c
    45ee:	b2a9      	uxth	r1, r5
    45f0:	f015 fe57 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
    45f4:	2800      	cmp	r0, #0
    45f6:	f040 811c 	bne.w	4832 <convert.part.0+0x302>
                if (pos != 0)
    45fa:	b13f      	cbz	r7, 460c <convert.part.0+0xdc>
                    bb_setUInt8(item->strVal, ',');
    45fc:	212c      	movs	r1, #44	; 0x2c
    45fe:	68a0      	ldr	r0, [r4, #8]
    4600:	f008 fb59 	bl	ccb6 <bb_setUInt8>
                    bb_setUInt8(item->strVal, ' ');
    4604:	68a0      	ldr	r0, [r4, #8]
    4606:	2120      	movs	r1, #32
    4608:	f008 fb55 	bl	ccb6 <bb_setUInt8>
                ret = var_copy(&tmp3, it);
    460c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    460e:	a806      	add	r0, sp, #24
    4610:	f7ff fe74 	bl	42fc <var_copy>
                if (ret != DLMS_ERROR_CODE_OK)
    4614:	2800      	cmp	r0, #0
    4616:	f040 810c 	bne.w	4832 <convert.part.0+0x302>
                ret = var_toString(&tmp3, item->strVal);
    461a:	68a1      	ldr	r1, [r4, #8]
    461c:	a806      	add	r0, sp, #24
    461e:	f016 f804 	bl	1a62a <var_toString>
    4622:	4607      	mov	r7, r0
                var_clear(&tmp3);
    4624:	a806      	add	r0, sp, #24
    4626:	f015 fdbe 	bl	1a1a6 <var_clear>
                if (ret != DLMS_ERROR_CODE_OK)
    462a:	3501      	adds	r5, #1
    462c:	2f00      	cmp	r7, #0
    462e:	d0c6      	beq.n	45be <convert.part.0+0x8e>
                    var_clear(&tmp);
    4630:	a802      	add	r0, sp, #8
    4632:	f015 fdb8 	bl	1a1a6 <var_clear>
                ret = var_toString(&tmp3, item->strVal);
    4636:	463e      	mov	r6, r7
}
    4638:	4630      	mov	r0, r6
    463a:	b04a      	add	sp, #296	; 0x128
    463c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if (tmp.boolVal == 0)
    4640:	f89d 3010 	ldrb.w	r3, [sp, #16]
    4644:	68a0      	ldr	r0, [r4, #8]
    4646:	b91b      	cbnz	r3, 4650 <convert.part.0+0x120>
                bb_addString(item->strVal, "False");
    4648:	4980      	ldr	r1, [pc, #512]	; (484c <convert.part.0+0x31c>)
            bb_addString(item->strVal, buff);
    464a:	f008 fc65 	bl	cf18 <bb_addString>
            item->vt = type;
    464e:	e7c7      	b.n	45e0 <convert.part.0+0xb0>
                bb_addString(item->strVal, "True");
    4650:	497f      	ldr	r1, [pc, #508]	; (4850 <convert.part.0+0x320>)
    4652:	e7fa      	b.n	464a <convert.part.0+0x11a>
            hlp_intToString(buff, 250, tmp.lVal, 1, 0);
    4654:	2300      	movs	r3, #0
    4656:	9300      	str	r3, [sp, #0]
    4658:	2301      	movs	r3, #1
            hlp_intToString(buff, 250, tmp.ulVal, 0, 0);
    465a:	9a04      	ldr	r2, [sp, #16]
            hlp_intToString(buff, 250, tmp.uiVal, 0, 0);
    465c:	21fa      	movs	r1, #250	; 0xfa
    465e:	a80b      	add	r0, sp, #44	; 0x2c
    4660:	f015 f9a3 	bl	199aa <hlp_intToString>
            bb_addString(item->strVal, buff);
    4664:	68a0      	ldr	r0, [r4, #8]
    4666:	a90b      	add	r1, sp, #44	; 0x2c
    4668:	e7ef      	b.n	464a <convert.part.0+0x11a>
            hlp_intToString(buff, 250, tmp.ulVal, 0, 0);
    466a:	2300      	movs	r3, #0
    466c:	9300      	str	r3, [sp, #0]
    466e:	e7f4      	b.n	465a <convert.part.0+0x12a>
            hlp_intToString(buff, 250, tmp.cVal, 1, 0);
    4670:	2300      	movs	r3, #0
    4672:	9300      	str	r3, [sp, #0]
    4674:	f99d 2010 	ldrsb.w	r2, [sp, #16]
    4678:	2301      	movs	r3, #1
    467a:	e7ef      	b.n	465c <convert.part.0+0x12c>
            hlp_intToString(buff, 250, tmp.iVal, 1, 0);
    467c:	2300      	movs	r3, #0
    467e:	9300      	str	r3, [sp, #0]
    4680:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
    4684:	2301      	movs	r3, #1
    4686:	e7e9      	b.n	465c <convert.part.0+0x12c>
            hlp_intToString(buff, 250, tmp.bVal, 0, 0);
    4688:	2300      	movs	r3, #0
    468a:	f89d 2010 	ldrb.w	r2, [sp, #16]
    468e:	9300      	str	r3, [sp, #0]
    4690:	e7e4      	b.n	465c <convert.part.0+0x12c>
            hlp_intToString(buff, 250, tmp.uiVal, 0, 0);
    4692:	2300      	movs	r3, #0
    4694:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    4698:	9300      	str	r3, [sp, #0]
    469a:	e7df      	b.n	465c <convert.part.0+0x12c>
            hlp_int64ToString(buff, 250, tmp.llVal, 1);
    469c:	2301      	movs	r3, #1
            hlp_int64ToString(buff, 250, tmp.ullVal, 0);
    469e:	9300      	str	r3, [sp, #0]
    46a0:	21fa      	movs	r1, #250	; 0xfa
    46a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    46a6:	a80b      	add	r0, sp, #44	; 0x2c
    46a8:	f015 f9e0 	bl	19a6c <hlp_int64ToString>
            bb_addString(item->strVal, buff);
    46ac:	e7da      	b.n	4664 <convert.part.0+0x134>
            hlp_int64ToString(buff, 250, tmp.ullVal, 0);
    46ae:	2300      	movs	r3, #0
    46b0:	e7f5      	b.n	469e <convert.part.0+0x16e>
            sprintf(buff, "%f", tmp.fltVal);
    46b2:	9804      	ldr	r0, [sp, #16]
    46b4:	f7fb fed8 	bl	468 <__aeabi_f2d>
    46b8:	e9cd 0100 	strd	r0, r1, [sp]
    46bc:	4b65      	ldr	r3, [pc, #404]	; (4854 <convert.part.0+0x324>)
            sprintf(buff, "%lf", tmp.dblVal);
    46be:	22fa      	movs	r2, #250	; 0xfa
    46c0:	2100      	movs	r1, #0
    46c2:	a80b      	add	r0, sp, #44	; 0x2c
    46c4:	f017 fd5d 	bl	1c182 <__sprintf_chk>
    46c8:	e7cc      	b.n	4664 <convert.part.0+0x134>
    46ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    46ce:	e9cd 2300 	strd	r2, r3, [sp]
    46d2:	4b61      	ldr	r3, [pc, #388]	; (4858 <convert.part.0+0x328>)
    46d4:	e7f3      	b.n	46be <convert.part.0+0x18e>
            char* str = ba_toString(tmp.bitArr);
    46d6:	9804      	ldr	r0, [sp, #16]
    46d8:	f008 fa54 	bl	cb84 <ba_toString>
    46dc:	4601      	mov	r1, r0
            bb_attachString(item->strVal, str);
    46de:	68a0      	ldr	r0, [r4, #8]
    46e0:	f008 fc32 	bl	cf48 <bb_attachString>
            item->vt = type;
    46e4:	e77c      	b.n	45e0 <convert.part.0+0xb0>
            time_toString(tmp.dateTime, item->strVal);
    46e6:	68a1      	ldr	r1, [r4, #8]
    46e8:	9804      	ldr	r0, [sp, #16]
    46ea:	f7fd fdfd 	bl	22e8 <time_toString>
            item->vt = type;
    46ee:	e777      	b.n	45e0 <convert.part.0+0xb0>
            if (tmp.byteArr != NULL)
    46f0:	9804      	ldr	r0, [sp, #16]
    46f2:	2800      	cmp	r0, #0
    46f4:	f43f af74 	beq.w	45e0 <convert.part.0+0xb0>
                char* str = bb_toHexString(tmp.byteArr);
    46f8:	f008 fda6 	bl	d248 <bb_toHexString>
    46fc:	4605      	mov	r5, r0
                bb_addString(item->strVal, str);
    46fe:	4601      	mov	r1, r0
    4700:	68a0      	ldr	r0, [r4, #8]
    4702:	f008 fc09 	bl	cf18 <bb_addString>
                gxfree(str);
    4706:	4628      	mov	r0, r5
    4708:	f007 fa5c 	bl	bbc4 <free>
    470c:	e768      	b.n	45e0 <convert.part.0+0xb0>
    else if (item->vt == DLMS_DATA_TYPE_STRING)
    470e:	7823      	ldrb	r3, [r4, #0]
    4710:	2b0a      	cmp	r3, #10
    4712:	d164      	bne.n	47de <convert.part.0+0x2ae>
        if (type == DLMS_DATA_TYPE_BOOLEAN)
    4714:	2d03      	cmp	r5, #3
    4716:	d109      	bne.n	472c <convert.part.0+0x1fc>
            item->boolVal = strcmp((char*)tmp.strVal->data, "False") == 0 ? 0 : 1;
    4718:	9b04      	ldr	r3, [sp, #16]
    471a:	494c      	ldr	r1, [pc, #304]	; (484c <convert.part.0+0x31c>)
    471c:	6818      	ldr	r0, [r3, #0]
    471e:	f7fc fb45 	bl	dac <strcmp>
    4722:	3800      	subs	r0, #0
    4724:	bf18      	it	ne
    4726:	2001      	movne	r0, #1
            item->bVal = (unsigned char)hlp_stringToInt((char*)tmp.strVal->data);
    4728:	7220      	strb	r0, [r4, #8]
            item->vt = type;
    472a:	e006      	b.n	473a <convert.part.0+0x20a>
        else if (type == DLMS_DATA_TYPE_INT32)
    472c:	2d05      	cmp	r5, #5
    472e:	d106      	bne.n	473e <convert.part.0+0x20e>
            item->ulVal = hlp_stringToInt((char*)tmp.strVal->data) & 0xFFFFFFFF;
    4730:	9b04      	ldr	r3, [sp, #16]
    4732:	6818      	ldr	r0, [r3, #0]
    4734:	f015 f97d 	bl	19a32 <hlp_stringToInt>
    4738:	60a0      	str	r0, [r4, #8]
    item->vt = type;
    473a:	7025      	strb	r5, [r4, #0]
    473c:	e752      	b.n	45e4 <convert.part.0+0xb4>
        else if (type == DLMS_DATA_TYPE_UINT32)
    473e:	2d06      	cmp	r5, #6
    4740:	d0f6      	beq.n	4730 <convert.part.0+0x200>
        else if (type == DLMS_DATA_TYPE_INT8)
    4742:	2d0f      	cmp	r5, #15
    4744:	d104      	bne.n	4750 <convert.part.0+0x220>
            item->bVal = (unsigned char)hlp_stringToInt((char*)tmp.strVal->data);
    4746:	9b04      	ldr	r3, [sp, #16]
    4748:	6818      	ldr	r0, [r3, #0]
    474a:	f015 f972 	bl	19a32 <hlp_stringToInt>
    474e:	e7eb      	b.n	4728 <convert.part.0+0x1f8>
        else if (type == DLMS_DATA_TYPE_INT16)
    4750:	2d10      	cmp	r5, #16
    4752:	d105      	bne.n	4760 <convert.part.0+0x230>
            item->iVal = (short)hlp_stringToInt((char*)tmp.strVal->data);
    4754:	9b04      	ldr	r3, [sp, #16]
    4756:	6818      	ldr	r0, [r3, #0]
    4758:	f015 f96b 	bl	19a32 <hlp_stringToInt>
    475c:	8120      	strh	r0, [r4, #8]
            item->vt = type;
    475e:	e7ec      	b.n	473a <convert.part.0+0x20a>
        else if (type == DLMS_DATA_TYPE_UINT8)
    4760:	2d11      	cmp	r5, #17
    4762:	d0f0      	beq.n	4746 <convert.part.0+0x216>
        else if (type == DLMS_DATA_TYPE_UINT16)
    4764:	2d12      	cmp	r5, #18
    4766:	d106      	bne.n	4776 <convert.part.0+0x246>
            item->uiVal = (uint16_t)hlp_stringToInt((char*)tmp.strVal->data);
    4768:	9b04      	ldr	r3, [sp, #16]
    476a:	6818      	ldr	r0, [r3, #0]
    476c:	f015 f961 	bl	19a32 <hlp_stringToInt>
            item->vt = type;
    4770:	2312      	movs	r3, #18
            item->uiVal = (uint16_t)hlp_stringToInt((char*)tmp.strVal->data);
    4772:	8120      	strh	r0, [r4, #8]
            item->vt = type;
    4774:	e735      	b.n	45e2 <convert.part.0+0xb2>
        else if (type == DLMS_DATA_TYPE_INT64)
    4776:	2d14      	cmp	r5, #20
    4778:	d106      	bne.n	4788 <convert.part.0+0x258>
            item->ullVal = (uint64_t)hlp_stringToInt64((char*)tmp.strVal->data);
    477a:	9b04      	ldr	r3, [sp, #16]
    477c:	6818      	ldr	r0, [r3, #0]
    477e:	f015 f9c7 	bl	19b10 <hlp_stringToInt64>
    4782:	e9c4 0102 	strd	r0, r1, [r4, #8]
            item->vt = type;
    4786:	e7d8      	b.n	473a <convert.part.0+0x20a>
        else if (type == DLMS_DATA_TYPE_UINT64)
    4788:	2d15      	cmp	r5, #21
    478a:	d0f6      	beq.n	477a <convert.part.0+0x24a>
        else if (type == DLMS_DATA_TYPE_ENUM)
    478c:	2d16      	cmp	r5, #22
    478e:	d0da      	beq.n	4746 <convert.part.0+0x216>
        else if (type == DLMS_DATA_TYPE_FLOAT32)
    4790:	2d17      	cmp	r5, #23
    4792:	d107      	bne.n	47a4 <convert.part.0+0x274>
            sscanf((char*)tmp.strVal->data, "%f", &item->fltVal);
    4794:	9b04      	ldr	r3, [sp, #16]
    4796:	492f      	ldr	r1, [pc, #188]	; (4854 <convert.part.0+0x324>)
    4798:	f104 0208 	add.w	r2, r4, #8
            sscanf((char*)tmp.strVal->data, "%lf", &item->dblVal);
    479c:	6818      	ldr	r0, [r3, #0]
    479e:	f007 fad9 	bl	bd54 <siscanf>
            item->vt = type;
    47a2:	e7ca      	b.n	473a <convert.part.0+0x20a>
        else if (type == DLMS_DATA_TYPE_FLOAT64)
    47a4:	2d18      	cmp	r5, #24
    47a6:	d104      	bne.n	47b2 <convert.part.0+0x282>
            sscanf((char*)tmp.strVal->data, "%lf", &item->dblVal);
    47a8:	9b04      	ldr	r3, [sp, #16]
    47aa:	492b      	ldr	r1, [pc, #172]	; (4858 <convert.part.0+0x328>)
    47ac:	f104 0208 	add.w	r2, r4, #8
    47b0:	e7f4      	b.n	479c <convert.part.0+0x26c>
        else if (type == DLMS_DATA_TYPE_OCTET_STRING)
    47b2:	2d09      	cmp	r5, #9
    47b4:	d13f      	bne.n	4836 <convert.part.0+0x306>
            char* pBuff = (char*)tmp.strVal->data;
    47b6:	9b04      	ldr	r3, [sp, #16]
            item->byteArr = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
    47b8:	200c      	movs	r0, #12
            char* pBuff = (char*)tmp.strVal->data;
    47ba:	681f      	ldr	r7, [r3, #0]
            item->byteArr = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
    47bc:	f007 f9fa 	bl	bbb4 <malloc>
    47c0:	60a0      	str	r0, [r4, #8]
            BYTE_BUFFER_INIT(item->byteArr);
    47c2:	f008 fa0f 	bl	cbe4 <bb_init>
            bb_addHexString(item->byteArr, pBuff);
    47c6:	4639      	mov	r1, r7
    47c8:	68a0      	ldr	r0, [r4, #8]
    47ca:	f008 fd24 	bl	d216 <bb_addHexString>
            item->vt = type;
    47ce:	7025      	strb	r5, [r4, #0]
            var_clear(&tmp);
    47d0:	a802      	add	r0, sp, #8
    47d2:	f015 fce8 	bl	1a1a6 <var_clear>
            bb_trim(item->byteArr);
    47d6:	68a0      	ldr	r0, [r4, #8]
    47d8:	f008 fda9 	bl	d32e <bb_trim>
            return DLMS_ERROR_CODE_OK;
    47dc:	e72c      	b.n	4638 <convert.part.0+0x108>
    fromSize = var_getSize(tmp.vt);
    47de:	f89d 2008 	ldrb.w	r2, [sp, #8]
    switch (vt)
    47e2:	2a19      	cmp	r2, #25
    47e4:	f10d 0810 	add.w	r8, sp, #16
    47e8:	d82a      	bhi.n	4840 <convert.part.0+0x310>
    47ea:	491c      	ldr	r1, [pc, #112]	; (485c <convert.part.0+0x32c>)
    47ec:	2b19      	cmp	r3, #25
    47ee:	568f      	ldrsb	r7, [r1, r2]
    47f0:	d80e      	bhi.n	4810 <convert.part.0+0x2e0>
    47f2:	4a1a      	ldr	r2, [pc, #104]	; (485c <convert.part.0+0x32c>)
    47f4:	56d2      	ldrsb	r2, [r2, r3]
    if (fromSize > toSize)
    47f6:	42ba      	cmp	r2, r7
    47f8:	db0d      	blt.n	4816 <convert.part.0+0x2e6>
        memset(&item->bVal, 0, toSize);
    47fa:	f104 0308 	add.w	r3, r4, #8
__ssp_bos_icheck3(memset, void *, int)
    47fe:	2100      	movs	r1, #0
    4800:	4618      	mov	r0, r3
    4802:	f017 fca8 	bl	1c156 <memset>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    4806:	463a      	mov	r2, r7
    4808:	4641      	mov	r1, r8
    480a:	f017 fc69 	bl	1c0e0 <memcpy>
    480e:	e794      	b.n	473a <convert.part.0+0x20a>
    fromSize = var_getSize(tmp.vt);
    4810:	f04f 32ff 	mov.w	r2, #4294967295
    4814:	e7ef      	b.n	47f6 <convert.part.0+0x2c6>
        for (pos = (unsigned char)toSize; pos != (unsigned char)fromSize; ++pos)
    4816:	b2d3      	uxtb	r3, r2
    4818:	b2bf      	uxth	r7, r7
    481a:	429f      	cmp	r7, r3
    481c:	d103      	bne.n	4826 <convert.part.0+0x2f6>
    481e:	4641      	mov	r1, r8
    4820:	f104 0008 	add.w	r0, r4, #8
    4824:	e7f1      	b.n	480a <convert.part.0+0x2da>
            if (pValue[pos] != 0)
    4826:	f818 1003 	ldrb.w	r1, [r8, r3]
    482a:	b931      	cbnz	r1, 483a <convert.part.0+0x30a>
        for (pos = (unsigned char)toSize; pos != (unsigned char)fromSize; ++pos)
    482c:	3301      	adds	r3, #1
    482e:	b29b      	uxth	r3, r3
    4830:	e7f3      	b.n	481a <convert.part.0+0x2ea>
                ret = var_copy(&tmp3, it);
    4832:	4606      	mov	r6, r0
    4834:	e700      	b.n	4638 <convert.part.0+0x108>
        return DLMS_ERROR_CODE_NOT_IMPLEMENTED;
    4836:	26fe      	movs	r6, #254	; 0xfe
    4838:	e6fe      	b.n	4638 <convert.part.0+0x108>
                return DLMS_ERROR_CODE_INVALID_PARAMETER;
    483a:	f44f 7681 	mov.w	r6, #258	; 0x102
    483e:	e6fb      	b.n	4638 <convert.part.0+0x108>
    switch (vt)
    4840:	2b19      	cmp	r3, #25
    fromSize = var_getSize(tmp.vt);
    4842:	f04f 37ff 	mov.w	r7, #4294967295
    4846:	d9d4      	bls.n	47f2 <convert.part.0+0x2c2>
    4848:	463a      	mov	r2, r7
    484a:	e7d6      	b.n	47fa <convert.part.0+0x2ca>
    484c:	0001d728 	.word	0x0001d728
    4850:	0001d72e 	.word	0x0001d72e
    4854:	0001d733 	.word	0x0001d733
    4858:	0001d736 	.word	0x0001d736
    485c:	0001d73a 	.word	0x0001d73a

00004860 <var_changeType>:
{
    4860:	b410      	push	{r4}
    if (newType == value->vt)
    4862:	7802      	ldrb	r2, [r0, #0]
    4864:	428a      	cmp	r2, r1
{
    4866:	4604      	mov	r4, r0
    4868:	460b      	mov	r3, r1
    if (newType == value->vt)
    486a:	d007      	beq.n	487c <var_changeType+0x1c>
    if (newType == DLMS_DATA_TYPE_NONE)
    486c:	b911      	cbnz	r1, 4874 <var_changeType+0x14>
}
    486e:	bc10      	pop	{r4}
        return var_clear(value);
    4870:	f015 bc99 	b.w	1a1a6 <var_clear>
    if (value->vt == DLMS_DATA_TYPE_ARRAY && newType == DLMS_DATA_TYPE_OCTET_STRING)
    4874:	2a01      	cmp	r2, #1
    4876:	d103      	bne.n	4880 <var_changeType+0x20>
    4878:	2909      	cmp	r1, #9
    487a:	d17c      	bne.n	4976 <var_changeType+0x116>
    return DLMS_ERROR_CODE_OK;
    487c:	2000      	movs	r0, #0
    487e:	e02d      	b.n	48dc <var_changeType+0x7c>
    if (value->vt == DLMS_DATA_TYPE_STRING)
    4880:	2a0a      	cmp	r2, #10
    4882:	d102      	bne.n	488a <var_changeType+0x2a>
}
    4884:	bc10      	pop	{r4}
    4886:	f7ff be53 	b.w	4530 <convert.part.0>
    switch (newType)
    488a:	3903      	subs	r1, #3
    488c:	2915      	cmp	r1, #21
    488e:	d80f      	bhi.n	48b0 <var_changeType+0x50>
    4890:	e8df f001 	tbb	[pc, r1]
    4894:	0b0b0e0b 	.word	0x0b0b0e0b
    4898:	0b0e0e0e 	.word	0x0b0e0e0e
    489c:	0e0e0e0e 	.word	0x0e0e0e0e
    48a0:	0b0b0b0b 	.word	0x0b0b0b0b
    48a4:	0b0b0b0e 	.word	0x0b0b0b0e
    48a8:	0b0b      	.short	0x0b0b
    if (item->vt == type)
    48aa:	4619      	mov	r1, r3
    48ac:	4620      	mov	r0, r4
    48ae:	e7e9      	b.n	4884 <var_changeType+0x24>
    switch (value->vt)
    48b0:	3a05      	subs	r2, #5
    48b2:	2a16      	cmp	r2, #22
    48b4:	d85c      	bhi.n	4970 <var_changeType+0x110>
    48b6:	e8df f002 	tbb	[pc, r2]
    48ba:	0c0c      	.short	0x0c0c
    48bc:	5b135b5b 	.word	0x5b135b5b
    48c0:	5b1b5b5b 	.word	0x5b1b5b5b
    48c4:	0c0c0c0c 	.word	0x0c0c0c0c
    48c8:	0c0c0c5b 	.word	0x0c0c0c5b
    48cc:	56490c0c 	.word	0x56490c0c
    48d0:	56          	.byte	0x56
    48d1:	00          	.byte	0x00
        switch (newType)
    48d2:	2b0d      	cmp	r3, #13
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
    48d4:	bf0c      	ite	eq
    48d6:	20fe      	moveq	r0, #254	; 0xfe
    48d8:	f44f 7081 	movne.w	r0, #258	; 0x102
}
    48dc:	bc10      	pop	{r4}
    48de:	4770      	bx	lr
        switch (newType)
    48e0:	3b19      	subs	r3, #25
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
    48e2:	2b02      	cmp	r3, #2
    48e4:	bf98      	it	ls
    48e6:	20fe      	movls	r0, #254	; 0xfe
    48e8:	bf88      	it	hi
    48ea:	f44f 7081 	movhi.w	r0, #258	; 0x102
    48ee:	e7f5      	b.n	48dc <var_changeType+0x7c>
        switch (newType)
    48f0:	3b05      	subs	r3, #5
    48f2:	2b13      	cmp	r3, #19
    48f4:	d83c      	bhi.n	4970 <var_changeType+0x110>
    48f6:	a201      	add	r2, pc, #4	; (adr r2, 48fc <var_changeType+0x9c>)
    48f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    48fc:	0000487d 	.word	0x0000487d
    4900:	0000487d 	.word	0x0000487d
    4904:	00004971 	.word	0x00004971
    4908:	00004971 	.word	0x00004971
    490c:	00004971 	.word	0x00004971
    4910:	0000487d 	.word	0x0000487d
    4914:	00004971 	.word	0x00004971
    4918:	00004971 	.word	0x00004971
    491c:	00004971 	.word	0x00004971
    4920:	00004971 	.word	0x00004971
    4924:	0000487d 	.word	0x0000487d
    4928:	0000487d 	.word	0x0000487d
    492c:	0000487d 	.word	0x0000487d
    4930:	0000487d 	.word	0x0000487d
    4934:	00004971 	.word	0x00004971
    4938:	0000487d 	.word	0x0000487d
    493c:	0000487d 	.word	0x0000487d
    4940:	0000487d 	.word	0x0000487d
    4944:	0000487d 	.word	0x0000487d
    4948:	0000487d 	.word	0x0000487d
        switch (newType)
    494c:	2b0a      	cmp	r3, #10
    494e:	d805      	bhi.n	495c <var_changeType+0xfc>
    return DLMS_ERROR_CODE_OK;
    4950:	2b09      	cmp	r3, #9
    4952:	bf34      	ite	cc
    4954:	f44f 7081 	movcc.w	r0, #258	; 0x102
    4958:	2000      	movcs	r0, #0
    495a:	e7bf      	b.n	48dc <var_changeType+0x7c>
    495c:	3b1a      	subs	r3, #26
    495e:	2b01      	cmp	r3, #1
    4960:	bf98      	it	ls
    4962:	2000      	movls	r0, #0
    4964:	e7c0      	b.n	48e8 <var_changeType+0x88>
        switch (newType)
    4966:	2b0a      	cmp	r3, #10
    4968:	d9f2      	bls.n	4950 <var_changeType+0xf0>
    496a:	3b19      	subs	r3, #25
    496c:	2b02      	cmp	r3, #2
    496e:	e7f7      	b.n	4960 <var_changeType+0x100>
    if (value->vt == DLMS_DATA_TYPE_ARRAY && newType == DLMS_DATA_TYPE_OCTET_STRING)
    4970:	f44f 7081 	mov.w	r0, #258	; 0x102
    4974:	e7b2      	b.n	48dc <var_changeType+0x7c>
    switch (newType)
    4976:	1eca      	subs	r2, r1, #3
    4978:	2a15      	cmp	r2, #21
    497a:	d8f9      	bhi.n	4970 <var_changeType+0x110>
    497c:	a101      	add	r1, pc, #4	; (adr r1, 4984 <var_changeType+0x124>)
    497e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    4982:	bf00      	nop
    4984:	000048ab 	.word	0x000048ab
    4988:	00004971 	.word	0x00004971
    498c:	000048ab 	.word	0x000048ab
    4990:	000048ab 	.word	0x000048ab
    4994:	00004971 	.word	0x00004971
    4998:	00004971 	.word	0x00004971
    499c:	00004971 	.word	0x00004971
    49a0:	000048ab 	.word	0x000048ab
    49a4:	00004971 	.word	0x00004971
    49a8:	00004971 	.word	0x00004971
    49ac:	00004971 	.word	0x00004971
    49b0:	00004971 	.word	0x00004971
    49b4:	000048ab 	.word	0x000048ab
    49b8:	000048ab 	.word	0x000048ab
    49bc:	000048ab 	.word	0x000048ab
    49c0:	000048ab 	.word	0x000048ab
    49c4:	00004971 	.word	0x00004971
    49c8:	000048ab 	.word	0x000048ab
    49cc:	000048ab 	.word	0x000048ab
    49d0:	000048ab 	.word	0x000048ab
    49d4:	000048ab 	.word	0x000048ab
    49d8:	000048ab 	.word	0x000048ab

000049dc <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    49dc:	680b      	ldr	r3, [r1, #0]
    49de:	3301      	adds	r3, #1
    49e0:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    49e2:	4b01      	ldr	r3, [pc, #4]	; (49e8 <char_out+0xc>)
    49e4:	681b      	ldr	r3, [r3, #0]
    49e6:	4718      	bx	r3
    49e8:	20000000 	.word	0x20000000

000049ec <__printk_hook_install>:
	_char_out = fn;
    49ec:	4b01      	ldr	r3, [pc, #4]	; (49f4 <__printk_hook_install+0x8>)
    49ee:	6018      	str	r0, [r3, #0]
}
    49f0:	4770      	bx	lr
    49f2:	bf00      	nop
    49f4:	20000000 	.word	0x20000000

000049f8 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    49f8:	b507      	push	{r0, r1, r2, lr}
    49fa:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    49fc:	2100      	movs	r1, #0
{
    49fe:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    4a00:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    4a02:	4803      	ldr	r0, [pc, #12]	; (4a10 <vprintk+0x18>)
    4a04:	a901      	add	r1, sp, #4
    4a06:	f000 f965 	bl	4cd4 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    4a0a:	b003      	add	sp, #12
    4a0c:	f85d fb04 	ldr.w	pc, [sp], #4
    4a10:	000049dd 	.word	0x000049dd

00004a14 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    4a14:	b530      	push	{r4, r5, lr}
    4a16:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    4a18:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    4a1c:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    4a1e:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
    4a20:	a901      	add	r1, sp, #4
    4a22:	4805      	ldr	r0, [pc, #20]	; (4a38 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    4a24:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
    4a26:	f000 f955 	bl	4cd4 <cbvprintf>

	if (ctx.count < ctx.max) {
    4a2a:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    4a2e:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    4a30:	bfb8      	it	lt
    4a32:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    4a34:	b005      	add	sp, #20
    4a36:	bd30      	pop	{r4, r5, pc}
    4a38:	0001a763 	.word	0x0001a763

00004a3c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    4a3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4a40:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    4a44:	f019 0808 	ands.w	r8, r9, #8
{
    4a48:	4604      	mov	r4, r0
    4a4a:	4693      	mov	fp, r2
	if (processing) {
    4a4c:	d00d      	beq.n	4a6a <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    4a4e:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    4a50:	bf0c      	ite	eq
    4a52:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    4a56:	f049 0920 	orrne.w	r9, r9, #32
    4a5a:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    4a5e:	f38b 8811 	msr	BASEPRI, fp
    4a62:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    4a66:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4a6a:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    4a6e:	2902      	cmp	r1, #2
    4a70:	d107      	bne.n	4a82 <process_event+0x46>
			evt = process_recheck(mgr);
    4a72:	4620      	mov	r0, r4
    4a74:	f015 fea2 	bl	1a7bc <process_recheck>
		if (evt == EVT_NOP) {
    4a78:	2800      	cmp	r0, #0
    4a7a:	d0f0      	beq.n	4a5e <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    4a7c:	2801      	cmp	r0, #1
    4a7e:	8b23      	ldrh	r3, [r4, #24]
    4a80:	d150      	bne.n	4b24 <process_event+0xe8>
			res = mgr->last_res;
    4a82:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4a84:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    4a86:	2f00      	cmp	r7, #0
    4a88:	da15      	bge.n	4ab6 <process_event+0x7a>
		*clients = mgr->clients;
    4a8a:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4a8c:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    4a90:	e9c4 8800 	strd	r8, r8, [r4]
    4a94:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    4a98:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    4a9a:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    4a9c:	8b21      	ldrh	r1, [r4, #24]
    4a9e:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    4aa2:	45ca      	cmp	sl, r9
    4aa4:	d002      	beq.n	4aac <process_event+0x70>
		if (do_monitors
    4aa6:	68a3      	ldr	r3, [r4, #8]
    4aa8:	2b00      	cmp	r3, #0
    4aaa:	d15c      	bne.n	4b66 <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
    4aac:	b90d      	cbnz	r5, 4ab2 <process_event+0x76>
		    || (transit != NULL)) {
    4aae:	2e00      	cmp	r6, #0
    4ab0:	d074      	beq.n	4b9c <process_event+0x160>
    4ab2:	2300      	movs	r3, #0
    4ab4:	e058      	b.n	4b68 <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4ab6:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    4aba:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    4abc:	2a01      	cmp	r2, #1
    4abe:	d820      	bhi.n	4b02 <process_event+0xc6>
		*clients = mgr->clients;
    4ac0:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    4ac4:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    4ac6:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
    4ac8:	b289      	uxth	r1, r1
	list->tail = NULL;
    4aca:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    4ace:	d10c      	bne.n	4aea <process_event+0xae>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    4ad0:	2d00      	cmp	r5, #0
    4ad2:	462b      	mov	r3, r5
    4ad4:	bf38      	it	cc
    4ad6:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    4ad8:	b12b      	cbz	r3, 4ae6 <process_event+0xaa>
				mgr->refs += 1U;
    4ada:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    4adc:	681b      	ldr	r3, [r3, #0]
    4ade:	3201      	adds	r2, #1
    4ae0:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    4ae2:	2b00      	cmp	r3, #0
    4ae4:	d1f8      	bne.n	4ad8 <process_event+0x9c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4ae6:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    4aea:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    4aec:	4620      	mov	r0, r4
    4aee:	f015 fe65 	bl	1a7bc <process_recheck>
    4af2:	4606      	mov	r6, r0
    4af4:	2800      	cmp	r0, #0
    4af6:	d0d1      	beq.n	4a9c <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    4af8:	8b23      	ldrh	r3, [r4, #24]
    4afa:	f043 0320 	orr.w	r3, r3, #32
    4afe:	8323      	strh	r3, [r4, #24]
    4b00:	e7cb      	b.n	4a9a <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    4b02:	2b04      	cmp	r3, #4
    4b04:	d10c      	bne.n	4b20 <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4b06:	f021 0107 	bic.w	r1, r1, #7
    4b0a:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    4b0c:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    4b0e:	4620      	mov	r0, r4
    4b10:	f015 fe54 	bl	1a7bc <process_recheck>
    4b14:	4605      	mov	r5, r0
    4b16:	2800      	cmp	r0, #0
    4b18:	d0bf      	beq.n	4a9a <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    4b1a:	f041 0120 	orr.w	r1, r1, #32
    4b1e:	8321      	strh	r1, [r4, #24]
    4b20:	2500      	movs	r5, #0
    4b22:	e7ba      	b.n	4a9a <process_event+0x5e>
		} else if (evt == EVT_START) {
    4b24:	2803      	cmp	r0, #3
    4b26:	d109      	bne.n	4b3c <process_event+0x100>
			transit = mgr->transitions->start;
    4b28:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4b2a:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    4b2e:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4b30:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    4b34:	8323      	strh	r3, [r4, #24]
}
    4b36:	2500      	movs	r5, #0
		res = 0;
    4b38:	462f      	mov	r7, r5
    4b3a:	e7af      	b.n	4a9c <process_event+0x60>
		} else if (evt == EVT_STOP) {
    4b3c:	2804      	cmp	r0, #4
    4b3e:	d106      	bne.n	4b4e <process_event+0x112>
			transit = mgr->transitions->stop;
    4b40:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4b42:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    4b46:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4b48:	f043 0304 	orr.w	r3, r3, #4
    4b4c:	e7f2      	b.n	4b34 <process_event+0xf8>
		} else if (evt == EVT_RESET) {
    4b4e:	2805      	cmp	r0, #5
    4b50:	d106      	bne.n	4b60 <process_event+0x124>
			transit = mgr->transitions->reset;
    4b52:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4b54:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    4b58:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4b5a:	f043 0305 	orr.w	r3, r3, #5
    4b5e:	e7e9      	b.n	4b34 <process_event+0xf8>
    4b60:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    4b62:	462e      	mov	r6, r5
    4b64:	e7e8      	b.n	4b38 <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
    4b66:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    4b68:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    4b6c:	8321      	strh	r1, [r4, #24]
    4b6e:	f38b 8811 	msr	BASEPRI, fp
    4b72:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    4b76:	bb03      	cbnz	r3, 4bba <process_event+0x17e>
	while (!sys_slist_is_empty(list)) {
    4b78:	2d00      	cmp	r5, #0
    4b7a:	d133      	bne.n	4be4 <process_event+0x1a8>
			if (transit != NULL) {
    4b7c:	b116      	cbz	r6, 4b84 <process_event+0x148>
				transit(mgr, transition_complete);
    4b7e:	4921      	ldr	r1, [pc, #132]	; (4c04 <process_event+0x1c8>)
    4b80:	4620      	mov	r0, r4
    4b82:	47b0      	blx	r6
	__asm__ volatile(
    4b84:	f04f 0320 	mov.w	r3, #32
    4b88:	f3ef 8b11 	mrs	fp, BASEPRI
    4b8c:	f383 8811 	msr	BASEPRI, r3
    4b90:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    4b94:	8b23      	ldrh	r3, [r4, #24]
    4b96:	f023 0308 	bic.w	r3, r3, #8
    4b9a:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    4b9c:	8b23      	ldrh	r3, [r4, #24]
    4b9e:	06da      	lsls	r2, r3, #27
    4ba0:	d528      	bpl.n	4bf4 <process_event+0x1b8>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    4ba2:	f023 0310 	bic.w	r3, r3, #16
    4ba6:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    4ba8:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    4baa:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    4bae:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    4bb2:	2900      	cmp	r1, #0
    4bb4:	f47f af5b 	bne.w	4a6e <process_event+0x32>
out:
    4bb8:	e751      	b.n	4a5e <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    4bba:	68a1      	ldr	r1, [r4, #8]
    4bbc:	2900      	cmp	r1, #0
    4bbe:	d0db      	beq.n	4b78 <process_event+0x13c>
	return node->next;
    4bc0:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
    4bc2:	f8d1 b004 	ldr.w	fp, [r1, #4]
    4bc6:	2b00      	cmp	r3, #0
    4bc8:	bf38      	it	cc
    4bca:	2300      	movcc	r3, #0
    4bcc:	4699      	mov	r9, r3
    4bce:	4652      	mov	r2, sl
    4bd0:	463b      	mov	r3, r7
    4bd2:	4620      	mov	r0, r4
    4bd4:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    4bd6:	f1b9 0f00 	cmp.w	r9, #0
    4bda:	d0cd      	beq.n	4b78 <process_event+0x13c>
    4bdc:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    4be0:	4649      	mov	r1, r9
    4be2:	e7ee      	b.n	4bc2 <process_event+0x186>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    4be4:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    4be6:	463b      	mov	r3, r7
    4be8:	4652      	mov	r2, sl
    4bea:	4620      	mov	r0, r4
    4bec:	682d      	ldr	r5, [r5, #0]
    4bee:	f015 fe01 	bl	1a7f4 <notify_one>
    4bf2:	e7c1      	b.n	4b78 <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    4bf4:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    4bf8:	bf1e      	ittt	ne
    4bfa:	f023 0320 	bicne.w	r3, r3, #32
    4bfe:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    4c00:	2102      	movne	r1, #2
    4c02:	e7d2      	b.n	4baa <process_event+0x16e>
    4c04:	0001a821 	.word	0x0001a821

00004c08 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    4c08:	b5f0      	push	{r4, r5, r6, r7, lr}
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
    4c0a:	4e09      	ldr	r6, [pc, #36]	; (4c30 <extract_decimal+0x28>)
    4c0c:	6801      	ldr	r1, [r0, #0]
{
    4c0e:	4602      	mov	r2, r0
		val = 10U * val + *sp++ - '0';
    4c10:	270a      	movs	r7, #10
	size_t val = 0;
    4c12:	2000      	movs	r0, #0
    4c14:	460c      	mov	r4, r1
	while (isdigit((int)(unsigned char)*sp)) {
    4c16:	3101      	adds	r1, #1
    4c18:	7823      	ldrb	r3, [r4, #0]
    4c1a:	5d9d      	ldrb	r5, [r3, r6]
    4c1c:	076d      	lsls	r5, r5, #29
    4c1e:	d401      	bmi.n	4c24 <extract_decimal+0x1c>
	}
	*str = sp;
    4c20:	6014      	str	r4, [r2, #0]
	return val;
}
    4c22:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
    4c24:	fb07 3300 	mla	r3, r7, r0, r3
    4c28:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    4c2c:	e7f2      	b.n	4c14 <extract_decimal+0xc>
    4c2e:	bf00      	nop
    4c30:	0001e1a5 	.word	0x0001e1a5

00004c34 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    4c34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4c38:	4614      	mov	r4, r2
    4c3a:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
    4c3c:	78d3      	ldrb	r3, [r2, #3]
    4c3e:	4a24      	ldr	r2, [pc, #144]	; (4cd0 <encode_uint+0x9c>)
    4c40:	f813 a002 	ldrb.w	sl, [r3, r2]
	switch (specifier) {
    4c44:	2b6f      	cmp	r3, #111	; 0x6f
    4c46:	f00a 0203 	and.w	r2, sl, #3
{
    4c4a:	4606      	mov	r6, r0
    4c4c:	460f      	mov	r7, r1
    4c4e:	9201      	str	r2, [sp, #4]
	switch (specifier) {
    4c50:	d02d      	beq.n	4cae <encode_uint+0x7a>
    4c52:	d828      	bhi.n	4ca6 <encode_uint+0x72>
		return 16;
    4c54:	2b58      	cmp	r3, #88	; 0x58
    4c56:	bf14      	ite	ne
    4c58:	250a      	movne	r5, #10
    4c5a:	2510      	moveq	r5, #16
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    4c5c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30

	do {
		unsigned int lsv = (unsigned int)(value % radix);
    4c60:	46aa      	mov	sl, r5
    4c62:	f04f 0b00 	mov.w	fp, #0
    4c66:	4652      	mov	r2, sl
    4c68:	465b      	mov	r3, fp
    4c6a:	4630      	mov	r0, r6
    4c6c:	4639      	mov	r1, r7
    4c6e:	f7fb ff23 	bl	ab8 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
    4c72:	2a09      	cmp	r2, #9
    4c74:	b2d3      	uxtb	r3, r2
    4c76:	d81f      	bhi.n	4cb8 <encode_uint+0x84>
    4c78:	3330      	adds	r3, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
    4c7a:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4c7c:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
    4c7e:	bf08      	it	eq
    4c80:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4c82:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
    4c86:	d301      	bcc.n	4c8c <encode_uint+0x58>
    4c88:	45c8      	cmp	r8, r9
    4c8a:	d812      	bhi.n	4cb2 <encode_uint+0x7e>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    4c8c:	7823      	ldrb	r3, [r4, #0]
    4c8e:	069b      	lsls	r3, r3, #26
    4c90:	d505      	bpl.n	4c9e <encode_uint+0x6a>
		if (radix == 8) {
    4c92:	2d08      	cmp	r5, #8
    4c94:	d116      	bne.n	4cc4 <encode_uint+0x90>
			conv->altform_0 = true;
    4c96:	78a3      	ldrb	r3, [r4, #2]
    4c98:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
    4c9c:	70a3      	strb	r3, [r4, #2]
			;
		}
	}

	return bp;
}
    4c9e:	4640      	mov	r0, r8
    4ca0:	b003      	add	sp, #12
    4ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    4ca6:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    4caa:	2b70      	cmp	r3, #112	; 0x70
    4cac:	e7d3      	b.n	4c56 <encode_uint+0x22>
	switch (specifier) {
    4cae:	2508      	movs	r5, #8
    4cb0:	e7d4      	b.n	4c5c <encode_uint+0x28>
		value /= radix;
    4cb2:	4606      	mov	r6, r0
    4cb4:	460f      	mov	r7, r1
    4cb6:	e7d6      	b.n	4c66 <encode_uint+0x32>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4cb8:	9a01      	ldr	r2, [sp, #4]
    4cba:	2a01      	cmp	r2, #1
    4cbc:	bf0c      	ite	eq
    4cbe:	3337      	addeq	r3, #55	; 0x37
    4cc0:	3357      	addne	r3, #87	; 0x57
    4cc2:	e7da      	b.n	4c7a <encode_uint+0x46>
		} else if (radix == 16) {
    4cc4:	2d10      	cmp	r5, #16
    4cc6:	d1ea      	bne.n	4c9e <encode_uint+0x6a>
			conv->altform_0c = true;
    4cc8:	78a3      	ldrb	r3, [r4, #2]
    4cca:	f043 0310 	orr.w	r3, r3, #16
    4cce:	e7e5      	b.n	4c9c <encode_uint+0x68>
    4cd0:	0001e1a5 	.word	0x0001e1a5

00004cd4 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    4cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4cd8:	4682      	mov	sl, r0
    4cda:	b093      	sub	sp, #76	; 0x4c
    4cdc:	468b      	mov	fp, r1
    4cde:	4691      	mov	r9, r2
    4ce0:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    4ce2:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    4ce4:	f899 0000 	ldrb.w	r0, [r9]
    4ce8:	b908      	cbnz	r0, 4cee <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    4cea:	4628      	mov	r0, r5
    4cec:	e33a      	b.n	5364 <cbvprintf+0x690>
		if (*fp != '%') {
    4cee:	f109 0301 	add.w	r3, r9, #1
    4cf2:	2825      	cmp	r0, #37	; 0x25
    4cf4:	9302      	str	r3, [sp, #8]
    4cf6:	d006      	beq.n	4d06 <cbvprintf+0x32>
			OUTC('%');
    4cf8:	4659      	mov	r1, fp
    4cfa:	47d0      	blx	sl
    4cfc:	2800      	cmp	r0, #0
    4cfe:	f2c0 8331 	blt.w	5364 <cbvprintf+0x690>
    4d02:	3501      	adds	r5, #1
			break;
    4d04:	e1f1      	b.n	50ea <cbvprintf+0x416>
		} state = {
    4d06:	2218      	movs	r2, #24
    4d08:	2100      	movs	r1, #0
    4d0a:	a80c      	add	r0, sp, #48	; 0x30
    4d0c:	f017 fa23 	bl	1c156 <memset>
	if (*sp == '%') {
    4d10:	f899 3001 	ldrb.w	r3, [r9, #1]
    4d14:	2b25      	cmp	r3, #37	; 0x25
    4d16:	d059      	beq.n	4dcc <cbvprintf+0xf8>
    4d18:	9a02      	ldr	r2, [sp, #8]
    4d1a:	4616      	mov	r6, r2
		switch (*sp) {
    4d1c:	f812 3b01 	ldrb.w	r3, [r2], #1
    4d20:	2b2b      	cmp	r3, #43	; 0x2b
    4d22:	f000 808b 	beq.w	4e3c <cbvprintf+0x168>
    4d26:	d879      	bhi.n	4e1c <cbvprintf+0x148>
    4d28:	2b20      	cmp	r3, #32
    4d2a:	f000 808c 	beq.w	4e46 <cbvprintf+0x172>
    4d2e:	2b23      	cmp	r3, #35	; 0x23
    4d30:	f000 808e 	beq.w	4e50 <cbvprintf+0x17c>
	if (conv->flag_zero && conv->flag_dash) {
    4d34:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    4d38:	f003 0244 	and.w	r2, r3, #68	; 0x44
    4d3c:	2a44      	cmp	r2, #68	; 0x44
    4d3e:	d103      	bne.n	4d48 <cbvprintf+0x74>
		conv->flag_zero = false;
    4d40:	f36f 1386 	bfc	r3, #6, #1
    4d44:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	conv->width_present = true;
    4d48:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    4d4c:	9605      	str	r6, [sp, #20]
    4d4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    4d52:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	if (*sp == '*') {
    4d56:	7833      	ldrb	r3, [r6, #0]
    4d58:	2b2a      	cmp	r3, #42	; 0x2a
    4d5a:	d17e      	bne.n	4e5a <cbvprintf+0x186>
		conv->width_star = true;
    4d5c:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    4d60:	f043 0301 	orr.w	r3, r3, #1
    4d64:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		return ++sp;
    4d68:	1c73      	adds	r3, r6, #1
	sp = extract_prec(conv, sp);
    4d6a:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
    4d6c:	781a      	ldrb	r2, [r3, #0]
    4d6e:	2a2e      	cmp	r2, #46	; 0x2e
    4d70:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    4d74:	bf0c      	ite	eq
    4d76:	2101      	moveq	r1, #1
    4d78:	2100      	movne	r1, #0
    4d7a:	f361 0241 	bfi	r2, r1, #1, #1
    4d7e:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
    4d82:	d10b      	bne.n	4d9c <cbvprintf+0xc8>
	++sp;
    4d84:	1c5a      	adds	r2, r3, #1
    4d86:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
    4d88:	785a      	ldrb	r2, [r3, #1]
    4d8a:	2a2a      	cmp	r2, #42	; 0x2a
    4d8c:	d17b      	bne.n	4e86 <cbvprintf+0x1b2>
		conv->prec_star = true;
    4d8e:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    4d92:	f042 0204 	orr.w	r2, r2, #4
    4d96:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		return ++sp;
    4d9a:	3302      	adds	r3, #2
	switch (*sp) {
    4d9c:	4619      	mov	r1, r3
    4d9e:	f811 0b01 	ldrb.w	r0, [r1], #1
    4da2:	286c      	cmp	r0, #108	; 0x6c
    4da4:	f000 80b6 	beq.w	4f14 <cbvprintf+0x240>
    4da8:	d87d      	bhi.n	4ea6 <cbvprintf+0x1d2>
    4daa:	2868      	cmp	r0, #104	; 0x68
    4dac:	f000 8084 	beq.w	4eb8 <cbvprintf+0x1e4>
    4db0:	286a      	cmp	r0, #106	; 0x6a
    4db2:	f000 80b9 	beq.w	4f28 <cbvprintf+0x254>
    4db6:	284c      	cmp	r0, #76	; 0x4c
    4db8:	f000 80bd 	beq.w	4f36 <cbvprintf+0x262>
		conv->length_mod = LENGTH_NONE;
    4dbc:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    4dc0:	f36f 02c6 	bfc	r2, #3, #4
    4dc4:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		break;
    4dc8:	4619      	mov	r1, r3
    4dca:	e080      	b.n	4ece <cbvprintf+0x1fa>
		conv->specifier = *sp++;
    4dcc:	f109 0202 	add.w	r2, r9, #2
    4dd0:	9202      	str	r2, [sp, #8]
    4dd2:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
    4dd6:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    4dda:	07d9      	lsls	r1, r3, #31
    4ddc:	f140 8149 	bpl.w	5072 <cbvprintf+0x39e>
			width = va_arg(ap, int);
    4de0:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
    4de4:	f1b8 0f00 	cmp.w	r8, #0
    4de8:	da07      	bge.n	4dfa <cbvprintf+0x126>
				conv->flag_dash = true;
    4dea:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    4dee:	f042 0204 	orr.w	r2, r2, #4
    4df2:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				width = -width;
    4df6:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
    4dfa:	075a      	lsls	r2, r3, #29
    4dfc:	f140 8142 	bpl.w	5084 <cbvprintf+0x3b0>
			int arg = va_arg(ap, int);
    4e00:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
    4e04:	2f00      	cmp	r7, #0
    4e06:	f280 8141 	bge.w	508c <cbvprintf+0x3b8>
				conv->prec_present = false;
    4e0a:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    4e0e:	f36f 0341 	bfc	r3, #1, #1
    4e12:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
    4e16:	f04f 37ff 	mov.w	r7, #4294967295
    4e1a:	e137      	b.n	508c <cbvprintf+0x3b8>
		switch (*sp) {
    4e1c:	2b2d      	cmp	r3, #45	; 0x2d
    4e1e:	d006      	beq.n	4e2e <cbvprintf+0x15a>
    4e20:	2b30      	cmp	r3, #48	; 0x30
    4e22:	d187      	bne.n	4d34 <cbvprintf+0x60>
			conv->flag_zero = true;
    4e24:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    4e28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4e2c:	e003      	b.n	4e36 <cbvprintf+0x162>
			conv->flag_dash = true;
    4e2e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    4e32:	f043 0304 	orr.w	r3, r3, #4
			conv->flag_zero = true;
    4e36:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
			break;
    4e3a:	e76e      	b.n	4d1a <cbvprintf+0x46>
			conv->flag_plus = true;
    4e3c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    4e40:	f043 0308 	orr.w	r3, r3, #8
    4e44:	e7f7      	b.n	4e36 <cbvprintf+0x162>
			conv->flag_space = true;
    4e46:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    4e4a:	f043 0310 	orr.w	r3, r3, #16
    4e4e:	e7f2      	b.n	4e36 <cbvprintf+0x162>
			conv->flag_hash = true;
    4e50:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    4e54:	f043 0320 	orr.w	r3, r3, #32
    4e58:	e7ed      	b.n	4e36 <cbvprintf+0x162>
	size_t width = extract_decimal(&sp);
    4e5a:	a805      	add	r0, sp, #20
    4e5c:	f7ff fed4 	bl	4c08 <extract_decimal>
	if (sp != wp) {
    4e60:	9b05      	ldr	r3, [sp, #20]
    4e62:	42b3      	cmp	r3, r6
    4e64:	d081      	beq.n	4d6a <cbvprintf+0x96>
		conv->unsupported |= ((conv->width_value < 0)
    4e66:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		conv->width_value = width;
    4e6a:	900f      	str	r0, [sp, #60]	; 0x3c
		conv->unsupported |= ((conv->width_value < 0)
    4e6c:	f3c1 0240 	ubfx	r2, r1, #1, #1
    4e70:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
    4e74:	0052      	lsls	r2, r2, #1
    4e76:	f062 027f 	orn	r2, r2, #127	; 0x7f
    4e7a:	f001 017d 	and.w	r1, r1, #125	; 0x7d
    4e7e:	430a      	orrs	r2, r1
    4e80:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
    4e84:	e771      	b.n	4d6a <cbvprintf+0x96>
	size_t prec = extract_decimal(&sp);
    4e86:	a805      	add	r0, sp, #20
    4e88:	f7ff febe 	bl	4c08 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
    4e8c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	conv->prec_value = prec;
    4e90:	9010      	str	r0, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
    4e92:	f3c3 0240 	ubfx	r2, r3, #1, #1
    4e96:	ea42 70d0 	orr.w	r0, r2, r0, lsr #31
    4e9a:	f360 0341 	bfi	r3, r0, #1, #1
    4e9e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	return sp;
    4ea2:	9b05      	ldr	r3, [sp, #20]
    4ea4:	e77a      	b.n	4d9c <cbvprintf+0xc8>
	switch (*sp) {
    4ea6:	2874      	cmp	r0, #116	; 0x74
    4ea8:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    4eac:	d040      	beq.n	4f30 <cbvprintf+0x25c>
    4eae:	287a      	cmp	r0, #122	; 0x7a
    4eb0:	d184      	bne.n	4dbc <cbvprintf+0xe8>
		conv->length_mod = LENGTH_Z;
    4eb2:	4613      	mov	r3, r2
    4eb4:	2206      	movs	r2, #6
    4eb6:	e028      	b.n	4f0a <cbvprintf+0x236>
		if (*++sp == 'h') {
    4eb8:	785a      	ldrb	r2, [r3, #1]
    4eba:	2a68      	cmp	r2, #104	; 0x68
    4ebc:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    4ec0:	d121      	bne.n	4f06 <cbvprintf+0x232>
			conv->length_mod = LENGTH_HH;
    4ec2:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    4ec4:	f361 02c6 	bfi	r2, r1, #3, #4
    4ec8:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			++sp;
    4ecc:	1c99      	adds	r1, r3, #2
	conv->specifier = *sp++;
    4ece:	460b      	mov	r3, r1
    4ed0:	f813 2b01 	ldrb.w	r2, [r3], #1
    4ed4:	9302      	str	r3, [sp, #8]
	switch (conv->specifier) {
    4ed6:	2a78      	cmp	r2, #120	; 0x78
    4ed8:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
	conv->specifier = *sp++;
    4edc:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
    4ee0:	f200 80bf 	bhi.w	5062 <cbvprintf+0x38e>
    4ee4:	2a57      	cmp	r2, #87	; 0x57
    4ee6:	d833      	bhi.n	4f50 <cbvprintf+0x27c>
    4ee8:	2a41      	cmp	r2, #65	; 0x41
    4eea:	d003      	beq.n	4ef4 <cbvprintf+0x220>
    4eec:	3a45      	subs	r2, #69	; 0x45
    4eee:	2a02      	cmp	r2, #2
    4ef0:	f200 80b7 	bhi.w	5062 <cbvprintf+0x38e>
		conv->specifier_cat = SPECIFIER_FP;
    4ef4:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    4ef8:	2204      	movs	r2, #4
    4efa:	f362 0302 	bfi	r3, r2, #0, #3
    4efe:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			unsupported = true;
    4f02:	2301      	movs	r3, #1
			break;
    4f04:	e084      	b.n	5010 <cbvprintf+0x33c>
			conv->length_mod = LENGTH_H;
    4f06:	4613      	mov	r3, r2
    4f08:	2202      	movs	r2, #2
			conv->length_mod = LENGTH_L;
    4f0a:	f362 03c6 	bfi	r3, r2, #3, #4
    4f0e:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    4f12:	e7dc      	b.n	4ece <cbvprintf+0x1fa>
		if (*++sp == 'l') {
    4f14:	785a      	ldrb	r2, [r3, #1]
    4f16:	2a6c      	cmp	r2, #108	; 0x6c
    4f18:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    4f1c:	d101      	bne.n	4f22 <cbvprintf+0x24e>
			conv->length_mod = LENGTH_LL;
    4f1e:	2104      	movs	r1, #4
    4f20:	e7d0      	b.n	4ec4 <cbvprintf+0x1f0>
			conv->length_mod = LENGTH_L;
    4f22:	4613      	mov	r3, r2
    4f24:	2203      	movs	r2, #3
    4f26:	e7f0      	b.n	4f0a <cbvprintf+0x236>
		conv->length_mod = LENGTH_J;
    4f28:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    4f2c:	2205      	movs	r2, #5
    4f2e:	e7ec      	b.n	4f0a <cbvprintf+0x236>
		conv->length_mod = LENGTH_T;
    4f30:	4613      	mov	r3, r2
    4f32:	2207      	movs	r2, #7
    4f34:	e7e9      	b.n	4f0a <cbvprintf+0x236>
		conv->unsupported = true;
    4f36:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    4f3a:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    4f3e:	f023 0302 	bic.w	r3, r3, #2
    4f42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    4f46:	f043 0302 	orr.w	r3, r3, #2
    4f4a:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
    4f4e:	e7be      	b.n	4ece <cbvprintf+0x1fa>
    4f50:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    4f54:	2920      	cmp	r1, #32
    4f56:	f200 8084 	bhi.w	5062 <cbvprintf+0x38e>
    4f5a:	a001      	add	r0, pc, #4	; (adr r0, 4f60 <cbvprintf+0x28c>)
    4f5c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    4f60:	00005025 	.word	0x00005025
    4f64:	00005063 	.word	0x00005063
    4f68:	00005063 	.word	0x00005063
    4f6c:	00005063 	.word	0x00005063
    4f70:	00005063 	.word	0x00005063
    4f74:	00005063 	.word	0x00005063
    4f78:	00005063 	.word	0x00005063
    4f7c:	00005063 	.word	0x00005063
    4f80:	00005063 	.word	0x00005063
    4f84:	00004ef5 	.word	0x00004ef5
    4f88:	00005063 	.word	0x00005063
    4f8c:	00005025 	.word	0x00005025
    4f90:	00004fe5 	.word	0x00004fe5
    4f94:	00004ef5 	.word	0x00004ef5
    4f98:	00004ef5 	.word	0x00004ef5
    4f9c:	00004ef5 	.word	0x00004ef5
    4fa0:	00005063 	.word	0x00005063
    4fa4:	00004fe5 	.word	0x00004fe5
    4fa8:	00005063 	.word	0x00005063
    4fac:	00005063 	.word	0x00005063
    4fb0:	00005063 	.word	0x00005063
    4fb4:	00005063 	.word	0x00005063
    4fb8:	0000502d 	.word	0x0000502d
    4fbc:	00005025 	.word	0x00005025
    4fc0:	00005049 	.word	0x00005049
    4fc4:	00005063 	.word	0x00005063
    4fc8:	00005063 	.word	0x00005063
    4fcc:	00005049 	.word	0x00005049
    4fd0:	00005063 	.word	0x00005063
    4fd4:	00005025 	.word	0x00005025
    4fd8:	00005063 	.word	0x00005063
    4fdc:	00005063 	.word	0x00005063
    4fe0:	00005025 	.word	0x00005025
		conv->specifier_cat = SPECIFIER_SINT;
    4fe4:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
    4fe8:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    4fea:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    4fee:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    4ff2:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    4ff4:	f88d 103a 	strb.w	r1, [sp, #58]	; 0x3a
			conv->invalid = true;
    4ff8:	bf02      	ittt	eq
    4ffa:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
    4ffe:	f041 0101 	orreq.w	r1, r1, #1
    5002:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
    5006:	2a63      	cmp	r2, #99	; 0x63
    5008:	d131      	bne.n	506e <cbvprintf+0x39a>
			unsupported = (conv->length_mod != LENGTH_NONE);
    500a:	3b00      	subs	r3, #0
    500c:	bf18      	it	ne
    500e:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    5010:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    5014:	f3c2 0140 	ubfx	r1, r2, #1, #1
    5018:	430b      	orrs	r3, r1
    501a:	f363 0241 	bfi	r2, r3, #1, #1
    501e:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
    5022:	e6d8      	b.n	4dd6 <cbvprintf+0x102>
		conv->specifier_cat = SPECIFIER_UINT;
    5024:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
    5028:	2002      	movs	r0, #2
    502a:	e7de      	b.n	4fea <cbvprintf+0x316>
		conv->specifier_cat = SPECIFIER_PTR;
    502c:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    5030:	f003 0378 	and.w	r3, r3, #120	; 0x78
    5034:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    5038:	2103      	movs	r1, #3
    503a:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    503e:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    5040:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    5044:	4143      	adcs	r3, r0
    5046:	e7e3      	b.n	5010 <cbvprintf+0x33c>
		conv->specifier_cat = SPECIFIER_PTR;
    5048:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
    504c:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
    504e:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    5052:	f361 0202 	bfi	r2, r1, #0, #3
    5056:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
    505a:	bf14      	ite	ne
    505c:	2301      	movne	r3, #1
    505e:	2300      	moveq	r3, #0
    5060:	e7d6      	b.n	5010 <cbvprintf+0x33c>
		conv->invalid = true;
    5062:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    5066:	f043 0301 	orr.w	r3, r3, #1
    506a:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	bool unsupported = false;
    506e:	2300      	movs	r3, #0
    5070:	e7ce      	b.n	5010 <cbvprintf+0x33c>
		} else if (conv->width_present) {
    5072:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
    5076:	2a00      	cmp	r2, #0
			width = conv->width_value;
    5078:	bfb4      	ite	lt
    507a:	f8dd 803c 	ldrlt.w	r8, [sp, #60]	; 0x3c
		int width = -1;
    507e:	f04f 38ff 	movge.w	r8, #4294967295
    5082:	e6ba      	b.n	4dfa <cbvprintf+0x126>
		} else if (conv->prec_present) {
    5084:	079f      	lsls	r7, r3, #30
    5086:	f57f aec6 	bpl.w	4e16 <cbvprintf+0x142>
			precision = conv->prec_value;
    508a:	9f10      	ldr	r7, [sp, #64]	; 0x40
			= (enum length_mod_enum)conv->length_mod;
    508c:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
		conv->pad0_value = 0;
    5090:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    5092:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
			= (enum specifier_cat_enum)conv->specifier_cat;
    5096:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
		enum specifier_cat_enum specifier_cat
    509a:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    509e:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    50a0:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    50a4:	d137      	bne.n	5116 <cbvprintf+0x442>
			switch (length_mod) {
    50a6:	1ecb      	subs	r3, r1, #3
    50a8:	2b04      	cmp	r3, #4
    50aa:	d821      	bhi.n	50f0 <cbvprintf+0x41c>
    50ac:	e8df f003 	tbb	[pc, r3]
    50b0:	20070703 	.word	0x20070703
    50b4:	20          	.byte	0x20
    50b5:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    50b6:	f854 2b04 	ldr.w	r2, [r4], #4
				value->sint = (short)value->sint;
    50ba:	17d3      	asrs	r3, r2, #31
    50bc:	e004      	b.n	50c8 <cbvprintf+0x3f4>
					(sint_value_type)va_arg(ap, intmax_t);
    50be:	3407      	adds	r4, #7
    50c0:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    50c4:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->sint = (short)value->sint;
    50c8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
    50cc:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    50d0:	f013 0603 	ands.w	r6, r3, #3
    50d4:	d055      	beq.n	5182 <cbvprintf+0x4ae>
			OUTS(sp, fp);
    50d6:	9b02      	ldr	r3, [sp, #8]
    50d8:	464a      	mov	r2, r9
    50da:	4659      	mov	r1, fp
    50dc:	4650      	mov	r0, sl
    50de:	f015 fd00 	bl	1aae2 <outs>
    50e2:	2800      	cmp	r0, #0
    50e4:	f2c0 813e 	blt.w	5364 <cbvprintf+0x690>
    50e8:	4405      	add	r5, r0
			OUTS(bps, bpe);
    50ea:	f8dd 9008 	ldr.w	r9, [sp, #8]
    50ee:	e5f9      	b.n	4ce4 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    50f0:	f854 2b04 	ldr.w	r2, [r4], #4
			if (length_mod == LENGTH_HH) {
    50f4:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    50f6:	ea4f 73e2 	mov.w	r3, r2, asr #31
    50fa:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    50fe:	d105      	bne.n	510c <cbvprintf+0x438>
				value->uint = (unsigned char)value->uint;
    5100:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
    5104:	930c      	str	r3, [sp, #48]	; 0x30
    5106:	2300      	movs	r3, #0
    5108:	930d      	str	r3, [sp, #52]	; 0x34
    510a:	e7df      	b.n	50cc <cbvprintf+0x3f8>
			} else if (length_mod == LENGTH_H) {
    510c:	2902      	cmp	r1, #2
    510e:	d1dd      	bne.n	50cc <cbvprintf+0x3f8>
				value->sint = (short)value->sint;
    5110:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
    5114:	e7d1      	b.n	50ba <cbvprintf+0x3e6>
		} else if (specifier_cat == SPECIFIER_UINT) {
    5116:	2b02      	cmp	r3, #2
    5118:	d123      	bne.n	5162 <cbvprintf+0x48e>
			switch (length_mod) {
    511a:	1ecb      	subs	r3, r1, #3
    511c:	2b04      	cmp	r3, #4
    511e:	d813      	bhi.n	5148 <cbvprintf+0x474>
    5120:	e8df f003 	tbb	[pc, r3]
    5124:	120a0a03 	.word	0x120a0a03
    5128:	12          	.byte	0x12
    5129:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    512a:	6822      	ldr	r2, [r4, #0]
    512c:	920c      	str	r2, [sp, #48]	; 0x30
    512e:	2300      	movs	r3, #0
    5130:	1d20      	adds	r0, r4, #4
    5132:	930d      	str	r3, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
    5134:	4604      	mov	r4, r0
    5136:	e7c9      	b.n	50cc <cbvprintf+0x3f8>
					(uint_value_type)va_arg(ap,
    5138:	3407      	adds	r4, #7
    513a:	f024 0007 	bic.w	r0, r4, #7
				value->uint =
    513e:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    5142:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				break;
    5146:	e7f5      	b.n	5134 <cbvprintf+0x460>
					(uint_value_type)va_arg(ap, size_t);
    5148:	f854 3b04 	ldr.w	r3, [r4], #4
    514c:	930c      	str	r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    514e:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    5150:	f04f 0300 	mov.w	r3, #0
    5154:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
    5156:	d0d3      	beq.n	5100 <cbvprintf+0x42c>
			} else if (length_mod == LENGTH_H) {
    5158:	2902      	cmp	r1, #2
    515a:	d1b7      	bne.n	50cc <cbvprintf+0x3f8>
				value->uint = (unsigned short)value->uint;
    515c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    5160:	e7d0      	b.n	5104 <cbvprintf+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
    5162:	2b04      	cmp	r3, #4
    5164:	d107      	bne.n	5176 <cbvprintf+0x4a2>
			if (length_mod == LENGTH_UPPER_L) {
    5166:	3407      	adds	r4, #7
    5168:	f024 0407 	bic.w	r4, r4, #7
    516c:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->ldbl = va_arg(ap, long double);
    5170:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    5174:	e7aa      	b.n	50cc <cbvprintf+0x3f8>
		} else if (specifier_cat == SPECIFIER_PTR) {
    5176:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    5178:	bf04      	itt	eq
    517a:	f854 3b04 	ldreq.w	r3, [r4], #4
    517e:	930c      	streq	r3, [sp, #48]	; 0x30
    5180:	e7a4      	b.n	50cc <cbvprintf+0x3f8>
		switch (conv->specifier) {
    5182:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
    5186:	2878      	cmp	r0, #120	; 0x78
    5188:	d8af      	bhi.n	50ea <cbvprintf+0x416>
    518a:	2862      	cmp	r0, #98	; 0x62
    518c:	d820      	bhi.n	51d0 <cbvprintf+0x4fc>
    518e:	2825      	cmp	r0, #37	; 0x25
    5190:	f43f adb2 	beq.w	4cf8 <cbvprintf+0x24>
    5194:	2858      	cmp	r0, #88	; 0x58
    5196:	d1a8      	bne.n	50ea <cbvprintf+0x416>
			bps = encode_uint(value->uint, conv, buf, bpe);
    5198:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
    519c:	9300      	str	r3, [sp, #0]
    519e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    51a2:	ab06      	add	r3, sp, #24
    51a4:	aa0e      	add	r2, sp, #56	; 0x38
    51a6:	f7ff fd45 	bl	4c34 <encode_uint>
    51aa:	4681      	mov	r9, r0
			if (precision >= 0) {
    51ac:	2f00      	cmp	r7, #0
    51ae:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
    51b2:	db0b      	blt.n	51cc <cbvprintf+0x4f8>
				conv->flag_zero = false;
    51b4:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
				size_t len = bpe - bps;
    51b8:	eba0 0309 	sub.w	r3, r0, r9
				conv->flag_zero = false;
    51bc:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    51c0:	429f      	cmp	r7, r3
				conv->flag_zero = false;
    51c2:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
    51c6:	d901      	bls.n	51cc <cbvprintf+0x4f8>
					conv->pad0_value = precision - (int)len;
    51c8:	1aff      	subs	r7, r7, r3
    51ca:	970f      	str	r7, [sp, #60]	; 0x3c
		const char *bpe = buf + sizeof(buf);
    51cc:	4607      	mov	r7, r0
    51ce:	e03c      	b.n	524a <cbvprintf+0x576>
    51d0:	3863      	subs	r0, #99	; 0x63
    51d2:	2815      	cmp	r0, #21
    51d4:	d889      	bhi.n	50ea <cbvprintf+0x416>
    51d6:	a201      	add	r2, pc, #4	; (adr r2, 51dc <cbvprintf+0x508>)
    51d8:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    51dc:	0000525b 	.word	0x0000525b
    51e0:	000052bd 	.word	0x000052bd
    51e4:	000050eb 	.word	0x000050eb
    51e8:	000050eb 	.word	0x000050eb
    51ec:	000050eb 	.word	0x000050eb
    51f0:	000050eb 	.word	0x000050eb
    51f4:	000052bd 	.word	0x000052bd
    51f8:	000050eb 	.word	0x000050eb
    51fc:	000050eb 	.word	0x000050eb
    5200:	000050eb 	.word	0x000050eb
    5204:	000050eb 	.word	0x000050eb
    5208:	0000531b 	.word	0x0000531b
    520c:	000052e9 	.word	0x000052e9
    5210:	000052ed 	.word	0x000052ed
    5214:	000050eb 	.word	0x000050eb
    5218:	000050eb 	.word	0x000050eb
    521c:	00005235 	.word	0x00005235
    5220:	000050eb 	.word	0x000050eb
    5224:	000052e9 	.word	0x000052e9
    5228:	000050eb 	.word	0x000050eb
    522c:	000050eb 	.word	0x000050eb
    5230:	000052e9 	.word	0x000052e9
			if (precision >= 0) {
    5234:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
    5236:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
			if (precision >= 0) {
    523a:	db0a      	blt.n	5252 <cbvprintf+0x57e>
				len = strnlen(bps, precision);
    523c:	4639      	mov	r1, r7
    523e:	4648      	mov	r0, r9
    5240:	f016 ffce 	bl	1c1e0 <strnlen>
			bpe = bps + len;
    5244:	eb09 0700 	add.w	r7, r9, r0
		char sign = 0;
    5248:	2600      	movs	r6, #0
		if (bps == NULL) {
    524a:	f1b9 0f00 	cmp.w	r9, #0
    524e:	d10c      	bne.n	526a <cbvprintf+0x596>
    5250:	e74b      	b.n	50ea <cbvprintf+0x416>
				len = strlen(bps);
    5252:	4648      	mov	r0, r9
    5254:	f7fb fdb4 	bl	dc0 <strlen>
    5258:	e7f4      	b.n	5244 <cbvprintf+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    525a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    525c:	f88d 3018 	strb.w	r3, [sp, #24]
			break;
    5260:	2600      	movs	r6, #0
			bpe = buf + 1;
    5262:	f10d 0719 	add.w	r7, sp, #25
			bps = buf;
    5266:	f10d 0918 	add.w	r9, sp, #24
		size_t nj_len = (bpe - bps);
    526a:	eba7 0309 	sub.w	r3, r7, r9
		if (sign != 0) {
    526e:	b106      	cbz	r6, 5272 <cbvprintf+0x59e>
			nj_len += 1U;
    5270:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    5272:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
    5276:	06d0      	lsls	r0, r2, #27
    5278:	d569      	bpl.n	534e <cbvprintf+0x67a>
			nj_len += 2U;
    527a:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    527c:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    527e:	990f      	ldr	r1, [sp, #60]	; 0x3c
			nj_len += conv->pad0_pre_exp;
    5280:	bf48      	it	mi
    5282:	9a10      	ldrmi	r2, [sp, #64]	; 0x40
		nj_len += conv->pad0_value;
    5284:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    5286:	bf48      	it	mi
    5288:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    528a:	f1b8 0f00 	cmp.w	r8, #0
    528e:	dd76      	ble.n	537e <cbvprintf+0x6aa>
			if (!conv->flag_dash) {
    5290:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
			width -= (int)nj_len;
    5294:	eba8 0803 	sub.w	r8, r8, r3
			if (!conv->flag_dash) {
    5298:	f3c2 0380 	ubfx	r3, r2, #2, #1
    529c:	9303      	str	r3, [sp, #12]
    529e:	0753      	lsls	r3, r2, #29
    52a0:	d46d      	bmi.n	537e <cbvprintf+0x6aa>
				if (conv->flag_zero) {
    52a2:	0650      	lsls	r0, r2, #25
    52a4:	d561      	bpl.n	536a <cbvprintf+0x696>
					if (sign != 0) {
    52a6:	b13e      	cbz	r6, 52b8 <cbvprintf+0x5e4>
						OUTC(sign);
    52a8:	4659      	mov	r1, fp
    52aa:	4630      	mov	r0, r6
    52ac:	47d0      	blx	sl
    52ae:	2800      	cmp	r0, #0
    52b0:	db58      	blt.n	5364 <cbvprintf+0x690>
						sign = 0;
    52b2:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    52b4:	3501      	adds	r5, #1
						sign = 0;
    52b6:	461e      	mov	r6, r3
					pad = '0';
    52b8:	2330      	movs	r3, #48	; 0x30
    52ba:	e057      	b.n	536c <cbvprintf+0x698>
			if (conv->flag_plus) {
    52bc:	071e      	lsls	r6, r3, #28
    52be:	d411      	bmi.n	52e4 <cbvprintf+0x610>
				sign = ' ';
    52c0:	f013 0610 	ands.w	r6, r3, #16
    52c4:	bf18      	it	ne
    52c6:	2620      	movne	r6, #32
			sint = value->sint;
    52c8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
    52cc:	2a00      	cmp	r2, #0
    52ce:	f173 0100 	sbcs.w	r1, r3, #0
    52d2:	f6bf af61 	bge.w	5198 <cbvprintf+0x4c4>
				value->uint = (uint_value_type)-sint;
    52d6:	4252      	negs	r2, r2
    52d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    52dc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				sign = '-';
    52e0:	262d      	movs	r6, #45	; 0x2d
    52e2:	e759      	b.n	5198 <cbvprintf+0x4c4>
				sign = '+';
    52e4:	262b      	movs	r6, #43	; 0x2b
    52e6:	e7ef      	b.n	52c8 <cbvprintf+0x5f4>
		switch (conv->specifier) {
    52e8:	2600      	movs	r6, #0
    52ea:	e755      	b.n	5198 <cbvprintf+0x4c4>
			if (value->ptr != NULL) {
    52ec:	980c      	ldr	r0, [sp, #48]	; 0x30
    52ee:	b348      	cbz	r0, 5344 <cbvprintf+0x670>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    52f0:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
    52f4:	9300      	str	r3, [sp, #0]
    52f6:	aa0e      	add	r2, sp, #56	; 0x38
    52f8:	ab06      	add	r3, sp, #24
    52fa:	2100      	movs	r1, #0
    52fc:	f7ff fc9a 	bl	4c34 <encode_uint>
				conv->altform_0c = true;
    5300:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
    5304:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    5308:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    530c:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    5310:	4681      	mov	r9, r0
				conv->altform_0c = true;
    5312:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		char sign = 0;
    5316:	2600      	movs	r6, #0
				goto prec_int_pad0;
    5318:	e748      	b.n	51ac <cbvprintf+0x4d8>
				store_count(conv, value->ptr, count);
    531a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
    531c:	2907      	cmp	r1, #7
    531e:	f63f aee4 	bhi.w	50ea <cbvprintf+0x416>
    5322:	e8df f001 	tbb	[pc, r1]
    5326:	040d      	.short	0x040d
    5328:	08080d06 	.word	0x08080d06
    532c:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
    532e:	701d      	strb	r5, [r3, #0]
		break;
    5330:	e6db      	b.n	50ea <cbvprintf+0x416>
		*(short *)dp = (short)count;
    5332:	801d      	strh	r5, [r3, #0]
		break;
    5334:	e6d9      	b.n	50ea <cbvprintf+0x416>
		*(intmax_t *)dp = (intmax_t)count;
    5336:	4628      	mov	r0, r5
    5338:	17e9      	asrs	r1, r5, #31
    533a:	e9c3 0100 	strd	r0, r1, [r3]
		break;
    533e:	e6d4      	b.n	50ea <cbvprintf+0x416>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    5340:	601d      	str	r5, [r3, #0]
		break;
    5342:	e6d2      	b.n	50ea <cbvprintf+0x416>
			bpe = bps + 5;
    5344:	4f2e      	ldr	r7, [pc, #184]	; (5400 <cbvprintf+0x72c>)
    5346:	4606      	mov	r6, r0
			bps = "(nil)";
    5348:	f1a7 0905 	sub.w	r9, r7, #5
    534c:	e78d      	b.n	526a <cbvprintf+0x596>
		} else if (conv->altform_0) {
    534e:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    5350:	bf48      	it	mi
    5352:	3301      	addmi	r3, #1
    5354:	e792      	b.n	527c <cbvprintf+0x5a8>
					OUTC(pad);
    5356:	4618      	mov	r0, r3
    5358:	4659      	mov	r1, fp
    535a:	9303      	str	r3, [sp, #12]
    535c:	47d0      	blx	sl
    535e:	2800      	cmp	r0, #0
    5360:	9b03      	ldr	r3, [sp, #12]
    5362:	da04      	bge.n	536e <cbvprintf+0x69a>
#undef OUTS
#undef OUTC
}
    5364:	b013      	add	sp, #76	; 0x4c
    5366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    536a:	2320      	movs	r3, #32
    536c:	4445      	add	r5, r8
    536e:	4642      	mov	r2, r8
				while (width-- > 0) {
    5370:	2a00      	cmp	r2, #0
    5372:	eba5 0108 	sub.w	r1, r5, r8
    5376:	f108 38ff 	add.w	r8, r8, #4294967295
    537a:	dcec      	bgt.n	5356 <cbvprintf+0x682>
    537c:	460d      	mov	r5, r1
		if (sign != 0) {
    537e:	b12e      	cbz	r6, 538c <cbvprintf+0x6b8>
			OUTC(sign);
    5380:	4659      	mov	r1, fp
    5382:	4630      	mov	r0, r6
    5384:	47d0      	blx	sl
    5386:	2800      	cmp	r0, #0
    5388:	dbec      	blt.n	5364 <cbvprintf+0x690>
    538a:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    538c:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    5390:	06d9      	lsls	r1, r3, #27
    5392:	d401      	bmi.n	5398 <cbvprintf+0x6c4>
    5394:	071a      	lsls	r2, r3, #28
    5396:	d505      	bpl.n	53a4 <cbvprintf+0x6d0>
				OUTC('0');
    5398:	4659      	mov	r1, fp
    539a:	2030      	movs	r0, #48	; 0x30
    539c:	47d0      	blx	sl
    539e:	2800      	cmp	r0, #0
    53a0:	dbe0      	blt.n	5364 <cbvprintf+0x690>
    53a2:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    53a4:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    53a8:	06db      	lsls	r3, r3, #27
    53aa:	d506      	bpl.n	53ba <cbvprintf+0x6e6>
				OUTC(conv->specifier);
    53ac:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
    53b0:	4659      	mov	r1, fp
    53b2:	47d0      	blx	sl
    53b4:	2800      	cmp	r0, #0
    53b6:	dbd5      	blt.n	5364 <cbvprintf+0x690>
    53b8:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    53ba:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    53bc:	442e      	add	r6, r5
    53be:	1b73      	subs	r3, r6, r5
    53c0:	2b00      	cmp	r3, #0
    53c2:	dc15      	bgt.n	53f0 <cbvprintf+0x71c>
			OUTS(bps, bpe);
    53c4:	463b      	mov	r3, r7
    53c6:	464a      	mov	r2, r9
    53c8:	4659      	mov	r1, fp
    53ca:	4650      	mov	r0, sl
    53cc:	f015 fb89 	bl	1aae2 <outs>
    53d0:	2800      	cmp	r0, #0
    53d2:	dbc7      	blt.n	5364 <cbvprintf+0x690>
    53d4:	4405      	add	r5, r0
		while (width > 0) {
    53d6:	44a8      	add	r8, r5
    53d8:	eba8 0305 	sub.w	r3, r8, r5
    53dc:	2b00      	cmp	r3, #0
    53de:	f77f ae84 	ble.w	50ea <cbvprintf+0x416>
			OUTC(' ');
    53e2:	4659      	mov	r1, fp
    53e4:	2020      	movs	r0, #32
    53e6:	47d0      	blx	sl
    53e8:	2800      	cmp	r0, #0
    53ea:	dbbb      	blt.n	5364 <cbvprintf+0x690>
    53ec:	3501      	adds	r5, #1
			--width;
    53ee:	e7f3      	b.n	53d8 <cbvprintf+0x704>
				OUTC('0');
    53f0:	4659      	mov	r1, fp
    53f2:	2030      	movs	r0, #48	; 0x30
    53f4:	47d0      	blx	sl
    53f6:	2800      	cmp	r0, #0
    53f8:	dbb4      	blt.n	5364 <cbvprintf+0x690>
    53fa:	3501      	adds	r5, #1
    53fc:	e7df      	b.n	53be <cbvprintf+0x6ea>
    53fe:	bf00      	nop
    5400:	0001d759 	.word	0x0001d759

00005404 <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

void sys_reboot(int type)
{
    5404:	b508      	push	{r3, lr}
    5406:	4604      	mov	r4, r0
    5408:	f04f 0220 	mov.w	r2, #32
    540c:	f3ef 8311 	mrs	r3, BASEPRI
    5410:	f382 8811 	msr	BASEPRI, r2
    5414:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
    5418:	f016 f827 	bl	1b46a <sys_clock_disable>
#endif

	sys_arch_reboot(type);
    541c:	4620      	mov	r0, r4
    541e:	f001 ff73 	bl	7308 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    5422:	4803      	ldr	r0, [pc, #12]	; (5430 <sys_reboot+0x2c>)
    5424:	f015 f9b0 	bl	1a788 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    5428:	f001 fad4 	bl	69d4 <arch_cpu_idle>
    542c:	e7fc      	b.n	5428 <sys_reboot+0x24>
    542e:	bf00      	nop
    5430:	0001d75a 	.word	0x0001d75a

00005434 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    5434:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    5436:	4910      	ldr	r1, [pc, #64]	; (5478 <enable_logger+0x44>)
    5438:	4810      	ldr	r0, [pc, #64]	; (547c <enable_logger+0x48>)
{
    543a:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    543c:	2200      	movs	r2, #0
    543e:	f016 fe10 	bl	1c062 <k_timer_init>
		/* coverity[OVERRUN] */
		return (k_tid_t) arch_syscall_invoke6(*(uintptr_t *)&new_thread, *(uintptr_t *)&stack, *(uintptr_t *)&stack_size, *(uintptr_t *)&entry, *(uintptr_t *)&p1, (uintptr_t) &more, K_SYSCALL_K_THREAD_CREATE);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    5442:	4d0f      	ldr	r5, [pc, #60]	; (5480 <enable_logger+0x4c>)
    5444:	490f      	ldr	r1, [pc, #60]	; (5484 <enable_logger+0x50>)
    5446:	2200      	movs	r2, #0
    5448:	2300      	movs	r3, #0
    544a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    544e:	2400      	movs	r4, #0
    5450:	230e      	movs	r3, #14
    5452:	e9cd 3403 	strd	r3, r4, [sp, #12]
    5456:	e9cd 4401 	strd	r4, r4, [sp, #4]
    545a:	4b0b      	ldr	r3, [pc, #44]	; (5488 <enable_logger+0x54>)
    545c:	9400      	str	r4, [sp, #0]
    545e:	f44f 7240 	mov.w	r2, #768	; 0x300
    5462:	4628      	mov	r0, r5
    5464:	f005 f92e 	bl	a6c4 <z_impl_k_thread_create>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&thread, *(uintptr_t *)&str, K_SYSCALL_K_THREAD_NAME_SET);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_name_set(thread, str);
    5468:	4908      	ldr	r1, [pc, #32]	; (548c <enable_logger+0x58>)
    546a:	4628      	mov	r0, r5
    546c:	f016 fc76 	bl	1bd5c <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    5470:	4620      	mov	r0, r4
    5472:	b009      	add	sp, #36	; 0x24
    5474:	bd30      	pop	{r4, r5, pc}
    5476:	bf00      	nop
    5478:	00005491 	.word	0x00005491
    547c:	200002b8 	.word	0x200002b8
    5480:	200002f0 	.word	0x200002f0
    5484:	20001840 	.word	0x20001840
    5488:	0000591d 	.word	0x0000591d
    548c:	0001d783 	.word	0x0001d783

00005490 <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    5490:	4801      	ldr	r0, [pc, #4]	; (5498 <log_process_thread_timer_expiry_fn+0x8>)
    5492:	f005 ba7b 	b.w	a98c <z_impl_k_sem_give>
    5496:	bf00      	nop
    5498:	20000258 	.word	0x20000258

0000549c <z_log_get_s_mask>:
{
    549c:	b5f0      	push	{r4, r5, r6, r7, lr}
    549e:	4605      	mov	r5, r0
		} else if (arm && isalpha((int)curr)) {
    54a0:	4e0f      	ldr	r6, [pc, #60]	; (54e0 <z_log_get_s_mask+0x44>)
	uint32_t mask = 0U;
    54a2:	2000      	movs	r0, #0
	uint32_t arg = 0U;
    54a4:	4603      	mov	r3, r0
	bool arm = false;
    54a6:	4602      	mov	r2, r0
				mask |= BIT(arg);
    54a8:	2701      	movs	r7, #1
	while ((curr = *str++) && arg < nargs) {
    54aa:	f815 4b01 	ldrb.w	r4, [r5], #1
    54ae:	b10c      	cbz	r4, 54b4 <z_log_get_s_mask+0x18>
    54b0:	428b      	cmp	r3, r1
    54b2:	d300      	bcc.n	54b6 <z_log_get_s_mask+0x1a>
}
    54b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
    54b6:	2c25      	cmp	r4, #37	; 0x25
    54b8:	d102      	bne.n	54c0 <z_log_get_s_mask+0x24>
			arm = !arm;
    54ba:	f082 0201 	eor.w	r2, r2, #1
    54be:	e7f4      	b.n	54aa <z_log_get_s_mask+0xe>
		} else if (arm && isalpha((int)curr)) {
    54c0:	2a00      	cmp	r2, #0
    54c2:	d0f2      	beq.n	54aa <z_log_get_s_mask+0xe>
    54c4:	f814 c006 	ldrb.w	ip, [r4, r6]
    54c8:	f01c 0f03 	tst.w	ip, #3
    54cc:	d0ed      	beq.n	54aa <z_log_get_s_mask+0xe>
			if (curr == 's') {
    54ce:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
    54d0:	bf04      	itt	eq
    54d2:	fa07 f203 	lsleq.w	r2, r7, r3
    54d6:	4310      	orreq	r0, r2
			arg++;
    54d8:	3301      	adds	r3, #1
			arm = false;
    54da:	2200      	movs	r2, #0
    54dc:	e7e5      	b.n	54aa <z_log_get_s_mask+0xe>
    54de:	bf00      	nop
    54e0:	0001e1a5 	.word	0x0001e1a5

000054e4 <log_core_init>:
{
    54e4:	b510      	push	{r4, lr}
	panic_mode = false;
    54e6:	4b0b      	ldr	r3, [pc, #44]	; (5514 <log_core_init+0x30>)
    54e8:	2200      	movs	r2, #0
    54ea:	701a      	strb	r2, [r3, #0]
		timestamp_func = default_get_timestamp;
    54ec:	4b0a      	ldr	r3, [pc, #40]	; (5518 <log_core_init+0x34>)
    54ee:	4a0b      	ldr	r2, [pc, #44]	; (551c <log_core_init+0x38>)
    54f0:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    54f2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    54f6:	f000 fcc1 	bl	5e7c <log_output_timestamp_freq_set>
		log_msg_pool_init();
    54fa:	f000 fa71 	bl	59e0 <log_msg_pool_init>
		log_list_init(&list);
    54fe:	4808      	ldr	r0, [pc, #32]	; (5520 <log_core_init+0x3c>)
    5500:	f015 fb06 	bl	1ab10 <log_list_init>
}
    5504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    5508:	4906      	ldr	r1, [pc, #24]	; (5524 <log_core_init+0x40>)
    550a:	4807      	ldr	r0, [pc, #28]	; (5528 <log_core_init+0x44>)
    550c:	2304      	movs	r3, #4
    550e:	2228      	movs	r2, #40	; 0x28
    5510:	f016 bbda 	b.w	1bcc8 <k_mem_slab_init>
    5514:	20001139 	.word	0x20001139
    5518:	20000004 	.word	0x20000004
    551c:	0001ab4f 	.word	0x0001ab4f
    5520:	2000064c 	.word	0x2000064c
    5524:	20003920 	.word	0x20003920
    5528:	20000654 	.word	0x20000654

0000552c <get_msg>:
{
    552c:	b510      	push	{r4, lr}
    552e:	f04f 0320 	mov.w	r3, #32
    5532:	f3ef 8411 	mrs	r4, BASEPRI
    5536:	f383 8811 	msr	BASEPRI, r3
    553a:	f3bf 8f6f 	isb	sy
	msg.msg = log_list_head_get(&list);
    553e:	4804      	ldr	r0, [pc, #16]	; (5550 <get_msg+0x24>)
    5540:	f015 faf6 	bl	1ab30 <log_list_head_get>
	__asm__ volatile(
    5544:	f384 8811 	msr	BASEPRI, r4
    5548:	f3bf 8f6f 	isb	sy
}
    554c:	bd10      	pop	{r4, pc}
    554e:	bf00      	nop
    5550:	2000064c 	.word	0x2000064c

00005554 <z_log_dropped>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    5554:	4b06      	ldr	r3, [pc, #24]	; (5570 <z_log_dropped+0x1c>)
    5556:	f3bf 8f5b 	dmb	ish
    555a:	e853 2f00 	ldrex	r2, [r3]
    555e:	3201      	adds	r2, #1
    5560:	e843 2100 	strex	r1, r2, [r3]
    5564:	2900      	cmp	r1, #0
    5566:	d1f8      	bne.n	555a <z_log_dropped+0x6>
    5568:	f3bf 8f5b 	dmb	ish
}
    556c:	4770      	bx	lr
    556e:	bf00      	nop
    5570:	20000644 	.word	0x20000644

00005574 <z_log_dropped_read_and_clear>:
}
    5574:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    5576:	4b06      	ldr	r3, [pc, #24]	; (5590 <z_log_dropped_read_and_clear+0x1c>)
    5578:	f3bf 8f5b 	dmb	ish
    557c:	4602      	mov	r2, r0
    557e:	e853 0f00 	ldrex	r0, [r3]
    5582:	e843 2100 	strex	r1, r2, [r3]
    5586:	2900      	cmp	r1, #0
    5588:	d1f9      	bne.n	557e <z_log_dropped_read_and_clear+0xa>
    558a:	f3bf 8f5b 	dmb	ish
    558e:	4770      	bx	lr
    5590:	20000644 	.word	0x20000644

00005594 <dropped_notify>:
{
    5594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    5596:	f7ff ffed 	bl	5574 <z_log_dropped_read_and_clear>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    559a:	4c0a      	ldr	r4, [pc, #40]	; (55c4 <dropped_notify+0x30>)
    559c:	4d0a      	ldr	r5, [pc, #40]	; (55c8 <dropped_notify+0x34>)
    559e:	1b2d      	subs	r5, r5, r4
    55a0:	4607      	mov	r7, r0
    55a2:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    55a4:	2600      	movs	r6, #0
    55a6:	42ae      	cmp	r6, r5
    55a8:	db00      	blt.n	55ac <dropped_notify+0x18>
}
    55aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    55ac:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    55ae:	795b      	ldrb	r3, [r3, #5]
    55b0:	b12b      	cbz	r3, 55be <dropped_notify+0x2a>
	if (backend->api->dropped != NULL) {
    55b2:	6823      	ldr	r3, [r4, #0]
    55b4:	691b      	ldr	r3, [r3, #16]
    55b6:	b113      	cbz	r3, 55be <dropped_notify+0x2a>
		backend->api->dropped(backend, cnt);
    55b8:	4639      	mov	r1, r7
    55ba:	4620      	mov	r0, r4
    55bc:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    55be:	3601      	adds	r6, #1
    55c0:	3410      	adds	r4, #16
    55c2:	e7f0      	b.n	55a6 <dropped_notify+0x12>
    55c4:	0001c8f8 	.word	0x0001c8f8
    55c8:	0001c908 	.word	0x0001c908

000055cc <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    55cc:	4a04      	ldr	r2, [pc, #16]	; (55e0 <log_source_name_get+0x14>)
    55ce:	4b05      	ldr	r3, [pc, #20]	; (55e4 <log_source_name_get+0x18>)
    55d0:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    55d2:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    55d6:	bf34      	ite	cc
    55d8:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
    55dc:	2000      	movcs	r0, #0
}
    55de:	4770      	bx	lr
    55e0:	0001c8a0 	.word	0x0001c8a0
    55e4:	0001c8f8 	.word	0x0001c8f8

000055e8 <log_backend_enable>:
	id += backend - log_backend_get(0);
    55e8:	4b09      	ldr	r3, [pc, #36]	; (5610 <log_backend_enable+0x28>)
	log_backend_id_set(backend, id);
    55ea:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
    55ec:	1ac3      	subs	r3, r0, r3
    55ee:	111b      	asrs	r3, r3, #4
    55f0:	3301      	adds	r3, #1
{
    55f2:	b510      	push	{r4, lr}
	log_backend_id_set(backend, id);
    55f4:	7113      	strb	r3, [r2, #4]
	log_backend_activate(backend, ctx);
    55f6:	6843      	ldr	r3, [r0, #4]
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    55f8:	4c06      	ldr	r4, [pc, #24]	; (5614 <log_backend_enable+0x2c>)
	backend->cb->ctx = ctx;
    55fa:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    55fc:	2201      	movs	r2, #1
    55fe:	715a      	strb	r2, [r3, #5]
    5600:	7822      	ldrb	r2, [r4, #0]
    5602:	b912      	cbnz	r2, 560a <log_backend_enable+0x22>
    5604:	4804      	ldr	r0, [pc, #16]	; (5618 <log_backend_enable+0x30>)
    5606:	f005 f9c1 	bl	a98c <z_impl_k_sem_give>
	backend_attached = true;
    560a:	2301      	movs	r3, #1
    560c:	7023      	strb	r3, [r4, #0]
}
    560e:	bd10      	pop	{r4, pc}
    5610:	0001c8f8 	.word	0x0001c8f8
    5614:	20001138 	.word	0x20001138
    5618:	20000258 	.word	0x20000258

0000561c <log_init>:
{
    561c:	b570      	push	{r4, r5, r6, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    561e:	4b12      	ldr	r3, [pc, #72]	; (5668 <log_init+0x4c>)
    5620:	f3bf 8f5b 	dmb	ish
    5624:	e853 5f00 	ldrex	r5, [r3]
    5628:	1c6a      	adds	r2, r5, #1
    562a:	e843 2100 	strex	r1, r2, [r3]
    562e:	2900      	cmp	r1, #0
    5630:	d1f8      	bne.n	5624 <log_init+0x8>
    5632:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    5636:	b92d      	cbnz	r5, 5644 <log_init+0x28>
	return __log_backends_end - __log_backends_start;
    5638:	4c0c      	ldr	r4, [pc, #48]	; (566c <log_init+0x50>)
    563a:	4e0d      	ldr	r6, [pc, #52]	; (5670 <log_init+0x54>)
    563c:	1b36      	subs	r6, r6, r4
    563e:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    5640:	42b5      	cmp	r5, r6
    5642:	db00      	blt.n	5646 <log_init+0x2a>
}
    5644:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    5646:	7b23      	ldrb	r3, [r4, #12]
    5648:	b153      	cbz	r3, 5660 <log_init+0x44>
			if (backend->api->init != NULL) {
    564a:	6823      	ldr	r3, [r4, #0]
    564c:	699b      	ldr	r3, [r3, #24]
    564e:	b10b      	cbz	r3, 5654 <log_init+0x38>
				backend->api->init(backend);
    5650:	4620      	mov	r0, r4
    5652:	4798      	blx	r3
			log_backend_enable(backend,
    5654:	6863      	ldr	r3, [r4, #4]
    5656:	2204      	movs	r2, #4
    5658:	6819      	ldr	r1, [r3, #0]
    565a:	4620      	mov	r0, r4
    565c:	f7ff ffc4 	bl	55e8 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    5660:	3501      	adds	r5, #1
    5662:	3410      	adds	r4, #16
    5664:	e7ec      	b.n	5640 <log_init+0x24>
    5666:	bf00      	nop
    5668:	20000648 	.word	0x20000648
    566c:	0001c8f8 	.word	0x0001c8f8
    5670:	0001c908 	.word	0x0001c908

00005674 <z_log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
    5674:	4b17      	ldr	r3, [pc, #92]	; (56d4 <z_log_strdup+0x60>)
    5676:	4298      	cmp	r0, r3
{
    5678:	b573      	push	{r0, r1, r4, r5, r6, lr}
    567a:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    567c:	d302      	bcc.n	5684 <z_log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    567e:	4b16      	ldr	r3, [pc, #88]	; (56d8 <z_log_strdup+0x64>)
    5680:	4298      	cmp	r0, r3
    5682:	d321      	bcc.n	56c8 <z_log_strdup+0x54>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    5684:	4815      	ldr	r0, [pc, #84]	; (56dc <z_log_strdup+0x68>)
    5686:	2200      	movs	r2, #0
    5688:	2300      	movs	r3, #0
    568a:	a901      	add	r1, sp, #4
    568c:	f004 ffb8 	bl	a600 <k_mem_slab_alloc>
	if (err != 0) {
    5690:	4605      	mov	r5, r0
    5692:	b9e0      	cbnz	r0, 56ce <z_log_strdup+0x5a>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    5694:	2201      	movs	r2, #1
    5696:	9b01      	ldr	r3, [sp, #4]
    5698:	f3bf 8f5b 	dmb	ish
    569c:	e853 1f00 	ldrex	r1, [r3]
    56a0:	e843 2000 	strex	r0, r2, [r3]
    56a4:	2800      	cmp	r0, #0
    56a6:	d1f9      	bne.n	569c <z_log_strdup+0x28>
    56a8:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    56ac:	9e01      	ldr	r6, [sp, #4]
    56ae:	1d33      	adds	r3, r6, #4
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
    56b0:	221f      	movs	r2, #31
    56b2:	4618      	mov	r0, r3
    56b4:	4621      	mov	r1, r4
    56b6:	f016 fd80 	bl	1c1ba <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    56ba:	227e      	movs	r2, #126	; 0x7e
    56bc:	4603      	mov	r3, r0
    56be:	f886 2023 	strb.w	r2, [r6, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    56c2:	f886 5024 	strb.w	r5, [r6, #36]	; 0x24
	return dup->buf;
    56c6:	461c      	mov	r4, r3
}
    56c8:	4620      	mov	r0, r4
    56ca:	b002      	add	sp, #8
    56cc:	bd70      	pop	{r4, r5, r6, pc}
		return (char *)log_strdup_fail_msg;
    56ce:	4b04      	ldr	r3, [pc, #16]	; (56e0 <z_log_strdup+0x6c>)
    56d0:	e7f9      	b.n	56c6 <z_log_strdup+0x52>
    56d2:	bf00      	nop
    56d4:	0001c5f0 	.word	0x0001c5f0
    56d8:	0001e2e0 	.word	0x0001e2e0
    56dc:	20000654 	.word	0x20000654
    56e0:	0001d78b 	.word	0x0001d78b

000056e4 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
    56e4:	b148      	cbz	r0, 56fa <log_is_strdup+0x16>
    56e6:	4b05      	ldr	r3, [pc, #20]	; (56fc <log_is_strdup+0x18>)
    56e8:	4298      	cmp	r0, r3
    56ea:	d305      	bcc.n	56f8 <log_is_strdup+0x14>
    56ec:	33a0      	adds	r3, #160	; 0xa0
    56ee:	4298      	cmp	r0, r3
    56f0:	bf2c      	ite	cs
    56f2:	2000      	movcs	r0, #0
    56f4:	2001      	movcc	r0, #1
    56f6:	4770      	bx	lr
    56f8:	2000      	movs	r0, #0
}
    56fa:	4770      	bx	lr
    56fc:	20003920 	.word	0x20003920

00005700 <z_impl_log_process>:
{
    5700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
    5704:	4b46      	ldr	r3, [pc, #280]	; (5820 <z_impl_log_process+0x120>)
    5706:	781b      	ldrb	r3, [r3, #0]
{
    5708:	b085      	sub	sp, #20
    570a:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
    570c:	b903      	cbnz	r3, 5710 <z_impl_log_process+0x10>
    570e:	b300      	cbz	r0, 5752 <z_impl_log_process+0x52>
	msg = get_msg();
    5710:	f7ff ff0c 	bl	552c <get_msg>
	if (msg.msg) {
    5714:	4605      	mov	r5, r0
    5716:	b178      	cbz	r0, 5738 <z_impl_log_process+0x38>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    5718:	f3bf 8f5b 	dmb	ish
    571c:	4b41      	ldr	r3, [pc, #260]	; (5824 <z_impl_log_process+0x124>)
    571e:	e853 2f00 	ldrex	r2, [r3]
    5722:	3a01      	subs	r2, #1
    5724:	e843 2100 	strex	r1, r2, [r3]
    5728:	2900      	cmp	r1, #0
    572a:	d1f8      	bne.n	571e <z_impl_log_process+0x1e>
    572c:	f3bf 8f5b 	dmb	ish
	if (!bypass) {
    5730:	b19c      	cbz	r4, 575a <z_impl_log_process+0x5a>
			log_msg_put(msg.msg);
    5732:	4628      	mov	r0, r5
    5734:	f015 faea 	bl	1ad0c <log_msg_put>
	if (!bypass && z_log_dropped_pending()) {
    5738:	b92c      	cbnz	r4, 5746 <z_impl_log_process+0x46>
	return dropped_cnt > 0;
    573a:	4b3b      	ldr	r3, [pc, #236]	; (5828 <z_impl_log_process+0x128>)
	if (!bypass && z_log_dropped_pending()) {
    573c:	681b      	ldr	r3, [r3, #0]
    573e:	2b00      	cmp	r3, #0
    5740:	dd01      	ble.n	5746 <z_impl_log_process+0x46>
		dropped_notify();
    5742:	f7ff ff27 	bl	5594 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
    5746:	4839      	ldr	r0, [pc, #228]	; (582c <z_impl_log_process+0x12c>)
    5748:	f015 f9f0 	bl	1ab2c <log_list_head_peek>
    574c:	1e04      	subs	r4, r0, #0
    574e:	bf18      	it	ne
    5750:	2401      	movne	r4, #1
}
    5752:	4620      	mov	r0, r4
    5754:	b005      	add	sp, #20
    5756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
    575a:	4b35      	ldr	r3, [pc, #212]	; (5830 <z_impl_log_process+0x130>)
		if (!IS_ENABLED(CONFIG_LOG2) &&
    575c:	781b      	ldrb	r3, [r3, #0]
    575e:	b9cb      	cbnz	r3, 5794 <z_impl_log_process+0x94>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    5760:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
    5762:	07db      	lsls	r3, r3, #31
    5764:	d416      	bmi.n	5794 <z_impl_log_process+0x94>
	msg_str = log_msg_str_get(msg);
    5766:	f015 fae4 	bl	1ad32 <log_msg_str_get>
    576a:	4680      	mov	r8, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    576c:	4628      	mov	r0, r5
    576e:	f015 faab 	bl	1acc8 <log_msg_nargs_get>
    5772:	4601      	mov	r1, r0
    5774:	4640      	mov	r0, r8
    5776:	f7ff fe91 	bl	549c <z_log_get_s_mask>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    577a:	4f2e      	ldr	r7, [pc, #184]	; (5834 <z_impl_log_process+0x134>)
    577c:	4b2e      	ldr	r3, [pc, #184]	; (5838 <z_impl_log_process+0x138>)
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    577e:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 5854 <z_impl_log_process+0x154>
    5782:	1bdb      	subs	r3, r3, r7
    5784:	08db      	lsrs	r3, r3, #3
    5786:	9303      	str	r3, [sp, #12]
    5788:	4b2c      	ldr	r3, [pc, #176]	; (583c <z_impl_log_process+0x13c>)
    578a:	1bdb      	subs	r3, r3, r7
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    578c:	4606      	mov	r6, r0
    578e:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
	while (mask) {
    5792:	b936      	cbnz	r6, 57a2 <z_impl_log_process+0xa2>
    5794:	4e2a      	ldr	r6, [pc, #168]	; (5840 <z_impl_log_process+0x140>)
    5796:	4f2b      	ldr	r7, [pc, #172]	; (5844 <z_impl_log_process+0x144>)
    5798:	1bbf      	subs	r7, r7, r6
    579a:	113f      	asrs	r7, r7, #4
    579c:	f04f 0800 	mov.w	r8, #0
    57a0:	e03a      	b.n	5818 <z_impl_log_process+0x118>
		idx = 31 - __builtin_clz(mask);
    57a2:	fab6 f186 	clz	r1, r6
    57a6:	f1c1 091f 	rsb	r9, r1, #31
		str = (const char *)log_msg_arg_get(msg, idx);
    57aa:	4649      	mov	r1, r9
    57ac:	4628      	mov	r0, r5
    57ae:	f015 fa8e 	bl	1acce <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
    57b2:	4b25      	ldr	r3, [pc, #148]	; (5848 <z_impl_log_process+0x148>)
    57b4:	4298      	cmp	r0, r3
		str = (const char *)log_msg_arg_get(msg, idx);
    57b6:	4601      	mov	r1, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    57b8:	d302      	bcc.n	57c0 <z_impl_log_process+0xc0>
		if (!is_rodata(str) && !log_is_strdup(str) &&
    57ba:	4b24      	ldr	r3, [pc, #144]	; (584c <z_impl_log_process+0x14c>)
    57bc:	4298      	cmp	r0, r3
    57be:	d31a      	bcc.n	57f6 <z_impl_log_process+0xf6>
    57c0:	4608      	mov	r0, r1
    57c2:	f7ff ff8f 	bl	56e4 <log_is_strdup>
    57c6:	4602      	mov	r2, r0
    57c8:	b9a8      	cbnz	r0, 57f6 <z_impl_log_process+0xf6>
    57ca:	4b21      	ldr	r3, [pc, #132]	; (5850 <z_impl_log_process+0x150>)
    57cc:	4299      	cmp	r1, r3
    57ce:	d012      	beq.n	57f6 <z_impl_log_process+0xf6>
	return msg->hdr.ids.source_id;
    57d0:	896b      	ldrh	r3, [r5, #10]
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    57d2:	9903      	ldr	r1, [sp, #12]
    57d4:	f3c3 1389 	ubfx	r3, r3, #6, #10
    57d8:	428b      	cmp	r3, r1
	return __log_const_start[source_id].name;
    57da:	bf38      	it	cc
    57dc:	f857 2033 	ldrcc.w	r2, [r7, r3, lsl #3]
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    57e0:	ea4f 138a 	mov.w	r3, sl, lsl #6
    57e4:	f043 0301 	orr.w	r3, r3, #1
    57e8:	f8ad 3000 	strh.w	r3, [sp]
    57ec:	4649      	mov	r1, r9
    57ee:	4643      	mov	r3, r8
    57f0:	4658      	mov	r0, fp
    57f2:	f015 f9ea 	bl	1abca <log_3>
		mask &= ~BIT(idx);
    57f6:	2101      	movs	r1, #1
    57f8:	fa01 f109 	lsl.w	r1, r1, r9
    57fc:	ea26 0601 	bic.w	r6, r6, r1
    5800:	e7c7      	b.n	5792 <z_impl_log_process+0x92>
	return backend->cb->active;
    5802:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
    5804:	795b      	ldrb	r3, [r3, #5]
    5806:	b123      	cbz	r3, 5812 <z_impl_log_process+0x112>
	backend->api->put(backend, msg);
    5808:	6833      	ldr	r3, [r6, #0]
    580a:	4629      	mov	r1, r5
    580c:	685b      	ldr	r3, [r3, #4]
    580e:	4630      	mov	r0, r6
    5810:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    5812:	f108 0801 	add.w	r8, r8, #1
    5816:	3610      	adds	r6, #16
    5818:	45b8      	cmp	r8, r7
    581a:	dbf2      	blt.n	5802 <z_impl_log_process+0x102>
    581c:	e789      	b.n	5732 <z_impl_log_process+0x32>
    581e:	bf00      	nop
    5820:	20001138 	.word	0x20001138
    5824:	20000640 	.word	0x20000640
    5828:	20000644 	.word	0x20000644
    582c:	2000064c 	.word	0x2000064c
    5830:	20001139 	.word	0x20001139
    5834:	0001c8a0 	.word	0x0001c8a0
    5838:	0001c8f8 	.word	0x0001c8f8
    583c:	0001c8b0 	.word	0x0001c8b0
    5840:	0001c8f8 	.word	0x0001c8f8
    5844:	0001c908 	.word	0x0001c908
    5848:	0001c5f0 	.word	0x0001c5f0
    584c:	0001e2e0 	.word	0x0001e2e0
    5850:	0001d78b 	.word	0x0001d78b
    5854:	0001d7a5 	.word	0x0001d7a5

00005858 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
    5858:	4b29      	ldr	r3, [pc, #164]	; (5900 <msg_finalize+0xa8>)
{
    585a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	msg->hdr.timestamp = timestamp_func();
    585c:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
    585e:	8141      	strh	r1, [r0, #10]
{
    5860:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    5862:	4798      	blx	r3
    5864:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    5866:	f04f 0320 	mov.w	r3, #32
    586a:	f3ef 8511 	mrs	r5, BASEPRI
    586e:	f383 8811 	msr	BASEPRI, r3
    5872:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    5876:	4823      	ldr	r0, [pc, #140]	; (5904 <msg_finalize+0xac>)
    5878:	4621      	mov	r1, r4
    587a:	f015 f94d 	bl	1ab18 <log_list_add_tail>
	__asm__ volatile(
    587e:	f385 8811 	msr	BASEPRI, r5
    5882:	f3bf 8f6f 	isb	sy
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    5886:	f3bf 8f5b 	dmb	ish
    588a:	4b1f      	ldr	r3, [pc, #124]	; (5908 <msg_finalize+0xb0>)
    588c:	e853 2f00 	ldrex	r2, [r3]
    5890:	3201      	adds	r2, #1
    5892:	e843 2100 	strex	r1, r2, [r3]
    5896:	2900      	cmp	r1, #0
    5898:	d1f8      	bne.n	588c <msg_finalize+0x34>
    589a:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
    589e:	4a1b      	ldr	r2, [pc, #108]	; (590c <msg_finalize+0xb4>)
    58a0:	7812      	ldrb	r2, [r2, #0]
    58a2:	b182      	cbz	r2, 58c6 <msg_finalize+0x6e>
	__asm__ volatile(
    58a4:	f04f 0320 	mov.w	r3, #32
    58a8:	f3ef 8411 	mrs	r4, BASEPRI
    58ac:	f383 8811 	msr	BASEPRI, r3
    58b0:	f3bf 8f6f 	isb	sy
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    58b4:	2000      	movs	r0, #0
    58b6:	f7ff ff23 	bl	5700 <z_impl_log_process>
	__asm__ volatile(
    58ba:	f384 8811 	msr	BASEPRI, r4
    58be:	f3bf 8f6f 	isb	sy
}
    58c2:	b003      	add	sp, #12
    58c4:	bd30      	pop	{r4, r5, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    58c6:	4a12      	ldr	r2, [pc, #72]	; (5910 <msg_finalize+0xb8>)
    58c8:	681b      	ldr	r3, [r3, #0]
    58ca:	6812      	ldr	r2, [r2, #0]
    58cc:	2a00      	cmp	r2, #0
    58ce:	d0f8      	beq.n	58c2 <msg_finalize+0x6a>
    58d0:	2b01      	cmp	r3, #1
    58d2:	d10a      	bne.n	58ea <msg_finalize+0x92>
	z_impl_k_timer_start(timer, duration, period);
    58d4:	2200      	movs	r2, #0
    58d6:	2300      	movs	r3, #0
    58d8:	e9cd 2300 	strd	r2, r3, [sp]
    58dc:	480d      	ldr	r0, [pc, #52]	; (5914 <msg_finalize+0xbc>)
    58de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    58e2:	2300      	movs	r3, #0
    58e4:	f005 fee6 	bl	b6b4 <z_impl_k_timer_start>
    58e8:	e7eb      	b.n	58c2 <msg_finalize+0x6a>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    58ea:	2b0a      	cmp	r3, #10
    58ec:	d1e9      	bne.n	58c2 <msg_finalize+0x6a>
	z_impl_k_timer_stop(timer);
    58ee:	4809      	ldr	r0, [pc, #36]	; (5914 <msg_finalize+0xbc>)
    58f0:	f016 fbc3 	bl	1c07a <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    58f4:	4808      	ldr	r0, [pc, #32]	; (5918 <msg_finalize+0xc0>)
}
    58f6:	b003      	add	sp, #12
    58f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    58fc:	f005 b846 	b.w	a98c <z_impl_k_sem_give>
    5900:	20000004 	.word	0x20000004
    5904:	2000064c 	.word	0x2000064c
    5908:	20000640 	.word	0x20000640
    590c:	20001139 	.word	0x20001139
    5910:	20000670 	.word	0x20000670
    5914:	200002b8 	.word	0x200002b8
    5918:	20000258 	.word	0x20000258

0000591c <log_process_thread_func>:
{
    591c:	b510      	push	{r4, lr}
	log_init();
    591e:	f7ff fe7d 	bl	561c <log_init>
	return z_impl_k_current_get();
    5922:	f005 fcad 	bl	b280 <z_impl_k_current_get>
	proc_tid = process_tid;
    5926:	4b0c      	ldr	r3, [pc, #48]	; (5958 <log_process_thread_func+0x3c>)
    5928:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    592a:	b130      	cbz	r0, 593a <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    592c:	4b0b      	ldr	r3, [pc, #44]	; (595c <log_process_thread_func+0x40>)
	    process_tid &&
    592e:	681b      	ldr	r3, [r3, #0]
    5930:	2b09      	cmp	r3, #9
    5932:	dd02      	ble.n	593a <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    5934:	480a      	ldr	r0, [pc, #40]	; (5960 <log_process_thread_func+0x44>)
    5936:	f005 f829 	bl	a98c <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    593a:	4c09      	ldr	r4, [pc, #36]	; (5960 <log_process_thread_func+0x44>)
    593c:	2000      	movs	r0, #0
    593e:	f7ff fedf 	bl	5700 <z_impl_log_process>
		if (log_process(false) == false) {
    5942:	2800      	cmp	r0, #0
    5944:	d1fa      	bne.n	593c <log_process_thread_func+0x20>
    5946:	f04f 32ff 	mov.w	r2, #4294967295
    594a:	f04f 33ff 	mov.w	r3, #4294967295
    594e:	4620      	mov	r0, r4
    5950:	f005 f83c 	bl	a9cc <z_impl_k_sem_take>
    5954:	e7f2      	b.n	593c <log_process_thread_func+0x20>
    5956:	bf00      	nop
    5958:	20000670 	.word	0x20000670
    595c:	20000640 	.word	0x20000640
    5960:	20000258 	.word	0x20000258

00005964 <z_impl_log_panic>:
{
    5964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    5966:	4f0e      	ldr	r7, [pc, #56]	; (59a0 <z_impl_log_panic+0x3c>)
    5968:	783d      	ldrb	r5, [r7, #0]
    596a:	b975      	cbnz	r5, 598a <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
    596c:	4c0d      	ldr	r4, [pc, #52]	; (59a4 <z_impl_log_panic+0x40>)
    596e:	4e0e      	ldr	r6, [pc, #56]	; (59a8 <z_impl_log_panic+0x44>)
	log_init();
    5970:	f7ff fe54 	bl	561c <log_init>
    5974:	1b36      	subs	r6, r6, r4
    5976:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    5978:	42b5      	cmp	r5, r6
    597a:	db07      	blt.n	598c <z_impl_log_panic+0x28>
    597c:	2000      	movs	r0, #0
    597e:	f7ff febf 	bl	5700 <z_impl_log_process>
		while (log_process(false) == true) {
    5982:	2800      	cmp	r0, #0
    5984:	d1fa      	bne.n	597c <z_impl_log_panic+0x18>
	panic_mode = true;
    5986:	2301      	movs	r3, #1
    5988:	703b      	strb	r3, [r7, #0]
}
    598a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    598c:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    598e:	795b      	ldrb	r3, [r3, #5]
    5990:	b11b      	cbz	r3, 599a <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    5992:	6823      	ldr	r3, [r4, #0]
    5994:	4620      	mov	r0, r4
    5996:	695b      	ldr	r3, [r3, #20]
    5998:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    599a:	3501      	adds	r5, #1
    599c:	3410      	adds	r4, #16
    599e:	e7eb      	b.n	5978 <z_impl_log_panic+0x14>
    59a0:	20001139 	.word	0x20001139
    59a4:	0001c8f8 	.word	0x0001c8f8
    59a8:	0001c908 	.word	0x0001c908

000059ac <log_free>:
{
    59ac:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    59ae:	3804      	subs	r0, #4
    59b0:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    59b2:	f3bf 8f5b 	dmb	ish
    59b6:	e850 3f00 	ldrex	r3, [r0]
    59ba:	1e5a      	subs	r2, r3, #1
    59bc:	e840 2100 	strex	r1, r2, [r0]
    59c0:	2900      	cmp	r1, #0
    59c2:	d1f8      	bne.n	59b6 <log_free+0xa>
    59c4:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
    59c8:	2b01      	cmp	r3, #1
    59ca:	d103      	bne.n	59d4 <log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    59cc:	4803      	ldr	r0, [pc, #12]	; (59dc <log_free+0x30>)
    59ce:	a901      	add	r1, sp, #4
    59d0:	f016 f995 	bl	1bcfe <k_mem_slab_free>
}
    59d4:	b003      	add	sp, #12
    59d6:	f85d fb04 	ldr.w	pc, [sp], #4
    59da:	bf00      	nop
    59dc:	20000654 	.word	0x20000654

000059e0 <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    59e0:	2320      	movs	r3, #32
    59e2:	4902      	ldr	r1, [pc, #8]	; (59ec <log_msg_pool_init+0xc>)
    59e4:	4802      	ldr	r0, [pc, #8]	; (59f0 <log_msg_pool_init+0x10>)
    59e6:	461a      	mov	r2, r3
    59e8:	f016 b96e 	b.w	1bcc8 <k_mem_slab_init>
    59ec:	200039c0 	.word	0x200039c0
    59f0:	20000674 	.word	0x20000674

000059f4 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
    59f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	union log_msg_chunk *msg = NULL;
    59f6:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			z_log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
    59f8:	4d09      	ldr	r5, [pc, #36]	; (5a20 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
    59fa:	9301      	str	r3, [sp, #4]
    59fc:	2001      	movs	r0, #1
    59fe:	f7ff fe7f 	bl	5700 <z_impl_log_process>
    5a02:	4604      	mov	r4, r0
			z_log_dropped();
    5a04:	f7ff fda6 	bl	5554 <z_log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    5a08:	2200      	movs	r2, #0
    5a0a:	2300      	movs	r3, #0
    5a0c:	a901      	add	r1, sp, #4
    5a0e:	4628      	mov	r0, r5
    5a10:	f004 fdf6 	bl	a600 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    5a14:	b108      	cbz	r0, 5a1a <log_msg_no_space_handle+0x26>
    5a16:	2c00      	cmp	r4, #0
    5a18:	d1f0      	bne.n	59fc <log_msg_no_space_handle+0x8>
	} else {
		z_log_dropped();
	}
	return msg;

}
    5a1a:	9801      	ldr	r0, [sp, #4]
    5a1c:	b003      	add	sp, #12
    5a1e:	bd30      	pop	{r4, r5, pc}
    5a20:	20000674 	.word	0x20000674

00005a24 <log_msg_chunk_alloc>:
{
    5a24:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
    5a26:	2300      	movs	r3, #0
    5a28:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    5a2a:	4807      	ldr	r0, [pc, #28]	; (5a48 <log_msg_chunk_alloc+0x24>)
    5a2c:	2200      	movs	r2, #0
    5a2e:	2300      	movs	r3, #0
    5a30:	a901      	add	r1, sp, #4
    5a32:	f004 fde5 	bl	a600 <k_mem_slab_alloc>
	if (err != 0) {
    5a36:	b110      	cbz	r0, 5a3e <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
    5a38:	f7ff ffdc 	bl	59f4 <log_msg_no_space_handle>
    5a3c:	9001      	str	r0, [sp, #4]
}
    5a3e:	9801      	ldr	r0, [sp, #4]
    5a40:	b003      	add	sp, #12
    5a42:	f85d fb04 	ldr.w	pc, [sp], #4
    5a46:	bf00      	nop
    5a48:	20000674 	.word	0x20000674

00005a4c <msg_free>:
{
    5a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    5a4e:	7a03      	ldrb	r3, [r0, #8]
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
    5a50:	7a45      	ldrb	r5, [r0, #9]
{
    5a52:	b085      	sub	sp, #20
	return msg->hdr.params.std.nargs;
    5a54:	092d      	lsrs	r5, r5, #4
{
    5a56:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
    5a58:	07d8      	lsls	r0, r3, #31
    5a5a:	d41c      	bmi.n	5a96 <msg_free+0x4a>
    5a5c:	b1dd      	cbz	r5, 5a96 <msg_free+0x4a>
		uint32_t smask = 0U;
    5a5e:	2400      	movs	r4, #0
		for (i = 0U; i < nargs; i++) {
    5a60:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
    5a62:	9801      	ldr	r0, [sp, #4]
    5a64:	4631      	mov	r1, r6
    5a66:	f015 f932 	bl	1acce <log_msg_arg_get>
    5a6a:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
    5a6c:	f7ff fe3a 	bl	56e4 <log_is_strdup>
    5a70:	b170      	cbz	r0, 5a90 <msg_free+0x44>
				if (smask == 0U) {
    5a72:	b934      	cbnz	r4, 5a82 <msg_free+0x36>
					smask = z_log_get_s_mask(
    5a74:	9b01      	ldr	r3, [sp, #4]
    5a76:	4629      	mov	r1, r5
    5a78:	6918      	ldr	r0, [r3, #16]
    5a7a:	f7ff fd0f 	bl	549c <z_log_get_s_mask>
					if (smask == 0U) {
    5a7e:	4604      	mov	r4, r0
    5a80:	b148      	cbz	r0, 5a96 <msg_free+0x4a>
				if (smask & BIT(i)) {
    5a82:	fa24 f306 	lsr.w	r3, r4, r6
    5a86:	07d9      	lsls	r1, r3, #31
    5a88:	d502      	bpl.n	5a90 <msg_free+0x44>
					log_free(buf);
    5a8a:	4638      	mov	r0, r7
    5a8c:	f7ff ff8e 	bl	59ac <log_free>
		for (i = 0U; i < nargs; i++) {
    5a90:	3601      	adds	r6, #1
    5a92:	42ae      	cmp	r6, r5
    5a94:	d3e5      	bcc.n	5a62 <msg_free+0x16>
	if (msg->hdr.params.generic.ext == 1) {
    5a96:	9b01      	ldr	r3, [sp, #4]
    5a98:	7a1a      	ldrb	r2, [r3, #8]
    5a9a:	0792      	lsls	r2, r2, #30
    5a9c:	d504      	bpl.n	5aa8 <msg_free+0x5c>
		cont_free(msg->payload.ext.next);
    5a9e:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    5aa0:	4c08      	ldr	r4, [pc, #32]	; (5ac4 <msg_free+0x78>)
    5aa2:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
    5aa4:	9b03      	ldr	r3, [sp, #12]
    5aa6:	b92b      	cbnz	r3, 5ab4 <msg_free+0x68>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    5aa8:	4806      	ldr	r0, [pc, #24]	; (5ac4 <msg_free+0x78>)
    5aaa:	a901      	add	r1, sp, #4
    5aac:	f016 f927 	bl	1bcfe <k_mem_slab_free>
}
    5ab0:	b005      	add	sp, #20
    5ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
    5ab4:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    5ab6:	a903      	add	r1, sp, #12
    5ab8:	4620      	mov	r0, r4
    5aba:	f016 f920 	bl	1bcfe <k_mem_slab_free>
		cont = next;
    5abe:	9503      	str	r5, [sp, #12]
    5ac0:	e7f0      	b.n	5aa4 <msg_free+0x58>
    5ac2:	bf00      	nop
    5ac4:	20000674 	.word	0x20000674

00005ac8 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    5ac8:	b40e      	push	{r1, r2, r3}
    5aca:	b503      	push	{r0, r1, lr}
    5acc:	ab03      	add	r3, sp, #12
    5ace:	4601      	mov	r1, r0
    5ad0:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    5ad4:	4804      	ldr	r0, [pc, #16]	; (5ae8 <print_formatted+0x20>)
	va_start(args, fmt);
    5ad6:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    5ad8:	f7ff f8fc 	bl	4cd4 <cbvprintf>
	va_end(args);

	return length;
}
    5adc:	b002      	add	sp, #8
    5ade:	f85d eb04 	ldr.w	lr, [sp], #4
    5ae2:	b003      	add	sp, #12
    5ae4:	4770      	bx	lr
    5ae6:	bf00      	nop
    5ae8:	0001b033 	.word	0x0001b033

00005aec <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    5aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5af0:	b087      	sub	sp, #28
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
    5af2:	f011 0602 	ands.w	r6, r1, #2
{
    5af6:	9205      	str	r2, [sp, #20]
    5af8:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
    5afc:	f9bd 9048 	ldrsh.w	r9, [sp, #72]	; 0x48
    5b00:	4607      	mov	r7, r0
    5b02:	461a      	mov	r2, r3
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    5b04:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    5b08:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
    5b0c:	d006      	beq.n	5b1c <prefix_print+0x30>
	if (!format) {
    5b0e:	f011 0f44 	tst.w	r1, #68	; 0x44
    5b12:	d138      	bne.n	5b86 <prefix_print+0x9a>
		length = print_formatted(output, "[%08lu] ", timestamp);
    5b14:	4932      	ldr	r1, [pc, #200]	; (5be0 <prefix_print+0xf4>)
    5b16:	f7ff ffd7 	bl	5ac8 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    5b1a:	4606      	mov	r6, r0
	if (color) {
    5b1c:	f1ba 0f00 	cmp.w	sl, #0
    5b20:	d00a      	beq.n	5b38 <prefix_print+0x4c>
		const char *log_color = start && (colors[level] != NULL) ?
    5b22:	4b30      	ldr	r3, [pc, #192]	; (5be4 <prefix_print+0xf8>)
		print_formatted(output, "%s", log_color);
    5b24:	4930      	ldr	r1, [pc, #192]	; (5be8 <prefix_print+0xfc>)
		const char *log_color = start && (colors[level] != NULL) ?
    5b26:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
		print_formatted(output, "%s", log_color);
    5b2a:	4b30      	ldr	r3, [pc, #192]	; (5bec <prefix_print+0x100>)
    5b2c:	4638      	mov	r0, r7
    5b2e:	2a00      	cmp	r2, #0
    5b30:	bf08      	it	eq
    5b32:	461a      	moveq	r2, r3
    5b34:	f7ff ffc8 	bl	5ac8 <print_formatted>
	if (level_on) {
    5b38:	b13d      	cbz	r5, 5b4a <prefix_print+0x5e>
		total += print_formatted(output, "<%s> ", severity[level]);
    5b3a:	4b2d      	ldr	r3, [pc, #180]	; (5bf0 <prefix_print+0x104>)
    5b3c:	492d      	ldr	r1, [pc, #180]	; (5bf4 <prefix_print+0x108>)
    5b3e:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
    5b42:	4638      	mov	r0, r7
    5b44:	f7ff ffc0 	bl	5ac8 <print_formatted>
    5b48:	4605      	mov	r5, r0
	if (source_id >= 0) {
    5b4a:	f1b9 0f00 	cmp.w	r9, #0
    5b4e:	db16      	blt.n	5b7e <prefix_print+0x92>
		total += print_formatted(output,
    5b50:	9b05      	ldr	r3, [sp, #20]
    5b52:	2b00      	cmp	r3, #0
    5b54:	d041      	beq.n	5bda <prefix_print+0xee>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    5b56:	2301      	movs	r3, #1
    5b58:	fa03 f808 	lsl.w	r8, r3, r8
		total += print_formatted(output,
    5b5c:	4b26      	ldr	r3, [pc, #152]	; (5bf8 <prefix_print+0x10c>)
    5b5e:	4c27      	ldr	r4, [pc, #156]	; (5bfc <prefix_print+0x110>)
    5b60:	f018 0f10 	tst.w	r8, #16
    5b64:	bf18      	it	ne
    5b66:	461c      	movne	r4, r3
    5b68:	4649      	mov	r1, r9
    5b6a:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    5b6e:	f7ff fd2d 	bl	55cc <log_source_name_get>
    5b72:	4621      	mov	r1, r4
    5b74:	4602      	mov	r2, r0
    5b76:	4638      	mov	r0, r7
    5b78:	f7ff ffa6 	bl	5ac8 <print_formatted>
    5b7c:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
    5b7e:	19a8      	adds	r0, r5, r6
    5b80:	b007      	add	sp, #28
    5b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
    5b86:	4b1e      	ldr	r3, [pc, #120]	; (5c00 <prefix_print+0x114>)
    5b88:	6819      	ldr	r1, [r3, #0]
    5b8a:	b321      	cbz	r1, 5bd6 <prefix_print+0xea>
		timestamp /= timestamp_div;
    5b8c:	4b1d      	ldr	r3, [pc, #116]	; (5c04 <prefix_print+0x118>)
    5b8e:	f44f 6c61 	mov.w	ip, #3600	; 0xe10
    5b92:	681b      	ldr	r3, [r3, #0]
    5b94:	fbb2 f3f3 	udiv	r3, r2, r3
		ms = (remainder * 1000U) / freq;
    5b98:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
		total_seconds = timestamp / freq;
    5b9c:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
    5ba0:	fbb4 f2fc 	udiv	r2, r4, ip
    5ba4:	fb0c 4c12 	mls	ip, ip, r2, r4
		remainder = timestamp % freq;
    5ba8:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
    5bac:	4374      	muls	r4, r6
		mins = seconds / 60U;
    5bae:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    5bb2:	fbb4 fbf1 	udiv	fp, r4, r1
    5bb6:	fb01 441b 	mls	r4, r1, fp, r4
    5bba:	4374      	muls	r4, r6
		mins = seconds / 60U;
    5bbc:	fbbc f3fe 	udiv	r3, ip, lr
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    5bc0:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(output,
    5bc4:	e9cd b101 	strd	fp, r1, [sp, #4]
    5bc8:	fb0e c113 	mls	r1, lr, r3, ip
    5bcc:	9100      	str	r1, [sp, #0]
    5bce:	490e      	ldr	r1, [pc, #56]	; (5c08 <prefix_print+0x11c>)
    5bd0:	f7ff ff7a 	bl	5ac8 <print_formatted>
    5bd4:	e7a1      	b.n	5b1a <prefix_print+0x2e>
		length = 0;
    5bd6:	4608      	mov	r0, r1
    5bd8:	e79f      	b.n	5b1a <prefix_print+0x2e>
		total += print_formatted(output,
    5bda:	4c08      	ldr	r4, [pc, #32]	; (5bfc <prefix_print+0x110>)
    5bdc:	e7c4      	b.n	5b68 <prefix_print+0x7c>
    5bde:	bf00      	nop
    5be0:	0001d7f6 	.word	0x0001d7f6
    5be4:	0001cd8c 	.word	0x0001cd8c
    5be8:	0001dd70 	.word	0x0001dd70
    5bec:	0001d7e8 	.word	0x0001d7e8
    5bf0:	0001cda0 	.word	0x0001cda0
    5bf4:	0001d81b 	.word	0x0001d81b
    5bf8:	0001d7f2 	.word	0x0001d7f2
    5bfc:	0001d7ed 	.word	0x0001d7ed
    5c00:	20000690 	.word	0x20000690
    5c04:	20000694 	.word	0x20000694
    5c08:	0001d7ff 	.word	0x0001d7ff

00005c0c <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
    5c0c:	b538      	push	{r3, r4, r5, lr}
    5c0e:	460c      	mov	r4, r1
	if (color) {
    5c10:	07e1      	lsls	r1, r4, #31
{
    5c12:	4605      	mov	r5, r0
	if (color) {
    5c14:	d503      	bpl.n	5c1e <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
    5c16:	4a08      	ldr	r2, [pc, #32]	; (5c38 <postfix_print+0x2c>)
    5c18:	4908      	ldr	r1, [pc, #32]	; (5c3c <postfix_print+0x30>)
    5c1a:	f7ff ff55 	bl	5ac8 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    5c1e:	06e2      	lsls	r2, r4, #27
    5c20:	d408      	bmi.n	5c34 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    5c22:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    5c24:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
    5c26:	bf4c      	ite	mi
    5c28:	4905      	ldrmi	r1, [pc, #20]	; (5c40 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    5c2a:	4906      	ldrpl	r1, [pc, #24]	; (5c44 <postfix_print+0x38>)
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
    5c2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
    5c30:	f7ff bf4a 	b.w	5ac8 <print_formatted>
}
    5c34:	bd38      	pop	{r3, r4, r5, pc}
    5c36:	bf00      	nop
    5c38:	0001d7e8 	.word	0x0001d7e8
    5c3c:	0001dd70 	.word	0x0001dd70
    5c40:	0001d822 	.word	0x0001d822
    5c44:	0001d821 	.word	0x0001d821

00005c48 <hexdump_line_print>:
{
    5c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5c4c:	461d      	mov	r5, r3
    5c4e:	9b08      	ldr	r3, [sp, #32]
    5c50:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    5c52:	06da      	lsls	r2, r3, #27
{
    5c54:	4604      	mov	r4, r0
    5c56:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    5c58:	d405      	bmi.n	5c66 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    5c5a:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    5c5c:	bf4c      	ite	mi
    5c5e:	492b      	ldrmi	r1, [pc, #172]	; (5d0c <hexdump_line_print+0xc4>)
		print_formatted(ctx, "\r\n");
    5c60:	492b      	ldrpl	r1, [pc, #172]	; (5d10 <hexdump_line_print+0xc8>)
    5c62:	f7ff ff31 	bl	5ac8 <print_formatted>
		print_formatted(output, " ");
    5c66:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 5d18 <hexdump_line_print+0xd0>
{
    5c6a:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
    5c6e:	45a8      	cmp	r8, r5
    5c70:	db2d      	blt.n	5cce <hexdump_line_print+0x86>
			print_formatted(output, "   ");
    5c72:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 5d1c <hexdump_line_print+0xd4>
			print_formatted(output, "%02x ", data[i]);
    5c76:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 5d20 <hexdump_line_print+0xd8>
			print_formatted(output, " ");
    5c7a:	f8df a09c 	ldr.w	sl, [pc, #156]	; 5d18 <hexdump_line_print+0xd0>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    5c7e:	2500      	movs	r5, #0
		if (i < length) {
    5c80:	42bd      	cmp	r5, r7
    5c82:	d232      	bcs.n	5cea <hexdump_line_print+0xa2>
			print_formatted(output, "%02x ", data[i]);
    5c84:	5d72      	ldrb	r2, [r6, r5]
    5c86:	4649      	mov	r1, r9
    5c88:	4620      	mov	r0, r4
    5c8a:	f7ff ff1d 	bl	5ac8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    5c8e:	3501      	adds	r5, #1
    5c90:	2d10      	cmp	r5, #16
    5c92:	d123      	bne.n	5cdc <hexdump_line_print+0x94>
	print_formatted(output, "|");
    5c94:	491f      	ldr	r1, [pc, #124]	; (5d14 <hexdump_line_print+0xcc>)
			print_formatted(output, " ");
    5c96:	f8df 8080 	ldr.w	r8, [pc, #128]	; 5d18 <hexdump_line_print+0xd0>
			      isprint((int)c) ? c : '.');
    5c9a:	f8df 9088 	ldr.w	r9, [pc, #136]	; 5d24 <hexdump_line_print+0xdc>
			print_formatted(output, "%c",
    5c9e:	f8df a088 	ldr.w	sl, [pc, #136]	; 5d28 <hexdump_line_print+0xe0>
	print_formatted(output, "|");
    5ca2:	4620      	mov	r0, r4
    5ca4:	f7ff ff10 	bl	5ac8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    5ca8:	2500      	movs	r5, #0
		if (i < length) {
    5caa:	42af      	cmp	r7, r5
    5cac:	d929      	bls.n	5d02 <hexdump_line_print+0xba>
			char c = (char)data[i];
    5cae:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(output, "%c",
    5cb0:	f812 3009 	ldrb.w	r3, [r2, r9]
    5cb4:	f013 0f97 	tst.w	r3, #151	; 0x97
    5cb8:	bf08      	it	eq
    5cba:	222e      	moveq	r2, #46	; 0x2e
    5cbc:	4651      	mov	r1, sl
    5cbe:	4620      	mov	r0, r4
    5cc0:	f7ff ff02 	bl	5ac8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    5cc4:	3501      	adds	r5, #1
    5cc6:	2d10      	cmp	r5, #16
    5cc8:	d114      	bne.n	5cf4 <hexdump_line_print+0xac>
}
    5cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
    5cce:	4649      	mov	r1, r9
    5cd0:	4620      	mov	r0, r4
    5cd2:	f7ff fef9 	bl	5ac8 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    5cd6:	f108 0801 	add.w	r8, r8, #1
    5cda:	e7c8      	b.n	5c6e <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    5cdc:	076a      	lsls	r2, r5, #29
    5cde:	d1cf      	bne.n	5c80 <hexdump_line_print+0x38>
			print_formatted(output, " ");
    5ce0:	4651      	mov	r1, sl
    5ce2:	4620      	mov	r0, r4
    5ce4:	f7ff fef0 	bl	5ac8 <print_formatted>
    5ce8:	e7ca      	b.n	5c80 <hexdump_line_print+0x38>
			print_formatted(output, "   ");
    5cea:	4641      	mov	r1, r8
    5cec:	4620      	mov	r0, r4
    5cee:	f7ff feeb 	bl	5ac8 <print_formatted>
    5cf2:	e7cc      	b.n	5c8e <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    5cf4:	076b      	lsls	r3, r5, #29
    5cf6:	d1d8      	bne.n	5caa <hexdump_line_print+0x62>
			print_formatted(output, " ");
    5cf8:	4641      	mov	r1, r8
    5cfa:	4620      	mov	r0, r4
    5cfc:	f7ff fee4 	bl	5ac8 <print_formatted>
    5d00:	e7d3      	b.n	5caa <hexdump_line_print+0x62>
			print_formatted(output, " ");
    5d02:	4641      	mov	r1, r8
    5d04:	4620      	mov	r0, r4
    5d06:	f7ff fedf 	bl	5ac8 <print_formatted>
    5d0a:	e7db      	b.n	5cc4 <hexdump_line_print+0x7c>
    5d0c:	0001d822 	.word	0x0001d822
    5d10:	0001d821 	.word	0x0001d821
    5d14:	0001d82e 	.word	0x0001d82e
    5d18:	0001d82c 	.word	0x0001d82c
    5d1c:	0001d82a 	.word	0x0001d82a
    5d20:	0001d824 	.word	0x0001d824
    5d24:	0001e1a5 	.word	0x0001e1a5
    5d28:	0001d830 	.word	0x0001d830

00005d2c <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg,
			    uint32_t flags)
{
    5d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
    5d30:	7a8b      	ldrb	r3, [r1, #10]
		log_output_msg_syst_process(output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(output, flags, std_msg, timestamp,
    5d32:	f013 0807 	ands.w	r8, r3, #7
{
    5d36:	4617      	mov	r7, r2
    5d38:	b08a      	sub	sp, #40	; 0x28
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    5d3a:	7a0a      	ldrb	r2, [r1, #8]
    5d3c:	4605      	mov	r5, r0
    5d3e:	460e      	mov	r6, r1
			0 : prefix_print(output, flags, std_msg, timestamp,
    5d40:	d021      	beq.n	5d86 <log_output_msg_process+0x5a>
	return msg->hdr.ids.source_id;
    5d42:	8949      	ldrh	r1, [r1, #10]
    5d44:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    5d48:	f3c1 1189 	ubfx	r1, r1, #6, #10
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    5d4c:	43d2      	mvns	r2, r2
    5d4e:	e9cd 8300 	strd	r8, r3, [sp]
    5d52:	9102      	str	r1, [sp, #8]
    5d54:	68f3      	ldr	r3, [r6, #12]
    5d56:	f002 0201 	and.w	r2, r2, #1
    5d5a:	4639      	mov	r1, r7
    5d5c:	f7ff fec6 	bl	5aec <prefix_print>
    5d60:	4681      	mov	r9, r0
    5d62:	7a34      	ldrb	r4, [r6, #8]
    5d64:	43e4      	mvns	r4, r4
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
    5d66:	f014 0401 	ands.w	r4, r4, #1
    5d6a:	d00e      	beq.n	5d8a <log_output_msg_process+0x5e>
		std_print(msg, output);
    5d6c:	4629      	mov	r1, r5
    5d6e:	4630      	mov	r0, r6
    5d70:	f014 fff5 	bl	1ad5e <std_print>
		raw_string_print(msg, output);
	} else {
		hexdump_print(msg, output, prefix_offset, flags);
	}

	if (!raw_string) {
    5d74:	f1b8 0f00 	cmp.w	r8, #0
    5d78:	d02b      	beq.n	5dd2 <log_output_msg_process+0xa6>
		postfix_print(output, flags, level);
    5d7a:	4642      	mov	r2, r8
    5d7c:	4639      	mov	r1, r7
    5d7e:	4628      	mov	r0, r5
    5d80:	f7ff ff44 	bl	5c0c <postfix_print>
    5d84:	e025      	b.n	5dd2 <log_output_msg_process+0xa6>
			0 : prefix_print(output, flags, std_msg, timestamp,
    5d86:	46c1      	mov	r9, r8
    5d88:	e7eb      	b.n	5d62 <log_output_msg_process+0x36>
	} else if (raw_string) {
    5d8a:	f1b8 0f00 	cmp.w	r8, #0
    5d8e:	d126      	bne.n	5dde <log_output_msg_process+0xb2>
	size_t offset = 0;
    5d90:	4627      	mov	r7, r4
		length = output->size;
    5d92:	68eb      	ldr	r3, [r5, #12]
    5d94:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
    5d96:	aa06      	add	r2, sp, #24
    5d98:	463b      	mov	r3, r7
    5d9a:	68a9      	ldr	r1, [r5, #8]
    5d9c:	4630      	mov	r0, r6
    5d9e:	f014 ffca 	bl	1ad36 <log_msg_hexdump_data_get>
		output->control_block->offset = length;
    5da2:	9a06      	ldr	r2, [sp, #24]
    5da4:	686b      	ldr	r3, [r5, #4]
    5da6:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    5da8:	b13a      	cbz	r2, 5dba <log_output_msg_process+0x8e>
			eol = (output->buf[length - 1] == '\n');
    5daa:	68ab      	ldr	r3, [r5, #8]
    5dac:	4413      	add	r3, r2
    5dae:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    5db2:	f1a4 030a 	sub.w	r3, r4, #10
    5db6:	425c      	negs	r4, r3
    5db8:	415c      	adcs	r4, r3
		log_output_flush(output);
    5dba:	4628      	mov	r0, r5
    5dbc:	f015 f92c 	bl	1b018 <log_output_flush>
		offset += length;
    5dc0:	9b06      	ldr	r3, [sp, #24]
    5dc2:	441f      	add	r7, r3
	} while (length > 0);
    5dc4:	2b00      	cmp	r3, #0
    5dc6:	d1e4      	bne.n	5d92 <log_output_msg_process+0x66>
	if (eol) {
    5dc8:	b11c      	cbz	r4, 5dd2 <log_output_msg_process+0xa6>
		print_formatted(output, "\r");
    5dca:	4914      	ldr	r1, [pc, #80]	; (5e1c <log_output_msg_process+0xf0>)
    5dcc:	4628      	mov	r0, r5
    5dce:	f7ff fe7b 	bl	5ac8 <print_formatted>
	}

	log_output_flush(output);
    5dd2:	4628      	mov	r0, r5
    5dd4:	f015 f920 	bl	1b018 <log_output_flush>
}
    5dd8:	b00a      	add	sp, #40	; 0x28
    5dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(output, "%s", log_msg_str_get(msg));
    5dde:	4630      	mov	r0, r6
    5de0:	f014 ffa7 	bl	1ad32 <log_msg_str_get>
    5de4:	490e      	ldr	r1, [pc, #56]	; (5e20 <log_output_msg_process+0xf4>)
    5de6:	4602      	mov	r2, r0
    5de8:	4628      	mov	r0, r5
    5dea:	f7ff fe6d 	bl	5ac8 <print_formatted>
		length = sizeof(buf);
    5dee:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    5df2:	aa05      	add	r2, sp, #20
    5df4:	4623      	mov	r3, r4
    5df6:	a906      	add	r1, sp, #24
    5df8:	4630      	mov	r0, r6
		length = sizeof(buf);
    5dfa:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    5dfe:	f014 ff9a 	bl	1ad36 <log_msg_hexdump_data_get>
		if (length) {
    5e02:	9a05      	ldr	r2, [sp, #20]
    5e04:	2a00      	cmp	r2, #0
    5e06:	d0b8      	beq.n	5d7a <log_output_msg_process+0x4e>
			hexdump_line_print(output, buf, length,
    5e08:	464b      	mov	r3, r9
    5e0a:	9700      	str	r7, [sp, #0]
    5e0c:	a906      	add	r1, sp, #24
    5e0e:	4628      	mov	r0, r5
    5e10:	f7ff ff1a 	bl	5c48 <hexdump_line_print>
			offset += length;
    5e14:	9b05      	ldr	r3, [sp, #20]
    5e16:	441c      	add	r4, r3
		length = sizeof(buf);
    5e18:	e7eb      	b.n	5df2 <log_output_msg_process+0xc6>
    5e1a:	bf00      	nop
    5e1c:	0001d833 	.word	0x0001d833
    5e20:	0001dd70 	.word	0x0001dd70

00005e24 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    5e24:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    5e26:	f242 730f 	movw	r3, #9999	; 0x270f
    5e2a:	428b      	cmp	r3, r1
    5e2c:	bf28      	it	cs
    5e2e:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    5e30:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    5e32:	4a0f      	ldr	r2, [pc, #60]	; (5e70 <log_output_dropped_process+0x4c>)
{
    5e34:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    5e36:	2105      	movs	r1, #5
    5e38:	4668      	mov	r0, sp
    5e3a:	f014 fcb2 	bl	1a7a2 <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    5e3e:	6863      	ldr	r3, [r4, #4]
    5e40:	490c      	ldr	r1, [pc, #48]	; (5e74 <log_output_dropped_process+0x50>)
    5e42:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    5e44:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    5e46:	220b      	movs	r2, #11
    5e48:	4628      	mov	r0, r5
    5e4a:	f014 ff7b 	bl	1ad44 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    5e4e:	6863      	ldr	r3, [r4, #4]
    5e50:	4632      	mov	r2, r6
    5e52:	4669      	mov	r1, sp
    5e54:	4628      	mov	r0, r5
    5e56:	685b      	ldr	r3, [r3, #4]
    5e58:	f014 ff74 	bl	1ad44 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    5e5c:	6863      	ldr	r3, [r4, #4]
    5e5e:	4906      	ldr	r1, [pc, #24]	; (5e78 <log_output_dropped_process+0x54>)
    5e60:	685b      	ldr	r3, [r3, #4]
    5e62:	221b      	movs	r2, #27
    5e64:	4628      	mov	r0, r5
    5e66:	f014 ff6d 	bl	1ad44 <buffer_write>
		     output->control_block->ctx);
}
    5e6a:	b002      	add	sp, #8
    5e6c:	bd70      	pop	{r4, r5, r6, pc}
    5e6e:	bf00      	nop
    5e70:	0001def1 	.word	0x0001def1
    5e74:	0001d871 	.word	0x0001d871
    5e78:	0001d855 	.word	0x0001d855

00005e7c <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    5e7c:	4a08      	ldr	r2, [pc, #32]	; (5ea0 <log_output_timestamp_freq_set+0x24>)
{
    5e7e:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    5e80:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    5e82:	4c08      	ldr	r4, [pc, #32]	; (5ea4 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    5e84:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    5e86:	2100      	movs	r1, #0
    5e88:	42a0      	cmp	r0, r4
    5e8a:	d804      	bhi.n	5e96 <log_output_timestamp_freq_set+0x1a>
    5e8c:	b101      	cbz	r1, 5e90 <log_output_timestamp_freq_set+0x14>
    5e8e:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    5e90:	4b05      	ldr	r3, [pc, #20]	; (5ea8 <log_output_timestamp_freq_set+0x2c>)
    5e92:	6018      	str	r0, [r3, #0]
}
    5e94:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    5e96:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    5e98:	005b      	lsls	r3, r3, #1
    5e9a:	2101      	movs	r1, #1
    5e9c:	e7f4      	b.n	5e88 <log_output_timestamp_freq_set+0xc>
    5e9e:	bf00      	nop
    5ea0:	20000694 	.word	0x20000694
    5ea4:	000f4240 	.word	0x000f4240
    5ea8:	20000690 	.word	0x20000690

00005eac <char_out>:
static const char LOG_HEX_SEP[10] = "##ZLOGV1##";

static const struct device *uart_dev;

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    5eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* lower 8-bit */
		x = data[i] & 0x0FU;
		(void)hex2char(x, &c);
		uart_poll_out(uart_dev, c);
#else
		uart_poll_out(uart_dev, data[i]);
    5eae:	4f07      	ldr	r7, [pc, #28]	; (5ecc <char_out+0x20>)
{
    5eb0:	460d      	mov	r5, r1
    5eb2:	4604      	mov	r4, r0
    5eb4:	1846      	adds	r6, r0, r1
	for (size_t i = 0; i < length; i++) {
    5eb6:	42b4      	cmp	r4, r6
    5eb8:	d101      	bne.n	5ebe <char_out+0x12>
#endif
	}

	return length;
}
    5eba:	4628      	mov	r0, r5
    5ebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(uart_dev, data[i]);
    5ebe:	6838      	ldr	r0, [r7, #0]
    5ec0:	f814 1b01 	ldrb.w	r1, [r4], #1
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    5ec4:	6883      	ldr	r3, [r0, #8]
    5ec6:	685b      	ldr	r3, [r3, #4]
    5ec8:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
    5eca:	e7f4      	b.n	5eb6 <char_out+0xa>
    5ecc:	200006ac 	.word	0x200006ac

00005ed0 <panic>:
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    5ed0:	4801      	ldr	r0, [pc, #4]	; (5ed8 <panic+0x8>)
    5ed2:	f015 b8a1 	b.w	1b018 <log_output_flush>
    5ed6:	bf00      	nop
    5ed8:	0001cdd0 	.word	0x0001cdd0

00005edc <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    5edc:	4801      	ldr	r0, [pc, #4]	; (5ee4 <dropped+0x8>)
    5ede:	f7ff bfa1 	b.w	5e24 <log_output_dropped_process>
    5ee2:	bf00      	nop
    5ee4:	0001cdd0 	.word	0x0001cdd0

00005ee8 <log_backend_uart_init>:
		log_output_msg2_process(&log_output_uart, &msg->log, flags);
	}
}

static void log_backend_uart_init(struct log_backend const *const backend)
{
    5ee8:	b508      	push	{r3, lr}
    5eea:	4803      	ldr	r0, [pc, #12]	; (5ef8 <log_backend_uart_init+0x10>)
    5eec:	f004 fa28 	bl	a340 <z_impl_device_get_binding>
	uart_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    5ef0:	4b02      	ldr	r3, [pc, #8]	; (5efc <log_backend_uart_init+0x14>)
    5ef2:	6018      	str	r0, [r3, #0]
		 */
		for (int i = 0; i < sizeof(LOG_HEX_SEP); i++) {
			uart_poll_out(uart_dev, LOG_HEX_SEP[i]);
		}
	}
}
    5ef4:	bd08      	pop	{r3, pc}
    5ef6:	bf00      	nop
    5ef8:	0001d87d 	.word	0x0001d87d
    5efc:	200006ac 	.word	0x200006ac

00005f00 <put>:
{
    5f00:	b510      	push	{r4, lr}
	log_msg_get(msg);
    5f02:	4608      	mov	r0, r1
    5f04:	460c      	mov	r4, r1
    5f06:	f014 fed2 	bl	1acae <log_msg_get>
	log_output_msg_process(output, msg, flags);
    5f0a:	4805      	ldr	r0, [pc, #20]	; (5f20 <put+0x20>)
    5f0c:	4621      	mov	r1, r4
    5f0e:	220f      	movs	r2, #15
    5f10:	f7ff ff0c 	bl	5d2c <log_output_msg_process>
	log_msg_put(msg);
    5f14:	4620      	mov	r0, r4
}
    5f16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5f1a:	f014 bef7 	b.w	1ad0c <log_msg_put>
    5f1e:	bf00      	nop
    5f20:	0001cdd0 	.word	0x0001cdd0

00005f24 <tty_init>:

	return out_size;
}

int tty_init(struct tty_serial *tty, const struct device *uart_dev)
{
    5f24:	4602      	mov	r2, r0
    5f26:	b510      	push	{r4, lr}
	if (!uart_dev) {
    5f28:	4608      	mov	r0, r1
    5f2a:	b199      	cbz	r1, 5f54 <tty_init+0x30>
	}

	tty->uart_dev = uart_dev;

	/* We start in unbuffer mode. */
	tty->rx_ringbuf = NULL;
    5f2c:	2400      	movs	r4, #0
	tty->tx_ringbuf = NULL;
	tty->tx_ringbuf_sz = 0U;

	tty->rx_get = tty->rx_put = tty->tx_get = tty->tx_put = 0U;

	tty->rx_timeout = SYS_FOREVER_MS;
    5f2e:	f04f 33ff 	mov.w	r3, #4294967295
	tty->tx_timeout = SYS_FOREVER_MS;
    5f32:	e9c2 430f 	strd	r4, r3, [r2, #60]	; 0x3c
	tty->rx_timeout = SYS_FOREVER_MS;
    5f36:	6213      	str	r3, [r2, #32]
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
    5f38:	688b      	ldr	r3, [r1, #8]
	tty->uart_dev = uart_dev;
    5f3a:	6011      	str	r1, [r2, #0]
	tty->rx_ringbuf_sz = 0U;
    5f3c:	e9c2 4405 	strd	r4, r4, [r2, #20]
	tty->tx_ringbuf_sz = 0U;
    5f40:	e9c2 440d 	strd	r4, r4, [r2, #52]	; 0x34
	tty->rx_get = tty->rx_put = tty->tx_get = tty->tx_put = 0U;
    5f44:	61d4      	str	r4, [r2, #28]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    5f46:	b143      	cbz	r3, 5f5a <tty_init+0x36>
    5f48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    5f4a:	b133      	cbz	r3, 5f5a <tty_init+0x36>
		api->irq_callback_set(dev, cb, user_data);
    5f4c:	4904      	ldr	r1, [pc, #16]	; (5f60 <tty_init+0x3c>)
    5f4e:	4798      	blx	r3

	uart_irq_callback_user_data_set(uart_dev, tty_uart_isr, tty);

	return 0;
    5f50:	4620      	mov	r0, r4
}
    5f52:	bd10      	pop	{r4, pc}
		return -ENODEV;
    5f54:	f06f 0012 	mvn.w	r0, #18
    5f58:	e7fb      	b.n	5f52 <tty_init+0x2e>
	return 0;
    5f5a:	4618      	mov	r0, r3
    5f5c:	e7f9      	b.n	5f52 <tty_init+0x2e>
    5f5e:	bf00      	nop
    5f60:	0001b119 	.word	0x0001b119

00005f64 <console_getchar>:
{
	return tty_write(&console_serial, &c, 1);
}

int console_getchar(void)
{
    5f64:	b507      	push	{r0, r1, r2, lr}
	uint8_t c;
	int res;

	res = tty_read(&console_serial, &c, 1);
    5f66:	2201      	movs	r2, #1
    5f68:	f10d 0107 	add.w	r1, sp, #7
    5f6c:	4804      	ldr	r0, [pc, #16]	; (5f80 <console_getchar+0x1c>)
    5f6e:	f015 f926 	bl	1b1be <tty_read>
	if (res < 0) {
    5f72:	2800      	cmp	r0, #0
		return res;
	}

	return c;
    5f74:	bfa8      	it	ge
    5f76:	f89d 0007 	ldrbge.w	r0, [sp, #7]
}
    5f7a:	b003      	add	sp, #12
    5f7c:	f85d fb04 	ldr.w	pc, [sp], #4
    5f80:	200006b0 	.word	0x200006b0

00005f84 <console_init>:

int console_init(void)
{
    5f84:	b538      	push	{r3, r4, r5, lr}
    5f86:	480e      	ldr	r0, [pc, #56]	; (5fc0 <console_init+0x3c>)
    5f88:	f004 f9da 	bl	a340 <z_impl_device_get_binding>
	const struct device *uart_dev;
	int ret;

	uart_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
	ret = tty_init(&console_serial, uart_dev);
    5f8c:	4601      	mov	r1, r0
    5f8e:	4605      	mov	r5, r0
    5f90:	480c      	ldr	r0, [pc, #48]	; (5fc4 <console_init+0x40>)
    5f92:	f7ff ffc7 	bl	5f24 <tty_init>

	if (ret) {
    5f96:	4604      	mov	r4, r0
    5f98:	b968      	cbnz	r0, 5fb6 <console_init+0x32>

	/* Checks device driver supports for interrupt driven data transfers. */
	if (CONFIG_CONSOLE_GETCHAR_BUFSIZE + CONFIG_CONSOLE_PUTCHAR_BUFSIZE) {
		const struct uart_driver_api *api =
			(const struct uart_driver_api *)uart_dev->api;
		if (!api->irq_callback_set) {
    5f9a:	68ab      	ldr	r3, [r5, #8]
    5f9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    5f9e:	b163      	cbz	r3, 5fba <console_init+0x36>
			return -ENOTSUP;
		}
	}

	tty_set_tx_buf(&console_serial, console_txbuf, sizeof(console_txbuf));
    5fa0:	4909      	ldr	r1, [pc, #36]	; (5fc8 <console_init+0x44>)
    5fa2:	4808      	ldr	r0, [pc, #32]	; (5fc4 <console_init+0x40>)
    5fa4:	2210      	movs	r2, #16
    5fa6:	f015 f9af 	bl	1b308 <tty_set_tx_buf>
	tty_set_rx_buf(&console_serial, console_rxbuf, sizeof(console_rxbuf));
    5faa:	4908      	ldr	r1, [pc, #32]	; (5fcc <console_init+0x48>)
    5fac:	4805      	ldr	r0, [pc, #20]	; (5fc4 <console_init+0x40>)
    5fae:	f44f 6280 	mov.w	r2, #1024	; 0x400
    5fb2:	f015 f990 	bl	1b2d6 <tty_set_rx_buf>

	return 0;
}
    5fb6:	4620      	mov	r0, r4
    5fb8:	bd38      	pop	{r3, r4, r5, pc}
			return -ENOTSUP;
    5fba:	f06f 0485 	mvn.w	r4, #133	; 0x85
    5fbe:	e7fa      	b.n	5fb6 <console_init+0x32>
    5fc0:	0001d87d 	.word	0x0001d87d
    5fc4:	200006b0 	.word	0x200006b0
    5fc8:	2000153b 	.word	0x2000153b
    5fcc:	2000113b 	.word	0x2000113b

00005fd0 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    5fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5fd2:	4605      	mov	r5, r0
	__asm__ volatile(
    5fd4:	f04f 0320 	mov.w	r3, #32
    5fd8:	f3ef 8611 	mrs	r6, BASEPRI
    5fdc:	f383 8811 	msr	BASEPRI, r3
    5fe0:	f3bf 8f6f 	isb	sy
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    5fe4:	4b0b      	ldr	r3, [pc, #44]	; (6014 <pm_state_notify+0x44>)
    5fe6:	681c      	ldr	r4, [r3, #0]
    5fe8:	2c00      	cmp	r4, #0
    5fea:	bf38      	it	cc
    5fec:	2400      	movcc	r4, #0
    5fee:	b15c      	cbz	r4, 6008 <pm_state_notify+0x38>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_state.state);
    5ff0:	4f09      	ldr	r7, [pc, #36]	; (6018 <pm_state_notify+0x48>)
			callback = notifier->state_exit;
    5ff2:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    5ff6:	2d00      	cmp	r5, #0
    5ff8:	bf08      	it	eq
    5ffa:	4613      	moveq	r3, r2
		if (callback) {
    5ffc:	b10b      	cbz	r3, 6002 <pm_state_notify+0x32>
			callback(z_power_state.state);
    5ffe:	7838      	ldrb	r0, [r7, #0]
    6000:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    6002:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    6004:	2c00      	cmp	r4, #0
    6006:	d1f4      	bne.n	5ff2 <pm_state_notify+0x22>
	__asm__ volatile(
    6008:	f386 8811 	msr	BASEPRI, r6
    600c:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    6010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6012:	bf00      	nop
    6014:	200006f4 	.word	0x200006f4
    6018:	200006fc 	.word	0x200006fc

0000601c <pm_system_resume>:

void pm_system_resume(void)
{
    601c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
    601e:	4b0f      	ldr	r3, [pc, #60]	; (605c <pm_system_resume+0x40>)
    6020:	681a      	ldr	r2, [r3, #0]
    6022:	b9ba      	cbnz	r2, 6054 <pm_system_resume+0x38>
		post_ops_done = 1;
    6024:	2201      	movs	r2, #1
    6026:	601a      	str	r2, [r3, #0]
		exit_pos_ops(z_power_state);
    6028:	4a0d      	ldr	r2, [pc, #52]	; (6060 <pm_system_resume+0x44>)
    602a:	ca07      	ldmia	r2, {r0, r1, r2}
    602c:	ab01      	add	r3, sp, #4
    602e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    6032:	4a0c      	ldr	r2, [pc, #48]	; (6064 <pm_system_resume+0x48>)
    6034:	b14a      	cbz	r2, 604a <pm_system_resume+0x2e>
		pm_power_state_exit_post_ops(info);
    6036:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    603a:	f015 fa43 	bl	1b4c4 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    603e:	2000      	movs	r0, #0
	}
}
    6040:	b005      	add	sp, #20
    6042:	f85d eb04 	ldr.w	lr, [sp], #4
		pm_state_notify(false);
    6046:	f7ff bfc3 	b.w	5fd0 <pm_state_notify>
    604a:	f382 8811 	msr	BASEPRI, r2
    604e:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    6052:	e7f4      	b.n	603e <pm_system_resume+0x22>
}
    6054:	b005      	add	sp, #20
    6056:	f85d fb04 	ldr.w	pc, [sp], #4
    605a:	bf00      	nop
    605c:	20000008 	.word	0x20000008
    6060:	200006fc 	.word	0x200006fc
    6064:	0001b4c5 	.word	0x0001b4c5

00006068 <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
    6068:	b5f0      	push	{r4, r5, r6, r7, lr}
    606a:	b089      	sub	sp, #36	; 0x24
	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);
	z_power_state = pm_policy_next_state(ticks);
    606c:	466e      	mov	r6, sp
    606e:	4601      	mov	r1, r0
{
    6070:	4605      	mov	r5, r0
	z_power_state = pm_policy_next_state(ticks);
    6072:	4630      	mov	r0, r6
    6074:	f015 f95a 	bl	1b32c <pm_policy_next_state>
    6078:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    607c:	4c17      	ldr	r4, [pc, #92]	; (60dc <pm_system_suspend+0x74>)
    607e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
    6082:	7820      	ldrb	r0, [r4, #0]
    6084:	b340      	cbz	r0, 60d8 <pm_system_suspend+0x70>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
		return z_power_state.state;
	}
	post_ops_done = 0;
    6086:	4b16      	ldr	r3, [pc, #88]	; (60e0 <pm_system_suspend+0x78>)
    6088:	2100      	movs	r1, #0
    608a:	6019      	str	r1, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
    608c:	1c6b      	adds	r3, r5, #1
    608e:	d00e      	beq.n	60ae <pm_system_suspend+0x46>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    6090:	4814      	ldr	r0, [pc, #80]	; (60e4 <pm_system_suspend+0x7c>)
    6092:	4617      	mov	r7, r2
    6094:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    6098:	2100      	movs	r1, #0
    609a:	4a13      	ldr	r2, [pc, #76]	; (60e8 <pm_system_suspend+0x80>)
    609c:	2300      	movs	r3, #0
    609e:	fbe6 0107 	umlal	r0, r1, r6, r7
    60a2:	f7fa fd09 	bl	ab8 <__aeabi_uldivmod>

		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    60a6:	2101      	movs	r1, #1
    60a8:	1a28      	subs	r0, r5, r0
    60aa:	f015 ffb6 	bl	1c01a <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    60ae:	f004 fe3d 	bl	ad2c <k_sched_lock>
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
    60b2:	2001      	movs	r0, #1
    60b4:	f7ff ff8c 	bl	5fd0 <pm_state_notify>
	pm_state_set(z_power_state);
    60b8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    60bc:	ab05      	add	r3, sp, #20
    60be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    60c2:	4a0a      	ldr	r2, [pc, #40]	; (60ec <pm_system_suspend+0x84>)
    60c4:	b11a      	cbz	r2, 60ce <pm_system_suspend+0x66>
		pm_power_state_set(info);
    60c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    60ca:	f015 f9e8 	bl	1b49e <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
    60ce:	f7ff ffa5 	bl	601c <pm_system_resume>
	k_sched_unlock();
    60d2:	f004 fee3 	bl	ae9c <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
	return z_power_state.state;
    60d6:	7820      	ldrb	r0, [r4, #0]
}
    60d8:	b009      	add	sp, #36	; 0x24
    60da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    60dc:	200006fc 	.word	0x200006fc
    60e0:	20000008 	.word	0x20000008
    60e4:	000f423f 	.word	0x000f423f
    60e8:	000f4240 	.word	0x000f4240
    60ec:	0001b49f 	.word	0x0001b49f

000060f0 <console_out>:

static int console_out(int c)
{
#ifdef CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS

	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
    60f0:	4b0a      	ldr	r3, [pc, #40]	; (611c <console_out+0x2c>)
{
    60f2:	b570      	push	{r4, r5, r6, lr}
	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
    60f4:	b2c6      	uxtb	r6, r0
    60f6:	681b      	ldr	r3, [r3, #0]
{
    60f8:	4604      	mov	r4, r0
	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
    60fa:	4630      	mov	r0, r6
    60fc:	4798      	blx	r3

	if (handled_by_debug_server) {
    60fe:	2801      	cmp	r0, #1
    6100:	d00a      	beq.n	6118 <console_out+0x28>
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    6102:	2c0a      	cmp	r4, #10
    6104:	4d06      	ldr	r5, [pc, #24]	; (6120 <console_out+0x30>)
    6106:	d103      	bne.n	6110 <console_out+0x20>
		uart_poll_out(uart_console_dev, '\r');
    6108:	6828      	ldr	r0, [r5, #0]
    610a:	210d      	movs	r1, #13
    610c:	f015 f913 	bl	1b336 <uart_poll_out>
	}
	uart_poll_out(uart_console_dev, c);
    6110:	6828      	ldr	r0, [r5, #0]
    6112:	4631      	mov	r1, r6
    6114:	f015 f90f 	bl	1b336 <uart_poll_out>

	return c;
}
    6118:	4620      	mov	r0, r4
    611a:	bd70      	pop	{r4, r5, r6, pc}
    611c:	2000000c 	.word	0x2000000c
    6120:	20000708 	.word	0x20000708

00006124 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    6124:	b510      	push	{r4, lr}
    6126:	4807      	ldr	r0, [pc, #28]	; (6144 <uart_console_init+0x20>)
	__stdout_hook_install(console_out);
    6128:	4c07      	ldr	r4, [pc, #28]	; (6148 <uart_console_init+0x24>)
    612a:	f004 f909 	bl	a340 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    612e:	4b07      	ldr	r3, [pc, #28]	; (614c <uart_console_init+0x28>)
    6130:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
    6132:	4620      	mov	r0, r4
    6134:	f001 f880 	bl	7238 <__stdout_hook_install>
	__printk_hook_install(console_out);
    6138:	4620      	mov	r0, r4
    613a:	f7fe fc57 	bl	49ec <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
    613e:	2000      	movs	r0, #0
    6140:	bd10      	pop	{r4, pc}
    6142:	bf00      	nop
    6144:	0001d87d 	.word	0x0001d87d
    6148:	000060f1 	.word	0x000060f1
    614c:	20000708 	.word	0x20000708

00006150 <onoff_stop>:
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    6150:	b570      	push	{r4, r5, r6, lr}
    6152:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
    6154:	480d      	ldr	r0, [pc, #52]	; (618c <onoff_stop+0x3c>)
    6156:	1a23      	subs	r3, r4, r0
    6158:	109a      	asrs	r2, r3, #2
    615a:	4b0d      	ldr	r3, [pc, #52]	; (6190 <onoff_stop+0x40>)
    615c:	4353      	muls	r3, r2
    615e:	b2db      	uxtb	r3, r3
	err = set_off_state(&subdata->flags, ctx);
    6160:	250c      	movs	r5, #12
    6162:	435d      	muls	r5, r3
    6164:	f105 0340 	add.w	r3, r5, #64	; 0x40
{
    6168:	460e      	mov	r6, r1
	err = set_off_state(&subdata->flags, ctx);
    616a:	4418      	add	r0, r3
    616c:	2140      	movs	r1, #64	; 0x40
    616e:	f015 f8f0 	bl	1b352 <set_off_state>
	if (err < 0) {
    6172:	1e01      	subs	r1, r0, #0
    6174:	db04      	blt.n	6180 <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
    6176:	4b07      	ldr	r3, [pc, #28]	; (6194 <onoff_stop+0x44>)
    6178:	442b      	add	r3, r5
    617a:	685b      	ldr	r3, [r3, #4]
    617c:	4798      	blx	r3
	return 0;
    617e:	2100      	movs	r1, #0
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
    6180:	4620      	mov	r0, r4
    6182:	4633      	mov	r3, r6
}
    6184:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    6188:	4718      	bx	r3
    618a:	bf00      	nop
    618c:	20000720 	.word	0x20000720
    6190:	b6db6db7 	.word	0xb6db6db7
    6194:	0001cdf4 	.word	0x0001cdf4

00006198 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    6198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    619c:	4c0f      	ldr	r4, [pc, #60]	; (61dc <onoff_start+0x44>)
    619e:	4d10      	ldr	r5, [pc, #64]	; (61e0 <onoff_start+0x48>)
    61a0:	1b03      	subs	r3, r0, r4
    61a2:	109b      	asrs	r3, r3, #2
    61a4:	435d      	muls	r5, r3
    61a6:	b2eb      	uxtb	r3, r5
	err = set_starting_state(&subdata->flags, ctx);
    61a8:	250c      	movs	r5, #12
    61aa:	435d      	muls	r5, r3
{
    61ac:	4607      	mov	r7, r0
	err = set_starting_state(&subdata->flags, ctx);
    61ae:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
    61b2:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
    61b4:	4420      	add	r0, r4
    61b6:	2140      	movs	r1, #64	; 0x40
    61b8:	f015 f8e4 	bl	1b384 <set_starting_state>
	if (err < 0) {
    61bc:	1e01      	subs	r1, r0, #0
    61be:	db08      	blt.n	61d2 <onoff_start+0x3a>
	subdata->cb = cb;
    61c0:	4b08      	ldr	r3, [pc, #32]	; (61e4 <onoff_start+0x4c>)
    61c2:	442c      	add	r4, r5
	subdata->user_data = user_data;
    61c4:	e9c4 360e 	strd	r3, r6, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    61c8:	4b07      	ldr	r3, [pc, #28]	; (61e8 <onoff_start+0x50>)
    61ca:	595b      	ldr	r3, [r3, r5]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    61cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    61d0:	4718      	bx	r3
		notify(mgr, err);
    61d2:	4638      	mov	r0, r7
    61d4:	4633      	mov	r3, r6
}
    61d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    61da:	4718      	bx	r3
    61dc:	20000720 	.word	0x20000720
    61e0:	b6db6db7 	.word	0xb6db6db7
    61e4:	0001b3e7 	.word	0x0001b3e7
    61e8:	0001cdf4 	.word	0x0001cdf4

000061ec <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    61ec:	2200      	movs	r2, #0
{
    61ee:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    61f0:	2101      	movs	r1, #1
{
    61f2:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    61f4:	4610      	mov	r0, r2
    61f6:	f000 fb83 	bl	6900 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    61fa:	2000      	movs	r0, #0
    61fc:	f000 fb62 	bl	68c4 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    6200:	480f      	ldr	r0, [pc, #60]	; (6240 <clk_init+0x54>)
    6202:	f003 fde5 	bl	9dd0 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    6206:	4b0f      	ldr	r3, [pc, #60]	; (6244 <clk_init+0x58>)
    6208:	4298      	cmp	r0, r3
    620a:	d115      	bne.n	6238 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    620c:	f015 fcfa 	bl	1bc04 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    6210:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    6212:	490d      	ldr	r1, [pc, #52]	; (6248 <clk_init+0x5c>)
    6214:	4630      	mov	r0, r6
    6216:	f014 fb20 	bl	1a85a <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    621a:	2800      	cmp	r0, #0
    621c:	db0b      	blt.n	6236 <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    621e:	2501      	movs	r5, #1
    6220:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
    6222:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    6224:	4908      	ldr	r1, [pc, #32]	; (6248 <clk_init+0x5c>)
    6226:	f104 001c 	add.w	r0, r4, #28
    622a:	f014 fb16 	bl	1a85a <onoff_manager_init>
		if (err < 0) {
    622e:	2800      	cmp	r0, #0
    6230:	db01      	blt.n	6236 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    6232:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    6234:	2000      	movs	r0, #0
}
    6236:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    6238:	f06f 0004 	mvn.w	r0, #4
    623c:	e7fb      	b.n	6236 <clk_init+0x4a>
    623e:	bf00      	nop
    6240:	00006281 	.word	0x00006281
    6244:	0bad0000 	.word	0x0bad0000
    6248:	0001ce0c 	.word	0x0001ce0c

0000624c <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    624c:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    624e:	230c      	movs	r3, #12
    6250:	4809      	ldr	r0, [pc, #36]	; (6278 <clkstarted_handle.constprop.0+0x2c>)
    6252:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    6254:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    6256:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    6258:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    625c:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    625e:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    6260:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    6262:	4418      	add	r0, r3
    6264:	f015 f8ac 	bl	1b3c0 <set_on_state>
	if (callback) {
    6268:	b12d      	cbz	r5, 6276 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    626a:	4632      	mov	r2, r6
    626c:	462b      	mov	r3, r5
    626e:	4803      	ldr	r0, [pc, #12]	; (627c <clkstarted_handle.constprop.0+0x30>)
}
    6270:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    6274:	4718      	bx	r3
}
    6276:	bd70      	pop	{r4, r5, r6, pc}
    6278:	20000720 	.word	0x20000720
    627c:	0001c678 	.word	0x0001c678

00006280 <clock_event_handler>:
	switch (event) {
    6280:	b110      	cbz	r0, 6288 <clock_event_handler+0x8>
    6282:	2801      	cmp	r0, #1
    6284:	d004      	beq.n	6290 <clock_event_handler+0x10>
    6286:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    6288:	4b03      	ldr	r3, [pc, #12]	; (6298 <clock_event_handler+0x18>)
    628a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    628c:	075b      	lsls	r3, r3, #29
    628e:	d101      	bne.n	6294 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    6290:	f7ff bfdc 	b.w	624c <clkstarted_handle.constprop.0>
}
    6294:	4770      	bx	lr
    6296:	bf00      	nop
    6298:	20000720 	.word	0x20000720

0000629c <generic_hfclk_start>:
{
    629c:	b508      	push	{r3, lr}
	__asm__ volatile(
    629e:	f04f 0320 	mov.w	r3, #32
    62a2:	f3ef 8111 	mrs	r1, BASEPRI
    62a6:	f383 8811 	msr	BASEPRI, r3
    62aa:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    62ae:	4a12      	ldr	r2, [pc, #72]	; (62f8 <generic_hfclk_start+0x5c>)
    62b0:	6813      	ldr	r3, [r2, #0]
    62b2:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    62b6:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    62ba:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    62bc:	d00c      	beq.n	62d8 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    62be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    62c2:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    62c6:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    62ca:	f013 0301 	ands.w	r3, r3, #1
    62ce:	d003      	beq.n	62d8 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    62d0:	480a      	ldr	r0, [pc, #40]	; (62fc <generic_hfclk_start+0x60>)
    62d2:	f015 f875 	bl	1b3c0 <set_on_state>
			already_started = true;
    62d6:	2301      	movs	r3, #1
	__asm__ volatile(
    62d8:	f381 8811 	msr	BASEPRI, r1
    62dc:	f3bf 8f6f 	isb	sy
	if (already_started) {
    62e0:	b123      	cbz	r3, 62ec <generic_hfclk_start+0x50>
}
    62e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    62e6:	2000      	movs	r0, #0
    62e8:	f7ff bfb0 	b.w	624c <clkstarted_handle.constprop.0>
}
    62ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    62f0:	2001      	movs	r0, #1
    62f2:	f003 bd7d 	b.w	9df0 <nrfx_clock_start>
    62f6:	bf00      	nop
    62f8:	20000770 	.word	0x20000770
    62fc:	20000760 	.word	0x20000760

00006300 <generic_hfclk_stop>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6300:	4b09      	ldr	r3, [pc, #36]	; (6328 <generic_hfclk_stop+0x28>)
    6302:	f3bf 8f5b 	dmb	ish
    6306:	e853 2f00 	ldrex	r2, [r3]
    630a:	f022 0102 	bic.w	r1, r2, #2
    630e:	e843 1000 	strex	r0, r1, [r3]
    6312:	2800      	cmp	r0, #0
    6314:	d1f7      	bne.n	6306 <generic_hfclk_stop+0x6>
    6316:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    631a:	07d3      	lsls	r3, r2, #31
    631c:	d402      	bmi.n	6324 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    631e:	2001      	movs	r0, #1
    6320:	f003 bd98 	b.w	9e54 <nrfx_clock_stop>
}
    6324:	4770      	bx	lr
    6326:	bf00      	nop
    6328:	20000770 	.word	0x20000770

0000632c <api_blocking_start>:
{
    632c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    632e:	2200      	movs	r2, #0
    6330:	2301      	movs	r3, #1
    6332:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    6336:	4a09      	ldr	r2, [pc, #36]	; (635c <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    6338:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    633c:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    633e:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    6342:	f015 f876 	bl	1b432 <api_start>
	if (err < 0) {
    6346:	2800      	cmp	r0, #0
    6348:	db05      	blt.n	6356 <api_blocking_start+0x2a>
    634a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    634e:	2300      	movs	r3, #0
    6350:	4668      	mov	r0, sp
    6352:	f004 fb3b 	bl	a9cc <z_impl_k_sem_take>
}
    6356:	b005      	add	sp, #20
    6358:	f85d fb04 	ldr.w	pc, [sp], #4
    635c:	0001b405 	.word	0x0001b405

00006360 <z_nrf_clock_control_lf_on>:
{
    6360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    6364:	493a      	ldr	r1, [pc, #232]	; (6450 <z_nrf_clock_control_lf_on+0xf0>)
    6366:	f3bf 8f5b 	dmb	ish
    636a:	4606      	mov	r6, r0
    636c:	2201      	movs	r2, #1
    636e:	e851 3f00 	ldrex	r3, [r1]
    6372:	e841 2000 	strex	r0, r2, [r1]
    6376:	2800      	cmp	r0, #0
    6378:	d1f9      	bne.n	636e <z_nrf_clock_control_lf_on+0xe>
    637a:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    637e:	b933      	cbnz	r3, 638e <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    6380:	4934      	ldr	r1, [pc, #208]	; (6454 <z_nrf_clock_control_lf_on+0xf4>)
		err = onoff_request(mgr, &cli);
    6382:	4835      	ldr	r0, [pc, #212]	; (6458 <z_nrf_clock_control_lf_on+0xf8>)
    6384:	604b      	str	r3, [r1, #4]
    6386:	60cb      	str	r3, [r1, #12]
    6388:	608a      	str	r2, [r1, #8]
    638a:	f014 fa79 	bl	1a880 <onoff_request>
	switch (start_mode) {
    638e:	1e73      	subs	r3, r6, #1
    6390:	2b01      	cmp	r3, #1
    6392:	d832      	bhi.n	63fa <z_nrf_clock_control_lf_on+0x9a>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    6394:	2e01      	cmp	r6, #1
    6396:	d107      	bne.n	63a8 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    6398:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    639c:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    63a0:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    63a4:	2b01      	cmp	r3, #1
    63a6:	d028      	beq.n	63fa <z_nrf_clock_control_lf_on+0x9a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    63a8:	f015 fcd2 	bl	1bd50 <k_is_in_isr>
    63ac:	4604      	mov	r4, r0
    63ae:	b918      	cbnz	r0, 63b8 <z_nrf_clock_control_lf_on+0x58>
	return !z_sys_post_kernel;
    63b0:	4b2a      	ldr	r3, [pc, #168]	; (645c <z_nrf_clock_control_lf_on+0xfc>)
	int key = isr_mode ? irq_lock() : 0;
    63b2:	781b      	ldrb	r3, [r3, #0]
    63b4:	2b00      	cmp	r3, #0
    63b6:	d144      	bne.n	6442 <z_nrf_clock_control_lf_on+0xe2>
	__asm__ volatile(
    63b8:	f04f 0320 	mov.w	r3, #32
    63bc:	f3ef 8511 	mrs	r5, BASEPRI
    63c0:	f383 8811 	msr	BASEPRI, r3
    63c4:	f3bf 8f6f 	isb	sy
    63c8:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    63ca:	4f25      	ldr	r7, [pc, #148]	; (6460 <z_nrf_clock_control_lf_on+0x100>)
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    63cc:	f8df 8094 	ldr.w	r8, [pc, #148]	; 6464 <z_nrf_clock_control_lf_on+0x104>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    63d0:	f8df 9094 	ldr.w	r9, [pc, #148]	; 6468 <z_nrf_clock_control_lf_on+0x108>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    63d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    63d8:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    63dc:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    63e0:	03d2      	lsls	r2, r2, #15
    63e2:	d50c      	bpl.n	63fe <z_nrf_clock_control_lf_on+0x9e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    63e4:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    63e8:	2b01      	cmp	r3, #1
    63ea:	d001      	beq.n	63f0 <z_nrf_clock_control_lf_on+0x90>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    63ec:	2e01      	cmp	r6, #1
    63ee:	d106      	bne.n	63fe <z_nrf_clock_control_lf_on+0x9e>
	if (isr_mode) {
    63f0:	b30c      	cbz	r4, 6436 <z_nrf_clock_control_lf_on+0xd6>
	__asm__ volatile(
    63f2:	f385 8811 	msr	BASEPRI, r5
    63f6:	f3bf 8f6f 	isb	sy
}
    63fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    63fe:	b1ac      	cbz	r4, 642c <z_nrf_clock_control_lf_on+0xcc>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    6400:	4628      	mov	r0, r5
    6402:	f000 faf5 	bl	69f0 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    6406:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    640a:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    640e:	2b00      	cmp	r3, #0
    6410:	d1e0      	bne.n	63d4 <z_nrf_clock_control_lf_on+0x74>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    6412:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    6414:	2900      	cmp	r1, #0
    6416:	d0dd      	beq.n	63d4 <z_nrf_clock_control_lf_on+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6418:	603b      	str	r3, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    641a:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    641c:	2301      	movs	r3, #1
    641e:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    6422:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6426:	f8c9 3000 	str.w	r3, [r9]
}
    642a:	e7d3      	b.n	63d4 <z_nrf_clock_control_lf_on+0x74>
	return z_impl_k_sleep(timeout);
    642c:	2100      	movs	r1, #0
    642e:	2021      	movs	r0, #33	; 0x21
    6430:	f004 ff0c 	bl	b24c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    6434:	e7e7      	b.n	6406 <z_nrf_clock_control_lf_on+0xa6>
    p_reg->INTENSET = mask;
    6436:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    643a:	2202      	movs	r2, #2
    643c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    6440:	e7db      	b.n	63fa <z_nrf_clock_control_lf_on+0x9a>
    p_reg->INTENCLR = mask;
    6442:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6446:	2202      	movs	r2, #2
    6448:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    644c:	4605      	mov	r5, r0
}
    644e:	e7bc      	b.n	63ca <z_nrf_clock_control_lf_on+0x6a>
    6450:	20000774 	.word	0x20000774
    6454:	20000710 	.word	0x20000710
    6458:	2000073c 	.word	0x2000073c
    645c:	2000166d 	.word	0x2000166d
    6460:	40000104 	.word	0x40000104
    6464:	e000e100 	.word	0xe000e100
    6468:	40000008 	.word	0x40000008

0000646c <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(int32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    646c:	4a04      	ldr	r2, [pc, #16]	; (6480 <sys_clock_timeout_handler+0x14>)
    646e:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    6470:	1ac8      	subs	r0, r1, r3
    6472:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    6476:	4403      	add	r3, r0
    6478:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    647a:	f005 b86d 	b.w	b558 <sys_clock_announce>
    647e:	bf00      	nop
    6480:	20000788 	.word	0x20000788

00006484 <set_absolute_alarm>:
{
    6484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6488:	0086      	lsls	r6, r0, #2
    648a:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    648e:	f100 0450 	add.w	r4, r0, #80	; 0x50
    6492:	f506 3688 	add.w	r6, r6, #69632	; 0x11000
    6496:	00a4      	lsls	r4, r4, #2
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    6498:	f8df 807c 	ldr.w	r8, [pc, #124]	; 6518 <set_absolute_alarm+0x94>
    return p_reg->CC[ch];
    649c:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    64a0:	b2a4      	uxth	r4, r4
    64a2:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    64a6:	f44f 3780 	mov.w	r7, #65536	; 0x10000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    64aa:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    64ae:	f504 3488 	add.w	r4, r4, #69632	; 0x11000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    64b2:	4087      	lsls	r7, r0
    64b4:	46c1      	mov	r9, r8
     return p_reg->COUNTER;
    64b6:	f8d8 a504 	ldr.w	sl, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    64ba:	eba3 030a 	sub.w	r3, r3, sl
    64be:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    64c2:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    64c6:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
    64c8:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
    64cc:	d102      	bne.n	64d4 <set_absolute_alarm+0x50>
	z_impl_k_busy_wait(usec_to_wait);
    64ce:	2013      	movs	r0, #19
    64d0:	f015 fdc3 	bl	1c05a <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    64d4:	f10a 0202 	add.w	r2, sl, #2
	return (a - b) & COUNTER_MAX;
    64d8:	1aab      	subs	r3, r5, r2
    64da:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
    64de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    64e2:	bf88      	it	hi
    64e4:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    64e6:	2300      	movs	r3, #0
    64e8:	6023      	str	r3, [r4, #0]
    64ea:	6823      	ldr	r3, [r4, #0]
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    64ec:	f8c9 7344 	str.w	r7, [r9, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    64f0:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    64f4:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
    64f8:	f8d9 3504 	ldr.w	r3, [r9, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    64fc:	459a      	cmp	sl, r3
    64fe:	d006      	beq.n	650e <set_absolute_alarm+0x8a>
	return (a - b) & COUNTER_MAX;
    6500:	1aeb      	subs	r3, r5, r3
    6502:	3b02      	subs	r3, #2
    6504:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    6508:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    650c:	d801      	bhi.n	6512 <set_absolute_alarm+0x8e>
}
    650e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prev_cc = cc_val;
    6512:	462b      	mov	r3, r5
    6514:	e7cf      	b.n	64b6 <set_absolute_alarm+0x32>
    6516:	bf00      	nop
    6518:	40011000 	.word	0x40011000

0000651c <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    651c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return p_reg->INTENSET & mask;
    651e:	4c15      	ldr	r4, [pc, #84]	; (6574 <rtc_nrf_isr+0x58>)
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6520:	4f15      	ldr	r7, [pc, #84]	; (6578 <rtc_nrf_isr+0x5c>)
	ARG_UNUSED(arg);

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    6522:	2600      	movs	r6, #0
    6524:	4b15      	ldr	r3, [pc, #84]	; (657c <rtc_nrf_isr+0x60>)
    6526:	2000      	movs	r0, #0
    6528:	681d      	ldr	r5, [r3, #0]
    652a:	469c      	mov	ip, r3
    652c:	b106      	cbz	r6, 6530 <rtc_nrf_isr+0x14>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
    652e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return p_reg->INTENSET & mask;
    6530:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    6534:	03d2      	lsls	r2, r2, #15
    6536:	d5fa      	bpl.n	652e <rtc_nrf_isr+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6538:	683a      	ldr	r2, [r7, #0]
    653a:	2a00      	cmp	r2, #0
    653c:	d0f7      	beq.n	652e <rtc_nrf_isr+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    653e:	603e      	str	r6, [r7, #0]
    6540:	683a      	ldr	r2, [r7, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    6542:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    6546:	f8c4 2348 	str.w	r2, [r4, #840]	; 0x348
    return p_reg->CC[ch];
    654a:	f8d4 1540 	ldr.w	r1, [r4, #1344]	; 0x540
     return p_reg->COUNTER;
    654e:	f8d4 6504 	ldr.w	r6, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    6552:	1a72      	subs	r2, r6, r1
    6554:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
				cc_val = now;
    6558:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    655c:	bf88      	it	hi
    655e:	4631      	movhi	r1, r6
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    6560:	2601      	movs	r6, #1
			if (handler) {
    6562:	b11d      	cbz	r5, 656c <rtc_nrf_isr+0x50>
				handler(chan, cc_val,
    6564:	685a      	ldr	r2, [r3, #4]
    6566:	6018      	str	r0, [r3, #0]
    6568:	47a8      	blx	r5
    656a:	e7db      	b.n	6524 <rtc_nrf_isr+0x8>
    656c:	f8cc 5000 	str.w	r5, [ip]
}
    6570:	e7dd      	b.n	652e <rtc_nrf_isr+0x12>
    6572:	bf00      	nop
    6574:	40011000 	.word	0x40011000
    6578:	40011140 	.word	0x40011140
    657c:	2000077c 	.word	0x2000077c

00006580 <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
    6580:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    6582:	4d10      	ldr	r5, [pc, #64]	; (65c4 <sys_clock_driver_init+0x44>)
    6584:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
    6586:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
    658a:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->INTENSET = mask;
    658e:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    6592:	4b0d      	ldr	r3, [pc, #52]	; (65c8 <sys_clock_driver_init+0x48>)
    6594:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    6598:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    659c:	2101      	movs	r1, #1
    659e:	4622      	mov	r2, r4
    65a0:	2011      	movs	r0, #17
    65a2:	f000 f9ad 	bl	6900 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    65a6:	2011      	movs	r0, #17
    65a8:	f000 f98c 	bl	68c4 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    65ac:	4a07      	ldr	r2, [pc, #28]	; (65cc <sys_clock_driver_init+0x4c>)
    65ae:	2301      	movs	r3, #1
    65b0:	6013      	str	r3, [r2, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    65b2:	4a07      	ldr	r2, [pc, #28]	; (65d0 <sys_clock_driver_init+0x50>)
    65b4:	602b      	str	r3, [r5, #0]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    65b6:	2002      	movs	r0, #2
	int_mask = BIT_MASK(CHAN_COUNT);
    65b8:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
    65ba:	f7ff fed1 	bl	6360 <z_nrf_clock_control_lf_on>

	return 0;
}
    65be:	4620      	mov	r0, r4
    65c0:	bd38      	pop	{r3, r4, r5, pc}
    65c2:	bf00      	nop
    65c4:	40011000 	.word	0x40011000
    65c8:	e000e100 	.word	0xe000e100
    65cc:	40011008 	.word	0x40011008
    65d0:	20000784 	.word	0x20000784

000065d4 <sys_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    65d4:	4b13      	ldr	r3, [pc, #76]	; (6624 <sys_clock_set_timeout+0x50>)
    65d6:	f1b0 3fff 	cmp.w	r0, #4294967295
    65da:	bf08      	it	eq
    65dc:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    65de:	3801      	subs	r0, #1
    65e0:	2800      	cmp	r0, #0
    65e2:	dd1c      	ble.n	661e <sys_clock_set_timeout+0x4a>
    65e4:	4298      	cmp	r0, r3
    65e6:	bfa8      	it	ge
    65e8:	4618      	movge	r0, r3
     return p_reg->COUNTER;
    65ea:	4b0f      	ldr	r3, [pc, #60]	; (6628 <sys_clock_set_timeout+0x54>)
    65ec:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
    65f0:	4b0e      	ldr	r3, [pc, #56]	; (662c <sys_clock_set_timeout+0x58>)
    65f2:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
    65f4:	1a52      	subs	r2, r2, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
    65f6:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
	return (a - b) & COUNTER_MAX;
    65fa:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
		ticks = 0;
    65fe:	bf18      	it	ne
    6600:	2000      	movne	r0, #0
	cc_data[chan].callback = handler;
    6602:	4a0b      	ldr	r2, [pc, #44]	; (6630 <sys_clock_set_timeout+0x5c>)
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    6604:	3301      	adds	r3, #1
    6606:	4403      	add	r3, r0
	cc_data[chan].callback = handler;
    6608:	480a      	ldr	r0, [pc, #40]	; (6634 <sys_clock_set_timeout+0x60>)
    660a:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
    660c:	2000      	movs	r0, #0
    660e:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
    6610:	4a04      	ldr	r2, [pc, #16]	; (6624 <sys_clock_set_timeout+0x50>)
    6612:	4293      	cmp	r3, r2
    6614:	bf94      	ite	ls
    6616:	18c9      	addls	r1, r1, r3
    6618:	1889      	addhi	r1, r1, r2
    661a:	f7ff bf33 	b.w	6484 <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    661e:	2000      	movs	r0, #0
    6620:	e7e3      	b.n	65ea <sys_clock_set_timeout+0x16>
    6622:	bf00      	nop
    6624:	007fffff 	.word	0x007fffff
    6628:	40011000 	.word	0x40011000
    662c:	20000788 	.word	0x20000788
    6630:	2000077c 	.word	0x2000077c
    6634:	0000646d 	.word	0x0000646d

00006638 <sys_clock_elapsed>:
    6638:	4b04      	ldr	r3, [pc, #16]	; (664c <sys_clock_elapsed+0x14>)
    663a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
{
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return counter_sub(counter(), last_count) / CYC_PER_TICK;
    663e:	4b04      	ldr	r3, [pc, #16]	; (6650 <sys_clock_elapsed+0x18>)
	return (a - b) & COUNTER_MAX;
    6640:	681b      	ldr	r3, [r3, #0]
    6642:	1ac0      	subs	r0, r0, r3
}
    6644:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    6648:	4770      	bx	lr
    664a:	bf00      	nop
    664c:	40011000 	.word	0x40011000
    6650:	20000788 	.word	0x20000788

00006654 <sys_clock_cycle_get_32>:
	__asm__ volatile(
    6654:	f04f 0320 	mov.w	r3, #32
    6658:	f3ef 8211 	mrs	r2, BASEPRI
    665c:	f383 8811 	msr	BASEPRI, r3
    6660:	f3bf 8f6f 	isb	sy

uint32_t sys_clock_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
    6664:	4906      	ldr	r1, [pc, #24]	; (6680 <sys_clock_cycle_get_32+0x2c>)
    6666:	4b07      	ldr	r3, [pc, #28]	; (6684 <sys_clock_cycle_get_32+0x30>)
    6668:	6808      	ldr	r0, [r1, #0]
    666a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    666e:	f382 8811 	msr	BASEPRI, r2
    6672:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    6676:	1a1b      	subs	r3, r3, r0
    6678:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    667c:	4418      	add	r0, r3
    667e:	4770      	bx	lr
    6680:	20000788 	.word	0x20000788
    6684:	40011000 	.word	0x40011000

00006688 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    6688:	4801      	ldr	r0, [pc, #4]	; (6690 <nrf_cc3xx_platform_abort_init+0x8>)
    668a:	f005 b8f9 	b.w	b880 <nrf_cc3xx_platform_set_abort>
    668e:	bf00      	nop
    6690:	0001ce18 	.word	0x0001ce18

00006694 <mutex_unlock_platform>:
    }
}

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    6694:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    6696:	b1d0      	cbz	r0, 66ce <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    6698:	6843      	ldr	r3, [r0, #4]
    669a:	2b04      	cmp	r3, #4
    669c:	d111      	bne.n	66c2 <mutex_unlock_platform+0x2e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    669e:	2200      	movs	r2, #0
    66a0:	6803      	ldr	r3, [r0, #0]
    66a2:	f3bf 8f5b 	dmb	ish
    66a6:	e853 1f00 	ldrex	r1, [r3]
    66aa:	2901      	cmp	r1, #1
    66ac:	d103      	bne.n	66b6 <mutex_unlock_platform+0x22>
    66ae:	e843 2000 	strex	r0, r2, [r3]
    66b2:	2800      	cmp	r0, #0
    66b4:	d1f7      	bne.n	66a6 <mutex_unlock_platform+0x12>
    66b6:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    66ba:	4807      	ldr	r0, [pc, #28]	; (66d8 <mutex_unlock_platform+0x44>)
    66bc:	bf08      	it	eq
    66be:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    66c0:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    66c2:	b13b      	cbz	r3, 66d4 <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
    66c4:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    66c6:	f004 f91b 	bl	a900 <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
    66ca:	2000      	movs	r0, #0
    66cc:	e7f8      	b.n	66c0 <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    66ce:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    66d2:	e7f5      	b.n	66c0 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    66d4:	4801      	ldr	r0, [pc, #4]	; (66dc <mutex_unlock_platform+0x48>)
    66d6:	e7f3      	b.n	66c0 <mutex_unlock_platform+0x2c>
    66d8:	ffff8fe9 	.word	0xffff8fe9
    66dc:	ffff8fea 	.word	0xffff8fea

000066e0 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    66e0:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    66e2:	4604      	mov	r4, r0
    66e4:	b918      	cbnz	r0, 66ee <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    66e6:	4b0d      	ldr	r3, [pc, #52]	; (671c <mutex_free_platform+0x3c>)
    66e8:	480d      	ldr	r0, [pc, #52]	; (6720 <mutex_free_platform+0x40>)
    66ea:	685b      	ldr	r3, [r3, #4]
    66ec:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    66ee:	6861      	ldr	r1, [r4, #4]
    66f0:	2908      	cmp	r1, #8
    66f2:	d00d      	beq.n	6710 <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    66f4:	f031 0304 	bics.w	r3, r1, #4
    66f8:	d00a      	beq.n	6710 <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    66fa:	f011 0102 	ands.w	r1, r1, #2
    66fe:	d008      	beq.n	6712 <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    6700:	4808      	ldr	r0, [pc, #32]	; (6724 <mutex_free_platform+0x44>)
    6702:	4621      	mov	r1, r4
    6704:	f015 fafb 	bl	1bcfe <k_mem_slab_free>
        mutex->mutex = NULL;
    6708:	2300      	movs	r3, #0
    670a:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    670c:	2300      	movs	r3, #0
    670e:	6063      	str	r3, [r4, #4]
}
    6710:	bd10      	pop	{r4, pc}
__ssp_bos_icheck3(memset, void *, int)
    6712:	6820      	ldr	r0, [r4, #0]
    6714:	2214      	movs	r2, #20
    6716:	f015 fd1e 	bl	1c156 <memset>
    671a:	e7f7      	b.n	670c <mutex_free_platform+0x2c>
    671c:	20000100 	.word	0x20000100
    6720:	0001d8c5 	.word	0x0001d8c5
    6724:	2000078c 	.word	0x2000078c

00006728 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    6728:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    672a:	4604      	mov	r4, r0
    672c:	b918      	cbnz	r0, 6736 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    672e:	4b16      	ldr	r3, [pc, #88]	; (6788 <mutex_init_platform+0x60>)
    6730:	4816      	ldr	r0, [pc, #88]	; (678c <mutex_init_platform+0x64>)
    6732:	685b      	ldr	r3, [r3, #4]
    6734:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    6736:	6863      	ldr	r3, [r4, #4]
    6738:	2b04      	cmp	r3, #4
    673a:	d023      	beq.n	6784 <mutex_init_platform+0x5c>
    673c:	2b08      	cmp	r3, #8
    673e:	d021      	beq.n	6784 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    6740:	b9cb      	cbnz	r3, 6776 <mutex_init_platform+0x4e>
    6742:	6823      	ldr	r3, [r4, #0]
    6744:	b9bb      	cbnz	r3, 6776 <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    6746:	4812      	ldr	r0, [pc, #72]	; (6790 <mutex_init_platform+0x68>)
    6748:	f04f 32ff 	mov.w	r2, #4294967295
    674c:	f04f 33ff 	mov.w	r3, #4294967295
    6750:	4621      	mov	r1, r4
    6752:	f003 ff55 	bl	a600 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    6756:	b908      	cbnz	r0, 675c <mutex_init_platform+0x34>
    6758:	6823      	ldr	r3, [r4, #0]
    675a:	b91b      	cbnz	r3, 6764 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    675c:	4b0a      	ldr	r3, [pc, #40]	; (6788 <mutex_init_platform+0x60>)
    675e:	480d      	ldr	r0, [pc, #52]	; (6794 <mutex_init_platform+0x6c>)
    6760:	685b      	ldr	r3, [r3, #4]
    6762:	4798      	blx	r3
    6764:	6820      	ldr	r0, [r4, #0]
    6766:	2214      	movs	r2, #20
    6768:	2100      	movs	r1, #0
    676a:	f015 fcf4 	bl	1c156 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    676e:	6863      	ldr	r3, [r4, #4]
    6770:	f043 0302 	orr.w	r3, r3, #2
    6774:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    6776:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    6778:	f015 fafe 	bl	1bd78 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    677c:	6863      	ldr	r3, [r4, #4]
    677e:	f043 0301 	orr.w	r3, r3, #1
    6782:	6063      	str	r3, [r4, #4]
}
    6784:	bd10      	pop	{r4, pc}
    6786:	bf00      	nop
    6788:	20000100 	.word	0x20000100
    678c:	0001d8c5 	.word	0x0001d8c5
    6790:	2000078c 	.word	0x2000078c
    6794:	0001d8eb 	.word	0x0001d8eb

00006798 <mutex_lock_platform>:
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    6798:	b508      	push	{r3, lr}
    if(mutex == NULL) {
    679a:	b308      	cbz	r0, 67e0 <mutex_lock_platform+0x48>
    switch (mutex->flags) {
    679c:	6843      	ldr	r3, [r0, #4]
    679e:	2b04      	cmp	r3, #4
    67a0:	d110      	bne.n	67c4 <mutex_lock_platform+0x2c>
    67a2:	2201      	movs	r2, #1
    67a4:	6803      	ldr	r3, [r0, #0]
    67a6:	f3bf 8f5b 	dmb	ish
    67aa:	e853 1f00 	ldrex	r1, [r3]
    67ae:	2900      	cmp	r1, #0
    67b0:	d103      	bne.n	67ba <mutex_lock_platform+0x22>
    67b2:	e843 2000 	strex	r0, r2, [r3]
    67b6:	2800      	cmp	r0, #0
    67b8:	d1f7      	bne.n	67aa <mutex_lock_platform+0x12>
    67ba:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    67be:	d10b      	bne.n	67d8 <mutex_lock_platform+0x40>
    67c0:	2000      	movs	r0, #0
}
    67c2:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    67c4:	b153      	cbz	r3, 67dc <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
    67c6:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    67c8:	f04f 32ff 	mov.w	r2, #4294967295
    67cc:	f04f 33ff 	mov.w	r3, #4294967295
    67d0:	f004 f818 	bl	a804 <z_impl_k_mutex_lock>
        if (ret == 0) {
    67d4:	2800      	cmp	r0, #0
    67d6:	d0f3      	beq.n	67c0 <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    67d8:	4803      	ldr	r0, [pc, #12]	; (67e8 <mutex_lock_platform+0x50>)
    67da:	e7f2      	b.n	67c2 <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    67dc:	4803      	ldr	r0, [pc, #12]	; (67ec <mutex_lock_platform+0x54>)
    67de:	e7f0      	b.n	67c2 <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    67e0:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    67e4:	e7ed      	b.n	67c2 <mutex_lock_platform+0x2a>
    67e6:	bf00      	nop
    67e8:	ffff8fe9 	.word	0xffff8fe9
    67ec:	ffff8fea 	.word	0xffff8fea

000067f0 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    67f0:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    67f2:	4906      	ldr	r1, [pc, #24]	; (680c <nrf_cc3xx_platform_mutex_init+0x1c>)
    67f4:	4806      	ldr	r0, [pc, #24]	; (6810 <nrf_cc3xx_platform_mutex_init+0x20>)
    67f6:	2340      	movs	r3, #64	; 0x40
    67f8:	2214      	movs	r2, #20
    67fa:	f015 fa65 	bl	1bcc8 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    67fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    6802:	4904      	ldr	r1, [pc, #16]	; (6814 <nrf_cc3xx_platform_mutex_init+0x24>)
    6804:	4804      	ldr	r0, [pc, #16]	; (6818 <nrf_cc3xx_platform_mutex_init+0x28>)
    6806:	f005 b89d 	b.w	b944 <nrf_cc3xx_platform_set_mutexes>
    680a:	bf00      	nop
    680c:	200007a8 	.word	0x200007a8
    6810:	2000078c 	.word	0x2000078c
    6814:	0001ce30 	.word	0x0001ce30
    6818:	0001ce20 	.word	0x0001ce20

0000681c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    681c:	4a09      	ldr	r2, [pc, #36]	; (6844 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    681e:	490a      	ldr	r1, [pc, #40]	; (6848 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    6820:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    6822:	6809      	ldr	r1, [r1, #0]
    6824:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    6826:	4909      	ldr	r1, [pc, #36]	; (684c <arch_swap+0x30>)
	_current->arch.basepri = key;
    6828:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    682a:	684b      	ldr	r3, [r1, #4]
    682c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    6830:	604b      	str	r3, [r1, #4]
    6832:	2300      	movs	r3, #0
    6834:	f383 8811 	msr	BASEPRI, r3
    6838:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    683c:	6893      	ldr	r3, [r2, #8]
}
    683e:	6f98      	ldr	r0, [r3, #120]	; 0x78
    6840:	4770      	bx	lr
    6842:	bf00      	nop
    6844:	20000fcc 	.word	0x20000fcc
    6848:	0001d07c 	.word	0x0001d07c
    684c:	e000ed00 	.word	0xe000ed00

00006850 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    6850:	4912      	ldr	r1, [pc, #72]	; (689c <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    6852:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    6854:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    6858:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    685a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    685e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    6862:	2020      	movs	r0, #32
    msr BASEPRI, r0
    6864:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    6868:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    686c:	4f0c      	ldr	r7, [pc, #48]	; (68a0 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    686e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    6872:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    6874:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    6876:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    6878:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    687a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    687c:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    687e:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    6882:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    6884:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    6886:	f000 fc0b 	bl	70a0 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    688a:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    688e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    6892:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    6896:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    689a:	4770      	bx	lr
    ldr r1, =_kernel
    689c:	20000fcc 	.word	0x20000fcc
    ldr v4, =_SCS_ICSR
    68a0:	e000ed04 	.word	0xe000ed04

000068a4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    68a4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    68a8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    68aa:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    68ae:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    68b2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    68b4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    68b8:	2902      	cmp	r1, #2
    beq _oops
    68ba:	d0ff      	beq.n	68bc <_oops>

000068bc <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    68bc:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    68be:	f014 fddc 	bl	1b47a <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    68c2:	bd01      	pop	{r0, pc}

000068c4 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    68c4:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    68c6:	2b00      	cmp	r3, #0
    68c8:	db08      	blt.n	68dc <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    68ca:	2201      	movs	r2, #1
    68cc:	f000 001f 	and.w	r0, r0, #31
    68d0:	fa02 f000 	lsl.w	r0, r2, r0
    68d4:	095b      	lsrs	r3, r3, #5
    68d6:	4a02      	ldr	r2, [pc, #8]	; (68e0 <arch_irq_enable+0x1c>)
    68d8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    68dc:	4770      	bx	lr
    68de:	bf00      	nop
    68e0:	e000e100 	.word	0xe000e100

000068e4 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    68e4:	4b05      	ldr	r3, [pc, #20]	; (68fc <arch_irq_is_enabled+0x18>)
    68e6:	0942      	lsrs	r2, r0, #5
    68e8:	f000 001f 	and.w	r0, r0, #31
    68ec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    68f0:	2301      	movs	r3, #1
    68f2:	fa03 f000 	lsl.w	r0, r3, r0
}
    68f6:	4010      	ands	r0, r2
    68f8:	4770      	bx	lr
    68fa:	bf00      	nop
    68fc:	e000e100 	.word	0xe000e100

00006900 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    6900:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    6902:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6904:	bfa8      	it	ge
    6906:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    690a:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    690e:	bfb8      	it	lt
    6910:	4b06      	ldrlt	r3, [pc, #24]	; (692c <z_arm_irq_priority_set+0x2c>)
    6912:	ea4f 1141 	mov.w	r1, r1, lsl #5
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6916:	bfac      	ite	ge
    6918:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    691c:	f000 000f 	andlt.w	r0, r0, #15
    6920:	b2c9      	uxtb	r1, r1
    6922:	bfb4      	ite	lt
    6924:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6926:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    692a:	4770      	bx	lr
    692c:	e000ed14 	.word	0xe000ed14

00006930 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    6930:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    6934:	9b00      	ldr	r3, [sp, #0]
    6936:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    693a:	490a      	ldr	r1, [pc, #40]	; (6964 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    693c:	9b01      	ldr	r3, [sp, #4]
    693e:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    6942:	9b02      	ldr	r3, [sp, #8]
    6944:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    6948:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    694c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    6950:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    6954:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    6958:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    695a:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    695c:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    695e:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    6960:	4770      	bx	lr
    6962:	bf00      	nop
    6964:	0001a913 	.word	0x0001a913

00006968 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    6968:	4a0b      	ldr	r2, [pc, #44]	; (6998 <z_check_thread_stack_fail+0x30>)
{
    696a:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    696c:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    696e:	b190      	cbz	r0, 6996 <z_check_thread_stack_fail+0x2e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    6970:	f113 0f16 	cmn.w	r3, #22
    6974:	6e40      	ldr	r0, [r0, #100]	; 0x64
    6976:	d005      	beq.n	6984 <z_check_thread_stack_fail+0x1c>
    6978:	f1a0 0220 	sub.w	r2, r0, #32
    697c:	429a      	cmp	r2, r3
    697e:	d806      	bhi.n	698e <z_check_thread_stack_fail+0x26>
    6980:	4283      	cmp	r3, r0
    6982:	d204      	bcs.n	698e <z_check_thread_stack_fail+0x26>
    6984:	4281      	cmp	r1, r0
    6986:	bf2c      	ite	cs
    6988:	2100      	movcs	r1, #0
    698a:	2101      	movcc	r1, #1
    698c:	e000      	b.n	6990 <z_check_thread_stack_fail+0x28>
    698e:	2100      	movs	r1, #0
    6990:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    6992:	bf08      	it	eq
    6994:	2000      	moveq	r0, #0
}
    6996:	4770      	bx	lr
    6998:	20000fcc 	.word	0x20000fcc

0000699c <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    699c:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    699e:	4b09      	ldr	r3, [pc, #36]	; (69c4 <arch_switch_to_main_thread+0x28>)
    69a0:	6098      	str	r0, [r3, #8]
{
    69a2:	460d      	mov	r5, r1
    69a4:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    69a6:	f000 fb7b 	bl	70a0 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    69aa:	4620      	mov	r0, r4
    69ac:	f385 8809 	msr	PSP, r5
    69b0:	2100      	movs	r1, #0
    69b2:	b663      	cpsie	if
    69b4:	f381 8811 	msr	BASEPRI, r1
    69b8:	f3bf 8f6f 	isb	sy
    69bc:	2200      	movs	r2, #0
    69be:	2300      	movs	r3, #0
    69c0:	f013 ffa7 	bl	1a912 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    69c4:	20000fcc 	.word	0x20000fcc

000069c8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    69c8:	4901      	ldr	r1, [pc, #4]	; (69d0 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    69ca:	2210      	movs	r2, #16
	str	r2, [r1]
    69cc:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    69ce:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    69d0:	e000ed10 	.word	0xe000ed10

000069d4 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    69d4:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    69d6:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    69d8:	f380 8811 	msr	BASEPRI, r0
	isb
    69dc:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    69e0:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    69e4:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    69e6:	b662      	cpsie	i
	isb
    69e8:	f3bf 8f6f 	isb	sy

	bx	lr
    69ec:	4770      	bx	lr
    69ee:	bf00      	nop

000069f0 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    69f0:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    69f2:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    69f4:	f381 8811 	msr	BASEPRI, r1

	wfe
    69f8:	bf20      	wfe

	msr	BASEPRI, r0
    69fa:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    69fe:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    6a00:	4770      	bx	lr
    6a02:	bf00      	nop

00006a04 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    6a04:	b573      	push	{r0, r1, r4, r5, r6, lr}
    6a06:	4606      	mov	r6, r0

	if (esf != NULL) {
    6a08:	460c      	mov	r4, r1
    6a0a:	b301      	cbz	r1, 6a4e <z_arm_fatal_error+0x4a>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    6a0c:	4b13      	ldr	r3, [pc, #76]	; (6a5c <z_arm_fatal_error+0x58>)
    6a0e:	4d14      	ldr	r5, [pc, #80]	; (6a60 <z_arm_fatal_error+0x5c>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    6a10:	4814      	ldr	r0, [pc, #80]	; (6a64 <z_arm_fatal_error+0x60>)
    6a12:	1aed      	subs	r5, r5, r3
    6a14:	08ed      	lsrs	r5, r5, #3
    6a16:	01ad      	lsls	r5, r5, #6
    6a18:	f045 0501 	orr.w	r5, r5, #1
    6a1c:	f8ad 5000 	strh.w	r5, [sp]
    6a20:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    6a24:	6809      	ldr	r1, [r1, #0]
    6a26:	f014 f8d0 	bl	1abca <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    6a2a:	f8ad 5000 	strh.w	r5, [sp]
    6a2e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    6a32:	68e1      	ldr	r1, [r4, #12]
    6a34:	480c      	ldr	r0, [pc, #48]	; (6a68 <z_arm_fatal_error+0x64>)
    6a36:	f014 f8c8 	bl	1abca <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    6a3a:	69e1      	ldr	r1, [r4, #28]
    6a3c:	480b      	ldr	r0, [pc, #44]	; (6a6c <z_arm_fatal_error+0x68>)
    6a3e:	462a      	mov	r2, r5
    6a40:	f014 f896 	bl	1ab70 <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    6a44:	69a1      	ldr	r1, [r4, #24]
    6a46:	480a      	ldr	r0, [pc, #40]	; (6a70 <z_arm_fatal_error+0x6c>)
    6a48:	462a      	mov	r2, r5
    6a4a:	f014 f891 	bl	1ab70 <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    6a4e:	4621      	mov	r1, r4
    6a50:	4630      	mov	r0, r6
}
    6a52:	b002      	add	sp, #8
    6a54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
    6a58:	f003 bca4 	b.w	a3a4 <z_fatal_error>
    6a5c:	0001c8a0 	.word	0x0001c8a0
    6a60:	0001c8c0 	.word	0x0001c8c0
    6a64:	0001d918 	.word	0x0001d918
    6a68:	0001d947 	.word	0x0001d947
    6a6c:	0001d976 	.word	0x0001d976
    6a70:	0001d985 	.word	0x0001d985

00006a74 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    6a74:	bf30      	wfi
    b z_SysNmiOnReset
    6a76:	f7ff bffd 	b.w	6a74 <z_SysNmiOnReset>
    6a7a:	bf00      	nop

00006a7c <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    6a7c:	4a0b      	ldr	r2, [pc, #44]	; (6aac <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    6a7e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    6a80:	4b0b      	ldr	r3, [pc, #44]	; (6ab0 <z_arm_prep_c+0x34>)
    6a82:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    6a86:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    6a88:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6a8c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    6a90:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    6a94:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    6a98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    6a9c:	f003 fce0 	bl	a460 <z_bss_zero>
	z_data_copy();
    6aa0:	f004 fc68 	bl	b374 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    6aa4:	f000 fad2 	bl	704c <z_arm_interrupt_init>
	z_cstart();
    6aa8:	f003 fcfe 	bl	a4a8 <z_cstart>
    6aac:	00000000 	.word	0x00000000
    6ab0:	e000ed00 	.word	0xe000ed00

00006ab4 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    6ab4:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    6ab6:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    6ab8:	4a0b      	ldr	r2, [pc, #44]	; (6ae8 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    6aba:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    6abc:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    6abe:	bf1e      	ittt	ne
	movne	r1, #0
    6ac0:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    6ac2:	6211      	strne	r1, [r2, #32]
		blne	z_pm_save_idle_exit
    6ac4:	f015 f951 	blne	1bd6a <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    6ac8:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    6aca:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    6ace:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    6ad2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    6ad6:	4905      	ldr	r1, [pc, #20]	; (6aec <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    6ad8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    6ada:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    6adc:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    6ade:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    6ae2:	4903      	ldr	r1, [pc, #12]	; (6af0 <_isr_wrapper+0x3c>)
	bx r1
    6ae4:	4708      	bx	r1
    6ae6:	0000      	.short	0x0000
	ldr r2, =_kernel
    6ae8:	20000fcc 	.word	0x20000fcc
	ldr r1, =_sw_isr_table
    6aec:	0001c720 	.word	0x0001c720
	ldr r1, =z_arm_int_exit
    6af0:	00006fad 	.word	0x00006fad

00006af4 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    6af4:	2000      	movs	r0, #0
    msr CONTROL, r0
    6af6:	f380 8814 	msr	CONTROL, r0
    isb
    6afa:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    6afe:	f015 fd71 	bl	1c5e4 <z_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    6b02:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    6b04:	490d      	ldr	r1, [pc, #52]	; (6b3c <__start+0x48>)
    str r0, [r1]
    6b06:	6008      	str	r0, [r1, #0]
    dsb
    6b08:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    6b0c:	480c      	ldr	r0, [pc, #48]	; (6b40 <__start+0x4c>)
    msr msp, r0
    6b0e:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    6b12:	f000 fa69 	bl	6fe8 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    6b16:	2020      	movs	r0, #32
    msr BASEPRI, r0
    6b18:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    6b1c:	4809      	ldr	r0, [pc, #36]	; (6b44 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    6b1e:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    6b22:	1840      	adds	r0, r0, r1
    msr PSP, r0
    6b24:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    6b28:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    6b2c:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    6b2e:	4308      	orrs	r0, r1
    msr CONTROL, r0
    6b30:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    6b34:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    6b38:	f7ff ffa0 	bl	6a7c <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    6b3c:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    6b40:	20002b60 	.word	0x20002b60
    ldr r0, =z_interrupt_stacks
    6b44:	20002ce0 	.word	0x20002ce0

00006b48 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    6b48:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    6b4c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    6b50:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    6b52:	4672      	mov	r2, lr
	bl z_arm_fault
    6b54:	f000 f94e 	bl	6df4 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    6b58:	bd01      	pop	{r0, pc}
    6b5a:	bf00      	nop

00006b5c <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    6b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6b60:	4b35      	ldr	r3, [pc, #212]	; (6c38 <mem_manage_fault+0xdc>)
    6b62:	4c36      	ldr	r4, [pc, #216]	; (6c3c <mem_manage_fault+0xe0>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    6b64:	4d36      	ldr	r5, [pc, #216]	; (6c40 <mem_manage_fault+0xe4>)
    6b66:	1ae4      	subs	r4, r4, r3
    6b68:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
    6b6a:	01a4      	lsls	r4, r4, #6
    6b6c:	f044 0901 	orr.w	r9, r4, #1
{
    6b70:	4607      	mov	r7, r0
    6b72:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    6b74:	4833      	ldr	r0, [pc, #204]	; (6c44 <mem_manage_fault+0xe8>)
    6b76:	4649      	mov	r1, r9
{
    6b78:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    6b7a:	f013 ffec 	bl	1ab56 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    6b7e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    6b80:	06d3      	lsls	r3, r2, #27
    6b82:	d503      	bpl.n	6b8c <mem_manage_fault+0x30>
		PR_FAULT_INFO("  Stacking error (context area might be"
    6b84:	4830      	ldr	r0, [pc, #192]	; (6c48 <mem_manage_fault+0xec>)
    6b86:	4649      	mov	r1, r9
    6b88:	f013 ffe5 	bl	1ab56 <log_0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    6b8c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6b8e:	0718      	lsls	r0, r3, #28
    6b90:	d504      	bpl.n	6b9c <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Unstacking error");
    6b92:	482e      	ldr	r0, [pc, #184]	; (6c4c <mem_manage_fault+0xf0>)
    6b94:	f044 0101 	orr.w	r1, r4, #1
    6b98:	f013 ffdd 	bl	1ab56 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    6b9c:	4d28      	ldr	r5, [pc, #160]	; (6c40 <mem_manage_fault+0xe4>)
    6b9e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6ba0:	0799      	lsls	r1, r3, #30
    6ba2:	d423      	bmi.n	6bec <mem_manage_fault+0x90>
	uint32_t mmfar = -EINVAL;
    6ba4:	f06f 0915 	mvn.w	r9, #21
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    6ba8:	4d25      	ldr	r5, [pc, #148]	; (6c40 <mem_manage_fault+0xe4>)
    6baa:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    6bac:	07d3      	lsls	r3, r2, #31
    6bae:	d504      	bpl.n	6bba <mem_manage_fault+0x5e>
		PR_FAULT_INFO("  Instruction Access Violation");
    6bb0:	4827      	ldr	r0, [pc, #156]	; (6c50 <mem_manage_fault+0xf4>)
    6bb2:	f044 0101 	orr.w	r1, r4, #1
    6bb6:	f013 ffce 	bl	1ab56 <log_0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    6bba:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6bbc:	0698      	lsls	r0, r3, #26
    6bbe:	d504      	bpl.n	6bca <mem_manage_fault+0x6e>
		PR_FAULT_INFO(
    6bc0:	4824      	ldr	r0, [pc, #144]	; (6c54 <mem_manage_fault+0xf8>)
    6bc2:	f044 0101 	orr.w	r1, r4, #1
    6bc6:	f013 ffc6 	bl	1ab56 <log_0>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    6bca:	4b1d      	ldr	r3, [pc, #116]	; (6c40 <mem_manage_fault+0xe4>)
    6bcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    6bce:	06d1      	lsls	r1, r2, #27
    6bd0:	d424      	bmi.n	6c1c <mem_manage_fault+0xc0>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    6bd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    6bd4:	0792      	lsls	r2, r2, #30
    6bd6:	d421      	bmi.n	6c1c <mem_manage_fault+0xc0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    6bd8:	2000      	movs	r0, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    6bda:	4a19      	ldr	r2, [pc, #100]	; (6c40 <mem_manage_fault+0xe4>)
    6bdc:	6a93      	ldr	r3, [r2, #40]	; 0x28
    6bde:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    6be2:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    6be4:	2300      	movs	r3, #0
    6be6:	7033      	strb	r3, [r6, #0]

	return reason;
}
    6be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		PR_FAULT_INFO("  Data Access Violation");
    6bec:	f044 0a01 	orr.w	sl, r4, #1
    6bf0:	4819      	ldr	r0, [pc, #100]	; (6c58 <mem_manage_fault+0xfc>)
    6bf2:	4651      	mov	r1, sl
    6bf4:	f013 ffaf 	bl	1ab56 <log_0>
		uint32_t temp = SCB->MMFAR;
    6bf8:	f8d5 9034 	ldr.w	r9, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    6bfc:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6bfe:	061a      	lsls	r2, r3, #24
    6c00:	d5d0      	bpl.n	6ba4 <mem_manage_fault+0x48>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    6c02:	4816      	ldr	r0, [pc, #88]	; (6c5c <mem_manage_fault+0x100>)
    6c04:	4652      	mov	r2, sl
    6c06:	4649      	mov	r1, r9
    6c08:	f013 ffb2 	bl	1ab70 <log_1>
			if (from_hard_fault != 0) {
    6c0c:	f1b8 0f00 	cmp.w	r8, #0
    6c10:	d0ca      	beq.n	6ba8 <mem_manage_fault+0x4c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    6c12:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6c14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    6c18:	62ab      	str	r3, [r5, #40]	; 0x28
    6c1a:	e7c5      	b.n	6ba8 <mem_manage_fault+0x4c>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    6c1c:	685b      	ldr	r3, [r3, #4]
    6c1e:	051b      	lsls	r3, r3, #20
    6c20:	d5da      	bpl.n	6bd8 <mem_manage_fault+0x7c>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    6c22:	4639      	mov	r1, r7
    6c24:	4648      	mov	r0, r9
    6c26:	f7ff fe9f 	bl	6968 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    6c2a:	2800      	cmp	r0, #0
    6c2c:	d0d4      	beq.n	6bd8 <mem_manage_fault+0x7c>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    6c2e:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    6c32:	2002      	movs	r0, #2
    6c34:	e7d1      	b.n	6bda <mem_manage_fault+0x7e>
    6c36:	bf00      	nop
    6c38:	0001c8a0 	.word	0x0001c8a0
    6c3c:	0001c8c0 	.word	0x0001c8c0
    6c40:	e000ed00 	.word	0xe000ed00
    6c44:	0001d9b3 	.word	0x0001d9b3
    6c48:	0001d9c9 	.word	0x0001d9c9
    6c4c:	0001d9fc 	.word	0x0001d9fc
    6c50:	0001da3d 	.word	0x0001da3d
    6c54:	0001da5c 	.word	0x0001da5c
    6c58:	0001da0f 	.word	0x0001da0f
    6c5c:	0001da27 	.word	0x0001da27

00006c60 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    6c60:	b570      	push	{r4, r5, r6, lr}
    6c62:	4b23      	ldr	r3, [pc, #140]	; (6cf0 <usage_fault.isra.0+0x90>)
    6c64:	4c23      	ldr	r4, [pc, #140]	; (6cf4 <usage_fault.isra.0+0x94>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    6c66:	4d24      	ldr	r5, [pc, #144]	; (6cf8 <usage_fault.isra.0+0x98>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    6c68:	4824      	ldr	r0, [pc, #144]	; (6cfc <usage_fault.isra.0+0x9c>)
    6c6a:	1ae4      	subs	r4, r4, r3
    6c6c:	08e4      	lsrs	r4, r4, #3
    6c6e:	01a4      	lsls	r4, r4, #6
    6c70:	f044 0601 	orr.w	r6, r4, #1
    6c74:	4631      	mov	r1, r6
    6c76:	f013 ff6e 	bl	1ab56 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    6c7a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    6c7c:	0193      	lsls	r3, r2, #6
    6c7e:	d503      	bpl.n	6c88 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
    6c80:	481f      	ldr	r0, [pc, #124]	; (6d00 <usage_fault.isra.0+0xa0>)
    6c82:	4631      	mov	r1, r6
    6c84:	f013 ff67 	bl	1ab56 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    6c88:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6c8a:	01dd      	lsls	r5, r3, #7
    6c8c:	d504      	bpl.n	6c98 <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
    6c8e:	481d      	ldr	r0, [pc, #116]	; (6d04 <usage_fault.isra.0+0xa4>)
    6c90:	f044 0101 	orr.w	r1, r4, #1
    6c94:	f013 ff5f 	bl	1ab56 <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    6c98:	4d17      	ldr	r5, [pc, #92]	; (6cf8 <usage_fault.isra.0+0x98>)
    6c9a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    6c9c:	0310      	lsls	r0, r2, #12
    6c9e:	d504      	bpl.n	6caa <usage_fault.isra.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    6ca0:	4819      	ldr	r0, [pc, #100]	; (6d08 <usage_fault.isra.0+0xa8>)
    6ca2:	f044 0101 	orr.w	r1, r4, #1
    6ca6:	f013 ff56 	bl	1ab56 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    6caa:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6cac:	0359      	lsls	r1, r3, #13
    6cae:	d504      	bpl.n	6cba <usage_fault.isra.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    6cb0:	4816      	ldr	r0, [pc, #88]	; (6d0c <usage_fault.isra.0+0xac>)
    6cb2:	f044 0101 	orr.w	r1, r4, #1
    6cb6:	f013 ff4e 	bl	1ab56 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    6cba:	4d0f      	ldr	r5, [pc, #60]	; (6cf8 <usage_fault.isra.0+0x98>)
    6cbc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    6cbe:	0392      	lsls	r2, r2, #14
    6cc0:	d504      	bpl.n	6ccc <usage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    6cc2:	4813      	ldr	r0, [pc, #76]	; (6d10 <usage_fault.isra.0+0xb0>)
    6cc4:	f044 0101 	orr.w	r1, r4, #1
    6cc8:	f013 ff45 	bl	1ab56 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    6ccc:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6cce:	03db      	lsls	r3, r3, #15
    6cd0:	d504      	bpl.n	6cdc <usage_fault.isra.0+0x7c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    6cd2:	4810      	ldr	r0, [pc, #64]	; (6d14 <usage_fault.isra.0+0xb4>)
    6cd4:	f044 0101 	orr.w	r1, r4, #1
    6cd8:	f013 ff3d 	bl	1ab56 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    6cdc:	4a06      	ldr	r2, [pc, #24]	; (6cf8 <usage_fault.isra.0+0x98>)
    6cde:	6a93      	ldr	r3, [r2, #40]	; 0x28
    6ce0:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    6ce4:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    6ce8:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    6cea:	2000      	movs	r0, #0
    6cec:	bd70      	pop	{r4, r5, r6, pc}
    6cee:	bf00      	nop
    6cf0:	0001c8a0 	.word	0x0001c8a0
    6cf4:	0001c8c0 	.word	0x0001c8c0
    6cf8:	e000ed00 	.word	0xe000ed00
    6cfc:	0001da8b 	.word	0x0001da8b
    6d00:	0001daa3 	.word	0x0001daa3
    6d04:	0001dab6 	.word	0x0001dab6
    6d08:	0001dad0 	.word	0x0001dad0
    6d0c:	0001daee 	.word	0x0001daee
    6d10:	0001db13 	.word	0x0001db13
    6d14:	0001db2d 	.word	0x0001db2d

00006d18 <bus_fault.isra.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    6d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6d1c:	4b2a      	ldr	r3, [pc, #168]	; (6dc8 <bus_fault.isra.0+0xb0>)
    6d1e:	4c2b      	ldr	r4, [pc, #172]	; (6dcc <bus_fault.isra.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    6d20:	4d2b      	ldr	r5, [pc, #172]	; (6dd0 <bus_fault.isra.0+0xb8>)
    6d22:	1ae4      	subs	r4, r4, r3
    6d24:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
    6d26:	01a4      	lsls	r4, r4, #6
    6d28:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    6d2c:	4607      	mov	r7, r0
    6d2e:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    6d30:	4828      	ldr	r0, [pc, #160]	; (6dd4 <bus_fault.isra.0+0xbc>)
    6d32:	4641      	mov	r1, r8
    6d34:	f013 ff0f 	bl	1ab56 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    6d38:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    6d3a:	04d1      	lsls	r1, r2, #19
    6d3c:	d503      	bpl.n	6d46 <bus_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
    6d3e:	4826      	ldr	r0, [pc, #152]	; (6dd8 <bus_fault.isra.0+0xc0>)
    6d40:	4641      	mov	r1, r8
    6d42:	f013 ff08 	bl	1ab56 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    6d46:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6d48:	051a      	lsls	r2, r3, #20
    6d4a:	d504      	bpl.n	6d56 <bus_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    6d4c:	4823      	ldr	r0, [pc, #140]	; (6ddc <bus_fault.isra.0+0xc4>)
    6d4e:	f044 0101 	orr.w	r1, r4, #1
    6d52:	f013 ff00 	bl	1ab56 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    6d56:	4d1e      	ldr	r5, [pc, #120]	; (6dd0 <bus_fault.isra.0+0xb8>)
    6d58:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6d5a:	059b      	lsls	r3, r3, #22
    6d5c:	d512      	bpl.n	6d84 <bus_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
    6d5e:	f044 0801 	orr.w	r8, r4, #1
    6d62:	481f      	ldr	r0, [pc, #124]	; (6de0 <bus_fault.isra.0+0xc8>)
    6d64:	4641      	mov	r1, r8
    6d66:	f013 fef6 	bl	1ab56 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    6d6a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    6d6c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6d6e:	0418      	lsls	r0, r3, #16
    6d70:	d508      	bpl.n	6d84 <bus_fault.isra.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    6d72:	481c      	ldr	r0, [pc, #112]	; (6de4 <bus_fault.isra.0+0xcc>)
    6d74:	4642      	mov	r2, r8
    6d76:	f013 fefb 	bl	1ab70 <log_1>
			if (from_hard_fault != 0) {
    6d7a:	b11f      	cbz	r7, 6d84 <bus_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    6d7c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6d7e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    6d82:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    6d84:	4d12      	ldr	r5, [pc, #72]	; (6dd0 <bus_fault.isra.0+0xb8>)
    6d86:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6d88:	0559      	lsls	r1, r3, #21
    6d8a:	d504      	bpl.n	6d96 <bus_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
    6d8c:	4816      	ldr	r0, [pc, #88]	; (6de8 <bus_fault.isra.0+0xd0>)
    6d8e:	f044 0101 	orr.w	r1, r4, #1
    6d92:	f013 fee0 	bl	1ab56 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    6d96:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6d98:	05da      	lsls	r2, r3, #23
    6d9a:	d50d      	bpl.n	6db8 <bus_fault.isra.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
    6d9c:	4813      	ldr	r0, [pc, #76]	; (6dec <bus_fault.isra.0+0xd4>)
    6d9e:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    6da2:	f013 fed8 	bl	1ab56 <log_0>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    6da6:	4a0a      	ldr	r2, [pc, #40]	; (6dd0 <bus_fault.isra.0+0xb8>)
    6da8:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    6daa:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    6dac:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    6db0:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    6db2:	7030      	strb	r0, [r6, #0]
}
    6db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    6db8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6dba:	049b      	lsls	r3, r3, #18
    6dbc:	d5f3      	bpl.n	6da6 <bus_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    6dbe:	480c      	ldr	r0, [pc, #48]	; (6df0 <bus_fault.isra.0+0xd8>)
    6dc0:	f044 0101 	orr.w	r1, r4, #1
    6dc4:	e7ed      	b.n	6da2 <bus_fault.isra.0+0x8a>
    6dc6:	bf00      	nop
    6dc8:	0001c8a0 	.word	0x0001c8a0
    6dcc:	0001c8c0 	.word	0x0001c8c0
    6dd0:	e000ed00 	.word	0xe000ed00
    6dd4:	0001db58 	.word	0x0001db58
    6dd8:	0001db6e 	.word	0x0001db6e
    6ddc:	0001d9fc 	.word	0x0001d9fc
    6de0:	0001db7f 	.word	0x0001db7f
    6de4:	0001db98 	.word	0x0001db98
    6de8:	0001dbad 	.word	0x0001dbad
    6dec:	0001dbc8 	.word	0x0001dbc8
    6df0:	0001da5c 	.word	0x0001da5c

00006df4 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    6df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    6df8:	4b5a      	ldr	r3, [pc, #360]	; (6f64 <z_arm_fault+0x170>)
    6dfa:	685f      	ldr	r7, [r3, #4]
{
    6dfc:	b08a      	sub	sp, #40	; 0x28
    6dfe:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    6e00:	f3c7 0408 	ubfx	r4, r7, #0, #9
    6e04:	2600      	movs	r6, #0
    6e06:	f386 8811 	msr	BASEPRI, r6
    6e0a:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    6e0e:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    6e12:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    6e16:	d10d      	bne.n	6e34 <z_arm_fault+0x40>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    6e18:	f002 030c 	and.w	r3, r2, #12
    6e1c:	2b08      	cmp	r3, #8
    6e1e:	d10b      	bne.n	6e38 <z_arm_fault+0x44>
    6e20:	4951      	ldr	r1, [pc, #324]	; (6f68 <z_arm_fault+0x174>)
    6e22:	4b52      	ldr	r3, [pc, #328]	; (6f6c <z_arm_fault+0x178>)
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    6e24:	4852      	ldr	r0, [pc, #328]	; (6f70 <z_arm_fault+0x17c>)
    6e26:	1ac9      	subs	r1, r1, r3
    6e28:	08c9      	lsrs	r1, r1, #3
    6e2a:	0189      	lsls	r1, r1, #6
    6e2c:	f041 0101 	orr.w	r1, r1, #1
    6e30:	f013 fe91 	bl	1ab56 <log_0>
		return NULL;
    6e34:	4635      	mov	r5, r6
    6e36:	e003      	b.n	6e40 <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    6e38:	0712      	lsls	r2, r2, #28
    6e3a:	d401      	bmi.n	6e40 <z_arm_fault+0x4c>
			ptr_esf = (z_arch_esf_t *)msp;
    6e3c:	4605      	mov	r5, r0
			*nested_exc = true;
    6e3e:	2601      	movs	r6, #1
	*recoverable = false;
    6e40:	2300      	movs	r3, #0
    6e42:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    6e46:	1ee3      	subs	r3, r4, #3
    6e48:	2b09      	cmp	r3, #9
    6e4a:	d871      	bhi.n	6f30 <z_arm_fault+0x13c>
    6e4c:	e8df f003 	tbb	[pc, r3]
    6e50:	3d635f05 	.word	0x3d635f05
    6e54:	70707070 	.word	0x70707070
    6e58:	6770      	.short	0x6770
    6e5a:	4b44      	ldr	r3, [pc, #272]	; (6f6c <z_arm_fault+0x178>)
    6e5c:	4f42      	ldr	r7, [pc, #264]	; (6f68 <z_arm_fault+0x174>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    6e5e:	4845      	ldr	r0, [pc, #276]	; (6f74 <z_arm_fault+0x180>)
    6e60:	1aff      	subs	r7, r7, r3
    6e62:	08ff      	lsrs	r7, r7, #3
    6e64:	01bf      	lsls	r7, r7, #6
    6e66:	f047 0701 	orr.w	r7, r7, #1
    6e6a:	4639      	mov	r1, r7
    6e6c:	f013 fe73 	bl	1ab56 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    6e70:	4b3c      	ldr	r3, [pc, #240]	; (6f64 <z_arm_fault+0x170>)
    6e72:	6adc      	ldr	r4, [r3, #44]	; 0x2c
	*recoverable = false;
    6e74:	f04f 0800 	mov.w	r8, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    6e78:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
    6e7c:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    6e80:	d005      	beq.n	6e8e <z_arm_fault+0x9a>
		PR_EXC("  Bus fault on vector table read");
    6e82:	483d      	ldr	r0, [pc, #244]	; (6f78 <z_arm_fault+0x184>)
    6e84:	4639      	mov	r1, r7
	PR_FAULT_INFO(
    6e86:	f013 fe66 	bl	1ab56 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    6e8a:	2400      	movs	r4, #0
}
    6e8c:	e020      	b.n	6ed0 <z_arm_fault+0xdc>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    6e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6e90:	005b      	lsls	r3, r3, #1
    6e92:	d51d      	bpl.n	6ed0 <z_arm_fault+0xdc>
		PR_EXC("  Fault escalation (see below)");
    6e94:	4839      	ldr	r0, [pc, #228]	; (6f7c <z_arm_fault+0x188>)
    6e96:	4639      	mov	r1, r7
    6e98:	f013 fe5d 	bl	1ab56 <log_0>
		if (SCB_MMFSR != 0) {
    6e9c:	4b38      	ldr	r3, [pc, #224]	; (6f80 <z_arm_fault+0x18c>)
    6e9e:	781b      	ldrb	r3, [r3, #0]
    6ea0:	b133      	cbz	r3, 6eb0 <z_arm_fault+0xbc>
			reason = mem_manage_fault(esf, 1, recoverable);
    6ea2:	f10d 0207 	add.w	r2, sp, #7
    6ea6:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    6ea8:	4628      	mov	r0, r5
    6eaa:	f7ff fe57 	bl	6b5c <mem_manage_fault>
    6eae:	e00e      	b.n	6ece <z_arm_fault+0xda>
		} else if (SCB_BFSR != 0) {
    6eb0:	4b34      	ldr	r3, [pc, #208]	; (6f84 <z_arm_fault+0x190>)
    6eb2:	781b      	ldrb	r3, [r3, #0]
    6eb4:	b12b      	cbz	r3, 6ec2 <z_arm_fault+0xce>
			reason = bus_fault(esf, 1, recoverable);
    6eb6:	f10d 0107 	add.w	r1, sp, #7
    6eba:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    6ebc:	f7ff ff2c 	bl	6d18 <bus_fault.isra.0>
    6ec0:	e005      	b.n	6ece <z_arm_fault+0xda>
		} else if (SCB_UFSR != 0) {
    6ec2:	4b31      	ldr	r3, [pc, #196]	; (6f88 <z_arm_fault+0x194>)
    6ec4:	881b      	ldrh	r3, [r3, #0]
    6ec6:	b29b      	uxth	r3, r3
    6ec8:	b113      	cbz	r3, 6ed0 <z_arm_fault+0xdc>
			reason = usage_fault(esf);
    6eca:	f7ff fec9 	bl	6c60 <usage_fault.isra.0>
    6ece:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    6ed0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6ed4:	b9c3      	cbnz	r3, 6f08 <z_arm_fault+0x114>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    6ed6:	aa02      	add	r2, sp, #8
    6ed8:	f105 0720 	add.w	r7, r5, #32
    6edc:	6828      	ldr	r0, [r5, #0]
    6ede:	6869      	ldr	r1, [r5, #4]
    6ee0:	4613      	mov	r3, r2
    6ee2:	c303      	stmia	r3!, {r0, r1}
    6ee4:	3508      	adds	r5, #8
    6ee6:	42bd      	cmp	r5, r7
    6ee8:	461a      	mov	r2, r3
    6eea:	d1f7      	bne.n	6edc <z_arm_fault+0xe8>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    6eec:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6eee:	b39e      	cbz	r6, 6f58 <z_arm_fault+0x164>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    6ef0:	f3c3 0208 	ubfx	r2, r3, #0, #9
    6ef4:	b922      	cbnz	r2, 6f00 <z_arm_fault+0x10c>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    6ef6:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    6efa:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    6efe:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    6f00:	a902      	add	r1, sp, #8
    6f02:	4620      	mov	r0, r4
    6f04:	f7ff fd7e 	bl	6a04 <z_arm_fatal_error>
}
    6f08:	b00a      	add	sp, #40	; 0x28
    6f0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    6f0e:	f10d 0207 	add.w	r2, sp, #7
    6f12:	2100      	movs	r1, #0
    6f14:	e7c8      	b.n	6ea8 <z_arm_fault+0xb4>
		reason = bus_fault(esf, 0, recoverable);
    6f16:	f10d 0107 	add.w	r1, sp, #7
    6f1a:	2000      	movs	r0, #0
    6f1c:	e7ce      	b.n	6ebc <z_arm_fault+0xc8>
    6f1e:	4912      	ldr	r1, [pc, #72]	; (6f68 <z_arm_fault+0x174>)
    6f20:	4b12      	ldr	r3, [pc, #72]	; (6f6c <z_arm_fault+0x178>)
	PR_FAULT_INFO(
    6f22:	481a      	ldr	r0, [pc, #104]	; (6f8c <z_arm_fault+0x198>)
    6f24:	1ac9      	subs	r1, r1, r3
    6f26:	08c9      	lsrs	r1, r1, #3
    6f28:	0189      	lsls	r1, r1, #6
    6f2a:	f041 0101 	orr.w	r1, r1, #1
    6f2e:	e7aa      	b.n	6e86 <z_arm_fault+0x92>
    6f30:	4a0e      	ldr	r2, [pc, #56]	; (6f6c <z_arm_fault+0x178>)
    6f32:	4b0d      	ldr	r3, [pc, #52]	; (6f68 <z_arm_fault+0x174>)
	PR_FAULT_INFO("***** %s %d) *****",
    6f34:	4816      	ldr	r0, [pc, #88]	; (6f90 <z_arm_fault+0x19c>)
    6f36:	4917      	ldr	r1, [pc, #92]	; (6f94 <z_arm_fault+0x1a0>)
    6f38:	1a9b      	subs	r3, r3, r2
    6f3a:	08db      	lsrs	r3, r3, #3
    6f3c:	f417 7ff8 	tst.w	r7, #496	; 0x1f0
    6f40:	ea4f 1383 	mov.w	r3, r3, lsl #6
    6f44:	bf18      	it	ne
    6f46:	4601      	movne	r1, r0
    6f48:	f043 0301 	orr.w	r3, r3, #1
    6f4c:	4812      	ldr	r0, [pc, #72]	; (6f98 <z_arm_fault+0x1a4>)
    6f4e:	f1a4 0210 	sub.w	r2, r4, #16
    6f52:	f013 fe21 	bl	1ab98 <log_2>
    6f56:	e798      	b.n	6e8a <z_arm_fault+0x96>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    6f58:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    6f5c:	f023 0301 	bic.w	r3, r3, #1
    6f60:	e7cd      	b.n	6efe <z_arm_fault+0x10a>
    6f62:	bf00      	nop
    6f64:	e000ed00 	.word	0xe000ed00
    6f68:	0001c8c0 	.word	0x0001c8c0
    6f6c:	0001c8a0 	.word	0x0001c8a0
    6f70:	0001dbe0 	.word	0x0001dbe0
    6f74:	0001dc0b 	.word	0x0001dc0b
    6f78:	0001dc22 	.word	0x0001dc22
    6f7c:	0001dc43 	.word	0x0001dc43
    6f80:	e000ed28 	.word	0xe000ed28
    6f84:	e000ed29 	.word	0xe000ed29
    6f88:	e000ed2a 	.word	0xe000ed2a
    6f8c:	0001dc62 	.word	0x0001dc62
    6f90:	0001dc9b 	.word	0x0001dc9b
    6f94:	0001dc86 	.word	0x0001dc86
    6f98:	0001dcb4 	.word	0x0001dcb4

00006f9c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    6f9c:	4a02      	ldr	r2, [pc, #8]	; (6fa8 <z_arm_fault_init+0xc>)
    6f9e:	6953      	ldr	r3, [r2, #20]
    6fa0:	f043 0310 	orr.w	r3, r3, #16
    6fa4:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    6fa6:	4770      	bx	lr
    6fa8:	e000ed00 	.word	0xe000ed00

00006fac <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    6fac:	4b04      	ldr	r3, [pc, #16]	; (6fc0 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    6fae:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    6fb0:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
    6fb2:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    6fb4:	d003      	beq.n	6fbe <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    6fb6:	4903      	ldr	r1, [pc, #12]	; (6fc4 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    6fb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    6fbc:	600a      	str	r2, [r1, #0]

00006fbe <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    6fbe:	4770      	bx	lr
	ldr r3, =_kernel
    6fc0:	20000fcc 	.word	0x20000fcc
	ldr r1, =_SCS_ICSR
    6fc4:	e000ed04 	.word	0xe000ed04

00006fc8 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    6fc8:	4a06      	ldr	r2, [pc, #24]	; (6fe4 <z_arm_clear_arm_mpu_config+0x1c>)
    6fca:	6811      	ldr	r1, [r2, #0]

	for (i = 0; i < num_regions; i++) {
    6fcc:	2300      	movs	r3, #0
	int num_regions =
    6fce:	f3c1 2107 	ubfx	r1, r1, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    6fd2:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    6fd4:	428b      	cmp	r3, r1
    6fd6:	d100      	bne.n	6fda <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
    6fd8:	4770      	bx	lr
  MPU->RNR = rnr;
    6fda:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    6fdc:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
    6fde:	3301      	adds	r3, #1
    6fe0:	e7f8      	b.n	6fd4 <z_arm_clear_arm_mpu_config+0xc>
    6fe2:	bf00      	nop
    6fe4:	e000ed90 	.word	0xe000ed90

00006fe8 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    6fe8:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    6fea:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    6fec:	2300      	movs	r3, #0
    6fee:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    6ff2:	f7ff ffe9 	bl	6fc8 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    6ff6:	4b14      	ldr	r3, [pc, #80]	; (7048 <z_arm_init_arch_hw_at_boot+0x60>)
    6ff8:	f04f 32ff 	mov.w	r2, #4294967295
    6ffc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    7000:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    7004:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    7008:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    700c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    7010:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    7014:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    7018:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    701c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    7020:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    7024:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    7028:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    702c:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    7030:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    7034:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    7038:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    703c:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    703e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7042:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    7046:	bd08      	pop	{r3, pc}
    7048:	e000e100 	.word	0xe000e100

0000704c <z_arm_interrupt_init>:
    704c:	4804      	ldr	r0, [pc, #16]	; (7060 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    704e:	2300      	movs	r3, #0
    7050:	2120      	movs	r1, #32
    7052:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    7054:	3301      	adds	r3, #1
    7056:	2b30      	cmp	r3, #48	; 0x30
    7058:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    705c:	d1f9      	bne.n	7052 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    705e:	4770      	bx	lr
    7060:	e000e100 	.word	0xe000e100

00007064 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    7064:	4b06      	ldr	r3, [pc, #24]	; (7080 <z_impl_k_thread_abort+0x1c>)
    7066:	689b      	ldr	r3, [r3, #8]
    7068:	4283      	cmp	r3, r0
    706a:	d107      	bne.n	707c <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    706c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    7070:	b123      	cbz	r3, 707c <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    7072:	4a04      	ldr	r2, [pc, #16]	; (7084 <z_impl_k_thread_abort+0x20>)
    7074:	6853      	ldr	r3, [r2, #4]
    7076:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    707a:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    707c:	f004 b916 	b.w	b2ac <z_thread_abort>
    7080:	20000fcc 	.word	0x20000fcc
    7084:	e000ed00 	.word	0xe000ed00

00007088 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    7088:	4b02      	ldr	r3, [pc, #8]	; (7094 <z_arm_configure_static_mpu_regions+0xc>)
    708a:	4a03      	ldr	r2, [pc, #12]	; (7098 <z_arm_configure_static_mpu_regions+0x10>)
    708c:	4803      	ldr	r0, [pc, #12]	; (709c <z_arm_configure_static_mpu_regions+0x14>)
    708e:	2101      	movs	r1, #1
    7090:	f000 b884 	b.w	719c <arm_core_mpu_configure_static_mpu_regions>
    7094:	20040000 	.word	0x20040000
    7098:	20000000 	.word	0x20000000
    709c:	0001ce44 	.word	0x0001ce44

000070a0 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    70a0:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    70a2:	4b05      	ldr	r3, [pc, #20]	; (70b8 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    70a4:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    70a6:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    70a8:	4a04      	ldr	r2, [pc, #16]	; (70bc <z_arm_configure_dynamic_mpu_regions+0x1c>)
    70aa:	2120      	movs	r1, #32
    70ac:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    70b0:	4618      	mov	r0, r3
    70b2:	2101      	movs	r1, #1
    70b4:	f000 b87c 	b.w	71b0 <arm_core_mpu_configure_dynamic_mpu_regions>
    70b8:	20000ca8 	.word	0x20000ca8
    70bc:	150b0000 	.word	0x150b0000

000070c0 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    70c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
    70c2:	4f28      	ldr	r7, [pc, #160]	; (7164 <mpu_configure_regions+0xa4>)
    70c4:	460e      	mov	r6, r1
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    70c6:	2100      	movs	r1, #0
    70c8:	42b1      	cmp	r1, r6
    70ca:	da14      	bge.n	70f6 <mpu_configure_regions+0x36>
		if (regions[i].size == 0U) {
    70cc:	6844      	ldr	r4, [r0, #4]
    70ce:	2c00      	cmp	r4, #0
    70d0:	d045      	beq.n	715e <mpu_configure_regions+0x9e>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    70d2:	b1c3      	cbz	r3, 7106 <mpu_configure_regions+0x46>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    70d4:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    70d8:	ea14 0f0c 	tst.w	r4, ip
    70dc:	d00d      	beq.n	70fa <mpu_configure_regions+0x3a>
    70de:	4a22      	ldr	r2, [pc, #136]	; (7168 <mpu_configure_regions+0xa8>)
    70e0:	4b22      	ldr	r3, [pc, #136]	; (716c <mpu_configure_regions+0xac>)
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    70e2:	4823      	ldr	r0, [pc, #140]	; (7170 <mpu_configure_regions+0xb0>)
    70e4:	1ad2      	subs	r2, r2, r3
    70e6:	08d2      	lsrs	r2, r2, #3
    70e8:	0192      	lsls	r2, r2, #6
    70ea:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    70ee:	f013 fd3f 	bl	1ab70 <log_1>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    70f2:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    70f6:	4610      	mov	r0, r2
    70f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
    70fa:	2c1f      	cmp	r4, #31
    70fc:	d9ef      	bls.n	70de <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
    70fe:	6805      	ldr	r5, [r0, #0]
		&&
    7100:	ea1c 0f05 	tst.w	ip, r5
    7104:	d1eb      	bne.n	70de <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    7106:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    7108:	b2d5      	uxtb	r5, r2
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    710a:	f8d0 c008 	ldr.w	ip, [r0, #8]
	region_conf.base = new_region->start;
    710e:	6802      	ldr	r2, [r0, #0]
    7110:	d916      	bls.n	7140 <mpu_configure_regions+0x80>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    7112:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    7116:	d815      	bhi.n	7144 <mpu_configure_regions+0x84>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    7118:	3c01      	subs	r4, #1
    711a:	fab4 f484 	clz	r4, r4
    711e:	f1c4 041f 	rsb	r4, r4, #31
    7122:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    7124:	2d07      	cmp	r5, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    7126:	ea4c 0404 	orr.w	r4, ip, r4
    712a:	d90d      	bls.n	7148 <mpu_configure_regions+0x88>
    712c:	4a0e      	ldr	r2, [pc, #56]	; (7168 <mpu_configure_regions+0xa8>)
    712e:	4b0f      	ldr	r3, [pc, #60]	; (716c <mpu_configure_regions+0xac>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    7130:	4810      	ldr	r0, [pc, #64]	; (7174 <mpu_configure_regions+0xb4>)
    7132:	1ad2      	subs	r2, r2, r3
    7134:	08d2      	lsrs	r2, r2, #3
    7136:	0192      	lsls	r2, r2, #6
    7138:	f042 0201 	orr.w	r2, r2, #1
    713c:	4629      	mov	r1, r5
    713e:	e7d6      	b.n	70ee <mpu_configure_regions+0x2e>
		return REGION_32B;
    7140:	2408      	movs	r4, #8
    7142:	e7ef      	b.n	7124 <mpu_configure_regions+0x64>
		return REGION_4G;
    7144:	243e      	movs	r4, #62	; 0x3e
    7146:	e7ed      	b.n	7124 <mpu_configure_regions+0x64>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    7148:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
    714c:	432a      	orrs	r2, r5
    714e:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    7152:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
    7156:	60bd      	str	r5, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    7158:	60fa      	str	r2, [r7, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    715a:	613c      	str	r4, [r7, #16]
		reg_index++;
    715c:	1c6a      	adds	r2, r5, #1
	for (i = 0; i < regions_num; i++) {
    715e:	3101      	adds	r1, #1
    7160:	300c      	adds	r0, #12
    7162:	e7b1      	b.n	70c8 <mpu_configure_regions+0x8>
    7164:	e000ed90 	.word	0xe000ed90
    7168:	0001c8b8 	.word	0x0001c8b8
    716c:	0001c8a0 	.word	0x0001c8a0
    7170:	0001dccb 	.word	0x0001dccb
    7174:	0001dcee 	.word	0x0001dcee

00007178 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    7178:	4b03      	ldr	r3, [pc, #12]	; (7188 <arm_core_mpu_enable+0x10>)
    717a:	2205      	movs	r2, #5
    717c:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    717e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7182:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    7186:	4770      	bx	lr
    7188:	e000ed90 	.word	0xe000ed90

0000718c <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    718c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    7190:	4b01      	ldr	r3, [pc, #4]	; (7198 <arm_core_mpu_disable+0xc>)
    7192:	2200      	movs	r2, #0
    7194:	605a      	str	r2, [r3, #4]
}
    7196:	4770      	bx	lr
    7198:	e000ed90 	.word	0xe000ed90

0000719c <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    719c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    719e:	4c03      	ldr	r4, [pc, #12]	; (71ac <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    71a0:	2301      	movs	r3, #1
    71a2:	7822      	ldrb	r2, [r4, #0]
    71a4:	f7ff ff8c 	bl	70c0 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    71a8:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    71aa:	bd10      	pop	{r4, pc}
    71ac:	2000154b 	.word	0x2000154b

000071b0 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    71b0:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    71b2:	4a08      	ldr	r2, [pc, #32]	; (71d4 <arm_core_mpu_configure_dynamic_mpu_regions+0x24>)
    71b4:	2300      	movs	r3, #0
    71b6:	7812      	ldrb	r2, [r2, #0]
    71b8:	f7ff ff82 	bl	70c0 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    71bc:	f110 0f16 	cmn.w	r0, #22
    71c0:	d003      	beq.n	71ca <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
  MPU->RNR = rnr;
    71c2:	4b05      	ldr	r3, [pc, #20]	; (71d8 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
  MPU->RASR = 0U;
    71c4:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    71c6:	2807      	cmp	r0, #7
    71c8:	dd00      	ble.n	71cc <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    71ca:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    71cc:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
    71ce:	611a      	str	r2, [r3, #16]
    71d0:	3001      	adds	r0, #1
    71d2:	e7f8      	b.n	71c6 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    71d4:	2000154b 	.word	0x2000154b
    71d8:	e000ed90 	.word	0xe000ed90

000071dc <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    71dc:	4913      	ldr	r1, [pc, #76]	; (722c <z_arm_mpu_init+0x50>)
    71de:	6808      	ldr	r0, [r1, #0]
    71e0:	2808      	cmp	r0, #8
{
    71e2:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    71e4:	d81e      	bhi.n	7224 <z_arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    71e6:	f7ff ffd1 	bl	718c <arm_core_mpu_disable>
	MPU->RNR = index;
    71ea:	4c11      	ldr	r4, [pc, #68]	; (7230 <z_arm_mpu_init+0x54>)
    71ec:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    71ee:	2200      	movs	r2, #0
    71f0:	4290      	cmp	r0, r2
    71f2:	f101 010c 	add.w	r1, r1, #12
    71f6:	d105      	bne.n	7204 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    71f8:	4b0e      	ldr	r3, [pc, #56]	; (7234 <z_arm_mpu_init+0x58>)
    71fa:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    71fc:	f7ff ffbc 	bl	7178 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    7200:	2000      	movs	r0, #0
}
    7202:	bd10      	pop	{r4, pc}
    7204:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    7206:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    720a:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    720e:	4313      	orrs	r3, r2
    7210:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    7214:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    7216:	f851 3c04 	ldr.w	r3, [r1, #-4]
    721a:	f043 0301 	orr.w	r3, r3, #1
    721e:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    7220:	3201      	adds	r2, #1
    7222:	e7e5      	b.n	71f0 <z_arm_mpu_init+0x14>
		return -1;
    7224:	f04f 30ff 	mov.w	r0, #4294967295
    7228:	e7eb      	b.n	7202 <z_arm_mpu_init+0x26>
    722a:	bf00      	nop
    722c:	0001ce50 	.word	0x0001ce50
    7230:	e000ed90 	.word	0xe000ed90
    7234:	2000154b 	.word	0x2000154b

00007238 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    7238:	4b01      	ldr	r3, [pc, #4]	; (7240 <__stdout_hook_install+0x8>)
    723a:	6018      	str	r0, [r3, #0]
}
    723c:	4770      	bx	lr
    723e:	bf00      	nop
    7240:	20000030 	.word	0x20000030

00007244 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/z_zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
    7244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7246:	4f0a      	ldr	r7, [pc, #40]	; (7270 <z_impl_zephyr_write_stdout+0x2c>)
    7248:	460d      	mov	r5, r1
    724a:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
    724c:	f1c0 0401 	rsb	r4, r0, #1
    7250:	19a3      	adds	r3, r4, r6
    7252:	429d      	cmp	r5, r3
    7254:	dc01      	bgt.n	725a <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
    7256:	4628      	mov	r0, r5
    7258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
    725a:	7873      	ldrb	r3, [r6, #1]
    725c:	2b0a      	cmp	r3, #10
    725e:	d102      	bne.n	7266 <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
    7260:	683b      	ldr	r3, [r7, #0]
    7262:	200d      	movs	r0, #13
    7264:	4798      	blx	r3
		_stdout_hook(*(buf + i));
    7266:	683b      	ldr	r3, [r7, #0]
    7268:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    726c:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
    726e:	e7ef      	b.n	7250 <z_impl_zephyr_write_stdout+0xc>
    7270:	20000030 	.word	0x20000030

00007274 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
    7274:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
    7276:	4c07      	ldr	r4, [pc, #28]	; (7294 <_sbrk+0x20>)
    7278:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    727a:	18c2      	adds	r2, r0, r3
    727c:	4806      	ldr	r0, [pc, #24]	; (7298 <_sbrk+0x24>)
    727e:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
    7282:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    7286:	428a      	cmp	r2, r1
	ptr = ((char *)HEAP_BASE) + heap_sz;
    7288:	bf3a      	itte	cc
    728a:	18c0      	addcc	r0, r0, r3
		heap_sz += count;
    728c:	6022      	strcc	r2, [r4, #0]
		ret = ptr;
	} else {
		ret = (void *)-1;
    728e:	f04f 30ff 	movcs.w	r0, #4294967295
	}

	return ret;
}
    7292:	bd10      	pop	{r4, pc}
    7294:	20000cb4 	.word	0x20000cb4
    7298:	20003dc0 	.word	0x20003dc0

0000729c <__malloc_lock>:
    729c:	4803      	ldr	r0, [pc, #12]	; (72ac <__malloc_lock+0x10>)
    729e:	f04f 32ff 	mov.w	r2, #4294967295
    72a2:	f04f 33ff 	mov.w	r3, #4294967295
    72a6:	f003 baad 	b.w	a804 <z_impl_k_mutex_lock>
    72aa:	bf00      	nop
    72ac:	20000034 	.word	0x20000034

000072b0 <__malloc_unlock>:
	return z_impl_k_mutex_unlock(mutex);
    72b0:	4801      	ldr	r0, [pc, #4]	; (72b8 <__malloc_unlock+0x8>)
    72b2:	f003 bb25 	b.w	a900 <z_impl_k_mutex_unlock>
    72b6:	bf00      	nop
    72b8:	20000034 	.word	0x20000034

000072bc <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
    72bc:	b508      	push	{r3, lr}
	return z_impl_zephyr_write_stdout(buf, nbytes);
    72be:	211d      	movs	r1, #29
    72c0:	4804      	ldr	r0, [pc, #16]	; (72d4 <__chk_fail+0x18>)
    72c2:	f7ff ffbf 	bl	7244 <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
    72c6:	4040      	eors	r0, r0
    72c8:	f380 8811 	msr	BASEPRI, r0
    72cc:	f04f 0003 	mov.w	r0, #3
    72d0:	df02      	svc	2
	CODE_UNREACHABLE;
    72d2:	bf00      	nop
    72d4:	0001dd14 	.word	0x0001dd14

000072d8 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    72d8:	f04f 0320 	mov.w	r3, #32
    72dc:	f3ef 8211 	mrs	r2, BASEPRI
    72e0:	f383 8811 	msr	BASEPRI, r3
    72e4:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    72e8:	4906      	ldr	r1, [pc, #24]	; (7304 <nordicsemi_nrf52_init+0x2c>)
    72ea:	2301      	movs	r3, #1
    72ec:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    72f0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    72f4:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    72f8:	f382 8811 	msr	BASEPRI, r2
    72fc:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    7300:	2000      	movs	r0, #0
    7302:	4770      	bx	lr
    7304:	4001e000 	.word	0x4001e000

00007308 <sys_arch_reboot>:
    *p_gpregret = val;
    7308:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    730c:	b2c0      	uxtb	r0, r0
    730e:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    7312:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    7316:	4905      	ldr	r1, [pc, #20]	; (732c <sys_arch_reboot+0x24>)
    7318:	4b05      	ldr	r3, [pc, #20]	; (7330 <sys_arch_reboot+0x28>)
    731a:	68ca      	ldr	r2, [r1, #12]
    731c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    7320:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    7322:	60cb      	str	r3, [r1, #12]
    7324:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    7328:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    732a:	e7fd      	b.n	7328 <sys_arch_reboot+0x20>
    732c:	e000ed00 	.word	0xe000ed00
    7330:	05fa0004 	.word	0x05fa0004

00007334 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    7334:	b120      	cbz	r0, 7340 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    7336:	4b03      	ldr	r3, [pc, #12]	; (7344 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    7338:	0180      	lsls	r0, r0, #6
    733a:	f043 0301 	orr.w	r3, r3, #1
    733e:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    7340:	4770      	bx	lr
    7342:	bf00      	nop
    7344:	0001c970 	.word	0x0001c970

00007348 <board_nrf52840dongle_nrf52840_init>:

#if NRF_POWER_HAS_MAINREGSTATUS
NRF_STATIC_INLINE
nrf_power_mainregstatus_t nrf_power_mainregstatus_get(NRF_POWER_Type const * p_reg)
{
    return (nrf_power_mainregstatus_t)(((p_reg->MAINREGSTATUS) &
    7348:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    734c:	f8d3 3640 	ldr.w	r3, [r3, #1600]	; 0x640
	/* if the nrf52840dongle_nrf52840 board is powered from USB
	 * (high voltage mode), GPIO output voltage is set to 1.8 volts by
	 * default and that is not enough to turn the green and blue LEDs on.
	 * Increase GPIO voltage to 3.0 volts.
	 */
	if ((nrf_power_mainregstatus_get(NRF_POWER) ==
    7350:	07db      	lsls	r3, r3, #31
    7352:	d52e      	bpl.n	73b2 <board_nrf52840dongle_nrf52840_init+0x6a>
	     NRF_POWER_MAINREGSTATUS_HIGH) &&
	    ((NRF_UICR->REGOUT0 & UICR_REGOUT0_VOUT_Msk) ==
    7354:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    7358:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
    735c:	f003 0307 	and.w	r3, r3, #7
	     NRF_POWER_MAINREGSTATUS_HIGH) &&
    7360:	2b07      	cmp	r3, #7
    7362:	d126      	bne.n	73b2 <board_nrf52840dongle_nrf52840_init+0x6a>
	     (UICR_REGOUT0_VOUT_DEFAULT << UICR_REGOUT0_VOUT_Pos))) {

		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    7364:	4b14      	ldr	r3, [pc, #80]	; (73b8 <board_nrf52840dongle_nrf52840_init+0x70>)
    7366:	2201      	movs	r2, #1
    7368:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
    736c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    7370:	2a00      	cmp	r2, #0
    7372:	d0fb      	beq.n	736c <board_nrf52840dongle_nrf52840_init+0x24>
			;
		}

		NRF_UICR->REGOUT0 =
		    (NRF_UICR->REGOUT0 & ~((uint32_t)UICR_REGOUT0_VOUT_Msk)) |
    7374:	f04f 2110 	mov.w	r1, #268439552	; 0x10001000
    7378:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
    737c:	f022 0207 	bic.w	r2, r2, #7
    7380:	f042 0204 	orr.w	r2, r2, #4
		NRF_UICR->REGOUT0 =
    7384:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
		    (UICR_REGOUT0_VOUT_3V0 << UICR_REGOUT0_VOUT_Pos);

		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    7388:	2200      	movs	r2, #0
    738a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
    738e:	4a0a      	ldr	r2, [pc, #40]	; (73b8 <board_nrf52840dongle_nrf52840_init+0x70>)
    7390:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    7394:	2b00      	cmp	r3, #0
    7396:	d0fb      	beq.n	7390 <board_nrf52840dongle_nrf52840_init+0x48>
    7398:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    739c:	4907      	ldr	r1, [pc, #28]	; (73bc <board_nrf52840dongle_nrf52840_init+0x74>)
    739e:	4b08      	ldr	r3, [pc, #32]	; (73c0 <board_nrf52840dongle_nrf52840_init+0x78>)
    73a0:	68ca      	ldr	r2, [r1, #12]
    73a2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    73a6:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    73a8:	60cb      	str	r3, [r1, #12]
    73aa:	f3bf 8f4f 	dsb	sy
    __NOP();
    73ae:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    73b0:	e7fd      	b.n	73ae <board_nrf52840dongle_nrf52840_init+0x66>
		/* a reset is required for changes to take effect */
		NVIC_SystemReset();
	}

	return 0;
}
    73b2:	2000      	movs	r0, #0
    73b4:	4770      	bx	lr
    73b6:	bf00      	nop
    73b8:	4001e000 	.word	0x4001e000
    73bc:	e000ed00 	.word	0xe000ed00
    73c0:	05fa0004 	.word	0x05fa0004

000073c4 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    73c4:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    73c6:	4b09      	ldr	r3, [pc, #36]	; (73ec <gpio_nrfx_init+0x28>)
    73c8:	781a      	ldrb	r2, [r3, #0]
    73ca:	b96a      	cbnz	r2, 73e8 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    73cc:	2101      	movs	r1, #1
    73ce:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    73d0:	2006      	movs	r0, #6
    73d2:	2105      	movs	r1, #5
    73d4:	f7ff fa94 	bl	6900 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
    73d8:	2006      	movs	r0, #6
    73da:	f7ff fa73 	bl	68c4 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    73de:	4b04      	ldr	r3, [pc, #16]	; (73f0 <gpio_nrfx_init+0x2c>)
    73e0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    73e4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    73e8:	2000      	movs	r0, #0
    73ea:	bd08      	pop	{r3, pc}
    73ec:	2000154c 	.word	0x2000154c
    73f0:	40006000 	.word	0x40006000

000073f4 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    73f4:	4b2b      	ldr	r3, [pc, #172]	; (74a4 <gpio_nrfx_config+0xb0>)
{
    73f6:	b5f0      	push	{r4, r5, r6, r7, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    73f8:	6844      	ldr	r4, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    73fa:	482b      	ldr	r0, [pc, #172]	; (74a8 <gpio_nrfx_config+0xb4>)
    73fc:	4013      	ands	r3, r2
    73fe:	4283      	cmp	r3, r0
    7400:	d041      	beq.n	7486 <gpio_nrfx_config+0x92>
    7402:	d80d      	bhi.n	7420 <gpio_nrfx_config+0x2c>
    7404:	2b06      	cmp	r3, #6
    7406:	d015      	beq.n	7434 <gpio_nrfx_config+0x40>
    7408:	d805      	bhi.n	7416 <gpio_nrfx_config+0x22>
    740a:	b19b      	cbz	r3, 7434 <gpio_nrfx_config+0x40>
    740c:	2b02      	cmp	r3, #2
    740e:	d03c      	beq.n	748a <gpio_nrfx_config+0x96>
    7410:	f06f 0015 	mvn.w	r0, #21
    7414:	e036      	b.n	7484 <gpio_nrfx_config+0x90>
    7416:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    741a:	d1f9      	bne.n	7410 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
    741c:	2301      	movs	r3, #1
    741e:	e009      	b.n	7434 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    7420:	4822      	ldr	r0, [pc, #136]	; (74ac <gpio_nrfx_config+0xb8>)
    7422:	4283      	cmp	r3, r0
    7424:	d033      	beq.n	748e <gpio_nrfx_config+0x9a>
    7426:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    742a:	d032      	beq.n	7492 <gpio_nrfx_config+0x9e>
    742c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    7430:	d1ee      	bne.n	7410 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
    7432:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
    7434:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
    7436:	bf54      	ite	pl
    7438:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
    743c:	2603      	movmi	r6, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    743e:	f482 7580 	eor.w	r5, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
    7442:	0597      	lsls	r7, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
    7444:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    7448:	f3c5 2500 	ubfx	r5, r5, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
    744c:	d507      	bpl.n	745e <gpio_nrfx_config+0x6a>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    744e:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7452:	6867      	ldr	r7, [r4, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    7454:	d01f      	beq.n	7496 <gpio_nrfx_config+0xa2>
			nrf_gpio_port_out_set(reg, BIT(pin));
    7456:	2201      	movs	r2, #1
    7458:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    745a:	f8c7 2508 	str.w	r2, [r7, #1288]	; 0x508
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    745e:	7a22      	ldrb	r2, [r4, #8]
        case 1: return NRF_P1;
    7460:	4c13      	ldr	r4, [pc, #76]	; (74b0 <gpio_nrfx_config+0xbc>)
    7462:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    7464:	f001 011f 	and.w	r1, r1, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    7468:	ea40 0245 	orr.w	r2, r0, r5, lsl #1
        case 1: return NRF_P1;
    746c:	bf18      	it	ne
    746e:	f04f 44a0 	movne.w	r4, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    7472:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    7476:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    747a:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    747e:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
	return 0;
    7482:	2000      	movs	r0, #0
}
    7484:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
    7486:	2307      	movs	r3, #7
    7488:	e7d4      	b.n	7434 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
    748a:	2304      	movs	r3, #4
    748c:	e7d2      	b.n	7434 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
    748e:	2305      	movs	r3, #5
    7490:	e7d0      	b.n	7434 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
    7492:	2303      	movs	r3, #3
    7494:	e7ce      	b.n	7434 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    7496:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
    7498:	bf42      	ittt	mi
    749a:	2201      	movmi	r2, #1
    749c:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
    749e:	f8c7 250c 	strmi.w	r2, [r7, #1292]	; 0x50c
}
    74a2:	e7dc      	b.n	745e <gpio_nrfx_config+0x6a>
    74a4:	00f00006 	.word	0x00f00006
    74a8:	00100006 	.word	0x00100006
    74ac:	00400002 	.word	0x00400002
    74b0:	50000300 	.word	0x50000300

000074b4 <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
    74b4:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    74b8:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
    74ba:	4b08      	ldr	r3, [pc, #32]	; (74dc <nrf_gpio_cfg_sense_set+0x28>)
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    74bc:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
    74be:	bf18      	it	ne
    74c0:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    74c4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    74c8:	f8d3 2700 	ldr.w	r2, [r3, #1792]	; 0x700
    74cc:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    74d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    74d4:	f8c3 2700 	str.w	r2, [r3, #1792]	; 0x700
}
    74d8:	4770      	bx	lr
    74da:	bf00      	nop
    74dc:	50000300 	.word	0x50000300

000074e0 <check_level_trigger_pins>:
{
    74e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct gpio_nrfx_data *data = get_port_data(port);
    74e4:	6903      	ldr	r3, [r0, #16]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
    74e6:	f8d0 a004 	ldr.w	sl, [r0, #4]
	uint32_t out = data->pin_int_en;
    74ea:	68de      	ldr	r6, [r3, #12]
        case 1: return NRF_P1;
    74ec:	f8df b07c 	ldr.w	fp, [pc, #124]	; 756c <check_level_trigger_pins+0x8c>
{
    74f0:	4688      	mov	r8, r1
	out &= ~data->trig_edge & ~data->double_edge;
    74f2:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
    74f6:	430a      	orrs	r2, r1
    74f8:	ea26 0602 	bic.w	r6, r6, r2
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
    74fc:	f8da 2004 	ldr.w	r2, [sl, #4]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    7500:	691b      	ldr	r3, [r3, #16]
    return p_reg->IN;
    7502:	f8d2 5510 	ldr.w	r5, [r2, #1296]	; 0x510
    7506:	405d      	eors	r5, r3
	uint32_t out = pin_states & level_pins;
    7508:	ea26 0505 	bic.w	r5, r6, r5
	uint32_t check_pins = level_pins;
    750c:	4637      	mov	r7, r6
	uint32_t bit = 1U << pin;
    750e:	2401      	movs	r4, #1
	uint32_t pin = 0U;
    7510:	f04f 0900 	mov.w	r9, #0
	while (check_pins) {
    7514:	b917      	cbnz	r7, 751c <check_level_trigger_pins+0x3c>
}
    7516:	4628      	mov	r0, r5
    7518:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (check_pins & bit) {
    751c:	423c      	tst	r4, r7
    751e:	d021      	beq.n	7564 <check_level_trigger_pins+0x84>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    7520:	f89a 3008 	ldrb.w	r3, [sl, #8]
    7524:	f009 001f 	and.w	r0, r9, #31
			if (!(level_pins & bit)) {
    7528:	4234      	tst	r4, r6
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    752a:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
			if (!(level_pins & bit)) {
    752e:	d114      	bne.n	755a <check_level_trigger_pins+0x7a>
    return pin_number >> 5;
    7530:	0942      	lsrs	r2, r0, #5
        case 1: return NRF_P1;
    7532:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    7534:	f000 031f 	and.w	r3, r0, #31
        case 1: return NRF_P1;
    7538:	bf14      	ite	ne
    753a:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    753e:	465a      	moveq	r2, fp
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    7540:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    7544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    7548:	f3c3 4301 	ubfx	r3, r3, #16, #2
				if (high) {
    754c:	2b02      	cmp	r3, #2
					*sense_levels |= bit;
    754e:	bf02      	ittt	eq
    7550:	f8d8 3000 	ldreq.w	r3, [r8]
    7554:	4323      	orreq	r3, r4
    7556:	f8c8 3000 	streq.w	r3, [r8]
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    755a:	2100      	movs	r1, #0
    755c:	f7ff ffaa 	bl	74b4 <nrf_gpio_cfg_sense_set>
			check_pins &= ~bit;
    7560:	ea27 0704 	bic.w	r7, r7, r4
		++pin;
    7564:	f109 0901 	add.w	r9, r9, #1
		bit <<= 1;
    7568:	0064      	lsls	r4, r4, #1
    756a:	e7d3      	b.n	7514 <check_level_trigger_pins+0x34>
    756c:	50000300 	.word	0x50000300

00007570 <gpio_nrfx_pin_interrupt_configure>:
{
    7570:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7572:	460e      	mov	r6, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    7574:	6841      	ldr	r1, [r0, #4]
	struct gpio_nrfx_data *data = get_port_data(port);
    7576:	6907      	ldr	r7, [r0, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    7578:	7a09      	ldrb	r1, [r1, #8]
    757a:	f006 051f 	and.w	r5, r6, #31
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
    757e:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    7582:	ea45 1541 	orr.w	r5, r5, r1, lsl #5
    7586:	d110      	bne.n	75aa <gpio_nrfx_pin_interrupt_configure+0x3a>
    return pin_number >> 5;
    7588:	0968      	lsrs	r0, r5, #5
        case 1: return NRF_P1;
    758a:	2801      	cmp	r0, #1
    *p_pin = pin_number & 0x1F;
    758c:	f005 011f 	and.w	r1, r5, #31
        case 1: return NRF_P1;
    7590:	485d      	ldr	r0, [pc, #372]	; (7708 <gpio_nrfx_pin_interrupt_configure+0x198>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    7592:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
        case 1: return NRF_P1;
    7596:	bf18      	it	ne
    7598:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    759c:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    75a0:	07c8      	lsls	r0, r1, #31
    75a2:	d507      	bpl.n	75b4 <gpio_nrfx_pin_interrupt_configure+0x44>
		return -ENOTSUP;
    75a4:	f06f 0085 	mvn.w	r0, #133	; 0x85
    75a8:	e093      	b.n	76d2 <gpio_nrfx_pin_interrupt_configure+0x162>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    75aa:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    75ae:	68f9      	ldr	r1, [r7, #12]
    75b0:	f000 8091 	beq.w	76d6 <gpio_nrfx_pin_interrupt_configure+0x166>
    75b4:	68f8      	ldr	r0, [r7, #12]
    75b6:	2101      	movs	r1, #1
    75b8:	40b1      	lsls	r1, r6
    75ba:	4301      	orrs	r1, r0
    75bc:	6978      	ldr	r0, [r7, #20]
    75be:	60f9      	str	r1, [r7, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    75c0:	2101      	movs	r1, #1
    75c2:	40b1      	lsls	r1, r6
    75c4:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    75c8:	69ba      	ldr	r2, [r7, #24]
    75ca:	bf0c      	ite	eq
    75cc:	4308      	orreq	r0, r1
    75ce:	4388      	bicne	r0, r1
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    75d0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    75d4:	bf0c      	ite	eq
    75d6:	430a      	orreq	r2, r1
    75d8:	438a      	bicne	r2, r1
    75da:	61ba      	str	r2, [r7, #24]
    75dc:	693a      	ldr	r2, [r7, #16]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    75de:	6178      	str	r0, [r7, #20]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    75e0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    75e4:	bf0c      	ite	eq
    75e6:	4311      	orreq	r1, r2
    75e8:	ea22 0101 	bicne.w	r1, r2, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    75ec:	4a47      	ldr	r2, [pc, #284]	; (770c <gpio_nrfx_pin_interrupt_configure+0x19c>)
    75ee:	6139      	str	r1, [r7, #16]
    75f0:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    75f4:	2000      	movs	r0, #0
    75f6:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    75f8:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    75fc:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    7600:	f3c1 2105 	ubfx	r1, r1, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    7604:	428d      	cmp	r5, r1
    7606:	d16b      	bne.n	76e0 <gpio_nrfx_pin_interrupt_configure+0x170>
		    && (intenset & BIT(i))) {
    7608:	fa23 f100 	lsr.w	r1, r3, r0
    760c:	07c9      	lsls	r1, r1, #31
    760e:	d567      	bpl.n	76e0 <gpio_nrfx_pin_interrupt_configure+0x170>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    7610:	0083      	lsls	r3, r0, #2
    7612:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    7616:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    761a:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    761e:	f021 0101 	bic.w	r1, r1, #1
    7622:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    7626:	2301      	movs	r3, #1
    7628:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
    762a:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
    762e:	b2c0      	uxtb	r0, r0
    7630:	f002 fc8a 	bl	9f48 <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    7634:	4628      	mov	r0, r5
    7636:	2100      	movs	r1, #0
    7638:	f7ff ff3c 	bl	74b4 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
    763c:	68f8      	ldr	r0, [r7, #12]
    763e:	40f0      	lsrs	r0, r6
    7640:	f010 0001 	ands.w	r0, r0, #1
    7644:	d045      	beq.n	76d2 <gpio_nrfx_pin_interrupt_configure+0x162>
		if (data->trig_edge & BIT(pin)) {
    7646:	6978      	ldr	r0, [r7, #20]
    7648:	40f0      	lsrs	r0, r6
    764a:	f010 0401 	ands.w	r4, r0, #1
    764e:	d04e      	beq.n	76ee <gpio_nrfx_pin_interrupt_configure+0x17e>
				if (data->double_edge & BIT(pin)) {
    7650:	69bb      	ldr	r3, [r7, #24]
    7652:	40f3      	lsrs	r3, r6
    7654:	07db      	lsls	r3, r3, #31
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
    7656:	bf5f      	itttt	pl
    7658:	6939      	ldrpl	r1, [r7, #16]
    765a:	fa21 f606 	lsrpl.w	r6, r1, r6
    765e:	f006 0601 	andpl.w	r6, r6, #1
    7662:	f1c6 0602 	rsbpl	r6, r6, #2
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    7666:	f10d 0007 	add.w	r0, sp, #7
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
    766a:	bf54      	ite	pl
    766c:	b2f6      	uxtbpl	r6, r6
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
    766e:	2603      	movmi	r6, #3
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    7670:	f002 fc8c 	bl	9f8c <nrfx_gpiote_channel_alloc>
    7674:	4b26      	ldr	r3, [pc, #152]	; (7710 <gpio_nrfx_pin_interrupt_configure+0x1a0>)
    7676:	4298      	cmp	r0, r3
    7678:	d136      	bne.n	76e8 <gpio_nrfx_pin_interrupt_configure+0x178>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
    767a:	f89d 1007 	ldrb.w	r1, [sp, #7]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    767e:	008b      	lsls	r3, r1, #2
    7680:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    7684:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    7688:	022d      	lsls	r5, r5, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    768a:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    768e:	f422 324f 	bic.w	r2, r2, #211968	; 0x33c00
    7692:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    7696:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    769a:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    769e:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
    76a2:	4315      	orrs	r5, r2
    return ((uint32_t)p_reg + event);
    76a4:	008a      	lsls	r2, r1, #2
    76a6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    76aa:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    76ae:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    76b2:	2000      	movs	r0, #0
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    76b4:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    76b8:	6010      	str	r0, [r2, #0]
    76ba:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    76bc:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    76c0:	f042 0201 	orr.w	r2, r2, #1
    76c4:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_reg->INTENSET = mask;
    76c8:	4a10      	ldr	r2, [pc, #64]	; (770c <gpio_nrfx_pin_interrupt_configure+0x19c>)
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    76ca:	2301      	movs	r3, #1
    76cc:	408b      	lsls	r3, r1
    76ce:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    76d2:	b003      	add	sp, #12
    76d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    76d6:	2001      	movs	r0, #1
    76d8:	40b0      	lsls	r0, r6
    76da:	ea21 0100 	bic.w	r1, r1, r0
    76de:	e76d      	b.n	75bc <gpio_nrfx_pin_interrupt_configure+0x4c>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    76e0:	3001      	adds	r0, #1
    76e2:	2808      	cmp	r0, #8
    76e4:	d188      	bne.n	75f8 <gpio_nrfx_pin_interrupt_configure+0x88>
    76e6:	e7a5      	b.n	7634 <gpio_nrfx_pin_interrupt_configure+0xc4>
		return -ENODEV;
    76e8:	f06f 0012 	mvn.w	r0, #18
    76ec:	e7f1      	b.n	76d2 <gpio_nrfx_pin_interrupt_configure+0x162>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    76ee:	6939      	ldr	r1, [r7, #16]
    76f0:	40f1      	lsrs	r1, r6
    76f2:	f001 0101 	and.w	r1, r1, #1
    76f6:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    76fa:	4628      	mov	r0, r5
    76fc:	b2c9      	uxtb	r1, r1
    76fe:	f7ff fed9 	bl	74b4 <nrf_gpio_cfg_sense_set>
	int res = 0;
    7702:	4620      	mov	r0, r4
    7704:	e7e5      	b.n	76d2 <gpio_nrfx_pin_interrupt_configure+0x162>
    7706:	bf00      	nop
    7708:	50000300 	.word	0x50000300
    770c:	40006000 	.word	0x40006000
    7710:	0bad0000 	.word	0x0bad0000

00007714 <gpiote_event_handler>:
{
    7714:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    7716:	2400      	movs	r4, #0
{
    7718:	b085      	sub	sp, #20
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    771a:	e9cd 4400 	strd	r4, r4, [sp]
	uint32_t sense_levels[GPIO_COUNT] = {0};
    771e:	e9cd 4402 	strd	r4, r4, [sp, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7722:	4e26      	ldr	r6, [pc, #152]	; (77bc <gpiote_event_handler+0xa8>)
    7724:	6835      	ldr	r5, [r6, #0]
	if (port_event) {
    7726:	b15d      	cbz	r5, 7740 <gpiote_event_handler+0x2c>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)),
    7728:	a902      	add	r1, sp, #8
    772a:	4825      	ldr	r0, [pc, #148]	; (77c0 <gpiote_event_handler+0xac>)
    772c:	f7ff fed8 	bl	74e0 <check_level_trigger_pins>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
    7730:	a903      	add	r1, sp, #12
		fired_triggers[0] =
    7732:	9000      	str	r0, [sp, #0]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
    7734:	4823      	ldr	r0, [pc, #140]	; (77c4 <gpiote_event_handler+0xb0>)
    7736:	f7ff fed3 	bl	74e0 <check_level_trigger_pins>
		fired_triggers[1] =
    773a:	9001      	str	r0, [sp, #4]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    773c:	6034      	str	r4, [r6, #0]
    773e:	6833      	ldr	r3, [r6, #0]
    return p_reg->INTENSET & mask;
    7740:	4c21      	ldr	r4, [pc, #132]	; (77c8 <gpiote_event_handler+0xb4>)
{
    7742:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    7744:	2601      	movs	r6, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    7746:	4694      	mov	ip, r2
    return p_reg->INTENSET & mask;
    7748:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
    774c:	fa06 f102 	lsl.w	r1, r6, r2
    7750:	4219      	tst	r1, r3
    7752:	d01b      	beq.n	778c <gpiote_event_handler+0x78>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7754:	0091      	lsls	r1, r2, #2
    7756:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    775a:	f501 41c2 	add.w	r1, r1, #24832	; 0x6100
    775e:	680b      	ldr	r3, [r1, #0]
    7760:	b1a3      	cbz	r3, 778c <gpiote_event_handler+0x78>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    7762:	f502 73a2 	add.w	r3, r2, #324	; 0x144
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    7766:	af04      	add	r7, sp, #16
    7768:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    776c:	f8c1 c000 	str.w	ip, [r1]
    7770:	f3c3 3040 	ubfx	r0, r3, #13, #1
    7774:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    7778:	f3c3 2304 	ubfx	r3, r3, #8, #5
    777c:	f850 7c10 	ldr.w	r7, [r0, #-16]
    7780:	fa06 f303 	lsl.w	r3, r6, r3
    7784:	433b      	orrs	r3, r7
    7786:	f840 3c10 	str.w	r3, [r0, #-16]
    778a:	680b      	ldr	r3, [r1, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    778c:	3201      	adds	r2, #1
    778e:	2a08      	cmp	r2, #8
    7790:	d1da      	bne.n	7748 <gpiote_event_handler+0x34>
	if (fired_triggers[0]) {
    7792:	9a00      	ldr	r2, [sp, #0]
    7794:	b11a      	cbz	r2, 779e <gpiote_event_handler+0x8a>
	gpio_fire_callbacks(list, port, pins);
    7796:	490a      	ldr	r1, [pc, #40]	; (77c0 <gpiote_event_handler+0xac>)
    7798:	480c      	ldr	r0, [pc, #48]	; (77cc <gpiote_event_handler+0xb8>)
    779a:	f013 fe9e 	bl	1b4da <gpio_fire_callbacks>
	if (fired_triggers[1]) {
    779e:	9a01      	ldr	r2, [sp, #4]
    77a0:	b11a      	cbz	r2, 77aa <gpiote_event_handler+0x96>
	gpio_fire_callbacks(list, port, pins);
    77a2:	4908      	ldr	r1, [pc, #32]	; (77c4 <gpiote_event_handler+0xb0>)
    77a4:	480a      	ldr	r0, [pc, #40]	; (77d0 <gpiote_event_handler+0xbc>)
    77a6:	f013 fe98 	bl	1b4da <gpio_fire_callbacks>
	if (port_event) {
    77aa:	b12d      	cbz	r5, 77b8 <gpiote_event_handler+0xa4>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
    77ac:	4804      	ldr	r0, [pc, #16]	; (77c0 <gpiote_event_handler+0xac>)
    77ae:	f013 fefe 	bl	1b5ae <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
    77b2:	4804      	ldr	r0, [pc, #16]	; (77c4 <gpiote_event_handler+0xb0>)
    77b4:	f013 fefb 	bl	1b5ae <cfg_level_pins>
}
    77b8:	b005      	add	sp, #20
    77ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    77bc:	4000617c 	.word	0x4000617c
    77c0:	0001c6c0 	.word	0x0001c6c0
    77c4:	0001c6d8 	.word	0x0001c6d8
    77c8:	40006000 	.word	0x40006000
    77cc:	20000cc4 	.word	0x20000cc4
    77d0:	20000ce0 	.word	0x20000ce0

000077d4 <spi_1_init>:
#ifdef CONFIG_SPI_0_NRF_SPI
SPI_NRFX_SPI_DEVICE(0);
#endif

#ifdef CONFIG_SPI_1_NRF_SPI
SPI_NRFX_SPI_DEVICE(1);
    77d4:	b538      	push	{r3, r4, r5, lr}
    77d6:	4604      	mov	r4, r0
    77d8:	2200      	movs	r2, #0
    77da:	2101      	movs	r1, #1
    77dc:	2004      	movs	r0, #4
    77de:	f7ff f88f 	bl	6900 <z_arm_irq_priority_set>
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
    77e2:	6923      	ldr	r3, [r4, #16]
	result = nrfx_spi_init(&get_dev_config(dev)->spi,
    77e4:	4a0e      	ldr	r2, [pc, #56]	; (7820 <spi_1_init+0x4c>)
	dev_data->dev = dev;
    77e6:	64dc      	str	r4, [r3, #76]	; 0x4c
	result = nrfx_spi_init(&get_dev_config(dev)->spi,
    77e8:	6860      	ldr	r0, [r4, #4]
    77ea:	f100 0108 	add.w	r1, r0, #8
    77ee:	f002 fc47 	bl	a080 <nrfx_spi_init>
	if (result != NRFX_SUCCESS) {
    77f2:	4b0c      	ldr	r3, [pc, #48]	; (7824 <spi_1_init+0x50>)
    77f4:	4298      	cmp	r0, r3
    77f6:	d011      	beq.n	781c <spi_1_init+0x48>
    77f8:	4b0b      	ldr	r3, [pc, #44]	; (7828 <spi_1_init+0x54>)
    77fa:	4a0c      	ldr	r2, [pc, #48]	; (782c <spi_1_init+0x58>)
		LOG_ERR("Failed to initialize device: %s", dev->name);
    77fc:	6821      	ldr	r1, [r4, #0]
    77fe:	480c      	ldr	r0, [pc, #48]	; (7830 <spi_1_init+0x5c>)
    7800:	1ad2      	subs	r2, r2, r3
    7802:	08d2      	lsrs	r2, r2, #3
    7804:	0192      	lsls	r2, r2, #6
    7806:	f042 0201 	orr.w	r2, r2, #1
    780a:	f013 f9b1 	bl	1ab70 <log_1>
		return -EBUSY;
    780e:	f06f 050f 	mvn.w	r5, #15
SPI_NRFX_SPI_DEVICE(1);
    7812:	6920      	ldr	r0, [r4, #16]
    7814:	f013 ff26 	bl	1b664 <spi_context_unlock_unconditionally>
    7818:	4628      	mov	r0, r5
    781a:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
    781c:	2500      	movs	r5, #0
    781e:	e7f8      	b.n	7812 <spi_1_init+0x3e>
    7820:	00007b91 	.word	0x00007b91
    7824:	0bad0000 	.word	0x0bad0000
    7828:	0001c8a0 	.word	0x0001c8a0
    782c:	0001c8d8 	.word	0x0001c8d8
    7830:	0001dd53 	.word	0x0001dd53

00007834 <transfer_next_chunk>:
{
    7834:	b530      	push	{r4, r5, lr}
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
    7836:	6905      	ldr	r5, [r0, #16]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
    7838:	6c2a      	ldr	r2, [r5, #64]	; 0x40
    783a:	6cab      	ldr	r3, [r5, #72]	; 0x48
{
    783c:	b085      	sub	sp, #20
    783e:	b982      	cbnz	r2, 7862 <transfer_next_chunk+0x2e>
	if (chunk_len > 0) {
    7840:	bb73      	cbnz	r3, 78a0 <transfer_next_chunk+0x6c>
	int error = 0;
    7842:	461c      	mov	r4, r3
	_spi_context_cs_control(ctx, on, false);
    7844:	2200      	movs	r2, #0
    7846:	4611      	mov	r1, r2
    7848:	4628      	mov	r0, r5
    784a:	f013 fee6 	bl	1b61a <_spi_context_cs_control.isra.0>
	ctx->sync_status = status;
    784e:	62ac      	str	r4, [r5, #40]	; 0x28
	z_impl_k_sem_give(sem);
    7850:	f105 0018 	add.w	r0, r5, #24
    7854:	f003 f89a 	bl	a98c <z_impl_k_sem_give>
	dev_data->busy = false;
    7858:	2300      	movs	r3, #0
    785a:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54
}
    785e:	b005      	add	sp, #20
    7860:	bd30      	pop	{r4, r5, pc}
		return ctx->rx_len;
	} else if (!ctx->rx_len) {
    7862:	4611      	mov	r1, r2
    7864:	b113      	cbz	r3, 786c <transfer_next_chunk+0x38>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
    7866:	429a      	cmp	r2, r3
    7868:	bf28      	it	cs
    786a:	4619      	movcs	r1, r3
		xfer.p_tx_buffer = ctx->tx_buf;
    786c:	6bec      	ldr	r4, [r5, #60]	; 0x3c
		dev_data->chunk_len = chunk_len;
    786e:	6529      	str	r1, [r5, #80]	; 0x50
		xfer.p_tx_buffer = ctx->tx_buf;
    7870:	9400      	str	r4, [sp, #0]
	return !!(ctx->tx_buf && ctx->tx_len);
    7872:	b1bc      	cbz	r4, 78a4 <transfer_next_chunk+0x70>
    7874:	2a00      	cmp	r2, #0
    7876:	bf18      	it	ne
    7878:	460a      	movne	r2, r1
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    787a:	9201      	str	r2, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
    787c:	6c6a      	ldr	r2, [r5, #68]	; 0x44
    787e:	9202      	str	r2, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
    7880:	b192      	cbz	r2, 78a8 <transfer_next_chunk+0x74>
    7882:	2b00      	cmp	r3, #0
    7884:	bf18      	it	ne
    7886:	460b      	movne	r3, r1
		result = nrfx_spi_xfer(&get_dev_config(dev)->spi, &xfer, 0);
    7888:	6840      	ldr	r0, [r0, #4]
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    788a:	9303      	str	r3, [sp, #12]
		result = nrfx_spi_xfer(&get_dev_config(dev)->spi, &xfer, 0);
    788c:	2200      	movs	r2, #0
    788e:	4669      	mov	r1, sp
    7890:	f002 fc98 	bl	a1c4 <nrfx_spi_xfer>
		if (result == NRFX_SUCCESS) {
    7894:	4b05      	ldr	r3, [pc, #20]	; (78ac <transfer_next_chunk+0x78>)
    7896:	4298      	cmp	r0, r3
    7898:	d0e1      	beq.n	785e <transfer_next_chunk+0x2a>
		error = -EIO;
    789a:	f06f 0404 	mvn.w	r4, #4
    789e:	e7d1      	b.n	7844 <transfer_next_chunk+0x10>
    78a0:	4619      	mov	r1, r3
    78a2:	e7e3      	b.n	786c <transfer_next_chunk+0x38>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    78a4:	4622      	mov	r2, r4
    78a6:	e7e8      	b.n	787a <transfer_next_chunk+0x46>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    78a8:	4613      	mov	r3, r2
    78aa:	e7ed      	b.n	7888 <transfer_next_chunk+0x54>
    78ac:	0bad0000 	.word	0x0bad0000

000078b0 <spi_nrfx_transceive>:
{
    78b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    78b4:	461e      	mov	r6, r3
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    78b6:	888b      	ldrh	r3, [r1, #4]
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
    78b8:	6904      	ldr	r4, [r0, #16]
    78ba:	045b      	lsls	r3, r3, #17
{
    78bc:	4680      	mov	r8, r0
    78be:	460d      	mov	r5, r1
    78c0:	4617      	mov	r7, r2
    78c2:	d42c      	bmi.n	791e <spi_nrfx_transceive+0x6e>
	return z_impl_k_sem_take(sem, timeout);
    78c4:	f04f 32ff 	mov.w	r2, #4294967295
    78c8:	f04f 33ff 	mov.w	r3, #4294967295
    78cc:	f104 0008 	add.w	r0, r4, #8
    78d0:	f003 f87c 	bl	a9cc <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
    78d4:	6065      	str	r5, [r4, #4]
	struct spi_context *ctx = &get_dev_data(dev)->ctx;
    78d6:	f8d8 2010 	ldr.w	r2, [r8, #16]
	if (spi_context_configured(ctx, spi_cfg)) {
    78da:	6813      	ldr	r3, [r2, #0]
    78dc:	429d      	cmp	r5, r3
    78de:	f000 80b5 	beq.w	7a4c <spi_nrfx_transceive+0x19c>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
    78e2:	88ab      	ldrh	r3, [r5, #4]
    78e4:	07d8      	lsls	r0, r3, #31
    78e6:	d521      	bpl.n	792c <spi_nrfx_transceive+0x7c>
    78e8:	4a99      	ldr	r2, [pc, #612]	; (7b50 <spi_nrfx_transceive+0x2a0>)
    78ea:	4b9a      	ldr	r3, [pc, #616]	; (7b54 <spi_nrfx_transceive+0x2a4>)
		LOG_ERR("Slave mode is not supported on %s",
    78ec:	f8d8 1000 	ldr.w	r1, [r8]
    78f0:	4899      	ldr	r0, [pc, #612]	; (7b58 <spi_nrfx_transceive+0x2a8>)
    78f2:	1ad2      	subs	r2, r2, r3
    78f4:	08d2      	lsrs	r2, r2, #3
    78f6:	0192      	lsls	r2, r2, #6
    78f8:	f042 0201 	orr.w	r2, r2, #1
    78fc:	f013 f938 	bl	1ab70 <log_1>
		return -EINVAL;
    7900:	f06f 0515 	mvn.w	r5, #21
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
    7904:	6823      	ldr	r3, [r4, #0]
    7906:	889b      	ldrh	r3, [r3, #4]
    7908:	f413 4380 	ands.w	r3, r3, #16384	; 0x4000
    790c:	d104      	bne.n	7918 <spi_nrfx_transceive+0x68>
		ctx->owner = NULL;
    790e:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
    7910:	f104 0008 	add.w	r0, r4, #8
    7914:	f003 f83a 	bl	a98c <z_impl_k_sem_give>
}
    7918:	4628      	mov	r0, r5
    791a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    791e:	6923      	ldr	r3, [r4, #16]
    7920:	2b00      	cmp	r3, #0
    7922:	d1cf      	bne.n	78c4 <spi_nrfx_transceive+0x14>
		(k_sem_count_get(&ctx->lock) == 0) &&
    7924:	6863      	ldr	r3, [r4, #4]
    7926:	4299      	cmp	r1, r3
    7928:	d1cc      	bne.n	78c4 <spi_nrfx_transceive+0x14>
    792a:	e7d4      	b.n	78d6 <spi_nrfx_transceive+0x26>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
    792c:	0719      	lsls	r1, r3, #28
    792e:	d50a      	bpl.n	7946 <spi_nrfx_transceive+0x96>
    7930:	4987      	ldr	r1, [pc, #540]	; (7b50 <spi_nrfx_transceive+0x2a0>)
    7932:	4b88      	ldr	r3, [pc, #544]	; (7b54 <spi_nrfx_transceive+0x2a4>)
		LOG_ERR("Loopback mode is not supported");
    7934:	4889      	ldr	r0, [pc, #548]	; (7b5c <spi_nrfx_transceive+0x2ac>)
    7936:	1ac9      	subs	r1, r1, r3
    7938:	08c9      	lsrs	r1, r1, #3
    793a:	0189      	lsls	r1, r1, #6
    793c:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
    7940:	f013 f909 	bl	1ab56 <log_0>
    7944:	e7dc      	b.n	7900 <spi_nrfx_transceive+0x50>
	if ((spi_cfg->operation & SPI_LINES_MASK) != SPI_LINES_SINGLE) {
    7946:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
    794a:	d008      	beq.n	795e <spi_nrfx_transceive+0xae>
    794c:	4980      	ldr	r1, [pc, #512]	; (7b50 <spi_nrfx_transceive+0x2a0>)
    794e:	4b81      	ldr	r3, [pc, #516]	; (7b54 <spi_nrfx_transceive+0x2a4>)
		LOG_ERR("Only single line mode is supported");
    7950:	4883      	ldr	r0, [pc, #524]	; (7b60 <spi_nrfx_transceive+0x2b0>)
    7952:	1ac9      	subs	r1, r1, r3
    7954:	08c9      	lsrs	r1, r1, #3
    7956:	0189      	lsls	r1, r1, #6
    7958:	f041 0101 	orr.w	r1, r1, #1
    795c:	e7f0      	b.n	7940 <spi_nrfx_transceive+0x90>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
    795e:	f3c3 1345 	ubfx	r3, r3, #5, #6
    7962:	2b08      	cmp	r3, #8
    7964:	d008      	beq.n	7978 <spi_nrfx_transceive+0xc8>
    7966:	497a      	ldr	r1, [pc, #488]	; (7b50 <spi_nrfx_transceive+0x2a0>)
    7968:	4b7a      	ldr	r3, [pc, #488]	; (7b54 <spi_nrfx_transceive+0x2a4>)
		LOG_ERR("Word sizes other than 8 bits"
    796a:	487e      	ldr	r0, [pc, #504]	; (7b64 <spi_nrfx_transceive+0x2b4>)
    796c:	1ac9      	subs	r1, r1, r3
    796e:	08c9      	lsrs	r1, r1, #3
    7970:	0189      	lsls	r1, r1, #6
    7972:	f041 0101 	orr.w	r1, r1, #1
    7976:	e7e3      	b.n	7940 <spi_nrfx_transceive+0x90>
	if (spi_cfg->frequency < 125000) {
    7978:	6829      	ldr	r1, [r5, #0]
    797a:	4b7b      	ldr	r3, [pc, #492]	; (7b68 <spi_nrfx_transceive+0x2b8>)
    797c:	4299      	cmp	r1, r3
    797e:	d808      	bhi.n	7992 <spi_nrfx_transceive+0xe2>
    7980:	4973      	ldr	r1, [pc, #460]	; (7b50 <spi_nrfx_transceive+0x2a0>)
    7982:	4b74      	ldr	r3, [pc, #464]	; (7b54 <spi_nrfx_transceive+0x2a4>)
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
    7984:	4879      	ldr	r0, [pc, #484]	; (7b6c <spi_nrfx_transceive+0x2bc>)
    7986:	1ac9      	subs	r1, r1, r3
    7988:	08c9      	lsrs	r1, r1, #3
    798a:	0189      	lsls	r1, r1, #6
    798c:	f041 0101 	orr.w	r1, r1, #1
    7990:	e7d6      	b.n	7940 <spi_nrfx_transceive+0x90>
	if (ctx->config->cs && ctx->config->cs->gpio_dev) {
    7992:	68ab      	ldr	r3, [r5, #8]
	const nrfx_spi_t *spi = &get_dev_config(dev)->spi;
    7994:	f8d8 9004 	ldr.w	r9, [r8, #4]
	ctx->config = spi_cfg;
    7998:	6015      	str	r5, [r2, #0]
    799a:	2b00      	cmp	r3, #0
    799c:	f000 80a7 	beq.w	7aee <spi_nrfx_transceive+0x23e>
    79a0:	6818      	ldr	r0, [r3, #0]
    79a2:	2800      	cmp	r0, #0
    79a4:	f000 80a3 	beq.w	7aee <spi_nrfx_transceive+0x23e>
		gpio_pin_configure(ctx->config->cs->gpio_dev,
    79a8:	7a19      	ldrb	r1, [r3, #8]
				   ctx->config->cs->gpio_dt_flags |
    79aa:	7a5b      	ldrb	r3, [r3, #9]
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
    79ac:	f8d0 e010 	ldr.w	lr, [r0, #16]
	const struct gpio_driver_api *api =
    79b0:	f8d0 a008 	ldr.w	sl, [r0, #8]

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
		 != (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH),
		 "Output cannot be initialized low and high");

	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    79b4:	f8de c000 	ldr.w	ip, [lr]
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    79b8:	07da      	lsls	r2, r3, #31
		gpio_pin_configure(ctx->config->cs->gpio_dev,
    79ba:	bf54      	ite	pl
    79bc:	f443 53b0 	orrpl.w	r3, r3, #5632	; 0x1600
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    79c0:	f483 53d0 	eormi.w	r3, r3, #6656	; 0x1a00
	}

	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    79c4:	f04f 0b01 	mov.w	fp, #1
    79c8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    79cc:	fa0b fb01 	lsl.w	fp, fp, r1
    79d0:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    79d2:	bf4c      	ite	mi
    79d4:	ea4b 030c 	orrmi.w	r3, fp, ip
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    79d8:	ea2c 030b 	bicpl.w	r3, ip, fp
    79dc:	f8ce 3000 	str.w	r3, [lr]
	}

	return api->pin_configure(port, pin, flags);
    79e0:	f8da 3000 	ldr.w	r3, [sl]
    79e4:	4798      	blx	r3
	nrf_spi_configure(spi->p_reg,
    79e6:	88a9      	ldrh	r1, [r5, #4]
    79e8:	f8d9 2000 	ldr.w	r2, [r9]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    79ec:	0788      	lsls	r0, r1, #30
    79ee:	f001 0304 	and.w	r3, r1, #4
    79f2:	f140 8087 	bpl.w	7b04 <spi_nrfx_transceive+0x254>
			return NRF_SPI_MODE_2;
    79f6:	2b00      	cmp	r3, #0
    79f8:	bf14      	ite	ne
    79fa:	2303      	movne	r3, #3
    79fc:	2302      	moveq	r3, #2
                                         nrf_spi_mode_t      spi_mode,
                                         nrf_spi_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPI_BIT_ORDER_MSB_FIRST ?
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
    switch (spi_mode)
    79fe:	2b02      	cmp	r3, #2
	if (operation & SPI_TRANSFER_LSB) {
    7a00:	f3c1 1100 	ubfx	r1, r1, #4, #1
    7a04:	f000 8082 	beq.w	7b0c <spi_nrfx_transceive+0x25c>
    7a08:	2b03      	cmp	r3, #3
    7a0a:	f000 8082 	beq.w	7b12 <spi_nrfx_transceive+0x262>
    7a0e:	2b01      	cmp	r3, #1
    7a10:	d101      	bne.n	7a16 <spi_nrfx_transceive+0x166>
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Leading    << SPI_CONFIG_CPHA_Pos);
        break;

    case NRF_SPI_MODE_1:
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
    7a12:	f041 0102 	orr.w	r1, r1, #2
	if (frequency < 250000) {
    7a16:	4b56      	ldr	r3, [pc, #344]	; (7b70 <spi_nrfx_transceive+0x2c0>)
    case NRF_SPI_MODE_3:
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Trailing   << SPI_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
    7a18:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
	nrf_spi_frequency_set(spi->p_reg,
    7a1c:	6829      	ldr	r1, [r5, #0]
	if (frequency < 250000) {
    7a1e:	4299      	cmp	r1, r3
    7a20:	d97a      	bls.n	7b18 <spi_nrfx_transceive+0x268>
	} else if (frequency < 500000) {
    7a22:	4b54      	ldr	r3, [pc, #336]	; (7b74 <spi_nrfx_transceive+0x2c4>)
    7a24:	4299      	cmp	r1, r3
    7a26:	d97a      	bls.n	7b1e <spi_nrfx_transceive+0x26e>
	} else if (frequency < 1000000) {
    7a28:	4b53      	ldr	r3, [pc, #332]	; (7b78 <spi_nrfx_transceive+0x2c8>)
    7a2a:	4299      	cmp	r1, r3
    7a2c:	d97a      	bls.n	7b24 <spi_nrfx_transceive+0x274>
	} else if (frequency < 2000000) {
    7a2e:	4b53      	ldr	r3, [pc, #332]	; (7b7c <spi_nrfx_transceive+0x2cc>)
    7a30:	4299      	cmp	r1, r3
    7a32:	d97a      	bls.n	7b2a <spi_nrfx_transceive+0x27a>
	} else if (frequency < 4000000) {
    7a34:	4b52      	ldr	r3, [pc, #328]	; (7b80 <spi_nrfx_transceive+0x2d0>)
    7a36:	4299      	cmp	r1, r3
    7a38:	d97a      	bls.n	7b30 <spi_nrfx_transceive+0x280>
		return NRF_SPI_FREQ_8M;
    7a3a:	4b52      	ldr	r3, [pc, #328]	; (7b84 <spi_nrfx_transceive+0x2d4>)
    7a3c:	4299      	cmp	r1, r3
    7a3e:	bf34      	ite	cc
    7a40:	f04f 4180 	movcc.w	r1, #1073741824	; 0x40000000
    7a44:	f04f 4100 	movcs.w	r1, #2147483648	; 0x80000000
    p_reg->FREQUENCY = (uint32_t)frequency;
    7a48:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
		dev_data->busy = true;
    7a4c:	2301      	movs	r3, #1
    7a4e:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
	if (tx_bufs) {
    7a52:	2f00      	cmp	r7, #0
    7a54:	d06f      	beq.n	7b36 <spi_nrfx_transceive+0x286>
		ctx->current_tx = tx_bufs->buffers;
    7a56:	683b      	ldr	r3, [r7, #0]
		ctx->tx_count = tx_bufs->count;
    7a58:	687a      	ldr	r2, [r7, #4]
		ctx->current_tx = tx_bufs->buffers;
    7a5a:	62e3      	str	r3, [r4, #44]	; 0x2c
		ctx->tx_count = tx_bufs->count;
    7a5c:	6322      	str	r2, [r4, #48]	; 0x30
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
    7a5e:	681a      	ldr	r2, [r3, #0]
		ctx->tx_len = ctx->current_tx->len / dfs;
    7a60:	685b      	ldr	r3, [r3, #4]
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
    7a62:	63e2      	str	r2, [r4, #60]	; 0x3c
		ctx->tx_len = ctx->current_tx->len / dfs;
    7a64:	6423      	str	r3, [r4, #64]	; 0x40
	if (rx_bufs) {
    7a66:	2e00      	cmp	r6, #0
    7a68:	d06a      	beq.n	7b40 <spi_nrfx_transceive+0x290>
		ctx->current_rx = rx_bufs->buffers;
    7a6a:	6833      	ldr	r3, [r6, #0]
		ctx->rx_count = rx_bufs->count;
    7a6c:	6872      	ldr	r2, [r6, #4]
		ctx->current_rx = rx_bufs->buffers;
    7a6e:	6363      	str	r3, [r4, #52]	; 0x34
		ctx->rx_count = rx_bufs->count;
    7a70:	63a2      	str	r2, [r4, #56]	; 0x38
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
    7a72:	681a      	ldr	r2, [r3, #0]
		ctx->rx_len = ctx->current_rx->len / dfs;
    7a74:	685b      	ldr	r3, [r3, #4]
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
    7a76:	6462      	str	r2, [r4, #68]	; 0x44
		ctx->rx_len = ctx->current_rx->len / dfs;
    7a78:	64a3      	str	r3, [r4, #72]	; 0x48
	ctx->sync_status = 0;
    7a7a:	2200      	movs	r2, #0
    7a7c:	62a2      	str	r2, [r4, #40]	; 0x28
	_spi_context_cs_control(ctx, on, false);
    7a7e:	2101      	movs	r1, #1
    7a80:	4620      	mov	r0, r4
    7a82:	f013 fdca 	bl	1b61a <_spi_context_cs_control.isra.0>
		transfer_next_chunk(dev);
    7a86:	4640      	mov	r0, r8
    7a88:	f7ff fed4 	bl	7834 <transfer_next_chunk>
	timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    7a8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    7a8e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
		     ctx->config->frequency;
    7a90:	4625      	mov	r5, r4
	timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    7a92:	428b      	cmp	r3, r1
    7a94:	bf38      	it	cc
    7a96:	460b      	movcc	r3, r1
    7a98:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
    7a9c:	4359      	muls	r1, r3
		     ctx->config->frequency;
    7a9e:	f855 3b18 	ldr.w	r3, [r5], #24
		} else {
			return (t * to_hz + off) / from_hz;
    7aa2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    7aa6:	681b      	ldr	r3, [r3, #0]
    7aa8:	fbb1 f1f3 	udiv	r1, r1, r3
    7aac:	f240 36e7 	movw	r6, #999	; 0x3e7
	timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
    7ab0:	31c8      	adds	r1, #200	; 0xc8
    7ab2:	2700      	movs	r7, #0
    7ab4:	fbe0 6701 	umlal	r6, r7, r0, r1
    7ab8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7abc:	2300      	movs	r3, #0
    7abe:	4630      	mov	r0, r6
    7ac0:	4639      	mov	r1, r7
    7ac2:	f7f8 fff9 	bl	ab8 <__aeabi_uldivmod>
    7ac6:	4602      	mov	r2, r0
    7ac8:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
    7aca:	4628      	mov	r0, r5
    7acc:	f002 ff7e 	bl	a9cc <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, K_MSEC(timeout_ms))) {
    7ad0:	2800      	cmp	r0, #0
    7ad2:	d03a      	beq.n	7b4a <spi_nrfx_transceive+0x29a>
    7ad4:	4b1f      	ldr	r3, [pc, #124]	; (7b54 <spi_nrfx_transceive+0x2a4>)
    7ad6:	491e      	ldr	r1, [pc, #120]	; (7b50 <spi_nrfx_transceive+0x2a0>)
		LOG_ERR("Timeout waiting for transfer complete");
    7ad8:	482b      	ldr	r0, [pc, #172]	; (7b88 <spi_nrfx_transceive+0x2d8>)
    7ada:	1ac9      	subs	r1, r1, r3
    7adc:	08c9      	lsrs	r1, r1, #3
    7ade:	0189      	lsls	r1, r1, #6
    7ae0:	f041 0101 	orr.w	r1, r1, #1
    7ae4:	f013 f837 	bl	1ab56 <log_0>
		return -ETIMEDOUT;
    7ae8:	f06f 0573 	mvn.w	r5, #115	; 0x73
    7aec:	e70a      	b.n	7904 <spi_nrfx_transceive+0x54>
    7aee:	4b19      	ldr	r3, [pc, #100]	; (7b54 <spi_nrfx_transceive+0x2a4>)
    7af0:	4917      	ldr	r1, [pc, #92]	; (7b50 <spi_nrfx_transceive+0x2a0>)
		LOG_INF("CS control inhibited (no GPIO device)");
    7af2:	4826      	ldr	r0, [pc, #152]	; (7b8c <spi_nrfx_transceive+0x2dc>)
    7af4:	1ac9      	subs	r1, r1, r3
    7af6:	08c9      	lsrs	r1, r1, #3
    7af8:	0189      	lsls	r1, r1, #6
    7afa:	f041 0103 	orr.w	r1, r1, #3
    7afe:	f013 f82a 	bl	1ab56 <log_0>
    7b02:	e770      	b.n	79e6 <spi_nrfx_transceive+0x136>
			return NRF_SPI_MODE_0;
    7b04:	3b00      	subs	r3, #0
    7b06:	bf18      	it	ne
    7b08:	2301      	movne	r3, #1
    7b0a:	e778      	b.n	79fe <spi_nrfx_transceive+0x14e>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
    7b0c:	f041 0104 	orr.w	r1, r1, #4
        break;
    7b10:	e781      	b.n	7a16 <spi_nrfx_transceive+0x166>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
    7b12:	f041 0106 	orr.w	r1, r1, #6
        break;
    7b16:	e77e      	b.n	7a16 <spi_nrfx_transceive+0x166>
		return NRF_SPI_FREQ_125K;
    7b18:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
    7b1c:	e794      	b.n	7a48 <spi_nrfx_transceive+0x198>
		return NRF_SPI_FREQ_250K;
    7b1e:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
    7b22:	e791      	b.n	7a48 <spi_nrfx_transceive+0x198>
		return NRF_SPI_FREQ_500K;
    7b24:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    7b28:	e78e      	b.n	7a48 <spi_nrfx_transceive+0x198>
		return NRF_SPI_FREQ_1M;
    7b2a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    7b2e:	e78b      	b.n	7a48 <spi_nrfx_transceive+0x198>
		return NRF_SPI_FREQ_2M;
    7b30:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    7b34:	e788      	b.n	7a48 <spi_nrfx_transceive+0x198>
		ctx->tx_count = 0;
    7b36:	e9c4 770b 	strd	r7, r7, [r4, #44]	; 0x2c
		ctx->tx_len = 0;
    7b3a:	e9c4 770f 	strd	r7, r7, [r4, #60]	; 0x3c
    7b3e:	e792      	b.n	7a66 <spi_nrfx_transceive+0x1b6>
		ctx->rx_count = 0;
    7b40:	e9c4 660d 	strd	r6, r6, [r4, #52]	; 0x34
		ctx->rx_len = 0;
    7b44:	e9c4 6611 	strd	r6, r6, [r4, #68]	; 0x44
    7b48:	e797      	b.n	7a7a <spi_nrfx_transceive+0x1ca>
	status = ctx->sync_status;
    7b4a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
	return status;
    7b4c:	e6da      	b.n	7904 <spi_nrfx_transceive+0x54>
    7b4e:	bf00      	nop
    7b50:	0001c8d8 	.word	0x0001c8d8
    7b54:	0001c8a0 	.word	0x0001c8a0
    7b58:	0001dd73 	.word	0x0001dd73
    7b5c:	0001dd95 	.word	0x0001dd95
    7b60:	0001ddb4 	.word	0x0001ddb4
    7b64:	0001ddd7 	.word	0x0001ddd7
    7b68:	0001e847 	.word	0x0001e847
    7b6c:	0001de06 	.word	0x0001de06
    7b70:	0003d08f 	.word	0x0003d08f
    7b74:	0007a11f 	.word	0x0007a11f
    7b78:	000f423f 	.word	0x000f423f
    7b7c:	001e847f 	.word	0x001e847f
    7b80:	003d08ff 	.word	0x003d08ff
    7b84:	007a1200 	.word	0x007a1200
    7b88:	0001de5d 	.word	0x0001de5d
    7b8c:	0001de37 	.word	0x0001de37

00007b90 <event_handler>:
{
    7b90:	b510      	push	{r4, lr}
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
    7b92:	7803      	ldrb	r3, [r0, #0]
{
    7b94:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
    7b96:	2b00      	cmp	r3, #0
    7b98:	d14e      	bne.n	7c38 <event_handler+0xa8>
	if (!ctx->tx_len) {
    7b9a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    7b9c:	b163      	cbz	r3, 7bb8 <event_handler+0x28>
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
    7b9e:	6d0a      	ldr	r2, [r1, #80]	; 0x50
	if (len > ctx->tx_len) {
    7ba0:	429a      	cmp	r2, r3
    7ba2:	d91d      	bls.n	7be0 <event_handler+0x50>
    7ba4:	4925      	ldr	r1, [pc, #148]	; (7c3c <event_handler+0xac>)
    7ba6:	4b26      	ldr	r3, [pc, #152]	; (7c40 <event_handler+0xb0>)
		LOG_ERR("Update exceeds current buffer");
    7ba8:	4826      	ldr	r0, [pc, #152]	; (7c44 <event_handler+0xb4>)
    7baa:	1ac9      	subs	r1, r1, r3
    7bac:	08c9      	lsrs	r1, r1, #3
    7bae:	0189      	lsls	r1, r1, #6
    7bb0:	f041 0101 	orr.w	r1, r1, #1
    7bb4:	f012 ffcf 	bl	1ab56 <log_0>
	if (!ctx->rx_len) {
    7bb8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    7bba:	b163      	cbz	r3, 7bd6 <event_handler+0x46>
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
    7bbc:	6d22      	ldr	r2, [r4, #80]	; 0x50
	if (len > ctx->rx_len) {
    7bbe:	429a      	cmp	r2, r3
    7bc0:	d924      	bls.n	7c0c <event_handler+0x7c>
    7bc2:	491e      	ldr	r1, [pc, #120]	; (7c3c <event_handler+0xac>)
    7bc4:	4b1e      	ldr	r3, [pc, #120]	; (7c40 <event_handler+0xb0>)
		LOG_ERR("Update exceeds current buffer");
    7bc6:	481f      	ldr	r0, [pc, #124]	; (7c44 <event_handler+0xb4>)
    7bc8:	1ac9      	subs	r1, r1, r3
    7bca:	08c9      	lsrs	r1, r1, #3
    7bcc:	0189      	lsls	r1, r1, #6
    7bce:	f041 0101 	orr.w	r1, r1, #1
    7bd2:	f012 ffc0 	bl	1ab56 <log_0>
		transfer_next_chunk(dev_data->dev);
    7bd6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
}
    7bd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
    7bdc:	f7ff be2a 	b.w	7834 <transfer_next_chunk>
	ctx->tx_len -= len;
    7be0:	1a9b      	subs	r3, r3, r2
    7be2:	640b      	str	r3, [r1, #64]	; 0x40
	if (!ctx->tx_len) {
    7be4:	b963      	cbnz	r3, 7c00 <event_handler+0x70>
		ctx->tx_count--;
    7be6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    7be8:	3b01      	subs	r3, #1
    7bea:	630b      	str	r3, [r1, #48]	; 0x30
		if (ctx->tx_count) {
    7bec:	b163      	cbz	r3, 7c08 <event_handler+0x78>
			ctx->current_tx++;
    7bee:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    7bf0:	f103 0208 	add.w	r2, r3, #8
    7bf4:	62ca      	str	r2, [r1, #44]	; 0x2c
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
    7bf6:	689a      	ldr	r2, [r3, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
    7bf8:	68db      	ldr	r3, [r3, #12]
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
    7bfa:	63ca      	str	r2, [r1, #60]	; 0x3c
			ctx->tx_len = ctx->current_tx->len / dfs;
    7bfc:	640b      	str	r3, [r1, #64]	; 0x40
    7bfe:	e7db      	b.n	7bb8 <event_handler+0x28>
	} else if (ctx->tx_buf) {
    7c00:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    7c02:	2b00      	cmp	r3, #0
    7c04:	d0d8      	beq.n	7bb8 <event_handler+0x28>
		ctx->tx_buf += dfs * len;
    7c06:	4413      	add	r3, r2
    7c08:	63e3      	str	r3, [r4, #60]	; 0x3c
    7c0a:	e7d5      	b.n	7bb8 <event_handler+0x28>
	ctx->rx_len -= len;
    7c0c:	1a9b      	subs	r3, r3, r2
    7c0e:	64a3      	str	r3, [r4, #72]	; 0x48
	if (!ctx->rx_len) {
    7c10:	b963      	cbnz	r3, 7c2c <event_handler+0x9c>
		ctx->rx_count--;
    7c12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    7c14:	3b01      	subs	r3, #1
    7c16:	63a3      	str	r3, [r4, #56]	; 0x38
		if (ctx->rx_count) {
    7c18:	b163      	cbz	r3, 7c34 <event_handler+0xa4>
			ctx->current_rx++;
    7c1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7c1c:	f103 0208 	add.w	r2, r3, #8
    7c20:	6362      	str	r2, [r4, #52]	; 0x34
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
    7c22:	689a      	ldr	r2, [r3, #8]
			ctx->rx_len = ctx->current_rx->len / dfs;
    7c24:	68db      	ldr	r3, [r3, #12]
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
    7c26:	6462      	str	r2, [r4, #68]	; 0x44
			ctx->rx_len = ctx->current_rx->len / dfs;
    7c28:	64a3      	str	r3, [r4, #72]	; 0x48
    7c2a:	e7d4      	b.n	7bd6 <event_handler+0x46>
	} else if (ctx->rx_buf) {
    7c2c:	6c63      	ldr	r3, [r4, #68]	; 0x44
    7c2e:	2b00      	cmp	r3, #0
    7c30:	d0d1      	beq.n	7bd6 <event_handler+0x46>
		ctx->rx_buf += dfs * len;
    7c32:	4413      	add	r3, r2
    7c34:	6463      	str	r3, [r4, #68]	; 0x44
    7c36:	e7ce      	b.n	7bd6 <event_handler+0x46>
}
    7c38:	bd10      	pop	{r4, pc}
    7c3a:	bf00      	nop
    7c3c:	0001c8d8 	.word	0x0001c8d8
    7c40:	0001c8a0 	.word	0x0001c8a0
    7c44:	0001de83 	.word	0x0001de83

00007c48 <timer_callback>:

static void timer_callback(struct k_timer *_timer)
{
	ARG_UNUSED(_timer);

	k_work_submit(&timer_work);
    7c48:	4801      	ldr	r0, [pc, #4]	; (7c50 <timer_callback+0x8>)
    7c4a:	f002 bfd7 	b.w	abfc <k_work_submit>
    7c4e:	bf00      	nop
    7c50:	200000a0 	.word	0x200000a0

00007c54 <RtcGetTimerElapsedTime>:
{
	return k_uptime_get_32();
}

uint32_t RtcGetTimerElapsedTime(void)
{
    7c54:	b508      	push	{r3, lr}
	return (uint32_t)k_uptime_get();
    7c56:	f013 fd29 	bl	1b6ac <k_uptime_get>
	return (k_uptime_get_32() - saved_time);
    7c5a:	4b02      	ldr	r3, [pc, #8]	; (7c64 <RtcGetTimerElapsedTime+0x10>)
    7c5c:	681b      	ldr	r3, [r3, #0]
}
    7c5e:	1ac0      	subs	r0, r0, r3
    7c60:	bd08      	pop	{r3, pc}
    7c62:	bf00      	nop
    7c64:	20000cfc 	.word	0x20000cfc

00007c68 <RtcStopAlarm>:
	z_impl_k_timer_stop(timer);
    7c68:	4801      	ldr	r0, [pc, #4]	; (7c70 <RtcStopAlarm+0x8>)
    7c6a:	f014 ba06 	b.w	1c07a <z_impl_k_timer_stop>
    7c6e:	bf00      	nop
    7c70:	200001d0 	.word	0x200001d0

00007c74 <RtcSetAlarm>:
{
	k_timer_stop(&lora_timer);
}

void RtcSetAlarm(uint32_t timeout)
{
    7c74:	b537      	push	{r0, r1, r2, r4, r5, lr}
    7c76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    7c7a:	f240 34e7 	movw	r4, #999	; 0x3e7
    7c7e:	2500      	movs	r5, #0
    7c80:	fbe1 4500 	umlal	r4, r5, r1, r0
    7c84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7c88:	2300      	movs	r3, #0
    7c8a:	4620      	mov	r0, r4
    7c8c:	4629      	mov	r1, r5
    7c8e:	f7f8 ff13 	bl	ab8 <__aeabi_uldivmod>
    7c92:	4602      	mov	r2, r0
    7c94:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
    7c96:	2100      	movs	r1, #0
    7c98:	2000      	movs	r0, #0
    7c9a:	e9cd 0100 	strd	r0, r1, [sp]
    7c9e:	4802      	ldr	r0, [pc, #8]	; (7ca8 <RtcSetAlarm+0x34>)
    7ca0:	f003 fd08 	bl	b6b4 <z_impl_k_timer_start>
	k_timer_start(&lora_timer, K_MSEC(timeout), K_NO_WAIT);
}
    7ca4:	b003      	add	sp, #12
    7ca6:	bd30      	pop	{r4, r5, pc}
    7ca8:	200001d0 	.word	0x200001d0

00007cac <RtcSetTimerContext>:

uint32_t RtcSetTimerContext(void)
{
    7cac:	b508      	push	{r3, lr}
    7cae:	f013 fcfd 	bl	1b6ac <k_uptime_get>
	saved_time = k_uptime_get_32();
    7cb2:	4b01      	ldr	r3, [pc, #4]	; (7cb8 <RtcSetTimerContext+0xc>)
    7cb4:	6018      	str	r0, [r3, #0]

	return saved_time;
}
    7cb6:	bd08      	pop	{r3, pc}
    7cb8:	20000cfc 	.word	0x20000cfc

00007cbc <RtcGetTimerContext>:

/* For us, 1 tick = 1 milli second. So no need to do any conversion here */
uint32_t RtcGetTimerContext(void)
{
	return saved_time;
}
    7cbc:	4b01      	ldr	r3, [pc, #4]	; (7cc4 <RtcGetTimerContext+0x8>)
    7cbe:	6818      	ldr	r0, [r3, #0]
    7cc0:	4770      	bx	lr
    7cc2:	bf00      	nop
    7cc4:	20000cfc 	.word	0x20000cfc

00007cc8 <sx12xx_ev_tx_done>:
	k_sem_give(&dev_data.data_sem);
}

static void sx12xx_ev_tx_done(void)
{
	Radio.Sleep();
    7cc8:	4b01      	ldr	r3, [pc, #4]	; (7cd0 <sx12xx_ev_tx_done+0x8>)
    7cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7ccc:	4718      	bx	r3
    7cce:	bf00      	nop
    7cd0:	0001cecc 	.word	0x0001cecc

00007cd4 <sx12xx_ev_rx_done>:
{
    7cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7cd6:	461c      	mov	r4, r3
	Radio.Sleep();
    7cd8:	4b08      	ldr	r3, [pc, #32]	; (7cfc <sx12xx_ev_rx_done+0x28>)
    7cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
    7cdc:	4607      	mov	r7, r0
    7cde:	460e      	mov	r6, r1
    7ce0:	4615      	mov	r5, r2
	Radio.Sleep();
    7ce2:	4798      	blx	r3
	dev_data.rx_buf = payload;
    7ce4:	4806      	ldr	r0, [pc, #24]	; (7d00 <sx12xx_ev_rx_done+0x2c>)
    7ce6:	6347      	str	r7, [r0, #52]	; 0x34
	dev_data.rx_len = size;
    7ce8:	f880 6038 	strb.w	r6, [r0, #56]	; 0x38
	dev_data.rssi = rssi;
    7cec:	8745      	strh	r5, [r0, #58]	; 0x3a
	dev_data.snr = snr;
    7cee:	f880 4039 	strb.w	r4, [r0, #57]	; 0x39
}
    7cf2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_impl_k_sem_give(sem);
    7cf6:	f002 be49 	b.w	a98c <z_impl_k_sem_give>
    7cfa:	bf00      	nop
    7cfc:	0001cecc 	.word	0x0001cecc
    7d00:	20000d00 	.word	0x20000d00

00007d04 <__sx12xx_configure_pin>:
{
    7d04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7d06:	4607      	mov	r7, r0
    7d08:	460d      	mov	r5, r1
    7d0a:	4616      	mov	r6, r2
    7d0c:	461c      	mov	r4, r3
    7d0e:	4608      	mov	r0, r1
    7d10:	f002 fb16 	bl	a340 <z_impl_device_get_binding>
	*dev = device_get_binding(controller);
    7d14:	6038      	str	r0, [r7, #0]
	if (!(*dev)) {
    7d16:	b978      	cbnz	r0, 7d38 <__sx12xx_configure_pin+0x34>
    7d18:	4b1e      	ldr	r3, [pc, #120]	; (7d94 <__sx12xx_configure_pin+0x90>)
    7d1a:	4a1f      	ldr	r2, [pc, #124]	; (7d98 <__sx12xx_configure_pin+0x94>)
		LOG_ERR("Cannot get pointer to %s device", controller);
    7d1c:	481f      	ldr	r0, [pc, #124]	; (7d9c <__sx12xx_configure_pin+0x98>)
    7d1e:	1ad2      	subs	r2, r2, r3
    7d20:	08d2      	lsrs	r2, r2, #3
    7d22:	0192      	lsls	r2, r2, #6
    7d24:	f042 0201 	orr.w	r2, r2, #1
    7d28:	4629      	mov	r1, r5
    7d2a:	f012 ff21 	bl	1ab70 <log_1>
		return -EIO;
    7d2e:	f06f 0704 	mvn.w	r7, #4
}
    7d32:	4638      	mov	r0, r7
    7d34:	b003      	add	sp, #12
    7d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    7d38:	04e2      	lsls	r2, r4, #19
	const struct gpio_driver_api *api =
    7d3a:	f8d0 c008 	ldr.w	ip, [r0, #8]
	struct gpio_driver_data *data =
    7d3e:	6907      	ldr	r7, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    7d40:	d506      	bpl.n	7d50 <__sx12xx_configure_pin+0x4c>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
    7d42:	f414 6f40 	tst.w	r4, #3072	; 0xc00
    7d46:	d003      	beq.n	7d50 <__sx12xx_configure_pin+0x4c>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    7d48:	07e3      	lsls	r3, r4, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    7d4a:	bf48      	it	mi
    7d4c:	f484 6440 	eormi.w	r4, r4, #3072	; 0xc00
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    7d50:	683b      	ldr	r3, [r7, #0]
    7d52:	2101      	movs	r1, #1
    7d54:	40b1      	lsls	r1, r6
    7d56:	f424 5280 	bic.w	r2, r4, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    7d5a:	07e4      	lsls	r4, r4, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    7d5c:	bf4c      	ite	mi
    7d5e:	430b      	orrmi	r3, r1
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    7d60:	438b      	bicpl	r3, r1
    7d62:	603b      	str	r3, [r7, #0]
	return api->pin_configure(port, pin, flags);
    7d64:	4631      	mov	r1, r6
    7d66:	f8dc 3000 	ldr.w	r3, [ip]
    7d6a:	4798      	blx	r3
	if (err) {
    7d6c:	4607      	mov	r7, r0
    7d6e:	2800      	cmp	r0, #0
    7d70:	d0df      	beq.n	7d32 <__sx12xx_configure_pin+0x2e>
    7d72:	4b08      	ldr	r3, [pc, #32]	; (7d94 <__sx12xx_configure_pin+0x90>)
    7d74:	4c08      	ldr	r4, [pc, #32]	; (7d98 <__sx12xx_configure_pin+0x94>)
    7d76:	1ae4      	subs	r4, r4, r3
    7d78:	08e4      	lsrs	r4, r4, #3
		LOG_ERR("Cannot configure gpio %s %d: %d", controller, pin,
    7d7a:	01a4      	lsls	r4, r4, #6
    7d7c:	f044 0401 	orr.w	r4, r4, #1
    7d80:	4603      	mov	r3, r0
    7d82:	f8ad 4000 	strh.w	r4, [sp]
    7d86:	4806      	ldr	r0, [pc, #24]	; (7da0 <__sx12xx_configure_pin+0x9c>)
    7d88:	4632      	mov	r2, r6
    7d8a:	4629      	mov	r1, r5
    7d8c:	f012 ff1d 	bl	1abca <log_3>
		return err;
    7d90:	e7cf      	b.n	7d32 <__sx12xx_configure_pin+0x2e>
    7d92:	bf00      	nop
    7d94:	0001c8a0 	.word	0x0001c8a0
    7d98:	0001c8e8 	.word	0x0001c8e8
    7d9c:	0001deb4 	.word	0x0001deb4
    7da0:	0001ded4 	.word	0x0001ded4

00007da4 <sx12xx_lora_send>:
}

int sx12xx_lora_send(const struct device *dev, uint8_t *data,
		     uint32_t data_len)
{
    7da4:	b570      	push	{r4, r5, r6, lr}
	Radio.SetMaxPayloadLength(MODEM_LORA, data_len);
    7da6:	4e06      	ldr	r6, [pc, #24]	; (7dc0 <sx12xx_lora_send+0x1c>)
    7da8:	b2d4      	uxtb	r4, r2
    7daa:	6d73      	ldr	r3, [r6, #84]	; 0x54
{
    7dac:	460d      	mov	r5, r1
	Radio.SetMaxPayloadLength(MODEM_LORA, data_len);
    7dae:	2001      	movs	r0, #1
    7db0:	4621      	mov	r1, r4
    7db2:	4798      	blx	r3

	Radio.Send(data, data_len);
    7db4:	4628      	mov	r0, r5
    7db6:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    7db8:	4621      	mov	r1, r4
    7dba:	4798      	blx	r3

	return 0;
}
    7dbc:	2000      	movs	r0, #0
    7dbe:	bd70      	pop	{r4, r5, r6, pc}
    7dc0:	0001cecc 	.word	0x0001cecc

00007dc4 <sx12xx_lora_recv>:

int sx12xx_lora_recv(const struct device *dev, uint8_t *data, uint8_t size,
		     k_timeout_t timeout, int16_t *rssi, int8_t *snr)
{
    7dc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int ret;

	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
    7dc8:	4c1e      	ldr	r4, [pc, #120]	; (7e44 <sx12xx_lora_recv+0x80>)
{
    7dca:	460f      	mov	r7, r1
	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
    7dcc:	6d63      	ldr	r3, [r4, #84]	; 0x54
    7dce:	21ff      	movs	r1, #255	; 0xff
    7dd0:	2001      	movs	r0, #1
{
    7dd2:	4616      	mov	r6, r2
    7dd4:	e9dd 980a 	ldrd	r9, r8, [sp, #40]	; 0x28
	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
    7dd8:	4798      	blx	r3
	Radio.Rx(0);
    7dda:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7ddc:	2000      	movs	r0, #0
    7dde:	4798      	blx	r3
	return z_impl_k_sem_take(sem, timeout);
    7de0:	4c19      	ldr	r4, [pc, #100]	; (7e48 <sx12xx_lora_recv+0x84>)
    7de2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    7de6:	4620      	mov	r0, r4
    7de8:	f002 fdf0 	bl	a9cc <z_impl_k_sem_take>

	ret = k_sem_take(&dev_data.data_sem, timeout);
	if (ret < 0) {
    7dec:	1e05      	subs	r5, r0, #0
    7dee:	da0c      	bge.n	7e0a <sx12xx_lora_recv+0x46>
    7df0:	4916      	ldr	r1, [pc, #88]	; (7e4c <sx12xx_lora_recv+0x88>)
    7df2:	4b17      	ldr	r3, [pc, #92]	; (7e50 <sx12xx_lora_recv+0x8c>)
		LOG_ERR("Receive timeout!");
    7df4:	4817      	ldr	r0, [pc, #92]	; (7e54 <sx12xx_lora_recv+0x90>)
    7df6:	1ac9      	subs	r1, r1, r3
    7df8:	08c9      	lsrs	r1, r1, #3
    7dfa:	0189      	lsls	r1, r1, #6
    7dfc:	f041 0101 	orr.w	r1, r1, #1
    7e00:	f012 fea9 	bl	1ab56 <log_0>
	if (snr != NULL) {
		*snr = dev_data.snr;
	}

	return dev_data.rx_len;
}
    7e04:	4628      	mov	r0, r5
    7e06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (dev_data.rx_len > size)
    7e0a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    7e0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    7e10:	42b3      	cmp	r3, r6
		dev_data.rx_len = size;
    7e12:	bf88      	it	hi
    7e14:	f884 6038 	strbhi.w	r6, [r4, #56]	; 0x38
    7e18:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
    7e1c:	4638      	mov	r0, r7
    7e1e:	f014 f95f 	bl	1c0e0 <memcpy>
	if (rssi != NULL) {
    7e22:	f1b9 0f00 	cmp.w	r9, #0
    7e26:	d003      	beq.n	7e30 <sx12xx_lora_recv+0x6c>
		*rssi = dev_data.rssi;
    7e28:	f9b4 303a 	ldrsh.w	r3, [r4, #58]	; 0x3a
    7e2c:	f8a9 3000 	strh.w	r3, [r9]
	if (snr != NULL) {
    7e30:	f1b8 0f00 	cmp.w	r8, #0
    7e34:	d003      	beq.n	7e3e <sx12xx_lora_recv+0x7a>
		*snr = dev_data.snr;
    7e36:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    7e3a:	f888 3000 	strb.w	r3, [r8]
	return dev_data.rx_len;
    7e3e:	f894 5038 	ldrb.w	r5, [r4, #56]	; 0x38
    7e42:	e7df      	b.n	7e04 <sx12xx_lora_recv+0x40>
    7e44:	0001cecc 	.word	0x0001cecc
    7e48:	20000d00 	.word	0x20000d00
    7e4c:	0001c8e8 	.word	0x0001c8e8
    7e50:	0001c8a0 	.word	0x0001c8a0
    7e54:	0001def4 	.word	0x0001def4

00007e58 <sx12xx_lora_config>:

int sx12xx_lora_config(const struct device *dev,
		       struct lora_modem_config *config)
{
    7e58:	b5f0      	push	{r4, r5, r6, r7, lr}
	Radio.SetChannel(config->frequency);
    7e5a:	4e19      	ldr	r6, [pc, #100]	; (7ec0 <sx12xx_lora_config+0x68>)
    7e5c:	6808      	ldr	r0, [r1, #0]
    7e5e:	68f3      	ldr	r3, [r6, #12]
{
    7e60:	460c      	mov	r4, r1
    7e62:	b08b      	sub	sp, #44	; 0x2c
	Radio.SetChannel(config->frequency);
    7e64:	4798      	blx	r3

	if (config->tx) {
    7e66:	7ae5      	ldrb	r5, [r4, #11]
    7e68:	7921      	ldrb	r1, [r4, #4]
    7e6a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
    7e6e:	79a3      	ldrb	r3, [r4, #6]
    7e70:	7967      	ldrb	r7, [r4, #5]
    7e72:	b1a5      	cbz	r5, 7e9e <sx12xx_lora_config+0x46>
		Radio.SetTxConfig(MODEM_LORA, config->tx_power, 0,
    7e74:	2200      	movs	r2, #0
    7e76:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
    7e7a:	e9cd 2007 	strd	r2, r0, [sp, #28]
    7e7e:	2001      	movs	r0, #1
    7e80:	e9cd 3c01 	strd	r3, ip, [sp, #4]
    7e84:	e9cd 2205 	strd	r2, r2, [sp, #20]
    7e88:	e9cd 2003 	strd	r2, r0, [sp, #12]
    7e8c:	9700      	str	r7, [sp, #0]
    7e8e:	460b      	mov	r3, r1
    7e90:	69f5      	ldr	r5, [r6, #28]
    7e92:	f994 100a 	ldrsb.w	r1, [r4, #10]
    7e96:	47a8      	blx	r5
				  0, config->preamble_len, 10, false, 0,
				  false, 0, 0, false, true);
	}

	return 0;
}
    7e98:	2000      	movs	r0, #0
    7e9a:	b00b      	add	sp, #44	; 0x2c
    7e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Radio.SetRxConfig(MODEM_LORA, config->bandwidth,
    7e9e:	2001      	movs	r0, #1
    7ea0:	220a      	movs	r2, #10
    7ea2:	e9cd c201 	strd	ip, r2, [sp, #4]
    7ea6:	e9cd 5008 	strd	r5, r0, [sp, #32]
    7eaa:	e9cd 5506 	strd	r5, r5, [sp, #24]
    7eae:	e9cd 5504 	strd	r5, r5, [sp, #16]
    7eb2:	69b4      	ldr	r4, [r6, #24]
    7eb4:	9503      	str	r5, [sp, #12]
    7eb6:	9500      	str	r5, [sp, #0]
    7eb8:	463a      	mov	r2, r7
    7eba:	47a0      	blx	r4
    7ebc:	e7ec      	b.n	7e98 <sx12xx_lora_config+0x40>
    7ebe:	bf00      	nop
    7ec0:	0001cecc 	.word	0x0001cecc

00007ec4 <sx12xx_lora_test_cw>:

int sx12xx_lora_test_cw(const struct device *dev, uint32_t frequency,
			int8_t tx_power,
			uint16_t duration)
{
    7ec4:	b510      	push	{r4, lr}
    7ec6:	4608      	mov	r0, r1
    7ec8:	4611      	mov	r1, r2
	Radio.SetTxContinuousWave(frequency, tx_power, duration);
    7eca:	4a03      	ldr	r2, [pc, #12]	; (7ed8 <sx12xx_lora_test_cw+0x14>)
    7ecc:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
    7ece:	461a      	mov	r2, r3
    7ed0:	47a0      	blx	r4
	return 0;
}
    7ed2:	2000      	movs	r0, #0
    7ed4:	bd10      	pop	{r4, pc}
    7ed6:	bf00      	nop
    7ed8:	0001cecc 	.word	0x0001cecc

00007edc <sx12xx_init>:

int sx12xx_init(const struct device *dev)
{
    7edc:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
    7ede:	4c0a      	ldr	r4, [pc, #40]	; (7f08 <sx12xx_init+0x2c>)
	k_sem_init(&dev_data.data_sem, 0, K_SEM_MAX_LIMIT);

	dev_data.events.TxDone = sx12xx_ev_tx_done;
	dev_data.events.RxDone = sx12xx_ev_rx_done;
	Radio.Init(&dev_data.events);
    7ee0:	4d0a      	ldr	r5, [pc, #40]	; (7f0c <sx12xx_init+0x30>)
    7ee2:	f04f 32ff 	mov.w	r2, #4294967295
    7ee6:	2100      	movs	r1, #0
    7ee8:	4620      	mov	r0, r4
    7eea:	f013 ff4c 	bl	1bd86 <z_impl_k_sem_init>
	dev_data.events.TxDone = sx12xx_ev_tx_done;
    7eee:	4b08      	ldr	r3, [pc, #32]	; (7f10 <sx12xx_init+0x34>)
    7ef0:	6123      	str	r3, [r4, #16]
	dev_data.events.RxDone = sx12xx_ev_rx_done;
    7ef2:	4b08      	ldr	r3, [pc, #32]	; (7f14 <sx12xx_init+0x38>)
    7ef4:	61a3      	str	r3, [r4, #24]
	Radio.Init(&dev_data.events);
    7ef6:	f104 0010 	add.w	r0, r4, #16
    7efa:	682b      	ldr	r3, [r5, #0]
    7efc:	4798      	blx	r3
	 * The required `lora_config` call before transmission or reception
	 * will bring the radio out of sleep mode before it is used. The radio
	 * is automatically placed back into sleep mode upon TX or RX
	 * completion.
	 */
	Radio.Sleep();
    7efe:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    7f00:	4798      	blx	r3

	return 0;
}
    7f02:	2000      	movs	r0, #0
    7f04:	bd38      	pop	{r3, r4, r5, pc}
    7f06:	bf00      	nop
    7f08:	20000d00 	.word	0x20000d00
    7f0c:	0001cecc 	.word	0x0001cecc
    7f10:	00007cc9 	.word	0x00007cc9
    7f14:	00007cd5 	.word	0x00007cd5

00007f18 <sx127x_dio_work_handle>:
	k_sleep(K_MSEC(6));
}

static void sx127x_dio_work_handle(struct k_work *work)
{
	int dio = work - dev_data.dio_work;
    7f18:	4b03      	ldr	r3, [pc, #12]	; (7f28 <sx127x_dio_work_handle+0x10>)
    7f1a:	1ac0      	subs	r0, r0, r3
    7f1c:	1100      	asrs	r0, r0, #4

	(*DioIrq[dio])(NULL);
    7f1e:	4b03      	ldr	r3, [pc, #12]	; (7f2c <sx127x_dio_work_handle+0x14>)
    7f20:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    7f24:	2000      	movs	r0, #0
    7f26:	4718      	bx	r3
    7f28:	20000d74 	.word	0x20000d74
    7f2c:	200000b0 	.word	0x200000b0

00007f30 <sx127x_irq_callback>:
}

static void sx127x_irq_callback(const struct device *dev,
				struct gpio_callback *cb, uint32_t pins)
{
    7f30:	b570      	push	{r4, r5, r6, lr}
	unsigned int i, pin;

	pin = find_lsb_set(pins) - 1;

	for (i = 0; i < SX127X_MAX_DIO; i++) {
		if (dev == dev_data.dio_dev[i] &&
    7f32:	4c0f      	ldr	r4, [pc, #60]	; (7f70 <sx127x_irq_callback+0x40>)
    7f34:	6963      	ldr	r3, [r4, #20]
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
    7f36:	2a00      	cmp	r2, #0
    7f38:	fa92 f5a2 	rbit	r5, r2
    7f3c:	fab5 f585 	clz	r5, r5
    7f40:	bf08      	it	eq
    7f42:	f04f 35ff 	moveq.w	r5, #4294967295
    7f46:	4298      	cmp	r0, r3
{
    7f48:	4606      	mov	r6, r0
		if (dev == dev_data.dio_dev[i] &&
    7f4a:	d105      	bne.n	7f58 <sx127x_irq_callback+0x28>
    7f4c:	2d0a      	cmp	r5, #10
    7f4e:	d103      	bne.n	7f58 <sx127x_irq_callback+0x28>
		    pin == sx127x_dios[i].pin) {
			k_work_submit(&dev_data.dio_work[i]);
    7f50:	f104 001c 	add.w	r0, r4, #28
    7f54:	f002 fe52 	bl	abfc <k_work_submit>
		if (dev == dev_data.dio_dev[i] &&
    7f58:	69a3      	ldr	r3, [r4, #24]
    7f5a:	429e      	cmp	r6, r3
    7f5c:	d106      	bne.n	7f6c <sx127x_irq_callback+0x3c>
    7f5e:	2d0a      	cmp	r5, #10
    7f60:	d104      	bne.n	7f6c <sx127x_irq_callback+0x3c>
		}
	}
}
    7f62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_submit(&dev_data.dio_work[i]);
    7f66:	4803      	ldr	r0, [pc, #12]	; (7f74 <sx127x_irq_callback+0x44>)
    7f68:	f002 be48 	b.w	abfc <k_work_submit>
}
    7f6c:	bd70      	pop	{r4, r5, r6, pc}
    7f6e:	bf00      	nop
    7f70:	20000d58 	.word	0x20000d58
    7f74:	20000d84 	.word	0x20000d84

00007f78 <SX1276Reset>:
{
    7f78:	b510      	push	{r4, lr}
	gpio_pin_set(dev_data.reset, GPIO_RESET_PIN, 1);
    7f7a:	4c09      	ldr	r4, [pc, #36]	; (7fa0 <SX1276Reset+0x28>)
    7f7c:	2101      	movs	r1, #1
    7f7e:	6820      	ldr	r0, [r4, #0]
    7f80:	f013 fbcf 	bl	1b722 <gpio_pin_set.constprop.0>
	return z_impl_k_sleep(timeout);
    7f84:	2100      	movs	r1, #0
    7f86:	2021      	movs	r0, #33	; 0x21
    7f88:	f003 f960 	bl	b24c <z_impl_k_sleep>
	gpio_pin_set(dev_data.reset, GPIO_RESET_PIN, 0);
    7f8c:	6820      	ldr	r0, [r4, #0]
    7f8e:	2100      	movs	r1, #0
    7f90:	f013 fbc7 	bl	1b722 <gpio_pin_set.constprop.0>
    7f94:	20c5      	movs	r0, #197	; 0xc5
}
    7f96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7f9a:	2100      	movs	r1, #0
    7f9c:	f003 b956 	b.w	b24c <z_impl_k_sleep>
    7fa0:	20000d58 	.word	0x20000d58

00007fa4 <SX1276IoIrqInit>:

void SX127xIoIrqInit(DioIrqHandler **irqHandlers)
{
    7fa4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7fa8:	4c3e      	ldr	r4, [pc, #248]	; (80a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa4>)
    7faa:	4e3f      	ldr	r6, [pc, #252]	; (80a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa8>)
    7fac:	4d3f      	ldr	r5, [pc, #252]	; (80ac <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xac>)
    7fae:	4680      	mov	r8, r0
    7fb0:	f1a0 0a04 	sub.w	sl, r0, #4
    7fb4:	f1a4 0914 	sub.w	r9, r4, #20
	unsigned int i;
	static struct gpio_callback callbacks[SX127X_MAX_DIO];

	/* Setup DIO gpios */
	for (i = 0; i < SX127X_MAX_DIO; i++) {
		if (!irqHandlers[i]) {
    7fb8:	f8cd a004 	str.w	sl, [sp, #4]
    7fbc:	f85a 3f04 	ldr.w	r3, [sl, #4]!
    7fc0:	2b00      	cmp	r3, #0
    7fc2:	d061      	beq.n	8088 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x88>
			continue;
		}

		dev_data.dio_dev[i] = device_get_binding(sx127x_dios[i].port);
    7fc4:	682f      	ldr	r7, [r5, #0]
    7fc6:	4638      	mov	r0, r7
    7fc8:	f002 f9ba 	bl	a340 <z_impl_device_get_binding>
    7fcc:	6020      	str	r0, [r4, #0]
		if (dev_data.dio_dev[i] == NULL) {
    7fce:	b968      	cbnz	r0, 7fec <SX1276IoIrqInit+0x48>
    7fd0:	4b37      	ldr	r3, [pc, #220]	; (80b0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb0>)
    7fd2:	4a38      	ldr	r2, [pc, #224]	; (80b4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb4>)
			LOG_ERR("Cannot get pointer to %s device",
    7fd4:	4838      	ldr	r0, [pc, #224]	; (80b8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb8>)
    7fd6:	1ad2      	subs	r2, r2, r3
    7fd8:	08d2      	lsrs	r2, r2, #3
    7fda:	0192      	lsls	r2, r2, #6
    7fdc:	f042 0201 	orr.w	r2, r2, #1
    7fe0:	4639      	mov	r1, r7
		gpio_pin_interrupt_configure(dev_data.dio_dev[i],
					     sx127x_dios[i].pin,
					     GPIO_INT_EDGE_TO_ACTIVE);
	}

}
    7fe2:	b003      	add	sp, #12
    7fe4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			LOG_ERR("Cannot get pointer to %s device",
    7fe8:	f012 bdc2 	b.w	1ab70 <log_1>
		k_work_init(&dev_data.dio_work[i], sx127x_dio_work_handle);
    7fec:	f109 001c 	add.w	r0, r9, #28
    7ff0:	4932      	ldr	r1, [pc, #200]	; (80bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xbc>)
    7ff2:	f013 fedb 	bl	1bdac <k_work_init>
				   | sx127x_dios[i].flags);
    7ff6:	796b      	ldrb	r3, [r5, #5]
		gpio_pin_configure(dev_data.dio_dev[i], sx127x_dios[i].pin,
    7ff8:	6820      	ldr	r0, [r4, #0]
    7ffa:	792f      	ldrb	r7, [r5, #4]
    7ffc:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
    8000:	f442 7280 	orr.w	r2, r2, #256	; 0x100
	struct gpio_driver_data *data =
    8004:	f8d0 c010 	ldr.w	ip, [r0, #16]
	const struct gpio_driver_api *api =
    8008:	f8d0 e008 	ldr.w	lr, [r0, #8]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    800c:	f8dc 1000 	ldr.w	r1, [ip]
    8010:	f013 0f01 	tst.w	r3, #1
    8014:	f04f 0301 	mov.w	r3, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
    8018:	fa03 f307 	lsl.w	r3, r3, r7
    801c:	bf14      	ite	ne
    801e:	430b      	orrne	r3, r1
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    8020:	ea21 0303 	biceq.w	r3, r1, r3
    8024:	f8cc 3000 	str.w	r3, [ip]
	return api->pin_configure(port, pin, flags);
    8028:	4639      	mov	r1, r7
    802a:	f8de 3000 	ldr.w	r3, [lr]
    802e:	4798      	blx	r3
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    8030:	4b23      	ldr	r3, [pc, #140]	; (80c0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc0>)
		if (gpio_add_callback(dev_data.dio_dev[i], &callbacks[i]) < 0) {
    8032:	6820      	ldr	r0, [r4, #0]
				   BIT(sx127x_dios[i].pin));
    8034:	2201      	movs	r2, #1
    8036:	fa02 fb07 	lsl.w	fp, r2, r7
	callback->pin_mask = pin_mask;
    803a:	e9c6 3b01 	strd	r3, fp, [r6, #4]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
    803e:	6883      	ldr	r3, [r0, #8]
    8040:	69db      	ldr	r3, [r3, #28]
    8042:	b963      	cbnz	r3, 805e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5e>
    8044:	4b1a      	ldr	r3, [pc, #104]	; (80b0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb0>)
    8046:	491b      	ldr	r1, [pc, #108]	; (80b4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb4>)
			LOG_ERR("Could not set gpio callback.");
    8048:	481e      	ldr	r0, [pc, #120]	; (80c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc4>)
    804a:	1ac9      	subs	r1, r1, r3
    804c:	08c9      	lsrs	r1, r1, #3
    804e:	0189      	lsls	r1, r1, #6
    8050:	f041 0101 	orr.w	r1, r1, #1
}
    8054:	b003      	add	sp, #12
    8056:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			LOG_ERR("Could not set gpio callback.");
    805a:	f012 bd7c 	b.w	1ab56 <log_0>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    805e:	4631      	mov	r1, r6
    8060:	4798      	blx	r3
		if (gpio_add_callback(dev_data.dio_dev[i], &callbacks[i]) < 0) {
    8062:	2800      	cmp	r0, #0
    8064:	dbee      	blt.n	8044 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x44>
		gpio_pin_interrupt_configure(dev_data.dio_dev[i],
    8066:	6820      	ldr	r0, [r4, #0]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    8068:	6902      	ldr	r2, [r0, #16]
	const struct gpio_driver_api *api =
    806a:	6883      	ldr	r3, [r0, #8]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    806c:	6812      	ldr	r2, [r2, #0]
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
    806e:	ea1b 0f02 	tst.w	fp, r2
	return api->pin_interrupt_configure(port, pin, mode, trig);
    8072:	4639      	mov	r1, r7
    8074:	f8d3 b018 	ldr.w	fp, [r3, #24]
    8078:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
    807c:	bf14      	ite	ne
    807e:	f44f 3300 	movne.w	r3, #131072	; 0x20000
    8082:	f44f 2380 	moveq.w	r3, #262144	; 0x40000
    8086:	47d8      	blx	fp
	for (i = 0; i < SX127X_MAX_DIO; i++) {
    8088:	9b01      	ldr	r3, [sp, #4]
    808a:	4543      	cmp	r3, r8
    808c:	f104 0404 	add.w	r4, r4, #4
    8090:	f106 060c 	add.w	r6, r6, #12
    8094:	f109 0910 	add.w	r9, r9, #16
    8098:	f105 0508 	add.w	r5, r5, #8
    809c:	d18c      	bne.n	7fb8 <SX1276IoIrqInit+0x14>
}
    809e:	b003      	add	sp, #12
    80a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    80a4:	20000d6c 	.word	0x20000d6c
    80a8:	20000d40 	.word	0x20000d40
    80ac:	0001cf38 	.word	0x0001cf38
    80b0:	0001c8a0 	.word	0x0001c8a0
    80b4:	0001c8e0 	.word	0x0001c8e0
    80b8:	0001deb4 	.word	0x0001deb4
    80bc:	00007f19 	.word	0x00007f19
    80c0:	00007f31 	.word	0x00007f31
    80c4:	0001df13 	.word	0x0001df13

000080c8 <sx127x_read>:

	return spi_write(dev_data.spi, &dev_data.spi_cfg, &tx);
}

int sx127x_read(uint8_t reg_addr, uint8_t *data, uint8_t len)
{
    80c8:	b510      	push	{r4, lr}
    80ca:	b08a      	sub	sp, #40	; 0x28
	const struct spi_buf buf[2] = {
    80cc:	f10d 0307 	add.w	r3, sp, #7
    80d0:	9306      	str	r3, [sp, #24]
    80d2:	2301      	movs	r3, #1
    80d4:	e9cd 3107 	strd	r3, r1, [sp, #28]
		return spi_transceive(dev_data.spi, &dev_data.spi_cfg, &tx, &rx);
    80d8:	4909      	ldr	r1, [pc, #36]	; (8100 <sx127x_read+0x38>)
	return sx127x_transceive(reg_addr, false, data, len);
    80da:	9209      	str	r2, [sp, #36]	; 0x24
	struct spi_buf_set tx = {
    80dc:	2302      	movs	r3, #2
    80de:	aa06      	add	r2, sp, #24
    80e0:	f88d 0007 	strb.w	r0, [sp, #7]
		const struct spi_buf_set rx = {
    80e4:	e9cd 3203 	strd	r3, r2, [sp, #12]
		return spi_transceive(dev_data.spi, &dev_data.spi_cfg, &tx, &rx);
    80e8:	6848      	ldr	r0, [r1, #4]
	struct spi_buf_set tx = {
    80ea:	9202      	str	r2, [sp, #8]
		const struct spi_buf_set rx = {
    80ec:	9305      	str	r3, [sp, #20]
					const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
		(const struct spi_driver_api *)dev->api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
    80ee:	6883      	ldr	r3, [r0, #8]
    80f0:	aa02      	add	r2, sp, #8
    80f2:	681c      	ldr	r4, [r3, #0]
    80f4:	3108      	adds	r1, #8
    80f6:	ab04      	add	r3, sp, #16
    80f8:	47a0      	blx	r4
}
    80fa:	b00a      	add	sp, #40	; 0x28
    80fc:	bd10      	pop	{r4, pc}
    80fe:	bf00      	nop
    8100:	20000d58 	.word	0x20000d58

00008104 <SX1276ReadBuffer>:
		LOG_ERR("Unable to write address: 0x%x", addr);
	}
}

void SX127xReadBuffer(uint32_t addr, uint8_t *buffer, uint8_t size)
{
    8104:	b510      	push	{r4, lr}
    8106:	4604      	mov	r4, r0
	int ret;

	ret = sx127x_read(addr, buffer, size);
    8108:	b2c0      	uxtb	r0, r0
    810a:	f7ff ffdd 	bl	80c8 <sx127x_read>
	if (ret < 0) {
    810e:	2800      	cmp	r0, #0
    8110:	da0c      	bge.n	812c <SX1276ReadBuffer+0x28>
    8112:	4a07      	ldr	r2, [pc, #28]	; (8130 <SX1276ReadBuffer+0x2c>)
    8114:	4b07      	ldr	r3, [pc, #28]	; (8134 <SX1276ReadBuffer+0x30>)
		LOG_ERR("Unable to read address: 0x%x", addr);
    8116:	4808      	ldr	r0, [pc, #32]	; (8138 <SX1276ReadBuffer+0x34>)
    8118:	1ad2      	subs	r2, r2, r3
    811a:	08d2      	lsrs	r2, r2, #3
    811c:	0192      	lsls	r2, r2, #6
    811e:	4621      	mov	r1, r4
    8120:	f042 0201 	orr.w	r2, r2, #1
	}
}
    8124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_ERR("Unable to read address: 0x%x", addr);
    8128:	f012 bd22 	b.w	1ab70 <log_1>
}
    812c:	bd10      	pop	{r4, pc}
    812e:	bf00      	nop
    8130:	0001c8e0 	.word	0x0001c8e0
    8134:	0001c8a0 	.word	0x0001c8a0
    8138:	0001df30 	.word	0x0001df30

0000813c <sx127x_lora_init>:

	return 0;
}

static int sx127x_lora_init(const struct device *dev)
{
    813c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    813e:	4606      	mov	r6, r0
    8140:	4839      	ldr	r0, [pc, #228]	; (8228 <sx127x_lora_init+0xec>)
	static struct spi_cs_control spi_cs;
#endif
	int ret;
	uint8_t regval;

	dev_data.spi = device_get_binding(DT_INST_BUS_LABEL(0));
    8142:	4d3a      	ldr	r5, [pc, #232]	; (822c <sx127x_lora_init+0xf0>)
    8144:	f002 f8fc 	bl	a340 <z_impl_device_get_binding>
    8148:	6068      	str	r0, [r5, #4]
	if (!dev_data.spi) {
    814a:	b978      	cbnz	r0, 816c <sx127x_lora_init+0x30>
    814c:	4b38      	ldr	r3, [pc, #224]	; (8230 <sx127x_lora_init+0xf4>)
    814e:	4a39      	ldr	r2, [pc, #228]	; (8234 <sx127x_lora_init+0xf8>)
		LOG_ERR("Cannot get pointer to %s device",
    8150:	4935      	ldr	r1, [pc, #212]	; (8228 <sx127x_lora_init+0xec>)
    8152:	4839      	ldr	r0, [pc, #228]	; (8238 <sx127x_lora_init+0xfc>)
    8154:	1ad2      	subs	r2, r2, r3
    8156:	08d2      	lsrs	r2, r2, #3
    8158:	0192      	lsls	r2, r2, #6
    815a:	f042 0201 	orr.w	r2, r2, #1
    815e:	f012 fd07 	bl	1ab70 <log_1>
			DT_INST_BUS_LABEL(0));
		return -EINVAL;
    8162:	f06f 0415 	mvn.w	r4, #21
		LOG_ERR("Failed to initialize SX12xx common");
		return ret;
	}

	return 0;
}
    8166:	4620      	mov	r0, r4
    8168:	b002      	add	sp, #8
    816a:	bd70      	pop	{r4, r5, r6, pc}
	dev_data.spi_cfg.operation = SPI_WORD_SET(8) | SPI_TRANSFER_MSB;
    816c:	4a33      	ldr	r2, [pc, #204]	; (823c <sx127x_lora_init+0x100>)
    816e:	f44f 7380 	mov.w	r3, #256	; 0x100
    8172:	e9c5 2302 	strd	r2, r3, [r5, #8]
    8176:	4832      	ldr	r0, [pc, #200]	; (8240 <sx127x_lora_init+0x104>)
    8178:	f002 f8e2 	bl	a340 <z_impl_device_get_binding>
	spi_cs.gpio_dev = device_get_binding(DT_INST_SPI_DEV_CS_GPIOS_LABEL(0));
    817c:	4b31      	ldr	r3, [pc, #196]	; (8244 <sx127x_lora_init+0x108>)
    817e:	6018      	str	r0, [r3, #0]
	if (!spi_cs.gpio_dev) {
    8180:	b968      	cbnz	r0, 819e <sx127x_lora_init+0x62>
    8182:	4a2c      	ldr	r2, [pc, #176]	; (8234 <sx127x_lora_init+0xf8>)
    8184:	4b2a      	ldr	r3, [pc, #168]	; (8230 <sx127x_lora_init+0xf4>)
		LOG_ERR("Cannot get pointer to %s device",
    8186:	492e      	ldr	r1, [pc, #184]	; (8240 <sx127x_lora_init+0x104>)
    8188:	482b      	ldr	r0, [pc, #172]	; (8238 <sx127x_lora_init+0xfc>)
    818a:	1ad2      	subs	r2, r2, r3
    818c:	08d2      	lsrs	r2, r2, #3
    818e:	0192      	lsls	r2, r2, #6
    8190:	f042 0201 	orr.w	r2, r2, #1
    8194:	f012 fcec 	bl	1ab70 <log_1>
		return -EIO;
    8198:	f06f 0404 	mvn.w	r4, #4
    819c:	e7e3      	b.n	8166 <sx127x_lora_init+0x2a>
	spi_cs.delay = 0U;
    819e:	2200      	movs	r2, #0
    81a0:	605a      	str	r2, [r3, #4]
	spi_cs.gpio_pin = GPIO_CS_PIN;
    81a2:	f240 120d 	movw	r2, #269	; 0x10d
    81a6:	811a      	strh	r2, [r3, #8]
	dev_data.spi_cfg.cs = &spi_cs;
    81a8:	612b      	str	r3, [r5, #16]
	ret = sx12xx_configure_pin(reset, GPIO_OUTPUT_ACTIVE);
    81aa:	4927      	ldr	r1, [pc, #156]	; (8248 <sx127x_lora_init+0x10c>)
    81ac:	f641 2301 	movw	r3, #6657	; 0x1a01
    81b0:	221f      	movs	r2, #31
    81b2:	4628      	mov	r0, r5
    81b4:	f7ff fda6 	bl	7d04 <__sx12xx_configure_pin>
	if (ret) {
    81b8:	4604      	mov	r4, r0
    81ba:	2800      	cmp	r0, #0
    81bc:	d1d3      	bne.n	8166 <sx127x_lora_init+0x2a>
    81be:	2100      	movs	r1, #0
    81c0:	f640 40cd 	movw	r0, #3277	; 0xccd
    81c4:	f003 f842 	bl	b24c <z_impl_k_sleep>
	gpio_pin_set(dev_data.reset, GPIO_RESET_PIN, 0);
    81c8:	6828      	ldr	r0, [r5, #0]
    81ca:	4621      	mov	r1, r4
    81cc:	f013 faa9 	bl	1b722 <gpio_pin_set.constprop.0>
    81d0:	2100      	movs	r1, #0
    81d2:	f640 40cd 	movw	r0, #3277	; 0xccd
    81d6:	f003 f839 	bl	b24c <z_impl_k_sleep>
	ret = sx127x_read(REG_VERSION, &regval, 1);
    81da:	2201      	movs	r2, #1
    81dc:	f10d 0107 	add.w	r1, sp, #7
    81e0:	2042      	movs	r0, #66	; 0x42
    81e2:	f7ff ff71 	bl	80c8 <sx127x_read>
	if (ret < 0) {
    81e6:	4d13      	ldr	r5, [pc, #76]	; (8234 <sx127x_lora_init+0xf8>)
    81e8:	4b11      	ldr	r3, [pc, #68]	; (8230 <sx127x_lora_init+0xf4>)
    81ea:	1aed      	subs	r5, r5, r3
    81ec:	08ed      	lsrs	r5, r5, #3
    81ee:	2800      	cmp	r0, #0
    81f0:	ea4f 1585 	mov.w	r5, r5, lsl #6
    81f4:	da05      	bge.n	8202 <sx127x_lora_init+0xc6>
		LOG_ERR("Unable to read version info");
    81f6:	4815      	ldr	r0, [pc, #84]	; (824c <sx127x_lora_init+0x110>)
    81f8:	f045 0101 	orr.w	r1, r5, #1
    81fc:	f012 fcab 	bl	1ab56 <log_0>
    8200:	e7ca      	b.n	8198 <sx127x_lora_init+0x5c>
	LOG_INF("SX127x version 0x%02x found", regval);
    8202:	f89d 1007 	ldrb.w	r1, [sp, #7]
    8206:	4812      	ldr	r0, [pc, #72]	; (8250 <sx127x_lora_init+0x114>)
    8208:	f045 0203 	orr.w	r2, r5, #3
    820c:	f012 fcb0 	bl	1ab70 <log_1>
	ret = sx12xx_init(dev);
    8210:	4630      	mov	r0, r6
    8212:	f7ff fe63 	bl	7edc <sx12xx_init>
	if (ret < 0) {
    8216:	1e06      	subs	r6, r0, #0
    8218:	daa5      	bge.n	8166 <sx127x_lora_init+0x2a>
		LOG_ERR("Failed to initialize SX12xx common");
    821a:	480e      	ldr	r0, [pc, #56]	; (8254 <sx127x_lora_init+0x118>)
    821c:	f045 0101 	orr.w	r1, r5, #1
    8220:	f012 fc99 	bl	1ab56 <log_0>
		return ret;
    8224:	4634      	mov	r4, r6
    8226:	e79e      	b.n	8166 <sx127x_lora_init+0x2a>
    8228:	0001dea1 	.word	0x0001dea1
    822c:	20000d58 	.word	0x20000d58
    8230:	0001c8a0 	.word	0x0001c8a0
    8234:	0001c8e0 	.word	0x0001c8e0
    8238:	0001deb4 	.word	0x0001deb4
    823c:	000f4240 	.word	0x000f4240
    8240:	0001dd45 	.word	0x0001dd45
    8244:	20000d94 	.word	0x20000d94
    8248:	0001dd4c 	.word	0x0001dd4c
    824c:	0001df4d 	.word	0x0001df4d
    8250:	0001df69 	.word	0x0001df69
    8254:	0001df85 	.word	0x0001df85

00008258 <sx127x_write>:
{
    8258:	b510      	push	{r4, lr}
    825a:	b088      	sub	sp, #32
	const struct spi_buf buf[2] = {
    825c:	f10d 0307 	add.w	r3, sp, #7
    8260:	9304      	str	r3, [sp, #16]
    8262:	2301      	movs	r3, #1
    8264:	e9cd 3105 	strd	r3, r1, [sp, #20]
	struct spi_buf_set tx = {
    8268:	ab04      	add	r3, sp, #16
	return spi_write(dev_data.spi, &dev_data.spi_cfg, &tx);
    826a:	4909      	ldr	r1, [pc, #36]	; (8290 <sx127x_write+0x38>)
	struct spi_buf_set tx = {
    826c:	9302      	str	r3, [sp, #8]
	return sx127x_transceive(reg_addr | BIT(7), true, data, len);
    826e:	f060 007f 	orn	r0, r0, #127	; 0x7f
	struct spi_buf_set tx = {
    8272:	2302      	movs	r3, #2
    8274:	f88d 0007 	strb.w	r0, [sp, #7]
	return sx127x_transceive(reg_addr | BIT(7), true, data, len);
    8278:	9207      	str	r2, [sp, #28]
	return spi_write(dev_data.spi, &dev_data.spi_cfg, &tx);
    827a:	6848      	ldr	r0, [r1, #4]
	struct spi_buf_set tx = {
    827c:	9303      	str	r3, [sp, #12]
    827e:	6883      	ldr	r3, [r0, #8]
    8280:	aa02      	add	r2, sp, #8
    8282:	681c      	ldr	r4, [r3, #0]
    8284:	3108      	adds	r1, #8
    8286:	2300      	movs	r3, #0
    8288:	47a0      	blx	r4
}
    828a:	b008      	add	sp, #32
    828c:	bd10      	pop	{r4, pc}
    828e:	bf00      	nop
    8290:	20000d58 	.word	0x20000d58

00008294 <SX1276WriteBuffer>:
{
    8294:	b510      	push	{r4, lr}
    8296:	4604      	mov	r4, r0
	ret = sx127x_write(addr, buffer, size);
    8298:	b2c0      	uxtb	r0, r0
    829a:	f7ff ffdd 	bl	8258 <sx127x_write>
	if (ret < 0) {
    829e:	2800      	cmp	r0, #0
    82a0:	da0c      	bge.n	82bc <SX1276WriteBuffer+0x28>
    82a2:	4a07      	ldr	r2, [pc, #28]	; (82c0 <SX1276WriteBuffer+0x2c>)
    82a4:	4b07      	ldr	r3, [pc, #28]	; (82c4 <SX1276WriteBuffer+0x30>)
		LOG_ERR("Unable to write address: 0x%x", addr);
    82a6:	4808      	ldr	r0, [pc, #32]	; (82c8 <SX1276WriteBuffer+0x34>)
    82a8:	1ad2      	subs	r2, r2, r3
    82aa:	08d2      	lsrs	r2, r2, #3
    82ac:	0192      	lsls	r2, r2, #6
    82ae:	4621      	mov	r1, r4
    82b0:	f042 0201 	orr.w	r2, r2, #1
}
    82b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_ERR("Unable to write address: 0x%x", addr);
    82b8:	f012 bc5a 	b.w	1ab70 <log_1>
}
    82bc:	bd10      	pop	{r4, pc}
    82be:	bf00      	nop
    82c0:	0001c8e0 	.word	0x0001c8e0
    82c4:	0001c8a0 	.word	0x0001c8a0
    82c8:	0001dfa8 	.word	0x0001dfa8

000082cc <SX1276SetRfTxPower>:
{
    82cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t pa_config = 0;
    82ce:	2300      	movs	r3, #0
{
    82d0:	4605      	mov	r5, r0
	ret = sx127x_read(REG_PADAC, &pa_dac, 1);
    82d2:	2201      	movs	r2, #1
    82d4:	f10d 0107 	add.w	r1, sp, #7
    82d8:	204d      	movs	r0, #77	; 0x4d
	uint8_t pa_config = 0;
    82da:	f88d 3006 	strb.w	r3, [sp, #6]
	uint8_t pa_dac = 0;
    82de:	f88d 3007 	strb.w	r3, [sp, #7]
	ret = sx127x_read(REG_PADAC, &pa_dac, 1);
    82e2:	f7ff fef1 	bl	80c8 <sx127x_read>
	if (ret < 0) {
    82e6:	2800      	cmp	r0, #0
    82e8:	da0b      	bge.n	8302 <SX1276SetRfTxPower+0x36>
    82ea:	4928      	ldr	r1, [pc, #160]	; (838c <SX1276SetRfTxPower+0xc0>)
    82ec:	4b28      	ldr	r3, [pc, #160]	; (8390 <SX1276SetRfTxPower+0xc4>)
		LOG_ERR("Unable to read PA dac");
    82ee:	4829      	ldr	r0, [pc, #164]	; (8394 <SX1276SetRfTxPower+0xc8>)
    82f0:	1ac9      	subs	r1, r1, r3
    82f2:	08c9      	lsrs	r1, r1, #3
    82f4:	0189      	lsls	r1, r1, #6
    82f6:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Unable to write PA dac");
    82fa:	f012 fc2c 	bl	1ab56 <log_0>
}
    82fe:	b003      	add	sp, #12
    8300:	bd30      	pop	{r4, r5, pc}
	pa_dac &= ~SX127X_PADAC_20DBM_MASK;
    8302:	2d14      	cmp	r5, #20
    8304:	4629      	mov	r1, r5
    8306:	bfa8      	it	ge
    8308:	2114      	movge	r1, #20
    830a:	2902      	cmp	r1, #2
    830c:	f89d 4007 	ldrb.w	r4, [sp, #7]
		pa_config |= SX127X_PACONFIG_PASELECT_PABOOST;
    8310:	f99d 2006 	ldrsb.w	r2, [sp, #6]
    8314:	bfb8      	it	lt
    8316:	2102      	movlt	r1, #2
		if (power > 17) {
    8318:	2d11      	cmp	r5, #17
	pa_dac &= ~SX127X_PADAC_20DBM_MASK;
    831a:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
			pa_config |= (power - 5) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
    831e:	bfcc      	ite	gt
    8320:	3905      	subgt	r1, #5
			pa_config |= (power - 2) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
    8322:	3902      	suble	r1, #2
    8324:	f062 037f 	orn	r3, r2, #127	; 0x7f
			pa_dac |= SX127X_PADAC_20DBM_ON;
    8328:	bfcc      	ite	gt
    832a:	f044 0407 	orrgt.w	r4, r4, #7
			pa_dac |= SX127X_PADAC_20DBM_OFF;
    832e:	f044 0404 	orrle.w	r4, r4, #4
			pa_config |= (power - 2) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
    8332:	ea43 0301 	orr.w	r3, r3, r1
	ret = sx127x_write(REG_PACONFIG, &pa_config, 1);
    8336:	f04f 0201 	mov.w	r2, #1
    833a:	f10d 0106 	add.w	r1, sp, #6
    833e:	f04f 0009 	mov.w	r0, #9
			pa_dac |= SX127X_PADAC_20DBM_ON;
    8342:	bfcc      	ite	gt
    8344:	f88d 4007 	strbgt.w	r4, [sp, #7]
			pa_dac |= SX127X_PADAC_20DBM_OFF;
    8348:	f88d 4007 	strble.w	r4, [sp, #7]
			pa_config |= (power - 2) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
    834c:	f88d 3006 	strb.w	r3, [sp, #6]
	ret = sx127x_write(REG_PACONFIG, &pa_config, 1);
    8350:	f7ff ff82 	bl	8258 <sx127x_write>
	if (ret < 0) {
    8354:	2800      	cmp	r0, #0
    8356:	da08      	bge.n	836a <SX1276SetRfTxPower+0x9e>
    8358:	490c      	ldr	r1, [pc, #48]	; (838c <SX1276SetRfTxPower+0xc0>)
    835a:	4b0d      	ldr	r3, [pc, #52]	; (8390 <SX1276SetRfTxPower+0xc4>)
		LOG_ERR("Unable to write PA config");
    835c:	480e      	ldr	r0, [pc, #56]	; (8398 <SX1276SetRfTxPower+0xcc>)
    835e:	1ac9      	subs	r1, r1, r3
    8360:	08c9      	lsrs	r1, r1, #3
    8362:	0189      	lsls	r1, r1, #6
    8364:	f041 0101 	orr.w	r1, r1, #1
    8368:	e7c7      	b.n	82fa <SX1276SetRfTxPower+0x2e>
	ret = sx127x_write(REG_PADAC, &pa_dac, 1);
    836a:	2201      	movs	r2, #1
    836c:	f10d 0107 	add.w	r1, sp, #7
    8370:	204d      	movs	r0, #77	; 0x4d
    8372:	f7ff ff71 	bl	8258 <sx127x_write>
	if (ret < 0) {
    8376:	2800      	cmp	r0, #0
    8378:	dac1      	bge.n	82fe <SX1276SetRfTxPower+0x32>
    837a:	4904      	ldr	r1, [pc, #16]	; (838c <SX1276SetRfTxPower+0xc0>)
    837c:	4b04      	ldr	r3, [pc, #16]	; (8390 <SX1276SetRfTxPower+0xc4>)
		LOG_ERR("Unable to write PA dac");
    837e:	4807      	ldr	r0, [pc, #28]	; (839c <SX1276SetRfTxPower+0xd0>)
    8380:	1ac9      	subs	r1, r1, r3
    8382:	08c9      	lsrs	r1, r1, #3
    8384:	0189      	lsls	r1, r1, #6
    8386:	f041 0101 	orr.w	r1, r1, #1
    838a:	e7b6      	b.n	82fa <SX1276SetRfTxPower+0x2e>
    838c:	0001c8e0 	.word	0x0001c8e0
    8390:	0001c8a0 	.word	0x0001c8a0
    8394:	0001dfc6 	.word	0x0001dfc6
    8398:	0001dfdc 	.word	0x0001dfdc
    839c:	0001dff6 	.word	0x0001dff6

000083a0 <SX1276GetDio1PinState>:
	if (gpio_pin_get(dev_data.dio_dev[1], sx127x_dios[1].pin) > 0) {
    83a0:	4b09      	ldr	r3, [pc, #36]	; (83c8 <SX1276GetDio1PinState+0x28>)
{
    83a2:	b513      	push	{r0, r1, r4, lr}
	if (gpio_pin_get(dev_data.dio_dev[1], sx127x_dios[1].pin) > 0) {
    83a4:	6998      	ldr	r0, [r3, #24]
	const struct gpio_driver_data *const data =
    83a6:	6904      	ldr	r4, [r0, #16]
	return api->port_get_raw(port, value);
    83a8:	6883      	ldr	r3, [r0, #8]
    83aa:	a901      	add	r1, sp, #4
    83ac:	685b      	ldr	r3, [r3, #4]
    83ae:	4798      	blx	r3
	if (ret == 0) {
    83b0:	b920      	cbnz	r0, 83bc <SX1276GetDio1PinState+0x1c>
		*value ^= data->invert;
    83b2:	6823      	ldr	r3, [r4, #0]
    83b4:	9801      	ldr	r0, [sp, #4]
    83b6:	4058      	eors	r0, r3
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
    83b8:	f3c0 2080 	ubfx	r0, r0, #10, #1
}
    83bc:	2800      	cmp	r0, #0
    83be:	bfd4      	ite	le
    83c0:	2000      	movle	r0, #0
    83c2:	2001      	movgt	r0, #1
    83c4:	b002      	add	sp, #8
    83c6:	bd10      	pop	{r4, pc}
    83c8:	20000d58 	.word	0x20000d58

000083cc <TimerInsertNewHeadTimer>:
    obj->Next = NULL;
}

static void TimerInsertNewHeadTimer( TimerEvent_t *obj )
{
    TimerEvent_t* cur = TimerListHead;
    83cc:	4b04      	ldr	r3, [pc, #16]	; (83e0 <TimerInsertNewHeadTimer+0x14>)
    83ce:	681a      	ldr	r2, [r3, #0]

    if( cur != NULL )
    83d0:	b10a      	cbz	r2, 83d6 <TimerInsertNewHeadTimer+0xa>
    {
        cur->IsNext2Expire = false;
    83d2:	2100      	movs	r1, #0
    83d4:	7251      	strb	r1, [r2, #9]
    }

    obj->Next = cur;
    83d6:	6142      	str	r2, [r0, #20]
    TimerListHead = obj;
    83d8:	6018      	str	r0, [r3, #0]
    TimerSetTimeout( TimerListHead );
    83da:	f013 b9c0 	b.w	1b75e <TimerSetTimeout>
    83de:	bf00      	nop
    83e0:	20000da0 	.word	0x20000da0

000083e4 <TimerStart>:
{
    83e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    83e6:	4604      	mov	r4, r0
    CRITICAL_SECTION_BEGIN( );
    83e8:	a801      	add	r0, sp, #4
    83ea:	f013 f988 	bl	1b6fe <BoardCriticalSectionBegin>
    if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
    83ee:	b16c      	cbz	r4, 840c <TimerStart+0x28>
    CRITICAL_SECTION_END( );
}

static bool TimerExists( TimerEvent_t *obj )
{
    TimerEvent_t* cur = TimerListHead;
    83f0:	4d17      	ldr	r5, [pc, #92]	; (8450 <TimerStart+0x6c>)
    83f2:	6829      	ldr	r1, [r5, #0]
    83f4:	460a      	mov	r2, r1

    while( cur != NULL )
    83f6:	b972      	cbnz	r2, 8416 <TimerStart+0x32>
    obj->Timestamp = obj->ReloadValue;
    83f8:	6863      	ldr	r3, [r4, #4]
    83fa:	6023      	str	r3, [r4, #0]
    obj->IsStarted = true;
    83fc:	2301      	movs	r3, #1
    83fe:	8123      	strh	r3, [r4, #8]
    if( TimerListHead == NULL )
    8400:	b969      	cbnz	r1, 841e <TimerStart+0x3a>
        RtcSetTimerContext( );
    8402:	f7ff fc53 	bl	7cac <RtcSetTimerContext>
            TimerInsertNewHeadTimer( obj );
    8406:	4620      	mov	r0, r4
    8408:	f7ff ffe0 	bl	83cc <TimerInsertNewHeadTimer>
        CRITICAL_SECTION_END( );
    840c:	a801      	add	r0, sp, #4
    840e:	f013 f980 	bl	1b712 <BoardCriticalSectionEnd>
}
    8412:	b003      	add	sp, #12
    8414:	bd30      	pop	{r4, r5, pc}
    {
        if( cur == obj )
    8416:	4294      	cmp	r4, r2
    8418:	d0f8      	beq.n	840c <TimerStart+0x28>
        {
            return true;
        }
        cur = cur->Next;
    841a:	6952      	ldr	r2, [r2, #20]
    841c:	e7eb      	b.n	83f6 <TimerStart+0x12>
        elapsedTime = RtcGetTimerElapsedTime( );
    841e:	f7ff fc19 	bl	7c54 <RtcGetTimerElapsedTime>
        obj->Timestamp += elapsedTime;
    8422:	6823      	ldr	r3, [r4, #0]
    8424:	4418      	add	r0, r3
        if( obj->Timestamp < TimerListHead->Timestamp )
    8426:	682b      	ldr	r3, [r5, #0]
        obj->Timestamp += elapsedTime;
    8428:	6020      	str	r0, [r4, #0]
        if( obj->Timestamp < TimerListHead->Timestamp )
    842a:	681a      	ldr	r2, [r3, #0]
    842c:	4290      	cmp	r0, r2
    842e:	d3ea      	bcc.n	8406 <TimerStart+0x22>
    TimerEvent_t* next = TimerListHead->Next;
    8430:	695a      	ldr	r2, [r3, #20]
    while( cur->Next != NULL )
    8432:	6959      	ldr	r1, [r3, #20]
    8434:	b911      	cbnz	r1, 843c <TimerStart+0x58>
    cur->Next = obj;
    8436:	615c      	str	r4, [r3, #20]
    obj->Next = NULL;
    8438:	6161      	str	r1, [r4, #20]
    843a:	e7e7      	b.n	840c <TimerStart+0x28>
        if( obj->Timestamp > next->Timestamp )
    843c:	6811      	ldr	r1, [r2, #0]
    843e:	4288      	cmp	r0, r1
    8440:	d902      	bls.n	8448 <TimerStart+0x64>
            next = next->Next;
    8442:	4613      	mov	r3, r2
    8444:	6952      	ldr	r2, [r2, #20]
    8446:	e7f4      	b.n	8432 <TimerStart+0x4e>
            cur->Next = obj;
    8448:	615c      	str	r4, [r3, #20]
            obj->Next = next;
    844a:	6162      	str	r2, [r4, #20]
            return;
    844c:	e7de      	b.n	840c <TimerStart+0x28>
    844e:	bf00      	nop
    8450:	20000da0 	.word	0x20000da0

00008454 <TimerIrqHandler>:
{
    8454:	b570      	push	{r4, r5, r6, lr}
    uint32_t old =  RtcGetTimerContext( );
    8456:	f7ff fc31 	bl	7cbc <RtcGetTimerContext>
    if( TimerListHead != NULL )
    845a:	4c1b      	ldr	r4, [pc, #108]	; (84c8 <TimerIrqHandler+0x74>)
    uint32_t old =  RtcGetTimerContext( );
    845c:	4605      	mov	r5, r0
    uint32_t now =  RtcSetTimerContext( );
    845e:	f7ff fc25 	bl	7cac <RtcSetTimerContext>
    if( TimerListHead != NULL )
    8462:	6822      	ldr	r2, [r4, #0]
    8464:	b19a      	cbz	r2, 848e <TimerIrqHandler+0x3a>
    uint32_t deltaContext = now - old; // intentional wrap around
    8466:	1b46      	subs	r6, r0, r5
    8468:	4611      	mov	r1, r2
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
    846a:	6949      	ldr	r1, [r1, #20]
    846c:	b929      	cbnz	r1, 847a <TimerIrqHandler+0x26>
        TimerListHead = TimerListHead->Next;
    846e:	6953      	ldr	r3, [r2, #20]
    8470:	6023      	str	r3, [r4, #0]
        ExecuteCallBack( cur->Callback, cur->Context );
    8472:	68d3      	ldr	r3, [r2, #12]
        cur->IsStarted = false;
    8474:	7211      	strb	r1, [r2, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
    8476:	b943      	cbnz	r3, 848a <TimerIrqHandler+0x36>
    8478:	e7fe      	b.n	8478 <TimerIrqHandler+0x24>
            if( next->Timestamp > deltaContext )
    847a:	680b      	ldr	r3, [r1, #0]
    847c:	42b3      	cmp	r3, r6
                next->Timestamp -= deltaContext;
    847e:	bf86      	itte	hi
    8480:	195b      	addhi	r3, r3, r5
    8482:	1a1b      	subhi	r3, r3, r0
                next->Timestamp = 0;
    8484:	2300      	movls	r3, #0
    8486:	600b      	str	r3, [r1, #0]
    8488:	e7ef      	b.n	846a <TimerIrqHandler+0x16>
        ExecuteCallBack( cur->Callback, cur->Context );
    848a:	6910      	ldr	r0, [r2, #16]
    848c:	4798      	blx	r3
        cur->IsStarted = false;
    848e:	2600      	movs	r6, #0
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
    8490:	6823      	ldr	r3, [r4, #0]
    8492:	b92b      	cbnz	r3, 84a0 <TimerIrqHandler+0x4c>
    if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
    8494:	6820      	ldr	r0, [r4, #0]
    8496:	b980      	cbnz	r0, 84ba <TimerIrqHandler+0x66>
}
    8498:	bd70      	pop	{r4, r5, r6, pc}
        ExecuteCallBack( cur->Callback, cur->Context );
    849a:	6918      	ldr	r0, [r3, #16]
    849c:	4790      	blx	r2
    849e:	e7f7      	b.n	8490 <TimerIrqHandler+0x3c>
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
    84a0:	681d      	ldr	r5, [r3, #0]
    84a2:	f7ff fbd7 	bl	7c54 <RtcGetTimerElapsedTime>
    84a6:	4285      	cmp	r5, r0
    84a8:	d2f4      	bcs.n	8494 <TimerIrqHandler+0x40>
        cur = TimerListHead;
    84aa:	6823      	ldr	r3, [r4, #0]
        TimerListHead = TimerListHead->Next;
    84ac:	695a      	ldr	r2, [r3, #20]
    84ae:	6022      	str	r2, [r4, #0]
        ExecuteCallBack( cur->Callback, cur->Context );
    84b0:	68da      	ldr	r2, [r3, #12]
        cur->IsStarted = false;
    84b2:	721e      	strb	r6, [r3, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
    84b4:	2a00      	cmp	r2, #0
    84b6:	d1f0      	bne.n	849a <TimerIrqHandler+0x46>
    84b8:	e7fe      	b.n	84b8 <TimerIrqHandler+0x64>
    if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
    84ba:	7a43      	ldrb	r3, [r0, #9]
    84bc:	2b00      	cmp	r3, #0
    84be:	d1eb      	bne.n	8498 <TimerIrqHandler+0x44>
}
    84c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        TimerSetTimeout( TimerListHead );
    84c4:	f013 b94b 	b.w	1b75e <TimerSetTimeout>
    84c8:	20000da0 	.word	0x20000da0

000084cc <TimerStop>:
{
    84cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    TimerEvent_t* prev = TimerListHead;
    84ce:	4d14      	ldr	r5, [pc, #80]	; (8520 <TimerStop+0x54>)
{
    84d0:	4604      	mov	r4, r0
    CRITICAL_SECTION_BEGIN( );
    84d2:	a801      	add	r0, sp, #4
    84d4:	f013 f913 	bl	1b6fe <BoardCriticalSectionBegin>
    TimerEvent_t* prev = TimerListHead;
    84d8:	682b      	ldr	r3, [r5, #0]
    if( ( TimerListHead == NULL ) || ( obj == NULL ) )
    84da:	b103      	cbz	r3, 84de <TimerStop+0x12>
    84dc:	b924      	cbnz	r4, 84e8 <TimerStop+0x1c>
        CRITICAL_SECTION_END( );
    84de:	a801      	add	r0, sp, #4
    84e0:	f013 f917 	bl	1b712 <BoardCriticalSectionEnd>
}
    84e4:	b003      	add	sp, #12
    84e6:	bd30      	pop	{r4, r5, pc}
    obj->IsStarted = false;
    84e8:	2200      	movs	r2, #0
    if( TimerListHead == obj ) // Stop the Head
    84ea:	42a3      	cmp	r3, r4
    obj->IsStarted = false;
    84ec:	7222      	strb	r2, [r4, #8]
    if( TimerListHead == obj ) // Stop the Head
    84ee:	d10d      	bne.n	850c <TimerStop+0x40>
        if( TimerListHead->IsNext2Expire == true ) // The head is already running
    84f0:	7a59      	ldrb	r1, [r3, #9]
    84f2:	695c      	ldr	r4, [r3, #20]
    84f4:	b141      	cbz	r1, 8508 <TimerStop+0x3c>
            TimerListHead->IsNext2Expire = false;
    84f6:	725a      	strb	r2, [r3, #9]
            if( TimerListHead->Next != NULL )
    84f8:	b124      	cbz	r4, 8504 <TimerStop+0x38>
                TimerSetTimeout( TimerListHead );
    84fa:	4620      	mov	r0, r4
                TimerListHead = TimerListHead->Next;
    84fc:	602c      	str	r4, [r5, #0]
                TimerSetTimeout( TimerListHead );
    84fe:	f013 f92e 	bl	1b75e <TimerSetTimeout>
    8502:	e7ec      	b.n	84de <TimerStop+0x12>
                RtcStopAlarm( );
    8504:	f7ff fbb0 	bl	7c68 <RtcStopAlarm>
                TimerListHead = NULL;
    8508:	602c      	str	r4, [r5, #0]
    850a:	e7e8      	b.n	84de <TimerStop+0x12>
                cur = cur->Next;
    850c:	461a      	mov	r2, r3
    850e:	695b      	ldr	r3, [r3, #20]
        while( cur != NULL )
    8510:	2b00      	cmp	r3, #0
    8512:	d0e4      	beq.n	84de <TimerStop+0x12>
            if( cur == obj )
    8514:	429c      	cmp	r4, r3
    8516:	d1f9      	bne.n	850c <TimerStop+0x40>
                if( cur->Next != NULL )
    8518:	6963      	ldr	r3, [r4, #20]
                    prev->Next = cur;
    851a:	6153      	str	r3, [r2, #20]
    851c:	e7df      	b.n	84de <TimerStop+0x12>
    851e:	bf00      	nop
    8520:	20000da0 	.word	0x20000da0

00008524 <GetFskBandwidthRegValue>:
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
             SX1276_PLL_STEP_SCALED );
}

static uint8_t GetFskBandwidthRegValue( uint32_t bw )
{
    8524:	b510      	push	{r4, lr}
    8526:	4b09      	ldr	r3, [pc, #36]	; (854c <GetFskBandwidthRegValue+0x28>)
    8528:	2200      	movs	r2, #0
    852a:	4619      	mov	r1, r3
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
    {
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
    852c:	681c      	ldr	r4, [r3, #0]
    852e:	4284      	cmp	r4, r0
    8530:	d806      	bhi.n	8540 <GetFskBandwidthRegValue+0x1c>
    8532:	689c      	ldr	r4, [r3, #8]
    8534:	4284      	cmp	r4, r0
    8536:	d903      	bls.n	8540 <GetFskBandwidthRegValue+0x1c>
        {
            return FskBandwidths[i].RegValue;
    8538:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    853c:	7910      	ldrb	r0, [r2, #4]
        }
    }
    // ERROR: Value not found
    while( 1 );
}
    853e:	bd10      	pop	{r4, pc}
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
    8540:	3201      	adds	r2, #1
    8542:	2a15      	cmp	r2, #21
    8544:	f103 0308 	add.w	r3, r3, #8
    8548:	d1f0      	bne.n	852c <GetFskBandwidthRegValue+0x8>
    while( 1 );
    854a:	e7fe      	b.n	854a <GetFskBandwidthRegValue+0x26>
    854c:	0001cf64 	.word	0x0001cf64

00008550 <SX1276OnDio4Irq>:
    }
}

static void SX1276OnDio4Irq( void* context )
{
    switch( SX1276.Settings.Modem )
    8550:	4b05      	ldr	r3, [pc, #20]	; (8568 <SX1276OnDio4Irq+0x18>)
    8552:	f893 20e1 	ldrb.w	r2, [r3, #225]	; 0xe1
    8556:	b92a      	cbnz	r2, 8564 <SX1276OnDio4Irq+0x14>
    {
    case MODEM_FSK:
        {
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
    8558:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
    855c:	b912      	cbnz	r2, 8564 <SX1276OnDio4Irq+0x14>
            {
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
    855e:	2201      	movs	r2, #1
    8560:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
    case MODEM_LORA:
        break;
    default:
        break;
    }
}
    8564:	4770      	bx	lr
    8566:	bf00      	nop
    8568:	20000dd8 	.word	0x20000dd8

0000856c <SX1276GetStatus>:
}
    856c:	4b01      	ldr	r3, [pc, #4]	; (8574 <SX1276GetStatus+0x8>)
    856e:	f893 00e0 	ldrb.w	r0, [r3, #224]	; 0xe0
    8572:	4770      	bx	lr
    8574:	20000dd8 	.word	0x20000dd8

00008578 <SX1276GetTimeOnAir>:
{
    8578:	b5f0      	push	{r4, r5, r6, r7, lr}
    857a:	f8bd 5014 	ldrh.w	r5, [sp, #20]
    857e:	f89d e018 	ldrb.w	lr, [sp, #24]
    8582:	f89d 601c 	ldrb.w	r6, [sp, #28]
    8586:	f89d 4020 	ldrb.w	r4, [sp, #32]
    switch( modem )
    858a:	b140      	cbz	r0, 859e <SX1276GetTimeOnAir+0x26>
    858c:	2801      	cmp	r0, #1
    858e:	d019      	beq.n	85c4 <SX1276GetTimeOnAir+0x4c>
    8590:	2201      	movs	r2, #1
    8592:	2300      	movs	r3, #0
    return ( numerator + denominator - 1 ) / denominator;
    8594:	4413      	add	r3, r2
    8596:	1e58      	subs	r0, r3, #1
    8598:	fbb0 f0f2 	udiv	r0, r0, r2
}
    859c:	bdf0      	pop	{r4, r5, r6, r7, pc}
           ( ( fixLen == false ) ? 8 : 0 ) +
    859e:	f1be 0f00 	cmp.w	lr, #0
    85a2:	bf0c      	ite	eq
    85a4:	2308      	moveq	r3, #8
    85a6:	2300      	movne	r3, #0
               ( ( crcOn == true ) ? 2 : 0 ) 
    85a8:	2c00      	cmp	r4, #0
    85aa:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
    85ae:	bf14      	ite	ne
    85b0:	2402      	movne	r4, #2
    85b2:	2400      	moveq	r4, #0
             ( syncWordLength << 3 ) +
    85b4:	3318      	adds	r3, #24
               ( 0 ) + // Address filter size
    85b6:	4434      	add	r4, r6
             ( syncWordLength << 3 ) +
    85b8:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
    85bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    85c0:	4363      	muls	r3, r4
        break;
    85c2:	e7e7      	b.n	8594 <SX1276GetTimeOnAir+0x1c>
    int32_t crDenom           = coderate + 4;
    85c4:	1d1f      	adds	r7, r3, #4
    if( ( datarate == 5 ) || ( datarate == 6 ) )
    85c6:	1f53      	subs	r3, r2, #5
    85c8:	2b01      	cmp	r3, #1
    85ca:	d802      	bhi.n	85d2 <SX1276GetTimeOnAir+0x5a>
        if( preambleLen < 12 )
    85cc:	2d0c      	cmp	r5, #12
    85ce:	bf38      	it	cc
    85d0:	250c      	movcc	r5, #12
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
    85d2:	2900      	cmp	r1, #0
    85d4:	d139      	bne.n	864a <SX1276GetTimeOnAir+0xd2>
    85d6:	f1a2 0c0b 	sub.w	ip, r2, #11
    85da:	f1bc 0f01 	cmp.w	ip, #1
    85de:	bf8c      	ite	hi
    85e0:	f04f 0c00 	movhi.w	ip, #0
    85e4:	f04f 0c01 	movls.w	ip, #1
                            ( crcOn ? 16 : 0 ) -
    85e8:	2c00      	cmp	r4, #0
    85ea:	bf14      	ite	ne
    85ec:	2410      	movne	r4, #16
    85ee:	2400      	moveq	r4, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
    85f0:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
                            ( fixLen ? 0 : 20 );
    85f4:	f1be 0f00 	cmp.w	lr, #0
    85f8:	bf14      	ite	ne
    85fa:	2000      	movne	r0, #0
    85fc:	2014      	moveq	r0, #20
                            ( crcOn ? 16 : 0 ) -
    85fe:	eba4 0482 	sub.w	r4, r4, r2, lsl #2
    if( datarate <= 6 )
    8602:	2a06      	cmp	r2, #6
                            ( 4 * datarate ) +
    8604:	ea4f 0382 	mov.w	r3, r2, lsl #2
    8608:	4420      	add	r0, r4
    if( datarate <= 6 )
    860a:	f1a2 0602 	sub.w	r6, r2, #2
    860e:	d904      	bls.n	861a <SX1276GetTimeOnAir+0xa2>
        ceilNumerator += 8;
    8610:	3008      	adds	r0, #8
        if( lowDatareOptimize == true )
    8612:	f1bc 0f00 	cmp.w	ip, #0
    8616:	d000      	beq.n	861a <SX1276GetTimeOnAir+0xa2>
            ceilDenominator = 4 * ( datarate - 2 );
    8618:	00b3      	lsls	r3, r6, #2
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
    861a:	1e5c      	subs	r4, r3, #1
    861c:	2800      	cmp	r0, #0
    861e:	bfa8      	it	ge
    8620:	1824      	addge	r4, r4, r0
    if( datarate <= 6 )
    8622:	2a06      	cmp	r2, #6
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
    8624:	fb94 f3f3 	sdiv	r3, r4, r3
    8628:	fb07 5303 	mla	r3, r7, r3, r5
    int32_t intermediate =
    862c:	bf8c      	ite	hi
    862e:	330c      	addhi	r3, #12
        intermediate += 2;
    8630:	330e      	addls	r3, #14
    switch( bw )
    8632:	2902      	cmp	r1, #2
    8634:	d815      	bhi.n	8662 <SX1276GetTimeOnAir+0xea>
    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
    8636:	009b      	lsls	r3, r3, #2
    8638:	3301      	adds	r3, #1
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
    863a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
    863e:	40b3      	lsls	r3, r6
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
    8640:	4353      	muls	r3, r2
    8642:	4a08      	ldr	r2, [pc, #32]	; (8664 <SX1276GetTimeOnAir+0xec>)
    8644:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    8648:	e7a4      	b.n	8594 <SX1276GetTimeOnAir+0x1c>
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
    864a:	2901      	cmp	r1, #1
    864c:	d106      	bne.n	865c <SX1276GetTimeOnAir+0xe4>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
    864e:	f1a2 030c 	sub.w	r3, r2, #12
    8652:	f1d3 0c00 	rsbs	ip, r3, #0
    8656:	eb4c 0c03 	adc.w	ip, ip, r3
    865a:	e7c5      	b.n	85e8 <SX1276GetTimeOnAir+0x70>
    bool    lowDatareOptimize = false;
    865c:	f04f 0c00 	mov.w	ip, #0
    8660:	e7c2      	b.n	85e8 <SX1276GetTimeOnAir+0x70>
    return ( numerator + denominator - 1 ) / denominator;
    8662:	deff      	udf	#255	; 0xff
    8664:	0001cf58 	.word	0x0001cf58

00008668 <SX1276SetChannel>:
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
    8668:	f643 5309 	movw	r3, #15625	; 0x3d09
{
    866c:	b510      	push	{r4, lr}
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
    866e:	fbb0 f2f3 	udiv	r2, r0, r3
    8672:	f641 6484 	movw	r4, #7812	; 0x1e84
    8676:	fb03 0112 	mls	r1, r3, r2, r0
    867a:	eb04 2401 	add.w	r4, r4, r1, lsl #8
    867e:	fbb4 f4f3 	udiv	r4, r4, r3
    SX1276.Settings.Channel = freq;
    8682:	4b0a      	ldr	r3, [pc, #40]	; (86ac <SX1276SetChannel+0x44>)
    return ( stepsInt << SX1276_PLL_STEP_SHIFT_AMOUNT ) + 
    8684:	eb04 2402 	add.w	r4, r4, r2, lsl #8
    SX1276.Settings.Channel = freq;
    8688:	f8c3 00e4 	str.w	r0, [r3, #228]	; 0xe4
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( freqInPllSteps >> 16 ) & 0xFF ) );
    868c:	f3c4 4107 	ubfx	r1, r4, #16, #8
    8690:	2006      	movs	r0, #6
    8692:	f013 f8ab 	bl	1b7ec <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( freqInPllSteps >> 8 ) & 0xFF ) );
    8696:	f3c4 2107 	ubfx	r1, r4, #8, #8
    869a:	2007      	movs	r0, #7
    869c:	f013 f8a6 	bl	1b7ec <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( freqInPllSteps & 0xFF ) );
    86a0:	b2e1      	uxtb	r1, r4
    86a2:	2008      	movs	r0, #8
}
    86a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SX1276Write( REG_FRFLSB, ( uint8_t )( freqInPllSteps & 0xFF ) );
    86a8:	f013 b8a0 	b.w	1b7ec <SX1276Write>
    86ac:	20000dd8 	.word	0x20000dd8

000086b0 <SX1276OnDio3Irq>:
{
    86b0:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.Modem )
    86b2:	4b11      	ldr	r3, [pc, #68]	; (86f8 <SX1276OnDio3Irq+0x48>)
    86b4:	f893 60e1 	ldrb.w	r6, [r3, #225]	; 0xe1
    86b8:	2e01      	cmp	r6, #1
    86ba:	d11c      	bne.n	86f6 <SX1276OnDio3Irq+0x46>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
    86bc:	2012      	movs	r0, #18
    86be:	f013 f8a0 	bl	1b802 <SX1276Read>
    86c2:	f010 0401 	ands.w	r4, r0, #1
    86c6:	4d0d      	ldr	r5, [pc, #52]	; (86fc <SX1276OnDio3Irq+0x4c>)
    86c8:	d00b      	beq.n	86e2 <SX1276OnDio3Irq+0x32>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
    86ca:	2105      	movs	r1, #5
    86cc:	2012      	movs	r0, #18
    86ce:	f013 f88d 	bl	1b7ec <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
    86d2:	682b      	ldr	r3, [r5, #0]
    86d4:	b17b      	cbz	r3, 86f6 <SX1276OnDio3Irq+0x46>
    86d6:	699b      	ldr	r3, [r3, #24]
    86d8:	b16b      	cbz	r3, 86f6 <SX1276OnDio3Irq+0x46>
                RadioEvents->CadDone( true );
    86da:	4630      	mov	r0, r6
}
    86dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                RadioEvents->CadDone( false );
    86e0:	4718      	bx	r3
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
    86e2:	2104      	movs	r1, #4
    86e4:	2012      	movs	r0, #18
    86e6:	f013 f881 	bl	1b7ec <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
    86ea:	682b      	ldr	r3, [r5, #0]
    86ec:	b11b      	cbz	r3, 86f6 <SX1276OnDio3Irq+0x46>
    86ee:	699b      	ldr	r3, [r3, #24]
    86f0:	b10b      	cbz	r3, 86f6 <SX1276OnDio3Irq+0x46>
                RadioEvents->CadDone( false );
    86f2:	4620      	mov	r0, r4
    86f4:	e7f2      	b.n	86dc <SX1276OnDio3Irq+0x2c>
}
    86f6:	bd70      	pop	{r4, r5, r6, pc}
    86f8:	20000dd8 	.word	0x20000dd8
    86fc:	20000da4 	.word	0x20000da4

00008700 <SX1276OnDio2Irq>:
{
    8700:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
    8702:	4b32      	ldr	r3, [pc, #200]	; (87cc <SX1276OnDio2Irq+0xcc>)
    8704:	f893 10e0 	ldrb.w	r1, [r3, #224]	; 0xe0
    8708:	2901      	cmp	r1, #1
    870a:	461c      	mov	r4, r3
    870c:	d002      	beq.n	8714 <SX1276OnDio2Irq+0x14>
    870e:	2902      	cmp	r1, #2
    8710:	d052      	beq.n	87b8 <SX1276OnDio2Irq+0xb8>
}
    8712:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
    8714:	f893 20e1 	ldrb.w	r2, [r3, #225]	; 0xe1
    8718:	b1ca      	cbz	r2, 874e <SX1276OnDio2Irq+0x4e>
    871a:	2a01      	cmp	r2, #1
    871c:	d1f9      	bne.n	8712 <SX1276OnDio2Irq+0x12>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
    871e:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
    8722:	2b00      	cmp	r3, #0
    8724:	d0f5      	beq.n	8712 <SX1276OnDio2Irq+0x12>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
    8726:	2102      	movs	r1, #2
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
    8728:	2012      	movs	r0, #18
    872a:	f013 f85f 	bl	1b7ec <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
    872e:	4b28      	ldr	r3, [pc, #160]	; (87d0 <SX1276OnDio2Irq+0xd0>)
    8730:	681b      	ldr	r3, [r3, #0]
    8732:	2b00      	cmp	r3, #0
    8734:	d0ed      	beq.n	8712 <SX1276OnDio2Irq+0x12>
    8736:	695c      	ldr	r4, [r3, #20]
    8738:	2c00      	cmp	r4, #0
    873a:	d0ea      	beq.n	8712 <SX1276OnDio2Irq+0x12>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
    873c:	201c      	movs	r0, #28
    873e:	f013 f860 	bl	1b802 <SX1276Read>
    8742:	4623      	mov	r3, r4
    8744:	f000 003f 	and.w	r0, r0, #63	; 0x3f
}
    8748:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
    874c:	4718      	bx	r3
                if( SX1276.DIO4.port == NULL )
    874e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    8750:	bb6b      	cbnz	r3, 87ae <SX1276OnDio2Irq+0xae>
                    SX1276.Settings.FskPacketHandler.PreambleDetected = true;
    8752:	f884 110c 	strb.w	r1, [r4, #268]	; 0x10c
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
    8756:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
    875a:	2b00      	cmp	r3, #0
    875c:	d1d9      	bne.n	8712 <SX1276OnDio2Irq+0x12>
                    TimerStop( &RxTimeoutSyncWord );
    875e:	481d      	ldr	r0, [pc, #116]	; (87d4 <SX1276OnDio2Irq+0xd4>)
    8760:	f7ff feb4 	bl	84cc <TimerStop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
    8764:	2301      	movs	r3, #1
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
    8766:	2011      	movs	r0, #17
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
    8768:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
    876c:	f013 f849 	bl	1b802 <SX1276Read>
    8770:	0840      	lsrs	r0, r0, #1
    8772:	4240      	negs	r0, r0
    8774:	f884 010e 	strb.w	r0, [r4, #270]	; 0x10e
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
    8778:	201b      	movs	r0, #27
    877a:	f013 f842 	bl	1b802 <SX1276Read>
    877e:	4605      	mov	r5, r0
                                                                                                           ( uint16_t )SX1276Read( REG_AFCLSB ) );
    8780:	201c      	movs	r0, #28
    8782:	f013 f83e 	bl	1b802 <SX1276Read>
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
    8786:	f643 5209 	movw	r2, #15625	; 0x3d09
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
    878a:	ea40 2505 	orr.w	r5, r0, r5, lsl #8
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
    878e:	b2c3      	uxtb	r3, r0
    8790:	4353      	muls	r3, r2
    freqInHzInt = pllSteps >> SX1276_PLL_STEP_SHIFT_AMOUNT;
    8792:	0a2d      	lsrs	r5, r5, #8
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
    8794:	4355      	muls	r5, r2
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
    8796:	3380      	adds	r3, #128	; 0x80
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
    8798:	eb05 2313 	add.w	r3, r5, r3, lsr #8
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
    879c:	200c      	movs	r0, #12
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
    879e:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
    87a2:	f013 f82e 	bl	1b802 <SX1276Read>
    87a6:	0940      	lsrs	r0, r0, #5
    87a8:	f884 0114 	strb.w	r0, [r4, #276]	; 0x114
    87ac:	e7b1      	b.n	8712 <SX1276OnDio2Irq+0x12>
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
    87ae:	f894 310c 	ldrb.w	r3, [r4, #268]	; 0x10c
    87b2:	2b00      	cmp	r3, #0
    87b4:	d0ad      	beq.n	8712 <SX1276OnDio2Irq+0x12>
    87b6:	e7ce      	b.n	8756 <SX1276OnDio2Irq+0x56>
            switch( SX1276.Settings.Modem )
    87b8:	f893 20e1 	ldrb.w	r2, [r3, #225]	; 0xe1
    87bc:	2a01      	cmp	r2, #1
    87be:	d1a8      	bne.n	8712 <SX1276OnDio2Irq+0x12>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
    87c0:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
    87c4:	2b00      	cmp	r3, #0
    87c6:	d0a4      	beq.n	8712 <SX1276OnDio2Irq+0x12>
    87c8:	e7ae      	b.n	8728 <SX1276OnDio2Irq+0x28>
    87ca:	bf00      	nop
    87cc:	20000dd8 	.word	0x20000dd8
    87d0:	20000da4 	.word	0x20000da4
    87d4:	20000da8 	.word	0x20000da8

000087d8 <SX1276OnDio1Irq>:
{
    87d8:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
    87da:	4c43      	ldr	r4, [pc, #268]	; (88e8 <SX1276OnDio1Irq+0x110>)
    87dc:	f894 60e0 	ldrb.w	r6, [r4, #224]	; 0xe0
    87e0:	2e01      	cmp	r6, #1
    87e2:	4625      	mov	r5, r4
    87e4:	d002      	beq.n	87ec <SX1276OnDio1Irq+0x14>
    87e6:	2e02      	cmp	r6, #2
    87e8:	d059      	beq.n	889e <SX1276OnDio1Irq+0xc6>
}
    87ea:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
    87ec:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    87f0:	b1cb      	cbz	r3, 8826 <SX1276OnDio1Irq+0x4e>
    87f2:	2b01      	cmp	r3, #1
    87f4:	d1f9      	bne.n	87ea <SX1276OnDio1Irq+0x12>
                if( SX1276GetDio1PinState( ) == 0 )
    87f6:	f7ff fdd3 	bl	83a0 <SX1276GetDio1PinState>
    87fa:	2800      	cmp	r0, #0
    87fc:	d0f5      	beq.n	87ea <SX1276OnDio1Irq+0x12>
                TimerStop( &RxTimeoutTimer );
    87fe:	483b      	ldr	r0, [pc, #236]	; (88ec <SX1276OnDio1Irq+0x114>)
    8800:	f7ff fe64 	bl	84cc <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
    8804:	2180      	movs	r1, #128	; 0x80
    8806:	2012      	movs	r0, #18
    8808:	f012 fff0 	bl	1b7ec <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
    880c:	2300      	movs	r3, #0
    880e:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
    8812:	4b37      	ldr	r3, [pc, #220]	; (88f0 <SX1276OnDio1Irq+0x118>)
    8814:	681b      	ldr	r3, [r3, #0]
    8816:	2b00      	cmp	r3, #0
    8818:	d0e7      	beq.n	87ea <SX1276OnDio1Irq+0x12>
    881a:	68db      	ldr	r3, [r3, #12]
    881c:	2b00      	cmp	r3, #0
    881e:	d0e4      	beq.n	87ea <SX1276OnDio1Irq+0x12>
}
    8820:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                    RadioEvents->RxTimeout( );
    8824:	4718      	bx	r3
                if( SX1276GetDio1PinState( ) == 0 )
    8826:	f7ff fdbb 	bl	83a0 <SX1276GetDio1PinState>
    882a:	2800      	cmp	r0, #0
    882c:	d0dd      	beq.n	87ea <SX1276OnDio1Irq+0x12>
                TimerStop( &RxTimeoutSyncWord );
    882e:	4831      	ldr	r0, [pc, #196]	; (88f4 <SX1276OnDio1Irq+0x11c>)
    8830:	f7ff fe4c 	bl	84cc <TimerStop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
    8834:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
    8838:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
    883c:	4313      	orrs	r3, r2
    883e:	b29b      	uxth	r3, r3
    8840:	b93b      	cbnz	r3, 8852 <SX1276OnDio1Irq+0x7a>
                    if( SX1276.Settings.Fsk.FixLen == false )
    8842:	f894 00fe 	ldrb.w	r0, [r4, #254]	; 0xfe
    8846:	b9e8      	cbnz	r0, 8884 <SX1276OnDio1Irq+0xac>
    SX1276ReadBuffer( 0, buffer, size );
    8848:	4632      	mov	r2, r6
    884a:	f504 718b 	add.w	r1, r4, #278	; 0x116
    884e:	f7ff fc59 	bl	8104 <SX1276ReadBuffer>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
    8852:	f8b5 0118 	ldrh.w	r0, [r5, #280]	; 0x118
    8856:	f8b5 2116 	ldrh.w	r2, [r5, #278]	; 0x116
    885a:	f895 311a 	ldrb.w	r3, [r5, #282]	; 0x11a
    885e:	4926      	ldr	r1, [pc, #152]	; (88f8 <SX1276OnDio1Irq+0x120>)
    8860:	1a12      	subs	r2, r2, r0
    8862:	429a      	cmp	r2, r3
    8864:	4401      	add	r1, r0
    8866:	db13      	blt.n	8890 <SX1276OnDio1Irq+0xb8>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
    8868:	1e5a      	subs	r2, r3, #1
    SX1276ReadBuffer( 0, buffer, size );
    886a:	b2d2      	uxtb	r2, r2
    886c:	2000      	movs	r0, #0
    886e:	f7ff fc49 	bl	8104 <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
    8872:	f895 311a 	ldrb.w	r3, [r5, #282]	; 0x11a
    8876:	f8b5 2118 	ldrh.w	r2, [r5, #280]	; 0x118
    887a:	4413      	add	r3, r2
    887c:	3b01      	subs	r3, #1
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
    887e:	f8a5 3118 	strh.w	r3, [r5, #280]	; 0x118
    8882:	e7b2      	b.n	87ea <SX1276OnDio1Irq+0x12>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
    8884:	2032      	movs	r0, #50	; 0x32
    8886:	f012 ffbc 	bl	1b802 <SX1276Read>
    888a:	f8a4 0116 	strh.w	r0, [r4, #278]	; 0x116
    888e:	e7e0      	b.n	8852 <SX1276OnDio1Irq+0x7a>
    SX1276ReadBuffer( 0, buffer, size );
    8890:	b2d2      	uxtb	r2, r2
    8892:	2000      	movs	r0, #0
    8894:	f7ff fc36 	bl	8104 <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
    8898:	f8b5 3116 	ldrh.w	r3, [r5, #278]	; 0x116
    889c:	e7ef      	b.n	887e <SX1276OnDio1Irq+0xa6>
            switch( SX1276.Settings.Modem )
    889e:	f894 50e1 	ldrb.w	r5, [r4, #225]	; 0xe1
    88a2:	2d00      	cmp	r5, #0
    88a4:	d1a1      	bne.n	87ea <SX1276OnDio1Irq+0x12>
                if( SX1276GetDio1PinState( ) == 1 )
    88a6:	f7ff fd7b 	bl	83a0 <SX1276GetDio1PinState>
    88aa:	2801      	cmp	r0, #1
    88ac:	d09d      	beq.n	87ea <SX1276OnDio1Irq+0x12>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
    88ae:	f8b4 0118 	ldrh.w	r0, [r4, #280]	; 0x118
    88b2:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
    88b6:	f894 211b 	ldrb.w	r2, [r4, #283]	; 0x11b
    88ba:	490f      	ldr	r1, [pc, #60]	; (88f8 <SX1276OnDio1Irq+0x120>)
    88bc:	1a1b      	subs	r3, r3, r0
    88be:	4293      	cmp	r3, r2
    88c0:	4401      	add	r1, r0
    88c2:	dd0a      	ble.n	88da <SX1276OnDio1Irq+0x102>
    SX1276WriteBuffer( 0, buffer, size );
    88c4:	4628      	mov	r0, r5
    88c6:	f7ff fce5 	bl	8294 <SX1276WriteBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
    88ca:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
    88ce:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
    88d2:	4413      	add	r3, r2
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
    88d4:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
}
    88d8:	e787      	b.n	87ea <SX1276OnDio1Irq+0x12>
    SX1276WriteBuffer( 0, buffer, size );
    88da:	b2da      	uxtb	r2, r3
    88dc:	4628      	mov	r0, r5
    88de:	f7ff fcd9 	bl	8294 <SX1276WriteBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
    88e2:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
    88e6:	e7f5      	b.n	88d4 <SX1276OnDio1Irq+0xfc>
    88e8:	20000dd8 	.word	0x20000dd8
    88ec:	20000dc0 	.word	0x20000dc0
    88f0:	20000da4 	.word	0x20000da4
    88f4:	20000da8 	.word	0x20000da8
    88f8:	2000154d 	.word	0x2000154d

000088fc <SX1276OnDio0Irq>:
{
    88fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    switch( SX1276.Settings.State )
    88fe:	4e8f      	ldr	r6, [pc, #572]	; (8b3c <SX1276OnDio0Irq+0x240>)
    volatile uint8_t irqFlags = 0;
    8900:	2300      	movs	r3, #0
    8902:	f88d 3007 	strb.w	r3, [sp, #7]
    switch( SX1276.Settings.State )
    8906:	f896 30e0 	ldrb.w	r3, [r6, #224]	; 0xe0
    890a:	2b01      	cmp	r3, #1
    890c:	4634      	mov	r4, r6
    890e:	d004      	beq.n	891a <SX1276OnDio0Irq+0x1e>
    8910:	2b02      	cmp	r3, #2
    8912:	f000 80fd 	beq.w	8b10 <SX1276OnDio0Irq+0x214>
}
    8916:	b002      	add	sp, #8
    8918:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
    891a:	f896 30e1 	ldrb.w	r3, [r6, #225]	; 0xe1
    891e:	b33b      	cbz	r3, 8970 <SX1276OnDio0Irq+0x74>
    8920:	2b01      	cmp	r3, #1
    8922:	d1f8      	bne.n	8916 <SX1276OnDio0Irq+0x1a>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
    8924:	2140      	movs	r1, #64	; 0x40
    8926:	2012      	movs	r0, #18
    8928:	f012 ff60 	bl	1b7ec <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
    892c:	2012      	movs	r0, #18
    892e:	f012 ff68 	bl	1b802 <SX1276Read>
    8932:	f88d 0007 	strb.w	r0, [sp, #7]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
    8936:	f89d 3007 	ldrb.w	r3, [sp, #7]
    893a:	4d81      	ldr	r5, [pc, #516]	; (8b40 <SX1276OnDio0Irq+0x244>)
    893c:	f013 0f20 	tst.w	r3, #32
    8940:	f000 8093 	beq.w	8a6a <SX1276OnDio0Irq+0x16e>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
    8944:	2120      	movs	r1, #32
    8946:	2012      	movs	r0, #18
    8948:	f012 ff50 	bl	1b7ec <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
    894c:	f896 3132 	ldrb.w	r3, [r6, #306]	; 0x132
    8950:	b90b      	cbnz	r3, 8956 <SX1276OnDio0Irq+0x5a>
                            SX1276.Settings.State = RF_IDLE;
    8952:	f886 30e0 	strb.w	r3, [r6, #224]	; 0xe0
                        TimerStop( &RxTimeoutTimer );
    8956:	487b      	ldr	r0, [pc, #492]	; (8b44 <SX1276OnDio0Irq+0x248>)
    8958:	f7ff fdb8 	bl	84cc <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
    895c:	682b      	ldr	r3, [r5, #0]
    895e:	2b00      	cmp	r3, #0
    8960:	d0d9      	beq.n	8916 <SX1276OnDio0Irq+0x1a>
    8962:	691b      	ldr	r3, [r3, #16]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
    8964:	2b00      	cmp	r3, #0
    8966:	d0d6      	beq.n	8916 <SX1276OnDio0Irq+0x1a>
}
    8968:	b002      	add	sp, #8
    896a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                    RadioEvents->TxDone( );
    896e:	4718      	bx	r3
                if( SX1276.Settings.Fsk.CrcOn == true )
    8970:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
    8974:	4d72      	ldr	r5, [pc, #456]	; (8b40 <SX1276OnDio0Irq+0x244>)
    8976:	b393      	cbz	r3, 89de <SX1276OnDio0Irq+0xe2>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
    8978:	203f      	movs	r0, #63	; 0x3f
    897a:	f012 ff42 	bl	1b802 <SX1276Read>
    897e:	f88d 0007 	strb.w	r0, [sp, #7]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
    8982:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8986:	079b      	lsls	r3, r3, #30
    8988:	d429      	bmi.n	89de <SX1276OnDio0Irq+0xe2>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
    898a:	210b      	movs	r1, #11
    898c:	203e      	movs	r0, #62	; 0x3e
    898e:	f012 ff2d 	bl	1b7ec <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
    8992:	2110      	movs	r1, #16
    8994:	203f      	movs	r0, #63	; 0x3f
    8996:	f012 ff29 	bl	1b7ec <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
    899a:	486a      	ldr	r0, [pc, #424]	; (8b44 <SX1276OnDio0Irq+0x248>)
    899c:	f7ff fd96 	bl	84cc <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
    89a0:	f896 6102 	ldrb.w	r6, [r6, #258]	; 0x102
    89a4:	b98e      	cbnz	r6, 89ca <SX1276OnDio0Irq+0xce>
                            TimerStop( &RxTimeoutSyncWord );
    89a6:	4868      	ldr	r0, [pc, #416]	; (8b48 <SX1276OnDio0Irq+0x24c>)
    89a8:	f7ff fd90 	bl	84cc <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
    89ac:	f884 60e0 	strb.w	r6, [r4, #224]	; 0xe0
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
    89b0:	682b      	ldr	r3, [r5, #0]
    89b2:	b113      	cbz	r3, 89ba <SX1276OnDio0Irq+0xbe>
    89b4:	691b      	ldr	r3, [r3, #16]
    89b6:	b103      	cbz	r3, 89ba <SX1276OnDio0Irq+0xbe>
                            RadioEvents->RxError( );
    89b8:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
    89ba:	2300      	movs	r3, #0
    89bc:	f8a4 310c 	strh.w	r3, [r4, #268]	; 0x10c
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
    89c0:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
                        SX1276.Settings.FskPacketHandler.Size = 0;
    89c4:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
                        break;
    89c8:	e7a5      	b.n	8916 <SX1276OnDio0Irq+0x1a>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
    89ca:	200d      	movs	r0, #13
    89cc:	f012 ff19 	bl	1b802 <SX1276Read>
    89d0:	f040 0140 	orr.w	r1, r0, #64	; 0x40
    89d4:	b2c9      	uxtb	r1, r1
    89d6:	200d      	movs	r0, #13
    89d8:	f012 ff08 	bl	1b7ec <SX1276Write>
    89dc:	e7e8      	b.n	89b0 <SX1276OnDio0Irq+0xb4>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
    89de:	f8b4 2116 	ldrh.w	r2, [r4, #278]	; 0x116
    89e2:	f8b4 1118 	ldrh.w	r1, [r4, #280]	; 0x118
    89e6:	4e59      	ldr	r6, [pc, #356]	; (8b4c <SX1276OnDio0Irq+0x250>)
    89e8:	ea52 0301 	orrs.w	r3, r2, r1
    89ec:	d10a      	bne.n	8a04 <SX1276OnDio0Irq+0x108>
                    if( SX1276.Settings.Fsk.FixLen == false )
    89ee:	f894 00fe 	ldrb.w	r0, [r4, #254]	; 0xfe
    89f2:	bb50      	cbnz	r0, 8a4a <SX1276OnDio0Irq+0x14e>
    SX1276ReadBuffer( 0, buffer, size );
    89f4:	4956      	ldr	r1, [pc, #344]	; (8b50 <SX1276OnDio0Irq+0x254>)
    89f6:	2201      	movs	r2, #1
    89f8:	f7ff fb84 	bl	8104 <SX1276ReadBuffer>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
    89fc:	f8b4 1118 	ldrh.w	r1, [r4, #280]	; 0x118
    8a00:	f894 2116 	ldrb.w	r2, [r4, #278]	; 0x116
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
    8a04:	1a52      	subs	r2, r2, r1
    SX1276ReadBuffer( 0, buffer, size );
    8a06:	b2d2      	uxtb	r2, r2
    8a08:	4431      	add	r1, r6
    8a0a:	2000      	movs	r0, #0
    8a0c:	f7ff fb7a 	bl	8104 <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
    8a10:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
                TimerStop( &RxTimeoutTimer );
    8a14:	484b      	ldr	r0, [pc, #300]	; (8b44 <SX1276OnDio0Irq+0x248>)
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
    8a16:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
                TimerStop( &RxTimeoutTimer );
    8a1a:	f7ff fd57 	bl	84cc <TimerStop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
    8a1e:	f894 3102 	ldrb.w	r3, [r4, #258]	; 0x102
    8a22:	b9c3      	cbnz	r3, 8a56 <SX1276OnDio0Irq+0x15a>
                    TimerStop( &RxTimeoutSyncWord );
    8a24:	4848      	ldr	r0, [pc, #288]	; (8b48 <SX1276OnDio0Irq+0x24c>)
                    SX1276.Settings.State = RF_IDLE;
    8a26:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                    TimerStop( &RxTimeoutSyncWord );
    8a2a:	f7ff fd4f 	bl	84cc <TimerStop>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
    8a2e:	682b      	ldr	r3, [r5, #0]
    8a30:	2b00      	cmp	r3, #0
    8a32:	d0c2      	beq.n	89ba <SX1276OnDio0Irq+0xbe>
    8a34:	689d      	ldr	r5, [r3, #8]
    8a36:	2d00      	cmp	r5, #0
    8a38:	d0bf      	beq.n	89ba <SX1276OnDio0Irq+0xbe>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
    8a3a:	f994 210e 	ldrsb.w	r2, [r4, #270]	; 0x10e
    8a3e:	f8b4 1116 	ldrh.w	r1, [r4, #278]	; 0x116
    8a42:	4842      	ldr	r0, [pc, #264]	; (8b4c <SX1276OnDio0Irq+0x250>)
    8a44:	2300      	movs	r3, #0
    8a46:	47a8      	blx	r5
    8a48:	e7b7      	b.n	89ba <SX1276OnDio0Irq+0xbe>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
    8a4a:	2032      	movs	r0, #50	; 0x32
    8a4c:	f012 fed9 	bl	1b802 <SX1276Read>
    8a50:	f8a4 0116 	strh.w	r0, [r4, #278]	; 0x116
    8a54:	e7d2      	b.n	89fc <SX1276OnDio0Irq+0x100>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
    8a56:	200d      	movs	r0, #13
    8a58:	f012 fed3 	bl	1b802 <SX1276Read>
    8a5c:	f040 0140 	orr.w	r1, r0, #64	; 0x40
    8a60:	b2c9      	uxtb	r1, r1
    8a62:	200d      	movs	r0, #13
    8a64:	f012 fec2 	bl	1b7ec <SX1276Write>
    8a68:	e7e1      	b.n	8a2e <SX1276OnDio0Irq+0x132>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
    8a6a:	2019      	movs	r0, #25
    8a6c:	f012 fec9 	bl	1b802 <SX1276Read>
    8a70:	b240      	sxtb	r0, r0
    8a72:	3002      	adds	r0, #2
    8a74:	1080      	asrs	r0, r0, #2
    8a76:	f886 013c 	strb.w	r0, [r6, #316]	; 0x13c
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
    8a7a:	201a      	movs	r0, #26
    8a7c:	f012 fec1 	bl	1b802 <SX1276Read>
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
    8a80:	f996 213c 	ldrsb.w	r2, [r6, #316]	; 0x13c
    8a84:	4933      	ldr	r1, [pc, #204]	; (8b54 <SX1276OnDio0Irq+0x258>)
    8a86:	2a00      	cmp	r2, #0
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
    8a88:	b203      	sxth	r3, r0
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
    8a8a:	f340 100b 	sbfx	r0, r0, #4, #12
    8a8e:	da38      	bge.n	8b02 <SX1276OnDio0Irq+0x206>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
    8a90:	f8d6 60e4 	ldr.w	r6, [r6, #228]	; 0xe4
    8a94:	b212      	sxth	r2, r2
    8a96:	428e      	cmp	r6, r1
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
    8a98:	bf8c      	ite	hi
    8a9a:	3a9d      	subhi	r2, #157	; 0x9d
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
    8a9c:	3aa4      	subls	r2, #164	; 0xa4
    8a9e:	4413      	add	r3, r2
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
    8aa0:	4403      	add	r3, r0
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
    8aa2:	2013      	movs	r0, #19
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
    8aa4:	f8a4 313e 	strh.w	r3, [r4, #318]	; 0x13e
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
    8aa8:	f012 feab 	bl	1b802 <SX1276Read>
    8aac:	f884 0140 	strb.w	r0, [r4, #320]	; 0x140
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
    8ab0:	2010      	movs	r0, #16
    8ab2:	f012 fea6 	bl	1b802 <SX1276Read>
    8ab6:	4601      	mov	r1, r0
    8ab8:	200d      	movs	r0, #13
    8aba:	f012 fe97 	bl	1b7ec <SX1276Write>
    SX1276ReadBuffer( 0, buffer, size );
    8abe:	f894 2140 	ldrb.w	r2, [r4, #320]	; 0x140
    8ac2:	4922      	ldr	r1, [pc, #136]	; (8b4c <SX1276OnDio0Irq+0x250>)
    8ac4:	2000      	movs	r0, #0
    8ac6:	f7ff fb1d 	bl	8104 <SX1276ReadBuffer>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
    8aca:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
    8ace:	b90b      	cbnz	r3, 8ad4 <SX1276OnDio0Irq+0x1d8>
                        SX1276.Settings.State = RF_IDLE;
    8ad0:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                    TimerStop( &RxTimeoutTimer );
    8ad4:	481b      	ldr	r0, [pc, #108]	; (8b44 <SX1276OnDio0Irq+0x248>)
    8ad6:	f7ff fcf9 	bl	84cc <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
    8ada:	682b      	ldr	r3, [r5, #0]
    8adc:	2b00      	cmp	r3, #0
    8ade:	f43f af1a 	beq.w	8916 <SX1276OnDio0Irq+0x1a>
    8ae2:	689d      	ldr	r5, [r3, #8]
    8ae4:	2d00      	cmp	r5, #0
    8ae6:	f43f af16 	beq.w	8916 <SX1276OnDio0Irq+0x1a>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
    8aea:	f994 313c 	ldrsb.w	r3, [r4, #316]	; 0x13c
    8aee:	f9b4 213e 	ldrsh.w	r2, [r4, #318]	; 0x13e
    8af2:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
    8af6:	4815      	ldr	r0, [pc, #84]	; (8b4c <SX1276OnDio0Irq+0x250>)
    8af8:	46ac      	mov	ip, r5
}
    8afa:	b002      	add	sp, #8
    8afc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
    8b00:	4760      	bx	ip
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
    8b02:	f8d6 20e4 	ldr.w	r2, [r6, #228]	; 0xe4
    8b06:	428a      	cmp	r2, r1
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
    8b08:	bf8c      	ite	hi
    8b0a:	3b9d      	subhi	r3, #157	; 0x9d
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
    8b0c:	3ba4      	subls	r3, #164	; 0xa4
    8b0e:	e7c7      	b.n	8aa0 <SX1276OnDio0Irq+0x1a4>
            TimerStop( &TxTimeoutTimer );
    8b10:	4811      	ldr	r0, [pc, #68]	; (8b58 <SX1276OnDio0Irq+0x25c>)
    8b12:	f7ff fcdb 	bl	84cc <TimerStop>
            switch( SX1276.Settings.Modem )
    8b16:	f896 30e1 	ldrb.w	r3, [r6, #225]	; 0xe1
    8b1a:	2b01      	cmp	r3, #1
    8b1c:	d103      	bne.n	8b26 <SX1276OnDio0Irq+0x22a>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
    8b1e:	2108      	movs	r1, #8
    8b20:	2012      	movs	r0, #18
    8b22:	f012 fe63 	bl	1b7ec <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
    8b26:	2300      	movs	r3, #0
    8b28:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
    8b2c:	4b04      	ldr	r3, [pc, #16]	; (8b40 <SX1276OnDio0Irq+0x244>)
    8b2e:	681b      	ldr	r3, [r3, #0]
    8b30:	2b00      	cmp	r3, #0
    8b32:	f43f aef0 	beq.w	8916 <SX1276OnDio0Irq+0x1a>
    8b36:	681b      	ldr	r3, [r3, #0]
    8b38:	e714      	b.n	8964 <SX1276OnDio0Irq+0x68>
    8b3a:	bf00      	nop
    8b3c:	20000dd8 	.word	0x20000dd8
    8b40:	20000da4 	.word	0x20000da4
    8b44:	20000dc0 	.word	0x20000dc0
    8b48:	20000da8 	.word	0x20000da8
    8b4c:	2000154d 	.word	0x2000154d
    8b50:	20000eee 	.word	0x20000eee
    8b54:	1f4add40 	.word	0x1f4add40
    8b58:	20000f1c 	.word	0x20000f1c

00008b5c <RxChainCalibration>:
{
    8b5c:	b570      	push	{r4, r5, r6, lr}
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
    8b5e:	2009      	movs	r0, #9
    8b60:	f012 fe4f 	bl	1b802 <SX1276Read>
    8b64:	4605      	mov	r5, r0
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
    8b66:	2006      	movs	r0, #6
    8b68:	f012 fe4b 	bl	1b802 <SX1276Read>
    8b6c:	4606      	mov	r6, r0
                                                    ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
    8b6e:	2007      	movs	r0, #7
    8b70:	f012 fe47 	bl	1b802 <SX1276Read>
    8b74:	0204      	lsls	r4, r0, #8
                                                    ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) );
    8b76:	2008      	movs	r0, #8
    8b78:	f012 fe43 	bl	1b802 <SX1276Read>
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
    8b7c:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
    8b80:	4304      	orrs	r4, r0
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
    8b82:	b2c3      	uxtb	r3, r0
    8b84:	f643 5009 	movw	r0, #15625	; 0x3d09
    8b88:	4343      	muls	r3, r0
    freqInHzInt = pllSteps >> SX1276_PLL_STEP_SHIFT_AMOUNT;
    8b8a:	0a24      	lsrs	r4, r4, #8
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
    8b8c:	3380      	adds	r3, #128	; 0x80
    SX1276Write( REG_PACONFIG, 0x00 );
    8b8e:	2100      	movs	r1, #0
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
    8b90:	4344      	muls	r4, r0
    SX1276Write( REG_PACONFIG, 0x00 );
    8b92:	2009      	movs	r0, #9
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
    8b94:	eb04 2413 	add.w	r4, r4, r3, lsr #8
    SX1276Write( REG_PACONFIG, 0x00 );
    8b98:	f012 fe28 	bl	1b7ec <SX1276Write>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
    8b9c:	203b      	movs	r0, #59	; 0x3b
    8b9e:	f012 fe30 	bl	1b802 <SX1276Read>
    8ba2:	f040 0140 	orr.w	r1, r0, #64	; 0x40
    8ba6:	b2c9      	uxtb	r1, r1
    8ba8:	203b      	movs	r0, #59	; 0x3b
    8baa:	f012 fe1f 	bl	1b7ec <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
    8bae:	203b      	movs	r0, #59	; 0x3b
    8bb0:	f012 fe27 	bl	1b802 <SX1276Read>
    8bb4:	0682      	lsls	r2, r0, #26
    8bb6:	d4fa      	bmi.n	8bae <RxChainCalibration+0x52>
    SX1276SetChannel( 868000000 );
    8bb8:	480c      	ldr	r0, [pc, #48]	; (8bec <RxChainCalibration+0x90>)
    8bba:	f7ff fd55 	bl	8668 <SX1276SetChannel>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
    8bbe:	203b      	movs	r0, #59	; 0x3b
    8bc0:	f012 fe1f 	bl	1b802 <SX1276Read>
    8bc4:	f040 0140 	orr.w	r1, r0, #64	; 0x40
    8bc8:	b2c9      	uxtb	r1, r1
    8bca:	203b      	movs	r0, #59	; 0x3b
    8bcc:	f012 fe0e 	bl	1b7ec <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
    8bd0:	203b      	movs	r0, #59	; 0x3b
    8bd2:	f012 fe16 	bl	1b802 <SX1276Read>
    8bd6:	0683      	lsls	r3, r0, #26
    8bd8:	d4fa      	bmi.n	8bd0 <RxChainCalibration+0x74>
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
    8bda:	4629      	mov	r1, r5
    8bdc:	2009      	movs	r0, #9
    8bde:	f012 fe05 	bl	1b7ec <SX1276Write>
    SX1276SetChannel( initialFreq );
    8be2:	4620      	mov	r0, r4
}
    8be4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    SX1276SetChannel( initialFreq );
    8be8:	f7ff bd3e 	b.w	8668 <SX1276SetChannel>
    8bec:	33bca100 	.word	0x33bca100

00008bf0 <SX1276SetSleep>:
{
    8bf0:	b508      	push	{r3, lr}
    TimerStop( &RxTimeoutTimer );
    8bf2:	480a      	ldr	r0, [pc, #40]	; (8c1c <SX1276SetSleep+0x2c>)
    8bf4:	f7ff fc6a 	bl	84cc <TimerStop>
    TimerStop( &TxTimeoutTimer );
    8bf8:	4809      	ldr	r0, [pc, #36]	; (8c20 <SX1276SetSleep+0x30>)
    8bfa:	f7ff fc67 	bl	84cc <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
    8bfe:	4809      	ldr	r0, [pc, #36]	; (8c24 <SX1276SetSleep+0x34>)
    8c00:	f7ff fc64 	bl	84cc <TimerStop>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
    8c04:	2000      	movs	r0, #0
    8c06:	f012 fe07 	bl	1b818 <SX1276SetOpMode>
    SX1276SetBoardTcxo( false );
    8c0a:	2000      	movs	r0, #0
    8c0c:	f012 fd9b 	bl	1b746 <SX1276SetBoardTcxo>
    SX1276.Settings.State = RF_IDLE;
    8c10:	4b05      	ldr	r3, [pc, #20]	; (8c28 <SX1276SetSleep+0x38>)
    8c12:	2200      	movs	r2, #0
    8c14:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
    8c18:	bd08      	pop	{r3, pc}
    8c1a:	bf00      	nop
    8c1c:	20000dc0 	.word	0x20000dc0
    8c20:	20000f1c 	.word	0x20000f1c
    8c24:	20000da8 	.word	0x20000da8
    8c28:	20000dd8 	.word	0x20000dd8

00008c2c <SX1276SetStby>:
{
    8c2c:	b508      	push	{r3, lr}
    TimerStop( &RxTimeoutTimer );
    8c2e:	4808      	ldr	r0, [pc, #32]	; (8c50 <SX1276SetStby+0x24>)
    8c30:	f7ff fc4c 	bl	84cc <TimerStop>
    TimerStop( &TxTimeoutTimer );
    8c34:	4807      	ldr	r0, [pc, #28]	; (8c54 <SX1276SetStby+0x28>)
    8c36:	f7ff fc49 	bl	84cc <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
    8c3a:	4807      	ldr	r0, [pc, #28]	; (8c58 <SX1276SetStby+0x2c>)
    8c3c:	f7ff fc46 	bl	84cc <TimerStop>
    SX1276SetOpMode( RF_OPMODE_STANDBY );
    8c40:	2001      	movs	r0, #1
    8c42:	f012 fde9 	bl	1b818 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
    8c46:	4b05      	ldr	r3, [pc, #20]	; (8c5c <SX1276SetStby+0x30>)
    8c48:	2200      	movs	r2, #0
    8c4a:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
    8c4e:	bd08      	pop	{r3, pc}
    8c50:	20000dc0 	.word	0x20000dc0
    8c54:	20000f1c 	.word	0x20000f1c
    8c58:	20000da8 	.word	0x20000da8
    8c5c:	20000dd8 	.word	0x20000dd8

00008c60 <SX1276Send>:
{
    8c60:	b537      	push	{r0, r1, r2, r4, r5, lr}
    switch( SX1276.Settings.Modem )
    8c62:	4c62      	ldr	r4, [pc, #392]	; (8dec <SX1276Send+0x18c>)
{
    8c64:	f88d 1007 	strb.w	r1, [sp, #7]
    switch( SX1276.Settings.Modem )
    8c68:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
{
    8c6c:	4605      	mov	r5, r0
    switch( SX1276.Settings.Modem )
    8c6e:	b1db      	cbz	r3, 8ca8 <SX1276Send+0x48>
    8c70:	2b01      	cmp	r3, #1
    8c72:	d04a      	beq.n	8d0a <SX1276Send+0xaa>
    8c74:	2500      	movs	r5, #0
    TimerStop( &RxTimeoutTimer );
    8c76:	485e      	ldr	r0, [pc, #376]	; (8df0 <SX1276Send+0x190>)
    8c78:	f7ff fc28 	bl	84cc <TimerStop>
    TimerSetValue( &TxTimeoutTimer, timeout );
    8c7c:	485d      	ldr	r0, [pc, #372]	; (8df4 <SX1276Send+0x194>)
    8c7e:	4629      	mov	r1, r5
    8c80:	f012 fd8b 	bl	1b79a <TimerSetValue>
    switch( SX1276.Settings.Modem )
    8c84:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    8c88:	2b00      	cmp	r3, #0
    8c8a:	d07b      	beq.n	8d84 <SX1276Send+0x124>
    8c8c:	2b01      	cmp	r3, #1
    8c8e:	f000 8091 	beq.w	8db4 <SX1276Send+0x154>
    SX1276.Settings.State = RF_TX_RUNNING;
    8c92:	2302      	movs	r3, #2
    TimerStart( &TxTimeoutTimer );
    8c94:	4857      	ldr	r0, [pc, #348]	; (8df4 <SX1276Send+0x194>)
    SX1276.Settings.State = RF_TX_RUNNING;
    8c96:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    TimerStart( &TxTimeoutTimer );
    8c9a:	f7ff fba3 	bl	83e4 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
    8c9e:	2003      	movs	r0, #3
    8ca0:	f012 fdba 	bl	1b818 <SX1276SetOpMode>
}
    8ca4:	b003      	add	sp, #12
    8ca6:	bd30      	pop	{r4, r5, pc}
            if( SX1276.Settings.Fsk.FixLen == false )
    8ca8:	f894 00fe 	ldrb.w	r0, [r4, #254]	; 0xfe
            SX1276.Settings.FskPacketHandler.Size = size;
    8cac:	f89d 1007 	ldrb.w	r1, [sp, #7]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
    8cb0:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = size;
    8cb4:	f8a4 1116 	strh.w	r1, [r4, #278]	; 0x116
            if( SX1276.Settings.Fsk.FixLen == false )
    8cb8:	b9d8      	cbnz	r0, 8cf2 <SX1276Send+0x92>
    SX1276WriteBuffer( 0, buffer, size );
    8cba:	2201      	movs	r2, #1
    8cbc:	f10d 0107 	add.w	r1, sp, #7
    8cc0:	f7ff fae8 	bl	8294 <SX1276WriteBuffer>
            if( ( size > 0 ) && ( size <= 64 ) )
    8cc4:	f89d 2007 	ldrb.w	r2, [sp, #7]
    8cc8:	1e53      	subs	r3, r2, #1
    8cca:	2b3f      	cmp	r3, #63	; 0x3f
    8ccc:	d815      	bhi.n	8cfa <SX1276Send+0x9a>
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
    8cce:	f884 211b 	strb.w	r2, [r4, #283]	; 0x11b
    SX1276WriteBuffer( 0, buffer, size );
    8cd2:	f894 211b 	ldrb.w	r2, [r4, #283]	; 0x11b
    8cd6:	4629      	mov	r1, r5
    8cd8:	2000      	movs	r0, #0
    8cda:	f7ff fadb 	bl	8294 <SX1276WriteBuffer>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
    8cde:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
    8ce2:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
    8ce6:	f8d4 5104 	ldr.w	r5, [r4, #260]	; 0x104
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
    8cea:	4413      	add	r3, r2
    8cec:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
        break;
    8cf0:	e7c1      	b.n	8c76 <SX1276Send+0x16>
                SX1276Write( REG_PAYLOADLENGTH, size );
    8cf2:	2032      	movs	r0, #50	; 0x32
    8cf4:	f012 fd7a 	bl	1b7ec <SX1276Write>
    8cf8:	e7e4      	b.n	8cc4 <SX1276Send+0x64>
                memcpy1( RxTxBuffer, buffer, size );
    8cfa:	483f      	ldr	r0, [pc, #252]	; (8df8 <SX1276Send+0x198>)
    8cfc:	4629      	mov	r1, r5
    8cfe:	f012 fd24 	bl	1b74a <memcpy1>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
    8d02:	2320      	movs	r3, #32
    8d04:	f884 311b 	strb.w	r3, [r4, #283]	; 0x11b
    8d08:	e7e3      	b.n	8cd2 <SX1276Send+0x72>
            if( SX1276.Settings.LoRa.IqInverted == true )
    8d0a:	f894 3131 	ldrb.w	r3, [r4, #305]	; 0x131
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
    8d0e:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
    8d10:	b36b      	cbz	r3, 8d6e <SX1276Send+0x10e>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
    8d12:	f012 fd76 	bl	1b802 <SX1276Read>
    8d16:	f000 01be 	and.w	r1, r0, #190	; 0xbe
    8d1a:	2033      	movs	r0, #51	; 0x33
    8d1c:	f012 fd66 	bl	1b7ec <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
    8d20:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
    8d22:	203b      	movs	r0, #59	; 0x3b
    8d24:	f012 fd62 	bl	1b7ec <SX1276Write>
            SX1276.Settings.LoRaPacketHandler.Size = size;
    8d28:	f89d 1007 	ldrb.w	r1, [sp, #7]
    8d2c:	f884 1140 	strb.w	r1, [r4, #320]	; 0x140
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
    8d30:	2022      	movs	r0, #34	; 0x22
    8d32:	f012 fd5b 	bl	1b7ec <SX1276Write>
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
    8d36:	2100      	movs	r1, #0
    8d38:	200e      	movs	r0, #14
    8d3a:	f012 fd57 	bl	1b7ec <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
    8d3e:	2100      	movs	r1, #0
    8d40:	200d      	movs	r0, #13
    8d42:	f012 fd53 	bl	1b7ec <SX1276Write>
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
    8d46:	2001      	movs	r0, #1
    8d48:	f012 fd5b 	bl	1b802 <SX1276Read>
    8d4c:	f030 03f8 	bics.w	r3, r0, #248	; 0xf8
    8d50:	d104      	bne.n	8d5c <SX1276Send+0xfc>
                SX1276SetStby( );
    8d52:	f7ff ff6b 	bl	8c2c <SX1276SetStby>
                DelayMs( 1 );
    8d56:	2001      	movs	r0, #1
    8d58:	f012 fd46 	bl	1b7e8 <DelayMs>
    SX1276WriteBuffer( 0, buffer, size );
    8d5c:	4629      	mov	r1, r5
    8d5e:	f89d 2007 	ldrb.w	r2, [sp, #7]
    8d62:	2000      	movs	r0, #0
    8d64:	f7ff fa96 	bl	8294 <SX1276WriteBuffer>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
    8d68:	f8d4 5134 	ldr.w	r5, [r4, #308]	; 0x134
        break;
    8d6c:	e783      	b.n	8c76 <SX1276Send+0x16>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
    8d6e:	f012 fd48 	bl	1b802 <SX1276Read>
    8d72:	f000 01be 	and.w	r1, r0, #190	; 0xbe
    8d76:	f041 0101 	orr.w	r1, r1, #1
    8d7a:	2033      	movs	r0, #51	; 0x33
    8d7c:	f012 fd36 	bl	1b7ec <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
    8d80:	211d      	movs	r1, #29
    8d82:	e7ce      	b.n	8d22 <SX1276Send+0xc2>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
    8d84:	2040      	movs	r0, #64	; 0x40
    8d86:	f012 fd3c 	bl	1b802 <SX1276Read>
    8d8a:	f000 0103 	and.w	r1, r0, #3
    8d8e:	2040      	movs	r0, #64	; 0x40
    8d90:	f012 fd2c 	bl	1b7ec <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
    8d94:	2041      	movs	r0, #65	; 0x41
    8d96:	f012 fd34 	bl	1b802 <SX1276Read>
    8d9a:	f000 013e 	and.w	r1, r0, #62	; 0x3e
    8d9e:	2041      	movs	r0, #65	; 0x41
    8da0:	f012 fd24 	bl	1b7ec <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
    8da4:	2035      	movs	r0, #53	; 0x35
    8da6:	f012 fd2c 	bl	1b802 <SX1276Read>
    8daa:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    8dae:	f884 011a 	strb.w	r0, [r4, #282]	; 0x11a
        break;
    8db2:	e76e      	b.n	8c92 <SX1276Send+0x32>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
    8db4:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
    8db8:	b173      	cbz	r3, 8dd8 <SX1276Send+0x178>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
    8dba:	21f5      	movs	r1, #245	; 0xf5
    8dbc:	2011      	movs	r0, #17
    8dbe:	f012 fd15 	bl	1b7ec <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
    8dc2:	2040      	movs	r0, #64	; 0x40
    8dc4:	f012 fd1d 	bl	1b802 <SX1276Read>
    8dc8:	f000 0133 	and.w	r1, r0, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
    8dcc:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    8dd0:	2040      	movs	r0, #64	; 0x40
    8dd2:	f012 fd0b 	bl	1b7ec <SX1276Write>
    8dd6:	e75c      	b.n	8c92 <SX1276Send+0x32>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
    8dd8:	21f7      	movs	r1, #247	; 0xf7
    8dda:	2011      	movs	r0, #17
    8ddc:	f012 fd06 	bl	1b7ec <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
    8de0:	2040      	movs	r0, #64	; 0x40
    8de2:	f012 fd0e 	bl	1b802 <SX1276Read>
    8de6:	f000 013f 	and.w	r1, r0, #63	; 0x3f
    8dea:	e7ef      	b.n	8dcc <SX1276Send+0x16c>
    8dec:	20000dd8 	.word	0x20000dd8
    8df0:	20000dc0 	.word	0x20000dc0
    8df4:	20000f1c 	.word	0x20000f1c
    8df8:	2000154d 	.word	0x2000154d

00008dfc <SX1276SetRx>:
{
    8dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    switch( SX1276.Settings.Modem )
    8dfe:	4c83      	ldr	r4, [pc, #524]	; (900c <SX1276SetRx+0x210>)
{
    8e00:	4607      	mov	r7, r0
    TimerStop( &TxTimeoutTimer );
    8e02:	4883      	ldr	r0, [pc, #524]	; (9010 <SX1276SetRx+0x214>)
    8e04:	f7ff fb62 	bl	84cc <TimerStop>
    switch( SX1276.Settings.Modem )
    8e08:	f894 50e1 	ldrb.w	r5, [r4, #225]	; 0xe1
    8e0c:	b345      	cbz	r5, 8e60 <SX1276SetRx+0x64>
    8e0e:	2d01      	cmp	r5, #1
    8e10:	d04d      	beq.n	8eae <SX1276SetRx+0xb2>
    8e12:	2600      	movs	r6, #0
    memset( RxTxBuffer, 0, ( size_t )RX_TX_BUFFER_SIZE );
    8e14:	487f      	ldr	r0, [pc, #508]	; (9014 <SX1276SetRx+0x218>)
    8e16:	f44f 7280 	mov.w	r2, #256	; 0x100
    8e1a:	2100      	movs	r1, #0
    8e1c:	f013 f99b 	bl	1c156 <memset>
    SX1276.Settings.State = RF_RX_RUNNING;
    8e20:	2301      	movs	r3, #1
    8e22:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    if( timeout != 0 )
    8e26:	b137      	cbz	r7, 8e36 <SX1276SetRx+0x3a>
        TimerSetValue( &RxTimeoutTimer, timeout );
    8e28:	487b      	ldr	r0, [pc, #492]	; (9018 <SX1276SetRx+0x21c>)
    8e2a:	4639      	mov	r1, r7
    8e2c:	f012 fcb5 	bl	1b79a <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
    8e30:	4879      	ldr	r0, [pc, #484]	; (9018 <SX1276SetRx+0x21c>)
    8e32:	f7ff fad7 	bl	83e4 <TimerStart>
    if( SX1276.Settings.Modem == MODEM_FSK )
    8e36:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    8e3a:	2b00      	cmp	r3, #0
    8e3c:	f040 80dc 	bne.w	8ff8 <SX1276SetRx+0x1fc>
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
    8e40:	2005      	movs	r0, #5
    8e42:	f012 fce9 	bl	1b818 <SX1276SetOpMode>
        if( rxContinuous == false )
    8e46:	2e00      	cmp	r6, #0
    8e48:	f040 80de 	bne.w	9008 <SX1276SetRx+0x20c>
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
    8e4c:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
    8e50:	4872      	ldr	r0, [pc, #456]	; (901c <SX1276SetRx+0x220>)
    8e52:	f012 fca2 	bl	1b79a <TimerSetValue>
}
    8e56:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            TimerStart( &RxTimeoutSyncWord );
    8e5a:	4870      	ldr	r0, [pc, #448]	; (901c <SX1276SetRx+0x220>)
    8e5c:	f7ff bac2 	b.w	83e4 <TimerStart>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
    8e60:	2040      	movs	r0, #64	; 0x40
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
    8e62:	f894 6102 	ldrb.w	r6, [r4, #258]	; 0x102
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
    8e66:	f012 fccc 	bl	1b802 <SX1276Read>
                                                                            RF_DIOMAPPING1_DIO0_00 |
    8e6a:	f000 0103 	and.w	r1, r0, #3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
    8e6e:	f041 010c 	orr.w	r1, r1, #12
    8e72:	2040      	movs	r0, #64	; 0x40
    8e74:	f012 fcba 	bl	1b7ec <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
    8e78:	2041      	movs	r0, #65	; 0x41
    8e7a:	f012 fcc2 	bl	1b802 <SX1276Read>
    8e7e:	f060 013e 	orn	r1, r0, #62	; 0x3e
    8e82:	b2c9      	uxtb	r1, r1
    8e84:	2041      	movs	r0, #65	; 0x41
    8e86:	f012 fcb1 	bl	1b7ec <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
    8e8a:	2035      	movs	r0, #53	; 0x35
    8e8c:	f012 fcb9 	bl	1b802 <SX1276Read>
    8e90:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    8e94:	f884 011a 	strb.w	r0, [r4, #282]	; 0x11a
            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
    8e98:	211e      	movs	r1, #30
    8e9a:	200d      	movs	r0, #13
    8e9c:	f012 fca6 	bl	1b7ec <SX1276Write>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
    8ea0:	f8a4 510c 	strh.w	r5, [r4, #268]	; 0x10c
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
    8ea4:	f8a4 5118 	strh.w	r5, [r4, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = 0;
    8ea8:	f8a4 5116 	strh.w	r5, [r4, #278]	; 0x116
        break;
    8eac:	e7b2      	b.n	8e14 <SX1276SetRx+0x18>
            if( SX1276.Settings.LoRa.IqInverted == true )
    8eae:	f894 3131 	ldrb.w	r3, [r4, #305]	; 0x131
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
    8eb2:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
    8eb4:	b33b      	cbz	r3, 8f06 <SX1276SetRx+0x10a>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
    8eb6:	f012 fca4 	bl	1b802 <SX1276Read>
    8eba:	f040 0141 	orr.w	r1, r0, #65	; 0x41
    8ebe:	b2c9      	uxtb	r1, r1
    8ec0:	2033      	movs	r0, #51	; 0x33
    8ec2:	f012 fc93 	bl	1b7ec <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
    8ec6:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
    8ec8:	203b      	movs	r0, #59	; 0x3b
    8eca:	f012 fc8f 	bl	1b7ec <SX1276Write>
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
    8ece:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    8ed2:	2b08      	cmp	r3, #8
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
    8ed4:	f04f 0031 	mov.w	r0, #49	; 0x31
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
    8ed8:	d87d      	bhi.n	8fd6 <SX1276SetRx+0x1da>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
    8eda:	f012 fc92 	bl	1b802 <SX1276Read>
    8ede:	f000 017f 	and.w	r1, r0, #127	; 0x7f
    8ee2:	2031      	movs	r0, #49	; 0x31
    8ee4:	f012 fc82 	bl	1b7ec <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
    8ee8:	2100      	movs	r1, #0
    8eea:	2030      	movs	r0, #48	; 0x30
    8eec:	f012 fc7e 	bl	1b7ec <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
    8ef0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    8ef4:	2b08      	cmp	r3, #8
    8ef6:	d81c      	bhi.n	8f32 <SX1276SetRx+0x136>
    8ef8:	e8df f003 	tbb	[pc, r3]
    8efc:	4a403610 	.word	0x4a403610
    8f00:	68685e54 	.word	0x68685e54
    8f04:	68          	.byte	0x68
    8f05:	00          	.byte	0x00
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
    8f06:	f012 fc7c 	bl	1b802 <SX1276Read>
    8f0a:	f000 01be 	and.w	r1, r0, #190	; 0xbe
    8f0e:	f041 0101 	orr.w	r1, r1, #1
    8f12:	2033      	movs	r0, #51	; 0x33
    8f14:	f012 fc6a 	bl	1b7ec <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
    8f18:	211d      	movs	r1, #29
    8f1a:	e7d5      	b.n	8ec8 <SX1276SetRx+0xcc>
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
    8f1c:	202f      	movs	r0, #47	; 0x2f
    8f1e:	2148      	movs	r1, #72	; 0x48
    8f20:	f012 fc64 	bl	1b7ec <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
    8f24:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
    8f28:	f500 50f4 	add.w	r0, r0, #7808	; 0x1e80
    8f2c:	3002      	adds	r0, #2
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
    8f2e:	f7ff fb9b 	bl	8668 <SX1276SetChannel>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
    8f32:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
    8f36:	f894 6132 	ldrb.w	r6, [r4, #306]	; 0x132
            if( SX1276.Settings.LoRa.FreqHopOn == true )
    8f3a:	2b00      	cmp	r3, #0
    8f3c:	d052      	beq.n	8fe4 <SX1276SetRx+0x1e8>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
    8f3e:	211d      	movs	r1, #29
    8f40:	2011      	movs	r0, #17
    8f42:	f012 fc53 	bl	1b7ec <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
    8f46:	2040      	movs	r0, #64	; 0x40
    8f48:	f012 fc5b 	bl	1b802 <SX1276Read>
    8f4c:	f000 0133 	and.w	r1, r0, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
    8f50:	2040      	movs	r0, #64	; 0x40
    8f52:	f012 fc4b 	bl	1b7ec <SX1276Write>
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
    8f56:	2100      	movs	r1, #0
    8f58:	200f      	movs	r0, #15
    8f5a:	f012 fc47 	bl	1b7ec <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
    8f5e:	2100      	movs	r1, #0
    8f60:	200d      	movs	r0, #13
    8f62:	f012 fc43 	bl	1b7ec <SX1276Write>
        break;
    8f66:	e755      	b.n	8e14 <SX1276SetRx+0x18>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
    8f68:	202f      	movs	r0, #47	; 0x2f
    8f6a:	2144      	movs	r1, #68	; 0x44
    8f6c:	f012 fc3e 	bl	1b7ec <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
    8f70:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
    8f74:	f500 5022 	add.w	r0, r0, #10368	; 0x2880
    8f78:	3034      	adds	r0, #52	; 0x34
    8f7a:	e7d8      	b.n	8f2e <SX1276SetRx+0x132>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
    8f7c:	202f      	movs	r0, #47	; 0x2f
    8f7e:	2144      	movs	r1, #68	; 0x44
    8f80:	f012 fc34 	bl	1b7ec <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
    8f84:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
    8f88:	f500 5074 	add.w	r0, r0, #15616	; 0x3d00
    8f8c:	3004      	adds	r0, #4
    8f8e:	e7ce      	b.n	8f2e <SX1276SetRx+0x132>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
    8f90:	202f      	movs	r0, #47	; 0x2f
    8f92:	2144      	movs	r1, #68	; 0x44
    8f94:	f012 fc2a 	bl	1b7ec <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
    8f98:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
    8f9c:	f500 40a2 	add.w	r0, r0, #20736	; 0x5100
    8fa0:	305e      	adds	r0, #94	; 0x5e
    8fa2:	e7c4      	b.n	8f2e <SX1276SetRx+0x132>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
    8fa4:	202f      	movs	r0, #47	; 0x2f
    8fa6:	2144      	movs	r1, #68	; 0x44
    8fa8:	f012 fc20 	bl	1b7ec <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
    8fac:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
    8fb0:	f500 40f4 	add.w	r0, r0, #31232	; 0x7a00
    8fb4:	3012      	adds	r0, #18
    8fb6:	e7ba      	b.n	8f2e <SX1276SetRx+0x132>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
    8fb8:	202f      	movs	r0, #47	; 0x2f
    8fba:	2144      	movs	r1, #68	; 0x44
    8fbc:	f012 fc16 	bl	1b7ec <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
    8fc0:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
    8fc4:	f500 4022 	add.w	r0, r0, #41472	; 0xa200
    8fc8:	30c6      	adds	r0, #198	; 0xc6
    8fca:	e7b0      	b.n	8f2e <SX1276SetRx+0x132>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
    8fcc:	2140      	movs	r1, #64	; 0x40
    8fce:	202f      	movs	r0, #47	; 0x2f
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
    8fd0:	f012 fc0c 	bl	1b7ec <SX1276Write>
    8fd4:	e7ad      	b.n	8f32 <SX1276SetRx+0x136>
    8fd6:	f012 fc14 	bl	1b802 <SX1276Read>
    8fda:	f060 017f 	orn	r1, r0, #127	; 0x7f
    8fde:	b2c9      	uxtb	r1, r1
    8fe0:	2031      	movs	r0, #49	; 0x31
    8fe2:	e7f5      	b.n	8fd0 <SX1276SetRx+0x1d4>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
    8fe4:	211f      	movs	r1, #31
    8fe6:	2011      	movs	r0, #17
    8fe8:	f012 fc00 	bl	1b7ec <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
    8fec:	2040      	movs	r0, #64	; 0x40
    8fee:	f012 fc08 	bl	1b802 <SX1276Read>
    8ff2:	f000 013f 	and.w	r1, r0, #63	; 0x3f
    8ff6:	e7ab      	b.n	8f50 <SX1276SetRx+0x154>
        if( rxContinuous == true )
    8ff8:	b126      	cbz	r6, 9004 <SX1276SetRx+0x208>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
    8ffa:	2005      	movs	r0, #5
}
    8ffc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
    9000:	f012 bc0a 	b.w	1b818 <SX1276SetOpMode>
    9004:	2006      	movs	r0, #6
    9006:	e7f9      	b.n	8ffc <SX1276SetRx+0x200>
}
    9008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    900a:	bf00      	nop
    900c:	20000dd8 	.word	0x20000dd8
    9010:	20000f1c 	.word	0x20000f1c
    9014:	2000154d 	.word	0x2000154d
    9018:	20000dc0 	.word	0x20000dc0
    901c:	20000da8 	.word	0x20000da8

00009020 <SX1276ReadRssi>:
{
    9020:	b508      	push	{r3, lr}
    switch( modem )
    9022:	b120      	cbz	r0, 902e <SX1276ReadRssi+0xe>
    9024:	2801      	cmp	r0, #1
    9026:	d00a      	beq.n	903e <SX1276ReadRssi+0x1e>
    9028:	f04f 30ff 	mov.w	r0, #4294967295
}
    902c:	bd08      	pop	{r3, pc}
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
    902e:	2011      	movs	r0, #17
    9030:	f012 fbe7 	bl	1b802 <SX1276Read>
    9034:	f3c0 0047 	ubfx	r0, r0, #1, #8
    9038:	4240      	negs	r0, r0
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
    903a:	b200      	sxth	r0, r0
    903c:	e7f6      	b.n	902c <SX1276ReadRssi+0xc>
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
    903e:	4b08      	ldr	r3, [pc, #32]	; (9060 <SX1276ReadRssi+0x40>)
    9040:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    9044:	4b07      	ldr	r3, [pc, #28]	; (9064 <SX1276ReadRssi+0x44>)
    9046:	429a      	cmp	r2, r3
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
    9048:	f04f 001b 	mov.w	r0, #27
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
    904c:	d903      	bls.n	9056 <SX1276ReadRssi+0x36>
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
    904e:	f012 fbd8 	bl	1b802 <SX1276Read>
    9052:	389d      	subs	r0, #157	; 0x9d
    9054:	e7f1      	b.n	903a <SX1276ReadRssi+0x1a>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
    9056:	f012 fbd4 	bl	1b802 <SX1276Read>
    905a:	38a4      	subs	r0, #164	; 0xa4
    905c:	e7ed      	b.n	903a <SX1276ReadRssi+0x1a>
    905e:	bf00      	nop
    9060:	20000dd8 	.word	0x20000dd8
    9064:	1f4add40 	.word	0x1f4add40

00009068 <SX1276SetModem>:
{
    9068:	b510      	push	{r4, lr}
    906a:	4604      	mov	r4, r0
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
    906c:	2001      	movs	r0, #1
    906e:	f012 fbc8 	bl	1b802 <SX1276Read>
        SX1276.Settings.Modem = MODEM_LORA;
    9072:	f3c0 10c0 	ubfx	r0, r0, #7, #1
    if( SX1276.Settings.Modem == modem )
    9076:	42a0      	cmp	r0, r4
    9078:	4b17      	ldr	r3, [pc, #92]	; (90d8 <SX1276SetModem+0x70>)
    907a:	d102      	bne.n	9082 <SX1276SetModem+0x1a>
    907c:	f883 00e1 	strb.w	r0, [r3, #225]	; 0xe1
}
    9080:	bd10      	pop	{r4, pc}
    switch( SX1276.Settings.Modem )
    9082:	2c01      	cmp	r4, #1
    SX1276.Settings.Modem = modem;
    9084:	f883 40e1 	strb.w	r4, [r3, #225]	; 0xe1
        SX1276SetOpMode( RF_OPMODE_SLEEP );
    9088:	f04f 0000 	mov.w	r0, #0
    switch( SX1276.Settings.Modem )
    908c:	d013      	beq.n	90b6 <SX1276SetModem+0x4e>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
    908e:	f012 fbc3 	bl	1b818 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
    9092:	2001      	movs	r0, #1
    9094:	f012 fbb5 	bl	1b802 <SX1276Read>
    9098:	f000 017f 	and.w	r1, r0, #127	; 0x7f
    909c:	2001      	movs	r0, #1
    909e:	f012 fba5 	bl	1b7ec <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
    90a2:	2100      	movs	r1, #0
    90a4:	2040      	movs	r0, #64	; 0x40
    90a6:	f012 fba1 	bl	1b7ec <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
    90aa:	2130      	movs	r1, #48	; 0x30
}
    90ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        SX1276Write( REG_DIOMAPPING2, 0x00 );
    90b0:	2041      	movs	r0, #65	; 0x41
    90b2:	f012 bb9b 	b.w	1b7ec <SX1276Write>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
    90b6:	f012 fbaf 	bl	1b818 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
    90ba:	4620      	mov	r0, r4
    90bc:	f012 fba1 	bl	1b802 <SX1276Read>
    90c0:	f060 017f 	orn	r1, r0, #127	; 0x7f
    90c4:	b2c9      	uxtb	r1, r1
    90c6:	4620      	mov	r0, r4
    90c8:	f012 fb90 	bl	1b7ec <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
    90cc:	2100      	movs	r1, #0
    90ce:	2040      	movs	r0, #64	; 0x40
    90d0:	f012 fb8c 	bl	1b7ec <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
    90d4:	2100      	movs	r1, #0
    90d6:	e7e9      	b.n	90ac <SX1276SetModem+0x44>
    90d8:	20000dd8 	.word	0x20000dd8

000090dc <SX1276Init>:
{
    90dc:	b538      	push	{r3, r4, r5, lr}
    RadioEvents = events;
    90de:	4b17      	ldr	r3, [pc, #92]	; (913c <SX1276Init+0x60>)
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
    90e0:	4917      	ldr	r1, [pc, #92]	; (9140 <SX1276Init+0x64>)
    RadioEvents = events;
    90e2:	6018      	str	r0, [r3, #0]
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
    90e4:	4817      	ldr	r0, [pc, #92]	; (9144 <SX1276Init+0x68>)
    90e6:	4c18      	ldr	r4, [pc, #96]	; (9148 <SX1276Init+0x6c>)
    90e8:	f012 fb4f 	bl	1b78a <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
    90ec:	4914      	ldr	r1, [pc, #80]	; (9140 <SX1276Init+0x64>)
    90ee:	4817      	ldr	r0, [pc, #92]	; (914c <SX1276Init+0x70>)
    90f0:	f012 fb4b 	bl	1b78a <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
    90f4:	4912      	ldr	r1, [pc, #72]	; (9140 <SX1276Init+0x64>)
    90f6:	4816      	ldr	r0, [pc, #88]	; (9150 <SX1276Init+0x74>)
    90f8:	f012 fb47 	bl	1b78a <TimerInit>
    SX1276Reset( );
    90fc:	f7fe ff3c 	bl	7f78 <SX1276Reset>
    RxChainCalibration( );
    9100:	f7ff fd2c 	bl	8b5c <RxChainCalibration>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
    9104:	2000      	movs	r0, #0
    9106:	f012 fb87 	bl	1b818 <SX1276SetOpMode>
    SX1276IoIrqInit( DioIrq );
    910a:	4812      	ldr	r0, [pc, #72]	; (9154 <SX1276Init+0x78>)
    910c:	f7fe ff4a 	bl	7fa4 <SX1276IoIrqInit>
    9110:	2500      	movs	r5, #0
        SX1276SetModem( RadioRegsInit[i].Modem );
    9112:	7820      	ldrb	r0, [r4, #0]
    9114:	f7ff ffa8 	bl	9068 <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
    9118:	3501      	adds	r5, #1
    911a:	78a1      	ldrb	r1, [r4, #2]
    911c:	7860      	ldrb	r0, [r4, #1]
    911e:	f012 fb65 	bl	1b7ec <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
    9122:	2d10      	cmp	r5, #16
    9124:	f104 0403 	add.w	r4, r4, #3
    9128:	d1f3      	bne.n	9112 <SX1276Init+0x36>
    SX1276SetModem( MODEM_FSK );
    912a:	2000      	movs	r0, #0
    912c:	f7ff ff9c 	bl	9068 <SX1276SetModem>
    SX1276.Settings.State = RF_IDLE;
    9130:	4b09      	ldr	r3, [pc, #36]	; (9158 <SX1276Init+0x7c>)
    9132:	2200      	movs	r2, #0
    9134:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
    9138:	bd38      	pop	{r3, r4, r5, pc}
    913a:	bf00      	nop
    913c:	20000da4 	.word	0x20000da4
    9140:	00009721 	.word	0x00009721
    9144:	20000f1c 	.word	0x20000f1c
    9148:	0001e014 	.word	0x0001e014
    914c:	20000dc0 	.word	0x20000dc0
    9150:	20000da8 	.word	0x20000da8
    9154:	200000b0 	.word	0x200000b0
    9158:	20000dd8 	.word	0x20000dd8

0000915c <SX1276SetRxConfig>:
{
    915c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9160:	b087      	sub	sp, #28
    9162:	4681      	mov	r9, r0
    9164:	9300      	str	r3, [sp, #0]
    9166:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
    916a:	f89d c064 	ldrb.w	ip, [sp, #100]	; 0x64
    916e:	9301      	str	r3, [sp, #4]
    9170:	460c      	mov	r4, r1
    9172:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
    9176:	f89d 1060 	ldrb.w	r1, [sp, #96]	; 0x60
    917a:	9104      	str	r1, [sp, #16]
    917c:	4615      	mov	r5, r2
    917e:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
    9182:	9205      	str	r2, [sp, #20]
    9184:	f8cd c00c 	str.w	ip, [sp, #12]
    9188:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
    918c:	f8bd 7044 	ldrh.w	r7, [sp, #68]	; 0x44
    9190:	f8bd a048 	ldrh.w	sl, [sp, #72]	; 0x48
    9194:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
    9198:	f89d 8054 	ldrb.w	r8, [sp, #84]	; 0x54
    919c:	9302      	str	r3, [sp, #8]
    SX1276SetModem( modem );
    919e:	f7ff ff63 	bl	9068 <SX1276SetModem>
    switch( modem )
    91a2:	e9dd c103 	ldrd	ip, r1, [sp, #12]
    91a6:	9a05      	ldr	r2, [sp, #20]
    91a8:	f1b9 0f00 	cmp.w	r9, #0
    91ac:	d005      	beq.n	91ba <SX1276SetRxConfig+0x5e>
    91ae:	f1b9 0f01 	cmp.w	r9, #1
    91b2:	d064      	beq.n	927e <SX1276SetRxConfig+0x122>
}
    91b4:	b007      	add	sp, #28
    91b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
    91ba:	488f      	ldr	r0, [pc, #572]	; (93f8 <SX1276SetRxConfig+0x29c>)
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
    91bc:	9200      	str	r2, [sp, #0]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
    91be:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
    91c2:	f880 20ff 	strb.w	r2, [r0, #255]	; 0xff
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
    91c6:	f880 c102 	strb.w	ip, [r0, #258]	; 0x102
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
    91ca:	e9c0 b53d 	strd	fp, r5, [r0, #244]	; 0xf4
            SX1276.Settings.Fsk.IqInverted = iqInverted;
    91ce:	f880 1101 	strb.w	r1, [r0, #257]	; 0x101
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
    91d2:	f8c0 40f0 	str.w	r4, [r0, #240]	; 0xf0
            SX1276.Settings.Fsk.FixLen = fixLen;
    91d6:	f880 60fe 	strb.w	r6, [r0, #254]	; 0xfe
            SX1276.Settings.Fsk.CrcOn = crcOn;
    91da:	f880 8100 	strb.w	r8, [r0, #256]	; 0x100
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
    91de:	f8a0 70fc 	strh.w	r7, [r0, #252]	; 0xfc
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
    91e2:	fb03 fa0a 	mul.w	sl, r3, sl
    91e6:	fbba f3f5 	udiv	r3, sl, r5
    91ea:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
    91ee:	4b83      	ldr	r3, [pc, #524]	; (93fc <SX1276SetRxConfig+0x2a0>)
    91f0:	fbb3 f5f5 	udiv	r5, r3, r5
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
    91f4:	2002      	movs	r0, #2
    91f6:	f3c5 2107 	ubfx	r1, r5, #8, #8
    91fa:	f012 faf7 	bl	1b7ec <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
    91fe:	b2e9      	uxtb	r1, r5
    9200:	2003      	movs	r0, #3
    9202:	f012 faf3 	bl	1b7ec <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
    9206:	4620      	mov	r0, r4
    9208:	f7ff f98c 	bl	8524 <GetFskBandwidthRegValue>
    920c:	4601      	mov	r1, r0
    920e:	2012      	movs	r0, #18
    9210:	f012 faec 	bl	1b7ec <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
    9214:	4658      	mov	r0, fp
    9216:	f7ff f985 	bl	8524 <GetFskBandwidthRegValue>
    921a:	4601      	mov	r1, r0
    921c:	2013      	movs	r0, #19
    921e:	f012 fae5 	bl	1b7ec <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
    9222:	0a39      	lsrs	r1, r7, #8
    9224:	2025      	movs	r0, #37	; 0x25
    9226:	f012 fae1 	bl	1b7ec <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
    922a:	b2f9      	uxtb	r1, r7
    922c:	2026      	movs	r0, #38	; 0x26
    922e:	f012 fadd 	bl	1b7ec <SX1276Write>
            if( fixLen == 1 )
    9232:	b316      	cbz	r6, 927a <SX1276SetRxConfig+0x11e>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
    9234:	9a00      	ldr	r2, [sp, #0]
    9236:	4611      	mov	r1, r2
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
    9238:	2032      	movs	r0, #50	; 0x32
    923a:	f012 fad7 	bl	1b7ec <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
    923e:	2030      	movs	r0, #48	; 0x30
    9240:	f012 fadf 	bl	1b802 <SX1276Read>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
    9244:	2e00      	cmp	r6, #0
                           RF_PACKETCONFIG1_CRC_MASK &
    9246:	f000 006f 	and.w	r0, r0, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
    924a:	bf14      	ite	ne
    924c:	2100      	movne	r1, #0
    924e:	f06f 017f 	mvneq.w	r1, #127	; 0x7f
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
    9252:	ea40 1808 	orr.w	r8, r0, r8, lsl #4
    9256:	ea41 0108 	orr.w	r1, r1, r8
            SX1276Write( REG_PACKETCONFIG1,
    925a:	b2c9      	uxtb	r1, r1
    925c:	2030      	movs	r0, #48	; 0x30
    925e:	f012 fac5 	bl	1b7ec <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
    9262:	2031      	movs	r0, #49	; 0x31
    9264:	f012 facd 	bl	1b802 <SX1276Read>
    9268:	f040 0140 	orr.w	r1, r0, #64	; 0x40
    926c:	b2c9      	uxtb	r1, r1
    926e:	2031      	movs	r0, #49	; 0x31
}
    9270:	b007      	add	sp, #28
    9272:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    9276:	f012 bab9 	b.w	1b7ec <SX1276Write>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
    927a:	21ff      	movs	r1, #255	; 0xff
    927c:	e7dc      	b.n	9238 <SX1276SetRxConfig+0xdc>
            if( bandwidth > 2 )
    927e:	2c02      	cmp	r4, #2
    9280:	d900      	bls.n	9284 <SX1276SetRxConfig+0x128>
                while( 1 );
    9282:	e7fe      	b.n	9282 <SX1276SetRxConfig+0x126>
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
    9284:	485c      	ldr	r0, [pc, #368]	; (93f8 <SX1276SetRxConfig+0x29c>)
            SX1276.Settings.LoRa.Coderate = coderate;
    9286:	9b00      	ldr	r3, [sp, #0]
    9288:	f880 3129 	strb.w	r3, [r0, #297]	; 0x129
    928c:	2d06      	cmp	r5, #6
    928e:	46ab      	mov	fp, r5
    9290:	bf38      	it	cc
    9292:	f04f 0b06 	movcc.w	fp, #6
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
    9296:	9b01      	ldr	r3, [sp, #4]
    9298:	f880 312f 	strb.w	r3, [r0, #303]	; 0x12f
            bandwidth += 7;
    929c:	3407      	adds	r4, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
    929e:	f1bb 0f0c 	cmp.w	fp, #12
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
    92a2:	9b02      	ldr	r3, [sp, #8]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
    92a4:	f8a0 712a 	strh.w	r7, [r0, #298]	; 0x12a
    92a8:	bf28      	it	cs
    92aa:	f04f 0b0c 	movcs.w	fp, #12
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
    92ae:	2c07      	cmp	r4, #7
            SX1276.Settings.LoRa.Datarate = datarate;
    92b0:	e9c0 4548 	strd	r4, r5, [r0, #288]	; 0x120
            SX1276.Settings.LoRa.FixLen = fixLen;
    92b4:	f880 612c 	strb.w	r6, [r0, #300]	; 0x12c
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
    92b8:	f880 212d 	strb.w	r2, [r0, #301]	; 0x12d
            SX1276.Settings.LoRa.CrcOn = crcOn;
    92bc:	f880 812e 	strb.w	r8, [r0, #302]	; 0x12e
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
    92c0:	f880 3130 	strb.w	r3, [r0, #304]	; 0x130
            SX1276.Settings.LoRa.IqInverted = iqInverted;
    92c4:	f880 1131 	strb.w	r1, [r0, #305]	; 0x131
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
    92c8:	f880 c132 	strb.w	ip, [r0, #306]	; 0x132
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
    92cc:	4681      	mov	r9, r0
    92ce:	d178      	bne.n	93c2 <SX1276SetRxConfig+0x266>
    92d0:	f1ab 030b 	sub.w	r3, fp, #11
    92d4:	2b01      	cmp	r3, #1
    92d6:	bf8c      	ite	hi
    92d8:	2300      	movhi	r3, #0
    92da:	2301      	movls	r3, #1
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
    92dc:	201d      	movs	r0, #29
    92de:	9201      	str	r2, [sp, #4]
    92e0:	f889 3128 	strb.w	r3, [r9, #296]	; 0x128
    92e4:	f012 fa8d 	bl	1b802 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
    92e8:	9b00      	ldr	r3, [sp, #0]
    92ea:	ea46 0143 	orr.w	r1, r6, r3, lsl #1
    92ee:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
            SX1276Write( REG_LR_MODEMCONFIG1,
    92f2:	b2c9      	uxtb	r1, r1
    92f4:	201d      	movs	r0, #29
    92f6:	f012 fa79 	bl	1b7ec <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
    92fa:	201e      	movs	r0, #30
    92fc:	f012 fa81 	bl	1b802 <SX1276Read>
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
    9300:	f3ca 2101 	ubfx	r1, sl, #8, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
    9304:	ea41 0888 	orr.w	r8, r1, r8, lsl #2
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
    9308:	f000 0008 	and.w	r0, r0, #8
            SX1276Write( REG_LR_MODEMCONFIG2,
    930c:	ea48 1b0b 	orr.w	fp, r8, fp, lsl #4
    9310:	ea4b 0b00 	orr.w	fp, fp, r0
    9314:	fa5f f18b 	uxtb.w	r1, fp
    9318:	201e      	movs	r0, #30
    931a:	f012 fa67 	bl	1b7ec <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
    931e:	2026      	movs	r0, #38	; 0x26
    9320:	f012 fa6f 	bl	1b802 <SX1276Read>
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
    9324:	f899 3128 	ldrb.w	r3, [r9, #296]	; 0x128
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
    9328:	f020 0108 	bic.w	r1, r0, #8
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
    932c:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
            SX1276Write( REG_LR_MODEMCONFIG3,
    9330:	b2c9      	uxtb	r1, r1
    9332:	2026      	movs	r0, #38	; 0x26
    9334:	f012 fa5a 	bl	1b7ec <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
    9338:	fa5f f18a 	uxtb.w	r1, sl
    933c:	201f      	movs	r0, #31
    933e:	f012 fa55 	bl	1b7ec <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
    9342:	0a39      	lsrs	r1, r7, #8
    9344:	2020      	movs	r0, #32
    9346:	f012 fa51 	bl	1b7ec <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
    934a:	b2f9      	uxtb	r1, r7
    934c:	2021      	movs	r0, #33	; 0x21
    934e:	f012 fa4d 	bl	1b7ec <SX1276Write>
            if( fixLen == 1 )
    9352:	9a01      	ldr	r2, [sp, #4]
    9354:	b11e      	cbz	r6, 935e <SX1276SetRxConfig+0x202>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
    9356:	4611      	mov	r1, r2
    9358:	2022      	movs	r0, #34	; 0x22
    935a:	f012 fa47 	bl	1b7ec <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
    935e:	f899 312f 	ldrb.w	r3, [r9, #303]	; 0x12f
    9362:	b16b      	cbz	r3, 9380 <SX1276SetRxConfig+0x224>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
    9364:	2044      	movs	r0, #68	; 0x44
    9366:	f012 fa4c 	bl	1b802 <SX1276Read>
    936a:	f060 017f 	orn	r1, r0, #127	; 0x7f
    936e:	b2c9      	uxtb	r1, r1
    9370:	2044      	movs	r0, #68	; 0x44
    9372:	f012 fa3b 	bl	1b7ec <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
    9376:	f899 1130 	ldrb.w	r1, [r9, #304]	; 0x130
    937a:	2024      	movs	r0, #36	; 0x24
    937c:	f012 fa36 	bl	1b7ec <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
    9380:	2c09      	cmp	r4, #9
    9382:	d12b      	bne.n	93dc <SX1276SetRxConfig+0x280>
    9384:	f8d9 20e4 	ldr.w	r2, [r9, #228]	; 0xe4
    9388:	4b1d      	ldr	r3, [pc, #116]	; (9400 <SX1276SetRxConfig+0x2a4>)
    938a:	429a      	cmp	r2, r3
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
    938c:	f04f 0102 	mov.w	r1, #2
    9390:	f04f 0036 	mov.w	r0, #54	; 0x36
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
    9394:	d91e      	bls.n	93d4 <SX1276SetRxConfig+0x278>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
    9396:	f012 fa29 	bl	1b7ec <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
    939a:	2164      	movs	r1, #100	; 0x64
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
    939c:	203a      	movs	r0, #58	; 0x3a
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
    939e:	f012 fa25 	bl	1b7ec <SX1276Write>
            if( datarate == 6 )
    93a2:	2d06      	cmp	r5, #6
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
    93a4:	f04f 0031 	mov.w	r0, #49	; 0x31
            if( datarate == 6 )
    93a8:	d81b      	bhi.n	93e2 <SX1276SetRxConfig+0x286>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
    93aa:	f012 fa2a 	bl	1b802 <SX1276Read>
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
    93ae:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
                SX1276Write( REG_LR_DETECTOPTIMIZE,
    93b2:	f041 0105 	orr.w	r1, r1, #5
    93b6:	2031      	movs	r0, #49	; 0x31
    93b8:	f012 fa18 	bl	1b7ec <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    93bc:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    93be:	2037      	movs	r0, #55	; 0x37
    93c0:	e756      	b.n	9270 <SX1276SetRxConfig+0x114>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
    93c2:	2c08      	cmp	r4, #8
    93c4:	d104      	bne.n	93d0 <SX1276SetRxConfig+0x274>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
    93c6:	2d0b      	cmp	r5, #11
    93c8:	bf94      	ite	ls
    93ca:	2300      	movls	r3, #0
    93cc:	2301      	movhi	r3, #1
    93ce:	e785      	b.n	92dc <SX1276SetRxConfig+0x180>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
    93d0:	2300      	movs	r3, #0
    93d2:	e783      	b.n	92dc <SX1276SetRxConfig+0x180>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
    93d4:	f012 fa0a 	bl	1b7ec <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
    93d8:	217f      	movs	r1, #127	; 0x7f
    93da:	e7df      	b.n	939c <SX1276SetRxConfig+0x240>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
    93dc:	2103      	movs	r1, #3
    93de:	2036      	movs	r0, #54	; 0x36
    93e0:	e7dd      	b.n	939e <SX1276SetRxConfig+0x242>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
    93e2:	f012 fa0e 	bl	1b802 <SX1276Read>
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
    93e6:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
                SX1276Write( REG_LR_DETECTOPTIMIZE,
    93ea:	f041 0103 	orr.w	r1, r1, #3
    93ee:	2031      	movs	r0, #49	; 0x31
    93f0:	f012 f9fc 	bl	1b7ec <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    93f4:	210a      	movs	r1, #10
    93f6:	e7e2      	b.n	93be <SX1276SetRxConfig+0x262>
    93f8:	20000dd8 	.word	0x20000dd8
    93fc:	01e84800 	.word	0x01e84800
    9400:	1f4add40 	.word	0x1f4add40

00009404 <SX1276SetTxConfig>:
{
    9404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9408:	b087      	sub	sp, #28
    940a:	461d      	mov	r5, r3
    940c:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
    9410:	9302      	str	r3, [sp, #8]
    9412:	468a      	mov	sl, r1
    9414:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
    9418:	9918      	ldr	r1, [sp, #96]	; 0x60
    941a:	9304      	str	r3, [sp, #16]
    941c:	4617      	mov	r7, r2
    941e:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
    9422:	9205      	str	r2, [sp, #20]
    9424:	9103      	str	r1, [sp, #12]
    9426:	9001      	str	r0, [sp, #4]
    9428:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    942c:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
    9430:	f8bd 9048 	ldrh.w	r9, [sp, #72]	; 0x48
    9434:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
    9438:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
    SX1276SetModem( modem );
    943c:	f7ff fe14 	bl	9068 <SX1276SetModem>
    SX1276SetRfTxPower( power );
    9440:	4650      	mov	r0, sl
    9442:	f7fe ff43 	bl	82cc <SX1276SetRfTxPower>
    switch( modem )
    9446:	9a01      	ldr	r2, [sp, #4]
    9448:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
    944c:	b12a      	cbz	r2, 945a <SX1276SetTxConfig+0x56>
    944e:	2a01      	cmp	r2, #1
    9450:	9a05      	ldr	r2, [sp, #20]
    9452:	d05e      	beq.n	9512 <SX1276SetTxConfig+0x10e>
}
    9454:	b007      	add	sp, #28
    9456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SX1276.Settings.Fsk.Power = power;
    945a:	4a78      	ldr	r2, [pc, #480]	; (963c <SX1276SetTxConfig+0x238>)
            SX1276.Settings.Fsk.IqInverted = iqInverted;
    945c:	f882 3101 	strb.w	r3, [r2, #257]	; 0x101
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
    9460:	f643 5309 	movw	r3, #15625	; 0x3d09
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
    9464:	e9c2 753b 	strd	r7, r5, [r2, #236]	; 0xec
            SX1276.Settings.Fsk.Datarate = datarate;
    9468:	f8c2 80f8 	str.w	r8, [r2, #248]	; 0xf8
            SX1276.Settings.Fsk.CrcOn = crcOn;
    946c:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
            SX1276.Settings.Fsk.TxTimeout = timeout;
    9470:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
            SX1276.Settings.Fsk.Power = power;
    9474:	f882 a0e8 	strb.w	sl, [r2, #232]	; 0xe8
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
    9478:	fbb7 f1f3 	udiv	r1, r7, r3
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
    947c:	f8a2 90fc 	strh.w	r9, [r2, #252]	; 0xfc
            SX1276.Settings.Fsk.FixLen = fixLen;
    9480:	f882 60fe 	strb.w	r6, [r2, #254]	; 0xfe
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
    9484:	fb03 7211 	mls	r2, r3, r1, r7
    9488:	f641 6784 	movw	r7, #7812	; 0x1e84
    948c:	eb07 2702 	add.w	r7, r7, r2, lsl #8
    9490:	fbb7 f7f3 	udiv	r7, r7, r3
    return ( stepsInt << SX1276_PLL_STEP_SHIFT_AMOUNT ) + 
    9494:	eb07 2701 	add.w	r7, r7, r1, lsl #8
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdevInPllSteps >> 8 ) );
    9498:	f3c7 2107 	ubfx	r1, r7, #8, #8
    949c:	2004      	movs	r0, #4
    949e:	f012 f9a5 	bl	1b7ec <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdevInPllSteps & 0xFF ) );
    94a2:	b2f9      	uxtb	r1, r7
    94a4:	2005      	movs	r0, #5
    94a6:	f012 f9a1 	bl	1b7ec <SX1276Write>
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
    94aa:	4b65      	ldr	r3, [pc, #404]	; (9640 <SX1276SetTxConfig+0x23c>)
    94ac:	fbb3 f8f8 	udiv	r8, r3, r8
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
    94b0:	2002      	movs	r0, #2
    94b2:	f3c8 2107 	ubfx	r1, r8, #8, #8
    94b6:	f012 f999 	bl	1b7ec <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
    94ba:	fa5f f188 	uxtb.w	r1, r8
    94be:	2003      	movs	r0, #3
    94c0:	f012 f994 	bl	1b7ec <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
    94c4:	ea4f 2119 	mov.w	r1, r9, lsr #8
    94c8:	2025      	movs	r0, #37	; 0x25
    94ca:	f012 f98f 	bl	1b7ec <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
    94ce:	fa5f f189 	uxtb.w	r1, r9
    94d2:	2026      	movs	r0, #38	; 0x26
    94d4:	f012 f98a 	bl	1b7ec <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
    94d8:	2030      	movs	r0, #48	; 0x30
    94da:	f012 f992 	bl	1b802 <SX1276Read>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
    94de:	2e00      	cmp	r6, #0
                           RF_PACKETCONFIG1_CRC_MASK &
    94e0:	f000 006f 	and.w	r0, r0, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
    94e4:	bf14      	ite	ne
    94e6:	2100      	movne	r1, #0
    94e8:	f06f 017f 	mvneq.w	r1, #127	; 0x7f
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
    94ec:	ea40 1404 	orr.w	r4, r0, r4, lsl #4
    94f0:	4321      	orrs	r1, r4
            SX1276Write( REG_PACKETCONFIG1,
    94f2:	b2c9      	uxtb	r1, r1
    94f4:	2030      	movs	r0, #48	; 0x30
    94f6:	f012 f979 	bl	1b7ec <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
    94fa:	2031      	movs	r0, #49	; 0x31
    94fc:	f012 f981 	bl	1b802 <SX1276Read>
    9500:	f040 0140 	orr.w	r1, r0, #64	; 0x40
    9504:	b2c9      	uxtb	r1, r1
    9506:	2031      	movs	r0, #49	; 0x31
}
    9508:	b007      	add	sp, #28
    950a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    950e:	f012 b96d 	b.w	1b7ec <SX1276Write>
            SX1276.Settings.LoRa.Power = power;
    9512:	4f4a      	ldr	r7, [pc, #296]	; (963c <SX1276SetTxConfig+0x238>)
            if( bandwidth > 2 )
    9514:	2d02      	cmp	r5, #2
            SX1276.Settings.LoRa.Power = power;
    9516:	f887 a11c 	strb.w	sl, [r7, #284]	; 0x11c
            if( bandwidth > 2 )
    951a:	d900      	bls.n	951e <SX1276SetTxConfig+0x11a>
                while( 1 );
    951c:	e7fe      	b.n	951c <SX1276SetTxConfig+0x118>
            bandwidth += 7;
    951e:	f1b8 0f06 	cmp.w	r8, #6
    9522:	46c2      	mov	sl, r8
    9524:	bf38      	it	cc
    9526:	f04f 0a06 	movcc.w	sl, #6
    952a:	3507      	adds	r5, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
    952c:	f1ba 0f0c 	cmp.w	sl, #12
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
    9530:	9802      	ldr	r0, [sp, #8]
            SX1276.Settings.LoRa.Coderate = coderate;
    9532:	f887 b129 	strb.w	fp, [r7, #297]	; 0x129
    9536:	bf28      	it	cs
    9538:	f04f 0a0c 	movcs.w	sl, #12
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
    953c:	2d07      	cmp	r5, #7
            SX1276.Settings.LoRa.Datarate = datarate;
    953e:	e9c7 5848 	strd	r5, r8, [r7, #288]	; 0x120
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
    9542:	f8a7 912a 	strh.w	r9, [r7, #298]	; 0x12a
            SX1276.Settings.LoRa.FixLen = fixLen;
    9546:	f887 612c 	strb.w	r6, [r7, #300]	; 0x12c
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
    954a:	f887 212f 	strb.w	r2, [r7, #303]	; 0x12f
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
    954e:	f887 0130 	strb.w	r0, [r7, #304]	; 0x130
            SX1276.Settings.LoRa.CrcOn = crcOn;
    9552:	f887 412e 	strb.w	r4, [r7, #302]	; 0x12e
            SX1276.Settings.LoRa.IqInverted = iqInverted;
    9556:	f887 3131 	strb.w	r3, [r7, #305]	; 0x131
            SX1276.Settings.LoRa.TxTimeout = timeout;
    955a:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
    955e:	d158      	bne.n	9612 <SX1276SetTxConfig+0x20e>
    9560:	f1aa 030b 	sub.w	r3, sl, #11
    9564:	2b01      	cmp	r3, #1
    9566:	bf8c      	ite	hi
    9568:	2300      	movhi	r3, #0
    956a:	2301      	movls	r3, #1
    956c:	f887 3128 	strb.w	r3, [r7, #296]	; 0x128
            if( SX1276.Settings.LoRa.FreqHopOn == true )
    9570:	b16a      	cbz	r2, 958e <SX1276SetTxConfig+0x18a>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
    9572:	2044      	movs	r0, #68	; 0x44
    9574:	f012 f945 	bl	1b802 <SX1276Read>
    9578:	f060 017f 	orn	r1, r0, #127	; 0x7f
    957c:	b2c9      	uxtb	r1, r1
    957e:	2044      	movs	r0, #68	; 0x44
    9580:	f012 f934 	bl	1b7ec <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
    9584:	f897 1130 	ldrb.w	r1, [r7, #304]	; 0x130
    9588:	2024      	movs	r0, #36	; 0x24
    958a:	f012 f92f 	bl	1b7ec <SX1276Write>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
    958e:	ea46 064b 	orr.w	r6, r6, fp, lsl #1
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
    9592:	201d      	movs	r0, #29
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
    9594:	ea46 1505 	orr.w	r5, r6, r5, lsl #4
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
    9598:	f012 f933 	bl	1b802 <SX1276Read>
            SX1276Write( REG_LR_MODEMCONFIG1,
    959c:	b2e9      	uxtb	r1, r5
    959e:	201d      	movs	r0, #29
    95a0:	f012 f924 	bl	1b7ec <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
    95a4:	201e      	movs	r0, #30
    95a6:	f012 f92c 	bl	1b802 <SX1276Read>
                           ( datarate << 4 ) | ( crcOn << 2 ) );
    95aa:	00a4      	lsls	r4, r4, #2
                           RFLR_MODEMCONFIG2_SF_MASK &
    95ac:	f000 000b 	and.w	r0, r0, #11
            SX1276Write( REG_LR_MODEMCONFIG2,
    95b0:	ea44 1a0a 	orr.w	sl, r4, sl, lsl #4
    95b4:	ea4a 0a00 	orr.w	sl, sl, r0
    95b8:	fa5f f18a 	uxtb.w	r1, sl
    95bc:	201e      	movs	r0, #30
    95be:	f012 f915 	bl	1b7ec <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
    95c2:	2026      	movs	r0, #38	; 0x26
    95c4:	f012 f91d 	bl	1b802 <SX1276Read>
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
    95c8:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
    95cc:	f020 0108 	bic.w	r1, r0, #8
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
    95d0:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
            SX1276Write( REG_LR_MODEMCONFIG3,
    95d4:	b2c9      	uxtb	r1, r1
    95d6:	2026      	movs	r0, #38	; 0x26
    95d8:	f012 f908 	bl	1b7ec <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
    95dc:	ea4f 2119 	mov.w	r1, r9, lsr #8
    95e0:	2020      	movs	r0, #32
    95e2:	f012 f903 	bl	1b7ec <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
    95e6:	2021      	movs	r0, #33	; 0x21
    95e8:	fa5f f189 	uxtb.w	r1, r9
    95ec:	f012 f8fe 	bl	1b7ec <SX1276Write>
            if( datarate == 6 )
    95f0:	f1b8 0f06 	cmp.w	r8, #6
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
    95f4:	f04f 0031 	mov.w	r0, #49	; 0x31
            if( datarate == 6 )
    95f8:	d815      	bhi.n	9626 <SX1276SetTxConfig+0x222>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
    95fa:	f012 f902 	bl	1b802 <SX1276Read>
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
    95fe:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
                SX1276Write( REG_LR_DETECTOPTIMIZE,
    9602:	f041 0105 	orr.w	r1, r1, #5
    9606:	2031      	movs	r0, #49	; 0x31
    9608:	f012 f8f0 	bl	1b7ec <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    960c:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    960e:	2037      	movs	r0, #55	; 0x37
    9610:	e77a      	b.n	9508 <SX1276SetTxConfig+0x104>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
    9612:	2d08      	cmp	r5, #8
    9614:	d105      	bne.n	9622 <SX1276SetTxConfig+0x21e>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
    9616:	f1b8 0f0b 	cmp.w	r8, #11
    961a:	bf94      	ite	ls
    961c:	2300      	movls	r3, #0
    961e:	2301      	movhi	r3, #1
    9620:	e7a4      	b.n	956c <SX1276SetTxConfig+0x168>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
    9622:	2300      	movs	r3, #0
    9624:	e7a2      	b.n	956c <SX1276SetTxConfig+0x168>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
    9626:	f012 f8ec 	bl	1b802 <SX1276Read>
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
    962a:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
                SX1276Write( REG_LR_DETECTOPTIMIZE,
    962e:	f041 0103 	orr.w	r1, r1, #3
    9632:	2031      	movs	r0, #49	; 0x31
    9634:	f012 f8da 	bl	1b7ec <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    9638:	210a      	movs	r1, #10
    963a:	e7e8      	b.n	960e <SX1276SetTxConfig+0x20a>
    963c:	20000dd8 	.word	0x20000dd8
    9640:	01e84800 	.word	0x01e84800

00009644 <SX1276SetTxContinuousWave>:
{
    9644:	b530      	push	{r4, r5, lr}
    uint32_t timeout = ( uint32_t )time * 1000;
    9646:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
    964a:	b08b      	sub	sp, #44	; 0x2c
    uint32_t timeout = ( uint32_t )time * 1000;
    964c:	4354      	muls	r4, r2
{
    964e:	460d      	mov	r5, r1
    SX1276SetChannel( freq );
    9650:	f7ff f80a 	bl	8668 <SX1276SetChannel>
    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
    9654:	2300      	movs	r3, #0
    9656:	2205      	movs	r2, #5
    9658:	e9cd 3201 	strd	r3, r2, [sp, #4]
    965c:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
    9660:	e9cd 3306 	strd	r3, r3, [sp, #24]
    9664:	e9cd 3304 	strd	r3, r3, [sp, #16]
    9668:	9303      	str	r3, [sp, #12]
    966a:	4618      	mov	r0, r3
    966c:	4629      	mov	r1, r5
    966e:	9200      	str	r2, [sp, #0]
    9670:	9408      	str	r4, [sp, #32]
    9672:	461a      	mov	r2, r3
    9674:	f7ff fec6 	bl	9404 <SX1276SetTxConfig>
    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
    9678:	2031      	movs	r0, #49	; 0x31
    967a:	f012 f8c2 	bl	1b802 <SX1276Read>
    967e:	f000 01bf 	and.w	r1, r0, #191	; 0xbf
    9682:	2031      	movs	r0, #49	; 0x31
    9684:	f012 f8b2 	bl	1b7ec <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
    9688:	4d0c      	ldr	r5, [pc, #48]	; (96bc <SX1276SetTxContinuousWave+0x78>)
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
    968a:	21f0      	movs	r1, #240	; 0xf0
    968c:	2040      	movs	r0, #64	; 0x40
    968e:	f012 f8ad 	bl	1b7ec <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
    9692:	21a0      	movs	r1, #160	; 0xa0
    9694:	2041      	movs	r0, #65	; 0x41
    9696:	f012 f8a9 	bl	1b7ec <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
    969a:	4621      	mov	r1, r4
    969c:	4628      	mov	r0, r5
    969e:	f012 f87c 	bl	1b79a <TimerSetValue>
    SX1276.Settings.State = RF_TX_RUNNING;
    96a2:	4b07      	ldr	r3, [pc, #28]	; (96c0 <SX1276SetTxContinuousWave+0x7c>)
    96a4:	2202      	movs	r2, #2
    TimerStart( &TxTimeoutTimer );
    96a6:	4628      	mov	r0, r5
    SX1276.Settings.State = RF_TX_RUNNING;
    96a8:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    TimerStart( &TxTimeoutTimer );
    96ac:	f7fe fe9a 	bl	83e4 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
    96b0:	2003      	movs	r0, #3
}
    96b2:	b00b      	add	sp, #44	; 0x2c
    96b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
    96b8:	f012 b8ae 	b.w	1b818 <SX1276SetOpMode>
    96bc:	20000f1c 	.word	0x20000f1c
    96c0:	20000dd8 	.word	0x20000dd8

000096c4 <SX1276SetMaxPayloadLength>:
{
    96c4:	b538      	push	{r3, r4, r5, lr}
    96c6:	4605      	mov	r5, r0
    96c8:	460c      	mov	r4, r1
    SX1276SetModem( modem );
    96ca:	f7ff fccd 	bl	9068 <SX1276SetModem>
    switch( modem )
    96ce:	b115      	cbz	r5, 96d6 <SX1276SetMaxPayloadLength+0x12>
    96d0:	2d01      	cmp	r5, #1
    96d2:	d00b      	beq.n	96ec <SX1276SetMaxPayloadLength+0x28>
}
    96d4:	bd38      	pop	{r3, r4, r5, pc}
        if( SX1276.Settings.Fsk.FixLen == false )
    96d6:	4b07      	ldr	r3, [pc, #28]	; (96f4 <SX1276SetMaxPayloadLength+0x30>)
    96d8:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
    96dc:	2b00      	cmp	r3, #0
    96de:	d1f9      	bne.n	96d4 <SX1276SetMaxPayloadLength+0x10>
            SX1276Write( REG_PAYLOADLENGTH, max );
    96e0:	4621      	mov	r1, r4
    96e2:	2032      	movs	r0, #50	; 0x32
}
    96e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
    96e8:	f012 b880 	b.w	1b7ec <SX1276Write>
    96ec:	4621      	mov	r1, r4
    96ee:	2023      	movs	r0, #35	; 0x23
    96f0:	e7f8      	b.n	96e4 <SX1276SetMaxPayloadLength+0x20>
    96f2:	bf00      	nop
    96f4:	20000dd8 	.word	0x20000dd8

000096f8 <SX1276SetPublicNetwork>:
{
    96f8:	b510      	push	{r4, lr}
    96fa:	4604      	mov	r4, r0
    SX1276SetModem( MODEM_LORA );
    96fc:	2001      	movs	r0, #1
    96fe:	f7ff fcb3 	bl	9068 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
    9702:	4b06      	ldr	r3, [pc, #24]	; (971c <SX1276SetPublicNetwork+0x24>)
    9704:	f883 4138 	strb.w	r4, [r3, #312]	; 0x138
    if( enable == true )
    9708:	b12c      	cbz	r4, 9716 <SX1276SetPublicNetwork+0x1e>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
    970a:	2134      	movs	r1, #52	; 0x34
}
    970c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
    9710:	2039      	movs	r0, #57	; 0x39
    9712:	f012 b86b 	b.w	1b7ec <SX1276Write>
    9716:	2112      	movs	r1, #18
    9718:	e7f8      	b.n	970c <SX1276SetPublicNetwork+0x14>
    971a:	bf00      	nop
    971c:	20000dd8 	.word	0x20000dd8

00009720 <SX1276OnTimeoutIrq>:
{
    9720:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
    9722:	4c2d      	ldr	r4, [pc, #180]	; (97d8 <SX1276OnTimeoutIrq+0xb8>)
    9724:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    9728:	2b01      	cmp	r3, #1
    972a:	4626      	mov	r6, r4
    972c:	d002      	beq.n	9734 <SX1276OnTimeoutIrq+0x14>
    972e:	2b02      	cmp	r3, #2
    9730:	d02d      	beq.n	978e <SX1276OnTimeoutIrq+0x6e>
}
    9732:	bd70      	pop	{r4, r5, r6, pc}
        if( SX1276.Settings.Modem == MODEM_FSK )
    9734:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    9738:	b9cb      	cbnz	r3, 976e <SX1276OnTimeoutIrq+0x4e>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
    973a:	f8a4 310c 	strh.w	r3, [r4, #268]	; 0x10c
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
    973e:	210b      	movs	r1, #11
    9740:	203e      	movs	r0, #62	; 0x3e
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
    9742:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = 0;
    9746:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
    974a:	f012 f84f 	bl	1b7ec <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
    974e:	2110      	movs	r1, #16
    9750:	203f      	movs	r0, #63	; 0x3f
    9752:	f012 f84b 	bl	1b7ec <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
    9756:	f894 3102 	ldrb.w	r3, [r4, #258]	; 0x102
    975a:	b193      	cbz	r3, 9782 <SX1276OnTimeoutIrq+0x62>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
    975c:	200d      	movs	r0, #13
    975e:	f012 f850 	bl	1b802 <SX1276Read>
    9762:	f040 0140 	orr.w	r1, r0, #64	; 0x40
    9766:	b2c9      	uxtb	r1, r1
    9768:	200d      	movs	r0, #13
    976a:	f012 f83f 	bl	1b7ec <SX1276Write>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
    976e:	4b1b      	ldr	r3, [pc, #108]	; (97dc <SX1276OnTimeoutIrq+0xbc>)
    9770:	681b      	ldr	r3, [r3, #0]
    9772:	2b00      	cmp	r3, #0
    9774:	d0dd      	beq.n	9732 <SX1276OnTimeoutIrq+0x12>
    9776:	68db      	ldr	r3, [r3, #12]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
    9778:	2b00      	cmp	r3, #0
    977a:	d0da      	beq.n	9732 <SX1276OnTimeoutIrq+0x12>
}
    977c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            RadioEvents->TxTimeout( );
    9780:	4718      	bx	r3
                TimerStop( &RxTimeoutSyncWord );
    9782:	4817      	ldr	r0, [pc, #92]	; (97e0 <SX1276OnTimeoutIrq+0xc0>)
                SX1276.Settings.State = RF_IDLE;
    9784:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                TimerStop( &RxTimeoutSyncWord );
    9788:	f7fe fea0 	bl	84cc <TimerStop>
    978c:	e7ef      	b.n	976e <SX1276OnTimeoutIrq+0x4e>
        SX1276Reset( );
    978e:	f7fe fbf3 	bl	7f78 <SX1276Reset>
        RxChainCalibration( );
    9792:	f7ff f9e3 	bl	8b5c <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
    9796:	2000      	movs	r0, #0
    9798:	f012 f83e 	bl	1b818 <SX1276SetOpMode>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
    979c:	4c11      	ldr	r4, [pc, #68]	; (97e4 <SX1276OnTimeoutIrq+0xc4>)
        SX1276SetOpMode( RF_OPMODE_SLEEP );
    979e:	2500      	movs	r5, #0
            SX1276SetModem( RadioRegsInit[i].Modem );
    97a0:	7820      	ldrb	r0, [r4, #0]
    97a2:	f7ff fc61 	bl	9068 <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
    97a6:	3501      	adds	r5, #1
    97a8:	78a1      	ldrb	r1, [r4, #2]
    97aa:	7860      	ldrb	r0, [r4, #1]
    97ac:	f012 f81e 	bl	1b7ec <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
    97b0:	2d10      	cmp	r5, #16
    97b2:	f104 0403 	add.w	r4, r4, #3
    97b6:	d1f3      	bne.n	97a0 <SX1276OnTimeoutIrq+0x80>
        SX1276SetModem( MODEM_FSK );
    97b8:	2000      	movs	r0, #0
    97ba:	f7ff fc55 	bl	9068 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
    97be:	f896 0138 	ldrb.w	r0, [r6, #312]	; 0x138
    97c2:	f7ff ff99 	bl	96f8 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
    97c6:	2300      	movs	r3, #0
    97c8:	f886 30e0 	strb.w	r3, [r6, #224]	; 0xe0
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
    97cc:	4b03      	ldr	r3, [pc, #12]	; (97dc <SX1276OnTimeoutIrq+0xbc>)
    97ce:	681b      	ldr	r3, [r3, #0]
    97d0:	2b00      	cmp	r3, #0
    97d2:	d0ae      	beq.n	9732 <SX1276OnTimeoutIrq+0x12>
    97d4:	685b      	ldr	r3, [r3, #4]
    97d6:	e7cf      	b.n	9778 <SX1276OnTimeoutIrq+0x58>
    97d8:	20000dd8 	.word	0x20000dd8
    97dc:	20000da4 	.word	0x20000da4
    97e0:	20000da8 	.word	0x20000da8
    97e4:	0001e014 	.word	0x0001e014

000097e8 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    97e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    97ea:	794b      	ldrb	r3, [r1, #5]
    97ec:	2b01      	cmp	r3, #1
    97ee:	d02a      	beq.n	9846 <uarte_nrfx_configure+0x5e>
    97f0:	2b03      	cmp	r3, #3
    97f2:	d125      	bne.n	9840 <uarte_nrfx_configure+0x58>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    97f4:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    97f6:	798b      	ldrb	r3, [r1, #6]
    97f8:	2b03      	cmp	r3, #3
    97fa:	d121      	bne.n	9840 <uarte_nrfx_configure+0x58>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    97fc:	79cc      	ldrb	r4, [r1, #7]
    97fe:	b12c      	cbz	r4, 980c <uarte_nrfx_configure+0x24>
    9800:	2c01      	cmp	r4, #1
    9802:	d11d      	bne.n	9840 <uarte_nrfx_configure+0x58>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (IS_HWFC_PINS_USED(get_dev_config(dev)->flags)) {
    9804:	6843      	ldr	r3, [r0, #4]
    9806:	685b      	ldr	r3, [r3, #4]
    9808:	079b      	lsls	r3, r3, #30
    980a:	d019      	beq.n	9840 <uarte_nrfx_configure+0x58>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    980c:	790a      	ldrb	r2, [r1, #4]
    980e:	b112      	cbz	r2, 9816 <uarte_nrfx_configure+0x2e>
    9810:	2a02      	cmp	r2, #2
    9812:	d115      	bne.n	9840 <uarte_nrfx_configure+0x58>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    9814:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    9816:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    9818:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    981a:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    981e:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    9820:	d065      	beq.n	98ee <uarte_nrfx_configure+0x106>
    9822:	d82d      	bhi.n	9880 <uarte_nrfx_configure+0x98>
    9824:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    9828:	d064      	beq.n	98f4 <uarte_nrfx_configure+0x10c>
    982a:	d816      	bhi.n	985a <uarte_nrfx_configure+0x72>
    982c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    9830:	d062      	beq.n	98f8 <uarte_nrfx_configure+0x110>
    9832:	d80a      	bhi.n	984a <uarte_nrfx_configure+0x62>
    9834:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    9838:	d061      	beq.n	98fe <uarte_nrfx_configure+0x116>
    983a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    983e:	d061      	beq.n	9904 <uarte_nrfx_configure+0x11c>
    9840:	f06f 0085 	mvn.w	r0, #133	; 0x85
    9844:	e052      	b.n	98ec <uarte_nrfx_configure+0x104>
	switch (cfg->stop_bits) {
    9846:	2600      	movs	r6, #0
    9848:	e7d5      	b.n	97f6 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    984a:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    984e:	d05c      	beq.n	990a <uarte_nrfx_configure+0x122>
    9850:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    9854:	d1f4      	bne.n	9840 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    9856:	4b37      	ldr	r3, [pc, #220]	; (9934 <uarte_nrfx_configure+0x14c>)
    9858:	e03c      	b.n	98d4 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    985a:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    985e:	d057      	beq.n	9910 <uarte_nrfx_configure+0x128>
    9860:	d807      	bhi.n	9872 <uarte_nrfx_configure+0x8a>
    9862:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    9866:	d055      	beq.n	9914 <uarte_nrfx_configure+0x12c>
    9868:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    986c:	d1e8      	bne.n	9840 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    986e:	4b32      	ldr	r3, [pc, #200]	; (9938 <uarte_nrfx_configure+0x150>)
    9870:	e030      	b.n	98d4 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    9872:	f647 2712 	movw	r7, #31250	; 0x7a12
    9876:	42bb      	cmp	r3, r7
    9878:	d1e2      	bne.n	9840 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    987a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    987e:	e029      	b.n	98d4 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    9880:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    9884:	d048      	beq.n	9918 <uarte_nrfx_configure+0x130>
    9886:	d813      	bhi.n	98b0 <uarte_nrfx_configure+0xc8>
    9888:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    988c:	d047      	beq.n	991e <uarte_nrfx_configure+0x136>
    988e:	d809      	bhi.n	98a4 <uarte_nrfx_configure+0xbc>
    9890:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    9894:	42bb      	cmp	r3, r7
    9896:	d044      	beq.n	9922 <uarte_nrfx_configure+0x13a>
    9898:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    989c:	d1d0      	bne.n	9840 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    989e:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    98a2:	e017      	b.n	98d4 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    98a4:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    98a8:	d1ca      	bne.n	9840 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    98aa:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    98ae:	e011      	b.n	98d4 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    98b0:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    98b4:	d038      	beq.n	9928 <uarte_nrfx_configure+0x140>
    98b6:	d808      	bhi.n	98ca <uarte_nrfx_configure+0xe2>
    98b8:	4f20      	ldr	r7, [pc, #128]	; (993c <uarte_nrfx_configure+0x154>)
    98ba:	42bb      	cmp	r3, r7
    98bc:	d037      	beq.n	992e <uarte_nrfx_configure+0x146>
    98be:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    98c2:	d1bd      	bne.n	9840 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    98c4:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    98c8:	e004      	b.n	98d4 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    98ca:	4f1d      	ldr	r7, [pc, #116]	; (9940 <uarte_nrfx_configure+0x158>)
    98cc:	42bb      	cmp	r3, r7
    98ce:	d1b7      	bne.n	9840 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    98d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    98d4:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    98d8:	6903      	ldr	r3, [r0, #16]
    98da:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    98dc:	4334      	orrs	r4, r6
    98de:	4322      	orrs	r2, r4
    98e0:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    98e2:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    98e6:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    98ea:	2000      	movs	r0, #0
}
    98ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    98ee:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    98f2:	e7ef      	b.n	98d4 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    98f4:	4b13      	ldr	r3, [pc, #76]	; (9944 <uarte_nrfx_configure+0x15c>)
    98f6:	e7ed      	b.n	98d4 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    98f8:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    98fc:	e7ea      	b.n	98d4 <uarte_nrfx_configure+0xec>
		nrf_baudrate = 0x00014000;
    98fe:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    9902:	e7e7      	b.n	98d4 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    9904:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    9908:	e7e4      	b.n	98d4 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    990a:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    990e:	e7e1      	b.n	98d4 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    9910:	4b0d      	ldr	r3, [pc, #52]	; (9948 <uarte_nrfx_configure+0x160>)
    9912:	e7df      	b.n	98d4 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    9914:	4b0d      	ldr	r3, [pc, #52]	; (994c <uarte_nrfx_configure+0x164>)
    9916:	e7dd      	b.n	98d4 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    9918:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    991c:	e7da      	b.n	98d4 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    991e:	4b0c      	ldr	r3, [pc, #48]	; (9950 <uarte_nrfx_configure+0x168>)
    9920:	e7d8      	b.n	98d4 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    9922:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    9926:	e7d5      	b.n	98d4 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    9928:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    992c:	e7d2      	b.n	98d4 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    992e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    9932:	e7cf      	b.n	98d4 <uarte_nrfx_configure+0xec>
    9934:	0013b000 	.word	0x0013b000
    9938:	004ea000 	.word	0x004ea000
    993c:	0003d090 	.word	0x0003d090
    9940:	000f4240 	.word	0x000f4240
    9944:	00275000 	.word	0x00275000
    9948:	0075c000 	.word	0x0075c000
    994c:	003af000 	.word	0x003af000
    9950:	013a9000 	.word	0x013a9000

00009954 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    9954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
    9956:	6906      	ldr	r6, [r0, #16]
{
    9958:	4605      	mov	r5, r0
    995a:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    995c:	f012 f9f8 	bl	1bd50 <k_is_in_isr>
    9960:	b910      	cbnz	r0, 9968 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    9962:	4b20      	ldr	r3, [pc, #128]	; (99e4 <uarte_nrfx_poll_out+0x90>)
	int key;

	if (isr_mode) {
    9964:	781b      	ldrb	r3, [r3, #0]
    9966:	b983      	cbnz	r3, 998a <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    9968:	f04f 0320 	mov.w	r3, #32
    996c:	f3ef 8411 	mrs	r4, BASEPRI
    9970:	f383 8811 	msr	BASEPRI, r3
    9974:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    9978:	4628      	mov	r0, r5
    997a:	f012 f82b 	bl	1b9d4 <is_tx_ready>
    997e:	bb28      	cbnz	r0, 99cc <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    9980:	f384 8811 	msr	BASEPRI, r4
    9984:	f3bf 8f6f 	isb	sy
}
    9988:	e7ee      	b.n	9968 <uarte_nrfx_poll_out+0x14>
{
    998a:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    998c:	4628      	mov	r0, r5
    998e:	f012 f821 	bl	1b9d4 <is_tx_ready>
    9992:	b970      	cbnz	r0, 99b2 <uarte_nrfx_poll_out+0x5e>
    9994:	2001      	movs	r0, #1
    9996:	f012 f933 	bl	1bc00 <nrfx_busy_wait>
    999a:	3c01      	subs	r4, #1
    999c:	d1f6      	bne.n	998c <uarte_nrfx_poll_out+0x38>
    999e:	2100      	movs	r1, #0
    99a0:	2021      	movs	r0, #33	; 0x21
    99a2:	f001 fc53 	bl	b24c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    99a6:	e7f0      	b.n	998a <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    99a8:	f384 8811 	msr	BASEPRI, r4
    99ac:	f3bf 8f6f 	isb	sy
}
    99b0:	e7f5      	b.n	999e <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    99b2:	f04f 0320 	mov.w	r3, #32
    99b6:	f3ef 8411 	mrs	r4, BASEPRI
    99ba:	f383 8811 	msr	BASEPRI, r3
    99be:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    99c2:	4628      	mov	r0, r5
    99c4:	f012 f806 	bl	1b9d4 <is_tx_ready>
    99c8:	2800      	cmp	r0, #0
    99ca:	d0ed      	beq.n	99a8 <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
    99cc:	4631      	mov	r1, r6
	tx_start(dev, &data->char_out, 1);
    99ce:	2201      	movs	r2, #1
	data->char_out = c;
    99d0:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
    99d4:	4628      	mov	r0, r5
    99d6:	f012 f890 	bl	1bafa <tx_start>
	__asm__ volatile(
    99da:	f384 8811 	msr	BASEPRI, r4
    99de:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    99e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    99e4:	2000166d 	.word	0x2000166d

000099e8 <nrf_gpio_cfg_output>:
    *p_pin = pin_number & 0x1F;
    99e8:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    99ec:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    99ee:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
    99f0:	4b04      	ldr	r3, [pc, #16]	; (9a04 <nrf_gpio_cfg_output+0x1c>)
    reg->PIN_CNF[pin_number] = cnf;
    99f2:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
        case 1: return NRF_P1;
    99f6:	bf18      	it	ne
    99f8:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    99fc:	2103      	movs	r1, #3
    99fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    9a02:	4770      	bx	lr
    9a04:	50000300 	.word	0x50000300

00009a08 <nrf_gpio_pin_set>:
    *p_pin = pin_number & 0x1F;
    9a08:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    9a0c:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9a0e:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
    9a10:	4b04      	ldr	r3, [pc, #16]	; (9a24 <nrf_gpio_pin_set+0x1c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    9a12:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
    9a16:	bf18      	it	ne
    9a18:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    9a1c:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    9a1e:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}
    9a22:	4770      	bx	lr
    9a24:	50000300 	.word	0x50000300

00009a28 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    9a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9a2a:	2200      	movs	r2, #0
    9a2c:	4605      	mov	r5, r0
    9a2e:	2101      	movs	r1, #1
    9a30:	2002      	movs	r0, #2
    9a32:	f7fc ff65 	bl	6900 <z_arm_irq_priority_set>
    9a36:	2002      	movs	r0, #2
    9a38:	f7fc ff44 	bl	68c4 <arch_irq_enable>
	return config->uarte_regs;
    9a3c:	686b      	ldr	r3, [r5, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
    9a3e:	692e      	ldr	r6, [r5, #16]
	return config->uarte_regs;
    9a40:	681c      	ldr	r4, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    9a42:	2300      	movs	r3, #0
    9a44:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
        nrf_gpio_pin_set(pin_number);
    9a48:	2014      	movs	r0, #20
	data->dev = dev;
    9a4a:	6035      	str	r5, [r6, #0]
    9a4c:	f7ff ffdc 	bl	9a08 <nrf_gpio_pin_set>
	nrf_gpio_cfg_output(config->pseltxd);
    9a50:	2014      	movs	r0, #20
    9a52:	f7ff ffc9 	bl	99e8 <nrf_gpio_cfg_output>
    reg->PIN_CNF[pin_number] = cnf;
    9a56:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    9a5a:	220c      	movs	r2, #12
    p_reg->PSEL.TXD = pseltxd;
    9a5c:	2114      	movs	r1, #20
    9a5e:	f8c3 2760 	str.w	r2, [r3, #1888]	; 0x760
    9a62:	f8c4 150c 	str.w	r1, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    9a66:	2118      	movs	r1, #24
    9a68:	f8c4 1514 	str.w	r1, [r4, #1300]	; 0x514
        nrf_gpio_pin_set(pin_number);
    9a6c:	2011      	movs	r0, #17
    reg->PIN_CNF[pin_number] = cnf;
    9a6e:	f8c3 2758 	str.w	r2, [r3, #1880]	; 0x758
        nrf_gpio_pin_set(pin_number);
    9a72:	f7ff ffc9 	bl	9a08 <nrf_gpio_pin_set>
		nrf_gpio_cfg_output(config->pselrts);
    9a76:	2011      	movs	r0, #17
    9a78:	f7ff ffb6 	bl	99e8 <nrf_gpio_cfg_output>
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    9a7c:	6929      	ldr	r1, [r5, #16]
    p_reg->PSEL.RTS = pselrts;
    9a7e:	2311      	movs	r3, #17
    9a80:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    9a84:	2316      	movs	r3, #22
    9a86:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    9a8a:	3104      	adds	r1, #4
    9a8c:	4628      	mov	r0, r5
    9a8e:	f7ff feab 	bl	97e8 <uarte_nrfx_configure>
	if (err) {
    9a92:	4607      	mov	r7, r0
    9a94:	b9b0      	cbnz	r0, 9ac4 <uarte_0_init+0x9c>
	    get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    9a96:	686b      	ldr	r3, [r5, #4]
    9a98:	685b      	ldr	r3, [r3, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    9a9a:	0719      	lsls	r1, r3, #28
    9a9c:	d527      	bpl.n	9aee <uarte_0_init+0xc6>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    9a9e:	f106 0016 	add.w	r0, r6, #22
    9aa2:	f000 faab 	bl	9ffc <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    9aa6:	4b26      	ldr	r3, [pc, #152]	; (9b40 <uarte_0_init+0x118>)
    9aa8:	4298      	cmp	r0, r3
    9aaa:	d00d      	beq.n	9ac8 <uarte_0_init+0xa0>
    9aac:	4b25      	ldr	r3, [pc, #148]	; (9b44 <uarte_0_init+0x11c>)
    9aae:	4926      	ldr	r1, [pc, #152]	; (9b48 <uarte_0_init+0x120>)
		LOG_ERR("Failed to allocate PPI Channel");
    9ab0:	4826      	ldr	r0, [pc, #152]	; (9b4c <uarte_0_init+0x124>)
    9ab2:	1ac9      	subs	r1, r1, r3
    9ab4:	08c9      	lsrs	r1, r1, #3
    9ab6:	0189      	lsls	r1, r1, #6
    9ab8:	f041 0101 	orr.w	r1, r1, #1
    9abc:	f011 f84b 	bl	1ab56 <log_0>
		return -EIO;
    9ac0:	f06f 0704 	mvn.w	r7, #4
UART_NRF_UARTE_DEVICE(0);
    9ac4:	4638      	mov	r0, r7
    9ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    9ac8:	7db0      	ldrb	r0, [r6, #22]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    9aca:	00c3      	lsls	r3, r0, #3
    9acc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    9ad0:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    9ad4:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    9ad8:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    9adc:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    9ae0:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    9ae4:	4a1a      	ldr	r2, [pc, #104]	; (9b50 <uarte_0_init+0x128>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    9ae6:	2301      	movs	r3, #1
    9ae8:	4083      	lsls	r3, r0
    9aea:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    9aee:	2308      	movs	r3, #8
    9af0:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9af4:	2300      	movs	r3, #0
    9af6:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    9afa:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    9afe:	f106 0315 	add.w	r3, r6, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    9b02:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    9b06:	2301      	movs	r3, #1
    9b08:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9b0c:	6023      	str	r3, [r4, #0]
	if (!(get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    9b0e:	686b      	ldr	r3, [r5, #4]
    9b10:	685b      	ldr	r3, [r3, #4]
    9b12:	071a      	lsls	r2, r3, #28
    p_reg->INTENSET = mask;
    9b14:	bf5c      	itt	pl
    9b16:	f44f 7280 	movpl.w	r2, #256	; 0x100
    9b1a:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    9b1e:	06db      	lsls	r3, r3, #27
    9b20:	bf44      	itt	mi
    9b22:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    9b26:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    9b2a:	3614      	adds	r6, #20
    p_reg->TXD.MAXCNT = length;
    9b2c:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    9b2e:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    9b32:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9b36:	2301      	movs	r3, #1
    9b38:	60a3      	str	r3, [r4, #8]
    9b3a:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
    9b3c:	e7c2      	b.n	9ac4 <uarte_0_init+0x9c>
    9b3e:	bf00      	nop
    9b40:	0bad0000 	.word	0x0bad0000
    9b44:	0001c8a0 	.word	0x0001c8a0
    9b48:	0001c8f0 	.word	0x0001c8f0
    9b4c:	0001e044 	.word	0x0001e044
    9b50:	4001f000 	.word	0x4001f000

00009b54 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    9b54:	b508      	push	{r3, lr}
	z_impl_log_panic();
    9b56:	f7fb ff05 	bl	5964 <z_impl_log_panic>
    9b5a:	4b06      	ldr	r3, [pc, #24]	; (9b74 <k_sys_fatal_error_handler+0x20>)
    9b5c:	4906      	ldr	r1, [pc, #24]	; (9b78 <k_sys_fatal_error_handler+0x24>)
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    9b5e:	4807      	ldr	r0, [pc, #28]	; (9b7c <k_sys_fatal_error_handler+0x28>)
    9b60:	1ac9      	subs	r1, r1, r3
    9b62:	08c9      	lsrs	r1, r1, #3
    9b64:	0189      	lsls	r1, r1, #6
    9b66:	f041 0101 	orr.w	r1, r1, #1
    9b6a:	f010 fff4 	bl	1ab56 <log_0>
		sys_arch_reboot(0);
    9b6e:	2000      	movs	r0, #0
    9b70:	f7fd fbca 	bl	7308 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    9b74:	0001c8a0 	.word	0x0001c8a0
    9b78:	0001c8a8 	.word	0x0001c8a8
    9b7c:	0001e073 	.word	0x0001e073

00009b80 <__NVIC_SystemReset>:
    9b80:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    9b84:	4905      	ldr	r1, [pc, #20]	; (9b9c <__NVIC_SystemReset+0x1c>)
    9b86:	4b06      	ldr	r3, [pc, #24]	; (9ba0 <__NVIC_SystemReset+0x20>)
    9b88:	68ca      	ldr	r2, [r1, #12]
    9b8a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    9b8e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    9b90:	60cb      	str	r3, [r1, #12]
    9b92:	f3bf 8f4f 	dsb	sy
    __NOP();
    9b96:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    9b98:	e7fd      	b.n	9b96 <__NVIC_SystemReset+0x16>
    9b9a:	bf00      	nop
    9b9c:	e000ed00 	.word	0xe000ed00
    9ba0:	05fa0004 	.word	0x05fa0004

00009ba4 <nrf52_errata_136>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    9ba4:	4b03      	ldr	r3, [pc, #12]	; (9bb4 <nrf52_errata_136+0x10>)
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    9ba6:	6818      	ldr	r0, [r3, #0]
                }
            }
        #endif
        return false;
    #endif
}
    9ba8:	f1a0 0308 	sub.w	r3, r0, #8
    9bac:	4258      	negs	r0, r3
    9bae:	4158      	adcs	r0, r3
    9bb0:	4770      	bx	lr
    9bb2:	bf00      	nop
    9bb4:	10000130 	.word	0x10000130

00009bb8 <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    9bb8:	4b06      	ldr	r3, [pc, #24]	; (9bd4 <nrf52_errata_103+0x1c>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    9bba:	681b      	ldr	r3, [r3, #0]
    9bbc:	2b08      	cmp	r3, #8
    9bbe:	d106      	bne.n	9bce <nrf52_errata_103+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    9bc0:	4b05      	ldr	r3, [pc, #20]	; (9bd8 <nrf52_errata_103+0x20>)
    9bc2:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
    9bc4:	2b05      	cmp	r3, #5
    9bc6:	d802      	bhi.n	9bce <nrf52_errata_103+0x16>
    9bc8:	4a04      	ldr	r2, [pc, #16]	; (9bdc <nrf52_errata_103+0x24>)
    9bca:	5cd0      	ldrb	r0, [r2, r3]
    9bcc:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
    9bce:	2000      	movs	r0, #0
    #endif
}
    9bd0:	4770      	bx	lr
    9bd2:	bf00      	nop
    9bd4:	10000130 	.word	0x10000130
    9bd8:	10000134 	.word	0x10000134
    9bdc:	0001e096 	.word	0x0001e096

00009be0 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    9be0:	4a02      	ldr	r2, [pc, #8]	; (9bec <nvmc_wait+0xc>)
    9be2:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    9be6:	2b00      	cmp	r3, #0
    9be8:	d0fb      	beq.n	9be2 <nvmc_wait+0x2>
}
    9bea:	4770      	bx	lr
    9bec:	4001e000 	.word	0x4001e000

00009bf0 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    9bf0:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    9bf2:	f7ff ffd7 	bl	9ba4 <nrf52_errata_136>
    9bf6:	b140      	cbz	r0, 9c0a <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    9bf8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9bfc:	2200      	movs	r2, #0
    9bfe:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    9c02:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    9c06:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    9c0a:	f7ff ffcb 	bl	9ba4 <nrf52_errata_136>
    9c0e:	2800      	cmp	r0, #0
    9c10:	d046      	beq.n	9ca0 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    9c12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    9c16:	4b61      	ldr	r3, [pc, #388]	; (9d9c <SystemInit+0x1ac>)
    9c18:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    9c1c:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    9c20:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    9c24:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    9c28:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    9c2c:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    9c30:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    9c34:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    9c38:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    9c3c:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    9c40:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    9c44:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    9c48:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    9c4c:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    9c50:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    9c54:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    9c58:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    9c5c:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    9c60:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    9c64:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    9c68:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    9c6c:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    9c70:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    9c74:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    9c78:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    9c7c:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    9c80:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    9c84:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    9c88:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    9c8c:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    9c90:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    9c94:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    9c98:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    9c9c:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    9ca0:	f7ff ff8a 	bl	9bb8 <nrf52_errata_103>
    9ca4:	b110      	cbz	r0, 9cac <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    9ca6:	4b3e      	ldr	r3, [pc, #248]	; (9da0 <SystemInit+0x1b0>)
    9ca8:	4a3e      	ldr	r2, [pc, #248]	; (9da4 <SystemInit+0x1b4>)
    9caa:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    9cac:	f7ff ff84 	bl	9bb8 <nrf52_errata_103>
    9cb0:	b118      	cbz	r0, 9cba <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    9cb2:	4b3d      	ldr	r3, [pc, #244]	; (9da8 <SystemInit+0x1b8>)
    9cb4:	22fb      	movs	r2, #251	; 0xfb
    9cb6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    9cba:	f7ff ff7d 	bl	9bb8 <nrf52_errata_103>
    9cbe:	b148      	cbz	r0, 9cd4 <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    9cc0:	493a      	ldr	r1, [pc, #232]	; (9dac <SystemInit+0x1bc>)
    9cc2:	4b3b      	ldr	r3, [pc, #236]	; (9db0 <SystemInit+0x1c0>)
    9cc4:	680a      	ldr	r2, [r1, #0]
    9cc6:	681b      	ldr	r3, [r3, #0]
    9cc8:	f022 020f 	bic.w	r2, r2, #15
    9ccc:	f003 030f 	and.w	r3, r3, #15
    9cd0:	4313      	orrs	r3, r2
    9cd2:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    9cd4:	f7ff ff70 	bl	9bb8 <nrf52_errata_103>
    9cd8:	b118      	cbz	r0, 9ce2 <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    9cda:	4b36      	ldr	r3, [pc, #216]	; (9db4 <SystemInit+0x1c4>)
    9cdc:	f44f 7200 	mov.w	r2, #512	; 0x200
    9ce0:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    9ce2:	f7ff ff5f 	bl	9ba4 <nrf52_errata_136>
    9ce6:	b148      	cbz	r0, 9cfc <SystemInit+0x10c>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    9ce8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9cec:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    9cf0:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    9cf2:	bf44      	itt	mi
    9cf4:	f06f 0201 	mvnmi.w	r2, #1
    9cf8:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
        #if defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    9cfc:	4b2e      	ldr	r3, [pc, #184]	; (9db8 <SystemInit+0x1c8>)
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    9cfe:	681b      	ldr	r3, [r3, #0]
    9d00:	2b08      	cmp	r3, #8
    9d02:	d10e      	bne.n	9d22 <SystemInit+0x132>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    9d04:	4b2d      	ldr	r3, [pc, #180]	; (9dbc <SystemInit+0x1cc>)
    9d06:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
    9d08:	2b05      	cmp	r3, #5
    9d0a:	d802      	bhi.n	9d12 <SystemInit+0x122>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_errata_249())
    9d0c:	4a2c      	ldr	r2, [pc, #176]	; (9dc0 <SystemInit+0x1d0>)
    9d0e:	5cd3      	ldrb	r3, [r2, r3]
    9d10:	b13b      	cbz	r3, 9d22 <SystemInit+0x132>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    9d12:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    9d16:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    9d1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9d1e:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure NFCT pins as GPIOs if NFCT is not to be used in your code. If CONFIG_NFCT_PINS_AS_GPIOS is not defined,
       two GPIOs (see Product Specification to see which ones) will be reserved for NFC and will not be available as
       normal GPIOs. */
    #if defined (CONFIG_NFCT_PINS_AS_GPIOS) && defined(NFCT_PRESENT)
        if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
    9d22:	f04f 2110 	mov.w	r1, #268439552	; 0x10001000
    9d26:	f8d1 320c 	ldr.w	r3, [r1, #524]	; 0x20c
    9d2a:	07db      	lsls	r3, r3, #31
    9d2c:	d514      	bpl.n	9d58 <SystemInit+0x168>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    9d2e:	4825      	ldr	r0, [pc, #148]	; (9dc4 <SystemInit+0x1d4>)
    9d30:	2301      	movs	r3, #1
    9d32:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
    nvmc_wait();
    9d36:	f7ff ff53 	bl	9be0 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
    9d3a:	f8d1 320c 	ldr.w	r3, [r1, #524]	; 0x20c
    9d3e:	f023 0301 	bic.w	r3, r3, #1
    9d42:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c
            nvmc_wait();
    9d46:	f7ff ff4b 	bl	9be0 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    9d4a:	2300      	movs	r3, #0
    9d4c:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
    nvmc_wait();
    9d50:	f7ff ff46 	bl	9be0 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
            nvmc_wait();
            NRF_UICR->PSELRESET[1] = RESET_PIN;
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
    9d54:	f7ff ff14 	bl	9b80 <__NVIC_SystemReset>
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    9d58:	f8d1 3200 	ldr.w	r3, [r1, #512]	; 0x200
    9d5c:	2b00      	cmp	r3, #0
    9d5e:	db03      	blt.n	9d68 <SystemInit+0x178>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    9d60:	f8d1 3204 	ldr.w	r3, [r1, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    9d64:	2b00      	cmp	r3, #0
    9d66:	da14      	bge.n	9d92 <SystemInit+0x1a2>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    9d68:	4916      	ldr	r1, [pc, #88]	; (9dc4 <SystemInit+0x1d4>)
    9d6a:	2301      	movs	r3, #1
    9d6c:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    9d70:	f7ff ff36 	bl	9be0 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    9d74:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    9d78:	2412      	movs	r4, #18
    9d7a:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    9d7e:	f7ff ff2f 	bl	9be0 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    9d82:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    9d86:	f7ff ff2b 	bl	9be0 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    9d8a:	2300      	movs	r3, #0
    9d8c:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    9d90:	e7de      	b.n	9d50 <SystemInit+0x160>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    9d92:	4b0d      	ldr	r3, [pc, #52]	; (9dc8 <SystemInit+0x1d8>)
    9d94:	4a0d      	ldr	r2, [pc, #52]	; (9dcc <SystemInit+0x1dc>)
    9d96:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    9d98:	bd10      	pop	{r4, pc}
    9d9a:	bf00      	nop
    9d9c:	4000c000 	.word	0x4000c000
    9da0:	4000568c 	.word	0x4000568c
    9da4:	00038148 	.word	0x00038148
    9da8:	4000f000 	.word	0x4000f000
    9dac:	40000ee4 	.word	0x40000ee4
    9db0:	10000258 	.word	0x10000258
    9db4:	40029640 	.word	0x40029640
    9db8:	10000130 	.word	0x10000130
    9dbc:	10000134 	.word	0x10000134
    9dc0:	0001e090 	.word	0x0001e090
    9dc4:	4001e000 	.word	0x4001e000
    9dc8:	200000f4 	.word	0x200000f4
    9dcc:	03d09000 	.word	0x03d09000

00009dd0 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    9dd0:	4b04      	ldr	r3, [pc, #16]	; (9de4 <nrfx_clock_init+0x14>)
    9dd2:	791a      	ldrb	r2, [r3, #4]
    9dd4:	b922      	cbnz	r2, 9de0 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    9dd6:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    9dd8:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    9dda:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    9ddc:	4802      	ldr	r0, [pc, #8]	; (9de8 <nrfx_clock_init+0x18>)
    9dde:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    9de0:	4802      	ldr	r0, [pc, #8]	; (9dec <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    9de2:	4770      	bx	lr
    9de4:	20000f38 	.word	0x20000f38
    9de8:	0bad0000 	.word	0x0bad0000
    9dec:	0bad000c 	.word	0x0bad000c

00009df0 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    9df0:	b110      	cbz	r0, 9df8 <nrfx_clock_start+0x8>
    9df2:	2801      	cmp	r0, #1
    9df4:	d020      	beq.n	9e38 <nrfx_clock_start+0x48>
    9df6:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    9df8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9dfc:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    9e00:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    9e04:	f411 3f80 	tst.w	r1, #65536	; 0x10000
    9e08:	4619      	mov	r1, r3
    9e0a:	d011      	beq.n	9e30 <nrfx_clock_start+0x40>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    9e0c:	f002 0203 	and.w	r2, r2, #3
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    9e10:	2a01      	cmp	r2, #1
    9e12:	d10d      	bne.n	9e30 <nrfx_clock_start+0x40>
    p_reg->LFCLKSRC = (uint32_t)(source);
    9e14:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9e18:	4b0c      	ldr	r3, [pc, #48]	; (9e4c <nrfx_clock_start+0x5c>)
    9e1a:	2200      	movs	r2, #0
    9e1c:	601a      	str	r2, [r3, #0]
    9e1e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    9e20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9e24:	2202      	movs	r2, #2
    9e26:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9e2a:	2201      	movs	r2, #1
    9e2c:	609a      	str	r2, [r3, #8]
}
    9e2e:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
    9e30:	2300      	movs	r3, #0
    9e32:	f8c1 3518 	str.w	r3, [r1, #1304]	; 0x518
}
    9e36:	e7ef      	b.n	9e18 <nrfx_clock_start+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9e38:	4b05      	ldr	r3, [pc, #20]	; (9e50 <nrfx_clock_start+0x60>)
    9e3a:	2200      	movs	r2, #0
    9e3c:	601a      	str	r2, [r3, #0]
    9e3e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    9e40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9e44:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9e48:	6018      	str	r0, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    9e4a:	4770      	bx	lr
    9e4c:	40000104 	.word	0x40000104
    9e50:	40000100 	.word	0x40000100

00009e54 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    9e54:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    9e56:	b110      	cbz	r0, 9e5e <nrfx_clock_stop+0xa>
    9e58:	2801      	cmp	r0, #1
    9e5a:	d018      	beq.n	9e8e <nrfx_clock_stop+0x3a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    9e5c:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
    9e5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9e62:	2202      	movs	r2, #2
    9e64:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9e68:	4a18      	ldr	r2, [pc, #96]	; (9ecc <nrfx_clock_stop+0x78>)
    9e6a:	6010      	str	r0, [r2, #0]
    9e6c:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9e6e:	4a18      	ldr	r2, [pc, #96]	; (9ed0 <nrfx_clock_stop+0x7c>)
    9e70:	2101      	movs	r1, #1
    9e72:	6011      	str	r1, [r2, #0]
    9e74:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    9e78:	461c      	mov	r4, r3
    9e7a:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
    9e7e:	03db      	lsls	r3, r3, #15
    9e80:	d5ec      	bpl.n	9e5c <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    9e82:	2001      	movs	r0, #1
    9e84:	f011 febc 	bl	1bc00 <nrfx_busy_wait>
    9e88:	3d01      	subs	r5, #1
    9e8a:	d1f6      	bne.n	9e7a <nrfx_clock_stop+0x26>
    9e8c:	e7e6      	b.n	9e5c <nrfx_clock_stop+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9e8e:	4b11      	ldr	r3, [pc, #68]	; (9ed4 <nrfx_clock_stop+0x80>)
    p_reg->INTENCLR = mask;
    9e90:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9e94:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    9e96:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9e9a:	601a      	str	r2, [r3, #0]
    9e9c:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9e9e:	4b0e      	ldr	r3, [pc, #56]	; (9ed8 <nrfx_clock_stop+0x84>)
    9ea0:	f242 7510 	movw	r5, #10000	; 0x2710
    9ea4:	6018      	str	r0, [r3, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    9ea6:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    9eaa:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
    9eae:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    9eb0:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    9eb4:	d505      	bpl.n	9ec2 <nrfx_clock_stop+0x6e>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    9eb6:	b123      	cbz	r3, 9ec2 <nrfx_clock_stop+0x6e>
    9eb8:	2001      	movs	r0, #1
    9eba:	f011 fea1 	bl	1bc00 <nrfx_busy_wait>
    9ebe:	3d01      	subs	r5, #1
    9ec0:	d1f1      	bne.n	9ea6 <nrfx_clock_stop+0x52>
            m_clock_cb.hfclk_started = false;
    9ec2:	4b06      	ldr	r3, [pc, #24]	; (9edc <nrfx_clock_stop+0x88>)
    9ec4:	2200      	movs	r2, #0
    9ec6:	715a      	strb	r2, [r3, #5]
    9ec8:	e7c8      	b.n	9e5c <nrfx_clock_stop+0x8>
    9eca:	bf00      	nop
    9ecc:	40000104 	.word	0x40000104
    9ed0:	4000000c 	.word	0x4000000c
    9ed4:	40000100 	.word	0x40000100
    9ed8:	40000004 	.word	0x40000004
    9edc:	20000f38 	.word	0x20000f38

00009ee0 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    9ee0:	4b16      	ldr	r3, [pc, #88]	; (9f3c <nrfx_power_clock_irq_handler+0x5c>)
    9ee2:	681a      	ldr	r2, [r3, #0]
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    9ee4:	b510      	push	{r4, lr}
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    9ee6:	b16a      	cbz	r2, 9f04 <nrfx_power_clock_irq_handler+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9ee8:	2200      	movs	r2, #0
    9eea:	601a      	str	r2, [r3, #0]
    9eec:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    9eee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9ef2:	2201      	movs	r2, #1
    9ef4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    9ef8:	4b11      	ldr	r3, [pc, #68]	; (9f40 <nrfx_power_clock_irq_handler+0x60>)
    9efa:	7958      	ldrb	r0, [r3, #5]
    9efc:	b910      	cbnz	r0, 9f04 <nrfx_power_clock_irq_handler+0x24>
        {
            m_clock_cb.hfclk_started = true;
    9efe:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    9f00:	681b      	ldr	r3, [r3, #0]
    9f02:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    9f04:	4b0f      	ldr	r3, [pc, #60]	; (9f44 <nrfx_power_clock_irq_handler+0x64>)
    9f06:	681a      	ldr	r2, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    9f08:	b172      	cbz	r2, 9f28 <nrfx_power_clock_irq_handler+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9f0a:	2200      	movs	r2, #0
    9f0c:	601a      	str	r2, [r3, #0]
    9f0e:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    9f10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9f14:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    9f18:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    9f1c:	0792      	lsls	r2, r2, #30
    9f1e:	d104      	bne.n	9f2a <nrfx_power_clock_irq_handler+0x4a>
    p_reg->LFCLKSRC = (uint32_t)(source);
    9f20:	2201      	movs	r2, #1
    9f22:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9f26:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    9f28:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    9f2a:	2202      	movs	r2, #2
    9f2c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    9f30:	4b03      	ldr	r3, [pc, #12]	; (9f40 <nrfx_power_clock_irq_handler+0x60>)
}
    9f32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    9f36:	681b      	ldr	r3, [r3, #0]
    9f38:	2001      	movs	r0, #1
    9f3a:	4718      	bx	r3
    9f3c:	40000100 	.word	0x40000100
    9f40:	20000f38 	.word	0x20000f38
    9f44:	40000104 	.word	0x40000104

00009f48 <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
    9f48:	2301      	movs	r3, #1
    9f4a:	fa03 f000 	lsl.w	r0, r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
    9f4e:	f010 0fff 	tst.w	r0, #255	; 0xff
    9f52:	d012      	beq.n	9f7a <nrfx_gpiote_channel_free+0x32>
	__asm__ volatile(
    9f54:	f04f 0320 	mov.w	r3, #32
    9f58:	f3ef 8111 	mrs	r1, BASEPRI
    9f5c:	f383 8811 	msr	BASEPRI, r3
    9f60:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
    9f64:	4a06      	ldr	r2, [pc, #24]	; (9f80 <nrfx_gpiote_channel_free+0x38>)
    9f66:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
    9f68:	ea23 0000 	bic.w	r0, r3, r0
    9f6c:	65d0      	str	r0, [r2, #92]	; 0x5c
	__asm__ volatile(
    9f6e:	f381 8811 	msr	BASEPRI, r1
    9f72:	f3bf 8f6f 	isb	sy
    9f76:	4803      	ldr	r0, [pc, #12]	; (9f84 <nrfx_gpiote_channel_free+0x3c>)
    9f78:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
    9f7a:	4803      	ldr	r0, [pc, #12]	; (9f88 <nrfx_gpiote_channel_free+0x40>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    9f7c:	4770      	bx	lr
    9f7e:	bf00      	nop
    9f80:	20000f40 	.word	0x20000f40
    9f84:	0bad0000 	.word	0x0bad0000
    9f88:	0bad0004 	.word	0x0bad0004

00009f8c <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
    9f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9f90:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
    9f92:	f8df e060 	ldr.w	lr, [pc, #96]	; 9ff4 <nrfx_gpiote_channel_alloc+0x68>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    9f96:	4816      	ldr	r0, [pc, #88]	; (9ff0 <nrfx_gpiote_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
    9f98:	f8df 805c 	ldr.w	r8, [pc, #92]	; 9ff8 <nrfx_gpiote_channel_alloc+0x6c>
{
    9f9c:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
    9f9e:	22ff      	movs	r2, #255	; 0xff
    return m_cb.allocated_channels_mask & (1UL << index);
    9fa0:	2601      	movs	r6, #1
    9fa2:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
    9fa4:	f04f 0120 	mov.w	r1, #32
    9fa8:	f3ef 8c11 	mrs	ip, BASEPRI
    9fac:	f381 8811 	msr	BASEPRI, r1
    9fb0:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    9fb4:	fa22 f103 	lsr.w	r1, r2, r3
    9fb8:	07c9      	lsls	r1, r1, #31
    9fba:	d50a      	bpl.n	9fd2 <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
    9fbc:	f8de 105c 	ldr.w	r1, [lr, #92]	; 0x5c
    9fc0:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    9fc4:	4239      	tst	r1, r7
    m_cb.allocated_channels_mask |= (1UL << index);
    9fc6:	bf01      	itttt	eq
    9fc8:	4339      	orreq	r1, r7
    9fca:	f8ce 105c 	streq.w	r1, [lr, #92]	; 0x5c
            err_code = NRFX_SUCCESS;
    9fce:	4640      	moveq	r0, r8
            *p_channel = ch_idx;
    9fd0:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
    9fd2:	f38c 8811 	msr	BASEPRI, ip
    9fd6:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
    9fda:	4540      	cmp	r0, r8
    9fdc:	d005      	beq.n	9fea <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
    9fde:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    9fe2:	439a      	bics	r2, r3
    9fe4:	f104 0401 	add.w	r4, r4, #1
    9fe8:	d1db      	bne.n	9fa2 <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    9fea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9fee:	bf00      	nop
    9ff0:	0bad0002 	.word	0x0bad0002
    9ff4:	20000f40 	.word	0x20000f40
    9ff8:	0bad0000 	.word	0x0bad0000

00009ffc <nrfx_ppi_channel_alloc>:
    group_allocated_clr_all();
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    9ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
    a000:	4a14      	ldr	r2, [pc, #80]	; (a054 <nrfx_ppi_channel_alloc+0x58>)
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
    a002:	4e15      	ldr	r6, [pc, #84]	; (a058 <nrfx_ppi_channel_alloc+0x5c>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
        {
            channel_allocated_set(channel);
            *p_channel = channel;
            err_code   = NRFX_SUCCESS;
    a004:	4f15      	ldr	r7, [pc, #84]	; (a05c <nrfx_ppi_channel_alloc+0x60>)
{
    a006:	4605      	mov	r5, r0
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    a008:	4815      	ldr	r0, [pc, #84]	; (a060 <nrfx_ppi_channel_alloc+0x64>)
{
    a00a:	2400      	movs	r4, #0
NRFX_STATIC_INLINE uint32_t nrfx_ppi_task_addr_group_disable_get(nrf_ppi_channel_group_t group);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE uint32_t nrfx_ppi_channel_to_mask(nrf_ppi_channel_t channel)
{
    return (1uL << (uint32_t) channel);
    a00c:	f04f 0e01 	mov.w	lr, #1
    a010:	fa5f fc84 	uxtb.w	ip, r4
	__asm__ volatile(
    a014:	f04f 0320 	mov.w	r3, #32
    a018:	f3ef 8811 	mrs	r8, BASEPRI
    a01c:	f383 8811 	msr	BASEPRI, r3
    a020:	f3bf 8f6f 	isb	sy
    a024:	fa0e f30c 	lsl.w	r3, lr, ip
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
    a028:	4213      	tst	r3, r2
    a02a:	d007      	beq.n	a03c <nrfx_ppi_channel_alloc+0x40>
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
    a02c:	6831      	ldr	r1, [r6, #0]
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
    a02e:	420b      	tst	r3, r1
    m_channels_allocated |= nrfx_ppi_channel_to_mask(channel);
    a030:	bf01      	itttt	eq
    a032:	4319      	orreq	r1, r3
    a034:	6031      	streq	r1, [r6, #0]
            *p_channel = channel;
    a036:	f885 c000 	strbeq.w	ip, [r5]
            err_code   = NRFX_SUCCESS;
    a03a:	4638      	moveq	r0, r7
	__asm__ volatile(
    a03c:	f388 8811 	msr	BASEPRI, r8
    a040:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();
        if (err_code == NRFX_SUCCESS)
    a044:	42b8      	cmp	r0, r7
    a046:	d003      	beq.n	a050 <nrfx_ppi_channel_alloc+0x54>
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
    a048:	439a      	bics	r2, r3
    a04a:	f104 0401 	add.w	r4, r4, #1
    a04e:	d1df      	bne.n	a010 <nrfx_ppi_channel_alloc+0x14>
        mask &= ~nrfx_ppi_channel_to_mask(channel);
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    a050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a054:	000fffff 	.word	0x000fffff
    a058:	20000fa0 	.word	0x20000fa0
    a05c:	0bad0000 	.word	0x0bad0000
    a060:	0bad0002 	.word	0x0bad0002

0000a064 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    a064:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    a066:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    a06a:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    a06c:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    a06e:	6002      	str	r2, [r0, #0]
}
    a070:	4802      	ldr	r0, [pc, #8]	; (a07c <nrf_gpio_pin_port_decode+0x18>)
    a072:	bf18      	it	ne
    a074:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    a078:	4770      	bx	lr
    a07a:	bf00      	nop
    a07c:	50000300 	.word	0x50000300

0000a080 <nrfx_spi_init>:

nrfx_err_t nrfx_spi_init(nrfx_spi_t const *        p_instance,
                         nrfx_spi_config_t const * p_config,
                         nrfx_spi_evt_handler_t    handler,
                         void *                    p_context)
{
    a080:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    NRFX_ASSERT(p_config);
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    a084:	7906      	ldrb	r6, [r0, #4]
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    a086:	4c4c      	ldr	r4, [pc, #304]	; (a1b8 <nrfx_spi_init+0x138>)
{
    a088:	4680      	mov	r8, r0
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    a08a:	2028      	movs	r0, #40	; 0x28
    a08c:	4370      	muls	r0, r6
    a08e:	1825      	adds	r5, r4, r0
    a090:	7f2f      	ldrb	r7, [r5, #28]
    a092:	2f00      	cmp	r7, #0
    a094:	f040 808e 	bne.w	a1b4 <nrfx_spi_init+0x134>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    a098:	5022      	str	r2, [r4, r0]
    p_cb->p_context = p_context;
    a09a:	606b      	str	r3, [r5, #4]
    // Configure pins used by the peripheral:
    // - SCK - output with initial value corresponding with the SPI mode used:
    //   0 - for modes 0 and 1 (CPOL = 0), 1 - for modes 2 and 3 (CPOL = 1);
    //   according to the reference manual guidelines this pin and its input
    //   buffer must always be connected for the SPI to work.
    if (p_config->mode <= NRF_SPI_MODE_1)
    a09c:	7b0b      	ldrb	r3, [r1, #12]
    a09e:	7808      	ldrb	r0, [r1, #0]
    a0a0:	2b01      	cmp	r3, #1
    a0a2:	d878      	bhi.n	a196 <nrfx_spi_init+0x116>
    {
        nrf_gpio_pin_clear(p_config->sck_pin);
    a0a4:	f011 fdc5 	bl	1bc32 <nrf_gpio_pin_clear>
    }
    else
    {
        nrf_gpio_pin_set(p_config->sck_pin);
    }
    nrf_gpio_cfg(p_config->sck_pin,
    a0a8:	780b      	ldrb	r3, [r1, #0]
    a0aa:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    a0ac:	a801      	add	r0, sp, #4
    a0ae:	f7ff ffd9 	bl	a064 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    a0b2:	9b01      	ldr	r3, [sp, #4]
    a0b4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    a0b8:	2201      	movs	r2, #1
    a0ba:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
                 NRF_GPIO_PIN_INPUT_CONNECT,
                 NRF_GPIO_PIN_NOPULL,
                 NRF_GPIO_PIN_S0S1,
                 NRF_GPIO_PIN_NOSENSE);
    // - MOSI (optional) - output with initial value 0,
    if (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
    a0be:	784d      	ldrb	r5, [r1, #1]
    a0c0:	2dff      	cmp	r5, #255	; 0xff
    a0c2:	d06b      	beq.n	a19c <nrfx_spi_init+0x11c>
    {
        mosi_pin = p_config->mosi_pin;
        nrf_gpio_pin_clear(mosi_pin);
    a0c4:	4628      	mov	r0, r5
    a0c6:	f011 fdb4 	bl	1bc32 <nrf_gpio_pin_clear>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    a0ca:	a801      	add	r0, sp, #4
    a0cc:	9501      	str	r5, [sp, #4]
    a0ce:	f7ff ffc9 	bl	a064 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    a0d2:	9b01      	ldr	r3, [sp, #4]
    a0d4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    a0d8:	2203      	movs	r2, #3
    a0da:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    else
    {
        mosi_pin = NRF_SPI_PIN_NOT_CONNECTED;
    }
    // - MISO (optional) - input,
    if (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
    a0de:	788f      	ldrb	r7, [r1, #2]
    a0e0:	2fff      	cmp	r7, #255	; 0xff
    a0e2:	d05e      	beq.n	a1a2 <nrfx_spi_init+0x122>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    a0e4:	a801      	add	r0, sp, #4
    {
        miso_pin = p_config->miso_pin;
        nrf_gpio_cfg_input(miso_pin, p_config->miso_pull);
    a0e6:	f891 900e 	ldrb.w	r9, [r1, #14]
    nrf_gpio_cfg(
    a0ea:	9701      	str	r7, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    a0ec:	f7ff ffba 	bl	a064 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    a0f0:	9b01      	ldr	r3, [sp, #4]
    a0f2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    a0f6:	ea4f 0289 	mov.w	r2, r9, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    a0fa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    else
    {
        miso_pin = NRF_SPI_PIN_NOT_CONNECTED;
    }
    // - Slave Select (optional) - output with initial value 1 (inactive).
    if (p_config->ss_pin != NRFX_SPI_PIN_NOT_USED)
    a0fe:	78c8      	ldrb	r0, [r1, #3]
    a100:	28ff      	cmp	r0, #255	; 0xff
    a102:	d00c      	beq.n	a11e <nrfx_spi_init+0x9e>
    {
        nrf_gpio_pin_set(p_config->ss_pin);
    a104:	f011 fd88 	bl	1bc18 <nrf_gpio_pin_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    a108:	a801      	add	r0, sp, #4
        nrf_gpio_cfg_output(p_config->ss_pin);
    a10a:	78cb      	ldrb	r3, [r1, #3]
    a10c:	9301      	str	r3, [sp, #4]
    a10e:	f7ff ffa9 	bl	a064 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    a112:	9b01      	ldr	r3, [sp, #4]
    a114:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    a118:	2203      	movs	r2, #3
    a11a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    }
    m_cb[p_instance->drv_inst_idx].ss_pin = p_config->ss_pin;
    a11e:	f898 2004 	ldrb.w	r2, [r8, #4]
    a122:	78c8      	ldrb	r0, [r1, #3]
    a124:	2328      	movs	r3, #40	; 0x28
    a126:	fb03 4302 	mla	r3, r3, r2, r4
    a12a:	7798      	strb	r0, [r3, #30]

    NRF_SPI_Type * p_spi = p_instance->p_reg;
    a12c:	f8d8 0000 	ldr.w	r0, [r8]
    nrf_spi_pins_set(p_spi, p_config->sck_pin, mosi_pin, miso_pin);
    a130:	780b      	ldrb	r3, [r1, #0]
    p_reg->PSEL.SCK = sck_pin;
    a132:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    p_reg->FREQUENCY = (uint32_t)frequency;
    a136:	688b      	ldr	r3, [r1, #8]
    p_reg->PSEL.MOSI = mosi_pin;
    a138:	f8c0 550c 	str.w	r5, [r0, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
    a13c:	f8c0 7510 	str.w	r7, [r0, #1296]	; 0x510
    p_reg->FREQUENCY = (uint32_t)frequency;
    a140:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
    a144:	7b4b      	ldrb	r3, [r1, #13]
    nrf_spi_frequency_set(p_spi, p_config->frequency);
    nrf_spi_configure(p_spi, p_config->mode, p_config->bit_order);
    a146:	7b0d      	ldrb	r5, [r1, #12]
    a148:	3b00      	subs	r3, #0
    a14a:	bf18      	it	ne
    a14c:	2301      	movne	r3, #1
    switch (spi_mode)
    a14e:	2d02      	cmp	r5, #2
    a150:	d02a      	beq.n	a1a8 <nrfx_spi_init+0x128>
    a152:	2d03      	cmp	r5, #3
    a154:	d02b      	beq.n	a1ae <nrfx_spi_init+0x12e>
    a156:	2d01      	cmp	r5, #1
    a158:	d101      	bne.n	a15e <nrfx_spi_init+0xde>
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
    a15a:	f043 0302 	orr.w	r3, r3, #2
    p_reg->CONFIG = config;
    a15e:	f8c0 3554 	str.w	r3, [r0, #1364]	; 0x554

    m_cb[p_instance->drv_inst_idx].orc = p_config->orc;
    a162:	2328      	movs	r3, #40	; 0x28
    a164:	fb03 4202 	mla	r2, r3, r2, r4

    nrf_spi_enable(p_spi);

    if (p_cb->handler)
    a168:	4373      	muls	r3, r6
    m_cb[p_instance->drv_inst_idx].orc = p_config->orc;
    a16a:	7949      	ldrb	r1, [r1, #5]
    if (p_cb->handler)
    a16c:	58e3      	ldr	r3, [r4, r3]
    m_cb[p_instance->drv_inst_idx].orc = p_config->orc;
    a16e:	77d1      	strb	r1, [r2, #31]
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
    a170:	2201      	movs	r2, #1
    a172:	f8c0 2500 	str.w	r2, [r0, #1280]	; 0x500
    if (p_cb->handler)
    a176:	b11b      	cbz	r3, a180 <nrfx_spi_init+0x100>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
    a178:	f340 3007 	sbfx	r0, r0, #12, #8
    a17c:	f7fc fba2 	bl	68c4 <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
    a180:	2328      	movs	r3, #40	; 0x28
    a182:	fb03 4406 	mla	r4, r3, r6, r4
    a186:	2300      	movs	r3, #0
    a188:	7763      	strb	r3, [r4, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    a18a:	480c      	ldr	r0, [pc, #48]	; (a1bc <nrfx_spi_init+0x13c>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    a18c:	2301      	movs	r3, #1
    a18e:	7723      	strb	r3, [r4, #28]
}
    a190:	b003      	add	sp, #12
    a192:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        nrf_gpio_pin_set(p_config->sck_pin);
    a196:	f011 fd3f 	bl	1bc18 <nrf_gpio_pin_set>
    a19a:	e785      	b.n	a0a8 <nrfx_spi_init+0x28>
        mosi_pin = NRF_SPI_PIN_NOT_CONNECTED;
    a19c:	f04f 35ff 	mov.w	r5, #4294967295
    a1a0:	e79d      	b.n	a0de <nrfx_spi_init+0x5e>
        miso_pin = NRF_SPI_PIN_NOT_CONNECTED;
    a1a2:	f04f 37ff 	mov.w	r7, #4294967295
    a1a6:	e7aa      	b.n	a0fe <nrfx_spi_init+0x7e>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
    a1a8:	f043 0304 	orr.w	r3, r3, #4
        break;
    a1ac:	e7d7      	b.n	a15e <nrfx_spi_init+0xde>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
    a1ae:	f043 0306 	orr.w	r3, r3, #6
        break;
    a1b2:	e7d4      	b.n	a15e <nrfx_spi_init+0xde>
        return err_code;
    a1b4:	4802      	ldr	r0, [pc, #8]	; (a1c0 <nrfx_spi_init+0x140>)
    a1b6:	e7eb      	b.n	a190 <nrfx_spi_init+0x110>
    a1b8:	20000fa4 	.word	0x20000fa4
    a1bc:	0bad0000 	.word	0x0bad0000
    a1c0:	0bad0005 	.word	0x0bad0005

0000a1c4 <nrfx_spi_xfer>:
}

nrfx_err_t nrfx_spi_xfer(nrfx_spi_t const *           p_instance,
                         nrfx_spi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
    a1c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    a1c8:	7904      	ldrb	r4, [r0, #4]
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
    a1ca:	4d39      	ldr	r5, [pc, #228]	; (a2b0 <nrfx_spi_xfer+0xec>)
    a1cc:	2328      	movs	r3, #40	; 0x28
    a1ce:	4363      	muls	r3, r4
{
    a1d0:	4690      	mov	r8, r2
    if (p_cb->transfer_in_progress)
    a1d2:	18ea      	adds	r2, r5, r3
{
    a1d4:	460f      	mov	r7, r1
    if (p_cb->transfer_in_progress)
    a1d6:	7f51      	ldrb	r1, [r2, #29]
{
    a1d8:	4681      	mov	r9, r0
    if (p_cb->transfer_in_progress)
    a1da:	2900      	cmp	r1, #0
    a1dc:	d165      	bne.n	a2aa <nrfx_spi_xfer+0xe6>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler)
    a1de:	58eb      	ldr	r3, [r5, r3]
    a1e0:	b10b      	cbz	r3, a1e6 <nrfx_spi_xfer+0x22>
        {
            p_cb->transfer_in_progress = true;
    a1e2:	2301      	movs	r3, #1
    a1e4:	7753      	strb	r3, [r2, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
    a1e6:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
    a1ea:	2628      	movs	r6, #40	; 0x28
    a1ec:	fb06 5604 	mla	r6, r6, r4, r5
    a1f0:	f106 0c0c 	add.w	ip, r6, #12
    a1f4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    p_cb->abort = false;

    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    a1f8:	7fb0      	ldrb	r0, [r6, #30]
    p_cb->abort = false;
    a1fa:	2300      	movs	r3, #0
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    a1fc:	28ff      	cmp	r0, #255	; 0xff
    p_cb->abort = false;
    a1fe:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    a202:	d001      	beq.n	a208 <nrfx_spi_xfer+0x44>
    {
        nrf_gpio_pin_clear(p_cb->ss_pin);
    a204:	f011 fd15 	bl	1bc32 <nrf_gpio_pin_clear>
    }
    if (flags)
    a208:	2328      	movs	r3, #40	; 0x28
    a20a:	f1b8 0f00 	cmp.w	r8, #0
    a20e:	d006      	beq.n	a21e <nrfx_spi_xfer+0x5a>
    {
        p_cb->transfer_in_progress = false;
    a210:	fb03 5404 	mla	r4, r3, r4, r5
        err_code = NRFX_ERROR_NOT_SUPPORTED;
    a214:	4827      	ldr	r0, [pc, #156]	; (a2b4 <nrfx_spi_xfer+0xf0>)
        p_cb->transfer_in_progress = false;
    a216:	2300      	movs	r3, #0
    a218:	7763      	strb	r3, [r4, #29]
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    a21a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        spi_xfer(p_instance->p_reg, p_cb, p_xfer_desc);
    a21e:	f8d9 6000 	ldr.w	r6, [r9]
    p_cb->bytes_transferred = 0;
    a222:	fb03 5304 	mla	r3, r3, r4, r5
    p_reg->INTENCLR = mask;
    a226:	2204      	movs	r2, #4
    a228:	f8c6 2308 	str.w	r2, [r6, #776]	; 0x308
    a22c:	f8c3 8020 	str.w	r8, [r3, #32]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a230:	f8c6 8108 	str.w	r8, [r6, #264]	; 0x108
    a234:	f8d6 2108 	ldr.w	r2, [r6, #264]	; 0x108
        (p_xfer_desc->tx_length > 0 ? p_xfer_desc->p_tx_buffer[0] : p_cb->orc));
    a238:	687a      	ldr	r2, [r7, #4]
    nrf_spi_txd_set(p_spi,
    a23a:	b192      	cbz	r2, a262 <nrfx_spi_xfer+0x9e>
    a23c:	683b      	ldr	r3, [r7, #0]
    a23e:	781b      	ldrb	r3, [r3, #0]
    p_reg->TXD = data;
    a240:	f8c6 351c 	str.w	r3, [r6, #1308]	; 0x51c
    if (p_xfer_desc->tx_length > 1)
    a244:	2a01      	cmp	r2, #1
    a246:	d90e      	bls.n	a266 <nrfx_spi_xfer+0xa2>
        nrf_spi_txd_set(p_spi, p_xfer_desc->p_tx_buffer[1]);
    a248:	683b      	ldr	r3, [r7, #0]
    a24a:	785b      	ldrb	r3, [r3, #1]
    a24c:	f8c6 351c 	str.w	r3, [r6, #1308]	; 0x51c
    if (p_cb->handler)
    a250:	2328      	movs	r3, #40	; 0x28
    a252:	4363      	muls	r3, r4
    a254:	58ef      	ldr	r7, [r5, r3]
    a256:	b177      	cbz	r7, a276 <nrfx_spi_xfer+0xb2>
    p_reg->INTENSET = mask;
    a258:	2304      	movs	r3, #4
    a25a:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
    nrfx_err_t err_code = NRFX_SUCCESS;
    a25e:	4816      	ldr	r0, [pc, #88]	; (a2b8 <nrfx_spi_xfer+0xf4>)
    a260:	e7db      	b.n	a21a <nrfx_spi_xfer+0x56>
    nrf_spi_txd_set(p_spi,
    a262:	7fdb      	ldrb	r3, [r3, #31]
    a264:	e7ec      	b.n	a240 <nrfx_spi_xfer+0x7c>
    else if (p_xfer_desc->rx_length > 1)
    a266:	68fb      	ldr	r3, [r7, #12]
    a268:	2b01      	cmp	r3, #1
    a26a:	d9f1      	bls.n	a250 <nrfx_spi_xfer+0x8c>
        nrf_spi_txd_set(p_spi, p_cb->orc);
    a26c:	2328      	movs	r3, #40	; 0x28
    a26e:	fb03 5304 	mla	r3, r3, r4, r5
    p_reg->TXD = data;
    a272:	7fdb      	ldrb	r3, [r3, #31]
    a274:	e7ea      	b.n	a24c <nrfx_spi_xfer+0x88>
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    a276:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    a27a:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a27e:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
            while (!nrf_spi_event_check(p_spi, NRF_SPI_EVENT_READY)) {}
    a282:	2b00      	cmp	r3, #0
    a284:	d0fb      	beq.n	a27e <nrfx_spi_xfer+0xba>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a286:	f8c6 7108 	str.w	r7, [r6, #264]	; 0x108
        } while (transfer_byte(p_spi, p_cb));
    a28a:	4630      	mov	r0, r6
    a28c:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
    a290:	f011 fcdc 	bl	1bc4c <transfer_byte>
    a294:	2800      	cmp	r0, #0
    a296:	d1f2      	bne.n	a27e <nrfx_spi_xfer+0xba>
        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    a298:	2328      	movs	r3, #40	; 0x28
    a29a:	fb03 5404 	mla	r4, r3, r4, r5
    a29e:	7fa0      	ldrb	r0, [r4, #30]
    a2a0:	28ff      	cmp	r0, #255	; 0xff
    a2a2:	d0dc      	beq.n	a25e <nrfx_spi_xfer+0x9a>
            nrf_gpio_pin_set(p_cb->ss_pin);
    a2a4:	f011 fcb8 	bl	1bc18 <nrf_gpio_pin_set>
    a2a8:	e7d9      	b.n	a25e <nrfx_spi_xfer+0x9a>
        return err_code;
    a2aa:	4804      	ldr	r0, [pc, #16]	; (a2bc <nrfx_spi_xfer+0xf8>)
    a2ac:	e7b5      	b.n	a21a <nrfx_spi_xfer+0x56>
    a2ae:	bf00      	nop
    a2b0:	20000fa4 	.word	0x20000fa4
    a2b4:	0bad0003 	.word	0x0bad0003
    a2b8:	0bad0000 	.word	0x0bad0000
    a2bc:	0bad000b 	.word	0x0bad000b

0000a2c0 <nrfx_spi_1_irq_handler>:
    a2c0:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    a2c4:	2300      	movs	r3, #0
}
#endif

#if NRFX_CHECK(NRFX_SPI1_ENABLED)
void nrfx_spi_1_irq_handler(void)
{
    a2c6:	b510      	push	{r4, lr}
    if (!transfer_byte(p_spi, p_cb))
    a2c8:	490b      	ldr	r1, [pc, #44]	; (a2f8 <nrfx_spi_1_irq_handler+0x38>)
    a2ca:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    a2ce:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    a2d2:	f011 fcbb 	bl	1bc4c <transfer_byte>
    a2d6:	b968      	cbnz	r0, a2f4 <nrfx_spi_1_irq_handler+0x34>
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    a2d8:	7f88      	ldrb	r0, [r1, #30]
    a2da:	28ff      	cmp	r0, #255	; 0xff
    a2dc:	d001      	beq.n	a2e2 <nrfx_spi_1_irq_handler+0x22>
        nrf_gpio_pin_set(p_cb->ss_pin);
    a2de:	f011 fc9b 	bl	1bc18 <nrf_gpio_pin_set>
    p_cb->transfer_in_progress = false;
    a2e2:	2300      	movs	r3, #0
    p_cb->evt.type = NRFX_SPI_EVENT_DONE;
    a2e4:	720b      	strb	r3, [r1, #8]
    p_cb->transfer_in_progress = false;
    a2e6:	774b      	strb	r3, [r1, #29]
    irq_handler(NRF_SPI1, &m_cb[NRFX_SPI1_INST_IDX]);
}
    a2e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    a2ec:	e9d1 3100 	ldrd	r3, r1, [r1]
    a2f0:	4802      	ldr	r0, [pc, #8]	; (a2fc <nrfx_spi_1_irq_handler+0x3c>)
    a2f2:	4718      	bx	r3
}
    a2f4:	bd10      	pop	{r4, pc}
    a2f6:	bf00      	nop
    a2f8:	20000fa4 	.word	0x20000fa4
    a2fc:	20000fac 	.word	0x20000fac

0000a300 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    a300:	4b0e      	ldr	r3, [pc, #56]	; (a33c <z_sys_init_run_level+0x3c>)
{
    a302:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    a304:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    a308:	3001      	adds	r0, #1
    a30a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    a30e:	42a6      	cmp	r6, r4
    a310:	d800      	bhi.n	a314 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    a312:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    a314:	e9d4 3500 	ldrd	r3, r5, [r4]
    a318:	4628      	mov	r0, r5
    a31a:	4798      	blx	r3
		if (dev != NULL) {
    a31c:	b165      	cbz	r5, a338 <z_sys_init_run_level+0x38>
			if (rc != 0) {
    a31e:	68eb      	ldr	r3, [r5, #12]
    a320:	b130      	cbz	r0, a330 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    a322:	2800      	cmp	r0, #0
    a324:	bfb8      	it	lt
    a326:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    a328:	28ff      	cmp	r0, #255	; 0xff
    a32a:	bfa8      	it	ge
    a32c:	20ff      	movge	r0, #255	; 0xff
    a32e:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    a330:	785a      	ldrb	r2, [r3, #1]
    a332:	f042 0201 	orr.w	r2, r2, #1
    a336:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    a338:	3408      	adds	r4, #8
    a33a:	e7e8      	b.n	a30e <z_sys_init_run_level+0xe>
    a33c:	0001d068 	.word	0x0001d068

0000a340 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    a340:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    a342:	4605      	mov	r5, r0
    a344:	b910      	cbnz	r0, a34c <z_impl_device_get_binding+0xc>
		return NULL;
    a346:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    a348:	4620      	mov	r0, r4
    a34a:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    a34c:	7803      	ldrb	r3, [r0, #0]
    a34e:	2b00      	cmp	r3, #0
    a350:	d0f9      	beq.n	a346 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    a352:	4a0f      	ldr	r2, [pc, #60]	; (a390 <z_impl_device_get_binding+0x50>)
    a354:	4c0f      	ldr	r4, [pc, #60]	; (a394 <z_impl_device_get_binding+0x54>)
    a356:	4616      	mov	r6, r2
    a358:	4294      	cmp	r4, r2
    a35a:	d108      	bne.n	a36e <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
    a35c:	4c0d      	ldr	r4, [pc, #52]	; (a394 <z_impl_device_get_binding+0x54>)
    a35e:	42b4      	cmp	r4, r6
    a360:	d0f1      	beq.n	a346 <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    a362:	4620      	mov	r0, r4
    a364:	f011 fca6 	bl	1bcb4 <z_device_ready>
    a368:	b950      	cbnz	r0, a380 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
    a36a:	3418      	adds	r4, #24
    a36c:	e7f7      	b.n	a35e <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
    a36e:	4620      	mov	r0, r4
    a370:	f011 fca0 	bl	1bcb4 <z_device_ready>
    a374:	b110      	cbz	r0, a37c <z_impl_device_get_binding+0x3c>
    a376:	6823      	ldr	r3, [r4, #0]
    a378:	42ab      	cmp	r3, r5
    a37a:	d0e5      	beq.n	a348 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    a37c:	3418      	adds	r4, #24
    a37e:	e7eb      	b.n	a358 <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    a380:	6821      	ldr	r1, [r4, #0]
    a382:	4628      	mov	r0, r5
    a384:	f7f6 fd12 	bl	dac <strcmp>
    a388:	2800      	cmp	r0, #0
    a38a:	d1ee      	bne.n	a36a <z_impl_device_get_binding+0x2a>
    a38c:	e7dc      	b.n	a348 <z_impl_device_get_binding+0x8>
    a38e:	bf00      	nop
    a390:	0001c720 	.word	0x0001c720
    a394:	0001c678 	.word	0x0001c678

0000a398 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
    a398:	4b01      	ldr	r3, [pc, #4]	; (a3a0 <z_impl_z_errno+0x8>)
    a39a:	6898      	ldr	r0, [r3, #8]
}
    a39c:	3060      	adds	r0, #96	; 0x60
    a39e:	4770      	bx	lr
    a3a0:	20000fcc 	.word	0x20000fcc

0000a3a4 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    a3a4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    a3a8:	4606      	mov	r6, r0
    a3aa:	460f      	mov	r7, r1
	__asm__ volatile(
    a3ac:	f04f 0320 	mov.w	r3, #32
    a3b0:	f3ef 8811 	mrs	r8, BASEPRI
    a3b4:	f383 8811 	msr	BASEPRI, r3
    a3b8:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
    a3bc:	f000 ff60 	bl	b280 <z_impl_k_current_get>
    a3c0:	4c1f      	ldr	r4, [pc, #124]	; (a440 <z_fatal_error+0x9c>)
    a3c2:	4b20      	ldr	r3, [pc, #128]	; (a444 <z_fatal_error+0xa0>)
    a3c4:	1ae4      	subs	r4, r4, r3
    a3c6:	2e04      	cmp	r6, #4
    a3c8:	ea4f 04d4 	mov.w	r4, r4, lsr #3
    a3cc:	bf96      	itet	ls
    a3ce:	4a1e      	ldrls	r2, [pc, #120]	; (a448 <z_fatal_error+0xa4>)
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    a3d0:	4a1e      	ldrhi	r2, [pc, #120]	; (a44c <z_fatal_error+0xa8>)
    a3d2:	f852 2026 	ldrls.w	r2, [r2, r6, lsl #2]
    a3d6:	01a4      	lsls	r4, r4, #6
    a3d8:	f044 0301 	orr.w	r3, r4, #1
    a3dc:	4605      	mov	r5, r0
    a3de:	f8ad 3000 	strh.w	r3, [sp]
    a3e2:	481b      	ldr	r0, [pc, #108]	; (a450 <z_fatal_error+0xac>)
    a3e4:	2300      	movs	r3, #0
    a3e6:	4631      	mov	r1, r6
    a3e8:	f010 fbef 	bl	1abca <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    a3ec:	b147      	cbz	r7, a400 <z_fatal_error+0x5c>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    a3ee:	69fb      	ldr	r3, [r7, #28]
    a3f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
    a3f4:	b123      	cbz	r3, a400 <z_fatal_error+0x5c>
		LOG_ERR("Fault during interrupt handling\n");
    a3f6:	4817      	ldr	r0, [pc, #92]	; (a454 <z_fatal_error+0xb0>)
    a3f8:	f044 0101 	orr.w	r1, r4, #1
    a3fc:	f010 fbab 	bl	1ab56 <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    a400:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    a404:	b12d      	cbz	r5, a412 <z_fatal_error+0x6e>
    a406:	4628      	mov	r0, r5
    a408:	f011 fcab 	bl	1bd62 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    a40c:	b108      	cbz	r0, a412 <z_fatal_error+0x6e>
    a40e:	7803      	ldrb	r3, [r0, #0]
    a410:	b903      	cbnz	r3, a414 <z_fatal_error+0x70>
		thread_name = "unknown";
    a412:	4811      	ldr	r0, [pc, #68]	; (a458 <z_fatal_error+0xb4>)
{
	if (IS_ENABLED(CONFIG_LOG_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
    a414:	f7fb f92e 	bl	5674 <z_log_strdup>
	LOG_ERR("Current thread: %p (%s)", thread,
    a418:	4623      	mov	r3, r4
    a41a:	4602      	mov	r2, r0
    a41c:	4629      	mov	r1, r5
    a41e:	480f      	ldr	r0, [pc, #60]	; (a45c <z_fatal_error+0xb8>)
    a420:	f010 fbba 	bl	1ab98 <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    a424:	4639      	mov	r1, r7
    a426:	4630      	mov	r0, r6
    a428:	f7ff fb94 	bl	9b54 <k_sys_fatal_error_handler>
	__asm__ volatile(
    a42c:	f388 8811 	msr	BASEPRI, r8
    a430:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    a434:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    a436:	b002      	add	sp, #8
    a438:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    a43c:	f7fc be12 	b.w	7064 <z_impl_k_thread_abort>
    a440:	0001c8c0 	.word	0x0001c8c0
    a444:	0001c8a0 	.word	0x0001c8a0
    a448:	0001d080 	.word	0x0001d080
    a44c:	0001e09c 	.word	0x0001e09c
    a450:	0001e0b2 	.word	0x0001e0b2
    a454:	0001e0da 	.word	0x0001e0da
    a458:	0001e0aa 	.word	0x0001e0aa
    a45c:	0001e0fb 	.word	0x0001e0fb

0000a460 <z_bss_zero>:
 * @return N/A
 */
__boot_func
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    a460:	4802      	ldr	r0, [pc, #8]	; (a46c <z_bss_zero+0xc>)
__ssp_bos_icheck3(memset, void *, int)
    a462:	4a03      	ldr	r2, [pc, #12]	; (a470 <z_bss_zero+0x10>)
    a464:	2100      	movs	r1, #0
    a466:	1a12      	subs	r2, r2, r0
    a468:	f011 be75 	b.w	1c156 <memset>
    a46c:	20000268 	.word	0x20000268
    a470:	20001830 	.word	0x20001830

0000a474 <bg_thread_main>:
 *
 * @return N/A
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    a474:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    a476:	4b0a      	ldr	r3, [pc, #40]	; (a4a0 <bg_thread_main+0x2c>)
    a478:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    a47a:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    a47c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    a47e:	f7ff ff3f 	bl	a300 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    a482:	f001 f977 	bl	b774 <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    a486:	2003      	movs	r0, #3
    a488:	f7ff ff3a 	bl	a300 <z_sys_init_run_level>

	z_init_static_threads();
    a48c:	f000 f946 	bl	a71c <z_init_static_threads>
	z_sys_init_run_level(_SYS_INIT_LEVEL_SMP);
#endif

	extern void main(void);

	main();
    a490:	f7f6 ff06 	bl	12a0 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    a494:	4a03      	ldr	r2, [pc, #12]	; (a4a4 <bg_thread_main+0x30>)
    a496:	7b13      	ldrb	r3, [r2, #12]
    a498:	f023 0301 	bic.w	r3, r3, #1
    a49c:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    a49e:	bd08      	pop	{r3, pc}
    a4a0:	2000166d 	.word	0x2000166d
    a4a4:	200003f0 	.word	0x200003f0

0000a4a8 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    a4a8:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
    a4ac:	b0a7      	sub	sp, #156	; 0x9c
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
    a4ae:	f7fb f819 	bl	54e4 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    a4b2:	f8df 9100 	ldr.w	r9, [pc, #256]	; a5b4 <z_cstart+0x10c>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    a4b6:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    a4ba:	4d36      	ldr	r5, [pc, #216]	; (a594 <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
    a4bc:	4e36      	ldr	r6, [pc, #216]	; (a598 <z_cstart+0xf0>)
    a4be:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    a4c0:	f8df a0f4 	ldr.w	sl, [pc, #244]	; a5b8 <z_cstart+0x110>
	z_setup_new_thread(thread, stack,
    a4c4:	4f35      	ldr	r7, [pc, #212]	; (a59c <z_cstart+0xf4>)
    a4c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a4ca:	2400      	movs	r4, #0
    a4cc:	616b      	str	r3, [r5, #20]
    a4ce:	23e0      	movs	r3, #224	; 0xe0
    a4d0:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    a4d4:	77ec      	strb	r4, [r5, #31]
    a4d6:	762c      	strb	r4, [r5, #24]
    a4d8:	766c      	strb	r4, [r5, #25]
    a4da:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    a4dc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    a4de:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    a4e2:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    a4e4:	f7fc fd5a 	bl	6f9c <z_arm_fault_init>
	z_arm_cpu_idle_init();
    a4e8:	f7fc fa6e 	bl	69c8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    a4ec:	f04f 33ff 	mov.w	r3, #4294967295
    a4f0:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    a4f2:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    a4f4:	f7fc fe72 	bl	71dc <z_arm_mpu_init>
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    a4f8:	4d29      	ldr	r5, [pc, #164]	; (a5a0 <z_cstart+0xf8>)
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    a4fa:	f7fc fdc5 	bl	7088 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    a4fe:	f240 1301 	movw	r3, #257	; 0x101
    a502:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    a506:	ab06      	add	r3, sp, #24
    a508:	60ab      	str	r3, [r5, #8]
	dummy_thread->stack_info.size = 0U;
    a50a:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    a50e:	f011 fbd0 	bl	1bcb2 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    a512:	4620      	mov	r0, r4
    a514:	f7ff fef4 	bl	a300 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    a518:	2001      	movs	r0, #1
    a51a:	f7ff fef1 	bl	a300 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    a51e:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
    a522:	f000 fdf9 	bl	b118 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    a526:	4b1f      	ldr	r3, [pc, #124]	; (a5a4 <z_cstart+0xfc>)
	_kernel.ready_q.cache = &z_main_thread;
    a528:	626e      	str	r6, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    a52a:	491f      	ldr	r1, [pc, #124]	; (a5a8 <z_cstart+0x100>)
    a52c:	9305      	str	r3, [sp, #20]
    a52e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    a532:	4653      	mov	r3, sl
    a534:	e9cd 4b03 	strd	r4, fp, [sp, #12]
    a538:	e9cd 4401 	strd	r4, r4, [sp, #4]
    a53c:	9400      	str	r4, [sp, #0]
    a53e:	4630      	mov	r0, r6
    a540:	f000 f88e 	bl	a660 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    a544:	7b73      	ldrb	r3, [r6, #13]
    a546:	4680      	mov	r8, r0
    a548:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
    a54c:	4630      	mov	r0, r6
    a54e:	7373      	strb	r3, [r6, #13]
    a550:	f011 fcc1 	bl	1bed6 <z_ready_thread>
	z_setup_new_thread(thread, stack,
    a554:	230f      	movs	r3, #15
    a556:	e9cd 4302 	strd	r4, r3, [sp, #8]
    a55a:	4914      	ldr	r1, [pc, #80]	; (a5ac <z_cstart+0x104>)
    a55c:	4b14      	ldr	r3, [pc, #80]	; (a5b0 <z_cstart+0x108>)
    a55e:	f44f 72a0 	mov.w	r2, #320	; 0x140
    a562:	e9cd b404 	strd	fp, r4, [sp, #16]
    a566:	e9cd 5400 	strd	r5, r4, [sp]
    a56a:	4638      	mov	r0, r7
    a56c:	f000 f878 	bl	a660 <z_setup_new_thread>
    a570:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    a572:	60ef      	str	r7, [r5, #12]
    a574:	f023 0304 	bic.w	r3, r3, #4
    a578:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    a57a:	f105 0318 	add.w	r3, r5, #24
	list->tail = (sys_dnode_t *)list;
    a57e:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].id = i;
    a582:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
    a584:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    a588:	4652      	mov	r2, sl
    a58a:	4641      	mov	r1, r8
    a58c:	4630      	mov	r0, r6
    a58e:	f7fc fa05 	bl	699c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    a592:	bf00      	nop
    a594:	e000ed00 	.word	0xe000ed00
    a598:	200003f0 	.word	0x200003f0
    a59c:	20000370 	.word	0x20000370
    a5a0:	20000fcc 	.word	0x20000fcc
    a5a4:	0001e15d 	.word	0x0001e15d
    a5a8:	20001b60 	.word	0x20001b60
    a5ac:	20002b80 	.word	0x20002b80
    a5b0:	0000a7d9 	.word	0x0000a7d9
    a5b4:	20003500 	.word	0x20003500
    a5b8:	0000a475 	.word	0x0000a475

0000a5bc <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    a5bc:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    a5be:	4b0e      	ldr	r3, [pc, #56]	; (a5f8 <init_mem_slab_module+0x3c>)
    a5c0:	4c0e      	ldr	r4, [pc, #56]	; (a5fc <init_mem_slab_module+0x40>)
    a5c2:	42a3      	cmp	r3, r4
    a5c4:	d301      	bcc.n	a5ca <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
    a5c6:	2000      	movs	r0, #0
	return rc;
}
    a5c8:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    a5ca:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
    a5ce:	ea41 0200 	orr.w	r2, r1, r0
    a5d2:	f012 0203 	ands.w	r2, r2, #3
    a5d6:	d10b      	bne.n	a5f0 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
    a5d8:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    a5da:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    a5dc:	42aa      	cmp	r2, r5
    a5de:	d101      	bne.n	a5e4 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    a5e0:	331c      	adds	r3, #28
    a5e2:	e7ee      	b.n	a5c2 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
    a5e4:	695e      	ldr	r6, [r3, #20]
    a5e6:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    a5e8:	3201      	adds	r2, #1
		slab->free_list = p;
    a5ea:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
    a5ec:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
    a5ee:	e7f5      	b.n	a5dc <init_mem_slab_module+0x20>
		return -EINVAL;
    a5f0:	f06f 0015 	mvn.w	r0, #21
	return rc;
    a5f4:	e7e8      	b.n	a5c8 <init_mem_slab_module+0xc>
    a5f6:	bf00      	nop
    a5f8:	20000208 	.word	0x20000208
    a5fc:	20000208 	.word	0x20000208

0000a600 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    a600:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
    a602:	460c      	mov	r4, r1
    a604:	4616      	mov	r6, r2
    a606:	461f      	mov	r7, r3
	__asm__ volatile(
    a608:	f04f 0320 	mov.w	r3, #32
    a60c:	f3ef 8111 	mrs	r1, BASEPRI
    a610:	f383 8811 	msr	BASEPRI, r3
    a614:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    a618:	6943      	ldr	r3, [r0, #20]
    a61a:	b15b      	cbz	r3, a634 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
    a61c:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    a61e:	681b      	ldr	r3, [r3, #0]
    a620:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    a622:	6983      	ldr	r3, [r0, #24]
    a624:	3301      	adds	r3, #1
    a626:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    a628:	2000      	movs	r0, #0
	__asm__ volatile(
    a62a:	f381 8811 	msr	BASEPRI, r1
    a62e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    a632:	e011      	b.n	a658 <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    a634:	ea56 0207 	orrs.w	r2, r6, r7
    a638:	d103      	bne.n	a642 <k_mem_slab_alloc+0x42>
		*mem = NULL;
    a63a:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
    a63c:	f06f 000b 	mvn.w	r0, #11
    a640:	e7f3      	b.n	a62a <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    a642:	4602      	mov	r2, r0
    a644:	e9cd 6700 	strd	r6, r7, [sp]
    a648:	3008      	adds	r0, #8
    a64a:	f000 fbe1 	bl	ae10 <z_pend_curr>
		if (result == 0) {
    a64e:	b918      	cbnz	r0, a658 <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
    a650:	4b02      	ldr	r3, [pc, #8]	; (a65c <k_mem_slab_alloc+0x5c>)
    a652:	689b      	ldr	r3, [r3, #8]
    a654:	695b      	ldr	r3, [r3, #20]
    a656:	6023      	str	r3, [r4, #0]
}
    a658:	b002      	add	sp, #8
    a65a:	bdd0      	pop	{r4, r6, r7, pc}
    a65c:	20000fcc 	.word	0x20000fcc

0000a660 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    a660:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    a664:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    a666:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    a668:	2604      	movs	r6, #4
    a66a:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    a66c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    a66e:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    a670:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
    a674:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    a676:	1dd6      	adds	r6, r2, #7
    a678:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    a67c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    a67e:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    a680:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    a684:	3720      	adds	r7, #32
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    a686:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    a68a:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    a68e:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    a690:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    a692:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    a694:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    a698:	9202      	str	r2, [sp, #8]
    a69a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a69c:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    a69e:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    a6a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a6a2:	9200      	str	r2, [sp, #0]
    a6a4:	4642      	mov	r2, r8
{
    a6a6:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    a6a8:	f7fc f942 	bl	6930 <arch_new_thread>
	if (!_current) {
    a6ac:	4b04      	ldr	r3, [pc, #16]	; (a6c0 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
    a6ae:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    a6b0:	689b      	ldr	r3, [r3, #8]
    a6b2:	b103      	cbz	r3, a6b6 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    a6b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    a6b6:	6723      	str	r3, [r4, #112]	; 0x70
}
    a6b8:	4640      	mov	r0, r8
    a6ba:	b004      	add	sp, #16
    a6bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a6c0:	20000fcc 	.word	0x20000fcc

0000a6c4 <z_impl_k_thread_create>:
{
    a6c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    a6c6:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    a6c8:	2500      	movs	r5, #0
    a6ca:	9505      	str	r5, [sp, #20]
    a6cc:	9d10      	ldr	r5, [sp, #64]	; 0x40
    a6ce:	9504      	str	r5, [sp, #16]
    a6d0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    a6d2:	9503      	str	r5, [sp, #12]
    a6d4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    a6d6:	9502      	str	r5, [sp, #8]
{
    a6d8:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    a6dc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    a6de:	9501      	str	r5, [sp, #4]
    a6e0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    a6e2:	9500      	str	r5, [sp, #0]
{
    a6e4:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    a6e6:	f7ff ffbb 	bl	a660 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    a6ea:	1c7b      	adds	r3, r7, #1
    a6ec:	bf08      	it	eq
    a6ee:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    a6f2:	d005      	beq.n	a700 <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    a6f4:	ea56 0307 	orrs.w	r3, r6, r7
    a6f8:	d105      	bne.n	a706 <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
    a6fa:	4620      	mov	r0, r4
    a6fc:	f000 fca2 	bl	b044 <z_sched_start>
}
    a700:	4620      	mov	r0, r4
    a702:	b007      	add	sp, #28
    a704:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    a706:	4904      	ldr	r1, [pc, #16]	; (a718 <z_impl_k_thread_create+0x54>)
    a708:	4632      	mov	r2, r6
    a70a:	463b      	mov	r3, r7
    a70c:	f104 0018 	add.w	r0, r4, #24
    a710:	f000 fe9a 	bl	b448 <z_add_timeout>
    a714:	e7f4      	b.n	a700 <z_impl_k_thread_create+0x3c>
    a716:	bf00      	nop
    a718:	0001bef7 	.word	0x0001bef7

0000a71c <z_init_static_threads>:
{
    a71c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    a720:	4e2a      	ldr	r6, [pc, #168]	; (a7cc <z_init_static_threads+0xb0>)
    a722:	4d2b      	ldr	r5, [pc, #172]	; (a7d0 <z_init_static_threads+0xb4>)
{
    a724:	b086      	sub	sp, #24
    a726:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
    a728:	42b5      	cmp	r5, r6
    a72a:	f105 0430 	add.w	r4, r5, #48	; 0x30
    a72e:	d310      	bcc.n	a752 <z_init_static_threads+0x36>
	k_sched_lock();
    a730:	f000 fafc 	bl	ad2c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    a734:	4c26      	ldr	r4, [pc, #152]	; (a7d0 <z_init_static_threads+0xb4>)
    a736:	f8df a09c 	ldr.w	sl, [pc, #156]	; a7d4 <z_init_static_threads+0xb8>
    a73a:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    a73e:	f240 36e7 	movw	r6, #999	; 0x3e7
    a742:	2700      	movs	r7, #0
    a744:	4544      	cmp	r4, r8
    a746:	d321      	bcc.n	a78c <z_init_static_threads+0x70>
}
    a748:	b006      	add	sp, #24
    a74a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
    a74e:	f000 bba5 	b.w	ae9c <k_sched_unlock>
		z_setup_new_thread(
    a752:	f854 3c04 	ldr.w	r3, [r4, #-4]
    a756:	9305      	str	r3, [sp, #20]
    a758:	f854 3c10 	ldr.w	r3, [r4, #-16]
    a75c:	9304      	str	r3, [sp, #16]
    a75e:	f854 3c14 	ldr.w	r3, [r4, #-20]
    a762:	9303      	str	r3, [sp, #12]
    a764:	f854 3c18 	ldr.w	r3, [r4, #-24]
    a768:	9302      	str	r3, [sp, #8]
    a76a:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    a76e:	9301      	str	r3, [sp, #4]
    a770:	f854 3c20 	ldr.w	r3, [r4, #-32]
    a774:	9300      	str	r3, [sp, #0]
    a776:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    a77a:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    a77e:	f7ff ff6f 	bl	a660 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    a782:	f854 3c30 	ldr.w	r3, [r4, #-48]
    a786:	655d      	str	r5, [r3, #84]	; 0x54
    a788:	4625      	mov	r5, r4
    a78a:	e7cd      	b.n	a728 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    a78c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    a78e:	1c5a      	adds	r2, r3, #1
    a790:	d00d      	beq.n	a7ae <z_init_static_threads+0x92>
					    K_MSEC(thread_data->init_delay));
    a792:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    a796:	4630      	mov	r0, r6
    a798:	4639      	mov	r1, r7
    a79a:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    a79e:	42b9      	cmp	r1, r7
    a7a0:	bf08      	it	eq
    a7a2:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
    a7a4:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    a7a6:	d104      	bne.n	a7b2 <z_init_static_threads+0x96>
	z_sched_start(thread);
    a7a8:	4628      	mov	r0, r5
    a7aa:	f000 fc4b 	bl	b044 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    a7ae:	3430      	adds	r4, #48	; 0x30
    a7b0:	e7c8      	b.n	a744 <z_init_static_threads+0x28>
    a7b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a7b6:	2300      	movs	r3, #0
    a7b8:	f7f6 f97e 	bl	ab8 <__aeabi_uldivmod>
    a7bc:	4602      	mov	r2, r0
    a7be:	460b      	mov	r3, r1
    a7c0:	f105 0018 	add.w	r0, r5, #24
    a7c4:	4651      	mov	r1, sl
    a7c6:	f000 fe3f 	bl	b448 <z_add_timeout>
    a7ca:	e7f0      	b.n	a7ae <z_init_static_threads+0x92>
    a7cc:	200001ca 	.word	0x200001ca
    a7d0:	200001ca 	.word	0x200001ca
    a7d4:	0001bef7 	.word	0x0001bef7

0000a7d8 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    a7d8:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
    a7da:	4c09      	ldr	r4, [pc, #36]	; (a800 <idle+0x28>)
	__asm__ volatile(
    a7dc:	f04f 0220 	mov.w	r2, #32
    a7e0:	f3ef 8311 	mrs	r3, BASEPRI
    a7e4:	f382 8811 	msr	BASEPRI, r2
    a7e8:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
    a7ec:	f011 fc05 	bl	1bffa <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
    a7f0:	6220      	str	r0, [r4, #32]
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
    a7f2:	f7fb fc39 	bl	6068 <pm_system_suspend>
    a7f6:	2800      	cmp	r0, #0
    a7f8:	d1f0      	bne.n	a7dc <idle+0x4>
	arch_cpu_idle();
    a7fa:	f7fc f8eb 	bl	69d4 <arch_cpu_idle>
}
    a7fe:	e7ed      	b.n	a7dc <idle+0x4>
    a800:	20000fcc 	.word	0x20000fcc

0000a804 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    a804:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    a808:	4604      	mov	r4, r0
    a80a:	4616      	mov	r6, r2
    a80c:	461f      	mov	r7, r3
    a80e:	f04f 0320 	mov.w	r3, #32
    a812:	f3ef 8811 	mrs	r8, BASEPRI
    a816:	f383 8811 	msr	BASEPRI, r3
    a81a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    a81e:	68c3      	ldr	r3, [r0, #12]
    a820:	4a35      	ldr	r2, [pc, #212]	; (a8f8 <z_impl_k_mutex_lock+0xf4>)
    a822:	b16b      	cbz	r3, a840 <z_impl_k_mutex_lock+0x3c>
    a824:	6880      	ldr	r0, [r0, #8]
    a826:	6891      	ldr	r1, [r2, #8]
    a828:	4288      	cmp	r0, r1
    a82a:	d019      	beq.n	a860 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    a82c:	ea56 0307 	orrs.w	r3, r6, r7
    a830:	d118      	bne.n	a864 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    a832:	f388 8811 	msr	BASEPRI, r8
    a836:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    a83a:	f06f 000f 	mvn.w	r0, #15
    a83e:	e00c      	b.n	a85a <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
    a840:	6891      	ldr	r1, [r2, #8]
    a842:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    a846:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    a848:	3301      	adds	r3, #1
    a84a:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    a84c:	6893      	ldr	r3, [r2, #8]
    a84e:	60a3      	str	r3, [r4, #8]
    a850:	f388 8811 	msr	BASEPRI, r8
    a854:	f3bf 8f6f 	isb	sy
		return 0;
    a858:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    a85a:	b002      	add	sp, #8
    a85c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    a860:	6921      	ldr	r1, [r4, #16]
    a862:	e7f0      	b.n	a846 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    a864:	f991 100e 	ldrsb.w	r1, [r1, #14]
    a868:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    a86c:	4299      	cmp	r1, r3
    a86e:	bfa8      	it	ge
    a870:	4619      	movge	r1, r3
    a872:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    a876:	4291      	cmp	r1, r2
    a878:	bfb8      	it	lt
    a87a:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    a87c:	428b      	cmp	r3, r1
    a87e:	dd2f      	ble.n	a8e0 <z_impl_k_mutex_lock+0xdc>
		return z_set_prio(mutex->owner, new_prio);
    a880:	f000 fbfe 	bl	b080 <z_set_prio>
    a884:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    a886:	e9cd 6700 	strd	r6, r7, [sp]
    a88a:	481c      	ldr	r0, [pc, #112]	; (a8fc <z_impl_k_mutex_lock+0xf8>)
    a88c:	4622      	mov	r2, r4
    a88e:	4641      	mov	r1, r8
    a890:	f000 fabe 	bl	ae10 <z_pend_curr>
	if (got_mutex == 0) {
    a894:	2800      	cmp	r0, #0
    a896:	d0e0      	beq.n	a85a <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
    a898:	f04f 0320 	mov.w	r3, #32
    a89c:	f3ef 8611 	mrs	r6, BASEPRI
    a8a0:	f383 8811 	msr	BASEPRI, r3
    a8a4:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    a8a8:	6823      	ldr	r3, [r4, #0]
    a8aa:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a8ac:	429c      	cmp	r4, r3
    a8ae:	d00a      	beq.n	a8c6 <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    a8b0:	b14b      	cbz	r3, a8c6 <z_impl_k_mutex_lock+0xc2>
    a8b2:	f993 300e 	ldrsb.w	r3, [r3, #14]
    a8b6:	4299      	cmp	r1, r3
    a8b8:	bfa8      	it	ge
    a8ba:	4619      	movge	r1, r3
    a8bc:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    a8c0:	4299      	cmp	r1, r3
    a8c2:	bfb8      	it	lt
    a8c4:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    a8c6:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    a8c8:	f990 300e 	ldrsb.w	r3, [r0, #14]
    a8cc:	4299      	cmp	r1, r3
    a8ce:	d109      	bne.n	a8e4 <z_impl_k_mutex_lock+0xe0>
	if (resched) {
    a8d0:	b16d      	cbz	r5, a8ee <z_impl_k_mutex_lock+0xea>
		z_reschedule(&lock, key);
    a8d2:	480a      	ldr	r0, [pc, #40]	; (a8fc <z_impl_k_mutex_lock+0xf8>)
    a8d4:	4631      	mov	r1, r6
    a8d6:	f000 fa17 	bl	ad08 <z_reschedule>
	return -EAGAIN;
    a8da:	f06f 000a 	mvn.w	r0, #10
    a8de:	e7bc      	b.n	a85a <z_impl_k_mutex_lock+0x56>
	bool resched = false;
    a8e0:	2500      	movs	r5, #0
    a8e2:	e7d0      	b.n	a886 <z_impl_k_mutex_lock+0x82>
		return z_set_prio(mutex->owner, new_prio);
    a8e4:	f000 fbcc 	bl	b080 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    a8e8:	2800      	cmp	r0, #0
    a8ea:	d1f2      	bne.n	a8d2 <z_impl_k_mutex_lock+0xce>
    a8ec:	e7f0      	b.n	a8d0 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
    a8ee:	f386 8811 	msr	BASEPRI, r6
    a8f2:	f3bf 8f6f 	isb	sy
    a8f6:	e7f0      	b.n	a8da <z_impl_k_mutex_lock+0xd6>
    a8f8:	20000fcc 	.word	0x20000fcc
    a8fc:	2000166e 	.word	0x2000166e

0000a900 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    a900:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    a902:	6883      	ldr	r3, [r0, #8]
{
    a904:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    a906:	2b00      	cmp	r3, #0
    a908:	d036      	beq.n	a978 <z_impl_k_mutex_unlock+0x78>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    a90a:	4a1e      	ldr	r2, [pc, #120]	; (a984 <z_impl_k_mutex_unlock+0x84>)
    a90c:	6892      	ldr	r2, [r2, #8]
    a90e:	4293      	cmp	r3, r2
    a910:	d135      	bne.n	a97e <z_impl_k_mutex_unlock+0x7e>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    a912:	7bda      	ldrb	r2, [r3, #15]
    a914:	3a01      	subs	r2, #1
    a916:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    a918:	68c3      	ldr	r3, [r0, #12]
    a91a:	2b01      	cmp	r3, #1
    a91c:	d905      	bls.n	a92a <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    a91e:	3b01      	subs	r3, #1
    a920:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    a922:	f000 fabb 	bl	ae9c <k_sched_unlock>

	return 0;
    a926:	2000      	movs	r0, #0
}
    a928:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    a92a:	f04f 0320 	mov.w	r3, #32
    a92e:	f3ef 8511 	mrs	r5, BASEPRI
    a932:	f383 8811 	msr	BASEPRI, r3
    a936:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    a93a:	6901      	ldr	r1, [r0, #16]
    a93c:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
    a93e:	f990 300e 	ldrsb.w	r3, [r0, #14]
    a942:	4299      	cmp	r1, r3
    a944:	d001      	beq.n	a94a <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
    a946:	f000 fb9b 	bl	b080 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    a94a:	4620      	mov	r0, r4
    a94c:	f011 fb0a 	bl	1bf64 <z_unpend_first_thread>
	mutex->owner = new_owner;
    a950:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    a952:	b158      	cbz	r0, a96c <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
    a954:	f990 200e 	ldrsb.w	r2, [r0, #14]
    a958:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    a95a:	2200      	movs	r2, #0
    a95c:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    a95e:	f011 faba 	bl	1bed6 <z_ready_thread>
		z_reschedule(&lock, key);
    a962:	4809      	ldr	r0, [pc, #36]	; (a988 <z_impl_k_mutex_unlock+0x88>)
    a964:	4629      	mov	r1, r5
    a966:	f000 f9cf 	bl	ad08 <z_reschedule>
    a96a:	e7da      	b.n	a922 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    a96c:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    a96e:	f385 8811 	msr	BASEPRI, r5
    a972:	f3bf 8f6f 	isb	sy
    a976:	e7d4      	b.n	a922 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    a978:	f06f 0015 	mvn.w	r0, #21
    a97c:	e7d4      	b.n	a928 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
    a97e:	f04f 30ff 	mov.w	r0, #4294967295
    a982:	e7d1      	b.n	a928 <z_impl_k_mutex_unlock+0x28>
    a984:	20000fcc 	.word	0x20000fcc
    a988:	2000166e 	.word	0x2000166e

0000a98c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    a98c:	b538      	push	{r3, r4, r5, lr}
    a98e:	4604      	mov	r4, r0
	__asm__ volatile(
    a990:	f04f 0320 	mov.w	r3, #32
    a994:	f3ef 8511 	mrs	r5, BASEPRI
    a998:	f383 8811 	msr	BASEPRI, r3
    a99c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    a9a0:	f011 fae0 	bl	1bf64 <z_unpend_first_thread>

	if (thread != NULL) {
    a9a4:	b148      	cbz	r0, a9ba <z_impl_k_sem_give+0x2e>
    a9a6:	2200      	movs	r2, #0
    a9a8:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    a9aa:	f011 fa94 	bl	1bed6 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    a9ae:	4629      	mov	r1, r5
    a9b0:	4805      	ldr	r0, [pc, #20]	; (a9c8 <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    a9b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    a9b6:	f000 b9a7 	b.w	ad08 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    a9ba:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    a9be:	429a      	cmp	r2, r3
    a9c0:	bf18      	it	ne
    a9c2:	3301      	addne	r3, #1
    a9c4:	60a3      	str	r3, [r4, #8]
		handle_poll_events(sem);
    a9c6:	e7f2      	b.n	a9ae <z_impl_k_sem_give+0x22>
    a9c8:	2000166e 	.word	0x2000166e

0000a9cc <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    a9cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    a9ce:	4614      	mov	r4, r2
    a9d0:	461d      	mov	r5, r3
    a9d2:	f04f 0320 	mov.w	r3, #32
    a9d6:	f3ef 8111 	mrs	r1, BASEPRI
    a9da:	f383 8811 	msr	BASEPRI, r3
    a9de:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    a9e2:	6883      	ldr	r3, [r0, #8]
    a9e4:	b143      	cbz	r3, a9f8 <z_impl_k_sem_take+0x2c>
		sem->count--;
    a9e6:	3b01      	subs	r3, #1
    a9e8:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
    a9ea:	f381 8811 	msr	BASEPRI, r1
    a9ee:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    a9f2:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    a9f4:	b003      	add	sp, #12
    a9f6:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    a9f8:	ea54 0305 	orrs.w	r3, r4, r5
    a9fc:	d106      	bne.n	aa0c <z_impl_k_sem_take+0x40>
    a9fe:	f381 8811 	msr	BASEPRI, r1
    aa02:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    aa06:	f06f 000f 	mvn.w	r0, #15
    aa0a:	e7f3      	b.n	a9f4 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    aa0c:	4602      	mov	r2, r0
    aa0e:	e9cd 4500 	strd	r4, r5, [sp]
    aa12:	4802      	ldr	r0, [pc, #8]	; (aa1c <z_impl_k_sem_take+0x50>)
    aa14:	f000 f9fc 	bl	ae10 <z_pend_curr>
	return ret;
    aa18:	e7ec      	b.n	a9f4 <z_impl_k_sem_take+0x28>
    aa1a:	bf00      	nop
    aa1c:	2000166e 	.word	0x2000166e

0000aa20 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    aa20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    aa24:	4e4b      	ldr	r6, [pc, #300]	; (ab54 <work_queue_main+0x134>)
{
    aa26:	b085      	sub	sp, #20
    aa28:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
    aa2a:	f04f 38ff 	mov.w	r8, #4294967295
    aa2e:	f04f 39ff 	mov.w	r9, #4294967295
	__asm__ volatile(
    aa32:	f04f 0320 	mov.w	r3, #32
    aa36:	f3ef 8711 	mrs	r7, BASEPRI
    aa3a:	f383 8811 	msr	BASEPRI, r3
    aa3e:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
    aa42:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
	return list->head;
    aa46:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    aa4a:	b985      	cbnz	r5, aa6e <work_queue_main+0x4e>
	*flagp &= ~BIT(bit);
    aa4c:	f023 0204 	bic.w	r2, r3, #4
		} else if (flag_test_and_clear(&queue->flags,
    aa50:	075d      	lsls	r5, r3, #29
	*flagp &= ~BIT(bit);
    aa52:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
		} else if (flag_test_and_clear(&queue->flags,
    aa56:	d433      	bmi.n	aac0 <work_queue_main+0xa0>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
    aa58:	2300      	movs	r3, #0
    aa5a:	e9cd 8900 	strd	r8, r9, [sp]
    aa5e:	9302      	str	r3, [sp, #8]
    aa60:	f104 0288 	add.w	r2, r4, #136	; 0x88
    aa64:	4639      	mov	r1, r7
    aa66:	483c      	ldr	r0, [pc, #240]	; (ab58 <work_queue_main+0x138>)
    aa68:	f000 fc72 	bl	b350 <z_sched_wait>
			continue;
    aa6c:	e7e1      	b.n	aa32 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    aa6e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
    aa72:	6829      	ldr	r1, [r5, #0]
	list->head = node;
    aa74:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    aa78:	4295      	cmp	r5, r2
    aa7a:	d101      	bne.n	aa80 <work_queue_main+0x60>
	list->tail = node;
    aa7c:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
    aa80:	f043 0302 	orr.w	r3, r3, #2
    aa84:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
    aa88:	68eb      	ldr	r3, [r5, #12]
    aa8a:	f023 0304 	bic.w	r3, r3, #4
    aa8e:	f043 0301 	orr.w	r3, r3, #1
    aa92:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
    aa94:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
    aa96:	f387 8811 	msr	BASEPRI, r7
    aa9a:	f3bf 8f6f 	isb	sy

		if (work != NULL) {
			bool yield;

			__ASSERT_NO_MSG(handler != NULL);
			handler(work);
    aa9e:	4628      	mov	r0, r5
    aaa0:	4798      	blx	r3
	__asm__ volatile(
    aaa2:	f04f 0320 	mov.w	r3, #32
    aaa6:	f3ef 8b11 	mrs	fp, BASEPRI
    aaaa:	f383 8811 	msr	BASEPRI, r3
    aaae:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    aab2:	68eb      	ldr	r3, [r5, #12]
			 * starving other threads.
			 */
			key = k_spin_lock(&lock);

			flag_clear(&work->flags, K_WORK_RUNNING_BIT);
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    aab4:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
    aab6:	f023 0201 	bic.w	r2, r3, #1
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    aaba:	d40b      	bmi.n	aad4 <work_queue_main+0xb4>
	*flagp &= ~BIT(bit);
    aabc:	60ea      	str	r2, [r5, #12]
    aabe:	e00e      	b.n	aade <work_queue_main+0xbe>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    aac0:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    aac4:	2200      	movs	r2, #0
    aac6:	2101      	movs	r1, #1
    aac8:	4628      	mov	r0, r5
    aaca:	f011 fa63 	bl	1bf94 <z_sched_wake>
    aace:	2800      	cmp	r0, #0
    aad0:	d1f8      	bne.n	aac4 <work_queue_main+0xa4>
    aad2:	e7c1      	b.n	aa58 <work_queue_main+0x38>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    aad4:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
    aad6:	f023 0303 	bic.w	r3, r3, #3
    aada:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    aadc:	b970      	cbnz	r0, aafc <work_queue_main+0xdc>
	*flagp &= ~BIT(bit);
    aade:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    aae2:	f023 0302 	bic.w	r3, r3, #2
    aae6:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
    aaea:	f38b 8811 	msr	BASEPRI, fp
    aaee:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&lock, key);

			/* Optionally yield to prevent the work queue from
			 * starving other threads.
			 */
			if (yield) {
    aaf2:	05d8      	lsls	r0, r3, #23
    aaf4:	d49d      	bmi.n	aa32 <work_queue_main+0x12>
	z_impl_k_yield();
    aaf6:	f000 fb1b 	bl	b130 <z_impl_k_yield>
}
    aafa:	e79a      	b.n	aa32 <work_queue_main+0x12>
	return node->next;
    aafc:	6807      	ldr	r7, [r0, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    aafe:	f04f 0a00 	mov.w	sl, #0
    ab02:	2f00      	cmp	r7, #0
    ab04:	bf38      	it	cc
    ab06:	2700      	movcc	r7, #0
	parent->next = child;
    ab08:	4653      	mov	r3, sl
		if (wc->work == work) {
    ab0a:	6842      	ldr	r2, [r0, #4]
    ab0c:	4295      	cmp	r5, r2
    ab0e:	4601      	mov	r1, r0
    ab10:	d10e      	bne.n	ab30 <work_queue_main+0x110>
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    ab12:	6801      	ldr	r1, [r0, #0]
    ab14:	f1ba 0f00 	cmp.w	sl, #0
    ab18:	d114      	bne.n	ab44 <work_queue_main+0x124>
    ab1a:	6872      	ldr	r2, [r6, #4]
	list->head = node;
    ab1c:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
    ab1e:	4290      	cmp	r0, r2
    ab20:	d100      	bne.n	ab24 <work_queue_main+0x104>
	list->tail = node;
    ab22:	6071      	str	r1, [r6, #4]
	parent->next = child;
    ab24:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
    ab28:	f7ff ff30 	bl	a98c <z_impl_k_sem_give>
}
    ab2c:	4651      	mov	r1, sl
    ab2e:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    ab30:	2f00      	cmp	r7, #0
    ab32:	d0d4      	beq.n	aade <work_queue_main+0xbe>
	return node->next;
    ab34:	683a      	ldr	r2, [r7, #0]
    ab36:	2a00      	cmp	r2, #0
    ab38:	bf38      	it	cc
    ab3a:	2200      	movcc	r2, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    ab3c:	4638      	mov	r0, r7
    ab3e:	468a      	mov	sl, r1
    ab40:	4617      	mov	r7, r2
    ab42:	e7e2      	b.n	ab0a <work_queue_main+0xea>
	parent->next = child;
    ab44:	f8ca 1000 	str.w	r1, [sl]
Z_GENLIST_REMOVE(slist, snode)
    ab48:	6872      	ldr	r2, [r6, #4]
    ab4a:	4290      	cmp	r0, r2
	list->tail = node;
    ab4c:	bf08      	it	eq
    ab4e:	f8c6 a004 	streq.w	sl, [r6, #4]
}
    ab52:	e7e7      	b.n	ab24 <work_queue_main+0x104>
    ab54:	20000ffc 	.word	0x20000ffc
    ab58:	2000166e 	.word	0x2000166e

0000ab5c <submit_to_queue_locked>:
{
    ab5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    ab5e:	68c3      	ldr	r3, [r0, #12]
    ab60:	079a      	lsls	r2, r3, #30
{
    ab62:	4604      	mov	r4, r0
    ab64:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    ab66:	f3c3 0540 	ubfx	r5, r3, #1, #1
    ab6a:	d41f      	bmi.n	abac <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    ab6c:	075f      	lsls	r7, r3, #29
    ab6e:	d41f      	bmi.n	abb0 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
    ab70:	680a      	ldr	r2, [r1, #0]
    ab72:	b90a      	cbnz	r2, ab78 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
    ab74:	6882      	ldr	r2, [r0, #8]
    ab76:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    ab78:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
    ab7a:	bf44      	itt	mi
    ab7c:	68a3      	ldrmi	r3, [r4, #8]
    ab7e:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
    ab80:	6837      	ldr	r7, [r6, #0]
			ret = 2;
    ab82:	bf4c      	ite	mi
    ab84:	2502      	movmi	r5, #2
		ret = 1;
    ab86:	2501      	movpl	r5, #1
	if (queue == NULL) {
    ab88:	b37f      	cbz	r7, abea <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    ab8a:	4b1b      	ldr	r3, [pc, #108]	; (abf8 <submit_to_queue_locked+0x9c>)
    ab8c:	689b      	ldr	r3, [r3, #8]
    ab8e:	42bb      	cmp	r3, r7
    ab90:	d111      	bne.n	abb6 <submit_to_queue_locked+0x5a>
    ab92:	f011 f8dd 	bl	1bd50 <k_is_in_isr>
    ab96:	f080 0001 	eor.w	r0, r0, #1
    ab9a:	b2c0      	uxtb	r0, r0
	bool draining = flag_test(&queue->flags, K_WORK_QUEUE_DRAIN_BIT);
    ab9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    aba0:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    aba2:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    aba6:	d523      	bpl.n	abf0 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
    aba8:	b13a      	cbz	r2, abba <submit_to_queue_locked+0x5e>
    abaa:	b940      	cbnz	r0, abbe <submit_to_queue_locked+0x62>
		ret = -EBUSY;
    abac:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
    abb0:	2300      	movs	r3, #0
    abb2:	6033      	str	r3, [r6, #0]
	return ret;
    abb4:	e013      	b.n	abde <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    abb6:	2000      	movs	r0, #0
    abb8:	e7f0      	b.n	ab9c <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
    abba:	071b      	lsls	r3, r3, #28
    abbc:	d4f6      	bmi.n	abac <submit_to_queue_locked+0x50>
	parent->next = child;
    abbe:	2300      	movs	r3, #0
    abc0:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
    abc2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    abc6:	b963      	cbnz	r3, abe2 <submit_to_queue_locked+0x86>
	list->head = node;
    abc8:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
    abcc:	4638      	mov	r0, r7
    abce:	f011 f8e6 	bl	1bd9e <notify_queue_locked>
	*flagp |= BIT(bit);
    abd2:	68e3      	ldr	r3, [r4, #12]
    abd4:	f043 0304 	orr.w	r3, r3, #4
    abd8:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    abda:	6833      	ldr	r3, [r6, #0]
    abdc:	60a3      	str	r3, [r4, #8]
}
    abde:	4628      	mov	r0, r5
    abe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    abe2:	601c      	str	r4, [r3, #0]
	list->tail = node;
    abe4:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
    abe8:	e7f0      	b.n	abcc <submit_to_queue_locked+0x70>
		return -EINVAL;
    abea:	f06f 0515 	mvn.w	r5, #21
    abee:	e7df      	b.n	abb0 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
    abf0:	f06f 0512 	mvn.w	r5, #18
    abf4:	e7dc      	b.n	abb0 <submit_to_queue_locked+0x54>
    abf6:	bf00      	nop
    abf8:	20000fcc 	.word	0x20000fcc

0000abfc <k_work_submit>:
{
    abfc:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
    abfe:	4801      	ldr	r0, [pc, #4]	; (ac04 <k_work_submit+0x8>)
    ac00:	f011 b8dd 	b.w	1bdbe <k_work_submit_to_queue>
    ac04:	20000478 	.word	0x20000478

0000ac08 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    ac08:	b5f0      	push	{r4, r5, r6, r7, lr}
    ac0a:	b089      	sub	sp, #36	; 0x24
    ac0c:	4604      	mov	r4, r0
	list->head = NULL;
    ac0e:	2000      	movs	r0, #0
	list->tail = NULL;
    ac10:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
    ac14:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    ac16:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
    ac1a:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
    ac1e:	f104 0090 	add.w	r0, r4, #144	; 0x90
    ac22:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    ac26:	b31d      	cbz	r5, ac70 <k_work_queue_start+0x68>
    ac28:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
    ac2a:	2800      	cmp	r0, #0
    ac2c:	f240 1001 	movw	r0, #257	; 0x101
    ac30:	bf08      	it	eq
    ac32:	2001      	moveq	r0, #1
	*flagp = flags;
    ac34:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    ac38:	2000      	movs	r0, #0
    ac3a:	f04f 36ff 	mov.w	r6, #4294967295
    ac3e:	f04f 37ff 	mov.w	r7, #4294967295
    ac42:	e9cd 3003 	strd	r3, r0, [sp, #12]
    ac46:	e9cd 0001 	strd	r0, r0, [sp, #4]
    ac4a:	e9cd 6706 	strd	r6, r7, [sp, #24]
    ac4e:	4b09      	ldr	r3, [pc, #36]	; (ac74 <k_work_queue_start+0x6c>)
    ac50:	9400      	str	r4, [sp, #0]
    ac52:	4620      	mov	r0, r4
    ac54:	f7ff fd36 	bl	a6c4 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    ac58:	b125      	cbz	r5, ac64 <k_work_queue_start+0x5c>
    ac5a:	6829      	ldr	r1, [r5, #0]
    ac5c:	b111      	cbz	r1, ac64 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
    ac5e:	4620      	mov	r0, r4
    ac60:	f011 f87c 	bl	1bd5c <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    ac64:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    ac66:	b009      	add	sp, #36	; 0x24
    ac68:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    ac6c:	f011 b87b 	b.w	1bd66 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    ac70:	2001      	movs	r0, #1
    ac72:	e7df      	b.n	ac34 <k_work_queue_start+0x2c>
    ac74:	0000aa21 	.word	0x0000aa21

0000ac78 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    ac78:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    ac7a:	4c08      	ldr	r4, [pc, #32]	; (ac9c <z_reset_time_slice+0x24>)
    ac7c:	6823      	ldr	r3, [r4, #0]
    ac7e:	b15b      	cbz	r3, ac98 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    ac80:	f7fb fcda 	bl	6638 <sys_clock_elapsed>
    ac84:	4603      	mov	r3, r0
    ac86:	6820      	ldr	r0, [r4, #0]
    ac88:	4a05      	ldr	r2, [pc, #20]	; (aca0 <z_reset_time_slice+0x28>)
    ac8a:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
    ac8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    ac90:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    ac92:	2100      	movs	r1, #0
    ac94:	f011 b9c1 	b.w	1c01a <z_set_timeout_expiry>
}
    ac98:	bd10      	pop	{r4, pc}
    ac9a:	bf00      	nop
    ac9c:	2000100c 	.word	0x2000100c
    aca0:	20000fcc 	.word	0x20000fcc

0000aca4 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    aca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    aca6:	4604      	mov	r4, r0
    aca8:	460d      	mov	r5, r1
	__asm__ volatile(
    acaa:	f04f 0320 	mov.w	r3, #32
    acae:	f3ef 8611 	mrs	r6, BASEPRI
    acb2:	f383 8811 	msr	BASEPRI, r3
    acb6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    acba:	4b10      	ldr	r3, [pc, #64]	; (acfc <k_sched_time_slice_set+0x58>)
    acbc:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    acbe:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    acc2:	f240 30e7 	movw	r0, #999	; 0x3e7
    acc6:	2100      	movs	r1, #0
    acc8:	611a      	str	r2, [r3, #16]
    acca:	fbe7 0104 	umlal	r0, r1, r7, r4
    acce:	2300      	movs	r3, #0
    acd0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    acd4:	f7f5 fef0 	bl	ab8 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    acd8:	2c00      	cmp	r4, #0
    acda:	4b09      	ldr	r3, [pc, #36]	; (ad00 <k_sched_time_slice_set+0x5c>)
    acdc:	dc09      	bgt.n	acf2 <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
    acde:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    ace0:	4b08      	ldr	r3, [pc, #32]	; (ad04 <k_sched_time_slice_set+0x60>)
    ace2:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    ace4:	f7ff ffc8 	bl	ac78 <z_reset_time_slice>
	__asm__ volatile(
    ace8:	f386 8811 	msr	BASEPRI, r6
    acec:	f3bf 8f6f 	isb	sy
	}
}
    acf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
    acf2:	2802      	cmp	r0, #2
    acf4:	bfb8      	it	lt
    acf6:	2002      	movlt	r0, #2
    acf8:	e7f1      	b.n	acde <k_sched_time_slice_set+0x3a>
    acfa:	bf00      	nop
    acfc:	20000fcc 	.word	0x20000fcc
    ad00:	2000100c 	.word	0x2000100c
    ad04:	20001008 	.word	0x20001008

0000ad08 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    ad08:	b949      	cbnz	r1, ad1e <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    ad0a:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    ad0e:	b930      	cbnz	r0, ad1e <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    ad10:	4b05      	ldr	r3, [pc, #20]	; (ad28 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    ad12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    ad14:	689b      	ldr	r3, [r3, #8]
    ad16:	429a      	cmp	r2, r3
    ad18:	d001      	beq.n	ad1e <z_reschedule+0x16>
	ret = arch_swap(key);
    ad1a:	f7fb bd7f 	b.w	681c <arch_swap>
    ad1e:	f381 8811 	msr	BASEPRI, r1
    ad22:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    ad26:	4770      	bx	lr
    ad28:	20000fcc 	.word	0x20000fcc

0000ad2c <k_sched_lock>:
	__asm__ volatile(
    ad2c:	f04f 0320 	mov.w	r3, #32
    ad30:	f3ef 8111 	mrs	r1, BASEPRI
    ad34:	f383 8811 	msr	BASEPRI, r3
    ad38:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    ad3c:	4b04      	ldr	r3, [pc, #16]	; (ad50 <k_sched_lock+0x24>)
    ad3e:	689a      	ldr	r2, [r3, #8]
    ad40:	7bd3      	ldrb	r3, [r2, #15]
    ad42:	3b01      	subs	r3, #1
    ad44:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    ad46:	f381 8811 	msr	BASEPRI, r1
    ad4a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    ad4e:	4770      	bx	lr
    ad50:	20000fcc 	.word	0x20000fcc

0000ad54 <update_cache>:
{
    ad54:	b538      	push	{r3, r4, r5, lr}
    ad56:	4602      	mov	r2, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
    ad58:	480c      	ldr	r0, [pc, #48]	; (ad8c <update_cache+0x38>)
    ad5a:	4d0d      	ldr	r5, [pc, #52]	; (ad90 <update_cache+0x3c>)
    ad5c:	f011 f884 	bl	1be68 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    ad60:	4604      	mov	r4, r0
    ad62:	b900      	cbnz	r0, ad66 <update_cache+0x12>
    ad64:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
    ad66:	68ab      	ldr	r3, [r5, #8]
    ad68:	b94a      	cbnz	r2, ad7e <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
    ad6a:	7b5a      	ldrb	r2, [r3, #13]
    ad6c:	06d2      	lsls	r2, r2, #27
    ad6e:	d106      	bne.n	ad7e <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    ad70:	69a2      	ldr	r2, [r4, #24]
    ad72:	b922      	cbnz	r2, ad7e <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
    ad74:	89da      	ldrh	r2, [r3, #14]
    ad76:	2a7f      	cmp	r2, #127	; 0x7f
    ad78:	d901      	bls.n	ad7e <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
    ad7a:	626b      	str	r3, [r5, #36]	; 0x24
}
    ad7c:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    ad7e:	429c      	cmp	r4, r3
    ad80:	d001      	beq.n	ad86 <update_cache+0x32>
			z_reset_time_slice();
    ad82:	f7ff ff79 	bl	ac78 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    ad86:	626c      	str	r4, [r5, #36]	; 0x24
}
    ad88:	e7f8      	b.n	ad7c <update_cache+0x28>
    ad8a:	bf00      	nop
    ad8c:	20000ff4 	.word	0x20000ff4
    ad90:	20000fcc 	.word	0x20000fcc

0000ad94 <unready_thread>:
{
    ad94:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    ad96:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    ad9a:	7b43      	ldrb	r3, [r0, #13]
    ad9c:	2a00      	cmp	r2, #0
{
    ad9e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    ada0:	da04      	bge.n	adac <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    ada2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    ada6:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    ada8:	f011 f826 	bl	1bdf8 <sys_dlist_remove>
	update_cache(thread == _current);
    adac:	4b04      	ldr	r3, [pc, #16]	; (adc0 <unready_thread+0x2c>)
    adae:	6898      	ldr	r0, [r3, #8]
    adb0:	1a43      	subs	r3, r0, r1
    adb2:	4258      	negs	r0, r3
    adb4:	4158      	adcs	r0, r3
}
    adb6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    adba:	f7ff bfcb 	b.w	ad54 <update_cache>
    adbe:	bf00      	nop
    adc0:	20000fcc 	.word	0x20000fcc

0000adc4 <pend>:
{
    adc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    adc8:	4606      	mov	r6, r0
    adca:	4614      	mov	r4, r2
    adcc:	461d      	mov	r5, r3
	__asm__ volatile(
    adce:	f04f 0320 	mov.w	r3, #32
    add2:	f3ef 8711 	mrs	r7, BASEPRI
    add6:	f383 8811 	msr	BASEPRI, r3
    adda:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    adde:	f011 f84d 	bl	1be7c <add_to_waitq_locked>
	__asm__ volatile(
    ade2:	f387 8811 	msr	BASEPRI, r7
    ade6:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    adea:	1c6b      	adds	r3, r5, #1
    adec:	bf08      	it	eq
    adee:	f1b4 3fff 	cmpeq.w	r4, #4294967295
    adf2:	d008      	beq.n	ae06 <pend+0x42>
    adf4:	4622      	mov	r2, r4
    adf6:	462b      	mov	r3, r5
    adf8:	f106 0018 	add.w	r0, r6, #24
    adfc:	4903      	ldr	r1, [pc, #12]	; (ae0c <pend+0x48>)
}
    adfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ae02:	f000 bb21 	b.w	b448 <z_add_timeout>
    ae06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ae0a:	bf00      	nop
    ae0c:	0001bef7 	.word	0x0001bef7

0000ae10 <z_pend_curr>:
{
    ae10:	b510      	push	{r4, lr}
	pending_current = _current;
    ae12:	4b07      	ldr	r3, [pc, #28]	; (ae30 <z_pend_curr+0x20>)
    ae14:	6898      	ldr	r0, [r3, #8]
    ae16:	4b07      	ldr	r3, [pc, #28]	; (ae34 <z_pend_curr+0x24>)
{
    ae18:	460c      	mov	r4, r1
	pending_current = _current;
    ae1a:	6018      	str	r0, [r3, #0]
{
    ae1c:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    ae1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    ae22:	f7ff ffcf 	bl	adc4 <pend>
    ae26:	4620      	mov	r0, r4
}
    ae28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ae2c:	f7fb bcf6 	b.w	681c <arch_swap>
    ae30:	20000fcc 	.word	0x20000fcc
    ae34:	20001004 	.word	0x20001004

0000ae38 <z_impl_k_thread_suspend>:
{
    ae38:	b570      	push	{r4, r5, r6, lr}
    ae3a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    ae3c:	3018      	adds	r0, #24
    ae3e:	f011 f8c6 	bl	1bfce <z_abort_timeout>
	__asm__ volatile(
    ae42:	f04f 0320 	mov.w	r3, #32
    ae46:	f3ef 8611 	mrs	r6, BASEPRI
    ae4a:	f383 8811 	msr	BASEPRI, r3
    ae4e:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    ae52:	f994 200d 	ldrsb.w	r2, [r4, #13]
    ae56:	7b63      	ldrb	r3, [r4, #13]
    ae58:	2a00      	cmp	r2, #0
    ae5a:	da05      	bge.n	ae68 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    ae5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    ae60:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    ae62:	4620      	mov	r0, r4
    ae64:	f010 ffc8 	bl	1bdf8 <sys_dlist_remove>
		update_cache(thread == _current);
    ae68:	4d0b      	ldr	r5, [pc, #44]	; (ae98 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    ae6a:	7b63      	ldrb	r3, [r4, #13]
    ae6c:	68a8      	ldr	r0, [r5, #8]
    ae6e:	f043 0310 	orr.w	r3, r3, #16
    ae72:	7363      	strb	r3, [r4, #13]
    ae74:	1b03      	subs	r3, r0, r4
    ae76:	4258      	negs	r0, r3
    ae78:	4158      	adcs	r0, r3
    ae7a:	f7ff ff6b 	bl	ad54 <update_cache>
	__asm__ volatile(
    ae7e:	f386 8811 	msr	BASEPRI, r6
    ae82:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    ae86:	68ab      	ldr	r3, [r5, #8]
    ae88:	42a3      	cmp	r3, r4
    ae8a:	d103      	bne.n	ae94 <z_impl_k_thread_suspend+0x5c>
}
    ae8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    ae90:	f010 bfe0 	b.w	1be54 <z_reschedule_unlocked>
}
    ae94:	bd70      	pop	{r4, r5, r6, pc}
    ae96:	bf00      	nop
    ae98:	20000fcc 	.word	0x20000fcc

0000ae9c <k_sched_unlock>:
{
    ae9c:	b510      	push	{r4, lr}
	__asm__ volatile(
    ae9e:	f04f 0320 	mov.w	r3, #32
    aea2:	f3ef 8411 	mrs	r4, BASEPRI
    aea6:	f383 8811 	msr	BASEPRI, r3
    aeaa:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    aeae:	4b08      	ldr	r3, [pc, #32]	; (aed0 <k_sched_unlock+0x34>)
    aeb0:	689a      	ldr	r2, [r3, #8]
    aeb2:	7bd3      	ldrb	r3, [r2, #15]
    aeb4:	3301      	adds	r3, #1
    aeb6:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    aeb8:	2000      	movs	r0, #0
    aeba:	f7ff ff4b 	bl	ad54 <update_cache>
	__asm__ volatile(
    aebe:	f384 8811 	msr	BASEPRI, r4
    aec2:	f3bf 8f6f 	isb	sy
}
    aec6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    aeca:	f010 bfc3 	b.w	1be54 <z_reschedule_unlocked>
    aece:	bf00      	nop
    aed0:	20000fcc 	.word	0x20000fcc

0000aed4 <move_thread_to_end_of_prio_q>:
{
    aed4:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    aed6:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    aeda:	7b43      	ldrb	r3, [r0, #13]
    aedc:	2a00      	cmp	r2, #0
{
    aede:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    aee0:	da04      	bge.n	aeec <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    aee2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    aee6:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    aee8:	f010 ff86 	bl	1bdf8 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    aeec:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    aeee:	4a17      	ldr	r2, [pc, #92]	; (af4c <move_thread_to_end_of_prio_q+0x78>)
    aef0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    aef4:	4610      	mov	r0, r2
    aef6:	734b      	strb	r3, [r1, #13]
    aef8:	f850 3f28 	ldr.w	r3, [r0, #40]!
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    aefc:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
    aefe:	4283      	cmp	r3, r0
    af00:	bf08      	it	eq
    af02:	2300      	moveq	r3, #0
    af04:	2b00      	cmp	r3, #0
    af06:	bf38      	it	cc
    af08:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    af0a:	b1cb      	cbz	r3, af40 <move_thread_to_end_of_prio_q+0x6c>
	int32_t b1 = thread_1->base.prio;
    af0c:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    af10:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
    af14:	42a6      	cmp	r6, r4
    af16:	d00f      	beq.n	af38 <move_thread_to_end_of_prio_q+0x64>
		return b2 - b1;
    af18:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    af1a:	2c00      	cmp	r4, #0
    af1c:	dd0c      	ble.n	af38 <move_thread_to_end_of_prio_q+0x64>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    af1e:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    af20:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    af24:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    af26:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    af28:	6890      	ldr	r0, [r2, #8]
    af2a:	1a43      	subs	r3, r0, r1
    af2c:	4258      	negs	r0, r3
}
    af2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    af32:	4158      	adcs	r0, r3
    af34:	f7ff bf0e 	b.w	ad54 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    af38:	42ab      	cmp	r3, r5
    af3a:	d001      	beq.n	af40 <move_thread_to_end_of_prio_q+0x6c>
    af3c:	681b      	ldr	r3, [r3, #0]
    af3e:	e7e4      	b.n	af0a <move_thread_to_end_of_prio_q+0x36>
	node->prev = tail;
    af40:	e9c1 0500 	strd	r0, r5, [r1]
	tail->next = node;
    af44:	6029      	str	r1, [r5, #0]
	list->tail = node;
    af46:	62d1      	str	r1, [r2, #44]	; 0x2c
}
    af48:	e7ee      	b.n	af28 <move_thread_to_end_of_prio_q+0x54>
    af4a:	bf00      	nop
    af4c:	20000fcc 	.word	0x20000fcc

0000af50 <z_time_slice>:
{
    af50:	b570      	push	{r4, r5, r6, lr}
    af52:	4601      	mov	r1, r0
	__asm__ volatile(
    af54:	f04f 0320 	mov.w	r3, #32
    af58:	f3ef 8411 	mrs	r4, BASEPRI
    af5c:	f383 8811 	msr	BASEPRI, r3
    af60:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    af64:	4b16      	ldr	r3, [pc, #88]	; (afc0 <z_time_slice+0x70>)
    af66:	4a17      	ldr	r2, [pc, #92]	; (afc4 <z_time_slice+0x74>)
    af68:	6898      	ldr	r0, [r3, #8]
    af6a:	6815      	ldr	r5, [r2, #0]
    af6c:	42a8      	cmp	r0, r5
    af6e:	461d      	mov	r5, r3
    af70:	d106      	bne.n	af80 <z_time_slice+0x30>
			z_reset_time_slice();
    af72:	f7ff fe81 	bl	ac78 <z_reset_time_slice>
	__asm__ volatile(
    af76:	f384 8811 	msr	BASEPRI, r4
    af7a:	f3bf 8f6f 	isb	sy
}
    af7e:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    af80:	2600      	movs	r6, #0
    af82:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
    af84:	4a10      	ldr	r2, [pc, #64]	; (afc8 <z_time_slice+0x78>)
    af86:	6812      	ldr	r2, [r2, #0]
    af88:	b1ba      	cbz	r2, afba <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    af8a:	89c2      	ldrh	r2, [r0, #14]
    af8c:	2a7f      	cmp	r2, #127	; 0x7f
    af8e:	d814      	bhi.n	afba <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    af90:	7b42      	ldrb	r2, [r0, #13]
    af92:	06d2      	lsls	r2, r2, #27
    af94:	d111      	bne.n	afba <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    af96:	4a0d      	ldr	r2, [pc, #52]	; (afcc <z_time_slice+0x7c>)
    af98:	f990 600e 	ldrsb.w	r6, [r0, #14]
    af9c:	6812      	ldr	r2, [r2, #0]
    af9e:	4296      	cmp	r6, r2
    afa0:	db0b      	blt.n	afba <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    afa2:	4a0b      	ldr	r2, [pc, #44]	; (afd0 <z_time_slice+0x80>)
    afa4:	4290      	cmp	r0, r2
    afa6:	d008      	beq.n	afba <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    afa8:	691a      	ldr	r2, [r3, #16]
    afaa:	428a      	cmp	r2, r1
    afac:	dc02      	bgt.n	afb4 <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
    afae:	f7ff ff91 	bl	aed4 <move_thread_to_end_of_prio_q>
    afb2:	e7de      	b.n	af72 <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
    afb4:	1a52      	subs	r2, r2, r1
    afb6:	611a      	str	r2, [r3, #16]
    afb8:	e7dd      	b.n	af76 <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
    afba:	2300      	movs	r3, #0
    afbc:	612b      	str	r3, [r5, #16]
    afbe:	e7da      	b.n	af76 <z_time_slice+0x26>
    afc0:	20000fcc 	.word	0x20000fcc
    afc4:	20001004 	.word	0x20001004
    afc8:	2000100c 	.word	0x2000100c
    afcc:	20001008 	.word	0x20001008
    afd0:	20000370 	.word	0x20000370

0000afd4 <ready_thread>:
{
    afd4:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    afd6:	f990 300d 	ldrsb.w	r3, [r0, #13]
    afda:	7b42      	ldrb	r2, [r0, #13]
    afdc:	2b00      	cmp	r3, #0
    afde:	db2d      	blt.n	b03c <ready_thread+0x68>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    afe0:	06d3      	lsls	r3, r2, #27
    afe2:	d12b      	bne.n	b03c <ready_thread+0x68>
	return !sys_dnode_is_linked(&to->node);
    afe4:	6983      	ldr	r3, [r0, #24]
    afe6:	bb4b      	cbnz	r3, b03c <ready_thread+0x68>
	return list->head == list;
    afe8:	4915      	ldr	r1, [pc, #84]	; (b040 <ready_thread+0x6c>)
	thread->base.thread_state |= _THREAD_QUEUED;
    afea:	f062 027f 	orn	r2, r2, #127	; 0x7f
    afee:	7342      	strb	r2, [r0, #13]
    aff0:	460a      	mov	r2, r1
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    aff2:	6acd      	ldr	r5, [r1, #44]	; 0x2c
	return list->head == list;
    aff4:	f852 4f28 	ldr.w	r4, [r2, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    aff8:	4294      	cmp	r4, r2
    affa:	bf18      	it	ne
    affc:	4623      	movne	r3, r4
    affe:	2b00      	cmp	r3, #0
    b000:	bf38      	it	cc
    b002:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b004:	b1ab      	cbz	r3, b032 <ready_thread+0x5e>
	int32_t b1 = thread_1->base.prio;
    b006:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    b00a:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
    b00e:	42a6      	cmp	r6, r4
    b010:	d00b      	beq.n	b02a <ready_thread+0x56>
		return b2 - b1;
    b012:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    b014:	2c00      	cmp	r4, #0
    b016:	dd08      	ble.n	b02a <ready_thread+0x56>
	sys_dnode_t *const prev = successor->prev;
    b018:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    b01a:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    b01e:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    b020:	6058      	str	r0, [r3, #4]
}
    b022:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    b024:	2000      	movs	r0, #0
    b026:	f7ff be95 	b.w	ad54 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    b02a:	42ab      	cmp	r3, r5
    b02c:	d001      	beq.n	b032 <ready_thread+0x5e>
    b02e:	681b      	ldr	r3, [r3, #0]
    b030:	e7e8      	b.n	b004 <ready_thread+0x30>
	node->prev = tail;
    b032:	e9c0 2500 	strd	r2, r5, [r0]
	tail->next = node;
    b036:	6028      	str	r0, [r5, #0]
	list->tail = node;
    b038:	62c8      	str	r0, [r1, #44]	; 0x2c
}
    b03a:	e7f2      	b.n	b022 <ready_thread+0x4e>
}
    b03c:	bc70      	pop	{r4, r5, r6}
    b03e:	4770      	bx	lr
    b040:	20000fcc 	.word	0x20000fcc

0000b044 <z_sched_start>:
{
    b044:	b510      	push	{r4, lr}
	__asm__ volatile(
    b046:	f04f 0220 	mov.w	r2, #32
    b04a:	f3ef 8411 	mrs	r4, BASEPRI
    b04e:	f382 8811 	msr	BASEPRI, r2
    b052:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
    b056:	7b42      	ldrb	r2, [r0, #13]
    b058:	0751      	lsls	r1, r2, #29
    b05a:	d404      	bmi.n	b066 <z_sched_start+0x22>
	__asm__ volatile(
    b05c:	f384 8811 	msr	BASEPRI, r4
    b060:	f3bf 8f6f 	isb	sy
}
    b064:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    b066:	f022 0204 	bic.w	r2, r2, #4
    b06a:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    b06c:	f7ff ffb2 	bl	afd4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    b070:	4621      	mov	r1, r4
    b072:	4802      	ldr	r0, [pc, #8]	; (b07c <z_sched_start+0x38>)
}
    b074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    b078:	f7ff be46 	b.w	ad08 <z_reschedule>
    b07c:	2000166e 	.word	0x2000166e

0000b080 <z_set_prio>:
{
    b080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b082:	4604      	mov	r4, r0
	__asm__ volatile(
    b084:	f04f 0320 	mov.w	r3, #32
    b088:	f3ef 8611 	mrs	r6, BASEPRI
    b08c:	f383 8811 	msr	BASEPRI, r3
    b090:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    b094:	7b43      	ldrb	r3, [r0, #13]
    b096:	06da      	lsls	r2, r3, #27
    b098:	b249      	sxtb	r1, r1
    b09a:	d138      	bne.n	b10e <z_set_prio+0x8e>
    b09c:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
    b09e:	2d00      	cmp	r5, #0
    b0a0:	d135      	bne.n	b10e <z_set_prio+0x8e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    b0a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    b0a6:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    b0a8:	f010 fea6 	bl	1bdf8 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    b0ac:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
    b0ae:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    b0b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    b0b4:	7343      	strb	r3, [r0, #13]
	return list->head == list;
    b0b6:	4817      	ldr	r0, [pc, #92]	; (b114 <z_set_prio+0x94>)
    b0b8:	4603      	mov	r3, r0
    b0ba:	f853 7f28 	ldr.w	r7, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b0be:	429f      	cmp	r7, r3
    b0c0:	bf18      	it	ne
    b0c2:	463d      	movne	r5, r7
    b0c4:	2d00      	cmp	r5, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    b0c6:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
    b0c8:	461a      	mov	r2, r3
    b0ca:	462b      	mov	r3, r5
    b0cc:	bf38      	it	cc
    b0ce:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b0d0:	b1c3      	cbz	r3, b104 <z_set_prio+0x84>
	int32_t b2 = thread_2->base.prio;
    b0d2:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
    b0d6:	42a9      	cmp	r1, r5
    b0d8:	d010      	beq.n	b0fc <z_set_prio+0x7c>
		return b2 - b1;
    b0da:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    b0dc:	2d00      	cmp	r5, #0
    b0de:	dd0d      	ble.n	b0fc <z_set_prio+0x7c>
	sys_dnode_t *const prev = successor->prev;
    b0e0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    b0e2:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    b0e6:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    b0e8:	605c      	str	r4, [r3, #4]
			update_cache(1);
    b0ea:	2001      	movs	r0, #1
    b0ec:	f7ff fe32 	bl	ad54 <update_cache>
    b0f0:	2001      	movs	r0, #1
	__asm__ volatile(
    b0f2:	f386 8811 	msr	BASEPRI, r6
    b0f6:	f3bf 8f6f 	isb	sy
}
    b0fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    b0fc:	42bb      	cmp	r3, r7
    b0fe:	d001      	beq.n	b104 <z_set_prio+0x84>
    b100:	681b      	ldr	r3, [r3, #0]
    b102:	e7e5      	b.n	b0d0 <z_set_prio+0x50>
	node->prev = tail;
    b104:	e9c4 2700 	strd	r2, r7, [r4]
	tail->next = node;
    b108:	603c      	str	r4, [r7, #0]
	list->tail = node;
    b10a:	62c4      	str	r4, [r0, #44]	; 0x2c
}
    b10c:	e7ed      	b.n	b0ea <z_set_prio+0x6a>
			thread->base.prio = prio;
    b10e:	73a1      	strb	r1, [r4, #14]
    b110:	2000      	movs	r0, #0
    b112:	e7ee      	b.n	b0f2 <z_set_prio+0x72>
    b114:	20000fcc 	.word	0x20000fcc

0000b118 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    b118:	4b04      	ldr	r3, [pc, #16]	; (b12c <z_sched_init+0x14>)
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    b11a:	2100      	movs	r1, #0
    b11c:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
    b120:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
    b124:	4608      	mov	r0, r1
    b126:	f7ff bdbd 	b.w	aca4 <k_sched_time_slice_set>
    b12a:	bf00      	nop
    b12c:	20000fcc 	.word	0x20000fcc

0000b130 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    b130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    b132:	f04f 0320 	mov.w	r3, #32
    b136:	f3ef 8411 	mrs	r4, BASEPRI
    b13a:	f383 8811 	msr	BASEPRI, r3
    b13e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(&_kernel.ready_q.runq,
    b142:	491b      	ldr	r1, [pc, #108]	; (b1b0 <z_impl_k_yield+0x80>)
    b144:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    b146:	7b43      	ldrb	r3, [r0, #13]
    b148:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    b14c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    b14e:	f010 fe53 	bl	1bdf8 <sys_dlist_remove>
			       _current);
	}
	queue_thread(&_kernel.ready_q.runq, _current);
    b152:	688a      	ldr	r2, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    b154:	7b53      	ldrb	r3, [r2, #13]
	return list->head == list;
    b156:	4608      	mov	r0, r1
    b158:	f063 037f 	orn	r3, r3, #127	; 0x7f
    b15c:	7353      	strb	r3, [r2, #13]
    b15e:	f850 3f28 	ldr.w	r3, [r0, #40]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    b162:	6ace      	ldr	r6, [r1, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b164:	4283      	cmp	r3, r0
    b166:	bf08      	it	eq
    b168:	2300      	moveq	r3, #0
    b16a:	2b00      	cmp	r3, #0
    b16c:	bf38      	it	cc
    b16e:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b170:	b1cb      	cbz	r3, b1a6 <z_impl_k_yield+0x76>
	int32_t b1 = thread_1->base.prio;
    b172:	f992 700e 	ldrsb.w	r7, [r2, #14]
	int32_t b2 = thread_2->base.prio;
    b176:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
    b17a:	42af      	cmp	r7, r5
    b17c:	d00f      	beq.n	b19e <z_impl_k_yield+0x6e>
		return b2 - b1;
    b17e:	1bed      	subs	r5, r5, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
    b180:	2d00      	cmp	r5, #0
    b182:	dd0c      	ble.n	b19e <z_impl_k_yield+0x6e>
	sys_dnode_t *const prev = successor->prev;
    b184:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    b186:	e9c2 3100 	strd	r3, r1, [r2]
	prev->next = node;
    b18a:	600a      	str	r2, [r1, #0]
	successor->prev = node;
    b18c:	605a      	str	r2, [r3, #4]
	update_cache(1);
    b18e:	2001      	movs	r0, #1
    b190:	f7ff fde0 	bl	ad54 <update_cache>
    b194:	4620      	mov	r0, r4
	z_swap(&sched_spinlock, key);
}
    b196:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    b19a:	f7fb bb3f 	b.w	681c <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    b19e:	42b3      	cmp	r3, r6
    b1a0:	d001      	beq.n	b1a6 <z_impl_k_yield+0x76>
    b1a2:	681b      	ldr	r3, [r3, #0]
    b1a4:	e7e4      	b.n	b170 <z_impl_k_yield+0x40>
	node->prev = tail;
    b1a6:	e9c2 0600 	strd	r0, r6, [r2]
	tail->next = node;
    b1aa:	6032      	str	r2, [r6, #0]
	list->tail = node;
    b1ac:	62ca      	str	r2, [r1, #44]	; 0x2c
}
    b1ae:	e7ee      	b.n	b18e <z_impl_k_yield+0x5e>
    b1b0:	20000fcc 	.word	0x20000fcc

0000b1b4 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
    b1b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b1b8:	4604      	mov	r4, r0
    b1ba:	460d      	mov	r5, r1
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    b1bc:	ea54 0105 	orrs.w	r1, r4, r5
    b1c0:	d104      	bne.n	b1cc <z_tick_sleep+0x18>
	z_impl_k_yield();
    b1c2:	f7ff ffb5 	bl	b130 <z_impl_k_yield>
		k_yield();
		return 0;
    b1c6:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
    b1c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
    b1cc:	f06f 0101 	mvn.w	r1, #1
    b1d0:	1a0a      	subs	r2, r1, r0
    b1d2:	f04f 31ff 	mov.w	r1, #4294967295
    b1d6:	eb61 0305 	sbc.w	r3, r1, r5
    b1da:	2a01      	cmp	r2, #1
    b1dc:	f173 0300 	sbcs.w	r3, r3, #0
    b1e0:	da2a      	bge.n	b238 <z_tick_sleep+0x84>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    b1e2:	f010 ff34 	bl	1c04e <sys_clock_tick_get_32>
    b1e6:	1906      	adds	r6, r0, r4
    b1e8:	f04f 0320 	mov.w	r3, #32
    b1ec:	f3ef 8811 	mrs	r8, BASEPRI
    b1f0:	f383 8811 	msr	BASEPRI, r3
    b1f4:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    b1f8:	4f11      	ldr	r7, [pc, #68]	; (b240 <z_tick_sleep+0x8c>)
    b1fa:	4b12      	ldr	r3, [pc, #72]	; (b244 <z_tick_sleep+0x90>)
    b1fc:	68b8      	ldr	r0, [r7, #8]
    b1fe:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    b200:	f7ff fdc8 	bl	ad94 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    b204:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    b206:	4910      	ldr	r1, [pc, #64]	; (b248 <z_tick_sleep+0x94>)
    b208:	4622      	mov	r2, r4
    b20a:	462b      	mov	r3, r5
    b20c:	3018      	adds	r0, #24
    b20e:	f000 f91b 	bl	b448 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    b212:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    b214:	7b53      	ldrb	r3, [r2, #13]
    b216:	f043 0310 	orr.w	r3, r3, #16
    b21a:	7353      	strb	r3, [r2, #13]
    b21c:	4640      	mov	r0, r8
    b21e:	f7fb fafd 	bl	681c <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    b222:	f010 ff14 	bl	1c04e <sys_clock_tick_get_32>
    b226:	1a30      	subs	r0, r6, r0
    b228:	eb66 0106 	sbc.w	r1, r6, r6
	if (ticks > 0) {
    b22c:	2801      	cmp	r0, #1
    b22e:	f171 0300 	sbcs.w	r3, r1, #0
		return ticks;
    b232:	bfb8      	it	lt
    b234:	2000      	movlt	r0, #0
    b236:	e7c7      	b.n	b1c8 <z_tick_sleep+0x14>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    b238:	f06f 0601 	mvn.w	r6, #1
    b23c:	1a36      	subs	r6, r6, r0
    b23e:	e7d3      	b.n	b1e8 <z_tick_sleep+0x34>
    b240:	20000fcc 	.word	0x20000fcc
    b244:	20001004 	.word	0x20001004
    b248:	0001bef7 	.word	0x0001bef7

0000b24c <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    b24c:	b508      	push	{r3, lr}
    b24e:	460b      	mov	r3, r1
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    b250:	3301      	adds	r3, #1
    b252:	bf08      	it	eq
    b254:	f1b0 3fff 	cmpeq.w	r0, #4294967295
    b258:	d106      	bne.n	b268 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    b25a:	4b08      	ldr	r3, [pc, #32]	; (b27c <z_impl_k_sleep+0x30>)
    b25c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    b25e:	f7ff fdeb 	bl	ae38 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    b262:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    b266:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    b268:	f7ff ffa4 	bl	b1b4 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
    b26c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    b270:	fb80 2303 	smull	r2, r3, r0, r3
    b274:	0bd0      	lsrs	r0, r2, #15
    b276:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    b27a:	e7f4      	b.n	b266 <z_impl_k_sleep+0x1a>
    b27c:	20000fcc 	.word	0x20000fcc

0000b280 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    b280:	4b01      	ldr	r3, [pc, #4]	; (b288 <z_impl_k_current_get+0x8>)
    b282:	6898      	ldr	r0, [r3, #8]
    b284:	4770      	bx	lr
    b286:	bf00      	nop
    b288:	20000fcc 	.word	0x20000fcc

0000b28c <z_impl_k_is_preempt_thread>:
    b28c:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/k_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
    b290:	b93b      	cbnz	r3, b2a2 <z_impl_k_is_preempt_thread+0x16>
    b292:	4b05      	ldr	r3, [pc, #20]	; (b2a8 <z_impl_k_is_preempt_thread+0x1c>)
    b294:	689b      	ldr	r3, [r3, #8]
    b296:	89d8      	ldrh	r0, [r3, #14]
    b298:	287f      	cmp	r0, #127	; 0x7f
    b29a:	bf8c      	ite	hi
    b29c:	2000      	movhi	r0, #0
    b29e:	2001      	movls	r0, #1
    b2a0:	4770      	bx	lr
    b2a2:	2000      	movs	r0, #0
}
    b2a4:	4770      	bx	lr
    b2a6:	bf00      	nop
    b2a8:	20000fcc 	.word	0x20000fcc

0000b2ac <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    b2ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b2b0:	4604      	mov	r4, r0
    b2b2:	f04f 0320 	mov.w	r3, #32
    b2b6:	f3ef 8611 	mrs	r6, BASEPRI
    b2ba:	f383 8811 	msr	BASEPRI, r3
    b2be:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    b2c2:	7b43      	ldrb	r3, [r0, #13]
    b2c4:	071a      	lsls	r2, r3, #28
    b2c6:	d505      	bpl.n	b2d4 <z_thread_abort+0x28>
	__asm__ volatile(
    b2c8:	f386 8811 	msr	BASEPRI, r6
    b2cc:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    b2d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    b2d4:	f023 0220 	bic.w	r2, r3, #32
    b2d8:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    b2dc:	09d2      	lsrs	r2, r2, #7
    b2de:	d120      	bne.n	b322 <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    b2e0:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    b2e2:	68a3      	ldr	r3, [r4, #8]
    b2e4:	b113      	cbz	r3, b2ec <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
    b2e6:	4620      	mov	r0, r4
    b2e8:	f010 fd8e 	bl	1be08 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    b2ec:	f104 0018 	add.w	r0, r4, #24
    b2f0:	f010 fe6d 	bl	1bfce <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    b2f4:	f104 0758 	add.w	r7, r4, #88	; 0x58
    b2f8:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    b2fc:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b2fe:	42bd      	cmp	r5, r7
    b300:	d000      	beq.n	b304 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    b302:	b9b5      	cbnz	r5, b332 <z_thread_abort+0x86>
		update_cache(1);
    b304:	2001      	movs	r0, #1
    b306:	f7ff fd25 	bl	ad54 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    b30a:	4b10      	ldr	r3, [pc, #64]	; (b34c <z_thread_abort+0xa0>)
    b30c:	689b      	ldr	r3, [r3, #8]
    b30e:	42a3      	cmp	r3, r4
    b310:	d1da      	bne.n	b2c8 <z_thread_abort+0x1c>
    b312:	f3ef 8305 	mrs	r3, IPSR
    b316:	2b00      	cmp	r3, #0
    b318:	d1d6      	bne.n	b2c8 <z_thread_abort+0x1c>
    b31a:	4630      	mov	r0, r6
    b31c:	f7fb fa7e 	bl	681c <arch_swap>
	return ret;
    b320:	e7d2      	b.n	b2c8 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    b322:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    b326:	f043 0308 	orr.w	r3, r3, #8
    b32a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    b32c:	f010 fd64 	bl	1bdf8 <sys_dlist_remove>
}
    b330:	e7d7      	b.n	b2e2 <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
    b332:	4628      	mov	r0, r5
    b334:	f010 fd68 	bl	1be08 <unpend_thread_no_timeout>
    b338:	f105 0018 	add.w	r0, r5, #24
    b33c:	f010 fe47 	bl	1bfce <z_abort_timeout>
    b340:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    b344:	4628      	mov	r0, r5
    b346:	f7ff fe45 	bl	afd4 <ready_thread>
    b34a:	e7d7      	b.n	b2fc <z_thread_abort+0x50>
    b34c:	20000fcc 	.word	0x20000fcc

0000b350 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    b350:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    b352:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
    b356:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    b358:	e9cd 6700 	strd	r6, r7, [sp]
    b35c:	f7ff fd58 	bl	ae10 <z_pend_curr>

	if (data != NULL) {
    b360:	b11c      	cbz	r4, b36a <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
    b362:	4b03      	ldr	r3, [pc, #12]	; (b370 <z_sched_wait+0x20>)
    b364:	689b      	ldr	r3, [r3, #8]
    b366:	695b      	ldr	r3, [r3, #20]
    b368:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    b36a:	b002      	add	sp, #8
    b36c:	bdd0      	pop	{r4, r6, r7, pc}
    b36e:	bf00      	nop
    b370:	20000fcc 	.word	0x20000fcc

0000b374 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    b374:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    b376:	4806      	ldr	r0, [pc, #24]	; (b390 <z_data_copy+0x1c>)
    b378:	4a06      	ldr	r2, [pc, #24]	; (b394 <z_data_copy+0x20>)
    b37a:	4907      	ldr	r1, [pc, #28]	; (b398 <z_data_copy+0x24>)
    b37c:	1a12      	subs	r2, r2, r0
    b37e:	f010 feaf 	bl	1c0e0 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    b382:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    b386:	4a05      	ldr	r2, [pc, #20]	; (b39c <z_data_copy+0x28>)
    b388:	4905      	ldr	r1, [pc, #20]	; (b3a0 <z_data_copy+0x2c>)
    b38a:	4806      	ldr	r0, [pc, #24]	; (b3a4 <z_data_copy+0x30>)
    b38c:	f010 bea8 	b.w	1c0e0 <memcpy>
    b390:	20000000 	.word	0x20000000
    b394:	20000268 	.word	0x20000268
    b398:	0001e2e0 	.word	0x0001e2e0
    b39c:	00000000 	.word	0x00000000
    b3a0:	0001e2e0 	.word	0x0001e2e0
    b3a4:	20000000 	.word	0x20000000

0000b3a8 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    b3a8:	4b03      	ldr	r3, [pc, #12]	; (b3b8 <elapsed+0x10>)
    b3aa:	681b      	ldr	r3, [r3, #0]
    b3ac:	b90b      	cbnz	r3, b3b2 <elapsed+0xa>
    b3ae:	f7fb b943 	b.w	6638 <sys_clock_elapsed>
}
    b3b2:	2000      	movs	r0, #0
    b3b4:	4770      	bx	lr
    b3b6:	bf00      	nop
    b3b8:	20001010 	.word	0x20001010

0000b3bc <remove_timeout>:
{
    b3bc:	b530      	push	{r4, r5, lr}
    b3be:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    b3c0:	b168      	cbz	r0, b3de <remove_timeout+0x22>
    b3c2:	4a0a      	ldr	r2, [pc, #40]	; (b3ec <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
    b3c4:	6852      	ldr	r2, [r2, #4]
    b3c6:	4290      	cmp	r0, r2
    b3c8:	d009      	beq.n	b3de <remove_timeout+0x22>
	if (next(t) != NULL) {
    b3ca:	b143      	cbz	r3, b3de <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    b3cc:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    b3d0:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    b3d4:	1912      	adds	r2, r2, r4
    b3d6:	eb45 0101 	adc.w	r1, r5, r1
    b3da:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    b3de:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
    b3e0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    b3e2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    b3e4:	2300      	movs	r3, #0
	node->prev = NULL;
    b3e6:	e9c0 3300 	strd	r3, r3, [r0]
}
    b3ea:	bd30      	pop	{r4, r5, pc}
    b3ec:	200000f8 	.word	0x200000f8

0000b3f0 <next_timeout>:

static int32_t next_timeout(void)
{
    b3f0:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    b3f2:	4b13      	ldr	r3, [pc, #76]	; (b440 <next_timeout+0x50>)
    b3f4:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b3f6:	429c      	cmp	r4, r3
    b3f8:	bf08      	it	eq
    b3fa:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    b3fc:	f7ff ffd4 	bl	b3a8 <elapsed>
    b400:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
    b402:	b1bc      	cbz	r4, b434 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    b404:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    b408:	1b40      	subs	r0, r0, r5
    b40a:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    b40e:	2801      	cmp	r0, #1
    b410:	f171 0300 	sbcs.w	r3, r1, #0
    b414:	db11      	blt.n	b43a <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    b416:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    b41a:	2300      	movs	r3, #0
    b41c:	4282      	cmp	r2, r0
    b41e:	eb73 0401 	sbcs.w	r4, r3, r1
    b422:	da00      	bge.n	b426 <next_timeout+0x36>
    b424:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    b426:	4b07      	ldr	r3, [pc, #28]	; (b444 <next_timeout+0x54>)
    b428:	691b      	ldr	r3, [r3, #16]
    b42a:	b113      	cbz	r3, b432 <next_timeout+0x42>
    b42c:	4298      	cmp	r0, r3
    b42e:	bfa8      	it	ge
    b430:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    b432:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    b434:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    b438:	e7f5      	b.n	b426 <next_timeout+0x36>
    b43a:	2000      	movs	r0, #0
    b43c:	e7f3      	b.n	b426 <next_timeout+0x36>
    b43e:	bf00      	nop
    b440:	200000f8 	.word	0x200000f8
    b444:	20000fcc 	.word	0x20000fcc

0000b448 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    b448:	f1b3 3fff 	cmp.w	r3, #4294967295
    b44c:	bf08      	it	eq
    b44e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    b452:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b456:	4604      	mov	r4, r0
    b458:	4692      	mov	sl, r2
    b45a:	469b      	mov	fp, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    b45c:	d073      	beq.n	b546 <z_add_timeout+0xfe>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    b45e:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    b460:	f04f 0320 	mov.w	r3, #32
    b464:	f3ef 8511 	mrs	r5, BASEPRI
    b468:	f383 8811 	msr	BASEPRI, r3
    b46c:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    b470:	f06f 0301 	mvn.w	r3, #1
    b474:	ebb3 080a 	subs.w	r8, r3, sl
    b478:	f04f 32ff 	mov.w	r2, #4294967295
    b47c:	eb62 090b 	sbc.w	r9, r2, fp
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    b480:	f1b8 0f00 	cmp.w	r8, #0
    b484:	f179 0100 	sbcs.w	r1, r9, #0
    b488:	db1c      	blt.n	b4c4 <z_add_timeout+0x7c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    b48a:	4830      	ldr	r0, [pc, #192]	; (b54c <z_add_timeout+0x104>)
    b48c:	e9d0 1000 	ldrd	r1, r0, [r0]
    b490:	1a5b      	subs	r3, r3, r1
    b492:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
    b496:	ebb3 060a 	subs.w	r6, r3, sl
    b49a:	eb62 070b 	sbc.w	r7, r2, fp
    b49e:	2e01      	cmp	r6, #1
    b4a0:	f177 0300 	sbcs.w	r3, r7, #0
    b4a4:	bfbc      	itt	lt
    b4a6:	2601      	movlt	r6, #1
    b4a8:	2700      	movlt	r7, #0
    b4aa:	e9c4 6704 	strd	r6, r7, [r4, #16]
	return list->head == list;
    b4ae:	4a28      	ldr	r2, [pc, #160]	; (b550 <z_add_timeout+0x108>)
    b4b0:	e9d2 3c00 	ldrd	r3, ip, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b4b4:	4293      	cmp	r3, r2
    b4b6:	d11e      	bne.n	b4f6 <z_add_timeout+0xae>
	node->prev = tail;
    b4b8:	e9c4 2c00 	strd	r2, ip, [r4]
	tail->next = node;
    b4bc:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    b4c0:	6054      	str	r4, [r2, #4]
}
    b4c2:	e02d      	b.n	b520 <z_add_timeout+0xd8>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    b4c4:	f7ff ff70 	bl	b3a8 <elapsed>
    b4c8:	f11a 0301 	adds.w	r3, sl, #1
    b4cc:	9300      	str	r3, [sp, #0]
    b4ce:	f14b 0300 	adc.w	r3, fp, #0
    b4d2:	9301      	str	r3, [sp, #4]
    b4d4:	e9dd 2300 	ldrd	r2, r3, [sp]
    b4d8:	1812      	adds	r2, r2, r0
    b4da:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
    b4de:	e9c4 2304 	strd	r2, r3, [r4, #16]
    b4e2:	e7e4      	b.n	b4ae <z_add_timeout+0x66>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    b4e4:	ebb6 0008 	subs.w	r0, r6, r8
    b4e8:	eb67 0109 	sbc.w	r1, r7, r9
	return (node == list->tail) ? NULL : node->next;
    b4ec:	4563      	cmp	r3, ip
    b4ee:	e9c4 0104 	strd	r0, r1, [r4, #16]
    b4f2:	d0e1      	beq.n	b4b8 <z_add_timeout+0x70>
    b4f4:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    b4f6:	2b00      	cmp	r3, #0
    b4f8:	d0de      	beq.n	b4b8 <z_add_timeout+0x70>
			if (t->dticks > to->dticks) {
    b4fa:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
    b4fe:	e9d4 6704 	ldrd	r6, r7, [r4, #16]
    b502:	4546      	cmp	r6, r8
    b504:	eb77 0109 	sbcs.w	r1, r7, r9
    b508:	daec      	bge.n	b4e4 <z_add_timeout+0x9c>
				t->dticks -= to->dticks;
    b50a:	ebb8 0006 	subs.w	r0, r8, r6
    b50e:	eb69 0107 	sbc.w	r1, r9, r7
    b512:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    b516:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    b518:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    b51c:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    b51e:	605c      	str	r4, [r3, #4]
	return list->head == list;
    b520:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b522:	4293      	cmp	r3, r2
    b524:	d00b      	beq.n	b53e <z_add_timeout+0xf6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    b526:	429c      	cmp	r4, r3
    b528:	d109      	bne.n	b53e <z_add_timeout+0xf6>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    b52a:	f7ff ff61 	bl	b3f0 <next_timeout>

			if (next_time == 0 ||
    b52e:	b118      	cbz	r0, b538 <z_add_timeout+0xf0>
			    _current_cpu->slice_ticks != next_time) {
    b530:	4b08      	ldr	r3, [pc, #32]	; (b554 <z_add_timeout+0x10c>)
			if (next_time == 0 ||
    b532:	691b      	ldr	r3, [r3, #16]
    b534:	4283      	cmp	r3, r0
    b536:	d002      	beq.n	b53e <z_add_timeout+0xf6>
				sys_clock_set_timeout(next_time, false);
    b538:	2100      	movs	r1, #0
    b53a:	f7fb f84b 	bl	65d4 <sys_clock_set_timeout>
	__asm__ volatile(
    b53e:	f385 8811 	msr	BASEPRI, r5
    b542:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    b546:	b003      	add	sp, #12
    b548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b54c:	20000470 	.word	0x20000470
    b550:	200000f8 	.word	0x200000f8
    b554:	20000fcc 	.word	0x20000fcc

0000b558 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    b558:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b55c:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    b55e:	f7ff fcf7 	bl	af50 <z_time_slice>
	__asm__ volatile(
    b562:	f04f 0320 	mov.w	r3, #32
    b566:	f3ef 8411 	mrs	r4, BASEPRI
    b56a:	f383 8811 	msr	BASEPRI, r3
    b56e:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    b572:	4d2c      	ldr	r5, [pc, #176]	; (b624 <sys_clock_announce+0xcc>)
    b574:	f8df a0b0 	ldr.w	sl, [pc, #176]	; b628 <sys_clock_announce+0xd0>
	return list->head == list;
    b578:	f8df b0b0 	ldr.w	fp, [pc, #176]	; b62c <sys_clock_announce+0xd4>
    b57c:	602e      	str	r6, [r5, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    b57e:	4651      	mov	r1, sl
    b580:	f8d5 c000 	ldr.w	ip, [r5]
    b584:	f8db 0000 	ldr.w	r0, [fp]
    b588:	4662      	mov	r2, ip
    b58a:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b58c:	4558      	cmp	r0, fp
    b58e:	e9da 8900 	ldrd	r8, r9, [sl]
    b592:	e9cd 2300 	strd	r2, r3, [sp]
    b596:	d00d      	beq.n	b5b4 <sys_clock_announce+0x5c>
    b598:	b160      	cbz	r0, b5b4 <sys_clock_announce+0x5c>
    b59a:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
    b59e:	45b4      	cmp	ip, r6
    b5a0:	41bb      	sbcs	r3, r7
    b5a2:	da1e      	bge.n	b5e2 <sys_clock_announce+0x8a>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    b5a4:	9b00      	ldr	r3, [sp, #0]
    b5a6:	ebb6 0c03 	subs.w	ip, r6, r3
    b5aa:	9b01      	ldr	r3, [sp, #4]
    b5ac:	eb67 0603 	sbc.w	r6, r7, r3
    b5b0:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
    b5b4:	9b00      	ldr	r3, [sp, #0]
    b5b6:	eb13 0208 	adds.w	r2, r3, r8
    b5ba:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
    b5bc:	f04f 0600 	mov.w	r6, #0
	curr_tick += announce_remaining;
    b5c0:	eb43 0309 	adc.w	r3, r3, r9
    b5c4:	e9c1 2300 	strd	r2, r3, [r1]
	announce_remaining = 0;
    b5c8:	602e      	str	r6, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
    b5ca:	f7ff ff11 	bl	b3f0 <next_timeout>
    b5ce:	4631      	mov	r1, r6
    b5d0:	f7fb f800 	bl	65d4 <sys_clock_set_timeout>
	__asm__ volatile(
    b5d4:	f384 8811 	msr	BASEPRI, r4
    b5d8:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    b5dc:	b003      	add	sp, #12
    b5de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
    b5e2:	eb18 0806 	adds.w	r8, r8, r6
		t->dticks = 0;
    b5e6:	f04f 0200 	mov.w	r2, #0
    b5ea:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
    b5ee:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
    b5f2:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
    b5f6:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
    b5fa:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
    b5fe:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
    b600:	f7ff fedc 	bl	b3bc <remove_timeout>
    b604:	f384 8811 	msr	BASEPRI, r4
    b608:	f3bf 8f6f 	isb	sy
		t->fn(t);
    b60c:	6883      	ldr	r3, [r0, #8]
    b60e:	4798      	blx	r3
	__asm__ volatile(
    b610:	f04f 0320 	mov.w	r3, #32
    b614:	f3ef 8411 	mrs	r4, BASEPRI
    b618:	f383 8811 	msr	BASEPRI, r3
    b61c:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
    b620:	4901      	ldr	r1, [pc, #4]	; (b628 <sys_clock_announce+0xd0>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    b622:	e7ad      	b.n	b580 <sys_clock_announce+0x28>
    b624:	20001010 	.word	0x20001010
    b628:	20000470 	.word	0x20000470
    b62c:	200000f8 	.word	0x200000f8

0000b630 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    b630:	b510      	push	{r4, lr}
    b632:	f04f 0320 	mov.w	r3, #32
    b636:	f3ef 8411 	mrs	r4, BASEPRI
    b63a:	f383 8811 	msr	BASEPRI, r3
    b63e:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    b642:	f7fa fff9 	bl	6638 <sys_clock_elapsed>
    b646:	4b06      	ldr	r3, [pc, #24]	; (b660 <sys_clock_tick_get+0x30>)
    b648:	e9d3 2300 	ldrd	r2, r3, [r3]
    b64c:	1812      	adds	r2, r2, r0
    b64e:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
    b652:	f384 8811 	msr	BASEPRI, r4
    b656:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    b65a:	4610      	mov	r0, r2
    b65c:	4619      	mov	r1, r3
    b65e:	bd10      	pop	{r4, pc}
    b660:	20000470 	.word	0x20000470

0000b664 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    b664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    b666:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
    b66a:	1c56      	adds	r6, r2, #1
    b66c:	f143 0700 	adc.w	r7, r3, #0
    b670:	2f00      	cmp	r7, #0
    b672:	bf08      	it	eq
    b674:	2e02      	cmpeq	r6, #2
{
    b676:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    b678:	d302      	bcc.n	b680 <z_timer_expiration_handler+0x1c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    b67a:	490d      	ldr	r1, [pc, #52]	; (b6b0 <z_timer_expiration_handler+0x4c>)
    b67c:	f7ff fee4 	bl	b448 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    b680:	6b23      	ldr	r3, [r4, #48]	; 0x30
    b682:	3301      	adds	r3, #1
    b684:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    b686:	6a23      	ldr	r3, [r4, #32]
    b688:	b10b      	cbz	r3, b68e <z_timer_expiration_handler+0x2a>
		timer->expiry_fn(timer);
    b68a:	4620      	mov	r0, r4
    b68c:	4798      	blx	r3
	return list->head == list;
    b68e:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b692:	42a5      	cmp	r5, r4
    b694:	d00a      	beq.n	b6ac <z_timer_expiration_handler+0x48>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    b696:	b14d      	cbz	r5, b6ac <z_timer_expiration_handler+0x48>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
    b698:	4628      	mov	r0, r5
    b69a:	f010 fbbf 	bl	1be1c <z_unpend_thread_no_timeout>
    b69e:	2300      	movs	r3, #0
    b6a0:	67ab      	str	r3, [r5, #120]	; 0x78

	arch_thread_return_value_set(thread, 0);

	z_ready_thread(thread);
    b6a2:	4628      	mov	r0, r5
}
    b6a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
    b6a8:	f010 bc15 	b.w	1bed6 <z_ready_thread>
}
    b6ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b6ae:	bf00      	nop
    b6b0:	0000b665 	.word	0x0000b665

0000b6b4 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    b6b4:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
    b6b8:	4619      	mov	r1, r3
    b6ba:	4606      	mov	r6, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    b6bc:	1c4c      	adds	r4, r1, #1
{
    b6be:	4610      	mov	r0, r2
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    b6c0:	bf08      	it	eq
    b6c2:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    b6c6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    b6ca:	4680      	mov	r8, r0
    b6cc:	4689      	mov	r9, r1
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    b6ce:	d04c      	beq.n	b76a <z_impl_k_timer_start+0xb6>
    b6d0:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    b6d2:	1c6b      	adds	r3, r5, #1
    b6d4:	bf08      	it	eq
    b6d6:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    b6da:	4614      	mov	r4, r2
    b6dc:	d019      	beq.n	b712 <z_impl_k_timer_start+0x5e>
    b6de:	ea54 0305 	orrs.w	r3, r4, r5
    b6e2:	d016      	beq.n	b712 <z_impl_k_timer_start+0x5e>
	    Z_TICK_ABS(period.ticks) < 0) {
    b6e4:	f06f 0301 	mvn.w	r3, #1
    b6e8:	ebb3 0a02 	subs.w	sl, r3, r2
    b6ec:	f04f 33ff 	mov.w	r3, #4294967295
    b6f0:	eb63 0b05 	sbc.w	fp, r3, r5
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    b6f4:	f1ba 0f00 	cmp.w	sl, #0
    b6f8:	f17b 0300 	sbcs.w	r3, fp, #0
    b6fc:	da09      	bge.n	b712 <z_impl_k_timer_start+0x5e>
		period.ticks = MAX(period.ticks - 1, 1);
    b6fe:	f112 34ff 	adds.w	r4, r2, #4294967295
    b702:	f145 35ff 	adc.w	r5, r5, #4294967295
    b706:	2c01      	cmp	r4, #1
    b708:	f175 0300 	sbcs.w	r3, r5, #0
    b70c:	bfbc      	itt	lt
    b70e:	2401      	movlt	r4, #1
    b710:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    b712:	f06f 0301 	mvn.w	r3, #1
    b716:	1a1b      	subs	r3, r3, r0
    b718:	9300      	str	r3, [sp, #0]
    b71a:	f04f 33ff 	mov.w	r3, #4294967295
    b71e:	eb63 0301 	sbc.w	r3, r3, r1
    b722:	9301      	str	r3, [sp, #4]
    b724:	e9dd 2300 	ldrd	r2, r3, [sp]
    b728:	2a00      	cmp	r2, #0
    b72a:	f173 0300 	sbcs.w	r3, r3, #0
    b72e:	da0c      	bge.n	b74a <z_impl_k_timer_start+0x96>
		duration.ticks = MAX(duration.ticks - 1, 0);
    b730:	f110 38ff 	adds.w	r8, r0, #4294967295
    b734:	f141 39ff 	adc.w	r9, r1, #4294967295
    b738:	f1b8 0f00 	cmp.w	r8, #0
    b73c:	f179 0300 	sbcs.w	r3, r9, #0
    b740:	bfbc      	itt	lt
    b742:	f04f 0800 	movlt.w	r8, #0
    b746:	f04f 0900 	movlt.w	r9, #0
	}

	(void)z_abort_timeout(&timer->timeout);
    b74a:	4630      	mov	r0, r6
    b74c:	f010 fc3f 	bl	1bfce <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    b750:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    b752:	4907      	ldr	r1, [pc, #28]	; (b770 <z_impl_k_timer_start+0xbc>)
	timer->status = 0U;
    b754:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    b756:	4642      	mov	r2, r8
    b758:	464b      	mov	r3, r9
    b75a:	4630      	mov	r0, r6
	timer->period = period;
    b75c:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
    b760:	b002      	add	sp, #8
    b762:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    b766:	f7ff be6f 	b.w	b448 <z_add_timeout>
}
    b76a:	b002      	add	sp, #8
    b76c:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
    b770:	0000b665 	.word	0x0000b665

0000b774 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    b774:	4a02      	ldr	r2, [pc, #8]	; (b780 <boot_banner+0xc>)
    b776:	4903      	ldr	r1, [pc, #12]	; (b784 <boot_banner+0x10>)
    b778:	4803      	ldr	r0, [pc, #12]	; (b788 <boot_banner+0x14>)
    b77a:	f00f b805 	b.w	1a788 <printk>
    b77e:	bf00      	nop
    b780:	0001d823 	.word	0x0001d823
    b784:	0001e165 	.word	0x0001e165
    b788:	0001e174 	.word	0x0001e174

0000b78c <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    b78c:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    b78e:	4c06      	ldr	r4, [pc, #24]	; (b7a8 <statics_init+0x1c>)
    b790:	4d06      	ldr	r5, [pc, #24]	; (b7ac <statics_init+0x20>)
    b792:	42ac      	cmp	r4, r5
    b794:	d301      	bcc.n	b79a <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
    b796:	2000      	movs	r0, #0
    b798:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    b79a:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    b79e:	4620      	mov	r0, r4
    b7a0:	f010 fc88 	bl	1c0b4 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    b7a4:	3414      	adds	r4, #20
    b7a6:	e7f4      	b.n	b792 <statics_init+0x6>
    b7a8:	20000208 	.word	0x20000208
    b7ac:	20000208 	.word	0x20000208

0000b7b0 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
    b7b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
    b7b2:	4b09      	ldr	r3, [pc, #36]	; (b7d8 <k_sys_work_q_init+0x28>)
    b7b4:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    b7b6:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
    b7b8:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
    b7ba:	9300      	str	r3, [sp, #0]
    b7bc:	4907      	ldr	r1, [pc, #28]	; (b7dc <k_sys_work_q_init+0x2c>)
    b7be:	4808      	ldr	r0, [pc, #32]	; (b7e0 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
    b7c0:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
    b7c4:	f04f 33ff 	mov.w	r3, #4294967295
    b7c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    b7cc:	f7ff fa1c 	bl	ac08 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    b7d0:	4620      	mov	r0, r4
    b7d2:	b004      	add	sp, #16
    b7d4:	bd10      	pop	{r4, pc}
    b7d6:	bf00      	nop
    b7d8:	0001e19b 	.word	0x0001e19b
    b7dc:	20003500 	.word	0x20003500
    b7e0:	20000478 	.word	0x20000478

0000b7e4 <nrf_cc3xx_platform_init_no_rng>:
    b7e4:	b510      	push	{r4, lr}
    b7e6:	4c0a      	ldr	r4, [pc, #40]	; (b810 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    b7e8:	6823      	ldr	r3, [r4, #0]
    b7ea:	b11b      	cbz	r3, b7f4 <nrf_cc3xx_platform_init_no_rng+0x10>
    b7ec:	2301      	movs	r3, #1
    b7ee:	6023      	str	r3, [r4, #0]
    b7f0:	2000      	movs	r0, #0
    b7f2:	bd10      	pop	{r4, pc}
    b7f4:	f000 f8d6 	bl	b9a4 <CC_LibInitNoRng>
    b7f8:	2800      	cmp	r0, #0
    b7fa:	d0f7      	beq.n	b7ec <nrf_cc3xx_platform_init_no_rng+0x8>
    b7fc:	3801      	subs	r0, #1
    b7fe:	2806      	cmp	r0, #6
    b800:	d803      	bhi.n	b80a <nrf_cc3xx_platform_init_no_rng+0x26>
    b802:	4b04      	ldr	r3, [pc, #16]	; (b814 <nrf_cc3xx_platform_init_no_rng+0x30>)
    b804:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    b808:	bd10      	pop	{r4, pc}
    b80a:	4803      	ldr	r0, [pc, #12]	; (b818 <nrf_cc3xx_platform_init_no_rng+0x34>)
    b80c:	bd10      	pop	{r4, pc}
    b80e:	bf00      	nop
    b810:	20001014 	.word	0x20001014
    b814:	0001d094 	.word	0x0001d094
    b818:	ffff8ffe 	.word	0xffff8ffe

0000b81c <nrf_cc3xx_platform_abort>:
    b81c:	f3bf 8f4f 	dsb	sy
    b820:	4905      	ldr	r1, [pc, #20]	; (b838 <nrf_cc3xx_platform_abort+0x1c>)
    b822:	4b06      	ldr	r3, [pc, #24]	; (b83c <nrf_cc3xx_platform_abort+0x20>)
    b824:	68ca      	ldr	r2, [r1, #12]
    b826:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    b82a:	4313      	orrs	r3, r2
    b82c:	60cb      	str	r3, [r1, #12]
    b82e:	f3bf 8f4f 	dsb	sy
    b832:	bf00      	nop
    b834:	e7fd      	b.n	b832 <nrf_cc3xx_platform_abort+0x16>
    b836:	bf00      	nop
    b838:	e000ed00 	.word	0xe000ed00
    b83c:	05fa0004 	.word	0x05fa0004

0000b840 <CC_PalAbort>:
    b840:	b4f0      	push	{r4, r5, r6, r7}
    b842:	4f09      	ldr	r7, [pc, #36]	; (b868 <CC_PalAbort+0x28>)
    b844:	4e09      	ldr	r6, [pc, #36]	; (b86c <CC_PalAbort+0x2c>)
    b846:	4c0a      	ldr	r4, [pc, #40]	; (b870 <CC_PalAbort+0x30>)
    b848:	4a0a      	ldr	r2, [pc, #40]	; (b874 <CC_PalAbort+0x34>)
    b84a:	4d0b      	ldr	r5, [pc, #44]	; (b878 <CC_PalAbort+0x38>)
    b84c:	490b      	ldr	r1, [pc, #44]	; (b87c <CC_PalAbort+0x3c>)
    b84e:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
    b852:	603b      	str	r3, [r7, #0]
    b854:	6852      	ldr	r2, [r2, #4]
    b856:	6033      	str	r3, [r6, #0]
    b858:	6023      	str	r3, [r4, #0]
    b85a:	2400      	movs	r4, #0
    b85c:	602b      	str	r3, [r5, #0]
    b85e:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
    b862:	bcf0      	pop	{r4, r5, r6, r7}
    b864:	4710      	bx	r2
    b866:	bf00      	nop
    b868:	5002b400 	.word	0x5002b400
    b86c:	5002b404 	.word	0x5002b404
    b870:	5002b408 	.word	0x5002b408
    b874:	20000100 	.word	0x20000100
    b878:	5002b40c 	.word	0x5002b40c
    b87c:	5002a000 	.word	0x5002a000

0000b880 <nrf_cc3xx_platform_set_abort>:
    b880:	e9d0 1200 	ldrd	r1, r2, [r0]
    b884:	4b01      	ldr	r3, [pc, #4]	; (b88c <nrf_cc3xx_platform_set_abort+0xc>)
    b886:	e9c3 1200 	strd	r1, r2, [r3]
    b88a:	4770      	bx	lr
    b88c:	20000100 	.word	0x20000100

0000b890 <mutex_free>:
    b890:	b510      	push	{r4, lr}
    b892:	4604      	mov	r4, r0
    b894:	b130      	cbz	r0, b8a4 <mutex_free+0x14>
    b896:	6863      	ldr	r3, [r4, #4]
    b898:	06db      	lsls	r3, r3, #27
    b89a:	d502      	bpl.n	b8a2 <mutex_free+0x12>
    b89c:	2300      	movs	r3, #0
    b89e:	6023      	str	r3, [r4, #0]
    b8a0:	6063      	str	r3, [r4, #4]
    b8a2:	bd10      	pop	{r4, pc}
    b8a4:	4b02      	ldr	r3, [pc, #8]	; (b8b0 <mutex_free+0x20>)
    b8a6:	4803      	ldr	r0, [pc, #12]	; (b8b4 <mutex_free+0x24>)
    b8a8:	685b      	ldr	r3, [r3, #4]
    b8aa:	4798      	blx	r3
    b8ac:	e7f3      	b.n	b896 <mutex_free+0x6>
    b8ae:	bf00      	nop
    b8b0:	20000100 	.word	0x20000100
    b8b4:	0001d0b0 	.word	0x0001d0b0

0000b8b8 <mutex_unlock>:
    b8b8:	b168      	cbz	r0, b8d6 <mutex_unlock+0x1e>
    b8ba:	6843      	ldr	r3, [r0, #4]
    b8bc:	b13b      	cbz	r3, b8ce <mutex_unlock+0x16>
    b8be:	06db      	lsls	r3, r3, #27
    b8c0:	d507      	bpl.n	b8d2 <mutex_unlock+0x1a>
    b8c2:	f3bf 8f5f 	dmb	sy
    b8c6:	2300      	movs	r3, #0
    b8c8:	6003      	str	r3, [r0, #0]
    b8ca:	4618      	mov	r0, r3
    b8cc:	4770      	bx	lr
    b8ce:	4803      	ldr	r0, [pc, #12]	; (b8dc <mutex_unlock+0x24>)
    b8d0:	4770      	bx	lr
    b8d2:	4803      	ldr	r0, [pc, #12]	; (b8e0 <mutex_unlock+0x28>)
    b8d4:	4770      	bx	lr
    b8d6:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    b8da:	4770      	bx	lr
    b8dc:	ffff8fea 	.word	0xffff8fea
    b8e0:	ffff8fe9 	.word	0xffff8fe9

0000b8e4 <mutex_init>:
    b8e4:	b510      	push	{r4, lr}
    b8e6:	4604      	mov	r4, r0
    b8e8:	b120      	cbz	r0, b8f4 <mutex_init+0x10>
    b8ea:	2200      	movs	r2, #0
    b8ec:	2311      	movs	r3, #17
    b8ee:	6022      	str	r2, [r4, #0]
    b8f0:	6063      	str	r3, [r4, #4]
    b8f2:	bd10      	pop	{r4, pc}
    b8f4:	4801      	ldr	r0, [pc, #4]	; (b8fc <mutex_init+0x18>)
    b8f6:	f7ff ffa3 	bl	b840 <CC_PalAbort>
    b8fa:	e7f6      	b.n	b8ea <mutex_init+0x6>
    b8fc:	0001d0d8 	.word	0x0001d0d8

0000b900 <mutex_lock>:
    b900:	b1c0      	cbz	r0, b934 <mutex_lock+0x34>
    b902:	6843      	ldr	r3, [r0, #4]
    b904:	b1a3      	cbz	r3, b930 <mutex_lock+0x30>
    b906:	06db      	lsls	r3, r3, #27
    b908:	d510      	bpl.n	b92c <mutex_lock+0x2c>
    b90a:	2201      	movs	r2, #1
    b90c:	f3bf 8f5b 	dmb	ish
    b910:	e850 3f00 	ldrex	r3, [r0]
    b914:	e840 2100 	strex	r1, r2, [r0]
    b918:	2900      	cmp	r1, #0
    b91a:	d1f9      	bne.n	b910 <mutex_lock+0x10>
    b91c:	f3bf 8f5b 	dmb	ish
    b920:	2b01      	cmp	r3, #1
    b922:	d0f3      	beq.n	b90c <mutex_lock+0xc>
    b924:	f3bf 8f5f 	dmb	sy
    b928:	2000      	movs	r0, #0
    b92a:	4770      	bx	lr
    b92c:	4803      	ldr	r0, [pc, #12]	; (b93c <mutex_lock+0x3c>)
    b92e:	4770      	bx	lr
    b930:	4803      	ldr	r0, [pc, #12]	; (b940 <mutex_lock+0x40>)
    b932:	4770      	bx	lr
    b934:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    b938:	4770      	bx	lr
    b93a:	bf00      	nop
    b93c:	ffff8fe9 	.word	0xffff8fe9
    b940:	ffff8fea 	.word	0xffff8fea

0000b944 <nrf_cc3xx_platform_set_mutexes>:
    b944:	b570      	push	{r4, r5, r6, lr}
    b946:	e9d0 2300 	ldrd	r2, r3, [r0]
    b94a:	4c13      	ldr	r4, [pc, #76]	; (b998 <nrf_cc3xx_platform_set_mutexes+0x54>)
    b94c:	4d13      	ldr	r5, [pc, #76]	; (b99c <nrf_cc3xx_platform_set_mutexes+0x58>)
    b94e:	e9c4 2300 	strd	r2, r3, [r4]
    b952:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
    b956:	e9c4 6302 	strd	r6, r3, [r4, #8]
    b95a:	4b11      	ldr	r3, [pc, #68]	; (b9a0 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    b95c:	6808      	ldr	r0, [r1, #0]
    b95e:	6018      	str	r0, [r3, #0]
    b960:	6848      	ldr	r0, [r1, #4]
    b962:	6058      	str	r0, [r3, #4]
    b964:	6888      	ldr	r0, [r1, #8]
    b966:	6098      	str	r0, [r3, #8]
    b968:	e9d1 6003 	ldrd	r6, r0, [r1, #12]
    b96c:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
    b970:	60de      	str	r6, [r3, #12]
    b972:	6118      	str	r0, [r3, #16]
    b974:	06cb      	lsls	r3, r1, #27
    b976:	d50d      	bpl.n	b994 <nrf_cc3xx_platform_set_mutexes+0x50>
    b978:	2300      	movs	r3, #0
    b97a:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
    b97e:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
    b982:	f505 7088 	add.w	r0, r5, #272	; 0x110
    b986:	4790      	blx	r2
    b988:	6823      	ldr	r3, [r4, #0]
    b98a:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
    b98e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b992:	4718      	bx	r3
    b994:	bd70      	pop	{r4, r5, r6, pc}
    b996:	bf00      	nop
    b998:	20000110 	.word	0x20000110
    b99c:	20001670 	.word	0x20001670
    b9a0:	20000120 	.word	0x20000120

0000b9a4 <CC_LibInitNoRng>:
    b9a4:	b510      	push	{r4, lr}
    b9a6:	f000 f833 	bl	ba10 <CC_HalInit>
    b9aa:	b120      	cbz	r0, b9b6 <CC_LibInitNoRng+0x12>
    b9ac:	2403      	movs	r4, #3
    b9ae:	f000 f867 	bl	ba80 <CC_PalTerminate>
    b9b2:	4620      	mov	r0, r4
    b9b4:	bd10      	pop	{r4, pc}
    b9b6:	f000 f835 	bl	ba24 <CC_PalInit>
    b9ba:	b990      	cbnz	r0, b9e2 <CC_LibInitNoRng+0x3e>
    b9bc:	f000 f8b0 	bl	bb20 <CC_PalPowerSaveModeSelect>
    b9c0:	b990      	cbnz	r0, b9e8 <CC_LibInitNoRng+0x44>
    b9c2:	4b0f      	ldr	r3, [pc, #60]	; (ba00 <CC_LibInitNoRng+0x5c>)
    b9c4:	681b      	ldr	r3, [r3, #0]
    b9c6:	0e1b      	lsrs	r3, r3, #24
    b9c8:	2bf0      	cmp	r3, #240	; 0xf0
    b9ca:	d108      	bne.n	b9de <CC_LibInitNoRng+0x3a>
    b9cc:	4a0d      	ldr	r2, [pc, #52]	; (ba04 <CC_LibInitNoRng+0x60>)
    b9ce:	4b0e      	ldr	r3, [pc, #56]	; (ba08 <CC_LibInitNoRng+0x64>)
    b9d0:	6812      	ldr	r2, [r2, #0]
    b9d2:	429a      	cmp	r2, r3
    b9d4:	d00a      	beq.n	b9ec <CC_LibInitNoRng+0x48>
    b9d6:	2407      	movs	r4, #7
    b9d8:	f000 f81c 	bl	ba14 <CC_HalTerminate>
    b9dc:	e7e7      	b.n	b9ae <CC_LibInitNoRng+0xa>
    b9de:	2406      	movs	r4, #6
    b9e0:	e7fa      	b.n	b9d8 <CC_LibInitNoRng+0x34>
    b9e2:	2404      	movs	r4, #4
    b9e4:	4620      	mov	r0, r4
    b9e6:	bd10      	pop	{r4, pc}
    b9e8:	2400      	movs	r4, #0
    b9ea:	e7f5      	b.n	b9d8 <CC_LibInitNoRng+0x34>
    b9ec:	2001      	movs	r0, #1
    b9ee:	f000 f897 	bl	bb20 <CC_PalPowerSaveModeSelect>
    b9f2:	4604      	mov	r4, r0
    b9f4:	2800      	cmp	r0, #0
    b9f6:	d1f7      	bne.n	b9e8 <CC_LibInitNoRng+0x44>
    b9f8:	4b04      	ldr	r3, [pc, #16]	; (ba0c <CC_LibInitNoRng+0x68>)
    b9fa:	6018      	str	r0, [r3, #0]
    b9fc:	e7d9      	b.n	b9b2 <CC_LibInitNoRng+0xe>
    b9fe:	bf00      	nop
    ba00:	5002b928 	.word	0x5002b928
    ba04:	5002ba24 	.word	0x5002ba24
    ba08:	20e00000 	.word	0x20e00000
    ba0c:	5002ba0c 	.word	0x5002ba0c

0000ba10 <CC_HalInit>:
    ba10:	2000      	movs	r0, #0
    ba12:	4770      	bx	lr

0000ba14 <CC_HalTerminate>:
    ba14:	2000      	movs	r0, #0
    ba16:	4770      	bx	lr

0000ba18 <CC_HalMaskInterrupt>:
    ba18:	4b01      	ldr	r3, [pc, #4]	; (ba20 <CC_HalMaskInterrupt+0x8>)
    ba1a:	6018      	str	r0, [r3, #0]
    ba1c:	4770      	bx	lr
    ba1e:	bf00      	nop
    ba20:	5002ba04 	.word	0x5002ba04

0000ba24 <CC_PalInit>:
    ba24:	b510      	push	{r4, lr}
    ba26:	4811      	ldr	r0, [pc, #68]	; (ba6c <CC_PalInit+0x48>)
    ba28:	f000 f848 	bl	babc <CC_PalMutexCreate>
    ba2c:	b100      	cbz	r0, ba30 <CC_PalInit+0xc>
    ba2e:	bd10      	pop	{r4, pc}
    ba30:	480f      	ldr	r0, [pc, #60]	; (ba70 <CC_PalInit+0x4c>)
    ba32:	f000 f843 	bl	babc <CC_PalMutexCreate>
    ba36:	2800      	cmp	r0, #0
    ba38:	d1f9      	bne.n	ba2e <CC_PalInit+0xa>
    ba3a:	4c0e      	ldr	r4, [pc, #56]	; (ba74 <CC_PalInit+0x50>)
    ba3c:	4620      	mov	r0, r4
    ba3e:	f000 f83d 	bl	babc <CC_PalMutexCreate>
    ba42:	2800      	cmp	r0, #0
    ba44:	d1f3      	bne.n	ba2e <CC_PalInit+0xa>
    ba46:	4b0c      	ldr	r3, [pc, #48]	; (ba78 <CC_PalInit+0x54>)
    ba48:	480c      	ldr	r0, [pc, #48]	; (ba7c <CC_PalInit+0x58>)
    ba4a:	601c      	str	r4, [r3, #0]
    ba4c:	f000 f836 	bl	babc <CC_PalMutexCreate>
    ba50:	4601      	mov	r1, r0
    ba52:	2800      	cmp	r0, #0
    ba54:	d1eb      	bne.n	ba2e <CC_PalInit+0xa>
    ba56:	f000 f82d 	bl	bab4 <CC_PalDmaInit>
    ba5a:	4604      	mov	r4, r0
    ba5c:	b108      	cbz	r0, ba62 <CC_PalInit+0x3e>
    ba5e:	4620      	mov	r0, r4
    ba60:	bd10      	pop	{r4, pc}
    ba62:	f000 f83f 	bl	bae4 <CC_PalPowerSaveModeInit>
    ba66:	4620      	mov	r0, r4
    ba68:	e7fa      	b.n	ba60 <CC_PalInit+0x3c>
    ba6a:	bf00      	nop
    ba6c:	20000158 	.word	0x20000158
    ba70:	2000014c 	.word	0x2000014c
    ba74:	20000154 	.word	0x20000154
    ba78:	2000015c 	.word	0x2000015c
    ba7c:	20000150 	.word	0x20000150

0000ba80 <CC_PalTerminate>:
    ba80:	b508      	push	{r3, lr}
    ba82:	4808      	ldr	r0, [pc, #32]	; (baa4 <CC_PalTerminate+0x24>)
    ba84:	f000 f824 	bl	bad0 <CC_PalMutexDestroy>
    ba88:	4807      	ldr	r0, [pc, #28]	; (baa8 <CC_PalTerminate+0x28>)
    ba8a:	f000 f821 	bl	bad0 <CC_PalMutexDestroy>
    ba8e:	4807      	ldr	r0, [pc, #28]	; (baac <CC_PalTerminate+0x2c>)
    ba90:	f000 f81e 	bl	bad0 <CC_PalMutexDestroy>
    ba94:	4806      	ldr	r0, [pc, #24]	; (bab0 <CC_PalTerminate+0x30>)
    ba96:	f000 f81b 	bl	bad0 <CC_PalMutexDestroy>
    ba9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    ba9e:	f000 b80b 	b.w	bab8 <CC_PalDmaTerminate>
    baa2:	bf00      	nop
    baa4:	20000158 	.word	0x20000158
    baa8:	2000014c 	.word	0x2000014c
    baac:	20000154 	.word	0x20000154
    bab0:	20000150 	.word	0x20000150

0000bab4 <CC_PalDmaInit>:
    bab4:	2000      	movs	r0, #0
    bab6:	4770      	bx	lr

0000bab8 <CC_PalDmaTerminate>:
    bab8:	4770      	bx	lr
    baba:	bf00      	nop

0000babc <CC_PalMutexCreate>:
    babc:	b508      	push	{r3, lr}
    babe:	4b03      	ldr	r3, [pc, #12]	; (bacc <CC_PalMutexCreate+0x10>)
    bac0:	6802      	ldr	r2, [r0, #0]
    bac2:	681b      	ldr	r3, [r3, #0]
    bac4:	6810      	ldr	r0, [r2, #0]
    bac6:	4798      	blx	r3
    bac8:	2000      	movs	r0, #0
    baca:	bd08      	pop	{r3, pc}
    bacc:	20000110 	.word	0x20000110

0000bad0 <CC_PalMutexDestroy>:
    bad0:	b508      	push	{r3, lr}
    bad2:	4b03      	ldr	r3, [pc, #12]	; (bae0 <CC_PalMutexDestroy+0x10>)
    bad4:	6802      	ldr	r2, [r0, #0]
    bad6:	685b      	ldr	r3, [r3, #4]
    bad8:	6810      	ldr	r0, [r2, #0]
    bada:	4798      	blx	r3
    badc:	2000      	movs	r0, #0
    bade:	bd08      	pop	{r3, pc}
    bae0:	20000110 	.word	0x20000110

0000bae4 <CC_PalPowerSaveModeInit>:
    bae4:	b570      	push	{r4, r5, r6, lr}
    bae6:	4c09      	ldr	r4, [pc, #36]	; (bb0c <CC_PalPowerSaveModeInit+0x28>)
    bae8:	4d09      	ldr	r5, [pc, #36]	; (bb10 <CC_PalPowerSaveModeInit+0x2c>)
    baea:	6920      	ldr	r0, [r4, #16]
    baec:	68ab      	ldr	r3, [r5, #8]
    baee:	4798      	blx	r3
    baf0:	b118      	cbz	r0, bafa <CC_PalPowerSaveModeInit+0x16>
    baf2:	4b08      	ldr	r3, [pc, #32]	; (bb14 <CC_PalPowerSaveModeInit+0x30>)
    baf4:	4808      	ldr	r0, [pc, #32]	; (bb18 <CC_PalPowerSaveModeInit+0x34>)
    baf6:	685b      	ldr	r3, [r3, #4]
    baf8:	4798      	blx	r3
    bafa:	4a08      	ldr	r2, [pc, #32]	; (bb1c <CC_PalPowerSaveModeInit+0x38>)
    bafc:	68eb      	ldr	r3, [r5, #12]
    bafe:	6920      	ldr	r0, [r4, #16]
    bb00:	2100      	movs	r1, #0
    bb02:	6011      	str	r1, [r2, #0]
    bb04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    bb08:	4718      	bx	r3
    bb0a:	bf00      	nop
    bb0c:	20000120 	.word	0x20000120
    bb10:	20000110 	.word	0x20000110
    bb14:	20000100 	.word	0x20000100
    bb18:	0001d0fc 	.word	0x0001d0fc
    bb1c:	20001028 	.word	0x20001028

0000bb20 <CC_PalPowerSaveModeSelect>:
    bb20:	b570      	push	{r4, r5, r6, lr}
    bb22:	4d1a      	ldr	r5, [pc, #104]	; (bb8c <CC_PalPowerSaveModeSelect+0x6c>)
    bb24:	4e1a      	ldr	r6, [pc, #104]	; (bb90 <CC_PalPowerSaveModeSelect+0x70>)
    bb26:	4604      	mov	r4, r0
    bb28:	68b2      	ldr	r2, [r6, #8]
    bb2a:	6928      	ldr	r0, [r5, #16]
    bb2c:	4790      	blx	r2
    bb2e:	b9f0      	cbnz	r0, bb6e <CC_PalPowerSaveModeSelect+0x4e>
    bb30:	b15c      	cbz	r4, bb4a <CC_PalPowerSaveModeSelect+0x2a>
    bb32:	4c18      	ldr	r4, [pc, #96]	; (bb94 <CC_PalPowerSaveModeSelect+0x74>)
    bb34:	6823      	ldr	r3, [r4, #0]
    bb36:	b1ab      	cbz	r3, bb64 <CC_PalPowerSaveModeSelect+0x44>
    bb38:	2b01      	cmp	r3, #1
    bb3a:	d01a      	beq.n	bb72 <CC_PalPowerSaveModeSelect+0x52>
    bb3c:	3b01      	subs	r3, #1
    bb3e:	6023      	str	r3, [r4, #0]
    bb40:	6928      	ldr	r0, [r5, #16]
    bb42:	68f3      	ldr	r3, [r6, #12]
    bb44:	4798      	blx	r3
    bb46:	2000      	movs	r0, #0
    bb48:	bd70      	pop	{r4, r5, r6, pc}
    bb4a:	4c12      	ldr	r4, [pc, #72]	; (bb94 <CC_PalPowerSaveModeSelect+0x74>)
    bb4c:	6821      	ldr	r1, [r4, #0]
    bb4e:	b939      	cbnz	r1, bb60 <CC_PalPowerSaveModeSelect+0x40>
    bb50:	4b11      	ldr	r3, [pc, #68]	; (bb98 <CC_PalPowerSaveModeSelect+0x78>)
    bb52:	4a12      	ldr	r2, [pc, #72]	; (bb9c <CC_PalPowerSaveModeSelect+0x7c>)
    bb54:	2001      	movs	r0, #1
    bb56:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    bb5a:	6813      	ldr	r3, [r2, #0]
    bb5c:	2b00      	cmp	r3, #0
    bb5e:	d1fc      	bne.n	bb5a <CC_PalPowerSaveModeSelect+0x3a>
    bb60:	3101      	adds	r1, #1
    bb62:	6021      	str	r1, [r4, #0]
    bb64:	68f3      	ldr	r3, [r6, #12]
    bb66:	6928      	ldr	r0, [r5, #16]
    bb68:	4798      	blx	r3
    bb6a:	2000      	movs	r0, #0
    bb6c:	bd70      	pop	{r4, r5, r6, pc}
    bb6e:	480c      	ldr	r0, [pc, #48]	; (bba0 <CC_PalPowerSaveModeSelect+0x80>)
    bb70:	bd70      	pop	{r4, r5, r6, pc}
    bb72:	4a0a      	ldr	r2, [pc, #40]	; (bb9c <CC_PalPowerSaveModeSelect+0x7c>)
    bb74:	6813      	ldr	r3, [r2, #0]
    bb76:	2b00      	cmp	r3, #0
    bb78:	d1fc      	bne.n	bb74 <CC_PalPowerSaveModeSelect+0x54>
    bb7a:	4a07      	ldr	r2, [pc, #28]	; (bb98 <CC_PalPowerSaveModeSelect+0x78>)
    bb7c:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    bb80:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    bb84:	f7ff ff48 	bl	ba18 <CC_HalMaskInterrupt>
    bb88:	6823      	ldr	r3, [r4, #0]
    bb8a:	e7d7      	b.n	bb3c <CC_PalPowerSaveModeSelect+0x1c>
    bb8c:	20000120 	.word	0x20000120
    bb90:	20000110 	.word	0x20000110
    bb94:	20001028 	.word	0x20001028
    bb98:	5002a000 	.word	0x5002a000
    bb9c:	5002b910 	.word	0x5002b910
    bba0:	ffff8fe9 	.word	0xffff8fe9

0000bba4 <calloc>:
    bba4:	4b02      	ldr	r3, [pc, #8]	; (bbb0 <calloc+0xc>)
    bba6:	460a      	mov	r2, r1
    bba8:	4601      	mov	r1, r0
    bbaa:	6818      	ldr	r0, [r3, #0]
    bbac:	f010 badb 	b.w	1c166 <_calloc_r>
    bbb0:	20000160 	.word	0x20000160

0000bbb4 <malloc>:
    bbb4:	4b02      	ldr	r3, [pc, #8]	; (bbc0 <malloc+0xc>)
    bbb6:	4601      	mov	r1, r0
    bbb8:	6818      	ldr	r0, [r3, #0]
    bbba:	f000 b859 	b.w	bc70 <_malloc_r>
    bbbe:	bf00      	nop
    bbc0:	20000160 	.word	0x20000160

0000bbc4 <free>:
    bbc4:	4b02      	ldr	r3, [pc, #8]	; (bbd0 <free+0xc>)
    bbc6:	4601      	mov	r1, r0
    bbc8:	6818      	ldr	r0, [r3, #0]
    bbca:	f000 b803 	b.w	bbd4 <_free_r>
    bbce:	bf00      	nop
    bbd0:	20000160 	.word	0x20000160

0000bbd4 <_free_r>:
    bbd4:	b538      	push	{r3, r4, r5, lr}
    bbd6:	4605      	mov	r5, r0
    bbd8:	2900      	cmp	r1, #0
    bbda:	d045      	beq.n	bc68 <_free_r+0x94>
    bbdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
    bbe0:	1f0c      	subs	r4, r1, #4
    bbe2:	2b00      	cmp	r3, #0
    bbe4:	bfb8      	it	lt
    bbe6:	18e4      	addlt	r4, r4, r3
    bbe8:	f7fb fb58 	bl	729c <__malloc_lock>
    bbec:	4a1f      	ldr	r2, [pc, #124]	; (bc6c <_free_r+0x98>)
    bbee:	6813      	ldr	r3, [r2, #0]
    bbf0:	4610      	mov	r0, r2
    bbf2:	b933      	cbnz	r3, bc02 <_free_r+0x2e>
    bbf4:	6063      	str	r3, [r4, #4]
    bbf6:	6014      	str	r4, [r2, #0]
    bbf8:	4628      	mov	r0, r5
    bbfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    bbfe:	f7fb bb57 	b.w	72b0 <__malloc_unlock>
    bc02:	42a3      	cmp	r3, r4
    bc04:	d90b      	bls.n	bc1e <_free_r+0x4a>
    bc06:	6821      	ldr	r1, [r4, #0]
    bc08:	1862      	adds	r2, r4, r1
    bc0a:	4293      	cmp	r3, r2
    bc0c:	bf04      	itt	eq
    bc0e:	681a      	ldreq	r2, [r3, #0]
    bc10:	685b      	ldreq	r3, [r3, #4]
    bc12:	6063      	str	r3, [r4, #4]
    bc14:	bf04      	itt	eq
    bc16:	1852      	addeq	r2, r2, r1
    bc18:	6022      	streq	r2, [r4, #0]
    bc1a:	6004      	str	r4, [r0, #0]
    bc1c:	e7ec      	b.n	bbf8 <_free_r+0x24>
    bc1e:	461a      	mov	r2, r3
    bc20:	685b      	ldr	r3, [r3, #4]
    bc22:	b10b      	cbz	r3, bc28 <_free_r+0x54>
    bc24:	42a3      	cmp	r3, r4
    bc26:	d9fa      	bls.n	bc1e <_free_r+0x4a>
    bc28:	6811      	ldr	r1, [r2, #0]
    bc2a:	1850      	adds	r0, r2, r1
    bc2c:	42a0      	cmp	r0, r4
    bc2e:	d10b      	bne.n	bc48 <_free_r+0x74>
    bc30:	6820      	ldr	r0, [r4, #0]
    bc32:	4401      	add	r1, r0
    bc34:	1850      	adds	r0, r2, r1
    bc36:	4283      	cmp	r3, r0
    bc38:	6011      	str	r1, [r2, #0]
    bc3a:	d1dd      	bne.n	bbf8 <_free_r+0x24>
    bc3c:	6818      	ldr	r0, [r3, #0]
    bc3e:	685b      	ldr	r3, [r3, #4]
    bc40:	6053      	str	r3, [r2, #4]
    bc42:	4401      	add	r1, r0
    bc44:	6011      	str	r1, [r2, #0]
    bc46:	e7d7      	b.n	bbf8 <_free_r+0x24>
    bc48:	d902      	bls.n	bc50 <_free_r+0x7c>
    bc4a:	230c      	movs	r3, #12
    bc4c:	602b      	str	r3, [r5, #0]
    bc4e:	e7d3      	b.n	bbf8 <_free_r+0x24>
    bc50:	6820      	ldr	r0, [r4, #0]
    bc52:	1821      	adds	r1, r4, r0
    bc54:	428b      	cmp	r3, r1
    bc56:	bf04      	itt	eq
    bc58:	6819      	ldreq	r1, [r3, #0]
    bc5a:	685b      	ldreq	r3, [r3, #4]
    bc5c:	6063      	str	r3, [r4, #4]
    bc5e:	bf04      	itt	eq
    bc60:	1809      	addeq	r1, r1, r0
    bc62:	6021      	streq	r1, [r4, #0]
    bc64:	6054      	str	r4, [r2, #4]
    bc66:	e7c7      	b.n	bbf8 <_free_r+0x24>
    bc68:	bd38      	pop	{r3, r4, r5, pc}
    bc6a:	bf00      	nop
    bc6c:	2000102c 	.word	0x2000102c

0000bc70 <_malloc_r>:
    bc70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bc72:	1ccd      	adds	r5, r1, #3
    bc74:	f025 0503 	bic.w	r5, r5, #3
    bc78:	3508      	adds	r5, #8
    bc7a:	2d0c      	cmp	r5, #12
    bc7c:	bf38      	it	cc
    bc7e:	250c      	movcc	r5, #12
    bc80:	2d00      	cmp	r5, #0
    bc82:	4606      	mov	r6, r0
    bc84:	db01      	blt.n	bc8a <_malloc_r+0x1a>
    bc86:	42a9      	cmp	r1, r5
    bc88:	d903      	bls.n	bc92 <_malloc_r+0x22>
    bc8a:	230c      	movs	r3, #12
    bc8c:	6033      	str	r3, [r6, #0]
    bc8e:	2000      	movs	r0, #0
    bc90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bc92:	f7fb fb03 	bl	729c <__malloc_lock>
    bc96:	4921      	ldr	r1, [pc, #132]	; (bd1c <_malloc_r+0xac>)
    bc98:	680a      	ldr	r2, [r1, #0]
    bc9a:	4614      	mov	r4, r2
    bc9c:	b99c      	cbnz	r4, bcc6 <_malloc_r+0x56>
    bc9e:	4f20      	ldr	r7, [pc, #128]	; (bd20 <_malloc_r+0xb0>)
    bca0:	683b      	ldr	r3, [r7, #0]
    bca2:	b923      	cbnz	r3, bcae <_malloc_r+0x3e>
    bca4:	4621      	mov	r1, r4
    bca6:	4630      	mov	r0, r6
    bca8:	f000 f844 	bl	bd34 <_sbrk_r>
    bcac:	6038      	str	r0, [r7, #0]
    bcae:	4629      	mov	r1, r5
    bcb0:	4630      	mov	r0, r6
    bcb2:	f000 f83f 	bl	bd34 <_sbrk_r>
    bcb6:	1c43      	adds	r3, r0, #1
    bcb8:	d123      	bne.n	bd02 <_malloc_r+0x92>
    bcba:	230c      	movs	r3, #12
    bcbc:	6033      	str	r3, [r6, #0]
    bcbe:	4630      	mov	r0, r6
    bcc0:	f7fb faf6 	bl	72b0 <__malloc_unlock>
    bcc4:	e7e3      	b.n	bc8e <_malloc_r+0x1e>
    bcc6:	6823      	ldr	r3, [r4, #0]
    bcc8:	1b5b      	subs	r3, r3, r5
    bcca:	d417      	bmi.n	bcfc <_malloc_r+0x8c>
    bccc:	2b0b      	cmp	r3, #11
    bcce:	d903      	bls.n	bcd8 <_malloc_r+0x68>
    bcd0:	6023      	str	r3, [r4, #0]
    bcd2:	441c      	add	r4, r3
    bcd4:	6025      	str	r5, [r4, #0]
    bcd6:	e004      	b.n	bce2 <_malloc_r+0x72>
    bcd8:	6863      	ldr	r3, [r4, #4]
    bcda:	42a2      	cmp	r2, r4
    bcdc:	bf0c      	ite	eq
    bcde:	600b      	streq	r3, [r1, #0]
    bce0:	6053      	strne	r3, [r2, #4]
    bce2:	4630      	mov	r0, r6
    bce4:	f7fb fae4 	bl	72b0 <__malloc_unlock>
    bce8:	f104 000b 	add.w	r0, r4, #11
    bcec:	1d23      	adds	r3, r4, #4
    bcee:	f020 0007 	bic.w	r0, r0, #7
    bcf2:	1ac2      	subs	r2, r0, r3
    bcf4:	d0cc      	beq.n	bc90 <_malloc_r+0x20>
    bcf6:	1a1b      	subs	r3, r3, r0
    bcf8:	50a3      	str	r3, [r4, r2]
    bcfa:	e7c9      	b.n	bc90 <_malloc_r+0x20>
    bcfc:	4622      	mov	r2, r4
    bcfe:	6864      	ldr	r4, [r4, #4]
    bd00:	e7cc      	b.n	bc9c <_malloc_r+0x2c>
    bd02:	1cc4      	adds	r4, r0, #3
    bd04:	f024 0403 	bic.w	r4, r4, #3
    bd08:	42a0      	cmp	r0, r4
    bd0a:	d0e3      	beq.n	bcd4 <_malloc_r+0x64>
    bd0c:	1a21      	subs	r1, r4, r0
    bd0e:	4630      	mov	r0, r6
    bd10:	f000 f810 	bl	bd34 <_sbrk_r>
    bd14:	3001      	adds	r0, #1
    bd16:	d1dd      	bne.n	bcd4 <_malloc_r+0x64>
    bd18:	e7cf      	b.n	bcba <_malloc_r+0x4a>
    bd1a:	bf00      	nop
    bd1c:	2000102c 	.word	0x2000102c
    bd20:	20001030 	.word	0x20001030

0000bd24 <realloc>:
    bd24:	4b02      	ldr	r3, [pc, #8]	; (bd30 <realloc+0xc>)
    bd26:	460a      	mov	r2, r1
    bd28:	4601      	mov	r1, r0
    bd2a:	6818      	ldr	r0, [r3, #0]
    bd2c:	f010 ba91 	b.w	1c252 <_realloc_r>
    bd30:	20000160 	.word	0x20000160

0000bd34 <_sbrk_r>:
    bd34:	b538      	push	{r3, r4, r5, lr}
    bd36:	4d06      	ldr	r5, [pc, #24]	; (bd50 <_sbrk_r+0x1c>)
    bd38:	2300      	movs	r3, #0
    bd3a:	4604      	mov	r4, r0
    bd3c:	4608      	mov	r0, r1
    bd3e:	602b      	str	r3, [r5, #0]
    bd40:	f7fb fa98 	bl	7274 <_sbrk>
    bd44:	1c43      	adds	r3, r0, #1
    bd46:	d102      	bne.n	bd4e <_sbrk_r+0x1a>
    bd48:	682b      	ldr	r3, [r5, #0]
    bd4a:	b103      	cbz	r3, bd4e <_sbrk_r+0x1a>
    bd4c:	6023      	str	r3, [r4, #0]
    bd4e:	bd38      	pop	{r3, r4, r5, pc}
    bd50:	2000182c 	.word	0x2000182c

0000bd54 <siscanf>:
    bd54:	b40e      	push	{r1, r2, r3}
    bd56:	b530      	push	{r4, r5, lr}
    bd58:	b09c      	sub	sp, #112	; 0x70
    bd5a:	ac1f      	add	r4, sp, #124	; 0x7c
    bd5c:	f44f 7201 	mov.w	r2, #516	; 0x204
    bd60:	f854 5b04 	ldr.w	r5, [r4], #4
    bd64:	f8ad 2014 	strh.w	r2, [sp, #20]
    bd68:	9002      	str	r0, [sp, #8]
    bd6a:	9006      	str	r0, [sp, #24]
    bd6c:	f7f5 f828 	bl	dc0 <strlen>
    bd70:	4b0b      	ldr	r3, [pc, #44]	; (bda0 <siscanf+0x4c>)
    bd72:	9003      	str	r0, [sp, #12]
    bd74:	9007      	str	r0, [sp, #28]
    bd76:	930b      	str	r3, [sp, #44]	; 0x2c
    bd78:	480a      	ldr	r0, [pc, #40]	; (bda4 <siscanf+0x50>)
    bd7a:	9401      	str	r4, [sp, #4]
    bd7c:	2300      	movs	r3, #0
    bd7e:	930f      	str	r3, [sp, #60]	; 0x3c
    bd80:	9314      	str	r3, [sp, #80]	; 0x50
    bd82:	f64f 73ff 	movw	r3, #65535	; 0xffff
    bd86:	f8ad 3016 	strh.w	r3, [sp, #22]
    bd8a:	462a      	mov	r2, r5
    bd8c:	4623      	mov	r3, r4
    bd8e:	a902      	add	r1, sp, #8
    bd90:	6800      	ldr	r0, [r0, #0]
    bd92:	f000 f937 	bl	c004 <__ssvfiscanf_r>
    bd96:	b01c      	add	sp, #112	; 0x70
    bd98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    bd9c:	b003      	add	sp, #12
    bd9e:	4770      	bx	lr
    bda0:	0001c1b7 	.word	0x0001c1b7
    bda4:	20000160 	.word	0x20000160

0000bda8 <vsniprintf>:
    bda8:	b507      	push	{r0, r1, r2, lr}
    bdaa:	9300      	str	r3, [sp, #0]
    bdac:	4613      	mov	r3, r2
    bdae:	460a      	mov	r2, r1
    bdb0:	4601      	mov	r1, r0
    bdb2:	4803      	ldr	r0, [pc, #12]	; (bdc0 <vsniprintf+0x18>)
    bdb4:	6800      	ldr	r0, [r0, #0]
    bdb6:	f010 fa20 	bl	1c1fa <_vsniprintf_r>
    bdba:	b003      	add	sp, #12
    bdbc:	f85d fb04 	ldr.w	pc, [sp], #4
    bdc0:	20000160 	.word	0x20000160

0000bdc4 <_vsiprintf_r>:
    bdc4:	b500      	push	{lr}
    bdc6:	b09b      	sub	sp, #108	; 0x6c
    bdc8:	9100      	str	r1, [sp, #0]
    bdca:	9104      	str	r1, [sp, #16]
    bdcc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    bdd0:	9105      	str	r1, [sp, #20]
    bdd2:	9102      	str	r1, [sp, #8]
    bdd4:	4905      	ldr	r1, [pc, #20]	; (bdec <_vsiprintf_r+0x28>)
    bdd6:	9103      	str	r1, [sp, #12]
    bdd8:	4669      	mov	r1, sp
    bdda:	f000 f813 	bl	be04 <_svfiprintf_r>
    bdde:	9b00      	ldr	r3, [sp, #0]
    bde0:	2200      	movs	r2, #0
    bde2:	701a      	strb	r2, [r3, #0]
    bde4:	b01b      	add	sp, #108	; 0x6c
    bde6:	f85d fb04 	ldr.w	pc, [sp], #4
    bdea:	bf00      	nop
    bdec:	ffff0208 	.word	0xffff0208

0000bdf0 <vsiprintf>:
    bdf0:	4613      	mov	r3, r2
    bdf2:	460a      	mov	r2, r1
    bdf4:	4601      	mov	r1, r0
    bdf6:	4802      	ldr	r0, [pc, #8]	; (be00 <vsiprintf+0x10>)
    bdf8:	6800      	ldr	r0, [r0, #0]
    bdfa:	f7ff bfe3 	b.w	bdc4 <_vsiprintf_r>
    bdfe:	bf00      	nop
    be00:	20000160 	.word	0x20000160

0000be04 <_svfiprintf_r>:
    be04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    be08:	4698      	mov	r8, r3
    be0a:	898b      	ldrh	r3, [r1, #12]
    be0c:	061b      	lsls	r3, r3, #24
    be0e:	b09d      	sub	sp, #116	; 0x74
    be10:	4607      	mov	r7, r0
    be12:	460d      	mov	r5, r1
    be14:	4614      	mov	r4, r2
    be16:	d50e      	bpl.n	be36 <_svfiprintf_r+0x32>
    be18:	690b      	ldr	r3, [r1, #16]
    be1a:	b963      	cbnz	r3, be36 <_svfiprintf_r+0x32>
    be1c:	2140      	movs	r1, #64	; 0x40
    be1e:	f7ff ff27 	bl	bc70 <_malloc_r>
    be22:	6028      	str	r0, [r5, #0]
    be24:	6128      	str	r0, [r5, #16]
    be26:	b920      	cbnz	r0, be32 <_svfiprintf_r+0x2e>
    be28:	230c      	movs	r3, #12
    be2a:	603b      	str	r3, [r7, #0]
    be2c:	f04f 30ff 	mov.w	r0, #4294967295
    be30:	e0d1      	b.n	bfd6 <_svfiprintf_r+0x1d2>
    be32:	2340      	movs	r3, #64	; 0x40
    be34:	616b      	str	r3, [r5, #20]
    be36:	2300      	movs	r3, #0
    be38:	9309      	str	r3, [sp, #36]	; 0x24
    be3a:	2320      	movs	r3, #32
    be3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    be40:	f8cd 800c 	str.w	r8, [sp, #12]
    be44:	2330      	movs	r3, #48	; 0x30
    be46:	f8df 81a8 	ldr.w	r8, [pc, #424]	; bff0 <_svfiprintf_r+0x1ec>
    be4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    be4e:	f04f 0901 	mov.w	r9, #1
    be52:	4623      	mov	r3, r4
    be54:	469a      	mov	sl, r3
    be56:	f813 2b01 	ldrb.w	r2, [r3], #1
    be5a:	b10a      	cbz	r2, be60 <_svfiprintf_r+0x5c>
    be5c:	2a25      	cmp	r2, #37	; 0x25
    be5e:	d1f9      	bne.n	be54 <_svfiprintf_r+0x50>
    be60:	ebba 0b04 	subs.w	fp, sl, r4
    be64:	d00b      	beq.n	be7e <_svfiprintf_r+0x7a>
    be66:	465b      	mov	r3, fp
    be68:	4622      	mov	r2, r4
    be6a:	4629      	mov	r1, r5
    be6c:	4638      	mov	r0, r7
    be6e:	f010 fa16 	bl	1c29e <__ssputs_r>
    be72:	3001      	adds	r0, #1
    be74:	f000 80aa 	beq.w	bfcc <_svfiprintf_r+0x1c8>
    be78:	9a09      	ldr	r2, [sp, #36]	; 0x24
    be7a:	445a      	add	r2, fp
    be7c:	9209      	str	r2, [sp, #36]	; 0x24
    be7e:	f89a 3000 	ldrb.w	r3, [sl]
    be82:	2b00      	cmp	r3, #0
    be84:	f000 80a2 	beq.w	bfcc <_svfiprintf_r+0x1c8>
    be88:	2300      	movs	r3, #0
    be8a:	f04f 32ff 	mov.w	r2, #4294967295
    be8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
    be92:	f10a 0a01 	add.w	sl, sl, #1
    be96:	9304      	str	r3, [sp, #16]
    be98:	9307      	str	r3, [sp, #28]
    be9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    be9e:	931a      	str	r3, [sp, #104]	; 0x68
    bea0:	4654      	mov	r4, sl
    bea2:	2205      	movs	r2, #5
    bea4:	f814 1b01 	ldrb.w	r1, [r4], #1
    bea8:	4851      	ldr	r0, [pc, #324]	; (bff0 <_svfiprintf_r+0x1ec>)
    beaa:	f7f4 f929 	bl	100 <memchr>
    beae:	9a04      	ldr	r2, [sp, #16]
    beb0:	b9d8      	cbnz	r0, beea <_svfiprintf_r+0xe6>
    beb2:	06d0      	lsls	r0, r2, #27
    beb4:	bf44      	itt	mi
    beb6:	2320      	movmi	r3, #32
    beb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
    bebc:	0711      	lsls	r1, r2, #28
    bebe:	bf44      	itt	mi
    bec0:	232b      	movmi	r3, #43	; 0x2b
    bec2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
    bec6:	f89a 3000 	ldrb.w	r3, [sl]
    beca:	2b2a      	cmp	r3, #42	; 0x2a
    becc:	d015      	beq.n	befa <_svfiprintf_r+0xf6>
    bece:	9a07      	ldr	r2, [sp, #28]
    bed0:	4654      	mov	r4, sl
    bed2:	2000      	movs	r0, #0
    bed4:	f04f 0c0a 	mov.w	ip, #10
    bed8:	4621      	mov	r1, r4
    beda:	f811 3b01 	ldrb.w	r3, [r1], #1
    bede:	3b30      	subs	r3, #48	; 0x30
    bee0:	2b09      	cmp	r3, #9
    bee2:	d94e      	bls.n	bf82 <_svfiprintf_r+0x17e>
    bee4:	b1b0      	cbz	r0, bf14 <_svfiprintf_r+0x110>
    bee6:	9207      	str	r2, [sp, #28]
    bee8:	e014      	b.n	bf14 <_svfiprintf_r+0x110>
    beea:	eba0 0308 	sub.w	r3, r0, r8
    beee:	fa09 f303 	lsl.w	r3, r9, r3
    bef2:	4313      	orrs	r3, r2
    bef4:	9304      	str	r3, [sp, #16]
    bef6:	46a2      	mov	sl, r4
    bef8:	e7d2      	b.n	bea0 <_svfiprintf_r+0x9c>
    befa:	9b03      	ldr	r3, [sp, #12]
    befc:	1d19      	adds	r1, r3, #4
    befe:	681b      	ldr	r3, [r3, #0]
    bf00:	9103      	str	r1, [sp, #12]
    bf02:	2b00      	cmp	r3, #0
    bf04:	bfbb      	ittet	lt
    bf06:	425b      	neglt	r3, r3
    bf08:	f042 0202 	orrlt.w	r2, r2, #2
    bf0c:	9307      	strge	r3, [sp, #28]
    bf0e:	9307      	strlt	r3, [sp, #28]
    bf10:	bfb8      	it	lt
    bf12:	9204      	strlt	r2, [sp, #16]
    bf14:	7823      	ldrb	r3, [r4, #0]
    bf16:	2b2e      	cmp	r3, #46	; 0x2e
    bf18:	d10c      	bne.n	bf34 <_svfiprintf_r+0x130>
    bf1a:	7863      	ldrb	r3, [r4, #1]
    bf1c:	2b2a      	cmp	r3, #42	; 0x2a
    bf1e:	d135      	bne.n	bf8c <_svfiprintf_r+0x188>
    bf20:	9b03      	ldr	r3, [sp, #12]
    bf22:	1d1a      	adds	r2, r3, #4
    bf24:	681b      	ldr	r3, [r3, #0]
    bf26:	9203      	str	r2, [sp, #12]
    bf28:	2b00      	cmp	r3, #0
    bf2a:	bfb8      	it	lt
    bf2c:	f04f 33ff 	movlt.w	r3, #4294967295
    bf30:	3402      	adds	r4, #2
    bf32:	9305      	str	r3, [sp, #20]
    bf34:	f8df a0c8 	ldr.w	sl, [pc, #200]	; c000 <_svfiprintf_r+0x1fc>
    bf38:	7821      	ldrb	r1, [r4, #0]
    bf3a:	2203      	movs	r2, #3
    bf3c:	4650      	mov	r0, sl
    bf3e:	f7f4 f8df 	bl	100 <memchr>
    bf42:	b140      	cbz	r0, bf56 <_svfiprintf_r+0x152>
    bf44:	2340      	movs	r3, #64	; 0x40
    bf46:	eba0 000a 	sub.w	r0, r0, sl
    bf4a:	fa03 f000 	lsl.w	r0, r3, r0
    bf4e:	9b04      	ldr	r3, [sp, #16]
    bf50:	4303      	orrs	r3, r0
    bf52:	3401      	adds	r4, #1
    bf54:	9304      	str	r3, [sp, #16]
    bf56:	f814 1b01 	ldrb.w	r1, [r4], #1
    bf5a:	4826      	ldr	r0, [pc, #152]	; (bff4 <_svfiprintf_r+0x1f0>)
    bf5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    bf60:	2206      	movs	r2, #6
    bf62:	f7f4 f8cd 	bl	100 <memchr>
    bf66:	2800      	cmp	r0, #0
    bf68:	d038      	beq.n	bfdc <_svfiprintf_r+0x1d8>
    bf6a:	4b23      	ldr	r3, [pc, #140]	; (bff8 <_svfiprintf_r+0x1f4>)
    bf6c:	bb1b      	cbnz	r3, bfb6 <_svfiprintf_r+0x1b2>
    bf6e:	9b03      	ldr	r3, [sp, #12]
    bf70:	3307      	adds	r3, #7
    bf72:	f023 0307 	bic.w	r3, r3, #7
    bf76:	3308      	adds	r3, #8
    bf78:	9303      	str	r3, [sp, #12]
    bf7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bf7c:	4433      	add	r3, r6
    bf7e:	9309      	str	r3, [sp, #36]	; 0x24
    bf80:	e767      	b.n	be52 <_svfiprintf_r+0x4e>
    bf82:	fb0c 3202 	mla	r2, ip, r2, r3
    bf86:	460c      	mov	r4, r1
    bf88:	2001      	movs	r0, #1
    bf8a:	e7a5      	b.n	bed8 <_svfiprintf_r+0xd4>
    bf8c:	2300      	movs	r3, #0
    bf8e:	3401      	adds	r4, #1
    bf90:	9305      	str	r3, [sp, #20]
    bf92:	4619      	mov	r1, r3
    bf94:	f04f 0c0a 	mov.w	ip, #10
    bf98:	4620      	mov	r0, r4
    bf9a:	f810 2b01 	ldrb.w	r2, [r0], #1
    bf9e:	3a30      	subs	r2, #48	; 0x30
    bfa0:	2a09      	cmp	r2, #9
    bfa2:	d903      	bls.n	bfac <_svfiprintf_r+0x1a8>
    bfa4:	2b00      	cmp	r3, #0
    bfa6:	d0c5      	beq.n	bf34 <_svfiprintf_r+0x130>
    bfa8:	9105      	str	r1, [sp, #20]
    bfaa:	e7c3      	b.n	bf34 <_svfiprintf_r+0x130>
    bfac:	fb0c 2101 	mla	r1, ip, r1, r2
    bfb0:	4604      	mov	r4, r0
    bfb2:	2301      	movs	r3, #1
    bfb4:	e7f0      	b.n	bf98 <_svfiprintf_r+0x194>
    bfb6:	ab03      	add	r3, sp, #12
    bfb8:	9300      	str	r3, [sp, #0]
    bfba:	462a      	mov	r2, r5
    bfbc:	4b0f      	ldr	r3, [pc, #60]	; (bffc <_svfiprintf_r+0x1f8>)
    bfbe:	a904      	add	r1, sp, #16
    bfc0:	4638      	mov	r0, r7
    bfc2:	f3af 8000 	nop.w
    bfc6:	1c42      	adds	r2, r0, #1
    bfc8:	4606      	mov	r6, r0
    bfca:	d1d6      	bne.n	bf7a <_svfiprintf_r+0x176>
    bfcc:	89ab      	ldrh	r3, [r5, #12]
    bfce:	065b      	lsls	r3, r3, #25
    bfd0:	f53f af2c 	bmi.w	be2c <_svfiprintf_r+0x28>
    bfd4:	9809      	ldr	r0, [sp, #36]	; 0x24
    bfd6:	b01d      	add	sp, #116	; 0x74
    bfd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bfdc:	ab03      	add	r3, sp, #12
    bfde:	9300      	str	r3, [sp, #0]
    bfe0:	462a      	mov	r2, r5
    bfe2:	4b06      	ldr	r3, [pc, #24]	; (bffc <_svfiprintf_r+0x1f8>)
    bfe4:	a904      	add	r1, sp, #16
    bfe6:	4638      	mov	r0, r7
    bfe8:	f000 f984 	bl	c2f4 <_printf_i>
    bfec:	e7eb      	b.n	bfc6 <_svfiprintf_r+0x1c2>
    bfee:	bf00      	nop
    bff0:	0001e2a5 	.word	0x0001e2a5
    bff4:	0001e2af 	.word	0x0001e2af
    bff8:	00000000 	.word	0x00000000
    bffc:	0001c29f 	.word	0x0001c29f
    c000:	0001e2ab 	.word	0x0001e2ab

0000c004 <__ssvfiscanf_r>:
    c004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c008:	460c      	mov	r4, r1
    c00a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
    c00e:	2100      	movs	r1, #0
    c010:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
    c014:	49b2      	ldr	r1, [pc, #712]	; (c2e0 <__ssvfiscanf_r+0x2dc>)
    c016:	91a0      	str	r1, [sp, #640]	; 0x280
    c018:	f10d 0804 	add.w	r8, sp, #4
    c01c:	49b1      	ldr	r1, [pc, #708]	; (c2e4 <__ssvfiscanf_r+0x2e0>)
    c01e:	4fb2      	ldr	r7, [pc, #712]	; (c2e8 <__ssvfiscanf_r+0x2e4>)
    c020:	f8df 92c8 	ldr.w	r9, [pc, #712]	; c2ec <__ssvfiscanf_r+0x2e8>
    c024:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
    c028:	4606      	mov	r6, r0
    c02a:	91a1      	str	r1, [sp, #644]	; 0x284
    c02c:	9300      	str	r3, [sp, #0]
    c02e:	f892 a000 	ldrb.w	sl, [r2]
    c032:	f1ba 0f00 	cmp.w	sl, #0
    c036:	f000 8151 	beq.w	c2dc <__ssvfiscanf_r+0x2d8>
    c03a:	f81a 3007 	ldrb.w	r3, [sl, r7]
    c03e:	f013 0308 	ands.w	r3, r3, #8
    c042:	f102 0501 	add.w	r5, r2, #1
    c046:	d019      	beq.n	c07c <__ssvfiscanf_r+0x78>
    c048:	6863      	ldr	r3, [r4, #4]
    c04a:	2b00      	cmp	r3, #0
    c04c:	dd0f      	ble.n	c06e <__ssvfiscanf_r+0x6a>
    c04e:	6823      	ldr	r3, [r4, #0]
    c050:	781a      	ldrb	r2, [r3, #0]
    c052:	5cba      	ldrb	r2, [r7, r2]
    c054:	0712      	lsls	r2, r2, #28
    c056:	d401      	bmi.n	c05c <__ssvfiscanf_r+0x58>
    c058:	462a      	mov	r2, r5
    c05a:	e7e8      	b.n	c02e <__ssvfiscanf_r+0x2a>
    c05c:	9a45      	ldr	r2, [sp, #276]	; 0x114
    c05e:	3201      	adds	r2, #1
    c060:	9245      	str	r2, [sp, #276]	; 0x114
    c062:	6862      	ldr	r2, [r4, #4]
    c064:	3301      	adds	r3, #1
    c066:	3a01      	subs	r2, #1
    c068:	6062      	str	r2, [r4, #4]
    c06a:	6023      	str	r3, [r4, #0]
    c06c:	e7ec      	b.n	c048 <__ssvfiscanf_r+0x44>
    c06e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
    c070:	4621      	mov	r1, r4
    c072:	4630      	mov	r0, r6
    c074:	4798      	blx	r3
    c076:	2800      	cmp	r0, #0
    c078:	d0e9      	beq.n	c04e <__ssvfiscanf_r+0x4a>
    c07a:	e7ed      	b.n	c058 <__ssvfiscanf_r+0x54>
    c07c:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
    c080:	f040 8083 	bne.w	c18a <__ssvfiscanf_r+0x186>
    c084:	9341      	str	r3, [sp, #260]	; 0x104
    c086:	9343      	str	r3, [sp, #268]	; 0x10c
    c088:	7853      	ldrb	r3, [r2, #1]
    c08a:	2b2a      	cmp	r3, #42	; 0x2a
    c08c:	bf02      	ittt	eq
    c08e:	2310      	moveq	r3, #16
    c090:	1c95      	addeq	r5, r2, #2
    c092:	9341      	streq	r3, [sp, #260]	; 0x104
    c094:	220a      	movs	r2, #10
    c096:	46ab      	mov	fp, r5
    c098:	f81b 1b01 	ldrb.w	r1, [fp], #1
    c09c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    c0a0:	2b09      	cmp	r3, #9
    c0a2:	d91d      	bls.n	c0e0 <__ssvfiscanf_r+0xdc>
    c0a4:	4891      	ldr	r0, [pc, #580]	; (c2ec <__ssvfiscanf_r+0x2e8>)
    c0a6:	2203      	movs	r2, #3
    c0a8:	f7f4 f82a 	bl	100 <memchr>
    c0ac:	b140      	cbz	r0, c0c0 <__ssvfiscanf_r+0xbc>
    c0ae:	2301      	movs	r3, #1
    c0b0:	eba0 0009 	sub.w	r0, r0, r9
    c0b4:	fa03 f000 	lsl.w	r0, r3, r0
    c0b8:	9b41      	ldr	r3, [sp, #260]	; 0x104
    c0ba:	4318      	orrs	r0, r3
    c0bc:	9041      	str	r0, [sp, #260]	; 0x104
    c0be:	465d      	mov	r5, fp
    c0c0:	f815 3b01 	ldrb.w	r3, [r5], #1
    c0c4:	2b78      	cmp	r3, #120	; 0x78
    c0c6:	d806      	bhi.n	c0d6 <__ssvfiscanf_r+0xd2>
    c0c8:	2b57      	cmp	r3, #87	; 0x57
    c0ca:	d810      	bhi.n	c0ee <__ssvfiscanf_r+0xea>
    c0cc:	2b25      	cmp	r3, #37	; 0x25
    c0ce:	d05c      	beq.n	c18a <__ssvfiscanf_r+0x186>
    c0d0:	d856      	bhi.n	c180 <__ssvfiscanf_r+0x17c>
    c0d2:	2b00      	cmp	r3, #0
    c0d4:	d074      	beq.n	c1c0 <__ssvfiscanf_r+0x1bc>
    c0d6:	2303      	movs	r3, #3
    c0d8:	9347      	str	r3, [sp, #284]	; 0x11c
    c0da:	230a      	movs	r3, #10
    c0dc:	9342      	str	r3, [sp, #264]	; 0x108
    c0de:	e081      	b.n	c1e4 <__ssvfiscanf_r+0x1e0>
    c0e0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    c0e2:	fb02 1303 	mla	r3, r2, r3, r1
    c0e6:	3b30      	subs	r3, #48	; 0x30
    c0e8:	9343      	str	r3, [sp, #268]	; 0x10c
    c0ea:	465d      	mov	r5, fp
    c0ec:	e7d3      	b.n	c096 <__ssvfiscanf_r+0x92>
    c0ee:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
    c0f2:	2a20      	cmp	r2, #32
    c0f4:	d8ef      	bhi.n	c0d6 <__ssvfiscanf_r+0xd2>
    c0f6:	a101      	add	r1, pc, #4	; (adr r1, c0fc <__ssvfiscanf_r+0xf8>)
    c0f8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    c0fc:	0000c1cf 	.word	0x0000c1cf
    c100:	0000c0d7 	.word	0x0000c0d7
    c104:	0000c0d7 	.word	0x0000c0d7
    c108:	0000c22d 	.word	0x0000c22d
    c10c:	0000c0d7 	.word	0x0000c0d7
    c110:	0000c0d7 	.word	0x0000c0d7
    c114:	0000c0d7 	.word	0x0000c0d7
    c118:	0000c0d7 	.word	0x0000c0d7
    c11c:	0000c0d7 	.word	0x0000c0d7
    c120:	0000c0d7 	.word	0x0000c0d7
    c124:	0000c0d7 	.word	0x0000c0d7
    c128:	0000c243 	.word	0x0000c243
    c12c:	0000c219 	.word	0x0000c219
    c130:	0000c187 	.word	0x0000c187
    c134:	0000c187 	.word	0x0000c187
    c138:	0000c187 	.word	0x0000c187
    c13c:	0000c0d7 	.word	0x0000c0d7
    c140:	0000c21d 	.word	0x0000c21d
    c144:	0000c0d7 	.word	0x0000c0d7
    c148:	0000c0d7 	.word	0x0000c0d7
    c14c:	0000c0d7 	.word	0x0000c0d7
    c150:	0000c0d7 	.word	0x0000c0d7
    c154:	0000c253 	.word	0x0000c253
    c158:	0000c225 	.word	0x0000c225
    c15c:	0000c1c7 	.word	0x0000c1c7
    c160:	0000c0d7 	.word	0x0000c0d7
    c164:	0000c0d7 	.word	0x0000c0d7
    c168:	0000c24f 	.word	0x0000c24f
    c16c:	0000c0d7 	.word	0x0000c0d7
    c170:	0000c219 	.word	0x0000c219
    c174:	0000c0d7 	.word	0x0000c0d7
    c178:	0000c0d7 	.word	0x0000c0d7
    c17c:	0000c1cf 	.word	0x0000c1cf
    c180:	3b45      	subs	r3, #69	; 0x45
    c182:	2b02      	cmp	r3, #2
    c184:	d8a7      	bhi.n	c0d6 <__ssvfiscanf_r+0xd2>
    c186:	2305      	movs	r3, #5
    c188:	e02b      	b.n	c1e2 <__ssvfiscanf_r+0x1de>
    c18a:	6863      	ldr	r3, [r4, #4]
    c18c:	2b00      	cmp	r3, #0
    c18e:	dd0d      	ble.n	c1ac <__ssvfiscanf_r+0x1a8>
    c190:	6823      	ldr	r3, [r4, #0]
    c192:	781a      	ldrb	r2, [r3, #0]
    c194:	4552      	cmp	r2, sl
    c196:	f040 80a1 	bne.w	c2dc <__ssvfiscanf_r+0x2d8>
    c19a:	3301      	adds	r3, #1
    c19c:	6862      	ldr	r2, [r4, #4]
    c19e:	6023      	str	r3, [r4, #0]
    c1a0:	9b45      	ldr	r3, [sp, #276]	; 0x114
    c1a2:	3a01      	subs	r2, #1
    c1a4:	3301      	adds	r3, #1
    c1a6:	6062      	str	r2, [r4, #4]
    c1a8:	9345      	str	r3, [sp, #276]	; 0x114
    c1aa:	e755      	b.n	c058 <__ssvfiscanf_r+0x54>
    c1ac:	9ba1      	ldr	r3, [sp, #644]	; 0x284
    c1ae:	4621      	mov	r1, r4
    c1b0:	4630      	mov	r0, r6
    c1b2:	4798      	blx	r3
    c1b4:	2800      	cmp	r0, #0
    c1b6:	d0eb      	beq.n	c190 <__ssvfiscanf_r+0x18c>
    c1b8:	9844      	ldr	r0, [sp, #272]	; 0x110
    c1ba:	2800      	cmp	r0, #0
    c1bc:	f040 8084 	bne.w	c2c8 <__ssvfiscanf_r+0x2c4>
    c1c0:	f04f 30ff 	mov.w	r0, #4294967295
    c1c4:	e086      	b.n	c2d4 <__ssvfiscanf_r+0x2d0>
    c1c6:	9a41      	ldr	r2, [sp, #260]	; 0x104
    c1c8:	f042 0220 	orr.w	r2, r2, #32
    c1cc:	9241      	str	r2, [sp, #260]	; 0x104
    c1ce:	9a41      	ldr	r2, [sp, #260]	; 0x104
    c1d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    c1d4:	9241      	str	r2, [sp, #260]	; 0x104
    c1d6:	2210      	movs	r2, #16
    c1d8:	2b6f      	cmp	r3, #111	; 0x6f
    c1da:	9242      	str	r2, [sp, #264]	; 0x108
    c1dc:	bf34      	ite	cc
    c1de:	2303      	movcc	r3, #3
    c1e0:	2304      	movcs	r3, #4
    c1e2:	9347      	str	r3, [sp, #284]	; 0x11c
    c1e4:	6863      	ldr	r3, [r4, #4]
    c1e6:	2b00      	cmp	r3, #0
    c1e8:	dd41      	ble.n	c26e <__ssvfiscanf_r+0x26a>
    c1ea:	9b41      	ldr	r3, [sp, #260]	; 0x104
    c1ec:	0659      	lsls	r1, r3, #25
    c1ee:	d404      	bmi.n	c1fa <__ssvfiscanf_r+0x1f6>
    c1f0:	6823      	ldr	r3, [r4, #0]
    c1f2:	781a      	ldrb	r2, [r3, #0]
    c1f4:	5cba      	ldrb	r2, [r7, r2]
    c1f6:	0712      	lsls	r2, r2, #28
    c1f8:	d440      	bmi.n	c27c <__ssvfiscanf_r+0x278>
    c1fa:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    c1fc:	2b02      	cmp	r3, #2
    c1fe:	dc4f      	bgt.n	c2a0 <__ssvfiscanf_r+0x29c>
    c200:	466b      	mov	r3, sp
    c202:	4622      	mov	r2, r4
    c204:	a941      	add	r1, sp, #260	; 0x104
    c206:	4630      	mov	r0, r6
    c208:	f000 f99a 	bl	c540 <_scanf_chars>
    c20c:	2801      	cmp	r0, #1
    c20e:	d065      	beq.n	c2dc <__ssvfiscanf_r+0x2d8>
    c210:	2802      	cmp	r0, #2
    c212:	f47f af21 	bne.w	c058 <__ssvfiscanf_r+0x54>
    c216:	e7cf      	b.n	c1b8 <__ssvfiscanf_r+0x1b4>
    c218:	220a      	movs	r2, #10
    c21a:	e7dd      	b.n	c1d8 <__ssvfiscanf_r+0x1d4>
    c21c:	2300      	movs	r3, #0
    c21e:	9342      	str	r3, [sp, #264]	; 0x108
    c220:	2303      	movs	r3, #3
    c222:	e7de      	b.n	c1e2 <__ssvfiscanf_r+0x1de>
    c224:	2308      	movs	r3, #8
    c226:	9342      	str	r3, [sp, #264]	; 0x108
    c228:	2304      	movs	r3, #4
    c22a:	e7da      	b.n	c1e2 <__ssvfiscanf_r+0x1de>
    c22c:	4629      	mov	r1, r5
    c22e:	4640      	mov	r0, r8
    c230:	f010 f957 	bl	1c4e2 <__sccl>
    c234:	9b41      	ldr	r3, [sp, #260]	; 0x104
    c236:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c23a:	9341      	str	r3, [sp, #260]	; 0x104
    c23c:	4605      	mov	r5, r0
    c23e:	2301      	movs	r3, #1
    c240:	e7cf      	b.n	c1e2 <__ssvfiscanf_r+0x1de>
    c242:	9b41      	ldr	r3, [sp, #260]	; 0x104
    c244:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c248:	9341      	str	r3, [sp, #260]	; 0x104
    c24a:	2300      	movs	r3, #0
    c24c:	e7c9      	b.n	c1e2 <__ssvfiscanf_r+0x1de>
    c24e:	2302      	movs	r3, #2
    c250:	e7c7      	b.n	c1e2 <__ssvfiscanf_r+0x1de>
    c252:	9841      	ldr	r0, [sp, #260]	; 0x104
    c254:	06c3      	lsls	r3, r0, #27
    c256:	f53f aeff 	bmi.w	c058 <__ssvfiscanf_r+0x54>
    c25a:	9b00      	ldr	r3, [sp, #0]
    c25c:	9a45      	ldr	r2, [sp, #276]	; 0x114
    c25e:	1d19      	adds	r1, r3, #4
    c260:	9100      	str	r1, [sp, #0]
    c262:	681b      	ldr	r3, [r3, #0]
    c264:	07c0      	lsls	r0, r0, #31
    c266:	bf4c      	ite	mi
    c268:	801a      	strhmi	r2, [r3, #0]
    c26a:	601a      	strpl	r2, [r3, #0]
    c26c:	e6f4      	b.n	c058 <__ssvfiscanf_r+0x54>
    c26e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
    c270:	4621      	mov	r1, r4
    c272:	4630      	mov	r0, r6
    c274:	4798      	blx	r3
    c276:	2800      	cmp	r0, #0
    c278:	d0b7      	beq.n	c1ea <__ssvfiscanf_r+0x1e6>
    c27a:	e79d      	b.n	c1b8 <__ssvfiscanf_r+0x1b4>
    c27c:	9a45      	ldr	r2, [sp, #276]	; 0x114
    c27e:	3201      	adds	r2, #1
    c280:	9245      	str	r2, [sp, #276]	; 0x114
    c282:	6862      	ldr	r2, [r4, #4]
    c284:	3a01      	subs	r2, #1
    c286:	2a00      	cmp	r2, #0
    c288:	6062      	str	r2, [r4, #4]
    c28a:	dd02      	ble.n	c292 <__ssvfiscanf_r+0x28e>
    c28c:	3301      	adds	r3, #1
    c28e:	6023      	str	r3, [r4, #0]
    c290:	e7ae      	b.n	c1f0 <__ssvfiscanf_r+0x1ec>
    c292:	9ba1      	ldr	r3, [sp, #644]	; 0x284
    c294:	4621      	mov	r1, r4
    c296:	4630      	mov	r0, r6
    c298:	4798      	blx	r3
    c29a:	2800      	cmp	r0, #0
    c29c:	d0a8      	beq.n	c1f0 <__ssvfiscanf_r+0x1ec>
    c29e:	e78b      	b.n	c1b8 <__ssvfiscanf_r+0x1b4>
    c2a0:	2b04      	cmp	r3, #4
    c2a2:	dc06      	bgt.n	c2b2 <__ssvfiscanf_r+0x2ae>
    c2a4:	466b      	mov	r3, sp
    c2a6:	4622      	mov	r2, r4
    c2a8:	a941      	add	r1, sp, #260	; 0x104
    c2aa:	4630      	mov	r0, r6
    c2ac:	f000 f9a0 	bl	c5f0 <_scanf_i>
    c2b0:	e7ac      	b.n	c20c <__ssvfiscanf_r+0x208>
    c2b2:	4b0f      	ldr	r3, [pc, #60]	; (c2f0 <__ssvfiscanf_r+0x2ec>)
    c2b4:	2b00      	cmp	r3, #0
    c2b6:	f43f aecf 	beq.w	c058 <__ssvfiscanf_r+0x54>
    c2ba:	466b      	mov	r3, sp
    c2bc:	4622      	mov	r2, r4
    c2be:	a941      	add	r1, sp, #260	; 0x104
    c2c0:	4630      	mov	r0, r6
    c2c2:	f3af 8000 	nop.w
    c2c6:	e7a1      	b.n	c20c <__ssvfiscanf_r+0x208>
    c2c8:	89a3      	ldrh	r3, [r4, #12]
    c2ca:	f013 0f40 	tst.w	r3, #64	; 0x40
    c2ce:	bf18      	it	ne
    c2d0:	f04f 30ff 	movne.w	r0, #4294967295
    c2d4:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
    c2d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c2dc:	9844      	ldr	r0, [sp, #272]	; 0x110
    c2de:	e7f9      	b.n	c2d4 <__ssvfiscanf_r+0x2d0>
    c2e0:	0001c355 	.word	0x0001c355
    c2e4:	0001c3cf 	.word	0x0001c3cf
    c2e8:	0001e1a5 	.word	0x0001e1a5
    c2ec:	0001e2ab 	.word	0x0001e2ab
    c2f0:	00000000 	.word	0x00000000

0000c2f4 <_printf_i>:
    c2f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    c2f8:	460c      	mov	r4, r1
    c2fa:	4691      	mov	r9, r2
    c2fc:	7e27      	ldrb	r7, [r4, #24]
    c2fe:	990c      	ldr	r1, [sp, #48]	; 0x30
    c300:	2f78      	cmp	r7, #120	; 0x78
    c302:	4680      	mov	r8, r0
    c304:	469a      	mov	sl, r3
    c306:	f104 0243 	add.w	r2, r4, #67	; 0x43
    c30a:	d807      	bhi.n	c31c <_printf_i+0x28>
    c30c:	2f62      	cmp	r7, #98	; 0x62
    c30e:	d80a      	bhi.n	c326 <_printf_i+0x32>
    c310:	2f00      	cmp	r7, #0
    c312:	f000 80d8 	beq.w	c4c6 <_printf_i+0x1d2>
    c316:	2f58      	cmp	r7, #88	; 0x58
    c318:	f000 80a3 	beq.w	c462 <_printf_i+0x16e>
    c31c:	f104 0642 	add.w	r6, r4, #66	; 0x42
    c320:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
    c324:	e03a      	b.n	c39c <_printf_i+0xa8>
    c326:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
    c32a:	2b15      	cmp	r3, #21
    c32c:	d8f6      	bhi.n	c31c <_printf_i+0x28>
    c32e:	a001      	add	r0, pc, #4	; (adr r0, c334 <_printf_i+0x40>)
    c330:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
    c334:	0000c38d 	.word	0x0000c38d
    c338:	0000c3a1 	.word	0x0000c3a1
    c33c:	0000c31d 	.word	0x0000c31d
    c340:	0000c31d 	.word	0x0000c31d
    c344:	0000c31d 	.word	0x0000c31d
    c348:	0000c31d 	.word	0x0000c31d
    c34c:	0000c3a1 	.word	0x0000c3a1
    c350:	0000c31d 	.word	0x0000c31d
    c354:	0000c31d 	.word	0x0000c31d
    c358:	0000c31d 	.word	0x0000c31d
    c35c:	0000c31d 	.word	0x0000c31d
    c360:	0000c4ad 	.word	0x0000c4ad
    c364:	0000c3d1 	.word	0x0000c3d1
    c368:	0000c48f 	.word	0x0000c48f
    c36c:	0000c31d 	.word	0x0000c31d
    c370:	0000c31d 	.word	0x0000c31d
    c374:	0000c4cf 	.word	0x0000c4cf
    c378:	0000c31d 	.word	0x0000c31d
    c37c:	0000c3d1 	.word	0x0000c3d1
    c380:	0000c31d 	.word	0x0000c31d
    c384:	0000c31d 	.word	0x0000c31d
    c388:	0000c497 	.word	0x0000c497
    c38c:	680b      	ldr	r3, [r1, #0]
    c38e:	1d1a      	adds	r2, r3, #4
    c390:	681b      	ldr	r3, [r3, #0]
    c392:	600a      	str	r2, [r1, #0]
    c394:	f104 0642 	add.w	r6, r4, #66	; 0x42
    c398:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    c39c:	2301      	movs	r3, #1
    c39e:	e0a3      	b.n	c4e8 <_printf_i+0x1f4>
    c3a0:	6825      	ldr	r5, [r4, #0]
    c3a2:	6808      	ldr	r0, [r1, #0]
    c3a4:	062e      	lsls	r6, r5, #24
    c3a6:	f100 0304 	add.w	r3, r0, #4
    c3aa:	d50a      	bpl.n	c3c2 <_printf_i+0xce>
    c3ac:	6805      	ldr	r5, [r0, #0]
    c3ae:	600b      	str	r3, [r1, #0]
    c3b0:	2d00      	cmp	r5, #0
    c3b2:	da03      	bge.n	c3bc <_printf_i+0xc8>
    c3b4:	232d      	movs	r3, #45	; 0x2d
    c3b6:	426d      	negs	r5, r5
    c3b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    c3bc:	485e      	ldr	r0, [pc, #376]	; (c538 <_printf_i+0x244>)
    c3be:	230a      	movs	r3, #10
    c3c0:	e019      	b.n	c3f6 <_printf_i+0x102>
    c3c2:	f015 0f40 	tst.w	r5, #64	; 0x40
    c3c6:	6805      	ldr	r5, [r0, #0]
    c3c8:	600b      	str	r3, [r1, #0]
    c3ca:	bf18      	it	ne
    c3cc:	b22d      	sxthne	r5, r5
    c3ce:	e7ef      	b.n	c3b0 <_printf_i+0xbc>
    c3d0:	680b      	ldr	r3, [r1, #0]
    c3d2:	6825      	ldr	r5, [r4, #0]
    c3d4:	1d18      	adds	r0, r3, #4
    c3d6:	6008      	str	r0, [r1, #0]
    c3d8:	0628      	lsls	r0, r5, #24
    c3da:	d501      	bpl.n	c3e0 <_printf_i+0xec>
    c3dc:	681d      	ldr	r5, [r3, #0]
    c3de:	e002      	b.n	c3e6 <_printf_i+0xf2>
    c3e0:	0669      	lsls	r1, r5, #25
    c3e2:	d5fb      	bpl.n	c3dc <_printf_i+0xe8>
    c3e4:	881d      	ldrh	r5, [r3, #0]
    c3e6:	4854      	ldr	r0, [pc, #336]	; (c538 <_printf_i+0x244>)
    c3e8:	2f6f      	cmp	r7, #111	; 0x6f
    c3ea:	bf0c      	ite	eq
    c3ec:	2308      	moveq	r3, #8
    c3ee:	230a      	movne	r3, #10
    c3f0:	2100      	movs	r1, #0
    c3f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
    c3f6:	6866      	ldr	r6, [r4, #4]
    c3f8:	60a6      	str	r6, [r4, #8]
    c3fa:	2e00      	cmp	r6, #0
    c3fc:	bfa2      	ittt	ge
    c3fe:	6821      	ldrge	r1, [r4, #0]
    c400:	f021 0104 	bicge.w	r1, r1, #4
    c404:	6021      	strge	r1, [r4, #0]
    c406:	b90d      	cbnz	r5, c40c <_printf_i+0x118>
    c408:	2e00      	cmp	r6, #0
    c40a:	d04d      	beq.n	c4a8 <_printf_i+0x1b4>
    c40c:	4616      	mov	r6, r2
    c40e:	fbb5 f1f3 	udiv	r1, r5, r3
    c412:	fb03 5711 	mls	r7, r3, r1, r5
    c416:	5dc7      	ldrb	r7, [r0, r7]
    c418:	f806 7d01 	strb.w	r7, [r6, #-1]!
    c41c:	462f      	mov	r7, r5
    c41e:	42bb      	cmp	r3, r7
    c420:	460d      	mov	r5, r1
    c422:	d9f4      	bls.n	c40e <_printf_i+0x11a>
    c424:	2b08      	cmp	r3, #8
    c426:	d10b      	bne.n	c440 <_printf_i+0x14c>
    c428:	6823      	ldr	r3, [r4, #0]
    c42a:	07df      	lsls	r7, r3, #31
    c42c:	d508      	bpl.n	c440 <_printf_i+0x14c>
    c42e:	6923      	ldr	r3, [r4, #16]
    c430:	6861      	ldr	r1, [r4, #4]
    c432:	4299      	cmp	r1, r3
    c434:	bfde      	ittt	le
    c436:	2330      	movle	r3, #48	; 0x30
    c438:	f806 3c01 	strble.w	r3, [r6, #-1]
    c43c:	f106 36ff 	addle.w	r6, r6, #4294967295
    c440:	1b92      	subs	r2, r2, r6
    c442:	6122      	str	r2, [r4, #16]
    c444:	f8cd a000 	str.w	sl, [sp]
    c448:	464b      	mov	r3, r9
    c44a:	aa03      	add	r2, sp, #12
    c44c:	4621      	mov	r1, r4
    c44e:	4640      	mov	r0, r8
    c450:	f00f ffda 	bl	1c408 <_printf_common>
    c454:	3001      	adds	r0, #1
    c456:	d14c      	bne.n	c4f2 <_printf_i+0x1fe>
    c458:	f04f 30ff 	mov.w	r0, #4294967295
    c45c:	b004      	add	sp, #16
    c45e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c462:	4835      	ldr	r0, [pc, #212]	; (c538 <_printf_i+0x244>)
    c464:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
    c468:	6823      	ldr	r3, [r4, #0]
    c46a:	680e      	ldr	r6, [r1, #0]
    c46c:	061f      	lsls	r7, r3, #24
    c46e:	f856 5b04 	ldr.w	r5, [r6], #4
    c472:	600e      	str	r6, [r1, #0]
    c474:	d514      	bpl.n	c4a0 <_printf_i+0x1ac>
    c476:	07d9      	lsls	r1, r3, #31
    c478:	bf44      	itt	mi
    c47a:	f043 0320 	orrmi.w	r3, r3, #32
    c47e:	6023      	strmi	r3, [r4, #0]
    c480:	b91d      	cbnz	r5, c48a <_printf_i+0x196>
    c482:	6823      	ldr	r3, [r4, #0]
    c484:	f023 0320 	bic.w	r3, r3, #32
    c488:	6023      	str	r3, [r4, #0]
    c48a:	2310      	movs	r3, #16
    c48c:	e7b0      	b.n	c3f0 <_printf_i+0xfc>
    c48e:	6823      	ldr	r3, [r4, #0]
    c490:	f043 0320 	orr.w	r3, r3, #32
    c494:	6023      	str	r3, [r4, #0]
    c496:	2378      	movs	r3, #120	; 0x78
    c498:	4828      	ldr	r0, [pc, #160]	; (c53c <_printf_i+0x248>)
    c49a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    c49e:	e7e3      	b.n	c468 <_printf_i+0x174>
    c4a0:	065e      	lsls	r6, r3, #25
    c4a2:	bf48      	it	mi
    c4a4:	b2ad      	uxthmi	r5, r5
    c4a6:	e7e6      	b.n	c476 <_printf_i+0x182>
    c4a8:	4616      	mov	r6, r2
    c4aa:	e7bb      	b.n	c424 <_printf_i+0x130>
    c4ac:	680b      	ldr	r3, [r1, #0]
    c4ae:	6826      	ldr	r6, [r4, #0]
    c4b0:	6960      	ldr	r0, [r4, #20]
    c4b2:	1d1d      	adds	r5, r3, #4
    c4b4:	600d      	str	r5, [r1, #0]
    c4b6:	0635      	lsls	r5, r6, #24
    c4b8:	681b      	ldr	r3, [r3, #0]
    c4ba:	d501      	bpl.n	c4c0 <_printf_i+0x1cc>
    c4bc:	6018      	str	r0, [r3, #0]
    c4be:	e002      	b.n	c4c6 <_printf_i+0x1d2>
    c4c0:	0671      	lsls	r1, r6, #25
    c4c2:	d5fb      	bpl.n	c4bc <_printf_i+0x1c8>
    c4c4:	8018      	strh	r0, [r3, #0]
    c4c6:	2300      	movs	r3, #0
    c4c8:	6123      	str	r3, [r4, #16]
    c4ca:	4616      	mov	r6, r2
    c4cc:	e7ba      	b.n	c444 <_printf_i+0x150>
    c4ce:	680b      	ldr	r3, [r1, #0]
    c4d0:	1d1a      	adds	r2, r3, #4
    c4d2:	600a      	str	r2, [r1, #0]
    c4d4:	681e      	ldr	r6, [r3, #0]
    c4d6:	6862      	ldr	r2, [r4, #4]
    c4d8:	2100      	movs	r1, #0
    c4da:	4630      	mov	r0, r6
    c4dc:	f7f3 fe10 	bl	100 <memchr>
    c4e0:	b108      	cbz	r0, c4e6 <_printf_i+0x1f2>
    c4e2:	1b80      	subs	r0, r0, r6
    c4e4:	6060      	str	r0, [r4, #4]
    c4e6:	6863      	ldr	r3, [r4, #4]
    c4e8:	6123      	str	r3, [r4, #16]
    c4ea:	2300      	movs	r3, #0
    c4ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    c4f0:	e7a8      	b.n	c444 <_printf_i+0x150>
    c4f2:	6923      	ldr	r3, [r4, #16]
    c4f4:	4632      	mov	r2, r6
    c4f6:	4649      	mov	r1, r9
    c4f8:	4640      	mov	r0, r8
    c4fa:	47d0      	blx	sl
    c4fc:	3001      	adds	r0, #1
    c4fe:	d0ab      	beq.n	c458 <_printf_i+0x164>
    c500:	6823      	ldr	r3, [r4, #0]
    c502:	079b      	lsls	r3, r3, #30
    c504:	d413      	bmi.n	c52e <_printf_i+0x23a>
    c506:	68e0      	ldr	r0, [r4, #12]
    c508:	9b03      	ldr	r3, [sp, #12]
    c50a:	4298      	cmp	r0, r3
    c50c:	bfb8      	it	lt
    c50e:	4618      	movlt	r0, r3
    c510:	e7a4      	b.n	c45c <_printf_i+0x168>
    c512:	2301      	movs	r3, #1
    c514:	4632      	mov	r2, r6
    c516:	4649      	mov	r1, r9
    c518:	4640      	mov	r0, r8
    c51a:	47d0      	blx	sl
    c51c:	3001      	adds	r0, #1
    c51e:	d09b      	beq.n	c458 <_printf_i+0x164>
    c520:	3501      	adds	r5, #1
    c522:	68e3      	ldr	r3, [r4, #12]
    c524:	9903      	ldr	r1, [sp, #12]
    c526:	1a5b      	subs	r3, r3, r1
    c528:	42ab      	cmp	r3, r5
    c52a:	dcf2      	bgt.n	c512 <_printf_i+0x21e>
    c52c:	e7eb      	b.n	c506 <_printf_i+0x212>
    c52e:	2500      	movs	r5, #0
    c530:	f104 0619 	add.w	r6, r4, #25
    c534:	e7f5      	b.n	c522 <_printf_i+0x22e>
    c536:	bf00      	nop
    c538:	0001d6fb 	.word	0x0001d6fb
    c53c:	0001e2b6 	.word	0x0001e2b6

0000c540 <_scanf_chars>:
    c540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c544:	4615      	mov	r5, r2
    c546:	688a      	ldr	r2, [r1, #8]
    c548:	4680      	mov	r8, r0
    c54a:	460c      	mov	r4, r1
    c54c:	b932      	cbnz	r2, c55c <_scanf_chars+0x1c>
    c54e:	698a      	ldr	r2, [r1, #24]
    c550:	2a00      	cmp	r2, #0
    c552:	bf0c      	ite	eq
    c554:	2201      	moveq	r2, #1
    c556:	f04f 32ff 	movne.w	r2, #4294967295
    c55a:	608a      	str	r2, [r1, #8]
    c55c:	6822      	ldr	r2, [r4, #0]
    c55e:	f8df 908c 	ldr.w	r9, [pc, #140]	; c5ec <_scanf_chars+0xac>
    c562:	06d1      	lsls	r1, r2, #27
    c564:	bf5f      	itttt	pl
    c566:	681a      	ldrpl	r2, [r3, #0]
    c568:	1d11      	addpl	r1, r2, #4
    c56a:	6019      	strpl	r1, [r3, #0]
    c56c:	6816      	ldrpl	r6, [r2, #0]
    c56e:	2700      	movs	r7, #0
    c570:	69a0      	ldr	r0, [r4, #24]
    c572:	b188      	cbz	r0, c598 <_scanf_chars+0x58>
    c574:	2801      	cmp	r0, #1
    c576:	d107      	bne.n	c588 <_scanf_chars+0x48>
    c578:	682b      	ldr	r3, [r5, #0]
    c57a:	781a      	ldrb	r2, [r3, #0]
    c57c:	6963      	ldr	r3, [r4, #20]
    c57e:	5c9b      	ldrb	r3, [r3, r2]
    c580:	b953      	cbnz	r3, c598 <_scanf_chars+0x58>
    c582:	bb27      	cbnz	r7, c5ce <_scanf_chars+0x8e>
    c584:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    c588:	2802      	cmp	r0, #2
    c58a:	d120      	bne.n	c5ce <_scanf_chars+0x8e>
    c58c:	682b      	ldr	r3, [r5, #0]
    c58e:	781b      	ldrb	r3, [r3, #0]
    c590:	f813 3009 	ldrb.w	r3, [r3, r9]
    c594:	071b      	lsls	r3, r3, #28
    c596:	d41a      	bmi.n	c5ce <_scanf_chars+0x8e>
    c598:	6823      	ldr	r3, [r4, #0]
    c59a:	06da      	lsls	r2, r3, #27
    c59c:	bf5e      	ittt	pl
    c59e:	682b      	ldrpl	r3, [r5, #0]
    c5a0:	781b      	ldrbpl	r3, [r3, #0]
    c5a2:	f806 3b01 	strbpl.w	r3, [r6], #1
    c5a6:	682a      	ldr	r2, [r5, #0]
    c5a8:	686b      	ldr	r3, [r5, #4]
    c5aa:	3201      	adds	r2, #1
    c5ac:	602a      	str	r2, [r5, #0]
    c5ae:	68a2      	ldr	r2, [r4, #8]
    c5b0:	3b01      	subs	r3, #1
    c5b2:	3a01      	subs	r2, #1
    c5b4:	606b      	str	r3, [r5, #4]
    c5b6:	3701      	adds	r7, #1
    c5b8:	60a2      	str	r2, [r4, #8]
    c5ba:	b142      	cbz	r2, c5ce <_scanf_chars+0x8e>
    c5bc:	2b00      	cmp	r3, #0
    c5be:	dcd7      	bgt.n	c570 <_scanf_chars+0x30>
    c5c0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    c5c4:	4629      	mov	r1, r5
    c5c6:	4640      	mov	r0, r8
    c5c8:	4798      	blx	r3
    c5ca:	2800      	cmp	r0, #0
    c5cc:	d0d0      	beq.n	c570 <_scanf_chars+0x30>
    c5ce:	6823      	ldr	r3, [r4, #0]
    c5d0:	f013 0310 	ands.w	r3, r3, #16
    c5d4:	d105      	bne.n	c5e2 <_scanf_chars+0xa2>
    c5d6:	68e2      	ldr	r2, [r4, #12]
    c5d8:	3201      	adds	r2, #1
    c5da:	60e2      	str	r2, [r4, #12]
    c5dc:	69a2      	ldr	r2, [r4, #24]
    c5de:	b102      	cbz	r2, c5e2 <_scanf_chars+0xa2>
    c5e0:	7033      	strb	r3, [r6, #0]
    c5e2:	6923      	ldr	r3, [r4, #16]
    c5e4:	441f      	add	r7, r3
    c5e6:	6127      	str	r7, [r4, #16]
    c5e8:	2000      	movs	r0, #0
    c5ea:	e7cb      	b.n	c584 <_scanf_chars+0x44>
    c5ec:	0001e1a5 	.word	0x0001e1a5

0000c5f0 <_scanf_i>:
    c5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c5f4:	4698      	mov	r8, r3
    c5f6:	4b74      	ldr	r3, [pc, #464]	; (c7c8 <_scanf_i+0x1d8>)
    c5f8:	460c      	mov	r4, r1
    c5fa:	4682      	mov	sl, r0
    c5fc:	4616      	mov	r6, r2
    c5fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    c602:	b087      	sub	sp, #28
    c604:	ab03      	add	r3, sp, #12
    c606:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    c60a:	4b70      	ldr	r3, [pc, #448]	; (c7cc <_scanf_i+0x1dc>)
    c60c:	69a1      	ldr	r1, [r4, #24]
    c60e:	4a70      	ldr	r2, [pc, #448]	; (c7d0 <_scanf_i+0x1e0>)
    c610:	2903      	cmp	r1, #3
    c612:	bf18      	it	ne
    c614:	461a      	movne	r2, r3
    c616:	68a3      	ldr	r3, [r4, #8]
    c618:	9201      	str	r2, [sp, #4]
    c61a:	1e5a      	subs	r2, r3, #1
    c61c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
    c620:	bf88      	it	hi
    c622:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
    c626:	4627      	mov	r7, r4
    c628:	bf82      	ittt	hi
    c62a:	eb03 0905 	addhi.w	r9, r3, r5
    c62e:	f240 135d 	movwhi	r3, #349	; 0x15d
    c632:	60a3      	strhi	r3, [r4, #8]
    c634:	f857 3b1c 	ldr.w	r3, [r7], #28
    c638:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
    c63c:	bf98      	it	ls
    c63e:	f04f 0900 	movls.w	r9, #0
    c642:	6023      	str	r3, [r4, #0]
    c644:	463d      	mov	r5, r7
    c646:	f04f 0b00 	mov.w	fp, #0
    c64a:	6831      	ldr	r1, [r6, #0]
    c64c:	ab03      	add	r3, sp, #12
    c64e:	7809      	ldrb	r1, [r1, #0]
    c650:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
    c654:	2202      	movs	r2, #2
    c656:	f7f3 fd53 	bl	100 <memchr>
    c65a:	b328      	cbz	r0, c6a8 <_scanf_i+0xb8>
    c65c:	f1bb 0f01 	cmp.w	fp, #1
    c660:	d159      	bne.n	c716 <_scanf_i+0x126>
    c662:	6862      	ldr	r2, [r4, #4]
    c664:	b92a      	cbnz	r2, c672 <_scanf_i+0x82>
    c666:	6822      	ldr	r2, [r4, #0]
    c668:	2308      	movs	r3, #8
    c66a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    c66e:	6063      	str	r3, [r4, #4]
    c670:	6022      	str	r2, [r4, #0]
    c672:	6822      	ldr	r2, [r4, #0]
    c674:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
    c678:	6022      	str	r2, [r4, #0]
    c67a:	68a2      	ldr	r2, [r4, #8]
    c67c:	1e51      	subs	r1, r2, #1
    c67e:	60a1      	str	r1, [r4, #8]
    c680:	b192      	cbz	r2, c6a8 <_scanf_i+0xb8>
    c682:	6832      	ldr	r2, [r6, #0]
    c684:	1c51      	adds	r1, r2, #1
    c686:	6031      	str	r1, [r6, #0]
    c688:	7812      	ldrb	r2, [r2, #0]
    c68a:	f805 2b01 	strb.w	r2, [r5], #1
    c68e:	6872      	ldr	r2, [r6, #4]
    c690:	3a01      	subs	r2, #1
    c692:	2a00      	cmp	r2, #0
    c694:	6072      	str	r2, [r6, #4]
    c696:	dc07      	bgt.n	c6a8 <_scanf_i+0xb8>
    c698:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
    c69c:	4631      	mov	r1, r6
    c69e:	4650      	mov	r0, sl
    c6a0:	4790      	blx	r2
    c6a2:	2800      	cmp	r0, #0
    c6a4:	f040 8085 	bne.w	c7b2 <_scanf_i+0x1c2>
    c6a8:	f10b 0b01 	add.w	fp, fp, #1
    c6ac:	f1bb 0f03 	cmp.w	fp, #3
    c6b0:	d1cb      	bne.n	c64a <_scanf_i+0x5a>
    c6b2:	6863      	ldr	r3, [r4, #4]
    c6b4:	b90b      	cbnz	r3, c6ba <_scanf_i+0xca>
    c6b6:	230a      	movs	r3, #10
    c6b8:	6063      	str	r3, [r4, #4]
    c6ba:	6863      	ldr	r3, [r4, #4]
    c6bc:	4945      	ldr	r1, [pc, #276]	; (c7d4 <_scanf_i+0x1e4>)
    c6be:	6960      	ldr	r0, [r4, #20]
    c6c0:	1ac9      	subs	r1, r1, r3
    c6c2:	f00f ff0e 	bl	1c4e2 <__sccl>
    c6c6:	f04f 0b00 	mov.w	fp, #0
    c6ca:	68a3      	ldr	r3, [r4, #8]
    c6cc:	6822      	ldr	r2, [r4, #0]
    c6ce:	2b00      	cmp	r3, #0
    c6d0:	d03d      	beq.n	c74e <_scanf_i+0x15e>
    c6d2:	6831      	ldr	r1, [r6, #0]
    c6d4:	6960      	ldr	r0, [r4, #20]
    c6d6:	f891 c000 	ldrb.w	ip, [r1]
    c6da:	f810 000c 	ldrb.w	r0, [r0, ip]
    c6de:	2800      	cmp	r0, #0
    c6e0:	d035      	beq.n	c74e <_scanf_i+0x15e>
    c6e2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
    c6e6:	d124      	bne.n	c732 <_scanf_i+0x142>
    c6e8:	0510      	lsls	r0, r2, #20
    c6ea:	d522      	bpl.n	c732 <_scanf_i+0x142>
    c6ec:	f10b 0b01 	add.w	fp, fp, #1
    c6f0:	f1b9 0f00 	cmp.w	r9, #0
    c6f4:	d003      	beq.n	c6fe <_scanf_i+0x10e>
    c6f6:	3301      	adds	r3, #1
    c6f8:	f109 39ff 	add.w	r9, r9, #4294967295
    c6fc:	60a3      	str	r3, [r4, #8]
    c6fe:	6873      	ldr	r3, [r6, #4]
    c700:	3b01      	subs	r3, #1
    c702:	2b00      	cmp	r3, #0
    c704:	6073      	str	r3, [r6, #4]
    c706:	dd1b      	ble.n	c740 <_scanf_i+0x150>
    c708:	6833      	ldr	r3, [r6, #0]
    c70a:	3301      	adds	r3, #1
    c70c:	6033      	str	r3, [r6, #0]
    c70e:	68a3      	ldr	r3, [r4, #8]
    c710:	3b01      	subs	r3, #1
    c712:	60a3      	str	r3, [r4, #8]
    c714:	e7d9      	b.n	c6ca <_scanf_i+0xda>
    c716:	f1bb 0f02 	cmp.w	fp, #2
    c71a:	d1ae      	bne.n	c67a <_scanf_i+0x8a>
    c71c:	6822      	ldr	r2, [r4, #0]
    c71e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
    c722:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    c726:	d1bf      	bne.n	c6a8 <_scanf_i+0xb8>
    c728:	2310      	movs	r3, #16
    c72a:	6063      	str	r3, [r4, #4]
    c72c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    c730:	e7a2      	b.n	c678 <_scanf_i+0x88>
    c732:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
    c736:	6022      	str	r2, [r4, #0]
    c738:	780b      	ldrb	r3, [r1, #0]
    c73a:	f805 3b01 	strb.w	r3, [r5], #1
    c73e:	e7de      	b.n	c6fe <_scanf_i+0x10e>
    c740:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    c744:	4631      	mov	r1, r6
    c746:	4650      	mov	r0, sl
    c748:	4798      	blx	r3
    c74a:	2800      	cmp	r0, #0
    c74c:	d0df      	beq.n	c70e <_scanf_i+0x11e>
    c74e:	6823      	ldr	r3, [r4, #0]
    c750:	05d9      	lsls	r1, r3, #23
    c752:	d50d      	bpl.n	c770 <_scanf_i+0x180>
    c754:	42bd      	cmp	r5, r7
    c756:	d909      	bls.n	c76c <_scanf_i+0x17c>
    c758:	f815 1c01 	ldrb.w	r1, [r5, #-1]
    c75c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
    c760:	4632      	mov	r2, r6
    c762:	4650      	mov	r0, sl
    c764:	4798      	blx	r3
    c766:	f105 39ff 	add.w	r9, r5, #4294967295
    c76a:	464d      	mov	r5, r9
    c76c:	42bd      	cmp	r5, r7
    c76e:	d028      	beq.n	c7c2 <_scanf_i+0x1d2>
    c770:	6822      	ldr	r2, [r4, #0]
    c772:	f012 0210 	ands.w	r2, r2, #16
    c776:	d113      	bne.n	c7a0 <_scanf_i+0x1b0>
    c778:	702a      	strb	r2, [r5, #0]
    c77a:	6863      	ldr	r3, [r4, #4]
    c77c:	9e01      	ldr	r6, [sp, #4]
    c77e:	4639      	mov	r1, r7
    c780:	4650      	mov	r0, sl
    c782:	47b0      	blx	r6
    c784:	f8d8 3000 	ldr.w	r3, [r8]
    c788:	6821      	ldr	r1, [r4, #0]
    c78a:	1d1a      	adds	r2, r3, #4
    c78c:	f8c8 2000 	str.w	r2, [r8]
    c790:	f011 0f20 	tst.w	r1, #32
    c794:	681b      	ldr	r3, [r3, #0]
    c796:	d00f      	beq.n	c7b8 <_scanf_i+0x1c8>
    c798:	6018      	str	r0, [r3, #0]
    c79a:	68e3      	ldr	r3, [r4, #12]
    c79c:	3301      	adds	r3, #1
    c79e:	60e3      	str	r3, [r4, #12]
    c7a0:	1bed      	subs	r5, r5, r7
    c7a2:	44ab      	add	fp, r5
    c7a4:	6925      	ldr	r5, [r4, #16]
    c7a6:	445d      	add	r5, fp
    c7a8:	6125      	str	r5, [r4, #16]
    c7aa:	2000      	movs	r0, #0
    c7ac:	b007      	add	sp, #28
    c7ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c7b2:	f04f 0b00 	mov.w	fp, #0
    c7b6:	e7ca      	b.n	c74e <_scanf_i+0x15e>
    c7b8:	07ca      	lsls	r2, r1, #31
    c7ba:	bf4c      	ite	mi
    c7bc:	8018      	strhmi	r0, [r3, #0]
    c7be:	6018      	strpl	r0, [r3, #0]
    c7c0:	e7eb      	b.n	c79a <_scanf_i+0x1aa>
    c7c2:	2001      	movs	r0, #1
    c7c4:	e7f2      	b.n	c7ac <_scanf_i+0x1bc>
    c7c6:	bf00      	nop
    c7c8:	0001c950 	.word	0x0001c950
    c7cc:	0001c55b 	.word	0x0001c55b
    c7d0:	0001c557 	.word	0x0001c557
    c7d4:	0001e2dd 	.word	0x0001e2dd

0000c7d8 <_strtol_l.isra.0>:
    c7d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c7dc:	4e3a      	ldr	r6, [pc, #232]	; (c8c8 <_strtol_l.isra.0+0xf0>)
    c7de:	4686      	mov	lr, r0
    c7e0:	468c      	mov	ip, r1
    c7e2:	4660      	mov	r0, ip
    c7e4:	f81c 4b01 	ldrb.w	r4, [ip], #1
    c7e8:	5da5      	ldrb	r5, [r4, r6]
    c7ea:	f015 0508 	ands.w	r5, r5, #8
    c7ee:	d1f8      	bne.n	c7e2 <_strtol_l.isra.0+0xa>
    c7f0:	2c2d      	cmp	r4, #45	; 0x2d
    c7f2:	d133      	bne.n	c85c <_strtol_l.isra.0+0x84>
    c7f4:	f89c 4000 	ldrb.w	r4, [ip]
    c7f8:	f04f 0801 	mov.w	r8, #1
    c7fc:	f100 0c02 	add.w	ip, r0, #2
    c800:	2b00      	cmp	r3, #0
    c802:	d05c      	beq.n	c8be <_strtol_l.isra.0+0xe6>
    c804:	2b10      	cmp	r3, #16
    c806:	d10c      	bne.n	c822 <_strtol_l.isra.0+0x4a>
    c808:	2c30      	cmp	r4, #48	; 0x30
    c80a:	d10a      	bne.n	c822 <_strtol_l.isra.0+0x4a>
    c80c:	f89c 0000 	ldrb.w	r0, [ip]
    c810:	f000 00df 	and.w	r0, r0, #223	; 0xdf
    c814:	2858      	cmp	r0, #88	; 0x58
    c816:	d14d      	bne.n	c8b4 <_strtol_l.isra.0+0xdc>
    c818:	f89c 4001 	ldrb.w	r4, [ip, #1]
    c81c:	2310      	movs	r3, #16
    c81e:	f10c 0c02 	add.w	ip, ip, #2
    c822:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
    c826:	3f01      	subs	r7, #1
    c828:	2600      	movs	r6, #0
    c82a:	fbb7 f9f3 	udiv	r9, r7, r3
    c82e:	4630      	mov	r0, r6
    c830:	fb03 7a19 	mls	sl, r3, r9, r7
    c834:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
    c838:	2d09      	cmp	r5, #9
    c83a:	d818      	bhi.n	c86e <_strtol_l.isra.0+0x96>
    c83c:	462c      	mov	r4, r5
    c83e:	42a3      	cmp	r3, r4
    c840:	dd24      	ble.n	c88c <_strtol_l.isra.0+0xb4>
    c842:	1c75      	adds	r5, r6, #1
    c844:	d007      	beq.n	c856 <_strtol_l.isra.0+0x7e>
    c846:	4581      	cmp	r9, r0
    c848:	d31d      	bcc.n	c886 <_strtol_l.isra.0+0xae>
    c84a:	d101      	bne.n	c850 <_strtol_l.isra.0+0x78>
    c84c:	45a2      	cmp	sl, r4
    c84e:	db1a      	blt.n	c886 <_strtol_l.isra.0+0xae>
    c850:	fb00 4003 	mla	r0, r0, r3, r4
    c854:	2601      	movs	r6, #1
    c856:	f81c 4b01 	ldrb.w	r4, [ip], #1
    c85a:	e7eb      	b.n	c834 <_strtol_l.isra.0+0x5c>
    c85c:	2c2b      	cmp	r4, #43	; 0x2b
    c85e:	bf08      	it	eq
    c860:	f89c 4000 	ldrbeq.w	r4, [ip]
    c864:	46a8      	mov	r8, r5
    c866:	bf08      	it	eq
    c868:	f100 0c02 	addeq.w	ip, r0, #2
    c86c:	e7c8      	b.n	c800 <_strtol_l.isra.0+0x28>
    c86e:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
    c872:	2d19      	cmp	r5, #25
    c874:	d801      	bhi.n	c87a <_strtol_l.isra.0+0xa2>
    c876:	3c37      	subs	r4, #55	; 0x37
    c878:	e7e1      	b.n	c83e <_strtol_l.isra.0+0x66>
    c87a:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
    c87e:	2d19      	cmp	r5, #25
    c880:	d804      	bhi.n	c88c <_strtol_l.isra.0+0xb4>
    c882:	3c57      	subs	r4, #87	; 0x57
    c884:	e7db      	b.n	c83e <_strtol_l.isra.0+0x66>
    c886:	f04f 36ff 	mov.w	r6, #4294967295
    c88a:	e7e4      	b.n	c856 <_strtol_l.isra.0+0x7e>
    c88c:	1c73      	adds	r3, r6, #1
    c88e:	d106      	bne.n	c89e <_strtol_l.isra.0+0xc6>
    c890:	2322      	movs	r3, #34	; 0x22
    c892:	f8ce 3000 	str.w	r3, [lr]
    c896:	4638      	mov	r0, r7
    c898:	b942      	cbnz	r2, c8ac <_strtol_l.isra.0+0xd4>
    c89a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c89e:	f1b8 0f00 	cmp.w	r8, #0
    c8a2:	d000      	beq.n	c8a6 <_strtol_l.isra.0+0xce>
    c8a4:	4240      	negs	r0, r0
    c8a6:	2a00      	cmp	r2, #0
    c8a8:	d0f7      	beq.n	c89a <_strtol_l.isra.0+0xc2>
    c8aa:	b10e      	cbz	r6, c8b0 <_strtol_l.isra.0+0xd8>
    c8ac:	f10c 31ff 	add.w	r1, ip, #4294967295
    c8b0:	6011      	str	r1, [r2, #0]
    c8b2:	e7f2      	b.n	c89a <_strtol_l.isra.0+0xc2>
    c8b4:	2430      	movs	r4, #48	; 0x30
    c8b6:	2b00      	cmp	r3, #0
    c8b8:	d1b3      	bne.n	c822 <_strtol_l.isra.0+0x4a>
    c8ba:	2308      	movs	r3, #8
    c8bc:	e7b1      	b.n	c822 <_strtol_l.isra.0+0x4a>
    c8be:	2c30      	cmp	r4, #48	; 0x30
    c8c0:	d0a4      	beq.n	c80c <_strtol_l.isra.0+0x34>
    c8c2:	230a      	movs	r3, #10
    c8c4:	e7ad      	b.n	c822 <_strtol_l.isra.0+0x4a>
    c8c6:	bf00      	nop
    c8c8:	0001e1a5 	.word	0x0001e1a5

0000c8cc <_strtoul_l.isra.0>:
    c8cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c8d0:	4e3b      	ldr	r6, [pc, #236]	; (c9c0 <_strtoul_l.isra.0+0xf4>)
    c8d2:	4686      	mov	lr, r0
    c8d4:	468c      	mov	ip, r1
    c8d6:	4660      	mov	r0, ip
    c8d8:	f81c 4b01 	ldrb.w	r4, [ip], #1
    c8dc:	5da5      	ldrb	r5, [r4, r6]
    c8de:	f015 0508 	ands.w	r5, r5, #8
    c8e2:	d1f8      	bne.n	c8d6 <_strtoul_l.isra.0+0xa>
    c8e4:	2c2d      	cmp	r4, #45	; 0x2d
    c8e6:	d134      	bne.n	c952 <_strtoul_l.isra.0+0x86>
    c8e8:	f89c 4000 	ldrb.w	r4, [ip]
    c8ec:	f04f 0801 	mov.w	r8, #1
    c8f0:	f100 0c02 	add.w	ip, r0, #2
    c8f4:	2b00      	cmp	r3, #0
    c8f6:	d05e      	beq.n	c9b6 <_strtoul_l.isra.0+0xea>
    c8f8:	2b10      	cmp	r3, #16
    c8fa:	d10c      	bne.n	c916 <_strtoul_l.isra.0+0x4a>
    c8fc:	2c30      	cmp	r4, #48	; 0x30
    c8fe:	d10a      	bne.n	c916 <_strtoul_l.isra.0+0x4a>
    c900:	f89c 0000 	ldrb.w	r0, [ip]
    c904:	f000 00df 	and.w	r0, r0, #223	; 0xdf
    c908:	2858      	cmp	r0, #88	; 0x58
    c90a:	d14f      	bne.n	c9ac <_strtoul_l.isra.0+0xe0>
    c90c:	f89c 4001 	ldrb.w	r4, [ip, #1]
    c910:	2310      	movs	r3, #16
    c912:	f10c 0c02 	add.w	ip, ip, #2
    c916:	f04f 37ff 	mov.w	r7, #4294967295
    c91a:	2500      	movs	r5, #0
    c91c:	fbb7 f7f3 	udiv	r7, r7, r3
    c920:	fb03 f907 	mul.w	r9, r3, r7
    c924:	ea6f 0909 	mvn.w	r9, r9
    c928:	4628      	mov	r0, r5
    c92a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
    c92e:	2e09      	cmp	r6, #9
    c930:	d818      	bhi.n	c964 <_strtoul_l.isra.0+0x98>
    c932:	4634      	mov	r4, r6
    c934:	42a3      	cmp	r3, r4
    c936:	dd24      	ble.n	c982 <_strtoul_l.isra.0+0xb6>
    c938:	2d00      	cmp	r5, #0
    c93a:	db1f      	blt.n	c97c <_strtoul_l.isra.0+0xb0>
    c93c:	4287      	cmp	r7, r0
    c93e:	d31d      	bcc.n	c97c <_strtoul_l.isra.0+0xb0>
    c940:	d101      	bne.n	c946 <_strtoul_l.isra.0+0x7a>
    c942:	45a1      	cmp	r9, r4
    c944:	db1a      	blt.n	c97c <_strtoul_l.isra.0+0xb0>
    c946:	fb00 4003 	mla	r0, r0, r3, r4
    c94a:	2501      	movs	r5, #1
    c94c:	f81c 4b01 	ldrb.w	r4, [ip], #1
    c950:	e7eb      	b.n	c92a <_strtoul_l.isra.0+0x5e>
    c952:	2c2b      	cmp	r4, #43	; 0x2b
    c954:	bf08      	it	eq
    c956:	f89c 4000 	ldrbeq.w	r4, [ip]
    c95a:	46a8      	mov	r8, r5
    c95c:	bf08      	it	eq
    c95e:	f100 0c02 	addeq.w	ip, r0, #2
    c962:	e7c7      	b.n	c8f4 <_strtoul_l.isra.0+0x28>
    c964:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
    c968:	2e19      	cmp	r6, #25
    c96a:	d801      	bhi.n	c970 <_strtoul_l.isra.0+0xa4>
    c96c:	3c37      	subs	r4, #55	; 0x37
    c96e:	e7e1      	b.n	c934 <_strtoul_l.isra.0+0x68>
    c970:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
    c974:	2e19      	cmp	r6, #25
    c976:	d804      	bhi.n	c982 <_strtoul_l.isra.0+0xb6>
    c978:	3c57      	subs	r4, #87	; 0x57
    c97a:	e7db      	b.n	c934 <_strtoul_l.isra.0+0x68>
    c97c:	f04f 35ff 	mov.w	r5, #4294967295
    c980:	e7e4      	b.n	c94c <_strtoul_l.isra.0+0x80>
    c982:	2d00      	cmp	r5, #0
    c984:	da07      	bge.n	c996 <_strtoul_l.isra.0+0xca>
    c986:	2322      	movs	r3, #34	; 0x22
    c988:	f8ce 3000 	str.w	r3, [lr]
    c98c:	f04f 30ff 	mov.w	r0, #4294967295
    c990:	b942      	cbnz	r2, c9a4 <_strtoul_l.isra.0+0xd8>
    c992:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    c996:	f1b8 0f00 	cmp.w	r8, #0
    c99a:	d000      	beq.n	c99e <_strtoul_l.isra.0+0xd2>
    c99c:	4240      	negs	r0, r0
    c99e:	2a00      	cmp	r2, #0
    c9a0:	d0f7      	beq.n	c992 <_strtoul_l.isra.0+0xc6>
    c9a2:	b10d      	cbz	r5, c9a8 <_strtoul_l.isra.0+0xdc>
    c9a4:	f10c 31ff 	add.w	r1, ip, #4294967295
    c9a8:	6011      	str	r1, [r2, #0]
    c9aa:	e7f2      	b.n	c992 <_strtoul_l.isra.0+0xc6>
    c9ac:	2430      	movs	r4, #48	; 0x30
    c9ae:	2b00      	cmp	r3, #0
    c9b0:	d1b1      	bne.n	c916 <_strtoul_l.isra.0+0x4a>
    c9b2:	2308      	movs	r3, #8
    c9b4:	e7af      	b.n	c916 <_strtoul_l.isra.0+0x4a>
    c9b6:	2c30      	cmp	r4, #48	; 0x30
    c9b8:	d0a2      	beq.n	c900 <_strtoul_l.isra.0+0x34>
    c9ba:	230a      	movs	r3, #10
    c9bc:	e7ab      	b.n	c916 <_strtoul_l.isra.0+0x4a>
    c9be:	bf00      	nop
    c9c0:	0001e1a5 	.word	0x0001e1a5

0000c9c4 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    c9c4:	4770      	bx	lr

0000c9c6 <svr_getAttributeAccess>:
}
    c9c6:	2000      	movs	r0, #0
    c9c8:	4770      	bx	lr

0000c9ca <svr_getMethodAccess>:
    c9ca:	2000      	movs	r0, #0
    c9cc:	4770      	bx	lr

0000c9ce <svr_connected>:
}
    c9ce:	2000      	movs	r0, #0
    c9d0:	4770      	bx	lr

0000c9d2 <svr_isTarget>:
}
    c9d2:	2000      	movs	r0, #0
    c9d4:	4770      	bx	lr

0000c9d6 <ba_init>:

//Initialize bit array.
void ba_init(bitArray* arr)
{
    arr->capacity = 0;
    arr->data = NULL;
    c9d6:	2300      	movs	r3, #0
    arr->capacity = 0;
    c9d8:	e9c0 3300 	strd	r3, r3, [r0]
#ifndef GX_DLMS_MICROCONTROLLER
    arr->position = 0;
#endif //GX_DLMS_MICROCONTROLLER
    arr->size = 0;
}
    c9dc:	4770      	bx	lr

0000c9de <ba_attach>:
    unsigned char* value,
    uint16_t count,
    uint16_t capacity)
{
    arr->data = value;
    arr->capacity = (uint16_t)(0x8000 | capacity);
    c9de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    c9e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    arr->data = value;
    c9e6:	6001      	str	r1, [r0, #0]
    arr->capacity = (uint16_t)(0x8000 | capacity);
    c9e8:	8083      	strh	r3, [r0, #4]
    arr->size = count;
    c9ea:	80c2      	strh	r2, [r0, #6]
#ifndef GX_DLMS_MICROCONTROLLER
    arr->position = 0;
#endif //GX_DLMS_MICROCONTROLLER
}
    c9ec:	4770      	bx	lr

0000c9ee <ba_capacity>:

//Allocate new size for the array in bytes.
int ba_capacity(bitArray* arr, uint16_t capacity)
{
#ifndef DLMS_IGNORE_MALLOC
    if (!ba_isAttached(arr))
    c9ee:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
    c9f2:	2b00      	cmp	r3, #0
{
    c9f4:	b570      	push	{r4, r5, r6, lr}
    c9f6:	4605      	mov	r5, r0
    c9f8:	460c      	mov	r4, r1
    if (!ba_isAttached(arr))
    c9fa:	db1b      	blt.n	ca34 <ba_capacity+0x46>
    {
        arr->capacity = capacity;
    c9fc:	6806      	ldr	r6, [r0, #0]
    c9fe:	8081      	strh	r1, [r0, #4]
        if (capacity == 0)
    ca00:	b931      	cbnz	r1, ca10 <ba_capacity+0x22>
        {
            if (arr->data != NULL)
    ca02:	b11e      	cbz	r6, ca0c <ba_capacity+0x1e>
            {
                gxfree(arr->data);
    ca04:	4630      	mov	r0, r6
    ca06:	f7ff f8dd 	bl	bbc4 <free>
                arr->data = NULL;
    ca0a:	602c      	str	r4, [r5, #0]
#endif //DLMS_IGNORE_MALLOC
    if (ba_getCapacity(arr) < capacity)
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    return 0;
    ca0c:	2000      	movs	r0, #0
    ca0e:	e00a      	b.n	ca26 <ba_capacity+0x38>
            if (arr->data == NULL)
    ca10:	4608      	mov	r0, r1
    ca12:	f7f4 fc5f 	bl	12d4 <ba_getByteCount>
    ca16:	4601      	mov	r1, r0
    ca18:	b936      	cbnz	r6, ca28 <ba_capacity+0x3a>
                arr->data = (unsigned char*)gxmalloc(ba_getByteCount(arr->capacity));
    ca1a:	f7ff f8cb 	bl	bbb4 <malloc>
    ca1e:	6028      	str	r0, [r5, #0]
                if (arr->data == NULL)
    ca20:	b940      	cbnz	r0, ca34 <ba_capacity+0x46>
                    return DLMS_ERROR_CODE_OUTOFMEMORY;
    ca22:	f44f 7082 	mov.w	r0, #260	; 0x104
}
    ca26:	bd70      	pop	{r4, r5, r6, pc}
                unsigned char* tmp = (unsigned char*)gxrealloc(arr->data, ba_getByteCount(arr->capacity));
    ca28:	4630      	mov	r0, r6
    ca2a:	f7ff f97b 	bl	bd24 <realloc>
                if (tmp == NULL)
    ca2e:	2800      	cmp	r0, #0
    ca30:	d0f7      	beq.n	ca22 <ba_capacity+0x34>
                arr->data = tmp;
    ca32:	6028      	str	r0, [r5, #0]
    return arr->capacity & 0x7FFF;
    ca34:	88ab      	ldrh	r3, [r5, #4]
    if (ba_getCapacity(arr) < capacity)
    ca36:	f3c3 030e 	ubfx	r3, r3, #0, #15
    ca3a:	429c      	cmp	r4, r3
    ca3c:	d9e6      	bls.n	ca0c <ba_capacity+0x1e>
    ca3e:	e7f0      	b.n	ca22 <ba_capacity+0x34>

0000ca40 <ba_setByIndex>:
    return ret;
}

//Set bit by index.
int ba_setByIndex(bitArray* arr, uint16_t index, unsigned char item)
{
    ca40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ca42:	4607      	mov	r7, r0
    ca44:	460e      	mov	r6, r1
    ca46:	4615      	mov	r5, r2
    return (arr->capacity & 0x8000) == 0x8000;
    ca48:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
    ca4c:	88bb      	ldrh	r3, [r7, #4]
    int ret;
    unsigned char newItem = 0;
    int byteIndex;
    item = item == 0 ? 0 : 1;
    ca4e:	3d00      	subs	r5, #0
    ca50:	bf18      	it	ne
    ca52:	2501      	movne	r5, #1
    if (!ba_isAttached(arr))
    ca54:	2900      	cmp	r1, #0
    ca56:	db20      	blt.n	ca9a <ba_setByIndex+0x5a>
    {
        if (index >= arr->capacity)
    ca58:	42b3      	cmp	r3, r6
    ca5a:	d81e      	bhi.n	ca9a <ba_setByIndex+0x5a>
        {
            if ((ret = ba_capacity(arr, arr->capacity + BIT_ARRAY_CAPACITY)) != 0)
    ca5c:	3108      	adds	r1, #8
    ca5e:	b289      	uxth	r1, r1
    ca60:	4638      	mov	r0, r7
    ca62:	f7ff ffc4 	bl	c9ee <ba_capacity>
    ca66:	b9b8      	cbnz	r0, ca98 <ba_setByIndex+0x58>
            {
                return ret;
            }
            //If we are adding a bit to the higher than next byte.
            if (index >= arr->capacity)
    ca68:	88bb      	ldrh	r3, [r7, #4]
    ca6a:	42b3      	cmp	r3, r6
    ca6c:	d9ec      	bls.n	ca48 <ba_setByIndex+0x8>
            {
                return ba_setByIndex(arr, index, item);
            }
            newItem = 1;
    ca6e:	2401      	movs	r4, #1
        }
    }
    if (index >= arr->capacity)
    ca70:	88bb      	ldrh	r3, [r7, #4]
    ca72:	42b3      	cmp	r3, r6
    ca74:	d91c      	bls.n	cab0 <ba_setByIndex+0x70>
    double d = bitCount;
    ca76:	4630      	mov	r0, r6
    ca78:	f7f3 fce4 	bl	444 <__aeabi_i2d>
    d /= 8;
    ca7c:	2200      	movs	r2, #0
    ca7e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    ca82:	f7f3 fd49 	bl	518 <__aeabi_dmul>
    return (int)d;
    ca86:	f7f3 ff59 	bl	93c <__aeabi_d2iz>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    byteIndex = getByteIndex(index);
    if (index % 8 == 0 || newItem)
    ca8a:	0772      	lsls	r2, r6, #29
    ca8c:	683b      	ldr	r3, [r7, #0]
    ca8e:	d000      	beq.n	ca92 <ba_setByIndex+0x52>
    ca90:	b12c      	cbz	r4, ca9e <ba_setByIndex+0x5e>
    {
        arr->data[byteIndex] = (unsigned char)(item << 7);
    ca92:	01ed      	lsls	r5, r5, #7
    ca94:	541d      	strb	r5, [r3, r0]
    }
    else
    {
        arr->data[byteIndex] |= (item << (7 - (index % 8)));
    }
    return 0;
    ca96:	2000      	movs	r0, #0
}
    ca98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    unsigned char newItem = 0;
    ca9a:	2400      	movs	r4, #0
    ca9c:	e7e8      	b.n	ca70 <ba_setByIndex+0x30>
        arr->data[byteIndex] |= (item << (7 - (index % 8)));
    ca9e:	43f6      	mvns	r6, r6
    caa0:	f006 0607 	and.w	r6, r6, #7
    caa4:	fa05 f606 	lsl.w	r6, r5, r6
    caa8:	5c1d      	ldrb	r5, [r3, r0]
    caaa:	432e      	orrs	r6, r5
    caac:	541e      	strb	r6, [r3, r0]
    caae:	e7f2      	b.n	ca96 <ba_setByIndex+0x56>
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    cab0:	f44f 7082 	mov.w	r0, #260	; 0x104
    cab4:	e7f0      	b.n	ca98 <ba_setByIndex+0x58>

0000cab6 <ba_clear>:
    }
    return ret;
}

void ba_clear(bitArray* arr)
{
    cab6:	b510      	push	{r4, lr}
    cab8:	4604      	mov	r4, r0
#ifndef DLMS_IGNORE_MALLOC
    if (arr->data != NULL)
    caba:	6800      	ldr	r0, [r0, #0]
    cabc:	b118      	cbz	r0, cac6 <ba_clear+0x10>
    {
        gxfree(arr->data);
    cabe:	f7ff f881 	bl	bbc4 <free>
        arr->data = NULL;
    cac2:	2300      	movs	r3, #0
    cac4:	6023      	str	r3, [r4, #0]
    }
    arr->capacity = 0;
    cac6:	2300      	movs	r3, #0
    cac8:	6063      	str	r3, [r4, #4]
#endif //DLMS_IGNORE_MALLOC
    arr->size = 0;
#ifndef GX_DLMS_MICROCONTROLLER
    arr->position = 0;
#endif //GX_DLMS_MICROCONTROLLER
}
    caca:	bd10      	pop	{r4, pc}

0000cacc <ba_copy>:
{
    cacc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cace:	4614      	mov	r4, r2
    cad0:	4606      	mov	r6, r0
    cad2:	460f      	mov	r7, r1
    ba_clear(target);
    cad4:	f7ff ffef 	bl	cab6 <ba_clear>
    if (count != 0)
    cad8:	b184      	cbz	r4, cafc <ba_copy+0x30>
        if ((ret = ba_capacity(target, count)) == 0)
    cada:	4621      	mov	r1, r4
    cadc:	4630      	mov	r0, r6
    cade:	f7ff ff86 	bl	c9ee <ba_capacity>
    cae2:	4605      	mov	r5, r0
    cae4:	b940      	cbnz	r0, caf8 <ba_copy+0x2c>
            memcpy(target->data, source, ba_getByteCount(count));
    cae6:	4620      	mov	r0, r4
    cae8:	f7f4 fbf4 	bl	12d4 <ba_getByteCount>
    caec:	4639      	mov	r1, r7
    caee:	4602      	mov	r2, r0
    caf0:	6830      	ldr	r0, [r6, #0]
    caf2:	f00f faf5 	bl	1c0e0 <memcpy>
            target->size = count;
    caf6:	80f4      	strh	r4, [r6, #6]
}
    caf8:	4628      	mov	r0, r5
    cafa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    int ret = 0;
    cafc:	4625      	mov	r5, r4
    return ret;
    cafe:	e7fb      	b.n	caf8 <ba_copy+0x2c>

0000cb00 <ba_getByIndex>:
#endif //GX_DLMS_MICROCONTROLLER

int ba_getByIndex(bitArray* arr, int index, unsigned char* value)
{
    char ch;
    if (index >= arr->size)
    cb00:	88c3      	ldrh	r3, [r0, #6]
    cb02:	428b      	cmp	r3, r1
{
    cb04:	b570      	push	{r4, r5, r6, lr}
    cb06:	4605      	mov	r5, r0
    cb08:	460c      	mov	r4, r1
    cb0a:	4616      	mov	r6, r2
    if (index >= arr->size)
    cb0c:	dd1b      	ble.n	cb46 <ba_getByIndex+0x46>
    double d = bitCount;
    cb0e:	4608      	mov	r0, r1
    cb10:	f7f3 fc98 	bl	444 <__aeabi_i2d>
    d /= 8;
    cb14:	2200      	movs	r2, #0
    cb16:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    cb1a:	f7f3 fcfd 	bl	518 <__aeabi_dmul>
    return (int)d;
    cb1e:	f7f3 ff0d 	bl	93c <__aeabi_d2iz>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    ch = arr->data[getByteIndex(index)];
    *value = (ch & (1 << (7 - (index % 8)))) != 0;
    cb22:	4262      	negs	r2, r4
    ch = arr->data[getByteIndex(index)];
    cb24:	682b      	ldr	r3, [r5, #0]
    *value = (ch & (1 << (7 - (index % 8)))) != 0;
    cb26:	f002 0207 	and.w	r2, r2, #7
    cb2a:	5c1b      	ldrb	r3, [r3, r0]
    cb2c:	f004 0407 	and.w	r4, r4, #7
    cb30:	bf58      	it	pl
    cb32:	4254      	negpl	r4, r2
    cb34:	f1c4 0407 	rsb	r4, r4, #7
    cb38:	fa43 f404 	asr.w	r4, r3, r4
    cb3c:	f004 0401 	and.w	r4, r4, #1
    cb40:	7034      	strb	r4, [r6, #0]
    return 0;
    cb42:	2000      	movs	r0, #0
}
    cb44:	bd70      	pop	{r4, r5, r6, pc}
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    cb46:	f44f 7082 	mov.w	r0, #260	; 0x104
    cb4a:	e7fb      	b.n	cb44 <ba_getByIndex+0x44>

0000cb4c <ba_toInteger>:

int ba_toInteger(bitArray* arr, uint32_t* value)
{
    cb4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    *value = 0;
    cb4e:	2400      	movs	r4, #0
{
    cb50:	4606      	mov	r6, r0
    cb52:	460d      	mov	r5, r1
    *value = 0;
    cb54:	600c      	str	r4, [r1, #0]
    unsigned char ch;
    int pos, ret;
    for (pos = 0; pos != arr->size; ++pos)
    cb56:	88f3      	ldrh	r3, [r6, #6]
    cb58:	42a3      	cmp	r3, r4
    cb5a:	d102      	bne.n	cb62 <ba_toInteger+0x16>
        {
            return ret;
        }
        *value |= ch << pos;
    }
    return 0;
    cb5c:	2000      	movs	r0, #0
}
    cb5e:	b002      	add	sp, #8
    cb60:	bd70      	pop	{r4, r5, r6, pc}
        if ((ret = ba_getByIndex(arr, pos, &ch)) != 0)
    cb62:	f10d 0207 	add.w	r2, sp, #7
    cb66:	4621      	mov	r1, r4
    cb68:	4630      	mov	r0, r6
    cb6a:	f7ff ffc9 	bl	cb00 <ba_getByIndex>
    cb6e:	2800      	cmp	r0, #0
    cb70:	d1f5      	bne.n	cb5e <ba_toInteger+0x12>
        *value |= ch << pos;
    cb72:	f89d 3007 	ldrb.w	r3, [sp, #7]
    cb76:	fa03 f204 	lsl.w	r2, r3, r4
    cb7a:	682b      	ldr	r3, [r5, #0]
    cb7c:	4313      	orrs	r3, r2
    cb7e:	602b      	str	r3, [r5, #0]
    for (pos = 0; pos != arr->size; ++pos)
    cb80:	3401      	adds	r4, #1
    cb82:	e7e8      	b.n	cb56 <ba_toInteger+0xa>

0000cb84 <ba_toString>:

#ifndef DLMS_IGNORE_MALLOC
char* ba_toString(bitArray* arr)
{
    cb84:	b573      	push	{r0, r1, r4, r5, r6, lr}
    cb86:	4606      	mov	r6, r0
#if defined(_WIN32) || defined(_WIN64) || defined(__linux__)
    int pos, ret;
#else
    int pos;
#endif
    char* buff = (char*)gxmalloc(arr->size + 1);
    cb88:	88c0      	ldrh	r0, [r0, #6]
    cb8a:	3001      	adds	r0, #1
    cb8c:	f7ff f812 	bl	bbb4 <malloc>
    for (pos = 0; pos != arr->size; ++pos)
    cb90:	2400      	movs	r4, #0
    char* buff = (char*)gxmalloc(arr->size + 1);
    cb92:	4605      	mov	r5, r0
    for (pos = 0; pos != arr->size; ++pos)
    cb94:	88f3      	ldrh	r3, [r6, #6]
    cb96:	42a3      	cmp	r3, r4
    cb98:	d104      	bne.n	cba4 <ba_toString+0x20>
#else
        ba_getByIndex(arr, pos, &ch);
#endif
        buff[pos] = ch == 0 ? '0' : '1';
    }
    *(buff + arr->size) = 0;
    cb9a:	2300      	movs	r3, #0
    return buff;
}
    cb9c:	4628      	mov	r0, r5
    *(buff + arr->size) = 0;
    cb9e:	552b      	strb	r3, [r5, r4]
}
    cba0:	b002      	add	sp, #8
    cba2:	bd70      	pop	{r4, r5, r6, pc}
        ba_getByIndex(arr, pos, &ch);
    cba4:	4621      	mov	r1, r4
    cba6:	f10d 0207 	add.w	r2, sp, #7
    cbaa:	4630      	mov	r0, r6
    cbac:	f7ff ffa8 	bl	cb00 <ba_getByIndex>
        buff[pos] = ch == 0 ? '0' : '1';
    cbb0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    cbb4:	2b00      	cmp	r3, #0
    cbb6:	bf0c      	ite	eq
    cbb8:	2330      	moveq	r3, #48	; 0x30
    cbba:	2331      	movne	r3, #49	; 0x31
    cbbc:	552b      	strb	r3, [r5, r4]
    for (pos = 0; pos != arr->size; ++pos)
    cbbe:	3401      	adds	r4, #1
    cbc0:	e7e8      	b.n	cb94 <ba_toString+0x10>

0000cbc2 <bb_isAttached>:
#include "../include/bytebuffer.h"
#include "../include/helpers.h"

char bb_isAttached(gxByteBuffer* arr)
{
    if (arr == NULL)
    cbc2:	b108      	cbz	r0, cbc8 <bb_isAttached+0x6>
    }
#if defined(GX_DLMS_BYTE_BUFFER_SIZE_32) || (!defined(GX_DLMS_MICROCONTROLLER) && (defined(_WIN32) || defined(_WIN64) || defined(__linux__)))
    //If byte buffer is attached.
    return (arr->capacity & 0x80000000) == 0x80000000;
#else
    return (arr->capacity & 0x8000) == 0x8000;
    cbc4:	8880      	ldrh	r0, [r0, #4]
    cbc6:	0bc0      	lsrs	r0, r0, #15
#endif
}
    cbc8:	4770      	bx	lr

0000cbca <bb_available>:
uint32_t bb_available(gxByteBuffer* arr)
#else
uint16_t bb_available(gxByteBuffer* arr)
#endif
{
    if (arr == NULL)
    cbca:	b118      	cbz	r0, cbd4 <bb_available+0xa>
    {
        return 0;
    }
    return arr->size - arr->position;
    cbcc:	88c3      	ldrh	r3, [r0, #6]
    cbce:	8900      	ldrh	r0, [r0, #8]
    cbd0:	1a18      	subs	r0, r3, r0
    cbd2:	b280      	uxth	r0, r0
}
    cbd4:	4770      	bx	lr

0000cbd6 <bb_getCapacity>:
{
#if defined(GX_DLMS_BYTE_BUFFER_SIZE_32) || (!defined(GX_DLMS_MICROCONTROLLER)&& (defined(_WIN32) || defined(_WIN64) || defined(__linux__)))
    //If byte buffer is attached.
    return arr->capacity & 0x7FFFFFFF;
#else
    return arr->capacity & 0x7FFF;
    cbd6:	8880      	ldrh	r0, [r0, #4]
#endif
}
    cbd8:	f3c0 000e 	ubfx	r0, r0, #0, #15
    cbdc:	4770      	bx	lr

0000cbde <bb_size>:
uint32_t bb_size(gxByteBuffer* arr)
#else
uint16_t bb_size(gxByteBuffer* arr)
#endif
{
    return arr != NULL ? arr->size : 0;
    cbde:	b100      	cbz	r0, cbe2 <bb_size+0x4>
    cbe0:	88c0      	ldrh	r0, [r0, #6]
}
    cbe2:	4770      	bx	lr

0000cbe4 <bb_init>:

int BYTE_BUFFER_INIT(
    gxByteBuffer* arr)
{
    cbe4:	4603      	mov	r3, r0
    arr->capacity = 0;
    arr->data = NULL;
    cbe6:	2000      	movs	r0, #0
    arr->capacity = 0;
    cbe8:	e9c3 0000 	strd	r0, r0, [r3]
    arr->position = 0;
    cbec:	8118      	strh	r0, [r3, #8]
    arr->size = 0;
    return 0;
}
    cbee:	4770      	bx	lr

0000cbf0 <bb_capacity>:
#else
int bb_capacity(
    gxByteBuffer* arr,
    uint16_t capacity)
#endif
{
    cbf0:	b538      	push	{r3, r4, r5, lr}
    cbf2:	4604      	mov	r4, r0
    cbf4:	460d      	mov	r5, r1
#ifndef DLMS_IGNORE_MALLOC
    //Capacity can't change if it's attached.
    if (!bb_isAttached(arr))
    cbf6:	f7ff ffe4 	bl	cbc2 <bb_isAttached>
    cbfa:	b9d8      	cbnz	r0, cc34 <bb_capacity+0x44>
    {
        if (capacity == 0)
    cbfc:	b931      	cbnz	r1, cc0c <bb_capacity+0x1c>
        {
            if (arr->data != NULL)
    cbfe:	6820      	ldr	r0, [r4, #0]
    cc00:	b1b8      	cbz	r0, cc32 <bb_capacity+0x42>
            {
                gxfree(arr->data);
    cc02:	f7fe ffdf 	bl	bbc4 <free>
                arr->data = NULL;
    cc06:	6025      	str	r5, [r4, #0]
                }
                arr->data = tmp;
            }
            if (arr->size > capacity)
            {
                arr->size = capacity;
    cc08:	80e5      	strh	r5, [r4, #6]
    cc0a:	e012      	b.n	cc32 <bb_capacity+0x42>
            if (arr->capacity == 0)
    cc0c:	88a3      	ldrh	r3, [r4, #4]
    cc0e:	b93b      	cbnz	r3, cc20 <bb_capacity+0x30>
                arr->data = (unsigned char*)gxmalloc(capacity);
    cc10:	4608      	mov	r0, r1
    cc12:	f7fe ffcf 	bl	bbb4 <malloc>
    cc16:	6020      	str	r0, [r4, #0]
                if (arr->data == NULL)
    cc18:	b940      	cbnz	r0, cc2c <bb_capacity+0x3c>
                    return DLMS_ERROR_CODE_OUTOFMEMORY;
    cc1a:	f44f 7082 	mov.w	r0, #260	; 0x104
    if (bb_getCapacity(arr) < capacity)
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    return DLMS_ERROR_CODE_OK;
}
    cc1e:	bd38      	pop	{r3, r4, r5, pc}
                unsigned char* tmp = (unsigned char*)gxrealloc(arr->data, capacity);
    cc20:	6820      	ldr	r0, [r4, #0]
    cc22:	f7ff f87f 	bl	bd24 <realloc>
                if (tmp == NULL)
    cc26:	2800      	cmp	r0, #0
    cc28:	d0f7      	beq.n	cc1a <bb_capacity+0x2a>
                arr->data = tmp;
    cc2a:	6020      	str	r0, [r4, #0]
            if (arr->size > capacity)
    cc2c:	88e3      	ldrh	r3, [r4, #6]
    cc2e:	42ab      	cmp	r3, r5
    cc30:	d8ea      	bhi.n	cc08 <bb_capacity+0x18>
        arr->capacity = capacity;
    cc32:	80a5      	strh	r5, [r4, #4]
    return arr->capacity & 0x7FFF;
    cc34:	88a3      	ldrh	r3, [r4, #4]
    if (bb_getCapacity(arr) < capacity)
    cc36:	f3c3 030e 	ubfx	r3, r3, #0, #15
    cc3a:	42ab      	cmp	r3, r5
    cc3c:	d3ed      	bcc.n	cc1a <bb_capacity+0x2a>
    return DLMS_ERROR_CODE_OK;
    cc3e:	2000      	movs	r0, #0
    cc40:	e7ed      	b.n	cc1e <bb_capacity+0x2e>

0000cc42 <bb_allocate>:
int bb_allocate(
    gxByteBuffer* arr,
    uint16_t index,
    uint16_t dataSize)
#endif
{
    cc42:	b570      	push	{r4, r5, r6, lr}
    cc44:	4604      	mov	r4, r0
    cc46:	460e      	mov	r6, r1
    cc48:	4615      	mov	r5, r2
#ifndef DLMS_IGNORE_MALLOC
    if (!bb_isAttached(arr) && (arr->capacity == 0 || index + dataSize > arr->capacity))
    cc4a:	f7ff ffba 	bl	cbc2 <bb_isAttached>
    cc4e:	b920      	cbnz	r0, cc5a <bb_allocate+0x18>
    cc50:	88a3      	ldrh	r3, [r4, #4]
    cc52:	b1a3      	cbz	r3, cc7e <bb_allocate+0x3c>
    cc54:	188a      	adds	r2, r1, r2
    cc56:	429a      	cmp	r2, r3
    cc58:	dc0f      	bgt.n	cc7a <bb_allocate+0x38>
    return arr->capacity & 0x7FFF;
    cc5a:	88a3      	ldrh	r3, [r4, #4]
            }
            arr->data = tmp;
        }
    }
#endif //DLMS_IGNORE_MALLOC
    if (bb_getCapacity(arr) < index + dataSize)
    cc5c:	4435      	add	r5, r6
    cc5e:	f3c3 030e 	ubfx	r3, r3, #0, #15
    cc62:	42ab      	cmp	r3, r5
    cc64:	db15      	blt.n	cc92 <bb_allocate+0x50>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    return 0;
    cc66:	2000      	movs	r0, #0
    cc68:	e015      	b.n	cc96 <bb_allocate+0x54>
            arr->capacity += VECTOR_CAPACITY;
    cc6a:	3332      	adds	r3, #50	; 0x32
    cc6c:	80a3      	strh	r3, [r4, #4]
        if (empty)
    cc6e:	e00a      	b.n	cc86 <bb_allocate+0x44>
            arr->data = (unsigned char*)gxmalloc(arr->capacity);
    cc70:	4628      	mov	r0, r5
    cc72:	f7fe ff9f 	bl	bbb4 <malloc>
            arr->data = tmp;
    cc76:	6020      	str	r0, [r4, #0]
    cc78:	e7ef      	b.n	cc5a <bb_allocate+0x18>
        if (dataSize > VECTOR_CAPACITY || arr->capacity == 0)
    cc7a:	2d32      	cmp	r5, #50	; 0x32
    cc7c:	d9f5      	bls.n	cc6a <bb_allocate+0x28>
            arr->capacity += dataSize;
    cc7e:	18ea      	adds	r2, r5, r3
    cc80:	80a2      	strh	r2, [r4, #4]
        if (empty)
    cc82:	2b00      	cmp	r3, #0
    cc84:	d0f4      	beq.n	cc70 <bb_allocate+0x2e>
            unsigned char* tmp = (unsigned char*)gxrealloc(arr->data, arr->capacity);
    cc86:	88a1      	ldrh	r1, [r4, #4]
    cc88:	6820      	ldr	r0, [r4, #0]
    cc8a:	f7ff f84b 	bl	bd24 <realloc>
            if (tmp == NULL)
    cc8e:	2800      	cmp	r0, #0
    cc90:	d1f1      	bne.n	cc76 <bb_allocate+0x34>
                return DLMS_ERROR_CODE_OUTOFMEMORY;
    cc92:	f44f 7082 	mov.w	r0, #260	; 0x104
}
    cc96:	bd70      	pop	{r4, r5, r6, pc}

0000cc98 <bb_setUInt8ByIndex>:
int bb_setUInt8ByIndex(
    gxByteBuffer* arr,
    uint16_t index,
    unsigned char item)
#endif
{
    cc98:	b570      	push	{r4, r5, r6, lr}
    cc9a:	460d      	mov	r5, r1
    cc9c:	4616      	mov	r6, r2
    if (arr == NULL)
    cc9e:	4604      	mov	r4, r0
    cca0:	b130      	cbz	r0, ccb0 <bb_setUInt8ByIndex+0x18>
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    int ret = bb_allocate(arr, index, 1);
    cca2:	2201      	movs	r2, #1
    cca4:	f7ff ffcd 	bl	cc42 <bb_allocate>
    if (ret == 0)
    cca8:	b908      	cbnz	r0, ccae <bb_setUInt8ByIndex+0x16>
    {
        arr->data[index] = item;
    ccaa:	6823      	ldr	r3, [r4, #0]
    ccac:	555e      	strb	r6, [r3, r5]
    }
    return ret;
}
    ccae:	bd70      	pop	{r4, r5, r6, pc}
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    ccb0:	f44f 7081 	mov.w	r0, #258	; 0x102
    ccb4:	e7fb      	b.n	ccae <bb_setUInt8ByIndex+0x16>

0000ccb6 <bb_setUInt8>:
{
    ccb6:	b510      	push	{r4, lr}
    ccb8:	460a      	mov	r2, r1
    return arr != NULL ? arr->size : 0;
    ccba:	4604      	mov	r4, r0
    ccbc:	b140      	cbz	r0, ccd0 <bb_setUInt8+0x1a>
    ccbe:	88c1      	ldrh	r1, [r0, #6]
    int ret = bb_setUInt8ByIndex(arr, bb_size(arr), item);
    ccc0:	4620      	mov	r0, r4
    ccc2:	f7ff ffe9 	bl	cc98 <bb_setUInt8ByIndex>
    if (ret == 0)
    ccc6:	b910      	cbnz	r0, ccce <bb_setUInt8+0x18>
        ++arr->size;
    ccc8:	88e3      	ldrh	r3, [r4, #6]
    ccca:	3301      	adds	r3, #1
    cccc:	80e3      	strh	r3, [r4, #6]
}
    ccce:	bd10      	pop	{r4, pc}
    return arr != NULL ? arr->size : 0;
    ccd0:	4601      	mov	r1, r0
    ccd2:	e7f5      	b.n	ccc0 <bb_setUInt8+0xa>

0000ccd4 <bb_setUInt16ByIndex>:
int bb_setUInt16ByIndex(
    gxByteBuffer* arr,
    uint16_t index,
    uint16_t item)
#endif
{
    ccd4:	b570      	push	{r4, r5, r6, lr}
    ccd6:	460c      	mov	r4, r1
    int ret = 0;
    if (index + 2 > arr->size)
    ccd8:	88c1      	ldrh	r1, [r0, #6]
    ccda:	1ca3      	adds	r3, r4, #2
    ccdc:	428b      	cmp	r3, r1
{
    ccde:	4605      	mov	r5, r0
    cce0:	4616      	mov	r6, r2
    if (index + 2 > arr->size)
    cce2:	dd02      	ble.n	ccea <bb_setUInt16ByIndex+0x16>
    {
        bb_allocate(arr, arr->size, 2);
    cce4:	2202      	movs	r2, #2
    cce6:	f7ff ffac 	bl	cc42 <bb_allocate>
    }
    if (ret == 0)
    {
        arr->data[index] = (item >> 8) & 0xFF;
    ccea:	682b      	ldr	r3, [r5, #0]
    ccec:	0a32      	lsrs	r2, r6, #8
    ccee:	551a      	strb	r2, [r3, r4]
        arr->data[index + 1] = item & 0xFF;
    ccf0:	6829      	ldr	r1, [r5, #0]
    ccf2:	440c      	add	r4, r1
    }
    return ret;
}
    ccf4:	2000      	movs	r0, #0
        arr->data[index + 1] = item & 0xFF;
    ccf6:	7066      	strb	r6, [r4, #1]
}
    ccf8:	bd70      	pop	{r4, r5, r6, pc}

0000ccfa <bb_setUInt16>:
{
    ccfa:	b510      	push	{r4, lr}
    ccfc:	460a      	mov	r2, r1
    int ret = bb_setUInt16ByIndex(arr, arr->size, item);
    ccfe:	88c1      	ldrh	r1, [r0, #6]
{
    cd00:	4604      	mov	r4, r0
    int ret = bb_setUInt16ByIndex(arr, arr->size, item);
    cd02:	f7ff ffe7 	bl	ccd4 <bb_setUInt16ByIndex>
    if (ret == 0)
    cd06:	b910      	cbnz	r0, cd0e <bb_setUInt16+0x14>
        arr->size += 2;
    cd08:	88e3      	ldrh	r3, [r4, #6]
    cd0a:	3302      	adds	r3, #2
    cd0c:	80e3      	strh	r3, [r4, #6]
}
    cd0e:	bd10      	pop	{r4, pc}

0000cd10 <bb_setUInt32ByIndex>:
int bb_setUInt32ByIndex(
    gxByteBuffer* arr,
    uint16_t index,
    uint32_t item)
#endif //defined(GX_DLMS_BYTE_BUFFER_SIZE_32) || (!defined(GX_DLMS_MICROCONTROLLER) && (defined(_WIN32) || defined(_WIN64) || defined(__linux__)))
{
    cd10:	b570      	push	{r4, r5, r6, lr}
    cd12:	4614      	mov	r4, r2
    int ret = bb_allocate(arr, index, 4);
    cd14:	2204      	movs	r2, #4
{
    cd16:	4606      	mov	r6, r0
    cd18:	460d      	mov	r5, r1
    int ret = bb_allocate(arr, index, 4);
    cd1a:	f7ff ff92 	bl	cc42 <bb_allocate>
    if (ret == 0)
    cd1e:	b968      	cbnz	r0, cd3c <bb_setUInt32ByIndex+0x2c>
    {
        PUT32(arr->data + index, item);
    cd20:	6833      	ldr	r3, [r6, #0]
    cd22:	0e22      	lsrs	r2, r4, #24
    cd24:	555a      	strb	r2, [r3, r5]
    cd26:	6833      	ldr	r3, [r6, #0]
    cd28:	442b      	add	r3, r5
    cd2a:	0c22      	lsrs	r2, r4, #16
    cd2c:	705a      	strb	r2, [r3, #1]
    cd2e:	6833      	ldr	r3, [r6, #0]
    cd30:	442b      	add	r3, r5
    cd32:	0a22      	lsrs	r2, r4, #8
    cd34:	709a      	strb	r2, [r3, #2]
    cd36:	6831      	ldr	r1, [r6, #0]
    cd38:	440d      	add	r5, r1
    cd3a:	70ec      	strb	r4, [r5, #3]
    }
    return ret;
}
    cd3c:	bd70      	pop	{r4, r5, r6, pc}

0000cd3e <bb_setUInt32>:
{
    cd3e:	b510      	push	{r4, lr}
    cd40:	460a      	mov	r2, r1
    int ret = bb_setUInt32ByIndex(arr, arr->size, item);
    cd42:	88c1      	ldrh	r1, [r0, #6]
{
    cd44:	4604      	mov	r4, r0
    int ret = bb_setUInt32ByIndex(arr, arr->size, item);
    cd46:	f7ff ffe3 	bl	cd10 <bb_setUInt32ByIndex>
    if (ret == 0)
    cd4a:	b910      	cbnz	r0, cd52 <bb_setUInt32+0x14>
        arr->size += 4;
    cd4c:	88e3      	ldrh	r3, [r4, #6]
    cd4e:	3304      	adds	r3, #4
    cd50:	80e3      	strh	r3, [r4, #6]
}
    cd52:	bd10      	pop	{r4, pc}

0000cd54 <bb_setUInt64>:

int bb_setUInt64(
    gxByteBuffer* arr,
    uint64_t item)
{
    cd54:	b570      	push	{r4, r5, r6, lr}
    int ret = bb_allocate(arr, arr->size, 8);
    cd56:	88c1      	ldrh	r1, [r0, #6]
{
    cd58:	4616      	mov	r6, r2
    int ret = bb_allocate(arr, arr->size, 8);
    cd5a:	2208      	movs	r2, #8
{
    cd5c:	4604      	mov	r4, r0
    cd5e:	461d      	mov	r5, r3
    int ret = bb_allocate(arr, arr->size, 8);
    cd60:	f7ff ff6f 	bl	cc42 <bb_allocate>
    if (ret == 0)
    cd64:	bb38      	cbnz	r0, cdb6 <bb_setUInt64+0x62>
    {
        ((unsigned char*)arr->data)[arr->size + 7] = item & 0xFF;
    cd66:	88e2      	ldrh	r2, [r4, #6]
    cd68:	6823      	ldr	r3, [r4, #0]
    cd6a:	4413      	add	r3, r2
    cd6c:	71de      	strb	r6, [r3, #7]
        item >>= 8;
        ((unsigned char*)arr->data)[arr->size + 6] = item & 0xFF;
    cd6e:	88e2      	ldrh	r2, [r4, #6]
    cd70:	6823      	ldr	r3, [r4, #0]
    cd72:	4413      	add	r3, r2
        item >>= 8;
    cd74:	0a32      	lsrs	r2, r6, #8
        ((unsigned char*)arr->data)[arr->size + 6] = item & 0xFF;
    cd76:	719a      	strb	r2, [r3, #6]
        item >>= 8;
        ((unsigned char*)arr->data)[arr->size + 5] = item & 0xFF;
    cd78:	88e2      	ldrh	r2, [r4, #6]
    cd7a:	6823      	ldr	r3, [r4, #0]
    cd7c:	4413      	add	r3, r2
        item >>= 8;
    cd7e:	0c32      	lsrs	r2, r6, #16
        ((unsigned char*)arr->data)[arr->size + 5] = item & 0xFF;
    cd80:	715a      	strb	r2, [r3, #5]
        item >>= 8;
        ((unsigned char*)arr->data)[arr->size + 4] = item & 0xFF;
    cd82:	88e2      	ldrh	r2, [r4, #6]
    cd84:	6823      	ldr	r3, [r4, #0]
    cd86:	4413      	add	r3, r2
        item >>= 8;
    cd88:	0e36      	lsrs	r6, r6, #24
        ((unsigned char*)arr->data)[arr->size + 4] = item & 0xFF;
    cd8a:	711e      	strb	r6, [r3, #4]
        item >>= 8;
        ((unsigned char*)arr->data)[arr->size + 3] = item & 0xFF;
    cd8c:	88e2      	ldrh	r2, [r4, #6]
    cd8e:	6823      	ldr	r3, [r4, #0]
    cd90:	4413      	add	r3, r2
    cd92:	70dd      	strb	r5, [r3, #3]
        item >>= 8;
        ((unsigned char*)arr->data)[arr->size + 2] = item & 0xFF;
    cd94:	88e2      	ldrh	r2, [r4, #6]
    cd96:	6823      	ldr	r3, [r4, #0]
    cd98:	4413      	add	r3, r2
        item >>= 8;
    cd9a:	0a2a      	lsrs	r2, r5, #8
        ((unsigned char*)arr->data)[arr->size + 2] = item & 0xFF;
    cd9c:	709a      	strb	r2, [r3, #2]
        item >>= 8;
        ((unsigned char*)arr->data)[arr->size + 1] = item & 0xFF;
    cd9e:	88e2      	ldrh	r2, [r4, #6]
    cda0:	6823      	ldr	r3, [r4, #0]
    cda2:	4413      	add	r3, r2
        item >>= 8;
    cda4:	0c2a      	lsrs	r2, r5, #16
        ((unsigned char*)arr->data)[arr->size + 1] = item & 0xFF;
    cda6:	705a      	strb	r2, [r3, #1]
        item >>= 8;
        ((unsigned char*)arr->data)[arr->size] = item & 0xFF;
    cda8:	88e3      	ldrh	r3, [r4, #6]
    cdaa:	6822      	ldr	r2, [r4, #0]
        item >>= 8;
    cdac:	0e2d      	lsrs	r5, r5, #24
        ((unsigned char*)arr->data)[arr->size] = item & 0xFF;
    cdae:	54d5      	strb	r5, [r2, r3]
        arr->size += 8;
    cdb0:	88e3      	ldrh	r3, [r4, #6]
    cdb2:	3308      	adds	r3, #8
    cdb4:	80e3      	strh	r3, [r4, #6]
    }
    return ret;
}
    cdb6:	bd70      	pop	{r4, r5, r6, pc}

0000cdb8 <bb_setFloat>:

#ifndef DLMS_IGNORE_FLOAT32
int bb_setFloat(
    gxByteBuffer* arr,
    float value)
{
    cdb8:	b538      	push	{r3, r4, r5, lr}
        char b[sizeof(float)];
    } HELPER;

    HELPER tmp;
    tmp.value = value;
    int ret = bb_allocate(arr, arr->size, 4);
    cdba:	2204      	movs	r2, #4
{
    cdbc:	460d      	mov	r5, r1
    int ret = bb_allocate(arr, arr->size, 4);
    cdbe:	88c1      	ldrh	r1, [r0, #6]
{
    cdc0:	4604      	mov	r4, r0
    int ret = bb_allocate(arr, arr->size, 4);
    cdc2:	f7ff ff3e 	bl	cc42 <bb_allocate>
    if (ret == 0)
    cdc6:	b9c0      	cbnz	r0, cdfa <bb_setFloat+0x42>
    {
        arr->data[arr->size] = tmp.b[3];
    cdc8:	88e3      	ldrh	r3, [r4, #6]
    cdca:	6822      	ldr	r2, [r4, #0]
    cdcc:	4629      	mov	r1, r5
    cdce:	f3c5 6507 	ubfx	r5, r5, #24, #8
    cdd2:	54d5      	strb	r5, [r2, r3]
        arr->data[arr->size + 1] = tmp.b[2];
    cdd4:	88e2      	ldrh	r2, [r4, #6]
    cdd6:	6823      	ldr	r3, [r4, #0]
    cdd8:	4413      	add	r3, r2
    cdda:	f3c1 4207 	ubfx	r2, r1, #16, #8
    cdde:	705a      	strb	r2, [r3, #1]
        arr->data[arr->size + 2] = tmp.b[1];
    cde0:	88e2      	ldrh	r2, [r4, #6]
    cde2:	6823      	ldr	r3, [r4, #0]
    cde4:	4413      	add	r3, r2
    cde6:	f3c1 2207 	ubfx	r2, r1, #8, #8
    cdea:	709a      	strb	r2, [r3, #2]
        arr->data[arr->size + 3] = tmp.b[0];
    cdec:	88e2      	ldrh	r2, [r4, #6]
    cdee:	6823      	ldr	r3, [r4, #0]
    cdf0:	4413      	add	r3, r2
    cdf2:	70d9      	strb	r1, [r3, #3]
        arr->size += 4;
    cdf4:	88e3      	ldrh	r3, [r4, #6]
    cdf6:	3304      	adds	r3, #4
    cdf8:	80e3      	strh	r3, [r4, #6]
    }
    return ret;
}
    cdfa:	bd38      	pop	{r3, r4, r5, pc}

0000cdfc <bb_setDouble>:

#ifndef DLMS_IGNORE_FLOAT64
int bb_setDouble(
    gxByteBuffer* arr,
    double value)
{
    cdfc:	b570      	push	{r4, r5, r6, lr}
        char b[sizeof(double)];
    } HELPER;

    HELPER tmp;
    tmp.value = value;
    int ret = bb_allocate(arr, arr->size, 8);
    cdfe:	88c1      	ldrh	r1, [r0, #6]
{
    ce00:	4615      	mov	r5, r2
    int ret = bb_allocate(arr, arr->size, 8);
    ce02:	2208      	movs	r2, #8
{
    ce04:	4604      	mov	r4, r0
    ce06:	461e      	mov	r6, r3
    int ret = bb_allocate(arr, arr->size, 8);
    ce08:	f7ff ff1b 	bl	cc42 <bb_allocate>
    if (ret == 0)
    ce0c:	2800      	cmp	r0, #0
    ce0e:	d12e      	bne.n	ce6e <bb_setDouble+0x72>
    {
        arr->data[arr->size] = tmp.b[7];
    ce10:	88e2      	ldrh	r2, [r4, #6]
    ce12:	6821      	ldr	r1, [r4, #0]
    ce14:	4633      	mov	r3, r6
    ce16:	f3c6 6607 	ubfx	r6, r6, #24, #8
    ce1a:	548e      	strb	r6, [r1, r2]
        arr->data[arr->size + 1] = tmp.b[6];
    ce1c:	88e1      	ldrh	r1, [r4, #6]
    ce1e:	6822      	ldr	r2, [r4, #0]
    ce20:	440a      	add	r2, r1
    ce22:	f3c3 4107 	ubfx	r1, r3, #16, #8
    ce26:	7051      	strb	r1, [r2, #1]
        arr->data[arr->size + 2] = tmp.b[5];
    ce28:	88e1      	ldrh	r1, [r4, #6]
    ce2a:	6822      	ldr	r2, [r4, #0]
    ce2c:	440a      	add	r2, r1
    ce2e:	f3c3 2107 	ubfx	r1, r3, #8, #8
    ce32:	7091      	strb	r1, [r2, #2]
        arr->data[arr->size + 3] = tmp.b[4];
    ce34:	88e1      	ldrh	r1, [r4, #6]
    ce36:	6822      	ldr	r2, [r4, #0]
    ce38:	440a      	add	r2, r1
        arr->data[arr->size + 4] = tmp.b[3];
    ce3a:	f3c5 6107 	ubfx	r1, r5, #24, #8
        arr->data[arr->size + 3] = tmp.b[4];
    ce3e:	70d3      	strb	r3, [r2, #3]
        arr->data[arr->size + 4] = tmp.b[3];
    ce40:	88e2      	ldrh	r2, [r4, #6]
    ce42:	6823      	ldr	r3, [r4, #0]
    ce44:	441a      	add	r2, r3
    ce46:	7111      	strb	r1, [r2, #4]
        arr->data[arr->size + 5] = tmp.b[2];
    ce48:	88e1      	ldrh	r1, [r4, #6]
    ce4a:	6822      	ldr	r2, [r4, #0]
    ce4c:	440a      	add	r2, r1
    ce4e:	f3c5 4107 	ubfx	r1, r5, #16, #8
    ce52:	7151      	strb	r1, [r2, #5]
        arr->data[arr->size + 6] = tmp.b[1];
    ce54:	88e1      	ldrh	r1, [r4, #6]
    ce56:	6822      	ldr	r2, [r4, #0]
    ce58:	440a      	add	r2, r1
    ce5a:	f3c5 2107 	ubfx	r1, r5, #8, #8
    ce5e:	7191      	strb	r1, [r2, #6]
        arr->data[arr->size + 7] = tmp.b[0];
    ce60:	88e1      	ldrh	r1, [r4, #6]
    ce62:	6822      	ldr	r2, [r4, #0]
    ce64:	440a      	add	r2, r1
    ce66:	71d5      	strb	r5, [r2, #7]
        arr->size += 8;
    ce68:	88e3      	ldrh	r3, [r4, #6]
    ce6a:	3308      	adds	r3, #8
    ce6c:	80e3      	strh	r3, [r4, #6]
    }
    return ret;
}
    ce6e:	bd70      	pop	{r4, r5, r6, pc}

0000ce70 <bb_setInt8>:

int bb_setInt8(
    gxByteBuffer* arr,
    char item)
{
    return bb_setUInt8(arr, (unsigned char)item);
    ce70:	f7ff bf21 	b.w	ccb6 <bb_setUInt8>

0000ce74 <bb_setInt16>:

int bb_setInt16(
    gxByteBuffer* arr,
    short item)
{
    return bb_setUInt16(arr, (uint16_t)item);
    ce74:	b289      	uxth	r1, r1
    ce76:	f7ff bf40 	b.w	ccfa <bb_setUInt16>

0000ce7a <bb_setInt32>:

int bb_setInt32(
    gxByteBuffer* arr,
    int32_t item)
{
    return bb_setUInt32(arr, (uint32_t)item);
    ce7a:	f7ff bf60 	b.w	cd3e <bb_setUInt32>

0000ce7e <bb_setInt64>:

int bb_setInt64(
    gxByteBuffer* arr,
    int64_t item)
{
    return bb_setUInt64(arr, (uint64_t)item);
    ce7e:	f7ff bf69 	b.w	cd54 <bb_setUInt64>

0000ce82 <bb_set>:
int bb_set(
    gxByteBuffer* arr,
    const unsigned char* pSource,
    uint16_t count)
#endif
{
    ce82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ce84:	460f      	mov	r7, r1
    int ret = bb_allocate(arr, arr->size, count);
    ce86:	88c1      	ldrh	r1, [r0, #6]
{
    ce88:	4604      	mov	r4, r0
    ce8a:	4615      	mov	r5, r2
    int ret = bb_allocate(arr, arr->size, count);
    ce8c:	f7ff fed9 	bl	cc42 <bb_allocate>
    if (ret == 0)
    ce90:	4606      	mov	r6, r0
    ce92:	b948      	cbnz	r0, cea8 <bb_set+0x26>
    {
        memcpy(arr->data + arr->size, pSource, count);
    ce94:	88e3      	ldrh	r3, [r4, #6]
    ce96:	6820      	ldr	r0, [r4, #0]
    ce98:	462a      	mov	r2, r5
    ce9a:	4639      	mov	r1, r7
    ce9c:	4418      	add	r0, r3
    ce9e:	f00f f91f 	bl	1c0e0 <memcpy>
        arr->size += count;
    cea2:	88e2      	ldrh	r2, [r4, #6]
    cea4:	4415      	add	r5, r2
    cea6:	80e5      	strh	r5, [r4, #6]
    }
    return ret;
}
    cea8:	4630      	mov	r0, r6
    ceaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000ceac <bb_addString.part.0>:
        return ret;
}
    return 0;
}

int bb_addString(
    ceac:	b538      	push	{r3, r4, r5, lr}
    ceae:	4604      	mov	r4, r0
    gxByteBuffer* arr,
    const char* value)
{
    if (value != NULL)
    {
        int len = (int)strlen(value);
    ceb0:	4608      	mov	r0, r1
int bb_addString(
    ceb2:	460d      	mov	r5, r1
        int len = (int)strlen(value);
    ceb4:	f7f3 ff84 	bl	dc0 <strlen>
        if (len > 0)
    ceb8:	2800      	cmp	r0, #0
    ceba:	dd0f      	ble.n	cedc <bb_addString.part.0+0x30>
        {
            int ret = bb_set(arr, (const unsigned char*)value, (uint16_t)(len + 1));
    cebc:	1c42      	adds	r2, r0, #1
    cebe:	b292      	uxth	r2, r2
    cec0:	4629      	mov	r1, r5
    cec2:	4620      	mov	r0, r4
    cec4:	f7ff ffdd 	bl	ce82 <bb_set>
            if (ret == 0)
    cec8:	b938      	cbnz	r0, ceda <bb_addString.part.0+0x2e>
            {
                //Add end of string, but that is not added to the length.
                arr->data[arr->size - 1] = '\0';
    ceca:	88e2      	ldrh	r2, [r4, #6]
    cecc:	6823      	ldr	r3, [r4, #0]
    cece:	4413      	add	r3, r2
    ced0:	f803 0c01 	strb.w	r0, [r3, #-1]
                --arr->size;
    ced4:	88e3      	ldrh	r3, [r4, #6]
    ced6:	3b01      	subs	r3, #1
    ced8:	80e3      	strh	r3, [r4, #6]
            }
            return ret;
        }
    }
    return 0;
}
    ceda:	bd38      	pop	{r3, r4, r5, pc}
    return 0;
    cedc:	2000      	movs	r0, #0
    cede:	e7fc      	b.n	ceda <bb_addString.part.0+0x2e>

0000cee0 <bb_set2>:
{
    cee0:	b570      	push	{r4, r5, r6, lr}
    cee2:	4616      	mov	r6, r2
    cee4:	461c      	mov	r4, r3
    if (data != NULL && count != 0)
    cee6:	460d      	mov	r5, r1
    cee8:	b191      	cbz	r1, cf10 <bb_set2+0x30>
    ceea:	b19b      	cbz	r3, cf14 <bb_set2+0x34>
        if (count == (uint16_t)-1)
    ceec:	f64f 73ff 	movw	r3, #65535	; 0xffff
    cef0:	429c      	cmp	r4, r3
            count = data->size - index;
    cef2:	bf08      	it	eq
    cef4:	88cc      	ldrheq	r4, [r1, #6]
        int ret = bb_set(arr, data->data + index, count);
    cef6:	6809      	ldr	r1, [r1, #0]
            count = data->size - index;
    cef8:	bf04      	itt	eq
    cefa:	1aa4      	subeq	r4, r4, r2
    cefc:	b2a4      	uxtheq	r4, r4
        int ret = bb_set(arr, data->data + index, count);
    cefe:	4622      	mov	r2, r4
    cf00:	4431      	add	r1, r6
    cf02:	f7ff ffbe 	bl	ce82 <bb_set>
        if (ret == 0)
    cf06:	b910      	cbnz	r0, cf0e <bb_set2+0x2e>
            data->position += count;
    cf08:	892a      	ldrh	r2, [r5, #8]
    cf0a:	4414      	add	r4, r2
    cf0c:	812c      	strh	r4, [r5, #8]
}
    cf0e:	bd70      	pop	{r4, r5, r6, pc}
    return 0;
    cf10:	4608      	mov	r0, r1
    cf12:	e7fc      	b.n	cf0e <bb_set2+0x2e>
    cf14:	4618      	mov	r0, r3
    cf16:	e7fa      	b.n	cf0e <bb_set2+0x2e>

0000cf18 <bb_addString>:
    if (value != NULL)
    cf18:	b109      	cbz	r1, cf1e <bb_addString+0x6>
    cf1a:	f7ff bfc7 	b.w	ceac <bb_addString.part.0>
}
    cf1e:	4608      	mov	r0, r1
    cf20:	4770      	bx	lr

0000cf22 <bb_attach>:
    uint16_t count,
    uint16_t capacity)
#endif
{
    //If capacity is 1 value is cast t
    if (value == NULL || capacity < count)
    cf22:	b911      	cbnz	r1, cf2a <bb_attach+0x8>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    cf24:	f44f 7082 	mov.w	r0, #260	; 0x104
    cf28:	4770      	bx	lr
    if (value == NULL || capacity < count)
    cf2a:	4293      	cmp	r3, r2
    cf2c:	d3fa      	bcc.n	cf24 <bb_attach+0x2>
    }
    arr->data = value;
    cf2e:	6001      	str	r1, [r0, #0]
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    arr->capacity = (0x80000000 | capacity);
#else
    if (capacity >= 0x8000)
    cf30:	0419      	lsls	r1, r3, #16
    cf32:	d4f7      	bmi.n	cf24 <bb_attach+0x2>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    arr->capacity = (uint16_t)(0x8000 | capacity);
    cf34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    cf38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    cf3c:	8083      	strh	r3, [r0, #4]
#endif
    arr->size = count;
    arr->position = 0;
    cf3e:	2300      	movs	r3, #0
    arr->size = count;
    cf40:	80c2      	strh	r2, [r0, #6]
    arr->position = 0;
    cf42:	8103      	strh	r3, [r0, #8]
    return 0;
    cf44:	4618      	mov	r0, r3
}
    cf46:	4770      	bx	lr

0000cf48 <bb_attachString>:

#ifndef DLMS_IGNORE_MALLOC
int bb_attachString(
    gxByteBuffer* arr,
    char* value)
{
    cf48:	b538      	push	{r3, r4, r5, lr}
    cf4a:	4605      	mov	r5, r0
    int len = (int)strlen(value);
    cf4c:	4608      	mov	r0, r1
{
    cf4e:	460c      	mov	r4, r1
    int len = (int)strlen(value);
    cf50:	f7f3 ff36 	bl	dc0 <strlen>
    int ret = bb_set(arr, (const unsigned char*)value, (uint16_t)len);
    cf54:	4621      	mov	r1, r4
    cf56:	b282      	uxth	r2, r0
    cf58:	4628      	mov	r0, r5
    cf5a:	f7ff ff92 	bl	ce82 <bb_set>
    cf5e:	4605      	mov	r5, r0
    gxfree(value);
    cf60:	4620      	mov	r0, r4
    cf62:	f7fe fe2f 	bl	bbc4 <free>
    return ret;
}
    cf66:	4628      	mov	r0, r5
    cf68:	bd38      	pop	{r3, r4, r5, pc}

0000cf6a <bb_clear>:
#endif //DLMS_IGNORE_MALLOC

int bb_clear(
    gxByteBuffer* arr)
{
    cf6a:	b538      	push	{r3, r4, r5, lr}
    cf6c:	4604      	mov	r4, r0
#ifndef DLMS_IGNORE_MALLOC
    //If byte buffer is attached.
    if (!bb_isAttached(arr))
    cf6e:	f7ff fe28 	bl	cbc2 <bb_isAttached>
    cf72:	4605      	mov	r5, r0
    cf74:	b930      	cbnz	r0, cf84 <bb_clear+0x1a>
    {
        if (arr->data != NULL)
    cf76:	6820      	ldr	r0, [r4, #0]
    cf78:	b110      	cbz	r0, cf80 <bb_clear+0x16>
        {
            gxfree(arr->data);
    cf7a:	f7fe fe23 	bl	bbc4 <free>
            arr->data = NULL;
    cf7e:	6025      	str	r5, [r4, #0]
        }
        arr->capacity = 0;
    cf80:	2300      	movs	r3, #0
    cf82:	80a3      	strh	r3, [r4, #4]
    }
#endif //DLMS_IGNORE_MALLOC
    arr->size = 0;
    cf84:	2000      	movs	r0, #0
    cf86:	80e0      	strh	r0, [r4, #6]
    arr->position = 0;
    cf88:	8120      	strh	r0, [r4, #8]
    return 0;
    }
    cf8a:	bd38      	pop	{r3, r4, r5, pc}

0000cf8c <bb_empty>:

int bb_empty(
    gxByteBuffer* arr)
{
    cf8c:	4603      	mov	r3, r0
    arr->size = 0;
    cf8e:	2000      	movs	r0, #0
    cf90:	80d8      	strh	r0, [r3, #6]
    arr->position = 0;
    cf92:	8118      	strh	r0, [r3, #8]
    return 0;
}
    cf94:	4770      	bx	lr

0000cf96 <bb_getUInt8>:

int bb_getUInt8(
    gxByteBuffer* arr,
    unsigned char* value)
{
    if (arr->position >= arr->size)
    cf96:	8903      	ldrh	r3, [r0, #8]
    cf98:	88c2      	ldrh	r2, [r0, #6]
    cf9a:	429a      	cmp	r2, r3
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    *value = ((unsigned char*)arr->data)[arr->position];
    cf9c:	bf81      	itttt	hi
    cf9e:	6802      	ldrhi	r2, [r0, #0]
    cfa0:	5cd3      	ldrbhi	r3, [r2, r3]
    cfa2:	700b      	strbhi	r3, [r1, #0]
    ++arr->position;
    cfa4:	8903      	ldrhhi	r3, [r0, #8]
    cfa6:	bf83      	ittte	hi
    cfa8:	3301      	addhi	r3, #1
    cfaa:	8103      	strhhi	r3, [r0, #8]
    return 0;
    cfac:	2000      	movhi	r0, #0
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    cfae:	f44f 7082 	movls.w	r0, #260	; 0x104
}
    cfb2:	4770      	bx	lr

0000cfb4 <bb_getInt8>:

int bb_getInt8(
    gxByteBuffer* arr,
    signed char* value)
{
    if (arr->position >= arr->size)
    cfb4:	8903      	ldrh	r3, [r0, #8]
    cfb6:	88c2      	ldrh	r2, [r0, #6]
    cfb8:	429a      	cmp	r2, r3
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    *value = (signed char)((unsigned char*)arr->data)[arr->position];
    cfba:	bf81      	itttt	hi
    cfbc:	6802      	ldrhi	r2, [r0, #0]
    cfbe:	5cd3      	ldrbhi	r3, [r2, r3]
    cfc0:	700b      	strbhi	r3, [r1, #0]
    ++arr->position;
    cfc2:	8903      	ldrhhi	r3, [r0, #8]
    cfc4:	bf83      	ittte	hi
    cfc6:	3301      	addhi	r3, #1
    cfc8:	8103      	strhhi	r3, [r0, #8]
    return 0;
    cfca:	2000      	movhi	r0, #0
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    cfcc:	f44f 7082 	movls.w	r0, #260	; 0x104
}
    cfd0:	4770      	bx	lr

0000cfd2 <bb_getUInt8ByIndex>:
int bb_getUInt8ByIndex(
    gxByteBuffer* arr,
    uint32_t index,
    unsigned char* value)
{
    if (index >= arr->size)
    cfd2:	88c3      	ldrh	r3, [r0, #6]
    cfd4:	428b      	cmp	r3, r1
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    *value = ((unsigned char*)arr->data)[index];
    cfd6:	bf81      	itttt	hi
    cfd8:	6803      	ldrhi	r3, [r0, #0]
    cfda:	5c5b      	ldrbhi	r3, [r3, r1]
    cfdc:	7013      	strbhi	r3, [r2, #0]
    return 0;
    cfde:	2000      	movhi	r0, #0
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    cfe0:	bf98      	it	ls
    cfe2:	f44f 7082 	movls.w	r0, #260	; 0x104
}
    cfe6:	4770      	bx	lr

0000cfe8 <bb_getUInt16>:

int bb_getUInt16(
    gxByteBuffer* arr,
    uint16_t* value)
{
    if (arr->position + 2 > arr->size)
    cfe8:	8902      	ldrh	r2, [r0, #8]
    cfea:	88c3      	ldrh	r3, [r0, #6]
{
    cfec:	b510      	push	{r4, lr}
    if (arr->position + 2 > arr->size)
    cfee:	1c94      	adds	r4, r2, #2
    cff0:	429c      	cmp	r4, r3
    cff2:	dc0b      	bgt.n	d00c <bb_getUInt16+0x24>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    *value = (uint16_t)(((unsigned char*)arr->data)[arr->position] << 8 |
    cff4:	6803      	ldr	r3, [r0, #0]
    cff6:	5c9c      	ldrb	r4, [r3, r2]
        ((unsigned char*)arr->data)[arr->position + 1]);
    cff8:	4413      	add	r3, r2
    cffa:	785b      	ldrb	r3, [r3, #1]
    *value = (uint16_t)(((unsigned char*)arr->data)[arr->position] << 8 |
    cffc:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    d000:	800b      	strh	r3, [r1, #0]
    arr->position += 2;
    d002:	8903      	ldrh	r3, [r0, #8]
    d004:	3302      	adds	r3, #2
    d006:	8103      	strh	r3, [r0, #8]
    return 0;
    d008:	2000      	movs	r0, #0
}
    d00a:	bd10      	pop	{r4, pc}
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    d00c:	f44f 7082 	mov.w	r0, #260	; 0x104
    d010:	e7fb      	b.n	d00a <bb_getUInt16+0x22>

0000d012 <bb_getUInt32>:

int bb_getUInt32(
    gxByteBuffer* arr,
    uint32_t* value)
{
    d012:	b570      	push	{r4, r5, r6, lr}

    if (arr->position + 4 > arr->size)
    d014:	8904      	ldrh	r4, [r0, #8]
    d016:	88c3      	ldrh	r3, [r0, #6]
    d018:	1d25      	adds	r5, r4, #4
    d01a:	429d      	cmp	r5, r3
    d01c:	dc0f      	bgt.n	d03e <bb_getUInt32+0x2c>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    *value = GETU32(arr->data + arr->position);
    d01e:	6802      	ldr	r2, [r0, #0]
    d020:	5d16      	ldrb	r6, [r2, r4]
    d022:	4422      	add	r2, r4
    d024:	78d3      	ldrb	r3, [r2, #3]
    d026:	7854      	ldrb	r4, [r2, #1]
    d028:	7892      	ldrb	r2, [r2, #2]
    d02a:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
    d02e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
    d032:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    d036:	600b      	str	r3, [r1, #0]
    arr->position += 4;
    d038:	8105      	strh	r5, [r0, #8]
    return 0;
    d03a:	2000      	movs	r0, #0
}
    d03c:	bd70      	pop	{r4, r5, r6, pc}
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    d03e:	f44f 7082 	mov.w	r0, #260	; 0x104
    d042:	e7fb      	b.n	d03c <bb_getUInt32+0x2a>

0000d044 <bb_getInt16>:
int bb_getInt16(
    gxByteBuffer* arr,
    short* value)
{

    if (arr->position + 2 > arr->size)
    d044:	8902      	ldrh	r2, [r0, #8]
    d046:	88c3      	ldrh	r3, [r0, #6]
{
    d048:	b510      	push	{r4, lr}
    if (arr->position + 2 > arr->size)
    d04a:	1c94      	adds	r4, r2, #2
    d04c:	429c      	cmp	r4, r3
    d04e:	dc0b      	bgt.n	d068 <bb_getInt16+0x24>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    *value = (short)(((unsigned char*)arr->data)[arr->position] << 8 |
    d050:	6803      	ldr	r3, [r0, #0]
    d052:	5c9c      	ldrb	r4, [r3, r2]
        ((unsigned char*)arr->data)[arr->position + 1]);
    d054:	4413      	add	r3, r2
    d056:	785b      	ldrb	r3, [r3, #1]
    *value = (short)(((unsigned char*)arr->data)[arr->position] << 8 |
    d058:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    d05c:	800b      	strh	r3, [r1, #0]
    arr->position += 2;
    d05e:	8903      	ldrh	r3, [r0, #8]
    d060:	3302      	adds	r3, #2
    d062:	8103      	strh	r3, [r0, #8]
    return 0;
    d064:	2000      	movs	r0, #0
}
    d066:	bd10      	pop	{r4, pc}
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    d068:	f44f 7082 	mov.w	r0, #260	; 0x104
    d06c:	e7fb      	b.n	d066 <bb_getInt16+0x22>

0000d06e <bb_getUInt24ByIndex>:

int bb_getUInt24ByIndex(
    gxByteBuffer* arr,
    uint32_t index,
    uint32_t* value)
{
    d06e:	b510      	push	{r4, lr}
    if (index + 3 > bb_size(arr))
    d070:	1ccc      	adds	r4, r1, #3
    return arr != NULL ? arr->size : 0;
    d072:	b170      	cbz	r0, d092 <bb_getUInt24ByIndex+0x24>
    d074:	88c3      	ldrh	r3, [r0, #6]
    if (index + 3 > bb_size(arr))
    d076:	429c      	cmp	r4, r3
    d078:	d80d      	bhi.n	d096 <bb_getUInt24ByIndex+0x28>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    *value = ((uint32_t)(arr->data)[index] << 16) |
    d07a:	6800      	ldr	r0, [r0, #0]
    d07c:	5c44      	ldrb	r4, [r0, r1]
        ((uint32_t)(arr->data)[index + 1] << 8) |
        ((uint32_t)(arr->data)[index + 2]);
    d07e:	4401      	add	r1, r0
    return 0;
    d080:	2000      	movs	r0, #0
        ((uint32_t)(arr->data)[index + 2]);
    d082:	788b      	ldrb	r3, [r1, #2]
        ((uint32_t)(arr->data)[index + 1] << 8) |
    d084:	7849      	ldrb	r1, [r1, #1]
    d086:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
    d08a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    *value = ((uint32_t)(arr->data)[index] << 16) |
    d08e:	6013      	str	r3, [r2, #0]
}
    d090:	bd10      	pop	{r4, pc}
    return arr != NULL ? arr->size : 0;
    d092:	4603      	mov	r3, r0
    d094:	e7ef      	b.n	d076 <bb_getUInt24ByIndex+0x8>
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    d096:	f44f 7082 	mov.w	r0, #260	; 0x104
    d09a:	e7f9      	b.n	d090 <bb_getUInt24ByIndex+0x22>

0000d09c <bb_getUInt24>:
{
    d09c:	b510      	push	{r4, lr}
    d09e:	4604      	mov	r4, r0
    d0a0:	460a      	mov	r2, r1
    int ret = bb_getUInt24ByIndex(arr, arr->position, value);
    d0a2:	8901      	ldrh	r1, [r0, #8]
    d0a4:	f7ff ffe3 	bl	d06e <bb_getUInt24ByIndex>
    arr->position += 3;
    d0a8:	8923      	ldrh	r3, [r4, #8]
    d0aa:	3303      	adds	r3, #3
    d0ac:	8123      	strh	r3, [r4, #8]
}
    d0ae:	bd10      	pop	{r4, pc}

0000d0b0 <bb_getUInt32ByIndex>:
    gxByteBuffer* arr,
    uint32_t index,
    uint32_t* value)
{

    if (index + 4 > arr->size)
    d0b0:	88c3      	ldrh	r3, [r0, #6]
{
    d0b2:	b510      	push	{r4, lr}
    if (index + 4 > arr->size)
    d0b4:	1d0c      	adds	r4, r1, #4
    d0b6:	429c      	cmp	r4, r3
    d0b8:	d80e      	bhi.n	d0d8 <bb_getUInt32ByIndex+0x28>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    *value = GETU32(arr->data + index);
    d0ba:	6800      	ldr	r0, [r0, #0]
    d0bc:	5c44      	ldrb	r4, [r0, r1]
    d0be:	4401      	add	r1, r0
    d0c0:	78cb      	ldrb	r3, [r1, #3]
    d0c2:	7848      	ldrb	r0, [r1, #1]
    d0c4:	7889      	ldrb	r1, [r1, #2]
    d0c6:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
    d0ca:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    d0ce:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    d0d2:	6013      	str	r3, [r2, #0]
    return 0;
    d0d4:	2000      	movs	r0, #0
}
    d0d6:	bd10      	pop	{r4, pc}
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    d0d8:	f44f 7082 	mov.w	r0, #260	; 0x104
    d0dc:	e7fb      	b.n	d0d6 <bb_getUInt32ByIndex+0x26>

0000d0de <bb_getInt32>:
{
    d0de:	b510      	push	{r4, lr}
    d0e0:	4604      	mov	r4, r0
    d0e2:	460a      	mov	r2, r1
    int ret = bb_getUInt32ByIndex(arr, arr->position, (uint32_t*)value);
    d0e4:	8901      	ldrh	r1, [r0, #8]
    d0e6:	f7ff ffe3 	bl	d0b0 <bb_getUInt32ByIndex>
    arr->position += 4;
    d0ea:	8923      	ldrh	r3, [r4, #8]
    d0ec:	3304      	adds	r3, #4
    d0ee:	8123      	strh	r3, [r4, #8]
}
    d0f0:	bd10      	pop	{r4, pc}

0000d0f2 <bb_getUInt64ByIndex>:
int bb_getUInt64ByIndex(
    gxByteBuffer* arr,
    uint32_t index,
    uint64_t* value)
{
    if (index + 8 > arr->size)
    d0f2:	88c3      	ldrh	r3, [r0, #6]
{
    d0f4:	b510      	push	{r4, lr}
    if (index + 8 > arr->size)
    d0f6:	f101 0408 	add.w	r4, r1, #8
    d0fa:	429c      	cmp	r4, r3
    d0fc:	d81a      	bhi.n	d134 <bb_getUInt64ByIndex+0x42>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    *value = GETU32(arr->data + index);
    d0fe:	6800      	ldr	r0, [r0, #0]
    d100:	5c44      	ldrb	r4, [r0, r1]
    d102:	4401      	add	r1, r0
    d104:	78cb      	ldrb	r3, [r1, #3]
    d106:	7848      	ldrb	r0, [r1, #1]
    d108:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
    d10c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    d110:	7888      	ldrb	r0, [r1, #2]
    d112:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    //Some 32 bit microcontrollers can't handle *value <<= 32;
    //For this reason value is sifted on two parts.
    *value <<= 16;
    *value <<= 16;
    d116:	2000      	movs	r0, #0
    d118:	e9c2 0300 	strd	r0, r3, [r2]
    *value |= GETU32(arr->data + index + 4);
    d11c:	794b      	ldrb	r3, [r1, #5]
    d11e:	790c      	ldrb	r4, [r1, #4]
    d120:	041b      	lsls	r3, r3, #16
    d122:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
    d126:	79cc      	ldrb	r4, [r1, #7]
    d128:	7989      	ldrb	r1, [r1, #6]
    d12a:	4323      	orrs	r3, r4
    d12c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    d130:	6013      	str	r3, [r2, #0]
    return 0;
}
    d132:	bd10      	pop	{r4, pc}
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    d134:	f44f 7082 	mov.w	r0, #260	; 0x104
    d138:	e7fb      	b.n	d132 <bb_getUInt64ByIndex+0x40>

0000d13a <bb_getInt64>:
{
    d13a:	b510      	push	{r4, lr}
    d13c:	460a      	mov	r2, r1
    int ret = bb_getUInt64ByIndex(arr, arr->position, (uint64_t*)value);
    d13e:	8901      	ldrh	r1, [r0, #8]
{
    d140:	4604      	mov	r4, r0
    int ret = bb_getUInt64ByIndex(arr, arr->position, (uint64_t*)value);
    d142:	f7ff ffd6 	bl	d0f2 <bb_getUInt64ByIndex>
    if (ret == 0)
    d146:	b910      	cbnz	r0, d14e <bb_getInt64+0x14>
        arr->position += 8;
    d148:	8923      	ldrh	r3, [r4, #8]
    d14a:	3308      	adds	r3, #8
    d14c:	8123      	strh	r3, [r4, #8]
}
    d14e:	bd10      	pop	{r4, pc}

0000d150 <bb_getUInt64>:
{
    d150:	b510      	push	{r4, lr}
    d152:	460a      	mov	r2, r1
    int ret = bb_getUInt64ByIndex(arr, arr->position, value);
    d154:	8901      	ldrh	r1, [r0, #8]
{
    d156:	4604      	mov	r4, r0
    int ret = bb_getUInt64ByIndex(arr, arr->position, value);
    d158:	f7ff ffcb 	bl	d0f2 <bb_getUInt64ByIndex>
    if (ret == 0)
    d15c:	b910      	cbnz	r0, d164 <bb_getUInt64+0x14>
        arr->position += 8;
    d15e:	8923      	ldrh	r3, [r4, #8]
    d160:	3308      	adds	r3, #8
    d162:	8123      	strh	r3, [r4, #8]
}
    d164:	bd10      	pop	{r4, pc}

0000d166 <bb_getFloat>:

#ifndef DLMS_IGNORE_FLOAT32
int bb_getFloat(
    gxByteBuffer* arr,
    float* value)
{
    d166:	b570      	push	{r4, r5, r6, lr}
    {
        float value;
        char b[sizeof(float)];
    } HELPER;
    HELPER tmp;
    if (arr->position + 4 > arr->size)
    d168:	8904      	ldrh	r4, [r0, #8]
    d16a:	88c3      	ldrh	r3, [r0, #6]
    d16c:	1d25      	adds	r5, r4, #4
    d16e:	429d      	cmp	r5, r3
    d170:	dc12      	bgt.n	d198 <bb_getFloat+0x32>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    tmp.b[3] = arr->data[arr->position];
    d172:	6802      	ldr	r2, [r0, #0]
    d174:	5d16      	ldrb	r6, [r2, r4]
    tmp.b[2] = arr->data[arr->position + 1];
    d176:	4422      	add	r2, r4
    tmp.b[3] = arr->data[arr->position];
    d178:	2300      	movs	r3, #0
    tmp.b[2] = arr->data[arr->position + 1];
    d17a:	7854      	ldrb	r4, [r2, #1]
    tmp.b[3] = arr->data[arr->position];
    d17c:	f366 631f 	bfi	r3, r6, #24, #8
    tmp.b[2] = arr->data[arr->position + 1];
    d180:	f364 4317 	bfi	r3, r4, #16, #8
    tmp.b[1] = arr->data[arr->position + 2];
    d184:	7894      	ldrb	r4, [r2, #2]
    tmp.b[0] = arr->data[arr->position + 3];
    d186:	78d2      	ldrb	r2, [r2, #3]
    tmp.b[1] = arr->data[arr->position + 2];
    d188:	f364 230f 	bfi	r3, r4, #8, #8
    tmp.b[0] = arr->data[arr->position + 3];
    d18c:	f362 0307 	bfi	r3, r2, #0, #8
    *value = tmp.value;
    d190:	600b      	str	r3, [r1, #0]
    arr->position += 4;
    d192:	8105      	strh	r5, [r0, #8]
    return 0;
    d194:	2000      	movs	r0, #0
}
    d196:	bd70      	pop	{r4, r5, r6, pc}
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    d198:	f44f 7082 	mov.w	r0, #260	; 0x104
    d19c:	e7fb      	b.n	d196 <bb_getFloat+0x30>

0000d19e <bb_getDouble>:

#ifndef DLMS_IGNORE_FLOAT64
int bb_getDouble(
    gxByteBuffer* arr,
    double* value)
{
    d19e:	b5f0      	push	{r4, r5, r6, r7, lr}
    {
        double value;
        char b[sizeof(double)];
    } HELPER;
    HELPER tmp;
    if (arr->position + 8 > arr->size)
    d1a0:	8905      	ldrh	r5, [r0, #8]
    d1a2:	88c3      	ldrh	r3, [r0, #6]
    d1a4:	f105 0608 	add.w	r6, r5, #8
    d1a8:	429e      	cmp	r6, r3
    d1aa:	dc20      	bgt.n	d1ee <bb_getDouble+0x50>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    tmp.b[7] = arr->data[arr->position];
    d1ac:	6804      	ldr	r4, [r0, #0]
    d1ae:	5d67      	ldrb	r7, [r4, r5]
    tmp.b[6] = arr->data[arr->position + 1];
    d1b0:	442c      	add	r4, r5
    tmp.b[7] = arr->data[arr->position];
    d1b2:	2300      	movs	r3, #0
    tmp.b[6] = arr->data[arr->position + 1];
    d1b4:	7865      	ldrb	r5, [r4, #1]
    tmp.b[7] = arr->data[arr->position];
    d1b6:	f367 631f 	bfi	r3, r7, #24, #8
    tmp.b[6] = arr->data[arr->position + 1];
    d1ba:	f365 4317 	bfi	r3, r5, #16, #8
    tmp.b[5] = arr->data[arr->position + 2];
    d1be:	78a5      	ldrb	r5, [r4, #2]
    d1c0:	f365 230f 	bfi	r3, r5, #8, #8
    tmp.b[4] = arr->data[arr->position + 3];
    d1c4:	78e5      	ldrb	r5, [r4, #3]
    d1c6:	f365 0307 	bfi	r3, r5, #0, #8
    tmp.b[3] = arr->data[arr->position + 4];
    d1ca:	7925      	ldrb	r5, [r4, #4]
    tmp.b[7] = arr->data[arr->position];
    d1cc:	2200      	movs	r2, #0
    tmp.b[3] = arr->data[arr->position + 4];
    d1ce:	f365 621f 	bfi	r2, r5, #24, #8
    tmp.b[2] = arr->data[arr->position + 5];
    d1d2:	7965      	ldrb	r5, [r4, #5]
    d1d4:	f365 4217 	bfi	r2, r5, #16, #8
    tmp.b[1] = arr->data[arr->position + 6];
    d1d8:	79a5      	ldrb	r5, [r4, #6]
    tmp.b[0] = arr->data[arr->position + 7];
    d1da:	79e4      	ldrb	r4, [r4, #7]
    tmp.b[1] = arr->data[arr->position + 6];
    d1dc:	f365 220f 	bfi	r2, r5, #8, #8
    tmp.b[0] = arr->data[arr->position + 7];
    d1e0:	f364 0207 	bfi	r2, r4, #0, #8
    *value = tmp.value;
    d1e4:	e9c1 2300 	strd	r2, r3, [r1]
    arr->position += 8;
    d1e8:	8106      	strh	r6, [r0, #8]
    return 0;
    d1ea:	2000      	movs	r0, #0
}
    d1ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    d1ee:	f44f 7082 	mov.w	r0, #260	; 0x104
    d1f2:	e7fb      	b.n	d1ec <bb_getDouble+0x4e>

0000d1f4 <bb_getUInt16ByIndex>:
int bb_getUInt16ByIndex(
    gxByteBuffer* arr,
    uint32_t index,
    uint16_t* value)
{
    if (index + 2 > arr->size)
    d1f4:	88c3      	ldrh	r3, [r0, #6]
{
    d1f6:	b510      	push	{r4, lr}
    if (index + 2 > arr->size)
    d1f8:	1c8c      	adds	r4, r1, #2
    d1fa:	429c      	cmp	r4, r3
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    *value = (uint16_t)(((unsigned char*)arr->data)[index] << 8 |
    d1fc:	bf9d      	ittte	ls
    d1fe:	6803      	ldrls	r3, [r0, #0]
    d200:	5c58      	ldrbls	r0, [r3, r1]
        ((unsigned char*)arr->data)[index + 1]);
    d202:	18c9      	addls	r1, r1, r3
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    d204:	f44f 7082 	movhi.w	r0, #260	; 0x104
        ((unsigned char*)arr->data)[index + 1]);
    d208:	bf9f      	itttt	ls
    d20a:	784b      	ldrbls	r3, [r1, #1]
    *value = (uint16_t)(((unsigned char*)arr->data)[index] << 8 |
    d20c:	ea43 2300 	orrls.w	r3, r3, r0, lsl #8
    d210:	8013      	strhls	r3, [r2, #0]
    return 0;
    d212:	2000      	movls	r0, #0
}
    d214:	bd10      	pop	{r4, pc}

0000d216 <bb_addHexString>:

#ifndef DLMS_IGNORE_MALLOC
int bb_addHexString(
    gxByteBuffer* arr,
    const char* str)
{
    d216:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint16_t count;
    int ret;
    unsigned char* buffer = NULL;
    d218:	2300      	movs	r3, #0
{
    d21a:	4605      	mov	r5, r0
    ret = hlp_hexToBytes(str, &buffer, &count);
    d21c:	f10d 0202 	add.w	r2, sp, #2
{
    d220:	4608      	mov	r0, r1
    ret = hlp_hexToBytes(str, &buffer, &count);
    d222:	a901      	add	r1, sp, #4
    unsigned char* buffer = NULL;
    d224:	9301      	str	r3, [sp, #4]
    ret = hlp_hexToBytes(str, &buffer, &count);
    d226:	f00c fb72 	bl	1990e <hlp_hexToBytes>
    if (ret != 0)
    d22a:	4604      	mov	r4, r0
    d22c:	b948      	cbnz	r0, d242 <bb_addHexString+0x2c>
    {
        return ret;
    }
    if (buffer != NULL)
    d22e:	9901      	ldr	r1, [sp, #4]
    d230:	b139      	cbz	r1, d242 <bb_addHexString+0x2c>
    {
        bb_set(arr, buffer, count);
    d232:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    d236:	4628      	mov	r0, r5
    d238:	f7ff fe23 	bl	ce82 <bb_set>
        gxfree(buffer);
    d23c:	9801      	ldr	r0, [sp, #4]
    d23e:	f7fe fcc1 	bl	bbc4 <free>
    }
    return 0;
}
    d242:	4620      	mov	r0, r4
    d244:	b003      	add	sp, #12
    d246:	bd30      	pop	{r4, r5, pc}

0000d248 <bb_toHexString>:
}

char* bb_toHexString(
    gxByteBuffer* arr)
{
    char* buff = hlp_bytesToHex(arr->data, arr->size);
    d248:	88c1      	ldrh	r1, [r0, #6]
    d24a:	6800      	ldr	r0, [r0, #0]
    d24c:	f7f6 bf64 	b.w	4118 <hlp_bytesToHex>

0000d250 <bb_addIntAsString2>:
{
    return bb_addIntAsString2(bb, value, 0);
}

int bb_addIntAsString2(gxByteBuffer* bb, int value, unsigned char digits)
{
    d250:	b510      	push	{r4, lr}
    d252:	b088      	sub	sp, #32
    d254:	4604      	mov	r4, r0
    int ret;
    char str[20];
    hlp_intToString(str, 20, value, 1, digits);
    d256:	9200      	str	r2, [sp, #0]
    d258:	2301      	movs	r3, #1
    d25a:	460a      	mov	r2, r1
    d25c:	a803      	add	r0, sp, #12
    d25e:	2114      	movs	r1, #20
    d260:	f00c fba3 	bl	199aa <hlp_intToString>
    if (value != NULL)
    d264:	a903      	add	r1, sp, #12
    d266:	4620      	mov	r0, r4
    d268:	f7ff fe20 	bl	ceac <bb_addString.part.0>
    if ((ret = bb_addString(bb, str)) != 0)
    {

    }
    return ret;
}
    d26c:	b008      	add	sp, #32
    d26e:	bd10      	pop	{r4, pc}

0000d270 <bb_addIntAsString>:
    return bb_addIntAsString2(bb, value, 0);
    d270:	2200      	movs	r2, #0
    d272:	f7ff bfed 	b.w	d250 <bb_addIntAsString2>

0000d276 <bb_move>:
    uint16_t destPos,
    uint16_t count)
#endif
{
    //If items are removed.
    if (srcPos > destPos)
    d276:	4291      	cmp	r1, r2
{
    d278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d27c:	4604      	mov	r4, r0
    d27e:	4688      	mov	r8, r1
    d280:	4616      	mov	r6, r2
    d282:	461f      	mov	r7, r3
    d284:	eb03 0502 	add.w	r5, r3, r2
    if (srcPos > destPos)
    d288:	d905      	bls.n	d296 <bb_move+0x20>
    {
        if (bb->size < destPos + count)
    d28a:	88c3      	ldrh	r3, [r0, #6]
    d28c:	42ab      	cmp	r3, r5
    d28e:	db20      	blt.n	d2d2 <bb_move+0x5c>
            {
                return ret;
            }
        }
    }
    if (count != 0)
    d290:	b98f      	cbnz	r7, d2b6 <bb_move+0x40>
        //Do not use memcpy here!
        memmove(bb->data + destPos, bb->data + srcPos, count);
        bb->size = (destPos + count);
        if (bb->position > bb->size)
        {
            bb->position = bb->size;
    d292:	2000      	movs	r0, #0
    d294:	e00d      	b.n	d2b2 <bb_move+0x3c>
    return arr->capacity & 0x7FFF;
    d296:	8883      	ldrh	r3, [r0, #4]
        if (bb_getCapacity(bb) < count + destPos)
    d298:	f3c3 030e 	ubfx	r3, r3, #0, #15
    d29c:	42ab      	cmp	r3, r5
    d29e:	daf7      	bge.n	d290 <bb_move+0x1a>
            if (bb_isAttached(bb))
    d2a0:	f7ff fc8f 	bl	cbc2 <bb_isAttached>
    d2a4:	b9a8      	cbnz	r0, d2d2 <bb_move+0x5c>
            if ((ret = bb_capacity(bb, count + destPos)) != 0)
    d2a6:	b2a9      	uxth	r1, r5
    d2a8:	4620      	mov	r0, r4
    d2aa:	f7ff fca1 	bl	cbf0 <bb_capacity>
    d2ae:	2800      	cmp	r0, #0
    d2b0:	d0ee      	beq.n	d290 <bb_move+0x1a>
        }
    }
    return DLMS_ERROR_CODE_OK;
}
    d2b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        memmove(bb->data + destPos, bb->data + srcPos, count);
    d2b6:	6820      	ldr	r0, [r4, #0]
__ssp_bos_icheck3(memmove, void *, const void *)
    d2b8:	463a      	mov	r2, r7
    d2ba:	eb00 0108 	add.w	r1, r0, r8
    d2be:	4430      	add	r0, r6
    d2c0:	f00e ff2f 	bl	1c122 <memmove>
        if (bb->position > bb->size)
    d2c4:	8923      	ldrh	r3, [r4, #8]
        bb->size = (destPos + count);
    d2c6:	b2ad      	uxth	r5, r5
        if (bb->position > bb->size)
    d2c8:	42ab      	cmp	r3, r5
        bb->size = (destPos + count);
    d2ca:	80e5      	strh	r5, [r4, #6]
            bb->position = bb->size;
    d2cc:	bf88      	it	hi
    d2ce:	8125      	strhhi	r5, [r4, #8]
    d2d0:	e7df      	b.n	d292 <bb_move+0x1c>
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
    d2d2:	f44f 7081 	mov.w	r0, #258	; 0x102
    d2d6:	e7ec      	b.n	d2b2 <bb_move+0x3c>

0000d2d8 <bb_insert>:
{
    d2d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d2dc:	460f      	mov	r7, r1
    if (target->size == 0)
    d2de:	88d1      	ldrh	r1, [r2, #6]
{
    d2e0:	4680      	mov	r8, r0
    d2e2:	4615      	mov	r5, r2
    d2e4:	461e      	mov	r6, r3
    if (target->size == 0)
    d2e6:	b931      	cbnz	r1, d2f6 <bb_insert+0x1e>
        ret = bb_set(target, src, count);
    d2e8:	463a      	mov	r2, r7
    d2ea:	4601      	mov	r1, r0
    d2ec:	4628      	mov	r0, r5
}
    d2ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        ret = bb_set(target, src, count);
    d2f2:	f7ff bdc6 	b.w	ce82 <bb_set>
        if ((ret = bb_capacity(target, target->size + count)) == 0 &&
    d2f6:	4439      	add	r1, r7
    d2f8:	b289      	uxth	r1, r1
    d2fa:	4610      	mov	r0, r2
    d2fc:	f7ff fc78 	bl	cbf0 <bb_capacity>
    d300:	4604      	mov	r4, r0
    d302:	b988      	cbnz	r0, d328 <bb_insert+0x50>
            (ret = bb_move(target, index, index + count, target->size - index)) == 0)
    d304:	88eb      	ldrh	r3, [r5, #6]
    d306:	19ba      	adds	r2, r7, r6
    d308:	1b9b      	subs	r3, r3, r6
    d30a:	b29b      	uxth	r3, r3
    d30c:	b292      	uxth	r2, r2
    d30e:	4631      	mov	r1, r6
    d310:	4628      	mov	r0, r5
    d312:	f7ff ffb0 	bl	d276 <bb_move>
        if ((ret = bb_capacity(target, target->size + count)) == 0 &&
    d316:	4604      	mov	r4, r0
    d318:	b930      	cbnz	r0, d328 <bb_insert+0x50>
            memmove(target->data + index, src + index, count);
    d31a:	6828      	ldr	r0, [r5, #0]
    d31c:	463a      	mov	r2, r7
    d31e:	eb08 0106 	add.w	r1, r8, r6
    d322:	4430      	add	r0, r6
    d324:	f00e fefd 	bl	1c122 <memmove>
}
    d328:	4620      	mov	r0, r4
    d32a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d32e <bb_trim>:

int bb_trim(
    gxByteBuffer* bb)
{
    int ret;
    if (bb->size == bb->position)
    d32e:	88c3      	ldrh	r3, [r0, #6]
    d330:	8901      	ldrh	r1, [r0, #8]
    d332:	428b      	cmp	r3, r1
{
    d334:	b510      	push	{r4, lr}
    d336:	4604      	mov	r4, r0
    if (bb->size == bb->position)
    d338:	d104      	bne.n	d344 <bb_trim+0x16>
    {
        bb->size = 0;
    d33a:	2300      	movs	r3, #0
    d33c:	80c3      	strh	r3, [r0, #6]
        if ((ret = bb_move(bb, bb->position, 0, bb->size - bb->position)) != 0)
        {
            return ret;
        }
    }
    bb->position = 0;
    d33e:	2000      	movs	r0, #0
    d340:	8120      	strh	r0, [r4, #8]
    return DLMS_ERROR_CODE_OK;
    d342:	e006      	b.n	d352 <bb_trim+0x24>
        if ((ret = bb_move(bb, bb->position, 0, bb->size - bb->position)) != 0)
    d344:	1a5b      	subs	r3, r3, r1
    d346:	b29b      	uxth	r3, r3
    d348:	2200      	movs	r2, #0
    d34a:	f7ff ff94 	bl	d276 <bb_move>
    d34e:	2800      	cmp	r0, #0
    d350:	d0f5      	beq.n	d33e <bb_trim+0x10>
}
    d352:	bd10      	pop	{r4, pc}

0000d354 <bb_get>:
int bb_get(
    gxByteBuffer* bb,
    unsigned char* value,
    uint16_t count)
#endif
{
    d354:	b538      	push	{r3, r4, r5, lr}
    d356:	4604      	mov	r4, r0
    d358:	4615      	mov	r5, r2
    d35a:	4608      	mov	r0, r1
    if (bb == NULL || value == NULL || bb->size - bb->position < count)
    d35c:	b174      	cbz	r4, d37c <bb_get+0x28>
    d35e:	b169      	cbz	r1, d37c <bb_get+0x28>
    d360:	8921      	ldrh	r1, [r4, #8]
    d362:	88e3      	ldrh	r3, [r4, #6]
    d364:	1a5b      	subs	r3, r3, r1
    d366:	4293      	cmp	r3, r2
    d368:	db08      	blt.n	d37c <bb_get+0x28>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    memcpy(value, bb->data + bb->position, count);
    d36a:	6823      	ldr	r3, [r4, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    d36c:	4419      	add	r1, r3
    d36e:	f00e feb7 	bl	1c0e0 <memcpy>
    bb->position += count;
    d372:	8922      	ldrh	r2, [r4, #8]
    d374:	4415      	add	r5, r2
    d376:	8125      	strh	r5, [r4, #8]
    return 0;
    d378:	2000      	movs	r0, #0
}
    d37a:	bd38      	pop	{r3, r4, r5, pc}
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    d37c:	f44f 7082 	mov.w	r0, #260	; 0x104
    d380:	e7fb      	b.n	d37a <bb_get+0x26>

0000d382 <cip_xor>:
{
    d382:	b510      	push	{r4, lr}
    d384:	1e43      	subs	r3, r0, #1
    d386:	3901      	subs	r1, #1
    d388:	300f      	adds	r0, #15
        dst[pos] ^= src[pos];
    d38a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    d38e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    for (pos = 0; pos != 16; ++pos)
    d392:	4283      	cmp	r3, r0
        dst[pos] ^= src[pos];
    d394:	ea82 0204 	eor.w	r2, r2, r4
    d398:	701a      	strb	r2, [r3, #0]
    for (pos = 0; pos != 16; ++pos)
    d39a:	d1f6      	bne.n	d38a <cip_xor+0x8>
}
    d39c:	bd10      	pop	{r4, pc}

0000d39e <shift_right_block>:
    uint32_t val = GETU32(v + 12);
    d39e:	68c3      	ldr	r3, [r0, #12]
    if (v[11] & 0x01)
    d3a0:	7ac1      	ldrb	r1, [r0, #11]
    d3a2:	ba1b      	rev	r3, r3
    d3a4:	07ca      	lsls	r2, r1, #31
    val >>= 1;
    d3a6:	ea4f 0353 	mov.w	r3, r3, lsr #1
        val |= 0x80000000;
    d3aa:	bf48      	it	mi
    d3ac:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
    val = GETU32(v + 8);
    d3b0:	7a42      	ldrb	r2, [r0, #9]
    d3b2:	ba1b      	rev	r3, r3
    PUT32(v + 12, val);
    d3b4:	60c3      	str	r3, [r0, #12]
    val = GETU32(v + 8);
    d3b6:	7a03      	ldrb	r3, [r0, #8]
    d3b8:	0412      	lsls	r2, r2, #16
    d3ba:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
    d3be:	7a83      	ldrb	r3, [r0, #10]
    d3c0:	430a      	orrs	r2, r1
    if (v[7] & 0x01)
    d3c2:	79c1      	ldrb	r1, [r0, #7]
    val = GETU32(v + 8);
    d3c4:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    val >>= 1;
    d3c8:	0852      	lsrs	r2, r2, #1
    if (v[7] & 0x01)
    d3ca:	07cb      	lsls	r3, r1, #31
        val |= 0x80000000;
    d3cc:	bf48      	it	mi
    d3ce:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
    val = GETU32(v + 4);
    d3d2:	7943      	ldrb	r3, [r0, #5]
    d3d4:	ba12      	rev	r2, r2
    PUT32(v + 8, val);
    d3d6:	6082      	str	r2, [r0, #8]
    val = GETU32(v + 4);
    d3d8:	7902      	ldrb	r2, [r0, #4]
    d3da:	041b      	lsls	r3, r3, #16
    d3dc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    d3e0:	7982      	ldrb	r2, [r0, #6]
    d3e2:	430b      	orrs	r3, r1
    d3e4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    if (v[3] & 0x01)
    d3e8:	78c2      	ldrb	r2, [r0, #3]
    val >>= 1;
    d3ea:	085b      	lsrs	r3, r3, #1
    if (v[3] & 0x01)
    d3ec:	07d1      	lsls	r1, r2, #31
        val |= 0x80000000;
    d3ee:	bf48      	it	mi
    d3f0:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
    PUT32(v + 4, val);
    d3f4:	ba1b      	rev	r3, r3
    d3f6:	6043      	str	r3, [r0, #4]
    val = GETU32(v);
    d3f8:	7843      	ldrb	r3, [r0, #1]
    d3fa:	7801      	ldrb	r1, [r0, #0]
    d3fc:	041b      	lsls	r3, r3, #16
    d3fe:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    d402:	4313      	orrs	r3, r2
    d404:	7882      	ldrb	r2, [r0, #2]
    PUT32(v, val);
    d406:	0e59      	lsrs	r1, r3, #25
    val = GETU32(v);
    d408:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
    PUT32(v, val);
    d40c:	0c5b      	lsrs	r3, r3, #17
    d40e:	7043      	strb	r3, [r0, #1]
    d410:	0a53      	lsrs	r3, r2, #9
    val >>= 1;
    d412:	0852      	lsrs	r2, r2, #1
    PUT32(v, val);
    d414:	7001      	strb	r1, [r0, #0]
    d416:	7083      	strb	r3, [r0, #2]
    d418:	70c2      	strb	r2, [r0, #3]
}
    d41a:	4770      	bx	lr

0000d41c <cip_inc32>:
    val = GETU32(block + 16 - 4);
    d41c:	68c3      	ldr	r3, [r0, #12]
    d41e:	ba1b      	rev	r3, r3
    val++;
    d420:	3301      	adds	r3, #1
    d422:	ba1b      	rev	r3, r3
    PUT32(block + 16 - 4, val);
    d424:	60c3      	str	r3, [r0, #12]
}
    d426:	4770      	bx	lr

0000d428 <cip_multiplyH>:
{
    d428:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    d42c:	4617      	mov	r7, r2
    d42e:	4604      	mov	r4, r0
    d430:	460e      	mov	r6, r1
__ssp_bos_icheck3(memset, void *, int)
    d432:	2210      	movs	r2, #16
    d434:	2100      	movs	r1, #0
    d436:	4638      	mov	r0, r7
    d438:	f00e fe8d 	bl	1c156 <memset>
    memcpy(tmp, y, 16);
    d43c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    d440:	466d      	mov	r5, sp
    d442:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    for (i = 0; i < 16; i++)
    d446:	f104 0810 	add.w	r8, r4, #16
{
    d44a:	2607      	movs	r6, #7
            if (x[i] & 1 << (7 - j))
    d44c:	7823      	ldrb	r3, [r4, #0]
    d44e:	4133      	asrs	r3, r6
    d450:	07da      	lsls	r2, r3, #31
    d452:	d503      	bpl.n	d45c <cip_multiplyH+0x34>
                cip_xor(z, tmp);
    d454:	4629      	mov	r1, r5
    d456:	4638      	mov	r0, r7
    d458:	f7ff ff93 	bl	d382 <cip_xor>
            if (tmp[15] & 0x01)
    d45c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d460:	07db      	lsls	r3, r3, #31
                shift_right_block(tmp);
    d462:	4628      	mov	r0, r5
            if (tmp[15] & 0x01)
    d464:	d50f      	bpl.n	d486 <cip_multiplyH+0x5e>
                shift_right_block(tmp);
    d466:	f7ff ff9a 	bl	d39e <shift_right_block>
                tmp[0] ^= 0xe1;
    d46a:	f89d 3000 	ldrb.w	r3, [sp]
    d46e:	f083 03e1 	eor.w	r3, r3, #225	; 0xe1
    d472:	f88d 3000 	strb.w	r3, [sp]
        for (j = 0; j < 8; j++)
    d476:	3e01      	subs	r6, #1
    d478:	d2e8      	bcs.n	d44c <cip_multiplyH+0x24>
    for (i = 0; i < 16; i++)
    d47a:	3401      	adds	r4, #1
    d47c:	45a0      	cmp	r8, r4
    d47e:	d1e4      	bne.n	d44a <cip_multiplyH+0x22>
}
    d480:	b004      	add	sp, #16
    d482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                shift_right_block(tmp);
    d486:	f7ff ff8a 	bl	d39e <shift_right_block>
    d48a:	e7f4      	b.n	d476 <cip_multiplyH+0x4e>

0000d48c <cip_getGHash>:
{
    d48c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    m = xlen / 16;
    d490:	2a00      	cmp	r2, #0
    d492:	4616      	mov	r6, r2
    d494:	bfb8      	it	lt
    d496:	f102 060f 	addlt.w	r6, r2, #15
{
    d49a:	4607      	mov	r7, r0
    d49c:	4688      	mov	r8, r1
    d49e:	4615      	mov	r5, r2
    d4a0:	461c      	mov	r4, r3
    m = xlen / 16;
    d4a2:	1136      	asrs	r6, r6, #4
    for (i = 0; i < m; i++)
    d4a4:	f04f 0a00 	mov.w	sl, #0
        cip_multiplyH(y, h, tmp);
    d4a8:	46e9      	mov	r9, sp
    for (i = 0; i < m; i++)
    d4aa:	45b2      	cmp	sl, r6
    d4ac:	eb08 110a 	add.w	r1, r8, sl, lsl #4
    d4b0:	db25      	blt.n	d4fe <cip_getGHash+0x72>
    d4b2:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
    d4b6:	eb08 1106 	add.w	r1, r8, r6, lsl #4
    if (x + xlen > xpos)
    d4ba:	44a8      	add	r8, r5
    d4bc:	4541      	cmp	r1, r8
    d4be:	ea4f 1206 	mov.w	r2, r6, lsl #4
    d4c2:	d219      	bcs.n	d4f8 <cip_getGHash+0x6c>
        memcpy(tmp, xpos, last);
    d4c4:	466e      	mov	r6, sp
        size_t last = x + xlen - xpos;
    d4c6:	1aad      	subs	r5, r5, r2
        memcpy(tmp, xpos, last);
    d4c8:	2310      	movs	r3, #16
    d4ca:	462a      	mov	r2, r5
    d4cc:	4630      	mov	r0, r6
    d4ce:	f00e fe15 	bl	1c0fc <__memcpy_chk>
    d4d2:	f1c5 0210 	rsb	r2, r5, #16
    d4d6:	2100      	movs	r1, #0
    d4d8:	1970      	adds	r0, r6, r5
    d4da:	f00e fe3c 	bl	1c156 <memset>
        cip_xor(y, tmp);
    d4de:	4631      	mov	r1, r6
    d4e0:	4620      	mov	r0, r4
    d4e2:	f7ff ff4e 	bl	d382 <cip_xor>
        cip_multiplyH(y, h, tmp);
    d4e6:	4632      	mov	r2, r6
    d4e8:	4639      	mov	r1, r7
    d4ea:	4620      	mov	r0, r4
    d4ec:	f7ff ff9c 	bl	d428 <cip_multiplyH>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    d4f0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    d4f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    d4f8:	b004      	add	sp, #16
    d4fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        cip_xor(y, xpos);
    d4fe:	4620      	mov	r0, r4
    d500:	f7ff ff3f 	bl	d382 <cip_xor>
        cip_multiplyH(y, h, tmp);
    d504:	464a      	mov	r2, r9
    d506:	4639      	mov	r1, r7
    d508:	4620      	mov	r0, r4
    d50a:	f7ff ff8d 	bl	d428 <cip_multiplyH>
    d50e:	e899 000f 	ldmia.w	r9, {r0, r1, r2, r3}
    for (i = 0; i < m; i++)
    d512:	f10a 0a01 	add.w	sl, sl, #1
    d516:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    d51a:	e7c6      	b.n	d4aa <cip_getGHash+0x1e>

0000d51c <aes_gcm_ghash>:
{
    d51c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    d520:	e9dd 470a 	ldrd	r4, r7, [sp, #40]	; 0x28
    d524:	4606      	mov	r6, r0
    d526:	4698      	mov	r8, r3
    cip_getGHash(H, aad, aad_len, S);
    d528:	463b      	mov	r3, r7
{
    d52a:	4615      	mov	r5, r2
    cip_getGHash(H, aad, aad_len, S);
    d52c:	f7ff ffae 	bl	d48c <cip_getGHash>
    cip_getGHash(H, crypt, crypt_len, S);
    d530:	463b      	mov	r3, r7
    d532:	4622      	mov	r2, r4
    d534:	4641      	mov	r1, r8
    d536:	4630      	mov	r0, r6
    d538:	f7ff ffa8 	bl	d48c <cip_getGHash>
    PUT32(len_buf + 4, (uint32_t)(aad_len * 8));
    d53c:	00ea      	lsls	r2, r5, #3
    PUT32(len_buf, (uint32_t)0);
    d53e:	2300      	movs	r3, #0
    PUT32(len_buf + 4, (uint32_t)(aad_len * 8));
    d540:	f88d 2007 	strb.w	r2, [sp, #7]
    PUT32(len_buf + 12, (uint32_t)(crypt_len * 8));
    d544:	f3c4 5247 	ubfx	r2, r4, #21, #8
    PUT32(len_buf, (uint32_t)0);
    d548:	9300      	str	r3, [sp, #0]
    PUT32(len_buf + 4, (uint32_t)(aad_len * 8));
    d54a:	f88d 3004 	strb.w	r3, [sp, #4]
    d54e:	f3c5 314f 	ubfx	r1, r5, #13, #16
    PUT32(len_buf + 8, (uint32_t)0);
    d552:	9302      	str	r3, [sp, #8]
    PUT32(len_buf + 12, (uint32_t)(crypt_len * 8));
    d554:	f88d 200c 	strb.w	r2, [sp, #12]
    d558:	00e3      	lsls	r3, r4, #3
    d55a:	f3c4 324f 	ubfx	r2, r4, #13, #16
    PUT32(len_buf + 4, (uint32_t)(aad_len * 8));
    d55e:	f88d 1005 	strb.w	r1, [sp, #5]
    PUT32(len_buf + 12, (uint32_t)(crypt_len * 8));
    d562:	f88d 200d 	strb.w	r2, [sp, #13]
    d566:	f88d 300f 	strb.w	r3, [sp, #15]
    PUT32(len_buf + 4, (uint32_t)(aad_len * 8));
    d56a:	f3c5 1557 	ubfx	r5, r5, #5, #24
    PUT32(len_buf + 12, (uint32_t)(crypt_len * 8));
    d56e:	f3c4 1457 	ubfx	r4, r4, #5, #24
    cip_getGHash(H, len_buf, sizeof(len_buf), S);
    d572:	463b      	mov	r3, r7
    d574:	2210      	movs	r2, #16
    d576:	4669      	mov	r1, sp
    d578:	4630      	mov	r0, r6
    PUT32(len_buf + 4, (uint32_t)(aad_len * 8));
    d57a:	f88d 5006 	strb.w	r5, [sp, #6]
    PUT32(len_buf + 12, (uint32_t)(crypt_len * 8));
    d57e:	f88d 400e 	strb.w	r4, [sp, #14]
    cip_getGHash(H, len_buf, sizeof(len_buf), S);
    d582:	f7ff ff83 	bl	d48c <cip_getGHash>
}
    d586:	b004      	add	sp, #16
    d588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d58c <cip_gctr.part.0>:
static void cip_gctr(uint32_t* aes, const unsigned char* icb, unsigned char* in, int len, unsigned char* out)
    d58c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d590:	4681      	mov	r9, r0
    d592:	4693      	mov	fp, r2
    d594:	461d      	mov	r5, r3
    n = len / 16;
    d596:	111c      	asrs	r4, r3, #4
    memcpy(cb, icb, 16);
    d598:	c90f      	ldmia	r1, {r0, r1, r2, r3}
static void cip_gctr(uint32_t* aes, const unsigned char* icb, unsigned char* in, int len, unsigned char* out)
    d59a:	b089      	sub	sp, #36	; 0x24
    d59c:	466e      	mov	r6, sp
    d59e:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    d5a2:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
    for (i = 0; i < n; i++)
    d5a6:	f04f 0a00 	mov.w	sl, #0
    d5aa:	4554      	cmp	r4, sl
    d5ac:	ea4f 120a 	mov.w	r2, sl, lsl #4
    d5b0:	eb08 130a 	add.w	r3, r8, sl, lsl #4
    d5b4:	eb0b 170a 	add.w	r7, fp, sl, lsl #4
    d5b8:	d11c      	bne.n	d5f4 <cip_gctr.part.0+0x68>
    if (last)
    d5ba:	1aad      	subs	r5, r5, r2
    d5bc:	463c      	mov	r4, r7
    d5be:	461f      	mov	r7, r3
    d5c0:	d015      	beq.n	d5ee <cip_gctr.part.0+0x62>
        aes_Encrypt(aes, aes[60], cb, tmp);
    d5c2:	4632      	mov	r2, r6
    d5c4:	f8d9 10f0 	ldr.w	r1, [r9, #240]	; 0xf0
    d5c8:	ab04      	add	r3, sp, #16
    d5ca:	4648      	mov	r0, r9
    d5cc:	f7f3 ffcc 	bl	1568 <aes_Encrypt>
        for (i = 0; i < last; i++)
    d5d0:	4425      	add	r5, r4
    d5d2:	aa04      	add	r2, sp, #16
            if (out == NULL)
    d5d4:	f814 3b01 	ldrb.w	r3, [r4], #1
                *pin ^= tmp[i];
    d5d8:	7811      	ldrb	r1, [r2, #0]
    d5da:	404b      	eors	r3, r1
            if (out == NULL)
    d5dc:	f1b8 0f00 	cmp.w	r8, #0
    d5e0:	d123      	bne.n	d62a <cip_gctr.part.0+0x9e>
                *pin ^= tmp[i];
    d5e2:	f804 3c01 	strb.w	r3, [r4, #-1]
        for (i = 0; i < last; i++)
    d5e6:	42a5      	cmp	r5, r4
    d5e8:	f102 0201 	add.w	r2, r2, #1
    d5ec:	d1f2      	bne.n	d5d4 <cip_gctr.part.0+0x48>
}
    d5ee:	b009      	add	sp, #36	; 0x24
    d5f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (out == NULL)
    d5f4:	f8d9 10f0 	ldr.w	r1, [r9, #240]	; 0xf0
    d5f8:	f1b8 0f00 	cmp.w	r8, #0
    d5fc:	d10e      	bne.n	d61c <cip_gctr.part.0+0x90>
            aes_Encrypt(aes, aes[60], cb, tmp);
    d5fe:	4648      	mov	r0, r9
    d600:	ab04      	add	r3, sp, #16
    d602:	4632      	mov	r2, r6
    d604:	f7f3 ffb0 	bl	1568 <aes_Encrypt>
            cip_xor(pin, tmp);
    d608:	a904      	add	r1, sp, #16
    d60a:	4638      	mov	r0, r7
            cip_xor(pout, pin);
    d60c:	f7ff feb9 	bl	d382 <cip_xor>
        cip_inc32(cb);
    d610:	4630      	mov	r0, r6
    d612:	f7ff ff03 	bl	d41c <cip_inc32>
    for (i = 0; i < n; i++)
    d616:	f10a 0a01 	add.w	sl, sl, #1
    d61a:	e7c6      	b.n	d5aa <cip_gctr.part.0+0x1e>
            aes_Encrypt(aes, aes[60], cb, pout);
    d61c:	4648      	mov	r0, r9
    d61e:	4632      	mov	r2, r6
    d620:	f7f3 ffa2 	bl	1568 <aes_Encrypt>
            cip_xor(pout, pin);
    d624:	4639      	mov	r1, r7
    d626:	4618      	mov	r0, r3
    d628:	e7f0      	b.n	d60c <cip_gctr.part.0+0x80>
                *pout = *pin++ ^ tmp[i];
    d62a:	f807 3b01 	strb.w	r3, [r7], #1
                ++pout;
    d62e:	e7da      	b.n	d5e6 <cip_gctr.part.0+0x5a>

0000d630 <aes_gcm_gctr.constprop.0>:
static void aes_gcm_gctr(uint32_t* aes, const unsigned char* J0, unsigned char* in, int len, unsigned char* out)
    d630:	b5f0      	push	{r4, r5, r6, r7, lr}
    d632:	4606      	mov	r6, r0
    d634:	b087      	sub	sp, #28
    d636:	4617      	mov	r7, r2
    if (len == 0)
    d638:	461d      	mov	r5, r3
    d63a:	b173      	cbz	r3, d65a <aes_gcm_gctr.constprop.0+0x2a>
    memcpy(J0inc, J0, 16);
    d63c:	c90f      	ldmia	r1, {r0, r1, r2, r3}
    d63e:	ac02      	add	r4, sp, #8
    d640:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    cip_inc32(J0inc);
    d644:	4620      	mov	r0, r4
    d646:	f7ff fee9 	bl	d41c <cip_inc32>
    if (len == 0)
    d64a:	2300      	movs	r3, #0
    d64c:	9300      	str	r3, [sp, #0]
    d64e:	463a      	mov	r2, r7
    d650:	462b      	mov	r3, r5
    d652:	4621      	mov	r1, r4
    d654:	4630      	mov	r0, r6
    d656:	f7ff ff99 	bl	d58c <cip_gctr.part.0>
}
    d65a:	b007      	add	sp, #28
    d65c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000d65e <cosem_getObjectSize>:
    switch (type)
    d65e:	3801      	subs	r0, #1
    d660:	2872      	cmp	r0, #114	; 0x72
    d662:	d866      	bhi.n	d732 <cosem_getObjectSize+0xd4>
    d664:	e8df f000 	tbb	[pc, r0]
    d668:	4f3a6563 	.word	0x4f3a6563
    d66c:	5b5d433f 	.word	0x5b5d433f
    d670:	3a5f5f5f 	.word	0x3a5f5f5f
    d674:	65536565 	.word	0x65536565
    d678:	455d435f 	.word	0x455d435f
    d67c:	59633a47 	.word	0x59633a47
    d680:	3d59634b 	.word	0x3d59634b
    d684:	65654f47 	.word	0x65654f47
    d688:	65656565 	.word	0x65656565
    d68c:	4d656565 	.word	0x4d656565
    d690:	4d5f4163 	.word	0x4d5f4163
    d694:	654f493a 	.word	0x654f493a
    d698:	57636165 	.word	0x57636165
    d69c:	5f65655b 	.word	0x5f65655b
    d6a0:	655f634b 	.word	0x655f634b
    d6a4:	5549553a 	.word	0x5549553a
    d6a8:	5d65654f 	.word	0x5d65654f
    d6ac:	61454b65 	.word	0x61454b65
    d6b0:	65654b65 	.word	0x65654b65
    d6b4:	4b656565 	.word	0x4b656565
    d6b8:	3a595757 	.word	0x3a595757
    d6bc:	6565635b 	.word	0x6565635b
    d6c0:	65656565 	.word	0x65656565
    d6c4:	65656565 	.word	0x65656565
    d6c8:	65656565 	.word	0x65656565
    d6cc:	63494949 	.word	0x63494949
    d6d0:	65656565 	.word	0x65656565
    d6d4:	61516565 	.word	0x61516565
    d6d8:	6553      	.short	0x6553
    d6da:	4f          	.byte	0x4f
    d6db:	00          	.byte	0x00
        size = sizeof(gxSapAssignment);
    d6dc:	2028      	movs	r0, #40	; 0x28
    return size;
    d6de:	b280      	uxth	r0, r0
    d6e0:	4770      	bx	lr
        size = sizeof(gxAutoAnswer);
    d6e2:	2024      	movs	r0, #36	; 0x24
        break;
    d6e4:	e7fb      	b.n	d6de <cosem_getObjectSize+0x80>
        size = sizeof(gxDemandRegister);
    d6e6:	2068      	movs	r0, #104	; 0x68
        break;
    d6e8:	e7f9      	b.n	d6de <cosem_getObjectSize+0x80>
        size = sizeof(gxIp4Setup);
    d6ea:	2050      	movs	r0, #80	; 0x50
        break;
    d6ec:	e7f7      	b.n	d6de <cosem_getObjectSize+0x80>
        size = sizeof(gxImageTransfer);
    d6ee:	2030      	movs	r0, #48	; 0x30
        break;
    d6f0:	e7f5      	b.n	d6de <cosem_getObjectSize+0x80>
        size = sizeof(gxLimiter);
    d6f2:	2080      	movs	r0, #128	; 0x80
        break;
    d6f4:	e7f3      	b.n	d6de <cosem_getObjectSize+0x80>
        size = sizeof(gxRegisterMonitor);
    d6f6:	2034      	movs	r0, #52	; 0x34
        break;
    d6f8:	e7f1      	b.n	d6de <cosem_getObjectSize+0x80>
        size = sizeof(gxZigBeeSasStartup);
    d6fa:	2010      	movs	r0, #16
        break;
    d6fc:	e7ef      	b.n	d6de <cosem_getObjectSize+0x80>
        size = sizeof(gxMBusMasterPortSetup);
    d6fe:	2014      	movs	r0, #20
        break;
    d700:	e7ed      	b.n	d6de <cosem_getObjectSize+0x80>
        size = sizeof(gxPushSetup);
    d702:	2048      	movs	r0, #72	; 0x48
        break;
    d704:	e7eb      	b.n	d6de <cosem_getObjectSize+0x80>
        size = sizeof(gxDataProtection);
    d706:	2040      	movs	r0, #64	; 0x40
        break;
    d708:	e7e9      	b.n	d6de <cosem_getObjectSize+0x80>
        size = sizeof(gxAccount);
    d70a:	208c      	movs	r0, #140	; 0x8c
        break;
    d70c:	e7e7      	b.n	d6de <cosem_getObjectSize+0x80>
        size = sizeof(gxCharge);
    d70e:	2074      	movs	r0, #116	; 0x74
        break;
    d710:	e7e5      	b.n	d6de <cosem_getObjectSize+0x80>
        size = sizeof(gxCompactData);
    d712:	203c      	movs	r0, #60	; 0x3c
        break;
    d714:	e7e3      	b.n	d6de <cosem_getObjectSize+0x80>
        size = sizeof(gxPrimeNbOfdmPlcPhysicalLayerCounters);
    d716:	2018      	movs	r0, #24
        break;
    d718:	e7e1      	b.n	d6de <cosem_getObjectSize+0x80>
        size = sizeof(gxPrimeNbOfdmPlcMacFunctionalParameters);
    d71a:	202c      	movs	r0, #44	; 0x2c
        break;
    d71c:	e7df      	b.n	d6de <cosem_getObjectSize+0x80>
        size = sizeof(gxPrimeNbOfdmPlcMacNetworkAdministrationData);
    d71e:	204c      	movs	r0, #76	; 0x4c
        break;
    d720:	e7dd      	b.n	d6de <cosem_getObjectSize+0x80>
        size = sizeof(gxArbitrator);
    d722:	2044      	movs	r0, #68	; 0x44
        break;
    d724:	e7db      	b.n	d6de <cosem_getObjectSize+0x80>
        size = sizeof(gxIec8802LlcType3Setup);
    d726:	201c      	movs	r0, #28
        break;
    d728:	e7d9      	b.n	d6de <cosem_getObjectSize+0x80>
        size = sizeof(gxSFSKPhyMacSetUp);
    d72a:	2038      	movs	r0, #56	; 0x38
        break;
    d72c:	e7d7      	b.n	d6de <cosem_getObjectSize+0x80>
        size = sizeof(gxData);
    d72e:	2020      	movs	r0, #32
    d730:	e7d5      	b.n	d6de <cosem_getObjectSize+0x80>
        size = sizeof(gxSapAssignment);
    d732:	2000      	movs	r0, #0
}
    d734:	4770      	bx	lr

0000d736 <cosem_setLogicalName>:
    d736:	680b      	ldr	r3, [r1, #0]
    d738:	f8c0 3006 	str.w	r3, [r0, #6]
    d73c:	888b      	ldrh	r3, [r1, #4]
    d73e:	8143      	strh	r3, [r0, #10]
}
    d740:	2000      	movs	r0, #0
    d742:	4770      	bx	lr

0000d744 <cosem_init2>:
{
    d744:	4613      	mov	r3, r2
	return cosem_init4((void*) object, expectedSize, type, ln);
    d746:	460a      	mov	r2, r1
    d748:	2100      	movs	r1, #0
    d74a:	f7f4 bb11 	b.w	1d70 <cosem_init4>

0000d74e <cosem_getStructure>:
{
    d74e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    d750:	460c      	mov	r4, r1
    if ((ret = bb_getUInt8(bb, &value)) != 0)
    d752:	f10d 0105 	add.w	r1, sp, #5
{
    d756:	4605      	mov	r5, r0
    if ((ret = bb_getUInt8(bb, &value)) != 0)
    d758:	f7ff fc1d 	bl	cf96 <bb_getUInt8>
    d75c:	b960      	cbnz	r0, d778 <cosem_getStructure+0x2a>
    if (value != DLMS_DATA_TYPE_STRUCTURE)
    d75e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    d762:	2b02      	cmp	r3, #2
    d764:	d10a      	bne.n	d77c <cosem_getStructure+0x2e>
    if ((ret = hlp_getObjectCount2(bb, &cnt)) != 0)
    d766:	f10d 0106 	add.w	r1, sp, #6
    d76a:	4628      	mov	r0, r5
    d76c:	f00c f861 	bl	19832 <hlp_getObjectCount2>
    d770:	b910      	cbnz	r0, d778 <cosem_getStructure+0x2a>
    *count = cnt;
    d772:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    d776:	8023      	strh	r3, [r4, #0]
}
    d778:	b003      	add	sp, #12
    d77a:	bd30      	pop	{r4, r5, pc}
        return DLMS_ERROR_CODE_UNMATCH_TYPE;
    d77c:	200c      	movs	r0, #12
    d77e:	e7fb      	b.n	d778 <cosem_getStructure+0x2a>

0000d780 <cosem_checkStructure>:
{
    d780:	b513      	push	{r0, r1, r4, lr}
    d782:	460c      	mov	r4, r1
    if ((ret = cosem_getStructure(bb, &cnt)) == 0)
    d784:	f10d 0106 	add.w	r1, sp, #6
    d788:	f7ff ffe1 	bl	d74e <cosem_getStructure>
    d78c:	b920      	cbnz	r0, d798 <cosem_checkStructure+0x18>
        if (cnt != expectedItemCount)
    d78e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
            ret = DLMS_ERROR_CODE_INCONSISTENT_CLASS_OR_OBJECT;
    d792:	42a3      	cmp	r3, r4
    d794:	bf18      	it	ne
    d796:	2009      	movne	r0, #9
}
    d798:	b002      	add	sp, #8
    d79a:	bd10      	pop	{r4, pc}

0000d79c <cosem_checkArray2>:
{
    d79c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    d79e:	4605      	mov	r5, r0
    d7a0:	460c      	mov	r4, r1
    if (checkDataType)
    d7a2:	b93a      	cbnz	r2, d7b4 <cosem_checkArray2+0x18>
    if ((ret = hlp_getObjectCount2(bb, &cnt)) != 0)
    d7a4:	f10d 0106 	add.w	r1, sp, #6
    d7a8:	4628      	mov	r0, r5
    d7aa:	f00c f842 	bl	19832 <hlp_getObjectCount2>
    d7ae:	b168      	cbz	r0, d7cc <cosem_checkArray2+0x30>
}
    d7b0:	b003      	add	sp, #12
    d7b2:	bd30      	pop	{r4, r5, pc}
        if ((ret = bb_getUInt8(bb, &ch)) != 0)
    d7b4:	f10d 0105 	add.w	r1, sp, #5
    d7b8:	f7ff fbed 	bl	cf96 <bb_getUInt8>
    d7bc:	2800      	cmp	r0, #0
    d7be:	d1f7      	bne.n	d7b0 <cosem_checkArray2+0x14>
        if (ch != DLMS_DATA_TYPE_ARRAY)
    d7c0:	f89d 3005 	ldrb.w	r3, [sp, #5]
    d7c4:	2b01      	cmp	r3, #1
    d7c6:	d0ed      	beq.n	d7a4 <cosem_checkArray2+0x8>
            return DLMS_ERROR_CODE_UNMATCH_TYPE;
    d7c8:	200c      	movs	r0, #12
    d7ca:	e7f1      	b.n	d7b0 <cosem_checkArray2+0x14>
    if (*count < cnt)
    d7cc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    d7d0:	8822      	ldrh	r2, [r4, #0]
    d7d2:	429a      	cmp	r2, r3
    d7d4:	d301      	bcc.n	d7da <cosem_checkArray2+0x3e>
    * count = cnt;
    d7d6:	8023      	strh	r3, [r4, #0]
    return 0;
    d7d8:	e7ea      	b.n	d7b0 <cosem_checkArray2+0x14>
        return DLMS_ERROR_CODE_INCONSISTENT_CLASS_OR_OBJECT;
    d7da:	2009      	movs	r0, #9
    d7dc:	e7e8      	b.n	d7b0 <cosem_checkArray2+0x14>

0000d7de <cosem_checkArray>:
    return cosem_checkArray2(bb, count, 1);
    d7de:	2201      	movs	r2, #1
    d7e0:	f7ff bfdc 	b.w	d79c <cosem_checkArray2>

0000d7e4 <cosem_getUInt8>:
{
    d7e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    d7e6:	460d      	mov	r5, r1
    if ((ret = bb_getUInt8(bb, &tmp)) != 0)
    d7e8:	f10d 0107 	add.w	r1, sp, #7
{
    d7ec:	4604      	mov	r4, r0
    if ((ret = bb_getUInt8(bb, &tmp)) != 0)
    d7ee:	f7ff fbd2 	bl	cf96 <bb_getUInt8>
    d7f2:	b938      	cbnz	r0, d804 <cosem_getUInt8+0x20>
    if (tmp != DLMS_DATA_TYPE_UINT8)
    d7f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d7f8:	2b11      	cmp	r3, #17
    d7fa:	d105      	bne.n	d808 <cosem_getUInt8+0x24>
    if ((ret = bb_getUInt8(bb, value)) != 0)
    d7fc:	4629      	mov	r1, r5
    d7fe:	4620      	mov	r0, r4
    d800:	f7ff fbc9 	bl	cf96 <bb_getUInt8>
}
    d804:	b003      	add	sp, #12
    d806:	bd30      	pop	{r4, r5, pc}
        return DLMS_ERROR_CODE_UNMATCH_TYPE;
    d808:	200c      	movs	r0, #12
    d80a:	e7fb      	b.n	d804 <cosem_getUInt8+0x20>

0000d80c <cosem_getUInt16>:
{
    d80c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    d80e:	460d      	mov	r5, r1
    if ((ret = bb_getUInt8(bb, &tmp)) != 0)
    d810:	f10d 0107 	add.w	r1, sp, #7
{
    d814:	4604      	mov	r4, r0
    if ((ret = bb_getUInt8(bb, &tmp)) != 0)
    d816:	f7ff fbbe 	bl	cf96 <bb_getUInt8>
    d81a:	b938      	cbnz	r0, d82c <cosem_getUInt16+0x20>
    if (tmp != DLMS_DATA_TYPE_UINT16)
    d81c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d820:	2b12      	cmp	r3, #18
    d822:	d105      	bne.n	d830 <cosem_getUInt16+0x24>
    if ((ret = bb_getUInt16(bb, value)) != 0)
    d824:	4629      	mov	r1, r5
    d826:	4620      	mov	r0, r4
    d828:	f7ff fbde 	bl	cfe8 <bb_getUInt16>
}
    d82c:	b003      	add	sp, #12
    d82e:	bd30      	pop	{r4, r5, pc}
        return DLMS_ERROR_CODE_UNMATCH_TYPE;
    d830:	200c      	movs	r0, #12
    d832:	e7fb      	b.n	d82c <cosem_getUInt16+0x20>

0000d834 <cosem_setDateTimeAsOctetString>:
{
    d834:	b538      	push	{r3, r4, r5, lr}
    d836:	460d      	mov	r5, r1
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    d838:	2109      	movs	r1, #9
{
    d83a:	4604      	mov	r4, r0
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    d83c:	f7ff fa3b 	bl	ccb6 <bb_setUInt8>
    d840:	b950      	cbnz	r0, d858 <cosem_setDateTimeAsOctetString+0x24>
        (ret = bb_setUInt8(bb, 12)) != 0 ||
    d842:	210c      	movs	r1, #12
    d844:	4620      	mov	r0, r4
    d846:	f7ff fa36 	bl	ccb6 <bb_setUInt8>
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    d84a:	b928      	cbnz	r0, d858 <cosem_setDateTimeAsOctetString+0x24>
        (ret = var_getDateTime2(value, bb)) != 0)
    d84c:	4621      	mov	r1, r4
    d84e:	4628      	mov	r0, r5
}
    d850:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        (ret = var_getDateTime2(value, bb)) != 0)
    d854:	f7f6 bca6 	b.w	41a4 <var_getDateTime2>
}
    d858:	bd38      	pop	{r3, r4, r5, pc}

0000d85a <cosem_setDateAsOctetString>:
{
    d85a:	b538      	push	{r3, r4, r5, lr}
    d85c:	460d      	mov	r5, r1
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    d85e:	2109      	movs	r1, #9
{
    d860:	4604      	mov	r4, r0
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    d862:	f7ff fa28 	bl	ccb6 <bb_setUInt8>
    d866:	b950      	cbnz	r0, d87e <cosem_setDateAsOctetString+0x24>
        (ret = bb_setUInt8(bb, 5)) != 0 ||
    d868:	2105      	movs	r1, #5
    d86a:	4620      	mov	r0, r4
    d86c:	f7ff fa23 	bl	ccb6 <bb_setUInt8>
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    d870:	b928      	cbnz	r0, d87e <cosem_setDateAsOctetString+0x24>
        (ret = var_getDate(value, bb)) != 0)
    d872:	4621      	mov	r1, r4
    d874:	4628      	mov	r0, r5
}
    d876:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        (ret = var_getDate(value, bb)) != 0)
    d87a:	f00c bb3d 	b.w	19ef8 <var_getDate>
}
    d87e:	bd38      	pop	{r3, r4, r5, pc}

0000d880 <cosem_setBitString>:
{
    d880:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    d884:	4605      	mov	r5, r0
    d886:	460f      	mov	r7, r1
    uint16_t capacity = count == 0 ? 2 : (3 + (count / 8));
    d888:	4616      	mov	r6, r2
    d88a:	b362      	cbz	r2, d8e6 <cosem_setBitString+0x66>
    d88c:	08d4      	lsrs	r4, r2, #3
    d88e:	3403      	adds	r4, #3
    capacity += (uint16_t)bb_size(bb);
    d890:	4628      	mov	r0, r5
    d892:	f7ff f9a4 	bl	cbde <bb_size>
    d896:	4404      	add	r4, r0
    if (bb_getCapacity(bb) < capacity)
    d898:	4628      	mov	r0, r5
    d89a:	f7ff f99c 	bl	cbd6 <bb_getCapacity>
    capacity += (uint16_t)bb_size(bb);
    d89e:	b2a4      	uxth	r4, r4
    if (bb_getCapacity(bb) < capacity)
    d8a0:	42a0      	cmp	r0, r4
    d8a2:	d322      	bcc.n	d8ea <cosem_setBitString+0x6a>
        (ret = bb_setUInt8(bb, DLMS_DATA_TYPE_BIT_STRING)) == 0 &&
    d8a4:	2104      	movs	r1, #4
    d8a6:	4628      	mov	r0, r5
    d8a8:	f7ff fa05 	bl	ccb6 <bb_setUInt8>
    if (ret == 0 &&
    d8ac:	4604      	mov	r4, r0
    d8ae:	bb18      	cbnz	r0, d8f8 <cosem_setBitString+0x78>
        (ret = hlp_setObjectCount(count, bb)) == 0)
    d8b0:	4629      	mov	r1, r5
    d8b2:	4630      	mov	r0, r6
    d8b4:	f00b ffee 	bl	19894 <hlp_setObjectCount>
        (ret = bb_setUInt8(bb, DLMS_DATA_TYPE_BIT_STRING)) == 0 &&
    d8b8:	4604      	mov	r4, r0
    d8ba:	b9e8      	cbnz	r0, d8f8 <cosem_setBitString+0x78>
        ba_attach(&ba, bb->data + bb->size, 0, (uint16_t)(8 * (bb->size - bb->size)));
    d8bc:	6828      	ldr	r0, [r5, #0]
    d8be:	88e9      	ldrh	r1, [r5, #6]
    d8c0:	4623      	mov	r3, r4
    d8c2:	4401      	add	r1, r0
    d8c4:	4622      	mov	r2, r4
    d8c6:	4668      	mov	r0, sp
    d8c8:	f7ff f889 	bl	c9de <ba_attach>
        for (pos = 0; pos != count; ++pos)
    d8cc:	46a0      	mov	r8, r4
    d8ce:	4546      	cmp	r6, r8
    d8d0:	fa1f f188 	uxth.w	r1, r8
    d8d4:	d114      	bne.n	d900 <cosem_setBitString+0x80>
    d8d6:	2400      	movs	r4, #0
        bb->size += ba_getByteCount(count);
    d8d8:	4630      	mov	r0, r6
    d8da:	f7f3 fcfb 	bl	12d4 <ba_getByteCount>
    d8de:	88eb      	ldrh	r3, [r5, #6]
    d8e0:	4418      	add	r0, r3
    d8e2:	80e8      	strh	r0, [r5, #6]
    return ret;
    d8e4:	e008      	b.n	d8f8 <cosem_setBitString+0x78>
    uint16_t capacity = count == 0 ? 2 : (3 + (count / 8));
    d8e6:	2402      	movs	r4, #2
    d8e8:	e7d2      	b.n	d890 <cosem_setBitString+0x10>
        ret = bb_capacity(bb, capacity);
    d8ea:	4621      	mov	r1, r4
    d8ec:	4628      	mov	r0, r5
    d8ee:	f7ff f97f 	bl	cbf0 <bb_capacity>
    if (ret == 0 &&
    d8f2:	4604      	mov	r4, r0
    d8f4:	2800      	cmp	r0, #0
    d8f6:	d0d5      	beq.n	d8a4 <cosem_setBitString+0x24>
}
    d8f8:	4620      	mov	r0, r4
    d8fa:	b002      	add	sp, #8
    d8fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if ((ret = ba_setByIndex(&ba, pos, value & 01)) != 0)
    d900:	f007 0201 	and.w	r2, r7, #1
    d904:	4668      	mov	r0, sp
    d906:	f7ff f89b 	bl	ca40 <ba_setByIndex>
    d90a:	f108 0801 	add.w	r8, r8, #1
    d90e:	4604      	mov	r4, r0
    d910:	2800      	cmp	r0, #0
    d912:	d1e1      	bne.n	d8d8 <cosem_setBitString+0x58>
            value >>= 1;
    d914:	087f      	lsrs	r7, r7, #1
        for (pos = 0; pos != count; ++pos)
    d916:	e7da      	b.n	d8ce <cosem_setBitString+0x4e>

0000d918 <cosem_setTimeAsOctetString>:
{
    d918:	b538      	push	{r3, r4, r5, lr}
    d91a:	460d      	mov	r5, r1
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    d91c:	2109      	movs	r1, #9
{
    d91e:	4604      	mov	r4, r0
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    d920:	f7ff f9c9 	bl	ccb6 <bb_setUInt8>
    d924:	b950      	cbnz	r0, d93c <cosem_setTimeAsOctetString+0x24>
        (ret = bb_setUInt8(bb, 4)) != 0 ||
    d926:	2104      	movs	r1, #4
    d928:	4620      	mov	r0, r4
    d92a:	f7ff f9c4 	bl	ccb6 <bb_setUInt8>
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    d92e:	b928      	cbnz	r0, d93c <cosem_setTimeAsOctetString+0x24>
        (ret = var_getTime(value, bb)) != 0)
    d930:	4621      	mov	r1, r4
    d932:	4628      	mov	r0, r5
}
    d934:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        (ret = var_getTime(value, bb)) != 0)
    d938:	f00c bb41 	b.w	19fbe <var_getTime>
}
    d93c:	bd38      	pop	{r3, r4, r5, pc}

0000d93e <cosem_setOctetString>:
{
    d93e:	b538      	push	{r3, r4, r5, lr}
    if (value == NULL)
    d940:	460c      	mov	r4, r1
{
    d942:	4605      	mov	r5, r0
        if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    d944:	2109      	movs	r1, #9
    if (value == NULL)
    d946:	b944      	cbnz	r4, d95a <cosem_setOctetString+0x1c>
        if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    d948:	f7ff f9b5 	bl	ccb6 <bb_setUInt8>
    d94c:	b9a0      	cbnz	r0, d978 <cosem_setOctetString+0x3a>
            (ret = bb_setUInt8(bb, 0)) != 0)
    d94e:	4601      	mov	r1, r0
    d950:	4628      	mov	r0, r5
}
    d952:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            (ret = bb_setUInt8(bb, 0)) != 0)
    d956:	f7ff b9ae 	b.w	ccb6 <bb_setUInt8>
    else if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    d95a:	f7ff f9ac 	bl	ccb6 <bb_setUInt8>
    d95e:	b958      	cbnz	r0, d978 <cosem_setOctetString+0x3a>
        (ret = bb_setUInt8(bb, (unsigned char)value->size)) != 0 ||
    d960:	79a1      	ldrb	r1, [r4, #6]
    d962:	4628      	mov	r0, r5
    d964:	f7ff f9a7 	bl	ccb6 <bb_setUInt8>
    else if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    d968:	b930      	cbnz	r0, d978 <cosem_setOctetString+0x3a>
        (ret = bb_set(bb, value->data, (uint16_t)value->size)) != 0)
    d96a:	88e2      	ldrh	r2, [r4, #6]
    d96c:	6821      	ldr	r1, [r4, #0]
    d96e:	4628      	mov	r0, r5
}
    d970:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        (ret = bb_set(bb, value->data, (uint16_t)value->size)) != 0)
    d974:	f7ff ba85 	b.w	ce82 <bb_set>
}
    d978:	bd38      	pop	{r3, r4, r5, pc}

0000d97a <cosem_setString>:
{
    d97a:	b570      	push	{r4, r5, r6, lr}
    if (value == NULL || len == 0)
    d97c:	460e      	mov	r6, r1
{
    d97e:	4604      	mov	r4, r0
    d980:	4615      	mov	r5, r2
        if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_STRING)) != 0 ||
    d982:	210a      	movs	r1, #10
    if (value == NULL || len == 0)
    d984:	b106      	cbz	r6, d988 <cosem_setString+0xe>
    d986:	b94a      	cbnz	r2, d99c <cosem_setString+0x22>
        if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_STRING)) != 0 ||
    d988:	4620      	mov	r0, r4
    d98a:	f7ff f994 	bl	ccb6 <bb_setUInt8>
    d98e:	b9a0      	cbnz	r0, d9ba <cosem_setString+0x40>
            (ret = bb_setUInt8(bb, 0)) != 0)
    d990:	4601      	mov	r1, r0
    d992:	4620      	mov	r0, r4
}
    d994:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            (ret = bb_setUInt8(bb, 0)) != 0)
    d998:	f7ff b98d 	b.w	ccb6 <bb_setUInt8>
        if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_STRING)) != 0 ||
    d99c:	f7ff f98b 	bl	ccb6 <bb_setUInt8>
    d9a0:	b958      	cbnz	r0, d9ba <cosem_setString+0x40>
            (ret = hlp_setObjectCount(len, bb)) != 0 ||
    d9a2:	4621      	mov	r1, r4
    d9a4:	4628      	mov	r0, r5
    d9a6:	f00b ff75 	bl	19894 <hlp_setObjectCount>
        if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_STRING)) != 0 ||
    d9aa:	b930      	cbnz	r0, d9ba <cosem_setString+0x40>
            (ret = bb_set(bb, (unsigned char*)value, len)) != 0)
    d9ac:	462a      	mov	r2, r5
    d9ae:	4631      	mov	r1, r6
    d9b0:	4620      	mov	r0, r4
}
    d9b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            (ret = bb_set(bb, (unsigned char*)value, len)) != 0)
    d9b6:	f7ff ba64 	b.w	ce82 <bb_set>
}
    d9ba:	bd70      	pop	{r4, r5, r6, pc}

0000d9bc <cosem_setDateTime>:
{
    d9bc:	b538      	push	{r3, r4, r5, lr}
    d9be:	460c      	mov	r4, r1
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_DATETIME)) != 0 ||
    d9c0:	2119      	movs	r1, #25
{
    d9c2:	4605      	mov	r5, r0
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_DATETIME)) != 0 ||
    d9c4:	f7ff f977 	bl	ccb6 <bb_setUInt8>
    d9c8:	b928      	cbnz	r0, d9d6 <cosem_setDateTime+0x1a>
        (ret = var_getDateTime2(value, bb)) != 0)
    d9ca:	4629      	mov	r1, r5
    d9cc:	4620      	mov	r0, r4
}
    d9ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        (ret = var_getDateTime2(value, bb)) != 0)
    d9d2:	f7f6 bbe7 	b.w	41a4 <var_getDateTime2>
}
    d9d6:	bd38      	pop	{r3, r4, r5, pc}

0000d9d8 <cosem_setOctetString2>:
{
    d9d8:	b570      	push	{r4, r5, r6, lr}
    if (value == NULL || size == 0)
    d9da:	460e      	mov	r6, r1
{
    d9dc:	4604      	mov	r4, r0
    d9de:	4615      	mov	r5, r2
        if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    d9e0:	2109      	movs	r1, #9
    if (value == NULL || size == 0)
    d9e2:	b106      	cbz	r6, d9e6 <cosem_setOctetString2+0xe>
    d9e4:	b94a      	cbnz	r2, d9fa <cosem_setOctetString2+0x22>
        if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    d9e6:	4620      	mov	r0, r4
    d9e8:	f7ff f965 	bl	ccb6 <bb_setUInt8>
    d9ec:	b9a0      	cbnz	r0, da18 <cosem_setOctetString2+0x40>
            (ret = bb_setUInt8(bb, 0)) != 0)
    d9ee:	4601      	mov	r1, r0
    d9f0:	4620      	mov	r0, r4
}
    d9f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            (ret = bb_setUInt8(bb, 0)) != 0)
    d9f6:	f7ff b95e 	b.w	ccb6 <bb_setUInt8>
    else if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    d9fa:	f7ff f95c 	bl	ccb6 <bb_setUInt8>
    d9fe:	b958      	cbnz	r0, da18 <cosem_setOctetString2+0x40>
        (ret = bb_setUInt8(bb, (unsigned char)size)) != 0 ||
    da00:	b2e9      	uxtb	r1, r5
    da02:	4620      	mov	r0, r4
    da04:	f7ff f957 	bl	ccb6 <bb_setUInt8>
    else if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    da08:	b930      	cbnz	r0, da18 <cosem_setOctetString2+0x40>
        (ret = bb_set(bb, value, size)) != 0)
    da0a:	462a      	mov	r2, r5
    da0c:	4631      	mov	r1, r6
    da0e:	4620      	mov	r0, r4
}
    da10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        (ret = bb_set(bb, value, size)) != 0)
    da14:	f7ff ba35 	b.w	ce82 <bb_set>
}
    da18:	bd70      	pop	{r4, r5, r6, pc}

0000da1a <cosem_setUInt8>:
{
    da1a:	b538      	push	{r3, r4, r5, lr}
    da1c:	460d      	mov	r5, r1
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_UINT8)) != 0 ||
    da1e:	2111      	movs	r1, #17
{
    da20:	4604      	mov	r4, r0
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_UINT8)) != 0 ||
    da22:	f7ff f948 	bl	ccb6 <bb_setUInt8>
    da26:	b928      	cbnz	r0, da34 <cosem_setUInt8+0x1a>
        (ret = bb_setUInt8(bb, value)) != 0)
    da28:	4629      	mov	r1, r5
    da2a:	4620      	mov	r0, r4
}
    da2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        (ret = bb_setUInt8(bb, value)) != 0)
    da30:	f7ff b941 	b.w	ccb6 <bb_setUInt8>
}
    da34:	bd38      	pop	{r3, r4, r5, pc}

0000da36 <cosem_setUInt16>:
{
    da36:	b538      	push	{r3, r4, r5, lr}
    da38:	460d      	mov	r5, r1
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_UINT16)) != 0 ||
    da3a:	2112      	movs	r1, #18
{
    da3c:	4604      	mov	r4, r0
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_UINT16)) != 0 ||
    da3e:	f7ff f93a 	bl	ccb6 <bb_setUInt8>
    da42:	b928      	cbnz	r0, da50 <cosem_setUInt16+0x1a>
        (ret = bb_setUInt16(bb, value)) != 0)
    da44:	4629      	mov	r1, r5
    da46:	4620      	mov	r0, r4
}
    da48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        (ret = bb_setUInt16(bb, value)) != 0)
    da4c:	f7ff b955 	b.w	ccfa <bb_setUInt16>
}
    da50:	bd38      	pop	{r3, r4, r5, pc}

0000da52 <cosem_setUInt32>:
{
    da52:	b538      	push	{r3, r4, r5, lr}
    da54:	460d      	mov	r5, r1
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_UINT32)) != 0 ||
    da56:	2106      	movs	r1, #6
{
    da58:	4604      	mov	r4, r0
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_UINT32)) != 0 ||
    da5a:	f7ff f92c 	bl	ccb6 <bb_setUInt8>
    da5e:	b928      	cbnz	r0, da6c <cosem_setUInt32+0x1a>
        (ret = bb_setUInt32(bb, value)) != 0)
    da60:	4629      	mov	r1, r5
    da62:	4620      	mov	r0, r4
}
    da64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        (ret = bb_setUInt32(bb, value)) != 0)
    da68:	f7ff b969 	b.w	cd3e <bb_setUInt32>
}
    da6c:	bd38      	pop	{r3, r4, r5, pc}

0000da6e <cosem_setInt8>:
{
    da6e:	b538      	push	{r3, r4, r5, lr}
    da70:	460d      	mov	r5, r1
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_INT8)) != 0 ||
    da72:	210f      	movs	r1, #15
{
    da74:	4604      	mov	r4, r0
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_INT8)) != 0 ||
    da76:	f7ff f91e 	bl	ccb6 <bb_setUInt8>
    da7a:	b928      	cbnz	r0, da88 <cosem_setInt8+0x1a>
        (ret = bb_setInt8(bb, value)) != 0)
    da7c:	4629      	mov	r1, r5
    da7e:	4620      	mov	r0, r4
}
    da80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        (ret = bb_setInt8(bb, value)) != 0)
    da84:	f7ff b9f4 	b.w	ce70 <bb_setInt8>
}
    da88:	bd38      	pop	{r3, r4, r5, pc}

0000da8a <cosem_setInt16>:
{
    da8a:	b538      	push	{r3, r4, r5, lr}
    da8c:	460d      	mov	r5, r1
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_INT16)) != 0 ||
    da8e:	2110      	movs	r1, #16
{
    da90:	4604      	mov	r4, r0
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_INT16)) != 0 ||
    da92:	f7ff f910 	bl	ccb6 <bb_setUInt8>
    da96:	b928      	cbnz	r0, daa4 <cosem_setInt16+0x1a>
        (ret = bb_setInt16(bb, value)) != 0)
    da98:	4629      	mov	r1, r5
    da9a:	4620      	mov	r0, r4
}
    da9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        (ret = bb_setInt16(bb, value)) != 0)
    daa0:	f7ff b9e8 	b.w	ce74 <bb_setInt16>
}
    daa4:	bd38      	pop	{r3, r4, r5, pc}

0000daa6 <cosem_setInt32>:
{
    daa6:	b538      	push	{r3, r4, r5, lr}
    daa8:	460d      	mov	r5, r1
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_INT32)) != 0 ||
    daaa:	2105      	movs	r1, #5
{
    daac:	4604      	mov	r4, r0
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_INT32)) != 0 ||
    daae:	f7ff f902 	bl	ccb6 <bb_setUInt8>
    dab2:	b928      	cbnz	r0, dac0 <cosem_setInt32+0x1a>
        (ret = bb_setInt32(bb, value)) != 0)
    dab4:	4629      	mov	r1, r5
    dab6:	4620      	mov	r0, r4
}
    dab8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        (ret = bb_setInt32(bb, value)) != 0)
    dabc:	f7ff b9dd 	b.w	ce7a <bb_setInt32>
}
    dac0:	bd38      	pop	{r3, r4, r5, pc}

0000dac2 <cosem_setVariant>:
{
    dac2:	460a      	mov	r2, r1
    if (value->vt == DLMS_DATA_TYPE_NONE)
    dac4:	7809      	ldrb	r1, [r1, #0]
    dac6:	b909      	cbnz	r1, dacc <cosem_setVariant+0xa>
        return bb_setUInt8(bb, 0);
    dac8:	f7ff b8f5 	b.w	ccb6 <bb_setUInt8>
    return dlms_setData(bb, value->vt, value);
    dacc:	f000 ba03 	b.w	ded6 <dlms_setData>

0000dad0 <cosem_setStructure>:
{
    dad0:	b538      	push	{r3, r4, r5, lr}
    dad2:	460c      	mov	r4, r1
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    dad4:	2102      	movs	r1, #2
{
    dad6:	4605      	mov	r5, r0
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    dad8:	f7ff f8ed 	bl	ccb6 <bb_setUInt8>
    dadc:	b928      	cbnz	r0, daea <cosem_setStructure+0x1a>
        (ret = hlp_setObjectCount(count, bb)) != 0)
    dade:	4629      	mov	r1, r5
    dae0:	4620      	mov	r0, r4
}
    dae2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        (ret = hlp_setObjectCount(count, bb)) != 0)
    dae6:	f00b bed5 	b.w	19894 <hlp_setObjectCount>
}
    daea:	bd38      	pop	{r3, r4, r5, pc}

0000daec <cosem_setArray>:
{
    daec:	b538      	push	{r3, r4, r5, lr}
    daee:	460c      	mov	r4, r1
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_ARRAY)) != 0 ||
    daf0:	2101      	movs	r1, #1
{
    daf2:	4605      	mov	r5, r0
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_ARRAY)) != 0 ||
    daf4:	f7ff f8df 	bl	ccb6 <bb_setUInt8>
    daf8:	b928      	cbnz	r0, db06 <cosem_setArray+0x1a>
        (ret = hlp_setObjectCount(count, bb)) != 0)
    dafa:	4629      	mov	r1, r5
    dafc:	4620      	mov	r0, r4
}
    dafe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        (ret = hlp_setObjectCount(count, bb)) != 0)
    db02:	f00b bec7 	b.w	19894 <hlp_setObjectCount>
}
    db06:	bd38      	pop	{r3, r4, r5, pc}

0000db08 <cosem_setEnum>:
{
    db08:	b538      	push	{r3, r4, r5, lr}
    db0a:	460d      	mov	r5, r1
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_ENUM)) != 0 ||
    db0c:	2116      	movs	r1, #22
{
    db0e:	4604      	mov	r4, r0
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_ENUM)) != 0 ||
    db10:	f7ff f8d1 	bl	ccb6 <bb_setUInt8>
    db14:	b928      	cbnz	r0, db22 <cosem_setEnum+0x1a>
        (ret = bb_setInt8(bb, value)) != 0)
    db16:	4629      	mov	r1, r5
    db18:	4620      	mov	r0, r4
}
    db1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        (ret = bb_setInt8(bb, value)) != 0)
    db1e:	f7ff b9a7 	b.w	ce70 <bb_setInt8>
}
    db22:	bd38      	pop	{r3, r4, r5, pc}

0000db24 <cosem_setBoolean>:
{
    db24:	b538      	push	{r3, r4, r5, lr}
    db26:	460d      	mov	r5, r1
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_BOOLEAN)) != 0 ||
    db28:	2103      	movs	r1, #3
{
    db2a:	4604      	mov	r4, r0
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_BOOLEAN)) != 0 ||
    db2c:	f7ff f8c3 	bl	ccb6 <bb_setUInt8>
    db30:	b928      	cbnz	r0, db3e <cosem_setBoolean+0x1a>
        (ret = bb_setInt8(bb, value)) != 0)
    db32:	4629      	mov	r1, r5
    db34:	4620      	mov	r0, r4
}
    db36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        (ret = bb_setInt8(bb, value)) != 0)
    db3a:	f7ff b999 	b.w	ce70 <bb_setInt8>
}
    db3e:	bd38      	pop	{r3, r4, r5, pc}

0000db40 <getSelectedColumns>:
{
    db40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    db44:	4607      	mov	r7, r0
    db46:	b087      	sub	sp, #28
    db48:	460e      	mov	r6, r1
    db4a:	4690      	mov	r8, r2
    for (pos = 0; pos != cols->size; ++pos)
    db4c:	2500      	movs	r5, #0
    db4e:	88f2      	ldrh	r2, [r6, #6]
    db50:	b2ab      	uxth	r3, r5
    db52:	429a      	cmp	r2, r3
    db54:	d006      	beq.n	db64 <getSelectedColumns+0x24>
        if ((ret = va_getByIndex(cols, pos, &it)) != 0 ||
    db56:	b2a9      	uxth	r1, r5
    db58:	aa04      	add	r2, sp, #16
    db5a:	4630      	mov	r0, r6
    db5c:	f00c fba1 	bl	1a2a2 <va_getByIndex>
    db60:	4601      	mov	r1, r0
    db62:	b118      	cbz	r0, db6c <getSelectedColumns+0x2c>
    return 0;
    db64:	2000      	movs	r0, #0
}
    db66:	b007      	add	sp, #28
    db68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            (ret = va_getByIndex(it->Arr, 0, &it2)) != 0)
    db6c:	9b04      	ldr	r3, [sp, #16]
    db6e:	aa05      	add	r2, sp, #20
    db70:	6898      	ldr	r0, [r3, #8]
    db72:	f00c fb96 	bl	1a2a2 <va_getByIndex>
        if ((ret = va_getByIndex(cols, pos, &it)) != 0 ||
    db76:	2800      	cmp	r0, #0
    db78:	d1f4      	bne.n	db64 <getSelectedColumns+0x24>
        ot = (DLMS_OBJECT_TYPE)var_toInteger(it2);
    db7a:	9805      	ldr	r0, [sp, #20]
    db7c:	f00c fd0b 	bl	1a596 <var_toInteger>
    db80:	b283      	uxth	r3, r0
    db82:	9301      	str	r3, [sp, #4]
        if ((ret = va_getByIndex(it->Arr, 1, &it2)) != 0)
    db84:	9b04      	ldr	r3, [sp, #16]
    db86:	aa05      	add	r2, sp, #20
    db88:	6898      	ldr	r0, [r3, #8]
    db8a:	2101      	movs	r1, #1
    db8c:	f00c fb89 	bl	1a2a2 <va_getByIndex>
    db90:	2800      	cmp	r0, #0
    db92:	d1e7      	bne.n	db64 <getSelectedColumns+0x24>
        ln = it2->byteArr->data;
    db94:	9b05      	ldr	r3, [sp, #20]
    db96:	689b      	ldr	r3, [r3, #8]
    db98:	f8d3 b000 	ldr.w	fp, [r3]
        if ((ret = va_getByIndex(it->Arr, 2, &it2)) != 0)
    db9c:	9b04      	ldr	r3, [sp, #16]
    db9e:	aa05      	add	r2, sp, #20
    dba0:	6898      	ldr	r0, [r3, #8]
    dba2:	2102      	movs	r1, #2
    dba4:	f00c fb7d 	bl	1a2a2 <va_getByIndex>
    dba8:	2800      	cmp	r0, #0
    dbaa:	d1db      	bne.n	db64 <getSelectedColumns+0x24>
        attributeIndex = (char)var_toInteger(it2);
    dbac:	9805      	ldr	r0, [sp, #20]
    dbae:	f00c fcf2 	bl	1a596 <var_toInteger>
        if ((ret = va_getByIndex(it->Arr, 3, &it2)) != 0)
    dbb2:	9b04      	ldr	r3, [sp, #16]
        attributeIndex = (char)var_toInteger(it2);
    dbb4:	4604      	mov	r4, r0
        if ((ret = va_getByIndex(it->Arr, 3, &it2)) != 0)
    dbb6:	aa05      	add	r2, sp, #20
    dbb8:	6898      	ldr	r0, [r3, #8]
    dbba:	2103      	movs	r1, #3
    dbbc:	f00c fb71 	bl	1a2a2 <va_getByIndex>
    dbc0:	4681      	mov	r9, r0
    dbc2:	2800      	cmp	r0, #0
    dbc4:	d1ce      	bne.n	db64 <getSelectedColumns+0x24>
        dataIndex = var_toInteger(it2);
    dbc6:	9805      	ldr	r0, [sp, #20]
    dbc8:	f00c fce5 	bl	1a596 <var_toInteger>
            if (((gxObject*)c->key)->objectType == ot &&
    dbcc:	b2e4      	uxtb	r4, r4
        dataIndex = var_toInteger(it2);
    dbce:	4682      	mov	sl, r0
        for (pos2 = 0; pos2 != captureObjects->size; ++pos2)
    dbd0:	88fa      	ldrh	r2, [r7, #6]
    dbd2:	fa1f f189 	uxth.w	r1, r9
    dbd6:	428a      	cmp	r2, r1
    dbd8:	d01f      	beq.n	dc1a <getSelectedColumns+0xda>
            if ((ret = arr_getByIndex(captureObjects, pos2, (void**)&c)) != 0)
    dbda:	aa03      	add	r2, sp, #12
    dbdc:	4638      	mov	r0, r7
    dbde:	f002 fbd2 	bl	10386 <arr_getByIndex>
    dbe2:	2800      	cmp	r0, #0
    dbe4:	d1bf      	bne.n	db66 <getSelectedColumns+0x26>
            if (((gxObject*)c->key)->objectType == ot &&
    dbe6:	9a03      	ldr	r2, [sp, #12]
    dbe8:	9b01      	ldr	r3, [sp, #4]
    dbea:	6810      	ldr	r0, [r2, #0]
    dbec:	8801      	ldrh	r1, [r0, #0]
    dbee:	4299      	cmp	r1, r3
    dbf0:	d115      	bne.n	dc1e <getSelectedColumns+0xde>
                ((gxTarget*)c->value)->attributeIndex == attributeIndex &&
    dbf2:	6852      	ldr	r2, [r2, #4]
    dbf4:	f992 1000 	ldrsb.w	r1, [r2]
            if (((gxObject*)c->key)->objectType == ot &&
    dbf8:	42a1      	cmp	r1, r4
    dbfa:	d110      	bne.n	dc1e <getSelectedColumns+0xde>
                ((gxTarget*)c->value)->dataIndex == dataIndex &&
    dbfc:	8852      	ldrh	r2, [r2, #2]
                ((gxTarget*)c->value)->attributeIndex == attributeIndex &&
    dbfe:	4552      	cmp	r2, sl
    dc00:	d10d      	bne.n	dc1e <getSelectedColumns+0xde>
                memcmp(((gxObject*)c->key)->logicalName, ln, 6) == 0)
    dc02:	2206      	movs	r2, #6
    dc04:	4659      	mov	r1, fp
    dc06:	4410      	add	r0, r2
    dc08:	f00e fa5c 	bl	1c0c4 <memcmp>
                ((gxTarget*)c->value)->dataIndex == dataIndex &&
    dc0c:	b938      	cbnz	r0, dc1e <getSelectedColumns+0xde>
                if ((ret = arr_push(columns, c)) != 0)
    dc0e:	9903      	ldr	r1, [sp, #12]
    dc10:	4640      	mov	r0, r8
    dc12:	f002 fb7b 	bl	1030c <arr_push>
    dc16:	2800      	cmp	r0, #0
    dc18:	d1a5      	bne.n	db66 <getSelectedColumns+0x26>
    for (pos = 0; pos != cols->size; ++pos)
    dc1a:	3501      	adds	r5, #1
    dc1c:	e797      	b.n	db4e <getSelectedColumns+0xe>
        for (pos2 = 0; pos2 != captureObjects->size; ++pos2)
    dc1e:	f109 0901 	add.w	r9, r9, #1
    dc22:	e7d5      	b.n	dbd0 <getSelectedColumns+0x90>

0000dc24 <cosem_getColumns>:
{
    dc24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    dc26:	4617      	mov	r7, r2
    dc28:	4604      	mov	r4, r0
    arr_empty(columns);
    dc2a:	4618      	mov	r0, r3
{
    dc2c:	461d      	mov	r5, r3
    dc2e:	460e      	mov	r6, r1
    arr_empty(columns);
    dc30:	f002 fb9c 	bl	1036c <arr_empty>
    if (parameters->vt == DLMS_DATA_TYPE_STRUCTURE)
    dc34:	783b      	ldrb	r3, [r7, #0]
    dc36:	2b02      	cmp	r3, #2
    dc38:	d002      	beq.n	dc40 <cosem_getColumns+0x1c>
    int ret = 0;
    dc3a:	2000      	movs	r0, #0
}
    dc3c:	b003      	add	sp, #12
    dc3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (selector == 1) //Read by range
    dc40:	2e01      	cmp	r6, #1
    dc42:	d123      	bne.n	dc8c <cosem_getColumns+0x68>
            if (parameters->Arr->size > 3)
    dc44:	68b8      	ldr	r0, [r7, #8]
    dc46:	88c3      	ldrh	r3, [r0, #6]
    dc48:	2b03      	cmp	r3, #3
    dc4a:	d812      	bhi.n	dc72 <cosem_getColumns+0x4e>
    uint16_t pos, start = 0, count = 0;
    dc4c:	2600      	movs	r6, #0
            for (pos = 0; pos != captureObjects->size; ++pos)
    dc4e:	88e3      	ldrh	r3, [r4, #6]
    dc50:	b2b1      	uxth	r1, r6
    dc52:	428b      	cmp	r3, r1
    dc54:	d0f1      	beq.n	dc3a <cosem_getColumns+0x16>
                if ((ret = arr_getByIndex(captureObjects, pos, (void**)&k)) != 0 ||
    dc56:	466a      	mov	r2, sp
    dc58:	4620      	mov	r0, r4
    dc5a:	f002 fb94 	bl	10386 <arr_getByIndex>
    dc5e:	2800      	cmp	r0, #0
    dc60:	d1ec      	bne.n	dc3c <cosem_getColumns+0x18>
                    (ret = arr_push(columns, k)) != 0)
    dc62:	9900      	ldr	r1, [sp, #0]
    dc64:	4628      	mov	r0, r5
    dc66:	f002 fb51 	bl	1030c <arr_push>
    dc6a:	3601      	adds	r6, #1
                if ((ret = arr_getByIndex(captureObjects, pos, (void**)&k)) != 0 ||
    dc6c:	2800      	cmp	r0, #0
    dc6e:	d0ee      	beq.n	dc4e <cosem_getColumns+0x2a>
    dc70:	e7e4      	b.n	dc3c <cosem_getColumns+0x18>
                if ((ret = va_getByIndex(parameters->Arr, 3, &it)) == 0)
    dc72:	aa01      	add	r2, sp, #4
    dc74:	2103      	movs	r1, #3
    dc76:	f00c fb14 	bl	1a2a2 <va_getByIndex>
    dc7a:	2800      	cmp	r0, #0
    dc7c:	d1de      	bne.n	dc3c <cosem_getColumns+0x18>
                    ret = getSelectedColumns(captureObjects, it->Arr, columns);
    dc7e:	9b01      	ldr	r3, [sp, #4]
    dc80:	462a      	mov	r2, r5
    dc82:	6899      	ldr	r1, [r3, #8]
    dc84:	4620      	mov	r0, r4
    dc86:	f7ff ff5b 	bl	db40 <getSelectedColumns>
    dc8a:	e7d7      	b.n	dc3c <cosem_getColumns+0x18>
        else if (selector == 2) //Read by entry.
    dc8c:	2e02      	cmp	r6, #2
    dc8e:	d1dd      	bne.n	dc4c <cosem_getColumns+0x28>
            if (parameters->Arr->size > 2)
    dc90:	68b8      	ldr	r0, [r7, #8]
    dc92:	88c3      	ldrh	r3, [r0, #6]
    dc94:	2b02      	cmp	r3, #2
    dc96:	d91b      	bls.n	dcd0 <cosem_getColumns+0xac>
                if ((ret = va_getByIndex(parameters->Arr, 2, &it)) != 0)
    dc98:	aa01      	add	r2, sp, #4
    dc9a:	4631      	mov	r1, r6
    dc9c:	f00c fb01 	bl	1a2a2 <va_getByIndex>
    dca0:	2800      	cmp	r0, #0
    dca2:	d1cb      	bne.n	dc3c <cosem_getColumns+0x18>
                start = (uint16_t)var_toInteger(it);
    dca4:	9801      	ldr	r0, [sp, #4]
    dca6:	f00c fc76 	bl	1a596 <var_toInteger>
    dcaa:	b286      	uxth	r6, r0
            if (parameters->Arr->size > 3)
    dcac:	68b8      	ldr	r0, [r7, #8]
    dcae:	88c3      	ldrh	r3, [r0, #6]
    dcb0:	2b03      	cmp	r3, #3
    dcb2:	d90f      	bls.n	dcd4 <cosem_getColumns+0xb0>
                if ((ret = va_getByIndex(parameters->Arr, 3, &it)) != 0)
    dcb4:	aa01      	add	r2, sp, #4
    dcb6:	2103      	movs	r1, #3
    dcb8:	f00c faf3 	bl	1a2a2 <va_getByIndex>
    dcbc:	2800      	cmp	r0, #0
    dcbe:	d1bd      	bne.n	dc3c <cosem_getColumns+0x18>
                count = (uint16_t)var_toInteger(it);
    dcc0:	9801      	ldr	r0, [sp, #4]
    dcc2:	f00c fc68 	bl	1a596 <var_toInteger>
            if (start != 1 || count != 0)
    dcc6:	2e01      	cmp	r6, #1
                count = (uint16_t)var_toInteger(it);
    dcc8:	b287      	uxth	r7, r0
            if (start != 1 || count != 0)
    dcca:	d106      	bne.n	dcda <cosem_getColumns+0xb6>
    dccc:	b937      	cbnz	r7, dcdc <cosem_getColumns+0xb8>
    dcce:	e7bd      	b.n	dc4c <cosem_getColumns+0x28>
    uint16_t pos, start = 0, count = 0;
    dcd0:	2600      	movs	r6, #0
    dcd2:	e7eb      	b.n	dcac <cosem_getColumns+0x88>
            else if (start != 1)
    dcd4:	2e01      	cmp	r6, #1
    dcd6:	d0b9      	beq.n	dc4c <cosem_getColumns+0x28>
    dcd8:	88e7      	ldrh	r7, [r4, #6]
                if (count == 0)
    dcda:	b197      	cbz	r7, dd02 <cosem_getColumns+0xde>
                for (pos = start - 1; pos != count; ++pos)
    dcdc:	3e01      	subs	r6, #1
    dcde:	b2b6      	uxth	r6, r6
    dce0:	42be      	cmp	r6, r7
    dce2:	d0aa      	beq.n	dc3a <cosem_getColumns+0x16>
                    if ((ret = arr_getByIndex(captureObjects, pos, (void**)&k)) != 0 ||
    dce4:	466a      	mov	r2, sp
    dce6:	4631      	mov	r1, r6
    dce8:	4620      	mov	r0, r4
    dcea:	f002 fb4c 	bl	10386 <arr_getByIndex>
    dcee:	2800      	cmp	r0, #0
    dcf0:	d1a4      	bne.n	dc3c <cosem_getColumns+0x18>
                        (ret = arr_push(columns, k)) != 0)
    dcf2:	9900      	ldr	r1, [sp, #0]
    dcf4:	4628      	mov	r0, r5
    dcf6:	f002 fb09 	bl	1030c <arr_push>
                    if ((ret = arr_getByIndex(captureObjects, pos, (void**)&k)) != 0 ||
    dcfa:	2800      	cmp	r0, #0
    dcfc:	d19e      	bne.n	dc3c <cosem_getColumns+0x18>
                for (pos = start - 1; pos != count; ++pos)
    dcfe:	3601      	adds	r6, #1
    dd00:	e7ed      	b.n	dcde <cosem_getColumns+0xba>
                    count = captureObjects->size - start;
    dd02:	88e7      	ldrh	r7, [r4, #6]
    dd04:	1bbf      	subs	r7, r7, r6
    dd06:	b2bf      	uxth	r7, r7
    dd08:	e7e8      	b.n	dcdc <cosem_getColumns+0xb8>

0000dd0a <di_init>:

#include "../include/datainfo.h"

void di_init(gxDataInfo *info)
{
    info->index = 0;
    dd0a:	2300      	movs	r3, #0
    dd0c:	8003      	strh	r3, [r0, #0]
    info->count = 0;
    dd0e:	8043      	strh	r3, [r0, #2]
    info->type = DLMS_DATA_TYPE_NONE;
    dd10:	f44f 7380 	mov.w	r3, #256	; 0x100
    dd14:	8083      	strh	r3, [r0, #4]
#ifdef DLMS_ITALIAN_STANDARD
        //Some meters require that there is a array count in data.
    info->appendAA = 0;
#endif //DLMS_ITALIAN_STANDARD

}
    dd16:	4770      	bx	lr

0000dd18 <time_getYears>:
    return time_getYears2(value->value);
    dd18:	6800      	ldr	r0, [r0, #0]
    dd1a:	f7f4 b9b1 	b.w	2080 <time_getYears2>

0000dd1e <time_getMonths>:
    return time_getMonths2(value->value);
    dd1e:	6800      	ldr	r0, [r0, #0]
    dd20:	f7f4 b9e4 	b.w	20ec <time_getMonths2>

0000dd24 <time_getDays>:
    return time_getDays2(value->value);
    dd24:	6800      	ldr	r0, [r0, #0]
    dd26:	f7f4 ba19 	b.w	215c <time_getDays2>

0000dd2a <time_getMinutes>:
    return (unsigned char)((value->value % 3600L) / 60L);
    dd2a:	6802      	ldr	r2, [r0, #0]
    dd2c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
    dd30:	fbb2 f0f3 	udiv	r0, r2, r3
    dd34:	fb03 2010 	mls	r0, r3, r0, r2
    dd38:	233c      	movs	r3, #60	; 0x3c
    dd3a:	fbb0 f0f3 	udiv	r0, r0, r3
}
    dd3e:	b2c0      	uxtb	r0, r0
    dd40:	4770      	bx	lr

0000dd42 <time_getSeconds>:
    return (unsigned char)(value->value % 60);
    dd42:	6802      	ldr	r2, [r0, #0]
    dd44:	233c      	movs	r3, #60	; 0x3c
    dd46:	fbb2 f0f3 	udiv	r0, r2, r3
    dd4a:	fb03 2010 	mls	r0, r3, r0, r2
}
    dd4e:	b2c0      	uxtb	r0, r0
    dd50:	4770      	bx	lr

0000dd52 <time_addHours>:
    value->value += seconds;
    dd52:	6803      	ldr	r3, [r0, #0]
    dd54:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    dd58:	fb02 3101 	mla	r1, r2, r1, r3
    dd5c:	6001      	str	r1, [r0, #0]
}
    dd5e:	4770      	bx	lr

0000dd60 <time_addMinutes>:
    value->value += seconds;
    dd60:	6803      	ldr	r3, [r0, #0]
    dd62:	223c      	movs	r2, #60	; 0x3c
    dd64:	fb02 3101 	mla	r1, r2, r1, r3
    dd68:	6001      	str	r1, [r0, #0]
}
    dd6a:	4770      	bx	lr

0000dd6c <time_addSeconds>:
    value->value += seconds;
    dd6c:	6803      	ldr	r3, [r0, #0]
    dd6e:	440b      	add	r3, r1
    dd70:	6003      	str	r3, [r0, #0]
}
    dd72:	4770      	bx	lr

0000dd74 <time_initUnix>:
    time->deviation = 0;
    dd74:	2300      	movs	r3, #0
    time->value = value;
    dd76:	6001      	str	r1, [r0, #0]
    time->deviation = 0;
    dd78:	6043      	str	r3, [r0, #4]
    time->extraInfo = 0;
    dd7a:	8103      	strh	r3, [r0, #8]
}
    dd7c:	4770      	bx	lr

0000dd7e <time_clear>:
    time->value = 0;
    dd7e:	2300      	movs	r3, #0
    dd80:	6003      	str	r3, [r0, #0]
    time->skip = DATETIME_SKIPS_NONE;
    dd82:	80c3      	strh	r3, [r0, #6]
    time->extraInfo = 0;
    dd84:	8103      	strh	r3, [r0, #8]
}
    dd86:	4770      	bx	lr

0000dd88 <date_isleap>:
    return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
    dd88:	0783      	lsls	r3, r0, #30
    dd8a:	d106      	bne.n	dd9a <date_isleap+0x12>
    dd8c:	2264      	movs	r2, #100	; 0x64
    dd8e:	fbb0 f3f2 	udiv	r3, r0, r2
    dd92:	fb02 0313 	mls	r3, r2, r3, r0
    dd96:	b29b      	uxth	r3, r3
    dd98:	b953      	cbnz	r3, ddb0 <date_isleap+0x28>
    dd9a:	f44f 72c8 	mov.w	r2, #400	; 0x190
    dd9e:	fbb0 f3f2 	udiv	r3, r0, r2
    dda2:	fb02 0013 	mls	r0, r2, r3, r0
    dda6:	b280      	uxth	r0, r0
    dda8:	fab0 f080 	clz	r0, r0
    ddac:	0940      	lsrs	r0, r0, #5
    ddae:	4770      	bx	lr
    ddb0:	2001      	movs	r0, #1
}
    ddb2:	4770      	bx	lr

0000ddb4 <date_daysInMonth>:
{
    ddb4:	b508      	push	{r3, lr}
    ddb6:	290b      	cmp	r1, #11
    ddb8:	d809      	bhi.n	ddce <date_daysInMonth+0x1a>
    ddba:	e8df f001 	tbb	[pc, r1]
    ddbe:	080f      	.short	0x080f
    ddc0:	060f060f 	.word	0x060f060f
    ddc4:	0f060f0f 	.word	0x0f060f0f
    ddc8:	0f06      	.short	0x0f06
        return 28;
    ddca:	201e      	movs	r0, #30
}
    ddcc:	bd08      	pop	{r3, pc}
        if (date_isleap(year))
    ddce:	f7ff ffdb 	bl	dd88 <date_isleap>
    ddd2:	2800      	cmp	r0, #0
            return 29;
    ddd4:	bf0c      	ite	eq
    ddd6:	201c      	moveq	r0, #28
    ddd8:	201d      	movne	r0, #29
    ddda:	e7f7      	b.n	ddcc <date_daysInMonth+0x18>
        return 31;
    dddc:	201f      	movs	r0, #31
    ddde:	e7f5      	b.n	ddcc <date_daysInMonth+0x18>

0000dde0 <time_copy>:
    trg->extraInfo = src->extraInfo;
    dde0:	7a0b      	ldrb	r3, [r1, #8]
    dde2:	7203      	strb	r3, [r0, #8]
    trg->skip = src->skip;
    dde4:	88cb      	ldrh	r3, [r1, #6]
    dde6:	80c3      	strh	r3, [r0, #6]
    trg->status = src->status;
    dde8:	7a4b      	ldrb	r3, [r1, #9]
    ddea:	7243      	strb	r3, [r0, #9]
    trg->value = src->value;
    ddec:	680b      	ldr	r3, [r1, #0]
    ddee:	6003      	str	r3, [r0, #0]
    trg->deviation = src->deviation;
    ddf0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
    ddf4:	8083      	strh	r3, [r0, #4]
}
    ddf6:	4770      	bx	lr

0000ddf8 <time_dayOfWeek>:
    if (month <= 2)
    ddf8:	2902      	cmp	r1, #2
        year -= 1;
    ddfa:	bf9c      	itt	ls
    ddfc:	f100 30ff 	addls.w	r0, r0, #4294967295
    de00:	b280      	uxthls	r0, r0
{
    de02:	b530      	push	{r4, r5, lr}
    k = year % 100;
    de04:	f04f 0464 	mov.w	r4, #100	; 0x64
    de08:	fbb0 f5f4 	udiv	r5, r0, r4
    de0c:	fb04 0415 	mls	r4, r4, r5, r0
    h = day + (26 * (month + 1) / 10) + k + (k / 4) + (5 * j) + (j / 4);
    de10:	f44f 73c8 	mov.w	r3, #400	; 0x190
    de14:	fbb0 f3f3 	udiv	r3, r0, r3
    de18:	fa13 f384 	uxtah	r3, r3, r4
    de1c:	441a      	add	r2, r3
    de1e:	f3c4 008d 	ubfx	r0, r4, #2, #14
        month += 12;
    de22:	bf98      	it	ls
    de24:	310c      	addls	r1, #12
    h = day + (26 * (month + 1) / 10) + k + (k / 4) + (5 * j) + (j / 4);
    de26:	4410      	add	r0, r2
    de28:	eb05 0585 	add.w	r5, r5, r5, lsl #2
        month += 12;
    de2c:	bf98      	it	ls
    de2e:	b2c9      	uxtbls	r1, r1
    h = day + (26 * (month + 1) / 10) + k + (k / 4) + (5 * j) + (j / 4);
    de30:	4428      	add	r0, r5
    de32:	231a      	movs	r3, #26
    de34:	fb01 3103 	mla	r1, r1, r3, r3
    de38:	230a      	movs	r3, #10
    de3a:	fbb1 f1f3 	udiv	r1, r1, r3
    de3e:	4408      	add	r0, r1
    return ((h + 5) % 7) + 1;
    de40:	b200      	sxth	r0, r0
    de42:	3005      	adds	r0, #5
    de44:	2307      	movs	r3, #7
    de46:	fbb0 f3f3 	udiv	r3, r0, r3
    de4a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    de4e:	1ac0      	subs	r0, r0, r3
    de50:	3001      	adds	r0, #1
}
    de52:	b2c0      	uxtb	r0, r0
    de54:	bd30      	pop	{r4, r5, pc}

0000de56 <time_compare>:
{
    de56:	b510      	push	{r4, lr}
    de58:	4604      	mov	r4, r0
    return time_compareWithDiff(value1, time_toUnixTime2(value2), value1->deviation);
    de5a:	4608      	mov	r0, r1
    de5c:	f7f4 fb84 	bl	2568 <time_toUnixTime2>
    de60:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
    de64:	4601      	mov	r1, r0
    de66:	4620      	mov	r0, r4
}
    de68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return time_compareWithDiff(value1, time_toUnixTime2(value2), value1->deviation);
    de6c:	f7f4 bba2 	b.w	25b4 <time_compareWithDiff>

0000de70 <time_toUTC>:
}

int time_toUTC(gxtime* value)
{
    //Convert time to UCT if time zone is given.
    if (value->deviation != 0 && value->deviation != (short)0x8000)
    de70:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
    de74:	f3c3 020e 	ubfx	r2, r3, #0, #15
    de78:	b152      	cbz	r2, de90 <time_toUTC+0x20>
    value->value += seconds;
    de7a:	6802      	ldr	r2, [r0, #0]
    de7c:	213c      	movs	r1, #60	; 0x3c
    de7e:	fb13 2301 	smlabb	r3, r3, r1, r2
    de82:	6003      	str	r3, [r0, #0]
    {
        time_addMinutes(value, time_getDeviation(value));
        value->deviation = 0;
    de84:	2300      	movs	r3, #0
    de86:	8083      	strh	r3, [r0, #4]
        //DST deviation is included to deviation. Remove status.
        value->status &= ~DLMS_CLOCK_STATUS_DAYLIGHT_SAVE_ACTIVE;
    de88:	7a43      	ldrb	r3, [r0, #9]
    de8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    de8e:	7243      	strb	r3, [r0, #9]
    }
    return 0;
}
    de90:	2000      	movs	r0, #0
    de92:	4770      	bx	lr

0000de94 <dlms_useHdlc>:
        type == DLMS_INTERFACE_TYPE_HDLC_WITH_MODE_E ||
    de94:	f010 0ffb 	tst.w	r0, #251	; 0xfb
    de98:	d003      	beq.n	dea2 <dlms_useHdlc+0xe>
    de9a:	1f83      	subs	r3, r0, #6
    de9c:	4258      	negs	r0, r3
    de9e:	4158      	adcs	r0, r3
    dea0:	4770      	bx	lr
    dea2:	2001      	movs	r0, #1
}
    dea4:	4770      	bx	lr

0000dea6 <dlms_getInvokeIDPriority>:
    if (settings->priority == DLMS_PRIORITY_HIGH)
    dea6:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
        value |= 0x80;
    deaa:	2b01      	cmp	r3, #1
    if (settings->serviceClass == DLMS_SERVICE_CLASS_CONFIRMED)
    deac:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
        value |= 0x80;
    deb0:	bf0c      	ite	eq
    deb2:	2280      	moveq	r2, #128	; 0x80
    deb4:	2200      	movne	r2, #0
    if (settings->serviceClass == DLMS_SERVICE_CLASS_CONFIRMED)
    deb6:	2b01      	cmp	r3, #1
        value |= 0x40;
    deb8:	bf08      	it	eq
    deba:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
    if (increase)
    debe:	b131      	cbz	r1, dece <dlms_getInvokeIDPriority+0x28>
        settings->invokeID = (unsigned char)((1 + settings->invokeID) & 0xF);
    dec0:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
    dec4:	3301      	adds	r3, #1
    dec6:	f003 030f 	and.w	r3, r3, #15
    deca:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    value |= settings->invokeID;
    dece:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
}
    ded2:	4310      	orrs	r0, r2
    ded4:	4770      	bx	lr

0000ded6 <dlms_setData>:
{
    ded6:	b570      	push	{r4, r5, r6, lr}
    ded8:	4606      	mov	r6, r0
    ret = var_changeType(value, type);
    deda:	4610      	mov	r0, r2
{
    dedc:	460d      	mov	r5, r1
    dede:	4614      	mov	r4, r2
    ret = var_changeType(value, type);
    dee0:	f7f6 fcbe 	bl	4860 <var_changeType>
    if (ret != DLMS_ERROR_CODE_OK)
    dee4:	b930      	cbnz	r0, def4 <dlms_setData+0x1e>
    return var_getBytes2(value, type, buff);
    dee6:	4632      	mov	r2, r6
    dee8:	4629      	mov	r1, r5
    deea:	4620      	mov	r0, r4
}
    deec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return var_getBytes2(value, type, buff);
    def0:	f00c bb14 	b.w	1a51c <var_getBytes2>
}
    def4:	bd70      	pop	{r4, r5, r6, pc}

0000def6 <getCount>:
{
    def6:	b570      	push	{r4, r5, r6, lr}
    def8:	460e      	mov	r6, r1
    if (hlp_getObjectCount2(buff, &info->count) != 0)
    defa:	3102      	adds	r1, #2
{
    defc:	4615      	mov	r5, r2
    if (hlp_getObjectCount2(buff, &info->count) != 0)
    defe:	f00b fc98 	bl	19832 <hlp_getObjectCount2>
    df02:	4604      	mov	r4, r0
    df04:	b118      	cbz	r0, df0e <getCount+0x18>
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    df06:	f44f 7482 	mov.w	r4, #260	; 0x104
}
    df0a:	4620      	mov	r0, r4
    df0c:	bd70      	pop	{r4, r5, r6, pc}
    value->Arr = (variantArray*)gxmalloc(sizeof(variantArray));
    df0e:	2008      	movs	r0, #8
    df10:	f7fd fe50 	bl	bbb4 <malloc>
    df14:	60a8      	str	r0, [r5, #8]
    if (value->Arr == NULL)
    df16:	2800      	cmp	r0, #0
    df18:	d0f5      	beq.n	df06 <getCount+0x10>
    va_init(value->Arr);
    df1a:	f00c f8ca 	bl	1a0b2 <va_init>
    va_capacity(value->Arr, info->count);
    df1e:	8871      	ldrh	r1, [r6, #2]
    df20:	68a8      	ldr	r0, [r5, #8]
    df22:	f00c f8ca 	bl	1a0ba <va_capacity>
    value->vt = DLMS_DATA_TYPE_ARRAY;
    df26:	2301      	movs	r3, #1
    df28:	702b      	strb	r3, [r5, #0]
    return 0;
    df2a:	e7ee      	b.n	df0a <getCount+0x14>

0000df2c <getUInt32>:
{
    df2c:	b410      	push	{r4}
    df2e:	460b      	mov	r3, r1
    if (buff->size - buff->position < 4)
    df30:	8904      	ldrh	r4, [r0, #8]
{
    df32:	4611      	mov	r1, r2
    if (buff->size - buff->position < 4)
    df34:	88c2      	ldrh	r2, [r0, #6]
    df36:	1b12      	subs	r2, r2, r4
    df38:	2a03      	cmp	r2, #3
    df3a:	dc03      	bgt.n	df44 <getUInt32+0x18>
        info->complete = 0;
    df3c:	2000      	movs	r0, #0
    df3e:	7158      	strb	r0, [r3, #5]
}
    df40:	bc10      	pop	{r4}
    df42:	4770      	bx	lr
    if ((value->vt & DLMS_DATA_TYPE_BYREF) == 0)
    df44:	f991 3000 	ldrsb.w	r3, [r1]
    df48:	2b00      	cmp	r3, #0
    df4a:	db05      	blt.n	df58 <getUInt32+0x2c>
        value->vt = DLMS_DATA_TYPE_UINT32;
    df4c:	2306      	movs	r3, #6
    df4e:	f801 3b08 	strb.w	r3, [r1], #8
}
    df52:	bc10      	pop	{r4}
    if ((ret = bb_getUInt32(buff, (value->vt & DLMS_DATA_TYPE_BYREF) == 0 ? &value->ulVal : value->pulVal)) != 0)
    df54:	f7ff b85d 	b.w	d012 <bb_getUInt32>
    df58:	6889      	ldr	r1, [r1, #8]
    df5a:	e7fa      	b.n	df52 <getUInt32+0x26>

0000df5c <getInt32>:
{
    df5c:	b410      	push	{r4}
    df5e:	460b      	mov	r3, r1
    if (buff->size - buff->position < 4)
    df60:	8904      	ldrh	r4, [r0, #8]
{
    df62:	4611      	mov	r1, r2
    if (buff->size - buff->position < 4)
    df64:	88c2      	ldrh	r2, [r0, #6]
    df66:	1b12      	subs	r2, r2, r4
    df68:	2a03      	cmp	r2, #3
    df6a:	dc03      	bgt.n	df74 <getInt32+0x18>
        info->complete = 0;
    df6c:	2000      	movs	r0, #0
    df6e:	7158      	strb	r0, [r3, #5]
}
    df70:	bc10      	pop	{r4}
    df72:	4770      	bx	lr
    if ((value->vt & DLMS_DATA_TYPE_BYREF) == 0)
    df74:	f991 3000 	ldrsb.w	r3, [r1]
    df78:	2b00      	cmp	r3, #0
    df7a:	db05      	blt.n	df88 <getInt32+0x2c>
        value->vt = DLMS_DATA_TYPE_INT32;
    df7c:	2305      	movs	r3, #5
    df7e:	f801 3b08 	strb.w	r3, [r1], #8
}
    df82:	bc10      	pop	{r4}
    if ((ret = bb_getInt32(buff, (value->vt & DLMS_DATA_TYPE_BYREF) == 0 ? &value->lVal : value->plVal)) != 0)
    df84:	f7ff b8ab 	b.w	d0de <bb_getInt32>
    df88:	6889      	ldr	r1, [r1, #8]
    df8a:	e7fa      	b.n	df82 <getInt32+0x26>

0000df8c <getString>:
{
    df8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    df8e:	461d      	mov	r5, r3
    uint16_t len = 0;
    df90:	2300      	movs	r3, #0
{
    df92:	4604      	mov	r4, r0
    df94:	460e      	mov	r6, r1
    uint16_t len = 0;
    df96:	f8ad 3006 	strh.w	r3, [sp, #6]
    if (knownType)
    df9a:	b1aa      	cbz	r2, dfc8 <getString+0x3c>
        len = (uint16_t)buff->size;
    df9c:	88c3      	ldrh	r3, [r0, #6]
    df9e:	f8ad 3006 	strh.w	r3, [sp, #6]
    if (len > 0)
    dfa2:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    value->vt = DLMS_DATA_TYPE_STRING;
    dfa6:	230a      	movs	r3, #10
    dfa8:	702b      	strb	r3, [r5, #0]
    if (len > 0)
    dfaa:	b1d0      	cbz	r0, dfe2 <getString+0x56>
        value->strVal = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
    dfac:	200c      	movs	r0, #12
    dfae:	f7fd fe01 	bl	bbb4 <malloc>
    dfb2:	60a8      	str	r0, [r5, #8]
        BYTE_BUFFER_INIT(value->strVal);
    dfb4:	f7fe fe16 	bl	cbe4 <bb_init>
        ret = bb_set2(value->strVal, buff, buff->position, len);
    dfb8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    dfbc:	8922      	ldrh	r2, [r4, #8]
    dfbe:	68a8      	ldr	r0, [r5, #8]
    dfc0:	4621      	mov	r1, r4
    dfc2:	f7fe ff8d 	bl	cee0 <bb_set2>
    dfc6:	e00c      	b.n	dfe2 <getString+0x56>
        if (hlp_getObjectCount2(buff, &len) != 0)
    dfc8:	f10d 0106 	add.w	r1, sp, #6
    dfcc:	f00b fc31 	bl	19832 <hlp_getObjectCount2>
    dfd0:	b948      	cbnz	r0, dfe6 <getString+0x5a>
        if (buff->size - buff->position < (uint16_t)len)
    dfd2:	8922      	ldrh	r2, [r4, #8]
    dfd4:	88e3      	ldrh	r3, [r4, #6]
    dfd6:	1a9b      	subs	r3, r3, r2
    dfd8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    dfdc:	4293      	cmp	r3, r2
    dfde:	dae0      	bge.n	dfa2 <getString+0x16>
            info->complete = 0;
    dfe0:	7170      	strb	r0, [r6, #5]
}
    dfe2:	b002      	add	sp, #8
    dfe4:	bd70      	pop	{r4, r5, r6, pc}
            return DLMS_ERROR_CODE_OUTOFMEMORY;
    dfe6:	f44f 7082 	mov.w	r0, #260	; 0x104
    dfea:	e7fa      	b.n	dfe2 <getString+0x56>

0000dfec <getUtfString>:
{
    dfec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    dfee:	461d      	mov	r5, r3
    dff0:	4604      	mov	r4, r0
    dff2:	4617      	mov	r7, r2
    uint16_t len = 0;
    dff4:	2300      	movs	r3, #0
    var_clear(value);
    dff6:	4628      	mov	r0, r5
{
    dff8:	460e      	mov	r6, r1
    uint16_t len = 0;
    dffa:	f8ad 3006 	strh.w	r3, [sp, #6]
    var_clear(value);
    dffe:	f00c f8d2 	bl	1a1a6 <var_clear>
    if (knownType)
    e002:	b1af      	cbz	r7, e030 <getUtfString+0x44>
        len = (uint16_t)buff->size;
    e004:	88e3      	ldrh	r3, [r4, #6]
    e006:	f8ad 3006 	strh.w	r3, [sp, #6]
    if (len > 0)
    e00a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    e00e:	b308      	cbz	r0, e054 <getUtfString+0x68>
        value->strUtfVal = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
    e010:	200c      	movs	r0, #12
    e012:	f7fd fdcf 	bl	bbb4 <malloc>
    e016:	60a8      	str	r0, [r5, #8]
        BYTE_BUFFER_INIT(value->strUtfVal);
    e018:	f7fe fde4 	bl	cbe4 <bb_init>
        ret = bb_set2(value->strUtfVal, buff, buff->position, len);
    e01c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    e020:	8922      	ldrh	r2, [r4, #8]
    e022:	68a8      	ldr	r0, [r5, #8]
    e024:	4621      	mov	r1, r4
    e026:	f7fe ff5b 	bl	cee0 <bb_set2>
        value->vt = DLMS_DATA_TYPE_STRING_UTF8;
    e02a:	230c      	movs	r3, #12
    e02c:	702b      	strb	r3, [r5, #0]
    e02e:	e00f      	b.n	e050 <getUtfString+0x64>
        if (hlp_getObjectCount2(buff, &len) != 0)
    e030:	f10d 0106 	add.w	r1, sp, #6
    e034:	4620      	mov	r0, r4
    e036:	f00b fbfc 	bl	19832 <hlp_getObjectCount2>
    e03a:	b968      	cbnz	r0, e058 <getUtfString+0x6c>
        if (buff->size - buff->position < (uint16_t)(2 * len))
    e03c:	8923      	ldrh	r3, [r4, #8]
    e03e:	88e2      	ldrh	r2, [r4, #6]
    e040:	1ad2      	subs	r2, r2, r3
    e042:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    e046:	005b      	lsls	r3, r3, #1
    e048:	b29b      	uxth	r3, r3
    e04a:	429a      	cmp	r2, r3
    e04c:	dadd      	bge.n	e00a <getUtfString+0x1e>
            info->complete = 0;
    e04e:	7170      	strb	r0, [r6, #5]
}
    e050:	b003      	add	sp, #12
    e052:	bdf0      	pop	{r4, r5, r6, r7, pc}
        value->strUtfVal = NULL;
    e054:	60a8      	str	r0, [r5, #8]
    e056:	e7fb      	b.n	e050 <getUtfString+0x64>
            return DLMS_ERROR_CODE_OUTOFMEMORY;
    e058:	f44f 7082 	mov.w	r0, #260	; 0x104
    e05c:	e7f8      	b.n	e050 <getUtfString+0x64>

0000e05e <getOctetString>:
{
    e05e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    e060:	4605      	mov	r5, r0
    e062:	460c      	mov	r4, r1
    e064:	461e      	mov	r6, r3
    if (knownType)
    e066:	b152      	cbz	r2, e07e <getOctetString+0x20>
        len = (uint16_t)buff->size;
    e068:	88c3      	ldrh	r3, [r0, #6]
    e06a:	f8ad 3006 	strh.w	r3, [sp, #6]
    if (len == 0)
    e06e:	f8bd 4006 	ldrh.w	r4, [sp, #6]
    e072:	b99c      	cbnz	r4, e09c <getOctetString+0x3e>
        var_clear(value);
    e074:	4630      	mov	r0, r6
    e076:	f00c f896 	bl	1a1a6 <var_clear>
    int ret = 0;
    e07a:	4620      	mov	r0, r4
    e07c:	e00c      	b.n	e098 <getOctetString+0x3a>
        if (hlp_getObjectCount2(buff, &len) != 0)
    e07e:	f10d 0106 	add.w	r1, sp, #6
    e082:	f00b fbd6 	bl	19832 <hlp_getObjectCount2>
    e086:	b9b0      	cbnz	r0, e0b6 <getOctetString+0x58>
        if (buff->size - buff->position < len)
    e088:	892a      	ldrh	r2, [r5, #8]
    e08a:	88eb      	ldrh	r3, [r5, #6]
    e08c:	1a9b      	subs	r3, r3, r2
    e08e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    e092:	4293      	cmp	r3, r2
    e094:	daeb      	bge.n	e06e <getOctetString+0x10>
            info->complete = 0;
    e096:	7160      	strb	r0, [r4, #5]
}
    e098:	b002      	add	sp, #8
    e09a:	bd70      	pop	{r4, r5, r6, pc}
        ret = var_addBytes(value, buff->data + buff->position, len);
    e09c:	892b      	ldrh	r3, [r5, #8]
    e09e:	6829      	ldr	r1, [r5, #0]
    e0a0:	4622      	mov	r2, r4
    e0a2:	4419      	add	r1, r3
    e0a4:	4630      	mov	r0, r6
    e0a6:	f00c f8d6 	bl	1a256 <var_addBytes>
        buff->position += (uint16_t)len;
    e0aa:	892b      	ldrh	r3, [r5, #8]
    e0ac:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    e0b0:	4413      	add	r3, r2
    e0b2:	812b      	strh	r3, [r5, #8]
    e0b4:	e7f0      	b.n	e098 <getOctetString+0x3a>
            return DLMS_ERROR_CODE_OUTOFMEMORY;
    e0b6:	f44f 7082 	mov.w	r0, #260	; 0x104
    e0ba:	e7ed      	b.n	e098 <getOctetString+0x3a>

0000e0bc <getUInt8>:
{
    e0bc:	b510      	push	{r4, lr}
    if (buff->size - buff->position < 1)
    e0be:	88c3      	ldrh	r3, [r0, #6]
{
    e0c0:	4614      	mov	r4, r2
    if (buff->size - buff->position < 1)
    e0c2:	8902      	ldrh	r2, [r0, #8]
    e0c4:	1a9b      	subs	r3, r3, r2
    e0c6:	2b00      	cmp	r3, #0
    e0c8:	dc02      	bgt.n	e0d0 <getUInt8+0x14>
        info->complete = 0;
    e0ca:	2000      	movs	r0, #0
    e0cc:	7148      	strb	r0, [r1, #5]
}
    e0ce:	bd10      	pop	{r4, pc}
    if ((ret = bb_getUInt8(buff, (value->vt & DLMS_DATA_TYPE_BYREF) == 0 ? &value->bVal : value->pbVal)) != 0)
    e0d0:	f994 3000 	ldrsb.w	r3, [r4]
    e0d4:	2b00      	cmp	r3, #0
    e0d6:	bfb4      	ite	lt
    e0d8:	68a1      	ldrlt	r1, [r4, #8]
    e0da:	f104 0108 	addge.w	r1, r4, #8
    e0de:	f7fe ff5a 	bl	cf96 <bb_getUInt8>
    e0e2:	2800      	cmp	r0, #0
    e0e4:	d1f3      	bne.n	e0ce <getUInt8+0x12>
    if ((value->vt & DLMS_DATA_TYPE_BYREF) == 0)
    e0e6:	f994 3000 	ldrsb.w	r3, [r4]
    e0ea:	2b00      	cmp	r3, #0
        value->vt = DLMS_DATA_TYPE_UINT8;
    e0ec:	bfa4      	itt	ge
    e0ee:	2311      	movge	r3, #17
    e0f0:	7023      	strbge	r3, [r4, #0]
    e0f2:	e7ec      	b.n	e0ce <getUInt8+0x12>

0000e0f4 <getInt16>:
{
    e0f4:	b510      	push	{r4, lr}
    if (buff->size - buff->position < 2)
    e0f6:	88c3      	ldrh	r3, [r0, #6]
{
    e0f8:	4614      	mov	r4, r2
    if (buff->size - buff->position < 2)
    e0fa:	8902      	ldrh	r2, [r0, #8]
    e0fc:	1a9b      	subs	r3, r3, r2
    e0fe:	2b01      	cmp	r3, #1
    e100:	dc02      	bgt.n	e108 <getInt16+0x14>
        info->complete = 0;
    e102:	2000      	movs	r0, #0
    e104:	7148      	strb	r0, [r1, #5]
}
    e106:	bd10      	pop	{r4, pc}
    if ((ret = bb_getInt16(buff, (value->vt & DLMS_DATA_TYPE_BYREF) == 0 ? &value->iVal : value->piVal)) != 0)
    e108:	f994 3000 	ldrsb.w	r3, [r4]
    e10c:	2b00      	cmp	r3, #0
    e10e:	bfb4      	ite	lt
    e110:	68a1      	ldrlt	r1, [r4, #8]
    e112:	f104 0108 	addge.w	r1, r4, #8
    e116:	f7fe ff95 	bl	d044 <bb_getInt16>
    e11a:	2800      	cmp	r0, #0
    e11c:	d1f3      	bne.n	e106 <getInt16+0x12>
    if ((value->vt & DLMS_DATA_TYPE_BYREF) == 0)
    e11e:	f994 3000 	ldrsb.w	r3, [r4]
    e122:	2b00      	cmp	r3, #0
        value->vt = DLMS_DATA_TYPE_INT16;
    e124:	bfa4      	itt	ge
    e126:	2310      	movge	r3, #16
    e128:	7023      	strbge	r3, [r4, #0]
    e12a:	e7ec      	b.n	e106 <getInt16+0x12>

0000e12c <getInt8>:
{
    e12c:	b510      	push	{r4, lr}
    if (buff->size - buff->position < 1)
    e12e:	88c3      	ldrh	r3, [r0, #6]
{
    e130:	4614      	mov	r4, r2
    if (buff->size - buff->position < 1)
    e132:	8902      	ldrh	r2, [r0, #8]
    e134:	1a9b      	subs	r3, r3, r2
    e136:	2b00      	cmp	r3, #0
    e138:	dc02      	bgt.n	e140 <getInt8+0x14>
        info->complete = 0;
    e13a:	2000      	movs	r0, #0
    e13c:	7148      	strb	r0, [r1, #5]
}
    e13e:	bd10      	pop	{r4, pc}
    if ((ret = bb_getInt8(buff, (value->vt & DLMS_DATA_TYPE_BYREF) == 0 ? &value->cVal : value->pcVal)) != 0)
    e140:	f994 3000 	ldrsb.w	r3, [r4]
    e144:	2b00      	cmp	r3, #0
    e146:	bfb4      	ite	lt
    e148:	68a1      	ldrlt	r1, [r4, #8]
    e14a:	f104 0108 	addge.w	r1, r4, #8
    e14e:	f7fe ff31 	bl	cfb4 <bb_getInt8>
    e152:	2800      	cmp	r0, #0
    e154:	d1f3      	bne.n	e13e <getInt8+0x12>
    if ((value->vt & DLMS_DATA_TYPE_BYREF) == 0)
    e156:	f994 3000 	ldrsb.w	r3, [r4]
    e15a:	2b00      	cmp	r3, #0
        value->vt = DLMS_DATA_TYPE_INT8;
    e15c:	bfa4      	itt	ge
    e15e:	230f      	movge	r3, #15
    e160:	7023      	strbge	r3, [r4, #0]
    e162:	e7ec      	b.n	e13e <getInt8+0x12>

0000e164 <getUInt16>:
{
    e164:	b510      	push	{r4, lr}
    if (buff->size - buff->position < 2)
    e166:	88c3      	ldrh	r3, [r0, #6]
{
    e168:	4614      	mov	r4, r2
    if (buff->size - buff->position < 2)
    e16a:	8902      	ldrh	r2, [r0, #8]
    e16c:	1a9b      	subs	r3, r3, r2
    e16e:	2b01      	cmp	r3, #1
    e170:	dc02      	bgt.n	e178 <getUInt16+0x14>
        info->complete = 0;
    e172:	2000      	movs	r0, #0
    e174:	7148      	strb	r0, [r1, #5]
}
    e176:	bd10      	pop	{r4, pc}
    if ((ret = bb_getUInt16(buff, (value->vt & DLMS_DATA_TYPE_BYREF) == 0 ? &value->uiVal : value->puiVal)) != 0)
    e178:	f994 3000 	ldrsb.w	r3, [r4]
    e17c:	2b00      	cmp	r3, #0
    e17e:	bfb4      	ite	lt
    e180:	68a1      	ldrlt	r1, [r4, #8]
    e182:	f104 0108 	addge.w	r1, r4, #8
    e186:	f7fe ff2f 	bl	cfe8 <bb_getUInt16>
    e18a:	2800      	cmp	r0, #0
    e18c:	d1f3      	bne.n	e176 <getUInt16+0x12>
    if ((value->vt & DLMS_DATA_TYPE_BYREF) == 0)
    e18e:	f994 3000 	ldrsb.w	r3, [r4]
    e192:	2b00      	cmp	r3, #0
        value->vt = DLMS_DATA_TYPE_UINT16;
    e194:	bfa4      	itt	ge
    e196:	2312      	movge	r3, #18
    e198:	7023      	strbge	r3, [r4, #0]
    e19a:	e7ec      	b.n	e176 <getUInt16+0x12>

0000e19c <getInt64>:
{
    e19c:	b510      	push	{r4, lr}
    if (buff->size - buff->position < 8)
    e19e:	88c3      	ldrh	r3, [r0, #6]
{
    e1a0:	4614      	mov	r4, r2
    if (buff->size - buff->position < 8)
    e1a2:	8902      	ldrh	r2, [r0, #8]
    e1a4:	1a9b      	subs	r3, r3, r2
    e1a6:	2b07      	cmp	r3, #7
    e1a8:	dc02      	bgt.n	e1b0 <getInt64+0x14>
        info->complete = 0;
    e1aa:	2000      	movs	r0, #0
    e1ac:	7148      	strb	r0, [r1, #5]
}
    e1ae:	bd10      	pop	{r4, pc}
    if ((ret = bb_getInt64(buff, (value->vt & DLMS_DATA_TYPE_BYREF) == 0 ? &value->llVal : value->pllVal)) != 0)
    e1b0:	f994 3000 	ldrsb.w	r3, [r4]
    e1b4:	2b00      	cmp	r3, #0
    e1b6:	bfb4      	ite	lt
    e1b8:	68a1      	ldrlt	r1, [r4, #8]
    e1ba:	f104 0108 	addge.w	r1, r4, #8
    e1be:	f7fe ffbc 	bl	d13a <bb_getInt64>
    e1c2:	2800      	cmp	r0, #0
    e1c4:	d1f3      	bne.n	e1ae <getInt64+0x12>
    if ((value->vt & DLMS_DATA_TYPE_BYREF) == 0)
    e1c6:	f994 3000 	ldrsb.w	r3, [r4]
    e1ca:	2b00      	cmp	r3, #0
        value->vt = DLMS_DATA_TYPE_INT64;
    e1cc:	bfa4      	itt	ge
    e1ce:	2314      	movge	r3, #20
    e1d0:	7023      	strbge	r3, [r4, #0]
    e1d2:	e7ec      	b.n	e1ae <getInt64+0x12>

0000e1d4 <getUInt64>:
{
    e1d4:	b510      	push	{r4, lr}
    if (buff->size - buff->position < 8)
    e1d6:	88c3      	ldrh	r3, [r0, #6]
{
    e1d8:	4614      	mov	r4, r2
    if (buff->size - buff->position < 8)
    e1da:	8902      	ldrh	r2, [r0, #8]
    e1dc:	1a9b      	subs	r3, r3, r2
    e1de:	2b07      	cmp	r3, #7
    e1e0:	dc02      	bgt.n	e1e8 <getUInt64+0x14>
        info->complete = 0;
    e1e2:	2000      	movs	r0, #0
    e1e4:	7148      	strb	r0, [r1, #5]
}
    e1e6:	bd10      	pop	{r4, pc}
    if ((ret = bb_getUInt64(buff, (value->vt & DLMS_DATA_TYPE_BYREF) == 0 ? &value->ullVal : value->pullVal)) != 0)
    e1e8:	f994 3000 	ldrsb.w	r3, [r4]
    e1ec:	2b00      	cmp	r3, #0
    e1ee:	bfb4      	ite	lt
    e1f0:	68a1      	ldrlt	r1, [r4, #8]
    e1f2:	f104 0108 	addge.w	r1, r4, #8
    e1f6:	f7fe ffab 	bl	d150 <bb_getUInt64>
    e1fa:	2800      	cmp	r0, #0
    e1fc:	d1f3      	bne.n	e1e6 <getUInt64+0x12>
    if ((value->vt & DLMS_DATA_TYPE_BYREF) == 0)
    e1fe:	f994 3000 	ldrsb.w	r3, [r4]
    e202:	2b00      	cmp	r3, #0
        value->vt = DLMS_DATA_TYPE_UINT64;
    e204:	bfa4      	itt	ge
    e206:	2315      	movge	r3, #21
    e208:	7023      	strbge	r3, [r4, #0]
    e20a:	e7ec      	b.n	e1e6 <getUInt64+0x12>

0000e20c <getEnum>:
{
    e20c:	b510      	push	{r4, lr}
    if (buff->size - buff->position < 1)
    e20e:	88c3      	ldrh	r3, [r0, #6]
{
    e210:	4614      	mov	r4, r2
    if (buff->size - buff->position < 1)
    e212:	8902      	ldrh	r2, [r0, #8]
    e214:	1a9b      	subs	r3, r3, r2
    e216:	2b00      	cmp	r3, #0
    e218:	dc02      	bgt.n	e220 <getEnum+0x14>
        info->complete = 0;
    e21a:	2000      	movs	r0, #0
    e21c:	7148      	strb	r0, [r1, #5]
}
    e21e:	bd10      	pop	{r4, pc}
    if ((ret = bb_getUInt8(buff, (value->vt & DLMS_DATA_TYPE_BYREF) == 0 ? &value->bVal : value->pbVal)) != 0)
    e220:	f994 3000 	ldrsb.w	r3, [r4]
    e224:	2b00      	cmp	r3, #0
    e226:	bfb4      	ite	lt
    e228:	68a1      	ldrlt	r1, [r4, #8]
    e22a:	f104 0108 	addge.w	r1, r4, #8
    e22e:	f7fe feb2 	bl	cf96 <bb_getUInt8>
    e232:	2800      	cmp	r0, #0
    e234:	d1f3      	bne.n	e21e <getEnum+0x12>
    if ((value->vt & DLMS_DATA_TYPE_BYREF) == 0)
    e236:	f994 3000 	ldrsb.w	r3, [r4]
    e23a:	2b00      	cmp	r3, #0
        value->vt = DLMS_DATA_TYPE_ENUM;
    e23c:	bfa4      	itt	ge
    e23e:	2316      	movge	r3, #22
    e240:	7023      	strbge	r3, [r4, #0]
    e242:	e7ec      	b.n	e21e <getEnum+0x12>

0000e244 <getDouble>:
{
    e244:	b510      	push	{r4, lr}
    if (buff->size - buff->position < 8)
    e246:	88c3      	ldrh	r3, [r0, #6]
{
    e248:	4614      	mov	r4, r2
    if (buff->size - buff->position < 8)
    e24a:	8902      	ldrh	r2, [r0, #8]
    e24c:	1a9b      	subs	r3, r3, r2
    e24e:	2b07      	cmp	r3, #7
    e250:	dc02      	bgt.n	e258 <getDouble+0x14>
        info->complete = 0;
    e252:	2000      	movs	r0, #0
    e254:	7148      	strb	r0, [r1, #5]
}
    e256:	bd10      	pop	{r4, pc}
    if ((ret = bb_getDouble(buff, (value->vt & DLMS_DATA_TYPE_BYREF) == 0 ? &value->dblVal : value->pdblVal)) != 0)
    e258:	f994 3000 	ldrsb.w	r3, [r4]
    e25c:	2b00      	cmp	r3, #0
    e25e:	bfb4      	ite	lt
    e260:	68a1      	ldrlt	r1, [r4, #8]
    e262:	f104 0108 	addge.w	r1, r4, #8
    e266:	f7fe ff9a 	bl	d19e <bb_getDouble>
    e26a:	2800      	cmp	r0, #0
    e26c:	d1f3      	bne.n	e256 <getDouble+0x12>
    if ((value->vt & DLMS_DATA_TYPE_BYREF) == 0)
    e26e:	f994 3000 	ldrsb.w	r3, [r4]
    e272:	2b00      	cmp	r3, #0
        value->vt = DLMS_DATA_TYPE_FLOAT64;
    e274:	bfa4      	itt	ge
    e276:	2318      	movge	r3, #24
    e278:	7023      	strbge	r3, [r4, #0]
    e27a:	e7ec      	b.n	e256 <getDouble+0x12>

0000e27c <getFloat>:
{
    e27c:	b510      	push	{r4, lr}
    if (buff->size - buff->position < 4)
    e27e:	88c3      	ldrh	r3, [r0, #6]
{
    e280:	4614      	mov	r4, r2
    if (buff->size - buff->position < 4)
    e282:	8902      	ldrh	r2, [r0, #8]
    e284:	1a9b      	subs	r3, r3, r2
    e286:	2b03      	cmp	r3, #3
    e288:	dc02      	bgt.n	e290 <getFloat+0x14>
        info->complete = 0;
    e28a:	2000      	movs	r0, #0
    e28c:	7148      	strb	r0, [r1, #5]
}
    e28e:	bd10      	pop	{r4, pc}
    if ((ret = bb_getFloat(buff, (value->vt & DLMS_DATA_TYPE_BYREF) == 0 ? &value->fltVal : value->pfltVal)) != 0)
    e290:	f994 3000 	ldrsb.w	r3, [r4]
    e294:	2b00      	cmp	r3, #0
    e296:	bfb4      	ite	lt
    e298:	68a1      	ldrlt	r1, [r4, #8]
    e29a:	f104 0108 	addge.w	r1, r4, #8
    e29e:	f7fe ff62 	bl	d166 <bb_getFloat>
    e2a2:	2800      	cmp	r0, #0
    e2a4:	d1f3      	bne.n	e28e <getFloat+0x12>
    if ((value->vt & DLMS_DATA_TYPE_BYREF) == 0)
    e2a6:	f994 3000 	ldrsb.w	r3, [r4]
    e2aa:	2b00      	cmp	r3, #0
        value->vt = DLMS_DATA_TYPE_FLOAT32;
    e2ac:	bfa4      	itt	ge
    e2ae:	2317      	movge	r3, #23
    e2b0:	7023      	strbge	r3, [r4, #0]
    e2b2:	e7ec      	b.n	e28e <getFloat+0x12>

0000e2b4 <getDateTime>:
{
    e2b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (buff->size - buff->position < 12)
    e2b8:	88c3      	ldrh	r3, [r0, #6]
{
    e2ba:	4617      	mov	r7, r2
    if (buff->size - buff->position < 12)
    e2bc:	8902      	ldrh	r2, [r0, #8]
    e2be:	1a9b      	subs	r3, r3, r2
    e2c0:	2b0b      	cmp	r3, #11
{
    e2c2:	b08a      	sub	sp, #40	; 0x28
    e2c4:	4605      	mov	r5, r0
    if (buff->size - buff->position < 12)
    e2c6:	dc06      	bgt.n	e2d6 <getDateTime+0x22>
        info->complete = 0;
    e2c8:	2000      	movs	r0, #0
    e2ca:	7148      	strb	r0, [r1, #5]
        return 0;
    e2cc:	4604      	mov	r4, r0
}
    e2ce:	4620      	mov	r0, r4
    e2d0:	b00a      	add	sp, #40	; 0x28
    e2d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((ret = bb_getUInt16(buff, &year)) != 0)
    e2d6:	a909      	add	r1, sp, #36	; 0x24
    e2d8:	f7fe fe86 	bl	cfe8 <bb_getUInt16>
    e2dc:	4604      	mov	r4, r0
    e2de:	2800      	cmp	r0, #0
    e2e0:	d1f5      	bne.n	e2ce <getDateTime+0x1a>
    if ((value->vt & DLMS_DATA_TYPE_BYREF) != 0)
    e2e2:	f997 3000 	ldrsb.w	r3, [r7]
    e2e6:	2b00      	cmp	r3, #0
    e2e8:	f280 80c5 	bge.w	e476 <getDateTime+0x1c2>
        t = value->pVal;
    e2ec:	68be      	ldr	r6, [r7, #8]
    unsigned char mon = 0, day = 0, hour = 0, min = 0, sec = 0, wday = 0, skip = 0;
    e2ee:	2300      	movs	r3, #0
    if ((ret = bb_getUInt8(buff, &mon)) != 0)
    e2f0:	f10d 011f 	add.w	r1, sp, #31
    e2f4:	4628      	mov	r0, r5
    unsigned char mon = 0, day = 0, hour = 0, min = 0, sec = 0, wday = 0, skip = 0;
    e2f6:	f88d 301f 	strb.w	r3, [sp, #31]
    e2fa:	f88d 3020 	strb.w	r3, [sp, #32]
    e2fe:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    e302:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    e306:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    if ((ret = bb_getUInt8(buff, &mon)) != 0)
    e30a:	f7fe fe44 	bl	cf96 <bb_getUInt8>
    e30e:	4604      	mov	r4, r0
    e310:	2800      	cmp	r0, #0
    e312:	d1dc      	bne.n	e2ce <getDateTime+0x1a>
    if ((ret = bb_getUInt8(buff, &day)) != 0)
    e314:	a908      	add	r1, sp, #32
    e316:	4628      	mov	r0, r5
    e318:	f7fe fe3d 	bl	cf96 <bb_getUInt8>
    e31c:	4604      	mov	r4, r0
    e31e:	2800      	cmp	r0, #0
    e320:	d1d5      	bne.n	e2ce <getDateTime+0x1a>
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    e322:	f10d 011e 	add.w	r1, sp, #30
    e326:	4628      	mov	r0, r5
    e328:	f7fe fe35 	bl	cf96 <bb_getUInt8>
    e32c:	4604      	mov	r4, r0
    e32e:	2800      	cmp	r0, #0
    e330:	d1cd      	bne.n	e2ce <getDateTime+0x1a>
    if ((ret = bb_getUInt8(buff, &hour)) != 0)
    e332:	f10d 0121 	add.w	r1, sp, #33	; 0x21
    e336:	4628      	mov	r0, r5
    e338:	f7fe fe2d 	bl	cf96 <bb_getUInt8>
    e33c:	4604      	mov	r4, r0
    e33e:	2800      	cmp	r0, #0
    e340:	d1c5      	bne.n	e2ce <getDateTime+0x1a>
    if ((ret = bb_getUInt8(buff, &min)) != 0)
    e342:	f10d 0122 	add.w	r1, sp, #34	; 0x22
    e346:	4628      	mov	r0, r5
    e348:	f7fe fe25 	bl	cf96 <bb_getUInt8>
    e34c:	4604      	mov	r4, r0
    e34e:	2800      	cmp	r0, #0
    e350:	d1bd      	bne.n	e2ce <getDateTime+0x1a>
    if ((ret = bb_getUInt8(buff, &sec)) != 0)
    e352:	f10d 0123 	add.w	r1, sp, #35	; 0x23
    e356:	4628      	mov	r0, r5
    e358:	f7fe fe1d 	bl	cf96 <bb_getUInt8>
    e35c:	4604      	mov	r4, r0
    e35e:	2800      	cmp	r0, #0
    e360:	d1b5      	bne.n	e2ce <getDateTime+0x1a>
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    e362:	f10d 011e 	add.w	r1, sp, #30
    e366:	4628      	mov	r0, r5
    e368:	f7fe fe15 	bl	cf96 <bb_getUInt8>
    e36c:	4604      	mov	r4, r0
    e36e:	2800      	cmp	r0, #0
    e370:	d1ad      	bne.n	e2ce <getDateTime+0x1a>
    if ((ret = bb_getInt16(buff, &deviation)) != 0)
    e372:	f10d 0126 	add.w	r1, sp, #38	; 0x26
    e376:	4628      	mov	r0, r5
    e378:	f7fe fe64 	bl	d044 <bb_getInt16>
    e37c:	4604      	mov	r4, r0
    e37e:	2800      	cmp	r0, #0
    e380:	d1a5      	bne.n	e2ce <getDateTime+0x1a>
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    e382:	f10d 011e 	add.w	r1, sp, #30
    e386:	4628      	mov	r0, r5
    e388:	f7fe fe05 	bl	cf96 <bb_getUInt8>
    e38c:	4604      	mov	r4, r0
    e38e:	2800      	cmp	r0, #0
    e390:	d19d      	bne.n	e2ce <getDateTime+0x1a>
    if (year < 1 || year == 0xFFFF)
    e392:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    status = ch;
    e396:	f89d 701e 	ldrb.w	r7, [sp, #30]
    t->status = (DLMS_CLOCK_STATUS)status;
    e39a:	7277      	strb	r7, [r6, #9]
    if (year < 1 || year == 0xFFFF)
    e39c:	3b01      	subs	r3, #1
    e39e:	b29b      	uxth	r3, r3
    e3a0:	f64f 72fd 	movw	r2, #65533	; 0xfffd
    e3a4:	4293      	cmp	r3, r2
        year = 1970;
    e3a6:	bf84      	itt	hi
    e3a8:	f240 73b2 	movwhi	r3, #1970	; 0x7b2
    e3ac:	f8ad 3024 	strhhi.w	r3, [sp, #36]	; 0x24
    if ((mon < 1 || mon > 12) && mon != 0xFE && mon != 0xFD)
    e3b0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    e3b4:	f103 32ff 	add.w	r2, r3, #4294967295
        skip |= DATETIME_SKIPS_YEAR;
    e3b8:	bf8c      	ite	hi
    e3ba:	2581      	movhi	r5, #129	; 0x81
    skip = DATETIME_SKIPS_MS;
    e3bc:	2580      	movls	r5, #128	; 0x80
    if ((mon < 1 || mon > 12) && mon != 0xFE && mon != 0xFD)
    e3be:	2a0b      	cmp	r2, #11
    e3c0:	d908      	bls.n	e3d4 <getDateTime+0x120>
    e3c2:	3303      	adds	r3, #3
    e3c4:	b2db      	uxtb	r3, r3
    e3c6:	2b01      	cmp	r3, #1
        mon = 1;
    e3c8:	bf82      	ittt	hi
    e3ca:	2301      	movhi	r3, #1
        skip |= DATETIME_SKIPS_MONTH;
    e3cc:	f045 0502 	orrhi.w	r5, r5, #2
        mon = 1;
    e3d0:	f88d 301f 	strbhi.w	r3, [sp, #31]
    if ((day < 1 || day > 31) && day != 0xFE && day != 0xFD)
    e3d4:	f89d 3020 	ldrb.w	r3, [sp, #32]
    e3d8:	1e5a      	subs	r2, r3, #1
    e3da:	2a1e      	cmp	r2, #30
    e3dc:	d908      	bls.n	e3f0 <getDateTime+0x13c>
    e3de:	3303      	adds	r3, #3
    e3e0:	b2db      	uxtb	r3, r3
    e3e2:	2b01      	cmp	r3, #1
        day = 1;
    e3e4:	bf82      	ittt	hi
    e3e6:	2301      	movhi	r3, #1
        skip |= DATETIME_SKIPS_DAY;
    e3e8:	f045 0504 	orrhi.w	r5, r5, #4
        day = 1;
    e3ec:	f88d 3020 	strbhi.w	r3, [sp, #32]
    if (hour > 24)
    e3f0:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    time_init(t, year, mon, day, hour, min, sec, 0, deviation);
    e3f4:	f89d 201f 	ldrb.w	r2, [sp, #31]
    e3f8:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
    if (hour > 24)
    e3fc:	2b18      	cmp	r3, #24
        hour = 0;
    e3fe:	bf84      	itt	hi
    e400:	2300      	movhi	r3, #0
    e402:	f88d 3021 	strbhi.w	r3, [sp, #33]	; 0x21
    if (min > 60)
    e406:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
        skip |= DATETIME_SKIPS_HOUR;
    e40a:	bf88      	it	hi
    e40c:	f045 0510 	orrhi.w	r5, r5, #16
    if (min > 60)
    e410:	2b3c      	cmp	r3, #60	; 0x3c
        min = 0;
    e412:	bf84      	itt	hi
    e414:	2300      	movhi	r3, #0
    e416:	f88d 3022 	strbhi.w	r3, [sp, #34]	; 0x22
    if (sec > 60)
    e41a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
        skip |= DATETIME_SKIPS_MINUTE;
    e41e:	bf88      	it	hi
    e420:	f045 0520 	orrhi.w	r5, r5, #32
    if (sec > 60)
    e424:	2b3c      	cmp	r3, #60	; 0x3c
        sec = 0;
    e426:	bf84      	itt	hi
    e428:	2300      	movhi	r3, #0
    e42a:	f88d 3023 	strbhi.w	r3, [sp, #35]	; 0x23
    time_init(t, year, mon, day, hour, min, sec, 0, deviation);
    e42e:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
    e432:	9304      	str	r3, [sp, #16]
    e434:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    e438:	9302      	str	r3, [sp, #8]
    e43a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    e43e:	9301      	str	r3, [sp, #4]
    e440:	f04f 0800 	mov.w	r8, #0
    e444:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    e448:	9300      	str	r3, [sp, #0]
        skip |= DATETIME_SKIPS_SECOND;
    e44a:	bf88      	it	hi
    e44c:	f045 0540 	orrhi.w	r5, r5, #64	; 0x40
    time_init(t, year, mon, day, hour, min, sec, 0, deviation);
    e450:	f89d 3020 	ldrb.w	r3, [sp, #32]
    e454:	f8cd 800c 	str.w	r8, [sp, #12]
    e458:	4630      	mov	r0, r6
    e45a:	f7f3 fd69 	bl	1f30 <time_init>
    t->skip = skip;
    e45e:	b2ad      	uxth	r5, r5
    if (status == 0xFF)
    e460:	2fff      	cmp	r7, #255	; 0xff
    t->skip = skip;
    e462:	80f5      	strh	r5, [r6, #6]
        t->skip = (DATETIME_SKIPS)(t->skip | DATETIME_SKIPS_STATUS);
    e464:	bf08      	it	eq
    e466:	f445 7500 	orreq.w	r5, r5, #512	; 0x200
    t->status = status;
    e46a:	7277      	strb	r7, [r6, #9]
        t->skip = (DATETIME_SKIPS)(t->skip | DATETIME_SKIPS_STATUS);
    e46c:	bf04      	itt	eq
    e46e:	80f5      	strheq	r5, [r6, #6]
        t->status = 0;
    e470:	f886 8009 	strbeq.w	r8, [r6, #9]
    e474:	e72b      	b.n	e2ce <getDateTime+0x1a>
        t = value->dateTime = (gxtime*)gxmalloc(sizeof(gxtime));
    e476:	200c      	movs	r0, #12
    e478:	f7fd fb9c 	bl	bbb4 <malloc>
        value->vt = DLMS_DATA_TYPE_DATETIME;
    e47c:	2319      	movs	r3, #25
        t = value->dateTime = (gxtime*)gxmalloc(sizeof(gxtime));
    e47e:	4606      	mov	r6, r0
    e480:	60b8      	str	r0, [r7, #8]
        value->vt = DLMS_DATA_TYPE_DATETIME;
    e482:	703b      	strb	r3, [r7, #0]
    e484:	e733      	b.n	e2ee <getDateTime+0x3a>

0000e486 <getDataTypes>:
{
    e486:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (cols->size == 0)
    e48a:	88cb      	ldrh	r3, [r1, #6]
{
    e48c:	b087      	sub	sp, #28
    e48e:	4607      	mov	r7, r0
    e490:	460e      	mov	r6, r1
    e492:	4691      	mov	r9, r2
    if (cols->size == 0)
    e494:	b91b      	cbnz	r3, e49e <getDataTypes+0x18>
        va_capacity(cols, (uint16_t)len);
    e496:	b291      	uxth	r1, r2
    e498:	4630      	mov	r0, r6
    e49a:	f00b fe0e 	bl	1a0ba <va_capacity>
                return DLMS_ERROR_CODE_OUTOFMEMORY;
    e49e:	f04f 0a00 	mov.w	sl, #0
    for (int pos = 0; pos != len; ++pos)
    e4a2:	45ca      	cmp	sl, r9
    e4a4:	d101      	bne.n	e4aa <getDataTypes+0x24>
    return 0;
    e4a6:	2400      	movs	r4, #0
    e4a8:	e030      	b.n	e50c <getDataTypes+0x86>
        if ((ret = bb_getUInt8(buff, &ch)) != 0)
    e4aa:	f10d 0101 	add.w	r1, sp, #1
    e4ae:	4638      	mov	r0, r7
    e4b0:	f7fe fd71 	bl	cf96 <bb_getUInt8>
    e4b4:	4604      	mov	r4, r0
    e4b6:	bb48      	cbnz	r0, e50c <getDataTypes+0x86>
        dt = (DLMS_DATA_TYPE)ch;
    e4b8:	f89d 8001 	ldrb.w	r8, [sp, #1]
        if (dt == DLMS_DATA_TYPE_ARRAY)
    e4bc:	f1b8 0f01 	cmp.w	r8, #1
    e4c0:	d170      	bne.n	e5a4 <getDataTypes+0x11e>
            if ((ret = bb_getUInt16(buff, &cnt)) != 0)
    e4c2:	f10d 0102 	add.w	r1, sp, #2
    e4c6:	4638      	mov	r0, r7
    e4c8:	f7fe fd8e 	bl	cfe8 <bb_getUInt16>
    e4cc:	4604      	mov	r4, r0
    e4ce:	b9e8      	cbnz	r0, e50c <getDataTypes+0x86>
            var_init(&tmp);
    e4d0:	a802      	add	r0, sp, #8
    e4d2:	f00b fd0c 	bl	19eee <var_init>
            tmp.Arr = (variantArray*)gxmalloc(sizeof(variantArray));
    e4d6:	2008      	movs	r0, #8
    e4d8:	f7fd fb6c 	bl	bbb4 <malloc>
            tmp.vt = DLMS_DATA_TYPE_ARRAY;
    e4dc:	f88d 8008 	strb.w	r8, [sp, #8]
            tmp.Arr = (variantArray*)gxmalloc(sizeof(variantArray));
    e4e0:	9004      	str	r0, [sp, #16]
            if (tmp.Arr == NULL)
    e4e2:	b910      	cbnz	r0, e4ea <getDataTypes+0x64>
                return DLMS_ERROR_CODE_OUTOFMEMORY;
    e4e4:	f44f 7482 	mov.w	r4, #260	; 0x104
    e4e8:	e010      	b.n	e50c <getDataTypes+0x86>
            va_init(tmp.Arr);
    e4ea:	f00b fde2 	bl	1a0b2 <va_init>
            getDataTypes(buff, tmp.Arr, 1);
    e4ee:	9904      	ldr	r1, [sp, #16]
    e4f0:	4642      	mov	r2, r8
    e4f2:	4638      	mov	r0, r7
    e4f4:	f7ff ffc7 	bl	e486 <getDataTypes>
            if ((ret = va_getByIndex(tmp.Arr, 0, &it)) != 0)
    e4f8:	4621      	mov	r1, r4
    e4fa:	9804      	ldr	r0, [sp, #16]
    e4fc:	aa01      	add	r2, sp, #4
    e4fe:	f00b fed0 	bl	1a2a2 <va_getByIndex>
    e502:	4604      	mov	r4, r0
    e504:	b130      	cbz	r0, e514 <getDataTypes+0x8e>
                va_clear(cols);
    e506:	4630      	mov	r0, r6
    e508:	f00b fe28 	bl	1a15c <va_clear>
}
    e50c:	4620      	mov	r0, r4
    e50e:	b007      	add	sp, #28
    e510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            dlmsVARIANT* tmp2 = (dlmsVARIANT*)gxmalloc(sizeof(dlmsVARIANT));
    e514:	2010      	movs	r0, #16
    e516:	f7fd fb4d 	bl	bbb4 <malloc>
            if (tmp2 == NULL)
    e51a:	4605      	mov	r5, r0
    e51c:	2800      	cmp	r0, #0
    e51e:	d0e1      	beq.n	e4e4 <getDataTypes+0x5e>
            var_init(tmp2);
    e520:	f00b fce5 	bl	19eee <var_init>
            tmp2->vt = DLMS_DATA_TYPE_ARRAY;
    e524:	f885 8000 	strb.w	r8, [r5]
            tmp2->Arr = (variantArray*)gxmalloc(sizeof(variantArray));
    e528:	2008      	movs	r0, #8
    e52a:	f7fd fb43 	bl	bbb4 <malloc>
    e52e:	60a8      	str	r0, [r5, #8]
            if (tmp2->Arr == NULL)
    e530:	b930      	cbnz	r0, e540 <getDataTypes+0xba>
                    var_clear(tmp2);
    e532:	4628      	mov	r0, r5
    e534:	f00b fe37 	bl	1a1a6 <var_clear>
                    gxfree(tmp2);
    e538:	4628      	mov	r0, r5
    e53a:	f7fd fb43 	bl	bbc4 <free>
                    return DLMS_ERROR_CODE_OUTOFMEMORY;
    e53e:	e7d1      	b.n	e4e4 <getDataTypes+0x5e>
            va_init(tmp2->Arr);
    e540:	f00b fdb7 	bl	1a0b2 <va_init>
            for (int i = 0; i != cnt; ++i)
    e544:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    e548:	42a3      	cmp	r3, r4
    e54a:	d109      	bne.n	e560 <getDataTypes+0xda>
            var_clear(&tmp);
    e54c:	a802      	add	r0, sp, #8
    e54e:	f00b fe2a 	bl	1a1a6 <var_clear>
            va_push(cols, tmp);
    e552:	4629      	mov	r1, r5
            va_push(cols, tmp);
    e554:	4630      	mov	r0, r6
    e556:	f00b fdd8 	bl	1a10a <va_push>
    for (int pos = 0; pos != len; ++pos)
    e55a:	f10a 0a01 	add.w	sl, sl, #1
    e55e:	e7a0      	b.n	e4a2 <getDataTypes+0x1c>
                dlmsVARIANT* tmp3 = (dlmsVARIANT*)gxmalloc(sizeof(dlmsVARIANT));
    e560:	2010      	movs	r0, #16
    e562:	f7fd fb27 	bl	bbb4 <malloc>
                if (tmp3 == NULL)
    e566:	4680      	mov	r8, r0
    e568:	2800      	cmp	r0, #0
    e56a:	d0e2      	beq.n	e532 <getDataTypes+0xac>
                var_init(tmp3);
    e56c:	f00b fcbf 	bl	19eee <var_init>
                if ((ret = var_copy(tmp3, it)) != 0)
    e570:	9901      	ldr	r1, [sp, #4]
    e572:	4640      	mov	r0, r8
    e574:	f7f5 fec2 	bl	42fc <var_copy>
    e578:	4683      	mov	fp, r0
    e57a:	b168      	cbz	r0, e598 <getDataTypes+0x112>
                    var_clear(tmp3);
    e57c:	4640      	mov	r0, r8
    e57e:	f00b fe12 	bl	1a1a6 <var_clear>
                    gxfree(tmp3);
    e582:	4640      	mov	r0, r8
    e584:	f7fd fb1e 	bl	bbc4 <free>
                    var_clear(tmp2);
    e588:	4628      	mov	r0, r5
    e58a:	f00b fe0c 	bl	1a1a6 <var_clear>
                    gxfree(tmp2);
    e58e:	4628      	mov	r0, r5
    e590:	f7fd fb18 	bl	bbc4 <free>
                if ((ret = var_copy(tmp3, it)) != 0)
    e594:	465c      	mov	r4, fp
                    return ret;
    e596:	e7b9      	b.n	e50c <getDataTypes+0x86>
                va_push(tmp2->Arr, tmp3);
    e598:	68a8      	ldr	r0, [r5, #8]
    e59a:	4641      	mov	r1, r8
    e59c:	f00b fdb5 	bl	1a10a <va_push>
            for (int i = 0; i != cnt; ++i)
    e5a0:	3401      	adds	r4, #1
    e5a2:	e7cf      	b.n	e544 <getDataTypes+0xbe>
        else if (dt == DLMS_DATA_TYPE_STRUCTURE)
    e5a4:	f1b8 0f02 	cmp.w	r8, #2
            dlmsVARIANT* tmp = gxmalloc(sizeof(dlmsVARIANT));
    e5a8:	f04f 0010 	mov.w	r0, #16
        else if (dt == DLMS_DATA_TYPE_STRUCTURE)
    e5ac:	d129      	bne.n	e602 <getDataTypes+0x17c>
            dlmsVARIANT* tmp = gxmalloc(sizeof(dlmsVARIANT));
    e5ae:	f7fd fb01 	bl	bbb4 <malloc>
            if (tmp == NULL)
    e5b2:	4605      	mov	r5, r0
    e5b4:	2800      	cmp	r0, #0
    e5b6:	d095      	beq.n	e4e4 <getDataTypes+0x5e>
            var_init(tmp);
    e5b8:	f00b fc99 	bl	19eee <var_init>
            if ((ret = bb_getUInt8(buff, &ch)) != 0)
    e5bc:	f10d 0101 	add.w	r1, sp, #1
    e5c0:	4638      	mov	r0, r7
    e5c2:	f7fe fce8 	bl	cf96 <bb_getUInt8>
    e5c6:	4604      	mov	r4, r0
    e5c8:	b148      	cbz	r0, e5de <getDataTypes+0x158>
                va_clear(cols);
    e5ca:	4630      	mov	r0, r6
    e5cc:	f00b fdc6 	bl	1a15c <va_clear>
                var_clear(tmp);
    e5d0:	4628      	mov	r0, r5
    e5d2:	f00b fde8 	bl	1a1a6 <var_clear>
                gxfree(tmp);
    e5d6:	4628      	mov	r0, r5
    e5d8:	f7fd faf4 	bl	bbc4 <free>
                return ret;
    e5dc:	e796      	b.n	e50c <getDataTypes+0x86>
            tmp->vt = DLMS_DATA_TYPE_STRUCTURE;
    e5de:	f885 8000 	strb.w	r8, [r5]
            tmp->Arr = (variantArray*)gxmalloc(sizeof(variantArray));
    e5e2:	2008      	movs	r0, #8
    e5e4:	f7fd fae6 	bl	bbb4 <malloc>
    e5e8:	60a8      	str	r0, [r5, #8]
            if (tmp->Arr == NULL)
    e5ea:	2800      	cmp	r0, #0
    e5ec:	f43f af7a 	beq.w	e4e4 <getDataTypes+0x5e>
            va_init(tmp->Arr);
    e5f0:	f00b fd5f 	bl	1a0b2 <va_init>
            getDataTypes(buff, tmp->Arr, ch);
    e5f4:	f89d 2001 	ldrb.w	r2, [sp, #1]
    e5f8:	68a9      	ldr	r1, [r5, #8]
    e5fa:	4638      	mov	r0, r7
    e5fc:	f7ff ff43 	bl	e486 <getDataTypes>
    e600:	e7a7      	b.n	e552 <getDataTypes+0xcc>
            dlmsVARIANT* tmp = gxmalloc(sizeof(dlmsVARIANT));
    e602:	f7fd fad7 	bl	bbb4 <malloc>
            if (tmp == NULL)
    e606:	4604      	mov	r4, r0
    e608:	2800      	cmp	r0, #0
    e60a:	f43f af6b 	beq.w	e4e4 <getDataTypes+0x5e>
            var_init(tmp);
    e60e:	f00b fc6e 	bl	19eee <var_init>
            if (cols->size == 0)
    e612:	88f3      	ldrh	r3, [r6, #6]
    e614:	b91b      	cbnz	r3, e61e <getDataTypes+0x198>
                va_capacity(cols, 1);
    e616:	2101      	movs	r1, #1
    e618:	4630      	mov	r0, r6
    e61a:	f00b fd4e 	bl	1a0ba <va_capacity>
            var_setUInt8(tmp, dt);
    e61e:	4641      	mov	r1, r8
    e620:	4620      	mov	r0, r4
    e622:	f00b fe0e 	bl	1a242 <var_setUInt8>
            va_push(cols, tmp);
    e626:	4621      	mov	r1, r4
    e628:	e794      	b.n	e554 <getDataTypes+0xce>

0000e62a <dlms_getData>:
{
    e62a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    e62e:	4606      	mov	r6, r0
    uint32_t startIndex = data->position;
    e630:	f8b0 8008 	ldrh.w	r8, [r0, #8]
    var_clear(value);
    e634:	4610      	mov	r0, r2
{
    e636:	4615      	mov	r5, r2
    e638:	460c      	mov	r4, r1
    var_clear(value);
    e63a:	f00b fdb4 	bl	1a1a6 <var_clear>
    if (data->position == data->size)
    e63e:	8932      	ldrh	r2, [r6, #8]
    e640:	88f3      	ldrh	r3, [r6, #6]
    e642:	429a      	cmp	r2, r3
    e644:	d104      	bne.n	e650 <dlms_getData+0x26>
        info->complete = 0;
    e646:	2000      	movs	r0, #0
    e648:	7160      	strb	r0, [r4, #5]
}
    e64a:	b004      	add	sp, #16
    e64c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    knownType = info->type != DLMS_DATA_TYPE_NONE;
    e650:	7927      	ldrb	r7, [r4, #4]
    info->complete = 1;
    e652:	2301      	movs	r3, #1
    e654:	7163      	strb	r3, [r4, #5]
    if (!knownType)
    e656:	b94f      	cbnz	r7, e66c <dlms_getData+0x42>
        ret = bb_getUInt8(data, &ch);
    e658:	f10d 010d 	add.w	r1, sp, #13
    e65c:	4630      	mov	r0, r6
    e65e:	f7fe fc9a 	bl	cf96 <bb_getUInt8>
        if (ret != DLMS_ERROR_CODE_OK)
    e662:	2800      	cmp	r0, #0
    e664:	d1f1      	bne.n	e64a <dlms_getData+0x20>
        info->type = (DLMS_DATA_TYPE)ch;
    e666:	f89d 300d 	ldrb.w	r3, [sp, #13]
    e66a:	7123      	strb	r3, [r4, #4]
    if (info->type == DLMS_DATA_TYPE_NONE)
    e66c:	7923      	ldrb	r3, [r4, #4]
    e66e:	b90b      	cbnz	r3, e674 <dlms_getData+0x4a>
        value->vt = info->type;
    e670:	2000      	movs	r0, #0
    e672:	e7ea      	b.n	e64a <dlms_getData+0x20>
    if (data->position == data->size)
    e674:	8930      	ldrh	r0, [r6, #8]
    e676:	88f1      	ldrh	r1, [r6, #6]
    e678:	4288      	cmp	r0, r1
    e67a:	d0e4      	beq.n	e646 <dlms_getData+0x1c>
    switch (info->type & ~DLMS_DATA_TYPE_BYREF)
    e67c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    knownType = info->type != DLMS_DATA_TYPE_NONE;
    e680:	1e3a      	subs	r2, r7, #0
    e682:	f103 33ff 	add.w	r3, r3, #4294967295
    e686:	bf18      	it	ne
    e688:	2201      	movne	r2, #1
    switch (info->type & ~DLMS_DATA_TYPE_BYREF)
    e68a:	2b1a      	cmp	r3, #26
    e68c:	f200 80d5 	bhi.w	e83a <dlms_getData+0x210>
    e690:	e8df f003 	tbb	[pc, r3]
    e694:	3a190e0e 	.word	0x3a190e0e
    e698:	d3d3655f 	.word	0xd3d3655f
    e69c:	71d36b77 	.word	0x71d36b77
    e6a0:	8983d37d 	.word	0x8983d37d
    e6a4:	a39b958f 	.word	0xa39b958f
    e6a8:	bbb5afa9 	.word	0xbbb5afa9
    e6ac:	c7c1      	.short	0xc7c1
    e6ae:	cd          	.byte	0xcd
    e6af:	00          	.byte	0x00
        ret = getArray(data, info, (uint16_t)startIndex, value);
    e6b0:	462b      	mov	r3, r5
    e6b2:	4642      	mov	r2, r8
    e6b4:	4621      	mov	r1, r4
    e6b6:	4630      	mov	r0, r6
    e6b8:	f000 f8c2 	bl	e840 <getArray>
        value->vt = info->type;
    e6bc:	7923      	ldrb	r3, [r4, #4]
    e6be:	702b      	strb	r3, [r5, #0]
    if (ret == 0 && (value->vt & DLMS_DATA_TYPE_BYREF) == 0)
    e6c0:	2800      	cmp	r0, #0
    e6c2:	d1c2      	bne.n	e64a <dlms_getData+0x20>
    e6c4:	e004      	b.n	e6d0 <dlms_getData+0xa6>
    if (buff->size - buff->position < 1)
    e6c6:	1a09      	subs	r1, r1, r0
    e6c8:	2900      	cmp	r1, #0
    e6ca:	dc06      	bgt.n	e6da <dlms_getData+0xb0>
        info->complete = 0;
    e6cc:	2300      	movs	r3, #0
    e6ce:	7163      	strb	r3, [r4, #5]
    if (ret == 0 && (value->vt & DLMS_DATA_TYPE_BYREF) == 0)
    e6d0:	f995 3000 	ldrsb.w	r3, [r5]
    e6d4:	2b00      	cmp	r3, #0
    e6d6:	da11      	bge.n	e6fc <dlms_getData+0xd2>
    e6d8:	e7ca      	b.n	e670 <dlms_getData+0x46>
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    e6da:	f10d 010e 	add.w	r1, sp, #14
    e6de:	4630      	mov	r0, r6
    e6e0:	f7fe fc59 	bl	cf96 <bb_getUInt8>
    e6e4:	2800      	cmp	r0, #0
    e6e6:	d1b0      	bne.n	e64a <dlms_getData+0x20>
    if ((value->vt & DLMS_DATA_TYPE_BYREF) == 0)
    e6e8:	f89d 300e 	ldrb.w	r3, [sp, #14]
    e6ec:	f995 2000 	ldrsb.w	r2, [r5]
    e6f0:	3b00      	subs	r3, #0
    e6f2:	bf18      	it	ne
    e6f4:	2301      	movne	r3, #1
    e6f6:	2a00      	cmp	r2, #0
    e6f8:	db03      	blt.n	e702 <dlms_getData+0xd8>
        value->boolVal = ch != 0;
    e6fa:	722b      	strb	r3, [r5, #8]
        value->vt = info->type;
    e6fc:	7923      	ldrb	r3, [r4, #4]
    e6fe:	702b      	strb	r3, [r5, #0]
    e700:	e7b6      	b.n	e670 <dlms_getData+0x46>
        *value->pboolVal = ch != 0;
    e702:	68aa      	ldr	r2, [r5, #8]
    e704:	7013      	strb	r3, [r2, #0]
    if (ret == 0 && (value->vt & DLMS_DATA_TYPE_BYREF) == 0)
    e706:	e7e3      	b.n	e6d0 <dlms_getData+0xa6>
    uint16_t cnt = 0;
    e708:	2300      	movs	r3, #0
    if (hlp_getObjectCount2(buff, &cnt) != 0)
    e70a:	f10d 010e 	add.w	r1, sp, #14
    e70e:	4630      	mov	r0, r6
    uint16_t cnt = 0;
    e710:	f8ad 300e 	strh.w	r3, [sp, #14]
    if (hlp_getObjectCount2(buff, &cnt) != 0)
    e714:	f00b f88d 	bl	19832 <hlp_getObjectCount2>
    e718:	4607      	mov	r7, r0
    e71a:	b110      	cbz	r0, e722 <dlms_getData+0xf8>
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    e71c:	f44f 7082 	mov.w	r0, #260	; 0x104
    e720:	e793      	b.n	e64a <dlms_getData+0x20>
    uint16_t byteCnt = ba_getByteCount(cnt);
    e722:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    e726:	f7f2 fdd5 	bl	12d4 <ba_getByteCount>
    if (buff->size - buff->position < byteCnt)
    e72a:	88f3      	ldrh	r3, [r6, #6]
    e72c:	8932      	ldrh	r2, [r6, #8]
    e72e:	1a9b      	subs	r3, r3, r2
    e730:	4283      	cmp	r3, r0
    e732:	da01      	bge.n	e738 <dlms_getData+0x10e>
        info->complete = 0;
    e734:	7167      	strb	r7, [r4, #5]
    if (ret == 0 && (value->vt & DLMS_DATA_TYPE_BYREF) == 0)
    e736:	e7cb      	b.n	e6d0 <dlms_getData+0xa6>
    value->bitArr = (bitArray*)gxmalloc(sizeof(bitArray));
    e738:	2008      	movs	r0, #8
    e73a:	f7fd fa3b 	bl	bbb4 <malloc>
    e73e:	60a8      	str	r0, [r5, #8]
    ba_init(value->bitArr);
    e740:	f7fe f949 	bl	c9d6 <ba_init>
    if ((ret = hlp_add(value->bitArr, buff, cnt)) != 0)
    e744:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    e748:	68a8      	ldr	r0, [r5, #8]
    e74a:	4631      	mov	r1, r6
    e74c:	f00b fa00 	bl	19b50 <hlp_add>
    e750:	e7b6      	b.n	e6c0 <dlms_getData+0x96>
        ret = getInt32(data, info, value);
    e752:	462a      	mov	r2, r5
    e754:	4621      	mov	r1, r4
    e756:	4630      	mov	r0, r6
    e758:	f7ff fc00 	bl	df5c <getInt32>
        break;
    e75c:	e7b0      	b.n	e6c0 <dlms_getData+0x96>
        ret = getUInt32(data, info, value);
    e75e:	462a      	mov	r2, r5
    e760:	4621      	mov	r1, r4
    e762:	4630      	mov	r0, r6
    e764:	f7ff fbe2 	bl	df2c <getUInt32>
        break;
    e768:	e7aa      	b.n	e6c0 <dlms_getData+0x96>
        ret = getString(data, info, knownType, value);
    e76a:	462b      	mov	r3, r5
    e76c:	4621      	mov	r1, r4
    e76e:	4630      	mov	r0, r6
    e770:	f7ff fc0c 	bl	df8c <getString>
        break;
    e774:	e7a4      	b.n	e6c0 <dlms_getData+0x96>
        ret = getUtfString(data, info, knownType, value);
    e776:	462b      	mov	r3, r5
    e778:	4621      	mov	r1, r4
    e77a:	4630      	mov	r0, r6
    e77c:	f7ff fc36 	bl	dfec <getUtfString>
        break;
    e780:	e79e      	b.n	e6c0 <dlms_getData+0x96>
        ret = getOctetString(data, info, knownType, value);
    e782:	462b      	mov	r3, r5
    e784:	4621      	mov	r1, r4
    e786:	4630      	mov	r0, r6
    e788:	f7ff fc69 	bl	e05e <getOctetString>
        break;
    e78c:	e798      	b.n	e6c0 <dlms_getData+0x96>
        ret = getBcd(data, info, knownType, value);
    e78e:	462b      	mov	r3, r5
    e790:	4621      	mov	r1, r4
    e792:	4630      	mov	r0, r6
    e794:	f7f3 ffb6 	bl	2704 <getBcd>
        break;
    e798:	e792      	b.n	e6c0 <dlms_getData+0x96>
        ret = getInt8(data, info, value);
    e79a:	462a      	mov	r2, r5
    e79c:	4621      	mov	r1, r4
    e79e:	4630      	mov	r0, r6
    e7a0:	f7ff fcc4 	bl	e12c <getInt8>
        break;
    e7a4:	e78c      	b.n	e6c0 <dlms_getData+0x96>
        ret = getInt16(data, info, value);
    e7a6:	462a      	mov	r2, r5
    e7a8:	4621      	mov	r1, r4
    e7aa:	4630      	mov	r0, r6
    e7ac:	f7ff fca2 	bl	e0f4 <getInt16>
        break;
    e7b0:	e786      	b.n	e6c0 <dlms_getData+0x96>
        ret = getUInt8(data, info, value);
    e7b2:	462a      	mov	r2, r5
    e7b4:	4621      	mov	r1, r4
    e7b6:	4630      	mov	r0, r6
    e7b8:	f7ff fc80 	bl	e0bc <getUInt8>
        break;
    e7bc:	e780      	b.n	e6c0 <dlms_getData+0x96>
        ret = getUInt16(data, info, value);
    e7be:	462a      	mov	r2, r5
    e7c0:	4621      	mov	r1, r4
    e7c2:	4630      	mov	r0, r6
    e7c4:	f7ff fcce 	bl	e164 <getUInt16>
        break;
    e7c8:	e77a      	b.n	e6c0 <dlms_getData+0x96>
        ret = getCompactArray(NULL, data, info, value, 0);
    e7ca:	2000      	movs	r0, #0
    e7cc:	9000      	str	r0, [sp, #0]
    e7ce:	462b      	mov	r3, r5
    e7d0:	4622      	mov	r2, r4
    e7d2:	4631      	mov	r1, r6
    e7d4:	f000 f953 	bl	ea7e <getCompactArray>
        break;
    e7d8:	e772      	b.n	e6c0 <dlms_getData+0x96>
        ret = getInt64(data, info, value);
    e7da:	462a      	mov	r2, r5
    e7dc:	4621      	mov	r1, r4
    e7de:	4630      	mov	r0, r6
    e7e0:	f7ff fcdc 	bl	e19c <getInt64>
        break;
    e7e4:	e76c      	b.n	e6c0 <dlms_getData+0x96>
        ret = getUInt64(data, info, value);
    e7e6:	462a      	mov	r2, r5
    e7e8:	4621      	mov	r1, r4
    e7ea:	4630      	mov	r0, r6
    e7ec:	f7ff fcf2 	bl	e1d4 <getUInt64>
        break;
    e7f0:	e766      	b.n	e6c0 <dlms_getData+0x96>
        ret = getEnum(data, info, value);
    e7f2:	462a      	mov	r2, r5
    e7f4:	4621      	mov	r1, r4
    e7f6:	4630      	mov	r0, r6
    e7f8:	f7ff fd08 	bl	e20c <getEnum>
        break;
    e7fc:	e760      	b.n	e6c0 <dlms_getData+0x96>
        ret = getFloat(data, info, value);
    e7fe:	462a      	mov	r2, r5
    e800:	4621      	mov	r1, r4
    e802:	4630      	mov	r0, r6
    e804:	f7ff fd3a 	bl	e27c <getFloat>
        break;
    e808:	e75a      	b.n	e6c0 <dlms_getData+0x96>
        ret = getDouble(data, info, value);
    e80a:	462a      	mov	r2, r5
    e80c:	4621      	mov	r1, r4
    e80e:	4630      	mov	r0, r6
    e810:	f7ff fd18 	bl	e244 <getDouble>
        break;
    e814:	e754      	b.n	e6c0 <dlms_getData+0x96>
        ret = getDateTime(data, info, value);
    e816:	462a      	mov	r2, r5
    e818:	4621      	mov	r1, r4
    e81a:	4630      	mov	r0, r6
    e81c:	f7ff fd4a 	bl	e2b4 <getDateTime>
        break;
    e820:	e74e      	b.n	e6c0 <dlms_getData+0x96>
        ret = getDate(data, info, value);
    e822:	462a      	mov	r2, r5
    e824:	4621      	mov	r1, r4
    e826:	4630      	mov	r0, r6
    e828:	f7f4 f816 	bl	2858 <getDate>
        break;
    e82c:	e748      	b.n	e6c0 <dlms_getData+0x96>
        ret = getTime(data, info, value);
    e82e:	462a      	mov	r2, r5
    e830:	4621      	mov	r1, r4
    e832:	4630      	mov	r0, r6
    e834:	f7f3 ffb6 	bl	27a4 <getTime>
        break;
    e838:	e742      	b.n	e6c0 <dlms_getData+0x96>
    switch (info->type & ~DLMS_DATA_TYPE_BYREF)
    e83a:	f44f 7081 	mov.w	r0, #258	; 0x102
    e83e:	e704      	b.n	e64a <dlms_getData+0x20>

0000e840 <getArray>:
{
    e840:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    e844:	4699      	mov	r9, r3
    if (info->count == 0)
    e846:	884b      	ldrh	r3, [r1, #2]
{
    e848:	4607      	mov	r7, r0
    e84a:	460d      	mov	r5, r1
    e84c:	4690      	mov	r8, r2
    if (info->count == 0)
    e84e:	b953      	cbnz	r3, e866 <getArray+0x26>
        if ((ret = getCount(buff, info, value)) != 0)
    e850:	464a      	mov	r2, r9
    e852:	f7ff fb50 	bl	def6 <getCount>
    e856:	4604      	mov	r4, r0
    e858:	b118      	cbz	r0, e862 <getArray+0x22>
}
    e85a:	4620      	mov	r0, r4
    e85c:	b002      	add	sp, #8
    e85e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (info->count != 0 && size < 1)
    e862:	886b      	ldrh	r3, [r5, #2]
    e864:	b133      	cbz	r3, e874 <getArray+0x34>
    e866:	88fa      	ldrh	r2, [r7, #6]
    e868:	893b      	ldrh	r3, [r7, #8]
    e86a:	429a      	cmp	r2, r3
    e86c:	d102      	bne.n	e874 <getArray+0x34>
        info->complete = 0;
    e86e:	2400      	movs	r4, #0
    e870:	716c      	strb	r4, [r5, #5]
        return 0;
    e872:	e7f2      	b.n	e85a <getArray+0x1a>
    for (pos = info->index; pos != info->count; ++pos)
    e874:	f8b5 a000 	ldrh.w	sl, [r5]
    e878:	886b      	ldrh	r3, [r5, #2]
    e87a:	4553      	cmp	r3, sl
    e87c:	d023      	beq.n	e8c6 <getArray+0x86>
        tmp = (dlmsVARIANT*)gxmalloc(sizeof(dlmsVARIANT));
    e87e:	2010      	movs	r0, #16
    e880:	f7fd f998 	bl	bbb4 <malloc>
        if (tmp == NULL)
    e884:	4606      	mov	r6, r0
    e886:	b3a0      	cbz	r0, e8f2 <getArray+0xb2>
        var_init(tmp);
    e888:	f00b fb31 	bl	19eee <var_init>
        di_init(&info2);
    e88c:	4668      	mov	r0, sp
    e88e:	f7ff fa3c 	bl	dd0a <di_init>
        if ((ret = dlms_getData(buff, &info2, tmp)) != 0)
    e892:	4632      	mov	r2, r6
    e894:	4669      	mov	r1, sp
    e896:	4638      	mov	r0, r7
    e898:	f7ff fec7 	bl	e62a <dlms_getData>
    e89c:	4604      	mov	r4, r0
    e89e:	b130      	cbz	r0, e8ae <getArray+0x6e>
            var_clear(tmp);
    e8a0:	4630      	mov	r0, r6
    e8a2:	f00b fc80 	bl	1a1a6 <var_clear>
            gxfree(tmp);
    e8a6:	4630      	mov	r0, r6
    e8a8:	f7fd f98c 	bl	bbc4 <free>
            return ret;
    e8ac:	e7d5      	b.n	e85a <getArray+0x1a>
        if (!info2.complete)
    e8ae:	f89d 4005 	ldrb.w	r4, [sp, #5]
    e8b2:	b964      	cbnz	r4, e8ce <getArray+0x8e>
            var_clear(tmp);
    e8b4:	4630      	mov	r0, r6
    e8b6:	f00b fc76 	bl	1a1a6 <var_clear>
            gxfree(tmp);
    e8ba:	4630      	mov	r0, r6
    e8bc:	f7fd f982 	bl	bbc4 <free>
            buff->position = startIndex;
    e8c0:	f8a7 8008 	strh.w	r8, [r7, #8]
            info->complete = 0;
    e8c4:	716c      	strb	r4, [r5, #5]
    info->index = pos;
    e8c6:	f8a5 a000 	strh.w	sl, [r5]
    return DLMS_ERROR_CODE_OK;
    e8ca:	2400      	movs	r4, #0
    e8cc:	e7c5      	b.n	e85a <getArray+0x1a>
            if (info2.count == info2.index)
    e8ce:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    e8d2:	f8bd 3000 	ldrh.w	r3, [sp]
    e8d6:	429a      	cmp	r2, r3
    e8d8:	d106      	bne.n	e8e8 <getArray+0xa8>
                va_push(value->Arr, tmp);
    e8da:	f8d9 0008 	ldr.w	r0, [r9, #8]
                startIndex = (uint16_t)buff->position;
    e8de:	f8b7 8008 	ldrh.w	r8, [r7, #8]
                va_push(value->Arr, tmp);
    e8e2:	4631      	mov	r1, r6
    e8e4:	f00b fc11 	bl	1a10a <va_push>
    for (pos = info->index; pos != info->count; ++pos)
    e8e8:	f10a 0a01 	add.w	sl, sl, #1
    e8ec:	fa1f fa8a 	uxth.w	sl, sl
    e8f0:	e7c2      	b.n	e878 <getArray+0x38>
            return DLMS_ERROR_CODE_OUTOFMEMORY;
    e8f2:	f44f 7482 	mov.w	r4, #260	; 0x104
    e8f6:	e7b0      	b.n	e85a <getArray+0x1a>

0000e8f8 <getCompactArrayItem>:
{
    e8f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    e8fc:	4605      	mov	r5, r0
    di_init(&tmp);
    e8fe:	4668      	mov	r0, sp
{
    e900:	4689      	mov	r9, r1
    e902:	4617      	mov	r7, r2
    e904:	461e      	mov	r6, r3
    di_init(&tmp);
    e906:	f7ff fa00 	bl	dd0a <di_init>
    dlmsVARIANT* value = gxmalloc(sizeof(dlmsVARIANT));
    e90a:	2010      	movs	r0, #16
    uint32_t start = buff->position;
    e90c:	f8b5 8008 	ldrh.w	r8, [r5, #8]
    tmp.type = dt;
    e910:	f88d 9004 	strb.w	r9, [sp, #4]
    dlmsVARIANT* value = gxmalloc(sizeof(dlmsVARIANT));
    e914:	f7fd f94e 	bl	bbb4 <malloc>
    if (value == NULL)
    e918:	4604      	mov	r4, r0
    e91a:	2800      	cmp	r0, #0
    e91c:	d062      	beq.n	e9e4 <getCompactArrayItem+0xec>
    var_init(value);
    e91e:	f00b fae6 	bl	19eee <var_init>
    if (dt == DLMS_DATA_TYPE_STRING)
    e922:	f1b9 0f0a 	cmp.w	r9, #10
    e926:	d11f      	bne.n	e968 <getCompactArrayItem+0x70>
        while (buff->position - start < len)
    e928:	892b      	ldrh	r3, [r5, #8]
    e92a:	eba3 0308 	sub.w	r3, r3, r8
    e92e:	42b3      	cmp	r3, r6
    e930:	d216      	bcs.n	e960 <getCompactArrayItem+0x68>
            var_clear(value);
    e932:	4620      	mov	r0, r4
    e934:	f00b fc37 	bl	1a1a6 <var_clear>
            di_init(&tmp);
    e938:	4668      	mov	r0, sp
    e93a:	f7ff f9e6 	bl	dd0a <di_init>
            if ((ret = getString(buff, &tmp, 0, value)) != 0)
    e93e:	4623      	mov	r3, r4
    e940:	2200      	movs	r2, #0
    e942:	4669      	mov	r1, sp
    e944:	4628      	mov	r0, r5
            tmp.type = dt;
    e946:	f88d 9004 	strb.w	r9, [sp, #4]
            if ((ret = getString(buff, &tmp, 0, value)) != 0)
    e94a:	f7ff fb1f 	bl	df8c <getString>
    e94e:	b940      	cbnz	r0, e962 <getCompactArrayItem+0x6a>
            va_push(list, value);
    e950:	4621      	mov	r1, r4
    e952:	4638      	mov	r0, r7
    e954:	f00b fbd9 	bl	1a10a <va_push>
            if (!tmp.complete)
    e958:	f89d 3005 	ldrb.w	r3, [sp, #5]
    e95c:	2b00      	cmp	r3, #0
    e95e:	d1e3      	bne.n	e928 <getCompactArrayItem+0x30>
    return 0;
    e960:	2000      	movs	r0, #0
}
    e962:	b003      	add	sp, #12
    e964:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if (dt == DLMS_DATA_TYPE_OCTET_STRING)
    e968:	f1b9 0f09 	cmp.w	r9, #9
    e96c:	d134      	bne.n	e9d8 <getCompactArrayItem+0xe0>
        while (buff->position - start < len)
    e96e:	892b      	ldrh	r3, [r5, #8]
    e970:	eba3 0308 	sub.w	r3, r3, r8
    e974:	42b3      	cmp	r3, r6
    e976:	d2f3      	bcs.n	e960 <getCompactArrayItem+0x68>
            var_clear(value);
    e978:	4620      	mov	r0, r4
    e97a:	f00b fc14 	bl	1a1a6 <var_clear>
            di_init(&tmp);
    e97e:	4668      	mov	r0, sp
    e980:	f7ff f9c3 	bl	dd0a <di_init>
            if ((ret = getOctetString(buff, &tmp, 0, value)) != 0)
    e984:	4623      	mov	r3, r4
    e986:	2200      	movs	r2, #0
    e988:	4669      	mov	r1, sp
    e98a:	4628      	mov	r0, r5
            tmp.type = dt;
    e98c:	f88d 9004 	strb.w	r9, [sp, #4]
            if ((ret = getOctetString(buff, &tmp, 0, value)) != 0)
    e990:	f7ff fb65 	bl	e05e <getOctetString>
    e994:	2800      	cmp	r0, #0
    e996:	d1e4      	bne.n	e962 <getCompactArrayItem+0x6a>
            va_push(list, value);
    e998:	4621      	mov	r1, r4
    e99a:	4638      	mov	r0, r7
    e99c:	f00b fbb5 	bl	1a10a <va_push>
            if (!tmp.complete)
    e9a0:	f89d 3005 	ldrb.w	r3, [sp, #5]
    e9a4:	2b00      	cmp	r3, #0
    e9a6:	d1e2      	bne.n	e96e <getCompactArrayItem+0x76>
    e9a8:	e7da      	b.n	e960 <getCompactArrayItem+0x68>
            var_clear(value);
    e9aa:	4620      	mov	r0, r4
    e9ac:	f00b fbfb 	bl	1a1a6 <var_clear>
            di_init(&tmp);
    e9b0:	4668      	mov	r0, sp
    e9b2:	f7ff f9aa 	bl	dd0a <di_init>
            if ((ret = dlms_getData(buff, &tmp, value)) != 0)
    e9b6:	4622      	mov	r2, r4
    e9b8:	4669      	mov	r1, sp
    e9ba:	4628      	mov	r0, r5
            tmp.type = dt;
    e9bc:	f88d 9004 	strb.w	r9, [sp, #4]
            if ((ret = dlms_getData(buff, &tmp, value)) != 0)
    e9c0:	f7ff fe33 	bl	e62a <dlms_getData>
    e9c4:	2800      	cmp	r0, #0
    e9c6:	d1cc      	bne.n	e962 <getCompactArrayItem+0x6a>
            va_push(list, value);
    e9c8:	4621      	mov	r1, r4
    e9ca:	4638      	mov	r0, r7
    e9cc:	f00b fb9d 	bl	1a10a <va_push>
            if (!tmp.complete)
    e9d0:	f89d 3005 	ldrb.w	r3, [sp, #5]
    e9d4:	2b00      	cmp	r3, #0
    e9d6:	d0c3      	beq.n	e960 <getCompactArrayItem+0x68>
        while (buff->position - start < len)
    e9d8:	892b      	ldrh	r3, [r5, #8]
    e9da:	eba3 0308 	sub.w	r3, r3, r8
    e9de:	42b3      	cmp	r3, r6
    e9e0:	d3e3      	bcc.n	e9aa <getCompactArrayItem+0xb2>
    e9e2:	e7bd      	b.n	e960 <getCompactArrayItem+0x68>
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    e9e4:	f44f 7082 	mov.w	r0, #260	; 0x104
    e9e8:	e7bb      	b.n	e962 <getCompactArrayItem+0x6a>

0000e9ea <getCompactArrayItem2>:
{
    e9ea:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    e9ee:	4680      	mov	r8, r0
    dlmsVARIANT* tmp = gxmalloc(sizeof(dlmsVARIANT));
    e9f0:	2010      	movs	r0, #16
{
    e9f2:	460f      	mov	r7, r1
    e9f4:	4691      	mov	r9, r2
    dlmsVARIANT* tmp = gxmalloc(sizeof(dlmsVARIANT));
    e9f6:	f7fd f8dd 	bl	bbb4 <malloc>
    if (tmp == NULL)
    e9fa:	4605      	mov	r5, r0
    e9fc:	b928      	cbnz	r0, ea0a <getCompactArrayItem2+0x20>
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    e9fe:	f44f 7482 	mov.w	r4, #260	; 0x104
}
    ea02:	4620      	mov	r0, r4
    ea04:	b003      	add	sp, #12
    ea06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    var_init(tmp);
    ea0a:	f00b fa70 	bl	19eee <var_init>
    tmp->vt = DLMS_DATA_TYPE_ARRAY;
    ea0e:	2301      	movs	r3, #1
    ea10:	702b      	strb	r3, [r5, #0]
    tmp->Arr = (variantArray*)gxmalloc(sizeof(variantArray));
    ea12:	2008      	movs	r0, #8
    ea14:	f7fd f8ce 	bl	bbb4 <malloc>
    ea18:	60a8      	str	r0, [r5, #8]
    if (tmp->Arr == NULL)
    ea1a:	2800      	cmp	r0, #0
    ea1c:	d0ef      	beq.n	e9fe <getCompactArrayItem2+0x14>
    va_init(tmp->Arr);
    ea1e:	f00b fb48 	bl	1a0b2 <va_init>
    for (pos = 0; pos != dt->size; ++pos)
    ea22:	2600      	movs	r6, #0
    ea24:	88fb      	ldrh	r3, [r7, #6]
    ea26:	42b3      	cmp	r3, r6
    ea28:	d105      	bne.n	ea36 <getCompactArrayItem2+0x4c>
    va_push(list, tmp);
    ea2a:	4629      	mov	r1, r5
    ea2c:	4648      	mov	r0, r9
    ea2e:	f00b fb6c 	bl	1a10a <va_push>
    return 0;
    ea32:	2400      	movs	r4, #0
    ea34:	e7e5      	b.n	ea02 <getCompactArrayItem2+0x18>
        if ((ret = va_getByIndex(dt, pos, &it)) != 0)
    ea36:	aa01      	add	r2, sp, #4
    ea38:	4631      	mov	r1, r6
    ea3a:	4638      	mov	r0, r7
    ea3c:	f00b fc31 	bl	1a2a2 <va_getByIndex>
    ea40:	4604      	mov	r4, r0
    ea42:	b130      	cbz	r0, ea52 <getCompactArrayItem2+0x68>
                var_clear(tmp);
    ea44:	4628      	mov	r0, r5
    ea46:	f00b fbae 	bl	1a1a6 <var_clear>
                gxfree(tmp);
    ea4a:	4628      	mov	r0, r5
    ea4c:	f7fd f8ba 	bl	bbc4 <free>
                return ret;
    ea50:	e7d7      	b.n	ea02 <getCompactArrayItem2+0x18>
        if (it->vt == DLMS_DATA_TYPE_ARRAY || it->vt == DLMS_DATA_TYPE_STRUCTURE)
    ea52:	9901      	ldr	r1, [sp, #4]
    ea54:	68aa      	ldr	r2, [r5, #8]
    ea56:	780b      	ldrb	r3, [r1, #0]
    ea58:	3b01      	subs	r3, #1
    ea5a:	2b01      	cmp	r3, #1
            if ((ret = getCompactArrayItem2(buff, it->Arr, tmp->Arr, 1)) != 0)
    ea5c:	f04f 0301 	mov.w	r3, #1
        if (it->vt == DLMS_DATA_TYPE_ARRAY || it->vt == DLMS_DATA_TYPE_STRUCTURE)
    ea60:	d808      	bhi.n	ea74 <getCompactArrayItem2+0x8a>
            if ((ret = getCompactArrayItem2(buff, it->Arr, tmp->Arr, 1)) != 0)
    ea62:	6889      	ldr	r1, [r1, #8]
    ea64:	4640      	mov	r0, r8
    ea66:	f7ff ffc0 	bl	e9ea <getCompactArrayItem2>
            if ((ret = getCompactArrayItem(buff, (DLMS_DATA_TYPE)it->bVal, tmp->Arr, 1)) != 0)
    ea6a:	4604      	mov	r4, r0
    ea6c:	2800      	cmp	r0, #0
    ea6e:	d1e9      	bne.n	ea44 <getCompactArrayItem2+0x5a>
    for (pos = 0; pos != dt->size; ++pos)
    ea70:	3601      	adds	r6, #1
    ea72:	e7d7      	b.n	ea24 <getCompactArrayItem2+0x3a>
            if ((ret = getCompactArrayItem(buff, (DLMS_DATA_TYPE)it->bVal, tmp->Arr, 1)) != 0)
    ea74:	7a09      	ldrb	r1, [r1, #8]
    ea76:	4640      	mov	r0, r8
    ea78:	f7ff ff3e 	bl	e8f8 <getCompactArrayItem>
    ea7c:	e7f5      	b.n	ea6a <getCompactArrayItem2+0x80>

0000ea7e <getCompactArray>:
{
    ea7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ea82:	460e      	mov	r6, r1
    ea84:	b08b      	sub	sp, #44	; 0x2c
    var_clear(value);
    ea86:	4618      	mov	r0, r3
{
    ea88:	4615      	mov	r5, r2
    ea8a:	4698      	mov	r8, r3
    ea8c:	f89d 7050 	ldrb.w	r7, [sp, #80]	; 0x50
    var_clear(value);
    ea90:	f00b fb89 	bl	1a1a6 <var_clear>
    if (buff->size - buff->position < 2)
    ea94:	88f3      	ldrh	r3, [r6, #6]
    ea96:	8932      	ldrh	r2, [r6, #8]
    ea98:	1a9b      	subs	r3, r3, r2
    ea9a:	2b01      	cmp	r3, #1
    ea9c:	dc03      	bgt.n	eaa6 <getCompactArray+0x28>
        info->complete = 0;
    ea9e:	2000      	movs	r0, #0
    eaa0:	7168      	strb	r0, [r5, #5]
    return getCompactArrayItem(buff, dt, value->Arr, len);
    eaa2:	4604      	mov	r4, r0
    eaa4:	e037      	b.n	eb16 <getCompactArray+0x98>
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    eaa6:	f10d 0109 	add.w	r1, sp, #9
    eaaa:	4630      	mov	r0, r6
    eaac:	f7fe fa73 	bl	cf96 <bb_getUInt8>
    eab0:	4604      	mov	r4, r0
    eab2:	bb80      	cbnz	r0, eb16 <getCompactArray+0x98>
    DLMS_DATA_TYPE dt = (DLMS_DATA_TYPE)ch;
    eab4:	f89d 5009 	ldrb.w	r5, [sp, #9]
    if (dt == DLMS_DATA_TYPE_ARRAY)
    eab8:	2d01      	cmp	r5, #1
    eaba:	f000 80f4 	beq.w	eca6 <getCompactArray+0x228>
    if ((ret = hlp_getObjectCount2(buff, &len)) != 0)
    eabe:	f10d 010a 	add.w	r1, sp, #10
    eac2:	4630      	mov	r0, r6
    eac4:	f00a feb5 	bl	19832 <hlp_getObjectCount2>
    eac8:	4604      	mov	r4, r0
    eaca:	bb20      	cbnz	r0, eb16 <getCompactArray+0x98>
    value->Arr = (variantArray*)gxmalloc(sizeof(variantArray));
    eacc:	2008      	movs	r0, #8
    eace:	f7fd f871 	bl	bbb4 <malloc>
    value->vt = DLMS_DATA_TYPE_ARRAY;
    ead2:	2201      	movs	r2, #1
    value->Arr = (variantArray*)gxmalloc(sizeof(variantArray));
    ead4:	f8c8 0008 	str.w	r0, [r8, #8]
    value->vt = DLMS_DATA_TYPE_ARRAY;
    ead8:	f888 2000 	strb.w	r2, [r8]
    if (value->Arr == NULL)
    eadc:	2800      	cmp	r0, #0
    eade:	f000 80e5 	beq.w	ecac <getCompactArray+0x22e>
    va_init(value->Arr);
    eae2:	f00b fae6 	bl	1a0b2 <va_init>
    if (dt == DLMS_DATA_TYPE_STRUCTURE)
    eae6:	2d02      	cmp	r5, #2
    eae8:	f040 80d4 	bne.w	ec94 <getCompactArray+0x216>
        va_init(&cols);
    eaec:	a806      	add	r0, sp, #24
    eaee:	f00b fae0 	bl	1a0b2 <va_init>
        if ((ret = getDataTypes(buff, &cols, len)) != 0)
    eaf2:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    eaf6:	a906      	add	r1, sp, #24
    eaf8:	4630      	mov	r0, r6
    eafa:	f7ff fcc4 	bl	e486 <getDataTypes>
    eafe:	4604      	mov	r4, r0
    eb00:	b118      	cbz	r0, eb0a <getCompactArray+0x8c>
        va_clear(&cols);
    eb02:	a806      	add	r0, sp, #24
    eb04:	f00b fb2a 	bl	1a15c <va_clear>
        return 0;
    eb08:	e005      	b.n	eb16 <getCompactArray+0x98>
        if (onlyDataTypes)
    eb0a:	b147      	cbz	r7, eb1e <getCompactArray+0xa0>
            va_attach2(value->Arr, &cols);
    eb0c:	f8d8 0008 	ldr.w	r0, [r8, #8]
    eb10:	a906      	add	r1, sp, #24
    eb12:	f00b fbbc 	bl	1a28e <va_attach2>
}
    eb16:	4620      	mov	r0, r4
    eb18:	b00b      	add	sp, #44	; 0x2c
    eb1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (buff->position == buff->size)
    eb1e:	8932      	ldrh	r2, [r6, #8]
    eb20:	88f3      	ldrh	r3, [r6, #6]
    eb22:	429a      	cmp	r2, r3
    eb24:	d12a      	bne.n	eb7c <getCompactArray+0xfe>
            len = 0;
    eb26:	f8ad 000a 	strh.w	r0, [sp, #10]
        int start = buff->position;
    eb2a:	8933      	ldrh	r3, [r6, #8]
    eb2c:	9301      	str	r3, [sp, #4]
        while (buff->position - start < len)
    eb2e:	9a01      	ldr	r2, [sp, #4]
    eb30:	8933      	ldrh	r3, [r6, #8]
    eb32:	1a9b      	subs	r3, r3, r2
    eb34:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    eb38:	4293      	cmp	r3, r2
    eb3a:	dae2      	bge.n	eb02 <getCompactArray+0x84>
            variantArray* row = (variantArray*)gxmalloc(sizeof(variantArray));
    eb3c:	2008      	movs	r0, #8
    eb3e:	f7fd f839 	bl	bbb4 <malloc>
            if (row == NULL)
    eb42:	4607      	mov	r7, r0
    eb44:	2800      	cmp	r0, #0
    eb46:	f000 80a2 	beq.w	ec8e <getCompactArray+0x210>
            va_init(row);
    eb4a:	f00b fab2 	bl	1a0b2 <va_init>
            for (pos = 0; pos != cols.size; ++pos)
    eb4e:	f04f 0900 	mov.w	r9, #0
    eb52:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    eb56:	4599      	cmp	r9, r3
    eb58:	d079      	beq.n	ec4e <getCompactArray+0x1d0>
                if ((ret = va_getByIndex(&cols, pos, &it)) != 0)
    eb5a:	aa03      	add	r2, sp, #12
    eb5c:	4649      	mov	r1, r9
    eb5e:	a806      	add	r0, sp, #24
    eb60:	f00b fb9f 	bl	1a2a2 <va_getByIndex>
    eb64:	4605      	mov	r5, r0
    eb66:	b1b0      	cbz	r0, eb96 <getCompactArray+0x118>
                            va_clear(&cols);
    eb68:	a806      	add	r0, sp, #24
    eb6a:	f00b faf7 	bl	1a15c <va_clear>
                            va_clear(row);
    eb6e:	4638      	mov	r0, r7
    eb70:	f00b faf4 	bl	1a15c <va_clear>
                            gxfree(row);
    eb74:	4638      	mov	r0, r7
    eb76:	f7fd f825 	bl	bbc4 <free>
                            return ret;
    eb7a:	e00a      	b.n	eb92 <getCompactArray+0x114>
            if ((ret = hlp_getObjectCount2(buff, &len)) != 0)
    eb7c:	f10d 010a 	add.w	r1, sp, #10
    eb80:	4630      	mov	r0, r6
    eb82:	f00a fe56 	bl	19832 <hlp_getObjectCount2>
    eb86:	4605      	mov	r5, r0
    eb88:	2800      	cmp	r0, #0
    eb8a:	d0ce      	beq.n	eb2a <getCompactArray+0xac>
                va_clear(&cols);
    eb8c:	a806      	add	r0, sp, #24
    eb8e:	f00b fae5 	bl	1a15c <va_clear>
                return DLMS_ERROR_CODE_OUTOFMEMORY;
    eb92:	462c      	mov	r4, r5
    eb94:	e7bf      	b.n	eb16 <getCompactArray+0x98>
                if (it->vt == DLMS_DATA_TYPE_STRUCTURE)
    eb96:	9903      	ldr	r1, [sp, #12]
    eb98:	780d      	ldrb	r5, [r1, #0]
    eb9a:	2d02      	cmp	r5, #2
    eb9c:	d109      	bne.n	ebb2 <getCompactArray+0x134>
                    if ((ret = getCompactArrayItem2(buff, it->Arr, row, 1)) != 0)
    eb9e:	6889      	ldr	r1, [r1, #8]
    eba0:	2301      	movs	r3, #1
    eba2:	463a      	mov	r2, r7
    eba4:	4630      	mov	r0, r6
    eba6:	f7ff ff20 	bl	e9ea <getCompactArrayItem2>
                    if ((ret = getCompactArrayItem(buff, (DLMS_DATA_TYPE)it->bVal, row, 1)) != 0)
    ebaa:	4605      	mov	r5, r0
    ebac:	2800      	cmp	r0, #0
    ebae:	d04a      	beq.n	ec46 <getCompactArray+0x1c8>
    ebb0:	e7da      	b.n	eb68 <getCompactArray+0xea>
                else if (it->vt == DLMS_DATA_TYPE_ARRAY)
    ebb2:	2d01      	cmp	r5, #1
    ebb4:	d161      	bne.n	ec7a <getCompactArray+0x1fc>
                    va_init(&tmp2);
    ebb6:	a808      	add	r0, sp, #32
    ebb8:	f00b fa7b 	bl	1a0b2 <va_init>
                    if ((ret = getCompactArrayItem2(buff, it->Arr, &tmp2, 1)) != 0 ||
    ebbc:	9903      	ldr	r1, [sp, #12]
    ebbe:	462b      	mov	r3, r5
    ebc0:	6889      	ldr	r1, [r1, #8]
    ebc2:	aa08      	add	r2, sp, #32
    ebc4:	4630      	mov	r0, r6
    ebc6:	f7ff ff10 	bl	e9ea <getCompactArrayItem2>
    ebca:	4683      	mov	fp, r0
    ebcc:	b930      	cbnz	r0, ebdc <getCompactArray+0x15e>
                        (ret = va_getByIndex(&tmp2, 0, &it2)) != 0)
    ebce:	4601      	mov	r1, r0
    ebd0:	aa04      	add	r2, sp, #16
    ebd2:	a808      	add	r0, sp, #32
    ebd4:	f00b fb65 	bl	1a2a2 <va_getByIndex>
                    if ((ret = getCompactArrayItem2(buff, it->Arr, &tmp2, 1)) != 0 ||
    ebd8:	4683      	mov	fp, r0
    ebda:	b360      	cbz	r0, ec36 <getCompactArray+0x1b8>
                        va_clear(&tmp2);
    ebdc:	a808      	add	r0, sp, #32
    ebde:	f00b fabd 	bl	1a15c <va_clear>
                        va_clear(&cols);
    ebe2:	a806      	add	r0, sp, #24
    ebe4:	f00b faba 	bl	1a15c <va_clear>
                        va_clear(row);
    ebe8:	4638      	mov	r0, r7
    ebea:	f00b fab7 	bl	1a15c <va_clear>
                        gxfree(row);
    ebee:	4638      	mov	r0, r7
    ebf0:	f7fc ffe8 	bl	bbc4 <free>
                        return ret;
    ebf4:	465d      	mov	r5, fp
    ebf6:	e7cc      	b.n	eb92 <getCompactArray+0x114>
                        if ((ret = va_getByIndex(it2->Arr, pos1, &it3)) != 0)
    ebf8:	aa05      	add	r2, sp, #20
    ebfa:	4659      	mov	r1, fp
    ebfc:	f00b fb51 	bl	1a2a2 <va_getByIndex>
    ec00:	4605      	mov	r5, r0
    ec02:	b118      	cbz	r0, ec0c <getCompactArray+0x18e>
                            va_clear(&tmp2);
    ec04:	a808      	add	r0, sp, #32
    ec06:	f00b faa9 	bl	1a15c <va_clear>
    ec0a:	e7ad      	b.n	eb68 <getCompactArray+0xea>
                        it4 = (dlmsVARIANT*)gxmalloc(sizeof(dlmsVARIANT));
    ec0c:	2010      	movs	r0, #16
    ec0e:	f7fc ffd1 	bl	bbb4 <malloc>
                        if (it4 == NULL)
    ec12:	4682      	mov	sl, r0
    ec14:	2800      	cmp	r0, #0
    ec16:	d03a      	beq.n	ec8e <getCompactArray+0x210>
                        var_init(it4);
    ec18:	f00b f969 	bl	19eee <var_init>
                        if ((ret = var_copy(it4, it3)) != 0)
    ec1c:	9905      	ldr	r1, [sp, #20]
    ec1e:	4650      	mov	r0, sl
    ec20:	f7f5 fb6c 	bl	42fc <var_copy>
    ec24:	4605      	mov	r5, r0
    ec26:	2800      	cmp	r0, #0
    ec28:	d1b3      	bne.n	eb92 <getCompactArray+0x114>
                        va_push(row, it4);
    ec2a:	4651      	mov	r1, sl
    ec2c:	4638      	mov	r0, r7
    ec2e:	f00b fa6c 	bl	1a10a <va_push>
                    for (pos1 = 0; pos1 != it2->Arr->size; ++pos1)
    ec32:	f10b 0b01 	add.w	fp, fp, #1
    ec36:	9b04      	ldr	r3, [sp, #16]
    ec38:	6898      	ldr	r0, [r3, #8]
    ec3a:	88c3      	ldrh	r3, [r0, #6]
    ec3c:	459b      	cmp	fp, r3
    ec3e:	d1db      	bne.n	ebf8 <getCompactArray+0x17a>
                    va_clear(&tmp2);
    ec40:	a808      	add	r0, sp, #32
    ec42:	f00b fa8b 	bl	1a15c <va_clear>
                if (buff->position == buff->size)
    ec46:	8932      	ldrh	r2, [r6, #8]
    ec48:	88f3      	ldrh	r3, [r6, #6]
    ec4a:	429a      	cmp	r2, r3
    ec4c:	d11c      	bne.n	ec88 <getCompactArray+0x20a>
            if (row->size >= cols.size)
    ec4e:	88fa      	ldrh	r2, [r7, #6]
    ec50:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    ec54:	429a      	cmp	r2, r3
    ec56:	f4ff af54 	bcc.w	eb02 <getCompactArray+0x84>
                dlmsVARIANT* tmp = (dlmsVARIANT*)gxmalloc(sizeof(dlmsVARIANT));
    ec5a:	2010      	movs	r0, #16
    ec5c:	f7fc ffaa 	bl	bbb4 <malloc>
                if (tmp == NULL)
    ec60:	4605      	mov	r5, r0
    ec62:	b1a0      	cbz	r0, ec8e <getCompactArray+0x210>
                var_clear(tmp);
    ec64:	f00b fa9f 	bl	1a1a6 <var_clear>
                tmp->vt = DLMS_DATA_TYPE_ARRAY;
    ec68:	2301      	movs	r3, #1
                va_push(value->Arr, tmp);
    ec6a:	f8d8 0008 	ldr.w	r0, [r8, #8]
                tmp->Arr = row;
    ec6e:	60af      	str	r7, [r5, #8]
                tmp->vt = DLMS_DATA_TYPE_ARRAY;
    ec70:	702b      	strb	r3, [r5, #0]
                va_push(value->Arr, tmp);
    ec72:	4629      	mov	r1, r5
    ec74:	f00b fa49 	bl	1a10a <va_push>
    ec78:	e759      	b.n	eb2e <getCompactArray+0xb0>
                    if ((ret = getCompactArrayItem(buff, (DLMS_DATA_TYPE)it->bVal, row, 1)) != 0)
    ec7a:	7a09      	ldrb	r1, [r1, #8]
    ec7c:	2301      	movs	r3, #1
    ec7e:	463a      	mov	r2, r7
    ec80:	4630      	mov	r0, r6
    ec82:	f7ff fe39 	bl	e8f8 <getCompactArrayItem>
    ec86:	e790      	b.n	ebaa <getCompactArray+0x12c>
            for (pos = 0; pos != cols.size; ++pos)
    ec88:	f109 0901 	add.w	r9, r9, #1
    ec8c:	e761      	b.n	eb52 <getCompactArray+0xd4>
                return DLMS_ERROR_CODE_OUTOFMEMORY;
    ec8e:	f44f 7582 	mov.w	r5, #260	; 0x104
    ec92:	e77e      	b.n	eb92 <getCompactArray+0x114>
    return getCompactArrayItem(buff, dt, value->Arr, len);
    ec94:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    ec98:	f8d8 2008 	ldr.w	r2, [r8, #8]
    ec9c:	4629      	mov	r1, r5
    ec9e:	4630      	mov	r0, r6
    eca0:	f7ff fe2a 	bl	e8f8 <getCompactArrayItem>
    eca4:	e6fd      	b.n	eaa2 <getCompactArray+0x24>
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    eca6:	f44f 7481 	mov.w	r4, #258	; 0x102
    ecaa:	e734      	b.n	eb16 <getCompactArray+0x98>
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    ecac:	f44f 7482 	mov.w	r4, #260	; 0x104
    ecb0:	e731      	b.n	eb16 <getCompactArray+0x98>

0000ecb2 <dlms_getHDLCAddress>:
{
    ecb2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    for (pos = (uint16_t)buff->position; pos != (uint16_t)buff->size; ++pos)
    ecb6:	f8b0 8008 	ldrh.w	r8, [r0, #8]
{
    ecba:	4604      	mov	r4, r0
    ecbc:	460d      	mov	r5, r1
    ecbe:	4617      	mov	r7, r2
    int ret, size = 0;
    ecc0:	2600      	movs	r6, #0
    for (pos = (uint16_t)buff->position; pos != (uint16_t)buff->size; ++pos)
    ecc2:	88e3      	ldrh	r3, [r4, #6]
    ecc4:	eb08 0106 	add.w	r1, r8, r6
    ecc8:	b289      	uxth	r1, r1
    ecca:	428b      	cmp	r3, r1
    eccc:	d00a      	beq.n	ece4 <dlms_getHDLCAddress+0x32>
        if ((ret = bb_getUInt8ByIndex(buff, pos, &ch)) != 0)
    ecce:	f10d 0203 	add.w	r2, sp, #3
    ecd2:	4620      	mov	r0, r4
        ++size;
    ecd4:	3601      	adds	r6, #1
        if ((ret = bb_getUInt8ByIndex(buff, pos, &ch)) != 0)
    ecd6:	f7fe f97c 	bl	cfd2 <bb_getUInt8ByIndex>
    ecda:	b9a8      	cbnz	r0, ed08 <dlms_getHDLCAddress+0x56>
        if ((ch & 0x1) == 1)
    ecdc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    ece0:	07db      	lsls	r3, r3, #31
    ece2:	d5ee      	bpl.n	ecc2 <dlms_getHDLCAddress+0x10>
    if (checkClientAddress && size != 1)
    ece4:	b127      	cbz	r7, ecf0 <dlms_getHDLCAddress+0x3e>
    ece6:	2e01      	cmp	r6, #1
    ece8:	d004      	beq.n	ecf4 <dlms_getHDLCAddress+0x42>
        return DLMS_ERROR_CODE_INVALID_CLIENT_ADDRESS;
    ecea:	f240 1007 	movw	r0, #263	; 0x107
    ecee:	e00b      	b.n	ed08 <dlms_getHDLCAddress+0x56>
    if (size == 1)
    ecf0:	2e01      	cmp	r6, #1
    ecf2:	d10c      	bne.n	ed0e <dlms_getHDLCAddress+0x5c>
        if ((ret = bb_getUInt8(buff, &ch)) != 0)
    ecf4:	f10d 0103 	add.w	r1, sp, #3
    ecf8:	4620      	mov	r0, r4
    ecfa:	f7fe f94c 	bl	cf96 <bb_getUInt8>
    ecfe:	b918      	cbnz	r0, ed08 <dlms_getHDLCAddress+0x56>
        *address = ((ch & 0xFE) >> 1);
    ed00:	f89d 3003 	ldrb.w	r3, [sp, #3]
    ed04:	085b      	lsrs	r3, r3, #1
        *address = ((l & 0xFE) >> 1) | ((l & 0xFE00) >> 2)
    ed06:	602b      	str	r3, [r5, #0]
}
    ed08:	b002      	add	sp, #8
    ed0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (size == 2)
    ed0e:	2e02      	cmp	r6, #2
    ed10:	d10e      	bne.n	ed30 <dlms_getHDLCAddress+0x7e>
        if ((ret = bb_getUInt16(buff, &s)) != 0)
    ed12:	a901      	add	r1, sp, #4
    ed14:	4620      	mov	r0, r4
    ed16:	f7fe f967 	bl	cfe8 <bb_getUInt16>
    ed1a:	2800      	cmp	r0, #0
    ed1c:	d1f4      	bne.n	ed08 <dlms_getHDLCAddress+0x56>
        *address = ((s & 0xFE) >> 1) | ((s & 0xFE00) >> 2);
    ed1e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    ed22:	f3c3 0246 	ubfx	r2, r3, #1, #7
    ed26:	109b      	asrs	r3, r3, #2
    ed28:	f403 537e 	and.w	r3, r3, #16256	; 0x3f80
            | ((l & 0xFE0000) >> 3) | ((l & 0xFE000000) >> 4);
    ed2c:	4313      	orrs	r3, r2
    ed2e:	e7ea      	b.n	ed06 <dlms_getHDLCAddress+0x54>
    else if (size == 4)
    ed30:	2e04      	cmp	r6, #4
    ed32:	d114      	bne.n	ed5e <dlms_getHDLCAddress+0xac>
        if ((ret = bb_getUInt32(buff, &l)) != 0)
    ed34:	a901      	add	r1, sp, #4
    ed36:	4620      	mov	r0, r4
    ed38:	f7fe f96b 	bl	d012 <bb_getUInt32>
    ed3c:	2800      	cmp	r0, #0
    ed3e:	d1e3      	bne.n	ed08 <dlms_getHDLCAddress+0x56>
        *address = ((l & 0xFE) >> 1) | ((l & 0xFE00) >> 2)
    ed40:	9b01      	ldr	r3, [sp, #4]
    ed42:	0899      	lsrs	r1, r3, #2
    ed44:	f3c3 0246 	ubfx	r2, r3, #1, #7
    ed48:	f401 517e 	and.w	r1, r1, #16256	; 0x3f80
    ed4c:	430a      	orrs	r2, r1
            | ((l & 0xFE0000) >> 3) | ((l & 0xFE000000) >> 4);
    ed4e:	08d9      	lsrs	r1, r3, #3
    ed50:	f401 11fe 	and.w	r1, r1, #2080768	; 0x1fc000
    ed54:	091b      	lsrs	r3, r3, #4
    ed56:	430a      	orrs	r2, r1
    ed58:	f003 637e 	and.w	r3, r3, #266338304	; 0xfe00000
    ed5c:	e7e6      	b.n	ed2c <dlms_getHDLCAddress+0x7a>
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    ed5e:	f44f 7081 	mov.w	r0, #258	; 0x102
    ed62:	e7d1      	b.n	ed08 <dlms_getHDLCAddress+0x56>

0000ed64 <dlms_checkHdlcAddress>:
{
    ed64:	b5f0      	push	{r4, r5, r6, r7, lr}
    ed66:	4615      	mov	r5, r2
    ed68:	b085      	sub	sp, #20
    ed6a:	4606      	mov	r6, r0
    ed6c:	460c      	mov	r4, r1
    if ((ret = dlms_getHDLCAddress(reply, &target, 0)) != 0)
    ed6e:	2200      	movs	r2, #0
    ed70:	a903      	add	r1, sp, #12
    ed72:	4628      	mov	r0, r5
{
    ed74:	461f      	mov	r7, r3
    if ((ret = dlms_getHDLCAddress(reply, &target, 0)) != 0)
    ed76:	f7ff ff9c 	bl	ecb2 <dlms_getHDLCAddress>
    ed7a:	b998      	cbnz	r0, eda4 <dlms_checkHdlcAddress+0x40>
    if ((ret = dlms_getHDLCAddress(reply, &source, server)) != 0)
    ed7c:	4632      	mov	r2, r6
    ed7e:	a902      	add	r1, sp, #8
    ed80:	4628      	mov	r0, r5
    ed82:	f7ff ff96 	bl	ecb2 <dlms_getHDLCAddress>
    ed86:	b968      	cbnz	r0, eda4 <dlms_checkHdlcAddress+0x40>
    if (server)
    ed88:	9a03      	ldr	r2, [sp, #12]
    ed8a:	b316      	cbz	r6, edd2 <dlms_checkHdlcAddress+0x6e>
        if (settings->serverAddress != 0 && settings->serverAddress != target)
    ed8c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    ed8e:	b15b      	cbz	r3, eda8 <dlms_checkHdlcAddress+0x44>
    ed90:	4293      	cmp	r3, r2
    ed92:	d009      	beq.n	eda8 <dlms_checkHdlcAddress+0x44>
            if (bb_getUInt8ByIndex(reply, reply->position, &ch) != 0)
    ed94:	8929      	ldrh	r1, [r5, #8]
    ed96:	f10d 0207 	add.w	r2, sp, #7
    ed9a:	4628      	mov	r0, r5
    ed9c:	f7fe f919 	bl	cfd2 <bb_getUInt8ByIndex>
                return DLMS_ERROR_CODE_INVALID_SERVER_ADDRESS;
    eda0:	f44f 7084 	mov.w	r0, #264	; 0x108
}
    eda4:	b005      	add	sp, #20
    eda6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            settings->serverAddress = (uint16_t)target;
    eda8:	b292      	uxth	r2, r2
    edaa:	6322      	str	r2, [r4, #48]	; 0x30
        if (settings->clientAddress != 0 && settings->clientAddress != source)
    edac:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
    edae:	9b02      	ldr	r3, [sp, #8]
    edb0:	b16a      	cbz	r2, edce <dlms_checkHdlcAddress+0x6a>
    edb2:	429a      	cmp	r2, r3
    edb4:	d00b      	beq.n	edce <dlms_checkHdlcAddress+0x6a>
            if (bb_getUInt8ByIndex(reply, reply->position, &ch) != 0)
    edb6:	8929      	ldrh	r1, [r5, #8]
    edb8:	f10d 0207 	add.w	r2, sp, #7
    edbc:	4628      	mov	r0, r5
    edbe:	f7fe f908 	bl	cfd2 <bb_getUInt8ByIndex>
    edc2:	bb20      	cbnz	r0, ee0e <dlms_checkHdlcAddress+0xaa>
            if (ch == DLMS_COMMAND_SNRM)
    edc4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    edc8:	2b93      	cmp	r3, #147	; 0x93
    edca:	d120      	bne.n	ee0e <dlms_checkHdlcAddress+0xaa>
                settings->clientAddress = (uint16_t)source;
    edcc:	9b02      	ldr	r3, [sp, #8]
            settings->clientAddress = (uint16_t)source;
    edce:	85e3      	strh	r3, [r4, #46]	; 0x2e
    edd0:	e7e8      	b.n	eda4 <dlms_checkHdlcAddress+0x40>
        if (settings->clientAddress != target)
    edd2:	8de6      	ldrh	r6, [r4, #46]	; 0x2e
    edd4:	9902      	ldr	r1, [sp, #8]
    edd6:	4296      	cmp	r6, r2
    edd8:	d009      	beq.n	edee <dlms_checkHdlcAddress+0x8a>
            if (settings->clientAddress == source && settings->serverAddress == target)
    edda:	428e      	cmp	r6, r1
    eddc:	d104      	bne.n	ede8 <dlms_checkHdlcAddress+0x84>
    edde:	6b23      	ldr	r3, [r4, #48]	; 0x30
    ede0:	4293      	cmp	r3, r2
    ede2:	d101      	bne.n	ede8 <dlms_checkHdlcAddress+0x84>
                reply->position = index + 1;
    ede4:	1c7b      	adds	r3, r7, #1
    ede6:	812b      	strh	r3, [r5, #8]
            return DLMS_ERROR_CODE_FALSE;
    ede8:	f04f 30ff 	mov.w	r0, #4294967295
    edec:	e7da      	b.n	eda4 <dlms_checkHdlcAddress+0x40>
        if (settings->serverAddress != source &&
    edee:	6b23      	ldr	r3, [r4, #48]	; 0x30
    edf0:	428b      	cmp	r3, r1
    edf2:	d0d7      	beq.n	eda4 <dlms_checkHdlcAddress+0x40>
            (settings->serverAddress & 0x7F) != 0x7F && (settings->serverAddress & 0x3FFF) != 0x3FFF)
    edf4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        if (settings->serverAddress != source &&
    edf8:	2a7f      	cmp	r2, #127	; 0x7f
    edfa:	d0d3      	beq.n	eda4 <dlms_checkHdlcAddress+0x40>
            (settings->serverAddress & 0x7F) != 0x7F && (settings->serverAddress & 0x3FFF) != 0x3FFF)
    edfc:	f3c3 030d 	ubfx	r3, r3, #0, #14
    ee00:	f643 70ff 	movw	r0, #16383	; 0x3fff
    ee04:	1a18      	subs	r0, r3, r0
    ee06:	bf18      	it	ne
    ee08:	f04f 30ff 	movne.w	r0, #4294967295
    ee0c:	e7ca      	b.n	eda4 <dlms_checkHdlcAddress+0x40>
                return DLMS_ERROR_CODE_INVALID_CLIENT_ADDRESS;
    ee0e:	f240 1007 	movw	r0, #263	; 0x107
    ee12:	e7c7      	b.n	eda4 <dlms_checkHdlcAddress+0x40>

0000ee14 <dlms_getDataFromFrame>:
{
    ee14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if (data->packetLength < reply->position)
    ee18:	8d8c      	ldrh	r4, [r1, #44]	; 0x2c
    ee1a:	8903      	ldrh	r3, [r0, #8]
    uint16_t offset = data->data.size;
    ee1c:	f8b1 800a 	ldrh.w	r8, [r1, #10]
    if (data->packetLength < reply->position)
    ee20:	429c      	cmp	r4, r3
{
    ee22:	4605      	mov	r5, r0
    ee24:	460e      	mov	r6, r1
    ee26:	4617      	mov	r7, r2
    if (data->packetLength < reply->position)
    ee28:	d316      	bcc.n	ee58 <dlms_getDataFromFrame+0x44>
        cnt = data->packetLength - reply->position;
    ee2a:	1ae4      	subs	r4, r4, r3
    ee2c:	b2a4      	uxth	r4, r4
    if (cnt != 0)
    ee2e:	b19c      	cbz	r4, ee58 <dlms_getDataFromFrame+0x44>
        if ((ret = bb_capacity(&data->data, offset + cnt)) != 0 ||
    ee30:	f101 0904 	add.w	r9, r1, #4
    ee34:	eb08 0104 	add.w	r1, r8, r4
    ee38:	b289      	uxth	r1, r1
    ee3a:	4648      	mov	r0, r9
    ee3c:	f7fd fed8 	bl	cbf0 <bb_capacity>
    ee40:	b968      	cbnz	r0, ee5e <dlms_getDataFromFrame+0x4a>
            (ret = bb_set2(&data->data, reply, reply->position, cnt)) != 0)
    ee42:	892a      	ldrh	r2, [r5, #8]
    ee44:	4623      	mov	r3, r4
    ee46:	4629      	mov	r1, r5
    ee48:	4648      	mov	r0, r9
    ee4a:	f7fe f849 	bl	cee0 <bb_set2>
        if ((ret = bb_capacity(&data->data, offset + cnt)) != 0 ||
    ee4e:	b930      	cbnz	r0, ee5e <dlms_getDataFromFrame+0x4a>
        if (hdlc)
    ee50:	b117      	cbz	r7, ee58 <dlms_getDataFromFrame+0x44>
            reply->position += 3;
    ee52:	892b      	ldrh	r3, [r5, #8]
    ee54:	3303      	adds	r3, #3
    ee56:	812b      	strh	r3, [r5, #8]
    data->data.position = offset;
    ee58:	f8a6 800c 	strh.w	r8, [r6, #12]
    return 0;
    ee5c:	2000      	movs	r0, #0
}
    ee5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000ee62 <dlms_getHdlcData>:
{
    ee62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ee66:	b08d      	sub	sp, #52	; 0x34
    ee68:	461f      	mov	r7, r3
    ee6a:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
    ee6e:	9305      	str	r3, [sp, #20]
    ee70:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
    uint16_t packetStartID = (uint16_t)reply->position;
    ee74:	f8b2 b008 	ldrh.w	fp, [r2, #8]
{
    ee78:	9306      	str	r3, [sp, #24]
    if (reply->size - reply->position < 9)
    ee7a:	88d3      	ldrh	r3, [r2, #6]
{
    ee7c:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
    if (reply->size - reply->position < 9)
    ee80:	eba3 030b 	sub.w	r3, r3, fp
    ee84:	2b08      	cmp	r3, #8
{
    ee86:	4682      	mov	sl, r0
    ee88:	460e      	mov	r6, r1
    ee8a:	4615      	mov	r5, r2
    if (reply->size - reply->position < 9)
    ee8c:	dc03      	bgt.n	ee96 <dlms_getHdlcData+0x34>
        data->complete = 0;
    ee8e:	2000      	movs	r0, #0
    ee90:	7438      	strb	r0, [r7, #16]
        return 0;
    ee92:	4604      	mov	r4, r0
    ee94:	e086      	b.n	efa4 <dlms_getHdlcData+0x142>
    data->complete = 1;
    ee96:	2301      	movs	r3, #1
    ee98:	743b      	strb	r3, [r7, #16]
    for (pos = (uint16_t)reply->position; pos < reply->size; ++pos)
    ee9a:	f8b2 8008 	ldrh.w	r8, [r2, #8]
    ee9e:	88eb      	ldrh	r3, [r5, #6]
    eea0:	4543      	cmp	r3, r8
    eea2:	d820      	bhi.n	eee6 <dlms_getHdlcData+0x84>
    uint16_t packetStartID = (uint16_t)reply->position;
    eea4:	46d8      	mov	r8, fp
    if (reply->position == reply->size)
    eea6:	892a      	ldrh	r2, [r5, #8]
    eea8:	88eb      	ldrh	r3, [r5, #6]
    eeaa:	429a      	cmp	r2, r3
    eeac:	d0ef      	beq.n	ee8e <dlms_getHdlcData+0x2c>
    if ((ret = bb_getUInt8(reply, frame)) != 0)
    eeae:	4649      	mov	r1, r9
    eeb0:	4628      	mov	r0, r5
    eeb2:	f7fe f870 	bl	cf96 <bb_getUInt8>
    eeb6:	4604      	mov	r4, r0
    eeb8:	2800      	cmp	r0, #0
    eeba:	d173      	bne.n	efa4 <dlms_getHdlcData+0x142>
    if ((*frame & 0xF0) != 0xA0)
    eebc:	f899 3000 	ldrb.w	r3, [r9]
    eec0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
    eec4:	2aa0      	cmp	r2, #160	; 0xa0
    eec6:	d01f      	beq.n	ef08 <dlms_getHdlcData+0xa6>
        --reply->position;
    eec8:	892b      	ldrh	r3, [r5, #8]
    eeca:	3b01      	subs	r3, #1
        reply->position -= 2;
    eecc:	812b      	strh	r3, [r5, #8]
        return dlms_getHdlcData(server, settings, reply, data, frame, preEstablished, first);
    eece:	9b06      	ldr	r3, [sp, #24]
    eed0:	9302      	str	r3, [sp, #8]
    eed2:	9b05      	ldr	r3, [sp, #20]
    eed4:	462a      	mov	r2, r5
    eed6:	e9cd 9300 	strd	r9, r3, [sp]
    eeda:	4631      	mov	r1, r6
    eedc:	463b      	mov	r3, r7
    eede:	4650      	mov	r0, sl
    eee0:	f7ff ffbf 	bl	ee62 <dlms_getHdlcData>
    eee4:	e7d5      	b.n	ee92 <dlms_getHdlcData+0x30>
        if ((ret = bb_getUInt8(reply, &ch)) != 0)
    eee6:	f10d 012d 	add.w	r1, sp, #45	; 0x2d
    eeea:	4628      	mov	r0, r5
    eeec:	f7fe f853 	bl	cf96 <bb_getUInt8>
    eef0:	4604      	mov	r4, r0
    eef2:	2800      	cmp	r0, #0
    eef4:	d156      	bne.n	efa4 <dlms_getHdlcData+0x142>
        if (ch == HDLC_FRAME_START_END)
    eef6:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    eefa:	2b7e      	cmp	r3, #126	; 0x7e
    eefc:	d0d3      	beq.n	eea6 <dlms_getHdlcData+0x44>
    for (pos = (uint16_t)reply->position; pos < reply->size; ++pos)
    eefe:	f108 0801 	add.w	r8, r8, #1
    ef02:	fa1f f888 	uxth.w	r8, r8
    ef06:	e7ca      	b.n	ee9e <dlms_getHdlcData+0x3c>
    if ((*frame & 0x7) != 0)
    ef08:	f013 0b07 	ands.w	fp, r3, #7
        frameLen = ((*frame & 0x7) << 8);
    ef0c:	bf18      	it	ne
    ef0e:	021b      	lslne	r3, r3, #8
    if ((ret = bb_getUInt8(reply, &ch)) != 0)
    ef10:	f10d 012d 	add.w	r1, sp, #45	; 0x2d
    ef14:	4628      	mov	r0, r5
        frameLen = ((*frame & 0x7) << 8);
    ef16:	bf18      	it	ne
    ef18:	f403 6be0 	andne.w	fp, r3, #1792	; 0x700
    if ((ret = bb_getUInt8(reply, &ch)) != 0)
    ef1c:	f7fe f83b 	bl	cf96 <bb_getUInt8>
    ef20:	4604      	mov	r4, r0
    ef22:	2800      	cmp	r0, #0
    ef24:	d13e      	bne.n	efa4 <dlms_getHdlcData+0x142>
    frameLen += ch;
    ef26:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    if ((reply->size - reply->position + 1) < frameLen)
    ef2a:	892a      	ldrh	r2, [r5, #8]
    frameLen += ch;
    ef2c:	445b      	add	r3, fp
    ef2e:	9307      	str	r3, [sp, #28]
    if ((reply->size - reply->position + 1) < frameLen)
    ef30:	88eb      	ldrh	r3, [r5, #6]
    ef32:	3301      	adds	r3, #1
    ef34:	1a9b      	subs	r3, r3, r2
    ef36:	9a07      	ldr	r2, [sp, #28]
    ef38:	4293      	cmp	r3, r2
    ef3a:	da03      	bge.n	ef44 <dlms_getHdlcData+0xe2>
        data->complete = 0;
    ef3c:	7438      	strb	r0, [r7, #16]
                    reply->position = pos;
    ef3e:	f8a5 8008 	strh.w	r8, [r5, #8]
    ef42:	e02f      	b.n	efa4 <dlms_getHdlcData+0x142>
    eopPos = (uint16_t)(frameLen + packetStartID + 1);
    ef44:	9b07      	ldr	r3, [sp, #28]
    ef46:	4443      	add	r3, r8
    ef48:	b21b      	sxth	r3, r3
    ef4a:	f103 0b01 	add.w	fp, r3, #1
    ef4e:	fa1f fb8b 	uxth.w	fp, fp
    if ((ret = bb_getUInt8ByIndex(reply, eopPos, &ch)) != 0)
    ef52:	f10d 022d 	add.w	r2, sp, #45	; 0x2d
    ef56:	4659      	mov	r1, fp
    ef58:	4628      	mov	r0, r5
    eopPos = (uint16_t)(frameLen + packetStartID + 1);
    ef5a:	9308      	str	r3, [sp, #32]
    if ((ret = bb_getUInt8ByIndex(reply, eopPos, &ch)) != 0)
    ef5c:	f7fe f839 	bl	cfd2 <bb_getUInt8ByIndex>
    ef60:	4604      	mov	r4, r0
    ef62:	b9f8      	cbnz	r0, efa4 <dlms_getHdlcData+0x142>
    if (ch != HDLC_FRAME_START_END)
    ef64:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    ef68:	2b7e      	cmp	r3, #126	; 0x7e
    ef6a:	d002      	beq.n	ef72 <dlms_getHdlcData+0x110>
        reply->position -= 2;
    ef6c:	892b      	ldrh	r3, [r5, #8]
    ef6e:	3b02      	subs	r3, #2
    ef70:	e7ac      	b.n	eecc <dlms_getHdlcData+0x6a>
    ret = dlms_checkHdlcAddress(server, settings, reply, eopPos);
    ef72:	465b      	mov	r3, fp
    ef74:	462a      	mov	r2, r5
    ef76:	4631      	mov	r1, r6
    ef78:	4650      	mov	r0, sl
    ef7a:	f7ff fef3 	bl	ed64 <dlms_checkHdlcAddress>
    if (ret != 0)
    ef7e:	4604      	mov	r4, r0
    ef80:	b1d8      	cbz	r0, efba <dlms_getHdlcData+0x158>
        if (ret == DLMS_ERROR_CODE_INVALID_CLIENT_ADDRESS)
    ef82:	f240 1307 	movw	r3, #263	; 0x107
    ef86:	4298      	cmp	r0, r3
    ef88:	d00c      	beq.n	efa4 <dlms_getHdlcData+0x142>
            if (ret == DLMS_ERROR_CODE_INVALID_SERVER_ADDRESS &&
    ef8a:	f5b0 7f84 	cmp.w	r0, #264	; 0x108
    ef8e:	d10d      	bne.n	efac <dlms_getHdlcData+0x14a>
                reply->position + 4 == reply->size)
    ef90:	892b      	ldrh	r3, [r5, #8]
    ef92:	88ea      	ldrh	r2, [r5, #6]
    ef94:	3304      	adds	r3, #4
            if (ret == DLMS_ERROR_CODE_INVALID_SERVER_ADDRESS &&
    ef96:	4293      	cmp	r3, r2
    ef98:	d10a      	bne.n	efb0 <dlms_getHdlcData+0x14e>
                data->packetLength = 0;
    ef9a:	2300      	movs	r3, #0
    ef9c:	85bb      	strh	r3, [r7, #44]	; 0x2c
                bb_clear(reply);
    ef9e:	4628      	mov	r0, r5
    efa0:	f7fd ffe3 	bl	cf6a <bb_clear>
}
    efa4:	4620      	mov	r0, r4
    efa6:	b00d      	add	sp, #52	; 0x34
    efa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if (ret == DLMS_ERROR_CODE_FALSE)
    efac:	3401      	adds	r4, #1
    efae:	d08e      	beq.n	eece <dlms_getHdlcData+0x6c>
            reply->position = packetStartID + 1;
    efb0:	f108 0801 	add.w	r8, r8, #1
    efb4:	f8a5 8008 	strh.w	r8, [r5, #8]
            ret = dlms_getHdlcData(server, settings, reply, data, frame, preEstablished, first);
    efb8:	e789      	b.n	eece <dlms_getHdlcData+0x6c>
    if ((ret = bb_getUInt8(reply, frame)) != 0)
    efba:	4649      	mov	r1, r9
    efbc:	4628      	mov	r0, r5
    unsigned char moreData = (*frame & 0x8) != 0;
    efbe:	f899 b000 	ldrb.w	fp, [r9]
    if ((ret = bb_getUInt8(reply, frame)) != 0)
    efc2:	f7fd ffe8 	bl	cf96 <bb_getUInt8>
    efc6:	4604      	mov	r4, r0
    efc8:	2800      	cmp	r0, #0
    efca:	d1eb      	bne.n	efa4 <dlms_getHdlcData+0x142>
    if (moreData)
    efcc:	783b      	ldrb	r3, [r7, #0]
    efce:	f01b 0f08 	tst.w	fp, #8
        data->moreData |= DLMS_DATA_REQUEST_TYPES_FRAME;
    efd2:	bf14      	ite	ne
    efd4:	f043 0301 	orrne.w	r3, r3, #1
        data->moreData = ((DLMS_DATA_REQUEST_TYPES)(data->moreData & ~DLMS_DATA_REQUEST_TYPES_FRAME));
    efd8:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    efdc:	703b      	strb	r3, [r7, #0]
    if (!preEstablished && !checkFrame(settings, *frame))
    efde:	9b05      	ldr	r3, [sp, #20]
    efe0:	b983      	cbnz	r3, f004 <dlms_getHdlcData+0x1a2>
    efe2:	f899 1000 	ldrb.w	r1, [r9]
    efe6:	4630      	mov	r0, r6
    efe8:	f001 f928 	bl	1023c <checkFrame>
    efec:	b950      	cbnz	r0, f004 <dlms_getHdlcData+0x1a2>
        reply->position = eopPos + 1;
    efee:	9b08      	ldr	r3, [sp, #32]
    eff0:	3302      	adds	r3, #2
    eff2:	812b      	strh	r3, [r5, #8]
        if (settings->server)
    eff4:	f896 3058 	ldrb.w	r3, [r6, #88]	; 0x58
    eff8:	2b00      	cmp	r3, #0
    effa:	f43f af68 	beq.w	eece <dlms_getHdlcData+0x6c>
            return DLMS_ERROR_CODE_INVALID_FRAME_NUMBER;
    effe:	f240 1419 	movw	r4, #281	; 0x119
    f002:	e7cf      	b.n	efa4 <dlms_getHdlcData+0x142>
        reply->position - packetStartID - 1);
    f004:	892a      	ldrh	r2, [r5, #8]
    crc = countCRC(reply, packetStartID + 1,
    f006:	f108 0b01 	add.w	fp, r8, #1
        reply->position - packetStartID - 1);
    f00a:	3a01      	subs	r2, #1
    crc = countCRC(reply, packetStartID + 1,
    f00c:	eba2 0208 	sub.w	r2, r2, r8
    f010:	4659      	mov	r1, fp
    f012:	4628      	mov	r0, r5
    f014:	f7f3 fb5c 	bl	26d0 <countCRC.isra.0>
    if ((ret = bb_getUInt16(reply, &crcRead)) != 0)
    f018:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
    crc = countCRC(reply, packetStartID + 1,
    f01c:	9009      	str	r0, [sp, #36]	; 0x24
    if ((ret = bb_getUInt16(reply, &crcRead)) != 0)
    f01e:	4628      	mov	r0, r5
    f020:	f7fd ffe2 	bl	cfe8 <bb_getUInt16>
    f024:	4604      	mov	r4, r0
    f026:	2800      	cmp	r0, #0
    f028:	d1bc      	bne.n	efa4 <dlms_getHdlcData+0x142>
    if (crc != crcRead)
    f02a:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
    f02e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    f030:	8929      	ldrh	r1, [r5, #8]
    f032:	4293      	cmp	r3, r2
    f034:	d007      	beq.n	f046 <dlms_getHdlcData+0x1e4>
        if (reply->size - reply->position > 8)
    f036:	88eb      	ldrh	r3, [r5, #6]
    f038:	1a5b      	subs	r3, r3, r1
    f03a:	2b08      	cmp	r3, #8
    f03c:	f73f af47 	bgt.w	eece <dlms_getHdlcData+0x6c>
        return DLMS_ERROR_CODE_WRONG_CRC;
    f040:	f240 140d 	movw	r4, #269	; 0x10d
    f044:	e7ae      	b.n	efa4 <dlms_getHdlcData+0x142>
    if (reply->position != packetStartID + frameLen + 1)
    f046:	9b07      	ldr	r3, [sp, #28]
    f048:	4498      	add	r8, r3
    f04a:	f108 0301 	add.w	r3, r8, #1
    f04e:	428b      	cmp	r3, r1
    f050:	d033      	beq.n	f0ba <dlms_getHdlcData+0x258>
    f052:	9309      	str	r3, [sp, #36]	; 0x24
        crc = countCRC(reply, packetStartID + 1, frameLen - 2);
    f054:	9b07      	ldr	r3, [sp, #28]
    f056:	4659      	mov	r1, fp
    f058:	1e9a      	subs	r2, r3, #2
    f05a:	4628      	mov	r0, r5
    f05c:	f7f3 fb38 	bl	26d0 <countCRC.isra.0>
        if ((ret = bb_getUInt16ByIndex(reply, packetStartID + frameLen - 1, &crcRead)) != 0)
    f060:	f10d 022e 	add.w	r2, sp, #46	; 0x2e
        crc = countCRC(reply, packetStartID + 1, frameLen - 2);
    f064:	4683      	mov	fp, r0
        if ((ret = bb_getUInt16ByIndex(reply, packetStartID + frameLen - 1, &crcRead)) != 0)
    f066:	f108 31ff 	add.w	r1, r8, #4294967295
    f06a:	4628      	mov	r0, r5
    f06c:	f7fe f8c2 	bl	d1f4 <bb_getUInt16ByIndex>
    f070:	2800      	cmp	r0, #0
    f072:	f47f af0e 	bne.w	ee92 <dlms_getHdlcData+0x30>
        if (crc != crcRead)
    f076:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
    f07a:	455a      	cmp	r2, fp
    f07c:	d1e0      	bne.n	f040 <dlms_getHdlcData+0x1de>
        data->packetLength = eopPos - 2;
    f07e:	9b08      	ldr	r3, [sp, #32]
    f080:	1e5a      	subs	r2, r3, #1
    f082:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f084:	85ba      	strh	r2, [r7, #44]	; 0x2c
    if (*frame != 0x13 && *frame != 0x3 && (*frame & HDLC_FRAME_TYPE_U_FRAME) == HDLC_FRAME_TYPE_U_FRAME)
    f086:	f899 2000 	ldrb.w	r2, [r9]
    f08a:	f002 01ef 	and.w	r1, r2, #239	; 0xef
    f08e:	2903      	cmp	r1, #3
    f090:	d066      	beq.n	f160 <dlms_getHdlcData+0x2fe>
    f092:	f002 0103 	and.w	r1, r2, #3
    f096:	2903      	cmp	r1, #3
    f098:	d11f      	bne.n	f0da <dlms_getHdlcData+0x278>
        if (reply->position == packetStartID + frameLen + 1)
    f09a:	892a      	ldrh	r2, [r5, #8]
    f09c:	4293      	cmp	r3, r2
    f09e:	d014      	beq.n	f0ca <dlms_getHdlcData+0x268>
        data->command = (DLMS_COMMAND)*frame;
    f0a0:	f899 3000 	ldrb.w	r3, [r9]
    f0a4:	707b      	strb	r3, [r7, #1]
        switch (data->command)
    f0a6:	2b73      	cmp	r3, #115	; 0x73
    f0a8:	d029      	beq.n	f0fe <dlms_getHdlcData+0x29c>
    f0aa:	d80a      	bhi.n	f0c2 <dlms_getHdlcData+0x260>
    f0ac:	2b1f      	cmp	r3, #31
    f0ae:	d026      	beq.n	f0fe <dlms_getHdlcData+0x29c>
    f0b0:	2b53      	cmp	r3, #83	; 0x53
    f0b2:	d024      	beq.n	f0fe <dlms_getHdlcData+0x29c>
            return DLMS_ERROR_CODE_REJECTED;
    f0b4:	f06f 0401 	mvn.w	r4, #1
    f0b8:	e774      	b.n	efa4 <dlms_getHdlcData+0x142>
        data->packetLength = eopPos - 2;
    f0ba:	9a08      	ldr	r2, [sp, #32]
    f0bc:	3a01      	subs	r2, #1
    f0be:	85ba      	strh	r2, [r7, #44]	; 0x2c
    f0c0:	e7e1      	b.n	f086 <dlms_getHdlcData+0x224>
        switch (data->command)
    f0c2:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    f0c6:	2b93      	cmp	r3, #147	; 0x93
    f0c8:	e7f3      	b.n	f0b2 <dlms_getHdlcData+0x250>
            if ((ret = bb_getUInt8(reply, &ch)) != 0)
    f0ca:	f10d 012d 	add.w	r1, sp, #45	; 0x2d
    f0ce:	4628      	mov	r0, r5
    f0d0:	f7fd ff61 	bl	cf96 <bb_getUInt8>
    f0d4:	2800      	cmp	r0, #0
    f0d6:	d0e3      	beq.n	f0a0 <dlms_getHdlcData+0x23e>
    f0d8:	e6db      	b.n	ee92 <dlms_getHdlcData+0x30>
    else if (*frame != 0x13 && *frame != 0x3 && (*frame & HDLC_FRAME_TYPE_S_FRAME) == HDLC_FRAME_TYPE_S_FRAME)
    f0da:	07d1      	lsls	r1, r2, #31
    f0dc:	d540      	bpl.n	f160 <dlms_getHdlcData+0x2fe>
        else if (tmp == HDLC_CONTROL_FRAME_RECEIVE_NOT_READY)
    f0de:	f3c2 0281 	ubfx	r2, r2, #2, #2
    f0e2:	3a01      	subs	r2, #1
    f0e4:	2a01      	cmp	r2, #1
    f0e6:	d9e5      	bls.n	f0b4 <dlms_getHdlcData+0x252>
        if (reply->position == packetStartID + frameLen + 1)
    f0e8:	892a      	ldrh	r2, [r5, #8]
    f0ea:	4293      	cmp	r3, r2
    f0ec:	d107      	bne.n	f0fe <dlms_getHdlcData+0x29c>
            if ((ret = bb_getUInt8(reply, &ch)) != 0)
    f0ee:	f10d 012d 	add.w	r1, sp, #45	; 0x2d
    f0f2:	4628      	mov	r0, r5
    f0f4:	f7fd ff4f 	bl	cf96 <bb_getUInt8>
    f0f8:	2800      	cmp	r0, #0
    f0fa:	f47f aeca 	bne.w	ee92 <dlms_getHdlcData+0x30>
    if (settings->server && (first || data->command == DLMS_COMMAND_SNRM))
    f0fe:	f896 3058 	ldrb.w	r3, [r6, #88]	; 0x58
    f102:	2b00      	cmp	r3, #0
    f104:	f43f af4e 	beq.w	efa4 <dlms_getHdlcData+0x142>
    f108:	9b06      	ldr	r3, [sp, #24]
    f10a:	b91b      	cbnz	r3, f114 <dlms_getHdlcData+0x2b2>
    f10c:	787b      	ldrb	r3, [r7, #1]
    f10e:	2b93      	cmp	r3, #147	; 0x93
    f110:	f47f af48 	bne.w	efa4 <dlms_getHdlcData+0x142>
        if (!svr_isTarget(settings, settings->serverAddress, settings->clientAddress))
    f114:	8df2      	ldrh	r2, [r6, #46]	; 0x2e
    f116:	6b31      	ldr	r1, [r6, #48]	; 0x30
    f118:	4630      	mov	r0, r6
    f11a:	f7fd fc5a 	bl	c9d2 <svr_isTarget>
    f11e:	2800      	cmp	r0, #0
    f120:	f47f af40 	bne.w	efa4 <dlms_getHdlcData+0x142>
            if (reply->size - reply->position > 8)
    f124:	f8b5 8008 	ldrh.w	r8, [r5, #8]
    f128:	88eb      	ldrh	r3, [r5, #6]
            settings->serverAddress = 0;
    f12a:	6330      	str	r0, [r6, #48]	; 0x30
            if (reply->size - reply->position > 8)
    f12c:	eba3 0308 	sub.w	r3, r3, r8
    f130:	2b08      	cmp	r3, #8
            settings->clientAddress = 0;
    f132:	85f0      	strh	r0, [r6, #46]	; 0x2e
            if (reply->size - reply->position > 8)
    f134:	dd2b      	ble.n	f18e <dlms_getHdlcData+0x32c>
                ret = dlms_getHdlcData(server, settings, reply, data, frame, preEstablished, first);
    f136:	9b06      	ldr	r3, [sp, #24]
    f138:	9302      	str	r3, [sp, #8]
    f13a:	9b05      	ldr	r3, [sp, #20]
    f13c:	462a      	mov	r2, r5
    f13e:	e9cd 9300 	strd	r9, r3, [sp]
    f142:	4631      	mov	r1, r6
    f144:	463b      	mov	r3, r7
    f146:	4650      	mov	r0, sl
    f148:	f7ff fe8b 	bl	ee62 <dlms_getHdlcData>
                if (settings->serverAddress != 0 && settings->clientAddress != 0)
    f14c:	6b33      	ldr	r3, [r6, #48]	; 0x30
                ret = dlms_getHdlcData(server, settings, reply, data, frame, preEstablished, first);
    f14e:	4604      	mov	r4, r0
                if (settings->serverAddress != 0 && settings->clientAddress != 0)
    f150:	2b00      	cmp	r3, #0
    f152:	f43f af27 	beq.w	efa4 <dlms_getHdlcData+0x142>
    f156:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
    f158:	2b00      	cmp	r3, #0
    f15a:	f43f af23 	beq.w	efa4 <dlms_getHdlcData+0x142>
    f15e:	e6ee      	b.n	ef3e <dlms_getHdlcData+0xdc>
        if (reply->position == packetStartID + frameLen + 1)
    f160:	892a      	ldrh	r2, [r5, #8]
    f162:	4293      	cmp	r3, r2
    f164:	d10e      	bne.n	f184 <dlms_getHdlcData+0x322>
            if ((ret = bb_getUInt8(reply, &ch)) != 0)
    f166:	f10d 012d 	add.w	r1, sp, #45	; 0x2d
    f16a:	4628      	mov	r0, r5
    f16c:	f7fd ff13 	bl	cf96 <bb_getUInt8>
    f170:	2800      	cmp	r0, #0
    f172:	f47f ae8e 	bne.w	ee92 <dlms_getHdlcData+0x30>
            if ((*frame & 0x1) == 0x1)
    f176:	f899 3000 	ldrb.w	r3, [r9]
    f17a:	07db      	lsls	r3, r3, #31
    f17c:	d5bf      	bpl.n	f0fe <dlms_getHdlcData+0x29c>
                data->moreData = DLMS_DATA_REQUEST_TYPES_FRAME;
    f17e:	2301      	movs	r3, #1
    f180:	703b      	strb	r3, [r7, #0]
    f182:	e7bc      	b.n	f0fe <dlms_getHdlcData+0x29c>
            dlms_checkLLCBytes(settings, reply);
    f184:	4629      	mov	r1, r5
    f186:	4630      	mov	r0, r6
    f188:	f7f3 fbbe 	bl	2908 <dlms_checkLLCBytes>
    f18c:	e7b7      	b.n	f0fe <dlms_getHdlcData+0x29c>
            return DLMS_ERROR_CODE_INVALID_CLIENT_ADDRESS;
    f18e:	f240 1407 	movw	r4, #263	; 0x107
    f192:	e707      	b.n	efa4 <dlms_getHdlcData+0x142>

0000f194 <dlms_checkWrapperAddress>:
{
    f194:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (settings->server)
    f196:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
{
    f19a:	460d      	mov	r5, r1
    f19c:	4604      	mov	r4, r0
        if ((ret = bb_getUInt16(buff, &value)) != 0)
    f19e:	f10d 0106 	add.w	r1, sp, #6
    f1a2:	4628      	mov	r0, r5
    if (settings->server)
    f1a4:	b1c3      	cbz	r3, f1d8 <dlms_checkWrapperAddress+0x44>
        if ((ret = bb_getUInt16(buff, &value)) != 0)
    f1a6:	f7fd ff1f 	bl	cfe8 <bb_getUInt16>
    f1aa:	b998      	cbnz	r0, f1d4 <dlms_checkWrapperAddress+0x40>
        if (settings->clientAddress != 0 && settings->clientAddress != value)
    f1ac:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
    f1ae:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    f1b2:	b10a      	cbz	r2, f1b8 <dlms_checkWrapperAddress+0x24>
    f1b4:	429a      	cmp	r2, r3
    f1b6:	d12c      	bne.n	f212 <dlms_checkWrapperAddress+0x7e>
            settings->clientAddress = value;
    f1b8:	85e3      	strh	r3, [r4, #46]	; 0x2e
        if ((ret = bb_getUInt16(buff, &value)) != 0)
    f1ba:	f10d 0106 	add.w	r1, sp, #6
    f1be:	4628      	mov	r0, r5
    f1c0:	f7fd ff12 	bl	cfe8 <bb_getUInt16>
    f1c4:	b930      	cbnz	r0, f1d4 <dlms_checkWrapperAddress+0x40>
        if (settings->serverAddress != 0 && settings->serverAddress != value)
    f1c6:	6b22      	ldr	r2, [r4, #48]	; 0x30
    f1c8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    f1cc:	b10a      	cbz	r2, f1d2 <dlms_checkWrapperAddress+0x3e>
    f1ce:	429a      	cmp	r2, r3
    f1d0:	d11c      	bne.n	f20c <dlms_checkWrapperAddress+0x78>
            settings->serverAddress = value;
    f1d2:	6323      	str	r3, [r4, #48]	; 0x30
}
    f1d4:	b003      	add	sp, #12
    f1d6:	bd30      	pop	{r4, r5, pc}
        if ((ret = bb_getUInt16(buff, &value)) != 0)
    f1d8:	f7fd ff06 	bl	cfe8 <bb_getUInt16>
    f1dc:	2800      	cmp	r0, #0
    f1de:	d1f9      	bne.n	f1d4 <dlms_checkWrapperAddress+0x40>
        if (settings->serverAddress != 0 && settings->serverAddress != value)
    f1e0:	6b22      	ldr	r2, [r4, #48]	; 0x30
    f1e2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    f1e6:	b10a      	cbz	r2, f1ec <dlms_checkWrapperAddress+0x58>
    f1e8:	429a      	cmp	r2, r3
    f1ea:	d10f      	bne.n	f20c <dlms_checkWrapperAddress+0x78>
            settings->serverAddress = value;
    f1ec:	6323      	str	r3, [r4, #48]	; 0x30
        if ((ret = bb_getUInt16(buff, &value)) != 0)
    f1ee:	f10d 0106 	add.w	r1, sp, #6
    f1f2:	4628      	mov	r0, r5
    f1f4:	f7fd fef8 	bl	cfe8 <bb_getUInt16>
    f1f8:	2800      	cmp	r0, #0
    f1fa:	d1eb      	bne.n	f1d4 <dlms_checkWrapperAddress+0x40>
        if (settings->clientAddress != 0 && settings->clientAddress != value)
    f1fc:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
    f1fe:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    f202:	b10a      	cbz	r2, f208 <dlms_checkWrapperAddress+0x74>
    f204:	429a      	cmp	r2, r3
    f206:	d104      	bne.n	f212 <dlms_checkWrapperAddress+0x7e>
            settings->clientAddress = value;
    f208:	85e3      	strh	r3, [r4, #46]	; 0x2e
    f20a:	e7e3      	b.n	f1d4 <dlms_checkWrapperAddress+0x40>
            return DLMS_ERROR_CODE_INVALID_SERVER_ADDRESS;
    f20c:	f44f 7084 	mov.w	r0, #264	; 0x108
    f210:	e7e0      	b.n	f1d4 <dlms_checkWrapperAddress+0x40>
            return DLMS_ERROR_CODE_INVALID_CLIENT_ADDRESS;
    f212:	f240 1007 	movw	r0, #263	; 0x107
    f216:	e7dd      	b.n	f1d4 <dlms_checkWrapperAddress+0x40>

0000f218 <dlms_getTcpData>:
{
    f218:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if (buff->size - buff->position < 8)
    f21a:	88cb      	ldrh	r3, [r1, #6]
    f21c:	890e      	ldrh	r6, [r1, #8]
    f21e:	1b9b      	subs	r3, r3, r6
{
    f220:	4607      	mov	r7, r0
    if (buff->size - buff->position < 8)
    f222:	2b07      	cmp	r3, #7
    f224:	f04f 0000 	mov.w	r0, #0
{
    f228:	460c      	mov	r4, r1
    f22a:	4615      	mov	r5, r2
        data->complete = 0;
    f22c:	7410      	strb	r0, [r2, #16]
    if (buff->size - buff->position < 8)
    f22e:	dc2c      	bgt.n	f28a <dlms_getTcpData+0x72>
}
    f230:	b003      	add	sp, #12
    f232:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((ret = bb_getUInt16(buff, &value)) != 0)
    f234:	f10d 0106 	add.w	r1, sp, #6
    f238:	4620      	mov	r0, r4
    f23a:	f7fd fed5 	bl	cfe8 <bb_getUInt16>
    f23e:	2800      	cmp	r0, #0
    f240:	d1f6      	bne.n	f230 <dlms_getTcpData+0x18>
        if (value == 1)
    f242:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    f246:	2b01      	cmp	r3, #1
    f248:	d11c      	bne.n	f284 <dlms_getTcpData+0x6c>
            if ((ret = dlms_checkWrapperAddress(settings, buff)) != 0)
    f24a:	4621      	mov	r1, r4
    f24c:	4638      	mov	r0, r7
    f24e:	f7ff ffa1 	bl	f194 <dlms_checkWrapperAddress>
    f252:	2800      	cmp	r0, #0
    f254:	d1ec      	bne.n	f230 <dlms_getTcpData+0x18>
            if ((ret = bb_getUInt16(buff, &value)) != 0)
    f256:	f10d 0106 	add.w	r1, sp, #6
    f25a:	4620      	mov	r0, r4
    f25c:	f7fd fec4 	bl	cfe8 <bb_getUInt16>
    f260:	2800      	cmp	r0, #0
    f262:	d1e5      	bne.n	f230 <dlms_getTcpData+0x18>
            data->complete = !((buff->size - buff->position) < value);
    f264:	8923      	ldrh	r3, [r4, #8]
    f266:	88e2      	ldrh	r2, [r4, #6]
    f268:	1ad2      	subs	r2, r2, r3
    f26a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    f26e:	429a      	cmp	r2, r3
    f270:	bfac      	ite	ge
    f272:	2201      	movge	r2, #1
    f274:	2200      	movlt	r2, #0
    f276:	742a      	strb	r2, [r5, #16]
                data->packetLength = buff->position + value;
    f278:	bfa9      	itett	ge
    f27a:	8922      	ldrhge	r2, [r4, #8]
                buff->position = pos;
    f27c:	8126      	strhlt	r6, [r4, #8]
                data->packetLength = buff->position + value;
    f27e:	189b      	addge	r3, r3, r2
    f280:	85ab      	strhge	r3, [r5, #44]	; 0x2c
    f282:	e7d5      	b.n	f230 <dlms_getTcpData+0x18>
            --buff->position;
    f284:	8923      	ldrh	r3, [r4, #8]
    f286:	3b01      	subs	r3, #1
    f288:	8123      	strh	r3, [r4, #8]
    while (buff->position != buff->size)
    f28a:	8922      	ldrh	r2, [r4, #8]
    f28c:	88e3      	ldrh	r3, [r4, #6]
    f28e:	429a      	cmp	r2, r3
    f290:	d1d0      	bne.n	f234 <dlms_getTcpData+0x1c>
    return DLMS_ERROR_CODE_OK;
    f292:	2000      	movs	r0, #0
    f294:	e7cc      	b.n	f230 <dlms_getTcpData+0x18>

0000f296 <dlms_getMBusData>:
{
    f296:	b5f0      	push	{r4, r5, r6, r7, lr}
    f298:	460d      	mov	r5, r1
    f29a:	b085      	sub	sp, #20
    f29c:	4604      	mov	r4, r0
    if ((ret = bb_getUInt8(buff, &len)) != 0)
    f29e:	f10d 0103 	add.w	r1, sp, #3
    f2a2:	4628      	mov	r0, r5
{
    f2a4:	4616      	mov	r6, r2
    if ((ret = bb_getUInt8(buff, &len)) != 0)
    f2a6:	f7fd fe76 	bl	cf96 <bb_getUInt8>
    f2aa:	b950      	cbnz	r0, f2c2 <dlms_getMBusData+0x2c>
    if (buff->size < (unsigned char)(len - 1))
    f2ac:	f89d 2003 	ldrb.w	r2, [sp, #3]
    f2b0:	88e9      	ldrh	r1, [r5, #6]
    f2b2:	1e53      	subs	r3, r2, #1
    f2b4:	b2df      	uxtb	r7, r3
    f2b6:	428f      	cmp	r7, r1
    f2b8:	d905      	bls.n	f2c6 <dlms_getMBusData+0x30>
        data->complete = 0;
    f2ba:	7430      	strb	r0, [r6, #16]
        buff->position = buff->position - 1;
    f2bc:	892b      	ldrh	r3, [r5, #8]
    f2be:	3b01      	subs	r3, #1
    f2c0:	812b      	strh	r3, [r5, #8]
}
    f2c2:	b005      	add	sp, #20
    f2c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (buff->size < len)
    f2c6:	4291      	cmp	r1, r2
            --len;
    f2c8:	bf38      	it	cc
    f2ca:	f88d 3003 	strbcc.w	r3, [sp, #3]
        data->packetLength = len;
    f2ce:	f89d 3003 	ldrb.w	r3, [sp, #3]
    f2d2:	85b3      	strh	r3, [r6, #44]	; 0x2c
        data->complete = 1;
    f2d4:	2301      	movs	r3, #1
    f2d6:	7433      	strb	r3, [r6, #16]
        if ((ret = bb_getUInt8(buff, &ch)) != 0)
    f2d8:	a901      	add	r1, sp, #4
    f2da:	4628      	mov	r0, r5
    f2dc:	f7fd fe5b 	bl	cf96 <bb_getUInt8>
    f2e0:	2800      	cmp	r0, #0
    f2e2:	d1ee      	bne.n	f2c2 <dlms_getMBusData+0x2c>
        if ((ret = bb_getUInt16(buff, &manufacturerID)) != 0)
    f2e4:	a902      	add	r1, sp, #8
    f2e6:	4628      	mov	r0, r5
    f2e8:	f7fd fe7e 	bl	cfe8 <bb_getUInt16>
    f2ec:	2800      	cmp	r0, #0
    f2ee:	d1e8      	bne.n	f2c2 <dlms_getMBusData+0x2c>
        if ((ret = bb_getUInt32(buff, &id)) != 0)
    f2f0:	a903      	add	r1, sp, #12
    f2f2:	4628      	mov	r0, r5
    f2f4:	f7fd fe8d 	bl	d012 <bb_getUInt32>
    f2f8:	2800      	cmp	r0, #0
    f2fa:	d1e2      	bne.n	f2c2 <dlms_getMBusData+0x2c>
        if ((ret = bb_getUInt8(buff, &meterVersion)) != 0 ||
    f2fc:	f10d 0105 	add.w	r1, sp, #5
    f300:	4628      	mov	r0, r5
    f302:	f7fd fe48 	bl	cf96 <bb_getUInt8>
    f306:	2800      	cmp	r0, #0
    f308:	d1db      	bne.n	f2c2 <dlms_getMBusData+0x2c>
            (ret = bb_getUInt8(buff, &ch)) != 0)
    f30a:	a901      	add	r1, sp, #4
    f30c:	4628      	mov	r0, r5
    f30e:	f7fd fe42 	bl	cf96 <bb_getUInt8>
        if ((ret = bb_getUInt8(buff, &meterVersion)) != 0 ||
    f312:	2800      	cmp	r0, #0
    f314:	d1d5      	bne.n	f2c2 <dlms_getMBusData+0x2c>
        if ((ret = bb_getUInt8(buff, &ch)) != 0)
    f316:	a901      	add	r1, sp, #4
    f318:	4628      	mov	r0, r5
    f31a:	f7fd fe3c 	bl	cf96 <bb_getUInt8>
    f31e:	2800      	cmp	r0, #0
    f320:	d1cf      	bne.n	f2c2 <dlms_getMBusData+0x2c>
        if ((ret = bb_getUInt8(buff, &frameId)) != 0)
    f322:	f10d 0106 	add.w	r1, sp, #6
    f326:	4628      	mov	r0, r5
    f328:	f7fd fe35 	bl	cf96 <bb_getUInt8>
    f32c:	2800      	cmp	r0, #0
    f32e:	d1c8      	bne.n	f2c2 <dlms_getMBusData+0x2c>
        if ((ret = bb_getUInt8(buff, &state)) != 0)
    f330:	f10d 0107 	add.w	r1, sp, #7
    f334:	4628      	mov	r0, r5
    f336:	f7fd fe2e 	bl	cf96 <bb_getUInt8>
    f33a:	2800      	cmp	r0, #0
    f33c:	d1c1      	bne.n	f2c2 <dlms_getMBusData+0x2c>
        if ((ret = bb_getUInt16(buff, &configurationWord)) != 0)
    f33e:	f10d 010a 	add.w	r1, sp, #10
    f342:	4628      	mov	r0, r5
    f344:	f7fd fe50 	bl	cfe8 <bb_getUInt16>
    f348:	2800      	cmp	r0, #0
    f34a:	d1ba      	bne.n	f2c2 <dlms_getMBusData+0x2c>
        if ((ret = bb_getUInt8(buff, &ch)) != 0)
    f34c:	a901      	add	r1, sp, #4
    f34e:	4628      	mov	r0, r5
    f350:	f7fd fe21 	bl	cf96 <bb_getUInt8>
    f354:	2800      	cmp	r0, #0
    f356:	d1b4      	bne.n	f2c2 <dlms_getMBusData+0x2c>
        settings->clientAddress = ch;
    f358:	f89d 3004 	ldrb.w	r3, [sp, #4]
    f35c:	85e3      	strh	r3, [r4, #46]	; 0x2e
        if ((ret = bb_getUInt8(buff, &ch)) != 0)
    f35e:	a901      	add	r1, sp, #4
    f360:	4628      	mov	r0, r5
    f362:	f7fd fe18 	bl	cf96 <bb_getUInt8>
    f366:	2800      	cmp	r0, #0
    f368:	d1ab      	bne.n	f2c2 <dlms_getMBusData+0x2c>
        settings->serverAddress = ch;
    f36a:	f89d 3004 	ldrb.w	r3, [sp, #4]
    f36e:	6323      	str	r3, [r4, #48]	; 0x30
    f370:	e7a7      	b.n	f2c2 <dlms_getMBusData+0x2c>

0000f372 <dlms_getPlcData>:
{
    f372:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f376:	4680      	mov	r8, r0
    f378:	b085      	sub	sp, #20
    if (bb_available(buff) < 9)
    f37a:	4608      	mov	r0, r1
{
    f37c:	460d      	mov	r5, r1
    f37e:	4616      	mov	r6, r2
    if (bb_available(buff) < 9)
    f380:	f7fd fc23 	bl	cbca <bb_available>
    f384:	2808      	cmp	r0, #8
    f386:	d803      	bhi.n	f390 <dlms_getPlcData+0x1e>
        data->complete = 0;
    f388:	2000      	movs	r0, #0
    f38a:	7430      	strb	r0, [r6, #16]
                return ret;
    f38c:	4604      	mov	r4, r0
    f38e:	e030      	b.n	f3f2 <dlms_getPlcData+0x80>
    int packetStartID = buff->position;
    f390:	f8b5 9008 	ldrh.w	r9, [r5, #8]
    for (pos = (unsigned short)buff->position; pos < buff->size; ++pos)
    f394:	464f      	mov	r7, r9
    f396:	88eb      	ldrh	r3, [r5, #6]
    f398:	42bb      	cmp	r3, r7
    f39a:	d808      	bhi.n	f3ae <dlms_getPlcData+0x3c>
    int packetStartID = buff->position;
    f39c:	464f      	mov	r7, r9
    if (buff->position == buff->size)
    f39e:	892a      	ldrh	r2, [r5, #8]
    f3a0:	88eb      	ldrh	r3, [r5, #6]
    f3a2:	429a      	cmp	r2, r3
    f3a4:	d111      	bne.n	f3ca <dlms_getPlcData+0x58>
        data->complete = 0;
    f3a6:	2000      	movs	r0, #0
    f3a8:	7430      	strb	r0, [r6, #16]
        buff->position = packetStartID;
    f3aa:	812f      	strh	r7, [r5, #8]
        return 0;
    f3ac:	e7ee      	b.n	f38c <dlms_getPlcData+0x1a>
        if ((ret = bb_getUInt8(buff, &stx)) != 0)
    f3ae:	f10d 0103 	add.w	r1, sp, #3
    f3b2:	4628      	mov	r0, r5
    f3b4:	f7fd fdef 	bl	cf96 <bb_getUInt8>
    f3b8:	4604      	mov	r4, r0
    f3ba:	b9d0      	cbnz	r0, f3f2 <dlms_getPlcData+0x80>
        if (stx == 2)
    f3bc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    f3c0:	2b02      	cmp	r3, #2
    f3c2:	d0ec      	beq.n	f39e <dlms_getPlcData+0x2c>
    for (pos = (unsigned short)buff->position; pos < buff->size; ++pos)
    f3c4:	1c7b      	adds	r3, r7, #1
    f3c6:	b29f      	uxth	r7, r3
    f3c8:	e7e5      	b.n	f396 <dlms_getPlcData+0x24>
    if ((ret = bb_getUInt8(buff, &len)) != 0)
    f3ca:	f10d 0105 	add.w	r1, sp, #5
    f3ce:	4628      	mov	r0, r5
    f3d0:	f7fd fde1 	bl	cf96 <bb_getUInt8>
    f3d4:	4604      	mov	r4, r0
    f3d6:	b960      	cbnz	r0, f3f2 <dlms_getPlcData+0x80>
    if (bb_available(buff) < len)
    f3d8:	4628      	mov	r0, r5
    int index = buff->position;
    f3da:	f8b5 9008 	ldrh.w	r9, [r5, #8]
    if (bb_available(buff) < len)
    f3de:	f7fd fbf4 	bl	cbca <bb_available>
    f3e2:	f89d 3005 	ldrb.w	r3, [sp, #5]
    f3e6:	4283      	cmp	r3, r0
    f3e8:	d907      	bls.n	f3fa <dlms_getPlcData+0x88>
        data->complete = 0;
    f3ea:	7434      	strb	r4, [r6, #16]
        buff->position = buff->position - 2;
    f3ec:	892b      	ldrh	r3, [r5, #8]
    f3ee:	3b02      	subs	r3, #2
            buff->position = buff->position - index - 6;
    f3f0:	812b      	strh	r3, [r5, #8]
}
    f3f2:	4620      	mov	r0, r4
    f3f4:	b005      	add	sp, #20
    f3f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if ((ret = bb_getUInt8(buff, &ch)) != 0)
    f3fa:	a901      	add	r1, sp, #4
    f3fc:	4628      	mov	r0, r5
    f3fe:	f7fd fdca 	bl	cf96 <bb_getUInt8>
    f402:	4604      	mov	r4, r0
    f404:	2800      	cmp	r0, #0
    f406:	d1f4      	bne.n	f3f2 <dlms_getPlcData+0x80>
        if ((ret = bb_getUInt8(buff, &credit)) != 0)
    f408:	f10d 0106 	add.w	r1, sp, #6
    f40c:	4628      	mov	r0, r5
    f40e:	f7fd fdc2 	bl	cf96 <bb_getUInt8>
    f412:	4604      	mov	r4, r0
    f414:	2800      	cmp	r0, #0
    f416:	d1ec      	bne.n	f3f2 <dlms_getPlcData+0x80>
        if ((ret = bb_getUInt24(buff, &mac)) != 0)
    f418:	a903      	add	r1, sp, #12
    f41a:	4628      	mov	r0, r5
    f41c:	f7fd fe3e 	bl	d09c <bb_getUInt24>
    f420:	4604      	mov	r4, r0
    f422:	2800      	cmp	r0, #0
    f424:	d1e5      	bne.n	f3f2 <dlms_getPlcData+0x80>
        if ((ret = bb_getUInt8(buff, &padLen)) != 0)
    f426:	f10d 0107 	add.w	r1, sp, #7
    f42a:	4628      	mov	r0, r5
        short macSa = (short)(mac >> 12);
    f42c:	9f03      	ldr	r7, [sp, #12]
        if ((ret = bb_getUInt8(buff, &padLen)) != 0)
    f42e:	f7fd fdb2 	bl	cf96 <bb_getUInt8>
    f432:	4604      	mov	r4, r0
    f434:	2800      	cmp	r0, #0
    f436:	d1dc      	bne.n	f3f2 <dlms_getPlcData+0x80>
        if (buff->size < (unsigned short)(len + padLen + 2))
    f438:	f89d 2007 	ldrb.w	r2, [sp, #7]
    f43c:	f89d 3005 	ldrb.w	r3, [sp, #5]
    f440:	4413      	add	r3, r2
    f442:	88ea      	ldrh	r2, [r5, #6]
    f444:	3302      	adds	r3, #2
    f446:	429a      	cmp	r2, r3
    f448:	d205      	bcs.n	f456 <dlms_getPlcData+0xe4>
            data->complete = 0;
    f44a:	7430      	strb	r0, [r6, #16]
            buff->position = buff->position - index - 6;
    f44c:	892b      	ldrh	r3, [r5, #8]
    f44e:	3b06      	subs	r3, #6
    f450:	eba3 0309 	sub.w	r3, r3, r9
    f454:	e7cc      	b.n	f3f0 <dlms_getPlcData+0x7e>
            if ((ret = bb_getUInt8(buff, &ch)) != 0)
    f456:	a901      	add	r1, sp, #4
    f458:	4628      	mov	r0, r5
    f45a:	f7fd fd9c 	bl	cf96 <bb_getUInt8>
    f45e:	2800      	cmp	r0, #0
    f460:	d194      	bne.n	f38c <dlms_getPlcData+0x1a>
            if (ch != DLMS_PLC_DATA_LINK_DATA_REQUEST)
    f462:	f89d 3004 	ldrb.w	r3, [sp, #4]
    f466:	2b90      	cmp	r3, #144	; 0x90
    f468:	d161      	bne.n	f52e <dlms_getPlcData+0x1bc>
            if ((ret = bb_getUInt8(buff, &da)) != 0 ||
    f46a:	a902      	add	r1, sp, #8
    f46c:	4628      	mov	r0, r5
    f46e:	f7fd fd92 	bl	cf96 <bb_getUInt8>
    f472:	2800      	cmp	r0, #0
    f474:	d18a      	bne.n	f38c <dlms_getPlcData+0x1a>
                (ret = bb_getUInt8(buff, &sa)) != 0)
    f476:	f10d 0109 	add.w	r1, sp, #9
    f47a:	4628      	mov	r0, r5
    f47c:	f7fd fd8b 	bl	cf96 <bb_getUInt8>
            if ((ret = bb_getUInt8(buff, &da)) != 0 ||
    f480:	2800      	cmp	r0, #0
    f482:	d183      	bne.n	f38c <dlms_getPlcData+0x1a>
            if (settings->server)
    f484:	f898 1058 	ldrb.w	r1, [r8, #88]	; 0x58
        short macSa = (short)(mac >> 12);
    f488:	0b3a      	lsrs	r2, r7, #12
        short macDa = (short)(mac & 0xFFF);
    f48a:	f640 73ff 	movw	r3, #4095	; 0xfff
    f48e:	f3c7 070b 	ubfx	r7, r7, #0, #12
            if (settings->server)
    f492:	b3b9      	cbz	r1, f504 <dlms_getPlcData+0x192>
                    (macDa == DLMS_PLC_DESTINATION_ADDRESS_ALL_PHYSICAL || macDa == settings->plcSettings.macSourceAddress) &&
    f494:	429f      	cmp	r7, r3
    f496:	d003      	beq.n	f4a0 <dlms_getPlcData+0x12e>
    f498:	f8b8 307c 	ldrh.w	r3, [r8, #124]	; 0x7c
    f49c:	429f      	cmp	r7, r3
    f49e:	d10b      	bne.n	f4b8 <dlms_getPlcData+0x146>
        short macSa = (short)(mac >> 12);
    f4a0:	b213      	sxth	r3, r2
                    (macDa == DLMS_PLC_DESTINATION_ADDRESS_ALL_PHYSICAL || macDa == settings->plcSettings.macSourceAddress) &&
    f4a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
    f4a6:	d02b      	beq.n	f500 <dlms_getPlcData+0x18e>
                    (macSa == DLMS_PLC_SOURCE_ADDRESS_INITIATOR || macSa == settings->plcSettings.macDestinationAddress);
    f4a8:	f8b8 007e 	ldrh.w	r0, [r8, #126]	; 0x7e
    f4ac:	eba0 0c03 	sub.w	ip, r0, r3
    f4b0:	f1dc 0000 	rsbs	r0, ip, #0
    f4b4:	eb40 000c 	adc.w	r0, r0, ip
                data->complete =
    f4b8:	7430      	strb	r0, [r6, #16]
                data->serverAddress = macDa;
    f4ba:	f8a6 7048 	strh.w	r7, [r6, #72]	; 0x48
                data->clientAddress = macSa;
    f4be:	f8a6 204a 	strh.w	r2, [r6, #74]	; 0x4a
            if (data->complete)
    f4c2:	7c33      	ldrb	r3, [r6, #16]
    f4c4:	2b00      	cmp	r3, #0
    f4c6:	d094      	beq.n	f3f2 <dlms_getPlcData+0x80>
                crcCount = countCRC(buff, 0, len + padLen);
    f4c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f4cc:	f89d 7005 	ldrb.w	r7, [sp, #5]
    f4d0:	441f      	add	r7, r3
    f4d2:	463a      	mov	r2, r7
    f4d4:	2100      	movs	r1, #0
    f4d6:	4628      	mov	r0, r5
    f4d8:	f7f3 f8fa 	bl	26d0 <countCRC.isra.0>
                if ((ret = bb_getUInt16ByIndex(buff, len + padLen, &crc)) != 0)
    f4dc:	f10d 020a 	add.w	r2, sp, #10
                crcCount = countCRC(buff, 0, len + padLen);
    f4e0:	4680      	mov	r8, r0
                if ((ret = bb_getUInt16ByIndex(buff, len + padLen, &crc)) != 0)
    f4e2:	4639      	mov	r1, r7
    f4e4:	4628      	mov	r0, r5
    f4e6:	f7fd fe85 	bl	d1f4 <bb_getUInt16ByIndex>
    f4ea:	2800      	cmp	r0, #0
    f4ec:	f47f af4e 	bne.w	f38c <dlms_getPlcData+0x1a>
                if (crc != crcCount)
    f4f0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    f4f4:	4543      	cmp	r3, r8
    f4f6:	d117      	bne.n	f528 <dlms_getPlcData+0x1b6>
                data->packetLength = len;
    f4f8:	f89d 3005 	ldrb.w	r3, [sp, #5]
    f4fc:	85b3      	strh	r3, [r6, #44]	; 0x2c
    f4fe:	e778      	b.n	f3f2 <dlms_getPlcData+0x80>
                    (macDa == DLMS_PLC_DESTINATION_ADDRESS_ALL_PHYSICAL || macDa == settings->plcSettings.macSourceAddress) &&
    f500:	2001      	movs	r0, #1
    f502:	e7d9      	b.n	f4b8 <dlms_getPlcData+0x146>
                    macDa == DLMS_PLC_SOURCE_ADDRESS_INITIATOR ||
    f504:	429f      	cmp	r7, r3
    f506:	d00d      	beq.n	f524 <dlms_getPlcData+0x1b2>
                    macDa == DLMS_PLC_DESTINATION_ADDRESS_ALL_PHYSICAL ||
    f508:	f5b7 6f40 	cmp.w	r7, #3072	; 0xc00
    f50c:	d00a      	beq.n	f524 <dlms_getPlcData+0x1b2>
                    macDa == settings->plcSettings.macDestinationAddress;
    f50e:	f8b8 307e 	ldrh.w	r3, [r8, #126]	; 0x7e
                    macDa == DLMS_PLC_SOURCE_ADDRESS_INITIATOR ||
    f512:	1bd9      	subs	r1, r3, r7
    f514:	424b      	negs	r3, r1
    f516:	414b      	adcs	r3, r1
                data->complete =
    f518:	7433      	strb	r3, [r6, #16]
                data->clientAddress = macDa;
    f51a:	f8a6 704a 	strh.w	r7, [r6, #74]	; 0x4a
                data->serverAddress = macSa;
    f51e:	f8a6 2048 	strh.w	r2, [r6, #72]	; 0x48
    f522:	e7ce      	b.n	f4c2 <dlms_getPlcData+0x150>
                    macDa == DLMS_PLC_SOURCE_ADDRESS_INITIATOR ||
    f524:	2301      	movs	r3, #1
    f526:	e7f7      	b.n	f518 <dlms_getPlcData+0x1a6>
                    return DLMS_ERROR_CODE_WRONG_CRC;
    f528:	f240 100d 	movw	r0, #269	; 0x10d
    f52c:	e72e      	b.n	f38c <dlms_getPlcData+0x1a>
                return DLMS_ERROR_CODE_INVALID_COMMAND;
    f52e:	f44f 7080 	mov.w	r0, #256	; 0x100
    f532:	e72b      	b.n	f38c <dlms_getPlcData+0x1a>

0000f534 <dlms_getPlcHdlcData>:
{
    f534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f538:	4680      	mov	r8, r0
    f53a:	b088      	sub	sp, #32
    if (bb_available(buff) < 2)
    f53c:	4608      	mov	r0, r1
{
    f53e:	460d      	mov	r5, r1
    f540:	4616      	mov	r6, r2
    f542:	4699      	mov	r9, r3
    if (bb_available(buff) < 2)
    f544:	f7fd fb41 	bl	cbca <bb_available>
    f548:	2801      	cmp	r0, #1
    f54a:	f04f 0400 	mov.w	r4, #0
    f54e:	d804      	bhi.n	f55a <dlms_getPlcHdlcData+0x26>
        data->complete = 0;
    f550:	7434      	strb	r4, [r6, #16]
}
    f552:	4620      	mov	r0, r4
    f554:	b008      	add	sp, #32
    f556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    *frame = 0;
    f55a:	f889 4000 	strb.w	r4, [r9]
    if ((ret = bb_getUInt16(buff, &ns)) != 0)
    f55e:	f10d 0116 	add.w	r1, sp, #22
    f562:	4628      	mov	r0, r5
    f564:	f7fd fd40 	bl	cfe8 <bb_getUInt16>
    f568:	4604      	mov	r4, r0
    f56a:	2800      	cmp	r0, #0
    f56c:	d1f1      	bne.n	f552 <dlms_getPlcHdlcData+0x1e>
    switch (ns)
    f56e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    f572:	f644 324b 	movw	r2, #19275	; 0x4b4b
    f576:	4293      	cmp	r3, r2
    f578:	d029      	beq.n	f5ce <dlms_getPlcHdlcData+0x9a>
    f57a:	d80e      	bhi.n	f59a <dlms_getPlcHdlcData+0x66>
    f57c:	f242 7227 	movw	r2, #10023	; 0x2727
    f580:	4293      	cmp	r3, r2
    f582:	d027      	beq.n	f5d4 <dlms_getPlcHdlcData+0xa0>
    f584:	f643 223a 	movw	r2, #14906	; 0x3a3a
    f588:	4293      	cmp	r3, r2
    f58a:	d026      	beq.n	f5da <dlms_getPlcHdlcData+0xa6>
    f58c:	f641 521d 	movw	r2, #7453	; 0x1d1d
    f590:	4293      	cmp	r3, r2
    f592:	d025      	beq.n	f5e0 <dlms_getPlcHdlcData+0xac>
    f594:	f44f 7481 	mov.w	r4, #258	; 0x102
    f598:	e7db      	b.n	f552 <dlms_getPlcHdlcData+0x1e>
    f59a:	f646 426c 	movw	r2, #27756	; 0x6c6c
    f59e:	4293      	cmp	r3, r2
    f5a0:	d021      	beq.n	f5e6 <dlms_getPlcHdlcData+0xb2>
    f5a2:	f247 1271 	movw	r2, #29041	; 0x7171
    f5a6:	4293      	cmp	r3, r2
    f5a8:	d020      	beq.n	f5ec <dlms_getPlcHdlcData+0xb8>
    f5aa:	f245 6256 	movw	r2, #22102	; 0x5656
    f5ae:	4293      	cmp	r3, r2
    f5b0:	d1f0      	bne.n	f594 <dlms_getPlcHdlcData+0x60>
        frameLen = 3 * 36;
    f5b2:	f04f 0a6c 	mov.w	sl, #108	; 0x6c
    if (bb_available(buff) < (unsigned char)(frameLen - 2))
    f5b6:	4628      	mov	r0, r5
    f5b8:	f7fd fb07 	bl	cbca <bb_available>
    f5bc:	f1aa 0302 	sub.w	r3, sl, #2
    f5c0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    f5c4:	4283      	cmp	r3, r0
    f5c6:	d914      	bls.n	f5f2 <dlms_getPlcHdlcData+0xbe>
        data->complete = 0;
    f5c8:	2300      	movs	r3, #0
    f5ca:	7433      	strb	r3, [r6, #16]
    f5cc:	e7c1      	b.n	f552 <dlms_getPlcHdlcData+0x1e>
        frameLen = 6 * 36;
    f5ce:	f04f 0ad8 	mov.w	sl, #216	; 0xd8
    f5d2:	e7f0      	b.n	f5b6 <dlms_getPlcHdlcData+0x82>
        frameLen = 7 * 36;
    f5d4:	f04f 0afc 	mov.w	sl, #252	; 0xfc
    f5d8:	e7ed      	b.n	f5b6 <dlms_getPlcHdlcData+0x82>
    switch (ns)
    f5da:	f04f 0a48 	mov.w	sl, #72	; 0x48
    f5de:	e7ea      	b.n	f5b6 <dlms_getPlcHdlcData+0x82>
        frameLen = 5 * 36;
    f5e0:	f04f 0ab4 	mov.w	sl, #180	; 0xb4
    f5e4:	e7e7      	b.n	f5b6 <dlms_getPlcHdlcData+0x82>
        frameLen = 36;
    f5e6:	f04f 0a24 	mov.w	sl, #36	; 0x24
    f5ea:	e7e4      	b.n	f5b6 <dlms_getPlcHdlcData+0x82>
        frameLen = 4 * 36;
    f5ec:	f04f 0a90 	mov.w	sl, #144	; 0x90
    f5f0:	e7e1      	b.n	f5b6 <dlms_getPlcHdlcData+0x82>
        if ((ret = bb_getUInt8(buff, &credit)) != 0)
    f5f2:	a905      	add	r1, sp, #20
    f5f4:	4628      	mov	r0, r5
        unsigned long index = buff->position;
    f5f6:	892f      	ldrh	r7, [r5, #8]
        if ((ret = bb_getUInt8(buff, &credit)) != 0)
    f5f8:	f7fd fccd 	bl	cf96 <bb_getUInt8>
    f5fc:	4604      	mov	r4, r0
    f5fe:	2800      	cmp	r0, #0
    f600:	d1a7      	bne.n	f552 <dlms_getPlcHdlcData+0x1e>
        if ((ret = bb_getUInt24(buff, &mac)) != 0)
    f602:	a906      	add	r1, sp, #24
    f604:	4628      	mov	r0, r5
    f606:	f7fd fd49 	bl	d09c <bb_getUInt24>
    f60a:	4604      	mov	r4, r0
    f60c:	2800      	cmp	r0, #0
    f60e:	d1a0      	bne.n	f552 <dlms_getPlcHdlcData+0x1e>
        unsigned short sa = (unsigned short)(mac >> 12);
    f610:	9b06      	ldr	r3, [sp, #24]
        if (settings->server)
    f612:	f898 2058 	ldrb.w	r2, [r8, #88]	; 0x58
        unsigned short sa = (unsigned short)(mac >> 12);
    f616:	f3c3 310f 	ubfx	r1, r3, #12, #16
        unsigned short da = (unsigned short)(mac & 0xFFF);
    f61a:	f3c3 030b 	ubfx	r3, r3, #0, #12
        if (settings->server)
    f61e:	2a00      	cmp	r2, #0
    f620:	d055      	beq.n	f6ce <dlms_getPlcHdlcData+0x19a>
            data->complete = (da == DLMS_PLC_DESTINATION_ADDRESS_ALL_PHYSICAL || da == settings->plcSettings.macSourceAddress) &&
    f622:	f640 72ff 	movw	r2, #4095	; 0xfff
    f626:	4293      	cmp	r3, r2
    f628:	d003      	beq.n	f632 <dlms_getPlcHdlcData+0xfe>
    f62a:	f8b8 207c 	ldrh.w	r2, [r8, #124]	; 0x7c
    f62e:	429a      	cmp	r2, r3
    f630:	d10a      	bne.n	f648 <dlms_getPlcHdlcData+0x114>
    f632:	f640 4201 	movw	r2, #3073	; 0xc01
    f636:	4291      	cmp	r1, r2
    f638:	d051      	beq.n	f6de <dlms_getPlcHdlcData+0x1aa>
                (sa == DLMS_PLC_HDLC_SOURCE_ADDRESS_INITIATOR || sa == settings->plcSettings.macDestinationAddress);
    f63a:	f8b8 207e 	ldrh.w	r2, [r8, #126]	; 0x7e
    f63e:	428a      	cmp	r2, r1
            data->complete = da == DLMS_PLC_HDLC_SOURCE_ADDRESS_INITIATOR || da == settings->plcSettings.macDestinationAddress;
    f640:	bf14      	ite	ne
    f642:	2200      	movne	r2, #0
    f644:	2201      	moveq	r2, #1
    f646:	e000      	b.n	f64a <dlms_getPlcHdlcData+0x116>
            data->complete = (da == DLMS_PLC_DESTINATION_ADDRESS_ALL_PHYSICAL || da == settings->plcSettings.macSourceAddress) &&
    f648:	4602      	mov	r2, r0
            data->complete = da == DLMS_PLC_HDLC_SOURCE_ADDRESS_INITIATOR || da == settings->plcSettings.macDestinationAddress;
    f64a:	7432      	strb	r2, [r6, #16]
            data->serverAddress = da;
    f64c:	f8a6 3048 	strh.w	r3, [r6, #72]	; 0x48
        if (data->complete)
    f650:	7c33      	ldrb	r3, [r6, #16]
            data->clientAddress = sa;
    f652:	f8a6 104a 	strh.w	r1, [r6, #74]	; 0x4a
        if (data->complete)
    f656:	2b00      	cmp	r3, #0
    f658:	d047      	beq.n	f6ea <dlms_getPlcHdlcData+0x1b6>
            if ((ret = bb_getUInt8(buff, &padLen)) != 0)
    f65a:	f10d 0115 	add.w	r1, sp, #21
    f65e:	4628      	mov	r0, r5
    f660:	f7fd fc99 	bl	cf96 <bb_getUInt8>
    f664:	2800      	cmp	r0, #0
    f666:	d13e      	bne.n	f6e6 <dlms_getPlcHdlcData+0x1b2>
            if ((ret = dlms_getHdlcData(settings->server, settings, buff, data, frame, 0, 1)) != 0)
    f668:	2301      	movs	r3, #1
    f66a:	e9cd 0301 	strd	r0, r3, [sp, #4]
    f66e:	f8cd 9000 	str.w	r9, [sp]
    f672:	f898 0058 	ldrb.w	r0, [r8, #88]	; 0x58
    f676:	4633      	mov	r3, r6
    f678:	462a      	mov	r2, r5
    f67a:	4641      	mov	r1, r8
    f67c:	f7ff fbf1 	bl	ee62 <dlms_getHdlcData>
    f680:	bb88      	cbnz	r0, f6e6 <dlms_getPlcHdlcData+0x1b2>
            dlms_getDataFromFrame(buff, data, dlms_useHdlc(settings->interfaceType));
    f682:	f898 0035 	ldrb.w	r0, [r8, #53]	; 0x35
    f686:	f7fe fc05 	bl	de94 <dlms_useHdlc>
    f68a:	4631      	mov	r1, r6
    f68c:	4602      	mov	r2, r0
    f68e:	4628      	mov	r0, r5
    f690:	f7ff fbc0 	bl	ee14 <dlms_getDataFromFrame>
            buff->position = buff->position + padLen;
    f694:	892b      	ldrh	r3, [r5, #8]
    f696:	f89d 8015 	ldrb.w	r8, [sp, #21]
            uint32_t crcCount = dlms_countFCS24(buff->data, index, buff->position - index);
    f69a:	6828      	ldr	r0, [r5, #0]
            buff->position = buff->position + padLen;
    f69c:	4498      	add	r8, r3
    f69e:	fa1f f888 	uxth.w	r8, r8
            uint32_t crcCount = dlms_countFCS24(buff->data, index, buff->position - index);
    f6a2:	eba8 0207 	sub.w	r2, r8, r7
    f6a6:	4639      	mov	r1, r7
            buff->position = buff->position + padLen;
    f6a8:	f8a5 8008 	strh.w	r8, [r5, #8]
            uint32_t crcCount = dlms_countFCS24(buff->data, index, buff->position - index);
    f6ac:	f7f3 f948 	bl	2940 <dlms_countFCS24>
            if ((ret = bb_getUInt24ByIndex(buff, buff->position, &crc)) != 0)
    f6b0:	aa07      	add	r2, sp, #28
            uint32_t crcCount = dlms_countFCS24(buff->data, index, buff->position - index);
    f6b2:	4681      	mov	r9, r0
            if ((ret = bb_getUInt24ByIndex(buff, buff->position, &crc)) != 0)
    f6b4:	4641      	mov	r1, r8
    f6b6:	4628      	mov	r0, r5
    f6b8:	f7fd fcd9 	bl	d06e <bb_getUInt24ByIndex>
    f6bc:	b998      	cbnz	r0, f6e6 <dlms_getPlcHdlcData+0x1b2>
            if (crc != crcCount)
    f6be:	9b07      	ldr	r3, [sp, #28]
    f6c0:	4599      	cmp	r9, r3
    f6c2:	d10e      	bne.n	f6e2 <dlms_getPlcHdlcData+0x1ae>
            data->packetLength = (uint16_t)(2 + buff->position - index);
    f6c4:	892b      	ldrh	r3, [r5, #8]
    f6c6:	3302      	adds	r3, #2
    f6c8:	1bdf      	subs	r7, r3, r7
    f6ca:	85b7      	strh	r7, [r6, #44]	; 0x2c
    f6cc:	e741      	b.n	f552 <dlms_getPlcHdlcData+0x1e>
            data->complete = da == DLMS_PLC_HDLC_SOURCE_ADDRESS_INITIATOR || da == settings->plcSettings.macDestinationAddress;
    f6ce:	f640 4201 	movw	r2, #3073	; 0xc01
    f6d2:	4293      	cmp	r3, r2
    f6d4:	d003      	beq.n	f6de <dlms_getPlcHdlcData+0x1aa>
    f6d6:	f8b8 207e 	ldrh.w	r2, [r8, #126]	; 0x7e
    f6da:	429a      	cmp	r2, r3
    f6dc:	e7b0      	b.n	f640 <dlms_getPlcHdlcData+0x10c>
    f6de:	2201      	movs	r2, #1
    f6e0:	e7b3      	b.n	f64a <dlms_getPlcHdlcData+0x116>
                return DLMS_ERROR_CODE_WRONG_CRC;
    f6e2:	f240 100d 	movw	r0, #269	; 0x10d
                return ret;
    f6e6:	4604      	mov	r4, r0
    f6e8:	e733      	b.n	f552 <dlms_getPlcHdlcData+0x1e>
            buff->position = (uint16_t)(buff->position + frameLen - index - 4);
    f6ea:	892b      	ldrh	r3, [r5, #8]
    f6ec:	3b04      	subs	r3, #4
    f6ee:	1bdf      	subs	r7, r3, r7
    f6f0:	44ba      	add	sl, r7
    f6f2:	f8a5 a008 	strh.w	sl, [r5, #8]
    f6f6:	e72c      	b.n	f552 <dlms_getPlcHdlcData+0x1e>

0000f6f8 <dlms_getDataFromBlock>:
{
    f6f8:	b538      	push	{r3, r4, r5, lr}
    if (data->size == data->position)
    f6fa:	88c3      	ldrh	r3, [r0, #6]
{
    f6fc:	460d      	mov	r5, r1
    uint16_t pos, len = data->position - index;
    f6fe:	8901      	ldrh	r1, [r0, #8]
    if (data->size == data->position)
    f700:	4299      	cmp	r1, r3
{
    f702:	4604      	mov	r4, r0
    if (data->size == data->position)
    f704:	d103      	bne.n	f70e <dlms_getDataFromBlock+0x16>
        bb_clear(data);
    f706:	f7fd fc30 	bl	cf6a <bb_clear>
}
    f70a:	2000      	movs	r0, #0
    f70c:	bd38      	pop	{r3, r4, r5, pc}
    bb_move(data, data->position, data->position - len, data->size - data->position);
    f70e:	1a5b      	subs	r3, r3, r1
    f710:	b29b      	uxth	r3, r3
    f712:	462a      	mov	r2, r5
    f714:	f7fd fdaf 	bl	d276 <bb_move>
    data->position = pos - len;
    f718:	8125      	strh	r5, [r4, #8]
    return 0;
    f71a:	e7f6      	b.n	f70a <dlms_getDataFromBlock+0x12>

0000f71c <dlms_verifyInvokeId>:
{
    f71c:	b510      	push	{r4, lr}
    if (settings->autoIncreaseInvokeID && reply->invokeId != dlms_getInvokeIDPriority(settings, 0))
    f71e:	f890 30e0 	ldrb.w	r3, [r0, #224]	; 0xe0
    f722:	b90b      	cbnz	r3, f728 <dlms_verifyInvokeId+0xc>
    return 0;
    f724:	2000      	movs	r0, #0
}
    f726:	bd10      	pop	{r4, pc}
    if (settings->autoIncreaseInvokeID && reply->invokeId != dlms_getInvokeIDPriority(settings, 0))
    f728:	f891 4039 	ldrb.w	r4, [r1, #57]	; 0x39
    f72c:	2100      	movs	r1, #0
    f72e:	f7fe fbba 	bl	dea6 <dlms_getInvokeIDPriority>
    f732:	4284      	cmp	r4, r0
    f734:	d0f6      	beq.n	f724 <dlms_verifyInvokeId+0x8>
        return DLMS_ERROR_CODE_INVALID_INVOKE_ID;
    f736:	f240 101b 	movw	r0, #283	; 0x11b
    f73a:	e7f4      	b.n	f726 <dlms_verifyInvokeId+0xa>

0000f73c <dlms_handleGetResponse>:
{
    f73c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    if ((ret = bb_getUInt8(&reply->data, &ch)) != 0)
    f740:	1d0e      	adds	r6, r1, #4
{
    f742:	4607      	mov	r7, r0
    f744:	460d      	mov	r5, r1
    if ((ret = bb_getUInt8(&reply->data, &ch)) != 0)
    f746:	4630      	mov	r0, r6
    f748:	f10d 0101 	add.w	r1, sp, #1
{
    f74c:	4690      	mov	r8, r2
    if ((ret = bb_getUInt8(&reply->data, &ch)) != 0)
    f74e:	f7fd fc22 	bl	cf96 <bb_getUInt8>
    f752:	4604      	mov	r4, r0
    f754:	bb30      	cbnz	r0, f7a4 <dlms_handleGetResponse+0x68>
    if ((ret = bb_getUInt8(&reply->data, &reply->invokeId)) != 0)
    f756:	f105 0139 	add.w	r1, r5, #57	; 0x39
    f75a:	4630      	mov	r0, r6
    type = ch;
    f75c:	f89d 9001 	ldrb.w	r9, [sp, #1]
    if ((ret = bb_getUInt8(&reply->data, &reply->invokeId)) != 0)
    f760:	f7fd fc19 	bl	cf96 <bb_getUInt8>
    f764:	4604      	mov	r4, r0
    f766:	b9e8      	cbnz	r0, f7a4 <dlms_handleGetResponse+0x68>
    if ((ret = dlms_verifyInvokeId(settings, reply)) != 0)
    f768:	4629      	mov	r1, r5
    f76a:	4638      	mov	r0, r7
    f76c:	f7ff ffd6 	bl	f71c <dlms_verifyInvokeId>
    f770:	4604      	mov	r4, r0
    f772:	b9b8      	cbnz	r0, f7a4 <dlms_handleGetResponse+0x68>
    if (type == 1)
    f774:	f1b9 0f01 	cmp.w	r9, #1
    type = ch;
    f778:	fa0f f389 	sxth.w	r3, r9
    if (type == 1)
    f77c:	d11c      	bne.n	f7b8 <dlms_handleGetResponse+0x7c>
        if ((ret = bb_getUInt8(&reply->data, &ch)) != 0)
    f77e:	f10d 0101 	add.w	r1, sp, #1
    f782:	4630      	mov	r0, r6
    f784:	f7fd fc07 	bl	cf96 <bb_getUInt8>
    f788:	4604      	mov	r4, r0
    f78a:	b958      	cbnz	r0, f7a4 <dlms_handleGetResponse+0x68>
        if (ch != 0)
    f78c:	f89d 3001 	ldrb.w	r3, [sp, #1]
    f790:	b163      	cbz	r3, f7ac <dlms_handleGetResponse+0x70>
            if ((ret = bb_getUInt8(&reply->data, &ch)) != 0)
    f792:	f10d 0101 	add.w	r1, sp, #1
    f796:	4630      	mov	r0, r6
    f798:	f7fd fbfd 	bl	cf96 <bb_getUInt8>
    f79c:	4604      	mov	r4, r0
    f79e:	b908      	cbnz	r0, f7a4 <dlms_handleGetResponse+0x68>
            return ch;
    f7a0:	f89d 4001 	ldrb.w	r4, [sp, #1]
}
    f7a4:	4620      	mov	r0, r4
    f7a6:	b003      	add	sp, #12
    f7a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ret = dlms_getDataFromBlock(&reply->data, 0);
    f7ac:	4601      	mov	r1, r0
    f7ae:	4630      	mov	r0, r6
    f7b0:	f7ff ffa2 	bl	f6f8 <dlms_getDataFromBlock>
    f7b4:	4604      	mov	r4, r0
    f7b6:	e7f5      	b.n	f7a4 <dlms_handleGetResponse+0x68>
    else if (type == 2)
    f7b8:	2b02      	cmp	r3, #2
    f7ba:	d15d      	bne.n	f878 <dlms_handleGetResponse+0x13c>
        if ((ret = bb_getUInt8(&reply->data, &ch)) != 0)
    f7bc:	f10d 0101 	add.w	r1, sp, #1
    f7c0:	4630      	mov	r0, r6
    f7c2:	f7fd fbe8 	bl	cf96 <bb_getUInt8>
    f7c6:	4604      	mov	r4, r0
    f7c8:	2800      	cmp	r0, #0
    f7ca:	d1eb      	bne.n	f7a4 <dlms_handleGetResponse+0x68>
        if (ch == 0)
    f7cc:	f89d 2001 	ldrb.w	r2, [sp, #1]
    f7d0:	782b      	ldrb	r3, [r5, #0]
    f7d2:	2a00      	cmp	r2, #0
    f7d4:	d142      	bne.n	f85c <dlms_handleGetResponse+0x120>
            reply->moreData = (DLMS_DATA_REQUEST_TYPES)(reply->moreData | DLMS_DATA_REQUEST_TYPES_BLOCK);
    f7d6:	f043 0302 	orr.w	r3, r3, #2
    f7da:	702b      	strb	r3, [r5, #0]
        if ((ret = bb_getUInt32(&reply->data, &number)) != 0)
    f7dc:	a901      	add	r1, sp, #4
    f7de:	4630      	mov	r0, r6
    f7e0:	f7fd fc17 	bl	d012 <bb_getUInt32>
    f7e4:	4604      	mov	r4, r0
    f7e6:	2800      	cmp	r0, #0
    f7e8:	d1dc      	bne.n	f7a4 <dlms_handleGetResponse+0x68>
        if (number != 1 && settings->blockIndex == 1)
    f7ea:	9b01      	ldr	r3, [sp, #4]
    f7ec:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
    f7f0:	2b01      	cmp	r3, #1
    f7f2:	d036      	beq.n	f862 <dlms_handleGetResponse+0x126>
    f7f4:	2a01      	cmp	r2, #1
    f7f6:	d134      	bne.n	f862 <dlms_handleGetResponse+0x126>
            settings->blockIndex = number;
    f7f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        if ((ret = bb_getUInt8(&reply->data, &ch)) != 0)
    f7fc:	f10d 0101 	add.w	r1, sp, #1
    f800:	4630      	mov	r0, r6
    f802:	f7fd fbc8 	bl	cf96 <bb_getUInt8>
    f806:	4604      	mov	r4, r0
    f808:	2800      	cmp	r0, #0
    f80a:	d1cb      	bne.n	f7a4 <dlms_handleGetResponse+0x68>
        if (ch != 0)
    f80c:	f89d 3001 	ldrb.w	r3, [sp, #1]
    f810:	2b00      	cmp	r3, #0
    f812:	d1be      	bne.n	f792 <dlms_handleGetResponse+0x56>
            if ((ret = hlp_getObjectCount2(&reply->data, &count)) != 0)
    f814:	f10d 0102 	add.w	r1, sp, #2
    f818:	4630      	mov	r0, r6
    f81a:	f00a f80a 	bl	19832 <hlp_getObjectCount2>
    f81e:	4604      	mov	r4, r0
    f820:	2800      	cmp	r0, #0
    f822:	d1bf      	bne.n	f7a4 <dlms_handleGetResponse+0x68>
            if ((reply->moreData & DLMS_DATA_REQUEST_TYPES_FRAME) == 0)
    f824:	782b      	ldrb	r3, [r5, #0]
    f826:	07db      	lsls	r3, r3, #31
    f828:	d407      	bmi.n	f83a <dlms_handleGetResponse+0xfe>
                if (count > (uint16_t)(bb_available(&reply->data)))
    f82a:	4630      	mov	r0, r6
    f82c:	f7fd f9cd 	bl	cbca <bb_available>
    f830:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    f834:	4283      	cmp	r3, r0
    f836:	d826      	bhi.n	f886 <dlms_handleGetResponse+0x14a>
                reply->command = DLMS_COMMAND_NONE;
    f838:	706c      	strb	r4, [r5, #1]
            if (count == 0)
    f83a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    f83e:	b9a3      	cbnz	r3, f86a <dlms_handleGetResponse+0x12e>
                reply->data.size = index;
    f840:	f8a5 800a 	strh.w	r8, [r5, #10]
            if (reply->moreData == DLMS_DATA_REQUEST_TYPES_NONE)
    f844:	782b      	ldrb	r3, [r5, #0]
    f846:	2b00      	cmp	r3, #0
    f848:	d1ac      	bne.n	f7a4 <dlms_handleGetResponse+0x68>
                if (!reply->peek)
    f84a:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
    f84e:	2b00      	cmp	r3, #0
    f850:	d1a8      	bne.n	f7a4 <dlms_handleGetResponse+0x68>
                    reply->data.position = 0;
    f852:	81ab      	strh	r3, [r5, #12]
                    resetBlockIndex(settings);
    f854:	4638      	mov	r0, r7
    f856:	f000 fcd0 	bl	101fa <resetBlockIndex>
    f85a:	e7a3      	b.n	f7a4 <dlms_handleGetResponse+0x68>
                (DLMS_DATA_REQUEST_TYPES)(reply->moreData & ~DLMS_DATA_REQUEST_TYPES_BLOCK);
    f85c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    f860:	e7bb      	b.n	f7da <dlms_handleGetResponse+0x9e>
        else if (number != settings->blockIndex)
    f862:	4293      	cmp	r3, r2
    f864:	d0ca      	beq.n	f7fc <dlms_handleGetResponse+0xc0>
            return DLMS_ERROR_CODE_DATA_BLOCK_NUMBER_INVALID;
    f866:	2413      	movs	r4, #19
    f868:	e79c      	b.n	f7a4 <dlms_handleGetResponse+0x68>
                if ((ret = dlms_getDataFromBlock(&reply->data, index)) != 0)
    f86a:	4641      	mov	r1, r8
    f86c:	4630      	mov	r0, r6
    f86e:	f7ff ff43 	bl	f6f8 <dlms_getDataFromBlock>
    f872:	2800      	cmp	r0, #0
    f874:	d0e6      	beq.n	f844 <dlms_handleGetResponse+0x108>
    f876:	e79d      	b.n	f7b4 <dlms_handleGetResponse+0x78>
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    f878:	2b03      	cmp	r3, #3
    f87a:	bf0c      	ite	eq
    f87c:	f04f 34ff 	moveq.w	r4, #4294967295
    f880:	f44f 7481 	movne.w	r4, #258	; 0x102
    f884:	e78e      	b.n	f7a4 <dlms_handleGetResponse+0x68>
                    return DLMS_ERROR_CODE_OUTOFMEMORY;
    f886:	f44f 7482 	mov.w	r4, #260	; 0x104
    f88a:	e78b      	b.n	f7a4 <dlms_handleGetResponse+0x68>

0000f88c <handleWriteResponse>:
{
    f88c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (hlp_getObjectCount2(&data->data, &count) != 0)
    f88e:	1d05      	adds	r5, r0, #4
    f890:	f10d 0106 	add.w	r1, sp, #6
    f894:	4628      	mov	r0, r5
    f896:	f009 ffcc 	bl	19832 <hlp_getObjectCount2>
    f89a:	4604      	mov	r4, r0
    f89c:	b9d8      	cbnz	r0, f8d6 <handleWriteResponse+0x4a>
    for (pos = 0; pos != count; ++pos)
    f89e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    f8a2:	b2a3      	uxth	r3, r4
    f8a4:	429a      	cmp	r2, r3
    f8a6:	d101      	bne.n	f8ac <handleWriteResponse+0x20>
    return DLMS_ERROR_CODE_OK;
    f8a8:	2000      	movs	r0, #0
    f8aa:	e012      	b.n	f8d2 <handleWriteResponse+0x46>
        if ((ret = bb_getUInt8(&data->data, &ch)) != 0)
    f8ac:	f10d 0105 	add.w	r1, sp, #5
    f8b0:	4628      	mov	r0, r5
    f8b2:	f7fd fb70 	bl	cf96 <bb_getUInt8>
    f8b6:	b960      	cbnz	r0, f8d2 <handleWriteResponse+0x46>
        if (ch != 0)
    f8b8:	f89d 3005 	ldrb.w	r3, [sp, #5]
    f8bc:	3401      	adds	r4, #1
    f8be:	2b00      	cmp	r3, #0
    f8c0:	d0ed      	beq.n	f89e <handleWriteResponse+0x12>
            if ((ret = bb_getUInt8(&data->data, &ch)) != 0)
    f8c2:	f10d 0105 	add.w	r1, sp, #5
    f8c6:	4628      	mov	r0, r5
    f8c8:	f7fd fb65 	bl	cf96 <bb_getUInt8>
    f8cc:	b908      	cbnz	r0, f8d2 <handleWriteResponse+0x46>
            return ch;
    f8ce:	f89d 0005 	ldrb.w	r0, [sp, #5]
}
    f8d2:	b003      	add	sp, #12
    f8d4:	bd30      	pop	{r4, r5, pc}
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    f8d6:	f44f 7082 	mov.w	r0, #260	; 0x104
    f8da:	e7fa      	b.n	f8d2 <handleWriteResponse+0x46>

0000f8dc <dlms_getValueFromData>:
{
    f8dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f8e0:	b089      	sub	sp, #36	; 0x24
    f8e2:	460c      	mov	r4, r1
    f8e4:	4680      	mov	r8, r0
    var_init(&value);
    f8e6:	ad04      	add	r5, sp, #16
    di_init(&info);
    f8e8:	a802      	add	r0, sp, #8
    f8ea:	f7fe fa0e 	bl	dd0a <di_init>
    var_init(&value);
    f8ee:	4628      	mov	r0, r5
    f8f0:	f00a fafd 	bl	19eee <var_init>
    if (reply->dataValue.vt == DLMS_DATA_TYPE_ARRAY)
    f8f4:	7e23      	ldrb	r3, [r4, #24]
    f8f6:	2b01      	cmp	r3, #1
    f8f8:	d107      	bne.n	f90a <dlms_getValueFromData+0x2e>
        info.type = DLMS_DATA_TYPE_ARRAY;
    f8fa:	f88d 300c 	strb.w	r3, [sp, #12]
        info.count = (uint16_t)reply->totalCount;
    f8fe:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    f900:	f8ad 300a 	strh.w	r3, [sp, #10]
        info.index = (uint16_t)reply->data.size;
    f904:	8963      	ldrh	r3, [r4, #10]
    f906:	f8ad 3008 	strh.w	r3, [sp, #8]
    reply->data.position = reply->readPosition;
    f90a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    index = (uint16_t)(reply->data.position);
    f90c:	f8b4 900c 	ldrh.w	r9, [r4, #12]
    reply->data.position = reply->readPosition;
    f910:	81a3      	strh	r3, [r4, #12]
    if ((ret = dlms_getData(&reply->data, &info, &value)) != 0)
    f912:	462a      	mov	r2, r5
    f914:	a902      	add	r1, sp, #8
    f916:	1d20      	adds	r0, r4, #4
    f918:	f7fe fe87 	bl	e62a <dlms_getData>
    f91c:	4606      	mov	r6, r0
    f91e:	b130      	cbz	r0, f92e <dlms_getValueFromData+0x52>
        var_clear(&value);
    f920:	4628      	mov	r0, r5
    f922:	f00a fc40 	bl	1a1a6 <var_clear>
}
    f926:	4630      	mov	r0, r6
    f928:	b009      	add	sp, #36	; 0x24
    f92a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (value.vt != DLMS_DATA_TYPE_NONE)
    f92e:	f89d 3010 	ldrb.w	r3, [sp, #16]
    f932:	2b00      	cmp	r3, #0
    f934:	d036      	beq.n	f9a4 <dlms_getValueFromData+0xc8>
        if (value.vt != DLMS_DATA_TYPE_ARRAY && value.vt != DLMS_DATA_TYPE_STRUCTURE)
    f936:	3b01      	subs	r3, #1
    f938:	2b01      	cmp	r3, #1
    f93a:	d91f      	bls.n	f97c <dlms_getValueFromData+0xa0>
            reply->dataType = info.type;
    f93c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    f940:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
                reply->dataValue = value;
    f944:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    f948:	f104 0718 	add.w	r7, r4, #24
    f94c:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
        reply->readPosition = reply->data.position;
    f950:	89a3      	ldrh	r3, [r4, #12]
    f952:	8563      	strh	r3, [r4, #42]	; 0x2a
        reply->totalCount = info.count;
    f954:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    f958:	8523      	strh	r3, [r4, #40]	; 0x28
    if (reply->command != DLMS_COMMAND_DATA_NOTIFICATION
    f95a:	7863      	ldrb	r3, [r4, #1]
    reply->data.position = index;
    f95c:	f8a4 900c 	strh.w	r9, [r4, #12]
    if (reply->command != DLMS_COMMAND_DATA_NOTIFICATION
    f960:	2b0f      	cmp	r3, #15
    f962:	d0e0      	beq.n	f926 <dlms_getValueFromData+0x4a>
        && info.complete && reply->moreData == DLMS_DATA_REQUEST_TYPES_NONE)
    f964:	f89d 300d 	ldrb.w	r3, [sp, #13]
    f968:	2b00      	cmp	r3, #0
    f96a:	d0dc      	beq.n	f926 <dlms_getValueFromData+0x4a>
    f96c:	7825      	ldrb	r5, [r4, #0]
    f96e:	2d00      	cmp	r5, #0
    f970:	d1d9      	bne.n	f926 <dlms_getValueFromData+0x4a>
        resetBlockIndex(settings);
    f972:	4640      	mov	r0, r8
    f974:	f000 fc41 	bl	101fa <resetBlockIndex>
        reply->data.position = 0;
    f978:	81a5      	strh	r5, [r4, #12]
    f97a:	e7d4      	b.n	f926 <dlms_getValueFromData+0x4a>
            if (reply->dataValue.vt == DLMS_DATA_TYPE_NONE)
    f97c:	7e23      	ldrb	r3, [r4, #24]
    f97e:	2b00      	cmp	r3, #0
    f980:	d0e0      	beq.n	f944 <dlms_getValueFromData+0x68>
                for (pos = 0; pos != value.Arr->size; ++pos)
    f982:	4605      	mov	r5, r0
    f984:	e009      	b.n	f99a <dlms_getValueFromData+0xbe>
                    if ((ret = va_getByIndex(value.Arr, pos, &tmp)) != 0)
    f986:	aa01      	add	r2, sp, #4
    f988:	4629      	mov	r1, r5
    f98a:	f00a fc8a 	bl	1a2a2 <va_getByIndex>
    f98e:	b998      	cbnz	r0, f9b8 <dlms_getValueFromData+0xdc>
                    va_push(reply->dataValue.Arr, tmp);
    f990:	9901      	ldr	r1, [sp, #4]
    f992:	6a20      	ldr	r0, [r4, #32]
    f994:	f00a fbb9 	bl	1a10a <va_push>
                for (pos = 0; pos != value.Arr->size; ++pos)
    f998:	3501      	adds	r5, #1
    f99a:	9806      	ldr	r0, [sp, #24]
    f99c:	88c3      	ldrh	r3, [r0, #6]
    f99e:	42ab      	cmp	r3, r5
    f9a0:	d1f1      	bne.n	f986 <dlms_getValueFromData+0xaa>
    f9a2:	e7d5      	b.n	f950 <dlms_getValueFromData+0x74>
    else if (info.complete
    f9a4:	f89d 300d 	ldrb.w	r3, [sp, #13]
    f9a8:	2b00      	cmp	r3, #0
    f9aa:	d0d6      	beq.n	f95a <dlms_getValueFromData+0x7e>
        && reply->command == DLMS_COMMAND_DATA_NOTIFICATION)
    f9ac:	7863      	ldrb	r3, [r4, #1]
    f9ae:	2b0f      	cmp	r3, #15
        reply->readPosition = reply->data.position;
    f9b0:	bf04      	itt	eq
    f9b2:	89a3      	ldrheq	r3, [r4, #12]
    f9b4:	8563      	strheq	r3, [r4, #42]	; 0x2a
    f9b6:	e7d0      	b.n	f95a <dlms_getValueFromData+0x7e>
                    if ((ret = va_getByIndex(value.Arr, pos, &tmp)) != 0)
    f9b8:	4606      	mov	r6, r0
    f9ba:	e7b4      	b.n	f926 <dlms_getValueFromData+0x4a>

0000f9bc <dlms_readResponseDataBlockResult>:
{
    f9bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    if ((ret = bb_getUInt8(&reply->data, &lastBlock)) != 0)
    f9c0:	1d0f      	adds	r7, r1, #4
{
    f9c2:	4680      	mov	r8, r0
    f9c4:	460e      	mov	r6, r1
    if ((ret = bb_getUInt8(&reply->data, &lastBlock)) != 0)
    f9c6:	4638      	mov	r0, r7
    f9c8:	f10d 0103 	add.w	r1, sp, #3
{
    f9cc:	4691      	mov	r9, r2
    if ((ret = bb_getUInt8(&reply->data, &lastBlock)) != 0)
    f9ce:	f7fd fae2 	bl	cf96 <bb_getUInt8>
    f9d2:	4604      	mov	r4, r0
    f9d4:	bb30      	cbnz	r0, fa24 <dlms_readResponseDataBlockResult+0x68>
    if ((ret = bb_getUInt16(&reply->data, &number)) != 0)
    f9d6:	a901      	add	r1, sp, #4
    f9d8:	4638      	mov	r0, r7
    f9da:	f7fd fb05 	bl	cfe8 <bb_getUInt16>
    f9de:	4604      	mov	r4, r0
    f9e0:	bb00      	cbnz	r0, fa24 <dlms_readResponseDataBlockResult+0x68>
    if (hlp_getObjectCount2(&reply->data, &blockLength) != 0)
    f9e2:	f10d 0106 	add.w	r1, sp, #6
    f9e6:	4638      	mov	r0, r7
    f9e8:	f009 ff23 	bl	19832 <hlp_getObjectCount2>
    f9ec:	4604      	mov	r4, r0
    f9ee:	bbc0      	cbnz	r0, fa62 <dlms_readResponseDataBlockResult+0xa6>
    if (!lastBlock)
    f9f0:	f89d 2003 	ldrb.w	r2, [sp, #3]
    f9f4:	7833      	ldrb	r3, [r6, #0]
    f9f6:	b9ca      	cbnz	r2, fa2c <dlms_readResponseDataBlockResult+0x70>
        reply->moreData |= DLMS_DATA_REQUEST_TYPES_BLOCK;
    f9f8:	f043 0302 	orr.w	r3, r3, #2
    if (number != 1 && settings->blockIndex == 1)
    f9fc:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    fa00:	7033      	strb	r3, [r6, #0]
    fa02:	2a01      	cmp	r2, #1
    fa04:	f8d8 10a0 	ldr.w	r1, [r8, #160]	; 0xa0
    fa08:	d013      	beq.n	fa32 <dlms_readResponseDataBlockResult+0x76>
    fa0a:	2901      	cmp	r1, #1
    fa0c:	d111      	bne.n	fa32 <dlms_readResponseDataBlockResult+0x76>
        settings->blockIndex = number;
    fa0e:	f8c8 20a0 	str.w	r2, [r8, #160]	; 0xa0
    if ((reply->moreData & DLMS_DATA_REQUEST_TYPES_FRAME) != 0)
    fa12:	f013 0501 	ands.w	r5, r3, #1
    fa16:	d010      	beq.n	fa3a <dlms_readResponseDataBlockResult+0x7e>
        dlms_getDataFromBlock(&reply->data, index);
    fa18:	4649      	mov	r1, r9
    fa1a:	4638      	mov	r0, r7
    fa1c:	f7ff fe6c 	bl	f6f8 <dlms_getDataFromBlock>
        return DLMS_ERROR_CODE_FALSE;
    fa20:	f04f 34ff 	mov.w	r4, #4294967295
}
    fa24:	4620      	mov	r0, r4
    fa26:	b003      	add	sp, #12
    fa28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        reply->moreData &= ~DLMS_DATA_REQUEST_TYPES_BLOCK;
    fa2c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    fa30:	e7e4      	b.n	f9fc <dlms_readResponseDataBlockResult+0x40>
    if (number != settings->blockIndex)
    fa32:	428a      	cmp	r2, r1
    fa34:	d0ed      	beq.n	fa12 <dlms_readResponseDataBlockResult+0x56>
        return DLMS_ERROR_CODE_DATA_BLOCK_NUMBER_INVALID;
    fa36:	2413      	movs	r4, #19
    fa38:	e7f4      	b.n	fa24 <dlms_readResponseDataBlockResult+0x68>
    if (blockLength != bb_available(&reply->data))
    fa3a:	4638      	mov	r0, r7
    fa3c:	f7fd f8c5 	bl	cbca <bb_available>
    fa40:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    fa44:	4283      	cmp	r3, r0
    fa46:	d10f      	bne.n	fa68 <dlms_readResponseDataBlockResult+0xac>
    reply->command = DLMS_COMMAND_NONE;
    fa48:	7075      	strb	r5, [r6, #1]
    dlms_getDataFromBlock(&reply->data, index);
    fa4a:	4649      	mov	r1, r9
    fa4c:	4638      	mov	r0, r7
    fa4e:	f7ff fe53 	bl	f6f8 <dlms_getDataFromBlock>
    if (reply->moreData == DLMS_DATA_REQUEST_TYPES_NONE)
    fa52:	7833      	ldrb	r3, [r6, #0]
    reply->totalCount = 0;
    fa54:	8535      	strh	r5, [r6, #40]	; 0x28
    if (reply->moreData == DLMS_DATA_REQUEST_TYPES_NONE)
    fa56:	2b00      	cmp	r3, #0
    fa58:	d1e4      	bne.n	fa24 <dlms_readResponseDataBlockResult+0x68>
        resetBlockIndex(settings);
    fa5a:	4640      	mov	r0, r8
    fa5c:	f000 fbcd 	bl	101fa <resetBlockIndex>
    fa60:	e7e0      	b.n	fa24 <dlms_readResponseDataBlockResult+0x68>
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    fa62:	f44f 7482 	mov.w	r4, #260	; 0x104
    fa66:	e7dd      	b.n	fa24 <dlms_readResponseDataBlockResult+0x68>
        return DLMS_ERROR_CODE_DATA_BLOCK_UNAVAILABLE;
    fa68:	240e      	movs	r4, #14
    fa6a:	e7db      	b.n	fa24 <dlms_readResponseDataBlockResult+0x68>

0000fa6c <dlms_handleReadResponse>:
{
    fa6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    uint16_t pos, cnt = reply->totalCount;
    fa70:	8d0b      	ldrh	r3, [r1, #40]	; 0x28
    fa72:	f8ad 3006 	strh.w	r3, [sp, #6]
{
    fa76:	4605      	mov	r5, r0
    fa78:	4689      	mov	r9, r1
    fa7a:	4617      	mov	r7, r2
    unsigned char first = reply->totalCount == 0 || reply->commandType == DLMS_SINGLE_READ_RESPONSE_DATA_BLOCK_RESULT;
    fa7c:	b113      	cbz	r3, fa84 <dlms_handleReadResponse+0x18>
    if (first)
    fa7e:	78cb      	ldrb	r3, [r1, #3]
    fa80:	2b02      	cmp	r3, #2
    fa82:	d120      	bne.n	fac6 <dlms_handleReadResponse+0x5a>
        if (hlp_getObjectCount2(&reply->data, &cnt) != 0)
    fa84:	f10d 0106 	add.w	r1, sp, #6
    fa88:	f109 0004 	add.w	r0, r9, #4
    fa8c:	f009 fed1 	bl	19832 <hlp_getObjectCount2>
    fa90:	2800      	cmp	r0, #0
    fa92:	f040 809d 	bne.w	fbd0 <dlms_handleReadResponse+0x164>
        reply->totalCount = cnt;
    fa96:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    fa9a:	f8a9 3028 	strh.w	r3, [r9, #40]	; 0x28
    fa9e:	2401      	movs	r4, #1
    if (cnt != 1)
    faa0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    faa4:	2a01      	cmp	r2, #1
    faa6:	d014      	beq.n	fad2 <dlms_handleReadResponse+0x66>
        if (reply->moreData != DLMS_DATA_REQUEST_TYPES_NONE)
    faa8:	f899 2000 	ldrb.w	r2, [r9]
    faac:	b16a      	cbz	r2, faca <dlms_handleReadResponse+0x5e>
            if ((ret = dlms_getDataFromBlock(&reply->data, 0)) == 0)
    faae:	2100      	movs	r1, #0
    fab0:	f109 0004 	add.w	r0, r9, #4
    fab4:	f7ff fe20 	bl	f6f8 <dlms_getDataFromBlock>
                ret = DLMS_ERROR_CODE_FALSE;
    fab8:	2800      	cmp	r0, #0
    faba:	bf08      	it	eq
    fabc:	f04f 30ff 	moveq.w	r0, #4294967295
}
    fac0:	b004      	add	sp, #16
    fac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    fac6:	2400      	movs	r4, #0
    fac8:	e7ea      	b.n	faa0 <dlms_handleReadResponse+0x34>
        if (!first)
    faca:	b90c      	cbnz	r4, fad0 <dlms_handleReadResponse+0x64>
            reply->data.position = 0;
    facc:	f8a9 400c 	strh.w	r4, [r9, #12]
            first = 1;
    fad0:	2401      	movs	r4, #1
    va_init(&values);
    fad2:	a802      	add	r0, sp, #8
    fad4:	f00a faed 	bl	1a0b2 <va_init>
    for (pos = 0; pos != cnt; ++pos)
    fad8:	2600      	movs	r6, #0
            if ((ret = bb_getUInt8(&reply->data, &ch)) != 0)
    fada:	f109 0804 	add.w	r8, r9, #4
    for (pos = 0; pos != cnt; ++pos)
    fade:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    fae2:	b2b3      	uxth	r3, r6
    fae4:	429a      	cmp	r2, r3
    fae6:	d115      	bne.n	fb14 <dlms_handleReadResponse+0xa8>
    if (values.size != 0)
    fae8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    faec:	b15b      	cbz	r3, fb06 <dlms_handleReadResponse+0x9a>
        reply->dataValue.Arr = gxmalloc(sizeof(variantArray));
    faee:	2008      	movs	r0, #8
    faf0:	f7fc f860 	bl	bbb4 <malloc>
    faf4:	f8c9 0020 	str.w	r0, [r9, #32]
        va_init(reply->dataValue.Arr);
    faf8:	f00a fadb 	bl	1a0b2 <va_init>
        va_attach2(reply->dataValue.Arr, &values);
    fafc:	f8d9 0020 	ldr.w	r0, [r9, #32]
    fb00:	a902      	add	r1, sp, #8
    fb02:	f00a fbc4 	bl	1a28e <va_attach2>
    if (cnt != 1)
    fb06:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    fb0a:	3801      	subs	r0, #1
    fb0c:	bf18      	it	ne
    fb0e:	f04f 30ff 	movne.w	r0, #4294967295
    fb12:	e7d5      	b.n	fac0 <dlms_handleReadResponse+0x54>
        if (first)
    fb14:	b184      	cbz	r4, fb38 <dlms_handleReadResponse+0xcc>
            if ((ret = bb_getUInt8(&reply->data, &ch)) != 0)
    fb16:	f10d 0103 	add.w	r1, sp, #3
    fb1a:	4640      	mov	r0, r8
    fb1c:	f7fd fa3b 	bl	cf96 <bb_getUInt8>
    fb20:	2800      	cmp	r0, #0
    fb22:	d1cd      	bne.n	fac0 <dlms_handleReadResponse+0x54>
            reply->commandType = ch;
    fb24:	f89d 3003 	ldrb.w	r3, [sp, #3]
    fb28:	f889 3003 	strb.w	r3, [r9, #3]
        switch (type)
    fb2c:	2b03      	cmp	r3, #3
    fb2e:	d852      	bhi.n	fbd6 <dlms_handleReadResponse+0x16a>
    fb30:	e8df f003 	tbb	[pc, r3]
    fb34:	38302505 	.word	0x38302505
            type = (DLMS_SINGLE_READ_RESPONSE)reply->commandType;
    fb38:	f899 3003 	ldrb.w	r3, [r9, #3]
    fb3c:	e7f6      	b.n	fb2c <dlms_handleReadResponse+0xc0>
            if (cnt == 1)
    fb3e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    fb42:	2b01      	cmp	r3, #1
    fb44:	d105      	bne.n	fb52 <dlms_handleReadResponse+0xe6>
                ret = dlms_getDataFromBlock(&reply->data, 0);
    fb46:	2100      	movs	r1, #0
    fb48:	4640      	mov	r0, r8
    fb4a:	f7ff fdd5 	bl	f6f8 <dlms_getDataFromBlock>
    for (pos = 0; pos != cnt; ++pos)
    fb4e:	3601      	adds	r6, #1
    fb50:	e7c5      	b.n	fade <dlms_handleReadResponse+0x72>
                reply->readPosition = reply->data.position;
    fb52:	f8b9 300c 	ldrh.w	r3, [r9, #12]
    fb56:	f8a9 302a 	strh.w	r3, [r9, #42]	; 0x2a
                dlms_getValueFromData(settings, reply);
    fb5a:	4649      	mov	r1, r9
    fb5c:	4628      	mov	r0, r5
    fb5e:	f7ff febd 	bl	f8dc <dlms_getValueFromData>
                va_push(&values, &reply->dataValue);
    fb62:	f109 0a18 	add.w	sl, r9, #24
                reply->data.position = reply->readPosition;
    fb66:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
    fb6a:	f8a9 300c 	strh.w	r3, [r9, #12]
                va_push(&values, &reply->dataValue);
    fb6e:	4651      	mov	r1, sl
    fb70:	a802      	add	r0, sp, #8
    fb72:	f00a faca 	bl	1a10a <va_push>
                var_clear(&reply->dataValue);
    fb76:	4650      	mov	r0, sl
    fb78:	f00a fb15 	bl	1a1a6 <var_clear>
    fb7c:	e7e7      	b.n	fb4e <dlms_handleReadResponse+0xe2>
            if ((ret = bb_getUInt8(&reply->data, &ch)) != 0)
    fb7e:	f10d 0103 	add.w	r1, sp, #3
    fb82:	f109 0004 	add.w	r0, r9, #4
    fb86:	f7fd fa06 	bl	cf96 <bb_getUInt8>
    fb8a:	2800      	cmp	r0, #0
    fb8c:	d198      	bne.n	fac0 <dlms_handleReadResponse+0x54>
            return ch;
    fb8e:	f89d 0003 	ldrb.w	r0, [sp, #3]
    fb92:	e795      	b.n	fac0 <dlms_handleReadResponse+0x54>
            if ((ret = dlms_readResponseDataBlockResult(settings, reply, index)) != 0)
    fb94:	463a      	mov	r2, r7
    fb96:	4649      	mov	r1, r9
    fb98:	4628      	mov	r0, r5
    fb9a:	f7ff ff0f 	bl	f9bc <dlms_readResponseDataBlockResult>
    fb9e:	2800      	cmp	r0, #0
    fba0:	d0d5      	beq.n	fb4e <dlms_handleReadResponse+0xe2>
    fba2:	e78d      	b.n	fac0 <dlms_handleReadResponse+0x54>
            if ((ret = bb_getUInt16(&reply->data, &number)) != 0)
    fba4:	a901      	add	r1, sp, #4
    fba6:	4640      	mov	r0, r8
    fba8:	f7fd fa1e 	bl	cfe8 <bb_getUInt16>
    fbac:	2800      	cmp	r0, #0
    fbae:	d187      	bne.n	fac0 <dlms_handleReadResponse+0x54>
            if (number != settings->blockIndex)
    fbb0:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
    fbb4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    fbb8:	4293      	cmp	r3, r2
    fbba:	d10f      	bne.n	fbdc <dlms_handleReadResponse+0x170>
            ++settings->blockIndex;
    fbbc:	3301      	adds	r3, #1
    fbbe:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
            reply->moreData |= DLMS_DATA_REQUEST_TYPES_BLOCK;
    fbc2:	f899 3000 	ldrb.w	r3, [r9]
    fbc6:	f043 0302 	orr.w	r3, r3, #2
    fbca:	f889 3000 	strb.w	r3, [r9]
            break;
    fbce:	e7be      	b.n	fb4e <dlms_handleReadResponse+0xe2>
            return DLMS_ERROR_CODE_OUTOFMEMORY;
    fbd0:	f44f 7082 	mov.w	r0, #260	; 0x104
    fbd4:	e774      	b.n	fac0 <dlms_handleReadResponse+0x54>
    for (pos = 0; pos != cnt; ++pos)
    fbd6:	f240 100f 	movw	r0, #271	; 0x10f
    fbda:	e771      	b.n	fac0 <dlms_handleReadResponse+0x54>
                return DLMS_ERROR_CODE_DATA_BLOCK_NUMBER_INVALID;
    fbdc:	2013      	movs	r0, #19
    fbde:	e76f      	b.n	fac0 <dlms_handleReadResponse+0x54>

0000fbe0 <dlms_handleMethodResponse>:
{
    fbe0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if ((ret = bb_getUInt8(&data->data, &type)) != 0)
    fbe2:	1d0c      	adds	r4, r1, #4
{
    fbe4:	4606      	mov	r6, r0
    fbe6:	460d      	mov	r5, r1
    if ((ret = bb_getUInt8(&data->data, &type)) != 0)
    fbe8:	4620      	mov	r0, r4
    fbea:	f10d 0107 	add.w	r1, sp, #7
    fbee:	f7fd f9d2 	bl	cf96 <bb_getUInt8>
    fbf2:	b9c0      	cbnz	r0, fc26 <dlms_handleMethodResponse+0x46>
    if ((ret = bb_getUInt8(&data->data, &data->invokeId)) != 0)
    fbf4:	f105 0139 	add.w	r1, r5, #57	; 0x39
    fbf8:	4620      	mov	r0, r4
    fbfa:	f7fd f9cc 	bl	cf96 <bb_getUInt8>
    fbfe:	b990      	cbnz	r0, fc26 <dlms_handleMethodResponse+0x46>
    if ((ret = dlms_verifyInvokeId(settings, data)) != 0)
    fc00:	4629      	mov	r1, r5
    fc02:	4630      	mov	r0, r6
    fc04:	f7ff fd8a 	bl	f71c <dlms_verifyInvokeId>
    fc08:	b968      	cbnz	r0, fc26 <dlms_handleMethodResponse+0x46>
    if (type == 1)
    fc0a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fc0e:	2b01      	cmp	r3, #1
    fc10:	d135      	bne.n	fc7e <dlms_handleMethodResponse+0x9e>
        if ((ret = bb_getUInt8(&data->data, &ch)) != 0)
    fc12:	f10d 0106 	add.w	r1, sp, #6
    fc16:	4620      	mov	r0, r4
    fc18:	f7fd f9bd 	bl	cf96 <bb_getUInt8>
    fc1c:	b918      	cbnz	r0, fc26 <dlms_handleMethodResponse+0x46>
        if (ch != 0)
    fc1e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    fc22:	b113      	cbz	r3, fc2a <dlms_handleMethodResponse+0x4a>
            return ch;
    fc24:	4618      	mov	r0, r3
}
    fc26:	b002      	add	sp, #8
    fc28:	bd70      	pop	{r4, r5, r6, pc}
        if (data->data.position < data->data.size)
    fc2a:	89aa      	ldrh	r2, [r5, #12]
    fc2c:	896b      	ldrh	r3, [r5, #10]
    fc2e:	429a      	cmp	r2, r3
    fc30:	d2f9      	bcs.n	fc26 <dlms_handleMethodResponse+0x46>
            if ((ret = bb_getUInt8(&data->data, &ch)) != 0)
    fc32:	f10d 0106 	add.w	r1, sp, #6
    fc36:	4620      	mov	r0, r4
    fc38:	f7fd f9ad 	bl	cf96 <bb_getUInt8>
    fc3c:	2800      	cmp	r0, #0
    fc3e:	d1f2      	bne.n	fc26 <dlms_handleMethodResponse+0x46>
            if (ch == 0)
    fc40:	f89d 3006 	ldrb.w	r3, [sp, #6]
    fc44:	b923      	cbnz	r3, fc50 <dlms_handleMethodResponse+0x70>
                return dlms_getDataFromBlock(&data->data, 0);
    fc46:	4601      	mov	r1, r0
    fc48:	4620      	mov	r0, r4
    fc4a:	f7ff fd55 	bl	f6f8 <dlms_getDataFromBlock>
    fc4e:	e7ea      	b.n	fc26 <dlms_handleMethodResponse+0x46>
            else if (ch == 1) //Data-Access-Result
    fc50:	2b01      	cmp	r3, #1
    fc52:	d117      	bne.n	fc84 <dlms_handleMethodResponse+0xa4>
                if ((ret = bb_getUInt8(&data->data, &ch)) != 0)
    fc54:	f10d 0106 	add.w	r1, sp, #6
    fc58:	4620      	mov	r0, r4
    fc5a:	f7fd f99c 	bl	cf96 <bb_getUInt8>
    fc5e:	2800      	cmp	r0, #0
    fc60:	d1e1      	bne.n	fc26 <dlms_handleMethodResponse+0x46>
                if (ch != 0)
    fc62:	f89d 3006 	ldrb.w	r3, [sp, #6]
    fc66:	2b00      	cmp	r3, #0
    fc68:	d0ed      	beq.n	fc46 <dlms_handleMethodResponse+0x66>
                    if ((ret = bb_getUInt8(&data->data, &ch)) != 0)
    fc6a:	f10d 0106 	add.w	r1, sp, #6
    fc6e:	4620      	mov	r0, r4
    fc70:	f7fd f991 	bl	cf96 <bb_getUInt8>
    fc74:	2800      	cmp	r0, #0
    fc76:	d1d6      	bne.n	fc26 <dlms_handleMethodResponse+0x46>
                    return ch;
    fc78:	f89d 0006 	ldrb.w	r0, [sp, #6]
    fc7c:	e7d3      	b.n	fc26 <dlms_handleMethodResponse+0x46>
        return DLMS_ERROR_CODE_INVALID_COMMAND;
    fc7e:	f44f 7080 	mov.w	r0, #256	; 0x100
    fc82:	e7d0      	b.n	fc26 <dlms_handleMethodResponse+0x46>
                return DLMS_ERROR_CODE_INVALID_TAG;
    fc84:	f240 100f 	movw	r0, #271	; 0x10f
    fc88:	e7cd      	b.n	fc26 <dlms_handleMethodResponse+0x46>

0000fc8a <dlms_handleSetResponse>:
{
    fc8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if ((ret = bb_getUInt8(&data->data, &type)) != 0)
    fc8c:	1d0d      	adds	r5, r1, #4
{
    fc8e:	4606      	mov	r6, r0
    fc90:	460c      	mov	r4, r1
    if ((ret = bb_getUInt8(&data->data, &type)) != 0)
    fc92:	4628      	mov	r0, r5
    fc94:	f10d 0103 	add.w	r1, sp, #3
    fc98:	f7fd f97d 	bl	cf96 <bb_getUInt8>
    fc9c:	b9c0      	cbnz	r0, fcd0 <dlms_handleSetResponse+0x46>
    if ((ret = bb_getUInt8(&data->data, &data->invokeId)) != 0)
    fc9e:	f104 0139 	add.w	r1, r4, #57	; 0x39
    fca2:	4628      	mov	r0, r5
    fca4:	f7fd f977 	bl	cf96 <bb_getUInt8>
    fca8:	b990      	cbnz	r0, fcd0 <dlms_handleSetResponse+0x46>
    if ((ret = dlms_verifyInvokeId(settings, data)) != 0)
    fcaa:	4621      	mov	r1, r4
    fcac:	4630      	mov	r0, r6
    fcae:	f7ff fd35 	bl	f71c <dlms_verifyInvokeId>
    fcb2:	b968      	cbnz	r0, fcd0 <dlms_handleSetResponse+0x46>
    if (type == DLMS_SET_RESPONSE_TYPE_NORMAL)
    fcb4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    fcb8:	2b01      	cmp	r3, #1
    fcba:	d10b      	bne.n	fcd4 <dlms_handleSetResponse+0x4a>
        if ((ret = bb_getUInt8(&data->data, &ch)) != 0)
    fcbc:	a901      	add	r1, sp, #4
    fcbe:	4628      	mov	r0, r5
    fcc0:	f7fd f969 	bl	cf96 <bb_getUInt8>
    fcc4:	b920      	cbnz	r0, fcd0 <dlms_handleSetResponse+0x46>
        if (ch != 0)
    fcc6:	f89d 3004 	ldrb.w	r3, [sp, #4]
            return ch;
    fcca:	2b00      	cmp	r3, #0
    fccc:	bf18      	it	ne
    fcce:	4618      	movne	r0, r3
}
    fcd0:	b002      	add	sp, #8
    fcd2:	bd70      	pop	{r4, r5, r6, pc}
    else if (type == DLMS_SET_RESPONSE_TYPE_DATA_BLOCK || type == DLMS_SET_RESPONSE_TYPE_LAST_DATA_BLOCK)
    fcd4:	3b02      	subs	r3, #2
    fcd6:	2b01      	cmp	r3, #1
    fcd8:	d804      	bhi.n	fce4 <dlms_handleSetResponse+0x5a>
        if ((ret = bb_getUInt32(&data->data, &tmp)) != 0)
    fcda:	a901      	add	r1, sp, #4
    fcdc:	4628      	mov	r0, r5
    fcde:	f7fd f998 	bl	d012 <bb_getUInt32>
    fce2:	e7f5      	b.n	fcd0 <dlms_handleSetResponse+0x46>
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    fce4:	f44f 7081 	mov.w	r0, #258	; 0x102
    fce8:	e7f2      	b.n	fcd0 <dlms_handleSetResponse+0x46>

0000fcea <dlms_changeType>:
{
    fcea:	b573      	push	{r0, r1, r4, r5, r6, lr}
    fcec:	4615      	mov	r5, r2
    fcee:	4606      	mov	r6, r0
    di_init(&info);
    fcf0:	4668      	mov	r0, sp
{
    fcf2:	460c      	mov	r4, r1
    di_init(&info);
    fcf4:	f7fe f809 	bl	dd0a <di_init>
    var_clear(newValue);
    fcf8:	4628      	mov	r0, r5
    fcfa:	f00a fa54 	bl	1a1a6 <var_clear>
    if (value->size == 0)
    fcfe:	88f3      	ldrh	r3, [r6, #6]
    fd00:	b943      	cbnz	r3, fd14 <dlms_changeType+0x2a>
        if (type == DLMS_DATA_TYPE_STRING || type == DLMS_DATA_TYPE_STRING_UTF8)
    fd02:	2c0a      	cmp	r4, #10
    fd04:	d004      	beq.n	fd10 <dlms_changeType+0x26>
    fd06:	2c0c      	cmp	r4, #12
    fd08:	d002      	beq.n	fd10 <dlms_changeType+0x26>
        return DLMS_ERROR_CODE_OK;
    fd0a:	2000      	movs	r0, #0
}
    fd0c:	b002      	add	sp, #8
    fd0e:	bd70      	pop	{r4, r5, r6, pc}
            newValue->vt = type;
    fd10:	702c      	strb	r4, [r5, #0]
    fd12:	e7fa      	b.n	fd0a <dlms_changeType+0x20>
    if (type == DLMS_DATA_TYPE_NONE)
    fd14:	b18c      	cbz	r4, fd3a <dlms_changeType+0x50>
    if ((ret = dlms_getData(value, &info, newValue)) != 0)
    fd16:	462a      	mov	r2, r5
    fd18:	4669      	mov	r1, sp
    fd1a:	4630      	mov	r0, r6
    info.type = type;
    fd1c:	f88d 4004 	strb.w	r4, [sp, #4]
    if ((ret = dlms_getData(value, &info, newValue)) != 0)
    fd20:	f7fe fc83 	bl	e62a <dlms_getData>
    fd24:	2800      	cmp	r0, #0
    fd26:	d1f1      	bne.n	fd0c <dlms_changeType+0x22>
    if (!info.complete)
    fd28:	f89d 3005 	ldrb.w	r3, [sp, #5]
    value->position = 0;
    fd2c:	8130      	strh	r0, [r6, #8]
    if (!info.complete)
    fd2e:	b13b      	cbz	r3, fd40 <dlms_changeType+0x56>
    if (type == DLMS_DATA_TYPE_OCTET_STRING && newValue->vt == DLMS_DATA_TYPE_OCTET_STRING)
    fd30:	2c09      	cmp	r4, #9
    fd32:	d1ea      	bne.n	fd0a <dlms_changeType+0x20>
    fd34:	782b      	ldrb	r3, [r5, #0]
    fd36:	2b09      	cmp	r3, #9
    fd38:	d1e7      	bne.n	fd0a <dlms_changeType+0x20>
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    fd3a:	f44f 7081 	mov.w	r0, #258	; 0x102
    fd3e:	e7e5      	b.n	fd0c <dlms_changeType+0x22>
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    fd40:	f44f 7082 	mov.w	r0, #260	; 0x104
    fd44:	e7e2      	b.n	fd0c <dlms_changeType+0x22>

0000fd46 <dlms_changeType2>:
{
    fd46:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    fd48:	460d      	mov	r5, r1
    if (value->byteArr != NULL)
    fd4a:	6881      	ldr	r1, [r0, #8]
{
    fd4c:	4604      	mov	r4, r0
    fd4e:	4616      	mov	r6, r2
    if (value->byteArr != NULL)
    fd50:	b149      	cbz	r1, fd66 <dlms_changeType2+0x20>
        bb_attach(&bb, value->byteArr->data, value->byteArr->size, value->byteArr->size);
    fd52:	88cb      	ldrh	r3, [r1, #6]
    fd54:	6809      	ldr	r1, [r1, #0]
    fd56:	461a      	mov	r2, r3
    fd58:	a801      	add	r0, sp, #4
    fd5a:	f7fd f8e2 	bl	cf22 <bb_attach>
        bb.position = value->byteArr->position;
    fd5e:	68a3      	ldr	r3, [r4, #8]
    fd60:	891b      	ldrh	r3, [r3, #8]
    fd62:	f8ad 300c 	strh.w	r3, [sp, #12]
    return dlms_changeType(&bb, type, newValue);
    fd66:	4632      	mov	r2, r6
    fd68:	4629      	mov	r1, r5
    fd6a:	a801      	add	r0, sp, #4
    fd6c:	f7ff ffbd 	bl	fcea <dlms_changeType>
}
    fd70:	b004      	add	sp, #16
    fd72:	bd70      	pop	{r4, r5, r6, pc}

0000fd74 <dlms_handleDataNotification>:
{
    fd74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if ((ret = bb_getUInt32(&reply->data, &id)) != 0)
    fd78:	1d0e      	adds	r6, r1, #4
{
    fd7a:	b08c      	sub	sp, #48	; 0x30
    uint16_t start = (uint16_t)(reply->data.position - 1);
    fd7c:	f8b1 800c 	ldrh.w	r8, [r1, #12]
{
    fd80:	4607      	mov	r7, r0
    fd82:	460d      	mov	r5, r1
    if ((ret = bb_getUInt32(&reply->data, &id)) != 0)
    fd84:	4630      	mov	r0, r6
    fd86:	a901      	add	r1, sp, #4
    fd88:	f7fd f943 	bl	d012 <bb_getUInt32>
    fd8c:	4604      	mov	r4, r0
    fd8e:	bb98      	cbnz	r0, fdf8 <dlms_handleDataNotification+0x84>
    reply->time = 0;
    fd90:	6368      	str	r0, [r5, #52]	; 0x34
    if ((ret = bb_getUInt8(&reply->data, &len)) != 0)
    fd92:	f10d 0103 	add.w	r1, sp, #3
    fd96:	4630      	mov	r0, r6
    fd98:	f7fd f8fd 	bl	cf96 <bb_getUInt8>
    fd9c:	4604      	mov	r4, r0
    fd9e:	bb58      	cbnz	r0, fdf8 <dlms_handleDataNotification+0x84>
    if (len != 0)
    fda0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    fda4:	b1db      	cbz	r3, fdde <dlms_handleDataNotification+0x6a>
        var_init(&t);
    fda6:	a808      	add	r0, sp, #32
    fda8:	f00a f8a1 	bl	19eee <var_init>
        bb_attach(&tmp, buff, 0, sizeof(buff));
    fdac:	4622      	mov	r2, r4
    fdae:	230c      	movs	r3, #12
    fdb0:	a905      	add	r1, sp, #20
    fdb2:	a802      	add	r0, sp, #8
    fdb4:	f7fd f8b5 	bl	cf22 <bb_attach>
        if ((ret = bb_set2(&tmp, &reply->data, reply->data.position, len)) != 0 ||
    fdb8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    fdbc:	89aa      	ldrh	r2, [r5, #12]
    fdbe:	4631      	mov	r1, r6
    fdc0:	a802      	add	r0, sp, #8
    fdc2:	f7fd f88d 	bl	cee0 <bb_set2>
    fdc6:	4604      	mov	r4, r0
    fdc8:	b9b0      	cbnz	r0, fdf8 <dlms_handleDataNotification+0x84>
            (ret = dlms_changeType(&tmp, DLMS_DATA_TYPE_DATETIME, &t)) != 0)
    fdca:	aa08      	add	r2, sp, #32
    fdcc:	2119      	movs	r1, #25
    fdce:	a802      	add	r0, sp, #8
    fdd0:	f7ff ff8b 	bl	fcea <dlms_changeType>
        if ((ret = bb_set2(&tmp, &reply->data, reply->data.position, len)) != 0 ||
    fdd4:	4604      	mov	r4, r0
    fdd6:	b978      	cbnz	r0, fdf8 <dlms_handleDataNotification+0x84>
        reply->time = t.dateTime->value;
    fdd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fdda:	681b      	ldr	r3, [r3, #0]
    fddc:	636b      	str	r3, [r5, #52]	; 0x34
    uint16_t start = (uint16_t)(reply->data.position - 1);
    fdde:	f108 31ff 	add.w	r1, r8, #4294967295
    if ((ret = dlms_getDataFromBlock(&reply->data, start)) != 0)
    fde2:	b289      	uxth	r1, r1
    fde4:	4630      	mov	r0, r6
    fde6:	f7ff fc87 	bl	f6f8 <dlms_getDataFromBlock>
    fdea:	4604      	mov	r4, r0
    fdec:	b920      	cbnz	r0, fdf8 <dlms_handleDataNotification+0x84>
    return dlms_getValueFromData(settings, reply);
    fdee:	4629      	mov	r1, r5
    fdf0:	4638      	mov	r0, r7
    fdf2:	f7ff fd73 	bl	f8dc <dlms_getValueFromData>
    fdf6:	4604      	mov	r4, r0
}
    fdf8:	4620      	mov	r0, r4
    fdfa:	b00c      	add	sp, #48	; 0x30
    fdfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000fe00 <dlms_handleConfirmedServiceError>:
{
    fe00:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if ((ret = bb_getUInt8(data, &ch)) != 0)
    fe02:	f10d 0107 	add.w	r1, sp, #7
{
    fe06:	4605      	mov	r5, r0
    if ((ret = bb_getUInt8(data, &ch)) != 0)
    fe08:	f7fd f8c5 	bl	cf96 <bb_getUInt8>
    fe0c:	b9b8      	cbnz	r0, fe3e <dlms_handleConfirmedServiceError+0x3e>
    if ((ret = bb_getUInt8(data, &ch)) != 0)
    fe0e:	f10d 0107 	add.w	r1, sp, #7
    fe12:	4628      	mov	r0, r5
    DLMS_CONFIRMED_SERVICE_ERROR service = (DLMS_CONFIRMED_SERVICE_ERROR)ch;
    fe14:	f89d 4007 	ldrb.w	r4, [sp, #7]
    if ((ret = bb_getUInt8(data, &ch)) != 0)
    fe18:	f7fd f8bd 	bl	cf96 <bb_getUInt8>
    fe1c:	b978      	cbnz	r0, fe3e <dlms_handleConfirmedServiceError+0x3e>
    if ((ret = bb_getUInt8(data, &ch)) != 0)
    fe1e:	f10d 0107 	add.w	r1, sp, #7
    fe22:	4628      	mov	r0, r5
    DLMS_SERVICE_ERROR type = (DLMS_SERVICE_ERROR)ch;
    fe24:	f89d 6007 	ldrb.w	r6, [sp, #7]
    if ((ret = bb_getUInt8(data, &ch)) != 0)
    fe28:	f7fd f8b5 	bl	cf96 <bb_getUInt8>
    fe2c:	b938      	cbnz	r0, fe3e <dlms_handleConfirmedServiceError+0x3e>
    ret <<= 16;
    fe2e:	0420      	lsls	r0, r4, #16
    ret |= ch;
    fe30:	f89d 4007 	ldrb.w	r4, [sp, #7]
    fe34:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
    fe38:	4320      	orrs	r0, r4
    fe3a:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
}
    fe3e:	b002      	add	sp, #8
    fe40:	bd70      	pop	{r4, r5, r6, pc}

0000fe42 <dlms_handleExceptionResponse>:
{
    fe42:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if ((ret = bb_getUInt8(data, &ch)) != 0)
    fe44:	f10d 0103 	add.w	r1, sp, #3
{
    fe48:	4604      	mov	r4, r0
    if ((ret = bb_getUInt8(data, &ch)) != 0)
    fe4a:	f7fd f8a4 	bl	cf96 <bb_getUInt8>
    fe4e:	b9c0      	cbnz	r0, fe82 <dlms_handleExceptionResponse+0x40>
    if ((ret = bb_getUInt8(data, &ch)) != 0)
    fe50:	f10d 0103 	add.w	r1, sp, #3
    fe54:	4620      	mov	r0, r4
    fe56:	f7fd f89e 	bl	cf96 <bb_getUInt8>
    fe5a:	b990      	cbnz	r0, fe82 <dlms_handleExceptionResponse+0x40>
    error = (DLMS_EXCEPTION_SERVICE_ERROR)ch;
    fe5c:	f89d 5003 	ldrb.w	r5, [sp, #3]
    unsigned long value = 0;
    fe60:	9001      	str	r0, [sp, #4]
    if (error == DLMS_EXCEPTION_SERVICE_ERROR_INVOCATION_COUNTER_ERROR && bb_available(data) > 3)
    fe62:	2d06      	cmp	r5, #6
    fe64:	d108      	bne.n	fe78 <dlms_handleExceptionResponse+0x36>
    fe66:	4620      	mov	r0, r4
    fe68:	f7fc feaf 	bl	cbca <bb_available>
    fe6c:	2803      	cmp	r0, #3
    fe6e:	d903      	bls.n	fe78 <dlms_handleExceptionResponse+0x36>
        bb_getUInt32(data, &value);
    fe70:	a901      	add	r1, sp, #4
    fe72:	4620      	mov	r0, r4
    fe74:	f7fd f8cd 	bl	d012 <bb_getUInt32>
    return DLMS_ERROR_TYPE_EXCEPTION_RESPONSE | value << 8 | error;
    fe78:	9801      	ldr	r0, [sp, #4]
    fe7a:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
    fe7e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
}
    fe82:	b003      	add	sp, #12
    fe84:	bd30      	pop	{r4, r5, pc}

0000fe86 <dlms_handleGbt>:
{
    fe86:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if ((ret = bb_getUInt8(&data->data, &bc)) != 0)
    fe8a:	f101 0804 	add.w	r8, r1, #4
    uint16_t index = (uint16_t)(data->data.position - 1);
    fe8e:	898e      	ldrh	r6, [r1, #12]
{
    fe90:	4607      	mov	r7, r0
    fe92:	460d      	mov	r5, r1
    if ((ret = bb_getUInt8(&data->data, &bc)) != 0)
    fe94:	4640      	mov	r0, r8
    fe96:	f10d 0101 	add.w	r1, sp, #1
    fe9a:	f7fd f87c 	bl	cf96 <bb_getUInt8>
    fe9e:	4604      	mov	r4, r0
    fea0:	bb18      	cbnz	r0, feea <dlms_handleGbt+0x64>
    data->streaming = (bc & 0x40) != 0;
    fea2:	f89d 3001 	ldrb.w	r3, [sp, #1]
    fea6:	f3c3 1280 	ubfx	r2, r3, #6, #1
    data->windowSize = (bc & 0x3F);
    feaa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    data->streaming = (bc & 0x40) != 0;
    feae:	642a      	str	r2, [r5, #64]	; 0x40
    data->windowSize = (bc & 0x3F);
    feb0:	646b      	str	r3, [r5, #68]	; 0x44
    if ((ret = bb_getUInt16(&data->data, &bn)) != 0)
    feb2:	f10d 0102 	add.w	r1, sp, #2
    feb6:	4640      	mov	r0, r8
    feb8:	f7fd f896 	bl	cfe8 <bb_getUInt16>
    febc:	4604      	mov	r4, r0
    febe:	b9a0      	cbnz	r0, feea <dlms_handleGbt+0x64>
    if ((ret = bb_getUInt16(&data->data, &bna)) != 0)
    fec0:	a901      	add	r1, sp, #4
    fec2:	4640      	mov	r0, r8
    fec4:	f7fd f890 	bl	cfe8 <bb_getUInt16>
    fec8:	4604      	mov	r4, r0
    feca:	b970      	cbnz	r0, feea <dlms_handleGbt+0x64>
    if (bn == 1)
    fecc:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    fed0:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    fed4:	2901      	cmp	r1, #1
    fed6:	d00c      	beq.n	fef2 <dlms_handleGbt+0x6c>
    else if (bna != settings->blockIndex - 1)
    fed8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
    fedc:	3b01      	subs	r3, #1
    uint16_t index = (uint16_t)(data->data.position - 1);
    fede:	3e01      	subs	r6, #1
    else if (bna != settings->blockIndex - 1)
    fee0:	429a      	cmp	r2, r3
    uint16_t index = (uint16_t)(data->data.position - 1);
    fee2:	b2b6      	uxth	r6, r6
    else if (bna != settings->blockIndex - 1)
    fee4:	d006      	beq.n	fef4 <dlms_handleGbt+0x6e>
        data->data.size = index;
    fee6:	816e      	strh	r6, [r5, #10]
        data->command = DLMS_COMMAND_NONE;
    fee8:	7068      	strb	r0, [r5, #1]
}
    feea:	4620      	mov	r0, r4
    feec:	b002      	add	sp, #8
    feee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        index = 0;
    fef2:	4606      	mov	r6, r0
    data->command = DLMS_COMMAND_NONE;
    fef4:	2300      	movs	r3, #0
    data->blockNumber = bn;
    fef6:	8769      	strh	r1, [r5, #58]	; 0x3a
    data->blockNumberAck = bna;
    fef8:	87aa      	strh	r2, [r5, #60]	; 0x3c
    data->command = DLMS_COMMAND_NONE;
    fefa:	706b      	strb	r3, [r5, #1]
    if (hlp_getObjectCount2(&data->data, &len) != 0)
    fefc:	f10d 0106 	add.w	r1, sp, #6
    ff00:	4640      	mov	r0, r8
    ff02:	f009 fc96 	bl	19832 <hlp_getObjectCount2>
    ff06:	4604      	mov	r4, r0
    ff08:	2800      	cmp	r0, #0
    ff0a:	d13c      	bne.n	ff86 <dlms_handleGbt+0x100>
    if (len != (data->data.size - data->data.position))
    ff0c:	896b      	ldrh	r3, [r5, #10]
    ff0e:	89a9      	ldrh	r1, [r5, #12]
    ff10:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    ff14:	1a5b      	subs	r3, r3, r1
    ff16:	429a      	cmp	r2, r3
    ff18:	d001      	beq.n	ff1e <dlms_handleGbt+0x98>
        data->complete = 0;
    ff1a:	7428      	strb	r0, [r5, #16]
        return 0;
    ff1c:	e7e5      	b.n	feea <dlms_handleGbt+0x64>
    if ((ret = dlms_getDataFromBlock(&data->data, index)) != 0)
    ff1e:	4631      	mov	r1, r6
    ff20:	4640      	mov	r0, r8
    ff22:	f7ff fbe9 	bl	f6f8 <dlms_getDataFromBlock>
    ff26:	4604      	mov	r4, r0
    ff28:	2800      	cmp	r0, #0
    ff2a:	d1de      	bne.n	feea <dlms_handleGbt+0x64>
    if ((bc & 0x80) == 0) {
    ff2c:	f99d 2001 	ldrsb.w	r2, [sp, #1]
    ff30:	782b      	ldrb	r3, [r5, #0]
    ff32:	2a00      	cmp	r2, #0
    ff34:	db03      	blt.n	ff3e <dlms_handleGbt+0xb8>
        data->moreData |= DLMS_DATA_REQUEST_TYPES_GBT;
    ff36:	f043 0304 	orr.w	r3, r3, #4
    ff3a:	702b      	strb	r3, [r5, #0]
    ff3c:	e7d5      	b.n	feea <dlms_handleGbt+0x64>
        data->moreData &= ~DLMS_DATA_REQUEST_TYPES_GBT;
    ff3e:	f023 0304 	bic.w	r3, r3, #4
    ff42:	702b      	strb	r3, [r5, #0]
        if (data->data.size != 0)
    ff44:	896b      	ldrh	r3, [r5, #10]
    ff46:	2b00      	cmp	r3, #0
    ff48:	d0cf      	beq.n	feea <dlms_handleGbt+0x64>
            data->data.position = 0;
    ff4a:	81a8      	strh	r0, [r5, #12]
            if ((ret = dlms_getPdu(settings, data, 0)) != 0)
    ff4c:	4602      	mov	r2, r0
    ff4e:	4629      	mov	r1, r5
    ff50:	4638      	mov	r0, r7
    ff52:	f7f2 fdb1 	bl	2ab8 <dlms_getPdu>
    ff56:	b9a0      	cbnz	r0, ff82 <dlms_handleGbt+0xfc>
            if (data->data.position != data->data.size
    ff58:	89aa      	ldrh	r2, [r5, #12]
    ff5a:	896b      	ldrh	r3, [r5, #10]
    ff5c:	429a      	cmp	r2, r3
    ff5e:	d0c4      	beq.n	feea <dlms_handleGbt+0x64>
                    data->command == DLMS_COMMAND_READ_RESPONSE ||
    ff60:	786b      	ldrb	r3, [r5, #1]
                && (
    ff62:	2b0c      	cmp	r3, #12
    ff64:	d001      	beq.n	ff6a <dlms_handleGbt+0xe4>
                    data->command == DLMS_COMMAND_READ_RESPONSE ||
    ff66:	2bc4      	cmp	r3, #196	; 0xc4
    ff68:	d1bf      	bne.n	feea <dlms_handleGbt+0x64>
                && (data->moreData == DLMS_DATA_REQUEST_TYPES_NONE || data->peek))
    ff6a:	782b      	ldrb	r3, [r5, #0]
    ff6c:	b11b      	cbz	r3, ff76 <dlms_handleGbt+0xf0>
    ff6e:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
    ff72:	2b00      	cmp	r3, #0
    ff74:	d0b9      	beq.n	feea <dlms_handleGbt+0x64>
                data->data.position = 0;
    ff76:	2300      	movs	r3, #0
    ff78:	81ab      	strh	r3, [r5, #12]
                ret = dlms_getValueFromData(settings, data);
    ff7a:	4629      	mov	r1, r5
    ff7c:	4638      	mov	r0, r7
    ff7e:	f7ff fcad 	bl	f8dc <dlms_getValueFromData>
    ff82:	4604      	mov	r4, r0
    ff84:	e7b1      	b.n	feea <dlms_handleGbt+0x64>
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    ff86:	f44f 7482 	mov.w	r4, #260	; 0x104
    ff8a:	e7ae      	b.n	feea <dlms_handleGbt+0x64>

0000ff8c <dlms_handleGloDedResponse>:
{
    ff8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if ((data->moreData & DLMS_DATA_REQUEST_TYPES_FRAME) == 0)
    ff90:	780b      	ldrb	r3, [r1, #0]
    ff92:	07db      	lsls	r3, r3, #31
{
    ff94:	b08d      	sub	sp, #52	; 0x34
    ff96:	4605      	mov	r5, r0
    ff98:	460c      	mov	r4, r1
    ff9a:	4616      	mov	r6, r2
    if ((data->moreData & DLMS_DATA_REQUEST_TYPES_FRAME) == 0)
    ff9c:	d461      	bmi.n	10062 <dlms_handleGloDedResponse+0xd6>
        bb_attach(&bb, data->data.data + index, bb_available(&data->data), bb_getCapacity(&data->data));
    ff9e:	460f      	mov	r7, r1
        data->data.position = index;
    ffa0:	818a      	strh	r2, [r1, #12]
        bb_attach(&bb, data->data.data + index, bb_available(&data->data), bb_getCapacity(&data->data));
    ffa2:	f857 1f04 	ldr.w	r1, [r7, #4]!
    ffa6:	4638      	mov	r0, r7
    ffa8:	eb01 0802 	add.w	r8, r1, r2
    ffac:	f7fc fe0d 	bl	cbca <bb_available>
    ffb0:	4681      	mov	r9, r0
    ffb2:	4638      	mov	r0, r7
    ffb4:	f7fc fe0f 	bl	cbd6 <bb_getCapacity>
    ffb8:	464a      	mov	r2, r9
    ffba:	4603      	mov	r3, r0
    ffbc:	4641      	mov	r1, r8
    ffbe:	a809      	add	r0, sp, #36	; 0x24
    ffc0:	f7fc ffaf 	bl	cf22 <bb_attach>
    return settings->cipher.dedicatedKey != NULL;
    ffc4:	f8d5 c0d4 	ldr.w	ip, [r5, #212]	; 0xd4
    ffc8:	f105 00a8 	add.w	r0, r5, #168	; 0xa8
    ffcc:	f105 011c 	add.w	r1, r5, #28
    ffd0:	aa06      	add	r2, sp, #24
    ffd2:	f10d 0716 	add.w	r7, sp, #22
    ffd6:	f10d 0317 	add.w	r3, sp, #23
        if (dlms_useDedicatedKey(settings) && (settings->connected & DLMS_CONNECTION_STATE_DLMS) != 0)
    ffda:	f1bc 0f00 	cmp.w	ip, #0
    ffde:	d033      	beq.n	10048 <dlms_handleGloDedResponse+0xbc>
    ffe0:	f895 e0a4 	ldrb.w	lr, [r5, #164]	; 0xa4
    ffe4:	f01e 0f02 	tst.w	lr, #2
    ffe8:	d02e      	beq.n	10048 <dlms_handleGloDedResponse+0xbc>
            if ((ret = cip_decrypt(&settings->cipher,
    ffea:	e9cd 7201 	strd	r7, r2, [sp, #4]
    ffee:	9300      	str	r3, [sp, #0]
    fff0:	4662      	mov	r2, ip
    fff2:	ab09      	add	r3, sp, #36	; 0x24
    fff4:	f7f1 fdf6 	bl	1be4 <cip_decrypt>
    fff8:	bb18      	cbnz	r0, 10042 <dlms_handleGloDedResponse+0xb6>
        data->data.size = bb.size + index;
    fffa:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
        data->data.position += bb.position;
    fffe:	89a3      	ldrh	r3, [r4, #12]
        data->data.size = bb.size + index;
   10000:	4416      	add	r6, r2
        data->data.position += bb.position;
   10002:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
        data->data.size = bb.size + index;
   10006:	8166      	strh	r6, [r4, #10]
        data->data.position += bb.position;
   10008:	4413      	add	r3, r2
   1000a:	81a3      	strh	r3, [r4, #12]
        if (settings->cipher.security != security)
   1000c:	f895 20a8 	ldrb.w	r2, [r5, #168]	; 0xa8
   10010:	f89d 3017 	ldrb.w	r3, [sp, #23]
   10014:	429a      	cmp	r2, r3
   10016:	d11e      	bne.n	10056 <dlms_handleGloDedResponse+0xca>
        if (settings->expectedInvocationCounter != NULL)
   10018:	f8d5 00f0 	ldr.w	r0, [r5, #240]	; 0xf0
   1001c:	b148      	cbz	r0, 10032 <dlms_handleGloDedResponse+0xa6>
            if (invocationCounter != *settings->expectedInvocationCounter)
   1001e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   10022:	6801      	ldr	r1, [r0, #0]
   10024:	2700      	movs	r7, #0
   10026:	429f      	cmp	r7, r3
   10028:	bf08      	it	eq
   1002a:	4291      	cmpeq	r1, r2
   1002c:	d116      	bne.n	1005c <dlms_handleGloDedResponse+0xd0>
            * settings->expectedInvocationCounter = (uint32_t)(1 + invocationCounter);
   1002e:	3101      	adds	r1, #1
   10030:	6001      	str	r1, [r0, #0]
        data->command = DLMS_COMMAND_NONE;
   10032:	2200      	movs	r2, #0
   10034:	7062      	strb	r2, [r4, #1]
        ret = dlms_getPdu(settings, data, 0);
   10036:	4621      	mov	r1, r4
   10038:	4628      	mov	r0, r5
   1003a:	f7f2 fd3d 	bl	2ab8 <dlms_getPdu>
        data->cipherIndex = (uint16_t)data->data.size;
   1003e:	8963      	ldrh	r3, [r4, #10]
   10040:	8663      	strh	r3, [r4, #50]	; 0x32
}
   10042:	b00d      	add	sp, #52	; 0x34
   10044:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            if ((ret = cip_decrypt(&settings->cipher,
   10048:	e9cd 7201 	strd	r7, r2, [sp, #4]
   1004c:	9300      	str	r3, [sp, #0]
   1004e:	f105 02ac 	add.w	r2, r5, #172	; 0xac
   10052:	ab09      	add	r3, sp, #36	; 0x24
   10054:	e7ce      	b.n	fff4 <dlms_handleGloDedResponse+0x68>
            return DLMS_ERROR_CODE_INVALID_DECIPHERING_ERROR;
   10056:	f240 101d 	movw	r0, #285	; 0x11d
   1005a:	e7f2      	b.n	10042 <dlms_handleGloDedResponse+0xb6>
                return DLMS_ERROR_CODE_INVOCATION_COUNTER_TOO_SMALL;
   1005c:	f44f 708e 	mov.w	r0, #284	; 0x11c
   10060:	e7ef      	b.n	10042 <dlms_handleGloDedResponse+0xb6>
    int ret = 0;
   10062:	2000      	movs	r0, #0
   10064:	e7ed      	b.n	10042 <dlms_handleGloDedResponse+0xb6>

00010066 <dlms_handleGeneralCiphering>:
{
   10066:	b5f0      	push	{r4, r5, r6, r7, lr}
    if ((data->moreData & DLMS_DATA_REQUEST_TYPES_FRAME) == 0)
   10068:	780b      	ldrb	r3, [r1, #0]
   1006a:	07db      	lsls	r3, r3, #31
{
   1006c:	b089      	sub	sp, #36	; 0x24
   1006e:	4606      	mov	r6, r0
   10070:	460d      	mov	r5, r1
    if ((data->moreData & DLMS_DATA_REQUEST_TYPES_FRAME) == 0)
   10072:	d42b      	bmi.n	100cc <dlms_handleGeneralCiphering+0x66>
        --data->data.position;
   10074:	898b      	ldrh	r3, [r1, #12]
   10076:	3b01      	subs	r3, #1
   10078:	818b      	strh	r3, [r1, #12]
        if ((ret = cip_decrypt(&settings->cipher,
   1007a:	ab06      	add	r3, sp, #24
   1007c:	9302      	str	r3, [sp, #8]
   1007e:	f10d 0317 	add.w	r3, sp, #23
   10082:	1d0f      	adds	r7, r1, #4
   10084:	9301      	str	r3, [sp, #4]
   10086:	f10d 0316 	add.w	r3, sp, #22
   1008a:	9300      	str	r3, [sp, #0]
   1008c:	f100 02ac 	add.w	r2, r0, #172	; 0xac
   10090:	f100 011c 	add.w	r1, r0, #28
   10094:	463b      	mov	r3, r7
   10096:	30a8      	adds	r0, #168	; 0xa8
   10098:	f7f1 fda4 	bl	1be4 <cip_decrypt>
   1009c:	4604      	mov	r4, r0
   1009e:	b990      	cbnz	r0, 100c6 <dlms_handleGeneralCiphering+0x60>
        if ((ret = bb_getUInt8(&data->data, &ch)) != 0)
   100a0:	f10d 0115 	add.w	r1, sp, #21
   100a4:	4638      	mov	r0, r7
   100a6:	f7fc ff76 	bl	cf96 <bb_getUInt8>
   100aa:	4604      	mov	r4, r0
   100ac:	b958      	cbnz	r0, 100c6 <dlms_handleGeneralCiphering+0x60>
        if (security != DLMS_SECURITY_NONE)
   100ae:	f89d 3016 	ldrb.w	r3, [sp, #22]
        data->command = DLMS_COMMAND_NONE;
   100b2:	7068      	strb	r0, [r5, #1]
        if (security != DLMS_SECURITY_NONE)
   100b4:	b13b      	cbz	r3, 100c6 <dlms_handleGeneralCiphering+0x60>
            if ((ret = dlms_getPdu(settings, data, 0)) != 0)
   100b6:	4602      	mov	r2, r0
   100b8:	4629      	mov	r1, r5
   100ba:	4630      	mov	r0, r6
   100bc:	f7f2 fcfc 	bl	2ab8 <dlms_getPdu>
   100c0:	2800      	cmp	r0, #0
   100c2:	bf18      	it	ne
   100c4:	4604      	movne	r4, r0
}
   100c6:	4620      	mov	r0, r4
   100c8:	b009      	add	sp, #36	; 0x24
   100ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 0;
   100cc:	2400      	movs	r4, #0
   100ce:	e7fa      	b.n	100c6 <dlms_handleGeneralCiphering+0x60>

000100d0 <dlms_getData2>:
int dlms_getData2(
    dlmsSettings* settings,
    gxByteBuffer* reply,
    gxReplyData* data,
    unsigned char first)
{
   100d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   100d2:	b087      	sub	sp, #28
   100d4:	461f      	mov	r7, r3
    int ret;
    unsigned char frame = 0;
   100d6:	2300      	movs	r3, #0
   100d8:	f88d 3017 	strb.w	r3, [sp, #23]
    switch (settings->interfaceType)
   100dc:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
{
   100e0:	4605      	mov	r5, r0
   100e2:	460e      	mov	r6, r1
   100e4:	4614      	mov	r4, r2
   100e6:	2b06      	cmp	r3, #6
   100e8:	d862      	bhi.n	101b0 <dlms_getData2+0xe0>
   100ea:	e8df f003 	tbb	[pc, r3]
   100ee:	1504      	.short	0x1504
   100f0:	4704191d 	.word	0x4704191d
   100f4:	4b          	.byte	0x4b
   100f5:	00          	.byte	0x00
    {
#ifndef DLMS_IGNORE_HDLC
    case DLMS_INTERFACE_TYPE_HDLC:
    case DLMS_INTERFACE_TYPE_HDLC_WITH_MODE_E:
        ret = dlms_getHdlcData(settings->server, settings, reply, data, &frame, data->preEstablished, first);
   100f6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   100fa:	9301      	str	r3, [sp, #4]
   100fc:	f10d 0317 	add.w	r3, sp, #23
   10100:	9300      	str	r3, [sp, #0]
   10102:	9702      	str	r7, [sp, #8]
   10104:	460a      	mov	r2, r1
   10106:	4623      	mov	r3, r4
   10108:	4601      	mov	r1, r0
   1010a:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
   1010e:	f7fe fea8 	bl	ee62 <dlms_getHdlcData>
    default:
        // Invalid Interface type.
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    if (ret != 0)
   10112:	b178      	cbz	r0, 10134 <dlms_getData2+0x64>
            return DLMS_ERROR_CODE_REJECTED;
        }
        return DLMS_ERROR_CODE_OK;
    }
    return dlms_getPdu(settings, data, first);
}
   10114:	b007      	add	sp, #28
   10116:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ret = dlms_getTcpData(settings, reply, data);
   10118:	4622      	mov	r2, r4
   1011a:	f7ff f87d 	bl	f218 <dlms_getTcpData>
        break;
   1011e:	e7f8      	b.n	10112 <dlms_getData2+0x42>
        ret = dlms_getMBusData(settings, reply, data);
   10120:	4622      	mov	r2, r4
   10122:	f7ff f8b8 	bl	f296 <dlms_getMBusData>
        break;
   10126:	e7f4      	b.n	10112 <dlms_getData2+0x42>
        data->packetLength = reply->size;
   10128:	88cb      	ldrh	r3, [r1, #6]
   1012a:	85a3      	strh	r3, [r4, #44]	; 0x2c
        data->complete = reply->size != 0;
   1012c:	3b00      	subs	r3, #0
   1012e:	bf18      	it	ne
   10130:	2301      	movne	r3, #1
   10132:	7423      	strb	r3, [r4, #16]
    if (!data->complete)
   10134:	7c23      	ldrb	r3, [r4, #16]
   10136:	b1fb      	cbz	r3, 10178 <dlms_getData2+0xa8>
    if (settings->interfaceType != DLMS_INTERFACE_TYPE_PLC_HDLC)
   10138:	f895 0035 	ldrb.w	r0, [r5, #53]	; 0x35
   1013c:	2806      	cmp	r0, #6
   1013e:	d127      	bne.n	10190 <dlms_getData2+0xc0>
    if (((frame != 0x13 && frame != 0x3) || (data->moreData != DLMS_DATA_REQUEST_TYPES_NONE && data->moreData != DLMS_DATA_REQUEST_TYPES_GBT)) && (frame & 0x1) != 0)
   10140:	f89d 3017 	ldrb.w	r3, [sp, #23]
   10144:	f003 02ef 	and.w	r2, r3, #239	; 0xef
   10148:	2a03      	cmp	r2, #3
   1014a:	d103      	bne.n	10154 <dlms_getData2+0x84>
   1014c:	7822      	ldrb	r2, [r4, #0]
   1014e:	f012 0ffb 	tst.w	r2, #251	; 0xfb
   10152:	d027      	beq.n	101a4 <dlms_getData2+0xd4>
   10154:	07db      	lsls	r3, r3, #31
   10156:	d525      	bpl.n	101a4 <dlms_getData2+0xd4>
        if (dlms_useHdlc(settings->interfaceType) && data->data.size != 0)
   10158:	f895 0035 	ldrb.w	r0, [r5, #53]	; 0x35
   1015c:	f7fd fe9a 	bl	de94 <dlms_useHdlc>
   10160:	b138      	cbz	r0, 10172 <dlms_getData2+0xa2>
   10162:	8963      	ldrh	r3, [r4, #10]
   10164:	b12b      	cbz	r3, 10172 <dlms_getData2+0xa2>
            if (reply->position != reply->size)
   10166:	8933      	ldrh	r3, [r6, #8]
   10168:	88f2      	ldrh	r2, [r6, #6]
   1016a:	429a      	cmp	r2, r3
                reply->position += 3;
   1016c:	bf1c      	itt	ne
   1016e:	3303      	addne	r3, #3
   10170:	8133      	strhne	r3, [r6, #8]
        if (data->command == DLMS_COMMAND_REJECTED)
   10172:	7863      	ldrb	r3, [r4, #1]
   10174:	2b97      	cmp	r3, #151	; 0x97
   10176:	d01e      	beq.n	101b6 <dlms_getData2+0xe6>
        return DLMS_ERROR_CODE_OK;
   10178:	2000      	movs	r0, #0
   1017a:	e7cb      	b.n	10114 <dlms_getData2+0x44>
        ret = dlms_getPlcData(settings, reply, data);
   1017c:	4622      	mov	r2, r4
   1017e:	f7ff f8f8 	bl	f372 <dlms_getPlcData>
        break;
   10182:	e7c6      	b.n	10112 <dlms_getData2+0x42>
        ret = dlms_getPlcHdlcData(settings, reply, data, &frame);
   10184:	f10d 0317 	add.w	r3, sp, #23
   10188:	4622      	mov	r2, r4
   1018a:	f7ff f9d3 	bl	f534 <dlms_getPlcHdlcData>
        break;
   1018e:	e7c0      	b.n	10112 <dlms_getData2+0x42>
        if ((ret = dlms_getDataFromFrame(reply, data, dlms_useHdlc(settings->interfaceType))) != 0)
   10190:	f7fd fe80 	bl	de94 <dlms_useHdlc>
   10194:	4621      	mov	r1, r4
   10196:	4602      	mov	r2, r0
   10198:	4630      	mov	r0, r6
   1019a:	f7fe fe3b 	bl	ee14 <dlms_getDataFromFrame>
   1019e:	2800      	cmp	r0, #0
   101a0:	d0ce      	beq.n	10140 <dlms_getData2+0x70>
   101a2:	e7b7      	b.n	10114 <dlms_getData2+0x44>
    return dlms_getPdu(settings, data, first);
   101a4:	463a      	mov	r2, r7
   101a6:	4621      	mov	r1, r4
   101a8:	4628      	mov	r0, r5
   101aa:	f7f2 fc85 	bl	2ab8 <dlms_getPdu>
   101ae:	e7b1      	b.n	10114 <dlms_getData2+0x44>
    switch (settings->interfaceType)
   101b0:	f44f 7081 	mov.w	r0, #258	; 0x102
   101b4:	e7ae      	b.n	10114 <dlms_getData2+0x44>
            return DLMS_ERROR_CODE_REJECTED;
   101b6:	f06f 0001 	mvn.w	r0, #1
   101ba:	e7ab      	b.n	10114 <dlms_getData2+0x44>

000101bc <dlms_isPduFull>:
    }
    return 0;
}

int dlms_isPduFull(dlmsSettings* settings, gxByteBuffer* data, uint16_t* size)
{
   101bc:	b570      	push	{r4, r5, r6, lr}
   101be:	4605      	mov	r5, r0
    unsigned char ret;
    if (bb_isAttached(data))
   101c0:	4608      	mov	r0, r1
{
   101c2:	460e      	mov	r6, r1
   101c4:	4614      	mov	r4, r2
    if (bb_isAttached(data))
   101c6:	f7fc fcfc 	bl	cbc2 <bb_isAttached>
   101ca:	b198      	cbz	r0, 101f4 <dlms_isPduFull+0x38>
    {
        uint16_t len = 0;
        if (size != NULL)
   101cc:	b124      	cbz	r4, 101d8 <dlms_isPduFull+0x1c>
        {
            if (*size == 0)
   101ce:	8823      	ldrh	r3, [r4, #0]
   101d0:	b90b      	cbnz	r3, 101d6 <dlms_isPduFull+0x1a>
   101d2:	88f3      	ldrh	r3, [r6, #6]
            {
                *size = (uint16_t)data->size;
   101d4:	8023      	strh	r3, [r4, #0]
            }
            len = *size;
   101d6:	8824      	ldrh	r4, [r4, #0]
        }
#ifndef DLMS_IGNORE_HIGH_GMAC
        if (settings->cipher.security != DLMS_SECURITY_NONE)
   101d8:	88f3      	ldrh	r3, [r6, #6]
   101da:	f895 20a8 	ldrb.w	r2, [r5, #168]	; 0xa8
   101de:	441c      	add	r4, r3
   101e0:	b223      	sxth	r3, r4
   101e2:	b142      	cbz	r2, 101f6 <dlms_isPduFull+0x3a>
        {
            len += 20 + CIPHERING_HEADER_SIZE + (uint16_t)data->size;
   101e4:	332a      	adds	r3, #42	; 0x2a
        else
#endif //DLMS_IGNORE_HIGH_GMAC
        {
            len += 20 + (uint16_t)data->size;
        }
        ret = settings->maxPduSize < len;
   101e6:	f8b5 0052 	ldrh.w	r0, [r5, #82]	; 0x52
            len += 20 + (uint16_t)data->size;
   101ea:	b29b      	uxth	r3, r3
        ret = settings->maxPduSize < len;
   101ec:	4298      	cmp	r0, r3
   101ee:	bf2c      	ite	cs
   101f0:	2000      	movcs	r0, #0
   101f2:	2001      	movcc	r0, #1
    else
    {
        ret = 0;
    }
    return ret;
}
   101f4:	bd70      	pop	{r4, r5, r6, pc}
            len += 20 + (uint16_t)data->size;
   101f6:	3314      	adds	r3, #20
   101f8:	e7f5      	b.n	101e6 <dlms_isPduFull+0x2a>

000101fa <resetBlockIndex>:
#endif //DLMS_IGNORE_PLC

void resetBlockIndex(
    dlmsSettings* settings)
{
    settings->blockIndex = 1;
   101fa:	2301      	movs	r3, #1
   101fc:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
}
   10200:	4770      	bx	lr

00010202 <resetFrameSequence>:

void resetFrameSequence(
    dlmsSettings* settings)
{
    if (settings->server)
   10202:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
   10206:	b123      	cbz	r3, 10212 <resetFrameSequence+0x10>
    {
        settings->senderFrame = SERVER_START_SENDER_FRAME_SEQUENCE;
   10208:	f64f 631e 	movw	r3, #65054	; 0xfe1e
        settings->receiverFrame = SERVER_START_RECEIVER_FRAME_SEQUENCE;
    }
    else
    {
        settings->senderFrame = CLIENT_START_SENDER_FRAME_SEQUENCE;
   1020c:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
        settings->receiverFrame = CLIENT_START_RCEIVER_FRAME_SEQUENCE;
    }
}
   10210:	4770      	bx	lr
        settings->senderFrame = CLIENT_START_SENDER_FRAME_SEQUENCE;
   10212:	f640 63fe 	movw	r3, #3838	; 0xefe
   10216:	e7f9      	b.n	1020c <resetFrameSequence+0xa>

00010218 <increaseReceiverSequence>:

unsigned char increaseReceiverSequence(
    unsigned char value)
{
    return ((value + 0x20) | 0x10 | (value & 0xE));
   10218:	b240      	sxtb	r0, r0
   1021a:	f100 0320 	add.w	r3, r0, #32
   1021e:	f000 000e 	and.w	r0, r0, #14
   10222:	4318      	orrs	r0, r3
   10224:	f040 0010 	orr.w	r0, r0, #16
}
   10228:	b2c0      	uxtb	r0, r0
   1022a:	4770      	bx	lr

0001022c <increaseSendSequence>:
//            Frame value.
// Increased sender frame sequence.
unsigned char increaseSendSequence(
    unsigned char value)
{
    return (unsigned char)((value & 0xF0) | ((value + 0x2) & 0xE));
   1022c:	b243      	sxtb	r3, r0
   1022e:	1c98      	adds	r0, r3, #2
   10230:	f000 000e 	and.w	r0, r0, #14
   10234:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
   10238:	4318      	orrs	r0, r3
   1023a:	4770      	bx	lr

0001023c <checkFrame>:
unsigned char checkFrame(
    dlmsSettings* settings,
    unsigned char frame)
{
    //If notify
    if (frame == 0x13)
   1023c:	2913      	cmp	r1, #19
{
   1023e:	b538      	push	{r3, r4, r5, lr}
   10240:	4604      	mov	r4, r0
    if (frame == 0x13)
   10242:	d00a      	beq.n	1025a <checkFrame+0x1e>
    {
        return 1;
    }
    // If U frame.
    if ((frame & 0x3) == 3)
   10244:	f001 0203 	and.w	r2, r1, #3
   10248:	2a03      	cmp	r2, #3
   1024a:	d108      	bne.n	1025e <checkFrame+0x22>
    {
        if (frame == 0x73 || frame == 0x93)
   1024c:	2973      	cmp	r1, #115	; 0x73
   1024e:	d001      	beq.n	10254 <checkFrame+0x18>
   10250:	2993      	cmp	r1, #147	; 0x93
   10252:	d102      	bne.n	1025a <checkFrame+0x1e>
        {
            resetFrameSequence(settings);
   10254:	4620      	mov	r0, r4
   10256:	f7ff ffd4 	bl	10202 <resetFrameSequence>
        return 1;
   1025a:	2201      	movs	r2, #1
   1025c:	e00c      	b.n	10278 <checkFrame+0x3c>
        }
        return 1;
    }
    // If S -frame
    if ((frame & 0x3) == 1)
   1025e:	f890 5057 	ldrb.w	r5, [r0, #87]	; 0x57
   10262:	2a01      	cmp	r2, #1
    {
        unsigned char ch = increaseReceiverSequence(settings->receiverFrame);
   10264:	4628      	mov	r0, r5
    if ((frame & 0x3) == 1)
   10266:	d109      	bne.n	1027c <checkFrame+0x40>
        unsigned char ch = increaseReceiverSequence(settings->receiverFrame);
   10268:	f7ff ffd6 	bl	10218 <increaseReceiverSequence>
        if ((frame & 0xE0) != (ch & 0xE0))
   1026c:	4041      	eors	r1, r0
   1026e:	f011 0fe0 	tst.w	r1, #224	; 0xe0
   10272:	d11a      	bne.n	102aa <checkFrame+0x6e>
        {
            return 0;
        }
        settings->receiverFrame = increaseReceiverSequence(settings->receiverFrame);
   10274:	f884 0057 	strb.w	r0, [r4, #87]	; 0x57
    }
#if defined(_WIN32) || defined(_WIN64) || defined(__linux__)//If Windows or Linux
    printf("Invalid frame %X. Expected %X.\r\n", frame, expected);
#endif
    return 0;
}
   10278:	4610      	mov	r0, r2
   1027a:	bd38      	pop	{r3, r4, r5, pc}
    if ((settings->senderFrame & 0x1) == 0)
   1027c:	f7ff ffd6 	bl	1022c <increaseSendSequence>
   10280:	f894 2056 	ldrb.w	r2, [r4, #86]	; 0x56
   10284:	07d2      	lsls	r2, r2, #31
   10286:	d406      	bmi.n	10296 <checkFrame+0x5a>
        expected = increaseReceiverSequence(increaseSendSequence(settings->receiverFrame));
   10288:	f7ff ffc6 	bl	10218 <increaseReceiverSequence>
        if (frame == expected)
   1028c:	4281      	cmp	r1, r0
   1028e:	d104      	bne.n	1029a <checkFrame+0x5e>
            settings->receiverFrame = frame;
   10290:	f884 1057 	strb.w	r1, [r4, #87]	; 0x57
            return 1;
   10294:	e7e1      	b.n	1025a <checkFrame+0x1e>
        if (frame == expected)
   10296:	4288      	cmp	r0, r1
   10298:	e7f9      	b.n	1028e <checkFrame+0x52>
    if ((!settings->server && settings->receiverFrame == SERVER_START_RECEIVER_FRAME_SEQUENCE) ||
   1029a:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
   1029e:	b912      	cbnz	r2, 102a6 <checkFrame+0x6a>
   102a0:	2dfe      	cmp	r5, #254	; 0xfe
   102a2:	d1e9      	bne.n	10278 <checkFrame+0x3c>
   102a4:	e7f4      	b.n	10290 <checkFrame+0x54>
        (settings->server && settings->receiverFrame == CLIENT_START_RCEIVER_FRAME_SEQUENCE))
   102a6:	2d0e      	cmp	r5, #14
   102a8:	d0f2      	beq.n	10290 <checkFrame+0x54>
            return 0;
   102aa:	2200      	movs	r2, #0
   102ac:	e7e4      	b.n	10278 <checkFrame+0x3c>

000102ae <arr_init>:

//Initialize gxArray.
void arr_init(gxArray* arr)
{
    arr->capacity = 0;
    arr->data = NULL;
   102ae:	2300      	movs	r3, #0
    arr->capacity = 0;
   102b0:	e9c0 3300 	strd	r3, r3, [r0]
    arr->size = 0;
#ifndef DLMS_IGNORE_MALLOC
    arr->position = 0;
   102b4:	6083      	str	r3, [r0, #8]
#endif //DLMS_IGNORE_MALLOC
}
   102b6:	4770      	bx	lr

000102b8 <arr_getCapacity>:
    return (arr->capacity & 0x8000) == 0x8000;
}

uint16_t arr_getCapacity(gxArray* arr)
{
    return arr->capacity & 0x7FFF;
   102b8:	8880      	ldrh	r0, [r0, #4]
}
   102ba:	f3c0 000e 	ubfx	r0, r0, #0, #15
   102be:	4770      	bx	lr

000102c0 <arr_capacity>:
}


//Allocate new size for the array in bytes.
int arr_capacity(gxArray* arr, int capacity)
{
   102c0:	b538      	push	{r3, r4, r5, lr}
#ifndef DLMS_IGNORE_MALLOC
    if (!arr_isAttached(arr))
   102c2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
   102c6:	2b00      	cmp	r3, #0
{
   102c8:	4604      	mov	r4, r0
   102ca:	460d      	mov	r5, r1
    if (!arr_isAttached(arr))
   102cc:	db06      	blt.n	102dc <arr_capacity+0x1c>
    {
        if (capacity == 0)
   102ce:	6800      	ldr	r0, [r0, #0]
   102d0:	b959      	cbnz	r1, 102ea <arr_capacity+0x2a>
        {
            if (arr->data != NULL)
   102d2:	b110      	cbz	r0, 102da <arr_capacity+0x1a>
            {
                gxfree(arr->data);
   102d4:	f7fb fc76 	bl	bbc4 <free>
                arr->data = NULL;
   102d8:	6025      	str	r5, [r4, #0]
                    return DLMS_ERROR_CODE_OUTOFMEMORY;
                }
                arr->data = tmp;
            }
        }
        arr->capacity = (uint16_t)capacity;
   102da:	80a5      	strh	r5, [r4, #4]
    return arr->capacity & 0x7FFF;
   102dc:	88a3      	ldrh	r3, [r4, #4]
    }
#endif //DLMS_IGNORE_MALLOC
    if (arr_getCapacity(arr) < capacity)
   102de:	f3c3 030e 	ubfx	r3, r3, #0, #15
   102e2:	42ab      	cmp	r3, r5
   102e4:	db09      	blt.n	102fa <arr_capacity+0x3a>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    return 0;
   102e6:	2000      	movs	r0, #0
   102e8:	e009      	b.n	102fe <arr_capacity+0x3e>
            if (arr->data == NULL)
   102ea:	0089      	lsls	r1, r1, #2
   102ec:	b940      	cbnz	r0, 10300 <arr_capacity+0x40>
                arr->data = (void**)gxmalloc(capacity * sizeof(void*));
   102ee:	4608      	mov	r0, r1
   102f0:	f7fb fc60 	bl	bbb4 <malloc>
   102f4:	6020      	str	r0, [r4, #0]
                if (arr->data == NULL)
   102f6:	2800      	cmp	r0, #0
   102f8:	d1ef      	bne.n	102da <arr_capacity+0x1a>
                    return DLMS_ERROR_CODE_OUTOFMEMORY;
   102fa:	f44f 7082 	mov.w	r0, #260	; 0x104
}
   102fe:	bd38      	pop	{r3, r4, r5, pc}
                void* tmp = (void**)gxrealloc(arr->data, capacity * sizeof(void*));
   10300:	f7fb fd10 	bl	bd24 <realloc>
                if (tmp == NULL)
   10304:	2800      	cmp	r0, #0
   10306:	d0f8      	beq.n	102fa <arr_capacity+0x3a>
                arr->data = tmp;
   10308:	6020      	str	r0, [r4, #0]
   1030a:	e7e6      	b.n	102da <arr_capacity+0x1a>

0001030c <arr_push>:


#ifndef DLMS_IGNORE_MALLOC
int arr_push(gxArray* arr, void* item)
{
   1030c:	b538      	push	{r3, r4, r5, lr}
    if (arr->size >= arr->capacity)
   1030e:	88c3      	ldrh	r3, [r0, #6]
{
   10310:	460d      	mov	r5, r1
    if (arr->size >= arr->capacity)
   10312:	8881      	ldrh	r1, [r0, #4]
   10314:	428b      	cmp	r3, r1
{
   10316:	4604      	mov	r4, r0
    if (arr->size >= arr->capacity)
   10318:	d207      	bcs.n	1032a <arr_push+0x1e>
        if (ret != 0)
        {
            return ret;
        }
    }
    arr->data[arr->size] = item;
   1031a:	88e3      	ldrh	r3, [r4, #6]
   1031c:	6822      	ldr	r2, [r4, #0]
   1031e:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
    ++arr->size;
   10322:	3301      	adds	r3, #1
   10324:	80e3      	strh	r3, [r4, #6]
    return 0;
   10326:	2000      	movs	r0, #0
}
   10328:	bd38      	pop	{r3, r4, r5, pc}
        int ret = arr_capacity(arr, arr->capacity + GXARRAY_CAPACITY);
   1032a:	310a      	adds	r1, #10
   1032c:	f7ff ffc8 	bl	102c0 <arr_capacity>
        if (ret != 0)
   10330:	2800      	cmp	r0, #0
   10332:	d0f2      	beq.n	1031a <arr_push+0xe>
   10334:	e7f8      	b.n	10328 <arr_push+0x1c>

00010336 <arr_clear>:
#endif //DLMS_IGNORE_MALLOC

void arr_clear(
    gxArray* arr)
{
   10336:	b538      	push	{r3, r4, r5, lr}
#ifndef DLMS_IGNORE_MALLOC
    int pos;
    if (arr->size != 0)
   10338:	88c3      	ldrh	r3, [r0, #6]
{
   1033a:	4604      	mov	r4, r0
    if (arr->size != 0)
   1033c:	b9a3      	cbnz	r3, 10368 <arr_clear+0x32>
        for (pos = 0; pos != arr->size; ++pos)
        {
            gxfree(arr->data[pos]);
        }
    }
    if (arr->capacity != 0)
   1033e:	88a3      	ldrh	r3, [r4, #4]
   10340:	b123      	cbz	r3, 1034c <arr_clear+0x16>
    {
        gxfree(arr->data);
   10342:	6820      	ldr	r0, [r4, #0]
   10344:	f7fb fc3e 	bl	bbc4 <free>
        arr->data = NULL;
   10348:	2300      	movs	r3, #0
   1034a:	6023      	str	r3, [r4, #0]
    }
    arr->capacity = 0;
   1034c:	2300      	movs	r3, #0
#else
    arr->size = 0;
#endif //DLMS_IGNORE_MALLOC

#ifndef DLMS_IGNORE_MALLOC
    arr->position = 0;
   1034e:	e9c4 3301 	strd	r3, r3, [r4, #4]
#endif //DLMS_IGNORE_MALLOC
}
   10352:	bd38      	pop	{r3, r4, r5, pc}
            gxfree(arr->data[pos]);
   10354:	6823      	ldr	r3, [r4, #0]
   10356:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   1035a:	f7fb fc33 	bl	bbc4 <free>
        for (pos = 0; pos != arr->size; ++pos)
   1035e:	3501      	adds	r5, #1
   10360:	88e3      	ldrh	r3, [r4, #6]
   10362:	42ab      	cmp	r3, r5
   10364:	d1f6      	bne.n	10354 <arr_clear+0x1e>
   10366:	e7ea      	b.n	1033e <arr_clear+0x8>
   10368:	2500      	movs	r5, #0
   1036a:	e7f9      	b.n	10360 <arr_clear+0x2a>

0001036c <arr_empty>:

void arr_empty(
    gxArray* arr)
{
#ifndef DLMS_IGNORE_MALLOC
    if (arr->size != 0)
   1036c:	88c3      	ldrh	r3, [r0, #6]
{
   1036e:	b510      	push	{r4, lr}
   10370:	4604      	mov	r4, r0
    if (arr->size != 0)
   10372:	b123      	cbz	r3, 1037e <arr_empty+0x12>
    {
        gxfree(arr->data);
   10374:	6800      	ldr	r0, [r0, #0]
   10376:	f7fb fc25 	bl	bbc4 <free>
        arr->data = NULL;
   1037a:	2300      	movs	r3, #0
   1037c:	6023      	str	r3, [r4, #0]
    }
    arr->capacity = 0;
   1037e:	2300      	movs	r3, #0
    }
#else
    arr->size = 0;
#endif //DLMS_IGNORE_MALLOC
#ifndef DLMS_IGNORE_MALLOC
    arr->position = 0;
   10380:	e9c4 3301 	strd	r3, r3, [r4, #4]
#endif //DLMS_IGNORE_MALLOC
}
   10384:	bd10      	pop	{r4, pc}

00010386 <arr_getByIndex>:


#ifndef DLMS_IGNORE_MALLOC
int arr_getByIndex(gxArray* arr, uint16_t index, void** value)
{
    if (arr == NULL || value == NULL)
   10386:	b148      	cbz	r0, 1039c <arr_getByIndex+0x16>
   10388:	b142      	cbz	r2, 1039c <arr_getByIndex+0x16>
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    if (index >= arr->size)
   1038a:	88c3      	ldrh	r3, [r0, #6]
   1038c:	428b      	cmp	r3, r1
   1038e:	d908      	bls.n	103a2 <arr_getByIndex+0x1c>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    *value = arr->data[index];
   10390:	6803      	ldr	r3, [r0, #0]
   10392:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   10396:	6013      	str	r3, [r2, #0]
    return 0;
   10398:	2000      	movs	r0, #0
   1039a:	4770      	bx	lr
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   1039c:	f44f 7081 	mov.w	r0, #258	; 0x102
   103a0:	4770      	bx	lr
        return DLMS_ERROR_CODE_OUTOFMEMORY;
   103a2:	f44f 7082 	mov.w	r0, #260	; 0x104
}
   103a6:	4770      	bx	lr

000103a8 <arr_clearKeyValuePair>:
void arr_clearKeyValuePair(gxArray* arr)
{
#ifndef DLMS_IGNORE_MALLOC
    gxKey* k;
    int pos;
    if (arr->capacity != 0)
   103a8:	8883      	ldrh	r3, [r0, #4]
{
   103aa:	b570      	push	{r4, r5, r6, lr}
   103ac:	4604      	mov	r4, r0
    if (arr->capacity != 0)
   103ae:	b9bb      	cbnz	r3, 103e0 <arr_clearKeyValuePair+0x38>
        arr->position = 0;
    }
#else
    arr_clear(arr);
#endif //DLMS_IGNORE_MALLOC
}
   103b0:	bd70      	pop	{r4, r5, r6, pc}
            k = (gxKey*)arr->data[pos];
   103b2:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
            gxfree(k->key);
   103b6:	6830      	ldr	r0, [r6, #0]
   103b8:	f7fb fc04 	bl	bbc4 <free>
            gxfree(k->value);
   103bc:	6870      	ldr	r0, [r6, #4]
   103be:	f7fb fc01 	bl	bbc4 <free>
            gxfree(k);
   103c2:	4630      	mov	r0, r6
   103c4:	f7fb fbfe 	bl	bbc4 <free>
        for (pos = 0; pos != arr->size; ++pos)
   103c8:	3501      	adds	r5, #1
   103ca:	88e3      	ldrh	r3, [r4, #6]
   103cc:	6820      	ldr	r0, [r4, #0]
   103ce:	42ab      	cmp	r3, r5
   103d0:	d1ef      	bne.n	103b2 <arr_clearKeyValuePair+0xa>
        gxfree(arr->data);
   103d2:	f7fb fbf7 	bl	bbc4 <free>
        arr->data = NULL;
   103d6:	2300      	movs	r3, #0
        arr->capacity = 0;
   103d8:	e9c4 3300 	strd	r3, r3, [r4]
        arr->position = 0;
   103dc:	60a3      	str	r3, [r4, #8]
}
   103de:	e7e7      	b.n	103b0 <arr_clearKeyValuePair+0x8>
        for (pos = 0; pos != arr->size; ++pos)
   103e0:	2500      	movs	r5, #0
   103e2:	e7f2      	b.n	103ca <arr_clearKeyValuePair+0x22>

000103e4 <arr_clearStrings>:
void arr_clearStrings(gxArray* arr)
{
#ifndef DLMS_IGNORE_MALLOC
    gxByteBuffer* it;
    int pos;
    if (arr->capacity != 0)
   103e4:	8883      	ldrh	r3, [r0, #4]
{
   103e6:	b570      	push	{r4, r5, r6, lr}
   103e8:	4604      	mov	r4, r0
    if (arr->capacity != 0)
   103ea:	b9a3      	cbnz	r3, 10416 <arr_clearStrings+0x32>
        arr->position = 0;
    }
#else
    arr_clear(arr);
#endif //DLMS_IGNORE_MALLOC
}
   103ec:	bd70      	pop	{r4, r5, r6, pc}
            it = (gxByteBuffer*)arr->data[pos];
   103ee:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
            gxfree(it->data);
   103f2:	6830      	ldr	r0, [r6, #0]
   103f4:	f7fb fbe6 	bl	bbc4 <free>
            gxfree(it);
   103f8:	4630      	mov	r0, r6
   103fa:	f7fb fbe3 	bl	bbc4 <free>
        for (pos = 0; pos != arr->size; ++pos)
   103fe:	3501      	adds	r5, #1
   10400:	88e3      	ldrh	r3, [r4, #6]
   10402:	6820      	ldr	r0, [r4, #0]
   10404:	42ab      	cmp	r3, r5
   10406:	d1f2      	bne.n	103ee <arr_clearStrings+0xa>
        gxfree(arr->data);
   10408:	f7fb fbdc 	bl	bbc4 <free>
        arr->data = NULL;
   1040c:	2300      	movs	r3, #0
        arr->capacity = 0;
   1040e:	e9c4 3300 	strd	r3, r3, [r4]
        arr->position = 0;
   10412:	60a3      	str	r3, [r4, #8]
}
   10414:	e7ea      	b.n	103ec <arr_clearStrings+0x8>
        for (pos = 0; pos != arr->size; ++pos)
   10416:	2500      	movs	r5, #0
   10418:	e7f2      	b.n	10400 <arr_clearStrings+0x1c>

0001041a <cosem_getByteBuffer>:
{
   1041a:	b510      	push	{r4, lr}
    if (e->value.vt != DLMS_DATA_TYPE_OCTET_STRING)
   1041c:	7803      	ldrb	r3, [r0, #0]
   1041e:	2b09      	cmp	r3, #9
{
   10420:	4604      	mov	r4, r0
    if (e->value.vt != DLMS_DATA_TYPE_OCTET_STRING)
   10422:	d00a      	beq.n	1043a <cosem_getByteBuffer+0x20>
        e->value.vt = DLMS_DATA_TYPE_OCTET_STRING;
   10424:	2309      	movs	r3, #9
   10426:	7003      	strb	r3, [r0, #0]
        if (e->value.byteArr == NULL)
   10428:	6883      	ldr	r3, [r0, #8]
   1042a:	b933      	cbnz	r3, 1043a <cosem_getByteBuffer+0x20>
            e->value.byteArr = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
   1042c:	200c      	movs	r0, #12
   1042e:	f7fb fbc1 	bl	bbb4 <malloc>
   10432:	60a0      	str	r0, [r4, #8]
            if (e->value.byteArr == NULL)
   10434:	b130      	cbz	r0, 10444 <cosem_getByteBuffer+0x2a>
            BYTE_BUFFER_INIT(e->value.byteArr);
   10436:	f7fc fbd5 	bl	cbe4 <bb_init>
    e->byteArray = 1;
   1043a:	2301      	movs	r3, #1
   1043c:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    return 0;
   10440:	2000      	movs	r0, #0
}
   10442:	bd10      	pop	{r4, pc}
                return DLMS_ERROR_CODE_OUTOFMEMORY;
   10444:	f44f 7082 	mov.w	r0, #260	; 0x104
   10448:	e7fb      	b.n	10442 <cosem_getByteBuffer+0x28>

0001044a <cosem_getData>:
    if (e->index == 2)
   1044a:	7e02      	ldrb	r2, [r0, #24]
   1044c:	2a02      	cmp	r2, #2
   1044e:	d109      	bne.n	10464 <cosem_getData+0x1a>
        if (e->action)
   10450:	6941      	ldr	r1, [r0, #20]
   10452:	f890 2032 	ldrb.w	r2, [r0, #50]	; 0x32
   10456:	3110      	adds	r1, #16
   10458:	b10a      	cbz	r2, 1045e <cosem_getData+0x14>
            ret = var_copy(&e->value, &((gxData*)e->target)->value);
   1045a:	f7f3 bf4f 	b.w	42fc <var_copy>
            ret = cosem_setVariant(e->value.byteArr, &((gxData*)e->target)->value);
   1045e:	6880      	ldr	r0, [r0, #8]
   10460:	f7fd bb2f 	b.w	dac2 <cosem_setVariant>
}
   10464:	f44f 7081 	mov.w	r0, #258	; 0x102
   10468:	4770      	bx	lr

0001046a <cosem_getRegister>:
{
   1046a:	b538      	push	{r3, r4, r5, lr}
    if (e->index == 2)
   1046c:	7e03      	ldrb	r3, [r0, #24]
    gxByteBuffer* data = e->value.byteArr;
   1046e:	6885      	ldr	r5, [r0, #8]
    if (e->index == 2)
   10470:	2b02      	cmp	r3, #2
{
   10472:	4604      	mov	r4, r0
    if (e->index == 2)
   10474:	d10d      	bne.n	10492 <cosem_getRegister+0x28>
        if (e->action)
   10476:	6941      	ldr	r1, [r0, #20]
   10478:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
   1047c:	3110      	adds	r1, #16
   1047e:	b11b      	cbz	r3, 10488 <cosem_getRegister+0x1e>
}
   10480:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            ret = var_copy(&e->value, &((gxRegister*)e->target)->value);
   10484:	f7f3 bf3a 	b.w	42fc <var_copy>
            ret = cosem_setVariant(e->value.byteArr, &((gxRegister*)e->target)->value);
   10488:	4628      	mov	r0, r5
}
   1048a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            ret = cosem_setVariant(e->value.byteArr, &((gxRegister*)e->target)->value);
   1048e:	f7fd bb18 	b.w	dac2 <cosem_setVariant>
    else if (e->index == 3)
   10492:	2b03      	cmp	r3, #3
   10494:	d113      	bne.n	104be <cosem_getRegister+0x54>
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   10496:	2102      	movs	r1, #2
   10498:	4628      	mov	r0, r5
   1049a:	f7fd fb19 	bl	dad0 <cosem_setStructure>
   1049e:	b980      	cbnz	r0, 104c2 <cosem_getRegister+0x58>
            (ret = cosem_setInt8(data, ((gxRegister*)e->target)->scaler)) != 0 ||
   104a0:	6963      	ldr	r3, [r4, #20]
   104a2:	4628      	mov	r0, r5
   104a4:	f893 1020 	ldrb.w	r1, [r3, #32]
   104a8:	f7fd fae1 	bl	da6e <cosem_setInt8>
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   104ac:	b948      	cbnz	r0, 104c2 <cosem_getRegister+0x58>
            (ret = cosem_setEnum(data, ((gxRegister*)e->target)->unit)) != 0)
   104ae:	6963      	ldr	r3, [r4, #20]
   104b0:	4628      	mov	r0, r5
   104b2:	f893 1021 	ldrb.w	r1, [r3, #33]	; 0x21
}
   104b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            (ret = cosem_setEnum(data, ((gxRegister*)e->target)->unit)) != 0)
   104ba:	f7fd bb25 	b.w	db08 <cosem_setEnum>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   104be:	f44f 7081 	mov.w	r0, #258	; 0x102
}
   104c2:	bd38      	pop	{r3, r4, r5, pc}

000104c4 <cosem_getRegisterTable>:
{
   104c4:	b538      	push	{r3, r4, r5, lr}
    else if (e->index == 4)
   104c6:	7e03      	ldrb	r3, [r0, #24]
   104c8:	2b04      	cmp	r3, #4
{
   104ca:	4604      	mov	r4, r0
    else if (e->index == 4)
   104cc:	d114      	bne.n	104f8 <cosem_getRegisterTable+0x34>
        gxByteBuffer* data = e->value.byteArr;
   104ce:	6885      	ldr	r5, [r0, #8]
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   104d0:	2102      	movs	r1, #2
   104d2:	4628      	mov	r0, r5
   104d4:	f7fd fafc 	bl	dad0 <cosem_setStructure>
   104d8:	b980      	cbnz	r0, 104fc <cosem_getRegisterTable+0x38>
            (ret = cosem_setInt8(data, ((gxRegisterTable*)e->target)->scaler)) != 0 ||
   104da:	6963      	ldr	r3, [r4, #20]
   104dc:	4628      	mov	r0, r5
   104de:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
   104e2:	f7fd fac4 	bl	da6e <cosem_setInt8>
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   104e6:	b948      	cbnz	r0, 104fc <cosem_getRegisterTable+0x38>
            (ret = cosem_setEnum(data, ((gxRegisterTable*)e->target)->unit)) != 0)
   104e8:	6963      	ldr	r3, [r4, #20]
   104ea:	4628      	mov	r0, r5
   104ec:	f893 1025 	ldrb.w	r1, [r3, #37]	; 0x25
}
   104f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            (ret = cosem_setEnum(data, ((gxRegisterTable*)e->target)->unit)) != 0)
   104f4:	f7fd bb08 	b.w	db08 <cosem_setEnum>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   104f8:	f44f 7081 	mov.w	r0, #258	; 0x102
}
   104fc:	bd38      	pop	{r3, r4, r5, pc}

000104fe <cosem_getClock>:
    if (e->index == 2)
   104fe:	7e03      	ldrb	r3, [r0, #24]
   10500:	2b02      	cmp	r3, #2
   10502:	d104      	bne.n	1050e <cosem_getClock+0x10>
        ret = cosem_setDateTimeAsOctetString(e->value.byteArr, &((gxClock*)e->target)->time);
   10504:	6941      	ldr	r1, [r0, #20]
   10506:	3134      	adds	r1, #52	; 0x34
        ret = cosem_setDateTimeAsOctetString(e->value.byteArr, &((gxClock*)e->target)->begin);
   10508:	6880      	ldr	r0, [r0, #8]
   1050a:	f7fd b993 	b.w	d834 <cosem_setDateTimeAsOctetString>
    else if (e->index == 3)
   1050e:	2b03      	cmp	r3, #3
   10510:	d105      	bne.n	1051e <cosem_getClock+0x20>
        ret = cosem_setInt16(e->value.byteArr, ((gxClock*)e->target)->timeZone);
   10512:	6943      	ldr	r3, [r0, #20]
   10514:	6880      	ldr	r0, [r0, #8]
   10516:	f9b3 1030 	ldrsh.w	r1, [r3, #48]	; 0x30
   1051a:	f7fd bab6 	b.w	da8a <cosem_setInt16>
    else if (e->index == 4)
   1051e:	2b04      	cmp	r3, #4
   10520:	d105      	bne.n	1052e <cosem_getClock+0x30>
        ret = cosem_setEnum(e->value.byteArr, ((gxClock*)e->target)->status);
   10522:	6943      	ldr	r3, [r0, #20]
   10524:	f893 1020 	ldrb.w	r1, [r3, #32]
        ret = cosem_setEnum(e->value.byteArr, ((gxClock*)e->target)->clockBase);
   10528:	6880      	ldr	r0, [r0, #8]
   1052a:	f7fd baed 	b.w	db08 <cosem_setEnum>
    else if (e->index == 5)
   1052e:	2b05      	cmp	r3, #5
   10530:	d102      	bne.n	10538 <cosem_getClock+0x3a>
        ret = cosem_setDateTimeAsOctetString(e->value.byteArr, &((gxClock*)e->target)->begin);
   10532:	6941      	ldr	r1, [r0, #20]
   10534:	3124      	adds	r1, #36	; 0x24
   10536:	e7e7      	b.n	10508 <cosem_getClock+0xa>
    else if (e->index == 6)
   10538:	2b06      	cmp	r3, #6
   1053a:	d102      	bne.n	10542 <cosem_getClock+0x44>
        ret = cosem_setDateTimeAsOctetString(e->value.byteArr, &((gxClock*)e->target)->end);
   1053c:	6941      	ldr	r1, [r0, #20]
   1053e:	3114      	adds	r1, #20
   10540:	e7e2      	b.n	10508 <cosem_getClock+0xa>
    else if (e->index == 7)
   10542:	2b07      	cmp	r3, #7
   10544:	d104      	bne.n	10550 <cosem_getClock+0x52>
        ret = cosem_setInt8(e->value.byteArr, ((gxClock*)e->target)->deviation);
   10546:	6943      	ldr	r3, [r0, #20]
   10548:	6880      	ldr	r0, [r0, #8]
   1054a:	7c59      	ldrb	r1, [r3, #17]
   1054c:	f7fd ba8f 	b.w	da6e <cosem_setInt8>
    else if (e->index == 8)
   10550:	2b08      	cmp	r3, #8
   10552:	d104      	bne.n	1055e <cosem_getClock+0x60>
        ret = cosem_setBoolean(e->value.byteArr, ((gxClock*)e->target)->enabled);
   10554:	6943      	ldr	r3, [r0, #20]
   10556:	6880      	ldr	r0, [r0, #8]
   10558:	7c99      	ldrb	r1, [r3, #18]
   1055a:	f7fd bae3 	b.w	db24 <cosem_setBoolean>
    else if (e->index == 9)
   1055e:	2b09      	cmp	r3, #9
   10560:	d102      	bne.n	10568 <cosem_getClock+0x6a>
        ret = cosem_setEnum(e->value.byteArr, ((gxClock*)e->target)->clockBase);
   10562:	6943      	ldr	r3, [r0, #20]
   10564:	7c19      	ldrb	r1, [r3, #16]
   10566:	e7df      	b.n	10528 <cosem_getClock+0x2a>
}
   10568:	f44f 7081 	mov.w	r0, #258	; 0x102
   1056c:	4770      	bx	lr

0001056e <cosem_getActionSchedule>:
{
   1056e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    if (e->index == 2)
   10572:	7e01      	ldrb	r1, [r0, #24]
    gxActionSchedule* object = (gxActionSchedule*)e->target;
   10574:	6946      	ldr	r6, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
   10576:	6885      	ldr	r5, [r0, #8]
    if (e->index == 2)
   10578:	2902      	cmp	r1, #2
   1057a:	d120      	bne.n	105be <cosem_getActionSchedule+0x50>
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   1057c:	4628      	mov	r0, r5
   1057e:	f7fd faa7 	bl	dad0 <cosem_setStructure>
   10582:	4604      	mov	r4, r0
   10584:	bb50      	cbnz	r0, 105dc <cosem_getActionSchedule+0x6e>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   10586:	2109      	movs	r1, #9
   10588:	4628      	mov	r0, r5
   1058a:	f7fc fb94 	bl	ccb6 <bb_setUInt8>
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   1058e:	4604      	mov	r4, r0
   10590:	bb20      	cbnz	r0, 105dc <cosem_getActionSchedule+0x6e>
            (ret = hlp_setObjectCount(6, data)) != 0 ||
   10592:	4629      	mov	r1, r5
   10594:	2006      	movs	r0, #6
   10596:	f009 f97d 	bl	19894 <hlp_setObjectCount>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   1059a:	4604      	mov	r4, r0
   1059c:	b9f0      	cbnz	r0, 105dc <cosem_getActionSchedule+0x6e>
            (ret = bb_set(data, obj_getLogicalName((gxObject*)object->executedScript), 6)) != 0 ||
   1059e:	6930      	ldr	r0, [r6, #16]
   105a0:	f7f3 fc22 	bl	3de8 <obj_getLogicalName>
   105a4:	2206      	movs	r2, #6
   105a6:	4601      	mov	r1, r0
   105a8:	4628      	mov	r0, r5
   105aa:	f7fc fc6a 	bl	ce82 <bb_set>
            (ret = hlp_setObjectCount(6, data)) != 0 ||
   105ae:	4604      	mov	r4, r0
   105b0:	b9a0      	cbnz	r0, 105dc <cosem_getActionSchedule+0x6e>
            (ret = cosem_setUInt16(data, object->executedScriptSelector)) != 0)
   105b2:	8ab1      	ldrh	r1, [r6, #20]
   105b4:	4628      	mov	r0, r5
   105b6:	f7fd fa3e 	bl	da36 <cosem_setUInt16>
                    (ret = cosem_setDateAsOctetString(data, tm)) != 0)
   105ba:	4604      	mov	r4, r0
    return ret;
   105bc:	e00e      	b.n	105dc <cosem_getActionSchedule+0x6e>
    else if (e->index == 3)
   105be:	2903      	cmp	r1, #3
   105c0:	d104      	bne.n	105cc <cosem_getActionSchedule+0x5e>
        ret = cosem_setEnum(e->value.byteArr, object->type);
   105c2:	7db1      	ldrb	r1, [r6, #22]
   105c4:	4628      	mov	r0, r5
   105c6:	f7fd fa9f 	bl	db08 <cosem_setEnum>
   105ca:	e7f6      	b.n	105ba <cosem_getActionSchedule+0x4c>
    else if (e->index == 4)
   105cc:	2904      	cmp	r1, #4
   105ce:	d12d      	bne.n	1062c <cosem_getActionSchedule+0xbe>
        if ((ret = cosem_setArray(data, object->executionTime.size)) == 0)
   105d0:	8bf1      	ldrh	r1, [r6, #30]
   105d2:	4628      	mov	r0, r5
   105d4:	f7fd fa8a 	bl	daec <cosem_setArray>
   105d8:	4604      	mov	r4, r0
   105da:	b318      	cbz	r0, 10624 <cosem_getActionSchedule+0xb6>
}
   105dc:	4620      	mov	r0, r4
   105de:	b003      	add	sp, #12
   105e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                if ((ret = cosem_setStructure(data, 2)) != 0)
   105e4:	2102      	movs	r1, #2
   105e6:	4628      	mov	r0, r5
   105e8:	f7fd fa72 	bl	dad0 <cosem_setStructure>
   105ec:	2800      	cmp	r0, #0
   105ee:	d1e4      	bne.n	105ba <cosem_getActionSchedule+0x4c>
                if ((ret = arr_getByIndex(&object->executionTime, pos, (void**)&tm)) != 0)
   105f0:	aa01      	add	r2, sp, #4
   105f2:	4649      	mov	r1, r9
   105f4:	4640      	mov	r0, r8
   105f6:	f7ff fec6 	bl	10386 <arr_getByIndex>
   105fa:	2800      	cmp	r0, #0
   105fc:	d1dd      	bne.n	105ba <cosem_getActionSchedule+0x4c>
                if ((ret = cosem_setTimeAsOctetString(data, tm)) != 0 ||
   105fe:	9901      	ldr	r1, [sp, #4]
   10600:	4628      	mov	r0, r5
   10602:	f7fd f989 	bl	d918 <cosem_setTimeAsOctetString>
   10606:	2800      	cmp	r0, #0
   10608:	d1d7      	bne.n	105ba <cosem_getActionSchedule+0x4c>
                    (ret = cosem_setDateAsOctetString(data, tm)) != 0)
   1060a:	9901      	ldr	r1, [sp, #4]
   1060c:	4628      	mov	r0, r5
   1060e:	f7fd f924 	bl	d85a <cosem_setDateAsOctetString>
   10612:	3701      	adds	r7, #1
                if ((ret = cosem_setTimeAsOctetString(data, tm)) != 0 ||
   10614:	2800      	cmp	r0, #0
   10616:	d1d0      	bne.n	105ba <cosem_getActionSchedule+0x4c>
            for (pos = 0; pos != object->executionTime.size; ++pos)
   10618:	8bf3      	ldrh	r3, [r6, #30]
   1061a:	fa1f f987 	uxth.w	r9, r7
   1061e:	454b      	cmp	r3, r9
   10620:	d1e0      	bne.n	105e4 <cosem_getActionSchedule+0x76>
   10622:	e7db      	b.n	105dc <cosem_getActionSchedule+0x6e>
   10624:	4607      	mov	r7, r0
                if ((ret = arr_getByIndex(&object->executionTime, pos, (void**)&tm)) != 0)
   10626:	f106 0818 	add.w	r8, r6, #24
   1062a:	e7f5      	b.n	10618 <cosem_getActionSchedule+0xaa>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   1062c:	f44f 7481 	mov.w	r4, #258	; 0x102
   10630:	e7d4      	b.n	105dc <cosem_getActionSchedule+0x6e>

00010632 <getActivityCalendarWeekProfileTable>:
{
   10632:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10634:	460c      	mov	r4, r1
   10636:	4605      	mov	r5, r0
    if ((ret = cosem_setArray(ba, list->size)) != 0)
   10638:	88c1      	ldrh	r1, [r0, #6]
   1063a:	4620      	mov	r0, r4
   1063c:	f7fd fa56 	bl	daec <cosem_setArray>
   10640:	2800      	cmp	r0, #0
   10642:	d144      	bne.n	106ce <getActivityCalendarWeekProfileTable+0x9c>
   10644:	4606      	mov	r6, r0
    for (pos = 0; pos != list->size; ++pos)
   10646:	88eb      	ldrh	r3, [r5, #6]
   10648:	b2b7      	uxth	r7, r6
   1064a:	42bb      	cmp	r3, r7
   1064c:	d101      	bne.n	10652 <getActivityCalendarWeekProfileTable+0x20>
   1064e:	2000      	movs	r0, #0
   10650:	e03d      	b.n	106ce <getActivityCalendarWeekProfileTable+0x9c>
        if ((ret = cosem_setStructure(ba, 8)) != 0 ||
   10652:	2108      	movs	r1, #8
   10654:	4620      	mov	r0, r4
   10656:	f7fd fa3b 	bl	dad0 <cosem_setStructure>
   1065a:	2800      	cmp	r0, #0
   1065c:	d137      	bne.n	106ce <getActivityCalendarWeekProfileTable+0x9c>
            (ret = arr_getByIndex(list, pos, (void**)&wp)) != 0 ||
   1065e:	aa01      	add	r2, sp, #4
   10660:	4639      	mov	r1, r7
   10662:	4628      	mov	r0, r5
   10664:	f7ff fe8f 	bl	10386 <arr_getByIndex>
        if ((ret = cosem_setStructure(ba, 8)) != 0 ||
   10668:	2800      	cmp	r0, #0
   1066a:	d130      	bne.n	106ce <getActivityCalendarWeekProfileTable+0x9c>
            (ret = cosem_setOctetString(ba, &wp->name)) != 0 ||
   1066c:	9901      	ldr	r1, [sp, #4]
   1066e:	4620      	mov	r0, r4
   10670:	f7fd f965 	bl	d93e <cosem_setOctetString>
            (ret = arr_getByIndex(list, pos, (void**)&wp)) != 0 ||
   10674:	bb58      	cbnz	r0, 106ce <getActivityCalendarWeekProfileTable+0x9c>
            (ret = cosem_setUInt8(ba, wp->monday)) != 0 ||
   10676:	9b01      	ldr	r3, [sp, #4]
   10678:	4620      	mov	r0, r4
   1067a:	7b19      	ldrb	r1, [r3, #12]
   1067c:	f7fd f9cd 	bl	da1a <cosem_setUInt8>
            (ret = cosem_setOctetString(ba, &wp->name)) != 0 ||
   10680:	bb28      	cbnz	r0, 106ce <getActivityCalendarWeekProfileTable+0x9c>
            (ret = cosem_setUInt8(ba, wp->tuesday)) != 0 ||
   10682:	9b01      	ldr	r3, [sp, #4]
   10684:	4620      	mov	r0, r4
   10686:	7b59      	ldrb	r1, [r3, #13]
   10688:	f7fd f9c7 	bl	da1a <cosem_setUInt8>
            (ret = cosem_setUInt8(ba, wp->monday)) != 0 ||
   1068c:	b9f8      	cbnz	r0, 106ce <getActivityCalendarWeekProfileTable+0x9c>
            (ret = cosem_setUInt8(ba, wp->wednesday)) != 0 ||
   1068e:	9b01      	ldr	r3, [sp, #4]
   10690:	4620      	mov	r0, r4
   10692:	7b99      	ldrb	r1, [r3, #14]
   10694:	f7fd f9c1 	bl	da1a <cosem_setUInt8>
            (ret = cosem_setUInt8(ba, wp->tuesday)) != 0 ||
   10698:	b9c8      	cbnz	r0, 106ce <getActivityCalendarWeekProfileTable+0x9c>
            (ret = cosem_setUInt8(ba, wp->thursday)) != 0 ||
   1069a:	9b01      	ldr	r3, [sp, #4]
   1069c:	4620      	mov	r0, r4
   1069e:	7bd9      	ldrb	r1, [r3, #15]
   106a0:	f7fd f9bb 	bl	da1a <cosem_setUInt8>
            (ret = cosem_setUInt8(ba, wp->wednesday)) != 0 ||
   106a4:	b998      	cbnz	r0, 106ce <getActivityCalendarWeekProfileTable+0x9c>
            (ret = cosem_setUInt8(ba, wp->friday)) != 0 ||
   106a6:	9b01      	ldr	r3, [sp, #4]
   106a8:	4620      	mov	r0, r4
   106aa:	7c19      	ldrb	r1, [r3, #16]
   106ac:	f7fd f9b5 	bl	da1a <cosem_setUInt8>
            (ret = cosem_setUInt8(ba, wp->thursday)) != 0 ||
   106b0:	b968      	cbnz	r0, 106ce <getActivityCalendarWeekProfileTable+0x9c>
            (ret = cosem_setUInt8(ba, wp->saturday)) != 0 ||
   106b2:	9b01      	ldr	r3, [sp, #4]
   106b4:	4620      	mov	r0, r4
   106b6:	7c59      	ldrb	r1, [r3, #17]
   106b8:	f7fd f9af 	bl	da1a <cosem_setUInt8>
            (ret = cosem_setUInt8(ba, wp->friday)) != 0 ||
   106bc:	b938      	cbnz	r0, 106ce <getActivityCalendarWeekProfileTable+0x9c>
            (ret = cosem_setUInt8(ba, wp->sunday)) != 0)
   106be:	9b01      	ldr	r3, [sp, #4]
   106c0:	4620      	mov	r0, r4
   106c2:	7c99      	ldrb	r1, [r3, #18]
   106c4:	f7fd f9a9 	bl	da1a <cosem_setUInt8>
   106c8:	3601      	adds	r6, #1
            (ret = cosem_setUInt8(ba, wp->saturday)) != 0 ||
   106ca:	2800      	cmp	r0, #0
   106cc:	d0bb      	beq.n	10646 <getActivityCalendarWeekProfileTable+0x14>
}
   106ce:	b003      	add	sp, #12
   106d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000106d2 <getActivityCalendarSeasonProfile>:
{
   106d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   106d4:	460c      	mov	r4, r1
   106d6:	4605      	mov	r5, r0
    if ((ret = cosem_setArray(ba, list->size)) != 0)
   106d8:	88c1      	ldrh	r1, [r0, #6]
   106da:	4620      	mov	r0, r4
   106dc:	f7fd fa06 	bl	daec <cosem_setArray>
   106e0:	bb20      	cbnz	r0, 1072c <getActivityCalendarSeasonProfile+0x5a>
   106e2:	4606      	mov	r6, r0
    for (pos = 0; pos != list->size; ++pos)
   106e4:	88eb      	ldrh	r3, [r5, #6]
   106e6:	b2b7      	uxth	r7, r6
   106e8:	42bb      	cmp	r3, r7
   106ea:	d101      	bne.n	106f0 <getActivityCalendarSeasonProfile+0x1e>
   106ec:	2000      	movs	r0, #0
   106ee:	e01d      	b.n	1072c <getActivityCalendarSeasonProfile+0x5a>
        if ((ret = cosem_setStructure(ba, 3)) != 0 ||
   106f0:	2103      	movs	r1, #3
   106f2:	4620      	mov	r0, r4
   106f4:	f7fd f9ec 	bl	dad0 <cosem_setStructure>
   106f8:	b9c0      	cbnz	r0, 1072c <getActivityCalendarSeasonProfile+0x5a>
            (ret = arr_getByIndex(list, pos, (void**)&sp)) != 0 ||
   106fa:	aa01      	add	r2, sp, #4
   106fc:	4639      	mov	r1, r7
   106fe:	4628      	mov	r0, r5
   10700:	f7ff fe41 	bl	10386 <arr_getByIndex>
        if ((ret = cosem_setStructure(ba, 3)) != 0 ||
   10704:	b990      	cbnz	r0, 1072c <getActivityCalendarSeasonProfile+0x5a>
            (ret = cosem_setOctetString(ba, &sp->name)) != 0 ||
   10706:	9901      	ldr	r1, [sp, #4]
   10708:	4620      	mov	r0, r4
   1070a:	f7fd f918 	bl	d93e <cosem_setOctetString>
            (ret = arr_getByIndex(list, pos, (void**)&sp)) != 0 ||
   1070e:	b968      	cbnz	r0, 1072c <getActivityCalendarSeasonProfile+0x5a>
            (ret = cosem_setDateTimeAsOctetString(ba, &sp->start)) != 0 ||
   10710:	9901      	ldr	r1, [sp, #4]
   10712:	4620      	mov	r0, r4
   10714:	310c      	adds	r1, #12
   10716:	f7fd f88d 	bl	d834 <cosem_setDateTimeAsOctetString>
            (ret = cosem_setOctetString(ba, &sp->name)) != 0 ||
   1071a:	b938      	cbnz	r0, 1072c <getActivityCalendarSeasonProfile+0x5a>
            (ret = cosem_setOctetString(ba, &sp->weekName)) != 0)
   1071c:	9901      	ldr	r1, [sp, #4]
   1071e:	4620      	mov	r0, r4
   10720:	3118      	adds	r1, #24
   10722:	f7fd f90c 	bl	d93e <cosem_setOctetString>
   10726:	3601      	adds	r6, #1
            (ret = cosem_setDateTimeAsOctetString(ba, &sp->start)) != 0 ||
   10728:	2800      	cmp	r0, #0
   1072a:	d0db      	beq.n	106e4 <getActivityCalendarSeasonProfile+0x12>
}
   1072c:	b003      	add	sp, #12
   1072e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00010730 <cosem_getActivityCalendar>:
{
   10730:	4602      	mov	r2, r0
    gxByteBuffer* data = e->value.byteArr;
   10732:	6880      	ldr	r0, [r0, #8]
    gxActivityCalendar* object = (gxActivityCalendar*)e->target;
   10734:	6953      	ldr	r3, [r2, #20]
    if (e->index == 2)
   10736:	7e12      	ldrb	r2, [r2, #24]
   10738:	2a02      	cmp	r2, #2
   1073a:	d103      	bne.n	10744 <cosem_getActivityCalendar+0x14>
    return cosem_setOctetString(ba, name);
   1073c:	f103 0110 	add.w	r1, r3, #16
   10740:	f7fd b8fd 	b.w	d93e <cosem_setOctetString>
    else if (e->index == 3)
   10744:	2a03      	cmp	r2, #3
   10746:	d104      	bne.n	10752 <cosem_getActivityCalendar+0x22>
        ret = getActivityCalendarSeasonProfile(&object->seasonProfileActive, data);
   10748:	4601      	mov	r1, r0
   1074a:	f103 0028 	add.w	r0, r3, #40	; 0x28
        ret = getActivityCalendarSeasonProfile(&object->seasonProfilePassive, data);
   1074e:	f7ff bfc0 	b.w	106d2 <getActivityCalendarSeasonProfile>
    else if (e->index == 4)
   10752:	2a04      	cmp	r2, #4
   10754:	d104      	bne.n	10760 <cosem_getActivityCalendar+0x30>
        ret = getActivityCalendarWeekProfileTable(&object->weekProfileTableActive, data);
   10756:	4601      	mov	r1, r0
   10758:	f103 0034 	add.w	r0, r3, #52	; 0x34
        ret = getActivityCalendarWeekProfileTable(&object->weekProfileTablePassive, data);
   1075c:	f7ff bf69 	b.w	10632 <getActivityCalendarWeekProfileTable>
    else if (e->index == 5)
   10760:	2a05      	cmp	r2, #5
   10762:	d104      	bne.n	1076e <cosem_getActivityCalendar+0x3e>
        ret = getActivityCalendarDayProfileTable(&object->dayProfileTableActive, data);
   10764:	4601      	mov	r1, r0
   10766:	f103 0040 	add.w	r0, r3, #64	; 0x40
        ret = getActivityCalendarDayProfileTable(&object->dayProfileTablePassive, data);
   1076a:	f7f2 bbed 	b.w	2f48 <getActivityCalendarDayProfileTable>
    else if (e->index == 6)
   1076e:	2a06      	cmp	r2, #6
   10770:	d102      	bne.n	10778 <cosem_getActivityCalendar+0x48>
    return cosem_setOctetString(ba, name);
   10772:	f103 011c 	add.w	r1, r3, #28
   10776:	e7e3      	b.n	10740 <cosem_getActivityCalendar+0x10>
    else if (e->index == 7)
   10778:	2a07      	cmp	r2, #7
   1077a:	d103      	bne.n	10784 <cosem_getActivityCalendar+0x54>
        ret = getActivityCalendarSeasonProfile(&object->seasonProfilePassive, data);
   1077c:	4601      	mov	r1, r0
   1077e:	f103 004c 	add.w	r0, r3, #76	; 0x4c
   10782:	e7e4      	b.n	1074e <cosem_getActivityCalendar+0x1e>
    else if (e->index == 8)
   10784:	2a08      	cmp	r2, #8
   10786:	d103      	bne.n	10790 <cosem_getActivityCalendar+0x60>
        ret = getActivityCalendarWeekProfileTable(&object->weekProfileTablePassive, data);
   10788:	4601      	mov	r1, r0
   1078a:	f103 0064 	add.w	r0, r3, #100	; 0x64
   1078e:	e7e5      	b.n	1075c <cosem_getActivityCalendar+0x2c>
    else if (e->index == 9)
   10790:	2a09      	cmp	r2, #9
   10792:	d103      	bne.n	1079c <cosem_getActivityCalendar+0x6c>
        ret = getActivityCalendarDayProfileTable(&object->dayProfileTablePassive, data);
   10794:	4601      	mov	r1, r0
   10796:	f103 0058 	add.w	r0, r3, #88	; 0x58
   1079a:	e7e6      	b.n	1076a <cosem_getActivityCalendar+0x3a>
    else if (e->index == 10)
   1079c:	2a0a      	cmp	r2, #10
   1079e:	d103      	bne.n	107a8 <cosem_getActivityCalendar+0x78>
        ret = cosem_setDateTimeAsOctetString(data, &object->time);
   107a0:	f103 0170 	add.w	r1, r3, #112	; 0x70
   107a4:	f7fd b846 	b.w	d834 <cosem_setDateTimeAsOctetString>
}
   107a8:	f44f 7081 	mov.w	r0, #258	; 0x102
   107ac:	4770      	bx	lr

000107ae <getLNAccessRights>:
{
   107ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   107b2:	4681      	mov	r9, r0
    cnt = obj_attributeCount(object);
   107b4:	4608      	mov	r0, r1
{
   107b6:	4615      	mov	r5, r2
   107b8:	4688      	mov	r8, r1
    cnt = obj_attributeCount(object);
   107ba:	f003 fad7 	bl	13d6c <obj_attributeCount>
    if ((ret = cosem_setStructure(data, 2)) != 0 ||
   107be:	2102      	movs	r1, #2
    cnt = obj_attributeCount(object);
   107c0:	4607      	mov	r7, r0
    if ((ret = cosem_setStructure(data, 2)) != 0 ||
   107c2:	4628      	mov	r0, r5
   107c4:	f7fd f984 	bl	dad0 <cosem_setStructure>
   107c8:	4604      	mov	r4, r0
   107ca:	b9b8      	cbnz	r0, 107fc <getLNAccessRights+0x4e>
        (ret = cosem_setArray(data, cnt)) != 0)
   107cc:	b2b9      	uxth	r1, r7
   107ce:	4628      	mov	r0, r5
   107d0:	f7fd f98c 	bl	daec <cosem_setArray>
    if ((ret = cosem_setStructure(data, 2)) != 0 ||
   107d4:	4604      	mov	r4, r0
   107d6:	b988      	cbnz	r0, 107fc <getLNAccessRights+0x4e>
    for (pos = 1; pos != cnt + 1; ++pos)
   107d8:	2601      	movs	r6, #1
   107da:	4437      	add	r7, r6
   107dc:	42be      	cmp	r6, r7
   107de:	d110      	bne.n	10802 <getLNAccessRights+0x54>
    cnt = obj_methodCount(object);
   107e0:	4640      	mov	r0, r8
   107e2:	f003 fb37 	bl	13e54 <obj_methodCount>
    if ((ret = cosem_setArray(data, cnt)) != 0)
   107e6:	b281      	uxth	r1, r0
    cnt = obj_methodCount(object);
   107e8:	4607      	mov	r7, r0
    if ((ret = cosem_setArray(data, cnt)) != 0)
   107ea:	4628      	mov	r0, r5
   107ec:	f7fd f97e 	bl	daec <cosem_setArray>
   107f0:	4604      	mov	r4, r0
   107f2:	b918      	cbnz	r0, 107fc <getLNAccessRights+0x4e>
    for (pos = 1; pos != cnt + 1; ++pos)
   107f4:	2601      	movs	r6, #1
   107f6:	4437      	add	r7, r6
   107f8:	42be      	cmp	r6, r7
   107fa:	d127      	bne.n	1084c <getLNAccessRights+0x9e>
}
   107fc:	4620      	mov	r0, r4
   107fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ch = (unsigned char)svr_getAttributeAccess(settings, object, pos);
   10802:	4632      	mov	r2, r6
   10804:	4641      	mov	r1, r8
   10806:	4648      	mov	r0, r9
   10808:	f7fc f8dd 	bl	c9c6 <svr_getAttributeAccess>
        if ((ret = cosem_setStructure(data, 3)) != 0 ||
   1080c:	2103      	movs	r1, #3
        ch = (unsigned char)svr_getAttributeAccess(settings, object, pos);
   1080e:	4682      	mov	sl, r0
        if ((ret = cosem_setStructure(data, 3)) != 0 ||
   10810:	4628      	mov	r0, r5
   10812:	f7fd f95d 	bl	dad0 <cosem_setStructure>
   10816:	4604      	mov	r4, r0
   10818:	2800      	cmp	r0, #0
   1081a:	d1ef      	bne.n	107fc <getLNAccessRights+0x4e>
            (ret = cosem_setInt8(data, pos)) != 0 ||
   1081c:	4631      	mov	r1, r6
   1081e:	4628      	mov	r0, r5
   10820:	f7fd f925 	bl	da6e <cosem_setInt8>
        if ((ret = cosem_setStructure(data, 3)) != 0 ||
   10824:	4604      	mov	r4, r0
   10826:	2800      	cmp	r0, #0
   10828:	d1e8      	bne.n	107fc <getLNAccessRights+0x4e>
            (ret = cosem_setEnum(data, ch)) != 0 ||
   1082a:	4651      	mov	r1, sl
   1082c:	4628      	mov	r0, r5
   1082e:	f7fd f96b 	bl	db08 <cosem_setEnum>
            (ret = cosem_setInt8(data, pos)) != 0 ||
   10832:	4604      	mov	r4, r0
   10834:	2800      	cmp	r0, #0
   10836:	d1e1      	bne.n	107fc <getLNAccessRights+0x4e>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_NONE)) != 0)
   10838:	4601      	mov	r1, r0
   1083a:	4628      	mov	r0, r5
   1083c:	f7fc fa3b 	bl	ccb6 <bb_setUInt8>
            (ret = cosem_setEnum(data, ch)) != 0 ||
   10840:	4604      	mov	r4, r0
   10842:	2800      	cmp	r0, #0
   10844:	d1da      	bne.n	107fc <getLNAccessRights+0x4e>
    for (pos = 1; pos != cnt + 1; ++pos)
   10846:	3601      	adds	r6, #1
   10848:	b2f6      	uxtb	r6, r6
   1084a:	e7c7      	b.n	107dc <getLNAccessRights+0x2e>
        ch = (unsigned char)svr_getMethodAccess(settings, object, pos);
   1084c:	4641      	mov	r1, r8
   1084e:	4632      	mov	r2, r6
   10850:	4648      	mov	r0, r9
   10852:	f7fc f8ba 	bl	c9ca <svr_getMethodAccess>
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   10856:	2102      	movs	r1, #2
        ch = (unsigned char)svr_getMethodAccess(settings, object, pos);
   10858:	4682      	mov	sl, r0
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   1085a:	4628      	mov	r0, r5
   1085c:	f7fd f938 	bl	dad0 <cosem_setStructure>
   10860:	b960      	cbnz	r0, 1087c <getLNAccessRights+0xce>
            (ret = cosem_setInt8(data, pos)) != 0 ||
   10862:	4631      	mov	r1, r6
   10864:	4628      	mov	r0, r5
   10866:	f7fd f902 	bl	da6e <cosem_setInt8>
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   1086a:	b938      	cbnz	r0, 1087c <getLNAccessRights+0xce>
            (ret = cosem_setEnum(data, ch)) != 0)
   1086c:	4651      	mov	r1, sl
   1086e:	4628      	mov	r0, r5
   10870:	f7fd f94a 	bl	db08 <cosem_setEnum>
            (ret = cosem_setInt8(data, pos)) != 0 ||
   10874:	b910      	cbnz	r0, 1087c <getLNAccessRights+0xce>
    for (pos = 1; pos != cnt + 1; ++pos)
   10876:	3601      	adds	r6, #1
   10878:	b2f6      	uxtb	r6, r6
   1087a:	e7bd      	b.n	107f8 <getLNAccessRights+0x4a>
            (ret = cosem_setEnum(data, ch)) != 0)
   1087c:	4604      	mov	r4, r0
   1087e:	e7bd      	b.n	107fc <getLNAccessRights+0x4e>

00010880 <getUserList>:
    if (e->transactionStartIndex == 0)
   10880:	6b8b      	ldr	r3, [r1, #56]	; 0x38
{
   10882:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    gxAssociationLogicalName* target = (gxAssociationLogicalName*)e->target;
   10886:	694f      	ldr	r7, [r1, #20]
{
   10888:	460c      	mov	r4, r1
   1088a:	4616      	mov	r6, r2
    if (e->transactionStartIndex == 0)
   1088c:	b173      	cbz	r3, 108ac <getUserList+0x2c>
    for (pos = (uint16_t)e->transactionStartIndex; pos < target->userList.size; ++pos)
   1088e:	8f25      	ldrh	r5, [r4, #56]	; 0x38
        if ((ret = arr_getByIndex(&target->userList, pos, (void**)&it)) != 0)
   10890:	f107 0860 	add.w	r8, r7, #96	; 0x60
    for (pos = (uint16_t)e->transactionStartIndex; pos < target->userList.size; ++pos)
   10894:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
   10898:	42ab      	cmp	r3, r5
   1089a:	d905      	bls.n	108a8 <getUserList+0x28>
        if ((ret = arr_getByIndex(&target->userList, pos, (void**)&it)) != 0)
   1089c:	aa01      	add	r2, sp, #4
   1089e:	4629      	mov	r1, r5
   108a0:	4640      	mov	r0, r8
   108a2:	f7ff fd70 	bl	10386 <arr_getByIndex>
   108a6:	b160      	cbz	r0, 108c2 <getUserList+0x42>
    return 0;
   108a8:	2000      	movs	r0, #0
   108aa:	e007      	b.n	108bc <getUserList+0x3c>
   108ac:	f8b7 1066 	ldrh.w	r1, [r7, #102]	; 0x66
        e->transactionEndIndex = target->userList.size;
   108b0:	63e1      	str	r1, [r4, #60]	; 0x3c
        if ((ret = cosem_setArray(data, target->userList.size)) != 0)
   108b2:	4610      	mov	r0, r2
   108b4:	f7fd f91a 	bl	daec <cosem_setArray>
   108b8:	2800      	cmp	r0, #0
   108ba:	d0e8      	beq.n	1088e <getUserList+0xe>
}
   108bc:	b003      	add	sp, #12
   108be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        id = it->key;
   108c2:	9b01      	ldr	r3, [sp, #4]
        name = it->value;
   108c4:	f8d3 a004 	ldr.w	sl, [r3, #4]
        id = it->key;
   108c8:	f893 b000 	ldrb.w	fp, [r3]
        len = (unsigned char)strlen(name);
   108cc:	4650      	mov	r0, sl
   108ce:	f7f0 fa77 	bl	dc0 <strlen>
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   108d2:	2102      	movs	r1, #2
        len = (unsigned char)strlen(name);
   108d4:	fa5f f980 	uxtb.w	r9, r0
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   108d8:	4630      	mov	r0, r6
   108da:	f7fd f8f9 	bl	dad0 <cosem_setStructure>
   108de:	2800      	cmp	r0, #0
   108e0:	d1ec      	bne.n	108bc <getUserList+0x3c>
            (ret = cosem_setUInt8(data, (unsigned char)id)) != 0 ||
   108e2:	4659      	mov	r1, fp
   108e4:	4630      	mov	r0, r6
   108e6:	f7fd f898 	bl	da1a <cosem_setUInt8>
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   108ea:	2800      	cmp	r0, #0
   108ec:	d1e6      	bne.n	108bc <getUserList+0x3c>
            (ret = cosem_setOctetString2(data, (unsigned char*)name, len)) != 0)
   108ee:	464a      	mov	r2, r9
   108f0:	4651      	mov	r1, sl
   108f2:	4630      	mov	r0, r6
   108f4:	f7fd f870 	bl	d9d8 <cosem_setOctetString2>
            (ret = cosem_setUInt8(data, (unsigned char)id)) != 0 ||
   108f8:	2800      	cmp	r0, #0
   108fa:	d1df      	bne.n	108bc <getUserList+0x3c>
        ++e->transactionStartIndex;
   108fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    for (pos = (uint16_t)e->transactionStartIndex; pos < target->userList.size; ++pos)
   108fe:	3501      	adds	r5, #1
        ++e->transactionStartIndex;
   10900:	3301      	adds	r3, #1
   10902:	63a3      	str	r3, [r4, #56]	; 0x38
    for (pos = (uint16_t)e->transactionStartIndex; pos < target->userList.size; ++pos)
   10904:	b2ad      	uxth	r5, r5
   10906:	e7c5      	b.n	10894 <getUserList+0x14>

00010908 <cosem_getAssociationLogicalName>:
{
   10908:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (e->index == 2)
   1090a:	7e0b      	ldrb	r3, [r1, #24]
    gxByteBuffer* data = e->value.byteArr;
   1090c:	688c      	ldr	r4, [r1, #8]
    if (e->index == 2)
   1090e:	2b02      	cmp	r3, #2
{
   10910:	b085      	sub	sp, #20
    if (e->index == 2)
   10912:	d104      	bne.n	1091e <cosem_getAssociationLogicalName+0x16>
        ret = getLNObjects(settings, e, data);
   10914:	4622      	mov	r2, r4
   10916:	f7f2 fb73 	bl	3000 <getLNObjects>
}
   1091a:	b005      	add	sp, #20
   1091c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (e->index == 3)
   1091e:	2b03      	cmp	r3, #3
    gxAssociationLogicalName* object = ((gxAssociationLogicalName*)e->target);
   10920:	694d      	ldr	r5, [r1, #20]
    else if (e->index == 3)
   10922:	d110      	bne.n	10946 <cosem_getAssociationLogicalName+0x3e>
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   10924:	2102      	movs	r1, #2
   10926:	4620      	mov	r0, r4
   10928:	f7fd f8d2 	bl	dad0 <cosem_setStructure>
   1092c:	2800      	cmp	r0, #0
   1092e:	d1f4      	bne.n	1091a <cosem_getAssociationLogicalName+0x12>
            (ret = cosem_setInt8(data, object->clientSAP)) != 0 ||
   10930:	7f29      	ldrb	r1, [r5, #28]
   10932:	4620      	mov	r0, r4
   10934:	f7fd f89b 	bl	da6e <cosem_setInt8>
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   10938:	2800      	cmp	r0, #0
   1093a:	d1ee      	bne.n	1091a <cosem_getAssociationLogicalName+0x12>
            (ret = cosem_setUInt16(data, object->serverSAP)) != 0)
   1093c:	8be9      	ldrh	r1, [r5, #30]
   1093e:	4620      	mov	r0, r4
   10940:	f7fd f879 	bl	da36 <cosem_setUInt16>
   10944:	e7e9      	b.n	1091a <cosem_getAssociationLogicalName+0x12>
    else if (e->index == 4)
   10946:	2b04      	cmp	r3, #4
   10948:	d138      	bne.n	109bc <cosem_getAssociationLogicalName+0xb4>
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   1094a:	2109      	movs	r1, #9
   1094c:	4620      	mov	r0, r4
   1094e:	f7fc f9b2 	bl	ccb6 <bb_setUInt8>
   10952:	2800      	cmp	r0, #0
   10954:	d1e1      	bne.n	1091a <cosem_getAssociationLogicalName+0x12>
            (ret = bb_setUInt8(data, 0x7)) != 0 ||
   10956:	2107      	movs	r1, #7
   10958:	4620      	mov	r0, r4
   1095a:	f7fc f9ac 	bl	ccb6 <bb_setUInt8>
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   1095e:	2800      	cmp	r0, #0
   10960:	d1db      	bne.n	1091a <cosem_getAssociationLogicalName+0x12>
            (ret = bb_setUInt8(data, 0x60)) != 0 ||
   10962:	2160      	movs	r1, #96	; 0x60
   10964:	4620      	mov	r0, r4
   10966:	f7fc f9a6 	bl	ccb6 <bb_setUInt8>
            (ret = bb_setUInt8(data, 0x7)) != 0 ||
   1096a:	2800      	cmp	r0, #0
   1096c:	d1d5      	bne.n	1091a <cosem_getAssociationLogicalName+0x12>
            (ret = bb_setUInt8(data, 0x85)) != 0 ||
   1096e:	2185      	movs	r1, #133	; 0x85
   10970:	4620      	mov	r0, r4
   10972:	f7fc f9a0 	bl	ccb6 <bb_setUInt8>
            (ret = bb_setUInt8(data, 0x60)) != 0 ||
   10976:	2800      	cmp	r0, #0
   10978:	d1cf      	bne.n	1091a <cosem_getAssociationLogicalName+0x12>
            (ret = bb_setUInt8(data, 0x74)) != 0 ||
   1097a:	2174      	movs	r1, #116	; 0x74
   1097c:	4620      	mov	r0, r4
   1097e:	f7fc f99a 	bl	ccb6 <bb_setUInt8>
            (ret = bb_setUInt8(data, 0x85)) != 0 ||
   10982:	2800      	cmp	r0, #0
   10984:	d1c9      	bne.n	1091a <cosem_getAssociationLogicalName+0x12>
            (ret = bb_setUInt8(data, object->applicationContextName.identifiedOrganization)) != 0 ||
   10986:	f895 102a 	ldrb.w	r1, [r5, #42]	; 0x2a
   1098a:	4620      	mov	r0, r4
   1098c:	f7fc f993 	bl	ccb6 <bb_setUInt8>
            (ret = bb_setUInt8(data, 0x74)) != 0 ||
   10990:	2800      	cmp	r0, #0
   10992:	d1c2      	bne.n	1091a <cosem_getAssociationLogicalName+0x12>
            (ret = bb_setUInt8(data, object->applicationContextName.dlmsUA)) != 0 ||
   10994:	f895 102b 	ldrb.w	r1, [r5, #43]	; 0x2b
   10998:	4620      	mov	r0, r4
   1099a:	f7fc f98c 	bl	ccb6 <bb_setUInt8>
            (ret = bb_setUInt8(data, object->applicationContextName.identifiedOrganization)) != 0 ||
   1099e:	2800      	cmp	r0, #0
   109a0:	d1bb      	bne.n	1091a <cosem_getAssociationLogicalName+0x12>
            (ret = bb_setUInt8(data, object->applicationContextName.applicationContext)) != 0 ||
   109a2:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
   109a6:	4620      	mov	r0, r4
   109a8:	f7fc f985 	bl	ccb6 <bb_setUInt8>
            (ret = bb_setUInt8(data, object->applicationContextName.dlmsUA)) != 0 ||
   109ac:	2800      	cmp	r0, #0
   109ae:	d1b4      	bne.n	1091a <cosem_getAssociationLogicalName+0x12>
            (ret = bb_setUInt8(data, object->applicationContextName.contextId)) != 0)
   109b0:	f895 102d 	ldrb.w	r1, [r5, #45]	; 0x2d
                (ret = bb_setUInt8(data, 0)) != 0)
   109b4:	4620      	mov	r0, r4
   109b6:	f7fc f97e 	bl	ccb6 <bb_setUInt8>
   109ba:	e7ae      	b.n	1091a <cosem_getAssociationLogicalName+0x12>
    else if (e->index == 5)
   109bc:	2b05      	cmp	r3, #5
   109be:	d134      	bne.n	10a2a <cosem_getAssociationLogicalName+0x122>
        bb_attach(&tmp, buff, 0, sizeof(buff));
   109c0:	2304      	movs	r3, #4
   109c2:	4669      	mov	r1, sp
   109c4:	2200      	movs	r2, #0
   109c6:	eb0d 0003 	add.w	r0, sp, r3
   109ca:	f7fc faaa 	bl	cf22 <bb_attach>
        if ((ret = cosem_setStructure(data, 6)) != 0 ||
   109ce:	2106      	movs	r1, #6
   109d0:	4620      	mov	r0, r4
   109d2:	f7fd f87d 	bl	dad0 <cosem_setStructure>
   109d6:	2800      	cmp	r0, #0
   109d8:	d19f      	bne.n	1091a <cosem_getAssociationLogicalName+0x12>
            (ret = cosem_setBitString(data, object->xDLMSContextInfo.conformance, 24)) != 0 ||
   109da:	6b29      	ldr	r1, [r5, #48]	; 0x30
   109dc:	2218      	movs	r2, #24
   109de:	4620      	mov	r0, r4
   109e0:	f7fc ff4e 	bl	d880 <cosem_setBitString>
        if ((ret = cosem_setStructure(data, 6)) != 0 ||
   109e4:	2800      	cmp	r0, #0
   109e6:	d198      	bne.n	1091a <cosem_getAssociationLogicalName+0x12>
            (ret = cosem_setUInt16(data, object->xDLMSContextInfo.maxReceivePduSize)) != 0 ||
   109e8:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
   109ea:	4620      	mov	r0, r4
   109ec:	f7fd f823 	bl	da36 <cosem_setUInt16>
            (ret = cosem_setBitString(data, object->xDLMSContextInfo.conformance, 24)) != 0 ||
   109f0:	2800      	cmp	r0, #0
   109f2:	d192      	bne.n	1091a <cosem_getAssociationLogicalName+0x12>
            (ret = cosem_setUInt16(data, object->xDLMSContextInfo.maxSendPduSize)) != 0 ||
   109f4:	8ee9      	ldrh	r1, [r5, #54]	; 0x36
   109f6:	4620      	mov	r0, r4
   109f8:	f7fd f81d 	bl	da36 <cosem_setUInt16>
            (ret = cosem_setUInt16(data, object->xDLMSContextInfo.maxReceivePduSize)) != 0 ||
   109fc:	2800      	cmp	r0, #0
   109fe:	d18c      	bne.n	1091a <cosem_getAssociationLogicalName+0x12>
            (ret = cosem_setUInt8(data, object->xDLMSContextInfo.dlmsVersionNumber)) != 0 ||
   10a00:	f895 1038 	ldrb.w	r1, [r5, #56]	; 0x38
   10a04:	4620      	mov	r0, r4
   10a06:	f7fd f808 	bl	da1a <cosem_setUInt8>
            (ret = cosem_setUInt16(data, object->xDLMSContextInfo.maxSendPduSize)) != 0 ||
   10a0a:	2800      	cmp	r0, #0
   10a0c:	d185      	bne.n	1091a <cosem_getAssociationLogicalName+0x12>
            (ret = cosem_setInt8(data, object->xDLMSContextInfo.qualityOfService)) != 0 ||
   10a0e:	f895 1039 	ldrb.w	r1, [r5, #57]	; 0x39
   10a12:	4620      	mov	r0, r4
   10a14:	f7fd f82b 	bl	da6e <cosem_setInt8>
            (ret = cosem_setUInt8(data, object->xDLMSContextInfo.dlmsVersionNumber)) != 0 ||
   10a18:	2800      	cmp	r0, #0
   10a1a:	f47f af7e 	bne.w	1091a <cosem_getAssociationLogicalName+0x12>
            (ret = cosem_setOctetString(data, &object->xDLMSContextInfo.cypheringInfo)) != 0)
   10a1e:	f105 013c 	add.w	r1, r5, #60	; 0x3c
        ret = cosem_setOctetString(e->value.byteArr, &object->secret);
   10a22:	4620      	mov	r0, r4
   10a24:	f7fc ff8b 	bl	d93e <cosem_setOctetString>
   10a28:	e777      	b.n	1091a <cosem_getAssociationLogicalName+0x12>
    else if (e->index == 6)
   10a2a:	2b06      	cmp	r3, #6
   10a2c:	d13d      	bne.n	10aaa <cosem_getAssociationLogicalName+0x1a2>
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   10a2e:	2109      	movs	r1, #9
   10a30:	4620      	mov	r0, r4
   10a32:	f7fc f940 	bl	ccb6 <bb_setUInt8>
   10a36:	2800      	cmp	r0, #0
   10a38:	f47f af6f 	bne.w	1091a <cosem_getAssociationLogicalName+0x12>
            (ret = bb_setUInt8(data, 0x7)) != 0 ||
   10a3c:	2107      	movs	r1, #7
   10a3e:	4620      	mov	r0, r4
   10a40:	f7fc f939 	bl	ccb6 <bb_setUInt8>
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   10a44:	2800      	cmp	r0, #0
   10a46:	f47f af68 	bne.w	1091a <cosem_getAssociationLogicalName+0x12>
            (ret = bb_setUInt8(data, 0x60)) != 0 ||
   10a4a:	2160      	movs	r1, #96	; 0x60
   10a4c:	4620      	mov	r0, r4
   10a4e:	f7fc f932 	bl	ccb6 <bb_setUInt8>
            (ret = bb_setUInt8(data, 0x7)) != 0 ||
   10a52:	2800      	cmp	r0, #0
   10a54:	f47f af61 	bne.w	1091a <cosem_getAssociationLogicalName+0x12>
            (ret = bb_setUInt8(data, 0x85)) != 0 ||
   10a58:	2185      	movs	r1, #133	; 0x85
   10a5a:	4620      	mov	r0, r4
   10a5c:	f7fc f92b 	bl	ccb6 <bb_setUInt8>
            (ret = bb_setUInt8(data, 0x60)) != 0 ||
   10a60:	2800      	cmp	r0, #0
   10a62:	f47f af5a 	bne.w	1091a <cosem_getAssociationLogicalName+0x12>
            (ret = bb_setUInt8(data, 0x74)) != 0 ||
   10a66:	2174      	movs	r1, #116	; 0x74
   10a68:	4620      	mov	r0, r4
   10a6a:	f7fc f924 	bl	ccb6 <bb_setUInt8>
            (ret = bb_setUInt8(data, 0x85)) != 0 ||
   10a6e:	2800      	cmp	r0, #0
   10a70:	f47f af53 	bne.w	1091a <cosem_getAssociationLogicalName+0x12>
            (ret = bb_setUInt8(data, object->authenticationMechanismName.identifiedOrganization)) != 0 ||
   10a74:	f895 104c 	ldrb.w	r1, [r5, #76]	; 0x4c
   10a78:	4620      	mov	r0, r4
   10a7a:	f7fc f91c 	bl	ccb6 <bb_setUInt8>
            (ret = bb_setUInt8(data, 0x74)) != 0 ||
   10a7e:	2800      	cmp	r0, #0
   10a80:	f47f af4b 	bne.w	1091a <cosem_getAssociationLogicalName+0x12>
            (ret = bb_setUInt8(data, object->authenticationMechanismName.dlmsUA)) != 0 ||
   10a84:	f895 104d 	ldrb.w	r1, [r5, #77]	; 0x4d
   10a88:	4620      	mov	r0, r4
   10a8a:	f7fc f914 	bl	ccb6 <bb_setUInt8>
            (ret = bb_setUInt8(data, object->authenticationMechanismName.identifiedOrganization)) != 0 ||
   10a8e:	2800      	cmp	r0, #0
   10a90:	f47f af43 	bne.w	1091a <cosem_getAssociationLogicalName+0x12>
            (ret = bb_setUInt8(data, object->authenticationMechanismName.authenticationMechanismName)) != 0 ||
   10a94:	f895 104e 	ldrb.w	r1, [r5, #78]	; 0x4e
   10a98:	4620      	mov	r0, r4
   10a9a:	f7fc f90c 	bl	ccb6 <bb_setUInt8>
            (ret = bb_setUInt8(data, object->authenticationMechanismName.dlmsUA)) != 0 ||
   10a9e:	2800      	cmp	r0, #0
   10aa0:	f47f af3b 	bne.w	1091a <cosem_getAssociationLogicalName+0x12>
            (ret = bb_setUInt8(data, (unsigned char)object->authenticationMechanismName.mechanismId)) != 0)
   10aa4:	f895 104f 	ldrb.w	r1, [r5, #79]	; 0x4f
   10aa8:	e784      	b.n	109b4 <cosem_getAssociationLogicalName+0xac>
    else if (e->index == 7)
   10aaa:	2b07      	cmp	r3, #7
   10aac:	d102      	bne.n	10ab4 <cosem_getAssociationLogicalName+0x1ac>
        ret = cosem_setOctetString(e->value.byteArr, &object->secret);
   10aae:	f105 0150 	add.w	r1, r5, #80	; 0x50
   10ab2:	e7b6      	b.n	10a22 <cosem_getAssociationLogicalName+0x11a>
    else if (e->index == 8)
   10ab4:	2b08      	cmp	r3, #8
   10ab6:	d104      	bne.n	10ac2 <cosem_getAssociationLogicalName+0x1ba>
        ret = cosem_setEnum(e->value.byteArr, object->associationStatus);
   10ab8:	7c29      	ldrb	r1, [r5, #16]
   10aba:	4620      	mov	r0, r4
   10abc:	f7fd f824 	bl	db08 <cosem_setEnum>
   10ac0:	e72b      	b.n	1091a <cosem_getAssociationLogicalName+0x12>
    else if (e->index == 9)
   10ac2:	2b09      	cmp	r3, #9
   10ac4:	d108      	bne.n	10ad8 <cosem_getAssociationLogicalName+0x1d0>
        ret = cosem_setOctetString2(e->value.byteArr, obj_getLogicalName((gxObject*)object->securitySetup), 6);
   10ac6:	6de8      	ldr	r0, [r5, #92]	; 0x5c
   10ac8:	f7f3 f98e 	bl	3de8 <obj_getLogicalName>
   10acc:	2206      	movs	r2, #6
   10ace:	4601      	mov	r1, r0
                (ret = cosem_setOctetString2(data, (unsigned char*)str, len)) != 0)
   10ad0:	4620      	mov	r0, r4
   10ad2:	f7fc ff81 	bl	d9d8 <cosem_setOctetString2>
   10ad6:	e720      	b.n	1091a <cosem_getAssociationLogicalName+0x12>
    else if (e->index == 10)
   10ad8:	2b0a      	cmp	r3, #10
   10ada:	d103      	bne.n	10ae4 <cosem_getAssociationLogicalName+0x1dc>
        ret = getUserList(settings, e, e->value.byteArr);
   10adc:	4622      	mov	r2, r4
   10ade:	f7ff fecf 	bl	10880 <getUserList>
   10ae2:	e71a      	b.n	1091a <cosem_getAssociationLogicalName+0x12>
    else if (e->index == 11)
   10ae4:	2b0b      	cmp	r3, #11
   10ae6:	d127      	bne.n	10b38 <cosem_getAssociationLogicalName+0x230>
        if ((ret = cosem_setStructure(data, 2)) != 0)
   10ae8:	2102      	movs	r1, #2
   10aea:	4620      	mov	r0, r4
   10aec:	f7fc fff0 	bl	dad0 <cosem_setStructure>
   10af0:	2800      	cmp	r0, #0
   10af2:	f47f af12 	bne.w	1091a <cosem_getAssociationLogicalName+0x12>
        if (object->currentUser.value == NULL)
   10af6:	6f2e      	ldr	r6, [r5, #112]	; 0x70
   10af8:	b97e      	cbnz	r6, 10b1a <cosem_getAssociationLogicalName+0x212>
            if ((ret = cosem_setUInt8(data, 0)) != 0 ||
   10afa:	4601      	mov	r1, r0
   10afc:	4620      	mov	r0, r4
   10afe:	f7fc ff8c 	bl	da1a <cosem_setUInt8>
   10b02:	2800      	cmp	r0, #0
   10b04:	f47f af09 	bne.w	1091a <cosem_getAssociationLogicalName+0x12>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRING)) != 0 ||
   10b08:	210a      	movs	r1, #10
   10b0a:	4620      	mov	r0, r4
   10b0c:	f7fc f8d3 	bl	ccb6 <bb_setUInt8>
            if ((ret = cosem_setUInt8(data, 0)) != 0 ||
   10b10:	2800      	cmp	r0, #0
   10b12:	f47f af02 	bne.w	1091a <cosem_getAssociationLogicalName+0x12>
                (ret = bb_setUInt8(data, 0)) != 0)
   10b16:	4601      	mov	r1, r0
   10b18:	e74c      	b.n	109b4 <cosem_getAssociationLogicalName+0xac>
            unsigned char len = (unsigned char)strlen(str);
   10b1a:	4630      	mov	r0, r6
   10b1c:	f7f0 f950 	bl	dc0 <strlen>
            if ((ret = cosem_setUInt8(data, object->currentUser.key)) != 0 ||
   10b20:	f895 106c 	ldrb.w	r1, [r5, #108]	; 0x6c
            unsigned char len = (unsigned char)strlen(str);
   10b24:	4607      	mov	r7, r0
            if ((ret = cosem_setUInt8(data, object->currentUser.key)) != 0 ||
   10b26:	4620      	mov	r0, r4
   10b28:	f7fc ff77 	bl	da1a <cosem_setUInt8>
   10b2c:	2800      	cmp	r0, #0
   10b2e:	f47f aef4 	bne.w	1091a <cosem_getAssociationLogicalName+0x12>
                (ret = cosem_setOctetString2(data, (unsigned char*)str, len)) != 0)
   10b32:	b2fa      	uxtb	r2, r7
   10b34:	4631      	mov	r1, r6
   10b36:	e7cb      	b.n	10ad0 <cosem_getAssociationLogicalName+0x1c8>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   10b38:	f44f 7081 	mov.w	r0, #258	; 0x102
   10b3c:	e6ed      	b.n	1091a <cosem_getAssociationLogicalName+0x12>

00010b3e <getSNObjects>:
{
   10b3e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    objectArray* list = &((gxAssociationShortName*)e->target)->objectList;
   10b42:	f8d1 9014 	ldr.w	r9, [r1, #20]
{
   10b46:	4680      	mov	r8, r0
   10b48:	460d      	mov	r5, r1
    if ((ret = bb_capacity(ba, settings->maxPduSize)) != 0)
   10b4a:	f8b0 1052 	ldrh.w	r1, [r0, #82]	; 0x52
   10b4e:	4610      	mov	r0, r2
{
   10b50:	4614      	mov	r4, r2
    if ((ret = bb_capacity(ba, settings->maxPduSize)) != 0)
   10b52:	f7fc f84d 	bl	cbf0 <bb_capacity>
   10b56:	4606      	mov	r6, r0
   10b58:	2800      	cmp	r0, #0
   10b5a:	d150      	bne.n	10bfe <getSNObjects+0xc0>
    if (!e->transaction)
   10b5c:	f8b5 3040 	ldrh.w	r3, [r5, #64]	; 0x40
   10b60:	2b00      	cmp	r3, #0
   10b62:	d039      	beq.n	10bd8 <getSNObjects+0x9a>
    for (pos = (uint16_t)e->transactionStartIndex; pos != list->size; ++pos)
   10b64:	8f2f      	ldrh	r7, [r5, #56]	; 0x38
    objectArray* list = &((gxAssociationShortName*)e->target)->objectList;
   10b66:	f109 0b10 	add.w	fp, r9, #16
    for (pos = (uint16_t)e->transactionStartIndex; pos != list->size; ++pos)
   10b6a:	f8b9 3016 	ldrh.w	r3, [r9, #22]
   10b6e:	42bb      	cmp	r3, r7
   10b70:	d045      	beq.n	10bfe <getSNObjects+0xc0>
        if ((ret = oa_getByIndex(list, pos, &it)) != 0 ||
   10b72:	aa01      	add	r2, sp, #4
   10b74:	4639      	mov	r1, r7
   10b76:	4658      	mov	r0, fp
        pduSize = (uint16_t)ba->size;
   10b78:	f8b4 a006 	ldrh.w	sl, [r4, #6]
        if ((ret = oa_getByIndex(list, pos, &it)) != 0 ||
   10b7c:	f009 f927 	bl	19dce <oa_getByIndex>
   10b80:	2800      	cmp	r0, #0
   10b82:	d140      	bne.n	10c06 <getSNObjects+0xc8>
            (ret = cosem_setStructure(ba, 4)) != 0 ||
   10b84:	2104      	movs	r1, #4
   10b86:	4620      	mov	r0, r4
   10b88:	f7fc ffa2 	bl	dad0 <cosem_setStructure>
        if ((ret = oa_getByIndex(list, pos, &it)) != 0 ||
   10b8c:	2800      	cmp	r0, #0
   10b8e:	d13a      	bne.n	10c06 <getSNObjects+0xc8>
            (ret = cosem_setInt16(ba, it->shortName)) != 0 ||
   10b90:	9b01      	ldr	r3, [sp, #4]
   10b92:	4620      	mov	r0, r4
   10b94:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
   10b98:	f7fc ff77 	bl	da8a <cosem_setInt16>
            (ret = cosem_setStructure(ba, 4)) != 0 ||
   10b9c:	2800      	cmp	r0, #0
   10b9e:	d132      	bne.n	10c06 <getSNObjects+0xc8>
            (ret = cosem_setUInt16(ba, it->objectType)) != 0 ||
   10ba0:	9b01      	ldr	r3, [sp, #4]
   10ba2:	4620      	mov	r0, r4
   10ba4:	8819      	ldrh	r1, [r3, #0]
   10ba6:	f7fc ff46 	bl	da36 <cosem_setUInt16>
            (ret = cosem_setInt16(ba, it->shortName)) != 0 ||
   10baa:	bb60      	cbnz	r0, 10c06 <getSNObjects+0xc8>
            (ret = cosem_setUInt8(ba, (unsigned char)it->version)) != 0 ||
   10bac:	9b01      	ldr	r3, [sp, #4]
   10bae:	4620      	mov	r0, r4
   10bb0:	7899      	ldrb	r1, [r3, #2]
   10bb2:	f7fc ff32 	bl	da1a <cosem_setUInt8>
            (ret = cosem_setUInt16(ba, it->objectType)) != 0 ||
   10bb6:	bb30      	cbnz	r0, 10c06 <getSNObjects+0xc8>
            (ret = cosem_setOctetString2(ba, it->logicalName, 6)) != 0)
   10bb8:	9901      	ldr	r1, [sp, #4]
   10bba:	2206      	movs	r2, #6
   10bbc:	4411      	add	r1, r2
   10bbe:	4620      	mov	r0, r4
   10bc0:	f7fc ff0a 	bl	d9d8 <cosem_setOctetString2>
            (ret = cosem_setUInt8(ba, (unsigned char)it->version)) != 0 ||
   10bc4:	b9f8      	cbnz	r0, 10c06 <getSNObjects+0xc8>
        if (settings->server)
   10bc6:	f898 3058 	ldrb.w	r3, [r8, #88]	; 0x58
   10bca:	b97b      	cbnz	r3, 10bec <getSNObjects+0xae>
        ++e->transactionStartIndex;
   10bcc:	6bab      	ldr	r3, [r5, #56]	; 0x38
    for (pos = (uint16_t)e->transactionStartIndex; pos != list->size; ++pos)
   10bce:	3701      	adds	r7, #1
        ++e->transactionStartIndex;
   10bd0:	3301      	adds	r3, #1
   10bd2:	63ab      	str	r3, [r5, #56]	; 0x38
    for (pos = (uint16_t)e->transactionStartIndex; pos != list->size; ++pos)
   10bd4:	b2bf      	uxth	r7, r7
   10bd6:	e7c8      	b.n	10b6a <getSNObjects+0x2c>
   10bd8:	f8b9 1016 	ldrh.w	r1, [r9, #22]
        e->transactionEndIndex = list->size;
   10bdc:	63e9      	str	r1, [r5, #60]	; 0x3c
        if ((ret = cosem_setArray(ba, list->size)) != 0)
   10bde:	4620      	mov	r0, r4
   10be0:	f7fc ff84 	bl	daec <cosem_setArray>
   10be4:	2800      	cmp	r0, #0
   10be6:	d0bd      	beq.n	10b64 <getSNObjects+0x26>
   10be8:	4606      	mov	r6, r0
   10bea:	e008      	b.n	10bfe <getSNObjects+0xc0>
            if (dlms_isPduFull(settings, ba, NULL))
   10bec:	4602      	mov	r2, r0
   10bee:	4621      	mov	r1, r4
   10bf0:	4640      	mov	r0, r8
   10bf2:	f7ff fae3 	bl	101bc <dlms_isPduFull>
   10bf6:	2800      	cmp	r0, #0
   10bf8:	d0e8      	beq.n	10bcc <getSNObjects+0x8e>
        ba->size = pduSize;
   10bfa:	f8a4 a006 	strh.w	sl, [r4, #6]
}
   10bfe:	4630      	mov	r0, r6
   10c00:	b003      	add	sp, #12
   10c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (ret == DLMS_ERROR_CODE_OUTOFMEMORY)
   10c06:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
   10c0a:	d1ed      	bne.n	10be8 <getSNObjects+0xaa>
   10c0c:	e7f5      	b.n	10bfa <getSNObjects+0xbc>

00010c0e <getSNAccessRights>:
{
   10c0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10c12:	4681      	mov	r9, r0
    cnt = obj_attributeCount(object);
   10c14:	4608      	mov	r0, r1
{
   10c16:	4615      	mov	r5, r2
   10c18:	460f      	mov	r7, r1
    cnt = obj_attributeCount(object);
   10c1a:	f003 f8a7 	bl	13d6c <obj_attributeCount>
    if ((ret = cosem_setStructure(ba, 3)) != 0 ||
   10c1e:	2103      	movs	r1, #3
    cnt = obj_attributeCount(object);
   10c20:	4680      	mov	r8, r0
    if ((ret = cosem_setStructure(ba, 3)) != 0 ||
   10c22:	4628      	mov	r0, r5
   10c24:	f7fc ff54 	bl	dad0 <cosem_setStructure>
   10c28:	4604      	mov	r4, r0
   10c2a:	b9d8      	cbnz	r0, 10c64 <getSNAccessRights+0x56>
        (ret = cosem_setUInt16(ba, object->shortName)) != 0 ||
   10c2c:	88b9      	ldrh	r1, [r7, #4]
   10c2e:	4628      	mov	r0, r5
   10c30:	f7fc ff01 	bl	da36 <cosem_setUInt16>
    if ((ret = cosem_setStructure(ba, 3)) != 0 ||
   10c34:	4604      	mov	r4, r0
   10c36:	b9a8      	cbnz	r0, 10c64 <getSNAccessRights+0x56>
        (ret = cosem_setArray(ba, cnt)) != 0)
   10c38:	fa1f f188 	uxth.w	r1, r8
   10c3c:	4628      	mov	r0, r5
   10c3e:	f7fc ff55 	bl	daec <cosem_setArray>
        (ret = cosem_setUInt16(ba, object->shortName)) != 0 ||
   10c42:	4604      	mov	r4, r0
   10c44:	b970      	cbnz	r0, 10c64 <getSNAccessRights+0x56>
    for (pos = 1; pos != cnt + 1; ++pos)
   10c46:	2601      	movs	r6, #1
   10c48:	44b0      	add	r8, r6
   10c4a:	4546      	cmp	r6, r8
   10c4c:	d10d      	bne.n	10c6a <getSNAccessRights+0x5c>
    cnt = obj_methodCount(object);
   10c4e:	4638      	mov	r0, r7
   10c50:	f003 f900 	bl	13e54 <obj_methodCount>
    if ((ret = cosem_setArray(ba, cnt)) == 0)
   10c54:	b281      	uxth	r1, r0
    cnt = obj_methodCount(object);
   10c56:	4680      	mov	r8, r0
    if ((ret = cosem_setArray(ba, cnt)) == 0)
   10c58:	4628      	mov	r0, r5
   10c5a:	f7fc ff47 	bl	daec <cosem_setArray>
   10c5e:	4604      	mov	r4, r0
   10c60:	2800      	cmp	r0, #0
   10c62:	d041      	beq.n	10ce8 <getSNAccessRights+0xda>
}
   10c64:	4620      	mov	r0, r4
   10c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ch = (unsigned char)svr_getAttributeAccess(settings, object, pos);
   10c6a:	4632      	mov	r2, r6
   10c6c:	4639      	mov	r1, r7
   10c6e:	4648      	mov	r0, r9
   10c70:	f7fb fea9 	bl	c9c6 <svr_getAttributeAccess>
        if ((ret = cosem_setStructure(ba, 3)) != 0 ||
   10c74:	2103      	movs	r1, #3
        ch = (unsigned char)svr_getAttributeAccess(settings, object, pos);
   10c76:	4682      	mov	sl, r0
        if ((ret = cosem_setStructure(ba, 3)) != 0 ||
   10c78:	4628      	mov	r0, r5
   10c7a:	f7fc ff29 	bl	dad0 <cosem_setStructure>
   10c7e:	4604      	mov	r4, r0
   10c80:	2800      	cmp	r0, #0
   10c82:	d1ef      	bne.n	10c64 <getSNAccessRights+0x56>
            (ret = cosem_setInt8(ba, pos)) != 0 ||
   10c84:	4631      	mov	r1, r6
   10c86:	4628      	mov	r0, r5
   10c88:	f7fc fef1 	bl	da6e <cosem_setInt8>
        if ((ret = cosem_setStructure(ba, 3)) != 0 ||
   10c8c:	4604      	mov	r4, r0
   10c8e:	2800      	cmp	r0, #0
   10c90:	d1e8      	bne.n	10c64 <getSNAccessRights+0x56>
            (ret = cosem_setEnum(ba, ch)) != 0 ||
   10c92:	4651      	mov	r1, sl
   10c94:	4628      	mov	r0, r5
   10c96:	f7fc ff37 	bl	db08 <cosem_setEnum>
            (ret = cosem_setInt8(ba, pos)) != 0 ||
   10c9a:	4604      	mov	r4, r0
   10c9c:	2800      	cmp	r0, #0
   10c9e:	d1e1      	bne.n	10c64 <getSNAccessRights+0x56>
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_NONE)) != 0)
   10ca0:	4601      	mov	r1, r0
   10ca2:	4628      	mov	r0, r5
   10ca4:	f7fc f807 	bl	ccb6 <bb_setUInt8>
            (ret = cosem_setEnum(ba, ch)) != 0 ||
   10ca8:	4604      	mov	r4, r0
   10caa:	2800      	cmp	r0, #0
   10cac:	d1da      	bne.n	10c64 <getSNAccessRights+0x56>
    for (pos = 1; pos != cnt + 1; ++pos)
   10cae:	3601      	adds	r6, #1
   10cb0:	b2f6      	uxtb	r6, r6
   10cb2:	e7ca      	b.n	10c4a <getSNAccessRights+0x3c>
            ch = (unsigned char)svr_getMethodAccess(settings, object, pos);
   10cb4:	4639      	mov	r1, r7
   10cb6:	4632      	mov	r2, r6
   10cb8:	4648      	mov	r0, r9
   10cba:	f7fb fe86 	bl	c9ca <svr_getMethodAccess>
            if ((ret = cosem_setStructure(ba, 3)) != 0 ||
   10cbe:	2103      	movs	r1, #3
            ch = (unsigned char)svr_getMethodAccess(settings, object, pos);
   10cc0:	4682      	mov	sl, r0
            if ((ret = cosem_setStructure(ba, 3)) != 0 ||
   10cc2:	4628      	mov	r0, r5
   10cc4:	f7fc ff04 	bl	dad0 <cosem_setStructure>
   10cc8:	b988      	cbnz	r0, 10cee <getSNAccessRights+0xe0>
                (ret = cosem_setInt8(ba, pos)) != 0 ||
   10cca:	4631      	mov	r1, r6
   10ccc:	4628      	mov	r0, r5
   10cce:	f7fc fece 	bl	da6e <cosem_setInt8>
            if ((ret = cosem_setStructure(ba, 3)) != 0 ||
   10cd2:	b960      	cbnz	r0, 10cee <getSNAccessRights+0xe0>
                (ret = cosem_setEnum(ba, ch)) != 0)
   10cd4:	4651      	mov	r1, sl
   10cd6:	4628      	mov	r0, r5
   10cd8:	f7fc ff16 	bl	db08 <cosem_setEnum>
                (ret = cosem_setInt8(ba, pos)) != 0 ||
   10cdc:	b938      	cbnz	r0, 10cee <getSNAccessRights+0xe0>
        for (pos = 1; pos != cnt + 1; ++pos)
   10cde:	3601      	adds	r6, #1
   10ce0:	b2f6      	uxtb	r6, r6
   10ce2:	4546      	cmp	r6, r8
   10ce4:	d1e6      	bne.n	10cb4 <getSNAccessRights+0xa6>
   10ce6:	e7bd      	b.n	10c64 <getSNAccessRights+0x56>
   10ce8:	2601      	movs	r6, #1
   10cea:	44b0      	add	r8, r6
   10cec:	e7f9      	b.n	10ce2 <getSNAccessRights+0xd4>
                (ret = cosem_setEnum(ba, ch)) != 0)
   10cee:	4604      	mov	r4, r0
   10cf0:	e7b8      	b.n	10c64 <getSNAccessRights+0x56>

00010cf2 <cosem_getAssociationShortName>:
{
   10cf2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    if (e->index == 2)
   10cf6:	7e0a      	ldrb	r2, [r1, #24]
    gxByteBuffer* data = e->value.byteArr;
   10cf8:	688d      	ldr	r5, [r1, #8]
    if (e->index == 2)
   10cfa:	2a02      	cmp	r2, #2
{
   10cfc:	4606      	mov	r6, r0
    if (e->index == 2)
   10cfe:	d104      	bne.n	10d0a <cosem_getAssociationShortName+0x18>
        ret = getSNObjects(settings, e, data);
   10d00:	462a      	mov	r2, r5
   10d02:	f7ff ff1c 	bl	10b3e <getSNObjects>
                    (ret = getSNAccessRights(settings, it, data)) != 0)
   10d06:	4604      	mov	r4, r0
   10d08:	e008      	b.n	10d1c <cosem_getAssociationShortName+0x2a>
    else if (e->index == 3)
   10d0a:	2a03      	cmp	r2, #3
    gxAssociationShortName* object = (gxAssociationShortName*)e->target;
   10d0c:	694f      	ldr	r7, [r1, #20]
    else if (e->index == 3)
   10d0e:	d122      	bne.n	10d56 <cosem_getAssociationShortName+0x64>
        if ((ret = cosem_setArray(data, object->objectList.size)) == 0)
   10d10:	8af9      	ldrh	r1, [r7, #22]
   10d12:	4628      	mov	r0, r5
   10d14:	f7fc feea 	bl	daec <cosem_setArray>
   10d18:	4604      	mov	r4, r0
   10d1a:	b1c0      	cbz	r0, 10d4e <cosem_getAssociationShortName+0x5c>
}
   10d1c:	4620      	mov	r0, r4
   10d1e:	b003      	add	sp, #12
   10d20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                if ((ret = oa_getByIndex(&object->objectList, pos, &it)) != 0 ||
   10d24:	aa01      	add	r2, sp, #4
   10d26:	4640      	mov	r0, r8
   10d28:	f009 f851 	bl	19dce <oa_getByIndex>
   10d2c:	2800      	cmp	r0, #0
   10d2e:	d1ea      	bne.n	10d06 <cosem_getAssociationShortName+0x14>
                    (ret = getSNAccessRights(settings, it, data)) != 0)
   10d30:	9901      	ldr	r1, [sp, #4]
   10d32:	462a      	mov	r2, r5
   10d34:	4630      	mov	r0, r6
   10d36:	f7ff ff6a 	bl	10c0e <getSNAccessRights>
   10d3a:	f109 0901 	add.w	r9, r9, #1
                if ((ret = oa_getByIndex(&object->objectList, pos, &it)) != 0 ||
   10d3e:	2800      	cmp	r0, #0
   10d40:	d1e1      	bne.n	10d06 <cosem_getAssociationShortName+0x14>
            for (pos = 0; pos != object->objectList.size; ++pos)
   10d42:	8afb      	ldrh	r3, [r7, #22]
   10d44:	fa1f f189 	uxth.w	r1, r9
   10d48:	428b      	cmp	r3, r1
   10d4a:	d1eb      	bne.n	10d24 <cosem_getAssociationShortName+0x32>
   10d4c:	e7e6      	b.n	10d1c <cosem_getAssociationShortName+0x2a>
   10d4e:	4681      	mov	r9, r0
                if ((ret = oa_getByIndex(&object->objectList, pos, &it)) != 0 ||
   10d50:	f107 0810 	add.w	r8, r7, #16
   10d54:	e7f5      	b.n	10d42 <cosem_getAssociationShortName+0x50>
    else if (e->index == 4)
   10d56:	2a04      	cmp	r2, #4
   10d58:	d108      	bne.n	10d6c <cosem_getAssociationShortName+0x7a>
        ret = cosem_setOctetString2(e->value.byteArr, obj_getLogicalName((gxObject*)object->securitySetup), 6);
   10d5a:	69b8      	ldr	r0, [r7, #24]
   10d5c:	f7f3 f844 	bl	3de8 <obj_getLogicalName>
   10d60:	2206      	movs	r2, #6
   10d62:	4601      	mov	r1, r0
   10d64:	4628      	mov	r0, r5
   10d66:	f7fc fe37 	bl	d9d8 <cosem_setOctetString2>
   10d6a:	e7cc      	b.n	10d06 <cosem_getAssociationShortName+0x14>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   10d6c:	f44f 7481 	mov.w	r4, #258	; 0x102
    return ret;
   10d70:	e7d4      	b.n	10d1c <cosem_getAssociationShortName+0x2a>

00010d72 <cosem_getAutoAnswer>:
{
   10d72:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    if (e->index == 2)
   10d76:	7e03      	ldrb	r3, [r0, #24]
    gxAutoAnswer* object = (gxAutoAnswer*)e->target;
   10d78:	6946      	ldr	r6, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
   10d7a:	6885      	ldr	r5, [r0, #8]
    if (e->index == 2)
   10d7c:	2b02      	cmp	r3, #2
   10d7e:	d104      	bne.n	10d8a <cosem_getAutoAnswer+0x18>
        ret = cosem_setEnum(data, object->mode);
   10d80:	7cb1      	ldrb	r1, [r6, #18]
        ret = cosem_setEnum(data, object->status);
   10d82:	4628      	mov	r0, r5
   10d84:	f7fc fec0 	bl	db08 <cosem_setEnum>
   10d88:	e02c      	b.n	10de4 <cosem_getAutoAnswer+0x72>
    else if (e->index == 3)
   10d8a:	2b03      	cmp	r3, #3
   10d8c:	d12c      	bne.n	10de8 <cosem_getAutoAnswer+0x76>
        if ((ret = cosem_setArray(data, object->listeningWindow.size)) == 0)
   10d8e:	8b71      	ldrh	r1, [r6, #26]
   10d90:	4628      	mov	r0, r5
   10d92:	f7fc feab 	bl	daec <cosem_setArray>
   10d96:	4604      	mov	r4, r0
   10d98:	b118      	cbz	r0, 10da2 <cosem_getAutoAnswer+0x30>
}
   10d9a:	4620      	mov	r0, r4
   10d9c:	b003      	add	sp, #12
   10d9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   10da2:	4607      	mov	r7, r0
                if ((ret = arr_getByIndex(&object->listeningWindow, pos, (void**)&kv)) != 0 ||
   10da4:	f106 0814 	add.w	r8, r6, #20
            for (pos = 0; pos != object->listeningWindow.size; ++pos)
   10da8:	8b73      	ldrh	r3, [r6, #26]
   10daa:	fa1f f987 	uxth.w	r9, r7
   10dae:	454b      	cmp	r3, r9
   10db0:	d0f3      	beq.n	10d9a <cosem_getAutoAnswer+0x28>
                if ((ret = cosem_setStructure(data, 2)) != 0)
   10db2:	2102      	movs	r1, #2
   10db4:	4628      	mov	r0, r5
   10db6:	f7fc fe8b 	bl	dad0 <cosem_setStructure>
   10dba:	b998      	cbnz	r0, 10de4 <cosem_getAutoAnswer+0x72>
                if ((ret = arr_getByIndex(&object->listeningWindow, pos, (void**)&kv)) != 0 ||
   10dbc:	aa01      	add	r2, sp, #4
   10dbe:	4649      	mov	r1, r9
   10dc0:	4640      	mov	r0, r8
   10dc2:	f7ff fae0 	bl	10386 <arr_getByIndex>
   10dc6:	b968      	cbnz	r0, 10de4 <cosem_getAutoAnswer+0x72>
                    (ret = cosem_setDateTimeAsOctetString(data, (gxtime*)kv->key)) != 0 ||
   10dc8:	9b01      	ldr	r3, [sp, #4]
   10dca:	4628      	mov	r0, r5
   10dcc:	6819      	ldr	r1, [r3, #0]
   10dce:	f7fc fd31 	bl	d834 <cosem_setDateTimeAsOctetString>
                if ((ret = arr_getByIndex(&object->listeningWindow, pos, (void**)&kv)) != 0 ||
   10dd2:	b938      	cbnz	r0, 10de4 <cosem_getAutoAnswer+0x72>
                    (ret = cosem_setDateTimeAsOctetString(data, (gxtime*)kv->value)) != 0)
   10dd4:	9b01      	ldr	r3, [sp, #4]
   10dd6:	4628      	mov	r0, r5
   10dd8:	6859      	ldr	r1, [r3, #4]
   10dda:	f7fc fd2b 	bl	d834 <cosem_setDateTimeAsOctetString>
   10dde:	3701      	adds	r7, #1
                    (ret = cosem_setDateTimeAsOctetString(data, (gxtime*)kv->key)) != 0 ||
   10de0:	2800      	cmp	r0, #0
   10de2:	d0e1      	beq.n	10da8 <cosem_getAutoAnswer+0x36>
            (ret = cosem_setUInt8(data, object->numberOfRingsOutListeningWindow)) != 0)
   10de4:	4604      	mov	r4, r0
   10de6:	e7d8      	b.n	10d9a <cosem_getAutoAnswer+0x28>
    else if (e->index == 4)
   10de8:	2b04      	cmp	r3, #4
   10dea:	d102      	bne.n	10df2 <cosem_getAutoAnswer+0x80>
        ret = cosem_setEnum(data, object->status);
   10dec:	f896 1020 	ldrb.w	r1, [r6, #32]
   10df0:	e7c7      	b.n	10d82 <cosem_getAutoAnswer+0x10>
    else if (e->index == 5)
   10df2:	2b05      	cmp	r3, #5
   10df4:	d105      	bne.n	10e02 <cosem_getAutoAnswer+0x90>
        ret = cosem_setUInt8(data, object->numberOfCalls);
   10df6:	f896 1021 	ldrb.w	r1, [r6, #33]	; 0x21
            (ret = cosem_setUInt8(data, object->numberOfRingsOutListeningWindow)) != 0)
   10dfa:	4628      	mov	r0, r5
   10dfc:	f7fc fe0d 	bl	da1a <cosem_setUInt8>
   10e00:	e7f0      	b.n	10de4 <cosem_getAutoAnswer+0x72>
    else if (e->index == 6)
   10e02:	2b06      	cmp	r3, #6
   10e04:	d10f      	bne.n	10e26 <cosem_getAutoAnswer+0xb4>
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   10e06:	2102      	movs	r1, #2
   10e08:	4628      	mov	r0, r5
   10e0a:	f7fc fe61 	bl	dad0 <cosem_setStructure>
   10e0e:	4604      	mov	r4, r0
   10e10:	2800      	cmp	r0, #0
   10e12:	d1c2      	bne.n	10d9a <cosem_getAutoAnswer+0x28>
            (ret = cosem_setUInt8(data, object->numberOfRingsInListeningWindow)) != 0 ||
   10e14:	7c31      	ldrb	r1, [r6, #16]
   10e16:	4628      	mov	r0, r5
   10e18:	f7fc fdff 	bl	da1a <cosem_setUInt8>
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   10e1c:	4604      	mov	r4, r0
   10e1e:	2800      	cmp	r0, #0
   10e20:	d1bb      	bne.n	10d9a <cosem_getAutoAnswer+0x28>
            (ret = cosem_setUInt8(data, object->numberOfRingsOutListeningWindow)) != 0)
   10e22:	7c71      	ldrb	r1, [r6, #17]
   10e24:	e7e9      	b.n	10dfa <cosem_getAutoAnswer+0x88>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   10e26:	f44f 7481 	mov.w	r4, #258	; 0x102
    return ret;
   10e2a:	e7b6      	b.n	10d9a <cosem_getAutoAnswer+0x28>

00010e2c <cosem_getAutoConnect>:
{
   10e2c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if (e->index == 2)
   10e30:	7e03      	ldrb	r3, [r0, #24]
    gxAutoConnect* object = (gxAutoConnect*)e->target;
   10e32:	6944      	ldr	r4, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
   10e34:	6885      	ldr	r5, [r0, #8]
    if (e->index == 2)
   10e36:	2b02      	cmp	r3, #2
   10e38:	d106      	bne.n	10e48 <cosem_getAutoConnect+0x1c>
        ret = cosem_setEnum(data, object->mode);
   10e3a:	7c21      	ldrb	r1, [r4, #16]
   10e3c:	4628      	mov	r0, r5
   10e3e:	f7fc fe63 	bl	db08 <cosem_setEnum>
}
   10e42:	b002      	add	sp, #8
   10e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (e->index == 3)
   10e48:	2b03      	cmp	r3, #3
   10e4a:	d105      	bne.n	10e58 <cosem_getAutoConnect+0x2c>
        ret = cosem_setUInt8(data, object->repetitions);
   10e4c:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
   10e50:	4628      	mov	r0, r5
   10e52:	f7fc fde2 	bl	da1a <cosem_setUInt8>
   10e56:	e7f4      	b.n	10e42 <cosem_getAutoConnect+0x16>
    else if (e->index == 4)
   10e58:	2b04      	cmp	r3, #4
   10e5a:	d104      	bne.n	10e66 <cosem_getAutoConnect+0x3a>
        ret = cosem_setUInt16(data, object->repetitionDelay);
   10e5c:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
   10e5e:	4628      	mov	r0, r5
   10e60:	f7fc fde9 	bl	da36 <cosem_setUInt16>
   10e64:	e7ed      	b.n	10e42 <cosem_getAutoConnect+0x16>
    else if (e->index == 5)
   10e66:	2b05      	cmp	r3, #5
   10e68:	d12c      	bne.n	10ec4 <cosem_getAutoConnect+0x98>
        if ((ret = cosem_setArray(data, object->callingWindow.size)) != 0)
   10e6a:	8b61      	ldrh	r1, [r4, #26]
   10e6c:	4628      	mov	r0, r5
   10e6e:	f7fc fe3d 	bl	daec <cosem_setArray>
   10e72:	2800      	cmp	r0, #0
   10e74:	d1e5      	bne.n	10e42 <cosem_getAutoConnect+0x16>
   10e76:	4606      	mov	r6, r0
            if ((ret = arr_getByIndex(&object->callingWindow, pos, (void**)&k)) != 0 ||
   10e78:	f104 0714 	add.w	r7, r4, #20
        for (pos = 0; pos != object->callingWindow.size; ++pos)
   10e7c:	8b63      	ldrh	r3, [r4, #26]
   10e7e:	fa1f f886 	uxth.w	r8, r6
   10e82:	4543      	cmp	r3, r8
   10e84:	d101      	bne.n	10e8a <cosem_getAutoConnect+0x5e>
   10e86:	2000      	movs	r0, #0
   10e88:	e7db      	b.n	10e42 <cosem_getAutoConnect+0x16>
            if ((ret = cosem_setStructure(data, 2)) != 0)
   10e8a:	2102      	movs	r1, #2
   10e8c:	4628      	mov	r0, r5
   10e8e:	f7fc fe1f 	bl	dad0 <cosem_setStructure>
   10e92:	2800      	cmp	r0, #0
   10e94:	d1d5      	bne.n	10e42 <cosem_getAutoConnect+0x16>
            if ((ret = arr_getByIndex(&object->callingWindow, pos, (void**)&k)) != 0 ||
   10e96:	aa01      	add	r2, sp, #4
   10e98:	4641      	mov	r1, r8
   10e9a:	4638      	mov	r0, r7
   10e9c:	f7ff fa73 	bl	10386 <arr_getByIndex>
   10ea0:	2800      	cmp	r0, #0
   10ea2:	d1ce      	bne.n	10e42 <cosem_getAutoConnect+0x16>
                (ret = cosem_setDateTimeAsOctetString(data, (gxtime*)k->key)) != 0 ||
   10ea4:	9b01      	ldr	r3, [sp, #4]
   10ea6:	4628      	mov	r0, r5
   10ea8:	6819      	ldr	r1, [r3, #0]
   10eaa:	f7fc fcc3 	bl	d834 <cosem_setDateTimeAsOctetString>
            if ((ret = arr_getByIndex(&object->callingWindow, pos, (void**)&k)) != 0 ||
   10eae:	2800      	cmp	r0, #0
   10eb0:	d1c7      	bne.n	10e42 <cosem_getAutoConnect+0x16>
                (ret = cosem_setDateTimeAsOctetString(data, (gxtime*)k->value)) != 0)
   10eb2:	9b01      	ldr	r3, [sp, #4]
   10eb4:	4628      	mov	r0, r5
   10eb6:	6859      	ldr	r1, [r3, #4]
   10eb8:	f7fc fcbc 	bl	d834 <cosem_setDateTimeAsOctetString>
   10ebc:	3601      	adds	r6, #1
                (ret = cosem_setDateTimeAsOctetString(data, (gxtime*)k->key)) != 0 ||
   10ebe:	2800      	cmp	r0, #0
   10ec0:	d0dc      	beq.n	10e7c <cosem_getAutoConnect+0x50>
   10ec2:	e7be      	b.n	10e42 <cosem_getAutoConnect+0x16>
    else if (e->index == 6)
   10ec4:	2b06      	cmp	r3, #6
   10ec6:	d11a      	bne.n	10efe <cosem_getAutoConnect+0xd2>
        if ((ret = cosem_setArray(data, object->destinations.size)) != 0)
   10ec8:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
   10eca:	4628      	mov	r0, r5
   10ecc:	f7fc fe0e 	bl	daec <cosem_setArray>
   10ed0:	2800      	cmp	r0, #0
   10ed2:	d1b6      	bne.n	10e42 <cosem_getAutoConnect+0x16>
   10ed4:	4606      	mov	r6, r0
            if ((ret = arr_getByIndex(&object->destinations, pos, (void**)&it)) != 0 ||
   10ed6:	f104 0720 	add.w	r7, r4, #32
        for (pos = 0; pos != object->destinations.size; ++pos)
   10eda:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   10edc:	b2b1      	uxth	r1, r6
   10ede:	428b      	cmp	r3, r1
   10ee0:	d0d1      	beq.n	10e86 <cosem_getAutoConnect+0x5a>
            if ((ret = arr_getByIndex(&object->destinations, pos, (void**)&it)) != 0 ||
   10ee2:	aa01      	add	r2, sp, #4
   10ee4:	4638      	mov	r0, r7
   10ee6:	f7ff fa4e 	bl	10386 <arr_getByIndex>
   10eea:	2800      	cmp	r0, #0
   10eec:	d1a9      	bne.n	10e42 <cosem_getAutoConnect+0x16>
                (ret = cosem_setOctetString(data, it)) != 0)
   10eee:	9901      	ldr	r1, [sp, #4]
   10ef0:	4628      	mov	r0, r5
   10ef2:	f7fc fd24 	bl	d93e <cosem_setOctetString>
   10ef6:	3601      	adds	r6, #1
            if ((ret = arr_getByIndex(&object->destinations, pos, (void**)&it)) != 0 ||
   10ef8:	2800      	cmp	r0, #0
   10efa:	d0ee      	beq.n	10eda <cosem_getAutoConnect+0xae>
   10efc:	e7a1      	b.n	10e42 <cosem_getAutoConnect+0x16>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   10efe:	f44f 7081 	mov.w	r0, #258	; 0x102
   10f02:	e79e      	b.n	10e42 <cosem_getAutoConnect+0x16>

00010f04 <cosem_getDemandRegister>:
{
   10f04:	b538      	push	{r3, r4, r5, lr}
   10f06:	7e03      	ldrb	r3, [r0, #24]
    gxByteBuffer* data = e->value.byteArr;
   10f08:	6885      	ldr	r5, [r0, #8]
    gxDemandRegister* object = (gxDemandRegister*)e->target;
   10f0a:	6944      	ldr	r4, [r0, #20]
    switch (e->index)
   10f0c:	3b02      	subs	r3, #2
   10f0e:	2b07      	cmp	r3, #7
   10f10:	d842      	bhi.n	10f98 <cosem_getDemandRegister+0x94>
   10f12:	e8df f003 	tbb	[pc, r3]
   10f16:	0d04      	.short	0x0d04
   10f18:	312a2210 	.word	0x312a2210
   10f1c:	3a34      	.short	0x3a34
        if (e->action)
   10f1e:	f104 0110 	add.w	r1, r4, #16
        if (e->action)
   10f22:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
   10f26:	b1db      	cbz	r3, 10f60 <cosem_getDemandRegister+0x5c>
}
   10f28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            ret = var_copy(&e->value, &object->status);
   10f2c:	f7f3 b9e6 	b.w	42fc <var_copy>
        if (e->action)
   10f30:	f104 0120 	add.w	r1, r4, #32
   10f34:	e7f5      	b.n	10f22 <cosem_getDemandRegister+0x1e>
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   10f36:	2102      	movs	r1, #2
   10f38:	4628      	mov	r0, r5
   10f3a:	f7fc fdc9 	bl	dad0 <cosem_setStructure>
   10f3e:	bb68      	cbnz	r0, 10f9c <cosem_getDemandRegister+0x98>
            (ret = cosem_setInt8(data, object->scaler)) != 0 ||
   10f40:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
   10f44:	4628      	mov	r0, r5
   10f46:	f7fc fd92 	bl	da6e <cosem_setInt8>
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   10f4a:	bb38      	cbnz	r0, 10f9c <cosem_getDemandRegister+0x98>
            (ret = cosem_setEnum(data, object->unit)) != 0)
   10f4c:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
   10f50:	4628      	mov	r0, r5
}
   10f52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            (ret = cosem_setEnum(data, object->unit)) != 0)
   10f56:	f7fc bdd7 	b.w	db08 <cosem_setEnum>
        if (e->action)
   10f5a:	f104 0138 	add.w	r1, r4, #56	; 0x38
   10f5e:	e7e0      	b.n	10f22 <cosem_getDemandRegister+0x1e>
            ret = cosem_setVariant(data, &object->status);
   10f60:	4628      	mov	r0, r5
}
   10f62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            ret = cosem_setVariant(data, &object->status);
   10f66:	f7fc bdac 	b.w	dac2 <cosem_setVariant>
        ret = cosem_setDateTimeAsOctetString(data, &object->captureTime);
   10f6a:	f104 0148 	add.w	r1, r4, #72	; 0x48
        ret = cosem_setDateTimeAsOctetString(data, &object->startTimeCurrent);
   10f6e:	4628      	mov	r0, r5
}
   10f70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_setDateTimeAsOctetString(data, &object->startTimeCurrent);
   10f74:	f7fc bc5e 	b.w	d834 <cosem_setDateTimeAsOctetString>
   10f78:	f104 0154 	add.w	r1, r4, #84	; 0x54
   10f7c:	e7f7      	b.n	10f6e <cosem_getDemandRegister+0x6a>
        ret = cosem_setUInt32(data, object->period);
   10f7e:	6e61      	ldr	r1, [r4, #100]	; 0x64
   10f80:	4628      	mov	r0, r5
}
   10f82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_setUInt32(data, object->period);
   10f86:	f7fc bd64 	b.w	da52 <cosem_setUInt32>
        ret = cosem_setUInt16(data, object->numberOfPeriods);
   10f8a:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
   10f8e:	4628      	mov	r0, r5
}
   10f90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_setUInt16(data, object->numberOfPeriods);
   10f94:	f7fc bd4f 	b.w	da36 <cosem_setUInt16>
    switch (e->index)
   10f98:	f44f 7081 	mov.w	r0, #258	; 0x102
}
   10f9c:	bd38      	pop	{r3, r4, r5, pc}

00010f9e <cosem_getMacAddressSetup>:
    if (e->index == 2)
   10f9e:	7e03      	ldrb	r3, [r0, #24]
   10fa0:	2b02      	cmp	r3, #2
   10fa2:	d104      	bne.n	10fae <cosem_getMacAddressSetup+0x10>
        ret = cosem_setOctetString(e->value.byteArr, &object->macAddress);
   10fa4:	6941      	ldr	r1, [r0, #20]
   10fa6:	6880      	ldr	r0, [r0, #8]
   10fa8:	3110      	adds	r1, #16
   10faa:	f7fc bcc8 	b.w	d93e <cosem_setOctetString>
}
   10fae:	f44f 7081 	mov.w	r0, #258	; 0x102
   10fb2:	4770      	bx	lr

00010fb4 <cosem_getExtendedRegister>:
{
   10fb4:	b538      	push	{r3, r4, r5, lr}
    if (e->index == 2)
   10fb6:	7e02      	ldrb	r2, [r0, #24]
    gxExtendedRegister* object = (gxExtendedRegister*)e->target;
   10fb8:	6944      	ldr	r4, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
   10fba:	6885      	ldr	r5, [r0, #8]
    if (e->index == 2)
   10fbc:	2a02      	cmp	r2, #2
{
   10fbe:	4603      	mov	r3, r0
    if (e->index == 2)
   10fc0:	d108      	bne.n	10fd4 <cosem_getExtendedRegister+0x20>
        if (e->action)
   10fc2:	f104 0110 	add.w	r1, r4, #16
        if (e->action)
   10fc6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
   10fca:	b1e3      	cbz	r3, 11006 <cosem_getExtendedRegister+0x52>
}
   10fcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            ret = var_copy(&e->value, &object->status);
   10fd0:	f7f3 b994 	b.w	42fc <var_copy>
    else if (e->index == 3)
   10fd4:	2a03      	cmp	r2, #3
   10fd6:	d111      	bne.n	10ffc <cosem_getExtendedRegister+0x48>
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   10fd8:	2102      	movs	r1, #2
   10fda:	4628      	mov	r0, r5
   10fdc:	f7fc fd78 	bl	dad0 <cosem_setStructure>
   10fe0:	bb08      	cbnz	r0, 11026 <cosem_getExtendedRegister+0x72>
            (ret = cosem_setInt8(data, object->scaler)) != 0 ||
   10fe2:	f894 1020 	ldrb.w	r1, [r4, #32]
   10fe6:	4628      	mov	r0, r5
   10fe8:	f7fc fd41 	bl	da6e <cosem_setInt8>
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   10fec:	b9d8      	cbnz	r0, 11026 <cosem_getExtendedRegister+0x72>
            (ret = cosem_setUInt8(data, object->unit)) != 0)
   10fee:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
   10ff2:	4628      	mov	r0, r5
}
   10ff4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            (ret = cosem_setUInt8(data, object->unit)) != 0)
   10ff8:	f7fc bd0f 	b.w	da1a <cosem_setUInt8>
    else if (e->index == 4)
   10ffc:	2a04      	cmp	r2, #4
   10ffe:	d107      	bne.n	11010 <cosem_getExtendedRegister+0x5c>
        if (e->action)
   11000:	f104 0130 	add.w	r1, r4, #48	; 0x30
   11004:	e7df      	b.n	10fc6 <cosem_getExtendedRegister+0x12>
            ret = cosem_setVariant(data, &object->status);
   11006:	4628      	mov	r0, r5
}
   11008:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            ret = cosem_setVariant(data, &object->status);
   1100c:	f7fc bd59 	b.w	dac2 <cosem_setVariant>
    else if (e->index == 5)
   11010:	2a05      	cmp	r2, #5
   11012:	d106      	bne.n	11022 <cosem_getExtendedRegister+0x6e>
        ret = cosem_setDateTimeAsOctetString(data, &object->captureTime);
   11014:	f104 0124 	add.w	r1, r4, #36	; 0x24
   11018:	4628      	mov	r0, r5
}
   1101a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_setDateTimeAsOctetString(data, &object->captureTime);
   1101e:	f7fc bc09 	b.w	d834 <cosem_setDateTimeAsOctetString>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   11022:	f44f 7081 	mov.w	r0, #258	; 0x102
}
   11026:	bd38      	pop	{r3, r4, r5, pc}

00011028 <cosem_getQualityOfService>:
{
   11028:	b538      	push	{r3, r4, r5, lr}
   1102a:	460c      	mov	r4, r1
   1102c:	4605      	mov	r5, r0
    if ((ret = cosem_setStructure(ba, 5)) != 0 ||
   1102e:	2105      	movs	r1, #5
   11030:	4620      	mov	r0, r4
   11032:	f7fc fd4d 	bl	dad0 <cosem_setStructure>
   11036:	b9c8      	cbnz	r0, 1106c <cosem_getQualityOfService+0x44>
        (ret = cosem_setUInt8(ba, service->precedence)) != 0 ||
   11038:	7829      	ldrb	r1, [r5, #0]
   1103a:	4620      	mov	r0, r4
   1103c:	f7fc fced 	bl	da1a <cosem_setUInt8>
    if ((ret = cosem_setStructure(ba, 5)) != 0 ||
   11040:	b9a0      	cbnz	r0, 1106c <cosem_getQualityOfService+0x44>
        (ret = cosem_setUInt8(ba, service->delay)) != 0 ||
   11042:	7869      	ldrb	r1, [r5, #1]
   11044:	4620      	mov	r0, r4
   11046:	f7fc fce8 	bl	da1a <cosem_setUInt8>
        (ret = cosem_setUInt8(ba, service->precedence)) != 0 ||
   1104a:	b978      	cbnz	r0, 1106c <cosem_getQualityOfService+0x44>
        (ret = cosem_setUInt8(ba, service->reliability)) != 0 ||
   1104c:	78a9      	ldrb	r1, [r5, #2]
   1104e:	4620      	mov	r0, r4
   11050:	f7fc fce3 	bl	da1a <cosem_setUInt8>
        (ret = cosem_setUInt8(ba, service->delay)) != 0 ||
   11054:	b950      	cbnz	r0, 1106c <cosem_getQualityOfService+0x44>
        (ret = cosem_setUInt8(ba, service->peakThroughput)) != 0 ||
   11056:	78e9      	ldrb	r1, [r5, #3]
   11058:	4620      	mov	r0, r4
   1105a:	f7fc fcde 	bl	da1a <cosem_setUInt8>
        (ret = cosem_setUInt8(ba, service->reliability)) != 0 ||
   1105e:	b928      	cbnz	r0, 1106c <cosem_getQualityOfService+0x44>
        (ret = cosem_setUInt8(ba, service->meanThroughput)) != 0)
   11060:	7929      	ldrb	r1, [r5, #4]
   11062:	4620      	mov	r0, r4
}
   11064:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        (ret = cosem_setUInt8(ba, service->meanThroughput)) != 0)
   11068:	f7fc bcd7 	b.w	da1a <cosem_setUInt8>
}
   1106c:	bd38      	pop	{r3, r4, r5, pc}

0001106e <cosem_getGprsSetup>:
{
   1106e:	b538      	push	{r3, r4, r5, lr}
    if (e->index == 2)
   11070:	7e03      	ldrb	r3, [r0, #24]
    gxGPRSSetup* object = (gxGPRSSetup*)e->target;
   11072:	6945      	ldr	r5, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
   11074:	6884      	ldr	r4, [r0, #8]
    if (e->index == 2)
   11076:	2b02      	cmp	r3, #2
   11078:	d106      	bne.n	11088 <cosem_getGprsSetup+0x1a>
        ret = cosem_setOctetString(data, &object->apn);
   1107a:	f105 0110 	add.w	r1, r5, #16
   1107e:	4620      	mov	r0, r4
}
   11080:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_setOctetString(data, &object->apn);
   11084:	f7fc bc5b 	b.w	d93e <cosem_setOctetString>
    else if (e->index == 3)
   11088:	2b03      	cmp	r3, #3
   1108a:	d105      	bne.n	11098 <cosem_getGprsSetup+0x2a>
        ret = cosem_setUInt16(data, object->pinCode);
   1108c:	8ba9      	ldrh	r1, [r5, #28]
   1108e:	4620      	mov	r0, r4
}
   11090:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_setUInt16(data, object->pinCode);
   11094:	f7fc bccf 	b.w	da36 <cosem_setUInt16>
    else if (e->index == 4)
   11098:	2b04      	cmp	r3, #4
   1109a:	d111      	bne.n	110c0 <cosem_getGprsSetup+0x52>
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   1109c:	2102      	movs	r1, #2
   1109e:	4620      	mov	r0, r4
   110a0:	f7fc fd16 	bl	dad0 <cosem_setStructure>
   110a4:	b970      	cbnz	r0, 110c4 <cosem_getGprsSetup+0x56>
            (ret = cosem_getQualityOfService(&object->defaultQualityOfService, data)) != 0 ||
   110a6:	4621      	mov	r1, r4
   110a8:	f105 001e 	add.w	r0, r5, #30
   110ac:	f7ff ffbc 	bl	11028 <cosem_getQualityOfService>
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   110b0:	b940      	cbnz	r0, 110c4 <cosem_getGprsSetup+0x56>
            (ret = cosem_getQualityOfService(&object->requestedQualityOfService, data)) != 0)
   110b2:	4621      	mov	r1, r4
   110b4:	f105 0023 	add.w	r0, r5, #35	; 0x23
}
   110b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            (ret = cosem_getQualityOfService(&object->requestedQualityOfService, data)) != 0)
   110bc:	f7ff bfb4 	b.w	11028 <cosem_getQualityOfService>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   110c0:	f44f 7081 	mov.w	r0, #258	; 0x102
}
   110c4:	bd38      	pop	{r3, r4, r5, pc}

000110c6 <cosem_getSecuritySetup>:
{
   110c6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if (e->index == 2)
   110ca:	7e03      	ldrb	r3, [r0, #24]
    gxSecuritySetup* object = (gxSecuritySetup*)e->target;
   110cc:	6946      	ldr	r6, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
   110ce:	6885      	ldr	r5, [r0, #8]
    if (e->index == 2)
   110d0:	2b02      	cmp	r3, #2
   110d2:	d105      	bne.n	110e0 <cosem_getSecuritySetup+0x1a>
        ret = cosem_setEnum(data, object->securityPolicy);
   110d4:	7c31      	ldrb	r1, [r6, #16]
        ret = cosem_setEnum(data, object->securitySuite);
   110d6:	4628      	mov	r0, r5
   110d8:	f7fc fd16 	bl	db08 <cosem_setEnum>
                if ((ret = cosem_setOctetString2(data, (unsigned char*)it->subjectAltName, len)) != 0)
   110dc:	4604      	mov	r4, r0
   110de:	e019      	b.n	11114 <cosem_getSecuritySetup+0x4e>
    else if (e->index == 3)
   110e0:	2b03      	cmp	r3, #3
   110e2:	d101      	bne.n	110e8 <cosem_getSecuritySetup+0x22>
        ret = cosem_setEnum(data, object->securitySuite);
   110e4:	7c71      	ldrb	r1, [r6, #17]
   110e6:	e7f6      	b.n	110d6 <cosem_getSecuritySetup+0x10>
    else if (e->index == 4)
   110e8:	2b04      	cmp	r3, #4
   110ea:	d105      	bne.n	110f8 <cosem_getSecuritySetup+0x32>
        ret = cosem_setOctetString(data, &object->clientSystemTitle);
   110ec:	f106 0120 	add.w	r1, r6, #32
        ret = cosem_setOctetString(data, &object->serverSystemTitle);
   110f0:	4628      	mov	r0, r5
   110f2:	f7fc fc24 	bl	d93e <cosem_setOctetString>
   110f6:	e7f1      	b.n	110dc <cosem_getSecuritySetup+0x16>
    else if (e->index == 5)
   110f8:	2b05      	cmp	r3, #5
   110fa:	d102      	bne.n	11102 <cosem_getSecuritySetup+0x3c>
        ret = cosem_setOctetString(data, &object->serverSystemTitle);
   110fc:	f106 0114 	add.w	r1, r6, #20
   11100:	e7f6      	b.n	110f0 <cosem_getSecuritySetup+0x2a>
    else if (e->index == 6)
   11102:	2b06      	cmp	r3, #6
   11104:	d15e      	bne.n	111c4 <cosem_getSecuritySetup+0xfe>
        if ((ret = cosem_setArray(data, object->certificates.size)) == 0)
   11106:	8e71      	ldrh	r1, [r6, #50]	; 0x32
   11108:	4628      	mov	r0, r5
   1110a:	f7fc fcef 	bl	daec <cosem_setArray>
   1110e:	4604      	mov	r4, r0
   11110:	2800      	cmp	r0, #0
   11112:	d053      	beq.n	111bc <cosem_getSecuritySetup+0xf6>
}
   11114:	4620      	mov	r0, r4
   11116:	b002      	add	sp, #8
   11118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if ((ret = arr_getByIndex(&object->certificates, pos, (void**)&it)) != 0 ||
   1111c:	aa01      	add	r2, sp, #4
   1111e:	4640      	mov	r0, r8
   11120:	f7ff f931 	bl	10386 <arr_getByIndex>
   11124:	2800      	cmp	r0, #0
   11126:	d1d9      	bne.n	110dc <cosem_getSecuritySetup+0x16>
                    (ret = cosem_setStructure(data, 6)) != 0 ||
   11128:	2106      	movs	r1, #6
   1112a:	4628      	mov	r0, r5
   1112c:	f7fc fcd0 	bl	dad0 <cosem_setStructure>
                if ((ret = arr_getByIndex(&object->certificates, pos, (void**)&it)) != 0 ||
   11130:	2800      	cmp	r0, #0
   11132:	d1d3      	bne.n	110dc <cosem_getSecuritySetup+0x16>
                    (ret = cosem_setEnum(data, it->entity)) != 0 ||
   11134:	9b01      	ldr	r3, [sp, #4]
   11136:	4628      	mov	r0, r5
   11138:	7819      	ldrb	r1, [r3, #0]
   1113a:	f7fc fce5 	bl	db08 <cosem_setEnum>
                    (ret = cosem_setStructure(data, 6)) != 0 ||
   1113e:	2800      	cmp	r0, #0
   11140:	d1cc      	bne.n	110dc <cosem_getSecuritySetup+0x16>
                    (ret = cosem_setEnum(data, it->type)) != 0)
   11142:	9b01      	ldr	r3, [sp, #4]
   11144:	4628      	mov	r0, r5
   11146:	7859      	ldrb	r1, [r3, #1]
   11148:	f7fc fcde 	bl	db08 <cosem_setEnum>
                    (ret = cosem_setEnum(data, it->entity)) != 0 ||
   1114c:	2800      	cmp	r0, #0
   1114e:	d1c5      	bne.n	110dc <cosem_getSecuritySetup+0x16>
                len = (uint16_t)strlen(it->serialNumber);
   11150:	9b01      	ldr	r3, [sp, #4]
   11152:	6858      	ldr	r0, [r3, #4]
   11154:	f7ef fe34 	bl	dc0 <strlen>
                if ((ret = cosem_setOctetString2(data, (unsigned char*)it->serialNumber, len)) != 0)
   11158:	9b01      	ldr	r3, [sp, #4]
   1115a:	b282      	uxth	r2, r0
   1115c:	6859      	ldr	r1, [r3, #4]
   1115e:	4628      	mov	r0, r5
   11160:	f7fc fc3a 	bl	d9d8 <cosem_setOctetString2>
   11164:	2800      	cmp	r0, #0
   11166:	d1b9      	bne.n	110dc <cosem_getSecuritySetup+0x16>
                len = (uint16_t)strlen(it->issuer);
   11168:	9b01      	ldr	r3, [sp, #4]
   1116a:	6898      	ldr	r0, [r3, #8]
   1116c:	f7ef fe28 	bl	dc0 <strlen>
                if ((ret = cosem_setOctetString2(data, (unsigned char*)it->issuer, len)) != 0)
   11170:	9b01      	ldr	r3, [sp, #4]
   11172:	b282      	uxth	r2, r0
   11174:	6899      	ldr	r1, [r3, #8]
   11176:	4628      	mov	r0, r5
   11178:	f7fc fc2e 	bl	d9d8 <cosem_setOctetString2>
   1117c:	2800      	cmp	r0, #0
   1117e:	d1ad      	bne.n	110dc <cosem_getSecuritySetup+0x16>
                len = (uint16_t)strlen(it->subject);
   11180:	9b01      	ldr	r3, [sp, #4]
   11182:	68d8      	ldr	r0, [r3, #12]
   11184:	f7ef fe1c 	bl	dc0 <strlen>
                if ((ret = cosem_setOctetString2(data, (unsigned char*)it->subject, len)) != 0)
   11188:	9b01      	ldr	r3, [sp, #4]
   1118a:	b282      	uxth	r2, r0
   1118c:	68d9      	ldr	r1, [r3, #12]
   1118e:	4628      	mov	r0, r5
   11190:	f7fc fc22 	bl	d9d8 <cosem_setOctetString2>
   11194:	2800      	cmp	r0, #0
   11196:	d1a1      	bne.n	110dc <cosem_getSecuritySetup+0x16>
                len = (uint16_t)strlen(it->subjectAltName);
   11198:	9b01      	ldr	r3, [sp, #4]
   1119a:	6918      	ldr	r0, [r3, #16]
   1119c:	f7ef fe10 	bl	dc0 <strlen>
                if ((ret = cosem_setOctetString2(data, (unsigned char*)it->subjectAltName, len)) != 0)
   111a0:	9b01      	ldr	r3, [sp, #4]
   111a2:	b282      	uxth	r2, r0
   111a4:	6919      	ldr	r1, [r3, #16]
   111a6:	4628      	mov	r0, r5
   111a8:	f7fc fc16 	bl	d9d8 <cosem_setOctetString2>
   111ac:	3701      	adds	r7, #1
   111ae:	2800      	cmp	r0, #0
   111b0:	d194      	bne.n	110dc <cosem_getSecuritySetup+0x16>
            for (pos = 0; pos != object->certificates.size; ++pos)
   111b2:	8e73      	ldrh	r3, [r6, #50]	; 0x32
   111b4:	b2b9      	uxth	r1, r7
   111b6:	428b      	cmp	r3, r1
   111b8:	d1b0      	bne.n	1111c <cosem_getSecuritySetup+0x56>
   111ba:	e7ab      	b.n	11114 <cosem_getSecuritySetup+0x4e>
   111bc:	4607      	mov	r7, r0
                if ((ret = arr_getByIndex(&object->certificates, pos, (void**)&it)) != 0 ||
   111be:	f106 082c 	add.w	r8, r6, #44	; 0x2c
   111c2:	e7f6      	b.n	111b2 <cosem_getSecuritySetup+0xec>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   111c4:	f44f 7481 	mov.w	r4, #258	; 0x102
    return ret;
   111c8:	e7a4      	b.n	11114 <cosem_getSecuritySetup+0x4e>

000111ca <cosem_getIecHdlcSetup>:
    gxIecHdlcSetup* object = (gxIecHdlcSetup*)e->target;
   111ca:	7e02      	ldrb	r2, [r0, #24]
   111cc:	6943      	ldr	r3, [r0, #20]
    switch (e->index)
   111ce:	3a02      	subs	r2, #2
   111d0:	2a07      	cmp	r2, #7
   111d2:	d81b      	bhi.n	1120c <cosem_getIecHdlcSetup+0x42>
   111d4:	e8df f002 	tbb	[pc, r2]
   111d8:	0e0c0804 	.word	0x0e0c0804
   111dc:	18161412 	.word	0x18161412
        ret = cosem_setEnum(e->value.byteArr, object->communicationSpeed);
   111e0:	7d99      	ldrb	r1, [r3, #22]
   111e2:	6880      	ldr	r0, [r0, #8]
   111e4:	f7fc bc90 	b.w	db08 <cosem_setEnum>
        ret = cosem_setUInt8(e->value.byteArr, object->windowSizeTransmit);
   111e8:	7dd9      	ldrb	r1, [r3, #23]
        ret = cosem_setUInt8(e->value.byteArr, object->windowSizeReceive);
   111ea:	6880      	ldr	r0, [r0, #8]
   111ec:	f7fc bc15 	b.w	da1a <cosem_setUInt8>
   111f0:	7e19      	ldrb	r1, [r3, #24]
   111f2:	e7fa      	b.n	111ea <cosem_getIecHdlcSetup+0x20>
        ret = cosem_setUInt16(e->value.byteArr, object->maximumInfoLengthTransmit);
   111f4:	8a99      	ldrh	r1, [r3, #20]
        ret = cosem_setUInt16(e->value.byteArr, object->deviceAddress);
   111f6:	6880      	ldr	r0, [r0, #8]
   111f8:	f7fc bc1d 	b.w	da36 <cosem_setUInt16>
        ret = cosem_setUInt16(e->value.byteArr, object->maximumInfoLengthReceive);
   111fc:	8b99      	ldrh	r1, [r3, #28]
   111fe:	e7fa      	b.n	111f6 <cosem_getIecHdlcSetup+0x2c>
        ret = cosem_setUInt16(e->value.byteArr, object->interCharachterTimeout);
   11200:	8b59      	ldrh	r1, [r3, #26]
   11202:	e7f8      	b.n	111f6 <cosem_getIecHdlcSetup+0x2c>
        ret = cosem_setUInt16(e->value.byteArr, object->inactivityTimeout);
   11204:	8a19      	ldrh	r1, [r3, #16]
   11206:	e7f6      	b.n	111f6 <cosem_getIecHdlcSetup+0x2c>
        ret = cosem_setUInt16(e->value.byteArr, object->deviceAddress);
   11208:	8a59      	ldrh	r1, [r3, #18]
   1120a:	e7f4      	b.n	111f6 <cosem_getIecHdlcSetup+0x2c>
}
   1120c:	f44f 7081 	mov.w	r0, #258	; 0x102
   11210:	4770      	bx	lr

00011212 <cosem_getIecLocalPortSetup>:
    if (e->index == 2)
   11212:	7e03      	ldrb	r3, [r0, #24]
    gxLocalPortSetup* object = (gxLocalPortSetup*)e->target;
   11214:	6941      	ldr	r1, [r0, #20]
    if (e->index == 2)
   11216:	2b02      	cmp	r3, #2
   11218:	d104      	bne.n	11224 <cosem_getIecLocalPortSetup+0x12>
        ret = cosem_setEnum(e->value.byteArr, object->defaultMode);
   1121a:	f891 1034 	ldrb.w	r1, [r1, #52]	; 0x34
        ret = cosem_setEnum(e->value.byteArr, object->defaultBaudrate);
   1121e:	6880      	ldr	r0, [r0, #8]
   11220:	f7fc bc72 	b.w	db08 <cosem_setEnum>
    else if (e->index == 3)
   11224:	2b03      	cmp	r3, #3
   11226:	d102      	bne.n	1122e <cosem_getIecLocalPortSetup+0x1c>
        ret = cosem_setEnum(e->value.byteArr, object->defaultBaudrate);
   11228:	f891 1035 	ldrb.w	r1, [r1, #53]	; 0x35
   1122c:	e7f7      	b.n	1121e <cosem_getIecLocalPortSetup+0xc>
    else if (e->index == 4)
   1122e:	2b04      	cmp	r3, #4
   11230:	d102      	bne.n	11238 <cosem_getIecLocalPortSetup+0x26>
        ret = cosem_setEnum(e->value.byteArr, object->proposedBaudrate);
   11232:	f891 1036 	ldrb.w	r1, [r1, #54]	; 0x36
   11236:	e7f2      	b.n	1121e <cosem_getIecLocalPortSetup+0xc>
    else if (e->index == 5)
   11238:	2b05      	cmp	r3, #5
   1123a:	d102      	bne.n	11242 <cosem_getIecLocalPortSetup+0x30>
        ret = cosem_setEnum(e->value.byteArr, object->responseTime);
   1123c:	f891 1037 	ldrb.w	r1, [r1, #55]	; 0x37
   11240:	e7ed      	b.n	1121e <cosem_getIecLocalPortSetup+0xc>
    else if (e->index == 6)
   11242:	2b06      	cmp	r3, #6
   11244:	d103      	bne.n	1124e <cosem_getIecLocalPortSetup+0x3c>
        ret = cosem_setOctetString(e->value.byteArr, &object->deviceAddress);
   11246:	3138      	adds	r1, #56	; 0x38
        ret = cosem_setOctetString(e->value.byteArr, &object->password5);
   11248:	6880      	ldr	r0, [r0, #8]
   1124a:	f7fc bb78 	b.w	d93e <cosem_setOctetString>
    else if (e->index == 7)
   1124e:	2b07      	cmp	r3, #7
   11250:	d101      	bne.n	11256 <cosem_getIecLocalPortSetup+0x44>
        ret = cosem_setOctetString(e->value.byteArr, &object->password1);
   11252:	3110      	adds	r1, #16
   11254:	e7f8      	b.n	11248 <cosem_getIecLocalPortSetup+0x36>
    else if (e->index == 8)
   11256:	2b08      	cmp	r3, #8
   11258:	d101      	bne.n	1125e <cosem_getIecLocalPortSetup+0x4c>
        ret = cosem_setOctetString(e->value.byteArr, &object->password2);
   1125a:	311c      	adds	r1, #28
   1125c:	e7f4      	b.n	11248 <cosem_getIecLocalPortSetup+0x36>
    else if (e->index == 9)
   1125e:	2b09      	cmp	r3, #9
   11260:	d101      	bne.n	11266 <cosem_getIecLocalPortSetup+0x54>
        ret = cosem_setOctetString(e->value.byteArr, &object->password5);
   11262:	3128      	adds	r1, #40	; 0x28
   11264:	e7f0      	b.n	11248 <cosem_getIecLocalPortSetup+0x36>
}
   11266:	f44f 7081 	mov.w	r0, #258	; 0x102
   1126a:	4770      	bx	lr

0001126c <cosem_getIecTwistedPairSetup>:
{
   1126c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if (e->index == 2)
   1126e:	7e03      	ldrb	r3, [r0, #24]
    gxIecTwistedPairSetup* object = (gxIecTwistedPairSetup*)e->target;
   11270:	6944      	ldr	r4, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
   11272:	6885      	ldr	r5, [r0, #8]
    if (e->index == 2)
   11274:	2b02      	cmp	r3, #2
   11276:	d105      	bne.n	11284 <cosem_getIecTwistedPairSetup+0x18>
        ret = cosem_setEnum(e->value.byteArr, object->mode);
   11278:	7c21      	ldrb	r1, [r4, #16]
        ret = cosem_setEnum(e->value.byteArr, object->speed);
   1127a:	4628      	mov	r0, r5
   1127c:	f7fc fc44 	bl	db08 <cosem_setEnum>
}
   11280:	b003      	add	sp, #12
   11282:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (e->index == 3)
   11284:	2b03      	cmp	r3, #3
   11286:	d101      	bne.n	1128c <cosem_getIecTwistedPairSetup+0x20>
        ret = cosem_setEnum(e->value.byteArr, object->speed);
   11288:	7c61      	ldrb	r1, [r4, #17]
   1128a:	e7f6      	b.n	1127a <cosem_getIecTwistedPairSetup+0xe>
    else if (e->index == 4)
   1128c:	2b04      	cmp	r3, #4
   1128e:	d11e      	bne.n	112ce <cosem_getIecTwistedPairSetup+0x62>
        if ((ret = cosem_setArray(data, (unsigned short)object->primaryAddresses.size)) == 0)
   11290:	8b61      	ldrh	r1, [r4, #26]
   11292:	4628      	mov	r0, r5
   11294:	f7fc fc2a 	bl	daec <cosem_setArray>
   11298:	2800      	cmp	r0, #0
   1129a:	d1f1      	bne.n	11280 <cosem_getIecTwistedPairSetup+0x14>
            for (pos = 0; pos != object->primaryAddresses.size; ++pos)
   1129c:	4606      	mov	r6, r0
                if ((ret = bb_getUInt8ByIndex(&object->primaryAddresses, pos, &ch)) != 0 ||
   1129e:	f104 0714 	add.w	r7, r4, #20
   112a2:	e00f      	b.n	112c4 <cosem_getIecTwistedPairSetup+0x58>
   112a4:	f10d 0207 	add.w	r2, sp, #7
   112a8:	4631      	mov	r1, r6
   112aa:	4638      	mov	r0, r7
   112ac:	f7fb fe91 	bl	cfd2 <bb_getUInt8ByIndex>
   112b0:	2800      	cmp	r0, #0
   112b2:	d1e5      	bne.n	11280 <cosem_getIecTwistedPairSetup+0x14>
                    (ret = cosem_setUInt8(data, ch)) != 0)
   112b4:	f89d 1007 	ldrb.w	r1, [sp, #7]
   112b8:	4628      	mov	r0, r5
   112ba:	f7fc fbae 	bl	da1a <cosem_setUInt8>
                if ((ret = bb_getUInt8ByIndex(&object->primaryAddresses, pos, &ch)) != 0 ||
   112be:	2800      	cmp	r0, #0
   112c0:	d1de      	bne.n	11280 <cosem_getIecTwistedPairSetup+0x14>
            for (pos = 0; pos != object->primaryAddresses.size; ++pos)
   112c2:	3601      	adds	r6, #1
   112c4:	8b63      	ldrh	r3, [r4, #26]
   112c6:	42b3      	cmp	r3, r6
   112c8:	d1ec      	bne.n	112a4 <cosem_getIecTwistedPairSetup+0x38>
            for (pos = 0; pos != object->tabis.size; ++pos)
   112ca:	2000      	movs	r0, #0
   112cc:	e7d8      	b.n	11280 <cosem_getIecTwistedPairSetup+0x14>
    else if (e->index == 5)
   112ce:	2b05      	cmp	r3, #5
   112d0:	d11d      	bne.n	1130e <cosem_getIecTwistedPairSetup+0xa2>
        if ((ret = cosem_setArray(data, (unsigned short)object->tabis.size)) == 0)
   112d2:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
   112d4:	4628      	mov	r0, r5
   112d6:	f7fc fc09 	bl	daec <cosem_setArray>
   112da:	2800      	cmp	r0, #0
   112dc:	d1d0      	bne.n	11280 <cosem_getIecTwistedPairSetup+0x14>
            for (pos = 0; pos != object->tabis.size; ++pos)
   112de:	4606      	mov	r6, r0
                if ((ret = bb_getUInt8ByIndex(&object->tabis, pos, &ch)) != 0 ||
   112e0:	f104 0720 	add.w	r7, r4, #32
   112e4:	e00f      	b.n	11306 <cosem_getIecTwistedPairSetup+0x9a>
   112e6:	f10d 0207 	add.w	r2, sp, #7
   112ea:	4631      	mov	r1, r6
   112ec:	4638      	mov	r0, r7
   112ee:	f7fb fe70 	bl	cfd2 <bb_getUInt8ByIndex>
   112f2:	2800      	cmp	r0, #0
   112f4:	d1c4      	bne.n	11280 <cosem_getIecTwistedPairSetup+0x14>
                    (ret = cosem_setInt8(data, (char)ch)) != 0)
   112f6:	f89d 1007 	ldrb.w	r1, [sp, #7]
   112fa:	4628      	mov	r0, r5
   112fc:	f7fc fbb7 	bl	da6e <cosem_setInt8>
                if ((ret = bb_getUInt8ByIndex(&object->tabis, pos, &ch)) != 0 ||
   11300:	2800      	cmp	r0, #0
   11302:	d1bd      	bne.n	11280 <cosem_getIecTwistedPairSetup+0x14>
            for (pos = 0; pos != object->tabis.size; ++pos)
   11304:	3601      	adds	r6, #1
   11306:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   11308:	42b3      	cmp	r3, r6
   1130a:	d1ec      	bne.n	112e6 <cosem_getIecTwistedPairSetup+0x7a>
   1130c:	e7dd      	b.n	112ca <cosem_getIecTwistedPairSetup+0x5e>
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   1130e:	f44f 7081 	mov.w	r0, #258	; 0x102
   11312:	e7b5      	b.n	11280 <cosem_getIecTwistedPairSetup+0x14>

00011314 <cosem_getMbusSlavePortSetup>:
    if (e->index == 2)
   11314:	7e02      	ldrb	r2, [r0, #24]
    gxMbusSlavePortSetup* object = (gxMbusSlavePortSetup*)e->target;
   11316:	6943      	ldr	r3, [r0, #20]
    if (e->index == 2)
   11318:	2a02      	cmp	r2, #2
   1131a:	d103      	bne.n	11324 <cosem_getMbusSlavePortSetup+0x10>
        ret = cosem_setEnum(e->value.byteArr, object->defaultBaud);
   1131c:	7c19      	ldrb	r1, [r3, #16]
        ret = cosem_setEnum(e->value.byteArr, object->availableBaud);
   1131e:	6880      	ldr	r0, [r0, #8]
   11320:	f7fc bbf2 	b.w	db08 <cosem_setEnum>
    else if (e->index == 3)
   11324:	2a03      	cmp	r2, #3
   11326:	d101      	bne.n	1132c <cosem_getMbusSlavePortSetup+0x18>
        ret = cosem_setEnum(e->value.byteArr, object->availableBaud);
   11328:	7c59      	ldrb	r1, [r3, #17]
   1132a:	e7f8      	b.n	1131e <cosem_getMbusSlavePortSetup+0xa>
    else if (e->index == 4)
   1132c:	2a04      	cmp	r2, #4
   1132e:	d101      	bne.n	11334 <cosem_getMbusSlavePortSetup+0x20>
        ret = cosem_setEnum(e->value.byteArr, object->addressState);
   11330:	7c99      	ldrb	r1, [r3, #18]
   11332:	e7f4      	b.n	1131e <cosem_getMbusSlavePortSetup+0xa>
    else if (e->index == 5)
   11334:	2a05      	cmp	r2, #5
   11336:	d103      	bne.n	11340 <cosem_getMbusSlavePortSetup+0x2c>
        ret = cosem_setUInt8(e->value.byteArr, object->busAddress);
   11338:	7cd9      	ldrb	r1, [r3, #19]
   1133a:	6880      	ldr	r0, [r0, #8]
   1133c:	f7fc bb6d 	b.w	da1a <cosem_setUInt8>
}
   11340:	f44f 7081 	mov.w	r0, #258	; 0x102
   11344:	4770      	bx	lr

00011346 <cosem_getImageTransfer>:
{
   11346:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if (e->index == 2)
   1134a:	7e03      	ldrb	r3, [r0, #24]
    gxImageTransfer* object = (gxImageTransfer*)e->target;
   1134c:	6946      	ldr	r6, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
   1134e:	6885      	ldr	r5, [r0, #8]
    if (e->index == 2)
   11350:	2b02      	cmp	r3, #2
{
   11352:	4607      	mov	r7, r0
    if (e->index == 2)
   11354:	d104      	bne.n	11360 <cosem_getImageTransfer+0x1a>
        ret = cosem_setUInt32(e->value.byteArr, object->imageBlockSize);
   11356:	6931      	ldr	r1, [r6, #16]
        ret = cosem_setUInt32(e->value.byteArr, object->imageFirstNotTransferredBlockNumber);
   11358:	4628      	mov	r0, r5
   1135a:	f7fc fb7a 	bl	da52 <cosem_setUInt32>
   1135e:	e019      	b.n	11394 <cosem_getImageTransfer+0x4e>
    else if (e->index == 3)
   11360:	2b03      	cmp	r3, #3
   11362:	d119      	bne.n	11398 <cosem_getImageTransfer+0x52>
        if ((ret = bb_setUInt8(e->value.byteArr, DLMS_DATA_TYPE_BIT_STRING)) != 0 ||
   11364:	2104      	movs	r1, #4
   11366:	4628      	mov	r0, r5
   11368:	f7fb fca5 	bl	ccb6 <bb_setUInt8>
   1136c:	4604      	mov	r4, r0
   1136e:	2800      	cmp	r0, #0
   11370:	d138      	bne.n	113e4 <cosem_getImageTransfer+0x9e>
            (ret = hlp_setObjectCount(object->imageTransferredBlocksStatus.size, e->value.byteArr)) != 0)
   11372:	68b9      	ldr	r1, [r7, #8]
   11374:	8b70      	ldrh	r0, [r6, #26]
   11376:	f008 fa8d 	bl	19894 <hlp_setObjectCount>
        if ((ret = bb_setUInt8(e->value.byteArr, DLMS_DATA_TYPE_BIT_STRING)) != 0 ||
   1137a:	4604      	mov	r4, r0
   1137c:	bb90      	cbnz	r0, 113e4 <cosem_getImageTransfer+0x9e>
        if (object->imageTransferredBlocksStatus.size != 0)
   1137e:	8b70      	ldrh	r0, [r6, #26]
   11380:	b380      	cbz	r0, 113e4 <cosem_getImageTransfer+0x9e>
            ret = bb_set(e->value.byteArr, object->imageTransferredBlocksStatus.data,
   11382:	68bc      	ldr	r4, [r7, #8]
   11384:	6975      	ldr	r5, [r6, #20]
   11386:	f7ef ffa5 	bl	12d4 <ba_getByteCount>
   1138a:	4629      	mov	r1, r5
   1138c:	4602      	mov	r2, r0
   1138e:	4620      	mov	r0, r4
   11390:	f7fb fd77 	bl	ce82 <bb_set>
                        (ret = bb_set(data, ai->signature.data, ai->signature.size)) != 0)
   11394:	4604      	mov	r4, r0
   11396:	e025      	b.n	113e4 <cosem_getImageTransfer+0x9e>
    else if (e->index == 4)
   11398:	2b04      	cmp	r3, #4
   1139a:	d101      	bne.n	113a0 <cosem_getImageTransfer+0x5a>
        ret = cosem_setUInt32(e->value.byteArr, object->imageFirstNotTransferredBlockNumber);
   1139c:	69f1      	ldr	r1, [r6, #28]
   1139e:	e7db      	b.n	11358 <cosem_getImageTransfer+0x12>
    else if (e->index == 5)
   113a0:	2b05      	cmp	r3, #5
   113a2:	d105      	bne.n	113b0 <cosem_getImageTransfer+0x6a>
        ret = cosem_setBoolean(e->value.byteArr, object->imageTransferEnabled);
   113a4:	f896 1020 	ldrb.w	r1, [r6, #32]
   113a8:	4628      	mov	r0, r5
   113aa:	f7fc fbbb 	bl	db24 <cosem_setBoolean>
   113ae:	e7f1      	b.n	11394 <cosem_getImageTransfer+0x4e>
    else if (e->index == 6)
   113b0:	2b06      	cmp	r3, #6
   113b2:	d105      	bne.n	113c0 <cosem_getImageTransfer+0x7a>
        ret = cosem_setEnum(e->value.byteArr, object->imageTransferStatus);
   113b4:	f896 1021 	ldrb.w	r1, [r6, #33]	; 0x21
   113b8:	4628      	mov	r0, r5
   113ba:	f7fc fba5 	bl	db08 <cosem_setEnum>
   113be:	e7e9      	b.n	11394 <cosem_getImageTransfer+0x4e>
    else if (e->index == 7)
   113c0:	2b07      	cmp	r3, #7
   113c2:	d166      	bne.n	11492 <cosem_getImageTransfer+0x14c>
        if (object->imageTransferStatus != DLMS_IMAGE_TRANSFER_STATUS_VERIFICATION_SUCCESSFUL)
   113c4:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
   113c8:	2b03      	cmp	r3, #3
   113ca:	d004      	beq.n	113d6 <cosem_getImageTransfer+0x90>
            if ((ret = cosem_setArray(data, 0)) != 0)
   113cc:	2100      	movs	r1, #0
   113ce:	4628      	mov	r0, r5
   113d0:	f7fc fb8c 	bl	daec <cosem_setArray>
   113d4:	e7de      	b.n	11394 <cosem_getImageTransfer+0x4e>
            if ((ret = cosem_setArray(data, object->imageActivateInfo.size)) == 0)
   113d6:	8d71      	ldrh	r1, [r6, #42]	; 0x2a
   113d8:	4628      	mov	r0, r5
   113da:	f7fc fb87 	bl	daec <cosem_setArray>
   113de:	4604      	mov	r4, r0
   113e0:	2800      	cmp	r0, #0
   113e2:	d052      	beq.n	1148a <cosem_getImageTransfer+0x144>
}
   113e4:	4620      	mov	r0, r4
   113e6:	b002      	add	sp, #8
   113e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    if ((ret = arr_getByIndex(&object->imageActivateInfo, pos, (void**)&ai)) != 0 ||
   113ec:	aa01      	add	r2, sp, #4
   113ee:	4640      	mov	r0, r8
   113f0:	f7fe ffc9 	bl	10386 <arr_getByIndex>
   113f4:	2800      	cmp	r0, #0
   113f6:	d1cd      	bne.n	11394 <cosem_getImageTransfer+0x4e>
                        (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   113f8:	2102      	movs	r1, #2
   113fa:	4628      	mov	r0, r5
   113fc:	f7fb fc5b 	bl	ccb6 <bb_setUInt8>
                    if ((ret = arr_getByIndex(&object->imageActivateInfo, pos, (void**)&ai)) != 0 ||
   11400:	2800      	cmp	r0, #0
   11402:	d1c7      	bne.n	11394 <cosem_getImageTransfer+0x4e>
                        (ret = bb_setUInt8(data, 3)) != 0 ||
   11404:	2103      	movs	r1, #3
   11406:	4628      	mov	r0, r5
   11408:	f7fb fc55 	bl	ccb6 <bb_setUInt8>
                        (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   1140c:	2800      	cmp	r0, #0
   1140e:	d1c1      	bne.n	11394 <cosem_getImageTransfer+0x4e>
                        (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT32)) != 0 ||
   11410:	2106      	movs	r1, #6
   11412:	4628      	mov	r0, r5
   11414:	f7fb fc4f 	bl	ccb6 <bb_setUInt8>
                        (ret = bb_setUInt8(data, 3)) != 0 ||
   11418:	2800      	cmp	r0, #0
   1141a:	d1bb      	bne.n	11394 <cosem_getImageTransfer+0x4e>
                        (ret = bb_setUInt32(data, ai->size)) != 0 ||
   1141c:	9b01      	ldr	r3, [sp, #4]
   1141e:	4628      	mov	r0, r5
   11420:	6819      	ldr	r1, [r3, #0]
   11422:	f7fb fc8c 	bl	cd3e <bb_setUInt32>
                        (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT32)) != 0 ||
   11426:	2800      	cmp	r0, #0
   11428:	d1b4      	bne.n	11394 <cosem_getImageTransfer+0x4e>
                        (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   1142a:	2109      	movs	r1, #9
   1142c:	4628      	mov	r0, r5
   1142e:	f7fb fc42 	bl	ccb6 <bb_setUInt8>
                        (ret = bb_setUInt32(data, ai->size)) != 0 ||
   11432:	2800      	cmp	r0, #0
   11434:	d1ae      	bne.n	11394 <cosem_getImageTransfer+0x4e>
                        (ret = hlp_setObjectCount(ai->identification.size, data)) != 0 ||
   11436:	9b01      	ldr	r3, [sp, #4]
   11438:	4629      	mov	r1, r5
   1143a:	8958      	ldrh	r0, [r3, #10]
   1143c:	f008 fa2a 	bl	19894 <hlp_setObjectCount>
                        (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   11440:	2800      	cmp	r0, #0
   11442:	d1a7      	bne.n	11394 <cosem_getImageTransfer+0x4e>
                        (ret = bb_set(data, ai->identification.data, ai->identification.size)) != 0 ||
   11444:	9b01      	ldr	r3, [sp, #4]
   11446:	4628      	mov	r0, r5
   11448:	895a      	ldrh	r2, [r3, #10]
   1144a:	6859      	ldr	r1, [r3, #4]
   1144c:	f7fb fd19 	bl	ce82 <bb_set>
                        (ret = hlp_setObjectCount(ai->identification.size, data)) != 0 ||
   11450:	2800      	cmp	r0, #0
   11452:	d19f      	bne.n	11394 <cosem_getImageTransfer+0x4e>
                        (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   11454:	2109      	movs	r1, #9
   11456:	4628      	mov	r0, r5
   11458:	f7fb fc2d 	bl	ccb6 <bb_setUInt8>
                        (ret = bb_set(data, ai->identification.data, ai->identification.size)) != 0 ||
   1145c:	2800      	cmp	r0, #0
   1145e:	d199      	bne.n	11394 <cosem_getImageTransfer+0x4e>
                        (ret = hlp_setObjectCount(ai->signature.size, data)) != 0 ||
   11460:	9b01      	ldr	r3, [sp, #4]
   11462:	4629      	mov	r1, r5
   11464:	8ad8      	ldrh	r0, [r3, #22]
   11466:	f008 fa15 	bl	19894 <hlp_setObjectCount>
                        (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   1146a:	2800      	cmp	r0, #0
   1146c:	d192      	bne.n	11394 <cosem_getImageTransfer+0x4e>
                        (ret = bb_set(data, ai->signature.data, ai->signature.size)) != 0)
   1146e:	9b01      	ldr	r3, [sp, #4]
   11470:	4628      	mov	r0, r5
   11472:	8ada      	ldrh	r2, [r3, #22]
   11474:	6919      	ldr	r1, [r3, #16]
   11476:	f7fb fd04 	bl	ce82 <bb_set>
   1147a:	3701      	adds	r7, #1
                        (ret = hlp_setObjectCount(ai->signature.size, data)) != 0 ||
   1147c:	2800      	cmp	r0, #0
   1147e:	d189      	bne.n	11394 <cosem_getImageTransfer+0x4e>
                for (pos = 0; pos != object->imageActivateInfo.size; ++pos)
   11480:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
   11482:	b2b9      	uxth	r1, r7
   11484:	428b      	cmp	r3, r1
   11486:	d1b1      	bne.n	113ec <cosem_getImageTransfer+0xa6>
   11488:	e7ac      	b.n	113e4 <cosem_getImageTransfer+0x9e>
   1148a:	4607      	mov	r7, r0
                    if ((ret = arr_getByIndex(&object->imageActivateInfo, pos, (void**)&ai)) != 0 ||
   1148c:	f106 0824 	add.w	r8, r6, #36	; 0x24
   11490:	e7f6      	b.n	11480 <cosem_getImageTransfer+0x13a>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   11492:	f44f 7481 	mov.w	r4, #258	; 0x102
   11496:	e7a5      	b.n	113e4 <cosem_getImageTransfer+0x9e>

00011498 <getColumns>:
{
   11498:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1149c:	460f      	mov	r7, r1
    if ((ret = bb_capacity(ba, (list->size * 19) + 2)) != 0)
   1149e:	88c9      	ldrh	r1, [r1, #6]
{
   114a0:	461d      	mov	r5, r3
    if ((ret = bb_capacity(ba, (list->size * 19) + 2)) != 0)
   114a2:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
   114a6:	eb01 0143 	add.w	r1, r1, r3, lsl #1
   114aa:	3102      	adds	r1, #2
{
   114ac:	4681      	mov	r9, r0
    if ((ret = bb_capacity(ba, (list->size * 19) + 2)) != 0)
   114ae:	b289      	uxth	r1, r1
   114b0:	4610      	mov	r0, r2
{
   114b2:	4614      	mov	r4, r2
    if ((ret = bb_capacity(ba, (list->size * 19) + 2)) != 0)
   114b4:	f7fb fb9c 	bl	cbf0 <bb_capacity>
   114b8:	4606      	mov	r6, r0
   114ba:	2800      	cmp	r0, #0
   114bc:	d175      	bne.n	115aa <getColumns+0x112>
    if (!e->transaction)
   114be:	f8b5 3040 	ldrh.w	r3, [r5, #64]	; 0x40
   114c2:	2b00      	cmp	r3, #0
   114c4:	d05f      	beq.n	11586 <getColumns+0xee>
    for (pos = e->transactionStartIndex; pos != list->size; ++pos)
   114c6:	f8d5 8038 	ldr.w	r8, [r5, #56]	; 0x38
   114ca:	88fb      	ldrh	r3, [r7, #6]
   114cc:	4598      	cmp	r8, r3
   114ce:	d06c      	beq.n	115aa <getColumns+0x112>
        if ((ret = arr_getByIndex(list, (uint16_t)pos, (void**)&it)) != 0 ||
   114d0:	aa01      	add	r2, sp, #4
   114d2:	fa1f f188 	uxth.w	r1, r8
   114d6:	4638      	mov	r0, r7
        pduSize = (uint16_t)ba->size;
   114d8:	f8b4 a006 	ldrh.w	sl, [r4, #6]
        if ((ret = arr_getByIndex(list, (uint16_t)pos, (void**)&it)) != 0 ||
   114dc:	f7fe ff53 	bl	10386 <arr_getByIndex>
   114e0:	2800      	cmp	r0, #0
   114e2:	d166      	bne.n	115b2 <getColumns+0x11a>
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   114e4:	2102      	movs	r1, #2
   114e6:	4620      	mov	r0, r4
   114e8:	f7fb fbe5 	bl	ccb6 <bb_setUInt8>
        if ((ret = arr_getByIndex(list, (uint16_t)pos, (void**)&it)) != 0 ||
   114ec:	2800      	cmp	r0, #0
   114ee:	d160      	bne.n	115b2 <getColumns+0x11a>
            (ret = bb_setUInt8(ba, 4)) != 0 ||
   114f0:	2104      	movs	r1, #4
   114f2:	4620      	mov	r0, r4
   114f4:	f7fb fbdf 	bl	ccb6 <bb_setUInt8>
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   114f8:	2800      	cmp	r0, #0
   114fa:	d15a      	bne.n	115b2 <getColumns+0x11a>
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_UINT16)) != 0 ||
   114fc:	2112      	movs	r1, #18
   114fe:	4620      	mov	r0, r4
   11500:	f7fb fbd9 	bl	ccb6 <bb_setUInt8>
            (ret = bb_setUInt8(ba, 4)) != 0 ||
   11504:	2800      	cmp	r0, #0
   11506:	d154      	bne.n	115b2 <getColumns+0x11a>
            (ret = bb_setUInt16(ba, ((gxObject*)it->key)->objectType)) != 0 ||
   11508:	9b01      	ldr	r3, [sp, #4]
   1150a:	681b      	ldr	r3, [r3, #0]
   1150c:	4620      	mov	r0, r4
   1150e:	8819      	ldrh	r1, [r3, #0]
   11510:	f7fb fbf3 	bl	ccfa <bb_setUInt16>
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_UINT16)) != 0 ||
   11514:	2800      	cmp	r0, #0
   11516:	d14c      	bne.n	115b2 <getColumns+0x11a>
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   11518:	2109      	movs	r1, #9
   1151a:	4620      	mov	r0, r4
   1151c:	f7fb fbcb 	bl	ccb6 <bb_setUInt8>
            (ret = bb_setUInt16(ba, ((gxObject*)it->key)->objectType)) != 0 ||
   11520:	2800      	cmp	r0, #0
   11522:	d146      	bne.n	115b2 <getColumns+0x11a>
            (ret = bb_setUInt8(ba, 6)) != 0 ||
   11524:	2106      	movs	r1, #6
   11526:	4620      	mov	r0, r4
   11528:	f7fb fbc5 	bl	ccb6 <bb_setUInt8>
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   1152c:	2800      	cmp	r0, #0
   1152e:	d140      	bne.n	115b2 <getColumns+0x11a>
            (ret = bb_set(ba, ((gxObject*)it->key)->logicalName, 6)) != 0 ||
   11530:	9b01      	ldr	r3, [sp, #4]
   11532:	6819      	ldr	r1, [r3, #0]
   11534:	2206      	movs	r2, #6
   11536:	4411      	add	r1, r2
   11538:	4620      	mov	r0, r4
   1153a:	f7fb fca2 	bl	ce82 <bb_set>
            (ret = bb_setUInt8(ba, 6)) != 0 ||
   1153e:	2800      	cmp	r0, #0
   11540:	d137      	bne.n	115b2 <getColumns+0x11a>
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_INT8)) != 0 ||
   11542:	210f      	movs	r1, #15
   11544:	4620      	mov	r0, r4
   11546:	f7fb fbb6 	bl	ccb6 <bb_setUInt8>
            (ret = bb_set(ba, ((gxObject*)it->key)->logicalName, 6)) != 0 ||
   1154a:	2800      	cmp	r0, #0
   1154c:	d131      	bne.n	115b2 <getColumns+0x11a>
            (ret = bb_setInt8(ba, ((gxTarget*)it->value)->attributeIndex)) != 0 ||
   1154e:	9b01      	ldr	r3, [sp, #4]
   11550:	685b      	ldr	r3, [r3, #4]
   11552:	4620      	mov	r0, r4
   11554:	7819      	ldrb	r1, [r3, #0]
   11556:	f7fb fc8b 	bl	ce70 <bb_setInt8>
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_INT8)) != 0 ||
   1155a:	bb50      	cbnz	r0, 115b2 <getColumns+0x11a>
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_UINT16)) != 0 ||
   1155c:	2112      	movs	r1, #18
   1155e:	4620      	mov	r0, r4
   11560:	f7fb fba9 	bl	ccb6 <bb_setUInt8>
            (ret = bb_setInt8(ba, ((gxTarget*)it->value)->attributeIndex)) != 0 ||
   11564:	bb28      	cbnz	r0, 115b2 <getColumns+0x11a>
            (ret = bb_setUInt16(ba, ((gxTarget*)it->value)->dataIndex)) != 0)
   11566:	9b01      	ldr	r3, [sp, #4]
   11568:	685b      	ldr	r3, [r3, #4]
   1156a:	4620      	mov	r0, r4
   1156c:	8859      	ldrh	r1, [r3, #2]
   1156e:	f7fb fbc4 	bl	ccfa <bb_setUInt16>
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_UINT16)) != 0 ||
   11572:	b9f0      	cbnz	r0, 115b2 <getColumns+0x11a>
        if (settings->server)
   11574:	f899 3058 	ldrb.w	r3, [r9, #88]	; 0x58
   11578:	b973      	cbnz	r3, 11598 <getColumns+0x100>
        ++e->transactionStartIndex;
   1157a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1157c:	3301      	adds	r3, #1
   1157e:	63ab      	str	r3, [r5, #56]	; 0x38
    for (pos = e->transactionStartIndex; pos != list->size; ++pos)
   11580:	f108 0801 	add.w	r8, r8, #1
   11584:	e7a1      	b.n	114ca <getColumns+0x32>
   11586:	88f9      	ldrh	r1, [r7, #6]
        e->transactionEndIndex = list->size;
   11588:	63e9      	str	r1, [r5, #60]	; 0x3c
        if ((ret = cosem_setArray(ba, list->size)) != 0)
   1158a:	4620      	mov	r0, r4
   1158c:	f7fc faae 	bl	daec <cosem_setArray>
   11590:	2800      	cmp	r0, #0
   11592:	d098      	beq.n	114c6 <getColumns+0x2e>
   11594:	4606      	mov	r6, r0
   11596:	e008      	b.n	115aa <getColumns+0x112>
            if (dlms_isPduFull(settings, ba, NULL))
   11598:	4602      	mov	r2, r0
   1159a:	4621      	mov	r1, r4
   1159c:	4648      	mov	r0, r9
   1159e:	f7fe fe0d 	bl	101bc <dlms_isPduFull>
   115a2:	2800      	cmp	r0, #0
   115a4:	d0e9      	beq.n	1157a <getColumns+0xe2>
        ba->size = pduSize;
   115a6:	f8a4 a006 	strh.w	sl, [r4, #6]
}
   115aa:	4630      	mov	r0, r6
   115ac:	b002      	add	sp, #8
   115ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (ret == DLMS_ERROR_CODE_OUTOFMEMORY)
   115b2:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
   115b6:	d1ed      	bne.n	11594 <getColumns+0xfc>
   115b8:	e7f5      	b.n	115a6 <getColumns+0x10e>

000115ba <cosem_getRow>:
{
   115ba:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   115be:	4616      	mov	r6, r2
    if ((ret = arr_getByIndex(table, (uint16_t)index, (void**)&row)) != 0)
   115c0:	b289      	uxth	r1, r1
   115c2:	aa01      	add	r2, sp, #4
{
   115c4:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   115c8:	461f      	mov	r7, r3
    if ((ret = arr_getByIndex(table, (uint16_t)index, (void**)&row)) != 0)
   115ca:	f7fe fedc 	bl	10386 <arr_getByIndex>
   115ce:	4604      	mov	r4, r0
   115d0:	b998      	cbnz	r0, 115fa <cosem_getRow+0x40>
    if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0)
   115d2:	2102      	movs	r1, #2
   115d4:	4640      	mov	r0, r8
   115d6:	f7fb fb6e 	bl	ccb6 <bb_setUInt8>
   115da:	4604      	mov	r4, r0
   115dc:	b968      	cbnz	r0, 115fa <cosem_getRow+0x40>
    if (columns->size != 0)
   115de:	88f8      	ldrh	r0, [r7, #6]
        if ((ret = hlp_setObjectCount(columns->size, data)) != 0)
   115e0:	4641      	mov	r1, r8
    if (columns->size != 0)
   115e2:	b170      	cbz	r0, 11602 <cosem_getRow+0x48>
        if ((ret = hlp_setObjectCount(captureObjects->size, data)) != 0)
   115e4:	f008 f956 	bl	19894 <hlp_setObjectCount>
   115e8:	b108      	cbz	r0, 115ee <cosem_getRow+0x34>
   115ea:	4604      	mov	r4, r0
   115ec:	e005      	b.n	115fa <cosem_getRow+0x40>
{
   115ee:	f04f 0900 	mov.w	r9, #0
   115f2:	464d      	mov	r5, r9
    for (pos = 0; pos != captureObjects->size; ++pos)
   115f4:	88f3      	ldrh	r3, [r6, #6]
   115f6:	42ab      	cmp	r3, r5
   115f8:	d105      	bne.n	11606 <cosem_getRow+0x4c>
}
   115fa:	4620      	mov	r0, r4
   115fc:	b003      	add	sp, #12
   115fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if ((ret = hlp_setObjectCount(captureObjects->size, data)) != 0)
   11602:	88f0      	ldrh	r0, [r6, #6]
   11604:	e7ee      	b.n	115e4 <cosem_getRow+0x2a>
        if (columns->size != 0)
   11606:	88fb      	ldrh	r3, [r7, #6]
   11608:	b14b      	cbz	r3, 1161e <cosem_getRow+0x64>
            if (captureObjects->data[pos] != columns->data[colPos])
   1160a:	6832      	ldr	r2, [r6, #0]
   1160c:	683b      	ldr	r3, [r7, #0]
   1160e:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
   11612:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
   11616:	429a      	cmp	r2, r3
   11618:	d112      	bne.n	11640 <cosem_getRow+0x86>
            ++colPos;
   1161a:	f109 0901 	add.w	r9, r9, #1
        if ((ret = va_getByIndex(row, pos, &col)) != 0)
   1161e:	9801      	ldr	r0, [sp, #4]
   11620:	466a      	mov	r2, sp
   11622:	4629      	mov	r1, r5
   11624:	f008 fe3d 	bl	1a2a2 <va_getByIndex>
   11628:	2800      	cmp	r0, #0
   1162a:	d1de      	bne.n	115ea <cosem_getRow+0x30>
        if (col->vt == DLMS_DATA_TYPE_DATETIME)
   1162c:	9800      	ldr	r0, [sp, #0]
   1162e:	7801      	ldrb	r1, [r0, #0]
   11630:	2919      	cmp	r1, #25
   11632:	d107      	bne.n	11644 <cosem_getRow+0x8a>
            if ((ret = var_getBytes2(col, DLMS_DATA_TYPE_OCTET_STRING, data)) != 0)
   11634:	4642      	mov	r2, r8
   11636:	2109      	movs	r1, #9
   11638:	f008 ff70 	bl	1a51c <var_getBytes2>
            if ((ret = dlms_setData(data, col->vt, col)) != 0)
   1163c:	2800      	cmp	r0, #0
   1163e:	d1d4      	bne.n	115ea <cosem_getRow+0x30>
    for (pos = 0; pos != captureObjects->size; ++pos)
   11640:	3501      	adds	r5, #1
   11642:	e7d7      	b.n	115f4 <cosem_getRow+0x3a>
            if ((ret = dlms_setData(data, col->vt, col)) != 0)
   11644:	4602      	mov	r2, r0
   11646:	4640      	mov	r0, r8
   11648:	f7fc fc45 	bl	ded6 <dlms_setData>
   1164c:	e7f6      	b.n	1163c <cosem_getRow+0x82>

0001164e <profileGeneric_getData>:
{
   1164e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11652:	4698      	mov	r8, r3
   11654:	b087      	sub	sp, #28
    if (!e->transaction)
   11656:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
{
   1165a:	9e10      	ldr	r6, [sp, #64]	; 0x40
   1165c:	4681      	mov	r9, r0
   1165e:	460d      	mov	r5, r1
   11660:	4617      	mov	r7, r2
    if (!e->transaction)
   11662:	b1f3      	cbz	r3, 116a2 <profileGeneric_getData+0x54>
    arr_init(&columns);
   11664:	a803      	add	r0, sp, #12
   11666:	f7fe fe22 	bl	102ae <arr_init>
    if (e->selector == 2)
   1166a:	7e69      	ldrb	r1, [r5, #25]
   1166c:	2902      	cmp	r1, #2
   1166e:	d107      	bne.n	11680 <profileGeneric_getData+0x32>
        if ((ret = cosem_getColumns(captureObjects, e->selector, &e->parameters, &columns)) != 0)
   11670:	ab03      	add	r3, sp, #12
   11672:	f105 0220 	add.w	r2, r5, #32
   11676:	4640      	mov	r0, r8
   11678:	f7fc fad4 	bl	dc24 <cosem_getColumns>
   1167c:	4604      	mov	r4, r0
   1167e:	bb00      	cbnz	r0, 116c2 <profileGeneric_getData+0x74>
{
   11680:	f04f 0b00 	mov.w	fp, #0
   11684:	46da      	mov	sl, fp
    for (pos = 0; pos != table->size; ++pos)
   11686:	88fb      	ldrh	r3, [r7, #6]
   11688:	455b      	cmp	r3, fp
   1168a:	d122      	bne.n	116d2 <profileGeneric_getData+0x84>
   1168c:	2400      	movs	r4, #0
    arr_empty(&columns);
   1168e:	a803      	add	r0, sp, #12
   11690:	f7fe fe6c 	bl	1036c <arr_empty>
    if (ret == DLMS_ERROR_CODE_OUTOFMEMORY)
   11694:	f5b4 7f82 	cmp.w	r4, #260	; 0x104
        data->size = pduSize;
   11698:	bf04      	itt	eq
   1169a:	f8a6 a006 	strheq.w	sl, [r6, #6]
        ret = 0;
   1169e:	2400      	moveq	r4, #0
   116a0:	e00f      	b.n	116c2 <profileGeneric_getData+0x74>
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0)
   116a2:	2101      	movs	r1, #1
   116a4:	4630      	mov	r0, r6
   116a6:	f7fb fb06 	bl	ccb6 <bb_setUInt8>
   116aa:	4604      	mov	r4, r0
   116ac:	b948      	cbnz	r0, 116c2 <profileGeneric_getData+0x74>
        if (e->transactionEndIndex != 0)
   116ae:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   116b0:	b15b      	cbz	r3, 116ca <profileGeneric_getData+0x7c>
            if ((ret = hlp_setObjectCount(e->transactionEndIndex - e->transactionStartIndex, data)) != 0)
   116b2:	6ba8      	ldr	r0, [r5, #56]	; 0x38
   116b4:	4631      	mov	r1, r6
   116b6:	1a18      	subs	r0, r3, r0
            if ((ret = hlp_setObjectCount(e->transactionEndIndex, data)) != 0)
   116b8:	f008 f8ec 	bl	19894 <hlp_setObjectCount>
   116bc:	4604      	mov	r4, r0
   116be:	2800      	cmp	r0, #0
   116c0:	d0d0      	beq.n	11664 <profileGeneric_getData+0x16>
}
   116c2:	4620      	mov	r0, r4
   116c4:	b007      	add	sp, #28
   116c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            e->transactionEndIndex = table->size;
   116ca:	88f8      	ldrh	r0, [r7, #6]
   116cc:	63e8      	str	r0, [r5, #60]	; 0x3c
            if ((ret = hlp_setObjectCount(e->transactionEndIndex, data)) != 0)
   116ce:	4631      	mov	r1, r6
   116d0:	e7f2      	b.n	116b8 <profileGeneric_getData+0x6a>
        pduSize = (uint16_t)data->size;
   116d2:	f8b6 a006 	ldrh.w	sl, [r6, #6]
        if ((ret = cosem_getRow(table, pos, captureObjects, &columns, data)) != 0)
   116d6:	9600      	str	r6, [sp, #0]
   116d8:	ab03      	add	r3, sp, #12
   116da:	4642      	mov	r2, r8
   116dc:	4659      	mov	r1, fp
   116de:	4638      	mov	r0, r7
   116e0:	f7ff ff6b 	bl	115ba <cosem_getRow>
   116e4:	4604      	mov	r4, r0
   116e6:	2800      	cmp	r0, #0
   116e8:	d1d1      	bne.n	1168e <profileGeneric_getData+0x40>
        if (data->size > (uint16_t)(settings->maxPduSize - PDU_MAX_HEADER_SIZE))
   116ea:	f8b9 3052 	ldrh.w	r3, [r9, #82]	; 0x52
   116ee:	88f2      	ldrh	r2, [r6, #6]
   116f0:	3b46      	subs	r3, #70	; 0x46
   116f2:	b29b      	uxth	r3, r3
   116f4:	429a      	cmp	r2, r3
   116f6:	d805      	bhi.n	11704 <profileGeneric_getData+0xb6>
        ++e->transactionStartIndex;
   116f8:	6bab      	ldr	r3, [r5, #56]	; 0x38
   116fa:	3301      	adds	r3, #1
   116fc:	63ab      	str	r3, [r5, #56]	; 0x38
    for (pos = 0; pos != table->size; ++pos)
   116fe:	f10b 0b01 	add.w	fp, fp, #1
   11702:	e7c0      	b.n	11686 <profileGeneric_getData+0x38>
            ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   11704:	f44f 7482 	mov.w	r4, #260	; 0x104
   11708:	e7c1      	b.n	1168e <profileGeneric_getData+0x40>

0001170a <getProfileGenericData>:
{
   1170a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1170e:	461e      	mov	r6, r3
   11710:	b097      	sub	sp, #92	; 0x5c
    if (e->selector == 0 || e->parameters.vt == DLMS_DATA_TYPE_NONE || e->transactionEndIndex != 0)
   11712:	7e53      	ldrb	r3, [r2, #25]
{
   11714:	9003      	str	r0, [sp, #12]
   11716:	460f      	mov	r7, r1
   11718:	4615      	mov	r5, r2
   1171a:	f101 0a1c 	add.w	sl, r1, #28
    if (e->selector == 0 || e->parameters.vt == DLMS_DATA_TYPE_NONE || e->transactionEndIndex != 0)
   1171e:	b13b      	cbz	r3, 11730 <getProfileGenericData+0x26>
   11720:	f892 3020 	ldrb.w	r3, [r2, #32]
   11724:	b123      	cbz	r3, 11730 <getProfileGenericData+0x26>
   11726:	f8d2 903c 	ldr.w	r9, [r2, #60]	; 0x3c
   1172a:	f1b9 0f00 	cmp.w	r9, #0
   1172e:	d009      	beq.n	11744 <getProfileGenericData+0x3a>
        return profileGeneric_getData(settings, e, &object->buffer, &object->captureObjects, reply);
   11730:	9803      	ldr	r0, [sp, #12]
   11732:	9600      	str	r6, [sp, #0]
   11734:	4653      	mov	r3, sl
   11736:	f107 0210 	add.w	r2, r7, #16
   1173a:	4629      	mov	r1, r5
   1173c:	f7ff ff87 	bl	1164e <profileGeneric_getData>
   11740:	4680      	mov	r8, r0
   11742:	e089      	b.n	11858 <getProfileGenericData+0x14e>
    arr_init(&captureObjects);
   11744:	a809      	add	r0, sp, #36	; 0x24
   11746:	f7fe fdb2 	bl	102ae <arr_init>
    if ((ret = cosem_getColumns(&object->captureObjects, e->selector, &e->parameters, &captureObjects)) == 0)
   1174a:	7e69      	ldrb	r1, [r5, #25]
   1174c:	ab09      	add	r3, sp, #36	; 0x24
   1174e:	f105 0220 	add.w	r2, r5, #32
   11752:	4650      	mov	r0, sl
   11754:	f7fc fa66 	bl	dc24 <cosem_getColumns>
   11758:	4604      	mov	r4, r0
   1175a:	2800      	cmp	r0, #0
   1175c:	d168      	bne.n	11830 <getProfileGenericData+0x126>
        arr_init(&items);
   1175e:	a806      	add	r0, sp, #24
   11760:	f7fe fda5 	bl	102ae <arr_init>
        if (e->selector == 1) //Read by range
   11764:	f895 8019 	ldrb.w	r8, [r5, #25]
   11768:	f1b8 0f01 	cmp.w	r8, #1
   1176c:	f040 80b9 	bne.w	118e2 <getProfileGenericData+0x1d8>
            var_init(&value);
   11770:	a812      	add	r0, sp, #72	; 0x48
   11772:	f008 fbbc 	bl	19eee <var_init>
            if ((ret = va_getByIndex(e->parameters.Arr, 1, &it)) == 0)
   11776:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   11778:	aa05      	add	r2, sp, #20
   1177a:	4641      	mov	r1, r8
   1177c:	f008 fd91 	bl	1a2a2 <va_getByIndex>
   11780:	4604      	mov	r4, r0
   11782:	2800      	cmp	r0, #0
   11784:	d154      	bne.n	11830 <getProfileGenericData+0x126>
                if (it->vt == DLMS_DATA_TYPE_UINT32)
   11786:	9b05      	ldr	r3, [sp, #20]
   11788:	6898      	ldr	r0, [r3, #8]
   1178a:	781b      	ldrb	r3, [r3, #0]
   1178c:	2b06      	cmp	r3, #6
   1178e:	d157      	bne.n	11840 <getProfileGenericData+0x136>
                    time_initUnix(&start, it->ulVal);
   11790:	4601      	mov	r1, r0
   11792:	a80c      	add	r0, sp, #48	; 0x30
   11794:	f7fc faee 	bl	dd74 <time_initUnix>
                if ((ret = va_getByIndex(e->parameters.Arr, 2, &it)) != 0)
   11798:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   1179a:	aa05      	add	r2, sp, #20
   1179c:	2102      	movs	r1, #2
   1179e:	f008 fd80 	bl	1a2a2 <va_getByIndex>
   117a2:	2800      	cmp	r0, #0
   117a4:	d1cc      	bne.n	11740 <getProfileGenericData+0x36>
                if (it->vt == DLMS_DATA_TYPE_UINT32)
   117a6:	9b05      	ldr	r3, [sp, #20]
   117a8:	6898      	ldr	r0, [r3, #8]
   117aa:	781b      	ldrb	r3, [r3, #0]
   117ac:	2b06      	cmp	r3, #6
   117ae:	d160      	bne.n	11872 <getProfileGenericData+0x168>
                    time_initUnix(&end, it->ulVal);
   117b0:	4601      	mov	r1, r0
   117b2:	a80f      	add	r0, sp, #60	; 0x3c
   117b4:	f7fc fade 	bl	dd74 <time_initUnix>
{
   117b8:	f04f 0800 	mov.w	r8, #0
                    if ((ret = arr_getByIndex(&object->buffer, pos, (void**)&row)) != 0 ||
   117bc:	f107 0b10 	add.w	fp, r7, #16
                for (pos = 0; pos != object->buffer.size; ++pos)
   117c0:	8afb      	ldrh	r3, [r7, #22]
   117c2:	fa1f f189 	uxth.w	r1, r9
   117c6:	428b      	cmp	r3, r1
   117c8:	d067      	beq.n	1189a <getProfileGenericData+0x190>
                    if ((ret = arr_getByIndex(&object->buffer, pos, (void**)&row)) != 0 ||
   117ca:	aa04      	add	r2, sp, #16
   117cc:	4658      	mov	r0, fp
   117ce:	f7fe fdda 	bl	10386 <arr_getByIndex>
   117d2:	4604      	mov	r4, r0
   117d4:	bb60      	cbnz	r0, 11830 <getProfileGenericData+0x126>
                        (ret = va_getByIndex(row, 0, &it)) != 0)
   117d6:	4601      	mov	r1, r0
   117d8:	aa05      	add	r2, sp, #20
   117da:	9804      	ldr	r0, [sp, #16]
   117dc:	f008 fd61 	bl	1a2a2 <va_getByIndex>
                    if ((ret = arr_getByIndex(&object->buffer, pos, (void**)&row)) != 0 ||
   117e0:	4604      	mov	r4, r0
   117e2:	bb28      	cbnz	r0, 11830 <getProfileGenericData+0x126>
                    t = it->dateTime;
   117e4:	9b05      	ldr	r3, [sp, #20]
   117e6:	689c      	ldr	r4, [r3, #8]
                    if (time_compare(&start, t) != -1 && time_compare(t, &end) != -1)
   117e8:	a80c      	add	r0, sp, #48	; 0x30
   117ea:	4621      	mov	r1, r4
   117ec:	f7fc fb33 	bl	de56 <time_compare>
   117f0:	3001      	adds	r0, #1
   117f2:	d058      	beq.n	118a6 <getProfileGenericData+0x19c>
   117f4:	a90f      	add	r1, sp, #60	; 0x3c
   117f6:	4620      	mov	r0, r4
   117f8:	f7fc fb2d 	bl	de56 <time_compare>
   117fc:	3001      	adds	r0, #1
   117fe:	d052      	beq.n	118a6 <getProfileGenericData+0x19c>
                        if (reply->size < settings->maxPduSize)
   11800:	9a03      	ldr	r2, [sp, #12]
   11802:	88f1      	ldrh	r1, [r6, #6]
   11804:	f8b2 2052 	ldrh.w	r2, [r2, #82]	; 0x52
   11808:	6beb      	ldr	r3, [r5, #60]	; 0x3c
                        ++cnt;
   1180a:	f108 0801 	add.w	r8, r8, #1
                        if (reply->size < settings->maxPduSize)
   1180e:	4291      	cmp	r1, r2
                        ++cnt;
   11810:	fa1f f888 	uxth.w	r8, r8
                        if (reply->size < settings->maxPduSize)
   11814:	d23d      	bcs.n	11892 <getProfileGenericData+0x188>
                            ++e->transactionEndIndex;
   11816:	3301      	adds	r3, #1
   11818:	63eb      	str	r3, [r5, #60]	; 0x3c
                            if ((ret = cosem_getRow(&object->buffer, pos, &captureObjects, &object->captureObjects, reply)) != 0)
   1181a:	9600      	str	r6, [sp, #0]
   1181c:	4653      	mov	r3, sl
   1181e:	aa09      	add	r2, sp, #36	; 0x24
   11820:	fa1f f189 	uxth.w	r1, r9
   11824:	4658      	mov	r0, fp
   11826:	f7ff fec8 	bl	115ba <cosem_getRow>
   1182a:	4604      	mov	r4, r0
   1182c:	2800      	cmp	r0, #0
   1182e:	d03a      	beq.n	118a6 <getProfileGenericData+0x19c>
    arr_empty(&captureObjects);
   11830:	a809      	add	r0, sp, #36	; 0x24
   11832:	f7fe fd9b 	bl	1036c <arr_empty>
    arr_empty(&items);
   11836:	a806      	add	r0, sp, #24
   11838:	f7fe fd98 	bl	1036c <arr_empty>
    return ret;
   1183c:	46a0      	mov	r8, r4
   1183e:	e00b      	b.n	11858 <getProfileGenericData+0x14e>
                    if ((ret = dlms_changeType(it->byteArr, DLMS_DATA_TYPE_DATETIME, &value)) != 0)
   11840:	aa12      	add	r2, sp, #72	; 0x48
   11842:	2119      	movs	r1, #25
   11844:	f7fe fa51 	bl	fcea <dlms_changeType>
   11848:	4680      	mov	r8, r0
   1184a:	b148      	cbz	r0, 11860 <getProfileGenericData+0x156>
                        arr_empty(&items);
   1184c:	a806      	add	r0, sp, #24
   1184e:	f7fe fd8d 	bl	1036c <arr_empty>
                        var_clear(&value);
   11852:	a812      	add	r0, sp, #72	; 0x48
   11854:	f008 fca7 	bl	1a1a6 <var_clear>
}
   11858:	4640      	mov	r0, r8
   1185a:	b017      	add	sp, #92	; 0x5c
   1185c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    start = *value.dateTime;
   11860:	9a14      	ldr	r2, [sp, #80]	; 0x50
   11862:	ca07      	ldmia	r2, {r0, r1, r2}
   11864:	ab0c      	add	r3, sp, #48	; 0x30
   11866:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                    var_clear(&value);
   1186a:	a812      	add	r0, sp, #72	; 0x48
   1186c:	f008 fc9b 	bl	1a1a6 <var_clear>
   11870:	e792      	b.n	11798 <getProfileGenericData+0x8e>
                    if ((ret = dlms_changeType(it->byteArr, DLMS_DATA_TYPE_DATETIME, &value)) != 0)
   11872:	aa12      	add	r2, sp, #72	; 0x48
   11874:	2119      	movs	r1, #25
   11876:	f7fe fa38 	bl	fcea <dlms_changeType>
   1187a:	4680      	mov	r8, r0
   1187c:	2800      	cmp	r0, #0
   1187e:	d1e5      	bne.n	1184c <getProfileGenericData+0x142>
                    end = *value.dateTime;
   11880:	9a14      	ldr	r2, [sp, #80]	; 0x50
   11882:	ca07      	ldmia	r2, {r0, r1, r2}
   11884:	ab0f      	add	r3, sp, #60	; 0x3c
   11886:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                    var_clear(&value);
   1188a:	a812      	add	r0, sp, #72	; 0x48
   1188c:	f008 fc8b 	bl	1a1a6 <var_clear>
   11890:	e792      	b.n	117b8 <getProfileGenericData+0xae>
                        else if (e->transactionEndIndex != 0)
   11892:	b143      	cbz	r3, 118a6 <getProfileGenericData+0x19c>
                            ++e->transactionStartIndex;
   11894:	6bab      	ldr	r3, [r5, #56]	; 0x38
   11896:	3301      	adds	r3, #1
   11898:	63ab      	str	r3, [r5, #56]	; 0x38
                if (ret == 0 && bb_size(e->value.byteArr) == 0)
   1189a:	68a8      	ldr	r0, [r5, #8]
   1189c:	f7fb f99f 	bl	cbde <bb_size>
   118a0:	b120      	cbz	r0, 118ac <getProfileGenericData+0x1a2>
{
   118a2:	2400      	movs	r4, #0
   118a4:	e7c4      	b.n	11830 <getProfileGenericData+0x126>
                for (pos = 0; pos != object->buffer.size; ++pos)
   118a6:	f109 0901 	add.w	r9, r9, #1
   118aa:	e789      	b.n	117c0 <getProfileGenericData+0xb6>
                    if ((ret = cosem_setArray(e->value.byteArr, cnt)) != 0 ||
   118ac:	4641      	mov	r1, r8
   118ae:	68a8      	ldr	r0, [r5, #8]
   118b0:	f7fc f91c 	bl	daec <cosem_setArray>
   118b4:	4680      	mov	r8, r0
   118b6:	2800      	cmp	r0, #0
   118b8:	d1ce      	bne.n	11858 <getProfileGenericData+0x14e>
                        (ret = bb_set(e->value.byteArr, reply->data, reply->size)) != 0)
   118ba:	88f2      	ldrh	r2, [r6, #6]
   118bc:	6831      	ldr	r1, [r6, #0]
   118be:	68a8      	ldr	r0, [r5, #8]
   118c0:	f7fb fadf 	bl	ce82 <bb_set>
                    if ((ret = cosem_setArray(e->value.byteArr, cnt)) != 0 ||
   118c4:	4680      	mov	r8, r0
   118c6:	2800      	cmp	r0, #0
   118c8:	d1c6      	bne.n	11858 <getProfileGenericData+0x14e>
                    if ((ret = bb_set(reply, e->value.byteArr->data, e->value.byteArr->size)) != 0)
   118ca:	68ab      	ldr	r3, [r5, #8]
                    reply->position = reply->size = 0;
   118cc:	80f0      	strh	r0, [r6, #6]
   118ce:	8130      	strh	r0, [r6, #8]
                    if ((ret = bb_set(reply, e->value.byteArr->data, e->value.byteArr->size)) != 0)
   118d0:	88da      	ldrh	r2, [r3, #6]
   118d2:	6819      	ldr	r1, [r3, #0]
   118d4:	4630      	mov	r0, r6
   118d6:	f7fb fad4 	bl	ce82 <bb_set>
   118da:	4680      	mov	r8, r0
   118dc:	2800      	cmp	r0, #0
   118de:	d0e0      	beq.n	118a2 <getProfileGenericData+0x198>
   118e0:	e7ba      	b.n	11858 <getProfileGenericData+0x14e>
        else if (e->selector == 2) //Read by entry.
   118e2:	f1b8 0f02 	cmp.w	r8, #2
   118e6:	d153      	bne.n	11990 <getProfileGenericData+0x286>
            if ((ret = va_getByIndex(e->parameters.Arr, 0, &it)) == 0)
   118e8:	4621      	mov	r1, r4
   118ea:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   118ec:	aa05      	add	r2, sp, #20
   118ee:	f008 fcd8 	bl	1a2a2 <va_getByIndex>
   118f2:	4604      	mov	r4, r0
   118f4:	2800      	cmp	r0, #0
   118f6:	d19b      	bne.n	11830 <getProfileGenericData+0x126>
                e->transactionStartIndex = (uint16_t)var_toInteger(it);
   118f8:	9805      	ldr	r0, [sp, #20]
   118fa:	f008 fe4c 	bl	1a596 <var_toInteger>
   118fe:	b280      	uxth	r0, r0
                if (e->transactionStartIndex == 0)
   11900:	2800      	cmp	r0, #0
   11902:	d031      	beq.n	11968 <getProfileGenericData+0x25e>
                e->transactionStartIndex = (uint16_t)var_toInteger(it);
   11904:	63a8      	str	r0, [r5, #56]	; 0x38
                if ((ret = va_getByIndex(e->parameters.Arr, 1, &it)) == 0)
   11906:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   11908:	aa05      	add	r2, sp, #20
   1190a:	2101      	movs	r1, #1
   1190c:	f008 fcc9 	bl	1a2a2 <va_getByIndex>
   11910:	4604      	mov	r4, r0
   11912:	2800      	cmp	r0, #0
   11914:	d18c      	bne.n	11830 <getProfileGenericData+0x126>
                    e->transactionEndIndex = (uint16_t)var_toInteger(it);
   11916:	9805      	ldr	r0, [sp, #20]
   11918:	f008 fe3d 	bl	1a596 <var_toInteger>
   1191c:	8afb      	ldrh	r3, [r7, #22]
                    if (e->transactionStartIndex + e->transactionEndIndex > (uint32_t)(object->buffer.size + 1))
   1191e:	6baa      	ldr	r2, [r5, #56]	; 0x38
   11920:	b280      	uxth	r0, r0
                        e->transactionEndIndex = object->buffer.size;
   11922:	2800      	cmp	r0, #0
   11924:	bf08      	it	eq
   11926:	4618      	moveq	r0, r3
                    if (e->transactionStartIndex + e->transactionEndIndex > (uint32_t)(object->buffer.size + 1))
   11928:	eb02 0c00 	add.w	ip, r2, r0
   1192c:	1c59      	adds	r1, r3, #1
                        e->transactionEndIndex = object->buffer.size;
   1192e:	458c      	cmp	ip, r1
   11930:	bf88      	it	hi
   11932:	4618      	movhi	r0, r3
   11934:	63e8      	str	r0, [r5, #60]	; 0x3c
                    if (e->transactionStartIndex == 0)
   11936:	b1d2      	cbz	r2, 1196e <getProfileGenericData+0x264>
                        if ((ret = arr_getByIndex(&object->buffer, (uint16_t)e->transactionStartIndex, (void**)&row)) != 0 ||
   11938:	3710      	adds	r7, #16
                    for (; e->transactionStartIndex < e->transactionEndIndex; ++e->transactionStartIndex)
   1193a:	e9d5 130e 	ldrd	r1, r3, [r5, #56]	; 0x38
   1193e:	4299      	cmp	r1, r3
   11940:	f4bf af76 	bcs.w	11830 <getProfileGenericData+0x126>
                        if ((ret = arr_getByIndex(&object->buffer, (uint16_t)e->transactionStartIndex, (void**)&row)) != 0 ||
   11944:	aa04      	add	r2, sp, #16
   11946:	b289      	uxth	r1, r1
   11948:	4638      	mov	r0, r7
   1194a:	f7fe fd1c 	bl	10386 <arr_getByIndex>
   1194e:	bb10      	cbnz	r0, 11996 <getProfileGenericData+0x28c>
                            (ret = cosem_getRow(&object->buffer, e->transactionStartIndex, &captureObjects, &object->captureObjects, reply)) != 0)
   11950:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   11952:	9600      	str	r6, [sp, #0]
   11954:	4653      	mov	r3, sl
   11956:	aa09      	add	r2, sp, #36	; 0x24
   11958:	4638      	mov	r0, r7
   1195a:	f7ff fe2e 	bl	115ba <cosem_getRow>
                        if ((ret = arr_getByIndex(&object->buffer, (uint16_t)e->transactionStartIndex, (void**)&row)) != 0 ||
   1195e:	b9d0      	cbnz	r0, 11996 <getProfileGenericData+0x28c>
                    for (; e->transactionStartIndex < e->transactionEndIndex; ++e->transactionStartIndex)
   11960:	6bab      	ldr	r3, [r5, #56]	; 0x38
   11962:	3301      	adds	r3, #1
   11964:	63ab      	str	r3, [r5, #56]	; 0x38
   11966:	e7e8      	b.n	1193a <getProfileGenericData+0x230>
                    e->transactionStartIndex = 1;
   11968:	2301      	movs	r3, #1
   1196a:	63ab      	str	r3, [r5, #56]	; 0x38
   1196c:	e7cb      	b.n	11906 <getProfileGenericData+0x1fc>
                        e->transactionEndIndex = (uint16_t)object->buffer.size;
   1196e:	63eb      	str	r3, [r5, #60]	; 0x3c
                        if ((ret = bb_setUInt8(reply, DLMS_DATA_TYPE_ARRAY)) != 0 ||
   11970:	2101      	movs	r1, #1
   11972:	4630      	mov	r0, r6
   11974:	f7fb f99f 	bl	ccb6 <bb_setUInt8>
   11978:	4680      	mov	r8, r0
   1197a:	2800      	cmp	r0, #0
   1197c:	f47f af6c 	bne.w	11858 <getProfileGenericData+0x14e>
                            (ret = hlp_setObjectCount(e->transactionEndIndex, reply)) != 0)
   11980:	6be8      	ldr	r0, [r5, #60]	; 0x3c
   11982:	4631      	mov	r1, r6
   11984:	f007 ff86 	bl	19894 <hlp_setObjectCount>
                        if ((ret = bb_setUInt8(reply, DLMS_DATA_TYPE_ARRAY)) != 0 ||
   11988:	4680      	mov	r8, r0
   1198a:	2800      	cmp	r0, #0
   1198c:	d0d4      	beq.n	11938 <getProfileGenericData+0x22e>
   1198e:	e763      	b.n	11858 <getProfileGenericData+0x14e>
            ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   11990:	f44f 7481 	mov.w	r4, #258	; 0x102
   11994:	e74c      	b.n	11830 <getProfileGenericData+0x126>
                            (ret = cosem_getRow(&object->buffer, e->transactionStartIndex, &captureObjects, &object->captureObjects, reply)) != 0)
   11996:	4604      	mov	r4, r0
   11998:	e74a      	b.n	11830 <getProfileGenericData+0x126>

0001199a <cosem_getProfileGeneric>:
{
   1199a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    unsigned char empty[6] = { 0 };
   1199c:	2300      	movs	r3, #0
   1199e:	9300      	str	r3, [sp, #0]
   119a0:	f8ad 3004 	strh.w	r3, [sp, #4]
    if (e->index == 2)
   119a4:	7e0b      	ldrb	r3, [r1, #24]
    gxProfileGeneric* object = (gxProfileGeneric*)e->target;
   119a6:	694c      	ldr	r4, [r1, #20]
    if (e->index == 2)
   119a8:	2b02      	cmp	r3, #2
{
   119aa:	460a      	mov	r2, r1
    if (e->index == 2)
   119ac:	d105      	bne.n	119ba <cosem_getProfileGeneric+0x20>
        ret = getProfileGenericData(settings, object, e, e->value.byteArr);
   119ae:	688b      	ldr	r3, [r1, #8]
   119b0:	4621      	mov	r1, r4
   119b2:	f7ff feaa 	bl	1170a <getProfileGenericData>
}
   119b6:	b003      	add	sp, #12
   119b8:	bd30      	pop	{r4, r5, pc}
    else if (e->index == 3)
   119ba:	2b03      	cmp	r3, #3
   119bc:	d106      	bne.n	119cc <cosem_getProfileGeneric+0x32>
        ret = getColumns(settings, &object->captureObjects, e->value.byteArr, e);
   119be:	688a      	ldr	r2, [r1, #8]
   119c0:	460b      	mov	r3, r1
   119c2:	f104 011c 	add.w	r1, r4, #28
   119c6:	f7ff fd67 	bl	11498 <getColumns>
   119ca:	e7f4      	b.n	119b6 <cosem_getProfileGeneric+0x1c>
    else if (e->index == 4)
   119cc:	2b04      	cmp	r3, #4
   119ce:	d104      	bne.n	119da <cosem_getProfileGeneric+0x40>
        ret = cosem_setUInt32(e->value.byteArr, object->capturePeriod);
   119d0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
        ret = cosem_setUInt32(e->value.byteArr, object->profileEntries);
   119d2:	6890      	ldr	r0, [r2, #8]
   119d4:	f7fc f83d 	bl	da52 <cosem_setUInt32>
   119d8:	e7ed      	b.n	119b6 <cosem_getProfileGeneric+0x1c>
    else if (e->index == 5)
   119da:	2b05      	cmp	r3, #5
   119dc:	d105      	bne.n	119ea <cosem_getProfileGeneric+0x50>
        ret = cosem_setEnum(e->value.byteArr, object->sortMethod);
   119de:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
   119e2:	6890      	ldr	r0, [r2, #8]
   119e4:	f7fc f890 	bl	db08 <cosem_setEnum>
   119e8:	e7e5      	b.n	119b6 <cosem_getProfileGeneric+0x1c>
    else  if (e->index == 6)
   119ea:	2b06      	cmp	r3, #6
   119ec:	d17d      	bne.n	11aea <cosem_getProfileGeneric+0x150>
        gxByteBuffer* data = e->value.byteArr;
   119ee:	688d      	ldr	r5, [r1, #8]
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   119f0:	2102      	movs	r1, #2
   119f2:	4628      	mov	r0, r5
   119f4:	f7fb f95f 	bl	ccb6 <bb_setUInt8>
   119f8:	2800      	cmp	r0, #0
   119fa:	d1dc      	bne.n	119b6 <cosem_getProfileGeneric+0x1c>
            (ret = bb_setUInt8(data, 4)) != 0)
   119fc:	2104      	movs	r1, #4
   119fe:	4628      	mov	r0, r5
   11a00:	f7fb f959 	bl	ccb6 <bb_setUInt8>
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   11a04:	2800      	cmp	r0, #0
   11a06:	d1d6      	bne.n	119b6 <cosem_getProfileGeneric+0x1c>
        if (object->sortObject == NULL)
   11a08:	6b23      	ldr	r3, [r4, #48]	; 0x30
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   11a0a:	2112      	movs	r1, #18
   11a0c:	4628      	mov	r0, r5
        if (object->sortObject == NULL)
   11a0e:	2b00      	cmp	r3, #0
   11a10:	d133      	bne.n	11a7a <cosem_getProfileGeneric+0xe0>
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   11a12:	f7fb f950 	bl	ccb6 <bb_setUInt8>
   11a16:	2800      	cmp	r0, #0
   11a18:	d1cd      	bne.n	119b6 <cosem_getProfileGeneric+0x1c>
                (ret = bb_setUInt16(data, 0)) != 0 ||
   11a1a:	4601      	mov	r1, r0
   11a1c:	4628      	mov	r0, r5
   11a1e:	f7fb f96c 	bl	ccfa <bb_setUInt16>
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   11a22:	2800      	cmp	r0, #0
   11a24:	d1c7      	bne.n	119b6 <cosem_getProfileGeneric+0x1c>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   11a26:	2109      	movs	r1, #9
   11a28:	4628      	mov	r0, r5
   11a2a:	f7fb f944 	bl	ccb6 <bb_setUInt8>
                (ret = bb_setUInt16(data, 0)) != 0 ||
   11a2e:	2800      	cmp	r0, #0
   11a30:	d1c1      	bne.n	119b6 <cosem_getProfileGeneric+0x1c>
                (ret = bb_setUInt8(data, 6)) != 0 ||
   11a32:	2106      	movs	r1, #6
   11a34:	4628      	mov	r0, r5
   11a36:	f7fb f93e 	bl	ccb6 <bb_setUInt8>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   11a3a:	2800      	cmp	r0, #0
   11a3c:	d1bb      	bne.n	119b6 <cosem_getProfileGeneric+0x1c>
                (ret = bb_set(data, empty, 6)) != 0 ||
   11a3e:	2206      	movs	r2, #6
   11a40:	4669      	mov	r1, sp
   11a42:	4628      	mov	r0, r5
   11a44:	f7fb fa1d 	bl	ce82 <bb_set>
                (ret = bb_setUInt8(data, 6)) != 0 ||
   11a48:	2800      	cmp	r0, #0
   11a4a:	d1b4      	bne.n	119b6 <cosem_getProfileGeneric+0x1c>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
   11a4c:	210f      	movs	r1, #15
   11a4e:	4628      	mov	r0, r5
   11a50:	f7fb f931 	bl	ccb6 <bb_setUInt8>
                (ret = bb_set(data, empty, 6)) != 0 ||
   11a54:	2800      	cmp	r0, #0
   11a56:	d1ae      	bne.n	119b6 <cosem_getProfileGeneric+0x1c>
                (ret = bb_setUInt8(data, 0)) != 0 ||
   11a58:	4601      	mov	r1, r0
   11a5a:	4628      	mov	r0, r5
   11a5c:	f7fb f92b 	bl	ccb6 <bb_setUInt8>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
   11a60:	2800      	cmp	r0, #0
   11a62:	d1a8      	bne.n	119b6 <cosem_getProfileGeneric+0x1c>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   11a64:	2112      	movs	r1, #18
   11a66:	4628      	mov	r0, r5
   11a68:	f7fb f925 	bl	ccb6 <bb_setUInt8>
                (ret = bb_setUInt8(data, 0)) != 0 ||
   11a6c:	2800      	cmp	r0, #0
   11a6e:	d1a2      	bne.n	119b6 <cosem_getProfileGeneric+0x1c>
                (ret = bb_setUInt16(data, 0)) != 0)
   11a70:	4601      	mov	r1, r0
                (ret = bb_setUInt16(data, object->sortObjectDataIndex)) != 0)
   11a72:	4628      	mov	r0, r5
   11a74:	f7fb f941 	bl	ccfa <bb_setUInt16>
   11a78:	e79d      	b.n	119b6 <cosem_getProfileGeneric+0x1c>
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   11a7a:	f7fb f91c 	bl	ccb6 <bb_setUInt8>
   11a7e:	2800      	cmp	r0, #0
   11a80:	d199      	bne.n	119b6 <cosem_getProfileGeneric+0x1c>
                (ret = bb_setUInt16(data, object->sortObject->objectType)) != 0 ||
   11a82:	6b23      	ldr	r3, [r4, #48]	; 0x30
   11a84:	4628      	mov	r0, r5
   11a86:	8819      	ldrh	r1, [r3, #0]
   11a88:	f7fb f937 	bl	ccfa <bb_setUInt16>
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   11a8c:	2800      	cmp	r0, #0
   11a8e:	d192      	bne.n	119b6 <cosem_getProfileGeneric+0x1c>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   11a90:	2109      	movs	r1, #9
   11a92:	4628      	mov	r0, r5
   11a94:	f7fb f90f 	bl	ccb6 <bb_setUInt8>
                (ret = bb_setUInt16(data, object->sortObject->objectType)) != 0 ||
   11a98:	2800      	cmp	r0, #0
   11a9a:	d18c      	bne.n	119b6 <cosem_getProfileGeneric+0x1c>
                (ret = bb_setUInt8(data, 6)) != 0 ||
   11a9c:	2106      	movs	r1, #6
   11a9e:	4628      	mov	r0, r5
   11aa0:	f7fb f909 	bl	ccb6 <bb_setUInt8>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   11aa4:	2800      	cmp	r0, #0
   11aa6:	d186      	bne.n	119b6 <cosem_getProfileGeneric+0x1c>
                (ret = bb_set(data, object->sortObject->logicalName, 6)) != 0 ||
   11aa8:	6b21      	ldr	r1, [r4, #48]	; 0x30
   11aaa:	2206      	movs	r2, #6
   11aac:	4411      	add	r1, r2
   11aae:	4628      	mov	r0, r5
   11ab0:	f7fb f9e7 	bl	ce82 <bb_set>
                (ret = bb_setUInt8(data, 6)) != 0 ||
   11ab4:	2800      	cmp	r0, #0
   11ab6:	f47f af7e 	bne.w	119b6 <cosem_getProfileGeneric+0x1c>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
   11aba:	210f      	movs	r1, #15
   11abc:	4628      	mov	r0, r5
   11abe:	f7fb f8fa 	bl	ccb6 <bb_setUInt8>
                (ret = bb_set(data, object->sortObject->logicalName, 6)) != 0 ||
   11ac2:	2800      	cmp	r0, #0
   11ac4:	f47f af77 	bne.w	119b6 <cosem_getProfileGeneric+0x1c>
                (ret = bb_setUInt8(data, object->sortObjectAttributeIndex)) != 0 ||
   11ac8:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
   11acc:	4628      	mov	r0, r5
   11ace:	f7fb f8f2 	bl	ccb6 <bb_setUInt8>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
   11ad2:	2800      	cmp	r0, #0
   11ad4:	f47f af6f 	bne.w	119b6 <cosem_getProfileGeneric+0x1c>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   11ad8:	2112      	movs	r1, #18
   11ada:	4628      	mov	r0, r5
   11adc:	f7fb f8eb 	bl	ccb6 <bb_setUInt8>
                (ret = bb_setUInt8(data, object->sortObjectAttributeIndex)) != 0 ||
   11ae0:	2800      	cmp	r0, #0
   11ae2:	f47f af68 	bne.w	119b6 <cosem_getProfileGeneric+0x1c>
                (ret = bb_setUInt16(data, object->sortObjectDataIndex)) != 0)
   11ae6:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
   11ae8:	e7c3      	b.n	11a72 <cosem_getProfileGeneric+0xd8>
    else if (e->index == 7)
   11aea:	2b07      	cmp	r3, #7
   11aec:	d101      	bne.n	11af2 <cosem_getProfileGeneric+0x158>
        ret = cosem_setUInt32(e->value.byteArr, object->entriesInUse);
   11aee:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   11af0:	e76f      	b.n	119d2 <cosem_getProfileGeneric+0x38>
    else if (e->index == 8)
   11af2:	2b08      	cmp	r3, #8
   11af4:	d101      	bne.n	11afa <cosem_getProfileGeneric+0x160>
        ret = cosem_setUInt32(e->value.byteArr, object->profileEntries);
   11af6:	6b61      	ldr	r1, [r4, #52]	; 0x34
   11af8:	e76b      	b.n	119d2 <cosem_getProfileGeneric+0x38>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   11afa:	f44f 7081 	mov.w	r0, #258	; 0x102
   11afe:	e75a      	b.n	119b6 <cosem_getProfileGeneric+0x1c>

00011b00 <cosem_getDisconnectControl>:
    if (e->index == 2)
   11b00:	7e02      	ldrb	r2, [r0, #24]
    gxDisconnectControl* object = (gxDisconnectControl*)e->target;
   11b02:	6943      	ldr	r3, [r0, #20]
    if (e->index == 2)
   11b04:	2a02      	cmp	r2, #2
   11b06:	d103      	bne.n	11b10 <cosem_getDisconnectControl+0x10>
        ret = cosem_setBoolean(e->value.byteArr, object->outputState);
   11b08:	7c19      	ldrb	r1, [r3, #16]
   11b0a:	6880      	ldr	r0, [r0, #8]
   11b0c:	f7fc b80a 	b.w	db24 <cosem_setBoolean>
    else if (e->index == 3)
   11b10:	2a03      	cmp	r2, #3
   11b12:	d103      	bne.n	11b1c <cosem_getDisconnectControl+0x1c>
        ret = cosem_setEnum(e->value.byteArr, object->controlState);
   11b14:	7c59      	ldrb	r1, [r3, #17]
        ret = cosem_setEnum(e->value.byteArr, object->controlMode);
   11b16:	6880      	ldr	r0, [r0, #8]
   11b18:	f7fb bff6 	b.w	db08 <cosem_setEnum>
    else if (e->index == 4)
   11b1c:	2a04      	cmp	r2, #4
   11b1e:	d101      	bne.n	11b24 <cosem_getDisconnectControl+0x24>
        ret = cosem_setEnum(e->value.byteArr, object->controlMode);
   11b20:	7c99      	ldrb	r1, [r3, #18]
   11b22:	e7f8      	b.n	11b16 <cosem_getDisconnectControl+0x16>
}
   11b24:	f44f 7081 	mov.w	r0, #258	; 0x102
   11b28:	4770      	bx	lr

00011b2a <cosem_add>:
{
   11b2a:	b570      	push	{r4, r5, r6, lr}
   11b2c:	460e      	mov	r6, r1
    if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   11b2e:	2109      	movs	r1, #9
{
   11b30:	4604      	mov	r4, r0
   11b32:	4615      	mov	r5, r2
    if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   11b34:	f7fb f8bf 	bl	ccb6 <bb_setUInt8>
   11b38:	b958      	cbnz	r0, 11b52 <cosem_add+0x28>
        (ret = hlp_setObjectCount(len, data)) != 0 ||
   11b3a:	4621      	mov	r1, r4
   11b3c:	4628      	mov	r0, r5
   11b3e:	f007 fea9 	bl	19894 <hlp_setObjectCount>
    if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   11b42:	b930      	cbnz	r0, 11b52 <cosem_add+0x28>
        (ret = bb_set(data, (unsigned char*)value, len)) != 0)
   11b44:	462a      	mov	r2, r5
   11b46:	4631      	mov	r1, r6
   11b48:	4620      	mov	r0, r4
}
   11b4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        (ret = bb_set(data, (unsigned char*)value, len)) != 0)
   11b4e:	f7fb b998 	b.w	ce82 <bb_set>
}
   11b52:	bd70      	pop	{r4, r5, r6, pc}

00011b54 <cosem_getRegisterActivation>:
{
   11b54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (e->index == 2)
   11b58:	7e0b      	ldrb	r3, [r1, #24]
    gxRegisterActivation* object = (gxRegisterActivation*)e->target;
   11b5a:	694e      	ldr	r6, [r1, #20]
    gxByteBuffer* data = e->value.byteArr;
   11b5c:	688d      	ldr	r5, [r1, #8]
    if (e->index == 2)
   11b5e:	2b02      	cmp	r3, #2
{
   11b60:	4681      	mov	r9, r0
   11b62:	460f      	mov	r7, r1
    if (e->index == 2)
   11b64:	d16e      	bne.n	11c44 <cosem_getRegisterActivation+0xf0>
        if (!e->transaction)
   11b66:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
   11b6a:	2b00      	cmp	r3, #0
   11b6c:	d04c      	beq.n	11c08 <cosem_getRegisterActivation+0xb4>
            for (pos = (uint16_t)e->transactionStartIndex; pos != object->registerAssignment.size; ++pos)
   11b6e:	f8b7 8038 	ldrh.w	r8, [r7, #56]	; 0x38
                if ((ret = oa_getByIndex(&object->registerAssignment, pos, &od)) != 0 ||
   11b72:	f106 0a10 	add.w	sl, r6, #16
            for (pos = (uint16_t)e->transactionStartIndex; pos != object->registerAssignment.size; ++pos)
   11b76:	8af3      	ldrh	r3, [r6, #22]
   11b78:	4543      	cmp	r3, r8
   11b7a:	d05d      	beq.n	11c38 <cosem_getRegisterActivation+0xe4>
                if ((ret = oa_getByIndex(&object->registerAssignment, pos, &od)) != 0 ||
   11b7c:	aa01      	add	r2, sp, #4
   11b7e:	4641      	mov	r1, r8
   11b80:	4650      	mov	r0, sl
                pduSize = (uint16_t)data->size;
   11b82:	f8b5 b006 	ldrh.w	fp, [r5, #6]
                if ((ret = oa_getByIndex(&object->registerAssignment, pos, &od)) != 0 ||
   11b86:	f008 f922 	bl	19dce <oa_getByIndex>
   11b8a:	4604      	mov	r4, r0
   11b8c:	2800      	cmp	r0, #0
   11b8e:	d155      	bne.n	11c3c <cosem_getRegisterActivation+0xe8>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   11b90:	2102      	movs	r1, #2
   11b92:	4628      	mov	r0, r5
   11b94:	f7fb f88f 	bl	ccb6 <bb_setUInt8>
                if ((ret = oa_getByIndex(&object->registerAssignment, pos, &od)) != 0 ||
   11b98:	4604      	mov	r4, r0
   11b9a:	2800      	cmp	r0, #0
   11b9c:	d14e      	bne.n	11c3c <cosem_getRegisterActivation+0xe8>
                    (ret = bb_setUInt8(data, 2)) != 0 ||
   11b9e:	2102      	movs	r1, #2
   11ba0:	4628      	mov	r0, r5
   11ba2:	f7fb f888 	bl	ccb6 <bb_setUInt8>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   11ba6:	4604      	mov	r4, r0
   11ba8:	2800      	cmp	r0, #0
   11baa:	d147      	bne.n	11c3c <cosem_getRegisterActivation+0xe8>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   11bac:	2112      	movs	r1, #18
   11bae:	4628      	mov	r0, r5
   11bb0:	f7fb f881 	bl	ccb6 <bb_setUInt8>
                    (ret = bb_setUInt8(data, 2)) != 0 ||
   11bb4:	4604      	mov	r4, r0
   11bb6:	2800      	cmp	r0, #0
   11bb8:	d140      	bne.n	11c3c <cosem_getRegisterActivation+0xe8>
                    (ret = bb_setUInt16(data, od->objectType)) != 0 ||
   11bba:	9b01      	ldr	r3, [sp, #4]
   11bbc:	4628      	mov	r0, r5
   11bbe:	8819      	ldrh	r1, [r3, #0]
   11bc0:	f7fb f89b 	bl	ccfa <bb_setUInt16>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   11bc4:	4604      	mov	r4, r0
   11bc6:	2800      	cmp	r0, #0
   11bc8:	d138      	bne.n	11c3c <cosem_getRegisterActivation+0xe8>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   11bca:	2109      	movs	r1, #9
   11bcc:	4628      	mov	r0, r5
   11bce:	f7fb f872 	bl	ccb6 <bb_setUInt8>
                    (ret = bb_setUInt16(data, od->objectType)) != 0 ||
   11bd2:	4604      	mov	r4, r0
   11bd4:	bb90      	cbnz	r0, 11c3c <cosem_getRegisterActivation+0xe8>
                    (ret = bb_setUInt8(data, 6)) != 0 ||
   11bd6:	2106      	movs	r1, #6
   11bd8:	4628      	mov	r0, r5
   11bda:	f7fb f86c 	bl	ccb6 <bb_setUInt8>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   11bde:	4604      	mov	r4, r0
   11be0:	bb60      	cbnz	r0, 11c3c <cosem_getRegisterActivation+0xe8>
                    (ret = bb_set(data, od->logicalName, 6)) != 0)
   11be2:	9901      	ldr	r1, [sp, #4]
   11be4:	2206      	movs	r2, #6
   11be6:	4411      	add	r1, r2
   11be8:	4628      	mov	r0, r5
   11bea:	f7fb f94a 	bl	ce82 <bb_set>
                    (ret = bb_setUInt8(data, 6)) != 0 ||
   11bee:	4604      	mov	r4, r0
   11bf0:	bb20      	cbnz	r0, 11c3c <cosem_getRegisterActivation+0xe8>
                if (settings->server)
   11bf2:	f899 3058 	ldrb.w	r3, [r9, #88]	; 0x58
   11bf6:	b99b      	cbnz	r3, 11c20 <cosem_getRegisterActivation+0xcc>
                ++e->transactionStartIndex;
   11bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
            for (pos = (uint16_t)e->transactionStartIndex; pos != object->registerAssignment.size; ++pos)
   11bfa:	f108 0801 	add.w	r8, r8, #1
                ++e->transactionStartIndex;
   11bfe:	3301      	adds	r3, #1
   11c00:	63bb      	str	r3, [r7, #56]	; 0x38
            for (pos = (uint16_t)e->transactionStartIndex; pos != object->registerAssignment.size; ++pos)
   11c02:	fa1f f888 	uxth.w	r8, r8
   11c06:	e7b6      	b.n	11b76 <cosem_getRegisterActivation+0x22>
   11c08:	8af1      	ldrh	r1, [r6, #22]
            e->transactionEndIndex = object->registerAssignment.size;
   11c0a:	63f9      	str	r1, [r7, #60]	; 0x3c
            ret = cosem_setArray(data, object->registerAssignment.size);
   11c0c:	4628      	mov	r0, r5
   11c0e:	f7fb ff6d 	bl	daec <cosem_setArray>
        if (ret == 0)
   11c12:	4604      	mov	r4, r0
   11c14:	2800      	cmp	r0, #0
   11c16:	d0aa      	beq.n	11b6e <cosem_getRegisterActivation+0x1a>
}
   11c18:	4620      	mov	r0, r4
   11c1a:	b003      	add	sp, #12
   11c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    if (!e->skipMaxPduSize && dlms_isPduFull(settings, data, NULL))
   11c20:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
   11c24:	2a00      	cmp	r2, #0
   11c26:	d1e7      	bne.n	11bf8 <cosem_getRegisterActivation+0xa4>
   11c28:	4629      	mov	r1, r5
   11c2a:	4648      	mov	r0, r9
   11c2c:	f7fe fac6 	bl	101bc <dlms_isPduFull>
   11c30:	2800      	cmp	r0, #0
   11c32:	d0e1      	beq.n	11bf8 <cosem_getRegisterActivation+0xa4>
                data->size = pduSize;
   11c34:	f8a5 b006 	strh.w	fp, [r5, #6]
                ret = 0;
   11c38:	2400      	movs	r4, #0
   11c3a:	e7ed      	b.n	11c18 <cosem_getRegisterActivation+0xc4>
            if (ret == DLMS_ERROR_CODE_OUTOFMEMORY)
   11c3c:	f5b4 7f82 	cmp.w	r4, #260	; 0x104
   11c40:	d1ea      	bne.n	11c18 <cosem_getRegisterActivation+0xc4>
   11c42:	e7f7      	b.n	11c34 <cosem_getRegisterActivation+0xe0>
    else if (e->index == 3)
   11c44:	2b03      	cmp	r3, #3
   11c46:	d146      	bne.n	11cd6 <cosem_getRegisterActivation+0x182>
        if ((ret = cosem_setArray(data, object->maskList.size)) == 0)
   11c48:	8bf1      	ldrh	r1, [r6, #30]
   11c4a:	4628      	mov	r0, r5
   11c4c:	f7fb ff4e 	bl	daec <cosem_setArray>
   11c50:	4604      	mov	r4, r0
   11c52:	2800      	cmp	r0, #0
   11c54:	d1e0      	bne.n	11c18 <cosem_getRegisterActivation+0xc4>
   11c56:	4680      	mov	r8, r0
                if ((ret = arr_getByIndex(&object->maskList, pos, (void**)&a)) != 0 ||
   11c58:	f106 0918 	add.w	r9, r6, #24
            for (pos = 0; pos != object->maskList.size; ++pos)
   11c5c:	8bf3      	ldrh	r3, [r6, #30]
   11c5e:	fa1f f188 	uxth.w	r1, r8
   11c62:	428b      	cmp	r3, r1
   11c64:	d0d8      	beq.n	11c18 <cosem_getRegisterActivation+0xc4>
                if ((ret = arr_getByIndex(&object->maskList, pos, (void**)&a)) != 0 ||
   11c66:	aa01      	add	r2, sp, #4
   11c68:	4648      	mov	r0, r9
   11c6a:	f7fe fb8c 	bl	10386 <arr_getByIndex>
   11c6e:	2800      	cmp	r0, #0
   11c70:	d14b      	bne.n	11d0a <cosem_getRegisterActivation+0x1b6>
                    (ret = cosem_setStructure(data, 2)) != 0 ||
   11c72:	2102      	movs	r1, #2
   11c74:	4628      	mov	r0, r5
   11c76:	f7fb ff2b 	bl	dad0 <cosem_setStructure>
                if ((ret = arr_getByIndex(&object->maskList, pos, (void**)&a)) != 0 ||
   11c7a:	2800      	cmp	r0, #0
   11c7c:	d145      	bne.n	11d0a <cosem_getRegisterActivation+0x1b6>
                    (ret = cosem_setOctetString(data, ((gxByteBuffer*)a->key))) != 0 ||
   11c7e:	9b01      	ldr	r3, [sp, #4]
   11c80:	4628      	mov	r0, r5
   11c82:	6819      	ldr	r1, [r3, #0]
   11c84:	f7fb fe5b 	bl	d93e <cosem_setOctetString>
                    (ret = cosem_setStructure(data, 2)) != 0 ||
   11c88:	2800      	cmp	r0, #0
   11c8a:	d13e      	bne.n	11d0a <cosem_getRegisterActivation+0x1b6>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
   11c8c:	2101      	movs	r1, #1
   11c8e:	4628      	mov	r0, r5
   11c90:	f7fb f811 	bl	ccb6 <bb_setUInt8>
                    (ret = cosem_setOctetString(data, ((gxByteBuffer*)a->key))) != 0 ||
   11c94:	2800      	cmp	r0, #0
   11c96:	d138      	bne.n	11d0a <cosem_getRegisterActivation+0x1b6>
                    (ret = bb_setUInt8(data, (unsigned char)bb_size((gxByteBuffer*)a->value))) != 0)
   11c98:	9b01      	ldr	r3, [sp, #4]
   11c9a:	6858      	ldr	r0, [r3, #4]
   11c9c:	f7fa ff9f 	bl	cbde <bb_size>
   11ca0:	b2c1      	uxtb	r1, r0
   11ca2:	4628      	mov	r0, r5
   11ca4:	f7fb f807 	bl	ccb6 <bb_setUInt8>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
   11ca8:	4607      	mov	r7, r0
   11caa:	b990      	cbnz	r0, 11cd2 <cosem_getRegisterActivation+0x17e>
                for (pos2 = 0; pos2 != bb_size((gxByteBuffer*)a->value); ++pos2)
   11cac:	9b01      	ldr	r3, [sp, #4]
   11cae:	6858      	ldr	r0, [r3, #4]
   11cb0:	f7fa ff95 	bl	cbde <bb_size>
   11cb4:	42b8      	cmp	r0, r7
   11cb6:	d102      	bne.n	11cbe <cosem_getRegisterActivation+0x16a>
            for (pos = 0; pos != object->maskList.size; ++pos)
   11cb8:	f108 0801 	add.w	r8, r8, #1
   11cbc:	e7ce      	b.n	11c5c <cosem_getRegisterActivation+0x108>
                    if ((ret = cosem_setUInt8(data, ((gxByteBuffer*)a->value)->data[pos2])) != 0)
   11cbe:	9b01      	ldr	r3, [sp, #4]
   11cc0:	685b      	ldr	r3, [r3, #4]
   11cc2:	681b      	ldr	r3, [r3, #0]
   11cc4:	4628      	mov	r0, r5
   11cc6:	5dd9      	ldrb	r1, [r3, r7]
   11cc8:	f7fb fea7 	bl	da1a <cosem_setUInt8>
   11ccc:	b9e8      	cbnz	r0, 11d0a <cosem_getRegisterActivation+0x1b6>
                for (pos2 = 0; pos2 != bb_size((gxByteBuffer*)a->value); ++pos2)
   11cce:	3701      	adds	r7, #1
   11cd0:	e7ec      	b.n	11cac <cosem_getRegisterActivation+0x158>
                    (ret = bb_setUInt8(data, (unsigned char)bb_size((gxByteBuffer*)a->value))) != 0)
   11cd2:	4604      	mov	r4, r0
   11cd4:	e7a0      	b.n	11c18 <cosem_getRegisterActivation+0xc4>
    else if (e->index == 4)
   11cd6:	2b04      	cmp	r3, #4
   11cd8:	d119      	bne.n	11d0e <cosem_getRegisterActivation+0x1ba>
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   11cda:	2109      	movs	r1, #9
   11cdc:	4628      	mov	r0, r5
   11cde:	f7fa ffea 	bl	ccb6 <bb_setUInt8>
   11ce2:	4604      	mov	r4, r0
   11ce4:	2800      	cmp	r0, #0
   11ce6:	d197      	bne.n	11c18 <cosem_getRegisterActivation+0xc4>
            (ret = hlp_setObjectCount(object->activeMask.size, data)) != 0 ||
   11ce8:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
   11cea:	4629      	mov	r1, r5
   11cec:	f007 fdd2 	bl	19894 <hlp_setObjectCount>
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   11cf0:	4604      	mov	r4, r0
   11cf2:	2800      	cmp	r0, #0
   11cf4:	d190      	bne.n	11c18 <cosem_getRegisterActivation+0xc4>
            (ret = bb_set2(data, &object->activeMask, 0, bb_size(&object->activeMask))) != 0)
   11cf6:	3624      	adds	r6, #36	; 0x24
   11cf8:	4630      	mov	r0, r6
   11cfa:	f7fa ff70 	bl	cbde <bb_size>
   11cfe:	4622      	mov	r2, r4
   11d00:	4603      	mov	r3, r0
   11d02:	4631      	mov	r1, r6
   11d04:	4628      	mov	r0, r5
   11d06:	f7fb f8eb 	bl	cee0 <bb_set2>
   11d0a:	4604      	mov	r4, r0
   11d0c:	e784      	b.n	11c18 <cosem_getRegisterActivation+0xc4>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   11d0e:	f44f 7481 	mov.w	r4, #258	; 0x102
   11d12:	e781      	b.n	11c18 <cosem_getRegisterActivation+0xc4>

00011d14 <cosem_getRegisterMonitor>:
{
   11d14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    if (e->index == 2)
   11d18:	7e07      	ldrb	r7, [r0, #24]
    gxRegisterMonitor* object = (gxRegisterMonitor*)e->target;
   11d1a:	6946      	ldr	r6, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
   11d1c:	6885      	ldr	r5, [r0, #8]
    if (e->index == 2)
   11d1e:	2f02      	cmp	r7, #2
   11d20:	d122      	bne.n	11d68 <cosem_getRegisterMonitor+0x54>
        if ((ret = cosem_setArray(data, object->thresholds.size)) == 0)
   11d22:	8d71      	ldrh	r1, [r6, #42]	; 0x2a
   11d24:	4628      	mov	r0, r5
   11d26:	f7fb fee1 	bl	daec <cosem_setArray>
   11d2a:	4604      	mov	r4, r0
   11d2c:	b118      	cbz	r0, 11d36 <cosem_getRegisterMonitor+0x22>
}
   11d2e:	4620      	mov	r0, r4
   11d30:	b003      	add	sp, #12
   11d32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   11d36:	4680      	mov	r8, r0
                if ((ret = va_getByIndex(&object->thresholds, pos, &tmp)) != 0 ||
   11d38:	f106 0724 	add.w	r7, r6, #36	; 0x24
            for (pos = 0; pos != object->thresholds.size; ++pos)
   11d3c:	8d72      	ldrh	r2, [r6, #42]	; 0x2a
   11d3e:	fa1f f388 	uxth.w	r3, r8
   11d42:	429a      	cmp	r2, r3
   11d44:	d0f3      	beq.n	11d2e <cosem_getRegisterMonitor+0x1a>
                if ((ret = va_getByIndex(&object->thresholds, pos, &tmp)) != 0 ||
   11d46:	aa01      	add	r2, sp, #4
   11d48:	fa1f f188 	uxth.w	r1, r8
   11d4c:	4638      	mov	r0, r7
   11d4e:	f008 faa8 	bl	1a2a2 <va_getByIndex>
   11d52:	b938      	cbnz	r0, 11d64 <cosem_getRegisterMonitor+0x50>
                    (ret = var_getBytes(tmp, data)) != 0)
   11d54:	9801      	ldr	r0, [sp, #4]
   11d56:	4629      	mov	r1, r5
   11d58:	f008 fbe3 	bl	1a522 <var_getBytes>
   11d5c:	f108 0801 	add.w	r8, r8, #1
                if ((ret = va_getByIndex(&object->thresholds, pos, &tmp)) != 0 ||
   11d60:	2800      	cmp	r0, #0
   11d62:	d0eb      	beq.n	11d3c <cosem_getRegisterMonitor+0x28>
                    (ret = bb_setUInt16(data, actionSet->actionDown.scriptSelector)) != 0)
   11d64:	4604      	mov	r4, r0
    return ret;
   11d66:	e7e2      	b.n	11d2e <cosem_getRegisterMonitor+0x1a>
    else if (e->index == 3)
   11d68:	2f03      	cmp	r7, #3
   11d6a:	d143      	bne.n	11df4 <cosem_getRegisterMonitor+0xe0>
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   11d6c:	2102      	movs	r1, #2
   11d6e:	4628      	mov	r0, r5
   11d70:	f7fa ffa1 	bl	ccb6 <bb_setUInt8>
   11d74:	4604      	mov	r4, r0
   11d76:	2800      	cmp	r0, #0
   11d78:	d1d9      	bne.n	11d2e <cosem_getRegisterMonitor+0x1a>
            (ret = bb_setUInt8(data, 3)) != 0 ||
   11d7a:	4639      	mov	r1, r7
   11d7c:	4628      	mov	r0, r5
   11d7e:	f7fa ff9a 	bl	ccb6 <bb_setUInt8>
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   11d82:	4604      	mov	r4, r0
   11d84:	2800      	cmp	r0, #0
   11d86:	d1d2      	bne.n	11d2e <cosem_getRegisterMonitor+0x1a>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   11d88:	2112      	movs	r1, #18
   11d8a:	4628      	mov	r0, r5
   11d8c:	f7fa ff93 	bl	ccb6 <bb_setUInt8>
            (ret = bb_setUInt8(data, 3)) != 0 ||
   11d90:	4604      	mov	r4, r0
   11d92:	2800      	cmp	r0, #0
   11d94:	d1cb      	bne.n	11d2e <cosem_getRegisterMonitor+0x1a>
            (ret = bb_setUInt16(data, object->monitoredValue.target != NULL ? object->monitoredValue.target->objectType : 0)) != 0 ||
   11d96:	69f1      	ldr	r1, [r6, #28]
   11d98:	b101      	cbz	r1, 11d9c <cosem_getRegisterMonitor+0x88>
   11d9a:	8809      	ldrh	r1, [r1, #0]
   11d9c:	4628      	mov	r0, r5
   11d9e:	f7fa ffac 	bl	ccfa <bb_setUInt16>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   11da2:	4604      	mov	r4, r0
   11da4:	2800      	cmp	r0, #0
   11da6:	d1c2      	bne.n	11d2e <cosem_getRegisterMonitor+0x1a>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   11da8:	2109      	movs	r1, #9
   11daa:	4628      	mov	r0, r5
   11dac:	f7fa ff83 	bl	ccb6 <bb_setUInt8>
            (ret = bb_setUInt16(data, object->monitoredValue.target != NULL ? object->monitoredValue.target->objectType : 0)) != 0 ||
   11db0:	4604      	mov	r4, r0
   11db2:	2800      	cmp	r0, #0
   11db4:	d1bb      	bne.n	11d2e <cosem_getRegisterMonitor+0x1a>
            (ret = hlp_setObjectCount(6, data)) != 0 ||
   11db6:	4629      	mov	r1, r5
   11db8:	2006      	movs	r0, #6
   11dba:	f007 fd6b 	bl	19894 <hlp_setObjectCount>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   11dbe:	4604      	mov	r4, r0
   11dc0:	2800      	cmp	r0, #0
   11dc2:	d1b4      	bne.n	11d2e <cosem_getRegisterMonitor+0x1a>
            (ret = bb_set(data, obj_getLogicalName(object->monitoredValue.target), 6)) != 0 ||
   11dc4:	69f0      	ldr	r0, [r6, #28]
   11dc6:	f7f2 f80f 	bl	3de8 <obj_getLogicalName>
   11dca:	2206      	movs	r2, #6
   11dcc:	4601      	mov	r1, r0
   11dce:	4628      	mov	r0, r5
   11dd0:	f7fb f857 	bl	ce82 <bb_set>
            (ret = hlp_setObjectCount(6, data)) != 0 ||
   11dd4:	4604      	mov	r4, r0
   11dd6:	2800      	cmp	r0, #0
   11dd8:	d1a9      	bne.n	11d2e <cosem_getRegisterMonitor+0x1a>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
   11dda:	210f      	movs	r1, #15
   11ddc:	4628      	mov	r0, r5
   11dde:	f7fa ff6a 	bl	ccb6 <bb_setUInt8>
            (ret = bb_set(data, obj_getLogicalName(object->monitoredValue.target), 6)) != 0 ||
   11de2:	4604      	mov	r4, r0
   11de4:	2800      	cmp	r0, #0
   11de6:	d1a2      	bne.n	11d2e <cosem_getRegisterMonitor+0x1a>
            (ret = bb_setUInt8(data, object->monitoredValue.attributeIndex)) != 0)
   11de8:	f896 1020 	ldrb.w	r1, [r6, #32]
   11dec:	4628      	mov	r0, r5
   11dee:	f7fa ff62 	bl	ccb6 <bb_setUInt8>
   11df2:	e7b7      	b.n	11d64 <cosem_getRegisterMonitor+0x50>
    else if (e->index == 4)
   11df4:	2f04      	cmp	r7, #4
   11df6:	f040 8091 	bne.w	11f1c <cosem_getRegisterMonitor+0x208>
        if ((ret = cosem_setArray(data, object->actions.size)) == 0)
   11dfa:	8af1      	ldrh	r1, [r6, #22]
   11dfc:	4628      	mov	r0, r5
   11dfe:	f7fb fe75 	bl	daec <cosem_setArray>
   11e02:	4604      	mov	r4, r0
   11e04:	2800      	cmp	r0, #0
   11e06:	d192      	bne.n	11d2e <cosem_getRegisterMonitor+0x1a>
   11e08:	4607      	mov	r7, r0
                    (ret = arr_getByIndex(&object->actions, pos, (void**)&actionSet)) != 0 ||
   11e0a:	f106 0810 	add.w	r8, r6, #16
   11e0e:	e07e      	b.n	11f0e <cosem_getRegisterMonitor+0x1fa>
                if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   11e10:	2102      	movs	r1, #2
   11e12:	4628      	mov	r0, r5
   11e14:	f7fa ff4f 	bl	ccb6 <bb_setUInt8>
   11e18:	2800      	cmp	r0, #0
   11e1a:	d1a3      	bne.n	11d64 <cosem_getRegisterMonitor+0x50>
                    (ret = bb_setUInt8(data, 2)) != 0 ||
   11e1c:	2102      	movs	r1, #2
   11e1e:	4628      	mov	r0, r5
   11e20:	f7fa ff49 	bl	ccb6 <bb_setUInt8>
                if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   11e24:	2800      	cmp	r0, #0
   11e26:	d19d      	bne.n	11d64 <cosem_getRegisterMonitor+0x50>
                    (ret = arr_getByIndex(&object->actions, pos, (void**)&actionSet)) != 0 ||
   11e28:	aa01      	add	r2, sp, #4
   11e2a:	4649      	mov	r1, r9
   11e2c:	4640      	mov	r0, r8
   11e2e:	f7fe faaa 	bl	10386 <arr_getByIndex>
                    (ret = bb_setUInt8(data, 2)) != 0 ||
   11e32:	2800      	cmp	r0, #0
   11e34:	d196      	bne.n	11d64 <cosem_getRegisterMonitor+0x50>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   11e36:	2102      	movs	r1, #2
   11e38:	4628      	mov	r0, r5
   11e3a:	f7fa ff3c 	bl	ccb6 <bb_setUInt8>
                    (ret = arr_getByIndex(&object->actions, pos, (void**)&actionSet)) != 0 ||
   11e3e:	2800      	cmp	r0, #0
   11e40:	d190      	bne.n	11d64 <cosem_getRegisterMonitor+0x50>
                    (ret = bb_setUInt8(data, 2)) != 0 ||
   11e42:	2102      	movs	r1, #2
   11e44:	4628      	mov	r0, r5
   11e46:	f7fa ff36 	bl	ccb6 <bb_setUInt8>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   11e4a:	2800      	cmp	r0, #0
   11e4c:	d18a      	bne.n	11d64 <cosem_getRegisterMonitor+0x50>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   11e4e:	2109      	movs	r1, #9
   11e50:	4628      	mov	r0, r5
   11e52:	f7fa ff30 	bl	ccb6 <bb_setUInt8>
                    (ret = bb_setUInt8(data, 2)) != 0 ||
   11e56:	2800      	cmp	r0, #0
   11e58:	d184      	bne.n	11d64 <cosem_getRegisterMonitor+0x50>
                    (ret = bb_setUInt8(data, 6)) != 0 ||
   11e5a:	2106      	movs	r1, #6
   11e5c:	4628      	mov	r0, r5
   11e5e:	f7fa ff2a 	bl	ccb6 <bb_setUInt8>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   11e62:	2800      	cmp	r0, #0
   11e64:	f47f af7e 	bne.w	11d64 <cosem_getRegisterMonitor+0x50>
                    (ret = bb_set(data, obj_getLogicalName((gxObject*)actionSet->actionUp.script), 6)) != 0 ||
   11e68:	9b01      	ldr	r3, [sp, #4]
   11e6a:	6818      	ldr	r0, [r3, #0]
   11e6c:	f7f1 ffbc 	bl	3de8 <obj_getLogicalName>
   11e70:	2206      	movs	r2, #6
   11e72:	4601      	mov	r1, r0
   11e74:	4628      	mov	r0, r5
   11e76:	f7fb f804 	bl	ce82 <bb_set>
                    (ret = bb_setUInt8(data, 6)) != 0 ||
   11e7a:	2800      	cmp	r0, #0
   11e7c:	f47f af72 	bne.w	11d64 <cosem_getRegisterMonitor+0x50>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   11e80:	2112      	movs	r1, #18
   11e82:	4628      	mov	r0, r5
   11e84:	f7fa ff17 	bl	ccb6 <bb_setUInt8>
                    (ret = bb_set(data, obj_getLogicalName((gxObject*)actionSet->actionUp.script), 6)) != 0 ||
   11e88:	2800      	cmp	r0, #0
   11e8a:	f47f af6b 	bne.w	11d64 <cosem_getRegisterMonitor+0x50>
                    (ret = bb_setUInt16(data, actionSet->actionUp.scriptSelector)) != 0 ||
   11e8e:	9b01      	ldr	r3, [sp, #4]
   11e90:	4628      	mov	r0, r5
   11e92:	8899      	ldrh	r1, [r3, #4]
   11e94:	f7fa ff31 	bl	ccfa <bb_setUInt16>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   11e98:	2800      	cmp	r0, #0
   11e9a:	f47f af63 	bne.w	11d64 <cosem_getRegisterMonitor+0x50>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   11e9e:	2102      	movs	r1, #2
   11ea0:	4628      	mov	r0, r5
   11ea2:	f7fa ff08 	bl	ccb6 <bb_setUInt8>
                    (ret = bb_setUInt16(data, actionSet->actionUp.scriptSelector)) != 0 ||
   11ea6:	2800      	cmp	r0, #0
   11ea8:	f47f af5c 	bne.w	11d64 <cosem_getRegisterMonitor+0x50>
                    (ret = bb_setUInt8(data, 2)) != 0 ||
   11eac:	2102      	movs	r1, #2
   11eae:	4628      	mov	r0, r5
   11eb0:	f7fa ff01 	bl	ccb6 <bb_setUInt8>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   11eb4:	2800      	cmp	r0, #0
   11eb6:	f47f af55 	bne.w	11d64 <cosem_getRegisterMonitor+0x50>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   11eba:	2109      	movs	r1, #9
   11ebc:	4628      	mov	r0, r5
   11ebe:	f7fa fefa 	bl	ccb6 <bb_setUInt8>
                    (ret = bb_setUInt8(data, 2)) != 0 ||
   11ec2:	2800      	cmp	r0, #0
   11ec4:	f47f af4e 	bne.w	11d64 <cosem_getRegisterMonitor+0x50>
                    (ret = bb_setUInt8(data, 6)) != 0 ||
   11ec8:	2106      	movs	r1, #6
   11eca:	4628      	mov	r0, r5
   11ecc:	f7fa fef3 	bl	ccb6 <bb_setUInt8>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   11ed0:	2800      	cmp	r0, #0
   11ed2:	f47f af47 	bne.w	11d64 <cosem_getRegisterMonitor+0x50>
                    (ret = bb_set(data, obj_getLogicalName((gxObject*)actionSet->actionDown.script), 6)) != 0 ||
   11ed6:	9b01      	ldr	r3, [sp, #4]
   11ed8:	6898      	ldr	r0, [r3, #8]
   11eda:	f7f1 ff85 	bl	3de8 <obj_getLogicalName>
   11ede:	2206      	movs	r2, #6
   11ee0:	4601      	mov	r1, r0
   11ee2:	4628      	mov	r0, r5
   11ee4:	f7fa ffcd 	bl	ce82 <bb_set>
                    (ret = bb_setUInt8(data, 6)) != 0 ||
   11ee8:	2800      	cmp	r0, #0
   11eea:	f47f af3b 	bne.w	11d64 <cosem_getRegisterMonitor+0x50>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   11eee:	2112      	movs	r1, #18
   11ef0:	4628      	mov	r0, r5
   11ef2:	f7fa fee0 	bl	ccb6 <bb_setUInt8>
                    (ret = bb_set(data, obj_getLogicalName((gxObject*)actionSet->actionDown.script), 6)) != 0 ||
   11ef6:	2800      	cmp	r0, #0
   11ef8:	f47f af34 	bne.w	11d64 <cosem_getRegisterMonitor+0x50>
                    (ret = bb_setUInt16(data, actionSet->actionDown.scriptSelector)) != 0)
   11efc:	9b01      	ldr	r3, [sp, #4]
   11efe:	4628      	mov	r0, r5
   11f00:	8999      	ldrh	r1, [r3, #12]
   11f02:	f7fa fefa 	bl	ccfa <bb_setUInt16>
   11f06:	3701      	adds	r7, #1
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   11f08:	2800      	cmp	r0, #0
   11f0a:	f47f af2b 	bne.w	11d64 <cosem_getRegisterMonitor+0x50>
            for (pos = 0; pos != object->actions.size; ++pos)
   11f0e:	8af3      	ldrh	r3, [r6, #22]
   11f10:	fa1f f987 	uxth.w	r9, r7
   11f14:	454b      	cmp	r3, r9
   11f16:	f47f af7b 	bne.w	11e10 <cosem_getRegisterMonitor+0xfc>
   11f1a:	e708      	b.n	11d2e <cosem_getRegisterMonitor+0x1a>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   11f1c:	f44f 7481 	mov.w	r4, #258	; 0x102
   11f20:	e705      	b.n	11d2e <cosem_getRegisterMonitor+0x1a>

00011f22 <cosem_getSapAssignment>:
{
   11f22:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    if (e->index == 2)
   11f26:	7e03      	ldrb	r3, [r0, #24]
   11f28:	2b02      	cmp	r3, #2
   11f2a:	d14c      	bne.n	11fc6 <cosem_getSapAssignment+0xa4>
    gxSapAssignment* object = (gxSapAssignment*)e->target;
   11f2c:	6947      	ldr	r7, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
   11f2e:	6885      	ldr	r5, [r0, #8]
        if ((ret = cosem_setArray(data, object->sapAssignmentList.size)) == 0)
   11f30:	8af9      	ldrh	r1, [r7, #22]
   11f32:	4628      	mov	r0, r5
   11f34:	f7fb fdda 	bl	daec <cosem_setArray>
   11f38:	4604      	mov	r4, r0
   11f3a:	b118      	cbz	r0, 11f44 <cosem_getSapAssignment+0x22>
}
   11f3c:	4620      	mov	r0, r4
   11f3e:	b002      	add	sp, #8
   11f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11f44:	4680      	mov	r8, r0
                    (ret = arr_getByIndex(&object->sapAssignmentList, pos, (void**)&it)) != 0 ||
   11f46:	f107 0910 	add.w	r9, r7, #16
            for (pos = 0; pos != object->sapAssignmentList.size; ++pos)
   11f4a:	8afb      	ldrh	r3, [r7, #22]
   11f4c:	fa1f f688 	uxth.w	r6, r8
   11f50:	42b3      	cmp	r3, r6
   11f52:	d0f3      	beq.n	11f3c <cosem_getSapAssignment+0x1a>
                if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   11f54:	2102      	movs	r1, #2
   11f56:	4628      	mov	r0, r5
   11f58:	f7fa fead 	bl	ccb6 <bb_setUInt8>
   11f5c:	bb88      	cbnz	r0, 11fc2 <cosem_getSapAssignment+0xa0>
                    (ret = bb_setUInt8(data, 2)) != 0 ||
   11f5e:	2102      	movs	r1, #2
   11f60:	4628      	mov	r0, r5
   11f62:	f7fa fea8 	bl	ccb6 <bb_setUInt8>
                if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   11f66:	bb60      	cbnz	r0, 11fc2 <cosem_getSapAssignment+0xa0>
                    (ret = arr_getByIndex(&object->sapAssignmentList, pos, (void**)&it)) != 0 ||
   11f68:	aa01      	add	r2, sp, #4
   11f6a:	4631      	mov	r1, r6
   11f6c:	4648      	mov	r0, r9
   11f6e:	f7fe fa0a 	bl	10386 <arr_getByIndex>
                    (ret = bb_setUInt8(data, 2)) != 0 ||
   11f72:	bb30      	cbnz	r0, 11fc2 <cosem_getSapAssignment+0xa0>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   11f74:	2112      	movs	r1, #18
   11f76:	4628      	mov	r0, r5
   11f78:	f7fa fe9d 	bl	ccb6 <bb_setUInt8>
                    (ret = arr_getByIndex(&object->sapAssignmentList, pos, (void**)&it)) != 0 ||
   11f7c:	bb08      	cbnz	r0, 11fc2 <cosem_getSapAssignment+0xa0>
                    (ret = bb_setUInt16(data, it->id)) != 0 ||
   11f7e:	9b01      	ldr	r3, [sp, #4]
   11f80:	4628      	mov	r0, r5
   11f82:	8819      	ldrh	r1, [r3, #0]
   11f84:	f7fa feb9 	bl	ccfa <bb_setUInt16>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   11f88:	b9d8      	cbnz	r0, 11fc2 <cosem_getSapAssignment+0xa0>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   11f8a:	2109      	movs	r1, #9
   11f8c:	4628      	mov	r0, r5
   11f8e:	f7fa fe92 	bl	ccb6 <bb_setUInt8>
                    (ret = bb_setUInt16(data, it->id)) != 0 ||
   11f92:	b9b0      	cbnz	r0, 11fc2 <cosem_getSapAssignment+0xa0>
                    (ret = hlp_setObjectCount(it->name.size, data)) != 0 ||
   11f94:	9b01      	ldr	r3, [sp, #4]
   11f96:	4629      	mov	r1, r5
   11f98:	8958      	ldrh	r0, [r3, #10]
   11f9a:	f007 fc7b 	bl	19894 <hlp_setObjectCount>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   11f9e:	4606      	mov	r6, r0
   11fa0:	b9a0      	cbnz	r0, 11fcc <cosem_getSapAssignment+0xaa>
                    (ret = bb_set2(data, &it->name, 0, bb_size(&it->name))) != 0)
   11fa2:	9901      	ldr	r1, [sp, #4]
   11fa4:	f101 0a04 	add.w	sl, r1, #4
   11fa8:	4650      	mov	r0, sl
   11faa:	f7fa fe18 	bl	cbde <bb_size>
   11fae:	4632      	mov	r2, r6
   11fb0:	4603      	mov	r3, r0
   11fb2:	4651      	mov	r1, sl
   11fb4:	4628      	mov	r0, r5
   11fb6:	f7fa ff93 	bl	cee0 <bb_set2>
   11fba:	f108 0801 	add.w	r8, r8, #1
                    (ret = hlp_setObjectCount(it->name.size, data)) != 0 ||
   11fbe:	2800      	cmp	r0, #0
   11fc0:	d0c3      	beq.n	11f4a <cosem_getSapAssignment+0x28>
                    (ret = bb_set2(data, &it->name, 0, bb_size(&it->name))) != 0)
   11fc2:	4604      	mov	r4, r0
    return ret;
   11fc4:	e7ba      	b.n	11f3c <cosem_getSapAssignment+0x1a>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   11fc6:	f44f 7481 	mov.w	r4, #258	; 0x102
   11fca:	e7b7      	b.n	11f3c <cosem_getSapAssignment+0x1a>
                    (ret = hlp_setObjectCount(it->name.size, data)) != 0 ||
   11fcc:	4604      	mov	r4, r0
   11fce:	e7b5      	b.n	11f3c <cosem_getSapAssignment+0x1a>

00011fd0 <cosem_getSchedule>:
{
   11fd0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    if (e->index == 2)
   11fd4:	7e03      	ldrb	r3, [r0, #24]
   11fd6:	2b02      	cmp	r3, #2
   11fd8:	f040 8081 	bne.w	120de <cosem_getSchedule+0x10e>
    gxSchedule* object = (gxSchedule*)e->target;
   11fdc:	6946      	ldr	r6, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
   11fde:	6885      	ldr	r5, [r0, #8]
        if ((ret = cosem_setArray(data, object->entries.size)) != 0)
   11fe0:	8af1      	ldrh	r1, [r6, #22]
   11fe2:	4628      	mov	r0, r5
   11fe4:	f7fb fd82 	bl	daec <cosem_setArray>
   11fe8:	4604      	mov	r4, r0
   11fea:	2800      	cmp	r0, #0
   11fec:	d173      	bne.n	120d6 <cosem_getSchedule+0x106>
        ba_init(&ba);
   11fee:	a802      	add	r0, sp, #8
   11ff0:	f7fa fcf1 	bl	c9d6 <ba_init>
                (ret = arr_getByIndex(&object->entries, pos, (void**)&se)) != 0 ||
   11ff4:	f106 0710 	add.w	r7, r6, #16
        for (pos = 0; pos != object->entries.size; ++pos)
   11ff8:	8af3      	ldrh	r3, [r6, #22]
   11ffa:	fa1f f884 	uxth.w	r8, r4
   11ffe:	4543      	cmp	r3, r8
   12000:	d101      	bne.n	12006 <cosem_getSchedule+0x36>
   12002:	2000      	movs	r0, #0
   12004:	e066      	b.n	120d4 <cosem_getSchedule+0x104>
            if ((ret = cosem_setStructure(data, 10)) != 0 ||
   12006:	210a      	movs	r1, #10
   12008:	4628      	mov	r0, r5
   1200a:	f7fb fd61 	bl	dad0 <cosem_setStructure>
   1200e:	2800      	cmp	r0, #0
   12010:	d160      	bne.n	120d4 <cosem_getSchedule+0x104>
                (ret = arr_getByIndex(&object->entries, pos, (void**)&se)) != 0 ||
   12012:	aa01      	add	r2, sp, #4
   12014:	4641      	mov	r1, r8
   12016:	4638      	mov	r0, r7
   12018:	f7fe f9b5 	bl	10386 <arr_getByIndex>
            if ((ret = cosem_setStructure(data, 10)) != 0 ||
   1201c:	2800      	cmp	r0, #0
   1201e:	d159      	bne.n	120d4 <cosem_getSchedule+0x104>
                (ret = cosem_setUInt16(data, se->index)) != 0 ||
   12020:	9b01      	ldr	r3, [sp, #4]
   12022:	4628      	mov	r0, r5
   12024:	8819      	ldrh	r1, [r3, #0]
   12026:	f7fb fd06 	bl	da36 <cosem_setUInt16>
                (ret = arr_getByIndex(&object->entries, pos, (void**)&se)) != 0 ||
   1202a:	2800      	cmp	r0, #0
   1202c:	d152      	bne.n	120d4 <cosem_getSchedule+0x104>
                (ret = cosem_setBoolean(data, se->enable)) != 0 ||
   1202e:	9b01      	ldr	r3, [sp, #4]
   12030:	4628      	mov	r0, r5
   12032:	7899      	ldrb	r1, [r3, #2]
   12034:	f7fb fd76 	bl	db24 <cosem_setBoolean>
                (ret = cosem_setUInt16(data, se->index)) != 0 ||
   12038:	2800      	cmp	r0, #0
   1203a:	d14b      	bne.n	120d4 <cosem_getSchedule+0x104>
                (ret = cosem_setOctetString2(data, obj_getLogicalName((gxObject*)se->scriptTable), 6)) != 0 ||
   1203c:	9b01      	ldr	r3, [sp, #4]
   1203e:	6858      	ldr	r0, [r3, #4]
   12040:	f7f1 fed2 	bl	3de8 <obj_getLogicalName>
   12044:	2206      	movs	r2, #6
   12046:	4601      	mov	r1, r0
   12048:	4628      	mov	r0, r5
   1204a:	f7fb fcc5 	bl	d9d8 <cosem_setOctetString2>
                (ret = cosem_setBoolean(data, se->enable)) != 0 ||
   1204e:	2800      	cmp	r0, #0
   12050:	d140      	bne.n	120d4 <cosem_getSchedule+0x104>
                (ret = cosem_setUInt16(data, se->scriptSelector)) != 0 ||
   12052:	9b01      	ldr	r3, [sp, #4]
   12054:	4628      	mov	r0, r5
   12056:	8919      	ldrh	r1, [r3, #8]
   12058:	f7fb fced 	bl	da36 <cosem_setUInt16>
                (ret = cosem_setOctetString2(data, obj_getLogicalName((gxObject*)se->scriptTable), 6)) != 0 ||
   1205c:	2800      	cmp	r0, #0
   1205e:	d139      	bne.n	120d4 <cosem_getSchedule+0x104>
                (ret = cosem_setTimeAsOctetString(data, &se->switchTime)) != 0 ||
   12060:	9901      	ldr	r1, [sp, #4]
   12062:	4628      	mov	r0, r5
   12064:	310c      	adds	r1, #12
   12066:	f7fb fc57 	bl	d918 <cosem_setTimeAsOctetString>
                (ret = cosem_setUInt16(data, se->scriptSelector)) != 0 ||
   1206a:	bb98      	cbnz	r0, 120d4 <cosem_getSchedule+0x104>
                (ret = cosem_setUInt16(data, se->validityWindow)) != 0 ||
   1206c:	9b01      	ldr	r3, [sp, #4]
   1206e:	4628      	mov	r0, r5
   12070:	8b19      	ldrh	r1, [r3, #24]
   12072:	f7fb fce0 	bl	da36 <cosem_setUInt16>
                (ret = cosem_setTimeAsOctetString(data, &se->switchTime)) != 0 ||
   12076:	bb68      	cbnz	r0, 120d4 <cosem_getSchedule+0x104>
                (ret = cosem_setBitString(data, se->execWeekdays, 7)) != 0 ||
   12078:	9b01      	ldr	r3, [sp, #4]
   1207a:	7e99      	ldrb	r1, [r3, #26]
   1207c:	2207      	movs	r2, #7
   1207e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
   12082:	4628      	mov	r0, r5
   12084:	f7fb fbfc 	bl	d880 <cosem_setBitString>
                (ret = cosem_setUInt16(data, se->validityWindow)) != 0 ||
   12088:	bb20      	cbnz	r0, 120d4 <cosem_getSchedule+0x104>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_BIT_STRING)) != 0 ||
   1208a:	2104      	movs	r1, #4
   1208c:	4628      	mov	r0, r5
   1208e:	f7fa fe12 	bl	ccb6 <bb_setUInt8>
                (ret = cosem_setBitString(data, se->execWeekdays, 7)) != 0 ||
   12092:	b9f8      	cbnz	r0, 120d4 <cosem_getSchedule+0x104>
                (ret = hlp_setObjectCount(se->execSpecDays.size, data)) != 0 ||
   12094:	9b01      	ldr	r3, [sp, #4]
   12096:	4629      	mov	r1, r5
   12098:	8c58      	ldrh	r0, [r3, #34]	; 0x22
   1209a:	f007 fbfb 	bl	19894 <hlp_setObjectCount>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_BIT_STRING)) != 0 ||
   1209e:	b9c8      	cbnz	r0, 120d4 <cosem_getSchedule+0x104>
                (ret = bb_set(data, se->execSpecDays.data, ba_getByteCount(se->execSpecDays.size))) != 0 ||
   120a0:	9b01      	ldr	r3, [sp, #4]
   120a2:	8c58      	ldrh	r0, [r3, #34]	; 0x22
   120a4:	f8d3 801c 	ldr.w	r8, [r3, #28]
   120a8:	f7ef f914 	bl	12d4 <ba_getByteCount>
   120ac:	4641      	mov	r1, r8
   120ae:	4602      	mov	r2, r0
   120b0:	4628      	mov	r0, r5
   120b2:	f7fa fee6 	bl	ce82 <bb_set>
                (ret = hlp_setObjectCount(se->execSpecDays.size, data)) != 0 ||
   120b6:	b968      	cbnz	r0, 120d4 <cosem_getSchedule+0x104>
                (ret = cosem_setDateTimeAsOctetString(data, &se->beginDate)) != 0 ||
   120b8:	9901      	ldr	r1, [sp, #4]
   120ba:	4628      	mov	r0, r5
   120bc:	3124      	adds	r1, #36	; 0x24
   120be:	f7fb fbb9 	bl	d834 <cosem_setDateTimeAsOctetString>
                (ret = bb_set(data, se->execSpecDays.data, ba_getByteCount(se->execSpecDays.size))) != 0 ||
   120c2:	b938      	cbnz	r0, 120d4 <cosem_getSchedule+0x104>
                (ret = cosem_setDateTimeAsOctetString(data, &se->endDate)) != 0)
   120c4:	9901      	ldr	r1, [sp, #4]
   120c6:	4628      	mov	r0, r5
   120c8:	3130      	adds	r1, #48	; 0x30
   120ca:	f7fb fbb3 	bl	d834 <cosem_setDateTimeAsOctetString>
   120ce:	3401      	adds	r4, #1
                (ret = cosem_setDateTimeAsOctetString(data, &se->beginDate)) != 0 ||
   120d0:	2800      	cmp	r0, #0
   120d2:	d091      	beq.n	11ff8 <cosem_getSchedule+0x28>
   120d4:	4604      	mov	r4, r0
}
   120d6:	4620      	mov	r0, r4
   120d8:	b004      	add	sp, #16
   120da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   120de:	f44f 7481 	mov.w	r4, #258	; 0x102
   120e2:	e7f8      	b.n	120d6 <cosem_getSchedule+0x106>

000120e4 <cosem_getScriptTable>:
{
   120e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if (e->index == 2)
   120e6:	7e03      	ldrb	r3, [r0, #24]
   120e8:	2b02      	cmp	r3, #2
   120ea:	d162      	bne.n	121b2 <cosem_getScriptTable+0xce>
    gxScriptTable* object = (gxScriptTable*)e->target;
   120ec:	6945      	ldr	r5, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
   120ee:	6884      	ldr	r4, [r0, #8]
        if ((ret = cosem_setArray(data, object->scripts.size)) == 0)
   120f0:	8ae9      	ldrh	r1, [r5, #22]
   120f2:	4620      	mov	r0, r4
   120f4:	f7fb fcfa 	bl	daec <cosem_setArray>
   120f8:	2800      	cmp	r0, #0
   120fa:	d058      	beq.n	121ae <cosem_getScriptTable+0xca>
}
   120fc:	b003      	add	sp, #12
   120fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    if ((ret = arr_getByIndex(&it->actions, pos2, (void**)&a)) != 0 ||
   12100:	aa01      	add	r2, sp, #4
   12102:	3004      	adds	r0, #4
   12104:	f7fe f93f 	bl	10386 <arr_getByIndex>
   12108:	bb48      	cbnz	r0, 1215e <cosem_getScriptTable+0x7a>
                        (ret = cosem_setStructure(data, 5)) != 0 ||
   1210a:	2105      	movs	r1, #5
   1210c:	4620      	mov	r0, r4
   1210e:	f7fb fcdf 	bl	dad0 <cosem_setStructure>
                    if ((ret = arr_getByIndex(&it->actions, pos2, (void**)&a)) != 0 ||
   12112:	bb20      	cbnz	r0, 1215e <cosem_getScriptTable+0x7a>
                        (ret = cosem_setEnum(data, a->type)) != 0 ||
   12114:	9b01      	ldr	r3, [sp, #4]
   12116:	4620      	mov	r0, r4
   12118:	7919      	ldrb	r1, [r3, #4]
   1211a:	f7fb fcf5 	bl	db08 <cosem_setEnum>
                        (ret = cosem_setStructure(data, 5)) != 0 ||
   1211e:	b9f0      	cbnz	r0, 1215e <cosem_getScriptTable+0x7a>
                        (ret = cosem_setUInt16(data, a->target == NULL ? 0 : a->target->objectType)) != 0 ||
   12120:	9b01      	ldr	r3, [sp, #4]
   12122:	6819      	ldr	r1, [r3, #0]
   12124:	b101      	cbz	r1, 12128 <cosem_getScriptTable+0x44>
   12126:	8809      	ldrh	r1, [r1, #0]
   12128:	4620      	mov	r0, r4
   1212a:	f7fb fc84 	bl	da36 <cosem_setUInt16>
                        (ret = cosem_setEnum(data, a->type)) != 0 ||
   1212e:	b9b0      	cbnz	r0, 1215e <cosem_getScriptTable+0x7a>
                        (ret = cosem_setOctetString2(data, obj_getLogicalName(a->target), 6)) != 0 ||
   12130:	9b01      	ldr	r3, [sp, #4]
   12132:	6818      	ldr	r0, [r3, #0]
   12134:	f7f1 fe58 	bl	3de8 <obj_getLogicalName>
   12138:	2206      	movs	r2, #6
   1213a:	4601      	mov	r1, r0
   1213c:	4620      	mov	r0, r4
   1213e:	f7fb fc4b 	bl	d9d8 <cosem_setOctetString2>
                        (ret = cosem_setUInt16(data, a->target == NULL ? 0 : a->target->objectType)) != 0 ||
   12142:	b960      	cbnz	r0, 1215e <cosem_getScriptTable+0x7a>
                        (ret = cosem_setInt8(data, a->index)) != 0 ||
   12144:	9b01      	ldr	r3, [sp, #4]
   12146:	4620      	mov	r0, r4
   12148:	7e19      	ldrb	r1, [r3, #24]
   1214a:	f7fb fc90 	bl	da6e <cosem_setInt8>
                        (ret = cosem_setOctetString2(data, obj_getLogicalName(a->target), 6)) != 0 ||
   1214e:	b930      	cbnz	r0, 1215e <cosem_getScriptTable+0x7a>
                        (ret = cosem_setVariant(data, &a->parameter)) != 0)
   12150:	9901      	ldr	r1, [sp, #4]
   12152:	4620      	mov	r0, r4
   12154:	3108      	adds	r1, #8
   12156:	f7fb fcb4 	bl	dac2 <cosem_setVariant>
   1215a:	3701      	adds	r7, #1
                        (ret = cosem_setInt8(data, a->index)) != 0 ||
   1215c:	b300      	cbz	r0, 121a0 <cosem_getScriptTable+0xbc>
            for (pos = 0; pos != object->scripts.size; ++pos)
   1215e:	3601      	adds	r6, #1
   12160:	8aeb      	ldrh	r3, [r5, #22]
   12162:	b2b1      	uxth	r1, r6
   12164:	428b      	cmp	r3, r1
   12166:	d0c9      	beq.n	120fc <cosem_getScriptTable+0x18>
                if ((ret = arr_getByIndex(&object->scripts, pos, (void**)&it)) != 0 ||
   12168:	466a      	mov	r2, sp
   1216a:	f105 0010 	add.w	r0, r5, #16
   1216e:	f7fe f90a 	bl	10386 <arr_getByIndex>
   12172:	2800      	cmp	r0, #0
   12174:	d1c2      	bne.n	120fc <cosem_getScriptTable+0x18>
                    (ret = cosem_setStructure(data, 2)) != 0 ||
   12176:	2102      	movs	r1, #2
   12178:	4620      	mov	r0, r4
   1217a:	f7fb fca9 	bl	dad0 <cosem_setStructure>
                if ((ret = arr_getByIndex(&object->scripts, pos, (void**)&it)) != 0 ||
   1217e:	2800      	cmp	r0, #0
   12180:	d1bc      	bne.n	120fc <cosem_getScriptTable+0x18>
                    (ret = cosem_setUInt16(data, it->id)) != 0 ||
   12182:	9b00      	ldr	r3, [sp, #0]
   12184:	4620      	mov	r0, r4
   12186:	8819      	ldrh	r1, [r3, #0]
   12188:	f7fb fc55 	bl	da36 <cosem_setUInt16>
                    (ret = cosem_setStructure(data, 2)) != 0 ||
   1218c:	2800      	cmp	r0, #0
   1218e:	d1b5      	bne.n	120fc <cosem_getScriptTable+0x18>
                    (ret = cosem_setArray(data, it->actions.size)) != 0)
   12190:	9b00      	ldr	r3, [sp, #0]
   12192:	4620      	mov	r0, r4
   12194:	8959      	ldrh	r1, [r3, #10]
   12196:	f7fb fca9 	bl	daec <cosem_setArray>
                    (ret = cosem_setUInt16(data, it->id)) != 0 ||
   1219a:	2800      	cmp	r0, #0
   1219c:	d1ae      	bne.n	120fc <cosem_getScriptTable+0x18>
   1219e:	4607      	mov	r7, r0
                for (pos2 = 0; pos2 != it->actions.size; ++pos2)
   121a0:	9800      	ldr	r0, [sp, #0]
   121a2:	8943      	ldrh	r3, [r0, #10]
   121a4:	b2b9      	uxth	r1, r7
   121a6:	428b      	cmp	r3, r1
   121a8:	d1aa      	bne.n	12100 <cosem_getScriptTable+0x1c>
   121aa:	2000      	movs	r0, #0
   121ac:	e7d7      	b.n	1215e <cosem_getScriptTable+0x7a>
   121ae:	4606      	mov	r6, r0
   121b0:	e7d6      	b.n	12160 <cosem_getScriptTable+0x7c>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   121b2:	f44f 7081 	mov.w	r0, #258	; 0x102
    return ret;
   121b6:	e7a1      	b.n	120fc <cosem_getScriptTable+0x18>

000121b8 <cosem_getSpecialDaysTable>:
{
   121b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (e->index == 2)
   121ba:	7e03      	ldrb	r3, [r0, #24]
   121bc:	2b02      	cmp	r3, #2
{
   121be:	b087      	sub	sp, #28
    if (e->index == 2)
   121c0:	d131      	bne.n	12226 <cosem_getSpecialDaysTable+0x6e>
    gxSpecialDaysTable* object = (gxSpecialDaysTable*)e->target;
   121c2:	6945      	ldr	r5, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
   121c4:	6884      	ldr	r4, [r0, #8]
        if ((ret = var_init(&tmp)) != 0 ||
   121c6:	a802      	add	r0, sp, #8
   121c8:	f007 fe91 	bl	19eee <var_init>
   121cc:	b920      	cbnz	r0, 121d8 <cosem_getSpecialDaysTable+0x20>
            (ret = cosem_setArray(data, object->entries.size)) == 0)
   121ce:	8ae9      	ldrh	r1, [r5, #22]
   121d0:	4620      	mov	r0, r4
   121d2:	f7fb fc8b 	bl	daec <cosem_setArray>
        if ((ret = var_init(&tmp)) != 0 ||
   121d6:	bb20      	cbnz	r0, 12222 <cosem_getSpecialDaysTable+0x6a>
{
   121d8:	2600      	movs	r6, #0
                if ((ret = arr_getByIndex(&object->entries, pos, (void**)&sd)) != 0 ||
   121da:	f105 0710 	add.w	r7, r5, #16
            for (pos = 0; pos != object->entries.size; ++pos)
   121de:	8aeb      	ldrh	r3, [r5, #22]
   121e0:	b2b1      	uxth	r1, r6
   121e2:	428b      	cmp	r3, r1
   121e4:	d01d      	beq.n	12222 <cosem_getSpecialDaysTable+0x6a>
                if ((ret = arr_getByIndex(&object->entries, pos, (void**)&sd)) != 0 ||
   121e6:	aa01      	add	r2, sp, #4
   121e8:	4638      	mov	r0, r7
   121ea:	f7fe f8cc 	bl	10386 <arr_getByIndex>
   121ee:	b9c0      	cbnz	r0, 12222 <cosem_getSpecialDaysTable+0x6a>
                    (ret = cosem_setStructure(data, 3)) != 0 ||
   121f0:	2103      	movs	r1, #3
   121f2:	4620      	mov	r0, r4
   121f4:	f7fb fc6c 	bl	dad0 <cosem_setStructure>
                if ((ret = arr_getByIndex(&object->entries, pos, (void**)&sd)) != 0 ||
   121f8:	b998      	cbnz	r0, 12222 <cosem_getSpecialDaysTable+0x6a>
                    (ret = cosem_setUInt16(data, sd->index)) != 0 ||
   121fa:	9b01      	ldr	r3, [sp, #4]
   121fc:	4620      	mov	r0, r4
   121fe:	8819      	ldrh	r1, [r3, #0]
   12200:	f7fb fc19 	bl	da36 <cosem_setUInt16>
                    (ret = cosem_setStructure(data, 3)) != 0 ||
   12204:	b968      	cbnz	r0, 12222 <cosem_getSpecialDaysTable+0x6a>
                    (ret = cosem_setDateAsOctetString(data, &sd->date)) != 0 ||
   12206:	9901      	ldr	r1, [sp, #4]
   12208:	4620      	mov	r0, r4
   1220a:	3104      	adds	r1, #4
   1220c:	f7fb fb25 	bl	d85a <cosem_setDateAsOctetString>
                    (ret = cosem_setUInt16(data, sd->index)) != 0 ||
   12210:	b938      	cbnz	r0, 12222 <cosem_getSpecialDaysTable+0x6a>
                    (ret = cosem_setUInt8(data, sd->dayId)) != 0)
   12212:	9b01      	ldr	r3, [sp, #4]
   12214:	4620      	mov	r0, r4
   12216:	7c19      	ldrb	r1, [r3, #16]
   12218:	f7fb fbff 	bl	da1a <cosem_setUInt8>
   1221c:	3601      	adds	r6, #1
                    (ret = cosem_setDateAsOctetString(data, &sd->date)) != 0 ||
   1221e:	2800      	cmp	r0, #0
   12220:	d0dd      	beq.n	121de <cosem_getSpecialDaysTable+0x26>
}
   12222:	b007      	add	sp, #28
   12224:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   12226:	f44f 7081 	mov.w	r0, #258	; 0x102
    return ret;
   1222a:	e7fa      	b.n	12222 <cosem_getSpecialDaysTable+0x6a>

0001222c <cosem_getTcpUdpSetup>:
{
   1222c:	b510      	push	{r4, lr}
    if (e->index == 2)
   1222e:	7e02      	ldrb	r2, [r0, #24]
    gxTcpUdpSetup* object = (gxTcpUdpSetup*)e->target;
   12230:	6943      	ldr	r3, [r0, #20]
    if (e->index == 2)
   12232:	2a02      	cmp	r2, #2
   12234:	d105      	bne.n	12242 <cosem_getTcpUdpSetup+0x16>
        ret = cosem_setUInt16(e->value.byteArr, object->port);
   12236:	8a19      	ldrh	r1, [r3, #16]
        ret = cosem_setUInt16(e->value.byteArr, object->inactivityTimeout);
   12238:	6880      	ldr	r0, [r0, #8]
}
   1223a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        ret = cosem_setUInt16(e->value.byteArr, object->inactivityTimeout);
   1223e:	f7fb bbfa 	b.w	da36 <cosem_setUInt16>
    else if (e->index == 3)
   12242:	2a03      	cmp	r2, #3
   12244:	d10a      	bne.n	1225c <cosem_getTcpUdpSetup+0x30>
        ret = cosem_setOctetString2(e->value.byteArr, obj_getLogicalName(object->ipSetup), 6);
   12246:	6884      	ldr	r4, [r0, #8]
   12248:	6958      	ldr	r0, [r3, #20]
   1224a:	f7f1 fdcd 	bl	3de8 <obj_getLogicalName>
   1224e:	2206      	movs	r2, #6
   12250:	4601      	mov	r1, r0
   12252:	4620      	mov	r0, r4
}
   12254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        ret = cosem_setOctetString2(e->value.byteArr, obj_getLogicalName(object->ipSetup), 6);
   12258:	f7fb bbbe 	b.w	d9d8 <cosem_setOctetString2>
    else if (e->index == 4)
   1225c:	2a04      	cmp	r2, #4
   1225e:	d101      	bne.n	12264 <cosem_getTcpUdpSetup+0x38>
        ret = cosem_setUInt16(e->value.byteArr, object->maximumSegmentSize);
   12260:	8b99      	ldrh	r1, [r3, #28]
   12262:	e7e9      	b.n	12238 <cosem_getTcpUdpSetup+0xc>
    else if (e->index == 5)
   12264:	2a05      	cmp	r2, #5
   12266:	d105      	bne.n	12274 <cosem_getTcpUdpSetup+0x48>
}
   12268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        ret = cosem_setUInt8(e->value.byteArr, object->maximumSimultaneousConnections);
   1226c:	7e19      	ldrb	r1, [r3, #24]
   1226e:	6880      	ldr	r0, [r0, #8]
   12270:	f7fb bbd3 	b.w	da1a <cosem_setUInt8>
    else if (e->index == 6)
   12274:	2a06      	cmp	r2, #6
   12276:	d101      	bne.n	1227c <cosem_getTcpUdpSetup+0x50>
        ret = cosem_setUInt16(e->value.byteArr, object->inactivityTimeout);
   12278:	8b59      	ldrh	r1, [r3, #26]
   1227a:	e7dd      	b.n	12238 <cosem_getTcpUdpSetup+0xc>
}
   1227c:	f44f 7081 	mov.w	r0, #258	; 0x102
   12280:	bd10      	pop	{r4, pc}

00012282 <cosem_getUtilityTables>:
    if (e->index == 2)
   12282:	7e03      	ldrb	r3, [r0, #24]
    gxUtilityTables* object = (gxUtilityTables*)e->target;
   12284:	6941      	ldr	r1, [r0, #20]
    if (e->index == 2)
   12286:	2b02      	cmp	r3, #2
   12288:	d103      	bne.n	12292 <cosem_getUtilityTables+0x10>
        ret = cosem_setUInt16(e->value.byteArr, object->tableId);
   1228a:	8a09      	ldrh	r1, [r1, #16]
   1228c:	6880      	ldr	r0, [r0, #8]
   1228e:	f7fb bbd2 	b.w	da36 <cosem_setUInt16>
    else if (e->index == 3)
   12292:	2b03      	cmp	r3, #3
   12294:	d005      	beq.n	122a2 <cosem_getUtilityTables+0x20>
    else if (e->index == 4)
   12296:	2b04      	cmp	r3, #4
   12298:	d105      	bne.n	122a6 <cosem_getUtilityTables+0x24>
        ret = cosem_setOctetString(e->value.byteArr, &object->buffer);
   1229a:	6880      	ldr	r0, [r0, #8]
   1229c:	3114      	adds	r1, #20
   1229e:	f7fb bb4e 	b.w	d93e <cosem_setOctetString>
    int ret = 0;
   122a2:	2000      	movs	r0, #0
   122a4:	4770      	bx	lr
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   122a6:	f44f 7081 	mov.w	r0, #258	; 0x102
}
   122aa:	4770      	bx	lr

000122ac <cosem_getMbusMasterPortSetup>:
    if (e->index == 2)
   122ac:	7e03      	ldrb	r3, [r0, #24]
   122ae:	2b02      	cmp	r3, #2
   122b0:	d104      	bne.n	122bc <cosem_getMbusMasterPortSetup+0x10>
        ret = cosem_setEnum(e->value.byteArr, object->commSpeed);
   122b2:	6943      	ldr	r3, [r0, #20]
   122b4:	6880      	ldr	r0, [r0, #8]
   122b6:	7c19      	ldrb	r1, [r3, #16]
   122b8:	f7fb bc26 	b.w	db08 <cosem_setEnum>
}
   122bc:	f44f 7081 	mov.w	r0, #258	; 0x102
   122c0:	4770      	bx	lr

000122c2 <cosem_getPushSetup>:
{
   122c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if (e->index == 2)
   122c4:	7e01      	ldrb	r1, [r0, #24]
    gxPushSetup* object = (gxPushSetup*)e->target;
   122c6:	6944      	ldr	r4, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
   122c8:	6887      	ldr	r7, [r0, #8]
    if (e->index == 2)
   122ca:	2902      	cmp	r1, #2
   122cc:	d13f      	bne.n	1234e <cosem_getPushSetup+0x8c>
        if ((ret = cosem_setArray(data, object->pushObjectList.size)) == 0)
   122ce:	8ae1      	ldrh	r1, [r4, #22]
   122d0:	4638      	mov	r0, r7
   122d2:	f7fb fc0b 	bl	daec <cosem_setArray>
   122d6:	2800      	cmp	r0, #0
   122d8:	d035      	beq.n	12346 <cosem_getPushSetup+0x84>
}
   122da:	b003      	add	sp, #12
   122dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
                if ((ret = arr_getByIndex(&object->pushObjectList, pos, (void**)&it)) != 0 ||
   122de:	aa01      	add	r2, sp, #4
   122e0:	4630      	mov	r0, r6
   122e2:	f7fe f850 	bl	10386 <arr_getByIndex>
   122e6:	2800      	cmp	r0, #0
   122e8:	d1f7      	bne.n	122da <cosem_getPushSetup+0x18>
                    (ret = cosem_setStructure(data, 4)) != 0 ||
   122ea:	2104      	movs	r1, #4
   122ec:	4638      	mov	r0, r7
   122ee:	f7fb fbef 	bl	dad0 <cosem_setStructure>
                if ((ret = arr_getByIndex(&object->pushObjectList, pos, (void**)&it)) != 0 ||
   122f2:	2800      	cmp	r0, #0
   122f4:	d1f1      	bne.n	122da <cosem_getPushSetup+0x18>
                    (ret = cosem_setUInt16(data, ((gxObject*)it->key)->objectType)) != 0 ||
   122f6:	9b01      	ldr	r3, [sp, #4]
   122f8:	681b      	ldr	r3, [r3, #0]
   122fa:	4638      	mov	r0, r7
   122fc:	8819      	ldrh	r1, [r3, #0]
   122fe:	f7fb fb9a 	bl	da36 <cosem_setUInt16>
                    (ret = cosem_setStructure(data, 4)) != 0 ||
   12302:	2800      	cmp	r0, #0
   12304:	d1e9      	bne.n	122da <cosem_getPushSetup+0x18>
                    (ret = cosem_setOctetString2(data, ((gxObject*)it->key)->logicalName, 6)) != 0 ||
   12306:	9b01      	ldr	r3, [sp, #4]
   12308:	6819      	ldr	r1, [r3, #0]
   1230a:	2206      	movs	r2, #6
   1230c:	4411      	add	r1, r2
   1230e:	4638      	mov	r0, r7
   12310:	f7fb fb62 	bl	d9d8 <cosem_setOctetString2>
                    (ret = cosem_setUInt16(data, ((gxObject*)it->key)->objectType)) != 0 ||
   12314:	2800      	cmp	r0, #0
   12316:	d1e0      	bne.n	122da <cosem_getPushSetup+0x18>
                    (ret = cosem_setInt8(data, ((gxTarget*)it->value)->attributeIndex)) != 0 ||
   12318:	9b01      	ldr	r3, [sp, #4]
   1231a:	685b      	ldr	r3, [r3, #4]
   1231c:	4638      	mov	r0, r7
   1231e:	7819      	ldrb	r1, [r3, #0]
   12320:	f7fb fba5 	bl	da6e <cosem_setInt8>
                    (ret = cosem_setOctetString2(data, ((gxObject*)it->key)->logicalName, 6)) != 0 ||
   12324:	2800      	cmp	r0, #0
   12326:	d1d8      	bne.n	122da <cosem_getPushSetup+0x18>
                    (ret = cosem_setUInt16(data, ((gxTarget*)it->value)->dataIndex)) != 0)
   12328:	9b01      	ldr	r3, [sp, #4]
   1232a:	685b      	ldr	r3, [r3, #4]
   1232c:	4638      	mov	r0, r7
   1232e:	8859      	ldrh	r1, [r3, #2]
   12330:	f7fb fb81 	bl	da36 <cosem_setUInt16>
   12334:	3501      	adds	r5, #1
                    (ret = cosem_setInt8(data, ((gxTarget*)it->value)->attributeIndex)) != 0 ||
   12336:	2800      	cmp	r0, #0
   12338:	d1cf      	bne.n	122da <cosem_getPushSetup+0x18>
            for (pos = 0; pos != object->pushObjectList.size; ++pos)
   1233a:	8ae3      	ldrh	r3, [r4, #22]
   1233c:	b2a9      	uxth	r1, r5
   1233e:	428b      	cmp	r3, r1
   12340:	d1cd      	bne.n	122de <cosem_getPushSetup+0x1c>
   12342:	2000      	movs	r0, #0
   12344:	e7c9      	b.n	122da <cosem_getPushSetup+0x18>
   12346:	4605      	mov	r5, r0
                if ((ret = arr_getByIndex(&object->pushObjectList, pos, (void**)&it)) != 0 ||
   12348:	f104 0610 	add.w	r6, r4, #16
   1234c:	e7f5      	b.n	1233a <cosem_getPushSetup+0x78>
    else if (e->index == 3)
   1234e:	2903      	cmp	r1, #3
   12350:	d117      	bne.n	12382 <cosem_getPushSetup+0xc0>
        if ((ret = cosem_setStructure(data, 3)) != 0 ||
   12352:	4638      	mov	r0, r7
   12354:	f7fb fbbc 	bl	dad0 <cosem_setStructure>
   12358:	2800      	cmp	r0, #0
   1235a:	d1be      	bne.n	122da <cosem_getPushSetup+0x18>
            (ret = cosem_setEnum(data, object->service)) != 0 ||
   1235c:	7f21      	ldrb	r1, [r4, #28]
   1235e:	4638      	mov	r0, r7
   12360:	f7fb fbd2 	bl	db08 <cosem_setEnum>
        if ((ret = cosem_setStructure(data, 3)) != 0 ||
   12364:	2800      	cmp	r0, #0
   12366:	d1b8      	bne.n	122da <cosem_getPushSetup+0x18>
            (ret = cosem_setOctetString(data, &object->destination)) != 0 ||
   12368:	f104 0120 	add.w	r1, r4, #32
   1236c:	4638      	mov	r0, r7
   1236e:	f7fb fae6 	bl	d93e <cosem_setOctetString>
            (ret = cosem_setEnum(data, object->service)) != 0 ||
   12372:	2800      	cmp	r0, #0
   12374:	d1b1      	bne.n	122da <cosem_getPushSetup+0x18>
            (ret = cosem_setEnum(data, object->message)) != 0)
   12376:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
   1237a:	4638      	mov	r0, r7
   1237c:	f7fb fbc4 	bl	db08 <cosem_setEnum>
   12380:	e7ab      	b.n	122da <cosem_getPushSetup+0x18>
    else if (e->index == 4)
   12382:	2904      	cmp	r1, #4
   12384:	d129      	bne.n	123da <cosem_getPushSetup+0x118>
        if ((ret = cosem_setArray(data, object->communicationWindow.size)) == 0)
   12386:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
   12388:	4638      	mov	r0, r7
   1238a:	f7fb fbaf 	bl	daec <cosem_setArray>
   1238e:	2800      	cmp	r0, #0
   12390:	d1a3      	bne.n	122da <cosem_getPushSetup+0x18>
   12392:	4605      	mov	r5, r0
                if ((ret = arr_getByIndex(&object->communicationWindow, pos, (void**)&it)) != 0 ||
   12394:	f104 0630 	add.w	r6, r4, #48	; 0x30
   12398:	e01a      	b.n	123d0 <cosem_getPushSetup+0x10e>
   1239a:	aa01      	add	r2, sp, #4
   1239c:	4630      	mov	r0, r6
   1239e:	f7fd fff2 	bl	10386 <arr_getByIndex>
   123a2:	2800      	cmp	r0, #0
   123a4:	d199      	bne.n	122da <cosem_getPushSetup+0x18>
                    (ret = cosem_setStructure(data, 2)) != 0 ||
   123a6:	2102      	movs	r1, #2
   123a8:	4638      	mov	r0, r7
   123aa:	f7fb fb91 	bl	dad0 <cosem_setStructure>
                if ((ret = arr_getByIndex(&object->communicationWindow, pos, (void**)&it)) != 0 ||
   123ae:	2800      	cmp	r0, #0
   123b0:	d193      	bne.n	122da <cosem_getPushSetup+0x18>
                    (ret = cosem_setDateTimeAsOctetString(data, (gxtime*)it->key)) != 0 ||
   123b2:	9b01      	ldr	r3, [sp, #4]
   123b4:	4638      	mov	r0, r7
   123b6:	6819      	ldr	r1, [r3, #0]
   123b8:	f7fb fa3c 	bl	d834 <cosem_setDateTimeAsOctetString>
                    (ret = cosem_setStructure(data, 2)) != 0 ||
   123bc:	2800      	cmp	r0, #0
   123be:	d18c      	bne.n	122da <cosem_getPushSetup+0x18>
                    (ret = cosem_setDateTimeAsOctetString(data, (gxtime*)it->value)) != 0)
   123c0:	9b01      	ldr	r3, [sp, #4]
   123c2:	4638      	mov	r0, r7
   123c4:	6859      	ldr	r1, [r3, #4]
   123c6:	f7fb fa35 	bl	d834 <cosem_setDateTimeAsOctetString>
   123ca:	3501      	adds	r5, #1
                    (ret = cosem_setDateTimeAsOctetString(data, (gxtime*)it->key)) != 0 ||
   123cc:	2800      	cmp	r0, #0
   123ce:	d184      	bne.n	122da <cosem_getPushSetup+0x18>
            for (pos = 0; pos != object->communicationWindow.size; ++pos)
   123d0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   123d2:	b2a9      	uxth	r1, r5
   123d4:	428b      	cmp	r3, r1
   123d6:	d1e0      	bne.n	1239a <cosem_getPushSetup+0xd8>
   123d8:	e7b3      	b.n	12342 <cosem_getPushSetup+0x80>
    else if (e->index == 5)
   123da:	2905      	cmp	r1, #5
   123dc:	d104      	bne.n	123e8 <cosem_getPushSetup+0x126>
        ret = cosem_setUInt16(e->value.byteArr, object->randomisationStartInterval);
   123de:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
        ret = cosem_setUInt16(e->value.byteArr, object->repetitionDelay);
   123e0:	4638      	mov	r0, r7
   123e2:	f7fb fb28 	bl	da36 <cosem_setUInt16>
   123e6:	e778      	b.n	122da <cosem_getPushSetup+0x18>
    else if (e->index == 6)
   123e8:	2906      	cmp	r1, #6
   123ea:	d105      	bne.n	123f8 <cosem_getPushSetup+0x136>
        ret = cosem_setUInt8(e->value.byteArr, object->numberOfRetries);
   123ec:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
   123f0:	4638      	mov	r0, r7
   123f2:	f7fb fb12 	bl	da1a <cosem_setUInt8>
   123f6:	e770      	b.n	122da <cosem_getPushSetup+0x18>
    else if (e->index == 7)
   123f8:	2907      	cmp	r1, #7
   123fa:	d102      	bne.n	12402 <cosem_getPushSetup+0x140>
        ret = cosem_setUInt16(e->value.byteArr, object->repetitionDelay);
   123fc:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
   12400:	e7ee      	b.n	123e0 <cosem_getPushSetup+0x11e>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   12402:	f44f 7081 	mov.w	r0, #258	; 0x102
    return ret;
   12406:	e768      	b.n	122da <cosem_getPushSetup+0x18>

00012408 <cosem_getZigbeeNetworkControl>:
{
   12408:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if (e->index == 2)
   1240c:	7e03      	ldrb	r3, [r0, #24]
    gxZigBeeNetworkControl* object = (gxZigBeeNetworkControl*)e->target;
   1240e:	6946      	ldr	r6, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
   12410:	6885      	ldr	r5, [r0, #8]
    if (e->index == 2)
   12412:	2b02      	cmp	r3, #2
   12414:	d105      	bne.n	12422 <cosem_getZigbeeNetworkControl+0x1a>
        ret = cosem_setUInt8(e->value.byteArr, object->enableDisableJoining);
   12416:	7c31      	ldrb	r1, [r6, #16]
   12418:	4628      	mov	r0, r5
   1241a:	f7fb fafe 	bl	da1a <cosem_setUInt8>
                (ret = cosem_setUInt8(data, it->stackVersion)) != 0)
   1241e:	4604      	mov	r4, r0
   12420:	e016      	b.n	12450 <cosem_getZigbeeNetworkControl+0x48>
    else if (e->index == 3)
   12422:	2b03      	cmp	r3, #3
   12424:	d104      	bne.n	12430 <cosem_getZigbeeNetworkControl+0x28>
        ret = cosem_setUInt16(e->value.byteArr, object->joinTimeout);
   12426:	8a71      	ldrh	r1, [r6, #18]
   12428:	4628      	mov	r0, r5
   1242a:	f7fb fb04 	bl	da36 <cosem_setUInt16>
   1242e:	e7f6      	b.n	1241e <cosem_getZigbeeNetworkControl+0x16>
    else if (e->index == 4)
   12430:	2b04      	cmp	r3, #4
   12432:	f040 8088 	bne.w	12546 <cosem_getZigbeeNetworkControl+0x13e>
        if ((ret = cosem_setArray(data, object->activeDevices.size)) != 0)
   12436:	8b71      	ldrh	r1, [r6, #26]
   12438:	4628      	mov	r0, r5
   1243a:	f7fb fb57 	bl	daec <cosem_setArray>
   1243e:	4604      	mov	r4, r0
   12440:	b930      	cbnz	r0, 12450 <cosem_getZigbeeNetworkControl+0x48>
   12442:	4607      	mov	r7, r0
            if ((ret = arr_getByIndex(&object->activeDevices, pos, (void**)&it)) != 0 ||
   12444:	f106 0814 	add.w	r8, r6, #20
        for (pos = 0; pos != object->activeDevices.size; ++pos)
   12448:	8b73      	ldrh	r3, [r6, #26]
   1244a:	b2b9      	uxth	r1, r7
   1244c:	428b      	cmp	r3, r1
   1244e:	d103      	bne.n	12458 <cosem_getZigbeeNetworkControl+0x50>
}
   12450:	4620      	mov	r0, r4
   12452:	b002      	add	sp, #8
   12454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if ((ret = arr_getByIndex(&object->activeDevices, pos, (void**)&it)) != 0 ||
   12458:	aa01      	add	r2, sp, #4
   1245a:	4640      	mov	r0, r8
   1245c:	f7fd ff93 	bl	10386 <arr_getByIndex>
   12460:	2800      	cmp	r0, #0
   12462:	d1dc      	bne.n	1241e <cosem_getZigbeeNetworkControl+0x16>
                (ret = cosem_setStructure(data, 14)) != 0 ||
   12464:	210e      	movs	r1, #14
   12466:	4628      	mov	r0, r5
   12468:	f7fb fb32 	bl	dad0 <cosem_setStructure>
            if ((ret = arr_getByIndex(&object->activeDevices, pos, (void**)&it)) != 0 ||
   1246c:	2800      	cmp	r0, #0
   1246e:	d1d6      	bne.n	1241e <cosem_getZigbeeNetworkControl+0x16>
                (ret = cosem_setOctetString(data, &it->macAddress)) != 0 ||
   12470:	9901      	ldr	r1, [sp, #4]
   12472:	4628      	mov	r0, r5
   12474:	f7fb fa63 	bl	d93e <cosem_setOctetString>
                (ret = cosem_setStructure(data, 14)) != 0 ||
   12478:	2800      	cmp	r0, #0
   1247a:	d1d0      	bne.n	1241e <cosem_getZigbeeNetworkControl+0x16>
                (ret = cosem_setBitString(data, it->status, 5)) != 0 ||
   1247c:	9b01      	ldr	r3, [sp, #4]
   1247e:	2205      	movs	r2, #5
   12480:	7b19      	ldrb	r1, [r3, #12]
   12482:	4628      	mov	r0, r5
   12484:	f7fb f9fc 	bl	d880 <cosem_setBitString>
                (ret = cosem_setOctetString(data, &it->macAddress)) != 0 ||
   12488:	2800      	cmp	r0, #0
   1248a:	d1c8      	bne.n	1241e <cosem_getZigbeeNetworkControl+0x16>
                (ret = cosem_setInt8(data, it->maxRSSI)) != 0 ||
   1248c:	9b01      	ldr	r3, [sp, #4]
   1248e:	4628      	mov	r0, r5
   12490:	7b59      	ldrb	r1, [r3, #13]
   12492:	f7fb faec 	bl	da6e <cosem_setInt8>
                (ret = cosem_setBitString(data, it->status, 5)) != 0 ||
   12496:	2800      	cmp	r0, #0
   12498:	d1c1      	bne.n	1241e <cosem_getZigbeeNetworkControl+0x16>
                (ret = cosem_setInt8(data, it->averageRSSI)) != 0 ||
   1249a:	9b01      	ldr	r3, [sp, #4]
   1249c:	4628      	mov	r0, r5
   1249e:	7b99      	ldrb	r1, [r3, #14]
   124a0:	f7fb fae5 	bl	da6e <cosem_setInt8>
                (ret = cosem_setInt8(data, it->maxRSSI)) != 0 ||
   124a4:	2800      	cmp	r0, #0
   124a6:	d1ba      	bne.n	1241e <cosem_getZigbeeNetworkControl+0x16>
                (ret = cosem_setInt8(data, it->minRSSI)) != 0 ||
   124a8:	9b01      	ldr	r3, [sp, #4]
   124aa:	4628      	mov	r0, r5
   124ac:	7bd9      	ldrb	r1, [r3, #15]
   124ae:	f7fb fade 	bl	da6e <cosem_setInt8>
                (ret = cosem_setInt8(data, it->averageRSSI)) != 0 ||
   124b2:	2800      	cmp	r0, #0
   124b4:	d1b3      	bne.n	1241e <cosem_getZigbeeNetworkControl+0x16>
                (ret = cosem_setUInt8(data, it->maxLQI)) != 0 ||
   124b6:	9b01      	ldr	r3, [sp, #4]
   124b8:	4628      	mov	r0, r5
   124ba:	7c19      	ldrb	r1, [r3, #16]
   124bc:	f7fb faad 	bl	da1a <cosem_setUInt8>
                (ret = cosem_setInt8(data, it->minRSSI)) != 0 ||
   124c0:	2800      	cmp	r0, #0
   124c2:	d1ac      	bne.n	1241e <cosem_getZigbeeNetworkControl+0x16>
                (ret = cosem_setUInt8(data, it->averageLQI)) != 0 ||
   124c4:	9b01      	ldr	r3, [sp, #4]
   124c6:	4628      	mov	r0, r5
   124c8:	7c59      	ldrb	r1, [r3, #17]
   124ca:	f7fb faa6 	bl	da1a <cosem_setUInt8>
                (ret = cosem_setUInt8(data, it->maxLQI)) != 0 ||
   124ce:	2800      	cmp	r0, #0
   124d0:	d1a5      	bne.n	1241e <cosem_getZigbeeNetworkControl+0x16>
                (ret = cosem_setUInt8(data, it->minLQI)) != 0 ||
   124d2:	9b01      	ldr	r3, [sp, #4]
   124d4:	4628      	mov	r0, r5
   124d6:	7c99      	ldrb	r1, [r3, #18]
   124d8:	f7fb fa9f 	bl	da1a <cosem_setUInt8>
                (ret = cosem_setUInt8(data, it->averageLQI)) != 0 ||
   124dc:	2800      	cmp	r0, #0
   124de:	d19e      	bne.n	1241e <cosem_getZigbeeNetworkControl+0x16>
                (ret = cosem_setDateTimeAsOctetString(data, &it->lastCommunicationDateTime)) != 0 ||
   124e0:	9901      	ldr	r1, [sp, #4]
   124e2:	4628      	mov	r0, r5
   124e4:	3114      	adds	r1, #20
   124e6:	f7fb f9a5 	bl	d834 <cosem_setDateTimeAsOctetString>
                (ret = cosem_setUInt8(data, it->minLQI)) != 0 ||
   124ea:	2800      	cmp	r0, #0
   124ec:	d197      	bne.n	1241e <cosem_getZigbeeNetworkControl+0x16>
                (ret = cosem_setUInt8(data, it->numberOfHops)) != 0 ||
   124ee:	9b01      	ldr	r3, [sp, #4]
   124f0:	4628      	mov	r0, r5
   124f2:	f893 1020 	ldrb.w	r1, [r3, #32]
   124f6:	f7fb fa90 	bl	da1a <cosem_setUInt8>
                (ret = cosem_setDateTimeAsOctetString(data, &it->lastCommunicationDateTime)) != 0 ||
   124fa:	2800      	cmp	r0, #0
   124fc:	d18f      	bne.n	1241e <cosem_getZigbeeNetworkControl+0x16>
                (ret = cosem_setUInt8(data, it->transmissionFailures)) != 0 ||
   124fe:	9b01      	ldr	r3, [sp, #4]
   12500:	4628      	mov	r0, r5
   12502:	f893 1021 	ldrb.w	r1, [r3, #33]	; 0x21
   12506:	f7fb fa88 	bl	da1a <cosem_setUInt8>
                (ret = cosem_setUInt8(data, it->numberOfHops)) != 0 ||
   1250a:	2800      	cmp	r0, #0
   1250c:	d187      	bne.n	1241e <cosem_getZigbeeNetworkControl+0x16>
                (ret = cosem_setUInt8(data, it->transmissionSuccesses)) != 0 ||
   1250e:	9b01      	ldr	r3, [sp, #4]
   12510:	4628      	mov	r0, r5
   12512:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
   12516:	f7fb fa80 	bl	da1a <cosem_setUInt8>
                (ret = cosem_setUInt8(data, it->transmissionFailures)) != 0 ||
   1251a:	2800      	cmp	r0, #0
   1251c:	f47f af7f 	bne.w	1241e <cosem_getZigbeeNetworkControl+0x16>
                (ret = cosem_setUInt8(data, it->applicationVersion)) != 0 ||
   12520:	9b01      	ldr	r3, [sp, #4]
   12522:	4628      	mov	r0, r5
   12524:	f893 1023 	ldrb.w	r1, [r3, #35]	; 0x23
   12528:	f7fb fa77 	bl	da1a <cosem_setUInt8>
                (ret = cosem_setUInt8(data, it->transmissionSuccesses)) != 0 ||
   1252c:	2800      	cmp	r0, #0
   1252e:	f47f af76 	bne.w	1241e <cosem_getZigbeeNetworkControl+0x16>
                (ret = cosem_setUInt8(data, it->stackVersion)) != 0)
   12532:	9b01      	ldr	r3, [sp, #4]
   12534:	4628      	mov	r0, r5
   12536:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
   1253a:	f7fb fa6e 	bl	da1a <cosem_setUInt8>
   1253e:	3701      	adds	r7, #1
                (ret = cosem_setUInt8(data, it->applicationVersion)) != 0 ||
   12540:	2800      	cmp	r0, #0
   12542:	d081      	beq.n	12448 <cosem_getZigbeeNetworkControl+0x40>
   12544:	e76b      	b.n	1241e <cosem_getZigbeeNetworkControl+0x16>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   12546:	f44f 7481 	mov.w	r4, #258	; 0x102
   1254a:	e781      	b.n	12450 <cosem_getZigbeeNetworkControl+0x48>

0001254c <getUnitCharge>:
{
   1254c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    gxByteBuffer* data = e->value.byteArr;
   12550:	688d      	ldr	r5, [r1, #8]
{
   12552:	4606      	mov	r6, r0
    if ((ret = cosem_setStructure(data, 3)) != 0 ||
   12554:	2103      	movs	r1, #3
   12556:	4628      	mov	r0, r5
   12558:	f7fb faba 	bl	dad0 <cosem_setStructure>
   1255c:	4604      	mov	r4, r0
   1255e:	2800      	cmp	r0, #0
   12560:	d13c      	bne.n	125dc <getUnitCharge+0x90>
        (ret = cosem_setStructure(data, 2)) != 0 ||
   12562:	2102      	movs	r1, #2
   12564:	4628      	mov	r0, r5
   12566:	f7fb fab3 	bl	dad0 <cosem_setStructure>
    if ((ret = cosem_setStructure(data, 3)) != 0 ||
   1256a:	4604      	mov	r4, r0
   1256c:	bbb0      	cbnz	r0, 125dc <getUnitCharge+0x90>
        (ret = cosem_setInt8(data, target->chargePerUnitScaling.commodityScale)) != 0 ||
   1256e:	7831      	ldrb	r1, [r6, #0]
   12570:	4628      	mov	r0, r5
   12572:	f7fb fa7c 	bl	da6e <cosem_setInt8>
        (ret = cosem_setStructure(data, 2)) != 0 ||
   12576:	4604      	mov	r4, r0
   12578:	bb80      	cbnz	r0, 125dc <getUnitCharge+0x90>
        (ret = cosem_setInt8(data, target->chargePerUnitScaling.priceScale)) != 0 ||
   1257a:	7871      	ldrb	r1, [r6, #1]
   1257c:	4628      	mov	r0, r5
   1257e:	f7fb fa76 	bl	da6e <cosem_setInt8>
        (ret = cosem_setInt8(data, target->chargePerUnitScaling.commodityScale)) != 0 ||
   12582:	4604      	mov	r4, r0
   12584:	bb50      	cbnz	r0, 125dc <getUnitCharge+0x90>
        (ret = cosem_setStructure(data, 3)) != 0 ||
   12586:	2103      	movs	r1, #3
   12588:	4628      	mov	r0, r5
   1258a:	f7fb faa1 	bl	dad0 <cosem_setStructure>
        (ret = cosem_setInt8(data, target->chargePerUnitScaling.priceScale)) != 0 ||
   1258e:	4604      	mov	r4, r0
   12590:	bb20      	cbnz	r0, 125dc <getUnitCharge+0x90>
        (ret = cosem_setUInt16(data, target->commodity.target == 0 ? 0 : target->commodity.target->objectType)) != 0 ||
   12592:	6871      	ldr	r1, [r6, #4]
   12594:	b101      	cbz	r1, 12598 <getUnitCharge+0x4c>
   12596:	8809      	ldrh	r1, [r1, #0]
   12598:	4628      	mov	r0, r5
   1259a:	f7fb fa4c 	bl	da36 <cosem_setUInt16>
        (ret = cosem_setStructure(data, 3)) != 0 ||
   1259e:	4604      	mov	r4, r0
   125a0:	b9e0      	cbnz	r0, 125dc <getUnitCharge+0x90>
        (ret = cosem_setOctetString2(data, obj_getLogicalName(target->commodity.target), 6)) != 0 ||
   125a2:	6870      	ldr	r0, [r6, #4]
   125a4:	f7f1 fc20 	bl	3de8 <obj_getLogicalName>
   125a8:	2206      	movs	r2, #6
   125aa:	4601      	mov	r1, r0
   125ac:	4628      	mov	r0, r5
   125ae:	f7fb fa13 	bl	d9d8 <cosem_setOctetString2>
        (ret = cosem_setUInt16(data, target->commodity.target == 0 ? 0 : target->commodity.target->objectType)) != 0 ||
   125b2:	4604      	mov	r4, r0
   125b4:	b990      	cbnz	r0, 125dc <getUnitCharge+0x90>
        (ret = cosem_setInt8(data, target->commodity.attributeIndex)) != 0 ||
   125b6:	7a31      	ldrb	r1, [r6, #8]
   125b8:	4628      	mov	r0, r5
   125ba:	f7fb fa58 	bl	da6e <cosem_setInt8>
        (ret = cosem_setOctetString2(data, obj_getLogicalName(target->commodity.target), 6)) != 0 ||
   125be:	4604      	mov	r4, r0
   125c0:	b960      	cbnz	r0, 125dc <getUnitCharge+0x90>
        (ret = cosem_setArray(data, target->chargeTables.size)) != 0)
   125c2:	8a71      	ldrh	r1, [r6, #18]
   125c4:	4628      	mov	r0, r5
   125c6:	f7fb fa91 	bl	daec <cosem_setArray>
        (ret = cosem_setInt8(data, target->commodity.attributeIndex)) != 0 ||
   125ca:	4604      	mov	r4, r0
   125cc:	b930      	cbnz	r0, 125dc <getUnitCharge+0x90>
   125ce:	4607      	mov	r7, r0
        if ((ret = arr_getByIndex(&target->chargeTables, pos, (void**)&it)) != 0 ||
   125d0:	f106 080c 	add.w	r8, r6, #12
    for (pos = 0; pos != target->chargeTables.size; ++pos)
   125d4:	8a73      	ldrh	r3, [r6, #18]
   125d6:	b2b9      	uxth	r1, r7
   125d8:	428b      	cmp	r3, r1
   125da:	d103      	bne.n	125e4 <getUnitCharge+0x98>
}
   125dc:	4620      	mov	r0, r4
   125de:	b002      	add	sp, #8
   125e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ((ret = arr_getByIndex(&target->chargeTables, pos, (void**)&it)) != 0 ||
   125e4:	aa01      	add	r2, sp, #4
   125e6:	4640      	mov	r0, r8
   125e8:	f7fd fecd 	bl	10386 <arr_getByIndex>
   125ec:	b990      	cbnz	r0, 12614 <getUnitCharge+0xc8>
            (ret = cosem_setStructure(data, 2)) != 0 ||
   125ee:	2102      	movs	r1, #2
   125f0:	4628      	mov	r0, r5
   125f2:	f7fb fa6d 	bl	dad0 <cosem_setStructure>
        if ((ret = arr_getByIndex(&target->chargeTables, pos, (void**)&it)) != 0 ||
   125f6:	b968      	cbnz	r0, 12614 <getUnitCharge+0xc8>
            (ret = cosem_setOctetString(data, &it->index)) != 0 ||
   125f8:	9901      	ldr	r1, [sp, #4]
   125fa:	4628      	mov	r0, r5
   125fc:	f7fb f99f 	bl	d93e <cosem_setOctetString>
            (ret = cosem_setStructure(data, 2)) != 0 ||
   12600:	b940      	cbnz	r0, 12614 <getUnitCharge+0xc8>
            (ret = cosem_setInt16(data, it->chargePerUnit)) != 0)
   12602:	9b01      	ldr	r3, [sp, #4]
   12604:	4628      	mov	r0, r5
   12606:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
   1260a:	f7fb fa3e 	bl	da8a <cosem_setInt16>
   1260e:	3701      	adds	r7, #1
            (ret = cosem_setOctetString(data, &it->index)) != 0 ||
   12610:	2800      	cmp	r0, #0
   12612:	d0df      	beq.n	125d4 <getUnitCharge+0x88>
            (ret = cosem_setInt16(data, it->chargePerUnit)) != 0)
   12614:	4604      	mov	r4, r0
   12616:	e7e1      	b.n	125dc <getUnitCharge+0x90>

00012618 <cosem_getCharge>:
    if (e->index == 2)
   12618:	7e02      	ldrb	r2, [r0, #24]
    gxCharge* object = (gxCharge*)e->target;
   1261a:	6943      	ldr	r3, [r0, #20]
    if (e->index == 2)
   1261c:	2a02      	cmp	r2, #2
   1261e:	d103      	bne.n	12628 <cosem_getCharge+0x10>
        ret = cosem_setInt32(e->value.byteArr, object->totalAmountPaid);
   12620:	6919      	ldr	r1, [r3, #16]
        ret = cosem_setInt32(e->value.byteArr, object->lastCollectionAmount);
   12622:	6880      	ldr	r0, [r0, #8]
   12624:	f7fb ba3f 	b.w	daa6 <cosem_setInt32>
    else if (e->index == 3)
   12628:	2a03      	cmp	r2, #3
   1262a:	d103      	bne.n	12634 <cosem_getCharge+0x1c>
        ret = cosem_setEnum(e->value.byteArr, object->chargeType);
   1262c:	7d19      	ldrb	r1, [r3, #20]
   1262e:	6880      	ldr	r0, [r0, #8]
   12630:	f7fb ba6a 	b.w	db08 <cosem_setEnum>
    else if (e->index == 4)
   12634:	2a04      	cmp	r2, #4
   12636:	d103      	bne.n	12640 <cosem_getCharge+0x28>
        ret = cosem_setUInt8(e->value.byteArr, object->priority);
   12638:	7d59      	ldrb	r1, [r3, #21]
   1263a:	6880      	ldr	r0, [r0, #8]
   1263c:	f7fb b9ed 	b.w	da1a <cosem_setUInt8>
    else if (e->index == 5)
   12640:	2a05      	cmp	r2, #5
   12642:	d104      	bne.n	1264e <cosem_getCharge+0x36>
        ret = getUnitCharge(&object->unitChargeActive, e);
   12644:	4601      	mov	r1, r0
   12646:	f103 0018 	add.w	r0, r3, #24
        ret = getUnitCharge(&object->unitChargePassive, e);
   1264a:	f7ff bf7f 	b.w	1254c <getUnitCharge>
    else if (e->index == 6)
   1264e:	2a06      	cmp	r2, #6
   12650:	d103      	bne.n	1265a <cosem_getCharge+0x42>
        ret = getUnitCharge(&object->unitChargePassive, e);
   12652:	4601      	mov	r1, r0
   12654:	f103 0030 	add.w	r0, r3, #48	; 0x30
   12658:	e7f7      	b.n	1264a <cosem_getCharge+0x32>
    else if (e->index == 7)
   1265a:	2a07      	cmp	r2, #7
   1265c:	d104      	bne.n	12668 <cosem_getCharge+0x50>
        ret = cosem_setDateTimeAsOctetString(e->value.byteArr, &object->unitChargeActivationTime);
   1265e:	6880      	ldr	r0, [r0, #8]
   12660:	f103 0148 	add.w	r1, r3, #72	; 0x48
   12664:	f7fb b8e6 	b.w	d834 <cosem_setDateTimeAsOctetString>
    else if (e->index == 8)
   12668:	2a08      	cmp	r2, #8
   1266a:	d103      	bne.n	12674 <cosem_getCharge+0x5c>
        ret = cosem_setUInt32(e->value.byteArr, object->period);
   1266c:	6d59      	ldr	r1, [r3, #84]	; 0x54
   1266e:	6880      	ldr	r0, [r0, #8]
   12670:	f7fb b9ef 	b.w	da52 <cosem_setUInt32>
    else if (e->index == 9)
   12674:	2a09      	cmp	r2, #9
   12676:	d105      	bne.n	12684 <cosem_getCharge+0x6c>
        ret = cosem_setBitString(e->value.byteArr, object->chargeConfiguration, 2);
   12678:	f893 1058 	ldrb.w	r1, [r3, #88]	; 0x58
   1267c:	6880      	ldr	r0, [r0, #8]
   1267e:	2202      	movs	r2, #2
   12680:	f7fb b8fe 	b.w	d880 <cosem_setBitString>
    else if (e->index == 10)
   12684:	2a0a      	cmp	r2, #10
   12686:	d104      	bne.n	12692 <cosem_getCharge+0x7a>
        ret = cosem_setDateTime(e->value.byteArr, &object->lastCollectionTime);
   12688:	6880      	ldr	r0, [r0, #8]
   1268a:	f103 015c 	add.w	r1, r3, #92	; 0x5c
   1268e:	f7fb b995 	b.w	d9bc <cosem_setDateTime>
    else if (e->index == 11)
   12692:	2a0b      	cmp	r2, #11
   12694:	d101      	bne.n	1269a <cosem_getCharge+0x82>
        ret = cosem_setInt32(e->value.byteArr, object->lastCollectionAmount);
   12696:	6e99      	ldr	r1, [r3, #104]	; 0x68
   12698:	e7c3      	b.n	12622 <cosem_getCharge+0xa>
    else if (e->index == 12)
   1269a:	2a0c      	cmp	r2, #12
   1269c:	d101      	bne.n	126a2 <cosem_getCharge+0x8a>
        ret = cosem_setInt32(e->value.byteArr, object->totalAmountRemaining);
   1269e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
   126a0:	e7bf      	b.n	12622 <cosem_getCharge+0xa>
    else if (e->index == 13)
   126a2:	2a0d      	cmp	r2, #13
   126a4:	d104      	bne.n	126b0 <cosem_getCharge+0x98>
        ret = cosem_setUInt16(e->value.byteArr, object->proportion);
   126a6:	f8b3 1070 	ldrh.w	r1, [r3, #112]	; 0x70
   126aa:	6880      	ldr	r0, [r0, #8]
   126ac:	f7fb b9c3 	b.w	da36 <cosem_setUInt16>
}
   126b0:	f44f 7081 	mov.w	r0, #258	; 0x102
   126b4:	4770      	bx	lr

000126b6 <cosem_getTokenGateway>:
{
   126b6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   126ba:	7e03      	ldrb	r3, [r0, #24]
    gxByteBuffer* data = e->value.byteArr;
   126bc:	6886      	ldr	r6, [r0, #8]
    gxTokenGateway* object = (gxTokenGateway*)e->target;
   126be:	6945      	ldr	r5, [r0, #20]
    switch (e->index)
   126c0:	3b02      	subs	r3, #2
   126c2:	2b04      	cmp	r3, #4
   126c4:	d860      	bhi.n	12788 <cosem_getTokenGateway+0xd2>
   126c6:	e8df f003 	tbb	[pc, r3]
   126ca:	0a03      	.short	0x0a03
   126cc:	3210      	.short	0x3210
   126ce:	38          	.byte	0x38
   126cf:	00          	.byte	0x00
        ret = cosem_setOctetString2(data, object->token.data, (uint16_t)object->token.size);
   126d0:	8aea      	ldrh	r2, [r5, #22]
   126d2:	6929      	ldr	r1, [r5, #16]
   126d4:	4630      	mov	r0, r6
   126d6:	f7fb f97f 	bl	d9d8 <cosem_setOctetString2>
                    (ret = cosem_setOctetString(data, it)) != 0)
   126da:	4604      	mov	r4, r0
    return ret;
   126dc:	e00b      	b.n	126f6 <cosem_getTokenGateway+0x40>
        ret = cosem_setDateTimeAsOctetString(data, &object->time);
   126de:	f105 011c 	add.w	r1, r5, #28
   126e2:	4630      	mov	r0, r6
   126e4:	f7fb f8a6 	bl	d834 <cosem_setDateTimeAsOctetString>
   126e8:	e7f7      	b.n	126da <cosem_getTokenGateway+0x24>
        if ((ret = cosem_setArray(data, object->descriptions.size)) == 0)
   126ea:	8de9      	ldrh	r1, [r5, #46]	; 0x2e
   126ec:	4630      	mov	r0, r6
   126ee:	f7fb f9fd 	bl	daec <cosem_setArray>
   126f2:	4604      	mov	r4, r0
   126f4:	b1b8      	cbz	r0, 12726 <cosem_getTokenGateway+0x70>
}
   126f6:	4620      	mov	r0, r4
   126f8:	b002      	add	sp, #8
   126fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if ((ret = arr_getByIndex(&object->descriptions, pos, (void**)&it)) != 0 ||
   126fe:	aa01      	add	r2, sp, #4
   12700:	4638      	mov	r0, r7
   12702:	f7fd fe40 	bl	10386 <arr_getByIndex>
   12706:	2800      	cmp	r0, #0
   12708:	d1e7      	bne.n	126da <cosem_getTokenGateway+0x24>
                    (ret = cosem_setOctetString(data, it)) != 0)
   1270a:	9901      	ldr	r1, [sp, #4]
   1270c:	4630      	mov	r0, r6
   1270e:	f7fb f916 	bl	d93e <cosem_setOctetString>
   12712:	f108 0801 	add.w	r8, r8, #1
                if ((ret = arr_getByIndex(&object->descriptions, pos, (void**)&it)) != 0 ||
   12716:	2800      	cmp	r0, #0
   12718:	d1df      	bne.n	126da <cosem_getTokenGateway+0x24>
            for (pos = 0; pos != object->descriptions.size; ++pos)
   1271a:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
   1271c:	fa1f f188 	uxth.w	r1, r8
   12720:	428b      	cmp	r3, r1
   12722:	d1ec      	bne.n	126fe <cosem_getTokenGateway+0x48>
   12724:	e7e7      	b.n	126f6 <cosem_getTokenGateway+0x40>
   12726:	4680      	mov	r8, r0
                if ((ret = arr_getByIndex(&object->descriptions, pos, (void**)&it)) != 0 ||
   12728:	f105 0728 	add.w	r7, r5, #40	; 0x28
   1272c:	e7f5      	b.n	1271a <cosem_getTokenGateway+0x64>
        ret = cosem_setEnum(e->value.byteArr, object->deliveryMethod);
   1272e:	f895 1034 	ldrb.w	r1, [r5, #52]	; 0x34
   12732:	4630      	mov	r0, r6
   12734:	f7fb f9e8 	bl	db08 <cosem_setEnum>
   12738:	e7cf      	b.n	126da <cosem_getTokenGateway+0x24>
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   1273a:	2102      	movs	r1, #2
   1273c:	4630      	mov	r0, r6
   1273e:	f7fb f9c7 	bl	dad0 <cosem_setStructure>
   12742:	4604      	mov	r4, r0
   12744:	2800      	cmp	r0, #0
   12746:	d1d6      	bne.n	126f6 <cosem_getTokenGateway+0x40>
            (ret = cosem_setEnum(data, object->status)) != 0 ||
   12748:	f895 1035 	ldrb.w	r1, [r5, #53]	; 0x35
   1274c:	4630      	mov	r0, r6
   1274e:	f7fb f9db 	bl	db08 <cosem_setEnum>
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   12752:	4604      	mov	r4, r0
   12754:	2800      	cmp	r0, #0
   12756:	d1ce      	bne.n	126f6 <cosem_getTokenGateway+0x40>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_BIT_STRING)) != 0 ||
   12758:	2104      	movs	r1, #4
   1275a:	4630      	mov	r0, r6
   1275c:	f7fa faab 	bl	ccb6 <bb_setUInt8>
            (ret = cosem_setEnum(data, object->status)) != 0 ||
   12760:	4604      	mov	r4, r0
   12762:	2800      	cmp	r0, #0
   12764:	d1c7      	bne.n	126f6 <cosem_getTokenGateway+0x40>
            (ret = hlp_setObjectCount(object->dataValue.size, data)) != 0 ||
   12766:	8fe8      	ldrh	r0, [r5, #62]	; 0x3e
   12768:	4631      	mov	r1, r6
   1276a:	f007 f893 	bl	19894 <hlp_setObjectCount>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_BIT_STRING)) != 0 ||
   1276e:	4604      	mov	r4, r0
   12770:	2800      	cmp	r0, #0
   12772:	d1c0      	bne.n	126f6 <cosem_getTokenGateway+0x40>
            (ret = bb_set(data, object->dataValue.data, ba_getByteCount(object->dataValue.size))) != 0)
   12774:	8fe8      	ldrh	r0, [r5, #62]	; 0x3e
   12776:	6bac      	ldr	r4, [r5, #56]	; 0x38
   12778:	f7ee fdac 	bl	12d4 <ba_getByteCount>
   1277c:	4621      	mov	r1, r4
   1277e:	4602      	mov	r2, r0
   12780:	4630      	mov	r0, r6
   12782:	f7fa fb7e 	bl	ce82 <bb_set>
   12786:	e7a8      	b.n	126da <cosem_getTokenGateway+0x24>
    switch (e->index)
   12788:	f44f 7481 	mov.w	r4, #258	; 0x102
   1278c:	e7b3      	b.n	126f6 <cosem_getTokenGateway+0x40>

0001278e <cosem_getCredit>:
    if (e->index == 2)
   1278e:	7e03      	ldrb	r3, [r0, #24]
    gxCredit* object = (gxCredit*)e->target;
   12790:	6941      	ldr	r1, [r0, #20]
    if (e->index == 2)
   12792:	2b02      	cmp	r3, #2
   12794:	d103      	bne.n	1279e <cosem_getCredit+0x10>
        ret = cosem_setInt32(e->value.byteArr, object->currentCreditAmount);
   12796:	6909      	ldr	r1, [r1, #16]
        ret = cosem_setInt32(e->value.byteArr, object->warningThreshold);
   12798:	6880      	ldr	r0, [r0, #8]
   1279a:	f7fb b984 	b.w	daa6 <cosem_setInt32>
    else if (e->index == 3)
   1279e:	2b03      	cmp	r3, #3
   127a0:	d103      	bne.n	127aa <cosem_getCredit+0x1c>
        ret = cosem_setEnum(e->value.byteArr, object->type);
   127a2:	7d09      	ldrb	r1, [r1, #20]
        ret = cosem_setEnum(e->value.byteArr, object->status);
   127a4:	6880      	ldr	r0, [r0, #8]
   127a6:	f7fb b9af 	b.w	db08 <cosem_setEnum>
    else if (e->index == 4)
   127aa:	2b04      	cmp	r3, #4
   127ac:	d103      	bne.n	127b6 <cosem_getCredit+0x28>
        ret = cosem_setUInt8(e->value.byteArr, object->priority);
   127ae:	7d49      	ldrb	r1, [r1, #21]
   127b0:	6880      	ldr	r0, [r0, #8]
   127b2:	f7fb b932 	b.w	da1a <cosem_setUInt8>
    else if (e->index == 5)
   127b6:	2b05      	cmp	r3, #5
   127b8:	d101      	bne.n	127be <cosem_getCredit+0x30>
        ret = cosem_setInt32(e->value.byteArr, object->warningThreshold);
   127ba:	6989      	ldr	r1, [r1, #24]
   127bc:	e7ec      	b.n	12798 <cosem_getCredit+0xa>
    else if (e->index == 6)
   127be:	2b06      	cmp	r3, #6
   127c0:	d101      	bne.n	127c6 <cosem_getCredit+0x38>
        ret = cosem_setInt32(e->value.byteArr, object->limit);
   127c2:	69c9      	ldr	r1, [r1, #28]
   127c4:	e7e8      	b.n	12798 <cosem_getCredit+0xa>
    else if (e->index == 7)
   127c6:	2b07      	cmp	r3, #7
   127c8:	d105      	bne.n	127d6 <cosem_getCredit+0x48>
        ret = cosem_setBitString(e->value.byteArr, object->creditConfiguration, 5);
   127ca:	f891 1020 	ldrb.w	r1, [r1, #32]
   127ce:	6880      	ldr	r0, [r0, #8]
   127d0:	2205      	movs	r2, #5
   127d2:	f7fb b855 	b.w	d880 <cosem_setBitString>
    else if (e->index == 8)
   127d6:	2b08      	cmp	r3, #8
   127d8:	d102      	bne.n	127e0 <cosem_getCredit+0x52>
        ret = cosem_setEnum(e->value.byteArr, object->status);
   127da:	f891 1021 	ldrb.w	r1, [r1, #33]	; 0x21
   127de:	e7e1      	b.n	127a4 <cosem_getCredit+0x16>
    else if (e->index == 9)
   127e0:	2b09      	cmp	r3, #9
   127e2:	d101      	bne.n	127e8 <cosem_getCredit+0x5a>
        ret = cosem_setInt32(e->value.byteArr, object->presetCreditAmount);
   127e4:	6a49      	ldr	r1, [r1, #36]	; 0x24
   127e6:	e7d7      	b.n	12798 <cosem_getCredit+0xa>
    else if (e->index == 10)
   127e8:	2b0a      	cmp	r3, #10
   127ea:	d101      	bne.n	127f0 <cosem_getCredit+0x62>
        ret = cosem_setInt32(e->value.byteArr, object->creditAvailableThreshold);
   127ec:	6a89      	ldr	r1, [r1, #40]	; 0x28
   127ee:	e7d3      	b.n	12798 <cosem_getCredit+0xa>
    else if (e->index == 11)
   127f0:	2b0b      	cmp	r3, #11
   127f2:	d103      	bne.n	127fc <cosem_getCredit+0x6e>
        ret = cosem_setDateTimeAsOctetString(e->value.byteArr, &object->period);
   127f4:	6880      	ldr	r0, [r0, #8]
   127f6:	312c      	adds	r1, #44	; 0x2c
   127f8:	f7fb b81c 	b.w	d834 <cosem_setDateTimeAsOctetString>
}
   127fc:	f44f 7081 	mov.w	r0, #258	; 0x102
   12800:	4770      	bx	lr

00012802 <cosem_getAccount>:
{
   12802:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if (e->index == 2)
   12804:	7e01      	ldrb	r1, [r0, #24]
    gxAccount* object = (gxAccount*)e->target;
   12806:	6944      	ldr	r4, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
   12808:	6885      	ldr	r5, [r0, #8]
    if (e->index == 2)
   1280a:	2902      	cmp	r1, #2
   1280c:	d111      	bne.n	12832 <cosem_getAccount+0x30>
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   1280e:	4628      	mov	r0, r5
   12810:	f7fb f95e 	bl	dad0 <cosem_setStructure>
   12814:	b998      	cbnz	r0, 1283e <cosem_getAccount+0x3c>
            (ret = cosem_setEnum(data, object->paymentMode & 0x3)) != 0 ||
   12816:	7c21      	ldrb	r1, [r4, #16]
   12818:	4628      	mov	r0, r5
   1281a:	f001 0103 	and.w	r1, r1, #3
   1281e:	f7fb f973 	bl	db08 <cosem_setEnum>
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   12822:	b960      	cbnz	r0, 1283e <cosem_getAccount+0x3c>
            (ret = cosem_setEnum(data, object->accountStatus & 0x3)) != 0)
   12824:	7c61      	ldrb	r1, [r4, #17]
   12826:	f001 0103 	and.w	r1, r1, #3
            (ret = cosem_setEnum(data, object->currency.unit)) != 0)
   1282a:	4628      	mov	r0, r5
   1282c:	f7fb f96c 	bl	db08 <cosem_setEnum>
   12830:	e005      	b.n	1283e <cosem_getAccount+0x3c>
    else if (e->index == 3)
   12832:	2903      	cmp	r1, #3
   12834:	d105      	bne.n	12842 <cosem_getAccount+0x40>
        ret = cosem_setUInt8(e->value.byteArr, object->currentCreditInUse);
   12836:	7ca1      	ldrb	r1, [r4, #18]
   12838:	4628      	mov	r0, r5
   1283a:	f7fb f8ee 	bl	da1a <cosem_setUInt8>
}
   1283e:	b003      	add	sp, #12
   12840:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (e->index == 4)
   12842:	2904      	cmp	r1, #4
   12844:	d105      	bne.n	12852 <cosem_getAccount+0x50>
        ret = cosem_setBitString(e->value.byteArr, object->currentCreditStatus, 7);
   12846:	7ce1      	ldrb	r1, [r4, #19]
   12848:	2207      	movs	r2, #7
   1284a:	4628      	mov	r0, r5
   1284c:	f7fb f818 	bl	d880 <cosem_setBitString>
   12850:	e7f5      	b.n	1283e <cosem_getAccount+0x3c>
    else if (e->index == 5)
   12852:	2905      	cmp	r1, #5
   12854:	d104      	bne.n	12860 <cosem_getAccount+0x5e>
        ret = cosem_setInt32(e->value.byteArr, object->availableCredit);
   12856:	6961      	ldr	r1, [r4, #20]
        ret = cosem_setInt32(e->value.byteArr, object->maxProvisionPeriod);
   12858:	4628      	mov	r0, r5
   1285a:	f7fb f924 	bl	daa6 <cosem_setInt32>
   1285e:	e7ee      	b.n	1283e <cosem_getAccount+0x3c>
    else if (e->index == 6)
   12860:	2906      	cmp	r1, #6
   12862:	d101      	bne.n	12868 <cosem_getAccount+0x66>
        ret = cosem_setInt32(e->value.byteArr, object->amountToClear);
   12864:	69a1      	ldr	r1, [r4, #24]
   12866:	e7f7      	b.n	12858 <cosem_getAccount+0x56>
    else if (e->index == 7)
   12868:	2907      	cmp	r1, #7
   1286a:	d101      	bne.n	12870 <cosem_getAccount+0x6e>
        ret = cosem_setInt32(e->value.byteArr, object->clearanceThreshold);
   1286c:	69e1      	ldr	r1, [r4, #28]
   1286e:	e7f3      	b.n	12858 <cosem_getAccount+0x56>
    else if (e->index == 8)
   12870:	2908      	cmp	r1, #8
   12872:	d101      	bne.n	12878 <cosem_getAccount+0x76>
        ret = cosem_setInt32(e->value.byteArr, object->aggregatedDebt);
   12874:	6a21      	ldr	r1, [r4, #32]
   12876:	e7ef      	b.n	12858 <cosem_getAccount+0x56>
    else if (e->index == 9)
   12878:	2909      	cmp	r1, #9
   1287a:	d11d      	bne.n	128b8 <cosem_getAccount+0xb6>
        if ((ret = cosem_setArray(data, object->creditReferences.size)) == 0)
   1287c:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
   1287e:	4628      	mov	r0, r5
   12880:	f7fb f934 	bl	daec <cosem_setArray>
   12884:	2800      	cmp	r0, #0
   12886:	d1da      	bne.n	1283e <cosem_getAccount+0x3c>
   12888:	4606      	mov	r6, r0
                if ((ret = arr_getByIndex(&object->creditReferences, pos, (void**)&it)) != 0 ||
   1288a:	f104 0724 	add.w	r7, r4, #36	; 0x24
   1288e:	e00d      	b.n	128ac <cosem_getAccount+0xaa>
   12890:	aa01      	add	r2, sp, #4
   12892:	4638      	mov	r0, r7
   12894:	f7fd fd77 	bl	10386 <arr_getByIndex>
   12898:	2800      	cmp	r0, #0
   1289a:	d1d0      	bne.n	1283e <cosem_getAccount+0x3c>
                    (ret = cosem_setOctetString2(data, it, 6)) != 0)
   1289c:	9901      	ldr	r1, [sp, #4]
   1289e:	2206      	movs	r2, #6
   128a0:	4628      	mov	r0, r5
   128a2:	f7fb f899 	bl	d9d8 <cosem_setOctetString2>
   128a6:	3601      	adds	r6, #1
                if ((ret = arr_getByIndex(&object->creditReferences, pos, (void**)&it)) != 0 ||
   128a8:	2800      	cmp	r0, #0
   128aa:	d1c8      	bne.n	1283e <cosem_getAccount+0x3c>
            for (pos = 0; pos != object->creditReferences.size; ++pos)
   128ac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   128ae:	b2b1      	uxth	r1, r6
   128b0:	428b      	cmp	r3, r1
   128b2:	d1ed      	bne.n	12890 <cosem_getAccount+0x8e>
   128b4:	2000      	movs	r0, #0
   128b6:	e7c2      	b.n	1283e <cosem_getAccount+0x3c>
    else if (e->index == 10)
   128b8:	290a      	cmp	r1, #10
   128ba:	d11c      	bne.n	128f6 <cosem_getAccount+0xf4>
        if ((ret = cosem_setArray(data, object->chargeReferences.size)) == 0)
   128bc:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
   128be:	4628      	mov	r0, r5
   128c0:	f7fb f914 	bl	daec <cosem_setArray>
   128c4:	2800      	cmp	r0, #0
   128c6:	d1ba      	bne.n	1283e <cosem_getAccount+0x3c>
   128c8:	2600      	movs	r6, #0
                if ((ret = arr_getByIndex(&object->chargeReferences, pos, (void**)&it)) != 0 ||
   128ca:	f104 0730 	add.w	r7, r4, #48	; 0x30
   128ce:	e00d      	b.n	128ec <cosem_getAccount+0xea>
   128d0:	aa01      	add	r2, sp, #4
   128d2:	4638      	mov	r0, r7
   128d4:	f7fd fd57 	bl	10386 <arr_getByIndex>
   128d8:	2800      	cmp	r0, #0
   128da:	d1b0      	bne.n	1283e <cosem_getAccount+0x3c>
                    (ret = cosem_setOctetString2(data, it, 6)) != 0)
   128dc:	9901      	ldr	r1, [sp, #4]
   128de:	2206      	movs	r2, #6
   128e0:	4628      	mov	r0, r5
   128e2:	f7fb f879 	bl	d9d8 <cosem_setOctetString2>
   128e6:	3601      	adds	r6, #1
                if ((ret = arr_getByIndex(&object->chargeReferences, pos, (void**)&it)) != 0 ||
   128e8:	2800      	cmp	r0, #0
   128ea:	d1a8      	bne.n	1283e <cosem_getAccount+0x3c>
            for (pos = 0; pos != object->chargeReferences.size; ++pos)
   128ec:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   128ee:	b2b1      	uxth	r1, r6
   128f0:	428b      	cmp	r3, r1
   128f2:	d1ed      	bne.n	128d0 <cosem_getAccount+0xce>
   128f4:	e7de      	b.n	128b4 <cosem_getAccount+0xb2>
    else if (e->index == 11)
   128f6:	290b      	cmp	r1, #11
   128f8:	d136      	bne.n	12968 <cosem_getAccount+0x166>
        if ((ret = cosem_setArray(data, object->creditChargeConfigurations.size)) == 0)
   128fa:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
   128fe:	4628      	mov	r0, r5
   12900:	f7fb f8f4 	bl	daec <cosem_setArray>
   12904:	2800      	cmp	r0, #0
   12906:	d19a      	bne.n	1283e <cosem_getAccount+0x3c>
   12908:	4606      	mov	r6, r0
                    if ((ret = arr_getByIndex(&object->creditChargeConfigurations, pos, (void**)&ccc)) != 0 ||
   1290a:	f104 073c 	add.w	r7, r4, #60	; 0x3c
   1290e:	e025      	b.n	1295c <cosem_getAccount+0x15a>
   12910:	aa01      	add	r2, sp, #4
   12912:	4638      	mov	r0, r7
   12914:	f7fd fd37 	bl	10386 <arr_getByIndex>
   12918:	2800      	cmp	r0, #0
   1291a:	d190      	bne.n	1283e <cosem_getAccount+0x3c>
                        (ret = cosem_setStructure(data, 3)) != 0 ||
   1291c:	2103      	movs	r1, #3
   1291e:	4628      	mov	r0, r5
   12920:	f7fb f8d6 	bl	dad0 <cosem_setStructure>
                    if ((ret = arr_getByIndex(&object->creditChargeConfigurations, pos, (void**)&ccc)) != 0 ||
   12924:	2800      	cmp	r0, #0
   12926:	d18a      	bne.n	1283e <cosem_getAccount+0x3c>
                        (ret = cosem_setOctetString2(data, ccc->creditReference, 6)) != 0 ||
   12928:	9901      	ldr	r1, [sp, #4]
   1292a:	2206      	movs	r2, #6
   1292c:	4628      	mov	r0, r5
   1292e:	f7fb f853 	bl	d9d8 <cosem_setOctetString2>
                        (ret = cosem_setStructure(data, 3)) != 0 ||
   12932:	2800      	cmp	r0, #0
   12934:	d183      	bne.n	1283e <cosem_getAccount+0x3c>
                        (ret = cosem_setOctetString2(data, ccc->chargeReference, 6)) != 0 ||
   12936:	9901      	ldr	r1, [sp, #4]
   12938:	2206      	movs	r2, #6
   1293a:	4411      	add	r1, r2
   1293c:	4628      	mov	r0, r5
   1293e:	f7fb f84b 	bl	d9d8 <cosem_setOctetString2>
                        (ret = cosem_setOctetString2(data, ccc->creditReference, 6)) != 0 ||
   12942:	2800      	cmp	r0, #0
   12944:	f47f af7b 	bne.w	1283e <cosem_getAccount+0x3c>
                        (ret = cosem_setBitString(data, ccc->collectionConfiguration, 3)) != 0)
   12948:	9b01      	ldr	r3, [sp, #4]
   1294a:	2203      	movs	r2, #3
   1294c:	7b19      	ldrb	r1, [r3, #12]
   1294e:	4628      	mov	r0, r5
   12950:	f7fa ff96 	bl	d880 <cosem_setBitString>
   12954:	3601      	adds	r6, #1
                        (ret = cosem_setOctetString2(data, ccc->chargeReference, 6)) != 0 ||
   12956:	2800      	cmp	r0, #0
   12958:	f47f af71 	bne.w	1283e <cosem_getAccount+0x3c>
            for (pos = 0; pos != object->creditChargeConfigurations.size; ++pos)
   1295c:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   12960:	b2b1      	uxth	r1, r6
   12962:	428b      	cmp	r3, r1
   12964:	d1d4      	bne.n	12910 <cosem_getAccount+0x10e>
   12966:	e7a5      	b.n	128b4 <cosem_getAccount+0xb2>
    else if (e->index == 12)
   12968:	290c      	cmp	r1, #12
   1296a:	d130      	bne.n	129ce <cosem_getAccount+0x1cc>
        if ((ret = cosem_setArray(data, object->tokenGatewayConfigurations.size)) == 0)
   1296c:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
   12970:	4628      	mov	r0, r5
   12972:	f7fb f8bb 	bl	daec <cosem_setArray>
   12976:	2800      	cmp	r0, #0
   12978:	f47f af61 	bne.w	1283e <cosem_getAccount+0x3c>
   1297c:	4606      	mov	r6, r0
                if ((ret = arr_getByIndex(&object->tokenGatewayConfigurations, pos, (void**)&gwc)) != 0 ||
   1297e:	f104 0748 	add.w	r7, r4, #72	; 0x48
   12982:	e01e      	b.n	129c2 <cosem_getAccount+0x1c0>
   12984:	aa01      	add	r2, sp, #4
   12986:	4638      	mov	r0, r7
   12988:	f7fd fcfd 	bl	10386 <arr_getByIndex>
   1298c:	2800      	cmp	r0, #0
   1298e:	f47f af56 	bne.w	1283e <cosem_getAccount+0x3c>
                    (ret = cosem_setStructure(data, 2)) != 0 ||
   12992:	2102      	movs	r1, #2
   12994:	4628      	mov	r0, r5
   12996:	f7fb f89b 	bl	dad0 <cosem_setStructure>
                if ((ret = arr_getByIndex(&object->tokenGatewayConfigurations, pos, (void**)&gwc)) != 0 ||
   1299a:	2800      	cmp	r0, #0
   1299c:	f47f af4f 	bne.w	1283e <cosem_getAccount+0x3c>
                    (ret = cosem_setOctetString2(data, gwc->creditReference, 6)) != 0 ||
   129a0:	9901      	ldr	r1, [sp, #4]
   129a2:	2206      	movs	r2, #6
   129a4:	4628      	mov	r0, r5
   129a6:	f7fb f817 	bl	d9d8 <cosem_setOctetString2>
                    (ret = cosem_setStructure(data, 2)) != 0 ||
   129aa:	2800      	cmp	r0, #0
   129ac:	f47f af47 	bne.w	1283e <cosem_getAccount+0x3c>
                    (ret = cosem_setUInt8(data, gwc->tokenProportion)) != 0)
   129b0:	9b01      	ldr	r3, [sp, #4]
   129b2:	4628      	mov	r0, r5
   129b4:	7999      	ldrb	r1, [r3, #6]
   129b6:	f7fb f830 	bl	da1a <cosem_setUInt8>
   129ba:	3601      	adds	r6, #1
                    (ret = cosem_setOctetString2(data, gwc->creditReference, 6)) != 0 ||
   129bc:	2800      	cmp	r0, #0
   129be:	f47f af3e 	bne.w	1283e <cosem_getAccount+0x3c>
            for (pos = 0; pos != object->tokenGatewayConfigurations.size; ++pos)
   129c2:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
   129c6:	b2b1      	uxth	r1, r6
   129c8:	428b      	cmp	r3, r1
   129ca:	d1db      	bne.n	12984 <cosem_getAccount+0x182>
   129cc:	e772      	b.n	128b4 <cosem_getAccount+0xb2>
    else if (e->index == 13)
   129ce:	290d      	cmp	r1, #13
   129d0:	d105      	bne.n	129de <cosem_getAccount+0x1dc>
        ret = cosem_setDateTimeAsOctetString(e->value.byteArr, &object->accountActivationTime);
   129d2:	f104 0154 	add.w	r1, r4, #84	; 0x54
        ret = cosem_setDateTimeAsOctetString(e->value.byteArr, &object->accountClosureTime);
   129d6:	4628      	mov	r0, r5
   129d8:	f7fa ff2c 	bl	d834 <cosem_setDateTimeAsOctetString>
   129dc:	e72f      	b.n	1283e <cosem_getAccount+0x3c>
    else if (e->index == 14)
   129de:	290e      	cmp	r1, #14
   129e0:	d102      	bne.n	129e8 <cosem_getAccount+0x1e6>
        ret = cosem_setDateTimeAsOctetString(e->value.byteArr, &object->accountClosureTime);
   129e2:	f104 0160 	add.w	r1, r4, #96	; 0x60
   129e6:	e7f6      	b.n	129d6 <cosem_getAccount+0x1d4>
    else if (e->index == 15)
   129e8:	290f      	cmp	r1, #15
   129ea:	d129      	bne.n	12a40 <cosem_getAccount+0x23e>
        if ((ret = cosem_setStructure(data, 3)) != 0 ||
   129ec:	2103      	movs	r1, #3
   129ee:	4628      	mov	r0, r5
   129f0:	f7fb f86e 	bl	dad0 <cosem_setStructure>
   129f4:	2800      	cmp	r0, #0
   129f6:	f47f af22 	bne.w	1283e <cosem_getAccount+0x3c>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRING_UTF8)) != 0)
   129fa:	210c      	movs	r1, #12
   129fc:	4628      	mov	r0, r5
   129fe:	f7fa f95a 	bl	ccb6 <bb_setUInt8>
        if ((ret = cosem_setStructure(data, 3)) != 0 ||
   12a02:	2800      	cmp	r0, #0
   12a04:	f47f af1b 	bne.w	1283e <cosem_getAccount+0x3c>
        if ((ret = hlp_setObjectCount(object->currency.name.size, data)) != 0 ||
   12a08:	f8b4 0072 	ldrh.w	r0, [r4, #114]	; 0x72
   12a0c:	4629      	mov	r1, r5
   12a0e:	f006 ff41 	bl	19894 <hlp_setObjectCount>
   12a12:	2800      	cmp	r0, #0
   12a14:	f47f af13 	bne.w	1283e <cosem_getAccount+0x3c>
            (ret = bb_set(data, object->currency.name.data, object->currency.name.size)) != 0)
   12a18:	f8b4 2072 	ldrh.w	r2, [r4, #114]	; 0x72
   12a1c:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
   12a1e:	4628      	mov	r0, r5
   12a20:	f7fa fa2f 	bl	ce82 <bb_set>
        if ((ret = hlp_setObjectCount(object->currency.name.size, data)) != 0 ||
   12a24:	2800      	cmp	r0, #0
   12a26:	f47f af0a 	bne.w	1283e <cosem_getAccount+0x3c>
        if ((ret = cosem_setInt8(data, object->currency.scale)) != 0 ||
   12a2a:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
   12a2e:	4628      	mov	r0, r5
   12a30:	f7fb f81d 	bl	da6e <cosem_setInt8>
   12a34:	2800      	cmp	r0, #0
   12a36:	f47f af02 	bne.w	1283e <cosem_getAccount+0x3c>
            (ret = cosem_setEnum(data, object->currency.unit)) != 0)
   12a3a:	f894 1079 	ldrb.w	r1, [r4, #121]	; 0x79
   12a3e:	e6f4      	b.n	1282a <cosem_getAccount+0x28>
    else if (e->index == 16)
   12a40:	2910      	cmp	r1, #16
   12a42:	d101      	bne.n	12a48 <cosem_getAccount+0x246>
        ret = cosem_setInt32(e->value.byteArr, object->lowCreditThreshold);
   12a44:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
   12a46:	e707      	b.n	12858 <cosem_getAccount+0x56>
    else if (e->index == 17)
   12a48:	2911      	cmp	r1, #17
   12a4a:	d102      	bne.n	12a52 <cosem_getAccount+0x250>
        ret = cosem_setInt32(e->value.byteArr, object->nextCreditAvailableThreshold);
   12a4c:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
   12a50:	e702      	b.n	12858 <cosem_getAccount+0x56>
    else if (e->index == 18)
   12a52:	2912      	cmp	r1, #18
   12a54:	d105      	bne.n	12a62 <cosem_getAccount+0x260>
        ret = cosem_setUInt16(e->value.byteArr, object->maxProvision);
   12a56:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
   12a5a:	4628      	mov	r0, r5
   12a5c:	f7fa ffeb 	bl	da36 <cosem_setUInt16>
   12a60:	e6ed      	b.n	1283e <cosem_getAccount+0x3c>
    else if (e->index == 19)
   12a62:	2913      	cmp	r1, #19
   12a64:	d102      	bne.n	12a6c <cosem_getAccount+0x26a>
        ret = cosem_setInt32(e->value.byteArr, object->maxProvisionPeriod);
   12a66:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
   12a6a:	e6f5      	b.n	12858 <cosem_getAccount+0x56>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   12a6c:	f44f 7081 	mov.w	r0, #258	; 0x102
   12a70:	e6e5      	b.n	1283e <cosem_getAccount+0x3c>

00012a72 <cosem_getCompactData>:
{
   12a72:	460b      	mov	r3, r1
   12a74:	b410      	push	{r4}
   12a76:	7e1a      	ldrb	r2, [r3, #24]
   12a78:	3a02      	subs	r2, #2
   12a7a:	4604      	mov	r4, r0
    gxByteBuffer* data = data = e->value.byteArr;
   12a7c:	6888      	ldr	r0, [r1, #8]
    gxCompactData* object = (gxCompactData*)e->target;
   12a7e:	6949      	ldr	r1, [r1, #20]
    switch (e->index)
   12a80:	2a04      	cmp	r2, #4
   12a82:	d81a      	bhi.n	12aba <cosem_getCompactData+0x48>
   12a84:	e8df f002 	tbb	[pc, r2]
   12a88:	120d0703 	.word	0x120d0703
   12a8c:	14          	.byte	0x14
   12a8d:	00          	.byte	0x00
        ret = cosem_setOctetString(data, &object->buffer);
   12a8e:	3110      	adds	r1, #16
}
   12a90:	bc10      	pop	{r4}
        ret = cosem_setOctetString(data, &object->templateDescription);
   12a92:	f7fa bf54 	b.w	d93e <cosem_setOctetString>
        ret = getColumns(settings, &object->captureObjects, data, e);
   12a96:	4602      	mov	r2, r0
   12a98:	311c      	adds	r1, #28
   12a9a:	4620      	mov	r0, r4
}
   12a9c:	bc10      	pop	{r4}
        ret = getColumns(settings, &object->captureObjects, data, e);
   12a9e:	f7fe bcfb 	b.w	11498 <getColumns>
        ret = cosem_setUInt8(e->value.byteArr, object->templateId);
   12aa2:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
}
   12aa6:	bc10      	pop	{r4}
        ret = cosem_setUInt8(e->value.byteArr, object->templateId);
   12aa8:	f7fa bfb7 	b.w	da1a <cosem_setUInt8>
        ret = cosem_setOctetString(data, &object->templateDescription);
   12aac:	312c      	adds	r1, #44	; 0x2c
   12aae:	e7ef      	b.n	12a90 <cosem_getCompactData+0x1e>
        ret = cosem_setEnum(e->value.byteArr, object->captureMethod);
   12ab0:	f891 1038 	ldrb.w	r1, [r1, #56]	; 0x38
}
   12ab4:	bc10      	pop	{r4}
        ret = cosem_setEnum(e->value.byteArr, object->captureMethod);
   12ab6:	f7fb b827 	b.w	db08 <cosem_setEnum>
}
   12aba:	f44f 7081 	mov.w	r0, #258	; 0x102
   12abe:	bc10      	pop	{r4}
   12ac0:	4770      	bx	lr

00012ac2 <cosem_getGsmDiagnostic>:
{
   12ac2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12ac4:	7e03      	ldrb	r3, [r0, #24]
    gxByteBuffer* data = e->value.byteArr;
   12ac6:	6887      	ldr	r7, [r0, #8]
    gxGsmDiagnostic* object = (gxGsmDiagnostic*)e->target;
   12ac8:	6944      	ldr	r4, [r0, #20]
    switch (e->index)
   12aca:	3b02      	subs	r3, #2
   12acc:	2b06      	cmp	r3, #6
   12ace:	f200 809a 	bhi.w	12c06 <cosem_getGsmDiagnostic+0x144>
   12ad2:	e8df f003 	tbb	[pc, r3]
   12ad6:	1204      	.short	0x1204
   12ad8:	611b1917 	.word	0x611b1917
   12adc:	92          	.byte	0x92
   12add:	00          	.byte	0x00
        ret = cosem_setString(e->value.byteArr, object->operatorName,  
   12ade:	6924      	ldr	r4, [r4, #16]
   12ae0:	b14c      	cbz	r4, 12af6 <cosem_getGsmDiagnostic+0x34>
            object->operatorName != NULL ? (uint16_t)strlen(object->operatorName) : 0);
   12ae2:	4620      	mov	r0, r4
   12ae4:	f7ee f96c 	bl	dc0 <strlen>
        ret = cosem_setString(e->value.byteArr, object->operatorName,  
   12ae8:	b282      	uxth	r2, r0
   12aea:	4621      	mov	r1, r4
   12aec:	4638      	mov	r0, r7
   12aee:	f7fa ff44 	bl	d97a <cosem_setString>
}
   12af2:	b003      	add	sp, #12
   12af4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ret = cosem_setString(e->value.byteArr, object->operatorName,  
   12af6:	4622      	mov	r2, r4
   12af8:	e7f7      	b.n	12aea <cosem_getGsmDiagnostic+0x28>
        ret = cosem_setEnum(e->value.byteArr, object->status);
   12afa:	7d21      	ldrb	r1, [r4, #20]
        ret = cosem_setEnum(e->value.byteArr, object->circuitSwitchStatus);
   12afc:	4638      	mov	r0, r7
   12afe:	f7fb f803 	bl	db08 <cosem_setEnum>
        break;
   12b02:	e7f6      	b.n	12af2 <cosem_getGsmDiagnostic+0x30>
        ret = cosem_setEnum(e->value.byteArr, object->circuitSwitchStatus);
   12b04:	7d61      	ldrb	r1, [r4, #21]
   12b06:	e7f9      	b.n	12afc <cosem_getGsmDiagnostic+0x3a>
        ret = cosem_setEnum(e->value.byteArr, object->packetSwitchStatus);
   12b08:	7da1      	ldrb	r1, [r4, #22]
   12b0a:	e7f7      	b.n	12afc <cosem_getGsmDiagnostic+0x3a>
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) == 0)
   12b0c:	2102      	movs	r1, #2
   12b0e:	4638      	mov	r0, r7
   12b10:	f7fa f8d1 	bl	ccb6 <bb_setUInt8>
   12b14:	2800      	cmp	r0, #0
   12b16:	d1ec      	bne.n	12af2 <cosem_getGsmDiagnostic+0x30>
            if (object->base.version == 0)
   12b18:	78a3      	ldrb	r3, [r4, #2]
   12b1a:	bb0b      	cbnz	r3, 12b60 <cosem_getGsmDiagnostic+0x9e>
                if ((ret = bb_setUInt8(data, 4)) != 0 ||
   12b1c:	2104      	movs	r1, #4
   12b1e:	4638      	mov	r0, r7
   12b20:	f7fa f8c9 	bl	ccb6 <bb_setUInt8>
   12b24:	2800      	cmp	r0, #0
   12b26:	d1e4      	bne.n	12af2 <cosem_getGsmDiagnostic+0x30>
                    (ret = cosem_setUInt16(data, (uint16_t)object->cellInfo.cellId)) != 0)
   12b28:	8b21      	ldrh	r1, [r4, #24]
   12b2a:	4638      	mov	r0, r7
   12b2c:	f7fa ff83 	bl	da36 <cosem_setUInt16>
                if ((ret = bb_setUInt8(data, 4)) != 0 ||
   12b30:	2800      	cmp	r0, #0
   12b32:	d1de      	bne.n	12af2 <cosem_getGsmDiagnostic+0x30>
            if ((ret = cosem_setUInt16(data, object->cellInfo.locationId)) != 0 ||
   12b34:	8ba1      	ldrh	r1, [r4, #28]
   12b36:	4638      	mov	r0, r7
   12b38:	f7fa ff7d 	bl	da36 <cosem_setUInt16>
   12b3c:	2800      	cmp	r0, #0
   12b3e:	d1d8      	bne.n	12af2 <cosem_getGsmDiagnostic+0x30>
                (ret = cosem_setUInt8(data, object->cellInfo.signalQuality)) != 0 ||
   12b40:	7fa1      	ldrb	r1, [r4, #30]
   12b42:	4638      	mov	r0, r7
   12b44:	f7fa ff69 	bl	da1a <cosem_setUInt8>
            if ((ret = cosem_setUInt16(data, object->cellInfo.locationId)) != 0 ||
   12b48:	2800      	cmp	r0, #0
   12b4a:	d1d2      	bne.n	12af2 <cosem_getGsmDiagnostic+0x30>
                (ret = cosem_setUInt8(data, object->cellInfo.ber)) != 0)
   12b4c:	7fe1      	ldrb	r1, [r4, #31]
   12b4e:	4638      	mov	r0, r7
   12b50:	f7fa ff63 	bl	da1a <cosem_setUInt8>
                (ret = cosem_setUInt8(data, object->cellInfo.signalQuality)) != 0 ||
   12b54:	2800      	cmp	r0, #0
   12b56:	d1cc      	bne.n	12af2 <cosem_getGsmDiagnostic+0x30>
            if (object->base.version > 0)
   12b58:	78a3      	ldrb	r3, [r4, #2]
   12b5a:	b963      	cbnz	r3, 12b76 <cosem_getGsmDiagnostic+0xb4>
                (ret = cosem_setUInt8(data, object->cellInfo.ber)) != 0)
   12b5c:	2000      	movs	r0, #0
   12b5e:	e7c8      	b.n	12af2 <cosem_getGsmDiagnostic+0x30>
                if ((ret = bb_setUInt8(data, 7)) != 0 ||
   12b60:	2107      	movs	r1, #7
   12b62:	4638      	mov	r0, r7
   12b64:	f7fa f8a7 	bl	ccb6 <bb_setUInt8>
   12b68:	2800      	cmp	r0, #0
   12b6a:	d1c2      	bne.n	12af2 <cosem_getGsmDiagnostic+0x30>
                    (ret = cosem_setUInt32(data, object->cellInfo.cellId)) != 0)
   12b6c:	69a1      	ldr	r1, [r4, #24]
   12b6e:	4638      	mov	r0, r7
   12b70:	f7fa ff6f 	bl	da52 <cosem_setUInt32>
   12b74:	e7dc      	b.n	12b30 <cosem_getGsmDiagnostic+0x6e>
                    (ret = cosem_setUInt16(data, object->cellInfo.mobileCountryCode)) != 0 ||
   12b76:	8c21      	ldrh	r1, [r4, #32]
   12b78:	4638      	mov	r0, r7
   12b7a:	f7fa ff5c 	bl	da36 <cosem_setUInt16>
                if (//mobileCountryCode.
   12b7e:	2800      	cmp	r0, #0
   12b80:	d1b7      	bne.n	12af2 <cosem_getGsmDiagnostic+0x30>
                    (ret = cosem_setUInt16(data, object->cellInfo.mobileNetworkCode)) != 0 ||
   12b82:	8c61      	ldrh	r1, [r4, #34]	; 0x22
   12b84:	4638      	mov	r0, r7
   12b86:	f7fa ff56 	bl	da36 <cosem_setUInt16>
                    (ret = cosem_setUInt16(data, object->cellInfo.mobileCountryCode)) != 0 ||
   12b8a:	2800      	cmp	r0, #0
   12b8c:	d1b1      	bne.n	12af2 <cosem_getGsmDiagnostic+0x30>
                    (ret = cosem_setUInt32(data, object->cellInfo.channelNumber)) != 0)
   12b8e:	6a61      	ldr	r1, [r4, #36]	; 0x24
   12b90:	4638      	mov	r0, r7
   12b92:	f7fa ff5e 	bl	da52 <cosem_setUInt32>
   12b96:	e7ac      	b.n	12af2 <cosem_getGsmDiagnostic+0x30>
        if ((ret = cosem_setArray(data, object->adjacentCells.size)) == 0)
   12b98:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
   12b9a:	4638      	mov	r0, r7
   12b9c:	f7fa ffa6 	bl	daec <cosem_setArray>
   12ba0:	2800      	cmp	r0, #0
   12ba2:	d1a6      	bne.n	12af2 <cosem_getGsmDiagnostic+0x30>
   12ba4:	4605      	mov	r5, r0
                if ((ret = arr_getByIndex(&object->adjacentCells, pos, (void**)&it)) != 0 ||
   12ba6:	f104 0628 	add.w	r6, r4, #40	; 0x28
   12baa:	e01d      	b.n	12be8 <cosem_getGsmDiagnostic+0x126>
   12bac:	aa01      	add	r2, sp, #4
   12bae:	4630      	mov	r0, r6
   12bb0:	f7fd fbe9 	bl	10386 <arr_getByIndex>
   12bb4:	2800      	cmp	r0, #0
   12bb6:	d19c      	bne.n	12af2 <cosem_getGsmDiagnostic+0x30>
                    (ret = cosem_setStructure(data, 2)) != 0)
   12bb8:	2102      	movs	r1, #2
   12bba:	4638      	mov	r0, r7
   12bbc:	f7fa ff88 	bl	dad0 <cosem_setStructure>
                if ((ret = arr_getByIndex(&object->adjacentCells, pos, (void**)&it)) != 0 ||
   12bc0:	2800      	cmp	r0, #0
   12bc2:	d196      	bne.n	12af2 <cosem_getGsmDiagnostic+0x30>
                if (object->base.version == 0)
   12bc4:	9b01      	ldr	r3, [sp, #4]
   12bc6:	6819      	ldr	r1, [r3, #0]
   12bc8:	78a3      	ldrb	r3, [r4, #2]
   12bca:	b993      	cbnz	r3, 12bf2 <cosem_getGsmDiagnostic+0x130>
                    if ((ret = cosem_setUInt16(data, (uint16_t)it->cellId)) != 0)
   12bcc:	b289      	uxth	r1, r1
   12bce:	4638      	mov	r0, r7
   12bd0:	f7fa ff31 	bl	da36 <cosem_setUInt16>
   12bd4:	2800      	cmp	r0, #0
   12bd6:	d18c      	bne.n	12af2 <cosem_getGsmDiagnostic+0x30>
                if ((ret = cosem_setUInt8(data, it->signalQuality)) != 0)
   12bd8:	9b01      	ldr	r3, [sp, #4]
   12bda:	4638      	mov	r0, r7
   12bdc:	7919      	ldrb	r1, [r3, #4]
   12bde:	f7fa ff1c 	bl	da1a <cosem_setUInt8>
   12be2:	3501      	adds	r5, #1
   12be4:	2800      	cmp	r0, #0
   12be6:	d184      	bne.n	12af2 <cosem_getGsmDiagnostic+0x30>
            for (pos = 0; pos != object->adjacentCells.size; ++pos)
   12be8:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   12bea:	b2a9      	uxth	r1, r5
   12bec:	428b      	cmp	r3, r1
   12bee:	d1dd      	bne.n	12bac <cosem_getGsmDiagnostic+0xea>
   12bf0:	e7b4      	b.n	12b5c <cosem_getGsmDiagnostic+0x9a>
                    if ((ret = cosem_setUInt32(data, it->cellId)) != 0)
   12bf2:	4638      	mov	r0, r7
   12bf4:	f7fa ff2d 	bl	da52 <cosem_setUInt32>
   12bf8:	e7ec      	b.n	12bd4 <cosem_getGsmDiagnostic+0x112>
        ret = cosem_setDateTime(e->value.byteArr, &object->captureTime);
   12bfa:	f104 0134 	add.w	r1, r4, #52	; 0x34
   12bfe:	4638      	mov	r0, r7
   12c00:	f7fa fedc 	bl	d9bc <cosem_setDateTime>
        break;
   12c04:	e775      	b.n	12af2 <cosem_getGsmDiagnostic+0x30>
    switch (e->index)
   12c06:	f44f 7081 	mov.w	r0, #258	; 0x102
   12c0a:	e772      	b.n	12af2 <cosem_getGsmDiagnostic+0x30>

00012c0c <cosem_getLlcSscsSetup>:
int cosem_getLlcSscsSetup(
    gxValueEventArg* e)
{
    int ret;
    gxLlcSscsSetup* object = (gxLlcSscsSetup*)e->target;
    switch (e->index)
   12c0c:	7e02      	ldrb	r2, [r0, #24]
    gxLlcSscsSetup* object = (gxLlcSscsSetup*)e->target;
   12c0e:	6943      	ldr	r3, [r0, #20]
    switch (e->index)
   12c10:	2a02      	cmp	r2, #2
   12c12:	d004      	beq.n	12c1e <cosem_getLlcSscsSetup+0x12>
   12c14:	2a03      	cmp	r2, #3
   12c16:	d006      	beq.n	12c26 <cosem_getLlcSscsSetup+0x1a>
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   12c18:	f44f 7081 	mov.w	r0, #258	; 0x102
   12c1c:	4770      	bx	lr
        ret = cosem_setUInt16(e->value.byteArr, object->serviceNodeAddress);
   12c1e:	8a19      	ldrh	r1, [r3, #16]
        ret = cosem_setUInt16(e->value.byteArr, object->baseNodeAddress);
   12c20:	6880      	ldr	r0, [r0, #8]
   12c22:	f7fa bf08 	b.w	da36 <cosem_setUInt16>
   12c26:	8a59      	ldrh	r1, [r3, #18]
   12c28:	e7fa      	b.n	12c20 <cosem_getLlcSscsSetup+0x14>

00012c2a <cosem_getPrimeNbOfdmPlcPhysicalLayerCounters>:
#ifndef DLMS_IGNORE_PRIME_NB_OFDM_PLC_PHYSICAL_LAYER_COUNTERS
int cosem_getPrimeNbOfdmPlcPhysicalLayerCounters(
    gxValueEventArg* e)
{
    int ret;
    gxPrimeNbOfdmPlcPhysicalLayerCounters* object = (gxPrimeNbOfdmPlcPhysicalLayerCounters*)e->target;
   12c2a:	7e02      	ldrb	r2, [r0, #24]
   12c2c:	6943      	ldr	r3, [r0, #20]
    switch (e->index)
   12c2e:	3a02      	subs	r2, #2
   12c30:	2a03      	cmp	r2, #3
   12c32:	d80d      	bhi.n	12c50 <cosem_getPrimeNbOfdmPlcPhysicalLayerCounters+0x26>
   12c34:	e8df f002 	tbb	[pc, r2]
   12c38:	0a080602 	.word	0x0a080602
    {
    case 2:
        ret = cosem_setUInt16(e->value.byteArr, object->crcIncorrectCount);
   12c3c:	8a19      	ldrh	r1, [r3, #16]
        break;
    case 4:
        ret = cosem_setUInt16(e->value.byteArr, object->txDropCount);
        break;
    case 5:
        ret = cosem_setUInt16(e->value.byteArr, object->rxDropCount);
   12c3e:	6880      	ldr	r0, [r0, #8]
   12c40:	f7fa bef9 	b.w	da36 <cosem_setUInt16>
        ret = cosem_setUInt16(e->value.byteArr, object->crcFailedCount);
   12c44:	8a59      	ldrh	r1, [r3, #18]
   12c46:	e7fa      	b.n	12c3e <cosem_getPrimeNbOfdmPlcPhysicalLayerCounters+0x14>
        ret = cosem_setUInt16(e->value.byteArr, object->txDropCount);
   12c48:	8a99      	ldrh	r1, [r3, #20]
   12c4a:	e7f8      	b.n	12c3e <cosem_getPrimeNbOfdmPlcPhysicalLayerCounters+0x14>
        ret = cosem_setUInt16(e->value.byteArr, object->rxDropCount);
   12c4c:	8ad9      	ldrh	r1, [r3, #22]
   12c4e:	e7f6      	b.n	12c3e <cosem_getPrimeNbOfdmPlcPhysicalLayerCounters+0x14>
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   12c50:	f44f 7081 	mov.w	r0, #258	; 0x102
   12c54:	4770      	bx	lr

00012c56 <cosem_getPrimeNbOfdmPlcMacSetup>:
#ifndef DLMS_IGNORE_PRIME_NB_OFDM_PLC_MAC_SETUP
int cosem_getPrimeNbOfdmPlcMacSetup(
    gxValueEventArg* e)
{
    int ret;
    gxPrimeNbOfdmPlcMacSetup* object = (gxPrimeNbOfdmPlcMacSetup*)e->target;
   12c56:	7e02      	ldrb	r2, [r0, #24]
   12c58:	6943      	ldr	r3, [r0, #20]
    switch (e->index)
   12c5a:	3a02      	subs	r2, #2
   12c5c:	2a06      	cmp	r2, #6
   12c5e:	d815      	bhi.n	12c8c <cosem_getPrimeNbOfdmPlcMacSetup+0x36>
   12c60:	e8df f002 	tbb	[pc, r2]
   12c64:	0c0a0804 	.word	0x0c0a0804
   12c68:	100e      	.short	0x100e
   12c6a:	12          	.byte	0x12
   12c6b:	00          	.byte	0x00
    {
    case 2:
        ret = cosem_setUInt8(e->value.byteArr, object->macMinSwitchSearchTime);
   12c6c:	7c19      	ldrb	r1, [r3, #16]
        break;
    case 7:
        ret = cosem_setUInt8(e->value.byteArr, object->macCtlReTxTimer);
        break;
    case 8:
        ret = cosem_setUInt8(e->value.byteArr, object->macMaxCtlReTx);
   12c6e:	6880      	ldr	r0, [r0, #8]
   12c70:	f7fa bed3 	b.w	da1a <cosem_setUInt8>
        ret = cosem_setUInt8(e->value.byteArr, object->macMaxPromotionPdu);
   12c74:	7c59      	ldrb	r1, [r3, #17]
   12c76:	e7fa      	b.n	12c6e <cosem_getPrimeNbOfdmPlcMacSetup+0x18>
        ret = cosem_setUInt8(e->value.byteArr, object->macPromotionPduTxPeriod);
   12c78:	7c99      	ldrb	r1, [r3, #18]
   12c7a:	e7f8      	b.n	12c6e <cosem_getPrimeNbOfdmPlcMacSetup+0x18>
        ret = cosem_setUInt8(e->value.byteArr, object->macBeaconsPerFrame);
   12c7c:	7cd9      	ldrb	r1, [r3, #19]
   12c7e:	e7f6      	b.n	12c6e <cosem_getPrimeNbOfdmPlcMacSetup+0x18>
        ret = cosem_setUInt8(e->value.byteArr, object->macScpMaxTxAttempts);
   12c80:	7d19      	ldrb	r1, [r3, #20]
   12c82:	e7f4      	b.n	12c6e <cosem_getPrimeNbOfdmPlcMacSetup+0x18>
        ret = cosem_setUInt8(e->value.byteArr, object->macCtlReTxTimer);
   12c84:	7d59      	ldrb	r1, [r3, #21]
   12c86:	e7f2      	b.n	12c6e <cosem_getPrimeNbOfdmPlcMacSetup+0x18>
        ret = cosem_setUInt8(e->value.byteArr, object->macMaxCtlReTx);
   12c88:	7d99      	ldrb	r1, [r3, #22]
   12c8a:	e7f0      	b.n	12c6e <cosem_getPrimeNbOfdmPlcMacSetup+0x18>
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   12c8c:	f44f 7081 	mov.w	r0, #258	; 0x102
   12c90:	4770      	bx	lr

00012c92 <cosem_getPrimeNbOfdmPlcMacFunctionalParameters>:
#ifndef DLMS_IGNORE_PRIME_NB_OFDM_PLC_MAC_FUNCTIONAL_PARAMETERS
int cosem_getPrimeNbOfdmPlcMacFunctionalParameters(
    gxValueEventArg* e)
{
    int ret;
    gxPrimeNbOfdmPlcMacFunctionalParameters* object = (gxPrimeNbOfdmPlcMacFunctionalParameters*)e->target;
   12c92:	7e03      	ldrb	r3, [r0, #24]
   12c94:	6941      	ldr	r1, [r0, #20]
    switch (e->index)
   12c96:	3b02      	subs	r3, #2
   12c98:	2b0c      	cmp	r3, #12
   12c9a:	d835      	bhi.n	12d08 <cosem_getPrimeNbOfdmPlcMacFunctionalParameters+0x76>
   12c9c:	e8df f003 	tbb	[pc, r3]
   12ca0:	12100c07 	.word	0x12100c07
   12ca4:	221f1b16 	.word	0x221f1b16
   12ca8:	2e2b2825 	.word	0x2e2b2825
   12cac:	31          	.byte	0x31
   12cad:	00          	.byte	0x00
    {
    case 2:
        ret = cosem_setInt16(e->value.byteArr, object->lnId);
   12cae:	f9b1 1010 	ldrsh.w	r1, [r1, #16]
   12cb2:	6880      	ldr	r0, [r0, #8]
   12cb4:	f7fa bee9 	b.w	da8a <cosem_setInt16>
        break;
    case 3:
        ret = cosem_setUInt8(e->value.byteArr, object->lsId);
   12cb8:	7c89      	ldrb	r1, [r1, #18]
        break;
    case 4:
        ret = cosem_setUInt8(e->value.byteArr, object->sId);
   12cba:	6880      	ldr	r0, [r0, #8]
   12cbc:	f7fa bead 	b.w	da1a <cosem_setUInt8>
   12cc0:	7cc9      	ldrb	r1, [r1, #19]
   12cc2:	e7fa      	b.n	12cba <cosem_getPrimeNbOfdmPlcMacFunctionalParameters+0x28>
        break;
    case 5:
    {
        ret = cosem_setOctetString(e->value.byteArr, &object->sna);
   12cc4:	6880      	ldr	r0, [r0, #8]
   12cc6:	3114      	adds	r1, #20
   12cc8:	f7fa be39 	b.w	d93e <cosem_setOctetString>
    }
    break;
    case 6:
        ret = cosem_setEnum(e->value.byteArr, object->state);
   12ccc:	f891 1020 	ldrb.w	r1, [r1, #32]
        break;
    case 13:
        ret = cosem_setUInt8(e->value.byteArr, object->beaconTxFrequency);
        break;
    case 14:
        ret = cosem_setEnum(e->value.byteArr, (unsigned char)object->capabilities);
   12cd0:	6880      	ldr	r0, [r0, #8]
   12cd2:	f7fa bf19 	b.w	db08 <cosem_setEnum>
        ret = cosem_setUInt16(e->value.byteArr, object->scpLength);
   12cd6:	8c49      	ldrh	r1, [r1, #34]	; 0x22
   12cd8:	6880      	ldr	r0, [r0, #8]
   12cda:	f7fa beac 	b.w	da36 <cosem_setUInt16>
        ret = cosem_setUInt8(e->value.byteArr, object->nodeHierarchyLevel);
   12cde:	f891 1024 	ldrb.w	r1, [r1, #36]	; 0x24
   12ce2:	e7ea      	b.n	12cba <cosem_getPrimeNbOfdmPlcMacFunctionalParameters+0x28>
        ret = cosem_setUInt8(e->value.byteArr, object->beaconSlotCount);
   12ce4:	f891 1025 	ldrb.w	r1, [r1, #37]	; 0x25
   12ce8:	e7e7      	b.n	12cba <cosem_getPrimeNbOfdmPlcMacFunctionalParameters+0x28>
        ret = cosem_setUInt8(e->value.byteArr, object->beaconRxSlot);
   12cea:	f891 1026 	ldrb.w	r1, [r1, #38]	; 0x26
   12cee:	e7e4      	b.n	12cba <cosem_getPrimeNbOfdmPlcMacFunctionalParameters+0x28>
        ret = cosem_setUInt8(e->value.byteArr, object->beaconTxSlot);
   12cf0:	f891 1027 	ldrb.w	r1, [r1, #39]	; 0x27
   12cf4:	e7e1      	b.n	12cba <cosem_getPrimeNbOfdmPlcMacFunctionalParameters+0x28>
        ret = cosem_setUInt8(e->value.byteArr, object->beaconRxFrequency);
   12cf6:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
   12cfa:	e7de      	b.n	12cba <cosem_getPrimeNbOfdmPlcMacFunctionalParameters+0x28>
        ret = cosem_setUInt8(e->value.byteArr, object->beaconTxFrequency);
   12cfc:	f891 1029 	ldrb.w	r1, [r1, #41]	; 0x29
   12d00:	e7db      	b.n	12cba <cosem_getPrimeNbOfdmPlcMacFunctionalParameters+0x28>
        ret = cosem_setEnum(e->value.byteArr, (unsigned char)object->capabilities);
   12d02:	f891 102a 	ldrb.w	r1, [r1, #42]	; 0x2a
   12d06:	e7e3      	b.n	12cd0 <cosem_getPrimeNbOfdmPlcMacFunctionalParameters+0x3e>
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   12d08:	f44f 7081 	mov.w	r0, #258	; 0x102
   12d0c:	4770      	bx	lr

00012d0e <cosem_getPrimeNbOfdmPlcMacCounters>:
#ifndef DLMS_IGNORE_PRIME_NB_OFDM_PLC_MAC_COUNTERS
int cosem_getPrimeNbOfdmPlcMacCounters(
    gxValueEventArg* e)
{
    int ret;
    gxPrimeNbOfdmPlcMacCounters* object = (gxPrimeNbOfdmPlcMacCounters*)e->target;
   12d0e:	7e02      	ldrb	r2, [r0, #24]
   12d10:	6943      	ldr	r3, [r0, #20]
    switch (e->index)
   12d12:	3a02      	subs	r2, #2
   12d14:	2a05      	cmp	r2, #5
   12d16:	d812      	bhi.n	12d3e <cosem_getPrimeNbOfdmPlcMacCounters+0x30>
   12d18:	e8df f002 	tbb	[pc, r2]
   12d1c:	0b090703 	.word	0x0b090703
   12d20:	0f0d      	.short	0x0f0d
    {
    case 2:
        ret = cosem_setUInt32(e->value.byteArr, object->txDataPktCount);
   12d22:	6919      	ldr	r1, [r3, #16]
        break;
    case 6:
        ret = cosem_setUInt32(e->value.byteArr, object->csmaFailCount);
        break;
    case 7:
        ret = cosem_setUInt32(e->value.byteArr, object->csmaChBusyCount);
   12d24:	6880      	ldr	r0, [r0, #8]
   12d26:	f7fa be94 	b.w	da52 <cosem_setUInt32>
        ret = cosem_setUInt32(e->value.byteArr, object->rxDataPktCount);
   12d2a:	6959      	ldr	r1, [r3, #20]
   12d2c:	e7fa      	b.n	12d24 <cosem_getPrimeNbOfdmPlcMacCounters+0x16>
        ret = cosem_setUInt32(e->value.byteArr, object->txCtrlPktCount);
   12d2e:	6999      	ldr	r1, [r3, #24]
   12d30:	e7f8      	b.n	12d24 <cosem_getPrimeNbOfdmPlcMacCounters+0x16>
        ret = cosem_setUInt32(e->value.byteArr, object->rxCtrlPktCount);
   12d32:	69d9      	ldr	r1, [r3, #28]
   12d34:	e7f6      	b.n	12d24 <cosem_getPrimeNbOfdmPlcMacCounters+0x16>
        ret = cosem_setUInt32(e->value.byteArr, object->csmaFailCount);
   12d36:	6a19      	ldr	r1, [r3, #32]
   12d38:	e7f4      	b.n	12d24 <cosem_getPrimeNbOfdmPlcMacCounters+0x16>
        ret = cosem_setUInt32(e->value.byteArr, object->csmaChBusyCount);
   12d3a:	6a59      	ldr	r1, [r3, #36]	; 0x24
   12d3c:	e7f2      	b.n	12d24 <cosem_getPrimeNbOfdmPlcMacCounters+0x16>
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   12d3e:	f44f 7081 	mov.w	r0, #258	; 0x102
   12d42:	4770      	bx	lr

00012d44 <cosem_getMulticastEntries>:
#endif //DLMS_IGNORE_PRIME_NB_OFDM_PLC_MAC_COUNTERS

#ifndef DLMS_IGNORE_PRIME_NB_OFDM_PLC_MAC_NETWORK_ADMINISTRATION_DATA

int cosem_getMulticastEntries(gxValueEventArg* e)
{
   12d44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    gxMacMulticastEntry* it;
    int ret;
    uint16_t pos;
    gxPrimeNbOfdmPlcMacNetworkAdministrationData* object = (gxPrimeNbOfdmPlcMacNetworkAdministrationData*)e->target;
   12d48:	6946      	ldr	r6, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
   12d4a:	6885      	ldr	r5, [r0, #8]
    if ((ret = cosem_setArray(data, object->multicastEntries.size)) == 0)
   12d4c:	8af1      	ldrh	r1, [r6, #22]
   12d4e:	4628      	mov	r0, r5
   12d50:	f7fa fecc 	bl	daec <cosem_setArray>
   12d54:	4604      	mov	r4, r0
   12d56:	b118      	cbz	r0, 12d60 <cosem_getMulticastEntries+0x1c>
                break;
            }
        }
    }
    return ret;
}
   12d58:	4620      	mov	r0, r4
   12d5a:	b003      	add	sp, #12
   12d5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12d60:	4607      	mov	r7, r0
            if ((ret = arr_getByIndex(&object->multicastEntries, pos, (void**)&it)) != 0)
   12d62:	f106 0810 	add.w	r8, r6, #16
        for (pos = 0; pos != object->multicastEntries.size; ++pos)
   12d66:	8af3      	ldrh	r3, [r6, #22]
   12d68:	fa1f f987 	uxth.w	r9, r7
   12d6c:	454b      	cmp	r3, r9
   12d6e:	d0f3      	beq.n	12d58 <cosem_getMulticastEntries+0x14>
            if ((ret = cosem_setStructure(data, 2)) != 0)
   12d70:	2102      	movs	r1, #2
   12d72:	4628      	mov	r0, r5
   12d74:	f7fa feac 	bl	dad0 <cosem_setStructure>
   12d78:	b9a0      	cbnz	r0, 12da4 <cosem_getMulticastEntries+0x60>
            if ((ret = arr_getByIndex(&object->multicastEntries, pos, (void**)&it)) != 0)
   12d7a:	aa01      	add	r2, sp, #4
   12d7c:	4649      	mov	r1, r9
   12d7e:	4640      	mov	r0, r8
   12d80:	f7fd fb01 	bl	10386 <arr_getByIndex>
   12d84:	b970      	cbnz	r0, 12da4 <cosem_getMulticastEntries+0x60>
            if ((ret = cosem_setInt8(data, it->id)) != 0 ||
   12d86:	9b01      	ldr	r3, [sp, #4]
   12d88:	4628      	mov	r0, r5
   12d8a:	7819      	ldrb	r1, [r3, #0]
   12d8c:	f7fa fe6f 	bl	da6e <cosem_setInt8>
   12d90:	b940      	cbnz	r0, 12da4 <cosem_getMulticastEntries+0x60>
                (ret = cosem_setInt16(data, it->members)) != 0)
   12d92:	9b01      	ldr	r3, [sp, #4]
   12d94:	4628      	mov	r0, r5
   12d96:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
   12d9a:	f7fa fe76 	bl	da8a <cosem_setInt16>
   12d9e:	3701      	adds	r7, #1
            if ((ret = cosem_setInt8(data, it->id)) != 0 ||
   12da0:	2800      	cmp	r0, #0
   12da2:	d0e0      	beq.n	12d66 <cosem_getMulticastEntries+0x22>
                (ret = cosem_setInt16(data, it->members)) != 0)
   12da4:	4604      	mov	r4, r0
    return ret;
   12da6:	e7d7      	b.n	12d58 <cosem_getMulticastEntries+0x14>

00012da8 <cosem_getSwitchTable>:

int cosem_getSwitchTable(gxValueEventArg* e)
{
   12da8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    uint16_t* it;
    int ret;
    uint16_t pos;
    gxPrimeNbOfdmPlcMacNetworkAdministrationData* object = (gxPrimeNbOfdmPlcMacNetworkAdministrationData*)e->target;
   12dac:	6945      	ldr	r5, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
   12dae:	6886      	ldr	r6, [r0, #8]
    if ((ret = cosem_setArray(data, object->switchTable.size)) == 0)
   12db0:	8c69      	ldrh	r1, [r5, #34]	; 0x22
   12db2:	4630      	mov	r0, r6
   12db4:	f7fa fe9a 	bl	daec <cosem_setArray>
   12db8:	4604      	mov	r4, r0
   12dba:	b118      	cbz	r0, 12dc4 <cosem_getSwitchTable+0x1c>
                break;
            }
        }
    }
    return ret;
}
   12dbc:	4620      	mov	r0, r4
   12dbe:	b002      	add	sp, #8
   12dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12dc4:	4680      	mov	r8, r0
            if ((ret = arr_getByIndex(&object->switchTable, pos, (void**)&it)) != 0)
   12dc6:	f105 071c 	add.w	r7, r5, #28
        for (pos = 0; pos != object->switchTable.size; ++pos)
   12dca:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
   12dcc:	fa1f f188 	uxth.w	r1, r8
   12dd0:	428b      	cmp	r3, r1
   12dd2:	d0f3      	beq.n	12dbc <cosem_getSwitchTable+0x14>
            if ((ret = arr_getByIndex(&object->switchTable, pos, (void**)&it)) != 0)
   12dd4:	aa01      	add	r2, sp, #4
   12dd6:	4638      	mov	r0, r7
   12dd8:	f7fd fad5 	bl	10386 <arr_getByIndex>
   12ddc:	b948      	cbnz	r0, 12df2 <cosem_getSwitchTable+0x4a>
            if ((ret = cosem_setInt16(data, *it)) != 0)
   12dde:	9b01      	ldr	r3, [sp, #4]
   12de0:	4630      	mov	r0, r6
   12de2:	f9b3 1000 	ldrsh.w	r1, [r3]
   12de6:	f7fa fe50 	bl	da8a <cosem_setInt16>
   12dea:	f108 0801 	add.w	r8, r8, #1
   12dee:	2800      	cmp	r0, #0
   12df0:	d0eb      	beq.n	12dca <cosem_getSwitchTable+0x22>
   12df2:	4604      	mov	r4, r0
    return ret;
   12df4:	e7e2      	b.n	12dbc <cosem_getSwitchTable+0x14>

00012df6 <cosem_getDirectTable>:

int cosem_getDirectTable(gxValueEventArg* e)
{
   12df6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    gxMacDirectTable* it;
    int ret;
    uint16_t pos;
    gxPrimeNbOfdmPlcMacNetworkAdministrationData* object = (gxPrimeNbOfdmPlcMacNetworkAdministrationData*)e->target;
   12dfa:	6946      	ldr	r6, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
   12dfc:	6885      	ldr	r5, [r0, #8]
    if ((ret = cosem_setArray(data, object->directTable.size)) == 0)
   12dfe:	8df1      	ldrh	r1, [r6, #46]	; 0x2e
   12e00:	4628      	mov	r0, r5
   12e02:	f7fa fe73 	bl	daec <cosem_setArray>
   12e06:	4604      	mov	r4, r0
   12e08:	b118      	cbz	r0, 12e12 <cosem_getDirectTable+0x1c>
                break;
            }
        }
    }
    return ret;
}
   12e0a:	4620      	mov	r0, r4
   12e0c:	b002      	add	sp, #8
   12e0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12e12:	4607      	mov	r7, r0
            if ((ret = arr_getByIndex(&object->directTable, pos, (void**)&it)) != 0)
   12e14:	f106 0828 	add.w	r8, r6, #40	; 0x28
        for (pos = 0; pos != object->directTable.size; ++pos)
   12e18:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
   12e1a:	b2b9      	uxth	r1, r7
   12e1c:	428b      	cmp	r3, r1
   12e1e:	d0f4      	beq.n	12e0a <cosem_getDirectTable+0x14>
            if ((ret = arr_getByIndex(&object->directTable, pos, (void**)&it)) != 0)
   12e20:	aa01      	add	r2, sp, #4
   12e22:	4640      	mov	r0, r8
   12e24:	f7fd faaf 	bl	10386 <arr_getByIndex>
   12e28:	2800      	cmp	r0, #0
   12e2a:	d137      	bne.n	12e9c <cosem_getDirectTable+0xa6>
            if ((ret = cosem_setStructure(data, 7)) != 0 ||
   12e2c:	2107      	movs	r1, #7
   12e2e:	4628      	mov	r0, r5
   12e30:	f7fa fe4e 	bl	dad0 <cosem_setStructure>
   12e34:	bb90      	cbnz	r0, 12e9c <cosem_getDirectTable+0xa6>
                (ret = cosem_setInt16(data, it->sourceSId)) != 0 ||
   12e36:	9b01      	ldr	r3, [sp, #4]
   12e38:	4628      	mov	r0, r5
   12e3a:	f9b3 1000 	ldrsh.w	r1, [r3]
   12e3e:	f7fa fe24 	bl	da8a <cosem_setInt16>
            if ((ret = cosem_setStructure(data, 7)) != 0 ||
   12e42:	bb58      	cbnz	r0, 12e9c <cosem_getDirectTable+0xa6>
                (ret = cosem_setInt16(data, it->sourceLnId)) != 0 ||
   12e44:	9b01      	ldr	r3, [sp, #4]
   12e46:	4628      	mov	r0, r5
   12e48:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
   12e4c:	f7fa fe1d 	bl	da8a <cosem_setInt16>
                (ret = cosem_setInt16(data, it->sourceSId)) != 0 ||
   12e50:	bb20      	cbnz	r0, 12e9c <cosem_getDirectTable+0xa6>
                (ret = cosem_setInt16(data, it->sourceLcId)) != 0 ||
   12e52:	9b01      	ldr	r3, [sp, #4]
   12e54:	4628      	mov	r0, r5
   12e56:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
   12e5a:	f7fa fe16 	bl	da8a <cosem_setInt16>
                (ret = cosem_setInt16(data, it->sourceLnId)) != 0 ||
   12e5e:	b9e8      	cbnz	r0, 12e9c <cosem_getDirectTable+0xa6>
                (ret = cosem_setInt16(data, it->destinationSId)) != 0 ||
   12e60:	9b01      	ldr	r3, [sp, #4]
   12e62:	4628      	mov	r0, r5
   12e64:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
   12e68:	f7fa fe0f 	bl	da8a <cosem_setInt16>
                (ret = cosem_setInt16(data, it->sourceLcId)) != 0 ||
   12e6c:	b9b0      	cbnz	r0, 12e9c <cosem_getDirectTable+0xa6>
                (ret = cosem_setInt16(data, it->destinationLnId)) != 0 ||
   12e6e:	9b01      	ldr	r3, [sp, #4]
   12e70:	4628      	mov	r0, r5
   12e72:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
   12e76:	f7fa fe08 	bl	da8a <cosem_setInt16>
                (ret = cosem_setInt16(data, it->destinationSId)) != 0 ||
   12e7a:	b978      	cbnz	r0, 12e9c <cosem_getDirectTable+0xa6>
                (ret = cosem_setInt16(data, it->destinationLcId)) != 0 ||
   12e7c:	9b01      	ldr	r3, [sp, #4]
   12e7e:	4628      	mov	r0, r5
   12e80:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
   12e84:	f7fa fe01 	bl	da8a <cosem_setInt16>
                (ret = cosem_setInt16(data, it->destinationLnId)) != 0 ||
   12e88:	b940      	cbnz	r0, 12e9c <cosem_getDirectTable+0xa6>
                (ret = cosem_setOctetString2(data, it->did, sizeof(it->did))) != 0)
   12e8a:	9901      	ldr	r1, [sp, #4]
   12e8c:	2206      	movs	r2, #6
   12e8e:	310c      	adds	r1, #12
   12e90:	4628      	mov	r0, r5
   12e92:	f7fa fda1 	bl	d9d8 <cosem_setOctetString2>
   12e96:	3701      	adds	r7, #1
                (ret = cosem_setInt16(data, it->destinationLcId)) != 0 ||
   12e98:	2800      	cmp	r0, #0
   12e9a:	d0bd      	beq.n	12e18 <cosem_getDirectTable+0x22>
                (ret = cosem_setOctetString2(data, it->did, sizeof(it->did))) != 0)
   12e9c:	4604      	mov	r4, r0
    return ret;
   12e9e:	e7b4      	b.n	12e0a <cosem_getDirectTable+0x14>

00012ea0 <cosem_getAvailableSwitches>:

int cosem_getAvailableSwitches(gxValueEventArg* e)
{
   12ea0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    gxMacAvailableSwitch* it;
    int ret;
    uint16_t pos;
    gxPrimeNbOfdmPlcMacNetworkAdministrationData* object = (gxPrimeNbOfdmPlcMacNetworkAdministrationData*)e->target;
   12ea4:	6946      	ldr	r6, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
   12ea6:	6885      	ldr	r5, [r0, #8]
    if ((ret = cosem_setArray(data, object->availableSwitches.size)) == 0)
   12ea8:	8f71      	ldrh	r1, [r6, #58]	; 0x3a
   12eaa:	4628      	mov	r0, r5
   12eac:	f7fa fe1e 	bl	daec <cosem_setArray>
   12eb0:	4604      	mov	r4, r0
   12eb2:	b118      	cbz	r0, 12ebc <cosem_getAvailableSwitches+0x1c>
                break;
            }
        }
    }
    return ret;
}
   12eb4:	4620      	mov	r0, r4
   12eb6:	b002      	add	sp, #8
   12eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12ebc:	4607      	mov	r7, r0
            if ((ret = arr_getByIndex(&object->availableSwitches, pos, (void**)&it)) != 0)
   12ebe:	f106 0834 	add.w	r8, r6, #52	; 0x34
        for (pos = 0; pos != object->availableSwitches.size; ++pos)
   12ec2:	8f73      	ldrh	r3, [r6, #58]	; 0x3a
   12ec4:	b2b9      	uxth	r1, r7
   12ec6:	428b      	cmp	r3, r1
   12ec8:	d0f4      	beq.n	12eb4 <cosem_getAvailableSwitches+0x14>
            if ((ret = arr_getByIndex(&object->availableSwitches, pos, (void**)&it)) != 0)
   12eca:	aa01      	add	r2, sp, #4
   12ecc:	4640      	mov	r0, r8
   12ece:	f7fd fa5a 	bl	10386 <arr_getByIndex>
   12ed2:	bb30      	cbnz	r0, 12f22 <cosem_getAvailableSwitches+0x82>
            if ((ret = cosem_setStructure(data, 5)) != 0 ||
   12ed4:	2105      	movs	r1, #5
   12ed6:	4628      	mov	r0, r5
   12ed8:	f7fa fdfa 	bl	dad0 <cosem_setStructure>
   12edc:	bb08      	cbnz	r0, 12f22 <cosem_getAvailableSwitches+0x82>
                (ret = cosem_setOctetString2(data, it->sna.data, (uint16_t)it->sna.size)) != 0 ||
   12ede:	9b01      	ldr	r3, [sp, #4]
   12ee0:	4628      	mov	r0, r5
   12ee2:	88da      	ldrh	r2, [r3, #6]
   12ee4:	6819      	ldr	r1, [r3, #0]
   12ee6:	f7fa fd77 	bl	d9d8 <cosem_setOctetString2>
            if ((ret = cosem_setStructure(data, 5)) != 0 ||
   12eea:	b9d0      	cbnz	r0, 12f22 <cosem_getAvailableSwitches+0x82>
                (ret = cosem_setInt16(data, it->lsId)) != 0 ||
   12eec:	9b01      	ldr	r3, [sp, #4]
   12eee:	4628      	mov	r0, r5
   12ef0:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
   12ef4:	f7fa fdc9 	bl	da8a <cosem_setInt16>
                (ret = cosem_setOctetString2(data, it->sna.data, (uint16_t)it->sna.size)) != 0 ||
   12ef8:	b998      	cbnz	r0, 12f22 <cosem_getAvailableSwitches+0x82>
                (ret = cosem_setInt8(data, it->level)) != 0 ||
   12efa:	9b01      	ldr	r3, [sp, #4]
   12efc:	4628      	mov	r0, r5
   12efe:	7b99      	ldrb	r1, [r3, #14]
   12f00:	f7fa fdb5 	bl	da6e <cosem_setInt8>
                (ret = cosem_setInt16(data, it->lsId)) != 0 ||
   12f04:	b968      	cbnz	r0, 12f22 <cosem_getAvailableSwitches+0x82>
                (ret = cosem_setInt8(data, it->rxLevel)) != 0 ||
   12f06:	9b01      	ldr	r3, [sp, #4]
   12f08:	4628      	mov	r0, r5
   12f0a:	7bd9      	ldrb	r1, [r3, #15]
   12f0c:	f7fa fdaf 	bl	da6e <cosem_setInt8>
                (ret = cosem_setInt8(data, it->level)) != 0 ||
   12f10:	b938      	cbnz	r0, 12f22 <cosem_getAvailableSwitches+0x82>
                (ret = cosem_setInt8(data, it->rxSnr)) != 0)
   12f12:	9b01      	ldr	r3, [sp, #4]
   12f14:	4628      	mov	r0, r5
   12f16:	7c19      	ldrb	r1, [r3, #16]
   12f18:	f7fa fda9 	bl	da6e <cosem_setInt8>
   12f1c:	3701      	adds	r7, #1
                (ret = cosem_setInt8(data, it->rxLevel)) != 0 ||
   12f1e:	2800      	cmp	r0, #0
   12f20:	d0cf      	beq.n	12ec2 <cosem_getAvailableSwitches+0x22>
                (ret = cosem_setInt8(data, it->rxSnr)) != 0)
   12f22:	4604      	mov	r4, r0
    return ret;
   12f24:	e7c6      	b.n	12eb4 <cosem_getAvailableSwitches+0x14>

00012f26 <cosem_getCommunications>:

int cosem_getCommunications(gxValueEventArg* e)
{
   12f26:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    gxMacPhyCommunication* it;
    int ret;
    uint16_t pos;
    gxPrimeNbOfdmPlcMacNetworkAdministrationData* object = (gxPrimeNbOfdmPlcMacNetworkAdministrationData*)e->target;
   12f2a:	6946      	ldr	r6, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
   12f2c:	6885      	ldr	r5, [r0, #8]
    if ((ret = cosem_setArray(data, object->communications.size)) == 0)
   12f2e:	f8b6 1046 	ldrh.w	r1, [r6, #70]	; 0x46
   12f32:	4628      	mov	r0, r5
   12f34:	f7fa fdda 	bl	daec <cosem_setArray>
   12f38:	4604      	mov	r4, r0
   12f3a:	b118      	cbz	r0, 12f44 <cosem_getCommunications+0x1e>
                break;
            }
        }
    }
    return ret;
}
   12f3c:	4620      	mov	r0, r4
   12f3e:	b002      	add	sp, #8
   12f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12f44:	4607      	mov	r7, r0
            if ((ret = arr_getByIndex(&object->communications, pos, (void**)&it)) != 0)
   12f46:	f106 0840 	add.w	r8, r6, #64	; 0x40
        for (pos = 0; pos != object->communications.size; ++pos)
   12f4a:	f8b6 3046 	ldrh.w	r3, [r6, #70]	; 0x46
   12f4e:	b2b9      	uxth	r1, r7
   12f50:	428b      	cmp	r3, r1
   12f52:	d0f3      	beq.n	12f3c <cosem_getCommunications+0x16>
            if ((ret = arr_getByIndex(&object->communications, pos, (void**)&it)) != 0)
   12f54:	aa01      	add	r2, sp, #4
   12f56:	4640      	mov	r0, r8
   12f58:	f7fd fa15 	bl	10386 <arr_getByIndex>
   12f5c:	2800      	cmp	r0, #0
   12f5e:	d13e      	bne.n	12fde <cosem_getCommunications+0xb8>
            if ((ret = cosem_setStructure(data, 9)) != 0 ||
   12f60:	2109      	movs	r1, #9
   12f62:	4628      	mov	r0, r5
   12f64:	f7fa fdb4 	bl	dad0 <cosem_setStructure>
   12f68:	2800      	cmp	r0, #0
   12f6a:	d138      	bne.n	12fde <cosem_getCommunications+0xb8>
                (ret = cosem_setOctetString2(data, it->eui, sizeof(it->eui))) != 0 ||
   12f6c:	9901      	ldr	r1, [sp, #4]
   12f6e:	2206      	movs	r2, #6
   12f70:	4628      	mov	r0, r5
   12f72:	f7fa fd31 	bl	d9d8 <cosem_setOctetString2>
            if ((ret = cosem_setStructure(data, 9)) != 0 ||
   12f76:	2800      	cmp	r0, #0
   12f78:	d131      	bne.n	12fde <cosem_getCommunications+0xb8>
                (ret = cosem_setInt8(data, it->txPower)) != 0 ||
   12f7a:	9b01      	ldr	r3, [sp, #4]
   12f7c:	4628      	mov	r0, r5
   12f7e:	7999      	ldrb	r1, [r3, #6]
   12f80:	f7fa fd75 	bl	da6e <cosem_setInt8>
                (ret = cosem_setOctetString2(data, it->eui, sizeof(it->eui))) != 0 ||
   12f84:	bb58      	cbnz	r0, 12fde <cosem_getCommunications+0xb8>
                (ret = cosem_setInt8(data, it->txCoding)) != 0 ||
   12f86:	9b01      	ldr	r3, [sp, #4]
   12f88:	4628      	mov	r0, r5
   12f8a:	79d9      	ldrb	r1, [r3, #7]
   12f8c:	f7fa fd6f 	bl	da6e <cosem_setInt8>
                (ret = cosem_setInt8(data, it->txPower)) != 0 ||
   12f90:	bb28      	cbnz	r0, 12fde <cosem_getCommunications+0xb8>
                (ret = cosem_setInt8(data, it->rxCoding)) != 0 ||
   12f92:	9b01      	ldr	r3, [sp, #4]
   12f94:	4628      	mov	r0, r5
   12f96:	7a19      	ldrb	r1, [r3, #8]
   12f98:	f7fa fd69 	bl	da6e <cosem_setInt8>
                (ret = cosem_setInt8(data, it->txCoding)) != 0 ||
   12f9c:	b9f8      	cbnz	r0, 12fde <cosem_getCommunications+0xb8>
                (ret = cosem_setInt8(data, it->rxLvl)) != 0 ||
   12f9e:	9b01      	ldr	r3, [sp, #4]
   12fa0:	4628      	mov	r0, r5
   12fa2:	7a59      	ldrb	r1, [r3, #9]
   12fa4:	f7fa fd63 	bl	da6e <cosem_setInt8>
                (ret = cosem_setInt8(data, it->rxCoding)) != 0 ||
   12fa8:	b9c8      	cbnz	r0, 12fde <cosem_getCommunications+0xb8>
                (ret = cosem_setInt8(data, it->snr)) != 0 ||
   12faa:	9b01      	ldr	r3, [sp, #4]
   12fac:	4628      	mov	r0, r5
   12fae:	7a99      	ldrb	r1, [r3, #10]
   12fb0:	f7fa fd5d 	bl	da6e <cosem_setInt8>
                (ret = cosem_setInt8(data, it->rxLvl)) != 0 ||
   12fb4:	b998      	cbnz	r0, 12fde <cosem_getCommunications+0xb8>
                (ret = cosem_setInt8(data, it->txPowerModified)) != 0 ||
   12fb6:	9b01      	ldr	r3, [sp, #4]
   12fb8:	4628      	mov	r0, r5
   12fba:	7ad9      	ldrb	r1, [r3, #11]
   12fbc:	f7fa fd57 	bl	da6e <cosem_setInt8>
                (ret = cosem_setInt8(data, it->snr)) != 0 ||
   12fc0:	b968      	cbnz	r0, 12fde <cosem_getCommunications+0xb8>
                (ret = cosem_setInt8(data, it->txCodingModified)) != 0 ||
   12fc2:	9b01      	ldr	r3, [sp, #4]
   12fc4:	4628      	mov	r0, r5
   12fc6:	7b19      	ldrb	r1, [r3, #12]
   12fc8:	f7fa fd51 	bl	da6e <cosem_setInt8>
                (ret = cosem_setInt8(data, it->txPowerModified)) != 0 ||
   12fcc:	b938      	cbnz	r0, 12fde <cosem_getCommunications+0xb8>
                (ret = cosem_setInt8(data, it->rxCodingModified)) != 0)
   12fce:	9b01      	ldr	r3, [sp, #4]
   12fd0:	4628      	mov	r0, r5
   12fd2:	7b59      	ldrb	r1, [r3, #13]
   12fd4:	f7fa fd4b 	bl	da6e <cosem_setInt8>
   12fd8:	3701      	adds	r7, #1
                (ret = cosem_setInt8(data, it->txCodingModified)) != 0 ||
   12fda:	2800      	cmp	r0, #0
   12fdc:	d0b5      	beq.n	12f4a <cosem_getCommunications+0x24>
                (ret = cosem_setInt8(data, it->rxCodingModified)) != 0)
   12fde:	4604      	mov	r4, r0
    return ret;
   12fe0:	e7ac      	b.n	12f3c <cosem_getCommunications+0x16>

00012fe2 <cosem_getPrimeNbOfdmPlcMacNetworkAdministrationData>:

int  cosem_getPrimeNbOfdmPlcMacNetworkAdministrationData(
    gxValueEventArg* e)
{
    int ret;
    switch (e->index)
   12fe2:	7e03      	ldrb	r3, [r0, #24]
   12fe4:	3b02      	subs	r3, #2
   12fe6:	2b04      	cmp	r3, #4
   12fe8:	d80e      	bhi.n	13008 <cosem_getPrimeNbOfdmPlcMacNetworkAdministrationData+0x26>
   12fea:	e8df f003 	tbb	[pc, r3]
   12fee:	0503      	.short	0x0503
   12ff0:	0907      	.short	0x0907
   12ff2:	0b          	.byte	0x0b
   12ff3:	00          	.byte	0x00
    {
    case 2:
        ret = cosem_getMulticastEntries(e);
   12ff4:	f7ff bea6 	b.w	12d44 <cosem_getMulticastEntries>
        break;
    case 3:
        ret = cosem_getSwitchTable(e);
   12ff8:	f7ff bed6 	b.w	12da8 <cosem_getSwitchTable>
        break;
    case 4:
        ret = cosem_getDirectTable(e);
   12ffc:	f7ff befb 	b.w	12df6 <cosem_getDirectTable>
        break;
    case 5:
        ret = cosem_getAvailableSwitches(e);
   13000:	f7ff bf4e 	b.w	12ea0 <cosem_getAvailableSwitches>
        break;
    case 6:
        ret = cosem_getCommunications(e);
   13004:	f7ff bf8f 	b.w	12f26 <cosem_getCommunications>
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   13008:	f44f 7081 	mov.w	r0, #258	; 0x102
   1300c:	4770      	bx	lr

0001300e <cosem_getPrimeNbOfdmPlcApplicationsIdentification>:
int  cosem_getPrimeNbOfdmPlcApplicationsIdentification(
    gxValueEventArg* e)
{
    int ret;
    gxPrimeNbOfdmPlcApplicationsIdentification* object = (gxPrimeNbOfdmPlcApplicationsIdentification*)e->target;
    switch (e->index)
   1300e:	7e02      	ldrb	r2, [r0, #24]
    gxPrimeNbOfdmPlcApplicationsIdentification* object = (gxPrimeNbOfdmPlcApplicationsIdentification*)e->target;
   13010:	6943      	ldr	r3, [r0, #20]
    switch (e->index)
   13012:	2a03      	cmp	r2, #3
   13014:	d008      	beq.n	13028 <cosem_getPrimeNbOfdmPlcApplicationsIdentification+0x1a>
   13016:	2a04      	cmp	r2, #4
   13018:	d00a      	beq.n	13030 <cosem_getPrimeNbOfdmPlcApplicationsIdentification+0x22>
   1301a:	2a02      	cmp	r2, #2
   1301c:	d10a      	bne.n	13034 <cosem_getPrimeNbOfdmPlcApplicationsIdentification+0x26>
    {
    case 2:
    {
        ret = cosem_setOctetString2(e->value.byteArr, object->firmwareVersion.data, (uint16_t)object->firmwareVersion.size);
   1301e:	8ada      	ldrh	r2, [r3, #22]
   13020:	6919      	ldr	r1, [r3, #16]
   13022:	6880      	ldr	r0, [r0, #8]
   13024:	f7fa bcd8 	b.w	d9d8 <cosem_setOctetString2>
    }
    break;
    case 3:
        ret = cosem_setUInt16(e->value.byteArr, object->vendorId);
   13028:	8b99      	ldrh	r1, [r3, #28]
        break;
    case 4:
        ret = cosem_setUInt16(e->value.byteArr, object->productId);
   1302a:	6880      	ldr	r0, [r0, #8]
   1302c:	f7fa bd03 	b.w	da36 <cosem_setUInt16>
   13030:	8bd9      	ldrh	r1, [r3, #30]
   13032:	e7fa      	b.n	1302a <cosem_getPrimeNbOfdmPlcApplicationsIdentification+0x1c>
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   13034:	f44f 7081 	mov.w	r0, #258	; 0x102
   13038:	4770      	bx	lr

0001303a <cosem_getArbitrator>:
#endif //DLMS_IGNORE_PRIME_NB_OFDM_PLC_APPLICATIONS_IDENTIFICATION
#ifndef DLMS_IGNORE_ARBITRATOR
int cosem_getArbitrator(gxValueEventArg* e)
{
   1303a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1303e:	7e03      	ldrb	r3, [r0, #24]
    int ret;
    uint16_t pos;
    gxActionItem* it;
    gxByteBuffer* data = e->value.byteArr;
   13040:	6885      	ldr	r5, [r0, #8]
    gxArbitrator* object = (gxArbitrator*)e->target;
   13042:	6946      	ldr	r6, [r0, #20]
    switch (e->index)
   13044:	3b02      	subs	r3, #2
{
   13046:	4607      	mov	r7, r0
   13048:	2b04      	cmp	r3, #4
   1304a:	f200 80da 	bhi.w	13202 <cosem_getArbitrator+0x1c8>
   1304e:	e8df f013 	tbh	[pc, r3, lsl #1]
   13052:	0005      	.short	0x0005
   13054:	00790043 	.word	0x00790043
   13058:	00d20098 	.word	0x00d20098
    {
    case 2:
    {
        if ((ret = cosem_setArray(data, object->actions.size)) == 0)
   1305c:	8af1      	ldrh	r1, [r6, #22]
   1305e:	4628      	mov	r0, r5
   13060:	f7fa fd44 	bl	daec <cosem_setArray>
   13064:	4604      	mov	r4, r0
   13066:	b118      	cbz	r0, 13070 <cosem_getArbitrator+0x36>
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   13068:	4620      	mov	r0, r4
   1306a:	b002      	add	sp, #8
   1306c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13070:	4607      	mov	r7, r0
                if ((ret = arr_getByIndex(&object->actions, pos, (void**)&it)) != 0)
   13072:	f106 0810 	add.w	r8, r6, #16
            for (pos = 0; pos != object->actions.size; ++pos)
   13076:	8af3      	ldrh	r3, [r6, #22]
   13078:	b2b9      	uxth	r1, r7
   1307a:	428b      	cmp	r3, r1
   1307c:	d0f4      	beq.n	13068 <cosem_getArbitrator+0x2e>
                if ((ret = arr_getByIndex(&object->actions, pos, (void**)&it)) != 0)
   1307e:	aa01      	add	r2, sp, #4
   13080:	4640      	mov	r0, r8
   13082:	f7fd f980 	bl	10386 <arr_getByIndex>
   13086:	bb28      	cbnz	r0, 130d4 <cosem_getArbitrator+0x9a>
                if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   13088:	2102      	movs	r1, #2
   1308a:	4628      	mov	r0, r5
   1308c:	f7f9 fe13 	bl	ccb6 <bb_setUInt8>
   13090:	bb00      	cbnz	r0, 130d4 <cosem_getArbitrator+0x9a>
                    (ret = bb_setUInt8(data, 2)) != 0 ||
   13092:	2102      	movs	r1, #2
   13094:	4628      	mov	r0, r5
   13096:	f7f9 fe0e 	bl	ccb6 <bb_setUInt8>
                if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   1309a:	b9d8      	cbnz	r0, 130d4 <cosem_getArbitrator+0x9a>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   1309c:	2109      	movs	r1, #9
   1309e:	4628      	mov	r0, r5
   130a0:	f7f9 fe09 	bl	ccb6 <bb_setUInt8>
                    (ret = bb_setUInt8(data, 2)) != 0 ||
   130a4:	b9b0      	cbnz	r0, 130d4 <cosem_getArbitrator+0x9a>
                    (ret = bb_setUInt8(data, 6)) != 0 ||
   130a6:	2106      	movs	r1, #6
   130a8:	4628      	mov	r0, r5
   130aa:	f7f9 fe04 	bl	ccb6 <bb_setUInt8>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   130ae:	b988      	cbnz	r0, 130d4 <cosem_getArbitrator+0x9a>
                    (ret = bb_set(data, obj_getLogicalName((gxObject*)it->script), 6)) != 0 ||
   130b0:	9b01      	ldr	r3, [sp, #4]
   130b2:	6818      	ldr	r0, [r3, #0]
   130b4:	f7f0 fe98 	bl	3de8 <obj_getLogicalName>
   130b8:	2206      	movs	r2, #6
   130ba:	4601      	mov	r1, r0
   130bc:	4628      	mov	r0, r5
   130be:	f7f9 fee0 	bl	ce82 <bb_set>
                    (ret = bb_setUInt8(data, 6)) != 0 ||
   130c2:	b938      	cbnz	r0, 130d4 <cosem_getArbitrator+0x9a>
                    (ret = cosem_setUInt16(data, it->scriptSelector)) != 0)
   130c4:	9b01      	ldr	r3, [sp, #4]
   130c6:	4628      	mov	r0, r5
   130c8:	8899      	ldrh	r1, [r3, #4]
   130ca:	f7fa fcb4 	bl	da36 <cosem_setUInt16>
   130ce:	3701      	adds	r7, #1
                    (ret = bb_set(data, obj_getLogicalName((gxObject*)it->script), 6)) != 0 ||
   130d0:	2800      	cmp	r0, #0
   130d2:	d0d0      	beq.n	13076 <cosem_getArbitrator+0x3c>
                    (ret = cosem_setUInt16(data, it->scriptSelector)) != 0)
   130d4:	4604      	mov	r4, r0
    return ret;
   130d6:	e7c7      	b.n	13068 <cosem_getArbitrator+0x2e>
        if ((ret = cosem_setArray(data, object->permissionsTable.size)) == 0)
   130d8:	8c71      	ldrh	r1, [r6, #34]	; 0x22
   130da:	4628      	mov	r0, r5
   130dc:	f7fa fd06 	bl	daec <cosem_setArray>
   130e0:	4604      	mov	r4, r0
   130e2:	2800      	cmp	r0, #0
   130e4:	d1c0      	bne.n	13068 <cosem_getArbitrator+0x2e>
   130e6:	4680      	mov	r8, r0
                if ((ret = arr_getByIndex(&object->permissionsTable, pos, (void**)&a)) != 0)
   130e8:	f106 091c 	add.w	r9, r6, #28
   130ec:	e024      	b.n	13138 <cosem_getArbitrator+0xfe>
   130ee:	aa01      	add	r2, sp, #4
   130f0:	4648      	mov	r0, r9
   130f2:	f7fd f948 	bl	10386 <arr_getByIndex>
   130f6:	4604      	mov	r4, r0
   130f8:	2800      	cmp	r0, #0
   130fa:	d1b5      	bne.n	13068 <cosem_getArbitrator+0x2e>
                if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_BIT_STRING)) != 0 ||
   130fc:	2104      	movs	r1, #4
   130fe:	4628      	mov	r0, r5
   13100:	f7f9 fdd9 	bl	ccb6 <bb_setUInt8>
   13104:	4604      	mov	r4, r0
   13106:	2800      	cmp	r0, #0
   13108:	d1ae      	bne.n	13068 <cosem_getArbitrator+0x2e>
                    (ret = hlp_setObjectCount(a->size, data)) != 0)
   1310a:	9b01      	ldr	r3, [sp, #4]
   1310c:	4629      	mov	r1, r5
   1310e:	88d8      	ldrh	r0, [r3, #6]
   13110:	f006 fbc0 	bl	19894 <hlp_setObjectCount>
   13114:	f108 0801 	add.w	r8, r8, #1
                if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_BIT_STRING)) != 0 ||
   13118:	4604      	mov	r4, r0
   1311a:	2800      	cmp	r0, #0
   1311c:	d1a4      	bne.n	13068 <cosem_getArbitrator+0x2e>
                ret = bb_set(e->value.byteArr, a->data, ba_getByteCount(a->size));
   1311e:	9b01      	ldr	r3, [sp, #4]
   13120:	68bc      	ldr	r4, [r7, #8]
   13122:	88d8      	ldrh	r0, [r3, #6]
   13124:	f8d3 a000 	ldr.w	sl, [r3]
   13128:	f7ee f8d4 	bl	12d4 <ba_getByteCount>
   1312c:	4651      	mov	r1, sl
   1312e:	4602      	mov	r2, r0
   13130:	4620      	mov	r0, r4
   13132:	f7f9 fea6 	bl	ce82 <bb_set>
   13136:	4604      	mov	r4, r0
            for (pos = 0; pos != object->permissionsTable.size; ++pos)
   13138:	8c73      	ldrh	r3, [r6, #34]	; 0x22
   1313a:	fa1f f188 	uxth.w	r1, r8
   1313e:	428b      	cmp	r3, r1
   13140:	d1d5      	bne.n	130ee <cosem_getArbitrator+0xb4>
   13142:	e791      	b.n	13068 <cosem_getArbitrator+0x2e>
        if ((ret = cosem_setArray(data, object->weightingsTable.size)) == 0)
   13144:	8df1      	ldrh	r1, [r6, #46]	; 0x2e
   13146:	4628      	mov	r0, r5
   13148:	f7fa fcd0 	bl	daec <cosem_setArray>
   1314c:	4604      	mov	r4, r0
   1314e:	2800      	cmp	r0, #0
   13150:	d18a      	bne.n	13068 <cosem_getArbitrator+0x2e>
   13152:	4680      	mov	r8, r0
                if ((ret = arr_getByIndex(&object->weightingsTable, pos, (void**)&v)) != 0)
   13154:	f106 0728 	add.w	r7, r6, #40	; 0x28
   13158:	e00d      	b.n	13176 <cosem_getArbitrator+0x13c>
   1315a:	aa01      	add	r2, sp, #4
   1315c:	4638      	mov	r0, r7
   1315e:	f7fd f912 	bl	10386 <arr_getByIndex>
   13162:	2800      	cmp	r0, #0
   13164:	d1b6      	bne.n	130d4 <cosem_getArbitrator+0x9a>
                if ((ret = cosem_setVariant(data, v)) != 0)
   13166:	9901      	ldr	r1, [sp, #4]
   13168:	4628      	mov	r0, r5
   1316a:	f7fa fcaa 	bl	dac2 <cosem_setVariant>
   1316e:	f108 0801 	add.w	r8, r8, #1
   13172:	2800      	cmp	r0, #0
   13174:	d1ae      	bne.n	130d4 <cosem_getArbitrator+0x9a>
            for (pos = 0; pos != object->weightingsTable.size; ++pos)
   13176:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
   13178:	fa1f f188 	uxth.w	r1, r8
   1317c:	428b      	cmp	r3, r1
   1317e:	d1ec      	bne.n	1315a <cosem_getArbitrator+0x120>
   13180:	e772      	b.n	13068 <cosem_getArbitrator+0x2e>
        if ((ret = cosem_setArray(data, object->mostRecentRequestsTable.size)) == 0)
   13182:	8f71      	ldrh	r1, [r6, #58]	; 0x3a
   13184:	4628      	mov	r0, r5
   13186:	f7fa fcb1 	bl	daec <cosem_setArray>
   1318a:	4604      	mov	r4, r0
   1318c:	2800      	cmp	r0, #0
   1318e:	f47f af6b 	bne.w	13068 <cosem_getArbitrator+0x2e>
   13192:	4680      	mov	r8, r0
                if ((ret = arr_getByIndex(&object->mostRecentRequestsTable, pos, (void**)&a)) != 0)
   13194:	f106 0934 	add.w	r9, r6, #52	; 0x34
   13198:	e027      	b.n	131ea <cosem_getArbitrator+0x1b0>
   1319a:	aa01      	add	r2, sp, #4
   1319c:	4648      	mov	r0, r9
   1319e:	f7fd f8f2 	bl	10386 <arr_getByIndex>
   131a2:	4604      	mov	r4, r0
   131a4:	2800      	cmp	r0, #0
   131a6:	f47f af5f 	bne.w	13068 <cosem_getArbitrator+0x2e>
                if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_BIT_STRING)) != 0 ||
   131aa:	2104      	movs	r1, #4
   131ac:	4628      	mov	r0, r5
   131ae:	f7f9 fd82 	bl	ccb6 <bb_setUInt8>
   131b2:	4604      	mov	r4, r0
   131b4:	2800      	cmp	r0, #0
   131b6:	f47f af57 	bne.w	13068 <cosem_getArbitrator+0x2e>
                    (ret = hlp_setObjectCount(a->size, data)) != 0)
   131ba:	9b01      	ldr	r3, [sp, #4]
   131bc:	4629      	mov	r1, r5
   131be:	88d8      	ldrh	r0, [r3, #6]
   131c0:	f006 fb68 	bl	19894 <hlp_setObjectCount>
   131c4:	f108 0801 	add.w	r8, r8, #1
                if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_BIT_STRING)) != 0 ||
   131c8:	4604      	mov	r4, r0
   131ca:	2800      	cmp	r0, #0
   131cc:	f47f af4c 	bne.w	13068 <cosem_getArbitrator+0x2e>
                ret = bb_set(e->value.byteArr, a->data, ba_getByteCount(a->size));
   131d0:	9b01      	ldr	r3, [sp, #4]
   131d2:	68bc      	ldr	r4, [r7, #8]
   131d4:	88d8      	ldrh	r0, [r3, #6]
   131d6:	f8d3 a000 	ldr.w	sl, [r3]
   131da:	f7ee f87b 	bl	12d4 <ba_getByteCount>
   131de:	4651      	mov	r1, sl
   131e0:	4602      	mov	r2, r0
   131e2:	4620      	mov	r0, r4
   131e4:	f7f9 fe4d 	bl	ce82 <bb_set>
   131e8:	4604      	mov	r4, r0
            for (pos = 0; pos != object->mostRecentRequestsTable.size; ++pos)
   131ea:	8f73      	ldrh	r3, [r6, #58]	; 0x3a
   131ec:	fa1f f188 	uxth.w	r1, r8
   131f0:	428b      	cmp	r3, r1
   131f2:	d1d2      	bne.n	1319a <cosem_getArbitrator+0x160>
   131f4:	e738      	b.n	13068 <cosem_getArbitrator+0x2e>
        ret = cosem_setUInt8(data, object->lastOutcome);
   131f6:	f896 1040 	ldrb.w	r1, [r6, #64]	; 0x40
   131fa:	4628      	mov	r0, r5
   131fc:	f7fa fc0d 	bl	da1a <cosem_setUInt8>
   13200:	e768      	b.n	130d4 <cosem_getArbitrator+0x9a>
    switch (e->index)
   13202:	f44f 7481 	mov.w	r4, #258	; 0x102
   13206:	e72f      	b.n	13068 <cosem_getArbitrator+0x2e>

00013208 <cosem_getIec8802LlcType1Setup>:
    gxValueEventArg* e)
{
    int ret = 0;
    gxByteBuffer* data = e->value.byteArr;
    gxIec8802LlcType1Setup* object = (gxIec8802LlcType1Setup*)e->target;
    if (e->index == 2)
   13208:	7e03      	ldrb	r3, [r0, #24]
   1320a:	2b02      	cmp	r3, #2
   1320c:	d104      	bne.n	13218 <cosem_getIec8802LlcType1Setup+0x10>
    {
        ret = cosem_setUInt16(data, object->maximumOctetsUiPdu);
   1320e:	6943      	ldr	r3, [r0, #20]
   13210:	6880      	ldr	r0, [r0, #8]
   13212:	8a19      	ldrh	r1, [r3, #16]
   13214:	f7fa bc0f 	b.w	da36 <cosem_setUInt16>
    else
    {
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    return ret;
}
   13218:	f44f 7081 	mov.w	r0, #258	; 0x102
   1321c:	4770      	bx	lr

0001321e <cosem_getIec8802LlcType2Setup>:
#endif //DLMS_IGNORE_IEC_8802_LLC_TYPE1_SETUP
#ifndef DLMS_IGNORE_IEC_8802_LLC_TYPE2_SETUP
int cosem_getIec8802LlcType2Setup(
    gxValueEventArg* e)
{
   1321e:	4602      	mov	r2, r0
    int ret = 0;
    gxByteBuffer* data = e->value.byteArr;
   13220:	6880      	ldr	r0, [r0, #8]
    gxIec8802LlcType2Setup* object = (gxIec8802LlcType2Setup*)e->target;
   13222:	6953      	ldr	r3, [r2, #20]
    switch (e->index)
   13224:	7e12      	ldrb	r2, [r2, #24]
   13226:	3a02      	subs	r2, #2
   13228:	2a07      	cmp	r2, #7
   1322a:	d817      	bhi.n	1325c <cosem_getIec8802LlcType2Setup+0x3e>
   1322c:	e8df f002 	tbb	[pc, r2]
   13230:	0c090704 	.word	0x0c090704
   13234:	1412100e 	.word	0x1412100e
    {
    case 2:
        ret = cosem_setUInt8(data, object->transmitWindowSizeK);
   13238:	7c19      	ldrb	r1, [r3, #16]
        break;
    case 3:
        ret = cosem_setUInt8(data, object->transmitWindowSizeRW);
   1323a:	f7fa bbee 	b.w	da1a <cosem_setUInt8>
   1323e:	7c59      	ldrb	r1, [r3, #17]
   13240:	e7fb      	b.n	1323a <cosem_getIec8802LlcType2Setup+0x1c>
        break;
    case 4:
        ret = cosem_setUInt16(data, object->maximumOctetsPdu);
   13242:	8a59      	ldrh	r1, [r3, #18]
        break;
    case 8:
        ret = cosem_setUInt16(data, object->rejectTimer);
        break;
    case 9:
        ret = cosem_setUInt16(data, object->busyStateTimer);
   13244:	f7fa bbf7 	b.w	da36 <cosem_setUInt16>
        ret = cosem_setUInt8(data, object->maximumNumberTransmissions);
   13248:	7d19      	ldrb	r1, [r3, #20]
   1324a:	e7f6      	b.n	1323a <cosem_getIec8802LlcType2Setup+0x1c>
        ret = cosem_setUInt16(data, object->acknowledgementTimer);
   1324c:	8ad9      	ldrh	r1, [r3, #22]
   1324e:	e7f9      	b.n	13244 <cosem_getIec8802LlcType2Setup+0x26>
        ret = cosem_setUInt16(data, object->bitTimer);
   13250:	8b19      	ldrh	r1, [r3, #24]
   13252:	e7f7      	b.n	13244 <cosem_getIec8802LlcType2Setup+0x26>
        ret = cosem_setUInt16(data, object->rejectTimer);
   13254:	8b59      	ldrh	r1, [r3, #26]
   13256:	e7f5      	b.n	13244 <cosem_getIec8802LlcType2Setup+0x26>
        ret = cosem_setUInt16(data, object->busyStateTimer);
   13258:	8b99      	ldrh	r1, [r3, #28]
   1325a:	e7f3      	b.n	13244 <cosem_getIec8802LlcType2Setup+0x26>
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   1325c:	f44f 7081 	mov.w	r0, #258	; 0x102
   13260:	4770      	bx	lr

00013262 <cosem_getIec8802LlcType3Setup>:

#endif //DLMS_IGNORE_IEC_8802_LLC_TYPE2_SETUP
#ifndef DLMS_IGNORE_IEC_8802_LLC_TYPE3_SETUP
int cosem_getIec8802LlcType3Setup(
    gxValueEventArg* e)
{
   13262:	4602      	mov	r2, r0
    int ret = 0;
    gxByteBuffer* data = e->value.byteArr;
   13264:	6880      	ldr	r0, [r0, #8]
    gxIec8802LlcType3Setup* object = (gxIec8802LlcType3Setup*)e->target;
   13266:	6953      	ldr	r3, [r2, #20]
    switch (e->index)
   13268:	7e12      	ldrb	r2, [r2, #24]
   1326a:	3a02      	subs	r2, #2
   1326c:	2a04      	cmp	r2, #4
   1326e:	d810      	bhi.n	13292 <cosem_getIec8802LlcType3Setup+0x30>
   13270:	e8df f002 	tbb	[pc, r2]
   13274:	0b090603 	.word	0x0b090603
   13278:	0d          	.byte	0x0d
   13279:	00          	.byte	0x00
    {
    case 2:
        ret = cosem_setUInt16(data, object->maximumOctetsACnPdu);
   1327a:	8a19      	ldrh	r1, [r3, #16]
        break;
    case 5:
        ret = cosem_setUInt16(data, object->receiveLifetime);
        break;
    case 6:
        ret = cosem_setUInt16(data, object->transmitLifetime);
   1327c:	f7fa bbdb 	b.w	da36 <cosem_setUInt16>
        ret = cosem_setUInt8(data, object->maximumTransmissions);
   13280:	7c99      	ldrb	r1, [r3, #18]
   13282:	f7fa bbca 	b.w	da1a <cosem_setUInt8>
        ret = cosem_setUInt16(data, object->acknowledgementTime);
   13286:	8a99      	ldrh	r1, [r3, #20]
   13288:	e7f8      	b.n	1327c <cosem_getIec8802LlcType3Setup+0x1a>
        ret = cosem_setUInt16(data, object->receiveLifetime);
   1328a:	8ad9      	ldrh	r1, [r3, #22]
   1328c:	e7f6      	b.n	1327c <cosem_getIec8802LlcType3Setup+0x1a>
        ret = cosem_setUInt16(data, object->transmitLifetime);
   1328e:	8b19      	ldrh	r1, [r3, #24]
   13290:	e7f4      	b.n	1327c <cosem_getIec8802LlcType3Setup+0x1a>
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   13292:	f44f 7081 	mov.w	r0, #258	; 0x102
   13296:	4770      	bx	lr

00013298 <cosem_getSFSKActiveInitiator>:
#endif //DLMS_IGNORE_IEC_8802_LLC_TYPE3_SETUP
#ifndef DLMS_IGNORE_SFSK_ACTIVE_INITIATOR
int cosem_getSFSKActiveInitiator(
    gxValueEventArg* e)
{
   13298:	b538      	push	{r3, r4, r5, lr}
    int ret;
    gxByteBuffer* data = e->value.byteArr;
    gxSFSKActiveInitiator* object = (gxSFSKActiveInitiator*)e->target;
    if (e->index == 2)
   1329a:	7e03      	ldrb	r3, [r0, #24]
   1329c:	2b02      	cmp	r3, #2
   1329e:	d117      	bne.n	132d0 <cosem_getSFSKActiveInitiator+0x38>
    gxByteBuffer* data = e->value.byteArr;
   132a0:	6884      	ldr	r4, [r0, #8]
    gxSFSKActiveInitiator* object = (gxSFSKActiveInitiator*)e->target;
   132a2:	6945      	ldr	r5, [r0, #20]
    {
        if ((ret = cosem_setStructure(data, 3)) == 0 &&
   132a4:	2103      	movs	r1, #3
   132a6:	4620      	mov	r0, r4
   132a8:	f7fa fc12 	bl	dad0 <cosem_setStructure>
   132ac:	b990      	cbnz	r0, 132d4 <cosem_getSFSKActiveInitiator+0x3c>
            (ret = cosem_setOctetString(data, &object->systemTitle)) == 0 &&
   132ae:	f105 0110 	add.w	r1, r5, #16
   132b2:	4620      	mov	r0, r4
   132b4:	f7fa fb43 	bl	d93e <cosem_setOctetString>
        if ((ret = cosem_setStructure(data, 3)) == 0 &&
   132b8:	b960      	cbnz	r0, 132d4 <cosem_getSFSKActiveInitiator+0x3c>
            (ret = cosem_setUInt16(data, object->macAddress)) == 0 &&
   132ba:	8ba9      	ldrh	r1, [r5, #28]
   132bc:	4620      	mov	r0, r4
   132be:	f7fa fbba 	bl	da36 <cosem_setUInt16>
            (ret = cosem_setOctetString(data, &object->systemTitle)) == 0 &&
   132c2:	b938      	cbnz	r0, 132d4 <cosem_getSFSKActiveInitiator+0x3c>
            (ret = cosem_setUInt8(data, object->lSapSelector)) == 0)
   132c4:	7fa9      	ldrb	r1, [r5, #30]
   132c6:	4620      	mov	r0, r4
    else
    {
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    return ret;
}
   132c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            (ret = cosem_setUInt8(data, object->lSapSelector)) == 0)
   132cc:	f7fa bba5 	b.w	da1a <cosem_setUInt8>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   132d0:	f44f 7081 	mov.w	r0, #258	; 0x102
}
   132d4:	bd38      	pop	{r3, r4, r5, pc}

000132d6 <cosem_getFSKMacCounters>:
#endif //DLMS_IGNORE_SFSK_ACTIVE_INITIATOR
#ifndef DLMS_IGNORE_SFSK_MAC_COUNTERS
int cosem_getFSKMacCounters(
    gxValueEventArg* e)
{
   132d6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   132da:	7e03      	ldrb	r3, [r0, #24]
    int ret = 0;
    uint16_t pos;
    gxByteBuffer* data = e->value.byteArr;
   132dc:	6885      	ldr	r5, [r0, #8]
    gxFSKMacCounters* object = (gxFSKMacCounters*)e->target;
   132de:	6946      	ldr	r6, [r0, #20]
    switch (e->index)
   132e0:	3b02      	subs	r3, #2
   132e2:	2b06      	cmp	r3, #6
   132e4:	f200 808c 	bhi.w	13400 <cosem_getFSKMacCounters+0x12a>
   132e8:	e8df f003 	tbb	[pc, r3]
   132ec:	82572f04 	.word	0x82572f04
   132f0:	8684      	.short	0x8684
   132f2:	88          	.byte	0x88
   132f3:	00          	.byte	0x00
    {
    case 2:
    {
        gxUint16PairUint32* it;
        if ((ret = cosem_setArray(data, object->synchronizationRegister.size)) == 0)
   132f4:	8af1      	ldrh	r1, [r6, #22]
   132f6:	4628      	mov	r0, r5
   132f8:	f7fa fbf8 	bl	daec <cosem_setArray>
   132fc:	4604      	mov	r4, r0
   132fe:	b118      	cbz	r0, 13308 <cosem_getFSKMacCounters+0x32>
        break;
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    return ret;
}
   13300:	4620      	mov	r0, r4
   13302:	b002      	add	sp, #8
   13304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13308:	4607      	mov	r7, r0
                if ((ret = arr_getByIndex(&object->synchronizationRegister, pos, (void**)&it)) != 0)
   1330a:	f106 0810 	add.w	r8, r6, #16
            for (pos = 0; pos != object->synchronizationRegister.size; ++pos)
   1330e:	8af3      	ldrh	r3, [r6, #22]
   13310:	b2b9      	uxth	r1, r7
   13312:	428b      	cmp	r3, r1
   13314:	d0f4      	beq.n	13300 <cosem_getFSKMacCounters+0x2a>
                if ((ret = arr_getByIndex(&object->synchronizationRegister, pos, (void**)&it)) != 0)
   13316:	aa01      	add	r2, sp, #4
   13318:	4640      	mov	r0, r8
   1331a:	f7fd f834 	bl	10386 <arr_getByIndex>
   1331e:	b990      	cbnz	r0, 13346 <cosem_getFSKMacCounters+0x70>
                if ((ret = cosem_setStructure(data, 2)) != 0 ||
   13320:	2102      	movs	r1, #2
   13322:	4628      	mov	r0, r5
   13324:	f7fa fbd4 	bl	dad0 <cosem_setStructure>
   13328:	b968      	cbnz	r0, 13346 <cosem_getFSKMacCounters+0x70>
                    (ret = cosem_setUInt16(data, it->first)) != 0 ||
   1332a:	9b01      	ldr	r3, [sp, #4]
   1332c:	4628      	mov	r0, r5
   1332e:	8819      	ldrh	r1, [r3, #0]
   13330:	f7fa fb81 	bl	da36 <cosem_setUInt16>
                if ((ret = cosem_setStructure(data, 2)) != 0 ||
   13334:	b938      	cbnz	r0, 13346 <cosem_getFSKMacCounters+0x70>
                    (ret = cosem_setUInt32(data, it->second)) != 0)
   13336:	9b01      	ldr	r3, [sp, #4]
   13338:	4628      	mov	r0, r5
   1333a:	6859      	ldr	r1, [r3, #4]
   1333c:	f7fa fb89 	bl	da52 <cosem_setUInt32>
   13340:	3701      	adds	r7, #1
                    (ret = cosem_setUInt16(data, it->first)) != 0 ||
   13342:	2800      	cmp	r0, #0
   13344:	d0e3      	beq.n	1330e <cosem_getFSKMacCounters+0x38>
        ret = cosem_setUInt32(data, object->crcNOkFramesCounter);
   13346:	4604      	mov	r4, r0
        break;
   13348:	e7da      	b.n	13300 <cosem_getFSKMacCounters+0x2a>
        if ((ret = cosem_setStructure(data, 5)) == 0 &&
   1334a:	2105      	movs	r1, #5
   1334c:	4628      	mov	r0, r5
   1334e:	f7fa fbbf 	bl	dad0 <cosem_setStructure>
   13352:	4604      	mov	r4, r0
   13354:	2800      	cmp	r0, #0
   13356:	d1d3      	bne.n	13300 <cosem_getFSKMacCounters+0x2a>
            (ret = cosem_setUInt32(data, object->physicalLayerDesynchronization)) == 0 &&
   13358:	69f1      	ldr	r1, [r6, #28]
   1335a:	4628      	mov	r0, r5
   1335c:	f7fa fb79 	bl	da52 <cosem_setUInt32>
        if ((ret = cosem_setStructure(data, 5)) == 0 &&
   13360:	4604      	mov	r4, r0
   13362:	2800      	cmp	r0, #0
   13364:	d1cc      	bne.n	13300 <cosem_getFSKMacCounters+0x2a>
            (ret = cosem_setUInt32(data, object->timeOutNotAddressedDesynchronization)) == 0 &&
   13366:	6a31      	ldr	r1, [r6, #32]
   13368:	4628      	mov	r0, r5
   1336a:	f7fa fb72 	bl	da52 <cosem_setUInt32>
            (ret = cosem_setUInt32(data, object->physicalLayerDesynchronization)) == 0 &&
   1336e:	4604      	mov	r4, r0
   13370:	2800      	cmp	r0, #0
   13372:	d1c5      	bne.n	13300 <cosem_getFSKMacCounters+0x2a>
            (ret = cosem_setUInt32(data, object->timeOutFrameNotOkDesynchronization)) == 0 &&
   13374:	6a71      	ldr	r1, [r6, #36]	; 0x24
   13376:	4628      	mov	r0, r5
   13378:	f7fa fb6b 	bl	da52 <cosem_setUInt32>
            (ret = cosem_setUInt32(data, object->timeOutNotAddressedDesynchronization)) == 0 &&
   1337c:	4604      	mov	r4, r0
   1337e:	2800      	cmp	r0, #0
   13380:	d1be      	bne.n	13300 <cosem_getFSKMacCounters+0x2a>
            (ret = cosem_setUInt32(data, object->writeRequestDesynchronization)) == 0 &&
   13382:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   13384:	4628      	mov	r0, r5
   13386:	f7fa fb64 	bl	da52 <cosem_setUInt32>
            (ret = cosem_setUInt32(data, object->timeOutFrameNotOkDesynchronization)) == 0 &&
   1338a:	4604      	mov	r4, r0
   1338c:	2800      	cmp	r0, #0
   1338e:	d1b7      	bne.n	13300 <cosem_getFSKMacCounters+0x2a>
            (ret = cosem_setUInt32(data, object->wrongInitiatorDesynchronization)) == 0)
   13390:	6af1      	ldr	r1, [r6, #44]	; 0x2c
        ret = cosem_setUInt32(data, object->crcNOkFramesCounter);
   13392:	4628      	mov	r0, r5
   13394:	f7fa fb5d 	bl	da52 <cosem_setUInt32>
   13398:	e7d5      	b.n	13346 <cosem_getFSKMacCounters+0x70>
        if ((ret = cosem_setArray(data, object->broadcastFramesCounter.size)) == 0)
   1339a:	8ef1      	ldrh	r1, [r6, #54]	; 0x36
   1339c:	4628      	mov	r0, r5
   1339e:	f7fa fba5 	bl	daec <cosem_setArray>
   133a2:	4604      	mov	r4, r0
   133a4:	2800      	cmp	r0, #0
   133a6:	d1ab      	bne.n	13300 <cosem_getFSKMacCounters+0x2a>
   133a8:	4607      	mov	r7, r0
                if ((ret = arr_getByIndex(&object->broadcastFramesCounter, pos, (void**)&it)) != 0)
   133aa:	f106 0830 	add.w	r8, r6, #48	; 0x30
   133ae:	e01a      	b.n	133e6 <cosem_getFSKMacCounters+0x110>
   133b0:	aa01      	add	r2, sp, #4
   133b2:	4640      	mov	r0, r8
   133b4:	f7fc ffe7 	bl	10386 <arr_getByIndex>
   133b8:	2800      	cmp	r0, #0
   133ba:	d1c4      	bne.n	13346 <cosem_getFSKMacCounters+0x70>
                if ((ret = cosem_setStructure(data, 2)) != 0 ||
   133bc:	2102      	movs	r1, #2
   133be:	4628      	mov	r0, r5
   133c0:	f7fa fb86 	bl	dad0 <cosem_setStructure>
   133c4:	2800      	cmp	r0, #0
   133c6:	d1be      	bne.n	13346 <cosem_getFSKMacCounters+0x70>
                    (ret = cosem_setUInt16(data, it->first)) != 0 ||
   133c8:	9b01      	ldr	r3, [sp, #4]
   133ca:	4628      	mov	r0, r5
   133cc:	8819      	ldrh	r1, [r3, #0]
   133ce:	f7fa fb32 	bl	da36 <cosem_setUInt16>
                if ((ret = cosem_setStructure(data, 2)) != 0 ||
   133d2:	2800      	cmp	r0, #0
   133d4:	d1b7      	bne.n	13346 <cosem_getFSKMacCounters+0x70>
                    (ret = cosem_setUInt32(data, it->second)) != 0)
   133d6:	9b01      	ldr	r3, [sp, #4]
   133d8:	4628      	mov	r0, r5
   133da:	6859      	ldr	r1, [r3, #4]
   133dc:	f7fa fb39 	bl	da52 <cosem_setUInt32>
   133e0:	3701      	adds	r7, #1
                    (ret = cosem_setUInt16(data, it->first)) != 0 ||
   133e2:	2800      	cmp	r0, #0
   133e4:	d1af      	bne.n	13346 <cosem_getFSKMacCounters+0x70>
            for (pos = 0; pos != object->broadcastFramesCounter.size; ++pos)
   133e6:	8ef3      	ldrh	r3, [r6, #54]	; 0x36
   133e8:	b2b9      	uxth	r1, r7
   133ea:	428b      	cmp	r3, r1
   133ec:	d1e0      	bne.n	133b0 <cosem_getFSKMacCounters+0xda>
   133ee:	e787      	b.n	13300 <cosem_getFSKMacCounters+0x2a>
        ret = cosem_setUInt32(data, object->repetitionsCounter);
   133f0:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   133f2:	e7ce      	b.n	13392 <cosem_getFSKMacCounters+0xbc>
        ret = cosem_setUInt32(data, object->transmissionsCounter);
   133f4:	6c31      	ldr	r1, [r6, #64]	; 0x40
   133f6:	e7cc      	b.n	13392 <cosem_getFSKMacCounters+0xbc>
        ret = cosem_setUInt32(data, object->crcOkFramesCounter);
   133f8:	6c71      	ldr	r1, [r6, #68]	; 0x44
   133fa:	e7ca      	b.n	13392 <cosem_getFSKMacCounters+0xbc>
        ret = cosem_setUInt32(data, object->crcNOkFramesCounter);
   133fc:	6cb1      	ldr	r1, [r6, #72]	; 0x48
   133fe:	e7c8      	b.n	13392 <cosem_getFSKMacCounters+0xbc>
    switch (e->index)
   13400:	f44f 7481 	mov.w	r4, #258	; 0x102
    return ret;
   13404:	e77c      	b.n	13300 <cosem_getFSKMacCounters+0x2a>

00013406 <cosem_getSFSKMacSynchronizationTimeouts>:
#endif //DLMS_IGNORE_SFSK_MAC_COUNTERS

#ifndef DLMS_IGNORE_SFSK_MAC_SYNCHRONIZATION_TIMEOUTS
int cosem_getSFSKMacSynchronizationTimeouts(
    gxValueEventArg* e)
{
   13406:	4603      	mov	r3, r0
    int ret = 0;
    gxByteBuffer* data = e->value.byteArr;
   13408:	6880      	ldr	r0, [r0, #8]
    gxSFSKMacSynchronizationTimeouts* object = (gxSFSKMacSynchronizationTimeouts*)e->target;
   1340a:	695a      	ldr	r2, [r3, #20]
    switch (e->index)
   1340c:	7e1b      	ldrb	r3, [r3, #24]
   1340e:	3b02      	subs	r3, #2
   13410:	2b03      	cmp	r3, #3
   13412:	d80c      	bhi.n	1342e <cosem_getSFSKMacSynchronizationTimeouts+0x28>
   13414:	e8df f003 	tbb	[pc, r3]
   13418:	09070502 	.word	0x09070502
    {
    case 2:
        ret = cosem_setUInt16(data, object->searchInitiatorTimeout);
   1341c:	8a11      	ldrh	r1, [r2, #16]
        break;
    case 4:
        ret = cosem_setUInt16(data, object->timeOutNotAddressed);
        break;
    case 5:
        ret = cosem_setUInt16(data, object->timeOutFrameNotOK);
   1341e:	f7fa bb0a 	b.w	da36 <cosem_setUInt16>
        ret = cosem_setUInt16(data, object->synchronizationConfirmationTimeout);
   13422:	8a51      	ldrh	r1, [r2, #18]
   13424:	e7fb      	b.n	1341e <cosem_getSFSKMacSynchronizationTimeouts+0x18>
        ret = cosem_setUInt16(data, object->timeOutNotAddressed);
   13426:	8a91      	ldrh	r1, [r2, #20]
   13428:	e7f9      	b.n	1341e <cosem_getSFSKMacSynchronizationTimeouts+0x18>
        ret = cosem_setUInt16(data, object->timeOutFrameNotOK);
   1342a:	8ad1      	ldrh	r1, [r2, #22]
   1342c:	e7f7      	b.n	1341e <cosem_getSFSKMacSynchronizationTimeouts+0x18>
        break;
    default:
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    return ret;
}
   1342e:	f44f 7081 	mov.w	r0, #258	; 0x102
   13432:	4770      	bx	lr

00013434 <cosem_getSFSKPhyMacSetUp>:
#endif //DLMS_IGNORE_SFSK_MAC_SYNCHRONIZATION_TIMEOUTS
#ifndef DLMS_IGNORE_SFSK_PHY_MAC_SETUP
int cosem_getSFSKPhyMacSetUp(
    gxValueEventArg* e)
{
   13434:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   13438:	7e03      	ldrb	r3, [r0, #24]
    int ret = 0;
    gxByteBuffer* data = e->value.byteArr;
   1343a:	6885      	ldr	r5, [r0, #8]
    gxSFSKPhyMacSetUp* object = (gxSFSKPhyMacSetUp*)e->target;
   1343c:	6946      	ldr	r6, [r0, #20]
    switch (e->index)
   1343e:	3b02      	subs	r3, #2
   13440:	2b0d      	cmp	r3, #13
   13442:	d866      	bhi.n	13512 <cosem_getSFSKPhyMacSetUp+0xde>
   13444:	e8df f003 	tbb	[pc, r3]
   13448:	130e0c07 	.word	0x130e0c07
   1344c:	2e291715 	.word	0x2e291715
   13450:	5d5a5451 	.word	0x5d5a5451
   13454:	625f      	.short	0x625f
    {
    case 2:
        ret = cosem_setEnum(data, object->initiatorElectricalPhase);
   13456:	7c31      	ldrb	r1, [r6, #16]
        break;
    case 14:
        ret = cosem_setBoolean(data, object->synchronizationLocked);
        break;
    case 15:
        ret = cosem_setEnum(data, object->transmissionSpeed);
   13458:	4628      	mov	r0, r5
   1345a:	f7fa fb55 	bl	db08 <cosem_setEnum>
   1345e:	e01a      	b.n	13496 <cosem_getSFSKPhyMacSetUp+0x62>
        ret = cosem_setEnum(data, object->deltaElectricalPhase);
   13460:	7c71      	ldrb	r1, [r6, #17]
   13462:	e7f9      	b.n	13458 <cosem_getSFSKPhyMacSetUp+0x24>
        ret = cosem_setUInt8(data, object->maxReceivingGain);
   13464:	7cb1      	ldrb	r1, [r6, #18]
        ret = cosem_setUInt8(data, object->minDeltaCredit);
   13466:	4628      	mov	r0, r5
   13468:	f7fa fad7 	bl	da1a <cosem_setUInt8>
   1346c:	e013      	b.n	13496 <cosem_getSFSKPhyMacSetUp+0x62>
        ret = cosem_setUInt8(data, object->maxTransmittingGain);
   1346e:	7cf1      	ldrb	r1, [r6, #19]
   13470:	e7f9      	b.n	13466 <cosem_getSFSKPhyMacSetUp+0x32>
        ret = cosem_setUInt8(data, object->searchInitiatorThreshold);
   13472:	7d31      	ldrb	r1, [r6, #20]
   13474:	e7f7      	b.n	13466 <cosem_getSFSKPhyMacSetUp+0x32>
        if ((ret = cosem_setStructure(data, 2)) == 0 &&
   13476:	2102      	movs	r1, #2
   13478:	4628      	mov	r0, r5
   1347a:	f7fa fb29 	bl	dad0 <cosem_setStructure>
   1347e:	4604      	mov	r4, r0
   13480:	b9b0      	cbnz	r0, 134b0 <cosem_getSFSKPhyMacSetUp+0x7c>
            (ret = cosem_setUInt32(data, object->markFrequency)) == 0 &&
   13482:	69b1      	ldr	r1, [r6, #24]
   13484:	4628      	mov	r0, r5
   13486:	f7fa fae4 	bl	da52 <cosem_setUInt32>
        if ((ret = cosem_setStructure(data, 2)) == 0 &&
   1348a:	4604      	mov	r4, r0
   1348c:	b980      	cbnz	r0, 134b0 <cosem_getSFSKPhyMacSetUp+0x7c>
            (ret = cosem_setUInt32(data, object->spaceFrequency)) == 0)
   1348e:	69f1      	ldr	r1, [r6, #28]
   13490:	4628      	mov	r0, r5
   13492:	f7fa fade 	bl	da52 <cosem_setUInt32>
        ret = cosem_setEnum(data, object->transmissionSpeed);
   13496:	4604      	mov	r4, r0
        break;
   13498:	e00a      	b.n	134b0 <cosem_getSFSKPhyMacSetUp+0x7c>
        ret = cosem_setUInt16(data, object->macAddress);
   1349a:	8c31      	ldrh	r1, [r6, #32]
        ret = cosem_setUInt16(data, object->initiatorMacAddress);
   1349c:	4628      	mov	r0, r5
   1349e:	f7fa faca 	bl	da36 <cosem_setUInt16>
   134a2:	e7f8      	b.n	13496 <cosem_getSFSKPhyMacSetUp+0x62>
        if ((ret = cosem_setArray(data, object->macGroupAddresses.size)) == 0)
   134a4:	8d71      	ldrh	r1, [r6, #42]	; 0x2a
   134a6:	4628      	mov	r0, r5
   134a8:	f7fa fb20 	bl	daec <cosem_setArray>
   134ac:	4604      	mov	r4, r0
   134ae:	b1c0      	cbz	r0, 134e2 <cosem_getSFSKPhyMacSetUp+0xae>
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   134b0:	4620      	mov	r0, r4
   134b2:	b002      	add	sp, #8
   134b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if ((ret = arr_getByIndex(&object->macGroupAddresses, pos, (void**)&it)) != 0)
   134b8:	aa01      	add	r2, sp, #4
   134ba:	4638      	mov	r0, r7
   134bc:	f7fc ff63 	bl	10386 <arr_getByIndex>
   134c0:	2800      	cmp	r0, #0
   134c2:	d1e8      	bne.n	13496 <cosem_getSFSKPhyMacSetUp+0x62>
                if ((ret = cosem_setUInt16(data, *it)) != 0)
   134c4:	9b01      	ldr	r3, [sp, #4]
   134c6:	4628      	mov	r0, r5
   134c8:	8819      	ldrh	r1, [r3, #0]
   134ca:	f7fa fab4 	bl	da36 <cosem_setUInt16>
   134ce:	f108 0801 	add.w	r8, r8, #1
   134d2:	2800      	cmp	r0, #0
   134d4:	d1df      	bne.n	13496 <cosem_getSFSKPhyMacSetUp+0x62>
            for (pos = 0; pos != object->macGroupAddresses.size; ++pos)
   134d6:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
   134d8:	fa1f f188 	uxth.w	r1, r8
   134dc:	428b      	cmp	r3, r1
   134de:	d1eb      	bne.n	134b8 <cosem_getSFSKPhyMacSetUp+0x84>
   134e0:	e7e6      	b.n	134b0 <cosem_getSFSKPhyMacSetUp+0x7c>
   134e2:	4680      	mov	r8, r0
                if ((ret = arr_getByIndex(&object->macGroupAddresses, pos, (void**)&it)) != 0)
   134e4:	f106 0724 	add.w	r7, r6, #36	; 0x24
   134e8:	e7f5      	b.n	134d6 <cosem_getSFSKPhyMacSetUp+0xa2>
        ret = cosem_setEnum(data, object->repeater);
   134ea:	f896 1030 	ldrb.w	r1, [r6, #48]	; 0x30
   134ee:	e7b3      	b.n	13458 <cosem_getSFSKPhyMacSetUp+0x24>
        ret = cosem_setBoolean(data, object->repeaterStatus);
   134f0:	f896 1031 	ldrb.w	r1, [r6, #49]	; 0x31
        ret = cosem_setBoolean(data, object->synchronizationLocked);
   134f4:	4628      	mov	r0, r5
   134f6:	f7fa fb15 	bl	db24 <cosem_setBoolean>
   134fa:	e7cc      	b.n	13496 <cosem_getSFSKPhyMacSetUp+0x62>
        ret = cosem_setUInt8(data, object->minDeltaCredit);
   134fc:	f896 1032 	ldrb.w	r1, [r6, #50]	; 0x32
   13500:	e7b1      	b.n	13466 <cosem_getSFSKPhyMacSetUp+0x32>
        ret = cosem_setUInt16(data, object->initiatorMacAddress);
   13502:	8eb1      	ldrh	r1, [r6, #52]	; 0x34
   13504:	e7ca      	b.n	1349c <cosem_getSFSKPhyMacSetUp+0x68>
        ret = cosem_setBoolean(data, object->synchronizationLocked);
   13506:	f896 1036 	ldrb.w	r1, [r6, #54]	; 0x36
   1350a:	e7f3      	b.n	134f4 <cosem_getSFSKPhyMacSetUp+0xc0>
        ret = cosem_setEnum(data, object->transmissionSpeed);
   1350c:	f896 1037 	ldrb.w	r1, [r6, #55]	; 0x37
   13510:	e7a2      	b.n	13458 <cosem_getSFSKPhyMacSetUp+0x24>
    switch (e->index)
   13512:	f44f 7481 	mov.w	r4, #258	; 0x102
    return ret;
   13516:	e7cb      	b.n	134b0 <cosem_getSFSKPhyMacSetUp+0x7c>

00013518 <cosem_getSFSKReportingSystemList>:
#endif //DLMS_IGNORE_SFSK_PHY_MAC_SETUP
#ifndef DLMS_IGNORE_SFSK_REPORTING_SYSTEM_LIST
int cosem_getSFSKReportingSystemList(
    gxValueEventArg* e)
{
   13518:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    int ret = DLMS_ERROR_CODE_OK;
    gxByteBuffer* data = e->value.byteArr;
    gxSFSKReportingSystemList* object = (gxSFSKReportingSystemList*)e->target;
    if (e->index == 2)
   1351c:	7e03      	ldrb	r3, [r0, #24]
   1351e:	2b02      	cmp	r3, #2
   13520:	d122      	bne.n	13568 <cosem_getSFSKReportingSystemList+0x50>
    gxSFSKReportingSystemList* object = (gxSFSKReportingSystemList*)e->target;
   13522:	6945      	ldr	r5, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
   13524:	6886      	ldr	r6, [r0, #8]
    {
        uint16_t pos;
        gxByteBuffer* it;
        if ((ret = cosem_setArray(data, object->reportingSystemList.size)) == 0)
   13526:	8ae9      	ldrh	r1, [r5, #22]
   13528:	4630      	mov	r0, r6
   1352a:	f7fa fadf 	bl	daec <cosem_setArray>
   1352e:	4604      	mov	r4, r0
   13530:	b118      	cbz	r0, 1353a <cosem_getSFSKReportingSystemList+0x22>
    else
    {
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    return ret;
}
   13532:	4620      	mov	r0, r4
   13534:	b002      	add	sp, #8
   13536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1353a:	4680      	mov	r8, r0
                if ((ret = arr_getByIndex(&object->reportingSystemList, pos, (void**)&it)) != 0)
   1353c:	f105 0710 	add.w	r7, r5, #16
            for (pos = 0; pos != object->reportingSystemList.size; ++pos)
   13540:	8aeb      	ldrh	r3, [r5, #22]
   13542:	fa1f f188 	uxth.w	r1, r8
   13546:	428b      	cmp	r3, r1
   13548:	d0f3      	beq.n	13532 <cosem_getSFSKReportingSystemList+0x1a>
                if ((ret = arr_getByIndex(&object->reportingSystemList, pos, (void**)&it)) != 0)
   1354a:	aa01      	add	r2, sp, #4
   1354c:	4638      	mov	r0, r7
   1354e:	f7fc ff1a 	bl	10386 <arr_getByIndex>
   13552:	b938      	cbnz	r0, 13564 <cosem_getSFSKReportingSystemList+0x4c>
                if ((ret = cosem_setOctetString(data, it)) != 0)
   13554:	9901      	ldr	r1, [sp, #4]
   13556:	4630      	mov	r0, r6
   13558:	f7fa f9f1 	bl	d93e <cosem_setOctetString>
   1355c:	f108 0801 	add.w	r8, r8, #1
   13560:	2800      	cmp	r0, #0
   13562:	d0ed      	beq.n	13540 <cosem_getSFSKReportingSystemList+0x28>
   13564:	4604      	mov	r4, r0
   13566:	e7e4      	b.n	13532 <cosem_getSFSKReportingSystemList+0x1a>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   13568:	f44f 7481 	mov.w	r4, #258	; 0x102
    return ret;
   1356c:	e7e1      	b.n	13532 <cosem_getSFSKReportingSystemList+0x1a>

0001356e <cosem_getValue>:
{
   1356e:	b538      	push	{r3, r4, r5, lr}
   13570:	4605      	mov	r5, r0
    if ((ret = cosem_getByteBuffer(e)) != 0)
   13572:	4608      	mov	r0, r1
{
   13574:	460c      	mov	r4, r1
    if ((ret = cosem_getByteBuffer(e)) != 0)
   13576:	f7fc ff50 	bl	1041a <cosem_getByteBuffer>
   1357a:	2800      	cmp	r0, #0
   1357c:	f040 8095 	bne.w	136aa <cosem_getValue+0x13c>
    if (e->index == 1)
   13580:	7e23      	ldrb	r3, [r4, #24]
   13582:	2b01      	cmp	r3, #1
   13584:	d115      	bne.n	135b2 <cosem_getValue+0x44>
        if ((ret = bb_setUInt8(e->value.byteArr, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   13586:	68a0      	ldr	r0, [r4, #8]
   13588:	2109      	movs	r1, #9
   1358a:	f7f9 fb94 	bl	ccb6 <bb_setUInt8>
   1358e:	2800      	cmp	r0, #0
   13590:	f040 808b 	bne.w	136aa <cosem_getValue+0x13c>
            (ret = bb_setUInt8(e->value.byteArr, 6)) != 0 ||
   13594:	68a0      	ldr	r0, [r4, #8]
   13596:	2106      	movs	r1, #6
   13598:	f7f9 fb8d 	bl	ccb6 <bb_setUInt8>
        if ((ret = bb_setUInt8(e->value.byteArr, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   1359c:	2800      	cmp	r0, #0
   1359e:	f040 8084 	bne.w	136aa <cosem_getValue+0x13c>
            (ret = bb_set(e->value.byteArr, e->target->logicalName, 6)) != 0)
   135a2:	6961      	ldr	r1, [r4, #20]
   135a4:	68a0      	ldr	r0, [r4, #8]
   135a6:	2206      	movs	r2, #6
}
   135a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            (ret = bb_set(e->value.byteArr, e->target->logicalName, 6)) != 0)
   135ac:	4411      	add	r1, r2
   135ae:	f7f9 bc68 	b.w	ce82 <bb_set>
    switch (e->target->objectType)
   135b2:	6963      	ldr	r3, [r4, #20]
   135b4:	881b      	ldrh	r3, [r3, #0]
   135b6:	3b01      	subs	r3, #1
   135b8:	2b72      	cmp	r3, #114	; 0x72
   135ba:	d874      	bhi.n	136a6 <cosem_getValue+0x138>
   135bc:	e8df f013 	tbh	[pc, r3, lsl #1]
   135c0:	00730076 	.word	0x00730076
   135c4:	00af007b 	.word	0x00af007b
   135c8:	00fc00a5 	.word	0x00fc00a5
   135cc:	008000f6 	.word	0x008000f6
   135d0:	0116011b 	.word	0x0116011b
   135d4:	00950120 	.word	0x00950120
   135d8:	00730073 	.word	0x00730073
   135dc:	0073008f 	.word	0x0073008f
   135e0:	00d70111 	.word	0x00d70111
   135e4:	008a00c3 	.word	0x008a00c3
   135e8:	00850102 	.word	0x00850102
   135ec:	00c800be 	.word	0x00c800be
   135f0:	012a00d2 	.word	0x012a00d2
   135f4:	009b00eb 	.word	0x009b00eb
   135f8:	01ad00a0 	.word	0x01ad00a0
   135fc:	00730073 	.word	0x00730073
   13600:	00730073 	.word	0x00730073
   13604:	00730073 	.word	0x00730073
   13608:	00730073 	.word	0x00730073
   1360c:	01340073 	.word	0x01340073
   13610:	00cd0125 	.word	0x00cd0125
   13614:	00f100aa 	.word	0x00f100aa
   13618:	007300b4 	.word	0x007300b4
   1361c:	0073014d 	.word	0x0073014d
   13620:	01a30073 	.word	0x01a30073
   13624:	019e0194 	.word	0x019e0194
   13628:	00730199 	.word	0x00730199
   1362c:	01a80073 	.word	0x01a80073
   13630:	018a0185 	.word	0x018a0185
   13634:	0073018f 	.word	0x0073018f
   13638:	01520107 	.word	0x01520107
   1363c:	00b901ad 	.word	0x00b901ad
   13640:	00730158 	.word	0x00730158
   13644:	01800073 	.word	0x01800073
   13648:	00dc0073 	.word	0x00dc0073
   1364c:	00e600e1 	.word	0x00e600e1
   13650:	012f0073 	.word	0x012f0073
   13654:	00730073 	.word	0x00730073
   13658:	00730073 	.word	0x00730073
   1365c:	015d0073 	.word	0x015d0073
   13660:	01670162 	.word	0x01670162
   13664:	0171016c 	.word	0x0171016c
   13668:	017b0176 	.word	0x017b0176
   1366c:	00730073 	.word	0x00730073
   13670:	00730073 	.word	0x00730073
   13674:	00730073 	.word	0x00730073
   13678:	00730073 	.word	0x00730073
   1367c:	00730073 	.word	0x00730073
   13680:	00730073 	.word	0x00730073
   13684:	00730073 	.word	0x00730073
   13688:	01ad01ad 	.word	0x01ad01ad
   1368c:	010c01ad 	.word	0x010c01ad
   13690:	00730073 	.word	0x00730073
   13694:	00730073 	.word	0x00730073
   13698:	00730073 	.word	0x00730073
   1369c:	013e0139 	.word	0x013e0139
   136a0:	00730143 	.word	0x00730143
   136a4:	0148      	.short	0x0148
   136a6:	f44f 7081 	mov.w	r0, #258	; 0x102
}
   136aa:	bd38      	pop	{r3, r4, r5, pc}
        ret = cosem_getData(e);
   136ac:	4620      	mov	r0, r4
}
   136ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getData(e);
   136b2:	f7fc beca 	b.w	1044a <cosem_getData>
        ret = cosem_getRegister(e);
   136b6:	4620      	mov	r0, r4
}
   136b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getRegister(e);
   136bc:	f7fc bed5 	b.w	1046a <cosem_getRegister>
        ret = cosem_getClock(e);
   136c0:	4620      	mov	r0, r4
}
   136c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getClock(e);
   136c6:	f7fc bf1a 	b.w	104fe <cosem_getClock>
        ret = cosem_getActionSchedule(e);
   136ca:	4620      	mov	r0, r4
}
   136cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getActionSchedule(e);
   136d0:	f7fc bf4d 	b.w	1056e <cosem_getActionSchedule>
        ret = cosem_getActivityCalendar(e);
   136d4:	4620      	mov	r0, r4
}
   136d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getActivityCalendar(e);
   136da:	f7fd b829 	b.w	10730 <cosem_getActivityCalendar>
        ret = cosem_getAssociationLogicalName(settings, e);
   136de:	4621      	mov	r1, r4
   136e0:	4628      	mov	r0, r5
}
   136e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getAssociationLogicalName(settings, e);
   136e6:	f7fd b90f 	b.w	10908 <cosem_getAssociationLogicalName>
        ret = cosem_getAssociationShortName(settings, e);
   136ea:	4621      	mov	r1, r4
   136ec:	4628      	mov	r0, r5
}
   136ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getAssociationShortName(settings, e);
   136f2:	f7fd bafe 	b.w	10cf2 <cosem_getAssociationShortName>
        ret = cosem_getAutoAnswer(e);
   136f6:	4620      	mov	r0, r4
}
   136f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getAutoAnswer(e);
   136fc:	f7fd bb39 	b.w	10d72 <cosem_getAutoAnswer>
        ret = cosem_getAutoConnect(e);
   13700:	4620      	mov	r0, r4
}
   13702:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getAutoConnect(e);
   13706:	f7fd bb91 	b.w	10e2c <cosem_getAutoConnect>
        ret = cosem_getDemandRegister(e);
   1370a:	4620      	mov	r0, r4
}
   1370c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getDemandRegister(e);
   13710:	f7fd bbf8 	b.w	10f04 <cosem_getDemandRegister>
        ret = cosem_getMacAddressSetup(e);
   13714:	4620      	mov	r0, r4
}
   13716:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getMacAddressSetup(e);
   1371a:	f7fd bc40 	b.w	10f9e <cosem_getMacAddressSetup>
        ret = cosem_getExtendedRegister(e);
   1371e:	4620      	mov	r0, r4
}
   13720:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getExtendedRegister(e);
   13724:	f7fd bc46 	b.w	10fb4 <cosem_getExtendedRegister>
        ret = cosem_getGprsSetup(e);
   13728:	4620      	mov	r0, r4
}
   1372a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getGprsSetup(e);
   1372e:	f7fd bc9e 	b.w	1106e <cosem_getGprsSetup>
        ret = cosem_getSecuritySetup(e);
   13732:	4620      	mov	r0, r4
}
   13734:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getSecuritySetup(e);
   13738:	f7fd bcc5 	b.w	110c6 <cosem_getSecuritySetup>
        ret = cosem_getIecHdlcSetup(e);
   1373c:	4620      	mov	r0, r4
}
   1373e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getIecHdlcSetup(e);
   13742:	f7fd bd42 	b.w	111ca <cosem_getIecHdlcSetup>
        ret = cosem_getIecLocalPortSetup(e);
   13746:	4620      	mov	r0, r4
}
   13748:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getIecLocalPortSetup(e);
   1374c:	f7fd bd61 	b.w	11212 <cosem_getIecLocalPortSetup>
        ret = cosem_getIecTwistedPairSetup(e);
   13750:	4620      	mov	r0, r4
}
   13752:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getIecTwistedPairSetup(e);
   13756:	f7fd bd89 	b.w	1126c <cosem_getIecTwistedPairSetup>
        ret = cosem_getIP4Setup(e);
   1375a:	4620      	mov	r0, r4
}
   1375c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getIP4Setup(e);
   13760:	f7ef bd5a 	b.w	3218 <cosem_getIP4Setup>
        ret = cosem_getMbusSlavePortSetup(e);
   13764:	4620      	mov	r0, r4
}
   13766:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getMbusSlavePortSetup(e);
   1376a:	f7fd bdd3 	b.w	11314 <cosem_getMbusSlavePortSetup>
        ret = cosem_getImageTransfer(e);
   1376e:	4620      	mov	r0, r4
}
   13770:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getImageTransfer(e);
   13774:	f7fd bde7 	b.w	11346 <cosem_getImageTransfer>
        ret = cosem_getDisconnectControl(e);
   13778:	4620      	mov	r0, r4
}
   1377a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getDisconnectControl(e);
   1377e:	f7fe b9bf 	b.w	11b00 <cosem_getDisconnectControl>
        ret = cosem_getLimiter(e);
   13782:	4620      	mov	r0, r4
}
   13784:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getLimiter(e);
   13788:	f7ef be00 	b.w	338c <cosem_getLimiter>
        ret = cosem_getmMbusClient(e);
   1378c:	4620      	mov	r0, r4
}
   1378e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getmMbusClient(e);
   13792:	f7ef bf6d 	b.w	3670 <cosem_getmMbusClient>
        ret = cosem_getModemConfiguration(settings, e);
   13796:	4621      	mov	r1, r4
   13798:	4628      	mov	r0, r5
}
   1379a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getModemConfiguration(settings, e);
   1379e:	f7f0 b827 	b.w	37f0 <cosem_getModemConfiguration>
        ret = cosem_getPppSetup(e);
   137a2:	4620      	mov	r0, r4
}
   137a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getPppSetup(e);
   137a8:	f7f0 b97a 	b.w	3aa0 <cosem_getPppSetup>
        ret = cosem_getProfileGeneric(settings, e);
   137ac:	4621      	mov	r1, r4
   137ae:	4628      	mov	r0, r5
}
   137b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getProfileGeneric(settings, e);
   137b4:	f7fe b8f1 	b.w	1199a <cosem_getProfileGeneric>
        ret = cosem_getRegisterActivation(settings, e);
   137b8:	4621      	mov	r1, r4
   137ba:	4628      	mov	r0, r5
}
   137bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getRegisterActivation(settings, e);
   137c0:	f7fe b9c8 	b.w	11b54 <cosem_getRegisterActivation>
        ret = cosem_getRegisterMonitor(e);
   137c4:	4620      	mov	r0, r4
}
   137c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getRegisterMonitor(e);
   137ca:	f7fe baa3 	b.w	11d14 <cosem_getRegisterMonitor>
        ret = cosem_getRegisterTable(e);
   137ce:	4620      	mov	r0, r4
}
   137d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getRegisterTable(e);
   137d4:	f7fc be76 	b.w	104c4 <cosem_getRegisterTable>
        ret = cosem_getZigbeeNetworkControl(e);
   137d8:	4620      	mov	r0, r4
}
   137da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getZigbeeNetworkControl(e);
   137de:	f7fe be13 	b.w	12408 <cosem_getZigbeeNetworkControl>
        ret = cosem_getSapAssignment(e);
   137e2:	4620      	mov	r0, r4
}
   137e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getSapAssignment(e);
   137e8:	f7fe bb9b 	b.w	11f22 <cosem_getSapAssignment>
        ret = cosem_getSchedule(e);
   137ec:	4620      	mov	r0, r4
}
   137ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getSchedule(e);
   137f2:	f7fe bbed 	b.w	11fd0 <cosem_getSchedule>
        ret = cosem_getScriptTable(e);
   137f6:	4620      	mov	r0, r4
}
   137f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getScriptTable(e);
   137fc:	f7fe bc72 	b.w	120e4 <cosem_getScriptTable>
        ret = cosem_getSpecialDaysTable(e);
   13800:	4620      	mov	r0, r4
}
   13802:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getSpecialDaysTable(e);
   13806:	f7fe bcd7 	b.w	121b8 <cosem_getSpecialDaysTable>
        ret = cosem_getTcpUdpSetup(e);
   1380a:	4620      	mov	r0, r4
}
   1380c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getTcpUdpSetup(e);
   13810:	f7fe bd0c 	b.w	1222c <cosem_getTcpUdpSetup>
        ret = cosem_getUtilityTables(e);
   13814:	4620      	mov	r0, r4
}
   13816:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getUtilityTables(e);
   1381a:	f7fe bd32 	b.w	12282 <cosem_getUtilityTables>
        ret = cosem_getMbusMasterPortSetup(e);
   1381e:	4620      	mov	r0, r4
}
   13820:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getMbusMasterPortSetup(e);
   13824:	f7fe bd42 	b.w	122ac <cosem_getMbusMasterPortSetup>
        ret = cosem_getPushSetup(e);
   13828:	4620      	mov	r0, r4
}
   1382a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getPushSetup(e);
   1382e:	f7fe bd48 	b.w	122c2 <cosem_getPushSetup>
        ret = cosem_getAccount(e);
   13832:	4620      	mov	r0, r4
}
   13834:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getAccount(e);
   13838:	f7fe bfe3 	b.w	12802 <cosem_getAccount>
        ret = cosem_getCredit(e);
   1383c:	4620      	mov	r0, r4
}
   1383e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getCredit(e);
   13842:	f7fe bfa4 	b.w	1278e <cosem_getCredit>
        ret = cosem_getCharge(e);
   13846:	4620      	mov	r0, r4
}
   13848:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getCharge(e);
   1384c:	f7fe bee4 	b.w	12618 <cosem_getCharge>
        ret = cosem_getTokenGateway(e);
   13850:	4620      	mov	r0, r4
}
   13852:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getTokenGateway(e);
   13856:	f7fe bf2e 	b.w	126b6 <cosem_getTokenGateway>
        ret = cosem_getGsmDiagnostic(e);
   1385a:	4620      	mov	r0, r4
}
   1385c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getGsmDiagnostic(e);
   13860:	f7ff b92f 	b.w	12ac2 <cosem_getGsmDiagnostic>
        ret = cosem_getCompactData(settings, e);
   13864:	4621      	mov	r1, r4
   13866:	4628      	mov	r0, r5
}
   13868:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getCompactData(settings, e);
   1386c:	f7ff b901 	b.w	12a72 <cosem_getCompactData>
        ret = cosem_getParameterMonitor(e);
   13870:	4620      	mov	r0, r4
}
   13872:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getParameterMonitor(e);
   13876:	f7f0 ba23 	b.w	3cc0 <cosem_getParameterMonitor>
        ret = cosem_getLlcSscsSetup(e);
   1387a:	4620      	mov	r0, r4
}
   1387c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getLlcSscsSetup(e);
   13880:	f7ff b9c4 	b.w	12c0c <cosem_getLlcSscsSetup>
        ret = cosem_getPrimeNbOfdmPlcPhysicalLayerCounters(e);
   13884:	4620      	mov	r0, r4
}
   13886:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getPrimeNbOfdmPlcPhysicalLayerCounters(e);
   1388a:	f7ff b9ce 	b.w	12c2a <cosem_getPrimeNbOfdmPlcPhysicalLayerCounters>
        ret = cosem_getPrimeNbOfdmPlcMacSetup(e);
   1388e:	4620      	mov	r0, r4
}
   13890:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getPrimeNbOfdmPlcMacSetup(e);
   13894:	f7ff b9df 	b.w	12c56 <cosem_getPrimeNbOfdmPlcMacSetup>
        ret = cosem_getPrimeNbOfdmPlcMacFunctionalParameters(e);
   13898:	4620      	mov	r0, r4
}
   1389a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getPrimeNbOfdmPlcMacFunctionalParameters(e);
   1389e:	f7ff b9f8 	b.w	12c92 <cosem_getPrimeNbOfdmPlcMacFunctionalParameters>
        ret = cosem_getPrimeNbOfdmPlcMacCounters(e);
   138a2:	4620      	mov	r0, r4
}
   138a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getPrimeNbOfdmPlcMacCounters(e);
   138a8:	f7ff ba31 	b.w	12d0e <cosem_getPrimeNbOfdmPlcMacCounters>
        ret = cosem_getPrimeNbOfdmPlcMacNetworkAdministrationData(e);
   138ac:	4620      	mov	r0, r4
}
   138ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getPrimeNbOfdmPlcMacNetworkAdministrationData(e);
   138b2:	f7ff bb96 	b.w	12fe2 <cosem_getPrimeNbOfdmPlcMacNetworkAdministrationData>
        ret = cosem_getPrimeNbOfdmPlcApplicationsIdentification(e);
   138b6:	4620      	mov	r0, r4
}
   138b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getPrimeNbOfdmPlcApplicationsIdentification(e);
   138bc:	f7ff bba7 	b.w	1300e <cosem_getPrimeNbOfdmPlcApplicationsIdentification>
        ret = cosem_getArbitrator(e);
   138c0:	4620      	mov	r0, r4
}
   138c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getArbitrator(e);
   138c6:	f7ff bbb8 	b.w	1303a <cosem_getArbitrator>
        ret = cosem_getIec8802LlcType1Setup(e);
   138ca:	4620      	mov	r0, r4
}
   138cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getIec8802LlcType1Setup(e);
   138d0:	f7ff bc9a 	b.w	13208 <cosem_getIec8802LlcType1Setup>
        ret = cosem_getIec8802LlcType2Setup(e);
   138d4:	4620      	mov	r0, r4
}
   138d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getIec8802LlcType2Setup(e);
   138da:	f7ff bca0 	b.w	1321e <cosem_getIec8802LlcType2Setup>
        ret = cosem_getIec8802LlcType3Setup(e);
   138de:	4620      	mov	r0, r4
}
   138e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getIec8802LlcType3Setup(e);
   138e4:	f7ff bcbd 	b.w	13262 <cosem_getIec8802LlcType3Setup>
        ret = cosem_getSFSKActiveInitiator(e);
   138e8:	4620      	mov	r0, r4
}
   138ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getSFSKActiveInitiator(e);
   138ee:	f7ff bcd3 	b.w	13298 <cosem_getSFSKActiveInitiator>
        ret = cosem_getFSKMacCounters(e);
   138f2:	4620      	mov	r0, r4
}
   138f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getFSKMacCounters(e);
   138f8:	f7ff bced 	b.w	132d6 <cosem_getFSKMacCounters>
        ret = cosem_getSFSKMacSynchronizationTimeouts(e);
   138fc:	4620      	mov	r0, r4
}
   138fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getSFSKMacSynchronizationTimeouts(e);
   13902:	f7ff bd80 	b.w	13406 <cosem_getSFSKMacSynchronizationTimeouts>
        ret = cosem_getSFSKPhyMacSetUp(e);
   13906:	4620      	mov	r0, r4
}
   13908:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getSFSKPhyMacSetUp(e);
   1390c:	f7ff bd92 	b.w	13434 <cosem_getSFSKPhyMacSetUp>
        ret = cosem_getSFSKReportingSystemList(e);
   13910:	4620      	mov	r0, r4
}
   13912:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getSFSKReportingSystemList(e);
   13916:	f7ff bdff 	b.w	13518 <cosem_getSFSKReportingSystemList>
        ret = DLMS_ERROR_CODE_NOT_IMPLEMENTED;
   1391a:	20fe      	movs	r0, #254	; 0xfe
   1391c:	e6c5      	b.n	136aa <cosem_getValue+0x13c>

0001391e <key_init>:

#include "../include/gxmem.h"
#include "../include/gxkey.h"
#ifndef DLMS_IGNORE_MALLOC
gxKey* key_init(void* key, void* value)
{
   1391e:	b538      	push	{r3, r4, r5, lr}
   13920:	4605      	mov	r5, r0
    gxKey* obj = (gxKey*) gxmalloc(sizeof(gxKey));
   13922:	2008      	movs	r0, #8
{
   13924:	460c      	mov	r4, r1
    gxKey* obj = (gxKey*) gxmalloc(sizeof(gxKey));
   13926:	f7f8 f945 	bl	bbb4 <malloc>
    obj->key = key;
    obj->value = value;
   1392a:	e9c0 5400 	strd	r5, r4, [r0]
    return obj;
}
   1392e:	bd38      	pop	{r3, r4, r5, pc}

00013930 <obj_clearProfileGenericBuffer>:
    return obj;
}
#endif //DLMS_IGNORE_MALLOC

int obj_clearProfileGenericBuffer(gxArray* buffer)
{
   13930:	b537      	push	{r0, r1, r2, r4, r5, lr}
   13932:	4604      	mov	r4, r0
    //Clear data rows.
#ifndef DLMS_IGNORE_MALLOC
    variantArray* va;
    int pos, ret;
    for (pos = 0; pos != buffer->size; ++pos)
   13934:	2500      	movs	r5, #0
   13936:	88e3      	ldrh	r3, [r4, #6]
   13938:	42ab      	cmp	r3, r5
   1393a:	d105      	bne.n	13948 <obj_clearProfileGenericBuffer+0x18>
            return ret;
        }
        va_clear(va);
    }
#endif //DLMS_IGNORE_MALLOC
    arr_clear(buffer);
   1393c:	4620      	mov	r0, r4
   1393e:	f7fc fcfa 	bl	10336 <arr_clear>
    return 0;
   13942:	2000      	movs	r0, #0
}
   13944:	b003      	add	sp, #12
   13946:	bd30      	pop	{r4, r5, pc}
        ret = arr_getByIndex(buffer, pos, (void**)&va);
   13948:	aa01      	add	r2, sp, #4
   1394a:	b2a9      	uxth	r1, r5
   1394c:	4620      	mov	r0, r4
   1394e:	f7fc fd1a 	bl	10386 <arr_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   13952:	2800      	cmp	r0, #0
   13954:	d1f6      	bne.n	13944 <obj_clearProfileGenericBuffer+0x14>
        va_clear(va);
   13956:	9801      	ldr	r0, [sp, #4]
   13958:	f006 fc00 	bl	1a15c <va_clear>
    for (pos = 0; pos != buffer->size; ++pos)
   1395c:	3501      	adds	r5, #1
   1395e:	e7ea      	b.n	13936 <obj_clearProfileGenericBuffer+0x6>

00013960 <obj_clearPushObjectList>:
#endif //DLMS_IGNORE_PROFILE_GENERIC

#if !(defined(DLMS_IGNORE_PROFILE_GENERIC) && defined(DLMS_IGNORE_COMPACT_DATA) && defined(DLMS_IGNORE_PUSH_SETUP))
int obj_clearPushObjectList(gxArray* buffer)
{
   13960:	b573      	push	{r0, r1, r4, r5, r6, lr}
   13962:	4605      	mov	r5, r0
    int ret = 0;
#if !defined(DLMS_IGNORE_MALLOC) && !defined(DLMS_COSEM_EXACT_DATA_TYPES)
    int pos;
    gxKey* kv;
    //Objects are not cleared because client owns them and clears them later.
    for (pos = 0; pos != buffer->size; ++pos)
   13964:	2600      	movs	r6, #0
   13966:	88eb      	ldrh	r3, [r5, #6]
   13968:	42b3      	cmp	r3, r6
   1396a:	d106      	bne.n	1397a <obj_clearPushObjectList+0x1a>
   1396c:	2400      	movs	r4, #0
            break;
        }
        gxfree(kv->value);
    }
#endif // !defined(DLMS_IGNORE_MALLOC) && !defined(DLMS_COSEM_EXACT_DATA_TYPES)
    arr_clear(buffer);
   1396e:	4628      	mov	r0, r5
   13970:	f7fc fce1 	bl	10336 <arr_clear>
    return ret;
}
   13974:	4620      	mov	r0, r4
   13976:	b002      	add	sp, #8
   13978:	bd70      	pop	{r4, r5, r6, pc}
        ret = arr_getByIndex(buffer, pos, (void**)&kv);
   1397a:	aa01      	add	r2, sp, #4
   1397c:	b2b1      	uxth	r1, r6
   1397e:	4628      	mov	r0, r5
   13980:	f7fc fd01 	bl	10386 <arr_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   13984:	4604      	mov	r4, r0
   13986:	2800      	cmp	r0, #0
   13988:	d1f1      	bne.n	1396e <obj_clearPushObjectList+0xe>
        gxfree(kv->value);
   1398a:	9b01      	ldr	r3, [sp, #4]
   1398c:	6858      	ldr	r0, [r3, #4]
   1398e:	f7f8 f919 	bl	bbc4 <free>
    for (pos = 0; pos != buffer->size; ++pos)
   13992:	3601      	adds	r6, #1
   13994:	e7e7      	b.n	13966 <obj_clearPushObjectList+0x6>

00013996 <obj_clearCreditChargeConfigurations>:
#endif //!(defined(DLMS_IGNORE_PROFILE_GENERIC) && defined(DLMS_OBJECT_TYPE_PUSH_SETUP) && defined(DLMS_IGNORE_PUSH_SETUP))

#ifndef DLMS_IGNORE_ACCOUNT

int obj_clearCreditChargeConfigurations(gxArray* list)
{
   13996:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13998:	4605      	mov	r5, r0
    int ret = DLMS_ERROR_CODE_OK;
#ifndef DLMS_IGNORE_MALLOC
    gxCreditChargeConfiguration* it;
    int pos;
    //Clear push objects.
    for (pos = 0; pos != list->size; ++pos)
   1399a:	2600      	movs	r6, #0
        {
            break;
        }
        memset(it->creditReference, 0, sizeof(it->creditReference));
        memset(it->chargeReference, 0, sizeof(it->creditReference));
        it->collectionConfiguration = DLMS_CREDIT_COLLECTION_CONFIGURATION_DISCONNECTED;
   1399c:	2701      	movs	r7, #1
    for (pos = 0; pos != list->size; ++pos)
   1399e:	88eb      	ldrh	r3, [r5, #6]
   139a0:	42b3      	cmp	r3, r6
   139a2:	d106      	bne.n	139b2 <obj_clearCreditChargeConfigurations+0x1c>
   139a4:	2400      	movs	r4, #0
    }
#endif //DLMS_IGNORE_MALLOC
    arr_clear(list);
   139a6:	4628      	mov	r0, r5
   139a8:	f7fc fcc5 	bl	10336 <arr_clear>
    return ret;
}
   139ac:	4620      	mov	r0, r4
   139ae:	b003      	add	sp, #12
   139b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ret = arr_getByIndex(list, pos, (void**)&it);
   139b2:	aa01      	add	r2, sp, #4
   139b4:	b2b1      	uxth	r1, r6
   139b6:	4628      	mov	r0, r5
   139b8:	f7fc fce5 	bl	10386 <arr_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   139bc:	4604      	mov	r4, r0
   139be:	2800      	cmp	r0, #0
   139c0:	d1f1      	bne.n	139a6 <obj_clearCreditChargeConfigurations+0x10>
__ssp_bos_icheck3(memset, void *, int)
   139c2:	9b01      	ldr	r3, [sp, #4]
   139c4:	6018      	str	r0, [r3, #0]
   139c6:	8098      	strh	r0, [r3, #4]
        memset(it->chargeReference, 0, sizeof(it->creditReference));
   139c8:	9b01      	ldr	r3, [sp, #4]
    for (pos = 0; pos != list->size; ++pos)
   139ca:	3601      	adds	r6, #1
   139cc:	f8c3 0006 	str.w	r0, [r3, #6]
   139d0:	8158      	strh	r0, [r3, #10]
        it->collectionConfiguration = DLMS_CREDIT_COLLECTION_CONFIGURATION_DISCONNECTED;
   139d2:	731f      	strb	r7, [r3, #12]
    for (pos = 0; pos != list->size; ++pos)
   139d4:	e7e3      	b.n	1399e <obj_clearCreditChargeConfigurations+0x8>

000139d6 <obj_clearTokenGatewayConfigurations>:

int obj_clearTokenGatewayConfigurations(gxArray* list)
{
   139d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   139d8:	4605      	mov	r5, r0
    int ret = DLMS_ERROR_CODE_OK;
#ifndef DLMS_IGNORE_MALLOC
    gxTokenGatewayConfiguration* it;
    int pos;
    //Clear push objects.
    for (pos = 0; pos != list->size; ++pos)
   139da:	2600      	movs	r6, #0
   139dc:	88eb      	ldrh	r3, [r5, #6]
   139de:	42b3      	cmp	r3, r6
   139e0:	d106      	bne.n	139f0 <obj_clearTokenGatewayConfigurations+0x1a>
   139e2:	2400      	movs	r4, #0
            break;
        }
        memset(it->creditReference, 0, 6);
    }
#endif //DLMS_IGNORE_MALLOC
    arr_clear(list);
   139e4:	4628      	mov	r0, r5
   139e6:	f7fc fca6 	bl	10336 <arr_clear>
    return ret;
}
   139ea:	4620      	mov	r0, r4
   139ec:	b002      	add	sp, #8
   139ee:	bd70      	pop	{r4, r5, r6, pc}
        ret = arr_getByIndex(list, pos, (void**)&it);
   139f0:	aa01      	add	r2, sp, #4
   139f2:	b2b1      	uxth	r1, r6
   139f4:	4628      	mov	r0, r5
   139f6:	f7fc fcc6 	bl	10386 <arr_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   139fa:	4604      	mov	r4, r0
   139fc:	2800      	cmp	r0, #0
   139fe:	d1f1      	bne.n	139e4 <obj_clearTokenGatewayConfigurations+0xe>
   13a00:	9b01      	ldr	r3, [sp, #4]
    for (pos = 0; pos != list->size; ++pos)
   13a02:	3601      	adds	r6, #1
   13a04:	6018      	str	r0, [r3, #0]
   13a06:	8098      	strh	r0, [r3, #4]
   13a08:	e7e8      	b.n	139dc <obj_clearTokenGatewayConfigurations+0x6>

00013a0a <obj_clearSapList>:
#endif //DLMS_IGNORE_ACCOUNT
#ifndef DLMS_IGNORE_SAP_ASSIGNMENT
int obj_clearSapList(gxArray* buffer)
{
   13a0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   13a0c:	4605      	mov	r5, r0
    int ret = DLMS_ERROR_CODE_OK;
#ifndef DLMS_IGNORE_MALLOC
    int pos;
    gxSapItem* it;
    //Objects are not cleared because client owns them and clears them later.
    for (pos = 0; pos != buffer->size; ++pos)
   13a0e:	2600      	movs	r6, #0
   13a10:	88eb      	ldrh	r3, [r5, #6]
   13a12:	42b3      	cmp	r3, r6
   13a14:	d106      	bne.n	13a24 <obj_clearSapList+0x1a>
   13a16:	2400      	movs	r4, #0
            break;
        }
        bb_clear(&it->name);
    }
#endif //DLMS_IGNORE_MALLOC
    arr_clear(buffer);
   13a18:	4628      	mov	r0, r5
   13a1a:	f7fc fc8c 	bl	10336 <arr_clear>
    return ret;
}
   13a1e:	4620      	mov	r0, r4
   13a20:	b002      	add	sp, #8
   13a22:	bd70      	pop	{r4, r5, r6, pc}
        ret = arr_getByIndex(buffer, pos, (void**)&it);
   13a24:	aa01      	add	r2, sp, #4
   13a26:	b2b1      	uxth	r1, r6
   13a28:	4628      	mov	r0, r5
   13a2a:	f7fc fcac 	bl	10386 <arr_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   13a2e:	4604      	mov	r4, r0
   13a30:	2800      	cmp	r0, #0
   13a32:	d1f1      	bne.n	13a18 <obj_clearSapList+0xe>
        bb_clear(&it->name);
   13a34:	9801      	ldr	r0, [sp, #4]
   13a36:	3004      	adds	r0, #4
   13a38:	f7f9 fa97 	bl	cf6a <bb_clear>
    for (pos = 0; pos != buffer->size; ++pos)
   13a3c:	3601      	adds	r6, #1
   13a3e:	e7e7      	b.n	13a10 <obj_clearSapList+0x6>

00013a40 <obj_clearProfileGenericCaptureObjects>:
   13a40:	f7ff bf8e 	b.w	13960 <obj_clearPushObjectList>

00013a44 <obj_clearSeasonProfile>:
}
#endif //!(defined(DLMS_IGNORE_PROFILE_GENERIC) && defined(DLMS_IGNORE_COMPACT_DATA))

#ifndef DLMS_IGNORE_ACTIVITY_CALENDAR
int obj_clearSeasonProfile(gxArray* list)
{
   13a44:	b573      	push	{r0, r1, r4, r5, r6, lr}
   13a46:	4605      	mov	r5, r0
    int ret = DLMS_ERROR_CODE_OK;
#ifndef DLMS_IGNORE_MALLOC
    int pos;
    gxSeasonProfile* sp;
    for (pos = 0; pos != list->size; ++pos)
   13a48:	2600      	movs	r6, #0
   13a4a:	88eb      	ldrh	r3, [r5, #6]
   13a4c:	42b3      	cmp	r3, r6
   13a4e:	d106      	bne.n	13a5e <obj_clearSeasonProfile+0x1a>
   13a50:	2400      	movs	r4, #0
        }
        bb_clear(&sp->name);
        bb_clear(&sp->weekName);
    };
#endif //DLMS_IGNORE_MALLOC
    arr_clear(list);
   13a52:	4628      	mov	r0, r5
   13a54:	f7fc fc6f 	bl	10336 <arr_clear>
    return ret;
}
   13a58:	4620      	mov	r0, r4
   13a5a:	b002      	add	sp, #8
   13a5c:	bd70      	pop	{r4, r5, r6, pc}
        ret = arr_getByIndex(list, pos, (void**)&sp);
   13a5e:	aa01      	add	r2, sp, #4
   13a60:	b2b1      	uxth	r1, r6
   13a62:	4628      	mov	r0, r5
   13a64:	f7fc fc8f 	bl	10386 <arr_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   13a68:	4604      	mov	r4, r0
   13a6a:	2800      	cmp	r0, #0
   13a6c:	d1f1      	bne.n	13a52 <obj_clearSeasonProfile+0xe>
        bb_clear(&sp->name);
   13a6e:	9801      	ldr	r0, [sp, #4]
   13a70:	f7f9 fa7b 	bl	cf6a <bb_clear>
        bb_clear(&sp->weekName);
   13a74:	9801      	ldr	r0, [sp, #4]
   13a76:	3018      	adds	r0, #24
   13a78:	f7f9 fa77 	bl	cf6a <bb_clear>
    for (pos = 0; pos != list->size; ++pos)
   13a7c:	3601      	adds	r6, #1
   13a7e:	e7e4      	b.n	13a4a <obj_clearSeasonProfile+0x6>

00013a80 <obj_clearWeekProfileTable>:

int obj_clearWeekProfileTable(gxArray* list)
{
   13a80:	b573      	push	{r0, r1, r4, r5, r6, lr}
   13a82:	4605      	mov	r5, r0
    int ret = DLMS_ERROR_CODE_OK;
#ifndef DLMS_IGNORE_MALLOC
    int pos;
    gxWeekProfile* wp;
    for (pos = 0; pos != list->size; ++pos)
   13a84:	2600      	movs	r6, #0
   13a86:	88eb      	ldrh	r3, [r5, #6]
   13a88:	42b3      	cmp	r3, r6
   13a8a:	d106      	bne.n	13a9a <obj_clearWeekProfileTable+0x1a>
   13a8c:	2400      	movs	r4, #0
            break;
        }
        bb_clear(&wp->name);
    }
#endif //DLMS_IGNORE_MALLOC
    arr_clear(list);
   13a8e:	4628      	mov	r0, r5
   13a90:	f7fc fc51 	bl	10336 <arr_clear>
    return ret;
}
   13a94:	4620      	mov	r0, r4
   13a96:	b002      	add	sp, #8
   13a98:	bd70      	pop	{r4, r5, r6, pc}
        ret = arr_getByIndex(list, pos, (void**)&wp);
   13a9a:	aa01      	add	r2, sp, #4
   13a9c:	b2b1      	uxth	r1, r6
   13a9e:	4628      	mov	r0, r5
   13aa0:	f7fc fc71 	bl	10386 <arr_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   13aa4:	4604      	mov	r4, r0
   13aa6:	2800      	cmp	r0, #0
   13aa8:	d1f1      	bne.n	13a8e <obj_clearWeekProfileTable+0xe>
        bb_clear(&wp->name);
   13aaa:	9801      	ldr	r0, [sp, #4]
   13aac:	f7f9 fa5d 	bl	cf6a <bb_clear>
    for (pos = 0; pos != list->size; ++pos)
   13ab0:	3601      	adds	r6, #1
   13ab2:	e7e8      	b.n	13a86 <obj_clearWeekProfileTable+0x6>

00013ab4 <obj_clearDayProfileTable>:

int obj_clearDayProfileTable(gxArray* list)
{
   13ab4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    int ret = DLMS_ERROR_CODE_OK;
#ifndef DLMS_IGNORE_MALLOC
    int pos, pos2;
    gxDayProfile* it;
    gxDayProfileAction* dp;
    for (pos = 0; pos != list->size; ++pos)
   13ab6:	2600      	movs	r6, #0
{
   13ab8:	4605      	mov	r5, r0
    int ret = DLMS_ERROR_CODE_OK;
   13aba:	4634      	mov	r4, r6
    for (pos = 0; pos != list->size; ++pos)
   13abc:	88eb      	ldrh	r3, [r5, #6]
   13abe:	42b3      	cmp	r3, r6
   13ac0:	d105      	bne.n	13ace <obj_clearDayProfileTable+0x1a>
            }
        }
        arr_clear(&it->daySchedules);
    };
#endif //DLMS_IGNORE_MALLOC
    arr_clear(list);
   13ac2:	4628      	mov	r0, r5
   13ac4:	f7fc fc37 	bl	10336 <arr_clear>
    return ret;
}
   13ac8:	4620      	mov	r0, r4
   13aca:	b003      	add	sp, #12
   13acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((ret = arr_getByIndex(list, pos, (void**)&it)) != DLMS_ERROR_CODE_OK)
   13ace:	466a      	mov	r2, sp
   13ad0:	b2b1      	uxth	r1, r6
   13ad2:	4628      	mov	r0, r5
   13ad4:	f7fc fc57 	bl	10386 <arr_getByIndex>
   13ad8:	4604      	mov	r4, r0
   13ada:	2800      	cmp	r0, #0
   13adc:	d1f1      	bne.n	13ac2 <obj_clearDayProfileTable+0xe>
        for (pos2 = 0; pos2 != it->daySchedules.size; ++pos2)
   13ade:	4607      	mov	r7, r0
   13ae0:	9b00      	ldr	r3, [sp, #0]
   13ae2:	1d18      	adds	r0, r3, #4
   13ae4:	895b      	ldrh	r3, [r3, #10]
   13ae6:	42bb      	cmp	r3, r7
   13ae8:	d106      	bne.n	13af8 <obj_clearDayProfileTable+0x44>
   13aea:	2400      	movs	r4, #0
        arr_clear(&it->daySchedules);
   13aec:	9800      	ldr	r0, [sp, #0]
   13aee:	3004      	adds	r0, #4
   13af0:	f7fc fc21 	bl	10336 <arr_clear>
    for (pos = 0; pos != list->size; ++pos)
   13af4:	3601      	adds	r6, #1
   13af6:	e7e1      	b.n	13abc <obj_clearDayProfileTable+0x8>
            if ((ret = arr_getByIndex(&it->daySchedules, pos2, (void**)&dp)) != DLMS_ERROR_CODE_OK)
   13af8:	aa01      	add	r2, sp, #4
   13afa:	b2b9      	uxth	r1, r7
   13afc:	f7fc fc43 	bl	10386 <arr_getByIndex>
   13b00:	4604      	mov	r4, r0
   13b02:	2800      	cmp	r0, #0
   13b04:	d1f2      	bne.n	13aec <obj_clearDayProfileTable+0x38>
        for (pos2 = 0; pos2 != it->daySchedules.size; ++pos2)
   13b06:	3701      	adds	r7, #1
   13b08:	e7ea      	b.n	13ae0 <obj_clearDayProfileTable+0x2c>

00013b0a <obj_clearRegisterMonitorActions>:
#endif //DLMS_IGNORE_ACTIVITY_CALENDAR
#ifndef DLMS_IGNORE_REGISTER_MONITOR
int obj_clearRegisterMonitorActions(gxArray* list)
{
   13b0a:	b508      	push	{r3, lr}
    arr_clear(list);
   13b0c:	f7fc fc13 	bl	10336 <arr_clear>
    return 0;
}
   13b10:	2000      	movs	r0, #0
   13b12:	bd08      	pop	{r3, pc}

00013b14 <obj_clearModemConfigurationInitialisationStrings>:
#endif //DLMS_IGNORE_REGISTER_MONITOR
#ifndef DLMS_IGNORE_MODEM_CONFIGURATION
int obj_clearModemConfigurationInitialisationStrings(gxArray* list)
{
   13b14:	b537      	push	{r0, r1, r2, r4, r5, lr}
   13b16:	4604      	mov	r4, r0
    int ret = DLMS_ERROR_CODE_OK;
#ifndef DLMS_IGNORE_MALLOC
    int pos;
    gxModemInitialisation* it;
    for (pos = 0; pos != list->size; ++pos)
   13b18:	2500      	movs	r5, #0
   13b1a:	88e3      	ldrh	r3, [r4, #6]
   13b1c:	42ab      	cmp	r3, r5
   13b1e:	d105      	bne.n	13b2c <obj_clearModemConfigurationInitialisationStrings+0x18>
        }
        bb_clear(&it->request);
        bb_clear(&it->response);
    }
#endif //DLMS_IGNORE_MALLOC
    arr_clear(list);
   13b20:	4620      	mov	r0, r4
   13b22:	f7fc fc08 	bl	10336 <arr_clear>
    return ret;
   13b26:	2000      	movs	r0, #0
}
   13b28:	b003      	add	sp, #12
   13b2a:	bd30      	pop	{r4, r5, pc}
        ret = arr_getByIndex(list, pos, (void**)&it);
   13b2c:	aa01      	add	r2, sp, #4
   13b2e:	b2a9      	uxth	r1, r5
   13b30:	4620      	mov	r0, r4
   13b32:	f7fc fc28 	bl	10386 <arr_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   13b36:	2800      	cmp	r0, #0
   13b38:	d1f6      	bne.n	13b28 <obj_clearModemConfigurationInitialisationStrings+0x14>
        bb_clear(&it->request);
   13b3a:	9801      	ldr	r0, [sp, #4]
   13b3c:	f7f9 fa15 	bl	cf6a <bb_clear>
        bb_clear(&it->response);
   13b40:	9801      	ldr	r0, [sp, #4]
   13b42:	300c      	adds	r0, #12
   13b44:	f7f9 fa11 	bl	cf6a <bb_clear>
    for (pos = 0; pos != list->size; ++pos)
   13b48:	3501      	adds	r5, #1
   13b4a:	e7e6      	b.n	13b1a <obj_clearModemConfigurationInitialisationStrings+0x6>

00013b4c <obj_clearScheduleEntries>:
#endif //DLMS_IGNORE_MODEM_CONFIGURATION

#ifndef DLMS_IGNORE_SCHEDULE
int obj_clearScheduleEntries(gxArray* list)
{
   13b4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   13b4e:	4605      	mov	r5, r0
    int ret = DLMS_ERROR_CODE_OK;
#ifndef DLMS_IGNORE_MALLOC
    int pos;
    gxScheduleEntry* it;
    for (pos = 0; pos != list->size; ++pos)
   13b50:	2600      	movs	r6, #0
   13b52:	88eb      	ldrh	r3, [r5, #6]
   13b54:	42b3      	cmp	r3, r6
   13b56:	d106      	bne.n	13b66 <obj_clearScheduleEntries+0x1a>
   13b58:	2400      	movs	r4, #0
            break;
        }
        ba_clear(&it->execSpecDays);
    }
#endif //DLMS_IGNORE_MALLOC
    arr_clear(list);
   13b5a:	4628      	mov	r0, r5
   13b5c:	f7fc fbeb 	bl	10336 <arr_clear>
    return ret;
}
   13b60:	4620      	mov	r0, r4
   13b62:	b002      	add	sp, #8
   13b64:	bd70      	pop	{r4, r5, r6, pc}
        if ((ret = arr_getByIndex(list, pos, (void**)&it)) != 0)
   13b66:	aa01      	add	r2, sp, #4
   13b68:	b2b1      	uxth	r1, r6
   13b6a:	4628      	mov	r0, r5
   13b6c:	f7fc fc0b 	bl	10386 <arr_getByIndex>
   13b70:	4604      	mov	r4, r0
   13b72:	2800      	cmp	r0, #0
   13b74:	d1f1      	bne.n	13b5a <obj_clearScheduleEntries+0xe>
        ba_clear(&it->execSpecDays);
   13b76:	9801      	ldr	r0, [sp, #4]
   13b78:	301c      	adds	r0, #28
   13b7a:	f7f8 ff9c 	bl	cab6 <ba_clear>
    for (pos = 0; pos != list->size; ++pos)
   13b7e:	3601      	adds	r6, #1
   13b80:	e7e7      	b.n	13b52 <obj_clearScheduleEntries+0x6>

00013b82 <obj_clearByteBufferList>:
#endif //DLMS_IGNORE_SCHEDULE

int obj_clearByteBufferList(gxArray* list)
{
   13b82:	b537      	push	{r0, r1, r2, r4, r5, lr}
   13b84:	4604      	mov	r4, r0
    list->size = 0;
    return 0;
#else
    int pos, ret = 0;
    gxByteBuffer* it;
    for (pos = 0; pos != list->size; ++pos)
   13b86:	2500      	movs	r5, #0
   13b88:	88e3      	ldrh	r3, [r4, #6]
   13b8a:	42ab      	cmp	r3, r5
   13b8c:	d105      	bne.n	13b9a <obj_clearByteBufferList+0x18>
        {
            return ret;
        }
        bb_clear(it);
    }
    arr_clear(list);
   13b8e:	4620      	mov	r0, r4
   13b90:	f7fc fbd1 	bl	10336 <arr_clear>
    return ret;
   13b94:	2000      	movs	r0, #0
#endif //DLMS_IGNORE_MALLOC
}
   13b96:	b003      	add	sp, #12
   13b98:	bd30      	pop	{r4, r5, pc}
        ret = arr_getByIndex(list, pos, (void**)&it);
   13b9a:	aa01      	add	r2, sp, #4
   13b9c:	b2a9      	uxth	r1, r5
   13b9e:	4620      	mov	r0, r4
   13ba0:	f7fc fbf1 	bl	10386 <arr_getByIndex>
        if (ret != 0)
   13ba4:	2800      	cmp	r0, #0
   13ba6:	d1f6      	bne.n	13b96 <obj_clearByteBufferList+0x14>
        bb_clear(it);
   13ba8:	9801      	ldr	r0, [sp, #4]
   13baa:	f7f9 f9de 	bl	cf6a <bb_clear>
    for (pos = 0; pos != list->size; ++pos)
   13bae:	3501      	adds	r5, #1
   13bb0:	e7ea      	b.n	13b88 <obj_clearByteBufferList+0x6>

00013bb2 <obj_clearScriptTable>:

#ifndef DLMS_IGNORE_SCRIPT_TABLE
int obj_clearScriptTable(gxArray* list)
{
   13bb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    int ret = DLMS_ERROR_CODE_OK;
#ifndef DLMS_IGNORE_MALLOC
    int pos, pos2;
    gxScript* s;
    gxScriptAction* sa;
    for (pos = 0; pos != list->size; ++pos)
   13bb4:	2600      	movs	r6, #0
{
   13bb6:	4605      	mov	r5, r0
    int ret = DLMS_ERROR_CODE_OK;
   13bb8:	4634      	mov	r4, r6
    for (pos = 0; pos != list->size; ++pos)
   13bba:	88eb      	ldrh	r3, [r5, #6]
   13bbc:	42b3      	cmp	r3, r6
   13bbe:	d105      	bne.n	13bcc <obj_clearScriptTable+0x1a>
            var_clear(&sa->parameter);
        }
        arr_clear(&s->actions);
    }
#endif //DLMS_IGNORE_MALLOC
    arr_clear(list);
   13bc0:	4628      	mov	r0, r5
   13bc2:	f7fc fbb8 	bl	10336 <arr_clear>
    return ret;
}
   13bc6:	4620      	mov	r0, r4
   13bc8:	b003      	add	sp, #12
   13bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ret = arr_getByIndex(list, pos, (void**)&s);
   13bcc:	466a      	mov	r2, sp
   13bce:	b2b1      	uxth	r1, r6
   13bd0:	4628      	mov	r0, r5
   13bd2:	f7fc fbd8 	bl	10386 <arr_getByIndex>
        if (ret != 0)
   13bd6:	4604      	mov	r4, r0
   13bd8:	2800      	cmp	r0, #0
   13bda:	d1f1      	bne.n	13bc0 <obj_clearScriptTable+0xe>
        for (pos2 = 0; pos2 != s->actions.size; ++pos2)
   13bdc:	4607      	mov	r7, r0
   13bde:	9b00      	ldr	r3, [sp, #0]
   13be0:	1d18      	adds	r0, r3, #4
   13be2:	895b      	ldrh	r3, [r3, #10]
   13be4:	42bb      	cmp	r3, r7
   13be6:	d106      	bne.n	13bf6 <obj_clearScriptTable+0x44>
   13be8:	2400      	movs	r4, #0
        arr_clear(&s->actions);
   13bea:	9800      	ldr	r0, [sp, #0]
   13bec:	3004      	adds	r0, #4
   13bee:	f7fc fba2 	bl	10336 <arr_clear>
    for (pos = 0; pos != list->size; ++pos)
   13bf2:	3601      	adds	r6, #1
   13bf4:	e7e1      	b.n	13bba <obj_clearScriptTable+0x8>
            ret = arr_getByIndex(&s->actions, pos2, (void**)&sa);
   13bf6:	aa01      	add	r2, sp, #4
   13bf8:	b2b9      	uxth	r1, r7
   13bfa:	f7fc fbc4 	bl	10386 <arr_getByIndex>
            if (ret != 0)
   13bfe:	4604      	mov	r4, r0
   13c00:	2800      	cmp	r0, #0
   13c02:	d1f2      	bne.n	13bea <obj_clearScriptTable+0x38>
            var_clear(&sa->parameter);
   13c04:	9801      	ldr	r0, [sp, #4]
   13c06:	3008      	adds	r0, #8
   13c08:	f006 facd 	bl	1a1a6 <var_clear>
        for (pos2 = 0; pos2 != s->actions.size; ++pos2)
   13c0c:	3701      	adds	r7, #1
   13c0e:	e7e6      	b.n	13bde <obj_clearScriptTable+0x2c>

00013c10 <obj_clearChargeTables>:
#endif //DLMS_IGNORE_SCRIPT_TABLE

#ifndef DLMS_IGNORE_CHARGE
int obj_clearChargeTables(gxArray* list)
{
   13c10:	b573      	push	{r0, r1, r4, r5, r6, lr}
   13c12:	4605      	mov	r5, r0
    int ret = DLMS_ERROR_CODE_OK;
#ifndef DLMS_IGNORE_MALLOC
    int pos;
    gxChargeTable* it;
    for (pos = 0; pos != list->size; ++pos)
   13c14:	2600      	movs	r6, #0
   13c16:	88eb      	ldrh	r3, [r5, #6]
   13c18:	42b3      	cmp	r3, r6
   13c1a:	d106      	bne.n	13c2a <obj_clearChargeTables+0x1a>
   13c1c:	2400      	movs	r4, #0
            break;
        }
        bb_clear(&it->index);
    }
#endif //DLMS_IGNORE_MALLOC
    arr_clear(list);
   13c1e:	4628      	mov	r0, r5
   13c20:	f7fc fb89 	bl	10336 <arr_clear>
    return ret;
}
   13c24:	4620      	mov	r0, r4
   13c26:	b002      	add	sp, #8
   13c28:	bd70      	pop	{r4, r5, r6, pc}
        if ((ret = arr_getByIndex(list, pos, (void**)&it)) != 0)
   13c2a:	aa01      	add	r2, sp, #4
   13c2c:	b2b1      	uxth	r1, r6
   13c2e:	4628      	mov	r0, r5
   13c30:	f7fc fba9 	bl	10386 <arr_getByIndex>
   13c34:	4604      	mov	r4, r0
   13c36:	2800      	cmp	r0, #0
   13c38:	d1f1      	bne.n	13c1e <obj_clearChargeTables+0xe>
        bb_clear(&it->index);
   13c3a:	9801      	ldr	r0, [sp, #4]
   13c3c:	f7f9 f995 	bl	cf6a <bb_clear>
    for (pos = 0; pos != list->size; ++pos)
   13c40:	3601      	adds	r6, #1
   13c42:	e7e8      	b.n	13c16 <obj_clearChargeTables+0x6>

00013c44 <obj_clearRegisterActivationAssignment>:
#endif //DLMS_IGNORE_CHARGE

#ifndef DLMS_IGNORE_REGISTER_ACTIVATION
#if !(defined(DLMS_IGNORE_OBJECT_POINTERS) || defined(DLMS_IGNORE_MALLOC) || defined(DLMS_COSEM_EXACT_DATA_TYPES))
int obj_clearRegisterActivationAssignment(objectArray* list)
{
   13c44:	b508      	push	{r3, lr}
    oa_empty(list);
   13c46:	f006 f8b1 	bl	19dac <oa_empty>
    return 0;
}
   13c4a:	2000      	movs	r0, #0
   13c4c:	bd08      	pop	{r3, pc}

00013c4e <obj_clearRegisterActivationMaskList>:
    return 0;
}
#endif //!(defined(DLMS_IGNORE_OBJECT_POINTERS) || defined(DLMS_IGNORE_MALLOC))

int obj_clearRegisterActivationMaskList(gxArray* list)
{
   13c4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   13c50:	4605      	mov	r5, r0
    arr_clear(list);
    return ret;
#else
    int ret = 0, pos;
    gxKey* it;
    for (pos = 0; pos != list->size; ++pos)
   13c52:	2600      	movs	r6, #0
   13c54:	88eb      	ldrh	r3, [r5, #6]
   13c56:	42b3      	cmp	r3, r6
   13c58:	d106      	bne.n	13c68 <obj_clearRegisterActivationMaskList+0x1a>
   13c5a:	2400      	movs	r4, #0
            break;
        }
        bb_clear((gxByteBuffer*)it->key);
        bb_clear((gxByteBuffer*)it->value);
    }
    arr_clearKeyValuePair(list);
   13c5c:	4628      	mov	r0, r5
   13c5e:	f7fc fba3 	bl	103a8 <arr_clearKeyValuePair>
    return ret;
#endif //DLMS_COSEM_EXACT_DATA_TYPES
#endif //DLMS_IGNORE_MALLOC
}
   13c62:	4620      	mov	r0, r4
   13c64:	b002      	add	sp, #8
   13c66:	bd70      	pop	{r4, r5, r6, pc}
        ret = arr_getByIndex(list, pos, (void**)&it);
   13c68:	aa01      	add	r2, sp, #4
   13c6a:	b2b1      	uxth	r1, r6
   13c6c:	4628      	mov	r0, r5
   13c6e:	f7fc fb8a 	bl	10386 <arr_getByIndex>
        if (ret != 0)
   13c72:	4604      	mov	r4, r0
   13c74:	2800      	cmp	r0, #0
   13c76:	d1f1      	bne.n	13c5c <obj_clearRegisterActivationMaskList+0xe>
        bb_clear((gxByteBuffer*)it->key);
   13c78:	9b01      	ldr	r3, [sp, #4]
   13c7a:	6818      	ldr	r0, [r3, #0]
   13c7c:	f7f9 f975 	bl	cf6a <bb_clear>
        bb_clear((gxByteBuffer*)it->value);
   13c80:	9b01      	ldr	r3, [sp, #4]
   13c82:	6858      	ldr	r0, [r3, #4]
   13c84:	f7f9 f971 	bl	cf6a <bb_clear>
    for (pos = 0; pos != list->size; ++pos)
   13c88:	3601      	adds	r6, #1
   13c8a:	e7e3      	b.n	13c54 <obj_clearRegisterActivationMaskList+0x6>

00013c8c <obj_clearUserList>:
    return ret;
}
#endif //DLMS_IGNORE_ZIG_BEE_NETWORK_CONTROL

int obj_clearUserList(gxArray* list)
{
   13c8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   13c8e:	4604      	mov	r4, r0
    int ret = 0;
#ifndef DLMS_IGNORE_MALLOC
    int pos;
    gxKey2* it;
    for (pos = 0; pos != list->size; ++pos)
   13c90:	2500      	movs	r5, #0
   13c92:	88e3      	ldrh	r3, [r4, #6]
   13c94:	42ab      	cmp	r3, r5
   13c96:	d105      	bne.n	13ca4 <obj_clearUserList+0x18>
            return ret;
        }
        gxfree(it->value);
    }
#endif //DLMS_IGNORE_MALLOC
    arr_clear(list);
   13c98:	4620      	mov	r0, r4
   13c9a:	f7fc fb4c 	bl	10336 <arr_clear>
    return ret;
   13c9e:	2000      	movs	r0, #0
}
   13ca0:	b003      	add	sp, #12
   13ca2:	bd30      	pop	{r4, r5, pc}
        ret = arr_getByIndex(list, pos, (void**)&it);
   13ca4:	aa01      	add	r2, sp, #4
   13ca6:	b2a9      	uxth	r1, r5
   13ca8:	4620      	mov	r0, r4
   13caa:	f7fc fb6c 	bl	10386 <arr_getByIndex>
        if (ret != 0)
   13cae:	2800      	cmp	r0, #0
   13cb0:	d1f6      	bne.n	13ca0 <obj_clearUserList+0x14>
        gxfree(it->value);
   13cb2:	9b01      	ldr	r3, [sp, #4]
   13cb4:	6858      	ldr	r0, [r3, #4]
   13cb6:	f7f7 ff85 	bl	bbc4 <free>
    for (pos = 0; pos != list->size; ++pos)
   13cba:	3501      	adds	r5, #1
   13cbc:	e7e9      	b.n	13c92 <obj_clearUserList+0x6>

00013cbe <obj_clearBitArrayList>:

int obj_clearBitArrayList(
    gxArray* list)
{
   13cbe:	b537      	push	{r0, r1, r2, r4, r5, lr}
   13cc0:	4604      	mov	r4, r0
    int ret = 0;
#ifndef DLMS_IGNORE_MALLOC
    int pos;
    bitArray* it;
    for (pos = 0; pos != list->size; ++pos)
   13cc2:	2500      	movs	r5, #0
   13cc4:	88e3      	ldrh	r3, [r4, #6]
   13cc6:	42ab      	cmp	r3, r5
   13cc8:	d105      	bne.n	13cd6 <obj_clearBitArrayList+0x18>
            return ret;
        }
        ba_clear(it);
    }
#endif //DLMS_IGNORE_MALLOC
    arr_clear(list);
   13cca:	4620      	mov	r0, r4
   13ccc:	f7fc fb33 	bl	10336 <arr_clear>
    return ret;
   13cd0:	2000      	movs	r0, #0
}
   13cd2:	b003      	add	sp, #12
   13cd4:	bd30      	pop	{r4, r5, pc}
        ret = arr_getByIndex(list, pos, (void**)&it);
   13cd6:	aa01      	add	r2, sp, #4
   13cd8:	b2a9      	uxth	r1, r5
   13cda:	4620      	mov	r0, r4
   13cdc:	f7fc fb53 	bl	10386 <arr_getByIndex>
        if (ret != 0)
   13ce0:	2800      	cmp	r0, #0
   13ce2:	d1f6      	bne.n	13cd2 <obj_clearBitArrayList+0x14>
        ba_clear(it);
   13ce4:	9801      	ldr	r0, [sp, #4]
   13ce6:	f7f8 fee6 	bl	cab6 <ba_clear>
    for (pos = 0; pos != list->size; ++pos)
   13cea:	3501      	adds	r5, #1
   13cec:	e7ea      	b.n	13cc4 <obj_clearBitArrayList+0x6>

00013cee <obj_clearAvailableSwitches>:

#ifndef DLMS_IGNORE_PRIME_NB_OFDM_PLC_MAC_NETWORK_ADMINISTRATION_DATA
//Clear available switches.
int obj_clearAvailableSwitches(
    gxArray* list)
{
   13cee:	b537      	push	{r0, r1, r2, r4, r5, lr}
   13cf0:	4604      	mov	r4, r0
    int ret = 0;
#ifndef DLMS_IGNORE_MALLOC
    int pos;
    gxMacAvailableSwitch* it;
    for (pos = 0; pos != list->size; ++pos)
   13cf2:	2500      	movs	r5, #0
   13cf4:	88e3      	ldrh	r3, [r4, #6]
   13cf6:	42ab      	cmp	r3, r5
   13cf8:	d105      	bne.n	13d06 <obj_clearAvailableSwitches+0x18>
            return ret;
        }
        bb_clear(&it->sna);
    }
#endif //DLMS_IGNORE_MALLOC
    arr_clear(list);
   13cfa:	4620      	mov	r0, r4
   13cfc:	f7fc fb1b 	bl	10336 <arr_clear>
    return ret;
   13d00:	2000      	movs	r0, #0
}
   13d02:	b003      	add	sp, #12
   13d04:	bd30      	pop	{r4, r5, pc}
        ret = arr_getByIndex(list, pos, (void**)&it);
   13d06:	aa01      	add	r2, sp, #4
   13d08:	b2a9      	uxth	r1, r5
   13d0a:	4620      	mov	r0, r4
   13d0c:	f7fc fb3b 	bl	10386 <arr_getByIndex>
        if (ret != 0)
   13d10:	2800      	cmp	r0, #0
   13d12:	d1f6      	bne.n	13d02 <obj_clearAvailableSwitches+0x14>
        bb_clear(&it->sna);
   13d14:	9801      	ldr	r0, [sp, #4]
   13d16:	f7f9 f928 	bl	cf6a <bb_clear>
    for (pos = 0; pos != list->size; ++pos)
   13d1a:	3501      	adds	r5, #1
   13d1c:	e7ea      	b.n	13cf4 <obj_clearAvailableSwitches+0x6>

00013d1e <obj_clearCertificateInfo>:
#endif //DLMS_IGNORE_PRIME_NB_OFDM_PLC_MAC_NETWORK_ADMINISTRATION_DATA

#ifndef DLMS_IGNORE_SECURITY_SETUP
int obj_clearCertificateInfo(gxArray* arr)
{
   13d1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   13d20:	4605      	mov	r5, r0
    int ret = 0;
#ifndef DLMS_IGNORE_MALLOC
    gxCertificateInfo* it;
    uint16_t pos;
    for (pos = 0; pos != arr->size; ++pos)
   13d22:	2600      	movs	r6, #0
   13d24:	88eb      	ldrh	r3, [r5, #6]
   13d26:	b2b1      	uxth	r1, r6
   13d28:	428b      	cmp	r3, r1
   13d2a:	d106      	bne.n	13d3a <obj_clearCertificateInfo+0x1c>
   13d2c:	2400      	movs	r4, #0
        gxfree(it->issuer);
        gxfree(it->subject);
        gxfree(it->subjectAltName);
    }
#endif //DLMS_IGNORE_MALLOC
    arr_clear(arr);
   13d2e:	4628      	mov	r0, r5
   13d30:	f7fc fb01 	bl	10336 <arr_clear>
    return ret;
}
   13d34:	4620      	mov	r0, r4
   13d36:	b002      	add	sp, #8
   13d38:	bd70      	pop	{r4, r5, r6, pc}
        if ((ret = arr_getByIndex(arr, pos, (void**)&it)) != 0)
   13d3a:	aa01      	add	r2, sp, #4
   13d3c:	4628      	mov	r0, r5
   13d3e:	f7fc fb22 	bl	10386 <arr_getByIndex>
   13d42:	3601      	adds	r6, #1
   13d44:	4604      	mov	r4, r0
   13d46:	2800      	cmp	r0, #0
   13d48:	d1f1      	bne.n	13d2e <obj_clearCertificateInfo+0x10>
        gxfree(it->serialNumber);
   13d4a:	9b01      	ldr	r3, [sp, #4]
   13d4c:	6858      	ldr	r0, [r3, #4]
   13d4e:	f7f7 ff39 	bl	bbc4 <free>
        gxfree(it->issuer);
   13d52:	9b01      	ldr	r3, [sp, #4]
   13d54:	6898      	ldr	r0, [r3, #8]
   13d56:	f7f7 ff35 	bl	bbc4 <free>
        gxfree(it->subject);
   13d5a:	9b01      	ldr	r3, [sp, #4]
   13d5c:	68d8      	ldr	r0, [r3, #12]
   13d5e:	f7f7 ff31 	bl	bbc4 <free>
        gxfree(it->subjectAltName);
   13d62:	9b01      	ldr	r3, [sp, #4]
   13d64:	6918      	ldr	r0, [r3, #16]
   13d66:	f7f7 ff2d 	bl	bbc4 <free>
    for (pos = 0; pos != arr->size; ++pos)
   13d6a:	e7db      	b.n	13d24 <obj_clearCertificateInfo+0x6>

00013d6c <obj_attributeCount>:
}

unsigned char obj_attributeCount(gxObject* object)
{
    unsigned char ret;
    switch (object->objectType)
   13d6c:	8803      	ldrh	r3, [r0, #0]
   13d6e:	3b01      	subs	r3, #1
   13d70:	2b72      	cmp	r3, #114	; 0x72
   13d72:	d865      	bhi.n	13e40 <obj_attributeCount+0xd4>
   13d74:	e8df f003 	tbb	[pc, r3]
   13d78:	605e646c 	.word	0x605e646c
   13d7c:	665c3a66 	.word	0x665c3a66
   13d80:	466c6c6c 	.word	0x466c6c6c
   13d84:	643e6464 	.word	0x643e6464
   13d88:	3c66566c 	.word	0x3c66566c
   13d8c:	60663a3a 	.word	0x60663a3a
   13d90:	683a3a60 	.word	0x683a3a60
   13d94:	64646868 	.word	0x64646868
   13d98:	64646464 	.word	0x64646464
   13d9c:	56646464 	.word	0x56646464
   13da0:	606c3c68 	.word	0x606c3c68
   13da4:	3c5c643a 	.word	0x3c5c643a
   13da8:	606c6264 	.word	0x606c6264
   13dac:	6c64645c 	.word	0x6c64645c
   13db0:	64686664 	.word	0x64686664
   13db4:	4e646864 	.word	0x4e646864
   13db8:	6864643a 	.word	0x6864643a
   13dbc:	546a3a64 	.word	0x546a3a64
   13dc0:	64646c64 	.word	0x64646c64
   13dc4:	5e646464 	.word	0x5e646464
   13dc8:	56625c60 	.word	0x56625c60
   13dcc:	64643a68 	.word	0x64643a68
   13dd0:	64646464 	.word	0x64646464
   13dd4:	64646464 	.word	0x64646464
   13dd8:	64646464 	.word	0x64646464
   13ddc:	3a5e6054 	.word	0x3a5e6054
   13de0:	64646464 	.word	0x64646464
   13de4:	6a586464 	.word	0x6a586464
   13de8:	645a      	.short	0x645a
   13dea:	68          	.byte	0x68
   13deb:	00          	.byte	0x00
        break;
    case DLMS_OBJECT_TYPE_REGISTER:
        ret = 3;
        break;
    case DLMS_OBJECT_TYPE_ACTION_SCHEDULE:
        ret = 4;
   13dec:	2004      	movs	r0, #4
        break;
   13dee:	4770      	bx	lr
    case DLMS_OBJECT_TYPE_ACTIVITY_CALENDAR:
        ret = 10;
   13df0:	200a      	movs	r0, #10
        break;
   13df2:	4770      	bx	lr
    case DLMS_OBJECT_TYPE_ASSOCIATION_LOGICAL_NAME:
        //user_list and current_user are in version 2.
        if (object->version > 1)
   13df4:	7883      	ldrb	r3, [r0, #2]
   13df6:	2b01      	cmp	r3, #1
   13df8:	d828      	bhi.n	13e4c <obj_attributeCount+0xe0>
        {
            ret = 11;
        }
        //Security Setup Reference is from version 1.
        else if (object->version > 0)
   13dfa:	2b00      	cmp	r3, #0
            ret = 9;
        }

        else
        {
            ret = 8;
   13dfc:	bf14      	ite	ne
   13dfe:	2009      	movne	r0, #9
   13e00:	2008      	moveq	r0, #8
   13e02:	4770      	bx	lr
        }
        break;
    case DLMS_OBJECT_TYPE_ASSOCIATION_SHORT_NAME:
        if (object->version < 2)
   13e04:	7883      	ldrb	r3, [r0, #2]
   13e06:	2b01      	cmp	r3, #1
   13e08:	d922      	bls.n	13e50 <obj_attributeCount+0xe4>
        {
            ret = 2;
        }
        else if (object->version < 3)
   13e0a:	2b02      	cmp	r3, #2
        {
            ret = 4;
   13e0c:	bf14      	ite	ne
   13e0e:	2006      	movne	r0, #6
   13e10:	2004      	moveq	r0, #4
   13e12:	4770      	bx	lr
        break;
    case DLMS_OBJECT_TYPE_GPRS_SETUP:
        ret = 4;
        break;
    case DLMS_OBJECT_TYPE_SECURITY_SETUP:
        if (object->version == 0)
   13e14:	7883      	ldrb	r3, [r0, #2]
   13e16:	2b00      	cmp	r3, #0
        {
            ret = 5;
   13e18:	bf14      	ite	ne
   13e1a:	2006      	movne	r0, #6
   13e1c:	2005      	moveq	r0, #5
   13e1e:	4770      	bx	lr
        break;
    case DLMS_OBJECT_TYPE_LIMITER:
        ret = 11;
        break;
    case DLMS_OBJECT_TYPE_MBUS_CLIENT:
        ret = 12;
   13e20:	200c      	movs	r0, #12
        break;
   13e22:	4770      	bx	lr
        break;
    case DLMS_OBJECT_TYPE_MBUS_MASTER_PORT_SETUP:
        ret = 2;
        break;
    case DLMS_OBJECT_TYPE_PUSH_SETUP:
        ret = 7;
   13e24:	2007      	movs	r0, #7
        break;
   13e26:	4770      	bx	lr
    case DLMS_OBJECT_TYPE_DATA_PROTECTION:
        ret = 6;
        break;
    case DLMS_OBJECT_TYPE_ACCOUNT:
        ret = 19;
   13e28:	2013      	movs	r0, #19
        break;
   13e2a:	4770      	bx	lr
    case DLMS_OBJECT_TYPE_CREDIT:
        ret = 11;
        break;
    case DLMS_OBJECT_TYPE_CHARGE:
        ret = 13;
   13e2c:	200d      	movs	r0, #13
        break;
   13e2e:	4770      	bx	lr
    case DLMS_OBJECT_TYPE_TARIFF_PLAN:
        ret = 5;
        break;
#endif //DLMS_ITALIAN_STANDARD
    case DLMS_OBJECT_TYPE_GSM_DIAGNOSTIC:
        ret = 8;
   13e30:	2008      	movs	r0, #8
        break;
   13e32:	4770      	bx	lr
    case DLMS_OBJECT_TYPE_PARAMETER_MONITOR:
        ret = 4;
        break;
#ifndef DLMS_IGNORE_LLC_SSCS_SETUP
    case DLMS_OBJECT_TYPE_LLC_SSCS_SETUP:
        ret = 3;
   13e34:	2003      	movs	r0, #3
        break;
   13e36:	4770      	bx	lr
#endif //DLMS_IGNORE_LLC_SSCS_SETUP
#ifndef DLMS_IGNORE_PRIME_NB_OFDM_PLC_PHYSICAL_LAYER_COUNTERS
    case DLMS_OBJECT_TYPE_PRIME_NB_OFDM_PLC_PHYSICAL_LAYER_COUNTERS:
        ret = 5;
   13e38:	2005      	movs	r0, #5
        break;
   13e3a:	4770      	bx	lr
        ret = 8;
        break;
#endif //DLMS_IGNORE_PRIME_NB_OFDM_PLC_MAC_SETUP
#ifndef DLMS_IGNORE_PRIME_NB_OFDM_PLC_MAC_FUNCTIONAL_PARAMETERS
    case DLMS_OBJECT_TYPE_PRIME_NB_OFDM_PLC_MAC_FUNCTIONAL_PARAMETERS:
        ret = 14;
   13e3c:	200e      	movs	r0, #14
        break;
   13e3e:	4770      	bx	lr
        ret = 6;
        break;
#endif //DLMS_IGNORE_ARBITRATOR
#ifndef DLMS_IGNORE_IEC_8802_LLC_TYPE1_SETUP
    case DLMS_OBJECT_TYPE_IEC_8802_LLC_TYPE1_SETUP:
        ret = 1;
   13e40:	2001      	movs	r0, #1
        break;
   13e42:	4770      	bx	lr
#endif //DLMS_IGNORE_IEC_8802_LLC_TYPE1_SETUP
#ifndef DLMS_IGNORE_IEC_8802_LLC_TYPE2_SETUP
    case DLMS_OBJECT_TYPE_IEC_8802_LLC_TYPE2_SETUP:
        ret = 9;
   13e44:	2009      	movs	r0, #9
        break;
   13e46:	4770      	bx	lr
        return 6;
   13e48:	2006      	movs	r0, #6
   13e4a:	4770      	bx	lr
            ret = 11;
   13e4c:	200b      	movs	r0, #11
   13e4e:	4770      	bx	lr
            ret = 2;
   13e50:	2002      	movs	r0, #2
#endif
        ret = 1;
        break;
    }
    return ret;
}
   13e52:	4770      	bx	lr

00013e54 <obj_methodCount>:


unsigned char obj_methodCount(gxObject* object)
{
    unsigned char ret;
    switch (object->objectType)
   13e54:	8803      	ldrh	r3, [r0, #0]
   13e56:	3b03      	subs	r3, #3
   13e58:	2b70      	cmp	r3, #112	; 0x70
   13e5a:	d850      	bhi.n	13efe <obj_methodCount+0xaa>
   13e5c:	e8df f003 	tbb	[pc, r3]
   13e60:	45433939 	.word	0x45433939
   13e64:	45394143 	.word	0x45394143
   13e68:	4f4f4943 	.word	0x4f4f4943
   13e6c:	47394f3b 	.word	0x47394f3b
   13e70:	4f4f394f 	.word	0x4f4f394f
   13e74:	394f394f 	.word	0x394f394f
   13e78:	45394f4f 	.word	0x45394f4f
   13e7c:	4f4f4f4f 	.word	0x4f4f4f4f
   13e80:	4f4f4f4f 	.word	0x4f4f4f4f
   13e84:	454f394f 	.word	0x454f394f
   13e88:	394f4f4f 	.word	0x394f4f4f
   13e8c:	4f4f434f 	.word	0x4f4f434f
   13e90:	4f394f39 	.word	0x4f394f39
   13e94:	4f4f4f4f 	.word	0x4f4f4f4f
   13e98:	43394f4f 	.word	0x43394f4f
   13e9c:	4f434339 	.word	0x4f434339
   13ea0:	434f434f 	.word	0x434f434f
   13ea4:	4f4f494f 	.word	0x4f4f494f
   13ea8:	4f4f4f4f 	.word	0x4f4f4f4f
   13eac:	4f39394f 	.word	0x4f39394f
   13eb0:	4f39394f 	.word	0x4f39394f
   13eb4:	4f4f4f4f 	.word	0x4f4f4f4f
   13eb8:	4f4f4f4f 	.word	0x4f4f4f4f
   13ebc:	4f4f4f4f 	.word	0x4f4f4f4f
   13ec0:	4f4f4f4f 	.word	0x4f4f4f4f
   13ec4:	4f4f4d4f 	.word	0x4f4f4d4f
   13ec8:	4f4f4f4f 	.word	0x4f4f4f4f
   13ecc:	4f4b4545 	.word	0x4f4b4545
   13ed0:	39          	.byte	0x39
   13ed1:	00          	.byte	0x00
   13ed2:	2001      	movs	r0, #1
   13ed4:	4770      	bx	lr
        break;
    case DLMS_OBJECT_TYPE_ACTIVITY_CALENDAR:
        ret = 1;
        break;
    case DLMS_OBJECT_TYPE_ASSOCIATION_LOGICAL_NAME:
        if (object->version > 1)
   13ed6:	7883      	ldrb	r3, [r0, #2]
   13ed8:	2b01      	cmp	r3, #1
        {
            ret = 6;
        }
        else
        {
            ret = 4;
   13eda:	bf8c      	ite	hi
   13edc:	2006      	movhi	r0, #6
   13ede:	2004      	movls	r0, #4
   13ee0:	4770      	bx	lr
        break;
    case DLMS_OBJECT_TYPE_AUTO_CONNECT:
        ret = 1;
        break;
    case DLMS_OBJECT_TYPE_CLOCK:
        ret = 6;
   13ee2:	2006      	movs	r0, #6
        break;
   13ee4:	4770      	bx	lr
    case DLMS_OBJECT_TYPE_DEMAND_REGISTER:
        ret = 2;
   13ee6:	2002      	movs	r0, #2
        break;
   13ee8:	4770      	bx	lr
        break;
    case DLMS_OBJECT_TYPE_IEC_TWISTED_PAIR_SETUP:
        ret = 1;
        break;
    case DLMS_OBJECT_TYPE_IP4_SETUP:
        ret = 3;
   13eea:	2003      	movs	r0, #3
        break;
   13eec:	4770      	bx	lr
        break;
    case DLMS_OBJECT_TYPE_MBUS_SLAVE_PORT_SETUP:
        ret = 0;
        break;
    case DLMS_OBJECT_TYPE_IMAGE_TRANSFER:
        ret = 4;
   13eee:	2004      	movs	r0, #4
        break;
   13ef0:	4770      	bx	lr
        break;
    case DLMS_OBJECT_TYPE_LIMITER:
        ret = 0;
        break;
    case DLMS_OBJECT_TYPE_MBUS_CLIENT:
        ret = 8;
   13ef2:	2008      	movs	r0, #8
        break;
   13ef4:	4770      	bx	lr
        break;
    case DLMS_OBJECT_TYPE_CREDIT:
        ret = 3;
        break;
    case DLMS_OBJECT_TYPE_CHARGE:
        ret = 5;
   13ef6:	2005      	movs	r0, #5
        break;
   13ef8:	4770      	bx	lr
    case DLMS_OBJECT_TYPE_TOKEN_GATEWAY:
        ret = 1;
        break;
    case DLMS_OBJECT_TYPE_ZIG_BEE_NETWORK_CONTROL:
        ret = 11;
   13efa:	200b      	movs	r0, #11
        break;
   13efc:	4770      	bx	lr
        ret = 0;
   13efe:	2000      	movs	r0, #0
        assert(0);
#endif
        ret = 0;
    }
    return ret;
}
   13f00:	4770      	bx	lr

00013f02 <obj_clearParametersList>:
   13f02:	f7ff bd2d 	b.w	13960 <obj_clearPushObjectList>

00013f06 <clock_updateDST>:
#endif //DLMS_IGNORE_PARAMETER_MONITOR

#ifndef DLMS_IGNORE_CLOCK
#ifndef DLMS_IGNORE_SERVER
void clock_updateDST(gxClock* object, gxtime* value)
{
   13f06:	b538      	push	{r3, r4, r5, lr}
    if (object->enabled && time_compare(&object->begin, value) != 1 && time_compare(&object->end, value) != -1)
   13f08:	7c83      	ldrb	r3, [r0, #18]
{
   13f0a:	4604      	mov	r4, r0
   13f0c:	460d      	mov	r5, r1
    if (object->enabled && time_compare(&object->begin, value) != 1 && time_compare(&object->end, value) != -1)
   13f0e:	b1a3      	cbz	r3, 13f3a <clock_updateDST+0x34>
   13f10:	3024      	adds	r0, #36	; 0x24
   13f12:	f7f9 ffa0 	bl	de56 <time_compare>
   13f16:	2801      	cmp	r0, #1
   13f18:	d00f      	beq.n	13f3a <clock_updateDST+0x34>
   13f1a:	4629      	mov	r1, r5
   13f1c:	f104 0014 	add.w	r0, r4, #20
   13f20:	f7f9 ff99 	bl	de56 <time_compare>
   13f24:	3001      	adds	r0, #1
   13f26:	d008      	beq.n	13f3a <clock_updateDST+0x34>
    {
        object->status |= DLMS_CLOCK_STATUS_DAYLIGHT_SAVE_ACTIVE;
   13f28:	f894 3020 	ldrb.w	r3, [r4, #32]
   13f2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   13f30:	f884 3020 	strb.w	r3, [r4, #32]
    }
    else
    {
        object->status &= ~DLMS_CLOCK_STATUS_DAYLIGHT_SAVE_ACTIVE;
    }
    object->time.status = object->status;
   13f34:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
   13f38:	bd38      	pop	{r3, r4, r5, pc}
        object->status &= ~DLMS_CLOCK_STATUS_DAYLIGHT_SAVE_ACTIVE;
   13f3a:	f894 3020 	ldrb.w	r3, [r4, #32]
   13f3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   13f42:	e7f5      	b.n	13f30 <clock_updateDST+0x2a>

00013f44 <cosem_setValue>:
#endif
#include "../include/gxset.h"
#include "../include/cosem.h"

int cosem_setValue(dlmsSettings* settings, gxValueEventArg* e)
{
   13f44:	b410      	push	{r4}
   13f46:	460b      	mov	r3, r1
    int ret = DLMS_ERROR_CODE_OK;
    if (e->index == 1)
   13f48:	7e09      	ldrb	r1, [r1, #24]
   13f4a:	2901      	cmp	r1, #1
   13f4c:	d10e      	bne.n	13f6c <cosem_setValue+0x28>
    {
#if defined(DLMS_IGNORE_MALLOC) || defined(DLMS_COSEM_EXACT_DATA_TYPES)
        ret = cosem_getOctetString2(e->value.byteArr, e->target->logicalName, 6, NULL);
#else
        if (e->value.byteArr == NULL || e->value.byteArr->size - e->value.byteArr->position != 6)
   13f4e:	6898      	ldr	r0, [r3, #8]
   13f50:	2800      	cmp	r0, #0
   13f52:	f000 81b0 	beq.w	142b6 <cosem_setValue+0x372>
   13f56:	88c2      	ldrh	r2, [r0, #6]
   13f58:	8901      	ldrh	r1, [r0, #8]
   13f5a:	1a52      	subs	r2, r2, r1
   13f5c:	2a06      	cmp	r2, #6
   13f5e:	f040 81aa 	bne.w	142b6 <cosem_setValue+0x372>
        {
            ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        }
        else
        {
            ret = bb_get(e->value.byteArr, e->target->logicalName, 6);
   13f62:	6959      	ldr	r1, [r3, #20]
    default:
        //Unknown type.
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    return ret;
}
   13f64:	bc10      	pop	{r4}
            ret = bb_get(e->value.byteArr, e->target->logicalName, 6);
   13f66:	3106      	adds	r1, #6
   13f68:	f7f9 b9f4 	b.w	d354 <bb_get>
    switch (e->target->objectType)
   13f6c:	695c      	ldr	r4, [r3, #20]
   13f6e:	8822      	ldrh	r2, [r4, #0]
   13f70:	3a01      	subs	r2, #1
   13f72:	2a72      	cmp	r2, #114	; 0x72
   13f74:	f200 819f 	bhi.w	142b6 <cosem_setValue+0x372>
   13f78:	e8df f012 	tbh	[pc, r2, lsl #1]
   13f7c:	019d0073 	.word	0x019d0073
   13f80:	00a90077 	.word	0x00a90077
   13f84:	00f4009f 	.word	0x00f4009f
   13f88:	007c00ef 	.word	0x007c00ef
   13f8c:	0107010c 	.word	0x0107010c
   13f90:	00900111 	.word	0x00900111
   13f94:	019d019d 	.word	0x019d019d
   13f98:	019d008b 	.word	0x019d008b
   13f9c:	00d10102 	.word	0x00d10102
   13fa0:	008600bd 	.word	0x008600bd
   13fa4:	008100f8 	.word	0x008100f8
   13fa8:	00c200b8 	.word	0x00c200b8
   13fac:	011b00cc 	.word	0x011b00cc
   13fb0:	009500e5 	.word	0x009500e5
   13fb4:	019d009a 	.word	0x019d009a
   13fb8:	019d019d 	.word	0x019d019d
   13fbc:	019d019d 	.word	0x019d019d
   13fc0:	019d019d 	.word	0x019d019d
   13fc4:	019d019d 	.word	0x019d019d
   13fc8:	0125019d 	.word	0x0125019d
   13fcc:	00c70116 	.word	0x00c70116
   13fd0:	00ea00a4 	.word	0x00ea00a4
   13fd4:	019d00ae 	.word	0x019d00ae
   13fd8:	019d013e 	.word	0x019d013e
   13fdc:	0193019d 	.word	0x0193019d
   13fe0:	018e0184 	.word	0x018e0184
   13fe4:	019d0189 	.word	0x019d0189
   13fe8:	0198019d 	.word	0x0198019d
   13fec:	017a0175 	.word	0x017a0175
   13ff0:	019d017f 	.word	0x019d017f
   13ff4:	014300fd 	.word	0x014300fd
   13ff8:	00b301a1 	.word	0x00b301a1
   13ffc:	019d0148 	.word	0x019d0148
   14000:	0170019d 	.word	0x0170019d
   14004:	00d6019d 	.word	0x00d6019d
   14008:	00e000db 	.word	0x00e000db
   1400c:	0120019d 	.word	0x0120019d
   14010:	019d019d 	.word	0x019d019d
   14014:	019d019d 	.word	0x019d019d
   14018:	014d019d 	.word	0x014d019d
   1401c:	01570152 	.word	0x01570152
   14020:	0161015c 	.word	0x0161015c
   14024:	016b0166 	.word	0x016b0166
   14028:	019d019d 	.word	0x019d019d
   1402c:	019d019d 	.word	0x019d019d
   14030:	019d019d 	.word	0x019d019d
   14034:	019d019d 	.word	0x019d019d
   14038:	019d019d 	.word	0x019d019d
   1403c:	019d019d 	.word	0x019d019d
   14040:	019d019d 	.word	0x019d019d
   14044:	01a101a1 	.word	0x01a101a1
   14048:	01a101a1 	.word	0x01a101a1
   1404c:	019d019d 	.word	0x019d019d
   14050:	019d019d 	.word	0x019d019d
   14054:	019d019d 	.word	0x019d019d
   14058:	012f012a 	.word	0x012f012a
   1405c:	019d0134 	.word	0x019d0134
   14060:	0139      	.short	0x0139
}
   14062:	bc10      	pop	{r4}
        ret = cosem_setData(e);
   14064:	4618      	mov	r0, r3
   14066:	f000 b92c 	b.w	142c2 <cosem_setData>
        ret = cosem_setRegister((gxRegister*)e->target, e->index, &e->value);
   1406a:	4620      	mov	r0, r4
   1406c:	461a      	mov	r2, r3
}
   1406e:	bc10      	pop	{r4}
        ret = cosem_setRegister((gxRegister*)e->target, e->index, &e->value);
   14070:	f000 b932 	b.w	142d8 <cosem_setRegister>
        ret = cosem_setClock(settings, (gxClock*)e->target, e->index, &e->value);
   14074:	460a      	mov	r2, r1
   14076:	4621      	mov	r1, r4
}
   14078:	bc10      	pop	{r4}
        ret = cosem_setClock(settings, (gxClock*)e->target, e->index, &e->value);
   1407a:	f000 b9b4 	b.w	143e6 <cosem_setClock>
        ret = cosem_setActionSchedule(settings, (gxActionSchedule*)e->target, e->index, &e->value);
   1407e:	460a      	mov	r2, r1
   14080:	4621      	mov	r1, r4
}
   14082:	bc10      	pop	{r4}
        ret = cosem_setActionSchedule(settings, (gxActionSchedule*)e->target, e->index, &e->value);
   14084:	f000 bc86 	b.w	14994 <cosem_setActionSchedule>
        ret = cosem_setActivityCalendar(settings, (gxActivityCalendar*)e->target, e->index, &e->value);
   14088:	460a      	mov	r2, r1
   1408a:	4621      	mov	r1, r4
}
   1408c:	bc10      	pop	{r4}
        ret = cosem_setActivityCalendar(settings, (gxActivityCalendar*)e->target, e->index, &e->value);
   1408e:	f000 bc19 	b.w	148c4 <cosem_setActivityCalendar>
        ret = cosem_setAssociationLogicalName(settings, (gxAssociationLogicalName*)e->target, e->index, &e->value);
   14092:	460a      	mov	r2, r1
   14094:	4621      	mov	r1, r4
}
   14096:	bc10      	pop	{r4}
        ret = cosem_setAssociationLogicalName(settings, (gxAssociationLogicalName*)e->target, e->index, &e->value);
   14098:	f000 bdef 	b.w	14c7a <cosem_setAssociationLogicalName>
        ret = cosem_setAssociationShortName(settings, (gxAssociationShortName*)e->target, e->index, &e->value);
   1409c:	460a      	mov	r2, r1
   1409e:	4621      	mov	r1, r4
}
   140a0:	bc10      	pop	{r4}
        ret = cosem_setAssociationShortName(settings, (gxAssociationShortName*)e->target, e->index, &e->value);
   140a2:	f001 ba7a 	b.w	1559a <cosem_setAssociationShortName>
        ret = cosem_setAutoAnswer((gxAutoAnswer*)e->target, e->index, &e->value);
   140a6:	4620      	mov	r0, r4
   140a8:	461a      	mov	r2, r3
}
   140aa:	bc10      	pop	{r4}
        ret = cosem_setAutoAnswer((gxAutoAnswer*)e->target, e->index, &e->value);
   140ac:	f001 baa6 	b.w	155fc <cosem_setAutoAnswer>
        ret = cosem_setAutoConnect((gxAutoConnect*)e->target, e->index, &e->value);
   140b0:	4620      	mov	r0, r4
   140b2:	461a      	mov	r2, r3
}
   140b4:	bc10      	pop	{r4}
        ret = cosem_setAutoConnect((gxAutoConnect*)e->target, e->index, &e->value);
   140b6:	f001 bb3e 	b.w	15736 <cosem_setAutoConnect>
        ret = cosem_setDemandRegister((gxDemandRegister*)e->target, e->index, &e->value);
   140ba:	4620      	mov	r0, r4
   140bc:	461a      	mov	r2, r3
}
   140be:	bc10      	pop	{r4}
        ret = cosem_setDemandRegister((gxDemandRegister*)e->target, e->index, &e->value);
   140c0:	f001 bbe7 	b.w	15892 <cosem_setDemandRegister>
        ret = cosem_setMacAddressSetup((gxMacAddressSetup*)e->target, e->index, &e->value);
   140c4:	4620      	mov	r0, r4
   140c6:	461a      	mov	r2, r3
}
   140c8:	bc10      	pop	{r4}
        ret = cosem_setMacAddressSetup((gxMacAddressSetup*)e->target, e->index, &e->value);
   140ca:	f001 bc6e 	b.w	159aa <cosem_setMacAddressSetup>
        ret = cosem_setExtendedRegister((gxExtendedRegister*)e->target, e->index, &e->value);
   140ce:	4620      	mov	r0, r4
   140d0:	461a      	mov	r2, r3
}
   140d2:	bc10      	pop	{r4}
        ret = cosem_setExtendedRegister((gxExtendedRegister*)e->target, e->index, &e->value);
   140d4:	f001 bc81 	b.w	159da <cosem_setExtendedRegister>
        ret = cosem_setGprsSetup((gxGPRSSetup*)e->target, e->index, &e->value);
   140d8:	4620      	mov	r0, r4
   140da:	461a      	mov	r2, r3
}
   140dc:	bc10      	pop	{r4}
        ret = cosem_setGprsSetup((gxGPRSSetup*)e->target, e->index, &e->value);
   140de:	f001 bcd1 	b.w	15a84 <cosem_setGprsSetup>
        ret = cosem_setSecuritySetup((gxSecuritySetup*)e->target, e->index, &e->value);
   140e2:	4620      	mov	r0, r4
   140e4:	461a      	mov	r2, r3
}
   140e6:	bc10      	pop	{r4}
        ret = cosem_setSecuritySetup((gxSecuritySetup*)e->target, e->index, &e->value);
   140e8:	f001 bd98 	b.w	15c1c <cosem_setSecuritySetup>
        ret = cosem_setIecHdlcSetup((gxIecHdlcSetup*)e->target, e->index, &e->value);
   140ec:	4620      	mov	r0, r4
   140ee:	461a      	mov	r2, r3
}
   140f0:	bc10      	pop	{r4}
        ret = cosem_setIecHdlcSetup((gxIecHdlcSetup*)e->target, e->index, &e->value);
   140f2:	f001 bec8 	b.w	15e86 <cosem_setIecHdlcSetup>
        ret = cosem_setIecLocalPortSetup((gxLocalPortSetup*)e->target, e->index, &e->value);
   140f6:	4620      	mov	r0, r4
   140f8:	461a      	mov	r2, r3
}
   140fa:	bc10      	pop	{r4}
        ret = cosem_setIecLocalPortSetup((gxLocalPortSetup*)e->target, e->index, &e->value);
   140fc:	f001 befa 	b.w	15ef4 <cosem_setIecLocalPortSetup>
        ret = cosem_setIecTwistedPairSetup((gxIecTwistedPairSetup*)e->target, e->index, &e->value);
   14100:	4620      	mov	r0, r4
   14102:	461a      	mov	r2, r3
}
   14104:	bc10      	pop	{r4}
        ret = cosem_setIecTwistedPairSetup((gxIecTwistedPairSetup*)e->target, e->index, &e->value);
   14106:	f001 bf3a 	b.w	15f7e <cosem_setIecTwistedPairSetup>
        ret = cosem_setIP4Setup(settings, (gxIp4Setup*)e->target, e->index, &e->value);
   1410a:	460a      	mov	r2, r1
   1410c:	4621      	mov	r1, r4
}
   1410e:	bc10      	pop	{r4}
        ret = cosem_setIP4Setup(settings, (gxIp4Setup*)e->target, e->index, &e->value);
   14110:	f001 bf87 	b.w	16022 <cosem_setIP4Setup>
        ret = cosem_setMbusSlavePortSetup((gxMbusSlavePortSetup*)e->target, e->index, &e->value);
   14114:	4620      	mov	r0, r4
   14116:	461a      	mov	r2, r3
}
   14118:	bc10      	pop	{r4}
        ret = cosem_setMbusSlavePortSetup((gxMbusSlavePortSetup*)e->target, e->index, &e->value);
   1411a:	f002 b86c 	b.w	161f6 <cosem_setMbusSlavePortSetup>
        ret = cosem_setImageTransfer((gxImageTransfer*)e->target, e->index, &e->value);
   1411e:	4620      	mov	r0, r4
   14120:	461a      	mov	r2, r3
}
   14122:	bc10      	pop	{r4}
        ret = cosem_setImageTransfer((gxImageTransfer*)e->target, e->index, &e->value);
   14124:	f003 befd 	b.w	17f22 <cosem_setImageTransfer>
        ret = cosem_setDisconnectControl((gxDisconnectControl*)e->target, e->index, &e->value);
   14128:	4620      	mov	r0, r4
   1412a:	461a      	mov	r2, r3
}
   1412c:	bc10      	pop	{r4}
        ret = cosem_setDisconnectControl((gxDisconnectControl*)e->target, e->index, &e->value);
   1412e:	f002 b881 	b.w	16234 <cosem_setDisconnectControl>
        ret = cosem_setLimiter(settings, (gxLimiter*)e->target, e->index, &e->value);
   14132:	460a      	mov	r2, r1
   14134:	4621      	mov	r1, r4
}
   14136:	bc10      	pop	{r4}
        ret = cosem_setLimiter(settings, (gxLimiter*)e->target, e->index, &e->value);
   14138:	f002 b894 	b.w	16264 <cosem_setLimiter>
        ret = cosem_setmMbusClient(settings, (gxMBusClient*)e->target, e->index, &e->value);
   1413c:	460a      	mov	r2, r1
   1413e:	4621      	mov	r1, r4
}
   14140:	bc10      	pop	{r4}
        ret = cosem_setmMbusClient(settings, (gxMBusClient*)e->target, e->index, &e->value);
   14142:	f002 ba17 	b.w	16574 <cosem_setmMbusClient>
        ret = cosem_setModemConfiguration((gxModemConfiguration*)e->target, e->index, &e->value);
   14146:	4620      	mov	r0, r4
   14148:	461a      	mov	r2, r3
}
   1414a:	bc10      	pop	{r4}
        ret = cosem_setModemConfiguration((gxModemConfiguration*)e->target, e->index, &e->value);
   1414c:	f002 baef 	b.w	1672e <cosem_setModemConfiguration>
        ret = cosem_setPppSetup(settings, (gxPppSetup*)e->target, e->index, &e->value);
   14150:	460a      	mov	r2, r1
   14152:	4621      	mov	r1, r4
}
   14154:	bc10      	pop	{r4}
        ret = cosem_setPppSetup(settings, (gxPppSetup*)e->target, e->index, &e->value);
   14156:	f002 bb88 	b.w	1686a <cosem_setPppSetup>
        ret = cosem_setProfileGeneric(settings, (gxProfileGeneric*)e->target, e->index, &e->value);
   1415a:	460a      	mov	r2, r1
   1415c:	4621      	mov	r1, r4
}
   1415e:	bc10      	pop	{r4}
        ret = cosem_setProfileGeneric(settings, (gxProfileGeneric*)e->target, e->index, &e->value);
   14160:	f7ef be4a 	b.w	3df8 <cosem_setProfileGeneric>
}
   14164:	bc10      	pop	{r4}
        ret = cosem_setRegisterActivation(settings, e);
   14166:	4619      	mov	r1, r3
   14168:	f002 bc93 	b.w	16a92 <cosem_setRegisterActivation>
        ret = cosem_setRegisterMonitor(settings, (gxRegisterMonitor*)e->target, e->index, &e->value);
   1416c:	460a      	mov	r2, r1
   1416e:	4621      	mov	r1, r4
}
   14170:	bc10      	pop	{r4}
        ret = cosem_setRegisterMonitor(settings, (gxRegisterMonitor*)e->target, e->index, &e->value);
   14172:	f002 bd60 	b.w	16c36 <cosem_setRegisterMonitor>
        ret = cosem_setRegistertable((gxRegisterTable*)e->target, e->index, &e->value);
   14176:	4620      	mov	r0, r4
   14178:	461a      	mov	r2, r3
}
   1417a:	bc10      	pop	{r4}
        ret = cosem_setRegistertable((gxRegisterTable*)e->target, e->index, &e->value);
   1417c:	f000 b8df 	b.w	1433e <cosem_setRegistertable>
        ret = cosem_setSapAssignment((gxSapAssignment*)e->target, e->index, &e->value);
   14180:	4620      	mov	r0, r4
   14182:	461a      	mov	r2, r3
}
   14184:	bc10      	pop	{r4}
        ret = cosem_setSapAssignment((gxSapAssignment*)e->target, e->index, &e->value);
   14186:	f002 bea9 	b.w	16edc <cosem_setSapAssignment>
        ret = cosem_setSchedule(settings, (gxSchedule*)e->target, e->index, &e->value);
   1418a:	460a      	mov	r2, r1
   1418c:	4621      	mov	r1, r4
}
   1418e:	bc10      	pop	{r4}
        ret = cosem_setSchedule(settings, (gxSchedule*)e->target, e->index, &e->value);
   14190:	f002 befb 	b.w	16f8a <cosem_setSchedule>
        ret = cosem_setScriptTable(settings, (gxScriptTable*)e->target, e->index, &e->value);
   14194:	460a      	mov	r2, r1
   14196:	4621      	mov	r1, r4
}
   14198:	bc10      	pop	{r4}
        ret = cosem_setScriptTable(settings, (gxScriptTable*)e->target, e->index, &e->value);
   1419a:	f003 b811 	b.w	171c0 <cosem_setScriptTable>
        ret = cosem_setSpecialDaysTable((gxSpecialDaysTable*)e->target, e->index, &e->value);
   1419e:	4620      	mov	r0, r4
   141a0:	461a      	mov	r2, r3
}
   141a2:	bc10      	pop	{r4}
        ret = cosem_setSpecialDaysTable((gxSpecialDaysTable*)e->target, e->index, &e->value);
   141a4:	f003 b97b 	b.w	1749e <cosem_setSpecialDaysTable>
        ret = cosem_setTcpUdpSetup(settings, (gxTcpUdpSetup*)e->target, e->index, &e->value);
   141a8:	460a      	mov	r2, r1
   141aa:	4621      	mov	r1, r4
}
   141ac:	bc10      	pop	{r4}
        ret = cosem_setTcpUdpSetup(settings, (gxTcpUdpSetup*)e->target, e->index, &e->value);
   141ae:	f003 b9df 	b.w	17570 <cosem_setTcpUdpSetup>
        ret = cosem_setUtilityTables((gxUtilityTables*)e->target, e->index, &e->value);
   141b2:	4620      	mov	r0, r4
   141b4:	461a      	mov	r2, r3
}
   141b6:	bc10      	pop	{r4}
        ret = cosem_setUtilityTables((gxUtilityTables*)e->target, e->index, &e->value);
   141b8:	f001 bffc 	b.w	161b4 <cosem_setUtilityTables>
        ret = cosem_setMbusMasterPortSetup((gxMBusMasterPortSetup*)e->target, e->index, &e->value);
   141bc:	4620      	mov	r0, r4
   141be:	461a      	mov	r2, r3
}
   141c0:	bc10      	pop	{r4}
        ret = cosem_setMbusMasterPortSetup((gxMBusMasterPortSetup*)e->target, e->index, &e->value);
   141c2:	f003 ba0b 	b.w	175dc <cosem_setMbusMasterPortSetup>
        ret = cosem_setPushSetup(settings, (gxPushSetup*)e->target, e->index, &e->value);
   141c6:	460a      	mov	r2, r1
   141c8:	4621      	mov	r1, r4
}
   141ca:	bc10      	pop	{r4}
        ret = cosem_setPushSetup(settings, (gxPushSetup*)e->target, e->index, &e->value);
   141cc:	f003 ba13 	b.w	175f6 <cosem_setPushSetup>
        ret = cosem_setAccount((gxAccount*)e->target, e->index, &e->value);
   141d0:	4620      	mov	r0, r4
   141d2:	461a      	mov	r2, r3
}
   141d4:	bc10      	pop	{r4}
        ret = cosem_setAccount((gxAccount*)e->target, e->index, &e->value);
   141d6:	f003 bcd5 	b.w	17b84 <cosem_setAccount>
        ret = cosem_setCredit((gxCredit*)e->target, e->index, &e->value);
   141da:	4620      	mov	r0, r4
   141dc:	461a      	mov	r2, r3
}
   141de:	bc10      	pop	{r4}
        ret = cosem_setCredit((gxCredit*)e->target, e->index, &e->value);
   141e0:	f003 bc70 	b.w	17ac4 <cosem_setCredit>
        ret = cosem_setCharge(settings, (gxCharge*)e->target, e->index, &e->value);
   141e4:	460a      	mov	r2, r1
   141e6:	4621      	mov	r1, r4
}
   141e8:	bc10      	pop	{r4}
        ret = cosem_setCharge(settings, (gxCharge*)e->target, e->index, &e->value);
   141ea:	f003 bbed 	b.w	179c8 <cosem_setCharge>
        ret = cosem_setTokenGateway((gxTokenGateway*)e->target, e->index, &e->value);
   141ee:	4620      	mov	r0, r4
   141f0:	461a      	mov	r2, r3
}
   141f2:	bc10      	pop	{r4}
        ret = cosem_setTokenGateway((gxTokenGateway*)e->target, e->index, &e->value);
   141f4:	f004 b90f 	b.w	18416 <cosem_setTokenGateway>
        ret = cosem_setGsmDiagnostic((gxGsmDiagnostic*)e->target, e->index, &e->value);
   141f8:	4620      	mov	r0, r4
   141fa:	461a      	mov	r2, r3
}
   141fc:	bc10      	pop	{r4}
        ret = cosem_setGsmDiagnostic((gxGsmDiagnostic*)e->target, e->index, &e->value);
   141fe:	f003 bfd3 	b.w	181a8 <cosem_setGsmDiagnostic>
        ret = cosem_setCompactData(settings, (gxCompactData*)e->target, e->index, &e->value);
   14202:	460a      	mov	r2, r1
   14204:	4621      	mov	r1, r4
}
   14206:	bc10      	pop	{r4}
        ret = cosem_setCompactData(settings, (gxCompactData*)e->target, e->index, &e->value);
   14208:	f004 baf4 	b.w	187f4 <cosem_setCompactData>
        ret = cosem_setParameterMonitor(settings, (gxParameterMonitor*)e->target, e->index, &e->value);
   1420c:	460a      	mov	r2, r1
   1420e:	4621      	mov	r1, r4
}
   14210:	bc10      	pop	{r4}
        ret = cosem_setParameterMonitor(settings, (gxParameterMonitor*)e->target, e->index, &e->value);
   14212:	f004 bb28 	b.w	18866 <cosem_setParameterMonitor>
        ret = cosem_setLlcSscsSetup(settings, (gxLlcSscsSetup*)e->target, e->index, &e->value);
   14216:	460a      	mov	r2, r1
   14218:	4621      	mov	r1, r4
}
   1421a:	bc10      	pop	{r4}
        ret = cosem_setLlcSscsSetup(settings, (gxLlcSscsSetup*)e->target, e->index, &e->value);
   1421c:	f004 bc24 	b.w	18a68 <cosem_setLlcSscsSetup>
        ret = cosem_setPrimeNbOfdmPlcPhysicalLayerCounters(settings, (gxPrimeNbOfdmPlcPhysicalLayerCounters*)e->target, e->index, &e->value);
   14220:	460a      	mov	r2, r1
   14222:	4621      	mov	r1, r4
}
   14224:	bc10      	pop	{r4}
        ret = cosem_setPrimeNbOfdmPlcPhysicalLayerCounters(settings, (gxPrimeNbOfdmPlcPhysicalLayerCounters*)e->target, e->index, &e->value);
   14226:	f004 bc32 	b.w	18a8e <cosem_setPrimeNbOfdmPlcPhysicalLayerCounters>
        ret = cosem_setPrimeNbOfdmPlcMacSetup(settings, (gxPrimeNbOfdmPlcMacSetup*)e->target, e->index, &e->value);
   1422a:	460a      	mov	r2, r1
   1422c:	4621      	mov	r1, r4
}
   1422e:	bc10      	pop	{r4}
        ret = cosem_setPrimeNbOfdmPlcMacSetup(settings, (gxPrimeNbOfdmPlcMacSetup*)e->target, e->index, &e->value);
   14230:	f004 bc4b 	b.w	18aca <cosem_setPrimeNbOfdmPlcMacSetup>
        ret = cosem_setPrimeNbOfdmPlcMacFunctionalParameters(settings, (gxPrimeNbOfdmPlcMacFunctionalParameters*)e->target, e->index, &e->value);
   14234:	460a      	mov	r2, r1
   14236:	4621      	mov	r1, r4
}
   14238:	bc10      	pop	{r4}
        ret = cosem_setPrimeNbOfdmPlcMacFunctionalParameters(settings, (gxPrimeNbOfdmPlcMacFunctionalParameters*)e->target, e->index, &e->value);
   1423a:	f004 bc72 	b.w	18b22 <cosem_setPrimeNbOfdmPlcMacFunctionalParameters>
        ret = cosem_setPrimeNbOfdmPlcMacCounters(settings, (gxPrimeNbOfdmPlcMacCounters*)e->target, e->index, &e->value);
   1423e:	460a      	mov	r2, r1
   14240:	4621      	mov	r1, r4
}
   14242:	bc10      	pop	{r4}
        ret = cosem_setPrimeNbOfdmPlcMacCounters(settings, (gxPrimeNbOfdmPlcMacCounters*)e->target, e->index, &e->value);
   14244:	f004 bcc6 	b.w	18bd4 <cosem_setPrimeNbOfdmPlcMacCounters>
        ret = cosem_setPrimeNbOfdmPlcMacNetworkAdministrationData(settings, (gxPrimeNbOfdmPlcMacNetworkAdministrationData*)e->target, e->index, &e->value);
   14248:	460a      	mov	r2, r1
   1424a:	4621      	mov	r1, r4
}
   1424c:	bc10      	pop	{r4}
        ret = cosem_setPrimeNbOfdmPlcMacNetworkAdministrationData(settings, (gxPrimeNbOfdmPlcMacNetworkAdministrationData*)e->target, e->index, &e->value);
   1424e:	f004 bed2 	b.w	18ff6 <cosem_setPrimeNbOfdmPlcMacNetworkAdministrationData>
        ret = cosem_setPrimeNbOfdmPlcApplicationsIdentification(settings, (gxPrimeNbOfdmPlcApplicationsIdentification*)e->target, e->index, &e->value);
   14252:	460a      	mov	r2, r1
   14254:	4621      	mov	r1, r4
}
   14256:	bc10      	pop	{r4}
        ret = cosem_setPrimeNbOfdmPlcApplicationsIdentification(settings, (gxPrimeNbOfdmPlcApplicationsIdentification*)e->target, e->index, &e->value);
   14258:	f004 bee4 	b.w	19024 <cosem_setPrimeNbOfdmPlcApplicationsIdentification>
        ret = cosem_setArbitrator(settings, (gxArbitrator*)e->target, e->index, &e->value);
   1425c:	460a      	mov	r2, r1
   1425e:	4621      	mov	r1, r4
}
   14260:	bc10      	pop	{r4}
        ret = cosem_setArbitrator(settings, (gxArbitrator*)e->target, e->index, &e->value);
   14262:	f004 bf05 	b.w	19070 <cosem_setArbitrator>
        ret = cosem_setIec8802LlcType1Setup(settings, (gxIec8802LlcType1Setup*)e->target, e->index, &e->value);
   14266:	460a      	mov	r2, r1
   14268:	4621      	mov	r1, r4
}
   1426a:	bc10      	pop	{r4}
        ret = cosem_setIec8802LlcType1Setup(settings, (gxIec8802LlcType1Setup*)e->target, e->index, &e->value);
   1426c:	f004 bfea 	b.w	19244 <cosem_setIec8802LlcType1Setup>
        ret = cosem_setIec8802LlcType2Setup(settings, (gxIec8802LlcType2Setup*)e->target, e->index, &e->value);
   14270:	460a      	mov	r2, r1
   14272:	4621      	mov	r1, r4
}
   14274:	bc10      	pop	{r4}
        ret = cosem_setIec8802LlcType2Setup(settings, (gxIec8802LlcType2Setup*)e->target, e->index, &e->value);
   14276:	f004 bff2 	b.w	1925e <cosem_setIec8802LlcType2Setup>
        ret = cosem_setIec8802LlcType3Setup(settings, (gxIec8802LlcType3Setup*)e->target, e->index, &e->value);
   1427a:	460a      	mov	r2, r1
   1427c:	4621      	mov	r1, r4
}
   1427e:	bc10      	pop	{r4}
        ret = cosem_setIec8802LlcType3Setup(settings, (gxIec8802LlcType3Setup*)e->target, e->index, &e->value);
   14280:	f005 b81d 	b.w	192be <cosem_setIec8802LlcType3Setup>
        ret = cosem_setSFSKActiveInitiator(settings, (gxSFSKActiveInitiator*)e->target, e->index, &e->value);
   14284:	460a      	mov	r2, r1
   14286:	4621      	mov	r1, r4
}
   14288:	bc10      	pop	{r4}
        ret = cosem_setSFSKActiveInitiator(settings, (gxSFSKActiveInitiator*)e->target, e->index, &e->value);
   1428a:	f005 b83b 	b.w	19304 <cosem_setSFSKActiveInitiator>
        ret = cosem_setFSKMacCounters(settings, (gxFSKMacCounters*)e->target, e->index, &e->value);
   1428e:	460a      	mov	r2, r1
   14290:	4621      	mov	r1, r4
}
   14292:	bc10      	pop	{r4}
        ret = cosem_setFSKMacCounters(settings, (gxFSKMacCounters*)e->target, e->index, &e->value);
   14294:	f005 b87c 	b.w	19390 <cosem_setFSKMacCounters>
        ret = cosem_setSFSKMacSynchronizationTimeouts(settings, (gxSFSKMacSynchronizationTimeouts*)e->target, e->index, &e->value);
   14298:	460a      	mov	r2, r1
   1429a:	4621      	mov	r1, r4
}
   1429c:	bc10      	pop	{r4}
        ret = cosem_setSFSKMacSynchronizationTimeouts(settings, (gxSFSKMacSynchronizationTimeouts*)e->target, e->index, &e->value);
   1429e:	f005 b963 	b.w	19568 <cosem_setSFSKMacSynchronizationTimeouts>
        ret = cosem_setSFSKPhyMacSetUp(settings, (gxSFSKPhyMacSetUp*)e->target, e->index, &e->value);
   142a2:	460a      	mov	r2, r1
   142a4:	4621      	mov	r1, r4
}
   142a6:	bc10      	pop	{r4}
        ret = cosem_setSFSKPhyMacSetUp(settings, (gxSFSKPhyMacSetUp*)e->target, e->index, &e->value);
   142a8:	f005 b97c 	b.w	195a4 <cosem_setSFSKPhyMacSetUp>
        ret = cosem_setSFSKReportingSystemList(settings, (gxSFSKReportingSystemList*)e->target, e->index, &e->value);
   142ac:	460a      	mov	r2, r1
   142ae:	4621      	mov	r1, r4
}
   142b0:	bc10      	pop	{r4}
        ret = cosem_setSFSKReportingSystemList(settings, (gxSFSKReportingSystemList*)e->target, e->index, &e->value);
   142b2:	f005 ba0c 	b.w	196ce <cosem_setSFSKReportingSystemList>
            ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   142b6:	f44f 7081 	mov.w	r0, #258	; 0x102
}
   142ba:	bc10      	pop	{r4}
   142bc:	4770      	bx	lr
    int ret = DLMS_ERROR_CODE_OK;
   142be:	2000      	movs	r0, #0
   142c0:	e7fb      	b.n	142ba <cosem_setValue+0x376>

000142c2 <cosem_setData>:
    if (e->index == 2)
   142c2:	7e03      	ldrb	r3, [r0, #24]
   142c4:	2b02      	cmp	r3, #2
{
   142c6:	4601      	mov	r1, r0
    if (e->index == 2)
   142c8:	d103      	bne.n	142d2 <cosem_setData+0x10>
        ret = var_copy(&((gxData*)e->target)->value, &e->value);
   142ca:	6940      	ldr	r0, [r0, #20]
   142cc:	3010      	adds	r0, #16
   142ce:	f7f0 b815 	b.w	42fc <var_copy>
}
   142d2:	f44f 7081 	mov.w	r0, #258	; 0x102
   142d6:	4770      	bx	lr

000142d8 <cosem_setRegister>:
    if (index == 2)
   142d8:	2902      	cmp	r1, #2
{
   142da:	b573      	push	{r0, r1, r4, r5, r6, lr}
   142dc:	4605      	mov	r5, r0
   142de:	4616      	mov	r6, r2
    if (index == 2)
   142e0:	d107      	bne.n	142f2 <cosem_setRegister+0x1a>
        ret = var_copy(&object->value, value);
   142e2:	4611      	mov	r1, r2
   142e4:	3010      	adds	r0, #16
   142e6:	f7f0 f809 	bl	42fc <var_copy>
   142ea:	4604      	mov	r4, r0
}
   142ec:	4620      	mov	r0, r4
   142ee:	b002      	add	sp, #8
   142f0:	bd70      	pop	{r4, r5, r6, pc}
    else if (index == 3)
   142f2:	2903      	cmp	r1, #3
   142f4:	d120      	bne.n	14338 <cosem_setRegister+0x60>
        if (value->vt != DLMS_DATA_TYPE_STRUCTURE)
   142f6:	7813      	ldrb	r3, [r2, #0]
   142f8:	2b02      	cmp	r3, #2
   142fa:	d11d      	bne.n	14338 <cosem_setRegister+0x60>
        ret = va_getByIndex(value->Arr, 0, &tmp);
   142fc:	68b0      	ldr	r0, [r6, #8]
   142fe:	aa01      	add	r2, sp, #4
   14300:	2100      	movs	r1, #0
   14302:	f005 ffce 	bl	1a2a2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   14306:	4604      	mov	r4, r0
   14308:	2800      	cmp	r0, #0
   1430a:	d1ef      	bne.n	142ec <cosem_setRegister+0x14>
        object->scaler = (char)var_toInteger(tmp);
   1430c:	9801      	ldr	r0, [sp, #4]
   1430e:	f006 f942 	bl	1a596 <var_toInteger>
   14312:	f885 0020 	strb.w	r0, [r5, #32]
        ret = va_getByIndex(value->Arr, 1, &tmp);
   14316:	68b0      	ldr	r0, [r6, #8]
   14318:	aa01      	add	r2, sp, #4
   1431a:	2101      	movs	r1, #1
   1431c:	f005 ffc1 	bl	1a2a2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   14320:	4604      	mov	r4, r0
   14322:	2800      	cmp	r0, #0
   14324:	d1e2      	bne.n	142ec <cosem_setRegister+0x14>
        object->unit = (unsigned char)var_toInteger(tmp);
   14326:	9801      	ldr	r0, [sp, #4]
   14328:	f006 f935 	bl	1a596 <var_toInteger>
        object->unitRead = 1;
   1432c:	2301      	movs	r3, #1
        object->unit = (unsigned char)var_toInteger(tmp);
   1432e:	f885 0021 	strb.w	r0, [r5, #33]	; 0x21
        object->unitRead = 1;
   14332:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   14336:	e7d9      	b.n	142ec <cosem_setRegister+0x14>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   14338:	f44f 7481 	mov.w	r4, #258	; 0x102
   1433c:	e7d6      	b.n	142ec <cosem_setRegister+0x14>

0001433e <cosem_setRegistertable>:
    if (index == 2)
   1433e:	2902      	cmp	r1, #2
{
   14340:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   14344:	4605      	mov	r5, r0
   14346:	4616      	mov	r6, r2
    if (index == 2)
   14348:	d127      	bne.n	1439a <cosem_setRegistertable+0x5c>
        if (value->Arr != NULL)
   1434a:	6893      	ldr	r3, [r2, #8]
   1434c:	bb13      	cbnz	r3, 14394 <cosem_setRegistertable+0x56>
    int pos, ret = 0;
   1434e:	2400      	movs	r4, #0
}
   14350:	4620      	mov	r0, r4
   14352:	b002      	add	sp, #8
   14354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                ret = va_getByIndex(value->Arr, pos, &tmp);
   14358:	aa01      	add	r2, sp, #4
   1435a:	4639      	mov	r1, r7
   1435c:	f005 ffa1 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   14360:	4604      	mov	r4, r0
   14362:	2800      	cmp	r0, #0
   14364:	d1f4      	bne.n	14350 <cosem_setRegistertable+0x12>
                tmp2 = (dlmsVARIANT*)gxmalloc(sizeof(dlmsVARIANT));
   14366:	2010      	movs	r0, #16
   14368:	f7f7 fc24 	bl	bbb4 <malloc>
   1436c:	4680      	mov	r8, r0
                var_init(tmp2);
   1436e:	f005 fdbe 	bl	19eee <var_init>
                ret = var_copy(tmp2, tmp);
   14372:	9901      	ldr	r1, [sp, #4]
   14374:	4640      	mov	r0, r8
   14376:	f7ef ffc1 	bl	42fc <var_copy>
                if (ret != 0)
   1437a:	4604      	mov	r4, r0
   1437c:	2800      	cmp	r0, #0
   1437e:	d1e7      	bne.n	14350 <cosem_setRegistertable+0x12>
                va_push(&object->tableCellValues, tmp2);
   14380:	4641      	mov	r1, r8
   14382:	4628      	mov	r0, r5
   14384:	f005 fec1 	bl	1a10a <va_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   14388:	3701      	adds	r7, #1
   1438a:	68b0      	ldr	r0, [r6, #8]
   1438c:	88c3      	ldrh	r3, [r0, #6]
   1438e:	42bb      	cmp	r3, r7
   14390:	d1e2      	bne.n	14358 <cosem_setRegistertable+0x1a>
   14392:	e7dc      	b.n	1434e <cosem_setRegistertable+0x10>
   14394:	2700      	movs	r7, #0
                va_push(&object->tableCellValues, tmp2);
   14396:	3510      	adds	r5, #16
   14398:	e7f7      	b.n	1438a <cosem_setRegistertable+0x4c>
    else if (index == 4)
   1439a:	2904      	cmp	r1, #4
   1439c:	d120      	bne.n	143e0 <cosem_setRegistertable+0xa2>
        if (value->vt != DLMS_DATA_TYPE_STRUCTURE)
   1439e:	7813      	ldrb	r3, [r2, #0]
   143a0:	2b02      	cmp	r3, #2
   143a2:	d11d      	bne.n	143e0 <cosem_setRegistertable+0xa2>
        ret = va_getByIndex(value->Arr, 0, &tmp);
   143a4:	68b0      	ldr	r0, [r6, #8]
   143a6:	aa01      	add	r2, sp, #4
   143a8:	2100      	movs	r1, #0
   143aa:	f005 ff7a 	bl	1a2a2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   143ae:	4604      	mov	r4, r0
   143b0:	2800      	cmp	r0, #0
   143b2:	d1cd      	bne.n	14350 <cosem_setRegistertable+0x12>
        object->scaler = (char)var_toInteger(tmp);
   143b4:	9801      	ldr	r0, [sp, #4]
   143b6:	f006 f8ee 	bl	1a596 <var_toInteger>
   143ba:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
        ret = va_getByIndex(value->Arr, 1, &tmp);
   143be:	68b0      	ldr	r0, [r6, #8]
   143c0:	aa01      	add	r2, sp, #4
   143c2:	2101      	movs	r1, #1
   143c4:	f005 ff6d 	bl	1a2a2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   143c8:	4604      	mov	r4, r0
   143ca:	2800      	cmp	r0, #0
   143cc:	d1c0      	bne.n	14350 <cosem_setRegistertable+0x12>
        object->unit = (unsigned char)var_toInteger(tmp);
   143ce:	9801      	ldr	r0, [sp, #4]
   143d0:	f006 f8e1 	bl	1a596 <var_toInteger>
        object->unitRead = 1;
   143d4:	2301      	movs	r3, #1
        object->unit = (unsigned char)var_toInteger(tmp);
   143d6:	f885 0025 	strb.w	r0, [r5, #37]	; 0x25
        object->unitRead = 1;
   143da:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26
   143de:	e7b7      	b.n	14350 <cosem_setRegistertable+0x12>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   143e0:	f44f 7481 	mov.w	r4, #258	; 0x102
   143e4:	e7b4      	b.n	14350 <cosem_setRegistertable+0x12>

000143e6 <cosem_setClock>:
{
   143e6:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (index == 2)
   143e8:	2a02      	cmp	r2, #2
{
   143ea:	b085      	sub	sp, #20
   143ec:	4606      	mov	r6, r0
   143ee:	460d      	mov	r5, r1
   143f0:	461c      	mov	r4, r3
    if (index == 2)
   143f2:	d129      	bne.n	14448 <cosem_setClock+0x62>
        if (value->vt == DLMS_DATA_TYPE_OCTET_STRING && value->byteArr != NULL)
   143f4:	781b      	ldrb	r3, [r3, #0]
   143f6:	2b09      	cmp	r3, #9
   143f8:	d121      	bne.n	1443e <cosem_setClock+0x58>
   143fa:	68a3      	ldr	r3, [r4, #8]
   143fc:	b1fb      	cbz	r3, 1443e <cosem_setClock+0x58>
            var_init(&tmp);
   143fe:	4668      	mov	r0, sp
   14400:	f005 fd75 	bl	19eee <var_init>
            ret = dlms_changeType2(value, DLMS_DATA_TYPE_DATETIME, &tmp);
   14404:	4620      	mov	r0, r4
   14406:	466a      	mov	r2, sp
   14408:	2119      	movs	r1, #25
   1440a:	f7fb fc9c 	bl	fd46 <dlms_changeType2>
            if (ret != 0)
   1440e:	4604      	mov	r4, r0
   14410:	b990      	cbnz	r0, 14438 <cosem_setClock+0x52>
            time_copy(&object->time, tmp.dateTime);
   14412:	f105 0734 	add.w	r7, r5, #52	; 0x34
   14416:	9902      	ldr	r1, [sp, #8]
   14418:	4638      	mov	r0, r7
   1441a:	f7f9 fce1 	bl	dde0 <time_copy>
            if (settings->server)
   1441e:	f896 3058 	ldrb.w	r3, [r6, #88]	; 0x58
   14422:	b133      	cbz	r3, 14432 <cosem_setClock+0x4c>
                time_toUTC(&object->time);
   14424:	4638      	mov	r0, r7
   14426:	f7f9 fd23 	bl	de70 <time_toUTC>
                clock_updateDST(object, &object->time);
   1442a:	4639      	mov	r1, r7
   1442c:	4628      	mov	r0, r5
   1442e:	f7ff fd6a 	bl	13f06 <clock_updateDST>
            var_clear(&tmp);
   14432:	4668      	mov	r0, sp
   14434:	f005 feb7 	bl	1a1a6 <var_clear>
}
   14438:	4620      	mov	r0, r4
   1443a:	b005      	add	sp, #20
   1443c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            time_clear(&object->time);
   1443e:	f105 0034 	add.w	r0, r5, #52	; 0x34
            time_clear(&object->end);
   14442:	f7f9 fc9c 	bl	dd7e <time_clear>
   14446:	e005      	b.n	14454 <cosem_setClock+0x6e>
    else if (index == 3)
   14448:	2a03      	cmp	r2, #3
   1444a:	d105      	bne.n	14458 <cosem_setClock+0x72>
        object->timeZone = (short)var_toInteger(value);
   1444c:	4618      	mov	r0, r3
   1444e:	f006 f8a2 	bl	1a596 <var_toInteger>
   14452:	8628      	strh	r0, [r5, #48]	; 0x30
    int ret = DLMS_ERROR_CODE_OK;
   14454:	2400      	movs	r4, #0
   14456:	e7ef      	b.n	14438 <cosem_setClock+0x52>
    else if (index == 4)
   14458:	2a04      	cmp	r2, #4
   1445a:	d105      	bne.n	14468 <cosem_setClock+0x82>
        object->status = (DLMS_CLOCK_STATUS)var_toInteger(value);
   1445c:	4618      	mov	r0, r3
   1445e:	f006 f89a 	bl	1a596 <var_toInteger>
   14462:	f885 0020 	strb.w	r0, [r5, #32]
   14466:	e7f5      	b.n	14454 <cosem_setClock+0x6e>
    else if (index == 5)
   14468:	2a05      	cmp	r2, #5
   1446a:	d118      	bne.n	1449e <cosem_setClock+0xb8>
        if (value->vt == DLMS_DATA_TYPE_OCTET_STRING && value->byteArr != NULL)
   1446c:	781b      	ldrb	r3, [r3, #0]
   1446e:	2b09      	cmp	r3, #9
   14470:	d112      	bne.n	14498 <cosem_setClock+0xb2>
   14472:	68a3      	ldr	r3, [r4, #8]
   14474:	b183      	cbz	r3, 14498 <cosem_setClock+0xb2>
            var_init(&tmp);
   14476:	4668      	mov	r0, sp
   14478:	f005 fd39 	bl	19eee <var_init>
            ret = dlms_changeType2(value, DLMS_DATA_TYPE_DATETIME, &tmp);
   1447c:	4620      	mov	r0, r4
   1447e:	466a      	mov	r2, sp
   14480:	2119      	movs	r1, #25
   14482:	f7fb fc60 	bl	fd46 <dlms_changeType2>
            if (ret != 0)
   14486:	4604      	mov	r4, r0
   14488:	2800      	cmp	r0, #0
   1448a:	d1d5      	bne.n	14438 <cosem_setClock+0x52>
            time_copy(&object->begin, tmp.dateTime);
   1448c:	9902      	ldr	r1, [sp, #8]
   1448e:	f105 0024 	add.w	r0, r5, #36	; 0x24
   14492:	f7f9 fca5 	bl	dde0 <time_copy>
   14496:	e7cc      	b.n	14432 <cosem_setClock+0x4c>
            time_clear(&object->begin);
   14498:	f105 0024 	add.w	r0, r5, #36	; 0x24
   1449c:	e7d1      	b.n	14442 <cosem_setClock+0x5c>
    else if (index == 6)
   1449e:	2a06      	cmp	r2, #6
   144a0:	d116      	bne.n	144d0 <cosem_setClock+0xea>
        if (value->vt == DLMS_DATA_TYPE_OCTET_STRING && value->byteArr != NULL)
   144a2:	781b      	ldrb	r3, [r3, #0]
   144a4:	2b09      	cmp	r3, #9
   144a6:	d110      	bne.n	144ca <cosem_setClock+0xe4>
   144a8:	68a3      	ldr	r3, [r4, #8]
   144aa:	b173      	cbz	r3, 144ca <cosem_setClock+0xe4>
            var_init(&tmp);
   144ac:	4668      	mov	r0, sp
   144ae:	f005 fd1e 	bl	19eee <var_init>
            ret = dlms_changeType2(value, DLMS_DATA_TYPE_DATETIME, &tmp);
   144b2:	4620      	mov	r0, r4
   144b4:	466a      	mov	r2, sp
   144b6:	2119      	movs	r1, #25
   144b8:	f7fb fc45 	bl	fd46 <dlms_changeType2>
            if (ret != 0)
   144bc:	4604      	mov	r4, r0
   144be:	2800      	cmp	r0, #0
   144c0:	d1ba      	bne.n	14438 <cosem_setClock+0x52>
            time_copy(&object->end, tmp.dateTime);
   144c2:	9902      	ldr	r1, [sp, #8]
   144c4:	f105 0014 	add.w	r0, r5, #20
   144c8:	e7e3      	b.n	14492 <cosem_setClock+0xac>
            time_clear(&object->end);
   144ca:	f105 0014 	add.w	r0, r5, #20
   144ce:	e7b8      	b.n	14442 <cosem_setClock+0x5c>
    else if (index == 7)
   144d0:	2a07      	cmp	r2, #7
   144d2:	d10d      	bne.n	144f0 <cosem_setClock+0x10a>
        object->deviation = (char)var_toInteger(value);
   144d4:	4618      	mov	r0, r3
   144d6:	f006 f85e 	bl	1a596 <var_toInteger>
   144da:	7468      	strb	r0, [r5, #17]
        if (settings->server)
   144dc:	f896 3058 	ldrb.w	r3, [r6, #88]	; 0x58
   144e0:	2b00      	cmp	r3, #0
   144e2:	d0b7      	beq.n	14454 <cosem_setClock+0x6e>
            clock_updateDST(object, &object->time);
   144e4:	f105 0134 	add.w	r1, r5, #52	; 0x34
   144e8:	4628      	mov	r0, r5
   144ea:	f7ff fd0c 	bl	13f06 <clock_updateDST>
   144ee:	e7b1      	b.n	14454 <cosem_setClock+0x6e>
    else if (index == 8)
   144f0:	2a08      	cmp	r2, #8
   144f2:	d104      	bne.n	144fe <cosem_setClock+0x118>
        object->enabled = (unsigned char)var_toInteger(value);
   144f4:	4618      	mov	r0, r3
   144f6:	f006 f84e 	bl	1a596 <var_toInteger>
   144fa:	74a8      	strb	r0, [r5, #18]
        if (settings->server)
   144fc:	e7ee      	b.n	144dc <cosem_setClock+0xf6>
    else if (index == 9)
   144fe:	2a09      	cmp	r2, #9
   14500:	d104      	bne.n	1450c <cosem_setClock+0x126>
        object->clockBase = (DLMS_CLOCK_BASE)var_toInteger(value);
   14502:	4618      	mov	r0, r3
   14504:	f006 f847 	bl	1a596 <var_toInteger>
   14508:	7428      	strb	r0, [r5, #16]
   1450a:	e7a3      	b.n	14454 <cosem_setClock+0x6e>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   1450c:	f44f 7481 	mov.w	r4, #258	; 0x102
   14510:	e792      	b.n	14438 <cosem_setClock+0x52>

00014512 <updateSeasonProfile>:
{
   14512:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14516:	b086      	sub	sp, #24
   14518:	460f      	mov	r7, r1
   1451a:	4680      	mov	r8, r0
    obj_clearSeasonProfile(profile);
   1451c:	f7ff fa92 	bl	13a44 <obj_clearSeasonProfile>
    var_init(&tm);
   14520:	a802      	add	r0, sp, #8
   14522:	f005 fce4 	bl	19eee <var_init>
    for (pos = 0; pos != data->Arr->size; ++pos)
   14526:	2600      	movs	r6, #0
   14528:	68bb      	ldr	r3, [r7, #8]
   1452a:	88db      	ldrh	r3, [r3, #6]
   1452c:	42b3      	cmp	r3, r6
   1452e:	d104      	bne.n	1453a <updateSeasonProfile+0x28>
   14530:	2400      	movs	r4, #0
}
   14532:	4620      	mov	r0, r4
   14534:	b006      	add	sp, #24
   14536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        sp = (gxSeasonProfile*)gxmalloc(sizeof(gxSeasonProfile));
   1453a:	2024      	movs	r0, #36	; 0x24
   1453c:	f7f7 fb3a 	bl	bbb4 <malloc>
        if (sp == NULL)
   14540:	4605      	mov	r5, r0
   14542:	2800      	cmp	r0, #0
   14544:	d055      	beq.n	145f2 <updateSeasonProfile+0xe0>
        ret = va_getByIndex(data->Arr, pos, &it);
   14546:	68b8      	ldr	r0, [r7, #8]
   14548:	aa01      	add	r2, sp, #4
   1454a:	4631      	mov	r1, r6
   1454c:	f005 fea9 	bl	1a2a2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   14550:	4604      	mov	r4, r0
   14552:	2800      	cmp	r0, #0
   14554:	d150      	bne.n	145f8 <updateSeasonProfile+0xe6>
        ret = va_getByIndex(it->Arr, 0, &tmp);
   14556:	9b01      	ldr	r3, [sp, #4]
   14558:	4601      	mov	r1, r0
   1455a:	466a      	mov	r2, sp
   1455c:	6898      	ldr	r0, [r3, #8]
   1455e:	f005 fea0 	bl	1a2a2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   14562:	4604      	mov	r4, r0
   14564:	2800      	cmp	r0, #0
   14566:	d147      	bne.n	145f8 <updateSeasonProfile+0xe6>
        BYTE_BUFFER_INIT(&sp->name);
   14568:	4628      	mov	r0, r5
   1456a:	f7f8 fb3b 	bl	cbe4 <bb_init>
        bb_set2(&sp->name, tmp->byteArr, 0, bb_size(tmp->byteArr));
   1456e:	9b00      	ldr	r3, [sp, #0]
   14570:	f8d3 9008 	ldr.w	r9, [r3, #8]
   14574:	4648      	mov	r0, r9
   14576:	f7f8 fb32 	bl	cbde <bb_size>
   1457a:	4622      	mov	r2, r4
   1457c:	4603      	mov	r3, r0
   1457e:	4649      	mov	r1, r9
   14580:	4628      	mov	r0, r5
   14582:	f7f8 fcad 	bl	cee0 <bb_set2>
        ret = va_getByIndex(it->Arr, 1, &tmp);
   14586:	9b01      	ldr	r3, [sp, #4]
   14588:	466a      	mov	r2, sp
   1458a:	6898      	ldr	r0, [r3, #8]
   1458c:	2101      	movs	r1, #1
   1458e:	f005 fe88 	bl	1a2a2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   14592:	4604      	mov	r4, r0
   14594:	bb80      	cbnz	r0, 145f8 <updateSeasonProfile+0xe6>
        ret = dlms_changeType2(tmp, DLMS_DATA_TYPE_DATETIME, &tm);
   14596:	9800      	ldr	r0, [sp, #0]
   14598:	aa02      	add	r2, sp, #8
   1459a:	2119      	movs	r1, #25
   1459c:	f7fb fbd3 	bl	fd46 <dlms_changeType2>
        if (ret != DLMS_ERROR_CODE_OK)
   145a0:	4604      	mov	r4, r0
   145a2:	bb48      	cbnz	r0, 145f8 <updateSeasonProfile+0xe6>
        time_copy(&sp->start, tm.dateTime);
   145a4:	9904      	ldr	r1, [sp, #16]
   145a6:	f105 000c 	add.w	r0, r5, #12
   145aa:	f7f9 fc19 	bl	dde0 <time_copy>
        var_clear(&tm);
   145ae:	a802      	add	r0, sp, #8
   145b0:	f005 fdf9 	bl	1a1a6 <var_clear>
        ret = va_getByIndex(it->Arr, 2, &tmp);
   145b4:	9b01      	ldr	r3, [sp, #4]
   145b6:	466a      	mov	r2, sp
   145b8:	6898      	ldr	r0, [r3, #8]
   145ba:	2102      	movs	r1, #2
   145bc:	f005 fe71 	bl	1a2a2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   145c0:	4604      	mov	r4, r0
   145c2:	b9c8      	cbnz	r0, 145f8 <updateSeasonProfile+0xe6>
        BYTE_BUFFER_INIT(&sp->weekName);
   145c4:	f105 0918 	add.w	r9, r5, #24
   145c8:	4648      	mov	r0, r9
   145ca:	f7f8 fb0b 	bl	cbe4 <bb_init>
        bb_set2(&sp->weekName, tmp->byteArr, 0, bb_size(tmp->byteArr));
   145ce:	9b00      	ldr	r3, [sp, #0]
   145d0:	f8d3 a008 	ldr.w	sl, [r3, #8]
   145d4:	4650      	mov	r0, sl
   145d6:	f7f8 fb02 	bl	cbde <bb_size>
   145da:	4622      	mov	r2, r4
   145dc:	4603      	mov	r3, r0
   145de:	4651      	mov	r1, sl
   145e0:	4648      	mov	r0, r9
   145e2:	f7f8 fc7d 	bl	cee0 <bb_set2>
        arr_push(profile, sp);
   145e6:	4629      	mov	r1, r5
   145e8:	4640      	mov	r0, r8
   145ea:	f7fb fe8f 	bl	1030c <arr_push>
    for (pos = 0; pos != data->Arr->size; ++pos)
   145ee:	3601      	adds	r6, #1
   145f0:	e79a      	b.n	14528 <updateSeasonProfile+0x16>
            return DLMS_ERROR_CODE_OUTOFMEMORY;
   145f2:	f44f 7482 	mov.w	r4, #260	; 0x104
   145f6:	e79c      	b.n	14532 <updateSeasonProfile+0x20>
        gxfree(sp);
   145f8:	4628      	mov	r0, r5
   145fa:	f7f7 fae3 	bl	bbc4 <free>
   145fe:	e798      	b.n	14532 <updateSeasonProfile+0x20>

00014600 <updateWeekProfileTable>:
{
   14600:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   14604:	4680      	mov	r8, r0
   14606:	460f      	mov	r7, r1
    obj_clearWeekProfileTable(profile);
   14608:	f7ff fa3a 	bl	13a80 <obj_clearWeekProfileTable>
    for (pos = 0; pos != data->Arr->size; ++pos)
   1460c:	2600      	movs	r6, #0
   1460e:	68bb      	ldr	r3, [r7, #8]
   14610:	88db      	ldrh	r3, [r3, #6]
   14612:	42b3      	cmp	r3, r6
   14614:	d104      	bne.n	14620 <updateWeekProfileTable+0x20>
   14616:	2400      	movs	r4, #0
}
   14618:	4620      	mov	r0, r4
   1461a:	b003      	add	sp, #12
   1461c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        wp = (gxWeekProfile*)gxmalloc(sizeof(gxWeekProfile));
   14620:	2014      	movs	r0, #20
   14622:	f7f7 fac7 	bl	bbb4 <malloc>
        if (wp == NULL)
   14626:	4605      	mov	r5, r0
   14628:	2800      	cmp	r0, #0
   1462a:	d07c      	beq.n	14726 <updateWeekProfileTable+0x126>
        ret = va_getByIndex(data->Arr, pos, &it);
   1462c:	68b8      	ldr	r0, [r7, #8]
   1462e:	aa01      	add	r2, sp, #4
   14630:	4631      	mov	r1, r6
   14632:	f005 fe36 	bl	1a2a2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   14636:	4604      	mov	r4, r0
   14638:	2800      	cmp	r0, #0
   1463a:	d177      	bne.n	1472c <updateWeekProfileTable+0x12c>
        ret = va_getByIndex(it->Arr, 0, &tmp);
   1463c:	9b01      	ldr	r3, [sp, #4]
   1463e:	4601      	mov	r1, r0
   14640:	466a      	mov	r2, sp
   14642:	6898      	ldr	r0, [r3, #8]
   14644:	f005 fe2d 	bl	1a2a2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   14648:	4604      	mov	r4, r0
   1464a:	2800      	cmp	r0, #0
   1464c:	d16e      	bne.n	1472c <updateWeekProfileTable+0x12c>
        BYTE_BUFFER_INIT(&wp->name);
   1464e:	4628      	mov	r0, r5
   14650:	f7f8 fac8 	bl	cbe4 <bb_init>
        bb_set2(&wp->name, tmp->byteArr, 0, bb_size(tmp->byteArr));
   14654:	9b00      	ldr	r3, [sp, #0]
   14656:	f8d3 9008 	ldr.w	r9, [r3, #8]
   1465a:	4648      	mov	r0, r9
   1465c:	f7f8 fabf 	bl	cbde <bb_size>
   14660:	4622      	mov	r2, r4
   14662:	4603      	mov	r3, r0
   14664:	4649      	mov	r1, r9
   14666:	4628      	mov	r0, r5
   14668:	f7f8 fc3a 	bl	cee0 <bb_set2>
        ret = va_getByIndex(it->Arr, 1, &tmp);
   1466c:	9b01      	ldr	r3, [sp, #4]
   1466e:	466a      	mov	r2, sp
   14670:	6898      	ldr	r0, [r3, #8]
   14672:	2101      	movs	r1, #1
   14674:	f005 fe15 	bl	1a2a2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   14678:	4604      	mov	r4, r0
   1467a:	2800      	cmp	r0, #0
   1467c:	d156      	bne.n	1472c <updateWeekProfileTable+0x12c>
        wp->monday = (unsigned char)var_toInteger(tmp);
   1467e:	9800      	ldr	r0, [sp, #0]
   14680:	f005 ff89 	bl	1a596 <var_toInteger>
        ret = va_getByIndex(it->Arr, 2, &tmp);
   14684:	9b01      	ldr	r3, [sp, #4]
        wp->monday = (unsigned char)var_toInteger(tmp);
   14686:	7328      	strb	r0, [r5, #12]
        ret = va_getByIndex(it->Arr, 2, &tmp);
   14688:	6898      	ldr	r0, [r3, #8]
   1468a:	466a      	mov	r2, sp
   1468c:	2102      	movs	r1, #2
   1468e:	f005 fe08 	bl	1a2a2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   14692:	4604      	mov	r4, r0
   14694:	2800      	cmp	r0, #0
   14696:	d149      	bne.n	1472c <updateWeekProfileTable+0x12c>
        wp->tuesday = (unsigned char)var_toInteger(tmp);
   14698:	9800      	ldr	r0, [sp, #0]
   1469a:	f005 ff7c 	bl	1a596 <var_toInteger>
        ret = va_getByIndex(it->Arr, 3, &tmp);
   1469e:	9b01      	ldr	r3, [sp, #4]
        wp->tuesday = (unsigned char)var_toInteger(tmp);
   146a0:	7368      	strb	r0, [r5, #13]
        ret = va_getByIndex(it->Arr, 3, &tmp);
   146a2:	6898      	ldr	r0, [r3, #8]
   146a4:	466a      	mov	r2, sp
   146a6:	2103      	movs	r1, #3
   146a8:	f005 fdfb 	bl	1a2a2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   146ac:	4604      	mov	r4, r0
   146ae:	2800      	cmp	r0, #0
   146b0:	d13c      	bne.n	1472c <updateWeekProfileTable+0x12c>
        wp->wednesday = (unsigned char)var_toInteger(tmp);
   146b2:	9800      	ldr	r0, [sp, #0]
   146b4:	f005 ff6f 	bl	1a596 <var_toInteger>
        ret = va_getByIndex(it->Arr, 4, &tmp);
   146b8:	9b01      	ldr	r3, [sp, #4]
        wp->wednesday = (unsigned char)var_toInteger(tmp);
   146ba:	73a8      	strb	r0, [r5, #14]
        ret = va_getByIndex(it->Arr, 4, &tmp);
   146bc:	6898      	ldr	r0, [r3, #8]
   146be:	466a      	mov	r2, sp
   146c0:	2104      	movs	r1, #4
   146c2:	f005 fdee 	bl	1a2a2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   146c6:	4604      	mov	r4, r0
   146c8:	bb80      	cbnz	r0, 1472c <updateWeekProfileTable+0x12c>
        wp->thursday = (unsigned char)var_toInteger(tmp);
   146ca:	9800      	ldr	r0, [sp, #0]
   146cc:	f005 ff63 	bl	1a596 <var_toInteger>
        ret = va_getByIndex(it->Arr, 5, &tmp);
   146d0:	9b01      	ldr	r3, [sp, #4]
        wp->thursday = (unsigned char)var_toInteger(tmp);
   146d2:	73e8      	strb	r0, [r5, #15]
        ret = va_getByIndex(it->Arr, 5, &tmp);
   146d4:	6898      	ldr	r0, [r3, #8]
   146d6:	466a      	mov	r2, sp
   146d8:	2105      	movs	r1, #5
   146da:	f005 fde2 	bl	1a2a2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   146de:	4604      	mov	r4, r0
   146e0:	bb20      	cbnz	r0, 1472c <updateWeekProfileTable+0x12c>
        wp->friday = (unsigned char)var_toInteger(tmp);
   146e2:	9800      	ldr	r0, [sp, #0]
   146e4:	f005 ff57 	bl	1a596 <var_toInteger>
        ret = va_getByIndex(it->Arr, 6, &tmp);
   146e8:	9b01      	ldr	r3, [sp, #4]
        wp->friday = (unsigned char)var_toInteger(tmp);
   146ea:	7428      	strb	r0, [r5, #16]
        ret = va_getByIndex(it->Arr, 6, &tmp);
   146ec:	6898      	ldr	r0, [r3, #8]
   146ee:	466a      	mov	r2, sp
   146f0:	2106      	movs	r1, #6
   146f2:	f005 fdd6 	bl	1a2a2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   146f6:	4604      	mov	r4, r0
   146f8:	b9c0      	cbnz	r0, 1472c <updateWeekProfileTable+0x12c>
        wp->saturday = (unsigned char)var_toInteger(tmp);
   146fa:	9800      	ldr	r0, [sp, #0]
   146fc:	f005 ff4b 	bl	1a596 <var_toInteger>
        ret = va_getByIndex(it->Arr, 7, &tmp);
   14700:	9b01      	ldr	r3, [sp, #4]
        wp->saturday = (unsigned char)var_toInteger(tmp);
   14702:	7468      	strb	r0, [r5, #17]
        ret = va_getByIndex(it->Arr, 7, &tmp);
   14704:	6898      	ldr	r0, [r3, #8]
   14706:	466a      	mov	r2, sp
   14708:	2107      	movs	r1, #7
   1470a:	f005 fdca 	bl	1a2a2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   1470e:	4604      	mov	r4, r0
   14710:	b960      	cbnz	r0, 1472c <updateWeekProfileTable+0x12c>
        wp->sunday = (unsigned char)var_toInteger(tmp);
   14712:	9800      	ldr	r0, [sp, #0]
   14714:	f005 ff3f 	bl	1a596 <var_toInteger>
        arr_push(profile, wp);
   14718:	4629      	mov	r1, r5
        wp->sunday = (unsigned char)var_toInteger(tmp);
   1471a:	74a8      	strb	r0, [r5, #18]
        arr_push(profile, wp);
   1471c:	4640      	mov	r0, r8
   1471e:	f7fb fdf5 	bl	1030c <arr_push>
    for (pos = 0; pos != data->Arr->size; ++pos)
   14722:	3601      	adds	r6, #1
   14724:	e773      	b.n	1460e <updateWeekProfileTable+0xe>
            ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   14726:	f44f 7482 	mov.w	r4, #260	; 0x104
    return ret;
   1472a:	e775      	b.n	14618 <updateWeekProfileTable+0x18>
        gxfree(wp);
   1472c:	4628      	mov	r0, r5
   1472e:	f7f7 fa49 	bl	bbc4 <free>
   14732:	e771      	b.n	14618 <updateWeekProfileTable+0x18>

00014734 <updateDayProfileTable>:
{
   14734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14738:	4680      	mov	r8, r0
   1473a:	b08b      	sub	sp, #44	; 0x2c
    obj_clearDayProfileTable(profile);
   1473c:	4608      	mov	r0, r1
{
   1473e:	460f      	mov	r7, r1
   14740:	4691      	mov	r9, r2
    obj_clearDayProfileTable(profile);
   14742:	f7ff f9b7 	bl	13ab4 <obj_clearDayProfileTable>
    gxDayProfileAction* ac = NULL;
   14746:	2400      	movs	r4, #0
    for (pos = 0; pos != data->Arr->size; ++pos)
   14748:	4626      	mov	r6, r4
   1474a:	f8d9 3008 	ldr.w	r3, [r9, #8]
   1474e:	88db      	ldrh	r3, [r3, #6]
   14750:	42b3      	cmp	r3, r6
   14752:	d101      	bne.n	14758 <updateDayProfileTable+0x24>
   14754:	2100      	movs	r1, #0
   14756:	e099      	b.n	1488c <updateDayProfileTable+0x158>
        dp = (gxDayProfile*)gxmalloc(sizeof(gxDayProfile));
   14758:	2010      	movs	r0, #16
   1475a:	f7f7 fa2b 	bl	bbb4 <malloc>
        if (dp == NULL)
   1475e:	4605      	mov	r5, r0
   14760:	2800      	cmp	r0, #0
   14762:	f000 80a2 	beq.w	148aa <updateDayProfileTable+0x176>
        arr_init(&dp->daySchedules);
   14766:	f100 0b04 	add.w	fp, r0, #4
   1476a:	4658      	mov	r0, fp
   1476c:	f7fb fd9f 	bl	102ae <arr_init>
        ret = va_getByIndex(data->Arr, pos, &it);
   14770:	4631      	mov	r1, r6
   14772:	f8d9 0008 	ldr.w	r0, [r9, #8]
   14776:	aa04      	add	r2, sp, #16
   14778:	f005 fd93 	bl	1a2a2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   1477c:	4601      	mov	r1, r0
   1477e:	2800      	cmp	r0, #0
   14780:	d168      	bne.n	14854 <updateDayProfileTable+0x120>
        ret = va_getByIndex(it->Arr, 0, &tmp);
   14782:	9b04      	ldr	r3, [sp, #16]
   14784:	aa02      	add	r2, sp, #8
   14786:	6898      	ldr	r0, [r3, #8]
   14788:	f005 fd8b 	bl	1a2a2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   1478c:	4601      	mov	r1, r0
   1478e:	2800      	cmp	r0, #0
   14790:	d160      	bne.n	14854 <updateDayProfileTable+0x120>
        dp->dayId = (unsigned char)var_toInteger(tmp);
   14792:	9802      	ldr	r0, [sp, #8]
   14794:	f005 feff 	bl	1a596 <var_toInteger>
        ret = va_getByIndex(it->Arr, 1, &tmp);
   14798:	9b04      	ldr	r3, [sp, #16]
        dp->dayId = (unsigned char)var_toInteger(tmp);
   1479a:	7028      	strb	r0, [r5, #0]
        ret = va_getByIndex(it->Arr, 1, &tmp);
   1479c:	2101      	movs	r1, #1
   1479e:	6898      	ldr	r0, [r3, #8]
   147a0:	aa02      	add	r2, sp, #8
   147a2:	f005 fd7e 	bl	1a2a2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   147a6:	4601      	mov	r1, r0
   147a8:	2800      	cmp	r0, #0
   147aa:	d153      	bne.n	14854 <updateDayProfileTable+0x120>
        for (pos2 = 0; pos2 != tmp->Arr->size; ++pos2)
   147ac:	4682      	mov	sl, r0
   147ae:	9b02      	ldr	r3, [sp, #8]
   147b0:	689b      	ldr	r3, [r3, #8]
   147b2:	88db      	ldrh	r3, [r3, #6]
   147b4:	4553      	cmp	r3, sl
   147b6:	d105      	bne.n	147c4 <updateDayProfileTable+0x90>
        arr_push(profile, dp);
   147b8:	4629      	mov	r1, r5
   147ba:	4638      	mov	r0, r7
   147bc:	f7fb fda6 	bl	1030c <arr_push>
    for (pos = 0; pos != data->Arr->size; ++pos)
   147c0:	3601      	adds	r6, #1
   147c2:	e7c2      	b.n	1474a <updateDayProfileTable+0x16>
            ac = (gxDayProfileAction*)gxmalloc(sizeof(gxDayProfileAction));
   147c4:	2014      	movs	r0, #20
   147c6:	f7f7 f9f5 	bl	bbb4 <malloc>
            if (ac == NULL)
   147ca:	4604      	mov	r4, r0
   147cc:	2800      	cmp	r0, #0
   147ce:	d076      	beq.n	148be <updateDayProfileTable+0x18a>
            ret = va_getByIndex(tmp->Arr, pos2, &it2);
   147d0:	9b02      	ldr	r3, [sp, #8]
   147d2:	4651      	mov	r1, sl
   147d4:	6898      	ldr	r0, [r3, #8]
   147d6:	aa05      	add	r2, sp, #20
   147d8:	f005 fd63 	bl	1a2a2 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   147dc:	4601      	mov	r1, r0
   147de:	2800      	cmp	r0, #0
   147e0:	d138      	bne.n	14854 <updateDayProfileTable+0x120>
            ret = va_getByIndex(it2->Arr, 0, &tmp2);
   147e2:	9b05      	ldr	r3, [sp, #20]
   147e4:	aa03      	add	r2, sp, #12
   147e6:	6898      	ldr	r0, [r3, #8]
   147e8:	f005 fd5b 	bl	1a2a2 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   147ec:	4601      	mov	r1, r0
   147ee:	2800      	cmp	r0, #0
   147f0:	d130      	bne.n	14854 <updateDayProfileTable+0x120>
            var_init(&tm);
   147f2:	a806      	add	r0, sp, #24
   147f4:	f005 fb7b 	bl	19eee <var_init>
            ret = dlms_changeType2(tmp2, DLMS_DATA_TYPE_TIME, &tm);
   147f8:	211b      	movs	r1, #27
   147fa:	9803      	ldr	r0, [sp, #12]
   147fc:	aa06      	add	r2, sp, #24
   147fe:	f7fb faa2 	bl	fd46 <dlms_changeType2>
            if (ret != DLMS_ERROR_CODE_OK)
   14802:	4601      	mov	r1, r0
   14804:	bb30      	cbnz	r0, 14854 <updateDayProfileTable+0x120>
            time_copy(&ac->startTime, tm.dateTime);
   14806:	9908      	ldr	r1, [sp, #32]
   14808:	4620      	mov	r0, r4
   1480a:	f7f9 fae9 	bl	dde0 <time_copy>
            var_clear(&tm);
   1480e:	a806      	add	r0, sp, #24
   14810:	f005 fcc9 	bl	1a1a6 <var_clear>
            ret = va_getByIndex(it2->Arr, 1, &tmp2);
   14814:	9b05      	ldr	r3, [sp, #20]
   14816:	2101      	movs	r1, #1
   14818:	6898      	ldr	r0, [r3, #8]
   1481a:	aa03      	add	r2, sp, #12
   1481c:	f005 fd41 	bl	1a2a2 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   14820:	4601      	mov	r1, r0
   14822:	b9b8      	cbnz	r0, 14854 <updateDayProfileTable+0x120>
            if ((ret = oa_findByLN(&settings->objects, DLMS_OBJECT_TYPE_SCRIPT_TABLE, tmp2->byteArr->data, &ac->script)) != 0)
   14824:	9a03      	ldr	r2, [sp, #12]
   14826:	6892      	ldr	r2, [r2, #8]
   14828:	f104 030c 	add.w	r3, r4, #12
   1482c:	2109      	movs	r1, #9
   1482e:	6812      	ldr	r2, [r2, #0]
   14830:	9301      	str	r3, [sp, #4]
   14832:	f108 0098 	add.w	r0, r8, #152	; 0x98
   14836:	f005 faf1 	bl	19e1c <oa_findByLN>
   1483a:	4601      	mov	r1, r0
   1483c:	b950      	cbnz	r0, 14854 <updateDayProfileTable+0x120>
            if (ac->script == NULL)
   1483e:	68e2      	ldr	r2, [r4, #12]
   14840:	9b01      	ldr	r3, [sp, #4]
   14842:	b16a      	cbz	r2, 14860 <updateDayProfileTable+0x12c>
            ret = va_getByIndex(it2->Arr, 2, &tmp2);
   14844:	9b05      	ldr	r3, [sp, #20]
   14846:	2102      	movs	r1, #2
   14848:	6898      	ldr	r0, [r3, #8]
   1484a:	aa03      	add	r2, sp, #12
   1484c:	f005 fd29 	bl	1a2a2 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   14850:	4601      	mov	r1, r0
   14852:	b1f8      	cbz	r0, 14894 <updateDayProfileTable+0x160>
            gxfree(dp);
   14854:	4628      	mov	r0, r5
   14856:	9101      	str	r1, [sp, #4]
   14858:	f7f7 f9b4 	bl	bbc4 <free>
   1485c:	9901      	ldr	r1, [sp, #4]
   1485e:	e026      	b.n	148ae <updateDayProfileTable+0x17a>
                if ((ret = cosem_createObject(DLMS_OBJECT_TYPE_SCRIPT_TABLE, &ac->script)) != 0)
   14860:	4619      	mov	r1, r3
   14862:	2009      	movs	r0, #9
   14864:	f7ed fafc 	bl	1e60 <cosem_createObject>
   14868:	4601      	mov	r1, r0
   1486a:	b978      	cbnz	r0, 1488c <updateDayProfileTable+0x158>
                memcpy(ac->script->logicalName, tmp2->byteArr->data, tmp2->byteArr->size);
   1486c:	9b03      	ldr	r3, [sp, #12]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1486e:	68e0      	ldr	r0, [r4, #12]
   14870:	689b      	ldr	r3, [r3, #8]
   14872:	3006      	adds	r0, #6
   14874:	6819      	ldr	r1, [r3, #0]
   14876:	88da      	ldrh	r2, [r3, #6]
   14878:	f007 fc32 	bl	1c0e0 <memcpy>
                ret = oa_push(&settings->releasedObjects, ac->script);
   1487c:	68e1      	ldr	r1, [r4, #12]
   1487e:	f108 00e4 	add.w	r0, r8, #228	; 0xe4
   14882:	f005 fa6b 	bl	19d5c <oa_push>
                if (ret != DLMS_ERROR_CODE_OK)
   14886:	4601      	mov	r1, r0
   14888:	2800      	cmp	r0, #0
   1488a:	d0db      	beq.n	14844 <updateDayProfileTable+0x110>
}
   1488c:	4608      	mov	r0, r1
   1488e:	b00b      	add	sp, #44	; 0x2c
   14890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            ac->scriptSelector = (uint16_t)var_toInteger(tmp2);
   14894:	9803      	ldr	r0, [sp, #12]
   14896:	f005 fe7e 	bl	1a596 <var_toInteger>
            arr_push(&dp->daySchedules, ac);
   1489a:	4621      	mov	r1, r4
            ac->scriptSelector = (uint16_t)var_toInteger(tmp2);
   1489c:	8220      	strh	r0, [r4, #16]
            arr_push(&dp->daySchedules, ac);
   1489e:	4658      	mov	r0, fp
   148a0:	f7fb fd34 	bl	1030c <arr_push>
        for (pos2 = 0; pos2 != tmp->Arr->size; ++pos2)
   148a4:	f10a 0a01 	add.w	sl, sl, #1
   148a8:	e781      	b.n	147ae <updateDayProfileTable+0x7a>
            ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   148aa:	f44f 7182 	mov.w	r1, #260	; 0x104
        if (ac)
   148ae:	2c00      	cmp	r4, #0
   148b0:	d0ec      	beq.n	1488c <updateDayProfileTable+0x158>
            gxfree(ac);
   148b2:	4620      	mov	r0, r4
   148b4:	9101      	str	r1, [sp, #4]
   148b6:	f7f7 f985 	bl	bbc4 <free>
   148ba:	9901      	ldr	r1, [sp, #4]
   148bc:	e7e6      	b.n	1488c <updateDayProfileTable+0x158>
                return DLMS_ERROR_CODE_OUTOFMEMORY;
   148be:	f44f 7182 	mov.w	r1, #260	; 0x104
   148c2:	e7e3      	b.n	1488c <updateDayProfileTable+0x158>

000148c4 <cosem_setActivityCalendar>:
{
   148c4:	b530      	push	{r4, r5, lr}
    if (index == 2)
   148c6:	2a02      	cmp	r2, #2
{
   148c8:	b085      	sub	sp, #20
   148ca:	460d      	mov	r5, r1
   148cc:	461c      	mov	r4, r3
    if (index == 2)
   148ce:	d10e      	bne.n	148ee <cosem_setActivityCalendar+0x2a>
        bb_clear(&object->calendarNameActive);
   148d0:	3510      	adds	r5, #16
        bb_clear(&object->calendarNamePassive);
   148d2:	4628      	mov	r0, r5
   148d4:	f7f8 fb49 	bl	cf6a <bb_clear>
        ret = bb_set2(&object->calendarNamePassive, value->byteArr, 0, bb_size(value->byteArr));
   148d8:	68a4      	ldr	r4, [r4, #8]
   148da:	4620      	mov	r0, r4
   148dc:	f7f8 f97f 	bl	cbde <bb_size>
   148e0:	2200      	movs	r2, #0
   148e2:	4603      	mov	r3, r0
   148e4:	4621      	mov	r1, r4
   148e6:	4628      	mov	r0, r5
   148e8:	f7f8 fafa 	bl	cee0 <bb_set2>
   148ec:	e006      	b.n	148fc <cosem_setActivityCalendar+0x38>
    else if (index == 3)
   148ee:	2a03      	cmp	r2, #3
   148f0:	d108      	bne.n	14904 <cosem_setActivityCalendar+0x40>
        ret = updateSeasonProfile(&object->seasonProfileActive, value);
   148f2:	4619      	mov	r1, r3
   148f4:	f105 0028 	add.w	r0, r5, #40	; 0x28
   148f8:	f7ff fe0b 	bl	14512 <updateSeasonProfile>
   148fc:	4604      	mov	r4, r0
}
   148fe:	4620      	mov	r0, r4
   14900:	b005      	add	sp, #20
   14902:	bd30      	pop	{r4, r5, pc}
    else if (index == 4)
   14904:	2a04      	cmp	r2, #4
   14906:	d105      	bne.n	14914 <cosem_setActivityCalendar+0x50>
        ret = updateWeekProfileTable(&object->weekProfileTableActive, value);
   14908:	4619      	mov	r1, r3
   1490a:	f105 0034 	add.w	r0, r5, #52	; 0x34
        ret = updateWeekProfileTable(&object->weekProfileTablePassive, value);
   1490e:	f7ff fe77 	bl	14600 <updateWeekProfileTable>
   14912:	e7f3      	b.n	148fc <cosem_setActivityCalendar+0x38>
    else if (index == 5)
   14914:	2a05      	cmp	r2, #5
   14916:	d104      	bne.n	14922 <cosem_setActivityCalendar+0x5e>
        ret = updateDayProfileTable(settings, &object->dayProfileTableActive, value);
   14918:	461a      	mov	r2, r3
   1491a:	3140      	adds	r1, #64	; 0x40
        ret = updateDayProfileTable(settings, &object->dayProfileTablePassive, value);
   1491c:	f7ff ff0a 	bl	14734 <updateDayProfileTable>
   14920:	e7ec      	b.n	148fc <cosem_setActivityCalendar+0x38>
    else if (index == 6)
   14922:	2a06      	cmp	r2, #6
   14924:	d101      	bne.n	1492a <cosem_setActivityCalendar+0x66>
        bb_clear(&object->calendarNamePassive);
   14926:	351c      	adds	r5, #28
   14928:	e7d3      	b.n	148d2 <cosem_setActivityCalendar+0xe>
    else if (index == 7)
   1492a:	2a07      	cmp	r2, #7
   1492c:	d103      	bne.n	14936 <cosem_setActivityCalendar+0x72>
        ret = updateSeasonProfile(&object->seasonProfilePassive, value);
   1492e:	4619      	mov	r1, r3
   14930:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   14934:	e7e0      	b.n	148f8 <cosem_setActivityCalendar+0x34>
    else if (index == 8)
   14936:	2a08      	cmp	r2, #8
   14938:	d103      	bne.n	14942 <cosem_setActivityCalendar+0x7e>
        ret = updateWeekProfileTable(&object->weekProfileTablePassive, value);
   1493a:	4619      	mov	r1, r3
   1493c:	f105 0064 	add.w	r0, r5, #100	; 0x64
   14940:	e7e5      	b.n	1490e <cosem_setActivityCalendar+0x4a>
    else if (index == 9)
   14942:	2a09      	cmp	r2, #9
   14944:	d102      	bne.n	1494c <cosem_setActivityCalendar+0x88>
        ret = updateDayProfileTable(settings, &object->dayProfileTablePassive, value);
   14946:	461a      	mov	r2, r3
   14948:	3158      	adds	r1, #88	; 0x58
   1494a:	e7e7      	b.n	1491c <cosem_setActivityCalendar+0x58>
    else if (index == 10)
   1494c:	2a0a      	cmp	r2, #10
   1494e:	d11e      	bne.n	1498e <cosem_setActivityCalendar+0xca>
        if (value->vt == DLMS_DATA_TYPE_OCTET_STRING && value->byteArr != NULL)
   14950:	781b      	ldrb	r3, [r3, #0]
   14952:	2b09      	cmp	r3, #9
   14954:	d115      	bne.n	14982 <cosem_setActivityCalendar+0xbe>
   14956:	68a3      	ldr	r3, [r4, #8]
   14958:	b19b      	cbz	r3, 14982 <cosem_setActivityCalendar+0xbe>
            var_init(&tm);
   1495a:	4668      	mov	r0, sp
   1495c:	f005 fac7 	bl	19eee <var_init>
            ret = dlms_changeType2(value, DLMS_DATA_TYPE_DATETIME, &tm);
   14960:	4620      	mov	r0, r4
   14962:	466a      	mov	r2, sp
   14964:	2119      	movs	r1, #25
   14966:	f7fb f9ee 	bl	fd46 <dlms_changeType2>
            if (ret != DLMS_ERROR_CODE_OK)
   1496a:	4604      	mov	r4, r0
   1496c:	2800      	cmp	r0, #0
   1496e:	d1c6      	bne.n	148fe <cosem_setActivityCalendar+0x3a>
            time_copy(&object->time, tm.dateTime);
   14970:	f105 0070 	add.w	r0, r5, #112	; 0x70
   14974:	9902      	ldr	r1, [sp, #8]
   14976:	f7f9 fa33 	bl	dde0 <time_copy>
            var_clear(&tm);
   1497a:	4668      	mov	r0, sp
   1497c:	f005 fc13 	bl	1a1a6 <var_clear>
   14980:	e7bd      	b.n	148fe <cosem_setActivityCalendar+0x3a>
            time_clear(&object->time);
   14982:	f105 0070 	add.w	r0, r5, #112	; 0x70
   14986:	f7f9 f9fa 	bl	dd7e <time_clear>
    int ret = DLMS_ERROR_CODE_OK;
   1498a:	2400      	movs	r4, #0
   1498c:	e7b7      	b.n	148fe <cosem_setActivityCalendar+0x3a>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   1498e:	f44f 7481 	mov.w	r4, #258	; 0x102
   14992:	e7b4      	b.n	148fe <cosem_setActivityCalendar+0x3a>

00014994 <cosem_setActionSchedule>:
{
   14994:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (index == 2)
   14996:	2a02      	cmp	r2, #2
{
   14998:	b08b      	sub	sp, #44	; 0x2c
   1499a:	4607      	mov	r7, r0
   1499c:	460d      	mov	r5, r1
   1499e:	461e      	mov	r6, r3
    if (index == 2)
   149a0:	d132      	bne.n	14a08 <cosem_setActionSchedule+0x74>
        ret = va_getByIndex(value->Arr, 0, &tmp);
   149a2:	6898      	ldr	r0, [r3, #8]
   149a4:	466a      	mov	r2, sp
   149a6:	2100      	movs	r1, #0
   149a8:	f005 fc7b 	bl	1a2a2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   149ac:	4604      	mov	r4, r0
   149ae:	bb40      	cbnz	r0, 14a02 <cosem_setActionSchedule+0x6e>
            if ((ret = oa_findByLN(&settings->objects, DLMS_OBJECT_TYPE_SCRIPT_TABLE, tmp->byteArr->data, (gxObject**)&object->executedScript)) != 0)
   149b0:	9b00      	ldr	r3, [sp, #0]
   149b2:	689a      	ldr	r2, [r3, #8]
   149b4:	f105 0410 	add.w	r4, r5, #16
   149b8:	4623      	mov	r3, r4
   149ba:	6812      	ldr	r2, [r2, #0]
   149bc:	2109      	movs	r1, #9
   149be:	f107 0098 	add.w	r0, r7, #152	; 0x98
   149c2:	f005 fa2b 	bl	19e1c <oa_findByLN>
            if (object->executedScript == NULL)
   149c6:	692b      	ldr	r3, [r5, #16]
   149c8:	b983      	cbnz	r3, 149ec <cosem_setActionSchedule+0x58>
                ret = cosem_createObject(DLMS_OBJECT_TYPE_SCRIPT_TABLE, (gxObject**)&object->executedScript);
   149ca:	4621      	mov	r1, r4
   149cc:	2009      	movs	r0, #9
   149ce:	f7ed fa47 	bl	1e60 <cosem_createObject>
                if (ret == DLMS_ERROR_CODE_OK)
   149d2:	b958      	cbnz	r0, 149ec <cosem_setActionSchedule+0x58>
                    ret = cosem_setLogicalName((gxObject*)object->executedScript, tmp->byteArr->data);
   149d4:	9b00      	ldr	r3, [sp, #0]
   149d6:	6928      	ldr	r0, [r5, #16]
   149d8:	689b      	ldr	r3, [r3, #8]
   149da:	6819      	ldr	r1, [r3, #0]
   149dc:	f7f8 feab 	bl	d736 <cosem_setLogicalName>
                    if (ret == DLMS_ERROR_CODE_OK)
   149e0:	b920      	cbnz	r0, 149ec <cosem_setActionSchedule+0x58>
                        ret = oa_push(&settings->releasedObjects, (gxObject*)object->executedScript);
   149e2:	6929      	ldr	r1, [r5, #16]
   149e4:	f107 00e4 	add.w	r0, r7, #228	; 0xe4
   149e8:	f005 f9b8 	bl	19d5c <oa_push>
        ret = va_getByIndex(value->Arr, 1, &tmp);
   149ec:	68b0      	ldr	r0, [r6, #8]
   149ee:	466a      	mov	r2, sp
   149f0:	2101      	movs	r1, #1
   149f2:	f005 fc56 	bl	1a2a2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   149f6:	4604      	mov	r4, r0
   149f8:	b918      	cbnz	r0, 14a02 <cosem_setActionSchedule+0x6e>
        object->executedScriptSelector = (uint16_t)var_toInteger(tmp);
   149fa:	9800      	ldr	r0, [sp, #0]
   149fc:	f005 fdcb 	bl	1a596 <var_toInteger>
   14a00:	82a8      	strh	r0, [r5, #20]
}
   14a02:	4620      	mov	r0, r4
   14a04:	b00b      	add	sp, #44	; 0x2c
   14a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (index == 3)
   14a08:	2a03      	cmp	r2, #3
   14a0a:	d105      	bne.n	14a18 <cosem_setActionSchedule+0x84>
        object->type = (DLMS_SINGLE_ACTION_SCHEDULE_TYPE)var_toInteger(value);
   14a0c:	4618      	mov	r0, r3
   14a0e:	f005 fdc2 	bl	1a596 <var_toInteger>
   14a12:	75a8      	strb	r0, [r5, #22]
    int ret = 0, pos;
   14a14:	2400      	movs	r4, #0
   14a16:	e7f4      	b.n	14a02 <cosem_setActionSchedule+0x6e>
    else if (index == 4)
   14a18:	2a04      	cmp	r2, #4
   14a1a:	d178      	bne.n	14b0e <cosem_setActionSchedule+0x17a>
        arr_clear(&object->executionTime);
   14a1c:	3518      	adds	r5, #24
   14a1e:	4628      	mov	r0, r5
   14a20:	f7fb fc89 	bl	10336 <arr_clear>
        var_init(&time);
   14a24:	a802      	add	r0, sp, #8
   14a26:	f005 fa62 	bl	19eee <var_init>
        var_init(&date);
   14a2a:	a806      	add	r0, sp, #24
   14a2c:	f005 fa5f 	bl	19eee <var_init>
        if (value->Arr != NULL)
   14a30:	68b3      	ldr	r3, [r6, #8]
   14a32:	2b00      	cmp	r3, #0
   14a34:	d0ee      	beq.n	14a14 <cosem_setActionSchedule+0x80>
            arr_capacity(&object->executionTime, value->Arr->size);
   14a36:	88d9      	ldrh	r1, [r3, #6]
   14a38:	4628      	mov	r0, r5
   14a3a:	f7fb fc41 	bl	102c0 <arr_capacity>
            for (pos = 0; pos != value->Arr->size; ++pos)
   14a3e:	2700      	movs	r7, #0
   14a40:	68b0      	ldr	r0, [r6, #8]
   14a42:	88c3      	ldrh	r3, [r0, #6]
   14a44:	42bb      	cmp	r3, r7
   14a46:	d0e5      	beq.n	14a14 <cosem_setActionSchedule+0x80>
                ret = va_getByIndex(value->Arr, pos, &tmp);
   14a48:	466a      	mov	r2, sp
   14a4a:	4639      	mov	r1, r7
   14a4c:	f005 fc29 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   14a50:	4604      	mov	r4, r0
   14a52:	2800      	cmp	r0, #0
   14a54:	d1d5      	bne.n	14a02 <cosem_setActionSchedule+0x6e>
                ret = va_getByIndex(tmp->Arr, 0, &tmp2);
   14a56:	9b00      	ldr	r3, [sp, #0]
   14a58:	4601      	mov	r1, r0
   14a5a:	aa01      	add	r2, sp, #4
   14a5c:	6898      	ldr	r0, [r3, #8]
   14a5e:	f005 fc20 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   14a62:	4604      	mov	r4, r0
   14a64:	2800      	cmp	r0, #0
   14a66:	d1cc      	bne.n	14a02 <cosem_setActionSchedule+0x6e>
                ret = dlms_changeType2(tmp2, DLMS_DATA_TYPE_TIME, &time);
   14a68:	9801      	ldr	r0, [sp, #4]
   14a6a:	aa02      	add	r2, sp, #8
   14a6c:	211b      	movs	r1, #27
   14a6e:	f7fb f96a 	bl	fd46 <dlms_changeType2>
                if (ret != DLMS_ERROR_CODE_OK)
   14a72:	4604      	mov	r4, r0
   14a74:	2800      	cmp	r0, #0
   14a76:	d1c4      	bne.n	14a02 <cosem_setActionSchedule+0x6e>
                ret = va_getByIndex(tmp->Arr, 1, &tmp2);
   14a78:	9b00      	ldr	r3, [sp, #0]
   14a7a:	aa01      	add	r2, sp, #4
   14a7c:	6898      	ldr	r0, [r3, #8]
   14a7e:	2101      	movs	r1, #1
   14a80:	f005 fc0f 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   14a84:	4604      	mov	r4, r0
   14a86:	2800      	cmp	r0, #0
   14a88:	d1bb      	bne.n	14a02 <cosem_setActionSchedule+0x6e>
                ret = dlms_changeType2(tmp2, DLMS_DATA_TYPE_DATE, &date);
   14a8a:	9801      	ldr	r0, [sp, #4]
   14a8c:	aa06      	add	r2, sp, #24
   14a8e:	211a      	movs	r1, #26
   14a90:	f7fb f959 	bl	fd46 <dlms_changeType2>
                if (ret != DLMS_ERROR_CODE_OK)
   14a94:	4604      	mov	r4, r0
   14a96:	2800      	cmp	r0, #0
   14a98:	d1b3      	bne.n	14a02 <cosem_setActionSchedule+0x6e>
                time_addHours(date.dateTime, time_getHours(time.dateTime));
   14a9a:	9804      	ldr	r0, [sp, #16]
   14a9c:	9c08      	ldr	r4, [sp, #32]
   14a9e:	f7ed fb97 	bl	21d0 <time_getHours>
   14aa2:	4601      	mov	r1, r0
   14aa4:	4620      	mov	r0, r4
   14aa6:	f7f9 f954 	bl	dd52 <time_addHours>
                time_addMinutes(date.dateTime, time_getMinutes(time.dateTime));
   14aaa:	9804      	ldr	r0, [sp, #16]
   14aac:	9c08      	ldr	r4, [sp, #32]
   14aae:	f7f9 f93c 	bl	dd2a <time_getMinutes>
   14ab2:	4601      	mov	r1, r0
   14ab4:	4620      	mov	r0, r4
   14ab6:	f7f9 f953 	bl	dd60 <time_addMinutes>
                time_addSeconds(date.dateTime, time_getSeconds(time.dateTime));
   14aba:	9804      	ldr	r0, [sp, #16]
   14abc:	9c08      	ldr	r4, [sp, #32]
   14abe:	f7f9 f940 	bl	dd42 <time_getSeconds>
   14ac2:	4601      	mov	r1, r0
   14ac4:	4620      	mov	r0, r4
   14ac6:	f7f9 f951 	bl	dd6c <time_addSeconds>
                date.dateTime->skip = (DATETIME_SKIPS)(date.dateTime->skip & time.dateTime->skip);
   14aca:	9a08      	ldr	r2, [sp, #32]
   14acc:	9b04      	ldr	r3, [sp, #16]
   14ace:	88d1      	ldrh	r1, [r2, #6]
   14ad0:	88db      	ldrh	r3, [r3, #6]
   14ad2:	400b      	ands	r3, r1
                date.dateTime->skip |= DATETIME_SKIPS_DEVITATION;
   14ad4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
                date.dateTime->deviation = (short)0x8000;
   14ad8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   14adc:	8091      	strh	r1, [r2, #4]
                date.dateTime->skip |= DATETIME_SKIPS_DEVITATION;
   14ade:	80d3      	strh	r3, [r2, #6]
                tm = (gxtime*)gxmalloc(sizeof(gxtime));
   14ae0:	200c      	movs	r0, #12
   14ae2:	f7f7 f867 	bl	bbb4 <malloc>
                if (tm == NULL)
   14ae6:	4604      	mov	r4, r0
   14ae8:	b170      	cbz	r0, 14b08 <cosem_setActionSchedule+0x174>
                time_copy(tm, date.dateTime);
   14aea:	9908      	ldr	r1, [sp, #32]
   14aec:	f7f9 f978 	bl	dde0 <time_copy>
                arr_push(&object->executionTime, tm);
   14af0:	4621      	mov	r1, r4
   14af2:	4628      	mov	r0, r5
   14af4:	f7fb fc0a 	bl	1030c <arr_push>
                var_clear(&time);
   14af8:	a802      	add	r0, sp, #8
   14afa:	f005 fb54 	bl	1a1a6 <var_clear>
                var_clear(&date);
   14afe:	a806      	add	r0, sp, #24
   14b00:	f005 fb51 	bl	1a1a6 <var_clear>
            for (pos = 0; pos != value->Arr->size; ++pos)
   14b04:	3701      	adds	r7, #1
   14b06:	e79b      	b.n	14a40 <cosem_setActionSchedule+0xac>
                    ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   14b08:	f44f 7482 	mov.w	r4, #260	; 0x104
   14b0c:	e779      	b.n	14a02 <cosem_setActionSchedule+0x6e>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   14b0e:	f44f 7481 	mov.w	r4, #258	; 0x102
   14b12:	e776      	b.n	14a02 <cosem_setActionSchedule+0x6e>

00014b14 <cosem_updateAttributeAccessModes>:
{
   14b14:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    if (arr->size != 2)
   14b18:	88cb      	ldrh	r3, [r1, #6]
   14b1a:	2b02      	cmp	r3, #2
{
   14b1c:	4605      	mov	r5, r0
   14b1e:	460e      	mov	r6, r1
    if (arr->size != 2)
   14b20:	f040 80a9 	bne.w	14c76 <cosem_updateAttributeAccessModes+0x162>
    ret = va_getByIndex(arr, 0, &tmp);
   14b24:	aa01      	add	r2, sp, #4
   14b26:	2100      	movs	r1, #0
   14b28:	4630      	mov	r0, r6
   14b2a:	f005 fbba 	bl	1a2a2 <va_getByIndex>
    if (ret != 0)
   14b2e:	4604      	mov	r4, r0
   14b30:	2800      	cmp	r0, #0
   14b32:	d171      	bne.n	14c18 <cosem_updateAttributeAccessModes+0x104>
    if (object->access == NULL || object->access->attributeAccessModes.size == 0)
   14b34:	68eb      	ldr	r3, [r5, #12]
   14b36:	2b00      	cmp	r3, #0
   14b38:	d046      	beq.n	14bc8 <cosem_updateAttributeAccessModes+0xb4>
   14b3a:	88db      	ldrh	r3, [r3, #6]
   14b3c:	2b00      	cmp	r3, #0
   14b3e:	d048      	beq.n	14bd2 <cosem_updateAttributeAccessModes+0xbe>
{
   14b40:	2700      	movs	r7, #0
    for (pos = 0; pos != tmp->Arr->size; ++pos)
   14b42:	9b01      	ldr	r3, [sp, #4]
   14b44:	6898      	ldr	r0, [r3, #8]
   14b46:	88c2      	ldrh	r2, [r0, #6]
   14b48:	b2bb      	uxth	r3, r7
   14b4a:	429a      	cmp	r2, r3
   14b4c:	d158      	bne.n	14c00 <cosem_updateAttributeAccessModes+0xec>
    ret = va_getByIndex(arr, 1, &tmp);
   14b4e:	aa01      	add	r2, sp, #4
   14b50:	2101      	movs	r1, #1
   14b52:	4630      	mov	r0, r6
   14b54:	f005 fba5 	bl	1a2a2 <va_getByIndex>
    if (ret != 0)
   14b58:	4604      	mov	r4, r0
   14b5a:	2800      	cmp	r0, #0
   14b5c:	d15c      	bne.n	14c18 <cosem_updateAttributeAccessModes+0x104>
   14b5e:	4606      	mov	r6, r0
    for (pos = 0; pos != tmp->Arr->size; ++pos)
   14b60:	9b01      	ldr	r3, [sp, #4]
   14b62:	6898      	ldr	r0, [r3, #8]
   14b64:	88c2      	ldrh	r2, [r0, #6]
   14b66:	b2b3      	uxth	r3, r6
   14b68:	429a      	cmp	r2, r3
   14b6a:	d055      	beq.n	14c18 <cosem_updateAttributeAccessModes+0x104>
        ret = va_getByIndex(tmp->Arr, pos, &it);
   14b6c:	b2b1      	uxth	r1, r6
   14b6e:	aa02      	add	r2, sp, #8
   14b70:	f005 fb97 	bl	1a2a2 <va_getByIndex>
        if (ret != 0)
   14b74:	4601      	mov	r1, r0
   14b76:	2800      	cmp	r0, #0
   14b78:	d179      	bne.n	14c6e <cosem_updateAttributeAccessModes+0x15a>
        if (it->vt != DLMS_DATA_TYPE_STRUCTURE ||
   14b7a:	9b02      	ldr	r3, [sp, #8]
   14b7c:	781a      	ldrb	r2, [r3, #0]
   14b7e:	2a02      	cmp	r2, #2
   14b80:	d148      	bne.n	14c14 <cosem_updateAttributeAccessModes+0x100>
            it->Arr->size != 2)
   14b82:	6898      	ldr	r0, [r3, #8]
        if (it->vt != DLMS_DATA_TYPE_STRUCTURE ||
   14b84:	88c3      	ldrh	r3, [r0, #6]
   14b86:	2b02      	cmp	r3, #2
   14b88:	d144      	bne.n	14c14 <cosem_updateAttributeAccessModes+0x100>
        ret = va_getByIndex(it->Arr, 0, &value);
   14b8a:	aa03      	add	r2, sp, #12
   14b8c:	f005 fb89 	bl	1a2a2 <va_getByIndex>
        if (ret != 0)
   14b90:	2800      	cmp	r0, #0
   14b92:	d16e      	bne.n	14c72 <cosem_updateAttributeAccessModes+0x15e>
        id = (unsigned char)var_toInteger(value);
   14b94:	9803      	ldr	r0, [sp, #12]
   14b96:	f005 fcfe 	bl	1a596 <var_toInteger>
        if (!(id > object->access->methodAccessModes.size))
   14b9a:	68eb      	ldr	r3, [r5, #12]
   14b9c:	8a5b      	ldrh	r3, [r3, #18]
   14b9e:	b2c7      	uxtb	r7, r0
   14ba0:	429f      	cmp	r7, r3
   14ba2:	d80f      	bhi.n	14bc4 <cosem_updateAttributeAccessModes+0xb0>
            ret = va_getByIndex(it->Arr, 1, &value);
   14ba4:	9b02      	ldr	r3, [sp, #8]
   14ba6:	aa03      	add	r2, sp, #12
   14ba8:	6898      	ldr	r0, [r3, #8]
   14baa:	2101      	movs	r1, #1
   14bac:	f005 fb79 	bl	1a2a2 <va_getByIndex>
            if (ret != 0)
   14bb0:	2800      	cmp	r0, #0
   14bb2:	d15e      	bne.n	14c72 <cosem_updateAttributeAccessModes+0x15e>
            object->access->methodAccessModes.data[id - 1] = (unsigned char)var_toInteger(value);
   14bb4:	9803      	ldr	r0, [sp, #12]
   14bb6:	f005 fcee 	bl	1a596 <var_toInteger>
   14bba:	68eb      	ldr	r3, [r5, #12]
   14bbc:	68db      	ldr	r3, [r3, #12]
   14bbe:	443b      	add	r3, r7
   14bc0:	f803 0c01 	strb.w	r0, [r3, #-1]
    for (pos = 0; pos != tmp->Arr->size; ++pos)
   14bc4:	3601      	adds	r6, #1
   14bc6:	e7cb      	b.n	14b60 <cosem_updateAttributeAccessModes+0x4c>
            object->access = (gxAccess*)gxcalloc(1, sizeof(gxAccess));
   14bc8:	2118      	movs	r1, #24
   14bca:	2001      	movs	r0, #1
   14bcc:	f7f6 ffea 	bl	bba4 <calloc>
   14bd0:	60e8      	str	r0, [r5, #12]
        cnt = obj_attributeCount(object);
   14bd2:	4628      	mov	r0, r5
   14bd4:	f7ff f8ca 	bl	13d6c <obj_attributeCount>
        bb_capacity(&object->access->attributeAccessModes, cnt);
   14bd8:	b281      	uxth	r1, r0
   14bda:	68e8      	ldr	r0, [r5, #12]
   14bdc:	f7f8 f808 	bl	cbf0 <bb_capacity>
        object->access->attributeAccessModes.size = object->access->attributeAccessModes.capacity;
   14be0:	68eb      	ldr	r3, [r5, #12]
   14be2:	889a      	ldrh	r2, [r3, #4]
   14be4:	80da      	strh	r2, [r3, #6]
        cnt = obj_methodCount(object);
   14be6:	4628      	mov	r0, r5
   14be8:	f7ff f934 	bl	13e54 <obj_methodCount>
        bb_capacity(&object->access->methodAccessModes, cnt);
   14bec:	68eb      	ldr	r3, [r5, #12]
   14bee:	b281      	uxth	r1, r0
   14bf0:	f103 000c 	add.w	r0, r3, #12
   14bf4:	f7f7 fffc 	bl	cbf0 <bb_capacity>
        object->access->methodAccessModes.size = object->access->methodAccessModes.capacity;
   14bf8:	68eb      	ldr	r3, [r5, #12]
   14bfa:	8a1a      	ldrh	r2, [r3, #16]
   14bfc:	825a      	strh	r2, [r3, #18]
   14bfe:	e79f      	b.n	14b40 <cosem_updateAttributeAccessModes+0x2c>
        ret = va_getByIndex(tmp->Arr, pos, &it);
   14c00:	aa02      	add	r2, sp, #8
   14c02:	b2b9      	uxth	r1, r7
   14c04:	f005 fb4d 	bl	1a2a2 <va_getByIndex>
        if (ret != 0)
   14c08:	4604      	mov	r4, r0
   14c0a:	b928      	cbnz	r0, 14c18 <cosem_updateAttributeAccessModes+0x104>
        if (it->vt != DLMS_DATA_TYPE_STRUCTURE ||
   14c0c:	9b02      	ldr	r3, [sp, #8]
   14c0e:	781a      	ldrb	r2, [r3, #0]
   14c10:	2a02      	cmp	r2, #2
   14c12:	d005      	beq.n	14c20 <cosem_updateAttributeAccessModes+0x10c>
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
   14c14:	f44f 7481 	mov.w	r4, #258	; 0x102
}
   14c18:	4620      	mov	r0, r4
   14c1a:	b004      	add	sp, #16
   14c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            it->Arr->size != 3)
   14c20:	6898      	ldr	r0, [r3, #8]
        if (it->vt != DLMS_DATA_TYPE_STRUCTURE ||
   14c22:	88c3      	ldrh	r3, [r0, #6]
   14c24:	2b03      	cmp	r3, #3
   14c26:	d1f5      	bne.n	14c14 <cosem_updateAttributeAccessModes+0x100>
        ret = va_getByIndex(it->Arr, 0, &value);
   14c28:	4621      	mov	r1, r4
   14c2a:	aa03      	add	r2, sp, #12
   14c2c:	f005 fb39 	bl	1a2a2 <va_getByIndex>
        if (ret != 0)
   14c30:	4604      	mov	r4, r0
   14c32:	2800      	cmp	r0, #0
   14c34:	d1f0      	bne.n	14c18 <cosem_updateAttributeAccessModes+0x104>
        id = (unsigned char)var_toInteger(value);
   14c36:	9803      	ldr	r0, [sp, #12]
   14c38:	f005 fcad 	bl	1a596 <var_toInteger>
        if (!(id > object->access->attributeAccessModes.size))
   14c3c:	68eb      	ldr	r3, [r5, #12]
   14c3e:	88db      	ldrh	r3, [r3, #6]
   14c40:	fa5f f880 	uxtb.w	r8, r0
   14c44:	4598      	cmp	r8, r3
   14c46:	d810      	bhi.n	14c6a <cosem_updateAttributeAccessModes+0x156>
            ret = va_getByIndex(it->Arr, 1, &value);
   14c48:	9b02      	ldr	r3, [sp, #8]
   14c4a:	aa03      	add	r2, sp, #12
   14c4c:	6898      	ldr	r0, [r3, #8]
   14c4e:	2101      	movs	r1, #1
   14c50:	f005 fb27 	bl	1a2a2 <va_getByIndex>
            if (ret != 0)
   14c54:	4604      	mov	r4, r0
   14c56:	2800      	cmp	r0, #0
   14c58:	d1de      	bne.n	14c18 <cosem_updateAttributeAccessModes+0x104>
            object->access->attributeAccessModes.data[id - 1] = (unsigned char)var_toInteger(value);
   14c5a:	9803      	ldr	r0, [sp, #12]
   14c5c:	f005 fc9b 	bl	1a596 <var_toInteger>
   14c60:	68eb      	ldr	r3, [r5, #12]
   14c62:	681b      	ldr	r3, [r3, #0]
   14c64:	4443      	add	r3, r8
   14c66:	f803 0c01 	strb.w	r0, [r3, #-1]
    for (pos = 0; pos != tmp->Arr->size; ++pos)
   14c6a:	3701      	adds	r7, #1
   14c6c:	e769      	b.n	14b42 <cosem_updateAttributeAccessModes+0x2e>
        ret = va_getByIndex(tmp->Arr, pos, &it);
   14c6e:	4604      	mov	r4, r0
   14c70:	e7d2      	b.n	14c18 <cosem_updateAttributeAccessModes+0x104>
            ret = va_getByIndex(it->Arr, 1, &value);
   14c72:	4604      	mov	r4, r0
   14c74:	e7d0      	b.n	14c18 <cosem_updateAttributeAccessModes+0x104>
        return 0;
   14c76:	2400      	movs	r4, #0
   14c78:	e7ce      	b.n	14c18 <cosem_updateAttributeAccessModes+0x104>

00014c7a <cosem_setAssociationLogicalName>:
    if (index == 2)
   14c7a:	2a02      	cmp	r2, #2
{
   14c7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   14c80:	4680      	mov	r8, r0
   14c82:	460d      	mov	r5, r1
   14c84:	4617      	mov	r7, r2
   14c86:	461e      	mov	r6, r3
    if (index == 2)
   14c88:	f040 8082 	bne.w	14d90 <cosem_setAssociationLogicalName+0x116>
        oa_empty(&object->objectList);
   14c8c:	3514      	adds	r5, #20
        gxObject* obj = NULL;
   14c8e:	2700      	movs	r7, #0
        oa_empty(&object->objectList);
   14c90:	4628      	mov	r0, r5
        gxObject* obj = NULL;
   14c92:	9703      	str	r7, [sp, #12]
        oa_empty(&object->objectList);
   14c94:	f005 f88a 	bl	19dac <oa_empty>
        if (value->Arr != NULL)
   14c98:	68b4      	ldr	r4, [r6, #8]
   14c9a:	2c00      	cmp	r4, #0
   14c9c:	d176      	bne.n	14d8c <cosem_setAssociationLogicalName+0x112>
}
   14c9e:	4620      	mov	r0, r4
   14ca0:	b004      	add	sp, #16
   14ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                    ret = cosem_createObject(type, &obj);
   14ca6:	a903      	add	r1, sp, #12
   14ca8:	4648      	mov	r0, r9
   14caa:	f7ed f8d9 	bl	1e60 <cosem_createObject>
                    if (ret != DLMS_ERROR_CODE_OK)
   14cae:	4604      	mov	r4, r0
   14cb0:	2800      	cmp	r0, #0
   14cb2:	d057      	beq.n	14d64 <cosem_setAssociationLogicalName+0xea>
                        if (ret == DLMS_ERROR_CODE_INVALID_PARAMETER)
   14cb4:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   14cb8:	d1f1      	bne.n	14c9e <cosem_setAssociationLogicalName+0x24>
            for (pos = 0; pos != value->Arr->size; ++pos)
   14cba:	3701      	adds	r7, #1
   14cbc:	68b0      	ldr	r0, [r6, #8]
   14cbe:	88c3      	ldrh	r3, [r0, #6]
   14cc0:	42bb      	cmp	r3, r7
   14cc2:	d0ec      	beq.n	14c9e <cosem_setAssociationLogicalName+0x24>
                ret = va_getByIndex(value->Arr, pos, &tmp);
   14cc4:	aa01      	add	r2, sp, #4
   14cc6:	4639      	mov	r1, r7
   14cc8:	f005 faeb 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   14ccc:	4604      	mov	r4, r0
   14cce:	2800      	cmp	r0, #0
   14cd0:	d1e5      	bne.n	14c9e <cosem_setAssociationLogicalName+0x24>
                ret = va_getByIndex(tmp->Arr, 0, &tmp2);
   14cd2:	9b01      	ldr	r3, [sp, #4]
   14cd4:	4601      	mov	r1, r0
   14cd6:	aa02      	add	r2, sp, #8
   14cd8:	6898      	ldr	r0, [r3, #8]
   14cda:	f005 fae2 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   14cde:	4604      	mov	r4, r0
   14ce0:	2800      	cmp	r0, #0
   14ce2:	d1dc      	bne.n	14c9e <cosem_setAssociationLogicalName+0x24>
                type = (DLMS_OBJECT_TYPE)var_toInteger(tmp2);
   14ce4:	9802      	ldr	r0, [sp, #8]
   14ce6:	f005 fc56 	bl	1a596 <var_toInteger>
                ret = va_getByIndex(tmp->Arr, 1, &tmp2);
   14cea:	9b01      	ldr	r3, [sp, #4]
                type = (DLMS_OBJECT_TYPE)var_toInteger(tmp2);
   14cec:	fa1f f980 	uxth.w	r9, r0
                ret = va_getByIndex(tmp->Arr, 1, &tmp2);
   14cf0:	aa02      	add	r2, sp, #8
   14cf2:	6898      	ldr	r0, [r3, #8]
   14cf4:	2101      	movs	r1, #1
   14cf6:	f005 fad4 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   14cfa:	4604      	mov	r4, r0
   14cfc:	2800      	cmp	r0, #0
   14cfe:	d1ce      	bne.n	14c9e <cosem_setAssociationLogicalName+0x24>
                version = (unsigned char) var_toInteger(tmp2);
   14d00:	9802      	ldr	r0, [sp, #8]
   14d02:	f005 fc48 	bl	1a596 <var_toInteger>
                ret = va_getByIndex(tmp->Arr, 2, &tmp2);
   14d06:	9b01      	ldr	r3, [sp, #4]
                version = (unsigned char) var_toInteger(tmp2);
   14d08:	4682      	mov	sl, r0
                ret = va_getByIndex(tmp->Arr, 2, &tmp2);
   14d0a:	aa02      	add	r2, sp, #8
   14d0c:	6898      	ldr	r0, [r3, #8]
   14d0e:	2102      	movs	r1, #2
   14d10:	f005 fac7 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   14d14:	4604      	mov	r4, r0
   14d16:	2800      	cmp	r0, #0
   14d18:	d1c1      	bne.n	14c9e <cosem_setAssociationLogicalName+0x24>
                ret = oa_findByLN(&settings->objects, type, tmp2->byteArr->data, &obj);
   14d1a:	9b02      	ldr	r3, [sp, #8]
   14d1c:	689a      	ldr	r2, [r3, #8]
   14d1e:	4649      	mov	r1, r9
   14d20:	6812      	ldr	r2, [r2, #0]
   14d22:	ab03      	add	r3, sp, #12
   14d24:	f108 0098 	add.w	r0, r8, #152	; 0x98
   14d28:	f005 f878 	bl	19e1c <oa_findByLN>
                if (ret != DLMS_ERROR_CODE_OK)
   14d2c:	4604      	mov	r4, r0
   14d2e:	2800      	cmp	r0, #0
   14d30:	d1b5      	bne.n	14c9e <cosem_setAssociationLogicalName+0x24>
                if (obj == NULL)
   14d32:	9b03      	ldr	r3, [sp, #12]
   14d34:	2b00      	cmp	r3, #0
   14d36:	d0b6      	beq.n	14ca6 <cosem_setAssociationLogicalName+0x2c>
                ret = va_getByIndex(tmp->Arr, 3, &tmp2);
   14d38:	9b01      	ldr	r3, [sp, #4]
   14d3a:	aa02      	add	r2, sp, #8
   14d3c:	6898      	ldr	r0, [r3, #8]
   14d3e:	2103      	movs	r1, #3
   14d40:	f005 faaf 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   14d44:	4604      	mov	r4, r0
   14d46:	2800      	cmp	r0, #0
   14d48:	d1a9      	bne.n	14c9e <cosem_setAssociationLogicalName+0x24>
                ret = cosem_updateAttributeAccessModes(obj, tmp2->Arr);
   14d4a:	9b02      	ldr	r3, [sp, #8]
   14d4c:	9803      	ldr	r0, [sp, #12]
   14d4e:	6899      	ldr	r1, [r3, #8]
   14d50:	f7ff fee0 	bl	14b14 <cosem_updateAttributeAccessModes>
                if (ret != DLMS_ERROR_CODE_OK)
   14d54:	4604      	mov	r4, r0
   14d56:	2800      	cmp	r0, #0
   14d58:	d1a1      	bne.n	14c9e <cosem_setAssociationLogicalName+0x24>
                oa_push(&object->objectList, obj);
   14d5a:	9903      	ldr	r1, [sp, #12]
   14d5c:	4628      	mov	r0, r5
   14d5e:	f004 fffd 	bl	19d5c <oa_push>
   14d62:	e7aa      	b.n	14cba <cosem_setAssociationLogicalName+0x40>
                    ret = cosem_setLogicalName(obj, tmp2->byteArr->data);
   14d64:	9b02      	ldr	r3, [sp, #8]
   14d66:	9803      	ldr	r0, [sp, #12]
   14d68:	689b      	ldr	r3, [r3, #8]
   14d6a:	6819      	ldr	r1, [r3, #0]
   14d6c:	f7f8 fce3 	bl	d736 <cosem_setLogicalName>
                    if (ret != DLMS_ERROR_CODE_OK)
   14d70:	4604      	mov	r4, r0
   14d72:	2800      	cmp	r0, #0
   14d74:	d193      	bne.n	14c9e <cosem_setAssociationLogicalName+0x24>
                    obj->version = (unsigned char)version;
   14d76:	9903      	ldr	r1, [sp, #12]
                    ret = oa_push(&settings->releasedObjects, obj);
   14d78:	f108 00e4 	add.w	r0, r8, #228	; 0xe4
                version = (unsigned char) var_toInteger(tmp2);
   14d7c:	f881 a002 	strb.w	sl, [r1, #2]
                    ret = oa_push(&settings->releasedObjects, obj);
   14d80:	f004 ffec 	bl	19d5c <oa_push>
                    if (ret != DLMS_ERROR_CODE_OK)
   14d84:	4604      	mov	r4, r0
   14d86:	2800      	cmp	r0, #0
   14d88:	d0d6      	beq.n	14d38 <cosem_setAssociationLogicalName+0xbe>
   14d8a:	e788      	b.n	14c9e <cosem_setAssociationLogicalName+0x24>
    int ret = 0, pos = 0;
   14d8c:	463c      	mov	r4, r7
   14d8e:	e795      	b.n	14cbc <cosem_setAssociationLogicalName+0x42>
    else if (index == 3)
   14d90:	2a03      	cmp	r2, #3
   14d92:	d11a      	bne.n	14dca <cosem_setAssociationLogicalName+0x150>
        ret = va_getByIndex(value->Arr, 0, &tmp);
   14d94:	6898      	ldr	r0, [r3, #8]
   14d96:	aa01      	add	r2, sp, #4
   14d98:	2100      	movs	r1, #0
   14d9a:	f005 fa82 	bl	1a2a2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   14d9e:	4604      	mov	r4, r0
   14da0:	2800      	cmp	r0, #0
   14da2:	f47f af7c 	bne.w	14c9e <cosem_setAssociationLogicalName+0x24>
        object->clientSAP = (unsigned char)var_toInteger(tmp);
   14da6:	9801      	ldr	r0, [sp, #4]
   14da8:	f005 fbf5 	bl	1a596 <var_toInteger>
   14dac:	7728      	strb	r0, [r5, #28]
        ret = va_getByIndex(value->Arr, 1, &tmp);
   14dae:	68b0      	ldr	r0, [r6, #8]
   14db0:	aa01      	add	r2, sp, #4
   14db2:	2101      	movs	r1, #1
   14db4:	f005 fa75 	bl	1a2a2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   14db8:	4604      	mov	r4, r0
   14dba:	2800      	cmp	r0, #0
   14dbc:	f47f af6f 	bne.w	14c9e <cosem_setAssociationLogicalName+0x24>
        object->serverSAP = (uint16_t)var_toInteger(tmp);
   14dc0:	9801      	ldr	r0, [sp, #4]
   14dc2:	f005 fbe8 	bl	1a596 <var_toInteger>
   14dc6:	83e8      	strh	r0, [r5, #30]
   14dc8:	e769      	b.n	14c9e <cosem_setAssociationLogicalName+0x24>
    else if (index == 4)
   14dca:	2a04      	cmp	r2, #4
   14dcc:	f040 812e 	bne.w	1502c <cosem_setAssociationLogicalName+0x3b2>
        if (value->vt == DLMS_DATA_TYPE_OCTET_STRING)
   14dd0:	f893 8000 	ldrb.w	r8, [r3]
   14dd4:	f1b8 0f09 	cmp.w	r8, #9
   14dd8:	f040 80c2 	bne.w	14f60 <cosem_setAssociationLogicalName+0x2e6>
            if (value->byteArr->data[0] == 0x60)
   14ddc:	6898      	ldr	r0, [r3, #8]
   14dde:	6803      	ldr	r3, [r0, #0]
   14de0:	781b      	ldrb	r3, [r3, #0]
   14de2:	2b60      	cmp	r3, #96	; 0x60
   14de4:	d127      	bne.n	14e36 <cosem_setAssociationLogicalName+0x1bc>
                object->applicationContextName.jointIsoCtt = 0;
   14de6:	2300      	movs	r3, #0
   14de8:	84cb      	strh	r3, [r1, #38]	; 0x26
                object->applicationContextName.countryName = 0;
   14dea:	850b      	strh	r3, [r1, #40]	; 0x28
                ret = bb_getUInt8ByIndex(value->byteArr, 3, &object->applicationContextName.identifiedOrganization);
   14dec:	f101 022a 	add.w	r2, r1, #42	; 0x2a
   14df0:	2103      	movs	r1, #3
   14df2:	f7f8 f8ee 	bl	cfd2 <bb_getUInt8ByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   14df6:	4604      	mov	r4, r0
   14df8:	2800      	cmp	r0, #0
   14dfa:	f47f af50 	bne.w	14c9e <cosem_setAssociationLogicalName+0x24>
                ret = bb_getUInt8ByIndex(value->byteArr, 4, &object->applicationContextName.dlmsUA);
   14dfe:	68b0      	ldr	r0, [r6, #8]
   14e00:	f105 022b 	add.w	r2, r5, #43	; 0x2b
   14e04:	4639      	mov	r1, r7
   14e06:	f7f8 f8e4 	bl	cfd2 <bb_getUInt8ByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   14e0a:	4604      	mov	r4, r0
   14e0c:	2800      	cmp	r0, #0
   14e0e:	f47f af46 	bne.w	14c9e <cosem_setAssociationLogicalName+0x24>
                ret = bb_getUInt8ByIndex(value->byteArr, 5, &object->applicationContextName.applicationContext);
   14e12:	68b0      	ldr	r0, [r6, #8]
   14e14:	f105 022c 	add.w	r2, r5, #44	; 0x2c
   14e18:	2105      	movs	r1, #5
   14e1a:	f7f8 f8da 	bl	cfd2 <bb_getUInt8ByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   14e1e:	4604      	mov	r4, r0
   14e20:	2800      	cmp	r0, #0
   14e22:	f47f af3c 	bne.w	14c9e <cosem_setAssociationLogicalName+0x24>
                ret = bb_getUInt8ByIndex(value->byteArr, 6, &object->applicationContextName.contextId);
   14e26:	68b0      	ldr	r0, [r6, #8]
   14e28:	f105 022d 	add.w	r2, r5, #45	; 0x2d
   14e2c:	2106      	movs	r1, #6
   14e2e:	f7f8 f8d0 	bl	cfd2 <bb_getUInt8ByIndex>
            ret = bb_set2(&object->secret, value->byteArr, 0, bb_size(value->byteArr));
   14e32:	4604      	mov	r4, r0
   14e34:	e733      	b.n	14c9e <cosem_setAssociationLogicalName+0x24>
                ret = bb_getUInt8(value->byteArr, &ch);
   14e36:	a903      	add	r1, sp, #12
   14e38:	f7f8 f8ad 	bl	cf96 <bb_getUInt8>
                if (ret != DLMS_ERROR_CODE_OK || ch != 2)
   14e3c:	b110      	cbz	r0, 14e44 <cosem_setAssociationLogicalName+0x1ca>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   14e3e:	f44f 7481 	mov.w	r4, #258	; 0x102
   14e42:	e72c      	b.n	14c9e <cosem_setAssociationLogicalName+0x24>
                if (ret != DLMS_ERROR_CODE_OK || ch != 2)
   14e44:	f89d 300c 	ldrb.w	r3, [sp, #12]
   14e48:	2b02      	cmp	r3, #2
   14e4a:	d1f8      	bne.n	14e3e <cosem_setAssociationLogicalName+0x1c4>
                ret = bb_getUInt8(value->byteArr, &ch);
   14e4c:	68b0      	ldr	r0, [r6, #8]
   14e4e:	a903      	add	r1, sp, #12
   14e50:	f7f8 f8a1 	bl	cf96 <bb_getUInt8>
                if (ret != DLMS_ERROR_CODE_OK || ch != 7)
   14e54:	2800      	cmp	r0, #0
   14e56:	d1f2      	bne.n	14e3e <cosem_setAssociationLogicalName+0x1c4>
   14e58:	f89d 300c 	ldrb.w	r3, [sp, #12]
   14e5c:	2b07      	cmp	r3, #7
   14e5e:	d1ee      	bne.n	14e3e <cosem_setAssociationLogicalName+0x1c4>
                ret = bb_getUInt8(value->byteArr, &ch);
   14e60:	68b0      	ldr	r0, [r6, #8]
   14e62:	a903      	add	r1, sp, #12
   14e64:	f7f8 f897 	bl	cf96 <bb_getUInt8>
                if (ret != DLMS_ERROR_CODE_OK || ch != 0x11)
   14e68:	2800      	cmp	r0, #0
   14e6a:	d1e8      	bne.n	14e3e <cosem_setAssociationLogicalName+0x1c4>
   14e6c:	f89d 300c 	ldrb.w	r3, [sp, #12]
   14e70:	2b11      	cmp	r3, #17
   14e72:	d1e4      	bne.n	14e3e <cosem_setAssociationLogicalName+0x1c4>
                ret = bb_getUInt8(value->byteArr, &object->applicationContextName.jointIsoCtt);
   14e74:	68b0      	ldr	r0, [r6, #8]
   14e76:	f105 0126 	add.w	r1, r5, #38	; 0x26
   14e7a:	f7f8 f88c 	bl	cf96 <bb_getUInt8>
                if (ret != DLMS_ERROR_CODE_OK)
   14e7e:	2800      	cmp	r0, #0
   14e80:	d1dd      	bne.n	14e3e <cosem_setAssociationLogicalName+0x1c4>
                ret = bb_getUInt8(value->byteArr, &ch);
   14e82:	68b0      	ldr	r0, [r6, #8]
   14e84:	a903      	add	r1, sp, #12
   14e86:	f7f8 f886 	bl	cf96 <bb_getUInt8>
                if (ret != DLMS_ERROR_CODE_OK || ch != 0x11)
   14e8a:	2800      	cmp	r0, #0
   14e8c:	d1d7      	bne.n	14e3e <cosem_setAssociationLogicalName+0x1c4>
   14e8e:	f89d 300c 	ldrb.w	r3, [sp, #12]
   14e92:	2b11      	cmp	r3, #17
   14e94:	d1d3      	bne.n	14e3e <cosem_setAssociationLogicalName+0x1c4>
                ret = bb_getUInt8(value->byteArr, &object->applicationContextName.country);
   14e96:	68b0      	ldr	r0, [r6, #8]
   14e98:	f105 0127 	add.w	r1, r5, #39	; 0x27
   14e9c:	f7f8 f87b 	bl	cf96 <bb_getUInt8>
                if (ret != DLMS_ERROR_CODE_OK)
   14ea0:	2800      	cmp	r0, #0
   14ea2:	d1cc      	bne.n	14e3e <cosem_setAssociationLogicalName+0x1c4>
                ret = bb_getUInt8(value->byteArr, &ch);
   14ea4:	68b0      	ldr	r0, [r6, #8]
   14ea6:	a903      	add	r1, sp, #12
   14ea8:	f7f8 f875 	bl	cf96 <bb_getUInt8>
                if (ret != DLMS_ERROR_CODE_OK || ch != 0x12)
   14eac:	2800      	cmp	r0, #0
   14eae:	d1c6      	bne.n	14e3e <cosem_setAssociationLogicalName+0x1c4>
   14eb0:	f89d 300c 	ldrb.w	r3, [sp, #12]
   14eb4:	2b12      	cmp	r3, #18
   14eb6:	d1c2      	bne.n	14e3e <cosem_setAssociationLogicalName+0x1c4>
                ret = bb_getUInt16(value->byteArr, &object->applicationContextName.countryName);
   14eb8:	68b0      	ldr	r0, [r6, #8]
   14eba:	f105 0128 	add.w	r1, r5, #40	; 0x28
   14ebe:	f7f8 f893 	bl	cfe8 <bb_getUInt16>
                if (ret != DLMS_ERROR_CODE_OK || ch != 0x12)
   14ec2:	2800      	cmp	r0, #0
   14ec4:	d1bb      	bne.n	14e3e <cosem_setAssociationLogicalName+0x1c4>
   14ec6:	f89d 300c 	ldrb.w	r3, [sp, #12]
   14eca:	2b12      	cmp	r3, #18
   14ecc:	d1b7      	bne.n	14e3e <cosem_setAssociationLogicalName+0x1c4>
                ret = bb_getUInt8(value->byteArr, &ch);
   14ece:	68b0      	ldr	r0, [r6, #8]
   14ed0:	a903      	add	r1, sp, #12
   14ed2:	f7f8 f860 	bl	cf96 <bb_getUInt8>
                if (ret != DLMS_ERROR_CODE_OK || ch != 0x11)
   14ed6:	2800      	cmp	r0, #0
   14ed8:	d1b1      	bne.n	14e3e <cosem_setAssociationLogicalName+0x1c4>
   14eda:	f89d 300c 	ldrb.w	r3, [sp, #12]
   14ede:	2b11      	cmp	r3, #17
   14ee0:	d1ad      	bne.n	14e3e <cosem_setAssociationLogicalName+0x1c4>
                ret = bb_getUInt8(value->byteArr, &object->applicationContextName.identifiedOrganization);
   14ee2:	68b0      	ldr	r0, [r6, #8]
   14ee4:	f105 012a 	add.w	r1, r5, #42	; 0x2a
   14ee8:	f7f8 f855 	bl	cf96 <bb_getUInt8>
                if (ret != DLMS_ERROR_CODE_OK)
   14eec:	2800      	cmp	r0, #0
   14eee:	d1a6      	bne.n	14e3e <cosem_setAssociationLogicalName+0x1c4>
                ret = bb_getUInt8(value->byteArr, &ch);
   14ef0:	68b0      	ldr	r0, [r6, #8]
   14ef2:	a903      	add	r1, sp, #12
   14ef4:	f7f8 f84f 	bl	cf96 <bb_getUInt8>
                if (ret != DLMS_ERROR_CODE_OK || ch != 0x11)
   14ef8:	2800      	cmp	r0, #0
   14efa:	d1a0      	bne.n	14e3e <cosem_setAssociationLogicalName+0x1c4>
   14efc:	f89d 300c 	ldrb.w	r3, [sp, #12]
   14f00:	2b11      	cmp	r3, #17
   14f02:	d19c      	bne.n	14e3e <cosem_setAssociationLogicalName+0x1c4>
                ret = bb_getUInt8(value->byteArr, &object->applicationContextName.dlmsUA);
   14f04:	68b0      	ldr	r0, [r6, #8]
   14f06:	f105 012b 	add.w	r1, r5, #43	; 0x2b
   14f0a:	f7f8 f844 	bl	cf96 <bb_getUInt8>
                if (ret != DLMS_ERROR_CODE_OK)
   14f0e:	2800      	cmp	r0, #0
   14f10:	d195      	bne.n	14e3e <cosem_setAssociationLogicalName+0x1c4>
                ret = bb_getUInt8(value->byteArr, &ch);
   14f12:	68b0      	ldr	r0, [r6, #8]
   14f14:	a903      	add	r1, sp, #12
   14f16:	f7f8 f83e 	bl	cf96 <bb_getUInt8>
                if (ret != DLMS_ERROR_CODE_OK || ch != 0x11)
   14f1a:	2800      	cmp	r0, #0
   14f1c:	d18f      	bne.n	14e3e <cosem_setAssociationLogicalName+0x1c4>
   14f1e:	f89d 300c 	ldrb.w	r3, [sp, #12]
   14f22:	2b11      	cmp	r3, #17
   14f24:	d18b      	bne.n	14e3e <cosem_setAssociationLogicalName+0x1c4>
                ret = bb_getUInt8(value->byteArr, &object->applicationContextName.applicationContext);
   14f26:	68b0      	ldr	r0, [r6, #8]
   14f28:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   14f2c:	f7f8 f833 	bl	cf96 <bb_getUInt8>
                if (ret != DLMS_ERROR_CODE_OK)
   14f30:	2800      	cmp	r0, #0
   14f32:	d184      	bne.n	14e3e <cosem_setAssociationLogicalName+0x1c4>
                ret = bb_getUInt8(value->byteArr, &ch);
   14f34:	68b0      	ldr	r0, [r6, #8]
   14f36:	a903      	add	r1, sp, #12
   14f38:	f7f8 f82d 	bl	cf96 <bb_getUInt8>
                if (ret != DLMS_ERROR_CODE_OK || ch != 0x11)
   14f3c:	2800      	cmp	r0, #0
   14f3e:	f47f af7e 	bne.w	14e3e <cosem_setAssociationLogicalName+0x1c4>
   14f42:	f89d 300c 	ldrb.w	r3, [sp, #12]
   14f46:	2b11      	cmp	r3, #17
   14f48:	f47f af79 	bne.w	14e3e <cosem_setAssociationLogicalName+0x1c4>
                ret = bb_getUInt8(value->byteArr, &object->applicationContextName.contextId);
   14f4c:	68b0      	ldr	r0, [r6, #8]
   14f4e:	f105 012d 	add.w	r1, r5, #45	; 0x2d
   14f52:	f7f8 f820 	bl	cf96 <bb_getUInt8>
                if (ret != DLMS_ERROR_CODE_OK)
   14f56:	4604      	mov	r4, r0
   14f58:	2800      	cmp	r0, #0
   14f5a:	f43f aea0 	beq.w	14c9e <cosem_setAssociationLogicalName+0x24>
   14f5e:	e76e      	b.n	14e3e <cosem_setAssociationLogicalName+0x1c4>
        else if (value->vt == DLMS_DATA_TYPE_STRUCTURE)
   14f60:	f1b8 0f02 	cmp.w	r8, #2
   14f64:	f040 80b7 	bne.w	150d6 <cosem_setAssociationLogicalName+0x45c>
            ret = va_getByIndex(value->Arr, 0, &tmp);
   14f68:	6898      	ldr	r0, [r3, #8]
   14f6a:	aa01      	add	r2, sp, #4
   14f6c:	2100      	movs	r1, #0
   14f6e:	f005 f998 	bl	1a2a2 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   14f72:	4604      	mov	r4, r0
   14f74:	2800      	cmp	r0, #0
   14f76:	f47f ae92 	bne.w	14c9e <cosem_setAssociationLogicalName+0x24>
            object->applicationContextName.jointIsoCtt = (unsigned char)var_toInteger(tmp);
   14f7a:	9801      	ldr	r0, [sp, #4]
   14f7c:	f005 fb0b 	bl	1a596 <var_toInteger>
   14f80:	f885 0026 	strb.w	r0, [r5, #38]	; 0x26
            ret = va_getByIndex(value->Arr, 1, &tmp);
   14f84:	68b0      	ldr	r0, [r6, #8]
   14f86:	aa01      	add	r2, sp, #4
   14f88:	2101      	movs	r1, #1
   14f8a:	f005 f98a 	bl	1a2a2 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   14f8e:	4604      	mov	r4, r0
   14f90:	2800      	cmp	r0, #0
   14f92:	f47f ae84 	bne.w	14c9e <cosem_setAssociationLogicalName+0x24>
            object->applicationContextName.country = (unsigned char)var_toInteger(tmp);
   14f96:	9801      	ldr	r0, [sp, #4]
   14f98:	f005 fafd 	bl	1a596 <var_toInteger>
   14f9c:	f885 0027 	strb.w	r0, [r5, #39]	; 0x27
            ret = va_getByIndex(value->Arr, 2, &tmp);
   14fa0:	68b0      	ldr	r0, [r6, #8]
   14fa2:	aa01      	add	r2, sp, #4
   14fa4:	4641      	mov	r1, r8
   14fa6:	f005 f97c 	bl	1a2a2 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   14faa:	4604      	mov	r4, r0
   14fac:	2800      	cmp	r0, #0
   14fae:	f47f ae76 	bne.w	14c9e <cosem_setAssociationLogicalName+0x24>
            object->applicationContextName.countryName = (uint16_t)var_toInteger(tmp);
   14fb2:	9801      	ldr	r0, [sp, #4]
   14fb4:	f005 faef 	bl	1a596 <var_toInteger>
            ret = va_getByIndex(value->Arr, 3, &tmp);
   14fb8:	aa01      	add	r2, sp, #4
            object->applicationContextName.countryName = (uint16_t)var_toInteger(tmp);
   14fba:	8528      	strh	r0, [r5, #40]	; 0x28
            ret = va_getByIndex(value->Arr, 3, &tmp);
   14fbc:	2103      	movs	r1, #3
   14fbe:	68b0      	ldr	r0, [r6, #8]
   14fc0:	f005 f96f 	bl	1a2a2 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   14fc4:	4604      	mov	r4, r0
   14fc6:	2800      	cmp	r0, #0
   14fc8:	f47f ae69 	bne.w	14c9e <cosem_setAssociationLogicalName+0x24>
            object->applicationContextName.identifiedOrganization = (unsigned char)var_toInteger(tmp);
   14fcc:	9801      	ldr	r0, [sp, #4]
   14fce:	f005 fae2 	bl	1a596 <var_toInteger>
   14fd2:	f885 002a 	strb.w	r0, [r5, #42]	; 0x2a
            ret = va_getByIndex(value->Arr, 4, &tmp);
   14fd6:	68b0      	ldr	r0, [r6, #8]
   14fd8:	aa01      	add	r2, sp, #4
   14fda:	4639      	mov	r1, r7
   14fdc:	f005 f961 	bl	1a2a2 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   14fe0:	4604      	mov	r4, r0
   14fe2:	2800      	cmp	r0, #0
   14fe4:	f47f ae5b 	bne.w	14c9e <cosem_setAssociationLogicalName+0x24>
            object->applicationContextName.dlmsUA = (unsigned char)var_toInteger(tmp);
   14fe8:	9801      	ldr	r0, [sp, #4]
   14fea:	f005 fad4 	bl	1a596 <var_toInteger>
   14fee:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
            ret = va_getByIndex(value->Arr, 5, &tmp);
   14ff2:	68b0      	ldr	r0, [r6, #8]
   14ff4:	aa01      	add	r2, sp, #4
   14ff6:	2105      	movs	r1, #5
   14ff8:	f005 f953 	bl	1a2a2 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   14ffc:	4604      	mov	r4, r0
   14ffe:	2800      	cmp	r0, #0
   15000:	f47f ae4d 	bne.w	14c9e <cosem_setAssociationLogicalName+0x24>
            object->applicationContextName.applicationContext = (unsigned char)var_toInteger(tmp);
   15004:	9801      	ldr	r0, [sp, #4]
   15006:	f005 fac6 	bl	1a596 <var_toInteger>
   1500a:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
            ret = va_getByIndex(value->Arr, 6, &tmp);
   1500e:	68b0      	ldr	r0, [r6, #8]
   15010:	aa01      	add	r2, sp, #4
   15012:	2106      	movs	r1, #6
   15014:	f005 f945 	bl	1a2a2 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   15018:	4604      	mov	r4, r0
   1501a:	2800      	cmp	r0, #0
   1501c:	f47f ae3f 	bne.w	14c9e <cosem_setAssociationLogicalName+0x24>
            object->applicationContextName.contextId = (unsigned char)var_toInteger(tmp);
   15020:	9801      	ldr	r0, [sp, #4]
   15022:	f005 fab8 	bl	1a596 <var_toInteger>
   15026:	f885 002d 	strb.w	r0, [r5, #45]	; 0x2d
   1502a:	e638      	b.n	14c9e <cosem_setAssociationLogicalName+0x24>
    else if (index == 5)
   1502c:	2a05      	cmp	r2, #5
   1502e:	d15a      	bne.n	150e6 <cosem_setAssociationLogicalName+0x46c>
        ret = va_getByIndex(value->Arr, 0, &tmp);
   15030:	6898      	ldr	r0, [r3, #8]
   15032:	aa01      	add	r2, sp, #4
   15034:	2100      	movs	r1, #0
   15036:	f005 f934 	bl	1a2a2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   1503a:	4604      	mov	r4, r0
   1503c:	2800      	cmp	r0, #0
   1503e:	f47f ae2e 	bne.w	14c9e <cosem_setAssociationLogicalName+0x24>
        object->xDLMSContextInfo.conformance = (DLMS_CONFORMANCE)var_toInteger(tmp);
   15042:	9801      	ldr	r0, [sp, #4]
   15044:	f005 faa7 	bl	1a596 <var_toInteger>
        ret = va_getByIndex(value->Arr, 1, &tmp);
   15048:	aa01      	add	r2, sp, #4
        object->xDLMSContextInfo.conformance = (DLMS_CONFORMANCE)var_toInteger(tmp);
   1504a:	6328      	str	r0, [r5, #48]	; 0x30
        ret = va_getByIndex(value->Arr, 1, &tmp);
   1504c:	2101      	movs	r1, #1
   1504e:	68b0      	ldr	r0, [r6, #8]
   15050:	f005 f927 	bl	1a2a2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   15054:	4604      	mov	r4, r0
   15056:	2800      	cmp	r0, #0
   15058:	f47f ae21 	bne.w	14c9e <cosem_setAssociationLogicalName+0x24>
        object->xDLMSContextInfo.maxReceivePduSize = (uint16_t)var_toInteger(tmp);
   1505c:	9801      	ldr	r0, [sp, #4]
   1505e:	f005 fa9a 	bl	1a596 <var_toInteger>
        ret = va_getByIndex(value->Arr, 2, &tmp);
   15062:	aa01      	add	r2, sp, #4
        object->xDLMSContextInfo.maxReceivePduSize = (uint16_t)var_toInteger(tmp);
   15064:	86a8      	strh	r0, [r5, #52]	; 0x34
        ret = va_getByIndex(value->Arr, 2, &tmp);
   15066:	2102      	movs	r1, #2
   15068:	68b0      	ldr	r0, [r6, #8]
   1506a:	f005 f91a 	bl	1a2a2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   1506e:	4604      	mov	r4, r0
   15070:	2800      	cmp	r0, #0
   15072:	f47f ae14 	bne.w	14c9e <cosem_setAssociationLogicalName+0x24>
        object->xDLMSContextInfo.maxSendPduSize = (uint16_t)var_toInteger(tmp);
   15076:	9801      	ldr	r0, [sp, #4]
   15078:	f005 fa8d 	bl	1a596 <var_toInteger>
        ret = va_getByIndex(value->Arr, 3, &tmp);
   1507c:	aa01      	add	r2, sp, #4
        object->xDLMSContextInfo.maxSendPduSize = (uint16_t)var_toInteger(tmp);
   1507e:	86e8      	strh	r0, [r5, #54]	; 0x36
        ret = va_getByIndex(value->Arr, 3, &tmp);
   15080:	2103      	movs	r1, #3
   15082:	68b0      	ldr	r0, [r6, #8]
   15084:	f005 f90d 	bl	1a2a2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   15088:	4604      	mov	r4, r0
   1508a:	2800      	cmp	r0, #0
   1508c:	f47f ae07 	bne.w	14c9e <cosem_setAssociationLogicalName+0x24>
        object->xDLMSContextInfo.dlmsVersionNumber = (unsigned char)var_toInteger(tmp);
   15090:	9801      	ldr	r0, [sp, #4]
   15092:	f005 fa80 	bl	1a596 <var_toInteger>
   15096:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
        ret = va_getByIndex(value->Arr, 4, &tmp);
   1509a:	68b0      	ldr	r0, [r6, #8]
   1509c:	aa01      	add	r2, sp, #4
   1509e:	2104      	movs	r1, #4
   150a0:	f005 f8ff 	bl	1a2a2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   150a4:	4604      	mov	r4, r0
   150a6:	2800      	cmp	r0, #0
   150a8:	f47f adf9 	bne.w	14c9e <cosem_setAssociationLogicalName+0x24>
        object->xDLMSContextInfo.qualityOfService = (unsigned char)var_toInteger(tmp);
   150ac:	9801      	ldr	r0, [sp, #4]
   150ae:	f005 fa72 	bl	1a596 <var_toInteger>
   150b2:	f885 0039 	strb.w	r0, [r5, #57]	; 0x39
        ret = va_getByIndex(value->Arr, 5, &tmp);
   150b6:	68b0      	ldr	r0, [r6, #8]
   150b8:	aa01      	add	r2, sp, #4
   150ba:	4639      	mov	r1, r7
   150bc:	f005 f8f1 	bl	1a2a2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   150c0:	4604      	mov	r4, r0
   150c2:	2800      	cmp	r0, #0
   150c4:	f47f adeb 	bne.w	14c9e <cosem_setAssociationLogicalName+0x24>
        bb_clear(&object->xDLMSContextInfo.cypheringInfo);
   150c8:	353c      	adds	r5, #60	; 0x3c
   150ca:	4628      	mov	r0, r5
   150cc:	f7f7 ff4d 	bl	cf6a <bb_clear>
        if (tmp->byteArr != NULL)
   150d0:	9b01      	ldr	r3, [sp, #4]
   150d2:	6899      	ldr	r1, [r3, #8]
   150d4:	b909      	cbnz	r1, 150da <cosem_setAssociationLogicalName+0x460>
    int ret = 0, pos = 0;
   150d6:	2400      	movs	r4, #0
   150d8:	e5e1      	b.n	14c9e <cosem_setAssociationLogicalName+0x24>
            bb_set2(&object->xDLMSContextInfo.cypheringInfo, tmp->byteArr, 0, tmp->byteArr->size);
   150da:	88cb      	ldrh	r3, [r1, #6]
   150dc:	2200      	movs	r2, #0
   150de:	4628      	mov	r0, r5
   150e0:	f7f7 fefe 	bl	cee0 <bb_set2>
   150e4:	e5db      	b.n	14c9e <cosem_setAssociationLogicalName+0x24>
    else if (index == 6)
   150e6:	2a06      	cmp	r2, #6
   150e8:	f040 80c9 	bne.w	1527e <cosem_setAssociationLogicalName+0x604>
        if (value->vt == DLMS_DATA_TYPE_OCTET_STRING)
   150ec:	781f      	ldrb	r7, [r3, #0]
   150ee:	2f09      	cmp	r7, #9
   150f0:	d160      	bne.n	151b4 <cosem_setAssociationLogicalName+0x53a>
            if (value->byteArr->data[0] == 0x60)
   150f2:	689b      	ldr	r3, [r3, #8]
   150f4:	681a      	ldr	r2, [r3, #0]
   150f6:	7812      	ldrb	r2, [r2, #0]
   150f8:	2a60      	cmp	r2, #96	; 0x60
   150fa:	d112      	bne.n	15122 <cosem_setAssociationLogicalName+0x4a8>
                object->authenticationMechanismName.jointIsoCtt = 0;
   150fc:	2400      	movs	r4, #0
   150fe:	648c      	str	r4, [r1, #72]	; 0x48
                object->authenticationMechanismName.identifiedOrganization = value->byteArr->data[++pos];
   15100:	681a      	ldr	r2, [r3, #0]
   15102:	78d2      	ldrb	r2, [r2, #3]
   15104:	f881 204c 	strb.w	r2, [r1, #76]	; 0x4c
                object->authenticationMechanismName.dlmsUA = value->byteArr->data[++pos];
   15108:	681a      	ldr	r2, [r3, #0]
   1510a:	7912      	ldrb	r2, [r2, #4]
   1510c:	f881 204d 	strb.w	r2, [r1, #77]	; 0x4d
                object->authenticationMechanismName.authenticationMechanismName = value->byteArr->data[++pos];
   15110:	681a      	ldr	r2, [r3, #0]
   15112:	7952      	ldrb	r2, [r2, #5]
   15114:	f881 204e 	strb.w	r2, [r1, #78]	; 0x4e
                object->authenticationMechanismName.mechanismId = (DLMS_AUTHENTICATION)value->byteArr->data[++pos];
   15118:	681b      	ldr	r3, [r3, #0]
   1511a:	799b      	ldrb	r3, [r3, #6]
                    object->authenticationMechanismName.mechanismId = (DLMS_AUTHENTICATION)ch;
   1511c:	f885 304f 	strb.w	r3, [r5, #79]	; 0x4f
   15120:	e5bd      	b.n	14c9e <cosem_setAssociationLogicalName+0x24>
                if ((ret = cosem_checkStructure(value->byteArr, 7)) == 0 &&
   15122:	2107      	movs	r1, #7
   15124:	4618      	mov	r0, r3
   15126:	f7f8 fb2b 	bl	d780 <cosem_checkStructure>
   1512a:	4604      	mov	r4, r0
   1512c:	2800      	cmp	r0, #0
   1512e:	f47f adb6 	bne.w	14c9e <cosem_setAssociationLogicalName+0x24>
                    (ret = cosem_getUInt8(value->byteArr, &object->authenticationMechanismName.jointIsoCtt)) == 0 &&
   15132:	68b0      	ldr	r0, [r6, #8]
   15134:	f105 0148 	add.w	r1, r5, #72	; 0x48
   15138:	f7f8 fb54 	bl	d7e4 <cosem_getUInt8>
                if ((ret = cosem_checkStructure(value->byteArr, 7)) == 0 &&
   1513c:	4604      	mov	r4, r0
   1513e:	2800      	cmp	r0, #0
   15140:	f47f adad 	bne.w	14c9e <cosem_setAssociationLogicalName+0x24>
                    (ret = cosem_getUInt8(value->byteArr, &object->authenticationMechanismName.country)) == 0 &&
   15144:	68b0      	ldr	r0, [r6, #8]
   15146:	f105 0149 	add.w	r1, r5, #73	; 0x49
   1514a:	f7f8 fb4b 	bl	d7e4 <cosem_getUInt8>
                    (ret = cosem_getUInt8(value->byteArr, &object->authenticationMechanismName.jointIsoCtt)) == 0 &&
   1514e:	4604      	mov	r4, r0
   15150:	2800      	cmp	r0, #0
   15152:	f47f ada4 	bne.w	14c9e <cosem_setAssociationLogicalName+0x24>
                    (ret = cosem_getUInt16(value->byteArr, &object->authenticationMechanismName.countryName)) == 0 &&
   15156:	68b0      	ldr	r0, [r6, #8]
   15158:	f105 014a 	add.w	r1, r5, #74	; 0x4a
   1515c:	f7f8 fb56 	bl	d80c <cosem_getUInt16>
                    (ret = cosem_getUInt8(value->byteArr, &object->authenticationMechanismName.country)) == 0 &&
   15160:	4604      	mov	r4, r0
   15162:	2800      	cmp	r0, #0
   15164:	f47f ad9b 	bne.w	14c9e <cosem_setAssociationLogicalName+0x24>
                    (ret = cosem_getUInt8(value->byteArr, &object->authenticationMechanismName.identifiedOrganization)) == 0 &&
   15168:	68b0      	ldr	r0, [r6, #8]
   1516a:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   1516e:	f7f8 fb39 	bl	d7e4 <cosem_getUInt8>
                    (ret = cosem_getUInt16(value->byteArr, &object->authenticationMechanismName.countryName)) == 0 &&
   15172:	4604      	mov	r4, r0
   15174:	2800      	cmp	r0, #0
   15176:	f47f ad92 	bne.w	14c9e <cosem_setAssociationLogicalName+0x24>
                    (ret = cosem_getUInt8(value->byteArr, &object->authenticationMechanismName.dlmsUA)) == 0 &&
   1517a:	68b0      	ldr	r0, [r6, #8]
   1517c:	f105 014d 	add.w	r1, r5, #77	; 0x4d
   15180:	f7f8 fb30 	bl	d7e4 <cosem_getUInt8>
                    (ret = cosem_getUInt8(value->byteArr, &object->authenticationMechanismName.identifiedOrganization)) == 0 &&
   15184:	4604      	mov	r4, r0
   15186:	2800      	cmp	r0, #0
   15188:	f47f ad89 	bne.w	14c9e <cosem_setAssociationLogicalName+0x24>
                    (ret = cosem_getUInt8(value->byteArr, &object->authenticationMechanismName.authenticationMechanismName)) == 0 &&
   1518c:	68b0      	ldr	r0, [r6, #8]
   1518e:	f105 014e 	add.w	r1, r5, #78	; 0x4e
   15192:	f7f8 fb27 	bl	d7e4 <cosem_getUInt8>
                    (ret = cosem_getUInt8(value->byteArr, &object->authenticationMechanismName.dlmsUA)) == 0 &&
   15196:	4604      	mov	r4, r0
   15198:	2800      	cmp	r0, #0
   1519a:	f47f ad80 	bne.w	14c9e <cosem_setAssociationLogicalName+0x24>
                    (ret = cosem_getUInt8(value->byteArr, &ch)) == 0)
   1519e:	68b0      	ldr	r0, [r6, #8]
   151a0:	a903      	add	r1, sp, #12
   151a2:	f7f8 fb1f 	bl	d7e4 <cosem_getUInt8>
                    (ret = cosem_getUInt8(value->byteArr, &object->authenticationMechanismName.authenticationMechanismName)) == 0 &&
   151a6:	4604      	mov	r4, r0
   151a8:	2800      	cmp	r0, #0
   151aa:	f47f ad78 	bne.w	14c9e <cosem_setAssociationLogicalName+0x24>
                    object->authenticationMechanismName.mechanismId = (DLMS_AUTHENTICATION)ch;
   151ae:	f89d 300c 	ldrb.w	r3, [sp, #12]
   151b2:	e7b3      	b.n	1511c <cosem_setAssociationLogicalName+0x4a2>
        else  if (value->vt == DLMS_DATA_TYPE_STRUCTURE)
   151b4:	2f02      	cmp	r7, #2
   151b6:	d18e      	bne.n	150d6 <cosem_setAssociationLogicalName+0x45c>
            ret = va_getByIndex(value->Arr, 0, &tmp);
   151b8:	6898      	ldr	r0, [r3, #8]
   151ba:	aa01      	add	r2, sp, #4
   151bc:	2100      	movs	r1, #0
   151be:	f005 f870 	bl	1a2a2 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   151c2:	4604      	mov	r4, r0
   151c4:	2800      	cmp	r0, #0
   151c6:	f47f ad6a 	bne.w	14c9e <cosem_setAssociationLogicalName+0x24>
            object->authenticationMechanismName.jointIsoCtt = (unsigned char)var_toInteger(tmp);
   151ca:	9801      	ldr	r0, [sp, #4]
   151cc:	f005 f9e3 	bl	1a596 <var_toInteger>
   151d0:	f885 0048 	strb.w	r0, [r5, #72]	; 0x48
            ret = va_getByIndex(value->Arr, 1, &tmp);
   151d4:	68b0      	ldr	r0, [r6, #8]
   151d6:	aa01      	add	r2, sp, #4
   151d8:	2101      	movs	r1, #1
   151da:	f005 f862 	bl	1a2a2 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   151de:	4604      	mov	r4, r0
   151e0:	2800      	cmp	r0, #0
   151e2:	f47f ad5c 	bne.w	14c9e <cosem_setAssociationLogicalName+0x24>
            object->authenticationMechanismName.country = (unsigned char)var_toInteger(tmp);
   151e6:	9801      	ldr	r0, [sp, #4]
   151e8:	f005 f9d5 	bl	1a596 <var_toInteger>
   151ec:	f885 0049 	strb.w	r0, [r5, #73]	; 0x49
            ret = va_getByIndex(value->Arr, 2, &tmp);
   151f0:	68b0      	ldr	r0, [r6, #8]
   151f2:	aa01      	add	r2, sp, #4
   151f4:	4639      	mov	r1, r7
   151f6:	f005 f854 	bl	1a2a2 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   151fa:	4604      	mov	r4, r0
   151fc:	2800      	cmp	r0, #0
   151fe:	f47f ad4e 	bne.w	14c9e <cosem_setAssociationLogicalName+0x24>
            object->authenticationMechanismName.countryName = (uint16_t)var_toInteger(tmp);
   15202:	9801      	ldr	r0, [sp, #4]
   15204:	f005 f9c7 	bl	1a596 <var_toInteger>
            ret = va_getByIndex(value->Arr, 3, &tmp);
   15208:	aa01      	add	r2, sp, #4
            object->authenticationMechanismName.countryName = (uint16_t)var_toInteger(tmp);
   1520a:	f8a5 004a 	strh.w	r0, [r5, #74]	; 0x4a
            ret = va_getByIndex(value->Arr, 3, &tmp);
   1520e:	2103      	movs	r1, #3
   15210:	68b0      	ldr	r0, [r6, #8]
   15212:	f005 f846 	bl	1a2a2 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   15216:	4604      	mov	r4, r0
   15218:	2800      	cmp	r0, #0
   1521a:	f47f ad40 	bne.w	14c9e <cosem_setAssociationLogicalName+0x24>
            object->authenticationMechanismName.identifiedOrganization = (unsigned char)var_toInteger(tmp);
   1521e:	9801      	ldr	r0, [sp, #4]
   15220:	f005 f9b9 	bl	1a596 <var_toInteger>
   15224:	f885 004c 	strb.w	r0, [r5, #76]	; 0x4c
            ret = va_getByIndex(value->Arr, 4, &tmp);
   15228:	68b0      	ldr	r0, [r6, #8]
   1522a:	aa01      	add	r2, sp, #4
   1522c:	2104      	movs	r1, #4
   1522e:	f005 f838 	bl	1a2a2 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   15232:	4604      	mov	r4, r0
   15234:	2800      	cmp	r0, #0
   15236:	f47f ad32 	bne.w	14c9e <cosem_setAssociationLogicalName+0x24>
            object->authenticationMechanismName.dlmsUA = (unsigned char)var_toInteger(tmp);
   1523a:	9801      	ldr	r0, [sp, #4]
   1523c:	f005 f9ab 	bl	1a596 <var_toInteger>
   15240:	f885 004d 	strb.w	r0, [r5, #77]	; 0x4d
            ret = va_getByIndex(value->Arr, 5, &tmp);
   15244:	68b0      	ldr	r0, [r6, #8]
   15246:	aa01      	add	r2, sp, #4
   15248:	2105      	movs	r1, #5
   1524a:	f005 f82a 	bl	1a2a2 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   1524e:	4604      	mov	r4, r0
   15250:	2800      	cmp	r0, #0
   15252:	f47f ad24 	bne.w	14c9e <cosem_setAssociationLogicalName+0x24>
            object->authenticationMechanismName.authenticationMechanismName = (unsigned char)var_toInteger(tmp);
   15256:	9801      	ldr	r0, [sp, #4]
   15258:	f005 f99d 	bl	1a596 <var_toInteger>
   1525c:	f885 004e 	strb.w	r0, [r5, #78]	; 0x4e
            ret = va_getByIndex(value->Arr, 6, &tmp);
   15260:	68b0      	ldr	r0, [r6, #8]
   15262:	aa01      	add	r2, sp, #4
   15264:	2106      	movs	r1, #6
   15266:	f005 f81c 	bl	1a2a2 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   1526a:	4604      	mov	r4, r0
   1526c:	2800      	cmp	r0, #0
   1526e:	f47f ad16 	bne.w	14c9e <cosem_setAssociationLogicalName+0x24>
            object->authenticationMechanismName.mechanismId = (DLMS_AUTHENTICATION)var_toInteger(tmp);
   15272:	9801      	ldr	r0, [sp, #4]
   15274:	f005 f98f 	bl	1a596 <var_toInteger>
   15278:	f885 004f 	strb.w	r0, [r5, #79]	; 0x4f
   1527c:	e50f      	b.n	14c9e <cosem_setAssociationLogicalName+0x24>
    else if (index == 7)
   1527e:	2a07      	cmp	r2, #7
   15280:	d111      	bne.n	152a6 <cosem_setAssociationLogicalName+0x62c>
        bb_clear(&object->secret);
   15282:	3550      	adds	r5, #80	; 0x50
   15284:	4628      	mov	r0, r5
   15286:	f7f7 fe70 	bl	cf6a <bb_clear>
        if (value->byteArr != NULL)
   1528a:	68b4      	ldr	r4, [r6, #8]
   1528c:	2c00      	cmp	r4, #0
   1528e:	f43f af22 	beq.w	150d6 <cosem_setAssociationLogicalName+0x45c>
            ret = bb_set2(&object->secret, value->byteArr, 0, bb_size(value->byteArr));
   15292:	4620      	mov	r0, r4
   15294:	f7f7 fca3 	bl	cbde <bb_size>
   15298:	2200      	movs	r2, #0
   1529a:	4603      	mov	r3, r0
   1529c:	4621      	mov	r1, r4
   1529e:	4628      	mov	r0, r5
   152a0:	f7f7 fe1e 	bl	cee0 <bb_set2>
   152a4:	e5c5      	b.n	14e32 <cosem_setAssociationLogicalName+0x1b8>
    else if (index == 8)
   152a6:	2a08      	cmp	r2, #8
   152a8:	d104      	bne.n	152b4 <cosem_setAssociationLogicalName+0x63a>
        object->associationStatus = (DLMS_ASSOCIATION_STATUS)var_toInteger(value);
   152aa:	4618      	mov	r0, r3
   152ac:	f005 f973 	bl	1a596 <var_toInteger>
   152b0:	7428      	strb	r0, [r5, #16]
   152b2:	e710      	b.n	150d6 <cosem_setAssociationLogicalName+0x45c>
    else if (index == 9)
   152b4:	2a09      	cmp	r2, #9
   152b6:	d10f      	bne.n	152d8 <cosem_setAssociationLogicalName+0x65e>
        if (bb_size(value->byteArr) != 6)
   152b8:	6898      	ldr	r0, [r3, #8]
   152ba:	f7f7 fc90 	bl	cbde <bb_size>
   152be:	2806      	cmp	r0, #6
   152c0:	f040 8093 	bne.w	153ea <cosem_setAssociationLogicalName+0x770>
        ret = oa_findByLN(&settings->objects, DLMS_OBJECT_TYPE_SECURITY_SETUP, value->byteArr->data, (gxObject**)&object->securitySetup);
   152c4:	68b2      	ldr	r2, [r6, #8]
   152c6:	f105 035c 	add.w	r3, r5, #92	; 0x5c
   152ca:	6812      	ldr	r2, [r2, #0]
   152cc:	2140      	movs	r1, #64	; 0x40
   152ce:	f108 0098 	add.w	r0, r8, #152	; 0x98
   152d2:	f004 fda3 	bl	19e1c <oa_findByLN>
   152d6:	e5ac      	b.n	14e32 <cosem_setAssociationLogicalName+0x1b8>
    else if (index == 10)
   152d8:	2a0a      	cmp	r2, #10
   152da:	d14f      	bne.n	1537c <cosem_setAssociationLogicalName+0x702>
        obj_clearUserList(&object->userList);
   152dc:	3560      	adds	r5, #96	; 0x60
   152de:	4628      	mov	r0, r5
   152e0:	f7fe fcd4 	bl	13c8c <obj_clearUserList>
        if (value->Arr != NULL)
   152e4:	68b3      	ldr	r3, [r6, #8]
   152e6:	2b00      	cmp	r3, #0
   152e8:	f43f aef5 	beq.w	150d6 <cosem_setAssociationLogicalName+0x45c>
            for (pos = 0; pos != value->Arr->size; ++pos)
   152ec:	f04f 0800 	mov.w	r8, #0
   152f0:	e024      	b.n	1533c <cosem_setAssociationLogicalName+0x6c2>
                it->key = (unsigned char)var_toInteger(tmp2);
   152f2:	9802      	ldr	r0, [sp, #8]
   152f4:	f005 f94f 	bl	1a596 <var_toInteger>
                ret = va_getByIndex(tmp->Arr, 1, &tmp2);
   152f8:	9b01      	ldr	r3, [sp, #4]
                it->key = (unsigned char)var_toInteger(tmp2);
   152fa:	7038      	strb	r0, [r7, #0]
                ret = va_getByIndex(tmp->Arr, 1, &tmp2);
   152fc:	6898      	ldr	r0, [r3, #8]
   152fe:	aa02      	add	r2, sp, #8
   15300:	2101      	movs	r1, #1
   15302:	f004 ffce 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   15306:	4604      	mov	r4, r0
   15308:	2800      	cmp	r0, #0
   1530a:	f47f acc8 	bne.w	14c9e <cosem_setAssociationLogicalName+0x24>
                it->value = (char*)gxmalloc(tmp->strVal->size + 1);
   1530e:	9b01      	ldr	r3, [sp, #4]
   15310:	689b      	ldr	r3, [r3, #8]
   15312:	88d8      	ldrh	r0, [r3, #6]
   15314:	3001      	adds	r0, #1
   15316:	f7f6 fc4d 	bl	bbb4 <malloc>
   1531a:	6078      	str	r0, [r7, #4]
                if (it->value == NULL)
   1531c:	b358      	cbz	r0, 15376 <cosem_setAssociationLogicalName+0x6fc>
                ((char*)it->value)[tmp->strVal->size] = 0;
   1531e:	9a01      	ldr	r2, [sp, #4]
   15320:	6891      	ldr	r1, [r2, #8]
   15322:	88c9      	ldrh	r1, [r1, #6]
   15324:	5444      	strb	r4, [r0, r1]
                memcpy(it->value, tmp->strVal->data, tmp->strVal->size);
   15326:	6893      	ldr	r3, [r2, #8]
   15328:	6819      	ldr	r1, [r3, #0]
   1532a:	88da      	ldrh	r2, [r3, #6]
   1532c:	f006 fed8 	bl	1c0e0 <memcpy>
                arr_push(&object->userList, it);
   15330:	4639      	mov	r1, r7
   15332:	4628      	mov	r0, r5
   15334:	f7fa ffea 	bl	1030c <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   15338:	f108 0801 	add.w	r8, r8, #1
   1533c:	68b0      	ldr	r0, [r6, #8]
   1533e:	88c3      	ldrh	r3, [r0, #6]
   15340:	4543      	cmp	r3, r8
   15342:	f43f aec8 	beq.w	150d6 <cosem_setAssociationLogicalName+0x45c>
                ret = va_getByIndex(value->Arr, pos, &tmp);
   15346:	aa01      	add	r2, sp, #4
   15348:	4641      	mov	r1, r8
   1534a:	f004 ffaa 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   1534e:	4604      	mov	r4, r0
   15350:	2800      	cmp	r0, #0
   15352:	f47f aca4 	bne.w	14c9e <cosem_setAssociationLogicalName+0x24>
                ret = va_getByIndex(tmp->Arr, 0, &tmp2);
   15356:	9b01      	ldr	r3, [sp, #4]
   15358:	4601      	mov	r1, r0
   1535a:	aa02      	add	r2, sp, #8
   1535c:	6898      	ldr	r0, [r3, #8]
   1535e:	f004 ffa0 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   15362:	4604      	mov	r4, r0
   15364:	2800      	cmp	r0, #0
   15366:	f47f ac9a 	bne.w	14c9e <cosem_setAssociationLogicalName+0x24>
                it = (gxKey2*)gxmalloc(sizeof(gxKey2));
   1536a:	2008      	movs	r0, #8
   1536c:	f7f6 fc22 	bl	bbb4 <malloc>
                if (it == NULL)
   15370:	4607      	mov	r7, r0
   15372:	2800      	cmp	r0, #0
   15374:	d1bd      	bne.n	152f2 <cosem_setAssociationLogicalName+0x678>
                    return DLMS_ERROR_CODE_OUTOFMEMORY;
   15376:	f44f 7482 	mov.w	r4, #260	; 0x104
   1537a:	e490      	b.n	14c9e <cosem_setAssociationLogicalName+0x24>
    else if (index == 11)
   1537c:	2a0b      	cmp	r2, #11
   1537e:	f47f ad5e 	bne.w	14e3e <cosem_setAssociationLogicalName+0x1c4>
        if (object->currentUser.value != NULL)
   15382:	6f08      	ldr	r0, [r1, #112]	; 0x70
   15384:	b108      	cbz	r0, 1538a <cosem_setAssociationLogicalName+0x710>
            gxfree(object->currentUser.value);
   15386:	f7f6 fc1d 	bl	bbc4 <free>
        if (value->Arr->size == 2)
   1538a:	68b0      	ldr	r0, [r6, #8]
   1538c:	88c3      	ldrh	r3, [r0, #6]
   1538e:	2b02      	cmp	r3, #2
   15390:	f47f ad55 	bne.w	14e3e <cosem_setAssociationLogicalName+0x1c4>
            ret = va_getByIndex(value->Arr, 0, &tmp);
   15394:	aa01      	add	r2, sp, #4
   15396:	2100      	movs	r1, #0
   15398:	f004 ff83 	bl	1a2a2 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   1539c:	4604      	mov	r4, r0
   1539e:	2800      	cmp	r0, #0
   153a0:	f47f ac7d 	bne.w	14c9e <cosem_setAssociationLogicalName+0x24>
            object->currentUser.key = (unsigned char)var_toInteger(tmp);
   153a4:	9801      	ldr	r0, [sp, #4]
   153a6:	f005 f8f6 	bl	1a596 <var_toInteger>
   153aa:	f885 006c 	strb.w	r0, [r5, #108]	; 0x6c
            ret = va_getByIndex(value->Arr, 1, &tmp);
   153ae:	68b0      	ldr	r0, [r6, #8]
   153b0:	aa01      	add	r2, sp, #4
   153b2:	2101      	movs	r1, #1
   153b4:	f004 ff75 	bl	1a2a2 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   153b8:	4604      	mov	r4, r0
   153ba:	2800      	cmp	r0, #0
   153bc:	f47f ac6f 	bne.w	14c9e <cosem_setAssociationLogicalName+0x24>
            if (tmp->strVal != NULL && tmp->strVal->size != 0)
   153c0:	9b01      	ldr	r3, [sp, #4]
   153c2:	689b      	ldr	r3, [r3, #8]
   153c4:	2b00      	cmp	r3, #0
   153c6:	f43f ae86 	beq.w	150d6 <cosem_setAssociationLogicalName+0x45c>
   153ca:	88d8      	ldrh	r0, [r3, #6]
   153cc:	2800      	cmp	r0, #0
   153ce:	f43f ae82 	beq.w	150d6 <cosem_setAssociationLogicalName+0x45c>
                object->currentUser.value = gxmalloc(tmp->strVal->size + 1);
   153d2:	3001      	adds	r0, #1
   153d4:	f7f6 fbee 	bl	bbb4 <malloc>
   153d8:	6728      	str	r0, [r5, #112]	; 0x70
                if (object->currentUser.value == NULL)
   153da:	2800      	cmp	r0, #0
   153dc:	d0cb      	beq.n	15376 <cosem_setAssociationLogicalName+0x6fc>
                memcpy(object->currentUser.value, tmp->strVal, tmp->strVal->size);
   153de:	9b01      	ldr	r3, [sp, #4]
   153e0:	6899      	ldr	r1, [r3, #8]
   153e2:	88ca      	ldrh	r2, [r1, #6]
   153e4:	f006 fe7c 	bl	1c0e0 <memcpy>
   153e8:	e459      	b.n	14c9e <cosem_setAssociationLogicalName+0x24>
            return DLMS_ERROR_CODE_UNMATCH_TYPE;
   153ea:	240c      	movs	r4, #12
   153ec:	e457      	b.n	14c9e <cosem_setAssociationLogicalName+0x24>

000153ee <updateSNAccessRights>:
{
   153ee:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    gxObject* obj = NULL;
   153f0:	2400      	movs	r4, #0
{
   153f2:	4606      	mov	r6, r0
   153f4:	460d      	mov	r5, r1
    gxObject* obj = NULL;
   153f6:	9403      	str	r4, [sp, #12]
    for (pos = 0; pos != data->size; ++pos)
   153f8:	88eb      	ldrh	r3, [r5, #6]
   153fa:	42a3      	cmp	r3, r4
   153fc:	d101      	bne.n	15402 <updateSNAccessRights+0x14>
    return DLMS_ERROR_CODE_OK;
   153fe:	2000      	movs	r0, #0
   15400:	e01f      	b.n	15442 <updateSNAccessRights+0x54>
        ret = va_getByIndex(data, pos, &it);
   15402:	aa01      	add	r2, sp, #4
   15404:	4621      	mov	r1, r4
   15406:	4628      	mov	r0, r5
   15408:	f004 ff4b 	bl	1a2a2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   1540c:	b9c8      	cbnz	r0, 15442 <updateSNAccessRights+0x54>
        ret = va_getByIndex(it->Arr, 0, &tmp);
   1540e:	9b01      	ldr	r3, [sp, #4]
   15410:	4601      	mov	r1, r0
   15412:	aa02      	add	r2, sp, #8
   15414:	6898      	ldr	r0, [r3, #8]
   15416:	f004 ff44 	bl	1a2a2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   1541a:	b990      	cbnz	r0, 15442 <updateSNAccessRights+0x54>
        sn = (uint16_t)var_toInteger(tmp);
   1541c:	9802      	ldr	r0, [sp, #8]
   1541e:	f005 f8ba 	bl	1a596 <var_toInteger>
        ret = oa_findBySN(objectList, sn, &obj);
   15422:	aa03      	add	r2, sp, #12
   15424:	b281      	uxth	r1, r0
   15426:	4630      	mov	r0, r6
   15428:	f004 fcdd 	bl	19de6 <oa_findBySN>
        if (ret != DLMS_ERROR_CODE_OK)
   1542c:	b948      	cbnz	r0, 15442 <updateSNAccessRights+0x54>
        if (obj != NULL)
   1542e:	9803      	ldr	r0, [sp, #12]
   15430:	b908      	cbnz	r0, 15436 <updateSNAccessRights+0x48>
    for (pos = 0; pos != data->size; ++pos)
   15432:	3401      	adds	r4, #1
   15434:	e7e0      	b.n	153f8 <updateSNAccessRights+0xa>
            ret = cosem_updateAttributeAccessModes(obj, it->Arr);
   15436:	9b01      	ldr	r3, [sp, #4]
   15438:	6899      	ldr	r1, [r3, #8]
   1543a:	f7ff fb6b 	bl	14b14 <cosem_updateAttributeAccessModes>
            if (ret != DLMS_ERROR_CODE_OK)
   1543e:	2800      	cmp	r0, #0
   15440:	d0f7      	beq.n	15432 <updateSNAccessRights+0x44>
}
   15442:	b004      	add	sp, #16
   15444:	bd70      	pop	{r4, r5, r6, pc}

00015446 <cosem_parseSNObjects>:
{
   15446:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1544a:	b08d      	sub	sp, #52	; 0x34
   1544c:	460d      	mov	r5, r1
    dlmsVARIANT* it1 = NULL, * it2 = NULL, * it3 = NULL, * ln = NULL;
   1544e:	2400      	movs	r4, #0
{
   15450:	4680      	mov	r8, r0
    var_init(&value);
   15452:	a808      	add	r0, sp, #32
    dlmsVARIANT* it1 = NULL, * it2 = NULL, * it3 = NULL, * ln = NULL;
   15454:	e9cd 4401 	strd	r4, r4, [sp, #4]
   15458:	e9cd 4403 	strd	r4, r4, [sp, #12]
{
   1545c:	4617      	mov	r7, r2
    var_init(&value);
   1545e:	f004 fd46 	bl	19eee <var_init>
    if ((ret = bb_getUInt8(data, &size)) != DLMS_ERROR_CODE_OK)
   15462:	f10d 0101 	add.w	r1, sp, #1
   15466:	4628      	mov	r0, r5
   15468:	f7f7 fd95 	bl	cf96 <bb_getUInt8>
   1546c:	bb90      	cbnz	r0, 154d4 <cosem_parseSNObjects+0x8e>
    if (size != 0x01)
   1546e:	f89d 3001 	ldrb.w	r3, [sp, #1]
   15472:	2b01      	cmp	r3, #1
   15474:	f040 808e 	bne.w	15594 <cosem_parseSNObjects+0x14e>
    if ((ret = hlp_getObjectCount2(data, &count)) != 0)
   15478:	f10d 0102 	add.w	r1, sp, #2
   1547c:	4628      	mov	r0, r5
   1547e:	f004 f9d8 	bl	19832 <hlp_getObjectCount2>
   15482:	4604      	mov	r4, r0
   15484:	bb30      	cbnz	r0, 154d4 <cosem_parseSNObjects+0x8e>
    oa_capacity(objects, (uint16_t)count);
   15486:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1548a:	4638      	mov	r0, r7
   1548c:	f004 fc4b 	bl	19d26 <oa_capacity>
    for (pos = 0; pos != count; ++pos)
   15490:	4626      	mov	r6, r4
   15492:	46a2      	mov	sl, r4
   15494:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   15498:	b2b3      	uxth	r3, r6
   1549a:	429a      	cmp	r2, r3
   1549c:	d101      	bne.n	154a2 <cosem_parseSNObjects+0x5c>
   1549e:	2400      	movs	r4, #0
   154a0:	e015      	b.n	154ce <cosem_parseSNObjects+0x88>
        var_clear(&value);
   154a2:	a808      	add	r0, sp, #32
   154a4:	f004 fe7f 	bl	1a1a6 <var_clear>
        di_init(&info);
   154a8:	a806      	add	r0, sp, #24
        object = NULL;
   154aa:	f8cd a014 	str.w	sl, [sp, #20]
        di_init(&info);
   154ae:	f7f8 fc2c 	bl	dd0a <di_init>
        if ((ret = dlms_getData(data, &info, &value)) != 0)
   154b2:	aa08      	add	r2, sp, #32
   154b4:	a906      	add	r1, sp, #24
   154b6:	4628      	mov	r0, r5
   154b8:	f7f9 f8b7 	bl	e62a <dlms_getData>
   154bc:	4604      	mov	r4, r0
   154be:	b930      	cbnz	r0, 154ce <cosem_parseSNObjects+0x88>
        if (value.vt != DLMS_DATA_TYPE_STRUCTURE || value.Arr->size != 4)
   154c0:	f89d 9020 	ldrb.w	r9, [sp, #32]
   154c4:	f1b9 0f02 	cmp.w	r9, #2
   154c8:	d008      	beq.n	154dc <cosem_parseSNObjects+0x96>
            ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   154ca:	f44f 7481 	mov.w	r4, #258	; 0x102
    var_clear(&value);
   154ce:	a808      	add	r0, sp, #32
   154d0:	f004 fe69 	bl	1a1a6 <var_clear>
}
   154d4:	4620      	mov	r0, r4
   154d6:	b00d      	add	sp, #52	; 0x34
   154d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (value.vt != DLMS_DATA_TYPE_STRUCTURE || value.Arr->size != 4)
   154dc:	980a      	ldr	r0, [sp, #40]	; 0x28
   154de:	88c3      	ldrh	r3, [r0, #6]
   154e0:	2b04      	cmp	r3, #4
   154e2:	d1f2      	bne.n	154ca <cosem_parseSNObjects+0x84>
        if ((ret = va_getByIndex(value.Arr, 0, &it1)) != 0 ||
   154e4:	4621      	mov	r1, r4
   154e6:	aa01      	add	r2, sp, #4
   154e8:	f004 fedb 	bl	1a2a2 <va_getByIndex>
   154ec:	4604      	mov	r4, r0
   154ee:	2800      	cmp	r0, #0
   154f0:	d1ed      	bne.n	154ce <cosem_parseSNObjects+0x88>
            (ret = va_getByIndex(value.Arr, 1, &it2)) != 0 ||
   154f2:	980a      	ldr	r0, [sp, #40]	; 0x28
   154f4:	aa02      	add	r2, sp, #8
   154f6:	2101      	movs	r1, #1
   154f8:	f004 fed3 	bl	1a2a2 <va_getByIndex>
        if ((ret = va_getByIndex(value.Arr, 0, &it1)) != 0 ||
   154fc:	4604      	mov	r4, r0
   154fe:	2800      	cmp	r0, #0
   15500:	d1e5      	bne.n	154ce <cosem_parseSNObjects+0x88>
            (ret = va_getByIndex(value.Arr, 2, &it3)) != 0 ||
   15502:	980a      	ldr	r0, [sp, #40]	; 0x28
   15504:	aa03      	add	r2, sp, #12
   15506:	4649      	mov	r1, r9
   15508:	f004 fecb 	bl	1a2a2 <va_getByIndex>
            (ret = va_getByIndex(value.Arr, 1, &it2)) != 0 ||
   1550c:	4604      	mov	r4, r0
   1550e:	2800      	cmp	r0, #0
   15510:	d1dd      	bne.n	154ce <cosem_parseSNObjects+0x88>
            (ret = va_getByIndex(value.Arr, 3, &ln)) != 0)
   15512:	980a      	ldr	r0, [sp, #40]	; 0x28
   15514:	aa04      	add	r2, sp, #16
   15516:	2103      	movs	r1, #3
   15518:	f004 fec3 	bl	1a2a2 <va_getByIndex>
            (ret = va_getByIndex(value.Arr, 2, &it3)) != 0 ||
   1551c:	4604      	mov	r4, r0
   1551e:	2800      	cmp	r0, #0
   15520:	d1d5      	bne.n	154ce <cosem_parseSNObjects+0x88>
        if (it1->vt != DLMS_DATA_TYPE_INT16 ||
   15522:	9801      	ldr	r0, [sp, #4]
   15524:	7803      	ldrb	r3, [r0, #0]
   15526:	2b10      	cmp	r3, #16
   15528:	d1cf      	bne.n	154ca <cosem_parseSNObjects+0x84>
            it2->vt != DLMS_DATA_TYPE_UINT16 ||
   1552a:	9b02      	ldr	r3, [sp, #8]
        if (it1->vt != DLMS_DATA_TYPE_INT16 ||
   1552c:	781b      	ldrb	r3, [r3, #0]
   1552e:	2b12      	cmp	r3, #18
   15530:	d1cb      	bne.n	154ca <cosem_parseSNObjects+0x84>
            it3->vt != DLMS_DATA_TYPE_UINT8 ||
   15532:	9b03      	ldr	r3, [sp, #12]
            it2->vt != DLMS_DATA_TYPE_UINT16 ||
   15534:	781b      	ldrb	r3, [r3, #0]
   15536:	2b11      	cmp	r3, #17
   15538:	d1c7      	bne.n	154ca <cosem_parseSNObjects+0x84>
            ln->vt != DLMS_DATA_TYPE_OCTET_STRING)
   1553a:	9b04      	ldr	r3, [sp, #16]
            it3->vt != DLMS_DATA_TYPE_UINT8 ||
   1553c:	781b      	ldrb	r3, [r3, #0]
   1553e:	2b09      	cmp	r3, #9
   15540:	d1c3      	bne.n	154ca <cosem_parseSNObjects+0x84>
        sn = (short)var_toInteger(it1);
   15542:	f005 f828 	bl	1a596 <var_toInteger>
   15546:	4683      	mov	fp, r0
        class_id = (DLMS_OBJECT_TYPE)var_toInteger(it2);
   15548:	9802      	ldr	r0, [sp, #8]
   1554a:	f005 f824 	bl	1a596 <var_toInteger>
   1554e:	4604      	mov	r4, r0
        version = (unsigned char)var_toInteger(it3);
   15550:	9803      	ldr	r0, [sp, #12]
   15552:	f005 f820 	bl	1a596 <var_toInteger>
        ret = cosem_createObject(class_id, &object);
   15556:	a905      	add	r1, sp, #20
        version = (unsigned char)var_toInteger(it3);
   15558:	4681      	mov	r9, r0
        ret = cosem_createObject(class_id, &object);
   1555a:	b2a0      	uxth	r0, r4
   1555c:	f7ec fc80 	bl	1e60 <cosem_createObject>
        if (ret == 0)
   15560:	4604      	mov	r4, r0
   15562:	b9a0      	cbnz	r0, 1558e <cosem_parseSNObjects+0x148>
            object->shortName = sn;
   15564:	9805      	ldr	r0, [sp, #20]
        version = (unsigned char)var_toInteger(it3);
   15566:	f880 9002 	strb.w	r9, [r0, #2]
            cosem_setLogicalName(object, ln->byteArr->data);
   1556a:	9b04      	ldr	r3, [sp, #16]
            object->shortName = sn;
   1556c:	f8a0 b004 	strh.w	fp, [r0, #4]
            cosem_setLogicalName(object, ln->byteArr->data);
   15570:	689b      	ldr	r3, [r3, #8]
   15572:	6819      	ldr	r1, [r3, #0]
   15574:	f7f8 f8df 	bl	d736 <cosem_setLogicalName>
            oa_push(objects, object);
   15578:	9905      	ldr	r1, [sp, #20]
   1557a:	4638      	mov	r0, r7
   1557c:	f004 fbee 	bl	19d5c <oa_push>
            oa_push(&settings->releasedObjects, object);
   15580:	9905      	ldr	r1, [sp, #20]
   15582:	f108 00e4 	add.w	r0, r8, #228	; 0xe4
   15586:	f004 fbe9 	bl	19d5c <oa_push>
    for (pos = 0; pos != count; ++pos)
   1558a:	3601      	adds	r6, #1
   1558c:	e782      	b.n	15494 <cosem_parseSNObjects+0x4e>
            if (ret != DLMS_ERROR_CODE_UNAVAILABLE_OBJECT)
   1558e:	280b      	cmp	r0, #11
   15590:	d0fb      	beq.n	1558a <cosem_parseSNObjects+0x144>
   15592:	e79c      	b.n	154ce <cosem_parseSNObjects+0x88>
        return DLMS_ERROR_CODE_INVALID_RESPONSE;
   15594:	f44f 7487 	mov.w	r4, #270	; 0x10e
   15598:	e79c      	b.n	154d4 <cosem_parseSNObjects+0x8e>

0001559a <cosem_setAssociationShortName>:
    if (index == 2)
   1559a:	2a02      	cmp	r2, #2
{
   1559c:	b570      	push	{r4, r5, r6, lr}
   1559e:	4606      	mov	r6, r0
   155a0:	460c      	mov	r4, r1
   155a2:	461d      	mov	r5, r3
    if (index == 2)
   155a4:	d10a      	bne.n	155bc <cosem_setAssociationShortName+0x22>
        oa_empty(&object->objectList);
   155a6:	3410      	adds	r4, #16
   155a8:	4620      	mov	r0, r4
   155aa:	f004 fbff 	bl	19dac <oa_empty>
        ret = cosem_parseSNObjects(settings, value->byteArr, &object->objectList);
   155ae:	68a9      	ldr	r1, [r5, #8]
   155b0:	4622      	mov	r2, r4
   155b2:	4630      	mov	r0, r6
}
   155b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ret = cosem_parseSNObjects(settings, value->byteArr, &object->objectList);
   155b8:	f7ff bf45 	b.w	15446 <cosem_parseSNObjects>
    else if (index == 3)
   155bc:	2a03      	cmp	r2, #3
   155be:	d106      	bne.n	155ce <cosem_setAssociationShortName+0x34>
        ret = updateSNAccessRights(&object->objectList, value->Arr);
   155c0:	f104 0010 	add.w	r0, r4, #16
   155c4:	6899      	ldr	r1, [r3, #8]
}
   155c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ret = updateSNAccessRights(&object->objectList, value->Arr);
   155ca:	f7ff bf10 	b.w	153ee <updateSNAccessRights>
    else if (index == 4)
   155ce:	2a04      	cmp	r2, #4
   155d0:	d10f      	bne.n	155f2 <cosem_setAssociationShortName+0x58>
        if (bb_size(value->byteArr) != 6)
   155d2:	6898      	ldr	r0, [r3, #8]
   155d4:	f7f7 fb03 	bl	cbde <bb_size>
   155d8:	2806      	cmp	r0, #6
   155da:	d10d      	bne.n	155f8 <cosem_setAssociationShortName+0x5e>
            ret = oa_findByLN(&settings->objects, DLMS_OBJECT_TYPE_SECURITY_SETUP, value->byteArr->data, (gxObject**)&object->securitySetup);
   155dc:	68aa      	ldr	r2, [r5, #8]
   155de:	f104 0318 	add.w	r3, r4, #24
   155e2:	f106 0098 	add.w	r0, r6, #152	; 0x98
   155e6:	6812      	ldr	r2, [r2, #0]
}
   155e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            ret = oa_findByLN(&settings->objects, DLMS_OBJECT_TYPE_SECURITY_SETUP, value->byteArr->data, (gxObject**)&object->securitySetup);
   155ec:	2140      	movs	r1, #64	; 0x40
   155ee:	f004 bc15 	b.w	19e1c <oa_findByLN>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   155f2:	f44f 7081 	mov.w	r0, #258	; 0x102
}
   155f6:	bd70      	pop	{r4, r5, r6, pc}
            ret = DLMS_ERROR_CODE_UNMATCH_TYPE;
   155f8:	200c      	movs	r0, #12
    return ret;
   155fa:	e7fc      	b.n	155f6 <cosem_setAssociationShortName+0x5c>

000155fc <cosem_setAutoAnswer>:
{
   155fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (index == 2)
   15600:	2902      	cmp	r1, #2
{
   15602:	b08a      	sub	sp, #40	; 0x28
   15604:	4605      	mov	r5, r0
   15606:	4616      	mov	r6, r2
    if (index == 2)
   15608:	d108      	bne.n	1561c <cosem_setAutoAnswer+0x20>
        object->mode = (DLMS_AUTO_ANSWER_MODE)var_toInteger(value);
   1560a:	4610      	mov	r0, r2
   1560c:	f004 ffc3 	bl	1a596 <var_toInteger>
   15610:	74a8      	strb	r0, [r5, #18]
    int ret = 0, pos;
   15612:	2400      	movs	r4, #0
}
   15614:	4620      	mov	r0, r4
   15616:	b00a      	add	sp, #40	; 0x28
   15618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (index == 3)
   1561c:	2903      	cmp	r1, #3
   1561e:	d15b      	bne.n	156d8 <cosem_setAutoAnswer+0xdc>
        arr_clearKeyValuePair(&object->listeningWindow);
   15620:	3514      	adds	r5, #20
   15622:	4628      	mov	r0, r5
   15624:	f7fa fec0 	bl	103a8 <arr_clearKeyValuePair>
        if (value->Arr != NULL)
   15628:	68b3      	ldr	r3, [r6, #8]
   1562a:	2b00      	cmp	r3, #0
   1562c:	d0f1      	beq.n	15612 <cosem_setAutoAnswer+0x16>
            for (pos = 0; pos != value->Arr->size; ++pos)
   1562e:	2700      	movs	r7, #0
   15630:	e04d      	b.n	156ce <cosem_setAutoAnswer+0xd2>
                ret = va_getByIndex(value->Arr, pos, &tmp);
   15632:	466a      	mov	r2, sp
   15634:	4639      	mov	r1, r7
   15636:	f004 fe34 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   1563a:	4604      	mov	r4, r0
   1563c:	2800      	cmp	r0, #0
   1563e:	d1e9      	bne.n	15614 <cosem_setAutoAnswer+0x18>
                ret = va_getByIndex(tmp->Arr, 0, &tmp3);
   15640:	9b00      	ldr	r3, [sp, #0]
   15642:	4601      	mov	r1, r0
   15644:	aa01      	add	r2, sp, #4
   15646:	6898      	ldr	r0, [r3, #8]
   15648:	f004 fe2b 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   1564c:	4604      	mov	r4, r0
   1564e:	2800      	cmp	r0, #0
   15650:	d1e0      	bne.n	15614 <cosem_setAutoAnswer+0x18>
                var_init(&start);
   15652:	a802      	add	r0, sp, #8
   15654:	f004 fc4b 	bl	19eee <var_init>
                var_init(&end);
   15658:	a806      	add	r0, sp, #24
   1565a:	f004 fc48 	bl	19eee <var_init>
                ret = dlms_changeType2(tmp3, DLMS_DATA_TYPE_DATETIME, &start);
   1565e:	9801      	ldr	r0, [sp, #4]
   15660:	aa02      	add	r2, sp, #8
   15662:	2119      	movs	r1, #25
   15664:	f7fa fb6f 	bl	fd46 <dlms_changeType2>
                if (ret != DLMS_ERROR_CODE_OK)
   15668:	4604      	mov	r4, r0
   1566a:	2800      	cmp	r0, #0
   1566c:	d1d2      	bne.n	15614 <cosem_setAutoAnswer+0x18>
                ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   1566e:	9b00      	ldr	r3, [sp, #0]
   15670:	aa01      	add	r2, sp, #4
   15672:	6898      	ldr	r0, [r3, #8]
   15674:	2101      	movs	r1, #1
   15676:	f004 fe14 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   1567a:	4604      	mov	r4, r0
   1567c:	2800      	cmp	r0, #0
   1567e:	d1c9      	bne.n	15614 <cosem_setAutoAnswer+0x18>
                ret = dlms_changeType2(tmp3, DLMS_DATA_TYPE_DATETIME, &end);
   15680:	9801      	ldr	r0, [sp, #4]
   15682:	aa06      	add	r2, sp, #24
   15684:	2119      	movs	r1, #25
   15686:	f7fa fb5e 	bl	fd46 <dlms_changeType2>
                if (ret != DLMS_ERROR_CODE_OK)
   1568a:	4604      	mov	r4, r0
   1568c:	2800      	cmp	r0, #0
   1568e:	d1c1      	bne.n	15614 <cosem_setAutoAnswer+0x18>
                s = (gxtime*)gxmalloc(sizeof(gxtime));
   15690:	200c      	movs	r0, #12
   15692:	f7f6 fa8f 	bl	bbb4 <malloc>
   15696:	4604      	mov	r4, r0
                e = (gxtime*)gxmalloc(sizeof(gxtime));
   15698:	200c      	movs	r0, #12
   1569a:	f7f6 fa8b 	bl	bbb4 <malloc>
                time_copy(s, start.dateTime);
   1569e:	9904      	ldr	r1, [sp, #16]
                e = (gxtime*)gxmalloc(sizeof(gxtime));
   156a0:	4680      	mov	r8, r0
                time_copy(s, start.dateTime);
   156a2:	4620      	mov	r0, r4
   156a4:	f7f8 fb9c 	bl	dde0 <time_copy>
                time_copy(e, end.dateTime);
   156a8:	9908      	ldr	r1, [sp, #32]
   156aa:	4640      	mov	r0, r8
   156ac:	f7f8 fb98 	bl	dde0 <time_copy>
                arr_push(&object->listeningWindow, key_init(s, e));
   156b0:	4641      	mov	r1, r8
   156b2:	4620      	mov	r0, r4
   156b4:	f7fe f933 	bl	1391e <key_init>
   156b8:	4601      	mov	r1, r0
   156ba:	4628      	mov	r0, r5
   156bc:	f7fa fe26 	bl	1030c <arr_push>
                var_clear(&start);
   156c0:	a802      	add	r0, sp, #8
   156c2:	f004 fd70 	bl	1a1a6 <var_clear>
                var_clear(&end);
   156c6:	a806      	add	r0, sp, #24
   156c8:	f004 fd6d 	bl	1a1a6 <var_clear>
            for (pos = 0; pos != value->Arr->size; ++pos)
   156cc:	3701      	adds	r7, #1
   156ce:	68b0      	ldr	r0, [r6, #8]
   156d0:	88c3      	ldrh	r3, [r0, #6]
   156d2:	42bb      	cmp	r3, r7
   156d4:	d1ad      	bne.n	15632 <cosem_setAutoAnswer+0x36>
   156d6:	e79c      	b.n	15612 <cosem_setAutoAnswer+0x16>
    else if (index == 4)
   156d8:	2904      	cmp	r1, #4
   156da:	d105      	bne.n	156e8 <cosem_setAutoAnswer+0xec>
        object->status = (DLMS_AUTO_ANSWER_STATUS)var_toInteger(value);
   156dc:	4610      	mov	r0, r2
   156de:	f004 ff5a 	bl	1a596 <var_toInteger>
   156e2:	f885 0020 	strb.w	r0, [r5, #32]
   156e6:	e794      	b.n	15612 <cosem_setAutoAnswer+0x16>
    else if (index == 5)
   156e8:	2905      	cmp	r1, #5
   156ea:	d105      	bne.n	156f8 <cosem_setAutoAnswer+0xfc>
        object->numberOfCalls = (unsigned char)var_toInteger(value);
   156ec:	4610      	mov	r0, r2
   156ee:	f004 ff52 	bl	1a596 <var_toInteger>
   156f2:	f885 0021 	strb.w	r0, [r5, #33]	; 0x21
   156f6:	e78c      	b.n	15612 <cosem_setAutoAnswer+0x16>
    else if (index == 6)
   156f8:	2906      	cmp	r1, #6
   156fa:	d119      	bne.n	15730 <cosem_setAutoAnswer+0x134>
        ret = va_getByIndex(value->Arr, 0, &tmp);
   156fc:	68b0      	ldr	r0, [r6, #8]
   156fe:	466a      	mov	r2, sp
   15700:	2100      	movs	r1, #0
   15702:	f004 fdce 	bl	1a2a2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   15706:	4604      	mov	r4, r0
   15708:	2800      	cmp	r0, #0
   1570a:	d183      	bne.n	15614 <cosem_setAutoAnswer+0x18>
        object->numberOfRingsInListeningWindow = (unsigned char)var_toInteger(tmp);
   1570c:	9800      	ldr	r0, [sp, #0]
   1570e:	f004 ff42 	bl	1a596 <var_toInteger>
   15712:	7428      	strb	r0, [r5, #16]
        ret = va_getByIndex(value->Arr, 1, &tmp);
   15714:	68b0      	ldr	r0, [r6, #8]
   15716:	466a      	mov	r2, sp
   15718:	2101      	movs	r1, #1
   1571a:	f004 fdc2 	bl	1a2a2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   1571e:	4604      	mov	r4, r0
   15720:	2800      	cmp	r0, #0
   15722:	f47f af77 	bne.w	15614 <cosem_setAutoAnswer+0x18>
        object->numberOfRingsOutListeningWindow = (unsigned char)var_toInteger(tmp);
   15726:	9800      	ldr	r0, [sp, #0]
   15728:	f004 ff35 	bl	1a596 <var_toInteger>
   1572c:	7468      	strb	r0, [r5, #17]
   1572e:	e771      	b.n	15614 <cosem_setAutoAnswer+0x18>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   15730:	f44f 7481 	mov.w	r4, #258	; 0x102
   15734:	e76e      	b.n	15614 <cosem_setAutoAnswer+0x18>

00015736 <cosem_setAutoConnect>:
{
   15736:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (index == 2)
   1573a:	2902      	cmp	r1, #2
{
   1573c:	b08b      	sub	sp, #44	; 0x2c
   1573e:	4605      	mov	r5, r0
   15740:	4616      	mov	r6, r2
    if (index == 2)
   15742:	d108      	bne.n	15756 <cosem_setAutoConnect+0x20>
        object->mode = (DLMS_AUTO_CONNECT_MODE)var_toInteger(value);
   15744:	4610      	mov	r0, r2
   15746:	f004 ff26 	bl	1a596 <var_toInteger>
   1574a:	7428      	strb	r0, [r5, #16]
    int ret = 0, pos;
   1574c:	2400      	movs	r4, #0
}
   1574e:	4620      	mov	r0, r4
   15750:	b00b      	add	sp, #44	; 0x2c
   15752:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if (index == 3)
   15756:	2903      	cmp	r1, #3
   15758:	d105      	bne.n	15766 <cosem_setAutoConnect+0x30>
        object->repetitions = (unsigned char)var_toInteger(value);
   1575a:	4610      	mov	r0, r2
   1575c:	f004 ff1b 	bl	1a596 <var_toInteger>
   15760:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
   15764:	e7f2      	b.n	1574c <cosem_setAutoConnect+0x16>
    else if (index == 4)
   15766:	2904      	cmp	r1, #4
   15768:	d104      	bne.n	15774 <cosem_setAutoConnect+0x3e>
        object->repetitionDelay = (uint16_t)var_toInteger(value);
   1576a:	4610      	mov	r0, r2
   1576c:	f004 ff13 	bl	1a596 <var_toInteger>
   15770:	85a8      	strh	r0, [r5, #44]	; 0x2c
   15772:	e7eb      	b.n	1574c <cosem_setAutoConnect+0x16>
    else if (index == 5)
   15774:	2905      	cmp	r1, #5
   15776:	d15a      	bne.n	1582e <cosem_setAutoConnect+0xf8>
        arr_clearKeyValuePair(&object->callingWindow);
   15778:	3514      	adds	r5, #20
   1577a:	4628      	mov	r0, r5
   1577c:	f7fa fe14 	bl	103a8 <arr_clearKeyValuePair>
        if (value->Arr != NULL)
   15780:	68b3      	ldr	r3, [r6, #8]
   15782:	2b00      	cmp	r3, #0
   15784:	d0e2      	beq.n	1574c <cosem_setAutoConnect+0x16>
            if ((ret = arr_capacity(&object->callingWindow, value->Arr->size)) == 0)
   15786:	88d9      	ldrh	r1, [r3, #6]
   15788:	4628      	mov	r0, r5
   1578a:	f7fa fd99 	bl	102c0 <arr_capacity>
   1578e:	4604      	mov	r4, r0
   15790:	2800      	cmp	r0, #0
   15792:	d1dc      	bne.n	1574e <cosem_setAutoConnect+0x18>
                for (pos = 0; pos != value->Arr->size; ++pos)
   15794:	68b0      	ldr	r0, [r6, #8]
   15796:	88c3      	ldrh	r3, [r0, #6]
   15798:	42a3      	cmp	r3, r4
   1579a:	d0d7      	beq.n	1574c <cosem_setAutoConnect+0x16>
                    ret = va_getByIndex(value->Arr, pos, &tmp);
   1579c:	466a      	mov	r2, sp
   1579e:	4621      	mov	r1, r4
   157a0:	f004 fd7f 	bl	1a2a2 <va_getByIndex>
                    if (ret != DLMS_ERROR_CODE_OK)
   157a4:	2800      	cmp	r0, #0
   157a6:	d140      	bne.n	1582a <cosem_setAutoConnect+0xf4>
                    ret = va_getByIndex(tmp->Arr, 0, &tmp3);
   157a8:	9b00      	ldr	r3, [sp, #0]
   157aa:	4601      	mov	r1, r0
   157ac:	aa01      	add	r2, sp, #4
   157ae:	6898      	ldr	r0, [r3, #8]
   157b0:	f004 fd77 	bl	1a2a2 <va_getByIndex>
                    if (ret != DLMS_ERROR_CODE_OK)
   157b4:	2800      	cmp	r0, #0
   157b6:	d138      	bne.n	1582a <cosem_setAutoConnect+0xf4>
                    var_init(&start);
   157b8:	a802      	add	r0, sp, #8
   157ba:	f004 fb98 	bl	19eee <var_init>
                    var_init(&end);
   157be:	a806      	add	r0, sp, #24
   157c0:	f004 fb95 	bl	19eee <var_init>
                    ret = dlms_changeType2(tmp3, DLMS_DATA_TYPE_DATETIME, &start);
   157c4:	9801      	ldr	r0, [sp, #4]
   157c6:	aa02      	add	r2, sp, #8
   157c8:	2119      	movs	r1, #25
   157ca:	f7fa fabc 	bl	fd46 <dlms_changeType2>
                    if (ret != DLMS_ERROR_CODE_OK)
   157ce:	bb60      	cbnz	r0, 1582a <cosem_setAutoConnect+0xf4>
                    ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   157d0:	9b00      	ldr	r3, [sp, #0]
   157d2:	aa01      	add	r2, sp, #4
   157d4:	6898      	ldr	r0, [r3, #8]
   157d6:	2101      	movs	r1, #1
   157d8:	f004 fd63 	bl	1a2a2 <va_getByIndex>
                    if (ret != DLMS_ERROR_CODE_OK)
   157dc:	bb28      	cbnz	r0, 1582a <cosem_setAutoConnect+0xf4>
                    ret = dlms_changeType2(tmp3, DLMS_DATA_TYPE_DATETIME, &end);
   157de:	9801      	ldr	r0, [sp, #4]
   157e0:	aa06      	add	r2, sp, #24
   157e2:	2119      	movs	r1, #25
   157e4:	f7fa faaf 	bl	fd46 <dlms_changeType2>
                    if (ret != DLMS_ERROR_CODE_OK)
   157e8:	b9f8      	cbnz	r0, 1582a <cosem_setAutoConnect+0xf4>
                    s = (gxtime*)gxmalloc(sizeof(gxtime));
   157ea:	200c      	movs	r0, #12
   157ec:	f7f6 f9e2 	bl	bbb4 <malloc>
   157f0:	4680      	mov	r8, r0
                    e = (gxtime*)gxmalloc(sizeof(gxtime));
   157f2:	200c      	movs	r0, #12
   157f4:	f7f6 f9de 	bl	bbb4 <malloc>
                    arr_push(&object->callingWindow, key_init(s, e));
   157f8:	4601      	mov	r1, r0
                    e = (gxtime*)gxmalloc(sizeof(gxtime));
   157fa:	4607      	mov	r7, r0
                    arr_push(&object->callingWindow, key_init(s, e));
   157fc:	4640      	mov	r0, r8
   157fe:	f7fe f88e 	bl	1391e <key_init>
   15802:	4601      	mov	r1, r0
   15804:	4628      	mov	r0, r5
   15806:	f7fa fd81 	bl	1030c <arr_push>
                    time_copy(s, start.dateTime);
   1580a:	9904      	ldr	r1, [sp, #16]
   1580c:	4640      	mov	r0, r8
   1580e:	f7f8 fae7 	bl	dde0 <time_copy>
                    time_copy(e, end.dateTime);
   15812:	9908      	ldr	r1, [sp, #32]
   15814:	4638      	mov	r0, r7
   15816:	f7f8 fae3 	bl	dde0 <time_copy>
                    var_clear(&start);
   1581a:	a802      	add	r0, sp, #8
   1581c:	f004 fcc3 	bl	1a1a6 <var_clear>
                    var_clear(&end);
   15820:	a806      	add	r0, sp, #24
   15822:	f004 fcc0 	bl	1a1a6 <var_clear>
                for (pos = 0; pos != value->Arr->size; ++pos)
   15826:	3401      	adds	r4, #1
   15828:	e7b4      	b.n	15794 <cosem_setAutoConnect+0x5e>
                        return ret;
   1582a:	4604      	mov	r4, r0
   1582c:	e78f      	b.n	1574e <cosem_setAutoConnect+0x18>
    else if (index == 6)
   1582e:	2906      	cmp	r1, #6
   15830:	d12c      	bne.n	1588c <cosem_setAutoConnect+0x156>
        arr_clearStrings(&object->destinations);
   15832:	3520      	adds	r5, #32
   15834:	4628      	mov	r0, r5
   15836:	f7fa fdd5 	bl	103e4 <arr_clearStrings>
        if (value->Arr != NULL)
   1583a:	68b3      	ldr	r3, [r6, #8]
   1583c:	2b00      	cmp	r3, #0
   1583e:	d085      	beq.n	1574c <cosem_setAutoConnect+0x16>
            for (pos = 0; pos != value->Arr->size; ++pos)
   15840:	2700      	movs	r7, #0
   15842:	e01e      	b.n	15882 <cosem_setAutoConnect+0x14c>
                ret = va_getByIndex(value->Arr, pos, &tmp);
   15844:	aa06      	add	r2, sp, #24
   15846:	4639      	mov	r1, r7
   15848:	f004 fd2b 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   1584c:	4604      	mov	r4, r0
   1584e:	2800      	cmp	r0, #0
   15850:	f47f af7d 	bne.w	1574e <cosem_setAutoConnect+0x18>
                str = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
   15854:	200c      	movs	r0, #12
   15856:	f7f6 f9ad 	bl	bbb4 <malloc>
   1585a:	4680      	mov	r8, r0
                BYTE_BUFFER_INIT(str);
   1585c:	f7f7 f9c2 	bl	cbe4 <bb_init>
                bb_set2(str, tmp->byteArr, 0, bb_size(tmp->byteArr));
   15860:	9b06      	ldr	r3, [sp, #24]
   15862:	f8d3 9008 	ldr.w	r9, [r3, #8]
   15866:	4648      	mov	r0, r9
   15868:	f7f7 f9b9 	bl	cbde <bb_size>
   1586c:	4622      	mov	r2, r4
   1586e:	4603      	mov	r3, r0
   15870:	4649      	mov	r1, r9
   15872:	4640      	mov	r0, r8
   15874:	f7f7 fb34 	bl	cee0 <bb_set2>
                arr_push(&object->destinations, str);
   15878:	4641      	mov	r1, r8
   1587a:	4628      	mov	r0, r5
   1587c:	f7fa fd46 	bl	1030c <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   15880:	3701      	adds	r7, #1
   15882:	68b0      	ldr	r0, [r6, #8]
   15884:	88c3      	ldrh	r3, [r0, #6]
   15886:	42bb      	cmp	r3, r7
   15888:	d1dc      	bne.n	15844 <cosem_setAutoConnect+0x10e>
   1588a:	e75f      	b.n	1574c <cosem_setAutoConnect+0x16>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   1588c:	f44f 7481 	mov.w	r4, #258	; 0x102
   15890:	e75d      	b.n	1574e <cosem_setAutoConnect+0x18>

00015892 <cosem_setDemandRegister>:
    if (index == 2)
   15892:	2902      	cmp	r1, #2
{
   15894:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   15896:	4605      	mov	r5, r0
   15898:	4616      	mov	r6, r2
    if (index == 2)
   1589a:	d107      	bne.n	158ac <cosem_setDemandRegister+0x1a>
        ret = var_copy(&object->currentAverageValue, value);
   1589c:	4611      	mov	r1, r2
   1589e:	3010      	adds	r0, #16
        ret = var_copy(&object->lastAverageValue, value);
   158a0:	f7ee fd2c 	bl	42fc <var_copy>
   158a4:	4604      	mov	r4, r0
}
   158a6:	4620      	mov	r0, r4
   158a8:	b004      	add	sp, #16
   158aa:	bd70      	pop	{r4, r5, r6, pc}
    else if (index == 3)
   158ac:	2903      	cmp	r1, #3
   158ae:	d102      	bne.n	158b6 <cosem_setDemandRegister+0x24>
        ret = var_copy(&object->lastAverageValue, value);
   158b0:	4611      	mov	r1, r2
   158b2:	3020      	adds	r0, #32
   158b4:	e7f4      	b.n	158a0 <cosem_setDemandRegister+0xe>
    else if (index == 4)
   158b6:	2904      	cmp	r1, #4
   158b8:	d120      	bne.n	158fc <cosem_setDemandRegister+0x6a>
        if (value->vt != DLMS_DATA_TYPE_STRUCTURE)
   158ba:	7813      	ldrb	r3, [r2, #0]
   158bc:	2b02      	cmp	r3, #2
   158be:	d171      	bne.n	159a4 <cosem_setDemandRegister+0x112>
        ret = va_getByIndex(value->Arr, 0, &tmp);
   158c0:	68b0      	ldr	r0, [r6, #8]
   158c2:	466a      	mov	r2, sp
   158c4:	2100      	movs	r1, #0
   158c6:	f004 fcec 	bl	1a2a2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   158ca:	4604      	mov	r4, r0
   158cc:	2800      	cmp	r0, #0
   158ce:	d1ea      	bne.n	158a6 <cosem_setDemandRegister+0x14>
        object->scaler = (char)var_toInteger(tmp);
   158d0:	9800      	ldr	r0, [sp, #0]
   158d2:	f004 fe60 	bl	1a596 <var_toInteger>
   158d6:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30
        ret = va_getByIndex(value->Arr, 1, &tmp);
   158da:	68b0      	ldr	r0, [r6, #8]
   158dc:	466a      	mov	r2, sp
   158de:	2101      	movs	r1, #1
   158e0:	f004 fcdf 	bl	1a2a2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   158e4:	4604      	mov	r4, r0
   158e6:	2800      	cmp	r0, #0
   158e8:	d1dd      	bne.n	158a6 <cosem_setDemandRegister+0x14>
        object->unit = (unsigned char)var_toInteger(tmp);
   158ea:	9800      	ldr	r0, [sp, #0]
   158ec:	f004 fe53 	bl	1a596 <var_toInteger>
        object->unitRead = 1;
   158f0:	2301      	movs	r3, #1
        object->unit = (unsigned char)var_toInteger(tmp);
   158f2:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
        object->unitRead = 1;
   158f6:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
   158fa:	e7d4      	b.n	158a6 <cosem_setDemandRegister+0x14>
    else if (index == 5)
   158fc:	2905      	cmp	r1, #5
   158fe:	d102      	bne.n	15906 <cosem_setDemandRegister+0x74>
        ret = var_copy(&object->status, value);
   15900:	4611      	mov	r1, r2
   15902:	3038      	adds	r0, #56	; 0x38
   15904:	e7cc      	b.n	158a0 <cosem_setDemandRegister+0xe>
    else if (index == 6)
   15906:	2906      	cmp	r1, #6
   15908:	d121      	bne.n	1594e <cosem_setDemandRegister+0xbc>
        if (value->vt == DLMS_DATA_TYPE_OCTET_STRING && value->byteArr != NULL)
   1590a:	7813      	ldrb	r3, [r2, #0]
   1590c:	2b09      	cmp	r3, #9
   1590e:	d118      	bne.n	15942 <cosem_setDemandRegister+0xb0>
   15910:	6893      	ldr	r3, [r2, #8]
   15912:	b1b3      	cbz	r3, 15942 <cosem_setDemandRegister+0xb0>
            ret = var_init(&tmp2);
   15914:	4668      	mov	r0, sp
   15916:	f004 faea 	bl	19eee <var_init>
            if (ret != DLMS_ERROR_CODE_OK)
   1591a:	4604      	mov	r4, r0
   1591c:	2800      	cmp	r0, #0
   1591e:	d1c2      	bne.n	158a6 <cosem_setDemandRegister+0x14>
            ret = dlms_changeType2(value, DLMS_DATA_TYPE_DATETIME, &tmp2);
   15920:	466a      	mov	r2, sp
   15922:	2119      	movs	r1, #25
   15924:	4630      	mov	r0, r6
   15926:	f7fa fa0e 	bl	fd46 <dlms_changeType2>
            if (ret != DLMS_ERROR_CODE_OK)
   1592a:	4604      	mov	r4, r0
   1592c:	2800      	cmp	r0, #0
   1592e:	d1ba      	bne.n	158a6 <cosem_setDemandRegister+0x14>
            time_copy(&object->captureTime, tmp2.dateTime);
   15930:	9902      	ldr	r1, [sp, #8]
   15932:	f105 0048 	add.w	r0, r5, #72	; 0x48
            time_copy(&object->startTimeCurrent, tmp2.dateTime);
   15936:	f7f8 fa53 	bl	dde0 <time_copy>
            var_clear(&tmp2);
   1593a:	4668      	mov	r0, sp
   1593c:	f004 fc33 	bl	1a1a6 <var_clear>
   15940:	e7b1      	b.n	158a6 <cosem_setDemandRegister+0x14>
            time_clear(&object->captureTime);
   15942:	f105 0048 	add.w	r0, r5, #72	; 0x48
            time_clear(&object->startTimeCurrent);
   15946:	f7f8 fa1a 	bl	dd7e <time_clear>
    int ret = DLMS_ERROR_CODE_OK;
   1594a:	2400      	movs	r4, #0
   1594c:	e7ab      	b.n	158a6 <cosem_setDemandRegister+0x14>
    else if (index == 7)
   1594e:	2907      	cmp	r1, #7
   15950:	d119      	bne.n	15986 <cosem_setDemandRegister+0xf4>
        if (value->vt == DLMS_DATA_TYPE_OCTET_STRING && value->byteArr != NULL)
   15952:	7813      	ldrb	r3, [r2, #0]
   15954:	2b09      	cmp	r3, #9
   15956:	d113      	bne.n	15980 <cosem_setDemandRegister+0xee>
   15958:	6893      	ldr	r3, [r2, #8]
   1595a:	b18b      	cbz	r3, 15980 <cosem_setDemandRegister+0xee>
            ret = var_init(&tmp2);
   1595c:	4668      	mov	r0, sp
   1595e:	f004 fac6 	bl	19eee <var_init>
            if (ret != DLMS_ERROR_CODE_OK)
   15962:	4604      	mov	r4, r0
   15964:	2800      	cmp	r0, #0
   15966:	d19e      	bne.n	158a6 <cosem_setDemandRegister+0x14>
            ret = dlms_changeType2(value, DLMS_DATA_TYPE_DATETIME, &tmp2);
   15968:	466a      	mov	r2, sp
   1596a:	2119      	movs	r1, #25
   1596c:	4630      	mov	r0, r6
   1596e:	f7fa f9ea 	bl	fd46 <dlms_changeType2>
            if (ret != DLMS_ERROR_CODE_OK)
   15972:	4604      	mov	r4, r0
   15974:	2800      	cmp	r0, #0
   15976:	d196      	bne.n	158a6 <cosem_setDemandRegister+0x14>
            time_copy(&object->startTimeCurrent, tmp2.dateTime);
   15978:	9902      	ldr	r1, [sp, #8]
   1597a:	f105 0054 	add.w	r0, r5, #84	; 0x54
   1597e:	e7da      	b.n	15936 <cosem_setDemandRegister+0xa4>
            time_clear(&object->startTimeCurrent);
   15980:	f105 0054 	add.w	r0, r5, #84	; 0x54
   15984:	e7df      	b.n	15946 <cosem_setDemandRegister+0xb4>
    else if (index == 8)
   15986:	2908      	cmp	r1, #8
   15988:	d104      	bne.n	15994 <cosem_setDemandRegister+0x102>
        object->period = var_toInteger(value);
   1598a:	4610      	mov	r0, r2
   1598c:	f004 fe03 	bl	1a596 <var_toInteger>
   15990:	6668      	str	r0, [r5, #100]	; 0x64
   15992:	e7da      	b.n	1594a <cosem_setDemandRegister+0xb8>
    else if (index == 9)
   15994:	2909      	cmp	r1, #9
   15996:	d105      	bne.n	159a4 <cosem_setDemandRegister+0x112>
        object->numberOfPeriods = (uint16_t)var_toInteger(value);
   15998:	4610      	mov	r0, r2
   1599a:	f004 fdfc 	bl	1a596 <var_toInteger>
   1599e:	f8a5 0060 	strh.w	r0, [r5, #96]	; 0x60
   159a2:	e7d2      	b.n	1594a <cosem_setDemandRegister+0xb8>
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
   159a4:	f44f 7481 	mov.w	r4, #258	; 0x102
   159a8:	e77d      	b.n	158a6 <cosem_setDemandRegister+0x14>

000159aa <cosem_setMacAddressSetup>:
    if (index == 2)
   159aa:	2902      	cmp	r1, #2
{
   159ac:	b570      	push	{r4, r5, r6, lr}
   159ae:	4615      	mov	r5, r2
    if (index == 2)
   159b0:	d110      	bne.n	159d4 <cosem_setMacAddressSetup+0x2a>
        bb_clear(&object->macAddress);
   159b2:	f100 0410 	add.w	r4, r0, #16
   159b6:	4620      	mov	r0, r4
   159b8:	f7f7 fad7 	bl	cf6a <bb_clear>
        ret = bb_set2(&object->macAddress, value->byteArr, 0, bb_size(value->byteArr));
   159bc:	68ad      	ldr	r5, [r5, #8]
   159be:	4628      	mov	r0, r5
   159c0:	f7f7 f90d 	bl	cbde <bb_size>
   159c4:	4629      	mov	r1, r5
   159c6:	4603      	mov	r3, r0
   159c8:	2200      	movs	r2, #0
   159ca:	4620      	mov	r0, r4
}
   159cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ret = bb_set2(&object->macAddress, value->byteArr, 0, bb_size(value->byteArr));
   159d0:	f7f7 ba86 	b.w	cee0 <bb_set2>
}
   159d4:	f44f 7081 	mov.w	r0, #258	; 0x102
   159d8:	bd70      	pop	{r4, r5, r6, pc}

000159da <cosem_setExtendedRegister>:
    if (index == 2)
   159da:	2902      	cmp	r1, #2
{
   159dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   159de:	4606      	mov	r6, r0
   159e0:	4615      	mov	r5, r2
    if (index == 2)
   159e2:	d105      	bne.n	159f0 <cosem_setExtendedRegister+0x16>
        ret = var_copy(&object->value, value);
   159e4:	4611      	mov	r1, r2
   159e6:	3010      	adds	r0, #16
        ret = var_copy(&object->status, value);
   159e8:	f7ee fc88 	bl	42fc <var_copy>
   159ec:	4604      	mov	r4, r0
   159ee:	e01c      	b.n	15a2a <cosem_setExtendedRegister+0x50>
    else if (index == 3)
   159f0:	2903      	cmp	r1, #3
   159f2:	d11d      	bne.n	15a30 <cosem_setExtendedRegister+0x56>
        if (value->vt != DLMS_DATA_TYPE_STRUCTURE)
   159f4:	7813      	ldrb	r3, [r2, #0]
   159f6:	2b02      	cmp	r3, #2
   159f8:	d141      	bne.n	15a7e <cosem_setExtendedRegister+0xa4>
        ret = va_getByIndex(value->Arr, 0, &tmp);
   159fa:	68a8      	ldr	r0, [r5, #8]
   159fc:	466a      	mov	r2, sp
   159fe:	2100      	movs	r1, #0
   15a00:	f004 fc4f 	bl	1a2a2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   15a04:	4604      	mov	r4, r0
   15a06:	b980      	cbnz	r0, 15a2a <cosem_setExtendedRegister+0x50>
        object->scaler = (char)var_toInteger(tmp);
   15a08:	9800      	ldr	r0, [sp, #0]
   15a0a:	f004 fdc4 	bl	1a596 <var_toInteger>
   15a0e:	f886 0020 	strb.w	r0, [r6, #32]
        ret = va_getByIndex(value->Arr, 1, &tmp);
   15a12:	68a8      	ldr	r0, [r5, #8]
   15a14:	466a      	mov	r2, sp
   15a16:	2101      	movs	r1, #1
   15a18:	f004 fc43 	bl	1a2a2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   15a1c:	4604      	mov	r4, r0
   15a1e:	b920      	cbnz	r0, 15a2a <cosem_setExtendedRegister+0x50>
        object->unit = (unsigned char)var_toInteger(tmp);
   15a20:	9800      	ldr	r0, [sp, #0]
   15a22:	f004 fdb8 	bl	1a596 <var_toInteger>
   15a26:	f886 0021 	strb.w	r0, [r6, #33]	; 0x21
}
   15a2a:	4620      	mov	r0, r4
   15a2c:	b004      	add	sp, #16
   15a2e:	bd70      	pop	{r4, r5, r6, pc}
    else if (index == 4)
   15a30:	2904      	cmp	r1, #4
   15a32:	d102      	bne.n	15a3a <cosem_setExtendedRegister+0x60>
        ret = var_copy(&object->status, value);
   15a34:	4611      	mov	r1, r2
   15a36:	3030      	adds	r0, #48	; 0x30
   15a38:	e7d6      	b.n	159e8 <cosem_setExtendedRegister+0xe>
    else if (index == 5)
   15a3a:	2905      	cmp	r1, #5
   15a3c:	d11f      	bne.n	15a7e <cosem_setExtendedRegister+0xa4>
        if (value->vt == DLMS_DATA_TYPE_OCTET_STRING)
   15a3e:	7813      	ldrb	r3, [r2, #0]
   15a40:	2b09      	cmp	r3, #9
   15a42:	d116      	bne.n	15a72 <cosem_setExtendedRegister+0x98>
            ret = var_init(&tmp2);
   15a44:	4668      	mov	r0, sp
   15a46:	f004 fa52 	bl	19eee <var_init>
            if (ret != DLMS_ERROR_CODE_OK)
   15a4a:	4604      	mov	r4, r0
   15a4c:	2800      	cmp	r0, #0
   15a4e:	d1ec      	bne.n	15a2a <cosem_setExtendedRegister+0x50>
            ret = dlms_changeType2(value, DLMS_DATA_TYPE_DATETIME, &tmp2);
   15a50:	466a      	mov	r2, sp
   15a52:	2119      	movs	r1, #25
   15a54:	4628      	mov	r0, r5
   15a56:	f7fa f976 	bl	fd46 <dlms_changeType2>
            if (ret == 0)
   15a5a:	4604      	mov	r4, r0
   15a5c:	2800      	cmp	r0, #0
   15a5e:	d1e4      	bne.n	15a2a <cosem_setExtendedRegister+0x50>
                time_copy(&object->captureTime, tmp2.dateTime);
   15a60:	f106 0024 	add.w	r0, r6, #36	; 0x24
   15a64:	9902      	ldr	r1, [sp, #8]
   15a66:	f7f8 f9bb 	bl	dde0 <time_copy>
                var_clear(&tmp2);
   15a6a:	4668      	mov	r0, sp
   15a6c:	f004 fb9b 	bl	1a1a6 <var_clear>
   15a70:	e7db      	b.n	15a2a <cosem_setExtendedRegister+0x50>
            time_copy(&object->captureTime, value->dateTime);
   15a72:	6891      	ldr	r1, [r2, #8]
   15a74:	3024      	adds	r0, #36	; 0x24
   15a76:	f7f8 f9b3 	bl	dde0 <time_copy>
    int ret = DLMS_ERROR_CODE_OK;
   15a7a:	2400      	movs	r4, #0
   15a7c:	e7d5      	b.n	15a2a <cosem_setExtendedRegister+0x50>
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
   15a7e:	f44f 7481 	mov.w	r4, #258	; 0x102
   15a82:	e7d2      	b.n	15a2a <cosem_setExtendedRegister+0x50>

00015a84 <cosem_setGprsSetup>:
    if (index == 2)
   15a84:	2902      	cmp	r1, #2
{
   15a86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   15a88:	4605      	mov	r5, r0
   15a8a:	460f      	mov	r7, r1
   15a8c:	4616      	mov	r6, r2
    if (index == 2)
   15a8e:	d11b      	bne.n	15ac8 <cosem_setGprsSetup+0x44>
        bb_clear(&object->apn);
   15a90:	3510      	adds	r5, #16
   15a92:	4628      	mov	r0, r5
   15a94:	f7f7 fa69 	bl	cf6a <bb_clear>
        if (value->vt == DLMS_DATA_TYPE_STRING)
   15a98:	7833      	ldrb	r3, [r6, #0]
   15a9a:	2b0a      	cmp	r3, #10
   15a9c:	d109      	bne.n	15ab2 <cosem_setGprsSetup+0x2e>
            bb_set(&object->apn, (unsigned char*)value->strVal->data, value->strVal->size);
   15a9e:	68b3      	ldr	r3, [r6, #8]
   15aa0:	4628      	mov	r0, r5
   15aa2:	88da      	ldrh	r2, [r3, #6]
   15aa4:	6819      	ldr	r1, [r3, #0]
   15aa6:	f7f7 f9ec 	bl	ce82 <bb_set>
    return DLMS_ERROR_CODE_OK;
   15aaa:	2400      	movs	r4, #0
}
   15aac:	4620      	mov	r0, r4
   15aae:	b003      	add	sp, #12
   15ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
            bb_set2(&object->apn, value->byteArr, 0, bb_size(value->byteArr));
   15ab2:	68b4      	ldr	r4, [r6, #8]
   15ab4:	4620      	mov	r0, r4
   15ab6:	f7f7 f892 	bl	cbde <bb_size>
   15aba:	2200      	movs	r2, #0
   15abc:	4603      	mov	r3, r0
   15abe:	4621      	mov	r1, r4
   15ac0:	4628      	mov	r0, r5
   15ac2:	f7f7 fa0d 	bl	cee0 <bb_set2>
   15ac6:	e7f0      	b.n	15aaa <cosem_setGprsSetup+0x26>
    else if (index == 3)
   15ac8:	2903      	cmp	r1, #3
   15aca:	d102      	bne.n	15ad2 <cosem_setGprsSetup+0x4e>
        object->pinCode = value->uiVal;
   15acc:	8913      	ldrh	r3, [r2, #8]
   15ace:	8383      	strh	r3, [r0, #28]
   15ad0:	e7eb      	b.n	15aaa <cosem_setGprsSetup+0x26>
    else if (index == 4)
   15ad2:	2904      	cmp	r1, #4
   15ad4:	f040 809f 	bne.w	15c16 <cosem_setGprsSetup+0x192>
        ret = va_getByIndex(value->Arr, 0, &tmp);
   15ad8:	68b0      	ldr	r0, [r6, #8]
   15ada:	466a      	mov	r2, sp
   15adc:	2100      	movs	r1, #0
   15ade:	f004 fbe0 	bl	1a2a2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   15ae2:	4604      	mov	r4, r0
   15ae4:	2800      	cmp	r0, #0
   15ae6:	d1e1      	bne.n	15aac <cosem_setGprsSetup+0x28>
        ret = va_getByIndex(tmp->Arr, 0, &tmp3);
   15ae8:	9b00      	ldr	r3, [sp, #0]
   15aea:	4601      	mov	r1, r0
   15aec:	aa01      	add	r2, sp, #4
   15aee:	6898      	ldr	r0, [r3, #8]
   15af0:	f004 fbd7 	bl	1a2a2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   15af4:	4604      	mov	r4, r0
   15af6:	2800      	cmp	r0, #0
   15af8:	d1d8      	bne.n	15aac <cosem_setGprsSetup+0x28>
        object->defaultQualityOfService.precedence = (unsigned char)var_toInteger(tmp3);
   15afa:	9801      	ldr	r0, [sp, #4]
   15afc:	f004 fd4b 	bl	1a596 <var_toInteger>
        ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   15b00:	9b00      	ldr	r3, [sp, #0]
        object->defaultQualityOfService.precedence = (unsigned char)var_toInteger(tmp3);
   15b02:	77a8      	strb	r0, [r5, #30]
        ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   15b04:	6898      	ldr	r0, [r3, #8]
   15b06:	aa01      	add	r2, sp, #4
   15b08:	2101      	movs	r1, #1
   15b0a:	f004 fbca 	bl	1a2a2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   15b0e:	4604      	mov	r4, r0
   15b10:	2800      	cmp	r0, #0
   15b12:	d1cb      	bne.n	15aac <cosem_setGprsSetup+0x28>
        object->defaultQualityOfService.delay = (unsigned char)var_toInteger(tmp3);
   15b14:	9801      	ldr	r0, [sp, #4]
   15b16:	f004 fd3e 	bl	1a596 <var_toInteger>
        ret = va_getByIndex(tmp->Arr, 2, &tmp3);
   15b1a:	9b00      	ldr	r3, [sp, #0]
        object->defaultQualityOfService.delay = (unsigned char)var_toInteger(tmp3);
   15b1c:	77e8      	strb	r0, [r5, #31]
        ret = va_getByIndex(tmp->Arr, 2, &tmp3);
   15b1e:	6898      	ldr	r0, [r3, #8]
   15b20:	aa01      	add	r2, sp, #4
   15b22:	2102      	movs	r1, #2
   15b24:	f004 fbbd 	bl	1a2a2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   15b28:	4604      	mov	r4, r0
   15b2a:	2800      	cmp	r0, #0
   15b2c:	d1be      	bne.n	15aac <cosem_setGprsSetup+0x28>
        object->defaultQualityOfService.reliability = (unsigned char)var_toInteger(tmp3);
   15b2e:	9801      	ldr	r0, [sp, #4]
   15b30:	f004 fd31 	bl	1a596 <var_toInteger>
        ret = va_getByIndex(tmp->Arr, 3, &tmp3);
   15b34:	9b00      	ldr	r3, [sp, #0]
        object->defaultQualityOfService.reliability = (unsigned char)var_toInteger(tmp3);
   15b36:	f885 0020 	strb.w	r0, [r5, #32]
        ret = va_getByIndex(tmp->Arr, 3, &tmp3);
   15b3a:	6898      	ldr	r0, [r3, #8]
   15b3c:	aa01      	add	r2, sp, #4
   15b3e:	2103      	movs	r1, #3
   15b40:	f004 fbaf 	bl	1a2a2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   15b44:	4604      	mov	r4, r0
   15b46:	2800      	cmp	r0, #0
   15b48:	d1b0      	bne.n	15aac <cosem_setGprsSetup+0x28>
        object->defaultQualityOfService.peakThroughput = (unsigned char)var_toInteger(tmp3);
   15b4a:	9801      	ldr	r0, [sp, #4]
   15b4c:	f004 fd23 	bl	1a596 <var_toInteger>
        ret = va_getByIndex(tmp->Arr, 4, &tmp3);
   15b50:	9b00      	ldr	r3, [sp, #0]
        object->defaultQualityOfService.peakThroughput = (unsigned char)var_toInteger(tmp3);
   15b52:	f885 0021 	strb.w	r0, [r5, #33]	; 0x21
        ret = va_getByIndex(tmp->Arr, 4, &tmp3);
   15b56:	6898      	ldr	r0, [r3, #8]
   15b58:	aa01      	add	r2, sp, #4
   15b5a:	4639      	mov	r1, r7
   15b5c:	f004 fba1 	bl	1a2a2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   15b60:	4604      	mov	r4, r0
   15b62:	2800      	cmp	r0, #0
   15b64:	d1a2      	bne.n	15aac <cosem_setGprsSetup+0x28>
        object->defaultQualityOfService.meanThroughput = (unsigned char)var_toInteger(tmp3);
   15b66:	9801      	ldr	r0, [sp, #4]
   15b68:	f004 fd15 	bl	1a596 <var_toInteger>
   15b6c:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
        ret = va_getByIndex(value->Arr, 1, &tmp);
   15b70:	68b0      	ldr	r0, [r6, #8]
   15b72:	466a      	mov	r2, sp
   15b74:	2101      	movs	r1, #1
   15b76:	f004 fb94 	bl	1a2a2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   15b7a:	4604      	mov	r4, r0
   15b7c:	2800      	cmp	r0, #0
   15b7e:	d195      	bne.n	15aac <cosem_setGprsSetup+0x28>
        ret = va_getByIndex(tmp->Arr, 0, &tmp3);
   15b80:	9b00      	ldr	r3, [sp, #0]
   15b82:	aa01      	add	r2, sp, #4
   15b84:	6898      	ldr	r0, [r3, #8]
   15b86:	2100      	movs	r1, #0
   15b88:	f004 fb8b 	bl	1a2a2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   15b8c:	4604      	mov	r4, r0
   15b8e:	2800      	cmp	r0, #0
   15b90:	d18c      	bne.n	15aac <cosem_setGprsSetup+0x28>
        object->requestedQualityOfService.precedence = (unsigned char)var_toInteger(tmp3);
   15b92:	9801      	ldr	r0, [sp, #4]
   15b94:	f004 fcff 	bl	1a596 <var_toInteger>
        ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   15b98:	9b00      	ldr	r3, [sp, #0]
        object->requestedQualityOfService.precedence = (unsigned char)var_toInteger(tmp3);
   15b9a:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
        ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   15b9e:	6898      	ldr	r0, [r3, #8]
   15ba0:	aa01      	add	r2, sp, #4
   15ba2:	2101      	movs	r1, #1
   15ba4:	f004 fb7d 	bl	1a2a2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   15ba8:	4604      	mov	r4, r0
   15baa:	2800      	cmp	r0, #0
   15bac:	f47f af7e 	bne.w	15aac <cosem_setGprsSetup+0x28>
        object->requestedQualityOfService.delay = (unsigned char)var_toInteger(tmp3);
   15bb0:	9801      	ldr	r0, [sp, #4]
   15bb2:	f004 fcf0 	bl	1a596 <var_toInteger>
        ret = va_getByIndex(tmp->Arr, 2, &tmp3);
   15bb6:	9b00      	ldr	r3, [sp, #0]
        object->requestedQualityOfService.delay = (unsigned char)var_toInteger(tmp3);
   15bb8:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
        ret = va_getByIndex(tmp->Arr, 2, &tmp3);
   15bbc:	6898      	ldr	r0, [r3, #8]
   15bbe:	aa01      	add	r2, sp, #4
   15bc0:	2102      	movs	r1, #2
   15bc2:	f004 fb6e 	bl	1a2a2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   15bc6:	4604      	mov	r4, r0
   15bc8:	2800      	cmp	r0, #0
   15bca:	f47f af6f 	bne.w	15aac <cosem_setGprsSetup+0x28>
        object->requestedQualityOfService.reliability = (unsigned char)var_toInteger(tmp3);
   15bce:	9801      	ldr	r0, [sp, #4]
   15bd0:	f004 fce1 	bl	1a596 <var_toInteger>
        ret = va_getByIndex(tmp->Arr, 3, &tmp3);
   15bd4:	9b00      	ldr	r3, [sp, #0]
        object->requestedQualityOfService.reliability = (unsigned char)var_toInteger(tmp3);
   15bd6:	f885 0025 	strb.w	r0, [r5, #37]	; 0x25
        ret = va_getByIndex(tmp->Arr, 3, &tmp3);
   15bda:	6898      	ldr	r0, [r3, #8]
   15bdc:	aa01      	add	r2, sp, #4
   15bde:	2103      	movs	r1, #3
   15be0:	f004 fb5f 	bl	1a2a2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   15be4:	4604      	mov	r4, r0
   15be6:	2800      	cmp	r0, #0
   15be8:	f47f af60 	bne.w	15aac <cosem_setGprsSetup+0x28>
        object->requestedQualityOfService.peakThroughput = (unsigned char)var_toInteger(tmp3);
   15bec:	9801      	ldr	r0, [sp, #4]
   15bee:	f004 fcd2 	bl	1a596 <var_toInteger>
        ret = va_getByIndex(tmp->Arr, 4, &tmp3);
   15bf2:	9b00      	ldr	r3, [sp, #0]
        object->requestedQualityOfService.peakThroughput = (unsigned char)var_toInteger(tmp3);
   15bf4:	f885 0026 	strb.w	r0, [r5, #38]	; 0x26
        ret = va_getByIndex(tmp->Arr, 4, &tmp3);
   15bf8:	6898      	ldr	r0, [r3, #8]
   15bfa:	aa01      	add	r2, sp, #4
   15bfc:	2104      	movs	r1, #4
   15bfe:	f004 fb50 	bl	1a2a2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   15c02:	4604      	mov	r4, r0
   15c04:	2800      	cmp	r0, #0
   15c06:	f47f af51 	bne.w	15aac <cosem_setGprsSetup+0x28>
        object->requestedQualityOfService.meanThroughput = (unsigned char)var_toInteger(tmp3);
   15c0a:	9801      	ldr	r0, [sp, #4]
   15c0c:	f004 fcc3 	bl	1a596 <var_toInteger>
   15c10:	f885 0027 	strb.w	r0, [r5, #39]	; 0x27
   15c14:	e74a      	b.n	15aac <cosem_setGprsSetup+0x28>
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   15c16:	f44f 7481 	mov.w	r4, #258	; 0x102
   15c1a:	e747      	b.n	15aac <cosem_setGprsSetup+0x28>

00015c1c <cosem_setSecuritySetup>:
{
   15c1c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   15c20:	3902      	subs	r1, #2
   15c22:	4606      	mov	r6, r0
   15c24:	4617      	mov	r7, r2
   15c26:	2904      	cmp	r1, #4
   15c28:	f200 8124 	bhi.w	15e74 <cosem_setSecuritySetup+0x258>
   15c2c:	e8df f001 	tbb	[pc, r1]
   15c30:	29110c03 	.word	0x29110c03
   15c34:	33          	.byte	0x33
   15c35:	00          	.byte	0x00
        object->securityPolicy = (DLMS_SECURITY_POLICY)var_toInteger(value);
   15c36:	4610      	mov	r0, r2
   15c38:	f004 fcad 	bl	1a596 <var_toInteger>
   15c3c:	7430      	strb	r0, [r6, #16]
    int pos, ret = 0;
   15c3e:	2400      	movs	r4, #0
}
   15c40:	4620      	mov	r0, r4
   15c42:	b002      	add	sp, #8
   15c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        object->securitySuite = (DLMS_SECURITY_SUITE)var_toInteger(value);
   15c48:	4610      	mov	r0, r2
   15c4a:	f004 fca4 	bl	1a596 <var_toInteger>
   15c4e:	7470      	strb	r0, [r6, #17]
   15c50:	e7f5      	b.n	15c3e <cosem_setSecuritySetup+0x22>
        if (value->byteArr == NULL || bb_available(value->byteArr) != 8)
   15c52:	6890      	ldr	r0, [r2, #8]
   15c54:	b908      	cbnz	r0, 15c5a <cosem_setSecuritySetup+0x3e>
            ret = DLMS_ERROR_CODE_INCONSISTENT_CLASS_OR_OBJECT;
   15c56:	2409      	movs	r4, #9
   15c58:	e7f2      	b.n	15c40 <cosem_setSecuritySetup+0x24>
        if (value->byteArr == NULL || bb_available(value->byteArr) != 8)
   15c5a:	f7f6 ffb6 	bl	cbca <bb_available>
   15c5e:	2808      	cmp	r0, #8
   15c60:	4605      	mov	r5, r0
   15c62:	d1f8      	bne.n	15c56 <cosem_setSecuritySetup+0x3a>
            if ((ret = bb_clear(&object->clientSystemTitle)) != 0 ||
   15c64:	3620      	adds	r6, #32
            if ((ret = bb_clear(&object->serverSystemTitle)) != 0 ||
   15c66:	4630      	mov	r0, r6
   15c68:	f7f7 f97f 	bl	cf6a <bb_clear>
   15c6c:	4604      	mov	r4, r0
   15c6e:	2800      	cmp	r0, #0
   15c70:	d1e6      	bne.n	15c40 <cosem_setSecuritySetup+0x24>
                (ret = bb_set2(&object->serverSystemTitle, value->byteArr, value->byteArr->position, 8)) != 0)
   15c72:	68b9      	ldr	r1, [r7, #8]
   15c74:	462b      	mov	r3, r5
   15c76:	890a      	ldrh	r2, [r1, #8]
   15c78:	4630      	mov	r0, r6
   15c7a:	f7f7 f931 	bl	cee0 <bb_set2>
   15c7e:	4604      	mov	r4, r0
   15c80:	e7de      	b.n	15c40 <cosem_setSecuritySetup+0x24>
        if (value->byteArr == NULL || bb_available(value->byteArr) != 8)
   15c82:	6890      	ldr	r0, [r2, #8]
   15c84:	2800      	cmp	r0, #0
   15c86:	d0e6      	beq.n	15c56 <cosem_setSecuritySetup+0x3a>
   15c88:	f7f6 ff9f 	bl	cbca <bb_available>
   15c8c:	2808      	cmp	r0, #8
   15c8e:	4605      	mov	r5, r0
   15c90:	d1e1      	bne.n	15c56 <cosem_setSecuritySetup+0x3a>
            if ((ret = bb_clear(&object->serverSystemTitle)) != 0 ||
   15c92:	3614      	adds	r6, #20
   15c94:	e7e7      	b.n	15c66 <cosem_setSecuritySetup+0x4a>
        obj_clearCertificateInfo(&object->certificates);
   15c96:	362c      	adds	r6, #44	; 0x2c
   15c98:	4630      	mov	r0, r6
   15c9a:	f7fe f840 	bl	13d1e <obj_clearCertificateInfo>
        if (value->Arr != NULL)
   15c9e:	68bb      	ldr	r3, [r7, #8]
   15ca0:	2b00      	cmp	r3, #0
   15ca2:	d0cc      	beq.n	15c3e <cosem_setSecuritySetup+0x22>
    gxCertificateInfo* it = NULL;
   15ca4:	2500      	movs	r5, #0
            for (pos = 0; pos != value->Arr->size; ++pos)
   15ca6:	46a9      	mov	r9, r5
   15ca8:	e064      	b.n	15d74 <cosem_setSecuritySetup+0x158>
                    it->serialNumber = NULL;
   15caa:	2300      	movs	r3, #0
   15cac:	606b      	str	r3, [r5, #4]
   15cae:	e0b1      	b.n	15e14 <cosem_setSecuritySetup+0x1f8>
                    memcpy(it->issuer, tmp3->byteArr->data, tmp3->byteArr->size);
   15cb0:	f8dd a004 	ldr.w	sl, [sp, #4]
   15cb4:	f8da 3008 	ldr.w	r3, [sl, #8]
   15cb8:	88da      	ldrh	r2, [r3, #6]
   15cba:	6819      	ldr	r1, [r3, #0]
   15cbc:	f006 fa10 	bl	1c0e0 <memcpy>
                    it->issuer[tmp3->byteArr->size] = 0;
   15cc0:	f8da 3008 	ldr.w	r3, [sl, #8]
   15cc4:	88db      	ldrh	r3, [r3, #6]
   15cc6:	f808 4003 	strb.w	r4, [r8, r3]
                if ((ret = va_getByIndex(tmp->Arr, 4, &tmp3)) != DLMS_ERROR_CODE_OK)
   15cca:	9b00      	ldr	r3, [sp, #0]
   15ccc:	aa01      	add	r2, sp, #4
   15cce:	6898      	ldr	r0, [r3, #8]
   15cd0:	2104      	movs	r1, #4
   15cd2:	f004 fae6 	bl	1a2a2 <va_getByIndex>
   15cd6:	4604      	mov	r4, r0
   15cd8:	2800      	cmp	r0, #0
   15cda:	f040 80b2 	bne.w	15e42 <cosem_setSecuritySetup+0x226>
                if (tmp3->byteArr != NULL && tmp3->byteArr->size != 0)
   15cde:	9b01      	ldr	r3, [sp, #4]
   15ce0:	689b      	ldr	r3, [r3, #8]
   15ce2:	2b00      	cmp	r3, #0
   15ce4:	f000 80c0 	beq.w	15e68 <cosem_setSecuritySetup+0x24c>
   15ce8:	88d8      	ldrh	r0, [r3, #6]
   15cea:	2800      	cmp	r0, #0
   15cec:	f000 80bc 	beq.w	15e68 <cosem_setSecuritySetup+0x24c>
                    it->subject = gxmalloc(tmp3->byteArr->size + 1);
   15cf0:	3001      	adds	r0, #1
   15cf2:	f7f5 ff5f 	bl	bbb4 <malloc>
   15cf6:	4680      	mov	r8, r0
   15cf8:	60e8      	str	r0, [r5, #12]
                    if (it->subject == NULL)
   15cfa:	2800      	cmp	r0, #0
   15cfc:	f000 809f 	beq.w	15e3e <cosem_setSecuritySetup+0x222>
                    memcpy(it->subject, tmp3->byteArr->data, tmp3->byteArr->size);
   15d00:	f8dd a004 	ldr.w	sl, [sp, #4]
   15d04:	f8da 3008 	ldr.w	r3, [sl, #8]
   15d08:	88da      	ldrh	r2, [r3, #6]
   15d0a:	6819      	ldr	r1, [r3, #0]
   15d0c:	f006 f9e8 	bl	1c0e0 <memcpy>
                    it->subject[tmp3->byteArr->size] = 0;
   15d10:	f8da 3008 	ldr.w	r3, [sl, #8]
   15d14:	88db      	ldrh	r3, [r3, #6]
   15d16:	f808 4003 	strb.w	r4, [r8, r3]
                if ((ret = va_getByIndex(tmp->Arr, 5, &tmp3)) != DLMS_ERROR_CODE_OK)
   15d1a:	9b00      	ldr	r3, [sp, #0]
   15d1c:	aa01      	add	r2, sp, #4
   15d1e:	6898      	ldr	r0, [r3, #8]
   15d20:	2105      	movs	r1, #5
   15d22:	f004 fabe 	bl	1a2a2 <va_getByIndex>
   15d26:	4604      	mov	r4, r0
   15d28:	2800      	cmp	r0, #0
   15d2a:	f040 808a 	bne.w	15e42 <cosem_setSecuritySetup+0x226>
                if (tmp3->byteArr != NULL && tmp3->byteArr->size != 0)
   15d2e:	9b01      	ldr	r3, [sp, #4]
   15d30:	689b      	ldr	r3, [r3, #8]
   15d32:	2b00      	cmp	r3, #0
   15d34:	f000 809b 	beq.w	15e6e <cosem_setSecuritySetup+0x252>
   15d38:	88d8      	ldrh	r0, [r3, #6]
   15d3a:	2800      	cmp	r0, #0
   15d3c:	f000 8097 	beq.w	15e6e <cosem_setSecuritySetup+0x252>
                    it->subjectAltName = gxmalloc(tmp3->byteArr->size + 1);
   15d40:	3001      	adds	r0, #1
   15d42:	f7f5 ff37 	bl	bbb4 <malloc>
   15d46:	4680      	mov	r8, r0
   15d48:	6128      	str	r0, [r5, #16]
                    if (it->subjectAltName == NULL)
   15d4a:	2800      	cmp	r0, #0
   15d4c:	d077      	beq.n	15e3e <cosem_setSecuritySetup+0x222>
                    memcpy(it->subjectAltName, tmp3->byteArr->data, tmp3->byteArr->size);
   15d4e:	f8dd a004 	ldr.w	sl, [sp, #4]
   15d52:	f8da 3008 	ldr.w	r3, [sl, #8]
   15d56:	88da      	ldrh	r2, [r3, #6]
   15d58:	6819      	ldr	r1, [r3, #0]
   15d5a:	f006 f9c1 	bl	1c0e0 <memcpy>
                    it->subjectAltName[tmp3->byteArr->size] = 0;
   15d5e:	f8da 3008 	ldr.w	r3, [sl, #8]
   15d62:	88db      	ldrh	r3, [r3, #6]
   15d64:	f808 4003 	strb.w	r4, [r8, r3]
                arr_push(&object->certificates, it);
   15d68:	4629      	mov	r1, r5
   15d6a:	4630      	mov	r0, r6
   15d6c:	f7fa face 	bl	1030c <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   15d70:	f109 0901 	add.w	r9, r9, #1
   15d74:	68b8      	ldr	r0, [r7, #8]
   15d76:	88c3      	ldrh	r3, [r0, #6]
   15d78:	454b      	cmp	r3, r9
   15d7a:	f43f af60 	beq.w	15c3e <cosem_setSecuritySetup+0x22>
                if ((ret = va_getByIndex(value->Arr, pos, &tmp)) != DLMS_ERROR_CODE_OK)
   15d7e:	466a      	mov	r2, sp
   15d80:	4649      	mov	r1, r9
   15d82:	f004 fa8e 	bl	1a2a2 <va_getByIndex>
   15d86:	4604      	mov	r4, r0
   15d88:	2800      	cmp	r0, #0
   15d8a:	d178      	bne.n	15e7e <cosem_setSecuritySetup+0x262>
                it = (gxCertificateInfo*)gxmalloc(sizeof(gxCertificateInfo));
   15d8c:	2014      	movs	r0, #20
   15d8e:	f7f5 ff11 	bl	bbb4 <malloc>
                if (it == NULL)
   15d92:	4605      	mov	r5, r0
   15d94:	2800      	cmp	r0, #0
   15d96:	d06f      	beq.n	15e78 <cosem_setSecuritySetup+0x25c>
                if ((ret = va_getByIndex(tmp->Arr, 0, &tmp3)) != DLMS_ERROR_CODE_OK)
   15d98:	9b00      	ldr	r3, [sp, #0]
   15d9a:	4621      	mov	r1, r4
   15d9c:	6898      	ldr	r0, [r3, #8]
   15d9e:	aa01      	add	r2, sp, #4
   15da0:	f004 fa7f 	bl	1a2a2 <va_getByIndex>
   15da4:	4604      	mov	r4, r0
   15da6:	2800      	cmp	r0, #0
   15da8:	d14b      	bne.n	15e42 <cosem_setSecuritySetup+0x226>
                it->entity = (DLMS_CERTIFICATE_ENTITY)var_toInteger(tmp3);
   15daa:	9801      	ldr	r0, [sp, #4]
   15dac:	f004 fbf3 	bl	1a596 <var_toInteger>
                if ((ret = va_getByIndex(tmp->Arr, 1, &tmp3)) != DLMS_ERROR_CODE_OK)
   15db0:	9b00      	ldr	r3, [sp, #0]
                it->entity = (DLMS_CERTIFICATE_ENTITY)var_toInteger(tmp3);
   15db2:	7028      	strb	r0, [r5, #0]
                if ((ret = va_getByIndex(tmp->Arr, 1, &tmp3)) != DLMS_ERROR_CODE_OK)
   15db4:	6898      	ldr	r0, [r3, #8]
   15db6:	aa01      	add	r2, sp, #4
   15db8:	2101      	movs	r1, #1
   15dba:	f004 fa72 	bl	1a2a2 <va_getByIndex>
   15dbe:	4604      	mov	r4, r0
   15dc0:	2800      	cmp	r0, #0
   15dc2:	d13e      	bne.n	15e42 <cosem_setSecuritySetup+0x226>
                it->type = (DLMS_CERTIFICATE_TYPE)var_toInteger(tmp3);
   15dc4:	9801      	ldr	r0, [sp, #4]
   15dc6:	f004 fbe6 	bl	1a596 <var_toInteger>
                if ((ret = va_getByIndex(tmp->Arr, 2, &tmp3)) != DLMS_ERROR_CODE_OK)
   15dca:	9b00      	ldr	r3, [sp, #0]
                it->type = (DLMS_CERTIFICATE_TYPE)var_toInteger(tmp3);
   15dcc:	7068      	strb	r0, [r5, #1]
                if ((ret = va_getByIndex(tmp->Arr, 2, &tmp3)) != DLMS_ERROR_CODE_OK)
   15dce:	6898      	ldr	r0, [r3, #8]
   15dd0:	aa01      	add	r2, sp, #4
   15dd2:	2102      	movs	r1, #2
   15dd4:	f004 fa65 	bl	1a2a2 <va_getByIndex>
   15dd8:	4604      	mov	r4, r0
   15dda:	2800      	cmp	r0, #0
   15ddc:	d131      	bne.n	15e42 <cosem_setSecuritySetup+0x226>
                if (tmp3->byteArr != NULL && tmp3->byteArr->size != 0)
   15dde:	9b01      	ldr	r3, [sp, #4]
   15de0:	689b      	ldr	r3, [r3, #8]
   15de2:	2b00      	cmp	r3, #0
   15de4:	f43f af61 	beq.w	15caa <cosem_setSecuritySetup+0x8e>
   15de8:	88d8      	ldrh	r0, [r3, #6]
   15dea:	2800      	cmp	r0, #0
   15dec:	f43f af5d 	beq.w	15caa <cosem_setSecuritySetup+0x8e>
                    it->serialNumber = gxmalloc(tmp3->byteArr->size + 1);
   15df0:	3001      	adds	r0, #1
   15df2:	f7f5 fedf 	bl	bbb4 <malloc>
                    memcpy(it->serialNumber, tmp3->byteArr->data, tmp3->byteArr->size);
   15df6:	f8dd a004 	ldr.w	sl, [sp, #4]
                    it->serialNumber = gxmalloc(tmp3->byteArr->size + 1);
   15dfa:	6068      	str	r0, [r5, #4]
                    memcpy(it->serialNumber, tmp3->byteArr->data, tmp3->byteArr->size);
   15dfc:	f8da 3008 	ldr.w	r3, [sl, #8]
   15e00:	88da      	ldrh	r2, [r3, #6]
   15e02:	6819      	ldr	r1, [r3, #0]
                    it->serialNumber = gxmalloc(tmp3->byteArr->size + 1);
   15e04:	4680      	mov	r8, r0
   15e06:	f006 f96b 	bl	1c0e0 <memcpy>
                    it->serialNumber[tmp3->byteArr->size] = 0;
   15e0a:	f8da 3008 	ldr.w	r3, [sl, #8]
   15e0e:	88db      	ldrh	r3, [r3, #6]
   15e10:	f808 4003 	strb.w	r4, [r8, r3]
                if ((ret = va_getByIndex(tmp->Arr, 3, &tmp3)) != DLMS_ERROR_CODE_OK)
   15e14:	9b00      	ldr	r3, [sp, #0]
   15e16:	aa01      	add	r2, sp, #4
   15e18:	6898      	ldr	r0, [r3, #8]
   15e1a:	2103      	movs	r1, #3
   15e1c:	f004 fa41 	bl	1a2a2 <va_getByIndex>
   15e20:	4604      	mov	r4, r0
   15e22:	b970      	cbnz	r0, 15e42 <cosem_setSecuritySetup+0x226>
                if (tmp3->byteArr != NULL && tmp3->byteArr->size != 0)
   15e24:	9b01      	ldr	r3, [sp, #4]
   15e26:	689b      	ldr	r3, [r3, #8]
   15e28:	b1db      	cbz	r3, 15e62 <cosem_setSecuritySetup+0x246>
   15e2a:	88d8      	ldrh	r0, [r3, #6]
   15e2c:	b1c8      	cbz	r0, 15e62 <cosem_setSecuritySetup+0x246>
                    it->issuer = gxmalloc(tmp3->byteArr->size + 1);
   15e2e:	3001      	adds	r0, #1
   15e30:	f7f5 fec0 	bl	bbb4 <malloc>
   15e34:	4680      	mov	r8, r0
   15e36:	60a8      	str	r0, [r5, #8]
                    if (it->issuer == NULL)
   15e38:	2800      	cmp	r0, #0
   15e3a:	f47f af39 	bne.w	15cb0 <cosem_setSecuritySetup+0x94>
                        ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   15e3e:	f44f 7482 	mov.w	r4, #260	; 0x104
                if (it->serialNumber != NULL)
   15e42:	6868      	ldr	r0, [r5, #4]
   15e44:	b108      	cbz	r0, 15e4a <cosem_setSecuritySetup+0x22e>
                    gxfree(it->serialNumber);
   15e46:	f7f5 febd 	bl	bbc4 <free>
                if (it->subject != NULL)
   15e4a:	68e8      	ldr	r0, [r5, #12]
   15e4c:	b108      	cbz	r0, 15e52 <cosem_setSecuritySetup+0x236>
                    gxfree(it->subject);
   15e4e:	f7f5 feb9 	bl	bbc4 <free>
                if (it->issuer != NULL)
   15e52:	68a8      	ldr	r0, [r5, #8]
   15e54:	b108      	cbz	r0, 15e5a <cosem_setSecuritySetup+0x23e>
                    gxfree(it->issuer);
   15e56:	f7f5 feb5 	bl	bbc4 <free>
                gxfree(it);
   15e5a:	4628      	mov	r0, r5
   15e5c:	f7f5 feb2 	bl	bbc4 <free>
   15e60:	e6ee      	b.n	15c40 <cosem_setSecuritySetup+0x24>
                    it->issuer = NULL;
   15e62:	2300      	movs	r3, #0
   15e64:	60ab      	str	r3, [r5, #8]
   15e66:	e730      	b.n	15cca <cosem_setSecuritySetup+0xae>
                    it->subject = NULL;
   15e68:	2300      	movs	r3, #0
   15e6a:	60eb      	str	r3, [r5, #12]
   15e6c:	e755      	b.n	15d1a <cosem_setSecuritySetup+0xfe>
                    it->subjectAltName = NULL;
   15e6e:	2300      	movs	r3, #0
   15e70:	612b      	str	r3, [r5, #16]
   15e72:	e779      	b.n	15d68 <cosem_setSecuritySetup+0x14c>
            ret = DLMS_ERROR_CODE_INCONSISTENT_CLASS_OR_OBJECT;
   15e74:	2403      	movs	r4, #3
   15e76:	e6e3      	b.n	15c40 <cosem_setSecuritySetup+0x24>
                    ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   15e78:	f44f 7482 	mov.w	r4, #260	; 0x104
    return ret;
   15e7c:	e6e0      	b.n	15c40 <cosem_setSecuritySetup+0x24>
            if (ret != 0 && it != NULL)
   15e7e:	2d00      	cmp	r5, #0
   15e80:	f43f aede 	beq.w	15c40 <cosem_setSecuritySetup+0x24>
   15e84:	e7dd      	b.n	15e42 <cosem_setSecuritySetup+0x226>

00015e86 <cosem_setIecHdlcSetup>:
    if (index == 2)
   15e86:	2902      	cmp	r1, #2
{
   15e88:	b510      	push	{r4, lr}
   15e8a:	4604      	mov	r4, r0
   15e8c:	4610      	mov	r0, r2
    if (index == 2)
   15e8e:	d104      	bne.n	15e9a <cosem_setIecHdlcSetup+0x14>
        object->communicationSpeed = (DLMS_BAUD_RATE)var_toInteger(value);
   15e90:	f004 fb81 	bl	1a596 <var_toInteger>
   15e94:	75a0      	strb	r0, [r4, #22]
    return DLMS_ERROR_CODE_OK;
   15e96:	2000      	movs	r0, #0
}
   15e98:	bd10      	pop	{r4, pc}
    else if (index == 3)
   15e9a:	2903      	cmp	r1, #3
   15e9c:	d103      	bne.n	15ea6 <cosem_setIecHdlcSetup+0x20>
        object->windowSizeTransmit = (unsigned char)var_toInteger(value);
   15e9e:	f004 fb7a 	bl	1a596 <var_toInteger>
   15ea2:	75e0      	strb	r0, [r4, #23]
   15ea4:	e7f7      	b.n	15e96 <cosem_setIecHdlcSetup+0x10>
    else if (index == 4)
   15ea6:	2904      	cmp	r1, #4
   15ea8:	d103      	bne.n	15eb2 <cosem_setIecHdlcSetup+0x2c>
        object->windowSizeReceive = (unsigned char)var_toInteger(value);
   15eaa:	f004 fb74 	bl	1a596 <var_toInteger>
   15eae:	7620      	strb	r0, [r4, #24]
   15eb0:	e7f1      	b.n	15e96 <cosem_setIecHdlcSetup+0x10>
    else if (index == 5)
   15eb2:	2905      	cmp	r1, #5
   15eb4:	d103      	bne.n	15ebe <cosem_setIecHdlcSetup+0x38>
        object->maximumInfoLengthTransmit = (uint16_t)var_toInteger(value);
   15eb6:	f004 fb6e 	bl	1a596 <var_toInteger>
   15eba:	82a0      	strh	r0, [r4, #20]
   15ebc:	e7eb      	b.n	15e96 <cosem_setIecHdlcSetup+0x10>
    else if (index == 6)
   15ebe:	2906      	cmp	r1, #6
   15ec0:	d103      	bne.n	15eca <cosem_setIecHdlcSetup+0x44>
        object->maximumInfoLengthReceive = (uint16_t)var_toInteger(value);
   15ec2:	f004 fb68 	bl	1a596 <var_toInteger>
   15ec6:	83a0      	strh	r0, [r4, #28]
   15ec8:	e7e5      	b.n	15e96 <cosem_setIecHdlcSetup+0x10>
    else if (index == 7)
   15eca:	2907      	cmp	r1, #7
   15ecc:	d103      	bne.n	15ed6 <cosem_setIecHdlcSetup+0x50>
        object->interCharachterTimeout = (uint16_t)var_toInteger(value);
   15ece:	f004 fb62 	bl	1a596 <var_toInteger>
   15ed2:	8360      	strh	r0, [r4, #26]
   15ed4:	e7df      	b.n	15e96 <cosem_setIecHdlcSetup+0x10>
    else if (index == 8)
   15ed6:	2908      	cmp	r1, #8
   15ed8:	d103      	bne.n	15ee2 <cosem_setIecHdlcSetup+0x5c>
        object->inactivityTimeout = (uint16_t)var_toInteger(value);
   15eda:	f004 fb5c 	bl	1a596 <var_toInteger>
   15ede:	8220      	strh	r0, [r4, #16]
   15ee0:	e7d9      	b.n	15e96 <cosem_setIecHdlcSetup+0x10>
    else if (index == 9)
   15ee2:	2909      	cmp	r1, #9
   15ee4:	d103      	bne.n	15eee <cosem_setIecHdlcSetup+0x68>
        object->deviceAddress = (uint16_t)var_toInteger(value);
   15ee6:	f004 fb56 	bl	1a596 <var_toInteger>
   15eea:	8260      	strh	r0, [r4, #18]
   15eec:	e7d3      	b.n	15e96 <cosem_setIecHdlcSetup+0x10>
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   15eee:	f44f 7081 	mov.w	r0, #258	; 0x102
   15ef2:	e7d1      	b.n	15e98 <cosem_setIecHdlcSetup+0x12>

00015ef4 <cosem_setIecLocalPortSetup>:
    if (index == 2)
   15ef4:	2902      	cmp	r1, #2
{
   15ef6:	b570      	push	{r4, r5, r6, lr}
   15ef8:	4604      	mov	r4, r0
   15efa:	4615      	mov	r5, r2
    if (index == 2)
   15efc:	d106      	bne.n	15f0c <cosem_setIecLocalPortSetup+0x18>
        object->defaultMode = (DLMS_OPTICAL_PROTOCOL_MODE)var_toInteger(value);
   15efe:	4610      	mov	r0, r2
   15f00:	f004 fb49 	bl	1a596 <var_toInteger>
   15f04:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    int ret = 0;
   15f08:	2000      	movs	r0, #0
}
   15f0a:	bd70      	pop	{r4, r5, r6, pc}
    else if (index == 3)
   15f0c:	2903      	cmp	r1, #3
   15f0e:	d105      	bne.n	15f1c <cosem_setIecLocalPortSetup+0x28>
        object->defaultBaudrate = (DLMS_BAUD_RATE)var_toInteger(value);
   15f10:	4610      	mov	r0, r2
   15f12:	f004 fb40 	bl	1a596 <var_toInteger>
   15f16:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
   15f1a:	e7f5      	b.n	15f08 <cosem_setIecLocalPortSetup+0x14>
    else if (index == 4)
   15f1c:	2904      	cmp	r1, #4
   15f1e:	d105      	bne.n	15f2c <cosem_setIecLocalPortSetup+0x38>
        object->proposedBaudrate = (DLMS_BAUD_RATE)var_toInteger(value);
   15f20:	4610      	mov	r0, r2
   15f22:	f004 fb38 	bl	1a596 <var_toInteger>
   15f26:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
   15f2a:	e7ed      	b.n	15f08 <cosem_setIecLocalPortSetup+0x14>
    else if (index == 5)
   15f2c:	2905      	cmp	r1, #5
   15f2e:	d105      	bne.n	15f3c <cosem_setIecLocalPortSetup+0x48>
        object->responseTime = (DLMS_LOCAL_PORT_RESPONSE_TIME)var_toInteger(value);
   15f30:	4610      	mov	r0, r2
   15f32:	f004 fb30 	bl	1a596 <var_toInteger>
   15f36:	f884 0037 	strb.w	r0, [r4, #55]	; 0x37
   15f3a:	e7e5      	b.n	15f08 <cosem_setIecLocalPortSetup+0x14>
    else if (index == 6)
   15f3c:	2906      	cmp	r1, #6
   15f3e:	d10f      	bne.n	15f60 <cosem_setIecLocalPortSetup+0x6c>
        bb_clear(&object->deviceAddress);
   15f40:	3438      	adds	r4, #56	; 0x38
        bb_clear(&object->password5);
   15f42:	4620      	mov	r0, r4
   15f44:	f7f7 f811 	bl	cf6a <bb_clear>
        ret = bb_set2(&object->password5, value->byteArr, 0, bb_size(value->byteArr));
   15f48:	68ad      	ldr	r5, [r5, #8]
   15f4a:	4628      	mov	r0, r5
   15f4c:	f7f6 fe47 	bl	cbde <bb_size>
   15f50:	4629      	mov	r1, r5
   15f52:	4603      	mov	r3, r0
   15f54:	2200      	movs	r2, #0
   15f56:	4620      	mov	r0, r4
}
   15f58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ret = bb_set2(&object->password5, value->byteArr, 0, bb_size(value->byteArr));
   15f5c:	f7f6 bfc0 	b.w	cee0 <bb_set2>
    else if (index == 7)
   15f60:	2907      	cmp	r1, #7
   15f62:	d101      	bne.n	15f68 <cosem_setIecLocalPortSetup+0x74>
        bb_clear(&object->password1);
   15f64:	3410      	adds	r4, #16
   15f66:	e7ec      	b.n	15f42 <cosem_setIecLocalPortSetup+0x4e>
    else if (index == 8)
   15f68:	2908      	cmp	r1, #8
   15f6a:	d101      	bne.n	15f70 <cosem_setIecLocalPortSetup+0x7c>
        bb_clear(&object->password2);
   15f6c:	341c      	adds	r4, #28
   15f6e:	e7e8      	b.n	15f42 <cosem_setIecLocalPortSetup+0x4e>
    else if (index == 9)
   15f70:	2909      	cmp	r1, #9
   15f72:	d101      	bne.n	15f78 <cosem_setIecLocalPortSetup+0x84>
        bb_clear(&object->password5);
   15f74:	3428      	adds	r4, #40	; 0x28
   15f76:	e7e4      	b.n	15f42 <cosem_setIecLocalPortSetup+0x4e>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   15f78:	f44f 7081 	mov.w	r0, #258	; 0x102
    return ret;
   15f7c:	e7c5      	b.n	15f0a <cosem_setIecLocalPortSetup+0x16>

00015f7e <cosem_setIecTwistedPairSetup>:
    if (index == 2)
   15f7e:	2902      	cmp	r1, #2
{
   15f80:	b573      	push	{r0, r1, r4, r5, r6, lr}
   15f82:	4604      	mov	r4, r0
   15f84:	4615      	mov	r5, r2
    if (index == 2)
   15f86:	d106      	bne.n	15f96 <cosem_setIecTwistedPairSetup+0x18>
        object->mode = var_toInteger(value);
   15f88:	4610      	mov	r0, r2
   15f8a:	f004 fb04 	bl	1a596 <var_toInteger>
   15f8e:	7420      	strb	r0, [r4, #16]
    int pos, ret = 0;
   15f90:	2000      	movs	r0, #0
}
   15f92:	b002      	add	sp, #8
   15f94:	bd70      	pop	{r4, r5, r6, pc}
    else if (index == 3)
   15f96:	2903      	cmp	r1, #3
   15f98:	d104      	bne.n	15fa4 <cosem_setIecTwistedPairSetup+0x26>
        object->speed = var_toInteger(value);
   15f9a:	4610      	mov	r0, r2
   15f9c:	f004 fafb 	bl	1a596 <var_toInteger>
   15fa0:	7460      	strb	r0, [r4, #17]
   15fa2:	e7f5      	b.n	15f90 <cosem_setIecTwistedPairSetup+0x12>
    else if (index == 4)
   15fa4:	2904      	cmp	r1, #4
   15fa6:	d11b      	bne.n	15fe0 <cosem_setIecTwistedPairSetup+0x62>
        bb_clear(&object->primaryAddresses);
   15fa8:	3414      	adds	r4, #20
   15faa:	4620      	mov	r0, r4
   15fac:	f7f6 ffdd 	bl	cf6a <bb_clear>
        if (value->Arr != NULL)
   15fb0:	68ab      	ldr	r3, [r5, #8]
   15fb2:	2b00      	cmp	r3, #0
   15fb4:	d0ec      	beq.n	15f90 <cosem_setIecTwistedPairSetup+0x12>
            for (pos = 0; pos != value->Arr->size; ++pos)
   15fb6:	2600      	movs	r6, #0
   15fb8:	e00d      	b.n	15fd6 <cosem_setIecTwistedPairSetup+0x58>
                if ((ret = va_getByIndex(value->Arr, pos, &tmp)) != DLMS_ERROR_CODE_OK ||
   15fba:	aa01      	add	r2, sp, #4
   15fbc:	4631      	mov	r1, r6
   15fbe:	f004 f970 	bl	1a2a2 <va_getByIndex>
   15fc2:	2800      	cmp	r0, #0
   15fc4:	d1e5      	bne.n	15f92 <cosem_setIecTwistedPairSetup+0x14>
                    (ret = bb_setUInt8(&object->primaryAddresses, tmp->bVal)) != DLMS_ERROR_CODE_OK)
   15fc6:	9b01      	ldr	r3, [sp, #4]
   15fc8:	4620      	mov	r0, r4
   15fca:	7a19      	ldrb	r1, [r3, #8]
   15fcc:	f7f6 fe73 	bl	ccb6 <bb_setUInt8>
                if ((ret = va_getByIndex(value->Arr, pos, &tmp)) != DLMS_ERROR_CODE_OK ||
   15fd0:	2800      	cmp	r0, #0
   15fd2:	d1de      	bne.n	15f92 <cosem_setIecTwistedPairSetup+0x14>
            for (pos = 0; pos != value->Arr->size; ++pos)
   15fd4:	3601      	adds	r6, #1
   15fd6:	68a8      	ldr	r0, [r5, #8]
   15fd8:	88c3      	ldrh	r3, [r0, #6]
   15fda:	42b3      	cmp	r3, r6
   15fdc:	d1ed      	bne.n	15fba <cosem_setIecTwistedPairSetup+0x3c>
   15fde:	e7d7      	b.n	15f90 <cosem_setIecTwistedPairSetup+0x12>
    else if (index == 5)
   15fe0:	2905      	cmp	r1, #5
   15fe2:	d11b      	bne.n	1601c <cosem_setIecTwistedPairSetup+0x9e>
        bb_clear(&object->tabis);
   15fe4:	3420      	adds	r4, #32
   15fe6:	4620      	mov	r0, r4
   15fe8:	f7f6 ffbf 	bl	cf6a <bb_clear>
        if (value->Arr != NULL)
   15fec:	68ab      	ldr	r3, [r5, #8]
   15fee:	2b00      	cmp	r3, #0
   15ff0:	d0ce      	beq.n	15f90 <cosem_setIecTwistedPairSetup+0x12>
            for (pos = 0; pos != value->Arr->size; ++pos)
   15ff2:	2600      	movs	r6, #0
   15ff4:	e00d      	b.n	16012 <cosem_setIecTwistedPairSetup+0x94>
                if ((ret = va_getByIndex(value->Arr, pos, &tmp)) != DLMS_ERROR_CODE_OK ||
   15ff6:	aa01      	add	r2, sp, #4
   15ff8:	4631      	mov	r1, r6
   15ffa:	f004 f952 	bl	1a2a2 <va_getByIndex>
   15ffe:	2800      	cmp	r0, #0
   16000:	d1c7      	bne.n	15f92 <cosem_setIecTwistedPairSetup+0x14>
                    (ret = bb_setUInt8(&object->tabis, tmp->bVal)) != DLMS_ERROR_CODE_OK)
   16002:	9b01      	ldr	r3, [sp, #4]
   16004:	4620      	mov	r0, r4
   16006:	7a19      	ldrb	r1, [r3, #8]
   16008:	f7f6 fe55 	bl	ccb6 <bb_setUInt8>
                if ((ret = va_getByIndex(value->Arr, pos, &tmp)) != DLMS_ERROR_CODE_OK ||
   1600c:	2800      	cmp	r0, #0
   1600e:	d1c0      	bne.n	15f92 <cosem_setIecTwistedPairSetup+0x14>
            for (pos = 0; pos != value->Arr->size; ++pos)
   16010:	3601      	adds	r6, #1
   16012:	68a8      	ldr	r0, [r5, #8]
   16014:	88c3      	ldrh	r3, [r0, #6]
   16016:	42b3      	cmp	r3, r6
   16018:	d1ed      	bne.n	15ff6 <cosem_setIecTwistedPairSetup+0x78>
   1601a:	e7b9      	b.n	15f90 <cosem_setIecTwistedPairSetup+0x12>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   1601c:	f44f 7081 	mov.w	r0, #258	; 0x102
    return ret;
   16020:	e7b7      	b.n	15f92 <cosem_setIecTwistedPairSetup+0x14>

00016022 <cosem_setIP4Setup>:
    if (index == 2)
   16022:	2a02      	cmp	r2, #2
{
   16024:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   16028:	460e      	mov	r6, r1
   1602a:	461d      	mov	r5, r3
    if (index == 2)
   1602c:	d10c      	bne.n	16048 <cosem_setIP4Setup+0x26>
        if ((ret = oa_findByLN(&settings->objects, DLMS_OBJECT_TYPE_NONE, value->byteArr->data, &object->dataLinkLayer)) != 0)
   1602e:	689a      	ldr	r2, [r3, #8]
   16030:	3098      	adds	r0, #152	; 0x98
   16032:	f101 0310 	add.w	r3, r1, #16
   16036:	6812      	ldr	r2, [r2, #0]
   16038:	2100      	movs	r1, #0
   1603a:	f003 feef 	bl	19e1c <oa_findByLN>
   1603e:	4604      	mov	r4, r0
}
   16040:	4620      	mov	r0, r4
   16042:	b003      	add	sp, #12
   16044:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if (index == 3)
   16048:	2a03      	cmp	r2, #3
   1604a:	d105      	bne.n	16058 <cosem_setIP4Setup+0x36>
        object->ipAddress = var_toInteger(value);
   1604c:	4618      	mov	r0, r3
   1604e:	f004 faa2 	bl	1a596 <var_toInteger>
   16052:	6170      	str	r0, [r6, #20]
    int ret = 0, pos;
   16054:	2400      	movs	r4, #0
   16056:	e7f3      	b.n	16040 <cosem_setIP4Setup+0x1e>
    else if (index == 4)
   16058:	2a04      	cmp	r2, #4
   1605a:	d12c      	bne.n	160b6 <cosem_setIP4Setup+0x94>
        va_clear(&object->multicastIPAddress);
   1605c:	3618      	adds	r6, #24
   1605e:	4630      	mov	r0, r6
   16060:	f004 f87c 	bl	1a15c <va_clear>
        if (value->Arr != NULL)
   16064:	68ab      	ldr	r3, [r5, #8]
   16066:	2b00      	cmp	r3, #0
   16068:	d0f4      	beq.n	16054 <cosem_setIP4Setup+0x32>
            for (pos = 0; pos != value->Arr->size; ++pos)
   1606a:	2700      	movs	r7, #0
   1606c:	e01e      	b.n	160ac <cosem_setIP4Setup+0x8a>
                if ((ret = va_getByIndex(value->Arr, pos, &tmp)) != DLMS_ERROR_CODE_OK)
   1606e:	466a      	mov	r2, sp
   16070:	4639      	mov	r1, r7
   16072:	f004 f916 	bl	1a2a2 <va_getByIndex>
   16076:	4604      	mov	r4, r0
   16078:	2800      	cmp	r0, #0
   1607a:	d1e1      	bne.n	16040 <cosem_setIP4Setup+0x1e>
                tmp3 = (dlmsVARIANT*)gxmalloc(sizeof(dlmsVARIANT));
   1607c:	2010      	movs	r0, #16
   1607e:	f7f5 fd99 	bl	bbb4 <malloc>
   16082:	9001      	str	r0, [sp, #4]
                if ((ret = var_init(tmp3)) != 0 ||
   16084:	f003 ff33 	bl	19eee <var_init>
   16088:	4604      	mov	r4, r0
   1608a:	2800      	cmp	r0, #0
   1608c:	d1d8      	bne.n	16040 <cosem_setIP4Setup+0x1e>
                    (ret = var_copy(tmp, tmp3)) != 0 ||
   1608e:	e9dd 0100 	ldrd	r0, r1, [sp]
   16092:	f7ee f933 	bl	42fc <var_copy>
                if ((ret = var_init(tmp3)) != 0 ||
   16096:	4604      	mov	r4, r0
   16098:	2800      	cmp	r0, #0
   1609a:	d1d1      	bne.n	16040 <cosem_setIP4Setup+0x1e>
                    (ret = va_push(&object->multicastIPAddress, tmp3)) != 0)
   1609c:	9901      	ldr	r1, [sp, #4]
   1609e:	4630      	mov	r0, r6
   160a0:	f004 f833 	bl	1a10a <va_push>
                    (ret = var_copy(tmp, tmp3)) != 0 ||
   160a4:	4604      	mov	r4, r0
   160a6:	2800      	cmp	r0, #0
   160a8:	d1ca      	bne.n	16040 <cosem_setIP4Setup+0x1e>
            for (pos = 0; pos != value->Arr->size; ++pos)
   160aa:	3701      	adds	r7, #1
   160ac:	68a8      	ldr	r0, [r5, #8]
   160ae:	88c3      	ldrh	r3, [r0, #6]
   160b0:	42bb      	cmp	r3, r7
   160b2:	d1dc      	bne.n	1606e <cosem_setIP4Setup+0x4c>
   160b4:	e7ce      	b.n	16054 <cosem_setIP4Setup+0x32>
    else if (index == 5)
   160b6:	2a05      	cmp	r2, #5
   160b8:	d150      	bne.n	1615c <cosem_setIP4Setup+0x13a>
        arr_clear(&object->ipOptions);
   160ba:	3620      	adds	r6, #32
   160bc:	4630      	mov	r0, r6
   160be:	f7fa f93a 	bl	10336 <arr_clear>
        if (value->Arr != NULL)
   160c2:	68ab      	ldr	r3, [r5, #8]
   160c4:	2b00      	cmp	r3, #0
   160c6:	d0c5      	beq.n	16054 <cosem_setIP4Setup+0x32>
            for (pos = 0; pos != value->Arr->size; ++pos)
   160c8:	2700      	movs	r7, #0
   160ca:	e042      	b.n	16152 <cosem_setIP4Setup+0x130>
                ret = va_getByIndex(value->Arr, pos, &tmp);
   160cc:	466a      	mov	r2, sp
   160ce:	4639      	mov	r1, r7
   160d0:	f004 f8e7 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   160d4:	4604      	mov	r4, r0
   160d6:	2800      	cmp	r0, #0
   160d8:	d1b2      	bne.n	16040 <cosem_setIP4Setup+0x1e>
                ret = va_getByIndex(tmp->Arr, 0, &tmp3);
   160da:	9b00      	ldr	r3, [sp, #0]
   160dc:	4601      	mov	r1, r0
   160de:	aa01      	add	r2, sp, #4
   160e0:	6898      	ldr	r0, [r3, #8]
   160e2:	f004 f8de 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   160e6:	4604      	mov	r4, r0
   160e8:	2800      	cmp	r0, #0
   160ea:	d1a9      	bne.n	16040 <cosem_setIP4Setup+0x1e>
                ipItem = (gxip4SetupIpOption*)gxmalloc(sizeof(gxip4SetupIpOption));
   160ec:	2010      	movs	r0, #16
   160ee:	f7f5 fd61 	bl	bbb4 <malloc>
                if (ipItem == NULL)
   160f2:	4680      	mov	r8, r0
   160f4:	2800      	cmp	r0, #0
   160f6:	d05a      	beq.n	161ae <cosem_setIP4Setup+0x18c>
                BYTE_BUFFER_INIT(&ipItem->data);
   160f8:	f100 0904 	add.w	r9, r0, #4
   160fc:	4648      	mov	r0, r9
   160fe:	f7f6 fd71 	bl	cbe4 <bb_init>
                ipItem->type = (DLMS_IP_OPTION_TYPE)var_toInteger(tmp3);
   16102:	9801      	ldr	r0, [sp, #4]
   16104:	f004 fa47 	bl	1a596 <var_toInteger>
                ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   16108:	9b00      	ldr	r3, [sp, #0]
                ipItem->type = (DLMS_IP_OPTION_TYPE)var_toInteger(tmp3);
   1610a:	f888 0000 	strb.w	r0, [r8]
                ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   1610e:	6898      	ldr	r0, [r3, #8]
   16110:	aa01      	add	r2, sp, #4
   16112:	2101      	movs	r1, #1
   16114:	f004 f8c5 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   16118:	4604      	mov	r4, r0
   1611a:	2800      	cmp	r0, #0
   1611c:	d143      	bne.n	161a6 <cosem_setIP4Setup+0x184>
                ipItem->length = (unsigned char)var_toInteger(tmp3);
   1611e:	9801      	ldr	r0, [sp, #4]
   16120:	f004 fa39 	bl	1a596 <var_toInteger>
                ret = va_getByIndex(tmp->Arr, 2, &tmp3);
   16124:	9b00      	ldr	r3, [sp, #0]
                ipItem->length = (unsigned char)var_toInteger(tmp3);
   16126:	f888 0001 	strb.w	r0, [r8, #1]
                ret = va_getByIndex(tmp->Arr, 2, &tmp3);
   1612a:	6898      	ldr	r0, [r3, #8]
   1612c:	aa01      	add	r2, sp, #4
   1612e:	2102      	movs	r1, #2
   16130:	f004 f8b7 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   16134:	4604      	mov	r4, r0
   16136:	2800      	cmp	r0, #0
   16138:	d135      	bne.n	161a6 <cosem_setIP4Setup+0x184>
                bb_set(&ipItem->data, tmp3->byteArr->data, tmp3->byteArr->size);
   1613a:	9b01      	ldr	r3, [sp, #4]
   1613c:	689b      	ldr	r3, [r3, #8]
   1613e:	4648      	mov	r0, r9
   16140:	6819      	ldr	r1, [r3, #0]
   16142:	88da      	ldrh	r2, [r3, #6]
   16144:	f7f6 fe9d 	bl	ce82 <bb_set>
                arr_push(&object->ipOptions, ipItem);
   16148:	4641      	mov	r1, r8
   1614a:	4630      	mov	r0, r6
   1614c:	f7fa f8de 	bl	1030c <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   16150:	3701      	adds	r7, #1
   16152:	68a8      	ldr	r0, [r5, #8]
   16154:	88c3      	ldrh	r3, [r0, #6]
   16156:	42bb      	cmp	r3, r7
   16158:	d1b8      	bne.n	160cc <cosem_setIP4Setup+0xaa>
   1615a:	e77b      	b.n	16054 <cosem_setIP4Setup+0x32>
    else if (index == 6)
   1615c:	2a06      	cmp	r2, #6
   1615e:	d104      	bne.n	1616a <cosem_setIP4Setup+0x148>
        object->subnetMask = var_toInteger(value);
   16160:	4618      	mov	r0, r3
   16162:	f004 fa18 	bl	1a596 <var_toInteger>
   16166:	62f0      	str	r0, [r6, #44]	; 0x2c
   16168:	e774      	b.n	16054 <cosem_setIP4Setup+0x32>
    else if (index == 7)
   1616a:	2a07      	cmp	r2, #7
   1616c:	d104      	bne.n	16178 <cosem_setIP4Setup+0x156>
        object->gatewayIPAddress = var_toInteger(value);
   1616e:	4618      	mov	r0, r3
   16170:	f004 fa11 	bl	1a596 <var_toInteger>
   16174:	6330      	str	r0, [r6, #48]	; 0x30
   16176:	e76d      	b.n	16054 <cosem_setIP4Setup+0x32>
    else if (index == 8)
   16178:	2a08      	cmp	r2, #8
   1617a:	d103      	bne.n	16184 <cosem_setIP4Setup+0x162>
        object->useDHCP = value->boolVal;
   1617c:	7a1b      	ldrb	r3, [r3, #8]
   1617e:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
   16182:	e767      	b.n	16054 <cosem_setIP4Setup+0x32>
    else if (index == 9)
   16184:	2a09      	cmp	r2, #9
   16186:	d104      	bne.n	16192 <cosem_setIP4Setup+0x170>
        object->primaryDNSAddress = var_toInteger(value);
   16188:	4618      	mov	r0, r3
   1618a:	f004 fa04 	bl	1a596 <var_toInteger>
   1618e:	63b0      	str	r0, [r6, #56]	; 0x38
   16190:	e760      	b.n	16054 <cosem_setIP4Setup+0x32>
    else if (index == 10)
   16192:	2a0a      	cmp	r2, #10
   16194:	d104      	bne.n	161a0 <cosem_setIP4Setup+0x17e>
        object->secondaryDNSAddress = var_toInteger(value);
   16196:	4618      	mov	r0, r3
   16198:	f004 f9fd 	bl	1a596 <var_toInteger>
   1619c:	63f0      	str	r0, [r6, #60]	; 0x3c
   1619e:	e759      	b.n	16054 <cosem_setIP4Setup+0x32>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   161a0:	f44f 7481 	mov.w	r4, #258	; 0x102
   161a4:	e74c      	b.n	16040 <cosem_setIP4Setup+0x1e>
                gxfree(ipItem);
   161a6:	4640      	mov	r0, r8
   161a8:	f7f5 fd0c 	bl	bbc4 <free>
   161ac:	e748      	b.n	16040 <cosem_setIP4Setup+0x1e>
                    ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   161ae:	f44f 7482 	mov.w	r4, #260	; 0x104
            if (ret != DLMS_ERROR_CODE_OK && ipItem != NULL)
   161b2:	e745      	b.n	16040 <cosem_setIP4Setup+0x1e>

000161b4 <cosem_setUtilityTables>:
    if (index == 2)
   161b4:	2902      	cmp	r1, #2
{
   161b6:	b538      	push	{r3, r4, r5, lr}
   161b8:	4604      	mov	r4, r0
   161ba:	4615      	mov	r5, r2
    if (index == 2)
   161bc:	d105      	bne.n	161ca <cosem_setUtilityTables+0x16>
        object->tableId = (uint16_t)var_toInteger(value);
   161be:	4610      	mov	r0, r2
   161c0:	f004 f9e9 	bl	1a596 <var_toInteger>
   161c4:	8220      	strh	r0, [r4, #16]
    return DLMS_ERROR_CODE_OK;
   161c6:	2000      	movs	r0, #0
}
   161c8:	bd38      	pop	{r3, r4, r5, pc}
    else if (index == 3)
   161ca:	2903      	cmp	r1, #3
   161cc:	d0fb      	beq.n	161c6 <cosem_setUtilityTables+0x12>
    else if (index == 4)
   161ce:	2904      	cmp	r1, #4
   161d0:	d10e      	bne.n	161f0 <cosem_setUtilityTables+0x3c>
        bb_clear(&object->buffer);
   161d2:	3414      	adds	r4, #20
   161d4:	4620      	mov	r0, r4
   161d6:	f7f6 fec8 	bl	cf6a <bb_clear>
        bb_set2(&object->buffer, value->byteArr, 0, bb_size(value->byteArr));
   161da:	68ad      	ldr	r5, [r5, #8]
   161dc:	4628      	mov	r0, r5
   161de:	f7f6 fcfe 	bl	cbde <bb_size>
   161e2:	2200      	movs	r2, #0
   161e4:	4603      	mov	r3, r0
   161e6:	4629      	mov	r1, r5
   161e8:	4620      	mov	r0, r4
   161ea:	f7f6 fe79 	bl	cee0 <bb_set2>
   161ee:	e7ea      	b.n	161c6 <cosem_setUtilityTables+0x12>
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   161f0:	f44f 7081 	mov.w	r0, #258	; 0x102
   161f4:	e7e8      	b.n	161c8 <cosem_setUtilityTables+0x14>

000161f6 <cosem_setMbusSlavePortSetup>:
    if (index == 2)
   161f6:	2902      	cmp	r1, #2
{
   161f8:	b510      	push	{r4, lr}
   161fa:	4604      	mov	r4, r0
   161fc:	4610      	mov	r0, r2
    if (index == 2)
   161fe:	d104      	bne.n	1620a <cosem_setMbusSlavePortSetup+0x14>
        object->defaultBaud = (DLMS_BAUD_RATE)var_toInteger(value);
   16200:	f004 f9c9 	bl	1a596 <var_toInteger>
   16204:	7420      	strb	r0, [r4, #16]
    return DLMS_ERROR_CODE_OK;
   16206:	2000      	movs	r0, #0
}
   16208:	bd10      	pop	{r4, pc}
    else if (index == 3)
   1620a:	2903      	cmp	r1, #3
   1620c:	d103      	bne.n	16216 <cosem_setMbusSlavePortSetup+0x20>
        object->availableBaud = (DLMS_BAUD_RATE)var_toInteger(value);
   1620e:	f004 f9c2 	bl	1a596 <var_toInteger>
   16212:	7460      	strb	r0, [r4, #17]
   16214:	e7f7      	b.n	16206 <cosem_setMbusSlavePortSetup+0x10>
    else if (index == 4)
   16216:	2904      	cmp	r1, #4
   16218:	d103      	bne.n	16222 <cosem_setMbusSlavePortSetup+0x2c>
        object->addressState = (DLMS_ADDRESS_STATE)var_toInteger(value);
   1621a:	f004 f9bc 	bl	1a596 <var_toInteger>
   1621e:	74a0      	strb	r0, [r4, #18]
   16220:	e7f1      	b.n	16206 <cosem_setMbusSlavePortSetup+0x10>
    else if (index == 5)
   16222:	2905      	cmp	r1, #5
   16224:	d103      	bne.n	1622e <cosem_setMbusSlavePortSetup+0x38>
        object->busAddress = (unsigned char)var_toInteger(value);
   16226:	f004 f9b6 	bl	1a596 <var_toInteger>
   1622a:	74e0      	strb	r0, [r4, #19]
   1622c:	e7eb      	b.n	16206 <cosem_setMbusSlavePortSetup+0x10>
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   1622e:	f44f 7081 	mov.w	r0, #258	; 0x102
   16232:	e7e9      	b.n	16208 <cosem_setMbusSlavePortSetup+0x12>

00016234 <cosem_setDisconnectControl>:
    if (index == 2)
   16234:	2902      	cmp	r1, #2
{
   16236:	b510      	push	{r4, lr}
   16238:	4604      	mov	r4, r0
   1623a:	4610      	mov	r0, r2
    if (index == 2)
   1623c:	d103      	bne.n	16246 <cosem_setDisconnectControl+0x12>
        object->outputState = value->boolVal;
   1623e:	7a13      	ldrb	r3, [r2, #8]
   16240:	7423      	strb	r3, [r4, #16]
    return DLMS_ERROR_CODE_OK;
   16242:	2000      	movs	r0, #0
}
   16244:	bd10      	pop	{r4, pc}
    else if (index == 3)
   16246:	2903      	cmp	r1, #3
   16248:	d103      	bne.n	16252 <cosem_setDisconnectControl+0x1e>
        object->controlState = (DLMS_CONTROL_STATE)var_toInteger(value);
   1624a:	f004 f9a4 	bl	1a596 <var_toInteger>
   1624e:	7460      	strb	r0, [r4, #17]
   16250:	e7f7      	b.n	16242 <cosem_setDisconnectControl+0xe>
    else if (index == 4)
   16252:	2904      	cmp	r1, #4
   16254:	d103      	bne.n	1625e <cosem_setDisconnectControl+0x2a>
        object->controlMode = (DLMS_CONTROL_MODE)var_toInteger(value);
   16256:	f004 f99e 	bl	1a596 <var_toInteger>
   1625a:	74a0      	strb	r0, [r4, #18]
   1625c:	e7f1      	b.n	16242 <cosem_setDisconnectControl+0xe>
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   1625e:	f44f 7081 	mov.w	r0, #258	; 0x102
   16262:	e7ef      	b.n	16244 <cosem_setDisconnectControl+0x10>

00016264 <cosem_setLimiter>:
{
   16264:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (index == 2)
   16268:	2a02      	cmp	r2, #2
{
   1626a:	b087      	sub	sp, #28
   1626c:	4607      	mov	r7, r0
   1626e:	460d      	mov	r5, r1
   16270:	461e      	mov	r6, r3
    if (index == 2)
   16272:	d152      	bne.n	1631a <cosem_setLimiter+0xb6>
        if (value->vt != DLMS_DATA_TYPE_STRUCTURE)
   16274:	f893 9000 	ldrb.w	r9, [r3]
   16278:	f1b9 0f02 	cmp.w	r9, #2
   1627c:	f040 8177 	bne.w	1656e <cosem_setLimiter+0x30a>
        ret = va_getByIndex(value->Arr, 0, &tmp);
   16280:	6898      	ldr	r0, [r3, #8]
   16282:	aa01      	add	r2, sp, #4
   16284:	2100      	movs	r1, #0
   16286:	f004 f80c 	bl	1a2a2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   1628a:	4604      	mov	r4, r0
   1628c:	2800      	cmp	r0, #0
   1628e:	d140      	bne.n	16312 <cosem_setLimiter+0xae>
        ot = (DLMS_OBJECT_TYPE)var_toInteger(tmp);
   16290:	9801      	ldr	r0, [sp, #4]
   16292:	f004 f980 	bl	1a596 <var_toInteger>
        ret = va_getByIndex(value->Arr, 1, &tmp3);
   16296:	aa02      	add	r2, sp, #8
        ot = (DLMS_OBJECT_TYPE)var_toInteger(tmp);
   16298:	4680      	mov	r8, r0
        ret = va_getByIndex(value->Arr, 1, &tmp3);
   1629a:	2101      	movs	r1, #1
   1629c:	68b0      	ldr	r0, [r6, #8]
   1629e:	f004 f800 	bl	1a2a2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   162a2:	4604      	mov	r4, r0
   162a4:	2800      	cmp	r0, #0
   162a6:	d134      	bne.n	16312 <cosem_setLimiter+0xae>
        ret = va_getByIndex(value->Arr, 2, &tmp);
   162a8:	68b0      	ldr	r0, [r6, #8]
   162aa:	aa01      	add	r2, sp, #4
   162ac:	4649      	mov	r1, r9
   162ae:	f003 fff8 	bl	1a2a2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   162b2:	4604      	mov	r4, r0
   162b4:	bb68      	cbnz	r0, 16312 <cosem_setLimiter+0xae>
        object->selectedAttributeIndex = (unsigned char)var_toInteger(tmp);
   162b6:	9801      	ldr	r0, [sp, #4]
   162b8:	f004 f96d 	bl	1a596 <var_toInteger>
        ot = (DLMS_OBJECT_TYPE)var_toInteger(tmp);
   162bc:	fa1f f688 	uxth.w	r6, r8
        object->selectedAttributeIndex = (unsigned char)var_toInteger(tmp);
   162c0:	7528      	strb	r0, [r5, #20]
        if (ot != 0)
   162c2:	b32e      	cbz	r6, 16310 <cosem_setLimiter+0xac>
            if ((ret = oa_findByLN(&settings->objects, ot, tmp3->byteArr->data, &object->monitoredValue)) == 0 &&
   162c4:	9b02      	ldr	r3, [sp, #8]
   162c6:	689a      	ldr	r2, [r3, #8]
   162c8:	f105 0810 	add.w	r8, r5, #16
   162cc:	6812      	ldr	r2, [r2, #0]
   162ce:	4643      	mov	r3, r8
   162d0:	4631      	mov	r1, r6
   162d2:	f107 0098 	add.w	r0, r7, #152	; 0x98
   162d6:	f003 fda1 	bl	19e1c <oa_findByLN>
   162da:	4604      	mov	r4, r0
   162dc:	b9c8      	cbnz	r0, 16312 <cosem_setLimiter+0xae>
   162de:	692b      	ldr	r3, [r5, #16]
   162e0:	b10b      	cbz	r3, 162e6 <cosem_setLimiter+0x82>
    int ret = DLMS_ERROR_CODE_OK, pos;
   162e2:	2400      	movs	r4, #0
   162e4:	e015      	b.n	16312 <cosem_setLimiter+0xae>
                if ((ret = cosem_createObject(ot, &object->monitoredValue)) != 0)
   162e6:	4641      	mov	r1, r8
   162e8:	4630      	mov	r0, r6
   162ea:	f7eb fdb9 	bl	1e60 <cosem_createObject>
   162ee:	4604      	mov	r4, r0
   162f0:	b978      	cbnz	r0, 16312 <cosem_setLimiter+0xae>
                memcpy(object->monitoredValue->logicalName, tmp3->byteArr->data, tmp3->byteArr->size);
   162f2:	9b02      	ldr	r3, [sp, #8]
   162f4:	6928      	ldr	r0, [r5, #16]
   162f6:	689b      	ldr	r3, [r3, #8]
   162f8:	3006      	adds	r0, #6
   162fa:	6819      	ldr	r1, [r3, #0]
   162fc:	88da      	ldrh	r2, [r3, #6]
   162fe:	f005 feef 	bl	1c0e0 <memcpy>
                ret = oa_push(&settings->releasedObjects, object->monitoredValue);
   16302:	6929      	ldr	r1, [r5, #16]
   16304:	f107 00e4 	add.w	r0, r7, #228	; 0xe4
   16308:	f003 fd28 	bl	19d5c <oa_push>
        ret = var_copy(&object->thresholdActive, value);
   1630c:	4604      	mov	r4, r0
   1630e:	e000      	b.n	16312 <cosem_setLimiter+0xae>
            object->monitoredValue = NULL;
   16310:	612c      	str	r4, [r5, #16]
}
   16312:	4620      	mov	r0, r4
   16314:	b007      	add	sp, #28
   16316:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if (index == 3)
   1631a:	2a03      	cmp	r2, #3
   1631c:	d105      	bne.n	1632a <cosem_setLimiter+0xc6>
        ret = var_copy(&object->thresholdActive, value);
   1631e:	4619      	mov	r1, r3
   16320:	f105 0018 	add.w	r0, r5, #24
   16324:	f7ed ffea 	bl	42fc <var_copy>
   16328:	e7f0      	b.n	1630c <cosem_setLimiter+0xa8>
    else if (index == 4)
   1632a:	2a04      	cmp	r2, #4
   1632c:	d103      	bne.n	16336 <cosem_setLimiter+0xd2>
        ret = var_copy(&object->thresholdNormal, value);
   1632e:	4619      	mov	r1, r3
   16330:	f105 0028 	add.w	r0, r5, #40	; 0x28
   16334:	e7f6      	b.n	16324 <cosem_setLimiter+0xc0>
    else if (index == 5)
   16336:	2a05      	cmp	r2, #5
   16338:	d103      	bne.n	16342 <cosem_setLimiter+0xde>
        ret = var_copy(&object->thresholdEmergency, value);
   1633a:	4619      	mov	r1, r3
   1633c:	f105 0038 	add.w	r0, r5, #56	; 0x38
   16340:	e7f0      	b.n	16324 <cosem_setLimiter+0xc0>
    else if (index == 6)
   16342:	2a06      	cmp	r2, #6
   16344:	d104      	bne.n	16350 <cosem_setLimiter+0xec>
        object->minOverThresholdDuration = var_toInteger(value);
   16346:	4618      	mov	r0, r3
   16348:	f004 f925 	bl	1a596 <var_toInteger>
   1634c:	64a8      	str	r0, [r5, #72]	; 0x48
   1634e:	e7c8      	b.n	162e2 <cosem_setLimiter+0x7e>
    else if (index == 7)
   16350:	2a07      	cmp	r2, #7
   16352:	d104      	bne.n	1635e <cosem_setLimiter+0xfa>
        object->minUnderThresholdDuration = var_toInteger(value);
   16354:	4618      	mov	r0, r3
   16356:	f004 f91e 	bl	1a596 <var_toInteger>
   1635a:	64e8      	str	r0, [r5, #76]	; 0x4c
   1635c:	e7c1      	b.n	162e2 <cosem_setLimiter+0x7e>
    else if (index == 8)
   1635e:	2a08      	cmp	r2, #8
   16360:	d137      	bne.n	163d2 <cosem_setLimiter+0x16e>
        ret = va_getByIndex(value->Arr, 0, &tmp);
   16362:	6898      	ldr	r0, [r3, #8]
   16364:	aa01      	add	r2, sp, #4
   16366:	2100      	movs	r1, #0
   16368:	f003 ff9b 	bl	1a2a2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   1636c:	4604      	mov	r4, r0
   1636e:	2800      	cmp	r0, #0
   16370:	d1cf      	bne.n	16312 <cosem_setLimiter+0xae>
        object->emergencyProfile.id = (uint16_t)var_toInteger(tmp);
   16372:	9801      	ldr	r0, [sp, #4]
   16374:	f004 f90f 	bl	1a596 <var_toInteger>
   16378:	f8a5 0050 	strh.w	r0, [r5, #80]	; 0x50
        ret = va_getByIndex(value->Arr, 1, &tmp);
   1637c:	68b0      	ldr	r0, [r6, #8]
   1637e:	aa01      	add	r2, sp, #4
   16380:	2101      	movs	r1, #1
   16382:	f003 ff8e 	bl	1a2a2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   16386:	4604      	mov	r4, r0
   16388:	2800      	cmp	r0, #0
   1638a:	d1c2      	bne.n	16312 <cosem_setLimiter+0xae>
        ret = var_init(&tmp2);
   1638c:	a802      	add	r0, sp, #8
   1638e:	f003 fdae 	bl	19eee <var_init>
        if (ret != DLMS_ERROR_CODE_OK)
   16392:	4604      	mov	r4, r0
   16394:	2800      	cmp	r0, #0
   16396:	d1bc      	bne.n	16312 <cosem_setLimiter+0xae>
        ret = dlms_changeType2(tmp, DLMS_DATA_TYPE_DATETIME, &tmp2);
   16398:	9801      	ldr	r0, [sp, #4]
   1639a:	aa02      	add	r2, sp, #8
   1639c:	2119      	movs	r1, #25
   1639e:	f7f9 fcd2 	bl	fd46 <dlms_changeType2>
        if (ret != DLMS_ERROR_CODE_OK)
   163a2:	4604      	mov	r4, r0
   163a4:	2800      	cmp	r0, #0
   163a6:	d1b4      	bne.n	16312 <cosem_setLimiter+0xae>
        time_copy(&object->emergencyProfile.activationTime, tmp2.dateTime);
   163a8:	9904      	ldr	r1, [sp, #16]
   163aa:	f105 0054 	add.w	r0, r5, #84	; 0x54
   163ae:	f7f7 fd17 	bl	dde0 <time_copy>
        var_clear(&tmp2);
   163b2:	a802      	add	r0, sp, #8
   163b4:	f003 fef7 	bl	1a1a6 <var_clear>
        ret = va_getByIndex(value->Arr, 2, &tmp);
   163b8:	68b0      	ldr	r0, [r6, #8]
   163ba:	aa01      	add	r2, sp, #4
   163bc:	2102      	movs	r1, #2
   163be:	f003 ff70 	bl	1a2a2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   163c2:	4604      	mov	r4, r0
   163c4:	2800      	cmp	r0, #0
   163c6:	d1a4      	bne.n	16312 <cosem_setLimiter+0xae>
        object->emergencyProfile.duration = var_toInteger(tmp);
   163c8:	9801      	ldr	r0, [sp, #4]
   163ca:	f004 f8e4 	bl	1a596 <var_toInteger>
   163ce:	6628      	str	r0, [r5, #96]	; 0x60
   163d0:	e79f      	b.n	16312 <cosem_setLimiter+0xae>
    else if (index == 9)
   163d2:	2a09      	cmp	r2, #9
   163d4:	d128      	bne.n	16428 <cosem_setLimiter+0x1c4>
        va_clear(&object->emergencyProfileGroupIDs);
   163d6:	3564      	adds	r5, #100	; 0x64
   163d8:	4628      	mov	r0, r5
   163da:	f003 febf 	bl	1a15c <va_clear>
        if (value->Arr != NULL)
   163de:	68b3      	ldr	r3, [r6, #8]
   163e0:	2b00      	cmp	r3, #0
   163e2:	f43f af7e 	beq.w	162e2 <cosem_setLimiter+0x7e>
            for (pos = 0; pos != value->Arr->size; ++pos)
   163e6:	2700      	movs	r7, #0
   163e8:	e019      	b.n	1641e <cosem_setLimiter+0x1ba>
                ret = va_getByIndex(value->Arr, pos, &tmp);
   163ea:	aa01      	add	r2, sp, #4
   163ec:	4639      	mov	r1, r7
   163ee:	f003 ff58 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   163f2:	4604      	mov	r4, r0
   163f4:	2800      	cmp	r0, #0
   163f6:	d18c      	bne.n	16312 <cosem_setLimiter+0xae>
                tmp3 = (dlmsVARIANT*)gxmalloc(sizeof(dlmsVARIANT));
   163f8:	2010      	movs	r0, #16
   163fa:	f7f5 fbdb 	bl	bbb4 <malloc>
   163fe:	9002      	str	r0, [sp, #8]
                var_init(tmp3);
   16400:	f003 fd75 	bl	19eee <var_init>
                ret = var_copy(tmp3, tmp);
   16404:	e9dd 1001 	ldrd	r1, r0, [sp, #4]
   16408:	f7ed ff78 	bl	42fc <var_copy>
                if (ret != DLMS_ERROR_CODE_OK)
   1640c:	4604      	mov	r4, r0
   1640e:	2800      	cmp	r0, #0
   16410:	f47f af7f 	bne.w	16312 <cosem_setLimiter+0xae>
                va_push(&object->emergencyProfileGroupIDs, tmp3);
   16414:	9902      	ldr	r1, [sp, #8]
   16416:	4628      	mov	r0, r5
   16418:	f003 fe77 	bl	1a10a <va_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   1641c:	3701      	adds	r7, #1
   1641e:	68b0      	ldr	r0, [r6, #8]
   16420:	88c3      	ldrh	r3, [r0, #6]
   16422:	42bb      	cmp	r3, r7
   16424:	d1e1      	bne.n	163ea <cosem_setLimiter+0x186>
   16426:	e75c      	b.n	162e2 <cosem_setLimiter+0x7e>
    else if (index == 10)
   16428:	2a0a      	cmp	r2, #10
   1642a:	d103      	bne.n	16434 <cosem_setLimiter+0x1d0>
        object->emergencyProfileActive = value->boolVal;
   1642c:	7a1b      	ldrb	r3, [r3, #8]
   1642e:	f881 306c 	strb.w	r3, [r1, #108]	; 0x6c
   16432:	e756      	b.n	162e2 <cosem_setLimiter+0x7e>
    else if (index == 11)
   16434:	2a0b      	cmp	r2, #11
   16436:	f040 809a 	bne.w	1656e <cosem_setLimiter+0x30a>
        ret = va_getByIndex(value->Arr, 0, &tmp);
   1643a:	6898      	ldr	r0, [r3, #8]
   1643c:	aa01      	add	r2, sp, #4
   1643e:	2100      	movs	r1, #0
   16440:	f003 ff2f 	bl	1a2a2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   16444:	4604      	mov	r4, r0
   16446:	2800      	cmp	r0, #0
   16448:	f47f af63 	bne.w	16312 <cosem_setLimiter+0xae>
        ret = va_getByIndex(tmp->Arr, 0, &tmp3);
   1644c:	9b01      	ldr	r3, [sp, #4]
   1644e:	4601      	mov	r1, r0
   16450:	aa02      	add	r2, sp, #8
   16452:	6898      	ldr	r0, [r3, #8]
   16454:	f003 ff25 	bl	1a2a2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   16458:	4604      	mov	r4, r0
   1645a:	2800      	cmp	r0, #0
   1645c:	f47f af59 	bne.w	16312 <cosem_setLimiter+0xae>
        if ((ret = oa_findByLN(&settings->objects, DLMS_OBJECT_TYPE_SCRIPT_TABLE, tmp3->byteArr->data, (gxObject**)&object->actionOverThreshold.script)) != 0)
   16460:	9b02      	ldr	r3, [sp, #8]
   16462:	689a      	ldr	r2, [r3, #8]
   16464:	f107 0898 	add.w	r8, r7, #152	; 0x98
   16468:	f105 0970 	add.w	r9, r5, #112	; 0x70
   1646c:	6812      	ldr	r2, [r2, #0]
   1646e:	464b      	mov	r3, r9
   16470:	2109      	movs	r1, #9
   16472:	4640      	mov	r0, r8
   16474:	f003 fcd2 	bl	19e1c <oa_findByLN>
   16478:	4604      	mov	r4, r0
   1647a:	2800      	cmp	r0, #0
   1647c:	f47f af49 	bne.w	16312 <cosem_setLimiter+0xae>
        if (object->actionOverThreshold.script == NULL)
   16480:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   16482:	2b00      	cmp	r3, #0
   16484:	d041      	beq.n	1650a <cosem_setLimiter+0x2a6>
        ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   16486:	9b01      	ldr	r3, [sp, #4]
   16488:	aa02      	add	r2, sp, #8
   1648a:	6898      	ldr	r0, [r3, #8]
   1648c:	2101      	movs	r1, #1
   1648e:	f003 ff08 	bl	1a2a2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   16492:	4604      	mov	r4, r0
   16494:	2800      	cmp	r0, #0
   16496:	f47f af3c 	bne.w	16312 <cosem_setLimiter+0xae>
        object->actionOverThreshold.scriptSelector = (uint16_t)var_toInteger(tmp3);
   1649a:	9802      	ldr	r0, [sp, #8]
   1649c:	f004 f87b 	bl	1a596 <var_toInteger>
   164a0:	f8a5 0074 	strh.w	r0, [r5, #116]	; 0x74
        ret = va_getByIndex(value->Arr, 1, &tmp);
   164a4:	68b0      	ldr	r0, [r6, #8]
   164a6:	aa01      	add	r2, sp, #4
   164a8:	2101      	movs	r1, #1
   164aa:	f003 fefa 	bl	1a2a2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   164ae:	4604      	mov	r4, r0
   164b0:	2800      	cmp	r0, #0
   164b2:	f47f af2e 	bne.w	16312 <cosem_setLimiter+0xae>
        ret = va_getByIndex(tmp->Arr, 0, &tmp3);
   164b6:	9b01      	ldr	r3, [sp, #4]
   164b8:	4601      	mov	r1, r0
   164ba:	aa02      	add	r2, sp, #8
   164bc:	6898      	ldr	r0, [r3, #8]
   164be:	f003 fef0 	bl	1a2a2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   164c2:	4604      	mov	r4, r0
   164c4:	2800      	cmp	r0, #0
   164c6:	f47f af24 	bne.w	16312 <cosem_setLimiter+0xae>
        if ((ret = oa_findByLN(&settings->objects, DLMS_OBJECT_TYPE_SCRIPT_TABLE, tmp3->byteArr->data, (gxObject**)&object->actionUnderThreshold.script)) != 0)
   164ca:	9b02      	ldr	r3, [sp, #8]
   164cc:	689a      	ldr	r2, [r3, #8]
   164ce:	f105 0678 	add.w	r6, r5, #120	; 0x78
   164d2:	6812      	ldr	r2, [r2, #0]
   164d4:	4633      	mov	r3, r6
   164d6:	2109      	movs	r1, #9
   164d8:	4640      	mov	r0, r8
   164da:	f003 fc9f 	bl	19e1c <oa_findByLN>
   164de:	4604      	mov	r4, r0
   164e0:	2800      	cmp	r0, #0
   164e2:	f47f af16 	bne.w	16312 <cosem_setLimiter+0xae>
        if (object->actionUnderThreshold.script == NULL)
   164e6:	6fab      	ldr	r3, [r5, #120]	; 0x78
   164e8:	b343      	cbz	r3, 1653c <cosem_setLimiter+0x2d8>
        ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   164ea:	9b01      	ldr	r3, [sp, #4]
   164ec:	aa02      	add	r2, sp, #8
   164ee:	6898      	ldr	r0, [r3, #8]
   164f0:	2101      	movs	r1, #1
   164f2:	f003 fed6 	bl	1a2a2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   164f6:	4604      	mov	r4, r0
   164f8:	2800      	cmp	r0, #0
   164fa:	f47f af0a 	bne.w	16312 <cosem_setLimiter+0xae>
        object->actionUnderThreshold.scriptSelector = (uint16_t)var_toInteger(tmp3);
   164fe:	9802      	ldr	r0, [sp, #8]
   16500:	f004 f849 	bl	1a596 <var_toInteger>
   16504:	f8a5 007c 	strh.w	r0, [r5, #124]	; 0x7c
   16508:	e703      	b.n	16312 <cosem_setLimiter+0xae>
            if ((ret = cosem_createObject(DLMS_OBJECT_TYPE_SCRIPT_TABLE, (gxObject**)&object->actionOverThreshold.script)) != 0)
   1650a:	4649      	mov	r1, r9
   1650c:	2009      	movs	r0, #9
   1650e:	f7eb fca7 	bl	1e60 <cosem_createObject>
   16512:	4604      	mov	r4, r0
   16514:	2800      	cmp	r0, #0
   16516:	f47f aefc 	bne.w	16312 <cosem_setLimiter+0xae>
            memcpy(object->actionOverThreshold.script->base.logicalName, tmp3->byteArr->data, tmp3->byteArr->size);
   1651a:	9b02      	ldr	r3, [sp, #8]
   1651c:	6f28      	ldr	r0, [r5, #112]	; 0x70
   1651e:	689b      	ldr	r3, [r3, #8]
   16520:	3006      	adds	r0, #6
   16522:	6819      	ldr	r1, [r3, #0]
   16524:	88da      	ldrh	r2, [r3, #6]
   16526:	f005 fddb 	bl	1c0e0 <memcpy>
            ret = oa_push(&settings->releasedObjects, (gxObject*)object->actionOverThreshold.script);
   1652a:	6f29      	ldr	r1, [r5, #112]	; 0x70
   1652c:	f107 00e4 	add.w	r0, r7, #228	; 0xe4
   16530:	f003 fc14 	bl	19d5c <oa_push>
            if (ret != DLMS_ERROR_CODE_OK)
   16534:	4604      	mov	r4, r0
   16536:	2800      	cmp	r0, #0
   16538:	d0a5      	beq.n	16486 <cosem_setLimiter+0x222>
   1653a:	e6ea      	b.n	16312 <cosem_setLimiter+0xae>
            if ((ret = cosem_createObject(DLMS_OBJECT_TYPE_SCRIPT_TABLE, (gxObject**)&object->actionUnderThreshold.script)) != 0)
   1653c:	4631      	mov	r1, r6
   1653e:	2009      	movs	r0, #9
   16540:	f7eb fc8e 	bl	1e60 <cosem_createObject>
   16544:	4604      	mov	r4, r0
   16546:	2800      	cmp	r0, #0
   16548:	f47f aee3 	bne.w	16312 <cosem_setLimiter+0xae>
            memcpy(object->actionUnderThreshold.script->base.logicalName, tmp3->byteArr->data, tmp3->byteArr->size);
   1654c:	9b02      	ldr	r3, [sp, #8]
   1654e:	6fa8      	ldr	r0, [r5, #120]	; 0x78
   16550:	689b      	ldr	r3, [r3, #8]
   16552:	3006      	adds	r0, #6
   16554:	6819      	ldr	r1, [r3, #0]
   16556:	88da      	ldrh	r2, [r3, #6]
   16558:	f005 fdc2 	bl	1c0e0 <memcpy>
            ret = oa_push(&settings->releasedObjects, (gxObject*)object->actionUnderThreshold.script);
   1655c:	6fa9      	ldr	r1, [r5, #120]	; 0x78
   1655e:	f107 00e4 	add.w	r0, r7, #228	; 0xe4
   16562:	f003 fbfb 	bl	19d5c <oa_push>
            if (ret != DLMS_ERROR_CODE_OK)
   16566:	4604      	mov	r4, r0
   16568:	2800      	cmp	r0, #0
   1656a:	d0be      	beq.n	164ea <cosem_setLimiter+0x286>
   1656c:	e6d1      	b.n	16312 <cosem_setLimiter+0xae>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   1656e:	f44f 7481 	mov.w	r4, #258	; 0x102
   16572:	e6ce      	b.n	16312 <cosem_setLimiter+0xae>

00016574 <cosem_setmMbusClient>:
    if (index == 2)
   16574:	2a02      	cmp	r2, #2
{
   16576:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1657a:	4607      	mov	r7, r0
   1657c:	460d      	mov	r5, r1
   1657e:	461e      	mov	r6, r3
    if (index == 2)
   16580:	d123      	bne.n	165ca <cosem_setmMbusClient+0x56>
        if ((ret = oa_findByLN(&settings->objects, DLMS_OBJECT_TYPE_MBUS_MASTER_PORT_SETUP, value->byteArr->data, &object->mBusPort)) != 0)
   16582:	689a      	ldr	r2, [r3, #8]
   16584:	f101 0818 	add.w	r8, r1, #24
   16588:	6812      	ldr	r2, [r2, #0]
   1658a:	4643      	mov	r3, r8
   1658c:	214a      	movs	r1, #74	; 0x4a
   1658e:	3098      	adds	r0, #152	; 0x98
   16590:	f003 fc44 	bl	19e1c <oa_findByLN>
   16594:	4604      	mov	r4, r0
   16596:	b9a0      	cbnz	r0, 165c2 <cosem_setmMbusClient+0x4e>
        if (object->mBusPort == NULL)
   16598:	69ab      	ldr	r3, [r5, #24]
   1659a:	b993      	cbnz	r3, 165c2 <cosem_setmMbusClient+0x4e>
            if ((ret = cosem_createObject(DLMS_OBJECT_TYPE_MBUS_MASTER_PORT_SETUP, &object->mBusPort)) != 0)
   1659c:	4641      	mov	r1, r8
   1659e:	204a      	movs	r0, #74	; 0x4a
   165a0:	f7eb fc5e 	bl	1e60 <cosem_createObject>
   165a4:	4604      	mov	r4, r0
   165a6:	b960      	cbnz	r0, 165c2 <cosem_setmMbusClient+0x4e>
            memcpy(object->mBusPort->logicalName, value->byteArr->data, value->byteArr->size);
   165a8:	68b3      	ldr	r3, [r6, #8]
   165aa:	69a8      	ldr	r0, [r5, #24]
   165ac:	6819      	ldr	r1, [r3, #0]
   165ae:	88da      	ldrh	r2, [r3, #6]
   165b0:	3006      	adds	r0, #6
   165b2:	f005 fd95 	bl	1c0e0 <memcpy>
            ret = oa_push(&settings->releasedObjects, object->mBusPort);
   165b6:	69a9      	ldr	r1, [r5, #24]
   165b8:	f107 00e4 	add.w	r0, r7, #228	; 0xe4
   165bc:	f003 fbce 	bl	19d5c <oa_push>
   165c0:	4604      	mov	r4, r0
}
   165c2:	4620      	mov	r0, r4
   165c4:	b003      	add	sp, #12
   165c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if (index == 3)
   165ca:	2a03      	cmp	r2, #3
   165cc:	d155      	bne.n	1667a <cosem_setmMbusClient+0x106>
        arr_clearKeyValuePair(&object->captureDefinition);
   165ce:	351c      	adds	r5, #28
   165d0:	4628      	mov	r0, r5
   165d2:	f7f9 fee9 	bl	103a8 <arr_clearKeyValuePair>
        if (value->Arr != NULL)
   165d6:	68b3      	ldr	r3, [r6, #8]
   165d8:	2b00      	cmp	r3, #0
   165da:	d14b      	bne.n	16674 <cosem_setmMbusClient+0x100>
    int ret = DLMS_ERROR_CODE_OK, pos;
   165dc:	2400      	movs	r4, #0
        object->encryptionKeyStatus = (DLMS_MBUS_ENCRYPTION_KEY_STATUS)var_toInteger(value);
   165de:	e7f0      	b.n	165c2 <cosem_setmMbusClient+0x4e>
                bb_set(end, tmp3->byteArr->data, tmp3->byteArr->size);
   165e0:	9b01      	ldr	r3, [sp, #4]
   165e2:	689b      	ldr	r3, [r3, #8]
   165e4:	4648      	mov	r0, r9
   165e6:	6819      	ldr	r1, [r3, #0]
   165e8:	88da      	ldrh	r2, [r3, #6]
   165ea:	f7f6 fc4a 	bl	ce82 <bb_set>
                arr_push(&object->captureDefinition, key_init(start, end));
   165ee:	4649      	mov	r1, r9
   165f0:	4638      	mov	r0, r7
   165f2:	f7fd f994 	bl	1391e <key_init>
   165f6:	4601      	mov	r1, r0
   165f8:	4628      	mov	r0, r5
   165fa:	f7f9 fe87 	bl	1030c <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   165fe:	f108 0801 	add.w	r8, r8, #1
   16602:	68b0      	ldr	r0, [r6, #8]
   16604:	88c3      	ldrh	r3, [r0, #6]
   16606:	4543      	cmp	r3, r8
   16608:	d0e8      	beq.n	165dc <cosem_setmMbusClient+0x68>
                ret = va_getByIndex(value->Arr, pos, &tmp);
   1660a:	466a      	mov	r2, sp
   1660c:	4641      	mov	r1, r8
   1660e:	f003 fe48 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   16612:	4604      	mov	r4, r0
   16614:	2800      	cmp	r0, #0
   16616:	d1d4      	bne.n	165c2 <cosem_setmMbusClient+0x4e>
                ret = va_getByIndex(tmp->Arr, 0, &tmp3);
   16618:	9b00      	ldr	r3, [sp, #0]
   1661a:	4601      	mov	r1, r0
   1661c:	aa01      	add	r2, sp, #4
   1661e:	6898      	ldr	r0, [r3, #8]
   16620:	f003 fe3f 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   16624:	4604      	mov	r4, r0
   16626:	2800      	cmp	r0, #0
   16628:	d1cb      	bne.n	165c2 <cosem_setmMbusClient+0x4e>
                start = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
   1662a:	200c      	movs	r0, #12
   1662c:	f7f5 fac2 	bl	bbb4 <malloc>
   16630:	4607      	mov	r7, r0
                end = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
   16632:	200c      	movs	r0, #12
   16634:	f7f5 fabe 	bl	bbb4 <malloc>
   16638:	4681      	mov	r9, r0
                BYTE_BUFFER_INIT(start);
   1663a:	4638      	mov	r0, r7
   1663c:	f7f6 fad2 	bl	cbe4 <bb_init>
                BYTE_BUFFER_INIT(end);
   16640:	4648      	mov	r0, r9
   16642:	f7f6 facf 	bl	cbe4 <bb_init>
                bb_set(start, tmp3->byteArr->data, tmp3->byteArr->size);
   16646:	9b01      	ldr	r3, [sp, #4]
   16648:	689b      	ldr	r3, [r3, #8]
   1664a:	4638      	mov	r0, r7
   1664c:	88da      	ldrh	r2, [r3, #6]
   1664e:	6819      	ldr	r1, [r3, #0]
   16650:	f7f6 fc17 	bl	ce82 <bb_set>
                ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   16654:	9b00      	ldr	r3, [sp, #0]
   16656:	aa01      	add	r2, sp, #4
   16658:	6898      	ldr	r0, [r3, #8]
   1665a:	2101      	movs	r1, #1
   1665c:	f003 fe21 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   16660:	4604      	mov	r4, r0
   16662:	2800      	cmp	r0, #0
   16664:	d0bc      	beq.n	165e0 <cosem_setmMbusClient+0x6c>
                    gxfree(start);
   16666:	4638      	mov	r0, r7
   16668:	f7f5 faac 	bl	bbc4 <free>
                    gxfree(end);
   1666c:	4648      	mov	r0, r9
   1666e:	f7f5 faa9 	bl	bbc4 <free>
                    break;
   16672:	e7a6      	b.n	165c2 <cosem_setmMbusClient+0x4e>
            for (pos = 0; pos != value->Arr->size; ++pos)
   16674:	f04f 0800 	mov.w	r8, #0
   16678:	e7c3      	b.n	16602 <cosem_setmMbusClient+0x8e>
    else if (index == 4)
   1667a:	2a04      	cmp	r2, #4
   1667c:	d104      	bne.n	16688 <cosem_setmMbusClient+0x114>
        object->capturePeriod = var_toInteger(value);
   1667e:	4618      	mov	r0, r3
   16680:	f003 ff89 	bl	1a596 <var_toInteger>
   16684:	6128      	str	r0, [r5, #16]
   16686:	e7a9      	b.n	165dc <cosem_setmMbusClient+0x68>
    else if (index == 5)
   16688:	2a05      	cmp	r2, #5
   1668a:	d104      	bne.n	16696 <cosem_setmMbusClient+0x122>
        object->primaryAddress = (unsigned char)var_toInteger(value);
   1668c:	4618      	mov	r0, r3
   1668e:	f003 ff82 	bl	1a596 <var_toInteger>
   16692:	7528      	strb	r0, [r5, #20]
   16694:	e7a2      	b.n	165dc <cosem_setmMbusClient+0x68>
    else if (index == 6)
   16696:	2a06      	cmp	r2, #6
   16698:	d104      	bne.n	166a4 <cosem_setmMbusClient+0x130>
        object->identificationNumber = var_toInteger(value);
   1669a:	4618      	mov	r0, r3
   1669c:	f003 ff7b 	bl	1a596 <var_toInteger>
   166a0:	62a8      	str	r0, [r5, #40]	; 0x28
   166a2:	e79b      	b.n	165dc <cosem_setmMbusClient+0x68>
    else if (index == 7)
   166a4:	2a07      	cmp	r2, #7
   166a6:	d104      	bne.n	166b2 <cosem_setmMbusClient+0x13e>
        object->manufacturerID = (uint16_t)var_toInteger(value);
   166a8:	4618      	mov	r0, r3
   166aa:	f003 ff74 	bl	1a596 <var_toInteger>
   166ae:	85a8      	strh	r0, [r5, #44]	; 0x2c
   166b0:	e794      	b.n	165dc <cosem_setmMbusClient+0x68>
    else if (index == 8)
   166b2:	2a08      	cmp	r2, #8
   166b4:	d105      	bne.n	166c2 <cosem_setmMbusClient+0x14e>
        object->dataHeaderVersion = (unsigned char)var_toInteger(value);
   166b6:	4618      	mov	r0, r3
   166b8:	f003 ff6d 	bl	1a596 <var_toInteger>
   166bc:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
   166c0:	e78c      	b.n	165dc <cosem_setmMbusClient+0x68>
    else if (index == 9)
   166c2:	2a09      	cmp	r2, #9
   166c4:	d105      	bne.n	166d2 <cosem_setmMbusClient+0x15e>
        object->deviceType = (unsigned char)var_toInteger(value);
   166c6:	4618      	mov	r0, r3
   166c8:	f003 ff65 	bl	1a596 <var_toInteger>
   166cc:	f885 002f 	strb.w	r0, [r5, #47]	; 0x2f
   166d0:	e784      	b.n	165dc <cosem_setmMbusClient+0x68>
    else if (index == 10)
   166d2:	2a0a      	cmp	r2, #10
   166d4:	d105      	bne.n	166e2 <cosem_setmMbusClient+0x16e>
        object->accessNumber = (unsigned char)var_toInteger(value);
   166d6:	4618      	mov	r0, r3
   166d8:	f003 ff5d 	bl	1a596 <var_toInteger>
   166dc:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30
   166e0:	e77c      	b.n	165dc <cosem_setmMbusClient+0x68>
    else if (index == 11)
   166e2:	2a0b      	cmp	r2, #11
   166e4:	d105      	bne.n	166f2 <cosem_setmMbusClient+0x17e>
        object->status = (unsigned char)var_toInteger(value);
   166e6:	4618      	mov	r0, r3
   166e8:	f003 ff55 	bl	1a596 <var_toInteger>
   166ec:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
   166f0:	e774      	b.n	165dc <cosem_setmMbusClient+0x68>
    else if (index == 12)
   166f2:	2a0c      	cmp	r2, #12
   166f4:	d105      	bne.n	16702 <cosem_setmMbusClient+0x18e>
        object->alarm = (unsigned char)var_toInteger(value);
   166f6:	4618      	mov	r0, r3
   166f8:	f003 ff4d 	bl	1a596 <var_toInteger>
   166fc:	f885 0032 	strb.w	r0, [r5, #50]	; 0x32
   16700:	e76c      	b.n	165dc <cosem_setmMbusClient+0x68>
    else if (index == 13 && object->base.version != 0)
   16702:	2a0d      	cmp	r2, #13
   16704:	d106      	bne.n	16714 <cosem_setmMbusClient+0x1a0>
   16706:	788b      	ldrb	r3, [r1, #2]
   16708:	b173      	cbz	r3, 16728 <cosem_setmMbusClient+0x1b4>
        object->configuration = (uint16_t)var_toInteger(value);
   1670a:	4630      	mov	r0, r6
   1670c:	f003 ff43 	bl	1a596 <var_toInteger>
   16710:	86a8      	strh	r0, [r5, #52]	; 0x34
   16712:	e763      	b.n	165dc <cosem_setmMbusClient+0x68>
    else if (index == 14 && object->base.version != 0)
   16714:	2a0e      	cmp	r2, #14
   16716:	d107      	bne.n	16728 <cosem_setmMbusClient+0x1b4>
   16718:	788b      	ldrb	r3, [r1, #2]
   1671a:	b12b      	cbz	r3, 16728 <cosem_setmMbusClient+0x1b4>
        object->encryptionKeyStatus = (DLMS_MBUS_ENCRYPTION_KEY_STATUS)var_toInteger(value);
   1671c:	4630      	mov	r0, r6
   1671e:	f003 ff3a 	bl	1a596 <var_toInteger>
   16722:	f885 0036 	strb.w	r0, [r5, #54]	; 0x36
   16726:	e759      	b.n	165dc <cosem_setmMbusClient+0x68>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   16728:	f44f 7481 	mov.w	r4, #258	; 0x102
   1672c:	e749      	b.n	165c2 <cosem_setmMbusClient+0x4e>

0001672e <cosem_setModemConfiguration>:
    if (index == 2)
   1672e:	2902      	cmp	r1, #2
{
   16730:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   16734:	4605      	mov	r5, r0
   16736:	4616      	mov	r6, r2
    if (index == 2)
   16738:	d109      	bne.n	1674e <cosem_setModemConfiguration+0x20>
        object->communicationSpeed = (DLMS_BAUD_RATE)var_toInteger(value);
   1673a:	4610      	mov	r0, r2
   1673c:	f003 ff2b 	bl	1a596 <var_toInteger>
   16740:	f885 0028 	strb.w	r0, [r5, #40]	; 0x28
    int ret = 0, pos;
   16744:	2400      	movs	r4, #0
}
   16746:	4620      	mov	r0, r4
   16748:	b003      	add	sp, #12
   1674a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if (index == 3)
   1674e:	2903      	cmp	r1, #3
   16750:	d157      	bne.n	16802 <cosem_setModemConfiguration+0xd4>
        obj_clearModemConfigurationInitialisationStrings(&object->initialisationStrings);
   16752:	3510      	adds	r5, #16
   16754:	4628      	mov	r0, r5
   16756:	f7fd f9dd 	bl	13b14 <obj_clearModemConfigurationInitialisationStrings>
        if (value->Arr != NULL)
   1675a:	68b3      	ldr	r3, [r6, #8]
   1675c:	2b00      	cmp	r3, #0
   1675e:	d0f1      	beq.n	16744 <cosem_setModemConfiguration+0x16>
            for (pos = 0; pos != value->Arr->size; ++pos)
   16760:	f04f 0800 	mov.w	r8, #0
   16764:	e048      	b.n	167f8 <cosem_setModemConfiguration+0xca>
                ret = va_getByIndex(value->Arr, pos, &tmp);
   16766:	466a      	mov	r2, sp
   16768:	4641      	mov	r1, r8
   1676a:	f003 fd9a 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   1676e:	4604      	mov	r4, r0
   16770:	2800      	cmp	r0, #0
   16772:	d1e8      	bne.n	16746 <cosem_setModemConfiguration+0x18>
                ret = va_getByIndex(tmp->Arr, 0, &tmp3);
   16774:	9b00      	ldr	r3, [sp, #0]
   16776:	4601      	mov	r1, r0
   16778:	aa01      	add	r2, sp, #4
   1677a:	6898      	ldr	r0, [r3, #8]
   1677c:	f003 fd91 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   16780:	4604      	mov	r4, r0
   16782:	2800      	cmp	r0, #0
   16784:	d1df      	bne.n	16746 <cosem_setModemConfiguration+0x18>
                modemInit = (gxModemInitialisation*)gxmalloc(sizeof(gxModemInitialisation));
   16786:	201c      	movs	r0, #28
   16788:	f7f5 fa14 	bl	bbb4 <malloc>
                if (modemInit == NULL)
   1678c:	4607      	mov	r7, r0
   1678e:	2800      	cmp	r0, #0
   16790:	d065      	beq.n	1685e <cosem_setModemConfiguration+0x130>
                BYTE_BUFFER_INIT(&modemInit->response);
   16792:	f107 090c 	add.w	r9, r7, #12
                BYTE_BUFFER_INIT(&modemInit->request);
   16796:	f7f6 fa25 	bl	cbe4 <bb_init>
                BYTE_BUFFER_INIT(&modemInit->response);
   1679a:	4648      	mov	r0, r9
   1679c:	f7f6 fa22 	bl	cbe4 <bb_init>
                bb_set(&modemInit->request, tmp3->byteArr->data, tmp3->byteArr->size);
   167a0:	9b01      	ldr	r3, [sp, #4]
   167a2:	689b      	ldr	r3, [r3, #8]
   167a4:	4638      	mov	r0, r7
   167a6:	88da      	ldrh	r2, [r3, #6]
   167a8:	6819      	ldr	r1, [r3, #0]
   167aa:	f7f6 fb6a 	bl	ce82 <bb_set>
                ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   167ae:	9b00      	ldr	r3, [sp, #0]
   167b0:	aa01      	add	r2, sp, #4
   167b2:	6898      	ldr	r0, [r3, #8]
   167b4:	2101      	movs	r1, #1
   167b6:	f003 fd74 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   167ba:	4604      	mov	r4, r0
   167bc:	2800      	cmp	r0, #0
   167be:	d1c2      	bne.n	16746 <cosem_setModemConfiguration+0x18>
                bb_set(&modemInit->response, tmp3->byteArr->data, tmp3->byteArr->size);
   167c0:	9b01      	ldr	r3, [sp, #4]
   167c2:	689b      	ldr	r3, [r3, #8]
   167c4:	4648      	mov	r0, r9
   167c6:	88da      	ldrh	r2, [r3, #6]
   167c8:	6819      	ldr	r1, [r3, #0]
   167ca:	f7f6 fb5a 	bl	ce82 <bb_set>
                if (tmp->Arr->size > 2)
   167ce:	9b00      	ldr	r3, [sp, #0]
   167d0:	6898      	ldr	r0, [r3, #8]
   167d2:	88c3      	ldrh	r3, [r0, #6]
   167d4:	2b02      	cmp	r3, #2
   167d6:	d909      	bls.n	167ec <cosem_setModemConfiguration+0xbe>
                    ret = va_getByIndex(tmp->Arr, 2, &tmp3);
   167d8:	aa01      	add	r2, sp, #4
   167da:	2102      	movs	r1, #2
   167dc:	f003 fd61 	bl	1a2a2 <va_getByIndex>
                    if (ret != DLMS_ERROR_CODE_OK)
   167e0:	4604      	mov	r4, r0
   167e2:	2800      	cmp	r0, #0
   167e4:	d1af      	bne.n	16746 <cosem_setModemConfiguration+0x18>
                    modemInit->delay = tmp3->uiVal;
   167e6:	9b01      	ldr	r3, [sp, #4]
   167e8:	891b      	ldrh	r3, [r3, #8]
   167ea:	833b      	strh	r3, [r7, #24]
                arr_push(&object->initialisationStrings, modemInit);
   167ec:	4639      	mov	r1, r7
   167ee:	4628      	mov	r0, r5
   167f0:	f7f9 fd8c 	bl	1030c <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   167f4:	f108 0801 	add.w	r8, r8, #1
   167f8:	68b0      	ldr	r0, [r6, #8]
   167fa:	88c3      	ldrh	r3, [r0, #6]
   167fc:	4543      	cmp	r3, r8
   167fe:	d1b2      	bne.n	16766 <cosem_setModemConfiguration+0x38>
   16800:	e7a0      	b.n	16744 <cosem_setModemConfiguration+0x16>
    else if (index == 4)
   16802:	2904      	cmp	r1, #4
   16804:	d12e      	bne.n	16864 <cosem_setModemConfiguration+0x136>
        arr_clearStrings(&object->modemProfile);
   16806:	351c      	adds	r5, #28
   16808:	4628      	mov	r0, r5
   1680a:	f7f9 fdeb 	bl	103e4 <arr_clearStrings>
        if (value->Arr != NULL)
   1680e:	68b3      	ldr	r3, [r6, #8]
   16810:	2b00      	cmp	r3, #0
   16812:	d097      	beq.n	16744 <cosem_setModemConfiguration+0x16>
            for (pos = 0; pos != value->Arr->size; ++pos)
   16814:	2700      	movs	r7, #0
   16816:	e01d      	b.n	16854 <cosem_setModemConfiguration+0x126>
                ret = va_getByIndex(value->Arr, pos, &tmp);
   16818:	466a      	mov	r2, sp
   1681a:	4639      	mov	r1, r7
   1681c:	f003 fd41 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   16820:	4604      	mov	r4, r0
   16822:	2800      	cmp	r0, #0
   16824:	d18f      	bne.n	16746 <cosem_setModemConfiguration+0x18>
                str = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
   16826:	200c      	movs	r0, #12
   16828:	f7f5 f9c4 	bl	bbb4 <malloc>
   1682c:	4680      	mov	r8, r0
                BYTE_BUFFER_INIT(str);
   1682e:	f7f6 f9d9 	bl	cbe4 <bb_init>
                bb_set2(str, tmp->byteArr, 0, bb_size(tmp->byteArr));
   16832:	9b00      	ldr	r3, [sp, #0]
   16834:	f8d3 9008 	ldr.w	r9, [r3, #8]
   16838:	4648      	mov	r0, r9
   1683a:	f7f6 f9d0 	bl	cbde <bb_size>
   1683e:	4622      	mov	r2, r4
   16840:	4603      	mov	r3, r0
   16842:	4649      	mov	r1, r9
   16844:	4640      	mov	r0, r8
   16846:	f7f6 fb4b 	bl	cee0 <bb_set2>
                arr_push(&object->modemProfile, str);
   1684a:	4641      	mov	r1, r8
   1684c:	4628      	mov	r0, r5
   1684e:	f7f9 fd5d 	bl	1030c <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   16852:	3701      	adds	r7, #1
   16854:	68b0      	ldr	r0, [r6, #8]
   16856:	88c3      	ldrh	r3, [r0, #6]
   16858:	42bb      	cmp	r3, r7
   1685a:	d1dd      	bne.n	16818 <cosem_setModemConfiguration+0xea>
   1685c:	e772      	b.n	16744 <cosem_setModemConfiguration+0x16>
                    ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   1685e:	f44f 7482 	mov.w	r4, #260	; 0x104
   16862:	e770      	b.n	16746 <cosem_setModemConfiguration+0x18>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   16864:	f44f 7481 	mov.w	r4, #258	; 0x102
   16868:	e76d      	b.n	16746 <cosem_setModemConfiguration+0x18>

0001686a <cosem_setPppSetup>:
    if (index == 2)
   1686a:	2a02      	cmp	r2, #2
{
   1686c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   16870:	460d      	mov	r5, r1
   16872:	461f      	mov	r7, r3
    if (index == 2)
   16874:	d112      	bne.n	1689c <cosem_setPppSetup+0x32>
        if ((ret = oa_findByLN(&settings->objects, DLMS_OBJECT_TYPE_NONE, value->byteArr->data, &object->phy)) != 0)
   16876:	689a      	ldr	r2, [r3, #8]
   16878:	3098      	adds	r0, #152	; 0x98
   1687a:	f101 031c 	add.w	r3, r1, #28
   1687e:	6812      	ldr	r2, [r2, #0]
   16880:	2100      	movs	r1, #0
   16882:	f003 facb 	bl	19e1c <oa_findByLN>
   16886:	4604      	mov	r4, r0
   16888:	b920      	cbnz	r0, 16894 <cosem_setPppSetup+0x2a>
        if (object->phy == NULL)
   1688a:	69eb      	ldr	r3, [r5, #28]
   1688c:	2b00      	cmp	r3, #0
   1688e:	f000 80fd 	beq.w	16a8c <cosem_setPppSetup+0x222>
    int ret = DLMS_ERROR_CODE_OK, pos;
   16892:	2400      	movs	r4, #0
}
   16894:	4620      	mov	r0, r4
   16896:	b003      	add	sp, #12
   16898:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if (index == 3)
   1689c:	2a03      	cmp	r2, #3
   1689e:	d154      	bne.n	1694a <cosem_setPppSetup+0xe0>
        arr_clear(&object->lcpOptions);
   168a0:	3520      	adds	r5, #32
   168a2:	4628      	mov	r0, r5
   168a4:	f7f9 fd47 	bl	10336 <arr_clear>
        if (value->Arr != NULL)
   168a8:	68bb      	ldr	r3, [r7, #8]
   168aa:	2b00      	cmp	r3, #0
   168ac:	d0f1      	beq.n	16892 <cosem_setPppSetup+0x28>
            for (pos = 0; pos != value->Arr->size; ++pos)
   168ae:	f04f 0800 	mov.w	r8, #0
   168b2:	e045      	b.n	16940 <cosem_setPppSetup+0xd6>
                ret = va_getByIndex(value->Arr, pos, &tmp);
   168b4:	466a      	mov	r2, sp
   168b6:	4641      	mov	r1, r8
   168b8:	f003 fcf3 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   168bc:	4604      	mov	r4, r0
   168be:	2800      	cmp	r0, #0
   168c0:	d1e8      	bne.n	16894 <cosem_setPppSetup+0x2a>
                ret = va_getByIndex(tmp->Arr, 0, &tmp3);
   168c2:	9b00      	ldr	r3, [sp, #0]
   168c4:	4601      	mov	r1, r0
   168c6:	aa01      	add	r2, sp, #4
   168c8:	6898      	ldr	r0, [r3, #8]
   168ca:	f003 fcea 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   168ce:	4604      	mov	r4, r0
   168d0:	2800      	cmp	r0, #0
   168d2:	d1df      	bne.n	16894 <cosem_setPppSetup+0x2a>
                lcpItem = (gxpppSetupLcpOption*)gxmalloc(sizeof(gxpppSetupLcpOption));
   168d4:	2018      	movs	r0, #24
   168d6:	f7f5 f96d 	bl	bbb4 <malloc>
                if (lcpItem == NULL)
   168da:	4606      	mov	r6, r0
   168dc:	2800      	cmp	r0, #0
   168de:	f000 80d5 	beq.w	16a8c <cosem_setPppSetup+0x222>
                var_init(&lcpItem->data);
   168e2:	f100 0908 	add.w	r9, r0, #8
   168e6:	4648      	mov	r0, r9
   168e8:	f003 fb01 	bl	19eee <var_init>
                lcpItem->type = (DLMS_PPP_SETUP_LCP_OPTION_TYPE)var_toInteger(tmp3);
   168ec:	9801      	ldr	r0, [sp, #4]
   168ee:	f003 fe52 	bl	1a596 <var_toInteger>
                ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   168f2:	9b00      	ldr	r3, [sp, #0]
                lcpItem->type = (DLMS_PPP_SETUP_LCP_OPTION_TYPE)var_toInteger(tmp3);
   168f4:	7030      	strb	r0, [r6, #0]
                ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   168f6:	6898      	ldr	r0, [r3, #8]
   168f8:	aa01      	add	r2, sp, #4
   168fa:	2101      	movs	r1, #1
   168fc:	f003 fcd1 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   16900:	4604      	mov	r4, r0
   16902:	2800      	cmp	r0, #0
   16904:	f040 80be 	bne.w	16a84 <cosem_setPppSetup+0x21a>
                lcpItem->length = (unsigned char)var_toInteger(tmp3);
   16908:	9801      	ldr	r0, [sp, #4]
   1690a:	f003 fe44 	bl	1a596 <var_toInteger>
                ret = va_getByIndex(tmp->Arr, 2, &tmp3);
   1690e:	9b00      	ldr	r3, [sp, #0]
                lcpItem->length = (unsigned char)var_toInteger(tmp3);
   16910:	7070      	strb	r0, [r6, #1]
                ret = va_getByIndex(tmp->Arr, 2, &tmp3);
   16912:	6898      	ldr	r0, [r3, #8]
   16914:	aa01      	add	r2, sp, #4
   16916:	2102      	movs	r1, #2
   16918:	f003 fcc3 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   1691c:	4604      	mov	r4, r0
   1691e:	2800      	cmp	r0, #0
   16920:	f040 80b0 	bne.w	16a84 <cosem_setPppSetup+0x21a>
                ret = var_copy(&lcpItem->data, tmp3);
   16924:	9901      	ldr	r1, [sp, #4]
   16926:	4648      	mov	r0, r9
   16928:	f7ed fce8 	bl	42fc <var_copy>
                if (ret != DLMS_ERROR_CODE_OK)
   1692c:	4604      	mov	r4, r0
   1692e:	2800      	cmp	r0, #0
   16930:	f040 80a8 	bne.w	16a84 <cosem_setPppSetup+0x21a>
                arr_push(&object->lcpOptions, lcpItem);
   16934:	4631      	mov	r1, r6
   16936:	4628      	mov	r0, r5
   16938:	f7f9 fce8 	bl	1030c <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   1693c:	f108 0801 	add.w	r8, r8, #1
   16940:	68b8      	ldr	r0, [r7, #8]
   16942:	88c3      	ldrh	r3, [r0, #6]
   16944:	4543      	cmp	r3, r8
   16946:	d1b5      	bne.n	168b4 <cosem_setPppSetup+0x4a>
   16948:	e7a3      	b.n	16892 <cosem_setPppSetup+0x28>
    else if (index == 4)
   1694a:	2a04      	cmp	r2, #4
   1694c:	d151      	bne.n	169f2 <cosem_setPppSetup+0x188>
        arr_clear(&object->ipcpOptions);
   1694e:	3510      	adds	r5, #16
   16950:	4628      	mov	r0, r5
   16952:	f7f9 fcf0 	bl	10336 <arr_clear>
        if (value->Arr != NULL)
   16956:	68bb      	ldr	r3, [r7, #8]
   16958:	2b00      	cmp	r3, #0
   1695a:	d09a      	beq.n	16892 <cosem_setPppSetup+0x28>
    gxpppSetupIPCPOption* ipcpItem = NULL;
   1695c:	2600      	movs	r6, #0
            for (pos = 0; pos != value->Arr->size; ++pos)
   1695e:	46b0      	mov	r8, r6
   16960:	e042      	b.n	169e8 <cosem_setPppSetup+0x17e>
                ret = va_getByIndex(value->Arr, pos, &tmp);
   16962:	466a      	mov	r2, sp
   16964:	4641      	mov	r1, r8
   16966:	f003 fc9c 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   1696a:	4604      	mov	r4, r0
   1696c:	2800      	cmp	r0, #0
   1696e:	f040 8086 	bne.w	16a7e <cosem_setPppSetup+0x214>
                ret = va_getByIndex(tmp->Arr, 0, &tmp3);
   16972:	9b00      	ldr	r3, [sp, #0]
   16974:	4601      	mov	r1, r0
   16976:	aa01      	add	r2, sp, #4
   16978:	6898      	ldr	r0, [r3, #8]
   1697a:	f003 fc92 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   1697e:	4604      	mov	r4, r0
   16980:	2800      	cmp	r0, #0
   16982:	d17c      	bne.n	16a7e <cosem_setPppSetup+0x214>
                ipcpItem = (gxpppSetupIPCPOption*)gxmalloc(sizeof(gxpppSetupIPCPOption));
   16984:	2018      	movs	r0, #24
   16986:	f7f5 f915 	bl	bbb4 <malloc>
                if (ipcpItem == NULL)
   1698a:	4606      	mov	r6, r0
   1698c:	2800      	cmp	r0, #0
   1698e:	d07d      	beq.n	16a8c <cosem_setPppSetup+0x222>
                var_init(&ipcpItem->data);
   16990:	f100 0908 	add.w	r9, r0, #8
   16994:	4648      	mov	r0, r9
   16996:	f003 faaa 	bl	19eee <var_init>
                ipcpItem->type = (DLMS_PPP_SETUP_IPCP_OPTION_TYPE)var_toInteger(tmp3);
   1699a:	9801      	ldr	r0, [sp, #4]
   1699c:	f003 fdfb 	bl	1a596 <var_toInteger>
                ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   169a0:	9b00      	ldr	r3, [sp, #0]
                ipcpItem->type = (DLMS_PPP_SETUP_IPCP_OPTION_TYPE)var_toInteger(tmp3);
   169a2:	7030      	strb	r0, [r6, #0]
                ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   169a4:	6898      	ldr	r0, [r3, #8]
   169a6:	aa01      	add	r2, sp, #4
   169a8:	2101      	movs	r1, #1
   169aa:	f003 fc7a 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   169ae:	4604      	mov	r4, r0
   169b0:	2800      	cmp	r0, #0
   169b2:	d167      	bne.n	16a84 <cosem_setPppSetup+0x21a>
                ipcpItem->length = (unsigned char)var_toInteger(tmp3);
   169b4:	9801      	ldr	r0, [sp, #4]
   169b6:	f003 fdee 	bl	1a596 <var_toInteger>
                ret = va_getByIndex(tmp->Arr, 2, &tmp3);
   169ba:	9b00      	ldr	r3, [sp, #0]
                ipcpItem->length = (unsigned char)var_toInteger(tmp3);
   169bc:	7070      	strb	r0, [r6, #1]
                ret = va_getByIndex(tmp->Arr, 2, &tmp3);
   169be:	6898      	ldr	r0, [r3, #8]
   169c0:	aa01      	add	r2, sp, #4
   169c2:	2102      	movs	r1, #2
   169c4:	f003 fc6d 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   169c8:	4604      	mov	r4, r0
   169ca:	2800      	cmp	r0, #0
   169cc:	d15a      	bne.n	16a84 <cosem_setPppSetup+0x21a>
                ret = var_copy(&ipcpItem->data, tmp3);
   169ce:	9901      	ldr	r1, [sp, #4]
   169d0:	4648      	mov	r0, r9
   169d2:	f7ed fc93 	bl	42fc <var_copy>
                if (ret != DLMS_ERROR_CODE_OK)
   169d6:	4604      	mov	r4, r0
   169d8:	2800      	cmp	r0, #0
   169da:	d153      	bne.n	16a84 <cosem_setPppSetup+0x21a>
                arr_push(&object->ipcpOptions, ipcpItem);
   169dc:	4631      	mov	r1, r6
   169de:	4628      	mov	r0, r5
   169e0:	f7f9 fc94 	bl	1030c <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   169e4:	f108 0801 	add.w	r8, r8, #1
   169e8:	68b8      	ldr	r0, [r7, #8]
   169ea:	88c3      	ldrh	r3, [r0, #6]
   169ec:	4543      	cmp	r3, r8
   169ee:	d1b8      	bne.n	16962 <cosem_setPppSetup+0xf8>
   169f0:	e74f      	b.n	16892 <cosem_setPppSetup+0x28>
    else if (index == 5)
   169f2:	2a05      	cmp	r2, #5
   169f4:	d140      	bne.n	16a78 <cosem_setPppSetup+0x20e>
        if (value->Arr == NULL || value->Arr->size == 0)
   169f6:	6898      	ldr	r0, [r3, #8]
   169f8:	b108      	cbz	r0, 169fe <cosem_setPppSetup+0x194>
   169fa:	88c3      	ldrh	r3, [r0, #6]
   169fc:	b943      	cbnz	r3, 16a10 <cosem_setPppSetup+0x1a6>
            bb_clear(&object->userName);
   169fe:	f105 002c 	add.w	r0, r5, #44	; 0x2c
   16a02:	f7f6 fab2 	bl	cf6a <bb_clear>
            bb_clear(&object->password);
   16a06:	f105 0038 	add.w	r0, r5, #56	; 0x38
   16a0a:	f7f6 faae 	bl	cf6a <bb_clear>
   16a0e:	e740      	b.n	16892 <cosem_setPppSetup+0x28>
        else if (value->Arr->size == 2)
   16a10:	2b02      	cmp	r3, #2
   16a12:	d131      	bne.n	16a78 <cosem_setPppSetup+0x20e>
            ret = va_getByIndex(value->Arr, 0, &tmp);
   16a14:	466a      	mov	r2, sp
   16a16:	2100      	movs	r1, #0
   16a18:	f003 fc43 	bl	1a2a2 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   16a1c:	4604      	mov	r4, r0
   16a1e:	2800      	cmp	r0, #0
   16a20:	f47f af38 	bne.w	16894 <cosem_setPppSetup+0x2a>
            bb_clear(&object->userName);
   16a24:	f105 062c 	add.w	r6, r5, #44	; 0x2c
   16a28:	4630      	mov	r0, r6
   16a2a:	f7f6 fa9e 	bl	cf6a <bb_clear>
            bb_set2(&object->userName, tmp->byteArr, 0, bb_size(tmp->byteArr));
   16a2e:	9b00      	ldr	r3, [sp, #0]
   16a30:	f8d3 8008 	ldr.w	r8, [r3, #8]
   16a34:	4640      	mov	r0, r8
   16a36:	f7f6 f8d2 	bl	cbde <bb_size>
   16a3a:	4622      	mov	r2, r4
   16a3c:	4603      	mov	r3, r0
   16a3e:	4641      	mov	r1, r8
   16a40:	4630      	mov	r0, r6
   16a42:	f7f6 fa4d 	bl	cee0 <bb_set2>
            ret = va_getByIndex(value->Arr, 1, &tmp);
   16a46:	68b8      	ldr	r0, [r7, #8]
   16a48:	466a      	mov	r2, sp
   16a4a:	2101      	movs	r1, #1
   16a4c:	f003 fc29 	bl	1a2a2 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   16a50:	4604      	mov	r4, r0
   16a52:	2800      	cmp	r0, #0
   16a54:	f47f af1e 	bne.w	16894 <cosem_setPppSetup+0x2a>
            bb_clear(&object->password);
   16a58:	3538      	adds	r5, #56	; 0x38
   16a5a:	4628      	mov	r0, r5
   16a5c:	f7f6 fa85 	bl	cf6a <bb_clear>
            bb_set2(&object->password, tmp->byteArr, 0, bb_size(tmp->byteArr));
   16a60:	9b00      	ldr	r3, [sp, #0]
   16a62:	689e      	ldr	r6, [r3, #8]
   16a64:	4630      	mov	r0, r6
   16a66:	f7f6 f8ba 	bl	cbde <bb_size>
   16a6a:	4622      	mov	r2, r4
   16a6c:	4603      	mov	r3, r0
   16a6e:	4631      	mov	r1, r6
   16a70:	4628      	mov	r0, r5
   16a72:	f7f6 fa35 	bl	cee0 <bb_set2>
   16a76:	e70d      	b.n	16894 <cosem_setPppSetup+0x2a>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   16a78:	f44f 7481 	mov.w	r4, #258	; 0x102
   16a7c:	e70a      	b.n	16894 <cosem_setPppSetup+0x2a>
            if (ret != 0 && ipcpItem != NULL)
   16a7e:	2e00      	cmp	r6, #0
   16a80:	f43f af08 	beq.w	16894 <cosem_setPppSetup+0x2a>
                gxfree(lcpItem);
   16a84:	4630      	mov	r0, r6
   16a86:	f7f5 f89d 	bl	bbc4 <free>
   16a8a:	e703      	b.n	16894 <cosem_setPppSetup+0x2a>
                    ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   16a8c:	f44f 7482 	mov.w	r4, #260	; 0x104
            if (ret != 0 && lcpItem != NULL)
   16a90:	e700      	b.n	16894 <cosem_setPppSetup+0x2a>

00016a92 <cosem_setRegisterActivation>:
{
   16a92:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    unsigned char index = e->index;
   16a96:	7e0b      	ldrb	r3, [r1, #24]
    gxRegisterActivation* object = (gxRegisterActivation*)e->target;
   16a98:	694d      	ldr	r5, [r1, #20]
    if (index == 2)
   16a9a:	2b02      	cmp	r3, #2
{
   16a9c:	b085      	sub	sp, #20
   16a9e:	4680      	mov	r8, r0
   16aa0:	460f      	mov	r7, r1
    if (index == 2)
   16aa2:	d148      	bne.n	16b36 <cosem_setRegisterActivation+0xa4>
        obj_clearRegisterActivationAssignment(&object->registerAssignment);
   16aa4:	3510      	adds	r5, #16
   16aa6:	4628      	mov	r0, r5
   16aa8:	f7fd f8cc 	bl	13c44 <obj_clearRegisterActivationAssignment>
        if (value->Arr != NULL)
   16aac:	68bb      	ldr	r3, [r7, #8]
   16aae:	2b00      	cmp	r3, #0
   16ab0:	d13e      	bne.n	16b30 <cosem_setRegisterActivation+0x9e>
    int ret = 0, pos;
   16ab2:	2400      	movs	r4, #0
}
   16ab4:	4620      	mov	r0, r4
   16ab6:	b005      	add	sp, #20
   16ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                ret = va_getByIndex(value->Arr, pos, &tmp);
   16abc:	aa02      	add	r2, sp, #8
   16abe:	4631      	mov	r1, r6
                objectDefinition = NULL;
   16ac0:	f8cd 9004 	str.w	r9, [sp, #4]
                ret = va_getByIndex(value->Arr, pos, &tmp);
   16ac4:	f003 fbed 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   16ac8:	4604      	mov	r4, r0
   16aca:	2800      	cmp	r0, #0
   16acc:	d1f2      	bne.n	16ab4 <cosem_setRegisterActivation+0x22>
                ret = va_getByIndex(tmp->Arr, 0, &tmp3);
   16ace:	9b02      	ldr	r3, [sp, #8]
   16ad0:	4601      	mov	r1, r0
   16ad2:	aa03      	add	r2, sp, #12
   16ad4:	6898      	ldr	r0, [r3, #8]
   16ad6:	f003 fbe4 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   16ada:	4604      	mov	r4, r0
   16adc:	2800      	cmp	r0, #0
   16ade:	d1e9      	bne.n	16ab4 <cosem_setRegisterActivation+0x22>
                type = (short) var_toInteger(tmp3);
   16ae0:	9803      	ldr	r0, [sp, #12]
   16ae2:	f003 fd58 	bl	1a596 <var_toInteger>
                ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   16ae6:	9b02      	ldr	r3, [sp, #8]
                type = (short) var_toInteger(tmp3);
   16ae8:	4682      	mov	sl, r0
   16aea:	fa0f fb80 	sxth.w	fp, r0
                ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   16aee:	aa03      	add	r2, sp, #12
   16af0:	6898      	ldr	r0, [r3, #8]
   16af2:	2101      	movs	r1, #1
   16af4:	f003 fbd5 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   16af8:	4604      	mov	r4, r0
   16afa:	2800      	cmp	r0, #0
   16afc:	d1da      	bne.n	16ab4 <cosem_setRegisterActivation+0x22>
                if (type != 0)
   16afe:	f1bb 0f00 	cmp.w	fp, #0
   16b02:	d00f      	beq.n	16b24 <cosem_setRegisterActivation+0x92>
                unsigned char* ln = tmp3->byteArr->data;
   16b04:	9b03      	ldr	r3, [sp, #12]
   16b06:	689a      	ldr	r2, [r3, #8]
                    if ((ret = cosem_findObjectByLN(settings, type, ln, &objectDefinition)) != 0)
   16b08:	fa1f f18a 	uxth.w	r1, sl
   16b0c:	6812      	ldr	r2, [r2, #0]
   16b0e:	ab01      	add	r3, sp, #4
   16b10:	4640      	mov	r0, r8
   16b12:	f7eb f9cf 	bl	1eb4 <cosem_findObjectByLN>
   16b16:	4604      	mov	r4, r0
   16b18:	2800      	cmp	r0, #0
   16b1a:	d1cb      	bne.n	16ab4 <cosem_setRegisterActivation+0x22>
                    oa_push(&object->registerAssignment, objectDefinition);
   16b1c:	9901      	ldr	r1, [sp, #4]
   16b1e:	4628      	mov	r0, r5
   16b20:	f003 f91c 	bl	19d5c <oa_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   16b24:	3601      	adds	r6, #1
   16b26:	68b8      	ldr	r0, [r7, #8]
   16b28:	88c3      	ldrh	r3, [r0, #6]
   16b2a:	42b3      	cmp	r3, r6
   16b2c:	d1c6      	bne.n	16abc <cosem_setRegisterActivation+0x2a>
   16b2e:	e7c0      	b.n	16ab2 <cosem_setRegisterActivation+0x20>
   16b30:	2600      	movs	r6, #0
                objectDefinition = NULL;
   16b32:	46b1      	mov	r9, r6
   16b34:	e7f7      	b.n	16b26 <cosem_setRegisterActivation+0x94>
    else if (index == 3)
   16b36:	2b03      	cmp	r3, #3
   16b38:	d15b      	bne.n	16bf2 <cosem_setRegisterActivation+0x160>
        obj_clearRegisterActivationMaskList(&object->maskList);
   16b3a:	3518      	adds	r5, #24
   16b3c:	4628      	mov	r0, r5
   16b3e:	f7fd f886 	bl	13c4e <obj_clearRegisterActivationMaskList>
        if (value->Arr != NULL)
   16b42:	68bb      	ldr	r3, [r7, #8]
   16b44:	2b00      	cmp	r3, #0
   16b46:	d0b4      	beq.n	16ab2 <cosem_setRegisterActivation+0x20>
        gxByteBuffer* start = NULL, * end= NULL;
   16b48:	2600      	movs	r6, #0
   16b4a:	46b0      	mov	r8, r6
            for (pos = 0; pos != value->Arr->size; ++pos)
   16b4c:	46b1      	mov	r9, r6
   16b4e:	68b8      	ldr	r0, [r7, #8]
   16b50:	88c3      	ldrh	r3, [r0, #6]
   16b52:	454b      	cmp	r3, r9
   16b54:	d0ad      	beq.n	16ab2 <cosem_setRegisterActivation+0x20>
                if ((ret = va_getByIndex(value->Arr, pos, &tmp)) != DLMS_ERROR_CODE_OK)
   16b56:	aa02      	add	r2, sp, #8
   16b58:	4649      	mov	r1, r9
   16b5a:	f003 fba2 	bl	1a2a2 <va_getByIndex>
   16b5e:	4604      	mov	r4, r0
   16b60:	2800      	cmp	r0, #0
   16b62:	d15b      	bne.n	16c1c <cosem_setRegisterActivation+0x18a>
                ret = va_getByIndex(tmp->Arr, 0, &tmp3);
   16b64:	9b02      	ldr	r3, [sp, #8]
   16b66:	4601      	mov	r1, r0
   16b68:	aa03      	add	r2, sp, #12
   16b6a:	6898      	ldr	r0, [r3, #8]
   16b6c:	f003 fb99 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   16b70:	4604      	mov	r4, r0
   16b72:	2800      	cmp	r0, #0
   16b74:	d152      	bne.n	16c1c <cosem_setRegisterActivation+0x18a>
                start = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
   16b76:	200c      	movs	r0, #12
   16b78:	f7f5 f81c 	bl	bbb4 <malloc>
   16b7c:	4680      	mov	r8, r0
                BYTE_BUFFER_INIT(start);
   16b7e:	f7f6 f831 	bl	cbe4 <bb_init>
                end = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
   16b82:	200c      	movs	r0, #12
   16b84:	f7f5 f816 	bl	bbb4 <malloc>
   16b88:	4606      	mov	r6, r0
                BYTE_BUFFER_INIT(end);
   16b8a:	f7f6 f82b 	bl	cbe4 <bb_init>
                bb_set(start, tmp3->byteArr->data, tmp3->byteArr->size);
   16b8e:	9b03      	ldr	r3, [sp, #12]
   16b90:	689b      	ldr	r3, [r3, #8]
   16b92:	4640      	mov	r0, r8
   16b94:	88da      	ldrh	r2, [r3, #6]
   16b96:	6819      	ldr	r1, [r3, #0]
   16b98:	f7f6 f973 	bl	ce82 <bb_set>
                ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   16b9c:	9b02      	ldr	r3, [sp, #8]
   16b9e:	aa03      	add	r2, sp, #12
   16ba0:	6898      	ldr	r0, [r3, #8]
   16ba2:	2101      	movs	r1, #1
   16ba4:	f003 fb7d 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   16ba8:	4604      	mov	r4, r0
   16baa:	bbb8      	cbnz	r0, 16c1c <cosem_setRegisterActivation+0x18a>
                for (pos2 = 0; pos2 != tmp3->Arr->size; ++pos2)
   16bac:	4682      	mov	sl, r0
   16bae:	9b03      	ldr	r3, [sp, #12]
   16bb0:	6898      	ldr	r0, [r3, #8]
   16bb2:	88c3      	ldrh	r3, [r0, #6]
   16bb4:	4553      	cmp	r3, sl
   16bb6:	d10a      	bne.n	16bce <cosem_setRegisterActivation+0x13c>
                arr_push(&object->maskList, key_init(start, end));
   16bb8:	4631      	mov	r1, r6
   16bba:	4640      	mov	r0, r8
   16bbc:	f7fc feaf 	bl	1391e <key_init>
   16bc0:	4601      	mov	r1, r0
   16bc2:	4628      	mov	r0, r5
   16bc4:	f7f9 fba2 	bl	1030c <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   16bc8:	f109 0901 	add.w	r9, r9, #1
   16bcc:	e7bf      	b.n	16b4e <cosem_setRegisterActivation+0xbc>
                    if ((ret = va_getByIndex(tmp3->Arr, pos2, &tmp)) != 0 ||
   16bce:	aa02      	add	r2, sp, #8
   16bd0:	4651      	mov	r1, sl
   16bd2:	f003 fb66 	bl	1a2a2 <va_getByIndex>
   16bd6:	4604      	mov	r4, r0
   16bd8:	bb00      	cbnz	r0, 16c1c <cosem_setRegisterActivation+0x18a>
                        (ret = bb_setUInt8(end, (unsigned char)var_toInteger(tmp))) != 0)
   16bda:	9802      	ldr	r0, [sp, #8]
   16bdc:	f003 fcdb 	bl	1a596 <var_toInteger>
   16be0:	b2c1      	uxtb	r1, r0
   16be2:	4630      	mov	r0, r6
   16be4:	f7f6 f867 	bl	ccb6 <bb_setUInt8>
                    if ((ret = va_getByIndex(tmp3->Arr, pos2, &tmp)) != 0 ||
   16be8:	4604      	mov	r4, r0
   16bea:	b9b8      	cbnz	r0, 16c1c <cosem_setRegisterActivation+0x18a>
                for (pos2 = 0; pos2 != tmp3->Arr->size; ++pos2)
   16bec:	f10a 0a01 	add.w	sl, sl, #1
   16bf0:	e7dd      	b.n	16bae <cosem_setRegisterActivation+0x11c>
    else if (index == 4)
   16bf2:	2b04      	cmp	r3, #4
   16bf4:	d10f      	bne.n	16c16 <cosem_setRegisterActivation+0x184>
        bb_clear(&object->activeMask);
   16bf6:	3524      	adds	r5, #36	; 0x24
   16bf8:	4628      	mov	r0, r5
   16bfa:	f7f6 f9b6 	bl	cf6a <bb_clear>
        ret = bb_set2(&object->activeMask, value->byteArr, 0, bb_size(value->byteArr));
   16bfe:	68bc      	ldr	r4, [r7, #8]
   16c00:	4620      	mov	r0, r4
   16c02:	f7f5 ffec 	bl	cbde <bb_size>
   16c06:	4621      	mov	r1, r4
   16c08:	4603      	mov	r3, r0
   16c0a:	2200      	movs	r2, #0
   16c0c:	4628      	mov	r0, r5
   16c0e:	f7f6 f967 	bl	cee0 <bb_set2>
   16c12:	4604      	mov	r4, r0
   16c14:	e74e      	b.n	16ab4 <cosem_setRegisterActivation+0x22>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   16c16:	f44f 7481 	mov.w	r4, #258	; 0x102
    return ret;
   16c1a:	e74b      	b.n	16ab4 <cosem_setRegisterActivation+0x22>
                if (start != NULL)
   16c1c:	f1b8 0f00 	cmp.w	r8, #0
   16c20:	d002      	beq.n	16c28 <cosem_setRegisterActivation+0x196>
                    gxfree(start);
   16c22:	4640      	mov	r0, r8
   16c24:	f7f4 ffce 	bl	bbc4 <free>
                if (end != NULL)
   16c28:	2e00      	cmp	r6, #0
   16c2a:	f43f af43 	beq.w	16ab4 <cosem_setRegisterActivation+0x22>
                    gxfree(end);
   16c2e:	4630      	mov	r0, r6
   16c30:	f7f4 ffc8 	bl	bbc4 <free>
   16c34:	e73e      	b.n	16ab4 <cosem_setRegisterActivation+0x22>

00016c36 <cosem_setRegisterMonitor>:
{
   16c36:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (index == 2)
   16c3a:	2a02      	cmp	r2, #2
{
   16c3c:	b085      	sub	sp, #20
   16c3e:	4607      	mov	r7, r0
   16c40:	460d      	mov	r5, r1
   16c42:	461e      	mov	r6, r3
    if (index == 2)
   16c44:	d133      	bne.n	16cae <cosem_setRegisterMonitor+0x78>
        va_clear(&object->thresholds);
   16c46:	3524      	adds	r5, #36	; 0x24
   16c48:	4628      	mov	r0, r5
   16c4a:	f003 fa87 	bl	1a15c <va_clear>
        if (value->Arr != NULL)
   16c4e:	68b3      	ldr	r3, [r6, #8]
   16c50:	b923      	cbnz	r3, 16c5c <cosem_setRegisterMonitor+0x26>
    int ret = 0, pos;
   16c52:	2400      	movs	r4, #0
}
   16c54:	4620      	mov	r0, r4
   16c56:	b005      	add	sp, #20
   16c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            va_capacity(&object->thresholds, value->Arr->size);
   16c5c:	88d9      	ldrh	r1, [r3, #6]
   16c5e:	4628      	mov	r0, r5
   16c60:	f003 fa2b 	bl	1a0ba <va_capacity>
            for (pos = 0; pos != value->Arr->size; ++pos)
   16c64:	2700      	movs	r7, #0
                tmp3 = NULL;
   16c66:	46b8      	mov	r8, r7
            for (pos = 0; pos != value->Arr->size; ++pos)
   16c68:	68b0      	ldr	r0, [r6, #8]
   16c6a:	88c3      	ldrh	r3, [r0, #6]
   16c6c:	42bb      	cmp	r3, r7
   16c6e:	d0f0      	beq.n	16c52 <cosem_setRegisterMonitor+0x1c>
                ret = va_getByIndex(value->Arr, pos, &tmp);
   16c70:	aa01      	add	r2, sp, #4
   16c72:	4639      	mov	r1, r7
                tmp3 = NULL;
   16c74:	f8cd 8008 	str.w	r8, [sp, #8]
                ret = va_getByIndex(value->Arr, pos, &tmp);
   16c78:	f003 fb13 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   16c7c:	4604      	mov	r4, r0
   16c7e:	2800      	cmp	r0, #0
   16c80:	d1e8      	bne.n	16c54 <cosem_setRegisterMonitor+0x1e>
                tmp3 = (dlmsVARIANT*)gxmalloc(sizeof(dlmsVARIANT));
   16c82:	2010      	movs	r0, #16
   16c84:	f7f4 ff96 	bl	bbb4 <malloc>
   16c88:	9002      	str	r0, [sp, #8]
                if (tmp3 == NULL)
   16c8a:	2800      	cmp	r0, #0
   16c8c:	f000 8118 	beq.w	16ec0 <cosem_setRegisterMonitor+0x28a>
                var_init(tmp3);
   16c90:	f003 f92d 	bl	19eee <var_init>
                ret = var_copy(tmp3, tmp);
   16c94:	e9dd 1001 	ldrd	r1, r0, [sp, #4]
   16c98:	f7ed fb30 	bl	42fc <var_copy>
                if (ret != DLMS_ERROR_CODE_OK)
   16c9c:	4604      	mov	r4, r0
   16c9e:	2800      	cmp	r0, #0
   16ca0:	d1d8      	bne.n	16c54 <cosem_setRegisterMonitor+0x1e>
                va_push(&object->thresholds, tmp3);
   16ca2:	9902      	ldr	r1, [sp, #8]
   16ca4:	4628      	mov	r0, r5
   16ca6:	f003 fa30 	bl	1a10a <va_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   16caa:	3701      	adds	r7, #1
   16cac:	e7dc      	b.n	16c68 <cosem_setRegisterMonitor+0x32>
    else if (index == 3)
   16cae:	2a03      	cmp	r2, #3
   16cb0:	d148      	bne.n	16d44 <cosem_setRegisterMonitor+0x10e>
        ret = va_getByIndex(value->Arr, 0, &tmp);
   16cb2:	6898      	ldr	r0, [r3, #8]
   16cb4:	aa01      	add	r2, sp, #4
   16cb6:	2100      	movs	r1, #0
   16cb8:	f003 faf3 	bl	1a2a2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   16cbc:	4604      	mov	r4, r0
   16cbe:	2800      	cmp	r0, #0
   16cc0:	d1c8      	bne.n	16c54 <cosem_setRegisterMonitor+0x1e>
        type = (short) var_toInteger(tmp);
   16cc2:	9801      	ldr	r0, [sp, #4]
   16cc4:	f003 fc67 	bl	1a596 <var_toInteger>
        ret = va_getByIndex(value->Arr, 1, &tmp);
   16cc8:	aa01      	add	r2, sp, #4
        type = (short) var_toInteger(tmp);
   16cca:	4680      	mov	r8, r0
        ret = va_getByIndex(value->Arr, 1, &tmp);
   16ccc:	2101      	movs	r1, #1
   16cce:	68b0      	ldr	r0, [r6, #8]
   16cd0:	f003 fae7 	bl	1a2a2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   16cd4:	4604      	mov	r4, r0
   16cd6:	2800      	cmp	r0, #0
   16cd8:	d1bc      	bne.n	16c54 <cosem_setRegisterMonitor+0x1e>
        if ((ret = oa_findByLN(&settings->objects, type, tmp->byteArr->data, &object->monitoredValue.target)) != 0)
   16cda:	9b01      	ldr	r3, [sp, #4]
   16cdc:	689a      	ldr	r2, [r3, #8]
   16cde:	fa1f f888 	uxth.w	r8, r8
   16ce2:	f105 091c 	add.w	r9, r5, #28
   16ce6:	6812      	ldr	r2, [r2, #0]
   16ce8:	464b      	mov	r3, r9
   16cea:	4641      	mov	r1, r8
   16cec:	f107 0098 	add.w	r0, r7, #152	; 0x98
   16cf0:	f003 f894 	bl	19e1c <oa_findByLN>
   16cf4:	4604      	mov	r4, r0
   16cf6:	2800      	cmp	r0, #0
   16cf8:	d1ac      	bne.n	16c54 <cosem_setRegisterMonitor+0x1e>
        if (object->monitoredValue.target == NULL)
   16cfa:	69eb      	ldr	r3, [r5, #28]
   16cfc:	b9a3      	cbnz	r3, 16d28 <cosem_setRegisterMonitor+0xf2>
            ret = cosem_createObject(type, &object->monitoredValue.target);
   16cfe:	4649      	mov	r1, r9
   16d00:	4640      	mov	r0, r8
   16d02:	f7eb f8ad 	bl	1e60 <cosem_createObject>
            if (ret != DLMS_ERROR_CODE_OK)
   16d06:	4604      	mov	r4, r0
   16d08:	2800      	cmp	r0, #0
   16d0a:	d1a3      	bne.n	16c54 <cosem_setRegisterMonitor+0x1e>
            ret = cosem_setLogicalName(object->monitoredValue.target, tmp->byteArr->data);
   16d0c:	9b01      	ldr	r3, [sp, #4]
   16d0e:	69e8      	ldr	r0, [r5, #28]
   16d10:	689b      	ldr	r3, [r3, #8]
   16d12:	6819      	ldr	r1, [r3, #0]
   16d14:	f7f6 fd0f 	bl	d736 <cosem_setLogicalName>
            if (ret != DLMS_ERROR_CODE_OK)
   16d18:	4604      	mov	r4, r0
   16d1a:	2800      	cmp	r0, #0
   16d1c:	d19a      	bne.n	16c54 <cosem_setRegisterMonitor+0x1e>
            ret = oa_push(&settings->releasedObjects, object->monitoredValue.target);
   16d1e:	69e9      	ldr	r1, [r5, #28]
   16d20:	f107 00e4 	add.w	r0, r7, #228	; 0xe4
   16d24:	f003 f81a 	bl	19d5c <oa_push>
        ret = va_getByIndex(value->Arr, 2, &tmp);
   16d28:	68b0      	ldr	r0, [r6, #8]
   16d2a:	aa01      	add	r2, sp, #4
   16d2c:	2102      	movs	r1, #2
   16d2e:	f003 fab8 	bl	1a2a2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   16d32:	4604      	mov	r4, r0
   16d34:	2800      	cmp	r0, #0
   16d36:	d18d      	bne.n	16c54 <cosem_setRegisterMonitor+0x1e>
        object->monitoredValue.attributeIndex = (unsigned char)var_toInteger(tmp);
   16d38:	9801      	ldr	r0, [sp, #4]
   16d3a:	f003 fc2c 	bl	1a596 <var_toInteger>
   16d3e:	f885 0020 	strb.w	r0, [r5, #32]
   16d42:	e787      	b.n	16c54 <cosem_setRegisterMonitor+0x1e>
    else if (index == 4)
   16d44:	2a04      	cmp	r2, #4
   16d46:	f040 80be 	bne.w	16ec6 <cosem_setRegisterMonitor+0x290>
        obj_clearRegisterMonitorActions(&object->actions);
   16d4a:	3510      	adds	r5, #16
   16d4c:	4628      	mov	r0, r5
   16d4e:	f7fc fedc 	bl	13b0a <obj_clearRegisterMonitorActions>
        if (value->Arr != NULL)
   16d52:	68b3      	ldr	r3, [r6, #8]
   16d54:	2b00      	cmp	r3, #0
   16d56:	f43f af7c 	beq.w	16c52 <cosem_setRegisterMonitor+0x1c>
            for (pos = 0; pos != value->Arr->size; ++pos)
   16d5a:	f04f 0800 	mov.w	r8, #0
   16d5e:	e0a9      	b.n	16eb4 <cosem_setRegisterMonitor+0x27e>
                ret = va_getByIndex(value->Arr, pos, &tmp4);
   16d60:	aa03      	add	r2, sp, #12
   16d62:	4641      	mov	r1, r8
   16d64:	f003 fa9d 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   16d68:	4604      	mov	r4, r0
   16d6a:	2800      	cmp	r0, #0
   16d6c:	f47f af72 	bne.w	16c54 <cosem_setRegisterMonitor+0x1e>
                actionSet = (gxActionSet*)gxmalloc(sizeof(gxActionSet));
   16d70:	2010      	movs	r0, #16
   16d72:	f7f4 ff1f 	bl	bbb4 <malloc>
                ret = va_getByIndex(tmp4->Arr, 0, &tmp3);
   16d76:	9b03      	ldr	r3, [sp, #12]
   16d78:	4621      	mov	r1, r4
                actionSet = (gxActionSet*)gxmalloc(sizeof(gxActionSet));
   16d7a:	4681      	mov	r9, r0
                ret = va_getByIndex(tmp4->Arr, 0, &tmp3);
   16d7c:	aa02      	add	r2, sp, #8
   16d7e:	6898      	ldr	r0, [r3, #8]
   16d80:	f003 fa8f 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   16d84:	4604      	mov	r4, r0
   16d86:	2800      	cmp	r0, #0
   16d88:	f040 80a0 	bne.w	16ecc <cosem_setRegisterMonitor+0x296>
                ret = va_getByIndex(tmp3->Arr, 0, &tmp);
   16d8c:	9b02      	ldr	r3, [sp, #8]
   16d8e:	4601      	mov	r1, r0
   16d90:	aa01      	add	r2, sp, #4
   16d92:	6898      	ldr	r0, [r3, #8]
   16d94:	f003 fa85 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   16d98:	4604      	mov	r4, r0
   16d9a:	2800      	cmp	r0, #0
   16d9c:	f040 8096 	bne.w	16ecc <cosem_setRegisterMonitor+0x296>
                if ((ret = oa_findByLN(&settings->objects, DLMS_OBJECT_TYPE_SCRIPT_TABLE, tmp->byteArr->data, (gxObject**)&actionSet->actionUp.script)) != 0)
   16da0:	9b01      	ldr	r3, [sp, #4]
                actionSet->actionUp.script = NULL;
   16da2:	f8c9 0000 	str.w	r0, [r9]
                if ((ret = oa_findByLN(&settings->objects, DLMS_OBJECT_TYPE_SCRIPT_TABLE, tmp->byteArr->data, (gxObject**)&actionSet->actionUp.script)) != 0)
   16da6:	689a      	ldr	r2, [r3, #8]
   16da8:	f107 0b98 	add.w	fp, r7, #152	; 0x98
   16dac:	6812      	ldr	r2, [r2, #0]
   16dae:	464b      	mov	r3, r9
   16db0:	2109      	movs	r1, #9
   16db2:	4658      	mov	r0, fp
   16db4:	f003 f832 	bl	19e1c <oa_findByLN>
   16db8:	4604      	mov	r4, r0
   16dba:	2800      	cmp	r0, #0
   16dbc:	f47f af4a 	bne.w	16c54 <cosem_setRegisterMonitor+0x1e>
                if (actionSet->actionUp.script == NULL)
   16dc0:	f8d9 3000 	ldr.w	r3, [r9]
   16dc4:	b9c3      	cbnz	r3, 16df8 <cosem_setRegisterMonitor+0x1c2>
                    ret = cosem_createObject(DLMS_OBJECT_TYPE_SCRIPT_TABLE, (gxObject**)&actionSet->actionUp.script);
   16dc6:	4649      	mov	r1, r9
   16dc8:	2009      	movs	r0, #9
   16dca:	f7eb f849 	bl	1e60 <cosem_createObject>
                    if (ret != DLMS_ERROR_CODE_OK)
   16dce:	4604      	mov	r4, r0
   16dd0:	2800      	cmp	r0, #0
   16dd2:	f47f af3f 	bne.w	16c54 <cosem_setRegisterMonitor+0x1e>
                    ret = cosem_setLogicalName((gxObject*)actionSet->actionUp.script, tmp->byteArr->data);
   16dd6:	9b01      	ldr	r3, [sp, #4]
   16dd8:	f8d9 0000 	ldr.w	r0, [r9]
   16ddc:	689b      	ldr	r3, [r3, #8]
   16dde:	6819      	ldr	r1, [r3, #0]
   16de0:	f7f6 fca9 	bl	d736 <cosem_setLogicalName>
                    if (ret != DLMS_ERROR_CODE_OK)
   16de4:	4604      	mov	r4, r0
   16de6:	2800      	cmp	r0, #0
   16de8:	f47f af34 	bne.w	16c54 <cosem_setRegisterMonitor+0x1e>
                    ret = oa_push(&settings->releasedObjects, (gxObject*)actionSet->actionUp.script);
   16dec:	f8d9 1000 	ldr.w	r1, [r9]
   16df0:	f107 00e4 	add.w	r0, r7, #228	; 0xe4
   16df4:	f002 ffb2 	bl	19d5c <oa_push>
                ret = va_getByIndex(tmp3->Arr, 1, &tmp);
   16df8:	9b02      	ldr	r3, [sp, #8]
   16dfa:	aa01      	add	r2, sp, #4
   16dfc:	6898      	ldr	r0, [r3, #8]
   16dfe:	2101      	movs	r1, #1
   16e00:	f003 fa4f 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   16e04:	4604      	mov	r4, r0
   16e06:	2800      	cmp	r0, #0
   16e08:	d164      	bne.n	16ed4 <cosem_setRegisterMonitor+0x29e>
                actionSet->actionUp.scriptSelector = (uint16_t)var_toInteger(tmp);
   16e0a:	9801      	ldr	r0, [sp, #4]
   16e0c:	f003 fbc3 	bl	1a596 <var_toInteger>
                ret = va_getByIndex(tmp4->Arr, 1, &tmp3);
   16e10:	9b03      	ldr	r3, [sp, #12]
                actionSet->actionUp.scriptSelector = (uint16_t)var_toInteger(tmp);
   16e12:	f8a9 0004 	strh.w	r0, [r9, #4]
                ret = va_getByIndex(tmp4->Arr, 1, &tmp3);
   16e16:	aa02      	add	r2, sp, #8
   16e18:	6898      	ldr	r0, [r3, #8]
   16e1a:	2101      	movs	r1, #1
   16e1c:	f003 fa41 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   16e20:	4604      	mov	r4, r0
   16e22:	2800      	cmp	r0, #0
   16e24:	d156      	bne.n	16ed4 <cosem_setRegisterMonitor+0x29e>
                ret = va_getByIndex(tmp3->Arr, 0, &tmp);
   16e26:	9b02      	ldr	r3, [sp, #8]
   16e28:	4601      	mov	r1, r0
   16e2a:	aa01      	add	r2, sp, #4
   16e2c:	6898      	ldr	r0, [r3, #8]
   16e2e:	f003 fa38 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   16e32:	4604      	mov	r4, r0
   16e34:	2800      	cmp	r0, #0
   16e36:	d14d      	bne.n	16ed4 <cosem_setRegisterMonitor+0x29e>
                if ((ret = oa_findByLN(&settings->objects, DLMS_OBJECT_TYPE_SCRIPT_TABLE, tmp->byteArr->data, (gxObject**)&actionSet->actionDown.script)) != 0)
   16e38:	9b01      	ldr	r3, [sp, #4]
                actionSet->actionDown.script = NULL;
   16e3a:	46ca      	mov	sl, r9
                if ((ret = oa_findByLN(&settings->objects, DLMS_OBJECT_TYPE_SCRIPT_TABLE, tmp->byteArr->data, (gxObject**)&actionSet->actionDown.script)) != 0)
   16e3c:	689a      	ldr	r2, [r3, #8]
                actionSet->actionDown.script = NULL;
   16e3e:	f84a 0f08 	str.w	r0, [sl, #8]!
                if ((ret = oa_findByLN(&settings->objects, DLMS_OBJECT_TYPE_SCRIPT_TABLE, tmp->byteArr->data, (gxObject**)&actionSet->actionDown.script)) != 0)
   16e42:	6812      	ldr	r2, [r2, #0]
   16e44:	4653      	mov	r3, sl
   16e46:	2109      	movs	r1, #9
   16e48:	4658      	mov	r0, fp
   16e4a:	f002 ffe7 	bl	19e1c <oa_findByLN>
   16e4e:	4604      	mov	r4, r0
   16e50:	2800      	cmp	r0, #0
   16e52:	f47f aeff 	bne.w	16c54 <cosem_setRegisterMonitor+0x1e>
                if (actionSet->actionDown.script == NULL)
   16e56:	f8d9 2008 	ldr.w	r2, [r9, #8]
   16e5a:	b9c2      	cbnz	r2, 16e8e <cosem_setRegisterMonitor+0x258>
                    ret = cosem_createObject(DLMS_OBJECT_TYPE_SCRIPT_TABLE, (gxObject**)&actionSet->actionDown.script);
   16e5c:	4651      	mov	r1, sl
   16e5e:	2009      	movs	r0, #9
   16e60:	f7ea fffe 	bl	1e60 <cosem_createObject>
                    if (ret != DLMS_ERROR_CODE_OK)
   16e64:	4604      	mov	r4, r0
   16e66:	2800      	cmp	r0, #0
   16e68:	f47f aef4 	bne.w	16c54 <cosem_setRegisterMonitor+0x1e>
                    ret = cosem_setLogicalName((gxObject*)actionSet->actionDown.script, tmp->byteArr->data);
   16e6c:	9b01      	ldr	r3, [sp, #4]
   16e6e:	f8d9 0008 	ldr.w	r0, [r9, #8]
   16e72:	689b      	ldr	r3, [r3, #8]
   16e74:	6819      	ldr	r1, [r3, #0]
   16e76:	f7f6 fc5e 	bl	d736 <cosem_setLogicalName>
                    if (ret != DLMS_ERROR_CODE_OK)
   16e7a:	4604      	mov	r4, r0
   16e7c:	2800      	cmp	r0, #0
   16e7e:	f47f aee9 	bne.w	16c54 <cosem_setRegisterMonitor+0x1e>
                    ret = oa_push(&settings->releasedObjects, (gxObject*)actionSet->actionDown.script);
   16e82:	f8d9 1008 	ldr.w	r1, [r9, #8]
   16e86:	f107 00e4 	add.w	r0, r7, #228	; 0xe4
   16e8a:	f002 ff67 	bl	19d5c <oa_push>
                ret = va_getByIndex(tmp3->Arr, 1, &tmp);
   16e8e:	9b02      	ldr	r3, [sp, #8]
   16e90:	aa01      	add	r2, sp, #4
   16e92:	6898      	ldr	r0, [r3, #8]
   16e94:	2101      	movs	r1, #1
   16e96:	f003 fa04 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   16e9a:	4604      	mov	r4, r0
   16e9c:	b9d0      	cbnz	r0, 16ed4 <cosem_setRegisterMonitor+0x29e>
                actionSet->actionDown.scriptSelector = (uint16_t)var_toInteger(tmp);
   16e9e:	9801      	ldr	r0, [sp, #4]
   16ea0:	f003 fb79 	bl	1a596 <var_toInteger>
                arr_push(&object->actions, actionSet);
   16ea4:	4649      	mov	r1, r9
                actionSet->actionDown.scriptSelector = (uint16_t)var_toInteger(tmp);
   16ea6:	f8a9 000c 	strh.w	r0, [r9, #12]
                arr_push(&object->actions, actionSet);
   16eaa:	4628      	mov	r0, r5
   16eac:	f7f9 fa2e 	bl	1030c <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   16eb0:	f108 0801 	add.w	r8, r8, #1
   16eb4:	68b0      	ldr	r0, [r6, #8]
   16eb6:	88c3      	ldrh	r3, [r0, #6]
   16eb8:	4543      	cmp	r3, r8
   16eba:	f47f af51 	bne.w	16d60 <cosem_setRegisterMonitor+0x12a>
   16ebe:	e6c8      	b.n	16c52 <cosem_setRegisterMonitor+0x1c>
                    ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   16ec0:	f44f 7482 	mov.w	r4, #260	; 0x104
   16ec4:	e6c6      	b.n	16c54 <cosem_setRegisterMonitor+0x1e>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   16ec6:	f44f 7481 	mov.w	r4, #258	; 0x102
   16eca:	e6c3      	b.n	16c54 <cosem_setRegisterMonitor+0x1e>
            if (ret != 0 && actionSet != NULL)
   16ecc:	f1b9 0f00 	cmp.w	r9, #0
   16ed0:	f43f aec0 	beq.w	16c54 <cosem_setRegisterMonitor+0x1e>
                gxfree(actionSet);
   16ed4:	4648      	mov	r0, r9
   16ed6:	f7f4 fe75 	bl	bbc4 <free>
   16eda:	e6bb      	b.n	16c54 <cosem_setRegisterMonitor+0x1e>

00016edc <cosem_setSapAssignment>:
    if (index == 2)
   16edc:	2902      	cmp	r1, #2
{
   16ede:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   16ee2:	4690      	mov	r8, r2
    if (index == 2)
   16ee4:	d147      	bne.n	16f76 <cosem_setSapAssignment+0x9a>
        obj_clearSapList(&object->sapAssignmentList);
   16ee6:	f100 0610 	add.w	r6, r0, #16
   16eea:	4630      	mov	r0, r6
   16eec:	f7fc fd8d 	bl	13a0a <obj_clearSapList>
        if (value->Arr != NULL)
   16ef0:	f8d8 3008 	ldr.w	r3, [r8, #8]
   16ef4:	2b00      	cmp	r3, #0
   16ef6:	d13c      	bne.n	16f72 <cosem_setSapAssignment+0x96>
    int ret = DLMS_ERROR_CODE_OK, pos;
   16ef8:	2400      	movs	r4, #0
}
   16efa:	4620      	mov	r0, r4
   16efc:	b003      	add	sp, #12
   16efe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                ret = va_getByIndex(value->Arr, pos, &tmp);
   16f02:	466a      	mov	r2, sp
   16f04:	4639      	mov	r1, r7
   16f06:	f003 f9cc 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   16f0a:	4604      	mov	r4, r0
   16f0c:	2800      	cmp	r0, #0
   16f0e:	d1f4      	bne.n	16efa <cosem_setSapAssignment+0x1e>
                ret = va_getByIndex(tmp->Arr, 0, &tmp2);
   16f10:	9b00      	ldr	r3, [sp, #0]
   16f12:	4601      	mov	r1, r0
   16f14:	aa01      	add	r2, sp, #4
   16f16:	6898      	ldr	r0, [r3, #8]
   16f18:	f003 f9c3 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   16f1c:	4604      	mov	r4, r0
   16f1e:	2800      	cmp	r0, #0
   16f20:	d1eb      	bne.n	16efa <cosem_setSapAssignment+0x1e>
                it = (gxSapItem*)gxmalloc(sizeof(gxSapItem));
   16f22:	2010      	movs	r0, #16
   16f24:	f7f4 fe46 	bl	bbb4 <malloc>
                if (it == NULL)
   16f28:	4605      	mov	r5, r0
   16f2a:	b358      	cbz	r0, 16f84 <cosem_setSapAssignment+0xa8>
                BYTE_BUFFER_INIT(&it->name);
   16f2c:	f100 0904 	add.w	r9, r0, #4
   16f30:	4648      	mov	r0, r9
   16f32:	f7f5 fe57 	bl	cbe4 <bb_init>
                it->id = (uint16_t)var_toInteger(tmp2);
   16f36:	9801      	ldr	r0, [sp, #4]
   16f38:	f003 fb2d 	bl	1a596 <var_toInteger>
                ret = va_getByIndex(tmp->Arr, 1, &tmp2);
   16f3c:	9b00      	ldr	r3, [sp, #0]
                it->id = (uint16_t)var_toInteger(tmp2);
   16f3e:	8028      	strh	r0, [r5, #0]
                ret = va_getByIndex(tmp->Arr, 1, &tmp2);
   16f40:	aa01      	add	r2, sp, #4
   16f42:	6898      	ldr	r0, [r3, #8]
   16f44:	2101      	movs	r1, #1
   16f46:	f003 f9ac 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   16f4a:	4604      	mov	r4, r0
   16f4c:	b9b0      	cbnz	r0, 16f7c <cosem_setSapAssignment+0xa0>
                bb_set(&it->name, tmp2->byteArr->data, tmp2->byteArr->size);
   16f4e:	9b01      	ldr	r3, [sp, #4]
   16f50:	689b      	ldr	r3, [r3, #8]
   16f52:	4648      	mov	r0, r9
   16f54:	6819      	ldr	r1, [r3, #0]
   16f56:	88da      	ldrh	r2, [r3, #6]
   16f58:	f7f5 ff93 	bl	ce82 <bb_set>
                arr_push(&object->sapAssignmentList, it);
   16f5c:	4629      	mov	r1, r5
   16f5e:	4630      	mov	r0, r6
   16f60:	f7f9 f9d4 	bl	1030c <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   16f64:	3701      	adds	r7, #1
   16f66:	f8d8 0008 	ldr.w	r0, [r8, #8]
   16f6a:	88c3      	ldrh	r3, [r0, #6]
   16f6c:	42bb      	cmp	r3, r7
   16f6e:	d1c8      	bne.n	16f02 <cosem_setSapAssignment+0x26>
   16f70:	e7c2      	b.n	16ef8 <cosem_setSapAssignment+0x1c>
   16f72:	2700      	movs	r7, #0
   16f74:	e7f7      	b.n	16f66 <cosem_setSapAssignment+0x8a>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   16f76:	f44f 7481 	mov.w	r4, #258	; 0x102
    return ret;
   16f7a:	e7be      	b.n	16efa <cosem_setSapAssignment+0x1e>
                gxfree(it);
   16f7c:	4628      	mov	r0, r5
   16f7e:	f7f4 fe21 	bl	bbc4 <free>
   16f82:	e7ba      	b.n	16efa <cosem_setSapAssignment+0x1e>
                    ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   16f84:	f44f 7482 	mov.w	r4, #260	; 0x104
            if (ret != 0 && it != NULL)
   16f88:	e7b7      	b.n	16efa <cosem_setSapAssignment+0x1e>

00016f8a <cosem_setSchedule>:
{
   16f8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (index == 2)
   16f8e:	2a02      	cmp	r2, #2
{
   16f90:	b089      	sub	sp, #36	; 0x24
   16f92:	4681      	mov	r9, r0
   16f94:	4698      	mov	r8, r3
    if (index == 2)
   16f96:	f040 8109 	bne.w	171ac <cosem_setSchedule+0x222>
        obj_clearScheduleEntries(&object->entries);
   16f9a:	f101 0610 	add.w	r6, r1, #16
   16f9e:	4630      	mov	r0, r6
   16fa0:	f7fc fdd4 	bl	13b4c <obj_clearScheduleEntries>
        var_init(&tmp3);
   16fa4:	a804      	add	r0, sp, #16
   16fa6:	f002 ffa2 	bl	19eee <var_init>
        if (value->Arr != NULL)
   16faa:	f8d8 3008 	ldr.w	r3, [r8, #8]
   16fae:	2b00      	cmp	r3, #0
   16fb0:	f040 80fa 	bne.w	171a8 <cosem_setSchedule+0x21e>
    int ret = 0, pos;
   16fb4:	2400      	movs	r4, #0
}
   16fb6:	4620      	mov	r0, r4
   16fb8:	b009      	add	sp, #36	; 0x24
   16fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                ret = va_getByIndex(value->Arr, pos, &tmp);
   16fbe:	aa01      	add	r2, sp, #4
   16fc0:	4639      	mov	r1, r7
   16fc2:	f003 f96e 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   16fc6:	4604      	mov	r4, r0
   16fc8:	2800      	cmp	r0, #0
   16fca:	d1f4      	bne.n	16fb6 <cosem_setSchedule+0x2c>
                se = (gxScheduleEntry*)gxmalloc(sizeof(gxScheduleEntry));
   16fcc:	203c      	movs	r0, #60	; 0x3c
   16fce:	f7f4 fdf1 	bl	bbb4 <malloc>
                if (se == NULL)
   16fd2:	4605      	mov	r5, r0
   16fd4:	2800      	cmp	r0, #0
   16fd6:	f000 80f0 	beq.w	171ba <cosem_setSchedule+0x230>
                se->execWeekdays = 0;
   16fda:	7e83      	ldrb	r3, [r0, #26]
                ba_init(&se->execSpecDays);
   16fdc:	f100 0a1c 	add.w	sl, r0, #28
                se->execWeekdays = 0;
   16fe0:	f364 0306 	bfi	r3, r4, #0, #7
   16fe4:	7683      	strb	r3, [r0, #26]
                ba_init(&se->execSpecDays);
   16fe6:	4650      	mov	r0, sl
   16fe8:	f7f5 fcf5 	bl	c9d6 <ba_init>
                ret = va_getByIndex(tmp->Arr, 0, &it);
   16fec:	9b01      	ldr	r3, [sp, #4]
   16fee:	4621      	mov	r1, r4
   16ff0:	6898      	ldr	r0, [r3, #8]
   16ff2:	aa02      	add	r2, sp, #8
   16ff4:	f003 f955 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   16ff8:	4604      	mov	r4, r0
   16ffa:	2800      	cmp	r0, #0
   16ffc:	f040 80d9 	bne.w	171b2 <cosem_setSchedule+0x228>
                se->index = (uint16_t)var_toInteger(it);
   17000:	9802      	ldr	r0, [sp, #8]
   17002:	f003 fac8 	bl	1a596 <var_toInteger>
                ret = va_getByIndex(tmp->Arr, 1, &it);
   17006:	9b01      	ldr	r3, [sp, #4]
                se->index = (uint16_t)var_toInteger(it);
   17008:	8028      	strh	r0, [r5, #0]
                ret = va_getByIndex(tmp->Arr, 1, &it);
   1700a:	aa02      	add	r2, sp, #8
   1700c:	6898      	ldr	r0, [r3, #8]
   1700e:	2101      	movs	r1, #1
   17010:	f003 f947 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   17014:	4604      	mov	r4, r0
   17016:	2800      	cmp	r0, #0
   17018:	f040 80cb 	bne.w	171b2 <cosem_setSchedule+0x228>
                se->enable = (unsigned char)var_toInteger(it);
   1701c:	9802      	ldr	r0, [sp, #8]
   1701e:	f003 faba 	bl	1a596 <var_toInteger>
                ret = va_getByIndex(tmp->Arr, 2, &it);
   17022:	9b01      	ldr	r3, [sp, #4]
                se->enable = (unsigned char)var_toInteger(it);
   17024:	70a8      	strb	r0, [r5, #2]
                ret = va_getByIndex(tmp->Arr, 2, &it);
   17026:	6898      	ldr	r0, [r3, #8]
   17028:	aa02      	add	r2, sp, #8
   1702a:	2102      	movs	r1, #2
   1702c:	f003 f939 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   17030:	4604      	mov	r4, r0
   17032:	2800      	cmp	r0, #0
   17034:	f040 80bd 	bne.w	171b2 <cosem_setSchedule+0x228>
                if ((ret = oa_findByLN(&settings->objects, DLMS_OBJECT_TYPE_SCRIPT_TABLE, it->byteArr->data, (gxObject**)&se->scriptTable)) != 0)
   17038:	9b02      	ldr	r3, [sp, #8]
   1703a:	689a      	ldr	r2, [r3, #8]
   1703c:	f105 0b04 	add.w	fp, r5, #4
   17040:	6812      	ldr	r2, [r2, #0]
   17042:	465b      	mov	r3, fp
   17044:	2109      	movs	r1, #9
   17046:	f109 0098 	add.w	r0, r9, #152	; 0x98
   1704a:	f002 fee7 	bl	19e1c <oa_findByLN>
   1704e:	4604      	mov	r4, r0
   17050:	2800      	cmp	r0, #0
   17052:	f040 80ae 	bne.w	171b2 <cosem_setSchedule+0x228>
                if (se->scriptTable == NULL)
   17056:	686b      	ldr	r3, [r5, #4]
   17058:	b9a3      	cbnz	r3, 17084 <cosem_setSchedule+0xfa>
                    ret = cosem_createObject(DLMS_OBJECT_TYPE_SCRIPT_TABLE, (gxObject**)&se->scriptTable);
   1705a:	4659      	mov	r1, fp
   1705c:	2009      	movs	r0, #9
   1705e:	f7ea feff 	bl	1e60 <cosem_createObject>
                    if (ret != DLMS_ERROR_CODE_OK)
   17062:	4604      	mov	r4, r0
   17064:	2800      	cmp	r0, #0
   17066:	d1a6      	bne.n	16fb6 <cosem_setSchedule+0x2c>
                    ret = cosem_setLogicalName((gxObject*)se->scriptTable, tmp->byteArr->data);
   17068:	9b01      	ldr	r3, [sp, #4]
   1706a:	6868      	ldr	r0, [r5, #4]
   1706c:	689b      	ldr	r3, [r3, #8]
   1706e:	6819      	ldr	r1, [r3, #0]
   17070:	f7f6 fb61 	bl	d736 <cosem_setLogicalName>
                    if (ret != DLMS_ERROR_CODE_OK)
   17074:	4604      	mov	r4, r0
   17076:	2800      	cmp	r0, #0
   17078:	d19d      	bne.n	16fb6 <cosem_setSchedule+0x2c>
                    ret = oa_push(&settings->releasedObjects, (gxObject*)se->scriptTable);
   1707a:	6869      	ldr	r1, [r5, #4]
   1707c:	f109 00e4 	add.w	r0, r9, #228	; 0xe4
   17080:	f002 fe6c 	bl	19d5c <oa_push>
                ret = va_getByIndex(tmp->Arr, 3, &it);
   17084:	9b01      	ldr	r3, [sp, #4]
   17086:	aa02      	add	r2, sp, #8
   17088:	6898      	ldr	r0, [r3, #8]
   1708a:	2103      	movs	r1, #3
   1708c:	f003 f909 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   17090:	4604      	mov	r4, r0
   17092:	2800      	cmp	r0, #0
   17094:	f040 808d 	bne.w	171b2 <cosem_setSchedule+0x228>
                se->scriptSelector = (uint16_t)var_toInteger(it);
   17098:	9802      	ldr	r0, [sp, #8]
   1709a:	f003 fa7c 	bl	1a596 <var_toInteger>
                ret = va_getByIndex(tmp->Arr, 4, &it);
   1709e:	9b01      	ldr	r3, [sp, #4]
                se->scriptSelector = (uint16_t)var_toInteger(it);
   170a0:	8128      	strh	r0, [r5, #8]
                ret = va_getByIndex(tmp->Arr, 4, &it);
   170a2:	aa02      	add	r2, sp, #8
   170a4:	6898      	ldr	r0, [r3, #8]
   170a6:	2104      	movs	r1, #4
   170a8:	f003 f8fb 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   170ac:	4604      	mov	r4, r0
   170ae:	2800      	cmp	r0, #0
   170b0:	d17f      	bne.n	171b2 <cosem_setSchedule+0x228>
                ret = dlms_changeType2(it, DLMS_DATA_TYPE_TIME, &tmp3);
   170b2:	9802      	ldr	r0, [sp, #8]
   170b4:	aa04      	add	r2, sp, #16
   170b6:	211b      	movs	r1, #27
   170b8:	f7f8 fe45 	bl	fd46 <dlms_changeType2>
                if (ret != DLMS_ERROR_CODE_OK)
   170bc:	4604      	mov	r4, r0
   170be:	2800      	cmp	r0, #0
   170c0:	d177      	bne.n	171b2 <cosem_setSchedule+0x228>
                time_copy(&se->switchTime, tmp3.dateTime);
   170c2:	9906      	ldr	r1, [sp, #24]
   170c4:	f105 000c 	add.w	r0, r5, #12
   170c8:	f7f6 fe8a 	bl	dde0 <time_copy>
                ret = va_getByIndex(tmp->Arr, 5, &it);
   170cc:	9b01      	ldr	r3, [sp, #4]
   170ce:	aa02      	add	r2, sp, #8
   170d0:	6898      	ldr	r0, [r3, #8]
   170d2:	2105      	movs	r1, #5
   170d4:	f003 f8e5 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   170d8:	4604      	mov	r4, r0
   170da:	2800      	cmp	r0, #0
   170dc:	d169      	bne.n	171b2 <cosem_setSchedule+0x228>
                se->validityWindow = (uint16_t)var_toInteger(it);
   170de:	9802      	ldr	r0, [sp, #8]
   170e0:	f003 fa59 	bl	1a596 <var_toInteger>
                ret = va_getByIndex(tmp->Arr, 6, &it);
   170e4:	9b01      	ldr	r3, [sp, #4]
                se->validityWindow = (uint16_t)var_toInteger(it);
   170e6:	8328      	strh	r0, [r5, #24]
                ret = va_getByIndex(tmp->Arr, 6, &it);
   170e8:	aa02      	add	r2, sp, #8
   170ea:	6898      	ldr	r0, [r3, #8]
   170ec:	2106      	movs	r1, #6
   170ee:	f003 f8d8 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   170f2:	4604      	mov	r4, r0
   170f4:	2800      	cmp	r0, #0
   170f6:	d15c      	bne.n	171b2 <cosem_setSchedule+0x228>
                if (it->bitArr != NULL)
   170f8:	9b02      	ldr	r3, [sp, #8]
   170fa:	6898      	ldr	r0, [r3, #8]
   170fc:	b140      	cbz	r0, 17110 <cosem_setSchedule+0x186>
                    if ((ret = ba_toInteger(it->bitArr, &val)) == 0)
   170fe:	a903      	add	r1, sp, #12
   17100:	f7f5 fd24 	bl	cb4c <ba_toInteger>
   17104:	b920      	cbnz	r0, 17110 <cosem_setSchedule+0x186>
                        se->execWeekdays = val;
   17106:	7eab      	ldrb	r3, [r5, #26]
   17108:	9a03      	ldr	r2, [sp, #12]
   1710a:	f362 0306 	bfi	r3, r2, #0, #7
   1710e:	76ab      	strb	r3, [r5, #26]
                ret = va_getByIndex(tmp->Arr, 7, &it);
   17110:	9b01      	ldr	r3, [sp, #4]
   17112:	aa02      	add	r2, sp, #8
   17114:	6898      	ldr	r0, [r3, #8]
   17116:	2107      	movs	r1, #7
   17118:	f003 f8c3 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   1711c:	4604      	mov	r4, r0
   1711e:	2800      	cmp	r0, #0
   17120:	d147      	bne.n	171b2 <cosem_setSchedule+0x228>
                if (it->bitArr != NULL)
   17122:	9b02      	ldr	r3, [sp, #8]
   17124:	689b      	ldr	r3, [r3, #8]
   17126:	b123      	cbz	r3, 17132 <cosem_setSchedule+0x1a8>
                    ba_copy(&se->execSpecDays, it->bitArr->data, (uint16_t)it->bitArr->size);
   17128:	88da      	ldrh	r2, [r3, #6]
   1712a:	6819      	ldr	r1, [r3, #0]
   1712c:	4650      	mov	r0, sl
   1712e:	f7f5 fccd 	bl	cacc <ba_copy>
                ret = va_getByIndex(tmp->Arr, 8, &it);
   17132:	9b01      	ldr	r3, [sp, #4]
   17134:	aa02      	add	r2, sp, #8
   17136:	6898      	ldr	r0, [r3, #8]
   17138:	2108      	movs	r1, #8
   1713a:	f003 f8b2 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   1713e:	4604      	mov	r4, r0
   17140:	2800      	cmp	r0, #0
   17142:	d136      	bne.n	171b2 <cosem_setSchedule+0x228>
                ret = dlms_changeType2(it, DLMS_DATA_TYPE_DATE, &tmp3);
   17144:	9802      	ldr	r0, [sp, #8]
   17146:	aa04      	add	r2, sp, #16
   17148:	211a      	movs	r1, #26
   1714a:	f7f8 fdfc 	bl	fd46 <dlms_changeType2>
                if (ret != DLMS_ERROR_CODE_OK)
   1714e:	4604      	mov	r4, r0
   17150:	bb78      	cbnz	r0, 171b2 <cosem_setSchedule+0x228>
                time_copy(&se->beginDate, tmp3.dateTime);
   17152:	9906      	ldr	r1, [sp, #24]
   17154:	f105 0024 	add.w	r0, r5, #36	; 0x24
   17158:	f7f6 fe42 	bl	dde0 <time_copy>
                var_clear(&tmp3);
   1715c:	a804      	add	r0, sp, #16
   1715e:	f003 f822 	bl	1a1a6 <var_clear>
                ret = va_getByIndex(tmp->Arr, 9, &it);
   17162:	9b01      	ldr	r3, [sp, #4]
   17164:	aa02      	add	r2, sp, #8
   17166:	6898      	ldr	r0, [r3, #8]
   17168:	2109      	movs	r1, #9
   1716a:	f003 f89a 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   1716e:	4604      	mov	r4, r0
   17170:	b9f8      	cbnz	r0, 171b2 <cosem_setSchedule+0x228>
                ret = dlms_changeType2(it, DLMS_DATA_TYPE_DATE, &tmp3);
   17172:	9802      	ldr	r0, [sp, #8]
   17174:	aa04      	add	r2, sp, #16
   17176:	211a      	movs	r1, #26
   17178:	f7f8 fde5 	bl	fd46 <dlms_changeType2>
                if (ret != DLMS_ERROR_CODE_OK)
   1717c:	4604      	mov	r4, r0
   1717e:	b9c0      	cbnz	r0, 171b2 <cosem_setSchedule+0x228>
                time_copy(&se->endDate, tmp3.dateTime);
   17180:	9906      	ldr	r1, [sp, #24]
   17182:	f105 0030 	add.w	r0, r5, #48	; 0x30
   17186:	f7f6 fe2b 	bl	dde0 <time_copy>
                arr_push(&object->entries, se);
   1718a:	4629      	mov	r1, r5
   1718c:	4630      	mov	r0, r6
   1718e:	f7f9 f8bd 	bl	1030c <arr_push>
                var_clear(&tmp3);
   17192:	a804      	add	r0, sp, #16
   17194:	f003 f807 	bl	1a1a6 <var_clear>
            for (pos = 0; pos != value->Arr->size; ++pos)
   17198:	3701      	adds	r7, #1
   1719a:	f8d8 0008 	ldr.w	r0, [r8, #8]
   1719e:	88c3      	ldrh	r3, [r0, #6]
   171a0:	42bb      	cmp	r3, r7
   171a2:	f47f af0c 	bne.w	16fbe <cosem_setSchedule+0x34>
   171a6:	e705      	b.n	16fb4 <cosem_setSchedule+0x2a>
   171a8:	2700      	movs	r7, #0
   171aa:	e7f6      	b.n	1719a <cosem_setSchedule+0x210>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   171ac:	f44f 7481 	mov.w	r4, #258	; 0x102
   171b0:	e701      	b.n	16fb6 <cosem_setSchedule+0x2c>
                gxfree(se);
   171b2:	4628      	mov	r0, r5
   171b4:	f7f4 fd06 	bl	bbc4 <free>
   171b8:	e6fd      	b.n	16fb6 <cosem_setSchedule+0x2c>
                    ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   171ba:	f44f 7482 	mov.w	r4, #260	; 0x104
            if (ret != 0 && se != NULL)
   171be:	e6fa      	b.n	16fb6 <cosem_setSchedule+0x2c>

000171c0 <cosem_setScriptTable>:
{
   171c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   171c4:	b089      	sub	sp, #36	; 0x24
    if (index == 2)
   171c6:	2a02      	cmp	r2, #2
{
   171c8:	9002      	str	r0, [sp, #8]
   171ca:	4615      	mov	r5, r2
   171cc:	469a      	mov	sl, r3
    if (index == 2)
   171ce:	f040 8154 	bne.w	1747a <cosem_setScriptTable+0x2ba>
        obj_clearScriptTable(&object->scripts);
   171d2:	f101 0910 	add.w	r9, r1, #16
   171d6:	4648      	mov	r0, r9
   171d8:	f7fc fceb 	bl	13bb2 <obj_clearScriptTable>
        if (value->Arr->size != 0)
   171dc:	f8da 0008 	ldr.w	r0, [sl, #8]
   171e0:	88c3      	ldrh	r3, [r0, #6]
   171e2:	b923      	cbnz	r3, 171ee <cosem_setScriptTable+0x2e>
    int ret = 0, pos, pos2;
   171e4:	2400      	movs	r4, #0
}
   171e6:	4620      	mov	r0, r4
   171e8:	b009      	add	sp, #36	; 0x24
   171ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            ret = va_getByIndex(value->Arr, 0, &tmp);
   171ee:	ae05      	add	r6, sp, #20
   171f0:	4632      	mov	r2, r6
   171f2:	2100      	movs	r1, #0
   171f4:	f003 f855 	bl	1a2a2 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   171f8:	4604      	mov	r4, r0
   171fa:	2800      	cmp	r0, #0
   171fc:	d1f3      	bne.n	171e6 <cosem_setScriptTable+0x26>
            if (value->vt == DLMS_DATA_TYPE_ARRAY)
   171fe:	f89a 3000 	ldrb.w	r3, [sl]
   17202:	2b01      	cmp	r3, #1
   17204:	f040 80a8 	bne.w	17358 <cosem_setScriptTable+0x198>
                for (pos = 0; pos != value->Arr->size; ++pos)
   17208:	f8da 0008 	ldr.w	r0, [sl, #8]
   1720c:	88c3      	ldrh	r3, [r0, #6]
   1720e:	42a3      	cmp	r3, r4
   17210:	d0e8      	beq.n	171e4 <cosem_setScriptTable+0x24>
                    ret = va_getByIndex(value->Arr, pos, &tmp);
   17212:	4621      	mov	r1, r4
   17214:	4632      	mov	r2, r6
   17216:	f003 f844 	bl	1a2a2 <va_getByIndex>
                    if (ret != DLMS_ERROR_CODE_OK)
   1721a:	4601      	mov	r1, r0
   1721c:	2800      	cmp	r0, #0
   1721e:	f040 8131 	bne.w	17484 <cosem_setScriptTable+0x2c4>
                    ret = va_getByIndex(tmp->Arr, 0, &tmp3);
   17222:	9b05      	ldr	r3, [sp, #20]
   17224:	aa07      	add	r2, sp, #28
   17226:	6898      	ldr	r0, [r3, #8]
   17228:	f003 f83b 	bl	1a2a2 <va_getByIndex>
                    if (ret != DLMS_ERROR_CODE_OK)
   1722c:	4601      	mov	r1, r0
   1722e:	2800      	cmp	r0, #0
   17230:	f040 8128 	bne.w	17484 <cosem_setScriptTable+0x2c4>
                    script = (gxScript*)gxmalloc(sizeof(gxScript));
   17234:	2010      	movs	r0, #16
   17236:	f7f4 fcbd 	bl	bbb4 <malloc>
                    if (script == NULL)
   1723a:	4680      	mov	r8, r0
   1723c:	2800      	cmp	r0, #0
   1723e:	f000 811f 	beq.w	17480 <cosem_setScriptTable+0x2c0>
                    arr_init(&script->actions);
   17242:	1d03      	adds	r3, r0, #4
   17244:	4618      	mov	r0, r3
   17246:	9301      	str	r3, [sp, #4]
   17248:	f7f9 f831 	bl	102ae <arr_init>
                    script->id = (uint16_t)var_toInteger(tmp3);
   1724c:	9807      	ldr	r0, [sp, #28]
   1724e:	f003 f9a2 	bl	1a596 <var_toInteger>
                    arr_push(&object->scripts, script);
   17252:	4641      	mov	r1, r8
                    script->id = (uint16_t)var_toInteger(tmp3);
   17254:	f8a8 0000 	strh.w	r0, [r8]
                    arr_push(&object->scripts, script);
   17258:	4648      	mov	r0, r9
   1725a:	f7f9 f857 	bl	1030c <arr_push>
                    ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   1725e:	9b05      	ldr	r3, [sp, #20]
   17260:	aa07      	add	r2, sp, #28
   17262:	6898      	ldr	r0, [r3, #8]
   17264:	2101      	movs	r1, #1
   17266:	f003 f81c 	bl	1a2a2 <va_getByIndex>
                    if (ret != DLMS_ERROR_CODE_OK)
   1726a:	4605      	mov	r5, r0
   1726c:	2800      	cmp	r0, #0
   1726e:	d06c      	beq.n	1734a <cosem_setScriptTable+0x18a>
                    gxfree(script);
   17270:	4640      	mov	r0, r8
   17272:	f7f4 fca7 	bl	bbc4 <free>
   17276:	462c      	mov	r4, r5
   17278:	e7b5      	b.n	171e6 <cosem_setScriptTable+0x26>
                        ret = va_getByIndex(tmp3->Arr, pos2, &tmp2);
   1727a:	4629      	mov	r1, r5
   1727c:	aa06      	add	r2, sp, #24
   1727e:	f003 f810 	bl	1a2a2 <va_getByIndex>
                        if (ret != DLMS_ERROR_CODE_OK)
   17282:	4601      	mov	r1, r0
   17284:	2800      	cmp	r0, #0
   17286:	f040 8101 	bne.w	1748c <cosem_setScriptTable+0x2cc>
                        ret = va_getByIndex(tmp2->Arr, 0, &tmp);
   1728a:	9b06      	ldr	r3, [sp, #24]
   1728c:	4632      	mov	r2, r6
   1728e:	6898      	ldr	r0, [r3, #8]
   17290:	f003 f807 	bl	1a2a2 <va_getByIndex>
                        if (ret != DLMS_ERROR_CODE_OK)
   17294:	4601      	mov	r1, r0
   17296:	2800      	cmp	r0, #0
   17298:	f040 80f8 	bne.w	1748c <cosem_setScriptTable+0x2cc>
                        scriptAction = (gxScriptAction*)gxmalloc(sizeof(gxScriptAction));
   1729c:	2020      	movs	r0, #32
   1729e:	f7f4 fc89 	bl	bbb4 <malloc>
                        if (scriptAction == NULL)
   172a2:	4607      	mov	r7, r0
   172a4:	2800      	cmp	r0, #0
   172a6:	f000 80ef 	beq.w	17488 <cosem_setScriptTable+0x2c8>
                        var_init(&scriptAction->parameter);
   172aa:	f100 0b08 	add.w	fp, r0, #8
   172ae:	4658      	mov	r0, fp
   172b0:	f002 fe1d 	bl	19eee <var_init>
                        scriptAction->type = (DLMS_SCRIPT_ACTION_TYPE)var_toInteger(tmp);
   172b4:	9805      	ldr	r0, [sp, #20]
   172b6:	f003 f96e 	bl	1a596 <var_toInteger>
                        ret = va_getByIndex(tmp2->Arr, 1, &tmp);
   172ba:	9b06      	ldr	r3, [sp, #24]
                        scriptAction->type = (DLMS_SCRIPT_ACTION_TYPE)var_toInteger(tmp);
   172bc:	7138      	strb	r0, [r7, #4]
                        ret = va_getByIndex(tmp2->Arr, 1, &tmp);
   172be:	6898      	ldr	r0, [r3, #8]
   172c0:	4632      	mov	r2, r6
   172c2:	2101      	movs	r1, #1
   172c4:	f002 ffed 	bl	1a2a2 <va_getByIndex>
                        if (ret != DLMS_ERROR_CODE_OK)
   172c8:	4603      	mov	r3, r0
   172ca:	2800      	cmp	r0, #0
   172cc:	f040 80e0 	bne.w	17490 <cosem_setScriptTable+0x2d0>
                        type = (DLMS_OBJECT_TYPE)var_toInteger(tmp);
   172d0:	9805      	ldr	r0, [sp, #20]
   172d2:	f003 f960 	bl	1a596 <var_toInteger>
   172d6:	b283      	uxth	r3, r0
   172d8:	9303      	str	r3, [sp, #12]
                        ret = va_getByIndex(tmp2->Arr, 2, &tmp);
   172da:	9b06      	ldr	r3, [sp, #24]
   172dc:	4632      	mov	r2, r6
   172de:	6898      	ldr	r0, [r3, #8]
   172e0:	2102      	movs	r1, #2
   172e2:	f002 ffde 	bl	1a2a2 <va_getByIndex>
                        if (ret != DLMS_ERROR_CODE_OK)
   172e6:	4603      	mov	r3, r0
   172e8:	2800      	cmp	r0, #0
   172ea:	f040 80d1 	bne.w	17490 <cosem_setScriptTable+0x2d0>
                        if ((ret = oa_findByLN(&settings->objects, type, tmp->byteArr->data, &scriptAction->target)) != 0)
   172ee:	9b05      	ldr	r3, [sp, #20]
   172f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   172f4:	689a      	ldr	r2, [r3, #8]
   172f6:	3098      	adds	r0, #152	; 0x98
   172f8:	463b      	mov	r3, r7
   172fa:	6812      	ldr	r2, [r2, #0]
   172fc:	f002 fd8e 	bl	19e1c <oa_findByLN>
   17300:	4603      	mov	r3, r0
   17302:	2800      	cmp	r0, #0
   17304:	f040 80c4 	bne.w	17490 <cosem_setScriptTable+0x2d0>
                        ret = va_getByIndex(tmp2->Arr, 3, &tmp);
   17308:	9b06      	ldr	r3, [sp, #24]
   1730a:	4632      	mov	r2, r6
   1730c:	6898      	ldr	r0, [r3, #8]
   1730e:	2103      	movs	r1, #3
   17310:	f002 ffc7 	bl	1a2a2 <va_getByIndex>
                        if (ret != DLMS_ERROR_CODE_OK)
   17314:	4603      	mov	r3, r0
   17316:	2800      	cmp	r0, #0
   17318:	f040 80ba 	bne.w	17490 <cosem_setScriptTable+0x2d0>
                        scriptAction->index = (char)var_toInteger(tmp);
   1731c:	9805      	ldr	r0, [sp, #20]
   1731e:	f003 f93a 	bl	1a596 <var_toInteger>
                        ret = va_getByIndex(tmp2->Arr, 4, &tmp);
   17322:	9b06      	ldr	r3, [sp, #24]
                        scriptAction->index = (char)var_toInteger(tmp);
   17324:	7638      	strb	r0, [r7, #24]
                        ret = va_getByIndex(tmp2->Arr, 4, &tmp);
   17326:	6898      	ldr	r0, [r3, #8]
   17328:	4632      	mov	r2, r6
   1732a:	2104      	movs	r1, #4
   1732c:	f002 ffb9 	bl	1a2a2 <va_getByIndex>
                        if (ret != DLMS_ERROR_CODE_OK)
   17330:	4603      	mov	r3, r0
   17332:	2800      	cmp	r0, #0
   17334:	f040 80ac 	bne.w	17490 <cosem_setScriptTable+0x2d0>
                        var_copy(&scriptAction->parameter, tmp);
   17338:	9905      	ldr	r1, [sp, #20]
   1733a:	4658      	mov	r0, fp
   1733c:	f7ec ffde 	bl	42fc <var_copy>
                        arr_push(&script->actions, scriptAction);
   17340:	9801      	ldr	r0, [sp, #4]
   17342:	4639      	mov	r1, r7
   17344:	f7f8 ffe2 	bl	1030c <arr_push>
                    for (pos2 = 0; pos2 != tmp3->Arr->size; ++pos2)
   17348:	3501      	adds	r5, #1
   1734a:	9b07      	ldr	r3, [sp, #28]
   1734c:	6898      	ldr	r0, [r3, #8]
   1734e:	88c3      	ldrh	r3, [r0, #6]
   17350:	42ab      	cmp	r3, r5
   17352:	d192      	bne.n	1727a <cosem_setScriptTable+0xba>
                for (pos = 0; pos != value->Arr->size; ++pos)
   17354:	3401      	adds	r4, #1
   17356:	e757      	b.n	17208 <cosem_setScriptTable+0x48>
                ret = va_getByIndex(value->Arr, 0, &tmp);
   17358:	4601      	mov	r1, r0
   1735a:	4632      	mov	r2, r6
   1735c:	f8da 0008 	ldr.w	r0, [sl, #8]
   17360:	f002 ff9f 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   17364:	4604      	mov	r4, r0
   17366:	2800      	cmp	r0, #0
   17368:	f47f af3d 	bne.w	171e6 <cosem_setScriptTable+0x26>
                ret = va_getByIndex(tmp->Arr, 1, &tmp2);
   1736c:	9b05      	ldr	r3, [sp, #20]
   1736e:	aa06      	add	r2, sp, #24
   17370:	6898      	ldr	r0, [r3, #8]
   17372:	2101      	movs	r1, #1
   17374:	f002 ff95 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   17378:	4604      	mov	r4, r0
   1737a:	2800      	cmp	r0, #0
   1737c:	f47f af33 	bne.w	171e6 <cosem_setScriptTable+0x26>
                ret = va_getByIndex(tmp2->Arr, 2, &tmp3);
   17380:	9b06      	ldr	r3, [sp, #24]
   17382:	aa07      	add	r2, sp, #28
   17384:	6898      	ldr	r0, [r3, #8]
   17386:	4629      	mov	r1, r5
   17388:	f002 ff8b 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   1738c:	4604      	mov	r4, r0
   1738e:	2800      	cmp	r0, #0
   17390:	f47f af29 	bne.w	171e6 <cosem_setScriptTable+0x26>
                script = (gxScript*)gxmalloc(sizeof(gxScript));
   17394:	2010      	movs	r0, #16
   17396:	f7f4 fc0d 	bl	bbb4 <malloc>
                if (script == NULL)
   1739a:	4604      	mov	r4, r0
   1739c:	b910      	cbnz	r0, 173a4 <cosem_setScriptTable+0x1e4>
                    return DLMS_ERROR_CODE_OUTOFMEMORY;
   1739e:	f44f 7482 	mov.w	r4, #260	; 0x104
   173a2:	e720      	b.n	171e6 <cosem_setScriptTable+0x26>
                arr_init(&script->actions);
   173a4:	1d07      	adds	r7, r0, #4
   173a6:	4638      	mov	r0, r7
   173a8:	f7f8 ff81 	bl	102ae <arr_init>
                script->id = (uint16_t)var_toInteger(tmp3);
   173ac:	9807      	ldr	r0, [sp, #28]
   173ae:	f003 f8f2 	bl	1a596 <var_toInteger>
                arr_push(&object->scripts, script);
   173b2:	4621      	mov	r1, r4
                script->id = (uint16_t)var_toInteger(tmp3);
   173b4:	8020      	strh	r0, [r4, #0]
                arr_push(&object->scripts, script);
   173b6:	4648      	mov	r0, r9
   173b8:	f7f8 ffa8 	bl	1030c <arr_push>
                ret = va_getByIndex(tmp->Arr, 3, &tmp3);
   173bc:	9b05      	ldr	r3, [sp, #20]
   173be:	aa07      	add	r2, sp, #28
   173c0:	6898      	ldr	r0, [r3, #8]
   173c2:	2103      	movs	r1, #3
   173c4:	f002 ff6d 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   173c8:	4604      	mov	r4, r0
   173ca:	2800      	cmp	r0, #0
   173cc:	f47f af0b 	bne.w	171e6 <cosem_setScriptTable+0x26>
                scriptAction = (gxScriptAction*)gxmalloc(sizeof(gxScriptAction));
   173d0:	2020      	movs	r0, #32
   173d2:	f7f4 fbef 	bl	bbb4 <malloc>
                if (scriptAction == NULL)
   173d6:	4605      	mov	r5, r0
   173d8:	2800      	cmp	r0, #0
   173da:	d0e0      	beq.n	1739e <cosem_setScriptTable+0x1de>
                var_init(&scriptAction->parameter);
   173dc:	f100 0808 	add.w	r8, r0, #8
   173e0:	4640      	mov	r0, r8
   173e2:	f002 fd84 	bl	19eee <var_init>
                scriptAction->type = (DLMS_SCRIPT_ACTION_TYPE)var_toInteger(tmp3);
   173e6:	9807      	ldr	r0, [sp, #28]
   173e8:	f003 f8d5 	bl	1a596 <var_toInteger>
                ret = va_getByIndex(tmp2->Arr, 4, &tmp3);
   173ec:	9b06      	ldr	r3, [sp, #24]
                scriptAction->type = (DLMS_SCRIPT_ACTION_TYPE)var_toInteger(tmp3);
   173ee:	7128      	strb	r0, [r5, #4]
                ret = va_getByIndex(tmp2->Arr, 4, &tmp3);
   173f0:	6898      	ldr	r0, [r3, #8]
   173f2:	aa07      	add	r2, sp, #28
   173f4:	2104      	movs	r1, #4
   173f6:	f002 ff54 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   173fa:	4604      	mov	r4, r0
   173fc:	2800      	cmp	r0, #0
   173fe:	f47f aef2 	bne.w	171e6 <cosem_setScriptTable+0x26>
                type = (uint16_t)var_toInteger(tmp3);
   17402:	9807      	ldr	r0, [sp, #28]
   17404:	f003 f8c7 	bl	1a596 <var_toInteger>
                ret = va_getByIndex(tmp2->Arr, 5, &tmp3);
   17408:	9b06      	ldr	r3, [sp, #24]
                type = (uint16_t)var_toInteger(tmp3);
   1740a:	4606      	mov	r6, r0
                ret = va_getByIndex(tmp2->Arr, 5, &tmp3);
   1740c:	aa07      	add	r2, sp, #28
   1740e:	6898      	ldr	r0, [r3, #8]
   17410:	2105      	movs	r1, #5
   17412:	f002 ff46 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   17416:	4604      	mov	r4, r0
   17418:	2800      	cmp	r0, #0
   1741a:	f47f aee4 	bne.w	171e6 <cosem_setScriptTable+0x26>
                if ((ret = oa_findByLN(&settings->objects, type, tmp3->byteArr->data, &scriptAction->target)) != 0)
   1741e:	9b07      	ldr	r3, [sp, #28]
   17420:	9802      	ldr	r0, [sp, #8]
   17422:	689a      	ldr	r2, [r3, #8]
   17424:	b2b1      	uxth	r1, r6
   17426:	6812      	ldr	r2, [r2, #0]
   17428:	462b      	mov	r3, r5
   1742a:	3098      	adds	r0, #152	; 0x98
   1742c:	f002 fcf6 	bl	19e1c <oa_findByLN>
   17430:	4604      	mov	r4, r0
   17432:	2800      	cmp	r0, #0
   17434:	f47f aed7 	bne.w	171e6 <cosem_setScriptTable+0x26>
                ret = va_getByIndex(tmp2->Arr, 6, &tmp3);
   17438:	9b06      	ldr	r3, [sp, #24]
   1743a:	aa07      	add	r2, sp, #28
   1743c:	6898      	ldr	r0, [r3, #8]
   1743e:	2106      	movs	r1, #6
   17440:	f002 ff2f 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   17444:	4604      	mov	r4, r0
   17446:	2800      	cmp	r0, #0
   17448:	f47f aecd 	bne.w	171e6 <cosem_setScriptTable+0x26>
                scriptAction->index = (char)var_toInteger(tmp3);
   1744c:	9807      	ldr	r0, [sp, #28]
   1744e:	f003 f8a2 	bl	1a596 <var_toInteger>
                ret = va_getByIndex(tmp2->Arr, 7, &tmp3);
   17452:	9b06      	ldr	r3, [sp, #24]
                scriptAction->index = (char)var_toInteger(tmp3);
   17454:	7628      	strb	r0, [r5, #24]
                ret = va_getByIndex(tmp2->Arr, 7, &tmp3);
   17456:	6898      	ldr	r0, [r3, #8]
   17458:	aa07      	add	r2, sp, #28
   1745a:	2107      	movs	r1, #7
   1745c:	f002 ff21 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   17460:	4604      	mov	r4, r0
   17462:	2800      	cmp	r0, #0
   17464:	f47f aebf 	bne.w	171e6 <cosem_setScriptTable+0x26>
                var_copy(&scriptAction->parameter, tmp);
   17468:	9905      	ldr	r1, [sp, #20]
   1746a:	4640      	mov	r0, r8
   1746c:	f7ec ff46 	bl	42fc <var_copy>
                arr_push(&script->actions, scriptAction);
   17470:	4629      	mov	r1, r5
   17472:	4638      	mov	r0, r7
   17474:	f7f8 ff4a 	bl	1030c <arr_push>
   17478:	e6b5      	b.n	171e6 <cosem_setScriptTable+0x26>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   1747a:	f44f 7481 	mov.w	r4, #258	; 0x102
   1747e:	e6b2      	b.n	171e6 <cosem_setScriptTable+0x26>
                        ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   17480:	f44f 7182 	mov.w	r1, #260	; 0x104
    int ret = 0, pos, pos2;
   17484:	460c      	mov	r4, r1
   17486:	e6ae      	b.n	171e6 <cosem_setScriptTable+0x26>
                            ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   17488:	f44f 7182 	mov.w	r1, #260	; 0x104
                        ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   1748c:	460d      	mov	r5, r1
   1748e:	e6ef      	b.n	17270 <cosem_setScriptTable+0xb0>
                            gxfree(scriptAction);
   17490:	4638      	mov	r0, r7
   17492:	9301      	str	r3, [sp, #4]
   17494:	f7f4 fb96 	bl	bbc4 <free>
   17498:	9b01      	ldr	r3, [sp, #4]
   1749a:	461d      	mov	r5, r3
   1749c:	e6e8      	b.n	17270 <cosem_setScriptTable+0xb0>

0001749e <cosem_setSpecialDaysTable>:
{
   1749e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (index == 2)
   174a2:	2902      	cmp	r1, #2
{
   174a4:	b086      	sub	sp, #24
   174a6:	4690      	mov	r8, r2
    if (index == 2)
   174a8:	d15f      	bne.n	1756a <cosem_setSpecialDaysTable+0xcc>
        arr_clear(&object->entries);
   174aa:	f100 0610 	add.w	r6, r0, #16
   174ae:	4630      	mov	r0, r6
   174b0:	f7f8 ff41 	bl	10336 <arr_clear>
        if (value->Arr != NULL)
   174b4:	f8d8 3008 	ldr.w	r3, [r8, #8]
   174b8:	2b00      	cmp	r3, #0
   174ba:	d151      	bne.n	17560 <cosem_setSpecialDaysTable+0xc2>
    int ret = 0, pos;
   174bc:	2400      	movs	r4, #0
}
   174be:	4620      	mov	r0, r4
   174c0:	b006      	add	sp, #24
   174c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                ret = va_getByIndex(value->Arr, pos, &tmp);
   174c6:	466a      	mov	r2, sp
   174c8:	4639      	mov	r1, r7
   174ca:	f002 feea 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   174ce:	4604      	mov	r4, r0
   174d0:	2800      	cmp	r0, #0
   174d2:	d1f4      	bne.n	174be <cosem_setSpecialDaysTable+0x20>
                specialDay = (gxSpecialDay*)gxmalloc(sizeof(gxSpecialDay));
   174d4:	2014      	movs	r0, #20
   174d6:	f7f4 fb6d 	bl	bbb4 <malloc>
                if (specialDay == NULL)
   174da:	4605      	mov	r5, r0
   174dc:	2800      	cmp	r0, #0
   174de:	d041      	beq.n	17564 <cosem_setSpecialDaysTable+0xc6>
                ret = va_getByIndex(tmp->Arr, 0, &tmp3);
   174e0:	9b00      	ldr	r3, [sp, #0]
   174e2:	4621      	mov	r1, r4
   174e4:	6898      	ldr	r0, [r3, #8]
   174e6:	aa01      	add	r2, sp, #4
   174e8:	f002 fedb 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   174ec:	4604      	mov	r4, r0
   174ee:	2800      	cmp	r0, #0
   174f0:	d1e5      	bne.n	174be <cosem_setSpecialDaysTable+0x20>
                specialDay->index = (uint16_t)var_toInteger(tmp3);
   174f2:	9801      	ldr	r0, [sp, #4]
   174f4:	f003 f84f 	bl	1a596 <var_toInteger>
                ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   174f8:	9b00      	ldr	r3, [sp, #0]
                specialDay->index = (uint16_t)var_toInteger(tmp3);
   174fa:	8028      	strh	r0, [r5, #0]
                ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   174fc:	aa01      	add	r2, sp, #4
   174fe:	6898      	ldr	r0, [r3, #8]
   17500:	2101      	movs	r1, #1
   17502:	f002 fece 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   17506:	4604      	mov	r4, r0
   17508:	2800      	cmp	r0, #0
   1750a:	d1d8      	bne.n	174be <cosem_setSpecialDaysTable+0x20>
                var_init(&tmp2);
   1750c:	a802      	add	r0, sp, #8
   1750e:	f002 fcee 	bl	19eee <var_init>
                ret = dlms_changeType2(tmp3, DLMS_DATA_TYPE_DATE, &tmp2);
   17512:	9801      	ldr	r0, [sp, #4]
   17514:	aa02      	add	r2, sp, #8
   17516:	211a      	movs	r1, #26
   17518:	f7f8 fc15 	bl	fd46 <dlms_changeType2>
                if (ret != DLMS_ERROR_CODE_OK)
   1751c:	4604      	mov	r4, r0
   1751e:	2800      	cmp	r0, #0
   17520:	d1cd      	bne.n	174be <cosem_setSpecialDaysTable+0x20>
                time_copy(&specialDay->date, tmp2.dateTime);
   17522:	9904      	ldr	r1, [sp, #16]
   17524:	1d28      	adds	r0, r5, #4
   17526:	f7f6 fc5b 	bl	dde0 <time_copy>
                var_clear(&tmp2);
   1752a:	a802      	add	r0, sp, #8
   1752c:	f002 fe3b 	bl	1a1a6 <var_clear>
                ret = va_getByIndex(tmp->Arr, 2, &tmp3);
   17530:	9b00      	ldr	r3, [sp, #0]
   17532:	aa01      	add	r2, sp, #4
   17534:	6898      	ldr	r0, [r3, #8]
   17536:	2102      	movs	r1, #2
   17538:	f002 feb3 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   1753c:	4604      	mov	r4, r0
   1753e:	2800      	cmp	r0, #0
   17540:	d1bd      	bne.n	174be <cosem_setSpecialDaysTable+0x20>
                specialDay->dayId = (unsigned char)var_toInteger(tmp3);
   17542:	9801      	ldr	r0, [sp, #4]
   17544:	f003 f827 	bl	1a596 <var_toInteger>
                arr_push(&object->entries, specialDay);
   17548:	4629      	mov	r1, r5
                specialDay->dayId = (unsigned char)var_toInteger(tmp3);
   1754a:	7428      	strb	r0, [r5, #16]
                arr_push(&object->entries, specialDay);
   1754c:	4630      	mov	r0, r6
   1754e:	f7f8 fedd 	bl	1030c <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   17552:	3701      	adds	r7, #1
   17554:	f8d8 0008 	ldr.w	r0, [r8, #8]
   17558:	88c3      	ldrh	r3, [r0, #6]
   1755a:	42bb      	cmp	r3, r7
   1755c:	d1b3      	bne.n	174c6 <cosem_setSpecialDaysTable+0x28>
   1755e:	e7ad      	b.n	174bc <cosem_setSpecialDaysTable+0x1e>
   17560:	2700      	movs	r7, #0
   17562:	e7f7      	b.n	17554 <cosem_setSpecialDaysTable+0xb6>
                    ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   17564:	f44f 7482 	mov.w	r4, #260	; 0x104
   17568:	e7a9      	b.n	174be <cosem_setSpecialDaysTable+0x20>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   1756a:	f44f 7481 	mov.w	r4, #258	; 0x102
   1756e:	e7a6      	b.n	174be <cosem_setSpecialDaysTable+0x20>

00017570 <cosem_setTcpUdpSetup>:
    if (index == 2)
   17570:	2a02      	cmp	r2, #2
{
   17572:	b537      	push	{r0, r1, r2, r4, r5, lr}
   17574:	4605      	mov	r5, r0
   17576:	460c      	mov	r4, r1
   17578:	4618      	mov	r0, r3
    if (index == 2)
   1757a:	d104      	bne.n	17586 <cosem_setTcpUdpSetup+0x16>
        object->port = (uint16_t)var_toInteger(value);
   1757c:	f003 f80b 	bl	1a596 <var_toInteger>
   17580:	8220      	strh	r0, [r4, #16]
    int ret = 0;
   17582:	2000      	movs	r0, #0
   17584:	e013      	b.n	175ae <cosem_setTcpUdpSetup+0x3e>
    else if (index == 3)
   17586:	2a03      	cmp	r2, #3
   17588:	d113      	bne.n	175b2 <cosem_setTcpUdpSetup+0x42>
        if (value->vt == DLMS_DATA_TYPE_NONE)
   1758a:	781a      	ldrb	r2, [r3, #0]
   1758c:	b90a      	cbnz	r2, 17592 <cosem_setTcpUdpSetup+0x22>
            object->ipSetup = NULL;
   1758e:	614a      	str	r2, [r1, #20]
   17590:	e7f7      	b.n	17582 <cosem_setTcpUdpSetup+0x12>
            if ((ret = bb_get(value->byteArr, ln, 6)) != 0 ||
   17592:	6898      	ldr	r0, [r3, #8]
   17594:	2206      	movs	r2, #6
   17596:	4669      	mov	r1, sp
   17598:	f7f5 fedc 	bl	d354 <bb_get>
   1759c:	b938      	cbnz	r0, 175ae <cosem_setTcpUdpSetup+0x3e>
                (ret = oa_findByLN(&settings->objects, DLMS_OBJECT_TYPE_IP4_SETUP, ln, &object->ipSetup)) != 0)
   1759e:	f104 0314 	add.w	r3, r4, #20
   175a2:	466a      	mov	r2, sp
   175a4:	212a      	movs	r1, #42	; 0x2a
   175a6:	f105 0098 	add.w	r0, r5, #152	; 0x98
   175aa:	f002 fc37 	bl	19e1c <oa_findByLN>
}
   175ae:	b003      	add	sp, #12
   175b0:	bd30      	pop	{r4, r5, pc}
    else if (index == 4)
   175b2:	2a04      	cmp	r2, #4
   175b4:	d103      	bne.n	175be <cosem_setTcpUdpSetup+0x4e>
        object->maximumSegmentSize = (uint16_t)var_toInteger(value);
   175b6:	f002 ffee 	bl	1a596 <var_toInteger>
   175ba:	83a0      	strh	r0, [r4, #28]
   175bc:	e7e1      	b.n	17582 <cosem_setTcpUdpSetup+0x12>
    else if (index == 5)
   175be:	2a05      	cmp	r2, #5
   175c0:	d103      	bne.n	175ca <cosem_setTcpUdpSetup+0x5a>
        object->maximumSimultaneousConnections = (unsigned char)var_toInteger(value);
   175c2:	f002 ffe8 	bl	1a596 <var_toInteger>
   175c6:	7620      	strb	r0, [r4, #24]
   175c8:	e7db      	b.n	17582 <cosem_setTcpUdpSetup+0x12>
    else if (index == 6)
   175ca:	2a06      	cmp	r2, #6
   175cc:	d103      	bne.n	175d6 <cosem_setTcpUdpSetup+0x66>
        object->inactivityTimeout = (uint16_t)var_toInteger(value);
   175ce:	f002 ffe2 	bl	1a596 <var_toInteger>
   175d2:	8360      	strh	r0, [r4, #26]
   175d4:	e7d5      	b.n	17582 <cosem_setTcpUdpSetup+0x12>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   175d6:	f44f 7081 	mov.w	r0, #258	; 0x102
    return ret;
   175da:	e7e8      	b.n	175ae <cosem_setTcpUdpSetup+0x3e>

000175dc <cosem_setMbusMasterPortSetup>:
    if (index == 2)
   175dc:	2902      	cmp	r1, #2
{
   175de:	b510      	push	{r4, lr}
   175e0:	4604      	mov	r4, r0
   175e2:	4610      	mov	r0, r2
    if (index == 2)
   175e4:	d104      	bne.n	175f0 <cosem_setMbusMasterPortSetup+0x14>
        object->commSpeed = (DLMS_BAUD_RATE)var_toInteger(value);
   175e6:	f002 ffd6 	bl	1a596 <var_toInteger>
   175ea:	7420      	strb	r0, [r4, #16]
    return DLMS_ERROR_CODE_OK;
   175ec:	2000      	movs	r0, #0
}
   175ee:	bd10      	pop	{r4, pc}
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   175f0:	f44f 7081 	mov.w	r0, #258	; 0x102
   175f4:	e7fb      	b.n	175ee <cosem_setMbusMasterPortSetup+0x12>

000175f6 <cosem_setPushSetup>:
{
   175f6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (index == 2)
   175fa:	2a02      	cmp	r2, #2
{
   175fc:	b08b      	sub	sp, #44	; 0x2c
   175fe:	4680      	mov	r8, r0
   17600:	460d      	mov	r5, r1
   17602:	461e      	mov	r6, r3
    if (index == 2)
   17604:	d17b      	bne.n	176fe <cosem_setPushSetup+0x108>
        obj_clearPushObjectList(&object->pushObjectList);
   17606:	3510      	adds	r5, #16
   17608:	4628      	mov	r0, r5
   1760a:	f7fc f9a9 	bl	13960 <obj_clearPushObjectList>
        if (value->Arr != NULL)
   1760e:	68b3      	ldr	r3, [r6, #8]
   17610:	2b00      	cmp	r3, #0
   17612:	d172      	bne.n	176fa <cosem_setPushSetup+0x104>
    return DLMS_ERROR_CODE_OK;
   17614:	2400      	movs	r4, #0
   17616:	e0a6      	b.n	17766 <cosem_setPushSetup+0x170>
                ret = va_getByIndex(value->Arr, pos, &tmp);
   17618:	466a      	mov	r2, sp
   1761a:	4639      	mov	r1, r7
   1761c:	f002 fe41 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   17620:	4604      	mov	r4, r0
   17622:	2800      	cmp	r0, #0
   17624:	f040 809f 	bne.w	17766 <cosem_setPushSetup+0x170>
                ret = va_getByIndex(tmp->Arr, 0, &tmp3);
   17628:	9b00      	ldr	r3, [sp, #0]
   1762a:	4601      	mov	r1, r0
   1762c:	aa01      	add	r2, sp, #4
   1762e:	6898      	ldr	r0, [r3, #8]
   17630:	f002 fe37 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   17634:	4604      	mov	r4, r0
   17636:	2800      	cmp	r0, #0
   17638:	f040 8095 	bne.w	17766 <cosem_setPushSetup+0x170>
                type = (DLMS_OBJECT_TYPE)var_toInteger(tmp3);
   1763c:	9801      	ldr	r0, [sp, #4]
   1763e:	f002 ffaa 	bl	1a596 <var_toInteger>
                ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   17642:	9b00      	ldr	r3, [sp, #0]
                type = (DLMS_OBJECT_TYPE)var_toInteger(tmp3);
   17644:	fa1f f980 	uxth.w	r9, r0
                ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   17648:	aa01      	add	r2, sp, #4
   1764a:	6898      	ldr	r0, [r3, #8]
   1764c:	2101      	movs	r1, #1
   1764e:	f002 fe28 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   17652:	4604      	mov	r4, r0
   17654:	2800      	cmp	r0, #0
   17656:	f040 8086 	bne.w	17766 <cosem_setPushSetup+0x170>
                if ((ret = oa_findByLN(&settings->objects, type, tmp3->byteArr->data, &obj)) != 0)
   1765a:	9b01      	ldr	r3, [sp, #4]
                obj = NULL;
   1765c:	9006      	str	r0, [sp, #24]
                if ((ret = oa_findByLN(&settings->objects, type, tmp3->byteArr->data, &obj)) != 0)
   1765e:	689a      	ldr	r2, [r3, #8]
   17660:	4649      	mov	r1, r9
   17662:	6812      	ldr	r2, [r2, #0]
   17664:	ab06      	add	r3, sp, #24
   17666:	f108 0098 	add.w	r0, r8, #152	; 0x98
   1766a:	f002 fbd7 	bl	19e1c <oa_findByLN>
   1766e:	4604      	mov	r4, r0
   17670:	2800      	cmp	r0, #0
   17672:	d178      	bne.n	17766 <cosem_setPushSetup+0x170>
                if (obj == NULL)
   17674:	9b06      	ldr	r3, [sp, #24]
   17676:	b99b      	cbnz	r3, 176a0 <cosem_setPushSetup+0xaa>
                    if ((ret = cosem_createObject(type, &obj)) != 0)
   17678:	a906      	add	r1, sp, #24
   1767a:	4648      	mov	r0, r9
   1767c:	f7ea fbf0 	bl	1e60 <cosem_createObject>
   17680:	4604      	mov	r4, r0
   17682:	2800      	cmp	r0, #0
   17684:	d16f      	bne.n	17766 <cosem_setPushSetup+0x170>
                    oa_push(&settings->releasedObjects, obj);
   17686:	9906      	ldr	r1, [sp, #24]
   17688:	f108 00e4 	add.w	r0, r8, #228	; 0xe4
   1768c:	f002 fb66 	bl	19d5c <oa_push>
                    memcpy(obj->logicalName, tmp3->byteArr->data, tmp3->byteArr->size);
   17690:	9b01      	ldr	r3, [sp, #4]
   17692:	9806      	ldr	r0, [sp, #24]
   17694:	689b      	ldr	r3, [r3, #8]
   17696:	3006      	adds	r0, #6
   17698:	88da      	ldrh	r2, [r3, #6]
   1769a:	6819      	ldr	r1, [r3, #0]
   1769c:	f004 fd20 	bl	1c0e0 <memcpy>
                it = (gxTarget*)gxmalloc(sizeof(gxTarget));
   176a0:	2004      	movs	r0, #4
   176a2:	f7f4 fa87 	bl	bbb4 <malloc>
                if (it == NULL)
   176a6:	4604      	mov	r4, r0
   176a8:	2800      	cmp	r0, #0
   176aa:	d0b3      	beq.n	17614 <cosem_setPushSetup+0x1e>
                ret = va_getByIndex(tmp->Arr, 2, &tmp3);
   176ac:	9b00      	ldr	r3, [sp, #0]
   176ae:	aa01      	add	r2, sp, #4
   176b0:	6898      	ldr	r0, [r3, #8]
   176b2:	2102      	movs	r1, #2
   176b4:	f002 fdf5 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   176b8:	2800      	cmp	r0, #0
   176ba:	d1ab      	bne.n	17614 <cosem_setPushSetup+0x1e>
                it->attributeIndex = (unsigned char)var_toInteger(tmp3);
   176bc:	9801      	ldr	r0, [sp, #4]
   176be:	f002 ff6a 	bl	1a596 <var_toInteger>
                ret = va_getByIndex(tmp->Arr, 3, &tmp3);
   176c2:	9b00      	ldr	r3, [sp, #0]
                it->attributeIndex = (unsigned char)var_toInteger(tmp3);
   176c4:	7020      	strb	r0, [r4, #0]
                ret = va_getByIndex(tmp->Arr, 3, &tmp3);
   176c6:	6898      	ldr	r0, [r3, #8]
   176c8:	aa01      	add	r2, sp, #4
   176ca:	2103      	movs	r1, #3
   176cc:	f002 fde9 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   176d0:	2800      	cmp	r0, #0
   176d2:	d19f      	bne.n	17614 <cosem_setPushSetup+0x1e>
                it->dataIndex = (unsigned char)var_toInteger(tmp3);
   176d4:	9801      	ldr	r0, [sp, #4]
   176d6:	f002 ff5e 	bl	1a596 <var_toInteger>
   176da:	b2c0      	uxtb	r0, r0
   176dc:	8060      	strh	r0, [r4, #2]
                arr_push(&object->pushObjectList, key_init(obj, it));
   176de:	4621      	mov	r1, r4
   176e0:	9806      	ldr	r0, [sp, #24]
   176e2:	f7fc f91c 	bl	1391e <key_init>
   176e6:	4601      	mov	r1, r0
   176e8:	4628      	mov	r0, r5
   176ea:	f7f8 fe0f 	bl	1030c <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   176ee:	3701      	adds	r7, #1
   176f0:	68b0      	ldr	r0, [r6, #8]
   176f2:	88c3      	ldrh	r3, [r0, #6]
   176f4:	42bb      	cmp	r3, r7
   176f6:	d18f      	bne.n	17618 <cosem_setPushSetup+0x22>
   176f8:	e78c      	b.n	17614 <cosem_setPushSetup+0x1e>
   176fa:	2700      	movs	r7, #0
   176fc:	e7f8      	b.n	176f0 <cosem_setPushSetup+0xfa>
    else if (index == 3)
   176fe:	2a03      	cmp	r2, #3
   17700:	d135      	bne.n	1776e <cosem_setPushSetup+0x178>
        bb_clear(&object->destination);
   17702:	f101 0720 	add.w	r7, r1, #32
   17706:	4638      	mov	r0, r7
   17708:	f7f5 fc2f 	bl	cf6a <bb_clear>
        ret = va_getByIndex(value->Arr, 0, &tmp);
   1770c:	68b0      	ldr	r0, [r6, #8]
   1770e:	466a      	mov	r2, sp
   17710:	2100      	movs	r1, #0
   17712:	f002 fdc6 	bl	1a2a2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   17716:	4604      	mov	r4, r0
   17718:	bb28      	cbnz	r0, 17766 <cosem_setPushSetup+0x170>
        object->service = (DLMS_SERVICE_TYPE)var_toInteger(tmp);
   1771a:	9800      	ldr	r0, [sp, #0]
   1771c:	f002 ff3b 	bl	1a596 <var_toInteger>
   17720:	7728      	strb	r0, [r5, #28]
        ret = va_getByIndex(value->Arr, 1, &tmp);
   17722:	68b0      	ldr	r0, [r6, #8]
   17724:	466a      	mov	r2, sp
   17726:	2101      	movs	r1, #1
   17728:	f002 fdbb 	bl	1a2a2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   1772c:	4604      	mov	r4, r0
   1772e:	b9d0      	cbnz	r0, 17766 <cosem_setPushSetup+0x170>
        if (tmp->byteArr != NULL && tmp->byteArr->size != 0)
   17730:	9b00      	ldr	r3, [sp, #0]
   17732:	689b      	ldr	r3, [r3, #8]
   17734:	b15b      	cbz	r3, 1774e <cosem_setPushSetup+0x158>
   17736:	88db      	ldrh	r3, [r3, #6]
   17738:	b14b      	cbz	r3, 1774e <cosem_setPushSetup+0x158>
            bb_clear(&object->destination);
   1773a:	4638      	mov	r0, r7
   1773c:	f7f5 fc15 	bl	cf6a <bb_clear>
            bb_set(&object->destination, tmp->byteArr->data, tmp->byteArr->size);
   17740:	9b00      	ldr	r3, [sp, #0]
   17742:	689b      	ldr	r3, [r3, #8]
   17744:	4638      	mov	r0, r7
   17746:	88da      	ldrh	r2, [r3, #6]
   17748:	6819      	ldr	r1, [r3, #0]
   1774a:	f7f5 fb9a 	bl	ce82 <bb_set>
        ret = va_getByIndex(value->Arr, 2, &tmp);
   1774e:	68b0      	ldr	r0, [r6, #8]
   17750:	466a      	mov	r2, sp
   17752:	2102      	movs	r1, #2
   17754:	f002 fda5 	bl	1a2a2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   17758:	4604      	mov	r4, r0
   1775a:	b920      	cbnz	r0, 17766 <cosem_setPushSetup+0x170>
        object->message = (DLMS_MESSAGE_TYPE)var_toInteger(tmp);
   1775c:	9800      	ldr	r0, [sp, #0]
   1775e:	f002 ff1a 	bl	1a596 <var_toInteger>
   17762:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
}
   17766:	4620      	mov	r0, r4
   17768:	b00b      	add	sp, #44	; 0x2c
   1776a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if (index == 4)
   1776e:	2a04      	cmp	r2, #4
   17770:	d156      	bne.n	17820 <cosem_setPushSetup+0x22a>
        arr_clearKeyValuePair(&object->communicationWindow);
   17772:	3530      	adds	r5, #48	; 0x30
   17774:	4628      	mov	r0, r5
   17776:	f7f8 fe17 	bl	103a8 <arr_clearKeyValuePair>
        if (value->Arr != NULL)
   1777a:	68b3      	ldr	r3, [r6, #8]
   1777c:	2b00      	cmp	r3, #0
   1777e:	f43f af49 	beq.w	17614 <cosem_setPushSetup+0x1e>
            var_init(&start);
   17782:	a802      	add	r0, sp, #8
   17784:	f002 fbb3 	bl	19eee <var_init>
            var_init(&end);
   17788:	a806      	add	r0, sp, #24
   1778a:	f002 fbb0 	bl	19eee <var_init>
            for (pos = 0; pos != value->Arr->size; ++pos)
   1778e:	2400      	movs	r4, #0
   17790:	68b0      	ldr	r0, [r6, #8]
   17792:	88c3      	ldrh	r3, [r0, #6]
   17794:	42a3      	cmp	r3, r4
   17796:	d005      	beq.n	177a4 <cosem_setPushSetup+0x1ae>
                if ((ret = va_getByIndex(value->Arr, pos, &tmp)) != 0 ||
   17798:	4621      	mov	r1, r4
   1779a:	466a      	mov	r2, sp
   1779c:	f002 fd81 	bl	1a2a2 <va_getByIndex>
   177a0:	4601      	mov	r1, r0
   177a2:	b130      	cbz	r0, 177b2 <cosem_setPushSetup+0x1bc>
            var_clear(&start);
   177a4:	a802      	add	r0, sp, #8
   177a6:	f002 fcfe 	bl	1a1a6 <var_clear>
            var_clear(&end);
   177aa:	a806      	add	r0, sp, #24
   177ac:	f002 fcfb 	bl	1a1a6 <var_clear>
   177b0:	e730      	b.n	17614 <cosem_setPushSetup+0x1e>
                    (ret = va_getByIndex(tmp->Arr, 0, &tmp3)) != 0 ||
   177b2:	9b00      	ldr	r3, [sp, #0]
   177b4:	aa01      	add	r2, sp, #4
   177b6:	6898      	ldr	r0, [r3, #8]
   177b8:	f002 fd73 	bl	1a2a2 <va_getByIndex>
                if ((ret = va_getByIndex(value->Arr, pos, &tmp)) != 0 ||
   177bc:	2800      	cmp	r0, #0
   177be:	d1f1      	bne.n	177a4 <cosem_setPushSetup+0x1ae>
                    (ret = dlms_changeType2(tmp3, DLMS_DATA_TYPE_DATETIME, &start)) != 0 ||
   177c0:	9801      	ldr	r0, [sp, #4]
   177c2:	aa02      	add	r2, sp, #8
   177c4:	2119      	movs	r1, #25
   177c6:	f7f8 fabe 	bl	fd46 <dlms_changeType2>
                    (ret = va_getByIndex(tmp->Arr, 0, &tmp3)) != 0 ||
   177ca:	2800      	cmp	r0, #0
   177cc:	d1ea      	bne.n	177a4 <cosem_setPushSetup+0x1ae>
                    (ret = va_getByIndex(tmp->Arr, 1, &tmp3)) != 0 ||
   177ce:	9b00      	ldr	r3, [sp, #0]
   177d0:	aa01      	add	r2, sp, #4
   177d2:	6898      	ldr	r0, [r3, #8]
   177d4:	2101      	movs	r1, #1
   177d6:	f002 fd64 	bl	1a2a2 <va_getByIndex>
                    (ret = dlms_changeType2(tmp3, DLMS_DATA_TYPE_DATETIME, &start)) != 0 ||
   177da:	2800      	cmp	r0, #0
   177dc:	d1e2      	bne.n	177a4 <cosem_setPushSetup+0x1ae>
                    (ret = dlms_changeType2(tmp3, DLMS_DATA_TYPE_DATETIME, &end)) != 0)
   177de:	9801      	ldr	r0, [sp, #4]
   177e0:	aa06      	add	r2, sp, #24
   177e2:	2119      	movs	r1, #25
   177e4:	f7f8 faaf 	bl	fd46 <dlms_changeType2>
                    (ret = va_getByIndex(tmp->Arr, 1, &tmp3)) != 0 ||
   177e8:	2800      	cmp	r0, #0
   177ea:	d1db      	bne.n	177a4 <cosem_setPushSetup+0x1ae>
                s = (gxtime*)gxmalloc(sizeof(gxtime));
   177ec:	200c      	movs	r0, #12
   177ee:	f7f4 f9e1 	bl	bbb4 <malloc>
   177f2:	4607      	mov	r7, r0
                e = (gxtime*)gxmalloc(sizeof(gxtime));
   177f4:	200c      	movs	r0, #12
   177f6:	f7f4 f9dd 	bl	bbb4 <malloc>
                time_copy(s, start.dateTime);
   177fa:	9904      	ldr	r1, [sp, #16]
                e = (gxtime*)gxmalloc(sizeof(gxtime));
   177fc:	4680      	mov	r8, r0
                time_copy(s, start.dateTime);
   177fe:	4638      	mov	r0, r7
   17800:	f7f6 faee 	bl	dde0 <time_copy>
                time_copy(e, end.dateTime);
   17804:	9908      	ldr	r1, [sp, #32]
   17806:	4640      	mov	r0, r8
   17808:	f7f6 faea 	bl	dde0 <time_copy>
                arr_push(&object->communicationWindow, key_init(s, e));
   1780c:	4641      	mov	r1, r8
   1780e:	4638      	mov	r0, r7
   17810:	f7fc f885 	bl	1391e <key_init>
   17814:	4601      	mov	r1, r0
   17816:	4628      	mov	r0, r5
   17818:	f7f8 fd78 	bl	1030c <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   1781c:	3401      	adds	r4, #1
   1781e:	e7b7      	b.n	17790 <cosem_setPushSetup+0x19a>
    else if (index == 5)
   17820:	2a05      	cmp	r2, #5
   17822:	d104      	bne.n	1782e <cosem_setPushSetup+0x238>
        object->randomisationStartInterval = (uint16_t)var_toInteger(value);
   17824:	4618      	mov	r0, r3
   17826:	f002 feb6 	bl	1a596 <var_toInteger>
   1782a:	87a8      	strh	r0, [r5, #60]	; 0x3c
   1782c:	e6f2      	b.n	17614 <cosem_setPushSetup+0x1e>
    else if (index == 6)
   1782e:	2a06      	cmp	r2, #6
   17830:	d105      	bne.n	1783e <cosem_setPushSetup+0x248>
        object->numberOfRetries = (unsigned char)var_toInteger(value);
   17832:	4618      	mov	r0, r3
   17834:	f002 feaf 	bl	1a596 <var_toInteger>
   17838:	f885 003e 	strb.w	r0, [r5, #62]	; 0x3e
   1783c:	e6ea      	b.n	17614 <cosem_setPushSetup+0x1e>
    else if (index == 7)
   1783e:	2a07      	cmp	r2, #7
   17840:	d105      	bne.n	1784e <cosem_setPushSetup+0x258>
        object->repetitionDelay = (uint16_t)var_toInteger(value);
   17842:	4618      	mov	r0, r3
   17844:	f002 fea7 	bl	1a596 <var_toInteger>
   17848:	f8a5 0040 	strh.w	r0, [r5, #64]	; 0x40
   1784c:	e6e2      	b.n	17614 <cosem_setPushSetup+0x1e>
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   1784e:	f44f 7481 	mov.w	r4, #258	; 0x102
   17852:	e788      	b.n	17766 <cosem_setPushSetup+0x170>

00017854 <setUnitCharge>:
{
   17854:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ret = obj_clearChargeTables(&target->chargeTables);
   17858:	f101 070c 	add.w	r7, r1, #12
{
   1785c:	b085      	sub	sp, #20
   1785e:	4680      	mov	r8, r0
    ret = obj_clearChargeTables(&target->chargeTables);
   17860:	4638      	mov	r0, r7
{
   17862:	460d      	mov	r5, r1
   17864:	4616      	mov	r6, r2
    ret = obj_clearChargeTables(&target->chargeTables);
   17866:	f7fc f9d3 	bl	13c10 <obj_clearChargeTables>
    if (ret != 0)
   1786a:	4604      	mov	r4, r0
   1786c:	2800      	cmp	r0, #0
   1786e:	d14d      	bne.n	1790c <setUnitCharge+0xb8>
    ret = va_getByIndex(value->Arr, 0, &it);
   17870:	4601      	mov	r1, r0
   17872:	aa01      	add	r2, sp, #4
   17874:	68b0      	ldr	r0, [r6, #8]
   17876:	f002 fd14 	bl	1a2a2 <va_getByIndex>
    if (ret != 0)
   1787a:	4604      	mov	r4, r0
   1787c:	2800      	cmp	r0, #0
   1787e:	d145      	bne.n	1790c <setUnitCharge+0xb8>
    ret = va_getByIndex(it->Arr, 0, &it2);
   17880:	9b01      	ldr	r3, [sp, #4]
   17882:	4601      	mov	r1, r0
   17884:	aa02      	add	r2, sp, #8
   17886:	6898      	ldr	r0, [r3, #8]
   17888:	f002 fd0b 	bl	1a2a2 <va_getByIndex>
    if (ret != 0)
   1788c:	4604      	mov	r4, r0
   1788e:	2800      	cmp	r0, #0
   17890:	d13c      	bne.n	1790c <setUnitCharge+0xb8>
    target->chargePerUnitScaling.commodityScale = (char)var_toInteger(it2);
   17892:	9802      	ldr	r0, [sp, #8]
   17894:	f002 fe7f 	bl	1a596 <var_toInteger>
    ret = va_getByIndex(it->Arr, 1, &it2);
   17898:	9b01      	ldr	r3, [sp, #4]
    target->chargePerUnitScaling.commodityScale = (char)var_toInteger(it2);
   1789a:	7028      	strb	r0, [r5, #0]
    ret = va_getByIndex(it->Arr, 1, &it2);
   1789c:	6898      	ldr	r0, [r3, #8]
   1789e:	aa02      	add	r2, sp, #8
   178a0:	2101      	movs	r1, #1
   178a2:	f002 fcfe 	bl	1a2a2 <va_getByIndex>
    if (ret != 0)
   178a6:	4604      	mov	r4, r0
   178a8:	bb80      	cbnz	r0, 1790c <setUnitCharge+0xb8>
    target->chargePerUnitScaling.priceScale = (char)var_toInteger(it2);
   178aa:	9802      	ldr	r0, [sp, #8]
   178ac:	f002 fe73 	bl	1a596 <var_toInteger>
   178b0:	7068      	strb	r0, [r5, #1]
    ret = va_getByIndex(value->Arr, 1, &it);
   178b2:	68b0      	ldr	r0, [r6, #8]
   178b4:	aa01      	add	r2, sp, #4
   178b6:	2101      	movs	r1, #1
   178b8:	f002 fcf3 	bl	1a2a2 <va_getByIndex>
    if (ret != 0)
   178bc:	4604      	mov	r4, r0
   178be:	bb28      	cbnz	r0, 1790c <setUnitCharge+0xb8>
    ret = va_getByIndex(it->Arr, 0, &it2);
   178c0:	9b01      	ldr	r3, [sp, #4]
   178c2:	4601      	mov	r1, r0
   178c4:	aa02      	add	r2, sp, #8
   178c6:	6898      	ldr	r0, [r3, #8]
   178c8:	f002 fceb 	bl	1a2a2 <va_getByIndex>
    if (ret != 0)
   178cc:	4604      	mov	r4, r0
   178ce:	b9e8      	cbnz	r0, 1790c <setUnitCharge+0xb8>
    type = (DLMS_OBJECT_TYPE)var_toInteger(it2);
   178d0:	9802      	ldr	r0, [sp, #8]
   178d2:	f002 fe60 	bl	1a596 <var_toInteger>
    ret = va_getByIndex(it->Arr, 1, &it2);
   178d6:	9b01      	ldr	r3, [sp, #4]
    type = (DLMS_OBJECT_TYPE)var_toInteger(it2);
   178d8:	4681      	mov	r9, r0
    ret = va_getByIndex(it->Arr, 1, &it2);
   178da:	aa02      	add	r2, sp, #8
   178dc:	6898      	ldr	r0, [r3, #8]
   178de:	2101      	movs	r1, #1
   178e0:	f002 fcdf 	bl	1a2a2 <va_getByIndex>
    if (ret != 0)
   178e4:	4604      	mov	r4, r0
   178e6:	b988      	cbnz	r0, 1790c <setUnitCharge+0xb8>
    if (bb_size(it2->byteArr) == 6)
   178e8:	9b02      	ldr	r3, [sp, #8]
   178ea:	6898      	ldr	r0, [r3, #8]
   178ec:	f7f5 f977 	bl	cbde <bb_size>
   178f0:	2806      	cmp	r0, #6
   178f2:	d10f      	bne.n	17914 <setUnitCharge+0xc0>
        if ((ret = oa_findByLN(&settings->objects, type, it2->byteArr->data, &target->commodity.target)) != 0)
   178f4:	9b02      	ldr	r3, [sp, #8]
   178f6:	689a      	ldr	r2, [r3, #8]
   178f8:	fa1f f189 	uxth.w	r1, r9
   178fc:	6812      	ldr	r2, [r2, #0]
   178fe:	1d2b      	adds	r3, r5, #4
   17900:	f108 0098 	add.w	r0, r8, #152	; 0x98
   17904:	f002 fa8a 	bl	19e1c <oa_findByLN>
   17908:	4604      	mov	r4, r0
   1790a:	b120      	cbz	r0, 17916 <setUnitCharge+0xc2>
}
   1790c:	4620      	mov	r0, r4
   1790e:	b005      	add	sp, #20
   17910:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        target->commodity.target = NULL;
   17914:	606c      	str	r4, [r5, #4]
    ret = va_getByIndex(it->Arr, 2, &it2);
   17916:	9b01      	ldr	r3, [sp, #4]
   17918:	aa02      	add	r2, sp, #8
   1791a:	6898      	ldr	r0, [r3, #8]
   1791c:	2102      	movs	r1, #2
   1791e:	f002 fcc0 	bl	1a2a2 <va_getByIndex>
    if (ret != 0)
   17922:	4604      	mov	r4, r0
   17924:	2800      	cmp	r0, #0
   17926:	d1f1      	bne.n	1790c <setUnitCharge+0xb8>
    target->commodity.attributeIndex = (unsigned char)var_toInteger(it2);
   17928:	9802      	ldr	r0, [sp, #8]
   1792a:	f002 fe34 	bl	1a596 <var_toInteger>
   1792e:	7228      	strb	r0, [r5, #8]
    obj_clearChargeTables(&target->chargeTables);
   17930:	4638      	mov	r0, r7
   17932:	f7fc f96d 	bl	13c10 <obj_clearChargeTables>
    ret = va_getByIndex(value->Arr, 2, &it);
   17936:	68b0      	ldr	r0, [r6, #8]
   17938:	aa01      	add	r2, sp, #4
   1793a:	2102      	movs	r1, #2
   1793c:	f002 fcb1 	bl	1a2a2 <va_getByIndex>
    if (ret != 0)
   17940:	4604      	mov	r4, r0
   17942:	2800      	cmp	r0, #0
   17944:	d1e2      	bne.n	1790c <setUnitCharge+0xb8>
    for (pos = 0; pos != it->Arr->size; ++pos)
   17946:	4680      	mov	r8, r0
   17948:	9b01      	ldr	r3, [sp, #4]
   1794a:	6898      	ldr	r0, [r3, #8]
   1794c:	88c3      	ldrh	r3, [r0, #6]
   1794e:	4543      	cmp	r3, r8
   17950:	d0dc      	beq.n	1790c <setUnitCharge+0xb8>
        ret = va_getByIndex(it->Arr, pos, &it2);
   17952:	aa02      	add	r2, sp, #8
   17954:	4641      	mov	r1, r8
   17956:	f002 fca4 	bl	1a2a2 <va_getByIndex>
        if (ret != 0)
   1795a:	4606      	mov	r6, r0
   1795c:	bb80      	cbnz	r0, 179c0 <setUnitCharge+0x16c>
        ct = (gxChargeTable*)gxmalloc(sizeof(gxChargeTable));
   1795e:	2010      	movs	r0, #16
   17960:	f7f4 f928 	bl	bbb4 <malloc>
        if (ct == NULL)
   17964:	4605      	mov	r5, r0
   17966:	b340      	cbz	r0, 179ba <setUnitCharge+0x166>
        arr_push(&target->chargeTables, ct);
   17968:	4601      	mov	r1, r0
   1796a:	4638      	mov	r0, r7
   1796c:	f7f8 fcce 	bl	1030c <arr_push>
        BYTE_BUFFER_INIT(&ct->index);
   17970:	4628      	mov	r0, r5
   17972:	f7f5 f937 	bl	cbe4 <bb_init>
        ret = va_getByIndex(it2->Arr, 0, &tmp);
   17976:	9b02      	ldr	r3, [sp, #8]
   17978:	4631      	mov	r1, r6
   1797a:	6898      	ldr	r0, [r3, #8]
   1797c:	aa03      	add	r2, sp, #12
   1797e:	f002 fc90 	bl	1a2a2 <va_getByIndex>
        if (ret != 0)
   17982:	4606      	mov	r6, r0
   17984:	b9e0      	cbnz	r0, 179c0 <setUnitCharge+0x16c>
        bb_set2(&ct->index, tmp->byteArr, 0, bb_size(tmp->byteArr));
   17986:	9b03      	ldr	r3, [sp, #12]
   17988:	f8d3 9008 	ldr.w	r9, [r3, #8]
   1798c:	4648      	mov	r0, r9
   1798e:	f7f5 f926 	bl	cbde <bb_size>
   17992:	4632      	mov	r2, r6
   17994:	4603      	mov	r3, r0
   17996:	4649      	mov	r1, r9
   17998:	4628      	mov	r0, r5
   1799a:	f7f5 faa1 	bl	cee0 <bb_set2>
        ret = va_getByIndex(it2->Arr, 1, &tmp);
   1799e:	9b02      	ldr	r3, [sp, #8]
   179a0:	aa03      	add	r2, sp, #12
   179a2:	6898      	ldr	r0, [r3, #8]
   179a4:	2101      	movs	r1, #1
   179a6:	f002 fc7c 	bl	1a2a2 <va_getByIndex>
        if (ret != 0)
   179aa:	b958      	cbnz	r0, 179c4 <setUnitCharge+0x170>
        ct->chargePerUnit = (short)var_toInteger(tmp);
   179ac:	9803      	ldr	r0, [sp, #12]
   179ae:	f002 fdf2 	bl	1a596 <var_toInteger>
    for (pos = 0; pos != it->Arr->size; ++pos)
   179b2:	f108 0801 	add.w	r8, r8, #1
        ct->chargePerUnit = (short)var_toInteger(tmp);
   179b6:	81a8      	strh	r0, [r5, #12]
    for (pos = 0; pos != it->Arr->size; ++pos)
   179b8:	e7c6      	b.n	17948 <setUnitCharge+0xf4>
            ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   179ba:	f44f 7482 	mov.w	r4, #260	; 0x104
   179be:	e7a5      	b.n	1790c <setUnitCharge+0xb8>
        ret = va_getByIndex(it2->Arr, 0, &tmp);
   179c0:	4634      	mov	r4, r6
   179c2:	e7a3      	b.n	1790c <setUnitCharge+0xb8>
        ret = va_getByIndex(it2->Arr, 1, &tmp);
   179c4:	4604      	mov	r4, r0
   179c6:	e7a1      	b.n	1790c <setUnitCharge+0xb8>

000179c8 <cosem_setCharge>:
{
   179c8:	b530      	push	{r4, r5, lr}
    if (index == 2)
   179ca:	2a02      	cmp	r2, #2
{
   179cc:	b085      	sub	sp, #20
   179ce:	460d      	mov	r5, r1
   179d0:	461c      	mov	r4, r3
    if (index == 2)
   179d2:	d106      	bne.n	179e2 <cosem_setCharge+0x1a>
        object->totalAmountPaid = (short)var_toInteger(value);
   179d4:	4618      	mov	r0, r3
   179d6:	f002 fdde 	bl	1a596 <var_toInteger>
   179da:	b200      	sxth	r0, r0
   179dc:	6128      	str	r0, [r5, #16]
    int ret = 0;
   179de:	2400      	movs	r4, #0
   179e0:	e014      	b.n	17a0c <cosem_setCharge+0x44>
    else if (index == 3)
   179e2:	2a03      	cmp	r2, #3
   179e4:	d104      	bne.n	179f0 <cosem_setCharge+0x28>
        object->chargeType = (unsigned char)var_toInteger(value);
   179e6:	4618      	mov	r0, r3
   179e8:	f002 fdd5 	bl	1a596 <var_toInteger>
   179ec:	7528      	strb	r0, [r5, #20]
   179ee:	e7f6      	b.n	179de <cosem_setCharge+0x16>
    else if (index == 4)
   179f0:	2a04      	cmp	r2, #4
   179f2:	d104      	bne.n	179fe <cosem_setCharge+0x36>
        object->priority = (unsigned char)var_toInteger(value);
   179f4:	4618      	mov	r0, r3
   179f6:	f002 fdce 	bl	1a596 <var_toInteger>
   179fa:	7568      	strb	r0, [r5, #21]
   179fc:	e7ef      	b.n	179de <cosem_setCharge+0x16>
    else if (index == 5)
   179fe:	2a05      	cmp	r2, #5
   17a00:	d107      	bne.n	17a12 <cosem_setCharge+0x4a>
        ret = setUnitCharge(settings, &object->unitChargeActive, value);
   17a02:	461a      	mov	r2, r3
   17a04:	3118      	adds	r1, #24
        ret = setUnitCharge(settings, &object->unitChargePassive, value);
   17a06:	f7ff ff25 	bl	17854 <setUnitCharge>
   17a0a:	4604      	mov	r4, r0
}
   17a0c:	4620      	mov	r0, r4
   17a0e:	b005      	add	sp, #20
   17a10:	bd30      	pop	{r4, r5, pc}
    else if (index == 6)
   17a12:	2a06      	cmp	r2, #6
   17a14:	d102      	bne.n	17a1c <cosem_setCharge+0x54>
        ret = setUnitCharge(settings, &object->unitChargePassive, value);
   17a16:	461a      	mov	r2, r3
   17a18:	3130      	adds	r1, #48	; 0x30
   17a1a:	e7f4      	b.n	17a06 <cosem_setCharge+0x3e>
    else if (index == 7)
   17a1c:	2a07      	cmp	r2, #7
   17a1e:	d11d      	bne.n	17a5c <cosem_setCharge+0x94>
        if (value->vt == DLMS_DATA_TYPE_OCTET_STRING && value->byteArr != NULL)
   17a20:	781b      	ldrb	r3, [r3, #0]
   17a22:	2b09      	cmp	r3, #9
   17a24:	d115      	bne.n	17a52 <cosem_setCharge+0x8a>
   17a26:	68a3      	ldr	r3, [r4, #8]
   17a28:	b19b      	cbz	r3, 17a52 <cosem_setCharge+0x8a>
            var_init(&tmp);
   17a2a:	4668      	mov	r0, sp
   17a2c:	f002 fa5f 	bl	19eee <var_init>
            if ((ret = dlms_changeType2(value, DLMS_DATA_TYPE_DATETIME, &tmp)) != 0)
   17a30:	4620      	mov	r0, r4
   17a32:	466a      	mov	r2, sp
   17a34:	2119      	movs	r1, #25
   17a36:	f7f8 f986 	bl	fd46 <dlms_changeType2>
   17a3a:	4604      	mov	r4, r0
   17a3c:	b118      	cbz	r0, 17a46 <cosem_setCharge+0x7e>
            var_clear(&tmp);
   17a3e:	4668      	mov	r0, sp
   17a40:	f002 fbb1 	bl	1a1a6 <var_clear>
   17a44:	e7e2      	b.n	17a0c <cosem_setCharge+0x44>
            time_copy(&object->unitChargeActivationTime, tmp.dateTime);
   17a46:	9902      	ldr	r1, [sp, #8]
   17a48:	f105 0048 	add.w	r0, r5, #72	; 0x48
   17a4c:	f7f6 f9c8 	bl	dde0 <time_copy>
   17a50:	e7f5      	b.n	17a3e <cosem_setCharge+0x76>
            time_clear(&object->unitChargeActivationTime);
   17a52:	f105 0048 	add.w	r0, r5, #72	; 0x48
   17a56:	f7f6 f992 	bl	dd7e <time_clear>
   17a5a:	e7c0      	b.n	179de <cosem_setCharge+0x16>
    else if (index == 8)
   17a5c:	2a08      	cmp	r2, #8
   17a5e:	d104      	bne.n	17a6a <cosem_setCharge+0xa2>
        object->period = var_toInteger(value);
   17a60:	4618      	mov	r0, r3
   17a62:	f002 fd98 	bl	1a596 <var_toInteger>
   17a66:	6568      	str	r0, [r5, #84]	; 0x54
   17a68:	e7b9      	b.n	179de <cosem_setCharge+0x16>
    else if (index == 9)
   17a6a:	2a09      	cmp	r2, #9
   17a6c:	d105      	bne.n	17a7a <cosem_setCharge+0xb2>
        object->chargeConfiguration = var_toInteger(value);
   17a6e:	4618      	mov	r0, r3
   17a70:	f002 fd91 	bl	1a596 <var_toInteger>
   17a74:	f885 0058 	strb.w	r0, [r5, #88]	; 0x58
   17a78:	e7b1      	b.n	179de <cosem_setCharge+0x16>
    else if (index == 10)
   17a7a:	2a0a      	cmp	r2, #10
   17a7c:	d109      	bne.n	17a92 <cosem_setCharge+0xca>
        if (value->vt == DLMS_DATA_TYPE_DATETIME)
   17a7e:	781b      	ldrb	r3, [r3, #0]
   17a80:	2b19      	cmp	r3, #25
   17a82:	d11c      	bne.n	17abe <cosem_setCharge+0xf6>
            object->lastCollectionTime = *value->dateTime;
   17a84:	68a3      	ldr	r3, [r4, #8]
   17a86:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   17a8a:	355c      	adds	r5, #92	; 0x5c
   17a8c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
   17a90:	e7a5      	b.n	179de <cosem_setCharge+0x16>
    else if (index == 11)
   17a92:	2a0b      	cmp	r2, #11
   17a94:	d104      	bne.n	17aa0 <cosem_setCharge+0xd8>
        object->lastCollectionAmount = var_toInteger(value);
   17a96:	4618      	mov	r0, r3
   17a98:	f002 fd7d 	bl	1a596 <var_toInteger>
   17a9c:	66a8      	str	r0, [r5, #104]	; 0x68
   17a9e:	e79e      	b.n	179de <cosem_setCharge+0x16>
    else if (index == 12)
   17aa0:	2a0c      	cmp	r2, #12
   17aa2:	d104      	bne.n	17aae <cosem_setCharge+0xe6>
        object->totalAmountRemaining = var_toInteger(value);
   17aa4:	4618      	mov	r0, r3
   17aa6:	f002 fd76 	bl	1a596 <var_toInteger>
   17aaa:	66e8      	str	r0, [r5, #108]	; 0x6c
   17aac:	e797      	b.n	179de <cosem_setCharge+0x16>
    else if (index == 13)
   17aae:	2a0d      	cmp	r2, #13
   17ab0:	d105      	bne.n	17abe <cosem_setCharge+0xf6>
        object->proportion = (uint16_t)var_toInteger(value);
   17ab2:	4618      	mov	r0, r3
   17ab4:	f002 fd6f 	bl	1a596 <var_toInteger>
   17ab8:	f8a5 0070 	strh.w	r0, [r5, #112]	; 0x70
   17abc:	e78f      	b.n	179de <cosem_setCharge+0x16>
            ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   17abe:	f44f 7481 	mov.w	r4, #258	; 0x102
   17ac2:	e7a3      	b.n	17a0c <cosem_setCharge+0x44>

00017ac4 <cosem_setCredit>:
{
   17ac4:	b530      	push	{r4, r5, lr}
    if (index == 2)
   17ac6:	2902      	cmp	r1, #2
{
   17ac8:	b085      	sub	sp, #20
   17aca:	4605      	mov	r5, r0
   17acc:	4614      	mov	r4, r2
    if (index == 2)
   17ace:	d107      	bne.n	17ae0 <cosem_setCredit+0x1c>
        object->currentCreditAmount = var_toInteger(value);
   17ad0:	4610      	mov	r0, r2
   17ad2:	f002 fd60 	bl	1a596 <var_toInteger>
   17ad6:	6128      	str	r0, [r5, #16]
    int ret = 0;
   17ad8:	2400      	movs	r4, #0
}
   17ada:	4620      	mov	r0, r4
   17adc:	b005      	add	sp, #20
   17ade:	bd30      	pop	{r4, r5, pc}
    else if (index == 3)
   17ae0:	2903      	cmp	r1, #3
   17ae2:	d104      	bne.n	17aee <cosem_setCredit+0x2a>
        object->type = (unsigned char)var_toInteger(value);
   17ae4:	4610      	mov	r0, r2
   17ae6:	f002 fd56 	bl	1a596 <var_toInteger>
   17aea:	7528      	strb	r0, [r5, #20]
   17aec:	e7f4      	b.n	17ad8 <cosem_setCredit+0x14>
    else if (index == 4)
   17aee:	2904      	cmp	r1, #4
   17af0:	d104      	bne.n	17afc <cosem_setCredit+0x38>
        object->priority = (unsigned char)var_toInteger(value);
   17af2:	4610      	mov	r0, r2
   17af4:	f002 fd4f 	bl	1a596 <var_toInteger>
   17af8:	7568      	strb	r0, [r5, #21]
   17afa:	e7ed      	b.n	17ad8 <cosem_setCredit+0x14>
    else if (index == 5)
   17afc:	2905      	cmp	r1, #5
   17afe:	d104      	bne.n	17b0a <cosem_setCredit+0x46>
        object->warningThreshold = var_toInteger(value);
   17b00:	4610      	mov	r0, r2
   17b02:	f002 fd48 	bl	1a596 <var_toInteger>
   17b06:	61a8      	str	r0, [r5, #24]
   17b08:	e7e6      	b.n	17ad8 <cosem_setCredit+0x14>
    else if (index == 6)
   17b0a:	2906      	cmp	r1, #6
   17b0c:	d104      	bne.n	17b18 <cosem_setCredit+0x54>
        object->limit = var_toInteger(value);
   17b0e:	4610      	mov	r0, r2
   17b10:	f002 fd41 	bl	1a596 <var_toInteger>
   17b14:	61e8      	str	r0, [r5, #28]
   17b16:	e7df      	b.n	17ad8 <cosem_setCredit+0x14>
    else if (index == 7)
   17b18:	2907      	cmp	r1, #7
   17b1a:	d105      	bne.n	17b28 <cosem_setCredit+0x64>
        object->creditConfiguration = var_toInteger(value);
   17b1c:	4610      	mov	r0, r2
   17b1e:	f002 fd3a 	bl	1a596 <var_toInteger>
   17b22:	f885 0020 	strb.w	r0, [r5, #32]
   17b26:	e7d7      	b.n	17ad8 <cosem_setCredit+0x14>
    else if (index == 8)
   17b28:	2908      	cmp	r1, #8
   17b2a:	d105      	bne.n	17b38 <cosem_setCredit+0x74>
        object->status = (unsigned char)var_toInteger(value);
   17b2c:	4610      	mov	r0, r2
   17b2e:	f002 fd32 	bl	1a596 <var_toInteger>
   17b32:	f885 0021 	strb.w	r0, [r5, #33]	; 0x21
   17b36:	e7cf      	b.n	17ad8 <cosem_setCredit+0x14>
    else if (index == 9)
   17b38:	2909      	cmp	r1, #9
   17b3a:	d104      	bne.n	17b46 <cosem_setCredit+0x82>
        object->presetCreditAmount = var_toInteger(value);
   17b3c:	4610      	mov	r0, r2
   17b3e:	f002 fd2a 	bl	1a596 <var_toInteger>
   17b42:	6268      	str	r0, [r5, #36]	; 0x24
   17b44:	e7c8      	b.n	17ad8 <cosem_setCredit+0x14>
    else if (index == 10)
   17b46:	290a      	cmp	r1, #10
   17b48:	d104      	bne.n	17b54 <cosem_setCredit+0x90>
        object->creditAvailableThreshold = var_toInteger(value);
   17b4a:	4610      	mov	r0, r2
   17b4c:	f002 fd23 	bl	1a596 <var_toInteger>
   17b50:	62a8      	str	r0, [r5, #40]	; 0x28
   17b52:	e7c1      	b.n	17ad8 <cosem_setCredit+0x14>
    else if (index == 11)
   17b54:	290b      	cmp	r1, #11
   17b56:	d112      	bne.n	17b7e <cosem_setCredit+0xba>
        var_init(&tmp);
   17b58:	4668      	mov	r0, sp
   17b5a:	f002 f9c8 	bl	19eee <var_init>
        ret = dlms_changeType(value->byteArr, DLMS_DATA_TYPE_DATETIME, &tmp);
   17b5e:	68a0      	ldr	r0, [r4, #8]
   17b60:	466a      	mov	r2, sp
   17b62:	2119      	movs	r1, #25
   17b64:	f7f8 f8c1 	bl	fcea <dlms_changeType>
        if (ret == 0)
   17b68:	4604      	mov	r4, r0
   17b6a:	b920      	cbnz	r0, 17b76 <cosem_setCredit+0xb2>
            time_copy(&object->period, tmp.dateTime);
   17b6c:	9902      	ldr	r1, [sp, #8]
   17b6e:	f105 002c 	add.w	r0, r5, #44	; 0x2c
   17b72:	f7f6 f935 	bl	dde0 <time_copy>
        var_clear(&tmp);
   17b76:	4668      	mov	r0, sp
   17b78:	f002 fb15 	bl	1a1a6 <var_clear>
   17b7c:	e7ad      	b.n	17ada <cosem_setCredit+0x16>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   17b7e:	f44f 7481 	mov.w	r4, #258	; 0x102
    return ret;
   17b82:	e7aa      	b.n	17ada <cosem_setCredit+0x16>

00017b84 <cosem_setAccount>:
{
   17b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (index == 2)
   17b88:	2902      	cmp	r1, #2
{
   17b8a:	b086      	sub	sp, #24
   17b8c:	4605      	mov	r5, r0
   17b8e:	4616      	mov	r6, r2
    if (index == 2)
   17b90:	d119      	bne.n	17bc6 <cosem_setAccount+0x42>
        ret = va_getByIndex(value->Arr, 0, &it);
   17b92:	68b0      	ldr	r0, [r6, #8]
   17b94:	aa01      	add	r2, sp, #4
   17b96:	2100      	movs	r1, #0
   17b98:	f002 fb83 	bl	1a2a2 <va_getByIndex>
        if (ret != 0)
   17b9c:	4604      	mov	r4, r0
   17b9e:	b970      	cbnz	r0, 17bbe <cosem_setAccount+0x3a>
        object->paymentMode = (DLMS_ACCOUNT_PAYMENT_MODE)var_toInteger(it);
   17ba0:	9801      	ldr	r0, [sp, #4]
   17ba2:	f002 fcf8 	bl	1a596 <var_toInteger>
   17ba6:	7428      	strb	r0, [r5, #16]
        ret = va_getByIndex(value->Arr, 1, &it);
   17ba8:	68b0      	ldr	r0, [r6, #8]
   17baa:	aa01      	add	r2, sp, #4
   17bac:	2101      	movs	r1, #1
   17bae:	f002 fb78 	bl	1a2a2 <va_getByIndex>
        if (ret != 0)
   17bb2:	4604      	mov	r4, r0
   17bb4:	b918      	cbnz	r0, 17bbe <cosem_setAccount+0x3a>
        object->accountStatus = (DLMS_ACCOUNT_STATUS)var_toInteger(it);
   17bb6:	9801      	ldr	r0, [sp, #4]
   17bb8:	f002 fced 	bl	1a596 <var_toInteger>
   17bbc:	7468      	strb	r0, [r5, #17]
}
   17bbe:	4620      	mov	r0, r4
   17bc0:	b006      	add	sp, #24
   17bc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (index == 3)
   17bc6:	2903      	cmp	r1, #3
   17bc8:	d105      	bne.n	17bd6 <cosem_setAccount+0x52>
        object->currentCreditInUse = (unsigned char)var_toInteger(value);
   17bca:	4610      	mov	r0, r2
   17bcc:	f002 fce3 	bl	1a596 <var_toInteger>
   17bd0:	74a8      	strb	r0, [r5, #18]
    int ret = 0, pos;
   17bd2:	2400      	movs	r4, #0
   17bd4:	e7f3      	b.n	17bbe <cosem_setAccount+0x3a>
    else if (index == 4)
   17bd6:	2904      	cmp	r1, #4
   17bd8:	d10c      	bne.n	17bf4 <cosem_setAccount+0x70>
        if (value->bitArr == NULL || value->bitArr->size == 0)
   17bda:	6893      	ldr	r3, [r2, #8]
   17bdc:	2b00      	cmp	r3, #0
   17bde:	f000 8194 	beq.w	17f0a <cosem_setAccount+0x386>
   17be2:	88db      	ldrh	r3, [r3, #6]
   17be4:	2b00      	cmp	r3, #0
   17be6:	f000 8190 	beq.w	17f0a <cosem_setAccount+0x386>
            object->currentCreditStatus = (DLMS_ACCOUNT_CREDIT_STATUS)var_toInteger(value);
   17bea:	4610      	mov	r0, r2
   17bec:	f002 fcd3 	bl	1a596 <var_toInteger>
   17bf0:	74e8      	strb	r0, [r5, #19]
   17bf2:	e7ee      	b.n	17bd2 <cosem_setAccount+0x4e>
    else if (index == 5)
   17bf4:	2905      	cmp	r1, #5
   17bf6:	d104      	bne.n	17c02 <cosem_setAccount+0x7e>
        object->availableCredit = var_toInteger(value);
   17bf8:	4610      	mov	r0, r2
   17bfa:	f002 fccc 	bl	1a596 <var_toInteger>
   17bfe:	6168      	str	r0, [r5, #20]
   17c00:	e7e7      	b.n	17bd2 <cosem_setAccount+0x4e>
    else if (index == 6)
   17c02:	2906      	cmp	r1, #6
   17c04:	d104      	bne.n	17c10 <cosem_setAccount+0x8c>
        object->amountToClear = var_toInteger(value);
   17c06:	4610      	mov	r0, r2
   17c08:	f002 fcc5 	bl	1a596 <var_toInteger>
   17c0c:	61a8      	str	r0, [r5, #24]
   17c0e:	e7e0      	b.n	17bd2 <cosem_setAccount+0x4e>
    else if (index == 7)
   17c10:	2907      	cmp	r1, #7
   17c12:	d104      	bne.n	17c1e <cosem_setAccount+0x9a>
        object->clearanceThreshold = var_toInteger(value);
   17c14:	4610      	mov	r0, r2
   17c16:	f002 fcbe 	bl	1a596 <var_toInteger>
   17c1a:	61e8      	str	r0, [r5, #28]
   17c1c:	e7d9      	b.n	17bd2 <cosem_setAccount+0x4e>
    else if (index == 8)
   17c1e:	2908      	cmp	r1, #8
   17c20:	d104      	bne.n	17c2c <cosem_setAccount+0xa8>
        object->aggregatedDebt = var_toInteger(value);
   17c22:	4610      	mov	r0, r2
   17c24:	f002 fcb7 	bl	1a596 <var_toInteger>
   17c28:	6228      	str	r0, [r5, #32]
   17c2a:	e7d2      	b.n	17bd2 <cosem_setAccount+0x4e>
    else if (index == 9)
   17c2c:	2909      	cmp	r1, #9
   17c2e:	d127      	bne.n	17c80 <cosem_setAccount+0xfc>
        arr_clear(&object->creditReferences);
   17c30:	3524      	adds	r5, #36	; 0x24
   17c32:	4628      	mov	r0, r5
   17c34:	f7f8 fb7f 	bl	10336 <arr_clear>
        for (pos = 0; pos != value->Arr->size; ++pos)
   17c38:	2700      	movs	r7, #0
   17c3a:	68b0      	ldr	r0, [r6, #8]
   17c3c:	88c3      	ldrh	r3, [r0, #6]
   17c3e:	42bb      	cmp	r3, r7
   17c40:	d0c7      	beq.n	17bd2 <cosem_setAccount+0x4e>
            ret = va_getByIndex(value->Arr, pos, &it);
   17c42:	aa01      	add	r2, sp, #4
   17c44:	4639      	mov	r1, r7
   17c46:	f002 fb2c 	bl	1a2a2 <va_getByIndex>
            if (ret != 0)
   17c4a:	4604      	mov	r4, r0
   17c4c:	2800      	cmp	r0, #0
   17c4e:	d1b6      	bne.n	17bbe <cosem_setAccount+0x3a>
            if (it->byteArr == NULL || it->byteArr->size != 6)
   17c50:	9b01      	ldr	r3, [sp, #4]
   17c52:	689b      	ldr	r3, [r3, #8]
   17c54:	b913      	cbnz	r3, 17c5c <cosem_setAccount+0xd8>
                return DLMS_ERROR_CODE_INVALID_PARAMETER;
   17c56:	f44f 7481 	mov.w	r4, #258	; 0x102
   17c5a:	e7b0      	b.n	17bbe <cosem_setAccount+0x3a>
            if (it->byteArr == NULL || it->byteArr->size != 6)
   17c5c:	88d8      	ldrh	r0, [r3, #6]
   17c5e:	2806      	cmp	r0, #6
   17c60:	d1f9      	bne.n	17c56 <cosem_setAccount+0xd2>
            ba = (unsigned char*)gxmalloc(6);
   17c62:	f7f3 ffa7 	bl	bbb4 <malloc>
            memcpy(ba, it->byteArr->data, 6);
   17c66:	9b01      	ldr	r3, [sp, #4]
   17c68:	689b      	ldr	r3, [r3, #8]
   17c6a:	681b      	ldr	r3, [r3, #0]
   17c6c:	681a      	ldr	r2, [r3, #0]
   17c6e:	6002      	str	r2, [r0, #0]
   17c70:	889b      	ldrh	r3, [r3, #4]
   17c72:	8083      	strh	r3, [r0, #4]
            ba = (unsigned char*)gxmalloc(6);
   17c74:	4601      	mov	r1, r0
            arr_push(&object->creditReferences, ba);
   17c76:	4628      	mov	r0, r5
   17c78:	f7f8 fb48 	bl	1030c <arr_push>
        for (pos = 0; pos != value->Arr->size; ++pos)
   17c7c:	3701      	adds	r7, #1
   17c7e:	e7dc      	b.n	17c3a <cosem_setAccount+0xb6>
    else if (index == 10)
   17c80:	290a      	cmp	r1, #10
   17c82:	d125      	bne.n	17cd0 <cosem_setAccount+0x14c>
        arr_clear(&object->chargeReferences);
   17c84:	3530      	adds	r5, #48	; 0x30
   17c86:	4628      	mov	r0, r5
   17c88:	f7f8 fb55 	bl	10336 <arr_clear>
        for (pos = 0; pos != value->Arr->size; ++pos)
   17c8c:	2700      	movs	r7, #0
   17c8e:	68b0      	ldr	r0, [r6, #8]
   17c90:	88c3      	ldrh	r3, [r0, #6]
   17c92:	42bb      	cmp	r3, r7
   17c94:	d09d      	beq.n	17bd2 <cosem_setAccount+0x4e>
            ret = va_getByIndex(value->Arr, pos, &it);
   17c96:	aa01      	add	r2, sp, #4
   17c98:	4639      	mov	r1, r7
   17c9a:	f002 fb02 	bl	1a2a2 <va_getByIndex>
            if (ret != 0)
   17c9e:	4604      	mov	r4, r0
   17ca0:	2800      	cmp	r0, #0
   17ca2:	d18c      	bne.n	17bbe <cosem_setAccount+0x3a>
            if (it->byteArr == NULL || it->byteArr->size != 6)
   17ca4:	9b01      	ldr	r3, [sp, #4]
   17ca6:	689b      	ldr	r3, [r3, #8]
   17ca8:	2b00      	cmp	r3, #0
   17caa:	d0d4      	beq.n	17c56 <cosem_setAccount+0xd2>
   17cac:	88d8      	ldrh	r0, [r3, #6]
   17cae:	2806      	cmp	r0, #6
   17cb0:	d1d1      	bne.n	17c56 <cosem_setAccount+0xd2>
            ba = (unsigned char*)gxmalloc(6);
   17cb2:	f7f3 ff7f 	bl	bbb4 <malloc>
            memcpy(ba, it->byteArr->data, 6);
   17cb6:	9b01      	ldr	r3, [sp, #4]
   17cb8:	689b      	ldr	r3, [r3, #8]
   17cba:	681b      	ldr	r3, [r3, #0]
   17cbc:	681a      	ldr	r2, [r3, #0]
   17cbe:	6002      	str	r2, [r0, #0]
   17cc0:	889b      	ldrh	r3, [r3, #4]
   17cc2:	8083      	strh	r3, [r0, #4]
            ba = (unsigned char*)gxmalloc(6);
   17cc4:	4601      	mov	r1, r0
            arr_push(&object->chargeReferences, ba);
   17cc6:	4628      	mov	r0, r5
   17cc8:	f7f8 fb20 	bl	1030c <arr_push>
        for (pos = 0; pos != value->Arr->size; ++pos)
   17ccc:	3701      	adds	r7, #1
   17cce:	e7de      	b.n	17c8e <cosem_setAccount+0x10a>
    else if (index == 11)
   17cd0:	290b      	cmp	r1, #11
   17cd2:	d152      	bne.n	17d7a <cosem_setAccount+0x1f6>
        obj_clearCreditChargeConfigurations(&object->creditChargeConfigurations);
   17cd4:	353c      	adds	r5, #60	; 0x3c
   17cd6:	4628      	mov	r0, r5
   17cd8:	f7fb fe5d 	bl	13996 <obj_clearCreditChargeConfigurations>
        ccc = NULL;
   17cdc:	2700      	movs	r7, #0
        for (pos = 0; pos != value->Arr->size; ++pos)
   17cde:	46b8      	mov	r8, r7
   17ce0:	68b0      	ldr	r0, [r6, #8]
   17ce2:	88c3      	ldrh	r3, [r0, #6]
   17ce4:	4543      	cmp	r3, r8
   17ce6:	f43f af74 	beq.w	17bd2 <cosem_setAccount+0x4e>
            ret = va_getByIndex(value->Arr, pos, &it);
   17cea:	aa01      	add	r2, sp, #4
   17cec:	4641      	mov	r1, r8
   17cee:	f002 fad8 	bl	1a2a2 <va_getByIndex>
            if (ret != 0)
   17cf2:	4604      	mov	r4, r0
   17cf4:	2800      	cmp	r0, #0
   17cf6:	f040 810a 	bne.w	17f0e <cosem_setAccount+0x38a>
            ccc = (gxCreditChargeConfiguration*)gxmalloc(sizeof(gxCreditChargeConfiguration));
   17cfa:	200d      	movs	r0, #13
   17cfc:	f7f3 ff5a 	bl	bbb4 <malloc>
            if (ccc == NULL)
   17d00:	4607      	mov	r7, r0
   17d02:	2800      	cmp	r0, #0
   17d04:	f000 810a 	beq.w	17f1c <cosem_setAccount+0x398>
            ret = va_getByIndex(it->Arr, 0, &tmp2);
   17d08:	9b01      	ldr	r3, [sp, #4]
   17d0a:	4621      	mov	r1, r4
   17d0c:	6898      	ldr	r0, [r3, #8]
   17d0e:	aa02      	add	r2, sp, #8
   17d10:	f002 fac7 	bl	1a2a2 <va_getByIndex>
            if (ret != 0)
   17d14:	4604      	mov	r4, r0
   17d16:	2800      	cmp	r0, #0
   17d18:	f040 80fc 	bne.w	17f14 <cosem_setAccount+0x390>
            memcpy(ccc->creditReference, tmp2->byteArr->data, tmp2->byteArr->size);
   17d1c:	9b02      	ldr	r3, [sp, #8]
   17d1e:	6899      	ldr	r1, [r3, #8]
   17d20:	4638      	mov	r0, r7
   17d22:	88ca      	ldrh	r2, [r1, #6]
   17d24:	6809      	ldr	r1, [r1, #0]
   17d26:	230d      	movs	r3, #13
   17d28:	f004 f9e8 	bl	1c0fc <__memcpy_chk>
            ret = va_getByIndex(it->Arr, 1, &tmp2);
   17d2c:	9b01      	ldr	r3, [sp, #4]
   17d2e:	aa02      	add	r2, sp, #8
   17d30:	6898      	ldr	r0, [r3, #8]
   17d32:	2101      	movs	r1, #1
   17d34:	f002 fab5 	bl	1a2a2 <va_getByIndex>
            if (ret != 0)
   17d38:	4604      	mov	r4, r0
   17d3a:	2800      	cmp	r0, #0
   17d3c:	f040 80ea 	bne.w	17f14 <cosem_setAccount+0x390>
            memcpy(ccc->chargeReference, tmp2->byteArr->data, tmp2->byteArr->size);
   17d40:	9b02      	ldr	r3, [sp, #8]
   17d42:	6899      	ldr	r1, [r3, #8]
   17d44:	1db8      	adds	r0, r7, #6
   17d46:	88ca      	ldrh	r2, [r1, #6]
   17d48:	6809      	ldr	r1, [r1, #0]
   17d4a:	2307      	movs	r3, #7
   17d4c:	f004 f9d6 	bl	1c0fc <__memcpy_chk>
            ret = va_getByIndex(it->Arr, 2, &tmp2);
   17d50:	9b01      	ldr	r3, [sp, #4]
   17d52:	aa02      	add	r2, sp, #8
   17d54:	6898      	ldr	r0, [r3, #8]
   17d56:	2102      	movs	r1, #2
   17d58:	f002 faa3 	bl	1a2a2 <va_getByIndex>
            if (ret != 0)
   17d5c:	4604      	mov	r4, r0
   17d5e:	2800      	cmp	r0, #0
   17d60:	f040 80d8 	bne.w	17f14 <cosem_setAccount+0x390>
            ccc->collectionConfiguration = (DLMS_CREDIT_COLLECTION_CONFIGURATION)var_toInteger(tmp2);
   17d64:	9802      	ldr	r0, [sp, #8]
   17d66:	f002 fc16 	bl	1a596 <var_toInteger>
            arr_push(&object->creditChargeConfigurations, ccc);
   17d6a:	4639      	mov	r1, r7
            ccc->collectionConfiguration = (DLMS_CREDIT_COLLECTION_CONFIGURATION)var_toInteger(tmp2);
   17d6c:	7338      	strb	r0, [r7, #12]
            arr_push(&object->creditChargeConfigurations, ccc);
   17d6e:	4628      	mov	r0, r5
   17d70:	f7f8 facc 	bl	1030c <arr_push>
        for (pos = 0; pos != value->Arr->size; ++pos)
   17d74:	f108 0801 	add.w	r8, r8, #1
   17d78:	e7b2      	b.n	17ce0 <cosem_setAccount+0x15c>
    else if (index == 12)
   17d7a:	290c      	cmp	r1, #12
   17d7c:	d144      	bne.n	17e08 <cosem_setAccount+0x284>
        obj_clearTokenGatewayConfigurations(&object->tokenGatewayConfigurations);
   17d7e:	3548      	adds	r5, #72	; 0x48
   17d80:	4628      	mov	r0, r5
   17d82:	f7fb fe28 	bl	139d6 <obj_clearTokenGatewayConfigurations>
        for (pos = 0; pos != value->Arr->size; ++pos)
   17d86:	f04f 0800 	mov.w	r8, #0
   17d8a:	68b0      	ldr	r0, [r6, #8]
   17d8c:	88c3      	ldrh	r3, [r0, #6]
   17d8e:	4543      	cmp	r3, r8
   17d90:	f43f af1f 	beq.w	17bd2 <cosem_setAccount+0x4e>
            if ((ret = va_getByIndex(value->Arr, pos, &it)) != 0)
   17d94:	aa01      	add	r2, sp, #4
   17d96:	4641      	mov	r1, r8
   17d98:	f002 fa83 	bl	1a2a2 <va_getByIndex>
   17d9c:	4604      	mov	r4, r0
   17d9e:	2800      	cmp	r0, #0
   17da0:	f47f af0d 	bne.w	17bbe <cosem_setAccount+0x3a>
            gwc = (gxTokenGatewayConfiguration*)gxmalloc(sizeof(gxTokenGatewayConfiguration));
   17da4:	2007      	movs	r0, #7
   17da6:	f7f3 ff05 	bl	bbb4 <malloc>
            if (gwc == NULL)
   17daa:	4607      	mov	r7, r0
   17dac:	2800      	cmp	r0, #0
   17dae:	f000 80b5 	beq.w	17f1c <cosem_setAccount+0x398>
            if ((ret = va_getByIndex(it->Arr, 0, &tmp2)) != 0)
   17db2:	9b01      	ldr	r3, [sp, #4]
            memset(gwc->creditReference, 0, 6);
   17db4:	6004      	str	r4, [r0, #0]
   17db6:	8084      	strh	r4, [r0, #4]
            if ((ret = va_getByIndex(it->Arr, 0, &tmp2)) != 0)
   17db8:	4621      	mov	r1, r4
   17dba:	6898      	ldr	r0, [r3, #8]
   17dbc:	aa02      	add	r2, sp, #8
   17dbe:	f002 fa70 	bl	1a2a2 <va_getByIndex>
   17dc2:	4604      	mov	r4, r0
   17dc4:	2800      	cmp	r0, #0
   17dc6:	f47f aefa 	bne.w	17bbe <cosem_setAccount+0x3a>
            if (tmp2->byteArr->size == 6)
   17dca:	9b02      	ldr	r3, [sp, #8]
   17dcc:	689b      	ldr	r3, [r3, #8]
   17dce:	88da      	ldrh	r2, [r3, #6]
   17dd0:	2a06      	cmp	r2, #6
   17dd2:	d104      	bne.n	17dde <cosem_setAccount+0x25a>
                memcpy(gwc->creditReference, tmp2->byteArr->data, tmp2->byteArr->size);
   17dd4:	681b      	ldr	r3, [r3, #0]
   17dd6:	681a      	ldr	r2, [r3, #0]
   17dd8:	603a      	str	r2, [r7, #0]
   17dda:	889b      	ldrh	r3, [r3, #4]
   17ddc:	80bb      	strh	r3, [r7, #4]
            if ((ret = va_getByIndex(it->Arr, 1, &tmp2)) != 0)
   17dde:	9b01      	ldr	r3, [sp, #4]
   17de0:	aa02      	add	r2, sp, #8
   17de2:	6898      	ldr	r0, [r3, #8]
   17de4:	2101      	movs	r1, #1
   17de6:	f002 fa5c 	bl	1a2a2 <va_getByIndex>
   17dea:	4604      	mov	r4, r0
   17dec:	2800      	cmp	r0, #0
   17dee:	f040 8091 	bne.w	17f14 <cosem_setAccount+0x390>
            gwc->tokenProportion = (unsigned char)var_toInteger(tmp2);
   17df2:	9802      	ldr	r0, [sp, #8]
   17df4:	f002 fbcf 	bl	1a596 <var_toInteger>
            arr_push(&object->tokenGatewayConfigurations, gwc);
   17df8:	4639      	mov	r1, r7
            gwc->tokenProportion = (unsigned char)var_toInteger(tmp2);
   17dfa:	71b8      	strb	r0, [r7, #6]
            arr_push(&object->tokenGatewayConfigurations, gwc);
   17dfc:	4628      	mov	r0, r5
   17dfe:	f7f8 fa85 	bl	1030c <arr_push>
        for (pos = 0; pos != value->Arr->size; ++pos)
   17e02:	f108 0801 	add.w	r8, r8, #1
   17e06:	e7c0      	b.n	17d8a <cosem_setAccount+0x206>
    else if (index == 13)
   17e08:	290d      	cmp	r1, #13
   17e0a:	d112      	bne.n	17e32 <cosem_setAccount+0x2ae>
        var_init(&tmp);
   17e0c:	a802      	add	r0, sp, #8
   17e0e:	f002 f86e 	bl	19eee <var_init>
        ret = dlms_changeType(value->byteArr, DLMS_DATA_TYPE_DATETIME, &tmp);
   17e12:	68b0      	ldr	r0, [r6, #8]
   17e14:	aa02      	add	r2, sp, #8
   17e16:	2119      	movs	r1, #25
   17e18:	f7f7 ff67 	bl	fcea <dlms_changeType>
        if (ret == 0)
   17e1c:	4604      	mov	r4, r0
   17e1e:	b920      	cbnz	r0, 17e2a <cosem_setAccount+0x2a6>
            time_copy(&object->accountActivationTime, tmp.dateTime);
   17e20:	9904      	ldr	r1, [sp, #16]
   17e22:	f105 0054 	add.w	r0, r5, #84	; 0x54
            time_copy(&object->accountClosureTime, tmp.dateTime);
   17e26:	f7f5 ffdb 	bl	dde0 <time_copy>
        var_clear(&tmp);
   17e2a:	a802      	add	r0, sp, #8
   17e2c:	f002 f9bb 	bl	1a1a6 <var_clear>
   17e30:	e6c5      	b.n	17bbe <cosem_setAccount+0x3a>
    else if (index == 14)
   17e32:	290e      	cmp	r1, #14
   17e34:	d10e      	bne.n	17e54 <cosem_setAccount+0x2d0>
        var_init(&tmp);
   17e36:	a802      	add	r0, sp, #8
   17e38:	f002 f859 	bl	19eee <var_init>
        ret = dlms_changeType(value->byteArr, DLMS_DATA_TYPE_DATETIME, &tmp);
   17e3c:	68b0      	ldr	r0, [r6, #8]
   17e3e:	aa02      	add	r2, sp, #8
   17e40:	2119      	movs	r1, #25
   17e42:	f7f7 ff52 	bl	fcea <dlms_changeType>
        if (ret == 0)
   17e46:	4604      	mov	r4, r0
   17e48:	2800      	cmp	r0, #0
   17e4a:	d1ee      	bne.n	17e2a <cosem_setAccount+0x2a6>
            time_copy(&object->accountClosureTime, tmp.dateTime);
   17e4c:	9904      	ldr	r1, [sp, #16]
   17e4e:	f105 0060 	add.w	r0, r5, #96	; 0x60
   17e52:	e7e8      	b.n	17e26 <cosem_setAccount+0x2a2>
    else if (index == 15)
   17e54:	290f      	cmp	r1, #15
   17e56:	d138      	bne.n	17eca <cosem_setAccount+0x346>
        bb_clear(&object->currency.name);
   17e58:	f100 086c 	add.w	r8, r0, #108	; 0x6c
   17e5c:	4640      	mov	r0, r8
   17e5e:	f7f5 f884 	bl	cf6a <bb_clear>
        ret = va_getByIndex(value->Arr, 0, &it);
   17e62:	68b0      	ldr	r0, [r6, #8]
   17e64:	aa01      	add	r2, sp, #4
   17e66:	2100      	movs	r1, #0
   17e68:	f002 fa1b 	bl	1a2a2 <va_getByIndex>
        if (ret != 0)
   17e6c:	4604      	mov	r4, r0
   17e6e:	2800      	cmp	r0, #0
   17e70:	f47f aea5 	bne.w	17bbe <cosem_setAccount+0x3a>
        if (it->strVal != NULL && it->strVal->size != 0)
   17e74:	9b01      	ldr	r3, [sp, #4]
   17e76:	689f      	ldr	r7, [r3, #8]
   17e78:	b157      	cbz	r7, 17e90 <cosem_setAccount+0x30c>
   17e7a:	88fb      	ldrh	r3, [r7, #6]
   17e7c:	b143      	cbz	r3, 17e90 <cosem_setAccount+0x30c>
            bb_set2(&object->currency.name, it->strVal, 0, bb_size(it->strVal));
   17e7e:	4638      	mov	r0, r7
   17e80:	f7f4 fead 	bl	cbde <bb_size>
   17e84:	4622      	mov	r2, r4
   17e86:	4603      	mov	r3, r0
   17e88:	4639      	mov	r1, r7
   17e8a:	4640      	mov	r0, r8
   17e8c:	f7f5 f828 	bl	cee0 <bb_set2>
        ret = va_getByIndex(value->Arr, 1, &it);
   17e90:	68b0      	ldr	r0, [r6, #8]
   17e92:	aa01      	add	r2, sp, #4
   17e94:	2101      	movs	r1, #1
   17e96:	f002 fa04 	bl	1a2a2 <va_getByIndex>
        if (ret != 0)
   17e9a:	4604      	mov	r4, r0
   17e9c:	2800      	cmp	r0, #0
   17e9e:	f47f ae8e 	bne.w	17bbe <cosem_setAccount+0x3a>
        object->currency.scale = (char)var_toInteger(it);
   17ea2:	9801      	ldr	r0, [sp, #4]
   17ea4:	f002 fb77 	bl	1a596 <var_toInteger>
   17ea8:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
        ret = va_getByIndex(value->Arr, 2, &it);
   17eac:	68b0      	ldr	r0, [r6, #8]
   17eae:	aa01      	add	r2, sp, #4
   17eb0:	2102      	movs	r1, #2
   17eb2:	f002 f9f6 	bl	1a2a2 <va_getByIndex>
        if (ret != 0)
   17eb6:	4604      	mov	r4, r0
   17eb8:	2800      	cmp	r0, #0
   17eba:	f47f ae80 	bne.w	17bbe <cosem_setAccount+0x3a>
        object->currency.unit = (DLMS_CURRENCY)var_toInteger(it);
   17ebe:	9801      	ldr	r0, [sp, #4]
   17ec0:	f002 fb69 	bl	1a596 <var_toInteger>
   17ec4:	f885 0079 	strb.w	r0, [r5, #121]	; 0x79
   17ec8:	e679      	b.n	17bbe <cosem_setAccount+0x3a>
    else if (index == 16)
   17eca:	2910      	cmp	r1, #16
   17ecc:	d104      	bne.n	17ed8 <cosem_setAccount+0x354>
        object->lowCreditThreshold = var_toInteger(value);
   17ece:	4610      	mov	r0, r2
   17ed0:	f002 fb61 	bl	1a596 <var_toInteger>
   17ed4:	67e8      	str	r0, [r5, #124]	; 0x7c
   17ed6:	e67c      	b.n	17bd2 <cosem_setAccount+0x4e>
    else if (index == 17)
   17ed8:	2911      	cmp	r1, #17
   17eda:	d105      	bne.n	17ee8 <cosem_setAccount+0x364>
        object->nextCreditAvailableThreshold = var_toInteger(value);
   17edc:	4610      	mov	r0, r2
   17ede:	f002 fb5a 	bl	1a596 <var_toInteger>
   17ee2:	f8c5 0080 	str.w	r0, [r5, #128]	; 0x80
   17ee6:	e674      	b.n	17bd2 <cosem_setAccount+0x4e>
    else if (index == 18)
   17ee8:	2912      	cmp	r1, #18
   17eea:	d105      	bne.n	17ef8 <cosem_setAccount+0x374>
        object->maxProvision = (uint16_t)var_toInteger(value);
   17eec:	4610      	mov	r0, r2
   17eee:	f002 fb52 	bl	1a596 <var_toInteger>
   17ef2:	f8a5 0084 	strh.w	r0, [r5, #132]	; 0x84
   17ef6:	e66c      	b.n	17bd2 <cosem_setAccount+0x4e>
    else if (index == 19)
   17ef8:	2913      	cmp	r1, #19
   17efa:	f47f aeac 	bne.w	17c56 <cosem_setAccount+0xd2>
        object->maxProvisionPeriod = var_toInteger(value);
   17efe:	4610      	mov	r0, r2
   17f00:	f002 fb49 	bl	1a596 <var_toInteger>
   17f04:	f8c5 0088 	str.w	r0, [r5, #136]	; 0x88
   17f08:	e663      	b.n	17bd2 <cosem_setAccount+0x4e>
            return DLMS_ERROR_CODE_READ_WRITE_DENIED;
   17f0a:	2403      	movs	r4, #3
   17f0c:	e657      	b.n	17bbe <cosem_setAccount+0x3a>
        if (ret != 0 && ccc != NULL)
   17f0e:	2f00      	cmp	r7, #0
   17f10:	f43f ae55 	beq.w	17bbe <cosem_setAccount+0x3a>
            gxfree(gwc);
   17f14:	4638      	mov	r0, r7
   17f16:	f7f3 fe55 	bl	bbc4 <free>
   17f1a:	e650      	b.n	17bbe <cosem_setAccount+0x3a>
                ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   17f1c:	f44f 7482 	mov.w	r4, #260	; 0x104
        if (ret != 0 && gwc != NULL)
   17f20:	e64d      	b.n	17bbe <cosem_setAccount+0x3a>

00017f22 <cosem_setImageTransfer>:
    if (index == 2)
   17f22:	2902      	cmp	r1, #2
{
   17f24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17f28:	4604      	mov	r4, r0
   17f2a:	4617      	mov	r7, r2
    if (index == 2)
   17f2c:	d108      	bne.n	17f40 <cosem_setImageTransfer+0x1e>
        object->imageBlockSize = var_toInteger(value);
   17f2e:	4610      	mov	r0, r2
   17f30:	f002 fb31 	bl	1a596 <var_toInteger>
   17f34:	6120      	str	r0, [r4, #16]
    int pos, ret = 0;
   17f36:	2400      	movs	r4, #0
}
   17f38:	4620      	mov	r0, r4
   17f3a:	b003      	add	sp, #12
   17f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if (index == 3)
   17f40:	2903      	cmp	r1, #3
   17f42:	d10c      	bne.n	17f5e <cosem_setImageTransfer+0x3c>
        ba_clear(&object->imageTransferredBlocksStatus);
   17f44:	3414      	adds	r4, #20
   17f46:	4620      	mov	r0, r4
   17f48:	f7f4 fdb5 	bl	cab6 <ba_clear>
        if (value->bitArr != NULL)
   17f4c:	68bb      	ldr	r3, [r7, #8]
   17f4e:	2b00      	cmp	r3, #0
   17f50:	d0f1      	beq.n	17f36 <cosem_setImageTransfer+0x14>
            ba_copy(&object->imageTransferredBlocksStatus, value->bitArr->data, (uint16_t)value->bitArr->size);
   17f52:	88da      	ldrh	r2, [r3, #6]
   17f54:	6819      	ldr	r1, [r3, #0]
   17f56:	4620      	mov	r0, r4
   17f58:	f7f4 fdb8 	bl	cacc <ba_copy>
   17f5c:	e7eb      	b.n	17f36 <cosem_setImageTransfer+0x14>
    else if (index == 4)
   17f5e:	2904      	cmp	r1, #4
   17f60:	d104      	bne.n	17f6c <cosem_setImageTransfer+0x4a>
        object->imageFirstNotTransferredBlockNumber = var_toInteger(value);
   17f62:	4610      	mov	r0, r2
   17f64:	f002 fb17 	bl	1a596 <var_toInteger>
   17f68:	61e0      	str	r0, [r4, #28]
   17f6a:	e7e4      	b.n	17f36 <cosem_setImageTransfer+0x14>
    else if (index == 5)
   17f6c:	2905      	cmp	r1, #5
   17f6e:	d108      	bne.n	17f82 <cosem_setImageTransfer+0x60>
        object->imageTransferEnabled = var_toInteger(value) == 0 ? 0 : 1;
   17f70:	4610      	mov	r0, r2
   17f72:	f002 fb10 	bl	1a596 <var_toInteger>
   17f76:	3800      	subs	r0, #0
   17f78:	bf18      	it	ne
   17f7a:	2001      	movne	r0, #1
   17f7c:	f884 0020 	strb.w	r0, [r4, #32]
   17f80:	e7d9      	b.n	17f36 <cosem_setImageTransfer+0x14>
    else if (index == 6)
   17f82:	2906      	cmp	r1, #6
   17f84:	d105      	bne.n	17f92 <cosem_setImageTransfer+0x70>
        object->imageTransferStatus = (DLMS_IMAGE_TRANSFER_STATUS)var_toInteger(value);
   17f86:	4610      	mov	r0, r2
   17f88:	f002 fb05 	bl	1a596 <var_toInteger>
   17f8c:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
   17f90:	e7d1      	b.n	17f36 <cosem_setImageTransfer+0x14>
    else if (index == 7)
   17f92:	2907      	cmp	r1, #7
   17f94:	d161      	bne.n	1805a <cosem_setImageTransfer+0x138>
        arr_clear(&object->imageActivateInfo);
   17f96:	f100 0624 	add.w	r6, r0, #36	; 0x24
   17f9a:	4630      	mov	r0, r6
   17f9c:	f7f8 f9cb 	bl	10336 <arr_clear>
        if (value->Arr != NULL)
   17fa0:	68bb      	ldr	r3, [r7, #8]
   17fa2:	2b00      	cmp	r3, #0
   17fa4:	d0c7      	beq.n	17f36 <cosem_setImageTransfer+0x14>
            item = NULL;
   17fa6:	2500      	movs	r5, #0
            for (pos = 0; pos != value->Arr->size; ++pos)
   17fa8:	46a9      	mov	r9, r5
   17faa:	e051      	b.n	18050 <cosem_setImageTransfer+0x12e>
                ret = va_getByIndex(value->Arr, pos, &it);
   17fac:	466a      	mov	r2, sp
   17fae:	4649      	mov	r1, r9
   17fb0:	f002 f977 	bl	1a2a2 <va_getByIndex>
                if (ret != 0)
   17fb4:	4604      	mov	r4, r0
   17fb6:	2800      	cmp	r0, #0
   17fb8:	d155      	bne.n	18066 <cosem_setImageTransfer+0x144>
                item = (gxImageActivateInfo*)gxmalloc(sizeof(gxImageActivateInfo));
   17fba:	201c      	movs	r0, #28
   17fbc:	f7f3 fdfa 	bl	bbb4 <malloc>
                if (item == NULL)
   17fc0:	4605      	mov	r5, r0
   17fc2:	2800      	cmp	r0, #0
   17fc4:	d04c      	beq.n	18060 <cosem_setImageTransfer+0x13e>
                BYTE_BUFFER_INIT(&item->identification);
   17fc6:	f100 0b04 	add.w	fp, r0, #4
   17fca:	4658      	mov	r0, fp
                BYTE_BUFFER_INIT(&item->signature);
   17fcc:	f105 0a10 	add.w	sl, r5, #16
                BYTE_BUFFER_INIT(&item->identification);
   17fd0:	f7f4 fe08 	bl	cbe4 <bb_init>
                BYTE_BUFFER_INIT(&item->signature);
   17fd4:	4650      	mov	r0, sl
   17fd6:	f7f4 fe05 	bl	cbe4 <bb_init>
                ret = va_getByIndex(it->Arr, 0, &tmp);
   17fda:	9b00      	ldr	r3, [sp, #0]
   17fdc:	4621      	mov	r1, r4
   17fde:	6898      	ldr	r0, [r3, #8]
   17fe0:	aa01      	add	r2, sp, #4
   17fe2:	f002 f95e 	bl	1a2a2 <va_getByIndex>
                if (ret != 0)
   17fe6:	4604      	mov	r4, r0
   17fe8:	2800      	cmp	r0, #0
   17fea:	d13f      	bne.n	1806c <cosem_setImageTransfer+0x14a>
                item->size = var_toInteger(tmp);
   17fec:	9801      	ldr	r0, [sp, #4]
   17fee:	f002 fad2 	bl	1a596 <var_toInteger>
                ret = va_getByIndex(it->Arr, 1, &tmp);
   17ff2:	9b00      	ldr	r3, [sp, #0]
                item->size = var_toInteger(tmp);
   17ff4:	6028      	str	r0, [r5, #0]
                ret = va_getByIndex(it->Arr, 1, &tmp);
   17ff6:	aa01      	add	r2, sp, #4
   17ff8:	6898      	ldr	r0, [r3, #8]
   17ffa:	2101      	movs	r1, #1
   17ffc:	f002 f951 	bl	1a2a2 <va_getByIndex>
                if (ret != 0)
   18000:	4604      	mov	r4, r0
   18002:	bb98      	cbnz	r0, 1806c <cosem_setImageTransfer+0x14a>
                bb_set2(&item->identification, tmp->byteArr, 0, bb_size(tmp->byteArr));
   18004:	9b01      	ldr	r3, [sp, #4]
   18006:	f8d3 8008 	ldr.w	r8, [r3, #8]
   1800a:	4640      	mov	r0, r8
   1800c:	f7f4 fde7 	bl	cbde <bb_size>
   18010:	4622      	mov	r2, r4
   18012:	4603      	mov	r3, r0
   18014:	4641      	mov	r1, r8
   18016:	4658      	mov	r0, fp
   18018:	f7f4 ff62 	bl	cee0 <bb_set2>
                ret = va_getByIndex(it->Arr, 2, &tmp);
   1801c:	9b00      	ldr	r3, [sp, #0]
   1801e:	aa01      	add	r2, sp, #4
   18020:	6898      	ldr	r0, [r3, #8]
   18022:	2102      	movs	r1, #2
   18024:	f002 f93d 	bl	1a2a2 <va_getByIndex>
                if (ret != 0)
   18028:	4604      	mov	r4, r0
   1802a:	b9f8      	cbnz	r0, 1806c <cosem_setImageTransfer+0x14a>
                bb_set2(&item->signature, tmp->byteArr, 0, bb_size(tmp->byteArr));
   1802c:	9b01      	ldr	r3, [sp, #4]
   1802e:	f8d3 8008 	ldr.w	r8, [r3, #8]
   18032:	4640      	mov	r0, r8
   18034:	f7f4 fdd3 	bl	cbde <bb_size>
   18038:	4622      	mov	r2, r4
   1803a:	4603      	mov	r3, r0
   1803c:	4641      	mov	r1, r8
   1803e:	4650      	mov	r0, sl
   18040:	f7f4 ff4e 	bl	cee0 <bb_set2>
                arr_push(&object->imageActivateInfo, item);
   18044:	4629      	mov	r1, r5
   18046:	4630      	mov	r0, r6
   18048:	f7f8 f960 	bl	1030c <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   1804c:	f109 0901 	add.w	r9, r9, #1
   18050:	68b8      	ldr	r0, [r7, #8]
   18052:	88c3      	ldrh	r3, [r0, #6]
   18054:	454b      	cmp	r3, r9
   18056:	d1a9      	bne.n	17fac <cosem_setImageTransfer+0x8a>
   18058:	e76d      	b.n	17f36 <cosem_setImageTransfer+0x14>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   1805a:	f44f 7481 	mov.w	r4, #258	; 0x102
   1805e:	e76b      	b.n	17f38 <cosem_setImageTransfer+0x16>
                    ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   18060:	f44f 7482 	mov.w	r4, #260	; 0x104
    return ret;
   18064:	e768      	b.n	17f38 <cosem_setImageTransfer+0x16>
            if (ret != 0 && item != NULL)
   18066:	2d00      	cmp	r5, #0
   18068:	f43f af66 	beq.w	17f38 <cosem_setImageTransfer+0x16>
                gxfree(item);
   1806c:	4628      	mov	r0, r5
   1806e:	f7f3 fda9 	bl	bbc4 <free>
   18072:	e761      	b.n	17f38 <cosem_setImageTransfer+0x16>

00018074 <setCaptureObjects>:
{
   18074:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18078:	4681      	mov	r9, r0
   1807a:	b085      	sub	sp, #20
    if ((ret = obj_clearProfileGenericCaptureObjects(objects)) != DLMS_ERROR_CODE_OK)
   1807c:	4608      	mov	r0, r1
{
   1807e:	460d      	mov	r5, r1
   18080:	4617      	mov	r7, r2
    if ((ret = obj_clearProfileGenericCaptureObjects(objects)) != DLMS_ERROR_CODE_OK)
   18082:	f7fb fcdd 	bl	13a40 <obj_clearProfileGenericCaptureObjects>
   18086:	4604      	mov	r4, r0
   18088:	bb20      	cbnz	r0, 180d4 <setCaptureObjects+0x60>
    arr_capacity(objects, value->Arr->size);
   1808a:	68bb      	ldr	r3, [r7, #8]
   1808c:	4628      	mov	r0, r5
   1808e:	88d9      	ldrh	r1, [r3, #6]
   18090:	f7f8 f916 	bl	102c0 <arr_capacity>
    if (value->Arr != NULL)
   18094:	68bb      	ldr	r3, [r7, #8]
   18096:	2b00      	cmp	r3, #0
   18098:	f040 8081 	bne.w	1819e <setCaptureObjects+0x12a>
    if ((ret = obj_clearProfileGenericCaptureObjects(objects)) != DLMS_ERROR_CODE_OK)
   1809c:	2400      	movs	r4, #0
    arr_capacity(objects, objects->size);
   1809e:	88e9      	ldrh	r1, [r5, #6]
   180a0:	4628      	mov	r0, r5
   180a2:	f7f8 f90d 	bl	102c0 <arr_capacity>
    return ret;
   180a6:	e015      	b.n	180d4 <setCaptureObjects+0x60>
                ret = cosem_createObject(type, &obj);
   180a8:	a901      	add	r1, sp, #4
   180aa:	4630      	mov	r0, r6
   180ac:	f7e9 fed8 	bl	1e60 <cosem_createObject>
                if (ret != DLMS_ERROR_CODE_OK)
   180b0:	4604      	mov	r4, r0
   180b2:	b978      	cbnz	r0, 180d4 <setCaptureObjects+0x60>
                ret = cosem_setLogicalName(obj, tmp2->byteArr->data);
   180b4:	9b03      	ldr	r3, [sp, #12]
   180b6:	9801      	ldr	r0, [sp, #4]
   180b8:	689b      	ldr	r3, [r3, #8]
   180ba:	6819      	ldr	r1, [r3, #0]
   180bc:	f7f5 fb3b 	bl	d736 <cosem_setLogicalName>
                if (ret != DLMS_ERROR_CODE_OK)
   180c0:	4604      	mov	r4, r0
   180c2:	b938      	cbnz	r0, 180d4 <setCaptureObjects+0x60>
                ret = oa_push(&settings->releasedObjects, obj);
   180c4:	9901      	ldr	r1, [sp, #4]
   180c6:	f109 00e4 	add.w	r0, r9, #228	; 0xe4
   180ca:	f001 fe47 	bl	19d5c <oa_push>
                if (ret != DLMS_ERROR_CODE_OK)
   180ce:	4604      	mov	r4, r0
   180d0:	2800      	cmp	r0, #0
   180d2:	d05b      	beq.n	1818c <setCaptureObjects+0x118>
}
   180d4:	4620      	mov	r0, r4
   180d6:	b005      	add	sp, #20
   180d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            ret = va_getByIndex(tmp->Arr, 2, &tmp2);
   180dc:	9b02      	ldr	r3, [sp, #8]
   180de:	aa03      	add	r2, sp, #12
   180e0:	6898      	ldr	r0, [r3, #8]
   180e2:	2102      	movs	r1, #2
   180e4:	f002 f8dd 	bl	1a2a2 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   180e8:	4604      	mov	r4, r0
   180ea:	2800      	cmp	r0, #0
   180ec:	d1f2      	bne.n	180d4 <setCaptureObjects+0x60>
            co->attributeIndex = (unsigned char)var_toInteger(tmp2);
   180ee:	9803      	ldr	r0, [sp, #12]
   180f0:	f002 fa51 	bl	1a596 <var_toInteger>
            ret = va_getByIndex(tmp->Arr, 3, &tmp2);
   180f4:	9b02      	ldr	r3, [sp, #8]
            co->attributeIndex = (unsigned char)var_toInteger(tmp2);
   180f6:	7030      	strb	r0, [r6, #0]
            ret = va_getByIndex(tmp->Arr, 3, &tmp2);
   180f8:	6898      	ldr	r0, [r3, #8]
   180fa:	aa03      	add	r2, sp, #12
   180fc:	2103      	movs	r1, #3
   180fe:	f002 f8d0 	bl	1a2a2 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   18102:	4604      	mov	r4, r0
   18104:	2800      	cmp	r0, #0
   18106:	d1e5      	bne.n	180d4 <setCaptureObjects+0x60>
            co->dataIndex = (unsigned char)var_toInteger(tmp2);
   18108:	9803      	ldr	r0, [sp, #12]
   1810a:	f002 fa44 	bl	1a596 <var_toInteger>
   1810e:	b2c0      	uxtb	r0, r0
   18110:	8070      	strh	r0, [r6, #2]
            arr_push(objects, key_init(obj, co));
   18112:	4631      	mov	r1, r6
   18114:	9801      	ldr	r0, [sp, #4]
   18116:	f7fb fc02 	bl	1391e <key_init>
   1811a:	4601      	mov	r1, r0
   1811c:	4628      	mov	r0, r5
   1811e:	f7f8 f8f5 	bl	1030c <arr_push>
        for (pos = 0; pos != value->Arr->size; ++pos)
   18122:	f108 0801 	add.w	r8, r8, #1
   18126:	68b8      	ldr	r0, [r7, #8]
   18128:	88c3      	ldrh	r3, [r0, #6]
   1812a:	4598      	cmp	r8, r3
   1812c:	d0b6      	beq.n	1809c <setCaptureObjects+0x28>
            ret = va_getByIndex(value->Arr, pos, &tmp);
   1812e:	aa02      	add	r2, sp, #8
   18130:	4641      	mov	r1, r8
   18132:	f002 f8b6 	bl	1a2a2 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   18136:	4604      	mov	r4, r0
   18138:	2800      	cmp	r0, #0
   1813a:	d1b0      	bne.n	1809e <setCaptureObjects+0x2a>
            if (tmp->Arr->size != 4)
   1813c:	9b02      	ldr	r3, [sp, #8]
   1813e:	6898      	ldr	r0, [r3, #8]
   18140:	88c3      	ldrh	r3, [r0, #6]
   18142:	2b04      	cmp	r3, #4
   18144:	d12d      	bne.n	181a2 <setCaptureObjects+0x12e>
            ret = va_getByIndex(tmp->Arr, 0, &tmp2);
   18146:	4621      	mov	r1, r4
   18148:	aa03      	add	r2, sp, #12
   1814a:	f002 f8aa 	bl	1a2a2 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   1814e:	4604      	mov	r4, r0
   18150:	2800      	cmp	r0, #0
   18152:	d1a4      	bne.n	1809e <setCaptureObjects+0x2a>
            type = (DLMS_OBJECT_TYPE)var_toInteger(tmp2);
   18154:	9803      	ldr	r0, [sp, #12]
   18156:	f002 fa1e 	bl	1a596 <var_toInteger>
            ret = va_getByIndex(tmp->Arr, 1, &tmp2);
   1815a:	9b02      	ldr	r3, [sp, #8]
            type = (DLMS_OBJECT_TYPE)var_toInteger(tmp2);
   1815c:	b286      	uxth	r6, r0
            ret = va_getByIndex(tmp->Arr, 1, &tmp2);
   1815e:	aa03      	add	r2, sp, #12
   18160:	6898      	ldr	r0, [r3, #8]
   18162:	2101      	movs	r1, #1
   18164:	f002 f89d 	bl	1a2a2 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   18168:	4604      	mov	r4, r0
   1816a:	2800      	cmp	r0, #0
   1816c:	d197      	bne.n	1809e <setCaptureObjects+0x2a>
            ret = oa_findByLN(&settings->objects, type, tmp2->byteArr->data, &obj);
   1816e:	9b03      	ldr	r3, [sp, #12]
   18170:	689a      	ldr	r2, [r3, #8]
   18172:	4631      	mov	r1, r6
   18174:	6812      	ldr	r2, [r2, #0]
   18176:	ab01      	add	r3, sp, #4
   18178:	f109 0098 	add.w	r0, r9, #152	; 0x98
   1817c:	f001 fe4e 	bl	19e1c <oa_findByLN>
            if (ret != DLMS_ERROR_CODE_OK)
   18180:	4604      	mov	r4, r0
   18182:	2800      	cmp	r0, #0
   18184:	d18b      	bne.n	1809e <setCaptureObjects+0x2a>
            if (obj == NULL)
   18186:	9b01      	ldr	r3, [sp, #4]
   18188:	2b00      	cmp	r3, #0
   1818a:	d08d      	beq.n	180a8 <setCaptureObjects+0x34>
            co = (gxTarget*)gxmalloc(sizeof(gxTarget));
   1818c:	2004      	movs	r0, #4
   1818e:	f7f3 fd11 	bl	bbb4 <malloc>
            if (co == NULL)
   18192:	4606      	mov	r6, r0
   18194:	2800      	cmp	r0, #0
   18196:	d1a1      	bne.n	180dc <setCaptureObjects+0x68>
                ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   18198:	f44f 7482 	mov.w	r4, #260	; 0x104
   1819c:	e77f      	b.n	1809e <setCaptureObjects+0x2a>
        for (pos = 0; pos != value->Arr->size; ++pos)
   1819e:	46a0      	mov	r8, r4
   181a0:	e7c1      	b.n	18126 <setCaptureObjects+0xb2>
                ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   181a2:	f44f 7481 	mov.w	r4, #258	; 0x102
   181a6:	e77a      	b.n	1809e <setCaptureObjects+0x2a>

000181a8 <cosem_setGsmDiagnostic>:
#endif //DLMS_IGNORE_PROFILE_GENERIC
#ifndef DLMS_IGNORE_GSM_DIAGNOSTIC
int cosem_setGsmDiagnostic(gxGsmDiagnostic* object, unsigned char index, dlmsVARIANT* value)
{
   181a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   181ac:	3902      	subs	r1, #2
   181ae:	b086      	sub	sp, #24
   181b0:	4606      	mov	r6, r0
   181b2:	4615      	mov	r5, r2
   181b4:	2906      	cmp	r1, #6
   181b6:	f200 8127 	bhi.w	18408 <cosem_setGsmDiagnostic+0x260>
   181ba:	e8df f011 	tbh	[pc, r1, lsl #1]
   181be:	0007      	.short	0x0007
   181c0:	00550050 	.word	0x00550050
   181c4:	005f005a 	.word	0x005f005a
   181c8:	00ff00bc 	.word	0x00ff00bc
    dlmsVARIANT* tmp, * it;
    gxAdjacentCell* ac;
    switch (index)
    {
    case 2:
        if (value->vt == DLMS_DATA_TYPE_OCTET_STRING)
   181cc:	7813      	ldrb	r3, [r2, #0]
   181ce:	2b09      	cmp	r3, #9
   181d0:	d121      	bne.n	18216 <cosem_setGsmDiagnostic+0x6e>
        {
            if (object->operatorName != NULL)
   181d2:	6900      	ldr	r0, [r0, #16]
   181d4:	b118      	cbz	r0, 181de <cosem_setGsmDiagnostic+0x36>
            {
                gxfree(object->operatorName);
   181d6:	f7f3 fcf5 	bl	bbc4 <free>
                object->operatorName = NULL;
   181da:	2300      	movs	r3, #0
   181dc:	6133      	str	r3, [r6, #16]
            }

            if (value->byteArr != NULL && bb_size(value->byteArr) != 0)
   181de:	68a8      	ldr	r0, [r5, #8]
   181e0:	b908      	cbnz	r0, 181e6 <cosem_setGsmDiagnostic+0x3e>
    int ret = 0, pos;
   181e2:	2400      	movs	r4, #0
            ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        }
        break;
    case 3:
        object->status = (DLMS_GSM_STATUS)var_toInteger(value);
        break;
   181e4:	e037      	b.n	18256 <cosem_setGsmDiagnostic+0xae>
            if (value->byteArr != NULL && bb_size(value->byteArr) != 0)
   181e6:	f7f4 fcfa 	bl	cbde <bb_size>
   181ea:	2800      	cmp	r0, #0
   181ec:	d0f9      	beq.n	181e2 <cosem_setGsmDiagnostic+0x3a>
                object->operatorName = (char*)gxmalloc(value->byteArr->size + 1);
   181ee:	68ab      	ldr	r3, [r5, #8]
   181f0:	88d8      	ldrh	r0, [r3, #6]
   181f2:	3001      	adds	r0, #1
   181f4:	f7f3 fcde 	bl	bbb4 <malloc>
   181f8:	4604      	mov	r4, r0
   181fa:	6130      	str	r0, [r6, #16]
                if (object->operatorName == NULL)
   181fc:	b910      	cbnz	r0, 18204 <cosem_setGsmDiagnostic+0x5c>
                    break;
                }
                ac = (gxAdjacentCell*)gxmalloc(sizeof(gxAdjacentCell));
                if (ac == NULL)
                {
                    ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   181fe:	f44f 7482 	mov.w	r4, #260	; 0x104
                    break;
                }
                ac->signalQuality = (unsigned char)var_toInteger(tmp);
                arr_push(&object->adjacentCells, ac);
            }
            if (ret != 0 && ac != NULL)
   18202:	e028      	b.n	18256 <cosem_setGsmDiagnostic+0xae>
                memcpy(object->operatorName, value->strVal, value->byteArr->size);
   18204:	68ad      	ldr	r5, [r5, #8]
   18206:	88ea      	ldrh	r2, [r5, #6]
   18208:	4629      	mov	r1, r5
   1820a:	f003 ff69 	bl	1c0e0 <memcpy>
                object->operatorName[value->byteArr->size] = '\0';
   1820e:	88eb      	ldrh	r3, [r5, #6]
   18210:	2000      	movs	r0, #0
   18212:	54e0      	strb	r0, [r4, r3]
   18214:	e7e5      	b.n	181e2 <cosem_setGsmDiagnostic+0x3a>
        else if (value->vt == DLMS_DATA_TYPE_STRING)
   18216:	2b0a      	cmp	r3, #10
   18218:	f040 80f6 	bne.w	18408 <cosem_setGsmDiagnostic+0x260>
            if (object->operatorName != NULL)
   1821c:	6900      	ldr	r0, [r0, #16]
   1821e:	b108      	cbz	r0, 18224 <cosem_setGsmDiagnostic+0x7c>
                gxfree(object->operatorName);
   18220:	f7f3 fcd0 	bl	bbc4 <free>
            if (value->strVal != NULL && bb_size(value->strVal) != 0)
   18224:	68a8      	ldr	r0, [r5, #8]
            object->operatorName = NULL;
   18226:	2400      	movs	r4, #0
   18228:	6134      	str	r4, [r6, #16]
            if (value->strVal != NULL && bb_size(value->strVal) != 0)
   1822a:	2800      	cmp	r0, #0
   1822c:	d0d9      	beq.n	181e2 <cosem_setGsmDiagnostic+0x3a>
   1822e:	f7f4 fcd6 	bl	cbde <bb_size>
   18232:	2800      	cmp	r0, #0
   18234:	d0d5      	beq.n	181e2 <cosem_setGsmDiagnostic+0x3a>
                object->operatorName = (char*)gxmalloc(value->strVal->size + 1);
   18236:	68ab      	ldr	r3, [r5, #8]
   18238:	88d8      	ldrh	r0, [r3, #6]
   1823a:	3001      	adds	r0, #1
   1823c:	f7f3 fcba 	bl	bbb4 <malloc>
   18240:	4607      	mov	r7, r0
   18242:	6130      	str	r0, [r6, #16]
                if (object->operatorName == NULL)
   18244:	2800      	cmp	r0, #0
   18246:	d0da      	beq.n	181fe <cosem_setGsmDiagnostic+0x56>
                memcpy(object->operatorName, value->strVal, value->strVal->size);
   18248:	68ad      	ldr	r5, [r5, #8]
   1824a:	88ea      	ldrh	r2, [r5, #6]
   1824c:	4629      	mov	r1, r5
   1824e:	f003 ff47 	bl	1c0e0 <memcpy>
                object->operatorName[value->strVal->size] = '\0';
   18252:	88eb      	ldrh	r3, [r5, #6]
   18254:	54fc      	strb	r4, [r7, r3]
        break;
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    return ret;
}
   18256:	4620      	mov	r0, r4
   18258:	b006      	add	sp, #24
   1825a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        object->status = (DLMS_GSM_STATUS)var_toInteger(value);
   1825e:	4610      	mov	r0, r2
   18260:	f002 f999 	bl	1a596 <var_toInteger>
   18264:	7530      	strb	r0, [r6, #20]
   18266:	e7bc      	b.n	181e2 <cosem_setGsmDiagnostic+0x3a>
        object->circuitSwitchStatus = (DLMS_GSM_CIRCUIT_SWITCH_STATUS)var_toInteger(value);
   18268:	4610      	mov	r0, r2
   1826a:	f002 f994 	bl	1a596 <var_toInteger>
   1826e:	7570      	strb	r0, [r6, #21]
        break;
   18270:	e7b7      	b.n	181e2 <cosem_setGsmDiagnostic+0x3a>
        object->packetSwitchStatus = (DLMS_GSM_PACKET_SWITCH_STATUS)var_toInteger(value);
   18272:	4610      	mov	r0, r2
   18274:	f002 f98f 	bl	1a596 <var_toInteger>
   18278:	75b0      	strb	r0, [r6, #22]
        break;
   1827a:	e7b2      	b.n	181e2 <cosem_setGsmDiagnostic+0x3a>
        if (value != NULL && value->vt == DLMS_DATA_TYPE_STRUCTURE)
   1827c:	2a00      	cmp	r2, #0
   1827e:	d0b0      	beq.n	181e2 <cosem_setGsmDiagnostic+0x3a>
   18280:	7817      	ldrb	r7, [r2, #0]
   18282:	2f02      	cmp	r7, #2
   18284:	d1ad      	bne.n	181e2 <cosem_setGsmDiagnostic+0x3a>
            if ((ret = va_getByIndex(value->Arr, 0, &tmp)) != 0)
   18286:	68a8      	ldr	r0, [r5, #8]
   18288:	aa01      	add	r2, sp, #4
   1828a:	2100      	movs	r1, #0
   1828c:	f002 f809 	bl	1a2a2 <va_getByIndex>
   18290:	4604      	mov	r4, r0
   18292:	2800      	cmp	r0, #0
   18294:	d1df      	bne.n	18256 <cosem_setGsmDiagnostic+0xae>
            object->cellInfo.cellId = (uint32_t)var_toInteger(tmp);
   18296:	9801      	ldr	r0, [sp, #4]
   18298:	f002 f97d 	bl	1a596 <var_toInteger>
            if ((ret = va_getByIndex(value->Arr, 1, &tmp)) != 0)
   1829c:	aa01      	add	r2, sp, #4
            object->cellInfo.cellId = (uint32_t)var_toInteger(tmp);
   1829e:	61b0      	str	r0, [r6, #24]
            if ((ret = va_getByIndex(value->Arr, 1, &tmp)) != 0)
   182a0:	2101      	movs	r1, #1
   182a2:	68a8      	ldr	r0, [r5, #8]
   182a4:	f001 fffd 	bl	1a2a2 <va_getByIndex>
   182a8:	4604      	mov	r4, r0
   182aa:	2800      	cmp	r0, #0
   182ac:	d1d3      	bne.n	18256 <cosem_setGsmDiagnostic+0xae>
            object->cellInfo.locationId = (uint16_t)var_toInteger(tmp);
   182ae:	9801      	ldr	r0, [sp, #4]
   182b0:	f002 f971 	bl	1a596 <var_toInteger>
            if ((ret = va_getByIndex(value->Arr, 2, &tmp)) != 0)
   182b4:	aa01      	add	r2, sp, #4
            object->cellInfo.locationId = (uint16_t)var_toInteger(tmp);
   182b6:	83b0      	strh	r0, [r6, #28]
            if ((ret = va_getByIndex(value->Arr, 2, &tmp)) != 0)
   182b8:	4639      	mov	r1, r7
   182ba:	68a8      	ldr	r0, [r5, #8]
   182bc:	f001 fff1 	bl	1a2a2 <va_getByIndex>
   182c0:	4604      	mov	r4, r0
   182c2:	2800      	cmp	r0, #0
   182c4:	d1c7      	bne.n	18256 <cosem_setGsmDiagnostic+0xae>
            object->cellInfo.signalQuality = (unsigned char)var_toInteger(tmp);
   182c6:	9801      	ldr	r0, [sp, #4]
   182c8:	f002 f965 	bl	1a596 <var_toInteger>
   182cc:	77b0      	strb	r0, [r6, #30]
            if ((ret = va_getByIndex(value->Arr, 3, &tmp)) != 0)
   182ce:	68a8      	ldr	r0, [r5, #8]
   182d0:	aa01      	add	r2, sp, #4
   182d2:	2103      	movs	r1, #3
   182d4:	f001 ffe5 	bl	1a2a2 <va_getByIndex>
   182d8:	4604      	mov	r4, r0
   182da:	2800      	cmp	r0, #0
   182dc:	d1bb      	bne.n	18256 <cosem_setGsmDiagnostic+0xae>
            object->cellInfo.ber = (unsigned char)var_toInteger(tmp);
   182de:	9801      	ldr	r0, [sp, #4]
   182e0:	f002 f959 	bl	1a596 <var_toInteger>
            if (object->base.version != 0)
   182e4:	78b3      	ldrb	r3, [r6, #2]
            object->cellInfo.ber = (unsigned char)var_toInteger(tmp);
   182e6:	77f0      	strb	r0, [r6, #31]
            if (object->base.version != 0)
   182e8:	2b00      	cmp	r3, #0
   182ea:	f43f af7a 	beq.w	181e2 <cosem_setGsmDiagnostic+0x3a>
                if ((ret = va_getByIndex(value->Arr, 4, &tmp)) != 0)
   182ee:	68a8      	ldr	r0, [r5, #8]
   182f0:	aa01      	add	r2, sp, #4
   182f2:	2104      	movs	r1, #4
   182f4:	f001 ffd5 	bl	1a2a2 <va_getByIndex>
   182f8:	4604      	mov	r4, r0
   182fa:	2800      	cmp	r0, #0
   182fc:	d1ab      	bne.n	18256 <cosem_setGsmDiagnostic+0xae>
                object->cellInfo.mobileCountryCode = (uint16_t)var_toInteger(tmp);
   182fe:	9801      	ldr	r0, [sp, #4]
   18300:	f002 f949 	bl	1a596 <var_toInteger>
                if ((ret = va_getByIndex(value->Arr, 5, &tmp)) != 0)
   18304:	aa01      	add	r2, sp, #4
                object->cellInfo.mobileCountryCode = (uint16_t)var_toInteger(tmp);
   18306:	8430      	strh	r0, [r6, #32]
                if ((ret = va_getByIndex(value->Arr, 5, &tmp)) != 0)
   18308:	2105      	movs	r1, #5
   1830a:	68a8      	ldr	r0, [r5, #8]
   1830c:	f001 ffc9 	bl	1a2a2 <va_getByIndex>
   18310:	4604      	mov	r4, r0
   18312:	2800      	cmp	r0, #0
   18314:	d19f      	bne.n	18256 <cosem_setGsmDiagnostic+0xae>
                object->cellInfo.mobileNetworkCode = (uint16_t)var_toInteger(tmp);
   18316:	9801      	ldr	r0, [sp, #4]
   18318:	f002 f93d 	bl	1a596 <var_toInteger>
                if ((ret = va_getByIndex(value->Arr, 6, &tmp)) != 0)
   1831c:	aa01      	add	r2, sp, #4
                object->cellInfo.mobileNetworkCode = (uint16_t)var_toInteger(tmp);
   1831e:	8470      	strh	r0, [r6, #34]	; 0x22
                if ((ret = va_getByIndex(value->Arr, 6, &tmp)) != 0)
   18320:	2106      	movs	r1, #6
   18322:	68a8      	ldr	r0, [r5, #8]
   18324:	f001 ffbd 	bl	1a2a2 <va_getByIndex>
   18328:	4604      	mov	r4, r0
   1832a:	2800      	cmp	r0, #0
   1832c:	d193      	bne.n	18256 <cosem_setGsmDiagnostic+0xae>
                object->cellInfo.channelNumber = tmp->ulVal;
   1832e:	9b01      	ldr	r3, [sp, #4]
   18330:	689b      	ldr	r3, [r3, #8]
   18332:	6273      	str	r3, [r6, #36]	; 0x24
   18334:	e78f      	b.n	18256 <cosem_setGsmDiagnostic+0xae>
        arr_clear(&object->adjacentCells);
   18336:	3628      	adds	r6, #40	; 0x28
   18338:	4630      	mov	r0, r6
   1833a:	f7f7 fffc 	bl	10336 <arr_clear>
        if (value != NULL && value->vt == DLMS_DATA_TYPE_ARRAY)
   1833e:	2d00      	cmp	r5, #0
   18340:	f43f af4f 	beq.w	181e2 <cosem_setGsmDiagnostic+0x3a>
   18344:	782b      	ldrb	r3, [r5, #0]
   18346:	2b01      	cmp	r3, #1
   18348:	f47f af4b 	bne.w	181e2 <cosem_setGsmDiagnostic+0x3a>
            for (pos = 0; pos != value->Arr->size; ++pos)
   1834c:	f04f 0800 	mov.w	r8, #0
   18350:	e02f      	b.n	183b2 <cosem_setGsmDiagnostic+0x20a>
                ret = va_getByIndex(value->Arr, pos, &it);
   18352:	aa02      	add	r2, sp, #8
   18354:	4641      	mov	r1, r8
   18356:	f001 ffa4 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   1835a:	4604      	mov	r4, r0
   1835c:	2800      	cmp	r0, #0
   1835e:	f47f af7a 	bne.w	18256 <cosem_setGsmDiagnostic+0xae>
                ret = va_getByIndex(it->Arr, 0, &tmp);
   18362:	9b02      	ldr	r3, [sp, #8]
   18364:	4601      	mov	r1, r0
   18366:	aa01      	add	r2, sp, #4
   18368:	6898      	ldr	r0, [r3, #8]
   1836a:	f001 ff9a 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   1836e:	4604      	mov	r4, r0
   18370:	2800      	cmp	r0, #0
   18372:	f47f af70 	bne.w	18256 <cosem_setGsmDiagnostic+0xae>
                ac = (gxAdjacentCell*)gxmalloc(sizeof(gxAdjacentCell));
   18376:	2008      	movs	r0, #8
   18378:	f7f3 fc1c 	bl	bbb4 <malloc>
                if (ac == NULL)
   1837c:	4607      	mov	r7, r0
   1837e:	2800      	cmp	r0, #0
   18380:	f43f af3d 	beq.w	181fe <cosem_setGsmDiagnostic+0x56>
                ac->cellId = var_toInteger(tmp);
   18384:	9801      	ldr	r0, [sp, #4]
   18386:	f002 f906 	bl	1a596 <var_toInteger>
                ret = va_getByIndex(it->Arr, 1, &tmp);
   1838a:	9b02      	ldr	r3, [sp, #8]
                ac->cellId = var_toInteger(tmp);
   1838c:	6038      	str	r0, [r7, #0]
                ret = va_getByIndex(it->Arr, 1, &tmp);
   1838e:	aa01      	add	r2, sp, #4
   18390:	6898      	ldr	r0, [r3, #8]
   18392:	2101      	movs	r1, #1
   18394:	f001 ff85 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   18398:	4604      	mov	r4, r0
   1839a:	2800      	cmp	r0, #0
   1839c:	d137      	bne.n	1840e <cosem_setGsmDiagnostic+0x266>
                ac->signalQuality = (unsigned char)var_toInteger(tmp);
   1839e:	9801      	ldr	r0, [sp, #4]
   183a0:	f002 f8f9 	bl	1a596 <var_toInteger>
                arr_push(&object->adjacentCells, ac);
   183a4:	4639      	mov	r1, r7
                ac->signalQuality = (unsigned char)var_toInteger(tmp);
   183a6:	7138      	strb	r0, [r7, #4]
                arr_push(&object->adjacentCells, ac);
   183a8:	4630      	mov	r0, r6
   183aa:	f7f7 ffaf 	bl	1030c <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   183ae:	f108 0801 	add.w	r8, r8, #1
   183b2:	68a8      	ldr	r0, [r5, #8]
   183b4:	88c3      	ldrh	r3, [r0, #6]
   183b6:	4543      	cmp	r3, r8
   183b8:	d1cb      	bne.n	18352 <cosem_setGsmDiagnostic+0x1aa>
   183ba:	e712      	b.n	181e2 <cosem_setGsmDiagnostic+0x3a>
        if (value->vt == DLMS_DATA_TYPE_OCTET_STRING && value->byteArr != NULL)
   183bc:	7813      	ldrb	r3, [r2, #0]
   183be:	2b09      	cmp	r3, #9
   183c0:	d116      	bne.n	183f0 <cosem_setGsmDiagnostic+0x248>
   183c2:	6893      	ldr	r3, [r2, #8]
   183c4:	b1db      	cbz	r3, 183fe <cosem_setGsmDiagnostic+0x256>
            var_init(&tmp2);
   183c6:	a802      	add	r0, sp, #8
   183c8:	f001 fd91 	bl	19eee <var_init>
            ret = dlms_changeType2(value, DLMS_DATA_TYPE_DATETIME, &tmp2);
   183cc:	aa02      	add	r2, sp, #8
   183ce:	2119      	movs	r1, #25
   183d0:	4628      	mov	r0, r5
   183d2:	f7f7 fcb8 	bl	fd46 <dlms_changeType2>
            if (ret != 0)
   183d6:	4604      	mov	r4, r0
   183d8:	2800      	cmp	r0, #0
   183da:	f47f af3c 	bne.w	18256 <cosem_setGsmDiagnostic+0xae>
            time_copy(&object->captureTime, tmp2.dateTime);
   183de:	f106 0034 	add.w	r0, r6, #52	; 0x34
   183e2:	9904      	ldr	r1, [sp, #16]
   183e4:	f7f5 fcfc 	bl	dde0 <time_copy>
            var_clear(&tmp2);
   183e8:	a802      	add	r0, sp, #8
   183ea:	f001 fedc 	bl	1a1a6 <var_clear>
   183ee:	e732      	b.n	18256 <cosem_setGsmDiagnostic+0xae>
        else if (value->vt == DLMS_DATA_TYPE_DATETIME)
   183f0:	2b19      	cmp	r3, #25
   183f2:	d104      	bne.n	183fe <cosem_setGsmDiagnostic+0x256>
            time_copy(&object->captureTime, value->dateTime);
   183f4:	6891      	ldr	r1, [r2, #8]
   183f6:	3034      	adds	r0, #52	; 0x34
   183f8:	f7f5 fcf2 	bl	dde0 <time_copy>
   183fc:	e6f1      	b.n	181e2 <cosem_setGsmDiagnostic+0x3a>
            time_clear(&object->captureTime);
   183fe:	f106 0034 	add.w	r0, r6, #52	; 0x34
   18402:	f7f5 fcbc 	bl	dd7e <time_clear>
   18406:	e6ec      	b.n	181e2 <cosem_setGsmDiagnostic+0x3a>
            ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   18408:	f44f 7481 	mov.w	r4, #258	; 0x102
   1840c:	e723      	b.n	18256 <cosem_setGsmDiagnostic+0xae>
                gxfree(ac);
   1840e:	4638      	mov	r0, r7
   18410:	f7f3 fbd8 	bl	bbc4 <free>
   18414:	e71f      	b.n	18256 <cosem_setGsmDiagnostic+0xae>

00018416 <cosem_setTokenGateway>:
#endif //DLMS_IGNORE_GSM_DIAGNOSTIC
#ifndef DLMS_IGNORE_TOKEN_GATEWAY
int cosem_setTokenGateway(gxTokenGateway* object, unsigned char index, dlmsVARIANT* value)
{
   18416:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1841a:	3902      	subs	r1, #2
   1841c:	4605      	mov	r5, r0
   1841e:	4616      	mov	r6, r2
   18420:	2904      	cmp	r1, #4
   18422:	f200 808b 	bhi.w	1853c <cosem_setTokenGateway+0x126>
   18426:	e8df f001 	tbb	[pc, r1]
   1842a:	1603      	.short	0x1603
   1842c:	5e33      	.short	0x5e33
   1842e:	64          	.byte	0x64
   1842f:	00          	.byte	0x00
    dlmsVARIANT tmp2;
    dlmsVARIANT* it;
    switch (index)
    {
    case 2:
        bb_clear(&object->token);
   18430:	3510      	adds	r5, #16
   18432:	4628      	mov	r0, r5
   18434:	f7f4 fd99 	bl	cf6a <bb_clear>
        ret = bb_set2(&object->token, value->byteArr, 0, bb_size(value->byteArr));
   18438:	68b4      	ldr	r4, [r6, #8]
   1843a:	4620      	mov	r0, r4
   1843c:	f7f4 fbcf 	bl	cbde <bb_size>
   18440:	4621      	mov	r1, r4
   18442:	4603      	mov	r3, r0
   18444:	2200      	movs	r2, #0
   18446:	4628      	mov	r0, r5
   18448:	f7f4 fd4a 	bl	cee0 <bb_set2>
   1844c:	4604      	mov	r4, r0
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   1844e:	4620      	mov	r0, r4
   18450:	b004      	add	sp, #16
   18452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        time_clear(&object->time);
   18456:	351c      	adds	r5, #28
   18458:	4628      	mov	r0, r5
   1845a:	f7f5 fc90 	bl	dd7e <time_clear>
        if (value->byteArr == NULL)
   1845e:	68b4      	ldr	r4, [r6, #8]
   18460:	b91c      	cbnz	r4, 1846a <cosem_setTokenGateway+0x54>
            time_clear(&object->time);
   18462:	4628      	mov	r0, r5
   18464:	f7f5 fc8b 	bl	dd7e <time_clear>
   18468:	e7f1      	b.n	1844e <cosem_setTokenGateway+0x38>
            var_init(&tmp2);
   1846a:	4668      	mov	r0, sp
   1846c:	f001 fd3f 	bl	19eee <var_init>
            ret = dlms_changeType2(value, DLMS_DATA_TYPE_DATETIME, &tmp2);
   18470:	466a      	mov	r2, sp
   18472:	2119      	movs	r1, #25
   18474:	4630      	mov	r0, r6
   18476:	f7f7 fc66 	bl	fd46 <dlms_changeType2>
            if (ret != 0)
   1847a:	4604      	mov	r4, r0
   1847c:	2800      	cmp	r0, #0
   1847e:	d1e6      	bne.n	1844e <cosem_setTokenGateway+0x38>
            time_copy(&object->time, tmp2.dateTime);
   18480:	4628      	mov	r0, r5
   18482:	9902      	ldr	r1, [sp, #8]
   18484:	f7f5 fcac 	bl	dde0 <time_copy>
            var_clear(&tmp2);
   18488:	4668      	mov	r0, sp
   1848a:	f001 fe8c 	bl	1a1a6 <var_clear>
   1848e:	e7de      	b.n	1844e <cosem_setTokenGateway+0x38>
        obj_clearByteBufferList(&object->descriptions);
   18490:	3528      	adds	r5, #40	; 0x28
   18492:	4628      	mov	r0, r5
   18494:	f7fb fb75 	bl	13b82 <obj_clearByteBufferList>
        if (value != NULL)
   18498:	bb16      	cbnz	r6, 184e0 <cosem_setTokenGateway+0xca>
    int ret = DLMS_ERROR_CODE_OK, pos;
   1849a:	2400      	movs	r4, #0
        break;
   1849c:	e7d7      	b.n	1844e <cosem_setTokenGateway+0x38>
                if ((ret = va_getByIndex(value->Arr, pos, &it)) != 0)
   1849e:	466a      	mov	r2, sp
   184a0:	4641      	mov	r1, r8
   184a2:	f001 fefe 	bl	1a2a2 <va_getByIndex>
   184a6:	4604      	mov	r4, r0
   184a8:	2800      	cmp	r0, #0
   184aa:	d1d0      	bne.n	1844e <cosem_setTokenGateway+0x38>
                d = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
   184ac:	200c      	movs	r0, #12
   184ae:	f7f3 fb81 	bl	bbb4 <malloc>
                if (d == NULL)
   184b2:	4607      	mov	r7, r0
   184b4:	2800      	cmp	r0, #0
   184b6:	d044      	beq.n	18542 <cosem_setTokenGateway+0x12c>
                BYTE_BUFFER_INIT(d);
   184b8:	f7f4 fb94 	bl	cbe4 <bb_init>
                bb_set2(d, it->strVal, 0, it->strVal->size);
   184bc:	9b00      	ldr	r3, [sp, #0]
   184be:	6899      	ldr	r1, [r3, #8]
   184c0:	4622      	mov	r2, r4
   184c2:	88cb      	ldrh	r3, [r1, #6]
   184c4:	4638      	mov	r0, r7
   184c6:	f7f4 fd0b 	bl	cee0 <bb_set2>
                arr_push(&object->descriptions, d);
   184ca:	4639      	mov	r1, r7
   184cc:	4628      	mov	r0, r5
   184ce:	f7f7 ff1d 	bl	1030c <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   184d2:	f108 0801 	add.w	r8, r8, #1
   184d6:	68b0      	ldr	r0, [r6, #8]
   184d8:	88c3      	ldrh	r3, [r0, #6]
   184da:	4543      	cmp	r3, r8
   184dc:	d1df      	bne.n	1849e <cosem_setTokenGateway+0x88>
   184de:	e7dc      	b.n	1849a <cosem_setTokenGateway+0x84>
   184e0:	f04f 0800 	mov.w	r8, #0
   184e4:	e7f7      	b.n	184d6 <cosem_setTokenGateway+0xc0>
        object->deliveryMethod = (DLMS_TOKEN_DELIVERY)var_toInteger(value);
   184e6:	4610      	mov	r0, r2
   184e8:	f002 f855 	bl	1a596 <var_toInteger>
   184ec:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
   184f0:	e7d3      	b.n	1849a <cosem_setTokenGateway+0x84>
        if ((ret = va_getByIndex(value->Arr, 0, &tmp)) != 0)
   184f2:	68b0      	ldr	r0, [r6, #8]
   184f4:	466a      	mov	r2, sp
   184f6:	2100      	movs	r1, #0
   184f8:	f001 fed3 	bl	1a2a2 <va_getByIndex>
   184fc:	4604      	mov	r4, r0
   184fe:	2800      	cmp	r0, #0
   18500:	d1a5      	bne.n	1844e <cosem_setTokenGateway+0x38>
        object->status = (DLMS_TOKEN_STATUS_CODE)var_toInteger(tmp);
   18502:	9800      	ldr	r0, [sp, #0]
   18504:	f002 f847 	bl	1a596 <var_toInteger>
   18508:	f885 0035 	strb.w	r0, [r5, #53]	; 0x35
        if ((ret = va_getByIndex(value->Arr, 1, &tmp)) != 0)
   1850c:	68b0      	ldr	r0, [r6, #8]
   1850e:	466a      	mov	r2, sp
   18510:	2101      	movs	r1, #1
   18512:	f001 fec6 	bl	1a2a2 <va_getByIndex>
   18516:	4604      	mov	r4, r0
   18518:	2800      	cmp	r0, #0
   1851a:	d198      	bne.n	1844e <cosem_setTokenGateway+0x38>
        ba_clear(&object->dataValue);
   1851c:	3538      	adds	r5, #56	; 0x38
   1851e:	4628      	mov	r0, r5
   18520:	f7f4 fac9 	bl	cab6 <ba_clear>
        if (tmp->strVal != NULL && tmp->strVal->size != 0)
   18524:	9b00      	ldr	r3, [sp, #0]
   18526:	689b      	ldr	r3, [r3, #8]
   18528:	2b00      	cmp	r3, #0
   1852a:	d0b6      	beq.n	1849a <cosem_setTokenGateway+0x84>
   1852c:	88da      	ldrh	r2, [r3, #6]
   1852e:	2a00      	cmp	r2, #0
   18530:	d0b3      	beq.n	1849a <cosem_setTokenGateway+0x84>
            ba_copy(&object->dataValue, tmp->bitArr->data, tmp->bitArr->size);
   18532:	6819      	ldr	r1, [r3, #0]
   18534:	4628      	mov	r0, r5
   18536:	f7f4 fac9 	bl	cacc <ba_copy>
   1853a:	e788      	b.n	1844e <cosem_setTokenGateway+0x38>
                    ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   1853c:	f44f 7481 	mov.w	r4, #258	; 0x102
   18540:	e785      	b.n	1844e <cosem_setTokenGateway+0x38>
   18542:	f44f 7482 	mov.w	r4, #260	; 0x104
   18546:	e782      	b.n	1844e <cosem_setTokenGateway+0x38>

00018548 <compactData_updateTemplateDescription>:
#ifndef DLMS_IGNORE_COMPACT_DATA

int compactData_updateTemplateDescription(
    dlmsSettings* settings,
    gxCompactData* object)
{
   18548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1854c:	460f      	mov	r7, r1
   1854e:	b0a1      	sub	sp, #132	; 0x84
   18550:	4682      	mov	sl, r0
    gxByteBuffer tmp;
    gxValueEventCollection args;
    gxValueEventArg e;
    ve_init(&e);
    gxKey* kv;
    bb_clear(&object->buffer);
   18552:	f107 0610 	add.w	r6, r7, #16
    ve_init(&e);
   18556:	a80e      	add	r0, sp, #56	; 0x38
   18558:	f001 f943 	bl	197e2 <ve_init>
    bb_clear(&object->templateDescription);
   1855c:	f107 052c 	add.w	r5, r7, #44	; 0x2c
    bb_clear(&object->buffer);
   18560:	4630      	mov	r0, r6
   18562:	f7f4 fd02 	bl	cf6a <bb_clear>
    bb_clear(&object->templateDescription);
   18566:	4628      	mov	r0, r5
   18568:	f7f4 fcff 	bl	cf6a <bb_clear>
    e.action = 1;
    e.target = &object->base;
    e.index = 2;
   1856c:	2402      	movs	r4, #2
    e.action = 1;
   1856e:	2301      	movs	r3, #1
    vec_init(&args);
   18570:	a805      	add	r0, sp, #20
    e.action = 1;
   18572:	f88d 306a 	strb.w	r3, [sp, #106]	; 0x6a
    e.target = &object->base;
   18576:	9713      	str	r7, [sp, #76]	; 0x4c
    e.index = 2;
   18578:	f88d 4050 	strb.w	r4, [sp, #80]	; 0x50
    vec_init(&args);
   1857c:	f001 f8dc 	bl	19738 <vec_init>
    BYTE_BUFFER_INIT(&tmp);
   18580:	a807      	add	r0, sp, #28
   18582:	f7f4 fb2f 	bl	cbe4 <bb_init>
    vec_push(&args, &e);
   18586:	a90e      	add	r1, sp, #56	; 0x38
   18588:	a805      	add	r0, sp, #20
   1858a:	f001 f8f5 	bl	19778 <vec_push>
    if (!e.handled)
   1858e:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   18592:	b153      	cbz	r3, 185aa <compactData_updateTemplateDescription+0x62>
            }
            var_clear(&e.value);
            ve_clear(&e);
        }
    }
    bb_clear(&tmp);
   18594:	a807      	add	r0, sp, #28
   18596:	f7f4 fce8 	bl	cf6a <bb_clear>
    //svr_postGet(settings, &args);
    vec_empty(&args);
   1859a:	a805      	add	r0, sp, #20
   1859c:	f001 f90e 	bl	197bc <vec_empty>
    return 0;
   185a0:	2400      	movs	r4, #0
}
   185a2:	4620      	mov	r0, r4
   185a4:	b021      	add	sp, #132	; 0x84
   185a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((ret = bb_setUInt8(&object->templateDescription, DLMS_DATA_TYPE_STRUCTURE)) != DLMS_ERROR_CODE_OK)
   185aa:	4621      	mov	r1, r4
   185ac:	4628      	mov	r0, r5
   185ae:	f7f4 fb82 	bl	ccb6 <bb_setUInt8>
   185b2:	4604      	mov	r4, r0
   185b4:	b118      	cbz	r0, 185be <compactData_updateTemplateDescription+0x76>
                    bb_clear(&object->buffer);
   185b6:	4630      	mov	r0, r6
   185b8:	f7f4 fcd7 	bl	cf6a <bb_clear>
                    return ret;
   185bc:	e7f1      	b.n	185a2 <compactData_updateTemplateDescription+0x5a>
        hlp_setObjectCount(object->captureObjects.size, &object->templateDescription);
   185be:	8c78      	ldrh	r0, [r7, #34]	; 0x22
   185c0:	4629      	mov	r1, r5
   185c2:	f001 f967 	bl	19894 <hlp_setObjectCount>
        for (pos = 0; pos != object->captureObjects.size; ++pos)
   185c6:	46a1      	mov	r9, r4
   185c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
   185ca:	fa1f f189 	uxth.w	r1, r9
   185ce:	428b      	cmp	r3, r1
   185d0:	d0e0      	beq.n	18594 <compactData_updateTemplateDescription+0x4c>
            ret = arr_getByIndex(&object->captureObjects, pos, (void**)&kv);
   185d2:	aa01      	add	r2, sp, #4
   185d4:	f107 001c 	add.w	r0, r7, #28
   185d8:	f7f7 fed5 	bl	10386 <arr_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   185dc:	4604      	mov	r4, r0
   185de:	2800      	cmp	r0, #0
   185e0:	d1e9      	bne.n	185b6 <compactData_updateTemplateDescription+0x6e>
            e.target = (gxObject*)kv->key;
   185e2:	9b01      	ldr	r3, [sp, #4]
   185e4:	681a      	ldr	r2, [r3, #0]
            e.index = ((gxTarget*)kv->value)->attributeIndex;
   185e6:	685b      	ldr	r3, [r3, #4]
            e.target = (gxObject*)kv->key;
   185e8:	9213      	str	r2, [sp, #76]	; 0x4c
            e.index = ((gxTarget*)kv->value)->attributeIndex;
   185ea:	781b      	ldrb	r3, [r3, #0]
   185ec:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
            if ((ret = cosem_getValue(settings, &e)) != 0)
   185f0:	a90e      	add	r1, sp, #56	; 0x38
   185f2:	4650      	mov	r0, sl
   185f4:	f7fa ffbb 	bl	1356e <cosem_getValue>
   185f8:	4604      	mov	r4, r0
   185fa:	b118      	cbz	r0, 18604 <compactData_updateTemplateDescription+0xbc>
                                        var_clear(&e.value);
   185fc:	a80e      	add	r0, sp, #56	; 0x38
   185fe:	f001 fdd2 	bl	1a1a6 <var_clear>
                                        bb_clear(&object->buffer);
   18602:	e7d8      	b.n	185b6 <compactData_updateTemplateDescription+0x6e>
            if (e.byteArray)
   18604:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
   18608:	2b00      	cmp	r3, #0
   1860a:	f000 80db 	beq.w	187c4 <compactData_updateTemplateDescription+0x27c>
                if (bb_size(e.value.byteArr) == 0)
   1860e:	9810      	ldr	r0, [sp, #64]	; 0x40
   18610:	f7f4 fae5 	bl	cbde <bb_size>
   18614:	4601      	mov	r1, r0
   18616:	b918      	cbnz	r0, 18620 <compactData_updateTemplateDescription+0xd8>
                        bb_setUInt8(&object->templateDescription, e.value.byteArr->data[0]);
   18618:	4628      	mov	r0, r5
   1861a:	f7f4 fb4c 	bl	ccb6 <bb_setUInt8>
   1861e:	e06e      	b.n	186fe <compactData_updateTemplateDescription+0x1b6>
                    if (e.value.byteArr->data[0] == DLMS_DATA_TYPE_ARRAY ||
   18620:	9b10      	ldr	r3, [sp, #64]	; 0x40
   18622:	681b      	ldr	r3, [r3, #0]
   18624:	7819      	ldrb	r1, [r3, #0]
   18626:	1e4b      	subs	r3, r1, #1
   18628:	2b01      	cmp	r3, #1
   1862a:	d8f5      	bhi.n	18618 <compactData_updateTemplateDescription+0xd0>
                        di_init(&info);
   1862c:	a803      	add	r0, sp, #12
                        var_init(&value);
   1862e:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
                        di_init(&info);
   18632:	f7f5 fb6a 	bl	dd0a <di_init>
                        var_init(&value);
   18636:	4658      	mov	r0, fp
   18638:	f001 fc59 	bl	19eee <var_init>
                        e.value.byteArr->position = 1;
   1863c:	9810      	ldr	r0, [sp, #64]	; 0x40
   1863e:	2301      	movs	r3, #1
   18640:	8103      	strh	r3, [r0, #8]
                        if ((ret = hlp_getObjectCount2(e.value.byteArr, &count)) != 0 ||
   18642:	f10d 0102 	add.w	r1, sp, #2
   18646:	f001 f8f4 	bl	19832 <hlp_getObjectCount2>
   1864a:	b930      	cbnz	r0, 1865a <compactData_updateTemplateDescription+0x112>
                            ((gxTarget*)kv->value)->dataIndex > count)
   1864c:	9b01      	ldr	r3, [sp, #4]
                        if ((ret = hlp_getObjectCount2(e.value.byteArr, &count)) != 0 ||
   1864e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
                            ((gxTarget*)kv->value)->dataIndex > count)
   18652:	685b      	ldr	r3, [r3, #4]
   18654:	885b      	ldrh	r3, [r3, #2]
                        if ((ret = hlp_getObjectCount2(e.value.byteArr, &count)) != 0 ||
   18656:	429a      	cmp	r2, r3
   18658:	d208      	bcs.n	1866c <compactData_updateTemplateDescription+0x124>
                            var_clear(&e.value);
   1865a:	a80e      	add	r0, sp, #56	; 0x38
   1865c:	f001 fda3 	bl	1a1a6 <var_clear>
                            bb_clear(&object->buffer);
   18660:	4630      	mov	r0, r6
   18662:	f7f4 fc82 	bl	cf6a <bb_clear>
                            return DLMS_ERROR_CODE_OUTOFMEMORY;
   18666:	f44f 7482 	mov.w	r4, #260	; 0x104
   1866a:	e79a      	b.n	185a2 <compactData_updateTemplateDescription+0x5a>
                        if (((gxTarget*)kv->value)->dataIndex == 0)
   1866c:	2b00      	cmp	r3, #0
   1866e:	d17a      	bne.n	18766 <compactData_updateTemplateDescription+0x21e>
                            bb_setUInt8(&object->templateDescription, e.value.byteArr->data[0]);
   18670:	9b10      	ldr	r3, [sp, #64]	; 0x40
   18672:	681b      	ldr	r3, [r3, #0]
   18674:	4628      	mov	r0, r5
   18676:	7819      	ldrb	r1, [r3, #0]
   18678:	f7f4 fb1d 	bl	ccb6 <bb_setUInt8>
                            if (e.value.byteArr->data[0] == DLMS_DATA_TYPE_ARRAY)
   1867c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1867e:	681b      	ldr	r3, [r3, #0]
   18680:	781a      	ldrb	r2, [r3, #0]
   18682:	7859      	ldrb	r1, [r3, #1]
   18684:	2a01      	cmp	r2, #1
                                bb_setUInt16(&object->templateDescription, e.value.byteArr->data[1]);
   18686:	4628      	mov	r0, r5
                            if (e.value.byteArr->data[0] == DLMS_DATA_TYPE_ARRAY)
   18688:	d118      	bne.n	186bc <compactData_updateTemplateDescription+0x174>
                                bb_setUInt16(&object->templateDescription, e.value.byteArr->data[1]);
   1868a:	f7f4 fb36 	bl	ccfa <bb_setUInt16>
                                    for (uint16_t pos = 0; pos < value.Arr->size; ++pos)
   1868e:	f04f 0b00 	mov.w	fp, #0
                            for (unsigned char pos = 0; pos < count; ++pos)
   18692:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   18696:	fa5f f38b 	uxtb.w	r3, fp
   1869a:	4293      	cmp	r3, r2
   1869c:	d22c      	bcs.n	186f8 <compactData_updateTemplateDescription+0x1b0>
                                di_init(&info);
   1869e:	a803      	add	r0, sp, #12
   186a0:	f7f5 fb33 	bl	dd0a <di_init>
                                var_clear(&value);
   186a4:	a80a      	add	r0, sp, #40	; 0x28
   186a6:	f001 fd7e 	bl	1a1a6 <var_clear>
                                if ((ret = dlms_getData(e.value.byteArr, &info, &value)) != 0)
   186aa:	9810      	ldr	r0, [sp, #64]	; 0x40
   186ac:	aa0a      	add	r2, sp, #40	; 0x28
   186ae:	a903      	add	r1, sp, #12
   186b0:	f7f5 ffbb 	bl	e62a <dlms_getData>
   186b4:	4604      	mov	r4, r0
   186b6:	b120      	cbz	r0, 186c2 <compactData_updateTemplateDescription+0x17a>
                                        var_clear(&value);
   186b8:	a80a      	add	r0, sp, #40	; 0x28
   186ba:	e04a      	b.n	18752 <compactData_updateTemplateDescription+0x20a>
                                bb_setUInt8(&object->templateDescription, e.value.byteArr->data[1]);
   186bc:	f7f4 fafb 	bl	ccb6 <bb_setUInt8>
   186c0:	e7e5      	b.n	1868e <compactData_updateTemplateDescription+0x146>
                                if (info.type == DLMS_DATA_TYPE_STRUCTURE || info.type == DLMS_DATA_TYPE_ARRAY)
   186c2:	f89d 1010 	ldrb.w	r1, [sp, #16]
   186c6:	1e4b      	subs	r3, r1, #1
   186c8:	2b01      	cmp	r3, #1
                                    bb_setUInt8(&object->templateDescription, info.type);
   186ca:	4628      	mov	r0, r5
                                if (info.type == DLMS_DATA_TYPE_STRUCTURE || info.type == DLMS_DATA_TYPE_ARRAY)
   186cc:	d830      	bhi.n	18730 <compactData_updateTemplateDescription+0x1e8>
                                    bb_setUInt8(&object->templateDescription, info.type);
   186ce:	f7f4 faf2 	bl	ccb6 <bb_setUInt8>
                                    bb_setUInt8(&object->templateDescription, (unsigned char)value.Arr->size);
   186d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   186d4:	4628      	mov	r0, r5
   186d6:	7999      	ldrb	r1, [r3, #6]
   186d8:	f7f4 faed 	bl	ccb6 <bb_setUInt8>
                                    for (uint16_t pos = 0; pos < value.Arr->size; ++pos)
   186dc:	46a0      	mov	r8, r4
   186de:	980c      	ldr	r0, [sp, #48]	; 0x30
   186e0:	88c2      	ldrh	r2, [r0, #6]
   186e2:	fa1f f388 	uxth.w	r3, r8
   186e6:	429a      	cmp	r2, r3
   186e8:	d812      	bhi.n	18710 <compactData_updateTemplateDescription+0x1c8>
                                if (e.value.byteArr->data[0] == DLMS_DATA_TYPE_ARRAY)
   186ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
   186ec:	681b      	ldr	r3, [r3, #0]
   186ee:	781b      	ldrb	r3, [r3, #0]
   186f0:	2b01      	cmp	r3, #1
   186f2:	f10b 0b01 	add.w	fp, fp, #1
   186f6:	d1cc      	bne.n	18692 <compactData_updateTemplateDescription+0x14a>
                        var_clear(&value);
   186f8:	a80a      	add	r0, sp, #40	; 0x28
   186fa:	f001 fd54 	bl	1a1a6 <var_clear>
            var_clear(&e.value);
   186fe:	a80e      	add	r0, sp, #56	; 0x38
   18700:	f001 fd51 	bl	1a1a6 <var_clear>
            ve_clear(&e);
   18704:	a80e      	add	r0, sp, #56	; 0x38
   18706:	f001 f880 	bl	1980a <ve_clear>
        for (pos = 0; pos != object->captureObjects.size; ++pos)
   1870a:	f109 0901 	add.w	r9, r9, #1
   1870e:	e75b      	b.n	185c8 <compactData_updateTemplateDescription+0x80>
                                        if ((ret = va_getByIndex(value.Arr, pos, &value2)) != 0)
   18710:	fa1f f188 	uxth.w	r1, r8
   18714:	aa02      	add	r2, sp, #8
   18716:	f001 fdc4 	bl	1a2a2 <va_getByIndex>
   1871a:	f108 0801 	add.w	r8, r8, #1
   1871e:	4604      	mov	r4, r0
   18720:	2800      	cmp	r0, #0
   18722:	d1c9      	bne.n	186b8 <compactData_updateTemplateDescription+0x170>
                                        bb_setUInt8(&object->templateDescription, value2->vt);
   18724:	9b02      	ldr	r3, [sp, #8]
   18726:	4628      	mov	r0, r5
   18728:	7819      	ldrb	r1, [r3, #0]
   1872a:	f7f4 fac4 	bl	ccb6 <bb_setUInt8>
                                    for (uint16_t pos = 0; pos < value.Arr->size; ++pos)
   1872e:	e7d6      	b.n	186de <compactData_updateTemplateDescription+0x196>
                                    bb_setUInt8(&object->templateDescription, info.type);
   18730:	f7f4 fac1 	bl	ccb6 <bb_setUInt8>
   18734:	e7d9      	b.n	186ea <compactData_updateTemplateDescription+0x1a2>
                                var_clear(&value);
   18736:	4658      	mov	r0, fp
   18738:	f001 fd35 	bl	1a1a6 <var_clear>
                                di_init(&info);
   1873c:	a803      	add	r0, sp, #12
   1873e:	f7f5 fae4 	bl	dd0a <di_init>
                                if ((ret = dlms_getData(e.value.byteArr, &info, &value)) != 0)
   18742:	9810      	ldr	r0, [sp, #64]	; 0x40
   18744:	465a      	mov	r2, fp
   18746:	a903      	add	r1, sp, #12
   18748:	f7f5 ff6f 	bl	e62a <dlms_getData>
   1874c:	4604      	mov	r4, r0
   1874e:	b118      	cbz	r0, 18758 <compactData_updateTemplateDescription+0x210>
                                    var_clear(&value);
   18750:	4658      	mov	r0, fp
                                        var_clear(&value);
   18752:	f001 fd28 	bl	1a1a6 <var_clear>
   18756:	e751      	b.n	185fc <compactData_updateTemplateDescription+0xb4>
                                if (!info.complete)
   18758:	f89d 3011 	ldrb.w	r3, [sp, #17]
   1875c:	f108 0801 	add.w	r8, r8, #1
   18760:	b913      	cbnz	r3, 18768 <compactData_updateTemplateDescription+0x220>
                                    return DLMS_ERROR_CODE_READ_WRITE_DENIED;
   18762:	2403      	movs	r4, #3
   18764:	e71d      	b.n	185a2 <compactData_updateTemplateDescription+0x5a>
   18766:	4680      	mov	r8, r0
                            for (unsigned char pos = 0; pos < ((gxTarget*)kv->value)->dataIndex; ++pos)
   18768:	9b01      	ldr	r3, [sp, #4]
   1876a:	685a      	ldr	r2, [r3, #4]
   1876c:	8852      	ldrh	r2, [r2, #2]
   1876e:	fa5f f388 	uxtb.w	r3, r8
   18772:	4293      	cmp	r3, r2
   18774:	d3df      	bcc.n	18736 <compactData_updateTemplateDescription+0x1ee>
                            if (info.type == DLMS_DATA_TYPE_STRUCTURE)
   18776:	f89d 1010 	ldrb.w	r1, [sp, #16]
   1877a:	2902      	cmp	r1, #2
                                bb_setUInt8(&object->templateDescription, DLMS_DATA_TYPE_STRUCTURE);
   1877c:	4628      	mov	r0, r5
                            if (info.type == DLMS_DATA_TYPE_STRUCTURE)
   1877e:	d11e      	bne.n	187be <compactData_updateTemplateDescription+0x276>
                                bb_setUInt8(&object->templateDescription, DLMS_DATA_TYPE_STRUCTURE);
   18780:	f7f4 fa99 	bl	ccb6 <bb_setUInt8>
                                bb_setUInt8(&object->templateDescription, (unsigned char)value.Arr->size);
   18784:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   18786:	4628      	mov	r0, r5
   18788:	7999      	ldrb	r1, [r3, #6]
   1878a:	f7f4 fa94 	bl	ccb6 <bb_setUInt8>
                                for (uint16_t pos = 0; pos < value.Arr->size; ++pos)
   1878e:	f04f 0800 	mov.w	r8, #0
   18792:	980c      	ldr	r0, [sp, #48]	; 0x30
   18794:	88c2      	ldrh	r2, [r0, #6]
   18796:	fa1f f388 	uxth.w	r3, r8
   1879a:	429a      	cmp	r2, r3
   1879c:	d9ac      	bls.n	186f8 <compactData_updateTemplateDescription+0x1b0>
                                    if ((ret = va_getByIndex(value.Arr, pos, &value2)) != 0)
   1879e:	fa1f f188 	uxth.w	r1, r8
   187a2:	aa02      	add	r2, sp, #8
   187a4:	f001 fd7d 	bl	1a2a2 <va_getByIndex>
   187a8:	f108 0801 	add.w	r8, r8, #1
   187ac:	4604      	mov	r4, r0
   187ae:	2800      	cmp	r0, #0
   187b0:	d182      	bne.n	186b8 <compactData_updateTemplateDescription+0x170>
                                    bb_setUInt8(&object->templateDescription, value2->vt);
   187b2:	9b02      	ldr	r3, [sp, #8]
   187b4:	4628      	mov	r0, r5
   187b6:	7819      	ldrb	r1, [r3, #0]
   187b8:	f7f4 fa7d 	bl	ccb6 <bb_setUInt8>
                                for (uint16_t pos = 0; pos < value.Arr->size; ++pos)
   187bc:	e7e9      	b.n	18792 <compactData_updateTemplateDescription+0x24a>
                                bb_setUInt8(&object->templateDescription, info.type);
   187be:	f7f4 fa7a 	bl	ccb6 <bb_setUInt8>
   187c2:	e799      	b.n	186f8 <compactData_updateTemplateDescription+0x1b0>
                if ((ret = dlms_setData(&tmp, e.value.vt, &e.value)) != 0)
   187c4:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
   187c8:	aa0e      	add	r2, sp, #56	; 0x38
   187ca:	a807      	add	r0, sp, #28
   187cc:	f7f5 fb83 	bl	ded6 <dlms_setData>
   187d0:	4604      	mov	r4, r0
   187d2:	b130      	cbz	r0, 187e2 <compactData_updateTemplateDescription+0x29a>
                    var_clear(&e.value);
   187d4:	a80e      	add	r0, sp, #56	; 0x38
   187d6:	f001 fce6 	bl	1a1a6 <var_clear>
                    bb_clear(&tmp);
   187da:	a807      	add	r0, sp, #28
   187dc:	f7f4 fbc5 	bl	cf6a <bb_clear>
   187e0:	e6e9      	b.n	185b6 <compactData_updateTemplateDescription+0x6e>
                bb_setUInt8(&object->templateDescription, tmp.data[0]);
   187e2:	9b07      	ldr	r3, [sp, #28]
   187e4:	4628      	mov	r0, r5
   187e6:	7819      	ldrb	r1, [r3, #0]
   187e8:	f7f4 fa65 	bl	ccb6 <bb_setUInt8>
                bb_clear(&tmp);
   187ec:	a807      	add	r0, sp, #28
   187ee:	f7f4 fbbc 	bl	cf6a <bb_clear>
   187f2:	e784      	b.n	186fe <compactData_updateTemplateDescription+0x1b6>

000187f4 <cosem_setCompactData>:
    gxCompactData* object,
    unsigned char index,
    dlmsVARIANT* value)
{
    int ret = DLMS_ERROR_CODE_OK;
    switch (index)
   187f4:	3a02      	subs	r2, #2
{
   187f6:	b570      	push	{r4, r5, r6, lr}
   187f8:	4606      	mov	r6, r0
   187fa:	460c      	mov	r4, r1
   187fc:	461d      	mov	r5, r3
   187fe:	2a04      	cmp	r2, #4
   18800:	d82e      	bhi.n	18860 <cosem_setCompactData+0x6c>
   18802:	e8df f002 	tbb	[pc, r2]
   18806:	1003      	.short	0x1003
   18808:	251e      	.short	0x251e
   1880a:	27          	.byte	0x27
   1880b:	00          	.byte	0x00
    {
    case 2:
        bb_clear(&object->buffer);
   1880c:	3410      	adds	r4, #16
        break;
    case 4:
        object->templateId = (unsigned char) var_toInteger(value);
        break;
    case 5:
        bb_clear(&object->templateDescription);
   1880e:	4620      	mov	r0, r4
   18810:	f7f4 fbab 	bl	cf6a <bb_clear>
        if (value->byteArr != NULL)
   18814:	68ab      	ldr	r3, [r5, #8]
   18816:	b1cb      	cbz	r3, 1884c <cosem_setCompactData+0x58>
        {
            ret = bb_set(&object->templateDescription, value->byteArr->data, value->byteArr->size);
   18818:	4620      	mov	r0, r4
   1881a:	88da      	ldrh	r2, [r3, #6]
   1881c:	6819      	ldr	r1, [r3, #0]
        break;
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    return ret;
}
   1881e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            ret = bb_set(&object->templateDescription, value->byteArr->data, value->byteArr->size);
   18822:	f7f4 bb2e 	b.w	ce82 <bb_set>
        ret = setCaptureObjects(settings, &object->captureObjects, value);
   18826:	462a      	mov	r2, r5
   18828:	311c      	adds	r1, #28
   1882a:	f7ff fc23 	bl	18074 <setCaptureObjects>
        if (ret == 0 && settings->server)
   1882e:	b970      	cbnz	r0, 1884e <cosem_setCompactData+0x5a>
   18830:	f896 3058 	ldrb.w	r3, [r6, #88]	; 0x58
   18834:	b153      	cbz	r3, 1884c <cosem_setCompactData+0x58>
            ret = compactData_updateTemplateDescription(settings, object);
   18836:	4621      	mov	r1, r4
   18838:	4630      	mov	r0, r6
}
   1883a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            ret = compactData_updateTemplateDescription(settings, object);
   1883e:	f7ff be83 	b.w	18548 <compactData_updateTemplateDescription>
        object->templateId = (unsigned char) var_toInteger(value);
   18842:	4628      	mov	r0, r5
   18844:	f001 fea7 	bl	1a596 <var_toInteger>
   18848:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    int ret = DLMS_ERROR_CODE_OK;
   1884c:	2000      	movs	r0, #0
}
   1884e:	bd70      	pop	{r4, r5, r6, pc}
        bb_clear(&object->templateDescription);
   18850:	342c      	adds	r4, #44	; 0x2c
   18852:	e7dc      	b.n	1880e <cosem_setCompactData+0x1a>
        object->captureMethod = (DLMS_CAPTURE_METHOD)var_toInteger(value);
   18854:	4628      	mov	r0, r5
   18856:	f001 fe9e 	bl	1a596 <var_toInteger>
   1885a:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
   1885e:	e7f5      	b.n	1884c <cosem_setCompactData+0x58>
    int ret = DLMS_ERROR_CODE_OK;
   18860:	f44f 7081 	mov.w	r0, #258	; 0x102
    return ret;
   18864:	e7f3      	b.n	1884e <cosem_setCompactData+0x5a>

00018866 <cosem_setParameterMonitor>:
int cosem_setParameterMonitor(
    dlmsSettings* settings,
    gxParameterMonitor* object,
    unsigned char index,
    dlmsVARIANT* value)
{
   18866:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int ret = 0, pos;
    dlmsVARIANT* tmp, * tmp3;
    dlmsVARIANT tmp2;
    DLMS_OBJECT_TYPE type;
    switch (index)
   1886a:	2a03      	cmp	r2, #3
{
   1886c:	b086      	sub	sp, #24
   1886e:	4607      	mov	r7, r0
   18870:	468a      	mov	sl, r1
   18872:	461e      	mov	r6, r3
    switch (index)
   18874:	d062      	beq.n	1893c <cosem_setParameterMonitor+0xd6>
   18876:	2a04      	cmp	r2, #4
   18878:	f000 8081 	beq.w	1897e <cosem_setParameterMonitor+0x118>
   1887c:	2a02      	cmp	r2, #2
   1887e:	f040 80f0 	bne.w	18a62 <cosem_setParameterMonitor+0x1fc>
    {
    case 2:
    {
#ifndef DLMS_IGNORE_OBJECT_POINTERS
        object->changedParameter.target = NULL;
   18882:	2100      	movs	r1, #0
   18884:	f8ca 1010 	str.w	r1, [sl, #16]
#else
        object->changedParameter.type = DLMS_OBJECT_TYPE_NONE;
        memset(object->changedParameter.logicalName, 0, 6);
#endif //DLMS_IGNORE_OBJECT_POINTERS
        if (value->Arr != NULL)
   18888:	6898      	ldr	r0, [r3, #8]
   1888a:	b908      	cbnz	r0, 18890 <cosem_setParameterMonitor+0x2a>
   1888c:	2400      	movs	r4, #0
   1888e:	e051      	b.n	18934 <cosem_setParameterMonitor+0xce>
        {
            if ((ret = va_getByIndex(value->Arr, 0, &tmp3)) == DLMS_ERROR_CODE_OK)
   18890:	aa01      	add	r2, sp, #4
   18892:	f001 fd06 	bl	1a2a2 <va_getByIndex>
   18896:	4604      	mov	r4, r0
   18898:	2800      	cmp	r0, #0
   1889a:	d14b      	bne.n	18934 <cosem_setParameterMonitor+0xce>
            {
                type = (DLMS_OBJECT_TYPE)var_toInteger(tmp3);
   1889c:	9801      	ldr	r0, [sp, #4]
   1889e:	f001 fe7a 	bl	1a596 <var_toInteger>
                //Get LN.
                if ((ret = va_getByIndex(value->Arr, 1, &tmp3)) == DLMS_ERROR_CODE_OK)
   188a2:	aa01      	add	r2, sp, #4
                type = (DLMS_OBJECT_TYPE)var_toInteger(tmp3);
   188a4:	4680      	mov	r8, r0
                if ((ret = va_getByIndex(value->Arr, 1, &tmp3)) == DLMS_ERROR_CODE_OK)
   188a6:	2101      	movs	r1, #1
   188a8:	68b0      	ldr	r0, [r6, #8]
   188aa:	f001 fcfa 	bl	1a2a2 <va_getByIndex>
   188ae:	4604      	mov	r4, r0
   188b0:	2800      	cmp	r0, #0
   188b2:	d13f      	bne.n	18934 <cosem_setParameterMonitor+0xce>
                {
#ifndef DLMS_IGNORE_OBJECT_POINTERS
                    if ((ret = oa_findByLN(&settings->objects, type, tmp3->byteArr->data, &object->changedParameter.target)) != 0)
   188b4:	9b01      	ldr	r3, [sp, #4]
   188b6:	689a      	ldr	r2, [r3, #8]
                type = (DLMS_OBJECT_TYPE)var_toInteger(tmp3);
   188b8:	fa1f f888 	uxth.w	r8, r8
                    if ((ret = oa_findByLN(&settings->objects, type, tmp3->byteArr->data, &object->changedParameter.target)) != 0)
   188bc:	f10a 0910 	add.w	r9, sl, #16
   188c0:	6812      	ldr	r2, [r2, #0]
   188c2:	464b      	mov	r3, r9
   188c4:	4641      	mov	r1, r8
   188c6:	f107 0098 	add.w	r0, r7, #152	; 0x98
   188ca:	f001 faa7 	bl	19e1c <oa_findByLN>
   188ce:	4604      	mov	r4, r0
   188d0:	bb80      	cbnz	r0, 18934 <cosem_setParameterMonitor+0xce>
                    {
                        return ret;
                    }
                    if (object->changedParameter.target == NULL)
   188d2:	f8da 3010 	ldr.w	r3, [sl, #16]
   188d6:	b9a3      	cbnz	r3, 18902 <cosem_setParameterMonitor+0x9c>
                    {
                        if ((ret = cosem_createObject(type, &object->changedParameter.target)) != 0)
   188d8:	4649      	mov	r1, r9
   188da:	4640      	mov	r0, r8
   188dc:	f7e9 fac0 	bl	1e60 <cosem_createObject>
   188e0:	4604      	mov	r4, r0
   188e2:	bb38      	cbnz	r0, 18934 <cosem_setParameterMonitor+0xce>
                        {
                            return ret;
                        }
                        oa_push(&settings->releasedObjects, object->changedParameter.target);
   188e4:	f8da 1010 	ldr.w	r1, [sl, #16]
   188e8:	f107 00e4 	add.w	r0, r7, #228	; 0xe4
   188ec:	f001 fa36 	bl	19d5c <oa_push>
                        memcpy(object->changedParameter.target->logicalName, tmp3->byteArr->data, tmp3->byteArr->size);
   188f0:	9b01      	ldr	r3, [sp, #4]
   188f2:	f8da 0010 	ldr.w	r0, [sl, #16]
   188f6:	689b      	ldr	r3, [r3, #8]
   188f8:	3006      	adds	r0, #6
   188fa:	88da      	ldrh	r2, [r3, #6]
   188fc:	6819      	ldr	r1, [r3, #0]
   188fe:	f003 fbef 	bl	1c0e0 <memcpy>
                    }
                    if ((ret = va_getByIndex(value->Arr, 2, &tmp3)) == DLMS_ERROR_CODE_OK)
   18902:	68b0      	ldr	r0, [r6, #8]
   18904:	aa01      	add	r2, sp, #4
   18906:	2102      	movs	r1, #2
   18908:	f001 fccb 	bl	1a2a2 <va_getByIndex>
   1890c:	4604      	mov	r4, r0
   1890e:	b988      	cbnz	r0, 18934 <cosem_setParameterMonitor+0xce>
                    {
                        object->changedParameter.attributeIndex = (unsigned char)var_toInteger(tmp3);
   18910:	9801      	ldr	r0, [sp, #4]
   18912:	f001 fe40 	bl	1a596 <var_toInteger>
   18916:	f88a 0014 	strb.w	r0, [sl, #20]
                        if ((ret = va_getByIndex(value->Arr, 3, &tmp3)) == DLMS_ERROR_CODE_OK)
   1891a:	68b0      	ldr	r0, [r6, #8]
   1891c:	aa01      	add	r2, sp, #4
   1891e:	2103      	movs	r1, #3
   18920:	f001 fcbf 	bl	1a2a2 <va_getByIndex>
   18924:	4604      	mov	r4, r0
   18926:	b928      	cbnz	r0, 18934 <cosem_setParameterMonitor+0xce>
                        {
                            ret = var_copy(&object->changedParameter.value, tmp3);
   18928:	9901      	ldr	r1, [sp, #4]
   1892a:	f10a 0018 	add.w	r0, sl, #24
   1892e:	f7eb fce5 	bl	42fc <var_copy>
   18932:	4604      	mov	r4, r0
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   18934:	4620      	mov	r0, r4
   18936:	b006      	add	sp, #24
   18938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (value->vt == DLMS_DATA_TYPE_OCTET_STRING && value->byteArr != NULL)
   1893c:	781b      	ldrb	r3, [r3, #0]
   1893e:	2b09      	cmp	r3, #9
   18940:	d118      	bne.n	18974 <cosem_setParameterMonitor+0x10e>
   18942:	68b3      	ldr	r3, [r6, #8]
   18944:	b1b3      	cbz	r3, 18974 <cosem_setParameterMonitor+0x10e>
            ret = var_init(&tmp2);
   18946:	a802      	add	r0, sp, #8
   18948:	f001 fad1 	bl	19eee <var_init>
            if (ret != DLMS_ERROR_CODE_OK)
   1894c:	4604      	mov	r4, r0
   1894e:	2800      	cmp	r0, #0
   18950:	d1f0      	bne.n	18934 <cosem_setParameterMonitor+0xce>
            ret = dlms_changeType2(value, DLMS_DATA_TYPE_DATETIME, &tmp2);
   18952:	aa02      	add	r2, sp, #8
   18954:	2119      	movs	r1, #25
   18956:	4630      	mov	r0, r6
   18958:	f7f7 f9f5 	bl	fd46 <dlms_changeType2>
            if (ret != DLMS_ERROR_CODE_OK)
   1895c:	4604      	mov	r4, r0
   1895e:	2800      	cmp	r0, #0
   18960:	d1e8      	bne.n	18934 <cosem_setParameterMonitor+0xce>
            time_copy(&object->captureTime, tmp2.dateTime);
   18962:	f10a 0028 	add.w	r0, sl, #40	; 0x28
   18966:	9904      	ldr	r1, [sp, #16]
   18968:	f7f5 fa3a 	bl	dde0 <time_copy>
            var_clear(&tmp2);
   1896c:	a802      	add	r0, sp, #8
   1896e:	f001 fc1a 	bl	1a1a6 <var_clear>
   18972:	e7df      	b.n	18934 <cosem_setParameterMonitor+0xce>
            time_clear(&object->captureTime);
   18974:	f10a 0028 	add.w	r0, sl, #40	; 0x28
   18978:	f7f5 fa01 	bl	dd7e <time_clear>
   1897c:	e786      	b.n	1888c <cosem_setParameterMonitor+0x26>
        obj_clearParametersList(&object->parameters);
   1897e:	f101 0a34 	add.w	sl, r1, #52	; 0x34
   18982:	4650      	mov	r0, sl
   18984:	f7fb fabd 	bl	13f02 <obj_clearParametersList>
        if (value->Arr != NULL)
   18988:	68b3      	ldr	r3, [r6, #8]
   1898a:	2b00      	cmp	r3, #0
   1898c:	f43f af7e 	beq.w	1888c <cosem_setParameterMonitor+0x26>
            for (pos = 0; pos != value->Arr->size; ++pos)
   18990:	f04f 0800 	mov.w	r8, #0
   18994:	e05d      	b.n	18a52 <cosem_setParameterMonitor+0x1ec>
                ret = va_getByIndex(value->Arr, pos, &tmp);
   18996:	466a      	mov	r2, sp
   18998:	4641      	mov	r1, r8
   1899a:	f001 fc82 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   1899e:	4604      	mov	r4, r0
   189a0:	2800      	cmp	r0, #0
   189a2:	d1c7      	bne.n	18934 <cosem_setParameterMonitor+0xce>
                ret = va_getByIndex(tmp->Arr, 0, &tmp3);
   189a4:	9b00      	ldr	r3, [sp, #0]
   189a6:	4601      	mov	r1, r0
   189a8:	aa01      	add	r2, sp, #4
   189aa:	6898      	ldr	r0, [r3, #8]
   189ac:	f001 fc79 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   189b0:	4604      	mov	r4, r0
   189b2:	2800      	cmp	r0, #0
   189b4:	d1be      	bne.n	18934 <cosem_setParameterMonitor+0xce>
                type = (DLMS_OBJECT_TYPE)var_toInteger(tmp3);
   189b6:	9801      	ldr	r0, [sp, #4]
   189b8:	f001 fded 	bl	1a596 <var_toInteger>
                ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   189bc:	9b00      	ldr	r3, [sp, #0]
                type = (DLMS_OBJECT_TYPE)var_toInteger(tmp3);
   189be:	fa1f f980 	uxth.w	r9, r0
                ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   189c2:	aa01      	add	r2, sp, #4
   189c4:	6898      	ldr	r0, [r3, #8]
   189c6:	2101      	movs	r1, #1
   189c8:	f001 fc6b 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   189cc:	4604      	mov	r4, r0
   189ce:	2800      	cmp	r0, #0
   189d0:	d1b0      	bne.n	18934 <cosem_setParameterMonitor+0xce>
                if ((ret = oa_findByLN(&settings->objects, type, tmp3->byteArr->data, &obj)) != 0)
   189d2:	9b01      	ldr	r3, [sp, #4]
                obj = NULL;
   189d4:	9002      	str	r0, [sp, #8]
                if ((ret = oa_findByLN(&settings->objects, type, tmp3->byteArr->data, &obj)) != 0)
   189d6:	689a      	ldr	r2, [r3, #8]
   189d8:	4649      	mov	r1, r9
   189da:	6812      	ldr	r2, [r2, #0]
   189dc:	ab02      	add	r3, sp, #8
   189de:	f107 0098 	add.w	r0, r7, #152	; 0x98
   189e2:	f001 fa1b 	bl	19e1c <oa_findByLN>
   189e6:	4604      	mov	r4, r0
   189e8:	2800      	cmp	r0, #0
   189ea:	d1a3      	bne.n	18934 <cosem_setParameterMonitor+0xce>
                if (obj == NULL)
   189ec:	9b02      	ldr	r3, [sp, #8]
   189ee:	b99b      	cbnz	r3, 18a18 <cosem_setParameterMonitor+0x1b2>
                    if ((ret = cosem_createObject(type, &obj)) != 0)
   189f0:	a902      	add	r1, sp, #8
   189f2:	4648      	mov	r0, r9
   189f4:	f7e9 fa34 	bl	1e60 <cosem_createObject>
   189f8:	4604      	mov	r4, r0
   189fa:	2800      	cmp	r0, #0
   189fc:	d19a      	bne.n	18934 <cosem_setParameterMonitor+0xce>
                    oa_push(&settings->releasedObjects, obj);
   189fe:	9902      	ldr	r1, [sp, #8]
   18a00:	f107 00e4 	add.w	r0, r7, #228	; 0xe4
   18a04:	f001 f9aa 	bl	19d5c <oa_push>
                    memcpy(obj->logicalName, tmp3->byteArr->data, tmp3->byteArr->size);
   18a08:	9b01      	ldr	r3, [sp, #4]
   18a0a:	9802      	ldr	r0, [sp, #8]
   18a0c:	689b      	ldr	r3, [r3, #8]
   18a0e:	3006      	adds	r0, #6
   18a10:	88da      	ldrh	r2, [r3, #6]
   18a12:	6819      	ldr	r1, [r3, #0]
   18a14:	f003 fb64 	bl	1c0e0 <memcpy>
                it = (gxTarget*)gxmalloc(sizeof(gxTarget));
   18a18:	2004      	movs	r0, #4
   18a1a:	f7f3 f8cb 	bl	bbb4 <malloc>
                if (it == NULL)
   18a1e:	4605      	mov	r5, r0
   18a20:	b1e0      	cbz	r0, 18a5c <cosem_setParameterMonitor+0x1f6>
                ret = va_getByIndex(tmp->Arr, 2, &tmp3);
   18a22:	9b00      	ldr	r3, [sp, #0]
   18a24:	aa01      	add	r2, sp, #4
   18a26:	6898      	ldr	r0, [r3, #8]
   18a28:	2102      	movs	r1, #2
   18a2a:	f001 fc3a 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   18a2e:	4604      	mov	r4, r0
   18a30:	2800      	cmp	r0, #0
   18a32:	f47f af7f 	bne.w	18934 <cosem_setParameterMonitor+0xce>
                it->attributeIndex = (unsigned char)var_toInteger(tmp3);
   18a36:	9801      	ldr	r0, [sp, #4]
   18a38:	f001 fdad 	bl	1a596 <var_toInteger>
                arr_push(&object->parameters, key_init(obj, it));
   18a3c:	4629      	mov	r1, r5
                it->attributeIndex = (unsigned char)var_toInteger(tmp3);
   18a3e:	7028      	strb	r0, [r5, #0]
                arr_push(&object->parameters, key_init(obj, it));
   18a40:	9802      	ldr	r0, [sp, #8]
   18a42:	f7fa ff6c 	bl	1391e <key_init>
   18a46:	4601      	mov	r1, r0
   18a48:	4650      	mov	r0, sl
   18a4a:	f7f7 fc5f 	bl	1030c <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   18a4e:	f108 0801 	add.w	r8, r8, #1
   18a52:	68b0      	ldr	r0, [r6, #8]
   18a54:	88c3      	ldrh	r3, [r0, #6]
   18a56:	4543      	cmp	r3, r8
   18a58:	d19d      	bne.n	18996 <cosem_setParameterMonitor+0x130>
   18a5a:	e717      	b.n	1888c <cosem_setParameterMonitor+0x26>
                    ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   18a5c:	f44f 7482 	mov.w	r4, #260	; 0x104
   18a60:	e768      	b.n	18934 <cosem_setParameterMonitor+0xce>
    switch (index)
   18a62:	f44f 7481 	mov.w	r4, #258	; 0x102
   18a66:	e765      	b.n	18934 <cosem_setParameterMonitor+0xce>

00018a68 <cosem_setLlcSscsSetup>:
    gxLlcSscsSetup* object,
    unsigned char index,
    dlmsVARIANT* value)
{
    int ret = 0;
    switch (index)
   18a68:	2a02      	cmp	r2, #2
{
   18a6a:	b510      	push	{r4, lr}
   18a6c:	4618      	mov	r0, r3
   18a6e:	460c      	mov	r4, r1
    switch (index)
   18a70:	d004      	beq.n	18a7c <cosem_setLlcSscsSetup+0x14>
   18a72:	2a03      	cmp	r2, #3
   18a74:	d007      	beq.n	18a86 <cosem_setLlcSscsSetup+0x1e>
   18a76:	f44f 7081 	mov.w	r0, #258	; 0x102
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   18a7a:	bd10      	pop	{r4, pc}
        object->serviceNodeAddress = (uint16_t)var_toInteger(value);
   18a7c:	f001 fd8b 	bl	1a596 <var_toInteger>
   18a80:	8220      	strh	r0, [r4, #16]
    int ret = 0;
   18a82:	2000      	movs	r0, #0
    return ret;
   18a84:	e7f9      	b.n	18a7a <cosem_setLlcSscsSetup+0x12>
        object->baseNodeAddress = (uint16_t)var_toInteger(value);
   18a86:	f001 fd86 	bl	1a596 <var_toInteger>
   18a8a:	8260      	strh	r0, [r4, #18]
   18a8c:	e7f9      	b.n	18a82 <cosem_setLlcSscsSetup+0x1a>

00018a8e <cosem_setPrimeNbOfdmPlcPhysicalLayerCounters>:
    gxPrimeNbOfdmPlcPhysicalLayerCounters* object,
    unsigned char index,
    dlmsVARIANT* value)
{
    int ret = 0;
    switch (index)
   18a8e:	3a02      	subs	r2, #2
{
   18a90:	b510      	push	{r4, lr}
   18a92:	4618      	mov	r0, r3
   18a94:	460c      	mov	r4, r1
   18a96:	2a03      	cmp	r2, #3
   18a98:	d814      	bhi.n	18ac4 <cosem_setPrimeNbOfdmPlcPhysicalLayerCounters+0x36>
   18a9a:	e8df f002 	tbb	[pc, r2]
   18a9e:	0702      	.short	0x0702
   18aa0:	0f0b      	.short	0x0f0b
    {
    case 2:
        object->crcIncorrectCount =(uint16_t) var_toInteger(value);
   18aa2:	f001 fd78 	bl	1a596 <var_toInteger>
   18aa6:	8220      	strh	r0, [r4, #16]
    int ret = 0;
   18aa8:	2000      	movs	r0, #0
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   18aaa:	bd10      	pop	{r4, pc}
        object->crcFailedCount = (uint16_t)var_toInteger(value);
   18aac:	f001 fd73 	bl	1a596 <var_toInteger>
   18ab0:	8260      	strh	r0, [r4, #18]
        break;
   18ab2:	e7f9      	b.n	18aa8 <cosem_setPrimeNbOfdmPlcPhysicalLayerCounters+0x1a>
        object->txDropCount = (uint16_t)var_toInteger(value);
   18ab4:	f001 fd6f 	bl	1a596 <var_toInteger>
   18ab8:	82a0      	strh	r0, [r4, #20]
        break;
   18aba:	e7f5      	b.n	18aa8 <cosem_setPrimeNbOfdmPlcPhysicalLayerCounters+0x1a>
        object->rxDropCount = (uint16_t)var_toInteger(value);
   18abc:	f001 fd6b 	bl	1a596 <var_toInteger>
   18ac0:	82e0      	strh	r0, [r4, #22]
   18ac2:	e7f1      	b.n	18aa8 <cosem_setPrimeNbOfdmPlcPhysicalLayerCounters+0x1a>
    int ret = 0;
   18ac4:	f44f 7081 	mov.w	r0, #258	; 0x102
    return ret;
   18ac8:	e7ef      	b.n	18aaa <cosem_setPrimeNbOfdmPlcPhysicalLayerCounters+0x1c>

00018aca <cosem_setPrimeNbOfdmPlcMacSetup>:
    gxPrimeNbOfdmPlcMacSetup* object,
    unsigned char index,
    dlmsVARIANT* value)
{
    int ret = 0;
    switch (index)
   18aca:	3a02      	subs	r2, #2
{
   18acc:	b510      	push	{r4, lr}
   18ace:	4618      	mov	r0, r3
   18ad0:	460c      	mov	r4, r1
   18ad2:	2a06      	cmp	r2, #6
   18ad4:	d822      	bhi.n	18b1c <cosem_setPrimeNbOfdmPlcMacSetup+0x52>
   18ad6:	e8df f002 	tbb	[pc, r2]
   18ada:	0904      	.short	0x0904
   18adc:	1915110d 	.word	0x1915110d
   18ae0:	1d          	.byte	0x1d
   18ae1:	00          	.byte	0x00
    {
    case 2:
        object->macMinSwitchSearchTime = (unsigned char) var_toInteger(value);
   18ae2:	f001 fd58 	bl	1a596 <var_toInteger>
   18ae6:	7420      	strb	r0, [r4, #16]
    int ret = 0;
   18ae8:	2000      	movs	r0, #0
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   18aea:	bd10      	pop	{r4, pc}
        object->macMaxPromotionPdu =(unsigned char)  var_toInteger(value);
   18aec:	f001 fd53 	bl	1a596 <var_toInteger>
   18af0:	7460      	strb	r0, [r4, #17]
        break;
   18af2:	e7f9      	b.n	18ae8 <cosem_setPrimeNbOfdmPlcMacSetup+0x1e>
        object->macPromotionPduTxPeriod = (unsigned char)var_toInteger(value);
   18af4:	f001 fd4f 	bl	1a596 <var_toInteger>
   18af8:	74a0      	strb	r0, [r4, #18]
        break;
   18afa:	e7f5      	b.n	18ae8 <cosem_setPrimeNbOfdmPlcMacSetup+0x1e>
        object->macBeaconsPerFrame = (unsigned char)var_toInteger(value);
   18afc:	f001 fd4b 	bl	1a596 <var_toInteger>
   18b00:	74e0      	strb	r0, [r4, #19]
        break;
   18b02:	e7f1      	b.n	18ae8 <cosem_setPrimeNbOfdmPlcMacSetup+0x1e>
        object->macScpMaxTxAttempts = (unsigned char) var_toInteger(value);
   18b04:	f001 fd47 	bl	1a596 <var_toInteger>
   18b08:	7520      	strb	r0, [r4, #20]
        break;
   18b0a:	e7ed      	b.n	18ae8 <cosem_setPrimeNbOfdmPlcMacSetup+0x1e>
        object->macCtlReTxTimer =(unsigned char)  var_toInteger(value);
   18b0c:	f001 fd43 	bl	1a596 <var_toInteger>
   18b10:	7560      	strb	r0, [r4, #21]
        break;
   18b12:	e7e9      	b.n	18ae8 <cosem_setPrimeNbOfdmPlcMacSetup+0x1e>
        object->macMaxCtlReTx = (unsigned char) var_toInteger(value);
   18b14:	f001 fd3f 	bl	1a596 <var_toInteger>
   18b18:	75a0      	strb	r0, [r4, #22]
   18b1a:	e7e5      	b.n	18ae8 <cosem_setPrimeNbOfdmPlcMacSetup+0x1e>
    int ret = 0;
   18b1c:	f44f 7081 	mov.w	r0, #258	; 0x102
    return ret;
   18b20:	e7e3      	b.n	18aea <cosem_setPrimeNbOfdmPlcMacSetup+0x20>

00018b22 <cosem_setPrimeNbOfdmPlcMacFunctionalParameters>:
    gxPrimeNbOfdmPlcMacFunctionalParameters* object,
    unsigned char index,
    dlmsVARIANT* value)
{
    int ret = 0;
    switch (index)
   18b22:	3a02      	subs	r2, #2
{
   18b24:	b570      	push	{r4, r5, r6, lr}
   18b26:	4618      	mov	r0, r3
   18b28:	460c      	mov	r4, r1
   18b2a:	2a0c      	cmp	r2, #12
   18b2c:	d84f      	bhi.n	18bce <cosem_setPrimeNbOfdmPlcMacFunctionalParameters+0xac>
   18b2e:	e8df f002 	tbb	[pc, r2]
   18b32:	0c07      	.short	0x0c07
   18b34:	28231410 	.word	0x28231410
   18b38:	3b36312c 	.word	0x3b36312c
   18b3c:	4540      	.short	0x4540
   18b3e:	4a          	.byte	0x4a
   18b3f:	00          	.byte	0x00
    {
    case 2:
        object->lnId = (short)var_toInteger(value);
   18b40:	f001 fd29 	bl	1a596 <var_toInteger>
   18b44:	8220      	strh	r0, [r4, #16]
    int ret = 0;
   18b46:	2000      	movs	r0, #0
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   18b48:	bd70      	pop	{r4, r5, r6, pc}
        object->lsId = (unsigned char) var_toInteger(value);
   18b4a:	f001 fd24 	bl	1a596 <var_toInteger>
   18b4e:	74a0      	strb	r0, [r4, #18]
        break;
   18b50:	e7f9      	b.n	18b46 <cosem_setPrimeNbOfdmPlcMacFunctionalParameters+0x24>
        object->sId =(unsigned char)  var_toInteger(value);
   18b52:	f001 fd20 	bl	1a596 <var_toInteger>
   18b56:	74e0      	strb	r0, [r4, #19]
        break;
   18b58:	e7f5      	b.n	18b46 <cosem_setPrimeNbOfdmPlcMacFunctionalParameters+0x24>
        ret = bb_set2(&object->sna, value->byteArr, 0, bb_size(value->byteArr));
   18b5a:	6885      	ldr	r5, [r0, #8]
        object->sna.size = 0;
   18b5c:	2600      	movs	r6, #0
   18b5e:	834e      	strh	r6, [r1, #26]
        ret = bb_set2(&object->sna, value->byteArr, 0, bb_size(value->byteArr));
   18b60:	4628      	mov	r0, r5
   18b62:	f7f4 f83c 	bl	cbde <bb_size>
   18b66:	4632      	mov	r2, r6
   18b68:	4603      	mov	r3, r0
   18b6a:	4629      	mov	r1, r5
   18b6c:	f104 0014 	add.w	r0, r4, #20
}
   18b70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ret = bb_set2(&object->sna, value->byteArr, 0, bb_size(value->byteArr));
   18b74:	f7f4 b9b4 	b.w	cee0 <bb_set2>
        object->state = (DLMS_MAC_STATE)var_toInteger(value);
   18b78:	f001 fd0d 	bl	1a596 <var_toInteger>
   18b7c:	f884 0020 	strb.w	r0, [r4, #32]
        break;
   18b80:	e7e1      	b.n	18b46 <cosem_setPrimeNbOfdmPlcMacFunctionalParameters+0x24>
        object->scpLength = (short)  var_toInteger(value);
   18b82:	f001 fd08 	bl	1a596 <var_toInteger>
   18b86:	8460      	strh	r0, [r4, #34]	; 0x22
        break;
   18b88:	e7dd      	b.n	18b46 <cosem_setPrimeNbOfdmPlcMacFunctionalParameters+0x24>
        object->nodeHierarchyLevel = (unsigned char)var_toInteger(value);
   18b8a:	f001 fd04 	bl	1a596 <var_toInteger>
   18b8e:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
        break;
   18b92:	e7d8      	b.n	18b46 <cosem_setPrimeNbOfdmPlcMacFunctionalParameters+0x24>
        object->beaconSlotCount = (unsigned char)var_toInteger(value);
   18b94:	f001 fcff 	bl	1a596 <var_toInteger>
   18b98:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
        break;
   18b9c:	e7d3      	b.n	18b46 <cosem_setPrimeNbOfdmPlcMacFunctionalParameters+0x24>
        object->beaconRxSlot = (unsigned char)var_toInteger(value);
   18b9e:	f001 fcfa 	bl	1a596 <var_toInteger>
   18ba2:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
        break;
   18ba6:	e7ce      	b.n	18b46 <cosem_setPrimeNbOfdmPlcMacFunctionalParameters+0x24>
        object->beaconTxSlot = (unsigned char)var_toInteger(value);
   18ba8:	f001 fcf5 	bl	1a596 <var_toInteger>
   18bac:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
        break;
   18bb0:	e7c9      	b.n	18b46 <cosem_setPrimeNbOfdmPlcMacFunctionalParameters+0x24>
        object->beaconRxFrequency =(unsigned char) var_toInteger(value);
   18bb2:	f001 fcf0 	bl	1a596 <var_toInteger>
   18bb6:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
        break;
   18bba:	e7c4      	b.n	18b46 <cosem_setPrimeNbOfdmPlcMacFunctionalParameters+0x24>
        object->beaconTxFrequency = (unsigned char)var_toInteger(value);
   18bbc:	f001 fceb 	bl	1a596 <var_toInteger>
   18bc0:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
        break;
   18bc4:	e7bf      	b.n	18b46 <cosem_setPrimeNbOfdmPlcMacFunctionalParameters+0x24>
        object->capabilities = (DLMS_MAC_CAPABILITIES)var_toInteger(value);
   18bc6:	f001 fce6 	bl	1a596 <var_toInteger>
   18bca:	8560      	strh	r0, [r4, #42]	; 0x2a
   18bcc:	e7bb      	b.n	18b46 <cosem_setPrimeNbOfdmPlcMacFunctionalParameters+0x24>
    int ret = 0;
   18bce:	f44f 7081 	mov.w	r0, #258	; 0x102
    return ret;
   18bd2:	e7b9      	b.n	18b48 <cosem_setPrimeNbOfdmPlcMacFunctionalParameters+0x26>

00018bd4 <cosem_setPrimeNbOfdmPlcMacCounters>:
    gxPrimeNbOfdmPlcMacCounters* object,
    unsigned char index,
    dlmsVARIANT* value)
{
    int ret = 0;
    switch (index)
   18bd4:	3a02      	subs	r2, #2
{
   18bd6:	b510      	push	{r4, lr}
   18bd8:	4618      	mov	r0, r3
   18bda:	460c      	mov	r4, r1
   18bdc:	2a05      	cmp	r2, #5
   18bde:	d81d      	bhi.n	18c1c <cosem_setPrimeNbOfdmPlcMacCounters+0x48>
   18be0:	e8df f002 	tbb	[pc, r2]
   18be4:	100c0803 	.word	0x100c0803
   18be8:	1814      	.short	0x1814
    {
    case 2:
        object->txDataPktCount = var_toInteger(value);
   18bea:	f001 fcd4 	bl	1a596 <var_toInteger>
   18bee:	6120      	str	r0, [r4, #16]
    int ret = 0;
   18bf0:	2000      	movs	r0, #0
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   18bf2:	bd10      	pop	{r4, pc}
        object->rxDataPktCount = var_toInteger(value);
   18bf4:	f001 fccf 	bl	1a596 <var_toInteger>
   18bf8:	6160      	str	r0, [r4, #20]
        break;
   18bfa:	e7f9      	b.n	18bf0 <cosem_setPrimeNbOfdmPlcMacCounters+0x1c>
        object->txCtrlPktCount = var_toInteger(value);
   18bfc:	f001 fccb 	bl	1a596 <var_toInteger>
   18c00:	61a0      	str	r0, [r4, #24]
        break;
   18c02:	e7f5      	b.n	18bf0 <cosem_setPrimeNbOfdmPlcMacCounters+0x1c>
        object->rxCtrlPktCount = var_toInteger(value);
   18c04:	f001 fcc7 	bl	1a596 <var_toInteger>
   18c08:	61e0      	str	r0, [r4, #28]
        break;
   18c0a:	e7f1      	b.n	18bf0 <cosem_setPrimeNbOfdmPlcMacCounters+0x1c>
        object->csmaFailCount = var_toInteger(value);
   18c0c:	f001 fcc3 	bl	1a596 <var_toInteger>
   18c10:	6220      	str	r0, [r4, #32]
        break;
   18c12:	e7ed      	b.n	18bf0 <cosem_setPrimeNbOfdmPlcMacCounters+0x1c>
        object->csmaChBusyCount = var_toInteger(value);
   18c14:	f001 fcbf 	bl	1a596 <var_toInteger>
   18c18:	6260      	str	r0, [r4, #36]	; 0x24
   18c1a:	e7e9      	b.n	18bf0 <cosem_setPrimeNbOfdmPlcMacCounters+0x1c>
    int ret = 0;
   18c1c:	f44f 7081 	mov.w	r0, #258	; 0x102
    return ret;
   18c20:	e7e7      	b.n	18bf2 <cosem_setPrimeNbOfdmPlcMacCounters+0x1e>

00018c22 <cosem_setMulticastEntries>:
#endif //DLMS_IGNORE_PRIME_NB_OFDM_PLC_MAC_COUNTERS

#ifndef DLMS_IGNORE_PRIME_NB_OFDM_PLC_MAC_NETWORK_ADMINISTRATION_DATA

int cosem_setMulticastEntries(gxPrimeNbOfdmPlcMacNetworkAdministrationData* object, dlmsVARIANT* value)
{
   18c22:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   18c26:	460e      	mov	r6, r1
    int ret = 0;
    int pos;
    gxMacMulticastEntry* it;
    arr_clear(&object->multicastEntries);
   18c28:	f100 0710 	add.w	r7, r0, #16
   18c2c:	4638      	mov	r0, r7
   18c2e:	f7f7 fb82 	bl	10336 <arr_clear>
    if (value->Arr != NULL)
   18c32:	68b3      	ldr	r3, [r6, #8]
   18c34:	2b00      	cmp	r3, #0
   18c36:	d130      	bne.n	18c9a <cosem_setMulticastEntries+0x78>
            it->members = (short) var_toInteger(tmp2);
            arr_push(&object->multicastEntries, it);
        }
    }
    return 0;
}
   18c38:	2000      	movs	r0, #0
   18c3a:	b002      	add	sp, #8
   18c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            ret = va_getByIndex(value->Arr, pos, &tmp);
   18c40:	466a      	mov	r2, sp
   18c42:	4629      	mov	r1, r5
   18c44:	f001 fb2d 	bl	1a2a2 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   18c48:	4680      	mov	r8, r0
   18c4a:	2800      	cmp	r0, #0
   18c4c:	d1f4      	bne.n	18c38 <cosem_setMulticastEntries+0x16>
            it = (gxMacMulticastEntry*)gxmalloc(sizeof(gxMacMulticastEntry));
   18c4e:	2004      	movs	r0, #4
   18c50:	f7f2 ffb0 	bl	bbb4 <malloc>
            if ((ret = va_getByIndex(tmp->Arr, 0, &tmp2)) != DLMS_ERROR_CODE_OK)
   18c54:	9b00      	ldr	r3, [sp, #0]
            it = (gxMacMulticastEntry*)gxmalloc(sizeof(gxMacMulticastEntry));
   18c56:	4604      	mov	r4, r0
            if ((ret = va_getByIndex(tmp->Arr, 0, &tmp2)) != DLMS_ERROR_CODE_OK)
   18c58:	aa01      	add	r2, sp, #4
   18c5a:	6898      	ldr	r0, [r3, #8]
   18c5c:	4641      	mov	r1, r8
   18c5e:	f001 fb20 	bl	1a2a2 <va_getByIndex>
   18c62:	2800      	cmp	r0, #0
   18c64:	d1e8      	bne.n	18c38 <cosem_setMulticastEntries+0x16>
            it->id = (signed char) var_toInteger(tmp2);
   18c66:	9801      	ldr	r0, [sp, #4]
   18c68:	f001 fc95 	bl	1a596 <var_toInteger>
            if ((ret = va_getByIndex(tmp->Arr, 1, &tmp2)) != DLMS_ERROR_CODE_OK)
   18c6c:	9b00      	ldr	r3, [sp, #0]
            it->id = (signed char) var_toInteger(tmp2);
   18c6e:	7020      	strb	r0, [r4, #0]
            if ((ret = va_getByIndex(tmp->Arr, 1, &tmp2)) != DLMS_ERROR_CODE_OK)
   18c70:	6898      	ldr	r0, [r3, #8]
   18c72:	aa01      	add	r2, sp, #4
   18c74:	2101      	movs	r1, #1
   18c76:	f001 fb14 	bl	1a2a2 <va_getByIndex>
   18c7a:	2800      	cmp	r0, #0
   18c7c:	d1dc      	bne.n	18c38 <cosem_setMulticastEntries+0x16>
            it->members = (short) var_toInteger(tmp2);
   18c7e:	9801      	ldr	r0, [sp, #4]
   18c80:	f001 fc89 	bl	1a596 <var_toInteger>
            arr_push(&object->multicastEntries, it);
   18c84:	4621      	mov	r1, r4
            it->members = (short) var_toInteger(tmp2);
   18c86:	8060      	strh	r0, [r4, #2]
            arr_push(&object->multicastEntries, it);
   18c88:	4638      	mov	r0, r7
   18c8a:	f7f7 fb3f 	bl	1030c <arr_push>
        for (pos = 0; pos != value->Arr->size; ++pos)
   18c8e:	3501      	adds	r5, #1
   18c90:	68b0      	ldr	r0, [r6, #8]
   18c92:	88c3      	ldrh	r3, [r0, #6]
   18c94:	42ab      	cmp	r3, r5
   18c96:	d1d3      	bne.n	18c40 <cosem_setMulticastEntries+0x1e>
   18c98:	e7ce      	b.n	18c38 <cosem_setMulticastEntries+0x16>
   18c9a:	2500      	movs	r5, #0
   18c9c:	e7f8      	b.n	18c90 <cosem_setMulticastEntries+0x6e>

00018c9e <cosem_setSwitchTable>:


int cosem_setSwitchTable(gxPrimeNbOfdmPlcMacNetworkAdministrationData* object, dlmsVARIANT* value)
{
   18c9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   18ca0:	460d      	mov	r5, r1
    int ret = 0;
    int pos;
    arr_empty(&object->switchTable);
   18ca2:	f100 061c 	add.w	r6, r0, #28
   18ca6:	4630      	mov	r0, r6
   18ca8:	f7f7 fb60 	bl	1036c <arr_empty>
    if (value->Arr != NULL)
   18cac:	68ab      	ldr	r3, [r5, #8]
   18cae:	b9d3      	cbnz	r3, 18ce6 <cosem_setSwitchTable+0x48>
            *tmp = (uint16_t)var_toInteger(it);
            arr_push(&object->switchTable, tmp);
        }
    }
    return 0;
}
   18cb0:	2000      	movs	r0, #0
   18cb2:	b003      	add	sp, #12
   18cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if ((ret = va_getByIndex(value->Arr, pos, &it)) != DLMS_ERROR_CODE_OK)
   18cb6:	aa01      	add	r2, sp, #4
   18cb8:	4621      	mov	r1, r4
   18cba:	f001 faf2 	bl	1a2a2 <va_getByIndex>
   18cbe:	2800      	cmp	r0, #0
   18cc0:	d1f6      	bne.n	18cb0 <cosem_setSwitchTable+0x12>
            uint16_t* tmp = (uint16_t*)gxmalloc(sizeof(uint16_t));
   18cc2:	2002      	movs	r0, #2
   18cc4:	f7f2 ff76 	bl	bbb4 <malloc>
   18cc8:	4607      	mov	r7, r0
            *tmp = (uint16_t)var_toInteger(it);
   18cca:	9801      	ldr	r0, [sp, #4]
   18ccc:	f001 fc63 	bl	1a596 <var_toInteger>
            arr_push(&object->switchTable, tmp);
   18cd0:	4639      	mov	r1, r7
            *tmp = (uint16_t)var_toInteger(it);
   18cd2:	8038      	strh	r0, [r7, #0]
            arr_push(&object->switchTable, tmp);
   18cd4:	4630      	mov	r0, r6
   18cd6:	f7f7 fb19 	bl	1030c <arr_push>
        for (pos = 0; pos != value->Arr->size; ++pos)
   18cda:	3401      	adds	r4, #1
   18cdc:	68a8      	ldr	r0, [r5, #8]
   18cde:	88c3      	ldrh	r3, [r0, #6]
   18ce0:	42a3      	cmp	r3, r4
   18ce2:	d1e8      	bne.n	18cb6 <cosem_setSwitchTable+0x18>
   18ce4:	e7e4      	b.n	18cb0 <cosem_setSwitchTable+0x12>
   18ce6:	2400      	movs	r4, #0
   18ce8:	e7f8      	b.n	18cdc <cosem_setSwitchTable+0x3e>

00018cea <cosem_setDirectTable>:

int cosem_setDirectTable(gxPrimeNbOfdmPlcMacNetworkAdministrationData* object, dlmsVARIANT* value)
{
   18cea:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   18cee:	460e      	mov	r6, r1
    int ret = 0;
    int pos;
    gxMacDirectTable* it;
    arr_clear(&object->directTable);
   18cf0:	f100 0728 	add.w	r7, r0, #40	; 0x28
   18cf4:	4638      	mov	r0, r7
   18cf6:	f7f7 fb1e 	bl	10336 <arr_clear>
    if (value->Arr != NULL)
   18cfa:	68b3      	ldr	r3, [r6, #8]
   18cfc:	2b00      	cmp	r3, #0
   18cfe:	d171      	bne.n	18de4 <cosem_setDirectTable+0xfa>
            }
            arr_push(&object->directTable, it);
        }
    }
    return 0;
}
   18d00:	2000      	movs	r0, #0
   18d02:	b002      	add	sp, #8
   18d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            ret = va_getByIndex(value->Arr, pos, &tmp);
   18d08:	466a      	mov	r2, sp
   18d0a:	4629      	mov	r1, r5
   18d0c:	f001 fac9 	bl	1a2a2 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   18d10:	4680      	mov	r8, r0
   18d12:	2800      	cmp	r0, #0
   18d14:	d1f4      	bne.n	18d00 <cosem_setDirectTable+0x16>
            it = (gxMacDirectTable*)gxmalloc(sizeof(gxMacDirectTable));
   18d16:	2012      	movs	r0, #18
   18d18:	f7f2 ff4c 	bl	bbb4 <malloc>
            if ((ret = va_getByIndex(tmp->Arr, 0, &tmp2)) != DLMS_ERROR_CODE_OK)
   18d1c:	9b00      	ldr	r3, [sp, #0]
            it = (gxMacDirectTable*)gxmalloc(sizeof(gxMacDirectTable));
   18d1e:	4604      	mov	r4, r0
            if ((ret = va_getByIndex(tmp->Arr, 0, &tmp2)) != DLMS_ERROR_CODE_OK)
   18d20:	aa01      	add	r2, sp, #4
   18d22:	6898      	ldr	r0, [r3, #8]
   18d24:	4641      	mov	r1, r8
   18d26:	f001 fabc 	bl	1a2a2 <va_getByIndex>
   18d2a:	2800      	cmp	r0, #0
   18d2c:	d1e8      	bne.n	18d00 <cosem_setDirectTable+0x16>
            it->sourceSId = (short)var_toInteger(tmp2);
   18d2e:	9801      	ldr	r0, [sp, #4]
   18d30:	f001 fc31 	bl	1a596 <var_toInteger>
            if ((ret = va_getByIndex(tmp->Arr, 1, &tmp2)) != DLMS_ERROR_CODE_OK)
   18d34:	9b00      	ldr	r3, [sp, #0]
            it->sourceSId = (short)var_toInteger(tmp2);
   18d36:	8020      	strh	r0, [r4, #0]
            if ((ret = va_getByIndex(tmp->Arr, 1, &tmp2)) != DLMS_ERROR_CODE_OK)
   18d38:	aa01      	add	r2, sp, #4
   18d3a:	6898      	ldr	r0, [r3, #8]
   18d3c:	2101      	movs	r1, #1
   18d3e:	f001 fab0 	bl	1a2a2 <va_getByIndex>
   18d42:	2800      	cmp	r0, #0
   18d44:	d1dc      	bne.n	18d00 <cosem_setDirectTable+0x16>
            it->sourceLnId = (short)var_toInteger(tmp2);
   18d46:	9801      	ldr	r0, [sp, #4]
   18d48:	f001 fc25 	bl	1a596 <var_toInteger>
            if ((ret = va_getByIndex(tmp->Arr, 2, &tmp2)) != DLMS_ERROR_CODE_OK)
   18d4c:	9b00      	ldr	r3, [sp, #0]
            it->sourceLnId = (short)var_toInteger(tmp2);
   18d4e:	8060      	strh	r0, [r4, #2]
            if ((ret = va_getByIndex(tmp->Arr, 2, &tmp2)) != DLMS_ERROR_CODE_OK)
   18d50:	aa01      	add	r2, sp, #4
   18d52:	6898      	ldr	r0, [r3, #8]
   18d54:	2102      	movs	r1, #2
   18d56:	f001 faa4 	bl	1a2a2 <va_getByIndex>
   18d5a:	2800      	cmp	r0, #0
   18d5c:	d1d0      	bne.n	18d00 <cosem_setDirectTable+0x16>
            it->sourceLcId = (short)var_toInteger(tmp2);
   18d5e:	9801      	ldr	r0, [sp, #4]
   18d60:	f001 fc19 	bl	1a596 <var_toInteger>
            if ((ret = va_getByIndex(tmp->Arr, 3, &tmp2)) != DLMS_ERROR_CODE_OK)
   18d64:	9b00      	ldr	r3, [sp, #0]
            it->sourceLcId = (short)var_toInteger(tmp2);
   18d66:	80a0      	strh	r0, [r4, #4]
            if ((ret = va_getByIndex(tmp->Arr, 3, &tmp2)) != DLMS_ERROR_CODE_OK)
   18d68:	aa01      	add	r2, sp, #4
   18d6a:	6898      	ldr	r0, [r3, #8]
   18d6c:	2103      	movs	r1, #3
   18d6e:	f001 fa98 	bl	1a2a2 <va_getByIndex>
   18d72:	2800      	cmp	r0, #0
   18d74:	d1c4      	bne.n	18d00 <cosem_setDirectTable+0x16>
            it->destinationSId = (short)var_toInteger(tmp2);
   18d76:	9801      	ldr	r0, [sp, #4]
   18d78:	f001 fc0d 	bl	1a596 <var_toInteger>
            if ((ret = va_getByIndex(tmp->Arr, 4, &tmp2)) != DLMS_ERROR_CODE_OK)
   18d7c:	9b00      	ldr	r3, [sp, #0]
            it->destinationSId = (short)var_toInteger(tmp2);
   18d7e:	80e0      	strh	r0, [r4, #6]
            if ((ret = va_getByIndex(tmp->Arr, 4, &tmp2)) != DLMS_ERROR_CODE_OK)
   18d80:	aa01      	add	r2, sp, #4
   18d82:	6898      	ldr	r0, [r3, #8]
   18d84:	2104      	movs	r1, #4
   18d86:	f001 fa8c 	bl	1a2a2 <va_getByIndex>
   18d8a:	2800      	cmp	r0, #0
   18d8c:	d1b8      	bne.n	18d00 <cosem_setDirectTable+0x16>
            it->destinationLnId = (short)var_toInteger(tmp2);
   18d8e:	9801      	ldr	r0, [sp, #4]
   18d90:	f001 fc01 	bl	1a596 <var_toInteger>
            if ((ret = va_getByIndex(tmp->Arr, 5, &tmp2)) != DLMS_ERROR_CODE_OK)
   18d94:	9b00      	ldr	r3, [sp, #0]
            it->destinationLnId = (short)var_toInteger(tmp2);
   18d96:	8120      	strh	r0, [r4, #8]
            if ((ret = va_getByIndex(tmp->Arr, 5, &tmp2)) != DLMS_ERROR_CODE_OK)
   18d98:	aa01      	add	r2, sp, #4
   18d9a:	6898      	ldr	r0, [r3, #8]
   18d9c:	2105      	movs	r1, #5
   18d9e:	f001 fa80 	bl	1a2a2 <va_getByIndex>
   18da2:	2800      	cmp	r0, #0
   18da4:	d1ac      	bne.n	18d00 <cosem_setDirectTable+0x16>
            it->destinationLcId = (short) var_toInteger(tmp2);
   18da6:	9801      	ldr	r0, [sp, #4]
   18da8:	f001 fbf5 	bl	1a596 <var_toInteger>
            if ((ret = va_getByIndex(tmp->Arr, 6, &tmp2)) != DLMS_ERROR_CODE_OK)
   18dac:	9b00      	ldr	r3, [sp, #0]
            it->destinationLcId = (short) var_toInteger(tmp2);
   18dae:	8160      	strh	r0, [r4, #10]
            if ((ret = va_getByIndex(tmp->Arr, 6, &tmp2)) != DLMS_ERROR_CODE_OK)
   18db0:	aa01      	add	r2, sp, #4
   18db2:	6898      	ldr	r0, [r3, #8]
   18db4:	2106      	movs	r1, #6
   18db6:	f001 fa74 	bl	1a2a2 <va_getByIndex>
   18dba:	2800      	cmp	r0, #0
   18dbc:	d1a0      	bne.n	18d00 <cosem_setDirectTable+0x16>
            if ((ret = bb_get(tmp2->byteArr, it->did, sizeof(it->did))) != DLMS_ERROR_CODE_OK)
   18dbe:	9b01      	ldr	r3, [sp, #4]
   18dc0:	2206      	movs	r2, #6
   18dc2:	6898      	ldr	r0, [r3, #8]
   18dc4:	f104 010c 	add.w	r1, r4, #12
   18dc8:	f7f4 fac4 	bl	d354 <bb_get>
   18dcc:	2800      	cmp	r0, #0
   18dce:	d197      	bne.n	18d00 <cosem_setDirectTable+0x16>
            arr_push(&object->directTable, it);
   18dd0:	4621      	mov	r1, r4
   18dd2:	4638      	mov	r0, r7
   18dd4:	f7f7 fa9a 	bl	1030c <arr_push>
        for (pos = 0; pos != value->Arr->size; ++pos)
   18dd8:	3501      	adds	r5, #1
   18dda:	68b0      	ldr	r0, [r6, #8]
   18ddc:	88c3      	ldrh	r3, [r0, #6]
   18dde:	42ab      	cmp	r3, r5
   18de0:	d192      	bne.n	18d08 <cosem_setDirectTable+0x1e>
   18de2:	e78d      	b.n	18d00 <cosem_setDirectTable+0x16>
   18de4:	2500      	movs	r5, #0
   18de6:	e7f8      	b.n	18dda <cosem_setDirectTable+0xf0>

00018de8 <cosem_setAvailableSwitches>:

int cosem_setAvailableSwitches(gxPrimeNbOfdmPlcMacNetworkAdministrationData* object, dlmsVARIANT* value)
{
   18de8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   18dea:	460e      	mov	r6, r1
    int ret = 0;
    int pos;
    gxMacAvailableSwitch* it;
    obj_clearAvailableSwitches(&object->availableSwitches);
   18dec:	f100 0734 	add.w	r7, r0, #52	; 0x34
   18df0:	4638      	mov	r0, r7
   18df2:	f7fa ff7c 	bl	13cee <obj_clearAvailableSwitches>
    if (value->Arr != NULL)
   18df6:	68b3      	ldr	r3, [r6, #8]
   18df8:	2b00      	cmp	r3, #0
   18dfa:	d162      	bne.n	18ec2 <cosem_setAvailableSwitches+0xda>
            it->rxSnr = (signed char) var_toInteger(tmp2);
            arr_push(&object->availableSwitches, it);
        }
    }
    return 0;
}
   18dfc:	2000      	movs	r0, #0
   18dfe:	b003      	add	sp, #12
   18e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if ((ret = va_getByIndex(tmp->Arr, 1, &tmp2)) != DLMS_ERROR_CODE_OK)
   18e02:	9b00      	ldr	r3, [sp, #0]
   18e04:	aa01      	add	r2, sp, #4
   18e06:	6898      	ldr	r0, [r3, #8]
   18e08:	2101      	movs	r1, #1
   18e0a:	f001 fa4a 	bl	1a2a2 <va_getByIndex>
   18e0e:	2800      	cmp	r0, #0
   18e10:	d153      	bne.n	18eba <cosem_setAvailableSwitches+0xd2>
            it->lsId = (short)var_toInteger(tmp2);
   18e12:	9801      	ldr	r0, [sp, #4]
   18e14:	f001 fbbf 	bl	1a596 <var_toInteger>
            if ((ret = va_getByIndex(tmp->Arr, 2, &tmp2)) != DLMS_ERROR_CODE_OK)
   18e18:	9b00      	ldr	r3, [sp, #0]
            it->lsId = (short)var_toInteger(tmp2);
   18e1a:	81a0      	strh	r0, [r4, #12]
            if ((ret = va_getByIndex(tmp->Arr, 2, &tmp2)) != DLMS_ERROR_CODE_OK)
   18e1c:	aa01      	add	r2, sp, #4
   18e1e:	6898      	ldr	r0, [r3, #8]
   18e20:	2102      	movs	r1, #2
   18e22:	f001 fa3e 	bl	1a2a2 <va_getByIndex>
   18e26:	2800      	cmp	r0, #0
   18e28:	d147      	bne.n	18eba <cosem_setAvailableSwitches+0xd2>
            it->level = (signed char) var_toInteger(tmp2);
   18e2a:	9801      	ldr	r0, [sp, #4]
   18e2c:	f001 fbb3 	bl	1a596 <var_toInteger>
            if ((ret = va_getByIndex(tmp->Arr, 3, &tmp2)) != DLMS_ERROR_CODE_OK)
   18e30:	9b00      	ldr	r3, [sp, #0]
            it->level = (signed char) var_toInteger(tmp2);
   18e32:	73a0      	strb	r0, [r4, #14]
            if ((ret = va_getByIndex(tmp->Arr, 3, &tmp2)) != DLMS_ERROR_CODE_OK)
   18e34:	6898      	ldr	r0, [r3, #8]
   18e36:	aa01      	add	r2, sp, #4
   18e38:	2103      	movs	r1, #3
   18e3a:	f001 fa32 	bl	1a2a2 <va_getByIndex>
   18e3e:	2800      	cmp	r0, #0
   18e40:	d13b      	bne.n	18eba <cosem_setAvailableSwitches+0xd2>
            it->rxLevel = (signed char) var_toInteger(tmp2);
   18e42:	9801      	ldr	r0, [sp, #4]
   18e44:	f001 fba7 	bl	1a596 <var_toInteger>
            if ((ret = va_getByIndex(tmp->Arr, 4, &tmp2)) != DLMS_ERROR_CODE_OK)
   18e48:	9b00      	ldr	r3, [sp, #0]
            it->rxLevel = (signed char) var_toInteger(tmp2);
   18e4a:	73e0      	strb	r0, [r4, #15]
            if ((ret = va_getByIndex(tmp->Arr, 4, &tmp2)) != DLMS_ERROR_CODE_OK)
   18e4c:	6898      	ldr	r0, [r3, #8]
   18e4e:	aa01      	add	r2, sp, #4
   18e50:	2104      	movs	r1, #4
   18e52:	f001 fa26 	bl	1a2a2 <va_getByIndex>
   18e56:	2800      	cmp	r0, #0
   18e58:	d12f      	bne.n	18eba <cosem_setAvailableSwitches+0xd2>
            it->rxSnr = (signed char) var_toInteger(tmp2);
   18e5a:	9801      	ldr	r0, [sp, #4]
   18e5c:	f001 fb9b 	bl	1a596 <var_toInteger>
            arr_push(&object->availableSwitches, it);
   18e60:	4621      	mov	r1, r4
            it->rxSnr = (signed char) var_toInteger(tmp2);
   18e62:	7420      	strb	r0, [r4, #16]
            arr_push(&object->availableSwitches, it);
   18e64:	4638      	mov	r0, r7
   18e66:	f7f7 fa51 	bl	1030c <arr_push>
        for (pos = 0; pos != value->Arr->size; ++pos)
   18e6a:	3501      	adds	r5, #1
   18e6c:	68b0      	ldr	r0, [r6, #8]
   18e6e:	88c3      	ldrh	r3, [r0, #6]
   18e70:	42ab      	cmp	r3, r5
   18e72:	d0c3      	beq.n	18dfc <cosem_setAvailableSwitches+0x14>
            ret = va_getByIndex(value->Arr, pos, &tmp);
   18e74:	4629      	mov	r1, r5
   18e76:	466a      	mov	r2, sp
   18e78:	f001 fa13 	bl	1a2a2 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   18e7c:	4601      	mov	r1, r0
   18e7e:	2800      	cmp	r0, #0
   18e80:	d1bc      	bne.n	18dfc <cosem_setAvailableSwitches+0x14>
            if ((ret = va_getByIndex(tmp->Arr, 0, &tmp2)) != DLMS_ERROR_CODE_OK)
   18e82:	9b00      	ldr	r3, [sp, #0]
   18e84:	aa01      	add	r2, sp, #4
   18e86:	6898      	ldr	r0, [r3, #8]
   18e88:	f001 fa0b 	bl	1a2a2 <va_getByIndex>
   18e8c:	2800      	cmp	r0, #0
   18e8e:	d1b5      	bne.n	18dfc <cosem_setAvailableSwitches+0x14>
            it = (gxMacAvailableSwitch*)gxmalloc(sizeof(gxMacAvailableSwitch));
   18e90:	2014      	movs	r0, #20
   18e92:	f7f2 fe8f 	bl	bbb4 <malloc>
   18e96:	4604      	mov	r4, r0
            BYTE_BUFFER_INIT(&it->sna);
   18e98:	f7f3 fea4 	bl	cbe4 <bb_init>
            bb_capacity(&it->sna, tmp2->byteArr->size);
   18e9c:	9b01      	ldr	r3, [sp, #4]
   18e9e:	689b      	ldr	r3, [r3, #8]
   18ea0:	4620      	mov	r0, r4
   18ea2:	88d9      	ldrh	r1, [r3, #6]
   18ea4:	f7f3 fea4 	bl	cbf0 <bb_capacity>
            if ((ret = bb_set(&it->sna, tmp2->byteArr->data, tmp2->byteArr->size)) != DLMS_ERROR_CODE_OK)
   18ea8:	9b01      	ldr	r3, [sp, #4]
   18eaa:	689b      	ldr	r3, [r3, #8]
   18eac:	4620      	mov	r0, r4
   18eae:	88da      	ldrh	r2, [r3, #6]
   18eb0:	6819      	ldr	r1, [r3, #0]
   18eb2:	f7f3 ffe6 	bl	ce82 <bb_set>
   18eb6:	2800      	cmp	r0, #0
   18eb8:	d0a3      	beq.n	18e02 <cosem_setAvailableSwitches+0x1a>
                gxfree(it);
   18eba:	4620      	mov	r0, r4
   18ebc:	f7f2 fe82 	bl	bbc4 <free>
                break;
   18ec0:	e79c      	b.n	18dfc <cosem_setAvailableSwitches+0x14>
        for (pos = 0; pos != value->Arr->size; ++pos)
   18ec2:	2500      	movs	r5, #0
   18ec4:	e7d2      	b.n	18e6c <cosem_setAvailableSwitches+0x84>

00018ec6 <cosem_setCommunications>:

int cosem_setCommunications(gxPrimeNbOfdmPlcMacNetworkAdministrationData* object, dlmsVARIANT* value)
{
   18ec6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   18eca:	460e      	mov	r6, r1
    int ret = 0;
    int pos;
    gxMacPhyCommunication* it;
    arr_clear(&object->communications);
   18ecc:	f100 0740 	add.w	r7, r0, #64	; 0x40
   18ed0:	4638      	mov	r0, r7
   18ed2:	f7f7 fa30 	bl	10336 <arr_clear>
    if (value->Arr != NULL)
   18ed6:	68b3      	ldr	r3, [r6, #8]
   18ed8:	2b00      	cmp	r3, #0
   18eda:	f040 808a 	bne.w	18ff2 <cosem_setCommunications+0x12c>
            it->rxCodingModified = (signed char) var_toInteger(tmp2);
            arr_push(&object->communications, it);
        }
    }
    return 0;
}
   18ede:	2000      	movs	r0, #0
   18ee0:	b002      	add	sp, #8
   18ee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            ret = va_getByIndex(value->Arr, pos, &tmp);
   18ee6:	466a      	mov	r2, sp
   18ee8:	4629      	mov	r1, r5
   18eea:	f001 f9da 	bl	1a2a2 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   18eee:	4680      	mov	r8, r0
   18ef0:	2800      	cmp	r0, #0
   18ef2:	d1f4      	bne.n	18ede <cosem_setCommunications+0x18>
            it = (gxMacPhyCommunication*)gxmalloc(sizeof(gxMacPhyCommunication));
   18ef4:	200e      	movs	r0, #14
   18ef6:	f7f2 fe5d 	bl	bbb4 <malloc>
            if ((ret = va_getByIndex(tmp->Arr, 0, &tmp2)) != DLMS_ERROR_CODE_OK)
   18efa:	9b00      	ldr	r3, [sp, #0]
            it = (gxMacPhyCommunication*)gxmalloc(sizeof(gxMacPhyCommunication));
   18efc:	4604      	mov	r4, r0
            if ((ret = va_getByIndex(tmp->Arr, 0, &tmp2)) != DLMS_ERROR_CODE_OK)
   18efe:	aa01      	add	r2, sp, #4
   18f00:	6898      	ldr	r0, [r3, #8]
   18f02:	4641      	mov	r1, r8
   18f04:	f001 f9cd 	bl	1a2a2 <va_getByIndex>
   18f08:	2800      	cmp	r0, #0
   18f0a:	d1e8      	bne.n	18ede <cosem_setCommunications+0x18>
            if ((ret = bb_get(tmp2->byteArr, it->eui, sizeof(it->eui))) != DLMS_ERROR_CODE_OK)
   18f0c:	9b01      	ldr	r3, [sp, #4]
   18f0e:	2206      	movs	r2, #6
   18f10:	6898      	ldr	r0, [r3, #8]
   18f12:	4621      	mov	r1, r4
   18f14:	f7f4 fa1e 	bl	d354 <bb_get>
   18f18:	2800      	cmp	r0, #0
   18f1a:	d1e0      	bne.n	18ede <cosem_setCommunications+0x18>
            if ((ret = va_getByIndex(tmp->Arr, 1, &tmp2)) != DLMS_ERROR_CODE_OK)
   18f1c:	9b00      	ldr	r3, [sp, #0]
   18f1e:	aa01      	add	r2, sp, #4
   18f20:	6898      	ldr	r0, [r3, #8]
   18f22:	2101      	movs	r1, #1
   18f24:	f001 f9bd 	bl	1a2a2 <va_getByIndex>
   18f28:	2800      	cmp	r0, #0
   18f2a:	d1d8      	bne.n	18ede <cosem_setCommunications+0x18>
            it->txPower = (signed char) var_toInteger(tmp2);
   18f2c:	9801      	ldr	r0, [sp, #4]
   18f2e:	f001 fb32 	bl	1a596 <var_toInteger>
            if ((ret = va_getByIndex(tmp->Arr, 2, &tmp2)) != DLMS_ERROR_CODE_OK)
   18f32:	9b00      	ldr	r3, [sp, #0]
            it->txPower = (signed char) var_toInteger(tmp2);
   18f34:	71a0      	strb	r0, [r4, #6]
            if ((ret = va_getByIndex(tmp->Arr, 2, &tmp2)) != DLMS_ERROR_CODE_OK)
   18f36:	6898      	ldr	r0, [r3, #8]
   18f38:	aa01      	add	r2, sp, #4
   18f3a:	2102      	movs	r1, #2
   18f3c:	f001 f9b1 	bl	1a2a2 <va_getByIndex>
   18f40:	2800      	cmp	r0, #0
   18f42:	d1cc      	bne.n	18ede <cosem_setCommunications+0x18>
            it->txCoding = (signed char) var_toInteger(tmp2);
   18f44:	9801      	ldr	r0, [sp, #4]
   18f46:	f001 fb26 	bl	1a596 <var_toInteger>
            if ((ret = va_getByIndex(tmp->Arr, 3, &tmp2)) != DLMS_ERROR_CODE_OK)
   18f4a:	9b00      	ldr	r3, [sp, #0]
            it->txCoding = (signed char) var_toInteger(tmp2);
   18f4c:	71e0      	strb	r0, [r4, #7]
            if ((ret = va_getByIndex(tmp->Arr, 3, &tmp2)) != DLMS_ERROR_CODE_OK)
   18f4e:	6898      	ldr	r0, [r3, #8]
   18f50:	aa01      	add	r2, sp, #4
   18f52:	2103      	movs	r1, #3
   18f54:	f001 f9a5 	bl	1a2a2 <va_getByIndex>
   18f58:	2800      	cmp	r0, #0
   18f5a:	d1c0      	bne.n	18ede <cosem_setCommunications+0x18>
            it->rxCoding = (signed char) var_toInteger(tmp2);
   18f5c:	9801      	ldr	r0, [sp, #4]
   18f5e:	f001 fb1a 	bl	1a596 <var_toInteger>
            if ((ret = va_getByIndex(tmp->Arr, 4, &tmp2)) != DLMS_ERROR_CODE_OK)
   18f62:	9b00      	ldr	r3, [sp, #0]
            it->rxCoding = (signed char) var_toInteger(tmp2);
   18f64:	7220      	strb	r0, [r4, #8]
            if ((ret = va_getByIndex(tmp->Arr, 4, &tmp2)) != DLMS_ERROR_CODE_OK)
   18f66:	6898      	ldr	r0, [r3, #8]
   18f68:	aa01      	add	r2, sp, #4
   18f6a:	2104      	movs	r1, #4
   18f6c:	f001 f999 	bl	1a2a2 <va_getByIndex>
   18f70:	2800      	cmp	r0, #0
   18f72:	d1b4      	bne.n	18ede <cosem_setCommunications+0x18>
            it->rxLvl = (signed char) var_toInteger(tmp2);
   18f74:	9801      	ldr	r0, [sp, #4]
   18f76:	f001 fb0e 	bl	1a596 <var_toInteger>
            if ((ret = va_getByIndex(tmp->Arr, 5, &tmp2)) != DLMS_ERROR_CODE_OK)
   18f7a:	9b00      	ldr	r3, [sp, #0]
            it->rxLvl = (signed char) var_toInteger(tmp2);
   18f7c:	7260      	strb	r0, [r4, #9]
            if ((ret = va_getByIndex(tmp->Arr, 5, &tmp2)) != DLMS_ERROR_CODE_OK)
   18f7e:	6898      	ldr	r0, [r3, #8]
   18f80:	aa01      	add	r2, sp, #4
   18f82:	2105      	movs	r1, #5
   18f84:	f001 f98d 	bl	1a2a2 <va_getByIndex>
   18f88:	2800      	cmp	r0, #0
   18f8a:	d1a8      	bne.n	18ede <cosem_setCommunications+0x18>
            it->snr = (signed char) var_toInteger(tmp2);
   18f8c:	9801      	ldr	r0, [sp, #4]
   18f8e:	f001 fb02 	bl	1a596 <var_toInteger>
            if ((ret = va_getByIndex(tmp->Arr, 6, &tmp2)) != DLMS_ERROR_CODE_OK)
   18f92:	9b00      	ldr	r3, [sp, #0]
            it->snr = (signed char) var_toInteger(tmp2);
   18f94:	72a0      	strb	r0, [r4, #10]
            if ((ret = va_getByIndex(tmp->Arr, 6, &tmp2)) != DLMS_ERROR_CODE_OK)
   18f96:	6898      	ldr	r0, [r3, #8]
   18f98:	aa01      	add	r2, sp, #4
   18f9a:	2106      	movs	r1, #6
   18f9c:	f001 f981 	bl	1a2a2 <va_getByIndex>
   18fa0:	2800      	cmp	r0, #0
   18fa2:	d19c      	bne.n	18ede <cosem_setCommunications+0x18>
            it->txPowerModified = (signed char) var_toInteger(tmp2);
   18fa4:	9801      	ldr	r0, [sp, #4]
   18fa6:	f001 faf6 	bl	1a596 <var_toInteger>
            if ((ret = va_getByIndex(tmp->Arr, 7, &tmp2)) != DLMS_ERROR_CODE_OK)
   18faa:	9b00      	ldr	r3, [sp, #0]
            it->txPowerModified = (signed char) var_toInteger(tmp2);
   18fac:	72e0      	strb	r0, [r4, #11]
            if ((ret = va_getByIndex(tmp->Arr, 7, &tmp2)) != DLMS_ERROR_CODE_OK)
   18fae:	6898      	ldr	r0, [r3, #8]
   18fb0:	aa01      	add	r2, sp, #4
   18fb2:	2107      	movs	r1, #7
   18fb4:	f001 f975 	bl	1a2a2 <va_getByIndex>
   18fb8:	2800      	cmp	r0, #0
   18fba:	d190      	bne.n	18ede <cosem_setCommunications+0x18>
            it->txCodingModified = (signed char) var_toInteger(tmp2);
   18fbc:	9801      	ldr	r0, [sp, #4]
   18fbe:	f001 faea 	bl	1a596 <var_toInteger>
            if ((ret = va_getByIndex(tmp->Arr, 8, &tmp2)) != DLMS_ERROR_CODE_OK)
   18fc2:	9b00      	ldr	r3, [sp, #0]
            it->txCodingModified = (signed char) var_toInteger(tmp2);
   18fc4:	7320      	strb	r0, [r4, #12]
            if ((ret = va_getByIndex(tmp->Arr, 8, &tmp2)) != DLMS_ERROR_CODE_OK)
   18fc6:	6898      	ldr	r0, [r3, #8]
   18fc8:	aa01      	add	r2, sp, #4
   18fca:	2108      	movs	r1, #8
   18fcc:	f001 f969 	bl	1a2a2 <va_getByIndex>
   18fd0:	2800      	cmp	r0, #0
   18fd2:	d184      	bne.n	18ede <cosem_setCommunications+0x18>
            it->rxCodingModified = (signed char) var_toInteger(tmp2);
   18fd4:	9801      	ldr	r0, [sp, #4]
   18fd6:	f001 fade 	bl	1a596 <var_toInteger>
            arr_push(&object->communications, it);
   18fda:	4621      	mov	r1, r4
            it->rxCodingModified = (signed char) var_toInteger(tmp2);
   18fdc:	7360      	strb	r0, [r4, #13]
            arr_push(&object->communications, it);
   18fde:	4638      	mov	r0, r7
   18fe0:	f7f7 f994 	bl	1030c <arr_push>
        for (pos = 0; pos != value->Arr->size; ++pos)
   18fe4:	3501      	adds	r5, #1
   18fe6:	68b0      	ldr	r0, [r6, #8]
   18fe8:	88c3      	ldrh	r3, [r0, #6]
   18fea:	42ab      	cmp	r3, r5
   18fec:	f47f af7b 	bne.w	18ee6 <cosem_setCommunications+0x20>
   18ff0:	e775      	b.n	18ede <cosem_setCommunications+0x18>
   18ff2:	2500      	movs	r5, #0
   18ff4:	e7f7      	b.n	18fe6 <cosem_setCommunications+0x120>

00018ff6 <cosem_setPrimeNbOfdmPlcMacNetworkAdministrationData>:
    gxPrimeNbOfdmPlcMacNetworkAdministrationData* object,
    unsigned char index,
    dlmsVARIANT* value)
{
    int ret = 0;
    switch (index)
   18ff6:	3a02      	subs	r2, #2
{
   18ff8:	4608      	mov	r0, r1
   18ffa:	4619      	mov	r1, r3
   18ffc:	2a04      	cmp	r2, #4
   18ffe:	d80e      	bhi.n	1901e <cosem_setPrimeNbOfdmPlcMacNetworkAdministrationData+0x28>
   19000:	e8df f002 	tbb	[pc, r2]
   19004:	09070503 	.word	0x09070503
   19008:	0b          	.byte	0x0b
   19009:	00          	.byte	0x00
    {
    case 2:
        ret = cosem_setMulticastEntries(object, value);
   1900a:	f7ff be0a 	b.w	18c22 <cosem_setMulticastEntries>
        break;
    case 3:
        ret = cosem_setSwitchTable(object, value);
   1900e:	f7ff be46 	b.w	18c9e <cosem_setSwitchTable>
        break;
    case 4:
        ret = cosem_setDirectTable(object, value);
   19012:	f7ff be6a 	b.w	18cea <cosem_setDirectTable>
        break;
    case 5:
        ret = cosem_setAvailableSwitches(object, value);
   19016:	f7ff bee7 	b.w	18de8 <cosem_setAvailableSwitches>
        break;
    case 6:
        ret = cosem_setCommunications(object, value);
   1901a:	f7ff bf54 	b.w	18ec6 <cosem_setCommunications>
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   1901e:	f44f 7081 	mov.w	r0, #258	; 0x102
   19022:	4770      	bx	lr

00019024 <cosem_setPrimeNbOfdmPlcApplicationsIdentification>:
    gxPrimeNbOfdmPlcApplicationsIdentification* object,
    unsigned char index,
    dlmsVARIANT* value)
{
    int ret = 0;
    switch (index)
   19024:	2a03      	cmp	r2, #3
{
   19026:	b538      	push	{r3, r4, r5, lr}
   19028:	460c      	mov	r4, r1
   1902a:	461d      	mov	r5, r3
    switch (index)
   1902c:	d013      	beq.n	19056 <cosem_setPrimeNbOfdmPlcApplicationsIdentification+0x32>
   1902e:	2a04      	cmp	r2, #4
   19030:	d016      	beq.n	19060 <cosem_setPrimeNbOfdmPlcApplicationsIdentification+0x3c>
   19032:	2a02      	cmp	r2, #2
   19034:	d119      	bne.n	1906a <cosem_setPrimeNbOfdmPlcApplicationsIdentification+0x46>
    {
    case 2:
    {
        bb_clear(&object->firmwareVersion);
   19036:	3410      	adds	r4, #16
   19038:	4620      	mov	r0, r4
   1903a:	f7f3 ff96 	bl	cf6a <bb_clear>
        bb_set2(&object->firmwareVersion, value->byteArr, 0, bb_size(value->byteArr));
   1903e:	68ad      	ldr	r5, [r5, #8]
   19040:	4628      	mov	r0, r5
   19042:	f7f3 fdcc 	bl	cbde <bb_size>
   19046:	2200      	movs	r2, #0
   19048:	4603      	mov	r3, r0
   1904a:	4629      	mov	r1, r5
   1904c:	4620      	mov	r0, r4
   1904e:	f7f3 ff47 	bl	cee0 <bb_set2>
    int ret = 0;
   19052:	2000      	movs	r0, #0
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   19054:	bd38      	pop	{r3, r4, r5, pc}
        object->vendorId = (uint16_t)var_toInteger(value);
   19056:	4618      	mov	r0, r3
   19058:	f001 fa9d 	bl	1a596 <var_toInteger>
   1905c:	83a0      	strh	r0, [r4, #28]
        break;
   1905e:	e7f8      	b.n	19052 <cosem_setPrimeNbOfdmPlcApplicationsIdentification+0x2e>
        object->productId = (uint16_t)var_toInteger(value);
   19060:	4618      	mov	r0, r3
   19062:	f001 fa98 	bl	1a596 <var_toInteger>
   19066:	83e0      	strh	r0, [r4, #30]
   19068:	e7f3      	b.n	19052 <cosem_setPrimeNbOfdmPlcApplicationsIdentification+0x2e>
    switch (index)
   1906a:	f44f 7081 	mov.w	r0, #258	; 0x102
    return ret;
   1906e:	e7f1      	b.n	19054 <cosem_setPrimeNbOfdmPlcApplicationsIdentification+0x30>

00019070 <cosem_setArbitrator>:
int cosem_setArbitrator(
    dlmsSettings* settings,
    gxArbitrator* object,
    unsigned char index,
    dlmsVARIANT* value)
{
   19070:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   19074:	3a02      	subs	r2, #2
   19076:	4680      	mov	r8, r0
   19078:	460c      	mov	r4, r1
   1907a:	461d      	mov	r5, r3
   1907c:	2a04      	cmp	r2, #4
   1907e:	f200 80de 	bhi.w	1923e <cosem_setArbitrator+0x1ce>
   19082:	e8df f012 	tbh	[pc, r2, lsl #1]
   19086:	0005      	.short	0x0005
   19088:	0086005e 	.word	0x0086005e
   1908c:	00d600ac 	.word	0x00d600ac
    dlmsVARIANT* tmp, * tmp2;
    switch (index)
    {
    case 2:
    {
        arr_clear(&object->actions);
   19090:	3410      	adds	r4, #16
   19092:	4620      	mov	r0, r4
   19094:	f7f7 f94f 	bl	10336 <arr_clear>
        if (value->Arr != NULL)
   19098:	68ab      	ldr	r3, [r5, #8]
   1909a:	2b00      	cmp	r3, #0
   1909c:	d14e      	bne.n	1913c <cosem_setArbitrator+0xcc>
    int pos, ret = 0;
   1909e:	2000      	movs	r0, #0
        }
    }
    break;
    case 6:
        object->lastOutcome = (unsigned char)var_toInteger(value);
        break;
   190a0:	e049      	b.n	19136 <cosem_setArbitrator+0xc6>
                    if ((ret = cosem_createObject(DLMS_OBJECT_TYPE_SCRIPT_TABLE, (gxObject**)&it->script)) != 0)
   190a2:	4631      	mov	r1, r6
   190a4:	2009      	movs	r0, #9
   190a6:	f7e8 fedb 	bl	1e60 <cosem_createObject>
   190aa:	2800      	cmp	r0, #0
   190ac:	d143      	bne.n	19136 <cosem_setArbitrator+0xc6>
                    memcpy(it->script->base.logicalName, tmp2->byteArr->data, tmp2->byteArr->size);
   190ae:	9b01      	ldr	r3, [sp, #4]
   190b0:	6830      	ldr	r0, [r6, #0]
   190b2:	689b      	ldr	r3, [r3, #8]
   190b4:	3006      	adds	r0, #6
   190b6:	6819      	ldr	r1, [r3, #0]
   190b8:	88da      	ldrh	r2, [r3, #6]
   190ba:	f003 f811 	bl	1c0e0 <memcpy>
                    ret = oa_push(&settings->releasedObjects, &it->script->base);
   190be:	6831      	ldr	r1, [r6, #0]
   190c0:	f108 00e4 	add.w	r0, r8, #228	; 0xe4
   190c4:	f000 fe4a 	bl	19d5c <oa_push>
                    if (ret != DLMS_ERROR_CODE_OK)
   190c8:	b368      	cbz	r0, 19126 <cosem_setArbitrator+0xb6>
   190ca:	e034      	b.n	19136 <cosem_setArbitrator+0xc6>
                it->scriptSelector = (uint16_t)var_toInteger(tmp2);
   190cc:	9801      	ldr	r0, [sp, #4]
   190ce:	f001 fa62 	bl	1a596 <var_toInteger>
                arr_push(&object->actions, it);
   190d2:	4631      	mov	r1, r6
                it->scriptSelector = (uint16_t)var_toInteger(tmp2);
   190d4:	80b0      	strh	r0, [r6, #4]
                arr_push(&object->actions, it);
   190d6:	4620      	mov	r0, r4
   190d8:	f7f7 f918 	bl	1030c <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   190dc:	3701      	adds	r7, #1
   190de:	68ab      	ldr	r3, [r5, #8]
   190e0:	88db      	ldrh	r3, [r3, #6]
   190e2:	42bb      	cmp	r3, r7
   190e4:	d0db      	beq.n	1909e <cosem_setArbitrator+0x2e>
                it = (gxActionItem*)gxmalloc(sizeof(gxActionItem));
   190e6:	2008      	movs	r0, #8
   190e8:	f7f2 fd64 	bl	bbb4 <malloc>
                if ((ret = va_getByIndex(value->Arr, pos, &tmp)) != DLMS_ERROR_CODE_OK)
   190ec:	466a      	mov	r2, sp
                it = (gxActionItem*)gxmalloc(sizeof(gxActionItem));
   190ee:	4606      	mov	r6, r0
                it->script = NULL;
   190f0:	f8c0 9000 	str.w	r9, [r0]
                if ((ret = va_getByIndex(value->Arr, pos, &tmp)) != DLMS_ERROR_CODE_OK)
   190f4:	4639      	mov	r1, r7
   190f6:	68a8      	ldr	r0, [r5, #8]
   190f8:	f001 f8d3 	bl	1a2a2 <va_getByIndex>
   190fc:	b9d8      	cbnz	r0, 19136 <cosem_setArbitrator+0xc6>
                if ((ret = va_getByIndex(tmp->Arr, 0, &tmp2)) != DLMS_ERROR_CODE_OK)
   190fe:	9b00      	ldr	r3, [sp, #0]
   19100:	4601      	mov	r1, r0
   19102:	aa01      	add	r2, sp, #4
   19104:	6898      	ldr	r0, [r3, #8]
   19106:	f001 f8cc 	bl	1a2a2 <va_getByIndex>
   1910a:	b9a0      	cbnz	r0, 19136 <cosem_setArbitrator+0xc6>
                if ((ret = oa_findByLN(&settings->objects, DLMS_OBJECT_TYPE_SCRIPT_TABLE, tmp2->byteArr->data, (gxObject**)&it->script)) != 0)
   1910c:	9b01      	ldr	r3, [sp, #4]
   1910e:	689a      	ldr	r2, [r3, #8]
   19110:	2109      	movs	r1, #9
   19112:	6812      	ldr	r2, [r2, #0]
   19114:	4633      	mov	r3, r6
   19116:	f108 0098 	add.w	r0, r8, #152	; 0x98
   1911a:	f000 fe7f 	bl	19e1c <oa_findByLN>
   1911e:	b950      	cbnz	r0, 19136 <cosem_setArbitrator+0xc6>
                if (it->script == NULL)
   19120:	6833      	ldr	r3, [r6, #0]
   19122:	2b00      	cmp	r3, #0
   19124:	d0bd      	beq.n	190a2 <cosem_setArbitrator+0x32>
                if ((ret = va_getByIndex(tmp->Arr, 1, &tmp2)) != DLMS_ERROR_CODE_OK)
   19126:	9b00      	ldr	r3, [sp, #0]
   19128:	aa01      	add	r2, sp, #4
   1912a:	6898      	ldr	r0, [r3, #8]
   1912c:	2101      	movs	r1, #1
   1912e:	f001 f8b8 	bl	1a2a2 <va_getByIndex>
   19132:	2800      	cmp	r0, #0
   19134:	d0ca      	beq.n	190cc <cosem_setArbitrator+0x5c>
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   19136:	b003      	add	sp, #12
   19138:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            for (pos = 0; pos != value->Arr->size; ++pos)
   1913c:	2700      	movs	r7, #0
                it->script = NULL;
   1913e:	46b9      	mov	r9, r7
   19140:	e7cd      	b.n	190de <cosem_setArbitrator+0x6e>
        obj_clearBitArrayList(&object->permissionsTable);
   19142:	341c      	adds	r4, #28
   19144:	4620      	mov	r0, r4
   19146:	f7fa fdba 	bl	13cbe <obj_clearBitArrayList>
        if (value->Arr != NULL)
   1914a:	68ab      	ldr	r3, [r5, #8]
   1914c:	2b00      	cmp	r3, #0
   1914e:	d0a6      	beq.n	1909e <cosem_setArbitrator+0x2e>
            for (pos = 0; pos != value->Arr->size; ++pos)
   19150:	2600      	movs	r6, #0
   19152:	e019      	b.n	19188 <cosem_setArbitrator+0x118>
                ret = va_getByIndex(value->Arr, pos, &tmp);
   19154:	466a      	mov	r2, sp
   19156:	4631      	mov	r1, r6
   19158:	f001 f8a3 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   1915c:	2800      	cmp	r0, #0
   1915e:	d1ea      	bne.n	19136 <cosem_setArbitrator+0xc6>
                ba = (bitArray*)gxmalloc(sizeof(bitArray));
   19160:	2008      	movs	r0, #8
   19162:	f7f2 fd27 	bl	bbb4 <malloc>
   19166:	4607      	mov	r7, r0
                ba_init(ba);
   19168:	f7f3 fc35 	bl	c9d6 <ba_init>
                if ((ba_copy(ba, tmp->bitArr->data, tmp->bitArr->size)) != 0)
   1916c:	9b00      	ldr	r3, [sp, #0]
   1916e:	689b      	ldr	r3, [r3, #8]
   19170:	4638      	mov	r0, r7
   19172:	88da      	ldrh	r2, [r3, #6]
   19174:	6819      	ldr	r1, [r3, #0]
   19176:	f7f3 fca9 	bl	cacc <ba_copy>
   1917a:	2800      	cmp	r0, #0
   1917c:	d18f      	bne.n	1909e <cosem_setArbitrator+0x2e>
                arr_push(&object->permissionsTable, ba);
   1917e:	4639      	mov	r1, r7
   19180:	4620      	mov	r0, r4
   19182:	f7f7 f8c3 	bl	1030c <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   19186:	3601      	adds	r6, #1
   19188:	68a8      	ldr	r0, [r5, #8]
   1918a:	88c3      	ldrh	r3, [r0, #6]
   1918c:	42b3      	cmp	r3, r6
   1918e:	d1e1      	bne.n	19154 <cosem_setArbitrator+0xe4>
   19190:	e785      	b.n	1909e <cosem_setArbitrator+0x2e>
        arr_clear(&object->weightingsTable);
   19192:	3428      	adds	r4, #40	; 0x28
   19194:	4620      	mov	r0, r4
   19196:	f7f7 f8ce 	bl	10336 <arr_clear>
        if (value->Arr != NULL)
   1919a:	68ab      	ldr	r3, [r5, #8]
   1919c:	2b00      	cmp	r3, #0
   1919e:	f43f af7e 	beq.w	1909e <cosem_setArbitrator+0x2e>
            for (pos = 0; pos != value->Arr->size; ++pos)
   191a2:	2600      	movs	r6, #0
   191a4:	e016      	b.n	191d4 <cosem_setArbitrator+0x164>
                ret = va_getByIndex(value->Arr, pos, &tmp);
   191a6:	466a      	mov	r2, sp
   191a8:	4631      	mov	r1, r6
   191aa:	f001 f87a 	bl	1a2a2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   191ae:	2800      	cmp	r0, #0
   191b0:	d1c1      	bne.n	19136 <cosem_setArbitrator+0xc6>
                tmp2 = (dlmsVARIANT*)gxmalloc(sizeof(dlmsVARIANT));
   191b2:	2010      	movs	r0, #16
   191b4:	f7f2 fcfe 	bl	bbb4 <malloc>
   191b8:	4607      	mov	r7, r0
                var_init(tmp2);
   191ba:	f000 fe98 	bl	19eee <var_init>
                ret = var_copy(tmp2, tmp);
   191be:	9900      	ldr	r1, [sp, #0]
   191c0:	4638      	mov	r0, r7
   191c2:	f7eb f89b 	bl	42fc <var_copy>
                if (ret != 0)
   191c6:	2800      	cmp	r0, #0
   191c8:	d1b5      	bne.n	19136 <cosem_setArbitrator+0xc6>
                arr_push(&object->weightingsTable, tmp2);
   191ca:	4639      	mov	r1, r7
   191cc:	4620      	mov	r0, r4
   191ce:	f7f7 f89d 	bl	1030c <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   191d2:	3601      	adds	r6, #1
   191d4:	68a8      	ldr	r0, [r5, #8]
   191d6:	88c3      	ldrh	r3, [r0, #6]
   191d8:	42b3      	cmp	r3, r6
   191da:	d1e4      	bne.n	191a6 <cosem_setArbitrator+0x136>
   191dc:	e75f      	b.n	1909e <cosem_setArbitrator+0x2e>
        obj_clearBitArrayList(&object->mostRecentRequestsTable);
   191de:	3434      	adds	r4, #52	; 0x34
   191e0:	4620      	mov	r0, r4
   191e2:	f7fa fd6c 	bl	13cbe <obj_clearBitArrayList>
        if (value->Arr != NULL)
   191e6:	68ab      	ldr	r3, [r5, #8]
   191e8:	2b00      	cmp	r3, #0
   191ea:	f43f af58 	beq.w	1909e <cosem_setArbitrator+0x2e>
            for (pos = 0; pos != value->Arr->size; ++pos)
   191ee:	2600      	movs	r6, #0
   191f0:	e01a      	b.n	19228 <cosem_setArbitrator+0x1b8>
                if ((ret = va_getByIndex(value->Arr, pos, &tmp)) != DLMS_ERROR_CODE_OK)
   191f2:	466a      	mov	r2, sp
   191f4:	4631      	mov	r1, r6
   191f6:	f001 f854 	bl	1a2a2 <va_getByIndex>
   191fa:	2800      	cmp	r0, #0
   191fc:	d19b      	bne.n	19136 <cosem_setArbitrator+0xc6>
                it = (bitArray*)gxmalloc(sizeof(bitArray));
   191fe:	2008      	movs	r0, #8
   19200:	f7f2 fcd8 	bl	bbb4 <malloc>
   19204:	4607      	mov	r7, r0
                ba_init(it);
   19206:	f7f3 fbe6 	bl	c9d6 <ba_init>
                if ((ba_copy(it, tmp->bitArr->data, tmp->bitArr->size)) != 0)
   1920a:	9b00      	ldr	r3, [sp, #0]
   1920c:	689b      	ldr	r3, [r3, #8]
   1920e:	4638      	mov	r0, r7
   19210:	88da      	ldrh	r2, [r3, #6]
   19212:	6819      	ldr	r1, [r3, #0]
   19214:	f7f3 fc5a 	bl	cacc <ba_copy>
   19218:	2800      	cmp	r0, #0
   1921a:	f47f af40 	bne.w	1909e <cosem_setArbitrator+0x2e>
                arr_push(&object->mostRecentRequestsTable, it);
   1921e:	4639      	mov	r1, r7
   19220:	4620      	mov	r0, r4
   19222:	f7f7 f873 	bl	1030c <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   19226:	3601      	adds	r6, #1
   19228:	68a8      	ldr	r0, [r5, #8]
   1922a:	88c3      	ldrh	r3, [r0, #6]
   1922c:	42b3      	cmp	r3, r6
   1922e:	d1e0      	bne.n	191f2 <cosem_setArbitrator+0x182>
   19230:	e735      	b.n	1909e <cosem_setArbitrator+0x2e>
        object->lastOutcome = (unsigned char)var_toInteger(value);
   19232:	4628      	mov	r0, r5
   19234:	f001 f9af 	bl	1a596 <var_toInteger>
   19238:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
   1923c:	e72f      	b.n	1909e <cosem_setArbitrator+0x2e>
            for (pos = 0; pos != value->Arr->size; ++pos)
   1923e:	f44f 7081 	mov.w	r0, #258	; 0x102
   19242:	e778      	b.n	19136 <cosem_setArbitrator+0xc6>

00019244 <cosem_setIec8802LlcType1Setup>:
    gxIec8802LlcType1Setup* object,
    unsigned char index,
    dlmsVARIANT* value)
{
    int ret = DLMS_ERROR_CODE_OK;
    switch (index)
   19244:	2a02      	cmp	r2, #2
{
   19246:	b510      	push	{r4, lr}
   19248:	4618      	mov	r0, r3
   1924a:	460c      	mov	r4, r1
    switch (index)
   1924c:	d104      	bne.n	19258 <cosem_setIec8802LlcType1Setup+0x14>
    {
    case 2:
        object->maximumOctetsUiPdu = (uint16_t)var_toInteger(value);
   1924e:	f001 f9a2 	bl	1a596 <var_toInteger>
   19252:	8220      	strh	r0, [r4, #16]
    int ret = DLMS_ERROR_CODE_OK;
   19254:	2000      	movs	r0, #0
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   19256:	bd10      	pop	{r4, pc}
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   19258:	f44f 7081 	mov.w	r0, #258	; 0x102
    return ret;
   1925c:	e7fb      	b.n	19256 <cosem_setIec8802LlcType1Setup+0x12>

0001925e <cosem_setIec8802LlcType2Setup>:
    gxIec8802LlcType2Setup* object,
    unsigned char index,
    dlmsVARIANT* value)
{
    int ret = DLMS_ERROR_CODE_OK;
    switch (index)
   1925e:	3a02      	subs	r2, #2
{
   19260:	b510      	push	{r4, lr}
   19262:	4618      	mov	r0, r3
   19264:	460c      	mov	r4, r1
   19266:	2a07      	cmp	r2, #7
   19268:	d826      	bhi.n	192b8 <cosem_setIec8802LlcType2Setup+0x5a>
   1926a:	e8df f002 	tbb	[pc, r2]
   1926e:	0904      	.short	0x0904
   19270:	1915110d 	.word	0x1915110d
   19274:	211d      	.short	0x211d
    {
    case 2:
        object->transmitWindowSizeK = (unsigned char)var_toInteger(value);
   19276:	f001 f98e 	bl	1a596 <var_toInteger>
   1927a:	7420      	strb	r0, [r4, #16]
    int ret = DLMS_ERROR_CODE_OK;
   1927c:	2000      	movs	r0, #0
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   1927e:	bd10      	pop	{r4, pc}
        object->transmitWindowSizeRW = (unsigned char)var_toInteger(value);
   19280:	f001 f989 	bl	1a596 <var_toInteger>
   19284:	7460      	strb	r0, [r4, #17]
        break;
   19286:	e7f9      	b.n	1927c <cosem_setIec8802LlcType2Setup+0x1e>
        object->maximumOctetsPdu = (uint16_t)var_toInteger(value);
   19288:	f001 f985 	bl	1a596 <var_toInteger>
   1928c:	8260      	strh	r0, [r4, #18]
        break;
   1928e:	e7f5      	b.n	1927c <cosem_setIec8802LlcType2Setup+0x1e>
        object->maximumNumberTransmissions = (unsigned char)var_toInteger(value);
   19290:	f001 f981 	bl	1a596 <var_toInteger>
   19294:	7520      	strb	r0, [r4, #20]
        break;
   19296:	e7f1      	b.n	1927c <cosem_setIec8802LlcType2Setup+0x1e>
        object->acknowledgementTimer = (uint16_t)var_toInteger(value);
   19298:	f001 f97d 	bl	1a596 <var_toInteger>
   1929c:	82e0      	strh	r0, [r4, #22]
        break;
   1929e:	e7ed      	b.n	1927c <cosem_setIec8802LlcType2Setup+0x1e>
        object->bitTimer = (uint16_t)var_toInteger(value);
   192a0:	f001 f979 	bl	1a596 <var_toInteger>
   192a4:	8320      	strh	r0, [r4, #24]
        break;
   192a6:	e7e9      	b.n	1927c <cosem_setIec8802LlcType2Setup+0x1e>
        object->rejectTimer = (uint16_t)var_toInteger(value);
   192a8:	f001 f975 	bl	1a596 <var_toInteger>
   192ac:	8360      	strh	r0, [r4, #26]
        break;
   192ae:	e7e5      	b.n	1927c <cosem_setIec8802LlcType2Setup+0x1e>
        object->busyStateTimer = (uint16_t)var_toInteger(value);
   192b0:	f001 f971 	bl	1a596 <var_toInteger>
   192b4:	83a0      	strh	r0, [r4, #28]
   192b6:	e7e1      	b.n	1927c <cosem_setIec8802LlcType2Setup+0x1e>
    int ret = DLMS_ERROR_CODE_OK;
   192b8:	f44f 7081 	mov.w	r0, #258	; 0x102
    return ret;
   192bc:	e7df      	b.n	1927e <cosem_setIec8802LlcType2Setup+0x20>

000192be <cosem_setIec8802LlcType3Setup>:
    gxIec8802LlcType3Setup* object,
    unsigned char index,
    dlmsVARIANT* value)
{
    int ret = DLMS_ERROR_CODE_OK;
    switch (index)
   192be:	3a02      	subs	r2, #2
{
   192c0:	b510      	push	{r4, lr}
   192c2:	4618      	mov	r0, r3
   192c4:	460c      	mov	r4, r1
   192c6:	2a04      	cmp	r2, #4
   192c8:	d819      	bhi.n	192fe <cosem_setIec8802LlcType3Setup+0x40>
   192ca:	e8df f002 	tbb	[pc, r2]
   192ce:	0803      	.short	0x0803
   192d0:	100c      	.short	0x100c
   192d2:	14          	.byte	0x14
   192d3:	00          	.byte	0x00
    {
    case 2:
        object->maximumOctetsACnPdu = (uint16_t)var_toInteger(value);
   192d4:	f001 f95f 	bl	1a596 <var_toInteger>
   192d8:	8220      	strh	r0, [r4, #16]
    int ret = DLMS_ERROR_CODE_OK;
   192da:	2000      	movs	r0, #0
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   192dc:	bd10      	pop	{r4, pc}
        object->maximumTransmissions = (unsigned char)var_toInteger(value);
   192de:	f001 f95a 	bl	1a596 <var_toInteger>
   192e2:	74a0      	strb	r0, [r4, #18]
        break;
   192e4:	e7f9      	b.n	192da <cosem_setIec8802LlcType3Setup+0x1c>
        object->acknowledgementTime = (uint16_t)var_toInteger(value);
   192e6:	f001 f956 	bl	1a596 <var_toInteger>
   192ea:	82a0      	strh	r0, [r4, #20]
        break;
   192ec:	e7f5      	b.n	192da <cosem_setIec8802LlcType3Setup+0x1c>
        object->receiveLifetime = (uint16_t)var_toInteger(value);
   192ee:	f001 f952 	bl	1a596 <var_toInteger>
   192f2:	82e0      	strh	r0, [r4, #22]
        break;
   192f4:	e7f1      	b.n	192da <cosem_setIec8802LlcType3Setup+0x1c>
        object->transmitLifetime = (uint16_t)var_toInteger(value);
   192f6:	f001 f94e 	bl	1a596 <var_toInteger>
   192fa:	8320      	strh	r0, [r4, #24]
   192fc:	e7ed      	b.n	192da <cosem_setIec8802LlcType3Setup+0x1c>
    int ret = DLMS_ERROR_CODE_OK;
   192fe:	f44f 7081 	mov.w	r0, #258	; 0x102
    return ret;
   19302:	e7eb      	b.n	192dc <cosem_setIec8802LlcType3Setup+0x1e>

00019304 <cosem_setSFSKActiveInitiator>:
    unsigned char index,
    dlmsVARIANT* value)
{
    int ret = 0;
    dlmsVARIANT* tmp;
    switch (index)
   19304:	2a02      	cmp	r2, #2
{
   19306:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   19308:	460d      	mov	r5, r1
   1930a:	461e      	mov	r6, r3
    switch (index)
   1930c:	d13d      	bne.n	1938a <cosem_setSFSKActiveInitiator+0x86>
    {
    case 2:
        if (value->vt == DLMS_DATA_TYPE_STRUCTURE)
   1930e:	781b      	ldrb	r3, [r3, #0]
   19310:	f101 0710 	add.w	r7, r1, #16
   19314:	2b02      	cmp	r3, #2
        {
            bb_clear(&object->systemTitle);
   19316:	4638      	mov	r0, r7
        if (value->vt == DLMS_DATA_TYPE_STRUCTURE)
   19318:	d130      	bne.n	1937c <cosem_setSFSKActiveInitiator+0x78>
            bb_clear(&object->systemTitle);
   1931a:	f7f3 fe26 	bl	cf6a <bb_clear>
            if ((ret = va_getByIndex(value->Arr, 0, &tmp)) != DLMS_ERROR_CODE_OK)
   1931e:	68b0      	ldr	r0, [r6, #8]
   19320:	aa01      	add	r2, sp, #4
   19322:	2100      	movs	r1, #0
   19324:	f000 ffbd 	bl	1a2a2 <va_getByIndex>
   19328:	4604      	mov	r4, r0
   1932a:	bb20      	cbnz	r0, 19376 <cosem_setSFSKActiveInitiator+0x72>
            {
                break;
            }
            if (tmp->byteArr != NULL)
   1932c:	9b01      	ldr	r3, [sp, #4]
   1932e:	6898      	ldr	r0, [r3, #8]
   19330:	b9b0      	cbnz	r0, 19360 <cosem_setSFSKActiveInitiator+0x5c>
                if ((ret = bb_set(&object->systemTitle, tmp->byteArr->data, bb_size(tmp->byteArr))) != 0)
                {
                    break;
                }
            }
            if ((ret = va_getByIndex(value->Arr, 1, &tmp)) != DLMS_ERROR_CODE_OK)
   19332:	68b0      	ldr	r0, [r6, #8]
   19334:	aa01      	add	r2, sp, #4
   19336:	2101      	movs	r1, #1
   19338:	f000 ffb3 	bl	1a2a2 <va_getByIndex>
   1933c:	4604      	mov	r4, r0
   1933e:	b9d0      	cbnz	r0, 19376 <cosem_setSFSKActiveInitiator+0x72>
            {
                break;
            }
            object->macAddress = (uint16_t)var_toInteger(tmp);
   19340:	9801      	ldr	r0, [sp, #4]
   19342:	f001 f928 	bl	1a596 <var_toInteger>
            if ((ret = va_getByIndex(value->Arr, 2, &tmp)) != DLMS_ERROR_CODE_OK)
   19346:	aa01      	add	r2, sp, #4
            object->macAddress = (uint16_t)var_toInteger(tmp);
   19348:	83a8      	strh	r0, [r5, #28]
            if ((ret = va_getByIndex(value->Arr, 2, &tmp)) != DLMS_ERROR_CODE_OK)
   1934a:	2102      	movs	r1, #2
   1934c:	68b0      	ldr	r0, [r6, #8]
   1934e:	f000 ffa8 	bl	1a2a2 <va_getByIndex>
   19352:	4604      	mov	r4, r0
   19354:	b978      	cbnz	r0, 19376 <cosem_setSFSKActiveInitiator+0x72>
            {
                break;
            }
            object->lSapSelector = (unsigned char)var_toInteger(tmp);
   19356:	9801      	ldr	r0, [sp, #4]
   19358:	f001 f91d 	bl	1a596 <var_toInteger>
   1935c:	77a8      	strb	r0, [r5, #30]
   1935e:	e00a      	b.n	19376 <cosem_setSFSKActiveInitiator+0x72>
                if ((ret = bb_set(&object->systemTitle, tmp->byteArr->data, bb_size(tmp->byteArr))) != 0)
   19360:	6804      	ldr	r4, [r0, #0]
   19362:	f7f3 fc3c 	bl	cbde <bb_size>
   19366:	4621      	mov	r1, r4
   19368:	4602      	mov	r2, r0
   1936a:	4638      	mov	r0, r7
   1936c:	f7f3 fd89 	bl	ce82 <bb_set>
   19370:	4604      	mov	r4, r0
   19372:	2800      	cmp	r0, #0
   19374:	d0dd      	beq.n	19332 <cosem_setSFSKActiveInitiator+0x2e>
        break;
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    return ret;
}
   19376:	4620      	mov	r0, r4
   19378:	b003      	add	sp, #12
   1937a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            bb_clear(&object->systemTitle);
   1937c:	f7f3 fdf5 	bl	cf6a <bb_clear>
            object->macAddress = 0;
   19380:	2000      	movs	r0, #0
   19382:	83a8      	strh	r0, [r5, #28]
            object->lSapSelector = 0;
   19384:	77a8      	strb	r0, [r5, #30]
    int ret = 0;
   19386:	4604      	mov	r4, r0
   19388:	e7f5      	b.n	19376 <cosem_setSFSKActiveInitiator+0x72>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   1938a:	f44f 7481 	mov.w	r4, #258	; 0x102
    return ret;
   1938e:	e7f2      	b.n	19376 <cosem_setSFSKActiveInitiator+0x72>

00019390 <cosem_setFSKMacCounters>:
    dlmsVARIANT* value)
{
    int pos, ret = DLMS_ERROR_CODE_OK;
    gxUint16PairUint32* it;
    dlmsVARIANT* tmp, * tmp2;
    switch (index)
   19390:	3a02      	subs	r2, #2
{
   19392:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   19396:	460d      	mov	r5, r1
   19398:	461e      	mov	r6, r3
   1939a:	2a06      	cmp	r2, #6
   1939c:	f200 80de 	bhi.w	1955c <cosem_setFSKMacCounters+0x1cc>
   193a0:	e8df f012 	tbh	[pc, r2, lsl #1]
   193a4:	00460007 	.word	0x00460007
   193a8:	00c8008b 	.word	0x00c8008b
   193ac:	00d200cd 	.word	0x00d200cd
   193b0:	00d7      	.short	0x00d7
    {
    case 2:
    {
        arr_clear(&object->synchronizationRegister);
   193b2:	3510      	adds	r5, #16
   193b4:	4628      	mov	r0, r5
   193b6:	f7f6 ffbe 	bl	10336 <arr_clear>
        if (value->vt == DLMS_DATA_TYPE_ARRAY)
   193ba:	7833      	ldrb	r3, [r6, #0]
   193bc:	2b01      	cmp	r3, #1
   193be:	d034      	beq.n	1942a <cosem_setFSKMacCounters+0x9a>
    int pos, ret = DLMS_ERROR_CODE_OK;
   193c0:	2400      	movs	r4, #0
        }
    }
    break;
    case 5:
        object->repetitionsCounter = var_toInteger(value);
        break;
   193c2:	e06f      	b.n	194a4 <cosem_setFSKMacCounters+0x114>
                if ((ret = va_getByIndex(value->Arr, pos, &tmp)) != DLMS_ERROR_CODE_OK)
   193c4:	466a      	mov	r2, sp
   193c6:	4641      	mov	r1, r8
   193c8:	f000 ff6b 	bl	1a2a2 <va_getByIndex>
   193cc:	4604      	mov	r4, r0
   193ce:	2800      	cmp	r0, #0
   193d0:	d168      	bne.n	194a4 <cosem_setFSKMacCounters+0x114>
                it = (gxUint16PairUint32*)gxmalloc(sizeof(gxUint16PairUint32));
   193d2:	2008      	movs	r0, #8
   193d4:	f7f2 fbee 	bl	bbb4 <malloc>
                if (it == NULL)
   193d8:	4607      	mov	r7, r0
   193da:	2800      	cmp	r0, #0
   193dc:	f000 80c1 	beq.w	19562 <cosem_setFSKMacCounters+0x1d2>
                if ((ret = va_getByIndex(tmp->Arr, 0, &tmp2)) != DLMS_ERROR_CODE_OK)
   193e0:	9b00      	ldr	r3, [sp, #0]
   193e2:	4621      	mov	r1, r4
   193e4:	6898      	ldr	r0, [r3, #8]
   193e6:	aa01      	add	r2, sp, #4
   193e8:	f000 ff5b 	bl	1a2a2 <va_getByIndex>
   193ec:	4604      	mov	r4, r0
   193ee:	2800      	cmp	r0, #0
   193f0:	d158      	bne.n	194a4 <cosem_setFSKMacCounters+0x114>
                it->first = (uint16_t)var_toInteger(tmp2);
   193f2:	9801      	ldr	r0, [sp, #4]
   193f4:	f001 f8cf 	bl	1a596 <var_toInteger>
                if ((ret = va_getByIndex(tmp->Arr, 1, &tmp2)) != DLMS_ERROR_CODE_OK)
   193f8:	9b00      	ldr	r3, [sp, #0]
                it->first = (uint16_t)var_toInteger(tmp2);
   193fa:	8038      	strh	r0, [r7, #0]
                if ((ret = va_getByIndex(tmp->Arr, 1, &tmp2)) != DLMS_ERROR_CODE_OK)
   193fc:	aa01      	add	r2, sp, #4
   193fe:	6898      	ldr	r0, [r3, #8]
   19400:	2101      	movs	r1, #1
   19402:	f000 ff4e 	bl	1a2a2 <va_getByIndex>
   19406:	4604      	mov	r4, r0
   19408:	2800      	cmp	r0, #0
   1940a:	d14b      	bne.n	194a4 <cosem_setFSKMacCounters+0x114>
                it->second = var_toInteger(tmp2);
   1940c:	9801      	ldr	r0, [sp, #4]
   1940e:	f001 f8c2 	bl	1a596 <var_toInteger>
                arr_push(&object->synchronizationRegister, it);
   19412:	4639      	mov	r1, r7
                it->second = var_toInteger(tmp2);
   19414:	6078      	str	r0, [r7, #4]
                arr_push(&object->synchronizationRegister, it);
   19416:	4628      	mov	r0, r5
   19418:	f7f6 ff78 	bl	1030c <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   1941c:	f108 0801 	add.w	r8, r8, #1
   19420:	68b0      	ldr	r0, [r6, #8]
   19422:	88c3      	ldrh	r3, [r0, #6]
   19424:	4543      	cmp	r3, r8
   19426:	d1cd      	bne.n	193c4 <cosem_setFSKMacCounters+0x34>
   19428:	e7ca      	b.n	193c0 <cosem_setFSKMacCounters+0x30>
   1942a:	f04f 0800 	mov.w	r8, #0
   1942e:	e7f7      	b.n	19420 <cosem_setFSKMacCounters+0x90>
        if (value->vt == DLMS_DATA_TYPE_STRUCTURE)
   19430:	7837      	ldrb	r7, [r6, #0]
   19432:	2f02      	cmp	r7, #2
   19434:	d13a      	bne.n	194ac <cosem_setFSKMacCounters+0x11c>
            if ((ret = va_getByIndex(value->Arr, 0, &tmp)) == DLMS_ERROR_CODE_OK)
   19436:	68b0      	ldr	r0, [r6, #8]
   19438:	466a      	mov	r2, sp
   1943a:	2100      	movs	r1, #0
   1943c:	f000 ff31 	bl	1a2a2 <va_getByIndex>
   19440:	4604      	mov	r4, r0
   19442:	bb78      	cbnz	r0, 194a4 <cosem_setFSKMacCounters+0x114>
                object->physicalLayerDesynchronization = var_toInteger(tmp);
   19444:	9800      	ldr	r0, [sp, #0]
   19446:	f001 f8a6 	bl	1a596 <var_toInteger>
                if ((ret = va_getByIndex(value->Arr, 1, &tmp)) == DLMS_ERROR_CODE_OK)
   1944a:	466a      	mov	r2, sp
                object->physicalLayerDesynchronization = var_toInteger(tmp);
   1944c:	61e8      	str	r0, [r5, #28]
                if ((ret = va_getByIndex(value->Arr, 1, &tmp)) == DLMS_ERROR_CODE_OK)
   1944e:	2101      	movs	r1, #1
   19450:	68b0      	ldr	r0, [r6, #8]
   19452:	f000 ff26 	bl	1a2a2 <va_getByIndex>
   19456:	4604      	mov	r4, r0
   19458:	bb20      	cbnz	r0, 194a4 <cosem_setFSKMacCounters+0x114>
                    object->timeOutNotAddressedDesynchronization = var_toInteger(tmp);
   1945a:	9800      	ldr	r0, [sp, #0]
   1945c:	f001 f89b 	bl	1a596 <var_toInteger>
                    if ((ret = va_getByIndex(value->Arr, 2, &tmp)) == DLMS_ERROR_CODE_OK)
   19460:	466a      	mov	r2, sp
                    object->timeOutNotAddressedDesynchronization = var_toInteger(tmp);
   19462:	6228      	str	r0, [r5, #32]
                    if ((ret = va_getByIndex(value->Arr, 2, &tmp)) == DLMS_ERROR_CODE_OK)
   19464:	4639      	mov	r1, r7
   19466:	68b0      	ldr	r0, [r6, #8]
   19468:	f000 ff1b 	bl	1a2a2 <va_getByIndex>
   1946c:	4604      	mov	r4, r0
   1946e:	b9c8      	cbnz	r0, 194a4 <cosem_setFSKMacCounters+0x114>
                        object->timeOutFrameNotOkDesynchronization = var_toInteger(tmp);
   19470:	9800      	ldr	r0, [sp, #0]
   19472:	f001 f890 	bl	1a596 <var_toInteger>
                        if ((ret = va_getByIndex(value->Arr, 3, &tmp)) == DLMS_ERROR_CODE_OK)
   19476:	466a      	mov	r2, sp
                        object->timeOutFrameNotOkDesynchronization = var_toInteger(tmp);
   19478:	6268      	str	r0, [r5, #36]	; 0x24
                        if ((ret = va_getByIndex(value->Arr, 3, &tmp)) == DLMS_ERROR_CODE_OK)
   1947a:	2103      	movs	r1, #3
   1947c:	68b0      	ldr	r0, [r6, #8]
   1947e:	f000 ff10 	bl	1a2a2 <va_getByIndex>
   19482:	4604      	mov	r4, r0
   19484:	b970      	cbnz	r0, 194a4 <cosem_setFSKMacCounters+0x114>
                            object->writeRequestDesynchronization = var_toInteger(tmp);
   19486:	9800      	ldr	r0, [sp, #0]
   19488:	f001 f885 	bl	1a596 <var_toInteger>
                            if ((ret = va_getByIndex(value->Arr, 4, &tmp)) == DLMS_ERROR_CODE_OK)
   1948c:	466a      	mov	r2, sp
                            object->writeRequestDesynchronization = var_toInteger(tmp);
   1948e:	62a8      	str	r0, [r5, #40]	; 0x28
                            if ((ret = va_getByIndex(value->Arr, 4, &tmp)) == DLMS_ERROR_CODE_OK)
   19490:	2104      	movs	r1, #4
   19492:	68b0      	ldr	r0, [r6, #8]
   19494:	f000 ff05 	bl	1a2a2 <va_getByIndex>
   19498:	4604      	mov	r4, r0
   1949a:	b918      	cbnz	r0, 194a4 <cosem_setFSKMacCounters+0x114>
                                object->wrongInitiatorDesynchronization = var_toInteger(tmp);
   1949c:	9800      	ldr	r0, [sp, #0]
   1949e:	f001 f87a 	bl	1a596 <var_toInteger>
   194a2:	62e8      	str	r0, [r5, #44]	; 0x2c
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   194a4:	4620      	mov	r0, r4
   194a6:	b002      	add	sp, #8
   194a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            object->physicalLayerDesynchronization = 0;
   194ac:	2400      	movs	r4, #0
            object->timeOutNotAddressedDesynchronization = 0;
   194ae:	e9c1 4407 	strd	r4, r4, [r1, #28]
            object->writeRequestDesynchronization = 0;
   194b2:	e9c1 4409 	strd	r4, r4, [r1, #36]	; 0x24
            object->wrongInitiatorDesynchronization = 0;
   194b6:	62cc      	str	r4, [r1, #44]	; 0x2c
   194b8:	e7f4      	b.n	194a4 <cosem_setFSKMacCounters+0x114>
        arr_clear(&object->broadcastFramesCounter);
   194ba:	3530      	adds	r5, #48	; 0x30
   194bc:	4628      	mov	r0, r5
   194be:	f7f6 ff3a 	bl	10336 <arr_clear>
        if (value->vt == DLMS_DATA_TYPE_ARRAY)
   194c2:	7833      	ldrb	r3, [r6, #0]
   194c4:	2b01      	cmp	r3, #1
   194c6:	f47f af7b 	bne.w	193c0 <cosem_setFSKMacCounters+0x30>
            for (pos = 0; pos != value->Arr->size; ++pos)
   194ca:	2700      	movs	r7, #0
   194cc:	e02d      	b.n	1952a <cosem_setFSKMacCounters+0x19a>
                if ((ret = va_getByIndex(value->Arr, pos, &tmp)) != DLMS_ERROR_CODE_OK)
   194ce:	466a      	mov	r2, sp
   194d0:	4639      	mov	r1, r7
   194d2:	f000 fee6 	bl	1a2a2 <va_getByIndex>
   194d6:	4604      	mov	r4, r0
   194d8:	2800      	cmp	r0, #0
   194da:	d1e3      	bne.n	194a4 <cosem_setFSKMacCounters+0x114>
                it = (gxUint16PairUint32*)gxmalloc(sizeof(gxUint16PairUint32));
   194dc:	2008      	movs	r0, #8
   194de:	f7f2 fb69 	bl	bbb4 <malloc>
                if (it == NULL)
   194e2:	4680      	mov	r8, r0
   194e4:	2800      	cmp	r0, #0
   194e6:	d03c      	beq.n	19562 <cosem_setFSKMacCounters+0x1d2>
                if ((ret = va_getByIndex(tmp->Arr, 0, &tmp2)) != DLMS_ERROR_CODE_OK)
   194e8:	9b00      	ldr	r3, [sp, #0]
   194ea:	4621      	mov	r1, r4
   194ec:	6898      	ldr	r0, [r3, #8]
   194ee:	aa01      	add	r2, sp, #4
   194f0:	f000 fed7 	bl	1a2a2 <va_getByIndex>
   194f4:	4604      	mov	r4, r0
   194f6:	2800      	cmp	r0, #0
   194f8:	d1d4      	bne.n	194a4 <cosem_setFSKMacCounters+0x114>
                it->first = (uint16_t)var_toInteger(tmp2);
   194fa:	9801      	ldr	r0, [sp, #4]
   194fc:	f001 f84b 	bl	1a596 <var_toInteger>
                if ((ret = va_getByIndex(tmp->Arr, 1, &tmp2)) != DLMS_ERROR_CODE_OK)
   19500:	9b00      	ldr	r3, [sp, #0]
                it->first = (uint16_t)var_toInteger(tmp2);
   19502:	f8a8 0000 	strh.w	r0, [r8]
                if ((ret = va_getByIndex(tmp->Arr, 1, &tmp2)) != DLMS_ERROR_CODE_OK)
   19506:	aa01      	add	r2, sp, #4
   19508:	6898      	ldr	r0, [r3, #8]
   1950a:	2101      	movs	r1, #1
   1950c:	f000 fec9 	bl	1a2a2 <va_getByIndex>
   19510:	4604      	mov	r4, r0
   19512:	2800      	cmp	r0, #0
   19514:	d1c6      	bne.n	194a4 <cosem_setFSKMacCounters+0x114>
                it->second = var_toInteger(tmp2);
   19516:	9801      	ldr	r0, [sp, #4]
   19518:	f001 f83d 	bl	1a596 <var_toInteger>
                arr_push(&object->broadcastFramesCounter, it);
   1951c:	4641      	mov	r1, r8
                it->second = var_toInteger(tmp2);
   1951e:	f8c8 0004 	str.w	r0, [r8, #4]
                arr_push(&object->broadcastFramesCounter, it);
   19522:	4628      	mov	r0, r5
   19524:	f7f6 fef2 	bl	1030c <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   19528:	3701      	adds	r7, #1
   1952a:	68b0      	ldr	r0, [r6, #8]
   1952c:	88c3      	ldrh	r3, [r0, #6]
   1952e:	42bb      	cmp	r3, r7
   19530:	d1cd      	bne.n	194ce <cosem_setFSKMacCounters+0x13e>
   19532:	e745      	b.n	193c0 <cosem_setFSKMacCounters+0x30>
        object->repetitionsCounter = var_toInteger(value);
   19534:	4630      	mov	r0, r6
   19536:	f001 f82e 	bl	1a596 <var_toInteger>
   1953a:	63e8      	str	r0, [r5, #60]	; 0x3c
   1953c:	e740      	b.n	193c0 <cosem_setFSKMacCounters+0x30>
        object->transmissionsCounter = var_toInteger(value);
   1953e:	4630      	mov	r0, r6
   19540:	f001 f829 	bl	1a596 <var_toInteger>
   19544:	6428      	str	r0, [r5, #64]	; 0x40
        break;
   19546:	e73b      	b.n	193c0 <cosem_setFSKMacCounters+0x30>
        object->crcOkFramesCounter = var_toInteger(value);
   19548:	4630      	mov	r0, r6
   1954a:	f001 f824 	bl	1a596 <var_toInteger>
   1954e:	6468      	str	r0, [r5, #68]	; 0x44
        break;
   19550:	e736      	b.n	193c0 <cosem_setFSKMacCounters+0x30>
        object->crcNOkFramesCounter = var_toInteger(value);
   19552:	4630      	mov	r0, r6
   19554:	f001 f81f 	bl	1a596 <var_toInteger>
   19558:	64a8      	str	r0, [r5, #72]	; 0x48
        break;
   1955a:	e731      	b.n	193c0 <cosem_setFSKMacCounters+0x30>
    int pos, ret = DLMS_ERROR_CODE_OK;
   1955c:	f44f 7481 	mov.w	r4, #258	; 0x102
   19560:	e7a0      	b.n	194a4 <cosem_setFSKMacCounters+0x114>
                    ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   19562:	f44f 7482 	mov.w	r4, #260	; 0x104
    return ret;
   19566:	e79d      	b.n	194a4 <cosem_setFSKMacCounters+0x114>

00019568 <cosem_setSFSKMacSynchronizationTimeouts>:
    gxSFSKMacSynchronizationTimeouts* object,
    unsigned char index,
    dlmsVARIANT* value)
{
    int ret = 0;
    switch (index)
   19568:	3a02      	subs	r2, #2
{
   1956a:	b510      	push	{r4, lr}
   1956c:	4618      	mov	r0, r3
   1956e:	460c      	mov	r4, r1
   19570:	2a03      	cmp	r2, #3
   19572:	d814      	bhi.n	1959e <cosem_setSFSKMacSynchronizationTimeouts+0x36>
   19574:	e8df f002 	tbb	[pc, r2]
   19578:	0f0b0702 	.word	0x0f0b0702
    {
    case 2:
        object->searchInitiatorTimeout = (uint16_t)var_toInteger(value);
   1957c:	f001 f80b 	bl	1a596 <var_toInteger>
   19580:	8220      	strh	r0, [r4, #16]
    int ret = 0;
   19582:	2000      	movs	r0, #0
        break;
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    return ret;
}
   19584:	bd10      	pop	{r4, pc}
        object->synchronizationConfirmationTimeout = (uint16_t)var_toInteger(value);
   19586:	f001 f806 	bl	1a596 <var_toInteger>
   1958a:	8260      	strh	r0, [r4, #18]
        break;
   1958c:	e7f9      	b.n	19582 <cosem_setSFSKMacSynchronizationTimeouts+0x1a>
        object->timeOutNotAddressed = (uint16_t)var_toInteger(value);
   1958e:	f001 f802 	bl	1a596 <var_toInteger>
   19592:	82a0      	strh	r0, [r4, #20]
        break;
   19594:	e7f5      	b.n	19582 <cosem_setSFSKMacSynchronizationTimeouts+0x1a>
        object->timeOutFrameNotOK = (uint16_t)var_toInteger(value);
   19596:	f000 fffe 	bl	1a596 <var_toInteger>
   1959a:	82e0      	strh	r0, [r4, #22]
   1959c:	e7f1      	b.n	19582 <cosem_setSFSKMacSynchronizationTimeouts+0x1a>
    int ret = 0;
   1959e:	f44f 7081 	mov.w	r0, #258	; 0x102
    return ret;
   195a2:	e7ef      	b.n	19584 <cosem_setSFSKMacSynchronizationTimeouts+0x1c>

000195a4 <cosem_setSFSKPhyMacSetUp>:
int cosem_setSFSKPhyMacSetUp(
    dlmsSettings* settings,
    gxSFSKPhyMacSetUp* object,
    unsigned char index,
    dlmsVARIANT* value)
{
   195a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   195a6:	3a02      	subs	r2, #2
   195a8:	460d      	mov	r5, r1
   195aa:	461e      	mov	r6, r3
   195ac:	2a0d      	cmp	r2, #13
   195ae:	f200 808b 	bhi.w	196c8 <cosem_setSFSKPhyMacSetUp+0x124>
   195b2:	e8df f002 	tbb	[pc, r2]
   195b6:	0d07      	.short	0x0d07
   195b8:	211c1712 	.word	0x211c1712
   195bc:	6e684641 	.word	0x6e684641
   195c0:	837d7872 	.word	0x837d7872
    int pos, ret = 0;
    dlmsVARIANT* it;
    switch (index)
    {
    case 2:
        object->initiatorElectricalPhase = (DLMS_INITIATOR_ELECTRICAL_PHASE)var_toInteger(value);
   195c4:	4630      	mov	r0, r6
   195c6:	f000 ffe6 	bl	1a596 <var_toInteger>
   195ca:	7428      	strb	r0, [r5, #16]
    int pos, ret = 0;
   195cc:	2400      	movs	r4, #0
    case 14:
        object->synchronizationLocked = (unsigned char)var_toInteger(value);
        break;
    case 15:
        object->transmissionSpeed = (DLMS_BAUD_RATE)var_toInteger(value);
        break;
   195ce:	e02c      	b.n	1962a <cosem_setSFSKPhyMacSetUp+0x86>
        object->deltaElectricalPhase = (DLMS_DELTA_ELECTRICAL_PHASE)var_toInteger(value);
   195d0:	4630      	mov	r0, r6
   195d2:	f000 ffe0 	bl	1a596 <var_toInteger>
   195d6:	7468      	strb	r0, [r5, #17]
        break;
   195d8:	e7f8      	b.n	195cc <cosem_setSFSKPhyMacSetUp+0x28>
        object->maxReceivingGain = (unsigned char)var_toInteger(value);
   195da:	4630      	mov	r0, r6
   195dc:	f000 ffdb 	bl	1a596 <var_toInteger>
   195e0:	74a8      	strb	r0, [r5, #18]
        break;
   195e2:	e7f3      	b.n	195cc <cosem_setSFSKPhyMacSetUp+0x28>
        object->maxTransmittingGain = (unsigned char)var_toInteger(value);
   195e4:	4630      	mov	r0, r6
   195e6:	f000 ffd6 	bl	1a596 <var_toInteger>
   195ea:	74e8      	strb	r0, [r5, #19]
        break;
   195ec:	e7ee      	b.n	195cc <cosem_setSFSKPhyMacSetUp+0x28>
        object->searchInitiatorThreshold = (unsigned char)var_toInteger(value);
   195ee:	4630      	mov	r0, r6
   195f0:	f000 ffd1 	bl	1a596 <var_toInteger>
   195f4:	7528      	strb	r0, [r5, #20]
        break;
   195f6:	e7e9      	b.n	195cc <cosem_setSFSKPhyMacSetUp+0x28>
        if (value->vt == DLMS_DATA_TYPE_STRUCTURE)
   195f8:	7833      	ldrb	r3, [r6, #0]
   195fa:	2b02      	cmp	r3, #2
   195fc:	d118      	bne.n	19630 <cosem_setSFSKPhyMacSetUp+0x8c>
            if ((ret = va_getByIndex(value->Arr, 0, &it)) == DLMS_ERROR_CODE_OK)
   195fe:	68b0      	ldr	r0, [r6, #8]
   19600:	aa01      	add	r2, sp, #4
   19602:	2100      	movs	r1, #0
   19604:	f000 fe4d 	bl	1a2a2 <va_getByIndex>
   19608:	4604      	mov	r4, r0
   1960a:	b970      	cbnz	r0, 1962a <cosem_setSFSKPhyMacSetUp+0x86>
                object->markFrequency = var_toInteger(it);
   1960c:	9801      	ldr	r0, [sp, #4]
   1960e:	f000 ffc2 	bl	1a596 <var_toInteger>
                if ((ret = va_getByIndex(value->Arr, 1, &it)) == DLMS_ERROR_CODE_OK)
   19612:	aa01      	add	r2, sp, #4
                object->markFrequency = var_toInteger(it);
   19614:	61a8      	str	r0, [r5, #24]
                if ((ret = va_getByIndex(value->Arr, 1, &it)) == DLMS_ERROR_CODE_OK)
   19616:	2101      	movs	r1, #1
   19618:	68b0      	ldr	r0, [r6, #8]
   1961a:	f000 fe42 	bl	1a2a2 <va_getByIndex>
   1961e:	4604      	mov	r4, r0
   19620:	b918      	cbnz	r0, 1962a <cosem_setSFSKPhyMacSetUp+0x86>
                    object->spaceFrequency = var_toInteger(it);
   19622:	9801      	ldr	r0, [sp, #4]
   19624:	f000 ffb7 	bl	1a596 <var_toInteger>
   19628:	61e8      	str	r0, [r5, #28]
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   1962a:	4620      	mov	r0, r4
   1962c:	b003      	add	sp, #12
   1962e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            object->markFrequency = 0;
   19630:	2400      	movs	r4, #0
            object->spaceFrequency = 0;
   19632:	e9c1 4406 	strd	r4, r4, [r1, #24]
   19636:	e7f8      	b.n	1962a <cosem_setSFSKPhyMacSetUp+0x86>
        object->macAddress = (uint16_t)var_toInteger(value);
   19638:	4630      	mov	r0, r6
   1963a:	f000 ffac 	bl	1a596 <var_toInteger>
   1963e:	8428      	strh	r0, [r5, #32]
        break;
   19640:	e7c4      	b.n	195cc <cosem_setSFSKPhyMacSetUp+0x28>
        arr_clear(&object->macGroupAddresses);
   19642:	3524      	adds	r5, #36	; 0x24
   19644:	4628      	mov	r0, r5
   19646:	f7f6 fe76 	bl	10336 <arr_clear>
        if (value->vt == DLMS_DATA_TYPE_ARRAY)
   1964a:	7833      	ldrb	r3, [r6, #0]
   1964c:	2b01      	cmp	r3, #1
   1964e:	d1bd      	bne.n	195cc <cosem_setSFSKPhyMacSetUp+0x28>
            for (pos = 0; pos != value->Arr->size; ++pos)
   19650:	2700      	movs	r7, #0
   19652:	e013      	b.n	1967c <cosem_setSFSKPhyMacSetUp+0xd8>
                if ((ret = va_getByIndex(value->Arr, pos, &it)) != DLMS_ERROR_CODE_OK)
   19654:	aa01      	add	r2, sp, #4
   19656:	4639      	mov	r1, r7
   19658:	f000 fe23 	bl	1a2a2 <va_getByIndex>
   1965c:	4604      	mov	r4, r0
   1965e:	2800      	cmp	r0, #0
   19660:	d1e3      	bne.n	1962a <cosem_setSFSKPhyMacSetUp+0x86>
                uint16_t* v = gxmalloc(sizeof(uint16_t));
   19662:	2002      	movs	r0, #2
   19664:	f7f2 faa6 	bl	bbb4 <malloc>
   19668:	4604      	mov	r4, r0
                *v = (uint16_t)var_toInteger(it);
   1966a:	9801      	ldr	r0, [sp, #4]
   1966c:	f000 ff93 	bl	1a596 <var_toInteger>
                arr_push(&object->macGroupAddresses, v);
   19670:	4621      	mov	r1, r4
                *v = (uint16_t)var_toInteger(it);
   19672:	8020      	strh	r0, [r4, #0]
                arr_push(&object->macGroupAddresses, v);
   19674:	4628      	mov	r0, r5
   19676:	f7f6 fe49 	bl	1030c <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   1967a:	3701      	adds	r7, #1
   1967c:	68b0      	ldr	r0, [r6, #8]
   1967e:	88c3      	ldrh	r3, [r0, #6]
   19680:	42bb      	cmp	r3, r7
   19682:	d1e7      	bne.n	19654 <cosem_setSFSKPhyMacSetUp+0xb0>
   19684:	e7a2      	b.n	195cc <cosem_setSFSKPhyMacSetUp+0x28>
        object->repeater = (DLMS_REPEATER)var_toInteger(value);
   19686:	4630      	mov	r0, r6
   19688:	f000 ff85 	bl	1a596 <var_toInteger>
   1968c:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30
        break;
   19690:	e79c      	b.n	195cc <cosem_setSFSKPhyMacSetUp+0x28>
        object->repeaterStatus = value->boolVal;
   19692:	7a33      	ldrb	r3, [r6, #8]
   19694:	f881 3031 	strb.w	r3, [r1, #49]	; 0x31
        break;
   19698:	e798      	b.n	195cc <cosem_setSFSKPhyMacSetUp+0x28>
        object->minDeltaCredit = (unsigned char)var_toInteger(value);
   1969a:	4630      	mov	r0, r6
   1969c:	f000 ff7b 	bl	1a596 <var_toInteger>
   196a0:	f885 0032 	strb.w	r0, [r5, #50]	; 0x32
        break;
   196a4:	e792      	b.n	195cc <cosem_setSFSKPhyMacSetUp+0x28>
        object->initiatorMacAddress = (uint16_t)var_toInteger(value);
   196a6:	4630      	mov	r0, r6
   196a8:	f000 ff75 	bl	1a596 <var_toInteger>
   196ac:	86a8      	strh	r0, [r5, #52]	; 0x34
        break;
   196ae:	e78d      	b.n	195cc <cosem_setSFSKPhyMacSetUp+0x28>
        object->synchronizationLocked = (unsigned char)var_toInteger(value);
   196b0:	4630      	mov	r0, r6
   196b2:	f000 ff70 	bl	1a596 <var_toInteger>
   196b6:	f885 0036 	strb.w	r0, [r5, #54]	; 0x36
        break;
   196ba:	e787      	b.n	195cc <cosem_setSFSKPhyMacSetUp+0x28>
        object->transmissionSpeed = (DLMS_BAUD_RATE)var_toInteger(value);
   196bc:	4630      	mov	r0, r6
   196be:	f000 ff6a 	bl	1a596 <var_toInteger>
   196c2:	f885 0037 	strb.w	r0, [r5, #55]	; 0x37
   196c6:	e781      	b.n	195cc <cosem_setSFSKPhyMacSetUp+0x28>
    int pos, ret = 0;
   196c8:	f44f 7481 	mov.w	r4, #258	; 0x102
    return ret;
   196cc:	e7ad      	b.n	1962a <cosem_setSFSKPhyMacSetUp+0x86>

000196ce <cosem_setSFSKReportingSystemList>:
    dlmsVARIANT* value)
{
    int pos, ret = 0;
    dlmsVARIANT* tmp;
    gxByteBuffer* it;
    if (index == 2)
   196ce:	2a02      	cmp	r2, #2
{
   196d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   196d2:	461f      	mov	r7, r3
    if (index == 2)
   196d4:	d12a      	bne.n	1972c <cosem_setSFSKReportingSystemList+0x5e>
    {
        obj_clearByteBufferList(&object->reportingSystemList);
   196d6:	f101 0410 	add.w	r4, r1, #16
   196da:	4620      	mov	r0, r4
   196dc:	f7fa fa51 	bl	13b82 <obj_clearByteBufferList>
        if (value->vt == DLMS_DATA_TYPE_ARRAY)
   196e0:	783b      	ldrb	r3, [r7, #0]
   196e2:	2b01      	cmp	r3, #1
   196e4:	d020      	beq.n	19728 <cosem_setSFSKReportingSystemList+0x5a>
    int pos, ret = 0;
   196e6:	2000      	movs	r0, #0
    else
    {
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    return ret;
}
   196e8:	b003      	add	sp, #12
   196ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    if ((ret = va_getByIndex(value->Arr, pos, &tmp)) != DLMS_ERROR_CODE_OK)
   196ec:	aa01      	add	r2, sp, #4
   196ee:	4631      	mov	r1, r6
   196f0:	f000 fdd7 	bl	1a2a2 <va_getByIndex>
   196f4:	2800      	cmp	r0, #0
   196f6:	d1f7      	bne.n	196e8 <cosem_setSFSKReportingSystemList+0x1a>
                    it = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
   196f8:	200c      	movs	r0, #12
   196fa:	f7f2 fa5b 	bl	bbb4 <malloc>
   196fe:	4605      	mov	r5, r0
                    BYTE_BUFFER_INIT(it);
   19700:	f7f3 fa70 	bl	cbe4 <bb_init>
                    bb_set(it, tmp->byteArr->data, tmp->byteArr->size);
   19704:	9b01      	ldr	r3, [sp, #4]
   19706:	689b      	ldr	r3, [r3, #8]
   19708:	4628      	mov	r0, r5
   1970a:	88da      	ldrh	r2, [r3, #6]
   1970c:	6819      	ldr	r1, [r3, #0]
   1970e:	f7f3 fbb8 	bl	ce82 <bb_set>
                    if (it == NULL)
   19712:	b175      	cbz	r5, 19732 <cosem_setSFSKReportingSystemList+0x64>
                    arr_push(&object->reportingSystemList, it);
   19714:	4629      	mov	r1, r5
   19716:	4620      	mov	r0, r4
   19718:	f7f6 fdf8 	bl	1030c <arr_push>
                for (pos = 0; pos != value->Arr->size; ++pos)
   1971c:	3601      	adds	r6, #1
   1971e:	68b8      	ldr	r0, [r7, #8]
   19720:	88c3      	ldrh	r3, [r0, #6]
   19722:	42b3      	cmp	r3, r6
   19724:	d1e2      	bne.n	196ec <cosem_setSFSKReportingSystemList+0x1e>
   19726:	e7de      	b.n	196e6 <cosem_setSFSKReportingSystemList+0x18>
   19728:	2600      	movs	r6, #0
   1972a:	e7f8      	b.n	1971e <cosem_setSFSKReportingSystemList+0x50>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   1972c:	f44f 7081 	mov.w	r0, #258	; 0x102
   19730:	e7da      	b.n	196e8 <cosem_setSFSKReportingSystemList+0x1a>
                        ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   19732:	f44f 7082 	mov.w	r0, #260	; 0x104
    return ret;
   19736:	e7d7      	b.n	196e8 <cosem_setSFSKReportingSystemList+0x1a>

00019738 <vec_init>:
#include "../include/objectarray.h"

void vec_init(gxValueEventCollection* arr)
{
    arr->capacity = 0;
    arr->data = NULL;
   19738:	2300      	movs	r3, #0
   1973a:	6003      	str	r3, [r0, #0]
    arr->capacity = 0;
   1973c:	8083      	strh	r3, [r0, #4]
    arr->position = 0;
   1973e:	7183      	strb	r3, [r0, #6]
    arr->size = 0;
}
   19740:	4770      	bx	lr

00019742 <vec_capacity>:
}
#endif //DLMS_IGNORE_MALLOC

//Allocate new size for the array in bytes.
int vec_capacity(gxValueEventCollection* arr, unsigned char capacity)
{
   19742:	b538      	push	{r3, r4, r5, lr}
#ifndef DLMS_IGNORE_MALLOC
    if (!vec_isAttached(arr))
   19744:	f990 3004 	ldrsb.w	r3, [r0, #4]
   19748:	2b00      	cmp	r3, #0
{
   1974a:	4604      	mov	r4, r0
   1974c:	460d      	mov	r5, r1
    if (!vec_isAttached(arr))
   1974e:	db07      	blt.n	19760 <vec_capacity+0x1e>
    {
        arr->capacity = capacity;
   19750:	7101      	strb	r1, [r0, #4]
        if (arr->data == NULL)
   19752:	6800      	ldr	r0, [r0, #0]
   19754:	0089      	lsls	r1, r1, #2
   19756:	b960      	cbnz	r0, 19772 <vec_capacity+0x30>
        {
            arr->data = (gxValueEventArg * *)gxmalloc(arr->capacity * sizeof(gxValueEventArg*));
   19758:	4608      	mov	r0, r1
   1975a:	f7f2 fa2b 	bl	bbb4 <malloc>
        }
        else
        {
            arr->data = (gxValueEventArg * *)gxrealloc(arr->data, arr->capacity * sizeof(gxValueEventArg*));
   1975e:	6020      	str	r0, [r4, #0]
    return arr->capacity & 0x7F;
   19760:	7920      	ldrb	r0, [r4, #4]
        }
    }
#endif //DLMS_IGNORE_MALLOC
    if (vec_getCapacity(arr) < capacity)
   19762:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    return 0;
}
   19766:	4285      	cmp	r5, r0
   19768:	bf8c      	ite	hi
   1976a:	f44f 7082 	movhi.w	r0, #260	; 0x104
   1976e:	2000      	movls	r0, #0
   19770:	bd38      	pop	{r3, r4, r5, pc}
            arr->data = (gxValueEventArg * *)gxrealloc(arr->data, arr->capacity * sizeof(gxValueEventArg*));
   19772:	f7f2 fad7 	bl	bd24 <realloc>
   19776:	e7f2      	b.n	1975e <vec_capacity+0x1c>

00019778 <vec_push>:

#ifndef DLMS_IGNORE_MALLOC
//Push new data to the gxValueEventCollection.
int vec_push(gxValueEventCollection * arr, gxValueEventArg* item)
{
   19778:	b538      	push	{r3, r4, r5, lr}
    return (arr->capacity & 0x80) == 0x80;
   1977a:	f990 3004 	ldrsb.w	r3, [r0, #4]
   1977e:	7902      	ldrb	r2, [r0, #4]
    int ret = 0;
    if (!vec_isAttached(arr))
   19780:	2b00      	cmp	r3, #0
{
   19782:	4604      	mov	r4, r0
   19784:	460d      	mov	r5, r1
    if (!vec_isAttached(arr))
   19786:	da08      	bge.n	1979a <vec_push+0x22>
    return arr->capacity & 0x7F;
   19788:	7922      	ldrb	r2, [r4, #4]
            {
                return ret;
            }
        }
    }
    if (vec_getCapacity(arr) <= arr->size)
   1978a:	7963      	ldrb	r3, [r4, #5]
   1978c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   19790:	4293      	cmp	r3, r2
   19792:	d30c      	bcc.n	197ae <vec_push+0x36>
    {
        ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   19794:	f44f 7082 	mov.w	r0, #260	; 0x104
   19798:	e008      	b.n	197ac <vec_push+0x34>
        if (arr->size >= vec_getCapacity(arr))
   1979a:	7941      	ldrb	r1, [r0, #5]
   1979c:	4291      	cmp	r1, r2
   1979e:	d3f3      	bcc.n	19788 <vec_push+0x10>
            if ((ret = vec_capacity(arr, arr->capacity + 2)) != 0)
   197a0:	3302      	adds	r3, #2
   197a2:	b2d9      	uxtb	r1, r3
   197a4:	f7ff ffcd 	bl	19742 <vec_capacity>
   197a8:	2800      	cmp	r0, #0
   197aa:	d0ed      	beq.n	19788 <vec_push+0x10>
    {
        arr->data[arr->size] = item;
        ++arr->size;
    }
    return ret;
}
   197ac:	bd38      	pop	{r3, r4, r5, pc}
        arr->data[arr->size] = item;
   197ae:	6822      	ldr	r2, [r4, #0]
   197b0:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
        ++arr->size;
   197b4:	3301      	adds	r3, #1
   197b6:	7163      	strb	r3, [r4, #5]
   197b8:	2000      	movs	r0, #0
   197ba:	e7f7      	b.n	197ac <vec_push+0x34>

000197bc <vec_empty>:
#endif //DLMS_IGNORE_MALLOC

void vec_empty(
    gxValueEventCollection* arr)
{
   197bc:	b510      	push	{r4, lr}
#ifndef DLMS_IGNORE_MALLOC
    if (!vec_isAttached(arr))
   197be:	f990 3004 	ldrsb.w	r3, [r0, #4]
   197c2:	2b00      	cmp	r3, #0
{
   197c4:	4604      	mov	r4, r0
    if (!vec_isAttached(arr))
   197c6:	db08      	blt.n	197da <vec_empty+0x1e>
    {
        if (arr->size != 0)
   197c8:	7943      	ldrb	r3, [r0, #5]
   197ca:	b123      	cbz	r3, 197d6 <vec_empty+0x1a>
        {
            gxfree(arr->data);
   197cc:	6800      	ldr	r0, [r0, #0]
   197ce:	f7f2 f9f9 	bl	bbc4 <free>
            arr->data = NULL;
   197d2:	2300      	movs	r3, #0
   197d4:	6023      	str	r3, [r4, #0]
        }
        arr->capacity = 0;
   197d6:	2300      	movs	r3, #0
   197d8:	7123      	strb	r3, [r4, #4]
}
#endif //DLMS_IGNORE_MALLOC
    arr->size = 0;
   197da:	2300      	movs	r3, #0
   197dc:	7163      	strb	r3, [r4, #5]
    arr->position = 0;
   197de:	71a3      	strb	r3, [r4, #6]
}
   197e0:	bd10      	pop	{r4, pc}

000197e2 <ve_init>:
#endif //DLMS_IGNORE_MALLOC
    return 0;
}

void ve_init(gxValueEventArg * ve)
{
   197e2:	b538      	push	{r3, r4, r5, lr}
   197e4:	4604      	mov	r4, r0
    var_init(&ve->value);
    ve->handled = 0;
    ve->target = NULL;
    ve->index = 0;
#if !defined(DLMS_IGNORE_MALLOC) && !defined(DLMS_COSEM_EXACT_DATA_TYPES)
    ve->dataType = DLMS_DATA_TYPE_NONE;
   197e6:	2500      	movs	r5, #0
    var_init(&ve->value);
   197e8:	f000 fb81 	bl	19eee <var_init>
    ve->dataType = DLMS_DATA_TYPE_NONE;
   197ec:	8225      	strh	r5, [r4, #16]
    ve->target = NULL;
   197ee:	6165      	str	r5, [r4, #20]
    ve->index = 0;
   197f0:	8325      	strh	r5, [r4, #24]
#endif //!defined(DLMS_IGNORE_MALLOC) && !defined(DLMS_COSEM_EXACT_DATA_TYPES)
    ve->selector = 0;
    var_init(&ve->parameters);
   197f2:	f104 0020 	add.w	r0, r4, #32
   197f6:	f000 fb7a 	bl	19eee <var_init>
    ve->error = DLMS_ERROR_CODE_OK;
    ve->action = 0;
    ve->byteArray = 0;
    ve->skipMaxPduSize = 0;
    ve->transactionStartIndex = 0;
    ve->transactionEndIndex = 0;
   197fa:	e9c4 550e 	strd	r5, r5, [r4, #56]	; 0x38
    ve->error = DLMS_ERROR_CODE_OK;
   197fe:	6325      	str	r5, [r4, #48]	; 0x30
    ve->skipMaxPduSize = 0;
   19800:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    ve->transaction = 0;
   19804:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
}
   19808:	bd38      	pop	{r3, r4, r5, pc}

0001980a <ve_clear>:

void ve_clear(gxValueEventArg * ve)
{
   1980a:	b538      	push	{r3, r4, r5, lr}
   1980c:	4604      	mov	r4, r0
    var_clear(&ve->value);
    ve->handled = 0;
    ve->target = NULL;
    ve->index = 0;
#if !defined(DLMS_IGNORE_MALLOC) && !defined(DLMS_COSEM_EXACT_DATA_TYPES)
    ve->dataType = DLMS_DATA_TYPE_NONE;
   1980e:	2500      	movs	r5, #0
    var_clear(&ve->value);
   19810:	f000 fcc9 	bl	1a1a6 <var_clear>
    ve->dataType = DLMS_DATA_TYPE_NONE;
   19814:	8225      	strh	r5, [r4, #16]
    ve->target = NULL;
   19816:	6165      	str	r5, [r4, #20]
    ve->index = 0;
   19818:	8325      	strh	r5, [r4, #24]
#endif //!defined(DLMS_IGNORE_MALLOC) && !defined(DLMS_COSEM_EXACT_DATA_TYPES)
    ve->selector = 0;
    var_clear(&ve->parameters);
   1981a:	f104 0020 	add.w	r0, r4, #32
   1981e:	f000 fcc2 	bl	1a1a6 <var_clear>
    ve->error = DLMS_ERROR_CODE_OK;
    ve->action = 0;
    ve->byteArray = 0;
    ve->skipMaxPduSize = 0;
    ve->transactionStartIndex = 0;
    ve->transactionEndIndex = 0;
   19822:	e9c4 550e 	strd	r5, r5, [r4, #56]	; 0x38
    ve->error = DLMS_ERROR_CODE_OK;
   19826:	6325      	str	r5, [r4, #48]	; 0x30
    ve->skipMaxPduSize = 0;
   19828:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    ve->transaction = 0;
   1982c:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
}
   19830:	bd38      	pop	{r3, r4, r5, pc}

00019832 <hlp_getObjectCount2>:
{
   19832:	b537      	push	{r0, r1, r2, r4, r5, lr}
   19834:	460c      	mov	r4, r1
    ret = bb_getUInt8(buff, &ch);
   19836:	f10d 0103 	add.w	r1, sp, #3
{
   1983a:	4605      	mov	r5, r0
    ret = bb_getUInt8(buff, &ch);
   1983c:	f7f3 fbab 	bl	cf96 <bb_getUInt8>
    if (ret != 0)
   19840:	b9a0      	cbnz	r0, 1986c <hlp_getObjectCount2+0x3a>
    if (ch > 0x80)
   19842:	f89d 3003 	ldrb.w	r3, [sp, #3]
   19846:	2b80      	cmp	r3, #128	; 0x80
   19848:	d908      	bls.n	1985c <hlp_getObjectCount2+0x2a>
        if (ch == 0x81)
   1984a:	2b81      	cmp	r3, #129	; 0x81
   1984c:	d108      	bne.n	19860 <hlp_getObjectCount2+0x2e>
            ret = bb_getUInt8(buff, &ch);
   1984e:	f10d 0103 	add.w	r1, sp, #3
   19852:	4628      	mov	r0, r5
   19854:	f7f3 fb9f 	bl	cf96 <bb_getUInt8>
            *count = ch;
   19858:	f89d 3003 	ldrb.w	r3, [sp, #3]
        *count = ch;
   1985c:	8023      	strh	r3, [r4, #0]
   1985e:	e005      	b.n	1986c <hlp_getObjectCount2+0x3a>
        else if (ch == 0x82)
   19860:	2b82      	cmp	r3, #130	; 0x82
   19862:	d105      	bne.n	19870 <hlp_getObjectCount2+0x3e>
            ret = bb_getUInt16(buff, count);
   19864:	4621      	mov	r1, r4
   19866:	4628      	mov	r0, r5
   19868:	f7f3 fbbe 	bl	cfe8 <bb_getUInt16>
}
   1986c:	b003      	add	sp, #12
   1986e:	bd30      	pop	{r4, r5, pc}
        else if (ch == 0x83)
   19870:	2b83      	cmp	r3, #131	; 0x83
   19872:	d105      	bne.n	19880 <hlp_getObjectCount2+0x4e>
            ret = bb_getUInt24(buff, &value);
   19874:	a901      	add	r1, sp, #4
   19876:	4628      	mov	r0, r5
   19878:	f7f3 fc10 	bl	d09c <bb_getUInt24>
            *count = (uint16_t)value;
   1987c:	9b01      	ldr	r3, [sp, #4]
   1987e:	e7ed      	b.n	1985c <hlp_getObjectCount2+0x2a>
        else if (ch == 0x84)
   19880:	2b84      	cmp	r3, #132	; 0x84
   19882:	d104      	bne.n	1988e <hlp_getObjectCount2+0x5c>
            ret = bb_getUInt32(buff, &value);
   19884:	a901      	add	r1, sp, #4
   19886:	4628      	mov	r0, r5
   19888:	f7f3 fbc3 	bl	d012 <bb_getUInt32>
   1988c:	e7f6      	b.n	1987c <hlp_getObjectCount2+0x4a>
            ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   1988e:	f44f 7081 	mov.w	r0, #258	; 0x102
   19892:	e7eb      	b.n	1986c <hlp_getObjectCount2+0x3a>

00019894 <hlp_setObjectCount>:
    if (count < 0x80)
   19894:	287f      	cmp	r0, #127	; 0x7f
{
   19896:	b538      	push	{r3, r4, r5, lr}
   19898:	4605      	mov	r5, r0
   1989a:	460c      	mov	r4, r1
    if (count < 0x80)
   1989c:	d805      	bhi.n	198aa <hlp_setObjectCount+0x16>
            ret = bb_setUInt8(buff, (unsigned char)count);
   1989e:	b2e9      	uxtb	r1, r5
   198a0:	4620      	mov	r0, r4
}
   198a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            ret = bb_setUInt8(buff, (unsigned char)count);
   198a6:	f7f3 ba06 	b.w	ccb6 <bb_setUInt8>
    else if (count < 0x100)
   198aa:	28ff      	cmp	r0, #255	; 0xff
   198ac:	d806      	bhi.n	198bc <hlp_setObjectCount+0x28>
        if ((ret = bb_setUInt8(buff, 0x81)) == 0)
   198ae:	2181      	movs	r1, #129	; 0x81
   198b0:	4620      	mov	r0, r4
   198b2:	f7f3 fa00 	bl	ccb6 <bb_setUInt8>
   198b6:	2800      	cmp	r0, #0
   198b8:	d0f1      	beq.n	1989e <hlp_setObjectCount+0xa>
}
   198ba:	bd38      	pop	{r3, r4, r5, pc}
    else if (count < 0x10000)
   198bc:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   198c0:	d20b      	bcs.n	198da <hlp_setObjectCount+0x46>
        if ((ret = bb_setUInt8(buff, 0x82)) == 0)
   198c2:	2182      	movs	r1, #130	; 0x82
   198c4:	4620      	mov	r0, r4
   198c6:	f7f3 f9f6 	bl	ccb6 <bb_setUInt8>
   198ca:	2800      	cmp	r0, #0
   198cc:	d1f5      	bne.n	198ba <hlp_setObjectCount+0x26>
            ret = bb_setUInt16(buff, (uint16_t)count);
   198ce:	b2a9      	uxth	r1, r5
   198d0:	4620      	mov	r0, r4
}
   198d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            ret = bb_setUInt16(buff, (uint16_t)count);
   198d6:	f7f3 ba10 	b.w	ccfa <bb_setUInt16>
        if ((ret = bb_setUInt8(buff, 0x84)) == 0)
   198da:	2184      	movs	r1, #132	; 0x84
   198dc:	4620      	mov	r0, r4
   198de:	f7f3 f9ea 	bl	ccb6 <bb_setUInt8>
   198e2:	2800      	cmp	r0, #0
   198e4:	d1e9      	bne.n	198ba <hlp_setObjectCount+0x26>
            ret = bb_setUInt32(buff, count);
   198e6:	4629      	mov	r1, r5
   198e8:	4620      	mov	r0, r4
}
   198ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            ret = bb_setUInt32(buff, count);
   198ee:	f7f3 ba26 	b.w	cd3e <bb_setUInt32>

000198f2 <hlp_getValue>:
    if (c > '9')
   198f2:	2839      	cmp	r0, #57	; 0x39
   198f4:	b243      	sxtb	r3, r0
   198f6:	d907      	bls.n	19908 <hlp_getValue+0x16>
        if (c > 'Z')
   198f8:	285a      	cmp	r0, #90	; 0x5a
            value = (c - 'a' + 10);
   198fa:	bf8c      	ite	hi
   198fc:	f1a3 0057 	subhi.w	r0, r3, #87	; 0x57
            value = (c - 'A' + 10);
   19900:	f1a3 0037 	subls.w	r0, r3, #55	; 0x37
        value = (c - '0');
   19904:	b2c0      	uxtb	r0, r0
}
   19906:	4770      	bx	lr
        value = (c - '0');
   19908:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   1990c:	e7fa      	b.n	19904 <hlp_getValue+0x12>

0001990e <hlp_hexToBytes>:
{
   1990e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    *count = 0;
   19912:	2300      	movs	r3, #0
{
   19914:	4604      	mov	r4, r0
   19916:	4617      	mov	r7, r2
    *count = 0;
   19918:	8013      	strh	r3, [r2, #0]
    if (buffer != NULL && *buffer != NULL)
   1991a:	4688      	mov	r8, r1
   1991c:	b119      	cbz	r1, 19926 <hlp_hexToBytes+0x18>
   1991e:	6808      	ldr	r0, [r1, #0]
   19920:	b108      	cbz	r0, 19926 <hlp_hexToBytes+0x18>
        gxfree(*buffer);
   19922:	f7f2 f94f 	bl	bbc4 <free>
    if (str == NULL)
   19926:	b914      	cbnz	r4, 1992e <hlp_hexToBytes+0x20>
    return 0;
   19928:	2000      	movs	r0, #0
}
   1992a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    int len = (int)strlen(str);
   1992e:	4620      	mov	r0, r4
   19930:	f7e7 fa46 	bl	dc0 <strlen>
    if (len == 0)
   19934:	4605      	mov	r5, r0
   19936:	2800      	cmp	r0, #0
   19938:	d0f6      	beq.n	19928 <hlp_hexToBytes+0x1a>
    unsigned char* tmp = (unsigned char*)gxmalloc(len / 2);
   1993a:	eb00 79d0 	add.w	r9, r0, r0, lsr #31
   1993e:	ea4f 0969 	mov.w	r9, r9, asr #1
   19942:	4648      	mov	r0, r9
   19944:	f7f2 f936 	bl	bbb4 <malloc>
    if (tmp == NULL)
   19948:	4602      	mov	r2, r0
   1994a:	b358      	cbz	r0, 199a4 <hlp_hexToBytes+0x96>
    *buffer = tmp;
   1994c:	1961      	adds	r1, r4, r5
   1994e:	f8c8 0000 	str.w	r0, [r8]
    int lastValue = -1;
   19952:	f04f 35ff 	mov.w	r5, #4294967295
        if (*str >= '0' && *str < 'g')
   19956:	f814 0b01 	ldrb.w	r0, [r4], #1
   1995a:	883e      	ldrh	r6, [r7, #0]
   1995c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   19960:	2b36      	cmp	r3, #54	; 0x36
   19962:	d819      	bhi.n	19998 <hlp_hexToBytes+0x8a>
            if (lastValue == -1)
   19964:	1c6b      	adds	r3, r5, #1
   19966:	d10d      	bne.n	19984 <hlp_hexToBytes+0x76>
                lastValue = hlp_getValue(*str);
   19968:	f7ff ffc3 	bl	198f2 <hlp_getValue>
   1996c:	4605      	mov	r5, r0
    for (int pos = 0; pos != len; ++pos)
   1996e:	428c      	cmp	r4, r1
   19970:	d1f1      	bne.n	19956 <hlp_hexToBytes+0x48>
    if (len / 2 != *count)
   19972:	8839      	ldrh	r1, [r7, #0]
   19974:	4589      	cmp	r9, r1
   19976:	d0d7      	beq.n	19928 <hlp_hexToBytes+0x1a>
        *buffer = gxrealloc(*buffer, *count);
   19978:	4610      	mov	r0, r2
   1997a:	f7f2 f9d3 	bl	bd24 <realloc>
   1997e:	f8c8 0000 	str.w	r0, [r8]
   19982:	e7d1      	b.n	19928 <hlp_hexToBytes+0x1a>
                tmp[*count] = (unsigned char)(lastValue << 4 | hlp_getValue(*str));
   19984:	f7ff ffb5 	bl	198f2 <hlp_getValue>
   19988:	ea40 1505 	orr.w	r5, r0, r5, lsl #4
   1998c:	5595      	strb	r5, [r2, r6]
            ++* count;
   1998e:	3601      	adds	r6, #1
   19990:	803e      	strh	r6, [r7, #0]
            lastValue = -1;
   19992:	f04f 35ff 	mov.w	r5, #4294967295
   19996:	e7ea      	b.n	1996e <hlp_hexToBytes+0x60>
        else if (lastValue != -1)
   19998:	1c6b      	adds	r3, r5, #1
   1999a:	d0e8      	beq.n	1996e <hlp_hexToBytes+0x60>
            tmp[*count] = hlp_getValue(*str);
   1999c:	f7ff ffa9 	bl	198f2 <hlp_getValue>
   199a0:	5590      	strb	r0, [r2, r6]
   199a2:	e7f4      	b.n	1998e <hlp_hexToBytes+0x80>
        return DLMS_ERROR_CODE_OUTOFMEMORY;
   199a4:	f44f 7082 	mov.w	r0, #260	; 0x104
   199a8:	e7bf      	b.n	1992a <hlp_hexToBytes+0x1c>

000199aa <hlp_intToString>:

int hlp_intToString(char* str, int bufsize, int32_t value, unsigned char isSigned, unsigned char digits)
{
   199aa:	b5f0      	push	{r4, r5, r6, r7, lr}
   199ac:	f89d 4014 	ldrb.w	r4, [sp, #20]
    int cnt = 0;
    int32_t val = value;
    if (isSigned && value < 0)
   199b0:	b14b      	cbz	r3, 199c6 <hlp_intToString+0x1c>
   199b2:	2a00      	cmp	r2, #0
   199b4:	da2c      	bge.n	19a10 <hlp_intToString+0x66>
    {
        if (bufsize < 1)
   199b6:	2900      	cmp	r1, #0
   199b8:	dd38      	ble.n	19a2c <hlp_intToString+0x82>
        {
            return -1;
        }
        *str = '-';
   199ba:	232d      	movs	r3, #45	; 0x2d
   199bc:	f800 3b01 	strb.w	r3, [r0], #1
        ++str;
        --bufsize;
   199c0:	3901      	subs	r1, #1
        value = -value;
   199c2:	4252      	negs	r2, r2
        val = value;
        ++cnt;
   199c4:	2301      	movs	r3, #1
    }
    if (digits != 0)
   199c6:	b10c      	cbz	r4, 199cc <hlp_intToString+0x22>
    {
        --digits;
   199c8:	3c01      	subs	r4, #1
   199ca:	b2e4      	uxtb	r4, r4
    int cnt = 0;
   199cc:	4615      	mov	r5, r2
    }
    //Find length.
    while ((val = (val / 10)) > 0)
   199ce:	270a      	movs	r7, #10
   199d0:	2d09      	cmp	r5, #9
   199d2:	fb95 f6f7 	sdiv	r6, r5, r7
   199d6:	dc1d      	bgt.n	19a14 <hlp_intToString+0x6a>
        if (digits != 0)
        {
            --digits;
        }
    }
    *(str + digits + 1) = '\0';
   199d8:	4404      	add	r4, r0
   199da:	2500      	movs	r5, #0
   199dc:	7065      	strb	r5, [r4, #1]
    while (digits != 0)
   199de:	4626      	mov	r6, r4
   199e0:	1a1b      	subs	r3, r3, r0
    {
        if (bufsize < 1)
        {
            return -1;
        }
        *str = '0';
   199e2:	2730      	movs	r7, #48	; 0x30
    while (digits != 0)
   199e4:	42a0      	cmp	r0, r4
   199e6:	eb00 0503 	add.w	r5, r0, r3
   199ea:	d119      	bne.n	19a20 <hlp_intToString+0x76>
    {
        if (bufsize < 1)
        {
            return -1;
        }
        *str = (value % 10) + '0';
   199ec:	270a      	movs	r7, #10
   199ee:	194c      	adds	r4, r1, r5
        if (bufsize < 1)
   199f0:	2900      	cmp	r1, #0
   199f2:	dd1b      	ble.n	19a2c <hlp_intToString+0x82>
        *str = (value % 10) + '0';
   199f4:	fb92 f3f7 	sdiv	r3, r2, r7
   199f8:	fb07 2213 	mls	r2, r7, r3, r2
   199fc:	3230      	adds	r2, #48	; 0x30
   199fe:	7032      	strb	r2, [r6, #0]
        value /= 10;
		if (value != 0)
   19a00:	461a      	mov	r2, r3
   19a02:	b103      	cbz	r3, 19a06 <hlp_intToString+0x5c>
		{
        	--str;
   19a04:	3e01      	subs	r6, #1
		}
        --bufsize;
   19a06:	3901      	subs	r1, #1
        ++cnt;
   19a08:	1a60      	subs	r0, r4, r1
    } while (value != 0);
   19a0a:	2b00      	cmp	r3, #0
   19a0c:	d1f0      	bne.n	199f0 <hlp_intToString+0x46>
    return cnt;
}
   19a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    int cnt = 0;
   19a10:	2300      	movs	r3, #0
   19a12:	e7d8      	b.n	199c6 <hlp_intToString+0x1c>
        ++str;
   19a14:	3001      	adds	r0, #1
        if (digits != 0)
   19a16:	b10c      	cbz	r4, 19a1c <hlp_intToString+0x72>
            --digits;
   19a18:	3c01      	subs	r4, #1
   19a1a:	b2e4      	uxtb	r4, r4
    int cnt = 0;
   19a1c:	4635      	mov	r5, r6
   19a1e:	e7d7      	b.n	199d0 <hlp_intToString+0x26>
        if (bufsize < 1)
   19a20:	2900      	cmp	r1, #0
   19a22:	dd03      	ble.n	19a2c <hlp_intToString+0x82>
        *str = '0';
   19a24:	f800 7b01 	strb.w	r7, [r0], #1
        --bufsize;
   19a28:	3901      	subs	r1, #1
        ++cnt;
   19a2a:	e7db      	b.n	199e4 <hlp_intToString+0x3a>
            return -1;
   19a2c:	f04f 30ff 	mov.w	r0, #4294967295
   19a30:	e7ed      	b.n	19a0e <hlp_intToString+0x64>

00019a32 <hlp_stringToInt>:

int32_t hlp_stringToInt(const char* str)
{
   19a32:	b530      	push	{r4, r5, lr}
    if (str == NULL)
   19a34:	b1b8      	cbz	r0, 19a66 <hlp_stringToInt+0x34>
    {
        return -1;
    }
    int32_t value = 0;
    unsigned char minus = 0;
    if (*str == '-')
   19a36:	7803      	ldrb	r3, [r0, #0]
   19a38:	2b2d      	cmp	r3, #45	; 0x2d
   19a3a:	d112      	bne.n	19a62 <hlp_stringToInt+0x30>
    {
        minus = 1;
        ++str;
   19a3c:	3001      	adds	r0, #1
        minus = 1;
   19a3e:	2101      	movs	r1, #1
   19a40:	1e43      	subs	r3, r0, #1
    {
        if (*str < '0' || *str > '9')
        {
            return -1;
        }
        value *= 10;
   19a42:	240a      	movs	r4, #10
    unsigned char minus = 0;
   19a44:	2000      	movs	r0, #0
   19a46:	e005      	b.n	19a54 <hlp_stringToInt+0x22>
        if (*str < '0' || *str > '9')
   19a48:	3a30      	subs	r2, #48	; 0x30
   19a4a:	b2d5      	uxtb	r5, r2
   19a4c:	2d09      	cmp	r5, #9
   19a4e:	d80a      	bhi.n	19a66 <hlp_stringToInt+0x34>
        value += *str - '0';
   19a50:	fb04 2000 	mla	r0, r4, r0, r2
    while (*str != '\0')
   19a54:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   19a58:	2a00      	cmp	r2, #0
   19a5a:	d1f5      	bne.n	19a48 <hlp_stringToInt+0x16>
        ++str;
    }
    if (minus)
   19a5c:	b101      	cbz	r1, 19a60 <hlp_stringToInt+0x2e>
    {
        return -value;
   19a5e:	4240      	negs	r0, r0
    }
    return value;
}
   19a60:	bd30      	pop	{r4, r5, pc}
    unsigned char minus = 0;
   19a62:	2100      	movs	r1, #0
   19a64:	e7ec      	b.n	19a40 <hlp_stringToInt+0xe>
        return -1;
   19a66:	f04f 30ff 	mov.w	r0, #4294967295
   19a6a:	e7f9      	b.n	19a60 <hlp_stringToInt+0x2e>

00019a6c <hlp_int64ToString>:

int hlp_int64ToString(char* str, int bufsize, int64_t value, unsigned char isSigned)
{
   19a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19a70:	f89d 5020 	ldrb.w	r5, [sp, #32]
   19a74:	4604      	mov	r4, r0
   19a76:	468a      	mov	sl, r1
   19a78:	4690      	mov	r8, r2
   19a7a:	4699      	mov	r9, r3
    int cnt = 0;
    int64_t val = value;
    if (isSigned && value < 0)
   19a7c:	b3f5      	cbz	r5, 19afc <hlp_int64ToString+0x90>
   19a7e:	2a00      	cmp	r2, #0
   19a80:	f179 0300 	sbcs.w	r3, r9, #0
   19a84:	da3d      	bge.n	19b02 <hlp_int64ToString+0x96>
    {
        if (bufsize < 1)
   19a86:	2900      	cmp	r1, #0
   19a88:	dd3f      	ble.n	19b0a <hlp_int64ToString+0x9e>
        {
            return -1;
        }
        *str = '-';
   19a8a:	232d      	movs	r3, #45	; 0x2d
        ++str;
        --bufsize;
        value = -value;
   19a8c:	4256      	negs	r6, r2
        *str = '-';
   19a8e:	f804 3b01 	strb.w	r3, [r4], #1
        --bufsize;
   19a92:	f101 3aff 	add.w	sl, r1, #4294967295
        value = -value;
   19a96:	eb69 0749 	sbc.w	r7, r9, r9, lsl #1
        ++cnt;
   19a9a:	2501      	movs	r5, #1
    }
    //Find length.
    while ((val = (val / 10)) > 0)
   19a9c:	2300      	movs	r3, #0
   19a9e:	220a      	movs	r2, #10
   19aa0:	4640      	mov	r0, r8
   19aa2:	4649      	mov	r1, r9
   19aa4:	f7e6 ffb8 	bl	a18 <__aeabi_ldivmod>
   19aa8:	f1b8 0f0a 	cmp.w	r8, #10
   19aac:	f179 0300 	sbcs.w	r3, r9, #0
   19ab0:	da20      	bge.n	19af4 <hlp_int64ToString+0x88>
    {
        ++str;
    }
    *(str + 1) = '\0';
   19ab2:	2300      	movs	r3, #0
   19ab4:	7063      	strb	r3, [r4, #1]
   19ab6:	ebaa 0a04 	sub.w	sl, sl, r4
   19aba:	4425      	add	r5, r4
    do
    {
        if (bufsize < 1)
   19abc:	eb04 030a 	add.w	r3, r4, sl
   19ac0:	2b00      	cmp	r3, #0
   19ac2:	dd22      	ble.n	19b0a <hlp_int64ToString+0x9e>
        {
            return -1;
        }
        *str = (value % 10) + '0';
   19ac4:	4630      	mov	r0, r6
   19ac6:	4639      	mov	r1, r7
   19ac8:	220a      	movs	r2, #10
   19aca:	2300      	movs	r3, #0
   19acc:	f7e6 ffa4 	bl	a18 <__aeabi_ldivmod>
   19ad0:	3230      	adds	r2, #48	; 0x30
   19ad2:	f804 2901 	strb.w	r2, [r4], #-1
        --str;
        value /= 10;
   19ad6:	2300      	movs	r3, #0
   19ad8:	4630      	mov	r0, r6
   19ada:	4639      	mov	r1, r7
   19adc:	220a      	movs	r2, #10
   19ade:	f7e6 ff9b 	bl	a18 <__aeabi_ldivmod>
   19ae2:	4606      	mov	r6, r0
   19ae4:	460f      	mov	r7, r1
        --bufsize;
        ++cnt;
    } while (value != 0);
   19ae6:	ea56 0307 	orrs.w	r3, r6, r7
   19aea:	eba5 0004 	sub.w	r0, r5, r4
   19aee:	d1e5      	bne.n	19abc <hlp_int64ToString+0x50>
    return cnt;
}
   19af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ++str;
   19af4:	3401      	adds	r4, #1
    while ((val = (val / 10)) > 0)
   19af6:	4680      	mov	r8, r0
   19af8:	4689      	mov	r9, r1
   19afa:	e7cf      	b.n	19a9c <hlp_int64ToString+0x30>
   19afc:	4616      	mov	r6, r2
   19afe:	461f      	mov	r7, r3
   19b00:	e7cc      	b.n	19a9c <hlp_int64ToString+0x30>
   19b02:	4616      	mov	r6, r2
   19b04:	464f      	mov	r7, r9
    int cnt = 0;
   19b06:	2500      	movs	r5, #0
   19b08:	e7c8      	b.n	19a9c <hlp_int64ToString+0x30>
            return -1;
   19b0a:	f04f 30ff 	mov.w	r0, #4294967295
   19b0e:	e7ef      	b.n	19af0 <hlp_int64ToString+0x84>

00019b10 <hlp_stringToInt64>:

int64_t hlp_stringToInt64(const char* str)
{
   19b10:	b530      	push	{r4, r5, lr}
    if (str == NULL)
   19b12:	b1c0      	cbz	r0, 19b46 <hlp_stringToInt64+0x36>
    {
        return -1;
    }
    int32_t value = 0;
    unsigned char minus = 0;
    if (*str == '-')
   19b14:	7803      	ldrb	r3, [r0, #0]
   19b16:	2b2d      	cmp	r3, #45	; 0x2d
   19b18:	d113      	bne.n	19b42 <hlp_stringToInt64+0x32>
    {
        minus = 1;
        ++str;
   19b1a:	3001      	adds	r0, #1
        minus = 1;
   19b1c:	2101      	movs	r1, #1
   19b1e:	1e43      	subs	r3, r0, #1
    {
        if (*str < '0' || *str > '9')
        {
            return -1;
        }
        value *= 10;
   19b20:	240a      	movs	r4, #10
    unsigned char minus = 0;
   19b22:	2000      	movs	r0, #0
   19b24:	e005      	b.n	19b32 <hlp_stringToInt64+0x22>
        if (*str < '0' || *str > '9')
   19b26:	3a30      	subs	r2, #48	; 0x30
   19b28:	b2d5      	uxtb	r5, r2
   19b2a:	2d09      	cmp	r5, #9
   19b2c:	d80b      	bhi.n	19b46 <hlp_stringToInt64+0x36>
        value += *str - '0';
   19b2e:	fb04 2000 	mla	r0, r4, r0, r2
    while (*str != '\0')
   19b32:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   19b36:	2a00      	cmp	r2, #0
   19b38:	d1f5      	bne.n	19b26 <hlp_stringToInt64+0x16>
        ++str;
    }
    if (minus)
   19b3a:	b101      	cbz	r1, 19b3e <hlp_stringToInt64+0x2e>
    {
        return -value;
   19b3c:	4240      	negs	r0, r0
    }
    return value;
   19b3e:	17c1      	asrs	r1, r0, #31
}
   19b40:	bd30      	pop	{r4, r5, pc}
    unsigned char minus = 0;
   19b42:	2100      	movs	r1, #0
   19b44:	e7eb      	b.n	19b1e <hlp_stringToInt64+0xe>
        return -1;
   19b46:	f04f 30ff 	mov.w	r0, #4294967295
   19b4a:	f04f 31ff 	mov.w	r1, #4294967295
   19b4e:	e7f7      	b.n	19b40 <hlp_stringToInt64+0x30>

00019b50 <hlp_add>:
    }
    return ret;
}

int hlp_add(bitArray* arr, gxByteBuffer* bytes, uint16_t count)
{
   19b50:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    uint16_t pos, bytePos = 0;
    int ret;
    unsigned char ch = 0;
   19b54:	2300      	movs	r3, #0
   19b56:	f88d 3007 	strb.w	r3, [sp, #7]
    if (count == 0xFFFF)
   19b5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   19b5e:	429a      	cmp	r2, r3
{
   19b60:	4614      	mov	r4, r2
    {
        count = (uint16_t)(bytes->size - bytes->position);
   19b62:	bf04      	itt	eq
   19b64:	88cc      	ldrheq	r4, [r1, #6]
   19b66:	890a      	ldrheq	r2, [r1, #8]
    }
    for (pos = 0; pos != count; ++pos)
   19b68:	f04f 0900 	mov.w	r9, #0
        count = (uint16_t)(bytes->size - bytes->position);
   19b6c:	bf08      	it	eq
   19b6e:	1aa4      	subeq	r4, r4, r2
{
   19b70:	4607      	mov	r7, r0
   19b72:	460d      	mov	r5, r1
        count = (uint16_t)(bytes->size - bytes->position);
   19b74:	bf08      	it	eq
   19b76:	b2a4      	uxtheq	r4, r4
    uint16_t pos, bytePos = 0;
   19b78:	464e      	mov	r6, r9
            {
                return ret;
            }
            ++bytes->position;
        }
        if ((ret = ba_setByIndex(arr, pos, (unsigned char)(ch & (1 << bytePos)))) != 0)
   19b7a:	f04f 0801 	mov.w	r8, #1
   19b7e:	fa1f fa89 	uxth.w	sl, r9
    for (pos = 0; pos != count; ++pos)
   19b82:	4554      	cmp	r4, sl
   19b84:	d103      	bne.n	19b8e <hlp_add+0x3e>
            return ret;
        }
        --bytePos;
        ++arr->size;
    }
    return 0;
   19b86:	2000      	movs	r0, #0
   19b88:	b002      	add	sp, #8
   19b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if ((pos % 8) == 0)
   19b8e:	f01a 0f07 	tst.w	sl, #7
   19b92:	d10b      	bne.n	19bac <hlp_add+0x5c>
            ret = bb_getUInt8ByIndex(bytes, bytes->position, &ch);
   19b94:	8929      	ldrh	r1, [r5, #8]
   19b96:	f10d 0207 	add.w	r2, sp, #7
   19b9a:	4628      	mov	r0, r5
   19b9c:	f7f3 fa19 	bl	cfd2 <bb_getUInt8ByIndex>
            if (ret != 0)
   19ba0:	2800      	cmp	r0, #0
   19ba2:	d1f1      	bne.n	19b88 <hlp_add+0x38>
            ++bytes->position;
   19ba4:	892b      	ldrh	r3, [r5, #8]
   19ba6:	3301      	adds	r3, #1
   19ba8:	812b      	strh	r3, [r5, #8]
            bytePos = 7;
   19baa:	2607      	movs	r6, #7
        if ((ret = ba_setByIndex(arr, pos, (unsigned char)(ch & (1 << bytePos)))) != 0)
   19bac:	f89d 3007 	ldrb.w	r3, [sp, #7]
   19bb0:	fa08 f206 	lsl.w	r2, r8, r6
   19bb4:	401a      	ands	r2, r3
   19bb6:	4651      	mov	r1, sl
   19bb8:	4638      	mov	r0, r7
   19bba:	f7f2 ff41 	bl	ca40 <ba_setByIndex>
   19bbe:	f109 0901 	add.w	r9, r9, #1
   19bc2:	2800      	cmp	r0, #0
   19bc4:	d1e0      	bne.n	19b88 <hlp_add+0x38>
        ++arr->size;
   19bc6:	88fb      	ldrh	r3, [r7, #6]
        --bytePos;
   19bc8:	3e01      	subs	r6, #1
        ++arr->size;
   19bca:	3301      	adds	r3, #1
        --bytePos;
   19bcc:	b2b6      	uxth	r6, r6
        ++arr->size;
   19bce:	80fb      	strh	r3, [r7, #6]
    for (pos = 0; pos != count; ++pos)
   19bd0:	e7d5      	b.n	19b7e <hlp_add+0x2e>

00019bd2 <notify_getData>:
int notify_getData(
    dlmsSettings* settings,
    gxByteBuffer* reply,
    gxReplyData* data)
{
    return dlms_getData2(settings, reply, data, 0);
   19bd2:	2300      	movs	r3, #0
   19bd4:	f7f6 ba7c 	b.w	100d0 <dlms_getData2>

00019bd8 <notify_parsePush>:

int notify_parsePush(
    dlmsSettings* settings,
    variantArray* data,
    gxArray* items)
{
   19bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19bdc:	4688      	mov	r8, r1
   19bde:	b098      	sub	sp, #96	; 0x60
   19be0:	4607      	mov	r7, r0
   19be2:	4616      	mov	r6, r2
    unsigned char index;
    int classID, ret;
	uint16_t pos;
    gxValueEventArg e;
    dlmsVARIANT* it, * list, * tmp;
    if ((ret = va_getByIndex(data, 0, &list)) != 0)
   19be4:	2100      	movs	r1, #0
   19be6:	aa04      	add	r2, sp, #16
   19be8:	4640      	mov	r0, r8
   19bea:	f000 fb5a 	bl	1a2a2 <va_getByIndex>
   19bee:	4604      	mov	r4, r0
   19bf0:	b990      	cbnz	r0, 19c18 <notify_parsePush+0x40>
   19bf2:	4681      	mov	r9, r0
    {
        return ret;
    }

    for (pos = 0; pos != list->Arr->size; ++pos)
   19bf4:	9b04      	ldr	r3, [sp, #16]
   19bf6:	6898      	ldr	r0, [r3, #8]
   19bf8:	88c2      	ldrh	r2, [r0, #6]
   19bfa:	fa1f f389 	uxth.w	r3, r9
   19bfe:	429a      	cmp	r2, r3
   19c00:	d10e      	bne.n	19c20 <notify_parsePush+0x48>
            index = (unsigned char)var_toInteger(tmp);
            arr_push(items, key_init(obj, (void*)(uint64_t)index));
#endif //DLMS_IGNORE_MALLOC
        }
    }
    ve_init(&e);
   19c02:	ad06      	add	r5, sp, #24
   19c04:	4628      	mov	r0, r5
   19c06:	f7ff fdec 	bl	197e2 <ve_init>
    for (pos = 0; pos != items->size; ++pos)
   19c0a:	f04f 0900 	mov.w	r9, #0
   19c0e:	88f3      	ldrh	r3, [r6, #6]
   19c10:	fa1f f189 	uxth.w	r1, r9
   19c14:	428b      	cmp	r3, r1
   19c16:	d15c      	bne.n	19cd2 <notify_parsePush+0xfa>
        {
            return ret;
        }
    }
    return ret;
}
   19c18:	4620      	mov	r0, r4
   19c1a:	b018      	add	sp, #96	; 0x60
   19c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if ((ret = va_getByIndex(list->Arr, pos, &it)) != 0)
   19c20:	fa1f f189 	uxth.w	r1, r9
   19c24:	aa03      	add	r2, sp, #12
   19c26:	f000 fb3c 	bl	1a2a2 <va_getByIndex>
   19c2a:	4601      	mov	r1, r0
   19c2c:	2800      	cmp	r0, #0
   19c2e:	d174      	bne.n	19d1a <notify_parsePush+0x142>
        if ((ret = va_getByIndex(it->Arr, 0, &tmp)) != 0)
   19c30:	9b03      	ldr	r3, [sp, #12]
   19c32:	aa05      	add	r2, sp, #20
   19c34:	6898      	ldr	r0, [r3, #8]
   19c36:	f000 fb34 	bl	1a2a2 <va_getByIndex>
   19c3a:	2800      	cmp	r0, #0
   19c3c:	d16b      	bne.n	19d16 <notify_parsePush+0x13e>
        classID = var_toInteger(tmp) & 0xFFFF;
   19c3e:	9805      	ldr	r0, [sp, #20]
   19c40:	f000 fca9 	bl	1a596 <var_toInteger>
   19c44:	b283      	uxth	r3, r0
   19c46:	4605      	mov	r5, r0
        if (classID > 0)
   19c48:	2b00      	cmp	r3, #0
   19c4a:	d03f      	beq.n	19ccc <notify_parsePush+0xf4>
            if ((ret = va_getByIndex(it->Arr, 1, &tmp)) != 0)
   19c4c:	9b03      	ldr	r3, [sp, #12]
   19c4e:	aa05      	add	r2, sp, #20
   19c50:	6898      	ldr	r0, [r3, #8]
   19c52:	2101      	movs	r1, #1
   19c54:	f000 fb25 	bl	1a2a2 <va_getByIndex>
   19c58:	2800      	cmp	r0, #0
   19c5a:	d15c      	bne.n	19d16 <notify_parsePush+0x13e>
            if ((ret = oa_findByLN(&settings->objects, (DLMS_OBJECT_TYPE)classID, tmp->byteArr->data, &obj)) != 0)
   19c5c:	9b05      	ldr	r3, [sp, #20]
   19c5e:	689a      	ldr	r2, [r3, #8]
   19c60:	f107 0a98 	add.w	sl, r7, #152	; 0x98
   19c64:	b2ad      	uxth	r5, r5
   19c66:	6812      	ldr	r2, [r2, #0]
   19c68:	ab02      	add	r3, sp, #8
   19c6a:	4629      	mov	r1, r5
   19c6c:	4650      	mov	r0, sl
   19c6e:	f000 f8d5 	bl	19e1c <oa_findByLN>
   19c72:	2800      	cmp	r0, #0
   19c74:	d14f      	bne.n	19d16 <notify_parsePush+0x13e>
            if (obj == NULL)
   19c76:	9b02      	ldr	r3, [sp, #8]
   19c78:	b9b3      	cbnz	r3, 19ca8 <notify_parsePush+0xd0>
                if ((ret = cosem_createObject((DLMS_OBJECT_TYPE)classID, &obj)) != 0)
   19c7a:	a902      	add	r1, sp, #8
   19c7c:	4628      	mov	r0, r5
   19c7e:	f7e8 f8ef 	bl	1e60 <cosem_createObject>
   19c82:	2800      	cmp	r0, #0
   19c84:	d147      	bne.n	19d16 <notify_parsePush+0x13e>
                memcpy(obj->logicalName, tmp->byteArr->data, 6);
   19c86:	9b05      	ldr	r3, [sp, #20]
   19c88:	9902      	ldr	r1, [sp, #8]
   19c8a:	689b      	ldr	r3, [r3, #8]
   19c8c:	681b      	ldr	r3, [r3, #0]
   19c8e:	681a      	ldr	r2, [r3, #0]
   19c90:	f8c1 2006 	str.w	r2, [r1, #6]
   19c94:	889b      	ldrh	r3, [r3, #4]
   19c96:	814b      	strh	r3, [r1, #10]
                oa_push(&settings->objects, obj);
   19c98:	4650      	mov	r0, sl
   19c9a:	f000 f85f 	bl	19d5c <oa_push>
                ret = oa_push(&settings->releasedObjects, obj);
   19c9e:	9902      	ldr	r1, [sp, #8]
   19ca0:	f107 00e4 	add.w	r0, r7, #228	; 0xe4
   19ca4:	f000 f85a 	bl	19d5c <oa_push>
            if ((ret = va_getByIndex(it->Arr, 2, &tmp)) != 0)
   19ca8:	9b03      	ldr	r3, [sp, #12]
   19caa:	aa05      	add	r2, sp, #20
   19cac:	6898      	ldr	r0, [r3, #8]
   19cae:	2102      	movs	r1, #2
   19cb0:	f000 faf7 	bl	1a2a2 <va_getByIndex>
   19cb4:	bb78      	cbnz	r0, 19d16 <notify_parsePush+0x13e>
            index = (unsigned char)var_toInteger(tmp);
   19cb6:	9805      	ldr	r0, [sp, #20]
   19cb8:	f000 fc6d 	bl	1a596 <var_toInteger>
            arr_push(items, key_init(obj, (void*)(uint64_t)index));
   19cbc:	b2c1      	uxtb	r1, r0
   19cbe:	9802      	ldr	r0, [sp, #8]
   19cc0:	f7f9 fe2d 	bl	1391e <key_init>
   19cc4:	4601      	mov	r1, r0
   19cc6:	4630      	mov	r0, r6
   19cc8:	f7f6 fb20 	bl	1030c <arr_push>
    for (pos = 0; pos != list->Arr->size; ++pos)
   19ccc:	f109 0901 	add.w	r9, r9, #1
   19cd0:	e790      	b.n	19bf4 <notify_parsePush+0x1c>
        if ((ret = arr_getByIndex(items, pos, (void**)&k)) != 0)
   19cd2:	aa01      	add	r2, sp, #4
   19cd4:	4630      	mov	r0, r6
   19cd6:	f7f6 fb56 	bl	10386 <arr_getByIndex>
   19cda:	b9e0      	cbnz	r0, 19d16 <notify_parsePush+0x13e>
        obj = (gxObject*)k->key;
   19cdc:	9b01      	ldr	r3, [sp, #4]
        if ((ret = va_getByIndex(data, pos, &it)) != 0)
   19cde:	aa03      	add	r2, sp, #12
        obj = (gxObject*)k->key;
   19ce0:	681b      	ldr	r3, [r3, #0]
   19ce2:	9302      	str	r3, [sp, #8]
        if ((ret = va_getByIndex(data, pos, &it)) != 0)
   19ce4:	fa1f f189 	uxth.w	r1, r9
   19ce8:	4640      	mov	r0, r8
   19cea:	f000 fada 	bl	1a2a2 <va_getByIndex>
   19cee:	b990      	cbnz	r0, 19d16 <notify_parsePush+0x13e>
        index = k->value;
   19cf0:	9b01      	ldr	r3, [sp, #4]
        e.target = obj;
   19cf2:	9a02      	ldr	r2, [sp, #8]
        index = k->value;
   19cf4:	791b      	ldrb	r3, [r3, #4]
        e.index = index;
   19cf6:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
        e.value = *it;
   19cfa:	9b03      	ldr	r3, [sp, #12]
        e.target = obj;
   19cfc:	920b      	str	r2, [sp, #44]	; 0x2c
        e.value = *it;
   19cfe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   19d00:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
        if ((ret = cosem_setValue(settings, &e)) != 0)
   19d04:	4629      	mov	r1, r5
   19d06:	4638      	mov	r0, r7
   19d08:	f7fa f91c 	bl	13f44 <cosem_setValue>
   19d0c:	f109 0901 	add.w	r9, r9, #1
   19d10:	2800      	cmp	r0, #0
   19d12:	f43f af7c 	beq.w	19c0e <notify_parsePush+0x36>
   19d16:	4604      	mov	r4, r0
   19d18:	e77e      	b.n	19c18 <notify_parsePush+0x40>
        if ((ret = va_getByIndex(list->Arr, pos, &it)) != 0)
   19d1a:	4604      	mov	r4, r0
   19d1c:	e77c      	b.n	19c18 <notify_parsePush+0x40>

00019d1e <oa_init>:

//Initialize objectArray.
void oa_init(objectArray* arr)
{
    arr->capacity = 0;
    arr->data = NULL;
   19d1e:	2300      	movs	r3, #0
    arr->capacity = 0;
   19d20:	e9c0 3300 	strd	r3, r3, [r0]
#if !(defined(GX_DLMS_MICROCONTROLLER) || defined(DLMS_IGNORE_MALLOC))
    arr->position = 0;
#endif //!(defined(GX_DLMS_MICROCONTROLLER) || defined(DLMS_IGNORE_MALLOC))
    arr->size = 0;
}
   19d24:	4770      	bx	lr

00019d26 <oa_capacity>:
    return arr->capacity & 0x7FFF;
}

//Allocate new size for the array in bytes.
int oa_capacity(objectArray* arr, const uint16_t capacity)
{
   19d26:	b538      	push	{r3, r4, r5, lr}
#ifndef DLMS_IGNORE_MALLOC
    if (!oa_isAttached(arr))
   19d28:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
   19d2c:	2b00      	cmp	r3, #0
{
   19d2e:	4604      	mov	r4, r0
   19d30:	460d      	mov	r5, r1
    if (!oa_isAttached(arr))
   19d32:	db07      	blt.n	19d44 <oa_capacity+0x1e>
    {
        arr->capacity = capacity;
   19d34:	8081      	strh	r1, [r0, #4]
        if (arr->data == NULL)
   19d36:	6800      	ldr	r0, [r0, #0]
   19d38:	0089      	lsls	r1, r1, #2
   19d3a:	b960      	cbnz	r0, 19d56 <oa_capacity+0x30>
        {
            arr->data = (gxObject**)gxmalloc(arr->capacity * sizeof(gxObject*));
   19d3c:	4608      	mov	r0, r1
   19d3e:	f7f1 ff39 	bl	bbb4 <malloc>
        }
        else
        {
            arr->data = (gxObject**)gxrealloc(arr->data, arr->capacity * sizeof(gxObject*));
   19d42:	6020      	str	r0, [r4, #0]
    return arr->capacity & 0x7FFF;
   19d44:	88a0      	ldrh	r0, [r4, #4]
        }
    }
#endif //DLMS_IGNORE_MALLOC
    if (oa_getCapacity(arr) < capacity)
   19d46:	f3c0 000e 	ubfx	r0, r0, #0, #15
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    return 0;
}
   19d4a:	4285      	cmp	r5, r0
   19d4c:	bf8c      	ite	hi
   19d4e:	f44f 7082 	movhi.w	r0, #260	; 0x104
   19d52:	2000      	movls	r0, #0
   19d54:	bd38      	pop	{r3, r4, r5, pc}
            arr->data = (gxObject**)gxrealloc(arr->data, arr->capacity * sizeof(gxObject*));
   19d56:	f7f1 ffe5 	bl	bd24 <realloc>
   19d5a:	e7f2      	b.n	19d42 <oa_capacity+0x1c>

00019d5c <oa_push>:
}

#ifndef DLMS_IGNORE_MALLOC
//Push new data to the objectArray.
int oa_push(objectArray* arr, gxObject* item)
{
   19d5c:	b538      	push	{r3, r4, r5, lr}
    return (arr->capacity & 0x8000) == 0x8000;
   19d5e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
   19d62:	8882      	ldrh	r2, [r0, #4]
    if (!oa_isAttached(arr) && arr->size >= arr->capacity)
   19d64:	2b00      	cmp	r3, #0
{
   19d66:	4604      	mov	r4, r0
   19d68:	460d      	mov	r5, r1
    if (!oa_isAttached(arr) && arr->size >= arr->capacity)
   19d6a:	db0c      	blt.n	19d86 <oa_push+0x2a>
   19d6c:	88c1      	ldrh	r1, [r0, #6]
   19d6e:	4291      	cmp	r1, r2
   19d70:	d309      	bcc.n	19d86 <oa_push+0x2a>
    {
        arr->capacity += OBJECT_ARRAY_CAPACITY;
   19d72:	330a      	adds	r3, #10
   19d74:	b29b      	uxth	r3, r3
   19d76:	8083      	strh	r3, [r0, #4]
        if (arr->data == NULL)
   19d78:	6800      	ldr	r0, [r0, #0]
   19d7a:	0099      	lsls	r1, r3, #2
   19d7c:	b998      	cbnz	r0, 19da6 <oa_push+0x4a>
        {
            arr->data = (gxObject**)gxmalloc(arr->capacity * sizeof(gxObject*));
   19d7e:	4608      	mov	r0, r1
   19d80:	f7f1 ff18 	bl	bbb4 <malloc>
        }
        else
        {
            arr->data = (gxObject**)gxrealloc(arr->data, arr->capacity * sizeof(gxObject*));
   19d84:	6020      	str	r0, [r4, #0]
    return arr->capacity & 0x7FFF;
   19d86:	88a2      	ldrh	r2, [r4, #4]
        }
    }
    if (oa_getCapacity(arr) <= arr->size)
   19d88:	88e3      	ldrh	r3, [r4, #6]
   19d8a:	f3c2 020e 	ubfx	r2, r2, #0, #15
   19d8e:	4293      	cmp	r3, r2
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    arr->data[arr->size] = item;
   19d90:	bf3f      	itttt	cc
   19d92:	6822      	ldrcc	r2, [r4, #0]
   19d94:	f842 5023 	strcc.w	r5, [r2, r3, lsl #2]
    ++arr->size;
   19d98:	3301      	addcc	r3, #1
   19d9a:	80e3      	strhcc	r3, [r4, #6]
    return DLMS_ERROR_CODE_OK;
   19d9c:	bf34      	ite	cc
   19d9e:	2000      	movcc	r0, #0
        return DLMS_ERROR_CODE_OUTOFMEMORY;
   19da0:	f44f 7082 	movcs.w	r0, #260	; 0x104
}
   19da4:	bd38      	pop	{r3, r4, r5, pc}
            arr->data = (gxObject**)gxrealloc(arr->data, arr->capacity * sizeof(gxObject*));
   19da6:	f7f1 ffbd 	bl	bd24 <realloc>
   19daa:	e7eb      	b.n	19d84 <oa_push+0x28>

00019dac <oa_empty>:
}

void oa_empty(objectArray* arr)
{
#ifndef DLMS_IGNORE_MALLOC
    if (!oa_isAttached(arr))
   19dac:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
   19db0:	2b00      	cmp	r3, #0
{
   19db2:	b510      	push	{r4, lr}
   19db4:	4604      	mov	r4, r0
    if (!oa_isAttached(arr))
   19db6:	db07      	blt.n	19dc8 <oa_empty+0x1c>
    {
        if (arr->data != NULL)
   19db8:	6800      	ldr	r0, [r0, #0]
   19dba:	b118      	cbz	r0, 19dc4 <oa_empty+0x18>
        {
            gxfree(arr->data);
   19dbc:	f7f1 ff02 	bl	bbc4 <free>
            arr->data = NULL;
   19dc0:	2300      	movs	r3, #0
   19dc2:	6023      	str	r3, [r4, #0]
        }
        arr->capacity = 0;
   19dc4:	2300      	movs	r3, #0
   19dc6:	80a3      	strh	r3, [r4, #4]
    }
#endif //DLMS_IGNORE_MALLOC
    arr->size = 0;
   19dc8:	2300      	movs	r3, #0
   19dca:	80e3      	strh	r3, [r4, #6]
#if !(defined(GX_DLMS_MICROCONTROLLER) || defined(DLMS_IGNORE_MALLOC))
    arr->position = 0;
#endif //!(defined(GX_DLMS_MICROCONTROLLER) || defined(DLMS_IGNORE_MALLOC))
}
   19dcc:	bd10      	pop	{r4, pc}

00019dce <oa_getByIndex>:
int oa_getByIndex(
    const objectArray* arr,
    uint16_t index,
    gxObject** item)
{
    if (index >= arr->size)
   19dce:	88c3      	ldrh	r3, [r0, #6]
   19dd0:	428b      	cmp	r3, r1
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    *item = (gxObject*)arr->data[index];
   19dd2:	bf81      	itttt	hi
   19dd4:	6803      	ldrhi	r3, [r0, #0]
   19dd6:	f853 3021 	ldrhi.w	r3, [r3, r1, lsl #2]
   19dda:	6013      	strhi	r3, [r2, #0]
    return DLMS_ERROR_CODE_OK;
   19ddc:	2000      	movhi	r0, #0
        return DLMS_ERROR_CODE_OUTOFMEMORY;
   19dde:	bf98      	it	ls
   19de0:	f44f 7082 	movls.w	r0, #260	; 0x104
}
   19de4:	4770      	bx	lr

00019de6 <oa_findBySN>:
#ifndef DLMS_IGNORE_ASSOCIATION_SHORT_NAME
int oa_findBySN(
    objectArray* objects,
    uint16_t sn,
    gxObject** object)
{
   19de6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint16_t pos;
    int ret = DLMS_ERROR_CODE_OK;
    gxObject* obj = NULL;
   19de8:	2400      	movs	r4, #0
{
   19dea:	4605      	mov	r5, r0
   19dec:	460f      	mov	r7, r1
   19dee:	4616      	mov	r6, r2
    gxObject* obj = NULL;
   19df0:	9401      	str	r4, [sp, #4]
    *object = NULL;
   19df2:	6014      	str	r4, [r2, #0]
    for (pos = 0; pos != objects->size; ++pos)
   19df4:	88eb      	ldrh	r3, [r5, #6]
   19df6:	b2a1      	uxth	r1, r4
   19df8:	428b      	cmp	r3, r1
   19dfa:	d101      	bne.n	19e00 <oa_findBySN+0x1a>
        {
            *object = obj;
            return 0;
        }
    }
    return ret;
   19dfc:	2000      	movs	r0, #0
   19dfe:	e00b      	b.n	19e18 <oa_findBySN+0x32>
        ret = oa_getByIndex(objects, pos, &obj);
   19e00:	aa01      	add	r2, sp, #4
   19e02:	4628      	mov	r0, r5
   19e04:	f7ff ffe3 	bl	19dce <oa_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   19e08:	b930      	cbnz	r0, 19e18 <oa_findBySN+0x32>
        if (obj->shortName == sn)
   19e0a:	9b01      	ldr	r3, [sp, #4]
   19e0c:	889a      	ldrh	r2, [r3, #4]
   19e0e:	42ba      	cmp	r2, r7
   19e10:	f104 0401 	add.w	r4, r4, #1
   19e14:	d1ee      	bne.n	19df4 <oa_findBySN+0xe>
            *object = obj;
   19e16:	6033      	str	r3, [r6, #0]
}
   19e18:	b003      	add	sp, #12
   19e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00019e1c <oa_findByLN>:
int oa_findByLN(
    objectArray* objects,
    DLMS_OBJECT_TYPE type,
    const unsigned char* ln,
    gxObject** object)
{
   19e1c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    uint16_t pos;
    int ret = DLMS_ERROR_CODE_OK;
    gxObject* obj = NULL;
   19e20:	2400      	movs	r4, #0
{
   19e22:	4605      	mov	r5, r0
   19e24:	460e      	mov	r6, r1
   19e26:	4698      	mov	r8, r3
    gxObject* obj = NULL;
   19e28:	9401      	str	r4, [sp, #4]
    *object = NULL;
   19e2a:	601c      	str	r4, [r3, #0]
    if (ln == NULL)
   19e2c:	4617      	mov	r7, r2
   19e2e:	b1ea      	cbz	r2, 19e6c <oa_findByLN+0x50>
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    for (pos = 0; pos != objects->size; ++pos)
   19e30:	88eb      	ldrh	r3, [r5, #6]
   19e32:	b2a1      	uxth	r1, r4
   19e34:	428b      	cmp	r3, r1
   19e36:	d101      	bne.n	19e3c <oa_findByLN+0x20>
   19e38:	2000      	movs	r0, #0
   19e3a:	e012      	b.n	19e62 <oa_findByLN+0x46>
    {
        if ((ret = oa_getByIndex(objects, pos, &obj)) != DLMS_ERROR_CODE_OK)
   19e3c:	aa01      	add	r2, sp, #4
   19e3e:	4628      	mov	r0, r5
   19e40:	f7ff ffc5 	bl	19dce <oa_getByIndex>
   19e44:	b968      	cbnz	r0, 19e62 <oa_findByLN+0x46>
        {
            break;
        }
        if ((obj->objectType == type || DLMS_OBJECT_TYPE_NONE == type) && memcmp(obj->logicalName, ln, 6) == 0)
   19e46:	9801      	ldr	r0, [sp, #4]
   19e48:	8803      	ldrh	r3, [r0, #0]
   19e4a:	42b3      	cmp	r3, r6
   19e4c:	d000      	beq.n	19e50 <oa_findByLN+0x34>
   19e4e:	b95e      	cbnz	r6, 19e68 <oa_findByLN+0x4c>
   19e50:	2206      	movs	r2, #6
   19e52:	4639      	mov	r1, r7
   19e54:	4410      	add	r0, r2
   19e56:	f002 f935 	bl	1c0c4 <memcmp>
   19e5a:	b928      	cbnz	r0, 19e68 <oa_findByLN+0x4c>
        {
            *object = obj;
   19e5c:	9b01      	ldr	r3, [sp, #4]
   19e5e:	f8c8 3000 	str.w	r3, [r8]
            break;
        }
    }
    return ret;
}
   19e62:	b002      	add	sp, #8
   19e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    for (pos = 0; pos != objects->size; ++pos)
   19e68:	3401      	adds	r4, #1
   19e6a:	e7e1      	b.n	19e30 <oa_findByLN+0x14>
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   19e6c:	f44f 7081 	mov.w	r0, #258	; 0x102
   19e70:	e7f7      	b.n	19e62 <oa_findByLN+0x46>

00019e72 <reply_init>:

/**
* Initialize reply structure.
*/
void reply_init(gxReplyData* reply)
{
   19e72:	b538      	push	{r3, r4, r5, lr}
   19e74:	4604      	mov	r4, r0
    reply->invokeId = 0;
   19e76:	2500      	movs	r5, #0
   19e78:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
    reply->commandType = 0;
    reply->moreData = DLMS_DATA_REQUEST_TYPES_NONE;
   19e7c:	f840 5b04 	str.w	r5, [r0], #4
    reply->encryptedCommand = reply->command = DLMS_COMMAND_NONE;
    BYTE_BUFFER_INIT(&reply->data);
   19e80:	f7f2 feb0 	bl	cbe4 <bb_init>
    reply->complete = 0;
   19e84:	7425      	strb	r5, [r4, #16]
    var_init(&reply->dataValue);
   19e86:	f104 0018 	add.w	r0, r4, #24
   19e8a:	f000 f830 	bl	19eee <var_init>
    reply->totalCount = 0;
    reply->readPosition = 0;
    reply->packetLength = 0;
   19e8e:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
#endif // DLMS_USE_EPOCH_TIME
    reply->preEstablished = 0;
    reply->blockNumber = 0;
    reply->blockNumberAck = 0;
    reply->streaming = 0;
    reply->windowSize = 0;
   19e92:	e9c4 5510 	strd	r5, r5, [r4, #64]	; 0x40
    reply->dataType = DLMS_DATA_TYPE_NONE;
   19e96:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    reply->cipherIndex = 0;
   19e9a:	8665      	strh	r5, [r4, #50]	; 0x32
    reply->time = 0;
   19e9c:	6365      	str	r5, [r4, #52]	; 0x34
    reply->preEstablished = 0;
   19e9e:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    reply->blockNumber = 0;
   19ea2:	8765      	strh	r5, [r4, #58]	; 0x3a
    reply->blockNumberAck = 0;
   19ea4:	87a5      	strh	r5, [r4, #60]	; 0x3c
    reply->serverAddress = 0;
   19ea6:	64a5      	str	r5, [r4, #72]	; 0x48
    reply->clientAddress = 0;
}
   19ea8:	bd38      	pop	{r3, r4, r5, pc}

00019eaa <reply_clear2>:

void reply_clear2(gxReplyData* reply, unsigned char clearData)
{
   19eaa:	b538      	push	{r3, r4, r5, lr}
    reply->invokeId = 0;
   19eac:	2500      	movs	r5, #0
{
   19eae:	4604      	mov	r4, r0
    reply->invokeId = 0;
   19eb0:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
    reply->moreData = DLMS_DATA_REQUEST_TYPES_NONE;
   19eb4:	8005      	strh	r5, [r0, #0]
    reply->encryptedCommand = reply->command = DLMS_COMMAND_NONE;
   19eb6:	7085      	strb	r5, [r0, #2]
    if (clearData)
   19eb8:	b121      	cbz	r1, 19ec4 <reply_clear2+0x1a>
    {
        bb_clear(&reply->data);
   19eba:	3004      	adds	r0, #4
   19ebc:	f7f3 f855 	bl	cf6a <bb_clear>
        reply->preEstablished = 0;
   19ec0:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    }
    reply->complete = 0;
   19ec4:	2500      	movs	r5, #0
   19ec6:	7425      	strb	r5, [r4, #16]
    var_clear(&reply->dataValue);
   19ec8:	f104 0018 	add.w	r0, r4, #24
   19ecc:	f000 f96b 	bl	1a1a6 <var_clear>
    reply->totalCount = 0;
    reply->readPosition = 0;
    reply->packetLength = 0;
   19ed0:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
    memset(&reply->time, 0, sizeof(struct tm));
#endif // DLMS_USE_EPOCH_TIME
    reply->blockNumber = 0;
    reply->blockNumberAck = 0;
    reply->streaming = 0;
    reply->windowSize = 0;
   19ed4:	e9c4 5510 	strd	r5, r5, [r4, #64]	; 0x40
    reply->dataType = DLMS_DATA_TYPE_NONE;
   19ed8:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    reply->cipherIndex = 0;
   19edc:	8665      	strh	r5, [r4, #50]	; 0x32
    reply->time = 0;
   19ede:	6365      	str	r5, [r4, #52]	; 0x34
    reply->blockNumber = 0;
   19ee0:	8765      	strh	r5, [r4, #58]	; 0x3a
    reply->blockNumberAck = 0;
   19ee2:	87a5      	strh	r5, [r4, #60]	; 0x3c
    reply->serverAddress = 0;
   19ee4:	64a5      	str	r5, [r4, #72]	; 0x48
    reply->clientAddress = 0;
}
   19ee6:	bd38      	pop	{r3, r4, r5, pc}

00019ee8 <reply_clear>:

void reply_clear(gxReplyData* reply)
{
    reply_clear2(reply, 1);
   19ee8:	2101      	movs	r1, #1
   19eea:	f7ff bfde 	b.w	19eaa <reply_clear2>

00019eee <var_init>:
{
   19eee:	4603      	mov	r3, r0
    data->vt = DLMS_DATA_TYPE_NONE;
   19ef0:	2000      	movs	r0, #0
   19ef2:	7018      	strb	r0, [r3, #0]
    data->byteArr = NULL;
   19ef4:	6098      	str	r0, [r3, #8]
}
   19ef6:	4770      	bx	lr

00019ef8 <var_getDate>:
{
   19ef8:	b570      	push	{r4, r5, r6, lr}
   19efa:	b086      	sub	sp, #24
    unsigned char month = 0xFF, day = 0xFF, dayOfWeek = 0xFF;
   19efc:	23ff      	movs	r3, #255	; 0xff
   19efe:	f88d 3014 	strb.w	r3, [sp, #20]
    time_fromUnixTime2(dateTime->value, &year, &month,
   19f02:	f10d 0315 	add.w	r3, sp, #21
   19f06:	9303      	str	r3, [sp, #12]
   19f08:	2300      	movs	r3, #0
   19f0a:	e9cd 3301 	strd	r3, r3, [sp, #4]
{
   19f0e:	4605      	mov	r5, r0
    time_fromUnixTime2(dateTime->value, &year, &month,
   19f10:	9300      	str	r3, [sp, #0]
    uint16_t year = 0xFFFF;
   19f12:	f64f 76ff 	movw	r6, #65535	; 0xffff
{
   19f16:	460c      	mov	r4, r1
    time_fromUnixTime2(dateTime->value, &year, &month,
   19f18:	ab05      	add	r3, sp, #20
   19f1a:	f10d 0213 	add.w	r2, sp, #19
   19f1e:	f10d 0116 	add.w	r1, sp, #22
   19f22:	6800      	ldr	r0, [r0, #0]
    uint16_t year = 0xFFFF;
   19f24:	f8ad 6016 	strh.w	r6, [sp, #22]
    unsigned char month = 0xFF, day = 0xFF, dayOfWeek = 0xFF;
   19f28:	f88d 6013 	strb.w	r6, [sp, #19]
   19f2c:	f88d 6015 	strb.w	r6, [sp, #21]
    time_fromUnixTime2(dateTime->value, &year, &month,
   19f30:	f7e8 f95c 	bl	21ec <time_fromUnixTime2>
    if ((dateTime->skip & DATETIME_SKIPS_YEAR) != 0)
   19f34:	88eb      	ldrh	r3, [r5, #6]
   19f36:	07d8      	lsls	r0, r3, #31
        year = 0xFFFF;
   19f38:	bf48      	it	mi
   19f3a:	f8ad 6016 	strhmi.w	r6, [sp, #22]
    bb_setUInt16(ba, year);
   19f3e:	f8bd 1016 	ldrh.w	r1, [sp, #22]
   19f42:	4620      	mov	r0, r4
   19f44:	f7f2 fed9 	bl	ccfa <bb_setUInt16>
    if ((dateTime->skip & DATETIME_SKIPS_MONTH) == 0)
   19f48:	88eb      	ldrh	r3, [r5, #6]
   19f4a:	0799      	lsls	r1, r3, #30
   19f4c:	d42d      	bmi.n	19faa <var_getDate+0xb2>
        if ((dateTime->extraInfo & DLMS_DATE_TIME_EXTRA_INFO_DST_BEGIN) != 0)
   19f4e:	7a2b      	ldrb	r3, [r5, #8]
   19f50:	07da      	lsls	r2, r3, #31
   19f52:	d526      	bpl.n	19fa2 <var_getDate+0xaa>
            month = 0xFE;
   19f54:	23fe      	movs	r3, #254	; 0xfe
            month = 0xFD;
   19f56:	f88d 3013 	strb.w	r3, [sp, #19]
        bb_setUInt8(ba, month);
   19f5a:	f89d 1013 	ldrb.w	r1, [sp, #19]
        bb_setUInt8(ba, 0xFF);
   19f5e:	4620      	mov	r0, r4
   19f60:	f7f2 fea9 	bl	ccb6 <bb_setUInt8>
    if ((dateTime->skip & DATETIME_SKIPS_DAY) == 0)
   19f64:	88eb      	ldrh	r3, [r5, #6]
   19f66:	0758      	lsls	r0, r3, #29
   19f68:	d425      	bmi.n	19fb6 <var_getDate+0xbe>
        if ((dateTime->extraInfo & DLMS_DATE_TIME_EXTRA_INFO_LAST_DAY) != 0)
   19f6a:	7a2b      	ldrb	r3, [r5, #8]
   19f6c:	0759      	lsls	r1, r3, #29
   19f6e:	d51e      	bpl.n	19fae <var_getDate+0xb6>
            day = 0xFE;
   19f70:	23fe      	movs	r3, #254	; 0xfe
            day = 0xFD;
   19f72:	f88d 3014 	strb.w	r3, [sp, #20]
        bb_setUInt8(ba, day);
   19f76:	f89d 1014 	ldrb.w	r1, [sp, #20]
        bb_setUInt8(ba, 0xFF);
   19f7a:	4620      	mov	r0, r4
   19f7c:	f7f2 fe9b 	bl	ccb6 <bb_setUInt8>
    if ((dateTime->skip & DATETIME_SKIPS_DAYOFWEEK) == 0)
   19f80:	88eb      	ldrh	r3, [r5, #6]
   19f82:	071b      	lsls	r3, r3, #28
   19f84:	d419      	bmi.n	19fba <var_getDate+0xc2>
        if (dayOfWeek == 0)
   19f86:	f89d 3015 	ldrb.w	r3, [sp, #21]
   19f8a:	b913      	cbnz	r3, 19f92 <var_getDate+0x9a>
            dayOfWeek = 7;
   19f8c:	2307      	movs	r3, #7
   19f8e:	f88d 3015 	strb.w	r3, [sp, #21]
        bb_setUInt8(ba, dayOfWeek);
   19f92:	f89d 1015 	ldrb.w	r1, [sp, #21]
        bb_setUInt8(ba, 0xFF);
   19f96:	4620      	mov	r0, r4
   19f98:	f7f2 fe8d 	bl	ccb6 <bb_setUInt8>
}
   19f9c:	2000      	movs	r0, #0
   19f9e:	b006      	add	sp, #24
   19fa0:	bd70      	pop	{r4, r5, r6, pc}
        else if ((dateTime->extraInfo & DLMS_DATE_TIME_EXTRA_INFO_DST_END) != 0)
   19fa2:	079e      	lsls	r6, r3, #30
   19fa4:	d5d9      	bpl.n	19f5a <var_getDate+0x62>
            month = 0xFD;
   19fa6:	23fd      	movs	r3, #253	; 0xfd
   19fa8:	e7d5      	b.n	19f56 <var_getDate+0x5e>
        bb_setUInt8(ba, 0xFF);
   19faa:	21ff      	movs	r1, #255	; 0xff
   19fac:	e7d7      	b.n	19f5e <var_getDate+0x66>
        else if ((dateTime->extraInfo & DLMS_DATE_TIME_EXTRA_INFO_LAST_DAY2) != 0)
   19fae:	071a      	lsls	r2, r3, #28
   19fb0:	d5e1      	bpl.n	19f76 <var_getDate+0x7e>
            day = 0xFD;
   19fb2:	23fd      	movs	r3, #253	; 0xfd
   19fb4:	e7dd      	b.n	19f72 <var_getDate+0x7a>
        bb_setUInt8(ba, 0xFF);
   19fb6:	21ff      	movs	r1, #255	; 0xff
   19fb8:	e7df      	b.n	19f7a <var_getDate+0x82>
        bb_setUInt8(ba, 0xFF);
   19fba:	21ff      	movs	r1, #255	; 0xff
   19fbc:	e7eb      	b.n	19f96 <var_getDate+0x9e>

00019fbe <var_getTime>:
{
   19fbe:	b5f0      	push	{r4, r5, r6, r7, lr}
   19fc0:	b087      	sub	sp, #28
    int ret = time_fromUnixTime2(dateTime->value, NULL, NULL,
   19fc2:	f10d 0217 	add.w	r2, sp, #23
   19fc6:	9202      	str	r2, [sp, #8]
   19fc8:	f10d 0216 	add.w	r2, sp, #22
   19fcc:	2300      	movs	r3, #0
   19fce:	9201      	str	r2, [sp, #4]
   19fd0:	f10d 0215 	add.w	r2, sp, #21
   19fd4:	9200      	str	r2, [sp, #0]
   19fd6:	9303      	str	r3, [sp, #12]
    unsigned char hour = 0xFF, minute = 0xFF, second = 0xFF;
   19fd8:	27ff      	movs	r7, #255	; 0xff
{
   19fda:	4605      	mov	r5, r0
   19fdc:	460c      	mov	r4, r1
    int ret = time_fromUnixTime2(dateTime->value, NULL, NULL,
   19fde:	6800      	ldr	r0, [r0, #0]
    unsigned char hour = 0xFF, minute = 0xFF, second = 0xFF;
   19fe0:	f88d 7015 	strb.w	r7, [sp, #21]
    int ret = time_fromUnixTime2(dateTime->value, NULL, NULL,
   19fe4:	461a      	mov	r2, r3
   19fe6:	4619      	mov	r1, r3
    unsigned char hour = 0xFF, minute = 0xFF, second = 0xFF;
   19fe8:	f88d 7016 	strb.w	r7, [sp, #22]
   19fec:	f88d 7017 	strb.w	r7, [sp, #23]
    int ret = time_fromUnixTime2(dateTime->value, NULL, NULL,
   19ff0:	f7e8 f8fc 	bl	21ec <time_fromUnixTime2>
    if (ret != 0)
   19ff4:	4606      	mov	r6, r0
   19ff6:	bb10      	cbnz	r0, 1a03e <var_getTime+0x80>
    if ((dateTime->skip & DATETIME_SKIPS_HOUR) == 0)
   19ff8:	88eb      	ldrh	r3, [r5, #6]
   19ffa:	06d9      	lsls	r1, r3, #27
        bb_setUInt8(ba, hour);
   19ffc:	bf54      	ite	pl
   19ffe:	f89d 1015 	ldrbpl.w	r1, [sp, #21]
        bb_setUInt8(ba, 0xFF);
   1a002:	4639      	movmi	r1, r7
   1a004:	4620      	mov	r0, r4
   1a006:	f7f2 fe56 	bl	ccb6 <bb_setUInt8>
    if ((dateTime->skip & DATETIME_SKIPS_MINUTE) == 0)
   1a00a:	88eb      	ldrh	r3, [r5, #6]
   1a00c:	069a      	lsls	r2, r3, #26
        bb_setUInt8(ba, minute);
   1a00e:	bf54      	ite	pl
   1a010:	f89d 1016 	ldrbpl.w	r1, [sp, #22]
        bb_setUInt8(ba, 0xFF);
   1a014:	21ff      	movmi	r1, #255	; 0xff
   1a016:	4620      	mov	r0, r4
   1a018:	f7f2 fe4d 	bl	ccb6 <bb_setUInt8>
    if ((dateTime->skip & DATETIME_SKIPS_SECOND) == 0)
   1a01c:	88eb      	ldrh	r3, [r5, #6]
   1a01e:	065b      	lsls	r3, r3, #25
        bb_setUInt8(ba, second);
   1a020:	bf54      	ite	pl
   1a022:	f89d 1017 	ldrbpl.w	r1, [sp, #23]
        bb_setUInt8(ba, 0xFF);
   1a026:	21ff      	movmi	r1, #255	; 0xff
   1a028:	4620      	mov	r0, r4
   1a02a:	f7f2 fe44 	bl	ccb6 <bb_setUInt8>
    if ((dateTime->skip & DATETIME_SKIPS_MS) == 0)
   1a02e:	88e9      	ldrh	r1, [r5, #6]
   1a030:	f011 0180 	ands.w	r1, r1, #128	; 0x80
        bb_setUInt8(ba, 0xFF);
   1a034:	bf18      	it	ne
   1a036:	21ff      	movne	r1, #255	; 0xff
   1a038:	4620      	mov	r0, r4
   1a03a:	f7f2 fe3c 	bl	ccb6 <bb_setUInt8>
}
   1a03e:	4630      	mov	r0, r6
   1a040:	b007      	add	sp, #28
   1a042:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001a044 <var_setOctetString>:
{
   1a044:	b530      	push	{r4, r5, lr}
    if (value->vt == DLMS_DATA_TYPE_STRING)
   1a046:	780b      	ldrb	r3, [r1, #0]
   1a048:	2b0a      	cmp	r3, #10
{
   1a04a:	b085      	sub	sp, #20
   1a04c:	4604      	mov	r4, r0
   1a04e:	460d      	mov	r5, r1
    if (value->vt == DLMS_DATA_TYPE_STRING)
   1a050:	d116      	bne.n	1a080 <var_setOctetString+0x3c>
        BYTE_BUFFER_INIT(&bb);
   1a052:	a801      	add	r0, sp, #4
   1a054:	f7f2 fdc6 	bl	cbe4 <bb_init>
        bb_addHexString(&bb, (char*)value->strVal->data);
   1a058:	68ab      	ldr	r3, [r5, #8]
   1a05a:	a801      	add	r0, sp, #4
   1a05c:	6819      	ldr	r1, [r3, #0]
   1a05e:	f7f3 f8da 	bl	d216 <bb_addHexString>
        hlp_setObjectCount(bb.size, buff);
   1a062:	4621      	mov	r1, r4
   1a064:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   1a068:	f7ff fc14 	bl	19894 <hlp_setObjectCount>
        bb_set2(buff, &bb, 0, bb.size);
   1a06c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1a070:	2200      	movs	r2, #0
   1a072:	a901      	add	r1, sp, #4
   1a074:	4620      	mov	r0, r4
   1a076:	f7f2 ff33 	bl	cee0 <bb_set2>
    return 0;
   1a07a:	2000      	movs	r0, #0
}
   1a07c:	b005      	add	sp, #20
   1a07e:	bd30      	pop	{r4, r5, pc}
    else if (value->vt == DLMS_DATA_TYPE_OCTET_STRING)
   1a080:	2b09      	cmp	r3, #9
   1a082:	d111      	bne.n	1a0a8 <var_setOctetString+0x64>
        if (value->byteArr == NULL)
   1a084:	688b      	ldr	r3, [r1, #8]
   1a086:	b923      	cbnz	r3, 1a092 <var_setOctetString+0x4e>
            hlp_setObjectCount(0, buff);
   1a088:	4621      	mov	r1, r4
   1a08a:	2000      	movs	r0, #0
   1a08c:	f7ff fc02 	bl	19894 <hlp_setObjectCount>
   1a090:	e7f3      	b.n	1a07a <var_setOctetString+0x36>
            hlp_setObjectCount(value->byteArr->size, buff);
   1a092:	4601      	mov	r1, r0
   1a094:	88d8      	ldrh	r0, [r3, #6]
   1a096:	f7ff fbfd 	bl	19894 <hlp_setObjectCount>
            bb_set(buff, value->byteArr->data, value->byteArr->size);
   1a09a:	68ab      	ldr	r3, [r5, #8]
   1a09c:	4620      	mov	r0, r4
   1a09e:	88da      	ldrh	r2, [r3, #6]
   1a0a0:	6819      	ldr	r1, [r3, #0]
   1a0a2:	f7f2 feee 	bl	ce82 <bb_set>
   1a0a6:	e7e8      	b.n	1a07a <var_setOctetString+0x36>
    else if (value->vt == DLMS_DATA_TYPE_NONE)
   1a0a8:	2b00      	cmp	r3, #0
   1a0aa:	d0ed      	beq.n	1a088 <var_setOctetString+0x44>
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   1a0ac:	f44f 7081 	mov.w	r0, #258	; 0x102
   1a0b0:	e7e4      	b.n	1a07c <var_setOctetString+0x38>

0001a0b2 <va_init>:
    arr->data = NULL;
   1a0b2:	2300      	movs	r3, #0
    arr->capacity = 0;
   1a0b4:	e9c0 3300 	strd	r3, r3, [r0]
}
   1a0b8:	4770      	bx	lr

0001a0ba <va_capacity>:
    if (!va_isAttached(arr))
   1a0ba:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
   1a0be:	2a00      	cmp	r2, #0
{
   1a0c0:	b538      	push	{r3, r4, r5, lr}
    return (arr->capacity & 0x8000) == 0x8000;
   1a0c2:	8883      	ldrh	r3, [r0, #4]
{
   1a0c4:	4604      	mov	r4, r0
   1a0c6:	460d      	mov	r5, r1
    if (!va_isAttached(arr))
   1a0c8:	db06      	blt.n	1a0d8 <va_capacity+0x1e>
        if (capacity == 0)
   1a0ca:	b961      	cbnz	r1, 1a0e6 <va_capacity+0x2c>
            if (arr->capacity != 0)
   1a0cc:	b11b      	cbz	r3, 1a0d6 <va_capacity+0x1c>
                gxfree(arr->data);
   1a0ce:	6800      	ldr	r0, [r0, #0]
   1a0d0:	f7f1 fd78 	bl	bbc4 <free>
                arr->size = 0;
   1a0d4:	80e5      	strh	r5, [r4, #6]
        arr->capacity = capacity;
   1a0d6:	80a5      	strh	r5, [r4, #4]
    return arr->capacity & 0x7FFF;
   1a0d8:	88a3      	ldrh	r3, [r4, #4]
    if (va_getCapacity(arr) < capacity)
   1a0da:	f3c3 030e 	ubfx	r3, r3, #0, #15
   1a0de:	429d      	cmp	r5, r3
   1a0e0:	d809      	bhi.n	1a0f6 <va_capacity+0x3c>
    return 0;
   1a0e2:	2000      	movs	r0, #0
   1a0e4:	e009      	b.n	1a0fa <va_capacity+0x40>
            if (arr->capacity == 0)
   1a0e6:	0089      	lsls	r1, r1, #2
   1a0e8:	b943      	cbnz	r3, 1a0fc <va_capacity+0x42>
                arr->data = (void**)gxmalloc(capacity * sizeof(dlmsVARIANT*));
   1a0ea:	4608      	mov	r0, r1
   1a0ec:	f7f1 fd62 	bl	bbb4 <malloc>
   1a0f0:	6020      	str	r0, [r4, #0]
                if (arr->data == NULL)
   1a0f2:	2800      	cmp	r0, #0
   1a0f4:	d1ef      	bne.n	1a0d6 <va_capacity+0x1c>
                    return DLMS_ERROR_CODE_OUTOFMEMORY;
   1a0f6:	f44f 7082 	mov.w	r0, #260	; 0x104
}
   1a0fa:	bd38      	pop	{r3, r4, r5, pc}
                void** tmp = (void**)gxrealloc(arr->data, capacity * sizeof(dlmsVARIANT*));
   1a0fc:	6800      	ldr	r0, [r0, #0]
   1a0fe:	f7f1 fe11 	bl	bd24 <realloc>
                if (tmp == NULL)
   1a102:	2800      	cmp	r0, #0
   1a104:	d0f7      	beq.n	1a0f6 <va_capacity+0x3c>
                arr->data = tmp;
   1a106:	6020      	str	r0, [r4, #0]
   1a108:	e7e5      	b.n	1a0d6 <va_capacity+0x1c>

0001a10a <va_push>:
{
   1a10a:	b538      	push	{r3, r4, r5, lr}
    return (arr->capacity & 0x8000) == 0x8000;
   1a10c:	8882      	ldrh	r2, [r0, #4]
{
   1a10e:	4604      	mov	r4, r0
    return (arr->capacity & 0x8000) == 0x8000;
   1a110:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
    if (!va_isAttached(arr))
   1a114:	2800      	cmp	r0, #0
{
   1a116:	460d      	mov	r5, r1
    if (!va_isAttached(arr))
   1a118:	db0a      	blt.n	1a130 <va_push+0x26>
   1a11a:	88e3      	ldrh	r3, [r4, #6]
        if (arr->size >= arr->capacity)
   1a11c:	429a      	cmp	r2, r3
   1a11e:	d807      	bhi.n	1a130 <va_push+0x26>
            arr->capacity += VARIANT_ARRAY_CAPACITY;
   1a120:	300a      	adds	r0, #10
   1a122:	b280      	uxth	r0, r0
   1a124:	80a0      	strh	r0, [r4, #4]
            if (arr->size == 0)
   1a126:	0080      	lsls	r0, r0, #2
   1a128:	b97b      	cbnz	r3, 1a14a <va_push+0x40>
                arr->data = (void**)gxmalloc(arr->capacity * sizeof(dlmsVARIANT*));
   1a12a:	f7f1 fd43 	bl	bbb4 <malloc>
                arr->data = tmp;
   1a12e:	6020      	str	r0, [r4, #0]
    return arr->capacity & 0x7FFF;
   1a130:	88a2      	ldrh	r2, [r4, #4]
    if (va_getCapacity(arr) <= arr->size)
   1a132:	88e3      	ldrh	r3, [r4, #6]
   1a134:	f3c2 020e 	ubfx	r2, r2, #0, #15
   1a138:	4293      	cmp	r3, r2
   1a13a:	d20c      	bcs.n	1a156 <va_push+0x4c>
    p[arr->size] = item;
   1a13c:	6822      	ldr	r2, [r4, #0]
   1a13e:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
    ++arr->size;
   1a142:	3301      	adds	r3, #1
   1a144:	80e3      	strh	r3, [r4, #6]
    return 0;
   1a146:	2000      	movs	r0, #0
   1a148:	e007      	b.n	1a15a <va_push+0x50>
                void** tmp = (void**)gxrealloc(arr->data, arr->capacity * sizeof(dlmsVARIANT*));
   1a14a:	4601      	mov	r1, r0
   1a14c:	6820      	ldr	r0, [r4, #0]
   1a14e:	f7f1 fde9 	bl	bd24 <realloc>
                if (tmp == NULL)
   1a152:	2800      	cmp	r0, #0
   1a154:	d1eb      	bne.n	1a12e <va_push+0x24>
                    return DLMS_ERROR_CODE_OUTOFMEMORY;
   1a156:	f44f 7082 	mov.w	r0, #260	; 0x104
}
   1a15a:	bd38      	pop	{r3, r4, r5, pc}

0001a15c <va_clear>:
    if (arr->data != NULL && !attached)
   1a15c:	6802      	ldr	r2, [r0, #0]
{
   1a15e:	b538      	push	{r3, r4, r5, lr}
    return (arr->capacity & 0x8000) == 0x8000;
   1a160:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
{
   1a164:	4604      	mov	r4, r0
    if (arr->data != NULL && !attached)
   1a166:	b1da      	cbz	r2, 1a1a0 <va_clear+0x44>
   1a168:	2b00      	cmp	r3, #0
   1a16a:	da17      	bge.n	1a19c <va_clear+0x40>
    arr->size = 0;
   1a16c:	2300      	movs	r3, #0
   1a16e:	80e3      	strh	r3, [r4, #6]
}
   1a170:	bd38      	pop	{r3, r4, r5, pc}
            var_clear((dlmsVARIANT*)arr->data[pos]);
   1a172:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
   1a176:	f000 f816 	bl	1a1a6 <var_clear>
            gxfree(arr->data[pos]);
   1a17a:	6823      	ldr	r3, [r4, #0]
   1a17c:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   1a180:	f7f1 fd20 	bl	bbc4 <free>
        for (pos = 0; pos != arr->size; ++pos)
   1a184:	3501      	adds	r5, #1
   1a186:	88e3      	ldrh	r3, [r4, #6]
   1a188:	6820      	ldr	r0, [r4, #0]
   1a18a:	42ab      	cmp	r3, r5
   1a18c:	d1f1      	bne.n	1a172 <va_clear+0x16>
        gxfree(arr->data);
   1a18e:	f7f1 fd19 	bl	bbc4 <free>
        arr->data = NULL;
   1a192:	2300      	movs	r3, #0
   1a194:	6023      	str	r3, [r4, #0]
        arr->capacity = 0;
   1a196:	2300      	movs	r3, #0
   1a198:	80a3      	strh	r3, [r4, #4]
   1a19a:	e7e7      	b.n	1a16c <va_clear+0x10>
        for (pos = 0; pos != arr->size; ++pos)
   1a19c:	2500      	movs	r5, #0
   1a19e:	e7f2      	b.n	1a186 <va_clear+0x2a>
    if (!attached)
   1a1a0:	2b00      	cmp	r3, #0
   1a1a2:	daf8      	bge.n	1a196 <va_clear+0x3a>
   1a1a4:	e7e2      	b.n	1a16c <va_clear+0x10>

0001a1a6 <var_clear>:
{
   1a1a6:	b538      	push	{r3, r4, r5, lr}
    if ((data->vt & DLMS_DATA_TYPE_BYREF) != 0)
   1a1a8:	f990 2000 	ldrsb.w	r2, [r0]
   1a1ac:	7803      	ldrb	r3, [r0, #0]
   1a1ae:	2a00      	cmp	r2, #0
{
   1a1b0:	4604      	mov	r4, r0
    if ((data->vt & DLMS_DATA_TYPE_BYREF) != 0)
   1a1b2:	db21      	blt.n	1a1f8 <var_clear+0x52>
    switch (data->vt)
   1a1b4:	3b01      	subs	r3, #1
   1a1b6:	2b1a      	cmp	r3, #26
   1a1b8:	d83e      	bhi.n	1a238 <var_clear+0x92>
   1a1ba:	e8df f003 	tbb	[pc, r3]
   1a1be:	2828      	.short	0x2828
   1a1c0:	3d3d333d 	.word	0x3d3d333d
   1a1c4:	1f0e3d3d 	.word	0x1f0e3d3d
   1a1c8:	3d3d0e3d 	.word	0x3d3d0e3d
   1a1cc:	3d3d3d3d 	.word	0x3d3d3d3d
   1a1d0:	3d3d3d28 	.word	0x3d3d3d28
   1a1d4:	39393d3d 	.word	0x39393d3d
   1a1d8:	39          	.byte	0x39
   1a1d9:	00          	.byte	0x00
        if (data->strUtfVal != NULL)
   1a1da:	6880      	ldr	r0, [r0, #8]
   1a1dc:	b150      	cbz	r0, 1a1f4 <var_clear+0x4e>
            bb_clear(data->strUtfVal);
   1a1de:	f7f2 fec4 	bl	cf6a <bb_clear>
            if (!bb_isAttached(data->strUtfVal))
   1a1e2:	68a0      	ldr	r0, [r4, #8]
   1a1e4:	f7f2 fced 	bl	cbc2 <bb_isAttached>
   1a1e8:	4605      	mov	r5, r0
   1a1ea:	b918      	cbnz	r0, 1a1f4 <var_clear+0x4e>
                gxfree(data->strUtfVal);
   1a1ec:	68a0      	ldr	r0, [r4, #8]
   1a1ee:	f7f1 fce9 	bl	bbc4 <free>
                data->strUtfVal = NULL;
   1a1f2:	60a5      	str	r5, [r4, #8]
    data->vt = DLMS_DATA_TYPE_NONE;
   1a1f4:	2300      	movs	r3, #0
   1a1f6:	7023      	strb	r3, [r4, #0]
}
   1a1f8:	2000      	movs	r0, #0
   1a1fa:	bd38      	pop	{r3, r4, r5, pc}
        if (data->strVal != NULL)
   1a1fc:	6880      	ldr	r0, [r0, #8]
   1a1fe:	2800      	cmp	r0, #0
   1a200:	d0f8      	beq.n	1a1f4 <var_clear+0x4e>
            bb_clear(data->strVal);
   1a202:	f7f2 feb2 	bl	cf6a <bb_clear>
            gxfree(data->bitArr);
   1a206:	68a0      	ldr	r0, [r4, #8]
   1a208:	f7f1 fcdc 	bl	bbc4 <free>
   1a20c:	e7f2      	b.n	1a1f4 <var_clear+0x4e>
        if (data->Arr != NULL)
   1a20e:	6880      	ldr	r0, [r0, #8]
   1a210:	2800      	cmp	r0, #0
   1a212:	d0ef      	beq.n	1a1f4 <var_clear+0x4e>
            va_clear(data->Arr);
   1a214:	f7ff ffa2 	bl	1a15c <va_clear>
            gxfree(data->Arr);
   1a218:	68a0      	ldr	r0, [r4, #8]
   1a21a:	f7f1 fcd3 	bl	bbc4 <free>
            data->Arr = NULL;
   1a21e:	2300      	movs	r3, #0
   1a220:	60a3      	str	r3, [r4, #8]
   1a222:	e7e7      	b.n	1a1f4 <var_clear+0x4e>
        if (data->bitArr != NULL)
   1a224:	6880      	ldr	r0, [r0, #8]
   1a226:	2800      	cmp	r0, #0
   1a228:	d0e4      	beq.n	1a1f4 <var_clear+0x4e>
            ba_clear(data->bitArr);
   1a22a:	f7f2 fc44 	bl	cab6 <ba_clear>
   1a22e:	e7ea      	b.n	1a206 <var_clear+0x60>
        if (data->dateTime != NULL)
   1a230:	6880      	ldr	r0, [r0, #8]
   1a232:	b108      	cbz	r0, 1a238 <var_clear+0x92>
            gxfree(data->dateTime);
   1a234:	f7f1 fcc6 	bl	bbc4 <free>
        data->llVal = 0;
   1a238:	2200      	movs	r2, #0
   1a23a:	2300      	movs	r3, #0
   1a23c:	e9c4 2302 	strd	r2, r3, [r4, #8]
        break;
   1a240:	e7d8      	b.n	1a1f4 <var_clear+0x4e>

0001a242 <var_setUInt8>:
{
   1a242:	b538      	push	{r3, r4, r5, lr}
   1a244:	4604      	mov	r4, r0
   1a246:	460d      	mov	r5, r1
    var_clear(data);
   1a248:	f7ff ffad 	bl	1a1a6 <var_clear>
    data->vt = DLMS_DATA_TYPE_UINT8;
   1a24c:	2311      	movs	r3, #17
   1a24e:	7023      	strb	r3, [r4, #0]
    data->bVal = value;
   1a250:	7225      	strb	r5, [r4, #8]
}
   1a252:	2000      	movs	r0, #0
   1a254:	bd38      	pop	{r3, r4, r5, pc}

0001a256 <var_addBytes>:
{
   1a256:	b570      	push	{r4, r5, r6, lr}
    if (data->vt != DLMS_DATA_TYPE_OCTET_STRING)
   1a258:	7803      	ldrb	r3, [r0, #0]
   1a25a:	2b09      	cmp	r3, #9
{
   1a25c:	4604      	mov	r4, r0
   1a25e:	460d      	mov	r5, r1
   1a260:	4616      	mov	r6, r2
    if (data->vt != DLMS_DATA_TYPE_OCTET_STRING)
   1a262:	d010      	beq.n	1a286 <var_addBytes+0x30>
        var_clear(data);
   1a264:	f7ff ff9f 	bl	1a1a6 <var_clear>
        data->byteArr = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
   1a268:	200c      	movs	r0, #12
   1a26a:	f7f1 fca3 	bl	bbb4 <malloc>
   1a26e:	60a0      	str	r0, [r4, #8]
        BYTE_BUFFER_INIT(data->byteArr);
   1a270:	f7f2 fcb8 	bl	cbe4 <bb_init>
        data->vt = DLMS_DATA_TYPE_OCTET_STRING;
   1a274:	2309      	movs	r3, #9
   1a276:	7023      	strb	r3, [r4, #0]
    return bb_set(data->byteArr, value, count);
   1a278:	68a0      	ldr	r0, [r4, #8]
   1a27a:	4632      	mov	r2, r6
   1a27c:	4629      	mov	r1, r5
}
   1a27e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return bb_set(data->byteArr, value, count);
   1a282:	f7f2 bdfe 	b.w	ce82 <bb_set>
        bb_clear(data->byteArr);
   1a286:	6880      	ldr	r0, [r0, #8]
   1a288:	f7f2 fe6f 	bl	cf6a <bb_clear>
   1a28c:	e7f4      	b.n	1a278 <var_addBytes+0x22>

0001a28e <va_attach2>:
    trg->capacity = src->capacity;
   1a28e:	888b      	ldrh	r3, [r1, #4]
   1a290:	8083      	strh	r3, [r0, #4]
    trg->data = src->data;
   1a292:	680b      	ldr	r3, [r1, #0]
   1a294:	6003      	str	r3, [r0, #0]
    trg->size = src->size;
   1a296:	88cb      	ldrh	r3, [r1, #6]
   1a298:	80c3      	strh	r3, [r0, #6]
    src->data = NULL;
   1a29a:	2300      	movs	r3, #0
    src->size = src->capacity = 0;
   1a29c:	e9c1 3300 	strd	r3, r3, [r1]
}
   1a2a0:	4770      	bx	lr

0001a2a2 <va_getByIndex>:
    if (index >= arr->size)
   1a2a2:	88c3      	ldrh	r3, [r0, #6]
   1a2a4:	428b      	cmp	r3, r1
    *item = p[index];
   1a2a6:	bfc1      	itttt	gt
   1a2a8:	6803      	ldrgt	r3, [r0, #0]
   1a2aa:	f853 3021 	ldrgt.w	r3, [r3, r1, lsl #2]
   1a2ae:	6013      	strgt	r3, [r2, #0]
    return DLMS_ERROR_CODE_OK;
   1a2b0:	2000      	movgt	r0, #0
        return DLMS_ERROR_CODE_OUTOFMEMORY;
   1a2b2:	bfd8      	it	le
   1a2b4:	f44f 7082 	movle.w	r0, #260	; 0x104
}
   1a2b8:	4770      	bx	lr

0001a2ba <var_getBytes3>:
    if ((type & DLMS_DATA_TYPE_BYREF) != 0)
   1a2ba:	f011 0f80 	tst.w	r1, #128	; 0x80
{
   1a2be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1a2c0:	4605      	mov	r5, r0
   1a2c2:	460f      	mov	r7, r1
   1a2c4:	4616      	mov	r6, r2
   1a2c6:	461c      	mov	r4, r3
    if ((type & DLMS_DATA_TYPE_BYREF) != 0)
   1a2c8:	d005      	beq.n	1a2d6 <var_getBytes3+0x1c>
        return var_getBytes3(data, type & ~DLMS_DATA_TYPE_BYREF, ba, addType);
   1a2ca:	f001 017f 	and.w	r1, r1, #127	; 0x7f
   1a2ce:	f7ff fff4 	bl	1a2ba <var_getBytes3>
            ret = bb_set(ba, data->bitArr->data, ba_getByteCount(data->bitArr->size));
   1a2d2:	4604      	mov	r4, r0
   1a2d4:	e00e      	b.n	1a2f4 <var_getBytes3+0x3a>
    if (type == DLMS_DATA_TYPE_STRUCTURE ||
   1a2d6:	1e4b      	subs	r3, r1, #1
   1a2d8:	2b01      	cmp	r3, #1
   1a2da:	d822      	bhi.n	1a322 <var_getBytes3+0x68>
        if ((ret = bb_setUInt8(ba, type)) == 0 &&
   1a2dc:	4610      	mov	r0, r2
   1a2de:	f7f2 fcea 	bl	ccb6 <bb_setUInt8>
   1a2e2:	4604      	mov	r4, r0
   1a2e4:	b930      	cbnz	r0, 1a2f4 <var_getBytes3+0x3a>
            (ret = hlp_setObjectCount(data->Arr->size, ba)) == 0)
   1a2e6:	68ab      	ldr	r3, [r5, #8]
   1a2e8:	4631      	mov	r1, r6
   1a2ea:	88d8      	ldrh	r0, [r3, #6]
   1a2ec:	f7ff fad2 	bl	19894 <hlp_setObjectCount>
        if ((ret = bb_setUInt8(ba, type)) == 0 &&
   1a2f0:	4604      	mov	r4, r0
   1a2f2:	b1a0      	cbz	r0, 1a31e <var_getBytes3+0x64>
}
   1a2f4:	4620      	mov	r0, r4
   1a2f6:	b003      	add	sp, #12
   1a2f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
                if ((ret = va_getByIndex(data->Arr, pos, &tmp)) != DLMS_ERROR_CODE_OK ||
   1a2fa:	aa01      	add	r2, sp, #4
   1a2fc:	4639      	mov	r1, r7
   1a2fe:	f7ff ffd0 	bl	1a2a2 <va_getByIndex>
   1a302:	2800      	cmp	r0, #0
   1a304:	d1e5      	bne.n	1a2d2 <var_getBytes3+0x18>
                    (ret = var_getBytes(tmp, ba)) != DLMS_ERROR_CODE_OK)
   1a306:	9801      	ldr	r0, [sp, #4]
   1a308:	4631      	mov	r1, r6
   1a30a:	f000 f90a 	bl	1a522 <var_getBytes>
                if ((ret = va_getByIndex(data->Arr, pos, &tmp)) != DLMS_ERROR_CODE_OK ||
   1a30e:	2800      	cmp	r0, #0
   1a310:	d1df      	bne.n	1a2d2 <var_getBytes3+0x18>
            for (pos = 0; pos != data->Arr->size; ++pos)
   1a312:	3701      	adds	r7, #1
   1a314:	68a8      	ldr	r0, [r5, #8]
   1a316:	88c3      	ldrh	r3, [r0, #6]
   1a318:	42bb      	cmp	r3, r7
   1a31a:	d1ee      	bne.n	1a2fa <var_getBytes3+0x40>
   1a31c:	e7ea      	b.n	1a2f4 <var_getBytes3+0x3a>
   1a31e:	4607      	mov	r7, r0
   1a320:	e7f8      	b.n	1a314 <var_getBytes3+0x5a>
    if (addType)
   1a322:	bb14      	cbnz	r4, 1a36a <var_getBytes3+0xb0>
    switch (type)
   1a324:	2f1b      	cmp	r7, #27
   1a326:	d81d      	bhi.n	1a364 <var_getBytes3+0xaa>
   1a328:	e8df f017 	tbh	[pc, r7, lsl #1]
   1a32c:	001c00f6 	.word	0x001c00f6
   1a330:	0031001c 	.word	0x0031001c
   1a334:	006e00e5 	.word	0x006e00e5
   1a338:	001c006e 	.word	0x001c006e
   1a33c:	00b2001c 	.word	0x00b2001c
   1a340:	001c009e 	.word	0x001c009e
   1a344:	001c001c 	.word	0x001c001c
   1a348:	0056001c 	.word	0x0056001c
   1a34c:	00260061 	.word	0x00260061
   1a350:	001c003d 	.word	0x001c003d
   1a354:	00480078 	.word	0x00480078
   1a358:	00860026 	.word	0x00860026
   1a35c:	00bd0090 	.word	0x00bd0090
   1a360:	00db00cc 	.word	0x00db00cc
                if ((ret = va_getByIndex(data->Arr, pos, &tmp)) != DLMS_ERROR_CODE_OK ||
   1a364:	f44f 7481 	mov.w	r4, #258	; 0x102
   1a368:	e7c4      	b.n	1a2f4 <var_getBytes3+0x3a>
        if ((ret = bb_setUInt8(ba, type)) != 0)
   1a36a:	4610      	mov	r0, r2
   1a36c:	f7f2 fca3 	bl	ccb6 <bb_setUInt8>
   1a370:	4604      	mov	r4, r0
   1a372:	2800      	cmp	r0, #0
   1a374:	d0d6      	beq.n	1a324 <var_getBytes3+0x6a>
   1a376:	e7bd      	b.n	1a2f4 <var_getBytes3+0x3a>
        ret = bb_setUInt8(ba, (data->vt & DLMS_DATA_TYPE_BYREF) != 0 ? *data->pbVal : data->bVal);
   1a378:	f995 3000 	ldrsb.w	r3, [r5]
   1a37c:	2b00      	cmp	r3, #0
   1a37e:	bfb6      	itet	lt
   1a380:	68ab      	ldrlt	r3, [r5, #8]
   1a382:	7a29      	ldrbge	r1, [r5, #8]
   1a384:	7819      	ldrblt	r1, [r3, #0]
            ret = bb_setUInt8(ba, *data->pbVal == 0 ? 0 : 1);
   1a386:	4630      	mov	r0, r6
   1a388:	f7f2 fc95 	bl	ccb6 <bb_setUInt8>
   1a38c:	e7a1      	b.n	1a2d2 <var_getBytes3+0x18>
        if ((data->vt & DLMS_DATA_TYPE_BYREF) != 0)
   1a38e:	f995 3000 	ldrsb.w	r3, [r5]
   1a392:	2b00      	cmp	r3, #0
   1a394:	da05      	bge.n	1a3a2 <var_getBytes3+0xe8>
            ret = bb_setUInt8(ba, *data->pbVal == 0 ? 0 : 1);
   1a396:	68ab      	ldr	r3, [r5, #8]
   1a398:	7819      	ldrb	r1, [r3, #0]
   1a39a:	3900      	subs	r1, #0
   1a39c:	bf18      	it	ne
   1a39e:	2101      	movne	r1, #1
   1a3a0:	e7f1      	b.n	1a386 <var_getBytes3+0xcc>
            ret = bb_setUInt8(ba, data->bVal == 0 ? 0 : 1);
   1a3a2:	7a29      	ldrb	r1, [r5, #8]
   1a3a4:	e7f9      	b.n	1a39a <var_getBytes3+0xe0>
        ret = bb_setUInt16(ba, (data->vt & DLMS_DATA_TYPE_BYREF) != 0 ? *data->puiVal : data->uiVal);
   1a3a6:	f995 3000 	ldrsb.w	r3, [r5]
   1a3aa:	2b00      	cmp	r3, #0
   1a3ac:	bfb6      	itet	lt
   1a3ae:	68ab      	ldrlt	r3, [r5, #8]
   1a3b0:	8929      	ldrhge	r1, [r5, #8]
   1a3b2:	8819      	ldrhlt	r1, [r3, #0]
   1a3b4:	4630      	mov	r0, r6
   1a3b6:	f7f2 fca0 	bl	ccfa <bb_setUInt16>
   1a3ba:	e78a      	b.n	1a2d2 <var_getBytes3+0x18>
        ret = bb_setUInt64(ba, (data->vt & DLMS_DATA_TYPE_BYREF) != 0 ? *data->pullVal : data->ullVal);
   1a3bc:	f995 3000 	ldrsb.w	r3, [r5]
   1a3c0:	2b00      	cmp	r3, #0
   1a3c2:	da06      	bge.n	1a3d2 <var_getBytes3+0x118>
   1a3c4:	68ab      	ldr	r3, [r5, #8]
   1a3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a3ca:	4630      	mov	r0, r6
   1a3cc:	f7f2 fcc2 	bl	cd54 <bb_setUInt64>
   1a3d0:	e77f      	b.n	1a2d2 <var_getBytes3+0x18>
   1a3d2:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   1a3d6:	e7f8      	b.n	1a3ca <var_getBytes3+0x110>
        ret = bb_setInt8(ba, (data->vt & DLMS_DATA_TYPE_BYREF) != 0 ? *data->pcVal : data->cVal);
   1a3d8:	f995 3000 	ldrsb.w	r3, [r5]
   1a3dc:	2b00      	cmp	r3, #0
   1a3de:	bfb6      	itet	lt
   1a3e0:	68ab      	ldrlt	r3, [r5, #8]
   1a3e2:	7a29      	ldrbge	r1, [r5, #8]
   1a3e4:	7819      	ldrblt	r1, [r3, #0]
   1a3e6:	4630      	mov	r0, r6
   1a3e8:	f7f2 fd42 	bl	ce70 <bb_setInt8>
   1a3ec:	e771      	b.n	1a2d2 <var_getBytes3+0x18>
        ret = bb_setInt16(ba, (data->vt & DLMS_DATA_TYPE_BYREF) != 0 ? *data->puiVal : data->uiVal);
   1a3ee:	f995 3000 	ldrsb.w	r3, [r5]
   1a3f2:	2b00      	cmp	r3, #0
   1a3f4:	bfb6      	itet	lt
   1a3f6:	68ab      	ldrlt	r3, [r5, #8]
   1a3f8:	f9b5 1008 	ldrshge.w	r1, [r5, #8]
   1a3fc:	f9b3 1000 	ldrshlt.w	r1, [r3]
   1a400:	4630      	mov	r0, r6
   1a402:	f7f2 fd37 	bl	ce74 <bb_setInt16>
   1a406:	e764      	b.n	1a2d2 <var_getBytes3+0x18>
        ret = bb_setUInt32(ba, (data->vt & DLMS_DATA_TYPE_BYREF) != 0 ? *data->plVal : data->lVal);
   1a408:	f995 3000 	ldrsb.w	r3, [r5]
   1a40c:	68a9      	ldr	r1, [r5, #8]
   1a40e:	2b00      	cmp	r3, #0
   1a410:	bfb8      	it	lt
   1a412:	6809      	ldrlt	r1, [r1, #0]
   1a414:	4630      	mov	r0, r6
   1a416:	f7f2 fc92 	bl	cd3e <bb_setUInt32>
   1a41a:	e75a      	b.n	1a2d2 <var_getBytes3+0x18>
        ret = bb_setInt64(ba, (data->vt & DLMS_DATA_TYPE_BYREF) != 0 ? *data->pllVal : data->llVal);
   1a41c:	f995 3000 	ldrsb.w	r3, [r5]
   1a420:	2b00      	cmp	r3, #0
   1a422:	da06      	bge.n	1a432 <var_getBytes3+0x178>
   1a424:	68ab      	ldr	r3, [r5, #8]
   1a426:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a42a:	4630      	mov	r0, r6
   1a42c:	f7f2 fd27 	bl	ce7e <bb_setInt64>
   1a430:	e74f      	b.n	1a2d2 <var_getBytes3+0x18>
   1a432:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   1a436:	e7f8      	b.n	1a42a <var_getBytes3+0x170>
        ret = bb_setFloat(ba, (data->vt & DLMS_DATA_TYPE_BYREF) != 0 ? *data->pfltVal : data->fltVal);
   1a438:	f995 3000 	ldrsb.w	r3, [r5]
   1a43c:	68a9      	ldr	r1, [r5, #8]
   1a43e:	2b00      	cmp	r3, #0
   1a440:	bfb8      	it	lt
   1a442:	6809      	ldrlt	r1, [r1, #0]
   1a444:	4630      	mov	r0, r6
   1a446:	f7f2 fcb7 	bl	cdb8 <bb_setFloat>
   1a44a:	e742      	b.n	1a2d2 <var_getBytes3+0x18>
        ret = bb_setDouble(ba, (data->vt & DLMS_DATA_TYPE_BYREF) != 0 ? *data->pdblVal : data->dblVal);
   1a44c:	f995 3000 	ldrsb.w	r3, [r5]
   1a450:	2b00      	cmp	r3, #0
   1a452:	da06      	bge.n	1a462 <var_getBytes3+0x1a8>
   1a454:	68ab      	ldr	r3, [r5, #8]
   1a456:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a45a:	4630      	mov	r0, r6
   1a45c:	f7f2 fcce 	bl	cdfc <bb_setDouble>
   1a460:	e737      	b.n	1a2d2 <var_getBytes3+0x18>
   1a462:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   1a466:	e7f8      	b.n	1a45a <var_getBytes3+0x1a0>
        if (data->strVal == NULL)
   1a468:	68a8      	ldr	r0, [r5, #8]
            ret = hlp_setObjectCount(0, ba);
   1a46a:	4631      	mov	r1, r6
        if (data->strVal == NULL)
   1a46c:	b910      	cbnz	r0, 1a474 <var_getBytes3+0x1ba>
            ret = hlp_setObjectCount(0, ba);
   1a46e:	f7ff fa11 	bl	19894 <hlp_setObjectCount>
   1a472:	e72e      	b.n	1a2d2 <var_getBytes3+0x18>
            if ((ret = hlp_setObjectCount(data->strVal->size, ba)) == 0)
   1a474:	88c0      	ldrh	r0, [r0, #6]
   1a476:	f7ff fa0d 	bl	19894 <hlp_setObjectCount>
   1a47a:	4604      	mov	r4, r0
   1a47c:	2800      	cmp	r0, #0
   1a47e:	f47f af39 	bne.w	1a2f4 <var_getBytes3+0x3a>
                ret = bb_set(ba, data->strVal->data, data->strVal->size);
   1a482:	68ab      	ldr	r3, [r5, #8]
   1a484:	88da      	ldrh	r2, [r3, #6]
   1a486:	6819      	ldr	r1, [r3, #0]
            ret = bb_set(ba, data->bitArr->data, ba_getByteCount(data->bitArr->size));
   1a488:	4630      	mov	r0, r6
   1a48a:	f7f2 fcfa 	bl	ce82 <bb_set>
   1a48e:	e720      	b.n	1a2d2 <var_getBytes3+0x18>
        if (data->vt == DLMS_DATA_TYPE_DATETIME)
   1a490:	782b      	ldrb	r3, [r5, #0]
   1a492:	2b19      	cmp	r3, #25
   1a494:	d10c      	bne.n	1a4b0 <var_getBytes3+0x1f6>
            if ((ret = bb_setUInt8(ba, 12)) == 0)
   1a496:	210c      	movs	r1, #12
   1a498:	4630      	mov	r0, r6
   1a49a:	f7f2 fc0c 	bl	ccb6 <bb_setUInt8>
   1a49e:	4604      	mov	r4, r0
   1a4a0:	2800      	cmp	r0, #0
   1a4a2:	f47f af27 	bne.w	1a2f4 <var_getBytes3+0x3a>
        ret = var_getDateTime2(data->dateTime, ba);
   1a4a6:	68a8      	ldr	r0, [r5, #8]
   1a4a8:	4631      	mov	r1, r6
   1a4aa:	f7e9 fe7b 	bl	41a4 <var_getDateTime2>
   1a4ae:	e710      	b.n	1a2d2 <var_getBytes3+0x18>
        else if (data->vt == DLMS_DATA_TYPE_DATE)
   1a4b0:	2b1a      	cmp	r3, #26
   1a4b2:	d10c      	bne.n	1a4ce <var_getBytes3+0x214>
            if ((ret = bb_setUInt8(ba, 5)) == 0)
   1a4b4:	2105      	movs	r1, #5
   1a4b6:	4630      	mov	r0, r6
   1a4b8:	f7f2 fbfd 	bl	ccb6 <bb_setUInt8>
   1a4bc:	4604      	mov	r4, r0
   1a4be:	2800      	cmp	r0, #0
   1a4c0:	f47f af18 	bne.w	1a2f4 <var_getBytes3+0x3a>
        ret = var_getDate(data->dateTime, ba);
   1a4c4:	68a8      	ldr	r0, [r5, #8]
   1a4c6:	4631      	mov	r1, r6
   1a4c8:	f7ff fd16 	bl	19ef8 <var_getDate>
   1a4cc:	e701      	b.n	1a2d2 <var_getBytes3+0x18>
        else if (data->vt == DLMS_DATA_TYPE_TIME)
   1a4ce:	2b1b      	cmp	r3, #27
   1a4d0:	d10c      	bne.n	1a4ec <var_getBytes3+0x232>
            if ((ret = bb_setUInt8(ba, 4)) == 0)
   1a4d2:	2104      	movs	r1, #4
   1a4d4:	4630      	mov	r0, r6
   1a4d6:	f7f2 fbee 	bl	ccb6 <bb_setUInt8>
   1a4da:	4604      	mov	r4, r0
   1a4dc:	2800      	cmp	r0, #0
   1a4de:	f47f af09 	bne.w	1a2f4 <var_getBytes3+0x3a>
        ret = var_getTime(data->dateTime, ba);
   1a4e2:	68a8      	ldr	r0, [r5, #8]
   1a4e4:	4631      	mov	r1, r6
   1a4e6:	f7ff fd6a 	bl	19fbe <var_getTime>
   1a4ea:	e6f2      	b.n	1a2d2 <var_getBytes3+0x18>
            ret = var_setOctetString(ba, data);
   1a4ec:	4629      	mov	r1, r5
   1a4ee:	4630      	mov	r0, r6
   1a4f0:	f7ff fda8 	bl	1a044 <var_setOctetString>
   1a4f4:	e6ed      	b.n	1a2d2 <var_getBytes3+0x18>
        if ((ret = hlp_setObjectCount(data->bitArr->size, ba)) == 0)
   1a4f6:	68ab      	ldr	r3, [r5, #8]
   1a4f8:	4631      	mov	r1, r6
   1a4fa:	88d8      	ldrh	r0, [r3, #6]
   1a4fc:	f7ff f9ca 	bl	19894 <hlp_setObjectCount>
   1a500:	4604      	mov	r4, r0
   1a502:	2800      	cmp	r0, #0
   1a504:	f47f aef6 	bne.w	1a2f4 <var_getBytes3+0x3a>
            ret = bb_set(ba, data->bitArr->data, ba_getByteCount(data->bitArr->size));
   1a508:	68ab      	ldr	r3, [r5, #8]
   1a50a:	88d8      	ldrh	r0, [r3, #6]
   1a50c:	681c      	ldr	r4, [r3, #0]
   1a50e:	f7e6 fee1 	bl	12d4 <ba_getByteCount>
   1a512:	4621      	mov	r1, r4
   1a514:	4602      	mov	r2, r0
   1a516:	e7b7      	b.n	1a488 <var_getBytes3+0x1ce>
                if ((ret = va_getByIndex(data->Arr, pos, &tmp)) != DLMS_ERROR_CODE_OK ||
   1a518:	2400      	movs	r4, #0
   1a51a:	e6eb      	b.n	1a2f4 <var_getBytes3+0x3a>

0001a51c <var_getBytes2>:
    return var_getBytes3(data, type, ba, 1);
   1a51c:	2301      	movs	r3, #1
   1a51e:	f7ff becc 	b.w	1a2ba <var_getBytes3>

0001a522 <var_getBytes>:
{
   1a522:	460a      	mov	r2, r1
    return var_getBytes2(data, data->vt, ba);
   1a524:	7801      	ldrb	r1, [r0, #0]
   1a526:	f7ff bff9 	b.w	1a51c <var_getBytes2>

0001a52a <var_setDateTime>:

#ifndef DLMS_IGNORE_MALLOC
int var_setDateTime(dlmsVARIANT* target, gxtime* value)
{
   1a52a:	b570      	push	{r4, r5, r6, lr}
   1a52c:	4605      	mov	r5, r0
   1a52e:	460e      	mov	r6, r1
    int ret;
    if ((ret = var_clear(target)) == DLMS_ERROR_CODE_OK)
   1a530:	f7ff fe39 	bl	1a1a6 <var_clear>
   1a534:	4604      	mov	r4, r0
   1a536:	b940      	cbnz	r0, 1a54a <var_setDateTime+0x20>
    {
        target->dateTime = (gxtime*)gxmalloc(sizeof(gxtime));
   1a538:	200c      	movs	r0, #12
   1a53a:	f7f1 fb3b 	bl	bbb4 <malloc>
        time_copy(target->dateTime, value);
   1a53e:	4631      	mov	r1, r6
        target->dateTime = (gxtime*)gxmalloc(sizeof(gxtime));
   1a540:	60a8      	str	r0, [r5, #8]
        time_copy(target->dateTime, value);
   1a542:	f7f3 fc4d 	bl	dde0 <time_copy>
        target->vt = DLMS_DATA_TYPE_DATETIME;
   1a546:	2319      	movs	r3, #25
   1a548:	702b      	strb	r3, [r5, #0]
    }
    return ret;
}
   1a54a:	4620      	mov	r0, r4
   1a54c:	bd70      	pop	{r4, r5, r6, pc}

0001a54e <var_setDate>:

int var_setDate(dlmsVARIANT* target, gxtime* value)
{
   1a54e:	b570      	push	{r4, r5, r6, lr}
   1a550:	4605      	mov	r5, r0
   1a552:	460e      	mov	r6, r1
    int ret;
    if ((ret = var_clear(target)) == DLMS_ERROR_CODE_OK)
   1a554:	f7ff fe27 	bl	1a1a6 <var_clear>
   1a558:	4604      	mov	r4, r0
   1a55a:	b940      	cbnz	r0, 1a56e <var_setDate+0x20>
    {
        target->dateTime = (gxtime*)gxmalloc(sizeof(gxtime));
   1a55c:	200c      	movs	r0, #12
   1a55e:	f7f1 fb29 	bl	bbb4 <malloc>
        time_copy(target->dateTime, value);
   1a562:	4631      	mov	r1, r6
        target->dateTime = (gxtime*)gxmalloc(sizeof(gxtime));
   1a564:	60a8      	str	r0, [r5, #8]
        time_copy(target->dateTime, value);
   1a566:	f7f3 fc3b 	bl	dde0 <time_copy>
        target->vt = DLMS_DATA_TYPE_DATE;
   1a56a:	231a      	movs	r3, #26
   1a56c:	702b      	strb	r3, [r5, #0]
    }
    return ret;
}
   1a56e:	4620      	mov	r0, r4
   1a570:	bd70      	pop	{r4, r5, r6, pc}

0001a572 <var_setTime>:

int var_setTime(dlmsVARIANT* target, gxtime* value)
{
   1a572:	b570      	push	{r4, r5, r6, lr}
   1a574:	4605      	mov	r5, r0
   1a576:	460e      	mov	r6, r1
    int ret;
    if ((ret = var_clear(target)) == DLMS_ERROR_CODE_OK)
   1a578:	f7ff fe15 	bl	1a1a6 <var_clear>
   1a57c:	4604      	mov	r4, r0
   1a57e:	b940      	cbnz	r0, 1a592 <var_setTime+0x20>
    {
        target->dateTime = (gxtime*)gxmalloc(sizeof(gxtime));
   1a580:	200c      	movs	r0, #12
   1a582:	f7f1 fb17 	bl	bbb4 <malloc>
        time_copy(target->dateTime, value);
   1a586:	4631      	mov	r1, r6
        target->dateTime = (gxtime*)gxmalloc(sizeof(gxtime));
   1a588:	60a8      	str	r0, [r5, #8]
        time_copy(target->dateTime, value);
   1a58a:	f7f3 fc29 	bl	dde0 <time_copy>
        target->vt = DLMS_DATA_TYPE_TIME;
   1a58e:	231b      	movs	r3, #27
   1a590:	702b      	strb	r3, [r5, #0]
    }
    return ret;
}
   1a592:	4620      	mov	r0, r4
   1a594:	bd70      	pop	{r4, r5, r6, pc}

0001a596 <var_toInteger>:
{
   1a596:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if ((data->vt & DLMS_DATA_TYPE_BYREF) != 0)
   1a598:	f990 2000 	ldrsb.w	r2, [r0]
   1a59c:	7803      	ldrb	r3, [r0, #0]
   1a59e:	2a00      	cmp	r2, #0
   1a5a0:	da0d      	bge.n	1a5be <var_toInteger+0x28>
        if ((ret = var_copy(&tmp, data)) == 0)
   1a5a2:	4601      	mov	r1, r0
   1a5a4:	4668      	mov	r0, sp
   1a5a6:	f7e9 fea9 	bl	42fc <var_copy>
   1a5aa:	b928      	cbnz	r0, 1a5b8 <var_toInteger+0x22>
            ret = var_toInteger(&tmp);
   1a5ac:	4668      	mov	r0, sp
   1a5ae:	f7ff fff2 	bl	1a596 <var_toInteger>
}
   1a5b2:	b005      	add	sp, #20
   1a5b4:	f85d fb04 	ldr.w	pc, [sp], #4
            ret = -1;
   1a5b8:	f04f 30ff 	mov.w	r0, #4294967295
        return ret;
   1a5bc:	e7f9      	b.n	1a5b2 <var_toInteger+0x1c>
    switch (data->vt)
   1a5be:	3b03      	subs	r3, #3
   1a5c0:	2b15      	cmp	r3, #21
   1a5c2:	d830      	bhi.n	1a626 <var_toInteger+0x90>
   1a5c4:	e8df f003 	tbb	[pc, r3]
   1a5c8:	1a1a290b 	.word	0x1a1a290b
   1a5cc:	252f2f2f 	.word	0x252f2f2f
   1a5d0:	2f2f2f2f 	.word	0x2f2f2f2f
   1a5d4:	18161310 	.word	0x18161310
   1a5d8:	161a1a2f 	.word	0x161a1a2f
   1a5dc:	201c      	.short	0x201c
        ret = data->boolVal ? 1 : 0;
   1a5de:	7a00      	ldrb	r0, [r0, #8]
   1a5e0:	3800      	subs	r0, #0
   1a5e2:	bf18      	it	ne
   1a5e4:	2001      	movne	r0, #1
        break;
   1a5e6:	e7e4      	b.n	1a5b2 <var_toInteger+0x1c>
        ret = data->cVal;
   1a5e8:	f990 0008 	ldrsb.w	r0, [r0, #8]
        break;
   1a5ec:	e7e1      	b.n	1a5b2 <var_toInteger+0x1c>
        ret = data->iVal;
   1a5ee:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
        break;
   1a5f2:	e7de      	b.n	1a5b2 <var_toInteger+0x1c>
        ret = data->bVal;
   1a5f4:	7a00      	ldrb	r0, [r0, #8]
        break;
   1a5f6:	e7dc      	b.n	1a5b2 <var_toInteger+0x1c>
        ret = data->uiVal;
   1a5f8:	8900      	ldrh	r0, [r0, #8]
        break;
   1a5fa:	e7da      	b.n	1a5b2 <var_toInteger+0x1c>
        ret = (int)data->ullVal;
   1a5fc:	6880      	ldr	r0, [r0, #8]
        break;
   1a5fe:	e7d8      	b.n	1a5b2 <var_toInteger+0x1c>
        ret = (int)data->fltVal;
   1a600:	6880      	ldr	r0, [r0, #8]
   1a602:	f7e6 f9e3 	bl	9cc <__aeabi_f2iz>
        break;
   1a606:	e7d4      	b.n	1a5b2 <var_toInteger+0x1c>
        ret = (int)data->dblVal;
   1a608:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
   1a60c:	f7e6 f996 	bl	93c <__aeabi_d2iz>
        break;
   1a610:	e7cf      	b.n	1a5b2 <var_toInteger+0x1c>
        ret = hlp_stringToInt((const char*)data->strVal);
   1a612:	6880      	ldr	r0, [r0, #8]
   1a614:	f7ff fa0d 	bl	19a32 <hlp_stringToInt>
        break;
   1a618:	e7cb      	b.n	1a5b2 <var_toInteger+0x1c>
        ba_toInteger(data->bitArr, &value);
   1a61a:	6880      	ldr	r0, [r0, #8]
   1a61c:	4669      	mov	r1, sp
   1a61e:	f7f2 fa95 	bl	cb4c <ba_toInteger>
        ret = (int)value;
   1a622:	9800      	ldr	r0, [sp, #0]
    break;
   1a624:	e7c5      	b.n	1a5b2 <var_toInteger+0x1c>
    if ((data->vt & DLMS_DATA_TYPE_BYREF) != 0)
   1a626:	2000      	movs	r0, #0
   1a628:	e7c3      	b.n	1a5b2 <var_toInteger+0x1c>

0001a62a <var_toString>:
{
   1a62a:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (item->vt == DLMS_DATA_TYPE_ARRAY || item->vt == DLMS_DATA_TYPE_STRUCTURE)
   1a62c:	7803      	ldrb	r3, [r0, #0]
   1a62e:	1e5a      	subs	r2, r3, #1
   1a630:	2a01      	cmp	r2, #1
{
   1a632:	b085      	sub	sp, #20
   1a634:	4606      	mov	r6, r0
   1a636:	460d      	mov	r5, r1
    if (item->vt == DLMS_DATA_TYPE_ARRAY || item->vt == DLMS_DATA_TYPE_STRUCTURE)
   1a638:	d831      	bhi.n	1a69e <var_toString+0x74>
        bb_setInt8(value, item->vt == DLMS_DATA_TYPE_ARRAY ? '{' : '[');
   1a63a:	2b01      	cmp	r3, #1
   1a63c:	bf0c      	ite	eq
   1a63e:	217b      	moveq	r1, #123	; 0x7b
   1a640:	215b      	movne	r1, #91	; 0x5b
   1a642:	4628      	mov	r0, r5
   1a644:	f7f2 fc14 	bl	ce70 <bb_setInt8>
   1a648:	2700      	movs	r7, #0
        for (pos = 0; pos != item->Arr->size; ++pos)
   1a64a:	68b2      	ldr	r2, [r6, #8]
   1a64c:	88d2      	ldrh	r2, [r2, #6]
   1a64e:	b2bb      	uxth	r3, r7
   1a650:	429a      	cmp	r2, r3
   1a652:	d101      	bne.n	1a658 <var_toString+0x2e>
   1a654:	2400      	movs	r4, #0
   1a656:	e017      	b.n	1a688 <var_toString+0x5e>
            if (pos != 0)
   1a658:	b13b      	cbz	r3, 1a66a <var_toString+0x40>
                bb_setInt8(value, ',');
   1a65a:	212c      	movs	r1, #44	; 0x2c
   1a65c:	4628      	mov	r0, r5
   1a65e:	f7f2 fc07 	bl	ce70 <bb_setInt8>
                bb_setInt8(value, ' ');
   1a662:	2120      	movs	r1, #32
   1a664:	4628      	mov	r0, r5
   1a666:	f7f2 fc03 	bl	ce70 <bb_setInt8>
            if ((ret = va_getByIndex(item->Arr, pos, &it)) != 0 ||
   1a66a:	68b0      	ldr	r0, [r6, #8]
   1a66c:	466a      	mov	r2, sp
   1a66e:	b2b9      	uxth	r1, r7
   1a670:	f7ff fe17 	bl	1a2a2 <va_getByIndex>
   1a674:	4604      	mov	r4, r0
   1a676:	b938      	cbnz	r0, 1a688 <var_toString+0x5e>
                (ret = var_toString(it, value)) != 0)
   1a678:	9800      	ldr	r0, [sp, #0]
   1a67a:	4629      	mov	r1, r5
   1a67c:	f7ff ffd5 	bl	1a62a <var_toString>
   1a680:	3701      	adds	r7, #1
            if ((ret = va_getByIndex(item->Arr, pos, &it)) != 0 ||
   1a682:	4604      	mov	r4, r0
   1a684:	2800      	cmp	r0, #0
   1a686:	d0e0      	beq.n	1a64a <var_toString+0x20>
        bb_setInt8(value, item->vt == DLMS_DATA_TYPE_ARRAY ? '}' : ']');
   1a688:	7833      	ldrb	r3, [r6, #0]
   1a68a:	2b01      	cmp	r3, #1
   1a68c:	bf0c      	ite	eq
   1a68e:	217d      	moveq	r1, #125	; 0x7d
   1a690:	215d      	movne	r1, #93	; 0x5d
   1a692:	4628      	mov	r0, r5
   1a694:	f7f2 fbec 	bl	ce70 <bb_setInt8>
}
   1a698:	4620      	mov	r0, r4
   1a69a:	b005      	add	sp, #20
   1a69c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    data->vt = DLMS_DATA_TYPE_NONE;
   1a69e:	2300      	movs	r3, #0
        ret = var_copy(&tmp, item);
   1a6a0:	4601      	mov	r1, r0
   1a6a2:	4668      	mov	r0, sp
    data->vt = DLMS_DATA_TYPE_NONE;
   1a6a4:	f88d 3000 	strb.w	r3, [sp]
    data->byteArr = NULL;
   1a6a8:	9302      	str	r3, [sp, #8]
        ret = var_copy(&tmp, item);
   1a6aa:	f7e9 fe27 	bl	42fc <var_copy>
        if (ret == 0)
   1a6ae:	4604      	mov	r4, r0
   1a6b0:	b960      	cbnz	r0, 1a6cc <var_toString+0xa2>
            ret = var_changeType(&tmp, DLMS_DATA_TYPE_STRING);
   1a6b2:	210a      	movs	r1, #10
   1a6b4:	4668      	mov	r0, sp
   1a6b6:	f7ea f8d3 	bl	4860 <var_changeType>
            if (ret == 0 && tmp.strVal != NULL)
   1a6ba:	4604      	mov	r4, r0
   1a6bc:	b930      	cbnz	r0, 1a6cc <var_toString+0xa2>
   1a6be:	9b02      	ldr	r3, [sp, #8]
   1a6c0:	b123      	cbz	r3, 1a6cc <var_toString+0xa2>
                bb_set(value, tmp.strVal->data, tmp.strVal->size);
   1a6c2:	88da      	ldrh	r2, [r3, #6]
   1a6c4:	6819      	ldr	r1, [r3, #0]
   1a6c6:	4628      	mov	r0, r5
   1a6c8:	f7f2 fbdb 	bl	ce82 <bb_set>
        var_clear(&tmp);
   1a6cc:	4668      	mov	r0, sp
   1a6ce:	f7ff fd6a 	bl	1a1a6 <var_clear>
    return ret;
   1a6d2:	e7e1      	b.n	1a698 <var_toString+0x6e>

0001a6d4 <var_attach>:

#ifndef DLMS_IGNORE_MALLOC
void var_attach(
    dlmsVARIANT* target,
    gxByteBuffer* source)
{
   1a6d4:	b538      	push	{r3, r4, r5, lr}
   1a6d6:	4605      	mov	r5, r0
    target->byteArr = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
   1a6d8:	200c      	movs	r0, #12
{
   1a6da:	460c      	mov	r4, r1
    target->byteArr = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
   1a6dc:	f7f1 fa6a 	bl	bbb4 <malloc>
    target->byteArr->data = source->data;
    target->byteArr->capacity = source->capacity;
    target->byteArr->size = source->size;
    target->byteArr->position = source->position;
   1a6e0:	8923      	ldrh	r3, [r4, #8]
    target->byteArr->data = source->data;
   1a6e2:	6822      	ldr	r2, [r4, #0]
    target->byteArr = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
   1a6e4:	60a8      	str	r0, [r5, #8]
    target->byteArr->position = source->position;
   1a6e6:	8103      	strh	r3, [r0, #8]
    source->data = 0;
   1a6e8:	2300      	movs	r3, #0
    source->size = source->position = source->capacity = 0;
   1a6ea:	8123      	strh	r3, [r4, #8]
    target->byteArr->data = source->data;
   1a6ec:	6002      	str	r2, [r0, #0]
    target->byteArr->capacity = source->capacity;
   1a6ee:	6862      	ldr	r2, [r4, #4]
   1a6f0:	6042      	str	r2, [r0, #4]
    source->size = source->position = source->capacity = 0;
   1a6f2:	e9c4 3300 	strd	r3, r3, [r4]
    target->vt = DLMS_DATA_TYPE_OCTET_STRING;
   1a6f6:	2309      	movs	r3, #9
   1a6f8:	702b      	strb	r3, [r5, #0]
}
   1a6fa:	bd38      	pop	{r3, r4, r5, pc}

0001a6fc <crc16_ccitt>:

	return crc;
}

uint16_t crc16_ccitt(uint16_t seed, const uint8_t *src, size_t len)
{
   1a6fc:	b510      	push	{r4, lr}
   1a6fe:	440a      	add	r2, r1
	for (; len > 0; len--) {
   1a700:	428a      	cmp	r2, r1
   1a702:	d100      	bne.n	1a706 <crc16_ccitt+0xa>
		f = e ^ (e << 4);
		seed = (seed >> 8) ^ ((uint16_t)f << 8) ^ ((uint16_t)f << 3) ^ ((uint16_t)f >> 4);
	}

	return seed;
}
   1a704:	bd10      	pop	{r4, pc}
		e = seed ^ *src++;
   1a706:	f811 3b01 	ldrb.w	r3, [r1], #1
   1a70a:	4043      	eors	r3, r0
		f = e ^ (e << 4);
   1a70c:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
   1a710:	b2db      	uxtb	r3, r3
		seed = (seed >> 8) ^ ((uint16_t)f << 8) ^ ((uint16_t)f << 3) ^ ((uint16_t)f >> 4);
   1a712:	091c      	lsrs	r4, r3, #4
   1a714:	ea84 2010 	eor.w	r0, r4, r0, lsr #8
   1a718:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   1a71c:	ea80 00c3 	eor.w	r0, r0, r3, lsl #3
	for (; len > 0; len--) {
   1a720:	e7ee      	b.n	1a700 <crc16_ccitt+0x4>

0001a722 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   1a722:	4603      	mov	r3, r0
   1a724:	b158      	cbz	r0, 1a73e <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1a726:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1a728:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   1a72c:	2a01      	cmp	r2, #1
   1a72e:	d003      	beq.n	1a738 <sys_notify_validate+0x16>
   1a730:	2a03      	cmp	r2, #3
   1a732:	d104      	bne.n	1a73e <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
   1a734:	6802      	ldr	r2, [r0, #0]
   1a736:	b112      	cbz	r2, 1a73e <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
   1a738:	2000      	movs	r0, #0
   1a73a:	6098      	str	r0, [r3, #8]
   1a73c:	4770      	bx	lr
		return -EINVAL;
   1a73e:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
   1a742:	4770      	bx	lr

0001a744 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1a744:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   1a746:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
   1a748:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
   1a74c:	2a03      	cmp	r2, #3
   1a74e:	f04f 0200 	mov.w	r2, #0
{
   1a752:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   1a754:	bf0c      	ite	eq
   1a756:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   1a758:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1a75a:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   1a75c:	4770      	bx	lr

0001a75e <arch_printk_char_out>:
}
   1a75e:	2000      	movs	r0, #0
   1a760:	4770      	bx	lr

0001a762 <str_out>:
{
   1a762:	b530      	push	{r4, r5, lr}
   1a764:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1a766:	680c      	ldr	r4, [r1, #0]
   1a768:	1c55      	adds	r5, r2, #1
   1a76a:	b114      	cbz	r4, 1a772 <str_out+0x10>
   1a76c:	684b      	ldr	r3, [r1, #4]
   1a76e:	4293      	cmp	r3, r2
   1a770:	dc01      	bgt.n	1a776 <str_out+0x14>
		ctx->count++;
   1a772:	608d      	str	r5, [r1, #8]
}
   1a774:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   1a776:	3b01      	subs	r3, #1
   1a778:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   1a77a:	bf08      	it	eq
   1a77c:	2200      	moveq	r2, #0
   1a77e:	608d      	str	r5, [r1, #8]
   1a780:	bf0c      	ite	eq
   1a782:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   1a784:	54a0      	strbne	r0, [r4, r2]
   1a786:	e7f5      	b.n	1a774 <str_out+0x12>

0001a788 <printk>:
{
   1a788:	b40f      	push	{r0, r1, r2, r3}
   1a78a:	b507      	push	{r0, r1, r2, lr}
   1a78c:	a904      	add	r1, sp, #16
   1a78e:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1a792:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   1a794:	f7ea f930 	bl	49f8 <vprintk>
}
   1a798:	b003      	add	sp, #12
   1a79a:	f85d eb04 	ldr.w	lr, [sp], #4
   1a79e:	b004      	add	sp, #16
   1a7a0:	4770      	bx	lr

0001a7a2 <snprintk>:
{
   1a7a2:	b40c      	push	{r2, r3}
   1a7a4:	b507      	push	{r0, r1, r2, lr}
   1a7a6:	ab04      	add	r3, sp, #16
   1a7a8:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1a7ac:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1a7ae:	f7ea f931 	bl	4a14 <vsnprintk>
}
   1a7b2:	b003      	add	sp, #12
   1a7b4:	f85d eb04 	ldr.w	lr, [sp], #4
   1a7b8:	b002      	add	sp, #8
   1a7ba:	4770      	bx	lr

0001a7bc <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1a7bc:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   1a7be:	f013 0307 	ands.w	r3, r3, #7
   1a7c2:	d105      	bne.n	1a7d0 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   1a7c4:	6803      	ldr	r3, [r0, #0]
   1a7c6:	2b00      	cmp	r3, #0
		evt = EVT_START;
   1a7c8:	bf0c      	ite	eq
   1a7ca:	2000      	moveq	r0, #0
   1a7cc:	2003      	movne	r0, #3
   1a7ce:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1a7d0:	2b02      	cmp	r3, #2
   1a7d2:	d105      	bne.n	1a7e0 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   1a7d4:	8b43      	ldrh	r3, [r0, #26]
   1a7d6:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   1a7d8:	bf14      	ite	ne
   1a7da:	2000      	movne	r0, #0
   1a7dc:	2004      	moveq	r0, #4
   1a7de:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   1a7e0:	2b01      	cmp	r3, #1
   1a7e2:	d105      	bne.n	1a7f0 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   1a7e4:	6803      	ldr	r3, [r0, #0]
   1a7e6:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   1a7e8:	bf0c      	ite	eq
   1a7ea:	2000      	moveq	r0, #0
   1a7ec:	2005      	movne	r0, #5
   1a7ee:	4770      	bx	lr
	int evt = EVT_NOP;
   1a7f0:	2000      	movs	r0, #0
}
   1a7f2:	4770      	bx	lr

0001a7f4 <notify_one>:
{
   1a7f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a7f8:	460d      	mov	r5, r1
   1a7fa:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1a7fc:	4619      	mov	r1, r3
   1a7fe:	1d28      	adds	r0, r5, #4
{
   1a800:	4690      	mov	r8, r2
   1a802:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1a804:	f7ff ff9e 	bl	1a744 <sys_notify_finalize>
	if (cb) {
   1a808:	4604      	mov	r4, r0
   1a80a:	b138      	cbz	r0, 1a81c <notify_one+0x28>
		cb(mgr, cli, state, res);
   1a80c:	4633      	mov	r3, r6
   1a80e:	4642      	mov	r2, r8
   1a810:	4629      	mov	r1, r5
   1a812:	4638      	mov	r0, r7
   1a814:	46a4      	mov	ip, r4
}
   1a816:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   1a81a:	4760      	bx	ip
}
   1a81c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001a820 <transition_complete>:
{
   1a820:	b410      	push	{r4}
	__asm__ volatile(
   1a822:	f04f 0420 	mov.w	r4, #32
   1a826:	f3ef 8211 	mrs	r2, BASEPRI
   1a82a:	f384 8811 	msr	BASEPRI, r4
   1a82e:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   1a832:	6141      	str	r1, [r0, #20]
}
   1a834:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   1a836:	2101      	movs	r1, #1
   1a838:	f7ea b900 	b.w	4a3c <process_event>

0001a83c <validate_args>:
{
   1a83c:	b510      	push	{r4, lr}
   1a83e:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1a840:	b140      	cbz	r0, 1a854 <validate_args+0x18>
   1a842:	b139      	cbz	r1, 1a854 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   1a844:	1d08      	adds	r0, r1, #4
   1a846:	f7ff ff6c 	bl	1a722 <sys_notify_validate>
	if ((rv == 0)
   1a84a:	b928      	cbnz	r0, 1a858 <validate_args+0x1c>
	    && ((cli->notify.flags
   1a84c:	68a3      	ldr	r3, [r4, #8]
   1a84e:	f033 0303 	bics.w	r3, r3, #3
   1a852:	d001      	beq.n	1a858 <validate_args+0x1c>
		rv = -EINVAL;
   1a854:	f06f 0015 	mvn.w	r0, #21
}
   1a858:	bd10      	pop	{r4, pc}

0001a85a <onoff_manager_init>:
{
   1a85a:	b538      	push	{r3, r4, r5, lr}
   1a85c:	460c      	mov	r4, r1
	if ((mgr == NULL)
   1a85e:	4605      	mov	r5, r0
   1a860:	b158      	cbz	r0, 1a87a <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1a862:	b151      	cbz	r1, 1a87a <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1a864:	680b      	ldr	r3, [r1, #0]
   1a866:	b143      	cbz	r3, 1a87a <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   1a868:	684b      	ldr	r3, [r1, #4]
   1a86a:	b133      	cbz	r3, 1a87a <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1a86c:	221c      	movs	r2, #28
   1a86e:	2100      	movs	r1, #0
   1a870:	f001 fc71 	bl	1c156 <memset>
   1a874:	612c      	str	r4, [r5, #16]
	return 0;
   1a876:	2000      	movs	r0, #0
}
   1a878:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1a87a:	f06f 0015 	mvn.w	r0, #21
   1a87e:	e7fb      	b.n	1a878 <onoff_manager_init+0x1e>

0001a880 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   1a880:	b570      	push	{r4, r5, r6, lr}
   1a882:	4604      	mov	r4, r0
   1a884:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   1a886:	f7ff ffd9 	bl	1a83c <validate_args>

	if (rv < 0) {
   1a88a:	1e05      	subs	r5, r0, #0
   1a88c:	db31      	blt.n	1a8f2 <onoff_request+0x72>
   1a88e:	f04f 0320 	mov.w	r3, #32
   1a892:	f3ef 8111 	mrs	r1, BASEPRI
   1a896:	f383 8811 	msr	BASEPRI, r3
   1a89a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1a89e:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1a8a0:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   1a8a2:	f64f 75ff 	movw	r5, #65535	; 0xffff
   1a8a6:	42ab      	cmp	r3, r5
   1a8a8:	f000 0207 	and.w	r2, r0, #7
   1a8ac:	d02e      	beq.n	1a90c <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   1a8ae:	2a02      	cmp	r2, #2
   1a8b0:	d10e      	bne.n	1a8d0 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   1a8b2:	3301      	adds	r3, #1
   1a8b4:	8363      	strh	r3, [r4, #26]
	rv = state;
   1a8b6:	4615      	mov	r5, r2
		notify = true;
   1a8b8:	2301      	movs	r3, #1
	__asm__ volatile(
   1a8ba:	f381 8811 	msr	BASEPRI, r1
   1a8be:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   1a8c2:	b1b3      	cbz	r3, 1a8f2 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   1a8c4:	2300      	movs	r3, #0
   1a8c6:	4631      	mov	r1, r6
   1a8c8:	4620      	mov	r0, r4
   1a8ca:	f7ff ff93 	bl	1a7f4 <notify_one>
   1a8ce:	e010      	b.n	1a8f2 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   1a8d0:	0783      	lsls	r3, r0, #30
   1a8d2:	d001      	beq.n	1a8d8 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   1a8d4:	2a06      	cmp	r2, #6
   1a8d6:	d10e      	bne.n	1a8f6 <onoff_request+0x76>
	parent->next = child;
   1a8d8:	2300      	movs	r3, #0
   1a8da:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
   1a8dc:	6863      	ldr	r3, [r4, #4]
   1a8de:	b993      	cbnz	r3, 1a906 <onoff_request+0x86>
	list->head = node;
   1a8e0:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   1a8e4:	4615      	mov	r5, r2
   1a8e6:	b962      	cbnz	r2, 1a902 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   1a8e8:	460a      	mov	r2, r1
   1a8ea:	4620      	mov	r0, r4
   1a8ec:	2102      	movs	r1, #2
   1a8ee:	f7ea f8a5 	bl	4a3c <process_event>
		}
	}

	return rv;
}
   1a8f2:	4628      	mov	r0, r5
   1a8f4:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   1a8f6:	2a05      	cmp	r2, #5
   1a8f8:	bf0c      	ite	eq
   1a8fa:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   1a8fe:	f06f 0504 	mvnne.w	r5, #4
   1a902:	2300      	movs	r3, #0
   1a904:	e7d9      	b.n	1a8ba <onoff_request+0x3a>
	parent->next = child;
   1a906:	601e      	str	r6, [r3, #0]
	list->tail = node;
   1a908:	6066      	str	r6, [r4, #4]
}
   1a90a:	e7eb      	b.n	1a8e4 <onoff_request+0x64>
		rv = -EAGAIN;
   1a90c:	f06f 050a 	mvn.w	r5, #10
   1a910:	e7f7      	b.n	1a902 <onoff_request+0x82>

0001a912 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1a912:	4604      	mov	r4, r0
   1a914:	b508      	push	{r3, lr}
   1a916:	4608      	mov	r0, r1
   1a918:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   1a91a:	461a      	mov	r2, r3
   1a91c:	47a0      	blx	r4
	return z_impl_k_current_get();
   1a91e:	f7f0 fcaf 	bl	b280 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   1a922:	f7ec fb9f 	bl	7064 <z_impl_k_thread_abort>

0001a926 <chunk_field>:
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   1a926:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   1a928:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1a92c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   1a930:	bf2c      	ite	cs
   1a932:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
   1a936:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   1a93a:	4770      	bx	lr

0001a93c <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   1a93c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
   1a940:	6880      	ldr	r0, [r0, #8]
   1a942:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   1a946:	bf2c      	ite	cs
   1a948:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   1a94c:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   1a950:	4770      	bx	lr

0001a952 <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
   1a952:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1a954:	2201      	movs	r2, #1
   1a956:	f7ff ffe6 	bl	1a926 <chunk_field>
}
   1a95a:	0840      	lsrs	r0, r0, #1
   1a95c:	bd08      	pop	{r3, pc}

0001a95e <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   1a95e:	6883      	ldr	r3, [r0, #8]
   1a960:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
   1a964:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1a968:	d308      	bcc.n	1a97c <set_chunk_used+0x1e>
		if (used) {
   1a96a:	684b      	ldr	r3, [r1, #4]
   1a96c:	b11a      	cbz	r2, 1a976 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   1a96e:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1a972:	604b      	str	r3, [r1, #4]
   1a974:	4770      	bx	lr
   1a976:	f023 0301 	bic.w	r3, r3, #1
   1a97a:	e7fa      	b.n	1a972 <set_chunk_used+0x14>
		}
	} else {
		if (used) {
   1a97c:	884b      	ldrh	r3, [r1, #2]
   1a97e:	b11a      	cbz	r2, 1a988 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1a980:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1a984:	804b      	strh	r3, [r1, #2]
		}
	}
}
   1a986:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1a988:	f023 0301 	bic.w	r3, r3, #1
   1a98c:	e7fa      	b.n	1a984 <set_chunk_used+0x26>

0001a98e <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1a98e:	0053      	lsls	r3, r2, #1
   1a990:	2201      	movs	r2, #1
   1a992:	f7ff bfd3 	b.w	1a93c <chunk_set>

0001a996 <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   1a996:	6880      	ldr	r0, [r0, #8]
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   1a998:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1a99a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   1a99e:	bf2c      	ite	cs
   1a9a0:	2002      	movcs	r0, #2
   1a9a2:	2001      	movcc	r0, #1
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   1a9a4:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
   1a9a6:	fab0 f080 	clz	r0, r0
}
   1a9aa:	f1c0 001f 	rsb	r0, r0, #31
   1a9ae:	4770      	bx	lr

0001a9b0 <free_list_add>:
		set_prev_free_chunk(h, second, c);
	}
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   1a9b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a9b4:	4604      	mov	r4, r0
   1a9b6:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   1a9b8:	f7ff ffcb 	bl	1a952 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   1a9bc:	68a3      	ldr	r3, [r4, #8]
   1a9be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1a9c2:	4601      	mov	r1, r0
   1a9c4:	d301      	bcc.n	1a9ca <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   1a9c6:	2801      	cmp	r0, #1
   1a9c8:	d035      	beq.n	1aa36 <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1a9ca:	4620      	mov	r0, r4
   1a9cc:	f7ff ffe3 	bl	1a996 <bucket_idx>
	if (b->next == 0U) {
   1a9d0:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   1a9d4:	6916      	ldr	r6, [r2, #16]
   1a9d6:	b99e      	cbnz	r6, 1aa00 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   1a9d8:	2301      	movs	r3, #1
   1a9da:	fa03 f000 	lsl.w	r0, r3, r0
   1a9de:	68e3      	ldr	r3, [r4, #12]
   1a9e0:	4303      	orrs	r3, r0
   1a9e2:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   1a9e4:	4629      	mov	r1, r5
		b->next = c;
   1a9e6:	6115      	str	r5, [r2, #16]
   1a9e8:	462b      	mov	r3, r5
   1a9ea:	2202      	movs	r2, #2
   1a9ec:	4620      	mov	r0, r4
   1a9ee:	f7ff ffa5 	bl	1a93c <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1a9f2:	2203      	movs	r2, #3
   1a9f4:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   1a9f6:	4620      	mov	r0, r4
		free_list_add_bidx(h, c, bidx);
	}
}
   1a9f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1a9fc:	f7ff bf9e 	b.w	1a93c <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   1aa00:	2202      	movs	r2, #2
   1aa02:	4631      	mov	r1, r6
   1aa04:	4620      	mov	r0, r4
   1aa06:	f7ff ff8e 	bl	1a926 <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
   1aa0a:	2202      	movs	r2, #2
   1aa0c:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
   1aa0e:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   1aa10:	4629      	mov	r1, r5
   1aa12:	4620      	mov	r0, r4
   1aa14:	f7ff ff92 	bl	1a93c <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1aa18:	4633      	mov	r3, r6
   1aa1a:	2203      	movs	r2, #3
   1aa1c:	4629      	mov	r1, r5
   1aa1e:	4620      	mov	r0, r4
   1aa20:	f7ff ff8c 	bl	1a93c <chunk_set>
   1aa24:	2203      	movs	r2, #3
   1aa26:	4639      	mov	r1, r7
   1aa28:	462b      	mov	r3, r5
   1aa2a:	4620      	mov	r0, r4
   1aa2c:	f7ff ff86 	bl	1a93c <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1aa30:	2202      	movs	r2, #2
   1aa32:	4631      	mov	r1, r6
   1aa34:	e7df      	b.n	1a9f6 <free_list_add+0x46>
   1aa36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001aa3a <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
   1aa3a:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   1aa3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1aa40:	bf2c      	ite	cs
   1aa42:	2508      	movcs	r5, #8
   1aa44:	2504      	movcc	r5, #4
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   1aa46:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1aa48:	1dcc      	adds	r4, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1aa4a:	440d      	add	r5, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1aa4c:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1aa50:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   1aa54:	1b2d      	subs	r5, r5, r4
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   1aa56:	2300      	movs	r3, #0
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   1aa58:	08ed      	lsrs	r5, r5, #3
	heap->heap = h;
   1aa5a:	6004      	str	r4, [r0, #0]

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1aa5c:	4629      	mov	r1, r5
	h->end_chunk = heap_sz;
   1aa5e:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
   1aa60:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1aa62:	4620      	mov	r0, r4
   1aa64:	f7ff ff97 	bl	1a996 <bucket_idx>
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1aa68:	0086      	lsls	r6, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1aa6a:	361b      	adds	r6, #27
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1aa6c:	1c41      	adds	r1, r0, #1
   1aa6e:	08f6      	lsrs	r6, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   1aa70:	f104 0210 	add.w	r2, r4, #16
		h->buckets[i].next = 0;
   1aa74:	4618      	mov	r0, r3
	for (int i = 0; i < nb_buckets; i++) {
   1aa76:	428b      	cmp	r3, r1
   1aa78:	db2f      	blt.n	1aada <sys_heap_init+0xa0>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   1aa7a:	4632      	mov	r2, r6
   1aa7c:	4620      	mov	r0, r4
   1aa7e:	2100      	movs	r1, #0
   1aa80:	f7ff ff85 	bl	1a98e <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1aa84:	2300      	movs	r3, #0
   1aa86:	461a      	mov	r2, r3
   1aa88:	4619      	mov	r1, r3
   1aa8a:	4620      	mov	r0, r4
   1aa8c:	f7ff ff56 	bl	1a93c <chunk_set>
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1aa90:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
   1aa92:	4620      	mov	r0, r4
   1aa94:	2201      	movs	r2, #1
   1aa96:	2100      	movs	r1, #0
   1aa98:	f7ff ff61 	bl	1a95e <set_chunk_used>
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1aa9c:	463a      	mov	r2, r7
   1aa9e:	4631      	mov	r1, r6
   1aaa0:	f7ff ff75 	bl	1a98e <set_chunk_size>
   1aaa4:	4633      	mov	r3, r6
   1aaa6:	4631      	mov	r1, r6
   1aaa8:	4620      	mov	r0, r4
   1aaaa:	2200      	movs	r2, #0
   1aaac:	f7ff ff46 	bl	1a93c <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
   1aab0:	4629      	mov	r1, r5
   1aab2:	4620      	mov	r0, r4
   1aab4:	2200      	movs	r2, #0
   1aab6:	f7ff ff6a 	bl	1a98e <set_chunk_size>
   1aaba:	463b      	mov	r3, r7
   1aabc:	4629      	mov	r1, r5
   1aabe:	4620      	mov	r0, r4
   1aac0:	2200      	movs	r2, #0
   1aac2:	f7ff ff3b 	bl	1a93c <chunk_set>
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
   1aac6:	4629      	mov	r1, r5
   1aac8:	4620      	mov	r0, r4
   1aaca:	2201      	movs	r2, #1
   1aacc:	f7ff ff47 	bl	1a95e <set_chunk_used>

	free_list_add(h, chunk0_size);
   1aad0:	4631      	mov	r1, r6
}
   1aad2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   1aad6:	f7ff bf6b 	b.w	1a9b0 <free_list_add>
		h->buckets[i].next = 0;
   1aada:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   1aade:	3301      	adds	r3, #1
   1aae0:	e7c9      	b.n	1aa76 <sys_heap_init+0x3c>

0001aae2 <outs>:
{
   1aae2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1aae6:	4607      	mov	r7, r0
   1aae8:	4688      	mov	r8, r1
   1aaea:	4615      	mov	r5, r2
   1aaec:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1aaee:	4614      	mov	r4, r2
   1aaf0:	42b4      	cmp	r4, r6
   1aaf2:	eba4 0005 	sub.w	r0, r4, r5
   1aaf6:	d302      	bcc.n	1aafe <outs+0x1c>
   1aaf8:	b93e      	cbnz	r6, 1ab0a <outs+0x28>
   1aafa:	7823      	ldrb	r3, [r4, #0]
   1aafc:	b12b      	cbz	r3, 1ab0a <outs+0x28>
		int rc = out((int)*sp++, ctx);
   1aafe:	f814 0b01 	ldrb.w	r0, [r4], #1
   1ab02:	4641      	mov	r1, r8
   1ab04:	47b8      	blx	r7
		if (rc < 0) {
   1ab06:	2800      	cmp	r0, #0
   1ab08:	daf2      	bge.n	1aaf0 <outs+0xe>
}
   1ab0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001ab0e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1ab0e:	4770      	bx	lr

0001ab10 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   1ab10:	2300      	movs	r3, #0
	list->head = NULL;
   1ab12:	e9c0 3300 	strd	r3, r3, [r0]
}
   1ab16:	4770      	bx	lr

0001ab18 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   1ab18:	6803      	ldr	r3, [r0, #0]
   1ab1a:	b923      	cbnz	r3, 1ab26 <log_list_add_tail+0xe>
		list->head = msg;
   1ab1c:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   1ab1e:	2300      	movs	r3, #0
	list->tail = msg;
   1ab20:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   1ab22:	600b      	str	r3, [r1, #0]
}
   1ab24:	4770      	bx	lr
		list->tail->next = msg;
   1ab26:	6843      	ldr	r3, [r0, #4]
   1ab28:	6019      	str	r1, [r3, #0]
   1ab2a:	e7f8      	b.n	1ab1e <log_list_add_tail+0x6>

0001ab2c <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   1ab2c:	6800      	ldr	r0, [r0, #0]
   1ab2e:	4770      	bx	lr

0001ab30 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   1ab30:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   1ab32:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   1ab34:	b108      	cbz	r0, 1ab3a <log_list_head_get+0xa>
		list->head = list->head->next;
   1ab36:	6802      	ldr	r2, [r0, #0]
   1ab38:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   1ab3a:	4770      	bx	lr

0001ab3c <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   1ab3c:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1ab3e:	f7ea ff71 	bl	5a24 <log_msg_chunk_alloc>

	if (msg != NULL) {
   1ab42:	b118      	cbz	r0, 1ab4c <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   1ab44:	2301      	movs	r3, #1
   1ab46:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1ab48:	2300      	movs	r3, #0
   1ab4a:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
   1ab4c:	bd08      	pop	{r3, pc}

0001ab4e <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   1ab4e:	f7eb bd81 	b.w	6654 <sys_clock_cycle_get_32>

0001ab52 <dummy_timestamp>:
   1ab52:	2000      	movs	r0, #0
   1ab54:	4770      	bx	lr

0001ab56 <log_0>:
{
   1ab56:	b538      	push	{r3, r4, r5, lr}
   1ab58:	4605      	mov	r5, r0
   1ab5a:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   1ab5c:	f7ff ffee 	bl	1ab3c <z_log_msg_std_alloc>

	if (msg != NULL) {
   1ab60:	b128      	cbz	r0, 1ab6e <log_0+0x18>
		msg->str = str;
   1ab62:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
   1ab64:	4621      	mov	r1, r4
}
   1ab66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   1ab6a:	f7ea be75 	b.w	5858 <msg_finalize>
}
   1ab6e:	bd38      	pop	{r3, r4, r5, pc}

0001ab70 <log_1>:
{
   1ab70:	b570      	push	{r4, r5, r6, lr}
   1ab72:	4606      	mov	r6, r0
   1ab74:	460d      	mov	r5, r1
   1ab76:	4614      	mov	r4, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1ab78:	f7ff ffe0 	bl	1ab3c <z_log_msg_std_alloc>

	if (msg != NULL) {
   1ab7c:	b158      	cbz	r0, 1ab96 <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   1ab7e:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
   1ab80:	6106      	str	r6, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   1ab82:	2101      	movs	r1, #1
   1ab84:	f361 1207 	bfi	r2, r1, #4, #4
   1ab88:	7242      	strb	r2, [r0, #9]
		msg->payload.single.args[0] = arg1;
   1ab8a:	6145      	str	r5, [r0, #20]
		msg_finalize(msg, src_level);
   1ab8c:	4621      	mov	r1, r4
}
   1ab8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   1ab92:	f7ea be61 	b.w	5858 <msg_finalize>
}
   1ab96:	bd70      	pop	{r4, r5, r6, pc}

0001ab98 <log_2>:
{
   1ab98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ab9c:	4680      	mov	r8, r0
   1ab9e:	460f      	mov	r7, r1
   1aba0:	4616      	mov	r6, r2
   1aba2:	461d      	mov	r5, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1aba4:	f7ff ffca 	bl	1ab3c <z_log_msg_std_alloc>

	if (msg != NULL) {
   1aba8:	b168      	cbz	r0, 1abc6 <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   1abaa:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   1abac:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
   1abb0:	2202      	movs	r2, #2
   1abb2:	f362 1307 	bfi	r3, r2, #4, #4
   1abb6:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   1abb8:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg_finalize(msg, src_level);
   1abbc:	4629      	mov	r1, r5
}
   1abbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   1abc2:	f7ea be49 	b.w	5858 <msg_finalize>
}
   1abc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001abca <log_3>:
{
   1abca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1abce:	4680      	mov	r8, r0
   1abd0:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   1abd4:	460f      	mov	r7, r1
   1abd6:	4616      	mov	r6, r2
   1abd8:	461d      	mov	r5, r3
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1abda:	f7ff ffaf 	bl	1ab3c <z_log_msg_std_alloc>

	if (msg != NULL) {
   1abde:	b170      	cbz	r0, 1abfe <log_3+0x34>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   1abe0:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   1abe2:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
   1abe6:	2203      	movs	r2, #3
   1abe8:	f362 1307 	bfi	r3, r2, #4, #4
   1abec:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   1abee:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->payload.single.args[2] = arg3;
   1abf2:	61c5      	str	r5, [r0, #28]
		msg_finalize(msg, src_level);
   1abf4:	4649      	mov	r1, r9
}
   1abf6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   1abfa:	f7ea be2d 	b.w	5858 <msg_finalize>
}
   1abfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001ac02 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   1ac02:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ac06:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
   1ac08:	8903      	ldrh	r3, [r0, #8]
{
   1ac0a:	f89d 7020 	ldrb.w	r7, [sp, #32]
   1ac0e:	460e      	mov	r6, r1
   1ac10:	4611      	mov	r1, r2
	uint32_t available_len = msg->hdr.params.hexdump.length;
   1ac12:	f3c3 028d 	ubfx	r2, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   1ac16:	42a2      	cmp	r2, r4
   1ac18:	d803      	bhi.n	1ac22 <log_msg_hexdump_data_op+0x20>
		*length = 0;
   1ac1a:	2300      	movs	r3, #0
   1ac1c:	600b      	str	r3, [r1, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   1ac1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   1ac22:	680b      	ldr	r3, [r1, #0]
   1ac24:	4423      	add	r3, r4
   1ac26:	4293      	cmp	r3, r2
		*length = available_len - offset;
   1ac28:	bf84      	itt	hi
   1ac2a:	1b13      	subhi	r3, r2, r4
   1ac2c:	600b      	strhi	r3, [r1, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1ac2e:	2a0c      	cmp	r2, #12
	req_len = *length;
   1ac30:	f8d1 9000 	ldr.w	r9, [r1]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1ac34:	d92a      	bls.n	1ac8c <log_msg_hexdump_data_op+0x8a>
	if (offset < chunk_len) {
   1ac36:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   1ac38:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   1ac3c:	d82d      	bhi.n	1ac9a <log_msg_hexdump_data_op+0x98>
		head_data = msg->payload.ext.data.bytes;
   1ac3e:	3018      	adds	r0, #24
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   1ac40:	2208      	movs	r2, #8
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   1ac42:	454a      	cmp	r2, r9
   1ac44:	bf28      	it	cs
   1ac46:	464a      	movcs	r2, r9
   1ac48:	4615      	mov	r5, r2
		if (put_op) {
   1ac4a:	4420      	add	r0, r4
   1ac4c:	b317      	cbz	r7, 1ac94 <log_msg_hexdump_data_op+0x92>
   1ac4e:	4631      	mov	r1, r6
   1ac50:	f001 fa46 	bl	1c0e0 <memcpy>
		req_len -= cpy_len;
   1ac54:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   1ac58:	442e      	add	r6, r5
	while ((req_len > 0) && (cont != NULL)) {
   1ac5a:	f1b9 0f00 	cmp.w	r9, #0
   1ac5e:	d0de      	beq.n	1ac1e <log_msg_hexdump_data_op+0x1c>
   1ac60:	f1b8 0f00 	cmp.w	r8, #0
   1ac64:	d0db      	beq.n	1ac1e <log_msg_hexdump_data_op+0x1c>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   1ac66:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   1ac6a:	454d      	cmp	r5, r9
   1ac6c:	bf28      	it	cs
   1ac6e:	464d      	movcs	r5, r9
		if (put_op) {
   1ac70:	1d20      	adds	r0, r4, #4
   1ac72:	4440      	add	r0, r8
   1ac74:	462a      	mov	r2, r5
   1ac76:	b1bf      	cbz	r7, 1aca8 <log_msg_hexdump_data_op+0xa6>
   1ac78:	4631      	mov	r1, r6
   1ac7a:	f001 fa31 	bl	1c0e0 <memcpy>
		req_len -= cpy_len;
   1ac7e:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
   1ac82:	f8d8 8000 	ldr.w	r8, [r8]
		data += cpy_len;
   1ac86:	442e      	add	r6, r5
		offset = 0;
   1ac88:	2400      	movs	r4, #0
   1ac8a:	e7e6      	b.n	1ac5a <log_msg_hexdump_data_op+0x58>
		head_data = msg->payload.single.bytes;
   1ac8c:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
   1ac8e:	f04f 0800 	mov.w	r8, #0
   1ac92:	e7d6      	b.n	1ac42 <log_msg_hexdump_data_op+0x40>
   1ac94:	4601      	mov	r1, r0
   1ac96:	4630      	mov	r0, r6
   1ac98:	e7da      	b.n	1ac50 <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   1ac9a:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   1ac9c:	2c1b      	cmp	r4, #27
   1ac9e:	d9dc      	bls.n	1ac5a <log_msg_hexdump_data_op+0x58>
			cont = cont->next;
   1aca0:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   1aca4:	3c1c      	subs	r4, #28
   1aca6:	e7f9      	b.n	1ac9c <log_msg_hexdump_data_op+0x9a>
   1aca8:	4601      	mov	r1, r0
   1acaa:	4630      	mov	r0, r6
   1acac:	e7e5      	b.n	1ac7a <log_msg_hexdump_data_op+0x78>

0001acae <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1acae:	3004      	adds	r0, #4
   1acb0:	f3bf 8f5b 	dmb	ish
   1acb4:	e850 3f00 	ldrex	r3, [r0]
   1acb8:	3301      	adds	r3, #1
   1acba:	e840 3200 	strex	r2, r3, [r0]
   1acbe:	2a00      	cmp	r2, #0
   1acc0:	d1f8      	bne.n	1acb4 <log_msg_get+0x6>
   1acc2:	f3bf 8f5b 	dmb	ish
}
   1acc6:	4770      	bx	lr

0001acc8 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   1acc8:	7a40      	ldrb	r0, [r0, #9]
}
   1acca:	0900      	lsrs	r0, r0, #4
   1accc:	4770      	bx	lr

0001acce <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   1acce:	7a43      	ldrb	r3, [r0, #9]
   1acd0:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   1acd4:	ea4f 1213 	mov.w	r2, r3, lsr #4
   1acd8:	d216      	bcs.n	1ad08 <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1acda:	2a03      	cmp	r2, #3
   1acdc:	d803      	bhi.n	1ace6 <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   1acde:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1ace2:	6948      	ldr	r0, [r1, #20]
   1ace4:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   1ace6:	2901      	cmp	r1, #1
   1ace8:	d803      	bhi.n	1acf2 <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   1acea:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1acee:	6988      	ldr	r0, [r1, #24]
   1acf0:	4770      	bx	lr
	cont = msg->payload.ext.next;
   1acf2:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   1acf4:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   1acf6:	2906      	cmp	r1, #6
   1acf8:	d803      	bhi.n	1ad02 <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   1acfa:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1acfe:	6848      	ldr	r0, [r1, #4]
   1ad00:	4770      	bx	lr
		cont = cont->next;
   1ad02:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   1ad04:	3907      	subs	r1, #7
		cont = cont->next;
   1ad06:	e7f6      	b.n	1acf6 <log_msg_arg_get+0x28>
		return 0;
   1ad08:	2000      	movs	r0, #0
}
   1ad0a:	4770      	bx	lr

0001ad0c <log_msg_put>:
{
   1ad0c:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1ad0e:	1d02      	adds	r2, r0, #4
   1ad10:	f3bf 8f5b 	dmb	ish
   1ad14:	e852 1f00 	ldrex	r1, [r2]
   1ad18:	3901      	subs	r1, #1
   1ad1a:	e842 1c00 	strex	ip, r1, [r2]
   1ad1e:	f1bc 0f00 	cmp.w	ip, #0
   1ad22:	d1f7      	bne.n	1ad14 <log_msg_put+0x8>
   1ad24:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
   1ad28:	685b      	ldr	r3, [r3, #4]
   1ad2a:	b90b      	cbnz	r3, 1ad30 <log_msg_put+0x24>
		msg_free(msg);
   1ad2c:	f7ea be8e 	b.w	5a4c <msg_free>
}
   1ad30:	4770      	bx	lr

0001ad32 <log_msg_str_get>:
}
   1ad32:	6900      	ldr	r0, [r0, #16]
   1ad34:	4770      	bx	lr

0001ad36 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   1ad36:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   1ad38:	2400      	movs	r4, #0
   1ad3a:	9400      	str	r4, [sp, #0]
   1ad3c:	f7ff ff61 	bl	1ac02 <log_msg_hexdump_data_op>
}
   1ad40:	b002      	add	sp, #8
   1ad42:	bd10      	pop	{r4, pc}

0001ad44 <buffer_write>:
{
   1ad44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ad46:	4606      	mov	r6, r0
   1ad48:	460d      	mov	r5, r1
   1ad4a:	4614      	mov	r4, r2
   1ad4c:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   1ad4e:	4621      	mov	r1, r4
   1ad50:	4628      	mov	r0, r5
   1ad52:	463a      	mov	r2, r7
   1ad54:	47b0      	blx	r6
	} while (len != 0);
   1ad56:	1a24      	subs	r4, r4, r0
		buf += processed;
   1ad58:	4405      	add	r5, r0
	} while (len != 0);
   1ad5a:	d1f8      	bne.n	1ad4e <buffer_write+0xa>
}
   1ad5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001ad5e <std_print>:
{
   1ad5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ad62:	b08e      	sub	sp, #56	; 0x38
   1ad64:	af0e      	add	r7, sp, #56	; 0x38
   1ad66:	4680      	mov	r8, r0
   1ad68:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   1ad6a:	f7ff ffe2 	bl	1ad32 <log_msg_str_get>
   1ad6e:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   1ad70:	4640      	mov	r0, r8
   1ad72:	f7ff ffa9 	bl	1acc8 <log_msg_nargs_get>
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   1ad76:	0083      	lsls	r3, r0, #2
   1ad78:	3307      	adds	r3, #7
   1ad7a:	f023 0307 	bic.w	r3, r3, #7
   1ad7e:	ebad 0d03 	sub.w	sp, sp, r3
	uint32_t nargs = log_msg_nargs_get(msg);
   1ad82:	4682      	mov	sl, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   1ad84:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   1ad86:	f04f 0900 	mov.w	r9, #0
   1ad8a:	45d1      	cmp	r9, sl
   1ad8c:	d116      	bne.n	1adbc <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   1ad8e:	4640      	mov	r0, r8
   1ad90:	f7ff ff9a 	bl	1acc8 <log_msg_nargs_get>
   1ad94:	280f      	cmp	r0, #15
   1ad96:	d81e      	bhi.n	1add6 <std_print+0x78>
   1ad98:	e8df f010 	tbh	[pc, r0, lsl #1]
   1ad9c:	00200019 	.word	0x00200019
   1ada0:	002d0026 	.word	0x002d0026
   1ada4:	00410036 	.word	0x00410036
   1ada8:	005d004e 	.word	0x005d004e
   1adac:	0081006e 	.word	0x0081006e
   1adb0:	00ad0096 	.word	0x00ad0096
   1adb4:	00e100c6 	.word	0x00e100c6
   1adb8:	011d00fe 	.word	0x011d00fe
		args[i] = log_msg_arg_get(msg, i);
   1adbc:	4649      	mov	r1, r9
   1adbe:	4640      	mov	r0, r8
   1adc0:	f7ff ff85 	bl	1acce <log_msg_arg_get>
   1adc4:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
   1adc8:	f109 0901 	add.w	r9, r9, #1
   1adcc:	e7dd      	b.n	1ad8a <std_print+0x2c>
		print_formatted(output, str);
   1adce:	4631      	mov	r1, r6
   1add0:	4628      	mov	r0, r5
   1add2:	f7ea fe79 	bl	5ac8 <print_formatted>
}
   1add6:	46bd      	mov	sp, r7
   1add8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, str, args[0]);
   1addc:	6822      	ldr	r2, [r4, #0]
   1adde:	4631      	mov	r1, r6
   1ade0:	4628      	mov	r0, r5
   1ade2:	f7ea fe71 	bl	5ac8 <print_formatted>
		break;
   1ade6:	e7f6      	b.n	1add6 <std_print+0x78>
		print_formatted(output, str, args[0], args[1]);
   1ade8:	e9d4 2300 	ldrd	r2, r3, [r4]
   1adec:	4631      	mov	r1, r6
   1adee:	4628      	mov	r0, r5
   1adf0:	f7ea fe6a 	bl	5ac8 <print_formatted>
		break;
   1adf4:	e7ef      	b.n	1add6 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2]);
   1adf6:	68a3      	ldr	r3, [r4, #8]
   1adf8:	9300      	str	r3, [sp, #0]
   1adfa:	e9d4 2300 	ldrd	r2, r3, [r4]
   1adfe:	4631      	mov	r1, r6
   1ae00:	4628      	mov	r0, r5
   1ae02:	f7ea fe61 	bl	5ac8 <print_formatted>
		break;
   1ae06:	e7e6      	b.n	1add6 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1ae08:	68e3      	ldr	r3, [r4, #12]
   1ae0a:	9301      	str	r3, [sp, #4]
   1ae0c:	68a3      	ldr	r3, [r4, #8]
   1ae0e:	9300      	str	r3, [sp, #0]
   1ae10:	e9d4 2300 	ldrd	r2, r3, [r4]
   1ae14:	4631      	mov	r1, r6
   1ae16:	4628      	mov	r0, r5
   1ae18:	f7ea fe56 	bl	5ac8 <print_formatted>
		break;
   1ae1c:	e7db      	b.n	1add6 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1ae1e:	6923      	ldr	r3, [r4, #16]
   1ae20:	9302      	str	r3, [sp, #8]
   1ae22:	68e3      	ldr	r3, [r4, #12]
   1ae24:	9301      	str	r3, [sp, #4]
   1ae26:	68a3      	ldr	r3, [r4, #8]
   1ae28:	9300      	str	r3, [sp, #0]
   1ae2a:	e9d4 2300 	ldrd	r2, r3, [r4]
   1ae2e:	4631      	mov	r1, r6
   1ae30:	4628      	mov	r0, r5
   1ae32:	f7ea fe49 	bl	5ac8 <print_formatted>
		break;
   1ae36:	e7ce      	b.n	1add6 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1ae38:	6963      	ldr	r3, [r4, #20]
   1ae3a:	9303      	str	r3, [sp, #12]
   1ae3c:	6923      	ldr	r3, [r4, #16]
   1ae3e:	9302      	str	r3, [sp, #8]
   1ae40:	68e3      	ldr	r3, [r4, #12]
   1ae42:	9301      	str	r3, [sp, #4]
   1ae44:	68a3      	ldr	r3, [r4, #8]
   1ae46:	9300      	str	r3, [sp, #0]
   1ae48:	e9d4 2300 	ldrd	r2, r3, [r4]
   1ae4c:	4631      	mov	r1, r6
   1ae4e:	4628      	mov	r0, r5
   1ae50:	f7ea fe3a 	bl	5ac8 <print_formatted>
		break;
   1ae54:	e7bf      	b.n	1add6 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1ae56:	69a3      	ldr	r3, [r4, #24]
   1ae58:	9304      	str	r3, [sp, #16]
   1ae5a:	6963      	ldr	r3, [r4, #20]
   1ae5c:	9303      	str	r3, [sp, #12]
   1ae5e:	6923      	ldr	r3, [r4, #16]
   1ae60:	9302      	str	r3, [sp, #8]
   1ae62:	68e3      	ldr	r3, [r4, #12]
   1ae64:	9301      	str	r3, [sp, #4]
   1ae66:	68a3      	ldr	r3, [r4, #8]
   1ae68:	9300      	str	r3, [sp, #0]
   1ae6a:	e9d4 2300 	ldrd	r2, r3, [r4]
   1ae6e:	4631      	mov	r1, r6
   1ae70:	4628      	mov	r0, r5
   1ae72:	f7ea fe29 	bl	5ac8 <print_formatted>
		break;
   1ae76:	e7ae      	b.n	1add6 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1ae78:	69e3      	ldr	r3, [r4, #28]
   1ae7a:	9305      	str	r3, [sp, #20]
   1ae7c:	69a3      	ldr	r3, [r4, #24]
   1ae7e:	9304      	str	r3, [sp, #16]
   1ae80:	6963      	ldr	r3, [r4, #20]
   1ae82:	9303      	str	r3, [sp, #12]
   1ae84:	6923      	ldr	r3, [r4, #16]
   1ae86:	9302      	str	r3, [sp, #8]
   1ae88:	68e3      	ldr	r3, [r4, #12]
   1ae8a:	9301      	str	r3, [sp, #4]
   1ae8c:	68a3      	ldr	r3, [r4, #8]
   1ae8e:	9300      	str	r3, [sp, #0]
   1ae90:	e9d4 2300 	ldrd	r2, r3, [r4]
   1ae94:	4631      	mov	r1, r6
   1ae96:	4628      	mov	r0, r5
   1ae98:	f7ea fe16 	bl	5ac8 <print_formatted>
		break;
   1ae9c:	e79b      	b.n	1add6 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1ae9e:	6a23      	ldr	r3, [r4, #32]
   1aea0:	9306      	str	r3, [sp, #24]
   1aea2:	69e3      	ldr	r3, [r4, #28]
   1aea4:	9305      	str	r3, [sp, #20]
   1aea6:	69a3      	ldr	r3, [r4, #24]
   1aea8:	9304      	str	r3, [sp, #16]
   1aeaa:	6963      	ldr	r3, [r4, #20]
   1aeac:	9303      	str	r3, [sp, #12]
   1aeae:	6923      	ldr	r3, [r4, #16]
   1aeb0:	9302      	str	r3, [sp, #8]
   1aeb2:	68e3      	ldr	r3, [r4, #12]
   1aeb4:	9301      	str	r3, [sp, #4]
   1aeb6:	68a3      	ldr	r3, [r4, #8]
   1aeb8:	9300      	str	r3, [sp, #0]
   1aeba:	e9d4 2300 	ldrd	r2, r3, [r4]
   1aebe:	4631      	mov	r1, r6
   1aec0:	4628      	mov	r0, r5
   1aec2:	f7ea fe01 	bl	5ac8 <print_formatted>
		break;
   1aec6:	e786      	b.n	1add6 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1aec8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1aeca:	9307      	str	r3, [sp, #28]
   1aecc:	6a23      	ldr	r3, [r4, #32]
   1aece:	9306      	str	r3, [sp, #24]
   1aed0:	69e3      	ldr	r3, [r4, #28]
   1aed2:	9305      	str	r3, [sp, #20]
   1aed4:	69a3      	ldr	r3, [r4, #24]
   1aed6:	9304      	str	r3, [sp, #16]
   1aed8:	6963      	ldr	r3, [r4, #20]
   1aeda:	9303      	str	r3, [sp, #12]
   1aedc:	6923      	ldr	r3, [r4, #16]
   1aede:	9302      	str	r3, [sp, #8]
   1aee0:	68e3      	ldr	r3, [r4, #12]
   1aee2:	9301      	str	r3, [sp, #4]
   1aee4:	68a3      	ldr	r3, [r4, #8]
   1aee6:	9300      	str	r3, [sp, #0]
   1aee8:	e9d4 2300 	ldrd	r2, r3, [r4]
   1aeec:	4631      	mov	r1, r6
   1aeee:	4628      	mov	r0, r5
   1aef0:	f7ea fdea 	bl	5ac8 <print_formatted>
		break;
   1aef4:	e76f      	b.n	1add6 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1aef6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1aef8:	9308      	str	r3, [sp, #32]
   1aefa:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1aefc:	9307      	str	r3, [sp, #28]
   1aefe:	6a23      	ldr	r3, [r4, #32]
   1af00:	9306      	str	r3, [sp, #24]
   1af02:	69e3      	ldr	r3, [r4, #28]
   1af04:	9305      	str	r3, [sp, #20]
   1af06:	69a3      	ldr	r3, [r4, #24]
   1af08:	9304      	str	r3, [sp, #16]
   1af0a:	6963      	ldr	r3, [r4, #20]
   1af0c:	9303      	str	r3, [sp, #12]
   1af0e:	6923      	ldr	r3, [r4, #16]
   1af10:	9302      	str	r3, [sp, #8]
   1af12:	68e3      	ldr	r3, [r4, #12]
   1af14:	9301      	str	r3, [sp, #4]
   1af16:	68a3      	ldr	r3, [r4, #8]
   1af18:	9300      	str	r3, [sp, #0]
   1af1a:	e9d4 2300 	ldrd	r2, r3, [r4]
   1af1e:	4631      	mov	r1, r6
   1af20:	4628      	mov	r0, r5
   1af22:	f7ea fdd1 	bl	5ac8 <print_formatted>
		break;
   1af26:	e756      	b.n	1add6 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1af28:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1af2a:	9309      	str	r3, [sp, #36]	; 0x24
   1af2c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1af2e:	9308      	str	r3, [sp, #32]
   1af30:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1af32:	9307      	str	r3, [sp, #28]
   1af34:	6a23      	ldr	r3, [r4, #32]
   1af36:	9306      	str	r3, [sp, #24]
   1af38:	69e3      	ldr	r3, [r4, #28]
   1af3a:	9305      	str	r3, [sp, #20]
   1af3c:	69a3      	ldr	r3, [r4, #24]
   1af3e:	9304      	str	r3, [sp, #16]
   1af40:	6963      	ldr	r3, [r4, #20]
   1af42:	9303      	str	r3, [sp, #12]
   1af44:	6923      	ldr	r3, [r4, #16]
   1af46:	9302      	str	r3, [sp, #8]
   1af48:	68e3      	ldr	r3, [r4, #12]
   1af4a:	9301      	str	r3, [sp, #4]
   1af4c:	68a3      	ldr	r3, [r4, #8]
   1af4e:	9300      	str	r3, [sp, #0]
   1af50:	e9d4 2300 	ldrd	r2, r3, [r4]
   1af54:	4631      	mov	r1, r6
   1af56:	4628      	mov	r0, r5
   1af58:	f7ea fdb6 	bl	5ac8 <print_formatted>
		break;
   1af5c:	e73b      	b.n	1add6 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1af5e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1af60:	930a      	str	r3, [sp, #40]	; 0x28
   1af62:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1af64:	9309      	str	r3, [sp, #36]	; 0x24
   1af66:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1af68:	9308      	str	r3, [sp, #32]
   1af6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1af6c:	9307      	str	r3, [sp, #28]
   1af6e:	6a23      	ldr	r3, [r4, #32]
   1af70:	9306      	str	r3, [sp, #24]
   1af72:	69e3      	ldr	r3, [r4, #28]
   1af74:	9305      	str	r3, [sp, #20]
   1af76:	69a3      	ldr	r3, [r4, #24]
   1af78:	9304      	str	r3, [sp, #16]
   1af7a:	6963      	ldr	r3, [r4, #20]
   1af7c:	9303      	str	r3, [sp, #12]
   1af7e:	6923      	ldr	r3, [r4, #16]
   1af80:	9302      	str	r3, [sp, #8]
   1af82:	68e3      	ldr	r3, [r4, #12]
   1af84:	9301      	str	r3, [sp, #4]
   1af86:	68a3      	ldr	r3, [r4, #8]
   1af88:	9300      	str	r3, [sp, #0]
   1af8a:	e9d4 2300 	ldrd	r2, r3, [r4]
   1af8e:	4631      	mov	r1, r6
   1af90:	4628      	mov	r0, r5
   1af92:	f7ea fd99 	bl	5ac8 <print_formatted>
		break;
   1af96:	e71e      	b.n	1add6 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1af98:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1af9a:	930b      	str	r3, [sp, #44]	; 0x2c
   1af9c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1af9e:	930a      	str	r3, [sp, #40]	; 0x28
   1afa0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1afa2:	9309      	str	r3, [sp, #36]	; 0x24
   1afa4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1afa6:	9308      	str	r3, [sp, #32]
   1afa8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1afaa:	9307      	str	r3, [sp, #28]
   1afac:	6a23      	ldr	r3, [r4, #32]
   1afae:	9306      	str	r3, [sp, #24]
   1afb0:	69e3      	ldr	r3, [r4, #28]
   1afb2:	9305      	str	r3, [sp, #20]
   1afb4:	69a3      	ldr	r3, [r4, #24]
   1afb6:	9304      	str	r3, [sp, #16]
   1afb8:	6963      	ldr	r3, [r4, #20]
   1afba:	9303      	str	r3, [sp, #12]
   1afbc:	6923      	ldr	r3, [r4, #16]
   1afbe:	9302      	str	r3, [sp, #8]
   1afc0:	68e3      	ldr	r3, [r4, #12]
   1afc2:	9301      	str	r3, [sp, #4]
   1afc4:	68a3      	ldr	r3, [r4, #8]
   1afc6:	9300      	str	r3, [sp, #0]
   1afc8:	e9d4 2300 	ldrd	r2, r3, [r4]
   1afcc:	4631      	mov	r1, r6
   1afce:	4628      	mov	r0, r5
   1afd0:	f7ea fd7a 	bl	5ac8 <print_formatted>
		break;
   1afd4:	e6ff      	b.n	1add6 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1afd6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1afd8:	930c      	str	r3, [sp, #48]	; 0x30
   1afda:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1afdc:	930b      	str	r3, [sp, #44]	; 0x2c
   1afde:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1afe0:	930a      	str	r3, [sp, #40]	; 0x28
   1afe2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1afe4:	9309      	str	r3, [sp, #36]	; 0x24
   1afe6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1afe8:	9308      	str	r3, [sp, #32]
   1afea:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1afec:	9307      	str	r3, [sp, #28]
   1afee:	6a23      	ldr	r3, [r4, #32]
   1aff0:	9306      	str	r3, [sp, #24]
   1aff2:	69e3      	ldr	r3, [r4, #28]
   1aff4:	9305      	str	r3, [sp, #20]
   1aff6:	69a3      	ldr	r3, [r4, #24]
   1aff8:	9304      	str	r3, [sp, #16]
   1affa:	6963      	ldr	r3, [r4, #20]
   1affc:	9303      	str	r3, [sp, #12]
   1affe:	6923      	ldr	r3, [r4, #16]
   1b000:	9302      	str	r3, [sp, #8]
   1b002:	68e3      	ldr	r3, [r4, #12]
   1b004:	9301      	str	r3, [sp, #4]
   1b006:	68a3      	ldr	r3, [r4, #8]
   1b008:	9300      	str	r3, [sp, #0]
   1b00a:	e9d4 2300 	ldrd	r2, r3, [r4]
   1b00e:	4631      	mov	r1, r6
   1b010:	4628      	mov	r0, r5
   1b012:	f7ea fd59 	bl	5ac8 <print_formatted>
}
   1b016:	e6de      	b.n	1add6 <std_print+0x78>

0001b018 <log_output_flush>:
		     output->control_block->offset,
   1b018:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   1b01a:	6881      	ldr	r1, [r0, #8]
{
   1b01c:	b510      	push	{r4, lr}
   1b01e:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   1b020:	e9d2 2300 	ldrd	r2, r3, [r2]
   1b024:	6800      	ldr	r0, [r0, #0]
   1b026:	f7ff fe8d 	bl	1ad44 <buffer_write>
	output->control_block->offset = 0;
   1b02a:	6863      	ldr	r3, [r4, #4]
   1b02c:	2200      	movs	r2, #0
   1b02e:	601a      	str	r2, [r3, #0]
}
   1b030:	bd10      	pop	{r4, pc}

0001b032 <out_func>:
{
   1b032:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   1b034:	684b      	ldr	r3, [r1, #4]
   1b036:	681a      	ldr	r2, [r3, #0]
   1b038:	68cb      	ldr	r3, [r1, #12]
   1b03a:	429a      	cmp	r2, r3
{
   1b03c:	4605      	mov	r5, r0
   1b03e:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   1b040:	d102      	bne.n	1b048 <out_func+0x16>
		log_output_flush(out_ctx);
   1b042:	4608      	mov	r0, r1
   1b044:	f7ff ffe8 	bl	1b018 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1b048:	6863      	ldr	r3, [r4, #4]
   1b04a:	f3bf 8f5b 	dmb	ish
   1b04e:	e853 2f00 	ldrex	r2, [r3]
   1b052:	1c51      	adds	r1, r2, #1
   1b054:	e843 1000 	strex	r0, r1, [r3]
   1b058:	2800      	cmp	r0, #0
   1b05a:	d1f8      	bne.n	1b04e <out_func+0x1c>
   1b05c:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   1b060:	68a3      	ldr	r3, [r4, #8]
   1b062:	549d      	strb	r5, [r3, r2]
}
   1b064:	2000      	movs	r0, #0
   1b066:	bd38      	pop	{r3, r4, r5, pc}

0001b068 <z_impl_uart_irq_tx_disable>:
	if (api->irq_tx_disable != NULL) {
   1b068:	6883      	ldr	r3, [r0, #8]
   1b06a:	6a1b      	ldr	r3, [r3, #32]
   1b06c:	b103      	cbz	r3, 1b070 <z_impl_uart_irq_tx_disable+0x8>
		api->irq_tx_disable(dev);
   1b06e:	4718      	bx	r3
}
   1b070:	4770      	bx	lr

0001b072 <tty_putchar>:
{
   1b072:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   1b076:	4604      	mov	r4, r0
   1b078:	460d      	mov	r5, r1
	res = k_sem_take(&tty->tx_sem,
   1b07a:	f100 0624 	add.w	r6, r0, #36	; 0x24
			 k_is_in_isr() ? K_NO_WAIT :
   1b07e:	f000 fe67 	bl	1bd50 <k_is_in_isr>
	res = k_sem_take(&tty->tx_sem,
   1b082:	bb98      	cbnz	r0, 1b0ec <tty_putchar+0x7a>
					 SYS_TIMEOUT_MS(tty->tx_timeout));
   1b084:	6c21      	ldr	r1, [r4, #64]	; 0x40
	res = k_sem_take(&tty->tx_sem,
   1b086:	1c4b      	adds	r3, r1, #1
   1b088:	d033      	beq.n	1b0f2 <tty_putchar+0x80>
					 SYS_TIMEOUT_MS(tty->tx_timeout));
   1b08a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   1b08e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1b092:	f240 38e7 	movw	r8, #999	; 0x3e7
   1b096:	f04f 0900 	mov.w	r9, #0
   1b09a:	fbc0 8901 	smlal	r8, r9, r0, r1
   1b09e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b0a2:	2300      	movs	r3, #0
   1b0a4:	4640      	mov	r0, r8
   1b0a6:	4649      	mov	r1, r9
   1b0a8:	f7e5 fd06 	bl	ab8 <__aeabi_uldivmod>
   1b0ac:	4602      	mov	r2, r0
   1b0ae:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   1b0b0:	4630      	mov	r0, r6
   1b0b2:	f7ef fc8b 	bl	a9cc <z_impl_k_sem_take>
	if (res < 0) {
   1b0b6:	2800      	cmp	r0, #0
   1b0b8:	db16      	blt.n	1b0e8 <tty_putchar+0x76>
	__asm__ volatile(
   1b0ba:	f04f 0320 	mov.w	r3, #32
   1b0be:	f3ef 8211 	mrs	r2, BASEPRI
   1b0c2:	f383 8811 	msr	BASEPRI, r3
   1b0c6:	f3bf 8f6f 	isb	sy
	tx_next = tty->tx_put + 1;
   1b0ca:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
	if (tx_next >= tty->tx_ringbuf_sz) {
   1b0cc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
	tx_next = tty->tx_put + 1;
   1b0ce:	1c4b      	adds	r3, r1, #1
		tx_next = 0;
   1b0d0:	4298      	cmp	r0, r3
   1b0d2:	bf98      	it	ls
   1b0d4:	2300      	movls	r3, #0
	if (tx_next == tty->tx_get) {
   1b0d6:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
   1b0d8:	4298      	cmp	r0, r3
   1b0da:	d10d      	bne.n	1b0f8 <tty_putchar+0x86>
	__asm__ volatile(
   1b0dc:	f382 8811 	msr	BASEPRI, r2
   1b0e0:	f3bf 8f6f 	isb	sy
		return -ENOSPC;
   1b0e4:	f06f 001b 	mvn.w	r0, #27
}
   1b0e8:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	res = k_sem_take(&tty->tx_sem,
   1b0ec:	2200      	movs	r2, #0
   1b0ee:	4613      	mov	r3, r2
   1b0f0:	e7de      	b.n	1b0b0 <tty_putchar+0x3e>
   1b0f2:	f04f 32ff 	mov.w	r2, #4294967295
   1b0f6:	e7fa      	b.n	1b0ee <tty_putchar+0x7c>
	tty->tx_ringbuf[tty->tx_put] = c;
   1b0f8:	6b60      	ldr	r0, [r4, #52]	; 0x34
   1b0fa:	5445      	strb	r5, [r0, r1]
	tty->tx_put = tx_next;
   1b0fc:	87e3      	strh	r3, [r4, #62]	; 0x3e
   1b0fe:	f382 8811 	msr	BASEPRI, r2
   1b102:	f3bf 8f6f 	isb	sy
	uart_irq_tx_enable(tty->uart_dev);
   1b106:	6820      	ldr	r0, [r4, #0]
	if (api->irq_tx_enable != NULL) {
   1b108:	6883      	ldr	r3, [r0, #8]
   1b10a:	69db      	ldr	r3, [r3, #28]
   1b10c:	b113      	cbz	r3, 1b114 <tty_putchar+0xa2>
		api->irq_tx_enable(dev);
   1b10e:	4798      	blx	r3
	return 0;
   1b110:	2000      	movs	r0, #0
   1b112:	e7e9      	b.n	1b0e8 <tty_putchar+0x76>
   1b114:	4618      	mov	r0, r3
   1b116:	e7e7      	b.n	1b0e8 <tty_putchar+0x76>

0001b118 <tty_uart_isr>:
{
   1b118:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1b11a:	4605      	mov	r5, r0
   1b11c:	460c      	mov	r4, r1
	if (api->irq_update == NULL) {
   1b11e:	6883      	ldr	r3, [r0, #8]
   1b120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1b122:	b103      	cbz	r3, 1b126 <tty_uart_isr+0xe>
	return api->irq_update(dev);
   1b124:	4798      	blx	r3
	if (api->irq_rx_ready == NULL) {
   1b126:	68ab      	ldr	r3, [r5, #8]
   1b128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1b12a:	b9bb      	cbnz	r3, 1b15c <tty_uart_isr+0x44>
	k_sem_give(&tty->rx_sem);
   1b12c:	1d26      	adds	r6, r4, #4
	if (api->fifo_read != NULL) {
   1b12e:	68ab      	ldr	r3, [r5, #8]
   1b130:	699b      	ldr	r3, [r3, #24]
   1b132:	b1bb      	cbz	r3, 1b164 <tty_uart_isr+0x4c>
		return api->fifo_read(dev, rx_data, size);
   1b134:	2201      	movs	r2, #1
   1b136:	f10d 0107 	add.w	r1, sp, #7
   1b13a:	4628      	mov	r0, r5
   1b13c:	4798      	blx	r3
			if (uart_fifo_read(dev, &c, 1) == 0) {
   1b13e:	b188      	cbz	r0, 1b164 <tty_uart_isr+0x4c>
	int rx_next = tty->rx_put + 1;
   1b140:	8be2      	ldrh	r2, [r4, #30]
	if (rx_next >= tty->rx_ringbuf_sz) {
   1b142:	69a1      	ldr	r1, [r4, #24]
	int rx_next = tty->rx_put + 1;
   1b144:	1c53      	adds	r3, r2, #1
		rx_next = 0;
   1b146:	4299      	cmp	r1, r3
   1b148:	bf98      	it	ls
   1b14a:	2300      	movls	r3, #0
	if (rx_next == tty->rx_get) {
   1b14c:	8ba1      	ldrh	r1, [r4, #28]
   1b14e:	4299      	cmp	r1, r3
   1b150:	d117      	bne.n	1b182 <tty_uart_isr+0x6a>
		tty_putchar(tty, '~');
   1b152:	217e      	movs	r1, #126	; 0x7e
   1b154:	4620      	mov	r0, r4
   1b156:	f7ff ff8c 	bl	1b072 <tty_putchar>
		return 1;
   1b15a:	e7e8      	b.n	1b12e <tty_uart_isr+0x16>
	return api->irq_rx_ready(dev);
   1b15c:	4628      	mov	r0, r5
   1b15e:	4798      	blx	r3
	if (uart_irq_rx_ready(dev)) {
   1b160:	2800      	cmp	r0, #0
   1b162:	d1e3      	bne.n	1b12c <tty_uart_isr+0x14>
	if (api->irq_tx_ready != NULL) {
   1b164:	68ab      	ldr	r3, [r5, #8]
   1b166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b168:	b14b      	cbz	r3, 1b17e <tty_uart_isr+0x66>
		return api->irq_tx_ready(dev);
   1b16a:	4628      	mov	r0, r5
   1b16c:	4798      	blx	r3
	if (uart_irq_tx_ready(dev)) {
   1b16e:	b130      	cbz	r0, 1b17e <tty_uart_isr+0x66>
		if (tty->tx_get == tty->tx_put) {
   1b170:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
   1b172:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
   1b174:	429a      	cmp	r2, r3
   1b176:	d10d      	bne.n	1b194 <tty_uart_isr+0x7c>
		arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_UART_IRQ_TX_DISABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_tx_disable(dev);
   1b178:	4628      	mov	r0, r5
   1b17a:	f7ff ff75 	bl	1b068 <z_impl_uart_irq_tx_disable>
}
   1b17e:	b002      	add	sp, #8
   1b180:	bd70      	pop	{r4, r5, r6, pc}
	tty->rx_ringbuf[tty->rx_put] = c;
   1b182:	6961      	ldr	r1, [r4, #20]
			tty_irq_input_hook(tty, c);
   1b184:	f89d 0007 	ldrb.w	r0, [sp, #7]
	tty->rx_ringbuf[tty->rx_put] = c;
   1b188:	5488      	strb	r0, [r1, r2]
	tty->rx_put = rx_next;
   1b18a:	83e3      	strh	r3, [r4, #30]
	z_impl_k_sem_give(sem);
   1b18c:	4630      	mov	r0, r6
   1b18e:	f7ef fbfd 	bl	a98c <z_impl_k_sem_give>
}
   1b192:	e7cc      	b.n	1b12e <tty_uart_isr+0x16>
			uart_fifo_fill(dev, &tty->tx_ringbuf[tty->tx_get++], 1);
   1b194:	1c5a      	adds	r2, r3, #1
   1b196:	87a2      	strh	r2, [r4, #60]	; 0x3c
	if (api->fifo_fill != NULL) {
   1b198:	68aa      	ldr	r2, [r5, #8]
   1b19a:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1b19c:	6956      	ldr	r6, [r2, #20]
   1b19e:	b11e      	cbz	r6, 1b1a8 <tty_uart_isr+0x90>
		return api->fifo_fill(dev, tx_data, size);
   1b1a0:	2201      	movs	r2, #1
   1b1a2:	4419      	add	r1, r3
   1b1a4:	4628      	mov	r0, r5
   1b1a6:	47b0      	blx	r6
			if (tty->tx_get >= tty->tx_ringbuf_sz) {
   1b1a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1b1aa:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
   1b1ac:	429a      	cmp	r2, r3
				tty->tx_get = 0U;
   1b1ae:	bf24      	itt	cs
   1b1b0:	2300      	movcs	r3, #0
   1b1b2:	87a3      	strhcs	r3, [r4, #60]	; 0x3c
	z_impl_k_sem_give(sem);
   1b1b4:	f104 0024 	add.w	r0, r4, #36	; 0x24
   1b1b8:	f7ef fbe8 	bl	a98c <z_impl_k_sem_give>
}
   1b1bc:	e7df      	b.n	1b17e <tty_uart_isr+0x66>

0001b1be <tty_read>:
{
   1b1be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (tty->rx_ringbuf_sz == 0U) {
   1b1c2:	6984      	ldr	r4, [r0, #24]
{
   1b1c4:	b085      	sub	sp, #20
   1b1c6:	4605      	mov	r5, r0
   1b1c8:	460e      	mov	r6, r1
   1b1ca:	4617      	mov	r7, r2
	if (tty->rx_ringbuf_sz == 0U) {
   1b1cc:	2c00      	cmp	r4, #0
   1b1ce:	d171      	bne.n	1b2b4 <tty_read+0xf6>
	uint32_t timeout = tty->rx_timeout;
   1b1d0:	f8d0 9020 	ldr.w	r9, [r0, #32]
	while (size) {
   1b1d4:	b187      	cbz	r7, 1b1f8 <tty_read+0x3a>
		res = uart_poll_in(tty->uart_dev, &c);
   1b1d6:	6828      	ldr	r0, [r5, #0]
	return api->poll_in(dev, p_char);
   1b1d8:	6883      	ldr	r3, [r0, #8]
   1b1da:	f10d 010f 	add.w	r1, sp, #15
   1b1de:	681b      	ldr	r3, [r3, #0]
   1b1e0:	4798      	blx	r3
		if (res <= -2) {
   1b1e2:	f1b0 3fff 	cmp.w	r0, #4294967295
   1b1e6:	4680      	mov	r8, r0
   1b1e8:	da0a      	bge.n	1b200 <tty_read+0x42>
			if (out_size == 0) {
   1b1ea:	b92c      	cbnz	r4, 1b1f8 <tty_read+0x3a>
				errno = res;
   1b1ec:	f000 f955 	bl	1b49a <__errno>
				return -1;
   1b1f0:	f04f 34ff 	mov.w	r4, #4294967295
				errno = res;
   1b1f4:	f8c0 8000 	str.w	r8, [r0]
}
   1b1f8:	4620      	mov	r0, r4
   1b1fa:	b005      	add	sp, #20
   1b1fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (res == 0) {
   1b200:	b958      	cbnz	r0, 1b21a <tty_read+0x5c>
			*p++ = c;
   1b202:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1b206:	f806 3b01 	strb.w	r3, [r6], #1
		if (size == 0 ||
   1b20a:	3f01      	subs	r7, #1
			out_size++;
   1b20c:	f104 0401 	add.w	r4, r4, #1
		if (size == 0 ||
   1b210:	d0f2      	beq.n	1b1f8 <tty_read+0x3a>
   1b212:	f1b9 3fff 	cmp.w	r9, #4294967295
   1b216:	d103      	bne.n	1b220 <tty_read+0x62>
   1b218:	e7dc      	b.n	1b1d4 <tty_read+0x16>
   1b21a:	f1b9 3fff 	cmp.w	r9, #4294967295
   1b21e:	d005      	beq.n	1b22c <tty_read+0x6e>
		    ((timeout != SYS_FOREVER_MS) && timeout-- == 0U)) {
   1b220:	f109 33ff 	add.w	r3, r9, #4294967295
   1b224:	f1b9 0f00 	cmp.w	r9, #0
   1b228:	d0e6      	beq.n	1b1f8 <tty_read+0x3a>
   1b22a:	4699      	mov	r9, r3
		if (res == -1) {
   1b22c:	f1b8 3fff 	cmp.w	r8, #4294967295
   1b230:	d1d0      	bne.n	1b1d4 <tty_read+0x16>
	return z_impl_k_sleep(timeout);
   1b232:	2100      	movs	r1, #0
   1b234:	2021      	movs	r0, #33	; 0x21
   1b236:	f7f0 f809 	bl	b24c <z_impl_k_sleep>
   1b23a:	e7cb      	b.n	1b1d4 <tty_read+0x16>
	res = k_sem_take(&tty->rx_sem, SYS_TIMEOUT_MS(tty->rx_timeout));
   1b23c:	6a29      	ldr	r1, [r5, #32]
   1b23e:	1c4b      	adds	r3, r1, #1
   1b240:	d034      	beq.n	1b2ac <tty_read+0xee>
   1b242:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   1b246:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1b24a:	46c3      	mov	fp, r8
   1b24c:	46cc      	mov	ip, r9
   1b24e:	fbc0 bc01 	smlal	fp, ip, r0, r1
   1b252:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b256:	2300      	movs	r3, #0
   1b258:	4658      	mov	r0, fp
   1b25a:	4661      	mov	r1, ip
   1b25c:	f7e5 fc2c 	bl	ab8 <__aeabi_uldivmod>
   1b260:	4602      	mov	r2, r0
   1b262:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   1b264:	9801      	ldr	r0, [sp, #4]
   1b266:	f7ef fbb1 	bl	a9cc <z_impl_k_sem_take>
	if (res < 0) {
   1b26a:	1e04      	subs	r4, r0, #0
   1b26c:	db2b      	blt.n	1b2c6 <tty_read+0x108>
	__asm__ volatile(
   1b26e:	f04f 0320 	mov.w	r3, #32
   1b272:	f3ef 8011 	mrs	r0, BASEPRI
   1b276:	f383 8811 	msr	BASEPRI, r3
   1b27a:	f3bf 8f6f 	isb	sy
	c = tty->rx_ringbuf[tty->rx_get++];
   1b27e:	8baa      	ldrh	r2, [r5, #28]
   1b280:	6969      	ldr	r1, [r5, #20]
   1b282:	1c53      	adds	r3, r2, #1
   1b284:	b29b      	uxth	r3, r3
   1b286:	83ab      	strh	r3, [r5, #28]
   1b288:	5c8a      	ldrb	r2, [r1, r2]
	if (tty->rx_get >= tty->rx_ringbuf_sz) {
   1b28a:	69a9      	ldr	r1, [r5, #24]
   1b28c:	428b      	cmp	r3, r1
		tty->rx_get = 0U;
   1b28e:	bf24      	itt	cs
   1b290:	2300      	movcs	r3, #0
   1b292:	83ab      	strhcs	r3, [r5, #28]
	__asm__ volatile(
   1b294:	f380 8811 	msr	BASEPRI, r0
   1b298:	f3bf 8f6f 	isb	sy
		*p++ = (uint8_t)res;
   1b29c:	f806 200a 	strb.w	r2, [r6, sl]
		out_size++;
   1b2a0:	f10a 0a01 	add.w	sl, sl, #1
	while (size--) {
   1b2a4:	45ba      	cmp	sl, r7
   1b2a6:	d1c9      	bne.n	1b23c <tty_read+0x7e>
	return out_size;
   1b2a8:	4654      	mov	r4, sl
   1b2aa:	e7a5      	b.n	1b1f8 <tty_read+0x3a>
	res = k_sem_take(&tty->rx_sem, SYS_TIMEOUT_MS(tty->rx_timeout));
   1b2ac:	f04f 32ff 	mov.w	r2, #4294967295
   1b2b0:	4613      	mov	r3, r2
   1b2b2:	e7d7      	b.n	1b264 <tty_read+0xa6>
   1b2b4:	1d03      	adds	r3, r0, #4
	size_t out_size = 0;
   1b2b6:	f04f 0a00 	mov.w	sl, #0
	res = k_sem_take(&tty->rx_sem, SYS_TIMEOUT_MS(tty->rx_timeout));
   1b2ba:	9301      	str	r3, [sp, #4]
   1b2bc:	f240 38e7 	movw	r8, #999	; 0x3e7
   1b2c0:	f04f 0900 	mov.w	r9, #0
   1b2c4:	e7ee      	b.n	1b2a4 <tty_read+0xe6>
			if (out_size == 0) {
   1b2c6:	f1ba 0f00 	cmp.w	sl, #0
   1b2ca:	d1ed      	bne.n	1b2a8 <tty_read+0xea>
				errno = -res;
   1b2cc:	f000 f8e5 	bl	1b49a <__errno>
   1b2d0:	4263      	negs	r3, r4
   1b2d2:	6003      	str	r3, [r0, #0]
				return res;
   1b2d4:	e790      	b.n	1b1f8 <tty_read+0x3a>

0001b2d6 <tty_set_rx_buf>:

int tty_set_rx_buf(struct tty_serial *tty, void *buf, size_t size)
{
   1b2d6:	b570      	push	{r4, r5, r6, lr}
   1b2d8:	4604      	mov	r4, r0
   1b2da:	460e      	mov	r6, r1
	uart_irq_rx_disable(tty->uart_dev);
   1b2dc:	6800      	ldr	r0, [r0, #0]
{
   1b2de:	4615      	mov	r5, r2
	if (api->irq_rx_disable != NULL) {
   1b2e0:	6883      	ldr	r3, [r0, #8]
   1b2e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b2e4:	b103      	cbz	r3, 1b2e8 <tty_set_rx_buf+0x12>
		api->irq_rx_disable(dev);
   1b2e6:	4798      	blx	r3

	tty->rx_ringbuf = buf;
	tty->rx_ringbuf_sz = size;
   1b2e8:	e9c4 6505 	strd	r6, r5, [r4, #20]

	if (size > 0) {
   1b2ec:	b155      	cbz	r5, 1b304 <tty_set_rx_buf+0x2e>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1b2ee:	f04f 32ff 	mov.w	r2, #4294967295
   1b2f2:	2100      	movs	r1, #0
   1b2f4:	1d20      	adds	r0, r4, #4
   1b2f6:	f000 fd46 	bl	1bd86 <z_impl_k_sem_init>
		k_sem_init(&tty->rx_sem, 0, K_SEM_MAX_LIMIT);
		uart_irq_rx_enable(tty->uart_dev);
   1b2fa:	6820      	ldr	r0, [r4, #0]
	if (api->irq_rx_enable != NULL) {
   1b2fc:	6883      	ldr	r3, [r0, #8]
   1b2fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1b300:	b103      	cbz	r3, 1b304 <tty_set_rx_buf+0x2e>
		api->irq_rx_enable(dev);
   1b302:	4798      	blx	r3
	}

	return 0;
}
   1b304:	2000      	movs	r0, #0
   1b306:	bd70      	pop	{r4, r5, r6, pc}

0001b308 <tty_set_tx_buf>:

int tty_set_tx_buf(struct tty_serial *tty, void *buf, size_t size)
{
   1b308:	b570      	push	{r4, r5, r6, lr}
   1b30a:	4604      	mov	r4, r0
   1b30c:	460e      	mov	r6, r1
   1b30e:	4615      	mov	r5, r2
	uart_irq_tx_disable(tty->uart_dev);
   1b310:	6800      	ldr	r0, [r0, #0]
   1b312:	f7ff fea9 	bl	1b068 <z_impl_uart_irq_tx_disable>

	tty->tx_ringbuf = buf;
	tty->tx_ringbuf_sz = size;
   1b316:	e9c4 650d 	strd	r6, r5, [r4, #52]	; 0x34
   1b31a:	f04f 32ff 	mov.w	r2, #4294967295
   1b31e:	18a9      	adds	r1, r5, r2
   1b320:	f104 0024 	add.w	r0, r4, #36	; 0x24
   1b324:	f000 fd2f 	bl	1bd86 <z_impl_k_sem_init>
	/* New buffer is initially empty, no need to re-enable interrupts,
	 * it will be done when needed (on first output char).
	 */

	return 0;
}
   1b328:	2000      	movs	r0, #0
   1b32a:	bd70      	pop	{r4, r5, r6, pc}

0001b32c <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   1b32c:	2200      	movs	r2, #0
   1b32e:	e9c0 2200 	strd	r2, r2, [r0]
   1b332:	6082      	str	r2, [r0, #8]
}
   1b334:	4770      	bx	lr

0001b336 <uart_poll_out>:
	api->poll_out(dev, out_char);
   1b336:	6883      	ldr	r3, [r0, #8]
   1b338:	685b      	ldr	r3, [r3, #4]
   1b33a:	4718      	bx	r3

0001b33c <debug_hook_out_nop>:
}
   1b33c:	2000      	movs	r0, #0
   1b33e:	4770      	bx	lr

0001b340 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1b340:	6902      	ldr	r2, [r0, #16]
   1b342:	b2cb      	uxtb	r3, r1
   1b344:	210c      	movs	r1, #12
   1b346:	fb03 2101 	mla	r1, r3, r1, r2
   1b34a:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
   1b34c:	f000 0007 	and.w	r0, r0, #7
   1b350:	4770      	bx	lr

0001b352 <set_off_state>:
	__asm__ volatile(
   1b352:	f04f 0320 	mov.w	r3, #32
   1b356:	f3ef 8211 	mrs	r2, BASEPRI
   1b35a:	f383 8811 	msr	BASEPRI, r3
   1b35e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1b362:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1b364:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   1b368:	d001      	beq.n	1b36e <set_off_state+0x1c>
   1b36a:	428b      	cmp	r3, r1
   1b36c:	d107      	bne.n	1b37e <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1b36e:	2301      	movs	r3, #1
   1b370:	6003      	str	r3, [r0, #0]
	int err = 0;
   1b372:	2000      	movs	r0, #0
	__asm__ volatile(
   1b374:	f382 8811 	msr	BASEPRI, r2
   1b378:	f3bf 8f6f 	isb	sy
}
   1b37c:	4770      	bx	lr
		err = -EPERM;
   1b37e:	f04f 30ff 	mov.w	r0, #4294967295
   1b382:	e7f7      	b.n	1b374 <set_off_state+0x22>

0001b384 <set_starting_state>:
{
   1b384:	b510      	push	{r4, lr}
	__asm__ volatile(
   1b386:	f04f 0320 	mov.w	r3, #32
   1b38a:	f3ef 8211 	mrs	r2, BASEPRI
   1b38e:	f383 8811 	msr	BASEPRI, r3
   1b392:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1b396:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1b398:	f003 0407 	and.w	r4, r3, #7
   1b39c:	2c01      	cmp	r4, #1
   1b39e:	d106      	bne.n	1b3ae <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1b3a0:	6001      	str	r1, [r0, #0]
	int err = 0;
   1b3a2:	2000      	movs	r0, #0
	__asm__ volatile(
   1b3a4:	f382 8811 	msr	BASEPRI, r2
   1b3a8:	f3bf 8f6f 	isb	sy
}
   1b3ac:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   1b3ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   1b3b2:	428b      	cmp	r3, r1
		err = -EALREADY;
   1b3b4:	bf14      	ite	ne
   1b3b6:	f04f 30ff 	movne.w	r0, #4294967295
   1b3ba:	f06f 0077 	mvneq.w	r0, #119	; 0x77
   1b3be:	e7f1      	b.n	1b3a4 <set_starting_state+0x20>

0001b3c0 <set_on_state>:
	__asm__ volatile(
   1b3c0:	f04f 0320 	mov.w	r3, #32
   1b3c4:	f3ef 8211 	mrs	r2, BASEPRI
   1b3c8:	f383 8811 	msr	BASEPRI, r3
   1b3cc:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1b3d0:	6803      	ldr	r3, [r0, #0]
   1b3d2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1b3d6:	f043 0302 	orr.w	r3, r3, #2
   1b3da:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1b3dc:	f382 8811 	msr	BASEPRI, r2
   1b3e0:	f3bf 8f6f 	isb	sy
}
   1b3e4:	4770      	bx	lr

0001b3e6 <onoff_started_callback>:
	return &data->mgr[type];
   1b3e6:	6900      	ldr	r0, [r0, #16]
{
   1b3e8:	b410      	push	{r4}
	return &data->mgr[type];
   1b3ea:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   1b3ec:	241c      	movs	r4, #28
   1b3ee:	fb03 0004 	mla	r0, r3, r4, r0
   1b3f2:	2100      	movs	r1, #0
}
   1b3f4:	bc10      	pop	{r4}
	notify(mgr, 0);
   1b3f6:	4710      	bx	r2

0001b3f8 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   1b3f8:	2000      	movs	r0, #0
   1b3fa:	f7ee bcf9 	b.w	9df0 <nrfx_clock_start>

0001b3fe <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1b3fe:	2000      	movs	r0, #0
   1b400:	f7ee bd28 	b.w	9e54 <nrfx_clock_stop>

0001b404 <blocking_start_callback>:
{
   1b404:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   1b406:	f7ef bac1 	b.w	a98c <z_impl_k_sem_give>

0001b40a <api_stop>:
{
   1b40a:	b538      	push	{r3, r4, r5, lr}
   1b40c:	b2c9      	uxtb	r1, r1
	err = set_off_state(&subdata->flags, ctx);
   1b40e:	240c      	movs	r4, #12
   1b410:	434c      	muls	r4, r1
{
   1b412:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
   1b414:	6900      	ldr	r0, [r0, #16]
   1b416:	f104 0340 	add.w	r3, r4, #64	; 0x40
   1b41a:	2180      	movs	r1, #128	; 0x80
   1b41c:	4418      	add	r0, r3
   1b41e:	f7ff ff98 	bl	1b352 <set_off_state>
	if (err < 0) {
   1b422:	2800      	cmp	r0, #0
   1b424:	db04      	blt.n	1b430 <api_stop+0x26>
	get_sub_config(dev, type)->stop();
   1b426:	6869      	ldr	r1, [r5, #4]
   1b428:	440c      	add	r4, r1
   1b42a:	6863      	ldr	r3, [r4, #4]
   1b42c:	4798      	blx	r3
	return 0;
   1b42e:	2000      	movs	r0, #0
}
   1b430:	bd38      	pop	{r3, r4, r5, pc}

0001b432 <api_start>:
{
   1b432:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b436:	b2c9      	uxtb	r1, r1
	err = set_starting_state(&subdata->flags, ctx);
   1b438:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   1b43a:	6905      	ldr	r5, [r0, #16]
	err = set_starting_state(&subdata->flags, ctx);
   1b43c:	434c      	muls	r4, r1
{
   1b43e:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   1b440:	f104 0040 	add.w	r0, r4, #64	; 0x40
   1b444:	2180      	movs	r1, #128	; 0x80
   1b446:	4428      	add	r0, r5
{
   1b448:	4690      	mov	r8, r2
   1b44a:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
   1b44c:	f7ff ff9a 	bl	1b384 <set_starting_state>
	if (err < 0) {
   1b450:	2800      	cmp	r0, #0
   1b452:	db06      	blt.n	1b462 <api_start+0x30>
	subdata->cb = cb;
   1b454:	4425      	add	r5, r4
	subdata->user_data = user_data;
   1b456:	e9c5 870e 	strd	r8, r7, [r5, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   1b45a:	6873      	ldr	r3, [r6, #4]
   1b45c:	591b      	ldr	r3, [r3, r4]
   1b45e:	4798      	blx	r3
	return 0;
   1b460:	2000      	movs	r0, #0
}
   1b462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001b466 <sys_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   1b466:	4770      	bx	lr

0001b468 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   1b468:	4770      	bx	lr

0001b46a <sys_clock_disable>:
   1b46a:	4770      	bx	lr

0001b46c <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
   1b46c:	2000      	movs	r0, #0
   1b46e:	f7e9 bfc9 	b.w	5404 <sys_reboot>

0001b472 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1b472:	2100      	movs	r1, #0
   1b474:	2001      	movs	r0, #1
   1b476:	f7eb bac5 	b.w	6a04 <z_arm_fatal_error>

0001b47a <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1b47a:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   1b47c:	6800      	ldr	r0, [r0, #0]
   1b47e:	f7eb bac1 	b.w	6a04 <z_arm_fatal_error>

0001b482 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   1b482:	b508      	push	{r3, lr}
	handler();
   1b484:	f7eb faf6 	bl	6a74 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   1b488:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   1b48c:	f7eb bd8e 	b.w	6fac <z_arm_exc_exit>

0001b490 <malloc_prepare>:
}
   1b490:	2000      	movs	r0, #0
   1b492:	4770      	bx	lr

0001b494 <_stdout_hook_default>:
}
   1b494:	f04f 30ff 	mov.w	r0, #4294967295
   1b498:	4770      	bx	lr

0001b49a <__errno>:
		/* coverity[OVERRUN] */
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   1b49a:	f7ee bf7d 	b.w	a398 <z_impl_z_errno>

0001b49e <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   1b49e:	b084      	sub	sp, #16
   1b4a0:	ab04      	add	r3, sp, #16
   1b4a2:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   1b4a6:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1b4aa:	2b06      	cmp	r3, #6
   1b4ac:	d108      	bne.n	1b4c0 <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   1b4ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1b4b2:	2201      	movs	r2, #1
   1b4b4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   1b4b8:	f3bf 8f4f 	dsb	sy
        __WFE();
   1b4bc:	bf20      	wfe
    while (true)
   1b4be:	e7fd      	b.n	1b4bc <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   1b4c0:	b004      	add	sp, #16
   1b4c2:	4770      	bx	lr

0001b4c4 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   1b4c4:	b084      	sub	sp, #16
   1b4c6:	ab04      	add	r3, sp, #16
   1b4c8:	e903 0007 	stmdb	r3, {r0, r1, r2}
   1b4cc:	2300      	movs	r3, #0
   1b4ce:	f383 8811 	msr	BASEPRI, r3
   1b4d2:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   1b4d6:	b004      	add	sp, #16
   1b4d8:	4770      	bx	lr

0001b4da <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
   1b4da:	b570      	push	{r4, r5, r6, lr}
   1b4dc:	460e      	mov	r6, r1
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1b4de:	6801      	ldr	r1, [r0, #0]
{
   1b4e0:	4615      	mov	r5, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1b4e2:	b189      	cbz	r1, 1b508 <gpio_fire_callbacks+0x2e>
	return node->next;
   1b4e4:	680c      	ldr	r4, [r1, #0]
   1b4e6:	2c00      	cmp	r4, #0
   1b4e8:	bf38      	it	cc
   1b4ea:	2400      	movcc	r4, #0
		if (cb->pin_mask & pins) {
   1b4ec:	688a      	ldr	r2, [r1, #8]
   1b4ee:	402a      	ands	r2, r5
   1b4f0:	d002      	beq.n	1b4f8 <gpio_fire_callbacks+0x1e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   1b4f2:	684b      	ldr	r3, [r1, #4]
   1b4f4:	4630      	mov	r0, r6
   1b4f6:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1b4f8:	b134      	cbz	r4, 1b508 <gpio_fire_callbacks+0x2e>
   1b4fa:	6823      	ldr	r3, [r4, #0]
   1b4fc:	2b00      	cmp	r3, #0
   1b4fe:	bf38      	it	cc
   1b500:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1b502:	4621      	mov	r1, r4
   1b504:	461c      	mov	r4, r3
   1b506:	e7f1      	b.n	1b4ec <gpio_fire_callbacks+0x12>
		}
	}
}
   1b508:	bd70      	pop	{r4, r5, r6, pc}

0001b50a <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1b50a:	6843      	ldr	r3, [r0, #4]
   1b50c:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   1b50e:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   1b512:	600b      	str	r3, [r1, #0]
}
   1b514:	2000      	movs	r0, #0
   1b516:	4770      	bx	lr

0001b518 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1b518:	6843      	ldr	r3, [r0, #4]
   1b51a:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   1b51c:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   1b520:	4042      	eors	r2, r0
   1b522:	400a      	ands	r2, r1
   1b524:	4042      	eors	r2, r0
    p_reg->OUT = value;
   1b526:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   1b52a:	2000      	movs	r0, #0
   1b52c:	4770      	bx	lr

0001b52e <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1b52e:	6843      	ldr	r3, [r0, #4]
   1b530:	685b      	ldr	r3, [r3, #4]
}
   1b532:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   1b534:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   1b538:	4770      	bx	lr

0001b53a <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1b53a:	6843      	ldr	r3, [r0, #4]
   1b53c:	685b      	ldr	r3, [r3, #4]
}
   1b53e:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   1b540:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   1b544:	4770      	bx	lr

0001b546 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1b546:	6843      	ldr	r3, [r0, #4]
   1b548:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   1b54a:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   1b54e:	404b      	eors	r3, r1
    p_reg->OUT = value;
   1b550:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   1b554:	2000      	movs	r0, #0
   1b556:	4770      	bx	lr

0001b558 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1b558:	6903      	ldr	r3, [r0, #16]
Z_GENLIST_IS_EMPTY(slist)
   1b55a:	6858      	ldr	r0, [r3, #4]
{
   1b55c:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   1b55e:	b158      	cbz	r0, 1b578 <gpio_nrfx_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1b560:	2400      	movs	r4, #0
   1b562:	4281      	cmp	r1, r0
   1b564:	d113      	bne.n	1b58e <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   1b566:	6808      	ldr	r0, [r1, #0]
   1b568:	b95c      	cbnz	r4, 1b582 <gpio_nrfx_manage_callback+0x2a>
   1b56a:	689c      	ldr	r4, [r3, #8]
	list->head = node;
   1b56c:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1b56e:	42a1      	cmp	r1, r4
   1b570:	d100      	bne.n	1b574 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   1b572:	6098      	str	r0, [r3, #8]
	parent->next = child;
   1b574:	2000      	movs	r0, #0
   1b576:	6008      	str	r0, [r1, #0]
	if (set) {
   1b578:	b972      	cbnz	r2, 1b598 <gpio_nrfx_manage_callback+0x40>
	return 0;
   1b57a:	2000      	movs	r0, #0
}
   1b57c:	bd30      	pop	{r4, r5, pc}
   1b57e:	4628      	mov	r0, r5
   1b580:	e7ef      	b.n	1b562 <gpio_nrfx_manage_callback+0xa>
   1b582:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1b584:	6898      	ldr	r0, [r3, #8]
   1b586:	4281      	cmp	r1, r0
	list->tail = node;
   1b588:	bf08      	it	eq
   1b58a:	609c      	streq	r4, [r3, #8]
}
   1b58c:	e7f2      	b.n	1b574 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1b58e:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1b590:	4604      	mov	r4, r0
   1b592:	2d00      	cmp	r5, #0
   1b594:	d1f3      	bne.n	1b57e <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   1b596:	b13a      	cbz	r2, 1b5a8 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   1b598:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1b59a:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   1b59c:	6898      	ldr	r0, [r3, #8]
	list->head = node;
   1b59e:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1b5a0:	2800      	cmp	r0, #0
   1b5a2:	d1ea      	bne.n	1b57a <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   1b5a4:	6099      	str	r1, [r3, #8]
}
   1b5a6:	e7e9      	b.n	1b57c <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   1b5a8:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1b5ac:	e7e6      	b.n	1b57c <gpio_nrfx_manage_callback+0x24>

0001b5ae <cfg_level_pins>:
{
   1b5ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct gpio_nrfx_data *data = get_port_data(port);
   1b5b2:	6907      	ldr	r7, [r0, #16]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   1b5b4:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
   1b5b8:	68fc      	ldr	r4, [r7, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   1b5ba:	e9d7 3205 	ldrd	r3, r2, [r7, #20]
   1b5be:	4313      	orrs	r3, r2
   1b5c0:	ea24 0403 	bic.w	r4, r4, r3
	uint32_t bit = 1U << pin;
   1b5c4:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   1b5c6:	2500      	movs	r5, #0
	while (level_pins) {
   1b5c8:	b90c      	cbnz	r4, 1b5ce <cfg_level_pins+0x20>
}
   1b5ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   1b5ce:	4226      	tst	r6, r4
   1b5d0:	d010      	beq.n	1b5f4 <cfg_level_pins+0x46>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1b5d2:	6939      	ldr	r1, [r7, #16]
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1b5d4:	f898 3008 	ldrb.w	r3, [r8, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1b5d8:	40e9      	lsrs	r1, r5
   1b5da:	f001 0101 	and.w	r1, r1, #1
   1b5de:	f1c1 0103 	rsb	r1, r1, #3
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1b5e2:	f005 001f 	and.w	r0, r5, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1b5e6:	b2c9      	uxtb	r1, r1
   1b5e8:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   1b5ec:	f7eb ff62 	bl	74b4 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   1b5f0:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   1b5f4:	3501      	adds	r5, #1
		bit <<= 1;
   1b5f6:	0076      	lsls	r6, r6, #1
   1b5f8:	e7e6      	b.n	1b5c8 <cfg_level_pins+0x1a>

0001b5fa <gpio_pin_set>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1b5fa:	2301      	movs	r3, #1
   1b5fc:	fa03 f101 	lsl.w	r1, r3, r1
   1b600:	6903      	ldr	r3, [r0, #16]
   1b602:	681b      	ldr	r3, [r3, #0]
   1b604:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   1b606:	bf18      	it	ne
   1b608:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   1b60c:	b112      	cbz	r2, 1b614 <gpio_pin_set+0x1a>
	return api->port_set_bits_raw(port, pins);
   1b60e:	6883      	ldr	r3, [r0, #8]
   1b610:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   1b612:	4718      	bx	r3
   1b614:	6883      	ldr	r3, [r0, #8]
   1b616:	691b      	ldr	r3, [r3, #16]
   1b618:	e7fb      	b.n	1b612 <gpio_pin_set+0x18>

0001b61a <_spi_context_cs_control.isra.0>:
static inline void _spi_context_cs_control(struct spi_context *ctx,
   1b61a:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
   1b61c:	6805      	ldr	r5, [r0, #0]
static inline void _spi_context_cs_control(struct spi_context *ctx,
   1b61e:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
   1b620:	b1fd      	cbz	r5, 1b662 <_spi_context_cs_control.isra.0+0x48>
   1b622:	68ab      	ldr	r3, [r5, #8]
   1b624:	b1eb      	cbz	r3, 1b662 <_spi_context_cs_control.isra.0+0x48>
   1b626:	6818      	ldr	r0, [r3, #0]
   1b628:	b1d8      	cbz	r0, 1b662 <_spi_context_cs_control.isra.0+0x48>
		if (on) {
   1b62a:	b151      	cbz	r1, 1b642 <_spi_context_cs_control.isra.0+0x28>
			gpio_pin_set(ctx->config->cs->gpio_dev,
   1b62c:	7a19      	ldrb	r1, [r3, #8]
   1b62e:	2201      	movs	r2, #1
   1b630:	f7ff ffe3 	bl	1b5fa <gpio_pin_set>
			k_busy_wait(ctx->config->cs->delay);
   1b634:	6823      	ldr	r3, [r4, #0]
   1b636:	689b      	ldr	r3, [r3, #8]
   1b638:	6858      	ldr	r0, [r3, #4]
}
   1b63a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   1b63e:	f000 bd0c 	b.w	1c05a <z_impl_k_busy_wait>
			if (!force_off &&
   1b642:	b912      	cbnz	r2, 1b64a <_spi_context_cs_control.isra.0+0x30>
   1b644:	88aa      	ldrh	r2, [r5, #4]
   1b646:	0492      	lsls	r2, r2, #18
   1b648:	d40b      	bmi.n	1b662 <_spi_context_cs_control.isra.0+0x48>
			k_busy_wait(ctx->config->cs->delay);
   1b64a:	6858      	ldr	r0, [r3, #4]
   1b64c:	f000 fd05 	bl	1c05a <z_impl_k_busy_wait>
			gpio_pin_set(ctx->config->cs->gpio_dev,
   1b650:	6823      	ldr	r3, [r4, #0]
   1b652:	689b      	ldr	r3, [r3, #8]
   1b654:	2200      	movs	r2, #0
   1b656:	7a19      	ldrb	r1, [r3, #8]
   1b658:	6818      	ldr	r0, [r3, #0]
}
   1b65a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set(ctx->config->cs->gpio_dev,
   1b65e:	f7ff bfcc 	b.w	1b5fa <gpio_pin_set>
}
   1b662:	bd38      	pop	{r3, r4, r5, pc}

0001b664 <spi_context_unlock_unconditionally>:
{
   1b664:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   1b666:	2201      	movs	r2, #1
   1b668:	2100      	movs	r1, #0
{
   1b66a:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   1b66c:	f7ff ffd5 	bl	1b61a <_spi_context_cs_control.isra.0>
	if (!k_sem_count_get(&ctx->lock)) {
   1b670:	6923      	ldr	r3, [r4, #16]
   1b672:	b933      	cbnz	r3, 1b682 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
   1b674:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   1b676:	f104 0008 	add.w	r0, r4, #8
}
   1b67a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b67e:	f7ef b985 	b.w	a98c <z_impl_k_sem_give>
   1b682:	bd10      	pop	{r4, pc}

0001b684 <spi_nrfx_release>:
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   1b684:	6900      	ldr	r0, [r0, #16]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   1b686:	6803      	ldr	r3, [r0, #0]
   1b688:	428b      	cmp	r3, r1
{
   1b68a:	b510      	push	{r4, lr}
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   1b68c:	d106      	bne.n	1b69c <spi_nrfx_release+0x18>
	if (dev_data->busy) {
   1b68e:	f890 4054 	ldrb.w	r4, [r0, #84]	; 0x54
   1b692:	b934      	cbnz	r4, 1b6a2 <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   1b694:	f7ff ffe6 	bl	1b664 <spi_context_unlock_unconditionally>
	return 0;
   1b698:	4620      	mov	r0, r4
}
   1b69a:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1b69c:	f06f 0015 	mvn.w	r0, #21
   1b6a0:	e7fb      	b.n	1b69a <spi_nrfx_release+0x16>
		return -EBUSY;
   1b6a2:	f06f 000f 	mvn.w	r0, #15
   1b6a6:	e7f8      	b.n	1b69a <spi_nrfx_release+0x16>

0001b6a8 <timer_work_handler>:
	TimerIrqHandler();
   1b6a8:	f7ec bed4 	b.w	8454 <TimerIrqHandler>

0001b6ac <k_uptime_get>:
{
   1b6ac:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
   1b6ae:	f000 fcd2 	bl	1c056 <z_impl_k_uptime_ticks>
   1b6b2:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   1b6b6:	fba0 2304 	umull	r2, r3, r0, r4
   1b6ba:	fb04 3301 	mla	r3, r4, r1, r3
   1b6be:	0bd0      	lsrs	r0, r2, #15
}
   1b6c0:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   1b6c4:	0bd9      	lsrs	r1, r3, #15
   1b6c6:	bd10      	pop	{r4, pc}

0001b6c8 <RtcGetTimerValue>:
{
   1b6c8:	b508      	push	{r3, lr}
	return (uint32_t)k_uptime_get();
   1b6ca:	f7ff ffef 	bl	1b6ac <k_uptime_get>
}
   1b6ce:	bd08      	pop	{r3, pc}

0001b6d0 <RtcGetMinimumTimeout>:
}
   1b6d0:	2001      	movs	r0, #1
   1b6d2:	4770      	bx	lr

0001b6d4 <DelayMsMcu>:

void DelayMsMcu(uint32_t ms)
{
   1b6d4:	b538      	push	{r3, r4, r5, lr}
   1b6d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1b6da:	f240 34e7 	movw	r4, #999	; 0x3e7
   1b6de:	2500      	movs	r5, #0
   1b6e0:	fbe1 4500 	umlal	r4, r5, r1, r0
   1b6e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b6e8:	2300      	movs	r3, #0
   1b6ea:	4620      	mov	r0, r4
   1b6ec:	4629      	mov	r1, r5
   1b6ee:	f7e5 f9e3 	bl	ab8 <__aeabi_uldivmod>
	k_sleep(K_MSEC(ms));
}
   1b6f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return z_impl_k_sleep(timeout);
   1b6f6:	f7ef bda9 	b.w	b24c <z_impl_k_sleep>

0001b6fa <RtcMs2Tick>:

uint32_t RtcMs2Tick(uint32_t milliseconds)
{
	return milliseconds;
}
   1b6fa:	4770      	bx	lr

0001b6fc <RtcTick2Ms>:
   1b6fc:	4770      	bx	lr

0001b6fe <BoardCriticalSectionBegin>:
	__asm__ volatile(
   1b6fe:	f04f 0220 	mov.w	r2, #32
   1b702:	f3ef 8311 	mrs	r3, BASEPRI
   1b706:	f382 8811 	msr	BASEPRI, r2
   1b70a:	f3bf 8f6f 	isb	sy
	return tick;
}

void BoardCriticalSectionBegin(uint32_t *mask)
{
	*mask = irq_lock();
   1b70e:	6003      	str	r3, [r0, #0]
}
   1b710:	4770      	bx	lr

0001b712 <BoardCriticalSectionEnd>:
	__asm__ volatile(
   1b712:	6803      	ldr	r3, [r0, #0]
   1b714:	f383 8811 	msr	BASEPRI, r3
   1b718:	f3bf 8f6f 	isb	sy

void BoardCriticalSectionEnd(uint32_t *mask)
{
	irq_unlock(*mask);
}
   1b71c:	4770      	bx	lr

0001b71e <SX1276CheckRfFrequency>:
}
   1b71e:	2001      	movs	r0, #1
   1b720:	4770      	bx	lr

0001b722 <gpio_pin_set.constprop.0>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1b722:	6903      	ldr	r3, [r0, #16]
   1b724:	681b      	ldr	r3, [r3, #0]
   1b726:	2b00      	cmp	r3, #0
		value = (value != 0) ? 0 : 1;
   1b728:	bfb8      	it	lt
   1b72a:	f081 0101 	eorlt.w	r1, r1, #1
	if (value != 0)	{
   1b72e:	b121      	cbz	r1, 1b73a <gpio_pin_set.constprop.0+0x18>
	return api->port_set_bits_raw(port, pins);
   1b730:	6883      	ldr	r3, [r0, #8]
   1b732:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   1b734:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   1b738:	4718      	bx	r3
   1b73a:	6883      	ldr	r3, [r0, #8]
   1b73c:	691b      	ldr	r3, [r3, #16]
   1b73e:	e7f9      	b.n	1b734 <gpio_pin_set.constprop.0+0x12>

0001b740 <SX1276GetBoardTcxoWakeupTime>:
}
   1b740:	2000      	movs	r0, #0
   1b742:	4770      	bx	lr

0001b744 <SX1276SetAntSwLowPower>:
}
   1b744:	4770      	bx	lr

0001b746 <SX1276SetBoardTcxo>:
}
   1b746:	4770      	bx	lr

0001b748 <SX1276SetAntSw>:
   1b748:	4770      	bx	lr

0001b74a <memcpy1>:
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
}

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
   1b74a:	3801      	subs	r0, #1
   1b74c:	440a      	add	r2, r1
   1b74e:	4291      	cmp	r1, r2
   1b750:	d100      	bne.n	1b754 <memcpy1+0xa>
    {
        *dst++ = *src++;
    }
}
   1b752:	4770      	bx	lr
        *dst++ = *src++;
   1b754:	f811 3b01 	ldrb.w	r3, [r1], #1
   1b758:	f800 3f01 	strb.w	r3, [r0, #1]!
   1b75c:	e7f7      	b.n	1b74e <memcpy1+0x4>

0001b75e <TimerSetTimeout>:
    // Intentional wrap around. Works Ok if tick duration below 1ms
    return RtcTick2Ms( nowInTicks - pastInTicks );
}

static void TimerSetTimeout( TimerEvent_t *obj )
{
   1b75e:	b570      	push	{r4, r5, r6, lr}
   1b760:	4604      	mov	r4, r0
    int32_t minTicks= RtcGetMinimumTimeout( );
   1b762:	f7ff ffb5 	bl	1b6d0 <RtcGetMinimumTimeout>
    obj->IsNext2Expire = true;
   1b766:	2301      	movs	r3, #1
   1b768:	7263      	strb	r3, [r4, #9]

    // In case deadline too soon
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
   1b76a:	6826      	ldr	r6, [r4, #0]
    int32_t minTicks= RtcGetMinimumTimeout( );
   1b76c:	4605      	mov	r5, r0
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
   1b76e:	f7ec fa71 	bl	7c54 <RtcGetTimerElapsedTime>
   1b772:	4428      	add	r0, r5
   1b774:	4286      	cmp	r6, r0
   1b776:	d203      	bcs.n	1b780 <TimerSetTimeout+0x22>
    {
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
   1b778:	f7ec fa6c 	bl	7c54 <RtcGetTimerElapsedTime>
   1b77c:	4405      	add	r5, r0
   1b77e:	6025      	str	r5, [r4, #0]
    }
    RtcSetAlarm( obj->Timestamp );
   1b780:	6820      	ldr	r0, [r4, #0]
}
   1b782:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    RtcSetAlarm( obj->Timestamp );
   1b786:	f7ec ba75 	b.w	7c74 <RtcSetAlarm>

0001b78a <TimerInit>:
    obj->Timestamp = 0;
   1b78a:	2300      	movs	r3, #0
    obj->ReloadValue = 0;
   1b78c:	e9c0 3300 	strd	r3, r3, [r0]
    obj->Context = NULL;
   1b790:	e9c0 1303 	strd	r1, r3, [r0, #12]
    obj->IsStarted = false;
   1b794:	8103      	strh	r3, [r0, #8]
    obj->Next = NULL;
   1b796:	6143      	str	r3, [r0, #20]
}
   1b798:	4770      	bx	lr

0001b79a <TimerSetValue>:
{
   1b79a:	b538      	push	{r3, r4, r5, lr}
   1b79c:	4605      	mov	r5, r0
    uint32_t ticks = RtcMs2Tick( value );
   1b79e:	4608      	mov	r0, r1
   1b7a0:	f7ff ffab 	bl	1b6fa <RtcMs2Tick>
   1b7a4:	4604      	mov	r4, r0
    TimerStop( obj );
   1b7a6:	4628      	mov	r0, r5
   1b7a8:	f7ec fe90 	bl	84cc <TimerStop>
    minValue = RtcGetMinimumTimeout( );
   1b7ac:	f7ff ff90 	bl	1b6d0 <RtcGetMinimumTimeout>
    if( ticks < minValue )
   1b7b0:	42a0      	cmp	r0, r4
   1b7b2:	bf38      	it	cc
   1b7b4:	4620      	movcc	r0, r4
    obj->ReloadValue = ticks;
   1b7b6:	e9c5 0000 	strd	r0, r0, [r5]
}
   1b7ba:	bd38      	pop	{r3, r4, r5, pc}

0001b7bc <TimerGetCurrentTime>:
{
   1b7bc:	b508      	push	{r3, lr}
    uint32_t now = RtcGetTimerValue( );
   1b7be:	f7ff ff83 	bl	1b6c8 <RtcGetTimerValue>
}
   1b7c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return  RtcTick2Ms( now );
   1b7c6:	f7ff bf99 	b.w	1b6fc <RtcTick2Ms>

0001b7ca <TimerGetElapsedTime>:
{
   1b7ca:	b538      	push	{r3, r4, r5, lr}
    if ( past == 0 )
   1b7cc:	4604      	mov	r4, r0
   1b7ce:	b150      	cbz	r0, 1b7e6 <TimerGetElapsedTime+0x1c>
    uint32_t nowInTicks = RtcGetTimerValue( );
   1b7d0:	f7ff ff7a 	bl	1b6c8 <RtcGetTimerValue>
   1b7d4:	4605      	mov	r5, r0
    uint32_t pastInTicks = RtcMs2Tick( past );
   1b7d6:	4620      	mov	r0, r4
   1b7d8:	f7ff ff8f 	bl	1b6fa <RtcMs2Tick>
    return RtcTick2Ms( nowInTicks - pastInTicks );
   1b7dc:	1a28      	subs	r0, r5, r0
}
   1b7de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return RtcTick2Ms( nowInTicks - pastInTicks );
   1b7e2:	f7ff bf8b 	b.w	1b6fc <RtcTick2Ms>
}
   1b7e6:	bd38      	pop	{r3, r4, r5, pc}

0001b7e8 <DelayMs>:
    DelayMs( s * 1000.0f );
}

void DelayMs( uint32_t ms )
{
    DelayMsMcu( ms );
   1b7e8:	f7ff bf74 	b.w	1b6d4 <DelayMsMcu>

0001b7ec <SX1276Write>:
{
   1b7ec:	b507      	push	{r0, r1, r2, lr}
    SX1276WriteBuffer( addr, &data, 1 );
   1b7ee:	2201      	movs	r2, #1
{
   1b7f0:	f88d 1007 	strb.w	r1, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
   1b7f4:	f10d 0107 	add.w	r1, sp, #7
   1b7f8:	f7ec fd4c 	bl	8294 <SX1276WriteBuffer>
}
   1b7fc:	b003      	add	sp, #12
   1b7fe:	f85d fb04 	ldr.w	pc, [sp], #4

0001b802 <SX1276Read>:
{
   1b802:	b507      	push	{r0, r1, r2, lr}
    SX1276ReadBuffer( addr, &data, 1 );
   1b804:	2201      	movs	r2, #1
   1b806:	f10d 0107 	add.w	r1, sp, #7
   1b80a:	f7ec fc7b 	bl	8104 <SX1276ReadBuffer>
}
   1b80e:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1b812:	b003      	add	sp, #12
   1b814:	f85d fb04 	ldr.w	pc, [sp], #4

0001b818 <SX1276SetOpMode>:
{
   1b818:	b510      	push	{r4, lr}
    if( opMode == RF_OPMODE_SLEEP )
   1b81a:	4604      	mov	r4, r0
        SX1276SetAntSwLowPower( true );
   1b81c:	2001      	movs	r0, #1
    if( opMode == RF_OPMODE_SLEEP )
   1b81e:	b964      	cbnz	r4, 1b83a <SX1276SetOpMode+0x22>
        SX1276SetAntSwLowPower( true );
   1b820:	f7ff ff90 	bl	1b744 <SX1276SetAntSwLowPower>
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
   1b824:	2001      	movs	r0, #1
   1b826:	f7ff ffec 	bl	1b802 <SX1276Read>
   1b82a:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
   1b82e:	4321      	orrs	r1, r4
   1b830:	2001      	movs	r0, #1
}
   1b832:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
   1b836:	f7ff bfd9 	b.w	1b7ec <SX1276Write>
        SX1276SetBoardTcxo( true );
   1b83a:	f7ff ff84 	bl	1b746 <SX1276SetBoardTcxo>
        SX1276SetAntSwLowPower( false );
   1b83e:	2000      	movs	r0, #0
   1b840:	f7ff ff80 	bl	1b744 <SX1276SetAntSwLowPower>
        SX1276SetAntSw( opMode );
   1b844:	4620      	mov	r0, r4
   1b846:	f7ff ff7f 	bl	1b748 <SX1276SetAntSw>
   1b84a:	e7eb      	b.n	1b824 <SX1276SetOpMode+0xc>

0001b84c <SX1276IsChannelFree>:
{
   1b84c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b84e:	4616      	mov	r6, r2
   1b850:	461d      	mov	r5, r3
   1b852:	460c      	mov	r4, r1
   1b854:	4607      	mov	r7, r0
    SX1276SetSleep( );
   1b856:	f7ed f9cb 	bl	8bf0 <SX1276SetSleep>
    SX1276SetModem( MODEM_FSK );
   1b85a:	2000      	movs	r0, #0
   1b85c:	f7ed fc04 	bl	9068 <SX1276SetModem>
    SX1276SetChannel( freq );
   1b860:	4638      	mov	r0, r7
   1b862:	f7ec ff01 	bl	8668 <SX1276SetChannel>
    SX1276Write( REG_RXBW, GetFskBandwidthRegValue( rxBandwidth ) );
   1b866:	4620      	mov	r0, r4
   1b868:	f7ec fe5c 	bl	8524 <GetFskBandwidthRegValue>
   1b86c:	4604      	mov	r4, r0
   1b86e:	4601      	mov	r1, r0
   1b870:	2012      	movs	r0, #18
   1b872:	f7ff ffbb 	bl	1b7ec <SX1276Write>
    SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( rxBandwidth ) );
   1b876:	4621      	mov	r1, r4
   1b878:	2013      	movs	r0, #19
   1b87a:	f7ff ffb7 	bl	1b7ec <SX1276Write>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
   1b87e:	2005      	movs	r0, #5
   1b880:	f7ff ffca 	bl	1b818 <SX1276SetOpMode>
    DelayMs( 1 );
   1b884:	2001      	movs	r0, #1
   1b886:	f7ff ffaf 	bl	1b7e8 <DelayMs>
    carrierSenseTime = TimerGetCurrentTime( );
   1b88a:	f7ff ff97 	bl	1b7bc <TimerGetCurrentTime>
   1b88e:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
   1b890:	4620      	mov	r0, r4
   1b892:	f7ff ff9a 	bl	1b7ca <TimerGetElapsedTime>
   1b896:	42a8      	cmp	r0, r5
   1b898:	d304      	bcc.n	1b8a4 <SX1276IsChannelFree+0x58>
    bool status = true;
   1b89a:	2401      	movs	r4, #1
    SX1276SetSleep( );
   1b89c:	f7ed f9a8 	bl	8bf0 <SX1276SetSleep>
}
   1b8a0:	4620      	mov	r0, r4
   1b8a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rssi = SX1276ReadRssi( MODEM_FSK );
   1b8a4:	2000      	movs	r0, #0
   1b8a6:	f7ed fbbb 	bl	9020 <SX1276ReadRssi>
        if( rssi > rssiThresh )
   1b8aa:	42b0      	cmp	r0, r6
   1b8ac:	ddf0      	ble.n	1b890 <SX1276IsChannelFree+0x44>
            status = false;
   1b8ae:	2400      	movs	r4, #0
   1b8b0:	e7f4      	b.n	1b89c <SX1276IsChannelFree+0x50>

0001b8b2 <SX1276Random>:
{
   1b8b2:	b538      	push	{r3, r4, r5, lr}
    SX1276SetModem( MODEM_LORA );
   1b8b4:	2001      	movs	r0, #1
   1b8b6:	f7ed fbd7 	bl	9068 <SX1276SetModem>
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
   1b8ba:	21ff      	movs	r1, #255	; 0xff
   1b8bc:	2011      	movs	r0, #17
   1b8be:	f7ff ff95 	bl	1b7ec <SX1276Write>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
   1b8c2:	2005      	movs	r0, #5
   1b8c4:	f7ff ffa8 	bl	1b818 <SX1276SetOpMode>
   1b8c8:	2400      	movs	r4, #0
    uint32_t rnd = 0;
   1b8ca:	4625      	mov	r5, r4
        DelayMs( 1 );
   1b8cc:	2001      	movs	r0, #1
   1b8ce:	f7ff ff8b 	bl	1b7e8 <DelayMs>
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
   1b8d2:	202c      	movs	r0, #44	; 0x2c
   1b8d4:	f7ff ff95 	bl	1b802 <SX1276Read>
   1b8d8:	f000 0001 	and.w	r0, r0, #1
   1b8dc:	40a0      	lsls	r0, r4
   1b8de:	3401      	adds	r4, #1
    for( i = 0; i < 32; i++ )
   1b8e0:	2c20      	cmp	r4, #32
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
   1b8e2:	ea45 0500 	orr.w	r5, r5, r0
    for( i = 0; i < 32; i++ )
   1b8e6:	d1f1      	bne.n	1b8cc <SX1276Random+0x1a>
    SX1276SetSleep( );
   1b8e8:	f7ed f982 	bl	8bf0 <SX1276SetSleep>
}
   1b8ec:	4628      	mov	r0, r5
   1b8ee:	bd38      	pop	{r3, r4, r5, pc}

0001b8f0 <SX1276GetWakeupTime>:
{
   1b8f0:	b508      	push	{r3, lr}
    return SX1276GetBoardTcxoWakeupTime( ) + RADIO_WAKEUP_TIME;
   1b8f2:	f7ff ff25 	bl	1b740 <SX1276GetBoardTcxoWakeupTime>
}
   1b8f6:	3001      	adds	r0, #1
   1b8f8:	bd08      	pop	{r3, pc}

0001b8fa <uarte_nrfx_isr_int>:
	return config->uarte_regs;
   1b8fa:	6843      	ldr	r3, [r0, #4]
   1b8fc:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
   1b8fe:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   1b902:	05d1      	lsls	r1, r2, #23
{
   1b904:	b410      	push	{r4}
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   1b906:	d518      	bpl.n	1b93a <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b908:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   1b90c:	b1aa      	cbz	r2, 1b93a <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
   1b90e:	f04f 0120 	mov.w	r1, #32
   1b912:	f3ef 8211 	mrs	r2, BASEPRI
   1b916:	f381 8811 	msr	BASEPRI, r1
   1b91a:	f3bf 8f6f 	isb	sy
   1b91e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1b922:	b131      	cbz	r1, 1b932 <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b924:	2100      	movs	r1, #0
   1b926:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   1b92a:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b92e:	2101      	movs	r1, #1
   1b930:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   1b932:	f382 8811 	msr	BASEPRI, r2
   1b936:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1b93a:	6842      	ldr	r2, [r0, #4]
   1b93c:	6852      	ldr	r2, [r2, #4]
   1b93e:	06d2      	lsls	r2, r2, #27
   1b940:	d51a      	bpl.n	1b978 <uarte_nrfx_isr_int+0x7e>
	__asm__ volatile(
   1b942:	f04f 0220 	mov.w	r2, #32
   1b946:	f3ef 8111 	mrs	r1, BASEPRI
   1b94a:	f382 8811 	msr	BASEPRI, r2
   1b94e:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b952:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   1b956:	b112      	cbz	r2, 1b95e <uarte_nrfx_isr_int+0x64>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1b958:	2200      	movs	r2, #0
   1b95a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
   1b95e:	6902      	ldr	r2, [r0, #16]
   1b960:	68d2      	ldr	r2, [r2, #12]
   1b962:	b10a      	cbz	r2, 1b968 <uarte_nrfx_isr_int+0x6e>
   1b964:	6912      	ldr	r2, [r2, #16]
   1b966:	b91a      	cbnz	r2, 1b970 <uarte_nrfx_isr_int+0x76>
    p_reg->INTENCLR = mask;
   1b968:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   1b96c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	__asm__ volatile(
   1b970:	f381 8811 	msr	BASEPRI, r1
   1b974:	f3bf 8f6f 	isb	sy
	if (!data->int_driven) {
   1b978:	6902      	ldr	r2, [r0, #16]
   1b97a:	68d2      	ldr	r2, [r2, #12]
   1b97c:	b15a      	cbz	r2, 1b996 <uarte_nrfx_isr_int+0x9c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b97e:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   1b982:	b151      	cbz	r1, 1b99a <uarte_nrfx_isr_int+0xa0>
		if (data->int_driven->disable_tx_irq) {
   1b984:	7b94      	ldrb	r4, [r2, #14]
		data->int_driven->fifo_fill_lock = 0;
   1b986:	2100      	movs	r1, #0
   1b988:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
   1b98a:	b134      	cbz	r4, 1b99a <uarte_nrfx_isr_int+0xa0>
    p_reg->INTENCLR = mask;
   1b98c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   1b990:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   1b994:	7391      	strb	r1, [r2, #14]
}
   1b996:	bc10      	pop	{r4}
   1b998:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b99a:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   1b99e:	b121      	cbz	r1, 1b9aa <uarte_nrfx_isr_int+0xb0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b9a0:	2100      	movs	r1, #0
   1b9a2:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
   1b9a6:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   1b9aa:	6813      	ldr	r3, [r2, #0]
   1b9ac:	2b00      	cmp	r3, #0
   1b9ae:	d0f2      	beq.n	1b996 <uarte_nrfx_isr_int+0x9c>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   1b9b0:	6851      	ldr	r1, [r2, #4]
}
   1b9b2:	bc10      	pop	{r4}
		data->int_driven->cb(dev, data->int_driven->cb_data);
   1b9b4:	4718      	bx	r3

0001b9b6 <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
   1b9b6:	6902      	ldr	r2, [r0, #16]
{
   1b9b8:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   1b9ba:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   1b9be:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1b9c2:	2000      	movs	r0, #0
   1b9c4:	4770      	bx	lr

0001b9c6 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   1b9c6:	6843      	ldr	r3, [r0, #4]
   1b9c8:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1b9ca:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1b9ce:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1b9d2:	4770      	bx	lr

0001b9d4 <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   1b9d4:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   1b9d6:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b9d8:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1b9dc:	b940      	cbnz	r0, 1b9f0 <is_tx_ready+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   1b9de:	6852      	ldr	r2, [r2, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1b9e0:	0712      	lsls	r2, r2, #28
   1b9e2:	d406      	bmi.n	1b9f2 <is_tx_ready+0x1e>
   1b9e4:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   1b9e8:	3800      	subs	r0, #0
   1b9ea:	bf18      	it	ne
   1b9ec:	2001      	movne	r0, #1
   1b9ee:	4770      	bx	lr
   1b9f0:	2001      	movs	r0, #1
}
   1b9f2:	4770      	bx	lr

0001b9f4 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   1b9f4:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   1b9f6:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   1b9f8:	681b      	ldr	r3, [r3, #0]
   1b9fa:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1b9fe:	b148      	cbz	r0, 1ba14 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
   1ba00:	7d52      	ldrb	r2, [r2, #21]
   1ba02:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ba04:	2000      	movs	r0, #0
   1ba06:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1ba0a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ba0e:	2201      	movs	r2, #1
   1ba10:	601a      	str	r2, [r3, #0]
	return 0;
   1ba12:	4770      	bx	lr
		return -1;
   1ba14:	f04f 30ff 	mov.w	r0, #4294967295
}
   1ba18:	4770      	bx	lr

0001ba1a <uarte_nrfx_fifo_read>:
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1ba1a:	2a00      	cmp	r2, #0
{
   1ba1c:	b510      	push	{r4, lr}
   1ba1e:	4604      	mov	r4, r0
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1ba20:	dd0f      	ble.n	1ba42 <uarte_nrfx_fifo_read+0x28>
	return config->uarte_regs;
   1ba22:	6843      	ldr	r3, [r0, #4]
   1ba24:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ba26:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1ba2a:	b148      	cbz	r0, 1ba40 <uarte_nrfx_fifo_read+0x26>
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   1ba2c:	6922      	ldr	r2, [r4, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ba2e:	2000      	movs	r0, #0
   1ba30:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1ba34:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   1ba38:	7d52      	ldrb	r2, [r2, #21]
   1ba3a:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ba3c:	2001      	movs	r0, #1
   1ba3e:	6018      	str	r0, [r3, #0]
}
   1ba40:	bd10      	pop	{r4, pc}
	int num_rx = 0;
   1ba42:	2000      	movs	r0, #0
   1ba44:	e7fc      	b.n	1ba40 <uarte_nrfx_fifo_read+0x26>

0001ba46 <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
   1ba46:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1ba48:	6901      	ldr	r1, [r0, #16]
	return config->uarte_regs;
   1ba4a:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   1ba4c:	f04f 0020 	mov.w	r0, #32
   1ba50:	f3ef 8311 	mrs	r3, BASEPRI
   1ba54:	f380 8811 	msr	BASEPRI, r0
   1ba58:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   1ba5c:	68c9      	ldr	r1, [r1, #12]
   1ba5e:	2000      	movs	r0, #0
   1ba60:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   1ba62:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   1ba66:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   1ba6a:	f383 8811 	msr	BASEPRI, r3
   1ba6e:	f3bf 8f6f 	isb	sy
}
   1ba72:	4770      	bx	lr

0001ba74 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   1ba74:	6903      	ldr	r3, [r0, #16]
   1ba76:	68db      	ldr	r3, [r3, #12]
   1ba78:	2201      	movs	r2, #1
   1ba7a:	739a      	strb	r2, [r3, #14]
}
   1ba7c:	4770      	bx	lr

0001ba7e <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
   1ba7e:	6903      	ldr	r3, [r0, #16]
   1ba80:	68db      	ldr	r3, [r3, #12]
   1ba82:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   1ba84:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   1ba88:	b962      	cbnz	r2, 1baa4 <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
   1ba8a:	6842      	ldr	r2, [r0, #4]
   1ba8c:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ba8e:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   1ba92:	b140      	cbz	r0, 1baa6 <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
   1ba94:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
	if (ready) {
   1ba98:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   1ba9c:	d003      	beq.n	1baa6 <uarte_nrfx_irq_tx_ready_complete+0x28>
		data->int_driven->fifo_fill_lock = 0;
   1ba9e:	6119      	str	r1, [r3, #16]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   1baa0:	2001      	movs	r0, #1
   1baa2:	4770      	bx	lr
   1baa4:	2000      	movs	r0, #0
}
   1baa6:	4770      	bx	lr

0001baa8 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   1baa8:	6843      	ldr	r3, [r0, #4]
   1baaa:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1baac:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   1bab0:	3800      	subs	r0, #0
   1bab2:	bf18      	it	ne
   1bab4:	2001      	movne	r0, #1
   1bab6:	4770      	bx	lr

0001bab8 <uarte_nrfx_irq_rx_enable>:
	return config->uarte_regs;
   1bab8:	6843      	ldr	r3, [r0, #4]
   1baba:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   1babc:	2210      	movs	r2, #16
   1babe:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1bac2:	4770      	bx	lr

0001bac4 <uarte_nrfx_irq_rx_disable>:
	return config->uarte_regs;
   1bac4:	6843      	ldr	r3, [r0, #4]
   1bac6:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   1bac8:	2210      	movs	r2, #16
   1baca:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1bace:	4770      	bx	lr

0001bad0 <uarte_nrfx_irq_err_enable>:
	return config->uarte_regs;
   1bad0:	6843      	ldr	r3, [r0, #4]
   1bad2:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   1bad4:	f44f 7200 	mov.w	r2, #512	; 0x200
   1bad8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1badc:	4770      	bx	lr

0001bade <uarte_nrfx_irq_err_disable>:
	return config->uarte_regs;
   1bade:	6843      	ldr	r3, [r0, #4]
   1bae0:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   1bae2:	f44f 7200 	mov.w	r2, #512	; 0x200
   1bae6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1baea:	4770      	bx	lr

0001baec <uarte_nrfx_irq_update>:
}
   1baec:	2001      	movs	r0, #1
   1baee:	4770      	bx	lr

0001baf0 <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   1baf0:	6903      	ldr	r3, [r0, #16]
   1baf2:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
   1baf4:	e9c3 1200 	strd	r1, r2, [r3]
}
   1baf8:	4770      	bx	lr

0001bafa <tx_start>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   1bafa:	6840      	ldr	r0, [r0, #4]
	return config->uarte_regs;
   1bafc:	6803      	ldr	r3, [r0, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1bafe:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1bb02:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1bb06:	2200      	movs	r2, #0
   1bb08:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   1bb0c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   1bb10:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   1bb14:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1bb18:	6842      	ldr	r2, [r0, #4]
   1bb1a:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1bb1c:	bf41      	itttt	mi
   1bb1e:	2208      	movmi	r2, #8
   1bb20:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
   1bb24:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
   1bb28:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1bb2c:	2201      	movs	r2, #1
   1bb2e:	609a      	str	r2, [r3, #8]
}
   1bb30:	4770      	bx	lr

0001bb32 <uarte_nrfx_fifo_fill>:
{
   1bb32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1bb34:	6906      	ldr	r6, [r0, #16]
	len = MIN(len, data->int_driven->tx_buff_size);
   1bb36:	68f3      	ldr	r3, [r6, #12]
   1bb38:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1bb3a:	f3bf 8f5b 	dmb	ish
   1bb3e:	4294      	cmp	r4, r2
   1bb40:	bfa8      	it	ge
   1bb42:	4614      	movge	r4, r2
{
   1bb44:	4605      	mov	r5, r0
   1bb46:	3310      	adds	r3, #16
   1bb48:	2201      	movs	r2, #1
   1bb4a:	e853 0f00 	ldrex	r0, [r3]
   1bb4e:	2800      	cmp	r0, #0
   1bb50:	d103      	bne.n	1bb5a <uarte_nrfx_fifo_fill+0x28>
   1bb52:	e843 2700 	strex	r7, r2, [r3]
   1bb56:	2f00      	cmp	r7, #0
   1bb58:	d1f7      	bne.n	1bb4a <uarte_nrfx_fifo_fill+0x18>
   1bb5a:	f3bf 8f5b 	dmb	ish
   1bb5e:	bf0c      	ite	eq
   1bb60:	4613      	moveq	r3, r2
   1bb62:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   1bb64:	d01d      	beq.n	1bba2 <uarte_nrfx_fifo_fill+0x70>
		return 0;
   1bb66:	461c      	mov	r4, r3
}
   1bb68:	4620      	mov	r0, r4
   1bb6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   1bb6c:	68f2      	ldr	r2, [r6, #12]
   1bb6e:	5cc8      	ldrb	r0, [r1, r3]
   1bb70:	6892      	ldr	r2, [r2, #8]
   1bb72:	54d0      	strb	r0, [r2, r3]
	for (int i = 0; i < len; i++) {
   1bb74:	3301      	adds	r3, #1
   1bb76:	42a3      	cmp	r3, r4
   1bb78:	dbf8      	blt.n	1bb6c <uarte_nrfx_fifo_fill+0x3a>
	__asm__ volatile(
   1bb7a:	f04f 0320 	mov.w	r3, #32
   1bb7e:	f3ef 8711 	mrs	r7, BASEPRI
   1bb82:	f383 8811 	msr	BASEPRI, r3
   1bb86:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   1bb8a:	4628      	mov	r0, r5
   1bb8c:	f7ff ff22 	bl	1b9d4 <is_tx_ready>
   1bb90:	68f3      	ldr	r3, [r6, #12]
   1bb92:	b940      	cbnz	r0, 1bba6 <uarte_nrfx_fifo_fill+0x74>
		data->int_driven->fifo_fill_lock = 0;
   1bb94:	6118      	str	r0, [r3, #16]
		len = 0;
   1bb96:	4604      	mov	r4, r0
	__asm__ volatile(
   1bb98:	f387 8811 	msr	BASEPRI, r7
   1bb9c:	f3bf 8f6f 	isb	sy
	return len;
   1bba0:	e7e2      	b.n	1bb68 <uarte_nrfx_fifo_fill+0x36>
	for (int i = 0; i < len; i++) {
   1bba2:	2300      	movs	r3, #0
   1bba4:	e7e7      	b.n	1bb76 <uarte_nrfx_fifo_fill+0x44>
		tx_start(dev, data->int_driven->tx_buffer, len);
   1bba6:	6899      	ldr	r1, [r3, #8]
   1bba8:	4622      	mov	r2, r4
   1bbaa:	4628      	mov	r0, r5
   1bbac:	f7ff ffa5 	bl	1bafa <tx_start>
   1bbb0:	e7f2      	b.n	1bb98 <uarte_nrfx_fifo_fill+0x66>

0001bbb2 <uarte_nrfx_irq_is_pending>:
{
   1bbb2:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   1bbb4:	6843      	ldr	r3, [r0, #4]
   1bbb6:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   1bbb8:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   1bbbc:	025b      	lsls	r3, r3, #9
{
   1bbbe:	4604      	mov	r4, r0
		||
   1bbc0:	d405      	bmi.n	1bbce <uarte_nrfx_irq_is_pending+0x1c>
   1bbc2:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
   1bbc6:	f010 0010 	ands.w	r0, r0, #16
   1bbca:	d106      	bne.n	1bbda <uarte_nrfx_irq_is_pending+0x28>
}
   1bbcc:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   1bbce:	f7ff ff56 	bl	1ba7e <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   1bbd2:	2800      	cmp	r0, #0
   1bbd4:	d0f5      	beq.n	1bbc2 <uarte_nrfx_irq_is_pending+0x10>
		||
   1bbd6:	2001      	movs	r0, #1
   1bbd8:	e7f8      	b.n	1bbcc <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   1bbda:	4620      	mov	r0, r4
   1bbdc:	f7ff ff64 	bl	1baa8 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   1bbe0:	3800      	subs	r0, #0
   1bbe2:	bf18      	it	ne
   1bbe4:	2001      	movne	r0, #1
   1bbe6:	e7f1      	b.n	1bbcc <uarte_nrfx_irq_is_pending+0x1a>

0001bbe8 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
   1bbe8:	f7ef bdfc 	b.w	b7e4 <nrf_cc3xx_platform_init_no_rng>

0001bbec <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
   1bbec:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   1bbee:	f7ea fd4b 	bl	6688 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   1bbf2:	f7ea fdfd 	bl	67f0 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
   1bbf6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
   1bbfa:	f7ef bdf3 	b.w	b7e4 <nrf_cc3xx_platform_init_no_rng>

0001bbfe <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   1bbfe:	4700      	bx	r0

0001bc00 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   1bc00:	f000 ba2b 	b.w	1c05a <z_impl_k_busy_wait>

0001bc04 <nrfx_clock_enable>:
{
   1bc04:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   1bc06:	2000      	movs	r0, #0
   1bc08:	f7ea fe6c 	bl	68e4 <arch_irq_is_enabled>
   1bc0c:	b918      	cbnz	r0, 1bc16 <nrfx_clock_enable+0x12>
}
   1bc0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   1bc12:	f7ea be57 	b.w	68c4 <arch_irq_enable>
   1bc16:	bd08      	pop	{r3, pc}

0001bc18 <nrf_gpio_pin_set>:
{
   1bc18:	b507      	push	{r0, r1, r2, lr}
   1bc1a:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1bc1c:	a801      	add	r0, sp, #4
   1bc1e:	f7ee fa21 	bl	a064 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1bc22:	9a01      	ldr	r2, [sp, #4]
   1bc24:	2301      	movs	r3, #1
   1bc26:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   1bc28:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   1bc2c:	b003      	add	sp, #12
   1bc2e:	f85d fb04 	ldr.w	pc, [sp], #4

0001bc32 <nrf_gpio_pin_clear>:
{
   1bc32:	b507      	push	{r0, r1, r2, lr}
   1bc34:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1bc36:	a801      	add	r0, sp, #4
   1bc38:	f7ee fa14 	bl	a064 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1bc3c:	9a01      	ldr	r2, [sp, #4]
   1bc3e:	2301      	movs	r3, #1
   1bc40:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   1bc42:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
   1bc46:	b003      	add	sp, #12
   1bc48:	f85d fb04 	ldr.w	pc, [sp], #4

0001bc4c <transfer_byte>:
{
   1bc4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return p_reg->RXD;
   1bc4e:	f8d0 3518 	ldr.w	r3, [r0, #1304]	; 0x518
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
   1bc52:	698a      	ldr	r2, [r1, #24]
   1bc54:	b2db      	uxtb	r3, r3
    volatile uint8_t rx_data = nrf_spi_rxd_get(p_spi);
   1bc56:	f88d 3007 	strb.w	r3, [sp, #7]
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
   1bc5a:	6a0b      	ldr	r3, [r1, #32]
   1bc5c:	4293      	cmp	r3, r2
        p_cb->evt.xfer_desc.p_rx_buffer[p_cb->bytes_transferred] = rx_data;
   1bc5e:	bf3e      	ittt	cc
   1bc60:	694a      	ldrcc	r2, [r1, #20]
   1bc62:	f89d 4007 	ldrbcc.w	r4, [sp, #7]
   1bc66:	54d4      	strbcc	r4, [r2, r3]
    ++p_cb->bytes_transferred;
   1bc68:	6a0a      	ldr	r2, [r1, #32]
    if (p_cb->abort)
   1bc6a:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
    ++p_cb->bytes_transferred;
   1bc6e:	1c53      	adds	r3, r2, #1
   1bc70:	620b      	str	r3, [r1, #32]
    size_t bytes_used = p_cb->bytes_transferred + 1;
   1bc72:	3202      	adds	r2, #2
    if (p_cb->abort)
   1bc74:	b13c      	cbz	r4, 1bc86 <transfer_byte+0x3a>
        if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   1bc76:	690c      	ldr	r4, [r1, #16]
   1bc78:	42a2      	cmp	r2, r4
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   1bc7a:	698c      	ldr	r4, [r1, #24]
            p_cb->evt.xfer_desc.tx_length = bytes_used;
   1bc7c:	bf38      	it	cc
   1bc7e:	610a      	strcc	r2, [r1, #16]
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   1bc80:	4294      	cmp	r4, r2
            p_cb->evt.xfer_desc.rx_length = bytes_used;
   1bc82:	bf88      	it	hi
   1bc84:	618a      	strhi	r2, [r1, #24]
    if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   1bc86:	690d      	ldr	r5, [r1, #16]
   1bc88:	4295      	cmp	r5, r2
   1bc8a:	d905      	bls.n	1bc98 <transfer_byte+0x4c>
        nrf_spi_txd_set(p_spi, p_cb->evt.xfer_desc.p_tx_buffer[bytes_used]);
   1bc8c:	68cb      	ldr	r3, [r1, #12]
    p_reg->TXD = data;
   1bc8e:	5c9b      	ldrb	r3, [r3, r2]
   1bc90:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
   1bc94:	2001      	movs	r0, #1
   1bc96:	e00a      	b.n	1bcae <transfer_byte+0x62>
    else if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   1bc98:	698c      	ldr	r4, [r1, #24]
   1bc9a:	4294      	cmp	r4, r2
   1bc9c:	d901      	bls.n	1bca2 <transfer_byte+0x56>
   1bc9e:	7fcb      	ldrb	r3, [r1, #31]
   1bca0:	e7f6      	b.n	1bc90 <transfer_byte+0x44>
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
   1bca2:	42ab      	cmp	r3, r5
   1bca4:	d3f6      	bcc.n	1bc94 <transfer_byte+0x48>
   1bca6:	42a3      	cmp	r3, r4
   1bca8:	bf2c      	ite	cs
   1bcaa:	2000      	movcs	r0, #0
   1bcac:	2001      	movcc	r0, #1
}
   1bcae:	b003      	add	sp, #12
   1bcb0:	bd30      	pop	{r4, r5, pc}

0001bcb2 <z_device_state_init>:
}
   1bcb2:	4770      	bx	lr

0001bcb4 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   1bcb4:	b138      	cbz	r0, 1bcc6 <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   1bcb6:	68c3      	ldr	r3, [r0, #12]
   1bcb8:	8818      	ldrh	r0, [r3, #0]
   1bcba:	f3c0 0008 	ubfx	r0, r0, #0, #9
   1bcbe:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   1bcc2:	4258      	negs	r0, r3
   1bcc4:	4158      	adcs	r0, r3
}
   1bcc6:	4770      	bx	lr

0001bcc8 <k_mem_slab_init>:
{
   1bcc8:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   1bcca:	2400      	movs	r4, #0
   1bccc:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1bcce:	ea41 0402 	orr.w	r4, r1, r2
   1bcd2:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   1bcd6:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   1bcda:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1bcdc:	d10c      	bne.n	1bcf8 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   1bcde:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1bce0:	42a3      	cmp	r3, r4
   1bce2:	d103      	bne.n	1bcec <k_mem_slab_init+0x24>
	list->tail = (sys_dnode_t *)list;
   1bce4:	e9c0 0000 	strd	r0, r0, [r0]
}
   1bce8:	2000      	movs	r0, #0
}
   1bcea:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   1bcec:	6945      	ldr	r5, [r0, #20]
   1bcee:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   1bcf0:	3401      	adds	r4, #1
		slab->free_list = p;
   1bcf2:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   1bcf4:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   1bcf6:	e7f3      	b.n	1bce0 <k_mem_slab_init+0x18>
		return -EINVAL;
   1bcf8:	f06f 0015 	mvn.w	r0, #21
	return rc;
   1bcfc:	e7f5      	b.n	1bcea <k_mem_slab_init+0x22>

0001bcfe <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1bcfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bd00:	4604      	mov	r4, r0
   1bd02:	460d      	mov	r5, r1
	__asm__ volatile(
   1bd04:	f04f 0320 	mov.w	r3, #32
   1bd08:	f3ef 8611 	mrs	r6, BASEPRI
   1bd0c:	f383 8811 	msr	BASEPRI, r3
   1bd10:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   1bd14:	6947      	ldr	r7, [r0, #20]
   1bd16:	b977      	cbnz	r7, 1bd36 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1bd18:	f000 f924 	bl	1bf64 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   1bd1c:	b158      	cbz	r0, 1bd36 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1bd1e:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1bd20:	6142      	str	r2, [r0, #20]
   1bd22:	6787      	str	r7, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
   1bd24:	f000 f8d7 	bl	1bed6 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   1bd28:	4631      	mov	r1, r6
   1bd2a:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   1bd2e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   1bd32:	f7ee bfe9 	b.w	ad08 <z_reschedule>
	**(char ***) mem = slab->free_list;
   1bd36:	682b      	ldr	r3, [r5, #0]
   1bd38:	6962      	ldr	r2, [r4, #20]
   1bd3a:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   1bd3c:	682b      	ldr	r3, [r5, #0]
   1bd3e:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   1bd40:	69a3      	ldr	r3, [r4, #24]
   1bd42:	3b01      	subs	r3, #1
   1bd44:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   1bd46:	f386 8811 	msr	BASEPRI, r6
   1bd4a:	f3bf 8f6f 	isb	sy
}
   1bd4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001bd50 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1bd50:	f3ef 8005 	mrs	r0, IPSR
}
   1bd54:	3800      	subs	r0, #0
   1bd56:	bf18      	it	ne
   1bd58:	2001      	movne	r0, #1
   1bd5a:	4770      	bx	lr

0001bd5c <z_impl_k_thread_name_set>:
}
   1bd5c:	f06f 0057 	mvn.w	r0, #87	; 0x57
   1bd60:	4770      	bx	lr

0001bd62 <k_thread_name_get>:
}
   1bd62:	2000      	movs	r0, #0
   1bd64:	4770      	bx	lr

0001bd66 <z_impl_k_thread_start>:
	z_sched_start(thread);
   1bd66:	f7ef b96d 	b.w	b044 <z_sched_start>

0001bd6a <z_pm_save_idle_exit>:
{
   1bd6a:	b508      	push	{r3, lr}
	pm_system_resume();
   1bd6c:	f7ea f956 	bl	601c <pm_system_resume>
}
   1bd70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   1bd74:	f7ff bb78 	b.w	1b468 <sys_clock_idle_exit>

0001bd78 <z_impl_k_mutex_init>:
{
   1bd78:	4603      	mov	r3, r0
	mutex->owner = NULL;
   1bd7a:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   1bd7c:	e9c3 0002 	strd	r0, r0, [r3, #8]
   1bd80:	e9c3 3300 	strd	r3, r3, [r3]
}
   1bd84:	4770      	bx	lr

0001bd86 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   1bd86:	b13a      	cbz	r2, 1bd98 <z_impl_k_sem_init+0x12>
   1bd88:	428a      	cmp	r2, r1
   1bd8a:	d305      	bcc.n	1bd98 <z_impl_k_sem_init+0x12>
	sem->limit = limit;
   1bd8c:	e9c0 1202 	strd	r1, r2, [r0, #8]
   1bd90:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
   1bd94:	2000      	movs	r0, #0
   1bd96:	4770      	bx	lr
		return -EINVAL;
   1bd98:	f06f 0015 	mvn.w	r0, #21
}
   1bd9c:	4770      	bx	lr

0001bd9e <notify_queue_locked>:
	if (queue != NULL) {
   1bd9e:	b120      	cbz	r0, 1bdaa <notify_queue_locked+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   1bda0:	2200      	movs	r2, #0
   1bda2:	4611      	mov	r1, r2
   1bda4:	3088      	adds	r0, #136	; 0x88
   1bda6:	f000 b8f5 	b.w	1bf94 <z_sched_wake>
}
   1bdaa:	4770      	bx	lr

0001bdac <k_work_init>:
{
   1bdac:	b538      	push	{r3, r4, r5, lr}
   1bdae:	4604      	mov	r4, r0
   1bdb0:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   1bdb2:	2210      	movs	r2, #16
   1bdb4:	2100      	movs	r1, #0
   1bdb6:	f000 f9ce 	bl	1c156 <memset>
   1bdba:	6065      	str	r5, [r4, #4]
}
   1bdbc:	bd38      	pop	{r3, r4, r5, pc}

0001bdbe <k_work_submit_to_queue>:
{
   1bdbe:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1bdc0:	9001      	str	r0, [sp, #4]
   1bdc2:	4608      	mov	r0, r1
	__asm__ volatile(
   1bdc4:	f04f 0320 	mov.w	r3, #32
   1bdc8:	f3ef 8511 	mrs	r5, BASEPRI
   1bdcc:	f383 8811 	msr	BASEPRI, r3
   1bdd0:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   1bdd4:	a901      	add	r1, sp, #4
   1bdd6:	f7ee fec1 	bl	ab5c <submit_to_queue_locked>
   1bdda:	4604      	mov	r4, r0
	__asm__ volatile(
   1bddc:	f385 8811 	msr	BASEPRI, r5
   1bde0:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   1bde4:	2800      	cmp	r0, #0
   1bde6:	dd04      	ble.n	1bdf2 <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
   1bde8:	f7ef fa50 	bl	b28c <z_impl_k_is_preempt_thread>
   1bdec:	b108      	cbz	r0, 1bdf2 <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
   1bdee:	f7ef f99f 	bl	b130 <z_impl_k_yield>
}
   1bdf2:	4620      	mov	r0, r4
   1bdf4:	b003      	add	sp, #12
   1bdf6:	bd30      	pop	{r4, r5, pc}

0001bdf8 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   1bdf8:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1bdfc:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1bdfe:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1be00:	2300      	movs	r3, #0
	node->prev = NULL;
   1be02:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
   1be06:	4770      	bx	lr

0001be08 <unpend_thread_no_timeout>:
{
   1be08:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   1be0a:	f7ff fff5 	bl	1bdf8 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1be0e:	7b43      	ldrb	r3, [r0, #13]
   1be10:	f023 0302 	bic.w	r3, r3, #2
   1be14:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   1be16:	2300      	movs	r3, #0
   1be18:	6083      	str	r3, [r0, #8]
}
   1be1a:	bd08      	pop	{r3, pc}

0001be1c <z_unpend_thread_no_timeout>:
{
   1be1c:	b508      	push	{r3, lr}
	__asm__ volatile(
   1be1e:	f04f 0320 	mov.w	r3, #32
   1be22:	f3ef 8111 	mrs	r1, BASEPRI
   1be26:	f383 8811 	msr	BASEPRI, r3
   1be2a:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   1be2e:	f7ff ffeb 	bl	1be08 <unpend_thread_no_timeout>
	__asm__ volatile(
   1be32:	f381 8811 	msr	BASEPRI, r1
   1be36:	f3bf 8f6f 	isb	sy
}
   1be3a:	bd08      	pop	{r3, pc}

0001be3c <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1be3c:	4603      	mov	r3, r0
   1be3e:	b920      	cbnz	r0, 1be4a <z_reschedule_irqlock+0xe>
   1be40:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   1be44:	b90a      	cbnz	r2, 1be4a <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   1be46:	f7ea bce9 	b.w	681c <arch_swap>
   1be4a:	f383 8811 	msr	BASEPRI, r3
   1be4e:	f3bf 8f6f 	isb	sy
}
   1be52:	4770      	bx	lr

0001be54 <z_reschedule_unlocked>:
	__asm__ volatile(
   1be54:	f04f 0320 	mov.w	r3, #32
   1be58:	f3ef 8011 	mrs	r0, BASEPRI
   1be5c:	f383 8811 	msr	BASEPRI, r3
   1be60:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1be64:	f7ff bfea 	b.w	1be3c <z_reschedule_irqlock>

0001be68 <z_priq_dumb_best>:
{
   1be68:	4603      	mov	r3, r0
	return list->head == list;
   1be6a:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1be6c:	4283      	cmp	r3, r0
   1be6e:	d003      	beq.n	1be78 <z_priq_dumb_best+0x10>
	if (n != NULL) {
   1be70:	2800      	cmp	r0, #0
   1be72:	bf38      	it	cc
   1be74:	2000      	movcc	r0, #0
   1be76:	4770      	bx	lr
	struct k_thread *thread = NULL;
   1be78:	2000      	movs	r0, #0
}
   1be7a:	4770      	bx	lr

0001be7c <add_to_waitq_locked>:
{
   1be7c:	b538      	push	{r3, r4, r5, lr}
   1be7e:	4604      	mov	r4, r0
   1be80:	460d      	mov	r5, r1
	unready_thread(thread);
   1be82:	f7ee ff87 	bl	ad94 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   1be86:	7b63      	ldrb	r3, [r4, #13]
   1be88:	f043 0302 	orr.w	r3, r3, #2
   1be8c:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   1be8e:	b1b5      	cbz	r5, 1bebe <add_to_waitq_locked+0x42>
	return list->head == list;
   1be90:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   1be92:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1be94:	429d      	cmp	r5, r3
   1be96:	bf08      	it	eq
   1be98:	2300      	moveq	r3, #0
   1be9a:	2b00      	cmp	r3, #0
   1be9c:	bf38      	it	cc
   1be9e:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1bea0:	b19b      	cbz	r3, 1beca <add_to_waitq_locked+0x4e>
	int32_t b1 = thread_1->base.prio;
   1bea2:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   1bea6:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   1beaa:	4291      	cmp	r1, r2
   1beac:	d008      	beq.n	1bec0 <add_to_waitq_locked+0x44>
		return b2 - b1;
   1beae:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   1beb0:	2a00      	cmp	r2, #0
   1beb2:	dd05      	ble.n	1bec0 <add_to_waitq_locked+0x44>
	sys_dnode_t *const prev = successor->prev;
   1beb4:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1beb6:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1beba:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1bebc:	605c      	str	r4, [r3, #4]
}
   1bebe:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   1bec0:	686a      	ldr	r2, [r5, #4]
   1bec2:	4293      	cmp	r3, r2
   1bec4:	d001      	beq.n	1beca <add_to_waitq_locked+0x4e>
   1bec6:	681b      	ldr	r3, [r3, #0]
   1bec8:	e7ea      	b.n	1bea0 <add_to_waitq_locked+0x24>
	sys_dnode_t *const tail = list->tail;
   1beca:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   1becc:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   1bed0:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1bed2:	606c      	str	r4, [r5, #4]
   1bed4:	e7f3      	b.n	1bebe <add_to_waitq_locked+0x42>

0001bed6 <z_ready_thread>:
{
   1bed6:	b510      	push	{r4, lr}
   1bed8:	f04f 0320 	mov.w	r3, #32
   1bedc:	f3ef 8411 	mrs	r4, BASEPRI
   1bee0:	f383 8811 	msr	BASEPRI, r3
   1bee4:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   1bee8:	f7ef f874 	bl	afd4 <ready_thread>
	__asm__ volatile(
   1beec:	f384 8811 	msr	BASEPRI, r4
   1bef0:	f3bf 8f6f 	isb	sy
}
   1bef4:	bd10      	pop	{r4, pc}

0001bef6 <z_thread_timeout>:
{
   1bef6:	b510      	push	{r4, lr}
   1bef8:	4601      	mov	r1, r0
	__asm__ volatile(
   1befa:	f04f 0320 	mov.w	r3, #32
   1befe:	f3ef 8411 	mrs	r4, BASEPRI
   1bf02:	f383 8811 	msr	BASEPRI, r3
   1bf06:	f3bf 8f6f 	isb	sy
		if (!killed) {
   1bf0a:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   1bf0e:	f013 0f28 	tst.w	r3, #40	; 0x28
   1bf12:	d10d      	bne.n	1bf30 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   1bf14:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   1bf18:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   1bf1a:	b10b      	cbz	r3, 1bf20 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   1bf1c:	f7ff ff74 	bl	1be08 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1bf20:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   1bf24:	f023 0314 	bic.w	r3, r3, #20
   1bf28:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   1bf2c:	f7ef f852 	bl	afd4 <ready_thread>
	__asm__ volatile(
   1bf30:	f384 8811 	msr	BASEPRI, r4
   1bf34:	f3bf 8f6f 	isb	sy
}
   1bf38:	bd10      	pop	{r4, pc}

0001bf3a <z_unpend1_no_timeout>:
{
   1bf3a:	b510      	push	{r4, lr}
	__asm__ volatile(
   1bf3c:	f04f 0320 	mov.w	r3, #32
   1bf40:	f3ef 8411 	mrs	r4, BASEPRI
   1bf44:	f383 8811 	msr	BASEPRI, r3
   1bf48:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   1bf4c:	f7ff ff8c 	bl	1be68 <z_priq_dumb_best>
		if (thread != NULL) {
   1bf50:	4601      	mov	r1, r0
   1bf52:	b108      	cbz	r0, 1bf58 <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
   1bf54:	f7ff ff58 	bl	1be08 <unpend_thread_no_timeout>
	__asm__ volatile(
   1bf58:	f384 8811 	msr	BASEPRI, r4
   1bf5c:	f3bf 8f6f 	isb	sy
}
   1bf60:	4608      	mov	r0, r1
   1bf62:	bd10      	pop	{r4, pc}

0001bf64 <z_unpend_first_thread>:
{
   1bf64:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1bf66:	f04f 0320 	mov.w	r3, #32
   1bf6a:	f3ef 8511 	mrs	r5, BASEPRI
   1bf6e:	f383 8811 	msr	BASEPRI, r3
   1bf72:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   1bf76:	f7ff ff77 	bl	1be68 <z_priq_dumb_best>
		if (thread != NULL) {
   1bf7a:	4604      	mov	r4, r0
   1bf7c:	b120      	cbz	r0, 1bf88 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
   1bf7e:	f7ff ff43 	bl	1be08 <unpend_thread_no_timeout>
   1bf82:	3018      	adds	r0, #24
   1bf84:	f000 f823 	bl	1bfce <z_abort_timeout>
	__asm__ volatile(
   1bf88:	f385 8811 	msr	BASEPRI, r5
   1bf8c:	f3bf 8f6f 	isb	sy
}
   1bf90:	4620      	mov	r0, r4
   1bf92:	bd38      	pop	{r3, r4, r5, pc}

0001bf94 <z_sched_wake>:
{
   1bf94:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1bf96:	f04f 0320 	mov.w	r3, #32
   1bf9a:	f3ef 8511 	mrs	r5, BASEPRI
   1bf9e:	f383 8811 	msr	BASEPRI, r3
   1bfa2:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   1bfa6:	f7ff ff5f 	bl	1be68 <z_priq_dumb_best>
		if (thread != NULL) {
   1bfaa:	4604      	mov	r4, r0
   1bfac:	b150      	cbz	r0, 1bfc4 <z_sched_wake+0x30>
   1bfae:	6781      	str	r1, [r0, #120]	; 0x78
   1bfb0:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
   1bfb2:	f7ff ff29 	bl	1be08 <unpend_thread_no_timeout>
   1bfb6:	3018      	adds	r0, #24
   1bfb8:	f000 f809 	bl	1bfce <z_abort_timeout>
			ready_thread(thread);
   1bfbc:	4620      	mov	r0, r4
   1bfbe:	f7ef f809 	bl	afd4 <ready_thread>
			ret = true;
   1bfc2:	2001      	movs	r0, #1
	__asm__ volatile(
   1bfc4:	f385 8811 	msr	BASEPRI, r5
   1bfc8:	f3bf 8f6f 	isb	sy
}
   1bfcc:	bd38      	pop	{r3, r4, r5, pc}

0001bfce <z_abort_timeout>:
{
   1bfce:	b510      	push	{r4, lr}
	__asm__ volatile(
   1bfd0:	f04f 0220 	mov.w	r2, #32
   1bfd4:	f3ef 8411 	mrs	r4, BASEPRI
   1bfd8:	f382 8811 	msr	BASEPRI, r2
   1bfdc:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   1bfe0:	6803      	ldr	r3, [r0, #0]
   1bfe2:	b13b      	cbz	r3, 1bff4 <z_abort_timeout+0x26>
			remove_timeout(to);
   1bfe4:	f7ef f9ea 	bl	b3bc <remove_timeout>
			ret = 0;
   1bfe8:	2000      	movs	r0, #0
	__asm__ volatile(
   1bfea:	f384 8811 	msr	BASEPRI, r4
   1bfee:	f3bf 8f6f 	isb	sy
}
   1bff2:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   1bff4:	f06f 0015 	mvn.w	r0, #21
   1bff8:	e7f7      	b.n	1bfea <z_abort_timeout+0x1c>

0001bffa <z_get_next_timeout_expiry>:
{
   1bffa:	b510      	push	{r4, lr}
	__asm__ volatile(
   1bffc:	f04f 0320 	mov.w	r3, #32
   1c000:	f3ef 8411 	mrs	r4, BASEPRI
   1c004:	f383 8811 	msr	BASEPRI, r3
   1c008:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   1c00c:	f7ef f9f0 	bl	b3f0 <next_timeout>
	__asm__ volatile(
   1c010:	f384 8811 	msr	BASEPRI, r4
   1c014:	f3bf 8f6f 	isb	sy
}
   1c018:	bd10      	pop	{r4, pc}

0001c01a <z_set_timeout_expiry>:
{
   1c01a:	b570      	push	{r4, r5, r6, lr}
   1c01c:	4604      	mov	r4, r0
   1c01e:	460d      	mov	r5, r1
	__asm__ volatile(
   1c020:	f04f 0320 	mov.w	r3, #32
   1c024:	f3ef 8611 	mrs	r6, BASEPRI
   1c028:	f383 8811 	msr	BASEPRI, r3
   1c02c:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   1c030:	f7ef f9de 	bl	b3f0 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   1c034:	2801      	cmp	r0, #1
   1c036:	dd05      	ble.n	1c044 <z_set_timeout_expiry+0x2a>
   1c038:	42a0      	cmp	r0, r4
   1c03a:	db03      	blt.n	1c044 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   1c03c:	4629      	mov	r1, r5
   1c03e:	4620      	mov	r0, r4
   1c040:	f7ea fac8 	bl	65d4 <sys_clock_set_timeout>
	__asm__ volatile(
   1c044:	f386 8811 	msr	BASEPRI, r6
   1c048:	f3bf 8f6f 	isb	sy
}
   1c04c:	bd70      	pop	{r4, r5, r6, pc}

0001c04e <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   1c04e:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   1c050:	f7ef faee 	bl	b630 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   1c054:	bd08      	pop	{r3, pc}

0001c056 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   1c056:	f7ef baeb 	b.w	b630 <sys_clock_tick_get>

0001c05a <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   1c05a:	b108      	cbz	r0, 1c060 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   1c05c:	f7eb b96a 	b.w	7334 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   1c060:	4770      	bx	lr

0001c062 <k_timer_init>:
	timer->status = 0U;
   1c062:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   1c064:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
   1c068:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   1c06c:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   1c070:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   1c074:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   1c076:	6343      	str	r3, [r0, #52]	; 0x34
}
   1c078:	4770      	bx	lr

0001c07a <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   1c07a:	b510      	push	{r4, lr}
   1c07c:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   1c07e:	f7ff ffa6 	bl	1bfce <z_abort_timeout>

	if (inactive) {
   1c082:	b9b0      	cbnz	r0, 1c0b2 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   1c084:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1c086:	b10b      	cbz	r3, 1c08c <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   1c088:	4620      	mov	r0, r4
   1c08a:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   1c08c:	f104 0018 	add.w	r0, r4, #24
   1c090:	f7ff ff53 	bl	1bf3a <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   1c094:	b168      	cbz	r0, 1c0b2 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   1c096:	f7ff ff1e 	bl	1bed6 <z_ready_thread>
	__asm__ volatile(
   1c09a:	f04f 0320 	mov.w	r3, #32
   1c09e:	f3ef 8011 	mrs	r0, BASEPRI
   1c0a2:	f383 8811 	msr	BASEPRI, r3
   1c0a6:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   1c0aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   1c0ae:	f7ff bec5 	b.w	1be3c <z_reschedule_irqlock>
   1c0b2:	bd10      	pop	{r4, pc}

0001c0b4 <k_heap_init>:
{
   1c0b4:	b410      	push	{r4}
   1c0b6:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   1c0ba:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   1c0be:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   1c0c0:	f7fe bcbb 	b.w	1aa3a <sys_heap_init>

0001c0c4 <memcmp>:
   1c0c4:	b530      	push	{r4, r5, lr}
   1c0c6:	3901      	subs	r1, #1
   1c0c8:	2400      	movs	r4, #0
   1c0ca:	42a2      	cmp	r2, r4
   1c0cc:	d101      	bne.n	1c0d2 <memcmp+0xe>
   1c0ce:	2000      	movs	r0, #0
   1c0d0:	e005      	b.n	1c0de <memcmp+0x1a>
   1c0d2:	5d03      	ldrb	r3, [r0, r4]
   1c0d4:	3401      	adds	r4, #1
   1c0d6:	5d0d      	ldrb	r5, [r1, r4]
   1c0d8:	42ab      	cmp	r3, r5
   1c0da:	d0f6      	beq.n	1c0ca <memcmp+0x6>
   1c0dc:	1b58      	subs	r0, r3, r5
   1c0de:	bd30      	pop	{r4, r5, pc}

0001c0e0 <memcpy>:
   1c0e0:	440a      	add	r2, r1
   1c0e2:	4291      	cmp	r1, r2
   1c0e4:	f100 33ff 	add.w	r3, r0, #4294967295
   1c0e8:	d100      	bne.n	1c0ec <memcpy+0xc>
   1c0ea:	4770      	bx	lr
   1c0ec:	b510      	push	{r4, lr}
   1c0ee:	f811 4b01 	ldrb.w	r4, [r1], #1
   1c0f2:	f803 4f01 	strb.w	r4, [r3, #1]!
   1c0f6:	4291      	cmp	r1, r2
   1c0f8:	d1f9      	bne.n	1c0ee <memcpy+0xe>
   1c0fa:	bd10      	pop	{r4, pc}

0001c0fc <__memcpy_chk>:
   1c0fc:	429a      	cmp	r2, r3
   1c0fe:	b508      	push	{r3, lr}
   1c100:	d901      	bls.n	1c106 <__memcpy_chk+0xa>
   1c102:	f7eb f8db 	bl	72bc <__chk_fail>
   1c106:	4281      	cmp	r1, r0
   1c108:	d804      	bhi.n	1c114 <__memcpy_chk+0x18>
   1c10a:	188b      	adds	r3, r1, r2
   1c10c:	4298      	cmp	r0, r3
   1c10e:	d3f8      	bcc.n	1c102 <__memcpy_chk+0x6>
   1c110:	4281      	cmp	r1, r0
   1c112:	d102      	bne.n	1c11a <__memcpy_chk+0x1e>
   1c114:	1883      	adds	r3, r0, r2
   1c116:	4299      	cmp	r1, r3
   1c118:	d3f3      	bcc.n	1c102 <__memcpy_chk+0x6>
   1c11a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1c11e:	f7ff bfdf 	b.w	1c0e0 <memcpy>

0001c122 <memmove>:
   1c122:	4288      	cmp	r0, r1
   1c124:	b510      	push	{r4, lr}
   1c126:	eb01 0402 	add.w	r4, r1, r2
   1c12a:	d902      	bls.n	1c132 <memmove+0x10>
   1c12c:	4284      	cmp	r4, r0
   1c12e:	4623      	mov	r3, r4
   1c130:	d807      	bhi.n	1c142 <memmove+0x20>
   1c132:	1e43      	subs	r3, r0, #1
   1c134:	42a1      	cmp	r1, r4
   1c136:	d008      	beq.n	1c14a <memmove+0x28>
   1c138:	f811 2b01 	ldrb.w	r2, [r1], #1
   1c13c:	f803 2f01 	strb.w	r2, [r3, #1]!
   1c140:	e7f8      	b.n	1c134 <memmove+0x12>
   1c142:	4402      	add	r2, r0
   1c144:	4601      	mov	r1, r0
   1c146:	428a      	cmp	r2, r1
   1c148:	d100      	bne.n	1c14c <memmove+0x2a>
   1c14a:	bd10      	pop	{r4, pc}
   1c14c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   1c150:	f802 4d01 	strb.w	r4, [r2, #-1]!
   1c154:	e7f7      	b.n	1c146 <memmove+0x24>

0001c156 <memset>:
   1c156:	4402      	add	r2, r0
   1c158:	4603      	mov	r3, r0
   1c15a:	4293      	cmp	r3, r2
   1c15c:	d100      	bne.n	1c160 <memset+0xa>
   1c15e:	4770      	bx	lr
   1c160:	f803 1b01 	strb.w	r1, [r3], #1
   1c164:	e7f9      	b.n	1c15a <memset+0x4>

0001c166 <_calloc_r>:
   1c166:	b538      	push	{r3, r4, r5, lr}
   1c168:	fb02 f501 	mul.w	r5, r2, r1
   1c16c:	4629      	mov	r1, r5
   1c16e:	f7ef fd7f 	bl	bc70 <_malloc_r>
   1c172:	4604      	mov	r4, r0
   1c174:	b118      	cbz	r0, 1c17e <_calloc_r+0x18>
   1c176:	462a      	mov	r2, r5
   1c178:	2100      	movs	r1, #0
   1c17a:	f7ff ffec 	bl	1c156 <memset>
   1c17e:	4620      	mov	r0, r4
   1c180:	bd38      	pop	{r3, r4, r5, pc}

0001c182 <__sprintf_chk>:
   1c182:	b408      	push	{r3}
   1c184:	b517      	push	{r0, r1, r2, r4, lr}
   1c186:	ab05      	add	r3, sp, #20
   1c188:	1e14      	subs	r4, r2, #0
   1c18a:	f853 1b04 	ldr.w	r1, [r3], #4
   1c18e:	9301      	str	r3, [sp, #4]
   1c190:	da07      	bge.n	1c1a2 <__sprintf_chk+0x20>
   1c192:	461a      	mov	r2, r3
   1c194:	f7ef fe2c 	bl	bdf0 <vsiprintf>
   1c198:	b003      	add	sp, #12
   1c19a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1c19e:	b001      	add	sp, #4
   1c1a0:	4770      	bx	lr
   1c1a2:	460a      	mov	r2, r1
   1c1a4:	4621      	mov	r1, r4
   1c1a6:	f7ef fdff 	bl	bda8 <vsniprintf>
   1c1aa:	2800      	cmp	r0, #0
   1c1ac:	dbf4      	blt.n	1c198 <__sprintf_chk+0x16>
   1c1ae:	42a0      	cmp	r0, r4
   1c1b0:	d3f2      	bcc.n	1c198 <__sprintf_chk+0x16>
   1c1b2:	f7eb f883 	bl	72bc <__chk_fail>

0001c1b6 <__seofread>:
   1c1b6:	2000      	movs	r0, #0
   1c1b8:	4770      	bx	lr

0001c1ba <strncpy>:
   1c1ba:	b510      	push	{r4, lr}
   1c1bc:	3901      	subs	r1, #1
   1c1be:	4603      	mov	r3, r0
   1c1c0:	b132      	cbz	r2, 1c1d0 <strncpy+0x16>
   1c1c2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1c1c6:	f803 4b01 	strb.w	r4, [r3], #1
   1c1ca:	3a01      	subs	r2, #1
   1c1cc:	2c00      	cmp	r4, #0
   1c1ce:	d1f7      	bne.n	1c1c0 <strncpy+0x6>
   1c1d0:	441a      	add	r2, r3
   1c1d2:	2100      	movs	r1, #0
   1c1d4:	4293      	cmp	r3, r2
   1c1d6:	d100      	bne.n	1c1da <strncpy+0x20>
   1c1d8:	bd10      	pop	{r4, pc}
   1c1da:	f803 1b01 	strb.w	r1, [r3], #1
   1c1de:	e7f9      	b.n	1c1d4 <strncpy+0x1a>

0001c1e0 <strnlen>:
   1c1e0:	b510      	push	{r4, lr}
   1c1e2:	4602      	mov	r2, r0
   1c1e4:	4401      	add	r1, r0
   1c1e6:	428a      	cmp	r2, r1
   1c1e8:	4613      	mov	r3, r2
   1c1ea:	d101      	bne.n	1c1f0 <strnlen+0x10>
   1c1ec:	1a18      	subs	r0, r3, r0
   1c1ee:	bd10      	pop	{r4, pc}
   1c1f0:	781c      	ldrb	r4, [r3, #0]
   1c1f2:	3201      	adds	r2, #1
   1c1f4:	2c00      	cmp	r4, #0
   1c1f6:	d1f6      	bne.n	1c1e6 <strnlen+0x6>
   1c1f8:	e7f8      	b.n	1c1ec <strnlen+0xc>

0001c1fa <_vsniprintf_r>:
   1c1fa:	b530      	push	{r4, r5, lr}
   1c1fc:	1e14      	subs	r4, r2, #0
   1c1fe:	4605      	mov	r5, r0
   1c200:	b09b      	sub	sp, #108	; 0x6c
   1c202:	4618      	mov	r0, r3
   1c204:	da05      	bge.n	1c212 <_vsniprintf_r+0x18>
   1c206:	238b      	movs	r3, #139	; 0x8b
   1c208:	602b      	str	r3, [r5, #0]
   1c20a:	f04f 30ff 	mov.w	r0, #4294967295
   1c20e:	b01b      	add	sp, #108	; 0x6c
   1c210:	bd30      	pop	{r4, r5, pc}
   1c212:	f44f 7302 	mov.w	r3, #520	; 0x208
   1c216:	f8ad 300c 	strh.w	r3, [sp, #12]
   1c21a:	bf14      	ite	ne
   1c21c:	f104 33ff 	addne.w	r3, r4, #4294967295
   1c220:	4623      	moveq	r3, r4
   1c222:	9302      	str	r3, [sp, #8]
   1c224:	9305      	str	r3, [sp, #20]
   1c226:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1c22a:	9100      	str	r1, [sp, #0]
   1c22c:	9104      	str	r1, [sp, #16]
   1c22e:	f8ad 300e 	strh.w	r3, [sp, #14]
   1c232:	4602      	mov	r2, r0
   1c234:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   1c236:	4669      	mov	r1, sp
   1c238:	4628      	mov	r0, r5
   1c23a:	f7ef fde3 	bl	be04 <_svfiprintf_r>
   1c23e:	1c43      	adds	r3, r0, #1
   1c240:	bfbc      	itt	lt
   1c242:	238b      	movlt	r3, #139	; 0x8b
   1c244:	602b      	strlt	r3, [r5, #0]
   1c246:	2c00      	cmp	r4, #0
   1c248:	d0e1      	beq.n	1c20e <_vsniprintf_r+0x14>
   1c24a:	9b00      	ldr	r3, [sp, #0]
   1c24c:	2200      	movs	r2, #0
   1c24e:	701a      	strb	r2, [r3, #0]
   1c250:	e7dd      	b.n	1c20e <_vsniprintf_r+0x14>

0001c252 <_realloc_r>:
   1c252:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c254:	4607      	mov	r7, r0
   1c256:	4614      	mov	r4, r2
   1c258:	460e      	mov	r6, r1
   1c25a:	b921      	cbnz	r1, 1c266 <_realloc_r+0x14>
   1c25c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1c260:	4611      	mov	r1, r2
   1c262:	f7ef bd05 	b.w	bc70 <_malloc_r>
   1c266:	b922      	cbnz	r2, 1c272 <_realloc_r+0x20>
   1c268:	f7ef fcb4 	bl	bbd4 <_free_r>
   1c26c:	4625      	mov	r5, r4
   1c26e:	4628      	mov	r0, r5
   1c270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c272:	f000 f9ae 	bl	1c5d2 <_malloc_usable_size_r>
   1c276:	42a0      	cmp	r0, r4
   1c278:	d20f      	bcs.n	1c29a <_realloc_r+0x48>
   1c27a:	4621      	mov	r1, r4
   1c27c:	4638      	mov	r0, r7
   1c27e:	f7ef fcf7 	bl	bc70 <_malloc_r>
   1c282:	4605      	mov	r5, r0
   1c284:	2800      	cmp	r0, #0
   1c286:	d0f2      	beq.n	1c26e <_realloc_r+0x1c>
   1c288:	4631      	mov	r1, r6
   1c28a:	4622      	mov	r2, r4
   1c28c:	f7ff ff28 	bl	1c0e0 <memcpy>
   1c290:	4631      	mov	r1, r6
   1c292:	4638      	mov	r0, r7
   1c294:	f7ef fc9e 	bl	bbd4 <_free_r>
   1c298:	e7e9      	b.n	1c26e <_realloc_r+0x1c>
   1c29a:	4635      	mov	r5, r6
   1c29c:	e7e7      	b.n	1c26e <_realloc_r+0x1c>

0001c29e <__ssputs_r>:
   1c29e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c2a2:	688e      	ldr	r6, [r1, #8]
   1c2a4:	429e      	cmp	r6, r3
   1c2a6:	4682      	mov	sl, r0
   1c2a8:	460c      	mov	r4, r1
   1c2aa:	4690      	mov	r8, r2
   1c2ac:	461f      	mov	r7, r3
   1c2ae:	d838      	bhi.n	1c322 <__ssputs_r+0x84>
   1c2b0:	898a      	ldrh	r2, [r1, #12]
   1c2b2:	f412 6f90 	tst.w	r2, #1152	; 0x480
   1c2b6:	d032      	beq.n	1c31e <__ssputs_r+0x80>
   1c2b8:	6825      	ldr	r5, [r4, #0]
   1c2ba:	6909      	ldr	r1, [r1, #16]
   1c2bc:	eba5 0901 	sub.w	r9, r5, r1
   1c2c0:	6965      	ldr	r5, [r4, #20]
   1c2c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1c2c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   1c2ca:	3301      	adds	r3, #1
   1c2cc:	444b      	add	r3, r9
   1c2ce:	106d      	asrs	r5, r5, #1
   1c2d0:	429d      	cmp	r5, r3
   1c2d2:	bf38      	it	cc
   1c2d4:	461d      	movcc	r5, r3
   1c2d6:	0553      	lsls	r3, r2, #21
   1c2d8:	d531      	bpl.n	1c33e <__ssputs_r+0xa0>
   1c2da:	4629      	mov	r1, r5
   1c2dc:	f7ef fcc8 	bl	bc70 <_malloc_r>
   1c2e0:	4606      	mov	r6, r0
   1c2e2:	b950      	cbnz	r0, 1c2fa <__ssputs_r+0x5c>
   1c2e4:	230c      	movs	r3, #12
   1c2e6:	f8ca 3000 	str.w	r3, [sl]
   1c2ea:	89a3      	ldrh	r3, [r4, #12]
   1c2ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1c2f0:	81a3      	strh	r3, [r4, #12]
   1c2f2:	f04f 30ff 	mov.w	r0, #4294967295
   1c2f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c2fa:	6921      	ldr	r1, [r4, #16]
   1c2fc:	464a      	mov	r2, r9
   1c2fe:	f7ff feef 	bl	1c0e0 <memcpy>
   1c302:	89a3      	ldrh	r3, [r4, #12]
   1c304:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   1c308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1c30c:	81a3      	strh	r3, [r4, #12]
   1c30e:	6126      	str	r6, [r4, #16]
   1c310:	6165      	str	r5, [r4, #20]
   1c312:	444e      	add	r6, r9
   1c314:	eba5 0509 	sub.w	r5, r5, r9
   1c318:	6026      	str	r6, [r4, #0]
   1c31a:	60a5      	str	r5, [r4, #8]
   1c31c:	463e      	mov	r6, r7
   1c31e:	42be      	cmp	r6, r7
   1c320:	d900      	bls.n	1c324 <__ssputs_r+0x86>
   1c322:	463e      	mov	r6, r7
   1c324:	4632      	mov	r2, r6
   1c326:	6820      	ldr	r0, [r4, #0]
   1c328:	4641      	mov	r1, r8
   1c32a:	f7ff fefa 	bl	1c122 <memmove>
   1c32e:	68a3      	ldr	r3, [r4, #8]
   1c330:	6822      	ldr	r2, [r4, #0]
   1c332:	1b9b      	subs	r3, r3, r6
   1c334:	4432      	add	r2, r6
   1c336:	60a3      	str	r3, [r4, #8]
   1c338:	6022      	str	r2, [r4, #0]
   1c33a:	2000      	movs	r0, #0
   1c33c:	e7db      	b.n	1c2f6 <__ssputs_r+0x58>
   1c33e:	462a      	mov	r2, r5
   1c340:	f7ff ff87 	bl	1c252 <_realloc_r>
   1c344:	4606      	mov	r6, r0
   1c346:	2800      	cmp	r0, #0
   1c348:	d1e1      	bne.n	1c30e <__ssputs_r+0x70>
   1c34a:	6921      	ldr	r1, [r4, #16]
   1c34c:	4650      	mov	r0, sl
   1c34e:	f7ef fc41 	bl	bbd4 <_free_r>
   1c352:	e7c7      	b.n	1c2e4 <__ssputs_r+0x46>

0001c354 <_sungetc_r>:
   1c354:	b538      	push	{r3, r4, r5, lr}
   1c356:	1c4b      	adds	r3, r1, #1
   1c358:	4614      	mov	r4, r2
   1c35a:	d103      	bne.n	1c364 <_sungetc_r+0x10>
   1c35c:	f04f 35ff 	mov.w	r5, #4294967295
   1c360:	4628      	mov	r0, r5
   1c362:	bd38      	pop	{r3, r4, r5, pc}
   1c364:	8993      	ldrh	r3, [r2, #12]
   1c366:	f023 0320 	bic.w	r3, r3, #32
   1c36a:	8193      	strh	r3, [r2, #12]
   1c36c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1c36e:	6852      	ldr	r2, [r2, #4]
   1c370:	b2cd      	uxtb	r5, r1
   1c372:	b18b      	cbz	r3, 1c398 <_sungetc_r+0x44>
   1c374:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1c376:	4293      	cmp	r3, r2
   1c378:	dd08      	ble.n	1c38c <_sungetc_r+0x38>
   1c37a:	6823      	ldr	r3, [r4, #0]
   1c37c:	1e5a      	subs	r2, r3, #1
   1c37e:	6022      	str	r2, [r4, #0]
   1c380:	f803 5c01 	strb.w	r5, [r3, #-1]
   1c384:	6863      	ldr	r3, [r4, #4]
   1c386:	3301      	adds	r3, #1
   1c388:	6063      	str	r3, [r4, #4]
   1c38a:	e7e9      	b.n	1c360 <_sungetc_r+0xc>
   1c38c:	4621      	mov	r1, r4
   1c38e:	f000 f8e6 	bl	1c55e <__submore>
   1c392:	2800      	cmp	r0, #0
   1c394:	d0f1      	beq.n	1c37a <_sungetc_r+0x26>
   1c396:	e7e1      	b.n	1c35c <_sungetc_r+0x8>
   1c398:	6921      	ldr	r1, [r4, #16]
   1c39a:	6823      	ldr	r3, [r4, #0]
   1c39c:	b151      	cbz	r1, 1c3b4 <_sungetc_r+0x60>
   1c39e:	4299      	cmp	r1, r3
   1c3a0:	d208      	bcs.n	1c3b4 <_sungetc_r+0x60>
   1c3a2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   1c3a6:	42a9      	cmp	r1, r5
   1c3a8:	d104      	bne.n	1c3b4 <_sungetc_r+0x60>
   1c3aa:	3b01      	subs	r3, #1
   1c3ac:	3201      	adds	r2, #1
   1c3ae:	6023      	str	r3, [r4, #0]
   1c3b0:	6062      	str	r2, [r4, #4]
   1c3b2:	e7d5      	b.n	1c360 <_sungetc_r+0xc>
   1c3b4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
   1c3b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
   1c3bc:	6363      	str	r3, [r4, #52]	; 0x34
   1c3be:	2303      	movs	r3, #3
   1c3c0:	63a3      	str	r3, [r4, #56]	; 0x38
   1c3c2:	4623      	mov	r3, r4
   1c3c4:	f803 5f46 	strb.w	r5, [r3, #70]!
   1c3c8:	6023      	str	r3, [r4, #0]
   1c3ca:	2301      	movs	r3, #1
   1c3cc:	e7dc      	b.n	1c388 <_sungetc_r+0x34>

0001c3ce <__ssrefill_r>:
   1c3ce:	b510      	push	{r4, lr}
   1c3d0:	460c      	mov	r4, r1
   1c3d2:	6b49      	ldr	r1, [r1, #52]	; 0x34
   1c3d4:	b169      	cbz	r1, 1c3f2 <__ssrefill_r+0x24>
   1c3d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
   1c3da:	4299      	cmp	r1, r3
   1c3dc:	d001      	beq.n	1c3e2 <__ssrefill_r+0x14>
   1c3de:	f7ef fbf9 	bl	bbd4 <_free_r>
   1c3e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1c3e4:	6063      	str	r3, [r4, #4]
   1c3e6:	2000      	movs	r0, #0
   1c3e8:	6360      	str	r0, [r4, #52]	; 0x34
   1c3ea:	b113      	cbz	r3, 1c3f2 <__ssrefill_r+0x24>
   1c3ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1c3ee:	6023      	str	r3, [r4, #0]
   1c3f0:	bd10      	pop	{r4, pc}
   1c3f2:	6923      	ldr	r3, [r4, #16]
   1c3f4:	6023      	str	r3, [r4, #0]
   1c3f6:	2300      	movs	r3, #0
   1c3f8:	6063      	str	r3, [r4, #4]
   1c3fa:	89a3      	ldrh	r3, [r4, #12]
   1c3fc:	f043 0320 	orr.w	r3, r3, #32
   1c400:	81a3      	strh	r3, [r4, #12]
   1c402:	f04f 30ff 	mov.w	r0, #4294967295
   1c406:	e7f3      	b.n	1c3f0 <__ssrefill_r+0x22>

0001c408 <_printf_common>:
   1c408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c40c:	4616      	mov	r6, r2
   1c40e:	4699      	mov	r9, r3
   1c410:	688a      	ldr	r2, [r1, #8]
   1c412:	690b      	ldr	r3, [r1, #16]
   1c414:	f8dd 8020 	ldr.w	r8, [sp, #32]
   1c418:	4293      	cmp	r3, r2
   1c41a:	bfb8      	it	lt
   1c41c:	4613      	movlt	r3, r2
   1c41e:	6033      	str	r3, [r6, #0]
   1c420:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   1c424:	4607      	mov	r7, r0
   1c426:	460c      	mov	r4, r1
   1c428:	b10a      	cbz	r2, 1c42e <_printf_common+0x26>
   1c42a:	3301      	adds	r3, #1
   1c42c:	6033      	str	r3, [r6, #0]
   1c42e:	6823      	ldr	r3, [r4, #0]
   1c430:	0699      	lsls	r1, r3, #26
   1c432:	bf42      	ittt	mi
   1c434:	6833      	ldrmi	r3, [r6, #0]
   1c436:	3302      	addmi	r3, #2
   1c438:	6033      	strmi	r3, [r6, #0]
   1c43a:	6825      	ldr	r5, [r4, #0]
   1c43c:	f015 0506 	ands.w	r5, r5, #6
   1c440:	d106      	bne.n	1c450 <_printf_common+0x48>
   1c442:	f104 0a19 	add.w	sl, r4, #25
   1c446:	68e3      	ldr	r3, [r4, #12]
   1c448:	6832      	ldr	r2, [r6, #0]
   1c44a:	1a9b      	subs	r3, r3, r2
   1c44c:	42ab      	cmp	r3, r5
   1c44e:	dc26      	bgt.n	1c49e <_printf_common+0x96>
   1c450:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   1c454:	1e13      	subs	r3, r2, #0
   1c456:	6822      	ldr	r2, [r4, #0]
   1c458:	bf18      	it	ne
   1c45a:	2301      	movne	r3, #1
   1c45c:	0692      	lsls	r2, r2, #26
   1c45e:	d42b      	bmi.n	1c4b8 <_printf_common+0xb0>
   1c460:	f104 0243 	add.w	r2, r4, #67	; 0x43
   1c464:	4649      	mov	r1, r9
   1c466:	4638      	mov	r0, r7
   1c468:	47c0      	blx	r8
   1c46a:	3001      	adds	r0, #1
   1c46c:	d01e      	beq.n	1c4ac <_printf_common+0xa4>
   1c46e:	6823      	ldr	r3, [r4, #0]
   1c470:	68e5      	ldr	r5, [r4, #12]
   1c472:	6832      	ldr	r2, [r6, #0]
   1c474:	f003 0306 	and.w	r3, r3, #6
   1c478:	2b04      	cmp	r3, #4
   1c47a:	bf08      	it	eq
   1c47c:	1aad      	subeq	r5, r5, r2
   1c47e:	68a3      	ldr	r3, [r4, #8]
   1c480:	6922      	ldr	r2, [r4, #16]
   1c482:	bf0c      	ite	eq
   1c484:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   1c488:	2500      	movne	r5, #0
   1c48a:	4293      	cmp	r3, r2
   1c48c:	bfc4      	itt	gt
   1c48e:	1a9b      	subgt	r3, r3, r2
   1c490:	18ed      	addgt	r5, r5, r3
   1c492:	2600      	movs	r6, #0
   1c494:	341a      	adds	r4, #26
   1c496:	42b5      	cmp	r5, r6
   1c498:	d11a      	bne.n	1c4d0 <_printf_common+0xc8>
   1c49a:	2000      	movs	r0, #0
   1c49c:	e008      	b.n	1c4b0 <_printf_common+0xa8>
   1c49e:	2301      	movs	r3, #1
   1c4a0:	4652      	mov	r2, sl
   1c4a2:	4649      	mov	r1, r9
   1c4a4:	4638      	mov	r0, r7
   1c4a6:	47c0      	blx	r8
   1c4a8:	3001      	adds	r0, #1
   1c4aa:	d103      	bne.n	1c4b4 <_printf_common+0xac>
   1c4ac:	f04f 30ff 	mov.w	r0, #4294967295
   1c4b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c4b4:	3501      	adds	r5, #1
   1c4b6:	e7c6      	b.n	1c446 <_printf_common+0x3e>
   1c4b8:	18e1      	adds	r1, r4, r3
   1c4ba:	1c5a      	adds	r2, r3, #1
   1c4bc:	2030      	movs	r0, #48	; 0x30
   1c4be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   1c4c2:	4422      	add	r2, r4
   1c4c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   1c4c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   1c4cc:	3302      	adds	r3, #2
   1c4ce:	e7c7      	b.n	1c460 <_printf_common+0x58>
   1c4d0:	2301      	movs	r3, #1
   1c4d2:	4622      	mov	r2, r4
   1c4d4:	4649      	mov	r1, r9
   1c4d6:	4638      	mov	r0, r7
   1c4d8:	47c0      	blx	r8
   1c4da:	3001      	adds	r0, #1
   1c4dc:	d0e6      	beq.n	1c4ac <_printf_common+0xa4>
   1c4de:	3601      	adds	r6, #1
   1c4e0:	e7d9      	b.n	1c496 <_printf_common+0x8e>

0001c4e2 <__sccl>:
   1c4e2:	b570      	push	{r4, r5, r6, lr}
   1c4e4:	780b      	ldrb	r3, [r1, #0]
   1c4e6:	4604      	mov	r4, r0
   1c4e8:	2b5e      	cmp	r3, #94	; 0x5e
   1c4ea:	bf0b      	itete	eq
   1c4ec:	784b      	ldrbeq	r3, [r1, #1]
   1c4ee:	1c48      	addne	r0, r1, #1
   1c4f0:	1c88      	addeq	r0, r1, #2
   1c4f2:	2200      	movne	r2, #0
   1c4f4:	bf08      	it	eq
   1c4f6:	2201      	moveq	r2, #1
   1c4f8:	1e61      	subs	r1, r4, #1
   1c4fa:	f104 05ff 	add.w	r5, r4, #255	; 0xff
   1c4fe:	f801 2f01 	strb.w	r2, [r1, #1]!
   1c502:	42a9      	cmp	r1, r5
   1c504:	d1fb      	bne.n	1c4fe <__sccl+0x1c>
   1c506:	b90b      	cbnz	r3, 1c50c <__sccl+0x2a>
   1c508:	3801      	subs	r0, #1
   1c50a:	bd70      	pop	{r4, r5, r6, pc}
   1c50c:	f082 0101 	eor.w	r1, r2, #1
   1c510:	54e1      	strb	r1, [r4, r3]
   1c512:	1c42      	adds	r2, r0, #1
   1c514:	f812 5c01 	ldrb.w	r5, [r2, #-1]
   1c518:	2d2d      	cmp	r5, #45	; 0x2d
   1c51a:	f102 36ff 	add.w	r6, r2, #4294967295
   1c51e:	4610      	mov	r0, r2
   1c520:	d006      	beq.n	1c530 <__sccl+0x4e>
   1c522:	2d5d      	cmp	r5, #93	; 0x5d
   1c524:	d0f1      	beq.n	1c50a <__sccl+0x28>
   1c526:	b90d      	cbnz	r5, 1c52c <__sccl+0x4a>
   1c528:	4630      	mov	r0, r6
   1c52a:	e7ee      	b.n	1c50a <__sccl+0x28>
   1c52c:	462b      	mov	r3, r5
   1c52e:	e7ef      	b.n	1c510 <__sccl+0x2e>
   1c530:	7816      	ldrb	r6, [r2, #0]
   1c532:	2e5d      	cmp	r6, #93	; 0x5d
   1c534:	d0fa      	beq.n	1c52c <__sccl+0x4a>
   1c536:	42b3      	cmp	r3, r6
   1c538:	dcf8      	bgt.n	1c52c <__sccl+0x4a>
   1c53a:	4618      	mov	r0, r3
   1c53c:	3001      	adds	r0, #1
   1c53e:	4286      	cmp	r6, r0
   1c540:	5421      	strb	r1, [r4, r0]
   1c542:	dcfb      	bgt.n	1c53c <__sccl+0x5a>
   1c544:	43d8      	mvns	r0, r3
   1c546:	4430      	add	r0, r6
   1c548:	1c5d      	adds	r5, r3, #1
   1c54a:	42b3      	cmp	r3, r6
   1c54c:	bfa8      	it	ge
   1c54e:	2000      	movge	r0, #0
   1c550:	182b      	adds	r3, r5, r0
   1c552:	3202      	adds	r2, #2
   1c554:	e7de      	b.n	1c514 <__sccl+0x32>

0001c556 <_strtol_r>:
   1c556:	f7f0 b93f 	b.w	c7d8 <_strtol_l.isra.0>

0001c55a <_strtoul_r>:
   1c55a:	f7f0 b9b7 	b.w	c8cc <_strtoul_l.isra.0>

0001c55e <__submore>:
   1c55e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c562:	460c      	mov	r4, r1
   1c564:	6b49      	ldr	r1, [r1, #52]	; 0x34
   1c566:	f104 0344 	add.w	r3, r4, #68	; 0x44
   1c56a:	4299      	cmp	r1, r3
   1c56c:	d11d      	bne.n	1c5aa <__submore+0x4c>
   1c56e:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1c572:	f7ef fb7d 	bl	bc70 <_malloc_r>
   1c576:	b918      	cbnz	r0, 1c580 <__submore+0x22>
   1c578:	f04f 30ff 	mov.w	r0, #4294967295
   1c57c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c580:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1c584:	63a3      	str	r3, [r4, #56]	; 0x38
   1c586:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   1c58a:	6360      	str	r0, [r4, #52]	; 0x34
   1c58c:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
   1c590:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   1c594:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
   1c598:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   1c59c:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
   1c5a0:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
   1c5a4:	6020      	str	r0, [r4, #0]
   1c5a6:	2000      	movs	r0, #0
   1c5a8:	e7e8      	b.n	1c57c <__submore+0x1e>
   1c5aa:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   1c5ac:	0077      	lsls	r7, r6, #1
   1c5ae:	463a      	mov	r2, r7
   1c5b0:	f7ff fe4f 	bl	1c252 <_realloc_r>
   1c5b4:	4605      	mov	r5, r0
   1c5b6:	2800      	cmp	r0, #0
   1c5b8:	d0de      	beq.n	1c578 <__submore+0x1a>
   1c5ba:	eb00 0806 	add.w	r8, r0, r6
   1c5be:	4601      	mov	r1, r0
   1c5c0:	4632      	mov	r2, r6
   1c5c2:	4640      	mov	r0, r8
   1c5c4:	f7ff fd8c 	bl	1c0e0 <memcpy>
   1c5c8:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
   1c5cc:	f8c4 8000 	str.w	r8, [r4]
   1c5d0:	e7e9      	b.n	1c5a6 <__submore+0x48>

0001c5d2 <_malloc_usable_size_r>:
   1c5d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
   1c5d6:	1f18      	subs	r0, r3, #4
   1c5d8:	2b00      	cmp	r3, #0
   1c5da:	bfbc      	itt	lt
   1c5dc:	580b      	ldrlt	r3, [r1, r0]
   1c5de:	18c0      	addlt	r0, r0, r3
   1c5e0:	4770      	bx	lr
	...

0001c5e4 <z_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   1c5e4:	f7ed bb04 	b.w	9bf0 <SystemInit>
